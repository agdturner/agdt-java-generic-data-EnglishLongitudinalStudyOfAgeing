/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.elsa.process.ELSA_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.elsa.data.generated;
public class ELSA_Wave2_Record extends ELSA_Waves1To8_Record {
protected double ADDPEN_04;
protected double ADDPEN_SPA;
protected double AIRTEMP;
protected double APOE;
protected byte ASKCEM2;
protected byte ASKCEM3;
protected byte ASKCEM4;
protected byte ASKCEM5;
protected byte ASKDCB;
protected byte ASKDCB2;
protected byte ASKDCB3;
protected byte ASKDCB4;
protected byte ASKDCB5;
protected byte ASKDCB6;
protected boolean ASKINF2;
protected boolean ASKINFO;
protected byte ASKPST;
protected byte ASKPST2;
protected byte ASKPST3;
protected boolean ASKPX1;
protected byte ASKQS;
protected byte ASKQS2;
protected byte ASKQS3;
protected boolean ASKQS4;
protected boolean ASKQS5;
protected boolean ASKQS6;
protected byte ASKRUL;
protected byte ASKRUL2;
protected byte ASKRUL3;
protected boolean ASKRUL4;
protected boolean ASKRUL5;
protected boolean ASKRUL6;
protected byte ASKSNC;
protected byte ASKSNC2;
protected byte ASKSNC3;
protected short ASTRATIF;
protected byte BEHDIA01;
protected byte BEHDIA02;
protected byte BEHDIA03;
protected byte BEHDIA04;
protected byte BEHDIA05;
protected byte BEHDIA06;
protected byte BEHDIA07;
protected byte BHEAGA;
protected byte BHEAGB;
protected byte BHEAGC;
protected byte BHEAGD;
protected byte BHEAGE;
protected byte BHEAGF;
protected byte BHEAGG;
protected byte BHEAGH;
protected byte BHEAGI;
protected byte BHEAGJ;
protected byte BHEAID1;
protected byte BHEAID2;
protected byte BHEAID3;
protected byte BHEAID4;
protected byte BHEAID5;
protected byte BHEART1;
protected byte BHEART2;
protected byte BHEART3;
protected byte BHECANA;
protected byte BHEOPT1;
protected byte BHEOPT2;
protected byte BHEOPT3;
protected byte BHEOPT4;
protected byte BHEPRK;
protected byte BHESKA;
protected byte BHESMK;
protected byte BLOODR;
protected double BMI;
protected byte BMIOBE;
protected byte BMIOK;
protected double BMIVAL;
protected byte BPCONST;
protected byte BPRESPC;
protected byte BSOUTC;
protected double BSP_04;
protected double BSP_SPA;
protected byte BSWILL;
protected byte CARERS_P_F;
protected double CARERS_P_I;
protected short CARERS_P_O;
protected short CARERS_P_T;
protected byte CARERS_R_F;
protected double CARERS_R_I;
protected short CARERS_R_O;
protected short CARERS_R_T;
protected byte CFANI;
protected double CFIB;
protected byte CFLITB;
protected byte CFLITC;
protected byte CFLITD;
protected byte CFLITE;
protected byte CFLITOC;
protected byte CFLITSK;
protected byte CFMEM;
protected byte CFMEMS;
protected byte CFMETM;
protected byte CFMETMT;
protected byte CFPASCR;
protected byte CFWHO1;
protected byte CFWHO2;
protected byte CFWHO3;
protected boolean CFWHO4;
protected byte CFWHZ1;
protected byte CFWHZ2;
protected byte CFWHZ3;
protected byte CHESTIN;
protected boolean CHINHH1;
protected double CHOL;
protected byte CLOTB;
protected boolean CONCUR;
protected byte CONFAGE;
protected byte CONSUB1;
protected byte CONSUB2;
protected byte CONSUB3;
protected byte CTC_P_F;
protected double CTC_P_I;
protected short CTC_P_O;
protected short CTC_P_T;
protected byte CTC_R_F;
protected double CTC_R_I;
protected short CTC_R_O;
protected short CTC_R_T;
protected byte CUFSIZE;
protected double CURRENTDB_04;
protected double CURRENTDB_SPA;
protected double CURRENTDC_04;
protected double CURRENTDC_SPA;
protected byte DCURPEN;
protected byte DDBDC;
protected byte DEMPPEN;
protected byte DHAGER;
protected byte DHANYPX;
protected byte DHC14;
protected byte DHCAG14;
protected short DHCBY02;
protected short DHCBY03;
protected short DHCBY04;
protected short DHCBY05;
protected short DHCBY06;
protected short DHCBY07;
protected short DHCBY08;
protected short DHCBY09;
protected short DHCBY10;
protected short DHCBY11;
protected short DHCBY12;
protected short DHCBY13;
protected short DHCBY14;
protected short DHCDY;
protected byte DHCR08;
protected byte DHCR09;
protected byte DHCR10;
protected boolean DHCR104;
protected boolean DHCR105;
protected boolean DHCR106;
protected boolean DHCR107;
protected boolean DHCR108;
protected byte DHCR11;
protected byte DHCR118;
protected boolean DHCR119;
protected boolean DHCR12;
protected boolean DHCR120;
protected boolean DHCR121;
protected boolean DHCR122;
protected boolean DHCR123;
protected boolean DHCR124;
protected byte DHCR134;
protected boolean DHCR135;
protected boolean DHCR136;
protected boolean DHCR137;
protected boolean DHCR138;
protected boolean DHCR139;
protected boolean DHCR140;
protected byte DHCR147;
protected boolean DHCR148;
protected boolean DHCR149;
protected byte DHCR150;
protected boolean DHCR151;
protected boolean DHCR152;
protected boolean DHCR153;
protected boolean DHCR154;
protected boolean DHCR155;
protected boolean DHCR156;
protected boolean DHCR163;
protected boolean DHCR164;
protected boolean DHCR165;
protected byte DHCR166;
protected boolean DHCR167;
protected boolean DHCR168;
protected boolean DHCR169;
protected boolean DHCR170;
protected boolean DHCR171;
protected boolean DHCR172;
protected byte DHCR178;
protected boolean DHCR179;
protected boolean DHCR180;
protected boolean DHCR181;
protected boolean DHCR182;
protected boolean DHCR183;
protected boolean DHCR184;
protected boolean DHCR185;
protected boolean DHCR186;
protected boolean DHCR187;
protected boolean DHCR188;
protected byte DHCR194;
protected boolean DHCR195;
protected boolean DHCR196;
protected boolean DHCR197;
protected boolean DHCR198;
protected boolean DHCR199;
protected boolean DHCR200;
protected boolean DHCR201;
protected boolean DHCR202;
protected boolean DHCR203;
protected boolean DHCR204;
protected byte DHCR209;
protected byte DHCR210;
protected boolean DHCR211;
protected boolean DHCR212;
protected boolean DHCR213;
protected boolean DHCR214;
protected boolean DHCR215;
protected boolean DHCR216;
protected boolean DHCR217;
protected boolean DHCR218;
protected boolean DHCR219;
protected boolean DHCR220;
protected byte DHCR24;
protected byte DHCR25;
protected byte DHCR26;
protected byte DHCR27;
protected boolean DHCR28;
protected byte DHCR40;
protected byte DHCR41;
protected byte DHCR42;
protected byte DHCR43;
protected boolean DHCR44;
protected byte DHCR56;
protected byte DHCR57;
protected byte DHCR58;
protected boolean DHCR59;
protected boolean DHCR60;
protected byte DHCR72;
protected byte DHCR73;
protected byte DHCR74;
protected boolean DHCR75;
protected boolean DHCR76;
protected boolean DHCR88;
protected boolean DHCR89;
protected boolean DHCR90;
protected boolean DHCR91;
protected boolean DHCR92;
protected byte DHCS14;
protected byte DHDOBC;
protected short DHDOBYR;
protected byte DHPA10;
protected byte DHPA11;
protected byte DHPA12;
protected byte DHPA13;
protected byte DHPA14;
protected byte DHPA2;
protected byte DHPA3;
protected byte DHPA4;
protected byte DHPA5;
protected byte DHPA6;
protected byte DHPA7;
protected byte DHPA8;
protected byte DHPA9;
protected byte DHPB10;
protected byte DHPB11;
protected byte DHPB12;
protected byte DHPB13;
protected byte DHPB14;
protected byte DHPB2;
protected byte DHPB3;
protected byte DHPB4;
protected byte DHPB5;
protected byte DHPB6;
protected byte DHPB7;
protected byte DHPB8;
protected byte DHPB9;
protected boolean DHSEX;
protected byte DHWORK;
protected byte DIAGR;
protected short DIAS1;
protected short DIAS2;
protected short DIAS3;
protected double DIAVAL;
protected short DIDBNY;
protected byte DIDOB;
protected byte DIFBPC1;
protected byte DIFBPC2;
protected boolean DIFBPC3;
protected byte DIGNMYC;
protected byte DIKLIVC;
protected byte DIMAR;
protected byte DISEX;
protected byte DISEXC;
protected byte DISIBC;
protected short DOBYEAR;
protected byte EHTCH;
protected byte EHTFT;
protected byte EHTIN;
protected double EHTM;
protected byte ERCAA;
protected byte ERCAB1;
protected byte ERCAB2;
protected byte ERCAB3;
protected byte ERCAB4;
protected byte ERCAB5;
protected short ERCAC;
protected byte ERCADP1;
protected byte ERCADP2;
protected byte ERCADP3;
protected byte ERCADP4;
protected byte ERCADP5;
protected byte ERCALIV;
protected byte ERCAM01;
protected byte ERCAM02;
protected byte ERCAM03;
protected byte ERCAM04;
protected byte ERCAM05;
protected boolean ERCANU1;
protected byte ERCANU2;
protected byte ERCANU3;
protected byte ERCANU4;
protected byte ERCANU5;
protected byte ERCANU6;
protected byte ERCANU7;
protected byte ERCANU8;
protected byte ERCARA;
protected byte ERCARB;
protected byte ERMOTC1;
protected byte ERMOTC2;
protected byte ERMOTC3;
protected byte ERMOTC4;
protected byte ERMOTC5;
protected byte ERMOTC6;
protected byte ERMOTC7;
protected byte ERMOTV1;
protected byte ERMOTV2;
protected byte ERMOTV3;
protected byte ERMOTV4;
protected byte ERMOTV5;
protected byte ERMOTV6;
protected byte ERMOTV7;
protected byte ERMOTV8;
protected byte ERTOTCN;
protected byte ERVOLA;
protected byte ERVOLB;
protected double ESTHT;
protected double ESTWT;
protected byte EWTCH;
protected double EWTKG;
protected byte EWTL;
protected byte EWTST;
protected byte EXMOVHA;
protected byte EXMOVNB;
protected byte EXNEGA1;
protected byte EXNEGA2;
protected byte EXNEGA3;
protected byte EXNEGA4;
protected byte EXNEGA5;
protected byte EXNEGA6;
protected boolean EXNEGA7;
protected byte EXPLAN;
protected byte EXPOSA1;
protected byte EXPOSA2;
protected byte EXPOSA3;
protected byte EXPOSA4;
protected byte EXPOSA5;
protected byte EXPOSA6;
protected byte EXPOSA7;
protected byte EXPWF;
protected byte EXRELA;
protected byte EXRELB;
protected byte EXRELC;
protected byte EXRELD;
protected byte EXRELE1;
protected byte EXRELE2;
protected byte EXRELE3;
protected byte EXRELE4;
protected byte EXRELE5;
protected byte EXRELE6;
protected byte EXRELE7;
protected byte EXRELE8;
protected boolean EXRELE9;
protected byte EYESURG;
protected byte FASTASK;
protected byte FASTELI;
protected byte FASTHRS;
protected double FEV1;
protected double FEV2;
protected double FEV3;
protected boolean FFPROB;
protected double FGLU;
protected String FINSTAT;
protected byte FIT;
protected byte FLOORC;
protected byte FQAQUA;
protected byte FQCBTHR;
protected short FQCENG;
protected byte FQEND;
protected byte FQETHNR;
protected byte FQQUAL1;
protected byte FQQUAL2;
protected byte FQQUAL3;
protected byte FQQUZM1;
protected byte FQQUZM2;
protected byte FULL1;
protected byte FULL2;
protected byte FULL3;
protected double FVC1;
protected double FVC2;
protected double FVC3;
protected boolean GCINHH1;
protected byte HASTRO;
protected byte HASURG;
protected double HBA1C;
protected double HDL;
protected byte HEACD;
protected byte HEACE;
protected byte HEACEA;
protected byte HEACEAC;
protected byte HEADA01;
protected byte HEADA02;
protected byte HEADA03;
protected byte HEADA04;
protected byte HEADA05;
protected byte HEADA06;
protected byte HEADA07;
protected byte HEADA08;
protected byte HEADA09;
protected byte HEADA10;
protected byte HEADB01;
protected byte HEADB02;
protected byte HEADB03;
protected byte HEADB04;
protected byte HEADB05;
protected byte HEADB06;
protected byte HEADB07;
protected byte HEADB08;
protected byte HEADB09;
protected byte HEADB10;
protected byte HEADB11;
protected byte HEADB12;
protected boolean HEADB13;
protected byte HEAGAR;
protected short HEAGARY;
protected byte HEAGBR;
protected short HEAGBRY;
protected byte HEAGCR;
protected short HEAGCRY;
protected byte HEAGDR;
protected short HEAGDRY;
protected byte HEAGER;
protected short HEAGERY;
protected byte HEAGFR;
protected short HEAGFRY;
protected byte HEAGG;
protected byte HEAGGR;
protected short HEAGGRY;
protected byte HEAGH;
protected byte HEAGHR;
protected short HEAGHRY;
protected byte HEAGIR;
protected short HEAGIRY;
protected byte HEAGJR;
protected short HEAGJRY;
protected byte HEAID1;
protected byte HEAID10;
protected byte HEAID11;
protected byte HEAID12;
protected byte HEAID17;
protected byte HEAID18;
protected byte HEAID19;
protected byte HEAID2;
protected byte HEAID20;
protected byte HEAID21;
protected byte HEAID22;
protected byte HEAID3;
protected byte HEAID4;
protected byte HEAID5;
protected byte HEAID9;
protected byte HEAIDC;
protected boolean HEAIDC2;
protected byte HEAIDC3;
protected byte HEAIN01;
protected boolean HEAIN05;
protected boolean HEAIN06;
protected boolean HEAIN07;
protected boolean HEAIN19;
protected byte HEAIW01;
protected boolean HEAIW17;
protected byte HEANA;
protected byte HEANB;
protected byte HEANC;
protected byte HEAND;
protected byte HEANE;
protected byte HEANF;
protected byte HEANG;
protected byte HEANH;
protected byte HEANI1;
protected byte HEANI2;
protected byte HEANI3;
protected byte HEANI4;
protected byte HEANI5;
protected byte HEANI6;
protected byte HEANIM1;
protected byte HEANIM2;
protected byte HEANIM3;
protected byte HEANIM4;
protected byte HEANIM5;
protected boolean HEANIM6;
protected byte HEANK;
protected byte HEANL;
protected byte HEART1;
protected byte HEART2;
protected byte HEARTA;
protected byte HEARTB;
protected byte HEARTC;
protected byte HEARTD;
protected byte HEARTE;
protected byte HEATA;
protected byte HEATT01;
protected byte HEATT02;
protected byte HEATT03;
protected byte HEATT04;
protected byte HEATT05;
protected byte HEATT06;
protected byte HEATT07;
protected byte HEATT08;
protected byte HEATT09;
protected byte HEATT10;
protected byte HEATT11;
protected byte HEATT12;
protected byte HEATT13;
protected byte HEATT14;
protected byte HEAVOID;
protected byte HEBAL;
protected byte HEBALA1;
protected byte HEBALA2;
protected byte HEBALB1;
protected byte HEBALB2;
protected byte HEBALC1;
protected byte HEBALC2;
protected byte HEBETA;
protected byte HEBETB;
protected boolean HEBETBC;
protected byte HEBPCHK;
protected byte HECANA;
protected byte HECDA;
protected byte HECDB;
protected byte HECDC;
protected byte HECDD;
protected byte HECDE;
protected byte HECDF1;
protected byte HECDF2;
protected byte HECDF3;
protected byte HECGNIC;
protected byte HECGSTA;
protected byte HECGSTP;
protected byte HECHOA;
protected byte HECHOA2;
protected byte HECHOL;
protected byte HECHOL2;
protected byte HECHOLB;
protected byte HECHOLC;
protected boolean HEDIA;
protected byte HEDIA01;
protected byte HEDIA02;
protected byte HEDIA03;
protected byte HEDIA04;
protected byte HEDIA05;
protected byte HEDIA06;
protected byte HEDIA07;
protected boolean HEDIA08;
protected boolean HEDIA09;
protected byte HEDIAC1;
protected byte HEDIAC2;
protected byte HEDIAC3;
protected byte HEDIAC4;
protected byte HEDIAC5;
protected byte HEDIAC6;
protected byte HEDIAC7;
protected byte HEDIAC8;
protected byte HEDIAC9;
protected byte HEDIAD1;
protected byte HEDIAD2;
protected byte HEDIAD3;
protected byte HEDIAD4;
protected byte HEDIAD5;
protected byte HEDIAD6;
protected byte HEDIAD7;
protected boolean HEDIAD8;
protected byte HEDIAD9;
protected byte HEDIAM1;
protected byte HEDIAM2;
protected byte HEDIAM3;
protected byte HEDIAM4;
protected byte HEDIAM5;
protected boolean HEDIAM6;
protected byte HEDIAM7;
protected boolean HEDIAM8;
protected byte HEDIAM9;
protected byte HEDIAN1;
protected byte HEDIAN2;
protected byte HEDIAN3;
protected boolean HEDIAN4;
protected byte HEDIAN5;
protected byte HEDIAN6;
protected byte HEDIAN7;
protected boolean HEDIAN8;
protected byte HEDIAN9;
protected byte HEDIAS1;
protected byte HEDIAS2;
protected boolean HEDIAS3;
protected byte HEDIAS4;
protected byte HEDIAS5;
protected byte HEDIAS6;
protected byte HEDIAS7;
protected boolean HEDIAS8;
protected byte HEDIAS9;
protected boolean HEDIAW1;
protected boolean HEDIAW3;
protected boolean HEDIAW4;
protected boolean HEDIAW5;
protected boolean HEDIAW6;
protected boolean HEDIAW7;
protected boolean HEDIAW8;
protected boolean HEDIAW9;
protected boolean HEDIB;
protected byte HEDIB01;
protected byte HEDIB02;
protected byte HEDIB03;
protected byte HEDIB04;
protected boolean HEDIBW1;
protected boolean HEDIBW3;
protected boolean HEDIBW4;
protected boolean HEDIBW5;
protected boolean HEDIBW6;
protected boolean HEDIBW7;
protected boolean HEDIBW8;
protected boolean HEDIBW9;
protected byte HEDIDS1;
protected byte HEDIDS2;
protected byte HEDIDS3;
protected byte HEDIDS4;
protected byte HEDIDS5;
protected boolean HEDIDS6;
protected byte HEDIDS7;
protected boolean HEDIDS8;
protected byte HEDIDS9;
protected byte HEDIM01;
protected byte HEDIM02;
protected byte HEDIM03;
protected byte HEDIM04;
protected byte HEDIM05;
protected byte HEDIM06;
protected boolean HEDIM07;
protected boolean HEDIM08;
protected byte HEDIZ;
protected byte HEDREYE;
protected boolean HEFFLAG;
protected byte HEFLD;
protected byte HEFLE;
protected byte HEFLF;
protected byte HEFTCHK;
protected byte HEHBP;
protected byte HEHBPA;
protected byte HEHBPB;
protected byte HEHBPB1;
protected byte HEHELF;
protected byte HEHPA;
protected byte HEHPB01;
protected byte HEHPB02;
protected byte HEHPB03;
protected byte HEHPB04;
protected byte HEHPB05;
protected byte HEHPB06;
protected byte HEHPB07;
protected byte HEHPB08;
protected boolean HEHPB09;
protected byte HEHPC;
protected byte HEHPD;
protected byte HEHPE;
protected byte HEHRB;
protected byte HEHRC;
protected byte HEHRD;
protected byte HEHRE;
protected byte HEHRF;
protected byte HEHRG;
protected byte HEHRTA;
protected byte HEHRTA2;
protected byte HEHRTB;
protected byte HEHRTB2;
protected byte HEHRTC;
protected byte HEHRTC2;
protected byte HEHRTD;
protected byte HEHRTD2;
protected byte HEHRTE;
protected boolean HEHRTE2;
protected byte HEHRTF;
protected byte HEHRTF2;
protected double HEIGHT;
protected byte HEINCT;
protected byte HEINCTA;
protected byte HEINCTB;
protected byte HEINCTC;
protected byte HEINCTD;
protected byte HEINCTE;
protected byte HEINCTF;
protected byte HEINCTG;
protected byte HEINCTH;
protected byte HEINCTI;
protected byte HEINCTJ;
protected byte HEJIA1;
protected byte HEJIA2;
protected byte HEJIB;
protected byte HEJIC;
protected byte HEKIDN;
protected byte HEKNEA;
protected byte HEKNEB;
protected byte HEKNEC;
protected byte HELWK;
protected byte HENICO;
protected byte HENICTK;
protected byte HENMMI;
protected byte HENMST;
protected boolean HEOP;
protected byte HEOPC;
protected byte HEOPN1;
protected byte HEOPN2;
protected boolean HEOPN3;
protected byte HEOPN4;
protected byte HEOPS;
protected byte HEOPT1;
protected byte HEOPT2;
protected byte HEOPW1;
protected byte HEOSTE;
protected byte HEOSTEA;
protected byte HEOSTEB;
protected byte HEOSTEC;
protected byte HEOSTED;
protected byte HEPAC;
protected byte HEPAD;
protected byte HEPAE;
protected byte HEPAF;
protected byte HEPAF1;
protected byte HEPAG;
protected byte HEPAH;
protected byte HEPAI;
protected byte HEPAJ;
protected byte HEPAK1;
protected byte HEPAK2;
protected byte HEPRKR;
protected short HEPRKRY;
protected byte HEPSY1;
protected byte HEPSY2;
protected byte HEPSY3;
protected byte HEPSY4;
protected byte HEPSY5;
protected byte HEPSY6;
protected byte HEPSYA;
protected byte HEPSYB;
protected byte HEPSYC;
protected byte HEPSYD;
protected byte HEPSYE;
protected byte HERPA;
protected byte HERPB;
protected byte HERPC;
protected byte HERPD;
protected byte HERPE;
protected byte HERPF;
protected byte HERPG;
protected byte HERPH;
protected byte HERPI;
protected byte HERPJ;
protected byte HESKD;
protected byte HESKE;
protected byte HESKF;
protected byte HESLFCB;
protected byte HESLFCM;
protected byte HESLFCR;
protected short HESLFCY;
protected byte HESTOP;
protected byte HESTOPC;
protected byte HESUG;
protected byte HESUGA;
protected byte HETEMP;
protected byte HEWEE;
protected byte HEWEEA;
protected byte HEYRB;
protected double HGB;
protected byte HHAGE;
protected byte HINREL;
protected double HIP1;
protected double HIP2;
protected double HIP3;
protected byte HIPOKB;
protected double HIPVAL;
protected byte HJREL;
protected byte HOADP1;
protected boolean HOADP10;
protected byte HOADP2;
protected byte HOADP3;
protected byte HOADP4;
protected byte HOADP5;
protected byte HOADP6;
protected byte HOADP7;
protected byte HOADP8;
protected byte HOADP9;
protected byte HOALF1;
protected short HOALF1L;
protected byte HOALF1R;
protected byte HOALF1T;
protected short HOALF1U;
protected byte HOALF2;
protected short HOALF2L;
protected byte HOALF2R;
protected byte HOALF2T;
protected short HOALF2U;
protected short HOALFM1;
protected short HOALFM2;
protected byte HOALI1;
protected byte HOALI2;
protected byte HOASK;
protected byte HOBA2FE;
protected byte HOBA2FL;
protected byte HOBA2FR;
protected byte HOBA2FU;
protected byte HOBA2ME;
protected byte HOBA2ML;
protected byte HOBA2MR;
protected byte HOBA2MU;
protected byte HOBA2OE;
protected short HOBA2OL;
protected byte HOBA2OR;
protected short HOBA2OU;
protected byte HOBA2WE;
protected byte HOBA2WL;
protected byte HOBA2WR;
protected byte HOBA2WU;
protected byte HOBA2YE;
protected byte HOBA2YL;
protected byte HOBA2YR;
protected byte HOBA2YU;
protected byte HOBA3FE;
protected byte HOBA3FL;
protected byte HOBA3FR;
protected byte HOBA3FU;
protected byte HOBA3ME;
protected short HOBA3ML;
protected byte HOBA3MR;
protected short HOBA3MU;
protected byte HOBA3OE;
protected short HOBA3OL;
protected byte HOBA3OR;
protected short HOBA3OU;
protected byte HOBA3WE;
protected byte HOBA3WL;
protected byte HOBA3WR;
protected short HOBA3WU;
protected byte HOBA3YE;
protected byte HOBA3YL;
protected byte HOBA3YR;
protected byte HOBA3YU;
protected byte HOBA4FE;
protected byte HOBA4FL;
protected byte HOBA4FR;
protected byte HOBA4FU;
protected byte HOBA4ME;
protected short HOBA4ML;
protected byte HOBA4MR;
protected short HOBA4MU;
protected byte HOBA4OE;
protected short HOBA4OL;
protected byte HOBA4OR;
protected short HOBA4OU;
protected byte HOBA4WE;
protected short HOBA4WL;
protected byte HOBA4WR;
protected short HOBA4WU;
protected byte HOBA4YE;
protected byte HOBA4YL;
protected byte HOBA4YR;
protected byte HOBA4YU;
protected byte HOBA5FE;
protected byte HOBA5FL;
protected byte HOBA5FR;
protected byte HOBA5FU;
protected byte HOBA5ME;
protected short HOBA5ML;
protected byte HOBA5MR;
protected short HOBA5MU;
protected byte HOBA5OE;
protected byte HOBA5OL;
protected byte HOBA5OR;
protected byte HOBA5OU;
protected byte HOBA5WE;
protected byte HOBA5WL;
protected byte HOBA5WR;
protected byte HOBA5WU;
protected byte HOBA5YE;
protected byte HOBA5YL;
protected byte HOBA5YR;
protected byte HOBA5YU;
protected byte HOBA6FE;
protected byte HOBA6FL;
protected byte HOBA6FR;
protected byte HOBA6FU;
protected byte HOBA6ME;
protected byte HOBA6ML;
protected byte HOBA6MR;
protected byte HOBA6MU;
protected byte HOBA6OE;
protected byte HOBA6OL;
protected byte HOBA6OR;
protected byte HOBA6OU;
protected byte HOBA6WE;
protected byte HOBA6WL;
protected byte HOBA6WR;
protected byte HOBA6WU;
protected byte HOBA6YE;
protected byte HOBA6YL;
protected byte HOBA6YR;
protected byte HOBA6YU;
protected byte HOBA7FE;
protected byte HOBA7FL;
protected byte HOBA7FR;
protected byte HOBA7FU;
protected byte HOBA7ME;
protected byte HOBA7ML;
protected byte HOBA7MR;
protected byte HOBA7MU;
protected byte HOBA7OE;
protected byte HOBA7OL;
protected byte HOBA7OR;
protected byte HOBA7OU;
protected byte HOBA7WE;
protected byte HOBA7WL;
protected byte HOBA7WR;
protected byte HOBA7WU;
protected byte HOBA7YE;
protected byte HOBA7YL;
protected byte HOBA7YR;
protected byte HOBA7YU;
protected byte HOBA8FE;
protected byte HOBA8FL;
protected byte HOBA8FR;
protected byte HOBA8FU;
protected byte HOBA8ME;
protected byte HOBA8ML;
protected byte HOBA8MR;
protected byte HOBA8MU;
protected byte HOBA8OE;
protected byte HOBA8OL;
protected byte HOBA8OR;
protected byte HOBA8OU;
protected byte HOBA8WE;
protected byte HOBA8WL;
protected byte HOBA8WR;
protected byte HOBA8WU;
protected byte HOBA8YE;
protected byte HOBA8YL;
protected byte HOBA8YR;
protected byte HOBA8YU;
protected byte HOBA9FE;
protected byte HOBA9FL;
protected byte HOBA9FR;
protected byte HOBA9FU;
protected byte HOBA9ME;
protected byte HOBA9ML;
protected byte HOBA9MR;
protected byte HOBA9MU;
protected byte HOBA9OE;
protected byte HOBA9OL;
protected byte HOBA9OR;
protected byte HOBA9OU;
protected byte HOBA9WE;
protected byte HOBA9WL;
protected byte HOBA9WR;
protected byte HOBA9WU;
protected byte HOBA9YE;
protected byte HOBA9YL;
protected byte HOBA9YR;
protected byte HOBA9YU;
protected byte HOBAFE;
protected byte HOBAFL;
protected byte HOBAFR;
protected byte HOBAFU;
protected byte HOBAME;
protected short HOBAML;
protected byte HOBAMR;
protected short HOBAMU;
protected byte HOBAOE;
protected short HOBAOL;
protected byte HOBAOR;
protected short HOBAOU;
protected byte HOBAWE;
protected short HOBAWL;
protected byte HOBAWR;
protected byte HOBAWU;
protected byte HOBAYE;
protected byte HOBAYL;
protected byte HOBAYR;
protected short HOBAYU;
protected byte HOCC01;
protected byte HOCC02;
protected byte HOCC03;
protected byte HOCC04;
protected byte HOCC05;
protected byte HOCC06;
protected byte HOCC07;
protected byte HOCC08;
protected byte HOCC09;
protected byte HOCC10;
protected byte HOCC11;
protected byte HOCC12;
protected byte HOCC13;
protected byte HOCC14;
protected byte HOCC15;
protected byte HOCC16;
protected byte HOCC17;
protected byte HOCC18;
protected byte HOCC19;
protected byte HOCC20;
protected byte HOCENP;
protected short HOCL;
protected byte HOCLE;
protected short HOCLL;
protected byte HOCLR;
protected short HOCLU;
protected byte HOEB;
protected short HOEBMS;
protected byte HOEBMSE;
protected byte HOEBMSL;
protected byte HOEBMSR;
protected byte HOEBMSU;
protected short HOEBMW;
protected byte HOEBMWE;
protected byte HOEBMWL;
protected byte HOEBMWR;
protected byte HOEBMWU;
protected short HOEBQS;
protected byte HOEBQSE;
protected short HOEBQSL;
protected byte HOEBQSR;
protected short HOEBQSU;
protected short HOEBQW;
protected byte HOEBQWE;
protected short HOEBQWL;
protected byte HOEBQWR;
protected short HOEBQWU;
protected byte HOED;
protected short HOEDM;
protected byte HOEDME;
protected byte HOEDML;
protected byte HOEDMR;
protected byte HOEDMU;
protected short HOEDQ;
protected byte HOEDQE;
protected short HOEDQL;
protected byte HOEDQR;
protected short HOEDQU;
protected byte HOEOS;
protected byte HOEOSE;
protected byte HOEOSL;
protected byte HOEOSR;
protected byte HOEOSU;
protected byte HOEOW;
protected byte HOEOWE;
protected byte HOEOWL;
protected byte HOEOWR;
protected byte HOEOWU;
protected byte HOEPAY;
protected byte HOEPS;
protected byte HOEPSE;
protected byte HOEPSL;
protected byte HOEPSR;
protected byte HOEPSU;
protected byte HOEPW;
protected byte HOEPWE;
protected byte HOEPWL;
protected byte HOEPWR;
protected byte HOEPWU;
protected byte HOFB;
protected short HOFBMS;
protected byte HOFBMSE;
protected byte HOFBMSL;
protected byte HOFBMSR;
protected byte HOFBMSU;
protected short HOFBMW;
protected byte HOFBMWE;
protected byte HOFBMWL;
protected byte HOFBMWR;
protected byte HOFBMWU;
protected short HOFBQS;
protected byte HOFBQSE;
protected short HOFBQSL;
protected byte HOFBQSR;
protected short HOFBQSU;
protected short HOFBQW;
protected byte HOFBQWE;
protected short HOFBQWL;
protected byte HOFBQWR;
protected short HOFBQWU;
protected byte HOFCS;
protected byte HOFCSE;
protected byte HOFCSL;
protected byte HOFCSR;
protected byte HOFCSU;
protected byte HOFCW;
protected byte HOFCWE;
protected byte HOFCWL;
protected byte HOFCWR;
protected byte HOFCWU;
protected byte HOFD;
protected short HOFDM;
protected byte HOFDME;
protected byte HOFDML;
protected byte HOFDMR;
protected byte HOFDMU;
protected short HOFDQ;
protected byte HOFDQE;
protected short HOFDQL;
protected byte HOFDQR;
protected short HOFDQU;
protected byte HOFOIS;
protected byte HOFOISE;
protected byte HOFOISL;
protected byte HOFOISR;
protected byte HOFOISU;
protected byte HOFOIW;
protected byte HOFOIWE;
protected byte HOFOIWL;
protected byte HOFOIWR;
protected byte HOFOIWU;
protected byte HOFOODE;
protected short HOFOODL;
protected byte HOFOODR;
protected short HOFOODU;
protected byte HOFOS;
protected byte HOFOSE;
protected byte HOFOSL;
protected byte HOFOSR;
protected byte HOFOSU;
protected byte HOFOW;
protected byte HOFOWE;
protected byte HOFOWL;
protected byte HOFOWR;
protected byte HOFOWU;
protected byte HOFPAY;
protected byte HOFPGS;
protected byte HOFPGSE;
protected byte HOFPGSL;
protected byte HOFPGSR;
protected byte HOFPGSU;
protected byte HOFPGW;
protected byte HOFPGWE;
protected byte HOFPGWL;
protected byte HOFPGWR;
protected byte HOFPGWU;
protected byte HOFPS;
protected byte HOFPSE;
protected byte HOFPSL;
protected byte HOFPSR;
protected byte HOFPSU;
protected byte HOFPW;
protected byte HOFPWE;
protected byte HOFPWL;
protected byte HOFPWR;
protected byte HOFPWU;
protected short HOFSM;
protected byte HOFSME;
protected byte HOFSML;
protected byte HOFSMR;
protected byte HOFSMU;
protected byte HOFSP;
protected byte HOFSQ;
protected byte HOFSQE;
protected byte HOFSQL;
protected byte HOFSQR;
protected byte HOFSQU;
protected byte HOFSUP;
protected short HOFSW;
protected byte HOFSWE;
protected byte HOFSWL;
protected byte HOFSWR;
protected byte HOFSWU;
protected byte HOFTOG;
protected byte HOFUEL1;
protected byte HOFUEL2;
protected byte HOFUEL3;
protected byte HOFUEL4;
protected byte HOFUEL5;
protected byte HOFUEZ1;
protected byte HOFUEZ2;
protected byte HOFWS;
protected byte HOFWSE;
protected byte HOFWSL;
protected byte HOFWSR;
protected byte HOFWSU;
protected byte HOFWW;
protected byte HOFWWE;
protected byte HOFWWL;
protected byte HOFWWR;
protected byte HOFWWU;
protected byte HOFXS;
protected byte HOFXSE;
protected byte HOFXSL;
protected byte HOFXSR;
protected byte HOFXSU;
protected byte HOFXW;
protected byte HOFXWE;
protected byte HOFXWL;
protected byte HOFXWR;
protected byte HOFXWU;
protected short HOGBMS;
protected byte HOGBMSE;
protected byte HOGBMSL;
protected byte HOGBMSR;
protected byte HOGBMSU;
protected short HOGBMW;
protected byte HOGBMWE;
protected byte HOGBMWL;
protected byte HOGBMWR;
protected byte HOGBMWU;
protected byte HOGBP;
protected short HOGBQS;
protected byte HOGBQSE;
protected short HOGBQSL;
protected byte HOGBQSR;
protected short HOGBQSU;
protected short HOGBQW;
protected byte HOGBQWE;
protected short HOGBQWL;
protected byte HOGBQWR;
protected short HOGBQWU;
protected byte HOGD;
protected short HOGDM;
protected byte HOGDME;
protected byte HOGDML;
protected byte HOGDMR;
protected byte HOGDMU;
protected short HOGDQ;
protected byte HOGDQE;
protected short HOGDQL;
protected byte HOGDQR;
protected short HOGDQU;
protected byte HOGOS;
protected byte HOGOSE;
protected byte HOGOSL;
protected byte HOGOSR;
protected byte HOGOSU;
protected byte HOGOW;
protected byte HOGOWE;
protected byte HOGOWL;
protected byte HOGOWR;
protected byte HOGOWU;
protected byte HOGPAY;
protected byte HOGPS;
protected byte HOGPSE;
protected byte HOGPSL;
protected byte HOGPSR;
protected byte HOGPSU;
protected byte HOGPW;
protected byte HOGPWE;
protected byte HOGPWL;
protected byte HOGPWR;
protected byte HOGPWU;
protected byte HOHAV1;
protected byte HOHAV10;
protected byte HOHAV11;
protected byte HOHAV12;
protected byte HOHAV2;
protected byte HOHAV3;
protected byte HOHAV4;
protected byte HOHAV5;
protected byte HOHAV6;
protected byte HOHAV7;
protected byte HOHAV8;
protected byte HOHAV9;
protected byte HOHB1;
protected byte HOHB2;
protected byte HOHB3;
protected short HOHBA;
protected byte HOHBAFE;
protected byte HOHBAFL;
protected byte HOHBAFR;
protected byte HOHBAFU;
protected byte HOHBAME;
protected short HOHBAML;
protected byte HOHBAMR;
protected short HOHBAMU;
protected byte HOHBAOE;
protected byte HOHBAOL;
protected byte HOHBAOR;
protected short HOHBAOU;
protected byte HOHBAWE;
protected byte HOHBAWL;
protected byte HOHBAWR;
protected byte HOHBAWU;
protected byte HOHBAYE;
protected byte HOHBAYL;
protected byte HOHBAYR;
protected byte HOHBAYU;
protected byte HOHBCK;
protected byte HOHBEN;
protected byte HOHBM1;
protected byte HOHBM2;
protected byte HOHBM3;
protected byte HOHBP;
protected short HOHV01;
protected byte HOHV01E;
protected short HOHV01L;
protected byte HOHV01R;
protected short HOHV01U;
protected short HOHV02;
protected byte HOHV02E;
protected short HOHV02L;
protected byte HOHV02R;
protected short HOHV02U;
protected short HOHV03;
protected byte HOHV03E;
protected short HOHV03L;
protected byte HOHV03R;
protected short HOHV03U;
protected short HOHV04;
protected byte HOHV04E;
protected short HOHV04L;
protected byte HOHV04R;
protected short HOHV04U;
protected short HOHV05;
protected byte HOHV05E;
protected short HOHV05L;
protected byte HOHV05R;
protected short HOHV05U;
protected short HOHV06;
protected byte HOHV06E;
protected short HOHV06L;
protected byte HOHV06R;
protected short HOHV06U;
protected short HOHV07;
protected byte HOHV07E;
protected short HOHV07L;
protected byte HOHV07R;
protected short HOHV07U;
protected short HOHV08;
protected byte HOHV08E;
protected short HOHV08L;
protected byte HOHV08R;
protected short HOHV08U;
protected short HOHV09;
protected byte HOHV09E;
protected short HOHV09L;
protected byte HOHV09R;
protected short HOHV09U;
protected short HOHV10;
protected byte HOHV10E;
protected short HOHV10L;
protected byte HOHV10R;
protected short HOHV10U;
protected short HOHV11;
protected byte HOHV11E;
protected short HOHV11L;
protected byte HOHV11R;
protected short HOHV11U;
protected short HOHV12;
protected byte HOHV12E;
protected short HOHV12L;
protected byte HOHV12R;
protected short HOHV12U;
protected byte HOHVB1;
protected byte HOHVB10;
protected boolean HOHVB11;
protected boolean HOHVB12;
protected byte HOHVB2;
protected byte HOHVB3;
protected byte HOHVB4;
protected byte HOHVB5;
protected byte HOHVB6;
protected byte HOHVB7;
protected byte HOHVB8;
protected byte HOHVB9;
protected byte HOINAM1;
protected byte HOINAM2;
protected byte HOINAM3;
protected byte HOINAM4;
protected boolean HOINAM5;
protected byte HOINC1;
protected byte HOINC2;
protected byte HOINC3;
protected boolean HOINC4;
protected byte HOINCA1;
protected byte HOINCA2;
protected byte HOINCA3;
protected byte HOINCA4;
protected boolean HOINCA5;
protected byte HOINCL1;
protected byte HOINCL2;
protected byte HOINCL3;
protected byte HOINCL4;
protected boolean HOINCL5;
protected byte HOINCM1;
protected byte HOINCM2;
protected byte HOINCM3;
protected byte HOINCM4;
protected short HOLEIS;
protected byte HOLEISE;
protected short HOLEISL;
protected byte HOLEISR;
protected short HOLEISU;
protected byte HOMEXT3;
protected byte HOMEXT4;
protected boolean HOMEXT5;
protected boolean HOMEXT6;
protected boolean HOMEXT7;
protected byte HOMFV1;
protected byte HOMFV10;
protected byte HOMFV2;
protected byte HOMFV3;
protected byte HOMFV4;
protected byte HOMFV5;
protected boolean HOMFV6;
protected boolean HOMFV7;
protected byte HOMFV8;
protected boolean HOMFV9;
protected short HOMINC;
protected boolean HOMINCE;
protected boolean HOMINCL;
protected boolean HOMINCR;
protected boolean HOMINCU;
protected byte HOMMISN;
protected byte HOMNEWN;
protected boolean HOMNM18;
protected boolean HOMNM19;
protected boolean HOMNM28;
protected boolean HOMNM29;
protected boolean HOMNM38;
protected boolean HOMNM39;
protected boolean HOMNM48;
protected boolean HOMNM49;
protected byte HOMNRE8;
protected boolean HOMNRE9;
protected byte HOMNU18;
protected boolean HOMNU19;
protected byte HOMNU28;
protected boolean HOMNU29;
protected byte HOMNU38;
protected boolean HOMNU39;
protected byte HOMNU48;
protected boolean HOMNU49;
protected byte HOMREA3;
protected boolean HOMREA4;
protected boolean HOMREA5;
protected boolean HOMREA6;
protected boolean HOMREA7;
protected byte HOMREPE;
protected short HOMREPL;
protected byte HOMREPR;
protected short HOMREPU;
protected byte HOMSAM3;
protected byte HOMSAM4;
protected byte HOMSAM5;
protected byte HOMSAM6;
protected byte HOMSAM7;
protected byte HOMTY1;
protected byte HOMTY10;
protected byte HOMTY2;
protected byte HOMTY8;
protected boolean HOMTY9;
protected byte HOMUM13;
protected byte HOMUM14;
protected boolean HOMUM15;
protected boolean HOMUM16;
protected boolean HOMUM17;
protected byte HOMUM23;
protected boolean HOMUM24;
protected boolean HOMUM25;
protected boolean HOMUM26;
protected boolean HOMUM27;
protected boolean HOMUM33;
protected boolean HOMUM34;
protected boolean HOMUM35;
protected boolean HOMUM36;
protected boolean HOMUM37;
protected byte HOMUS13;
protected byte HOMUS14;
protected boolean HOMUS15;
protected boolean HOMUS16;
protected boolean HOMUS17;
protected byte HOMUS23;
protected boolean HOMUS24;
protected boolean HOMUS25;
protected boolean HOMUS26;
protected boolean HOMUS27;
protected boolean HOMUS33;
protected boolean HOMUS34;
protected boolean HOMUS35;
protected boolean HOMUS36;
protected boolean HOMUS37;
protected int HOMWA8;
protected byte HOMWA8E;
protected int HOMWA8L;
protected byte HOMWA8R;
protected short HOMWA8U;
protected boolean HOMWA9;
protected boolean HOMWA9E;
protected boolean HOMWA9L;
protected boolean HOMWA9R;
protected boolean HOMWA9U;
protected int HOMXA3;
protected byte HOMXA3E;
protected int HOMXA3L;
protected byte HOMXA3R;
protected short HOMXA3U;
protected short HOMXA4;
protected boolean HOMXA4E;
protected boolean HOMXA4L;
protected boolean HOMXA4R;
protected boolean HOMXA4U;
protected boolean HOMXA5;
protected boolean HOMXA5E;
protected boolean HOMXA5L;
protected boolean HOMXA5R;
protected boolean HOMXA5U;
protected boolean HOMXA6;
protected boolean HOMXA6E;
protected boolean HOMXA6L;
protected boolean HOMXA6R;
protected boolean HOMXA6U;
protected boolean HOMXA7;
protected boolean HOMXA7E;
protected boolean HOMXA7L;
protected boolean HOMXA7R;
protected boolean HOMXA7U;
protected byte HOOHEA1;
protected byte HOOHEA2;
protected byte HOOHEA3;
protected byte HOOHEM1;
protected byte HOOHEM2;
protected byte HOOHEM3;
protected byte HOOUTFE;
protected short HOOUTFL;
protected byte HOOUTFR;
protected short HOOUTFU;
protected byte HOPAYE;
protected int HOPAYL;
protected byte HOPAYR;
protected int HOPAYU;
protected byte HOPRB1;
protected boolean HOPRB10;
protected byte HOPRB2;
protected byte HOPRB3;
protected byte HOPRB4;
protected byte HOPRB5;
protected byte HOPRB6;
protected byte HOPRB7;
protected byte HOPRB8;
protected byte HOPRB9;
protected byte HOPRM1;
protected boolean HOPRM10;
protected byte HOPRM2;
protected byte HOPRM3;
protected byte HOPRM4;
protected byte HOPRM5;
protected byte HOPRM6;
protected byte HOPRM7;
protected byte HOPRM8;
protected byte HOPRM9;
protected byte HOREBFE;
protected short HOREBFL;
protected byte HOREBFR;
protected short HOREBFU;
protected byte HOREBME;
protected short HOREBML;
protected byte HOREBMR;
protected short HOREBMU;
protected byte HOREBOE;
protected short HOREBOL;
protected byte HOREBOR;
protected short HOREBOU;
protected byte HOREBWE;
protected short HOREBWL;
protected byte HOREBWR;
protected short HOREBWU;
protected byte HOREBYE;
protected short HOREBYL;
protected byte HOREBYR;
protected byte HOREBYU;
protected byte HORET;
protected byte HORFEE1;
protected byte HORFEE2;
protected byte HORFEP1;
protected boolean HORFEP2;
protected byte HORHB;
protected byte HORINC1;
protected short HORINM;
protected byte HORINM1;
protected byte HORINME;
protected short HORINML;
protected byte HORINMR;
protected short HORINMU;
protected byte HORMAIN;
protected byte HORMAM1;
protected byte HORMAM2;
protected byte HORMAM3;
protected boolean HORMAM4;
protected byte HORMO1;
protected byte HORMO10;
protected byte HORMO2;
protected byte HORMO8;
protected boolean HORMO9;
protected boolean HORMOFE;
protected boolean HORMOFL;
protected boolean HORMOFR;
protected boolean HORMOFU;
protected int HORMOL;
protected byte HORMOLE;
protected int HORMOLL;
protected byte HORMOLR;
protected int HORMOLU;
protected boolean HORMOME;
protected boolean HORMOML;
protected boolean HORMOMR;
protected boolean HORMOMU;
protected boolean HORMOOE;
protected boolean HORMOOL;
protected boolean HORMOOR;
protected boolean HORMOOU;
protected boolean HORMOWE;
protected boolean HORMOWL;
protected boolean HORMOWR;
protected boolean HORMOWU;
protected boolean HORMOYE;
protected boolean HORMOYL;
protected boolean HORMOYR;
protected boolean HORMOYU;
protected byte HORMS;
protected short HORMU;
protected boolean HORMUFE;
protected boolean HORMUFL;
protected boolean HORMUFR;
protected boolean HORMUFU;
protected boolean HORMUME;
protected boolean HORMUML;
protected boolean HORMUMR;
protected boolean HORMUMU;
protected boolean HORMUO;
protected boolean HORMUOE;
protected boolean HORMUOL;
protected boolean HORMUOR;
protected boolean HORMUOU;
protected boolean HORMUWE;
protected boolean HORMUWL;
protected boolean HORMUWR;
protected boolean HORMUWU;
protected boolean HORMUYE;
protected boolean HORMUYL;
protected boolean HORMUYR;
protected boolean HORMUYU;
protected byte HORMV1;
protected byte HORMV2;
protected byte HORMV3;
protected byte HORMV4;
protected byte HORMVA1;
protected byte HORMVA2;
protected byte HORMVA3;
protected boolean HORMVA4;
protected byte HORMVM1;
protected byte HORMVM2;
protected byte HORMVM3;
protected byte HORMVM4;
protected byte HORPAY;
protected byte HORPC;
protected int HORPCM;
protected boolean HORPCME;
protected boolean HORPCML;
protected boolean HORPCMR;
protected boolean HORPCMU;
protected int HORPM;
protected byte HORPME;
protected short HORPML;
protected byte HORPMR;
protected int HORPMU;
protected boolean HORPOF;
protected boolean HORPOFO;
protected byte HORPOS;
protected boolean HORPOSO;
protected boolean HORRM;
protected boolean HORRME;
protected boolean HORRML;
protected boolean HORRMR;
protected boolean HORRMU;
protected byte HOSELLE;
protected int HOSELLL;
protected byte HOSELLR;
protected int HOSELLU;
protected byte HOTENST;
protected int HOTRAN;
protected byte HOTRANE;
protected short HOTRANL;
protected byte HOTRANR;
protected short HOTRANU;
protected byte HOV;
protected byte HOVAG11;
protected byte HOVAG12;
protected byte HOVAG13;
protected byte HOVAG14;
protected byte HOVAG15;
protected byte HOVAG16;
protected int HOVE1;
protected int HOVE10;
protected byte HOVE10E;
protected short HOVE10L;
protected byte HOVE10R;
protected short HOVE10U;
protected int HOVE1E;
protected int HOVE1L;
protected byte HOVE1R;
protected int HOVE1U;
protected int HOVE2;
protected short HOVE2E;
protected short HOVE2L;
protected byte HOVE2R;
protected short HOVE2U;
protected int HOVE3;
protected short HOVE3E;
protected int HOVE3L;
protected byte HOVE3R;
protected int HOVE3U;
protected short HOVE4;
protected byte HOVE4E;
protected short HOVE4L;
protected byte HOVE4R;
protected short HOVE4U;
protected short HOVE5;
protected byte HOVE5E;
protected int HOVE5L;
protected byte HOVE5R;
protected int HOVE5U;
protected boolean HOVE6;
protected boolean HOVE6E;
protected boolean HOVE6L;
protected boolean HOVE6R;
protected boolean HOVE6U;
protected boolean HOVE7;
protected boolean HOVE7E;
protected boolean HOVE7L;
protected boolean HOVE7R;
protected boolean HOVE7U;
protected int HOVE8;
protected byte HOVE8E;
protected short HOVE8L;
protected byte HOVE8R;
protected int HOVE8U;
protected boolean HOVE9;
protected boolean HOVE9E;
protected boolean HOVE9L;
protected boolean HOVE9R;
protected boolean HOVE9U;
protected byte HOVEHX;
protected String HOVER;
protected String HOVER10;
protected boolean HOVER11;
protected String HOVER12;
protected String HOVER13;
protected boolean HOVER14;
protected boolean HOVER15;
protected String HOVER16;
protected String HOVER2;
protected String HOVER3;
protected String HOVER4;
protected String HOVER5;
protected String HOVER6;
protected String HOVER7;
protected boolean HOVER8;
protected String HOVER9;
protected String HOVLR;
protected String HOVLR10;
protected boolean HOVLR11;
protected boolean HOVLR12;
protected boolean HOVLR13;
protected boolean HOVLR14;
protected String HOVLR15;
protected boolean HOVLR16;
protected String HOVLR2;
protected String HOVLR3;
protected String HOVLR4;
protected String HOVLR5;
protected String HOVLR6;
protected String HOVLR7;
protected String HOVLR8;
protected String HOVLR9;
protected int HOVM1;
protected int HOVM10;
protected boolean HOVM10E;
protected boolean HOVM10L;
protected boolean HOVM10R;
protected boolean HOVM10U;
protected byte HOVM1E;
protected int HOVM1L;
protected byte HOVM1R;
protected int HOVM1U;
protected int HOVM2;
protected byte HOVM2E;
protected int HOVM2L;
protected byte HOVM2R;
protected int HOVM2U;
protected int HOVM3;
protected byte HOVM3E;
protected int HOVM3L;
protected byte HOVM3R;
protected int HOVM3U;
protected int HOVM4;
protected byte HOVM4E;
protected int HOVM4L;
protected byte HOVM4R;
protected int HOVM4U;
protected short HOVM5;
protected boolean HOVM5E;
protected short HOVM5L;
protected boolean HOVM5R;
protected boolean HOVM5U;
protected boolean HOVM6;
protected boolean HOVM6E;
protected boolean HOVM6L;
protected boolean HOVM6R;
protected boolean HOVM6U;
protected boolean HOVM7;
protected boolean HOVM7E;
protected boolean HOVM7L;
protected boolean HOVM7R;
protected boolean HOVM7U;
protected int HOVM8;
protected byte HOVM8E;
protected short HOVM8L;
protected byte HOVM8R;
protected int HOVM8U;
protected short HOVM9;
protected boolean HOVM9E;
protected boolean HOVM9L;
protected boolean HOVM9R;
protected boolean HOVM9U;
protected byte HOVN;
protected byte HOVNO;
protected byte HOVNO10;
protected byte HOVNO11;
protected byte HOVNO12;
protected byte HOVNO13;
protected byte HOVNO14;
protected byte HOVNO15;
protected byte HOVNO16;
protected byte HOVNO2;
protected byte HOVNO3;
protected byte HOVNO4;
protected byte HOVNO5;
protected byte HOVNO6;
protected byte HOVNO7;
protected byte HOVNO8;
protected byte HOVNO9;
protected byte HOVNR;
protected boolean HOVNR10;
protected byte HOVNR11;
protected boolean HOVNR12;
protected boolean HOVNR13;
protected byte HOVNR14;
protected boolean HOVNR15;
protected boolean HOVNR16;
protected byte HOVNR2;
protected String HOVNR3;
protected byte HOVNR4;
protected byte HOVNR5;
protected byte HOVNR6;
protected byte HOVNR7;
protected byte HOVNR8;
protected byte HOVNR9;
protected byte HOVNW;
protected byte HOVNW10;
protected byte HOVNW11;
protected byte HOVNW12;
protected byte HOVNW13;
protected byte HOVNW14;
protected byte HOVNW15;
protected byte HOVNW16;
protected byte HOVNW3;
protected byte HOVNW4;
protected byte HOVNW5;
protected byte HOVNW6;
protected byte HOVNW7;
protected byte HOVNW8;
protected byte HOVNW9;
protected boolean HOVO101;
protected boolean HOVO102;
protected byte HOVO11;
protected boolean HOVO111;
protected boolean HOVO112;
protected byte HOVO12;
protected boolean HOVO121;
protected boolean HOVO122;
protected boolean HOVO131;
protected boolean HOVO132;
protected boolean HOVO141;
protected boolean HOVO142;
protected boolean HOVO151;
protected boolean HOVO152;
protected boolean HOVO161;
protected boolean HOVO162;
protected byte HOVO21;
protected byte HOVO22;
protected byte HOVO31;
protected byte HOVO32;
protected byte HOVO41;
protected boolean HOVO42;
protected byte HOVO51;
protected boolean HOVO52;
protected byte HOVO61;
protected boolean HOVO62;
protected byte HOVO71;
protected boolean HOVO72;
protected boolean HOVO81;
protected boolean HOVO82;
protected boolean HOVO91;
protected boolean HOVO92;
protected byte HOVST;
protected byte HOVST10;
protected byte HOVST11;
protected byte HOVST12;
protected byte HOVST13;
protected byte HOVST14;
protected byte HOVST15;
protected byte HOVST16;
protected byte HOVST2;
protected byte HOVST3;
protected byte HOVST4;
protected byte HOVST5;
protected byte HOVST6;
protected byte HOVST7;
protected byte HOVST8;
protected byte HOVST9;
protected byte HOVW11;
protected byte HOVW12;
protected byte HOVW13;
protected byte HOVW14;
protected byte HOVW15;
protected byte HOVW16;
protected byte HOVW3;
protected byte HOVW4;
protected byte HOVW5;
protected byte HOVW6;
protected byte HOVW7;
protected byte HOVW8;
protected short HOVYR;
protected short HOVYR10;
protected short HOVYR11;
protected short HOVYR12;
protected short HOVYR13;
protected short HOVYR14;
protected short HOVYR15;
protected short HOVYR16;
protected short HOVYR2;
protected short HOVYR3;
protected short HOVYR4;
protected short HOVYR5;
protected short HOVYR6;
protected short HOVYR7;
protected short HOVYR8;
protected short HOVYR9;
protected byte HOWHN01;
protected byte HOWHN02;
protected byte HOWHN03;
protected byte HOWHN04;
protected boolean HOWHN05;
protected double HSCRP;
protected short HSECLST;
protected boolean HSEINT;
protected short HSEYR;
protected double HTFEV;
protected double HTFVC;
protected byte HTOK;
protected short HTPF;
protected double HTVAL;
protected short IAA39;
protected boolean IAA39FE;
protected boolean IAA39FL;
protected boolean IAA39FR;
protected boolean IAA39FU;
protected byte IAA39ME;
protected short IAA39ML;
protected boolean IAA39MR;
protected short IAA39MU;
protected byte IAA39OE;
protected boolean IAA39OL;
protected byte IAA39OR;
protected short IAA39OU;
protected byte IAA39WE;
protected boolean IAA39WL;
protected boolean IAA39WR;
protected boolean IAA39WU;
protected boolean IAA39YE;
protected boolean IAA39YL;
protected boolean IAA39YR;
protected boolean IAA39YU;
protected short IAA40;
protected boolean IAA40FE;
protected boolean IAA40FL;
protected boolean IAA40FR;
protected boolean IAA40FU;
protected byte IAA40ME;
protected short IAA40ML;
protected boolean IAA40MR;
protected short IAA40MU;
protected byte IAA40OE;
protected short IAA40OL;
protected byte IAA40OR;
protected short IAA40OU;
protected boolean IAA40WE;
protected boolean IAA40WL;
protected boolean IAA40WR;
protected boolean IAA40WU;
protected boolean IAA40YE;
protected boolean IAA40YL;
protected boolean IAA40YR;
protected boolean IAA40YU;
protected short IAA41;
protected byte IAA41FE;
protected short IAA41FL;
protected byte IAA41FR;
protected short IAA41FU;
protected boolean IAA41ME;
protected boolean IAA41ML;
protected boolean IAA41MR;
protected short IAA41MU;
protected byte IAA41OE;
protected short IAA41OL;
protected byte IAA41OR;
protected short IAA41OU;
protected byte IAA41WE;
protected byte IAA41WL;
protected byte IAA41WR;
protected byte IAA41WU;
protected boolean IAA41YE;
protected boolean IAA41YL;
protected boolean IAA41YR;
protected boolean IAA41YU;
protected short IAA42;
protected boolean IAA42FE;
protected boolean IAA42FL;
protected boolean IAA42FR;
protected boolean IAA42FU;
protected byte IAA42ME;
protected short IAA42ML;
protected byte IAA42MR;
protected short IAA42MU;
protected byte IAA42OE;
protected short IAA42OL;
protected byte IAA42OR;
protected short IAA42OU;
protected byte IAA42WE;
protected short IAA42WL;
protected byte IAA42WR;
protected short IAA42WU;
protected boolean IAA42YE;
protected boolean IAA42YL;
protected boolean IAA42YR;
protected short IAA42YU;
protected short IAA43;
protected boolean IAA43FE;
protected boolean IAA43FL;
protected boolean IAA43FR;
protected boolean IAA43FU;
protected byte IAA43ME;
protected short IAA43ML;
protected byte IAA43MR;
protected short IAA43MU;
protected byte IAA43OE;
protected byte IAA43OL;
protected byte IAA43OR;
protected short IAA43OU;
protected byte IAA43WE;
protected boolean IAA43WL;
protected boolean IAA43WR;
protected boolean IAA43WU;
protected boolean IAA43YE;
protected boolean IAA43YL;
protected boolean IAA43YR;
protected boolean IAA43YU;
protected short IAA44;
protected boolean IAA44FE;
protected boolean IAA44FL;
protected boolean IAA44FR;
protected boolean IAA44FU;
protected byte IAA44ME;
protected short IAA44ML;
protected boolean IAA44MR;
protected short IAA44MU;
protected byte IAA44OE;
protected short IAA44OL;
protected byte IAA44OR;
protected short IAA44OU;
protected byte IAA44WE;
protected boolean IAA44WL;
protected byte IAA44WR;
protected byte IAA44WU;
protected boolean IAA44YE;
protected boolean IAA44YL;
protected boolean IAA44YR;
protected boolean IAA44YU;
protected short IAA45;
protected boolean IAA45FE;
protected boolean IAA45FL;
protected boolean IAA45FR;
protected boolean IAA45FU;
protected byte IAA45ME;
protected short IAA45ML;
protected byte IAA45MR;
protected short IAA45MU;
protected byte IAA45OE;
protected short IAA45OL;
protected byte IAA45OR;
protected short IAA45OU;
protected byte IAA45WE;
protected byte IAA45WL;
protected byte IAA45WR;
protected short IAA45WU;
protected boolean IAA45YE;
protected boolean IAA45YL;
protected boolean IAA45YR;
protected boolean IAA45YU;
protected short IAA46;
protected boolean IAA46FE;
protected short IAA46FL;
protected boolean IAA46FR;
protected short IAA46FU;
protected byte IAA46ME;
protected short IAA46ML;
protected byte IAA46MR;
protected short IAA46MU;
protected byte IAA46OE;
protected short IAA46OL;
protected byte IAA46OR;
protected short IAA46OU;
protected byte IAA46WE;
protected byte IAA46WL;
protected boolean IAA46WR;
protected byte IAA46WU;
protected boolean IAA46YE;
protected boolean IAA46YL;
protected boolean IAA46YR;
protected boolean IAA46YU;
protected short IAA47;
protected boolean IAA47FE;
protected boolean IAA47FL;
protected boolean IAA47FR;
protected boolean IAA47FU;
protected byte IAA47ME;
protected short IAA47ML;
protected boolean IAA47MR;
protected short IAA47MU;
protected byte IAA47OE;
protected short IAA47OL;
protected byte IAA47OR;
protected short IAA47OU;
protected byte IAA47WE;
protected byte IAA47WL;
protected byte IAA47WR;
protected byte IAA47WU;
protected boolean IAA47YE;
protected boolean IAA47YL;
protected boolean IAA47YR;
protected short IAA47YU;
protected short IAA48;
protected boolean IAA48FE;
protected boolean IAA48FL;
protected boolean IAA48FR;
protected boolean IAA48FU;
protected boolean IAA48ME;
protected boolean IAA48ML;
protected boolean IAA48MR;
protected short IAA48MU;
protected byte IAA48OE;
protected short IAA48OL;
protected byte IAA48OR;
protected short IAA48OU;
protected byte IAA48WE;
protected byte IAA48WL;
protected boolean IAA48WR;
protected short IAA48WU;
protected boolean IAA48YE;
protected boolean IAA48YL;
protected boolean IAA48YR;
protected boolean IAA48YU;
protected short IAA49;
protected boolean IAA49FE;
protected boolean IAA49FL;
protected boolean IAA49FR;
protected boolean IAA49FU;
protected boolean IAA49ME;
protected boolean IAA49ML;
protected boolean IAA49MR;
protected short IAA49MU;
protected boolean IAA49OE;
protected boolean IAA49OL;
protected boolean IAA49OR;
protected short IAA49OU;
protected boolean IAA49WE;
protected boolean IAA49WL;
protected boolean IAA49WR;
protected boolean IAA49WU;
protected boolean IAA49YE;
protected boolean IAA49YL;
protected boolean IAA49YR;
protected boolean IAA49YU;
protected short IAA50;
protected boolean IAA50FE;
protected boolean IAA50FL;
protected boolean IAA50FR;
protected boolean IAA50FU;
protected boolean IAA50ME;
protected boolean IAA50ML;
protected boolean IAA50MR;
protected boolean IAA50MU;
protected boolean IAA50OE;
protected boolean IAA50OL;
protected boolean IAA50OR;
protected boolean IAA50OU;
protected byte IAA50WE;
protected byte IAA50WL;
protected byte IAA50WR;
protected byte IAA50WU;
protected boolean IAA50YE;
protected boolean IAA50YL;
protected boolean IAA50YR;
protected boolean IAA50YU;
protected short IAA51;
protected boolean IAA51FE;
protected boolean IAA51FL;
protected boolean IAA51FR;
protected boolean IAA51FU;
protected boolean IAA51ME;
protected boolean IAA51ML;
protected boolean IAA51MR;
protected boolean IAA51MU;
protected byte IAA51OE;
protected short IAA51OL;
protected byte IAA51OR;
protected short IAA51OU;
protected boolean IAA51WE;
protected boolean IAA51WL;
protected boolean IAA51WR;
protected boolean IAA51WU;
protected boolean IAA51YE;
protected boolean IAA51YL;
protected boolean IAA51YR;
protected boolean IAA51YU;
protected short IAA52;
protected boolean IAA52FE;
protected boolean IAA52FL;
protected boolean IAA52FR;
protected boolean IAA52FU;
protected boolean IAA52ME;
protected boolean IAA52ML;
protected boolean IAA52MR;
protected short IAA52MU;
protected byte IAA52OE;
protected boolean IAA52OL;
protected byte IAA52OR;
protected short IAA52OU;
protected boolean IAA52WE;
protected boolean IAA52WL;
protected boolean IAA52WR;
protected boolean IAA52WU;
protected boolean IAA52YE;
protected boolean IAA52YL;
protected boolean IAA52YR;
protected boolean IAA52YU;
protected short IAA53;
protected boolean IAA53FE;
protected boolean IAA53FL;
protected boolean IAA53FR;
protected boolean IAA53FU;
protected boolean IAA53ME;
protected boolean IAA53ML;
protected boolean IAA53MR;
protected short IAA53MU;
protected byte IAA53OE;
protected boolean IAA53OL;
protected byte IAA53OR;
protected short IAA53OU;
protected byte IAA53WE;
protected boolean IAA53WL;
protected byte IAA53WR;
protected byte IAA53WU;
protected boolean IAA53YE;
protected boolean IAA53YL;
protected boolean IAA53YR;
protected boolean IAA53YU;
protected short IAA54;
protected boolean IAA54FE;
protected boolean IAA54FL;
protected boolean IAA54FR;
protected boolean IAA54FU;
protected boolean IAA54ME;
protected short IAA54ML;
protected boolean IAA54MR;
protected short IAA54MU;
protected byte IAA54OE;
protected short IAA54OL;
protected byte IAA54OR;
protected short IAA54OU;
protected boolean IAA54WE;
protected boolean IAA54WL;
protected boolean IAA54WR;
protected boolean IAA54WU;
protected boolean IAA54YE;
protected boolean IAA54YL;
protected boolean IAA54YR;
protected short IAA54YU;
protected short IAA55;
protected byte IAA55FE;
protected byte IAA55FL;
protected boolean IAA55FR;
protected byte IAA55FU;
protected boolean IAA55ME;
protected short IAA55ML;
protected boolean IAA55MR;
protected short IAA55MU;
protected byte IAA55OE;
protected short IAA55OL;
protected byte IAA55OR;
protected short IAA55OU;
protected byte IAA55WE;
protected short IAA55WL;
protected byte IAA55WR;
protected short IAA55WU;
protected boolean IAA55YE;
protected boolean IAA55YL;
protected boolean IAA55YR;
protected boolean IAA55YU;
protected short IAA56;
protected boolean IAA56FE;
protected boolean IAA56FL;
protected boolean IAA56FR;
protected boolean IAA56FU;
protected boolean IAA56ME;
protected short IAA56ML;
protected boolean IAA56MR;
protected short IAA56MU;
protected byte IAA56OE;
protected byte IAA56OL;
protected byte IAA56OR;
protected short IAA56OU;
protected byte IAA56WE;
protected byte IAA56WL;
protected byte IAA56WR;
protected byte IAA56WU;
protected boolean IAA56YE;
protected boolean IAA56YL;
protected boolean IAA56YR;
protected boolean IAA56YU;
protected short IAA57;
protected boolean IAA57FE;
protected boolean IAA57FL;
protected boolean IAA57FR;
protected boolean IAA57FU;
protected boolean IAA57ME;
protected boolean IAA57ML;
protected boolean IAA57MR;
protected boolean IAA57MU;
protected boolean IAA57OE;
protected boolean IAA57OL;
protected boolean IAA57OR;
protected short IAA57OU;
protected boolean IAA57WE;
protected boolean IAA57WL;
protected boolean IAA57WR;
protected boolean IAA57WU;
protected boolean IAA57YE;
protected boolean IAA57YL;
protected boolean IAA57YR;
protected boolean IAA57YU;
protected short IAA58;
protected boolean IAA58FE;
protected boolean IAA58FL;
protected boolean IAA58FR;
protected boolean IAA58FU;
protected boolean IAA58ME;
protected boolean IAA58ML;
protected boolean IAA58MR;
protected boolean IAA58MU;
protected boolean IAA58OE;
protected boolean IAA58OL;
protected boolean IAA58OR;
protected boolean IAA58OU;
protected boolean IAA58WE;
protected boolean IAA58WL;
protected boolean IAA58WR;
protected boolean IAA58WU;
protected boolean IAA58YE;
protected boolean IAA58YL;
protected boolean IAA58YR;
protected boolean IAA58YU;
protected short IAA59;
protected boolean IAA59FE;
protected boolean IAA59FL;
protected boolean IAA59FR;
protected boolean IAA59FU;
protected boolean IAA59ME;
protected boolean IAA59ML;
protected boolean IAA59MR;
protected boolean IAA59MU;
protected boolean IAA59OE;
protected boolean IAA59OL;
protected boolean IAA59OR;
protected boolean IAA59OU;
protected boolean IAA59WE;
protected boolean IAA59WL;
protected boolean IAA59WR;
protected boolean IAA59WU;
protected boolean IAA59YE;
protected boolean IAA59YL;
protected boolean IAA59YR;
protected boolean IAA59YU;
protected short IAA60;
protected boolean IAA60FE;
protected boolean IAA60FL;
protected boolean IAA60FR;
protected boolean IAA60FU;
protected byte IAA60ME;
protected boolean IAA60ML;
protected boolean IAA60MR;
protected short IAA60MU;
protected byte IAA60OE;
protected short IAA60OL;
protected boolean IAA60OR;
protected short IAA60OU;
protected boolean IAA60WE;
protected boolean IAA60WL;
protected boolean IAA60WR;
protected boolean IAA60WU;
protected boolean IAA60YE;
protected boolean IAA60YL;
protected boolean IAA60YR;
protected boolean IAA60YU;
protected short IAA61;
protected boolean IAA61FE;
protected boolean IAA61FL;
protected boolean IAA61FR;
protected boolean IAA61FU;
protected byte IAA61ME;
protected short IAA61ML;
protected boolean IAA61MR;
protected short IAA61MU;
protected byte IAA61OE;
protected boolean IAA61OL;
protected byte IAA61OR;
protected short IAA61OU;
protected boolean IAA61WE;
protected boolean IAA61WL;
protected boolean IAA61WR;
protected boolean IAA61WU;
protected boolean IAA61YE;
protected boolean IAA61YL;
protected boolean IAA61YR;
protected boolean IAA61YU;
protected short IAA62;
protected boolean IAA62FE;
protected boolean IAA62FL;
protected boolean IAA62FR;
protected boolean IAA62FU;
protected boolean IAA62ME;
protected boolean IAA62ML;
protected boolean IAA62MR;
protected short IAA62MU;
protected byte IAA62OE;
protected short IAA62OL;
protected byte IAA62OR;
protected short IAA62OU;
protected boolean IAA62WE;
protected boolean IAA62WL;
protected boolean IAA62WR;
protected boolean IAA62WU;
protected boolean IAA62YE;
protected boolean IAA62YL;
protected boolean IAA62YR;
protected boolean IAA62YU;
protected short IAA63;
protected boolean IAA63FE;
protected boolean IAA63FL;
protected boolean IAA63FR;
protected boolean IAA63FU;
protected boolean IAA63ME;
protected boolean IAA63ML;
protected boolean IAA63MR;
protected boolean IAA63MU;
protected boolean IAA63OE;
protected boolean IAA63OL;
protected boolean IAA63OR;
protected boolean IAA63OU;
protected boolean IAA63WE;
protected boolean IAA63WL;
protected boolean IAA63WR;
protected boolean IAA63WU;
protected boolean IAA63YE;
protected boolean IAA63YL;
protected boolean IAA63YR;
protected boolean IAA63YU;
protected short IAA64;
protected boolean IAA64FE;
protected boolean IAA64FL;
protected boolean IAA64FR;
protected boolean IAA64FU;
protected boolean IAA64ME;
protected boolean IAA64ML;
protected boolean IAA64MR;
protected short IAA64MU;
protected boolean IAA64OE;
protected boolean IAA64OL;
protected byte IAA64OR;
protected short IAA64OU;
protected boolean IAA64WE;
protected boolean IAA64WL;
protected boolean IAA64WR;
protected boolean IAA64WU;
protected boolean IAA64YE;
protected boolean IAA64YL;
protected boolean IAA64YR;
protected boolean IAA64YU;
protected short IAA65;
protected boolean IAA65FE;
protected boolean IAA65FL;
protected boolean IAA65FR;
protected boolean IAA65FU;
protected byte IAA65ME;
protected short IAA65ML;
protected byte IAA65MR;
protected short IAA65MU;
protected boolean IAA65OE;
protected boolean IAA65OL;
protected boolean IAA65OR;
protected short IAA65OU;
protected byte IAA65WE;
protected boolean IAA65WL;
protected byte IAA65WR;
protected byte IAA65WU;
protected boolean IAA65YE;
protected boolean IAA65YL;
protected boolean IAA65YR;
protected boolean IAA65YU;
protected short IAA66;
protected boolean IAA66FE;
protected boolean IAA66FL;
protected boolean IAA66FR;
protected boolean IAA66FU;
protected boolean IAA66ME;
protected boolean IAA66ML;
protected boolean IAA66MR;
protected boolean IAA66MU;
protected boolean IAA66OE;
protected boolean IAA66OL;
protected boolean IAA66OR;
protected short IAA66OU;
protected boolean IAA66WE;
protected boolean IAA66WL;
protected boolean IAA66WR;
protected boolean IAA66WU;
protected boolean IAA66YE;
protected boolean IAA66YL;
protected boolean IAA66YR;
protected boolean IAA66YU;
protected byte IAA67;
protected boolean IAA67FE;
protected boolean IAA67FL;
protected boolean IAA67FR;
protected short IAA67FU;
protected boolean IAA67ME;
protected boolean IAA67ML;
protected boolean IAA67MR;
protected boolean IAA67MU;
protected boolean IAA67OE;
protected boolean IAA67OL;
protected boolean IAA67OR;
protected boolean IAA67OU;
protected boolean IAA67WE;
protected boolean IAA67WL;
protected boolean IAA67WR;
protected boolean IAA67WU;
protected boolean IAA67YE;
protected boolean IAA67YL;
protected boolean IAA67YR;
protected boolean IAA67YU;
protected short IAA68;
protected boolean IAA68FE;
protected boolean IAA68FL;
protected boolean IAA68FR;
protected boolean IAA68FU;
protected boolean IAA68ME;
protected boolean IAA68ML;
protected boolean IAA68MR;
protected boolean IAA68MU;
protected boolean IAA68OE;
protected boolean IAA68OL;
protected boolean IAA68OR;
protected boolean IAA68OU;
protected boolean IAA68WE;
protected boolean IAA68WL;
protected boolean IAA68WR;
protected boolean IAA68WU;
protected boolean IAA68YE;
protected boolean IAA68YL;
protected boolean IAA68YR;
protected boolean IAA68YU;
protected short IAA69;
protected boolean IAA69FE;
protected boolean IAA69FL;
protected boolean IAA69FR;
protected boolean IAA69FU;
protected boolean IAA69ME;
protected boolean IAA69ML;
protected boolean IAA69MR;
protected boolean IAA69MU;
protected boolean IAA69OE;
protected boolean IAA69OL;
protected boolean IAA69OR;
protected boolean IAA69OU;
protected boolean IAA69WE;
protected boolean IAA69WL;
protected boolean IAA69WR;
protected boolean IAA69WU;
protected boolean IAA69YE;
protected boolean IAA69YL;
protected boolean IAA69YR;
protected boolean IAA69YU;
protected short IAA70;
protected boolean IAA70FE;
protected boolean IAA70FL;
protected boolean IAA70FR;
protected boolean IAA70FU;
protected boolean IAA70ME;
protected boolean IAA70ML;
protected boolean IAA70MR;
protected boolean IAA70MU;
protected boolean IAA70OE;
protected boolean IAA70OL;
protected boolean IAA70OR;
protected boolean IAA70OU;
protected boolean IAA70WE;
protected boolean IAA70WL;
protected boolean IAA70WR;
protected boolean IAA70WU;
protected boolean IAA70YE;
protected boolean IAA70YL;
protected boolean IAA70YR;
protected boolean IAA70YU;
protected short IAA71;
protected boolean IAA71FE;
protected boolean IAA71FL;
protected boolean IAA71FR;
protected boolean IAA71FU;
protected boolean IAA71ME;
protected boolean IAA71ML;
protected boolean IAA71MR;
protected short IAA71MU;
protected boolean IAA71OE;
protected boolean IAA71OL;
protected boolean IAA71OR;
protected boolean IAA71OU;
protected boolean IAA71WE;
protected boolean IAA71WL;
protected boolean IAA71WR;
protected boolean IAA71WU;
protected boolean IAA71YE;
protected boolean IAA71YL;
protected boolean IAA71YR;
protected boolean IAA71YU;
protected byte IAA72;
protected boolean IAA72FE;
protected boolean IAA72FL;
protected boolean IAA72FR;
protected boolean IAA72FU;
protected boolean IAA72ME;
protected boolean IAA72ML;
protected boolean IAA72MR;
protected boolean IAA72MU;
protected boolean IAA72OE;
protected boolean IAA72OL;
protected boolean IAA72OR;
protected short IAA72OU;
protected boolean IAA72WE;
protected boolean IAA72WL;
protected boolean IAA72WR;
protected boolean IAA72WU;
protected boolean IAA72YE;
protected boolean IAA72YL;
protected boolean IAA72YR;
protected boolean IAA72YU;
protected byte IAAIPE;
protected short IAAIPL;
protected byte IAAIPR;
protected short IAAIPU;
protected byte IAB10;
protected byte IAB11;
protected byte IAB12;
protected byte IAB13;
protected byte IAB14;
protected byte IAB15;
protected byte IAB16;
protected byte IAB17;
protected byte IAB18;
protected byte IAB28;
protected byte IAB29;
protected byte IAB30;
protected byte IAB31;
protected byte IAB32;
protected byte IAB33;
protected byte IAB34;
protected byte IAB35;
protected byte IAB36;
protected byte IAB46;
protected byte IAB47;
protected byte IAB48;
protected byte IAB49;
protected byte IAB50;
protected byte IAB51;
protected byte IAB52;
protected byte IAB53;
protected byte IAB54;
protected byte IAB64;
protected byte IAB65;
protected byte IAB66;
protected byte IAB67;
protected byte IAB68;
protected boolean IAB69;
protected byte IAB70;
protected byte IAB71;
protected byte IAB72;
protected byte IABEB;
protected byte IABEN1;
protected byte IABEN2;
protected byte IABEN3;
protected boolean IABEN4;
protected byte IABEP1;
protected byte IABEP2;
protected boolean IABEP3;
protected byte IABEPM1;
protected byte IABEPM2;
protected boolean IABEPM3;
protected byte IABEPN1;
protected byte IABEPN2;
protected boolean IABEPN3;
protected byte IABER1;
protected byte IABER2;
protected byte IABER3;
protected byte IABER4;
protected byte IABERM1;
protected byte IABERM2;
protected byte IABERM3;
protected byte IABERM4;
protected byte IABM10;
protected byte IABM11;
protected byte IABM12;
protected byte IABM13;
protected byte IABM14;
protected byte IABM15;
protected boolean IABM16;
protected byte IABM17;
protected byte IABM18;
protected byte IABM28;
protected byte IABM29;
protected byte IABM30;
protected byte IABM31;
protected byte IABM32;
protected byte IABM33;
protected boolean IABM34;
protected byte IABM35;
protected byte IABM36;
protected byte IABM46;
protected byte IABM47;
protected byte IABM48;
protected byte IABM49;
protected byte IABM50;
protected byte IABM51;
protected byte IABM52;
protected byte IABM53;
protected byte IABM54;
protected byte IABM64;
protected byte IABM65;
protected byte IABM66;
protected byte IABM67;
protected byte IABM68;
protected boolean IABM69;
protected byte IABM70;
protected byte IABM71;
protected boolean IABM72;
protected byte IABW10;
protected byte IABW11;
protected byte IABW12;
protected byte IABW13;
protected byte IABW14;
protected byte IABW15;
protected byte IABW16;
protected byte IABW17;
protected byte IABW18;
protected byte IABW28;
protected boolean IABW29;
protected byte IABW30;
protected byte IABW31;
protected byte IABW32;
protected byte IABW33;
protected byte IABW34;
protected byte IABW35;
protected boolean IABW36;
protected byte IABW46;
protected byte IABW47;
protected byte IABW48;
protected byte IABW49;
protected byte IABW50;
protected byte IABW51;
protected byte IABW52;
protected byte IABW53;
protected byte IABW54;
protected byte IABW64;
protected byte IABW65;
protected boolean IABW66;
protected byte IABW67;
protected boolean IABW68;
protected boolean IABW69;
protected byte IABW70;
protected byte IABW71;
protected byte IABW72;
protected byte IACISAE;
protected short IACISAL;
protected byte IACISAR;
protected short IACISAU;
protected byte IADATM;
protected short IADATY;
protected byte IADEBME;
protected short IADEBML;
protected byte IADEBMR;
protected short IADEBMU;
protected byte IAEAR2E;
protected int IAEAR2L;
protected byte IAEAR2R;
protected int IAEAR2U;
protected byte IAEAR3E;
protected int IAEAR3L;
protected byte IAEAR3R;
protected int IAEAR3U;
protected byte IAEAR4E;
protected int IAEAR4L;
protected byte IAEAR4R;
protected int IAEAR4U;
protected byte IAEAR5E;
protected int IAEAR5L;
protected byte IAEAR5R;
protected int IAEAR5U;
protected byte IAEAR6E;
protected int IAEAR6L;
protected byte IAEAR6R;
protected int IAEAR6U;
protected byte IAEAR7E;
protected int IAEAR7L;
protected byte IAEAR7R;
protected int IAEAR7U;
protected byte IAEAR8E;
protected int IAEAR8L;
protected byte IAEAR8R;
protected int IAEAR8U;
protected byte IAEARE;
protected int IAEARL;
protected byte IAEARR;
protected int IAEARU;
protected short IAERN;
protected byte IAERN10;
protected int IAERN2;
protected int IAERN3;
protected int IAERN4;
protected int IAERN5;
protected short IAERN6;
protected short IAERN7;
protected short IAERN8;
protected byte IAERN9;
protected byte IAFBAE;
protected int IAFBAL;
protected byte IAFBAR;
protected int IAFBAU;
protected byte IAFFNUM;
protected byte IAFINDC;
protected byte IAFUEL;
protected byte IAHDB;
protected byte IAHDN1;
protected byte IAHDN2;
protected byte IAHDN3;
protected byte IAHDN4;
protected boolean IAHDN5;
protected byte IAHDP1;
protected byte IAHDP2;
protected byte IAHDP3;
protected byte IAHDP4;
protected byte IAHDPM1;
protected byte IAHDPM2;
protected byte IAHDPM3;
protected byte IAHDPM4;
protected byte IAHDPN1;
protected byte IAHDPN2;
protected byte IAHDPN3;
protected byte IAHDPN4;
protected byte IAHDR1;
protected byte IAHDR2;
protected byte IAHDR3;
protected byte IAHDR4;
protected boolean IAHDR5;
protected byte IAHDRM1;
protected byte IAHDRM2;
protected byte IAHDRM3;
protected byte IAHDRM4;
protected boolean IAHDRM5;
protected byte IAHOMEE;
protected int IAHOMEL;
protected byte IAHOMER;
protected int IAHOMEU;
protected byte IAIRAE;
protected int IAIRAL;
protected byte IAIRAR;
protected int IAIRAU;
protected byte IAISA1;
protected byte IAISA2;
protected byte IAISA3;
protected byte IAISADE;
protected short IAISADL;
protected byte IAISADR;
protected short IAISADU;
protected byte IALIPAE;
protected int IALIPAL;
protected byte IALIPAR;
protected int IALIPAU;
protected byte IALISAE;
protected short IALISAL;
protected byte IALISAR;
protected short IALISAU;
protected byte IALIYAE;
protected int IALIYAL;
protected byte IALIYAR;
protected int IALIYAU;
protected byte IALM;
protected byte IALM19;
protected byte IALM2;
protected boolean IALM20;
protected byte IALM21;
protected byte IALM22;
protected byte IALM23;
protected byte IALM24;
protected byte IALM25;
protected byte IALM26;
protected byte IALM27;
protected byte IALM3;
protected byte IALM37;
protected byte IALM38;
protected byte IALM39;
protected byte IALM4;
protected byte IALM40;
protected byte IALM41;
protected byte IALM42;
protected byte IALM43;
protected byte IALM44;
protected byte IALM45;
protected byte IALM5;
protected byte IALM55;
protected byte IALM56;
protected byte IALM57;
protected byte IALM58;
protected boolean IALM59;
protected byte IALM6;
protected byte IALM60;
protected byte IALM61;
protected byte IALM62;
protected byte IALM63;
protected byte IALM7;
protected byte IALM8;
protected boolean IALM9;
protected byte IALOAME;
protected short IALOAML;
protected byte IALOAMR;
protected short IALOAMU;
protected byte IALOAN1;
protected byte IALOAN2;
protected byte IALOAN3;
protected byte IALOAN4;
protected byte IALREFE;
protected byte IALREFL;
protected byte IALREFR;
protected byte IALREFU;
protected byte IALREME;
protected short IALREML;
protected byte IALREMR;
protected short IALREMU;
protected byte IALREOE;
protected short IALREOL;
protected byte IALREOR;
protected short IALREOU;
protected byte IALREWE;
protected short IALREWL;
protected byte IALREWR;
protected byte IALREWU;
protected byte IALREYE;
protected short IALREYL;
protected byte IALREYR;
protected short IALREYU;
protected byte IALY;
protected byte IALY19;
protected byte IALY2;
protected byte IALY20;
protected byte IALY21;
protected byte IALY22;
protected byte IALY23;
protected byte IALY24;
protected byte IALY25;
protected byte IALY26;
protected byte IALY27;
protected byte IALY3;
protected byte IALY37;
protected byte IALY38;
protected byte IALY39;
protected byte IALY4;
protected byte IALY40;
protected byte IALY41;
protected byte IALY42;
protected byte IALY43;
protected byte IALY44;
protected byte IALY45;
protected byte IALY5;
protected byte IALY55;
protected byte IALY56;
protected byte IALY57;
protected byte IALY58;
protected boolean IALY59;
protected byte IALY6;
protected byte IALY60;
protected byte IALY61;
protected byte IALY62;
protected byte IALY63;
protected byte IALY7;
protected byte IALY8;
protected boolean IALY9;
protected byte IANPBPE;
protected short IANPBPL;
protected byte IANPBPR;
protected short IANPBPU;
protected byte IAOASAE;
protected int IAOASAL;
protected byte IAOASAR;
protected int IAOASAU;
protected byte IAOMME;
protected int IAOMML;
protected byte IAOMMR;
protected int IAOMMU;
protected byte IAORGFC;
protected byte IAOWEME;
protected short IAOWEML;
protected byte IAOWEMR;
protected short IAOWEMU;
protected byte IAP39;
protected byte IAP40;
protected byte IAP41;
protected byte IAP42;
protected byte IAP43;
protected byte IAP44;
protected byte IAP45;
protected byte IAP46;
protected byte IAP47;
protected byte IAP48;
protected byte IAP49;
protected byte IAP50;
protected byte IAP51;
protected byte IAP52;
protected byte IAP53;
protected byte IAP54;
protected byte IAP55;
protected byte IAP56;
protected byte IAP57;
protected byte IAP58;
protected byte IAP59;
protected byte IAP60;
protected byte IAP61;
protected byte IAP62;
protected byte IAP63;
protected byte IAP64;
protected byte IAP65;
protected byte IAP66;
protected byte IAP67;
protected byte IAP68;
protected boolean IAP69;
protected byte IAP70;
protected byte IAP71;
protected byte IAP72;
protected byte IAPAY;
protected boolean IAPAY0E;
protected boolean IAPAY0L;
protected boolean IAPAY0R;
protected boolean IAPAY0U;
protected byte IAPAY2;
protected boolean IAPAY9E;
protected boolean IAPAY9L;
protected boolean IAPAY9R;
protected boolean IAPAY9U;
protected byte IAPAYR;
protected byte IAPAYR2;
protected byte IAPK1;
protected byte IAPK2;
protected byte IAPK3;
protected byte IAPK4;
protected byte IAPKM1E;
protected int IAPKM1L;
protected byte IAPKM1R;
protected int IAPKM1U;
protected byte IAPKM2E;
protected int IAPKM2L;
protected byte IAPKM2R;
protected int IAPKM2U;
protected byte IAPKM3E;
protected boolean IAPKM3L;
protected byte IAPKM3R;
protected short IAPKM3U;
protected byte IAPKM4E;
protected short IAPKM4L;
protected byte IAPKM4R;
protected short IAPKM4U;
protected byte IAPKM5E;
protected int IAPKM5L;
protected byte IAPKM5R;
protected int IAPKM5U;
protected byte IAPKM6E;
protected int IAPKM6L;
protected byte IAPKM6R;
protected int IAPKM6U;
protected byte IAPKM7E;
protected short IAPKM7L;
protected byte IAPKM7R;
protected short IAPKM7U;
protected byte IAPKM8E;
protected int IAPKM8L;
protected byte IAPKM8R;
protected int IAPKM8U;
protected byte IAPKZM1;
protected byte IAPKZM2;
protected byte IAPKZM3;
protected boolean IAPKZM4;
protected byte IAPLW;
protected byte IAPLY;
protected byte IAPLYP;
protected byte IAPLYW;
protected byte IAPPAFE;
protected boolean IAPPAFL;
protected byte IAPPAFR;
protected short IAPPAFU;
protected byte IAPPAME;
protected short IAPPAML;
protected byte IAPPAMR;
protected short IAPPAMU;
protected byte IAPPAOE;
protected short IAPPAOL;
protected byte IAPPAOR;
protected short IAPPAOU;
protected byte IAPPAWE;
protected short IAPPAWL;
protected byte IAPPAWR;
protected short IAPPAWU;
protected byte IAPPAYE;
protected short IAPPAYL;
protected byte IAPPAYR;
protected short IAPPAYU;
protected byte IAPPEIE;
protected short IAPPEIL;
protected byte IAPPEIR;
protected short IAPPEIU;
protected byte IAPRC;
protected byte IAPROP1;
protected byte IAPROP2;
protected byte IAPROP3;
protected byte IAPROP4;
protected byte IAPROP5;
protected boolean IAPROP6;
protected byte IAPYR2C;
protected byte IAPYRC;
protected byte IAPYW3;
protected byte IAPYW4;
protected byte IAPYW5;
protected byte IAPYW6;
protected byte IAPYW7;
protected byte IAPYW8;
protected byte IAPYW9;
protected byte IARECE;
protected short IARECL;
protected byte IARECR;
protected short IARECU;
protected byte IAREGYR;
protected boolean IAREPFE;
protected boolean IAREPFL;
protected boolean IAREPFR;
protected boolean IAREPFU;
protected byte IAREPME;
protected byte IAREPML;
protected byte IAREPMR;
protected short IAREPMU;
protected byte IAREPOE;
protected short IAREPOL;
protected byte IAREPOR;
protected short IAREPOU;
protected byte IAREPWE;
protected byte IAREPWL;
protected byte IAREPWR;
protected byte IAREPWU;
protected byte IAREPYE;
protected byte IAREPYL;
protected byte IAREPYR;
protected short IAREPYU;
protected boolean IARG2FE;
protected boolean IARG2FL;
protected boolean IARG2FR;
protected boolean IARG2FU;
protected byte IARG2ME;
protected short IARG2ML;
protected byte IARG2MR;
protected short IARG2MU;
protected byte IARG2OE;
protected byte IARG2OL;
protected byte IARG2OR;
protected byte IARG2OU;
protected boolean IARG2WE;
protected boolean IARG2WL;
protected boolean IARG2WR;
protected boolean IARG2WU;
protected boolean IARG2YE;
protected boolean IARG2YL;
protected boolean IARG2YR;
protected boolean IARG2YU;
protected boolean IARGFE;
protected boolean IARGFL;
protected boolean IARGFR;
protected boolean IARGFU;
protected boolean IARGM;
protected byte IARGME;
protected short IARGML;
protected byte IARGMR;
protected short IARGMU;
protected byte IARGMW;
protected byte IARGMWP;
protected byte IARGOE;
protected short IARGOL;
protected byte IARGOR;
protected short IARGOU;
protected byte IARGWE;
protected byte IARGWL;
protected byte IARGWR;
protected byte IARGWU;
protected byte IARGYE;
protected byte IARGYL;
protected byte IARGYR;
protected byte IARGYR2;
protected byte IARGYRP;
protected byte IARGYU;
protected byte IARMWA;
protected boolean IARMWA2;
protected boolean IARMWPA;
protected byte IASAVAE;
protected int IASAVAL;
protected byte IASAVAR;
protected int IASAVAU;
protected byte IASCAE;
protected int IASCAL;
protected byte IASCAR;
protected int IASCAU;
protected byte IASHTY1;
protected byte IASHTY2;
protected byte IASHTY3;
protected byte IASHTY4;
protected byte IASI01;
protected byte IASI02;
protected byte IASI03;
protected byte IASI04;
protected byte IASI05;
protected byte IASI06;
protected byte IASI07;
protected byte IASI08;
protected byte IASI09;
protected byte IASI10;
protected byte IASI11;
protected byte IASIOIE;
protected short IASIOIL;
protected byte IASIOIR;
protected short IASIOIU;
protected byte IASISAE;
protected int IASISAL;
protected byte IASISAR;
protected int IASISAU;
protected byte IASSSE;
protected byte IASSSIE;
protected short IASSSIL;
protected byte IASSSIR;
protected short IASSSIU;
protected int IASSSL;
protected byte IASSSR;
protected int IASSSU;
protected boolean IAT39;
protected boolean IAT40;
protected boolean IAT41;
protected boolean IAT42;
protected boolean IAT43;
protected boolean IAT44;
protected boolean IAT45;
protected boolean IAT46;
protected boolean IAT47;
protected boolean IAT48;
protected boolean IAT49;
protected boolean IAT50;
protected boolean IAT51;
protected boolean IAT52;
protected boolean IAT53;
protected boolean IAT54;
protected boolean IAT55;
protected boolean IAT56;
protected boolean IAT57;
protected boolean IAT58;
protected boolean IAT59;
protected boolean IAT60;
protected boolean IAT61;
protected boolean IAT62;
protected boolean IAT63;
protected boolean IAT64;
protected boolean IAT65;
protected boolean IAT66;
protected boolean IAT67;
protected boolean IAT68;
protected boolean IAT69;
protected boolean IAT70;
protected boolean IAT71;
protected boolean IAT72;
protected byte IAUITE;
protected byte IAUITIE;
protected short IAUITIL;
protected byte IAUITIR;
protected short IAUITIU;
protected int IAUITL;
protected byte IAUITR;
protected int IAUITU;
protected byte IAW1R;
protected int IDAIND;
protected byte IFLAG_DBSR1;
protected byte IFLAG_DBSR2;
protected byte IFLAG_DCCONT;
protected byte IFLAG_DCFUND;
protected boolean IFLAG_EARN;
protected byte IFLAG_REC;
protected byte IFLAG_RTEN;
protected byte IINTDTM;
protected short IINTDTY;
protected byte INHALER;
protected byte INHALHR;
protected double INRECEIPT_04;
protected double INRECEIPT_SPA;
protected double LDL;
protected byte LFNOMEA;
protected byte LFRESP;
protected byte LFSTAND;
protected double LFTEMP;
protected byte LFWILL;
protected boolean MAINHH1;
protected short MAP1;
protected short MAP2;
protected short MAP3;
protected double MAPVAL;
protected byte MMAIDC;
protected byte MMBCSC;
protected byte MMCOMZ1;
protected byte MMCOMZ2;
protected boolean MMCOMZ3;
protected byte MMCRAV;
protected byte MMCRNA;
protected byte MMCRRE;
protected byte MMCRSC;
protected byte MMFTNA;
protected byte MMFTRE2;
protected byte MMFTSC;
protected double MMFTTI;
protected byte MMGSD1;
protected byte MMGSD2;
protected byte MMGSD3;
protected byte MMGSDOM;
protected byte MMGSN1;
protected byte MMGSN2;
protected byte MMGSN3;
protected byte MMGSPR1;
protected boolean MMGSPR2;
protected byte MMGSRES;
protected byte MMGSSTA;
protected byte MMGSTP;
protected byte MMGSWIL;
protected byte MMLONA;
protected byte MMLORE;
protected byte MMLOSC;
protected double MMLOTI;
protected byte MMLSNA;
protected byte MMLSRE;
protected byte MMLSSC;
protected double MMLSTI;
protected byte MMRECRC;
protected double MMRRFTI;
protected byte MMRRNA;
protected byte MMRROC;
protected byte MMRRRE;
protected byte MMRRSC;
protected double MMRRTTI;
protected byte MMSSNA;
protected byte MMSSRE;
protected byte MMSSSC;
protected double MMSSTI;
protected byte MMSTNA;
protected byte MMSTRE;
protected byte MMSTSC;
protected double MMSTTI;
protected byte NATTBP1;
protected byte NATTBP2;
protected byte NLSATLF;
protected byte NNCLM;
protected byte NNCORRE;
protected byte NNMISSE;
protected byte NNROW;
protected byte NOATTLF;
protected byte NOBSM1;
protected byte NOBSM2;
protected byte NOHTBC1;
protected byte NOHTBC2;
protected byte NOHTBC3;
protected boolean NOHTBC4;
protected byte NOREAD;
protected byte NOWTBC1;
protected byte NOWTBC2;
protected boolean NOWTBC3;
protected boolean NOWTBC4;
protected short NROWCL;
protected byte ORDCON;
protected boolean OUTNSC;
protected byte OUTSC;
protected boolean PAINHH1;
protected byte PC_P_F;
protected double PC_P_I;
protected short PC_P_O;
protected short PC_P_T;
protected byte PC_R_F;
protected double PC_R_I;
protected short PC_R_O;
protected short PC_R_T;
protected byte PENNUM;
protected byte PENTYPE_WAVE2;
protected short PF1;
protected short PF2;
protected short PF3;
protected double PRIPENW_04;
protected double PRIPENW_SPA;
protected byte PROBHJ;
protected byte PROBLF1;
protected byte PROBLF2;
protected boolean PROBLF3;
protected byte PROBWJ;
protected byte PSFEEL;
protected byte PSPSYA;
protected byte PSPSYB;
protected byte PSPSYC;
protected byte PSPSYD;
protected byte PSPSYE;
protected short PULSE1;
protected short PULSE2;
protected short PULSE3;
protected double PULVAL;
protected String QVER;
protected byte REFBSC1;
protected byte REFBSC2;
protected byte REFBSC3;
protected byte RELHITE;
protected byte RELWAIT;
protected byte RESNHI;
protected byte RESNWT;
protected byte RESPBPS;
protected byte RESPHTS;
protected byte RESPWH;
protected byte RESPWTS;
protected double RETAINEDDB_04;
protected double RETAINEDDB_SPA;
protected double RETAINEDDC_04;
protected double RETAINEDDC_SPA;
protected byte RFACCOM;
protected byte RFACTIV;
protected byte RFARRAN;
protected byte RFATTIT;
protected byte RFBUILD;
protected byte RFCHARG;
protected byte RFCLOSE;
protected byte RFCOMPA;
protected byte RFCONFI;
protected byte RFDECIS;
protected byte RFDEMAN;
protected byte RFDEVEL;
protected byte RFDIFF;
protected byte RFDISAG;
protected byte RFDISAP;
protected byte RFDONE;
protected byte RFEXPER;
protected byte RFFITIN;
protected byte RFFRIEN;
protected byte RFGOALS;
protected byte RFHORIZ;
protected byte RFIMPRO;
protected byte RFINFLU;
protected byte RFJUDGE;
protected byte RFLEARN;
protected byte RFLONEL;
protected byte RFLOVIN;
protected byte RFMANAG;
protected byte RFMORE;
protected byte RFNIMPR;
protected byte RFONEDA;
protected byte RFOVERW;
protected byte RFPERS;
protected byte RFPLANS;
protected byte RFPOSIT;
protected byte RFSENSE;
protected byte RFSHARE;
protected byte RFSTORY;
protected byte RFTRICK;
protected byte RFTRUST;
protected byte RFVOICE;
protected byte RFWAND;
protected byte RFWARM;
protected short RTIN;
protected byte SAMDIF1;
protected byte SAMDIF2;
protected byte SAMDIF3;
protected boolean SAMDIF4;
protected byte SAMPSTA;
protected byte SAMPTAK;
protected byte SCABNLC;
protected double SCABNP;
protected byte SCABNSC;
protected byte SCABSLC;
protected double SCABSP;
protected byte SCABSSC;
protected byte SCACCA;
protected byte SCACCB;
protected byte SCACCC;
protected byte SCACCD;
protected byte SCACCE;
protected byte SCACCF;
protected byte SCACCG;
protected byte SCACCH;
protected byte SCACCI;
protected byte SCACCJ;
protected byte SCACTA;
protected byte SCACTB;
protected byte SCACTC;
protected byte SCACTD;
protected byte SCAKO;
protected byte SCAL7A;
protected byte SCAL7B;
protected byte SCAPOPG;
protected byte SCASHER;
protected byte SCASPIR;
protected byte SCAWIN;
protected byte SCDCA;
protected byte SCDCC;
protected byte SCDCD;
protected byte SCDCE;
protected byte SCDCG;
protected byte SCDRI;
protected byte SCDRI01;
protected byte SCDRI02;
protected byte SCDRI03;
protected byte SCDRI04;
protected byte SCDRI05;
protected byte SCDRI06;
protected byte SCEMPL;
protected byte SCEXPA;
protected byte SCEXPB;
protected byte SCEXPC;
protected byte SCEXPD;
protected byte SCEXPE;
protected byte SCEXPF;
protected byte SCEXPG;
protected byte SCEXPH;
protected byte SCEXPI;
protected byte SCEXPJ;
protected byte SCEXPK;
protected byte SCEXPL;
protected byte SCFAMH;
protected byte SCFAMM;
protected byte SCFEELA;
protected byte SCFEELB;
protected byte SCFEELC;
protected byte SCFEELD;
protected byte SCFRDM;
protected byte SCLADDC;
protected byte SCLIFEA;
protected byte SCLIFEB;
protected byte SCLIFEC;
protected byte SCLIFED;
protected byte SCLIFEE;
protected byte SCMOREA;
protected byte SCMOREB;
protected byte SCMOREC;
protected byte SCMORED;
protected byte SCOLD;
protected byte SCORG01;
protected byte SCORG02;
protected byte SCORG03;
protected byte SCORG04;
protected byte SCORG05;
protected byte SCORG06;
protected byte SCORG07;
protected byte SCORG08;
protected byte SCORG09;
protected byte SCPONEG;
protected byte SCPT02;
protected byte SCPT03;
protected byte SCPT04;
protected byte SCPT05;
protected byte SCPT06;
protected byte SCPT07;
protected byte SCPT08;
protected byte SCPT09;
protected byte SCPTR;
protected byte SCPTRA;
protected byte SCPTRB;
protected byte SCPTRC;
protected byte SCPTRD;
protected byte SCPTRE;
protected byte SCPTRF;
protected byte SCPTRG;
protected short SCRTAGE;
protected byte SCTOBE;
protected double SCW2WGT;
protected byte SCWORKA;
protected byte SCWORKB;
protected byte SCWORKC;
protected byte SCWORKD;
protected byte SCWORKE;
protected byte SCWORKF;
protected byte SCWORKG;
protected byte SCWORKH;
protected byte SCWORKI;
protected byte SCWORKJ;
protected byte SCWORKK;
protected byte SCWORKL;
protected double SITHGT;
protected byte SITHTRS;
protected byte SPCARA;
protected byte SPTRAB1;
protected byte SPTRAB2;
protected byte SPTRAB3;
protected byte SPTRAB4;
protected byte SPTRAB5;
protected byte SPTRAB6;
protected byte SPTRAB7;
protected byte SPTRM01;
protected byte SPTRM02;
protected byte SPTRM03;
protected byte SPTRM04;
protected byte SPTRM05;
protected byte SPTRM06;
protected boolean SPTRM07;
protected double STPENW_04;
protected double STPENW_SPA;
protected short SYS1;
protected short SYS2;
protected short SYS3;
protected double SYSVAL;
protected byte TECHNI1;
protected byte TECHNI2;
protected byte TECHNI3;
protected double TOTPENW_04;
protected double TOTPENW_SPA;
protected byte TOTPSC;
protected double TRIG;
protected byte VISMON;
protected short VISYEAR;
protected short W1HHOUT;
protected short W1INDOUT;
protected short W2HHOUT;
protected byte W2INDOUT;
protected byte W2NSSEC3;
protected byte W2NSSEC5;
protected byte W2NSSEC8;
protected boolean W2SEC;
protected boolean W2SIC;
protected byte W2SIC92;
protected byte W2SIC92MIS;
protected boolean W2SOC;
protected byte W2SOC2000;
protected byte W2SOC2000MIS;
protected double W2WGT;
protected double W2WTBLD;
protected double W2WTNUR;
protected double WAIST1;
protected double WAIST2;
protected double WAIST3;
protected double WEIGHT;
protected byte WHINTRO;
protected byte WHOKB;
protected byte WHPNAB1;
protected byte WHPNAB2;
protected boolean WHPNAB3;
protected double WHVAL;
protected double WIDPEN_04;
protected double WIDPEN_SPA;
protected byte WJREL;
protected int WP1Q;
protected int WP1SQ;
protected int WP2Q;
protected int WP2SQ;
protected int WP3Q;
protected int WP3SQ;
protected int WPAC2;
protected short WPAC3;
protected int WPAC4;
protected boolean WPAC5;
protected short WPACAT;
protected boolean WPACAT2;
protected boolean WPACAT3;
protected boolean WPACAT4;
protected short WPACAT5;
protected boolean WPACAT6;
protected byte WPACHG;
protected byte WPACOA2;
protected byte WPACOA3;
protected byte WPACOA4;
protected byte WPACOA5;
protected boolean WPACOA6;
protected short WPACOB2;
protected short WPACOB3;
protected short WPACOB4;
protected short WPACOB5;
protected boolean WPACOB6;
protected byte WPACOC2;
protected boolean WPACOC3;
protected byte WPACOC4;
protected boolean WPACOC5;
protected boolean WPACOC6;
protected byte WPACON2;
protected byte WPACON3;
protected byte WPACON4;
protected byte WPACON5;
protected boolean WPACON6;
protected byte WPACT1;
protected byte WPACT2;
protected byte WPACT3;
protected byte WPACT4;
protected byte WPACT5;
protected boolean WPACT6;
protected byte WPADY2;
protected boolean WPADY3;
protected boolean WPADY4;
protected boolean WPADY5;
protected boolean WPADY6;
protected short WPAECP;
protected boolean WPAECP2;
protected boolean WPAECP3;
protected boolean WPAECP4;
protected boolean WPAECP5;
protected byte WPAM2AE;
protected int WPAM2AL;
protected byte WPAM2AR;
protected int WPAM2AU;
protected byte WPAM2TE;
protected int WPAM2TL;
protected byte WPAM2TR;
protected int WPAM2TU;
protected byte WPAM3AE;
protected int WPAM3AL;
protected byte WPAM3AR;
protected int WPAM3AU;
protected boolean WPAM3TE;
protected short WPAM3TL;
protected boolean WPAM3TR;
protected int WPAM3TU;
protected byte WPAM4AE;
protected int WPAM4AL;
protected byte WPAM4AR;
protected int WPAM4AU;
protected byte WPAM4TE;
protected short WPAM4TL;
protected byte WPAM4TR;
protected short WPAM4TU;
protected byte WPAM5AE;
protected short WPAM5AL;
protected byte WPAM5AR;
protected int WPAM5AU;
protected boolean WPAM5TE;
protected boolean WPAM5TL;
protected boolean WPAM5TR;
protected boolean WPAM5TU;
protected byte WPAMAE;
protected int WPAMAL;
protected byte WPAMAR;
protected int WPAMAU;
protected short WPAMEC2;
protected short WPAMEC3;
protected short WPAMEC4;
protected boolean WPAMEC5;
protected int WPAMOU;
protected int WPAMOU2;
protected int WPAMOU3;
protected int WPAMOU4;
protected int WPAMOU5;
protected byte WPAMTE;
protected int WPAMTL;
protected byte WPAMTR;
protected int WPAMTU;
protected byte WPANYC;
protected byte WPANYC2;
protected boolean WPANYC3;
protected byte WPANYC4;
protected byte WPANYC5;
protected boolean WPANYC6;
protected byte WPANYP;
protected byte WPAOTFE;
protected short WPAOTFL;
protected byte WPAOTFR;
protected short WPAOTFU;
protected byte WPAOTME;
protected short WPAOTML;
protected byte WPAOTMR;
protected short WPAOTMU;
protected byte WPAOTOE;
protected short WPAOTOL;
protected byte WPAOTOR;
protected short WPAOTOU;
protected byte WPAOTWE;
protected short WPAOTWL;
protected byte WPAOTWR;
protected short WPAOTWU;
protected byte WPAOTYE;
protected int WPAOTYL;
protected byte WPAOTYR;
protected int WPAOTYU;
protected int WPAPF2;
protected byte WPAPF2E;
protected int WPAPF2L;
protected byte WPAPF2R;
protected int WPAPF2U;
protected int WPAPF3;
protected byte WPAPF3E;
protected int WPAPF3L;
protected byte WPAPF3R;
protected int WPAPF3U;
protected int WPAPF4;
protected byte WPAPF4E;
protected int WPAPF4L;
protected byte WPAPF4R;
protected int WPAPF4U;
protected int WPAPF5;
protected byte WPAPF5E;
protected int WPAPF5L;
protected byte WPAPF5R;
protected int WPAPF5U;
protected int WPAPF6;
protected byte WPAPF6E;
protected short WPAPF6L;
protected byte WPAPF6R;
protected int WPAPF6U;
protected byte WPAPFE;
protected double WPAPFL;
protected byte WPAPFR;
protected double WPAPFU;
protected byte WPASA2E;
protected short WPASA2L;
protected byte WPASA2R;
protected short WPASA2U;
protected byte WPASA3E;
protected short WPASA3L;
protected byte WPASA3R;
protected short WPASA3U;
protected byte WPASA4E;
protected short WPASA4L;
protected byte WPASA4R;
protected int WPASA4U;
protected byte WPASA5E;
protected short WPASA5L;
protected byte WPASA5R;
protected short WPASA5U;
protected boolean WPASA6E;
protected boolean WPASA6L;
protected boolean WPASA6R;
protected boolean WPASA6U;
protected short WPASAL2;
protected short WPASAL3;
protected int WPASAL4;
protected int WPASAL5;
protected short WPASAL6;
protected byte WPASALE;
protected double WPASALL;
protected byte WPASALR;
protected double WPASALU;
protected boolean WPASK;
protected boolean WPASK2;
protected byte WPASKD;
protected byte WPASKE;
protected byte WPASKF;
protected short WPAUC;
protected boolean WPAUC2;
protected boolean WPAUC3;
protected short WPAUC4;
protected short WPAUC5;
protected boolean WPAUC6;
protected byte WPAWP;
protected byte WPBCHG1;
protected byte WPBCHG2;
protected byte WPBCHG3;
protected byte WPBCHG4;
protected byte WPBIMAE;
protected short WPBIMAL;
protected byte WPBIMAR;
protected short WPBIMAU;
protected byte WPBIWAE;
protected short WPBIWAL;
protected byte WPBIWAR;
protected short WPBIWAU;
protected byte WPBPS;
protected byte WPBTHA2;
protected byte WPBTHA3;
protected byte WPBTHA4;
protected byte WPBTHA5;
protected byte WPBTHA6;
protected byte WPBTHP2;
protected boolean WPBTHP3;
protected byte WPBTHP4;
protected byte WPBTHP5;
protected boolean WPBTHP6;
protected byte WPBUSVE;
protected int WPBUSVL;
protected byte WPBUSVR;
protected int WPBUSVU;
protected short WPCAMT;
protected short WPCAMT2;
protected short WPCAMT3;
protected short WPCAMT4;
protected short WPCAMT5;
protected int WPCB;
protected int WPCB2;
protected byte WPCB2E;
protected int WPCB2L;
protected boolean WPCB2R;
protected int WPCB2U;
protected int WPCB3;
protected boolean WPCB3E;
protected boolean WPCB3L;
protected boolean WPCB3R;
protected boolean WPCB3U;
protected int WPCB4;
protected byte WPCB4E;
protected int WPCB4L;
protected byte WPCB4R;
protected short WPCB4U;
protected boolean WPCB5;
protected boolean WPCB5E;
protected short WPCB5L;
protected boolean WPCB5R;
protected short WPCB5U;
protected byte WPCBE;
protected int WPCBL;
protected byte WPCBR;
protected int WPCBU;
protected byte WPCEMP2;
protected byte WPCEMP3;
protected byte WPCEMP4;
protected byte WPCEMP5;
protected byte WPCHDM1;
protected byte WPCHDM2;
protected boolean WPCHDM3;
protected byte WPCHG1;
protected byte WPCHG2;
protected byte WPCHG3;
protected byte WPCHG4;
protected byte WPCHGA;
protected byte WPCHGB1;
protected byte WPCHGB2;
protected byte WPCHGB3;
protected byte WPCHGD1;
protected byte WPCHGD2;
protected boolean WPCHGD3;
protected byte WPCHGDN;
protected byte WPCHGL1;
protected byte WPCHGL2;
protected byte WPCHGL3;
protected boolean WPCHGL4;
protected boolean WPCHGL5;
protected byte WPCHGM1;
protected byte WPCHGM2;
protected byte WPCHGM3;
protected byte WPCHGM4;
protected byte WPCHGNO;
protected byte WPCHGO;
protected byte WPCHL11;
protected byte WPCHL12;
protected byte WPCHL13;
protected boolean WPCHL14;
protected boolean WPCHL15;
protected byte WPCJB1;
protected byte WPCJB2;
protected byte WPCJB3;
protected byte WPCJB4;
protected boolean WPCON;
protected boolean WPCON2;
protected boolean WPCON3;
protected boolean WPCON4;
protected boolean WPCON5;
protected byte WPCONS;
protected byte WPCONS2;
protected boolean WPCONS3;
protected byte WPCONS4;
protected byte WPCONS5;
protected byte WPCONS6;
protected boolean WPCONY2;
protected boolean WPCONY3;
protected short WPCONY4;
protected boolean WPCONY5;
protected boolean WPCONY6;
protected byte WPCOS;
protected byte WPCOS2;
protected byte WPCOS3;
protected byte WPCOS4;
protected byte WPCOS5;
protected byte WPCOS6;
protected byte WPCPER;
protected byte WPCPER2;
protected byte WPCPER3;
protected byte WPCPER4;
protected byte WPCPER5;
protected byte WPCPS;
protected byte WPCPS2;
protected byte WPCPSC;
protected byte WPCPSC2;
protected byte WPCRAGE;
protected byte WPCRET;
protected byte WPCRETL;
protected int WPCUV;
protected int WPCUV2;
protected byte WPCUV2E;
protected int WPCUV2L;
protected byte WPCUV2R;
protected int WPCUV2U;
protected int WPCUV3;
protected byte WPCUV3E;
protected int WPCUV3L;
protected byte WPCUV3R;
protected int WPCUV3U;
protected int WPCUV4;
protected byte WPCUV4E;
protected int WPCUV4L;
protected byte WPCUV4R;
protected int WPCUV4U;
protected int WPCUV5;
protected byte WPCUV5E;
protected short WPCUV5L;
protected byte WPCUV5R;
protected int WPCUV5U;
protected byte WPCUVE;
protected int WPCUVL;
protected byte WPCUVR;
protected int WPCUVU;
protected short WPDE2;
protected short WPDE3;
protected boolean WPDES2C;
protected boolean WPDES4C;
protected boolean WPDES5C;
protected byte WPDESC;
protected byte WPDESPC;
protected byte WPDPSN;
protected byte WPDPSN2;
protected byte WPDPSN3;
protected short WPDS2;
protected short WPDS3;
protected byte WPDSNB;
protected byte WPDSNB2;
protected byte WPDSNB3;
protected byte WPDSNC;
protected byte WPDSNC2;
protected byte WPDSNC3;
protected byte WPDSND;
protected byte WPDSND1;
protected byte WPDSND2;
protected byte WPDSND3;
protected byte WPDSP;
protected byte WPDSP2;
protected byte WPDSP3;
protected byte WPDSP4;
protected byte WPDSP5;
protected byte WPDSP6;
protected byte WPEC;
protected byte WPECA;
protected int WPECNA;
protected byte WPECNA2;
protected byte WPECNA3;
protected short WPECNA4;
protected boolean WPECNA5;
protected boolean WPECNA6;
protected byte WPECON;
protected byte WPECON2;
protected byte WPECON3;
protected byte WPECON4;
protected byte WPECON5;
protected byte WPECON6;
protected byte WPECPP;
protected byte WPECPP2;
protected byte WPECPP3;
protected boolean WPECPP4;
protected boolean WPECPP5;
protected byte WPEFS;
protected byte WPEFS2;
protected byte WPEFS3;
protected byte WPEFS4;
protected byte WPEFS5;
protected boolean WPEFS6;
protected boolean WPEPER2;
protected boolean WPEPER3;
protected byte WPEPER4;
protected boolean WPEPER5;
protected boolean WPEPER6;
protected byte WPERA2;
protected byte WPERA3;
protected byte WPERA4;
protected byte WPERA5;
protected byte WPERA6;
protected byte WPERC2;
protected byte WPERC3;
protected byte WPERC4;
protected byte WPERC5;
protected byte WPERC6;
protected byte WPERCD;
protected byte WPERCD1;
protected byte WPERCD2;
protected byte WPERCD3;
protected byte WPERET2;
protected byte WPESJME;
protected short WPESJML;
protected byte WPESJMR;
protected short WPESJMU;
protected byte WPEXN;
protected byte WPEXR;
protected byte WPEXW;
protected byte WPFINF;
protected byte WPFINF2;
protected byte WPFINF3;
protected byte WPFINF4;
protected byte WPFINF5;
protected byte WPFINF6;
protected byte WPFRAS2;
protected byte WPFRAS3;
protected byte WPFRAS4;
protected boolean WPFRAS5;
protected boolean WPFRAS6;
protected byte WPFRUC;
protected boolean WPFRUC2;
protected boolean WPFRUC3;
protected byte WPFRUC4;
protected byte WPFRUC5;
protected boolean WPFRUC6;
protected byte WPFSAP2;
protected byte WPFSAP3;
protected byte WPFSAP4;
protected byte WPFSAP5;
protected byte WPFSAP6;
protected byte WPFSAPC;
protected byte WPFSAV2;
protected boolean WPFSAV3;
protected byte WPFSAV4;
protected byte WPFSAV5;
protected boolean WPFSAV6;
protected byte WPFSC;
protected boolean WPFSC2;
protected boolean WPFSC3;
protected boolean WPFSC4;
protected boolean WPFSC5;
protected byte WPFSCO2;
protected byte WPFSCO3;
protected byte WPFSCO4;
protected byte WPFSCO5;
protected byte WPFSCP2;
protected byte WPFSCP3;
protected byte WPFSCP4;
protected boolean WPFSCP5;
protected byte WPFSEC;
protected boolean WPFSEC2;
protected boolean WPFSEC3;
protected boolean WPFSEC4;
protected boolean WPFSEC5;
protected boolean WPFSP4C;
protected boolean WPFSP5C;
protected byte WPHCON;
protected byte WPHCON2;
protected byte WPHCON3;
protected byte WPHCON4;
protected byte WPHCON5;
protected byte WPHLWZ;
protected boolean WPID2E;
protected boolean WPID2L;
protected boolean WPID2R;
protected boolean WPID2U;
protected boolean WPID3E;
protected boolean WPID3L;
protected boolean WPID3R;
protected boolean WPID3U;
protected byte WPIDE;
protected boolean WPIDL;
protected byte WPIDR;
protected boolean WPIDR2E;
protected boolean WPIDR2L;
protected boolean WPIDR2R;
protected boolean WPIDR2U;
protected boolean WPIDR3E;
protected boolean WPIDR3L;
protected boolean WPIDR3R;
protected boolean WPIDR3U;
protected byte WPIDRE;
protected short WPIDRL;
protected byte WPIDRR;
protected int WPIDRU;
protected short WPIDU;
protected byte WPIFS01;
protected byte WPIFS02;
protected byte WPIFS03;
protected byte WPIFS1;
protected byte WPIFS10;
protected byte WPIFS11;
protected byte WPIFS12;
protected byte WPIFS19;
protected byte WPIFS2;
protected byte WPIFS20;
protected byte WPIFS28;
protected byte WPIFS29;
protected byte WPIFS3;
protected boolean WPIFS30;
protected byte WPIFS37;
protected byte WPIFS38;
protected boolean WPIFS39;
protected byte WPIFS46;
protected boolean WPIFS47;
protected byte WPIN14E;
protected short WPIN14L;
protected byte WPIN14R;
protected int WPIN14U;
protected boolean WPIN15E;
protected boolean WPIN15L;
protected boolean WPIN15R;
protected boolean WPIN15U;
protected boolean WPIN16E;
protected boolean WPIN16L;
protected boolean WPIN16R;
protected boolean WPIN16U;
protected boolean WPINC4E;
protected boolean WPINC4L;
protected boolean WPINC4R;
protected boolean WPINC4U;
protected boolean WPINC5E;
protected boolean WPINC5L;
protected boolean WPINC5R;
protected boolean WPINC5U;
protected double WPINCD;
protected short WPINCD2;
protected short WPINCD3;
protected int WPIND;
protected short WPIND14;
protected short WPIND15;
protected boolean WPIND16;
protected short WPIND2;
protected boolean WPIND3;
protected boolean WPIND4;
protected short WPIND5;
protected byte WPINF17;
protected byte WPINF18;
protected byte WPINF19;
protected byte WPINF2;
protected byte WPINF3;
protected byte WPINF4;
protected byte WPINF5;
protected byte WPINF6;
protected byte WPINF7;
protected byte WPINF8;
protected byte WPINFO;
protected byte WPINTA;
protected byte WPKP;
protected byte WPKP2;
protected byte WPKP2C;
protected byte WPKPC;
protected byte WPKPS;
protected byte WPKPS2;
protected byte WPKPS3;
protected short WPLAC;
protected short WPLAC2;
protected boolean WPLAC3;
protected short WPLAC4;
protected boolean WPLAC5;
protected byte WPLASM;
protected byte WPLASM2;
protected byte WPLASM3;
protected byte WPLASM4;
protected byte WPLASM5;
protected byte WPLASP;
protected byte WPLASP2;
protected byte WPLASP3;
protected byte WPLASP4;
protected byte WPLASP5;
protected short WPLASY;
protected short WPLASY2;
protected short WPLASY3;
protected short WPLASY4;
protected short WPLASY5;
protected byte WPLCOM2;
protected byte WPLCOM3;
protected byte WPLCOM4;
protected boolean WPLCOM5;
protected short WPLCOY2;
protected short WPLCOY3;
protected short WPLCOY4;
protected short WPLCOY5;
protected byte WPLFT13;
protected byte WPLFTM1;
protected byte WPLFTM2;
protected boolean WPLFTM3;
protected byte WPLFTM4;
protected byte WPLFTM7;
protected byte WPLFTM8;
protected boolean WPLFTM9;
protected byte WPLFTP1;
protected byte WPLFTP2;
protected boolean WPLFTP3;
protected byte WPLFTP5;
protected byte WPLFTP6;
protected boolean WPLFTP7;
protected byte WPLFTP9;
protected byte WPLIMWK;
protected byte WPLJO12;
protected byte WPLJO13;
protected byte WPLJO14;
protected byte WPLJO15;
protected boolean WPLJO16;
protected byte WPLJOB1;
protected byte WPLJOB2;
protected byte WPLJOB3;
protected byte WPLJOB4;
protected boolean WPLJOB5;
protected byte WPLJOBM;
protected byte WPLKCH1;
protected byte WPLKCH2;
protected byte WPLKCH3;
protected byte WPLKCH4;
protected byte WPLKCH5;
protected boolean WPLKCH6;
protected byte WPLKCM1;
protected byte WPLKCM2;
protected byte WPLKCM3;
protected byte WPLKCM4;
protected byte WPLKCM5;
protected boolean WPLKCM6;
protected byte WPLLJM;
protected short WPLLJY;
protected byte WPLLSM;
protected short WPLLSY;
protected byte WPLM14E;
protected int WPLM14L;
protected byte WPLM14R;
protected int WPLM14U;
protected byte WPLM15E;
protected short WPLM15L;
protected byte WPLM15R;
protected short WPLM15U;
protected boolean WPLM16E;
protected boolean WPLM16L;
protected boolean WPLM16R;
protected short WPLM16U;
protected int WPLMA;
protected int WPLMA14;
protected int WPLMA15;
protected short WPLMA16;
protected int WPLMA2;
protected short WPLMA3;
protected short WPLMA4;
protected boolean WPLMA5;
protected byte WPLMP2E;
protected byte WPLMP2L;
protected byte WPLMP2R;
protected short WPLMP2U;
protected byte WPLMP3E;
protected byte WPLMP3L;
protected byte WPLMP3R;
protected byte WPLMP3U;
protected boolean WPLMP4E;
protected boolean WPLMP4L;
protected boolean WPLMP4R;
protected boolean WPLMP4U;
protected boolean WPLMP5E;
protected boolean WPLMP5L;
protected boolean WPLMP5R;
protected boolean WPLMP5U;
protected byte WPLMPAE;
protected short WPLMPAL;
protected byte WPLMPAR;
protected short WPLMPAU;
protected byte WPLMPE;
protected int WPLMPL;
protected byte WPLMPR;
protected int WPLMPU;
protected byte WPLMS;
protected byte WPLMS14;
protected byte WPLMS15;
protected byte WPLMS16;
protected byte WPLMS2;
protected byte WPLMS3;
protected byte WPLMS4;
protected byte WPLMS5;
protected byte WPLP2AE;
protected int WPLP2AL;
protected byte WPLP2AR;
protected int WPLP2AU;
protected boolean WPLP2TE;
protected boolean WPLP2TL;
protected boolean WPLP2TR;
protected boolean WPLP2TU;
protected boolean WPLP3AE;
protected boolean WPLP3AL;
protected boolean WPLP3AR;
protected boolean WPLP3AU;
protected boolean WPLP3TE;
protected boolean WPLP3TL;
protected boolean WPLP3TR;
protected boolean WPLP3TU;
protected byte WPLP4AE;
protected short WPLP4AL;
protected byte WPLP4AR;
protected int WPLP4AU;
protected boolean WPLP4TE;
protected boolean WPLP4TL;
protected boolean WPLP4TR;
protected boolean WPLP4TU;
protected boolean WPLP5AE;
protected short WPLP5AL;
protected boolean WPLP5AR;
protected int WPLP5AU;
protected boolean WPLP5TE;
protected boolean WPLP5TL;
protected boolean WPLP5TR;
protected boolean WPLP5TU;
protected int WPLPA;
protected int WPLPA2;
protected short WPLPA3;
protected short WPLPA4;
protected boolean WPLPA5;
protected byte WPLPAE;
protected int WPLPAL;
protected byte WPLPAR;
protected int WPLPAU;
protected byte WPLPE;
protected byte WPLPE2;
protected byte WPLPE3;
protected byte WPLPE4;
protected boolean WPLPE5;
protected byte WPLPEM;
protected byte WPLPEM2;
protected byte WPLPEM3;
protected byte WPLPEM4;
protected byte WPLPEM5;
protected short WPLPEY;
protected short WPLPEY2;
protected short WPLPEY3;
protected short WPLPEY4;
protected short WPLPEY5;
protected byte WPLPSM;
protected byte WPLPSM2;
protected byte WPLPSM3;
protected byte WPLPSM4;
protected byte WPLPSM5;
protected short WPLPSY;
protected short WPLPSY2;
protected short WPLPSY3;
protected short WPLPSY4;
protected short WPLPSY5;
protected boolean WPLPTE;
protected short WPLPTL;
protected boolean WPLPTR;
protected short WPLPTU;
protected byte WPLRCM;
protected boolean WPLRCM2;
protected boolean WPLRCM3;
protected byte WPLRCM4;
protected boolean WPLRCM5;
protected short WPLRCY;
protected short WPLRCY2;
protected boolean WPLRCY3;
protected short WPLRCY4;
protected short WPLRCY5;
protected byte WPLU2E;
protected int WPLU2L;
protected byte WPLU2R;
protected int WPLU2U;
protected boolean WPLU3E;
protected short WPLU3L;
protected boolean WPLU3R;
protected short WPLU3U;
protected byte WPLU4E;
protected int WPLU4L;
protected byte WPLU4R;
protected int WPLU4U;
protected byte WPLU5E;
protected int WPLU5L;
protected byte WPLU5R;
protected int WPLU5U;
protected boolean WPLU6E;
protected short WPLU6L;
protected boolean WPLU6R;
protected short WPLU6U;
protected byte WPLUE;
protected int WPLUL;
protected byte WPLUM2E;
protected int WPLUM2L;
protected byte WPLUM2R;
protected int WPLUM2U;
protected byte WPLUM3E;
protected short WPLUM3L;
protected byte WPLUM3R;
protected short WPLUM3U;
protected byte WPLUME;
protected int WPLUML;
protected int WPLUMP2;
protected int WPLUMP3;
protected int WPLUMP4;
protected int WPLUMP5;
protected short WPLUMP6;
protected byte WPLUMPE;
protected double WPLUMPL;
protected byte WPLUMPR;
protected double WPLUMPU;
protected byte WPLUMR;
protected int WPLUMU;
protected double WPLUPA;
protected int WPLUPA2;
protected int WPLUPA3;
protected byte WPLUPS;
protected byte WPLUPS2;
protected byte WPLUPS3;
protected byte WPLUR;
protected int WPLUU;
protected byte WPMANPP;
protected byte WPMANSP;
protected byte WPMC2;
protected byte WPMC3;
protected byte WPMC4;
protected byte WPMC5;
protected byte WPMC6;
protected short WPMCA2;
protected short WPMCA3;
protected short WPMCA4;
protected byte WPMCA5;
protected boolean WPMCA6;
protected byte WPMCAF2;
protected byte WPMCAF3;
protected byte WPMCAF4;
protected byte WPMCAF5;
protected boolean WPMCAF6;
protected byte WPMCON2;
protected byte WPMCON3;
protected byte WPMCON4;
protected byte WPMCON5;
protected byte WPMCRTP;
protected byte WPMCRTS;
protected byte WPMEC2;
protected byte WPMEC3;
protected byte WPMEC4;
protected byte WPMEC5;
protected byte WPMFQ;
protected byte WPMFRC;
protected byte WPMFRC2;
protected byte WPMFRC3;
protected byte WPMFRC4;
protected byte WPMFRC5;
protected byte WPMFRC6;
protected byte WPMHIE;
protected short WPMHIL;
protected byte WPMHIR;
protected short WPMHIU;
protected int WPMLAS;
protected int WPMLAS2;
protected short WPMLAS3;
protected short WPMLAS4;
protected short WPMLAS5;
protected byte WPMMIN2;
protected byte WPMMIN3;
protected byte WPMMIN4;
protected byte WPMMIN5;
protected boolean WPMMIN6;
protected int WPMPAH;
protected int WPMPAL;
protected short WPMRC;
protected short WPMRC2;
protected short WPMRC3;
protected byte WPMRC4;
protected boolean WPMRC5;
protected byte WPMRCP;
protected byte WPMRCP2;
protected byte WPMRCP3;
protected boolean WPMRCP4;
protected boolean WPMRCP5;
protected int WPMSAH;
protected int WPMSAL;
protected byte WPMSC;
protected byte WPMSC2;
protected byte WPMSC3;
protected byte WPMSFQ;
protected byte WPMSQ;
protected byte WPMSSQ;
protected byte WPMSTQ;
protected byte WPMTQ;
protected byte WPMUC;
protected boolean WPMUC2;
protected boolean WPMUC3;
protected byte WPMUC4;
protected byte WPMUC5;
protected boolean WPMUC6;
protected byte WPMYNJ;
protected byte WPNCH17;
protected boolean WPNCH18;
protected byte WPNCHB1;
protected boolean WPNCHB2;
protected byte WPNCHG1;
protected byte WPNCHG2;
protected boolean WPNCHG3;
protected byte WPNCHGA;
protected byte WPNCHGN;
protected byte WPNCHGO;
protected byte WPNCHM1;
protected byte WPNCHM2;
protected boolean WPNCHM3;
protected byte WPNIFP;
protected byte WPNIFP2;
protected byte WPNIFP3;
protected byte WPNIFP4;
protected boolean WPNIFP5;
protected byte WPNIRR2;
protected byte WPNIRR3;
protected byte WPNIRR4;
protected boolean WPNIRR5;
protected byte WPNOL12;
protected byte WPNOL13;
protected byte WPNOL14;
protected byte WPNOL15;
protected byte WPNOL16;
protected byte WPNOLK1;
protected byte WPNOLK2;
protected byte WPNOLK3;
protected byte WPNOLK4;
protected byte WPNOLK5;
protected byte WPNOSC;
protected byte WPNRA2;
protected byte WPNRA3;
protected byte WPNRA4;
protected byte WPNRA5;
protected byte WPNRA6;
protected boolean WPNUM;
protected boolean WPNUM11;
protected boolean WPNUM12;
protected boolean WPNUM14;
protected boolean WPNUM15;
protected boolean WPNUM16;
protected boolean WPNUM17;
protected boolean WPNUM18;
protected boolean WPNUM19;
protected boolean WPNUM2;
protected boolean WPNUM20;
protected boolean WPNUM21;
protected boolean WPNUM22;
protected boolean WPNUM23;
protected boolean WPNUM24;
protected boolean WPNUM25;
protected boolean WPNUM26;
protected boolean WPNUM27;
protected boolean WPNUM28;
protected boolean WPNUM29;
protected boolean WPNUM3;
protected boolean WPNUM30;
protected boolean WPNUM31;
protected boolean WPNUM4;
protected boolean WPNUM5;
protected boolean WPNUM6;
protected boolean WPNUM7;
protected boolean WPNUM8;
protected boolean WPNUM9;
protected byte WPOARS;
protected byte WPOARS2;
protected byte WPOCHG;
protected byte WPOJ;
protected byte WPOJ2;
protected byte WPOJ3;
protected byte WPOJ4;
protected byte WPOJ5;
protected byte WPOWB;
protected byte WPOWB2;
protected byte WPOWB3;
protected byte WPOWB4;
protected byte WPOWB5;
protected byte WPPAY17;
protected byte WPPAY18;
protected byte WPPAY19;
protected byte WPPAY2;
protected byte WPPAY3;
protected byte WPPAY4;
protected byte WPPAY5;
protected byte WPPAY6;
protected byte WPPAY7;
protected byte WPPAY8;
protected byte WPPCON2;
protected byte WPPCON3;
protected byte WPPCON4;
protected byte WPPCON5;
protected byte WPPDES;
protected byte WPPDES2;
protected byte WPPDOC;
protected byte WPPE2AE;
protected short WPPE2AL;
protected byte WPPE2AR;
protected int WPPE2AU;
protected boolean WPPE2TE;
protected boolean WPPE2TL;
protected boolean WPPE2TR;
protected short WPPE2TU;
protected byte WPPE3AE;
protected short WPPE3AL;
protected byte WPPE3AR;
protected short WPPE3AU;
protected boolean WPPE3TE;
protected boolean WPPE3TL;
protected boolean WPPE3TR;
protected boolean WPPE3TU;
protected byte WPPE4AE;
protected int WPPE4AL;
protected byte WPPE4AR;
protected int WPPE4AU;
protected boolean WPPE4TE;
protected int WPPE4TL;
protected boolean WPPE4TR;
protected boolean WPPE4TU;
protected byte WPPE5AE;
protected int WPPE5AL;
protected byte WPPE5AR;
protected int WPPE5AU;
protected boolean WPPE5TE;
protected boolean WPPE5TL;
protected boolean WPPE5TR;
protected boolean WPPE5TU;
protected byte WPPE6AE;
protected int WPPE6AL;
protected byte WPPE6AR;
protected short WPPE6AU;
protected boolean WPPE6TE;
protected boolean WPPE6TL;
protected boolean WPPE6TR;
protected boolean WPPE6TU;
protected byte WPPEAE;
protected int WPPEAL;
protected byte WPPEAR;
protected int WPPEAU;
protected int WPPENB2;
protected int WPPENB3;
protected int WPPENB4;
protected int WPPENB5;
protected short WPPENB6;
protected byte WPPEPR;
protected byte WPPER;
protected boolean WPPER2;
protected boolean WPPER3;
protected byte WPPER4;
protected boolean WPPER5;
protected boolean WPPER6;
protected byte WPPERC2;
protected byte WPPERC3;
protected byte WPPERC4;
protected byte WPPERC5;
protected boolean WPPERC6;
protected byte WPPETE;
protected int WPPETL;
protected byte WPPETR;
protected int WPPETU;
protected byte WPPEXP;
protected byte WPPEXP2;
protected byte WPPEXP3;
protected byte WPPEXP4;
protected byte WPPEXP5;
protected boolean WPPF2E;
protected boolean WPPF2L;
protected boolean WPPF2R;
protected boolean WPPF2U;
protected byte WPPFE;
protected int WPPFL;
protected byte WPPFR;
protected int WPPFU;
protected boolean WPPFV3E;
protected boolean WPPFV3L;
protected boolean WPPFV3R;
protected boolean WPPFV3U;
protected byte WPPFV4E;
protected short WPPFV4L;
protected byte WPPFV4R;
protected short WPPFV4U;
protected byte WPPFV5E;
protected short WPPFV5L;
protected byte WPPFV5R;
protected int WPPFV5U;
protected boolean WPPFV6E;
protected boolean WPPFV6L;
protected boolean WPPFV6R;
protected boolean WPPFV6U;
protected short WPPFVA2;
protected boolean WPPFVA3;
protected short WPPFVA4;
protected byte WPPFVA5;
protected boolean WPPFVA6;
protected byte WPPLON;
protected byte WPPLON2;
protected byte WPPLON3;
protected byte WPPLON4;
protected byte WPPLON5;
protected byte WPPLP2;
protected byte WPPLP3;
protected byte WPPLP4;
protected byte WPPLP5;
protected byte WPPLP6;
protected byte WPPLPH2;
protected byte WPPLPH3;
protected byte WPPLPH4;
protected boolean WPPLPH5;
protected boolean WPPLPH6;
protected int WPPRIVA;
protected byte WPPRIVP;
protected byte WPPROFE;
protected int WPPROFL;
protected byte WPPROFR;
protected int WPPROFU;
protected byte WPPRPE;
protected byte WPPS;
protected byte WPPSAL2;
protected boolean WPPSAL3;
protected byte WPPSAL4;
protected byte WPPSAL5;
protected boolean WPPSAL6;
protected byte WPPSM1;
protected byte WPPSM2;
protected byte WPPSMM1;
protected byte WPPSMM2;
protected boolean WPPSMM3;
protected byte WPPSTR;
protected byte WPPSTR2;
protected byte WPPSTR3;
protected byte WPPTOP2;
protected byte WPPTOP3;
protected byte WPPTOP4;
protected byte WPPTOP5;
protected byte WPPTOP6;
protected byte WPPTP2;
protected byte WPPTP3;
protected byte WPPTP4;
protected byte WPPTP5;
protected boolean WPPTP6;
protected byte WPPW;
protected byte WPPWP;
protected byte WPPWP14;
protected boolean WPPWP15;
protected boolean WPPWP16;
protected byte WPPWP2;
protected byte WPPWP24;
protected byte WPPWP25;
protected boolean WPPWP26;
protected byte WPPWP3;
protected byte WPPWP4;
protected byte WPPWP5;
protected boolean WPPWP6;
protected int WPPWR;
protected short WPPWR14;
protected short WPPWR15;
protected short WPPWR16;
protected short WPPWR2;
protected short WPPWR24;
protected byte WPPWR25;
protected byte WPPWR26;
protected short WPPWR3;
protected short WPPWR4;
protected short WPPWR5;
protected byte WPPWR6;
protected int WPPYR17;
protected short WPPYR18;
protected short WPPYR19;
protected int WPPYR2;
protected int WPPYR3;
protected int WPPYR4;
protected short WPPYR5;
protected short WPPYR6;
protected short WPPYR7;
protected byte WPPYR8;
protected byte WPQN;
protected byte WPRCON2;
protected byte WPRCON3;
protected byte WPRCON4;
protected byte WPRCON5;
protected byte WPREA01;
protected byte WPREA02;
protected byte WPREA03;
protected byte WPREA04;
protected byte WPREA05;
protected byte WPREA06;
protected boolean WPREA07;
protected byte WPREAM1;
protected byte WPREAM2;
protected byte WPREAM3;
protected byte WPREAM4;
protected byte WPREAM5;
protected byte WPREAM6;
protected byte WPREC2;
protected byte WPREC3;
protected byte WPRECN;
protected byte WPRECN1;
protected byte WPRECN2;
protected byte WPRECN3;
protected byte WPRECS;
protected byte WPRECS1;
protected byte WPRECS2;
protected byte WPRECS3;
protected byte WPREN;
protected byte WPRGH;
protected byte WPRGH2;
protected byte WPRGH3;
protected byte WPRGHB;
protected byte WPRGHB2;
protected byte WPRGHB3;
protected byte WPRGHX;
protected byte WPRGHX2;
protected byte WPRGHX3;
protected byte WPRGHX4;
protected byte WPRGHX5;
protected byte WPRRE01;
protected byte WPRRE02;
protected byte WPRRE03;
protected byte WPRRE04;
protected boolean WPRRE05;
protected byte WPRREM1;
protected byte WPRREM2;
protected byte WPRREM3;
protected byte WPRREM4;
protected boolean WPRREM5;
protected byte WPRSC1;
protected byte WPRSC13;
protected boolean WPRSC14;
protected byte WPRSC19;
protected byte WPRSC2;
protected boolean WPRSC20;
protected byte WPRSC25;
protected boolean WPRSC3;
protected byte WPRSC7;
protected boolean WPRSC8;
protected byte WPRSC9;
protected byte WPRSM1;
protected byte WPRSM13;
protected boolean WPRSM14;
protected byte WPRSM2;
protected boolean WPRSM3;
protected byte WPRSM37;
protected boolean WPRSM38;
protected byte WPRSM49;
protected byte WPRSM50;
protected boolean WPRSM51;
protected byte WPSJOBM;
protected short WPSJOBY;
protected byte WPSN;
protected byte WPSPS;
protected byte WPSPS2;
protected byte WPSPS3;
protected byte WPSRC;
protected byte WPSRC2;
protected boolean WPSRC3;
protected byte WPSRC4;
protected boolean WPSRC5;
protected byte WPSRUL;
protected byte WPSRUL2;
protected byte WPSRUL3;
protected int WPSTATA;
protected byte WPSTATP;
protected byte WPTAKP;
protected byte WPTAKP2;
protected byte WPTAKP3;
protected byte WPTAWC;
protected byte WPTAX17;
protected byte WPTAX18;
protected byte WPTAX19;
protected byte WPTAX2;
protected byte WPTAX3;
protected byte WPTAX4;
protected byte WPTAX5;
protected byte WPTAX6;
protected byte WPTAX7;
protected byte WPTAX8;
protected byte WPTHPFE;
protected short WPTHPFL;
protected byte WPTHPFR;
protected short WPTHPFU;
protected byte WPTHPME;
protected short WPTHPML;
protected byte WPTHPMR;
protected short WPTHPMU;
protected byte WPTHPOE;
protected short WPTHPOL;
protected byte WPTHPOR;
protected short WPTHPOU;
protected byte WPTHPWE;
protected short WPTHPWL;
protected byte WPTHPWR;
protected short WPTHPWU;
protected byte WPTHPYE;
protected int WPTHPYL;
protected byte WPTHPYR;
protected int WPTHPYU;
protected byte WPTKP;
protected byte WPTKP14;
protected byte WPTKP15;
protected byte WPTKP16;
protected byte WPTKP2;
protected byte WPTKP3;
protected byte WPTKP4;
protected byte WPTKP5;
protected byte WPUPAFE;
protected short WPUPAFL;
protected byte WPUPAFR;
protected short WPUPAFU;
protected byte WPUPAME;
protected short WPUPAML;
protected byte WPUPAMR;
protected short WPUPAMU;
protected int WPUPAOE;
protected short WPUPAOL;
protected byte WPUPAOR;
protected short WPUPAOU;
protected byte WPUPAWE;
protected short WPUPAWL;
protected byte WPUPAWR;
protected short WPUPAWU;
protected byte WPUPAYE;
protected byte WPUPAYL;
protected byte WPUPAYR;
protected short WPUPAYU;
protected byte WPVBUSE;
protected int WPVBUSL;
protected byte WPVBUSR;
protected int WPVBUSU;
protected boolean WPW14FE;
protected boolean WPW14FL;
protected boolean WPW14FR;
protected boolean WPW14FU;
protected byte WPW14ME;
protected byte WPW14ML;
protected byte WPW14MR;
protected short WPW14MU;
protected boolean WPW14OE;
protected boolean WPW14OL;
protected boolean WPW14OR;
protected boolean WPW14OU;
protected boolean WPW14WE;
protected boolean WPW14WL;
protected boolean WPW14WR;
protected boolean WPW14WU;
protected boolean WPW14YE;
protected boolean WPW14YL;
protected boolean WPW14YR;
protected boolean WPW14YU;
protected boolean WPW15FE;
protected boolean WPW15FL;
protected boolean WPW15FR;
protected boolean WPW15FU;
protected boolean WPW15ME;
protected boolean WPW15ML;
protected boolean WPW15MR;
protected boolean WPW15MU;
protected boolean WPW15OE;
protected boolean WPW15OL;
protected boolean WPW15OR;
protected boolean WPW15OU;
protected boolean WPW15WE;
protected boolean WPW15WL;
protected boolean WPW15WR;
protected boolean WPW15WU;
protected boolean WPW15YE;
protected boolean WPW15YL;
protected boolean WPW15YR;
protected boolean WPW15YU;
protected boolean WPW16FE;
protected boolean WPW16FL;
protected boolean WPW16FR;
protected boolean WPW16FU;
protected boolean WPW16ME;
protected boolean WPW16ML;
protected boolean WPW16MR;
protected boolean WPW16MU;
protected boolean WPW16OE;
protected boolean WPW16OL;
protected boolean WPW16OR;
protected boolean WPW16OU;
protected boolean WPW16WE;
protected boolean WPW16WL;
protected boolean WPW16WR;
protected boolean WPW16WU;
protected boolean WPW16YE;
protected boolean WPW16YL;
protected boolean WPW16YR;
protected boolean WPW16YU;
protected boolean WPW24FE;
protected short WPW24FL;
protected boolean WPW24FR;
protected short WPW24FU;
protected byte WPW24ME;
protected short WPW24ML;
protected byte WPW24MR;
protected short WPW24MU;
protected boolean WPW24OE;
protected boolean WPW24OL;
protected boolean WPW24OR;
protected boolean WPW24OU;
protected boolean WPW24WE;
protected boolean WPW24WL;
protected boolean WPW24WR;
protected boolean WPW24WU;
protected boolean WPW24YE;
protected boolean WPW24YL;
protected boolean WPW24YR;
protected boolean WPW24YU;
protected boolean WPW25FE;
protected boolean WPW25FL;
protected boolean WPW25FR;
protected boolean WPW25FU;
protected boolean WPW25ME;
protected boolean WPW25ML;
protected boolean WPW25MR;
protected boolean WPW25MU;
protected boolean WPW25OE;
protected boolean WPW25OL;
protected boolean WPW25OR;
protected boolean WPW25OU;
protected boolean WPW25WE;
protected boolean WPW25WL;
protected boolean WPW25WR;
protected boolean WPW25WU;
protected boolean WPW25YE;
protected boolean WPW25YL;
protected boolean WPW25YR;
protected boolean WPW25YU;
protected boolean WPW26FE;
protected boolean WPW26FL;
protected boolean WPW26FR;
protected boolean WPW26FU;
protected boolean WPW26ME;
protected boolean WPW26ML;
protected boolean WPW26MR;
protected boolean WPW26MU;
protected boolean WPW26OE;
protected boolean WPW26OL;
protected boolean WPW26OR;
protected boolean WPW26OU;
protected boolean WPW26WE;
protected boolean WPW26WL;
protected boolean WPW26WR;
protected boolean WPW26WU;
protected boolean WPW26YE;
protected boolean WPW26YL;
protected boolean WPW26YR;
protected boolean WPW26YU;
protected byte WPWHYJ1;
protected byte WPWHYJ2;
protected byte WPWHYJ3;
protected byte WPWHYJ4;
protected byte WPWHYJ5;
protected byte WPWHYJM;
protected byte WPWHYN1;
protected byte WPWHYN2;
protected byte WPWHYN3;
protected byte WPWHYN4;
protected byte WPWHYN5;
protected boolean WPWHYN6;
protected byte WPWLYYE;
protected int WPWLYYL;
protected byte WPWLYYR;
protected int WPWLYYU;
protected byte WPWPN;
protected byte WPWPS;
protected byte WPWTX;
protected byte WPWTX14;
protected boolean WPWTX15;
protected boolean WPWTX16;
protected byte WPWTX2;
protected byte WPWTX24;
protected byte WPWTX25;
protected boolean WPWTX26;
protected byte WPWTX3;
protected byte WPWTX4;
protected byte WPWTX5;
protected boolean WPWTX6;
protected boolean WPWW2FE;
protected boolean WPWW2FL;
protected boolean WPWW2FR;
protected boolean WPWW2FU;
protected byte WPWW2ME;
protected short WPWW2ML;
protected byte WPWW2MR;
protected short WPWW2MU;
protected boolean WPWW2OE;
protected boolean WPWW2OL;
protected boolean WPWW2OR;
protected boolean WPWW2OU;
protected boolean WPWW2WE;
protected boolean WPWW2WL;
protected boolean WPWW2WR;
protected boolean WPWW2WU;
protected boolean WPWW2YE;
protected boolean WPWW2YL;
protected boolean WPWW2YR;
protected boolean WPWW2YU;
protected boolean WPWW3FE;
protected boolean WPWW3FL;
protected boolean WPWW3FR;
protected boolean WPWW3FU;
protected byte WPWW3ME;
protected short WPWW3ML;
protected byte WPWW3MR;
protected short WPWW3MU;
protected boolean WPWW3OE;
protected boolean WPWW3OL;
protected boolean WPWW3OR;
protected boolean WPWW3OU;
protected boolean WPWW3WE;
protected boolean WPWW3WL;
protected boolean WPWW3WR;
protected boolean WPWW3WU;
protected boolean WPWW3YE;
protected boolean WPWW3YL;
protected boolean WPWW3YR;
protected boolean WPWW3YU;
protected boolean WPWW4FE;
protected boolean WPWW4FL;
protected boolean WPWW4FR;
protected boolean WPWW4FU;
protected byte WPWW4ME;
protected short WPWW4ML;
protected byte WPWW4MR;
protected short WPWW4MU;
protected byte WPWW4OE;
protected byte WPWW4OL;
protected byte WPWW4OR;
protected short WPWW4OU;
protected boolean WPWW4WE;
protected short WPWW4WL;
protected boolean WPWW4WR;
protected short WPWW4WU;
protected boolean WPWW4YE;
protected boolean WPWW4YL;
protected boolean WPWW4YR;
protected boolean WPWW4YU;
protected boolean WPWW5FE;
protected boolean WPWW5FL;
protected boolean WPWW5FR;
protected boolean WPWW5FU;
protected byte WPWW5ME;
protected boolean WPWW5ML;
protected boolean WPWW5MR;
protected boolean WPWW5MU;
protected byte WPWW5OE;
protected byte WPWW5OL;
protected byte WPWW5OR;
protected byte WPWW5OU;
protected boolean WPWW5WE;
protected boolean WPWW5WL;
protected boolean WPWW5WR;
protected boolean WPWW5WU;
protected boolean WPWW5YE;
protected boolean WPWW5YL;
protected boolean WPWW5YR;
protected boolean WPWW5YU;
protected boolean WPWW6FE;
protected boolean WPWW6FL;
protected boolean WPWW6FR;
protected boolean WPWW6FU;
protected boolean WPWW6ME;
protected boolean WPWW6ML;
protected boolean WPWW6MR;
protected boolean WPWW6MU;
protected boolean WPWW6OE;
protected boolean WPWW6OL;
protected boolean WPWW6OR;
protected boolean WPWW6OU;
protected boolean WPWW6WE;
protected boolean WPWW6WL;
protected boolean WPWW6WR;
protected boolean WPWW6WU;
protected boolean WPWW6YE;
protected boolean WPWW6YL;
protected boolean WPWW6YR;
protected boolean WPWW6YU;
protected boolean WPWWFE;
protected boolean WPWWFL;
protected boolean WPWWFR;
protected boolean WPWWFU;
protected byte WPWWME;
protected short WPWWML;
protected byte WPWWMR;
protected short WPWWMU;
protected byte WPWWOE;
protected byte WPWWOL;
protected byte WPWWOR;
protected short WPWWOU;
protected byte WPWWWE;
protected short WPWWWL;
protected boolean WPWWWR;
protected short WPWWWU;
protected byte WPWWYE;
protected byte WPWWYL;
protected byte WPWWYR;
protected short WPWWYU;
protected byte WPWYJ14;
protected byte WPWYJ15;
protected byte WPWYJ16;
protected byte WPWYJ17;
protected byte WPWYJ18;
protected byte WPWYN16;
protected byte WPWYN17;
protected byte WPWYN18;
protected byte WPWYN19;
protected byte WPWYN20;
protected boolean WPWYN21;
protected byte WPWYW15;
protected byte WPWYW16;
protected byte WPWYW17;
protected byte WPWYW18;
protected byte WPWYWK1;
protected byte WPWYWK2;
protected byte WPWYWK3;
protected byte WPWYWK4;
protected boolean WPWYWK5;
protected boolean WPY17FE;
protected boolean WPY17FL;
protected boolean WPY17FR;
protected boolean WPY17FU;
protected byte WPY17ME;
protected short WPY17ML;
protected byte WPY17MR;
protected short WPY17MU;
protected byte WPY17OE;
protected short WPY17OL;
protected byte WPY17OR;
protected short WPY17OU;
protected byte WPY17WE;
protected short WPY17WL;
protected byte WPY17WR;
protected short WPY17WU;
protected byte WPY17YE;
protected short WPY17YL;
protected byte WPY17YR;
protected short WPY17YU;
protected boolean WPY18FE;
protected boolean WPY18FL;
protected boolean WPY18FR;
protected boolean WPY18FU;
protected byte WPY18ME;
protected short WPY18ML;
protected byte WPY18MR;
protected short WPY18MU;
protected byte WPY18OE;
protected short WPY18OL;
protected byte WPY18OR;
protected short WPY18OU;
protected boolean WPY18WE;
protected boolean WPY18WL;
protected boolean WPY18WR;
protected boolean WPY18WU;
protected boolean WPY18YE;
protected boolean WPY18YL;
protected boolean WPY18YR;
protected boolean WPY18YU;
protected boolean WPY19FE;
protected boolean WPY19FL;
protected boolean WPY19FR;
protected boolean WPY19FU;
protected boolean WPY19ME;
protected byte WPY19ML;
protected boolean WPY19MR;
protected short WPY19MU;
protected boolean WPY19OE;
protected boolean WPY19OL;
protected boolean WPY19OR;
protected boolean WPY19OU;
protected boolean WPY19WE;
protected boolean WPY19WL;
protected boolean WPY19WR;
protected boolean WPY19WU;
protected boolean WPY19YE;
protected boolean WPY19YL;
protected boolean WPY19YR;
protected boolean WPY19YU;
protected boolean WPY2FE;
protected boolean WPY2FL;
protected boolean WPY2FR;
protected boolean WPY2FU;
protected byte WPY2ME;
protected short WPY2ML;
protected byte WPY2MR;
protected short WPY2MU;
protected byte WPY2OE;
protected short WPY2OL;
protected boolean WPY2OR;
protected short WPY2OU;
protected boolean WPY2WE;
protected boolean WPY2WL;
protected boolean WPY2WR;
protected boolean WPY2WU;
protected boolean WPY2YE;
protected boolean WPY2YL;
protected boolean WPY2YR;
protected boolean WPY2YU;
protected boolean WPY3FE;
protected boolean WPY3FL;
protected boolean WPY3FR;
protected boolean WPY3FU;
protected byte WPY3ME;
protected short WPY3ML;
protected byte WPY3MR;
protected short WPY3MU;
protected boolean WPY3OE;
protected boolean WPY3OL;
protected boolean WPY3OR;
protected boolean WPY3OU;
protected boolean WPY3WE;
protected boolean WPY3WL;
protected boolean WPY3WR;
protected boolean WPY3WU;
protected boolean WPY3YE;
protected boolean WPY3YL;
protected boolean WPY3YR;
protected boolean WPY3YU;
protected boolean WPY4FE;
protected boolean WPY4FL;
protected boolean WPY4FR;
protected boolean WPY4FU;
protected byte WPY4ME;
protected short WPY4ML;
protected byte WPY4MR;
protected short WPY4MU;
protected byte WPY4OE;
protected short WPY4OL;
protected byte WPY4OR;
protected short WPY4OU;
protected boolean WPY4WE;
protected boolean WPY4WL;
protected boolean WPY4WR;
protected boolean WPY4WU;
protected boolean WPY4YE;
protected boolean WPY4YL;
protected boolean WPY4YR;
protected boolean WPY4YU;
protected boolean WPY5FE;
protected boolean WPY5FL;
protected boolean WPY5FR;
protected boolean WPY5FU;
protected byte WPY5ME;
protected byte WPY5ML;
protected byte WPY5MR;
protected byte WPY5MU;
protected byte WPY5OE;
protected byte WPY5OL;
protected byte WPY5OR;
protected byte WPY5OU;
protected boolean WPY5WE;
protected boolean WPY5WL;
protected boolean WPY5WR;
protected boolean WPY5WU;
protected boolean WPY5YE;
protected boolean WPY5YL;
protected boolean WPY5YR;
protected short WPY5YU;
protected boolean WPY6FE;
protected boolean WPY6FL;
protected boolean WPY6FR;
protected boolean WPY6FU;
protected byte WPY6ME;
protected byte WPY6ML;
protected byte WPY6MR;
protected byte WPY6MU;
protected boolean WPY6OE;
protected short WPY6OL;
protected boolean WPY6OR;
protected short WPY6OU;
protected boolean WPY6WE;
protected boolean WPY6WL;
protected boolean WPY6WR;
protected boolean WPY6WU;
protected boolean WPY6YE;
protected boolean WPY6YL;
protected boolean WPY6YR;
protected boolean WPY6YU;
protected boolean WPY7FE;
protected boolean WPY7FL;
protected boolean WPY7FR;
protected boolean WPY7FU;
protected boolean WPY7ME;
protected boolean WPY7ML;
protected boolean WPY7MR;
protected short WPY7MU;
protected boolean WPY7OE;
protected boolean WPY7OL;
protected boolean WPY7OR;
protected boolean WPY7OU;
protected boolean WPY7WE;
protected boolean WPY7WL;
protected boolean WPY7WR;
protected boolean WPY7WU;
protected boolean WPY7YE;
protected boolean WPY7YL;
protected boolean WPY7YR;
protected boolean WPY7YU;
protected boolean WPY8FE;
protected boolean WPY8FL;
protected boolean WPY8FR;
protected boolean WPY8FU;
protected boolean WPY8ME;
protected boolean WPY8ML;
protected boolean WPY8MR;
protected boolean WPY8MU;
protected byte WPY8OE;
protected byte WPY8OL;
protected byte WPY8OR;
protected byte WPY8OU;
protected boolean WPY8WE;
protected boolean WPY8WL;
protected boolean WPY8WR;
protected boolean WPY8WU;
protected boolean WPY8YE;
protected boolean WPY8YL;
protected boolean WPY8YR;
protected boolean WPY8YU;
protected byte WPYAER2;
protected byte WPYAER3;
protected byte WPYAER4;
protected byte WPYAER5;
protected byte WPYAER6;
protected byte WPYBS2;
protected byte WPYBS3;
protected byte WPYBS4;
protected byte WPYBS5;
protected byte WPYBS6;
protected int WPYCA2;
protected short WPYCA3;
protected short WPYCA4;
protected short WPYCA5;
protected short WPYCA6;
protected byte WPYCAT2;
protected byte WPYCAT3;
protected byte WPYCAT4;
protected byte WPYCAT5;
protected byte WPYCAT6;
protected boolean WPYFE;
protected boolean WPYFL;
protected boolean WPYFR;
protected byte WPYFRA;
protected byte WPYFRA2;
protected boolean WPYFRA3;
protected byte WPYFRA4;
protected boolean WPYFRA5;
protected boolean WPYFRA6;
protected boolean WPYFU;
protected byte WPYME;
protected short WPYML;
protected byte WPYMR;
protected short WPYMU;
protected byte WPYOE;
protected short WPYOL;
protected byte WPYOR;
protected short WPYOU;
protected byte WPYPEN;
protected byte WPYPEN2;
protected boolean WPYPEN3;
protected byte WPYPEN4;
protected boolean WPYPEN5;
protected byte WPYSTM1;
protected byte WPYSTM2;
protected byte WPYSTM3;
protected byte WPYSTM4;
protected byte WPYSTM5;
protected byte WPYSTP1;
protected byte WPYSTP2;
protected byte WPYSTP3;
protected byte WPYSTP4;
protected byte WPYSTP5;
protected byte WPYSTPM;
protected byte WPYWE;
protected short WPYWL;
protected byte WPYWR;
protected short WPYWU;
protected byte WPYYE;
protected short WPYYL;
protected byte WPYYR;
protected short WPYYU;
protected byte WSTOKB;
protected double WSTVAL;
protected byte WTC_P_F;
protected double WTC_P_I;
protected short WTC_P_O;
protected short WTC_P_T;
protected byte WTC_R_F;
protected double WTC_R_I;
protected short WTC_R_O;
protected short WTC_R_T;
protected byte WTOK;
protected double WTVAL;
protected byte YNOBP;
protected byte YNOLF;
protected byte YNOWH;
protected final void initADDPEN_04(String s) {
if (!s.trim().isEmpty()) {
ADDPEN_04 = Double.parseDouble(s);
} else {
ADDPEN_04 = Double.NaN;
}
}

protected final void initADDPEN_SPA(String s) {
if (!s.trim().isEmpty()) {
ADDPEN_SPA = Double.parseDouble(s);
} else {
ADDPEN_SPA = Double.NaN;
}
}

protected final void initAIRTEMP(String s) {
if (!s.trim().isEmpty()) {
AIRTEMP = Double.parseDouble(s);
} else {
AIRTEMP = Double.NaN;
}
}

protected final void initAPOE(String s) {
if (!s.trim().isEmpty()) {
APOE = Double.parseDouble(s);
} else {
APOE = Double.NaN;
}
}

protected final void initASKCEM2(String s) {
if (!s.trim().isEmpty()) {
ASKCEM2 = Byte.parseByte(s);
} else {
ASKCEM2 = Byte.MIN_VALUE;
}
}

protected final void initASKCEM3(String s) {
if (!s.trim().isEmpty()) {
ASKCEM3 = Byte.parseByte(s);
} else {
ASKCEM3 = Byte.MIN_VALUE;
}
}

protected final void initASKCEM4(String s) {
if (!s.trim().isEmpty()) {
ASKCEM4 = Byte.parseByte(s);
} else {
ASKCEM4 = Byte.MIN_VALUE;
}
}

protected final void initASKCEM5(String s) {
if (!s.trim().isEmpty()) {
ASKCEM5 = Byte.parseByte(s);
} else {
ASKCEM5 = Byte.MIN_VALUE;
}
}

protected final void initASKDCB(String s) {
if (!s.trim().isEmpty()) {
ASKDCB = Byte.parseByte(s);
} else {
ASKDCB = Byte.MIN_VALUE;
}
}

protected final void initASKDCB2(String s) {
if (!s.trim().isEmpty()) {
ASKDCB2 = Byte.parseByte(s);
} else {
ASKDCB2 = Byte.MIN_VALUE;
}
}

protected final void initASKDCB3(String s) {
if (!s.trim().isEmpty()) {
ASKDCB3 = Byte.parseByte(s);
} else {
ASKDCB3 = Byte.MIN_VALUE;
}
}

protected final void initASKDCB4(String s) {
if (!s.trim().isEmpty()) {
ASKDCB4 = Byte.parseByte(s);
} else {
ASKDCB4 = Byte.MIN_VALUE;
}
}

protected final void initASKDCB5(String s) {
if (!s.trim().isEmpty()) {
ASKDCB5 = Byte.parseByte(s);
} else {
ASKDCB5 = Byte.MIN_VALUE;
}
}

protected final void initASKDCB6(String s) {
if (!s.trim().isEmpty()) {
ASKDCB6 = Byte.parseByte(s);
} else {
ASKDCB6 = Byte.MIN_VALUE;
}
}

protected final void initASKINF2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
ASKINF2 = false;
} else {
ASKINF2 = true;
}
}
}

protected final void initASKINFO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
ASKINFO = false;
} else {
ASKINFO = true;
}
}
}

protected final void initASKPST(String s) {
if (!s.trim().isEmpty()) {
ASKPST = Byte.parseByte(s);
} else {
ASKPST = Byte.MIN_VALUE;
}
}

protected final void initASKPST2(String s) {
if (!s.trim().isEmpty()) {
ASKPST2 = Byte.parseByte(s);
} else {
ASKPST2 = Byte.MIN_VALUE;
}
}

protected final void initASKPST3(String s) {
if (!s.trim().isEmpty()) {
ASKPST3 = Byte.parseByte(s);
} else {
ASKPST3 = Byte.MIN_VALUE;
}
}

protected final void initASKPX1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ASKPX1 = false;
} else {
ASKPX1 = true;
}
}
}

protected final void initASKQS(String s) {
if (!s.trim().isEmpty()) {
ASKQS = Byte.parseByte(s);
} else {
ASKQS = Byte.MIN_VALUE;
}
}

protected final void initASKQS2(String s) {
if (!s.trim().isEmpty()) {
ASKQS2 = Byte.parseByte(s);
} else {
ASKQS2 = Byte.MIN_VALUE;
}
}

protected final void initASKQS3(String s) {
if (!s.trim().isEmpty()) {
ASKQS3 = Byte.parseByte(s);
} else {
ASKQS3 = Byte.MIN_VALUE;
}
}

protected final void initASKQS4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
ASKQS4 = false;
} else {
ASKQS4 = true;
}
}
}

protected final void initASKQS5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
ASKQS5 = false;
} else {
ASKQS5 = true;
}
}
}

protected final void initASKQS6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
ASKQS6 = false;
} else {
ASKQS6 = true;
}
}
}

protected final void initASKRUL(String s) {
if (!s.trim().isEmpty()) {
ASKRUL = Byte.parseByte(s);
} else {
ASKRUL = Byte.MIN_VALUE;
}
}

protected final void initASKRUL2(String s) {
if (!s.trim().isEmpty()) {
ASKRUL2 = Byte.parseByte(s);
} else {
ASKRUL2 = Byte.MIN_VALUE;
}
}

protected final void initASKRUL3(String s) {
if (!s.trim().isEmpty()) {
ASKRUL3 = Byte.parseByte(s);
} else {
ASKRUL3 = Byte.MIN_VALUE;
}
}

protected final void initASKRUL4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
ASKRUL4 = false;
} else {
ASKRUL4 = true;
}
}
}

protected final void initASKRUL5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
ASKRUL5 = false;
} else {
ASKRUL5 = true;
}
}
}

protected final void initASKRUL6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
ASKRUL6 = false;
} else {
ASKRUL6 = true;
}
}
}

protected final void initASKSNC(String s) {
if (!s.trim().isEmpty()) {
ASKSNC = Byte.parseByte(s);
} else {
ASKSNC = Byte.MIN_VALUE;
}
}

protected final void initASKSNC2(String s) {
if (!s.trim().isEmpty()) {
ASKSNC2 = Byte.parseByte(s);
} else {
ASKSNC2 = Byte.MIN_VALUE;
}
}

protected final void initASKSNC3(String s) {
if (!s.trim().isEmpty()) {
ASKSNC3 = Byte.parseByte(s);
} else {
ASKSNC3 = Byte.MIN_VALUE;
}
}

protected final void initASTRATIF(String s) {
if (!s.trim().isEmpty()) {
ASTRATIF = Short.parseShort(s);
} else {
ASTRATIF = Short.MIN_VALUE;
}
}

protected final void initBEHDIA01(String s) {
if (!s.trim().isEmpty()) {
BEHDIA01 = Byte.parseByte(s);
} else {
BEHDIA01 = Byte.MIN_VALUE;
}
}

protected final void initBEHDIA02(String s) {
if (!s.trim().isEmpty()) {
BEHDIA02 = Byte.parseByte(s);
} else {
BEHDIA02 = Byte.MIN_VALUE;
}
}

protected final void initBEHDIA03(String s) {
if (!s.trim().isEmpty()) {
BEHDIA03 = Byte.parseByte(s);
} else {
BEHDIA03 = Byte.MIN_VALUE;
}
}

protected final void initBEHDIA04(String s) {
if (!s.trim().isEmpty()) {
BEHDIA04 = Byte.parseByte(s);
} else {
BEHDIA04 = Byte.MIN_VALUE;
}
}

protected final void initBEHDIA05(String s) {
if (!s.trim().isEmpty()) {
BEHDIA05 = Byte.parseByte(s);
} else {
BEHDIA05 = Byte.MIN_VALUE;
}
}

protected final void initBEHDIA06(String s) {
if (!s.trim().isEmpty()) {
BEHDIA06 = Byte.parseByte(s);
} else {
BEHDIA06 = Byte.MIN_VALUE;
}
}

protected final void initBEHDIA07(String s) {
if (!s.trim().isEmpty()) {
BEHDIA07 = Byte.parseByte(s);
} else {
BEHDIA07 = Byte.MIN_VALUE;
}
}

protected final void initBHEAGA(String s) {
if (!s.trim().isEmpty()) {
BHEAGA = Byte.parseByte(s);
} else {
BHEAGA = Byte.MIN_VALUE;
}
}

protected final void initBHEAGB(String s) {
if (!s.trim().isEmpty()) {
BHEAGB = Byte.parseByte(s);
} else {
BHEAGB = Byte.MIN_VALUE;
}
}

protected final void initBHEAGC(String s) {
if (!s.trim().isEmpty()) {
BHEAGC = Byte.parseByte(s);
} else {
BHEAGC = Byte.MIN_VALUE;
}
}

protected final void initBHEAGD(String s) {
if (!s.trim().isEmpty()) {
BHEAGD = Byte.parseByte(s);
} else {
BHEAGD = Byte.MIN_VALUE;
}
}

protected final void initBHEAGE(String s) {
if (!s.trim().isEmpty()) {
BHEAGE = Byte.parseByte(s);
} else {
BHEAGE = Byte.MIN_VALUE;
}
}

protected final void initBHEAGF(String s) {
if (!s.trim().isEmpty()) {
BHEAGF = Byte.parseByte(s);
} else {
BHEAGF = Byte.MIN_VALUE;
}
}

protected final void initBHEAGG(String s) {
if (!s.trim().isEmpty()) {
BHEAGG = Byte.parseByte(s);
} else {
BHEAGG = Byte.MIN_VALUE;
}
}

protected final void initBHEAGH(String s) {
if (!s.trim().isEmpty()) {
BHEAGH = Byte.parseByte(s);
} else {
BHEAGH = Byte.MIN_VALUE;
}
}

protected final void initBHEAGI(String s) {
if (!s.trim().isEmpty()) {
BHEAGI = Byte.parseByte(s);
} else {
BHEAGI = Byte.MIN_VALUE;
}
}

protected final void initBHEAGJ(String s) {
if (!s.trim().isEmpty()) {
BHEAGJ = Byte.parseByte(s);
} else {
BHEAGJ = Byte.MIN_VALUE;
}
}

protected final void initBHEAID1(String s) {
if (!s.trim().isEmpty()) {
BHEAID1 = Byte.parseByte(s);
} else {
BHEAID1 = Byte.MIN_VALUE;
}
}

protected final void initBHEAID2(String s) {
if (!s.trim().isEmpty()) {
BHEAID2 = Byte.parseByte(s);
} else {
BHEAID2 = Byte.MIN_VALUE;
}
}

protected final void initBHEAID3(String s) {
if (!s.trim().isEmpty()) {
BHEAID3 = Byte.parseByte(s);
} else {
BHEAID3 = Byte.MIN_VALUE;
}
}

protected final void initBHEAID4(String s) {
if (!s.trim().isEmpty()) {
BHEAID4 = Byte.parseByte(s);
} else {
BHEAID4 = Byte.MIN_VALUE;
}
}

protected final void initBHEAID5(String s) {
if (!s.trim().isEmpty()) {
BHEAID5 = Byte.parseByte(s);
} else {
BHEAID5 = Byte.MIN_VALUE;
}
}

protected final void initBHEART1(String s) {
if (!s.trim().isEmpty()) {
BHEART1 = Byte.parseByte(s);
} else {
BHEART1 = Byte.MIN_VALUE;
}
}

protected final void initBHEART2(String s) {
if (!s.trim().isEmpty()) {
BHEART2 = Byte.parseByte(s);
} else {
BHEART2 = Byte.MIN_VALUE;
}
}

protected final void initBHEART3(String s) {
if (!s.trim().isEmpty()) {
BHEART3 = Byte.parseByte(s);
} else {
BHEART3 = Byte.MIN_VALUE;
}
}

protected final void initBHECANA(String s) {
if (!s.trim().isEmpty()) {
BHECANA = Byte.parseByte(s);
} else {
BHECANA = Byte.MIN_VALUE;
}
}

protected final void initBHEOPT1(String s) {
if (!s.trim().isEmpty()) {
BHEOPT1 = Byte.parseByte(s);
} else {
BHEOPT1 = Byte.MIN_VALUE;
}
}

protected final void initBHEOPT2(String s) {
if (!s.trim().isEmpty()) {
BHEOPT2 = Byte.parseByte(s);
} else {
BHEOPT2 = Byte.MIN_VALUE;
}
}

protected final void initBHEOPT3(String s) {
if (!s.trim().isEmpty()) {
BHEOPT3 = Byte.parseByte(s);
} else {
BHEOPT3 = Byte.MIN_VALUE;
}
}

protected final void initBHEOPT4(String s) {
if (!s.trim().isEmpty()) {
BHEOPT4 = Byte.parseByte(s);
} else {
BHEOPT4 = Byte.MIN_VALUE;
}
}

protected final void initBHEPRK(String s) {
if (!s.trim().isEmpty()) {
BHEPRK = Byte.parseByte(s);
} else {
BHEPRK = Byte.MIN_VALUE;
}
}

protected final void initBHESKA(String s) {
if (!s.trim().isEmpty()) {
BHESKA = Byte.parseByte(s);
} else {
BHESKA = Byte.MIN_VALUE;
}
}

protected final void initBHESMK(String s) {
if (!s.trim().isEmpty()) {
BHESMK = Byte.parseByte(s);
} else {
BHESMK = Byte.MIN_VALUE;
}
}

protected final void initBLOODR(String s) {
if (!s.trim().isEmpty()) {
BLOODR = Byte.parseByte(s);
} else {
BLOODR = Byte.MIN_VALUE;
}
}

protected final void initBMI(String s) {
if (!s.trim().isEmpty()) {
BMI = Double.parseDouble(s);
} else {
BMI = Double.NaN;
}
}

protected final void initBMIOBE(String s) {
if (!s.trim().isEmpty()) {
BMIOBE = Byte.parseByte(s);
} else {
BMIOBE = Byte.MIN_VALUE;
}
}

protected final void initBMIOK(String s) {
if (!s.trim().isEmpty()) {
BMIOK = Byte.parseByte(s);
} else {
BMIOK = Byte.MIN_VALUE;
}
}

protected final void initBMIVAL(String s) {
if (!s.trim().isEmpty()) {
BMIVAL = Double.parseDouble(s);
} else {
BMIVAL = Double.NaN;
}
}

protected final void initBPCONST(String s) {
if (!s.trim().isEmpty()) {
BPCONST = Byte.parseByte(s);
} else {
BPCONST = Byte.MIN_VALUE;
}
}

protected final void initBPRESPC(String s) {
if (!s.trim().isEmpty()) {
BPRESPC = Byte.parseByte(s);
} else {
BPRESPC = Byte.MIN_VALUE;
}
}

protected final void initBSOUTC(String s) {
if (!s.trim().isEmpty()) {
BSOUTC = Byte.parseByte(s);
} else {
BSOUTC = Byte.MIN_VALUE;
}
}

protected final void initBSP_04(String s) {
if (!s.trim().isEmpty()) {
BSP_04 = Double.parseDouble(s);
} else {
BSP_04 = Double.NaN;
}
}

protected final void initBSP_SPA(String s) {
if (!s.trim().isEmpty()) {
BSP_SPA = Double.parseDouble(s);
} else {
BSP_SPA = Double.NaN;
}
}

protected final void initBSWILL(String s) {
if (!s.trim().isEmpty()) {
BSWILL = Byte.parseByte(s);
} else {
BSWILL = Byte.MIN_VALUE;
}
}

protected final void initCARERS_P_F(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_F = Byte.parseByte(s);
} else {
CARERS_P_F = Byte.MIN_VALUE;
}
}

protected final void initCARERS_P_I(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_I = Double.parseDouble(s);
} else {
CARERS_P_I = Double.NaN;
}
}

protected final void initCARERS_P_O(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_O = Short.parseShort(s);
} else {
CARERS_P_O = Short.MIN_VALUE;
}
}

protected final void initCARERS_P_T(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_T = Short.parseShort(s);
} else {
CARERS_P_T = Short.MIN_VALUE;
}
}

protected final void initCARERS_R_F(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_F = Byte.parseByte(s);
} else {
CARERS_R_F = Byte.MIN_VALUE;
}
}

protected final void initCARERS_R_I(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_I = Double.parseDouble(s);
} else {
CARERS_R_I = Double.NaN;
}
}

protected final void initCARERS_R_O(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_O = Short.parseShort(s);
} else {
CARERS_R_O = Short.MIN_VALUE;
}
}

protected final void initCARERS_R_T(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_T = Short.parseShort(s);
} else {
CARERS_R_T = Short.MIN_VALUE;
}
}

protected final void initCFANI(String s) {
if (!s.trim().isEmpty()) {
CFANI = Byte.parseByte(s);
} else {
CFANI = Byte.MIN_VALUE;
}
}

protected final void initCFIB(String s) {
if (!s.trim().isEmpty()) {
CFIB = Double.parseDouble(s);
} else {
CFIB = Double.NaN;
}
}

protected final void initCFLITB(String s) {
if (!s.trim().isEmpty()) {
CFLITB = Byte.parseByte(s);
} else {
CFLITB = Byte.MIN_VALUE;
}
}

protected final void initCFLITC(String s) {
if (!s.trim().isEmpty()) {
CFLITC = Byte.parseByte(s);
} else {
CFLITC = Byte.MIN_VALUE;
}
}

protected final void initCFLITD(String s) {
if (!s.trim().isEmpty()) {
CFLITD = Byte.parseByte(s);
} else {
CFLITD = Byte.MIN_VALUE;
}
}

protected final void initCFLITE(String s) {
if (!s.trim().isEmpty()) {
CFLITE = Byte.parseByte(s);
} else {
CFLITE = Byte.MIN_VALUE;
}
}

protected final void initCFLITOC(String s) {
if (!s.trim().isEmpty()) {
CFLITOC = Byte.parseByte(s);
} else {
CFLITOC = Byte.MIN_VALUE;
}
}

protected final void initCFLITSK(String s) {
if (!s.trim().isEmpty()) {
CFLITSK = Byte.parseByte(s);
} else {
CFLITSK = Byte.MIN_VALUE;
}
}

protected final void initCFMEM(String s) {
if (!s.trim().isEmpty()) {
CFMEM = Byte.parseByte(s);
} else {
CFMEM = Byte.MIN_VALUE;
}
}

protected final void initCFMEMS(String s) {
if (!s.trim().isEmpty()) {
CFMEMS = Byte.parseByte(s);
} else {
CFMEMS = Byte.MIN_VALUE;
}
}

protected final void initCFMETM(String s) {
if (!s.trim().isEmpty()) {
CFMETM = Byte.parseByte(s);
} else {
CFMETM = Byte.MIN_VALUE;
}
}

protected final void initCFMETMT(String s) {
if (!s.trim().isEmpty()) {
CFMETMT = Byte.parseByte(s);
} else {
CFMETMT = Byte.MIN_VALUE;
}
}

protected final void initCFPASCR(String s) {
if (!s.trim().isEmpty()) {
CFPASCR = Byte.parseByte(s);
} else {
CFPASCR = Byte.MIN_VALUE;
}
}

protected final void initCFWHO1(String s) {
if (!s.trim().isEmpty()) {
CFWHO1 = Byte.parseByte(s);
} else {
CFWHO1 = Byte.MIN_VALUE;
}
}

protected final void initCFWHO2(String s) {
if (!s.trim().isEmpty()) {
CFWHO2 = Byte.parseByte(s);
} else {
CFWHO2 = Byte.MIN_VALUE;
}
}

protected final void initCFWHO3(String s) {
if (!s.trim().isEmpty()) {
CFWHO3 = Byte.parseByte(s);
} else {
CFWHO3 = Byte.MIN_VALUE;
}
}

protected final void initCFWHO4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CFWHO4 = false;
} else {
CFWHO4 = true;
}
}
}

protected final void initCFWHZ1(String s) {
if (!s.trim().isEmpty()) {
CFWHZ1 = Byte.parseByte(s);
} else {
CFWHZ1 = Byte.MIN_VALUE;
}
}

protected final void initCFWHZ2(String s) {
if (!s.trim().isEmpty()) {
CFWHZ2 = Byte.parseByte(s);
} else {
CFWHZ2 = Byte.MIN_VALUE;
}
}

protected final void initCFWHZ3(String s) {
if (!s.trim().isEmpty()) {
CFWHZ3 = Byte.parseByte(s);
} else {
CFWHZ3 = Byte.MIN_VALUE;
}
}

protected final void initCHESTIN(String s) {
if (!s.trim().isEmpty()) {
CHESTIN = Byte.parseByte(s);
} else {
CHESTIN = Byte.MIN_VALUE;
}
}

protected final void initCHINHH1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
CHINHH1 = false;
} else {
CHINHH1 = true;
}
}
}

protected final void initCHOL(String s) {
if (!s.trim().isEmpty()) {
CHOL = Double.parseDouble(s);
} else {
CHOL = Double.NaN;
}
}

protected final void initCLOTB(String s) {
if (!s.trim().isEmpty()) {
CLOTB = Byte.parseByte(s);
} else {
CLOTB = Byte.MIN_VALUE;
}
}

protected final void initCONCUR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
CONCUR = false;
} else {
CONCUR = true;
}
}
}

protected final void initCONFAGE(String s) {
if (!s.trim().isEmpty()) {
CONFAGE = Byte.parseByte(s);
} else {
CONFAGE = Byte.MIN_VALUE;
}
}

protected final void initCONSUB1(String s) {
if (!s.trim().isEmpty()) {
CONSUB1 = Byte.parseByte(s);
} else {
CONSUB1 = Byte.MIN_VALUE;
}
}

protected final void initCONSUB2(String s) {
if (!s.trim().isEmpty()) {
CONSUB2 = Byte.parseByte(s);
} else {
CONSUB2 = Byte.MIN_VALUE;
}
}

protected final void initCONSUB3(String s) {
if (!s.trim().isEmpty()) {
CONSUB3 = Byte.parseByte(s);
} else {
CONSUB3 = Byte.MIN_VALUE;
}
}

protected final void initCTC_P_F(String s) {
if (!s.trim().isEmpty()) {
CTC_P_F = Byte.parseByte(s);
} else {
CTC_P_F = Byte.MIN_VALUE;
}
}

protected final void initCTC_P_I(String s) {
if (!s.trim().isEmpty()) {
CTC_P_I = Double.parseDouble(s);
} else {
CTC_P_I = Double.NaN;
}
}

protected final void initCTC_P_O(String s) {
if (!s.trim().isEmpty()) {
CTC_P_O = Short.parseShort(s);
} else {
CTC_P_O = Short.MIN_VALUE;
}
}

protected final void initCTC_P_T(String s) {
if (!s.trim().isEmpty()) {
CTC_P_T = Short.parseShort(s);
} else {
CTC_P_T = Short.MIN_VALUE;
}
}

protected final void initCTC_R_F(String s) {
if (!s.trim().isEmpty()) {
CTC_R_F = Byte.parseByte(s);
} else {
CTC_R_F = Byte.MIN_VALUE;
}
}

protected final void initCTC_R_I(String s) {
if (!s.trim().isEmpty()) {
CTC_R_I = Double.parseDouble(s);
} else {
CTC_R_I = Double.NaN;
}
}

protected final void initCTC_R_O(String s) {
if (!s.trim().isEmpty()) {
CTC_R_O = Short.parseShort(s);
} else {
CTC_R_O = Short.MIN_VALUE;
}
}

protected final void initCTC_R_T(String s) {
if (!s.trim().isEmpty()) {
CTC_R_T = Short.parseShort(s);
} else {
CTC_R_T = Short.MIN_VALUE;
}
}

protected final void initCUFSIZE(String s) {
if (!s.trim().isEmpty()) {
CUFSIZE = Byte.parseByte(s);
} else {
CUFSIZE = Byte.MIN_VALUE;
}
}

protected final void initCURRENTDB_04(String s) {
if (!s.trim().isEmpty()) {
CURRENTDB_04 = Double.parseDouble(s);
} else {
CURRENTDB_04 = Double.NaN;
}
}

protected final void initCURRENTDB_SPA(String s) {
if (!s.trim().isEmpty()) {
CURRENTDB_SPA = Double.parseDouble(s);
} else {
CURRENTDB_SPA = Double.NaN;
}
}

protected final void initCURRENTDC_04(String s) {
if (!s.trim().isEmpty()) {
CURRENTDC_04 = Double.parseDouble(s);
} else {
CURRENTDC_04 = Double.NaN;
}
}

protected final void initCURRENTDC_SPA(String s) {
if (!s.trim().isEmpty()) {
CURRENTDC_SPA = Double.parseDouble(s);
} else {
CURRENTDC_SPA = Double.NaN;
}
}

protected final void initDCURPEN(String s) {
if (!s.trim().isEmpty()) {
DCURPEN = Byte.parseByte(s);
} else {
DCURPEN = Byte.MIN_VALUE;
}
}

protected final void initDDBDC(String s) {
if (!s.trim().isEmpty()) {
DDBDC = Byte.parseByte(s);
} else {
DDBDC = Byte.MIN_VALUE;
}
}

protected final void initDEMPPEN(String s) {
if (!s.trim().isEmpty()) {
DEMPPEN = Byte.parseByte(s);
} else {
DEMPPEN = Byte.MIN_VALUE;
}
}

protected final void initDHAGER(String s) {
if (!s.trim().isEmpty()) {
DHAGER = Byte.parseByte(s);
} else {
DHAGER = Byte.MIN_VALUE;
}
}

protected final void initDHANYPX(String s) {
if (!s.trim().isEmpty()) {
DHANYPX = Byte.parseByte(s);
} else {
DHANYPX = Byte.MIN_VALUE;
}
}

protected final void initDHC14(String s) {
if (!s.trim().isEmpty()) {
DHC14 = Byte.parseByte(s);
} else {
DHC14 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG14(String s) {
if (!s.trim().isEmpty()) {
DHCAG14 = Byte.parseByte(s);
} else {
DHCAG14 = Byte.MIN_VALUE;
}
}

protected final void initDHCBY02(String s) {
if (!s.trim().isEmpty()) {
DHCBY02 = Short.parseShort(s);
} else {
DHCBY02 = Short.MIN_VALUE;
}
}

protected final void initDHCBY03(String s) {
if (!s.trim().isEmpty()) {
DHCBY03 = Short.parseShort(s);
} else {
DHCBY03 = Short.MIN_VALUE;
}
}

protected final void initDHCBY04(String s) {
if (!s.trim().isEmpty()) {
DHCBY04 = Short.parseShort(s);
} else {
DHCBY04 = Short.MIN_VALUE;
}
}

protected final void initDHCBY05(String s) {
if (!s.trim().isEmpty()) {
DHCBY05 = Short.parseShort(s);
} else {
DHCBY05 = Short.MIN_VALUE;
}
}

protected final void initDHCBY06(String s) {
if (!s.trim().isEmpty()) {
DHCBY06 = Short.parseShort(s);
} else {
DHCBY06 = Short.MIN_VALUE;
}
}

protected final void initDHCBY07(String s) {
if (!s.trim().isEmpty()) {
DHCBY07 = Short.parseShort(s);
} else {
DHCBY07 = Short.MIN_VALUE;
}
}

protected final void initDHCBY08(String s) {
if (!s.trim().isEmpty()) {
DHCBY08 = Short.parseShort(s);
} else {
DHCBY08 = Short.MIN_VALUE;
}
}

protected final void initDHCBY09(String s) {
if (!s.trim().isEmpty()) {
DHCBY09 = Short.parseShort(s);
} else {
DHCBY09 = Short.MIN_VALUE;
}
}

protected final void initDHCBY10(String s) {
if (!s.trim().isEmpty()) {
DHCBY10 = Short.parseShort(s);
} else {
DHCBY10 = Short.MIN_VALUE;
}
}

protected final void initDHCBY11(String s) {
if (!s.trim().isEmpty()) {
DHCBY11 = Short.parseShort(s);
} else {
DHCBY11 = Short.MIN_VALUE;
}
}

protected final void initDHCBY12(String s) {
if (!s.trim().isEmpty()) {
DHCBY12 = Short.parseShort(s);
} else {
DHCBY12 = Short.MIN_VALUE;
}
}

protected final void initDHCBY13(String s) {
if (!s.trim().isEmpty()) {
DHCBY13 = Short.parseShort(s);
} else {
DHCBY13 = Short.MIN_VALUE;
}
}

protected final void initDHCBY14(String s) {
if (!s.trim().isEmpty()) {
DHCBY14 = Short.parseShort(s);
} else {
DHCBY14 = Short.MIN_VALUE;
}
}

protected final void initDHCDY(String s) {
if (!s.trim().isEmpty()) {
DHCDY = Short.parseShort(s);
} else {
DHCDY = Short.MIN_VALUE;
}
}

protected final void initDHCR08(String s) {
if (!s.trim().isEmpty()) {
DHCR08 = Byte.parseByte(s);
} else {
DHCR08 = Byte.MIN_VALUE;
}
}

protected final void initDHCR09(String s) {
if (!s.trim().isEmpty()) {
DHCR09 = Byte.parseByte(s);
} else {
DHCR09 = Byte.MIN_VALUE;
}
}

protected final void initDHCR10(String s) {
if (!s.trim().isEmpty()) {
DHCR10 = Byte.parseByte(s);
} else {
DHCR10 = Byte.MIN_VALUE;
}
}

protected final void initDHCR104(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR104 = false;
} else {
DHCR104 = true;
}
}
}

protected final void initDHCR105(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR105 = false;
} else {
DHCR105 = true;
}
}
}

protected final void initDHCR106(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR106 = false;
} else {
DHCR106 = true;
}
}
}

protected final void initDHCR107(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR107 = false;
} else {
DHCR107 = true;
}
}
}

protected final void initDHCR108(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR108 = false;
} else {
DHCR108 = true;
}
}
}

protected final void initDHCR11(String s) {
if (!s.trim().isEmpty()) {
DHCR11 = Byte.parseByte(s);
} else {
DHCR11 = Byte.MIN_VALUE;
}
}

protected final void initDHCR118(String s) {
if (!s.trim().isEmpty()) {
DHCR118 = Byte.parseByte(s);
} else {
DHCR118 = Byte.MIN_VALUE;
}
}

protected final void initDHCR119(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR119 = false;
} else {
DHCR119 = true;
}
}
}

protected final void initDHCR12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR12 = false;
} else {
DHCR12 = true;
}
}
}

protected final void initDHCR120(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR120 = false;
} else {
DHCR120 = true;
}
}
}

protected final void initDHCR121(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR121 = false;
} else {
DHCR121 = true;
}
}
}

protected final void initDHCR122(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR122 = false;
} else {
DHCR122 = true;
}
}
}

protected final void initDHCR123(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR123 = false;
} else {
DHCR123 = true;
}
}
}

protected final void initDHCR124(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR124 = false;
} else {
DHCR124 = true;
}
}
}

protected final void initDHCR134(String s) {
if (!s.trim().isEmpty()) {
DHCR134 = Byte.parseByte(s);
} else {
DHCR134 = Byte.MIN_VALUE;
}
}

protected final void initDHCR135(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR135 = false;
} else {
DHCR135 = true;
}
}
}

protected final void initDHCR136(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR136 = false;
} else {
DHCR136 = true;
}
}
}

protected final void initDHCR137(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR137 = false;
} else {
DHCR137 = true;
}
}
}

protected final void initDHCR138(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR138 = false;
} else {
DHCR138 = true;
}
}
}

protected final void initDHCR139(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR139 = false;
} else {
DHCR139 = true;
}
}
}

protected final void initDHCR140(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR140 = false;
} else {
DHCR140 = true;
}
}
}

protected final void initDHCR147(String s) {
if (!s.trim().isEmpty()) {
DHCR147 = Byte.parseByte(s);
} else {
DHCR147 = Byte.MIN_VALUE;
}
}

protected final void initDHCR148(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR148 = false;
} else {
DHCR148 = true;
}
}
}

protected final void initDHCR149(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR149 = false;
} else {
DHCR149 = true;
}
}
}

protected final void initDHCR150(String s) {
if (!s.trim().isEmpty()) {
DHCR150 = Byte.parseByte(s);
} else {
DHCR150 = Byte.MIN_VALUE;
}
}

protected final void initDHCR151(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR151 = false;
} else {
DHCR151 = true;
}
}
}

protected final void initDHCR152(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR152 = false;
} else {
DHCR152 = true;
}
}
}

protected final void initDHCR153(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR153 = false;
} else {
DHCR153 = true;
}
}
}

protected final void initDHCR154(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR154 = false;
} else {
DHCR154 = true;
}
}
}

protected final void initDHCR155(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR155 = false;
} else {
DHCR155 = true;
}
}
}

protected final void initDHCR156(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR156 = false;
} else {
DHCR156 = true;
}
}
}

protected final void initDHCR163(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR163 = false;
} else {
DHCR163 = true;
}
}
}

protected final void initDHCR164(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR164 = false;
} else {
DHCR164 = true;
}
}
}

protected final void initDHCR165(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR165 = false;
} else {
DHCR165 = true;
}
}
}

protected final void initDHCR166(String s) {
if (!s.trim().isEmpty()) {
DHCR166 = Byte.parseByte(s);
} else {
DHCR166 = Byte.MIN_VALUE;
}
}

protected final void initDHCR167(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR167 = false;
} else {
DHCR167 = true;
}
}
}

protected final void initDHCR168(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR168 = false;
} else {
DHCR168 = true;
}
}
}

protected final void initDHCR169(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR169 = false;
} else {
DHCR169 = true;
}
}
}

protected final void initDHCR170(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR170 = false;
} else {
DHCR170 = true;
}
}
}

protected final void initDHCR171(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR171 = false;
} else {
DHCR171 = true;
}
}
}

protected final void initDHCR172(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR172 = false;
} else {
DHCR172 = true;
}
}
}

protected final void initDHCR178(String s) {
if (!s.trim().isEmpty()) {
DHCR178 = Byte.parseByte(s);
} else {
DHCR178 = Byte.MIN_VALUE;
}
}

protected final void initDHCR179(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR179 = false;
} else {
DHCR179 = true;
}
}
}

protected final void initDHCR180(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR180 = false;
} else {
DHCR180 = true;
}
}
}

protected final void initDHCR181(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR181 = false;
} else {
DHCR181 = true;
}
}
}

protected final void initDHCR182(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR182 = false;
} else {
DHCR182 = true;
}
}
}

protected final void initDHCR183(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR183 = false;
} else {
DHCR183 = true;
}
}
}

protected final void initDHCR184(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR184 = false;
} else {
DHCR184 = true;
}
}
}

protected final void initDHCR185(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR185 = false;
} else {
DHCR185 = true;
}
}
}

protected final void initDHCR186(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR186 = false;
} else {
DHCR186 = true;
}
}
}

protected final void initDHCR187(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR187 = false;
} else {
DHCR187 = true;
}
}
}

protected final void initDHCR188(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR188 = false;
} else {
DHCR188 = true;
}
}
}

protected final void initDHCR194(String s) {
if (!s.trim().isEmpty()) {
DHCR194 = Byte.parseByte(s);
} else {
DHCR194 = Byte.MIN_VALUE;
}
}

protected final void initDHCR195(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR195 = false;
} else {
DHCR195 = true;
}
}
}

protected final void initDHCR196(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR196 = false;
} else {
DHCR196 = true;
}
}
}

protected final void initDHCR197(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR197 = false;
} else {
DHCR197 = true;
}
}
}

protected final void initDHCR198(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR198 = false;
} else {
DHCR198 = true;
}
}
}

protected final void initDHCR199(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR199 = false;
} else {
DHCR199 = true;
}
}
}

protected final void initDHCR200(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR200 = false;
} else {
DHCR200 = true;
}
}
}

protected final void initDHCR201(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR201 = false;
} else {
DHCR201 = true;
}
}
}

protected final void initDHCR202(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR202 = false;
} else {
DHCR202 = true;
}
}
}

protected final void initDHCR203(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR203 = false;
} else {
DHCR203 = true;
}
}
}

protected final void initDHCR204(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR204 = false;
} else {
DHCR204 = true;
}
}
}

protected final void initDHCR209(String s) {
if (!s.trim().isEmpty()) {
DHCR209 = Byte.parseByte(s);
} else {
DHCR209 = Byte.MIN_VALUE;
}
}

protected final void initDHCR210(String s) {
if (!s.trim().isEmpty()) {
DHCR210 = Byte.parseByte(s);
} else {
DHCR210 = Byte.MIN_VALUE;
}
}

protected final void initDHCR211(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR211 = false;
} else {
DHCR211 = true;
}
}
}

protected final void initDHCR212(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR212 = false;
} else {
DHCR212 = true;
}
}
}

protected final void initDHCR213(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR213 = false;
} else {
DHCR213 = true;
}
}
}

protected final void initDHCR214(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR214 = false;
} else {
DHCR214 = true;
}
}
}

protected final void initDHCR215(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR215 = false;
} else {
DHCR215 = true;
}
}
}

protected final void initDHCR216(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR216 = false;
} else {
DHCR216 = true;
}
}
}

protected final void initDHCR217(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR217 = false;
} else {
DHCR217 = true;
}
}
}

protected final void initDHCR218(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR218 = false;
} else {
DHCR218 = true;
}
}
}

protected final void initDHCR219(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR219 = false;
} else {
DHCR219 = true;
}
}
}

protected final void initDHCR220(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR220 = false;
} else {
DHCR220 = true;
}
}
}

protected final void initDHCR24(String s) {
if (!s.trim().isEmpty()) {
DHCR24 = Byte.parseByte(s);
} else {
DHCR24 = Byte.MIN_VALUE;
}
}

protected final void initDHCR25(String s) {
if (!s.trim().isEmpty()) {
DHCR25 = Byte.parseByte(s);
} else {
DHCR25 = Byte.MIN_VALUE;
}
}

protected final void initDHCR26(String s) {
if (!s.trim().isEmpty()) {
DHCR26 = Byte.parseByte(s);
} else {
DHCR26 = Byte.MIN_VALUE;
}
}

protected final void initDHCR27(String s) {
if (!s.trim().isEmpty()) {
DHCR27 = Byte.parseByte(s);
} else {
DHCR27 = Byte.MIN_VALUE;
}
}

protected final void initDHCR28(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR28 = false;
} else {
DHCR28 = true;
}
}
}

protected final void initDHCR40(String s) {
if (!s.trim().isEmpty()) {
DHCR40 = Byte.parseByte(s);
} else {
DHCR40 = Byte.MIN_VALUE;
}
}

protected final void initDHCR41(String s) {
if (!s.trim().isEmpty()) {
DHCR41 = Byte.parseByte(s);
} else {
DHCR41 = Byte.MIN_VALUE;
}
}

protected final void initDHCR42(String s) {
if (!s.trim().isEmpty()) {
DHCR42 = Byte.parseByte(s);
} else {
DHCR42 = Byte.MIN_VALUE;
}
}

protected final void initDHCR43(String s) {
if (!s.trim().isEmpty()) {
DHCR43 = Byte.parseByte(s);
} else {
DHCR43 = Byte.MIN_VALUE;
}
}

protected final void initDHCR44(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR44 = false;
} else {
DHCR44 = true;
}
}
}

protected final void initDHCR56(String s) {
if (!s.trim().isEmpty()) {
DHCR56 = Byte.parseByte(s);
} else {
DHCR56 = Byte.MIN_VALUE;
}
}

protected final void initDHCR57(String s) {
if (!s.trim().isEmpty()) {
DHCR57 = Byte.parseByte(s);
} else {
DHCR57 = Byte.MIN_VALUE;
}
}

protected final void initDHCR58(String s) {
if (!s.trim().isEmpty()) {
DHCR58 = Byte.parseByte(s);
} else {
DHCR58 = Byte.MIN_VALUE;
}
}

protected final void initDHCR59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR59 = false;
} else {
DHCR59 = true;
}
}
}

protected final void initDHCR60(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR60 = false;
} else {
DHCR60 = true;
}
}
}

protected final void initDHCR72(String s) {
if (!s.trim().isEmpty()) {
DHCR72 = Byte.parseByte(s);
} else {
DHCR72 = Byte.MIN_VALUE;
}
}

protected final void initDHCR73(String s) {
if (!s.trim().isEmpty()) {
DHCR73 = Byte.parseByte(s);
} else {
DHCR73 = Byte.MIN_VALUE;
}
}

protected final void initDHCR74(String s) {
if (!s.trim().isEmpty()) {
DHCR74 = Byte.parseByte(s);
} else {
DHCR74 = Byte.MIN_VALUE;
}
}

protected final void initDHCR75(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR75 = false;
} else {
DHCR75 = true;
}
}
}

protected final void initDHCR76(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR76 = false;
} else {
DHCR76 = true;
}
}
}

protected final void initDHCR88(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR88 = false;
} else {
DHCR88 = true;
}
}
}

protected final void initDHCR89(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR89 = false;
} else {
DHCR89 = true;
}
}
}

protected final void initDHCR90(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR90 = false;
} else {
DHCR90 = true;
}
}
}

protected final void initDHCR91(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR91 = false;
} else {
DHCR91 = true;
}
}
}

protected final void initDHCR92(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR92 = false;
} else {
DHCR92 = true;
}
}
}

protected final void initDHCS14(String s) {
if (!s.trim().isEmpty()) {
DHCS14 = Byte.parseByte(s);
} else {
DHCS14 = Byte.MIN_VALUE;
}
}

protected final void initDHDOBC(String s) {
if (!s.trim().isEmpty()) {
DHDOBC = Byte.parseByte(s);
} else {
DHDOBC = Byte.MIN_VALUE;
}
}

protected final void initDHDOBYR(String s) {
if (!s.trim().isEmpty()) {
DHDOBYR = Short.parseShort(s);
} else {
DHDOBYR = Short.MIN_VALUE;
}
}

protected final void initDHPA10(String s) {
if (!s.trim().isEmpty()) {
DHPA10 = Byte.parseByte(s);
} else {
DHPA10 = Byte.MIN_VALUE;
}
}

protected final void initDHPA11(String s) {
if (!s.trim().isEmpty()) {
DHPA11 = Byte.parseByte(s);
} else {
DHPA11 = Byte.MIN_VALUE;
}
}

protected final void initDHPA12(String s) {
if (!s.trim().isEmpty()) {
DHPA12 = Byte.parseByte(s);
} else {
DHPA12 = Byte.MIN_VALUE;
}
}

protected final void initDHPA13(String s) {
if (!s.trim().isEmpty()) {
DHPA13 = Byte.parseByte(s);
} else {
DHPA13 = Byte.MIN_VALUE;
}
}

protected final void initDHPA14(String s) {
if (!s.trim().isEmpty()) {
DHPA14 = Byte.parseByte(s);
} else {
DHPA14 = Byte.MIN_VALUE;
}
}

protected final void initDHPA2(String s) {
if (!s.trim().isEmpty()) {
DHPA2 = Byte.parseByte(s);
} else {
DHPA2 = Byte.MIN_VALUE;
}
}

protected final void initDHPA3(String s) {
if (!s.trim().isEmpty()) {
DHPA3 = Byte.parseByte(s);
} else {
DHPA3 = Byte.MIN_VALUE;
}
}

protected final void initDHPA4(String s) {
if (!s.trim().isEmpty()) {
DHPA4 = Byte.parseByte(s);
} else {
DHPA4 = Byte.MIN_VALUE;
}
}

protected final void initDHPA5(String s) {
if (!s.trim().isEmpty()) {
DHPA5 = Byte.parseByte(s);
} else {
DHPA5 = Byte.MIN_VALUE;
}
}

protected final void initDHPA6(String s) {
if (!s.trim().isEmpty()) {
DHPA6 = Byte.parseByte(s);
} else {
DHPA6 = Byte.MIN_VALUE;
}
}

protected final void initDHPA7(String s) {
if (!s.trim().isEmpty()) {
DHPA7 = Byte.parseByte(s);
} else {
DHPA7 = Byte.MIN_VALUE;
}
}

protected final void initDHPA8(String s) {
if (!s.trim().isEmpty()) {
DHPA8 = Byte.parseByte(s);
} else {
DHPA8 = Byte.MIN_VALUE;
}
}

protected final void initDHPA9(String s) {
if (!s.trim().isEmpty()) {
DHPA9 = Byte.parseByte(s);
} else {
DHPA9 = Byte.MIN_VALUE;
}
}

protected final void initDHPB10(String s) {
if (!s.trim().isEmpty()) {
DHPB10 = Byte.parseByte(s);
} else {
DHPB10 = Byte.MIN_VALUE;
}
}

protected final void initDHPB11(String s) {
if (!s.trim().isEmpty()) {
DHPB11 = Byte.parseByte(s);
} else {
DHPB11 = Byte.MIN_VALUE;
}
}

protected final void initDHPB12(String s) {
if (!s.trim().isEmpty()) {
DHPB12 = Byte.parseByte(s);
} else {
DHPB12 = Byte.MIN_VALUE;
}
}

protected final void initDHPB13(String s) {
if (!s.trim().isEmpty()) {
DHPB13 = Byte.parseByte(s);
} else {
DHPB13 = Byte.MIN_VALUE;
}
}

protected final void initDHPB14(String s) {
if (!s.trim().isEmpty()) {
DHPB14 = Byte.parseByte(s);
} else {
DHPB14 = Byte.MIN_VALUE;
}
}

protected final void initDHPB2(String s) {
if (!s.trim().isEmpty()) {
DHPB2 = Byte.parseByte(s);
} else {
DHPB2 = Byte.MIN_VALUE;
}
}

protected final void initDHPB3(String s) {
if (!s.trim().isEmpty()) {
DHPB3 = Byte.parseByte(s);
} else {
DHPB3 = Byte.MIN_VALUE;
}
}

protected final void initDHPB4(String s) {
if (!s.trim().isEmpty()) {
DHPB4 = Byte.parseByte(s);
} else {
DHPB4 = Byte.MIN_VALUE;
}
}

protected final void initDHPB5(String s) {
if (!s.trim().isEmpty()) {
DHPB5 = Byte.parseByte(s);
} else {
DHPB5 = Byte.MIN_VALUE;
}
}

protected final void initDHPB6(String s) {
if (!s.trim().isEmpty()) {
DHPB6 = Byte.parseByte(s);
} else {
DHPB6 = Byte.MIN_VALUE;
}
}

protected final void initDHPB7(String s) {
if (!s.trim().isEmpty()) {
DHPB7 = Byte.parseByte(s);
} else {
DHPB7 = Byte.MIN_VALUE;
}
}

protected final void initDHPB8(String s) {
if (!s.trim().isEmpty()) {
DHPB8 = Byte.parseByte(s);
} else {
DHPB8 = Byte.MIN_VALUE;
}
}

protected final void initDHPB9(String s) {
if (!s.trim().isEmpty()) {
DHPB9 = Byte.parseByte(s);
} else {
DHPB9 = Byte.MIN_VALUE;
}
}

protected final void initDHSEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
DHSEX = false;
} else {
DHSEX = true;
}
}
}

protected final void initDHWORK(String s) {
if (!s.trim().isEmpty()) {
DHWORK = Byte.parseByte(s);
} else {
DHWORK = Byte.MIN_VALUE;
}
}

protected final void initDIAGR(String s) {
if (!s.trim().isEmpty()) {
DIAGR = Byte.parseByte(s);
} else {
DIAGR = Byte.MIN_VALUE;
}
}

protected final void initDIAS1(String s) {
if (!s.trim().isEmpty()) {
DIAS1 = Short.parseShort(s);
} else {
DIAS1 = Short.MIN_VALUE;
}
}

protected final void initDIAS2(String s) {
if (!s.trim().isEmpty()) {
DIAS2 = Short.parseShort(s);
} else {
DIAS2 = Short.MIN_VALUE;
}
}

protected final void initDIAS3(String s) {
if (!s.trim().isEmpty()) {
DIAS3 = Short.parseShort(s);
} else {
DIAS3 = Short.MIN_VALUE;
}
}

protected final void initDIAVAL(String s) {
if (!s.trim().isEmpty()) {
DIAVAL = Double.parseDouble(s);
} else {
DIAVAL = Double.NaN;
}
}

protected final void initDIDBNY(String s) {
if (!s.trim().isEmpty()) {
DIDBNY = Short.parseShort(s);
} else {
DIDBNY = Short.MIN_VALUE;
}
}

protected final void initDIDOB(String s) {
if (!s.trim().isEmpty()) {
DIDOB = Byte.parseByte(s);
} else {
DIDOB = Byte.MIN_VALUE;
}
}

protected final void initDIFBPC1(String s) {
if (!s.trim().isEmpty()) {
DIFBPC1 = Byte.parseByte(s);
} else {
DIFBPC1 = Byte.MIN_VALUE;
}
}

protected final void initDIFBPC2(String s) {
if (!s.trim().isEmpty()) {
DIFBPC2 = Byte.parseByte(s);
} else {
DIFBPC2 = Byte.MIN_VALUE;
}
}

protected final void initDIFBPC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DIFBPC3 = false;
} else {
DIFBPC3 = true;
}
}
}

protected final void initDIGNMYC(String s) {
if (!s.trim().isEmpty()) {
DIGNMYC = Byte.parseByte(s);
} else {
DIGNMYC = Byte.MIN_VALUE;
}
}

protected final void initDIKLIVC(String s) {
if (!s.trim().isEmpty()) {
DIKLIVC = Byte.parseByte(s);
} else {
DIKLIVC = Byte.MIN_VALUE;
}
}

protected final void initDIMAR(String s) {
if (!s.trim().isEmpty()) {
DIMAR = Byte.parseByte(s);
} else {
DIMAR = Byte.MIN_VALUE;
}
}

protected final void initDISEX(String s) {
if (!s.trim().isEmpty()) {
DISEX = Byte.parseByte(s);
} else {
DISEX = Byte.MIN_VALUE;
}
}

protected final void initDISEXC(String s) {
if (!s.trim().isEmpty()) {
DISEXC = Byte.parseByte(s);
} else {
DISEXC = Byte.MIN_VALUE;
}
}

protected final void initDISIBC(String s) {
if (!s.trim().isEmpty()) {
DISIBC = Byte.parseByte(s);
} else {
DISIBC = Byte.MIN_VALUE;
}
}

protected final void initDOBYEAR(String s) {
if (!s.trim().isEmpty()) {
DOBYEAR = Short.parseShort(s);
} else {
DOBYEAR = Short.MIN_VALUE;
}
}

protected final void initEHTCH(String s) {
if (!s.trim().isEmpty()) {
EHTCH = Byte.parseByte(s);
} else {
EHTCH = Byte.MIN_VALUE;
}
}

protected final void initEHTFT(String s) {
if (!s.trim().isEmpty()) {
EHTFT = Byte.parseByte(s);
} else {
EHTFT = Byte.MIN_VALUE;
}
}

protected final void initEHTIN(String s) {
if (!s.trim().isEmpty()) {
EHTIN = Byte.parseByte(s);
} else {
EHTIN = Byte.MIN_VALUE;
}
}

protected final void initEHTM(String s) {
if (!s.trim().isEmpty()) {
EHTM = Double.parseDouble(s);
} else {
EHTM = Double.NaN;
}
}

protected final void initERCAA(String s) {
if (!s.trim().isEmpty()) {
ERCAA = Byte.parseByte(s);
} else {
ERCAA = Byte.MIN_VALUE;
}
}

protected final void initERCAB1(String s) {
if (!s.trim().isEmpty()) {
ERCAB1 = Byte.parseByte(s);
} else {
ERCAB1 = Byte.MIN_VALUE;
}
}

protected final void initERCAB2(String s) {
if (!s.trim().isEmpty()) {
ERCAB2 = Byte.parseByte(s);
} else {
ERCAB2 = Byte.MIN_VALUE;
}
}

protected final void initERCAB3(String s) {
if (!s.trim().isEmpty()) {
ERCAB3 = Byte.parseByte(s);
} else {
ERCAB3 = Byte.MIN_VALUE;
}
}

protected final void initERCAB4(String s) {
if (!s.trim().isEmpty()) {
ERCAB4 = Byte.parseByte(s);
} else {
ERCAB4 = Byte.MIN_VALUE;
}
}

protected final void initERCAB5(String s) {
if (!s.trim().isEmpty()) {
ERCAB5 = Byte.parseByte(s);
} else {
ERCAB5 = Byte.MIN_VALUE;
}
}

protected final void initERCAC(String s) {
if (!s.trim().isEmpty()) {
ERCAC = Short.parseShort(s);
} else {
ERCAC = Short.MIN_VALUE;
}
}

protected final void initERCADP1(String s) {
if (!s.trim().isEmpty()) {
ERCADP1 = Byte.parseByte(s);
} else {
ERCADP1 = Byte.MIN_VALUE;
}
}

protected final void initERCADP2(String s) {
if (!s.trim().isEmpty()) {
ERCADP2 = Byte.parseByte(s);
} else {
ERCADP2 = Byte.MIN_VALUE;
}
}

protected final void initERCADP3(String s) {
if (!s.trim().isEmpty()) {
ERCADP3 = Byte.parseByte(s);
} else {
ERCADP3 = Byte.MIN_VALUE;
}
}

protected final void initERCADP4(String s) {
if (!s.trim().isEmpty()) {
ERCADP4 = Byte.parseByte(s);
} else {
ERCADP4 = Byte.MIN_VALUE;
}
}

protected final void initERCADP5(String s) {
if (!s.trim().isEmpty()) {
ERCADP5 = Byte.parseByte(s);
} else {
ERCADP5 = Byte.MIN_VALUE;
}
}

protected final void initERCALIV(String s) {
if (!s.trim().isEmpty()) {
ERCALIV = Byte.parseByte(s);
} else {
ERCALIV = Byte.MIN_VALUE;
}
}

protected final void initERCAM01(String s) {
if (!s.trim().isEmpty()) {
ERCAM01 = Byte.parseByte(s);
} else {
ERCAM01 = Byte.MIN_VALUE;
}
}

protected final void initERCAM02(String s) {
if (!s.trim().isEmpty()) {
ERCAM02 = Byte.parseByte(s);
} else {
ERCAM02 = Byte.MIN_VALUE;
}
}

protected final void initERCAM03(String s) {
if (!s.trim().isEmpty()) {
ERCAM03 = Byte.parseByte(s);
} else {
ERCAM03 = Byte.MIN_VALUE;
}
}

protected final void initERCAM04(String s) {
if (!s.trim().isEmpty()) {
ERCAM04 = Byte.parseByte(s);
} else {
ERCAM04 = Byte.MIN_VALUE;
}
}

protected final void initERCAM05(String s) {
if (!s.trim().isEmpty()) {
ERCAM05 = Byte.parseByte(s);
} else {
ERCAM05 = Byte.MIN_VALUE;
}
}

protected final void initERCANU1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
ERCANU1 = false;
} else {
ERCANU1 = true;
}
}
}

protected final void initERCANU2(String s) {
if (!s.trim().isEmpty()) {
ERCANU2 = Byte.parseByte(s);
} else {
ERCANU2 = Byte.MIN_VALUE;
}
}

protected final void initERCANU3(String s) {
if (!s.trim().isEmpty()) {
ERCANU3 = Byte.parseByte(s);
} else {
ERCANU3 = Byte.MIN_VALUE;
}
}

protected final void initERCANU4(String s) {
if (!s.trim().isEmpty()) {
ERCANU4 = Byte.parseByte(s);
} else {
ERCANU4 = Byte.MIN_VALUE;
}
}

protected final void initERCANU5(String s) {
if (!s.trim().isEmpty()) {
ERCANU5 = Byte.parseByte(s);
} else {
ERCANU5 = Byte.MIN_VALUE;
}
}

protected final void initERCANU6(String s) {
if (!s.trim().isEmpty()) {
ERCANU6 = Byte.parseByte(s);
} else {
ERCANU6 = Byte.MIN_VALUE;
}
}

protected final void initERCANU7(String s) {
if (!s.trim().isEmpty()) {
ERCANU7 = Byte.parseByte(s);
} else {
ERCANU7 = Byte.MIN_VALUE;
}
}

protected final void initERCANU8(String s) {
if (!s.trim().isEmpty()) {
ERCANU8 = Byte.parseByte(s);
} else {
ERCANU8 = Byte.MIN_VALUE;
}
}

protected final void initERCARA(String s) {
if (!s.trim().isEmpty()) {
ERCARA = Byte.parseByte(s);
} else {
ERCARA = Byte.MIN_VALUE;
}
}

protected final void initERCARB(String s) {
if (!s.trim().isEmpty()) {
ERCARB = Byte.parseByte(s);
} else {
ERCARB = Byte.MIN_VALUE;
}
}

protected final void initERMOTC1(String s) {
if (!s.trim().isEmpty()) {
ERMOTC1 = Byte.parseByte(s);
} else {
ERMOTC1 = Byte.MIN_VALUE;
}
}

protected final void initERMOTC2(String s) {
if (!s.trim().isEmpty()) {
ERMOTC2 = Byte.parseByte(s);
} else {
ERMOTC2 = Byte.MIN_VALUE;
}
}

protected final void initERMOTC3(String s) {
if (!s.trim().isEmpty()) {
ERMOTC3 = Byte.parseByte(s);
} else {
ERMOTC3 = Byte.MIN_VALUE;
}
}

protected final void initERMOTC4(String s) {
if (!s.trim().isEmpty()) {
ERMOTC4 = Byte.parseByte(s);
} else {
ERMOTC4 = Byte.MIN_VALUE;
}
}

protected final void initERMOTC5(String s) {
if (!s.trim().isEmpty()) {
ERMOTC5 = Byte.parseByte(s);
} else {
ERMOTC5 = Byte.MIN_VALUE;
}
}

protected final void initERMOTC6(String s) {
if (!s.trim().isEmpty()) {
ERMOTC6 = Byte.parseByte(s);
} else {
ERMOTC6 = Byte.MIN_VALUE;
}
}

protected final void initERMOTC7(String s) {
if (!s.trim().isEmpty()) {
ERMOTC7 = Byte.parseByte(s);
} else {
ERMOTC7 = Byte.MIN_VALUE;
}
}

protected final void initERMOTV1(String s) {
if (!s.trim().isEmpty()) {
ERMOTV1 = Byte.parseByte(s);
} else {
ERMOTV1 = Byte.MIN_VALUE;
}
}

protected final void initERMOTV2(String s) {
if (!s.trim().isEmpty()) {
ERMOTV2 = Byte.parseByte(s);
} else {
ERMOTV2 = Byte.MIN_VALUE;
}
}

protected final void initERMOTV3(String s) {
if (!s.trim().isEmpty()) {
ERMOTV3 = Byte.parseByte(s);
} else {
ERMOTV3 = Byte.MIN_VALUE;
}
}

protected final void initERMOTV4(String s) {
if (!s.trim().isEmpty()) {
ERMOTV4 = Byte.parseByte(s);
} else {
ERMOTV4 = Byte.MIN_VALUE;
}
}

protected final void initERMOTV5(String s) {
if (!s.trim().isEmpty()) {
ERMOTV5 = Byte.parseByte(s);
} else {
ERMOTV5 = Byte.MIN_VALUE;
}
}

protected final void initERMOTV6(String s) {
if (!s.trim().isEmpty()) {
ERMOTV6 = Byte.parseByte(s);
} else {
ERMOTV6 = Byte.MIN_VALUE;
}
}

protected final void initERMOTV7(String s) {
if (!s.trim().isEmpty()) {
ERMOTV7 = Byte.parseByte(s);
} else {
ERMOTV7 = Byte.MIN_VALUE;
}
}

protected final void initERMOTV8(String s) {
if (!s.trim().isEmpty()) {
ERMOTV8 = Byte.parseByte(s);
} else {
ERMOTV8 = Byte.MIN_VALUE;
}
}

protected final void initERTOTCN(String s) {
if (!s.trim().isEmpty()) {
ERTOTCN = Byte.parseByte(s);
} else {
ERTOTCN = Byte.MIN_VALUE;
}
}

protected final void initERVOLA(String s) {
if (!s.trim().isEmpty()) {
ERVOLA = Byte.parseByte(s);
} else {
ERVOLA = Byte.MIN_VALUE;
}
}

protected final void initERVOLB(String s) {
if (!s.trim().isEmpty()) {
ERVOLB = Byte.parseByte(s);
} else {
ERVOLB = Byte.MIN_VALUE;
}
}

protected final void initESTHT(String s) {
if (!s.trim().isEmpty()) {
ESTHT = Double.parseDouble(s);
} else {
ESTHT = Double.NaN;
}
}

protected final void initESTWT(String s) {
if (!s.trim().isEmpty()) {
ESTWT = Double.parseDouble(s);
} else {
ESTWT = Double.NaN;
}
}

protected final void initEWTCH(String s) {
if (!s.trim().isEmpty()) {
EWTCH = Byte.parseByte(s);
} else {
EWTCH = Byte.MIN_VALUE;
}
}

protected final void initEWTKG(String s) {
if (!s.trim().isEmpty()) {
EWTKG = Double.parseDouble(s);
} else {
EWTKG = Double.NaN;
}
}

protected final void initEWTL(String s) {
if (!s.trim().isEmpty()) {
EWTL = Byte.parseByte(s);
} else {
EWTL = Byte.MIN_VALUE;
}
}

protected final void initEWTST(String s) {
if (!s.trim().isEmpty()) {
EWTST = Byte.parseByte(s);
} else {
EWTST = Byte.MIN_VALUE;
}
}

protected final void initEXMOVHA(String s) {
if (!s.trim().isEmpty()) {
EXMOVHA = Byte.parseByte(s);
} else {
EXMOVHA = Byte.MIN_VALUE;
}
}

protected final void initEXMOVNB(String s) {
if (!s.trim().isEmpty()) {
EXMOVNB = Byte.parseByte(s);
} else {
EXMOVNB = Byte.MIN_VALUE;
}
}

protected final void initEXNEGA1(String s) {
if (!s.trim().isEmpty()) {
EXNEGA1 = Byte.parseByte(s);
} else {
EXNEGA1 = Byte.MIN_VALUE;
}
}

protected final void initEXNEGA2(String s) {
if (!s.trim().isEmpty()) {
EXNEGA2 = Byte.parseByte(s);
} else {
EXNEGA2 = Byte.MIN_VALUE;
}
}

protected final void initEXNEGA3(String s) {
if (!s.trim().isEmpty()) {
EXNEGA3 = Byte.parseByte(s);
} else {
EXNEGA3 = Byte.MIN_VALUE;
}
}

protected final void initEXNEGA4(String s) {
if (!s.trim().isEmpty()) {
EXNEGA4 = Byte.parseByte(s);
} else {
EXNEGA4 = Byte.MIN_VALUE;
}
}

protected final void initEXNEGA5(String s) {
if (!s.trim().isEmpty()) {
EXNEGA5 = Byte.parseByte(s);
} else {
EXNEGA5 = Byte.MIN_VALUE;
}
}

protected final void initEXNEGA6(String s) {
if (!s.trim().isEmpty()) {
EXNEGA6 = Byte.parseByte(s);
} else {
EXNEGA6 = Byte.MIN_VALUE;
}
}

protected final void initEXNEGA7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
EXNEGA7 = false;
} else {
EXNEGA7 = true;
}
}
}

protected final void initEXPLAN(String s) {
if (!s.trim().isEmpty()) {
EXPLAN = Byte.parseByte(s);
} else {
EXPLAN = Byte.MIN_VALUE;
}
}

protected final void initEXPOSA1(String s) {
if (!s.trim().isEmpty()) {
EXPOSA1 = Byte.parseByte(s);
} else {
EXPOSA1 = Byte.MIN_VALUE;
}
}

protected final void initEXPOSA2(String s) {
if (!s.trim().isEmpty()) {
EXPOSA2 = Byte.parseByte(s);
} else {
EXPOSA2 = Byte.MIN_VALUE;
}
}

protected final void initEXPOSA3(String s) {
if (!s.trim().isEmpty()) {
EXPOSA3 = Byte.parseByte(s);
} else {
EXPOSA3 = Byte.MIN_VALUE;
}
}

protected final void initEXPOSA4(String s) {
if (!s.trim().isEmpty()) {
EXPOSA4 = Byte.parseByte(s);
} else {
EXPOSA4 = Byte.MIN_VALUE;
}
}

protected final void initEXPOSA5(String s) {
if (!s.trim().isEmpty()) {
EXPOSA5 = Byte.parseByte(s);
} else {
EXPOSA5 = Byte.MIN_VALUE;
}
}

protected final void initEXPOSA6(String s) {
if (!s.trim().isEmpty()) {
EXPOSA6 = Byte.parseByte(s);
} else {
EXPOSA6 = Byte.MIN_VALUE;
}
}

protected final void initEXPOSA7(String s) {
if (!s.trim().isEmpty()) {
EXPOSA7 = Byte.parseByte(s);
} else {
EXPOSA7 = Byte.MIN_VALUE;
}
}

protected final void initEXPWF(String s) {
if (!s.trim().isEmpty()) {
EXPWF = Byte.parseByte(s);
} else {
EXPWF = Byte.MIN_VALUE;
}
}

protected final void initEXRELA(String s) {
if (!s.trim().isEmpty()) {
EXRELA = Byte.parseByte(s);
} else {
EXRELA = Byte.MIN_VALUE;
}
}

protected final void initEXRELB(String s) {
if (!s.trim().isEmpty()) {
EXRELB = Byte.parseByte(s);
} else {
EXRELB = Byte.MIN_VALUE;
}
}

protected final void initEXRELC(String s) {
if (!s.trim().isEmpty()) {
EXRELC = Byte.parseByte(s);
} else {
EXRELC = Byte.MIN_VALUE;
}
}

protected final void initEXRELD(String s) {
if (!s.trim().isEmpty()) {
EXRELD = Byte.parseByte(s);
} else {
EXRELD = Byte.MIN_VALUE;
}
}

protected final void initEXRELE1(String s) {
if (!s.trim().isEmpty()) {
EXRELE1 = Byte.parseByte(s);
} else {
EXRELE1 = Byte.MIN_VALUE;
}
}

protected final void initEXRELE2(String s) {
if (!s.trim().isEmpty()) {
EXRELE2 = Byte.parseByte(s);
} else {
EXRELE2 = Byte.MIN_VALUE;
}
}

protected final void initEXRELE3(String s) {
if (!s.trim().isEmpty()) {
EXRELE3 = Byte.parseByte(s);
} else {
EXRELE3 = Byte.MIN_VALUE;
}
}

protected final void initEXRELE4(String s) {
if (!s.trim().isEmpty()) {
EXRELE4 = Byte.parseByte(s);
} else {
EXRELE4 = Byte.MIN_VALUE;
}
}

protected final void initEXRELE5(String s) {
if (!s.trim().isEmpty()) {
EXRELE5 = Byte.parseByte(s);
} else {
EXRELE5 = Byte.MIN_VALUE;
}
}

protected final void initEXRELE6(String s) {
if (!s.trim().isEmpty()) {
EXRELE6 = Byte.parseByte(s);
} else {
EXRELE6 = Byte.MIN_VALUE;
}
}

protected final void initEXRELE7(String s) {
if (!s.trim().isEmpty()) {
EXRELE7 = Byte.parseByte(s);
} else {
EXRELE7 = Byte.MIN_VALUE;
}
}

protected final void initEXRELE8(String s) {
if (!s.trim().isEmpty()) {
EXRELE8 = Byte.parseByte(s);
} else {
EXRELE8 = Byte.MIN_VALUE;
}
}

protected final void initEXRELE9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
EXRELE9 = false;
} else {
EXRELE9 = true;
}
}
}

protected final void initEYESURG(String s) {
if (!s.trim().isEmpty()) {
EYESURG = Byte.parseByte(s);
} else {
EYESURG = Byte.MIN_VALUE;
}
}

protected final void initFASTASK(String s) {
if (!s.trim().isEmpty()) {
FASTASK = Byte.parseByte(s);
} else {
FASTASK = Byte.MIN_VALUE;
}
}

protected final void initFASTELI(String s) {
if (!s.trim().isEmpty()) {
FASTELI = Byte.parseByte(s);
} else {
FASTELI = Byte.MIN_VALUE;
}
}

protected final void initFASTHRS(String s) {
if (!s.trim().isEmpty()) {
FASTHRS = Byte.parseByte(s);
} else {
FASTHRS = Byte.MIN_VALUE;
}
}

protected final void initFEV1(String s) {
if (!s.trim().isEmpty()) {
FEV1 = Double.parseDouble(s);
} else {
FEV1 = Double.NaN;
}
}

protected final void initFEV2(String s) {
if (!s.trim().isEmpty()) {
FEV2 = Double.parseDouble(s);
} else {
FEV2 = Double.NaN;
}
}

protected final void initFEV3(String s) {
if (!s.trim().isEmpty()) {
FEV3 = Double.parseDouble(s);
} else {
FEV3 = Double.NaN;
}
}

protected final void initFFPROB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
FFPROB = false;
} else {
FFPROB = true;
}
}
}

protected final void initFGLU(String s) {
if (!s.trim().isEmpty()) {
FGLU = Double.parseDouble(s);
} else {
FGLU = Double.NaN;
}
}

protected final void initFINSTAT(String s) {
if (!s.trim().isEmpty()) {
FINSTAT = s;
}
}

protected final void initFIT(String s) {
if (!s.trim().isEmpty()) {
FIT = Byte.parseByte(s);
} else {
FIT = Byte.MIN_VALUE;
}
}

protected final void initFLOORC(String s) {
if (!s.trim().isEmpty()) {
FLOORC = Byte.parseByte(s);
} else {
FLOORC = Byte.MIN_VALUE;
}
}

protected final void initFQAQUA(String s) {
if (!s.trim().isEmpty()) {
FQAQUA = Byte.parseByte(s);
} else {
FQAQUA = Byte.MIN_VALUE;
}
}

protected final void initFQCBTHR(String s) {
if (!s.trim().isEmpty()) {
FQCBTHR = Byte.parseByte(s);
} else {
FQCBTHR = Byte.MIN_VALUE;
}
}

protected final void initFQCENG(String s) {
if (!s.trim().isEmpty()) {
FQCENG = Short.parseShort(s);
} else {
FQCENG = Short.MIN_VALUE;
}
}

protected final void initFQEND(String s) {
if (!s.trim().isEmpty()) {
FQEND = Byte.parseByte(s);
} else {
FQEND = Byte.MIN_VALUE;
}
}

protected final void initFQETHNR(String s) {
if (!s.trim().isEmpty()) {
FQETHNR = Byte.parseByte(s);
} else {
FQETHNR = Byte.MIN_VALUE;
}
}

protected final void initFQQUAL1(String s) {
if (!s.trim().isEmpty()) {
FQQUAL1 = Byte.parseByte(s);
} else {
FQQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUAL2(String s) {
if (!s.trim().isEmpty()) {
FQQUAL2 = Byte.parseByte(s);
} else {
FQQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUAL3(String s) {
if (!s.trim().isEmpty()) {
FQQUAL3 = Byte.parseByte(s);
} else {
FQQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initFQQUZM1(String s) {
if (!s.trim().isEmpty()) {
FQQUZM1 = Byte.parseByte(s);
} else {
FQQUZM1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUZM2(String s) {
if (!s.trim().isEmpty()) {
FQQUZM2 = Byte.parseByte(s);
} else {
FQQUZM2 = Byte.MIN_VALUE;
}
}

protected final void initFULL1(String s) {
if (!s.trim().isEmpty()) {
FULL1 = Byte.parseByte(s);
} else {
FULL1 = Byte.MIN_VALUE;
}
}

protected final void initFULL2(String s) {
if (!s.trim().isEmpty()) {
FULL2 = Byte.parseByte(s);
} else {
FULL2 = Byte.MIN_VALUE;
}
}

protected final void initFULL3(String s) {
if (!s.trim().isEmpty()) {
FULL3 = Byte.parseByte(s);
} else {
FULL3 = Byte.MIN_VALUE;
}
}

protected final void initFVC1(String s) {
if (!s.trim().isEmpty()) {
FVC1 = Double.parseDouble(s);
} else {
FVC1 = Double.NaN;
}
}

protected final void initFVC2(String s) {
if (!s.trim().isEmpty()) {
FVC2 = Double.parseDouble(s);
} else {
FVC2 = Double.NaN;
}
}

protected final void initFVC3(String s) {
if (!s.trim().isEmpty()) {
FVC3 = Double.parseDouble(s);
} else {
FVC3 = Double.NaN;
}
}

protected final void initGCINHH1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
GCINHH1 = false;
} else {
GCINHH1 = true;
}
}
}

protected final void initHASTRO(String s) {
if (!s.trim().isEmpty()) {
HASTRO = Byte.parseByte(s);
} else {
HASTRO = Byte.MIN_VALUE;
}
}

protected final void initHASURG(String s) {
if (!s.trim().isEmpty()) {
HASURG = Byte.parseByte(s);
} else {
HASURG = Byte.MIN_VALUE;
}
}

protected final void initHBA1C(String s) {
if (!s.trim().isEmpty()) {
HBA1C = Double.parseDouble(s);
} else {
HBA1C = Double.NaN;
}
}

protected final void initHDL(String s) {
if (!s.trim().isEmpty()) {
HDL = Double.parseDouble(s);
} else {
HDL = Double.NaN;
}
}

protected final void initHEACD(String s) {
if (!s.trim().isEmpty()) {
HEACD = Byte.parseByte(s);
} else {
HEACD = Byte.MIN_VALUE;
}
}

protected final void initHEACE(String s) {
if (!s.trim().isEmpty()) {
HEACE = Byte.parseByte(s);
} else {
HEACE = Byte.MIN_VALUE;
}
}

protected final void initHEACEA(String s) {
if (!s.trim().isEmpty()) {
HEACEA = Byte.parseByte(s);
} else {
HEACEA = Byte.MIN_VALUE;
}
}

protected final void initHEACEAC(String s) {
if (!s.trim().isEmpty()) {
HEACEAC = Byte.parseByte(s);
} else {
HEACEAC = Byte.MIN_VALUE;
}
}

protected final void initHEADA01(String s) {
if (!s.trim().isEmpty()) {
HEADA01 = Byte.parseByte(s);
} else {
HEADA01 = Byte.MIN_VALUE;
}
}

protected final void initHEADA02(String s) {
if (!s.trim().isEmpty()) {
HEADA02 = Byte.parseByte(s);
} else {
HEADA02 = Byte.MIN_VALUE;
}
}

protected final void initHEADA03(String s) {
if (!s.trim().isEmpty()) {
HEADA03 = Byte.parseByte(s);
} else {
HEADA03 = Byte.MIN_VALUE;
}
}

protected final void initHEADA04(String s) {
if (!s.trim().isEmpty()) {
HEADA04 = Byte.parseByte(s);
} else {
HEADA04 = Byte.MIN_VALUE;
}
}

protected final void initHEADA05(String s) {
if (!s.trim().isEmpty()) {
HEADA05 = Byte.parseByte(s);
} else {
HEADA05 = Byte.MIN_VALUE;
}
}

protected final void initHEADA06(String s) {
if (!s.trim().isEmpty()) {
HEADA06 = Byte.parseByte(s);
} else {
HEADA06 = Byte.MIN_VALUE;
}
}

protected final void initHEADA07(String s) {
if (!s.trim().isEmpty()) {
HEADA07 = Byte.parseByte(s);
} else {
HEADA07 = Byte.MIN_VALUE;
}
}

protected final void initHEADA08(String s) {
if (!s.trim().isEmpty()) {
HEADA08 = Byte.parseByte(s);
} else {
HEADA08 = Byte.MIN_VALUE;
}
}

protected final void initHEADA09(String s) {
if (!s.trim().isEmpty()) {
HEADA09 = Byte.parseByte(s);
} else {
HEADA09 = Byte.MIN_VALUE;
}
}

protected final void initHEADA10(String s) {
if (!s.trim().isEmpty()) {
HEADA10 = Byte.parseByte(s);
} else {
HEADA10 = Byte.MIN_VALUE;
}
}

protected final void initHEADB01(String s) {
if (!s.trim().isEmpty()) {
HEADB01 = Byte.parseByte(s);
} else {
HEADB01 = Byte.MIN_VALUE;
}
}

protected final void initHEADB02(String s) {
if (!s.trim().isEmpty()) {
HEADB02 = Byte.parseByte(s);
} else {
HEADB02 = Byte.MIN_VALUE;
}
}

protected final void initHEADB03(String s) {
if (!s.trim().isEmpty()) {
HEADB03 = Byte.parseByte(s);
} else {
HEADB03 = Byte.MIN_VALUE;
}
}

protected final void initHEADB04(String s) {
if (!s.trim().isEmpty()) {
HEADB04 = Byte.parseByte(s);
} else {
HEADB04 = Byte.MIN_VALUE;
}
}

protected final void initHEADB05(String s) {
if (!s.trim().isEmpty()) {
HEADB05 = Byte.parseByte(s);
} else {
HEADB05 = Byte.MIN_VALUE;
}
}

protected final void initHEADB06(String s) {
if (!s.trim().isEmpty()) {
HEADB06 = Byte.parseByte(s);
} else {
HEADB06 = Byte.MIN_VALUE;
}
}

protected final void initHEADB07(String s) {
if (!s.trim().isEmpty()) {
HEADB07 = Byte.parseByte(s);
} else {
HEADB07 = Byte.MIN_VALUE;
}
}

protected final void initHEADB08(String s) {
if (!s.trim().isEmpty()) {
HEADB08 = Byte.parseByte(s);
} else {
HEADB08 = Byte.MIN_VALUE;
}
}

protected final void initHEADB09(String s) {
if (!s.trim().isEmpty()) {
HEADB09 = Byte.parseByte(s);
} else {
HEADB09 = Byte.MIN_VALUE;
}
}

protected final void initHEADB10(String s) {
if (!s.trim().isEmpty()) {
HEADB10 = Byte.parseByte(s);
} else {
HEADB10 = Byte.MIN_VALUE;
}
}

protected final void initHEADB11(String s) {
if (!s.trim().isEmpty()) {
HEADB11 = Byte.parseByte(s);
} else {
HEADB11 = Byte.MIN_VALUE;
}
}

protected final void initHEADB12(String s) {
if (!s.trim().isEmpty()) {
HEADB12 = Byte.parseByte(s);
} else {
HEADB12 = Byte.MIN_VALUE;
}
}

protected final void initHEADB13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEADB13 = false;
} else {
HEADB13 = true;
}
}
}

protected final void initHEAGAR(String s) {
if (!s.trim().isEmpty()) {
HEAGAR = Byte.parseByte(s);
} else {
HEAGAR = Byte.MIN_VALUE;
}
}

protected final void initHEAGARY(String s) {
if (!s.trim().isEmpty()) {
HEAGARY = Short.parseShort(s);
} else {
HEAGARY = Short.MIN_VALUE;
}
}

protected final void initHEAGBR(String s) {
if (!s.trim().isEmpty()) {
HEAGBR = Byte.parseByte(s);
} else {
HEAGBR = Byte.MIN_VALUE;
}
}

protected final void initHEAGBRY(String s) {
if (!s.trim().isEmpty()) {
HEAGBRY = Short.parseShort(s);
} else {
HEAGBRY = Short.MIN_VALUE;
}
}

protected final void initHEAGCR(String s) {
if (!s.trim().isEmpty()) {
HEAGCR = Byte.parseByte(s);
} else {
HEAGCR = Byte.MIN_VALUE;
}
}

protected final void initHEAGCRY(String s) {
if (!s.trim().isEmpty()) {
HEAGCRY = Short.parseShort(s);
} else {
HEAGCRY = Short.MIN_VALUE;
}
}

protected final void initHEAGDR(String s) {
if (!s.trim().isEmpty()) {
HEAGDR = Byte.parseByte(s);
} else {
HEAGDR = Byte.MIN_VALUE;
}
}

protected final void initHEAGDRY(String s) {
if (!s.trim().isEmpty()) {
HEAGDRY = Short.parseShort(s);
} else {
HEAGDRY = Short.MIN_VALUE;
}
}

protected final void initHEAGER(String s) {
if (!s.trim().isEmpty()) {
HEAGER = Byte.parseByte(s);
} else {
HEAGER = Byte.MIN_VALUE;
}
}

protected final void initHEAGERY(String s) {
if (!s.trim().isEmpty()) {
HEAGERY = Short.parseShort(s);
} else {
HEAGERY = Short.MIN_VALUE;
}
}

protected final void initHEAGFR(String s) {
if (!s.trim().isEmpty()) {
HEAGFR = Byte.parseByte(s);
} else {
HEAGFR = Byte.MIN_VALUE;
}
}

protected final void initHEAGFRY(String s) {
if (!s.trim().isEmpty()) {
HEAGFRY = Short.parseShort(s);
} else {
HEAGFRY = Short.MIN_VALUE;
}
}

protected final void initHEAGG(String s) {
if (!s.trim().isEmpty()) {
HEAGG = Byte.parseByte(s);
} else {
HEAGG = Byte.MIN_VALUE;
}
}

protected final void initHEAGGR(String s) {
if (!s.trim().isEmpty()) {
HEAGGR = Byte.parseByte(s);
} else {
HEAGGR = Byte.MIN_VALUE;
}
}

protected final void initHEAGGRY(String s) {
if (!s.trim().isEmpty()) {
HEAGGRY = Short.parseShort(s);
} else {
HEAGGRY = Short.MIN_VALUE;
}
}

protected final void initHEAGH(String s) {
if (!s.trim().isEmpty()) {
HEAGH = Byte.parseByte(s);
} else {
HEAGH = Byte.MIN_VALUE;
}
}

protected final void initHEAGHR(String s) {
if (!s.trim().isEmpty()) {
HEAGHR = Byte.parseByte(s);
} else {
HEAGHR = Byte.MIN_VALUE;
}
}

protected final void initHEAGHRY(String s) {
if (!s.trim().isEmpty()) {
HEAGHRY = Short.parseShort(s);
} else {
HEAGHRY = Short.MIN_VALUE;
}
}

protected final void initHEAGIR(String s) {
if (!s.trim().isEmpty()) {
HEAGIR = Byte.parseByte(s);
} else {
HEAGIR = Byte.MIN_VALUE;
}
}

protected final void initHEAGIRY(String s) {
if (!s.trim().isEmpty()) {
HEAGIRY = Short.parseShort(s);
} else {
HEAGIRY = Short.MIN_VALUE;
}
}

protected final void initHEAGJR(String s) {
if (!s.trim().isEmpty()) {
HEAGJR = Byte.parseByte(s);
} else {
HEAGJR = Byte.MIN_VALUE;
}
}

protected final void initHEAGJRY(String s) {
if (!s.trim().isEmpty()) {
HEAGJRY = Short.parseShort(s);
} else {
HEAGJRY = Short.MIN_VALUE;
}
}

protected final void initHEAID1(String s) {
if (!s.trim().isEmpty()) {
HEAID1 = Byte.parseByte(s);
} else {
HEAID1 = Byte.MIN_VALUE;
}
}

protected final void initHEAID10(String s) {
if (!s.trim().isEmpty()) {
HEAID10 = Byte.parseByte(s);
} else {
HEAID10 = Byte.MIN_VALUE;
}
}

protected final void initHEAID11(String s) {
if (!s.trim().isEmpty()) {
HEAID11 = Byte.parseByte(s);
} else {
HEAID11 = Byte.MIN_VALUE;
}
}

protected final void initHEAID12(String s) {
if (!s.trim().isEmpty()) {
HEAID12 = Byte.parseByte(s);
} else {
HEAID12 = Byte.MIN_VALUE;
}
}

protected final void initHEAID17(String s) {
if (!s.trim().isEmpty()) {
HEAID17 = Byte.parseByte(s);
} else {
HEAID17 = Byte.MIN_VALUE;
}
}

protected final void initHEAID18(String s) {
if (!s.trim().isEmpty()) {
HEAID18 = Byte.parseByte(s);
} else {
HEAID18 = Byte.MIN_VALUE;
}
}

protected final void initHEAID19(String s) {
if (!s.trim().isEmpty()) {
HEAID19 = Byte.parseByte(s);
} else {
HEAID19 = Byte.MIN_VALUE;
}
}

protected final void initHEAID2(String s) {
if (!s.trim().isEmpty()) {
HEAID2 = Byte.parseByte(s);
} else {
HEAID2 = Byte.MIN_VALUE;
}
}

protected final void initHEAID20(String s) {
if (!s.trim().isEmpty()) {
HEAID20 = Byte.parseByte(s);
} else {
HEAID20 = Byte.MIN_VALUE;
}
}

protected final void initHEAID21(String s) {
if (!s.trim().isEmpty()) {
HEAID21 = Byte.parseByte(s);
} else {
HEAID21 = Byte.MIN_VALUE;
}
}

protected final void initHEAID22(String s) {
if (!s.trim().isEmpty()) {
HEAID22 = Byte.parseByte(s);
} else {
HEAID22 = Byte.MIN_VALUE;
}
}

protected final void initHEAID3(String s) {
if (!s.trim().isEmpty()) {
HEAID3 = Byte.parseByte(s);
} else {
HEAID3 = Byte.MIN_VALUE;
}
}

protected final void initHEAID4(String s) {
if (!s.trim().isEmpty()) {
HEAID4 = Byte.parseByte(s);
} else {
HEAID4 = Byte.MIN_VALUE;
}
}

protected final void initHEAID5(String s) {
if (!s.trim().isEmpty()) {
HEAID5 = Byte.parseByte(s);
} else {
HEAID5 = Byte.MIN_VALUE;
}
}

protected final void initHEAID9(String s) {
if (!s.trim().isEmpty()) {
HEAID9 = Byte.parseByte(s);
} else {
HEAID9 = Byte.MIN_VALUE;
}
}

protected final void initHEAIDC(String s) {
if (!s.trim().isEmpty()) {
HEAIDC = Byte.parseByte(s);
} else {
HEAIDC = Byte.MIN_VALUE;
}
}

protected final void initHEAIDC2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEAIDC2 = false;
} else {
HEAIDC2 = true;
}
}
}

protected final void initHEAIDC3(String s) {
if (!s.trim().isEmpty()) {
HEAIDC3 = Byte.parseByte(s);
} else {
HEAIDC3 = Byte.MIN_VALUE;
}
}

protected final void initHEAIN01(String s) {
if (!s.trim().isEmpty()) {
HEAIN01 = Byte.parseByte(s);
} else {
HEAIN01 = Byte.MIN_VALUE;
}
}

protected final void initHEAIN05(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEAIN05 = false;
} else {
HEAIN05 = true;
}
}
}

protected final void initHEAIN06(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEAIN06 = false;
} else {
HEAIN06 = true;
}
}
}

protected final void initHEAIN07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEAIN07 = false;
} else {
HEAIN07 = true;
}
}
}

protected final void initHEAIN19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEAIN19 = false;
} else {
HEAIN19 = true;
}
}
}

protected final void initHEAIW01(String s) {
if (!s.trim().isEmpty()) {
HEAIW01 = Byte.parseByte(s);
} else {
HEAIW01 = Byte.MIN_VALUE;
}
}

protected final void initHEAIW17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEAIW17 = false;
} else {
HEAIW17 = true;
}
}
}

protected final void initHEANA(String s) {
if (!s.trim().isEmpty()) {
HEANA = Byte.parseByte(s);
} else {
HEANA = Byte.MIN_VALUE;
}
}

protected final void initHEANB(String s) {
if (!s.trim().isEmpty()) {
HEANB = Byte.parseByte(s);
} else {
HEANB = Byte.MIN_VALUE;
}
}

protected final void initHEANC(String s) {
if (!s.trim().isEmpty()) {
HEANC = Byte.parseByte(s);
} else {
HEANC = Byte.MIN_VALUE;
}
}

protected final void initHEAND(String s) {
if (!s.trim().isEmpty()) {
HEAND = Byte.parseByte(s);
} else {
HEAND = Byte.MIN_VALUE;
}
}

protected final void initHEANE(String s) {
if (!s.trim().isEmpty()) {
HEANE = Byte.parseByte(s);
} else {
HEANE = Byte.MIN_VALUE;
}
}

protected final void initHEANF(String s) {
if (!s.trim().isEmpty()) {
HEANF = Byte.parseByte(s);
} else {
HEANF = Byte.MIN_VALUE;
}
}

protected final void initHEANG(String s) {
if (!s.trim().isEmpty()) {
HEANG = Byte.parseByte(s);
} else {
HEANG = Byte.MIN_VALUE;
}
}

protected final void initHEANH(String s) {
if (!s.trim().isEmpty()) {
HEANH = Byte.parseByte(s);
} else {
HEANH = Byte.MIN_VALUE;
}
}

protected final void initHEANI1(String s) {
if (!s.trim().isEmpty()) {
HEANI1 = Byte.parseByte(s);
} else {
HEANI1 = Byte.MIN_VALUE;
}
}

protected final void initHEANI2(String s) {
if (!s.trim().isEmpty()) {
HEANI2 = Byte.parseByte(s);
} else {
HEANI2 = Byte.MIN_VALUE;
}
}

protected final void initHEANI3(String s) {
if (!s.trim().isEmpty()) {
HEANI3 = Byte.parseByte(s);
} else {
HEANI3 = Byte.MIN_VALUE;
}
}

protected final void initHEANI4(String s) {
if (!s.trim().isEmpty()) {
HEANI4 = Byte.parseByte(s);
} else {
HEANI4 = Byte.MIN_VALUE;
}
}

protected final void initHEANI5(String s) {
if (!s.trim().isEmpty()) {
HEANI5 = Byte.parseByte(s);
} else {
HEANI5 = Byte.MIN_VALUE;
}
}

protected final void initHEANI6(String s) {
if (!s.trim().isEmpty()) {
HEANI6 = Byte.parseByte(s);
} else {
HEANI6 = Byte.MIN_VALUE;
}
}

protected final void initHEANIM1(String s) {
if (!s.trim().isEmpty()) {
HEANIM1 = Byte.parseByte(s);
} else {
HEANIM1 = Byte.MIN_VALUE;
}
}

protected final void initHEANIM2(String s) {
if (!s.trim().isEmpty()) {
HEANIM2 = Byte.parseByte(s);
} else {
HEANIM2 = Byte.MIN_VALUE;
}
}

protected final void initHEANIM3(String s) {
if (!s.trim().isEmpty()) {
HEANIM3 = Byte.parseByte(s);
} else {
HEANIM3 = Byte.MIN_VALUE;
}
}

protected final void initHEANIM4(String s) {
if (!s.trim().isEmpty()) {
HEANIM4 = Byte.parseByte(s);
} else {
HEANIM4 = Byte.MIN_VALUE;
}
}

protected final void initHEANIM5(String s) {
if (!s.trim().isEmpty()) {
HEANIM5 = Byte.parseByte(s);
} else {
HEANIM5 = Byte.MIN_VALUE;
}
}

protected final void initHEANIM6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEANIM6 = false;
} else {
HEANIM6 = true;
}
}
}

protected final void initHEANK(String s) {
if (!s.trim().isEmpty()) {
HEANK = Byte.parseByte(s);
} else {
HEANK = Byte.MIN_VALUE;
}
}

protected final void initHEANL(String s) {
if (!s.trim().isEmpty()) {
HEANL = Byte.parseByte(s);
} else {
HEANL = Byte.MIN_VALUE;
}
}

protected final void initHEART1(String s) {
if (!s.trim().isEmpty()) {
HEART1 = Byte.parseByte(s);
} else {
HEART1 = Byte.MIN_VALUE;
}
}

protected final void initHEART2(String s) {
if (!s.trim().isEmpty()) {
HEART2 = Byte.parseByte(s);
} else {
HEART2 = Byte.MIN_VALUE;
}
}

protected final void initHEARTA(String s) {
if (!s.trim().isEmpty()) {
HEARTA = Byte.parseByte(s);
} else {
HEARTA = Byte.MIN_VALUE;
}
}

protected final void initHEARTB(String s) {
if (!s.trim().isEmpty()) {
HEARTB = Byte.parseByte(s);
} else {
HEARTB = Byte.MIN_VALUE;
}
}

protected final void initHEARTC(String s) {
if (!s.trim().isEmpty()) {
HEARTC = Byte.parseByte(s);
} else {
HEARTC = Byte.MIN_VALUE;
}
}

protected final void initHEARTD(String s) {
if (!s.trim().isEmpty()) {
HEARTD = Byte.parseByte(s);
} else {
HEARTD = Byte.MIN_VALUE;
}
}

protected final void initHEARTE(String s) {
if (!s.trim().isEmpty()) {
HEARTE = Byte.parseByte(s);
} else {
HEARTE = Byte.MIN_VALUE;
}
}

protected final void initHEATA(String s) {
if (!s.trim().isEmpty()) {
HEATA = Byte.parseByte(s);
} else {
HEATA = Byte.MIN_VALUE;
}
}

protected final void initHEATT01(String s) {
if (!s.trim().isEmpty()) {
HEATT01 = Byte.parseByte(s);
} else {
HEATT01 = Byte.MIN_VALUE;
}
}

protected final void initHEATT02(String s) {
if (!s.trim().isEmpty()) {
HEATT02 = Byte.parseByte(s);
} else {
HEATT02 = Byte.MIN_VALUE;
}
}

protected final void initHEATT03(String s) {
if (!s.trim().isEmpty()) {
HEATT03 = Byte.parseByte(s);
} else {
HEATT03 = Byte.MIN_VALUE;
}
}

protected final void initHEATT04(String s) {
if (!s.trim().isEmpty()) {
HEATT04 = Byte.parseByte(s);
} else {
HEATT04 = Byte.MIN_VALUE;
}
}

protected final void initHEATT05(String s) {
if (!s.trim().isEmpty()) {
HEATT05 = Byte.parseByte(s);
} else {
HEATT05 = Byte.MIN_VALUE;
}
}

protected final void initHEATT06(String s) {
if (!s.trim().isEmpty()) {
HEATT06 = Byte.parseByte(s);
} else {
HEATT06 = Byte.MIN_VALUE;
}
}

protected final void initHEATT07(String s) {
if (!s.trim().isEmpty()) {
HEATT07 = Byte.parseByte(s);
} else {
HEATT07 = Byte.MIN_VALUE;
}
}

protected final void initHEATT08(String s) {
if (!s.trim().isEmpty()) {
HEATT08 = Byte.parseByte(s);
} else {
HEATT08 = Byte.MIN_VALUE;
}
}

protected final void initHEATT09(String s) {
if (!s.trim().isEmpty()) {
HEATT09 = Byte.parseByte(s);
} else {
HEATT09 = Byte.MIN_VALUE;
}
}

protected final void initHEATT10(String s) {
if (!s.trim().isEmpty()) {
HEATT10 = Byte.parseByte(s);
} else {
HEATT10 = Byte.MIN_VALUE;
}
}

protected final void initHEATT11(String s) {
if (!s.trim().isEmpty()) {
HEATT11 = Byte.parseByte(s);
} else {
HEATT11 = Byte.MIN_VALUE;
}
}

protected final void initHEATT12(String s) {
if (!s.trim().isEmpty()) {
HEATT12 = Byte.parseByte(s);
} else {
HEATT12 = Byte.MIN_VALUE;
}
}

protected final void initHEATT13(String s) {
if (!s.trim().isEmpty()) {
HEATT13 = Byte.parseByte(s);
} else {
HEATT13 = Byte.MIN_VALUE;
}
}

protected final void initHEATT14(String s) {
if (!s.trim().isEmpty()) {
HEATT14 = Byte.parseByte(s);
} else {
HEATT14 = Byte.MIN_VALUE;
}
}

protected final void initHEAVOID(String s) {
if (!s.trim().isEmpty()) {
HEAVOID = Byte.parseByte(s);
} else {
HEAVOID = Byte.MIN_VALUE;
}
}

protected final void initHEBAL(String s) {
if (!s.trim().isEmpty()) {
HEBAL = Byte.parseByte(s);
} else {
HEBAL = Byte.MIN_VALUE;
}
}

protected final void initHEBALA1(String s) {
if (!s.trim().isEmpty()) {
HEBALA1 = Byte.parseByte(s);
} else {
HEBALA1 = Byte.MIN_VALUE;
}
}

protected final void initHEBALA2(String s) {
if (!s.trim().isEmpty()) {
HEBALA2 = Byte.parseByte(s);
} else {
HEBALA2 = Byte.MIN_VALUE;
}
}

protected final void initHEBALB1(String s) {
if (!s.trim().isEmpty()) {
HEBALB1 = Byte.parseByte(s);
} else {
HEBALB1 = Byte.MIN_VALUE;
}
}

protected final void initHEBALB2(String s) {
if (!s.trim().isEmpty()) {
HEBALB2 = Byte.parseByte(s);
} else {
HEBALB2 = Byte.MIN_VALUE;
}
}

protected final void initHEBALC1(String s) {
if (!s.trim().isEmpty()) {
HEBALC1 = Byte.parseByte(s);
} else {
HEBALC1 = Byte.MIN_VALUE;
}
}

protected final void initHEBALC2(String s) {
if (!s.trim().isEmpty()) {
HEBALC2 = Byte.parseByte(s);
} else {
HEBALC2 = Byte.MIN_VALUE;
}
}

protected final void initHEBETA(String s) {
if (!s.trim().isEmpty()) {
HEBETA = Byte.parseByte(s);
} else {
HEBETA = Byte.MIN_VALUE;
}
}

protected final void initHEBETB(String s) {
if (!s.trim().isEmpty()) {
HEBETB = Byte.parseByte(s);
} else {
HEBETB = Byte.MIN_VALUE;
}
}

protected final void initHEBETBC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEBETBC = false;
} else {
HEBETBC = true;
}
}
}

protected final void initHEBPCHK(String s) {
if (!s.trim().isEmpty()) {
HEBPCHK = Byte.parseByte(s);
} else {
HEBPCHK = Byte.MIN_VALUE;
}
}

protected final void initHECANA(String s) {
if (!s.trim().isEmpty()) {
HECANA = Byte.parseByte(s);
} else {
HECANA = Byte.MIN_VALUE;
}
}

protected final void initHECDA(String s) {
if (!s.trim().isEmpty()) {
HECDA = Byte.parseByte(s);
} else {
HECDA = Byte.MIN_VALUE;
}
}

protected final void initHECDB(String s) {
if (!s.trim().isEmpty()) {
HECDB = Byte.parseByte(s);
} else {
HECDB = Byte.MIN_VALUE;
}
}

protected final void initHECDC(String s) {
if (!s.trim().isEmpty()) {
HECDC = Byte.parseByte(s);
} else {
HECDC = Byte.MIN_VALUE;
}
}

protected final void initHECDD(String s) {
if (!s.trim().isEmpty()) {
HECDD = Byte.parseByte(s);
} else {
HECDD = Byte.MIN_VALUE;
}
}

protected final void initHECDE(String s) {
if (!s.trim().isEmpty()) {
HECDE = Byte.parseByte(s);
} else {
HECDE = Byte.MIN_VALUE;
}
}

protected final void initHECDF1(String s) {
if (!s.trim().isEmpty()) {
HECDF1 = Byte.parseByte(s);
} else {
HECDF1 = Byte.MIN_VALUE;
}
}

protected final void initHECDF2(String s) {
if (!s.trim().isEmpty()) {
HECDF2 = Byte.parseByte(s);
} else {
HECDF2 = Byte.MIN_VALUE;
}
}

protected final void initHECDF3(String s) {
if (!s.trim().isEmpty()) {
HECDF3 = Byte.parseByte(s);
} else {
HECDF3 = Byte.MIN_VALUE;
}
}

protected final void initHECGNIC(String s) {
if (!s.trim().isEmpty()) {
HECGNIC = Byte.parseByte(s);
} else {
HECGNIC = Byte.MIN_VALUE;
}
}

protected final void initHECGSTA(String s) {
if (!s.trim().isEmpty()) {
HECGSTA = Byte.parseByte(s);
} else {
HECGSTA = Byte.MIN_VALUE;
}
}

protected final void initHECGSTP(String s) {
if (!s.trim().isEmpty()) {
HECGSTP = Byte.parseByte(s);
} else {
HECGSTP = Byte.MIN_VALUE;
}
}

protected final void initHECHOA(String s) {
if (!s.trim().isEmpty()) {
HECHOA = Byte.parseByte(s);
} else {
HECHOA = Byte.MIN_VALUE;
}
}

protected final void initHECHOA2(String s) {
if (!s.trim().isEmpty()) {
HECHOA2 = Byte.parseByte(s);
} else {
HECHOA2 = Byte.MIN_VALUE;
}
}

protected final void initHECHOL(String s) {
if (!s.trim().isEmpty()) {
HECHOL = Byte.parseByte(s);
} else {
HECHOL = Byte.MIN_VALUE;
}
}

protected final void initHECHOL2(String s) {
if (!s.trim().isEmpty()) {
HECHOL2 = Byte.parseByte(s);
} else {
HECHOL2 = Byte.MIN_VALUE;
}
}

protected final void initHECHOLB(String s) {
if (!s.trim().isEmpty()) {
HECHOLB = Byte.parseByte(s);
} else {
HECHOLB = Byte.MIN_VALUE;
}
}

protected final void initHECHOLC(String s) {
if (!s.trim().isEmpty()) {
HECHOLC = Byte.parseByte(s);
} else {
HECHOLC = Byte.MIN_VALUE;
}
}

protected final void initHEDIA(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIA = false;
} else {
HEDIA = true;
}
}
}

protected final void initHEDIA01(String s) {
if (!s.trim().isEmpty()) {
HEDIA01 = Byte.parseByte(s);
} else {
HEDIA01 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA02(String s) {
if (!s.trim().isEmpty()) {
HEDIA02 = Byte.parseByte(s);
} else {
HEDIA02 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA03(String s) {
if (!s.trim().isEmpty()) {
HEDIA03 = Byte.parseByte(s);
} else {
HEDIA03 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA04(String s) {
if (!s.trim().isEmpty()) {
HEDIA04 = Byte.parseByte(s);
} else {
HEDIA04 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA05(String s) {
if (!s.trim().isEmpty()) {
HEDIA05 = Byte.parseByte(s);
} else {
HEDIA05 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA06(String s) {
if (!s.trim().isEmpty()) {
HEDIA06 = Byte.parseByte(s);
} else {
HEDIA06 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA07(String s) {
if (!s.trim().isEmpty()) {
HEDIA07 = Byte.parseByte(s);
} else {
HEDIA07 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIA08 = false;
} else {
HEDIA08 = true;
}
}
}

protected final void initHEDIA09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIA09 = false;
} else {
HEDIA09 = true;
}
}
}

protected final void initHEDIAC1(String s) {
if (!s.trim().isEmpty()) {
HEDIAC1 = Byte.parseByte(s);
} else {
HEDIAC1 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAC2(String s) {
if (!s.trim().isEmpty()) {
HEDIAC2 = Byte.parseByte(s);
} else {
HEDIAC2 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAC3(String s) {
if (!s.trim().isEmpty()) {
HEDIAC3 = Byte.parseByte(s);
} else {
HEDIAC3 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAC4(String s) {
if (!s.trim().isEmpty()) {
HEDIAC4 = Byte.parseByte(s);
} else {
HEDIAC4 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAC5(String s) {
if (!s.trim().isEmpty()) {
HEDIAC5 = Byte.parseByte(s);
} else {
HEDIAC5 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAC6(String s) {
if (!s.trim().isEmpty()) {
HEDIAC6 = Byte.parseByte(s);
} else {
HEDIAC6 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAC7(String s) {
if (!s.trim().isEmpty()) {
HEDIAC7 = Byte.parseByte(s);
} else {
HEDIAC7 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAC8(String s) {
if (!s.trim().isEmpty()) {
HEDIAC8 = Byte.parseByte(s);
} else {
HEDIAC8 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAC9(String s) {
if (!s.trim().isEmpty()) {
HEDIAC9 = Byte.parseByte(s);
} else {
HEDIAC9 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAD1(String s) {
if (!s.trim().isEmpty()) {
HEDIAD1 = Byte.parseByte(s);
} else {
HEDIAD1 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAD2(String s) {
if (!s.trim().isEmpty()) {
HEDIAD2 = Byte.parseByte(s);
} else {
HEDIAD2 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAD3(String s) {
if (!s.trim().isEmpty()) {
HEDIAD3 = Byte.parseByte(s);
} else {
HEDIAD3 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAD4(String s) {
if (!s.trim().isEmpty()) {
HEDIAD4 = Byte.parseByte(s);
} else {
HEDIAD4 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAD5(String s) {
if (!s.trim().isEmpty()) {
HEDIAD5 = Byte.parseByte(s);
} else {
HEDIAD5 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAD6(String s) {
if (!s.trim().isEmpty()) {
HEDIAD6 = Byte.parseByte(s);
} else {
HEDIAD6 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAD7(String s) {
if (!s.trim().isEmpty()) {
HEDIAD7 = Byte.parseByte(s);
} else {
HEDIAD7 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAD8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAD8 = false;
} else {
HEDIAD8 = true;
}
}
}

protected final void initHEDIAD9(String s) {
if (!s.trim().isEmpty()) {
HEDIAD9 = Byte.parseByte(s);
} else {
HEDIAD9 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAM1(String s) {
if (!s.trim().isEmpty()) {
HEDIAM1 = Byte.parseByte(s);
} else {
HEDIAM1 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAM2(String s) {
if (!s.trim().isEmpty()) {
HEDIAM2 = Byte.parseByte(s);
} else {
HEDIAM2 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAM3(String s) {
if (!s.trim().isEmpty()) {
HEDIAM3 = Byte.parseByte(s);
} else {
HEDIAM3 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAM4(String s) {
if (!s.trim().isEmpty()) {
HEDIAM4 = Byte.parseByte(s);
} else {
HEDIAM4 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAM5(String s) {
if (!s.trim().isEmpty()) {
HEDIAM5 = Byte.parseByte(s);
} else {
HEDIAM5 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAM6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAM6 = false;
} else {
HEDIAM6 = true;
}
}
}

protected final void initHEDIAM7(String s) {
if (!s.trim().isEmpty()) {
HEDIAM7 = Byte.parseByte(s);
} else {
HEDIAM7 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAM8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAM8 = false;
} else {
HEDIAM8 = true;
}
}
}

protected final void initHEDIAM9(String s) {
if (!s.trim().isEmpty()) {
HEDIAM9 = Byte.parseByte(s);
} else {
HEDIAM9 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAN1(String s) {
if (!s.trim().isEmpty()) {
HEDIAN1 = Byte.parseByte(s);
} else {
HEDIAN1 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAN2(String s) {
if (!s.trim().isEmpty()) {
HEDIAN2 = Byte.parseByte(s);
} else {
HEDIAN2 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAN3(String s) {
if (!s.trim().isEmpty()) {
HEDIAN3 = Byte.parseByte(s);
} else {
HEDIAN3 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAN4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAN4 = false;
} else {
HEDIAN4 = true;
}
}
}

protected final void initHEDIAN5(String s) {
if (!s.trim().isEmpty()) {
HEDIAN5 = Byte.parseByte(s);
} else {
HEDIAN5 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAN6(String s) {
if (!s.trim().isEmpty()) {
HEDIAN6 = Byte.parseByte(s);
} else {
HEDIAN6 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAN7(String s) {
if (!s.trim().isEmpty()) {
HEDIAN7 = Byte.parseByte(s);
} else {
HEDIAN7 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAN8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAN8 = false;
} else {
HEDIAN8 = true;
}
}
}

protected final void initHEDIAN9(String s) {
if (!s.trim().isEmpty()) {
HEDIAN9 = Byte.parseByte(s);
} else {
HEDIAN9 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAS1(String s) {
if (!s.trim().isEmpty()) {
HEDIAS1 = Byte.parseByte(s);
} else {
HEDIAS1 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAS2(String s) {
if (!s.trim().isEmpty()) {
HEDIAS2 = Byte.parseByte(s);
} else {
HEDIAS2 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAS3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAS3 = false;
} else {
HEDIAS3 = true;
}
}
}

protected final void initHEDIAS4(String s) {
if (!s.trim().isEmpty()) {
HEDIAS4 = Byte.parseByte(s);
} else {
HEDIAS4 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAS5(String s) {
if (!s.trim().isEmpty()) {
HEDIAS5 = Byte.parseByte(s);
} else {
HEDIAS5 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAS6(String s) {
if (!s.trim().isEmpty()) {
HEDIAS6 = Byte.parseByte(s);
} else {
HEDIAS6 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAS7(String s) {
if (!s.trim().isEmpty()) {
HEDIAS7 = Byte.parseByte(s);
} else {
HEDIAS7 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAS8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAS8 = false;
} else {
HEDIAS8 = true;
}
}
}

protected final void initHEDIAS9(String s) {
if (!s.trim().isEmpty()) {
HEDIAS9 = Byte.parseByte(s);
} else {
HEDIAS9 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAW1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAW1 = false;
} else {
HEDIAW1 = true;
}
}
}

protected final void initHEDIAW3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAW3 = false;
} else {
HEDIAW3 = true;
}
}
}

protected final void initHEDIAW4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAW4 = false;
} else {
HEDIAW4 = true;
}
}
}

protected final void initHEDIAW5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAW5 = false;
} else {
HEDIAW5 = true;
}
}
}

protected final void initHEDIAW6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAW6 = false;
} else {
HEDIAW6 = true;
}
}
}

protected final void initHEDIAW7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAW7 = false;
} else {
HEDIAW7 = true;
}
}
}

protected final void initHEDIAW8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAW8 = false;
} else {
HEDIAW8 = true;
}
}
}

protected final void initHEDIAW9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIAW9 = false;
} else {
HEDIAW9 = true;
}
}
}

protected final void initHEDIB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIB = false;
} else {
HEDIB = true;
}
}
}

protected final void initHEDIB01(String s) {
if (!s.trim().isEmpty()) {
HEDIB01 = Byte.parseByte(s);
} else {
HEDIB01 = Byte.MIN_VALUE;
}
}

protected final void initHEDIB02(String s) {
if (!s.trim().isEmpty()) {
HEDIB02 = Byte.parseByte(s);
} else {
HEDIB02 = Byte.MIN_VALUE;
}
}

protected final void initHEDIB03(String s) {
if (!s.trim().isEmpty()) {
HEDIB03 = Byte.parseByte(s);
} else {
HEDIB03 = Byte.MIN_VALUE;
}
}

protected final void initHEDIB04(String s) {
if (!s.trim().isEmpty()) {
HEDIB04 = Byte.parseByte(s);
} else {
HEDIB04 = Byte.MIN_VALUE;
}
}

protected final void initHEDIBW1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIBW1 = false;
} else {
HEDIBW1 = true;
}
}
}

protected final void initHEDIBW3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIBW3 = false;
} else {
HEDIBW3 = true;
}
}
}

protected final void initHEDIBW4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIBW4 = false;
} else {
HEDIBW4 = true;
}
}
}

protected final void initHEDIBW5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIBW5 = false;
} else {
HEDIBW5 = true;
}
}
}

protected final void initHEDIBW6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIBW6 = false;
} else {
HEDIBW6 = true;
}
}
}

protected final void initHEDIBW7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIBW7 = false;
} else {
HEDIBW7 = true;
}
}
}

protected final void initHEDIBW8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIBW8 = false;
} else {
HEDIBW8 = true;
}
}
}

protected final void initHEDIBW9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIBW9 = false;
} else {
HEDIBW9 = true;
}
}
}

protected final void initHEDIDS1(String s) {
if (!s.trim().isEmpty()) {
HEDIDS1 = Byte.parseByte(s);
} else {
HEDIDS1 = Byte.MIN_VALUE;
}
}

protected final void initHEDIDS2(String s) {
if (!s.trim().isEmpty()) {
HEDIDS2 = Byte.parseByte(s);
} else {
HEDIDS2 = Byte.MIN_VALUE;
}
}

protected final void initHEDIDS3(String s) {
if (!s.trim().isEmpty()) {
HEDIDS3 = Byte.parseByte(s);
} else {
HEDIDS3 = Byte.MIN_VALUE;
}
}

protected final void initHEDIDS4(String s) {
if (!s.trim().isEmpty()) {
HEDIDS4 = Byte.parseByte(s);
} else {
HEDIDS4 = Byte.MIN_VALUE;
}
}

protected final void initHEDIDS5(String s) {
if (!s.trim().isEmpty()) {
HEDIDS5 = Byte.parseByte(s);
} else {
HEDIDS5 = Byte.MIN_VALUE;
}
}

protected final void initHEDIDS6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIDS6 = false;
} else {
HEDIDS6 = true;
}
}
}

protected final void initHEDIDS7(String s) {
if (!s.trim().isEmpty()) {
HEDIDS7 = Byte.parseByte(s);
} else {
HEDIDS7 = Byte.MIN_VALUE;
}
}

protected final void initHEDIDS8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIDS8 = false;
} else {
HEDIDS8 = true;
}
}
}

protected final void initHEDIDS9(String s) {
if (!s.trim().isEmpty()) {
HEDIDS9 = Byte.parseByte(s);
} else {
HEDIDS9 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM01(String s) {
if (!s.trim().isEmpty()) {
HEDIM01 = Byte.parseByte(s);
} else {
HEDIM01 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM02(String s) {
if (!s.trim().isEmpty()) {
HEDIM02 = Byte.parseByte(s);
} else {
HEDIM02 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM03(String s) {
if (!s.trim().isEmpty()) {
HEDIM03 = Byte.parseByte(s);
} else {
HEDIM03 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM04(String s) {
if (!s.trim().isEmpty()) {
HEDIM04 = Byte.parseByte(s);
} else {
HEDIM04 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM05(String s) {
if (!s.trim().isEmpty()) {
HEDIM05 = Byte.parseByte(s);
} else {
HEDIM05 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM06(String s) {
if (!s.trim().isEmpty()) {
HEDIM06 = Byte.parseByte(s);
} else {
HEDIM06 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIM07 = false;
} else {
HEDIM07 = true;
}
}
}

protected final void initHEDIM08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIM08 = false;
} else {
HEDIM08 = true;
}
}
}

protected final void initHEDIZ(String s) {
if (!s.trim().isEmpty()) {
HEDIZ = Byte.parseByte(s);
} else {
HEDIZ = Byte.MIN_VALUE;
}
}

protected final void initHEDREYE(String s) {
if (!s.trim().isEmpty()) {
HEDREYE = Byte.parseByte(s);
} else {
HEDREYE = Byte.MIN_VALUE;
}
}

protected final void initHEFFLAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
HEFFLAG = false;
} else {
HEFFLAG = true;
}
}
}

protected final void initHEFLD(String s) {
if (!s.trim().isEmpty()) {
HEFLD = Byte.parseByte(s);
} else {
HEFLD = Byte.MIN_VALUE;
}
}

protected final void initHEFLE(String s) {
if (!s.trim().isEmpty()) {
HEFLE = Byte.parseByte(s);
} else {
HEFLE = Byte.MIN_VALUE;
}
}

protected final void initHEFLF(String s) {
if (!s.trim().isEmpty()) {
HEFLF = Byte.parseByte(s);
} else {
HEFLF = Byte.MIN_VALUE;
}
}

protected final void initHEFTCHK(String s) {
if (!s.trim().isEmpty()) {
HEFTCHK = Byte.parseByte(s);
} else {
HEFTCHK = Byte.MIN_VALUE;
}
}

protected final void initHEHBP(String s) {
if (!s.trim().isEmpty()) {
HEHBP = Byte.parseByte(s);
} else {
HEHBP = Byte.MIN_VALUE;
}
}

protected final void initHEHBPA(String s) {
if (!s.trim().isEmpty()) {
HEHBPA = Byte.parseByte(s);
} else {
HEHBPA = Byte.MIN_VALUE;
}
}

protected final void initHEHBPB(String s) {
if (!s.trim().isEmpty()) {
HEHBPB = Byte.parseByte(s);
} else {
HEHBPB = Byte.MIN_VALUE;
}
}

protected final void initHEHBPB1(String s) {
if (!s.trim().isEmpty()) {
HEHBPB1 = Byte.parseByte(s);
} else {
HEHBPB1 = Byte.MIN_VALUE;
}
}

protected final void initHEHELF(String s) {
if (!s.trim().isEmpty()) {
HEHELF = Byte.parseByte(s);
} else {
HEHELF = Byte.MIN_VALUE;
}
}

protected final void initHEHPA(String s) {
if (!s.trim().isEmpty()) {
HEHPA = Byte.parseByte(s);
} else {
HEHPA = Byte.MIN_VALUE;
}
}

protected final void initHEHPB01(String s) {
if (!s.trim().isEmpty()) {
HEHPB01 = Byte.parseByte(s);
} else {
HEHPB01 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB02(String s) {
if (!s.trim().isEmpty()) {
HEHPB02 = Byte.parseByte(s);
} else {
HEHPB02 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB03(String s) {
if (!s.trim().isEmpty()) {
HEHPB03 = Byte.parseByte(s);
} else {
HEHPB03 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB04(String s) {
if (!s.trim().isEmpty()) {
HEHPB04 = Byte.parseByte(s);
} else {
HEHPB04 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB05(String s) {
if (!s.trim().isEmpty()) {
HEHPB05 = Byte.parseByte(s);
} else {
HEHPB05 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB06(String s) {
if (!s.trim().isEmpty()) {
HEHPB06 = Byte.parseByte(s);
} else {
HEHPB06 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB07(String s) {
if (!s.trim().isEmpty()) {
HEHPB07 = Byte.parseByte(s);
} else {
HEHPB07 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB08(String s) {
if (!s.trim().isEmpty()) {
HEHPB08 = Byte.parseByte(s);
} else {
HEHPB08 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEHPB09 = false;
} else {
HEHPB09 = true;
}
}
}

protected final void initHEHPC(String s) {
if (!s.trim().isEmpty()) {
HEHPC = Byte.parseByte(s);
} else {
HEHPC = Byte.MIN_VALUE;
}
}

protected final void initHEHPD(String s) {
if (!s.trim().isEmpty()) {
HEHPD = Byte.parseByte(s);
} else {
HEHPD = Byte.MIN_VALUE;
}
}

protected final void initHEHPE(String s) {
if (!s.trim().isEmpty()) {
HEHPE = Byte.parseByte(s);
} else {
HEHPE = Byte.MIN_VALUE;
}
}

protected final void initHEHRB(String s) {
if (!s.trim().isEmpty()) {
HEHRB = Byte.parseByte(s);
} else {
HEHRB = Byte.MIN_VALUE;
}
}

protected final void initHEHRC(String s) {
if (!s.trim().isEmpty()) {
HEHRC = Byte.parseByte(s);
} else {
HEHRC = Byte.MIN_VALUE;
}
}

protected final void initHEHRD(String s) {
if (!s.trim().isEmpty()) {
HEHRD = Byte.parseByte(s);
} else {
HEHRD = Byte.MIN_VALUE;
}
}

protected final void initHEHRE(String s) {
if (!s.trim().isEmpty()) {
HEHRE = Byte.parseByte(s);
} else {
HEHRE = Byte.MIN_VALUE;
}
}

protected final void initHEHRF(String s) {
if (!s.trim().isEmpty()) {
HEHRF = Byte.parseByte(s);
} else {
HEHRF = Byte.MIN_VALUE;
}
}

protected final void initHEHRG(String s) {
if (!s.trim().isEmpty()) {
HEHRG = Byte.parseByte(s);
} else {
HEHRG = Byte.MIN_VALUE;
}
}

protected final void initHEHRTA(String s) {
if (!s.trim().isEmpty()) {
HEHRTA = Byte.parseByte(s);
} else {
HEHRTA = Byte.MIN_VALUE;
}
}

protected final void initHEHRTA2(String s) {
if (!s.trim().isEmpty()) {
HEHRTA2 = Byte.parseByte(s);
} else {
HEHRTA2 = Byte.MIN_VALUE;
}
}

protected final void initHEHRTB(String s) {
if (!s.trim().isEmpty()) {
HEHRTB = Byte.parseByte(s);
} else {
HEHRTB = Byte.MIN_VALUE;
}
}

protected final void initHEHRTB2(String s) {
if (!s.trim().isEmpty()) {
HEHRTB2 = Byte.parseByte(s);
} else {
HEHRTB2 = Byte.MIN_VALUE;
}
}

protected final void initHEHRTC(String s) {
if (!s.trim().isEmpty()) {
HEHRTC = Byte.parseByte(s);
} else {
HEHRTC = Byte.MIN_VALUE;
}
}

protected final void initHEHRTC2(String s) {
if (!s.trim().isEmpty()) {
HEHRTC2 = Byte.parseByte(s);
} else {
HEHRTC2 = Byte.MIN_VALUE;
}
}

protected final void initHEHRTD(String s) {
if (!s.trim().isEmpty()) {
HEHRTD = Byte.parseByte(s);
} else {
HEHRTD = Byte.MIN_VALUE;
}
}

protected final void initHEHRTD2(String s) {
if (!s.trim().isEmpty()) {
HEHRTD2 = Byte.parseByte(s);
} else {
HEHRTD2 = Byte.MIN_VALUE;
}
}

protected final void initHEHRTE(String s) {
if (!s.trim().isEmpty()) {
HEHRTE = Byte.parseByte(s);
} else {
HEHRTE = Byte.MIN_VALUE;
}
}

protected final void initHEHRTE2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEHRTE2 = false;
} else {
HEHRTE2 = true;
}
}
}

protected final void initHEHRTF(String s) {
if (!s.trim().isEmpty()) {
HEHRTF = Byte.parseByte(s);
} else {
HEHRTF = Byte.MIN_VALUE;
}
}

protected final void initHEHRTF2(String s) {
if (!s.trim().isEmpty()) {
HEHRTF2 = Byte.parseByte(s);
} else {
HEHRTF2 = Byte.MIN_VALUE;
}
}

protected final void initHEIGHT(String s) {
if (!s.trim().isEmpty()) {
HEIGHT = Double.parseDouble(s);
} else {
HEIGHT = Double.NaN;
}
}

protected final void initHEINCT(String s) {
if (!s.trim().isEmpty()) {
HEINCT = Byte.parseByte(s);
} else {
HEINCT = Byte.MIN_VALUE;
}
}

protected final void initHEINCTA(String s) {
if (!s.trim().isEmpty()) {
HEINCTA = Byte.parseByte(s);
} else {
HEINCTA = Byte.MIN_VALUE;
}
}

protected final void initHEINCTB(String s) {
if (!s.trim().isEmpty()) {
HEINCTB = Byte.parseByte(s);
} else {
HEINCTB = Byte.MIN_VALUE;
}
}

protected final void initHEINCTC(String s) {
if (!s.trim().isEmpty()) {
HEINCTC = Byte.parseByte(s);
} else {
HEINCTC = Byte.MIN_VALUE;
}
}

protected final void initHEINCTD(String s) {
if (!s.trim().isEmpty()) {
HEINCTD = Byte.parseByte(s);
} else {
HEINCTD = Byte.MIN_VALUE;
}
}

protected final void initHEINCTE(String s) {
if (!s.trim().isEmpty()) {
HEINCTE = Byte.parseByte(s);
} else {
HEINCTE = Byte.MIN_VALUE;
}
}

protected final void initHEINCTF(String s) {
if (!s.trim().isEmpty()) {
HEINCTF = Byte.parseByte(s);
} else {
HEINCTF = Byte.MIN_VALUE;
}
}

protected final void initHEINCTG(String s) {
if (!s.trim().isEmpty()) {
HEINCTG = Byte.parseByte(s);
} else {
HEINCTG = Byte.MIN_VALUE;
}
}

protected final void initHEINCTH(String s) {
if (!s.trim().isEmpty()) {
HEINCTH = Byte.parseByte(s);
} else {
HEINCTH = Byte.MIN_VALUE;
}
}

protected final void initHEINCTI(String s) {
if (!s.trim().isEmpty()) {
HEINCTI = Byte.parseByte(s);
} else {
HEINCTI = Byte.MIN_VALUE;
}
}

protected final void initHEINCTJ(String s) {
if (!s.trim().isEmpty()) {
HEINCTJ = Byte.parseByte(s);
} else {
HEINCTJ = Byte.MIN_VALUE;
}
}

protected final void initHEJIA1(String s) {
if (!s.trim().isEmpty()) {
HEJIA1 = Byte.parseByte(s);
} else {
HEJIA1 = Byte.MIN_VALUE;
}
}

protected final void initHEJIA2(String s) {
if (!s.trim().isEmpty()) {
HEJIA2 = Byte.parseByte(s);
} else {
HEJIA2 = Byte.MIN_VALUE;
}
}

protected final void initHEJIB(String s) {
if (!s.trim().isEmpty()) {
HEJIB = Byte.parseByte(s);
} else {
HEJIB = Byte.MIN_VALUE;
}
}

protected final void initHEJIC(String s) {
if (!s.trim().isEmpty()) {
HEJIC = Byte.parseByte(s);
} else {
HEJIC = Byte.MIN_VALUE;
}
}

protected final void initHEKIDN(String s) {
if (!s.trim().isEmpty()) {
HEKIDN = Byte.parseByte(s);
} else {
HEKIDN = Byte.MIN_VALUE;
}
}

protected final void initHEKNEA(String s) {
if (!s.trim().isEmpty()) {
HEKNEA = Byte.parseByte(s);
} else {
HEKNEA = Byte.MIN_VALUE;
}
}

protected final void initHEKNEB(String s) {
if (!s.trim().isEmpty()) {
HEKNEB = Byte.parseByte(s);
} else {
HEKNEB = Byte.MIN_VALUE;
}
}

protected final void initHEKNEC(String s) {
if (!s.trim().isEmpty()) {
HEKNEC = Byte.parseByte(s);
} else {
HEKNEC = Byte.MIN_VALUE;
}
}

protected final void initHELWK(String s) {
if (!s.trim().isEmpty()) {
HELWK = Byte.parseByte(s);
} else {
HELWK = Byte.MIN_VALUE;
}
}

protected final void initHENICO(String s) {
if (!s.trim().isEmpty()) {
HENICO = Byte.parseByte(s);
} else {
HENICO = Byte.MIN_VALUE;
}
}

protected final void initHENICTK(String s) {
if (!s.trim().isEmpty()) {
HENICTK = Byte.parseByte(s);
} else {
HENICTK = Byte.MIN_VALUE;
}
}

protected final void initHENMMI(String s) {
if (!s.trim().isEmpty()) {
HENMMI = Byte.parseByte(s);
} else {
HENMMI = Byte.MIN_VALUE;
}
}

protected final void initHENMST(String s) {
if (!s.trim().isEmpty()) {
HENMST = Byte.parseByte(s);
} else {
HENMST = Byte.MIN_VALUE;
}
}

protected final void initHEOP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEOP = false;
} else {
HEOP = true;
}
}
}

protected final void initHEOPC(String s) {
if (!s.trim().isEmpty()) {
HEOPC = Byte.parseByte(s);
} else {
HEOPC = Byte.MIN_VALUE;
}
}

protected final void initHEOPN1(String s) {
if (!s.trim().isEmpty()) {
HEOPN1 = Byte.parseByte(s);
} else {
HEOPN1 = Byte.MIN_VALUE;
}
}

protected final void initHEOPN2(String s) {
if (!s.trim().isEmpty()) {
HEOPN2 = Byte.parseByte(s);
} else {
HEOPN2 = Byte.MIN_VALUE;
}
}

protected final void initHEOPN3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEOPN3 = false;
} else {
HEOPN3 = true;
}
}
}

protected final void initHEOPN4(String s) {
if (!s.trim().isEmpty()) {
HEOPN4 = Byte.parseByte(s);
} else {
HEOPN4 = Byte.MIN_VALUE;
}
}

protected final void initHEOPS(String s) {
if (!s.trim().isEmpty()) {
HEOPS = Byte.parseByte(s);
} else {
HEOPS = Byte.MIN_VALUE;
}
}

protected final void initHEOPT1(String s) {
if (!s.trim().isEmpty()) {
HEOPT1 = Byte.parseByte(s);
} else {
HEOPT1 = Byte.MIN_VALUE;
}
}

protected final void initHEOPT2(String s) {
if (!s.trim().isEmpty()) {
HEOPT2 = Byte.parseByte(s);
} else {
HEOPT2 = Byte.MIN_VALUE;
}
}

protected final void initHEOPW1(String s) {
if (!s.trim().isEmpty()) {
HEOPW1 = Byte.parseByte(s);
} else {
HEOPW1 = Byte.MIN_VALUE;
}
}

protected final void initHEOSTE(String s) {
if (!s.trim().isEmpty()) {
HEOSTE = Byte.parseByte(s);
} else {
HEOSTE = Byte.MIN_VALUE;
}
}

protected final void initHEOSTEA(String s) {
if (!s.trim().isEmpty()) {
HEOSTEA = Byte.parseByte(s);
} else {
HEOSTEA = Byte.MIN_VALUE;
}
}

protected final void initHEOSTEB(String s) {
if (!s.trim().isEmpty()) {
HEOSTEB = Byte.parseByte(s);
} else {
HEOSTEB = Byte.MIN_VALUE;
}
}

protected final void initHEOSTEC(String s) {
if (!s.trim().isEmpty()) {
HEOSTEC = Byte.parseByte(s);
} else {
HEOSTEC = Byte.MIN_VALUE;
}
}

protected final void initHEOSTED(String s) {
if (!s.trim().isEmpty()) {
HEOSTED = Byte.parseByte(s);
} else {
HEOSTED = Byte.MIN_VALUE;
}
}

protected final void initHEPAC(String s) {
if (!s.trim().isEmpty()) {
HEPAC = Byte.parseByte(s);
} else {
HEPAC = Byte.MIN_VALUE;
}
}

protected final void initHEPAD(String s) {
if (!s.trim().isEmpty()) {
HEPAD = Byte.parseByte(s);
} else {
HEPAD = Byte.MIN_VALUE;
}
}

protected final void initHEPAE(String s) {
if (!s.trim().isEmpty()) {
HEPAE = Byte.parseByte(s);
} else {
HEPAE = Byte.MIN_VALUE;
}
}

protected final void initHEPAF(String s) {
if (!s.trim().isEmpty()) {
HEPAF = Byte.parseByte(s);
} else {
HEPAF = Byte.MIN_VALUE;
}
}

protected final void initHEPAF1(String s) {
if (!s.trim().isEmpty()) {
HEPAF1 = Byte.parseByte(s);
} else {
HEPAF1 = Byte.MIN_VALUE;
}
}

protected final void initHEPAG(String s) {
if (!s.trim().isEmpty()) {
HEPAG = Byte.parseByte(s);
} else {
HEPAG = Byte.MIN_VALUE;
}
}

protected final void initHEPAH(String s) {
if (!s.trim().isEmpty()) {
HEPAH = Byte.parseByte(s);
} else {
HEPAH = Byte.MIN_VALUE;
}
}

protected final void initHEPAI(String s) {
if (!s.trim().isEmpty()) {
HEPAI = Byte.parseByte(s);
} else {
HEPAI = Byte.MIN_VALUE;
}
}

protected final void initHEPAJ(String s) {
if (!s.trim().isEmpty()) {
HEPAJ = Byte.parseByte(s);
} else {
HEPAJ = Byte.MIN_VALUE;
}
}

protected final void initHEPAK1(String s) {
if (!s.trim().isEmpty()) {
HEPAK1 = Byte.parseByte(s);
} else {
HEPAK1 = Byte.MIN_VALUE;
}
}

protected final void initHEPAK2(String s) {
if (!s.trim().isEmpty()) {
HEPAK2 = Byte.parseByte(s);
} else {
HEPAK2 = Byte.MIN_VALUE;
}
}

protected final void initHEPRKR(String s) {
if (!s.trim().isEmpty()) {
HEPRKR = Byte.parseByte(s);
} else {
HEPRKR = Byte.MIN_VALUE;
}
}

protected final void initHEPRKRY(String s) {
if (!s.trim().isEmpty()) {
HEPRKRY = Short.parseShort(s);
} else {
HEPRKRY = Short.MIN_VALUE;
}
}

protected final void initHEPSY1(String s) {
if (!s.trim().isEmpty()) {
HEPSY1 = Byte.parseByte(s);
} else {
HEPSY1 = Byte.MIN_VALUE;
}
}

protected final void initHEPSY2(String s) {
if (!s.trim().isEmpty()) {
HEPSY2 = Byte.parseByte(s);
} else {
HEPSY2 = Byte.MIN_VALUE;
}
}

protected final void initHEPSY3(String s) {
if (!s.trim().isEmpty()) {
HEPSY3 = Byte.parseByte(s);
} else {
HEPSY3 = Byte.MIN_VALUE;
}
}

protected final void initHEPSY4(String s) {
if (!s.trim().isEmpty()) {
HEPSY4 = Byte.parseByte(s);
} else {
HEPSY4 = Byte.MIN_VALUE;
}
}

protected final void initHEPSY5(String s) {
if (!s.trim().isEmpty()) {
HEPSY5 = Byte.parseByte(s);
} else {
HEPSY5 = Byte.MIN_VALUE;
}
}

protected final void initHEPSY6(String s) {
if (!s.trim().isEmpty()) {
HEPSY6 = Byte.parseByte(s);
} else {
HEPSY6 = Byte.MIN_VALUE;
}
}

protected final void initHEPSYA(String s) {
if (!s.trim().isEmpty()) {
HEPSYA = Byte.parseByte(s);
} else {
HEPSYA = Byte.MIN_VALUE;
}
}

protected final void initHEPSYB(String s) {
if (!s.trim().isEmpty()) {
HEPSYB = Byte.parseByte(s);
} else {
HEPSYB = Byte.MIN_VALUE;
}
}

protected final void initHEPSYC(String s) {
if (!s.trim().isEmpty()) {
HEPSYC = Byte.parseByte(s);
} else {
HEPSYC = Byte.MIN_VALUE;
}
}

protected final void initHEPSYD(String s) {
if (!s.trim().isEmpty()) {
HEPSYD = Byte.parseByte(s);
} else {
HEPSYD = Byte.MIN_VALUE;
}
}

protected final void initHEPSYE(String s) {
if (!s.trim().isEmpty()) {
HEPSYE = Byte.parseByte(s);
} else {
HEPSYE = Byte.MIN_VALUE;
}
}

protected final void initHERPA(String s) {
if (!s.trim().isEmpty()) {
HERPA = Byte.parseByte(s);
} else {
HERPA = Byte.MIN_VALUE;
}
}

protected final void initHERPB(String s) {
if (!s.trim().isEmpty()) {
HERPB = Byte.parseByte(s);
} else {
HERPB = Byte.MIN_VALUE;
}
}

protected final void initHERPC(String s) {
if (!s.trim().isEmpty()) {
HERPC = Byte.parseByte(s);
} else {
HERPC = Byte.MIN_VALUE;
}
}

protected final void initHERPD(String s) {
if (!s.trim().isEmpty()) {
HERPD = Byte.parseByte(s);
} else {
HERPD = Byte.MIN_VALUE;
}
}

protected final void initHERPE(String s) {
if (!s.trim().isEmpty()) {
HERPE = Byte.parseByte(s);
} else {
HERPE = Byte.MIN_VALUE;
}
}

protected final void initHERPF(String s) {
if (!s.trim().isEmpty()) {
HERPF = Byte.parseByte(s);
} else {
HERPF = Byte.MIN_VALUE;
}
}

protected final void initHERPG(String s) {
if (!s.trim().isEmpty()) {
HERPG = Byte.parseByte(s);
} else {
HERPG = Byte.MIN_VALUE;
}
}

protected final void initHERPH(String s) {
if (!s.trim().isEmpty()) {
HERPH = Byte.parseByte(s);
} else {
HERPH = Byte.MIN_VALUE;
}
}

protected final void initHERPI(String s) {
if (!s.trim().isEmpty()) {
HERPI = Byte.parseByte(s);
} else {
HERPI = Byte.MIN_VALUE;
}
}

protected final void initHERPJ(String s) {
if (!s.trim().isEmpty()) {
HERPJ = Byte.parseByte(s);
} else {
HERPJ = Byte.MIN_VALUE;
}
}

protected final void initHESKD(String s) {
if (!s.trim().isEmpty()) {
HESKD = Byte.parseByte(s);
} else {
HESKD = Byte.MIN_VALUE;
}
}

protected final void initHESKE(String s) {
if (!s.trim().isEmpty()) {
HESKE = Byte.parseByte(s);
} else {
HESKE = Byte.MIN_VALUE;
}
}

protected final void initHESKF(String s) {
if (!s.trim().isEmpty()) {
HESKF = Byte.parseByte(s);
} else {
HESKF = Byte.MIN_VALUE;
}
}

protected final void initHESLFCB(String s) {
if (!s.trim().isEmpty()) {
HESLFCB = Byte.parseByte(s);
} else {
HESLFCB = Byte.MIN_VALUE;
}
}

protected final void initHESLFCM(String s) {
if (!s.trim().isEmpty()) {
HESLFCM = Byte.parseByte(s);
} else {
HESLFCM = Byte.MIN_VALUE;
}
}

protected final void initHESLFCR(String s) {
if (!s.trim().isEmpty()) {
HESLFCR = Byte.parseByte(s);
} else {
HESLFCR = Byte.MIN_VALUE;
}
}

protected final void initHESLFCY(String s) {
if (!s.trim().isEmpty()) {
HESLFCY = Short.parseShort(s);
} else {
HESLFCY = Short.MIN_VALUE;
}
}

protected final void initHESTOP(String s) {
if (!s.trim().isEmpty()) {
HESTOP = Byte.parseByte(s);
} else {
HESTOP = Byte.MIN_VALUE;
}
}

protected final void initHESTOPC(String s) {
if (!s.trim().isEmpty()) {
HESTOPC = Byte.parseByte(s);
} else {
HESTOPC = Byte.MIN_VALUE;
}
}

protected final void initHESUG(String s) {
if (!s.trim().isEmpty()) {
HESUG = Byte.parseByte(s);
} else {
HESUG = Byte.MIN_VALUE;
}
}

protected final void initHESUGA(String s) {
if (!s.trim().isEmpty()) {
HESUGA = Byte.parseByte(s);
} else {
HESUGA = Byte.MIN_VALUE;
}
}

protected final void initHETEMP(String s) {
if (!s.trim().isEmpty()) {
HETEMP = Byte.parseByte(s);
} else {
HETEMP = Byte.MIN_VALUE;
}
}

protected final void initHEWEE(String s) {
if (!s.trim().isEmpty()) {
HEWEE = Byte.parseByte(s);
} else {
HEWEE = Byte.MIN_VALUE;
}
}

protected final void initHEWEEA(String s) {
if (!s.trim().isEmpty()) {
HEWEEA = Byte.parseByte(s);
} else {
HEWEEA = Byte.MIN_VALUE;
}
}

protected final void initHEYRB(String s) {
if (!s.trim().isEmpty()) {
HEYRB = Byte.parseByte(s);
} else {
HEYRB = Byte.MIN_VALUE;
}
}

protected final void initHGB(String s) {
if (!s.trim().isEmpty()) {
HGB = Double.parseDouble(s);
} else {
HGB = Double.NaN;
}
}

protected final void initHHAGE(String s) {
if (!s.trim().isEmpty()) {
HHAGE = Byte.parseByte(s);
} else {
HHAGE = Byte.MIN_VALUE;
}
}

protected final void initHINREL(String s) {
if (!s.trim().isEmpty()) {
HINREL = Byte.parseByte(s);
} else {
HINREL = Byte.MIN_VALUE;
}
}

protected final void initHIP1(String s) {
if (!s.trim().isEmpty()) {
HIP1 = Double.parseDouble(s);
} else {
HIP1 = Double.NaN;
}
}

protected final void initHIP2(String s) {
if (!s.trim().isEmpty()) {
HIP2 = Double.parseDouble(s);
} else {
HIP2 = Double.NaN;
}
}

protected final void initHIP3(String s) {
if (!s.trim().isEmpty()) {
HIP3 = Double.parseDouble(s);
} else {
HIP3 = Double.NaN;
}
}

protected final void initHIPOKB(String s) {
if (!s.trim().isEmpty()) {
HIPOKB = Byte.parseByte(s);
} else {
HIPOKB = Byte.MIN_VALUE;
}
}

protected final void initHIPVAL(String s) {
if (!s.trim().isEmpty()) {
HIPVAL = Double.parseDouble(s);
} else {
HIPVAL = Double.NaN;
}
}

protected final void initHJREL(String s) {
if (!s.trim().isEmpty()) {
HJREL = Byte.parseByte(s);
} else {
HJREL = Byte.MIN_VALUE;
}
}

protected final void initHOADP1(String s) {
if (!s.trim().isEmpty()) {
HOADP1 = Byte.parseByte(s);
} else {
HOADP1 = Byte.MIN_VALUE;
}
}

protected final void initHOADP10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOADP10 = false;
} else {
HOADP10 = true;
}
}
}

protected final void initHOADP2(String s) {
if (!s.trim().isEmpty()) {
HOADP2 = Byte.parseByte(s);
} else {
HOADP2 = Byte.MIN_VALUE;
}
}

protected final void initHOADP3(String s) {
if (!s.trim().isEmpty()) {
HOADP3 = Byte.parseByte(s);
} else {
HOADP3 = Byte.MIN_VALUE;
}
}

protected final void initHOADP4(String s) {
if (!s.trim().isEmpty()) {
HOADP4 = Byte.parseByte(s);
} else {
HOADP4 = Byte.MIN_VALUE;
}
}

protected final void initHOADP5(String s) {
if (!s.trim().isEmpty()) {
HOADP5 = Byte.parseByte(s);
} else {
HOADP5 = Byte.MIN_VALUE;
}
}

protected final void initHOADP6(String s) {
if (!s.trim().isEmpty()) {
HOADP6 = Byte.parseByte(s);
} else {
HOADP6 = Byte.MIN_VALUE;
}
}

protected final void initHOADP7(String s) {
if (!s.trim().isEmpty()) {
HOADP7 = Byte.parseByte(s);
} else {
HOADP7 = Byte.MIN_VALUE;
}
}

protected final void initHOADP8(String s) {
if (!s.trim().isEmpty()) {
HOADP8 = Byte.parseByte(s);
} else {
HOADP8 = Byte.MIN_VALUE;
}
}

protected final void initHOADP9(String s) {
if (!s.trim().isEmpty()) {
HOADP9 = Byte.parseByte(s);
} else {
HOADP9 = Byte.MIN_VALUE;
}
}

protected final void initHOALF1(String s) {
if (!s.trim().isEmpty()) {
HOALF1 = Byte.parseByte(s);
} else {
HOALF1 = Byte.MIN_VALUE;
}
}

protected final void initHOALF1L(String s) {
if (!s.trim().isEmpty()) {
HOALF1L = Short.parseShort(s);
} else {
HOALF1L = Short.MIN_VALUE;
}
}

protected final void initHOALF1R(String s) {
if (!s.trim().isEmpty()) {
HOALF1R = Byte.parseByte(s);
} else {
HOALF1R = Byte.MIN_VALUE;
}
}

protected final void initHOALF1T(String s) {
if (!s.trim().isEmpty()) {
HOALF1T = Byte.parseByte(s);
} else {
HOALF1T = Byte.MIN_VALUE;
}
}

protected final void initHOALF1U(String s) {
if (!s.trim().isEmpty()) {
HOALF1U = Short.parseShort(s);
} else {
HOALF1U = Short.MIN_VALUE;
}
}

protected final void initHOALF2(String s) {
if (!s.trim().isEmpty()) {
HOALF2 = Byte.parseByte(s);
} else {
HOALF2 = Byte.MIN_VALUE;
}
}

protected final void initHOALF2L(String s) {
if (!s.trim().isEmpty()) {
HOALF2L = Short.parseShort(s);
} else {
HOALF2L = Short.MIN_VALUE;
}
}

protected final void initHOALF2R(String s) {
if (!s.trim().isEmpty()) {
HOALF2R = Byte.parseByte(s);
} else {
HOALF2R = Byte.MIN_VALUE;
}
}

protected final void initHOALF2T(String s) {
if (!s.trim().isEmpty()) {
HOALF2T = Byte.parseByte(s);
} else {
HOALF2T = Byte.MIN_VALUE;
}
}

protected final void initHOALF2U(String s) {
if (!s.trim().isEmpty()) {
HOALF2U = Short.parseShort(s);
} else {
HOALF2U = Short.MIN_VALUE;
}
}

protected final void initHOALFM1(String s) {
if (!s.trim().isEmpty()) {
HOALFM1 = Short.parseShort(s);
} else {
HOALFM1 = Short.MIN_VALUE;
}
}

protected final void initHOALFM2(String s) {
if (!s.trim().isEmpty()) {
HOALFM2 = Short.parseShort(s);
} else {
HOALFM2 = Short.MIN_VALUE;
}
}

protected final void initHOALI1(String s) {
if (!s.trim().isEmpty()) {
HOALI1 = Byte.parseByte(s);
} else {
HOALI1 = Byte.MIN_VALUE;
}
}

protected final void initHOALI2(String s) {
if (!s.trim().isEmpty()) {
HOALI2 = Byte.parseByte(s);
} else {
HOALI2 = Byte.MIN_VALUE;
}
}

protected final void initHOASK(String s) {
if (!s.trim().isEmpty()) {
HOASK = Byte.parseByte(s);
} else {
HOASK = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FE(String s) {
if (!s.trim().isEmpty()) {
HOBA2FE = Byte.parseByte(s);
} else {
HOBA2FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FL(String s) {
if (!s.trim().isEmpty()) {
HOBA2FL = Byte.parseByte(s);
} else {
HOBA2FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FR(String s) {
if (!s.trim().isEmpty()) {
HOBA2FR = Byte.parseByte(s);
} else {
HOBA2FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FU(String s) {
if (!s.trim().isEmpty()) {
HOBA2FU = Byte.parseByte(s);
} else {
HOBA2FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA2ME(String s) {
if (!s.trim().isEmpty()) {
HOBA2ME = Byte.parseByte(s);
} else {
HOBA2ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA2ML(String s) {
if (!s.trim().isEmpty()) {
HOBA2ML = Byte.parseByte(s);
} else {
HOBA2ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA2MR(String s) {
if (!s.trim().isEmpty()) {
HOBA2MR = Byte.parseByte(s);
} else {
HOBA2MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2MU(String s) {
if (!s.trim().isEmpty()) {
HOBA2MU = Byte.parseByte(s);
} else {
HOBA2MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA2OE(String s) {
if (!s.trim().isEmpty()) {
HOBA2OE = Byte.parseByte(s);
} else {
HOBA2OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2OL(String s) {
if (!s.trim().isEmpty()) {
HOBA2OL = Short.parseShort(s);
} else {
HOBA2OL = Short.MIN_VALUE;
}
}

protected final void initHOBA2OR(String s) {
if (!s.trim().isEmpty()) {
HOBA2OR = Byte.parseByte(s);
} else {
HOBA2OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2OU(String s) {
if (!s.trim().isEmpty()) {
HOBA2OU = Short.parseShort(s);
} else {
HOBA2OU = Short.MIN_VALUE;
}
}

protected final void initHOBA2WE(String s) {
if (!s.trim().isEmpty()) {
HOBA2WE = Byte.parseByte(s);
} else {
HOBA2WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2WL(String s) {
if (!s.trim().isEmpty()) {
HOBA2WL = Byte.parseByte(s);
} else {
HOBA2WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA2WR(String s) {
if (!s.trim().isEmpty()) {
HOBA2WR = Byte.parseByte(s);
} else {
HOBA2WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2WU(String s) {
if (!s.trim().isEmpty()) {
HOBA2WU = Byte.parseByte(s);
} else {
HOBA2WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YE(String s) {
if (!s.trim().isEmpty()) {
HOBA2YE = Byte.parseByte(s);
} else {
HOBA2YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YL(String s) {
if (!s.trim().isEmpty()) {
HOBA2YL = Byte.parseByte(s);
} else {
HOBA2YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YR(String s) {
if (!s.trim().isEmpty()) {
HOBA2YR = Byte.parseByte(s);
} else {
HOBA2YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YU(String s) {
if (!s.trim().isEmpty()) {
HOBA2YU = Byte.parseByte(s);
} else {
HOBA2YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FE(String s) {
if (!s.trim().isEmpty()) {
HOBA3FE = Byte.parseByte(s);
} else {
HOBA3FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FL(String s) {
if (!s.trim().isEmpty()) {
HOBA3FL = Byte.parseByte(s);
} else {
HOBA3FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FR(String s) {
if (!s.trim().isEmpty()) {
HOBA3FR = Byte.parseByte(s);
} else {
HOBA3FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FU(String s) {
if (!s.trim().isEmpty()) {
HOBA3FU = Byte.parseByte(s);
} else {
HOBA3FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA3ME(String s) {
if (!s.trim().isEmpty()) {
HOBA3ME = Byte.parseByte(s);
} else {
HOBA3ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA3ML(String s) {
if (!s.trim().isEmpty()) {
HOBA3ML = Short.parseShort(s);
} else {
HOBA3ML = Short.MIN_VALUE;
}
}

protected final void initHOBA3MR(String s) {
if (!s.trim().isEmpty()) {
HOBA3MR = Byte.parseByte(s);
} else {
HOBA3MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3MU(String s) {
if (!s.trim().isEmpty()) {
HOBA3MU = Short.parseShort(s);
} else {
HOBA3MU = Short.MIN_VALUE;
}
}

protected final void initHOBA3OE(String s) {
if (!s.trim().isEmpty()) {
HOBA3OE = Byte.parseByte(s);
} else {
HOBA3OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3OL(String s) {
if (!s.trim().isEmpty()) {
HOBA3OL = Short.parseShort(s);
} else {
HOBA3OL = Short.MIN_VALUE;
}
}

protected final void initHOBA3OR(String s) {
if (!s.trim().isEmpty()) {
HOBA3OR = Byte.parseByte(s);
} else {
HOBA3OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3OU(String s) {
if (!s.trim().isEmpty()) {
HOBA3OU = Short.parseShort(s);
} else {
HOBA3OU = Short.MIN_VALUE;
}
}

protected final void initHOBA3WE(String s) {
if (!s.trim().isEmpty()) {
HOBA3WE = Byte.parseByte(s);
} else {
HOBA3WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3WL(String s) {
if (!s.trim().isEmpty()) {
HOBA3WL = Byte.parseByte(s);
} else {
HOBA3WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA3WR(String s) {
if (!s.trim().isEmpty()) {
HOBA3WR = Byte.parseByte(s);
} else {
HOBA3WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3WU(String s) {
if (!s.trim().isEmpty()) {
HOBA3WU = Short.parseShort(s);
} else {
HOBA3WU = Short.MIN_VALUE;
}
}

protected final void initHOBA3YE(String s) {
if (!s.trim().isEmpty()) {
HOBA3YE = Byte.parseByte(s);
} else {
HOBA3YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3YL(String s) {
if (!s.trim().isEmpty()) {
HOBA3YL = Byte.parseByte(s);
} else {
HOBA3YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA3YR(String s) {
if (!s.trim().isEmpty()) {
HOBA3YR = Byte.parseByte(s);
} else {
HOBA3YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3YU(String s) {
if (!s.trim().isEmpty()) {
HOBA3YU = Byte.parseByte(s);
} else {
HOBA3YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FE(String s) {
if (!s.trim().isEmpty()) {
HOBA4FE = Byte.parseByte(s);
} else {
HOBA4FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FL(String s) {
if (!s.trim().isEmpty()) {
HOBA4FL = Byte.parseByte(s);
} else {
HOBA4FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FR(String s) {
if (!s.trim().isEmpty()) {
HOBA4FR = Byte.parseByte(s);
} else {
HOBA4FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FU(String s) {
if (!s.trim().isEmpty()) {
HOBA4FU = Byte.parseByte(s);
} else {
HOBA4FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA4ME(String s) {
if (!s.trim().isEmpty()) {
HOBA4ME = Byte.parseByte(s);
} else {
HOBA4ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA4ML(String s) {
if (!s.trim().isEmpty()) {
HOBA4ML = Short.parseShort(s);
} else {
HOBA4ML = Short.MIN_VALUE;
}
}

protected final void initHOBA4MR(String s) {
if (!s.trim().isEmpty()) {
HOBA4MR = Byte.parseByte(s);
} else {
HOBA4MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4MU(String s) {
if (!s.trim().isEmpty()) {
HOBA4MU = Short.parseShort(s);
} else {
HOBA4MU = Short.MIN_VALUE;
}
}

protected final void initHOBA4OE(String s) {
if (!s.trim().isEmpty()) {
HOBA4OE = Byte.parseByte(s);
} else {
HOBA4OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4OL(String s) {
if (!s.trim().isEmpty()) {
HOBA4OL = Short.parseShort(s);
} else {
HOBA4OL = Short.MIN_VALUE;
}
}

protected final void initHOBA4OR(String s) {
if (!s.trim().isEmpty()) {
HOBA4OR = Byte.parseByte(s);
} else {
HOBA4OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4OU(String s) {
if (!s.trim().isEmpty()) {
HOBA4OU = Short.parseShort(s);
} else {
HOBA4OU = Short.MIN_VALUE;
}
}

protected final void initHOBA4WE(String s) {
if (!s.trim().isEmpty()) {
HOBA4WE = Byte.parseByte(s);
} else {
HOBA4WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4WL(String s) {
if (!s.trim().isEmpty()) {
HOBA4WL = Short.parseShort(s);
} else {
HOBA4WL = Short.MIN_VALUE;
}
}

protected final void initHOBA4WR(String s) {
if (!s.trim().isEmpty()) {
HOBA4WR = Byte.parseByte(s);
} else {
HOBA4WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4WU(String s) {
if (!s.trim().isEmpty()) {
HOBA4WU = Short.parseShort(s);
} else {
HOBA4WU = Short.MIN_VALUE;
}
}

protected final void initHOBA4YE(String s) {
if (!s.trim().isEmpty()) {
HOBA4YE = Byte.parseByte(s);
} else {
HOBA4YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4YL(String s) {
if (!s.trim().isEmpty()) {
HOBA4YL = Byte.parseByte(s);
} else {
HOBA4YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA4YR(String s) {
if (!s.trim().isEmpty()) {
HOBA4YR = Byte.parseByte(s);
} else {
HOBA4YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4YU(String s) {
if (!s.trim().isEmpty()) {
HOBA4YU = Byte.parseByte(s);
} else {
HOBA4YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FE(String s) {
if (!s.trim().isEmpty()) {
HOBA5FE = Byte.parseByte(s);
} else {
HOBA5FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FL(String s) {
if (!s.trim().isEmpty()) {
HOBA5FL = Byte.parseByte(s);
} else {
HOBA5FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FR(String s) {
if (!s.trim().isEmpty()) {
HOBA5FR = Byte.parseByte(s);
} else {
HOBA5FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FU(String s) {
if (!s.trim().isEmpty()) {
HOBA5FU = Byte.parseByte(s);
} else {
HOBA5FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5ME(String s) {
if (!s.trim().isEmpty()) {
HOBA5ME = Byte.parseByte(s);
} else {
HOBA5ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA5ML(String s) {
if (!s.trim().isEmpty()) {
HOBA5ML = Short.parseShort(s);
} else {
HOBA5ML = Short.MIN_VALUE;
}
}

protected final void initHOBA5MR(String s) {
if (!s.trim().isEmpty()) {
HOBA5MR = Byte.parseByte(s);
} else {
HOBA5MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5MU(String s) {
if (!s.trim().isEmpty()) {
HOBA5MU = Short.parseShort(s);
} else {
HOBA5MU = Short.MIN_VALUE;
}
}

protected final void initHOBA5OE(String s) {
if (!s.trim().isEmpty()) {
HOBA5OE = Byte.parseByte(s);
} else {
HOBA5OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5OL(String s) {
if (!s.trim().isEmpty()) {
HOBA5OL = Byte.parseByte(s);
} else {
HOBA5OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5OR(String s) {
if (!s.trim().isEmpty()) {
HOBA5OR = Byte.parseByte(s);
} else {
HOBA5OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5OU(String s) {
if (!s.trim().isEmpty()) {
HOBA5OU = Byte.parseByte(s);
} else {
HOBA5OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WE(String s) {
if (!s.trim().isEmpty()) {
HOBA5WE = Byte.parseByte(s);
} else {
HOBA5WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WL(String s) {
if (!s.trim().isEmpty()) {
HOBA5WL = Byte.parseByte(s);
} else {
HOBA5WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WR(String s) {
if (!s.trim().isEmpty()) {
HOBA5WR = Byte.parseByte(s);
} else {
HOBA5WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WU(String s) {
if (!s.trim().isEmpty()) {
HOBA5WU = Byte.parseByte(s);
} else {
HOBA5WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YE(String s) {
if (!s.trim().isEmpty()) {
HOBA5YE = Byte.parseByte(s);
} else {
HOBA5YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YL(String s) {
if (!s.trim().isEmpty()) {
HOBA5YL = Byte.parseByte(s);
} else {
HOBA5YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YR(String s) {
if (!s.trim().isEmpty()) {
HOBA5YR = Byte.parseByte(s);
} else {
HOBA5YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YU(String s) {
if (!s.trim().isEmpty()) {
HOBA5YU = Byte.parseByte(s);
} else {
HOBA5YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FE(String s) {
if (!s.trim().isEmpty()) {
HOBA6FE = Byte.parseByte(s);
} else {
HOBA6FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FL(String s) {
if (!s.trim().isEmpty()) {
HOBA6FL = Byte.parseByte(s);
} else {
HOBA6FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FR(String s) {
if (!s.trim().isEmpty()) {
HOBA6FR = Byte.parseByte(s);
} else {
HOBA6FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FU(String s) {
if (!s.trim().isEmpty()) {
HOBA6FU = Byte.parseByte(s);
} else {
HOBA6FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6ME(String s) {
if (!s.trim().isEmpty()) {
HOBA6ME = Byte.parseByte(s);
} else {
HOBA6ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA6ML(String s) {
if (!s.trim().isEmpty()) {
HOBA6ML = Byte.parseByte(s);
} else {
HOBA6ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA6MR(String s) {
if (!s.trim().isEmpty()) {
HOBA6MR = Byte.parseByte(s);
} else {
HOBA6MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6MU(String s) {
if (!s.trim().isEmpty()) {
HOBA6MU = Byte.parseByte(s);
} else {
HOBA6MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OE(String s) {
if (!s.trim().isEmpty()) {
HOBA6OE = Byte.parseByte(s);
} else {
HOBA6OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OL(String s) {
if (!s.trim().isEmpty()) {
HOBA6OL = Byte.parseByte(s);
} else {
HOBA6OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OR(String s) {
if (!s.trim().isEmpty()) {
HOBA6OR = Byte.parseByte(s);
} else {
HOBA6OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OU(String s) {
if (!s.trim().isEmpty()) {
HOBA6OU = Byte.parseByte(s);
} else {
HOBA6OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WE(String s) {
if (!s.trim().isEmpty()) {
HOBA6WE = Byte.parseByte(s);
} else {
HOBA6WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WL(String s) {
if (!s.trim().isEmpty()) {
HOBA6WL = Byte.parseByte(s);
} else {
HOBA6WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WR(String s) {
if (!s.trim().isEmpty()) {
HOBA6WR = Byte.parseByte(s);
} else {
HOBA6WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WU(String s) {
if (!s.trim().isEmpty()) {
HOBA6WU = Byte.parseByte(s);
} else {
HOBA6WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YE(String s) {
if (!s.trim().isEmpty()) {
HOBA6YE = Byte.parseByte(s);
} else {
HOBA6YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YL(String s) {
if (!s.trim().isEmpty()) {
HOBA6YL = Byte.parseByte(s);
} else {
HOBA6YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YR(String s) {
if (!s.trim().isEmpty()) {
HOBA6YR = Byte.parseByte(s);
} else {
HOBA6YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YU(String s) {
if (!s.trim().isEmpty()) {
HOBA6YU = Byte.parseByte(s);
} else {
HOBA6YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FE(String s) {
if (!s.trim().isEmpty()) {
HOBA7FE = Byte.parseByte(s);
} else {
HOBA7FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FL(String s) {
if (!s.trim().isEmpty()) {
HOBA7FL = Byte.parseByte(s);
} else {
HOBA7FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FR(String s) {
if (!s.trim().isEmpty()) {
HOBA7FR = Byte.parseByte(s);
} else {
HOBA7FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FU(String s) {
if (!s.trim().isEmpty()) {
HOBA7FU = Byte.parseByte(s);
} else {
HOBA7FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7ME(String s) {
if (!s.trim().isEmpty()) {
HOBA7ME = Byte.parseByte(s);
} else {
HOBA7ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA7ML(String s) {
if (!s.trim().isEmpty()) {
HOBA7ML = Byte.parseByte(s);
} else {
HOBA7ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA7MR(String s) {
if (!s.trim().isEmpty()) {
HOBA7MR = Byte.parseByte(s);
} else {
HOBA7MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7MU(String s) {
if (!s.trim().isEmpty()) {
HOBA7MU = Byte.parseByte(s);
} else {
HOBA7MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OE(String s) {
if (!s.trim().isEmpty()) {
HOBA7OE = Byte.parseByte(s);
} else {
HOBA7OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OL(String s) {
if (!s.trim().isEmpty()) {
HOBA7OL = Byte.parseByte(s);
} else {
HOBA7OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OR(String s) {
if (!s.trim().isEmpty()) {
HOBA7OR = Byte.parseByte(s);
} else {
HOBA7OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OU(String s) {
if (!s.trim().isEmpty()) {
HOBA7OU = Byte.parseByte(s);
} else {
HOBA7OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WE(String s) {
if (!s.trim().isEmpty()) {
HOBA7WE = Byte.parseByte(s);
} else {
HOBA7WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WL(String s) {
if (!s.trim().isEmpty()) {
HOBA7WL = Byte.parseByte(s);
} else {
HOBA7WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WR(String s) {
if (!s.trim().isEmpty()) {
HOBA7WR = Byte.parseByte(s);
} else {
HOBA7WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WU(String s) {
if (!s.trim().isEmpty()) {
HOBA7WU = Byte.parseByte(s);
} else {
HOBA7WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YE(String s) {
if (!s.trim().isEmpty()) {
HOBA7YE = Byte.parseByte(s);
} else {
HOBA7YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YL(String s) {
if (!s.trim().isEmpty()) {
HOBA7YL = Byte.parseByte(s);
} else {
HOBA7YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YR(String s) {
if (!s.trim().isEmpty()) {
HOBA7YR = Byte.parseByte(s);
} else {
HOBA7YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YU(String s) {
if (!s.trim().isEmpty()) {
HOBA7YU = Byte.parseByte(s);
} else {
HOBA7YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FE(String s) {
if (!s.trim().isEmpty()) {
HOBA8FE = Byte.parseByte(s);
} else {
HOBA8FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FL(String s) {
if (!s.trim().isEmpty()) {
HOBA8FL = Byte.parseByte(s);
} else {
HOBA8FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FR(String s) {
if (!s.trim().isEmpty()) {
HOBA8FR = Byte.parseByte(s);
} else {
HOBA8FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FU(String s) {
if (!s.trim().isEmpty()) {
HOBA8FU = Byte.parseByte(s);
} else {
HOBA8FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8ME(String s) {
if (!s.trim().isEmpty()) {
HOBA8ME = Byte.parseByte(s);
} else {
HOBA8ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA8ML(String s) {
if (!s.trim().isEmpty()) {
HOBA8ML = Byte.parseByte(s);
} else {
HOBA8ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA8MR(String s) {
if (!s.trim().isEmpty()) {
HOBA8MR = Byte.parseByte(s);
} else {
HOBA8MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8MU(String s) {
if (!s.trim().isEmpty()) {
HOBA8MU = Byte.parseByte(s);
} else {
HOBA8MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OE(String s) {
if (!s.trim().isEmpty()) {
HOBA8OE = Byte.parseByte(s);
} else {
HOBA8OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OL(String s) {
if (!s.trim().isEmpty()) {
HOBA8OL = Byte.parseByte(s);
} else {
HOBA8OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OR(String s) {
if (!s.trim().isEmpty()) {
HOBA8OR = Byte.parseByte(s);
} else {
HOBA8OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OU(String s) {
if (!s.trim().isEmpty()) {
HOBA8OU = Byte.parseByte(s);
} else {
HOBA8OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WE(String s) {
if (!s.trim().isEmpty()) {
HOBA8WE = Byte.parseByte(s);
} else {
HOBA8WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WL(String s) {
if (!s.trim().isEmpty()) {
HOBA8WL = Byte.parseByte(s);
} else {
HOBA8WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WR(String s) {
if (!s.trim().isEmpty()) {
HOBA8WR = Byte.parseByte(s);
} else {
HOBA8WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WU(String s) {
if (!s.trim().isEmpty()) {
HOBA8WU = Byte.parseByte(s);
} else {
HOBA8WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YE(String s) {
if (!s.trim().isEmpty()) {
HOBA8YE = Byte.parseByte(s);
} else {
HOBA8YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YL(String s) {
if (!s.trim().isEmpty()) {
HOBA8YL = Byte.parseByte(s);
} else {
HOBA8YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YR(String s) {
if (!s.trim().isEmpty()) {
HOBA8YR = Byte.parseByte(s);
} else {
HOBA8YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YU(String s) {
if (!s.trim().isEmpty()) {
HOBA8YU = Byte.parseByte(s);
} else {
HOBA8YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FE(String s) {
if (!s.trim().isEmpty()) {
HOBA9FE = Byte.parseByte(s);
} else {
HOBA9FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FL(String s) {
if (!s.trim().isEmpty()) {
HOBA9FL = Byte.parseByte(s);
} else {
HOBA9FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FR(String s) {
if (!s.trim().isEmpty()) {
HOBA9FR = Byte.parseByte(s);
} else {
HOBA9FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FU(String s) {
if (!s.trim().isEmpty()) {
HOBA9FU = Byte.parseByte(s);
} else {
HOBA9FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9ME(String s) {
if (!s.trim().isEmpty()) {
HOBA9ME = Byte.parseByte(s);
} else {
HOBA9ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA9ML(String s) {
if (!s.trim().isEmpty()) {
HOBA9ML = Byte.parseByte(s);
} else {
HOBA9ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA9MR(String s) {
if (!s.trim().isEmpty()) {
HOBA9MR = Byte.parseByte(s);
} else {
HOBA9MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9MU(String s) {
if (!s.trim().isEmpty()) {
HOBA9MU = Byte.parseByte(s);
} else {
HOBA9MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OE(String s) {
if (!s.trim().isEmpty()) {
HOBA9OE = Byte.parseByte(s);
} else {
HOBA9OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OL(String s) {
if (!s.trim().isEmpty()) {
HOBA9OL = Byte.parseByte(s);
} else {
HOBA9OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OR(String s) {
if (!s.trim().isEmpty()) {
HOBA9OR = Byte.parseByte(s);
} else {
HOBA9OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OU(String s) {
if (!s.trim().isEmpty()) {
HOBA9OU = Byte.parseByte(s);
} else {
HOBA9OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WE(String s) {
if (!s.trim().isEmpty()) {
HOBA9WE = Byte.parseByte(s);
} else {
HOBA9WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WL(String s) {
if (!s.trim().isEmpty()) {
HOBA9WL = Byte.parseByte(s);
} else {
HOBA9WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WR(String s) {
if (!s.trim().isEmpty()) {
HOBA9WR = Byte.parseByte(s);
} else {
HOBA9WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WU(String s) {
if (!s.trim().isEmpty()) {
HOBA9WU = Byte.parseByte(s);
} else {
HOBA9WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YE(String s) {
if (!s.trim().isEmpty()) {
HOBA9YE = Byte.parseByte(s);
} else {
HOBA9YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YL(String s) {
if (!s.trim().isEmpty()) {
HOBA9YL = Byte.parseByte(s);
} else {
HOBA9YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YR(String s) {
if (!s.trim().isEmpty()) {
HOBA9YR = Byte.parseByte(s);
} else {
HOBA9YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YU(String s) {
if (!s.trim().isEmpty()) {
HOBA9YU = Byte.parseByte(s);
} else {
HOBA9YU = Byte.MIN_VALUE;
}
}

protected final void initHOBAFE(String s) {
if (!s.trim().isEmpty()) {
HOBAFE = Byte.parseByte(s);
} else {
HOBAFE = Byte.MIN_VALUE;
}
}

protected final void initHOBAFL(String s) {
if (!s.trim().isEmpty()) {
HOBAFL = Byte.parseByte(s);
} else {
HOBAFL = Byte.MIN_VALUE;
}
}

protected final void initHOBAFR(String s) {
if (!s.trim().isEmpty()) {
HOBAFR = Byte.parseByte(s);
} else {
HOBAFR = Byte.MIN_VALUE;
}
}

protected final void initHOBAFU(String s) {
if (!s.trim().isEmpty()) {
HOBAFU = Byte.parseByte(s);
} else {
HOBAFU = Byte.MIN_VALUE;
}
}

protected final void initHOBAME(String s) {
if (!s.trim().isEmpty()) {
HOBAME = Byte.parseByte(s);
} else {
HOBAME = Byte.MIN_VALUE;
}
}

protected final void initHOBAML(String s) {
if (!s.trim().isEmpty()) {
HOBAML = Short.parseShort(s);
} else {
HOBAML = Short.MIN_VALUE;
}
}

protected final void initHOBAMR(String s) {
if (!s.trim().isEmpty()) {
HOBAMR = Byte.parseByte(s);
} else {
HOBAMR = Byte.MIN_VALUE;
}
}

protected final void initHOBAMU(String s) {
if (!s.trim().isEmpty()) {
HOBAMU = Short.parseShort(s);
} else {
HOBAMU = Short.MIN_VALUE;
}
}

protected final void initHOBAOE(String s) {
if (!s.trim().isEmpty()) {
HOBAOE = Byte.parseByte(s);
} else {
HOBAOE = Byte.MIN_VALUE;
}
}

protected final void initHOBAOL(String s) {
if (!s.trim().isEmpty()) {
HOBAOL = Short.parseShort(s);
} else {
HOBAOL = Short.MIN_VALUE;
}
}

protected final void initHOBAOR(String s) {
if (!s.trim().isEmpty()) {
HOBAOR = Byte.parseByte(s);
} else {
HOBAOR = Byte.MIN_VALUE;
}
}

protected final void initHOBAOU(String s) {
if (!s.trim().isEmpty()) {
HOBAOU = Short.parseShort(s);
} else {
HOBAOU = Short.MIN_VALUE;
}
}

protected final void initHOBAWE(String s) {
if (!s.trim().isEmpty()) {
HOBAWE = Byte.parseByte(s);
} else {
HOBAWE = Byte.MIN_VALUE;
}
}

protected final void initHOBAWL(String s) {
if (!s.trim().isEmpty()) {
HOBAWL = Short.parseShort(s);
} else {
HOBAWL = Short.MIN_VALUE;
}
}

protected final void initHOBAWR(String s) {
if (!s.trim().isEmpty()) {
HOBAWR = Byte.parseByte(s);
} else {
HOBAWR = Byte.MIN_VALUE;
}
}

protected final void initHOBAWU(String s) {
if (!s.trim().isEmpty()) {
HOBAWU = Byte.parseByte(s);
} else {
HOBAWU = Byte.MIN_VALUE;
}
}

protected final void initHOBAYE(String s) {
if (!s.trim().isEmpty()) {
HOBAYE = Byte.parseByte(s);
} else {
HOBAYE = Byte.MIN_VALUE;
}
}

protected final void initHOBAYL(String s) {
if (!s.trim().isEmpty()) {
HOBAYL = Byte.parseByte(s);
} else {
HOBAYL = Byte.MIN_VALUE;
}
}

protected final void initHOBAYR(String s) {
if (!s.trim().isEmpty()) {
HOBAYR = Byte.parseByte(s);
} else {
HOBAYR = Byte.MIN_VALUE;
}
}

protected final void initHOBAYU(String s) {
if (!s.trim().isEmpty()) {
HOBAYU = Short.parseShort(s);
} else {
HOBAYU = Short.MIN_VALUE;
}
}

protected final void initHOCC01(String s) {
if (!s.trim().isEmpty()) {
HOCC01 = Byte.parseByte(s);
} else {
HOCC01 = Byte.MIN_VALUE;
}
}

protected final void initHOCC02(String s) {
if (!s.trim().isEmpty()) {
HOCC02 = Byte.parseByte(s);
} else {
HOCC02 = Byte.MIN_VALUE;
}
}

protected final void initHOCC03(String s) {
if (!s.trim().isEmpty()) {
HOCC03 = Byte.parseByte(s);
} else {
HOCC03 = Byte.MIN_VALUE;
}
}

protected final void initHOCC04(String s) {
if (!s.trim().isEmpty()) {
HOCC04 = Byte.parseByte(s);
} else {
HOCC04 = Byte.MIN_VALUE;
}
}

protected final void initHOCC05(String s) {
if (!s.trim().isEmpty()) {
HOCC05 = Byte.parseByte(s);
} else {
HOCC05 = Byte.MIN_VALUE;
}
}

protected final void initHOCC06(String s) {
if (!s.trim().isEmpty()) {
HOCC06 = Byte.parseByte(s);
} else {
HOCC06 = Byte.MIN_VALUE;
}
}

protected final void initHOCC07(String s) {
if (!s.trim().isEmpty()) {
HOCC07 = Byte.parseByte(s);
} else {
HOCC07 = Byte.MIN_VALUE;
}
}

protected final void initHOCC08(String s) {
if (!s.trim().isEmpty()) {
HOCC08 = Byte.parseByte(s);
} else {
HOCC08 = Byte.MIN_VALUE;
}
}

protected final void initHOCC09(String s) {
if (!s.trim().isEmpty()) {
HOCC09 = Byte.parseByte(s);
} else {
HOCC09 = Byte.MIN_VALUE;
}
}

protected final void initHOCC10(String s) {
if (!s.trim().isEmpty()) {
HOCC10 = Byte.parseByte(s);
} else {
HOCC10 = Byte.MIN_VALUE;
}
}

protected final void initHOCC11(String s) {
if (!s.trim().isEmpty()) {
HOCC11 = Byte.parseByte(s);
} else {
HOCC11 = Byte.MIN_VALUE;
}
}

protected final void initHOCC12(String s) {
if (!s.trim().isEmpty()) {
HOCC12 = Byte.parseByte(s);
} else {
HOCC12 = Byte.MIN_VALUE;
}
}

protected final void initHOCC13(String s) {
if (!s.trim().isEmpty()) {
HOCC13 = Byte.parseByte(s);
} else {
HOCC13 = Byte.MIN_VALUE;
}
}

protected final void initHOCC14(String s) {
if (!s.trim().isEmpty()) {
HOCC14 = Byte.parseByte(s);
} else {
HOCC14 = Byte.MIN_VALUE;
}
}

protected final void initHOCC15(String s) {
if (!s.trim().isEmpty()) {
HOCC15 = Byte.parseByte(s);
} else {
HOCC15 = Byte.MIN_VALUE;
}
}

protected final void initHOCC16(String s) {
if (!s.trim().isEmpty()) {
HOCC16 = Byte.parseByte(s);
} else {
HOCC16 = Byte.MIN_VALUE;
}
}

protected final void initHOCC17(String s) {
if (!s.trim().isEmpty()) {
HOCC17 = Byte.parseByte(s);
} else {
HOCC17 = Byte.MIN_VALUE;
}
}

protected final void initHOCC18(String s) {
if (!s.trim().isEmpty()) {
HOCC18 = Byte.parseByte(s);
} else {
HOCC18 = Byte.MIN_VALUE;
}
}

protected final void initHOCC19(String s) {
if (!s.trim().isEmpty()) {
HOCC19 = Byte.parseByte(s);
} else {
HOCC19 = Byte.MIN_VALUE;
}
}

protected final void initHOCC20(String s) {
if (!s.trim().isEmpty()) {
HOCC20 = Byte.parseByte(s);
} else {
HOCC20 = Byte.MIN_VALUE;
}
}

protected final void initHOCENP(String s) {
if (!s.trim().isEmpty()) {
HOCENP = Byte.parseByte(s);
} else {
HOCENP = Byte.MIN_VALUE;
}
}

protected final void initHOCL(String s) {
if (!s.trim().isEmpty()) {
HOCL = Short.parseShort(s);
} else {
HOCL = Short.MIN_VALUE;
}
}

protected final void initHOCLE(String s) {
if (!s.trim().isEmpty()) {
HOCLE = Byte.parseByte(s);
} else {
HOCLE = Byte.MIN_VALUE;
}
}

protected final void initHOCLL(String s) {
if (!s.trim().isEmpty()) {
HOCLL = Short.parseShort(s);
} else {
HOCLL = Short.MIN_VALUE;
}
}

protected final void initHOCLR(String s) {
if (!s.trim().isEmpty()) {
HOCLR = Byte.parseByte(s);
} else {
HOCLR = Byte.MIN_VALUE;
}
}

protected final void initHOCLU(String s) {
if (!s.trim().isEmpty()) {
HOCLU = Short.parseShort(s);
} else {
HOCLU = Short.MIN_VALUE;
}
}

protected final void initHOEB(String s) {
if (!s.trim().isEmpty()) {
HOEB = Byte.parseByte(s);
} else {
HOEB = Byte.MIN_VALUE;
}
}

protected final void initHOEBMS(String s) {
if (!s.trim().isEmpty()) {
HOEBMS = Short.parseShort(s);
} else {
HOEBMS = Short.MIN_VALUE;
}
}

protected final void initHOEBMSE(String s) {
if (!s.trim().isEmpty()) {
HOEBMSE = Byte.parseByte(s);
} else {
HOEBMSE = Byte.MIN_VALUE;
}
}

protected final void initHOEBMSL(String s) {
if (!s.trim().isEmpty()) {
HOEBMSL = Byte.parseByte(s);
} else {
HOEBMSL = Byte.MIN_VALUE;
}
}

protected final void initHOEBMSR(String s) {
if (!s.trim().isEmpty()) {
HOEBMSR = Byte.parseByte(s);
} else {
HOEBMSR = Byte.MIN_VALUE;
}
}

protected final void initHOEBMSU(String s) {
if (!s.trim().isEmpty()) {
HOEBMSU = Byte.parseByte(s);
} else {
HOEBMSU = Byte.MIN_VALUE;
}
}

protected final void initHOEBMW(String s) {
if (!s.trim().isEmpty()) {
HOEBMW = Short.parseShort(s);
} else {
HOEBMW = Short.MIN_VALUE;
}
}

protected final void initHOEBMWE(String s) {
if (!s.trim().isEmpty()) {
HOEBMWE = Byte.parseByte(s);
} else {
HOEBMWE = Byte.MIN_VALUE;
}
}

protected final void initHOEBMWL(String s) {
if (!s.trim().isEmpty()) {
HOEBMWL = Byte.parseByte(s);
} else {
HOEBMWL = Byte.MIN_VALUE;
}
}

protected final void initHOEBMWR(String s) {
if (!s.trim().isEmpty()) {
HOEBMWR = Byte.parseByte(s);
} else {
HOEBMWR = Byte.MIN_VALUE;
}
}

protected final void initHOEBMWU(String s) {
if (!s.trim().isEmpty()) {
HOEBMWU = Byte.parseByte(s);
} else {
HOEBMWU = Byte.MIN_VALUE;
}
}

protected final void initHOEBQS(String s) {
if (!s.trim().isEmpty()) {
HOEBQS = Short.parseShort(s);
} else {
HOEBQS = Short.MIN_VALUE;
}
}

protected final void initHOEBQSE(String s) {
if (!s.trim().isEmpty()) {
HOEBQSE = Byte.parseByte(s);
} else {
HOEBQSE = Byte.MIN_VALUE;
}
}

protected final void initHOEBQSL(String s) {
if (!s.trim().isEmpty()) {
HOEBQSL = Short.parseShort(s);
} else {
HOEBQSL = Short.MIN_VALUE;
}
}

protected final void initHOEBQSR(String s) {
if (!s.trim().isEmpty()) {
HOEBQSR = Byte.parseByte(s);
} else {
HOEBQSR = Byte.MIN_VALUE;
}
}

protected final void initHOEBQSU(String s) {
if (!s.trim().isEmpty()) {
HOEBQSU = Short.parseShort(s);
} else {
HOEBQSU = Short.MIN_VALUE;
}
}

protected final void initHOEBQW(String s) {
if (!s.trim().isEmpty()) {
HOEBQW = Short.parseShort(s);
} else {
HOEBQW = Short.MIN_VALUE;
}
}

protected final void initHOEBQWE(String s) {
if (!s.trim().isEmpty()) {
HOEBQWE = Byte.parseByte(s);
} else {
HOEBQWE = Byte.MIN_VALUE;
}
}

protected final void initHOEBQWL(String s) {
if (!s.trim().isEmpty()) {
HOEBQWL = Short.parseShort(s);
} else {
HOEBQWL = Short.MIN_VALUE;
}
}

protected final void initHOEBQWR(String s) {
if (!s.trim().isEmpty()) {
HOEBQWR = Byte.parseByte(s);
} else {
HOEBQWR = Byte.MIN_VALUE;
}
}

protected final void initHOEBQWU(String s) {
if (!s.trim().isEmpty()) {
HOEBQWU = Short.parseShort(s);
} else {
HOEBQWU = Short.MIN_VALUE;
}
}

protected final void initHOED(String s) {
if (!s.trim().isEmpty()) {
HOED = Byte.parseByte(s);
} else {
HOED = Byte.MIN_VALUE;
}
}

protected final void initHOEDM(String s) {
if (!s.trim().isEmpty()) {
HOEDM = Short.parseShort(s);
} else {
HOEDM = Short.MIN_VALUE;
}
}

protected final void initHOEDME(String s) {
if (!s.trim().isEmpty()) {
HOEDME = Byte.parseByte(s);
} else {
HOEDME = Byte.MIN_VALUE;
}
}

protected final void initHOEDML(String s) {
if (!s.trim().isEmpty()) {
HOEDML = Byte.parseByte(s);
} else {
HOEDML = Byte.MIN_VALUE;
}
}

protected final void initHOEDMR(String s) {
if (!s.trim().isEmpty()) {
HOEDMR = Byte.parseByte(s);
} else {
HOEDMR = Byte.MIN_VALUE;
}
}

protected final void initHOEDMU(String s) {
if (!s.trim().isEmpty()) {
HOEDMU = Byte.parseByte(s);
} else {
HOEDMU = Byte.MIN_VALUE;
}
}

protected final void initHOEDQ(String s) {
if (!s.trim().isEmpty()) {
HOEDQ = Short.parseShort(s);
} else {
HOEDQ = Short.MIN_VALUE;
}
}

protected final void initHOEDQE(String s) {
if (!s.trim().isEmpty()) {
HOEDQE = Byte.parseByte(s);
} else {
HOEDQE = Byte.MIN_VALUE;
}
}

protected final void initHOEDQL(String s) {
if (!s.trim().isEmpty()) {
HOEDQL = Short.parseShort(s);
} else {
HOEDQL = Short.MIN_VALUE;
}
}

protected final void initHOEDQR(String s) {
if (!s.trim().isEmpty()) {
HOEDQR = Byte.parseByte(s);
} else {
HOEDQR = Byte.MIN_VALUE;
}
}

protected final void initHOEDQU(String s) {
if (!s.trim().isEmpty()) {
HOEDQU = Short.parseShort(s);
} else {
HOEDQU = Short.MIN_VALUE;
}
}

protected final void initHOEOS(String s) {
if (!s.trim().isEmpty()) {
HOEOS = Byte.parseByte(s);
} else {
HOEOS = Byte.MIN_VALUE;
}
}

protected final void initHOEOSE(String s) {
if (!s.trim().isEmpty()) {
HOEOSE = Byte.parseByte(s);
} else {
HOEOSE = Byte.MIN_VALUE;
}
}

protected final void initHOEOSL(String s) {
if (!s.trim().isEmpty()) {
HOEOSL = Byte.parseByte(s);
} else {
HOEOSL = Byte.MIN_VALUE;
}
}

protected final void initHOEOSR(String s) {
if (!s.trim().isEmpty()) {
HOEOSR = Byte.parseByte(s);
} else {
HOEOSR = Byte.MIN_VALUE;
}
}

protected final void initHOEOSU(String s) {
if (!s.trim().isEmpty()) {
HOEOSU = Byte.parseByte(s);
} else {
HOEOSU = Byte.MIN_VALUE;
}
}

protected final void initHOEOW(String s) {
if (!s.trim().isEmpty()) {
HOEOW = Byte.parseByte(s);
} else {
HOEOW = Byte.MIN_VALUE;
}
}

protected final void initHOEOWE(String s) {
if (!s.trim().isEmpty()) {
HOEOWE = Byte.parseByte(s);
} else {
HOEOWE = Byte.MIN_VALUE;
}
}

protected final void initHOEOWL(String s) {
if (!s.trim().isEmpty()) {
HOEOWL = Byte.parseByte(s);
} else {
HOEOWL = Byte.MIN_VALUE;
}
}

protected final void initHOEOWR(String s) {
if (!s.trim().isEmpty()) {
HOEOWR = Byte.parseByte(s);
} else {
HOEOWR = Byte.MIN_VALUE;
}
}

protected final void initHOEOWU(String s) {
if (!s.trim().isEmpty()) {
HOEOWU = Byte.parseByte(s);
} else {
HOEOWU = Byte.MIN_VALUE;
}
}

protected final void initHOEPAY(String s) {
if (!s.trim().isEmpty()) {
HOEPAY = Byte.parseByte(s);
} else {
HOEPAY = Byte.MIN_VALUE;
}
}

protected final void initHOEPS(String s) {
if (!s.trim().isEmpty()) {
HOEPS = Byte.parseByte(s);
} else {
HOEPS = Byte.MIN_VALUE;
}
}

protected final void initHOEPSE(String s) {
if (!s.trim().isEmpty()) {
HOEPSE = Byte.parseByte(s);
} else {
HOEPSE = Byte.MIN_VALUE;
}
}

protected final void initHOEPSL(String s) {
if (!s.trim().isEmpty()) {
HOEPSL = Byte.parseByte(s);
} else {
HOEPSL = Byte.MIN_VALUE;
}
}

protected final void initHOEPSR(String s) {
if (!s.trim().isEmpty()) {
HOEPSR = Byte.parseByte(s);
} else {
HOEPSR = Byte.MIN_VALUE;
}
}

protected final void initHOEPSU(String s) {
if (!s.trim().isEmpty()) {
HOEPSU = Byte.parseByte(s);
} else {
HOEPSU = Byte.MIN_VALUE;
}
}

protected final void initHOEPW(String s) {
if (!s.trim().isEmpty()) {
HOEPW = Byte.parseByte(s);
} else {
HOEPW = Byte.MIN_VALUE;
}
}

protected final void initHOEPWE(String s) {
if (!s.trim().isEmpty()) {
HOEPWE = Byte.parseByte(s);
} else {
HOEPWE = Byte.MIN_VALUE;
}
}

protected final void initHOEPWL(String s) {
if (!s.trim().isEmpty()) {
HOEPWL = Byte.parseByte(s);
} else {
HOEPWL = Byte.MIN_VALUE;
}
}

protected final void initHOEPWR(String s) {
if (!s.trim().isEmpty()) {
HOEPWR = Byte.parseByte(s);
} else {
HOEPWR = Byte.MIN_VALUE;
}
}

protected final void initHOEPWU(String s) {
if (!s.trim().isEmpty()) {
HOEPWU = Byte.parseByte(s);
} else {
HOEPWU = Byte.MIN_VALUE;
}
}

protected final void initHOFB(String s) {
if (!s.trim().isEmpty()) {
HOFB = Byte.parseByte(s);
} else {
HOFB = Byte.MIN_VALUE;
}
}

protected final void initHOFBMS(String s) {
if (!s.trim().isEmpty()) {
HOFBMS = Short.parseShort(s);
} else {
HOFBMS = Short.MIN_VALUE;
}
}

protected final void initHOFBMSE(String s) {
if (!s.trim().isEmpty()) {
HOFBMSE = Byte.parseByte(s);
} else {
HOFBMSE = Byte.MIN_VALUE;
}
}

protected final void initHOFBMSL(String s) {
if (!s.trim().isEmpty()) {
HOFBMSL = Byte.parseByte(s);
} else {
HOFBMSL = Byte.MIN_VALUE;
}
}

protected final void initHOFBMSR(String s) {
if (!s.trim().isEmpty()) {
HOFBMSR = Byte.parseByte(s);
} else {
HOFBMSR = Byte.MIN_VALUE;
}
}

protected final void initHOFBMSU(String s) {
if (!s.trim().isEmpty()) {
HOFBMSU = Byte.parseByte(s);
} else {
HOFBMSU = Byte.MIN_VALUE;
}
}

protected final void initHOFBMW(String s) {
if (!s.trim().isEmpty()) {
HOFBMW = Short.parseShort(s);
} else {
HOFBMW = Short.MIN_VALUE;
}
}

protected final void initHOFBMWE(String s) {
if (!s.trim().isEmpty()) {
HOFBMWE = Byte.parseByte(s);
} else {
HOFBMWE = Byte.MIN_VALUE;
}
}

protected final void initHOFBMWL(String s) {
if (!s.trim().isEmpty()) {
HOFBMWL = Byte.parseByte(s);
} else {
HOFBMWL = Byte.MIN_VALUE;
}
}

protected final void initHOFBMWR(String s) {
if (!s.trim().isEmpty()) {
HOFBMWR = Byte.parseByte(s);
} else {
HOFBMWR = Byte.MIN_VALUE;
}
}

protected final void initHOFBMWU(String s) {
if (!s.trim().isEmpty()) {
HOFBMWU = Byte.parseByte(s);
} else {
HOFBMWU = Byte.MIN_VALUE;
}
}

protected final void initHOFBQS(String s) {
if (!s.trim().isEmpty()) {
HOFBQS = Short.parseShort(s);
} else {
HOFBQS = Short.MIN_VALUE;
}
}

protected final void initHOFBQSE(String s) {
if (!s.trim().isEmpty()) {
HOFBQSE = Byte.parseByte(s);
} else {
HOFBQSE = Byte.MIN_VALUE;
}
}

protected final void initHOFBQSL(String s) {
if (!s.trim().isEmpty()) {
HOFBQSL = Short.parseShort(s);
} else {
HOFBQSL = Short.MIN_VALUE;
}
}

protected final void initHOFBQSR(String s) {
if (!s.trim().isEmpty()) {
HOFBQSR = Byte.parseByte(s);
} else {
HOFBQSR = Byte.MIN_VALUE;
}
}

protected final void initHOFBQSU(String s) {
if (!s.trim().isEmpty()) {
HOFBQSU = Short.parseShort(s);
} else {
HOFBQSU = Short.MIN_VALUE;
}
}

protected final void initHOFBQW(String s) {
if (!s.trim().isEmpty()) {
HOFBQW = Short.parseShort(s);
} else {
HOFBQW = Short.MIN_VALUE;
}
}

protected final void initHOFBQWE(String s) {
if (!s.trim().isEmpty()) {
HOFBQWE = Byte.parseByte(s);
} else {
HOFBQWE = Byte.MIN_VALUE;
}
}

protected final void initHOFBQWL(String s) {
if (!s.trim().isEmpty()) {
HOFBQWL = Short.parseShort(s);
} else {
HOFBQWL = Short.MIN_VALUE;
}
}

protected final void initHOFBQWR(String s) {
if (!s.trim().isEmpty()) {
HOFBQWR = Byte.parseByte(s);
} else {
HOFBQWR = Byte.MIN_VALUE;
}
}

protected final void initHOFBQWU(String s) {
if (!s.trim().isEmpty()) {
HOFBQWU = Short.parseShort(s);
} else {
HOFBQWU = Short.MIN_VALUE;
}
}

protected final void initHOFCS(String s) {
if (!s.trim().isEmpty()) {
HOFCS = Byte.parseByte(s);
} else {
HOFCS = Byte.MIN_VALUE;
}
}

protected final void initHOFCSE(String s) {
if (!s.trim().isEmpty()) {
HOFCSE = Byte.parseByte(s);
} else {
HOFCSE = Byte.MIN_VALUE;
}
}

protected final void initHOFCSL(String s) {
if (!s.trim().isEmpty()) {
HOFCSL = Byte.parseByte(s);
} else {
HOFCSL = Byte.MIN_VALUE;
}
}

protected final void initHOFCSR(String s) {
if (!s.trim().isEmpty()) {
HOFCSR = Byte.parseByte(s);
} else {
HOFCSR = Byte.MIN_VALUE;
}
}

protected final void initHOFCSU(String s) {
if (!s.trim().isEmpty()) {
HOFCSU = Byte.parseByte(s);
} else {
HOFCSU = Byte.MIN_VALUE;
}
}

protected final void initHOFCW(String s) {
if (!s.trim().isEmpty()) {
HOFCW = Byte.parseByte(s);
} else {
HOFCW = Byte.MIN_VALUE;
}
}

protected final void initHOFCWE(String s) {
if (!s.trim().isEmpty()) {
HOFCWE = Byte.parseByte(s);
} else {
HOFCWE = Byte.MIN_VALUE;
}
}

protected final void initHOFCWL(String s) {
if (!s.trim().isEmpty()) {
HOFCWL = Byte.parseByte(s);
} else {
HOFCWL = Byte.MIN_VALUE;
}
}

protected final void initHOFCWR(String s) {
if (!s.trim().isEmpty()) {
HOFCWR = Byte.parseByte(s);
} else {
HOFCWR = Byte.MIN_VALUE;
}
}

protected final void initHOFCWU(String s) {
if (!s.trim().isEmpty()) {
HOFCWU = Byte.parseByte(s);
} else {
HOFCWU = Byte.MIN_VALUE;
}
}

protected final void initHOFD(String s) {
if (!s.trim().isEmpty()) {
HOFD = Byte.parseByte(s);
} else {
HOFD = Byte.MIN_VALUE;
}
}

protected final void initHOFDM(String s) {
if (!s.trim().isEmpty()) {
HOFDM = Short.parseShort(s);
} else {
HOFDM = Short.MIN_VALUE;
}
}

protected final void initHOFDME(String s) {
if (!s.trim().isEmpty()) {
HOFDME = Byte.parseByte(s);
} else {
HOFDME = Byte.MIN_VALUE;
}
}

protected final void initHOFDML(String s) {
if (!s.trim().isEmpty()) {
HOFDML = Byte.parseByte(s);
} else {
HOFDML = Byte.MIN_VALUE;
}
}

protected final void initHOFDMR(String s) {
if (!s.trim().isEmpty()) {
HOFDMR = Byte.parseByte(s);
} else {
HOFDMR = Byte.MIN_VALUE;
}
}

protected final void initHOFDMU(String s) {
if (!s.trim().isEmpty()) {
HOFDMU = Byte.parseByte(s);
} else {
HOFDMU = Byte.MIN_VALUE;
}
}

protected final void initHOFDQ(String s) {
if (!s.trim().isEmpty()) {
HOFDQ = Short.parseShort(s);
} else {
HOFDQ = Short.MIN_VALUE;
}
}

protected final void initHOFDQE(String s) {
if (!s.trim().isEmpty()) {
HOFDQE = Byte.parseByte(s);
} else {
HOFDQE = Byte.MIN_VALUE;
}
}

protected final void initHOFDQL(String s) {
if (!s.trim().isEmpty()) {
HOFDQL = Short.parseShort(s);
} else {
HOFDQL = Short.MIN_VALUE;
}
}

protected final void initHOFDQR(String s) {
if (!s.trim().isEmpty()) {
HOFDQR = Byte.parseByte(s);
} else {
HOFDQR = Byte.MIN_VALUE;
}
}

protected final void initHOFDQU(String s) {
if (!s.trim().isEmpty()) {
HOFDQU = Short.parseShort(s);
} else {
HOFDQU = Short.MIN_VALUE;
}
}

protected final void initHOFOIS(String s) {
if (!s.trim().isEmpty()) {
HOFOIS = Byte.parseByte(s);
} else {
HOFOIS = Byte.MIN_VALUE;
}
}

protected final void initHOFOISE(String s) {
if (!s.trim().isEmpty()) {
HOFOISE = Byte.parseByte(s);
} else {
HOFOISE = Byte.MIN_VALUE;
}
}

protected final void initHOFOISL(String s) {
if (!s.trim().isEmpty()) {
HOFOISL = Byte.parseByte(s);
} else {
HOFOISL = Byte.MIN_VALUE;
}
}

protected final void initHOFOISR(String s) {
if (!s.trim().isEmpty()) {
HOFOISR = Byte.parseByte(s);
} else {
HOFOISR = Byte.MIN_VALUE;
}
}

protected final void initHOFOISU(String s) {
if (!s.trim().isEmpty()) {
HOFOISU = Byte.parseByte(s);
} else {
HOFOISU = Byte.MIN_VALUE;
}
}

protected final void initHOFOIW(String s) {
if (!s.trim().isEmpty()) {
HOFOIW = Byte.parseByte(s);
} else {
HOFOIW = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWE(String s) {
if (!s.trim().isEmpty()) {
HOFOIWE = Byte.parseByte(s);
} else {
HOFOIWE = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWL(String s) {
if (!s.trim().isEmpty()) {
HOFOIWL = Byte.parseByte(s);
} else {
HOFOIWL = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWR(String s) {
if (!s.trim().isEmpty()) {
HOFOIWR = Byte.parseByte(s);
} else {
HOFOIWR = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWU(String s) {
if (!s.trim().isEmpty()) {
HOFOIWU = Byte.parseByte(s);
} else {
HOFOIWU = Byte.MIN_VALUE;
}
}

protected final void initHOFOODE(String s) {
if (!s.trim().isEmpty()) {
HOFOODE = Byte.parseByte(s);
} else {
HOFOODE = Byte.MIN_VALUE;
}
}

protected final void initHOFOODL(String s) {
if (!s.trim().isEmpty()) {
HOFOODL = Short.parseShort(s);
} else {
HOFOODL = Short.MIN_VALUE;
}
}

protected final void initHOFOODR(String s) {
if (!s.trim().isEmpty()) {
HOFOODR = Byte.parseByte(s);
} else {
HOFOODR = Byte.MIN_VALUE;
}
}

protected final void initHOFOODU(String s) {
if (!s.trim().isEmpty()) {
HOFOODU = Short.parseShort(s);
} else {
HOFOODU = Short.MIN_VALUE;
}
}

protected final void initHOFOS(String s) {
if (!s.trim().isEmpty()) {
HOFOS = Byte.parseByte(s);
} else {
HOFOS = Byte.MIN_VALUE;
}
}

protected final void initHOFOSE(String s) {
if (!s.trim().isEmpty()) {
HOFOSE = Byte.parseByte(s);
} else {
HOFOSE = Byte.MIN_VALUE;
}
}

protected final void initHOFOSL(String s) {
if (!s.trim().isEmpty()) {
HOFOSL = Byte.parseByte(s);
} else {
HOFOSL = Byte.MIN_VALUE;
}
}

protected final void initHOFOSR(String s) {
if (!s.trim().isEmpty()) {
HOFOSR = Byte.parseByte(s);
} else {
HOFOSR = Byte.MIN_VALUE;
}
}

protected final void initHOFOSU(String s) {
if (!s.trim().isEmpty()) {
HOFOSU = Byte.parseByte(s);
} else {
HOFOSU = Byte.MIN_VALUE;
}
}

protected final void initHOFOW(String s) {
if (!s.trim().isEmpty()) {
HOFOW = Byte.parseByte(s);
} else {
HOFOW = Byte.MIN_VALUE;
}
}

protected final void initHOFOWE(String s) {
if (!s.trim().isEmpty()) {
HOFOWE = Byte.parseByte(s);
} else {
HOFOWE = Byte.MIN_VALUE;
}
}

protected final void initHOFOWL(String s) {
if (!s.trim().isEmpty()) {
HOFOWL = Byte.parseByte(s);
} else {
HOFOWL = Byte.MIN_VALUE;
}
}

protected final void initHOFOWR(String s) {
if (!s.trim().isEmpty()) {
HOFOWR = Byte.parseByte(s);
} else {
HOFOWR = Byte.MIN_VALUE;
}
}

protected final void initHOFOWU(String s) {
if (!s.trim().isEmpty()) {
HOFOWU = Byte.parseByte(s);
} else {
HOFOWU = Byte.MIN_VALUE;
}
}

protected final void initHOFPAY(String s) {
if (!s.trim().isEmpty()) {
HOFPAY = Byte.parseByte(s);
} else {
HOFPAY = Byte.MIN_VALUE;
}
}

protected final void initHOFPGS(String s) {
if (!s.trim().isEmpty()) {
HOFPGS = Byte.parseByte(s);
} else {
HOFPGS = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSE(String s) {
if (!s.trim().isEmpty()) {
HOFPGSE = Byte.parseByte(s);
} else {
HOFPGSE = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSL(String s) {
if (!s.trim().isEmpty()) {
HOFPGSL = Byte.parseByte(s);
} else {
HOFPGSL = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSR(String s) {
if (!s.trim().isEmpty()) {
HOFPGSR = Byte.parseByte(s);
} else {
HOFPGSR = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSU(String s) {
if (!s.trim().isEmpty()) {
HOFPGSU = Byte.parseByte(s);
} else {
HOFPGSU = Byte.MIN_VALUE;
}
}

protected final void initHOFPGW(String s) {
if (!s.trim().isEmpty()) {
HOFPGW = Byte.parseByte(s);
} else {
HOFPGW = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWE(String s) {
if (!s.trim().isEmpty()) {
HOFPGWE = Byte.parseByte(s);
} else {
HOFPGWE = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWL(String s) {
if (!s.trim().isEmpty()) {
HOFPGWL = Byte.parseByte(s);
} else {
HOFPGWL = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWR(String s) {
if (!s.trim().isEmpty()) {
HOFPGWR = Byte.parseByte(s);
} else {
HOFPGWR = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWU(String s) {
if (!s.trim().isEmpty()) {
HOFPGWU = Byte.parseByte(s);
} else {
HOFPGWU = Byte.MIN_VALUE;
}
}

protected final void initHOFPS(String s) {
if (!s.trim().isEmpty()) {
HOFPS = Byte.parseByte(s);
} else {
HOFPS = Byte.MIN_VALUE;
}
}

protected final void initHOFPSE(String s) {
if (!s.trim().isEmpty()) {
HOFPSE = Byte.parseByte(s);
} else {
HOFPSE = Byte.MIN_VALUE;
}
}

protected final void initHOFPSL(String s) {
if (!s.trim().isEmpty()) {
HOFPSL = Byte.parseByte(s);
} else {
HOFPSL = Byte.MIN_VALUE;
}
}

protected final void initHOFPSR(String s) {
if (!s.trim().isEmpty()) {
HOFPSR = Byte.parseByte(s);
} else {
HOFPSR = Byte.MIN_VALUE;
}
}

protected final void initHOFPSU(String s) {
if (!s.trim().isEmpty()) {
HOFPSU = Byte.parseByte(s);
} else {
HOFPSU = Byte.MIN_VALUE;
}
}

protected final void initHOFPW(String s) {
if (!s.trim().isEmpty()) {
HOFPW = Byte.parseByte(s);
} else {
HOFPW = Byte.MIN_VALUE;
}
}

protected final void initHOFPWE(String s) {
if (!s.trim().isEmpty()) {
HOFPWE = Byte.parseByte(s);
} else {
HOFPWE = Byte.MIN_VALUE;
}
}

protected final void initHOFPWL(String s) {
if (!s.trim().isEmpty()) {
HOFPWL = Byte.parseByte(s);
} else {
HOFPWL = Byte.MIN_VALUE;
}
}

protected final void initHOFPWR(String s) {
if (!s.trim().isEmpty()) {
HOFPWR = Byte.parseByte(s);
} else {
HOFPWR = Byte.MIN_VALUE;
}
}

protected final void initHOFPWU(String s) {
if (!s.trim().isEmpty()) {
HOFPWU = Byte.parseByte(s);
} else {
HOFPWU = Byte.MIN_VALUE;
}
}

protected final void initHOFSM(String s) {
if (!s.trim().isEmpty()) {
HOFSM = Short.parseShort(s);
} else {
HOFSM = Short.MIN_VALUE;
}
}

protected final void initHOFSME(String s) {
if (!s.trim().isEmpty()) {
HOFSME = Byte.parseByte(s);
} else {
HOFSME = Byte.MIN_VALUE;
}
}

protected final void initHOFSML(String s) {
if (!s.trim().isEmpty()) {
HOFSML = Byte.parseByte(s);
} else {
HOFSML = Byte.MIN_VALUE;
}
}

protected final void initHOFSMR(String s) {
if (!s.trim().isEmpty()) {
HOFSMR = Byte.parseByte(s);
} else {
HOFSMR = Byte.MIN_VALUE;
}
}

protected final void initHOFSMU(String s) {
if (!s.trim().isEmpty()) {
HOFSMU = Byte.parseByte(s);
} else {
HOFSMU = Byte.MIN_VALUE;
}
}

protected final void initHOFSP(String s) {
if (!s.trim().isEmpty()) {
HOFSP = Byte.parseByte(s);
} else {
HOFSP = Byte.MIN_VALUE;
}
}

protected final void initHOFSQ(String s) {
if (!s.trim().isEmpty()) {
HOFSQ = Byte.parseByte(s);
} else {
HOFSQ = Byte.MIN_VALUE;
}
}

protected final void initHOFSQE(String s) {
if (!s.trim().isEmpty()) {
HOFSQE = Byte.parseByte(s);
} else {
HOFSQE = Byte.MIN_VALUE;
}
}

protected final void initHOFSQL(String s) {
if (!s.trim().isEmpty()) {
HOFSQL = Byte.parseByte(s);
} else {
HOFSQL = Byte.MIN_VALUE;
}
}

protected final void initHOFSQR(String s) {
if (!s.trim().isEmpty()) {
HOFSQR = Byte.parseByte(s);
} else {
HOFSQR = Byte.MIN_VALUE;
}
}

protected final void initHOFSQU(String s) {
if (!s.trim().isEmpty()) {
HOFSQU = Byte.parseByte(s);
} else {
HOFSQU = Byte.MIN_VALUE;
}
}

protected final void initHOFSUP(String s) {
if (!s.trim().isEmpty()) {
HOFSUP = Byte.parseByte(s);
} else {
HOFSUP = Byte.MIN_VALUE;
}
}

protected final void initHOFSW(String s) {
if (!s.trim().isEmpty()) {
HOFSW = Short.parseShort(s);
} else {
HOFSW = Short.MIN_VALUE;
}
}

protected final void initHOFSWE(String s) {
if (!s.trim().isEmpty()) {
HOFSWE = Byte.parseByte(s);
} else {
HOFSWE = Byte.MIN_VALUE;
}
}

protected final void initHOFSWL(String s) {
if (!s.trim().isEmpty()) {
HOFSWL = Byte.parseByte(s);
} else {
HOFSWL = Byte.MIN_VALUE;
}
}

protected final void initHOFSWR(String s) {
if (!s.trim().isEmpty()) {
HOFSWR = Byte.parseByte(s);
} else {
HOFSWR = Byte.MIN_VALUE;
}
}

protected final void initHOFSWU(String s) {
if (!s.trim().isEmpty()) {
HOFSWU = Byte.parseByte(s);
} else {
HOFSWU = Byte.MIN_VALUE;
}
}

protected final void initHOFTOG(String s) {
if (!s.trim().isEmpty()) {
HOFTOG = Byte.parseByte(s);
} else {
HOFTOG = Byte.MIN_VALUE;
}
}

protected final void initHOFUEL1(String s) {
if (!s.trim().isEmpty()) {
HOFUEL1 = Byte.parseByte(s);
} else {
HOFUEL1 = Byte.MIN_VALUE;
}
}

protected final void initHOFUEL2(String s) {
if (!s.trim().isEmpty()) {
HOFUEL2 = Byte.parseByte(s);
} else {
HOFUEL2 = Byte.MIN_VALUE;
}
}

protected final void initHOFUEL3(String s) {
if (!s.trim().isEmpty()) {
HOFUEL3 = Byte.parseByte(s);
} else {
HOFUEL3 = Byte.MIN_VALUE;
}
}

protected final void initHOFUEL4(String s) {
if (!s.trim().isEmpty()) {
HOFUEL4 = Byte.parseByte(s);
} else {
HOFUEL4 = Byte.MIN_VALUE;
}
}

protected final void initHOFUEL5(String s) {
if (!s.trim().isEmpty()) {
HOFUEL5 = Byte.parseByte(s);
} else {
HOFUEL5 = Byte.MIN_VALUE;
}
}

protected final void initHOFUEZ1(String s) {
if (!s.trim().isEmpty()) {
HOFUEZ1 = Byte.parseByte(s);
} else {
HOFUEZ1 = Byte.MIN_VALUE;
}
}

protected final void initHOFUEZ2(String s) {
if (!s.trim().isEmpty()) {
HOFUEZ2 = Byte.parseByte(s);
} else {
HOFUEZ2 = Byte.MIN_VALUE;
}
}

protected final void initHOFWS(String s) {
if (!s.trim().isEmpty()) {
HOFWS = Byte.parseByte(s);
} else {
HOFWS = Byte.MIN_VALUE;
}
}

protected final void initHOFWSE(String s) {
if (!s.trim().isEmpty()) {
HOFWSE = Byte.parseByte(s);
} else {
HOFWSE = Byte.MIN_VALUE;
}
}

protected final void initHOFWSL(String s) {
if (!s.trim().isEmpty()) {
HOFWSL = Byte.parseByte(s);
} else {
HOFWSL = Byte.MIN_VALUE;
}
}

protected final void initHOFWSR(String s) {
if (!s.trim().isEmpty()) {
HOFWSR = Byte.parseByte(s);
} else {
HOFWSR = Byte.MIN_VALUE;
}
}

protected final void initHOFWSU(String s) {
if (!s.trim().isEmpty()) {
HOFWSU = Byte.parseByte(s);
} else {
HOFWSU = Byte.MIN_VALUE;
}
}

protected final void initHOFWW(String s) {
if (!s.trim().isEmpty()) {
HOFWW = Byte.parseByte(s);
} else {
HOFWW = Byte.MIN_VALUE;
}
}

protected final void initHOFWWE(String s) {
if (!s.trim().isEmpty()) {
HOFWWE = Byte.parseByte(s);
} else {
HOFWWE = Byte.MIN_VALUE;
}
}

protected final void initHOFWWL(String s) {
if (!s.trim().isEmpty()) {
HOFWWL = Byte.parseByte(s);
} else {
HOFWWL = Byte.MIN_VALUE;
}
}

protected final void initHOFWWR(String s) {
if (!s.trim().isEmpty()) {
HOFWWR = Byte.parseByte(s);
} else {
HOFWWR = Byte.MIN_VALUE;
}
}

protected final void initHOFWWU(String s) {
if (!s.trim().isEmpty()) {
HOFWWU = Byte.parseByte(s);
} else {
HOFWWU = Byte.MIN_VALUE;
}
}

protected final void initHOFXS(String s) {
if (!s.trim().isEmpty()) {
HOFXS = Byte.parseByte(s);
} else {
HOFXS = Byte.MIN_VALUE;
}
}

protected final void initHOFXSE(String s) {
if (!s.trim().isEmpty()) {
HOFXSE = Byte.parseByte(s);
} else {
HOFXSE = Byte.MIN_VALUE;
}
}

protected final void initHOFXSL(String s) {
if (!s.trim().isEmpty()) {
HOFXSL = Byte.parseByte(s);
} else {
HOFXSL = Byte.MIN_VALUE;
}
}

protected final void initHOFXSR(String s) {
if (!s.trim().isEmpty()) {
HOFXSR = Byte.parseByte(s);
} else {
HOFXSR = Byte.MIN_VALUE;
}
}

protected final void initHOFXSU(String s) {
if (!s.trim().isEmpty()) {
HOFXSU = Byte.parseByte(s);
} else {
HOFXSU = Byte.MIN_VALUE;
}
}

protected final void initHOFXW(String s) {
if (!s.trim().isEmpty()) {
HOFXW = Byte.parseByte(s);
} else {
HOFXW = Byte.MIN_VALUE;
}
}

protected final void initHOFXWE(String s) {
if (!s.trim().isEmpty()) {
HOFXWE = Byte.parseByte(s);
} else {
HOFXWE = Byte.MIN_VALUE;
}
}

protected final void initHOFXWL(String s) {
if (!s.trim().isEmpty()) {
HOFXWL = Byte.parseByte(s);
} else {
HOFXWL = Byte.MIN_VALUE;
}
}

protected final void initHOFXWR(String s) {
if (!s.trim().isEmpty()) {
HOFXWR = Byte.parseByte(s);
} else {
HOFXWR = Byte.MIN_VALUE;
}
}

protected final void initHOFXWU(String s) {
if (!s.trim().isEmpty()) {
HOFXWU = Byte.parseByte(s);
} else {
HOFXWU = Byte.MIN_VALUE;
}
}

protected final void initHOGBMS(String s) {
if (!s.trim().isEmpty()) {
HOGBMS = Short.parseShort(s);
} else {
HOGBMS = Short.MIN_VALUE;
}
}

protected final void initHOGBMSE(String s) {
if (!s.trim().isEmpty()) {
HOGBMSE = Byte.parseByte(s);
} else {
HOGBMSE = Byte.MIN_VALUE;
}
}

protected final void initHOGBMSL(String s) {
if (!s.trim().isEmpty()) {
HOGBMSL = Byte.parseByte(s);
} else {
HOGBMSL = Byte.MIN_VALUE;
}
}

protected final void initHOGBMSR(String s) {
if (!s.trim().isEmpty()) {
HOGBMSR = Byte.parseByte(s);
} else {
HOGBMSR = Byte.MIN_VALUE;
}
}

protected final void initHOGBMSU(String s) {
if (!s.trim().isEmpty()) {
HOGBMSU = Byte.parseByte(s);
} else {
HOGBMSU = Byte.MIN_VALUE;
}
}

protected final void initHOGBMW(String s) {
if (!s.trim().isEmpty()) {
HOGBMW = Short.parseShort(s);
} else {
HOGBMW = Short.MIN_VALUE;
}
}

protected final void initHOGBMWE(String s) {
if (!s.trim().isEmpty()) {
HOGBMWE = Byte.parseByte(s);
} else {
HOGBMWE = Byte.MIN_VALUE;
}
}

protected final void initHOGBMWL(String s) {
if (!s.trim().isEmpty()) {
HOGBMWL = Byte.parseByte(s);
} else {
HOGBMWL = Byte.MIN_VALUE;
}
}

protected final void initHOGBMWR(String s) {
if (!s.trim().isEmpty()) {
HOGBMWR = Byte.parseByte(s);
} else {
HOGBMWR = Byte.MIN_VALUE;
}
}

protected final void initHOGBMWU(String s) {
if (!s.trim().isEmpty()) {
HOGBMWU = Byte.parseByte(s);
} else {
HOGBMWU = Byte.MIN_VALUE;
}
}

protected final void initHOGBP(String s) {
if (!s.trim().isEmpty()) {
HOGBP = Byte.parseByte(s);
} else {
HOGBP = Byte.MIN_VALUE;
}
}

protected final void initHOGBQS(String s) {
if (!s.trim().isEmpty()) {
HOGBQS = Short.parseShort(s);
} else {
HOGBQS = Short.MIN_VALUE;
}
}

protected final void initHOGBQSE(String s) {
if (!s.trim().isEmpty()) {
HOGBQSE = Byte.parseByte(s);
} else {
HOGBQSE = Byte.MIN_VALUE;
}
}

protected final void initHOGBQSL(String s) {
if (!s.trim().isEmpty()) {
HOGBQSL = Short.parseShort(s);
} else {
HOGBQSL = Short.MIN_VALUE;
}
}

protected final void initHOGBQSR(String s) {
if (!s.trim().isEmpty()) {
HOGBQSR = Byte.parseByte(s);
} else {
HOGBQSR = Byte.MIN_VALUE;
}
}

protected final void initHOGBQSU(String s) {
if (!s.trim().isEmpty()) {
HOGBQSU = Short.parseShort(s);
} else {
HOGBQSU = Short.MIN_VALUE;
}
}

protected final void initHOGBQW(String s) {
if (!s.trim().isEmpty()) {
HOGBQW = Short.parseShort(s);
} else {
HOGBQW = Short.MIN_VALUE;
}
}

protected final void initHOGBQWE(String s) {
if (!s.trim().isEmpty()) {
HOGBQWE = Byte.parseByte(s);
} else {
HOGBQWE = Byte.MIN_VALUE;
}
}

protected final void initHOGBQWL(String s) {
if (!s.trim().isEmpty()) {
HOGBQWL = Short.parseShort(s);
} else {
HOGBQWL = Short.MIN_VALUE;
}
}

protected final void initHOGBQWR(String s) {
if (!s.trim().isEmpty()) {
HOGBQWR = Byte.parseByte(s);
} else {
HOGBQWR = Byte.MIN_VALUE;
}
}

protected final void initHOGBQWU(String s) {
if (!s.trim().isEmpty()) {
HOGBQWU = Short.parseShort(s);
} else {
HOGBQWU = Short.MIN_VALUE;
}
}

protected final void initHOGD(String s) {
if (!s.trim().isEmpty()) {
HOGD = Byte.parseByte(s);
} else {
HOGD = Byte.MIN_VALUE;
}
}

protected final void initHOGDM(String s) {
if (!s.trim().isEmpty()) {
HOGDM = Short.parseShort(s);
} else {
HOGDM = Short.MIN_VALUE;
}
}

protected final void initHOGDME(String s) {
if (!s.trim().isEmpty()) {
HOGDME = Byte.parseByte(s);
} else {
HOGDME = Byte.MIN_VALUE;
}
}

protected final void initHOGDML(String s) {
if (!s.trim().isEmpty()) {
HOGDML = Byte.parseByte(s);
} else {
HOGDML = Byte.MIN_VALUE;
}
}

protected final void initHOGDMR(String s) {
if (!s.trim().isEmpty()) {
HOGDMR = Byte.parseByte(s);
} else {
HOGDMR = Byte.MIN_VALUE;
}
}

protected final void initHOGDMU(String s) {
if (!s.trim().isEmpty()) {
HOGDMU = Byte.parseByte(s);
} else {
HOGDMU = Byte.MIN_VALUE;
}
}

protected final void initHOGDQ(String s) {
if (!s.trim().isEmpty()) {
HOGDQ = Short.parseShort(s);
} else {
HOGDQ = Short.MIN_VALUE;
}
}

protected final void initHOGDQE(String s) {
if (!s.trim().isEmpty()) {
HOGDQE = Byte.parseByte(s);
} else {
HOGDQE = Byte.MIN_VALUE;
}
}

protected final void initHOGDQL(String s) {
if (!s.trim().isEmpty()) {
HOGDQL = Short.parseShort(s);
} else {
HOGDQL = Short.MIN_VALUE;
}
}

protected final void initHOGDQR(String s) {
if (!s.trim().isEmpty()) {
HOGDQR = Byte.parseByte(s);
} else {
HOGDQR = Byte.MIN_VALUE;
}
}

protected final void initHOGDQU(String s) {
if (!s.trim().isEmpty()) {
HOGDQU = Short.parseShort(s);
} else {
HOGDQU = Short.MIN_VALUE;
}
}

protected final void initHOGOS(String s) {
if (!s.trim().isEmpty()) {
HOGOS = Byte.parseByte(s);
} else {
HOGOS = Byte.MIN_VALUE;
}
}

protected final void initHOGOSE(String s) {
if (!s.trim().isEmpty()) {
HOGOSE = Byte.parseByte(s);
} else {
HOGOSE = Byte.MIN_VALUE;
}
}

protected final void initHOGOSL(String s) {
if (!s.trim().isEmpty()) {
HOGOSL = Byte.parseByte(s);
} else {
HOGOSL = Byte.MIN_VALUE;
}
}

protected final void initHOGOSR(String s) {
if (!s.trim().isEmpty()) {
HOGOSR = Byte.parseByte(s);
} else {
HOGOSR = Byte.MIN_VALUE;
}
}

protected final void initHOGOSU(String s) {
if (!s.trim().isEmpty()) {
HOGOSU = Byte.parseByte(s);
} else {
HOGOSU = Byte.MIN_VALUE;
}
}

protected final void initHOGOW(String s) {
if (!s.trim().isEmpty()) {
HOGOW = Byte.parseByte(s);
} else {
HOGOW = Byte.MIN_VALUE;
}
}

protected final void initHOGOWE(String s) {
if (!s.trim().isEmpty()) {
HOGOWE = Byte.parseByte(s);
} else {
HOGOWE = Byte.MIN_VALUE;
}
}

protected final void initHOGOWL(String s) {
if (!s.trim().isEmpty()) {
HOGOWL = Byte.parseByte(s);
} else {
HOGOWL = Byte.MIN_VALUE;
}
}

protected final void initHOGOWR(String s) {
if (!s.trim().isEmpty()) {
HOGOWR = Byte.parseByte(s);
} else {
HOGOWR = Byte.MIN_VALUE;
}
}

protected final void initHOGOWU(String s) {
if (!s.trim().isEmpty()) {
HOGOWU = Byte.parseByte(s);
} else {
HOGOWU = Byte.MIN_VALUE;
}
}

protected final void initHOGPAY(String s) {
if (!s.trim().isEmpty()) {
HOGPAY = Byte.parseByte(s);
} else {
HOGPAY = Byte.MIN_VALUE;
}
}

protected final void initHOGPS(String s) {
if (!s.trim().isEmpty()) {
HOGPS = Byte.parseByte(s);
} else {
HOGPS = Byte.MIN_VALUE;
}
}

protected final void initHOGPSE(String s) {
if (!s.trim().isEmpty()) {
HOGPSE = Byte.parseByte(s);
} else {
HOGPSE = Byte.MIN_VALUE;
}
}

protected final void initHOGPSL(String s) {
if (!s.trim().isEmpty()) {
HOGPSL = Byte.parseByte(s);
} else {
HOGPSL = Byte.MIN_VALUE;
}
}

protected final void initHOGPSR(String s) {
if (!s.trim().isEmpty()) {
HOGPSR = Byte.parseByte(s);
} else {
HOGPSR = Byte.MIN_VALUE;
}
}

protected final void initHOGPSU(String s) {
if (!s.trim().isEmpty()) {
HOGPSU = Byte.parseByte(s);
} else {
HOGPSU = Byte.MIN_VALUE;
}
}

protected final void initHOGPW(String s) {
if (!s.trim().isEmpty()) {
HOGPW = Byte.parseByte(s);
} else {
HOGPW = Byte.MIN_VALUE;
}
}

protected final void initHOGPWE(String s) {
if (!s.trim().isEmpty()) {
HOGPWE = Byte.parseByte(s);
} else {
HOGPWE = Byte.MIN_VALUE;
}
}

protected final void initHOGPWL(String s) {
if (!s.trim().isEmpty()) {
HOGPWL = Byte.parseByte(s);
} else {
HOGPWL = Byte.MIN_VALUE;
}
}

protected final void initHOGPWR(String s) {
if (!s.trim().isEmpty()) {
HOGPWR = Byte.parseByte(s);
} else {
HOGPWR = Byte.MIN_VALUE;
}
}

protected final void initHOGPWU(String s) {
if (!s.trim().isEmpty()) {
HOGPWU = Byte.parseByte(s);
} else {
HOGPWU = Byte.MIN_VALUE;
}
}

protected final void initHOHAV1(String s) {
if (!s.trim().isEmpty()) {
HOHAV1 = Byte.parseByte(s);
} else {
HOHAV1 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV10(String s) {
if (!s.trim().isEmpty()) {
HOHAV10 = Byte.parseByte(s);
} else {
HOHAV10 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV11(String s) {
if (!s.trim().isEmpty()) {
HOHAV11 = Byte.parseByte(s);
} else {
HOHAV11 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV12(String s) {
if (!s.trim().isEmpty()) {
HOHAV12 = Byte.parseByte(s);
} else {
HOHAV12 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV2(String s) {
if (!s.trim().isEmpty()) {
HOHAV2 = Byte.parseByte(s);
} else {
HOHAV2 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV3(String s) {
if (!s.trim().isEmpty()) {
HOHAV3 = Byte.parseByte(s);
} else {
HOHAV3 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV4(String s) {
if (!s.trim().isEmpty()) {
HOHAV4 = Byte.parseByte(s);
} else {
HOHAV4 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV5(String s) {
if (!s.trim().isEmpty()) {
HOHAV5 = Byte.parseByte(s);
} else {
HOHAV5 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV6(String s) {
if (!s.trim().isEmpty()) {
HOHAV6 = Byte.parseByte(s);
} else {
HOHAV6 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV7(String s) {
if (!s.trim().isEmpty()) {
HOHAV7 = Byte.parseByte(s);
} else {
HOHAV7 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV8(String s) {
if (!s.trim().isEmpty()) {
HOHAV8 = Byte.parseByte(s);
} else {
HOHAV8 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV9(String s) {
if (!s.trim().isEmpty()) {
HOHAV9 = Byte.parseByte(s);
} else {
HOHAV9 = Byte.MIN_VALUE;
}
}

protected final void initHOHB1(String s) {
if (!s.trim().isEmpty()) {
HOHB1 = Byte.parseByte(s);
} else {
HOHB1 = Byte.MIN_VALUE;
}
}

protected final void initHOHB2(String s) {
if (!s.trim().isEmpty()) {
HOHB2 = Byte.parseByte(s);
} else {
HOHB2 = Byte.MIN_VALUE;
}
}

protected final void initHOHB3(String s) {
if (!s.trim().isEmpty()) {
HOHB3 = Byte.parseByte(s);
} else {
HOHB3 = Byte.MIN_VALUE;
}
}

protected final void initHOHBA(String s) {
if (!s.trim().isEmpty()) {
HOHBA = Short.parseShort(s);
} else {
HOHBA = Short.MIN_VALUE;
}
}

protected final void initHOHBAFE(String s) {
if (!s.trim().isEmpty()) {
HOHBAFE = Byte.parseByte(s);
} else {
HOHBAFE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAFL(String s) {
if (!s.trim().isEmpty()) {
HOHBAFL = Byte.parseByte(s);
} else {
HOHBAFL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAFR(String s) {
if (!s.trim().isEmpty()) {
HOHBAFR = Byte.parseByte(s);
} else {
HOHBAFR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAFU(String s) {
if (!s.trim().isEmpty()) {
HOHBAFU = Byte.parseByte(s);
} else {
HOHBAFU = Byte.MIN_VALUE;
}
}

protected final void initHOHBAME(String s) {
if (!s.trim().isEmpty()) {
HOHBAME = Byte.parseByte(s);
} else {
HOHBAME = Byte.MIN_VALUE;
}
}

protected final void initHOHBAML(String s) {
if (!s.trim().isEmpty()) {
HOHBAML = Short.parseShort(s);
} else {
HOHBAML = Short.MIN_VALUE;
}
}

protected final void initHOHBAMR(String s) {
if (!s.trim().isEmpty()) {
HOHBAMR = Byte.parseByte(s);
} else {
HOHBAMR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAMU(String s) {
if (!s.trim().isEmpty()) {
HOHBAMU = Short.parseShort(s);
} else {
HOHBAMU = Short.MIN_VALUE;
}
}

protected final void initHOHBAOE(String s) {
if (!s.trim().isEmpty()) {
HOHBAOE = Byte.parseByte(s);
} else {
HOHBAOE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAOL(String s) {
if (!s.trim().isEmpty()) {
HOHBAOL = Byte.parseByte(s);
} else {
HOHBAOL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAOR(String s) {
if (!s.trim().isEmpty()) {
HOHBAOR = Byte.parseByte(s);
} else {
HOHBAOR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAOU(String s) {
if (!s.trim().isEmpty()) {
HOHBAOU = Short.parseShort(s);
} else {
HOHBAOU = Short.MIN_VALUE;
}
}

protected final void initHOHBAWE(String s) {
if (!s.trim().isEmpty()) {
HOHBAWE = Byte.parseByte(s);
} else {
HOHBAWE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAWL(String s) {
if (!s.trim().isEmpty()) {
HOHBAWL = Byte.parseByte(s);
} else {
HOHBAWL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAWR(String s) {
if (!s.trim().isEmpty()) {
HOHBAWR = Byte.parseByte(s);
} else {
HOHBAWR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAWU(String s) {
if (!s.trim().isEmpty()) {
HOHBAWU = Byte.parseByte(s);
} else {
HOHBAWU = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYE(String s) {
if (!s.trim().isEmpty()) {
HOHBAYE = Byte.parseByte(s);
} else {
HOHBAYE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYL(String s) {
if (!s.trim().isEmpty()) {
HOHBAYL = Byte.parseByte(s);
} else {
HOHBAYL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYR(String s) {
if (!s.trim().isEmpty()) {
HOHBAYR = Byte.parseByte(s);
} else {
HOHBAYR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYU(String s) {
if (!s.trim().isEmpty()) {
HOHBAYU = Byte.parseByte(s);
} else {
HOHBAYU = Byte.MIN_VALUE;
}
}

protected final void initHOHBCK(String s) {
if (!s.trim().isEmpty()) {
HOHBCK = Byte.parseByte(s);
} else {
HOHBCK = Byte.MIN_VALUE;
}
}

protected final void initHOHBEN(String s) {
if (!s.trim().isEmpty()) {
HOHBEN = Byte.parseByte(s);
} else {
HOHBEN = Byte.MIN_VALUE;
}
}

protected final void initHOHBM1(String s) {
if (!s.trim().isEmpty()) {
HOHBM1 = Byte.parseByte(s);
} else {
HOHBM1 = Byte.MIN_VALUE;
}
}

protected final void initHOHBM2(String s) {
if (!s.trim().isEmpty()) {
HOHBM2 = Byte.parseByte(s);
} else {
HOHBM2 = Byte.MIN_VALUE;
}
}

protected final void initHOHBM3(String s) {
if (!s.trim().isEmpty()) {
HOHBM3 = Byte.parseByte(s);
} else {
HOHBM3 = Byte.MIN_VALUE;
}
}

protected final void initHOHBP(String s) {
if (!s.trim().isEmpty()) {
HOHBP = Byte.parseByte(s);
} else {
HOHBP = Byte.MIN_VALUE;
}
}

protected final void initHOHV01(String s) {
if (!s.trim().isEmpty()) {
HOHV01 = Short.parseShort(s);
} else {
HOHV01 = Short.MIN_VALUE;
}
}

protected final void initHOHV01E(String s) {
if (!s.trim().isEmpty()) {
HOHV01E = Byte.parseByte(s);
} else {
HOHV01E = Byte.MIN_VALUE;
}
}

protected final void initHOHV01L(String s) {
if (!s.trim().isEmpty()) {
HOHV01L = Short.parseShort(s);
} else {
HOHV01L = Short.MIN_VALUE;
}
}

protected final void initHOHV01R(String s) {
if (!s.trim().isEmpty()) {
HOHV01R = Byte.parseByte(s);
} else {
HOHV01R = Byte.MIN_VALUE;
}
}

protected final void initHOHV01U(String s) {
if (!s.trim().isEmpty()) {
HOHV01U = Short.parseShort(s);
} else {
HOHV01U = Short.MIN_VALUE;
}
}

protected final void initHOHV02(String s) {
if (!s.trim().isEmpty()) {
HOHV02 = Short.parseShort(s);
} else {
HOHV02 = Short.MIN_VALUE;
}
}

protected final void initHOHV02E(String s) {
if (!s.trim().isEmpty()) {
HOHV02E = Byte.parseByte(s);
} else {
HOHV02E = Byte.MIN_VALUE;
}
}

protected final void initHOHV02L(String s) {
if (!s.trim().isEmpty()) {
HOHV02L = Short.parseShort(s);
} else {
HOHV02L = Short.MIN_VALUE;
}
}

protected final void initHOHV02R(String s) {
if (!s.trim().isEmpty()) {
HOHV02R = Byte.parseByte(s);
} else {
HOHV02R = Byte.MIN_VALUE;
}
}

protected final void initHOHV02U(String s) {
if (!s.trim().isEmpty()) {
HOHV02U = Short.parseShort(s);
} else {
HOHV02U = Short.MIN_VALUE;
}
}

protected final void initHOHV03(String s) {
if (!s.trim().isEmpty()) {
HOHV03 = Short.parseShort(s);
} else {
HOHV03 = Short.MIN_VALUE;
}
}

protected final void initHOHV03E(String s) {
if (!s.trim().isEmpty()) {
HOHV03E = Byte.parseByte(s);
} else {
HOHV03E = Byte.MIN_VALUE;
}
}

protected final void initHOHV03L(String s) {
if (!s.trim().isEmpty()) {
HOHV03L = Short.parseShort(s);
} else {
HOHV03L = Short.MIN_VALUE;
}
}

protected final void initHOHV03R(String s) {
if (!s.trim().isEmpty()) {
HOHV03R = Byte.parseByte(s);
} else {
HOHV03R = Byte.MIN_VALUE;
}
}

protected final void initHOHV03U(String s) {
if (!s.trim().isEmpty()) {
HOHV03U = Short.parseShort(s);
} else {
HOHV03U = Short.MIN_VALUE;
}
}

protected final void initHOHV04(String s) {
if (!s.trim().isEmpty()) {
HOHV04 = Short.parseShort(s);
} else {
HOHV04 = Short.MIN_VALUE;
}
}

protected final void initHOHV04E(String s) {
if (!s.trim().isEmpty()) {
HOHV04E = Byte.parseByte(s);
} else {
HOHV04E = Byte.MIN_VALUE;
}
}

protected final void initHOHV04L(String s) {
if (!s.trim().isEmpty()) {
HOHV04L = Short.parseShort(s);
} else {
HOHV04L = Short.MIN_VALUE;
}
}

protected final void initHOHV04R(String s) {
if (!s.trim().isEmpty()) {
HOHV04R = Byte.parseByte(s);
} else {
HOHV04R = Byte.MIN_VALUE;
}
}

protected final void initHOHV04U(String s) {
if (!s.trim().isEmpty()) {
HOHV04U = Short.parseShort(s);
} else {
HOHV04U = Short.MIN_VALUE;
}
}

protected final void initHOHV05(String s) {
if (!s.trim().isEmpty()) {
HOHV05 = Short.parseShort(s);
} else {
HOHV05 = Short.MIN_VALUE;
}
}

protected final void initHOHV05E(String s) {
if (!s.trim().isEmpty()) {
HOHV05E = Byte.parseByte(s);
} else {
HOHV05E = Byte.MIN_VALUE;
}
}

protected final void initHOHV05L(String s) {
if (!s.trim().isEmpty()) {
HOHV05L = Short.parseShort(s);
} else {
HOHV05L = Short.MIN_VALUE;
}
}

protected final void initHOHV05R(String s) {
if (!s.trim().isEmpty()) {
HOHV05R = Byte.parseByte(s);
} else {
HOHV05R = Byte.MIN_VALUE;
}
}

protected final void initHOHV05U(String s) {
if (!s.trim().isEmpty()) {
HOHV05U = Short.parseShort(s);
} else {
HOHV05U = Short.MIN_VALUE;
}
}

protected final void initHOHV06(String s) {
if (!s.trim().isEmpty()) {
HOHV06 = Short.parseShort(s);
} else {
HOHV06 = Short.MIN_VALUE;
}
}

protected final void initHOHV06E(String s) {
if (!s.trim().isEmpty()) {
HOHV06E = Byte.parseByte(s);
} else {
HOHV06E = Byte.MIN_VALUE;
}
}

protected final void initHOHV06L(String s) {
if (!s.trim().isEmpty()) {
HOHV06L = Short.parseShort(s);
} else {
HOHV06L = Short.MIN_VALUE;
}
}

protected final void initHOHV06R(String s) {
if (!s.trim().isEmpty()) {
HOHV06R = Byte.parseByte(s);
} else {
HOHV06R = Byte.MIN_VALUE;
}
}

protected final void initHOHV06U(String s) {
if (!s.trim().isEmpty()) {
HOHV06U = Short.parseShort(s);
} else {
HOHV06U = Short.MIN_VALUE;
}
}

protected final void initHOHV07(String s) {
if (!s.trim().isEmpty()) {
HOHV07 = Short.parseShort(s);
} else {
HOHV07 = Short.MIN_VALUE;
}
}

protected final void initHOHV07E(String s) {
if (!s.trim().isEmpty()) {
HOHV07E = Byte.parseByte(s);
} else {
HOHV07E = Byte.MIN_VALUE;
}
}

protected final void initHOHV07L(String s) {
if (!s.trim().isEmpty()) {
HOHV07L = Short.parseShort(s);
} else {
HOHV07L = Short.MIN_VALUE;
}
}

protected final void initHOHV07R(String s) {
if (!s.trim().isEmpty()) {
HOHV07R = Byte.parseByte(s);
} else {
HOHV07R = Byte.MIN_VALUE;
}
}

protected final void initHOHV07U(String s) {
if (!s.trim().isEmpty()) {
HOHV07U = Short.parseShort(s);
} else {
HOHV07U = Short.MIN_VALUE;
}
}

protected final void initHOHV08(String s) {
if (!s.trim().isEmpty()) {
HOHV08 = Short.parseShort(s);
} else {
HOHV08 = Short.MIN_VALUE;
}
}

protected final void initHOHV08E(String s) {
if (!s.trim().isEmpty()) {
HOHV08E = Byte.parseByte(s);
} else {
HOHV08E = Byte.MIN_VALUE;
}
}

protected final void initHOHV08L(String s) {
if (!s.trim().isEmpty()) {
HOHV08L = Short.parseShort(s);
} else {
HOHV08L = Short.MIN_VALUE;
}
}

protected final void initHOHV08R(String s) {
if (!s.trim().isEmpty()) {
HOHV08R = Byte.parseByte(s);
} else {
HOHV08R = Byte.MIN_VALUE;
}
}

protected final void initHOHV08U(String s) {
if (!s.trim().isEmpty()) {
HOHV08U = Short.parseShort(s);
} else {
HOHV08U = Short.MIN_VALUE;
}
}

protected final void initHOHV09(String s) {
if (!s.trim().isEmpty()) {
HOHV09 = Short.parseShort(s);
} else {
HOHV09 = Short.MIN_VALUE;
}
}

protected final void initHOHV09E(String s) {
if (!s.trim().isEmpty()) {
HOHV09E = Byte.parseByte(s);
} else {
HOHV09E = Byte.MIN_VALUE;
}
}

protected final void initHOHV09L(String s) {
if (!s.trim().isEmpty()) {
HOHV09L = Short.parseShort(s);
} else {
HOHV09L = Short.MIN_VALUE;
}
}

protected final void initHOHV09R(String s) {
if (!s.trim().isEmpty()) {
HOHV09R = Byte.parseByte(s);
} else {
HOHV09R = Byte.MIN_VALUE;
}
}

protected final void initHOHV09U(String s) {
if (!s.trim().isEmpty()) {
HOHV09U = Short.parseShort(s);
} else {
HOHV09U = Short.MIN_VALUE;
}
}

protected final void initHOHV10(String s) {
if (!s.trim().isEmpty()) {
HOHV10 = Short.parseShort(s);
} else {
HOHV10 = Short.MIN_VALUE;
}
}

protected final void initHOHV10E(String s) {
if (!s.trim().isEmpty()) {
HOHV10E = Byte.parseByte(s);
} else {
HOHV10E = Byte.MIN_VALUE;
}
}

protected final void initHOHV10L(String s) {
if (!s.trim().isEmpty()) {
HOHV10L = Short.parseShort(s);
} else {
HOHV10L = Short.MIN_VALUE;
}
}

protected final void initHOHV10R(String s) {
if (!s.trim().isEmpty()) {
HOHV10R = Byte.parseByte(s);
} else {
HOHV10R = Byte.MIN_VALUE;
}
}

protected final void initHOHV10U(String s) {
if (!s.trim().isEmpty()) {
HOHV10U = Short.parseShort(s);
} else {
HOHV10U = Short.MIN_VALUE;
}
}

protected final void initHOHV11(String s) {
if (!s.trim().isEmpty()) {
HOHV11 = Short.parseShort(s);
} else {
HOHV11 = Short.MIN_VALUE;
}
}

protected final void initHOHV11E(String s) {
if (!s.trim().isEmpty()) {
HOHV11E = Byte.parseByte(s);
} else {
HOHV11E = Byte.MIN_VALUE;
}
}

protected final void initHOHV11L(String s) {
if (!s.trim().isEmpty()) {
HOHV11L = Short.parseShort(s);
} else {
HOHV11L = Short.MIN_VALUE;
}
}

protected final void initHOHV11R(String s) {
if (!s.trim().isEmpty()) {
HOHV11R = Byte.parseByte(s);
} else {
HOHV11R = Byte.MIN_VALUE;
}
}

protected final void initHOHV11U(String s) {
if (!s.trim().isEmpty()) {
HOHV11U = Short.parseShort(s);
} else {
HOHV11U = Short.MIN_VALUE;
}
}

protected final void initHOHV12(String s) {
if (!s.trim().isEmpty()) {
HOHV12 = Short.parseShort(s);
} else {
HOHV12 = Short.MIN_VALUE;
}
}

protected final void initHOHV12E(String s) {
if (!s.trim().isEmpty()) {
HOHV12E = Byte.parseByte(s);
} else {
HOHV12E = Byte.MIN_VALUE;
}
}

protected final void initHOHV12L(String s) {
if (!s.trim().isEmpty()) {
HOHV12L = Short.parseShort(s);
} else {
HOHV12L = Short.MIN_VALUE;
}
}

protected final void initHOHV12R(String s) {
if (!s.trim().isEmpty()) {
HOHV12R = Byte.parseByte(s);
} else {
HOHV12R = Byte.MIN_VALUE;
}
}

protected final void initHOHV12U(String s) {
if (!s.trim().isEmpty()) {
HOHV12U = Short.parseShort(s);
} else {
HOHV12U = Short.MIN_VALUE;
}
}

protected final void initHOHVB1(String s) {
if (!s.trim().isEmpty()) {
HOHVB1 = Byte.parseByte(s);
} else {
HOHVB1 = Byte.MIN_VALUE;
}
}

protected final void initHOHVB10(String s) {
if (!s.trim().isEmpty()) {
HOHVB10 = Byte.parseByte(s);
} else {
HOHVB10 = Byte.MIN_VALUE;
}
}

protected final void initHOHVB11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOHVB11 = false;
} else {
HOHVB11 = true;
}
}
}

protected final void initHOHVB12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOHVB12 = false;
} else {
HOHVB12 = true;
}
}
}

protected final void initHOHVB2(String s) {
if (!s.trim().isEmpty()) {
HOHVB2 = Byte.parseByte(s);
} else {
HOHVB2 = Byte.MIN_VALUE;
}
}

protected final void initHOHVB3(String s) {
if (!s.trim().isEmpty()) {
HOHVB3 = Byte.parseByte(s);
} else {
HOHVB3 = Byte.MIN_VALUE;
}
}

protected final void initHOHVB4(String s) {
if (!s.trim().isEmpty()) {
HOHVB4 = Byte.parseByte(s);
} else {
HOHVB4 = Byte.MIN_VALUE;
}
}

protected final void initHOHVB5(String s) {
if (!s.trim().isEmpty()) {
HOHVB5 = Byte.parseByte(s);
} else {
HOHVB5 = Byte.MIN_VALUE;
}
}

protected final void initHOHVB6(String s) {
if (!s.trim().isEmpty()) {
HOHVB6 = Byte.parseByte(s);
} else {
HOHVB6 = Byte.MIN_VALUE;
}
}

protected final void initHOHVB7(String s) {
if (!s.trim().isEmpty()) {
HOHVB7 = Byte.parseByte(s);
} else {
HOHVB7 = Byte.MIN_VALUE;
}
}

protected final void initHOHVB8(String s) {
if (!s.trim().isEmpty()) {
HOHVB8 = Byte.parseByte(s);
} else {
HOHVB8 = Byte.MIN_VALUE;
}
}

protected final void initHOHVB9(String s) {
if (!s.trim().isEmpty()) {
HOHVB9 = Byte.parseByte(s);
} else {
HOHVB9 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM1(String s) {
if (!s.trim().isEmpty()) {
HOINAM1 = Byte.parseByte(s);
} else {
HOINAM1 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM2(String s) {
if (!s.trim().isEmpty()) {
HOINAM2 = Byte.parseByte(s);
} else {
HOINAM2 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM3(String s) {
if (!s.trim().isEmpty()) {
HOINAM3 = Byte.parseByte(s);
} else {
HOINAM3 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM4(String s) {
if (!s.trim().isEmpty()) {
HOINAM4 = Byte.parseByte(s);
} else {
HOINAM4 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOINAM5 = false;
} else {
HOINAM5 = true;
}
}
}

protected final void initHOINC1(String s) {
if (!s.trim().isEmpty()) {
HOINC1 = Byte.parseByte(s);
} else {
HOINC1 = Byte.MIN_VALUE;
}
}

protected final void initHOINC2(String s) {
if (!s.trim().isEmpty()) {
HOINC2 = Byte.parseByte(s);
} else {
HOINC2 = Byte.MIN_VALUE;
}
}

protected final void initHOINC3(String s) {
if (!s.trim().isEmpty()) {
HOINC3 = Byte.parseByte(s);
} else {
HOINC3 = Byte.MIN_VALUE;
}
}

protected final void initHOINC4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOINC4 = false;
} else {
HOINC4 = true;
}
}
}

protected final void initHOINCA1(String s) {
if (!s.trim().isEmpty()) {
HOINCA1 = Byte.parseByte(s);
} else {
HOINCA1 = Byte.MIN_VALUE;
}
}

protected final void initHOINCA2(String s) {
if (!s.trim().isEmpty()) {
HOINCA2 = Byte.parseByte(s);
} else {
HOINCA2 = Byte.MIN_VALUE;
}
}

protected final void initHOINCA3(String s) {
if (!s.trim().isEmpty()) {
HOINCA3 = Byte.parseByte(s);
} else {
HOINCA3 = Byte.MIN_VALUE;
}
}

protected final void initHOINCA4(String s) {
if (!s.trim().isEmpty()) {
HOINCA4 = Byte.parseByte(s);
} else {
HOINCA4 = Byte.MIN_VALUE;
}
}

protected final void initHOINCA5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOINCA5 = false;
} else {
HOINCA5 = true;
}
}
}

protected final void initHOINCL1(String s) {
if (!s.trim().isEmpty()) {
HOINCL1 = Byte.parseByte(s);
} else {
HOINCL1 = Byte.MIN_VALUE;
}
}

protected final void initHOINCL2(String s) {
if (!s.trim().isEmpty()) {
HOINCL2 = Byte.parseByte(s);
} else {
HOINCL2 = Byte.MIN_VALUE;
}
}

protected final void initHOINCL3(String s) {
if (!s.trim().isEmpty()) {
HOINCL3 = Byte.parseByte(s);
} else {
HOINCL3 = Byte.MIN_VALUE;
}
}

protected final void initHOINCL4(String s) {
if (!s.trim().isEmpty()) {
HOINCL4 = Byte.parseByte(s);
} else {
HOINCL4 = Byte.MIN_VALUE;
}
}

protected final void initHOINCL5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOINCL5 = false;
} else {
HOINCL5 = true;
}
}
}

protected final void initHOINCM1(String s) {
if (!s.trim().isEmpty()) {
HOINCM1 = Byte.parseByte(s);
} else {
HOINCM1 = Byte.MIN_VALUE;
}
}

protected final void initHOINCM2(String s) {
if (!s.trim().isEmpty()) {
HOINCM2 = Byte.parseByte(s);
} else {
HOINCM2 = Byte.MIN_VALUE;
}
}

protected final void initHOINCM3(String s) {
if (!s.trim().isEmpty()) {
HOINCM3 = Byte.parseByte(s);
} else {
HOINCM3 = Byte.MIN_VALUE;
}
}

protected final void initHOINCM4(String s) {
if (!s.trim().isEmpty()) {
HOINCM4 = Byte.parseByte(s);
} else {
HOINCM4 = Byte.MIN_VALUE;
}
}

protected final void initHOLEIS(String s) {
if (!s.trim().isEmpty()) {
HOLEIS = Short.parseShort(s);
} else {
HOLEIS = Short.MIN_VALUE;
}
}

protected final void initHOLEISE(String s) {
if (!s.trim().isEmpty()) {
HOLEISE = Byte.parseByte(s);
} else {
HOLEISE = Byte.MIN_VALUE;
}
}

protected final void initHOLEISL(String s) {
if (!s.trim().isEmpty()) {
HOLEISL = Short.parseShort(s);
} else {
HOLEISL = Short.MIN_VALUE;
}
}

protected final void initHOLEISR(String s) {
if (!s.trim().isEmpty()) {
HOLEISR = Byte.parseByte(s);
} else {
HOLEISR = Byte.MIN_VALUE;
}
}

protected final void initHOLEISU(String s) {
if (!s.trim().isEmpty()) {
HOLEISU = Short.parseShort(s);
} else {
HOLEISU = Short.MIN_VALUE;
}
}

protected final void initHOMEXT3(String s) {
if (!s.trim().isEmpty()) {
HOMEXT3 = Byte.parseByte(s);
} else {
HOMEXT3 = Byte.MIN_VALUE;
}
}

protected final void initHOMEXT4(String s) {
if (!s.trim().isEmpty()) {
HOMEXT4 = Byte.parseByte(s);
} else {
HOMEXT4 = Byte.MIN_VALUE;
}
}

protected final void initHOMEXT5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXT5 = false;
} else {
HOMEXT5 = true;
}
}
}

protected final void initHOMEXT6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXT6 = false;
} else {
HOMEXT6 = true;
}
}
}

protected final void initHOMEXT7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXT7 = false;
} else {
HOMEXT7 = true;
}
}
}

protected final void initHOMFV1(String s) {
if (!s.trim().isEmpty()) {
HOMFV1 = Byte.parseByte(s);
} else {
HOMFV1 = Byte.MIN_VALUE;
}
}

protected final void initHOMFV10(String s) {
if (!s.trim().isEmpty()) {
HOMFV10 = Byte.parseByte(s);
} else {
HOMFV10 = Byte.MIN_VALUE;
}
}

protected final void initHOMFV2(String s) {
if (!s.trim().isEmpty()) {
HOMFV2 = Byte.parseByte(s);
} else {
HOMFV2 = Byte.MIN_VALUE;
}
}

protected final void initHOMFV3(String s) {
if (!s.trim().isEmpty()) {
HOMFV3 = Byte.parseByte(s);
} else {
HOMFV3 = Byte.MIN_VALUE;
}
}

protected final void initHOMFV4(String s) {
if (!s.trim().isEmpty()) {
HOMFV4 = Byte.parseByte(s);
} else {
HOMFV4 = Byte.MIN_VALUE;
}
}

protected final void initHOMFV5(String s) {
if (!s.trim().isEmpty()) {
HOMFV5 = Byte.parseByte(s);
} else {
HOMFV5 = Byte.MIN_VALUE;
}
}

protected final void initHOMFV6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMFV6 = false;
} else {
HOMFV6 = true;
}
}
}

protected final void initHOMFV7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMFV7 = false;
} else {
HOMFV7 = true;
}
}
}

protected final void initHOMFV8(String s) {
if (!s.trim().isEmpty()) {
HOMFV8 = Byte.parseByte(s);
} else {
HOMFV8 = Byte.MIN_VALUE;
}
}

protected final void initHOMFV9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMFV9 = false;
} else {
HOMFV9 = true;
}
}
}

protected final void initHOMINC(String s) {
if (!s.trim().isEmpty()) {
HOMINC = Short.parseShort(s);
} else {
HOMINC = Short.MIN_VALUE;
}
}

protected final void initHOMINCE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMINCE = false;
} else {
HOMINCE = true;
}
}
}

protected final void initHOMINCL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMINCL = false;
} else {
HOMINCL = true;
}
}
}

protected final void initHOMINCR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMINCR = false;
} else {
HOMINCR = true;
}
}
}

protected final void initHOMINCU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMINCU = false;
} else {
HOMINCU = true;
}
}
}

protected final void initHOMMISN(String s) {
if (!s.trim().isEmpty()) {
HOMMISN = Byte.parseByte(s);
} else {
HOMMISN = Byte.MIN_VALUE;
}
}

protected final void initHOMNEWN(String s) {
if (!s.trim().isEmpty()) {
HOMNEWN = Byte.parseByte(s);
} else {
HOMNEWN = Byte.MIN_VALUE;
}
}

protected final void initHOMNM18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMNM18 = false;
} else {
HOMNM18 = true;
}
}
}

protected final void initHOMNM19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -99) {
HOMNM19 = false;
} else {
HOMNM19 = true;
}
}
}

protected final void initHOMNM28(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMNM28 = false;
} else {
HOMNM28 = true;
}
}
}

protected final void initHOMNM29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -99) {
HOMNM29 = false;
} else {
HOMNM29 = true;
}
}
}

protected final void initHOMNM38(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMNM38 = false;
} else {
HOMNM38 = true;
}
}
}

protected final void initHOMNM39(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -99) {
HOMNM39 = false;
} else {
HOMNM39 = true;
}
}
}

protected final void initHOMNM48(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMNM48 = false;
} else {
HOMNM48 = true;
}
}
}

protected final void initHOMNM49(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -99) {
HOMNM49 = false;
} else {
HOMNM49 = true;
}
}
}

protected final void initHOMNRE8(String s) {
if (!s.trim().isEmpty()) {
HOMNRE8 = Byte.parseByte(s);
} else {
HOMNRE8 = Byte.MIN_VALUE;
}
}

protected final void initHOMNRE9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -99) {
HOMNRE9 = false;
} else {
HOMNRE9 = true;
}
}
}

protected final void initHOMNU18(String s) {
if (!s.trim().isEmpty()) {
HOMNU18 = Byte.parseByte(s);
} else {
HOMNU18 = Byte.MIN_VALUE;
}
}

protected final void initHOMNU19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -99) {
HOMNU19 = false;
} else {
HOMNU19 = true;
}
}
}

protected final void initHOMNU28(String s) {
if (!s.trim().isEmpty()) {
HOMNU28 = Byte.parseByte(s);
} else {
HOMNU28 = Byte.MIN_VALUE;
}
}

protected final void initHOMNU29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -99) {
HOMNU29 = false;
} else {
HOMNU29 = true;
}
}
}

protected final void initHOMNU38(String s) {
if (!s.trim().isEmpty()) {
HOMNU38 = Byte.parseByte(s);
} else {
HOMNU38 = Byte.MIN_VALUE;
}
}

protected final void initHOMNU39(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -99) {
HOMNU39 = false;
} else {
HOMNU39 = true;
}
}
}

protected final void initHOMNU48(String s) {
if (!s.trim().isEmpty()) {
HOMNU48 = Byte.parseByte(s);
} else {
HOMNU48 = Byte.MIN_VALUE;
}
}

protected final void initHOMNU49(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -99) {
HOMNU49 = false;
} else {
HOMNU49 = true;
}
}
}

protected final void initHOMREA3(String s) {
if (!s.trim().isEmpty()) {
HOMREA3 = Byte.parseByte(s);
} else {
HOMREA3 = Byte.MIN_VALUE;
}
}

protected final void initHOMREA4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMREA4 = false;
} else {
HOMREA4 = true;
}
}
}

protected final void initHOMREA5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMREA5 = false;
} else {
HOMREA5 = true;
}
}
}

protected final void initHOMREA6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMREA6 = false;
} else {
HOMREA6 = true;
}
}
}

protected final void initHOMREA7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMREA7 = false;
} else {
HOMREA7 = true;
}
}
}

protected final void initHOMREPE(String s) {
if (!s.trim().isEmpty()) {
HOMREPE = Byte.parseByte(s);
} else {
HOMREPE = Byte.MIN_VALUE;
}
}

protected final void initHOMREPL(String s) {
if (!s.trim().isEmpty()) {
HOMREPL = Short.parseShort(s);
} else {
HOMREPL = Short.MIN_VALUE;
}
}

protected final void initHOMREPR(String s) {
if (!s.trim().isEmpty()) {
HOMREPR = Byte.parseByte(s);
} else {
HOMREPR = Byte.MIN_VALUE;
}
}

protected final void initHOMREPU(String s) {
if (!s.trim().isEmpty()) {
HOMREPU = Short.parseShort(s);
} else {
HOMREPU = Short.MIN_VALUE;
}
}

protected final void initHOMSAM3(String s) {
if (!s.trim().isEmpty()) {
HOMSAM3 = Byte.parseByte(s);
} else {
HOMSAM3 = Byte.MIN_VALUE;
}
}

protected final void initHOMSAM4(String s) {
if (!s.trim().isEmpty()) {
HOMSAM4 = Byte.parseByte(s);
} else {
HOMSAM4 = Byte.MIN_VALUE;
}
}

protected final void initHOMSAM5(String s) {
if (!s.trim().isEmpty()) {
HOMSAM5 = Byte.parseByte(s);
} else {
HOMSAM5 = Byte.MIN_VALUE;
}
}

protected final void initHOMSAM6(String s) {
if (!s.trim().isEmpty()) {
HOMSAM6 = Byte.parseByte(s);
} else {
HOMSAM6 = Byte.MIN_VALUE;
}
}

protected final void initHOMSAM7(String s) {
if (!s.trim().isEmpty()) {
HOMSAM7 = Byte.parseByte(s);
} else {
HOMSAM7 = Byte.MIN_VALUE;
}
}

protected final void initHOMTY1(String s) {
if (!s.trim().isEmpty()) {
HOMTY1 = Byte.parseByte(s);
} else {
HOMTY1 = Byte.MIN_VALUE;
}
}

protected final void initHOMTY10(String s) {
if (!s.trim().isEmpty()) {
HOMTY10 = Byte.parseByte(s);
} else {
HOMTY10 = Byte.MIN_VALUE;
}
}

protected final void initHOMTY2(String s) {
if (!s.trim().isEmpty()) {
HOMTY2 = Byte.parseByte(s);
} else {
HOMTY2 = Byte.MIN_VALUE;
}
}

protected final void initHOMTY8(String s) {
if (!s.trim().isEmpty()) {
HOMTY8 = Byte.parseByte(s);
} else {
HOMTY8 = Byte.MIN_VALUE;
}
}

protected final void initHOMTY9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMTY9 = false;
} else {
HOMTY9 = true;
}
}
}

protected final void initHOMUM13(String s) {
if (!s.trim().isEmpty()) {
HOMUM13 = Byte.parseByte(s);
} else {
HOMUM13 = Byte.MIN_VALUE;
}
}

protected final void initHOMUM14(String s) {
if (!s.trim().isEmpty()) {
HOMUM14 = Byte.parseByte(s);
} else {
HOMUM14 = Byte.MIN_VALUE;
}
}

protected final void initHOMUM15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUM15 = false;
} else {
HOMUM15 = true;
}
}
}

protected final void initHOMUM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUM16 = false;
} else {
HOMUM16 = true;
}
}
}

protected final void initHOMUM17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUM17 = false;
} else {
HOMUM17 = true;
}
}
}

protected final void initHOMUM23(String s) {
if (!s.trim().isEmpty()) {
HOMUM23 = Byte.parseByte(s);
} else {
HOMUM23 = Byte.MIN_VALUE;
}
}

protected final void initHOMUM24(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUM24 = false;
} else {
HOMUM24 = true;
}
}
}

protected final void initHOMUM25(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUM25 = false;
} else {
HOMUM25 = true;
}
}
}

protected final void initHOMUM26(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUM26 = false;
} else {
HOMUM26 = true;
}
}
}

protected final void initHOMUM27(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUM27 = false;
} else {
HOMUM27 = true;
}
}
}

protected final void initHOMUM33(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUM33 = false;
} else {
HOMUM33 = true;
}
}
}

protected final void initHOMUM34(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUM34 = false;
} else {
HOMUM34 = true;
}
}
}

protected final void initHOMUM35(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUM35 = false;
} else {
HOMUM35 = true;
}
}
}

protected final void initHOMUM36(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUM36 = false;
} else {
HOMUM36 = true;
}
}
}

protected final void initHOMUM37(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUM37 = false;
} else {
HOMUM37 = true;
}
}
}

protected final void initHOMUS13(String s) {
if (!s.trim().isEmpty()) {
HOMUS13 = Byte.parseByte(s);
} else {
HOMUS13 = Byte.MIN_VALUE;
}
}

protected final void initHOMUS14(String s) {
if (!s.trim().isEmpty()) {
HOMUS14 = Byte.parseByte(s);
} else {
HOMUS14 = Byte.MIN_VALUE;
}
}

protected final void initHOMUS15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUS15 = false;
} else {
HOMUS15 = true;
}
}
}

protected final void initHOMUS16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUS16 = false;
} else {
HOMUS16 = true;
}
}
}

protected final void initHOMUS17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUS17 = false;
} else {
HOMUS17 = true;
}
}
}

protected final void initHOMUS23(String s) {
if (!s.trim().isEmpty()) {
HOMUS23 = Byte.parseByte(s);
} else {
HOMUS23 = Byte.MIN_VALUE;
}
}

protected final void initHOMUS24(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUS24 = false;
} else {
HOMUS24 = true;
}
}
}

protected final void initHOMUS25(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUS25 = false;
} else {
HOMUS25 = true;
}
}
}

protected final void initHOMUS26(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUS26 = false;
} else {
HOMUS26 = true;
}
}
}

protected final void initHOMUS27(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUS27 = false;
} else {
HOMUS27 = true;
}
}
}

protected final void initHOMUS33(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUS33 = false;
} else {
HOMUS33 = true;
}
}
}

protected final void initHOMUS34(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUS34 = false;
} else {
HOMUS34 = true;
}
}
}

protected final void initHOMUS35(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUS35 = false;
} else {
HOMUS35 = true;
}
}
}

protected final void initHOMUS36(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUS36 = false;
} else {
HOMUS36 = true;
}
}
}

protected final void initHOMUS37(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUS37 = false;
} else {
HOMUS37 = true;
}
}
}

protected final void initHOMWA8(String s) {
if (!s.trim().isEmpty()) {
HOMWA8 = Integer.parseInt(s);
} else {
HOMWA8 = Integer.MIN_VALUE;
}
}

protected final void initHOMWA8E(String s) {
if (!s.trim().isEmpty()) {
HOMWA8E = Byte.parseByte(s);
} else {
HOMWA8E = Byte.MIN_VALUE;
}
}

protected final void initHOMWA8L(String s) {
if (!s.trim().isEmpty()) {
HOMWA8L = Integer.parseInt(s);
} else {
HOMWA8L = Integer.MIN_VALUE;
}
}

protected final void initHOMWA8R(String s) {
if (!s.trim().isEmpty()) {
HOMWA8R = Byte.parseByte(s);
} else {
HOMWA8R = Byte.MIN_VALUE;
}
}

protected final void initHOMWA8U(String s) {
if (!s.trim().isEmpty()) {
HOMWA8U = Short.parseShort(s);
} else {
HOMWA8U = Short.MIN_VALUE;
}
}

protected final void initHOMWA9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -99) {
HOMWA9 = false;
} else {
HOMWA9 = true;
}
}
}

protected final void initHOMWA9E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -99) {
HOMWA9E = false;
} else {
HOMWA9E = true;
}
}
}

protected final void initHOMWA9L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -99) {
HOMWA9L = false;
} else {
HOMWA9L = true;
}
}
}

protected final void initHOMWA9R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -99) {
HOMWA9R = false;
} else {
HOMWA9R = true;
}
}
}

protected final void initHOMWA9U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -99) {
HOMWA9U = false;
} else {
HOMWA9U = true;
}
}
}

protected final void initHOMXA3(String s) {
if (!s.trim().isEmpty()) {
HOMXA3 = Integer.parseInt(s);
} else {
HOMXA3 = Integer.MIN_VALUE;
}
}

protected final void initHOMXA3E(String s) {
if (!s.trim().isEmpty()) {
HOMXA3E = Byte.parseByte(s);
} else {
HOMXA3E = Byte.MIN_VALUE;
}
}

protected final void initHOMXA3L(String s) {
if (!s.trim().isEmpty()) {
HOMXA3L = Integer.parseInt(s);
} else {
HOMXA3L = Integer.MIN_VALUE;
}
}

protected final void initHOMXA3R(String s) {
if (!s.trim().isEmpty()) {
HOMXA3R = Byte.parseByte(s);
} else {
HOMXA3R = Byte.MIN_VALUE;
}
}

protected final void initHOMXA3U(String s) {
if (!s.trim().isEmpty()) {
HOMXA3U = Short.parseShort(s);
} else {
HOMXA3U = Short.MIN_VALUE;
}
}

protected final void initHOMXA4(String s) {
if (!s.trim().isEmpty()) {
HOMXA4 = Short.parseShort(s);
} else {
HOMXA4 = Short.MIN_VALUE;
}
}

protected final void initHOMXA4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA4E = false;
} else {
HOMXA4E = true;
}
}
}

protected final void initHOMXA4L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA4L = false;
} else {
HOMXA4L = true;
}
}
}

protected final void initHOMXA4R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA4R = false;
} else {
HOMXA4R = true;
}
}
}

protected final void initHOMXA4U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA4U = false;
} else {
HOMXA4U = true;
}
}
}

protected final void initHOMXA5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA5 = false;
} else {
HOMXA5 = true;
}
}
}

protected final void initHOMXA5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA5E = false;
} else {
HOMXA5E = true;
}
}
}

protected final void initHOMXA5L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA5L = false;
} else {
HOMXA5L = true;
}
}
}

protected final void initHOMXA5R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA5R = false;
} else {
HOMXA5R = true;
}
}
}

protected final void initHOMXA5U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA5U = false;
} else {
HOMXA5U = true;
}
}
}

protected final void initHOMXA6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA6 = false;
} else {
HOMXA6 = true;
}
}
}

protected final void initHOMXA6E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA6E = false;
} else {
HOMXA6E = true;
}
}
}

protected final void initHOMXA6L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA6L = false;
} else {
HOMXA6L = true;
}
}
}

protected final void initHOMXA6R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA6R = false;
} else {
HOMXA6R = true;
}
}
}

protected final void initHOMXA6U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA6U = false;
} else {
HOMXA6U = true;
}
}
}

protected final void initHOMXA7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA7 = false;
} else {
HOMXA7 = true;
}
}
}

protected final void initHOMXA7E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA7E = false;
} else {
HOMXA7E = true;
}
}
}

protected final void initHOMXA7L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA7L = false;
} else {
HOMXA7L = true;
}
}
}

protected final void initHOMXA7R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA7R = false;
} else {
HOMXA7R = true;
}
}
}

protected final void initHOMXA7U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMXA7U = false;
} else {
HOMXA7U = true;
}
}
}

protected final void initHOOHEA1(String s) {
if (!s.trim().isEmpty()) {
HOOHEA1 = Byte.parseByte(s);
} else {
HOOHEA1 = Byte.MIN_VALUE;
}
}

protected final void initHOOHEA2(String s) {
if (!s.trim().isEmpty()) {
HOOHEA2 = Byte.parseByte(s);
} else {
HOOHEA2 = Byte.MIN_VALUE;
}
}

protected final void initHOOHEA3(String s) {
if (!s.trim().isEmpty()) {
HOOHEA3 = Byte.parseByte(s);
} else {
HOOHEA3 = Byte.MIN_VALUE;
}
}

protected final void initHOOHEM1(String s) {
if (!s.trim().isEmpty()) {
HOOHEM1 = Byte.parseByte(s);
} else {
HOOHEM1 = Byte.MIN_VALUE;
}
}

protected final void initHOOHEM2(String s) {
if (!s.trim().isEmpty()) {
HOOHEM2 = Byte.parseByte(s);
} else {
HOOHEM2 = Byte.MIN_VALUE;
}
}

protected final void initHOOHEM3(String s) {
if (!s.trim().isEmpty()) {
HOOHEM3 = Byte.parseByte(s);
} else {
HOOHEM3 = Byte.MIN_VALUE;
}
}

protected final void initHOOUTFE(String s) {
if (!s.trim().isEmpty()) {
HOOUTFE = Byte.parseByte(s);
} else {
HOOUTFE = Byte.MIN_VALUE;
}
}

protected final void initHOOUTFL(String s) {
if (!s.trim().isEmpty()) {
HOOUTFL = Short.parseShort(s);
} else {
HOOUTFL = Short.MIN_VALUE;
}
}

protected final void initHOOUTFR(String s) {
if (!s.trim().isEmpty()) {
HOOUTFR = Byte.parseByte(s);
} else {
HOOUTFR = Byte.MIN_VALUE;
}
}

protected final void initHOOUTFU(String s) {
if (!s.trim().isEmpty()) {
HOOUTFU = Short.parseShort(s);
} else {
HOOUTFU = Short.MIN_VALUE;
}
}

protected final void initHOPAYE(String s) {
if (!s.trim().isEmpty()) {
HOPAYE = Byte.parseByte(s);
} else {
HOPAYE = Byte.MIN_VALUE;
}
}

protected final void initHOPAYL(String s) {
if (!s.trim().isEmpty()) {
HOPAYL = Integer.parseInt(s);
} else {
HOPAYL = Integer.MIN_VALUE;
}
}

protected final void initHOPAYR(String s) {
if (!s.trim().isEmpty()) {
HOPAYR = Byte.parseByte(s);
} else {
HOPAYR = Byte.MIN_VALUE;
}
}

protected final void initHOPAYU(String s) {
if (!s.trim().isEmpty()) {
HOPAYU = Integer.parseInt(s);
} else {
HOPAYU = Integer.MIN_VALUE;
}
}

protected final void initHOPRB1(String s) {
if (!s.trim().isEmpty()) {
HOPRB1 = Byte.parseByte(s);
} else {
HOPRB1 = Byte.MIN_VALUE;
}
}

protected final void initHOPRB10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOPRB10 = false;
} else {
HOPRB10 = true;
}
}
}

protected final void initHOPRB2(String s) {
if (!s.trim().isEmpty()) {
HOPRB2 = Byte.parseByte(s);
} else {
HOPRB2 = Byte.MIN_VALUE;
}
}

protected final void initHOPRB3(String s) {
if (!s.trim().isEmpty()) {
HOPRB3 = Byte.parseByte(s);
} else {
HOPRB3 = Byte.MIN_VALUE;
}
}

protected final void initHOPRB4(String s) {
if (!s.trim().isEmpty()) {
HOPRB4 = Byte.parseByte(s);
} else {
HOPRB4 = Byte.MIN_VALUE;
}
}

protected final void initHOPRB5(String s) {
if (!s.trim().isEmpty()) {
HOPRB5 = Byte.parseByte(s);
} else {
HOPRB5 = Byte.MIN_VALUE;
}
}

protected final void initHOPRB6(String s) {
if (!s.trim().isEmpty()) {
HOPRB6 = Byte.parseByte(s);
} else {
HOPRB6 = Byte.MIN_VALUE;
}
}

protected final void initHOPRB7(String s) {
if (!s.trim().isEmpty()) {
HOPRB7 = Byte.parseByte(s);
} else {
HOPRB7 = Byte.MIN_VALUE;
}
}

protected final void initHOPRB8(String s) {
if (!s.trim().isEmpty()) {
HOPRB8 = Byte.parseByte(s);
} else {
HOPRB8 = Byte.MIN_VALUE;
}
}

protected final void initHOPRB9(String s) {
if (!s.trim().isEmpty()) {
HOPRB9 = Byte.parseByte(s);
} else {
HOPRB9 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM1(String s) {
if (!s.trim().isEmpty()) {
HOPRM1 = Byte.parseByte(s);
} else {
HOPRM1 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOPRM10 = false;
} else {
HOPRM10 = true;
}
}
}

protected final void initHOPRM2(String s) {
if (!s.trim().isEmpty()) {
HOPRM2 = Byte.parseByte(s);
} else {
HOPRM2 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM3(String s) {
if (!s.trim().isEmpty()) {
HOPRM3 = Byte.parseByte(s);
} else {
HOPRM3 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM4(String s) {
if (!s.trim().isEmpty()) {
HOPRM4 = Byte.parseByte(s);
} else {
HOPRM4 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM5(String s) {
if (!s.trim().isEmpty()) {
HOPRM5 = Byte.parseByte(s);
} else {
HOPRM5 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM6(String s) {
if (!s.trim().isEmpty()) {
HOPRM6 = Byte.parseByte(s);
} else {
HOPRM6 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM7(String s) {
if (!s.trim().isEmpty()) {
HOPRM7 = Byte.parseByte(s);
} else {
HOPRM7 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM8(String s) {
if (!s.trim().isEmpty()) {
HOPRM8 = Byte.parseByte(s);
} else {
HOPRM8 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM9(String s) {
if (!s.trim().isEmpty()) {
HOPRM9 = Byte.parseByte(s);
} else {
HOPRM9 = Byte.MIN_VALUE;
}
}

protected final void initHOREBFE(String s) {
if (!s.trim().isEmpty()) {
HOREBFE = Byte.parseByte(s);
} else {
HOREBFE = Byte.MIN_VALUE;
}
}

protected final void initHOREBFL(String s) {
if (!s.trim().isEmpty()) {
HOREBFL = Short.parseShort(s);
} else {
HOREBFL = Short.MIN_VALUE;
}
}

protected final void initHOREBFR(String s) {
if (!s.trim().isEmpty()) {
HOREBFR = Byte.parseByte(s);
} else {
HOREBFR = Byte.MIN_VALUE;
}
}

protected final void initHOREBFU(String s) {
if (!s.trim().isEmpty()) {
HOREBFU = Short.parseShort(s);
} else {
HOREBFU = Short.MIN_VALUE;
}
}

protected final void initHOREBME(String s) {
if (!s.trim().isEmpty()) {
HOREBME = Byte.parseByte(s);
} else {
HOREBME = Byte.MIN_VALUE;
}
}

protected final void initHOREBML(String s) {
if (!s.trim().isEmpty()) {
HOREBML = Short.parseShort(s);
} else {
HOREBML = Short.MIN_VALUE;
}
}

protected final void initHOREBMR(String s) {
if (!s.trim().isEmpty()) {
HOREBMR = Byte.parseByte(s);
} else {
HOREBMR = Byte.MIN_VALUE;
}
}

protected final void initHOREBMU(String s) {
if (!s.trim().isEmpty()) {
HOREBMU = Short.parseShort(s);
} else {
HOREBMU = Short.MIN_VALUE;
}
}

protected final void initHOREBOE(String s) {
if (!s.trim().isEmpty()) {
HOREBOE = Byte.parseByte(s);
} else {
HOREBOE = Byte.MIN_VALUE;
}
}

protected final void initHOREBOL(String s) {
if (!s.trim().isEmpty()) {
HOREBOL = Short.parseShort(s);
} else {
HOREBOL = Short.MIN_VALUE;
}
}

protected final void initHOREBOR(String s) {
if (!s.trim().isEmpty()) {
HOREBOR = Byte.parseByte(s);
} else {
HOREBOR = Byte.MIN_VALUE;
}
}

protected final void initHOREBOU(String s) {
if (!s.trim().isEmpty()) {
HOREBOU = Short.parseShort(s);
} else {
HOREBOU = Short.MIN_VALUE;
}
}

protected final void initHOREBWE(String s) {
if (!s.trim().isEmpty()) {
HOREBWE = Byte.parseByte(s);
} else {
HOREBWE = Byte.MIN_VALUE;
}
}

protected final void initHOREBWL(String s) {
if (!s.trim().isEmpty()) {
HOREBWL = Short.parseShort(s);
} else {
HOREBWL = Short.MIN_VALUE;
}
}

protected final void initHOREBWR(String s) {
if (!s.trim().isEmpty()) {
HOREBWR = Byte.parseByte(s);
} else {
HOREBWR = Byte.MIN_VALUE;
}
}

protected final void initHOREBWU(String s) {
if (!s.trim().isEmpty()) {
HOREBWU = Short.parseShort(s);
} else {
HOREBWU = Short.MIN_VALUE;
}
}

protected final void initHOREBYE(String s) {
if (!s.trim().isEmpty()) {
HOREBYE = Byte.parseByte(s);
} else {
HOREBYE = Byte.MIN_VALUE;
}
}

protected final void initHOREBYL(String s) {
if (!s.trim().isEmpty()) {
HOREBYL = Short.parseShort(s);
} else {
HOREBYL = Short.MIN_VALUE;
}
}

protected final void initHOREBYR(String s) {
if (!s.trim().isEmpty()) {
HOREBYR = Byte.parseByte(s);
} else {
HOREBYR = Byte.MIN_VALUE;
}
}

protected final void initHOREBYU(String s) {
if (!s.trim().isEmpty()) {
HOREBYU = Byte.parseByte(s);
} else {
HOREBYU = Byte.MIN_VALUE;
}
}

protected final void initHORET(String s) {
if (!s.trim().isEmpty()) {
HORET = Byte.parseByte(s);
} else {
HORET = Byte.MIN_VALUE;
}
}

protected final void initHORFEE1(String s) {
if (!s.trim().isEmpty()) {
HORFEE1 = Byte.parseByte(s);
} else {
HORFEE1 = Byte.MIN_VALUE;
}
}

protected final void initHORFEE2(String s) {
if (!s.trim().isEmpty()) {
HORFEE2 = Byte.parseByte(s);
} else {
HORFEE2 = Byte.MIN_VALUE;
}
}

protected final void initHORFEP1(String s) {
if (!s.trim().isEmpty()) {
HORFEP1 = Byte.parseByte(s);
} else {
HORFEP1 = Byte.MIN_VALUE;
}
}

protected final void initHORFEP2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORFEP2 = false;
} else {
HORFEP2 = true;
}
}
}

protected final void initHORHB(String s) {
if (!s.trim().isEmpty()) {
HORHB = Byte.parseByte(s);
} else {
HORHB = Byte.MIN_VALUE;
}
}

protected final void initHORINC1(String s) {
if (!s.trim().isEmpty()) {
HORINC1 = Byte.parseByte(s);
} else {
HORINC1 = Byte.MIN_VALUE;
}
}

protected final void initHORINM(String s) {
if (!s.trim().isEmpty()) {
HORINM = Short.parseShort(s);
} else {
HORINM = Short.MIN_VALUE;
}
}

protected final void initHORINM1(String s) {
if (!s.trim().isEmpty()) {
HORINM1 = Byte.parseByte(s);
} else {
HORINM1 = Byte.MIN_VALUE;
}
}

protected final void initHORINME(String s) {
if (!s.trim().isEmpty()) {
HORINME = Byte.parseByte(s);
} else {
HORINME = Byte.MIN_VALUE;
}
}

protected final void initHORINML(String s) {
if (!s.trim().isEmpty()) {
HORINML = Short.parseShort(s);
} else {
HORINML = Short.MIN_VALUE;
}
}

protected final void initHORINMR(String s) {
if (!s.trim().isEmpty()) {
HORINMR = Byte.parseByte(s);
} else {
HORINMR = Byte.MIN_VALUE;
}
}

protected final void initHORINMU(String s) {
if (!s.trim().isEmpty()) {
HORINMU = Short.parseShort(s);
} else {
HORINMU = Short.MIN_VALUE;
}
}

protected final void initHORMAIN(String s) {
if (!s.trim().isEmpty()) {
HORMAIN = Byte.parseByte(s);
} else {
HORMAIN = Byte.MIN_VALUE;
}
}

protected final void initHORMAM1(String s) {
if (!s.trim().isEmpty()) {
HORMAM1 = Byte.parseByte(s);
} else {
HORMAM1 = Byte.MIN_VALUE;
}
}

protected final void initHORMAM2(String s) {
if (!s.trim().isEmpty()) {
HORMAM2 = Byte.parseByte(s);
} else {
HORMAM2 = Byte.MIN_VALUE;
}
}

protected final void initHORMAM3(String s) {
if (!s.trim().isEmpty()) {
HORMAM3 = Byte.parseByte(s);
} else {
HORMAM3 = Byte.MIN_VALUE;
}
}

protected final void initHORMAM4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMAM4 = false;
} else {
HORMAM4 = true;
}
}
}

protected final void initHORMO1(String s) {
if (!s.trim().isEmpty()) {
HORMO1 = Byte.parseByte(s);
} else {
HORMO1 = Byte.MIN_VALUE;
}
}

protected final void initHORMO10(String s) {
if (!s.trim().isEmpty()) {
HORMO10 = Byte.parseByte(s);
} else {
HORMO10 = Byte.MIN_VALUE;
}
}

protected final void initHORMO2(String s) {
if (!s.trim().isEmpty()) {
HORMO2 = Byte.parseByte(s);
} else {
HORMO2 = Byte.MIN_VALUE;
}
}

protected final void initHORMO8(String s) {
if (!s.trim().isEmpty()) {
HORMO8 = Byte.parseByte(s);
} else {
HORMO8 = Byte.MIN_VALUE;
}
}

protected final void initHORMO9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMO9 = false;
} else {
HORMO9 = true;
}
}
}

protected final void initHORMOFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOFE = false;
} else {
HORMOFE = true;
}
}
}

protected final void initHORMOFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOFL = false;
} else {
HORMOFL = true;
}
}
}

protected final void initHORMOFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOFR = false;
} else {
HORMOFR = true;
}
}
}

protected final void initHORMOFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOFU = false;
} else {
HORMOFU = true;
}
}
}

protected final void initHORMOL(String s) {
if (!s.trim().isEmpty()) {
HORMOL = Integer.parseInt(s);
} else {
HORMOL = Integer.MIN_VALUE;
}
}

protected final void initHORMOLE(String s) {
if (!s.trim().isEmpty()) {
HORMOLE = Byte.parseByte(s);
} else {
HORMOLE = Byte.MIN_VALUE;
}
}

protected final void initHORMOLL(String s) {
if (!s.trim().isEmpty()) {
HORMOLL = Integer.parseInt(s);
} else {
HORMOLL = Integer.MIN_VALUE;
}
}

protected final void initHORMOLR(String s) {
if (!s.trim().isEmpty()) {
HORMOLR = Byte.parseByte(s);
} else {
HORMOLR = Byte.MIN_VALUE;
}
}

protected final void initHORMOLU(String s) {
if (!s.trim().isEmpty()) {
HORMOLU = Integer.parseInt(s);
} else {
HORMOLU = Integer.MIN_VALUE;
}
}

protected final void initHORMOME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOME = false;
} else {
HORMOME = true;
}
}
}

protected final void initHORMOML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOML = false;
} else {
HORMOML = true;
}
}
}

protected final void initHORMOMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOMR = false;
} else {
HORMOMR = true;
}
}
}

protected final void initHORMOMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOMU = false;
} else {
HORMOMU = true;
}
}
}

protected final void initHORMOOE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOOE = false;
} else {
HORMOOE = true;
}
}
}

protected final void initHORMOOL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOOL = false;
} else {
HORMOOL = true;
}
}
}

protected final void initHORMOOR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOOR = false;
} else {
HORMOOR = true;
}
}
}

protected final void initHORMOOU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOOU = false;
} else {
HORMOOU = true;
}
}
}

protected final void initHORMOWE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOWE = false;
} else {
HORMOWE = true;
}
}
}

protected final void initHORMOWL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOWL = false;
} else {
HORMOWL = true;
}
}
}

protected final void initHORMOWR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOWR = false;
} else {
HORMOWR = true;
}
}
}

protected final void initHORMOWU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOWU = false;
} else {
HORMOWU = true;
}
}
}

protected final void initHORMOYE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOYE = false;
} else {
HORMOYE = true;
}
}
}

protected final void initHORMOYL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOYL = false;
} else {
HORMOYL = true;
}
}
}

protected final void initHORMOYR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOYR = false;
} else {
HORMOYR = true;
}
}
}

protected final void initHORMOYU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOYU = false;
} else {
HORMOYU = true;
}
}
}

protected final void initHORMS(String s) {
if (!s.trim().isEmpty()) {
HORMS = Byte.parseByte(s);
} else {
HORMS = Byte.MIN_VALUE;
}
}

protected final void initHORMU(String s) {
if (!s.trim().isEmpty()) {
HORMU = Short.parseShort(s);
} else {
HORMU = Short.MIN_VALUE;
}
}

protected final void initHORMUFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFE = false;
} else {
HORMUFE = true;
}
}
}

protected final void initHORMUFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFL = false;
} else {
HORMUFL = true;
}
}
}

protected final void initHORMUFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFR = false;
} else {
HORMUFR = true;
}
}
}

protected final void initHORMUFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFU = false;
} else {
HORMUFU = true;
}
}
}

protected final void initHORMUME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUME = false;
} else {
HORMUME = true;
}
}
}

protected final void initHORMUML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUML = false;
} else {
HORMUML = true;
}
}
}

protected final void initHORMUMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUMR = false;
} else {
HORMUMR = true;
}
}
}

protected final void initHORMUMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUMU = false;
} else {
HORMUMU = true;
}
}
}

protected final void initHORMUO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUO = false;
} else {
HORMUO = true;
}
}
}

protected final void initHORMUOE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOE = false;
} else {
HORMUOE = true;
}
}
}

protected final void initHORMUOL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOL = false;
} else {
HORMUOL = true;
}
}
}

protected final void initHORMUOR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOR = false;
} else {
HORMUOR = true;
}
}
}

protected final void initHORMUOU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOU = false;
} else {
HORMUOU = true;
}
}
}

protected final void initHORMUWE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWE = false;
} else {
HORMUWE = true;
}
}
}

protected final void initHORMUWL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWL = false;
} else {
HORMUWL = true;
}
}
}

protected final void initHORMUWR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWR = false;
} else {
HORMUWR = true;
}
}
}

protected final void initHORMUWU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWU = false;
} else {
HORMUWU = true;
}
}
}

protected final void initHORMUYE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYE = false;
} else {
HORMUYE = true;
}
}
}

protected final void initHORMUYL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYL = false;
} else {
HORMUYL = true;
}
}
}

protected final void initHORMUYR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYR = false;
} else {
HORMUYR = true;
}
}
}

protected final void initHORMUYU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYU = false;
} else {
HORMUYU = true;
}
}
}

protected final void initHORMV1(String s) {
if (!s.trim().isEmpty()) {
HORMV1 = Byte.parseByte(s);
} else {
HORMV1 = Byte.MIN_VALUE;
}
}

protected final void initHORMV2(String s) {
if (!s.trim().isEmpty()) {
HORMV2 = Byte.parseByte(s);
} else {
HORMV2 = Byte.MIN_VALUE;
}
}

protected final void initHORMV3(String s) {
if (!s.trim().isEmpty()) {
HORMV3 = Byte.parseByte(s);
} else {
HORMV3 = Byte.MIN_VALUE;
}
}

protected final void initHORMV4(String s) {
if (!s.trim().isEmpty()) {
HORMV4 = Byte.parseByte(s);
} else {
HORMV4 = Byte.MIN_VALUE;
}
}

protected final void initHORMVA1(String s) {
if (!s.trim().isEmpty()) {
HORMVA1 = Byte.parseByte(s);
} else {
HORMVA1 = Byte.MIN_VALUE;
}
}

protected final void initHORMVA2(String s) {
if (!s.trim().isEmpty()) {
HORMVA2 = Byte.parseByte(s);
} else {
HORMVA2 = Byte.MIN_VALUE;
}
}

protected final void initHORMVA3(String s) {
if (!s.trim().isEmpty()) {
HORMVA3 = Byte.parseByte(s);
} else {
HORMVA3 = Byte.MIN_VALUE;
}
}

protected final void initHORMVA4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMVA4 = false;
} else {
HORMVA4 = true;
}
}
}

protected final void initHORMVM1(String s) {
if (!s.trim().isEmpty()) {
HORMVM1 = Byte.parseByte(s);
} else {
HORMVM1 = Byte.MIN_VALUE;
}
}

protected final void initHORMVM2(String s) {
if (!s.trim().isEmpty()) {
HORMVM2 = Byte.parseByte(s);
} else {
HORMVM2 = Byte.MIN_VALUE;
}
}

protected final void initHORMVM3(String s) {
if (!s.trim().isEmpty()) {
HORMVM3 = Byte.parseByte(s);
} else {
HORMVM3 = Byte.MIN_VALUE;
}
}

protected final void initHORMVM4(String s) {
if (!s.trim().isEmpty()) {
HORMVM4 = Byte.parseByte(s);
} else {
HORMVM4 = Byte.MIN_VALUE;
}
}

protected final void initHORPAY(String s) {
if (!s.trim().isEmpty()) {
HORPAY = Byte.parseByte(s);
} else {
HORPAY = Byte.MIN_VALUE;
}
}

protected final void initHORPC(String s) {
if (!s.trim().isEmpty()) {
HORPC = Byte.parseByte(s);
} else {
HORPC = Byte.MIN_VALUE;
}
}

protected final void initHORPCM(String s) {
if (!s.trim().isEmpty()) {
HORPCM = Integer.parseInt(s);
} else {
HORPCM = Integer.MIN_VALUE;
}
}

protected final void initHORPCME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPCME = false;
} else {
HORPCME = true;
}
}
}

protected final void initHORPCML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPCML = false;
} else {
HORPCML = true;
}
}
}

protected final void initHORPCMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPCMR = false;
} else {
HORPCMR = true;
}
}
}

protected final void initHORPCMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPCMU = false;
} else {
HORPCMU = true;
}
}
}

protected final void initHORPM(String s) {
if (!s.trim().isEmpty()) {
HORPM = Integer.parseInt(s);
} else {
HORPM = Integer.MIN_VALUE;
}
}

protected final void initHORPME(String s) {
if (!s.trim().isEmpty()) {
HORPME = Byte.parseByte(s);
} else {
HORPME = Byte.MIN_VALUE;
}
}

protected final void initHORPML(String s) {
if (!s.trim().isEmpty()) {
HORPML = Short.parseShort(s);
} else {
HORPML = Short.MIN_VALUE;
}
}

protected final void initHORPMR(String s) {
if (!s.trim().isEmpty()) {
HORPMR = Byte.parseByte(s);
} else {
HORPMR = Byte.MIN_VALUE;
}
}

protected final void initHORPMU(String s) {
if (!s.trim().isEmpty()) {
HORPMU = Integer.parseInt(s);
} else {
HORPMU = Integer.MIN_VALUE;
}
}

protected final void initHORPOF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPOF = false;
} else {
HORPOF = true;
}
}
}

protected final void initHORPOFO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPOFO = false;
} else {
HORPOFO = true;
}
}
}

protected final void initHORPOS(String s) {
if (!s.trim().isEmpty()) {
HORPOS = Byte.parseByte(s);
} else {
HORPOS = Byte.MIN_VALUE;
}
}

protected final void initHORPOSO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPOSO = false;
} else {
HORPOSO = true;
}
}
}

protected final void initHORRM(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRM = false;
} else {
HORRM = true;
}
}
}

protected final void initHORRME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRME = false;
} else {
HORRME = true;
}
}
}

protected final void initHORRML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRML = false;
} else {
HORRML = true;
}
}
}

protected final void initHORRMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRMR = false;
} else {
HORRMR = true;
}
}
}

protected final void initHORRMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRMU = false;
} else {
HORRMU = true;
}
}
}

protected final void initHOSELLE(String s) {
if (!s.trim().isEmpty()) {
HOSELLE = Byte.parseByte(s);
} else {
HOSELLE = Byte.MIN_VALUE;
}
}

protected final void initHOSELLL(String s) {
if (!s.trim().isEmpty()) {
HOSELLL = Integer.parseInt(s);
} else {
HOSELLL = Integer.MIN_VALUE;
}
}

protected final void initHOSELLR(String s) {
if (!s.trim().isEmpty()) {
HOSELLR = Byte.parseByte(s);
} else {
HOSELLR = Byte.MIN_VALUE;
}
}

protected final void initHOSELLU(String s) {
if (!s.trim().isEmpty()) {
HOSELLU = Integer.parseInt(s);
} else {
HOSELLU = Integer.MIN_VALUE;
}
}

protected final void initHOTENST(String s) {
if (!s.trim().isEmpty()) {
HOTENST = Byte.parseByte(s);
} else {
HOTENST = Byte.MIN_VALUE;
}
}

protected final void initHOTRAN(String s) {
if (!s.trim().isEmpty()) {
HOTRAN = Integer.parseInt(s);
} else {
HOTRAN = Integer.MIN_VALUE;
}
}

protected final void initHOTRANE(String s) {
if (!s.trim().isEmpty()) {
HOTRANE = Byte.parseByte(s);
} else {
HOTRANE = Byte.MIN_VALUE;
}
}

protected final void initHOTRANL(String s) {
if (!s.trim().isEmpty()) {
HOTRANL = Short.parseShort(s);
} else {
HOTRANL = Short.MIN_VALUE;
}
}

protected final void initHOTRANR(String s) {
if (!s.trim().isEmpty()) {
HOTRANR = Byte.parseByte(s);
} else {
HOTRANR = Byte.MIN_VALUE;
}
}

protected final void initHOTRANU(String s) {
if (!s.trim().isEmpty()) {
HOTRANU = Short.parseShort(s);
} else {
HOTRANU = Short.MIN_VALUE;
}
}

protected final void initHOV(String s) {
if (!s.trim().isEmpty()) {
HOV = Byte.parseByte(s);
} else {
HOV = Byte.MIN_VALUE;
}
}

protected final void initHOVAG11(String s) {
if (!s.trim().isEmpty()) {
HOVAG11 = Byte.parseByte(s);
} else {
HOVAG11 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG12(String s) {
if (!s.trim().isEmpty()) {
HOVAG12 = Byte.parseByte(s);
} else {
HOVAG12 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG13(String s) {
if (!s.trim().isEmpty()) {
HOVAG13 = Byte.parseByte(s);
} else {
HOVAG13 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG14(String s) {
if (!s.trim().isEmpty()) {
HOVAG14 = Byte.parseByte(s);
} else {
HOVAG14 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG15(String s) {
if (!s.trim().isEmpty()) {
HOVAG15 = Byte.parseByte(s);
} else {
HOVAG15 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG16(String s) {
if (!s.trim().isEmpty()) {
HOVAG16 = Byte.parseByte(s);
} else {
HOVAG16 = Byte.MIN_VALUE;
}
}

protected final void initHOVE1(String s) {
if (!s.trim().isEmpty()) {
HOVE1 = Integer.parseInt(s);
} else {
HOVE1 = Integer.MIN_VALUE;
}
}

protected final void initHOVE10(String s) {
if (!s.trim().isEmpty()) {
HOVE10 = Integer.parseInt(s);
} else {
HOVE10 = Integer.MIN_VALUE;
}
}

protected final void initHOVE10E(String s) {
if (!s.trim().isEmpty()) {
HOVE10E = Byte.parseByte(s);
} else {
HOVE10E = Byte.MIN_VALUE;
}
}

protected final void initHOVE10L(String s) {
if (!s.trim().isEmpty()) {
HOVE10L = Short.parseShort(s);
} else {
HOVE10L = Short.MIN_VALUE;
}
}

protected final void initHOVE10R(String s) {
if (!s.trim().isEmpty()) {
HOVE10R = Byte.parseByte(s);
} else {
HOVE10R = Byte.MIN_VALUE;
}
}

protected final void initHOVE10U(String s) {
if (!s.trim().isEmpty()) {
HOVE10U = Short.parseShort(s);
} else {
HOVE10U = Short.MIN_VALUE;
}
}

protected final void initHOVE1E(String s) {
if (!s.trim().isEmpty()) {
HOVE1E = Integer.parseInt(s);
} else {
HOVE1E = Integer.MIN_VALUE;
}
}

protected final void initHOVE1L(String s) {
if (!s.trim().isEmpty()) {
HOVE1L = Integer.parseInt(s);
} else {
HOVE1L = Integer.MIN_VALUE;
}
}

protected final void initHOVE1R(String s) {
if (!s.trim().isEmpty()) {
HOVE1R = Byte.parseByte(s);
} else {
HOVE1R = Byte.MIN_VALUE;
}
}

protected final void initHOVE1U(String s) {
if (!s.trim().isEmpty()) {
HOVE1U = Integer.parseInt(s);
} else {
HOVE1U = Integer.MIN_VALUE;
}
}

protected final void initHOVE2(String s) {
if (!s.trim().isEmpty()) {
HOVE2 = Integer.parseInt(s);
} else {
HOVE2 = Integer.MIN_VALUE;
}
}

protected final void initHOVE2E(String s) {
if (!s.trim().isEmpty()) {
HOVE2E = Short.parseShort(s);
} else {
HOVE2E = Short.MIN_VALUE;
}
}

protected final void initHOVE2L(String s) {
if (!s.trim().isEmpty()) {
HOVE2L = Short.parseShort(s);
} else {
HOVE2L = Short.MIN_VALUE;
}
}

protected final void initHOVE2R(String s) {
if (!s.trim().isEmpty()) {
HOVE2R = Byte.parseByte(s);
} else {
HOVE2R = Byte.MIN_VALUE;
}
}

protected final void initHOVE2U(String s) {
if (!s.trim().isEmpty()) {
HOVE2U = Short.parseShort(s);
} else {
HOVE2U = Short.MIN_VALUE;
}
}

protected final void initHOVE3(String s) {
if (!s.trim().isEmpty()) {
HOVE3 = Integer.parseInt(s);
} else {
HOVE3 = Integer.MIN_VALUE;
}
}

protected final void initHOVE3E(String s) {
if (!s.trim().isEmpty()) {
HOVE3E = Short.parseShort(s);
} else {
HOVE3E = Short.MIN_VALUE;
}
}

protected final void initHOVE3L(String s) {
if (!s.trim().isEmpty()) {
HOVE3L = Integer.parseInt(s);
} else {
HOVE3L = Integer.MIN_VALUE;
}
}

protected final void initHOVE3R(String s) {
if (!s.trim().isEmpty()) {
HOVE3R = Byte.parseByte(s);
} else {
HOVE3R = Byte.MIN_VALUE;
}
}

protected final void initHOVE3U(String s) {
if (!s.trim().isEmpty()) {
HOVE3U = Integer.parseInt(s);
} else {
HOVE3U = Integer.MIN_VALUE;
}
}

protected final void initHOVE4(String s) {
if (!s.trim().isEmpty()) {
HOVE4 = Short.parseShort(s);
} else {
HOVE4 = Short.MIN_VALUE;
}
}

protected final void initHOVE4E(String s) {
if (!s.trim().isEmpty()) {
HOVE4E = Byte.parseByte(s);
} else {
HOVE4E = Byte.MIN_VALUE;
}
}

protected final void initHOVE4L(String s) {
if (!s.trim().isEmpty()) {
HOVE4L = Short.parseShort(s);
} else {
HOVE4L = Short.MIN_VALUE;
}
}

protected final void initHOVE4R(String s) {
if (!s.trim().isEmpty()) {
HOVE4R = Byte.parseByte(s);
} else {
HOVE4R = Byte.MIN_VALUE;
}
}

protected final void initHOVE4U(String s) {
if (!s.trim().isEmpty()) {
HOVE4U = Short.parseShort(s);
} else {
HOVE4U = Short.MIN_VALUE;
}
}

protected final void initHOVE5(String s) {
if (!s.trim().isEmpty()) {
HOVE5 = Short.parseShort(s);
} else {
HOVE5 = Short.MIN_VALUE;
}
}

protected final void initHOVE5E(String s) {
if (!s.trim().isEmpty()) {
HOVE5E = Byte.parseByte(s);
} else {
HOVE5E = Byte.MIN_VALUE;
}
}

protected final void initHOVE5L(String s) {
if (!s.trim().isEmpty()) {
HOVE5L = Integer.parseInt(s);
} else {
HOVE5L = Integer.MIN_VALUE;
}
}

protected final void initHOVE5R(String s) {
if (!s.trim().isEmpty()) {
HOVE5R = Byte.parseByte(s);
} else {
HOVE5R = Byte.MIN_VALUE;
}
}

protected final void initHOVE5U(String s) {
if (!s.trim().isEmpty()) {
HOVE5U = Integer.parseInt(s);
} else {
HOVE5U = Integer.MIN_VALUE;
}
}

protected final void initHOVE6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE6 = false;
} else {
HOVE6 = true;
}
}
}

protected final void initHOVE6E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE6E = false;
} else {
HOVE6E = true;
}
}
}

protected final void initHOVE6L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE6L = false;
} else {
HOVE6L = true;
}
}
}

protected final void initHOVE6R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE6R = false;
} else {
HOVE6R = true;
}
}
}

protected final void initHOVE6U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE6U = false;
} else {
HOVE6U = true;
}
}
}

protected final void initHOVE7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE7 = false;
} else {
HOVE7 = true;
}
}
}

protected final void initHOVE7E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE7E = false;
} else {
HOVE7E = true;
}
}
}

protected final void initHOVE7L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE7L = false;
} else {
HOVE7L = true;
}
}
}

protected final void initHOVE7R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE7R = false;
} else {
HOVE7R = true;
}
}
}

protected final void initHOVE7U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE7U = false;
} else {
HOVE7U = true;
}
}
}

protected final void initHOVE8(String s) {
if (!s.trim().isEmpty()) {
HOVE8 = Integer.parseInt(s);
} else {
HOVE8 = Integer.MIN_VALUE;
}
}

protected final void initHOVE8E(String s) {
if (!s.trim().isEmpty()) {
HOVE8E = Byte.parseByte(s);
} else {
HOVE8E = Byte.MIN_VALUE;
}
}

protected final void initHOVE8L(String s) {
if (!s.trim().isEmpty()) {
HOVE8L = Short.parseShort(s);
} else {
HOVE8L = Short.MIN_VALUE;
}
}

protected final void initHOVE8R(String s) {
if (!s.trim().isEmpty()) {
HOVE8R = Byte.parseByte(s);
} else {
HOVE8R = Byte.MIN_VALUE;
}
}

protected final void initHOVE8U(String s) {
if (!s.trim().isEmpty()) {
HOVE8U = Integer.parseInt(s);
} else {
HOVE8U = Integer.MIN_VALUE;
}
}

protected final void initHOVE9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE9 = false;
} else {
HOVE9 = true;
}
}
}

protected final void initHOVE9E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE9E = false;
} else {
HOVE9E = true;
}
}
}

protected final void initHOVE9L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE9L = false;
} else {
HOVE9L = true;
}
}
}

protected final void initHOVE9R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE9R = false;
} else {
HOVE9R = true;
}
}
}

protected final void initHOVE9U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE9U = false;
} else {
HOVE9U = true;
}
}
}

protected final void initHOVEHX(String s) {
if (!s.trim().isEmpty()) {
HOVEHX = Byte.parseByte(s);
} else {
HOVEHX = Byte.MIN_VALUE;
}
}

protected final void initHOVER(String s) {
if (!s.trim().isEmpty()) {
HOVER = s;
}
}

protected final void initHOVER10(String s) {
if (!s.trim().isEmpty()) {
HOVER10 = s;
}
}

protected final void initHOVER11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HOVER11 = false;
}
}

protected final void initHOVER12(String s) {
if (!s.trim().isEmpty()) {
HOVER12 = s;
}
}

protected final void initHOVER13(String s) {
if (!s.trim().isEmpty()) {
HOVER13 = s;
}
}

protected final void initHOVER14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HOVER14 = false;
}
}

protected final void initHOVER15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HOVER15 = false;
}
}

protected final void initHOVER16(String s) {
if (!s.trim().isEmpty()) {
HOVER16 = s;
}
}

protected final void initHOVER2(String s) {
if (!s.trim().isEmpty()) {
HOVER2 = s;
}
}

protected final void initHOVER3(String s) {
if (!s.trim().isEmpty()) {
HOVER3 = s;
}
}

protected final void initHOVER4(String s) {
if (!s.trim().isEmpty()) {
HOVER4 = s;
}
}

protected final void initHOVER5(String s) {
if (!s.trim().isEmpty()) {
HOVER5 = s;
}
}

protected final void initHOVER6(String s) {
if (!s.trim().isEmpty()) {
HOVER6 = s;
}
}

protected final void initHOVER7(String s) {
if (!s.trim().isEmpty()) {
HOVER7 = s;
}
}

protected final void initHOVER8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HOVER8 = false;
}
}

protected final void initHOVER9(String s) {
if (!s.trim().isEmpty()) {
HOVER9 = s;
}
}

protected final void initHOVLR(String s) {
if (!s.trim().isEmpty()) {
HOVLR = s;
}
}

protected final void initHOVLR10(String s) {
if (!s.trim().isEmpty()) {
HOVLR10 = s;
}
}

protected final void initHOVLR11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HOVLR11 = false;
}
}

protected final void initHOVLR12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HOVLR12 = false;
}
}

protected final void initHOVLR13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HOVLR13 = false;
}
}

protected final void initHOVLR14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HOVLR14 = false;
}
}

protected final void initHOVLR15(String s) {
if (!s.trim().isEmpty()) {
HOVLR15 = s;
}
}

protected final void initHOVLR16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HOVLR16 = false;
}
}

protected final void initHOVLR2(String s) {
if (!s.trim().isEmpty()) {
HOVLR2 = s;
}
}

protected final void initHOVLR3(String s) {
if (!s.trim().isEmpty()) {
HOVLR3 = s;
}
}

protected final void initHOVLR4(String s) {
if (!s.trim().isEmpty()) {
HOVLR4 = s;
}
}

protected final void initHOVLR5(String s) {
if (!s.trim().isEmpty()) {
HOVLR5 = s;
}
}

protected final void initHOVLR6(String s) {
if (!s.trim().isEmpty()) {
HOVLR6 = s;
}
}

protected final void initHOVLR7(String s) {
if (!s.trim().isEmpty()) {
HOVLR7 = s;
}
}

protected final void initHOVLR8(String s) {
if (!s.trim().isEmpty()) {
HOVLR8 = s;
}
}

protected final void initHOVLR9(String s) {
if (!s.trim().isEmpty()) {
HOVLR9 = s;
}
}

protected final void initHOVM1(String s) {
if (!s.trim().isEmpty()) {
HOVM1 = Integer.parseInt(s);
} else {
HOVM1 = Integer.MIN_VALUE;
}
}

protected final void initHOVM10(String s) {
if (!s.trim().isEmpty()) {
HOVM10 = Integer.parseInt(s);
} else {
HOVM10 = Integer.MIN_VALUE;
}
}

protected final void initHOVM10E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM10E = false;
} else {
HOVM10E = true;
}
}
}

protected final void initHOVM10L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM10L = false;
} else {
HOVM10L = true;
}
}
}

protected final void initHOVM10R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM10R = false;
} else {
HOVM10R = true;
}
}
}

protected final void initHOVM10U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM10U = false;
} else {
HOVM10U = true;
}
}
}

protected final void initHOVM1E(String s) {
if (!s.trim().isEmpty()) {
HOVM1E = Byte.parseByte(s);
} else {
HOVM1E = Byte.MIN_VALUE;
}
}

protected final void initHOVM1L(String s) {
if (!s.trim().isEmpty()) {
HOVM1L = Integer.parseInt(s);
} else {
HOVM1L = Integer.MIN_VALUE;
}
}

protected final void initHOVM1R(String s) {
if (!s.trim().isEmpty()) {
HOVM1R = Byte.parseByte(s);
} else {
HOVM1R = Byte.MIN_VALUE;
}
}

protected final void initHOVM1U(String s) {
if (!s.trim().isEmpty()) {
HOVM1U = Integer.parseInt(s);
} else {
HOVM1U = Integer.MIN_VALUE;
}
}

protected final void initHOVM2(String s) {
if (!s.trim().isEmpty()) {
HOVM2 = Integer.parseInt(s);
} else {
HOVM2 = Integer.MIN_VALUE;
}
}

protected final void initHOVM2E(String s) {
if (!s.trim().isEmpty()) {
HOVM2E = Byte.parseByte(s);
} else {
HOVM2E = Byte.MIN_VALUE;
}
}

protected final void initHOVM2L(String s) {
if (!s.trim().isEmpty()) {
HOVM2L = Integer.parseInt(s);
} else {
HOVM2L = Integer.MIN_VALUE;
}
}

protected final void initHOVM2R(String s) {
if (!s.trim().isEmpty()) {
HOVM2R = Byte.parseByte(s);
} else {
HOVM2R = Byte.MIN_VALUE;
}
}

protected final void initHOVM2U(String s) {
if (!s.trim().isEmpty()) {
HOVM2U = Integer.parseInt(s);
} else {
HOVM2U = Integer.MIN_VALUE;
}
}

protected final void initHOVM3(String s) {
if (!s.trim().isEmpty()) {
HOVM3 = Integer.parseInt(s);
} else {
HOVM3 = Integer.MIN_VALUE;
}
}

protected final void initHOVM3E(String s) {
if (!s.trim().isEmpty()) {
HOVM3E = Byte.parseByte(s);
} else {
HOVM3E = Byte.MIN_VALUE;
}
}

protected final void initHOVM3L(String s) {
if (!s.trim().isEmpty()) {
HOVM3L = Integer.parseInt(s);
} else {
HOVM3L = Integer.MIN_VALUE;
}
}

protected final void initHOVM3R(String s) {
if (!s.trim().isEmpty()) {
HOVM3R = Byte.parseByte(s);
} else {
HOVM3R = Byte.MIN_VALUE;
}
}

protected final void initHOVM3U(String s) {
if (!s.trim().isEmpty()) {
HOVM3U = Integer.parseInt(s);
} else {
HOVM3U = Integer.MIN_VALUE;
}
}

protected final void initHOVM4(String s) {
if (!s.trim().isEmpty()) {
HOVM4 = Integer.parseInt(s);
} else {
HOVM4 = Integer.MIN_VALUE;
}
}

protected final void initHOVM4E(String s) {
if (!s.trim().isEmpty()) {
HOVM4E = Byte.parseByte(s);
} else {
HOVM4E = Byte.MIN_VALUE;
}
}

protected final void initHOVM4L(String s) {
if (!s.trim().isEmpty()) {
HOVM4L = Integer.parseInt(s);
} else {
HOVM4L = Integer.MIN_VALUE;
}
}

protected final void initHOVM4R(String s) {
if (!s.trim().isEmpty()) {
HOVM4R = Byte.parseByte(s);
} else {
HOVM4R = Byte.MIN_VALUE;
}
}

protected final void initHOVM4U(String s) {
if (!s.trim().isEmpty()) {
HOVM4U = Integer.parseInt(s);
} else {
HOVM4U = Integer.MIN_VALUE;
}
}

protected final void initHOVM5(String s) {
if (!s.trim().isEmpty()) {
HOVM5 = Short.parseShort(s);
} else {
HOVM5 = Short.MIN_VALUE;
}
}

protected final void initHOVM5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM5E = false;
} else {
HOVM5E = true;
}
}
}

protected final void initHOVM5L(String s) {
if (!s.trim().isEmpty()) {
HOVM5L = Short.parseShort(s);
} else {
HOVM5L = Short.MIN_VALUE;
}
}

protected final void initHOVM5R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM5R = false;
} else {
HOVM5R = true;
}
}
}

protected final void initHOVM5U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HOVM5U = false;
} else {
HOVM5U = true;
}
}
}

protected final void initHOVM6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM6 = false;
} else {
HOVM6 = true;
}
}
}

protected final void initHOVM6E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM6E = false;
} else {
HOVM6E = true;
}
}
}

protected final void initHOVM6L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM6L = false;
} else {
HOVM6L = true;
}
}
}

protected final void initHOVM6R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM6R = false;
} else {
HOVM6R = true;
}
}
}

protected final void initHOVM6U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM6U = false;
} else {
HOVM6U = true;
}
}
}

protected final void initHOVM7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM7 = false;
} else {
HOVM7 = true;
}
}
}

protected final void initHOVM7E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM7E = false;
} else {
HOVM7E = true;
}
}
}

protected final void initHOVM7L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM7L = false;
} else {
HOVM7L = true;
}
}
}

protected final void initHOVM7R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM7R = false;
} else {
HOVM7R = true;
}
}
}

protected final void initHOVM7U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM7U = false;
} else {
HOVM7U = true;
}
}
}

protected final void initHOVM8(String s) {
if (!s.trim().isEmpty()) {
HOVM8 = Integer.parseInt(s);
} else {
HOVM8 = Integer.MIN_VALUE;
}
}

protected final void initHOVM8E(String s) {
if (!s.trim().isEmpty()) {
HOVM8E = Byte.parseByte(s);
} else {
HOVM8E = Byte.MIN_VALUE;
}
}

protected final void initHOVM8L(String s) {
if (!s.trim().isEmpty()) {
HOVM8L = Short.parseShort(s);
} else {
HOVM8L = Short.MIN_VALUE;
}
}

protected final void initHOVM8R(String s) {
if (!s.trim().isEmpty()) {
HOVM8R = Byte.parseByte(s);
} else {
HOVM8R = Byte.MIN_VALUE;
}
}

protected final void initHOVM8U(String s) {
if (!s.trim().isEmpty()) {
HOVM8U = Integer.parseInt(s);
} else {
HOVM8U = Integer.MIN_VALUE;
}
}

protected final void initHOVM9(String s) {
if (!s.trim().isEmpty()) {
HOVM9 = Short.parseShort(s);
} else {
HOVM9 = Short.MIN_VALUE;
}
}

protected final void initHOVM9E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM9E = false;
} else {
HOVM9E = true;
}
}
}

protected final void initHOVM9L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM9L = false;
} else {
HOVM9L = true;
}
}
}

protected final void initHOVM9R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM9R = false;
} else {
HOVM9R = true;
}
}
}

protected final void initHOVM9U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM9U = false;
} else {
HOVM9U = true;
}
}
}

protected final void initHOVN(String s) {
if (!s.trim().isEmpty()) {
HOVN = Byte.parseByte(s);
} else {
HOVN = Byte.MIN_VALUE;
}
}

protected final void initHOVNO(String s) {
if (!s.trim().isEmpty()) {
HOVNO = Byte.parseByte(s);
} else {
HOVNO = Byte.MIN_VALUE;
}
}

protected final void initHOVNO10(String s) {
if (!s.trim().isEmpty()) {
HOVNO10 = Byte.parseByte(s);
} else {
HOVNO10 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO11(String s) {
if (!s.trim().isEmpty()) {
HOVNO11 = Byte.parseByte(s);
} else {
HOVNO11 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO12(String s) {
if (!s.trim().isEmpty()) {
HOVNO12 = Byte.parseByte(s);
} else {
HOVNO12 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO13(String s) {
if (!s.trim().isEmpty()) {
HOVNO13 = Byte.parseByte(s);
} else {
HOVNO13 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO14(String s) {
if (!s.trim().isEmpty()) {
HOVNO14 = Byte.parseByte(s);
} else {
HOVNO14 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO15(String s) {
if (!s.trim().isEmpty()) {
HOVNO15 = Byte.parseByte(s);
} else {
HOVNO15 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO16(String s) {
if (!s.trim().isEmpty()) {
HOVNO16 = Byte.parseByte(s);
} else {
HOVNO16 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO2(String s) {
if (!s.trim().isEmpty()) {
HOVNO2 = Byte.parseByte(s);
} else {
HOVNO2 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO3(String s) {
if (!s.trim().isEmpty()) {
HOVNO3 = Byte.parseByte(s);
} else {
HOVNO3 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO4(String s) {
if (!s.trim().isEmpty()) {
HOVNO4 = Byte.parseByte(s);
} else {
HOVNO4 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO5(String s) {
if (!s.trim().isEmpty()) {
HOVNO5 = Byte.parseByte(s);
} else {
HOVNO5 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO6(String s) {
if (!s.trim().isEmpty()) {
HOVNO6 = Byte.parseByte(s);
} else {
HOVNO6 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO7(String s) {
if (!s.trim().isEmpty()) {
HOVNO7 = Byte.parseByte(s);
} else {
HOVNO7 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO8(String s) {
if (!s.trim().isEmpty()) {
HOVNO8 = Byte.parseByte(s);
} else {
HOVNO8 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO9(String s) {
if (!s.trim().isEmpty()) {
HOVNO9 = Byte.parseByte(s);
} else {
HOVNO9 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR(String s) {
if (!s.trim().isEmpty()) {
HOVNR = Byte.parseByte(s);
} else {
HOVNR = Byte.MIN_VALUE;
}
}

protected final void initHOVNR10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR10 = false;
} else {
HOVNR10 = true;
}
}
}

protected final void initHOVNR11(String s) {
if (!s.trim().isEmpty()) {
HOVNR11 = Byte.parseByte(s);
} else {
HOVNR11 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR12 = false;
} else {
HOVNR12 = true;
}
}
}

protected final void initHOVNR13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR13 = false;
} else {
HOVNR13 = true;
}
}
}

protected final void initHOVNR14(String s) {
if (!s.trim().isEmpty()) {
HOVNR14 = Byte.parseByte(s);
} else {
HOVNR14 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR15 = false;
} else {
HOVNR15 = true;
}
}
}

protected final void initHOVNR16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR16 = false;
} else {
HOVNR16 = true;
}
}
}

protected final void initHOVNR2(String s) {
if (!s.trim().isEmpty()) {
HOVNR2 = Byte.parseByte(s);
} else {
HOVNR2 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR3(String s) {
if (!s.trim().isEmpty()) {
HOVNR3 = s;
}
}

protected final void initHOVNR4(String s) {
if (!s.trim().isEmpty()) {
HOVNR4 = Byte.parseByte(s);
} else {
HOVNR4 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR5(String s) {
if (!s.trim().isEmpty()) {
HOVNR5 = Byte.parseByte(s);
} else {
HOVNR5 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR6(String s) {
if (!s.trim().isEmpty()) {
HOVNR6 = Byte.parseByte(s);
} else {
HOVNR6 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR7(String s) {
if (!s.trim().isEmpty()) {
HOVNR7 = Byte.parseByte(s);
} else {
HOVNR7 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR8(String s) {
if (!s.trim().isEmpty()) {
HOVNR8 = Byte.parseByte(s);
} else {
HOVNR8 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR9(String s) {
if (!s.trim().isEmpty()) {
HOVNR9 = Byte.parseByte(s);
} else {
HOVNR9 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW(String s) {
if (!s.trim().isEmpty()) {
HOVNW = Byte.parseByte(s);
} else {
HOVNW = Byte.MIN_VALUE;
}
}

protected final void initHOVNW10(String s) {
if (!s.trim().isEmpty()) {
HOVNW10 = Byte.parseByte(s);
} else {
HOVNW10 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW11(String s) {
if (!s.trim().isEmpty()) {
HOVNW11 = Byte.parseByte(s);
} else {
HOVNW11 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW12(String s) {
if (!s.trim().isEmpty()) {
HOVNW12 = Byte.parseByte(s);
} else {
HOVNW12 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW13(String s) {
if (!s.trim().isEmpty()) {
HOVNW13 = Byte.parseByte(s);
} else {
HOVNW13 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW14(String s) {
if (!s.trim().isEmpty()) {
HOVNW14 = Byte.parseByte(s);
} else {
HOVNW14 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW15(String s) {
if (!s.trim().isEmpty()) {
HOVNW15 = Byte.parseByte(s);
} else {
HOVNW15 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW16(String s) {
if (!s.trim().isEmpty()) {
HOVNW16 = Byte.parseByte(s);
} else {
HOVNW16 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW3(String s) {
if (!s.trim().isEmpty()) {
HOVNW3 = Byte.parseByte(s);
} else {
HOVNW3 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW4(String s) {
if (!s.trim().isEmpty()) {
HOVNW4 = Byte.parseByte(s);
} else {
HOVNW4 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW5(String s) {
if (!s.trim().isEmpty()) {
HOVNW5 = Byte.parseByte(s);
} else {
HOVNW5 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW6(String s) {
if (!s.trim().isEmpty()) {
HOVNW6 = Byte.parseByte(s);
} else {
HOVNW6 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW7(String s) {
if (!s.trim().isEmpty()) {
HOVNW7 = Byte.parseByte(s);
} else {
HOVNW7 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW8(String s) {
if (!s.trim().isEmpty()) {
HOVNW8 = Byte.parseByte(s);
} else {
HOVNW8 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW9(String s) {
if (!s.trim().isEmpty()) {
HOVNW9 = Byte.parseByte(s);
} else {
HOVNW9 = Byte.MIN_VALUE;
}
}

protected final void initHOVO101(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO101 = false;
} else {
HOVO101 = true;
}
}
}

protected final void initHOVO102(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO102 = false;
} else {
HOVO102 = true;
}
}
}

protected final void initHOVO11(String s) {
if (!s.trim().isEmpty()) {
HOVO11 = Byte.parseByte(s);
} else {
HOVO11 = Byte.MIN_VALUE;
}
}

protected final void initHOVO111(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO111 = false;
} else {
HOVO111 = true;
}
}
}

protected final void initHOVO112(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO112 = false;
} else {
HOVO112 = true;
}
}
}

protected final void initHOVO12(String s) {
if (!s.trim().isEmpty()) {
HOVO12 = Byte.parseByte(s);
} else {
HOVO12 = Byte.MIN_VALUE;
}
}

protected final void initHOVO121(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO121 = false;
} else {
HOVO121 = true;
}
}
}

protected final void initHOVO122(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO122 = false;
} else {
HOVO122 = true;
}
}
}

protected final void initHOVO131(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO131 = false;
} else {
HOVO131 = true;
}
}
}

protected final void initHOVO132(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO132 = false;
} else {
HOVO132 = true;
}
}
}

protected final void initHOVO141(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO141 = false;
} else {
HOVO141 = true;
}
}
}

protected final void initHOVO142(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO142 = false;
} else {
HOVO142 = true;
}
}
}

protected final void initHOVO151(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO151 = false;
} else {
HOVO151 = true;
}
}
}

protected final void initHOVO152(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO152 = false;
} else {
HOVO152 = true;
}
}
}

protected final void initHOVO161(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO161 = false;
} else {
HOVO161 = true;
}
}
}

protected final void initHOVO162(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO162 = false;
} else {
HOVO162 = true;
}
}
}

protected final void initHOVO21(String s) {
if (!s.trim().isEmpty()) {
HOVO21 = Byte.parseByte(s);
} else {
HOVO21 = Byte.MIN_VALUE;
}
}

protected final void initHOVO22(String s) {
if (!s.trim().isEmpty()) {
HOVO22 = Byte.parseByte(s);
} else {
HOVO22 = Byte.MIN_VALUE;
}
}

protected final void initHOVO31(String s) {
if (!s.trim().isEmpty()) {
HOVO31 = Byte.parseByte(s);
} else {
HOVO31 = Byte.MIN_VALUE;
}
}

protected final void initHOVO32(String s) {
if (!s.trim().isEmpty()) {
HOVO32 = Byte.parseByte(s);
} else {
HOVO32 = Byte.MIN_VALUE;
}
}

protected final void initHOVO41(String s) {
if (!s.trim().isEmpty()) {
HOVO41 = Byte.parseByte(s);
} else {
HOVO41 = Byte.MIN_VALUE;
}
}

protected final void initHOVO42(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO42 = false;
} else {
HOVO42 = true;
}
}
}

protected final void initHOVO51(String s) {
if (!s.trim().isEmpty()) {
HOVO51 = Byte.parseByte(s);
} else {
HOVO51 = Byte.MIN_VALUE;
}
}

protected final void initHOVO52(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO52 = false;
} else {
HOVO52 = true;
}
}
}

protected final void initHOVO61(String s) {
if (!s.trim().isEmpty()) {
HOVO61 = Byte.parseByte(s);
} else {
HOVO61 = Byte.MIN_VALUE;
}
}

protected final void initHOVO62(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO62 = false;
} else {
HOVO62 = true;
}
}
}

protected final void initHOVO71(String s) {
if (!s.trim().isEmpty()) {
HOVO71 = Byte.parseByte(s);
} else {
HOVO71 = Byte.MIN_VALUE;
}
}

protected final void initHOVO72(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO72 = false;
} else {
HOVO72 = true;
}
}
}

protected final void initHOVO81(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO81 = false;
} else {
HOVO81 = true;
}
}
}

protected final void initHOVO82(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO82 = false;
} else {
HOVO82 = true;
}
}
}

protected final void initHOVO91(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO91 = false;
} else {
HOVO91 = true;
}
}
}

protected final void initHOVO92(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO92 = false;
} else {
HOVO92 = true;
}
}
}

protected final void initHOVST(String s) {
if (!s.trim().isEmpty()) {
HOVST = Byte.parseByte(s);
} else {
HOVST = Byte.MIN_VALUE;
}
}

protected final void initHOVST10(String s) {
if (!s.trim().isEmpty()) {
HOVST10 = Byte.parseByte(s);
} else {
HOVST10 = Byte.MIN_VALUE;
}
}

protected final void initHOVST11(String s) {
if (!s.trim().isEmpty()) {
HOVST11 = Byte.parseByte(s);
} else {
HOVST11 = Byte.MIN_VALUE;
}
}

protected final void initHOVST12(String s) {
if (!s.trim().isEmpty()) {
HOVST12 = Byte.parseByte(s);
} else {
HOVST12 = Byte.MIN_VALUE;
}
}

protected final void initHOVST13(String s) {
if (!s.trim().isEmpty()) {
HOVST13 = Byte.parseByte(s);
} else {
HOVST13 = Byte.MIN_VALUE;
}
}

protected final void initHOVST14(String s) {
if (!s.trim().isEmpty()) {
HOVST14 = Byte.parseByte(s);
} else {
HOVST14 = Byte.MIN_VALUE;
}
}

protected final void initHOVST15(String s) {
if (!s.trim().isEmpty()) {
HOVST15 = Byte.parseByte(s);
} else {
HOVST15 = Byte.MIN_VALUE;
}
}

protected final void initHOVST16(String s) {
if (!s.trim().isEmpty()) {
HOVST16 = Byte.parseByte(s);
} else {
HOVST16 = Byte.MIN_VALUE;
}
}

protected final void initHOVST2(String s) {
if (!s.trim().isEmpty()) {
HOVST2 = Byte.parseByte(s);
} else {
HOVST2 = Byte.MIN_VALUE;
}
}

protected final void initHOVST3(String s) {
if (!s.trim().isEmpty()) {
HOVST3 = Byte.parseByte(s);
} else {
HOVST3 = Byte.MIN_VALUE;
}
}

protected final void initHOVST4(String s) {
if (!s.trim().isEmpty()) {
HOVST4 = Byte.parseByte(s);
} else {
HOVST4 = Byte.MIN_VALUE;
}
}

protected final void initHOVST5(String s) {
if (!s.trim().isEmpty()) {
HOVST5 = Byte.parseByte(s);
} else {
HOVST5 = Byte.MIN_VALUE;
}
}

protected final void initHOVST6(String s) {
if (!s.trim().isEmpty()) {
HOVST6 = Byte.parseByte(s);
} else {
HOVST6 = Byte.MIN_VALUE;
}
}

protected final void initHOVST7(String s) {
if (!s.trim().isEmpty()) {
HOVST7 = Byte.parseByte(s);
} else {
HOVST7 = Byte.MIN_VALUE;
}
}

protected final void initHOVST8(String s) {
if (!s.trim().isEmpty()) {
HOVST8 = Byte.parseByte(s);
} else {
HOVST8 = Byte.MIN_VALUE;
}
}

protected final void initHOVST9(String s) {
if (!s.trim().isEmpty()) {
HOVST9 = Byte.parseByte(s);
} else {
HOVST9 = Byte.MIN_VALUE;
}
}

protected final void initHOVW11(String s) {
if (!s.trim().isEmpty()) {
HOVW11 = Byte.parseByte(s);
} else {
HOVW11 = Byte.MIN_VALUE;
}
}

protected final void initHOVW12(String s) {
if (!s.trim().isEmpty()) {
HOVW12 = Byte.parseByte(s);
} else {
HOVW12 = Byte.MIN_VALUE;
}
}

protected final void initHOVW13(String s) {
if (!s.trim().isEmpty()) {
HOVW13 = Byte.parseByte(s);
} else {
HOVW13 = Byte.MIN_VALUE;
}
}

protected final void initHOVW14(String s) {
if (!s.trim().isEmpty()) {
HOVW14 = Byte.parseByte(s);
} else {
HOVW14 = Byte.MIN_VALUE;
}
}

protected final void initHOVW15(String s) {
if (!s.trim().isEmpty()) {
HOVW15 = Byte.parseByte(s);
} else {
HOVW15 = Byte.MIN_VALUE;
}
}

protected final void initHOVW16(String s) {
if (!s.trim().isEmpty()) {
HOVW16 = Byte.parseByte(s);
} else {
HOVW16 = Byte.MIN_VALUE;
}
}

protected final void initHOVW3(String s) {
if (!s.trim().isEmpty()) {
HOVW3 = Byte.parseByte(s);
} else {
HOVW3 = Byte.MIN_VALUE;
}
}

protected final void initHOVW4(String s) {
if (!s.trim().isEmpty()) {
HOVW4 = Byte.parseByte(s);
} else {
HOVW4 = Byte.MIN_VALUE;
}
}

protected final void initHOVW5(String s) {
if (!s.trim().isEmpty()) {
HOVW5 = Byte.parseByte(s);
} else {
HOVW5 = Byte.MIN_VALUE;
}
}

protected final void initHOVW6(String s) {
if (!s.trim().isEmpty()) {
HOVW6 = Byte.parseByte(s);
} else {
HOVW6 = Byte.MIN_VALUE;
}
}

protected final void initHOVW7(String s) {
if (!s.trim().isEmpty()) {
HOVW7 = Byte.parseByte(s);
} else {
HOVW7 = Byte.MIN_VALUE;
}
}

protected final void initHOVW8(String s) {
if (!s.trim().isEmpty()) {
HOVW8 = Byte.parseByte(s);
} else {
HOVW8 = Byte.MIN_VALUE;
}
}

protected final void initHOVYR(String s) {
if (!s.trim().isEmpty()) {
HOVYR = Short.parseShort(s);
} else {
HOVYR = Short.MIN_VALUE;
}
}

protected final void initHOVYR10(String s) {
if (!s.trim().isEmpty()) {
HOVYR10 = Short.parseShort(s);
} else {
HOVYR10 = Short.MIN_VALUE;
}
}

protected final void initHOVYR11(String s) {
if (!s.trim().isEmpty()) {
HOVYR11 = Short.parseShort(s);
} else {
HOVYR11 = Short.MIN_VALUE;
}
}

protected final void initHOVYR12(String s) {
if (!s.trim().isEmpty()) {
HOVYR12 = Short.parseShort(s);
} else {
HOVYR12 = Short.MIN_VALUE;
}
}

protected final void initHOVYR13(String s) {
if (!s.trim().isEmpty()) {
HOVYR13 = Short.parseShort(s);
} else {
HOVYR13 = Short.MIN_VALUE;
}
}

protected final void initHOVYR14(String s) {
if (!s.trim().isEmpty()) {
HOVYR14 = Short.parseShort(s);
} else {
HOVYR14 = Short.MIN_VALUE;
}
}

protected final void initHOVYR15(String s) {
if (!s.trim().isEmpty()) {
HOVYR15 = Short.parseShort(s);
} else {
HOVYR15 = Short.MIN_VALUE;
}
}

protected final void initHOVYR16(String s) {
if (!s.trim().isEmpty()) {
HOVYR16 = Short.parseShort(s);
} else {
HOVYR16 = Short.MIN_VALUE;
}
}

protected final void initHOVYR2(String s) {
if (!s.trim().isEmpty()) {
HOVYR2 = Short.parseShort(s);
} else {
HOVYR2 = Short.MIN_VALUE;
}
}

protected final void initHOVYR3(String s) {
if (!s.trim().isEmpty()) {
HOVYR3 = Short.parseShort(s);
} else {
HOVYR3 = Short.MIN_VALUE;
}
}

protected final void initHOVYR4(String s) {
if (!s.trim().isEmpty()) {
HOVYR4 = Short.parseShort(s);
} else {
HOVYR4 = Short.MIN_VALUE;
}
}

protected final void initHOVYR5(String s) {
if (!s.trim().isEmpty()) {
HOVYR5 = Short.parseShort(s);
} else {
HOVYR5 = Short.MIN_VALUE;
}
}

protected final void initHOVYR6(String s) {
if (!s.trim().isEmpty()) {
HOVYR6 = Short.parseShort(s);
} else {
HOVYR6 = Short.MIN_VALUE;
}
}

protected final void initHOVYR7(String s) {
if (!s.trim().isEmpty()) {
HOVYR7 = Short.parseShort(s);
} else {
HOVYR7 = Short.MIN_VALUE;
}
}

protected final void initHOVYR8(String s) {
if (!s.trim().isEmpty()) {
HOVYR8 = Short.parseShort(s);
} else {
HOVYR8 = Short.MIN_VALUE;
}
}

protected final void initHOVYR9(String s) {
if (!s.trim().isEmpty()) {
HOVYR9 = Short.parseShort(s);
} else {
HOVYR9 = Short.MIN_VALUE;
}
}

protected final void initHOWHN01(String s) {
if (!s.trim().isEmpty()) {
HOWHN01 = Byte.parseByte(s);
} else {
HOWHN01 = Byte.MIN_VALUE;
}
}

protected final void initHOWHN02(String s) {
if (!s.trim().isEmpty()) {
HOWHN02 = Byte.parseByte(s);
} else {
HOWHN02 = Byte.MIN_VALUE;
}
}

protected final void initHOWHN03(String s) {
if (!s.trim().isEmpty()) {
HOWHN03 = Byte.parseByte(s);
} else {
HOWHN03 = Byte.MIN_VALUE;
}
}

protected final void initHOWHN04(String s) {
if (!s.trim().isEmpty()) {
HOWHN04 = Byte.parseByte(s);
} else {
HOWHN04 = Byte.MIN_VALUE;
}
}

protected final void initHOWHN05(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOWHN05 = false;
} else {
HOWHN05 = true;
}
}
}

protected final void initHSCRP(String s) {
if (!s.trim().isEmpty()) {
HSCRP = Double.parseDouble(s);
} else {
HSCRP = Double.NaN;
}
}

protected final void initHSECLST(String s) {
if (!s.trim().isEmpty()) {
HSECLST = Short.parseShort(s);
} else {
HSECLST = Short.MIN_VALUE;
}
}

protected final void initHSEINT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
HSEINT = false;
} else {
HSEINT = true;
}
}
}

protected final void initHSEYR(String s) {
if (!s.trim().isEmpty()) {
HSEYR = Short.parseShort(s);
} else {
HSEYR = Short.MIN_VALUE;
}
}

protected final void initHTFEV(String s) {
if (!s.trim().isEmpty()) {
HTFEV = Double.parseDouble(s);
} else {
HTFEV = Double.NaN;
}
}

protected final void initHTFVC(String s) {
if (!s.trim().isEmpty()) {
HTFVC = Double.parseDouble(s);
} else {
HTFVC = Double.NaN;
}
}

protected final void initHTOK(String s) {
if (!s.trim().isEmpty()) {
HTOK = Byte.parseByte(s);
} else {
HTOK = Byte.MIN_VALUE;
}
}

protected final void initHTPF(String s) {
if (!s.trim().isEmpty()) {
HTPF = Short.parseShort(s);
} else {
HTPF = Short.MIN_VALUE;
}
}

protected final void initHTVAL(String s) {
if (!s.trim().isEmpty()) {
HTVAL = Double.parseDouble(s);
} else {
HTVAL = Double.NaN;
}
}

protected final void initIAA39(String s) {
if (!s.trim().isEmpty()) {
IAA39 = Short.parseShort(s);
} else {
IAA39 = Short.MIN_VALUE;
}
}

protected final void initIAA39FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FE = false;
} else {
IAA39FE = true;
}
}
}

protected final void initIAA39FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FL = false;
} else {
IAA39FL = true;
}
}
}

protected final void initIAA39FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FR = false;
} else {
IAA39FR = true;
}
}
}

protected final void initIAA39FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FU = false;
} else {
IAA39FU = true;
}
}
}

protected final void initIAA39ME(String s) {
if (!s.trim().isEmpty()) {
IAA39ME = Byte.parseByte(s);
} else {
IAA39ME = Byte.MIN_VALUE;
}
}

protected final void initIAA39ML(String s) {
if (!s.trim().isEmpty()) {
IAA39ML = Short.parseShort(s);
} else {
IAA39ML = Short.MIN_VALUE;
}
}

protected final void initIAA39MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39MR = false;
} else {
IAA39MR = true;
}
}
}

protected final void initIAA39MU(String s) {
if (!s.trim().isEmpty()) {
IAA39MU = Short.parseShort(s);
} else {
IAA39MU = Short.MIN_VALUE;
}
}

protected final void initIAA39OE(String s) {
if (!s.trim().isEmpty()) {
IAA39OE = Byte.parseByte(s);
} else {
IAA39OE = Byte.MIN_VALUE;
}
}

protected final void initIAA39OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA39OL = false;
} else {
IAA39OL = true;
}
}
}

protected final void initIAA39OR(String s) {
if (!s.trim().isEmpty()) {
IAA39OR = Byte.parseByte(s);
} else {
IAA39OR = Byte.MIN_VALUE;
}
}

protected final void initIAA39OU(String s) {
if (!s.trim().isEmpty()) {
IAA39OU = Short.parseShort(s);
} else {
IAA39OU = Short.MIN_VALUE;
}
}

protected final void initIAA39WE(String s) {
if (!s.trim().isEmpty()) {
IAA39WE = Byte.parseByte(s);
} else {
IAA39WE = Byte.MIN_VALUE;
}
}

protected final void initIAA39WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WL = false;
} else {
IAA39WL = true;
}
}
}

protected final void initIAA39WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WR = false;
} else {
IAA39WR = true;
}
}
}

protected final void initIAA39WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WU = false;
} else {
IAA39WU = true;
}
}
}

protected final void initIAA39YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YE = false;
} else {
IAA39YE = true;
}
}
}

protected final void initIAA39YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YL = false;
} else {
IAA39YL = true;
}
}
}

protected final void initIAA39YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YR = false;
} else {
IAA39YR = true;
}
}
}

protected final void initIAA39YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YU = false;
} else {
IAA39YU = true;
}
}
}

protected final void initIAA40(String s) {
if (!s.trim().isEmpty()) {
IAA40 = Short.parseShort(s);
} else {
IAA40 = Short.MIN_VALUE;
}
}

protected final void initIAA40FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FE = false;
} else {
IAA40FE = true;
}
}
}

protected final void initIAA40FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FL = false;
} else {
IAA40FL = true;
}
}
}

protected final void initIAA40FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FR = false;
} else {
IAA40FR = true;
}
}
}

protected final void initIAA40FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FU = false;
} else {
IAA40FU = true;
}
}
}

protected final void initIAA40ME(String s) {
if (!s.trim().isEmpty()) {
IAA40ME = Byte.parseByte(s);
} else {
IAA40ME = Byte.MIN_VALUE;
}
}

protected final void initIAA40ML(String s) {
if (!s.trim().isEmpty()) {
IAA40ML = Short.parseShort(s);
} else {
IAA40ML = Short.MIN_VALUE;
}
}

protected final void initIAA40MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40MR = false;
} else {
IAA40MR = true;
}
}
}

protected final void initIAA40MU(String s) {
if (!s.trim().isEmpty()) {
IAA40MU = Short.parseShort(s);
} else {
IAA40MU = Short.MIN_VALUE;
}
}

protected final void initIAA40OE(String s) {
if (!s.trim().isEmpty()) {
IAA40OE = Byte.parseByte(s);
} else {
IAA40OE = Byte.MIN_VALUE;
}
}

protected final void initIAA40OL(String s) {
if (!s.trim().isEmpty()) {
IAA40OL = Short.parseShort(s);
} else {
IAA40OL = Short.MIN_VALUE;
}
}

protected final void initIAA40OR(String s) {
if (!s.trim().isEmpty()) {
IAA40OR = Byte.parseByte(s);
} else {
IAA40OR = Byte.MIN_VALUE;
}
}

protected final void initIAA40OU(String s) {
if (!s.trim().isEmpty()) {
IAA40OU = Short.parseShort(s);
} else {
IAA40OU = Short.MIN_VALUE;
}
}

protected final void initIAA40WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WE = false;
} else {
IAA40WE = true;
}
}
}

protected final void initIAA40WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WL = false;
} else {
IAA40WL = true;
}
}
}

protected final void initIAA40WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WR = false;
} else {
IAA40WR = true;
}
}
}

protected final void initIAA40WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WU = false;
} else {
IAA40WU = true;
}
}
}

protected final void initIAA40YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YE = false;
} else {
IAA40YE = true;
}
}
}

protected final void initIAA40YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YL = false;
} else {
IAA40YL = true;
}
}
}

protected final void initIAA40YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YR = false;
} else {
IAA40YR = true;
}
}
}

protected final void initIAA40YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YU = false;
} else {
IAA40YU = true;
}
}
}

protected final void initIAA41(String s) {
if (!s.trim().isEmpty()) {
IAA41 = Short.parseShort(s);
} else {
IAA41 = Short.MIN_VALUE;
}
}

protected final void initIAA41FE(String s) {
if (!s.trim().isEmpty()) {
IAA41FE = Byte.parseByte(s);
} else {
IAA41FE = Byte.MIN_VALUE;
}
}

protected final void initIAA41FL(String s) {
if (!s.trim().isEmpty()) {
IAA41FL = Short.parseShort(s);
} else {
IAA41FL = Short.MIN_VALUE;
}
}

protected final void initIAA41FR(String s) {
if (!s.trim().isEmpty()) {
IAA41FR = Byte.parseByte(s);
} else {
IAA41FR = Byte.MIN_VALUE;
}
}

protected final void initIAA41FU(String s) {
if (!s.trim().isEmpty()) {
IAA41FU = Short.parseShort(s);
} else {
IAA41FU = Short.MIN_VALUE;
}
}

protected final void initIAA41ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41ME = false;
} else {
IAA41ME = true;
}
}
}

protected final void initIAA41ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41ML = false;
} else {
IAA41ML = true;
}
}
}

protected final void initIAA41MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41MR = false;
} else {
IAA41MR = true;
}
}
}

protected final void initIAA41MU(String s) {
if (!s.trim().isEmpty()) {
IAA41MU = Short.parseShort(s);
} else {
IAA41MU = Short.MIN_VALUE;
}
}

protected final void initIAA41OE(String s) {
if (!s.trim().isEmpty()) {
IAA41OE = Byte.parseByte(s);
} else {
IAA41OE = Byte.MIN_VALUE;
}
}

protected final void initIAA41OL(String s) {
if (!s.trim().isEmpty()) {
IAA41OL = Short.parseShort(s);
} else {
IAA41OL = Short.MIN_VALUE;
}
}

protected final void initIAA41OR(String s) {
if (!s.trim().isEmpty()) {
IAA41OR = Byte.parseByte(s);
} else {
IAA41OR = Byte.MIN_VALUE;
}
}

protected final void initIAA41OU(String s) {
if (!s.trim().isEmpty()) {
IAA41OU = Short.parseShort(s);
} else {
IAA41OU = Short.MIN_VALUE;
}
}

protected final void initIAA41WE(String s) {
if (!s.trim().isEmpty()) {
IAA41WE = Byte.parseByte(s);
} else {
IAA41WE = Byte.MIN_VALUE;
}
}

protected final void initIAA41WL(String s) {
if (!s.trim().isEmpty()) {
IAA41WL = Byte.parseByte(s);
} else {
IAA41WL = Byte.MIN_VALUE;
}
}

protected final void initIAA41WR(String s) {
if (!s.trim().isEmpty()) {
IAA41WR = Byte.parseByte(s);
} else {
IAA41WR = Byte.MIN_VALUE;
}
}

protected final void initIAA41WU(String s) {
if (!s.trim().isEmpty()) {
IAA41WU = Byte.parseByte(s);
} else {
IAA41WU = Byte.MIN_VALUE;
}
}

protected final void initIAA41YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YE = false;
} else {
IAA41YE = true;
}
}
}

protected final void initIAA41YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YL = false;
} else {
IAA41YL = true;
}
}
}

protected final void initIAA41YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YR = false;
} else {
IAA41YR = true;
}
}
}

protected final void initIAA41YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YU = false;
} else {
IAA41YU = true;
}
}
}

protected final void initIAA42(String s) {
if (!s.trim().isEmpty()) {
IAA42 = Short.parseShort(s);
} else {
IAA42 = Short.MIN_VALUE;
}
}

protected final void initIAA42FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FE = false;
} else {
IAA42FE = true;
}
}
}

protected final void initIAA42FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA42FL = false;
} else {
IAA42FL = true;
}
}
}

protected final void initIAA42FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FR = false;
} else {
IAA42FR = true;
}
}
}

protected final void initIAA42FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FU = false;
} else {
IAA42FU = true;
}
}
}

protected final void initIAA42ME(String s) {
if (!s.trim().isEmpty()) {
IAA42ME = Byte.parseByte(s);
} else {
IAA42ME = Byte.MIN_VALUE;
}
}

protected final void initIAA42ML(String s) {
if (!s.trim().isEmpty()) {
IAA42ML = Short.parseShort(s);
} else {
IAA42ML = Short.MIN_VALUE;
}
}

protected final void initIAA42MR(String s) {
if (!s.trim().isEmpty()) {
IAA42MR = Byte.parseByte(s);
} else {
IAA42MR = Byte.MIN_VALUE;
}
}

protected final void initIAA42MU(String s) {
if (!s.trim().isEmpty()) {
IAA42MU = Short.parseShort(s);
} else {
IAA42MU = Short.MIN_VALUE;
}
}

protected final void initIAA42OE(String s) {
if (!s.trim().isEmpty()) {
IAA42OE = Byte.parseByte(s);
} else {
IAA42OE = Byte.MIN_VALUE;
}
}

protected final void initIAA42OL(String s) {
if (!s.trim().isEmpty()) {
IAA42OL = Short.parseShort(s);
} else {
IAA42OL = Short.MIN_VALUE;
}
}

protected final void initIAA42OR(String s) {
if (!s.trim().isEmpty()) {
IAA42OR = Byte.parseByte(s);
} else {
IAA42OR = Byte.MIN_VALUE;
}
}

protected final void initIAA42OU(String s) {
if (!s.trim().isEmpty()) {
IAA42OU = Short.parseShort(s);
} else {
IAA42OU = Short.MIN_VALUE;
}
}

protected final void initIAA42WE(String s) {
if (!s.trim().isEmpty()) {
IAA42WE = Byte.parseByte(s);
} else {
IAA42WE = Byte.MIN_VALUE;
}
}

protected final void initIAA42WL(String s) {
if (!s.trim().isEmpty()) {
IAA42WL = Short.parseShort(s);
} else {
IAA42WL = Short.MIN_VALUE;
}
}

protected final void initIAA42WR(String s) {
if (!s.trim().isEmpty()) {
IAA42WR = Byte.parseByte(s);
} else {
IAA42WR = Byte.MIN_VALUE;
}
}

protected final void initIAA42WU(String s) {
if (!s.trim().isEmpty()) {
IAA42WU = Short.parseShort(s);
} else {
IAA42WU = Short.MIN_VALUE;
}
}

protected final void initIAA42YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42YE = false;
} else {
IAA42YE = true;
}
}
}

protected final void initIAA42YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA42YL = false;
} else {
IAA42YL = true;
}
}
}

protected final void initIAA42YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42YR = false;
} else {
IAA42YR = true;
}
}
}

protected final void initIAA42YU(String s) {
if (!s.trim().isEmpty()) {
IAA42YU = Short.parseShort(s);
} else {
IAA42YU = Short.MIN_VALUE;
}
}

protected final void initIAA43(String s) {
if (!s.trim().isEmpty()) {
IAA43 = Short.parseShort(s);
} else {
IAA43 = Short.MIN_VALUE;
}
}

protected final void initIAA43FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FE = false;
} else {
IAA43FE = true;
}
}
}

protected final void initIAA43FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FL = false;
} else {
IAA43FL = true;
}
}
}

protected final void initIAA43FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FR = false;
} else {
IAA43FR = true;
}
}
}

protected final void initIAA43FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FU = false;
} else {
IAA43FU = true;
}
}
}

protected final void initIAA43ME(String s) {
if (!s.trim().isEmpty()) {
IAA43ME = Byte.parseByte(s);
} else {
IAA43ME = Byte.MIN_VALUE;
}
}

protected final void initIAA43ML(String s) {
if (!s.trim().isEmpty()) {
IAA43ML = Short.parseShort(s);
} else {
IAA43ML = Short.MIN_VALUE;
}
}

protected final void initIAA43MR(String s) {
if (!s.trim().isEmpty()) {
IAA43MR = Byte.parseByte(s);
} else {
IAA43MR = Byte.MIN_VALUE;
}
}

protected final void initIAA43MU(String s) {
if (!s.trim().isEmpty()) {
IAA43MU = Short.parseShort(s);
} else {
IAA43MU = Short.MIN_VALUE;
}
}

protected final void initIAA43OE(String s) {
if (!s.trim().isEmpty()) {
IAA43OE = Byte.parseByte(s);
} else {
IAA43OE = Byte.MIN_VALUE;
}
}

protected final void initIAA43OL(String s) {
if (!s.trim().isEmpty()) {
IAA43OL = Byte.parseByte(s);
} else {
IAA43OL = Byte.MIN_VALUE;
}
}

protected final void initIAA43OR(String s) {
if (!s.trim().isEmpty()) {
IAA43OR = Byte.parseByte(s);
} else {
IAA43OR = Byte.MIN_VALUE;
}
}

protected final void initIAA43OU(String s) {
if (!s.trim().isEmpty()) {
IAA43OU = Short.parseShort(s);
} else {
IAA43OU = Short.MIN_VALUE;
}
}

protected final void initIAA43WE(String s) {
if (!s.trim().isEmpty()) {
IAA43WE = Byte.parseByte(s);
} else {
IAA43WE = Byte.MIN_VALUE;
}
}

protected final void initIAA43WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA43WL = false;
} else {
IAA43WL = true;
}
}
}

protected final void initIAA43WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43WR = false;
} else {
IAA43WR = true;
}
}
}

protected final void initIAA43WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43WU = false;
} else {
IAA43WU = true;
}
}
}

protected final void initIAA43YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YE = false;
} else {
IAA43YE = true;
}
}
}

protected final void initIAA43YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YL = false;
} else {
IAA43YL = true;
}
}
}

protected final void initIAA43YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YR = false;
} else {
IAA43YR = true;
}
}
}

protected final void initIAA43YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YU = false;
} else {
IAA43YU = true;
}
}
}

protected final void initIAA44(String s) {
if (!s.trim().isEmpty()) {
IAA44 = Short.parseShort(s);
} else {
IAA44 = Short.MIN_VALUE;
}
}

protected final void initIAA44FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FE = false;
} else {
IAA44FE = true;
}
}
}

protected final void initIAA44FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FL = false;
} else {
IAA44FL = true;
}
}
}

protected final void initIAA44FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FR = false;
} else {
IAA44FR = true;
}
}
}

protected final void initIAA44FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FU = false;
} else {
IAA44FU = true;
}
}
}

protected final void initIAA44ME(String s) {
if (!s.trim().isEmpty()) {
IAA44ME = Byte.parseByte(s);
} else {
IAA44ME = Byte.MIN_VALUE;
}
}

protected final void initIAA44ML(String s) {
if (!s.trim().isEmpty()) {
IAA44ML = Short.parseShort(s);
} else {
IAA44ML = Short.MIN_VALUE;
}
}

protected final void initIAA44MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44MR = false;
} else {
IAA44MR = true;
}
}
}

protected final void initIAA44MU(String s) {
if (!s.trim().isEmpty()) {
IAA44MU = Short.parseShort(s);
} else {
IAA44MU = Short.MIN_VALUE;
}
}

protected final void initIAA44OE(String s) {
if (!s.trim().isEmpty()) {
IAA44OE = Byte.parseByte(s);
} else {
IAA44OE = Byte.MIN_VALUE;
}
}

protected final void initIAA44OL(String s) {
if (!s.trim().isEmpty()) {
IAA44OL = Short.parseShort(s);
} else {
IAA44OL = Short.MIN_VALUE;
}
}

protected final void initIAA44OR(String s) {
if (!s.trim().isEmpty()) {
IAA44OR = Byte.parseByte(s);
} else {
IAA44OR = Byte.MIN_VALUE;
}
}

protected final void initIAA44OU(String s) {
if (!s.trim().isEmpty()) {
IAA44OU = Short.parseShort(s);
} else {
IAA44OU = Short.MIN_VALUE;
}
}

protected final void initIAA44WE(String s) {
if (!s.trim().isEmpty()) {
IAA44WE = Byte.parseByte(s);
} else {
IAA44WE = Byte.MIN_VALUE;
}
}

protected final void initIAA44WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44WL = false;
} else {
IAA44WL = true;
}
}
}

protected final void initIAA44WR(String s) {
if (!s.trim().isEmpty()) {
IAA44WR = Byte.parseByte(s);
} else {
IAA44WR = Byte.MIN_VALUE;
}
}

protected final void initIAA44WU(String s) {
if (!s.trim().isEmpty()) {
IAA44WU = Byte.parseByte(s);
} else {
IAA44WU = Byte.MIN_VALUE;
}
}

protected final void initIAA44YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44YE = false;
} else {
IAA44YE = true;
}
}
}

protected final void initIAA44YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA44YL = false;
} else {
IAA44YL = true;
}
}
}

protected final void initIAA44YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44YR = false;
} else {
IAA44YR = true;
}
}
}

protected final void initIAA44YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA44YU = false;
} else {
IAA44YU = true;
}
}
}

protected final void initIAA45(String s) {
if (!s.trim().isEmpty()) {
IAA45 = Short.parseShort(s);
} else {
IAA45 = Short.MIN_VALUE;
}
}

protected final void initIAA45FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45FE = false;
} else {
IAA45FE = true;
}
}
}

protected final void initIAA45FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45FL = false;
} else {
IAA45FL = true;
}
}
}

protected final void initIAA45FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45FR = false;
} else {
IAA45FR = true;
}
}
}

protected final void initIAA45FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45FU = false;
} else {
IAA45FU = true;
}
}
}

protected final void initIAA45ME(String s) {
if (!s.trim().isEmpty()) {
IAA45ME = Byte.parseByte(s);
} else {
IAA45ME = Byte.MIN_VALUE;
}
}

protected final void initIAA45ML(String s) {
if (!s.trim().isEmpty()) {
IAA45ML = Short.parseShort(s);
} else {
IAA45ML = Short.MIN_VALUE;
}
}

protected final void initIAA45MR(String s) {
if (!s.trim().isEmpty()) {
IAA45MR = Byte.parseByte(s);
} else {
IAA45MR = Byte.MIN_VALUE;
}
}

protected final void initIAA45MU(String s) {
if (!s.trim().isEmpty()) {
IAA45MU = Short.parseShort(s);
} else {
IAA45MU = Short.MIN_VALUE;
}
}

protected final void initIAA45OE(String s) {
if (!s.trim().isEmpty()) {
IAA45OE = Byte.parseByte(s);
} else {
IAA45OE = Byte.MIN_VALUE;
}
}

protected final void initIAA45OL(String s) {
if (!s.trim().isEmpty()) {
IAA45OL = Short.parseShort(s);
} else {
IAA45OL = Short.MIN_VALUE;
}
}

protected final void initIAA45OR(String s) {
if (!s.trim().isEmpty()) {
IAA45OR = Byte.parseByte(s);
} else {
IAA45OR = Byte.MIN_VALUE;
}
}

protected final void initIAA45OU(String s) {
if (!s.trim().isEmpty()) {
IAA45OU = Short.parseShort(s);
} else {
IAA45OU = Short.MIN_VALUE;
}
}

protected final void initIAA45WE(String s) {
if (!s.trim().isEmpty()) {
IAA45WE = Byte.parseByte(s);
} else {
IAA45WE = Byte.MIN_VALUE;
}
}

protected final void initIAA45WL(String s) {
if (!s.trim().isEmpty()) {
IAA45WL = Byte.parseByte(s);
} else {
IAA45WL = Byte.MIN_VALUE;
}
}

protected final void initIAA45WR(String s) {
if (!s.trim().isEmpty()) {
IAA45WR = Byte.parseByte(s);
} else {
IAA45WR = Byte.MIN_VALUE;
}
}

protected final void initIAA45WU(String s) {
if (!s.trim().isEmpty()) {
IAA45WU = Short.parseShort(s);
} else {
IAA45WU = Short.MIN_VALUE;
}
}

protected final void initIAA45YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YE = false;
} else {
IAA45YE = true;
}
}
}

protected final void initIAA45YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YL = false;
} else {
IAA45YL = true;
}
}
}

protected final void initIAA45YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YR = false;
} else {
IAA45YR = true;
}
}
}

protected final void initIAA45YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YU = false;
} else {
IAA45YU = true;
}
}
}

protected final void initIAA46(String s) {
if (!s.trim().isEmpty()) {
IAA46 = Short.parseShort(s);
} else {
IAA46 = Short.MIN_VALUE;
}
}

protected final void initIAA46FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46FE = false;
} else {
IAA46FE = true;
}
}
}

protected final void initIAA46FL(String s) {
if (!s.trim().isEmpty()) {
IAA46FL = Short.parseShort(s);
} else {
IAA46FL = Short.MIN_VALUE;
}
}

protected final void initIAA46FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46FR = false;
} else {
IAA46FR = true;
}
}
}

protected final void initIAA46FU(String s) {
if (!s.trim().isEmpty()) {
IAA46FU = Short.parseShort(s);
} else {
IAA46FU = Short.MIN_VALUE;
}
}

protected final void initIAA46ME(String s) {
if (!s.trim().isEmpty()) {
IAA46ME = Byte.parseByte(s);
} else {
IAA46ME = Byte.MIN_VALUE;
}
}

protected final void initIAA46ML(String s) {
if (!s.trim().isEmpty()) {
IAA46ML = Short.parseShort(s);
} else {
IAA46ML = Short.MIN_VALUE;
}
}

protected final void initIAA46MR(String s) {
if (!s.trim().isEmpty()) {
IAA46MR = Byte.parseByte(s);
} else {
IAA46MR = Byte.MIN_VALUE;
}
}

protected final void initIAA46MU(String s) {
if (!s.trim().isEmpty()) {
IAA46MU = Short.parseShort(s);
} else {
IAA46MU = Short.MIN_VALUE;
}
}

protected final void initIAA46OE(String s) {
if (!s.trim().isEmpty()) {
IAA46OE = Byte.parseByte(s);
} else {
IAA46OE = Byte.MIN_VALUE;
}
}

protected final void initIAA46OL(String s) {
if (!s.trim().isEmpty()) {
IAA46OL = Short.parseShort(s);
} else {
IAA46OL = Short.MIN_VALUE;
}
}

protected final void initIAA46OR(String s) {
if (!s.trim().isEmpty()) {
IAA46OR = Byte.parseByte(s);
} else {
IAA46OR = Byte.MIN_VALUE;
}
}

protected final void initIAA46OU(String s) {
if (!s.trim().isEmpty()) {
IAA46OU = Short.parseShort(s);
} else {
IAA46OU = Short.MIN_VALUE;
}
}

protected final void initIAA46WE(String s) {
if (!s.trim().isEmpty()) {
IAA46WE = Byte.parseByte(s);
} else {
IAA46WE = Byte.MIN_VALUE;
}
}

protected final void initIAA46WL(String s) {
if (!s.trim().isEmpty()) {
IAA46WL = Byte.parseByte(s);
} else {
IAA46WL = Byte.MIN_VALUE;
}
}

protected final void initIAA46WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46WR = false;
} else {
IAA46WR = true;
}
}
}

protected final void initIAA46WU(String s) {
if (!s.trim().isEmpty()) {
IAA46WU = Byte.parseByte(s);
} else {
IAA46WU = Byte.MIN_VALUE;
}
}

protected final void initIAA46YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YE = false;
} else {
IAA46YE = true;
}
}
}

protected final void initIAA46YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YL = false;
} else {
IAA46YL = true;
}
}
}

protected final void initIAA46YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YR = false;
} else {
IAA46YR = true;
}
}
}

protected final void initIAA46YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YU = false;
} else {
IAA46YU = true;
}
}
}

protected final void initIAA47(String s) {
if (!s.trim().isEmpty()) {
IAA47 = Short.parseShort(s);
} else {
IAA47 = Short.MIN_VALUE;
}
}

protected final void initIAA47FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FE = false;
} else {
IAA47FE = true;
}
}
}

protected final void initIAA47FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FL = false;
} else {
IAA47FL = true;
}
}
}

protected final void initIAA47FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FR = false;
} else {
IAA47FR = true;
}
}
}

protected final void initIAA47FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FU = false;
} else {
IAA47FU = true;
}
}
}

protected final void initIAA47ME(String s) {
if (!s.trim().isEmpty()) {
IAA47ME = Byte.parseByte(s);
} else {
IAA47ME = Byte.MIN_VALUE;
}
}

protected final void initIAA47ML(String s) {
if (!s.trim().isEmpty()) {
IAA47ML = Short.parseShort(s);
} else {
IAA47ML = Short.MIN_VALUE;
}
}

protected final void initIAA47MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47MR = false;
} else {
IAA47MR = true;
}
}
}

protected final void initIAA47MU(String s) {
if (!s.trim().isEmpty()) {
IAA47MU = Short.parseShort(s);
} else {
IAA47MU = Short.MIN_VALUE;
}
}

protected final void initIAA47OE(String s) {
if (!s.trim().isEmpty()) {
IAA47OE = Byte.parseByte(s);
} else {
IAA47OE = Byte.MIN_VALUE;
}
}

protected final void initIAA47OL(String s) {
if (!s.trim().isEmpty()) {
IAA47OL = Short.parseShort(s);
} else {
IAA47OL = Short.MIN_VALUE;
}
}

protected final void initIAA47OR(String s) {
if (!s.trim().isEmpty()) {
IAA47OR = Byte.parseByte(s);
} else {
IAA47OR = Byte.MIN_VALUE;
}
}

protected final void initIAA47OU(String s) {
if (!s.trim().isEmpty()) {
IAA47OU = Short.parseShort(s);
} else {
IAA47OU = Short.MIN_VALUE;
}
}

protected final void initIAA47WE(String s) {
if (!s.trim().isEmpty()) {
IAA47WE = Byte.parseByte(s);
} else {
IAA47WE = Byte.MIN_VALUE;
}
}

protected final void initIAA47WL(String s) {
if (!s.trim().isEmpty()) {
IAA47WL = Byte.parseByte(s);
} else {
IAA47WL = Byte.MIN_VALUE;
}
}

protected final void initIAA47WR(String s) {
if (!s.trim().isEmpty()) {
IAA47WR = Byte.parseByte(s);
} else {
IAA47WR = Byte.MIN_VALUE;
}
}

protected final void initIAA47WU(String s) {
if (!s.trim().isEmpty()) {
IAA47WU = Byte.parseByte(s);
} else {
IAA47WU = Byte.MIN_VALUE;
}
}

protected final void initIAA47YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47YE = false;
} else {
IAA47YE = true;
}
}
}

protected final void initIAA47YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47YL = false;
} else {
IAA47YL = true;
}
}
}

protected final void initIAA47YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47YR = false;
} else {
IAA47YR = true;
}
}
}

protected final void initIAA47YU(String s) {
if (!s.trim().isEmpty()) {
IAA47YU = Short.parseShort(s);
} else {
IAA47YU = Short.MIN_VALUE;
}
}

protected final void initIAA48(String s) {
if (!s.trim().isEmpty()) {
IAA48 = Short.parseShort(s);
} else {
IAA48 = Short.MIN_VALUE;
}
}

protected final void initIAA48FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FE = false;
} else {
IAA48FE = true;
}
}
}

protected final void initIAA48FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FL = false;
} else {
IAA48FL = true;
}
}
}

protected final void initIAA48FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FR = false;
} else {
IAA48FR = true;
}
}
}

protected final void initIAA48FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FU = false;
} else {
IAA48FU = true;
}
}
}

protected final void initIAA48ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48ME = false;
} else {
IAA48ME = true;
}
}
}

protected final void initIAA48ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48ML = false;
} else {
IAA48ML = true;
}
}
}

protected final void initIAA48MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48MR = false;
} else {
IAA48MR = true;
}
}
}

protected final void initIAA48MU(String s) {
if (!s.trim().isEmpty()) {
IAA48MU = Short.parseShort(s);
} else {
IAA48MU = Short.MIN_VALUE;
}
}

protected final void initIAA48OE(String s) {
if (!s.trim().isEmpty()) {
IAA48OE = Byte.parseByte(s);
} else {
IAA48OE = Byte.MIN_VALUE;
}
}

protected final void initIAA48OL(String s) {
if (!s.trim().isEmpty()) {
IAA48OL = Short.parseShort(s);
} else {
IAA48OL = Short.MIN_VALUE;
}
}

protected final void initIAA48OR(String s) {
if (!s.trim().isEmpty()) {
IAA48OR = Byte.parseByte(s);
} else {
IAA48OR = Byte.MIN_VALUE;
}
}

protected final void initIAA48OU(String s) {
if (!s.trim().isEmpty()) {
IAA48OU = Short.parseShort(s);
} else {
IAA48OU = Short.MIN_VALUE;
}
}

protected final void initIAA48WE(String s) {
if (!s.trim().isEmpty()) {
IAA48WE = Byte.parseByte(s);
} else {
IAA48WE = Byte.MIN_VALUE;
}
}

protected final void initIAA48WL(String s) {
if (!s.trim().isEmpty()) {
IAA48WL = Byte.parseByte(s);
} else {
IAA48WL = Byte.MIN_VALUE;
}
}

protected final void initIAA48WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48WR = false;
} else {
IAA48WR = true;
}
}
}

protected final void initIAA48WU(String s) {
if (!s.trim().isEmpty()) {
IAA48WU = Short.parseShort(s);
} else {
IAA48WU = Short.MIN_VALUE;
}
}

protected final void initIAA48YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YE = false;
} else {
IAA48YE = true;
}
}
}

protected final void initIAA48YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YL = false;
} else {
IAA48YL = true;
}
}
}

protected final void initIAA48YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YR = false;
} else {
IAA48YR = true;
}
}
}

protected final void initIAA48YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YU = false;
} else {
IAA48YU = true;
}
}
}

protected final void initIAA49(String s) {
if (!s.trim().isEmpty()) {
IAA49 = Short.parseShort(s);
} else {
IAA49 = Short.MIN_VALUE;
}
}

protected final void initIAA49FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FE = false;
} else {
IAA49FE = true;
}
}
}

protected final void initIAA49FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FL = false;
} else {
IAA49FL = true;
}
}
}

protected final void initIAA49FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FR = false;
} else {
IAA49FR = true;
}
}
}

protected final void initIAA49FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FU = false;
} else {
IAA49FU = true;
}
}
}

protected final void initIAA49ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49ME = false;
} else {
IAA49ME = true;
}
}
}

protected final void initIAA49ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49ML = false;
} else {
IAA49ML = true;
}
}
}

protected final void initIAA49MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49MR = false;
} else {
IAA49MR = true;
}
}
}

protected final void initIAA49MU(String s) {
if (!s.trim().isEmpty()) {
IAA49MU = Short.parseShort(s);
} else {
IAA49MU = Short.MIN_VALUE;
}
}

protected final void initIAA49OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49OE = false;
} else {
IAA49OE = true;
}
}
}

protected final void initIAA49OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49OL = false;
} else {
IAA49OL = true;
}
}
}

protected final void initIAA49OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49OR = false;
} else {
IAA49OR = true;
}
}
}

protected final void initIAA49OU(String s) {
if (!s.trim().isEmpty()) {
IAA49OU = Short.parseShort(s);
} else {
IAA49OU = Short.MIN_VALUE;
}
}

protected final void initIAA49WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WE = false;
} else {
IAA49WE = true;
}
}
}

protected final void initIAA49WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WL = false;
} else {
IAA49WL = true;
}
}
}

protected final void initIAA49WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WR = false;
} else {
IAA49WR = true;
}
}
}

protected final void initIAA49WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WU = false;
} else {
IAA49WU = true;
}
}
}

protected final void initIAA49YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YE = false;
} else {
IAA49YE = true;
}
}
}

protected final void initIAA49YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YL = false;
} else {
IAA49YL = true;
}
}
}

protected final void initIAA49YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YR = false;
} else {
IAA49YR = true;
}
}
}

protected final void initIAA49YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YU = false;
} else {
IAA49YU = true;
}
}
}

protected final void initIAA50(String s) {
if (!s.trim().isEmpty()) {
IAA50 = Short.parseShort(s);
} else {
IAA50 = Short.MIN_VALUE;
}
}

protected final void initIAA50FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FE = false;
} else {
IAA50FE = true;
}
}
}

protected final void initIAA50FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FL = false;
} else {
IAA50FL = true;
}
}
}

protected final void initIAA50FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FR = false;
} else {
IAA50FR = true;
}
}
}

protected final void initIAA50FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FU = false;
} else {
IAA50FU = true;
}
}
}

protected final void initIAA50ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50ME = false;
} else {
IAA50ME = true;
}
}
}

protected final void initIAA50ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50ML = false;
} else {
IAA50ML = true;
}
}
}

protected final void initIAA50MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50MR = false;
} else {
IAA50MR = true;
}
}
}

protected final void initIAA50MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50MU = false;
} else {
IAA50MU = true;
}
}
}

protected final void initIAA50OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50OE = false;
} else {
IAA50OE = true;
}
}
}

protected final void initIAA50OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50OL = false;
} else {
IAA50OL = true;
}
}
}

protected final void initIAA50OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50OR = false;
} else {
IAA50OR = true;
}
}
}

protected final void initIAA50OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50OU = false;
} else {
IAA50OU = true;
}
}
}

protected final void initIAA50WE(String s) {
if (!s.trim().isEmpty()) {
IAA50WE = Byte.parseByte(s);
} else {
IAA50WE = Byte.MIN_VALUE;
}
}

protected final void initIAA50WL(String s) {
if (!s.trim().isEmpty()) {
IAA50WL = Byte.parseByte(s);
} else {
IAA50WL = Byte.MIN_VALUE;
}
}

protected final void initIAA50WR(String s) {
if (!s.trim().isEmpty()) {
IAA50WR = Byte.parseByte(s);
} else {
IAA50WR = Byte.MIN_VALUE;
}
}

protected final void initIAA50WU(String s) {
if (!s.trim().isEmpty()) {
IAA50WU = Byte.parseByte(s);
} else {
IAA50WU = Byte.MIN_VALUE;
}
}

protected final void initIAA50YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YE = false;
} else {
IAA50YE = true;
}
}
}

protected final void initIAA50YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YL = false;
} else {
IAA50YL = true;
}
}
}

protected final void initIAA50YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YR = false;
} else {
IAA50YR = true;
}
}
}

protected final void initIAA50YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YU = false;
} else {
IAA50YU = true;
}
}
}

protected final void initIAA51(String s) {
if (!s.trim().isEmpty()) {
IAA51 = Short.parseShort(s);
} else {
IAA51 = Short.MIN_VALUE;
}
}

protected final void initIAA51FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FE = false;
} else {
IAA51FE = true;
}
}
}

protected final void initIAA51FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FL = false;
} else {
IAA51FL = true;
}
}
}

protected final void initIAA51FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FR = false;
} else {
IAA51FR = true;
}
}
}

protected final void initIAA51FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FU = false;
} else {
IAA51FU = true;
}
}
}

protected final void initIAA51ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51ME = false;
} else {
IAA51ME = true;
}
}
}

protected final void initIAA51ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA51ML = false;
} else {
IAA51ML = true;
}
}
}

protected final void initIAA51MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51MR = false;
} else {
IAA51MR = true;
}
}
}

protected final void initIAA51MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA51MU = false;
} else {
IAA51MU = true;
}
}
}

protected final void initIAA51OE(String s) {
if (!s.trim().isEmpty()) {
IAA51OE = Byte.parseByte(s);
} else {
IAA51OE = Byte.MIN_VALUE;
}
}

protected final void initIAA51OL(String s) {
if (!s.trim().isEmpty()) {
IAA51OL = Short.parseShort(s);
} else {
IAA51OL = Short.MIN_VALUE;
}
}

protected final void initIAA51OR(String s) {
if (!s.trim().isEmpty()) {
IAA51OR = Byte.parseByte(s);
} else {
IAA51OR = Byte.MIN_VALUE;
}
}

protected final void initIAA51OU(String s) {
if (!s.trim().isEmpty()) {
IAA51OU = Short.parseShort(s);
} else {
IAA51OU = Short.MIN_VALUE;
}
}

protected final void initIAA51WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WE = false;
} else {
IAA51WE = true;
}
}
}

protected final void initIAA51WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WL = false;
} else {
IAA51WL = true;
}
}
}

protected final void initIAA51WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WR = false;
} else {
IAA51WR = true;
}
}
}

protected final void initIAA51WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WU = false;
} else {
IAA51WU = true;
}
}
}

protected final void initIAA51YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51YE = false;
} else {
IAA51YE = true;
}
}
}

protected final void initIAA51YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51YL = false;
} else {
IAA51YL = true;
}
}
}

protected final void initIAA51YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51YR = false;
} else {
IAA51YR = true;
}
}
}

protected final void initIAA51YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51YU = false;
} else {
IAA51YU = true;
}
}
}

protected final void initIAA52(String s) {
if (!s.trim().isEmpty()) {
IAA52 = Short.parseShort(s);
} else {
IAA52 = Short.MIN_VALUE;
}
}

protected final void initIAA52FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FE = false;
} else {
IAA52FE = true;
}
}
}

protected final void initIAA52FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FL = false;
} else {
IAA52FL = true;
}
}
}

protected final void initIAA52FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FR = false;
} else {
IAA52FR = true;
}
}
}

protected final void initIAA52FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FU = false;
} else {
IAA52FU = true;
}
}
}

protected final void initIAA52ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52ME = false;
} else {
IAA52ME = true;
}
}
}

protected final void initIAA52ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52ML = false;
} else {
IAA52ML = true;
}
}
}

protected final void initIAA52MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52MR = false;
} else {
IAA52MR = true;
}
}
}

protected final void initIAA52MU(String s) {
if (!s.trim().isEmpty()) {
IAA52MU = Short.parseShort(s);
} else {
IAA52MU = Short.MIN_VALUE;
}
}

protected final void initIAA52OE(String s) {
if (!s.trim().isEmpty()) {
IAA52OE = Byte.parseByte(s);
} else {
IAA52OE = Byte.MIN_VALUE;
}
}

protected final void initIAA52OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52OL = false;
} else {
IAA52OL = true;
}
}
}

protected final void initIAA52OR(String s) {
if (!s.trim().isEmpty()) {
IAA52OR = Byte.parseByte(s);
} else {
IAA52OR = Byte.MIN_VALUE;
}
}

protected final void initIAA52OU(String s) {
if (!s.trim().isEmpty()) {
IAA52OU = Short.parseShort(s);
} else {
IAA52OU = Short.MIN_VALUE;
}
}

protected final void initIAA52WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WE = false;
} else {
IAA52WE = true;
}
}
}

protected final void initIAA52WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WL = false;
} else {
IAA52WL = true;
}
}
}

protected final void initIAA52WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WR = false;
} else {
IAA52WR = true;
}
}
}

protected final void initIAA52WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WU = false;
} else {
IAA52WU = true;
}
}
}

protected final void initIAA52YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YE = false;
} else {
IAA52YE = true;
}
}
}

protected final void initIAA52YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YL = false;
} else {
IAA52YL = true;
}
}
}

protected final void initIAA52YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YR = false;
} else {
IAA52YR = true;
}
}
}

protected final void initIAA52YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YU = false;
} else {
IAA52YU = true;
}
}
}

protected final void initIAA53(String s) {
if (!s.trim().isEmpty()) {
IAA53 = Short.parseShort(s);
} else {
IAA53 = Short.MIN_VALUE;
}
}

protected final void initIAA53FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FE = false;
} else {
IAA53FE = true;
}
}
}

protected final void initIAA53FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FL = false;
} else {
IAA53FL = true;
}
}
}

protected final void initIAA53FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FR = false;
} else {
IAA53FR = true;
}
}
}

protected final void initIAA53FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FU = false;
} else {
IAA53FU = true;
}
}
}

protected final void initIAA53ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53ME = false;
} else {
IAA53ME = true;
}
}
}

protected final void initIAA53ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53ML = false;
} else {
IAA53ML = true;
}
}
}

protected final void initIAA53MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53MR = false;
} else {
IAA53MR = true;
}
}
}

protected final void initIAA53MU(String s) {
if (!s.trim().isEmpty()) {
IAA53MU = Short.parseShort(s);
} else {
IAA53MU = Short.MIN_VALUE;
}
}

protected final void initIAA53OE(String s) {
if (!s.trim().isEmpty()) {
IAA53OE = Byte.parseByte(s);
} else {
IAA53OE = Byte.MIN_VALUE;
}
}

protected final void initIAA53OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA53OL = false;
} else {
IAA53OL = true;
}
}
}

protected final void initIAA53OR(String s) {
if (!s.trim().isEmpty()) {
IAA53OR = Byte.parseByte(s);
} else {
IAA53OR = Byte.MIN_VALUE;
}
}

protected final void initIAA53OU(String s) {
if (!s.trim().isEmpty()) {
IAA53OU = Short.parseShort(s);
} else {
IAA53OU = Short.MIN_VALUE;
}
}

protected final void initIAA53WE(String s) {
if (!s.trim().isEmpty()) {
IAA53WE = Byte.parseByte(s);
} else {
IAA53WE = Byte.MIN_VALUE;
}
}

protected final void initIAA53WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53WL = false;
} else {
IAA53WL = true;
}
}
}

protected final void initIAA53WR(String s) {
if (!s.trim().isEmpty()) {
IAA53WR = Byte.parseByte(s);
} else {
IAA53WR = Byte.MIN_VALUE;
}
}

protected final void initIAA53WU(String s) {
if (!s.trim().isEmpty()) {
IAA53WU = Byte.parseByte(s);
} else {
IAA53WU = Byte.MIN_VALUE;
}
}

protected final void initIAA53YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YE = false;
} else {
IAA53YE = true;
}
}
}

protected final void initIAA53YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YL = false;
} else {
IAA53YL = true;
}
}
}

protected final void initIAA53YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YR = false;
} else {
IAA53YR = true;
}
}
}

protected final void initIAA53YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YU = false;
} else {
IAA53YU = true;
}
}
}

protected final void initIAA54(String s) {
if (!s.trim().isEmpty()) {
IAA54 = Short.parseShort(s);
} else {
IAA54 = Short.MIN_VALUE;
}
}

protected final void initIAA54FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FE = false;
} else {
IAA54FE = true;
}
}
}

protected final void initIAA54FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FL = false;
} else {
IAA54FL = true;
}
}
}

protected final void initIAA54FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FR = false;
} else {
IAA54FR = true;
}
}
}

protected final void initIAA54FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FU = false;
} else {
IAA54FU = true;
}
}
}

protected final void initIAA54ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54ME = false;
} else {
IAA54ME = true;
}
}
}

protected final void initIAA54ML(String s) {
if (!s.trim().isEmpty()) {
IAA54ML = Short.parseShort(s);
} else {
IAA54ML = Short.MIN_VALUE;
}
}

protected final void initIAA54MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54MR = false;
} else {
IAA54MR = true;
}
}
}

protected final void initIAA54MU(String s) {
if (!s.trim().isEmpty()) {
IAA54MU = Short.parseShort(s);
} else {
IAA54MU = Short.MIN_VALUE;
}
}

protected final void initIAA54OE(String s) {
if (!s.trim().isEmpty()) {
IAA54OE = Byte.parseByte(s);
} else {
IAA54OE = Byte.MIN_VALUE;
}
}

protected final void initIAA54OL(String s) {
if (!s.trim().isEmpty()) {
IAA54OL = Short.parseShort(s);
} else {
IAA54OL = Short.MIN_VALUE;
}
}

protected final void initIAA54OR(String s) {
if (!s.trim().isEmpty()) {
IAA54OR = Byte.parseByte(s);
} else {
IAA54OR = Byte.MIN_VALUE;
}
}

protected final void initIAA54OU(String s) {
if (!s.trim().isEmpty()) {
IAA54OU = Short.parseShort(s);
} else {
IAA54OU = Short.MIN_VALUE;
}
}

protected final void initIAA54WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WE = false;
} else {
IAA54WE = true;
}
}
}

protected final void initIAA54WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WL = false;
} else {
IAA54WL = true;
}
}
}

protected final void initIAA54WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WR = false;
} else {
IAA54WR = true;
}
}
}

protected final void initIAA54WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WU = false;
} else {
IAA54WU = true;
}
}
}

protected final void initIAA54YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54YE = false;
} else {
IAA54YE = true;
}
}
}

protected final void initIAA54YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54YL = false;
} else {
IAA54YL = true;
}
}
}

protected final void initIAA54YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54YR = false;
} else {
IAA54YR = true;
}
}
}

protected final void initIAA54YU(String s) {
if (!s.trim().isEmpty()) {
IAA54YU = Short.parseShort(s);
} else {
IAA54YU = Short.MIN_VALUE;
}
}

protected final void initIAA55(String s) {
if (!s.trim().isEmpty()) {
IAA55 = Short.parseShort(s);
} else {
IAA55 = Short.MIN_VALUE;
}
}

protected final void initIAA55FE(String s) {
if (!s.trim().isEmpty()) {
IAA55FE = Byte.parseByte(s);
} else {
IAA55FE = Byte.MIN_VALUE;
}
}

protected final void initIAA55FL(String s) {
if (!s.trim().isEmpty()) {
IAA55FL = Byte.parseByte(s);
} else {
IAA55FL = Byte.MIN_VALUE;
}
}

protected final void initIAA55FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55FR = false;
} else {
IAA55FR = true;
}
}
}

protected final void initIAA55FU(String s) {
if (!s.trim().isEmpty()) {
IAA55FU = Byte.parseByte(s);
} else {
IAA55FU = Byte.MIN_VALUE;
}
}

protected final void initIAA55ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55ME = false;
} else {
IAA55ME = true;
}
}
}

protected final void initIAA55ML(String s) {
if (!s.trim().isEmpty()) {
IAA55ML = Short.parseShort(s);
} else {
IAA55ML = Short.MIN_VALUE;
}
}

protected final void initIAA55MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55MR = false;
} else {
IAA55MR = true;
}
}
}

protected final void initIAA55MU(String s) {
if (!s.trim().isEmpty()) {
IAA55MU = Short.parseShort(s);
} else {
IAA55MU = Short.MIN_VALUE;
}
}

protected final void initIAA55OE(String s) {
if (!s.trim().isEmpty()) {
IAA55OE = Byte.parseByte(s);
} else {
IAA55OE = Byte.MIN_VALUE;
}
}

protected final void initIAA55OL(String s) {
if (!s.trim().isEmpty()) {
IAA55OL = Short.parseShort(s);
} else {
IAA55OL = Short.MIN_VALUE;
}
}

protected final void initIAA55OR(String s) {
if (!s.trim().isEmpty()) {
IAA55OR = Byte.parseByte(s);
} else {
IAA55OR = Byte.MIN_VALUE;
}
}

protected final void initIAA55OU(String s) {
if (!s.trim().isEmpty()) {
IAA55OU = Short.parseShort(s);
} else {
IAA55OU = Short.MIN_VALUE;
}
}

protected final void initIAA55WE(String s) {
if (!s.trim().isEmpty()) {
IAA55WE = Byte.parseByte(s);
} else {
IAA55WE = Byte.MIN_VALUE;
}
}

protected final void initIAA55WL(String s) {
if (!s.trim().isEmpty()) {
IAA55WL = Short.parseShort(s);
} else {
IAA55WL = Short.MIN_VALUE;
}
}

protected final void initIAA55WR(String s) {
if (!s.trim().isEmpty()) {
IAA55WR = Byte.parseByte(s);
} else {
IAA55WR = Byte.MIN_VALUE;
}
}

protected final void initIAA55WU(String s) {
if (!s.trim().isEmpty()) {
IAA55WU = Short.parseShort(s);
} else {
IAA55WU = Short.MIN_VALUE;
}
}

protected final void initIAA55YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YE = false;
} else {
IAA55YE = true;
}
}
}

protected final void initIAA55YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YL = false;
} else {
IAA55YL = true;
}
}
}

protected final void initIAA55YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YR = false;
} else {
IAA55YR = true;
}
}
}

protected final void initIAA55YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YU = false;
} else {
IAA55YU = true;
}
}
}

protected final void initIAA56(String s) {
if (!s.trim().isEmpty()) {
IAA56 = Short.parseShort(s);
} else {
IAA56 = Short.MIN_VALUE;
}
}

protected final void initIAA56FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FE = false;
} else {
IAA56FE = true;
}
}
}

protected final void initIAA56FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FL = false;
} else {
IAA56FL = true;
}
}
}

protected final void initIAA56FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FR = false;
} else {
IAA56FR = true;
}
}
}

protected final void initIAA56FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FU = false;
} else {
IAA56FU = true;
}
}
}

protected final void initIAA56ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56ME = false;
} else {
IAA56ME = true;
}
}
}

protected final void initIAA56ML(String s) {
if (!s.trim().isEmpty()) {
IAA56ML = Short.parseShort(s);
} else {
IAA56ML = Short.MIN_VALUE;
}
}

protected final void initIAA56MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56MR = false;
} else {
IAA56MR = true;
}
}
}

protected final void initIAA56MU(String s) {
if (!s.trim().isEmpty()) {
IAA56MU = Short.parseShort(s);
} else {
IAA56MU = Short.MIN_VALUE;
}
}

protected final void initIAA56OE(String s) {
if (!s.trim().isEmpty()) {
IAA56OE = Byte.parseByte(s);
} else {
IAA56OE = Byte.MIN_VALUE;
}
}

protected final void initIAA56OL(String s) {
if (!s.trim().isEmpty()) {
IAA56OL = Byte.parseByte(s);
} else {
IAA56OL = Byte.MIN_VALUE;
}
}

protected final void initIAA56OR(String s) {
if (!s.trim().isEmpty()) {
IAA56OR = Byte.parseByte(s);
} else {
IAA56OR = Byte.MIN_VALUE;
}
}

protected final void initIAA56OU(String s) {
if (!s.trim().isEmpty()) {
IAA56OU = Short.parseShort(s);
} else {
IAA56OU = Short.MIN_VALUE;
}
}

protected final void initIAA56WE(String s) {
if (!s.trim().isEmpty()) {
IAA56WE = Byte.parseByte(s);
} else {
IAA56WE = Byte.MIN_VALUE;
}
}

protected final void initIAA56WL(String s) {
if (!s.trim().isEmpty()) {
IAA56WL = Byte.parseByte(s);
} else {
IAA56WL = Byte.MIN_VALUE;
}
}

protected final void initIAA56WR(String s) {
if (!s.trim().isEmpty()) {
IAA56WR = Byte.parseByte(s);
} else {
IAA56WR = Byte.MIN_VALUE;
}
}

protected final void initIAA56WU(String s) {
if (!s.trim().isEmpty()) {
IAA56WU = Byte.parseByte(s);
} else {
IAA56WU = Byte.MIN_VALUE;
}
}

protected final void initIAA56YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YE = false;
} else {
IAA56YE = true;
}
}
}

protected final void initIAA56YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YL = false;
} else {
IAA56YL = true;
}
}
}

protected final void initIAA56YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YR = false;
} else {
IAA56YR = true;
}
}
}

protected final void initIAA56YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YU = false;
} else {
IAA56YU = true;
}
}
}

protected final void initIAA57(String s) {
if (!s.trim().isEmpty()) {
IAA57 = Short.parseShort(s);
} else {
IAA57 = Short.MIN_VALUE;
}
}

protected final void initIAA57FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FE = false;
} else {
IAA57FE = true;
}
}
}

protected final void initIAA57FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FL = false;
} else {
IAA57FL = true;
}
}
}

protected final void initIAA57FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FR = false;
} else {
IAA57FR = true;
}
}
}

protected final void initIAA57FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FU = false;
} else {
IAA57FU = true;
}
}
}

protected final void initIAA57ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57ME = false;
} else {
IAA57ME = true;
}
}
}

protected final void initIAA57ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57ML = false;
} else {
IAA57ML = true;
}
}
}

protected final void initIAA57MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57MR = false;
} else {
IAA57MR = true;
}
}
}

protected final void initIAA57MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57MU = false;
} else {
IAA57MU = true;
}
}
}

protected final void initIAA57OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57OE = false;
} else {
IAA57OE = true;
}
}
}

protected final void initIAA57OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57OL = false;
} else {
IAA57OL = true;
}
}
}

protected final void initIAA57OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57OR = false;
} else {
IAA57OR = true;
}
}
}

protected final void initIAA57OU(String s) {
if (!s.trim().isEmpty()) {
IAA57OU = Short.parseShort(s);
} else {
IAA57OU = Short.MIN_VALUE;
}
}

protected final void initIAA57WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WE = false;
} else {
IAA57WE = true;
}
}
}

protected final void initIAA57WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WL = false;
} else {
IAA57WL = true;
}
}
}

protected final void initIAA57WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WR = false;
} else {
IAA57WR = true;
}
}
}

protected final void initIAA57WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WU = false;
} else {
IAA57WU = true;
}
}
}

protected final void initIAA57YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YE = false;
} else {
IAA57YE = true;
}
}
}

protected final void initIAA57YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YL = false;
} else {
IAA57YL = true;
}
}
}

protected final void initIAA57YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YR = false;
} else {
IAA57YR = true;
}
}
}

protected final void initIAA57YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YU = false;
} else {
IAA57YU = true;
}
}
}

protected final void initIAA58(String s) {
if (!s.trim().isEmpty()) {
IAA58 = Short.parseShort(s);
} else {
IAA58 = Short.MIN_VALUE;
}
}

protected final void initIAA58FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FE = false;
} else {
IAA58FE = true;
}
}
}

protected final void initIAA58FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FL = false;
} else {
IAA58FL = true;
}
}
}

protected final void initIAA58FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FR = false;
} else {
IAA58FR = true;
}
}
}

protected final void initIAA58FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FU = false;
} else {
IAA58FU = true;
}
}
}

protected final void initIAA58ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58ME = false;
} else {
IAA58ME = true;
}
}
}

protected final void initIAA58ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58ML = false;
} else {
IAA58ML = true;
}
}
}

protected final void initIAA58MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58MR = false;
} else {
IAA58MR = true;
}
}
}

protected final void initIAA58MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58MU = false;
} else {
IAA58MU = true;
}
}
}

protected final void initIAA58OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OE = false;
} else {
IAA58OE = true;
}
}
}

protected final void initIAA58OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OL = false;
} else {
IAA58OL = true;
}
}
}

protected final void initIAA58OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OR = false;
} else {
IAA58OR = true;
}
}
}

protected final void initIAA58OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OU = false;
} else {
IAA58OU = true;
}
}
}

protected final void initIAA58WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WE = false;
} else {
IAA58WE = true;
}
}
}

protected final void initIAA58WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WL = false;
} else {
IAA58WL = true;
}
}
}

protected final void initIAA58WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WR = false;
} else {
IAA58WR = true;
}
}
}

protected final void initIAA58WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WU = false;
} else {
IAA58WU = true;
}
}
}

protected final void initIAA58YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YE = false;
} else {
IAA58YE = true;
}
}
}

protected final void initIAA58YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YL = false;
} else {
IAA58YL = true;
}
}
}

protected final void initIAA58YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YR = false;
} else {
IAA58YR = true;
}
}
}

protected final void initIAA58YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YU = false;
} else {
IAA58YU = true;
}
}
}

protected final void initIAA59(String s) {
if (!s.trim().isEmpty()) {
IAA59 = Short.parseShort(s);
} else {
IAA59 = Short.MIN_VALUE;
}
}

protected final void initIAA59FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FE = false;
} else {
IAA59FE = true;
}
}
}

protected final void initIAA59FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FL = false;
} else {
IAA59FL = true;
}
}
}

protected final void initIAA59FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FR = false;
} else {
IAA59FR = true;
}
}
}

protected final void initIAA59FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FU = false;
} else {
IAA59FU = true;
}
}
}

protected final void initIAA59ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59ME = false;
} else {
IAA59ME = true;
}
}
}

protected final void initIAA59ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59ML = false;
} else {
IAA59ML = true;
}
}
}

protected final void initIAA59MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59MR = false;
} else {
IAA59MR = true;
}
}
}

protected final void initIAA59MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59MU = false;
} else {
IAA59MU = true;
}
}
}

protected final void initIAA59OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OE = false;
} else {
IAA59OE = true;
}
}
}

protected final void initIAA59OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OL = false;
} else {
IAA59OL = true;
}
}
}

protected final void initIAA59OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OR = false;
} else {
IAA59OR = true;
}
}
}

protected final void initIAA59OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OU = false;
} else {
IAA59OU = true;
}
}
}

protected final void initIAA59WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WE = false;
} else {
IAA59WE = true;
}
}
}

protected final void initIAA59WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WL = false;
} else {
IAA59WL = true;
}
}
}

protected final void initIAA59WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WR = false;
} else {
IAA59WR = true;
}
}
}

protected final void initIAA59WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WU = false;
} else {
IAA59WU = true;
}
}
}

protected final void initIAA59YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YE = false;
} else {
IAA59YE = true;
}
}
}

protected final void initIAA59YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YL = false;
} else {
IAA59YL = true;
}
}
}

protected final void initIAA59YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YR = false;
} else {
IAA59YR = true;
}
}
}

protected final void initIAA59YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YU = false;
} else {
IAA59YU = true;
}
}
}

protected final void initIAA60(String s) {
if (!s.trim().isEmpty()) {
IAA60 = Short.parseShort(s);
} else {
IAA60 = Short.MIN_VALUE;
}
}

protected final void initIAA60FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FE = false;
} else {
IAA60FE = true;
}
}
}

protected final void initIAA60FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FL = false;
} else {
IAA60FL = true;
}
}
}

protected final void initIAA60FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FR = false;
} else {
IAA60FR = true;
}
}
}

protected final void initIAA60FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FU = false;
} else {
IAA60FU = true;
}
}
}

protected final void initIAA60ME(String s) {
if (!s.trim().isEmpty()) {
IAA60ME = Byte.parseByte(s);
} else {
IAA60ME = Byte.MIN_VALUE;
}
}

protected final void initIAA60ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60ML = false;
} else {
IAA60ML = true;
}
}
}

protected final void initIAA60MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60MR = false;
} else {
IAA60MR = true;
}
}
}

protected final void initIAA60MU(String s) {
if (!s.trim().isEmpty()) {
IAA60MU = Short.parseShort(s);
} else {
IAA60MU = Short.MIN_VALUE;
}
}

protected final void initIAA60OE(String s) {
if (!s.trim().isEmpty()) {
IAA60OE = Byte.parseByte(s);
} else {
IAA60OE = Byte.MIN_VALUE;
}
}

protected final void initIAA60OL(String s) {
if (!s.trim().isEmpty()) {
IAA60OL = Short.parseShort(s);
} else {
IAA60OL = Short.MIN_VALUE;
}
}

protected final void initIAA60OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60OR = false;
} else {
IAA60OR = true;
}
}
}

protected final void initIAA60OU(String s) {
if (!s.trim().isEmpty()) {
IAA60OU = Short.parseShort(s);
} else {
IAA60OU = Short.MIN_VALUE;
}
}

protected final void initIAA60WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WE = false;
} else {
IAA60WE = true;
}
}
}

protected final void initIAA60WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WL = false;
} else {
IAA60WL = true;
}
}
}

protected final void initIAA60WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WR = false;
} else {
IAA60WR = true;
}
}
}

protected final void initIAA60WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WU = false;
} else {
IAA60WU = true;
}
}
}

protected final void initIAA60YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YE = false;
} else {
IAA60YE = true;
}
}
}

protected final void initIAA60YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YL = false;
} else {
IAA60YL = true;
}
}
}

protected final void initIAA60YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YR = false;
} else {
IAA60YR = true;
}
}
}

protected final void initIAA60YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YU = false;
} else {
IAA60YU = true;
}
}
}

protected final void initIAA61(String s) {
if (!s.trim().isEmpty()) {
IAA61 = Short.parseShort(s);
} else {
IAA61 = Short.MIN_VALUE;
}
}

protected final void initIAA61FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FE = false;
} else {
IAA61FE = true;
}
}
}

protected final void initIAA61FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FL = false;
} else {
IAA61FL = true;
}
}
}

protected final void initIAA61FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FR = false;
} else {
IAA61FR = true;
}
}
}

protected final void initIAA61FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FU = false;
} else {
IAA61FU = true;
}
}
}

protected final void initIAA61ME(String s) {
if (!s.trim().isEmpty()) {
IAA61ME = Byte.parseByte(s);
} else {
IAA61ME = Byte.MIN_VALUE;
}
}

protected final void initIAA61ML(String s) {
if (!s.trim().isEmpty()) {
IAA61ML = Short.parseShort(s);
} else {
IAA61ML = Short.MIN_VALUE;
}
}

protected final void initIAA61MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61MR = false;
} else {
IAA61MR = true;
}
}
}

protected final void initIAA61MU(String s) {
if (!s.trim().isEmpty()) {
IAA61MU = Short.parseShort(s);
} else {
IAA61MU = Short.MIN_VALUE;
}
}

protected final void initIAA61OE(String s) {
if (!s.trim().isEmpty()) {
IAA61OE = Byte.parseByte(s);
} else {
IAA61OE = Byte.MIN_VALUE;
}
}

protected final void initIAA61OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61OL = false;
} else {
IAA61OL = true;
}
}
}

protected final void initIAA61OR(String s) {
if (!s.trim().isEmpty()) {
IAA61OR = Byte.parseByte(s);
} else {
IAA61OR = Byte.MIN_VALUE;
}
}

protected final void initIAA61OU(String s) {
if (!s.trim().isEmpty()) {
IAA61OU = Short.parseShort(s);
} else {
IAA61OU = Short.MIN_VALUE;
}
}

protected final void initIAA61WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WE = false;
} else {
IAA61WE = true;
}
}
}

protected final void initIAA61WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA61WL = false;
} else {
IAA61WL = true;
}
}
}

protected final void initIAA61WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WR = false;
} else {
IAA61WR = true;
}
}
}

protected final void initIAA61WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WU = false;
} else {
IAA61WU = true;
}
}
}

protected final void initIAA61YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YE = false;
} else {
IAA61YE = true;
}
}
}

protected final void initIAA61YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YL = false;
} else {
IAA61YL = true;
}
}
}

protected final void initIAA61YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YR = false;
} else {
IAA61YR = true;
}
}
}

protected final void initIAA61YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YU = false;
} else {
IAA61YU = true;
}
}
}

protected final void initIAA62(String s) {
if (!s.trim().isEmpty()) {
IAA62 = Short.parseShort(s);
} else {
IAA62 = Short.MIN_VALUE;
}
}

protected final void initIAA62FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FE = false;
} else {
IAA62FE = true;
}
}
}

protected final void initIAA62FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FL = false;
} else {
IAA62FL = true;
}
}
}

protected final void initIAA62FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FR = false;
} else {
IAA62FR = true;
}
}
}

protected final void initIAA62FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FU = false;
} else {
IAA62FU = true;
}
}
}

protected final void initIAA62ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62ME = false;
} else {
IAA62ME = true;
}
}
}

protected final void initIAA62ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62ML = false;
} else {
IAA62ML = true;
}
}
}

protected final void initIAA62MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62MR = false;
} else {
IAA62MR = true;
}
}
}

protected final void initIAA62MU(String s) {
if (!s.trim().isEmpty()) {
IAA62MU = Short.parseShort(s);
} else {
IAA62MU = Short.MIN_VALUE;
}
}

protected final void initIAA62OE(String s) {
if (!s.trim().isEmpty()) {
IAA62OE = Byte.parseByte(s);
} else {
IAA62OE = Byte.MIN_VALUE;
}
}

protected final void initIAA62OL(String s) {
if (!s.trim().isEmpty()) {
IAA62OL = Short.parseShort(s);
} else {
IAA62OL = Short.MIN_VALUE;
}
}

protected final void initIAA62OR(String s) {
if (!s.trim().isEmpty()) {
IAA62OR = Byte.parseByte(s);
} else {
IAA62OR = Byte.MIN_VALUE;
}
}

protected final void initIAA62OU(String s) {
if (!s.trim().isEmpty()) {
IAA62OU = Short.parseShort(s);
} else {
IAA62OU = Short.MIN_VALUE;
}
}

protected final void initIAA62WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WE = false;
} else {
IAA62WE = true;
}
}
}

protected final void initIAA62WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WL = false;
} else {
IAA62WL = true;
}
}
}

protected final void initIAA62WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WR = false;
} else {
IAA62WR = true;
}
}
}

protected final void initIAA62WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WU = false;
} else {
IAA62WU = true;
}
}
}

protected final void initIAA62YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YE = false;
} else {
IAA62YE = true;
}
}
}

protected final void initIAA62YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YL = false;
} else {
IAA62YL = true;
}
}
}

protected final void initIAA62YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YR = false;
} else {
IAA62YR = true;
}
}
}

protected final void initIAA62YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YU = false;
} else {
IAA62YU = true;
}
}
}

protected final void initIAA63(String s) {
if (!s.trim().isEmpty()) {
IAA63 = Short.parseShort(s);
} else {
IAA63 = Short.MIN_VALUE;
}
}

protected final void initIAA63FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FE = false;
} else {
IAA63FE = true;
}
}
}

protected final void initIAA63FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FL = false;
} else {
IAA63FL = true;
}
}
}

protected final void initIAA63FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FR = false;
} else {
IAA63FR = true;
}
}
}

protected final void initIAA63FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FU = false;
} else {
IAA63FU = true;
}
}
}

protected final void initIAA63ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63ME = false;
} else {
IAA63ME = true;
}
}
}

protected final void initIAA63ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63ML = false;
} else {
IAA63ML = true;
}
}
}

protected final void initIAA63MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63MR = false;
} else {
IAA63MR = true;
}
}
}

protected final void initIAA63MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63MU = false;
} else {
IAA63MU = true;
}
}
}

protected final void initIAA63OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OE = false;
} else {
IAA63OE = true;
}
}
}

protected final void initIAA63OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OL = false;
} else {
IAA63OL = true;
}
}
}

protected final void initIAA63OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OR = false;
} else {
IAA63OR = true;
}
}
}

protected final void initIAA63OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OU = false;
} else {
IAA63OU = true;
}
}
}

protected final void initIAA63WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WE = false;
} else {
IAA63WE = true;
}
}
}

protected final void initIAA63WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WL = false;
} else {
IAA63WL = true;
}
}
}

protected final void initIAA63WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WR = false;
} else {
IAA63WR = true;
}
}
}

protected final void initIAA63WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WU = false;
} else {
IAA63WU = true;
}
}
}

protected final void initIAA63YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YE = false;
} else {
IAA63YE = true;
}
}
}

protected final void initIAA63YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YL = false;
} else {
IAA63YL = true;
}
}
}

protected final void initIAA63YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YR = false;
} else {
IAA63YR = true;
}
}
}

protected final void initIAA63YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YU = false;
} else {
IAA63YU = true;
}
}
}

protected final void initIAA64(String s) {
if (!s.trim().isEmpty()) {
IAA64 = Short.parseShort(s);
} else {
IAA64 = Short.MIN_VALUE;
}
}

protected final void initIAA64FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FE = false;
} else {
IAA64FE = true;
}
}
}

protected final void initIAA64FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FL = false;
} else {
IAA64FL = true;
}
}
}

protected final void initIAA64FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FR = false;
} else {
IAA64FR = true;
}
}
}

protected final void initIAA64FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FU = false;
} else {
IAA64FU = true;
}
}
}

protected final void initIAA64ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64ME = false;
} else {
IAA64ME = true;
}
}
}

protected final void initIAA64ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64ML = false;
} else {
IAA64ML = true;
}
}
}

protected final void initIAA64MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64MR = false;
} else {
IAA64MR = true;
}
}
}

protected final void initIAA64MU(String s) {
if (!s.trim().isEmpty()) {
IAA64MU = Short.parseShort(s);
} else {
IAA64MU = Short.MIN_VALUE;
}
}

protected final void initIAA64OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64OE = false;
} else {
IAA64OE = true;
}
}
}

protected final void initIAA64OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA64OL = false;
} else {
IAA64OL = true;
}
}
}

protected final void initIAA64OR(String s) {
if (!s.trim().isEmpty()) {
IAA64OR = Byte.parseByte(s);
} else {
IAA64OR = Byte.MIN_VALUE;
}
}

protected final void initIAA64OU(String s) {
if (!s.trim().isEmpty()) {
IAA64OU = Short.parseShort(s);
} else {
IAA64OU = Short.MIN_VALUE;
}
}

protected final void initIAA64WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64WE = false;
} else {
IAA64WE = true;
}
}
}

protected final void initIAA64WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA64WL = false;
} else {
IAA64WL = true;
}
}
}

protected final void initIAA64WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64WR = false;
} else {
IAA64WR = true;
}
}
}

protected final void initIAA64WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA64WU = false;
} else {
IAA64WU = true;
}
}
}

protected final void initIAA64YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YE = false;
} else {
IAA64YE = true;
}
}
}

protected final void initIAA64YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YL = false;
} else {
IAA64YL = true;
}
}
}

protected final void initIAA64YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YR = false;
} else {
IAA64YR = true;
}
}
}

protected final void initIAA64YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YU = false;
} else {
IAA64YU = true;
}
}
}

protected final void initIAA65(String s) {
if (!s.trim().isEmpty()) {
IAA65 = Short.parseShort(s);
} else {
IAA65 = Short.MIN_VALUE;
}
}

protected final void initIAA65FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FE = false;
} else {
IAA65FE = true;
}
}
}

protected final void initIAA65FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FL = false;
} else {
IAA65FL = true;
}
}
}

protected final void initIAA65FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FR = false;
} else {
IAA65FR = true;
}
}
}

protected final void initIAA65FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FU = false;
} else {
IAA65FU = true;
}
}
}

protected final void initIAA65ME(String s) {
if (!s.trim().isEmpty()) {
IAA65ME = Byte.parseByte(s);
} else {
IAA65ME = Byte.MIN_VALUE;
}
}

protected final void initIAA65ML(String s) {
if (!s.trim().isEmpty()) {
IAA65ML = Short.parseShort(s);
} else {
IAA65ML = Short.MIN_VALUE;
}
}

protected final void initIAA65MR(String s) {
if (!s.trim().isEmpty()) {
IAA65MR = Byte.parseByte(s);
} else {
IAA65MR = Byte.MIN_VALUE;
}
}

protected final void initIAA65MU(String s) {
if (!s.trim().isEmpty()) {
IAA65MU = Short.parseShort(s);
} else {
IAA65MU = Short.MIN_VALUE;
}
}

protected final void initIAA65OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65OE = false;
} else {
IAA65OE = true;
}
}
}

protected final void initIAA65OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA65OL = false;
} else {
IAA65OL = true;
}
}
}

protected final void initIAA65OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65OR = false;
} else {
IAA65OR = true;
}
}
}

protected final void initIAA65OU(String s) {
if (!s.trim().isEmpty()) {
IAA65OU = Short.parseShort(s);
} else {
IAA65OU = Short.MIN_VALUE;
}
}

protected final void initIAA65WE(String s) {
if (!s.trim().isEmpty()) {
IAA65WE = Byte.parseByte(s);
} else {
IAA65WE = Byte.MIN_VALUE;
}
}

protected final void initIAA65WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA65WL = false;
} else {
IAA65WL = true;
}
}
}

protected final void initIAA65WR(String s) {
if (!s.trim().isEmpty()) {
IAA65WR = Byte.parseByte(s);
} else {
IAA65WR = Byte.MIN_VALUE;
}
}

protected final void initIAA65WU(String s) {
if (!s.trim().isEmpty()) {
IAA65WU = Byte.parseByte(s);
} else {
IAA65WU = Byte.MIN_VALUE;
}
}

protected final void initIAA65YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YE = false;
} else {
IAA65YE = true;
}
}
}

protected final void initIAA65YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YL = false;
} else {
IAA65YL = true;
}
}
}

protected final void initIAA65YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YR = false;
} else {
IAA65YR = true;
}
}
}

protected final void initIAA65YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YU = false;
} else {
IAA65YU = true;
}
}
}

protected final void initIAA66(String s) {
if (!s.trim().isEmpty()) {
IAA66 = Short.parseShort(s);
} else {
IAA66 = Short.MIN_VALUE;
}
}

protected final void initIAA66FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FE = false;
} else {
IAA66FE = true;
}
}
}

protected final void initIAA66FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FL = false;
} else {
IAA66FL = true;
}
}
}

protected final void initIAA66FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FR = false;
} else {
IAA66FR = true;
}
}
}

protected final void initIAA66FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FU = false;
} else {
IAA66FU = true;
}
}
}

protected final void initIAA66ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66ME = false;
} else {
IAA66ME = true;
}
}
}

protected final void initIAA66ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66ML = false;
} else {
IAA66ML = true;
}
}
}

protected final void initIAA66MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66MR = false;
} else {
IAA66MR = true;
}
}
}

protected final void initIAA66MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66MU = false;
} else {
IAA66MU = true;
}
}
}

protected final void initIAA66OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66OE = false;
} else {
IAA66OE = true;
}
}
}

protected final void initIAA66OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66OL = false;
} else {
IAA66OL = true;
}
}
}

protected final void initIAA66OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66OR = false;
} else {
IAA66OR = true;
}
}
}

protected final void initIAA66OU(String s) {
if (!s.trim().isEmpty()) {
IAA66OU = Short.parseShort(s);
} else {
IAA66OU = Short.MIN_VALUE;
}
}

protected final void initIAA66WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WE = false;
} else {
IAA66WE = true;
}
}
}

protected final void initIAA66WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WL = false;
} else {
IAA66WL = true;
}
}
}

protected final void initIAA66WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WR = false;
} else {
IAA66WR = true;
}
}
}

protected final void initIAA66WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WU = false;
} else {
IAA66WU = true;
}
}
}

protected final void initIAA66YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YE = false;
} else {
IAA66YE = true;
}
}
}

protected final void initIAA66YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YL = false;
} else {
IAA66YL = true;
}
}
}

protected final void initIAA66YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YR = false;
} else {
IAA66YR = true;
}
}
}

protected final void initIAA66YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YU = false;
} else {
IAA66YU = true;
}
}
}

protected final void initIAA67(String s) {
if (!s.trim().isEmpty()) {
IAA67 = Byte.parseByte(s);
} else {
IAA67 = Byte.MIN_VALUE;
}
}

protected final void initIAA67FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67FE = false;
} else {
IAA67FE = true;
}
}
}

protected final void initIAA67FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67FL = false;
} else {
IAA67FL = true;
}
}
}

protected final void initIAA67FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67FR = false;
} else {
IAA67FR = true;
}
}
}

protected final void initIAA67FU(String s) {
if (!s.trim().isEmpty()) {
IAA67FU = Short.parseShort(s);
} else {
IAA67FU = Short.MIN_VALUE;
}
}

protected final void initIAA67ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67ME = false;
} else {
IAA67ME = true;
}
}
}

protected final void initIAA67ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67ML = false;
} else {
IAA67ML = true;
}
}
}

protected final void initIAA67MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67MR = false;
} else {
IAA67MR = true;
}
}
}

protected final void initIAA67MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67MU = false;
} else {
IAA67MU = true;
}
}
}

protected final void initIAA67OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67OE = false;
} else {
IAA67OE = true;
}
}
}

protected final void initIAA67OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67OL = false;
} else {
IAA67OL = true;
}
}
}

protected final void initIAA67OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67OR = false;
} else {
IAA67OR = true;
}
}
}

protected final void initIAA67OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67OU = false;
} else {
IAA67OU = true;
}
}
}

protected final void initIAA67WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67WE = false;
} else {
IAA67WE = true;
}
}
}

protected final void initIAA67WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA67WL = false;
} else {
IAA67WL = true;
}
}
}

protected final void initIAA67WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67WR = false;
} else {
IAA67WR = true;
}
}
}

protected final void initIAA67WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA67WU = false;
} else {
IAA67WU = true;
}
}
}

protected final void initIAA67YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YE = false;
} else {
IAA67YE = true;
}
}
}

protected final void initIAA67YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YL = false;
} else {
IAA67YL = true;
}
}
}

protected final void initIAA67YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YR = false;
} else {
IAA67YR = true;
}
}
}

protected final void initIAA67YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YU = false;
} else {
IAA67YU = true;
}
}
}

protected final void initIAA68(String s) {
if (!s.trim().isEmpty()) {
IAA68 = Short.parseShort(s);
} else {
IAA68 = Short.MIN_VALUE;
}
}

protected final void initIAA68FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FE = false;
} else {
IAA68FE = true;
}
}
}

protected final void initIAA68FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FL = false;
} else {
IAA68FL = true;
}
}
}

protected final void initIAA68FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FR = false;
} else {
IAA68FR = true;
}
}
}

protected final void initIAA68FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FU = false;
} else {
IAA68FU = true;
}
}
}

protected final void initIAA68ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68ME = false;
} else {
IAA68ME = true;
}
}
}

protected final void initIAA68ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68ML = false;
} else {
IAA68ML = true;
}
}
}

protected final void initIAA68MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68MR = false;
} else {
IAA68MR = true;
}
}
}

protected final void initIAA68MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68MU = false;
} else {
IAA68MU = true;
}
}
}

protected final void initIAA68OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OE = false;
} else {
IAA68OE = true;
}
}
}

protected final void initIAA68OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OL = false;
} else {
IAA68OL = true;
}
}
}

protected final void initIAA68OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OR = false;
} else {
IAA68OR = true;
}
}
}

protected final void initIAA68OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OU = false;
} else {
IAA68OU = true;
}
}
}

protected final void initIAA68WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WE = false;
} else {
IAA68WE = true;
}
}
}

protected final void initIAA68WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WL = false;
} else {
IAA68WL = true;
}
}
}

protected final void initIAA68WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WR = false;
} else {
IAA68WR = true;
}
}
}

protected final void initIAA68WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WU = false;
} else {
IAA68WU = true;
}
}
}

protected final void initIAA68YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YE = false;
} else {
IAA68YE = true;
}
}
}

protected final void initIAA68YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YL = false;
} else {
IAA68YL = true;
}
}
}

protected final void initIAA68YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YR = false;
} else {
IAA68YR = true;
}
}
}

protected final void initIAA68YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YU = false;
} else {
IAA68YU = true;
}
}
}

protected final void initIAA69(String s) {
if (!s.trim().isEmpty()) {
IAA69 = Short.parseShort(s);
} else {
IAA69 = Short.MIN_VALUE;
}
}

protected final void initIAA69FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69FE = false;
} else {
IAA69FE = true;
}
}
}

protected final void initIAA69FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69FL = false;
} else {
IAA69FL = true;
}
}
}

protected final void initIAA69FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69FR = false;
} else {
IAA69FR = true;
}
}
}

protected final void initIAA69FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69FU = false;
} else {
IAA69FU = true;
}
}
}

protected final void initIAA69ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69ME = false;
} else {
IAA69ME = true;
}
}
}

protected final void initIAA69ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69ML = false;
} else {
IAA69ML = true;
}
}
}

protected final void initIAA69MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69MR = false;
} else {
IAA69MR = true;
}
}
}

protected final void initIAA69MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69MU = false;
} else {
IAA69MU = true;
}
}
}

protected final void initIAA69OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69OE = false;
} else {
IAA69OE = true;
}
}
}

protected final void initIAA69OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69OL = false;
} else {
IAA69OL = true;
}
}
}

protected final void initIAA69OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69OR = false;
} else {
IAA69OR = true;
}
}
}

protected final void initIAA69OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69OU = false;
} else {
IAA69OU = true;
}
}
}

protected final void initIAA69WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69WE = false;
} else {
IAA69WE = true;
}
}
}

protected final void initIAA69WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69WL = false;
} else {
IAA69WL = true;
}
}
}

protected final void initIAA69WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69WR = false;
} else {
IAA69WR = true;
}
}
}

protected final void initIAA69WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69WU = false;
} else {
IAA69WU = true;
}
}
}

protected final void initIAA69YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69YE = false;
} else {
IAA69YE = true;
}
}
}

protected final void initIAA69YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69YL = false;
} else {
IAA69YL = true;
}
}
}

protected final void initIAA69YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69YR = false;
} else {
IAA69YR = true;
}
}
}

protected final void initIAA69YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69YU = false;
} else {
IAA69YU = true;
}
}
}

protected final void initIAA70(String s) {
if (!s.trim().isEmpty()) {
IAA70 = Short.parseShort(s);
} else {
IAA70 = Short.MIN_VALUE;
}
}

protected final void initIAA70FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70FE = false;
} else {
IAA70FE = true;
}
}
}

protected final void initIAA70FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70FL = false;
} else {
IAA70FL = true;
}
}
}

protected final void initIAA70FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70FR = false;
} else {
IAA70FR = true;
}
}
}

protected final void initIAA70FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70FU = false;
} else {
IAA70FU = true;
}
}
}

protected final void initIAA70ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70ME = false;
} else {
IAA70ME = true;
}
}
}

protected final void initIAA70ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70ML = false;
} else {
IAA70ML = true;
}
}
}

protected final void initIAA70MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70MR = false;
} else {
IAA70MR = true;
}
}
}

protected final void initIAA70MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70MU = false;
} else {
IAA70MU = true;
}
}
}

protected final void initIAA70OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70OE = false;
} else {
IAA70OE = true;
}
}
}

protected final void initIAA70OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70OL = false;
} else {
IAA70OL = true;
}
}
}

protected final void initIAA70OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70OR = false;
} else {
IAA70OR = true;
}
}
}

protected final void initIAA70OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70OU = false;
} else {
IAA70OU = true;
}
}
}

protected final void initIAA70WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70WE = false;
} else {
IAA70WE = true;
}
}
}

protected final void initIAA70WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70WL = false;
} else {
IAA70WL = true;
}
}
}

protected final void initIAA70WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70WR = false;
} else {
IAA70WR = true;
}
}
}

protected final void initIAA70WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70WU = false;
} else {
IAA70WU = true;
}
}
}

protected final void initIAA70YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70YE = false;
} else {
IAA70YE = true;
}
}
}

protected final void initIAA70YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70YL = false;
} else {
IAA70YL = true;
}
}
}

protected final void initIAA70YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70YR = false;
} else {
IAA70YR = true;
}
}
}

protected final void initIAA70YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70YU = false;
} else {
IAA70YU = true;
}
}
}

protected final void initIAA71(String s) {
if (!s.trim().isEmpty()) {
IAA71 = Short.parseShort(s);
} else {
IAA71 = Short.MIN_VALUE;
}
}

protected final void initIAA71FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71FE = false;
} else {
IAA71FE = true;
}
}
}

protected final void initIAA71FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71FL = false;
} else {
IAA71FL = true;
}
}
}

protected final void initIAA71FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71FR = false;
} else {
IAA71FR = true;
}
}
}

protected final void initIAA71FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71FU = false;
} else {
IAA71FU = true;
}
}
}

protected final void initIAA71ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71ME = false;
} else {
IAA71ME = true;
}
}
}

protected final void initIAA71ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71ML = false;
} else {
IAA71ML = true;
}
}
}

protected final void initIAA71MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71MR = false;
} else {
IAA71MR = true;
}
}
}

protected final void initIAA71MU(String s) {
if (!s.trim().isEmpty()) {
IAA71MU = Short.parseShort(s);
} else {
IAA71MU = Short.MIN_VALUE;
}
}

protected final void initIAA71OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71OE = false;
} else {
IAA71OE = true;
}
}
}

protected final void initIAA71OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71OL = false;
} else {
IAA71OL = true;
}
}
}

protected final void initIAA71OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71OR = false;
} else {
IAA71OR = true;
}
}
}

protected final void initIAA71OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71OU = false;
} else {
IAA71OU = true;
}
}
}

protected final void initIAA71WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71WE = false;
} else {
IAA71WE = true;
}
}
}

protected final void initIAA71WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71WL = false;
} else {
IAA71WL = true;
}
}
}

protected final void initIAA71WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71WR = false;
} else {
IAA71WR = true;
}
}
}

protected final void initIAA71WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71WU = false;
} else {
IAA71WU = true;
}
}
}

protected final void initIAA71YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71YE = false;
} else {
IAA71YE = true;
}
}
}

protected final void initIAA71YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71YL = false;
} else {
IAA71YL = true;
}
}
}

protected final void initIAA71YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71YR = false;
} else {
IAA71YR = true;
}
}
}

protected final void initIAA71YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71YU = false;
} else {
IAA71YU = true;
}
}
}

protected final void initIAA72(String s) {
if (!s.trim().isEmpty()) {
IAA72 = Byte.parseByte(s);
} else {
IAA72 = Byte.MIN_VALUE;
}
}

protected final void initIAA72FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72FE = false;
} else {
IAA72FE = true;
}
}
}

protected final void initIAA72FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72FL = false;
} else {
IAA72FL = true;
}
}
}

protected final void initIAA72FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72FR = false;
} else {
IAA72FR = true;
}
}
}

protected final void initIAA72FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72FU = false;
} else {
IAA72FU = true;
}
}
}

protected final void initIAA72ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72ME = false;
} else {
IAA72ME = true;
}
}
}

protected final void initIAA72ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72ML = false;
} else {
IAA72ML = true;
}
}
}

protected final void initIAA72MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72MR = false;
} else {
IAA72MR = true;
}
}
}

protected final void initIAA72MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72MU = false;
} else {
IAA72MU = true;
}
}
}

protected final void initIAA72OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72OE = false;
} else {
IAA72OE = true;
}
}
}

protected final void initIAA72OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA72OL = false;
} else {
IAA72OL = true;
}
}
}

protected final void initIAA72OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72OR = false;
} else {
IAA72OR = true;
}
}
}

protected final void initIAA72OU(String s) {
if (!s.trim().isEmpty()) {
IAA72OU = Short.parseShort(s);
} else {
IAA72OU = Short.MIN_VALUE;
}
}

protected final void initIAA72WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72WE = false;
} else {
IAA72WE = true;
}
}
}

protected final void initIAA72WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72WL = false;
} else {
IAA72WL = true;
}
}
}

protected final void initIAA72WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72WR = false;
} else {
IAA72WR = true;
}
}
}

protected final void initIAA72WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72WU = false;
} else {
IAA72WU = true;
}
}
}

protected final void initIAA72YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72YE = false;
} else {
IAA72YE = true;
}
}
}

protected final void initIAA72YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72YL = false;
} else {
IAA72YL = true;
}
}
}

protected final void initIAA72YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72YR = false;
} else {
IAA72YR = true;
}
}
}

protected final void initIAA72YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72YU = false;
} else {
IAA72YU = true;
}
}
}

protected final void initIAAIPE(String s) {
if (!s.trim().isEmpty()) {
IAAIPE = Byte.parseByte(s);
} else {
IAAIPE = Byte.MIN_VALUE;
}
}

protected final void initIAAIPL(String s) {
if (!s.trim().isEmpty()) {
IAAIPL = Short.parseShort(s);
} else {
IAAIPL = Short.MIN_VALUE;
}
}

protected final void initIAAIPR(String s) {
if (!s.trim().isEmpty()) {
IAAIPR = Byte.parseByte(s);
} else {
IAAIPR = Byte.MIN_VALUE;
}
}

protected final void initIAAIPU(String s) {
if (!s.trim().isEmpty()) {
IAAIPU = Short.parseShort(s);
} else {
IAAIPU = Short.MIN_VALUE;
}
}

protected final void initIAB10(String s) {
if (!s.trim().isEmpty()) {
IAB10 = Byte.parseByte(s);
} else {
IAB10 = Byte.MIN_VALUE;
}
}

protected final void initIAB11(String s) {
if (!s.trim().isEmpty()) {
IAB11 = Byte.parseByte(s);
} else {
IAB11 = Byte.MIN_VALUE;
}
}

protected final void initIAB12(String s) {
if (!s.trim().isEmpty()) {
IAB12 = Byte.parseByte(s);
} else {
IAB12 = Byte.MIN_VALUE;
}
}

protected final void initIAB13(String s) {
if (!s.trim().isEmpty()) {
IAB13 = Byte.parseByte(s);
} else {
IAB13 = Byte.MIN_VALUE;
}
}

protected final void initIAB14(String s) {
if (!s.trim().isEmpty()) {
IAB14 = Byte.parseByte(s);
} else {
IAB14 = Byte.MIN_VALUE;
}
}

protected final void initIAB15(String s) {
if (!s.trim().isEmpty()) {
IAB15 = Byte.parseByte(s);
} else {
IAB15 = Byte.MIN_VALUE;
}
}

protected final void initIAB16(String s) {
if (!s.trim().isEmpty()) {
IAB16 = Byte.parseByte(s);
} else {
IAB16 = Byte.MIN_VALUE;
}
}

protected final void initIAB17(String s) {
if (!s.trim().isEmpty()) {
IAB17 = Byte.parseByte(s);
} else {
IAB17 = Byte.MIN_VALUE;
}
}

protected final void initIAB18(String s) {
if (!s.trim().isEmpty()) {
IAB18 = Byte.parseByte(s);
} else {
IAB18 = Byte.MIN_VALUE;
}
}

protected final void initIAB28(String s) {
if (!s.trim().isEmpty()) {
IAB28 = Byte.parseByte(s);
} else {
IAB28 = Byte.MIN_VALUE;
}
}

protected final void initIAB29(String s) {
if (!s.trim().isEmpty()) {
IAB29 = Byte.parseByte(s);
} else {
IAB29 = Byte.MIN_VALUE;
}
}

protected final void initIAB30(String s) {
if (!s.trim().isEmpty()) {
IAB30 = Byte.parseByte(s);
} else {
IAB30 = Byte.MIN_VALUE;
}
}

protected final void initIAB31(String s) {
if (!s.trim().isEmpty()) {
IAB31 = Byte.parseByte(s);
} else {
IAB31 = Byte.MIN_VALUE;
}
}

protected final void initIAB32(String s) {
if (!s.trim().isEmpty()) {
IAB32 = Byte.parseByte(s);
} else {
IAB32 = Byte.MIN_VALUE;
}
}

protected final void initIAB33(String s) {
if (!s.trim().isEmpty()) {
IAB33 = Byte.parseByte(s);
} else {
IAB33 = Byte.MIN_VALUE;
}
}

protected final void initIAB34(String s) {
if (!s.trim().isEmpty()) {
IAB34 = Byte.parseByte(s);
} else {
IAB34 = Byte.MIN_VALUE;
}
}

protected final void initIAB35(String s) {
if (!s.trim().isEmpty()) {
IAB35 = Byte.parseByte(s);
} else {
IAB35 = Byte.MIN_VALUE;
}
}

protected final void initIAB36(String s) {
if (!s.trim().isEmpty()) {
IAB36 = Byte.parseByte(s);
} else {
IAB36 = Byte.MIN_VALUE;
}
}

protected final void initIAB46(String s) {
if (!s.trim().isEmpty()) {
IAB46 = Byte.parseByte(s);
} else {
IAB46 = Byte.MIN_VALUE;
}
}

protected final void initIAB47(String s) {
if (!s.trim().isEmpty()) {
IAB47 = Byte.parseByte(s);
} else {
IAB47 = Byte.MIN_VALUE;
}
}

protected final void initIAB48(String s) {
if (!s.trim().isEmpty()) {
IAB48 = Byte.parseByte(s);
} else {
IAB48 = Byte.MIN_VALUE;
}
}

protected final void initIAB49(String s) {
if (!s.trim().isEmpty()) {
IAB49 = Byte.parseByte(s);
} else {
IAB49 = Byte.MIN_VALUE;
}
}

protected final void initIAB50(String s) {
if (!s.trim().isEmpty()) {
IAB50 = Byte.parseByte(s);
} else {
IAB50 = Byte.MIN_VALUE;
}
}

protected final void initIAB51(String s) {
if (!s.trim().isEmpty()) {
IAB51 = Byte.parseByte(s);
} else {
IAB51 = Byte.MIN_VALUE;
}
}

protected final void initIAB52(String s) {
if (!s.trim().isEmpty()) {
IAB52 = Byte.parseByte(s);
} else {
IAB52 = Byte.MIN_VALUE;
}
}

protected final void initIAB53(String s) {
if (!s.trim().isEmpty()) {
IAB53 = Byte.parseByte(s);
} else {
IAB53 = Byte.MIN_VALUE;
}
}

protected final void initIAB54(String s) {
if (!s.trim().isEmpty()) {
IAB54 = Byte.parseByte(s);
} else {
IAB54 = Byte.MIN_VALUE;
}
}

protected final void initIAB64(String s) {
if (!s.trim().isEmpty()) {
IAB64 = Byte.parseByte(s);
} else {
IAB64 = Byte.MIN_VALUE;
}
}

protected final void initIAB65(String s) {
if (!s.trim().isEmpty()) {
IAB65 = Byte.parseByte(s);
} else {
IAB65 = Byte.MIN_VALUE;
}
}

protected final void initIAB66(String s) {
if (!s.trim().isEmpty()) {
IAB66 = Byte.parseByte(s);
} else {
IAB66 = Byte.MIN_VALUE;
}
}

protected final void initIAB67(String s) {
if (!s.trim().isEmpty()) {
IAB67 = Byte.parseByte(s);
} else {
IAB67 = Byte.MIN_VALUE;
}
}

protected final void initIAB68(String s) {
if (!s.trim().isEmpty()) {
IAB68 = Byte.parseByte(s);
} else {
IAB68 = Byte.MIN_VALUE;
}
}

protected final void initIAB69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAB69 = false;
} else {
IAB69 = true;
}
}
}

protected final void initIAB70(String s) {
if (!s.trim().isEmpty()) {
IAB70 = Byte.parseByte(s);
} else {
IAB70 = Byte.MIN_VALUE;
}
}

protected final void initIAB71(String s) {
if (!s.trim().isEmpty()) {
IAB71 = Byte.parseByte(s);
} else {
IAB71 = Byte.MIN_VALUE;
}
}

protected final void initIAB72(String s) {
if (!s.trim().isEmpty()) {
IAB72 = Byte.parseByte(s);
} else {
IAB72 = Byte.MIN_VALUE;
}
}

protected final void initIABEB(String s) {
if (!s.trim().isEmpty()) {
IABEB = Byte.parseByte(s);
} else {
IABEB = Byte.MIN_VALUE;
}
}

protected final void initIABEN1(String s) {
if (!s.trim().isEmpty()) {
IABEN1 = Byte.parseByte(s);
} else {
IABEN1 = Byte.MIN_VALUE;
}
}

protected final void initIABEN2(String s) {
if (!s.trim().isEmpty()) {
IABEN2 = Byte.parseByte(s);
} else {
IABEN2 = Byte.MIN_VALUE;
}
}

protected final void initIABEN3(String s) {
if (!s.trim().isEmpty()) {
IABEN3 = Byte.parseByte(s);
} else {
IABEN3 = Byte.MIN_VALUE;
}
}

protected final void initIABEN4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABEN4 = false;
} else {
IABEN4 = true;
}
}
}

protected final void initIABEP1(String s) {
if (!s.trim().isEmpty()) {
IABEP1 = Byte.parseByte(s);
} else {
IABEP1 = Byte.MIN_VALUE;
}
}

protected final void initIABEP2(String s) {
if (!s.trim().isEmpty()) {
IABEP2 = Byte.parseByte(s);
} else {
IABEP2 = Byte.MIN_VALUE;
}
}

protected final void initIABEP3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABEP3 = false;
} else {
IABEP3 = true;
}
}
}

protected final void initIABEPM1(String s) {
if (!s.trim().isEmpty()) {
IABEPM1 = Byte.parseByte(s);
} else {
IABEPM1 = Byte.MIN_VALUE;
}
}

protected final void initIABEPM2(String s) {
if (!s.trim().isEmpty()) {
IABEPM2 = Byte.parseByte(s);
} else {
IABEPM2 = Byte.MIN_VALUE;
}
}

protected final void initIABEPM3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABEPM3 = false;
} else {
IABEPM3 = true;
}
}
}

protected final void initIABEPN1(String s) {
if (!s.trim().isEmpty()) {
IABEPN1 = Byte.parseByte(s);
} else {
IABEPN1 = Byte.MIN_VALUE;
}
}

protected final void initIABEPN2(String s) {
if (!s.trim().isEmpty()) {
IABEPN2 = Byte.parseByte(s);
} else {
IABEPN2 = Byte.MIN_VALUE;
}
}

protected final void initIABEPN3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABEPN3 = false;
} else {
IABEPN3 = true;
}
}
}

protected final void initIABER1(String s) {
if (!s.trim().isEmpty()) {
IABER1 = Byte.parseByte(s);
} else {
IABER1 = Byte.MIN_VALUE;
}
}

protected final void initIABER2(String s) {
if (!s.trim().isEmpty()) {
IABER2 = Byte.parseByte(s);
} else {
IABER2 = Byte.MIN_VALUE;
}
}

protected final void initIABER3(String s) {
if (!s.trim().isEmpty()) {
IABER3 = Byte.parseByte(s);
} else {
IABER3 = Byte.MIN_VALUE;
}
}

protected final void initIABER4(String s) {
if (!s.trim().isEmpty()) {
IABER4 = Byte.parseByte(s);
} else {
IABER4 = Byte.MIN_VALUE;
}
}

protected final void initIABERM1(String s) {
if (!s.trim().isEmpty()) {
IABERM1 = Byte.parseByte(s);
} else {
IABERM1 = Byte.MIN_VALUE;
}
}

protected final void initIABERM2(String s) {
if (!s.trim().isEmpty()) {
IABERM2 = Byte.parseByte(s);
} else {
IABERM2 = Byte.MIN_VALUE;
}
}

protected final void initIABERM3(String s) {
if (!s.trim().isEmpty()) {
IABERM3 = Byte.parseByte(s);
} else {
IABERM3 = Byte.MIN_VALUE;
}
}

protected final void initIABERM4(String s) {
if (!s.trim().isEmpty()) {
IABERM4 = Byte.parseByte(s);
} else {
IABERM4 = Byte.MIN_VALUE;
}
}

protected final void initIABM10(String s) {
if (!s.trim().isEmpty()) {
IABM10 = Byte.parseByte(s);
} else {
IABM10 = Byte.MIN_VALUE;
}
}

protected final void initIABM11(String s) {
if (!s.trim().isEmpty()) {
IABM11 = Byte.parseByte(s);
} else {
IABM11 = Byte.MIN_VALUE;
}
}

protected final void initIABM12(String s) {
if (!s.trim().isEmpty()) {
IABM12 = Byte.parseByte(s);
} else {
IABM12 = Byte.MIN_VALUE;
}
}

protected final void initIABM13(String s) {
if (!s.trim().isEmpty()) {
IABM13 = Byte.parseByte(s);
} else {
IABM13 = Byte.MIN_VALUE;
}
}

protected final void initIABM14(String s) {
if (!s.trim().isEmpty()) {
IABM14 = Byte.parseByte(s);
} else {
IABM14 = Byte.MIN_VALUE;
}
}

protected final void initIABM15(String s) {
if (!s.trim().isEmpty()) {
IABM15 = Byte.parseByte(s);
} else {
IABM15 = Byte.MIN_VALUE;
}
}

protected final void initIABM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM16 = false;
} else {
IABM16 = true;
}
}
}

protected final void initIABM17(String s) {
if (!s.trim().isEmpty()) {
IABM17 = Byte.parseByte(s);
} else {
IABM17 = Byte.MIN_VALUE;
}
}

protected final void initIABM18(String s) {
if (!s.trim().isEmpty()) {
IABM18 = Byte.parseByte(s);
} else {
IABM18 = Byte.MIN_VALUE;
}
}

protected final void initIABM28(String s) {
if (!s.trim().isEmpty()) {
IABM28 = Byte.parseByte(s);
} else {
IABM28 = Byte.MIN_VALUE;
}
}

protected final void initIABM29(String s) {
if (!s.trim().isEmpty()) {
IABM29 = Byte.parseByte(s);
} else {
IABM29 = Byte.MIN_VALUE;
}
}

protected final void initIABM30(String s) {
if (!s.trim().isEmpty()) {
IABM30 = Byte.parseByte(s);
} else {
IABM30 = Byte.MIN_VALUE;
}
}

protected final void initIABM31(String s) {
if (!s.trim().isEmpty()) {
IABM31 = Byte.parseByte(s);
} else {
IABM31 = Byte.MIN_VALUE;
}
}

protected final void initIABM32(String s) {
if (!s.trim().isEmpty()) {
IABM32 = Byte.parseByte(s);
} else {
IABM32 = Byte.MIN_VALUE;
}
}

protected final void initIABM33(String s) {
if (!s.trim().isEmpty()) {
IABM33 = Byte.parseByte(s);
} else {
IABM33 = Byte.MIN_VALUE;
}
}

protected final void initIABM34(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM34 = false;
} else {
IABM34 = true;
}
}
}

protected final void initIABM35(String s) {
if (!s.trim().isEmpty()) {
IABM35 = Byte.parseByte(s);
} else {
IABM35 = Byte.MIN_VALUE;
}
}

protected final void initIABM36(String s) {
if (!s.trim().isEmpty()) {
IABM36 = Byte.parseByte(s);
} else {
IABM36 = Byte.MIN_VALUE;
}
}

protected final void initIABM46(String s) {
if (!s.trim().isEmpty()) {
IABM46 = Byte.parseByte(s);
} else {
IABM46 = Byte.MIN_VALUE;
}
}

protected final void initIABM47(String s) {
if (!s.trim().isEmpty()) {
IABM47 = Byte.parseByte(s);
} else {
IABM47 = Byte.MIN_VALUE;
}
}

protected final void initIABM48(String s) {
if (!s.trim().isEmpty()) {
IABM48 = Byte.parseByte(s);
} else {
IABM48 = Byte.MIN_VALUE;
}
}

protected final void initIABM49(String s) {
if (!s.trim().isEmpty()) {
IABM49 = Byte.parseByte(s);
} else {
IABM49 = Byte.MIN_VALUE;
}
}

protected final void initIABM50(String s) {
if (!s.trim().isEmpty()) {
IABM50 = Byte.parseByte(s);
} else {
IABM50 = Byte.MIN_VALUE;
}
}

protected final void initIABM51(String s) {
if (!s.trim().isEmpty()) {
IABM51 = Byte.parseByte(s);
} else {
IABM51 = Byte.MIN_VALUE;
}
}

protected final void initIABM52(String s) {
if (!s.trim().isEmpty()) {
IABM52 = Byte.parseByte(s);
} else {
IABM52 = Byte.MIN_VALUE;
}
}

protected final void initIABM53(String s) {
if (!s.trim().isEmpty()) {
IABM53 = Byte.parseByte(s);
} else {
IABM53 = Byte.MIN_VALUE;
}
}

protected final void initIABM54(String s) {
if (!s.trim().isEmpty()) {
IABM54 = Byte.parseByte(s);
} else {
IABM54 = Byte.MIN_VALUE;
}
}

protected final void initIABM64(String s) {
if (!s.trim().isEmpty()) {
IABM64 = Byte.parseByte(s);
} else {
IABM64 = Byte.MIN_VALUE;
}
}

protected final void initIABM65(String s) {
if (!s.trim().isEmpty()) {
IABM65 = Byte.parseByte(s);
} else {
IABM65 = Byte.MIN_VALUE;
}
}

protected final void initIABM66(String s) {
if (!s.trim().isEmpty()) {
IABM66 = Byte.parseByte(s);
} else {
IABM66 = Byte.MIN_VALUE;
}
}

protected final void initIABM67(String s) {
if (!s.trim().isEmpty()) {
IABM67 = Byte.parseByte(s);
} else {
IABM67 = Byte.MIN_VALUE;
}
}

protected final void initIABM68(String s) {
if (!s.trim().isEmpty()) {
IABM68 = Byte.parseByte(s);
} else {
IABM68 = Byte.MIN_VALUE;
}
}

protected final void initIABM69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM69 = false;
} else {
IABM69 = true;
}
}
}

protected final void initIABM70(String s) {
if (!s.trim().isEmpty()) {
IABM70 = Byte.parseByte(s);
} else {
IABM70 = Byte.MIN_VALUE;
}
}

protected final void initIABM71(String s) {
if (!s.trim().isEmpty()) {
IABM71 = Byte.parseByte(s);
} else {
IABM71 = Byte.MIN_VALUE;
}
}

protected final void initIABM72(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM72 = false;
} else {
IABM72 = true;
}
}
}

protected final void initIABW10(String s) {
if (!s.trim().isEmpty()) {
IABW10 = Byte.parseByte(s);
} else {
IABW10 = Byte.MIN_VALUE;
}
}

protected final void initIABW11(String s) {
if (!s.trim().isEmpty()) {
IABW11 = Byte.parseByte(s);
} else {
IABW11 = Byte.MIN_VALUE;
}
}

protected final void initIABW12(String s) {
if (!s.trim().isEmpty()) {
IABW12 = Byte.parseByte(s);
} else {
IABW12 = Byte.MIN_VALUE;
}
}

protected final void initIABW13(String s) {
if (!s.trim().isEmpty()) {
IABW13 = Byte.parseByte(s);
} else {
IABW13 = Byte.MIN_VALUE;
}
}

protected final void initIABW14(String s) {
if (!s.trim().isEmpty()) {
IABW14 = Byte.parseByte(s);
} else {
IABW14 = Byte.MIN_VALUE;
}
}

protected final void initIABW15(String s) {
if (!s.trim().isEmpty()) {
IABW15 = Byte.parseByte(s);
} else {
IABW15 = Byte.MIN_VALUE;
}
}

protected final void initIABW16(String s) {
if (!s.trim().isEmpty()) {
IABW16 = Byte.parseByte(s);
} else {
IABW16 = Byte.MIN_VALUE;
}
}

protected final void initIABW17(String s) {
if (!s.trim().isEmpty()) {
IABW17 = Byte.parseByte(s);
} else {
IABW17 = Byte.MIN_VALUE;
}
}

protected final void initIABW18(String s) {
if (!s.trim().isEmpty()) {
IABW18 = Byte.parseByte(s);
} else {
IABW18 = Byte.MIN_VALUE;
}
}

protected final void initIABW28(String s) {
if (!s.trim().isEmpty()) {
IABW28 = Byte.parseByte(s);
} else {
IABW28 = Byte.MIN_VALUE;
}
}

protected final void initIABW29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW29 = false;
} else {
IABW29 = true;
}
}
}

protected final void initIABW30(String s) {
if (!s.trim().isEmpty()) {
IABW30 = Byte.parseByte(s);
} else {
IABW30 = Byte.MIN_VALUE;
}
}

protected final void initIABW31(String s) {
if (!s.trim().isEmpty()) {
IABW31 = Byte.parseByte(s);
} else {
IABW31 = Byte.MIN_VALUE;
}
}

protected final void initIABW32(String s) {
if (!s.trim().isEmpty()) {
IABW32 = Byte.parseByte(s);
} else {
IABW32 = Byte.MIN_VALUE;
}
}

protected final void initIABW33(String s) {
if (!s.trim().isEmpty()) {
IABW33 = Byte.parseByte(s);
} else {
IABW33 = Byte.MIN_VALUE;
}
}

protected final void initIABW34(String s) {
if (!s.trim().isEmpty()) {
IABW34 = Byte.parseByte(s);
} else {
IABW34 = Byte.MIN_VALUE;
}
}

protected final void initIABW35(String s) {
if (!s.trim().isEmpty()) {
IABW35 = Byte.parseByte(s);
} else {
IABW35 = Byte.MIN_VALUE;
}
}

protected final void initIABW36(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW36 = false;
} else {
IABW36 = true;
}
}
}

protected final void initIABW46(String s) {
if (!s.trim().isEmpty()) {
IABW46 = Byte.parseByte(s);
} else {
IABW46 = Byte.MIN_VALUE;
}
}

protected final void initIABW47(String s) {
if (!s.trim().isEmpty()) {
IABW47 = Byte.parseByte(s);
} else {
IABW47 = Byte.MIN_VALUE;
}
}

protected final void initIABW48(String s) {
if (!s.trim().isEmpty()) {
IABW48 = Byte.parseByte(s);
} else {
IABW48 = Byte.MIN_VALUE;
}
}

protected final void initIABW49(String s) {
if (!s.trim().isEmpty()) {
IABW49 = Byte.parseByte(s);
} else {
IABW49 = Byte.MIN_VALUE;
}
}

protected final void initIABW50(String s) {
if (!s.trim().isEmpty()) {
IABW50 = Byte.parseByte(s);
} else {
IABW50 = Byte.MIN_VALUE;
}
}

protected final void initIABW51(String s) {
if (!s.trim().isEmpty()) {
IABW51 = Byte.parseByte(s);
} else {
IABW51 = Byte.MIN_VALUE;
}
}

protected final void initIABW52(String s) {
if (!s.trim().isEmpty()) {
IABW52 = Byte.parseByte(s);
} else {
IABW52 = Byte.MIN_VALUE;
}
}

protected final void initIABW53(String s) {
if (!s.trim().isEmpty()) {
IABW53 = Byte.parseByte(s);
} else {
IABW53 = Byte.MIN_VALUE;
}
}

protected final void initIABW54(String s) {
if (!s.trim().isEmpty()) {
IABW54 = Byte.parseByte(s);
} else {
IABW54 = Byte.MIN_VALUE;
}
}

protected final void initIABW64(String s) {
if (!s.trim().isEmpty()) {
IABW64 = Byte.parseByte(s);
} else {
IABW64 = Byte.MIN_VALUE;
}
}

protected final void initIABW65(String s) {
if (!s.trim().isEmpty()) {
IABW65 = Byte.parseByte(s);
} else {
IABW65 = Byte.MIN_VALUE;
}
}

protected final void initIABW66(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW66 = false;
} else {
IABW66 = true;
}
}
}

protected final void initIABW67(String s) {
if (!s.trim().isEmpty()) {
IABW67 = Byte.parseByte(s);
} else {
IABW67 = Byte.MIN_VALUE;
}
}

protected final void initIABW68(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW68 = false;
} else {
IABW68 = true;
}
}
}

protected final void initIABW69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW69 = false;
} else {
IABW69 = true;
}
}
}

protected final void initIABW70(String s) {
if (!s.trim().isEmpty()) {
IABW70 = Byte.parseByte(s);
} else {
IABW70 = Byte.MIN_VALUE;
}
}

protected final void initIABW71(String s) {
if (!s.trim().isEmpty()) {
IABW71 = Byte.parseByte(s);
} else {
IABW71 = Byte.MIN_VALUE;
}
}

protected final void initIABW72(String s) {
if (!s.trim().isEmpty()) {
IABW72 = Byte.parseByte(s);
} else {
IABW72 = Byte.MIN_VALUE;
}
}

protected final void initIACISAE(String s) {
if (!s.trim().isEmpty()) {
IACISAE = Byte.parseByte(s);
} else {
IACISAE = Byte.MIN_VALUE;
}
}

protected final void initIACISAL(String s) {
if (!s.trim().isEmpty()) {
IACISAL = Short.parseShort(s);
} else {
IACISAL = Short.MIN_VALUE;
}
}

protected final void initIACISAR(String s) {
if (!s.trim().isEmpty()) {
IACISAR = Byte.parseByte(s);
} else {
IACISAR = Byte.MIN_VALUE;
}
}

protected final void initIACISAU(String s) {
if (!s.trim().isEmpty()) {
IACISAU = Short.parseShort(s);
} else {
IACISAU = Short.MIN_VALUE;
}
}

protected final void initIADATM(String s) {
if (!s.trim().isEmpty()) {
IADATM = Byte.parseByte(s);
} else {
IADATM = Byte.MIN_VALUE;
}
}

protected final void initIADATY(String s) {
if (!s.trim().isEmpty()) {
IADATY = Short.parseShort(s);
} else {
IADATY = Short.MIN_VALUE;
}
}

protected final void initIADEBME(String s) {
if (!s.trim().isEmpty()) {
IADEBME = Byte.parseByte(s);
} else {
IADEBME = Byte.MIN_VALUE;
}
}

protected final void initIADEBML(String s) {
if (!s.trim().isEmpty()) {
IADEBML = Short.parseShort(s);
} else {
IADEBML = Short.MIN_VALUE;
}
}

protected final void initIADEBMR(String s) {
if (!s.trim().isEmpty()) {
IADEBMR = Byte.parseByte(s);
} else {
IADEBMR = Byte.MIN_VALUE;
}
}

protected final void initIADEBMU(String s) {
if (!s.trim().isEmpty()) {
IADEBMU = Short.parseShort(s);
} else {
IADEBMU = Short.MIN_VALUE;
}
}

protected final void initIAEAR2E(String s) {
if (!s.trim().isEmpty()) {
IAEAR2E = Byte.parseByte(s);
} else {
IAEAR2E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR2L(String s) {
if (!s.trim().isEmpty()) {
IAEAR2L = Integer.parseInt(s);
} else {
IAEAR2L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR2R(String s) {
if (!s.trim().isEmpty()) {
IAEAR2R = Byte.parseByte(s);
} else {
IAEAR2R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR2U(String s) {
if (!s.trim().isEmpty()) {
IAEAR2U = Integer.parseInt(s);
} else {
IAEAR2U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR3E(String s) {
if (!s.trim().isEmpty()) {
IAEAR3E = Byte.parseByte(s);
} else {
IAEAR3E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR3L(String s) {
if (!s.trim().isEmpty()) {
IAEAR3L = Integer.parseInt(s);
} else {
IAEAR3L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR3R(String s) {
if (!s.trim().isEmpty()) {
IAEAR3R = Byte.parseByte(s);
} else {
IAEAR3R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR3U(String s) {
if (!s.trim().isEmpty()) {
IAEAR3U = Integer.parseInt(s);
} else {
IAEAR3U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR4E(String s) {
if (!s.trim().isEmpty()) {
IAEAR4E = Byte.parseByte(s);
} else {
IAEAR4E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR4L(String s) {
if (!s.trim().isEmpty()) {
IAEAR4L = Integer.parseInt(s);
} else {
IAEAR4L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR4R(String s) {
if (!s.trim().isEmpty()) {
IAEAR4R = Byte.parseByte(s);
} else {
IAEAR4R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR4U(String s) {
if (!s.trim().isEmpty()) {
IAEAR4U = Integer.parseInt(s);
} else {
IAEAR4U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR5E(String s) {
if (!s.trim().isEmpty()) {
IAEAR5E = Byte.parseByte(s);
} else {
IAEAR5E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR5L(String s) {
if (!s.trim().isEmpty()) {
IAEAR5L = Integer.parseInt(s);
} else {
IAEAR5L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR5R(String s) {
if (!s.trim().isEmpty()) {
IAEAR5R = Byte.parseByte(s);
} else {
IAEAR5R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR5U(String s) {
if (!s.trim().isEmpty()) {
IAEAR5U = Integer.parseInt(s);
} else {
IAEAR5U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR6E(String s) {
if (!s.trim().isEmpty()) {
IAEAR6E = Byte.parseByte(s);
} else {
IAEAR6E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR6L(String s) {
if (!s.trim().isEmpty()) {
IAEAR6L = Integer.parseInt(s);
} else {
IAEAR6L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR6R(String s) {
if (!s.trim().isEmpty()) {
IAEAR6R = Byte.parseByte(s);
} else {
IAEAR6R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR6U(String s) {
if (!s.trim().isEmpty()) {
IAEAR6U = Integer.parseInt(s);
} else {
IAEAR6U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR7E(String s) {
if (!s.trim().isEmpty()) {
IAEAR7E = Byte.parseByte(s);
} else {
IAEAR7E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR7L(String s) {
if (!s.trim().isEmpty()) {
IAEAR7L = Integer.parseInt(s);
} else {
IAEAR7L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR7R(String s) {
if (!s.trim().isEmpty()) {
IAEAR7R = Byte.parseByte(s);
} else {
IAEAR7R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR7U(String s) {
if (!s.trim().isEmpty()) {
IAEAR7U = Integer.parseInt(s);
} else {
IAEAR7U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR8E(String s) {
if (!s.trim().isEmpty()) {
IAEAR8E = Byte.parseByte(s);
} else {
IAEAR8E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR8L(String s) {
if (!s.trim().isEmpty()) {
IAEAR8L = Integer.parseInt(s);
} else {
IAEAR8L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR8R(String s) {
if (!s.trim().isEmpty()) {
IAEAR8R = Byte.parseByte(s);
} else {
IAEAR8R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR8U(String s) {
if (!s.trim().isEmpty()) {
IAEAR8U = Integer.parseInt(s);
} else {
IAEAR8U = Integer.MIN_VALUE;
}
}

protected final void initIAEARE(String s) {
if (!s.trim().isEmpty()) {
IAEARE = Byte.parseByte(s);
} else {
IAEARE = Byte.MIN_VALUE;
}
}

protected final void initIAEARL(String s) {
if (!s.trim().isEmpty()) {
IAEARL = Integer.parseInt(s);
} else {
IAEARL = Integer.MIN_VALUE;
}
}

protected final void initIAEARR(String s) {
if (!s.trim().isEmpty()) {
IAEARR = Byte.parseByte(s);
} else {
IAEARR = Byte.MIN_VALUE;
}
}

protected final void initIAEARU(String s) {
if (!s.trim().isEmpty()) {
IAEARU = Integer.parseInt(s);
} else {
IAEARU = Integer.MIN_VALUE;
}
}

protected final void initIAERN(String s) {
if (!s.trim().isEmpty()) {
IAERN = Short.parseShort(s);
} else {
IAERN = Short.MIN_VALUE;
}
}

protected final void initIAERN10(String s) {
if (!s.trim().isEmpty()) {
IAERN10 = Byte.parseByte(s);
} else {
IAERN10 = Byte.MIN_VALUE;
}
}

protected final void initIAERN2(String s) {
if (!s.trim().isEmpty()) {
IAERN2 = Integer.parseInt(s);
} else {
IAERN2 = Integer.MIN_VALUE;
}
}

protected final void initIAERN3(String s) {
if (!s.trim().isEmpty()) {
IAERN3 = Integer.parseInt(s);
} else {
IAERN3 = Integer.MIN_VALUE;
}
}

protected final void initIAERN4(String s) {
if (!s.trim().isEmpty()) {
IAERN4 = Integer.parseInt(s);
} else {
IAERN4 = Integer.MIN_VALUE;
}
}

protected final void initIAERN5(String s) {
if (!s.trim().isEmpty()) {
IAERN5 = Integer.parseInt(s);
} else {
IAERN5 = Integer.MIN_VALUE;
}
}

protected final void initIAERN6(String s) {
if (!s.trim().isEmpty()) {
IAERN6 = Short.parseShort(s);
} else {
IAERN6 = Short.MIN_VALUE;
}
}

protected final void initIAERN7(String s) {
if (!s.trim().isEmpty()) {
IAERN7 = Short.parseShort(s);
} else {
IAERN7 = Short.MIN_VALUE;
}
}

protected final void initIAERN8(String s) {
if (!s.trim().isEmpty()) {
IAERN8 = Short.parseShort(s);
} else {
IAERN8 = Short.MIN_VALUE;
}
}

protected final void initIAERN9(String s) {
if (!s.trim().isEmpty()) {
IAERN9 = Byte.parseByte(s);
} else {
IAERN9 = Byte.MIN_VALUE;
}
}

protected final void initIAFBAE(String s) {
if (!s.trim().isEmpty()) {
IAFBAE = Byte.parseByte(s);
} else {
IAFBAE = Byte.MIN_VALUE;
}
}

protected final void initIAFBAL(String s) {
if (!s.trim().isEmpty()) {
IAFBAL = Integer.parseInt(s);
} else {
IAFBAL = Integer.MIN_VALUE;
}
}

protected final void initIAFBAR(String s) {
if (!s.trim().isEmpty()) {
IAFBAR = Byte.parseByte(s);
} else {
IAFBAR = Byte.MIN_VALUE;
}
}

protected final void initIAFBAU(String s) {
if (!s.trim().isEmpty()) {
IAFBAU = Integer.parseInt(s);
} else {
IAFBAU = Integer.MIN_VALUE;
}
}

protected final void initIAFFNUM(String s) {
if (!s.trim().isEmpty()) {
IAFFNUM = Byte.parseByte(s);
} else {
IAFFNUM = Byte.MIN_VALUE;
}
}

protected final void initIAFINDC(String s) {
if (!s.trim().isEmpty()) {
IAFINDC = Byte.parseByte(s);
} else {
IAFINDC = Byte.MIN_VALUE;
}
}

protected final void initIAFUEL(String s) {
if (!s.trim().isEmpty()) {
IAFUEL = Byte.parseByte(s);
} else {
IAFUEL = Byte.MIN_VALUE;
}
}

protected final void initIAHDB(String s) {
if (!s.trim().isEmpty()) {
IAHDB = Byte.parseByte(s);
} else {
IAHDB = Byte.MIN_VALUE;
}
}

protected final void initIAHDN1(String s) {
if (!s.trim().isEmpty()) {
IAHDN1 = Byte.parseByte(s);
} else {
IAHDN1 = Byte.MIN_VALUE;
}
}

protected final void initIAHDN2(String s) {
if (!s.trim().isEmpty()) {
IAHDN2 = Byte.parseByte(s);
} else {
IAHDN2 = Byte.MIN_VALUE;
}
}

protected final void initIAHDN3(String s) {
if (!s.trim().isEmpty()) {
IAHDN3 = Byte.parseByte(s);
} else {
IAHDN3 = Byte.MIN_VALUE;
}
}

protected final void initIAHDN4(String s) {
if (!s.trim().isEmpty()) {
IAHDN4 = Byte.parseByte(s);
} else {
IAHDN4 = Byte.MIN_VALUE;
}
}

protected final void initIAHDN5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAHDN5 = false;
} else {
IAHDN5 = true;
}
}
}

protected final void initIAHDP1(String s) {
if (!s.trim().isEmpty()) {
IAHDP1 = Byte.parseByte(s);
} else {
IAHDP1 = Byte.MIN_VALUE;
}
}

protected final void initIAHDP2(String s) {
if (!s.trim().isEmpty()) {
IAHDP2 = Byte.parseByte(s);
} else {
IAHDP2 = Byte.MIN_VALUE;
}
}

protected final void initIAHDP3(String s) {
if (!s.trim().isEmpty()) {
IAHDP3 = Byte.parseByte(s);
} else {
IAHDP3 = Byte.MIN_VALUE;
}
}

protected final void initIAHDP4(String s) {
if (!s.trim().isEmpty()) {
IAHDP4 = Byte.parseByte(s);
} else {
IAHDP4 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPM1(String s) {
if (!s.trim().isEmpty()) {
IAHDPM1 = Byte.parseByte(s);
} else {
IAHDPM1 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPM2(String s) {
if (!s.trim().isEmpty()) {
IAHDPM2 = Byte.parseByte(s);
} else {
IAHDPM2 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPM3(String s) {
if (!s.trim().isEmpty()) {
IAHDPM3 = Byte.parseByte(s);
} else {
IAHDPM3 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPM4(String s) {
if (!s.trim().isEmpty()) {
IAHDPM4 = Byte.parseByte(s);
} else {
IAHDPM4 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPN1(String s) {
if (!s.trim().isEmpty()) {
IAHDPN1 = Byte.parseByte(s);
} else {
IAHDPN1 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPN2(String s) {
if (!s.trim().isEmpty()) {
IAHDPN2 = Byte.parseByte(s);
} else {
IAHDPN2 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPN3(String s) {
if (!s.trim().isEmpty()) {
IAHDPN3 = Byte.parseByte(s);
} else {
IAHDPN3 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPN4(String s) {
if (!s.trim().isEmpty()) {
IAHDPN4 = Byte.parseByte(s);
} else {
IAHDPN4 = Byte.MIN_VALUE;
}
}

protected final void initIAHDR1(String s) {
if (!s.trim().isEmpty()) {
IAHDR1 = Byte.parseByte(s);
} else {
IAHDR1 = Byte.MIN_VALUE;
}
}

protected final void initIAHDR2(String s) {
if (!s.trim().isEmpty()) {
IAHDR2 = Byte.parseByte(s);
} else {
IAHDR2 = Byte.MIN_VALUE;
}
}

protected final void initIAHDR3(String s) {
if (!s.trim().isEmpty()) {
IAHDR3 = Byte.parseByte(s);
} else {
IAHDR3 = Byte.MIN_VALUE;
}
}

protected final void initIAHDR4(String s) {
if (!s.trim().isEmpty()) {
IAHDR4 = Byte.parseByte(s);
} else {
IAHDR4 = Byte.MIN_VALUE;
}
}

protected final void initIAHDR5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAHDR5 = false;
} else {
IAHDR5 = true;
}
}
}

protected final void initIAHDRM1(String s) {
if (!s.trim().isEmpty()) {
IAHDRM1 = Byte.parseByte(s);
} else {
IAHDRM1 = Byte.MIN_VALUE;
}
}

protected final void initIAHDRM2(String s) {
if (!s.trim().isEmpty()) {
IAHDRM2 = Byte.parseByte(s);
} else {
IAHDRM2 = Byte.MIN_VALUE;
}
}

protected final void initIAHDRM3(String s) {
if (!s.trim().isEmpty()) {
IAHDRM3 = Byte.parseByte(s);
} else {
IAHDRM3 = Byte.MIN_VALUE;
}
}

protected final void initIAHDRM4(String s) {
if (!s.trim().isEmpty()) {
IAHDRM4 = Byte.parseByte(s);
} else {
IAHDRM4 = Byte.MIN_VALUE;
}
}

protected final void initIAHDRM5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAHDRM5 = false;
} else {
IAHDRM5 = true;
}
}
}

protected final void initIAHOMEE(String s) {
if (!s.trim().isEmpty()) {
IAHOMEE = Byte.parseByte(s);
} else {
IAHOMEE = Byte.MIN_VALUE;
}
}

protected final void initIAHOMEL(String s) {
if (!s.trim().isEmpty()) {
IAHOMEL = Integer.parseInt(s);
} else {
IAHOMEL = Integer.MIN_VALUE;
}
}

protected final void initIAHOMER(String s) {
if (!s.trim().isEmpty()) {
IAHOMER = Byte.parseByte(s);
} else {
IAHOMER = Byte.MIN_VALUE;
}
}

protected final void initIAHOMEU(String s) {
if (!s.trim().isEmpty()) {
IAHOMEU = Integer.parseInt(s);
} else {
IAHOMEU = Integer.MIN_VALUE;
}
}

protected final void initIAIRAE(String s) {
if (!s.trim().isEmpty()) {
IAIRAE = Byte.parseByte(s);
} else {
IAIRAE = Byte.MIN_VALUE;
}
}

protected final void initIAIRAL(String s) {
if (!s.trim().isEmpty()) {
IAIRAL = Integer.parseInt(s);
} else {
IAIRAL = Integer.MIN_VALUE;
}
}

protected final void initIAIRAR(String s) {
if (!s.trim().isEmpty()) {
IAIRAR = Byte.parseByte(s);
} else {
IAIRAR = Byte.MIN_VALUE;
}
}

protected final void initIAIRAU(String s) {
if (!s.trim().isEmpty()) {
IAIRAU = Integer.parseInt(s);
} else {
IAIRAU = Integer.MIN_VALUE;
}
}

protected final void initIAISA1(String s) {
if (!s.trim().isEmpty()) {
IAISA1 = Byte.parseByte(s);
} else {
IAISA1 = Byte.MIN_VALUE;
}
}

protected final void initIAISA2(String s) {
if (!s.trim().isEmpty()) {
IAISA2 = Byte.parseByte(s);
} else {
IAISA2 = Byte.MIN_VALUE;
}
}

protected final void initIAISA3(String s) {
if (!s.trim().isEmpty()) {
IAISA3 = Byte.parseByte(s);
} else {
IAISA3 = Byte.MIN_VALUE;
}
}

protected final void initIAISADE(String s) {
if (!s.trim().isEmpty()) {
IAISADE = Byte.parseByte(s);
} else {
IAISADE = Byte.MIN_VALUE;
}
}

protected final void initIAISADL(String s) {
if (!s.trim().isEmpty()) {
IAISADL = Short.parseShort(s);
} else {
IAISADL = Short.MIN_VALUE;
}
}

protected final void initIAISADR(String s) {
if (!s.trim().isEmpty()) {
IAISADR = Byte.parseByte(s);
} else {
IAISADR = Byte.MIN_VALUE;
}
}

protected final void initIAISADU(String s) {
if (!s.trim().isEmpty()) {
IAISADU = Short.parseShort(s);
} else {
IAISADU = Short.MIN_VALUE;
}
}

protected final void initIALIPAE(String s) {
if (!s.trim().isEmpty()) {
IALIPAE = Byte.parseByte(s);
} else {
IALIPAE = Byte.MIN_VALUE;
}
}

protected final void initIALIPAL(String s) {
if (!s.trim().isEmpty()) {
IALIPAL = Integer.parseInt(s);
} else {
IALIPAL = Integer.MIN_VALUE;
}
}

protected final void initIALIPAR(String s) {
if (!s.trim().isEmpty()) {
IALIPAR = Byte.parseByte(s);
} else {
IALIPAR = Byte.MIN_VALUE;
}
}

protected final void initIALIPAU(String s) {
if (!s.trim().isEmpty()) {
IALIPAU = Integer.parseInt(s);
} else {
IALIPAU = Integer.MIN_VALUE;
}
}

protected final void initIALISAE(String s) {
if (!s.trim().isEmpty()) {
IALISAE = Byte.parseByte(s);
} else {
IALISAE = Byte.MIN_VALUE;
}
}

protected final void initIALISAL(String s) {
if (!s.trim().isEmpty()) {
IALISAL = Short.parseShort(s);
} else {
IALISAL = Short.MIN_VALUE;
}
}

protected final void initIALISAR(String s) {
if (!s.trim().isEmpty()) {
IALISAR = Byte.parseByte(s);
} else {
IALISAR = Byte.MIN_VALUE;
}
}

protected final void initIALISAU(String s) {
if (!s.trim().isEmpty()) {
IALISAU = Short.parseShort(s);
} else {
IALISAU = Short.MIN_VALUE;
}
}

protected final void initIALIYAE(String s) {
if (!s.trim().isEmpty()) {
IALIYAE = Byte.parseByte(s);
} else {
IALIYAE = Byte.MIN_VALUE;
}
}

protected final void initIALIYAL(String s) {
if (!s.trim().isEmpty()) {
IALIYAL = Integer.parseInt(s);
} else {
IALIYAL = Integer.MIN_VALUE;
}
}

protected final void initIALIYAR(String s) {
if (!s.trim().isEmpty()) {
IALIYAR = Byte.parseByte(s);
} else {
IALIYAR = Byte.MIN_VALUE;
}
}

protected final void initIALIYAU(String s) {
if (!s.trim().isEmpty()) {
IALIYAU = Integer.parseInt(s);
} else {
IALIYAU = Integer.MIN_VALUE;
}
}

protected final void initIALM(String s) {
if (!s.trim().isEmpty()) {
IALM = Byte.parseByte(s);
} else {
IALM = Byte.MIN_VALUE;
}
}

protected final void initIALM19(String s) {
if (!s.trim().isEmpty()) {
IALM19 = Byte.parseByte(s);
} else {
IALM19 = Byte.MIN_VALUE;
}
}

protected final void initIALM2(String s) {
if (!s.trim().isEmpty()) {
IALM2 = Byte.parseByte(s);
} else {
IALM2 = Byte.MIN_VALUE;
}
}

protected final void initIALM20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALM20 = false;
} else {
IALM20 = true;
}
}
}

protected final void initIALM21(String s) {
if (!s.trim().isEmpty()) {
IALM21 = Byte.parseByte(s);
} else {
IALM21 = Byte.MIN_VALUE;
}
}

protected final void initIALM22(String s) {
if (!s.trim().isEmpty()) {
IALM22 = Byte.parseByte(s);
} else {
IALM22 = Byte.MIN_VALUE;
}
}

protected final void initIALM23(String s) {
if (!s.trim().isEmpty()) {
IALM23 = Byte.parseByte(s);
} else {
IALM23 = Byte.MIN_VALUE;
}
}

protected final void initIALM24(String s) {
if (!s.trim().isEmpty()) {
IALM24 = Byte.parseByte(s);
} else {
IALM24 = Byte.MIN_VALUE;
}
}

protected final void initIALM25(String s) {
if (!s.trim().isEmpty()) {
IALM25 = Byte.parseByte(s);
} else {
IALM25 = Byte.MIN_VALUE;
}
}

protected final void initIALM26(String s) {
if (!s.trim().isEmpty()) {
IALM26 = Byte.parseByte(s);
} else {
IALM26 = Byte.MIN_VALUE;
}
}

protected final void initIALM27(String s) {
if (!s.trim().isEmpty()) {
IALM27 = Byte.parseByte(s);
} else {
IALM27 = Byte.MIN_VALUE;
}
}

protected final void initIALM3(String s) {
if (!s.trim().isEmpty()) {
IALM3 = Byte.parseByte(s);
} else {
IALM3 = Byte.MIN_VALUE;
}
}

protected final void initIALM37(String s) {
if (!s.trim().isEmpty()) {
IALM37 = Byte.parseByte(s);
} else {
IALM37 = Byte.MIN_VALUE;
}
}

protected final void initIALM38(String s) {
if (!s.trim().isEmpty()) {
IALM38 = Byte.parseByte(s);
} else {
IALM38 = Byte.MIN_VALUE;
}
}

protected final void initIALM39(String s) {
if (!s.trim().isEmpty()) {
IALM39 = Byte.parseByte(s);
} else {
IALM39 = Byte.MIN_VALUE;
}
}

protected final void initIALM4(String s) {
if (!s.trim().isEmpty()) {
IALM4 = Byte.parseByte(s);
} else {
IALM4 = Byte.MIN_VALUE;
}
}

protected final void initIALM40(String s) {
if (!s.trim().isEmpty()) {
IALM40 = Byte.parseByte(s);
} else {
IALM40 = Byte.MIN_VALUE;
}
}

protected final void initIALM41(String s) {
if (!s.trim().isEmpty()) {
IALM41 = Byte.parseByte(s);
} else {
IALM41 = Byte.MIN_VALUE;
}
}

protected final void initIALM42(String s) {
if (!s.trim().isEmpty()) {
IALM42 = Byte.parseByte(s);
} else {
IALM42 = Byte.MIN_VALUE;
}
}

protected final void initIALM43(String s) {
if (!s.trim().isEmpty()) {
IALM43 = Byte.parseByte(s);
} else {
IALM43 = Byte.MIN_VALUE;
}
}

protected final void initIALM44(String s) {
if (!s.trim().isEmpty()) {
IALM44 = Byte.parseByte(s);
} else {
IALM44 = Byte.MIN_VALUE;
}
}

protected final void initIALM45(String s) {
if (!s.trim().isEmpty()) {
IALM45 = Byte.parseByte(s);
} else {
IALM45 = Byte.MIN_VALUE;
}
}

protected final void initIALM5(String s) {
if (!s.trim().isEmpty()) {
IALM5 = Byte.parseByte(s);
} else {
IALM5 = Byte.MIN_VALUE;
}
}

protected final void initIALM55(String s) {
if (!s.trim().isEmpty()) {
IALM55 = Byte.parseByte(s);
} else {
IALM55 = Byte.MIN_VALUE;
}
}

protected final void initIALM56(String s) {
if (!s.trim().isEmpty()) {
IALM56 = Byte.parseByte(s);
} else {
IALM56 = Byte.MIN_VALUE;
}
}

protected final void initIALM57(String s) {
if (!s.trim().isEmpty()) {
IALM57 = Byte.parseByte(s);
} else {
IALM57 = Byte.MIN_VALUE;
}
}

protected final void initIALM58(String s) {
if (!s.trim().isEmpty()) {
IALM58 = Byte.parseByte(s);
} else {
IALM58 = Byte.MIN_VALUE;
}
}

protected final void initIALM59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALM59 = false;
} else {
IALM59 = true;
}
}
}

protected final void initIALM6(String s) {
if (!s.trim().isEmpty()) {
IALM6 = Byte.parseByte(s);
} else {
IALM6 = Byte.MIN_VALUE;
}
}

protected final void initIALM60(String s) {
if (!s.trim().isEmpty()) {
IALM60 = Byte.parseByte(s);
} else {
IALM60 = Byte.MIN_VALUE;
}
}

protected final void initIALM61(String s) {
if (!s.trim().isEmpty()) {
IALM61 = Byte.parseByte(s);
} else {
IALM61 = Byte.MIN_VALUE;
}
}

protected final void initIALM62(String s) {
if (!s.trim().isEmpty()) {
IALM62 = Byte.parseByte(s);
} else {
IALM62 = Byte.MIN_VALUE;
}
}

protected final void initIALM63(String s) {
if (!s.trim().isEmpty()) {
IALM63 = Byte.parseByte(s);
} else {
IALM63 = Byte.MIN_VALUE;
}
}

protected final void initIALM7(String s) {
if (!s.trim().isEmpty()) {
IALM7 = Byte.parseByte(s);
} else {
IALM7 = Byte.MIN_VALUE;
}
}

protected final void initIALM8(String s) {
if (!s.trim().isEmpty()) {
IALM8 = Byte.parseByte(s);
} else {
IALM8 = Byte.MIN_VALUE;
}
}

protected final void initIALM9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALM9 = false;
} else {
IALM9 = true;
}
}
}

protected final void initIALOAME(String s) {
if (!s.trim().isEmpty()) {
IALOAME = Byte.parseByte(s);
} else {
IALOAME = Byte.MIN_VALUE;
}
}

protected final void initIALOAML(String s) {
if (!s.trim().isEmpty()) {
IALOAML = Short.parseShort(s);
} else {
IALOAML = Short.MIN_VALUE;
}
}

protected final void initIALOAMR(String s) {
if (!s.trim().isEmpty()) {
IALOAMR = Byte.parseByte(s);
} else {
IALOAMR = Byte.MIN_VALUE;
}
}

protected final void initIALOAMU(String s) {
if (!s.trim().isEmpty()) {
IALOAMU = Short.parseShort(s);
} else {
IALOAMU = Short.MIN_VALUE;
}
}

protected final void initIALOAN1(String s) {
if (!s.trim().isEmpty()) {
IALOAN1 = Byte.parseByte(s);
} else {
IALOAN1 = Byte.MIN_VALUE;
}
}

protected final void initIALOAN2(String s) {
if (!s.trim().isEmpty()) {
IALOAN2 = Byte.parseByte(s);
} else {
IALOAN2 = Byte.MIN_VALUE;
}
}

protected final void initIALOAN3(String s) {
if (!s.trim().isEmpty()) {
IALOAN3 = Byte.parseByte(s);
} else {
IALOAN3 = Byte.MIN_VALUE;
}
}

protected final void initIALOAN4(String s) {
if (!s.trim().isEmpty()) {
IALOAN4 = Byte.parseByte(s);
} else {
IALOAN4 = Byte.MIN_VALUE;
}
}

protected final void initIALREFE(String s) {
if (!s.trim().isEmpty()) {
IALREFE = Byte.parseByte(s);
} else {
IALREFE = Byte.MIN_VALUE;
}
}

protected final void initIALREFL(String s) {
if (!s.trim().isEmpty()) {
IALREFL = Byte.parseByte(s);
} else {
IALREFL = Byte.MIN_VALUE;
}
}

protected final void initIALREFR(String s) {
if (!s.trim().isEmpty()) {
IALREFR = Byte.parseByte(s);
} else {
IALREFR = Byte.MIN_VALUE;
}
}

protected final void initIALREFU(String s) {
if (!s.trim().isEmpty()) {
IALREFU = Byte.parseByte(s);
} else {
IALREFU = Byte.MIN_VALUE;
}
}

protected final void initIALREME(String s) {
if (!s.trim().isEmpty()) {
IALREME = Byte.parseByte(s);
} else {
IALREME = Byte.MIN_VALUE;
}
}

protected final void initIALREML(String s) {
if (!s.trim().isEmpty()) {
IALREML = Short.parseShort(s);
} else {
IALREML = Short.MIN_VALUE;
}
}

protected final void initIALREMR(String s) {
if (!s.trim().isEmpty()) {
IALREMR = Byte.parseByte(s);
} else {
IALREMR = Byte.MIN_VALUE;
}
}

protected final void initIALREMU(String s) {
if (!s.trim().isEmpty()) {
IALREMU = Short.parseShort(s);
} else {
IALREMU = Short.MIN_VALUE;
}
}

protected final void initIALREOE(String s) {
if (!s.trim().isEmpty()) {
IALREOE = Byte.parseByte(s);
} else {
IALREOE = Byte.MIN_VALUE;
}
}

protected final void initIALREOL(String s) {
if (!s.trim().isEmpty()) {
IALREOL = Short.parseShort(s);
} else {
IALREOL = Short.MIN_VALUE;
}
}

protected final void initIALREOR(String s) {
if (!s.trim().isEmpty()) {
IALREOR = Byte.parseByte(s);
} else {
IALREOR = Byte.MIN_VALUE;
}
}

protected final void initIALREOU(String s) {
if (!s.trim().isEmpty()) {
IALREOU = Short.parseShort(s);
} else {
IALREOU = Short.MIN_VALUE;
}
}

protected final void initIALREWE(String s) {
if (!s.trim().isEmpty()) {
IALREWE = Byte.parseByte(s);
} else {
IALREWE = Byte.MIN_VALUE;
}
}

protected final void initIALREWL(String s) {
if (!s.trim().isEmpty()) {
IALREWL = Short.parseShort(s);
} else {
IALREWL = Short.MIN_VALUE;
}
}

protected final void initIALREWR(String s) {
if (!s.trim().isEmpty()) {
IALREWR = Byte.parseByte(s);
} else {
IALREWR = Byte.MIN_VALUE;
}
}

protected final void initIALREWU(String s) {
if (!s.trim().isEmpty()) {
IALREWU = Byte.parseByte(s);
} else {
IALREWU = Byte.MIN_VALUE;
}
}

protected final void initIALREYE(String s) {
if (!s.trim().isEmpty()) {
IALREYE = Byte.parseByte(s);
} else {
IALREYE = Byte.MIN_VALUE;
}
}

protected final void initIALREYL(String s) {
if (!s.trim().isEmpty()) {
IALREYL = Short.parseShort(s);
} else {
IALREYL = Short.MIN_VALUE;
}
}

protected final void initIALREYR(String s) {
if (!s.trim().isEmpty()) {
IALREYR = Byte.parseByte(s);
} else {
IALREYR = Byte.MIN_VALUE;
}
}

protected final void initIALREYU(String s) {
if (!s.trim().isEmpty()) {
IALREYU = Short.parseShort(s);
} else {
IALREYU = Short.MIN_VALUE;
}
}

protected final void initIALY(String s) {
if (!s.trim().isEmpty()) {
IALY = Byte.parseByte(s);
} else {
IALY = Byte.MIN_VALUE;
}
}

protected final void initIALY19(String s) {
if (!s.trim().isEmpty()) {
IALY19 = Byte.parseByte(s);
} else {
IALY19 = Byte.MIN_VALUE;
}
}

protected final void initIALY2(String s) {
if (!s.trim().isEmpty()) {
IALY2 = Byte.parseByte(s);
} else {
IALY2 = Byte.MIN_VALUE;
}
}

protected final void initIALY20(String s) {
if (!s.trim().isEmpty()) {
IALY20 = Byte.parseByte(s);
} else {
IALY20 = Byte.MIN_VALUE;
}
}

protected final void initIALY21(String s) {
if (!s.trim().isEmpty()) {
IALY21 = Byte.parseByte(s);
} else {
IALY21 = Byte.MIN_VALUE;
}
}

protected final void initIALY22(String s) {
if (!s.trim().isEmpty()) {
IALY22 = Byte.parseByte(s);
} else {
IALY22 = Byte.MIN_VALUE;
}
}

protected final void initIALY23(String s) {
if (!s.trim().isEmpty()) {
IALY23 = Byte.parseByte(s);
} else {
IALY23 = Byte.MIN_VALUE;
}
}

protected final void initIALY24(String s) {
if (!s.trim().isEmpty()) {
IALY24 = Byte.parseByte(s);
} else {
IALY24 = Byte.MIN_VALUE;
}
}

protected final void initIALY25(String s) {
if (!s.trim().isEmpty()) {
IALY25 = Byte.parseByte(s);
} else {
IALY25 = Byte.MIN_VALUE;
}
}

protected final void initIALY26(String s) {
if (!s.trim().isEmpty()) {
IALY26 = Byte.parseByte(s);
} else {
IALY26 = Byte.MIN_VALUE;
}
}

protected final void initIALY27(String s) {
if (!s.trim().isEmpty()) {
IALY27 = Byte.parseByte(s);
} else {
IALY27 = Byte.MIN_VALUE;
}
}

protected final void initIALY3(String s) {
if (!s.trim().isEmpty()) {
IALY3 = Byte.parseByte(s);
} else {
IALY3 = Byte.MIN_VALUE;
}
}

protected final void initIALY37(String s) {
if (!s.trim().isEmpty()) {
IALY37 = Byte.parseByte(s);
} else {
IALY37 = Byte.MIN_VALUE;
}
}

protected final void initIALY38(String s) {
if (!s.trim().isEmpty()) {
IALY38 = Byte.parseByte(s);
} else {
IALY38 = Byte.MIN_VALUE;
}
}

protected final void initIALY39(String s) {
if (!s.trim().isEmpty()) {
IALY39 = Byte.parseByte(s);
} else {
IALY39 = Byte.MIN_VALUE;
}
}

protected final void initIALY4(String s) {
if (!s.trim().isEmpty()) {
IALY4 = Byte.parseByte(s);
} else {
IALY4 = Byte.MIN_VALUE;
}
}

protected final void initIALY40(String s) {
if (!s.trim().isEmpty()) {
IALY40 = Byte.parseByte(s);
} else {
IALY40 = Byte.MIN_VALUE;
}
}

protected final void initIALY41(String s) {
if (!s.trim().isEmpty()) {
IALY41 = Byte.parseByte(s);
} else {
IALY41 = Byte.MIN_VALUE;
}
}

protected final void initIALY42(String s) {
if (!s.trim().isEmpty()) {
IALY42 = Byte.parseByte(s);
} else {
IALY42 = Byte.MIN_VALUE;
}
}

protected final void initIALY43(String s) {
if (!s.trim().isEmpty()) {
IALY43 = Byte.parseByte(s);
} else {
IALY43 = Byte.MIN_VALUE;
}
}

protected final void initIALY44(String s) {
if (!s.trim().isEmpty()) {
IALY44 = Byte.parseByte(s);
} else {
IALY44 = Byte.MIN_VALUE;
}
}

protected final void initIALY45(String s) {
if (!s.trim().isEmpty()) {
IALY45 = Byte.parseByte(s);
} else {
IALY45 = Byte.MIN_VALUE;
}
}

protected final void initIALY5(String s) {
if (!s.trim().isEmpty()) {
IALY5 = Byte.parseByte(s);
} else {
IALY5 = Byte.MIN_VALUE;
}
}

protected final void initIALY55(String s) {
if (!s.trim().isEmpty()) {
IALY55 = Byte.parseByte(s);
} else {
IALY55 = Byte.MIN_VALUE;
}
}

protected final void initIALY56(String s) {
if (!s.trim().isEmpty()) {
IALY56 = Byte.parseByte(s);
} else {
IALY56 = Byte.MIN_VALUE;
}
}

protected final void initIALY57(String s) {
if (!s.trim().isEmpty()) {
IALY57 = Byte.parseByte(s);
} else {
IALY57 = Byte.MIN_VALUE;
}
}

protected final void initIALY58(String s) {
if (!s.trim().isEmpty()) {
IALY58 = Byte.parseByte(s);
} else {
IALY58 = Byte.MIN_VALUE;
}
}

protected final void initIALY59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALY59 = false;
} else {
IALY59 = true;
}
}
}

protected final void initIALY6(String s) {
if (!s.trim().isEmpty()) {
IALY6 = Byte.parseByte(s);
} else {
IALY6 = Byte.MIN_VALUE;
}
}

protected final void initIALY60(String s) {
if (!s.trim().isEmpty()) {
IALY60 = Byte.parseByte(s);
} else {
IALY60 = Byte.MIN_VALUE;
}
}

protected final void initIALY61(String s) {
if (!s.trim().isEmpty()) {
IALY61 = Byte.parseByte(s);
} else {
IALY61 = Byte.MIN_VALUE;
}
}

protected final void initIALY62(String s) {
if (!s.trim().isEmpty()) {
IALY62 = Byte.parseByte(s);
} else {
IALY62 = Byte.MIN_VALUE;
}
}

protected final void initIALY63(String s) {
if (!s.trim().isEmpty()) {
IALY63 = Byte.parseByte(s);
} else {
IALY63 = Byte.MIN_VALUE;
}
}

protected final void initIALY7(String s) {
if (!s.trim().isEmpty()) {
IALY7 = Byte.parseByte(s);
} else {
IALY7 = Byte.MIN_VALUE;
}
}

protected final void initIALY8(String s) {
if (!s.trim().isEmpty()) {
IALY8 = Byte.parseByte(s);
} else {
IALY8 = Byte.MIN_VALUE;
}
}

protected final void initIALY9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALY9 = false;
} else {
IALY9 = true;
}
}
}

protected final void initIANPBPE(String s) {
if (!s.trim().isEmpty()) {
IANPBPE = Byte.parseByte(s);
} else {
IANPBPE = Byte.MIN_VALUE;
}
}

protected final void initIANPBPL(String s) {
if (!s.trim().isEmpty()) {
IANPBPL = Short.parseShort(s);
} else {
IANPBPL = Short.MIN_VALUE;
}
}

protected final void initIANPBPR(String s) {
if (!s.trim().isEmpty()) {
IANPBPR = Byte.parseByte(s);
} else {
IANPBPR = Byte.MIN_VALUE;
}
}

protected final void initIANPBPU(String s) {
if (!s.trim().isEmpty()) {
IANPBPU = Short.parseShort(s);
} else {
IANPBPU = Short.MIN_VALUE;
}
}

protected final void initIAOASAE(String s) {
if (!s.trim().isEmpty()) {
IAOASAE = Byte.parseByte(s);
} else {
IAOASAE = Byte.MIN_VALUE;
}
}

protected final void initIAOASAL(String s) {
if (!s.trim().isEmpty()) {
IAOASAL = Integer.parseInt(s);
} else {
IAOASAL = Integer.MIN_VALUE;
}
}

protected final void initIAOASAR(String s) {
if (!s.trim().isEmpty()) {
IAOASAR = Byte.parseByte(s);
} else {
IAOASAR = Byte.MIN_VALUE;
}
}

protected final void initIAOASAU(String s) {
if (!s.trim().isEmpty()) {
IAOASAU = Integer.parseInt(s);
} else {
IAOASAU = Integer.MIN_VALUE;
}
}

protected final void initIAOMME(String s) {
if (!s.trim().isEmpty()) {
IAOMME = Byte.parseByte(s);
} else {
IAOMME = Byte.MIN_VALUE;
}
}

protected final void initIAOMML(String s) {
if (!s.trim().isEmpty()) {
IAOMML = Integer.parseInt(s);
} else {
IAOMML = Integer.MIN_VALUE;
}
}

protected final void initIAOMMR(String s) {
if (!s.trim().isEmpty()) {
IAOMMR = Byte.parseByte(s);
} else {
IAOMMR = Byte.MIN_VALUE;
}
}

protected final void initIAOMMU(String s) {
if (!s.trim().isEmpty()) {
IAOMMU = Integer.parseInt(s);
} else {
IAOMMU = Integer.MIN_VALUE;
}
}

protected final void initIAORGFC(String s) {
if (!s.trim().isEmpty()) {
IAORGFC = Byte.parseByte(s);
} else {
IAORGFC = Byte.MIN_VALUE;
}
}

protected final void initIAOWEME(String s) {
if (!s.trim().isEmpty()) {
IAOWEME = Byte.parseByte(s);
} else {
IAOWEME = Byte.MIN_VALUE;
}
}

protected final void initIAOWEML(String s) {
if (!s.trim().isEmpty()) {
IAOWEML = Short.parseShort(s);
} else {
IAOWEML = Short.MIN_VALUE;
}
}

protected final void initIAOWEMR(String s) {
if (!s.trim().isEmpty()) {
IAOWEMR = Byte.parseByte(s);
} else {
IAOWEMR = Byte.MIN_VALUE;
}
}

protected final void initIAOWEMU(String s) {
if (!s.trim().isEmpty()) {
IAOWEMU = Short.parseShort(s);
} else {
IAOWEMU = Short.MIN_VALUE;
}
}

protected final void initIAP39(String s) {
if (!s.trim().isEmpty()) {
IAP39 = Byte.parseByte(s);
} else {
IAP39 = Byte.MIN_VALUE;
}
}

protected final void initIAP40(String s) {
if (!s.trim().isEmpty()) {
IAP40 = Byte.parseByte(s);
} else {
IAP40 = Byte.MIN_VALUE;
}
}

protected final void initIAP41(String s) {
if (!s.trim().isEmpty()) {
IAP41 = Byte.parseByte(s);
} else {
IAP41 = Byte.MIN_VALUE;
}
}

protected final void initIAP42(String s) {
if (!s.trim().isEmpty()) {
IAP42 = Byte.parseByte(s);
} else {
IAP42 = Byte.MIN_VALUE;
}
}

protected final void initIAP43(String s) {
if (!s.trim().isEmpty()) {
IAP43 = Byte.parseByte(s);
} else {
IAP43 = Byte.MIN_VALUE;
}
}

protected final void initIAP44(String s) {
if (!s.trim().isEmpty()) {
IAP44 = Byte.parseByte(s);
} else {
IAP44 = Byte.MIN_VALUE;
}
}

protected final void initIAP45(String s) {
if (!s.trim().isEmpty()) {
IAP45 = Byte.parseByte(s);
} else {
IAP45 = Byte.MIN_VALUE;
}
}

protected final void initIAP46(String s) {
if (!s.trim().isEmpty()) {
IAP46 = Byte.parseByte(s);
} else {
IAP46 = Byte.MIN_VALUE;
}
}

protected final void initIAP47(String s) {
if (!s.trim().isEmpty()) {
IAP47 = Byte.parseByte(s);
} else {
IAP47 = Byte.MIN_VALUE;
}
}

protected final void initIAP48(String s) {
if (!s.trim().isEmpty()) {
IAP48 = Byte.parseByte(s);
} else {
IAP48 = Byte.MIN_VALUE;
}
}

protected final void initIAP49(String s) {
if (!s.trim().isEmpty()) {
IAP49 = Byte.parseByte(s);
} else {
IAP49 = Byte.MIN_VALUE;
}
}

protected final void initIAP50(String s) {
if (!s.trim().isEmpty()) {
IAP50 = Byte.parseByte(s);
} else {
IAP50 = Byte.MIN_VALUE;
}
}

protected final void initIAP51(String s) {
if (!s.trim().isEmpty()) {
IAP51 = Byte.parseByte(s);
} else {
IAP51 = Byte.MIN_VALUE;
}
}

protected final void initIAP52(String s) {
if (!s.trim().isEmpty()) {
IAP52 = Byte.parseByte(s);
} else {
IAP52 = Byte.MIN_VALUE;
}
}

protected final void initIAP53(String s) {
if (!s.trim().isEmpty()) {
IAP53 = Byte.parseByte(s);
} else {
IAP53 = Byte.MIN_VALUE;
}
}

protected final void initIAP54(String s) {
if (!s.trim().isEmpty()) {
IAP54 = Byte.parseByte(s);
} else {
IAP54 = Byte.MIN_VALUE;
}
}

protected final void initIAP55(String s) {
if (!s.trim().isEmpty()) {
IAP55 = Byte.parseByte(s);
} else {
IAP55 = Byte.MIN_VALUE;
}
}

protected final void initIAP56(String s) {
if (!s.trim().isEmpty()) {
IAP56 = Byte.parseByte(s);
} else {
IAP56 = Byte.MIN_VALUE;
}
}

protected final void initIAP57(String s) {
if (!s.trim().isEmpty()) {
IAP57 = Byte.parseByte(s);
} else {
IAP57 = Byte.MIN_VALUE;
}
}

protected final void initIAP58(String s) {
if (!s.trim().isEmpty()) {
IAP58 = Byte.parseByte(s);
} else {
IAP58 = Byte.MIN_VALUE;
}
}

protected final void initIAP59(String s) {
if (!s.trim().isEmpty()) {
IAP59 = Byte.parseByte(s);
} else {
IAP59 = Byte.MIN_VALUE;
}
}

protected final void initIAP60(String s) {
if (!s.trim().isEmpty()) {
IAP60 = Byte.parseByte(s);
} else {
IAP60 = Byte.MIN_VALUE;
}
}

protected final void initIAP61(String s) {
if (!s.trim().isEmpty()) {
IAP61 = Byte.parseByte(s);
} else {
IAP61 = Byte.MIN_VALUE;
}
}

protected final void initIAP62(String s) {
if (!s.trim().isEmpty()) {
IAP62 = Byte.parseByte(s);
} else {
IAP62 = Byte.MIN_VALUE;
}
}

protected final void initIAP63(String s) {
if (!s.trim().isEmpty()) {
IAP63 = Byte.parseByte(s);
} else {
IAP63 = Byte.MIN_VALUE;
}
}

protected final void initIAP64(String s) {
if (!s.trim().isEmpty()) {
IAP64 = Byte.parseByte(s);
} else {
IAP64 = Byte.MIN_VALUE;
}
}

protected final void initIAP65(String s) {
if (!s.trim().isEmpty()) {
IAP65 = Byte.parseByte(s);
} else {
IAP65 = Byte.MIN_VALUE;
}
}

protected final void initIAP66(String s) {
if (!s.trim().isEmpty()) {
IAP66 = Byte.parseByte(s);
} else {
IAP66 = Byte.MIN_VALUE;
}
}

protected final void initIAP67(String s) {
if (!s.trim().isEmpty()) {
IAP67 = Byte.parseByte(s);
} else {
IAP67 = Byte.MIN_VALUE;
}
}

protected final void initIAP68(String s) {
if (!s.trim().isEmpty()) {
IAP68 = Byte.parseByte(s);
} else {
IAP68 = Byte.MIN_VALUE;
}
}

protected final void initIAP69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAP69 = false;
} else {
IAP69 = true;
}
}
}

protected final void initIAP70(String s) {
if (!s.trim().isEmpty()) {
IAP70 = Byte.parseByte(s);
} else {
IAP70 = Byte.MIN_VALUE;
}
}

protected final void initIAP71(String s) {
if (!s.trim().isEmpty()) {
IAP71 = Byte.parseByte(s);
} else {
IAP71 = Byte.MIN_VALUE;
}
}

protected final void initIAP72(String s) {
if (!s.trim().isEmpty()) {
IAP72 = Byte.parseByte(s);
} else {
IAP72 = Byte.MIN_VALUE;
}
}

protected final void initIAPAY(String s) {
if (!s.trim().isEmpty()) {
IAPAY = Byte.parseByte(s);
} else {
IAPAY = Byte.MIN_VALUE;
}
}

protected final void initIAPAY0E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPAY0E = false;
} else {
IAPAY0E = true;
}
}
}

protected final void initIAPAY0L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPAY0L = false;
} else {
IAPAY0L = true;
}
}
}

protected final void initIAPAY0R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPAY0R = false;
} else {
IAPAY0R = true;
}
}
}

protected final void initIAPAY0U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPAY0U = false;
} else {
IAPAY0U = true;
}
}
}

protected final void initIAPAY2(String s) {
if (!s.trim().isEmpty()) {
IAPAY2 = Byte.parseByte(s);
} else {
IAPAY2 = Byte.MIN_VALUE;
}
}

protected final void initIAPAY9E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPAY9E = false;
} else {
IAPAY9E = true;
}
}
}

protected final void initIAPAY9L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPAY9L = false;
} else {
IAPAY9L = true;
}
}
}

protected final void initIAPAY9R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPAY9R = false;
} else {
IAPAY9R = true;
}
}
}

protected final void initIAPAY9U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPAY9U = false;
} else {
IAPAY9U = true;
}
}
}

protected final void initIAPAYR(String s) {
if (!s.trim().isEmpty()) {
IAPAYR = Byte.parseByte(s);
} else {
IAPAYR = Byte.MIN_VALUE;
}
}

protected final void initIAPAYR2(String s) {
if (!s.trim().isEmpty()) {
IAPAYR2 = Byte.parseByte(s);
} else {
IAPAYR2 = Byte.MIN_VALUE;
}
}

protected final void initIAPK1(String s) {
if (!s.trim().isEmpty()) {
IAPK1 = Byte.parseByte(s);
} else {
IAPK1 = Byte.MIN_VALUE;
}
}

protected final void initIAPK2(String s) {
if (!s.trim().isEmpty()) {
IAPK2 = Byte.parseByte(s);
} else {
IAPK2 = Byte.MIN_VALUE;
}
}

protected final void initIAPK3(String s) {
if (!s.trim().isEmpty()) {
IAPK3 = Byte.parseByte(s);
} else {
IAPK3 = Byte.MIN_VALUE;
}
}

protected final void initIAPK4(String s) {
if (!s.trim().isEmpty()) {
IAPK4 = Byte.parseByte(s);
} else {
IAPK4 = Byte.MIN_VALUE;
}
}

protected final void initIAPKM1E(String s) {
if (!s.trim().isEmpty()) {
IAPKM1E = Byte.parseByte(s);
} else {
IAPKM1E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM1L(String s) {
if (!s.trim().isEmpty()) {
IAPKM1L = Integer.parseInt(s);
} else {
IAPKM1L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM1R(String s) {
if (!s.trim().isEmpty()) {
IAPKM1R = Byte.parseByte(s);
} else {
IAPKM1R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM1U(String s) {
if (!s.trim().isEmpty()) {
IAPKM1U = Integer.parseInt(s);
} else {
IAPKM1U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM2E(String s) {
if (!s.trim().isEmpty()) {
IAPKM2E = Byte.parseByte(s);
} else {
IAPKM2E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM2L(String s) {
if (!s.trim().isEmpty()) {
IAPKM2L = Integer.parseInt(s);
} else {
IAPKM2L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM2R(String s) {
if (!s.trim().isEmpty()) {
IAPKM2R = Byte.parseByte(s);
} else {
IAPKM2R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM2U(String s) {
if (!s.trim().isEmpty()) {
IAPKM2U = Integer.parseInt(s);
} else {
IAPKM2U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM3E(String s) {
if (!s.trim().isEmpty()) {
IAPKM3E = Byte.parseByte(s);
} else {
IAPKM3E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM3L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPKM3L = false;
} else {
IAPKM3L = true;
}
}
}

protected final void initIAPKM3R(String s) {
if (!s.trim().isEmpty()) {
IAPKM3R = Byte.parseByte(s);
} else {
IAPKM3R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM3U(String s) {
if (!s.trim().isEmpty()) {
IAPKM3U = Short.parseShort(s);
} else {
IAPKM3U = Short.MIN_VALUE;
}
}

protected final void initIAPKM4E(String s) {
if (!s.trim().isEmpty()) {
IAPKM4E = Byte.parseByte(s);
} else {
IAPKM4E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM4L(String s) {
if (!s.trim().isEmpty()) {
IAPKM4L = Short.parseShort(s);
} else {
IAPKM4L = Short.MIN_VALUE;
}
}

protected final void initIAPKM4R(String s) {
if (!s.trim().isEmpty()) {
IAPKM4R = Byte.parseByte(s);
} else {
IAPKM4R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM4U(String s) {
if (!s.trim().isEmpty()) {
IAPKM4U = Short.parseShort(s);
} else {
IAPKM4U = Short.MIN_VALUE;
}
}

protected final void initIAPKM5E(String s) {
if (!s.trim().isEmpty()) {
IAPKM5E = Byte.parseByte(s);
} else {
IAPKM5E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM5L(String s) {
if (!s.trim().isEmpty()) {
IAPKM5L = Integer.parseInt(s);
} else {
IAPKM5L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM5R(String s) {
if (!s.trim().isEmpty()) {
IAPKM5R = Byte.parseByte(s);
} else {
IAPKM5R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM5U(String s) {
if (!s.trim().isEmpty()) {
IAPKM5U = Integer.parseInt(s);
} else {
IAPKM5U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM6E(String s) {
if (!s.trim().isEmpty()) {
IAPKM6E = Byte.parseByte(s);
} else {
IAPKM6E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM6L(String s) {
if (!s.trim().isEmpty()) {
IAPKM6L = Integer.parseInt(s);
} else {
IAPKM6L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM6R(String s) {
if (!s.trim().isEmpty()) {
IAPKM6R = Byte.parseByte(s);
} else {
IAPKM6R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM6U(String s) {
if (!s.trim().isEmpty()) {
IAPKM6U = Integer.parseInt(s);
} else {
IAPKM6U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM7E(String s) {
if (!s.trim().isEmpty()) {
IAPKM7E = Byte.parseByte(s);
} else {
IAPKM7E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM7L(String s) {
if (!s.trim().isEmpty()) {
IAPKM7L = Short.parseShort(s);
} else {
IAPKM7L = Short.MIN_VALUE;
}
}

protected final void initIAPKM7R(String s) {
if (!s.trim().isEmpty()) {
IAPKM7R = Byte.parseByte(s);
} else {
IAPKM7R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM7U(String s) {
if (!s.trim().isEmpty()) {
IAPKM7U = Short.parseShort(s);
} else {
IAPKM7U = Short.MIN_VALUE;
}
}

protected final void initIAPKM8E(String s) {
if (!s.trim().isEmpty()) {
IAPKM8E = Byte.parseByte(s);
} else {
IAPKM8E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM8L(String s) {
if (!s.trim().isEmpty()) {
IAPKM8L = Integer.parseInt(s);
} else {
IAPKM8L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM8R(String s) {
if (!s.trim().isEmpty()) {
IAPKM8R = Byte.parseByte(s);
} else {
IAPKM8R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM8U(String s) {
if (!s.trim().isEmpty()) {
IAPKM8U = Integer.parseInt(s);
} else {
IAPKM8U = Integer.MIN_VALUE;
}
}

protected final void initIAPKZM1(String s) {
if (!s.trim().isEmpty()) {
IAPKZM1 = Byte.parseByte(s);
} else {
IAPKZM1 = Byte.MIN_VALUE;
}
}

protected final void initIAPKZM2(String s) {
if (!s.trim().isEmpty()) {
IAPKZM2 = Byte.parseByte(s);
} else {
IAPKZM2 = Byte.MIN_VALUE;
}
}

protected final void initIAPKZM3(String s) {
if (!s.trim().isEmpty()) {
IAPKZM3 = Byte.parseByte(s);
} else {
IAPKZM3 = Byte.MIN_VALUE;
}
}

protected final void initIAPKZM4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPKZM4 = false;
} else {
IAPKZM4 = true;
}
}
}

protected final void initIAPLW(String s) {
if (!s.trim().isEmpty()) {
IAPLW = Byte.parseByte(s);
} else {
IAPLW = Byte.MIN_VALUE;
}
}

protected final void initIAPLY(String s) {
if (!s.trim().isEmpty()) {
IAPLY = Byte.parseByte(s);
} else {
IAPLY = Byte.MIN_VALUE;
}
}

protected final void initIAPLYP(String s) {
if (!s.trim().isEmpty()) {
IAPLYP = Byte.parseByte(s);
} else {
IAPLYP = Byte.MIN_VALUE;
}
}

protected final void initIAPLYW(String s) {
if (!s.trim().isEmpty()) {
IAPLYW = Byte.parseByte(s);
} else {
IAPLYW = Byte.MIN_VALUE;
}
}

protected final void initIAPPAFE(String s) {
if (!s.trim().isEmpty()) {
IAPPAFE = Byte.parseByte(s);
} else {
IAPPAFE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPPAFL = false;
} else {
IAPPAFL = true;
}
}
}

protected final void initIAPPAFR(String s) {
if (!s.trim().isEmpty()) {
IAPPAFR = Byte.parseByte(s);
} else {
IAPPAFR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAFU(String s) {
if (!s.trim().isEmpty()) {
IAPPAFU = Short.parseShort(s);
} else {
IAPPAFU = Short.MIN_VALUE;
}
}

protected final void initIAPPAME(String s) {
if (!s.trim().isEmpty()) {
IAPPAME = Byte.parseByte(s);
} else {
IAPPAME = Byte.MIN_VALUE;
}
}

protected final void initIAPPAML(String s) {
if (!s.trim().isEmpty()) {
IAPPAML = Short.parseShort(s);
} else {
IAPPAML = Short.MIN_VALUE;
}
}

protected final void initIAPPAMR(String s) {
if (!s.trim().isEmpty()) {
IAPPAMR = Byte.parseByte(s);
} else {
IAPPAMR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAMU(String s) {
if (!s.trim().isEmpty()) {
IAPPAMU = Short.parseShort(s);
} else {
IAPPAMU = Short.MIN_VALUE;
}
}

protected final void initIAPPAOE(String s) {
if (!s.trim().isEmpty()) {
IAPPAOE = Byte.parseByte(s);
} else {
IAPPAOE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAOL(String s) {
if (!s.trim().isEmpty()) {
IAPPAOL = Short.parseShort(s);
} else {
IAPPAOL = Short.MIN_VALUE;
}
}

protected final void initIAPPAOR(String s) {
if (!s.trim().isEmpty()) {
IAPPAOR = Byte.parseByte(s);
} else {
IAPPAOR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAOU(String s) {
if (!s.trim().isEmpty()) {
IAPPAOU = Short.parseShort(s);
} else {
IAPPAOU = Short.MIN_VALUE;
}
}

protected final void initIAPPAWE(String s) {
if (!s.trim().isEmpty()) {
IAPPAWE = Byte.parseByte(s);
} else {
IAPPAWE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAWL(String s) {
if (!s.trim().isEmpty()) {
IAPPAWL = Short.parseShort(s);
} else {
IAPPAWL = Short.MIN_VALUE;
}
}

protected final void initIAPPAWR(String s) {
if (!s.trim().isEmpty()) {
IAPPAWR = Byte.parseByte(s);
} else {
IAPPAWR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAWU(String s) {
if (!s.trim().isEmpty()) {
IAPPAWU = Short.parseShort(s);
} else {
IAPPAWU = Short.MIN_VALUE;
}
}

protected final void initIAPPAYE(String s) {
if (!s.trim().isEmpty()) {
IAPPAYE = Byte.parseByte(s);
} else {
IAPPAYE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAYL(String s) {
if (!s.trim().isEmpty()) {
IAPPAYL = Short.parseShort(s);
} else {
IAPPAYL = Short.MIN_VALUE;
}
}

protected final void initIAPPAYR(String s) {
if (!s.trim().isEmpty()) {
IAPPAYR = Byte.parseByte(s);
} else {
IAPPAYR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAYU(String s) {
if (!s.trim().isEmpty()) {
IAPPAYU = Short.parseShort(s);
} else {
IAPPAYU = Short.MIN_VALUE;
}
}

protected final void initIAPPEIE(String s) {
if (!s.trim().isEmpty()) {
IAPPEIE = Byte.parseByte(s);
} else {
IAPPEIE = Byte.MIN_VALUE;
}
}

protected final void initIAPPEIL(String s) {
if (!s.trim().isEmpty()) {
IAPPEIL = Short.parseShort(s);
} else {
IAPPEIL = Short.MIN_VALUE;
}
}

protected final void initIAPPEIR(String s) {
if (!s.trim().isEmpty()) {
IAPPEIR = Byte.parseByte(s);
} else {
IAPPEIR = Byte.MIN_VALUE;
}
}

protected final void initIAPPEIU(String s) {
if (!s.trim().isEmpty()) {
IAPPEIU = Short.parseShort(s);
} else {
IAPPEIU = Short.MIN_VALUE;
}
}

protected final void initIAPRC(String s) {
if (!s.trim().isEmpty()) {
IAPRC = Byte.parseByte(s);
} else {
IAPRC = Byte.MIN_VALUE;
}
}

protected final void initIAPROP1(String s) {
if (!s.trim().isEmpty()) {
IAPROP1 = Byte.parseByte(s);
} else {
IAPROP1 = Byte.MIN_VALUE;
}
}

protected final void initIAPROP2(String s) {
if (!s.trim().isEmpty()) {
IAPROP2 = Byte.parseByte(s);
} else {
IAPROP2 = Byte.MIN_VALUE;
}
}

protected final void initIAPROP3(String s) {
if (!s.trim().isEmpty()) {
IAPROP3 = Byte.parseByte(s);
} else {
IAPROP3 = Byte.MIN_VALUE;
}
}

protected final void initIAPROP4(String s) {
if (!s.trim().isEmpty()) {
IAPROP4 = Byte.parseByte(s);
} else {
IAPROP4 = Byte.MIN_VALUE;
}
}

protected final void initIAPROP5(String s) {
if (!s.trim().isEmpty()) {
IAPROP5 = Byte.parseByte(s);
} else {
IAPROP5 = Byte.MIN_VALUE;
}
}

protected final void initIAPROP6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPROP6 = false;
} else {
IAPROP6 = true;
}
}
}

protected final void initIAPYR2C(String s) {
if (!s.trim().isEmpty()) {
IAPYR2C = Byte.parseByte(s);
} else {
IAPYR2C = Byte.MIN_VALUE;
}
}

protected final void initIAPYRC(String s) {
if (!s.trim().isEmpty()) {
IAPYRC = Byte.parseByte(s);
} else {
IAPYRC = Byte.MIN_VALUE;
}
}

protected final void initIAPYW3(String s) {
if (!s.trim().isEmpty()) {
IAPYW3 = Byte.parseByte(s);
} else {
IAPYW3 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW4(String s) {
if (!s.trim().isEmpty()) {
IAPYW4 = Byte.parseByte(s);
} else {
IAPYW4 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW5(String s) {
if (!s.trim().isEmpty()) {
IAPYW5 = Byte.parseByte(s);
} else {
IAPYW5 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW6(String s) {
if (!s.trim().isEmpty()) {
IAPYW6 = Byte.parseByte(s);
} else {
IAPYW6 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW7(String s) {
if (!s.trim().isEmpty()) {
IAPYW7 = Byte.parseByte(s);
} else {
IAPYW7 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW8(String s) {
if (!s.trim().isEmpty()) {
IAPYW8 = Byte.parseByte(s);
} else {
IAPYW8 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW9(String s) {
if (!s.trim().isEmpty()) {
IAPYW9 = Byte.parseByte(s);
} else {
IAPYW9 = Byte.MIN_VALUE;
}
}

protected final void initIARECE(String s) {
if (!s.trim().isEmpty()) {
IARECE = Byte.parseByte(s);
} else {
IARECE = Byte.MIN_VALUE;
}
}

protected final void initIARECL(String s) {
if (!s.trim().isEmpty()) {
IARECL = Short.parseShort(s);
} else {
IARECL = Short.MIN_VALUE;
}
}

protected final void initIARECR(String s) {
if (!s.trim().isEmpty()) {
IARECR = Byte.parseByte(s);
} else {
IARECR = Byte.MIN_VALUE;
}
}

protected final void initIARECU(String s) {
if (!s.trim().isEmpty()) {
IARECU = Short.parseShort(s);
} else {
IARECU = Short.MIN_VALUE;
}
}

protected final void initIAREGYR(String s) {
if (!s.trim().isEmpty()) {
IAREGYR = Byte.parseByte(s);
} else {
IAREGYR = Byte.MIN_VALUE;
}
}

protected final void initIAREPFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFE = false;
} else {
IAREPFE = true;
}
}
}

protected final void initIAREPFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFL = false;
} else {
IAREPFL = true;
}
}
}

protected final void initIAREPFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFR = false;
} else {
IAREPFR = true;
}
}
}

protected final void initIAREPFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFU = false;
} else {
IAREPFU = true;
}
}
}

protected final void initIAREPME(String s) {
if (!s.trim().isEmpty()) {
IAREPME = Byte.parseByte(s);
} else {
IAREPME = Byte.MIN_VALUE;
}
}

protected final void initIAREPML(String s) {
if (!s.trim().isEmpty()) {
IAREPML = Byte.parseByte(s);
} else {
IAREPML = Byte.MIN_VALUE;
}
}

protected final void initIAREPMR(String s) {
if (!s.trim().isEmpty()) {
IAREPMR = Byte.parseByte(s);
} else {
IAREPMR = Byte.MIN_VALUE;
}
}

protected final void initIAREPMU(String s) {
if (!s.trim().isEmpty()) {
IAREPMU = Short.parseShort(s);
} else {
IAREPMU = Short.MIN_VALUE;
}
}

protected final void initIAREPOE(String s) {
if (!s.trim().isEmpty()) {
IAREPOE = Byte.parseByte(s);
} else {
IAREPOE = Byte.MIN_VALUE;
}
}

protected final void initIAREPOL(String s) {
if (!s.trim().isEmpty()) {
IAREPOL = Short.parseShort(s);
} else {
IAREPOL = Short.MIN_VALUE;
}
}

protected final void initIAREPOR(String s) {
if (!s.trim().isEmpty()) {
IAREPOR = Byte.parseByte(s);
} else {
IAREPOR = Byte.MIN_VALUE;
}
}

protected final void initIAREPOU(String s) {
if (!s.trim().isEmpty()) {
IAREPOU = Short.parseShort(s);
} else {
IAREPOU = Short.MIN_VALUE;
}
}

protected final void initIAREPWE(String s) {
if (!s.trim().isEmpty()) {
IAREPWE = Byte.parseByte(s);
} else {
IAREPWE = Byte.MIN_VALUE;
}
}

protected final void initIAREPWL(String s) {
if (!s.trim().isEmpty()) {
IAREPWL = Byte.parseByte(s);
} else {
IAREPWL = Byte.MIN_VALUE;
}
}

protected final void initIAREPWR(String s) {
if (!s.trim().isEmpty()) {
IAREPWR = Byte.parseByte(s);
} else {
IAREPWR = Byte.MIN_VALUE;
}
}

protected final void initIAREPWU(String s) {
if (!s.trim().isEmpty()) {
IAREPWU = Byte.parseByte(s);
} else {
IAREPWU = Byte.MIN_VALUE;
}
}

protected final void initIAREPYE(String s) {
if (!s.trim().isEmpty()) {
IAREPYE = Byte.parseByte(s);
} else {
IAREPYE = Byte.MIN_VALUE;
}
}

protected final void initIAREPYL(String s) {
if (!s.trim().isEmpty()) {
IAREPYL = Byte.parseByte(s);
} else {
IAREPYL = Byte.MIN_VALUE;
}
}

protected final void initIAREPYR(String s) {
if (!s.trim().isEmpty()) {
IAREPYR = Byte.parseByte(s);
} else {
IAREPYR = Byte.MIN_VALUE;
}
}

protected final void initIAREPYU(String s) {
if (!s.trim().isEmpty()) {
IAREPYU = Short.parseShort(s);
} else {
IAREPYU = Short.MIN_VALUE;
}
}

protected final void initIARG2FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FE = false;
} else {
IARG2FE = true;
}
}
}

protected final void initIARG2FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FL = false;
} else {
IARG2FL = true;
}
}
}

protected final void initIARG2FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FR = false;
} else {
IARG2FR = true;
}
}
}

protected final void initIARG2FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FU = false;
} else {
IARG2FU = true;
}
}
}

protected final void initIARG2ME(String s) {
if (!s.trim().isEmpty()) {
IARG2ME = Byte.parseByte(s);
} else {
IARG2ME = Byte.MIN_VALUE;
}
}

protected final void initIARG2ML(String s) {
if (!s.trim().isEmpty()) {
IARG2ML = Short.parseShort(s);
} else {
IARG2ML = Short.MIN_VALUE;
}
}

protected final void initIARG2MR(String s) {
if (!s.trim().isEmpty()) {
IARG2MR = Byte.parseByte(s);
} else {
IARG2MR = Byte.MIN_VALUE;
}
}

protected final void initIARG2MU(String s) {
if (!s.trim().isEmpty()) {
IARG2MU = Short.parseShort(s);
} else {
IARG2MU = Short.MIN_VALUE;
}
}

protected final void initIARG2OE(String s) {
if (!s.trim().isEmpty()) {
IARG2OE = Byte.parseByte(s);
} else {
IARG2OE = Byte.MIN_VALUE;
}
}

protected final void initIARG2OL(String s) {
if (!s.trim().isEmpty()) {
IARG2OL = Byte.parseByte(s);
} else {
IARG2OL = Byte.MIN_VALUE;
}
}

protected final void initIARG2OR(String s) {
if (!s.trim().isEmpty()) {
IARG2OR = Byte.parseByte(s);
} else {
IARG2OR = Byte.MIN_VALUE;
}
}

protected final void initIARG2OU(String s) {
if (!s.trim().isEmpty()) {
IARG2OU = Byte.parseByte(s);
} else {
IARG2OU = Byte.MIN_VALUE;
}
}

protected final void initIARG2WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WE = false;
} else {
IARG2WE = true;
}
}
}

protected final void initIARG2WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WL = false;
} else {
IARG2WL = true;
}
}
}

protected final void initIARG2WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WR = false;
} else {
IARG2WR = true;
}
}
}

protected final void initIARG2WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WU = false;
} else {
IARG2WU = true;
}
}
}

protected final void initIARG2YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YE = false;
} else {
IARG2YE = true;
}
}
}

protected final void initIARG2YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YL = false;
} else {
IARG2YL = true;
}
}
}

protected final void initIARG2YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YR = false;
} else {
IARG2YR = true;
}
}
}

protected final void initIARG2YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YU = false;
} else {
IARG2YU = true;
}
}
}

protected final void initIARGFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFE = false;
} else {
IARGFE = true;
}
}
}

protected final void initIARGFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFL = false;
} else {
IARGFL = true;
}
}
}

protected final void initIARGFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFR = false;
} else {
IARGFR = true;
}
}
}

protected final void initIARGFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFU = false;
} else {
IARGFU = true;
}
}
}

protected final void initIARGM(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGM = false;
} else {
IARGM = true;
}
}
}

protected final void initIARGME(String s) {
if (!s.trim().isEmpty()) {
IARGME = Byte.parseByte(s);
} else {
IARGME = Byte.MIN_VALUE;
}
}

protected final void initIARGML(String s) {
if (!s.trim().isEmpty()) {
IARGML = Short.parseShort(s);
} else {
IARGML = Short.MIN_VALUE;
}
}

protected final void initIARGMR(String s) {
if (!s.trim().isEmpty()) {
IARGMR = Byte.parseByte(s);
} else {
IARGMR = Byte.MIN_VALUE;
}
}

protected final void initIARGMU(String s) {
if (!s.trim().isEmpty()) {
IARGMU = Short.parseShort(s);
} else {
IARGMU = Short.MIN_VALUE;
}
}

protected final void initIARGMW(String s) {
if (!s.trim().isEmpty()) {
IARGMW = Byte.parseByte(s);
} else {
IARGMW = Byte.MIN_VALUE;
}
}

protected final void initIARGMWP(String s) {
if (!s.trim().isEmpty()) {
IARGMWP = Byte.parseByte(s);
} else {
IARGMWP = Byte.MIN_VALUE;
}
}

protected final void initIARGOE(String s) {
if (!s.trim().isEmpty()) {
IARGOE = Byte.parseByte(s);
} else {
IARGOE = Byte.MIN_VALUE;
}
}

protected final void initIARGOL(String s) {
if (!s.trim().isEmpty()) {
IARGOL = Short.parseShort(s);
} else {
IARGOL = Short.MIN_VALUE;
}
}

protected final void initIARGOR(String s) {
if (!s.trim().isEmpty()) {
IARGOR = Byte.parseByte(s);
} else {
IARGOR = Byte.MIN_VALUE;
}
}

protected final void initIARGOU(String s) {
if (!s.trim().isEmpty()) {
IARGOU = Short.parseShort(s);
} else {
IARGOU = Short.MIN_VALUE;
}
}

protected final void initIARGWE(String s) {
if (!s.trim().isEmpty()) {
IARGWE = Byte.parseByte(s);
} else {
IARGWE = Byte.MIN_VALUE;
}
}

protected final void initIARGWL(String s) {
if (!s.trim().isEmpty()) {
IARGWL = Byte.parseByte(s);
} else {
IARGWL = Byte.MIN_VALUE;
}
}

protected final void initIARGWR(String s) {
if (!s.trim().isEmpty()) {
IARGWR = Byte.parseByte(s);
} else {
IARGWR = Byte.MIN_VALUE;
}
}

protected final void initIARGWU(String s) {
if (!s.trim().isEmpty()) {
IARGWU = Byte.parseByte(s);
} else {
IARGWU = Byte.MIN_VALUE;
}
}

protected final void initIARGYE(String s) {
if (!s.trim().isEmpty()) {
IARGYE = Byte.parseByte(s);
} else {
IARGYE = Byte.MIN_VALUE;
}
}

protected final void initIARGYL(String s) {
if (!s.trim().isEmpty()) {
IARGYL = Byte.parseByte(s);
} else {
IARGYL = Byte.MIN_VALUE;
}
}

protected final void initIARGYR(String s) {
if (!s.trim().isEmpty()) {
IARGYR = Byte.parseByte(s);
} else {
IARGYR = Byte.MIN_VALUE;
}
}

protected final void initIARGYR2(String s) {
if (!s.trim().isEmpty()) {
IARGYR2 = Byte.parseByte(s);
} else {
IARGYR2 = Byte.MIN_VALUE;
}
}

protected final void initIARGYRP(String s) {
if (!s.trim().isEmpty()) {
IARGYRP = Byte.parseByte(s);
} else {
IARGYRP = Byte.MIN_VALUE;
}
}

protected final void initIARGYU(String s) {
if (!s.trim().isEmpty()) {
IARGYU = Byte.parseByte(s);
} else {
IARGYU = Byte.MIN_VALUE;
}
}

protected final void initIARMWA(String s) {
if (!s.trim().isEmpty()) {
IARMWA = Byte.parseByte(s);
} else {
IARMWA = Byte.MIN_VALUE;
}
}

protected final void initIARMWA2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARMWA2 = false;
} else {
IARMWA2 = true;
}
}
}

protected final void initIARMWPA(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARMWPA = false;
} else {
IARMWPA = true;
}
}
}

protected final void initIASAVAE(String s) {
if (!s.trim().isEmpty()) {
IASAVAE = Byte.parseByte(s);
} else {
IASAVAE = Byte.MIN_VALUE;
}
}

protected final void initIASAVAL(String s) {
if (!s.trim().isEmpty()) {
IASAVAL = Integer.parseInt(s);
} else {
IASAVAL = Integer.MIN_VALUE;
}
}

protected final void initIASAVAR(String s) {
if (!s.trim().isEmpty()) {
IASAVAR = Byte.parseByte(s);
} else {
IASAVAR = Byte.MIN_VALUE;
}
}

protected final void initIASAVAU(String s) {
if (!s.trim().isEmpty()) {
IASAVAU = Integer.parseInt(s);
} else {
IASAVAU = Integer.MIN_VALUE;
}
}

protected final void initIASCAE(String s) {
if (!s.trim().isEmpty()) {
IASCAE = Byte.parseByte(s);
} else {
IASCAE = Byte.MIN_VALUE;
}
}

protected final void initIASCAL(String s) {
if (!s.trim().isEmpty()) {
IASCAL = Integer.parseInt(s);
} else {
IASCAL = Integer.MIN_VALUE;
}
}

protected final void initIASCAR(String s) {
if (!s.trim().isEmpty()) {
IASCAR = Byte.parseByte(s);
} else {
IASCAR = Byte.MIN_VALUE;
}
}

protected final void initIASCAU(String s) {
if (!s.trim().isEmpty()) {
IASCAU = Integer.parseInt(s);
} else {
IASCAU = Integer.MIN_VALUE;
}
}

protected final void initIASHTY1(String s) {
if (!s.trim().isEmpty()) {
IASHTY1 = Byte.parseByte(s);
} else {
IASHTY1 = Byte.MIN_VALUE;
}
}

protected final void initIASHTY2(String s) {
if (!s.trim().isEmpty()) {
IASHTY2 = Byte.parseByte(s);
} else {
IASHTY2 = Byte.MIN_VALUE;
}
}

protected final void initIASHTY3(String s) {
if (!s.trim().isEmpty()) {
IASHTY3 = Byte.parseByte(s);
} else {
IASHTY3 = Byte.MIN_VALUE;
}
}

protected final void initIASHTY4(String s) {
if (!s.trim().isEmpty()) {
IASHTY4 = Byte.parseByte(s);
} else {
IASHTY4 = Byte.MIN_VALUE;
}
}

protected final void initIASI01(String s) {
if (!s.trim().isEmpty()) {
IASI01 = Byte.parseByte(s);
} else {
IASI01 = Byte.MIN_VALUE;
}
}

protected final void initIASI02(String s) {
if (!s.trim().isEmpty()) {
IASI02 = Byte.parseByte(s);
} else {
IASI02 = Byte.MIN_VALUE;
}
}

protected final void initIASI03(String s) {
if (!s.trim().isEmpty()) {
IASI03 = Byte.parseByte(s);
} else {
IASI03 = Byte.MIN_VALUE;
}
}

protected final void initIASI04(String s) {
if (!s.trim().isEmpty()) {
IASI04 = Byte.parseByte(s);
} else {
IASI04 = Byte.MIN_VALUE;
}
}

protected final void initIASI05(String s) {
if (!s.trim().isEmpty()) {
IASI05 = Byte.parseByte(s);
} else {
IASI05 = Byte.MIN_VALUE;
}
}

protected final void initIASI06(String s) {
if (!s.trim().isEmpty()) {
IASI06 = Byte.parseByte(s);
} else {
IASI06 = Byte.MIN_VALUE;
}
}

protected final void initIASI07(String s) {
if (!s.trim().isEmpty()) {
IASI07 = Byte.parseByte(s);
} else {
IASI07 = Byte.MIN_VALUE;
}
}

protected final void initIASI08(String s) {
if (!s.trim().isEmpty()) {
IASI08 = Byte.parseByte(s);
} else {
IASI08 = Byte.MIN_VALUE;
}
}

protected final void initIASI09(String s) {
if (!s.trim().isEmpty()) {
IASI09 = Byte.parseByte(s);
} else {
IASI09 = Byte.MIN_VALUE;
}
}

protected final void initIASI10(String s) {
if (!s.trim().isEmpty()) {
IASI10 = Byte.parseByte(s);
} else {
IASI10 = Byte.MIN_VALUE;
}
}

protected final void initIASI11(String s) {
if (!s.trim().isEmpty()) {
IASI11 = Byte.parseByte(s);
} else {
IASI11 = Byte.MIN_VALUE;
}
}

protected final void initIASIOIE(String s) {
if (!s.trim().isEmpty()) {
IASIOIE = Byte.parseByte(s);
} else {
IASIOIE = Byte.MIN_VALUE;
}
}

protected final void initIASIOIL(String s) {
if (!s.trim().isEmpty()) {
IASIOIL = Short.parseShort(s);
} else {
IASIOIL = Short.MIN_VALUE;
}
}

protected final void initIASIOIR(String s) {
if (!s.trim().isEmpty()) {
IASIOIR = Byte.parseByte(s);
} else {
IASIOIR = Byte.MIN_VALUE;
}
}

protected final void initIASIOIU(String s) {
if (!s.trim().isEmpty()) {
IASIOIU = Short.parseShort(s);
} else {
IASIOIU = Short.MIN_VALUE;
}
}

protected final void initIASISAE(String s) {
if (!s.trim().isEmpty()) {
IASISAE = Byte.parseByte(s);
} else {
IASISAE = Byte.MIN_VALUE;
}
}

protected final void initIASISAL(String s) {
if (!s.trim().isEmpty()) {
IASISAL = Integer.parseInt(s);
} else {
IASISAL = Integer.MIN_VALUE;
}
}

protected final void initIASISAR(String s) {
if (!s.trim().isEmpty()) {
IASISAR = Byte.parseByte(s);
} else {
IASISAR = Byte.MIN_VALUE;
}
}

protected final void initIASISAU(String s) {
if (!s.trim().isEmpty()) {
IASISAU = Integer.parseInt(s);
} else {
IASISAU = Integer.MIN_VALUE;
}
}

protected final void initIASSSE(String s) {
if (!s.trim().isEmpty()) {
IASSSE = Byte.parseByte(s);
} else {
IASSSE = Byte.MIN_VALUE;
}
}

protected final void initIASSSIE(String s) {
if (!s.trim().isEmpty()) {
IASSSIE = Byte.parseByte(s);
} else {
IASSSIE = Byte.MIN_VALUE;
}
}

protected final void initIASSSIL(String s) {
if (!s.trim().isEmpty()) {
IASSSIL = Short.parseShort(s);
} else {
IASSSIL = Short.MIN_VALUE;
}
}

protected final void initIASSSIR(String s) {
if (!s.trim().isEmpty()) {
IASSSIR = Byte.parseByte(s);
} else {
IASSSIR = Byte.MIN_VALUE;
}
}

protected final void initIASSSIU(String s) {
if (!s.trim().isEmpty()) {
IASSSIU = Short.parseShort(s);
} else {
IASSSIU = Short.MIN_VALUE;
}
}

protected final void initIASSSL(String s) {
if (!s.trim().isEmpty()) {
IASSSL = Integer.parseInt(s);
} else {
IASSSL = Integer.MIN_VALUE;
}
}

protected final void initIASSSR(String s) {
if (!s.trim().isEmpty()) {
IASSSR = Byte.parseByte(s);
} else {
IASSSR = Byte.MIN_VALUE;
}
}

protected final void initIASSSU(String s) {
if (!s.trim().isEmpty()) {
IASSSU = Integer.parseInt(s);
} else {
IASSSU = Integer.MIN_VALUE;
}
}

protected final void initIAT39(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT39 = false;
} else {
IAT39 = true;
}
}
}

protected final void initIAT40(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT40 = false;
} else {
IAT40 = true;
}
}
}

protected final void initIAT41(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT41 = false;
} else {
IAT41 = true;
}
}
}

protected final void initIAT42(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT42 = false;
} else {
IAT42 = true;
}
}
}

protected final void initIAT43(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT43 = false;
} else {
IAT43 = true;
}
}
}

protected final void initIAT44(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT44 = false;
} else {
IAT44 = true;
}
}
}

protected final void initIAT45(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT45 = false;
} else {
IAT45 = true;
}
}
}

protected final void initIAT46(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT46 = false;
} else {
IAT46 = true;
}
}
}

protected final void initIAT47(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT47 = false;
} else {
IAT47 = true;
}
}
}

protected final void initIAT48(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT48 = false;
} else {
IAT48 = true;
}
}
}

protected final void initIAT49(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT49 = false;
} else {
IAT49 = true;
}
}
}

protected final void initIAT50(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT50 = false;
} else {
IAT50 = true;
}
}
}

protected final void initIAT51(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT51 = false;
} else {
IAT51 = true;
}
}
}

protected final void initIAT52(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT52 = false;
} else {
IAT52 = true;
}
}
}

protected final void initIAT53(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT53 = false;
} else {
IAT53 = true;
}
}
}

protected final void initIAT54(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT54 = false;
} else {
IAT54 = true;
}
}
}

protected final void initIAT55(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT55 = false;
} else {
IAT55 = true;
}
}
}

protected final void initIAT56(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT56 = false;
} else {
IAT56 = true;
}
}
}

protected final void initIAT57(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT57 = false;
} else {
IAT57 = true;
}
}
}

protected final void initIAT58(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT58 = false;
} else {
IAT58 = true;
}
}
}

protected final void initIAT59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT59 = false;
} else {
IAT59 = true;
}
}
}

protected final void initIAT60(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT60 = false;
} else {
IAT60 = true;
}
}
}

protected final void initIAT61(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT61 = false;
} else {
IAT61 = true;
}
}
}

protected final void initIAT62(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT62 = false;
} else {
IAT62 = true;
}
}
}

protected final void initIAT63(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT63 = false;
} else {
IAT63 = true;
}
}
}

protected final void initIAT64(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT64 = false;
} else {
IAT64 = true;
}
}
}

protected final void initIAT65(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT65 = false;
} else {
IAT65 = true;
}
}
}

protected final void initIAT66(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT66 = false;
} else {
IAT66 = true;
}
}
}

protected final void initIAT67(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT67 = false;
} else {
IAT67 = true;
}
}
}

protected final void initIAT68(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT68 = false;
} else {
IAT68 = true;
}
}
}

protected final void initIAT69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT69 = false;
} else {
IAT69 = true;
}
}
}

protected final void initIAT70(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT70 = false;
} else {
IAT70 = true;
}
}
}

protected final void initIAT71(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT71 = false;
} else {
IAT71 = true;
}
}
}

protected final void initIAT72(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT72 = false;
} else {
IAT72 = true;
}
}
}

protected final void initIAUITE(String s) {
if (!s.trim().isEmpty()) {
IAUITE = Byte.parseByte(s);
} else {
IAUITE = Byte.MIN_VALUE;
}
}

protected final void initIAUITIE(String s) {
if (!s.trim().isEmpty()) {
IAUITIE = Byte.parseByte(s);
} else {
IAUITIE = Byte.MIN_VALUE;
}
}

protected final void initIAUITIL(String s) {
if (!s.trim().isEmpty()) {
IAUITIL = Short.parseShort(s);
} else {
IAUITIL = Short.MIN_VALUE;
}
}

protected final void initIAUITIR(String s) {
if (!s.trim().isEmpty()) {
IAUITIR = Byte.parseByte(s);
} else {
IAUITIR = Byte.MIN_VALUE;
}
}

protected final void initIAUITIU(String s) {
if (!s.trim().isEmpty()) {
IAUITIU = Short.parseShort(s);
} else {
IAUITIU = Short.MIN_VALUE;
}
}

protected final void initIAUITL(String s) {
if (!s.trim().isEmpty()) {
IAUITL = Integer.parseInt(s);
} else {
IAUITL = Integer.MIN_VALUE;
}
}

protected final void initIAUITR(String s) {
if (!s.trim().isEmpty()) {
IAUITR = Byte.parseByte(s);
} else {
IAUITR = Byte.MIN_VALUE;
}
}

protected final void initIAUITU(String s) {
if (!s.trim().isEmpty()) {
IAUITU = Integer.parseInt(s);
} else {
IAUITU = Integer.MIN_VALUE;
}
}

protected final void initIAW1R(String s) {
if (!s.trim().isEmpty()) {
IAW1R = Byte.parseByte(s);
} else {
IAW1R = Byte.MIN_VALUE;
}
}

protected final void initIDAIND(String s) {
if (!s.trim().isEmpty()) {
IDAIND = Integer.parseInt(s);
} else {
IDAIND = Integer.MIN_VALUE;
}
}

protected final void initIFLAG_DBSR1(String s) {
if (!s.trim().isEmpty()) {
IFLAG_DBSR1 = Byte.parseByte(s);
} else {
IFLAG_DBSR1 = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_DBSR2(String s) {
if (!s.trim().isEmpty()) {
IFLAG_DBSR2 = Byte.parseByte(s);
} else {
IFLAG_DBSR2 = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_DCCONT(String s) {
if (!s.trim().isEmpty()) {
IFLAG_DCCONT = Byte.parseByte(s);
} else {
IFLAG_DCCONT = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_DCFUND(String s) {
if (!s.trim().isEmpty()) {
IFLAG_DCFUND = Byte.parseByte(s);
} else {
IFLAG_DCFUND = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_EARN(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
IFLAG_EARN = false;
} else {
IFLAG_EARN = true;
}
}
}

protected final void initIFLAG_REC(String s) {
if (!s.trim().isEmpty()) {
IFLAG_REC = Byte.parseByte(s);
} else {
IFLAG_REC = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_RTEN(String s) {
if (!s.trim().isEmpty()) {
IFLAG_RTEN = Byte.parseByte(s);
} else {
IFLAG_RTEN = Byte.MIN_VALUE;
}
}

protected final void initIINTDTM(String s) {
if (!s.trim().isEmpty()) {
IINTDTM = Byte.parseByte(s);
} else {
IINTDTM = Byte.MIN_VALUE;
}
}

protected final void initIINTDTY(String s) {
if (!s.trim().isEmpty()) {
IINTDTY = Short.parseShort(s);
} else {
IINTDTY = Short.MIN_VALUE;
}
}

protected final void initINHALER(String s) {
if (!s.trim().isEmpty()) {
INHALER = Byte.parseByte(s);
} else {
INHALER = Byte.MIN_VALUE;
}
}

protected final void initINHALHR(String s) {
if (!s.trim().isEmpty()) {
INHALHR = Byte.parseByte(s);
} else {
INHALHR = Byte.MIN_VALUE;
}
}

protected final void initINRECEIPT_04(String s) {
if (!s.trim().isEmpty()) {
INRECEIPT_04 = Double.parseDouble(s);
} else {
INRECEIPT_04 = Double.NaN;
}
}

protected final void initINRECEIPT_SPA(String s) {
if (!s.trim().isEmpty()) {
INRECEIPT_SPA = Double.parseDouble(s);
} else {
INRECEIPT_SPA = Double.NaN;
}
}

protected final void initLDL(String s) {
if (!s.trim().isEmpty()) {
LDL = Double.parseDouble(s);
} else {
LDL = Double.NaN;
}
}

protected final void initLFNOMEA(String s) {
if (!s.trim().isEmpty()) {
LFNOMEA = Byte.parseByte(s);
} else {
LFNOMEA = Byte.MIN_VALUE;
}
}

protected final void initLFRESP(String s) {
if (!s.trim().isEmpty()) {
LFRESP = Byte.parseByte(s);
} else {
LFRESP = Byte.MIN_VALUE;
}
}

protected final void initLFSTAND(String s) {
if (!s.trim().isEmpty()) {
LFSTAND = Byte.parseByte(s);
} else {
LFSTAND = Byte.MIN_VALUE;
}
}

protected final void initLFTEMP(String s) {
if (!s.trim().isEmpty()) {
LFTEMP = Double.parseDouble(s);
} else {
LFTEMP = Double.NaN;
}
}

protected final void initLFWILL(String s) {
if (!s.trim().isEmpty()) {
LFWILL = Byte.parseByte(s);
} else {
LFWILL = Byte.MIN_VALUE;
}
}

protected final void initMAINHH1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
MAINHH1 = false;
} else {
MAINHH1 = true;
}
}
}

protected final void initMAP1(String s) {
if (!s.trim().isEmpty()) {
MAP1 = Short.parseShort(s);
} else {
MAP1 = Short.MIN_VALUE;
}
}

protected final void initMAP2(String s) {
if (!s.trim().isEmpty()) {
MAP2 = Short.parseShort(s);
} else {
MAP2 = Short.MIN_VALUE;
}
}

protected final void initMAP3(String s) {
if (!s.trim().isEmpty()) {
MAP3 = Short.parseShort(s);
} else {
MAP3 = Short.MIN_VALUE;
}
}

protected final void initMAPVAL(String s) {
if (!s.trim().isEmpty()) {
MAPVAL = Double.parseDouble(s);
} else {
MAPVAL = Double.NaN;
}
}

protected final void initMMAIDC(String s) {
if (!s.trim().isEmpty()) {
MMAIDC = Byte.parseByte(s);
} else {
MMAIDC = Byte.MIN_VALUE;
}
}

protected final void initMMBCSC(String s) {
if (!s.trim().isEmpty()) {
MMBCSC = Byte.parseByte(s);
} else {
MMBCSC = Byte.MIN_VALUE;
}
}

protected final void initMMCOMZ1(String s) {
if (!s.trim().isEmpty()) {
MMCOMZ1 = Byte.parseByte(s);
} else {
MMCOMZ1 = Byte.MIN_VALUE;
}
}

protected final void initMMCOMZ2(String s) {
if (!s.trim().isEmpty()) {
MMCOMZ2 = Byte.parseByte(s);
} else {
MMCOMZ2 = Byte.MIN_VALUE;
}
}

protected final void initMMCOMZ3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
MMCOMZ3 = false;
} else {
MMCOMZ3 = true;
}
}
}

protected final void initMMCRAV(String s) {
if (!s.trim().isEmpty()) {
MMCRAV = Byte.parseByte(s);
} else {
MMCRAV = Byte.MIN_VALUE;
}
}

protected final void initMMCRNA(String s) {
if (!s.trim().isEmpty()) {
MMCRNA = Byte.parseByte(s);
} else {
MMCRNA = Byte.MIN_VALUE;
}
}

protected final void initMMCRRE(String s) {
if (!s.trim().isEmpty()) {
MMCRRE = Byte.parseByte(s);
} else {
MMCRRE = Byte.MIN_VALUE;
}
}

protected final void initMMCRSC(String s) {
if (!s.trim().isEmpty()) {
MMCRSC = Byte.parseByte(s);
} else {
MMCRSC = Byte.MIN_VALUE;
}
}

protected final void initMMFTNA(String s) {
if (!s.trim().isEmpty()) {
MMFTNA = Byte.parseByte(s);
} else {
MMFTNA = Byte.MIN_VALUE;
}
}

protected final void initMMFTRE2(String s) {
if (!s.trim().isEmpty()) {
MMFTRE2 = Byte.parseByte(s);
} else {
MMFTRE2 = Byte.MIN_VALUE;
}
}

protected final void initMMFTSC(String s) {
if (!s.trim().isEmpty()) {
MMFTSC = Byte.parseByte(s);
} else {
MMFTSC = Byte.MIN_VALUE;
}
}

protected final void initMMFTTI(String s) {
if (!s.trim().isEmpty()) {
MMFTTI = Double.parseDouble(s);
} else {
MMFTTI = Double.NaN;
}
}

protected final void initMMGSD1(String s) {
if (!s.trim().isEmpty()) {
MMGSD1 = Byte.parseByte(s);
} else {
MMGSD1 = Byte.MIN_VALUE;
}
}

protected final void initMMGSD2(String s) {
if (!s.trim().isEmpty()) {
MMGSD2 = Byte.parseByte(s);
} else {
MMGSD2 = Byte.MIN_VALUE;
}
}

protected final void initMMGSD3(String s) {
if (!s.trim().isEmpty()) {
MMGSD3 = Byte.parseByte(s);
} else {
MMGSD3 = Byte.MIN_VALUE;
}
}

protected final void initMMGSDOM(String s) {
if (!s.trim().isEmpty()) {
MMGSDOM = Byte.parseByte(s);
} else {
MMGSDOM = Byte.MIN_VALUE;
}
}

protected final void initMMGSN1(String s) {
if (!s.trim().isEmpty()) {
MMGSN1 = Byte.parseByte(s);
} else {
MMGSN1 = Byte.MIN_VALUE;
}
}

protected final void initMMGSN2(String s) {
if (!s.trim().isEmpty()) {
MMGSN2 = Byte.parseByte(s);
} else {
MMGSN2 = Byte.MIN_VALUE;
}
}

protected final void initMMGSN3(String s) {
if (!s.trim().isEmpty()) {
MMGSN3 = Byte.parseByte(s);
} else {
MMGSN3 = Byte.MIN_VALUE;
}
}

protected final void initMMGSPR1(String s) {
if (!s.trim().isEmpty()) {
MMGSPR1 = Byte.parseByte(s);
} else {
MMGSPR1 = Byte.MIN_VALUE;
}
}

protected final void initMMGSPR2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
MMGSPR2 = false;
} else {
MMGSPR2 = true;
}
}
}

protected final void initMMGSRES(String s) {
if (!s.trim().isEmpty()) {
MMGSRES = Byte.parseByte(s);
} else {
MMGSRES = Byte.MIN_VALUE;
}
}

protected final void initMMGSSTA(String s) {
if (!s.trim().isEmpty()) {
MMGSSTA = Byte.parseByte(s);
} else {
MMGSSTA = Byte.MIN_VALUE;
}
}

protected final void initMMGSTP(String s) {
if (!s.trim().isEmpty()) {
MMGSTP = Byte.parseByte(s);
} else {
MMGSTP = Byte.MIN_VALUE;
}
}

protected final void initMMGSWIL(String s) {
if (!s.trim().isEmpty()) {
MMGSWIL = Byte.parseByte(s);
} else {
MMGSWIL = Byte.MIN_VALUE;
}
}

protected final void initMMLONA(String s) {
if (!s.trim().isEmpty()) {
MMLONA = Byte.parseByte(s);
} else {
MMLONA = Byte.MIN_VALUE;
}
}

protected final void initMMLORE(String s) {
if (!s.trim().isEmpty()) {
MMLORE = Byte.parseByte(s);
} else {
MMLORE = Byte.MIN_VALUE;
}
}

protected final void initMMLOSC(String s) {
if (!s.trim().isEmpty()) {
MMLOSC = Byte.parseByte(s);
} else {
MMLOSC = Byte.MIN_VALUE;
}
}

protected final void initMMLOTI(String s) {
if (!s.trim().isEmpty()) {
MMLOTI = Double.parseDouble(s);
} else {
MMLOTI = Double.NaN;
}
}

protected final void initMMLSNA(String s) {
if (!s.trim().isEmpty()) {
MMLSNA = Byte.parseByte(s);
} else {
MMLSNA = Byte.MIN_VALUE;
}
}

protected final void initMMLSRE(String s) {
if (!s.trim().isEmpty()) {
MMLSRE = Byte.parseByte(s);
} else {
MMLSRE = Byte.MIN_VALUE;
}
}

protected final void initMMLSSC(String s) {
if (!s.trim().isEmpty()) {
MMLSSC = Byte.parseByte(s);
} else {
MMLSSC = Byte.MIN_VALUE;
}
}

protected final void initMMLSTI(String s) {
if (!s.trim().isEmpty()) {
MMLSTI = Double.parseDouble(s);
} else {
MMLSTI = Double.NaN;
}
}

protected final void initMMRECRC(String s) {
if (!s.trim().isEmpty()) {
MMRECRC = Byte.parseByte(s);
} else {
MMRECRC = Byte.MIN_VALUE;
}
}

protected final void initMMRRFTI(String s) {
if (!s.trim().isEmpty()) {
MMRRFTI = Double.parseDouble(s);
} else {
MMRRFTI = Double.NaN;
}
}

protected final void initMMRRNA(String s) {
if (!s.trim().isEmpty()) {
MMRRNA = Byte.parseByte(s);
} else {
MMRRNA = Byte.MIN_VALUE;
}
}

protected final void initMMRROC(String s) {
if (!s.trim().isEmpty()) {
MMRROC = Byte.parseByte(s);
} else {
MMRROC = Byte.MIN_VALUE;
}
}

protected final void initMMRRRE(String s) {
if (!s.trim().isEmpty()) {
MMRRRE = Byte.parseByte(s);
} else {
MMRRRE = Byte.MIN_VALUE;
}
}

protected final void initMMRRSC(String s) {
if (!s.trim().isEmpty()) {
MMRRSC = Byte.parseByte(s);
} else {
MMRRSC = Byte.MIN_VALUE;
}
}

protected final void initMMRRTTI(String s) {
if (!s.trim().isEmpty()) {
MMRRTTI = Double.parseDouble(s);
} else {
MMRRTTI = Double.NaN;
}
}

protected final void initMMSSNA(String s) {
if (!s.trim().isEmpty()) {
MMSSNA = Byte.parseByte(s);
} else {
MMSSNA = Byte.MIN_VALUE;
}
}

protected final void initMMSSRE(String s) {
if (!s.trim().isEmpty()) {
MMSSRE = Byte.parseByte(s);
} else {
MMSSRE = Byte.MIN_VALUE;
}
}

protected final void initMMSSSC(String s) {
if (!s.trim().isEmpty()) {
MMSSSC = Byte.parseByte(s);
} else {
MMSSSC = Byte.MIN_VALUE;
}
}

protected final void initMMSSTI(String s) {
if (!s.trim().isEmpty()) {
MMSSTI = Double.parseDouble(s);
} else {
MMSSTI = Double.NaN;
}
}

protected final void initMMSTNA(String s) {
if (!s.trim().isEmpty()) {
MMSTNA = Byte.parseByte(s);
} else {
MMSTNA = Byte.MIN_VALUE;
}
}

protected final void initMMSTRE(String s) {
if (!s.trim().isEmpty()) {
MMSTRE = Byte.parseByte(s);
} else {
MMSTRE = Byte.MIN_VALUE;
}
}

protected final void initMMSTSC(String s) {
if (!s.trim().isEmpty()) {
MMSTSC = Byte.parseByte(s);
} else {
MMSTSC = Byte.MIN_VALUE;
}
}

protected final void initMMSTTI(String s) {
if (!s.trim().isEmpty()) {
MMSTTI = Double.parseDouble(s);
} else {
MMSTTI = Double.NaN;
}
}

protected final void initNATTBP1(String s) {
if (!s.trim().isEmpty()) {
NATTBP1 = Byte.parseByte(s);
} else {
NATTBP1 = Byte.MIN_VALUE;
}
}

protected final void initNATTBP2(String s) {
if (!s.trim().isEmpty()) {
NATTBP2 = Byte.parseByte(s);
} else {
NATTBP2 = Byte.MIN_VALUE;
}
}

protected final void initNLSATLF(String s) {
if (!s.trim().isEmpty()) {
NLSATLF = Byte.parseByte(s);
} else {
NLSATLF = Byte.MIN_VALUE;
}
}

protected final void initNNCLM(String s) {
if (!s.trim().isEmpty()) {
NNCLM = Byte.parseByte(s);
} else {
NNCLM = Byte.MIN_VALUE;
}
}

protected final void initNNCORRE(String s) {
if (!s.trim().isEmpty()) {
NNCORRE = Byte.parseByte(s);
} else {
NNCORRE = Byte.MIN_VALUE;
}
}

protected final void initNNMISSE(String s) {
if (!s.trim().isEmpty()) {
NNMISSE = Byte.parseByte(s);
} else {
NNMISSE = Byte.MIN_VALUE;
}
}

protected final void initNNROW(String s) {
if (!s.trim().isEmpty()) {
NNROW = Byte.parseByte(s);
} else {
NNROW = Byte.MIN_VALUE;
}
}

protected final void initNOATTLF(String s) {
if (!s.trim().isEmpty()) {
NOATTLF = Byte.parseByte(s);
} else {
NOATTLF = Byte.MIN_VALUE;
}
}

protected final void initNOBSM1(String s) {
if (!s.trim().isEmpty()) {
NOBSM1 = Byte.parseByte(s);
} else {
NOBSM1 = Byte.MIN_VALUE;
}
}

protected final void initNOBSM2(String s) {
if (!s.trim().isEmpty()) {
NOBSM2 = Byte.parseByte(s);
} else {
NOBSM2 = Byte.MIN_VALUE;
}
}

protected final void initNOHTBC1(String s) {
if (!s.trim().isEmpty()) {
NOHTBC1 = Byte.parseByte(s);
} else {
NOHTBC1 = Byte.MIN_VALUE;
}
}

protected final void initNOHTBC2(String s) {
if (!s.trim().isEmpty()) {
NOHTBC2 = Byte.parseByte(s);
} else {
NOHTBC2 = Byte.MIN_VALUE;
}
}

protected final void initNOHTBC3(String s) {
if (!s.trim().isEmpty()) {
NOHTBC3 = Byte.parseByte(s);
} else {
NOHTBC3 = Byte.MIN_VALUE;
}
}

protected final void initNOHTBC4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
NOHTBC4 = false;
} else {
NOHTBC4 = true;
}
}
}

protected final void initNOREAD(String s) {
if (!s.trim().isEmpty()) {
NOREAD = Byte.parseByte(s);
} else {
NOREAD = Byte.MIN_VALUE;
}
}

protected final void initNOWTBC1(String s) {
if (!s.trim().isEmpty()) {
NOWTBC1 = Byte.parseByte(s);
} else {
NOWTBC1 = Byte.MIN_VALUE;
}
}

protected final void initNOWTBC2(String s) {
if (!s.trim().isEmpty()) {
NOWTBC2 = Byte.parseByte(s);
} else {
NOWTBC2 = Byte.MIN_VALUE;
}
}

protected final void initNOWTBC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
NOWTBC3 = false;
} else {
NOWTBC3 = true;
}
}
}

protected final void initNOWTBC4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
NOWTBC4 = false;
} else {
NOWTBC4 = true;
}
}
}

protected final void initNROWCL(String s) {
if (!s.trim().isEmpty()) {
NROWCL = Short.parseShort(s);
} else {
NROWCL = Short.MIN_VALUE;
}
}

protected final void initORDCON(String s) {
if (!s.trim().isEmpty()) {
ORDCON = Byte.parseByte(s);
} else {
ORDCON = Byte.MIN_VALUE;
}
}

protected final void initOUTNSC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
OUTNSC = false;
} else {
OUTNSC = true;
}
}
}

protected final void initOUTSC(String s) {
if (!s.trim().isEmpty()) {
OUTSC = Byte.parseByte(s);
} else {
OUTSC = Byte.MIN_VALUE;
}
}

protected final void initPAINHH1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
PAINHH1 = false;
} else {
PAINHH1 = true;
}
}
}

protected final void initPC_P_F(String s) {
if (!s.trim().isEmpty()) {
PC_P_F = Byte.parseByte(s);
} else {
PC_P_F = Byte.MIN_VALUE;
}
}

protected final void initPC_P_I(String s) {
if (!s.trim().isEmpty()) {
PC_P_I = Double.parseDouble(s);
} else {
PC_P_I = Double.NaN;
}
}

protected final void initPC_P_O(String s) {
if (!s.trim().isEmpty()) {
PC_P_O = Short.parseShort(s);
} else {
PC_P_O = Short.MIN_VALUE;
}
}

protected final void initPC_P_T(String s) {
if (!s.trim().isEmpty()) {
PC_P_T = Short.parseShort(s);
} else {
PC_P_T = Short.MIN_VALUE;
}
}

protected final void initPC_R_F(String s) {
if (!s.trim().isEmpty()) {
PC_R_F = Byte.parseByte(s);
} else {
PC_R_F = Byte.MIN_VALUE;
}
}

protected final void initPC_R_I(String s) {
if (!s.trim().isEmpty()) {
PC_R_I = Double.parseDouble(s);
} else {
PC_R_I = Double.NaN;
}
}

protected final void initPC_R_O(String s) {
if (!s.trim().isEmpty()) {
PC_R_O = Short.parseShort(s);
} else {
PC_R_O = Short.MIN_VALUE;
}
}

protected final void initPC_R_T(String s) {
if (!s.trim().isEmpty()) {
PC_R_T = Short.parseShort(s);
} else {
PC_R_T = Short.MIN_VALUE;
}
}

protected final void initPENNUM(String s) {
if (!s.trim().isEmpty()) {
PENNUM = Byte.parseByte(s);
} else {
PENNUM = Byte.MIN_VALUE;
}
}

protected final void initPENTYPE_WAVE2(String s) {
if (!s.trim().isEmpty()) {
PENTYPE_WAVE2 = Byte.parseByte(s);
} else {
PENTYPE_WAVE2 = Byte.MIN_VALUE;
}
}

protected final void initPF1(String s) {
if (!s.trim().isEmpty()) {
PF1 = Short.parseShort(s);
} else {
PF1 = Short.MIN_VALUE;
}
}

protected final void initPF2(String s) {
if (!s.trim().isEmpty()) {
PF2 = Short.parseShort(s);
} else {
PF2 = Short.MIN_VALUE;
}
}

protected final void initPF3(String s) {
if (!s.trim().isEmpty()) {
PF3 = Short.parseShort(s);
} else {
PF3 = Short.MIN_VALUE;
}
}

protected final void initPRIPENW_04(String s) {
if (!s.trim().isEmpty()) {
PRIPENW_04 = Double.parseDouble(s);
} else {
PRIPENW_04 = Double.NaN;
}
}

protected final void initPRIPENW_SPA(String s) {
if (!s.trim().isEmpty()) {
PRIPENW_SPA = Double.parseDouble(s);
} else {
PRIPENW_SPA = Double.NaN;
}
}

protected final void initPROBHJ(String s) {
if (!s.trim().isEmpty()) {
PROBHJ = Byte.parseByte(s);
} else {
PROBHJ = Byte.MIN_VALUE;
}
}

protected final void initPROBLF1(String s) {
if (!s.trim().isEmpty()) {
PROBLF1 = Byte.parseByte(s);
} else {
PROBLF1 = Byte.MIN_VALUE;
}
}

protected final void initPROBLF2(String s) {
if (!s.trim().isEmpty()) {
PROBLF2 = Byte.parseByte(s);
} else {
PROBLF2 = Byte.MIN_VALUE;
}
}

protected final void initPROBLF3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
PROBLF3 = false;
} else {
PROBLF3 = true;
}
}
}

protected final void initPROBWJ(String s) {
if (!s.trim().isEmpty()) {
PROBWJ = Byte.parseByte(s);
} else {
PROBWJ = Byte.MIN_VALUE;
}
}

protected final void initPSFEEL(String s) {
if (!s.trim().isEmpty()) {
PSFEEL = Byte.parseByte(s);
} else {
PSFEEL = Byte.MIN_VALUE;
}
}

protected final void initPSPSYA(String s) {
if (!s.trim().isEmpty()) {
PSPSYA = Byte.parseByte(s);
} else {
PSPSYA = Byte.MIN_VALUE;
}
}

protected final void initPSPSYB(String s) {
if (!s.trim().isEmpty()) {
PSPSYB = Byte.parseByte(s);
} else {
PSPSYB = Byte.MIN_VALUE;
}
}

protected final void initPSPSYC(String s) {
if (!s.trim().isEmpty()) {
PSPSYC = Byte.parseByte(s);
} else {
PSPSYC = Byte.MIN_VALUE;
}
}

protected final void initPSPSYD(String s) {
if (!s.trim().isEmpty()) {
PSPSYD = Byte.parseByte(s);
} else {
PSPSYD = Byte.MIN_VALUE;
}
}

protected final void initPSPSYE(String s) {
if (!s.trim().isEmpty()) {
PSPSYE = Byte.parseByte(s);
} else {
PSPSYE = Byte.MIN_VALUE;
}
}

protected final void initPULSE1(String s) {
if (!s.trim().isEmpty()) {
PULSE1 = Short.parseShort(s);
} else {
PULSE1 = Short.MIN_VALUE;
}
}

protected final void initPULSE2(String s) {
if (!s.trim().isEmpty()) {
PULSE2 = Short.parseShort(s);
} else {
PULSE2 = Short.MIN_VALUE;
}
}

protected final void initPULSE3(String s) {
if (!s.trim().isEmpty()) {
PULSE3 = Short.parseShort(s);
} else {
PULSE3 = Short.MIN_VALUE;
}
}

protected final void initPULVAL(String s) {
if (!s.trim().isEmpty()) {
PULVAL = Double.parseDouble(s);
} else {
PULVAL = Double.NaN;
}
}

protected final void initQVER(String s) {
if (!s.trim().isEmpty()) {
QVER = s;
}
}

protected final void initREFBSC1(String s) {
if (!s.trim().isEmpty()) {
REFBSC1 = Byte.parseByte(s);
} else {
REFBSC1 = Byte.MIN_VALUE;
}
}

protected final void initREFBSC2(String s) {
if (!s.trim().isEmpty()) {
REFBSC2 = Byte.parseByte(s);
} else {
REFBSC2 = Byte.MIN_VALUE;
}
}

protected final void initREFBSC3(String s) {
if (!s.trim().isEmpty()) {
REFBSC3 = Byte.parseByte(s);
} else {
REFBSC3 = Byte.MIN_VALUE;
}
}

protected final void initRELHITE(String s) {
if (!s.trim().isEmpty()) {
RELHITE = Byte.parseByte(s);
} else {
RELHITE = Byte.MIN_VALUE;
}
}

protected final void initRELWAIT(String s) {
if (!s.trim().isEmpty()) {
RELWAIT = Byte.parseByte(s);
} else {
RELWAIT = Byte.MIN_VALUE;
}
}

protected final void initRESNHI(String s) {
if (!s.trim().isEmpty()) {
RESNHI = Byte.parseByte(s);
} else {
RESNHI = Byte.MIN_VALUE;
}
}

protected final void initRESNWT(String s) {
if (!s.trim().isEmpty()) {
RESNWT = Byte.parseByte(s);
} else {
RESNWT = Byte.MIN_VALUE;
}
}

protected final void initRESPBPS(String s) {
if (!s.trim().isEmpty()) {
RESPBPS = Byte.parseByte(s);
} else {
RESPBPS = Byte.MIN_VALUE;
}
}

protected final void initRESPHTS(String s) {
if (!s.trim().isEmpty()) {
RESPHTS = Byte.parseByte(s);
} else {
RESPHTS = Byte.MIN_VALUE;
}
}

protected final void initRESPWH(String s) {
if (!s.trim().isEmpty()) {
RESPWH = Byte.parseByte(s);
} else {
RESPWH = Byte.MIN_VALUE;
}
}

protected final void initRESPWTS(String s) {
if (!s.trim().isEmpty()) {
RESPWTS = Byte.parseByte(s);
} else {
RESPWTS = Byte.MIN_VALUE;
}
}

protected final void initRETAINEDDB_04(String s) {
if (!s.trim().isEmpty()) {
RETAINEDDB_04 = Double.parseDouble(s);
} else {
RETAINEDDB_04 = Double.NaN;
}
}

protected final void initRETAINEDDB_SPA(String s) {
if (!s.trim().isEmpty()) {
RETAINEDDB_SPA = Double.parseDouble(s);
} else {
RETAINEDDB_SPA = Double.NaN;
}
}

protected final void initRETAINEDDC_04(String s) {
if (!s.trim().isEmpty()) {
RETAINEDDC_04 = Double.parseDouble(s);
} else {
RETAINEDDC_04 = Double.NaN;
}
}

protected final void initRETAINEDDC_SPA(String s) {
if (!s.trim().isEmpty()) {
RETAINEDDC_SPA = Double.parseDouble(s);
} else {
RETAINEDDC_SPA = Double.NaN;
}
}

protected final void initRFACCOM(String s) {
if (!s.trim().isEmpty()) {
RFACCOM = Byte.parseByte(s);
} else {
RFACCOM = Byte.MIN_VALUE;
}
}

protected final void initRFACTIV(String s) {
if (!s.trim().isEmpty()) {
RFACTIV = Byte.parseByte(s);
} else {
RFACTIV = Byte.MIN_VALUE;
}
}

protected final void initRFARRAN(String s) {
if (!s.trim().isEmpty()) {
RFARRAN = Byte.parseByte(s);
} else {
RFARRAN = Byte.MIN_VALUE;
}
}

protected final void initRFATTIT(String s) {
if (!s.trim().isEmpty()) {
RFATTIT = Byte.parseByte(s);
} else {
RFATTIT = Byte.MIN_VALUE;
}
}

protected final void initRFBUILD(String s) {
if (!s.trim().isEmpty()) {
RFBUILD = Byte.parseByte(s);
} else {
RFBUILD = Byte.MIN_VALUE;
}
}

protected final void initRFCHARG(String s) {
if (!s.trim().isEmpty()) {
RFCHARG = Byte.parseByte(s);
} else {
RFCHARG = Byte.MIN_VALUE;
}
}

protected final void initRFCLOSE(String s) {
if (!s.trim().isEmpty()) {
RFCLOSE = Byte.parseByte(s);
} else {
RFCLOSE = Byte.MIN_VALUE;
}
}

protected final void initRFCOMPA(String s) {
if (!s.trim().isEmpty()) {
RFCOMPA = Byte.parseByte(s);
} else {
RFCOMPA = Byte.MIN_VALUE;
}
}

protected final void initRFCONFI(String s) {
if (!s.trim().isEmpty()) {
RFCONFI = Byte.parseByte(s);
} else {
RFCONFI = Byte.MIN_VALUE;
}
}

protected final void initRFDECIS(String s) {
if (!s.trim().isEmpty()) {
RFDECIS = Byte.parseByte(s);
} else {
RFDECIS = Byte.MIN_VALUE;
}
}

protected final void initRFDEMAN(String s) {
if (!s.trim().isEmpty()) {
RFDEMAN = Byte.parseByte(s);
} else {
RFDEMAN = Byte.MIN_VALUE;
}
}

protected final void initRFDEVEL(String s) {
if (!s.trim().isEmpty()) {
RFDEVEL = Byte.parseByte(s);
} else {
RFDEVEL = Byte.MIN_VALUE;
}
}

protected final void initRFDIFF(String s) {
if (!s.trim().isEmpty()) {
RFDIFF = Byte.parseByte(s);
} else {
RFDIFF = Byte.MIN_VALUE;
}
}

protected final void initRFDISAG(String s) {
if (!s.trim().isEmpty()) {
RFDISAG = Byte.parseByte(s);
} else {
RFDISAG = Byte.MIN_VALUE;
}
}

protected final void initRFDISAP(String s) {
if (!s.trim().isEmpty()) {
RFDISAP = Byte.parseByte(s);
} else {
RFDISAP = Byte.MIN_VALUE;
}
}

protected final void initRFDONE(String s) {
if (!s.trim().isEmpty()) {
RFDONE = Byte.parseByte(s);
} else {
RFDONE = Byte.MIN_VALUE;
}
}

protected final void initRFEXPER(String s) {
if (!s.trim().isEmpty()) {
RFEXPER = Byte.parseByte(s);
} else {
RFEXPER = Byte.MIN_VALUE;
}
}

protected final void initRFFITIN(String s) {
if (!s.trim().isEmpty()) {
RFFITIN = Byte.parseByte(s);
} else {
RFFITIN = Byte.MIN_VALUE;
}
}

protected final void initRFFRIEN(String s) {
if (!s.trim().isEmpty()) {
RFFRIEN = Byte.parseByte(s);
} else {
RFFRIEN = Byte.MIN_VALUE;
}
}

protected final void initRFGOALS(String s) {
if (!s.trim().isEmpty()) {
RFGOALS = Byte.parseByte(s);
} else {
RFGOALS = Byte.MIN_VALUE;
}
}

protected final void initRFHORIZ(String s) {
if (!s.trim().isEmpty()) {
RFHORIZ = Byte.parseByte(s);
} else {
RFHORIZ = Byte.MIN_VALUE;
}
}

protected final void initRFIMPRO(String s) {
if (!s.trim().isEmpty()) {
RFIMPRO = Byte.parseByte(s);
} else {
RFIMPRO = Byte.MIN_VALUE;
}
}

protected final void initRFINFLU(String s) {
if (!s.trim().isEmpty()) {
RFINFLU = Byte.parseByte(s);
} else {
RFINFLU = Byte.MIN_VALUE;
}
}

protected final void initRFJUDGE(String s) {
if (!s.trim().isEmpty()) {
RFJUDGE = Byte.parseByte(s);
} else {
RFJUDGE = Byte.MIN_VALUE;
}
}

protected final void initRFLEARN(String s) {
if (!s.trim().isEmpty()) {
RFLEARN = Byte.parseByte(s);
} else {
RFLEARN = Byte.MIN_VALUE;
}
}

protected final void initRFLONEL(String s) {
if (!s.trim().isEmpty()) {
RFLONEL = Byte.parseByte(s);
} else {
RFLONEL = Byte.MIN_VALUE;
}
}

protected final void initRFLOVIN(String s) {
if (!s.trim().isEmpty()) {
RFLOVIN = Byte.parseByte(s);
} else {
RFLOVIN = Byte.MIN_VALUE;
}
}

protected final void initRFMANAG(String s) {
if (!s.trim().isEmpty()) {
RFMANAG = Byte.parseByte(s);
} else {
RFMANAG = Byte.MIN_VALUE;
}
}

protected final void initRFMORE(String s) {
if (!s.trim().isEmpty()) {
RFMORE = Byte.parseByte(s);
} else {
RFMORE = Byte.MIN_VALUE;
}
}

protected final void initRFNIMPR(String s) {
if (!s.trim().isEmpty()) {
RFNIMPR = Byte.parseByte(s);
} else {
RFNIMPR = Byte.MIN_VALUE;
}
}

protected final void initRFONEDA(String s) {
if (!s.trim().isEmpty()) {
RFONEDA = Byte.parseByte(s);
} else {
RFONEDA = Byte.MIN_VALUE;
}
}

protected final void initRFOVERW(String s) {
if (!s.trim().isEmpty()) {
RFOVERW = Byte.parseByte(s);
} else {
RFOVERW = Byte.MIN_VALUE;
}
}

protected final void initRFPERS(String s) {
if (!s.trim().isEmpty()) {
RFPERS = Byte.parseByte(s);
} else {
RFPERS = Byte.MIN_VALUE;
}
}

protected final void initRFPLANS(String s) {
if (!s.trim().isEmpty()) {
RFPLANS = Byte.parseByte(s);
} else {
RFPLANS = Byte.MIN_VALUE;
}
}

protected final void initRFPOSIT(String s) {
if (!s.trim().isEmpty()) {
RFPOSIT = Byte.parseByte(s);
} else {
RFPOSIT = Byte.MIN_VALUE;
}
}

protected final void initRFSENSE(String s) {
if (!s.trim().isEmpty()) {
RFSENSE = Byte.parseByte(s);
} else {
RFSENSE = Byte.MIN_VALUE;
}
}

protected final void initRFSHARE(String s) {
if (!s.trim().isEmpty()) {
RFSHARE = Byte.parseByte(s);
} else {
RFSHARE = Byte.MIN_VALUE;
}
}

protected final void initRFSTORY(String s) {
if (!s.trim().isEmpty()) {
RFSTORY = Byte.parseByte(s);
} else {
RFSTORY = Byte.MIN_VALUE;
}
}

protected final void initRFTRICK(String s) {
if (!s.trim().isEmpty()) {
RFTRICK = Byte.parseByte(s);
} else {
RFTRICK = Byte.MIN_VALUE;
}
}

protected final void initRFTRUST(String s) {
if (!s.trim().isEmpty()) {
RFTRUST = Byte.parseByte(s);
} else {
RFTRUST = Byte.MIN_VALUE;
}
}

protected final void initRFVOICE(String s) {
if (!s.trim().isEmpty()) {
RFVOICE = Byte.parseByte(s);
} else {
RFVOICE = Byte.MIN_VALUE;
}
}

protected final void initRFWAND(String s) {
if (!s.trim().isEmpty()) {
RFWAND = Byte.parseByte(s);
} else {
RFWAND = Byte.MIN_VALUE;
}
}

protected final void initRFWARM(String s) {
if (!s.trim().isEmpty()) {
RFWARM = Byte.parseByte(s);
} else {
RFWARM = Byte.MIN_VALUE;
}
}

protected final void initRTIN(String s) {
if (!s.trim().isEmpty()) {
RTIN = Short.parseShort(s);
} else {
RTIN = Short.MIN_VALUE;
}
}

protected final void initSAMDIF1(String s) {
if (!s.trim().isEmpty()) {
SAMDIF1 = Byte.parseByte(s);
} else {
SAMDIF1 = Byte.MIN_VALUE;
}
}

protected final void initSAMDIF2(String s) {
if (!s.trim().isEmpty()) {
SAMDIF2 = Byte.parseByte(s);
} else {
SAMDIF2 = Byte.MIN_VALUE;
}
}

protected final void initSAMDIF3(String s) {
if (!s.trim().isEmpty()) {
SAMDIF3 = Byte.parseByte(s);
} else {
SAMDIF3 = Byte.MIN_VALUE;
}
}

protected final void initSAMDIF4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
SAMDIF4 = false;
} else {
SAMDIF4 = true;
}
}
}

protected final void initSAMPSTA(String s) {
if (!s.trim().isEmpty()) {
SAMPSTA = Byte.parseByte(s);
} else {
SAMPSTA = Byte.MIN_VALUE;
}
}

protected final void initSAMPTAK(String s) {
if (!s.trim().isEmpty()) {
SAMPTAK = Byte.parseByte(s);
} else {
SAMPTAK = Byte.MIN_VALUE;
}
}

protected final void initSCABNLC(String s) {
if (!s.trim().isEmpty()) {
SCABNLC = Byte.parseByte(s);
} else {
SCABNLC = Byte.MIN_VALUE;
}
}

protected final void initSCABNP(String s) {
if (!s.trim().isEmpty()) {
SCABNP = Double.parseDouble(s);
} else {
SCABNP = Double.NaN;
}
}

protected final void initSCABNSC(String s) {
if (!s.trim().isEmpty()) {
SCABNSC = Byte.parseByte(s);
} else {
SCABNSC = Byte.MIN_VALUE;
}
}

protected final void initSCABSLC(String s) {
if (!s.trim().isEmpty()) {
SCABSLC = Byte.parseByte(s);
} else {
SCABSLC = Byte.MIN_VALUE;
}
}

protected final void initSCABSP(String s) {
if (!s.trim().isEmpty()) {
SCABSP = Double.parseDouble(s);
} else {
SCABSP = Double.NaN;
}
}

protected final void initSCABSSC(String s) {
if (!s.trim().isEmpty()) {
SCABSSC = Byte.parseByte(s);
} else {
SCABSSC = Byte.MIN_VALUE;
}
}

protected final void initSCACCA(String s) {
if (!s.trim().isEmpty()) {
SCACCA = Byte.parseByte(s);
} else {
SCACCA = Byte.MIN_VALUE;
}
}

protected final void initSCACCB(String s) {
if (!s.trim().isEmpty()) {
SCACCB = Byte.parseByte(s);
} else {
SCACCB = Byte.MIN_VALUE;
}
}

protected final void initSCACCC(String s) {
if (!s.trim().isEmpty()) {
SCACCC = Byte.parseByte(s);
} else {
SCACCC = Byte.MIN_VALUE;
}
}

protected final void initSCACCD(String s) {
if (!s.trim().isEmpty()) {
SCACCD = Byte.parseByte(s);
} else {
SCACCD = Byte.MIN_VALUE;
}
}

protected final void initSCACCE(String s) {
if (!s.trim().isEmpty()) {
SCACCE = Byte.parseByte(s);
} else {
SCACCE = Byte.MIN_VALUE;
}
}

protected final void initSCACCF(String s) {
if (!s.trim().isEmpty()) {
SCACCF = Byte.parseByte(s);
} else {
SCACCF = Byte.MIN_VALUE;
}
}

protected final void initSCACCG(String s) {
if (!s.trim().isEmpty()) {
SCACCG = Byte.parseByte(s);
} else {
SCACCG = Byte.MIN_VALUE;
}
}

protected final void initSCACCH(String s) {
if (!s.trim().isEmpty()) {
SCACCH = Byte.parseByte(s);
} else {
SCACCH = Byte.MIN_VALUE;
}
}

protected final void initSCACCI(String s) {
if (!s.trim().isEmpty()) {
SCACCI = Byte.parseByte(s);
} else {
SCACCI = Byte.MIN_VALUE;
}
}

protected final void initSCACCJ(String s) {
if (!s.trim().isEmpty()) {
SCACCJ = Byte.parseByte(s);
} else {
SCACCJ = Byte.MIN_VALUE;
}
}

protected final void initSCACTA(String s) {
if (!s.trim().isEmpty()) {
SCACTA = Byte.parseByte(s);
} else {
SCACTA = Byte.MIN_VALUE;
}
}

protected final void initSCACTB(String s) {
if (!s.trim().isEmpty()) {
SCACTB = Byte.parseByte(s);
} else {
SCACTB = Byte.MIN_VALUE;
}
}

protected final void initSCACTC(String s) {
if (!s.trim().isEmpty()) {
SCACTC = Byte.parseByte(s);
} else {
SCACTC = Byte.MIN_VALUE;
}
}

protected final void initSCACTD(String s) {
if (!s.trim().isEmpty()) {
SCACTD = Byte.parseByte(s);
} else {
SCACTD = Byte.MIN_VALUE;
}
}

protected final void initSCAKO(String s) {
if (!s.trim().isEmpty()) {
SCAKO = Byte.parseByte(s);
} else {
SCAKO = Byte.MIN_VALUE;
}
}

protected final void initSCAL7A(String s) {
if (!s.trim().isEmpty()) {
SCAL7A = Byte.parseByte(s);
} else {
SCAL7A = Byte.MIN_VALUE;
}
}

protected final void initSCAL7B(String s) {
if (!s.trim().isEmpty()) {
SCAL7B = Byte.parseByte(s);
} else {
SCAL7B = Byte.MIN_VALUE;
}
}

protected final void initSCAPOPG(String s) {
if (!s.trim().isEmpty()) {
SCAPOPG = Byte.parseByte(s);
} else {
SCAPOPG = Byte.MIN_VALUE;
}
}

protected final void initSCASHER(String s) {
if (!s.trim().isEmpty()) {
SCASHER = Byte.parseByte(s);
} else {
SCASHER = Byte.MIN_VALUE;
}
}

protected final void initSCASPIR(String s) {
if (!s.trim().isEmpty()) {
SCASPIR = Byte.parseByte(s);
} else {
SCASPIR = Byte.MIN_VALUE;
}
}

protected final void initSCAWIN(String s) {
if (!s.trim().isEmpty()) {
SCAWIN = Byte.parseByte(s);
} else {
SCAWIN = Byte.MIN_VALUE;
}
}

protected final void initSCDCA(String s) {
if (!s.trim().isEmpty()) {
SCDCA = Byte.parseByte(s);
} else {
SCDCA = Byte.MIN_VALUE;
}
}

protected final void initSCDCC(String s) {
if (!s.trim().isEmpty()) {
SCDCC = Byte.parseByte(s);
} else {
SCDCC = Byte.MIN_VALUE;
}
}

protected final void initSCDCD(String s) {
if (!s.trim().isEmpty()) {
SCDCD = Byte.parseByte(s);
} else {
SCDCD = Byte.MIN_VALUE;
}
}

protected final void initSCDCE(String s) {
if (!s.trim().isEmpty()) {
SCDCE = Byte.parseByte(s);
} else {
SCDCE = Byte.MIN_VALUE;
}
}

protected final void initSCDCG(String s) {
if (!s.trim().isEmpty()) {
SCDCG = Byte.parseByte(s);
} else {
SCDCG = Byte.MIN_VALUE;
}
}

protected final void initSCDRI(String s) {
if (!s.trim().isEmpty()) {
SCDRI = Byte.parseByte(s);
} else {
SCDRI = Byte.MIN_VALUE;
}
}

protected final void initSCDRI01(String s) {
if (!s.trim().isEmpty()) {
SCDRI01 = Byte.parseByte(s);
} else {
SCDRI01 = Byte.MIN_VALUE;
}
}

protected final void initSCDRI02(String s) {
if (!s.trim().isEmpty()) {
SCDRI02 = Byte.parseByte(s);
} else {
SCDRI02 = Byte.MIN_VALUE;
}
}

protected final void initSCDRI03(String s) {
if (!s.trim().isEmpty()) {
SCDRI03 = Byte.parseByte(s);
} else {
SCDRI03 = Byte.MIN_VALUE;
}
}

protected final void initSCDRI04(String s) {
if (!s.trim().isEmpty()) {
SCDRI04 = Byte.parseByte(s);
} else {
SCDRI04 = Byte.MIN_VALUE;
}
}

protected final void initSCDRI05(String s) {
if (!s.trim().isEmpty()) {
SCDRI05 = Byte.parseByte(s);
} else {
SCDRI05 = Byte.MIN_VALUE;
}
}

protected final void initSCDRI06(String s) {
if (!s.trim().isEmpty()) {
SCDRI06 = Byte.parseByte(s);
} else {
SCDRI06 = Byte.MIN_VALUE;
}
}

protected final void initSCEMPL(String s) {
if (!s.trim().isEmpty()) {
SCEMPL = Byte.parseByte(s);
} else {
SCEMPL = Byte.MIN_VALUE;
}
}

protected final void initSCEXPA(String s) {
if (!s.trim().isEmpty()) {
SCEXPA = Byte.parseByte(s);
} else {
SCEXPA = Byte.MIN_VALUE;
}
}

protected final void initSCEXPB(String s) {
if (!s.trim().isEmpty()) {
SCEXPB = Byte.parseByte(s);
} else {
SCEXPB = Byte.MIN_VALUE;
}
}

protected final void initSCEXPC(String s) {
if (!s.trim().isEmpty()) {
SCEXPC = Byte.parseByte(s);
} else {
SCEXPC = Byte.MIN_VALUE;
}
}

protected final void initSCEXPD(String s) {
if (!s.trim().isEmpty()) {
SCEXPD = Byte.parseByte(s);
} else {
SCEXPD = Byte.MIN_VALUE;
}
}

protected final void initSCEXPE(String s) {
if (!s.trim().isEmpty()) {
SCEXPE = Byte.parseByte(s);
} else {
SCEXPE = Byte.MIN_VALUE;
}
}

protected final void initSCEXPF(String s) {
if (!s.trim().isEmpty()) {
SCEXPF = Byte.parseByte(s);
} else {
SCEXPF = Byte.MIN_VALUE;
}
}

protected final void initSCEXPG(String s) {
if (!s.trim().isEmpty()) {
SCEXPG = Byte.parseByte(s);
} else {
SCEXPG = Byte.MIN_VALUE;
}
}

protected final void initSCEXPH(String s) {
if (!s.trim().isEmpty()) {
SCEXPH = Byte.parseByte(s);
} else {
SCEXPH = Byte.MIN_VALUE;
}
}

protected final void initSCEXPI(String s) {
if (!s.trim().isEmpty()) {
SCEXPI = Byte.parseByte(s);
} else {
SCEXPI = Byte.MIN_VALUE;
}
}

protected final void initSCEXPJ(String s) {
if (!s.trim().isEmpty()) {
SCEXPJ = Byte.parseByte(s);
} else {
SCEXPJ = Byte.MIN_VALUE;
}
}

protected final void initSCEXPK(String s) {
if (!s.trim().isEmpty()) {
SCEXPK = Byte.parseByte(s);
} else {
SCEXPK = Byte.MIN_VALUE;
}
}

protected final void initSCEXPL(String s) {
if (!s.trim().isEmpty()) {
SCEXPL = Byte.parseByte(s);
} else {
SCEXPL = Byte.MIN_VALUE;
}
}

protected final void initSCFAMH(String s) {
if (!s.trim().isEmpty()) {
SCFAMH = Byte.parseByte(s);
} else {
SCFAMH = Byte.MIN_VALUE;
}
}

protected final void initSCFAMM(String s) {
if (!s.trim().isEmpty()) {
SCFAMM = Byte.parseByte(s);
} else {
SCFAMM = Byte.MIN_VALUE;
}
}

protected final void initSCFEELA(String s) {
if (!s.trim().isEmpty()) {
SCFEELA = Byte.parseByte(s);
} else {
SCFEELA = Byte.MIN_VALUE;
}
}

protected final void initSCFEELB(String s) {
if (!s.trim().isEmpty()) {
SCFEELB = Byte.parseByte(s);
} else {
SCFEELB = Byte.MIN_VALUE;
}
}

protected final void initSCFEELC(String s) {
if (!s.trim().isEmpty()) {
SCFEELC = Byte.parseByte(s);
} else {
SCFEELC = Byte.MIN_VALUE;
}
}

protected final void initSCFEELD(String s) {
if (!s.trim().isEmpty()) {
SCFEELD = Byte.parseByte(s);
} else {
SCFEELD = Byte.MIN_VALUE;
}
}

protected final void initSCFRDM(String s) {
if (!s.trim().isEmpty()) {
SCFRDM = Byte.parseByte(s);
} else {
SCFRDM = Byte.MIN_VALUE;
}
}

protected final void initSCLADDC(String s) {
if (!s.trim().isEmpty()) {
SCLADDC = Byte.parseByte(s);
} else {
SCLADDC = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEA(String s) {
if (!s.trim().isEmpty()) {
SCLIFEA = Byte.parseByte(s);
} else {
SCLIFEA = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEB(String s) {
if (!s.trim().isEmpty()) {
SCLIFEB = Byte.parseByte(s);
} else {
SCLIFEB = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEC(String s) {
if (!s.trim().isEmpty()) {
SCLIFEC = Byte.parseByte(s);
} else {
SCLIFEC = Byte.MIN_VALUE;
}
}

protected final void initSCLIFED(String s) {
if (!s.trim().isEmpty()) {
SCLIFED = Byte.parseByte(s);
} else {
SCLIFED = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEE(String s) {
if (!s.trim().isEmpty()) {
SCLIFEE = Byte.parseByte(s);
} else {
SCLIFEE = Byte.MIN_VALUE;
}
}

protected final void initSCMOREA(String s) {
if (!s.trim().isEmpty()) {
SCMOREA = Byte.parseByte(s);
} else {
SCMOREA = Byte.MIN_VALUE;
}
}

protected final void initSCMOREB(String s) {
if (!s.trim().isEmpty()) {
SCMOREB = Byte.parseByte(s);
} else {
SCMOREB = Byte.MIN_VALUE;
}
}

protected final void initSCMOREC(String s) {
if (!s.trim().isEmpty()) {
SCMOREC = Byte.parseByte(s);
} else {
SCMOREC = Byte.MIN_VALUE;
}
}

protected final void initSCMORED(String s) {
if (!s.trim().isEmpty()) {
SCMORED = Byte.parseByte(s);
} else {
SCMORED = Byte.MIN_VALUE;
}
}

protected final void initSCOLD(String s) {
if (!s.trim().isEmpty()) {
SCOLD = Byte.parseByte(s);
} else {
SCOLD = Byte.MIN_VALUE;
}
}

protected final void initSCORG01(String s) {
if (!s.trim().isEmpty()) {
SCORG01 = Byte.parseByte(s);
} else {
SCORG01 = Byte.MIN_VALUE;
}
}

protected final void initSCORG02(String s) {
if (!s.trim().isEmpty()) {
SCORG02 = Byte.parseByte(s);
} else {
SCORG02 = Byte.MIN_VALUE;
}
}

protected final void initSCORG03(String s) {
if (!s.trim().isEmpty()) {
SCORG03 = Byte.parseByte(s);
} else {
SCORG03 = Byte.MIN_VALUE;
}
}

protected final void initSCORG04(String s) {
if (!s.trim().isEmpty()) {
SCORG04 = Byte.parseByte(s);
} else {
SCORG04 = Byte.MIN_VALUE;
}
}

protected final void initSCORG05(String s) {
if (!s.trim().isEmpty()) {
SCORG05 = Byte.parseByte(s);
} else {
SCORG05 = Byte.MIN_VALUE;
}
}

protected final void initSCORG06(String s) {
if (!s.trim().isEmpty()) {
SCORG06 = Byte.parseByte(s);
} else {
SCORG06 = Byte.MIN_VALUE;
}
}

protected final void initSCORG07(String s) {
if (!s.trim().isEmpty()) {
SCORG07 = Byte.parseByte(s);
} else {
SCORG07 = Byte.MIN_VALUE;
}
}

protected final void initSCORG08(String s) {
if (!s.trim().isEmpty()) {
SCORG08 = Byte.parseByte(s);
} else {
SCORG08 = Byte.MIN_VALUE;
}
}

protected final void initSCORG09(String s) {
if (!s.trim().isEmpty()) {
SCORG09 = Byte.parseByte(s);
} else {
SCORG09 = Byte.MIN_VALUE;
}
}

protected final void initSCPONEG(String s) {
if (!s.trim().isEmpty()) {
SCPONEG = Byte.parseByte(s);
} else {
SCPONEG = Byte.MIN_VALUE;
}
}

protected final void initSCPT02(String s) {
if (!s.trim().isEmpty()) {
SCPT02 = Byte.parseByte(s);
} else {
SCPT02 = Byte.MIN_VALUE;
}
}

protected final void initSCPT03(String s) {
if (!s.trim().isEmpty()) {
SCPT03 = Byte.parseByte(s);
} else {
SCPT03 = Byte.MIN_VALUE;
}
}

protected final void initSCPT04(String s) {
if (!s.trim().isEmpty()) {
SCPT04 = Byte.parseByte(s);
} else {
SCPT04 = Byte.MIN_VALUE;
}
}

protected final void initSCPT05(String s) {
if (!s.trim().isEmpty()) {
SCPT05 = Byte.parseByte(s);
} else {
SCPT05 = Byte.MIN_VALUE;
}
}

protected final void initSCPT06(String s) {
if (!s.trim().isEmpty()) {
SCPT06 = Byte.parseByte(s);
} else {
SCPT06 = Byte.MIN_VALUE;
}
}

protected final void initSCPT07(String s) {
if (!s.trim().isEmpty()) {
SCPT07 = Byte.parseByte(s);
} else {
SCPT07 = Byte.MIN_VALUE;
}
}

protected final void initSCPT08(String s) {
if (!s.trim().isEmpty()) {
SCPT08 = Byte.parseByte(s);
} else {
SCPT08 = Byte.MIN_VALUE;
}
}

protected final void initSCPT09(String s) {
if (!s.trim().isEmpty()) {
SCPT09 = Byte.parseByte(s);
} else {
SCPT09 = Byte.MIN_VALUE;
}
}

protected final void initSCPTR(String s) {
if (!s.trim().isEmpty()) {
SCPTR = Byte.parseByte(s);
} else {
SCPTR = Byte.MIN_VALUE;
}
}

protected final void initSCPTRA(String s) {
if (!s.trim().isEmpty()) {
SCPTRA = Byte.parseByte(s);
} else {
SCPTRA = Byte.MIN_VALUE;
}
}

protected final void initSCPTRB(String s) {
if (!s.trim().isEmpty()) {
SCPTRB = Byte.parseByte(s);
} else {
SCPTRB = Byte.MIN_VALUE;
}
}

protected final void initSCPTRC(String s) {
if (!s.trim().isEmpty()) {
SCPTRC = Byte.parseByte(s);
} else {
SCPTRC = Byte.MIN_VALUE;
}
}

protected final void initSCPTRD(String s) {
if (!s.trim().isEmpty()) {
SCPTRD = Byte.parseByte(s);
} else {
SCPTRD = Byte.MIN_VALUE;
}
}

protected final void initSCPTRE(String s) {
if (!s.trim().isEmpty()) {
SCPTRE = Byte.parseByte(s);
} else {
SCPTRE = Byte.MIN_VALUE;
}
}

protected final void initSCPTRF(String s) {
if (!s.trim().isEmpty()) {
SCPTRF = Byte.parseByte(s);
} else {
SCPTRF = Byte.MIN_VALUE;
}
}

protected final void initSCPTRG(String s) {
if (!s.trim().isEmpty()) {
SCPTRG = Byte.parseByte(s);
} else {
SCPTRG = Byte.MIN_VALUE;
}
}

protected final void initSCRTAGE(String s) {
if (!s.trim().isEmpty()) {
SCRTAGE = Short.parseShort(s);
} else {
SCRTAGE = Short.MIN_VALUE;
}
}

protected final void initSCTOBE(String s) {
if (!s.trim().isEmpty()) {
SCTOBE = Byte.parseByte(s);
} else {
SCTOBE = Byte.MIN_VALUE;
}
}

protected final void initSCW2WGT(String s) {
if (!s.trim().isEmpty()) {
SCW2WGT = Double.parseDouble(s);
} else {
SCW2WGT = Double.NaN;
}
}

protected final void initSCWORKA(String s) {
if (!s.trim().isEmpty()) {
SCWORKA = Byte.parseByte(s);
} else {
SCWORKA = Byte.MIN_VALUE;
}
}

protected final void initSCWORKB(String s) {
if (!s.trim().isEmpty()) {
SCWORKB = Byte.parseByte(s);
} else {
SCWORKB = Byte.MIN_VALUE;
}
}

protected final void initSCWORKC(String s) {
if (!s.trim().isEmpty()) {
SCWORKC = Byte.parseByte(s);
} else {
SCWORKC = Byte.MIN_VALUE;
}
}

protected final void initSCWORKD(String s) {
if (!s.trim().isEmpty()) {
SCWORKD = Byte.parseByte(s);
} else {
SCWORKD = Byte.MIN_VALUE;
}
}

protected final void initSCWORKE(String s) {
if (!s.trim().isEmpty()) {
SCWORKE = Byte.parseByte(s);
} else {
SCWORKE = Byte.MIN_VALUE;
}
}

protected final void initSCWORKF(String s) {
if (!s.trim().isEmpty()) {
SCWORKF = Byte.parseByte(s);
} else {
SCWORKF = Byte.MIN_VALUE;
}
}

protected final void initSCWORKG(String s) {
if (!s.trim().isEmpty()) {
SCWORKG = Byte.parseByte(s);
} else {
SCWORKG = Byte.MIN_VALUE;
}
}

protected final void initSCWORKH(String s) {
if (!s.trim().isEmpty()) {
SCWORKH = Byte.parseByte(s);
} else {
SCWORKH = Byte.MIN_VALUE;
}
}

protected final void initSCWORKI(String s) {
if (!s.trim().isEmpty()) {
SCWORKI = Byte.parseByte(s);
} else {
SCWORKI = Byte.MIN_VALUE;
}
}

protected final void initSCWORKJ(String s) {
if (!s.trim().isEmpty()) {
SCWORKJ = Byte.parseByte(s);
} else {
SCWORKJ = Byte.MIN_VALUE;
}
}

protected final void initSCWORKK(String s) {
if (!s.trim().isEmpty()) {
SCWORKK = Byte.parseByte(s);
} else {
SCWORKK = Byte.MIN_VALUE;
}
}

protected final void initSCWORKL(String s) {
if (!s.trim().isEmpty()) {
SCWORKL = Byte.parseByte(s);
} else {
SCWORKL = Byte.MIN_VALUE;
}
}

protected final void initSITHGT(String s) {
if (!s.trim().isEmpty()) {
SITHGT = Double.parseDouble(s);
} else {
SITHGT = Double.NaN;
}
}

protected final void initSITHTRS(String s) {
if (!s.trim().isEmpty()) {
SITHTRS = Byte.parseByte(s);
} else {
SITHTRS = Byte.MIN_VALUE;
}
}

protected final void initSPCARA(String s) {
if (!s.trim().isEmpty()) {
SPCARA = Byte.parseByte(s);
} else {
SPCARA = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB1(String s) {
if (!s.trim().isEmpty()) {
SPTRAB1 = Byte.parseByte(s);
} else {
SPTRAB1 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB2(String s) {
if (!s.trim().isEmpty()) {
SPTRAB2 = Byte.parseByte(s);
} else {
SPTRAB2 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB3(String s) {
if (!s.trim().isEmpty()) {
SPTRAB3 = Byte.parseByte(s);
} else {
SPTRAB3 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB4(String s) {
if (!s.trim().isEmpty()) {
SPTRAB4 = Byte.parseByte(s);
} else {
SPTRAB4 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB5(String s) {
if (!s.trim().isEmpty()) {
SPTRAB5 = Byte.parseByte(s);
} else {
SPTRAB5 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB6(String s) {
if (!s.trim().isEmpty()) {
SPTRAB6 = Byte.parseByte(s);
} else {
SPTRAB6 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB7(String s) {
if (!s.trim().isEmpty()) {
SPTRAB7 = Byte.parseByte(s);
} else {
SPTRAB7 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM01(String s) {
if (!s.trim().isEmpty()) {
SPTRM01 = Byte.parseByte(s);
} else {
SPTRM01 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM02(String s) {
if (!s.trim().isEmpty()) {
SPTRM02 = Byte.parseByte(s);
} else {
SPTRM02 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM03(String s) {
if (!s.trim().isEmpty()) {
SPTRM03 = Byte.parseByte(s);
} else {
SPTRM03 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM04(String s) {
if (!s.trim().isEmpty()) {
SPTRM04 = Byte.parseByte(s);
} else {
SPTRM04 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM05(String s) {
if (!s.trim().isEmpty()) {
SPTRM05 = Byte.parseByte(s);
} else {
SPTRM05 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM06(String s) {
if (!s.trim().isEmpty()) {
SPTRM06 = Byte.parseByte(s);
} else {
SPTRM06 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
SPTRM07 = false;
} else {
SPTRM07 = true;
}
}
}

protected final void initSTPENW_04(String s) {
if (!s.trim().isEmpty()) {
STPENW_04 = Double.parseDouble(s);
} else {
STPENW_04 = Double.NaN;
}
}

protected final void initSTPENW_SPA(String s) {
if (!s.trim().isEmpty()) {
STPENW_SPA = Double.parseDouble(s);
} else {
STPENW_SPA = Double.NaN;
}
}

protected final void initSYS1(String s) {
if (!s.trim().isEmpty()) {
SYS1 = Short.parseShort(s);
} else {
SYS1 = Short.MIN_VALUE;
}
}

protected final void initSYS2(String s) {
if (!s.trim().isEmpty()) {
SYS2 = Short.parseShort(s);
} else {
SYS2 = Short.MIN_VALUE;
}
}

protected final void initSYS3(String s) {
if (!s.trim().isEmpty()) {
SYS3 = Short.parseShort(s);
} else {
SYS3 = Short.MIN_VALUE;
}
}

protected final void initSYSVAL(String s) {
if (!s.trim().isEmpty()) {
SYSVAL = Double.parseDouble(s);
} else {
SYSVAL = Double.NaN;
}
}

protected final void initTECHNI1(String s) {
if (!s.trim().isEmpty()) {
TECHNI1 = Byte.parseByte(s);
} else {
TECHNI1 = Byte.MIN_VALUE;
}
}

protected final void initTECHNI2(String s) {
if (!s.trim().isEmpty()) {
TECHNI2 = Byte.parseByte(s);
} else {
TECHNI2 = Byte.MIN_VALUE;
}
}

protected final void initTECHNI3(String s) {
if (!s.trim().isEmpty()) {
TECHNI3 = Byte.parseByte(s);
} else {
TECHNI3 = Byte.MIN_VALUE;
}
}

protected final void initTOTPENW_04(String s) {
if (!s.trim().isEmpty()) {
TOTPENW_04 = Double.parseDouble(s);
} else {
TOTPENW_04 = Double.NaN;
}
}

protected final void initTOTPENW_SPA(String s) {
if (!s.trim().isEmpty()) {
TOTPENW_SPA = Double.parseDouble(s);
} else {
TOTPENW_SPA = Double.NaN;
}
}

protected final void initTOTPSC(String s) {
if (!s.trim().isEmpty()) {
TOTPSC = Byte.parseByte(s);
} else {
TOTPSC = Byte.MIN_VALUE;
}
}

protected final void initTRIG(String s) {
if (!s.trim().isEmpty()) {
TRIG = Double.parseDouble(s);
} else {
TRIG = Double.NaN;
}
}

protected final void initVISMON(String s) {
if (!s.trim().isEmpty()) {
VISMON = Byte.parseByte(s);
} else {
VISMON = Byte.MIN_VALUE;
}
}

protected final void initVISYEAR(String s) {
if (!s.trim().isEmpty()) {
VISYEAR = Short.parseShort(s);
} else {
VISYEAR = Short.MIN_VALUE;
}
}

protected final void initW1HHOUT(String s) {
if (!s.trim().isEmpty()) {
W1HHOUT = Short.parseShort(s);
} else {
W1HHOUT = Short.MIN_VALUE;
}
}

protected final void initW1INDOUT(String s) {
if (!s.trim().isEmpty()) {
W1INDOUT = Short.parseShort(s);
} else {
W1INDOUT = Short.MIN_VALUE;
}
}

protected final void initW2HHOUT(String s) {
if (!s.trim().isEmpty()) {
W2HHOUT = Short.parseShort(s);
} else {
W2HHOUT = Short.MIN_VALUE;
}
}

protected final void initW2INDOUT(String s) {
if (!s.trim().isEmpty()) {
W2INDOUT = Byte.parseByte(s);
} else {
W2INDOUT = Byte.MIN_VALUE;
}
}

protected final void initW2NSSEC3(String s) {
if (!s.trim().isEmpty()) {
W2NSSEC3 = Byte.parseByte(s);
} else {
W2NSSEC3 = Byte.MIN_VALUE;
}
}

protected final void initW2NSSEC5(String s) {
if (!s.trim().isEmpty()) {
W2NSSEC5 = Byte.parseByte(s);
} else {
W2NSSEC5 = Byte.MIN_VALUE;
}
}

protected final void initW2NSSEC8(String s) {
if (!s.trim().isEmpty()) {
W2NSSEC8 = Byte.parseByte(s);
} else {
W2NSSEC8 = Byte.MIN_VALUE;
}
}

protected final void initW2SEC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
W2SEC = false;
} else {
W2SEC = true;
}
}
}

protected final void initW2SIC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
W2SIC = false;
} else {
W2SIC = true;
}
}
}

protected final void initW2SIC92(String s) {
if (!s.trim().isEmpty()) {
W2SIC92 = Byte.parseByte(s);
} else {
W2SIC92 = Byte.MIN_VALUE;
}
}

protected final void initW2SIC92MIS(String s) {
if (!s.trim().isEmpty()) {
W2SIC92MIS = Byte.parseByte(s);
} else {
W2SIC92MIS = Byte.MIN_VALUE;
}
}

protected final void initW2SOC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
W2SOC = false;
} else {
W2SOC = true;
}
}
}

protected final void initW2SOC2000(String s) {
if (!s.trim().isEmpty()) {
W2SOC2000 = Byte.parseByte(s);
} else {
W2SOC2000 = Byte.MIN_VALUE;
}
}

protected final void initW2SOC2000MIS(String s) {
if (!s.trim().isEmpty()) {
W2SOC2000MIS = Byte.parseByte(s);
} else {
W2SOC2000MIS = Byte.MIN_VALUE;
}
}

protected final void initW2WGT(String s) {
if (!s.trim().isEmpty()) {
W2WGT = Double.parseDouble(s);
} else {
W2WGT = Double.NaN;
}
}

protected final void initW2WTBLD(String s) {
if (!s.trim().isEmpty()) {
W2WTBLD = Double.parseDouble(s);
} else {
W2WTBLD = Double.NaN;
}
}

protected final void initW2WTNUR(String s) {
if (!s.trim().isEmpty()) {
W2WTNUR = Double.parseDouble(s);
} else {
W2WTNUR = Double.NaN;
}
}

protected final void initWAIST1(String s) {
if (!s.trim().isEmpty()) {
WAIST1 = Double.parseDouble(s);
} else {
WAIST1 = Double.NaN;
}
}

protected final void initWAIST2(String s) {
if (!s.trim().isEmpty()) {
WAIST2 = Double.parseDouble(s);
} else {
WAIST2 = Double.NaN;
}
}

protected final void initWAIST3(String s) {
if (!s.trim().isEmpty()) {
WAIST3 = Double.parseDouble(s);
} else {
WAIST3 = Double.NaN;
}
}

protected final void initWEIGHT(String s) {
if (!s.trim().isEmpty()) {
WEIGHT = Double.parseDouble(s);
} else {
WEIGHT = Double.NaN;
}
}

protected final void initWHINTRO(String s) {
if (!s.trim().isEmpty()) {
WHINTRO = Byte.parseByte(s);
} else {
WHINTRO = Byte.MIN_VALUE;
}
}

protected final void initWHOKB(String s) {
if (!s.trim().isEmpty()) {
WHOKB = Byte.parseByte(s);
} else {
WHOKB = Byte.MIN_VALUE;
}
}

protected final void initWHPNAB1(String s) {
if (!s.trim().isEmpty()) {
WHPNAB1 = Byte.parseByte(s);
} else {
WHPNAB1 = Byte.MIN_VALUE;
}
}

protected final void initWHPNAB2(String s) {
if (!s.trim().isEmpty()) {
WHPNAB2 = Byte.parseByte(s);
} else {
WHPNAB2 = Byte.MIN_VALUE;
}
}

protected final void initWHPNAB3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WHPNAB3 = false;
} else {
WHPNAB3 = true;
}
}
}

protected final void initWHVAL(String s) {
if (!s.trim().isEmpty()) {
WHVAL = Double.parseDouble(s);
} else {
WHVAL = Double.NaN;
}
}

protected final void initWIDPEN_04(String s) {
if (!s.trim().isEmpty()) {
WIDPEN_04 = Double.parseDouble(s);
} else {
WIDPEN_04 = Double.NaN;
}
}

protected final void initWIDPEN_SPA(String s) {
if (!s.trim().isEmpty()) {
WIDPEN_SPA = Double.parseDouble(s);
} else {
WIDPEN_SPA = Double.NaN;
}
}

protected final void initWJREL(String s) {
if (!s.trim().isEmpty()) {
WJREL = Byte.parseByte(s);
} else {
WJREL = Byte.MIN_VALUE;
}
}

protected final void initWP1Q(String s) {
if (!s.trim().isEmpty()) {
WP1Q = Integer.parseInt(s);
} else {
WP1Q = Integer.MIN_VALUE;
}
}

protected final void initWP1SQ(String s) {
if (!s.trim().isEmpty()) {
WP1SQ = Integer.parseInt(s);
} else {
WP1SQ = Integer.MIN_VALUE;
}
}

protected final void initWP2Q(String s) {
if (!s.trim().isEmpty()) {
WP2Q = Integer.parseInt(s);
} else {
WP2Q = Integer.MIN_VALUE;
}
}

protected final void initWP2SQ(String s) {
if (!s.trim().isEmpty()) {
WP2SQ = Integer.parseInt(s);
} else {
WP2SQ = Integer.MIN_VALUE;
}
}

protected final void initWP3Q(String s) {
if (!s.trim().isEmpty()) {
WP3Q = Integer.parseInt(s);
} else {
WP3Q = Integer.MIN_VALUE;
}
}

protected final void initWP3SQ(String s) {
if (!s.trim().isEmpty()) {
WP3SQ = Integer.parseInt(s);
} else {
WP3SQ = Integer.MIN_VALUE;
}
}

protected final void initWPAC2(String s) {
if (!s.trim().isEmpty()) {
WPAC2 = Integer.parseInt(s);
} else {
WPAC2 = Integer.MIN_VALUE;
}
}

protected final void initWPAC3(String s) {
if (!s.trim().isEmpty()) {
WPAC3 = Short.parseShort(s);
} else {
WPAC3 = Short.MIN_VALUE;
}
}

protected final void initWPAC4(String s) {
if (!s.trim().isEmpty()) {
WPAC4 = Integer.parseInt(s);
} else {
WPAC4 = Integer.MIN_VALUE;
}
}

protected final void initWPAC5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAC5 = false;
} else {
WPAC5 = true;
}
}
}

protected final void initWPACAT(String s) {
if (!s.trim().isEmpty()) {
WPACAT = Short.parseShort(s);
} else {
WPACAT = Short.MIN_VALUE;
}
}

protected final void initWPACAT2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACAT2 = false;
} else {
WPACAT2 = true;
}
}
}

protected final void initWPACAT3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACAT3 = false;
} else {
WPACAT3 = true;
}
}
}

protected final void initWPACAT4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPACAT4 = false;
} else {
WPACAT4 = true;
}
}
}

protected final void initWPACAT5(String s) {
if (!s.trim().isEmpty()) {
WPACAT5 = Short.parseShort(s);
} else {
WPACAT5 = Short.MIN_VALUE;
}
}

protected final void initWPACAT6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACAT6 = false;
} else {
WPACAT6 = true;
}
}
}

protected final void initWPACHG(String s) {
if (!s.trim().isEmpty()) {
WPACHG = Byte.parseByte(s);
} else {
WPACHG = Byte.MIN_VALUE;
}
}

protected final void initWPACOA2(String s) {
if (!s.trim().isEmpty()) {
WPACOA2 = Byte.parseByte(s);
} else {
WPACOA2 = Byte.MIN_VALUE;
}
}

protected final void initWPACOA3(String s) {
if (!s.trim().isEmpty()) {
WPACOA3 = Byte.parseByte(s);
} else {
WPACOA3 = Byte.MIN_VALUE;
}
}

protected final void initWPACOA4(String s) {
if (!s.trim().isEmpty()) {
WPACOA4 = Byte.parseByte(s);
} else {
WPACOA4 = Byte.MIN_VALUE;
}
}

protected final void initWPACOA5(String s) {
if (!s.trim().isEmpty()) {
WPACOA5 = Byte.parseByte(s);
} else {
WPACOA5 = Byte.MIN_VALUE;
}
}

protected final void initWPACOA6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACOA6 = false;
} else {
WPACOA6 = true;
}
}
}

protected final void initWPACOB2(String s) {
if (!s.trim().isEmpty()) {
WPACOB2 = Short.parseShort(s);
} else {
WPACOB2 = Short.MIN_VALUE;
}
}

protected final void initWPACOB3(String s) {
if (!s.trim().isEmpty()) {
WPACOB3 = Short.parseShort(s);
} else {
WPACOB3 = Short.MIN_VALUE;
}
}

protected final void initWPACOB4(String s) {
if (!s.trim().isEmpty()) {
WPACOB4 = Short.parseShort(s);
} else {
WPACOB4 = Short.MIN_VALUE;
}
}

protected final void initWPACOB5(String s) {
if (!s.trim().isEmpty()) {
WPACOB5 = Short.parseShort(s);
} else {
WPACOB5 = Short.MIN_VALUE;
}
}

protected final void initWPACOB6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACOB6 = false;
} else {
WPACOB6 = true;
}
}
}

protected final void initWPACOC2(String s) {
if (!s.trim().isEmpty()) {
WPACOC2 = Byte.parseByte(s);
} else {
WPACOC2 = Byte.MIN_VALUE;
}
}

protected final void initWPACOC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACOC3 = false;
} else {
WPACOC3 = true;
}
}
}

protected final void initWPACOC4(String s) {
if (!s.trim().isEmpty()) {
WPACOC4 = Byte.parseByte(s);
} else {
WPACOC4 = Byte.MIN_VALUE;
}
}

protected final void initWPACOC5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACOC5 = false;
} else {
WPACOC5 = true;
}
}
}

protected final void initWPACOC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACOC6 = false;
} else {
WPACOC6 = true;
}
}
}

protected final void initWPACON2(String s) {
if (!s.trim().isEmpty()) {
WPACON2 = Byte.parseByte(s);
} else {
WPACON2 = Byte.MIN_VALUE;
}
}

protected final void initWPACON3(String s) {
if (!s.trim().isEmpty()) {
WPACON3 = Byte.parseByte(s);
} else {
WPACON3 = Byte.MIN_VALUE;
}
}

protected final void initWPACON4(String s) {
if (!s.trim().isEmpty()) {
WPACON4 = Byte.parseByte(s);
} else {
WPACON4 = Byte.MIN_VALUE;
}
}

protected final void initWPACON5(String s) {
if (!s.trim().isEmpty()) {
WPACON5 = Byte.parseByte(s);
} else {
WPACON5 = Byte.MIN_VALUE;
}
}

protected final void initWPACON6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACON6 = false;
} else {
WPACON6 = true;
}
}
}

protected final void initWPACT1(String s) {
if (!s.trim().isEmpty()) {
WPACT1 = Byte.parseByte(s);
} else {
WPACT1 = Byte.MIN_VALUE;
}
}

protected final void initWPACT2(String s) {
if (!s.trim().isEmpty()) {
WPACT2 = Byte.parseByte(s);
} else {
WPACT2 = Byte.MIN_VALUE;
}
}

protected final void initWPACT3(String s) {
if (!s.trim().isEmpty()) {
WPACT3 = Byte.parseByte(s);
} else {
WPACT3 = Byte.MIN_VALUE;
}
}

protected final void initWPACT4(String s) {
if (!s.trim().isEmpty()) {
WPACT4 = Byte.parseByte(s);
} else {
WPACT4 = Byte.MIN_VALUE;
}
}

protected final void initWPACT5(String s) {
if (!s.trim().isEmpty()) {
WPACT5 = Byte.parseByte(s);
} else {
WPACT5 = Byte.MIN_VALUE;
}
}

protected final void initWPACT6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACT6 = false;
} else {
WPACT6 = true;
}
}
}

protected final void initWPADY2(String s) {
if (!s.trim().isEmpty()) {
WPADY2 = Byte.parseByte(s);
} else {
WPADY2 = Byte.MIN_VALUE;
}
}

protected final void initWPADY3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPADY3 = false;
} else {
WPADY3 = true;
}
}
}

protected final void initWPADY4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPADY4 = false;
} else {
WPADY4 = true;
}
}
}

protected final void initWPADY5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPADY5 = false;
} else {
WPADY5 = true;
}
}
}

protected final void initWPADY6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPADY6 = false;
} else {
WPADY6 = true;
}
}
}

protected final void initWPAECP(String s) {
if (!s.trim().isEmpty()) {
WPAECP = Short.parseShort(s);
} else {
WPAECP = Short.MIN_VALUE;
}
}

protected final void initWPAECP2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAECP2 = false;
} else {
WPAECP2 = true;
}
}
}

protected final void initWPAECP3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAECP3 = false;
} else {
WPAECP3 = true;
}
}
}

protected final void initWPAECP4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAECP4 = false;
} else {
WPAECP4 = true;
}
}
}

protected final void initWPAECP5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAECP5 = false;
} else {
WPAECP5 = true;
}
}
}

protected final void initWPAM2AE(String s) {
if (!s.trim().isEmpty()) {
WPAM2AE = Byte.parseByte(s);
} else {
WPAM2AE = Byte.MIN_VALUE;
}
}

protected final void initWPAM2AL(String s) {
if (!s.trim().isEmpty()) {
WPAM2AL = Integer.parseInt(s);
} else {
WPAM2AL = Integer.MIN_VALUE;
}
}

protected final void initWPAM2AR(String s) {
if (!s.trim().isEmpty()) {
WPAM2AR = Byte.parseByte(s);
} else {
WPAM2AR = Byte.MIN_VALUE;
}
}

protected final void initWPAM2AU(String s) {
if (!s.trim().isEmpty()) {
WPAM2AU = Integer.parseInt(s);
} else {
WPAM2AU = Integer.MIN_VALUE;
}
}

protected final void initWPAM2TE(String s) {
if (!s.trim().isEmpty()) {
WPAM2TE = Byte.parseByte(s);
} else {
WPAM2TE = Byte.MIN_VALUE;
}
}

protected final void initWPAM2TL(String s) {
if (!s.trim().isEmpty()) {
WPAM2TL = Integer.parseInt(s);
} else {
WPAM2TL = Integer.MIN_VALUE;
}
}

protected final void initWPAM2TR(String s) {
if (!s.trim().isEmpty()) {
WPAM2TR = Byte.parseByte(s);
} else {
WPAM2TR = Byte.MIN_VALUE;
}
}

protected final void initWPAM2TU(String s) {
if (!s.trim().isEmpty()) {
WPAM2TU = Integer.parseInt(s);
} else {
WPAM2TU = Integer.MIN_VALUE;
}
}

protected final void initWPAM3AE(String s) {
if (!s.trim().isEmpty()) {
WPAM3AE = Byte.parseByte(s);
} else {
WPAM3AE = Byte.MIN_VALUE;
}
}

protected final void initWPAM3AL(String s) {
if (!s.trim().isEmpty()) {
WPAM3AL = Integer.parseInt(s);
} else {
WPAM3AL = Integer.MIN_VALUE;
}
}

protected final void initWPAM3AR(String s) {
if (!s.trim().isEmpty()) {
WPAM3AR = Byte.parseByte(s);
} else {
WPAM3AR = Byte.MIN_VALUE;
}
}

protected final void initWPAM3AU(String s) {
if (!s.trim().isEmpty()) {
WPAM3AU = Integer.parseInt(s);
} else {
WPAM3AU = Integer.MIN_VALUE;
}
}

protected final void initWPAM3TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAM3TE = false;
} else {
WPAM3TE = true;
}
}
}

protected final void initWPAM3TL(String s) {
if (!s.trim().isEmpty()) {
WPAM3TL = Short.parseShort(s);
} else {
WPAM3TL = Short.MIN_VALUE;
}
}

protected final void initWPAM3TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAM3TR = false;
} else {
WPAM3TR = true;
}
}
}

protected final void initWPAM3TU(String s) {
if (!s.trim().isEmpty()) {
WPAM3TU = Integer.parseInt(s);
} else {
WPAM3TU = Integer.MIN_VALUE;
}
}

protected final void initWPAM4AE(String s) {
if (!s.trim().isEmpty()) {
WPAM4AE = Byte.parseByte(s);
} else {
WPAM4AE = Byte.MIN_VALUE;
}
}

protected final void initWPAM4AL(String s) {
if (!s.trim().isEmpty()) {
WPAM4AL = Integer.parseInt(s);
} else {
WPAM4AL = Integer.MIN_VALUE;
}
}

protected final void initWPAM4AR(String s) {
if (!s.trim().isEmpty()) {
WPAM4AR = Byte.parseByte(s);
} else {
WPAM4AR = Byte.MIN_VALUE;
}
}

protected final void initWPAM4AU(String s) {
if (!s.trim().isEmpty()) {
WPAM4AU = Integer.parseInt(s);
} else {
WPAM4AU = Integer.MIN_VALUE;
}
}

protected final void initWPAM4TE(String s) {
if (!s.trim().isEmpty()) {
WPAM4TE = Byte.parseByte(s);
} else {
WPAM4TE = Byte.MIN_VALUE;
}
}

protected final void initWPAM4TL(String s) {
if (!s.trim().isEmpty()) {
WPAM4TL = Short.parseShort(s);
} else {
WPAM4TL = Short.MIN_VALUE;
}
}

protected final void initWPAM4TR(String s) {
if (!s.trim().isEmpty()) {
WPAM4TR = Byte.parseByte(s);
} else {
WPAM4TR = Byte.MIN_VALUE;
}
}

protected final void initWPAM4TU(String s) {
if (!s.trim().isEmpty()) {
WPAM4TU = Short.parseShort(s);
} else {
WPAM4TU = Short.MIN_VALUE;
}
}

protected final void initWPAM5AE(String s) {
if (!s.trim().isEmpty()) {
WPAM5AE = Byte.parseByte(s);
} else {
WPAM5AE = Byte.MIN_VALUE;
}
}

protected final void initWPAM5AL(String s) {
if (!s.trim().isEmpty()) {
WPAM5AL = Short.parseShort(s);
} else {
WPAM5AL = Short.MIN_VALUE;
}
}

protected final void initWPAM5AR(String s) {
if (!s.trim().isEmpty()) {
WPAM5AR = Byte.parseByte(s);
} else {
WPAM5AR = Byte.MIN_VALUE;
}
}

protected final void initWPAM5AU(String s) {
if (!s.trim().isEmpty()) {
WPAM5AU = Integer.parseInt(s);
} else {
WPAM5AU = Integer.MIN_VALUE;
}
}

protected final void initWPAM5TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAM5TE = false;
} else {
WPAM5TE = true;
}
}
}

protected final void initWPAM5TL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAM5TL = false;
} else {
WPAM5TL = true;
}
}
}

protected final void initWPAM5TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAM5TR = false;
} else {
WPAM5TR = true;
}
}
}

protected final void initWPAM5TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAM5TU = false;
} else {
WPAM5TU = true;
}
}
}

protected final void initWPAMAE(String s) {
if (!s.trim().isEmpty()) {
WPAMAE = Byte.parseByte(s);
} else {
WPAMAE = Byte.MIN_VALUE;
}
}

protected final void initWPAMAL(String s) {
if (!s.trim().isEmpty()) {
WPAMAL = Integer.parseInt(s);
} else {
WPAMAL = Integer.MIN_VALUE;
}
}

protected final void initWPAMAR(String s) {
if (!s.trim().isEmpty()) {
WPAMAR = Byte.parseByte(s);
} else {
WPAMAR = Byte.MIN_VALUE;
}
}

protected final void initWPAMAU(String s) {
if (!s.trim().isEmpty()) {
WPAMAU = Integer.parseInt(s);
} else {
WPAMAU = Integer.MIN_VALUE;
}
}

protected final void initWPAMEC2(String s) {
if (!s.trim().isEmpty()) {
WPAMEC2 = Short.parseShort(s);
} else {
WPAMEC2 = Short.MIN_VALUE;
}
}

protected final void initWPAMEC3(String s) {
if (!s.trim().isEmpty()) {
WPAMEC3 = Short.parseShort(s);
} else {
WPAMEC3 = Short.MIN_VALUE;
}
}

protected final void initWPAMEC4(String s) {
if (!s.trim().isEmpty()) {
WPAMEC4 = Short.parseShort(s);
} else {
WPAMEC4 = Short.MIN_VALUE;
}
}

protected final void initWPAMEC5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAMEC5 = false;
} else {
WPAMEC5 = true;
}
}
}

protected final void initWPAMOU(String s) {
if (!s.trim().isEmpty()) {
WPAMOU = Integer.parseInt(s);
} else {
WPAMOU = Integer.MIN_VALUE;
}
}

protected final void initWPAMOU2(String s) {
if (!s.trim().isEmpty()) {
WPAMOU2 = Integer.parseInt(s);
} else {
WPAMOU2 = Integer.MIN_VALUE;
}
}

protected final void initWPAMOU3(String s) {
if (!s.trim().isEmpty()) {
WPAMOU3 = Integer.parseInt(s);
} else {
WPAMOU3 = Integer.MIN_VALUE;
}
}

protected final void initWPAMOU4(String s) {
if (!s.trim().isEmpty()) {
WPAMOU4 = Integer.parseInt(s);
} else {
WPAMOU4 = Integer.MIN_VALUE;
}
}

protected final void initWPAMOU5(String s) {
if (!s.trim().isEmpty()) {
WPAMOU5 = Integer.parseInt(s);
} else {
WPAMOU5 = Integer.MIN_VALUE;
}
}

protected final void initWPAMTE(String s) {
if (!s.trim().isEmpty()) {
WPAMTE = Byte.parseByte(s);
} else {
WPAMTE = Byte.MIN_VALUE;
}
}

protected final void initWPAMTL(String s) {
if (!s.trim().isEmpty()) {
WPAMTL = Integer.parseInt(s);
} else {
WPAMTL = Integer.MIN_VALUE;
}
}

protected final void initWPAMTR(String s) {
if (!s.trim().isEmpty()) {
WPAMTR = Byte.parseByte(s);
} else {
WPAMTR = Byte.MIN_VALUE;
}
}

protected final void initWPAMTU(String s) {
if (!s.trim().isEmpty()) {
WPAMTU = Integer.parseInt(s);
} else {
WPAMTU = Integer.MIN_VALUE;
}
}

protected final void initWPANYC(String s) {
if (!s.trim().isEmpty()) {
WPANYC = Byte.parseByte(s);
} else {
WPANYC = Byte.MIN_VALUE;
}
}

protected final void initWPANYC2(String s) {
if (!s.trim().isEmpty()) {
WPANYC2 = Byte.parseByte(s);
} else {
WPANYC2 = Byte.MIN_VALUE;
}
}

protected final void initWPANYC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPANYC3 = false;
} else {
WPANYC3 = true;
}
}
}

protected final void initWPANYC4(String s) {
if (!s.trim().isEmpty()) {
WPANYC4 = Byte.parseByte(s);
} else {
WPANYC4 = Byte.MIN_VALUE;
}
}

protected final void initWPANYC5(String s) {
if (!s.trim().isEmpty()) {
WPANYC5 = Byte.parseByte(s);
} else {
WPANYC5 = Byte.MIN_VALUE;
}
}

protected final void initWPANYC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPANYC6 = false;
} else {
WPANYC6 = true;
}
}
}

protected final void initWPANYP(String s) {
if (!s.trim().isEmpty()) {
WPANYP = Byte.parseByte(s);
} else {
WPANYP = Byte.MIN_VALUE;
}
}

protected final void initWPAOTFE(String s) {
if (!s.trim().isEmpty()) {
WPAOTFE = Byte.parseByte(s);
} else {
WPAOTFE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTFL(String s) {
if (!s.trim().isEmpty()) {
WPAOTFL = Short.parseShort(s);
} else {
WPAOTFL = Short.MIN_VALUE;
}
}

protected final void initWPAOTFR(String s) {
if (!s.trim().isEmpty()) {
WPAOTFR = Byte.parseByte(s);
} else {
WPAOTFR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTFU(String s) {
if (!s.trim().isEmpty()) {
WPAOTFU = Short.parseShort(s);
} else {
WPAOTFU = Short.MIN_VALUE;
}
}

protected final void initWPAOTME(String s) {
if (!s.trim().isEmpty()) {
WPAOTME = Byte.parseByte(s);
} else {
WPAOTME = Byte.MIN_VALUE;
}
}

protected final void initWPAOTML(String s) {
if (!s.trim().isEmpty()) {
WPAOTML = Short.parseShort(s);
} else {
WPAOTML = Short.MIN_VALUE;
}
}

protected final void initWPAOTMR(String s) {
if (!s.trim().isEmpty()) {
WPAOTMR = Byte.parseByte(s);
} else {
WPAOTMR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTMU(String s) {
if (!s.trim().isEmpty()) {
WPAOTMU = Short.parseShort(s);
} else {
WPAOTMU = Short.MIN_VALUE;
}
}

protected final void initWPAOTOE(String s) {
if (!s.trim().isEmpty()) {
WPAOTOE = Byte.parseByte(s);
} else {
WPAOTOE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTOL(String s) {
if (!s.trim().isEmpty()) {
WPAOTOL = Short.parseShort(s);
} else {
WPAOTOL = Short.MIN_VALUE;
}
}

protected final void initWPAOTOR(String s) {
if (!s.trim().isEmpty()) {
WPAOTOR = Byte.parseByte(s);
} else {
WPAOTOR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTOU(String s) {
if (!s.trim().isEmpty()) {
WPAOTOU = Short.parseShort(s);
} else {
WPAOTOU = Short.MIN_VALUE;
}
}

protected final void initWPAOTWE(String s) {
if (!s.trim().isEmpty()) {
WPAOTWE = Byte.parseByte(s);
} else {
WPAOTWE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTWL(String s) {
if (!s.trim().isEmpty()) {
WPAOTWL = Short.parseShort(s);
} else {
WPAOTWL = Short.MIN_VALUE;
}
}

protected final void initWPAOTWR(String s) {
if (!s.trim().isEmpty()) {
WPAOTWR = Byte.parseByte(s);
} else {
WPAOTWR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTWU(String s) {
if (!s.trim().isEmpty()) {
WPAOTWU = Short.parseShort(s);
} else {
WPAOTWU = Short.MIN_VALUE;
}
}

protected final void initWPAOTYE(String s) {
if (!s.trim().isEmpty()) {
WPAOTYE = Byte.parseByte(s);
} else {
WPAOTYE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTYL(String s) {
if (!s.trim().isEmpty()) {
WPAOTYL = Integer.parseInt(s);
} else {
WPAOTYL = Integer.MIN_VALUE;
}
}

protected final void initWPAOTYR(String s) {
if (!s.trim().isEmpty()) {
WPAOTYR = Byte.parseByte(s);
} else {
WPAOTYR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTYU(String s) {
if (!s.trim().isEmpty()) {
WPAOTYU = Integer.parseInt(s);
} else {
WPAOTYU = Integer.MIN_VALUE;
}
}

protected final void initWPAPF2(String s) {
if (!s.trim().isEmpty()) {
WPAPF2 = Integer.parseInt(s);
} else {
WPAPF2 = Integer.MIN_VALUE;
}
}

protected final void initWPAPF2E(String s) {
if (!s.trim().isEmpty()) {
WPAPF2E = Byte.parseByte(s);
} else {
WPAPF2E = Byte.MIN_VALUE;
}
}

protected final void initWPAPF2L(String s) {
if (!s.trim().isEmpty()) {
WPAPF2L = Integer.parseInt(s);
} else {
WPAPF2L = Integer.MIN_VALUE;
}
}

protected final void initWPAPF2R(String s) {
if (!s.trim().isEmpty()) {
WPAPF2R = Byte.parseByte(s);
} else {
WPAPF2R = Byte.MIN_VALUE;
}
}

protected final void initWPAPF2U(String s) {
if (!s.trim().isEmpty()) {
WPAPF2U = Integer.parseInt(s);
} else {
WPAPF2U = Integer.MIN_VALUE;
}
}

protected final void initWPAPF3(String s) {
if (!s.trim().isEmpty()) {
WPAPF3 = Integer.parseInt(s);
} else {
WPAPF3 = Integer.MIN_VALUE;
}
}

protected final void initWPAPF3E(String s) {
if (!s.trim().isEmpty()) {
WPAPF3E = Byte.parseByte(s);
} else {
WPAPF3E = Byte.MIN_VALUE;
}
}

protected final void initWPAPF3L(String s) {
if (!s.trim().isEmpty()) {
WPAPF3L = Integer.parseInt(s);
} else {
WPAPF3L = Integer.MIN_VALUE;
}
}

protected final void initWPAPF3R(String s) {
if (!s.trim().isEmpty()) {
WPAPF3R = Byte.parseByte(s);
} else {
WPAPF3R = Byte.MIN_VALUE;
}
}

protected final void initWPAPF3U(String s) {
if (!s.trim().isEmpty()) {
WPAPF3U = Integer.parseInt(s);
} else {
WPAPF3U = Integer.MIN_VALUE;
}
}

protected final void initWPAPF4(String s) {
if (!s.trim().isEmpty()) {
WPAPF4 = Integer.parseInt(s);
} else {
WPAPF4 = Integer.MIN_VALUE;
}
}

protected final void initWPAPF4E(String s) {
if (!s.trim().isEmpty()) {
WPAPF4E = Byte.parseByte(s);
} else {
WPAPF4E = Byte.MIN_VALUE;
}
}

protected final void initWPAPF4L(String s) {
if (!s.trim().isEmpty()) {
WPAPF4L = Integer.parseInt(s);
} else {
WPAPF4L = Integer.MIN_VALUE;
}
}

protected final void initWPAPF4R(String s) {
if (!s.trim().isEmpty()) {
WPAPF4R = Byte.parseByte(s);
} else {
WPAPF4R = Byte.MIN_VALUE;
}
}

protected final void initWPAPF4U(String s) {
if (!s.trim().isEmpty()) {
WPAPF4U = Integer.parseInt(s);
} else {
WPAPF4U = Integer.MIN_VALUE;
}
}

protected final void initWPAPF5(String s) {
if (!s.trim().isEmpty()) {
WPAPF5 = Integer.parseInt(s);
} else {
WPAPF5 = Integer.MIN_VALUE;
}
}

protected final void initWPAPF5E(String s) {
if (!s.trim().isEmpty()) {
WPAPF5E = Byte.parseByte(s);
} else {
WPAPF5E = Byte.MIN_VALUE;
}
}

protected final void initWPAPF5L(String s) {
if (!s.trim().isEmpty()) {
WPAPF5L = Integer.parseInt(s);
} else {
WPAPF5L = Integer.MIN_VALUE;
}
}

protected final void initWPAPF5R(String s) {
if (!s.trim().isEmpty()) {
WPAPF5R = Byte.parseByte(s);
} else {
WPAPF5R = Byte.MIN_VALUE;
}
}

protected final void initWPAPF5U(String s) {
if (!s.trim().isEmpty()) {
WPAPF5U = Integer.parseInt(s);
} else {
WPAPF5U = Integer.MIN_VALUE;
}
}

protected final void initWPAPF6(String s) {
if (!s.trim().isEmpty()) {
WPAPF6 = Integer.parseInt(s);
} else {
WPAPF6 = Integer.MIN_VALUE;
}
}

protected final void initWPAPF6E(String s) {
if (!s.trim().isEmpty()) {
WPAPF6E = Byte.parseByte(s);
} else {
WPAPF6E = Byte.MIN_VALUE;
}
}

protected final void initWPAPF6L(String s) {
if (!s.trim().isEmpty()) {
WPAPF6L = Short.parseShort(s);
} else {
WPAPF6L = Short.MIN_VALUE;
}
}

protected final void initWPAPF6R(String s) {
if (!s.trim().isEmpty()) {
WPAPF6R = Byte.parseByte(s);
} else {
WPAPF6R = Byte.MIN_VALUE;
}
}

protected final void initWPAPF6U(String s) {
if (!s.trim().isEmpty()) {
WPAPF6U = Integer.parseInt(s);
} else {
WPAPF6U = Integer.MIN_VALUE;
}
}

protected final void initWPAPFE(String s) {
if (!s.trim().isEmpty()) {
WPAPFE = Byte.parseByte(s);
} else {
WPAPFE = Byte.MIN_VALUE;
}
}

protected final void initWPAPFL(String s) {
if (!s.trim().isEmpty()) {
WPAPFL = Double.parseDouble(s);
} else {
WPAPFL = Double.NaN;
}
}

protected final void initWPAPFR(String s) {
if (!s.trim().isEmpty()) {
WPAPFR = Byte.parseByte(s);
} else {
WPAPFR = Byte.MIN_VALUE;
}
}

protected final void initWPAPFU(String s) {
if (!s.trim().isEmpty()) {
WPAPFU = Double.parseDouble(s);
} else {
WPAPFU = Double.NaN;
}
}

protected final void initWPASA2E(String s) {
if (!s.trim().isEmpty()) {
WPASA2E = Byte.parseByte(s);
} else {
WPASA2E = Byte.MIN_VALUE;
}
}

protected final void initWPASA2L(String s) {
if (!s.trim().isEmpty()) {
WPASA2L = Short.parseShort(s);
} else {
WPASA2L = Short.MIN_VALUE;
}
}

protected final void initWPASA2R(String s) {
if (!s.trim().isEmpty()) {
WPASA2R = Byte.parseByte(s);
} else {
WPASA2R = Byte.MIN_VALUE;
}
}

protected final void initWPASA2U(String s) {
if (!s.trim().isEmpty()) {
WPASA2U = Short.parseShort(s);
} else {
WPASA2U = Short.MIN_VALUE;
}
}

protected final void initWPASA3E(String s) {
if (!s.trim().isEmpty()) {
WPASA3E = Byte.parseByte(s);
} else {
WPASA3E = Byte.MIN_VALUE;
}
}

protected final void initWPASA3L(String s) {
if (!s.trim().isEmpty()) {
WPASA3L = Short.parseShort(s);
} else {
WPASA3L = Short.MIN_VALUE;
}
}

protected final void initWPASA3R(String s) {
if (!s.trim().isEmpty()) {
WPASA3R = Byte.parseByte(s);
} else {
WPASA3R = Byte.MIN_VALUE;
}
}

protected final void initWPASA3U(String s) {
if (!s.trim().isEmpty()) {
WPASA3U = Short.parseShort(s);
} else {
WPASA3U = Short.MIN_VALUE;
}
}

protected final void initWPASA4E(String s) {
if (!s.trim().isEmpty()) {
WPASA4E = Byte.parseByte(s);
} else {
WPASA4E = Byte.MIN_VALUE;
}
}

protected final void initWPASA4L(String s) {
if (!s.trim().isEmpty()) {
WPASA4L = Short.parseShort(s);
} else {
WPASA4L = Short.MIN_VALUE;
}
}

protected final void initWPASA4R(String s) {
if (!s.trim().isEmpty()) {
WPASA4R = Byte.parseByte(s);
} else {
WPASA4R = Byte.MIN_VALUE;
}
}

protected final void initWPASA4U(String s) {
if (!s.trim().isEmpty()) {
WPASA4U = Integer.parseInt(s);
} else {
WPASA4U = Integer.MIN_VALUE;
}
}

protected final void initWPASA5E(String s) {
if (!s.trim().isEmpty()) {
WPASA5E = Byte.parseByte(s);
} else {
WPASA5E = Byte.MIN_VALUE;
}
}

protected final void initWPASA5L(String s) {
if (!s.trim().isEmpty()) {
WPASA5L = Short.parseShort(s);
} else {
WPASA5L = Short.MIN_VALUE;
}
}

protected final void initWPASA5R(String s) {
if (!s.trim().isEmpty()) {
WPASA5R = Byte.parseByte(s);
} else {
WPASA5R = Byte.MIN_VALUE;
}
}

protected final void initWPASA5U(String s) {
if (!s.trim().isEmpty()) {
WPASA5U = Short.parseShort(s);
} else {
WPASA5U = Short.MIN_VALUE;
}
}

protected final void initWPASA6E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPASA6E = false;
} else {
WPASA6E = true;
}
}
}

protected final void initWPASA6L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPASA6L = false;
} else {
WPASA6L = true;
}
}
}

protected final void initWPASA6R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPASA6R = false;
} else {
WPASA6R = true;
}
}
}

protected final void initWPASA6U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPASA6U = false;
} else {
WPASA6U = true;
}
}
}

protected final void initWPASAL2(String s) {
if (!s.trim().isEmpty()) {
WPASAL2 = Short.parseShort(s);
} else {
WPASAL2 = Short.MIN_VALUE;
}
}

protected final void initWPASAL3(String s) {
if (!s.trim().isEmpty()) {
WPASAL3 = Short.parseShort(s);
} else {
WPASAL3 = Short.MIN_VALUE;
}
}

protected final void initWPASAL4(String s) {
if (!s.trim().isEmpty()) {
WPASAL4 = Integer.parseInt(s);
} else {
WPASAL4 = Integer.MIN_VALUE;
}
}

protected final void initWPASAL5(String s) {
if (!s.trim().isEmpty()) {
WPASAL5 = Integer.parseInt(s);
} else {
WPASAL5 = Integer.MIN_VALUE;
}
}

protected final void initWPASAL6(String s) {
if (!s.trim().isEmpty()) {
WPASAL6 = Short.parseShort(s);
} else {
WPASAL6 = Short.MIN_VALUE;
}
}

protected final void initWPASALE(String s) {
if (!s.trim().isEmpty()) {
WPASALE = Byte.parseByte(s);
} else {
WPASALE = Byte.MIN_VALUE;
}
}

protected final void initWPASALL(String s) {
if (!s.trim().isEmpty()) {
WPASALL = Double.parseDouble(s);
} else {
WPASALL = Double.NaN;
}
}

protected final void initWPASALR(String s) {
if (!s.trim().isEmpty()) {
WPASALR = Byte.parseByte(s);
} else {
WPASALR = Byte.MIN_VALUE;
}
}

protected final void initWPASALU(String s) {
if (!s.trim().isEmpty()) {
WPASALU = Double.parseDouble(s);
} else {
WPASALU = Double.NaN;
}
}

protected final void initWPASK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
WPASK = false;
} else {
WPASK = true;
}
}
}

protected final void initWPASK2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
WPASK2 = false;
} else {
WPASK2 = true;
}
}
}

protected final void initWPASKD(String s) {
if (!s.trim().isEmpty()) {
WPASKD = Byte.parseByte(s);
} else {
WPASKD = Byte.MIN_VALUE;
}
}

protected final void initWPASKE(String s) {
if (!s.trim().isEmpty()) {
WPASKE = Byte.parseByte(s);
} else {
WPASKE = Byte.MIN_VALUE;
}
}

protected final void initWPASKF(String s) {
if (!s.trim().isEmpty()) {
WPASKF = Byte.parseByte(s);
} else {
WPASKF = Byte.MIN_VALUE;
}
}

protected final void initWPAUC(String s) {
if (!s.trim().isEmpty()) {
WPAUC = Short.parseShort(s);
} else {
WPAUC = Short.MIN_VALUE;
}
}

protected final void initWPAUC2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAUC2 = false;
} else {
WPAUC2 = true;
}
}
}

protected final void initWPAUC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAUC3 = false;
} else {
WPAUC3 = true;
}
}
}

protected final void initWPAUC4(String s) {
if (!s.trim().isEmpty()) {
WPAUC4 = Short.parseShort(s);
} else {
WPAUC4 = Short.MIN_VALUE;
}
}

protected final void initWPAUC5(String s) {
if (!s.trim().isEmpty()) {
WPAUC5 = Short.parseShort(s);
} else {
WPAUC5 = Short.MIN_VALUE;
}
}

protected final void initWPAUC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAUC6 = false;
} else {
WPAUC6 = true;
}
}
}

protected final void initWPAWP(String s) {
if (!s.trim().isEmpty()) {
WPAWP = Byte.parseByte(s);
} else {
WPAWP = Byte.MIN_VALUE;
}
}

protected final void initWPBCHG1(String s) {
if (!s.trim().isEmpty()) {
WPBCHG1 = Byte.parseByte(s);
} else {
WPBCHG1 = Byte.MIN_VALUE;
}
}

protected final void initWPBCHG2(String s) {
if (!s.trim().isEmpty()) {
WPBCHG2 = Byte.parseByte(s);
} else {
WPBCHG2 = Byte.MIN_VALUE;
}
}

protected final void initWPBCHG3(String s) {
if (!s.trim().isEmpty()) {
WPBCHG3 = Byte.parseByte(s);
} else {
WPBCHG3 = Byte.MIN_VALUE;
}
}

protected final void initWPBCHG4(String s) {
if (!s.trim().isEmpty()) {
WPBCHG4 = Byte.parseByte(s);
} else {
WPBCHG4 = Byte.MIN_VALUE;
}
}

protected final void initWPBIMAE(String s) {
if (!s.trim().isEmpty()) {
WPBIMAE = Byte.parseByte(s);
} else {
WPBIMAE = Byte.MIN_VALUE;
}
}

protected final void initWPBIMAL(String s) {
if (!s.trim().isEmpty()) {
WPBIMAL = Short.parseShort(s);
} else {
WPBIMAL = Short.MIN_VALUE;
}
}

protected final void initWPBIMAR(String s) {
if (!s.trim().isEmpty()) {
WPBIMAR = Byte.parseByte(s);
} else {
WPBIMAR = Byte.MIN_VALUE;
}
}

protected final void initWPBIMAU(String s) {
if (!s.trim().isEmpty()) {
WPBIMAU = Short.parseShort(s);
} else {
WPBIMAU = Short.MIN_VALUE;
}
}

protected final void initWPBIWAE(String s) {
if (!s.trim().isEmpty()) {
WPBIWAE = Byte.parseByte(s);
} else {
WPBIWAE = Byte.MIN_VALUE;
}
}

protected final void initWPBIWAL(String s) {
if (!s.trim().isEmpty()) {
WPBIWAL = Short.parseShort(s);
} else {
WPBIWAL = Short.MIN_VALUE;
}
}

protected final void initWPBIWAR(String s) {
if (!s.trim().isEmpty()) {
WPBIWAR = Byte.parseByte(s);
} else {
WPBIWAR = Byte.MIN_VALUE;
}
}

protected final void initWPBIWAU(String s) {
if (!s.trim().isEmpty()) {
WPBIWAU = Short.parseShort(s);
} else {
WPBIWAU = Short.MIN_VALUE;
}
}

protected final void initWPBPS(String s) {
if (!s.trim().isEmpty()) {
WPBPS = Byte.parseByte(s);
} else {
WPBPS = Byte.MIN_VALUE;
}
}

protected final void initWPBTHA2(String s) {
if (!s.trim().isEmpty()) {
WPBTHA2 = Byte.parseByte(s);
} else {
WPBTHA2 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHA3(String s) {
if (!s.trim().isEmpty()) {
WPBTHA3 = Byte.parseByte(s);
} else {
WPBTHA3 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHA4(String s) {
if (!s.trim().isEmpty()) {
WPBTHA4 = Byte.parseByte(s);
} else {
WPBTHA4 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHA5(String s) {
if (!s.trim().isEmpty()) {
WPBTHA5 = Byte.parseByte(s);
} else {
WPBTHA5 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHA6(String s) {
if (!s.trim().isEmpty()) {
WPBTHA6 = Byte.parseByte(s);
} else {
WPBTHA6 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHP2(String s) {
if (!s.trim().isEmpty()) {
WPBTHP2 = Byte.parseByte(s);
} else {
WPBTHP2 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHP3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPBTHP3 = false;
} else {
WPBTHP3 = true;
}
}
}

protected final void initWPBTHP4(String s) {
if (!s.trim().isEmpty()) {
WPBTHP4 = Byte.parseByte(s);
} else {
WPBTHP4 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHP5(String s) {
if (!s.trim().isEmpty()) {
WPBTHP5 = Byte.parseByte(s);
} else {
WPBTHP5 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHP6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPBTHP6 = false;
} else {
WPBTHP6 = true;
}
}
}

protected final void initWPBUSVE(String s) {
if (!s.trim().isEmpty()) {
WPBUSVE = Byte.parseByte(s);
} else {
WPBUSVE = Byte.MIN_VALUE;
}
}

protected final void initWPBUSVL(String s) {
if (!s.trim().isEmpty()) {
WPBUSVL = Integer.parseInt(s);
} else {
WPBUSVL = Integer.MIN_VALUE;
}
}

protected final void initWPBUSVR(String s) {
if (!s.trim().isEmpty()) {
WPBUSVR = Byte.parseByte(s);
} else {
WPBUSVR = Byte.MIN_VALUE;
}
}

protected final void initWPBUSVU(String s) {
if (!s.trim().isEmpty()) {
WPBUSVU = Integer.parseInt(s);
} else {
WPBUSVU = Integer.MIN_VALUE;
}
}

protected final void initWPCAMT(String s) {
if (!s.trim().isEmpty()) {
WPCAMT = Short.parseShort(s);
} else {
WPCAMT = Short.MIN_VALUE;
}
}

protected final void initWPCAMT2(String s) {
if (!s.trim().isEmpty()) {
WPCAMT2 = Short.parseShort(s);
} else {
WPCAMT2 = Short.MIN_VALUE;
}
}

protected final void initWPCAMT3(String s) {
if (!s.trim().isEmpty()) {
WPCAMT3 = Short.parseShort(s);
} else {
WPCAMT3 = Short.MIN_VALUE;
}
}

protected final void initWPCAMT4(String s) {
if (!s.trim().isEmpty()) {
WPCAMT4 = Short.parseShort(s);
} else {
WPCAMT4 = Short.MIN_VALUE;
}
}

protected final void initWPCAMT5(String s) {
if (!s.trim().isEmpty()) {
WPCAMT5 = Short.parseShort(s);
} else {
WPCAMT5 = Short.MIN_VALUE;
}
}

protected final void initWPCB(String s) {
if (!s.trim().isEmpty()) {
WPCB = Integer.parseInt(s);
} else {
WPCB = Integer.MIN_VALUE;
}
}

protected final void initWPCB2(String s) {
if (!s.trim().isEmpty()) {
WPCB2 = Integer.parseInt(s);
} else {
WPCB2 = Integer.MIN_VALUE;
}
}

protected final void initWPCB2E(String s) {
if (!s.trim().isEmpty()) {
WPCB2E = Byte.parseByte(s);
} else {
WPCB2E = Byte.MIN_VALUE;
}
}

protected final void initWPCB2L(String s) {
if (!s.trim().isEmpty()) {
WPCB2L = Integer.parseInt(s);
} else {
WPCB2L = Integer.MIN_VALUE;
}
}

protected final void initWPCB2R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCB2R = false;
} else {
WPCB2R = true;
}
}
}

protected final void initWPCB2U(String s) {
if (!s.trim().isEmpty()) {
WPCB2U = Integer.parseInt(s);
} else {
WPCB2U = Integer.MIN_VALUE;
}
}

protected final void initWPCB3(String s) {
if (!s.trim().isEmpty()) {
WPCB3 = Integer.parseInt(s);
} else {
WPCB3 = Integer.MIN_VALUE;
}
}

protected final void initWPCB3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCB3E = false;
} else {
WPCB3E = true;
}
}
}

protected final void initWPCB3L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPCB3L = false;
} else {
WPCB3L = true;
}
}
}

protected final void initWPCB3R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCB3R = false;
} else {
WPCB3R = true;
}
}
}

protected final void initWPCB3U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPCB3U = false;
} else {
WPCB3U = true;
}
}
}

protected final void initWPCB4(String s) {
if (!s.trim().isEmpty()) {
WPCB4 = Integer.parseInt(s);
} else {
WPCB4 = Integer.MIN_VALUE;
}
}

protected final void initWPCB4E(String s) {
if (!s.trim().isEmpty()) {
WPCB4E = Byte.parseByte(s);
} else {
WPCB4E = Byte.MIN_VALUE;
}
}

protected final void initWPCB4L(String s) {
if (!s.trim().isEmpty()) {
WPCB4L = Integer.parseInt(s);
} else {
WPCB4L = Integer.MIN_VALUE;
}
}

protected final void initWPCB4R(String s) {
if (!s.trim().isEmpty()) {
WPCB4R = Byte.parseByte(s);
} else {
WPCB4R = Byte.MIN_VALUE;
}
}

protected final void initWPCB4U(String s) {
if (!s.trim().isEmpty()) {
WPCB4U = Short.parseShort(s);
} else {
WPCB4U = Short.MIN_VALUE;
}
}

protected final void initWPCB5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPCB5 = false;
} else {
WPCB5 = true;
}
}
}

protected final void initWPCB5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCB5E = false;
} else {
WPCB5E = true;
}
}
}

protected final void initWPCB5L(String s) {
if (!s.trim().isEmpty()) {
WPCB5L = Short.parseShort(s);
} else {
WPCB5L = Short.MIN_VALUE;
}
}

protected final void initWPCB5R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCB5R = false;
} else {
WPCB5R = true;
}
}
}

protected final void initWPCB5U(String s) {
if (!s.trim().isEmpty()) {
WPCB5U = Short.parseShort(s);
} else {
WPCB5U = Short.MIN_VALUE;
}
}

protected final void initWPCBE(String s) {
if (!s.trim().isEmpty()) {
WPCBE = Byte.parseByte(s);
} else {
WPCBE = Byte.MIN_VALUE;
}
}

protected final void initWPCBL(String s) {
if (!s.trim().isEmpty()) {
WPCBL = Integer.parseInt(s);
} else {
WPCBL = Integer.MIN_VALUE;
}
}

protected final void initWPCBR(String s) {
if (!s.trim().isEmpty()) {
WPCBR = Byte.parseByte(s);
} else {
WPCBR = Byte.MIN_VALUE;
}
}

protected final void initWPCBU(String s) {
if (!s.trim().isEmpty()) {
WPCBU = Integer.parseInt(s);
} else {
WPCBU = Integer.MIN_VALUE;
}
}

protected final void initWPCEMP2(String s) {
if (!s.trim().isEmpty()) {
WPCEMP2 = Byte.parseByte(s);
} else {
WPCEMP2 = Byte.MIN_VALUE;
}
}

protected final void initWPCEMP3(String s) {
if (!s.trim().isEmpty()) {
WPCEMP3 = Byte.parseByte(s);
} else {
WPCEMP3 = Byte.MIN_VALUE;
}
}

protected final void initWPCEMP4(String s) {
if (!s.trim().isEmpty()) {
WPCEMP4 = Byte.parseByte(s);
} else {
WPCEMP4 = Byte.MIN_VALUE;
}
}

protected final void initWPCEMP5(String s) {
if (!s.trim().isEmpty()) {
WPCEMP5 = Byte.parseByte(s);
} else {
WPCEMP5 = Byte.MIN_VALUE;
}
}

protected final void initWPCHDM1(String s) {
if (!s.trim().isEmpty()) {
WPCHDM1 = Byte.parseByte(s);
} else {
WPCHDM1 = Byte.MIN_VALUE;
}
}

protected final void initWPCHDM2(String s) {
if (!s.trim().isEmpty()) {
WPCHDM2 = Byte.parseByte(s);
} else {
WPCHDM2 = Byte.MIN_VALUE;
}
}

protected final void initWPCHDM3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCHDM3 = false;
} else {
WPCHDM3 = true;
}
}
}

protected final void initWPCHG1(String s) {
if (!s.trim().isEmpty()) {
WPCHG1 = Byte.parseByte(s);
} else {
WPCHG1 = Byte.MIN_VALUE;
}
}

protected final void initWPCHG2(String s) {
if (!s.trim().isEmpty()) {
WPCHG2 = Byte.parseByte(s);
} else {
WPCHG2 = Byte.MIN_VALUE;
}
}

protected final void initWPCHG3(String s) {
if (!s.trim().isEmpty()) {
WPCHG3 = Byte.parseByte(s);
} else {
WPCHG3 = Byte.MIN_VALUE;
}
}

protected final void initWPCHG4(String s) {
if (!s.trim().isEmpty()) {
WPCHG4 = Byte.parseByte(s);
} else {
WPCHG4 = Byte.MIN_VALUE;
}
}

protected final void initWPCHGA(String s) {
if (!s.trim().isEmpty()) {
WPCHGA = Byte.parseByte(s);
} else {
WPCHGA = Byte.MIN_VALUE;
}
}

protected final void initWPCHGB1(String s) {
if (!s.trim().isEmpty()) {
WPCHGB1 = Byte.parseByte(s);
} else {
WPCHGB1 = Byte.MIN_VALUE;
}
}

protected final void initWPCHGB2(String s) {
if (!s.trim().isEmpty()) {
WPCHGB2 = Byte.parseByte(s);
} else {
WPCHGB2 = Byte.MIN_VALUE;
}
}

protected final void initWPCHGB3(String s) {
if (!s.trim().isEmpty()) {
WPCHGB3 = Byte.parseByte(s);
} else {
WPCHGB3 = Byte.MIN_VALUE;
}
}

protected final void initWPCHGD1(String s) {
if (!s.trim().isEmpty()) {
WPCHGD1 = Byte.parseByte(s);
} else {
WPCHGD1 = Byte.MIN_VALUE;
}
}

protected final void initWPCHGD2(String s) {
if (!s.trim().isEmpty()) {
WPCHGD2 = Byte.parseByte(s);
} else {
WPCHGD2 = Byte.MIN_VALUE;
}
}

protected final void initWPCHGD3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCHGD3 = false;
} else {
WPCHGD3 = true;
}
}
}

protected final void initWPCHGDN(String s) {
if (!s.trim().isEmpty()) {
WPCHGDN = Byte.parseByte(s);
} else {
WPCHGDN = Byte.MIN_VALUE;
}
}

protected final void initWPCHGL1(String s) {
if (!s.trim().isEmpty()) {
WPCHGL1 = Byte.parseByte(s);
} else {
WPCHGL1 = Byte.MIN_VALUE;
}
}

protected final void initWPCHGL2(String s) {
if (!s.trim().isEmpty()) {
WPCHGL2 = Byte.parseByte(s);
} else {
WPCHGL2 = Byte.MIN_VALUE;
}
}

protected final void initWPCHGL3(String s) {
if (!s.trim().isEmpty()) {
WPCHGL3 = Byte.parseByte(s);
} else {
WPCHGL3 = Byte.MIN_VALUE;
}
}

protected final void initWPCHGL4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCHGL4 = false;
} else {
WPCHGL4 = true;
}
}
}

protected final void initWPCHGL5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCHGL5 = false;
} else {
WPCHGL5 = true;
}
}
}

protected final void initWPCHGM1(String s) {
if (!s.trim().isEmpty()) {
WPCHGM1 = Byte.parseByte(s);
} else {
WPCHGM1 = Byte.MIN_VALUE;
}
}

protected final void initWPCHGM2(String s) {
if (!s.trim().isEmpty()) {
WPCHGM2 = Byte.parseByte(s);
} else {
WPCHGM2 = Byte.MIN_VALUE;
}
}

protected final void initWPCHGM3(String s) {
if (!s.trim().isEmpty()) {
WPCHGM3 = Byte.parseByte(s);
} else {
WPCHGM3 = Byte.MIN_VALUE;
}
}

protected final void initWPCHGM4(String s) {
if (!s.trim().isEmpty()) {
WPCHGM4 = Byte.parseByte(s);
} else {
WPCHGM4 = Byte.MIN_VALUE;
}
}

protected final void initWPCHGNO(String s) {
if (!s.trim().isEmpty()) {
WPCHGNO = Byte.parseByte(s);
} else {
WPCHGNO = Byte.MIN_VALUE;
}
}

protected final void initWPCHGO(String s) {
if (!s.trim().isEmpty()) {
WPCHGO = Byte.parseByte(s);
} else {
WPCHGO = Byte.MIN_VALUE;
}
}

protected final void initWPCHL11(String s) {
if (!s.trim().isEmpty()) {
WPCHL11 = Byte.parseByte(s);
} else {
WPCHL11 = Byte.MIN_VALUE;
}
}

protected final void initWPCHL12(String s) {
if (!s.trim().isEmpty()) {
WPCHL12 = Byte.parseByte(s);
} else {
WPCHL12 = Byte.MIN_VALUE;
}
}

protected final void initWPCHL13(String s) {
if (!s.trim().isEmpty()) {
WPCHL13 = Byte.parseByte(s);
} else {
WPCHL13 = Byte.MIN_VALUE;
}
}

protected final void initWPCHL14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCHL14 = false;
} else {
WPCHL14 = true;
}
}
}

protected final void initWPCHL15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCHL15 = false;
} else {
WPCHL15 = true;
}
}
}

protected final void initWPCJB1(String s) {
if (!s.trim().isEmpty()) {
WPCJB1 = Byte.parseByte(s);
} else {
WPCJB1 = Byte.MIN_VALUE;
}
}

protected final void initWPCJB2(String s) {
if (!s.trim().isEmpty()) {
WPCJB2 = Byte.parseByte(s);
} else {
WPCJB2 = Byte.MIN_VALUE;
}
}

protected final void initWPCJB3(String s) {
if (!s.trim().isEmpty()) {
WPCJB3 = Byte.parseByte(s);
} else {
WPCJB3 = Byte.MIN_VALUE;
}
}

protected final void initWPCJB4(String s) {
if (!s.trim().isEmpty()) {
WPCJB4 = Byte.parseByte(s);
} else {
WPCJB4 = Byte.MIN_VALUE;
}
}

protected final void initWPCON(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCON = false;
} else {
WPCON = true;
}
}
}

protected final void initWPCON2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCON2 = false;
} else {
WPCON2 = true;
}
}
}

protected final void initWPCON3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCON3 = false;
} else {
WPCON3 = true;
}
}
}

protected final void initWPCON4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCON4 = false;
} else {
WPCON4 = true;
}
}
}

protected final void initWPCON5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCON5 = false;
} else {
WPCON5 = true;
}
}
}

protected final void initWPCONS(String s) {
if (!s.trim().isEmpty()) {
WPCONS = Byte.parseByte(s);
} else {
WPCONS = Byte.MIN_VALUE;
}
}

protected final void initWPCONS2(String s) {
if (!s.trim().isEmpty()) {
WPCONS2 = Byte.parseByte(s);
} else {
WPCONS2 = Byte.MIN_VALUE;
}
}

protected final void initWPCONS3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCONS3 = false;
} else {
WPCONS3 = true;
}
}
}

protected final void initWPCONS4(String s) {
if (!s.trim().isEmpty()) {
WPCONS4 = Byte.parseByte(s);
} else {
WPCONS4 = Byte.MIN_VALUE;
}
}

protected final void initWPCONS5(String s) {
if (!s.trim().isEmpty()) {
WPCONS5 = Byte.parseByte(s);
} else {
WPCONS5 = Byte.MIN_VALUE;
}
}

protected final void initWPCONS6(String s) {
if (!s.trim().isEmpty()) {
WPCONS6 = Byte.parseByte(s);
} else {
WPCONS6 = Byte.MIN_VALUE;
}
}

protected final void initWPCONY2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCONY2 = false;
} else {
WPCONY2 = true;
}
}
}

protected final void initWPCONY3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCONY3 = false;
} else {
WPCONY3 = true;
}
}
}

protected final void initWPCONY4(String s) {
if (!s.trim().isEmpty()) {
WPCONY4 = Short.parseShort(s);
} else {
WPCONY4 = Short.MIN_VALUE;
}
}

protected final void initWPCONY5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCONY5 = false;
} else {
WPCONY5 = true;
}
}
}

protected final void initWPCONY6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCONY6 = false;
} else {
WPCONY6 = true;
}
}
}

protected final void initWPCOS(String s) {
if (!s.trim().isEmpty()) {
WPCOS = Byte.parseByte(s);
} else {
WPCOS = Byte.MIN_VALUE;
}
}

protected final void initWPCOS2(String s) {
if (!s.trim().isEmpty()) {
WPCOS2 = Byte.parseByte(s);
} else {
WPCOS2 = Byte.MIN_VALUE;
}
}

protected final void initWPCOS3(String s) {
if (!s.trim().isEmpty()) {
WPCOS3 = Byte.parseByte(s);
} else {
WPCOS3 = Byte.MIN_VALUE;
}
}

protected final void initWPCOS4(String s) {
if (!s.trim().isEmpty()) {
WPCOS4 = Byte.parseByte(s);
} else {
WPCOS4 = Byte.MIN_VALUE;
}
}

protected final void initWPCOS5(String s) {
if (!s.trim().isEmpty()) {
WPCOS5 = Byte.parseByte(s);
} else {
WPCOS5 = Byte.MIN_VALUE;
}
}

protected final void initWPCOS6(String s) {
if (!s.trim().isEmpty()) {
WPCOS6 = Byte.parseByte(s);
} else {
WPCOS6 = Byte.MIN_VALUE;
}
}

protected final void initWPCPER(String s) {
if (!s.trim().isEmpty()) {
WPCPER = Byte.parseByte(s);
} else {
WPCPER = Byte.MIN_VALUE;
}
}

protected final void initWPCPER2(String s) {
if (!s.trim().isEmpty()) {
WPCPER2 = Byte.parseByte(s);
} else {
WPCPER2 = Byte.MIN_VALUE;
}
}

protected final void initWPCPER3(String s) {
if (!s.trim().isEmpty()) {
WPCPER3 = Byte.parseByte(s);
} else {
WPCPER3 = Byte.MIN_VALUE;
}
}

protected final void initWPCPER4(String s) {
if (!s.trim().isEmpty()) {
WPCPER4 = Byte.parseByte(s);
} else {
WPCPER4 = Byte.MIN_VALUE;
}
}

protected final void initWPCPER5(String s) {
if (!s.trim().isEmpty()) {
WPCPER5 = Byte.parseByte(s);
} else {
WPCPER5 = Byte.MIN_VALUE;
}
}

protected final void initWPCPS(String s) {
if (!s.trim().isEmpty()) {
WPCPS = Byte.parseByte(s);
} else {
WPCPS = Byte.MIN_VALUE;
}
}

protected final void initWPCPS2(String s) {
if (!s.trim().isEmpty()) {
WPCPS2 = Byte.parseByte(s);
} else {
WPCPS2 = Byte.MIN_VALUE;
}
}

protected final void initWPCPSC(String s) {
if (!s.trim().isEmpty()) {
WPCPSC = Byte.parseByte(s);
} else {
WPCPSC = Byte.MIN_VALUE;
}
}

protected final void initWPCPSC2(String s) {
if (!s.trim().isEmpty()) {
WPCPSC2 = Byte.parseByte(s);
} else {
WPCPSC2 = Byte.MIN_VALUE;
}
}

protected final void initWPCRAGE(String s) {
if (!s.trim().isEmpty()) {
WPCRAGE = Byte.parseByte(s);
} else {
WPCRAGE = Byte.MIN_VALUE;
}
}

protected final void initWPCRET(String s) {
if (!s.trim().isEmpty()) {
WPCRET = Byte.parseByte(s);
} else {
WPCRET = Byte.MIN_VALUE;
}
}

protected final void initWPCRETL(String s) {
if (!s.trim().isEmpty()) {
WPCRETL = Byte.parseByte(s);
} else {
WPCRETL = Byte.MIN_VALUE;
}
}

protected final void initWPCUV(String s) {
if (!s.trim().isEmpty()) {
WPCUV = Integer.parseInt(s);
} else {
WPCUV = Integer.MIN_VALUE;
}
}

protected final void initWPCUV2(String s) {
if (!s.trim().isEmpty()) {
WPCUV2 = Integer.parseInt(s);
} else {
WPCUV2 = Integer.MIN_VALUE;
}
}

protected final void initWPCUV2E(String s) {
if (!s.trim().isEmpty()) {
WPCUV2E = Byte.parseByte(s);
} else {
WPCUV2E = Byte.MIN_VALUE;
}
}

protected final void initWPCUV2L(String s) {
if (!s.trim().isEmpty()) {
WPCUV2L = Integer.parseInt(s);
} else {
WPCUV2L = Integer.MIN_VALUE;
}
}

protected final void initWPCUV2R(String s) {
if (!s.trim().isEmpty()) {
WPCUV2R = Byte.parseByte(s);
} else {
WPCUV2R = Byte.MIN_VALUE;
}
}

protected final void initWPCUV2U(String s) {
if (!s.trim().isEmpty()) {
WPCUV2U = Integer.parseInt(s);
} else {
WPCUV2U = Integer.MIN_VALUE;
}
}

protected final void initWPCUV3(String s) {
if (!s.trim().isEmpty()) {
WPCUV3 = Integer.parseInt(s);
} else {
WPCUV3 = Integer.MIN_VALUE;
}
}

protected final void initWPCUV3E(String s) {
if (!s.trim().isEmpty()) {
WPCUV3E = Byte.parseByte(s);
} else {
WPCUV3E = Byte.MIN_VALUE;
}
}

protected final void initWPCUV3L(String s) {
if (!s.trim().isEmpty()) {
WPCUV3L = Integer.parseInt(s);
} else {
WPCUV3L = Integer.MIN_VALUE;
}
}

protected final void initWPCUV3R(String s) {
if (!s.trim().isEmpty()) {
WPCUV3R = Byte.parseByte(s);
} else {
WPCUV3R = Byte.MIN_VALUE;
}
}

protected final void initWPCUV3U(String s) {
if (!s.trim().isEmpty()) {
WPCUV3U = Integer.parseInt(s);
} else {
WPCUV3U = Integer.MIN_VALUE;
}
}

protected final void initWPCUV4(String s) {
if (!s.trim().isEmpty()) {
WPCUV4 = Integer.parseInt(s);
} else {
WPCUV4 = Integer.MIN_VALUE;
}
}

protected final void initWPCUV4E(String s) {
if (!s.trim().isEmpty()) {
WPCUV4E = Byte.parseByte(s);
} else {
WPCUV4E = Byte.MIN_VALUE;
}
}

protected final void initWPCUV4L(String s) {
if (!s.trim().isEmpty()) {
WPCUV4L = Integer.parseInt(s);
} else {
WPCUV4L = Integer.MIN_VALUE;
}
}

protected final void initWPCUV4R(String s) {
if (!s.trim().isEmpty()) {
WPCUV4R = Byte.parseByte(s);
} else {
WPCUV4R = Byte.MIN_VALUE;
}
}

protected final void initWPCUV4U(String s) {
if (!s.trim().isEmpty()) {
WPCUV4U = Integer.parseInt(s);
} else {
WPCUV4U = Integer.MIN_VALUE;
}
}

protected final void initWPCUV5(String s) {
if (!s.trim().isEmpty()) {
WPCUV5 = Integer.parseInt(s);
} else {
WPCUV5 = Integer.MIN_VALUE;
}
}

protected final void initWPCUV5E(String s) {
if (!s.trim().isEmpty()) {
WPCUV5E = Byte.parseByte(s);
} else {
WPCUV5E = Byte.MIN_VALUE;
}
}

protected final void initWPCUV5L(String s) {
if (!s.trim().isEmpty()) {
WPCUV5L = Short.parseShort(s);
} else {
WPCUV5L = Short.MIN_VALUE;
}
}

protected final void initWPCUV5R(String s) {
if (!s.trim().isEmpty()) {
WPCUV5R = Byte.parseByte(s);
} else {
WPCUV5R = Byte.MIN_VALUE;
}
}

protected final void initWPCUV5U(String s) {
if (!s.trim().isEmpty()) {
WPCUV5U = Integer.parseInt(s);
} else {
WPCUV5U = Integer.MIN_VALUE;
}
}

protected final void initWPCUVE(String s) {
if (!s.trim().isEmpty()) {
WPCUVE = Byte.parseByte(s);
} else {
WPCUVE = Byte.MIN_VALUE;
}
}

protected final void initWPCUVL(String s) {
if (!s.trim().isEmpty()) {
WPCUVL = Integer.parseInt(s);
} else {
WPCUVL = Integer.MIN_VALUE;
}
}

protected final void initWPCUVR(String s) {
if (!s.trim().isEmpty()) {
WPCUVR = Byte.parseByte(s);
} else {
WPCUVR = Byte.MIN_VALUE;
}
}

protected final void initWPCUVU(String s) {
if (!s.trim().isEmpty()) {
WPCUVU = Integer.parseInt(s);
} else {
WPCUVU = Integer.MIN_VALUE;
}
}

protected final void initWPDE2(String s) {
if (!s.trim().isEmpty()) {
WPDE2 = Short.parseShort(s);
} else {
WPDE2 = Short.MIN_VALUE;
}
}

protected final void initWPDE3(String s) {
if (!s.trim().isEmpty()) {
WPDE3 = Short.parseShort(s);
} else {
WPDE3 = Short.MIN_VALUE;
}
}

protected final void initWPDES2C(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPDES2C = false;
} else {
WPDES2C = true;
}
}
}

protected final void initWPDES4C(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPDES4C = false;
} else {
WPDES4C = true;
}
}
}

protected final void initWPDES5C(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPDES5C = false;
} else {
WPDES5C = true;
}
}
}

protected final void initWPDESC(String s) {
if (!s.trim().isEmpty()) {
WPDESC = Byte.parseByte(s);
} else {
WPDESC = Byte.MIN_VALUE;
}
}

protected final void initWPDESPC(String s) {
if (!s.trim().isEmpty()) {
WPDESPC = Byte.parseByte(s);
} else {
WPDESPC = Byte.MIN_VALUE;
}
}

protected final void initWPDPSN(String s) {
if (!s.trim().isEmpty()) {
WPDPSN = Byte.parseByte(s);
} else {
WPDPSN = Byte.MIN_VALUE;
}
}

protected final void initWPDPSN2(String s) {
if (!s.trim().isEmpty()) {
WPDPSN2 = Byte.parseByte(s);
} else {
WPDPSN2 = Byte.MIN_VALUE;
}
}

protected final void initWPDPSN3(String s) {
if (!s.trim().isEmpty()) {
WPDPSN3 = Byte.parseByte(s);
} else {
WPDPSN3 = Byte.MIN_VALUE;
}
}

protected final void initWPDS2(String s) {
if (!s.trim().isEmpty()) {
WPDS2 = Short.parseShort(s);
} else {
WPDS2 = Short.MIN_VALUE;
}
}

protected final void initWPDS3(String s) {
if (!s.trim().isEmpty()) {
WPDS3 = Short.parseShort(s);
} else {
WPDS3 = Short.MIN_VALUE;
}
}

protected final void initWPDSNB(String s) {
if (!s.trim().isEmpty()) {
WPDSNB = Byte.parseByte(s);
} else {
WPDSNB = Byte.MIN_VALUE;
}
}

protected final void initWPDSNB2(String s) {
if (!s.trim().isEmpty()) {
WPDSNB2 = Byte.parseByte(s);
} else {
WPDSNB2 = Byte.MIN_VALUE;
}
}

protected final void initWPDSNB3(String s) {
if (!s.trim().isEmpty()) {
WPDSNB3 = Byte.parseByte(s);
} else {
WPDSNB3 = Byte.MIN_VALUE;
}
}

protected final void initWPDSNC(String s) {
if (!s.trim().isEmpty()) {
WPDSNC = Byte.parseByte(s);
} else {
WPDSNC = Byte.MIN_VALUE;
}
}

protected final void initWPDSNC2(String s) {
if (!s.trim().isEmpty()) {
WPDSNC2 = Byte.parseByte(s);
} else {
WPDSNC2 = Byte.MIN_VALUE;
}
}

protected final void initWPDSNC3(String s) {
if (!s.trim().isEmpty()) {
WPDSNC3 = Byte.parseByte(s);
} else {
WPDSNC3 = Byte.MIN_VALUE;
}
}

protected final void initWPDSND(String s) {
if (!s.trim().isEmpty()) {
WPDSND = Byte.parseByte(s);
} else {
WPDSND = Byte.MIN_VALUE;
}
}

protected final void initWPDSND1(String s) {
if (!s.trim().isEmpty()) {
WPDSND1 = Byte.parseByte(s);
} else {
WPDSND1 = Byte.MIN_VALUE;
}
}

protected final void initWPDSND2(String s) {
if (!s.trim().isEmpty()) {
WPDSND2 = Byte.parseByte(s);
} else {
WPDSND2 = Byte.MIN_VALUE;
}
}

protected final void initWPDSND3(String s) {
if (!s.trim().isEmpty()) {
WPDSND3 = Byte.parseByte(s);
} else {
WPDSND3 = Byte.MIN_VALUE;
}
}

protected final void initWPDSP(String s) {
if (!s.trim().isEmpty()) {
WPDSP = Byte.parseByte(s);
} else {
WPDSP = Byte.MIN_VALUE;
}
}

protected final void initWPDSP2(String s) {
if (!s.trim().isEmpty()) {
WPDSP2 = Byte.parseByte(s);
} else {
WPDSP2 = Byte.MIN_VALUE;
}
}

protected final void initWPDSP3(String s) {
if (!s.trim().isEmpty()) {
WPDSP3 = Byte.parseByte(s);
} else {
WPDSP3 = Byte.MIN_VALUE;
}
}

protected final void initWPDSP4(String s) {
if (!s.trim().isEmpty()) {
WPDSP4 = Byte.parseByte(s);
} else {
WPDSP4 = Byte.MIN_VALUE;
}
}

protected final void initWPDSP5(String s) {
if (!s.trim().isEmpty()) {
WPDSP5 = Byte.parseByte(s);
} else {
WPDSP5 = Byte.MIN_VALUE;
}
}

protected final void initWPDSP6(String s) {
if (!s.trim().isEmpty()) {
WPDSP6 = Byte.parseByte(s);
} else {
WPDSP6 = Byte.MIN_VALUE;
}
}

protected final void initWPEC(String s) {
if (!s.trim().isEmpty()) {
WPEC = Byte.parseByte(s);
} else {
WPEC = Byte.MIN_VALUE;
}
}

protected final void initWPECA(String s) {
if (!s.trim().isEmpty()) {
WPECA = Byte.parseByte(s);
} else {
WPECA = Byte.MIN_VALUE;
}
}

protected final void initWPECNA(String s) {
if (!s.trim().isEmpty()) {
WPECNA = Integer.parseInt(s);
} else {
WPECNA = Integer.MIN_VALUE;
}
}

protected final void initWPECNA2(String s) {
if (!s.trim().isEmpty()) {
WPECNA2 = Byte.parseByte(s);
} else {
WPECNA2 = Byte.MIN_VALUE;
}
}

protected final void initWPECNA3(String s) {
if (!s.trim().isEmpty()) {
WPECNA3 = Byte.parseByte(s);
} else {
WPECNA3 = Byte.MIN_VALUE;
}
}

protected final void initWPECNA4(String s) {
if (!s.trim().isEmpty()) {
WPECNA4 = Short.parseShort(s);
} else {
WPECNA4 = Short.MIN_VALUE;
}
}

protected final void initWPECNA5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPECNA5 = false;
} else {
WPECNA5 = true;
}
}
}

protected final void initWPECNA6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPECNA6 = false;
} else {
WPECNA6 = true;
}
}
}

protected final void initWPECON(String s) {
if (!s.trim().isEmpty()) {
WPECON = Byte.parseByte(s);
} else {
WPECON = Byte.MIN_VALUE;
}
}

protected final void initWPECON2(String s) {
if (!s.trim().isEmpty()) {
WPECON2 = Byte.parseByte(s);
} else {
WPECON2 = Byte.MIN_VALUE;
}
}

protected final void initWPECON3(String s) {
if (!s.trim().isEmpty()) {
WPECON3 = Byte.parseByte(s);
} else {
WPECON3 = Byte.MIN_VALUE;
}
}

protected final void initWPECON4(String s) {
if (!s.trim().isEmpty()) {
WPECON4 = Byte.parseByte(s);
} else {
WPECON4 = Byte.MIN_VALUE;
}
}

protected final void initWPECON5(String s) {
if (!s.trim().isEmpty()) {
WPECON5 = Byte.parseByte(s);
} else {
WPECON5 = Byte.MIN_VALUE;
}
}

protected final void initWPECON6(String s) {
if (!s.trim().isEmpty()) {
WPECON6 = Byte.parseByte(s);
} else {
WPECON6 = Byte.MIN_VALUE;
}
}

protected final void initWPECPP(String s) {
if (!s.trim().isEmpty()) {
WPECPP = Byte.parseByte(s);
} else {
WPECPP = Byte.MIN_VALUE;
}
}

protected final void initWPECPP2(String s) {
if (!s.trim().isEmpty()) {
WPECPP2 = Byte.parseByte(s);
} else {
WPECPP2 = Byte.MIN_VALUE;
}
}

protected final void initWPECPP3(String s) {
if (!s.trim().isEmpty()) {
WPECPP3 = Byte.parseByte(s);
} else {
WPECPP3 = Byte.MIN_VALUE;
}
}

protected final void initWPECPP4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPECPP4 = false;
} else {
WPECPP4 = true;
}
}
}

protected final void initWPECPP5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPECPP5 = false;
} else {
WPECPP5 = true;
}
}
}

protected final void initWPEFS(String s) {
if (!s.trim().isEmpty()) {
WPEFS = Byte.parseByte(s);
} else {
WPEFS = Byte.MIN_VALUE;
}
}

protected final void initWPEFS2(String s) {
if (!s.trim().isEmpty()) {
WPEFS2 = Byte.parseByte(s);
} else {
WPEFS2 = Byte.MIN_VALUE;
}
}

protected final void initWPEFS3(String s) {
if (!s.trim().isEmpty()) {
WPEFS3 = Byte.parseByte(s);
} else {
WPEFS3 = Byte.MIN_VALUE;
}
}

protected final void initWPEFS4(String s) {
if (!s.trim().isEmpty()) {
WPEFS4 = Byte.parseByte(s);
} else {
WPEFS4 = Byte.MIN_VALUE;
}
}

protected final void initWPEFS5(String s) {
if (!s.trim().isEmpty()) {
WPEFS5 = Byte.parseByte(s);
} else {
WPEFS5 = Byte.MIN_VALUE;
}
}

protected final void initWPEFS6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPEFS6 = false;
} else {
WPEFS6 = true;
}
}
}

protected final void initWPEPER2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPEPER2 = false;
} else {
WPEPER2 = true;
}
}
}

protected final void initWPEPER3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPEPER3 = false;
} else {
WPEPER3 = true;
}
}
}

protected final void initWPEPER4(String s) {
if (!s.trim().isEmpty()) {
WPEPER4 = Byte.parseByte(s);
} else {
WPEPER4 = Byte.MIN_VALUE;
}
}

protected final void initWPEPER5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPEPER5 = false;
} else {
WPEPER5 = true;
}
}
}

protected final void initWPEPER6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPEPER6 = false;
} else {
WPEPER6 = true;
}
}
}

protected final void initWPERA2(String s) {
if (!s.trim().isEmpty()) {
WPERA2 = Byte.parseByte(s);
} else {
WPERA2 = Byte.MIN_VALUE;
}
}

protected final void initWPERA3(String s) {
if (!s.trim().isEmpty()) {
WPERA3 = Byte.parseByte(s);
} else {
WPERA3 = Byte.MIN_VALUE;
}
}

protected final void initWPERA4(String s) {
if (!s.trim().isEmpty()) {
WPERA4 = Byte.parseByte(s);
} else {
WPERA4 = Byte.MIN_VALUE;
}
}

protected final void initWPERA5(String s) {
if (!s.trim().isEmpty()) {
WPERA5 = Byte.parseByte(s);
} else {
WPERA5 = Byte.MIN_VALUE;
}
}

protected final void initWPERA6(String s) {
if (!s.trim().isEmpty()) {
WPERA6 = Byte.parseByte(s);
} else {
WPERA6 = Byte.MIN_VALUE;
}
}

protected final void initWPERC2(String s) {
if (!s.trim().isEmpty()) {
WPERC2 = Byte.parseByte(s);
} else {
WPERC2 = Byte.MIN_VALUE;
}
}

protected final void initWPERC3(String s) {
if (!s.trim().isEmpty()) {
WPERC3 = Byte.parseByte(s);
} else {
WPERC3 = Byte.MIN_VALUE;
}
}

protected final void initWPERC4(String s) {
if (!s.trim().isEmpty()) {
WPERC4 = Byte.parseByte(s);
} else {
WPERC4 = Byte.MIN_VALUE;
}
}

protected final void initWPERC5(String s) {
if (!s.trim().isEmpty()) {
WPERC5 = Byte.parseByte(s);
} else {
WPERC5 = Byte.MIN_VALUE;
}
}

protected final void initWPERC6(String s) {
if (!s.trim().isEmpty()) {
WPERC6 = Byte.parseByte(s);
} else {
WPERC6 = Byte.MIN_VALUE;
}
}

protected final void initWPERCD(String s) {
if (!s.trim().isEmpty()) {
WPERCD = Byte.parseByte(s);
} else {
WPERCD = Byte.MIN_VALUE;
}
}

protected final void initWPERCD1(String s) {
if (!s.trim().isEmpty()) {
WPERCD1 = Byte.parseByte(s);
} else {
WPERCD1 = Byte.MIN_VALUE;
}
}

protected final void initWPERCD2(String s) {
if (!s.trim().isEmpty()) {
WPERCD2 = Byte.parseByte(s);
} else {
WPERCD2 = Byte.MIN_VALUE;
}
}

protected final void initWPERCD3(String s) {
if (!s.trim().isEmpty()) {
WPERCD3 = Byte.parseByte(s);
} else {
WPERCD3 = Byte.MIN_VALUE;
}
}

protected final void initWPERET2(String s) {
if (!s.trim().isEmpty()) {
WPERET2 = Byte.parseByte(s);
} else {
WPERET2 = Byte.MIN_VALUE;
}
}

protected final void initWPESJME(String s) {
if (!s.trim().isEmpty()) {
WPESJME = Byte.parseByte(s);
} else {
WPESJME = Byte.MIN_VALUE;
}
}

protected final void initWPESJML(String s) {
if (!s.trim().isEmpty()) {
WPESJML = Short.parseShort(s);
} else {
WPESJML = Short.MIN_VALUE;
}
}

protected final void initWPESJMR(String s) {
if (!s.trim().isEmpty()) {
WPESJMR = Byte.parseByte(s);
} else {
WPESJMR = Byte.MIN_VALUE;
}
}

protected final void initWPESJMU(String s) {
if (!s.trim().isEmpty()) {
WPESJMU = Short.parseShort(s);
} else {
WPESJMU = Short.MIN_VALUE;
}
}

protected final void initWPEXN(String s) {
if (!s.trim().isEmpty()) {
WPEXN = Byte.parseByte(s);
} else {
WPEXN = Byte.MIN_VALUE;
}
}

protected final void initWPEXR(String s) {
if (!s.trim().isEmpty()) {
WPEXR = Byte.parseByte(s);
} else {
WPEXR = Byte.MIN_VALUE;
}
}

protected final void initWPEXW(String s) {
if (!s.trim().isEmpty()) {
WPEXW = Byte.parseByte(s);
} else {
WPEXW = Byte.MIN_VALUE;
}
}

protected final void initWPFINF(String s) {
if (!s.trim().isEmpty()) {
WPFINF = Byte.parseByte(s);
} else {
WPFINF = Byte.MIN_VALUE;
}
}

protected final void initWPFINF2(String s) {
if (!s.trim().isEmpty()) {
WPFINF2 = Byte.parseByte(s);
} else {
WPFINF2 = Byte.MIN_VALUE;
}
}

protected final void initWPFINF3(String s) {
if (!s.trim().isEmpty()) {
WPFINF3 = Byte.parseByte(s);
} else {
WPFINF3 = Byte.MIN_VALUE;
}
}

protected final void initWPFINF4(String s) {
if (!s.trim().isEmpty()) {
WPFINF4 = Byte.parseByte(s);
} else {
WPFINF4 = Byte.MIN_VALUE;
}
}

protected final void initWPFINF5(String s) {
if (!s.trim().isEmpty()) {
WPFINF5 = Byte.parseByte(s);
} else {
WPFINF5 = Byte.MIN_VALUE;
}
}

protected final void initWPFINF6(String s) {
if (!s.trim().isEmpty()) {
WPFINF6 = Byte.parseByte(s);
} else {
WPFINF6 = Byte.MIN_VALUE;
}
}

protected final void initWPFRAS2(String s) {
if (!s.trim().isEmpty()) {
WPFRAS2 = Byte.parseByte(s);
} else {
WPFRAS2 = Byte.MIN_VALUE;
}
}

protected final void initWPFRAS3(String s) {
if (!s.trim().isEmpty()) {
WPFRAS3 = Byte.parseByte(s);
} else {
WPFRAS3 = Byte.MIN_VALUE;
}
}

protected final void initWPFRAS4(String s) {
if (!s.trim().isEmpty()) {
WPFRAS4 = Byte.parseByte(s);
} else {
WPFRAS4 = Byte.MIN_VALUE;
}
}

protected final void initWPFRAS5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFRAS5 = false;
} else {
WPFRAS5 = true;
}
}
}

protected final void initWPFRAS6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFRAS6 = false;
} else {
WPFRAS6 = true;
}
}
}

protected final void initWPFRUC(String s) {
if (!s.trim().isEmpty()) {
WPFRUC = Byte.parseByte(s);
} else {
WPFRUC = Byte.MIN_VALUE;
}
}

protected final void initWPFRUC2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFRUC2 = false;
} else {
WPFRUC2 = true;
}
}
}

protected final void initWPFRUC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFRUC3 = false;
} else {
WPFRUC3 = true;
}
}
}

protected final void initWPFRUC4(String s) {
if (!s.trim().isEmpty()) {
WPFRUC4 = Byte.parseByte(s);
} else {
WPFRUC4 = Byte.MIN_VALUE;
}
}

protected final void initWPFRUC5(String s) {
if (!s.trim().isEmpty()) {
WPFRUC5 = Byte.parseByte(s);
} else {
WPFRUC5 = Byte.MIN_VALUE;
}
}

protected final void initWPFRUC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFRUC6 = false;
} else {
WPFRUC6 = true;
}
}
}

protected final void initWPFSAP2(String s) {
if (!s.trim().isEmpty()) {
WPFSAP2 = Byte.parseByte(s);
} else {
WPFSAP2 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAP3(String s) {
if (!s.trim().isEmpty()) {
WPFSAP3 = Byte.parseByte(s);
} else {
WPFSAP3 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAP4(String s) {
if (!s.trim().isEmpty()) {
WPFSAP4 = Byte.parseByte(s);
} else {
WPFSAP4 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAP5(String s) {
if (!s.trim().isEmpty()) {
WPFSAP5 = Byte.parseByte(s);
} else {
WPFSAP5 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAP6(String s) {
if (!s.trim().isEmpty()) {
WPFSAP6 = Byte.parseByte(s);
} else {
WPFSAP6 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAPC(String s) {
if (!s.trim().isEmpty()) {
WPFSAPC = Byte.parseByte(s);
} else {
WPFSAPC = Byte.MIN_VALUE;
}
}

protected final void initWPFSAV2(String s) {
if (!s.trim().isEmpty()) {
WPFSAV2 = Byte.parseByte(s);
} else {
WPFSAV2 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAV3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSAV3 = false;
} else {
WPFSAV3 = true;
}
}
}

protected final void initWPFSAV4(String s) {
if (!s.trim().isEmpty()) {
WPFSAV4 = Byte.parseByte(s);
} else {
WPFSAV4 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAV5(String s) {
if (!s.trim().isEmpty()) {
WPFSAV5 = Byte.parseByte(s);
} else {
WPFSAV5 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAV6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSAV6 = false;
} else {
WPFSAV6 = true;
}
}
}

protected final void initWPFSC(String s) {
if (!s.trim().isEmpty()) {
WPFSC = Byte.parseByte(s);
} else {
WPFSC = Byte.MIN_VALUE;
}
}

protected final void initWPFSC2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSC2 = false;
} else {
WPFSC2 = true;
}
}
}

protected final void initWPFSC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSC3 = false;
} else {
WPFSC3 = true;
}
}
}

protected final void initWPFSC4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSC4 = false;
} else {
WPFSC4 = true;
}
}
}

protected final void initWPFSC5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSC5 = false;
} else {
WPFSC5 = true;
}
}
}

protected final void initWPFSCO2(String s) {
if (!s.trim().isEmpty()) {
WPFSCO2 = Byte.parseByte(s);
} else {
WPFSCO2 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCO3(String s) {
if (!s.trim().isEmpty()) {
WPFSCO3 = Byte.parseByte(s);
} else {
WPFSCO3 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCO4(String s) {
if (!s.trim().isEmpty()) {
WPFSCO4 = Byte.parseByte(s);
} else {
WPFSCO4 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCO5(String s) {
if (!s.trim().isEmpty()) {
WPFSCO5 = Byte.parseByte(s);
} else {
WPFSCO5 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCP2(String s) {
if (!s.trim().isEmpty()) {
WPFSCP2 = Byte.parseByte(s);
} else {
WPFSCP2 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCP3(String s) {
if (!s.trim().isEmpty()) {
WPFSCP3 = Byte.parseByte(s);
} else {
WPFSCP3 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCP4(String s) {
if (!s.trim().isEmpty()) {
WPFSCP4 = Byte.parseByte(s);
} else {
WPFSCP4 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCP5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSCP5 = false;
} else {
WPFSCP5 = true;
}
}
}

protected final void initWPFSEC(String s) {
if (!s.trim().isEmpty()) {
WPFSEC = Byte.parseByte(s);
} else {
WPFSEC = Byte.MIN_VALUE;
}
}

protected final void initWPFSEC2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSEC2 = false;
} else {
WPFSEC2 = true;
}
}
}

protected final void initWPFSEC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSEC3 = false;
} else {
WPFSEC3 = true;
}
}
}

protected final void initWPFSEC4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSEC4 = false;
} else {
WPFSEC4 = true;
}
}
}

protected final void initWPFSEC5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSEC5 = false;
} else {
WPFSEC5 = true;
}
}
}

protected final void initWPFSP4C(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSP4C = false;
} else {
WPFSP4C = true;
}
}
}

protected final void initWPFSP5C(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSP5C = false;
} else {
WPFSP5C = true;
}
}
}

protected final void initWPHCON(String s) {
if (!s.trim().isEmpty()) {
WPHCON = Byte.parseByte(s);
} else {
WPHCON = Byte.MIN_VALUE;
}
}

protected final void initWPHCON2(String s) {
if (!s.trim().isEmpty()) {
WPHCON2 = Byte.parseByte(s);
} else {
WPHCON2 = Byte.MIN_VALUE;
}
}

protected final void initWPHCON3(String s) {
if (!s.trim().isEmpty()) {
WPHCON3 = Byte.parseByte(s);
} else {
WPHCON3 = Byte.MIN_VALUE;
}
}

protected final void initWPHCON4(String s) {
if (!s.trim().isEmpty()) {
WPHCON4 = Byte.parseByte(s);
} else {
WPHCON4 = Byte.MIN_VALUE;
}
}

protected final void initWPHCON5(String s) {
if (!s.trim().isEmpty()) {
WPHCON5 = Byte.parseByte(s);
} else {
WPHCON5 = Byte.MIN_VALUE;
}
}

protected final void initWPHLWZ(String s) {
if (!s.trim().isEmpty()) {
WPHLWZ = Byte.parseByte(s);
} else {
WPHLWZ = Byte.MIN_VALUE;
}
}

protected final void initWPID2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPID2E = false;
} else {
WPID2E = true;
}
}
}

protected final void initWPID2L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPID2L = false;
} else {
WPID2L = true;
}
}
}

protected final void initWPID2R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPID2R = false;
} else {
WPID2R = true;
}
}
}

protected final void initWPID2U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPID2U = false;
} else {
WPID2U = true;
}
}
}

protected final void initWPID3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPID3E = false;
} else {
WPID3E = true;
}
}
}

protected final void initWPID3L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPID3L = false;
} else {
WPID3L = true;
}
}
}

protected final void initWPID3R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPID3R = false;
} else {
WPID3R = true;
}
}
}

protected final void initWPID3U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPID3U = false;
} else {
WPID3U = true;
}
}
}

protected final void initWPIDE(String s) {
if (!s.trim().isEmpty()) {
WPIDE = Byte.parseByte(s);
} else {
WPIDE = Byte.MIN_VALUE;
}
}

protected final void initWPIDL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPIDL = false;
} else {
WPIDL = true;
}
}
}

protected final void initWPIDR(String s) {
if (!s.trim().isEmpty()) {
WPIDR = Byte.parseByte(s);
} else {
WPIDR = Byte.MIN_VALUE;
}
}

protected final void initWPIDR2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIDR2E = false;
} else {
WPIDR2E = true;
}
}
}

protected final void initWPIDR2L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPIDR2L = false;
} else {
WPIDR2L = true;
}
}
}

protected final void initWPIDR2R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIDR2R = false;
} else {
WPIDR2R = true;
}
}
}

protected final void initWPIDR2U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPIDR2U = false;
} else {
WPIDR2U = true;
}
}
}

protected final void initWPIDR3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIDR3E = false;
} else {
WPIDR3E = true;
}
}
}

protected final void initWPIDR3L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIDR3L = false;
} else {
WPIDR3L = true;
}
}
}

protected final void initWPIDR3R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIDR3R = false;
} else {
WPIDR3R = true;
}
}
}

protected final void initWPIDR3U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIDR3U = false;
} else {
WPIDR3U = true;
}
}
}

protected final void initWPIDRE(String s) {
if (!s.trim().isEmpty()) {
WPIDRE = Byte.parseByte(s);
} else {
WPIDRE = Byte.MIN_VALUE;
}
}

protected final void initWPIDRL(String s) {
if (!s.trim().isEmpty()) {
WPIDRL = Short.parseShort(s);
} else {
WPIDRL = Short.MIN_VALUE;
}
}

protected final void initWPIDRR(String s) {
if (!s.trim().isEmpty()) {
WPIDRR = Byte.parseByte(s);
} else {
WPIDRR = Byte.MIN_VALUE;
}
}

protected final void initWPIDRU(String s) {
if (!s.trim().isEmpty()) {
WPIDRU = Integer.parseInt(s);
} else {
WPIDRU = Integer.MIN_VALUE;
}
}

protected final void initWPIDU(String s) {
if (!s.trim().isEmpty()) {
WPIDU = Short.parseShort(s);
} else {
WPIDU = Short.MIN_VALUE;
}
}

protected final void initWPIFS01(String s) {
if (!s.trim().isEmpty()) {
WPIFS01 = Byte.parseByte(s);
} else {
WPIFS01 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS02(String s) {
if (!s.trim().isEmpty()) {
WPIFS02 = Byte.parseByte(s);
} else {
WPIFS02 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS03(String s) {
if (!s.trim().isEmpty()) {
WPIFS03 = Byte.parseByte(s);
} else {
WPIFS03 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS1(String s) {
if (!s.trim().isEmpty()) {
WPIFS1 = Byte.parseByte(s);
} else {
WPIFS1 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS10(String s) {
if (!s.trim().isEmpty()) {
WPIFS10 = Byte.parseByte(s);
} else {
WPIFS10 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS11(String s) {
if (!s.trim().isEmpty()) {
WPIFS11 = Byte.parseByte(s);
} else {
WPIFS11 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS12(String s) {
if (!s.trim().isEmpty()) {
WPIFS12 = Byte.parseByte(s);
} else {
WPIFS12 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS19(String s) {
if (!s.trim().isEmpty()) {
WPIFS19 = Byte.parseByte(s);
} else {
WPIFS19 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS2(String s) {
if (!s.trim().isEmpty()) {
WPIFS2 = Byte.parseByte(s);
} else {
WPIFS2 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS20(String s) {
if (!s.trim().isEmpty()) {
WPIFS20 = Byte.parseByte(s);
} else {
WPIFS20 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS28(String s) {
if (!s.trim().isEmpty()) {
WPIFS28 = Byte.parseByte(s);
} else {
WPIFS28 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS29(String s) {
if (!s.trim().isEmpty()) {
WPIFS29 = Byte.parseByte(s);
} else {
WPIFS29 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS3(String s) {
if (!s.trim().isEmpty()) {
WPIFS3 = Byte.parseByte(s);
} else {
WPIFS3 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS30(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS30 = false;
} else {
WPIFS30 = true;
}
}
}

protected final void initWPIFS37(String s) {
if (!s.trim().isEmpty()) {
WPIFS37 = Byte.parseByte(s);
} else {
WPIFS37 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS38(String s) {
if (!s.trim().isEmpty()) {
WPIFS38 = Byte.parseByte(s);
} else {
WPIFS38 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS39(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS39 = false;
} else {
WPIFS39 = true;
}
}
}

protected final void initWPIFS46(String s) {
if (!s.trim().isEmpty()) {
WPIFS46 = Byte.parseByte(s);
} else {
WPIFS46 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS47(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS47 = false;
} else {
WPIFS47 = true;
}
}
}

protected final void initWPIN14E(String s) {
if (!s.trim().isEmpty()) {
WPIN14E = Byte.parseByte(s);
} else {
WPIN14E = Byte.MIN_VALUE;
}
}

protected final void initWPIN14L(String s) {
if (!s.trim().isEmpty()) {
WPIN14L = Short.parseShort(s);
} else {
WPIN14L = Short.MIN_VALUE;
}
}

protected final void initWPIN14R(String s) {
if (!s.trim().isEmpty()) {
WPIN14R = Byte.parseByte(s);
} else {
WPIN14R = Byte.MIN_VALUE;
}
}

protected final void initWPIN14U(String s) {
if (!s.trim().isEmpty()) {
WPIN14U = Integer.parseInt(s);
} else {
WPIN14U = Integer.MIN_VALUE;
}
}

protected final void initWPIN15E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIN15E = false;
} else {
WPIN15E = true;
}
}
}

protected final void initWPIN15L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
WPIN15L = false;
} else {
WPIN15L = true;
}
}
}

protected final void initWPIN15R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIN15R = false;
} else {
WPIN15R = true;
}
}
}

protected final void initWPIN15U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
WPIN15U = false;
} else {
WPIN15U = true;
}
}
}

protected final void initWPIN16E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIN16E = false;
} else {
WPIN16E = true;
}
}
}

protected final void initWPIN16L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIN16L = false;
} else {
WPIN16L = true;
}
}
}

protected final void initWPIN16R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIN16R = false;
} else {
WPIN16R = true;
}
}
}

protected final void initWPIN16U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIN16U = false;
} else {
WPIN16U = true;
}
}
}

protected final void initWPINC4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC4E = false;
} else {
WPINC4E = true;
}
}
}

protected final void initWPINC4L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC4L = false;
} else {
WPINC4L = true;
}
}
}

protected final void initWPINC4R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC4R = false;
} else {
WPINC4R = true;
}
}
}

protected final void initWPINC4U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC4U = false;
} else {
WPINC4U = true;
}
}
}

protected final void initWPINC5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC5E = false;
} else {
WPINC5E = true;
}
}
}

protected final void initWPINC5L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC5L = false;
} else {
WPINC5L = true;
}
}
}

protected final void initWPINC5R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC5R = false;
} else {
WPINC5R = true;
}
}
}

protected final void initWPINC5U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC5U = false;
} else {
WPINC5U = true;
}
}
}

protected final void initWPINCD(String s) {
if (!s.trim().isEmpty()) {
WPINCD = Double.parseDouble(s);
} else {
WPINCD = Double.NaN;
}
}

protected final void initWPINCD2(String s) {
if (!s.trim().isEmpty()) {
WPINCD2 = Short.parseShort(s);
} else {
WPINCD2 = Short.MIN_VALUE;
}
}

protected final void initWPINCD3(String s) {
if (!s.trim().isEmpty()) {
WPINCD3 = Short.parseShort(s);
} else {
WPINCD3 = Short.MIN_VALUE;
}
}

protected final void initWPIND(String s) {
if (!s.trim().isEmpty()) {
WPIND = Integer.parseInt(s);
} else {
WPIND = Integer.MIN_VALUE;
}
}

protected final void initWPIND14(String s) {
if (!s.trim().isEmpty()) {
WPIND14 = Short.parseShort(s);
} else {
WPIND14 = Short.MIN_VALUE;
}
}

protected final void initWPIND15(String s) {
if (!s.trim().isEmpty()) {
WPIND15 = Short.parseShort(s);
} else {
WPIND15 = Short.MIN_VALUE;
}
}

protected final void initWPIND16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIND16 = false;
} else {
WPIND16 = true;
}
}
}

protected final void initWPIND2(String s) {
if (!s.trim().isEmpty()) {
WPIND2 = Short.parseShort(s);
} else {
WPIND2 = Short.MIN_VALUE;
}
}

protected final void initWPIND3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIND3 = false;
} else {
WPIND3 = true;
}
}
}

protected final void initWPIND4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIND4 = false;
} else {
WPIND4 = true;
}
}
}

protected final void initWPIND5(String s) {
if (!s.trim().isEmpty()) {
WPIND5 = Short.parseShort(s);
} else {
WPIND5 = Short.MIN_VALUE;
}
}

protected final void initWPINF17(String s) {
if (!s.trim().isEmpty()) {
WPINF17 = Byte.parseByte(s);
} else {
WPINF17 = Byte.MIN_VALUE;
}
}

protected final void initWPINF18(String s) {
if (!s.trim().isEmpty()) {
WPINF18 = Byte.parseByte(s);
} else {
WPINF18 = Byte.MIN_VALUE;
}
}

protected final void initWPINF19(String s) {
if (!s.trim().isEmpty()) {
WPINF19 = Byte.parseByte(s);
} else {
WPINF19 = Byte.MIN_VALUE;
}
}

protected final void initWPINF2(String s) {
if (!s.trim().isEmpty()) {
WPINF2 = Byte.parseByte(s);
} else {
WPINF2 = Byte.MIN_VALUE;
}
}

protected final void initWPINF3(String s) {
if (!s.trim().isEmpty()) {
WPINF3 = Byte.parseByte(s);
} else {
WPINF3 = Byte.MIN_VALUE;
}
}

protected final void initWPINF4(String s) {
if (!s.trim().isEmpty()) {
WPINF4 = Byte.parseByte(s);
} else {
WPINF4 = Byte.MIN_VALUE;
}
}

protected final void initWPINF5(String s) {
if (!s.trim().isEmpty()) {
WPINF5 = Byte.parseByte(s);
} else {
WPINF5 = Byte.MIN_VALUE;
}
}

protected final void initWPINF6(String s) {
if (!s.trim().isEmpty()) {
WPINF6 = Byte.parseByte(s);
} else {
WPINF6 = Byte.MIN_VALUE;
}
}

protected final void initWPINF7(String s) {
if (!s.trim().isEmpty()) {
WPINF7 = Byte.parseByte(s);
} else {
WPINF7 = Byte.MIN_VALUE;
}
}

protected final void initWPINF8(String s) {
if (!s.trim().isEmpty()) {
WPINF8 = Byte.parseByte(s);
} else {
WPINF8 = Byte.MIN_VALUE;
}
}

protected final void initWPINFO(String s) {
if (!s.trim().isEmpty()) {
WPINFO = Byte.parseByte(s);
} else {
WPINFO = Byte.MIN_VALUE;
}
}

protected final void initWPINTA(String s) {
if (!s.trim().isEmpty()) {
WPINTA = Byte.parseByte(s);
} else {
WPINTA = Byte.MIN_VALUE;
}
}

protected final void initWPKP(String s) {
if (!s.trim().isEmpty()) {
WPKP = Byte.parseByte(s);
} else {
WPKP = Byte.MIN_VALUE;
}
}

protected final void initWPKP2(String s) {
if (!s.trim().isEmpty()) {
WPKP2 = Byte.parseByte(s);
} else {
WPKP2 = Byte.MIN_VALUE;
}
}

protected final void initWPKP2C(String s) {
if (!s.trim().isEmpty()) {
WPKP2C = Byte.parseByte(s);
} else {
WPKP2C = Byte.MIN_VALUE;
}
}

protected final void initWPKPC(String s) {
if (!s.trim().isEmpty()) {
WPKPC = Byte.parseByte(s);
} else {
WPKPC = Byte.MIN_VALUE;
}
}

protected final void initWPKPS(String s) {
if (!s.trim().isEmpty()) {
WPKPS = Byte.parseByte(s);
} else {
WPKPS = Byte.MIN_VALUE;
}
}

protected final void initWPKPS2(String s) {
if (!s.trim().isEmpty()) {
WPKPS2 = Byte.parseByte(s);
} else {
WPKPS2 = Byte.MIN_VALUE;
}
}

protected final void initWPKPS3(String s) {
if (!s.trim().isEmpty()) {
WPKPS3 = Byte.parseByte(s);
} else {
WPKPS3 = Byte.MIN_VALUE;
}
}

protected final void initWPLAC(String s) {
if (!s.trim().isEmpty()) {
WPLAC = Short.parseShort(s);
} else {
WPLAC = Short.MIN_VALUE;
}
}

protected final void initWPLAC2(String s) {
if (!s.trim().isEmpty()) {
WPLAC2 = Short.parseShort(s);
} else {
WPLAC2 = Short.MIN_VALUE;
}
}

protected final void initWPLAC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLAC3 = false;
} else {
WPLAC3 = true;
}
}
}

protected final void initWPLAC4(String s) {
if (!s.trim().isEmpty()) {
WPLAC4 = Short.parseShort(s);
} else {
WPLAC4 = Short.MIN_VALUE;
}
}

protected final void initWPLAC5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLAC5 = false;
} else {
WPLAC5 = true;
}
}
}

protected final void initWPLASM(String s) {
if (!s.trim().isEmpty()) {
WPLASM = Byte.parseByte(s);
} else {
WPLASM = Byte.MIN_VALUE;
}
}

protected final void initWPLASM2(String s) {
if (!s.trim().isEmpty()) {
WPLASM2 = Byte.parseByte(s);
} else {
WPLASM2 = Byte.MIN_VALUE;
}
}

protected final void initWPLASM3(String s) {
if (!s.trim().isEmpty()) {
WPLASM3 = Byte.parseByte(s);
} else {
WPLASM3 = Byte.MIN_VALUE;
}
}

protected final void initWPLASM4(String s) {
if (!s.trim().isEmpty()) {
WPLASM4 = Byte.parseByte(s);
} else {
WPLASM4 = Byte.MIN_VALUE;
}
}

protected final void initWPLASM5(String s) {
if (!s.trim().isEmpty()) {
WPLASM5 = Byte.parseByte(s);
} else {
WPLASM5 = Byte.MIN_VALUE;
}
}

protected final void initWPLASP(String s) {
if (!s.trim().isEmpty()) {
WPLASP = Byte.parseByte(s);
} else {
WPLASP = Byte.MIN_VALUE;
}
}

protected final void initWPLASP2(String s) {
if (!s.trim().isEmpty()) {
WPLASP2 = Byte.parseByte(s);
} else {
WPLASP2 = Byte.MIN_VALUE;
}
}

protected final void initWPLASP3(String s) {
if (!s.trim().isEmpty()) {
WPLASP3 = Byte.parseByte(s);
} else {
WPLASP3 = Byte.MIN_VALUE;
}
}

protected final void initWPLASP4(String s) {
if (!s.trim().isEmpty()) {
WPLASP4 = Byte.parseByte(s);
} else {
WPLASP4 = Byte.MIN_VALUE;
}
}

protected final void initWPLASP5(String s) {
if (!s.trim().isEmpty()) {
WPLASP5 = Byte.parseByte(s);
} else {
WPLASP5 = Byte.MIN_VALUE;
}
}

protected final void initWPLASY(String s) {
if (!s.trim().isEmpty()) {
WPLASY = Short.parseShort(s);
} else {
WPLASY = Short.MIN_VALUE;
}
}

protected final void initWPLASY2(String s) {
if (!s.trim().isEmpty()) {
WPLASY2 = Short.parseShort(s);
} else {
WPLASY2 = Short.MIN_VALUE;
}
}

protected final void initWPLASY3(String s) {
if (!s.trim().isEmpty()) {
WPLASY3 = Short.parseShort(s);
} else {
WPLASY3 = Short.MIN_VALUE;
}
}

protected final void initWPLASY4(String s) {
if (!s.trim().isEmpty()) {
WPLASY4 = Short.parseShort(s);
} else {
WPLASY4 = Short.MIN_VALUE;
}
}

protected final void initWPLASY5(String s) {
if (!s.trim().isEmpty()) {
WPLASY5 = Short.parseShort(s);
} else {
WPLASY5 = Short.MIN_VALUE;
}
}

protected final void initWPLCOM2(String s) {
if (!s.trim().isEmpty()) {
WPLCOM2 = Byte.parseByte(s);
} else {
WPLCOM2 = Byte.MIN_VALUE;
}
}

protected final void initWPLCOM3(String s) {
if (!s.trim().isEmpty()) {
WPLCOM3 = Byte.parseByte(s);
} else {
WPLCOM3 = Byte.MIN_VALUE;
}
}

protected final void initWPLCOM4(String s) {
if (!s.trim().isEmpty()) {
WPLCOM4 = Byte.parseByte(s);
} else {
WPLCOM4 = Byte.MIN_VALUE;
}
}

protected final void initWPLCOM5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLCOM5 = false;
} else {
WPLCOM5 = true;
}
}
}

protected final void initWPLCOY2(String s) {
if (!s.trim().isEmpty()) {
WPLCOY2 = Short.parseShort(s);
} else {
WPLCOY2 = Short.MIN_VALUE;
}
}

protected final void initWPLCOY3(String s) {
if (!s.trim().isEmpty()) {
WPLCOY3 = Short.parseShort(s);
} else {
WPLCOY3 = Short.MIN_VALUE;
}
}

protected final void initWPLCOY4(String s) {
if (!s.trim().isEmpty()) {
WPLCOY4 = Short.parseShort(s);
} else {
WPLCOY4 = Short.MIN_VALUE;
}
}

protected final void initWPLCOY5(String s) {
if (!s.trim().isEmpty()) {
WPLCOY5 = Short.parseShort(s);
} else {
WPLCOY5 = Short.MIN_VALUE;
}
}

protected final void initWPLFT13(String s) {
if (!s.trim().isEmpty()) {
WPLFT13 = Byte.parseByte(s);
} else {
WPLFT13 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTM1(String s) {
if (!s.trim().isEmpty()) {
WPLFTM1 = Byte.parseByte(s);
} else {
WPLFTM1 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTM2(String s) {
if (!s.trim().isEmpty()) {
WPLFTM2 = Byte.parseByte(s);
} else {
WPLFTM2 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTM3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTM3 = false;
} else {
WPLFTM3 = true;
}
}
}

protected final void initWPLFTM4(String s) {
if (!s.trim().isEmpty()) {
WPLFTM4 = Byte.parseByte(s);
} else {
WPLFTM4 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTM7(String s) {
if (!s.trim().isEmpty()) {
WPLFTM7 = Byte.parseByte(s);
} else {
WPLFTM7 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTM8(String s) {
if (!s.trim().isEmpty()) {
WPLFTM8 = Byte.parseByte(s);
} else {
WPLFTM8 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTM9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTM9 = false;
} else {
WPLFTM9 = true;
}
}
}

protected final void initWPLFTP1(String s) {
if (!s.trim().isEmpty()) {
WPLFTP1 = Byte.parseByte(s);
} else {
WPLFTP1 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP2(String s) {
if (!s.trim().isEmpty()) {
WPLFTP2 = Byte.parseByte(s);
} else {
WPLFTP2 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP3 = false;
} else {
WPLFTP3 = true;
}
}
}

protected final void initWPLFTP5(String s) {
if (!s.trim().isEmpty()) {
WPLFTP5 = Byte.parseByte(s);
} else {
WPLFTP5 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP6(String s) {
if (!s.trim().isEmpty()) {
WPLFTP6 = Byte.parseByte(s);
} else {
WPLFTP6 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP7 = false;
} else {
WPLFTP7 = true;
}
}
}

protected final void initWPLFTP9(String s) {
if (!s.trim().isEmpty()) {
WPLFTP9 = Byte.parseByte(s);
} else {
WPLFTP9 = Byte.MIN_VALUE;
}
}

protected final void initWPLIMWK(String s) {
if (!s.trim().isEmpty()) {
WPLIMWK = Byte.parseByte(s);
} else {
WPLIMWK = Byte.MIN_VALUE;
}
}

protected final void initWPLJO12(String s) {
if (!s.trim().isEmpty()) {
WPLJO12 = Byte.parseByte(s);
} else {
WPLJO12 = Byte.MIN_VALUE;
}
}

protected final void initWPLJO13(String s) {
if (!s.trim().isEmpty()) {
WPLJO13 = Byte.parseByte(s);
} else {
WPLJO13 = Byte.MIN_VALUE;
}
}

protected final void initWPLJO14(String s) {
if (!s.trim().isEmpty()) {
WPLJO14 = Byte.parseByte(s);
} else {
WPLJO14 = Byte.MIN_VALUE;
}
}

protected final void initWPLJO15(String s) {
if (!s.trim().isEmpty()) {
WPLJO15 = Byte.parseByte(s);
} else {
WPLJO15 = Byte.MIN_VALUE;
}
}

protected final void initWPLJO16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLJO16 = false;
} else {
WPLJO16 = true;
}
}
}

protected final void initWPLJOB1(String s) {
if (!s.trim().isEmpty()) {
WPLJOB1 = Byte.parseByte(s);
} else {
WPLJOB1 = Byte.MIN_VALUE;
}
}

protected final void initWPLJOB2(String s) {
if (!s.trim().isEmpty()) {
WPLJOB2 = Byte.parseByte(s);
} else {
WPLJOB2 = Byte.MIN_VALUE;
}
}

protected final void initWPLJOB3(String s) {
if (!s.trim().isEmpty()) {
WPLJOB3 = Byte.parseByte(s);
} else {
WPLJOB3 = Byte.MIN_VALUE;
}
}

protected final void initWPLJOB4(String s) {
if (!s.trim().isEmpty()) {
WPLJOB4 = Byte.parseByte(s);
} else {
WPLJOB4 = Byte.MIN_VALUE;
}
}

protected final void initWPLJOB5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLJOB5 = false;
} else {
WPLJOB5 = true;
}
}
}

protected final void initWPLJOBM(String s) {
if (!s.trim().isEmpty()) {
WPLJOBM = Byte.parseByte(s);
} else {
WPLJOBM = Byte.MIN_VALUE;
}
}

protected final void initWPLKCH1(String s) {
if (!s.trim().isEmpty()) {
WPLKCH1 = Byte.parseByte(s);
} else {
WPLKCH1 = Byte.MIN_VALUE;
}
}

protected final void initWPLKCH2(String s) {
if (!s.trim().isEmpty()) {
WPLKCH2 = Byte.parseByte(s);
} else {
WPLKCH2 = Byte.MIN_VALUE;
}
}

protected final void initWPLKCH3(String s) {
if (!s.trim().isEmpty()) {
WPLKCH3 = Byte.parseByte(s);
} else {
WPLKCH3 = Byte.MIN_VALUE;
}
}

protected final void initWPLKCH4(String s) {
if (!s.trim().isEmpty()) {
WPLKCH4 = Byte.parseByte(s);
} else {
WPLKCH4 = Byte.MIN_VALUE;
}
}

protected final void initWPLKCH5(String s) {
if (!s.trim().isEmpty()) {
WPLKCH5 = Byte.parseByte(s);
} else {
WPLKCH5 = Byte.MIN_VALUE;
}
}

protected final void initWPLKCH6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLKCH6 = false;
} else {
WPLKCH6 = true;
}
}
}

protected final void initWPLKCM1(String s) {
if (!s.trim().isEmpty()) {
WPLKCM1 = Byte.parseByte(s);
} else {
WPLKCM1 = Byte.MIN_VALUE;
}
}

protected final void initWPLKCM2(String s) {
if (!s.trim().isEmpty()) {
WPLKCM2 = Byte.parseByte(s);
} else {
WPLKCM2 = Byte.MIN_VALUE;
}
}

protected final void initWPLKCM3(String s) {
if (!s.trim().isEmpty()) {
WPLKCM3 = Byte.parseByte(s);
} else {
WPLKCM3 = Byte.MIN_VALUE;
}
}

protected final void initWPLKCM4(String s) {
if (!s.trim().isEmpty()) {
WPLKCM4 = Byte.parseByte(s);
} else {
WPLKCM4 = Byte.MIN_VALUE;
}
}

protected final void initWPLKCM5(String s) {
if (!s.trim().isEmpty()) {
WPLKCM5 = Byte.parseByte(s);
} else {
WPLKCM5 = Byte.MIN_VALUE;
}
}

protected final void initWPLKCM6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLKCM6 = false;
} else {
WPLKCM6 = true;
}
}
}

protected final void initWPLLJM(String s) {
if (!s.trim().isEmpty()) {
WPLLJM = Byte.parseByte(s);
} else {
WPLLJM = Byte.MIN_VALUE;
}
}

protected final void initWPLLJY(String s) {
if (!s.trim().isEmpty()) {
WPLLJY = Short.parseShort(s);
} else {
WPLLJY = Short.MIN_VALUE;
}
}

protected final void initWPLLSM(String s) {
if (!s.trim().isEmpty()) {
WPLLSM = Byte.parseByte(s);
} else {
WPLLSM = Byte.MIN_VALUE;
}
}

protected final void initWPLLSY(String s) {
if (!s.trim().isEmpty()) {
WPLLSY = Short.parseShort(s);
} else {
WPLLSY = Short.MIN_VALUE;
}
}

protected final void initWPLM14E(String s) {
if (!s.trim().isEmpty()) {
WPLM14E = Byte.parseByte(s);
} else {
WPLM14E = Byte.MIN_VALUE;
}
}

protected final void initWPLM14L(String s) {
if (!s.trim().isEmpty()) {
WPLM14L = Integer.parseInt(s);
} else {
WPLM14L = Integer.MIN_VALUE;
}
}

protected final void initWPLM14R(String s) {
if (!s.trim().isEmpty()) {
WPLM14R = Byte.parseByte(s);
} else {
WPLM14R = Byte.MIN_VALUE;
}
}

protected final void initWPLM14U(String s) {
if (!s.trim().isEmpty()) {
WPLM14U = Integer.parseInt(s);
} else {
WPLM14U = Integer.MIN_VALUE;
}
}

protected final void initWPLM15E(String s) {
if (!s.trim().isEmpty()) {
WPLM15E = Byte.parseByte(s);
} else {
WPLM15E = Byte.MIN_VALUE;
}
}

protected final void initWPLM15L(String s) {
if (!s.trim().isEmpty()) {
WPLM15L = Short.parseShort(s);
} else {
WPLM15L = Short.MIN_VALUE;
}
}

protected final void initWPLM15R(String s) {
if (!s.trim().isEmpty()) {
WPLM15R = Byte.parseByte(s);
} else {
WPLM15R = Byte.MIN_VALUE;
}
}

protected final void initWPLM15U(String s) {
if (!s.trim().isEmpty()) {
WPLM15U = Short.parseShort(s);
} else {
WPLM15U = Short.MIN_VALUE;
}
}

protected final void initWPLM16E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLM16E = false;
} else {
WPLM16E = true;
}
}
}

protected final void initWPLM16L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPLM16L = false;
} else {
WPLM16L = true;
}
}
}

protected final void initWPLM16R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLM16R = false;
} else {
WPLM16R = true;
}
}
}

protected final void initWPLM16U(String s) {
if (!s.trim().isEmpty()) {
WPLM16U = Short.parseShort(s);
} else {
WPLM16U = Short.MIN_VALUE;
}
}

protected final void initWPLMA(String s) {
if (!s.trim().isEmpty()) {
WPLMA = Integer.parseInt(s);
} else {
WPLMA = Integer.MIN_VALUE;
}
}

protected final void initWPLMA14(String s) {
if (!s.trim().isEmpty()) {
WPLMA14 = Integer.parseInt(s);
} else {
WPLMA14 = Integer.MIN_VALUE;
}
}

protected final void initWPLMA15(String s) {
if (!s.trim().isEmpty()) {
WPLMA15 = Integer.parseInt(s);
} else {
WPLMA15 = Integer.MIN_VALUE;
}
}

protected final void initWPLMA16(String s) {
if (!s.trim().isEmpty()) {
WPLMA16 = Short.parseShort(s);
} else {
WPLMA16 = Short.MIN_VALUE;
}
}

protected final void initWPLMA2(String s) {
if (!s.trim().isEmpty()) {
WPLMA2 = Integer.parseInt(s);
} else {
WPLMA2 = Integer.MIN_VALUE;
}
}

protected final void initWPLMA3(String s) {
if (!s.trim().isEmpty()) {
WPLMA3 = Short.parseShort(s);
} else {
WPLMA3 = Short.MIN_VALUE;
}
}

protected final void initWPLMA4(String s) {
if (!s.trim().isEmpty()) {
WPLMA4 = Short.parseShort(s);
} else {
WPLMA4 = Short.MIN_VALUE;
}
}

protected final void initWPLMA5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLMA5 = false;
} else {
WPLMA5 = true;
}
}
}

protected final void initWPLMP2E(String s) {
if (!s.trim().isEmpty()) {
WPLMP2E = Byte.parseByte(s);
} else {
WPLMP2E = Byte.MIN_VALUE;
}
}

protected final void initWPLMP2L(String s) {
if (!s.trim().isEmpty()) {
WPLMP2L = Byte.parseByte(s);
} else {
WPLMP2L = Byte.MIN_VALUE;
}
}

protected final void initWPLMP2R(String s) {
if (!s.trim().isEmpty()) {
WPLMP2R = Byte.parseByte(s);
} else {
WPLMP2R = Byte.MIN_VALUE;
}
}

protected final void initWPLMP2U(String s) {
if (!s.trim().isEmpty()) {
WPLMP2U = Short.parseShort(s);
} else {
WPLMP2U = Short.MIN_VALUE;
}
}

protected final void initWPLMP3E(String s) {
if (!s.trim().isEmpty()) {
WPLMP3E = Byte.parseByte(s);
} else {
WPLMP3E = Byte.MIN_VALUE;
}
}

protected final void initWPLMP3L(String s) {
if (!s.trim().isEmpty()) {
WPLMP3L = Byte.parseByte(s);
} else {
WPLMP3L = Byte.MIN_VALUE;
}
}

protected final void initWPLMP3R(String s) {
if (!s.trim().isEmpty()) {
WPLMP3R = Byte.parseByte(s);
} else {
WPLMP3R = Byte.MIN_VALUE;
}
}

protected final void initWPLMP3U(String s) {
if (!s.trim().isEmpty()) {
WPLMP3U = Byte.parseByte(s);
} else {
WPLMP3U = Byte.MIN_VALUE;
}
}

protected final void initWPLMP4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLMP4E = false;
} else {
WPLMP4E = true;
}
}
}

protected final void initWPLMP4L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLMP4L = false;
} else {
WPLMP4L = true;
}
}
}

protected final void initWPLMP4R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLMP4R = false;
} else {
WPLMP4R = true;
}
}
}

protected final void initWPLMP4U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLMP4U = false;
} else {
WPLMP4U = true;
}
}
}

protected final void initWPLMP5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLMP5E = false;
} else {
WPLMP5E = true;
}
}
}

protected final void initWPLMP5L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLMP5L = false;
} else {
WPLMP5L = true;
}
}
}

protected final void initWPLMP5R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLMP5R = false;
} else {
WPLMP5R = true;
}
}
}

protected final void initWPLMP5U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLMP5U = false;
} else {
WPLMP5U = true;
}
}
}

protected final void initWPLMPAE(String s) {
if (!s.trim().isEmpty()) {
WPLMPAE = Byte.parseByte(s);
} else {
WPLMPAE = Byte.MIN_VALUE;
}
}

protected final void initWPLMPAL(String s) {
if (!s.trim().isEmpty()) {
WPLMPAL = Short.parseShort(s);
} else {
WPLMPAL = Short.MIN_VALUE;
}
}

protected final void initWPLMPAR(String s) {
if (!s.trim().isEmpty()) {
WPLMPAR = Byte.parseByte(s);
} else {
WPLMPAR = Byte.MIN_VALUE;
}
}

protected final void initWPLMPAU(String s) {
if (!s.trim().isEmpty()) {
WPLMPAU = Short.parseShort(s);
} else {
WPLMPAU = Short.MIN_VALUE;
}
}

protected final void initWPLMPE(String s) {
if (!s.trim().isEmpty()) {
WPLMPE = Byte.parseByte(s);
} else {
WPLMPE = Byte.MIN_VALUE;
}
}

protected final void initWPLMPL(String s) {
if (!s.trim().isEmpty()) {
WPLMPL = Integer.parseInt(s);
} else {
WPLMPL = Integer.MIN_VALUE;
}
}

protected final void initWPLMPR(String s) {
if (!s.trim().isEmpty()) {
WPLMPR = Byte.parseByte(s);
} else {
WPLMPR = Byte.MIN_VALUE;
}
}

protected final void initWPLMPU(String s) {
if (!s.trim().isEmpty()) {
WPLMPU = Integer.parseInt(s);
} else {
WPLMPU = Integer.MIN_VALUE;
}
}

protected final void initWPLMS(String s) {
if (!s.trim().isEmpty()) {
WPLMS = Byte.parseByte(s);
} else {
WPLMS = Byte.MIN_VALUE;
}
}

protected final void initWPLMS14(String s) {
if (!s.trim().isEmpty()) {
WPLMS14 = Byte.parseByte(s);
} else {
WPLMS14 = Byte.MIN_VALUE;
}
}

protected final void initWPLMS15(String s) {
if (!s.trim().isEmpty()) {
WPLMS15 = Byte.parseByte(s);
} else {
WPLMS15 = Byte.MIN_VALUE;
}
}

protected final void initWPLMS16(String s) {
if (!s.trim().isEmpty()) {
WPLMS16 = Byte.parseByte(s);
} else {
WPLMS16 = Byte.MIN_VALUE;
}
}

protected final void initWPLMS2(String s) {
if (!s.trim().isEmpty()) {
WPLMS2 = Byte.parseByte(s);
} else {
WPLMS2 = Byte.MIN_VALUE;
}
}

protected final void initWPLMS3(String s) {
if (!s.trim().isEmpty()) {
WPLMS3 = Byte.parseByte(s);
} else {
WPLMS3 = Byte.MIN_VALUE;
}
}

protected final void initWPLMS4(String s) {
if (!s.trim().isEmpty()) {
WPLMS4 = Byte.parseByte(s);
} else {
WPLMS4 = Byte.MIN_VALUE;
}
}

protected final void initWPLMS5(String s) {
if (!s.trim().isEmpty()) {
WPLMS5 = Byte.parseByte(s);
} else {
WPLMS5 = Byte.MIN_VALUE;
}
}

protected final void initWPLP2AE(String s) {
if (!s.trim().isEmpty()) {
WPLP2AE = Byte.parseByte(s);
} else {
WPLP2AE = Byte.MIN_VALUE;
}
}

protected final void initWPLP2AL(String s) {
if (!s.trim().isEmpty()) {
WPLP2AL = Integer.parseInt(s);
} else {
WPLP2AL = Integer.MIN_VALUE;
}
}

protected final void initWPLP2AR(String s) {
if (!s.trim().isEmpty()) {
WPLP2AR = Byte.parseByte(s);
} else {
WPLP2AR = Byte.MIN_VALUE;
}
}

protected final void initWPLP2AU(String s) {
if (!s.trim().isEmpty()) {
WPLP2AU = Integer.parseInt(s);
} else {
WPLP2AU = Integer.MIN_VALUE;
}
}

protected final void initWPLP2TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP2TE = false;
} else {
WPLP2TE = true;
}
}
}

protected final void initWPLP2TL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP2TL = false;
} else {
WPLP2TL = true;
}
}
}

protected final void initWPLP2TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP2TR = false;
} else {
WPLP2TR = true;
}
}
}

protected final void initWPLP2TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP2TU = false;
} else {
WPLP2TU = true;
}
}
}

protected final void initWPLP3AE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP3AE = false;
} else {
WPLP3AE = true;
}
}
}

protected final void initWPLP3AL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPLP3AL = false;
} else {
WPLP3AL = true;
}
}
}

protected final void initWPLP3AR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP3AR = false;
} else {
WPLP3AR = true;
}
}
}

protected final void initWPLP3AU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPLP3AU = false;
} else {
WPLP3AU = true;
}
}
}

protected final void initWPLP3TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP3TE = false;
} else {
WPLP3TE = true;
}
}
}

protected final void initWPLP3TL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP3TL = false;
} else {
WPLP3TL = true;
}
}
}

protected final void initWPLP3TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP3TR = false;
} else {
WPLP3TR = true;
}
}
}

protected final void initWPLP3TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP3TU = false;
} else {
WPLP3TU = true;
}
}
}

protected final void initWPLP4AE(String s) {
if (!s.trim().isEmpty()) {
WPLP4AE = Byte.parseByte(s);
} else {
WPLP4AE = Byte.MIN_VALUE;
}
}

protected final void initWPLP4AL(String s) {
if (!s.trim().isEmpty()) {
WPLP4AL = Short.parseShort(s);
} else {
WPLP4AL = Short.MIN_VALUE;
}
}

protected final void initWPLP4AR(String s) {
if (!s.trim().isEmpty()) {
WPLP4AR = Byte.parseByte(s);
} else {
WPLP4AR = Byte.MIN_VALUE;
}
}

protected final void initWPLP4AU(String s) {
if (!s.trim().isEmpty()) {
WPLP4AU = Integer.parseInt(s);
} else {
WPLP4AU = Integer.MIN_VALUE;
}
}

protected final void initWPLP4TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP4TE = false;
} else {
WPLP4TE = true;
}
}
}

protected final void initWPLP4TL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP4TL = false;
} else {
WPLP4TL = true;
}
}
}

protected final void initWPLP4TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP4TR = false;
} else {
WPLP4TR = true;
}
}
}

protected final void initWPLP4TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP4TU = false;
} else {
WPLP4TU = true;
}
}
}

protected final void initWPLP5AE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP5AE = false;
} else {
WPLP5AE = true;
}
}
}

protected final void initWPLP5AL(String s) {
if (!s.trim().isEmpty()) {
WPLP5AL = Short.parseShort(s);
} else {
WPLP5AL = Short.MIN_VALUE;
}
}

protected final void initWPLP5AR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP5AR = false;
} else {
WPLP5AR = true;
}
}
}

protected final void initWPLP5AU(String s) {
if (!s.trim().isEmpty()) {
WPLP5AU = Integer.parseInt(s);
} else {
WPLP5AU = Integer.MIN_VALUE;
}
}

protected final void initWPLP5TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP5TE = false;
} else {
WPLP5TE = true;
}
}
}

protected final void initWPLP5TL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP5TL = false;
} else {
WPLP5TL = true;
}
}
}

protected final void initWPLP5TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP5TR = false;
} else {
WPLP5TR = true;
}
}
}

protected final void initWPLP5TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLP5TU = false;
} else {
WPLP5TU = true;
}
}
}

protected final void initWPLPA(String s) {
if (!s.trim().isEmpty()) {
WPLPA = Integer.parseInt(s);
} else {
WPLPA = Integer.MIN_VALUE;
}
}

protected final void initWPLPA2(String s) {
if (!s.trim().isEmpty()) {
WPLPA2 = Integer.parseInt(s);
} else {
WPLPA2 = Integer.MIN_VALUE;
}
}

protected final void initWPLPA3(String s) {
if (!s.trim().isEmpty()) {
WPLPA3 = Short.parseShort(s);
} else {
WPLPA3 = Short.MIN_VALUE;
}
}

protected final void initWPLPA4(String s) {
if (!s.trim().isEmpty()) {
WPLPA4 = Short.parseShort(s);
} else {
WPLPA4 = Short.MIN_VALUE;
}
}

protected final void initWPLPA5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLPA5 = false;
} else {
WPLPA5 = true;
}
}
}

protected final void initWPLPAE(String s) {
if (!s.trim().isEmpty()) {
WPLPAE = Byte.parseByte(s);
} else {
WPLPAE = Byte.MIN_VALUE;
}
}

protected final void initWPLPAL(String s) {
if (!s.trim().isEmpty()) {
WPLPAL = Integer.parseInt(s);
} else {
WPLPAL = Integer.MIN_VALUE;
}
}

protected final void initWPLPAR(String s) {
if (!s.trim().isEmpty()) {
WPLPAR = Byte.parseByte(s);
} else {
WPLPAR = Byte.MIN_VALUE;
}
}

protected final void initWPLPAU(String s) {
if (!s.trim().isEmpty()) {
WPLPAU = Integer.parseInt(s);
} else {
WPLPAU = Integer.MIN_VALUE;
}
}

protected final void initWPLPE(String s) {
if (!s.trim().isEmpty()) {
WPLPE = Byte.parseByte(s);
} else {
WPLPE = Byte.MIN_VALUE;
}
}

protected final void initWPLPE2(String s) {
if (!s.trim().isEmpty()) {
WPLPE2 = Byte.parseByte(s);
} else {
WPLPE2 = Byte.MIN_VALUE;
}
}

protected final void initWPLPE3(String s) {
if (!s.trim().isEmpty()) {
WPLPE3 = Byte.parseByte(s);
} else {
WPLPE3 = Byte.MIN_VALUE;
}
}

protected final void initWPLPE4(String s) {
if (!s.trim().isEmpty()) {
WPLPE4 = Byte.parseByte(s);
} else {
WPLPE4 = Byte.MIN_VALUE;
}
}

protected final void initWPLPE5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLPE5 = false;
} else {
WPLPE5 = true;
}
}
}

protected final void initWPLPEM(String s) {
if (!s.trim().isEmpty()) {
WPLPEM = Byte.parseByte(s);
} else {
WPLPEM = Byte.MIN_VALUE;
}
}

protected final void initWPLPEM2(String s) {
if (!s.trim().isEmpty()) {
WPLPEM2 = Byte.parseByte(s);
} else {
WPLPEM2 = Byte.MIN_VALUE;
}
}

protected final void initWPLPEM3(String s) {
if (!s.trim().isEmpty()) {
WPLPEM3 = Byte.parseByte(s);
} else {
WPLPEM3 = Byte.MIN_VALUE;
}
}

protected final void initWPLPEM4(String s) {
if (!s.trim().isEmpty()) {
WPLPEM4 = Byte.parseByte(s);
} else {
WPLPEM4 = Byte.MIN_VALUE;
}
}

protected final void initWPLPEM5(String s) {
if (!s.trim().isEmpty()) {
WPLPEM5 = Byte.parseByte(s);
} else {
WPLPEM5 = Byte.MIN_VALUE;
}
}

protected final void initWPLPEY(String s) {
if (!s.trim().isEmpty()) {
WPLPEY = Short.parseShort(s);
} else {
WPLPEY = Short.MIN_VALUE;
}
}

protected final void initWPLPEY2(String s) {
if (!s.trim().isEmpty()) {
WPLPEY2 = Short.parseShort(s);
} else {
WPLPEY2 = Short.MIN_VALUE;
}
}

protected final void initWPLPEY3(String s) {
if (!s.trim().isEmpty()) {
WPLPEY3 = Short.parseShort(s);
} else {
WPLPEY3 = Short.MIN_VALUE;
}
}

protected final void initWPLPEY4(String s) {
if (!s.trim().isEmpty()) {
WPLPEY4 = Short.parseShort(s);
} else {
WPLPEY4 = Short.MIN_VALUE;
}
}

protected final void initWPLPEY5(String s) {
if (!s.trim().isEmpty()) {
WPLPEY5 = Short.parseShort(s);
} else {
WPLPEY5 = Short.MIN_VALUE;
}
}

protected final void initWPLPSM(String s) {
if (!s.trim().isEmpty()) {
WPLPSM = Byte.parseByte(s);
} else {
WPLPSM = Byte.MIN_VALUE;
}
}

protected final void initWPLPSM2(String s) {
if (!s.trim().isEmpty()) {
WPLPSM2 = Byte.parseByte(s);
} else {
WPLPSM2 = Byte.MIN_VALUE;
}
}

protected final void initWPLPSM3(String s) {
if (!s.trim().isEmpty()) {
WPLPSM3 = Byte.parseByte(s);
} else {
WPLPSM3 = Byte.MIN_VALUE;
}
}

protected final void initWPLPSM4(String s) {
if (!s.trim().isEmpty()) {
WPLPSM4 = Byte.parseByte(s);
} else {
WPLPSM4 = Byte.MIN_VALUE;
}
}

protected final void initWPLPSM5(String s) {
if (!s.trim().isEmpty()) {
WPLPSM5 = Byte.parseByte(s);
} else {
WPLPSM5 = Byte.MIN_VALUE;
}
}

protected final void initWPLPSY(String s) {
if (!s.trim().isEmpty()) {
WPLPSY = Short.parseShort(s);
} else {
WPLPSY = Short.MIN_VALUE;
}
}

protected final void initWPLPSY2(String s) {
if (!s.trim().isEmpty()) {
WPLPSY2 = Short.parseShort(s);
} else {
WPLPSY2 = Short.MIN_VALUE;
}
}

protected final void initWPLPSY3(String s) {
if (!s.trim().isEmpty()) {
WPLPSY3 = Short.parseShort(s);
} else {
WPLPSY3 = Short.MIN_VALUE;
}
}

protected final void initWPLPSY4(String s) {
if (!s.trim().isEmpty()) {
WPLPSY4 = Short.parseShort(s);
} else {
WPLPSY4 = Short.MIN_VALUE;
}
}

protected final void initWPLPSY5(String s) {
if (!s.trim().isEmpty()) {
WPLPSY5 = Short.parseShort(s);
} else {
WPLPSY5 = Short.MIN_VALUE;
}
}

protected final void initWPLPTE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLPTE = false;
} else {
WPLPTE = true;
}
}
}

protected final void initWPLPTL(String s) {
if (!s.trim().isEmpty()) {
WPLPTL = Short.parseShort(s);
} else {
WPLPTL = Short.MIN_VALUE;
}
}

protected final void initWPLPTR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLPTR = false;
} else {
WPLPTR = true;
}
}
}

protected final void initWPLPTU(String s) {
if (!s.trim().isEmpty()) {
WPLPTU = Short.parseShort(s);
} else {
WPLPTU = Short.MIN_VALUE;
}
}

protected final void initWPLRCM(String s) {
if (!s.trim().isEmpty()) {
WPLRCM = Byte.parseByte(s);
} else {
WPLRCM = Byte.MIN_VALUE;
}
}

protected final void initWPLRCM2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLRCM2 = false;
} else {
WPLRCM2 = true;
}
}
}

protected final void initWPLRCM3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLRCM3 = false;
} else {
WPLRCM3 = true;
}
}
}

protected final void initWPLRCM4(String s) {
if (!s.trim().isEmpty()) {
WPLRCM4 = Byte.parseByte(s);
} else {
WPLRCM4 = Byte.MIN_VALUE;
}
}

protected final void initWPLRCM5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLRCM5 = false;
} else {
WPLRCM5 = true;
}
}
}

protected final void initWPLRCY(String s) {
if (!s.trim().isEmpty()) {
WPLRCY = Short.parseShort(s);
} else {
WPLRCY = Short.MIN_VALUE;
}
}

protected final void initWPLRCY2(String s) {
if (!s.trim().isEmpty()) {
WPLRCY2 = Short.parseShort(s);
} else {
WPLRCY2 = Short.MIN_VALUE;
}
}

protected final void initWPLRCY3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLRCY3 = false;
} else {
WPLRCY3 = true;
}
}
}

protected final void initWPLRCY4(String s) {
if (!s.trim().isEmpty()) {
WPLRCY4 = Short.parseShort(s);
} else {
WPLRCY4 = Short.MIN_VALUE;
}
}

protected final void initWPLRCY5(String s) {
if (!s.trim().isEmpty()) {
WPLRCY5 = Short.parseShort(s);
} else {
WPLRCY5 = Short.MIN_VALUE;
}
}

protected final void initWPLU2E(String s) {
if (!s.trim().isEmpty()) {
WPLU2E = Byte.parseByte(s);
} else {
WPLU2E = Byte.MIN_VALUE;
}
}

protected final void initWPLU2L(String s) {
if (!s.trim().isEmpty()) {
WPLU2L = Integer.parseInt(s);
} else {
WPLU2L = Integer.MIN_VALUE;
}
}

protected final void initWPLU2R(String s) {
if (!s.trim().isEmpty()) {
WPLU2R = Byte.parseByte(s);
} else {
WPLU2R = Byte.MIN_VALUE;
}
}

protected final void initWPLU2U(String s) {
if (!s.trim().isEmpty()) {
WPLU2U = Integer.parseInt(s);
} else {
WPLU2U = Integer.MIN_VALUE;
}
}

protected final void initWPLU3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLU3E = false;
} else {
WPLU3E = true;
}
}
}

protected final void initWPLU3L(String s) {
if (!s.trim().isEmpty()) {
WPLU3L = Short.parseShort(s);
} else {
WPLU3L = Short.MIN_VALUE;
}
}

protected final void initWPLU3R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLU3R = false;
} else {
WPLU3R = true;
}
}
}

protected final void initWPLU3U(String s) {
if (!s.trim().isEmpty()) {
WPLU3U = Short.parseShort(s);
} else {
WPLU3U = Short.MIN_VALUE;
}
}

protected final void initWPLU4E(String s) {
if (!s.trim().isEmpty()) {
WPLU4E = Byte.parseByte(s);
} else {
WPLU4E = Byte.MIN_VALUE;
}
}

protected final void initWPLU4L(String s) {
if (!s.trim().isEmpty()) {
WPLU4L = Integer.parseInt(s);
} else {
WPLU4L = Integer.MIN_VALUE;
}
}

protected final void initWPLU4R(String s) {
if (!s.trim().isEmpty()) {
WPLU4R = Byte.parseByte(s);
} else {
WPLU4R = Byte.MIN_VALUE;
}
}

protected final void initWPLU4U(String s) {
if (!s.trim().isEmpty()) {
WPLU4U = Integer.parseInt(s);
} else {
WPLU4U = Integer.MIN_VALUE;
}
}

protected final void initWPLU5E(String s) {
if (!s.trim().isEmpty()) {
WPLU5E = Byte.parseByte(s);
} else {
WPLU5E = Byte.MIN_VALUE;
}
}

protected final void initWPLU5L(String s) {
if (!s.trim().isEmpty()) {
WPLU5L = Integer.parseInt(s);
} else {
WPLU5L = Integer.MIN_VALUE;
}
}

protected final void initWPLU5R(String s) {
if (!s.trim().isEmpty()) {
WPLU5R = Byte.parseByte(s);
} else {
WPLU5R = Byte.MIN_VALUE;
}
}

protected final void initWPLU5U(String s) {
if (!s.trim().isEmpty()) {
WPLU5U = Integer.parseInt(s);
} else {
WPLU5U = Integer.MIN_VALUE;
}
}

protected final void initWPLU6E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLU6E = false;
} else {
WPLU6E = true;
}
}
}

protected final void initWPLU6L(String s) {
if (!s.trim().isEmpty()) {
WPLU6L = Short.parseShort(s);
} else {
WPLU6L = Short.MIN_VALUE;
}
}

protected final void initWPLU6R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLU6R = false;
} else {
WPLU6R = true;
}
}
}

protected final void initWPLU6U(String s) {
if (!s.trim().isEmpty()) {
WPLU6U = Short.parseShort(s);
} else {
WPLU6U = Short.MIN_VALUE;
}
}

protected final void initWPLUE(String s) {
if (!s.trim().isEmpty()) {
WPLUE = Byte.parseByte(s);
} else {
WPLUE = Byte.MIN_VALUE;
}
}

protected final void initWPLUL(String s) {
if (!s.trim().isEmpty()) {
WPLUL = Integer.parseInt(s);
} else {
WPLUL = Integer.MIN_VALUE;
}
}

protected final void initWPLUM2E(String s) {
if (!s.trim().isEmpty()) {
WPLUM2E = Byte.parseByte(s);
} else {
WPLUM2E = Byte.MIN_VALUE;
}
}

protected final void initWPLUM2L(String s) {
if (!s.trim().isEmpty()) {
WPLUM2L = Integer.parseInt(s);
} else {
WPLUM2L = Integer.MIN_VALUE;
}
}

protected final void initWPLUM2R(String s) {
if (!s.trim().isEmpty()) {
WPLUM2R = Byte.parseByte(s);
} else {
WPLUM2R = Byte.MIN_VALUE;
}
}

protected final void initWPLUM2U(String s) {
if (!s.trim().isEmpty()) {
WPLUM2U = Integer.parseInt(s);
} else {
WPLUM2U = Integer.MIN_VALUE;
}
}

protected final void initWPLUM3E(String s) {
if (!s.trim().isEmpty()) {
WPLUM3E = Byte.parseByte(s);
} else {
WPLUM3E = Byte.MIN_VALUE;
}
}

protected final void initWPLUM3L(String s) {
if (!s.trim().isEmpty()) {
WPLUM3L = Short.parseShort(s);
} else {
WPLUM3L = Short.MIN_VALUE;
}
}

protected final void initWPLUM3R(String s) {
if (!s.trim().isEmpty()) {
WPLUM3R = Byte.parseByte(s);
} else {
WPLUM3R = Byte.MIN_VALUE;
}
}

protected final void initWPLUM3U(String s) {
if (!s.trim().isEmpty()) {
WPLUM3U = Short.parseShort(s);
} else {
WPLUM3U = Short.MIN_VALUE;
}
}

protected final void initWPLUME(String s) {
if (!s.trim().isEmpty()) {
WPLUME = Byte.parseByte(s);
} else {
WPLUME = Byte.MIN_VALUE;
}
}

protected final void initWPLUML(String s) {
if (!s.trim().isEmpty()) {
WPLUML = Integer.parseInt(s);
} else {
WPLUML = Integer.MIN_VALUE;
}
}

protected final void initWPLUMP2(String s) {
if (!s.trim().isEmpty()) {
WPLUMP2 = Integer.parseInt(s);
} else {
WPLUMP2 = Integer.MIN_VALUE;
}
}

protected final void initWPLUMP3(String s) {
if (!s.trim().isEmpty()) {
WPLUMP3 = Integer.parseInt(s);
} else {
WPLUMP3 = Integer.MIN_VALUE;
}
}

protected final void initWPLUMP4(String s) {
if (!s.trim().isEmpty()) {
WPLUMP4 = Integer.parseInt(s);
} else {
WPLUMP4 = Integer.MIN_VALUE;
}
}

protected final void initWPLUMP5(String s) {
if (!s.trim().isEmpty()) {
WPLUMP5 = Integer.parseInt(s);
} else {
WPLUMP5 = Integer.MIN_VALUE;
}
}

protected final void initWPLUMP6(String s) {
if (!s.trim().isEmpty()) {
WPLUMP6 = Short.parseShort(s);
} else {
WPLUMP6 = Short.MIN_VALUE;
}
}

protected final void initWPLUMPE(String s) {
if (!s.trim().isEmpty()) {
WPLUMPE = Byte.parseByte(s);
} else {
WPLUMPE = Byte.MIN_VALUE;
}
}

protected final void initWPLUMPL(String s) {
if (!s.trim().isEmpty()) {
WPLUMPL = Double.parseDouble(s);
} else {
WPLUMPL = Double.NaN;
}
}

protected final void initWPLUMPR(String s) {
if (!s.trim().isEmpty()) {
WPLUMPR = Byte.parseByte(s);
} else {
WPLUMPR = Byte.MIN_VALUE;
}
}

protected final void initWPLUMPU(String s) {
if (!s.trim().isEmpty()) {
WPLUMPU = Double.parseDouble(s);
} else {
WPLUMPU = Double.NaN;
}
}

protected final void initWPLUMR(String s) {
if (!s.trim().isEmpty()) {
WPLUMR = Byte.parseByte(s);
} else {
WPLUMR = Byte.MIN_VALUE;
}
}

protected final void initWPLUMU(String s) {
if (!s.trim().isEmpty()) {
WPLUMU = Integer.parseInt(s);
} else {
WPLUMU = Integer.MIN_VALUE;
}
}

protected final void initWPLUPA(String s) {
if (!s.trim().isEmpty()) {
WPLUPA = Double.parseDouble(s);
} else {
WPLUPA = Double.NaN;
}
}

protected final void initWPLUPA2(String s) {
if (!s.trim().isEmpty()) {
WPLUPA2 = Integer.parseInt(s);
} else {
WPLUPA2 = Integer.MIN_VALUE;
}
}

protected final void initWPLUPA3(String s) {
if (!s.trim().isEmpty()) {
WPLUPA3 = Integer.parseInt(s);
} else {
WPLUPA3 = Integer.MIN_VALUE;
}
}

protected final void initWPLUPS(String s) {
if (!s.trim().isEmpty()) {
WPLUPS = Byte.parseByte(s);
} else {
WPLUPS = Byte.MIN_VALUE;
}
}

protected final void initWPLUPS2(String s) {
if (!s.trim().isEmpty()) {
WPLUPS2 = Byte.parseByte(s);
} else {
WPLUPS2 = Byte.MIN_VALUE;
}
}

protected final void initWPLUPS3(String s) {
if (!s.trim().isEmpty()) {
WPLUPS3 = Byte.parseByte(s);
} else {
WPLUPS3 = Byte.MIN_VALUE;
}
}

protected final void initWPLUR(String s) {
if (!s.trim().isEmpty()) {
WPLUR = Byte.parseByte(s);
} else {
WPLUR = Byte.MIN_VALUE;
}
}

protected final void initWPLUU(String s) {
if (!s.trim().isEmpty()) {
WPLUU = Integer.parseInt(s);
} else {
WPLUU = Integer.MIN_VALUE;
}
}

protected final void initWPMANPP(String s) {
if (!s.trim().isEmpty()) {
WPMANPP = Byte.parseByte(s);
} else {
WPMANPP = Byte.MIN_VALUE;
}
}

protected final void initWPMANSP(String s) {
if (!s.trim().isEmpty()) {
WPMANSP = Byte.parseByte(s);
} else {
WPMANSP = Byte.MIN_VALUE;
}
}

protected final void initWPMC2(String s) {
if (!s.trim().isEmpty()) {
WPMC2 = Byte.parseByte(s);
} else {
WPMC2 = Byte.MIN_VALUE;
}
}

protected final void initWPMC3(String s) {
if (!s.trim().isEmpty()) {
WPMC3 = Byte.parseByte(s);
} else {
WPMC3 = Byte.MIN_VALUE;
}
}

protected final void initWPMC4(String s) {
if (!s.trim().isEmpty()) {
WPMC4 = Byte.parseByte(s);
} else {
WPMC4 = Byte.MIN_VALUE;
}
}

protected final void initWPMC5(String s) {
if (!s.trim().isEmpty()) {
WPMC5 = Byte.parseByte(s);
} else {
WPMC5 = Byte.MIN_VALUE;
}
}

protected final void initWPMC6(String s) {
if (!s.trim().isEmpty()) {
WPMC6 = Byte.parseByte(s);
} else {
WPMC6 = Byte.MIN_VALUE;
}
}

protected final void initWPMCA2(String s) {
if (!s.trim().isEmpty()) {
WPMCA2 = Short.parseShort(s);
} else {
WPMCA2 = Short.MIN_VALUE;
}
}

protected final void initWPMCA3(String s) {
if (!s.trim().isEmpty()) {
WPMCA3 = Short.parseShort(s);
} else {
WPMCA3 = Short.MIN_VALUE;
}
}

protected final void initWPMCA4(String s) {
if (!s.trim().isEmpty()) {
WPMCA4 = Short.parseShort(s);
} else {
WPMCA4 = Short.MIN_VALUE;
}
}

protected final void initWPMCA5(String s) {
if (!s.trim().isEmpty()) {
WPMCA5 = Byte.parseByte(s);
} else {
WPMCA5 = Byte.MIN_VALUE;
}
}

protected final void initWPMCA6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPMCA6 = false;
} else {
WPMCA6 = true;
}
}
}

protected final void initWPMCAF2(String s) {
if (!s.trim().isEmpty()) {
WPMCAF2 = Byte.parseByte(s);
} else {
WPMCAF2 = Byte.MIN_VALUE;
}
}

protected final void initWPMCAF3(String s) {
if (!s.trim().isEmpty()) {
WPMCAF3 = Byte.parseByte(s);
} else {
WPMCAF3 = Byte.MIN_VALUE;
}
}

protected final void initWPMCAF4(String s) {
if (!s.trim().isEmpty()) {
WPMCAF4 = Byte.parseByte(s);
} else {
WPMCAF4 = Byte.MIN_VALUE;
}
}

protected final void initWPMCAF5(String s) {
if (!s.trim().isEmpty()) {
WPMCAF5 = Byte.parseByte(s);
} else {
WPMCAF5 = Byte.MIN_VALUE;
}
}

protected final void initWPMCAF6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMCAF6 = false;
} else {
WPMCAF6 = true;
}
}
}

protected final void initWPMCON2(String s) {
if (!s.trim().isEmpty()) {
WPMCON2 = Byte.parseByte(s);
} else {
WPMCON2 = Byte.MIN_VALUE;
}
}

protected final void initWPMCON3(String s) {
if (!s.trim().isEmpty()) {
WPMCON3 = Byte.parseByte(s);
} else {
WPMCON3 = Byte.MIN_VALUE;
}
}

protected final void initWPMCON4(String s) {
if (!s.trim().isEmpty()) {
WPMCON4 = Byte.parseByte(s);
} else {
WPMCON4 = Byte.MIN_VALUE;
}
}

protected final void initWPMCON5(String s) {
if (!s.trim().isEmpty()) {
WPMCON5 = Byte.parseByte(s);
} else {
WPMCON5 = Byte.MIN_VALUE;
}
}

protected final void initWPMCRTP(String s) {
if (!s.trim().isEmpty()) {
WPMCRTP = Byte.parseByte(s);
} else {
WPMCRTP = Byte.MIN_VALUE;
}
}

protected final void initWPMCRTS(String s) {
if (!s.trim().isEmpty()) {
WPMCRTS = Byte.parseByte(s);
} else {
WPMCRTS = Byte.MIN_VALUE;
}
}

protected final void initWPMEC2(String s) {
if (!s.trim().isEmpty()) {
WPMEC2 = Byte.parseByte(s);
} else {
WPMEC2 = Byte.MIN_VALUE;
}
}

protected final void initWPMEC3(String s) {
if (!s.trim().isEmpty()) {
WPMEC3 = Byte.parseByte(s);
} else {
WPMEC3 = Byte.MIN_VALUE;
}
}

protected final void initWPMEC4(String s) {
if (!s.trim().isEmpty()) {
WPMEC4 = Byte.parseByte(s);
} else {
WPMEC4 = Byte.MIN_VALUE;
}
}

protected final void initWPMEC5(String s) {
if (!s.trim().isEmpty()) {
WPMEC5 = Byte.parseByte(s);
} else {
WPMEC5 = Byte.MIN_VALUE;
}
}

protected final void initWPMFQ(String s) {
if (!s.trim().isEmpty()) {
WPMFQ = Byte.parseByte(s);
} else {
WPMFQ = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC(String s) {
if (!s.trim().isEmpty()) {
WPMFRC = Byte.parseByte(s);
} else {
WPMFRC = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC2(String s) {
if (!s.trim().isEmpty()) {
WPMFRC2 = Byte.parseByte(s);
} else {
WPMFRC2 = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC3(String s) {
if (!s.trim().isEmpty()) {
WPMFRC3 = Byte.parseByte(s);
} else {
WPMFRC3 = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC4(String s) {
if (!s.trim().isEmpty()) {
WPMFRC4 = Byte.parseByte(s);
} else {
WPMFRC4 = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC5(String s) {
if (!s.trim().isEmpty()) {
WPMFRC5 = Byte.parseByte(s);
} else {
WPMFRC5 = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC6(String s) {
if (!s.trim().isEmpty()) {
WPMFRC6 = Byte.parseByte(s);
} else {
WPMFRC6 = Byte.MIN_VALUE;
}
}

protected final void initWPMHIE(String s) {
if (!s.trim().isEmpty()) {
WPMHIE = Byte.parseByte(s);
} else {
WPMHIE = Byte.MIN_VALUE;
}
}

protected final void initWPMHIL(String s) {
if (!s.trim().isEmpty()) {
WPMHIL = Short.parseShort(s);
} else {
WPMHIL = Short.MIN_VALUE;
}
}

protected final void initWPMHIR(String s) {
if (!s.trim().isEmpty()) {
WPMHIR = Byte.parseByte(s);
} else {
WPMHIR = Byte.MIN_VALUE;
}
}

protected final void initWPMHIU(String s) {
if (!s.trim().isEmpty()) {
WPMHIU = Short.parseShort(s);
} else {
WPMHIU = Short.MIN_VALUE;
}
}

protected final void initWPMLAS(String s) {
if (!s.trim().isEmpty()) {
WPMLAS = Integer.parseInt(s);
} else {
WPMLAS = Integer.MIN_VALUE;
}
}

protected final void initWPMLAS2(String s) {
if (!s.trim().isEmpty()) {
WPMLAS2 = Integer.parseInt(s);
} else {
WPMLAS2 = Integer.MIN_VALUE;
}
}

protected final void initWPMLAS3(String s) {
if (!s.trim().isEmpty()) {
WPMLAS3 = Short.parseShort(s);
} else {
WPMLAS3 = Short.MIN_VALUE;
}
}

protected final void initWPMLAS4(String s) {
if (!s.trim().isEmpty()) {
WPMLAS4 = Short.parseShort(s);
} else {
WPMLAS4 = Short.MIN_VALUE;
}
}

protected final void initWPMLAS5(String s) {
if (!s.trim().isEmpty()) {
WPMLAS5 = Short.parseShort(s);
} else {
WPMLAS5 = Short.MIN_VALUE;
}
}

protected final void initWPMMIN2(String s) {
if (!s.trim().isEmpty()) {
WPMMIN2 = Byte.parseByte(s);
} else {
WPMMIN2 = Byte.MIN_VALUE;
}
}

protected final void initWPMMIN3(String s) {
if (!s.trim().isEmpty()) {
WPMMIN3 = Byte.parseByte(s);
} else {
WPMMIN3 = Byte.MIN_VALUE;
}
}

protected final void initWPMMIN4(String s) {
if (!s.trim().isEmpty()) {
WPMMIN4 = Byte.parseByte(s);
} else {
WPMMIN4 = Byte.MIN_VALUE;
}
}

protected final void initWPMMIN5(String s) {
if (!s.trim().isEmpty()) {
WPMMIN5 = Byte.parseByte(s);
} else {
WPMMIN5 = Byte.MIN_VALUE;
}
}

protected final void initWPMMIN6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMMIN6 = false;
} else {
WPMMIN6 = true;
}
}
}

protected final void initWPMPAH(String s) {
if (!s.trim().isEmpty()) {
WPMPAH = Integer.parseInt(s);
} else {
WPMPAH = Integer.MIN_VALUE;
}
}

protected final void initWPMPAL(String s) {
if (!s.trim().isEmpty()) {
WPMPAL = Integer.parseInt(s);
} else {
WPMPAL = Integer.MIN_VALUE;
}
}

protected final void initWPMRC(String s) {
if (!s.trim().isEmpty()) {
WPMRC = Short.parseShort(s);
} else {
WPMRC = Short.MIN_VALUE;
}
}

protected final void initWPMRC2(String s) {
if (!s.trim().isEmpty()) {
WPMRC2 = Short.parseShort(s);
} else {
WPMRC2 = Short.MIN_VALUE;
}
}

protected final void initWPMRC3(String s) {
if (!s.trim().isEmpty()) {
WPMRC3 = Short.parseShort(s);
} else {
WPMRC3 = Short.MIN_VALUE;
}
}

protected final void initWPMRC4(String s) {
if (!s.trim().isEmpty()) {
WPMRC4 = Byte.parseByte(s);
} else {
WPMRC4 = Byte.MIN_VALUE;
}
}

protected final void initWPMRC5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMRC5 = false;
} else {
WPMRC5 = true;
}
}
}

protected final void initWPMRCP(String s) {
if (!s.trim().isEmpty()) {
WPMRCP = Byte.parseByte(s);
} else {
WPMRCP = Byte.MIN_VALUE;
}
}

protected final void initWPMRCP2(String s) {
if (!s.trim().isEmpty()) {
WPMRCP2 = Byte.parseByte(s);
} else {
WPMRCP2 = Byte.MIN_VALUE;
}
}

protected final void initWPMRCP3(String s) {
if (!s.trim().isEmpty()) {
WPMRCP3 = Byte.parseByte(s);
} else {
WPMRCP3 = Byte.MIN_VALUE;
}
}

protected final void initWPMRCP4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMRCP4 = false;
} else {
WPMRCP4 = true;
}
}
}

protected final void initWPMRCP5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMRCP5 = false;
} else {
WPMRCP5 = true;
}
}
}

protected final void initWPMSAH(String s) {
if (!s.trim().isEmpty()) {
WPMSAH = Integer.parseInt(s);
} else {
WPMSAH = Integer.MIN_VALUE;
}
}

protected final void initWPMSAL(String s) {
if (!s.trim().isEmpty()) {
WPMSAL = Integer.parseInt(s);
} else {
WPMSAL = Integer.MIN_VALUE;
}
}

protected final void initWPMSC(String s) {
if (!s.trim().isEmpty()) {
WPMSC = Byte.parseByte(s);
} else {
WPMSC = Byte.MIN_VALUE;
}
}

protected final void initWPMSC2(String s) {
if (!s.trim().isEmpty()) {
WPMSC2 = Byte.parseByte(s);
} else {
WPMSC2 = Byte.MIN_VALUE;
}
}

protected final void initWPMSC3(String s) {
if (!s.trim().isEmpty()) {
WPMSC3 = Byte.parseByte(s);
} else {
WPMSC3 = Byte.MIN_VALUE;
}
}

protected final void initWPMSFQ(String s) {
if (!s.trim().isEmpty()) {
WPMSFQ = Byte.parseByte(s);
} else {
WPMSFQ = Byte.MIN_VALUE;
}
}

protected final void initWPMSQ(String s) {
if (!s.trim().isEmpty()) {
WPMSQ = Byte.parseByte(s);
} else {
WPMSQ = Byte.MIN_VALUE;
}
}

protected final void initWPMSSQ(String s) {
if (!s.trim().isEmpty()) {
WPMSSQ = Byte.parseByte(s);
} else {
WPMSSQ = Byte.MIN_VALUE;
}
}

protected final void initWPMSTQ(String s) {
if (!s.trim().isEmpty()) {
WPMSTQ = Byte.parseByte(s);
} else {
WPMSTQ = Byte.MIN_VALUE;
}
}

protected final void initWPMTQ(String s) {
if (!s.trim().isEmpty()) {
WPMTQ = Byte.parseByte(s);
} else {
WPMTQ = Byte.MIN_VALUE;
}
}

protected final void initWPMUC(String s) {
if (!s.trim().isEmpty()) {
WPMUC = Byte.parseByte(s);
} else {
WPMUC = Byte.MIN_VALUE;
}
}

protected final void initWPMUC2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMUC2 = false;
} else {
WPMUC2 = true;
}
}
}

protected final void initWPMUC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMUC3 = false;
} else {
WPMUC3 = true;
}
}
}

protected final void initWPMUC4(String s) {
if (!s.trim().isEmpty()) {
WPMUC4 = Byte.parseByte(s);
} else {
WPMUC4 = Byte.MIN_VALUE;
}
}

protected final void initWPMUC5(String s) {
if (!s.trim().isEmpty()) {
WPMUC5 = Byte.parseByte(s);
} else {
WPMUC5 = Byte.MIN_VALUE;
}
}

protected final void initWPMUC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMUC6 = false;
} else {
WPMUC6 = true;
}
}
}

protected final void initWPMYNJ(String s) {
if (!s.trim().isEmpty()) {
WPMYNJ = Byte.parseByte(s);
} else {
WPMYNJ = Byte.MIN_VALUE;
}
}

protected final void initWPNCH17(String s) {
if (!s.trim().isEmpty()) {
WPNCH17 = Byte.parseByte(s);
} else {
WPNCH17 = Byte.MIN_VALUE;
}
}

protected final void initWPNCH18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNCH18 = false;
} else {
WPNCH18 = true;
}
}
}

protected final void initWPNCHB1(String s) {
if (!s.trim().isEmpty()) {
WPNCHB1 = Byte.parseByte(s);
} else {
WPNCHB1 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHB2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNCHB2 = false;
} else {
WPNCHB2 = true;
}
}
}

protected final void initWPNCHG1(String s) {
if (!s.trim().isEmpty()) {
WPNCHG1 = Byte.parseByte(s);
} else {
WPNCHG1 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHG2(String s) {
if (!s.trim().isEmpty()) {
WPNCHG2 = Byte.parseByte(s);
} else {
WPNCHG2 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHG3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNCHG3 = false;
} else {
WPNCHG3 = true;
}
}
}

protected final void initWPNCHGA(String s) {
if (!s.trim().isEmpty()) {
WPNCHGA = Byte.parseByte(s);
} else {
WPNCHGA = Byte.MIN_VALUE;
}
}

protected final void initWPNCHGN(String s) {
if (!s.trim().isEmpty()) {
WPNCHGN = Byte.parseByte(s);
} else {
WPNCHGN = Byte.MIN_VALUE;
}
}

protected final void initWPNCHGO(String s) {
if (!s.trim().isEmpty()) {
WPNCHGO = Byte.parseByte(s);
} else {
WPNCHGO = Byte.MIN_VALUE;
}
}

protected final void initWPNCHM1(String s) {
if (!s.trim().isEmpty()) {
WPNCHM1 = Byte.parseByte(s);
} else {
WPNCHM1 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHM2(String s) {
if (!s.trim().isEmpty()) {
WPNCHM2 = Byte.parseByte(s);
} else {
WPNCHM2 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHM3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNCHM3 = false;
} else {
WPNCHM3 = true;
}
}
}

protected final void initWPNIFP(String s) {
if (!s.trim().isEmpty()) {
WPNIFP = Byte.parseByte(s);
} else {
WPNIFP = Byte.MIN_VALUE;
}
}

protected final void initWPNIFP2(String s) {
if (!s.trim().isEmpty()) {
WPNIFP2 = Byte.parseByte(s);
} else {
WPNIFP2 = Byte.MIN_VALUE;
}
}

protected final void initWPNIFP3(String s) {
if (!s.trim().isEmpty()) {
WPNIFP3 = Byte.parseByte(s);
} else {
WPNIFP3 = Byte.MIN_VALUE;
}
}

protected final void initWPNIFP4(String s) {
if (!s.trim().isEmpty()) {
WPNIFP4 = Byte.parseByte(s);
} else {
WPNIFP4 = Byte.MIN_VALUE;
}
}

protected final void initWPNIFP5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNIFP5 = false;
} else {
WPNIFP5 = true;
}
}
}

protected final void initWPNIRR2(String s) {
if (!s.trim().isEmpty()) {
WPNIRR2 = Byte.parseByte(s);
} else {
WPNIRR2 = Byte.MIN_VALUE;
}
}

protected final void initWPNIRR3(String s) {
if (!s.trim().isEmpty()) {
WPNIRR3 = Byte.parseByte(s);
} else {
WPNIRR3 = Byte.MIN_VALUE;
}
}

protected final void initWPNIRR4(String s) {
if (!s.trim().isEmpty()) {
WPNIRR4 = Byte.parseByte(s);
} else {
WPNIRR4 = Byte.MIN_VALUE;
}
}

protected final void initWPNIRR5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNIRR5 = false;
} else {
WPNIRR5 = true;
}
}
}

protected final void initWPNOL12(String s) {
if (!s.trim().isEmpty()) {
WPNOL12 = Byte.parseByte(s);
} else {
WPNOL12 = Byte.MIN_VALUE;
}
}

protected final void initWPNOL13(String s) {
if (!s.trim().isEmpty()) {
WPNOL13 = Byte.parseByte(s);
} else {
WPNOL13 = Byte.MIN_VALUE;
}
}

protected final void initWPNOL14(String s) {
if (!s.trim().isEmpty()) {
WPNOL14 = Byte.parseByte(s);
} else {
WPNOL14 = Byte.MIN_VALUE;
}
}

protected final void initWPNOL15(String s) {
if (!s.trim().isEmpty()) {
WPNOL15 = Byte.parseByte(s);
} else {
WPNOL15 = Byte.MIN_VALUE;
}
}

protected final void initWPNOL16(String s) {
if (!s.trim().isEmpty()) {
WPNOL16 = Byte.parseByte(s);
} else {
WPNOL16 = Byte.MIN_VALUE;
}
}

protected final void initWPNOLK1(String s) {
if (!s.trim().isEmpty()) {
WPNOLK1 = Byte.parseByte(s);
} else {
WPNOLK1 = Byte.MIN_VALUE;
}
}

protected final void initWPNOLK2(String s) {
if (!s.trim().isEmpty()) {
WPNOLK2 = Byte.parseByte(s);
} else {
WPNOLK2 = Byte.MIN_VALUE;
}
}

protected final void initWPNOLK3(String s) {
if (!s.trim().isEmpty()) {
WPNOLK3 = Byte.parseByte(s);
} else {
WPNOLK3 = Byte.MIN_VALUE;
}
}

protected final void initWPNOLK4(String s) {
if (!s.trim().isEmpty()) {
WPNOLK4 = Byte.parseByte(s);
} else {
WPNOLK4 = Byte.MIN_VALUE;
}
}

protected final void initWPNOLK5(String s) {
if (!s.trim().isEmpty()) {
WPNOLK5 = Byte.parseByte(s);
} else {
WPNOLK5 = Byte.MIN_VALUE;
}
}

protected final void initWPNOSC(String s) {
if (!s.trim().isEmpty()) {
WPNOSC = Byte.parseByte(s);
} else {
WPNOSC = Byte.MIN_VALUE;
}
}

protected final void initWPNRA2(String s) {
if (!s.trim().isEmpty()) {
WPNRA2 = Byte.parseByte(s);
} else {
WPNRA2 = Byte.MIN_VALUE;
}
}

protected final void initWPNRA3(String s) {
if (!s.trim().isEmpty()) {
WPNRA3 = Byte.parseByte(s);
} else {
WPNRA3 = Byte.MIN_VALUE;
}
}

protected final void initWPNRA4(String s) {
if (!s.trim().isEmpty()) {
WPNRA4 = Byte.parseByte(s);
} else {
WPNRA4 = Byte.MIN_VALUE;
}
}

protected final void initWPNRA5(String s) {
if (!s.trim().isEmpty()) {
WPNRA5 = Byte.parseByte(s);
} else {
WPNRA5 = Byte.MIN_VALUE;
}
}

protected final void initWPNRA6(String s) {
if (!s.trim().isEmpty()) {
WPNRA6 = Byte.parseByte(s);
} else {
WPNRA6 = Byte.MIN_VALUE;
}
}

protected final void initWPNUM(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM = false;
} else {
WPNUM = true;
}
}
}

protected final void initWPNUM11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM11 = false;
} else {
WPNUM11 = true;
}
}
}

protected final void initWPNUM12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM12 = false;
} else {
WPNUM12 = true;
}
}
}

protected final void initWPNUM14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM14 = false;
} else {
WPNUM14 = true;
}
}
}

protected final void initWPNUM15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM15 = false;
} else {
WPNUM15 = true;
}
}
}

protected final void initWPNUM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM16 = false;
} else {
WPNUM16 = true;
}
}
}

protected final void initWPNUM17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM17 = false;
} else {
WPNUM17 = true;
}
}
}

protected final void initWPNUM18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM18 = false;
} else {
WPNUM18 = true;
}
}
}

protected final void initWPNUM19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 4) {
WPNUM19 = false;
} else {
WPNUM19 = true;
}
}
}

protected final void initWPNUM2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM2 = false;
} else {
WPNUM2 = true;
}
}
}

protected final void initWPNUM20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 4) {
WPNUM20 = false;
} else {
WPNUM20 = true;
}
}
}

protected final void initWPNUM21(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM21 = false;
} else {
WPNUM21 = true;
}
}
}

protected final void initWPNUM22(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 5) {
WPNUM22 = false;
} else {
WPNUM22 = true;
}
}
}

protected final void initWPNUM23(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 6) {
WPNUM23 = false;
} else {
WPNUM23 = true;
}
}
}

protected final void initWPNUM24(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 5) {
WPNUM24 = false;
} else {
WPNUM24 = true;
}
}
}

protected final void initWPNUM25(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 6) {
WPNUM25 = false;
} else {
WPNUM25 = true;
}
}
}

protected final void initWPNUM26(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM26 = false;
} else {
WPNUM26 = true;
}
}
}

protected final void initWPNUM27(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM27 = false;
} else {
WPNUM27 = true;
}
}
}

protected final void initWPNUM28(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM28 = false;
} else {
WPNUM28 = true;
}
}
}

protected final void initWPNUM29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM29 = false;
} else {
WPNUM29 = true;
}
}
}

protected final void initWPNUM3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM3 = false;
} else {
WPNUM3 = true;
}
}
}

protected final void initWPNUM30(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM30 = false;
} else {
WPNUM30 = true;
}
}
}

protected final void initWPNUM31(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM31 = false;
} else {
WPNUM31 = true;
}
}
}

protected final void initWPNUM4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM4 = false;
} else {
WPNUM4 = true;
}
}
}

protected final void initWPNUM5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM5 = false;
} else {
WPNUM5 = true;
}
}
}

protected final void initWPNUM6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM6 = false;
} else {
WPNUM6 = true;
}
}
}

protected final void initWPNUM7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM7 = false;
} else {
WPNUM7 = true;
}
}
}

protected final void initWPNUM8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM8 = false;
} else {
WPNUM8 = true;
}
}
}

protected final void initWPNUM9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNUM9 = false;
} else {
WPNUM9 = true;
}
}
}

protected final void initWPOARS(String s) {
if (!s.trim().isEmpty()) {
WPOARS = Byte.parseByte(s);
} else {
WPOARS = Byte.MIN_VALUE;
}
}

protected final void initWPOARS2(String s) {
if (!s.trim().isEmpty()) {
WPOARS2 = Byte.parseByte(s);
} else {
WPOARS2 = Byte.MIN_VALUE;
}
}

protected final void initWPOCHG(String s) {
if (!s.trim().isEmpty()) {
WPOCHG = Byte.parseByte(s);
} else {
WPOCHG = Byte.MIN_VALUE;
}
}

protected final void initWPOJ(String s) {
if (!s.trim().isEmpty()) {
WPOJ = Byte.parseByte(s);
} else {
WPOJ = Byte.MIN_VALUE;
}
}

protected final void initWPOJ2(String s) {
if (!s.trim().isEmpty()) {
WPOJ2 = Byte.parseByte(s);
} else {
WPOJ2 = Byte.MIN_VALUE;
}
}

protected final void initWPOJ3(String s) {
if (!s.trim().isEmpty()) {
WPOJ3 = Byte.parseByte(s);
} else {
WPOJ3 = Byte.MIN_VALUE;
}
}

protected final void initWPOJ4(String s) {
if (!s.trim().isEmpty()) {
WPOJ4 = Byte.parseByte(s);
} else {
WPOJ4 = Byte.MIN_VALUE;
}
}

protected final void initWPOJ5(String s) {
if (!s.trim().isEmpty()) {
WPOJ5 = Byte.parseByte(s);
} else {
WPOJ5 = Byte.MIN_VALUE;
}
}

protected final void initWPOWB(String s) {
if (!s.trim().isEmpty()) {
WPOWB = Byte.parseByte(s);
} else {
WPOWB = Byte.MIN_VALUE;
}
}

protected final void initWPOWB2(String s) {
if (!s.trim().isEmpty()) {
WPOWB2 = Byte.parseByte(s);
} else {
WPOWB2 = Byte.MIN_VALUE;
}
}

protected final void initWPOWB3(String s) {
if (!s.trim().isEmpty()) {
WPOWB3 = Byte.parseByte(s);
} else {
WPOWB3 = Byte.MIN_VALUE;
}
}

protected final void initWPOWB4(String s) {
if (!s.trim().isEmpty()) {
WPOWB4 = Byte.parseByte(s);
} else {
WPOWB4 = Byte.MIN_VALUE;
}
}

protected final void initWPOWB5(String s) {
if (!s.trim().isEmpty()) {
WPOWB5 = Byte.parseByte(s);
} else {
WPOWB5 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY17(String s) {
if (!s.trim().isEmpty()) {
WPPAY17 = Byte.parseByte(s);
} else {
WPPAY17 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY18(String s) {
if (!s.trim().isEmpty()) {
WPPAY18 = Byte.parseByte(s);
} else {
WPPAY18 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY19(String s) {
if (!s.trim().isEmpty()) {
WPPAY19 = Byte.parseByte(s);
} else {
WPPAY19 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY2(String s) {
if (!s.trim().isEmpty()) {
WPPAY2 = Byte.parseByte(s);
} else {
WPPAY2 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY3(String s) {
if (!s.trim().isEmpty()) {
WPPAY3 = Byte.parseByte(s);
} else {
WPPAY3 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY4(String s) {
if (!s.trim().isEmpty()) {
WPPAY4 = Byte.parseByte(s);
} else {
WPPAY4 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY5(String s) {
if (!s.trim().isEmpty()) {
WPPAY5 = Byte.parseByte(s);
} else {
WPPAY5 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY6(String s) {
if (!s.trim().isEmpty()) {
WPPAY6 = Byte.parseByte(s);
} else {
WPPAY6 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY7(String s) {
if (!s.trim().isEmpty()) {
WPPAY7 = Byte.parseByte(s);
} else {
WPPAY7 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY8(String s) {
if (!s.trim().isEmpty()) {
WPPAY8 = Byte.parseByte(s);
} else {
WPPAY8 = Byte.MIN_VALUE;
}
}

protected final void initWPPCON2(String s) {
if (!s.trim().isEmpty()) {
WPPCON2 = Byte.parseByte(s);
} else {
WPPCON2 = Byte.MIN_VALUE;
}
}

protected final void initWPPCON3(String s) {
if (!s.trim().isEmpty()) {
WPPCON3 = Byte.parseByte(s);
} else {
WPPCON3 = Byte.MIN_VALUE;
}
}

protected final void initWPPCON4(String s) {
if (!s.trim().isEmpty()) {
WPPCON4 = Byte.parseByte(s);
} else {
WPPCON4 = Byte.MIN_VALUE;
}
}

protected final void initWPPCON5(String s) {
if (!s.trim().isEmpty()) {
WPPCON5 = Byte.parseByte(s);
} else {
WPPCON5 = Byte.MIN_VALUE;
}
}

protected final void initWPPDES(String s) {
if (!s.trim().isEmpty()) {
WPPDES = Byte.parseByte(s);
} else {
WPPDES = Byte.MIN_VALUE;
}
}

protected final void initWPPDES2(String s) {
if (!s.trim().isEmpty()) {
WPPDES2 = Byte.parseByte(s);
} else {
WPPDES2 = Byte.MIN_VALUE;
}
}

protected final void initWPPDOC(String s) {
if (!s.trim().isEmpty()) {
WPPDOC = Byte.parseByte(s);
} else {
WPPDOC = Byte.MIN_VALUE;
}
}

protected final void initWPPE2AE(String s) {
if (!s.trim().isEmpty()) {
WPPE2AE = Byte.parseByte(s);
} else {
WPPE2AE = Byte.MIN_VALUE;
}
}

protected final void initWPPE2AL(String s) {
if (!s.trim().isEmpty()) {
WPPE2AL = Short.parseShort(s);
} else {
WPPE2AL = Short.MIN_VALUE;
}
}

protected final void initWPPE2AR(String s) {
if (!s.trim().isEmpty()) {
WPPE2AR = Byte.parseByte(s);
} else {
WPPE2AR = Byte.MIN_VALUE;
}
}

protected final void initWPPE2AU(String s) {
if (!s.trim().isEmpty()) {
WPPE2AU = Integer.parseInt(s);
} else {
WPPE2AU = Integer.MIN_VALUE;
}
}

protected final void initWPPE2TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE2TE = false;
} else {
WPPE2TE = true;
}
}
}

protected final void initWPPE2TL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE2TL = false;
} else {
WPPE2TL = true;
}
}
}

protected final void initWPPE2TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE2TR = false;
} else {
WPPE2TR = true;
}
}
}

protected final void initWPPE2TU(String s) {
if (!s.trim().isEmpty()) {
WPPE2TU = Short.parseShort(s);
} else {
WPPE2TU = Short.MIN_VALUE;
}
}

protected final void initWPPE3AE(String s) {
if (!s.trim().isEmpty()) {
WPPE3AE = Byte.parseByte(s);
} else {
WPPE3AE = Byte.MIN_VALUE;
}
}

protected final void initWPPE3AL(String s) {
if (!s.trim().isEmpty()) {
WPPE3AL = Short.parseShort(s);
} else {
WPPE3AL = Short.MIN_VALUE;
}
}

protected final void initWPPE3AR(String s) {
if (!s.trim().isEmpty()) {
WPPE3AR = Byte.parseByte(s);
} else {
WPPE3AR = Byte.MIN_VALUE;
}
}

protected final void initWPPE3AU(String s) {
if (!s.trim().isEmpty()) {
WPPE3AU = Short.parseShort(s);
} else {
WPPE3AU = Short.MIN_VALUE;
}
}

protected final void initWPPE3TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE3TE = false;
} else {
WPPE3TE = true;
}
}
}

protected final void initWPPE3TL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE3TL = false;
} else {
WPPE3TL = true;
}
}
}

protected final void initWPPE3TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE3TR = false;
} else {
WPPE3TR = true;
}
}
}

protected final void initWPPE3TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE3TU = false;
} else {
WPPE3TU = true;
}
}
}

protected final void initWPPE4AE(String s) {
if (!s.trim().isEmpty()) {
WPPE4AE = Byte.parseByte(s);
} else {
WPPE4AE = Byte.MIN_VALUE;
}
}

protected final void initWPPE4AL(String s) {
if (!s.trim().isEmpty()) {
WPPE4AL = Integer.parseInt(s);
} else {
WPPE4AL = Integer.MIN_VALUE;
}
}

protected final void initWPPE4AR(String s) {
if (!s.trim().isEmpty()) {
WPPE4AR = Byte.parseByte(s);
} else {
WPPE4AR = Byte.MIN_VALUE;
}
}

protected final void initWPPE4AU(String s) {
if (!s.trim().isEmpty()) {
WPPE4AU = Integer.parseInt(s);
} else {
WPPE4AU = Integer.MIN_VALUE;
}
}

protected final void initWPPE4TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE4TE = false;
} else {
WPPE4TE = true;
}
}
}

protected final void initWPPE4TL(String s) {
if (!s.trim().isEmpty()) {
WPPE4TL = Integer.parseInt(s);
} else {
WPPE4TL = Integer.MIN_VALUE;
}
}

protected final void initWPPE4TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE4TR = false;
} else {
WPPE4TR = true;
}
}
}

protected final void initWPPE4TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPPE4TU = false;
} else {
WPPE4TU = true;
}
}
}

protected final void initWPPE5AE(String s) {
if (!s.trim().isEmpty()) {
WPPE5AE = Byte.parseByte(s);
} else {
WPPE5AE = Byte.MIN_VALUE;
}
}

protected final void initWPPE5AL(String s) {
if (!s.trim().isEmpty()) {
WPPE5AL = Integer.parseInt(s);
} else {
WPPE5AL = Integer.MIN_VALUE;
}
}

protected final void initWPPE5AR(String s) {
if (!s.trim().isEmpty()) {
WPPE5AR = Byte.parseByte(s);
} else {
WPPE5AR = Byte.MIN_VALUE;
}
}

protected final void initWPPE5AU(String s) {
if (!s.trim().isEmpty()) {
WPPE5AU = Integer.parseInt(s);
} else {
WPPE5AU = Integer.MIN_VALUE;
}
}

protected final void initWPPE5TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE5TE = false;
} else {
WPPE5TE = true;
}
}
}

protected final void initWPPE5TL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE5TL = false;
} else {
WPPE5TL = true;
}
}
}

protected final void initWPPE5TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE5TR = false;
} else {
WPPE5TR = true;
}
}
}

protected final void initWPPE5TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE5TU = false;
} else {
WPPE5TU = true;
}
}
}

protected final void initWPPE6AE(String s) {
if (!s.trim().isEmpty()) {
WPPE6AE = Byte.parseByte(s);
} else {
WPPE6AE = Byte.MIN_VALUE;
}
}

protected final void initWPPE6AL(String s) {
if (!s.trim().isEmpty()) {
WPPE6AL = Integer.parseInt(s);
} else {
WPPE6AL = Integer.MIN_VALUE;
}
}

protected final void initWPPE6AR(String s) {
if (!s.trim().isEmpty()) {
WPPE6AR = Byte.parseByte(s);
} else {
WPPE6AR = Byte.MIN_VALUE;
}
}

protected final void initWPPE6AU(String s) {
if (!s.trim().isEmpty()) {
WPPE6AU = Short.parseShort(s);
} else {
WPPE6AU = Short.MIN_VALUE;
}
}

protected final void initWPPE6TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE6TE = false;
} else {
WPPE6TE = true;
}
}
}

protected final void initWPPE6TL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE6TL = false;
} else {
WPPE6TL = true;
}
}
}

protected final void initWPPE6TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE6TR = false;
} else {
WPPE6TR = true;
}
}
}

protected final void initWPPE6TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE6TU = false;
} else {
WPPE6TU = true;
}
}
}

protected final void initWPPEAE(String s) {
if (!s.trim().isEmpty()) {
WPPEAE = Byte.parseByte(s);
} else {
WPPEAE = Byte.MIN_VALUE;
}
}

protected final void initWPPEAL(String s) {
if (!s.trim().isEmpty()) {
WPPEAL = Integer.parseInt(s);
} else {
WPPEAL = Integer.MIN_VALUE;
}
}

protected final void initWPPEAR(String s) {
if (!s.trim().isEmpty()) {
WPPEAR = Byte.parseByte(s);
} else {
WPPEAR = Byte.MIN_VALUE;
}
}

protected final void initWPPEAU(String s) {
if (!s.trim().isEmpty()) {
WPPEAU = Integer.parseInt(s);
} else {
WPPEAU = Integer.MIN_VALUE;
}
}

protected final void initWPPENB2(String s) {
if (!s.trim().isEmpty()) {
WPPENB2 = Integer.parseInt(s);
} else {
WPPENB2 = Integer.MIN_VALUE;
}
}

protected final void initWPPENB3(String s) {
if (!s.trim().isEmpty()) {
WPPENB3 = Integer.parseInt(s);
} else {
WPPENB3 = Integer.MIN_VALUE;
}
}

protected final void initWPPENB4(String s) {
if (!s.trim().isEmpty()) {
WPPENB4 = Integer.parseInt(s);
} else {
WPPENB4 = Integer.MIN_VALUE;
}
}

protected final void initWPPENB5(String s) {
if (!s.trim().isEmpty()) {
WPPENB5 = Integer.parseInt(s);
} else {
WPPENB5 = Integer.MIN_VALUE;
}
}

protected final void initWPPENB6(String s) {
if (!s.trim().isEmpty()) {
WPPENB6 = Short.parseShort(s);
} else {
WPPENB6 = Short.MIN_VALUE;
}
}

protected final void initWPPEPR(String s) {
if (!s.trim().isEmpty()) {
WPPEPR = Byte.parseByte(s);
} else {
WPPEPR = Byte.MIN_VALUE;
}
}

protected final void initWPPER(String s) {
if (!s.trim().isEmpty()) {
WPPER = Byte.parseByte(s);
} else {
WPPER = Byte.MIN_VALUE;
}
}

protected final void initWPPER2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPER2 = false;
} else {
WPPER2 = true;
}
}
}

protected final void initWPPER3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPER3 = false;
} else {
WPPER3 = true;
}
}
}

protected final void initWPPER4(String s) {
if (!s.trim().isEmpty()) {
WPPER4 = Byte.parseByte(s);
} else {
WPPER4 = Byte.MIN_VALUE;
}
}

protected final void initWPPER5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPER5 = false;
} else {
WPPER5 = true;
}
}
}

protected final void initWPPER6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPER6 = false;
} else {
WPPER6 = true;
}
}
}

protected final void initWPPERC2(String s) {
if (!s.trim().isEmpty()) {
WPPERC2 = Byte.parseByte(s);
} else {
WPPERC2 = Byte.MIN_VALUE;
}
}

protected final void initWPPERC3(String s) {
if (!s.trim().isEmpty()) {
WPPERC3 = Byte.parseByte(s);
} else {
WPPERC3 = Byte.MIN_VALUE;
}
}

protected final void initWPPERC4(String s) {
if (!s.trim().isEmpty()) {
WPPERC4 = Byte.parseByte(s);
} else {
WPPERC4 = Byte.MIN_VALUE;
}
}

protected final void initWPPERC5(String s) {
if (!s.trim().isEmpty()) {
WPPERC5 = Byte.parseByte(s);
} else {
WPPERC5 = Byte.MIN_VALUE;
}
}

protected final void initWPPERC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPPERC6 = false;
} else {
WPPERC6 = true;
}
}
}

protected final void initWPPETE(String s) {
if (!s.trim().isEmpty()) {
WPPETE = Byte.parseByte(s);
} else {
WPPETE = Byte.MIN_VALUE;
}
}

protected final void initWPPETL(String s) {
if (!s.trim().isEmpty()) {
WPPETL = Integer.parseInt(s);
} else {
WPPETL = Integer.MIN_VALUE;
}
}

protected final void initWPPETR(String s) {
if (!s.trim().isEmpty()) {
WPPETR = Byte.parseByte(s);
} else {
WPPETR = Byte.MIN_VALUE;
}
}

protected final void initWPPETU(String s) {
if (!s.trim().isEmpty()) {
WPPETU = Integer.parseInt(s);
} else {
WPPETU = Integer.MIN_VALUE;
}
}

protected final void initWPPEXP(String s) {
if (!s.trim().isEmpty()) {
WPPEXP = Byte.parseByte(s);
} else {
WPPEXP = Byte.MIN_VALUE;
}
}

protected final void initWPPEXP2(String s) {
if (!s.trim().isEmpty()) {
WPPEXP2 = Byte.parseByte(s);
} else {
WPPEXP2 = Byte.MIN_VALUE;
}
}

protected final void initWPPEXP3(String s) {
if (!s.trim().isEmpty()) {
WPPEXP3 = Byte.parseByte(s);
} else {
WPPEXP3 = Byte.MIN_VALUE;
}
}

protected final void initWPPEXP4(String s) {
if (!s.trim().isEmpty()) {
WPPEXP4 = Byte.parseByte(s);
} else {
WPPEXP4 = Byte.MIN_VALUE;
}
}

protected final void initWPPEXP5(String s) {
if (!s.trim().isEmpty()) {
WPPEXP5 = Byte.parseByte(s);
} else {
WPPEXP5 = Byte.MIN_VALUE;
}
}

protected final void initWPPF2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPF2E = false;
} else {
WPPF2E = true;
}
}
}

protected final void initWPPF2L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPF2L = false;
} else {
WPPF2L = true;
}
}
}

protected final void initWPPF2R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPF2R = false;
} else {
WPPF2R = true;
}
}
}

protected final void initWPPF2U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPF2U = false;
} else {
WPPF2U = true;
}
}
}

protected final void initWPPFE(String s) {
if (!s.trim().isEmpty()) {
WPPFE = Byte.parseByte(s);
} else {
WPPFE = Byte.MIN_VALUE;
}
}

protected final void initWPPFL(String s) {
if (!s.trim().isEmpty()) {
WPPFL = Integer.parseInt(s);
} else {
WPPFL = Integer.MIN_VALUE;
}
}

protected final void initWPPFR(String s) {
if (!s.trim().isEmpty()) {
WPPFR = Byte.parseByte(s);
} else {
WPPFR = Byte.MIN_VALUE;
}
}

protected final void initWPPFU(String s) {
if (!s.trim().isEmpty()) {
WPPFU = Integer.parseInt(s);
} else {
WPPFU = Integer.MIN_VALUE;
}
}

protected final void initWPPFV3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV3E = false;
} else {
WPPFV3E = true;
}
}
}

protected final void initWPPFV3L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV3L = false;
} else {
WPPFV3L = true;
}
}
}

protected final void initWPPFV3R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV3R = false;
} else {
WPPFV3R = true;
}
}
}

protected final void initWPPFV3U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV3U = false;
} else {
WPPFV3U = true;
}
}
}

protected final void initWPPFV4E(String s) {
if (!s.trim().isEmpty()) {
WPPFV4E = Byte.parseByte(s);
} else {
WPPFV4E = Byte.MIN_VALUE;
}
}

protected final void initWPPFV4L(String s) {
if (!s.trim().isEmpty()) {
WPPFV4L = Short.parseShort(s);
} else {
WPPFV4L = Short.MIN_VALUE;
}
}

protected final void initWPPFV4R(String s) {
if (!s.trim().isEmpty()) {
WPPFV4R = Byte.parseByte(s);
} else {
WPPFV4R = Byte.MIN_VALUE;
}
}

protected final void initWPPFV4U(String s) {
if (!s.trim().isEmpty()) {
WPPFV4U = Short.parseShort(s);
} else {
WPPFV4U = Short.MIN_VALUE;
}
}

protected final void initWPPFV5E(String s) {
if (!s.trim().isEmpty()) {
WPPFV5E = Byte.parseByte(s);
} else {
WPPFV5E = Byte.MIN_VALUE;
}
}

protected final void initWPPFV5L(String s) {
if (!s.trim().isEmpty()) {
WPPFV5L = Short.parseShort(s);
} else {
WPPFV5L = Short.MIN_VALUE;
}
}

protected final void initWPPFV5R(String s) {
if (!s.trim().isEmpty()) {
WPPFV5R = Byte.parseByte(s);
} else {
WPPFV5R = Byte.MIN_VALUE;
}
}

protected final void initWPPFV5U(String s) {
if (!s.trim().isEmpty()) {
WPPFV5U = Integer.parseInt(s);
} else {
WPPFV5U = Integer.MIN_VALUE;
}
}

protected final void initWPPFV6E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV6E = false;
} else {
WPPFV6E = true;
}
}
}

protected final void initWPPFV6L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV6L = false;
} else {
WPPFV6L = true;
}
}
}

protected final void initWPPFV6R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV6R = false;
} else {
WPPFV6R = true;
}
}
}

protected final void initWPPFV6U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV6U = false;
} else {
WPPFV6U = true;
}
}
}

protected final void initWPPFVA2(String s) {
if (!s.trim().isEmpty()) {
WPPFVA2 = Short.parseShort(s);
} else {
WPPFVA2 = Short.MIN_VALUE;
}
}

protected final void initWPPFVA3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFVA3 = false;
} else {
WPPFVA3 = true;
}
}
}

protected final void initWPPFVA4(String s) {
if (!s.trim().isEmpty()) {
WPPFVA4 = Short.parseShort(s);
} else {
WPPFVA4 = Short.MIN_VALUE;
}
}

protected final void initWPPFVA5(String s) {
if (!s.trim().isEmpty()) {
WPPFVA5 = Byte.parseByte(s);
} else {
WPPFVA5 = Byte.MIN_VALUE;
}
}

protected final void initWPPFVA6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFVA6 = false;
} else {
WPPFVA6 = true;
}
}
}

protected final void initWPPLON(String s) {
if (!s.trim().isEmpty()) {
WPPLON = Byte.parseByte(s);
} else {
WPPLON = Byte.MIN_VALUE;
}
}

protected final void initWPPLON2(String s) {
if (!s.trim().isEmpty()) {
WPPLON2 = Byte.parseByte(s);
} else {
WPPLON2 = Byte.MIN_VALUE;
}
}

protected final void initWPPLON3(String s) {
if (!s.trim().isEmpty()) {
WPPLON3 = Byte.parseByte(s);
} else {
WPPLON3 = Byte.MIN_VALUE;
}
}

protected final void initWPPLON4(String s) {
if (!s.trim().isEmpty()) {
WPPLON4 = Byte.parseByte(s);
} else {
WPPLON4 = Byte.MIN_VALUE;
}
}

protected final void initWPPLON5(String s) {
if (!s.trim().isEmpty()) {
WPPLON5 = Byte.parseByte(s);
} else {
WPPLON5 = Byte.MIN_VALUE;
}
}

protected final void initWPPLP2(String s) {
if (!s.trim().isEmpty()) {
WPPLP2 = Byte.parseByte(s);
} else {
WPPLP2 = Byte.MIN_VALUE;
}
}

protected final void initWPPLP3(String s) {
if (!s.trim().isEmpty()) {
WPPLP3 = Byte.parseByte(s);
} else {
WPPLP3 = Byte.MIN_VALUE;
}
}

protected final void initWPPLP4(String s) {
if (!s.trim().isEmpty()) {
WPPLP4 = Byte.parseByte(s);
} else {
WPPLP4 = Byte.MIN_VALUE;
}
}

protected final void initWPPLP5(String s) {
if (!s.trim().isEmpty()) {
WPPLP5 = Byte.parseByte(s);
} else {
WPPLP5 = Byte.MIN_VALUE;
}
}

protected final void initWPPLP6(String s) {
if (!s.trim().isEmpty()) {
WPPLP6 = Byte.parseByte(s);
} else {
WPPLP6 = Byte.MIN_VALUE;
}
}

protected final void initWPPLPH2(String s) {
if (!s.trim().isEmpty()) {
WPPLPH2 = Byte.parseByte(s);
} else {
WPPLPH2 = Byte.MIN_VALUE;
}
}

protected final void initWPPLPH3(String s) {
if (!s.trim().isEmpty()) {
WPPLPH3 = Byte.parseByte(s);
} else {
WPPLPH3 = Byte.MIN_VALUE;
}
}

protected final void initWPPLPH4(String s) {
if (!s.trim().isEmpty()) {
WPPLPH4 = Byte.parseByte(s);
} else {
WPPLPH4 = Byte.MIN_VALUE;
}
}

protected final void initWPPLPH5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPLPH5 = false;
} else {
WPPLPH5 = true;
}
}
}

protected final void initWPPLPH6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPLPH6 = false;
} else {
WPPLPH6 = true;
}
}
}

protected final void initWPPRIVA(String s) {
if (!s.trim().isEmpty()) {
WPPRIVA = Integer.parseInt(s);
} else {
WPPRIVA = Integer.MIN_VALUE;
}
}

protected final void initWPPRIVP(String s) {
if (!s.trim().isEmpty()) {
WPPRIVP = Byte.parseByte(s);
} else {
WPPRIVP = Byte.MIN_VALUE;
}
}

protected final void initWPPROFE(String s) {
if (!s.trim().isEmpty()) {
WPPROFE = Byte.parseByte(s);
} else {
WPPROFE = Byte.MIN_VALUE;
}
}

protected final void initWPPROFL(String s) {
if (!s.trim().isEmpty()) {
WPPROFL = Integer.parseInt(s);
} else {
WPPROFL = Integer.MIN_VALUE;
}
}

protected final void initWPPROFR(String s) {
if (!s.trim().isEmpty()) {
WPPROFR = Byte.parseByte(s);
} else {
WPPROFR = Byte.MIN_VALUE;
}
}

protected final void initWPPROFU(String s) {
if (!s.trim().isEmpty()) {
WPPROFU = Integer.parseInt(s);
} else {
WPPROFU = Integer.MIN_VALUE;
}
}

protected final void initWPPRPE(String s) {
if (!s.trim().isEmpty()) {
WPPRPE = Byte.parseByte(s);
} else {
WPPRPE = Byte.MIN_VALUE;
}
}

protected final void initWPPS(String s) {
if (!s.trim().isEmpty()) {
WPPS = Byte.parseByte(s);
} else {
WPPS = Byte.MIN_VALUE;
}
}

protected final void initWPPSAL2(String s) {
if (!s.trim().isEmpty()) {
WPPSAL2 = Byte.parseByte(s);
} else {
WPPSAL2 = Byte.MIN_VALUE;
}
}

protected final void initWPPSAL3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPSAL3 = false;
} else {
WPPSAL3 = true;
}
}
}

protected final void initWPPSAL4(String s) {
if (!s.trim().isEmpty()) {
WPPSAL4 = Byte.parseByte(s);
} else {
WPPSAL4 = Byte.MIN_VALUE;
}
}

protected final void initWPPSAL5(String s) {
if (!s.trim().isEmpty()) {
WPPSAL5 = Byte.parseByte(s);
} else {
WPPSAL5 = Byte.MIN_VALUE;
}
}

protected final void initWPPSAL6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPSAL6 = false;
} else {
WPPSAL6 = true;
}
}
}

protected final void initWPPSM1(String s) {
if (!s.trim().isEmpty()) {
WPPSM1 = Byte.parseByte(s);
} else {
WPPSM1 = Byte.MIN_VALUE;
}
}

protected final void initWPPSM2(String s) {
if (!s.trim().isEmpty()) {
WPPSM2 = Byte.parseByte(s);
} else {
WPPSM2 = Byte.MIN_VALUE;
}
}

protected final void initWPPSMM1(String s) {
if (!s.trim().isEmpty()) {
WPPSMM1 = Byte.parseByte(s);
} else {
WPPSMM1 = Byte.MIN_VALUE;
}
}

protected final void initWPPSMM2(String s) {
if (!s.trim().isEmpty()) {
WPPSMM2 = Byte.parseByte(s);
} else {
WPPSMM2 = Byte.MIN_VALUE;
}
}

protected final void initWPPSMM3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPSMM3 = false;
} else {
WPPSMM3 = true;
}
}
}

protected final void initWPPSTR(String s) {
if (!s.trim().isEmpty()) {
WPPSTR = Byte.parseByte(s);
} else {
WPPSTR = Byte.MIN_VALUE;
}
}

protected final void initWPPSTR2(String s) {
if (!s.trim().isEmpty()) {
WPPSTR2 = Byte.parseByte(s);
} else {
WPPSTR2 = Byte.MIN_VALUE;
}
}

protected final void initWPPSTR3(String s) {
if (!s.trim().isEmpty()) {
WPPSTR3 = Byte.parseByte(s);
} else {
WPPSTR3 = Byte.MIN_VALUE;
}
}

protected final void initWPPTOP2(String s) {
if (!s.trim().isEmpty()) {
WPPTOP2 = Byte.parseByte(s);
} else {
WPPTOP2 = Byte.MIN_VALUE;
}
}

protected final void initWPPTOP3(String s) {
if (!s.trim().isEmpty()) {
WPPTOP3 = Byte.parseByte(s);
} else {
WPPTOP3 = Byte.MIN_VALUE;
}
}

protected final void initWPPTOP4(String s) {
if (!s.trim().isEmpty()) {
WPPTOP4 = Byte.parseByte(s);
} else {
WPPTOP4 = Byte.MIN_VALUE;
}
}

protected final void initWPPTOP5(String s) {
if (!s.trim().isEmpty()) {
WPPTOP5 = Byte.parseByte(s);
} else {
WPPTOP5 = Byte.MIN_VALUE;
}
}

protected final void initWPPTOP6(String s) {
if (!s.trim().isEmpty()) {
WPPTOP6 = Byte.parseByte(s);
} else {
WPPTOP6 = Byte.MIN_VALUE;
}
}

protected final void initWPPTP2(String s) {
if (!s.trim().isEmpty()) {
WPPTP2 = Byte.parseByte(s);
} else {
WPPTP2 = Byte.MIN_VALUE;
}
}

protected final void initWPPTP3(String s) {
if (!s.trim().isEmpty()) {
WPPTP3 = Byte.parseByte(s);
} else {
WPPTP3 = Byte.MIN_VALUE;
}
}

protected final void initWPPTP4(String s) {
if (!s.trim().isEmpty()) {
WPPTP4 = Byte.parseByte(s);
} else {
WPPTP4 = Byte.MIN_VALUE;
}
}

protected final void initWPPTP5(String s) {
if (!s.trim().isEmpty()) {
WPPTP5 = Byte.parseByte(s);
} else {
WPPTP5 = Byte.MIN_VALUE;
}
}

protected final void initWPPTP6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPTP6 = false;
} else {
WPPTP6 = true;
}
}
}

protected final void initWPPW(String s) {
if (!s.trim().isEmpty()) {
WPPW = Byte.parseByte(s);
} else {
WPPW = Byte.MIN_VALUE;
}
}

protected final void initWPPWP(String s) {
if (!s.trim().isEmpty()) {
WPPWP = Byte.parseByte(s);
} else {
WPPWP = Byte.MIN_VALUE;
}
}

protected final void initWPPWP14(String s) {
if (!s.trim().isEmpty()) {
WPPWP14 = Byte.parseByte(s);
} else {
WPPWP14 = Byte.MIN_VALUE;
}
}

protected final void initWPPWP15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPWP15 = false;
} else {
WPPWP15 = true;
}
}
}

protected final void initWPPWP16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPWP16 = false;
} else {
WPPWP16 = true;
}
}
}

protected final void initWPPWP2(String s) {
if (!s.trim().isEmpty()) {
WPPWP2 = Byte.parseByte(s);
} else {
WPPWP2 = Byte.MIN_VALUE;
}
}

protected final void initWPPWP24(String s) {
if (!s.trim().isEmpty()) {
WPPWP24 = Byte.parseByte(s);
} else {
WPPWP24 = Byte.MIN_VALUE;
}
}

protected final void initWPPWP25(String s) {
if (!s.trim().isEmpty()) {
WPPWP25 = Byte.parseByte(s);
} else {
WPPWP25 = Byte.MIN_VALUE;
}
}

protected final void initWPPWP26(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPWP26 = false;
} else {
WPPWP26 = true;
}
}
}

protected final void initWPPWP3(String s) {
if (!s.trim().isEmpty()) {
WPPWP3 = Byte.parseByte(s);
} else {
WPPWP3 = Byte.MIN_VALUE;
}
}

protected final void initWPPWP4(String s) {
if (!s.trim().isEmpty()) {
WPPWP4 = Byte.parseByte(s);
} else {
WPPWP4 = Byte.MIN_VALUE;
}
}

protected final void initWPPWP5(String s) {
if (!s.trim().isEmpty()) {
WPPWP5 = Byte.parseByte(s);
} else {
WPPWP5 = Byte.MIN_VALUE;
}
}

protected final void initWPPWP6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPWP6 = false;
} else {
WPPWP6 = true;
}
}
}

protected final void initWPPWR(String s) {
if (!s.trim().isEmpty()) {
WPPWR = Integer.parseInt(s);
} else {
WPPWR = Integer.MIN_VALUE;
}
}

protected final void initWPPWR14(String s) {
if (!s.trim().isEmpty()) {
WPPWR14 = Short.parseShort(s);
} else {
WPPWR14 = Short.MIN_VALUE;
}
}

protected final void initWPPWR15(String s) {
if (!s.trim().isEmpty()) {
WPPWR15 = Short.parseShort(s);
} else {
WPPWR15 = Short.MIN_VALUE;
}
}

protected final void initWPPWR16(String s) {
if (!s.trim().isEmpty()) {
WPPWR16 = Short.parseShort(s);
} else {
WPPWR16 = Short.MIN_VALUE;
}
}

protected final void initWPPWR2(String s) {
if (!s.trim().isEmpty()) {
WPPWR2 = Short.parseShort(s);
} else {
WPPWR2 = Short.MIN_VALUE;
}
}

protected final void initWPPWR24(String s) {
if (!s.trim().isEmpty()) {
WPPWR24 = Short.parseShort(s);
} else {
WPPWR24 = Short.MIN_VALUE;
}
}

protected final void initWPPWR25(String s) {
if (!s.trim().isEmpty()) {
WPPWR25 = Byte.parseByte(s);
} else {
WPPWR25 = Byte.MIN_VALUE;
}
}

protected final void initWPPWR26(String s) {
if (!s.trim().isEmpty()) {
WPPWR26 = Byte.parseByte(s);
} else {
WPPWR26 = Byte.MIN_VALUE;
}
}

protected final void initWPPWR3(String s) {
if (!s.trim().isEmpty()) {
WPPWR3 = Short.parseShort(s);
} else {
WPPWR3 = Short.MIN_VALUE;
}
}

protected final void initWPPWR4(String s) {
if (!s.trim().isEmpty()) {
WPPWR4 = Short.parseShort(s);
} else {
WPPWR4 = Short.MIN_VALUE;
}
}

protected final void initWPPWR5(String s) {
if (!s.trim().isEmpty()) {
WPPWR5 = Short.parseShort(s);
} else {
WPPWR5 = Short.MIN_VALUE;
}
}

protected final void initWPPWR6(String s) {
if (!s.trim().isEmpty()) {
WPPWR6 = Byte.parseByte(s);
} else {
WPPWR6 = Byte.MIN_VALUE;
}
}

protected final void initWPPYR17(String s) {
if (!s.trim().isEmpty()) {
WPPYR17 = Integer.parseInt(s);
} else {
WPPYR17 = Integer.MIN_VALUE;
}
}

protected final void initWPPYR18(String s) {
if (!s.trim().isEmpty()) {
WPPYR18 = Short.parseShort(s);
} else {
WPPYR18 = Short.MIN_VALUE;
}
}

protected final void initWPPYR19(String s) {
if (!s.trim().isEmpty()) {
WPPYR19 = Short.parseShort(s);
} else {
WPPYR19 = Short.MIN_VALUE;
}
}

protected final void initWPPYR2(String s) {
if (!s.trim().isEmpty()) {
WPPYR2 = Integer.parseInt(s);
} else {
WPPYR2 = Integer.MIN_VALUE;
}
}

protected final void initWPPYR3(String s) {
if (!s.trim().isEmpty()) {
WPPYR3 = Integer.parseInt(s);
} else {
WPPYR3 = Integer.MIN_VALUE;
}
}

protected final void initWPPYR4(String s) {
if (!s.trim().isEmpty()) {
WPPYR4 = Integer.parseInt(s);
} else {
WPPYR4 = Integer.MIN_VALUE;
}
}

protected final void initWPPYR5(String s) {
if (!s.trim().isEmpty()) {
WPPYR5 = Short.parseShort(s);
} else {
WPPYR5 = Short.MIN_VALUE;
}
}

protected final void initWPPYR6(String s) {
if (!s.trim().isEmpty()) {
WPPYR6 = Short.parseShort(s);
} else {
WPPYR6 = Short.MIN_VALUE;
}
}

protected final void initWPPYR7(String s) {
if (!s.trim().isEmpty()) {
WPPYR7 = Short.parseShort(s);
} else {
WPPYR7 = Short.MIN_VALUE;
}
}

protected final void initWPPYR8(String s) {
if (!s.trim().isEmpty()) {
WPPYR8 = Byte.parseByte(s);
} else {
WPPYR8 = Byte.MIN_VALUE;
}
}

protected final void initWPQN(String s) {
if (!s.trim().isEmpty()) {
WPQN = Byte.parseByte(s);
} else {
WPQN = Byte.MIN_VALUE;
}
}

protected final void initWPRCON2(String s) {
if (!s.trim().isEmpty()) {
WPRCON2 = Byte.parseByte(s);
} else {
WPRCON2 = Byte.MIN_VALUE;
}
}

protected final void initWPRCON3(String s) {
if (!s.trim().isEmpty()) {
WPRCON3 = Byte.parseByte(s);
} else {
WPRCON3 = Byte.MIN_VALUE;
}
}

protected final void initWPRCON4(String s) {
if (!s.trim().isEmpty()) {
WPRCON4 = Byte.parseByte(s);
} else {
WPRCON4 = Byte.MIN_VALUE;
}
}

protected final void initWPRCON5(String s) {
if (!s.trim().isEmpty()) {
WPRCON5 = Byte.parseByte(s);
} else {
WPRCON5 = Byte.MIN_VALUE;
}
}

protected final void initWPREA01(String s) {
if (!s.trim().isEmpty()) {
WPREA01 = Byte.parseByte(s);
} else {
WPREA01 = Byte.MIN_VALUE;
}
}

protected final void initWPREA02(String s) {
if (!s.trim().isEmpty()) {
WPREA02 = Byte.parseByte(s);
} else {
WPREA02 = Byte.MIN_VALUE;
}
}

protected final void initWPREA03(String s) {
if (!s.trim().isEmpty()) {
WPREA03 = Byte.parseByte(s);
} else {
WPREA03 = Byte.MIN_VALUE;
}
}

protected final void initWPREA04(String s) {
if (!s.trim().isEmpty()) {
WPREA04 = Byte.parseByte(s);
} else {
WPREA04 = Byte.MIN_VALUE;
}
}

protected final void initWPREA05(String s) {
if (!s.trim().isEmpty()) {
WPREA05 = Byte.parseByte(s);
} else {
WPREA05 = Byte.MIN_VALUE;
}
}

protected final void initWPREA06(String s) {
if (!s.trim().isEmpty()) {
WPREA06 = Byte.parseByte(s);
} else {
WPREA06 = Byte.MIN_VALUE;
}
}

protected final void initWPREA07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPREA07 = false;
} else {
WPREA07 = true;
}
}
}

protected final void initWPREAM1(String s) {
if (!s.trim().isEmpty()) {
WPREAM1 = Byte.parseByte(s);
} else {
WPREAM1 = Byte.MIN_VALUE;
}
}

protected final void initWPREAM2(String s) {
if (!s.trim().isEmpty()) {
WPREAM2 = Byte.parseByte(s);
} else {
WPREAM2 = Byte.MIN_VALUE;
}
}

protected final void initWPREAM3(String s) {
if (!s.trim().isEmpty()) {
WPREAM3 = Byte.parseByte(s);
} else {
WPREAM3 = Byte.MIN_VALUE;
}
}

protected final void initWPREAM4(String s) {
if (!s.trim().isEmpty()) {
WPREAM4 = Byte.parseByte(s);
} else {
WPREAM4 = Byte.MIN_VALUE;
}
}

protected final void initWPREAM5(String s) {
if (!s.trim().isEmpty()) {
WPREAM5 = Byte.parseByte(s);
} else {
WPREAM5 = Byte.MIN_VALUE;
}
}

protected final void initWPREAM6(String s) {
if (!s.trim().isEmpty()) {
WPREAM6 = Byte.parseByte(s);
} else {
WPREAM6 = Byte.MIN_VALUE;
}
}

protected final void initWPREC2(String s) {
if (!s.trim().isEmpty()) {
WPREC2 = Byte.parseByte(s);
} else {
WPREC2 = Byte.MIN_VALUE;
}
}

protected final void initWPREC3(String s) {
if (!s.trim().isEmpty()) {
WPREC3 = Byte.parseByte(s);
} else {
WPREC3 = Byte.MIN_VALUE;
}
}

protected final void initWPRECN(String s) {
if (!s.trim().isEmpty()) {
WPRECN = Byte.parseByte(s);
} else {
WPRECN = Byte.MIN_VALUE;
}
}

protected final void initWPRECN1(String s) {
if (!s.trim().isEmpty()) {
WPRECN1 = Byte.parseByte(s);
} else {
WPRECN1 = Byte.MIN_VALUE;
}
}

protected final void initWPRECN2(String s) {
if (!s.trim().isEmpty()) {
WPRECN2 = Byte.parseByte(s);
} else {
WPRECN2 = Byte.MIN_VALUE;
}
}

protected final void initWPRECN3(String s) {
if (!s.trim().isEmpty()) {
WPRECN3 = Byte.parseByte(s);
} else {
WPRECN3 = Byte.MIN_VALUE;
}
}

protected final void initWPRECS(String s) {
if (!s.trim().isEmpty()) {
WPRECS = Byte.parseByte(s);
} else {
WPRECS = Byte.MIN_VALUE;
}
}

protected final void initWPRECS1(String s) {
if (!s.trim().isEmpty()) {
WPRECS1 = Byte.parseByte(s);
} else {
WPRECS1 = Byte.MIN_VALUE;
}
}

protected final void initWPRECS2(String s) {
if (!s.trim().isEmpty()) {
WPRECS2 = Byte.parseByte(s);
} else {
WPRECS2 = Byte.MIN_VALUE;
}
}

protected final void initWPRECS3(String s) {
if (!s.trim().isEmpty()) {
WPRECS3 = Byte.parseByte(s);
} else {
WPRECS3 = Byte.MIN_VALUE;
}
}

protected final void initWPREN(String s) {
if (!s.trim().isEmpty()) {
WPREN = Byte.parseByte(s);
} else {
WPREN = Byte.MIN_VALUE;
}
}

protected final void initWPRGH(String s) {
if (!s.trim().isEmpty()) {
WPRGH = Byte.parseByte(s);
} else {
WPRGH = Byte.MIN_VALUE;
}
}

protected final void initWPRGH2(String s) {
if (!s.trim().isEmpty()) {
WPRGH2 = Byte.parseByte(s);
} else {
WPRGH2 = Byte.MIN_VALUE;
}
}

protected final void initWPRGH3(String s) {
if (!s.trim().isEmpty()) {
WPRGH3 = Byte.parseByte(s);
} else {
WPRGH3 = Byte.MIN_VALUE;
}
}

protected final void initWPRGHB(String s) {
if (!s.trim().isEmpty()) {
WPRGHB = Byte.parseByte(s);
} else {
WPRGHB = Byte.MIN_VALUE;
}
}

protected final void initWPRGHB2(String s) {
if (!s.trim().isEmpty()) {
WPRGHB2 = Byte.parseByte(s);
} else {
WPRGHB2 = Byte.MIN_VALUE;
}
}

protected final void initWPRGHB3(String s) {
if (!s.trim().isEmpty()) {
WPRGHB3 = Byte.parseByte(s);
} else {
WPRGHB3 = Byte.MIN_VALUE;
}
}

protected final void initWPRGHX(String s) {
if (!s.trim().isEmpty()) {
WPRGHX = Byte.parseByte(s);
} else {
WPRGHX = Byte.MIN_VALUE;
}
}

protected final void initWPRGHX2(String s) {
if (!s.trim().isEmpty()) {
WPRGHX2 = Byte.parseByte(s);
} else {
WPRGHX2 = Byte.MIN_VALUE;
}
}

protected final void initWPRGHX3(String s) {
if (!s.trim().isEmpty()) {
WPRGHX3 = Byte.parseByte(s);
} else {
WPRGHX3 = Byte.MIN_VALUE;
}
}

protected final void initWPRGHX4(String s) {
if (!s.trim().isEmpty()) {
WPRGHX4 = Byte.parseByte(s);
} else {
WPRGHX4 = Byte.MIN_VALUE;
}
}

protected final void initWPRGHX5(String s) {
if (!s.trim().isEmpty()) {
WPRGHX5 = Byte.parseByte(s);
} else {
WPRGHX5 = Byte.MIN_VALUE;
}
}

protected final void initWPRRE01(String s) {
if (!s.trim().isEmpty()) {
WPRRE01 = Byte.parseByte(s);
} else {
WPRRE01 = Byte.MIN_VALUE;
}
}

protected final void initWPRRE02(String s) {
if (!s.trim().isEmpty()) {
WPRRE02 = Byte.parseByte(s);
} else {
WPRRE02 = Byte.MIN_VALUE;
}
}

protected final void initWPRRE03(String s) {
if (!s.trim().isEmpty()) {
WPRRE03 = Byte.parseByte(s);
} else {
WPRRE03 = Byte.MIN_VALUE;
}
}

protected final void initWPRRE04(String s) {
if (!s.trim().isEmpty()) {
WPRRE04 = Byte.parseByte(s);
} else {
WPRRE04 = Byte.MIN_VALUE;
}
}

protected final void initWPRRE05(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRRE05 = false;
} else {
WPRRE05 = true;
}
}
}

protected final void initWPRREM1(String s) {
if (!s.trim().isEmpty()) {
WPRREM1 = Byte.parseByte(s);
} else {
WPRREM1 = Byte.MIN_VALUE;
}
}

protected final void initWPRREM2(String s) {
if (!s.trim().isEmpty()) {
WPRREM2 = Byte.parseByte(s);
} else {
WPRREM2 = Byte.MIN_VALUE;
}
}

protected final void initWPRREM3(String s) {
if (!s.trim().isEmpty()) {
WPRREM3 = Byte.parseByte(s);
} else {
WPRREM3 = Byte.MIN_VALUE;
}
}

protected final void initWPRREM4(String s) {
if (!s.trim().isEmpty()) {
WPRREM4 = Byte.parseByte(s);
} else {
WPRREM4 = Byte.MIN_VALUE;
}
}

protected final void initWPRREM5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRREM5 = false;
} else {
WPRREM5 = true;
}
}
}

protected final void initWPRSC1(String s) {
if (!s.trim().isEmpty()) {
WPRSC1 = Byte.parseByte(s);
} else {
WPRSC1 = Byte.MIN_VALUE;
}
}

protected final void initWPRSC13(String s) {
if (!s.trim().isEmpty()) {
WPRSC13 = Byte.parseByte(s);
} else {
WPRSC13 = Byte.MIN_VALUE;
}
}

protected final void initWPRSC14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRSC14 = false;
} else {
WPRSC14 = true;
}
}
}

protected final void initWPRSC19(String s) {
if (!s.trim().isEmpty()) {
WPRSC19 = Byte.parseByte(s);
} else {
WPRSC19 = Byte.MIN_VALUE;
}
}

protected final void initWPRSC2(String s) {
if (!s.trim().isEmpty()) {
WPRSC2 = Byte.parseByte(s);
} else {
WPRSC2 = Byte.MIN_VALUE;
}
}

protected final void initWPRSC20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRSC20 = false;
} else {
WPRSC20 = true;
}
}
}

protected final void initWPRSC25(String s) {
if (!s.trim().isEmpty()) {
WPRSC25 = Byte.parseByte(s);
} else {
WPRSC25 = Byte.MIN_VALUE;
}
}

protected final void initWPRSC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRSC3 = false;
} else {
WPRSC3 = true;
}
}
}

protected final void initWPRSC7(String s) {
if (!s.trim().isEmpty()) {
WPRSC7 = Byte.parseByte(s);
} else {
WPRSC7 = Byte.MIN_VALUE;
}
}

protected final void initWPRSC8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRSC8 = false;
} else {
WPRSC8 = true;
}
}
}

protected final void initWPRSC9(String s) {
if (!s.trim().isEmpty()) {
WPRSC9 = Byte.parseByte(s);
} else {
WPRSC9 = Byte.MIN_VALUE;
}
}

protected final void initWPRSM1(String s) {
if (!s.trim().isEmpty()) {
WPRSM1 = Byte.parseByte(s);
} else {
WPRSM1 = Byte.MIN_VALUE;
}
}

protected final void initWPRSM13(String s) {
if (!s.trim().isEmpty()) {
WPRSM13 = Byte.parseByte(s);
} else {
WPRSM13 = Byte.MIN_VALUE;
}
}

protected final void initWPRSM14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRSM14 = false;
} else {
WPRSM14 = true;
}
}
}

protected final void initWPRSM2(String s) {
if (!s.trim().isEmpty()) {
WPRSM2 = Byte.parseByte(s);
} else {
WPRSM2 = Byte.MIN_VALUE;
}
}

protected final void initWPRSM3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRSM3 = false;
} else {
WPRSM3 = true;
}
}
}

protected final void initWPRSM37(String s) {
if (!s.trim().isEmpty()) {
WPRSM37 = Byte.parseByte(s);
} else {
WPRSM37 = Byte.MIN_VALUE;
}
}

protected final void initWPRSM38(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRSM38 = false;
} else {
WPRSM38 = true;
}
}
}

protected final void initWPRSM49(String s) {
if (!s.trim().isEmpty()) {
WPRSM49 = Byte.parseByte(s);
} else {
WPRSM49 = Byte.MIN_VALUE;
}
}

protected final void initWPRSM50(String s) {
if (!s.trim().isEmpty()) {
WPRSM50 = Byte.parseByte(s);
} else {
WPRSM50 = Byte.MIN_VALUE;
}
}

protected final void initWPRSM51(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRSM51 = false;
} else {
WPRSM51 = true;
}
}
}

protected final void initWPSJOBM(String s) {
if (!s.trim().isEmpty()) {
WPSJOBM = Byte.parseByte(s);
} else {
WPSJOBM = Byte.MIN_VALUE;
}
}

protected final void initWPSJOBY(String s) {
if (!s.trim().isEmpty()) {
WPSJOBY = Short.parseShort(s);
} else {
WPSJOBY = Short.MIN_VALUE;
}
}

protected final void initWPSN(String s) {
if (!s.trim().isEmpty()) {
WPSN = Byte.parseByte(s);
} else {
WPSN = Byte.MIN_VALUE;
}
}

protected final void initWPSPS(String s) {
if (!s.trim().isEmpty()) {
WPSPS = Byte.parseByte(s);
} else {
WPSPS = Byte.MIN_VALUE;
}
}

protected final void initWPSPS2(String s) {
if (!s.trim().isEmpty()) {
WPSPS2 = Byte.parseByte(s);
} else {
WPSPS2 = Byte.MIN_VALUE;
}
}

protected final void initWPSPS3(String s) {
if (!s.trim().isEmpty()) {
WPSPS3 = Byte.parseByte(s);
} else {
WPSPS3 = Byte.MIN_VALUE;
}
}

protected final void initWPSRC(String s) {
if (!s.trim().isEmpty()) {
WPSRC = Byte.parseByte(s);
} else {
WPSRC = Byte.MIN_VALUE;
}
}

protected final void initWPSRC2(String s) {
if (!s.trim().isEmpty()) {
WPSRC2 = Byte.parseByte(s);
} else {
WPSRC2 = Byte.MIN_VALUE;
}
}

protected final void initWPSRC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPSRC3 = false;
} else {
WPSRC3 = true;
}
}
}

protected final void initWPSRC4(String s) {
if (!s.trim().isEmpty()) {
WPSRC4 = Byte.parseByte(s);
} else {
WPSRC4 = Byte.MIN_VALUE;
}
}

protected final void initWPSRC5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPSRC5 = false;
} else {
WPSRC5 = true;
}
}
}

protected final void initWPSRUL(String s) {
if (!s.trim().isEmpty()) {
WPSRUL = Byte.parseByte(s);
} else {
WPSRUL = Byte.MIN_VALUE;
}
}

protected final void initWPSRUL2(String s) {
if (!s.trim().isEmpty()) {
WPSRUL2 = Byte.parseByte(s);
} else {
WPSRUL2 = Byte.MIN_VALUE;
}
}

protected final void initWPSRUL3(String s) {
if (!s.trim().isEmpty()) {
WPSRUL3 = Byte.parseByte(s);
} else {
WPSRUL3 = Byte.MIN_VALUE;
}
}

protected final void initWPSTATA(String s) {
if (!s.trim().isEmpty()) {
WPSTATA = Integer.parseInt(s);
} else {
WPSTATA = Integer.MIN_VALUE;
}
}

protected final void initWPSTATP(String s) {
if (!s.trim().isEmpty()) {
WPSTATP = Byte.parseByte(s);
} else {
WPSTATP = Byte.MIN_VALUE;
}
}

protected final void initWPTAKP(String s) {
if (!s.trim().isEmpty()) {
WPTAKP = Byte.parseByte(s);
} else {
WPTAKP = Byte.MIN_VALUE;
}
}

protected final void initWPTAKP2(String s) {
if (!s.trim().isEmpty()) {
WPTAKP2 = Byte.parseByte(s);
} else {
WPTAKP2 = Byte.MIN_VALUE;
}
}

protected final void initWPTAKP3(String s) {
if (!s.trim().isEmpty()) {
WPTAKP3 = Byte.parseByte(s);
} else {
WPTAKP3 = Byte.MIN_VALUE;
}
}

protected final void initWPTAWC(String s) {
if (!s.trim().isEmpty()) {
WPTAWC = Byte.parseByte(s);
} else {
WPTAWC = Byte.MIN_VALUE;
}
}

protected final void initWPTAX17(String s) {
if (!s.trim().isEmpty()) {
WPTAX17 = Byte.parseByte(s);
} else {
WPTAX17 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX18(String s) {
if (!s.trim().isEmpty()) {
WPTAX18 = Byte.parseByte(s);
} else {
WPTAX18 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX19(String s) {
if (!s.trim().isEmpty()) {
WPTAX19 = Byte.parseByte(s);
} else {
WPTAX19 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX2(String s) {
if (!s.trim().isEmpty()) {
WPTAX2 = Byte.parseByte(s);
} else {
WPTAX2 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX3(String s) {
if (!s.trim().isEmpty()) {
WPTAX3 = Byte.parseByte(s);
} else {
WPTAX3 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX4(String s) {
if (!s.trim().isEmpty()) {
WPTAX4 = Byte.parseByte(s);
} else {
WPTAX4 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX5(String s) {
if (!s.trim().isEmpty()) {
WPTAX5 = Byte.parseByte(s);
} else {
WPTAX5 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX6(String s) {
if (!s.trim().isEmpty()) {
WPTAX6 = Byte.parseByte(s);
} else {
WPTAX6 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX7(String s) {
if (!s.trim().isEmpty()) {
WPTAX7 = Byte.parseByte(s);
} else {
WPTAX7 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX8(String s) {
if (!s.trim().isEmpty()) {
WPTAX8 = Byte.parseByte(s);
} else {
WPTAX8 = Byte.MIN_VALUE;
}
}

protected final void initWPTHPFE(String s) {
if (!s.trim().isEmpty()) {
WPTHPFE = Byte.parseByte(s);
} else {
WPTHPFE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPFL(String s) {
if (!s.trim().isEmpty()) {
WPTHPFL = Short.parseShort(s);
} else {
WPTHPFL = Short.MIN_VALUE;
}
}

protected final void initWPTHPFR(String s) {
if (!s.trim().isEmpty()) {
WPTHPFR = Byte.parseByte(s);
} else {
WPTHPFR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPFU(String s) {
if (!s.trim().isEmpty()) {
WPTHPFU = Short.parseShort(s);
} else {
WPTHPFU = Short.MIN_VALUE;
}
}

protected final void initWPTHPME(String s) {
if (!s.trim().isEmpty()) {
WPTHPME = Byte.parseByte(s);
} else {
WPTHPME = Byte.MIN_VALUE;
}
}

protected final void initWPTHPML(String s) {
if (!s.trim().isEmpty()) {
WPTHPML = Short.parseShort(s);
} else {
WPTHPML = Short.MIN_VALUE;
}
}

protected final void initWPTHPMR(String s) {
if (!s.trim().isEmpty()) {
WPTHPMR = Byte.parseByte(s);
} else {
WPTHPMR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPMU(String s) {
if (!s.trim().isEmpty()) {
WPTHPMU = Short.parseShort(s);
} else {
WPTHPMU = Short.MIN_VALUE;
}
}

protected final void initWPTHPOE(String s) {
if (!s.trim().isEmpty()) {
WPTHPOE = Byte.parseByte(s);
} else {
WPTHPOE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPOL(String s) {
if (!s.trim().isEmpty()) {
WPTHPOL = Short.parseShort(s);
} else {
WPTHPOL = Short.MIN_VALUE;
}
}

protected final void initWPTHPOR(String s) {
if (!s.trim().isEmpty()) {
WPTHPOR = Byte.parseByte(s);
} else {
WPTHPOR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPOU(String s) {
if (!s.trim().isEmpty()) {
WPTHPOU = Short.parseShort(s);
} else {
WPTHPOU = Short.MIN_VALUE;
}
}

protected final void initWPTHPWE(String s) {
if (!s.trim().isEmpty()) {
WPTHPWE = Byte.parseByte(s);
} else {
WPTHPWE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPWL(String s) {
if (!s.trim().isEmpty()) {
WPTHPWL = Short.parseShort(s);
} else {
WPTHPWL = Short.MIN_VALUE;
}
}

protected final void initWPTHPWR(String s) {
if (!s.trim().isEmpty()) {
WPTHPWR = Byte.parseByte(s);
} else {
WPTHPWR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPWU(String s) {
if (!s.trim().isEmpty()) {
WPTHPWU = Short.parseShort(s);
} else {
WPTHPWU = Short.MIN_VALUE;
}
}

protected final void initWPTHPYE(String s) {
if (!s.trim().isEmpty()) {
WPTHPYE = Byte.parseByte(s);
} else {
WPTHPYE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPYL(String s) {
if (!s.trim().isEmpty()) {
WPTHPYL = Integer.parseInt(s);
} else {
WPTHPYL = Integer.MIN_VALUE;
}
}

protected final void initWPTHPYR(String s) {
if (!s.trim().isEmpty()) {
WPTHPYR = Byte.parseByte(s);
} else {
WPTHPYR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPYU(String s) {
if (!s.trim().isEmpty()) {
WPTHPYU = Integer.parseInt(s);
} else {
WPTHPYU = Integer.MIN_VALUE;
}
}

protected final void initWPTKP(String s) {
if (!s.trim().isEmpty()) {
WPTKP = Byte.parseByte(s);
} else {
WPTKP = Byte.MIN_VALUE;
}
}

protected final void initWPTKP14(String s) {
if (!s.trim().isEmpty()) {
WPTKP14 = Byte.parseByte(s);
} else {
WPTKP14 = Byte.MIN_VALUE;
}
}

protected final void initWPTKP15(String s) {
if (!s.trim().isEmpty()) {
WPTKP15 = Byte.parseByte(s);
} else {
WPTKP15 = Byte.MIN_VALUE;
}
}

protected final void initWPTKP16(String s) {
if (!s.trim().isEmpty()) {
WPTKP16 = Byte.parseByte(s);
} else {
WPTKP16 = Byte.MIN_VALUE;
}
}

protected final void initWPTKP2(String s) {
if (!s.trim().isEmpty()) {
WPTKP2 = Byte.parseByte(s);
} else {
WPTKP2 = Byte.MIN_VALUE;
}
}

protected final void initWPTKP3(String s) {
if (!s.trim().isEmpty()) {
WPTKP3 = Byte.parseByte(s);
} else {
WPTKP3 = Byte.MIN_VALUE;
}
}

protected final void initWPTKP4(String s) {
if (!s.trim().isEmpty()) {
WPTKP4 = Byte.parseByte(s);
} else {
WPTKP4 = Byte.MIN_VALUE;
}
}

protected final void initWPTKP5(String s) {
if (!s.trim().isEmpty()) {
WPTKP5 = Byte.parseByte(s);
} else {
WPTKP5 = Byte.MIN_VALUE;
}
}

protected final void initWPUPAFE(String s) {
if (!s.trim().isEmpty()) {
WPUPAFE = Byte.parseByte(s);
} else {
WPUPAFE = Byte.MIN_VALUE;
}
}

protected final void initWPUPAFL(String s) {
if (!s.trim().isEmpty()) {
WPUPAFL = Short.parseShort(s);
} else {
WPUPAFL = Short.MIN_VALUE;
}
}

protected final void initWPUPAFR(String s) {
if (!s.trim().isEmpty()) {
WPUPAFR = Byte.parseByte(s);
} else {
WPUPAFR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAFU(String s) {
if (!s.trim().isEmpty()) {
WPUPAFU = Short.parseShort(s);
} else {
WPUPAFU = Short.MIN_VALUE;
}
}

protected final void initWPUPAME(String s) {
if (!s.trim().isEmpty()) {
WPUPAME = Byte.parseByte(s);
} else {
WPUPAME = Byte.MIN_VALUE;
}
}

protected final void initWPUPAML(String s) {
if (!s.trim().isEmpty()) {
WPUPAML = Short.parseShort(s);
} else {
WPUPAML = Short.MIN_VALUE;
}
}

protected final void initWPUPAMR(String s) {
if (!s.trim().isEmpty()) {
WPUPAMR = Byte.parseByte(s);
} else {
WPUPAMR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAMU(String s) {
if (!s.trim().isEmpty()) {
WPUPAMU = Short.parseShort(s);
} else {
WPUPAMU = Short.MIN_VALUE;
}
}

protected final void initWPUPAOE(String s) {
if (!s.trim().isEmpty()) {
WPUPAOE = Integer.parseInt(s);
} else {
WPUPAOE = Integer.MIN_VALUE;
}
}

protected final void initWPUPAOL(String s) {
if (!s.trim().isEmpty()) {
WPUPAOL = Short.parseShort(s);
} else {
WPUPAOL = Short.MIN_VALUE;
}
}

protected final void initWPUPAOR(String s) {
if (!s.trim().isEmpty()) {
WPUPAOR = Byte.parseByte(s);
} else {
WPUPAOR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAOU(String s) {
if (!s.trim().isEmpty()) {
WPUPAOU = Short.parseShort(s);
} else {
WPUPAOU = Short.MIN_VALUE;
}
}

protected final void initWPUPAWE(String s) {
if (!s.trim().isEmpty()) {
WPUPAWE = Byte.parseByte(s);
} else {
WPUPAWE = Byte.MIN_VALUE;
}
}

protected final void initWPUPAWL(String s) {
if (!s.trim().isEmpty()) {
WPUPAWL = Short.parseShort(s);
} else {
WPUPAWL = Short.MIN_VALUE;
}
}

protected final void initWPUPAWR(String s) {
if (!s.trim().isEmpty()) {
WPUPAWR = Byte.parseByte(s);
} else {
WPUPAWR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAWU(String s) {
if (!s.trim().isEmpty()) {
WPUPAWU = Short.parseShort(s);
} else {
WPUPAWU = Short.MIN_VALUE;
}
}

protected final void initWPUPAYE(String s) {
if (!s.trim().isEmpty()) {
WPUPAYE = Byte.parseByte(s);
} else {
WPUPAYE = Byte.MIN_VALUE;
}
}

protected final void initWPUPAYL(String s) {
if (!s.trim().isEmpty()) {
WPUPAYL = Byte.parseByte(s);
} else {
WPUPAYL = Byte.MIN_VALUE;
}
}

protected final void initWPUPAYR(String s) {
if (!s.trim().isEmpty()) {
WPUPAYR = Byte.parseByte(s);
} else {
WPUPAYR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAYU(String s) {
if (!s.trim().isEmpty()) {
WPUPAYU = Short.parseShort(s);
} else {
WPUPAYU = Short.MIN_VALUE;
}
}

protected final void initWPVBUSE(String s) {
if (!s.trim().isEmpty()) {
WPVBUSE = Byte.parseByte(s);
} else {
WPVBUSE = Byte.MIN_VALUE;
}
}

protected final void initWPVBUSL(String s) {
if (!s.trim().isEmpty()) {
WPVBUSL = Integer.parseInt(s);
} else {
WPVBUSL = Integer.MIN_VALUE;
}
}

protected final void initWPVBUSR(String s) {
if (!s.trim().isEmpty()) {
WPVBUSR = Byte.parseByte(s);
} else {
WPVBUSR = Byte.MIN_VALUE;
}
}

protected final void initWPVBUSU(String s) {
if (!s.trim().isEmpty()) {
WPVBUSU = Integer.parseInt(s);
} else {
WPVBUSU = Integer.MIN_VALUE;
}
}

protected final void initWPW14FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14FE = false;
} else {
WPW14FE = true;
}
}
}

protected final void initWPW14FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14FL = false;
} else {
WPW14FL = true;
}
}
}

protected final void initWPW14FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14FR = false;
} else {
WPW14FR = true;
}
}
}

protected final void initWPW14FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14FU = false;
} else {
WPW14FU = true;
}
}
}

protected final void initWPW14ME(String s) {
if (!s.trim().isEmpty()) {
WPW14ME = Byte.parseByte(s);
} else {
WPW14ME = Byte.MIN_VALUE;
}
}

protected final void initWPW14ML(String s) {
if (!s.trim().isEmpty()) {
WPW14ML = Byte.parseByte(s);
} else {
WPW14ML = Byte.MIN_VALUE;
}
}

protected final void initWPW14MR(String s) {
if (!s.trim().isEmpty()) {
WPW14MR = Byte.parseByte(s);
} else {
WPW14MR = Byte.MIN_VALUE;
}
}

protected final void initWPW14MU(String s) {
if (!s.trim().isEmpty()) {
WPW14MU = Short.parseShort(s);
} else {
WPW14MU = Short.MIN_VALUE;
}
}

protected final void initWPW14OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14OE = false;
} else {
WPW14OE = true;
}
}
}

protected final void initWPW14OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14OL = false;
} else {
WPW14OL = true;
}
}
}

protected final void initWPW14OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14OR = false;
} else {
WPW14OR = true;
}
}
}

protected final void initWPW14OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14OU = false;
} else {
WPW14OU = true;
}
}
}

protected final void initWPW14WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14WE = false;
} else {
WPW14WE = true;
}
}
}

protected final void initWPW14WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14WL = false;
} else {
WPW14WL = true;
}
}
}

protected final void initWPW14WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14WR = false;
} else {
WPW14WR = true;
}
}
}

protected final void initWPW14WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14WU = false;
} else {
WPW14WU = true;
}
}
}

protected final void initWPW14YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14YE = false;
} else {
WPW14YE = true;
}
}
}

protected final void initWPW14YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14YL = false;
} else {
WPW14YL = true;
}
}
}

protected final void initWPW14YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14YR = false;
} else {
WPW14YR = true;
}
}
}

protected final void initWPW14YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW14YU = false;
} else {
WPW14YU = true;
}
}
}

protected final void initWPW15FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15FE = false;
} else {
WPW15FE = true;
}
}
}

protected final void initWPW15FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15FL = false;
} else {
WPW15FL = true;
}
}
}

protected final void initWPW15FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15FR = false;
} else {
WPW15FR = true;
}
}
}

protected final void initWPW15FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15FU = false;
} else {
WPW15FU = true;
}
}
}

protected final void initWPW15ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15ME = false;
} else {
WPW15ME = true;
}
}
}

protected final void initWPW15ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15ML = false;
} else {
WPW15ML = true;
}
}
}

protected final void initWPW15MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15MR = false;
} else {
WPW15MR = true;
}
}
}

protected final void initWPW15MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15MU = false;
} else {
WPW15MU = true;
}
}
}

protected final void initWPW15OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15OE = false;
} else {
WPW15OE = true;
}
}
}

protected final void initWPW15OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15OL = false;
} else {
WPW15OL = true;
}
}
}

protected final void initWPW15OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15OR = false;
} else {
WPW15OR = true;
}
}
}

protected final void initWPW15OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15OU = false;
} else {
WPW15OU = true;
}
}
}

protected final void initWPW15WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15WE = false;
} else {
WPW15WE = true;
}
}
}

protected final void initWPW15WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15WL = false;
} else {
WPW15WL = true;
}
}
}

protected final void initWPW15WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15WR = false;
} else {
WPW15WR = true;
}
}
}

protected final void initWPW15WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15WU = false;
} else {
WPW15WU = true;
}
}
}

protected final void initWPW15YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15YE = false;
} else {
WPW15YE = true;
}
}
}

protected final void initWPW15YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15YL = false;
} else {
WPW15YL = true;
}
}
}

protected final void initWPW15YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15YR = false;
} else {
WPW15YR = true;
}
}
}

protected final void initWPW15YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW15YU = false;
} else {
WPW15YU = true;
}
}
}

protected final void initWPW16FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16FE = false;
} else {
WPW16FE = true;
}
}
}

protected final void initWPW16FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16FL = false;
} else {
WPW16FL = true;
}
}
}

protected final void initWPW16FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16FR = false;
} else {
WPW16FR = true;
}
}
}

protected final void initWPW16FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16FU = false;
} else {
WPW16FU = true;
}
}
}

protected final void initWPW16ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16ME = false;
} else {
WPW16ME = true;
}
}
}

protected final void initWPW16ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16ML = false;
} else {
WPW16ML = true;
}
}
}

protected final void initWPW16MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16MR = false;
} else {
WPW16MR = true;
}
}
}

protected final void initWPW16MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16MU = false;
} else {
WPW16MU = true;
}
}
}

protected final void initWPW16OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16OE = false;
} else {
WPW16OE = true;
}
}
}

protected final void initWPW16OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16OL = false;
} else {
WPW16OL = true;
}
}
}

protected final void initWPW16OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16OR = false;
} else {
WPW16OR = true;
}
}
}

protected final void initWPW16OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16OU = false;
} else {
WPW16OU = true;
}
}
}

protected final void initWPW16WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16WE = false;
} else {
WPW16WE = true;
}
}
}

protected final void initWPW16WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16WL = false;
} else {
WPW16WL = true;
}
}
}

protected final void initWPW16WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16WR = false;
} else {
WPW16WR = true;
}
}
}

protected final void initWPW16WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16WU = false;
} else {
WPW16WU = true;
}
}
}

protected final void initWPW16YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16YE = false;
} else {
WPW16YE = true;
}
}
}

protected final void initWPW16YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16YL = false;
} else {
WPW16YL = true;
}
}
}

protected final void initWPW16YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16YR = false;
} else {
WPW16YR = true;
}
}
}

protected final void initWPW16YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW16YU = false;
} else {
WPW16YU = true;
}
}
}

protected final void initWPW24FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW24FE = false;
} else {
WPW24FE = true;
}
}
}

protected final void initWPW24FL(String s) {
if (!s.trim().isEmpty()) {
WPW24FL = Short.parseShort(s);
} else {
WPW24FL = Short.MIN_VALUE;
}
}

protected final void initWPW24FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW24FR = false;
} else {
WPW24FR = true;
}
}
}

protected final void initWPW24FU(String s) {
if (!s.trim().isEmpty()) {
WPW24FU = Short.parseShort(s);
} else {
WPW24FU = Short.MIN_VALUE;
}
}

protected final void initWPW24ME(String s) {
if (!s.trim().isEmpty()) {
WPW24ME = Byte.parseByte(s);
} else {
WPW24ME = Byte.MIN_VALUE;
}
}

protected final void initWPW24ML(String s) {
if (!s.trim().isEmpty()) {
WPW24ML = Short.parseShort(s);
} else {
WPW24ML = Short.MIN_VALUE;
}
}

protected final void initWPW24MR(String s) {
if (!s.trim().isEmpty()) {
WPW24MR = Byte.parseByte(s);
} else {
WPW24MR = Byte.MIN_VALUE;
}
}

protected final void initWPW24MU(String s) {
if (!s.trim().isEmpty()) {
WPW24MU = Short.parseShort(s);
} else {
WPW24MU = Short.MIN_VALUE;
}
}

protected final void initWPW24OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW24OE = false;
} else {
WPW24OE = true;
}
}
}

protected final void initWPW24OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW24OL = false;
} else {
WPW24OL = true;
}
}
}

protected final void initWPW24OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW24OR = false;
} else {
WPW24OR = true;
}
}
}

protected final void initWPW24OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW24OU = false;
} else {
WPW24OU = true;
}
}
}

protected final void initWPW24WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW24WE = false;
} else {
WPW24WE = true;
}
}
}

protected final void initWPW24WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW24WL = false;
} else {
WPW24WL = true;
}
}
}

protected final void initWPW24WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW24WR = false;
} else {
WPW24WR = true;
}
}
}

protected final void initWPW24WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW24WU = false;
} else {
WPW24WU = true;
}
}
}

protected final void initWPW24YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW24YE = false;
} else {
WPW24YE = true;
}
}
}

protected final void initWPW24YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW24YL = false;
} else {
WPW24YL = true;
}
}
}

protected final void initWPW24YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW24YR = false;
} else {
WPW24YR = true;
}
}
}

protected final void initWPW24YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW24YU = false;
} else {
WPW24YU = true;
}
}
}

protected final void initWPW25FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25FE = false;
} else {
WPW25FE = true;
}
}
}

protected final void initWPW25FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25FL = false;
} else {
WPW25FL = true;
}
}
}

protected final void initWPW25FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25FR = false;
} else {
WPW25FR = true;
}
}
}

protected final void initWPW25FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25FU = false;
} else {
WPW25FU = true;
}
}
}

protected final void initWPW25ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25ME = false;
} else {
WPW25ME = true;
}
}
}

protected final void initWPW25ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPW25ML = false;
} else {
WPW25ML = true;
}
}
}

protected final void initWPW25MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25MR = false;
} else {
WPW25MR = true;
}
}
}

protected final void initWPW25MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPW25MU = false;
} else {
WPW25MU = true;
}
}
}

protected final void initWPW25OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25OE = false;
} else {
WPW25OE = true;
}
}
}

protected final void initWPW25OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25OL = false;
} else {
WPW25OL = true;
}
}
}

protected final void initWPW25OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25OR = false;
} else {
WPW25OR = true;
}
}
}

protected final void initWPW25OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25OU = false;
} else {
WPW25OU = true;
}
}
}

protected final void initWPW25WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25WE = false;
} else {
WPW25WE = true;
}
}
}

protected final void initWPW25WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25WL = false;
} else {
WPW25WL = true;
}
}
}

protected final void initWPW25WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25WR = false;
} else {
WPW25WR = true;
}
}
}

protected final void initWPW25WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25WU = false;
} else {
WPW25WU = true;
}
}
}

protected final void initWPW25YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25YE = false;
} else {
WPW25YE = true;
}
}
}

protected final void initWPW25YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25YL = false;
} else {
WPW25YL = true;
}
}
}

protected final void initWPW25YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25YR = false;
} else {
WPW25YR = true;
}
}
}

protected final void initWPW25YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW25YU = false;
} else {
WPW25YU = true;
}
}
}

protected final void initWPW26FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26FE = false;
} else {
WPW26FE = true;
}
}
}

protected final void initWPW26FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26FL = false;
} else {
WPW26FL = true;
}
}
}

protected final void initWPW26FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26FR = false;
} else {
WPW26FR = true;
}
}
}

protected final void initWPW26FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26FU = false;
} else {
WPW26FU = true;
}
}
}

protected final void initWPW26ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26ME = false;
} else {
WPW26ME = true;
}
}
}

protected final void initWPW26ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPW26ML = false;
} else {
WPW26ML = true;
}
}
}

protected final void initWPW26MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26MR = false;
} else {
WPW26MR = true;
}
}
}

protected final void initWPW26MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPW26MU = false;
} else {
WPW26MU = true;
}
}
}

protected final void initWPW26OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26OE = false;
} else {
WPW26OE = true;
}
}
}

protected final void initWPW26OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26OL = false;
} else {
WPW26OL = true;
}
}
}

protected final void initWPW26OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26OR = false;
} else {
WPW26OR = true;
}
}
}

protected final void initWPW26OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26OU = false;
} else {
WPW26OU = true;
}
}
}

protected final void initWPW26WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26WE = false;
} else {
WPW26WE = true;
}
}
}

protected final void initWPW26WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26WL = false;
} else {
WPW26WL = true;
}
}
}

protected final void initWPW26WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26WR = false;
} else {
WPW26WR = true;
}
}
}

protected final void initWPW26WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26WU = false;
} else {
WPW26WU = true;
}
}
}

protected final void initWPW26YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26YE = false;
} else {
WPW26YE = true;
}
}
}

protected final void initWPW26YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26YL = false;
} else {
WPW26YL = true;
}
}
}

protected final void initWPW26YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26YR = false;
} else {
WPW26YR = true;
}
}
}

protected final void initWPW26YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPW26YU = false;
} else {
WPW26YU = true;
}
}
}

protected final void initWPWHYJ1(String s) {
if (!s.trim().isEmpty()) {
WPWHYJ1 = Byte.parseByte(s);
} else {
WPWHYJ1 = Byte.MIN_VALUE;
}
}

protected final void initWPWHYJ2(String s) {
if (!s.trim().isEmpty()) {
WPWHYJ2 = Byte.parseByte(s);
} else {
WPWHYJ2 = Byte.MIN_VALUE;
}
}

protected final void initWPWHYJ3(String s) {
if (!s.trim().isEmpty()) {
WPWHYJ3 = Byte.parseByte(s);
} else {
WPWHYJ3 = Byte.MIN_VALUE;
}
}

protected final void initWPWHYJ4(String s) {
if (!s.trim().isEmpty()) {
WPWHYJ4 = Byte.parseByte(s);
} else {
WPWHYJ4 = Byte.MIN_VALUE;
}
}

protected final void initWPWHYJ5(String s) {
if (!s.trim().isEmpty()) {
WPWHYJ5 = Byte.parseByte(s);
} else {
WPWHYJ5 = Byte.MIN_VALUE;
}
}

protected final void initWPWHYJM(String s) {
if (!s.trim().isEmpty()) {
WPWHYJM = Byte.parseByte(s);
} else {
WPWHYJM = Byte.MIN_VALUE;
}
}

protected final void initWPWHYN1(String s) {
if (!s.trim().isEmpty()) {
WPWHYN1 = Byte.parseByte(s);
} else {
WPWHYN1 = Byte.MIN_VALUE;
}
}

protected final void initWPWHYN2(String s) {
if (!s.trim().isEmpty()) {
WPWHYN2 = Byte.parseByte(s);
} else {
WPWHYN2 = Byte.MIN_VALUE;
}
}

protected final void initWPWHYN3(String s) {
if (!s.trim().isEmpty()) {
WPWHYN3 = Byte.parseByte(s);
} else {
WPWHYN3 = Byte.MIN_VALUE;
}
}

protected final void initWPWHYN4(String s) {
if (!s.trim().isEmpty()) {
WPWHYN4 = Byte.parseByte(s);
} else {
WPWHYN4 = Byte.MIN_VALUE;
}
}

protected final void initWPWHYN5(String s) {
if (!s.trim().isEmpty()) {
WPWHYN5 = Byte.parseByte(s);
} else {
WPWHYN5 = Byte.MIN_VALUE;
}
}

protected final void initWPWHYN6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWHYN6 = false;
} else {
WPWHYN6 = true;
}
}
}

protected final void initWPWLYYE(String s) {
if (!s.trim().isEmpty()) {
WPWLYYE = Byte.parseByte(s);
} else {
WPWLYYE = Byte.MIN_VALUE;
}
}

protected final void initWPWLYYL(String s) {
if (!s.trim().isEmpty()) {
WPWLYYL = Integer.parseInt(s);
} else {
WPWLYYL = Integer.MIN_VALUE;
}
}

protected final void initWPWLYYR(String s) {
if (!s.trim().isEmpty()) {
WPWLYYR = Byte.parseByte(s);
} else {
WPWLYYR = Byte.MIN_VALUE;
}
}

protected final void initWPWLYYU(String s) {
if (!s.trim().isEmpty()) {
WPWLYYU = Integer.parseInt(s);
} else {
WPWLYYU = Integer.MIN_VALUE;
}
}

protected final void initWPWPN(String s) {
if (!s.trim().isEmpty()) {
WPWPN = Byte.parseByte(s);
} else {
WPWPN = Byte.MIN_VALUE;
}
}

protected final void initWPWPS(String s) {
if (!s.trim().isEmpty()) {
WPWPS = Byte.parseByte(s);
} else {
WPWPS = Byte.MIN_VALUE;
}
}

protected final void initWPWTX(String s) {
if (!s.trim().isEmpty()) {
WPWTX = Byte.parseByte(s);
} else {
WPWTX = Byte.MIN_VALUE;
}
}

protected final void initWPWTX14(String s) {
if (!s.trim().isEmpty()) {
WPWTX14 = Byte.parseByte(s);
} else {
WPWTX14 = Byte.MIN_VALUE;
}
}

protected final void initWPWTX15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWTX15 = false;
} else {
WPWTX15 = true;
}
}
}

protected final void initWPWTX16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWTX16 = false;
} else {
WPWTX16 = true;
}
}
}

protected final void initWPWTX2(String s) {
if (!s.trim().isEmpty()) {
WPWTX2 = Byte.parseByte(s);
} else {
WPWTX2 = Byte.MIN_VALUE;
}
}

protected final void initWPWTX24(String s) {
if (!s.trim().isEmpty()) {
WPWTX24 = Byte.parseByte(s);
} else {
WPWTX24 = Byte.MIN_VALUE;
}
}

protected final void initWPWTX25(String s) {
if (!s.trim().isEmpty()) {
WPWTX25 = Byte.parseByte(s);
} else {
WPWTX25 = Byte.MIN_VALUE;
}
}

protected final void initWPWTX26(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWTX26 = false;
} else {
WPWTX26 = true;
}
}
}

protected final void initWPWTX3(String s) {
if (!s.trim().isEmpty()) {
WPWTX3 = Byte.parseByte(s);
} else {
WPWTX3 = Byte.MIN_VALUE;
}
}

protected final void initWPWTX4(String s) {
if (!s.trim().isEmpty()) {
WPWTX4 = Byte.parseByte(s);
} else {
WPWTX4 = Byte.MIN_VALUE;
}
}

protected final void initWPWTX5(String s) {
if (!s.trim().isEmpty()) {
WPWTX5 = Byte.parseByte(s);
} else {
WPWTX5 = Byte.MIN_VALUE;
}
}

protected final void initWPWTX6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWTX6 = false;
} else {
WPWTX6 = true;
}
}
}

protected final void initWPWW2FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW2FE = false;
} else {
WPWW2FE = true;
}
}
}

protected final void initWPWW2FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW2FL = false;
} else {
WPWW2FL = true;
}
}
}

protected final void initWPWW2FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW2FR = false;
} else {
WPWW2FR = true;
}
}
}

protected final void initWPWW2FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW2FU = false;
} else {
WPWW2FU = true;
}
}
}

protected final void initWPWW2ME(String s) {
if (!s.trim().isEmpty()) {
WPWW2ME = Byte.parseByte(s);
} else {
WPWW2ME = Byte.MIN_VALUE;
}
}

protected final void initWPWW2ML(String s) {
if (!s.trim().isEmpty()) {
WPWW2ML = Short.parseShort(s);
} else {
WPWW2ML = Short.MIN_VALUE;
}
}

protected final void initWPWW2MR(String s) {
if (!s.trim().isEmpty()) {
WPWW2MR = Byte.parseByte(s);
} else {
WPWW2MR = Byte.MIN_VALUE;
}
}

protected final void initWPWW2MU(String s) {
if (!s.trim().isEmpty()) {
WPWW2MU = Short.parseShort(s);
} else {
WPWW2MU = Short.MIN_VALUE;
}
}

protected final void initWPWW2OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW2OE = false;
} else {
WPWW2OE = true;
}
}
}

protected final void initWPWW2OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
WPWW2OL = false;
} else {
WPWW2OL = true;
}
}
}

protected final void initWPWW2OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW2OR = false;
} else {
WPWW2OR = true;
}
}
}

protected final void initWPWW2OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
WPWW2OU = false;
} else {
WPWW2OU = true;
}
}
}

protected final void initWPWW2WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW2WE = false;
} else {
WPWW2WE = true;
}
}
}

protected final void initWPWW2WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW2WL = false;
} else {
WPWW2WL = true;
}
}
}

protected final void initWPWW2WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW2WR = false;
} else {
WPWW2WR = true;
}
}
}

protected final void initWPWW2WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW2WU = false;
} else {
WPWW2WU = true;
}
}
}

protected final void initWPWW2YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW2YE = false;
} else {
WPWW2YE = true;
}
}
}

protected final void initWPWW2YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
WPWW2YL = false;
} else {
WPWW2YL = true;
}
}
}

protected final void initWPWW2YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW2YR = false;
} else {
WPWW2YR = true;
}
}
}

protected final void initWPWW2YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
WPWW2YU = false;
} else {
WPWW2YU = true;
}
}
}

protected final void initWPWW3FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3FE = false;
} else {
WPWW3FE = true;
}
}
}

protected final void initWPWW3FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3FL = false;
} else {
WPWW3FL = true;
}
}
}

protected final void initWPWW3FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3FR = false;
} else {
WPWW3FR = true;
}
}
}

protected final void initWPWW3FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3FU = false;
} else {
WPWW3FU = true;
}
}
}

protected final void initWPWW3ME(String s) {
if (!s.trim().isEmpty()) {
WPWW3ME = Byte.parseByte(s);
} else {
WPWW3ME = Byte.MIN_VALUE;
}
}

protected final void initWPWW3ML(String s) {
if (!s.trim().isEmpty()) {
WPWW3ML = Short.parseShort(s);
} else {
WPWW3ML = Short.MIN_VALUE;
}
}

protected final void initWPWW3MR(String s) {
if (!s.trim().isEmpty()) {
WPWW3MR = Byte.parseByte(s);
} else {
WPWW3MR = Byte.MIN_VALUE;
}
}

protected final void initWPWW3MU(String s) {
if (!s.trim().isEmpty()) {
WPWW3MU = Short.parseShort(s);
} else {
WPWW3MU = Short.MIN_VALUE;
}
}

protected final void initWPWW3OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3OE = false;
} else {
WPWW3OE = true;
}
}
}

protected final void initWPWW3OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3OL = false;
} else {
WPWW3OL = true;
}
}
}

protected final void initWPWW3OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3OR = false;
} else {
WPWW3OR = true;
}
}
}

protected final void initWPWW3OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3OU = false;
} else {
WPWW3OU = true;
}
}
}

protected final void initWPWW3WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3WE = false;
} else {
WPWW3WE = true;
}
}
}

protected final void initWPWW3WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3WL = false;
} else {
WPWW3WL = true;
}
}
}

protected final void initWPWW3WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3WR = false;
} else {
WPWW3WR = true;
}
}
}

protected final void initWPWW3WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3WU = false;
} else {
WPWW3WU = true;
}
}
}

protected final void initWPWW3YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3YE = false;
} else {
WPWW3YE = true;
}
}
}

protected final void initWPWW3YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3YL = false;
} else {
WPWW3YL = true;
}
}
}

protected final void initWPWW3YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3YR = false;
} else {
WPWW3YR = true;
}
}
}

protected final void initWPWW3YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW3YU = false;
} else {
WPWW3YU = true;
}
}
}

protected final void initWPWW4FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW4FE = false;
} else {
WPWW4FE = true;
}
}
}

protected final void initWPWW4FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPWW4FL = false;
} else {
WPWW4FL = true;
}
}
}

protected final void initWPWW4FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW4FR = false;
} else {
WPWW4FR = true;
}
}
}

protected final void initWPWW4FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW4FU = false;
} else {
WPWW4FU = true;
}
}
}

protected final void initWPWW4ME(String s) {
if (!s.trim().isEmpty()) {
WPWW4ME = Byte.parseByte(s);
} else {
WPWW4ME = Byte.MIN_VALUE;
}
}

protected final void initWPWW4ML(String s) {
if (!s.trim().isEmpty()) {
WPWW4ML = Short.parseShort(s);
} else {
WPWW4ML = Short.MIN_VALUE;
}
}

protected final void initWPWW4MR(String s) {
if (!s.trim().isEmpty()) {
WPWW4MR = Byte.parseByte(s);
} else {
WPWW4MR = Byte.MIN_VALUE;
}
}

protected final void initWPWW4MU(String s) {
if (!s.trim().isEmpty()) {
WPWW4MU = Short.parseShort(s);
} else {
WPWW4MU = Short.MIN_VALUE;
}
}

protected final void initWPWW4OE(String s) {
if (!s.trim().isEmpty()) {
WPWW4OE = Byte.parseByte(s);
} else {
WPWW4OE = Byte.MIN_VALUE;
}
}

protected final void initWPWW4OL(String s) {
if (!s.trim().isEmpty()) {
WPWW4OL = Byte.parseByte(s);
} else {
WPWW4OL = Byte.MIN_VALUE;
}
}

protected final void initWPWW4OR(String s) {
if (!s.trim().isEmpty()) {
WPWW4OR = Byte.parseByte(s);
} else {
WPWW4OR = Byte.MIN_VALUE;
}
}

protected final void initWPWW4OU(String s) {
if (!s.trim().isEmpty()) {
WPWW4OU = Short.parseShort(s);
} else {
WPWW4OU = Short.MIN_VALUE;
}
}

protected final void initWPWW4WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW4WE = false;
} else {
WPWW4WE = true;
}
}
}

protected final void initWPWW4WL(String s) {
if (!s.trim().isEmpty()) {
WPWW4WL = Short.parseShort(s);
} else {
WPWW4WL = Short.MIN_VALUE;
}
}

protected final void initWPWW4WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW4WR = false;
} else {
WPWW4WR = true;
}
}
}

protected final void initWPWW4WU(String s) {
if (!s.trim().isEmpty()) {
WPWW4WU = Short.parseShort(s);
} else {
WPWW4WU = Short.MIN_VALUE;
}
}

protected final void initWPWW4YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW4YE = false;
} else {
WPWW4YE = true;
}
}
}

protected final void initWPWW4YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW4YL = false;
} else {
WPWW4YL = true;
}
}
}

protected final void initWPWW4YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW4YR = false;
} else {
WPWW4YR = true;
}
}
}

protected final void initWPWW4YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW4YU = false;
} else {
WPWW4YU = true;
}
}
}

protected final void initWPWW5FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW5FE = false;
} else {
WPWW5FE = true;
}
}
}

protected final void initWPWW5FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW5FL = false;
} else {
WPWW5FL = true;
}
}
}

protected final void initWPWW5FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW5FR = false;
} else {
WPWW5FR = true;
}
}
}

protected final void initWPWW5FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW5FU = false;
} else {
WPWW5FU = true;
}
}
}

protected final void initWPWW5ME(String s) {
if (!s.trim().isEmpty()) {
WPWW5ME = Byte.parseByte(s);
} else {
WPWW5ME = Byte.MIN_VALUE;
}
}

protected final void initWPWW5ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
WPWW5ML = false;
} else {
WPWW5ML = true;
}
}
}

protected final void initWPWW5MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW5MR = false;
} else {
WPWW5MR = true;
}
}
}

protected final void initWPWW5MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
WPWW5MU = false;
} else {
WPWW5MU = true;
}
}
}

protected final void initWPWW5OE(String s) {
if (!s.trim().isEmpty()) {
WPWW5OE = Byte.parseByte(s);
} else {
WPWW5OE = Byte.MIN_VALUE;
}
}

protected final void initWPWW5OL(String s) {
if (!s.trim().isEmpty()) {
WPWW5OL = Byte.parseByte(s);
} else {
WPWW5OL = Byte.MIN_VALUE;
}
}

protected final void initWPWW5OR(String s) {
if (!s.trim().isEmpty()) {
WPWW5OR = Byte.parseByte(s);
} else {
WPWW5OR = Byte.MIN_VALUE;
}
}

protected final void initWPWW5OU(String s) {
if (!s.trim().isEmpty()) {
WPWW5OU = Byte.parseByte(s);
} else {
WPWW5OU = Byte.MIN_VALUE;
}
}

protected final void initWPWW5WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW5WE = false;
} else {
WPWW5WE = true;
}
}
}

protected final void initWPWW5WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW5WL = false;
} else {
WPWW5WL = true;
}
}
}

protected final void initWPWW5WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW5WR = false;
} else {
WPWW5WR = true;
}
}
}

protected final void initWPWW5WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW5WU = false;
} else {
WPWW5WU = true;
}
}
}

protected final void initWPWW5YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW5YE = false;
} else {
WPWW5YE = true;
}
}
}

protected final void initWPWW5YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW5YL = false;
} else {
WPWW5YL = true;
}
}
}

protected final void initWPWW5YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW5YR = false;
} else {
WPWW5YR = true;
}
}
}

protected final void initWPWW5YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW5YU = false;
} else {
WPWW5YU = true;
}
}
}

protected final void initWPWW6FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6FE = false;
} else {
WPWW6FE = true;
}
}
}

protected final void initWPWW6FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6FL = false;
} else {
WPWW6FL = true;
}
}
}

protected final void initWPWW6FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6FR = false;
} else {
WPWW6FR = true;
}
}
}

protected final void initWPWW6FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6FU = false;
} else {
WPWW6FU = true;
}
}
}

protected final void initWPWW6ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6ME = false;
} else {
WPWW6ME = true;
}
}
}

protected final void initWPWW6ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6ML = false;
} else {
WPWW6ML = true;
}
}
}

protected final void initWPWW6MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6MR = false;
} else {
WPWW6MR = true;
}
}
}

protected final void initWPWW6MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6MU = false;
} else {
WPWW6MU = true;
}
}
}

protected final void initWPWW6OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6OE = false;
} else {
WPWW6OE = true;
}
}
}

protected final void initWPWW6OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6OL = false;
} else {
WPWW6OL = true;
}
}
}

protected final void initWPWW6OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6OR = false;
} else {
WPWW6OR = true;
}
}
}

protected final void initWPWW6OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6OU = false;
} else {
WPWW6OU = true;
}
}
}

protected final void initWPWW6WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6WE = false;
} else {
WPWW6WE = true;
}
}
}

protected final void initWPWW6WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6WL = false;
} else {
WPWW6WL = true;
}
}
}

protected final void initWPWW6WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6WR = false;
} else {
WPWW6WR = true;
}
}
}

protected final void initWPWW6WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6WU = false;
} else {
WPWW6WU = true;
}
}
}

protected final void initWPWW6YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6YE = false;
} else {
WPWW6YE = true;
}
}
}

protected final void initWPWW6YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6YL = false;
} else {
WPWW6YL = true;
}
}
}

protected final void initWPWW6YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6YR = false;
} else {
WPWW6YR = true;
}
}
}

protected final void initWPWW6YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWW6YU = false;
} else {
WPWW6YU = true;
}
}
}

protected final void initWPWWFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWWFE = false;
} else {
WPWWFE = true;
}
}
}

protected final void initWPWWFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWWFL = false;
} else {
WPWWFL = true;
}
}
}

protected final void initWPWWFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWWFR = false;
} else {
WPWWFR = true;
}
}
}

protected final void initWPWWFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWWFU = false;
} else {
WPWWFU = true;
}
}
}

protected final void initWPWWME(String s) {
if (!s.trim().isEmpty()) {
WPWWME = Byte.parseByte(s);
} else {
WPWWME = Byte.MIN_VALUE;
}
}

protected final void initWPWWML(String s) {
if (!s.trim().isEmpty()) {
WPWWML = Short.parseShort(s);
} else {
WPWWML = Short.MIN_VALUE;
}
}

protected final void initWPWWMR(String s) {
if (!s.trim().isEmpty()) {
WPWWMR = Byte.parseByte(s);
} else {
WPWWMR = Byte.MIN_VALUE;
}
}

protected final void initWPWWMU(String s) {
if (!s.trim().isEmpty()) {
WPWWMU = Short.parseShort(s);
} else {
WPWWMU = Short.MIN_VALUE;
}
}

protected final void initWPWWOE(String s) {
if (!s.trim().isEmpty()) {
WPWWOE = Byte.parseByte(s);
} else {
WPWWOE = Byte.MIN_VALUE;
}
}

protected final void initWPWWOL(String s) {
if (!s.trim().isEmpty()) {
WPWWOL = Byte.parseByte(s);
} else {
WPWWOL = Byte.MIN_VALUE;
}
}

protected final void initWPWWOR(String s) {
if (!s.trim().isEmpty()) {
WPWWOR = Byte.parseByte(s);
} else {
WPWWOR = Byte.MIN_VALUE;
}
}

protected final void initWPWWOU(String s) {
if (!s.trim().isEmpty()) {
WPWWOU = Short.parseShort(s);
} else {
WPWWOU = Short.MIN_VALUE;
}
}

protected final void initWPWWWE(String s) {
if (!s.trim().isEmpty()) {
WPWWWE = Byte.parseByte(s);
} else {
WPWWWE = Byte.MIN_VALUE;
}
}

protected final void initWPWWWL(String s) {
if (!s.trim().isEmpty()) {
WPWWWL = Short.parseShort(s);
} else {
WPWWWL = Short.MIN_VALUE;
}
}

protected final void initWPWWWR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWWWR = false;
} else {
WPWWWR = true;
}
}
}

protected final void initWPWWWU(String s) {
if (!s.trim().isEmpty()) {
WPWWWU = Short.parseShort(s);
} else {
WPWWWU = Short.MIN_VALUE;
}
}

protected final void initWPWWYE(String s) {
if (!s.trim().isEmpty()) {
WPWWYE = Byte.parseByte(s);
} else {
WPWWYE = Byte.MIN_VALUE;
}
}

protected final void initWPWWYL(String s) {
if (!s.trim().isEmpty()) {
WPWWYL = Byte.parseByte(s);
} else {
WPWWYL = Byte.MIN_VALUE;
}
}

protected final void initWPWWYR(String s) {
if (!s.trim().isEmpty()) {
WPWWYR = Byte.parseByte(s);
} else {
WPWWYR = Byte.MIN_VALUE;
}
}

protected final void initWPWWYU(String s) {
if (!s.trim().isEmpty()) {
WPWWYU = Short.parseShort(s);
} else {
WPWWYU = Short.MIN_VALUE;
}
}

protected final void initWPWYJ14(String s) {
if (!s.trim().isEmpty()) {
WPWYJ14 = Byte.parseByte(s);
} else {
WPWYJ14 = Byte.MIN_VALUE;
}
}

protected final void initWPWYJ15(String s) {
if (!s.trim().isEmpty()) {
WPWYJ15 = Byte.parseByte(s);
} else {
WPWYJ15 = Byte.MIN_VALUE;
}
}

protected final void initWPWYJ16(String s) {
if (!s.trim().isEmpty()) {
WPWYJ16 = Byte.parseByte(s);
} else {
WPWYJ16 = Byte.MIN_VALUE;
}
}

protected final void initWPWYJ17(String s) {
if (!s.trim().isEmpty()) {
WPWYJ17 = Byte.parseByte(s);
} else {
WPWYJ17 = Byte.MIN_VALUE;
}
}

protected final void initWPWYJ18(String s) {
if (!s.trim().isEmpty()) {
WPWYJ18 = Byte.parseByte(s);
} else {
WPWYJ18 = Byte.MIN_VALUE;
}
}

protected final void initWPWYN16(String s) {
if (!s.trim().isEmpty()) {
WPWYN16 = Byte.parseByte(s);
} else {
WPWYN16 = Byte.MIN_VALUE;
}
}

protected final void initWPWYN17(String s) {
if (!s.trim().isEmpty()) {
WPWYN17 = Byte.parseByte(s);
} else {
WPWYN17 = Byte.MIN_VALUE;
}
}

protected final void initWPWYN18(String s) {
if (!s.trim().isEmpty()) {
WPWYN18 = Byte.parseByte(s);
} else {
WPWYN18 = Byte.MIN_VALUE;
}
}

protected final void initWPWYN19(String s) {
if (!s.trim().isEmpty()) {
WPWYN19 = Byte.parseByte(s);
} else {
WPWYN19 = Byte.MIN_VALUE;
}
}

protected final void initWPWYN20(String s) {
if (!s.trim().isEmpty()) {
WPWYN20 = Byte.parseByte(s);
} else {
WPWYN20 = Byte.MIN_VALUE;
}
}

protected final void initWPWYN21(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWYN21 = false;
} else {
WPWYN21 = true;
}
}
}

protected final void initWPWYW15(String s) {
if (!s.trim().isEmpty()) {
WPWYW15 = Byte.parseByte(s);
} else {
WPWYW15 = Byte.MIN_VALUE;
}
}

protected final void initWPWYW16(String s) {
if (!s.trim().isEmpty()) {
WPWYW16 = Byte.parseByte(s);
} else {
WPWYW16 = Byte.MIN_VALUE;
}
}

protected final void initWPWYW17(String s) {
if (!s.trim().isEmpty()) {
WPWYW17 = Byte.parseByte(s);
} else {
WPWYW17 = Byte.MIN_VALUE;
}
}

protected final void initWPWYW18(String s) {
if (!s.trim().isEmpty()) {
WPWYW18 = Byte.parseByte(s);
} else {
WPWYW18 = Byte.MIN_VALUE;
}
}

protected final void initWPWYWK1(String s) {
if (!s.trim().isEmpty()) {
WPWYWK1 = Byte.parseByte(s);
} else {
WPWYWK1 = Byte.MIN_VALUE;
}
}

protected final void initWPWYWK2(String s) {
if (!s.trim().isEmpty()) {
WPWYWK2 = Byte.parseByte(s);
} else {
WPWYWK2 = Byte.MIN_VALUE;
}
}

protected final void initWPWYWK3(String s) {
if (!s.trim().isEmpty()) {
WPWYWK3 = Byte.parseByte(s);
} else {
WPWYWK3 = Byte.MIN_VALUE;
}
}

protected final void initWPWYWK4(String s) {
if (!s.trim().isEmpty()) {
WPWYWK4 = Byte.parseByte(s);
} else {
WPWYWK4 = Byte.MIN_VALUE;
}
}

protected final void initWPWYWK5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWYWK5 = false;
} else {
WPWYWK5 = true;
}
}
}

protected final void initWPY17FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY17FE = false;
} else {
WPY17FE = true;
}
}
}

protected final void initWPY17FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY17FL = false;
} else {
WPY17FL = true;
}
}
}

protected final void initWPY17FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY17FR = false;
} else {
WPY17FR = true;
}
}
}

protected final void initWPY17FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY17FU = false;
} else {
WPY17FU = true;
}
}
}

protected final void initWPY17ME(String s) {
if (!s.trim().isEmpty()) {
WPY17ME = Byte.parseByte(s);
} else {
WPY17ME = Byte.MIN_VALUE;
}
}

protected final void initWPY17ML(String s) {
if (!s.trim().isEmpty()) {
WPY17ML = Short.parseShort(s);
} else {
WPY17ML = Short.MIN_VALUE;
}
}

protected final void initWPY17MR(String s) {
if (!s.trim().isEmpty()) {
WPY17MR = Byte.parseByte(s);
} else {
WPY17MR = Byte.MIN_VALUE;
}
}

protected final void initWPY17MU(String s) {
if (!s.trim().isEmpty()) {
WPY17MU = Short.parseShort(s);
} else {
WPY17MU = Short.MIN_VALUE;
}
}

protected final void initWPY17OE(String s) {
if (!s.trim().isEmpty()) {
WPY17OE = Byte.parseByte(s);
} else {
WPY17OE = Byte.MIN_VALUE;
}
}

protected final void initWPY17OL(String s) {
if (!s.trim().isEmpty()) {
WPY17OL = Short.parseShort(s);
} else {
WPY17OL = Short.MIN_VALUE;
}
}

protected final void initWPY17OR(String s) {
if (!s.trim().isEmpty()) {
WPY17OR = Byte.parseByte(s);
} else {
WPY17OR = Byte.MIN_VALUE;
}
}

protected final void initWPY17OU(String s) {
if (!s.trim().isEmpty()) {
WPY17OU = Short.parseShort(s);
} else {
WPY17OU = Short.MIN_VALUE;
}
}

protected final void initWPY17WE(String s) {
if (!s.trim().isEmpty()) {
WPY17WE = Byte.parseByte(s);
} else {
WPY17WE = Byte.MIN_VALUE;
}
}

protected final void initWPY17WL(String s) {
if (!s.trim().isEmpty()) {
WPY17WL = Short.parseShort(s);
} else {
WPY17WL = Short.MIN_VALUE;
}
}

protected final void initWPY17WR(String s) {
if (!s.trim().isEmpty()) {
WPY17WR = Byte.parseByte(s);
} else {
WPY17WR = Byte.MIN_VALUE;
}
}

protected final void initWPY17WU(String s) {
if (!s.trim().isEmpty()) {
WPY17WU = Short.parseShort(s);
} else {
WPY17WU = Short.MIN_VALUE;
}
}

protected final void initWPY17YE(String s) {
if (!s.trim().isEmpty()) {
WPY17YE = Byte.parseByte(s);
} else {
WPY17YE = Byte.MIN_VALUE;
}
}

protected final void initWPY17YL(String s) {
if (!s.trim().isEmpty()) {
WPY17YL = Short.parseShort(s);
} else {
WPY17YL = Short.MIN_VALUE;
}
}

protected final void initWPY17YR(String s) {
if (!s.trim().isEmpty()) {
WPY17YR = Byte.parseByte(s);
} else {
WPY17YR = Byte.MIN_VALUE;
}
}

protected final void initWPY17YU(String s) {
if (!s.trim().isEmpty()) {
WPY17YU = Short.parseShort(s);
} else {
WPY17YU = Short.MIN_VALUE;
}
}

protected final void initWPY18FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY18FE = false;
} else {
WPY18FE = true;
}
}
}

protected final void initWPY18FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY18FL = false;
} else {
WPY18FL = true;
}
}
}

protected final void initWPY18FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY18FR = false;
} else {
WPY18FR = true;
}
}
}

protected final void initWPY18FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY18FU = false;
} else {
WPY18FU = true;
}
}
}

protected final void initWPY18ME(String s) {
if (!s.trim().isEmpty()) {
WPY18ME = Byte.parseByte(s);
} else {
WPY18ME = Byte.MIN_VALUE;
}
}

protected final void initWPY18ML(String s) {
if (!s.trim().isEmpty()) {
WPY18ML = Short.parseShort(s);
} else {
WPY18ML = Short.MIN_VALUE;
}
}

protected final void initWPY18MR(String s) {
if (!s.trim().isEmpty()) {
WPY18MR = Byte.parseByte(s);
} else {
WPY18MR = Byte.MIN_VALUE;
}
}

protected final void initWPY18MU(String s) {
if (!s.trim().isEmpty()) {
WPY18MU = Short.parseShort(s);
} else {
WPY18MU = Short.MIN_VALUE;
}
}

protected final void initWPY18OE(String s) {
if (!s.trim().isEmpty()) {
WPY18OE = Byte.parseByte(s);
} else {
WPY18OE = Byte.MIN_VALUE;
}
}

protected final void initWPY18OL(String s) {
if (!s.trim().isEmpty()) {
WPY18OL = Short.parseShort(s);
} else {
WPY18OL = Short.MIN_VALUE;
}
}

protected final void initWPY18OR(String s) {
if (!s.trim().isEmpty()) {
WPY18OR = Byte.parseByte(s);
} else {
WPY18OR = Byte.MIN_VALUE;
}
}

protected final void initWPY18OU(String s) {
if (!s.trim().isEmpty()) {
WPY18OU = Short.parseShort(s);
} else {
WPY18OU = Short.MIN_VALUE;
}
}

protected final void initWPY18WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY18WE = false;
} else {
WPY18WE = true;
}
}
}

protected final void initWPY18WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY18WL = false;
} else {
WPY18WL = true;
}
}
}

protected final void initWPY18WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY18WR = false;
} else {
WPY18WR = true;
}
}
}

protected final void initWPY18WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY18WU = false;
} else {
WPY18WU = true;
}
}
}

protected final void initWPY18YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY18YE = false;
} else {
WPY18YE = true;
}
}
}

protected final void initWPY18YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY18YL = false;
} else {
WPY18YL = true;
}
}
}

protected final void initWPY18YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY18YR = false;
} else {
WPY18YR = true;
}
}
}

protected final void initWPY18YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY18YU = false;
} else {
WPY18YU = true;
}
}
}

protected final void initWPY19FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19FE = false;
} else {
WPY19FE = true;
}
}
}

protected final void initWPY19FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19FL = false;
} else {
WPY19FL = true;
}
}
}

protected final void initWPY19FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19FR = false;
} else {
WPY19FR = true;
}
}
}

protected final void initWPY19FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19FU = false;
} else {
WPY19FU = true;
}
}
}

protected final void initWPY19ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19ME = false;
} else {
WPY19ME = true;
}
}
}

protected final void initWPY19ML(String s) {
if (!s.trim().isEmpty()) {
WPY19ML = Byte.parseByte(s);
} else {
WPY19ML = Byte.MIN_VALUE;
}
}

protected final void initWPY19MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19MR = false;
} else {
WPY19MR = true;
}
}
}

protected final void initWPY19MU(String s) {
if (!s.trim().isEmpty()) {
WPY19MU = Short.parseShort(s);
} else {
WPY19MU = Short.MIN_VALUE;
}
}

protected final void initWPY19OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19OE = false;
} else {
WPY19OE = true;
}
}
}

protected final void initWPY19OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19OL = false;
} else {
WPY19OL = true;
}
}
}

protected final void initWPY19OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19OR = false;
} else {
WPY19OR = true;
}
}
}

protected final void initWPY19OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19OU = false;
} else {
WPY19OU = true;
}
}
}

protected final void initWPY19WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19WE = false;
} else {
WPY19WE = true;
}
}
}

protected final void initWPY19WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19WL = false;
} else {
WPY19WL = true;
}
}
}

protected final void initWPY19WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19WR = false;
} else {
WPY19WR = true;
}
}
}

protected final void initWPY19WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19WU = false;
} else {
WPY19WU = true;
}
}
}

protected final void initWPY19YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19YE = false;
} else {
WPY19YE = true;
}
}
}

protected final void initWPY19YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19YL = false;
} else {
WPY19YL = true;
}
}
}

protected final void initWPY19YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19YR = false;
} else {
WPY19YR = true;
}
}
}

protected final void initWPY19YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY19YU = false;
} else {
WPY19YU = true;
}
}
}

protected final void initWPY2FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY2FE = false;
} else {
WPY2FE = true;
}
}
}

protected final void initWPY2FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY2FL = false;
} else {
WPY2FL = true;
}
}
}

protected final void initWPY2FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY2FR = false;
} else {
WPY2FR = true;
}
}
}

protected final void initWPY2FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY2FU = false;
} else {
WPY2FU = true;
}
}
}

protected final void initWPY2ME(String s) {
if (!s.trim().isEmpty()) {
WPY2ME = Byte.parseByte(s);
} else {
WPY2ME = Byte.MIN_VALUE;
}
}

protected final void initWPY2ML(String s) {
if (!s.trim().isEmpty()) {
WPY2ML = Short.parseShort(s);
} else {
WPY2ML = Short.MIN_VALUE;
}
}

protected final void initWPY2MR(String s) {
if (!s.trim().isEmpty()) {
WPY2MR = Byte.parseByte(s);
} else {
WPY2MR = Byte.MIN_VALUE;
}
}

protected final void initWPY2MU(String s) {
if (!s.trim().isEmpty()) {
WPY2MU = Short.parseShort(s);
} else {
WPY2MU = Short.MIN_VALUE;
}
}

protected final void initWPY2OE(String s) {
if (!s.trim().isEmpty()) {
WPY2OE = Byte.parseByte(s);
} else {
WPY2OE = Byte.MIN_VALUE;
}
}

protected final void initWPY2OL(String s) {
if (!s.trim().isEmpty()) {
WPY2OL = Short.parseShort(s);
} else {
WPY2OL = Short.MIN_VALUE;
}
}

protected final void initWPY2OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY2OR = false;
} else {
WPY2OR = true;
}
}
}

protected final void initWPY2OU(String s) {
if (!s.trim().isEmpty()) {
WPY2OU = Short.parseShort(s);
} else {
WPY2OU = Short.MIN_VALUE;
}
}

protected final void initWPY2WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY2WE = false;
} else {
WPY2WE = true;
}
}
}

protected final void initWPY2WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY2WL = false;
} else {
WPY2WL = true;
}
}
}

protected final void initWPY2WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY2WR = false;
} else {
WPY2WR = true;
}
}
}

protected final void initWPY2WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY2WU = false;
} else {
WPY2WU = true;
}
}
}

protected final void initWPY2YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY2YE = false;
} else {
WPY2YE = true;
}
}
}

protected final void initWPY2YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY2YL = false;
} else {
WPY2YL = true;
}
}
}

protected final void initWPY2YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY2YR = false;
} else {
WPY2YR = true;
}
}
}

protected final void initWPY2YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY2YU = false;
} else {
WPY2YU = true;
}
}
}

protected final void initWPY3FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3FE = false;
} else {
WPY3FE = true;
}
}
}

protected final void initWPY3FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3FL = false;
} else {
WPY3FL = true;
}
}
}

protected final void initWPY3FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3FR = false;
} else {
WPY3FR = true;
}
}
}

protected final void initWPY3FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3FU = false;
} else {
WPY3FU = true;
}
}
}

protected final void initWPY3ME(String s) {
if (!s.trim().isEmpty()) {
WPY3ME = Byte.parseByte(s);
} else {
WPY3ME = Byte.MIN_VALUE;
}
}

protected final void initWPY3ML(String s) {
if (!s.trim().isEmpty()) {
WPY3ML = Short.parseShort(s);
} else {
WPY3ML = Short.MIN_VALUE;
}
}

protected final void initWPY3MR(String s) {
if (!s.trim().isEmpty()) {
WPY3MR = Byte.parseByte(s);
} else {
WPY3MR = Byte.MIN_VALUE;
}
}

protected final void initWPY3MU(String s) {
if (!s.trim().isEmpty()) {
WPY3MU = Short.parseShort(s);
} else {
WPY3MU = Short.MIN_VALUE;
}
}

protected final void initWPY3OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3OE = false;
} else {
WPY3OE = true;
}
}
}

protected final void initWPY3OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3OL = false;
} else {
WPY3OL = true;
}
}
}

protected final void initWPY3OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3OR = false;
} else {
WPY3OR = true;
}
}
}

protected final void initWPY3OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3OU = false;
} else {
WPY3OU = true;
}
}
}

protected final void initWPY3WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3WE = false;
} else {
WPY3WE = true;
}
}
}

protected final void initWPY3WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3WL = false;
} else {
WPY3WL = true;
}
}
}

protected final void initWPY3WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3WR = false;
} else {
WPY3WR = true;
}
}
}

protected final void initWPY3WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3WU = false;
} else {
WPY3WU = true;
}
}
}

protected final void initWPY3YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3YE = false;
} else {
WPY3YE = true;
}
}
}

protected final void initWPY3YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3YL = false;
} else {
WPY3YL = true;
}
}
}

protected final void initWPY3YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3YR = false;
} else {
WPY3YR = true;
}
}
}

protected final void initWPY3YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY3YU = false;
} else {
WPY3YU = true;
}
}
}

protected final void initWPY4FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY4FE = false;
} else {
WPY4FE = true;
}
}
}

protected final void initWPY4FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY4FL = false;
} else {
WPY4FL = true;
}
}
}

protected final void initWPY4FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY4FR = false;
} else {
WPY4FR = true;
}
}
}

protected final void initWPY4FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY4FU = false;
} else {
WPY4FU = true;
}
}
}

protected final void initWPY4ME(String s) {
if (!s.trim().isEmpty()) {
WPY4ME = Byte.parseByte(s);
} else {
WPY4ME = Byte.MIN_VALUE;
}
}

protected final void initWPY4ML(String s) {
if (!s.trim().isEmpty()) {
WPY4ML = Short.parseShort(s);
} else {
WPY4ML = Short.MIN_VALUE;
}
}

protected final void initWPY4MR(String s) {
if (!s.trim().isEmpty()) {
WPY4MR = Byte.parseByte(s);
} else {
WPY4MR = Byte.MIN_VALUE;
}
}

protected final void initWPY4MU(String s) {
if (!s.trim().isEmpty()) {
WPY4MU = Short.parseShort(s);
} else {
WPY4MU = Short.MIN_VALUE;
}
}

protected final void initWPY4OE(String s) {
if (!s.trim().isEmpty()) {
WPY4OE = Byte.parseByte(s);
} else {
WPY4OE = Byte.MIN_VALUE;
}
}

protected final void initWPY4OL(String s) {
if (!s.trim().isEmpty()) {
WPY4OL = Short.parseShort(s);
} else {
WPY4OL = Short.MIN_VALUE;
}
}

protected final void initWPY4OR(String s) {
if (!s.trim().isEmpty()) {
WPY4OR = Byte.parseByte(s);
} else {
WPY4OR = Byte.MIN_VALUE;
}
}

protected final void initWPY4OU(String s) {
if (!s.trim().isEmpty()) {
WPY4OU = Short.parseShort(s);
} else {
WPY4OU = Short.MIN_VALUE;
}
}

protected final void initWPY4WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY4WE = false;
} else {
WPY4WE = true;
}
}
}

protected final void initWPY4WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY4WL = false;
} else {
WPY4WL = true;
}
}
}

protected final void initWPY4WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY4WR = false;
} else {
WPY4WR = true;
}
}
}

protected final void initWPY4WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY4WU = false;
} else {
WPY4WU = true;
}
}
}

protected final void initWPY4YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY4YE = false;
} else {
WPY4YE = true;
}
}
}

protected final void initWPY4YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY4YL = false;
} else {
WPY4YL = true;
}
}
}

protected final void initWPY4YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY4YR = false;
} else {
WPY4YR = true;
}
}
}

protected final void initWPY4YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY4YU = false;
} else {
WPY4YU = true;
}
}
}

protected final void initWPY5FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY5FE = false;
} else {
WPY5FE = true;
}
}
}

protected final void initWPY5FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY5FL = false;
} else {
WPY5FL = true;
}
}
}

protected final void initWPY5FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY5FR = false;
} else {
WPY5FR = true;
}
}
}

protected final void initWPY5FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY5FU = false;
} else {
WPY5FU = true;
}
}
}

protected final void initWPY5ME(String s) {
if (!s.trim().isEmpty()) {
WPY5ME = Byte.parseByte(s);
} else {
WPY5ME = Byte.MIN_VALUE;
}
}

protected final void initWPY5ML(String s) {
if (!s.trim().isEmpty()) {
WPY5ML = Byte.parseByte(s);
} else {
WPY5ML = Byte.MIN_VALUE;
}
}

protected final void initWPY5MR(String s) {
if (!s.trim().isEmpty()) {
WPY5MR = Byte.parseByte(s);
} else {
WPY5MR = Byte.MIN_VALUE;
}
}

protected final void initWPY5MU(String s) {
if (!s.trim().isEmpty()) {
WPY5MU = Byte.parseByte(s);
} else {
WPY5MU = Byte.MIN_VALUE;
}
}

protected final void initWPY5OE(String s) {
if (!s.trim().isEmpty()) {
WPY5OE = Byte.parseByte(s);
} else {
WPY5OE = Byte.MIN_VALUE;
}
}

protected final void initWPY5OL(String s) {
if (!s.trim().isEmpty()) {
WPY5OL = Byte.parseByte(s);
} else {
WPY5OL = Byte.MIN_VALUE;
}
}

protected final void initWPY5OR(String s) {
if (!s.trim().isEmpty()) {
WPY5OR = Byte.parseByte(s);
} else {
WPY5OR = Byte.MIN_VALUE;
}
}

protected final void initWPY5OU(String s) {
if (!s.trim().isEmpty()) {
WPY5OU = Byte.parseByte(s);
} else {
WPY5OU = Byte.MIN_VALUE;
}
}

protected final void initWPY5WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY5WE = false;
} else {
WPY5WE = true;
}
}
}

protected final void initWPY5WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY5WL = false;
} else {
WPY5WL = true;
}
}
}

protected final void initWPY5WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY5WR = false;
} else {
WPY5WR = true;
}
}
}

protected final void initWPY5WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY5WU = false;
} else {
WPY5WU = true;
}
}
}

protected final void initWPY5YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY5YE = false;
} else {
WPY5YE = true;
}
}
}

protected final void initWPY5YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPY5YL = false;
} else {
WPY5YL = true;
}
}
}

protected final void initWPY5YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY5YR = false;
} else {
WPY5YR = true;
}
}
}

protected final void initWPY5YU(String s) {
if (!s.trim().isEmpty()) {
WPY5YU = Short.parseShort(s);
} else {
WPY5YU = Short.MIN_VALUE;
}
}

protected final void initWPY6FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY6FE = false;
} else {
WPY6FE = true;
}
}
}

protected final void initWPY6FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY6FL = false;
} else {
WPY6FL = true;
}
}
}

protected final void initWPY6FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY6FR = false;
} else {
WPY6FR = true;
}
}
}

protected final void initWPY6FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY6FU = false;
} else {
WPY6FU = true;
}
}
}

protected final void initWPY6ME(String s) {
if (!s.trim().isEmpty()) {
WPY6ME = Byte.parseByte(s);
} else {
WPY6ME = Byte.MIN_VALUE;
}
}

protected final void initWPY6ML(String s) {
if (!s.trim().isEmpty()) {
WPY6ML = Byte.parseByte(s);
} else {
WPY6ML = Byte.MIN_VALUE;
}
}

protected final void initWPY6MR(String s) {
if (!s.trim().isEmpty()) {
WPY6MR = Byte.parseByte(s);
} else {
WPY6MR = Byte.MIN_VALUE;
}
}

protected final void initWPY6MU(String s) {
if (!s.trim().isEmpty()) {
WPY6MU = Byte.parseByte(s);
} else {
WPY6MU = Byte.MIN_VALUE;
}
}

protected final void initWPY6OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY6OE = false;
} else {
WPY6OE = true;
}
}
}

protected final void initWPY6OL(String s) {
if (!s.trim().isEmpty()) {
WPY6OL = Short.parseShort(s);
} else {
WPY6OL = Short.MIN_VALUE;
}
}

protected final void initWPY6OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY6OR = false;
} else {
WPY6OR = true;
}
}
}

protected final void initWPY6OU(String s) {
if (!s.trim().isEmpty()) {
WPY6OU = Short.parseShort(s);
} else {
WPY6OU = Short.MIN_VALUE;
}
}

protected final void initWPY6WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY6WE = false;
} else {
WPY6WE = true;
}
}
}

protected final void initWPY6WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY6WL = false;
} else {
WPY6WL = true;
}
}
}

protected final void initWPY6WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY6WR = false;
} else {
WPY6WR = true;
}
}
}

protected final void initWPY6WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY6WU = false;
} else {
WPY6WU = true;
}
}
}

protected final void initWPY6YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY6YE = false;
} else {
WPY6YE = true;
}
}
}

protected final void initWPY6YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY6YL = false;
} else {
WPY6YL = true;
}
}
}

protected final void initWPY6YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY6YR = false;
} else {
WPY6YR = true;
}
}
}

protected final void initWPY6YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY6YU = false;
} else {
WPY6YU = true;
}
}
}

protected final void initWPY7FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7FE = false;
} else {
WPY7FE = true;
}
}
}

protected final void initWPY7FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7FL = false;
} else {
WPY7FL = true;
}
}
}

protected final void initWPY7FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7FR = false;
} else {
WPY7FR = true;
}
}
}

protected final void initWPY7FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7FU = false;
} else {
WPY7FU = true;
}
}
}

protected final void initWPY7ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7ME = false;
} else {
WPY7ME = true;
}
}
}

protected final void initWPY7ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7ML = false;
} else {
WPY7ML = true;
}
}
}

protected final void initWPY7MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7MR = false;
} else {
WPY7MR = true;
}
}
}

protected final void initWPY7MU(String s) {
if (!s.trim().isEmpty()) {
WPY7MU = Short.parseShort(s);
} else {
WPY7MU = Short.MIN_VALUE;
}
}

protected final void initWPY7OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7OE = false;
} else {
WPY7OE = true;
}
}
}

protected final void initWPY7OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPY7OL = false;
} else {
WPY7OL = true;
}
}
}

protected final void initWPY7OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7OR = false;
} else {
WPY7OR = true;
}
}
}

protected final void initWPY7OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPY7OU = false;
} else {
WPY7OU = true;
}
}
}

protected final void initWPY7WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7WE = false;
} else {
WPY7WE = true;
}
}
}

protected final void initWPY7WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7WL = false;
} else {
WPY7WL = true;
}
}
}

protected final void initWPY7WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7WR = false;
} else {
WPY7WR = true;
}
}
}

protected final void initWPY7WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7WU = false;
} else {
WPY7WU = true;
}
}
}

protected final void initWPY7YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7YE = false;
} else {
WPY7YE = true;
}
}
}

protected final void initWPY7YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7YL = false;
} else {
WPY7YL = true;
}
}
}

protected final void initWPY7YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7YR = false;
} else {
WPY7YR = true;
}
}
}

protected final void initWPY7YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY7YU = false;
} else {
WPY7YU = true;
}
}
}

protected final void initWPY8FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8FE = false;
} else {
WPY8FE = true;
}
}
}

protected final void initWPY8FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8FL = false;
} else {
WPY8FL = true;
}
}
}

protected final void initWPY8FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8FR = false;
} else {
WPY8FR = true;
}
}
}

protected final void initWPY8FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8FU = false;
} else {
WPY8FU = true;
}
}
}

protected final void initWPY8ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8ME = false;
} else {
WPY8ME = true;
}
}
}

protected final void initWPY8ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPY8ML = false;
} else {
WPY8ML = true;
}
}
}

protected final void initWPY8MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8MR = false;
} else {
WPY8MR = true;
}
}
}

protected final void initWPY8MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8MU = false;
} else {
WPY8MU = true;
}
}
}

protected final void initWPY8OE(String s) {
if (!s.trim().isEmpty()) {
WPY8OE = Byte.parseByte(s);
} else {
WPY8OE = Byte.MIN_VALUE;
}
}

protected final void initWPY8OL(String s) {
if (!s.trim().isEmpty()) {
WPY8OL = Byte.parseByte(s);
} else {
WPY8OL = Byte.MIN_VALUE;
}
}

protected final void initWPY8OR(String s) {
if (!s.trim().isEmpty()) {
WPY8OR = Byte.parseByte(s);
} else {
WPY8OR = Byte.MIN_VALUE;
}
}

protected final void initWPY8OU(String s) {
if (!s.trim().isEmpty()) {
WPY8OU = Byte.parseByte(s);
} else {
WPY8OU = Byte.MIN_VALUE;
}
}

protected final void initWPY8WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8WE = false;
} else {
WPY8WE = true;
}
}
}

protected final void initWPY8WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8WL = false;
} else {
WPY8WL = true;
}
}
}

protected final void initWPY8WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8WR = false;
} else {
WPY8WR = true;
}
}
}

protected final void initWPY8WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8WU = false;
} else {
WPY8WU = true;
}
}
}

protected final void initWPY8YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8YE = false;
} else {
WPY8YE = true;
}
}
}

protected final void initWPY8YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8YL = false;
} else {
WPY8YL = true;
}
}
}

protected final void initWPY8YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8YR = false;
} else {
WPY8YR = true;
}
}
}

protected final void initWPY8YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPY8YU = false;
} else {
WPY8YU = true;
}
}
}

protected final void initWPYAER2(String s) {
if (!s.trim().isEmpty()) {
WPYAER2 = Byte.parseByte(s);
} else {
WPYAER2 = Byte.MIN_VALUE;
}
}

protected final void initWPYAER3(String s) {
if (!s.trim().isEmpty()) {
WPYAER3 = Byte.parseByte(s);
} else {
WPYAER3 = Byte.MIN_VALUE;
}
}

protected final void initWPYAER4(String s) {
if (!s.trim().isEmpty()) {
WPYAER4 = Byte.parseByte(s);
} else {
WPYAER4 = Byte.MIN_VALUE;
}
}

protected final void initWPYAER5(String s) {
if (!s.trim().isEmpty()) {
WPYAER5 = Byte.parseByte(s);
} else {
WPYAER5 = Byte.MIN_VALUE;
}
}

protected final void initWPYAER6(String s) {
if (!s.trim().isEmpty()) {
WPYAER6 = Byte.parseByte(s);
} else {
WPYAER6 = Byte.MIN_VALUE;
}
}

protected final void initWPYBS2(String s) {
if (!s.trim().isEmpty()) {
WPYBS2 = Byte.parseByte(s);
} else {
WPYBS2 = Byte.MIN_VALUE;
}
}

protected final void initWPYBS3(String s) {
if (!s.trim().isEmpty()) {
WPYBS3 = Byte.parseByte(s);
} else {
WPYBS3 = Byte.MIN_VALUE;
}
}

protected final void initWPYBS4(String s) {
if (!s.trim().isEmpty()) {
WPYBS4 = Byte.parseByte(s);
} else {
WPYBS4 = Byte.MIN_VALUE;
}
}

protected final void initWPYBS5(String s) {
if (!s.trim().isEmpty()) {
WPYBS5 = Byte.parseByte(s);
} else {
WPYBS5 = Byte.MIN_VALUE;
}
}

protected final void initWPYBS6(String s) {
if (!s.trim().isEmpty()) {
WPYBS6 = Byte.parseByte(s);
} else {
WPYBS6 = Byte.MIN_VALUE;
}
}

protected final void initWPYCA2(String s) {
if (!s.trim().isEmpty()) {
WPYCA2 = Integer.parseInt(s);
} else {
WPYCA2 = Integer.MIN_VALUE;
}
}

protected final void initWPYCA3(String s) {
if (!s.trim().isEmpty()) {
WPYCA3 = Short.parseShort(s);
} else {
WPYCA3 = Short.MIN_VALUE;
}
}

protected final void initWPYCA4(String s) {
if (!s.trim().isEmpty()) {
WPYCA4 = Short.parseShort(s);
} else {
WPYCA4 = Short.MIN_VALUE;
}
}

protected final void initWPYCA5(String s) {
if (!s.trim().isEmpty()) {
WPYCA5 = Short.parseShort(s);
} else {
WPYCA5 = Short.MIN_VALUE;
}
}

protected final void initWPYCA6(String s) {
if (!s.trim().isEmpty()) {
WPYCA6 = Short.parseShort(s);
} else {
WPYCA6 = Short.MIN_VALUE;
}
}

protected final void initWPYCAT2(String s) {
if (!s.trim().isEmpty()) {
WPYCAT2 = Byte.parseByte(s);
} else {
WPYCAT2 = Byte.MIN_VALUE;
}
}

protected final void initWPYCAT3(String s) {
if (!s.trim().isEmpty()) {
WPYCAT3 = Byte.parseByte(s);
} else {
WPYCAT3 = Byte.MIN_VALUE;
}
}

protected final void initWPYCAT4(String s) {
if (!s.trim().isEmpty()) {
WPYCAT4 = Byte.parseByte(s);
} else {
WPYCAT4 = Byte.MIN_VALUE;
}
}

protected final void initWPYCAT5(String s) {
if (!s.trim().isEmpty()) {
WPYCAT5 = Byte.parseByte(s);
} else {
WPYCAT5 = Byte.MIN_VALUE;
}
}

protected final void initWPYCAT6(String s) {
if (!s.trim().isEmpty()) {
WPYCAT6 = Byte.parseByte(s);
} else {
WPYCAT6 = Byte.MIN_VALUE;
}
}

protected final void initWPYFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPYFE = false;
} else {
WPYFE = true;
}
}
}

protected final void initWPYFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPYFL = false;
} else {
WPYFL = true;
}
}
}

protected final void initWPYFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPYFR = false;
} else {
WPYFR = true;
}
}
}

protected final void initWPYFRA(String s) {
if (!s.trim().isEmpty()) {
WPYFRA = Byte.parseByte(s);
} else {
WPYFRA = Byte.MIN_VALUE;
}
}

protected final void initWPYFRA2(String s) {
if (!s.trim().isEmpty()) {
WPYFRA2 = Byte.parseByte(s);
} else {
WPYFRA2 = Byte.MIN_VALUE;
}
}

protected final void initWPYFRA3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPYFRA3 = false;
} else {
WPYFRA3 = true;
}
}
}

protected final void initWPYFRA4(String s) {
if (!s.trim().isEmpty()) {
WPYFRA4 = Byte.parseByte(s);
} else {
WPYFRA4 = Byte.MIN_VALUE;
}
}

protected final void initWPYFRA5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPYFRA5 = false;
} else {
WPYFRA5 = true;
}
}
}

protected final void initWPYFRA6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPYFRA6 = false;
} else {
WPYFRA6 = true;
}
}
}

protected final void initWPYFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPYFU = false;
} else {
WPYFU = true;
}
}
}

protected final void initWPYME(String s) {
if (!s.trim().isEmpty()) {
WPYME = Byte.parseByte(s);
} else {
WPYME = Byte.MIN_VALUE;
}
}

protected final void initWPYML(String s) {
if (!s.trim().isEmpty()) {
WPYML = Short.parseShort(s);
} else {
WPYML = Short.MIN_VALUE;
}
}

protected final void initWPYMR(String s) {
if (!s.trim().isEmpty()) {
WPYMR = Byte.parseByte(s);
} else {
WPYMR = Byte.MIN_VALUE;
}
}

protected final void initWPYMU(String s) {
if (!s.trim().isEmpty()) {
WPYMU = Short.parseShort(s);
} else {
WPYMU = Short.MIN_VALUE;
}
}

protected final void initWPYOE(String s) {
if (!s.trim().isEmpty()) {
WPYOE = Byte.parseByte(s);
} else {
WPYOE = Byte.MIN_VALUE;
}
}

protected final void initWPYOL(String s) {
if (!s.trim().isEmpty()) {
WPYOL = Short.parseShort(s);
} else {
WPYOL = Short.MIN_VALUE;
}
}

protected final void initWPYOR(String s) {
if (!s.trim().isEmpty()) {
WPYOR = Byte.parseByte(s);
} else {
WPYOR = Byte.MIN_VALUE;
}
}

protected final void initWPYOU(String s) {
if (!s.trim().isEmpty()) {
WPYOU = Short.parseShort(s);
} else {
WPYOU = Short.MIN_VALUE;
}
}

protected final void initWPYPEN(String s) {
if (!s.trim().isEmpty()) {
WPYPEN = Byte.parseByte(s);
} else {
WPYPEN = Byte.MIN_VALUE;
}
}

protected final void initWPYPEN2(String s) {
if (!s.trim().isEmpty()) {
WPYPEN2 = Byte.parseByte(s);
} else {
WPYPEN2 = Byte.MIN_VALUE;
}
}

protected final void initWPYPEN3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPYPEN3 = false;
} else {
WPYPEN3 = true;
}
}
}

protected final void initWPYPEN4(String s) {
if (!s.trim().isEmpty()) {
WPYPEN4 = Byte.parseByte(s);
} else {
WPYPEN4 = Byte.MIN_VALUE;
}
}

protected final void initWPYPEN5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPYPEN5 = false;
} else {
WPYPEN5 = true;
}
}
}

protected final void initWPYSTM1(String s) {
if (!s.trim().isEmpty()) {
WPYSTM1 = Byte.parseByte(s);
} else {
WPYSTM1 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTM2(String s) {
if (!s.trim().isEmpty()) {
WPYSTM2 = Byte.parseByte(s);
} else {
WPYSTM2 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTM3(String s) {
if (!s.trim().isEmpty()) {
WPYSTM3 = Byte.parseByte(s);
} else {
WPYSTM3 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTM4(String s) {
if (!s.trim().isEmpty()) {
WPYSTM4 = Byte.parseByte(s);
} else {
WPYSTM4 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTM5(String s) {
if (!s.trim().isEmpty()) {
WPYSTM5 = Byte.parseByte(s);
} else {
WPYSTM5 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTP1(String s) {
if (!s.trim().isEmpty()) {
WPYSTP1 = Byte.parseByte(s);
} else {
WPYSTP1 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTP2(String s) {
if (!s.trim().isEmpty()) {
WPYSTP2 = Byte.parseByte(s);
} else {
WPYSTP2 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTP3(String s) {
if (!s.trim().isEmpty()) {
WPYSTP3 = Byte.parseByte(s);
} else {
WPYSTP3 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTP4(String s) {
if (!s.trim().isEmpty()) {
WPYSTP4 = Byte.parseByte(s);
} else {
WPYSTP4 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTP5(String s) {
if (!s.trim().isEmpty()) {
WPYSTP5 = Byte.parseByte(s);
} else {
WPYSTP5 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTPM(String s) {
if (!s.trim().isEmpty()) {
WPYSTPM = Byte.parseByte(s);
} else {
WPYSTPM = Byte.MIN_VALUE;
}
}

protected final void initWPYWE(String s) {
if (!s.trim().isEmpty()) {
WPYWE = Byte.parseByte(s);
} else {
WPYWE = Byte.MIN_VALUE;
}
}

protected final void initWPYWL(String s) {
if (!s.trim().isEmpty()) {
WPYWL = Short.parseShort(s);
} else {
WPYWL = Short.MIN_VALUE;
}
}

protected final void initWPYWR(String s) {
if (!s.trim().isEmpty()) {
WPYWR = Byte.parseByte(s);
} else {
WPYWR = Byte.MIN_VALUE;
}
}

protected final void initWPYWU(String s) {
if (!s.trim().isEmpty()) {
WPYWU = Short.parseShort(s);
} else {
WPYWU = Short.MIN_VALUE;
}
}

protected final void initWPYYE(String s) {
if (!s.trim().isEmpty()) {
WPYYE = Byte.parseByte(s);
} else {
WPYYE = Byte.MIN_VALUE;
}
}

protected final void initWPYYL(String s) {
if (!s.trim().isEmpty()) {
WPYYL = Short.parseShort(s);
} else {
WPYYL = Short.MIN_VALUE;
}
}

protected final void initWPYYR(String s) {
if (!s.trim().isEmpty()) {
WPYYR = Byte.parseByte(s);
} else {
WPYYR = Byte.MIN_VALUE;
}
}

protected final void initWPYYU(String s) {
if (!s.trim().isEmpty()) {
WPYYU = Short.parseShort(s);
} else {
WPYYU = Short.MIN_VALUE;
}
}

protected final void initWSTOKB(String s) {
if (!s.trim().isEmpty()) {
WSTOKB = Byte.parseByte(s);
} else {
WSTOKB = Byte.MIN_VALUE;
}
}

protected final void initWSTVAL(String s) {
if (!s.trim().isEmpty()) {
WSTVAL = Double.parseDouble(s);
} else {
WSTVAL = Double.NaN;
}
}

protected final void initWTC_P_F(String s) {
if (!s.trim().isEmpty()) {
WTC_P_F = Byte.parseByte(s);
} else {
WTC_P_F = Byte.MIN_VALUE;
}
}

protected final void initWTC_P_I(String s) {
if (!s.trim().isEmpty()) {
WTC_P_I = Double.parseDouble(s);
} else {
WTC_P_I = Double.NaN;
}
}

protected final void initWTC_P_O(String s) {
if (!s.trim().isEmpty()) {
WTC_P_O = Short.parseShort(s);
} else {
WTC_P_O = Short.MIN_VALUE;
}
}

protected final void initWTC_P_T(String s) {
if (!s.trim().isEmpty()) {
WTC_P_T = Short.parseShort(s);
} else {
WTC_P_T = Short.MIN_VALUE;
}
}

protected final void initWTC_R_F(String s) {
if (!s.trim().isEmpty()) {
WTC_R_F = Byte.parseByte(s);
} else {
WTC_R_F = Byte.MIN_VALUE;
}
}

protected final void initWTC_R_I(String s) {
if (!s.trim().isEmpty()) {
WTC_R_I = Double.parseDouble(s);
} else {
WTC_R_I = Double.NaN;
}
}

protected final void initWTC_R_O(String s) {
if (!s.trim().isEmpty()) {
WTC_R_O = Short.parseShort(s);
} else {
WTC_R_O = Short.MIN_VALUE;
}
}

protected final void initWTC_R_T(String s) {
if (!s.trim().isEmpty()) {
WTC_R_T = Short.parseShort(s);
} else {
WTC_R_T = Short.MIN_VALUE;
}
}

protected final void initWTOK(String s) {
if (!s.trim().isEmpty()) {
WTOK = Byte.parseByte(s);
} else {
WTOK = Byte.MIN_VALUE;
}
}

protected final void initWTVAL(String s) {
if (!s.trim().isEmpty()) {
WTVAL = Double.parseDouble(s);
} else {
WTVAL = Double.NaN;
}
}

protected final void initYNOBP(String s) {
if (!s.trim().isEmpty()) {
YNOBP = Byte.parseByte(s);
} else {
YNOBP = Byte.MIN_VALUE;
}
}

protected final void initYNOLF(String s) {
if (!s.trim().isEmpty()) {
YNOLF = Byte.parseByte(s);
} else {
YNOLF = Byte.MIN_VALUE;
}
}

protected final void initYNOWH(String s) {
if (!s.trim().isEmpty()) {
YNOWH = Byte.parseByte(s);
} else {
YNOWH = Byte.MIN_VALUE;
}
}

public double getADDPEN_04() {
return ADDPEN_04;
}

public double getADDPEN_SPA() {
return ADDPEN_SPA;
}

public double getAIRTEMP() {
return AIRTEMP;
}

public double getAPOE() {
return APOE;
}

public byte getASKCEM2() {
return ASKCEM2;
}

public byte getASKCEM3() {
return ASKCEM3;
}

public byte getASKCEM4() {
return ASKCEM4;
}

public byte getASKCEM5() {
return ASKCEM5;
}

public byte getASKDCB() {
return ASKDCB;
}

public byte getASKDCB2() {
return ASKDCB2;
}

public byte getASKDCB3() {
return ASKDCB3;
}

public byte getASKDCB4() {
return ASKDCB4;
}

public byte getASKDCB5() {
return ASKDCB5;
}

public byte getASKDCB6() {
return ASKDCB6;
}

public boolean getASKINF2() {
return ASKINF2;
}

public boolean getASKINFO() {
return ASKINFO;
}

public byte getASKPST() {
return ASKPST;
}

public byte getASKPST2() {
return ASKPST2;
}

public byte getASKPST3() {
return ASKPST3;
}

public boolean getASKPX1() {
return ASKPX1;
}

public byte getASKQS() {
return ASKQS;
}

public byte getASKQS2() {
return ASKQS2;
}

public byte getASKQS3() {
return ASKQS3;
}

public boolean getASKQS4() {
return ASKQS4;
}

public boolean getASKQS5() {
return ASKQS5;
}

public boolean getASKQS6() {
return ASKQS6;
}

public byte getASKRUL() {
return ASKRUL;
}

public byte getASKRUL2() {
return ASKRUL2;
}

public byte getASKRUL3() {
return ASKRUL3;
}

public boolean getASKRUL4() {
return ASKRUL4;
}

public boolean getASKRUL5() {
return ASKRUL5;
}

public boolean getASKRUL6() {
return ASKRUL6;
}

public byte getASKSNC() {
return ASKSNC;
}

public byte getASKSNC2() {
return ASKSNC2;
}

public byte getASKSNC3() {
return ASKSNC3;
}

public short getASTRATIF() {
return ASTRATIF;
}

public byte getBEHDIA01() {
return BEHDIA01;
}

public byte getBEHDIA02() {
return BEHDIA02;
}

public byte getBEHDIA03() {
return BEHDIA03;
}

public byte getBEHDIA04() {
return BEHDIA04;
}

public byte getBEHDIA05() {
return BEHDIA05;
}

public byte getBEHDIA06() {
return BEHDIA06;
}

public byte getBEHDIA07() {
return BEHDIA07;
}

public byte getBHEAGA() {
return BHEAGA;
}

public byte getBHEAGB() {
return BHEAGB;
}

public byte getBHEAGC() {
return BHEAGC;
}

public byte getBHEAGD() {
return BHEAGD;
}

public byte getBHEAGE() {
return BHEAGE;
}

public byte getBHEAGF() {
return BHEAGF;
}

public byte getBHEAGG() {
return BHEAGG;
}

public byte getBHEAGH() {
return BHEAGH;
}

public byte getBHEAGI() {
return BHEAGI;
}

public byte getBHEAGJ() {
return BHEAGJ;
}

public byte getBHEAID1() {
return BHEAID1;
}

public byte getBHEAID2() {
return BHEAID2;
}

public byte getBHEAID3() {
return BHEAID3;
}

public byte getBHEAID4() {
return BHEAID4;
}

public byte getBHEAID5() {
return BHEAID5;
}

public byte getBHEART1() {
return BHEART1;
}

public byte getBHEART2() {
return BHEART2;
}

public byte getBHEART3() {
return BHEART3;
}

public byte getBHECANA() {
return BHECANA;
}

public byte getBHEOPT1() {
return BHEOPT1;
}

public byte getBHEOPT2() {
return BHEOPT2;
}

public byte getBHEOPT3() {
return BHEOPT3;
}

public byte getBHEOPT4() {
return BHEOPT4;
}

public byte getBHEPRK() {
return BHEPRK;
}

public byte getBHESKA() {
return BHESKA;
}

public byte getBHESMK() {
return BHESMK;
}

public byte getBLOODR() {
return BLOODR;
}

public double getBMI() {
return BMI;
}

public byte getBMIOBE() {
return BMIOBE;
}

public byte getBMIOK() {
return BMIOK;
}

public double getBMIVAL() {
return BMIVAL;
}

public byte getBPCONST() {
return BPCONST;
}

public byte getBPRESPC() {
return BPRESPC;
}

public byte getBSOUTC() {
return BSOUTC;
}

public double getBSP_04() {
return BSP_04;
}

public double getBSP_SPA() {
return BSP_SPA;
}

public byte getBSWILL() {
return BSWILL;
}

public byte getCARERS_P_F() {
return CARERS_P_F;
}

public double getCARERS_P_I() {
return CARERS_P_I;
}

public short getCARERS_P_O() {
return CARERS_P_O;
}

public short getCARERS_P_T() {
return CARERS_P_T;
}

public byte getCARERS_R_F() {
return CARERS_R_F;
}

public double getCARERS_R_I() {
return CARERS_R_I;
}

public short getCARERS_R_O() {
return CARERS_R_O;
}

public short getCARERS_R_T() {
return CARERS_R_T;
}

public byte getCFANI() {
return CFANI;
}

public double getCFIB() {
return CFIB;
}

public byte getCFLITB() {
return CFLITB;
}

public byte getCFLITC() {
return CFLITC;
}

public byte getCFLITD() {
return CFLITD;
}

public byte getCFLITE() {
return CFLITE;
}

public byte getCFLITOC() {
return CFLITOC;
}

public byte getCFLITSK() {
return CFLITSK;
}

public byte getCFMEM() {
return CFMEM;
}

public byte getCFMEMS() {
return CFMEMS;
}

public byte getCFMETM() {
return CFMETM;
}

public byte getCFMETMT() {
return CFMETMT;
}

public byte getCFPASCR() {
return CFPASCR;
}

public byte getCFWHO1() {
return CFWHO1;
}

public byte getCFWHO2() {
return CFWHO2;
}

public byte getCFWHO3() {
return CFWHO3;
}

public boolean getCFWHO4() {
return CFWHO4;
}

public byte getCFWHZ1() {
return CFWHZ1;
}

public byte getCFWHZ2() {
return CFWHZ2;
}

public byte getCFWHZ3() {
return CFWHZ3;
}

public byte getCHESTIN() {
return CHESTIN;
}

public boolean getCHINHH1() {
return CHINHH1;
}

public double getCHOL() {
return CHOL;
}

public byte getCLOTB() {
return CLOTB;
}

public boolean getCONCUR() {
return CONCUR;
}

public byte getCONFAGE() {
return CONFAGE;
}

public byte getCONSUB1() {
return CONSUB1;
}

public byte getCONSUB2() {
return CONSUB2;
}

public byte getCONSUB3() {
return CONSUB3;
}

public byte getCTC_P_F() {
return CTC_P_F;
}

public double getCTC_P_I() {
return CTC_P_I;
}

public short getCTC_P_O() {
return CTC_P_O;
}

public short getCTC_P_T() {
return CTC_P_T;
}

public byte getCTC_R_F() {
return CTC_R_F;
}

public double getCTC_R_I() {
return CTC_R_I;
}

public short getCTC_R_O() {
return CTC_R_O;
}

public short getCTC_R_T() {
return CTC_R_T;
}

public byte getCUFSIZE() {
return CUFSIZE;
}

public double getCURRENTDB_04() {
return CURRENTDB_04;
}

public double getCURRENTDB_SPA() {
return CURRENTDB_SPA;
}

public double getCURRENTDC_04() {
return CURRENTDC_04;
}

public double getCURRENTDC_SPA() {
return CURRENTDC_SPA;
}

public byte getDCURPEN() {
return DCURPEN;
}

public byte getDDBDC() {
return DDBDC;
}

public byte getDEMPPEN() {
return DEMPPEN;
}

public byte getDHAGER() {
return DHAGER;
}

public byte getDHANYPX() {
return DHANYPX;
}

public byte getDHC14() {
return DHC14;
}

public byte getDHCAG14() {
return DHCAG14;
}

public short getDHCBY02() {
return DHCBY02;
}

public short getDHCBY03() {
return DHCBY03;
}

public short getDHCBY04() {
return DHCBY04;
}

public short getDHCBY05() {
return DHCBY05;
}

public short getDHCBY06() {
return DHCBY06;
}

public short getDHCBY07() {
return DHCBY07;
}

public short getDHCBY08() {
return DHCBY08;
}

public short getDHCBY09() {
return DHCBY09;
}

public short getDHCBY10() {
return DHCBY10;
}

public short getDHCBY11() {
return DHCBY11;
}

public short getDHCBY12() {
return DHCBY12;
}

public short getDHCBY13() {
return DHCBY13;
}

public short getDHCBY14() {
return DHCBY14;
}

public short getDHCDY() {
return DHCDY;
}

public byte getDHCR08() {
return DHCR08;
}

public byte getDHCR09() {
return DHCR09;
}

public byte getDHCR10() {
return DHCR10;
}

public boolean getDHCR104() {
return DHCR104;
}

public boolean getDHCR105() {
return DHCR105;
}

public boolean getDHCR106() {
return DHCR106;
}

public boolean getDHCR107() {
return DHCR107;
}

public boolean getDHCR108() {
return DHCR108;
}

public byte getDHCR11() {
return DHCR11;
}

public byte getDHCR118() {
return DHCR118;
}

public boolean getDHCR119() {
return DHCR119;
}

public boolean getDHCR12() {
return DHCR12;
}

public boolean getDHCR120() {
return DHCR120;
}

public boolean getDHCR121() {
return DHCR121;
}

public boolean getDHCR122() {
return DHCR122;
}

public boolean getDHCR123() {
return DHCR123;
}

public boolean getDHCR124() {
return DHCR124;
}

public byte getDHCR134() {
return DHCR134;
}

public boolean getDHCR135() {
return DHCR135;
}

public boolean getDHCR136() {
return DHCR136;
}

public boolean getDHCR137() {
return DHCR137;
}

public boolean getDHCR138() {
return DHCR138;
}

public boolean getDHCR139() {
return DHCR139;
}

public boolean getDHCR140() {
return DHCR140;
}

public byte getDHCR147() {
return DHCR147;
}

public boolean getDHCR148() {
return DHCR148;
}

public boolean getDHCR149() {
return DHCR149;
}

public byte getDHCR150() {
return DHCR150;
}

public boolean getDHCR151() {
return DHCR151;
}

public boolean getDHCR152() {
return DHCR152;
}

public boolean getDHCR153() {
return DHCR153;
}

public boolean getDHCR154() {
return DHCR154;
}

public boolean getDHCR155() {
return DHCR155;
}

public boolean getDHCR156() {
return DHCR156;
}

public boolean getDHCR163() {
return DHCR163;
}

public boolean getDHCR164() {
return DHCR164;
}

public boolean getDHCR165() {
return DHCR165;
}

public byte getDHCR166() {
return DHCR166;
}

public boolean getDHCR167() {
return DHCR167;
}

public boolean getDHCR168() {
return DHCR168;
}

public boolean getDHCR169() {
return DHCR169;
}

public boolean getDHCR170() {
return DHCR170;
}

public boolean getDHCR171() {
return DHCR171;
}

public boolean getDHCR172() {
return DHCR172;
}

public byte getDHCR178() {
return DHCR178;
}

public boolean getDHCR179() {
return DHCR179;
}

public boolean getDHCR180() {
return DHCR180;
}

public boolean getDHCR181() {
return DHCR181;
}

public boolean getDHCR182() {
return DHCR182;
}

public boolean getDHCR183() {
return DHCR183;
}

public boolean getDHCR184() {
return DHCR184;
}

public boolean getDHCR185() {
return DHCR185;
}

public boolean getDHCR186() {
return DHCR186;
}

public boolean getDHCR187() {
return DHCR187;
}

public boolean getDHCR188() {
return DHCR188;
}

public byte getDHCR194() {
return DHCR194;
}

public boolean getDHCR195() {
return DHCR195;
}

public boolean getDHCR196() {
return DHCR196;
}

public boolean getDHCR197() {
return DHCR197;
}

public boolean getDHCR198() {
return DHCR198;
}

public boolean getDHCR199() {
return DHCR199;
}

public boolean getDHCR200() {
return DHCR200;
}

public boolean getDHCR201() {
return DHCR201;
}

public boolean getDHCR202() {
return DHCR202;
}

public boolean getDHCR203() {
return DHCR203;
}

public boolean getDHCR204() {
return DHCR204;
}

public byte getDHCR209() {
return DHCR209;
}

public byte getDHCR210() {
return DHCR210;
}

public boolean getDHCR211() {
return DHCR211;
}

public boolean getDHCR212() {
return DHCR212;
}

public boolean getDHCR213() {
return DHCR213;
}

public boolean getDHCR214() {
return DHCR214;
}

public boolean getDHCR215() {
return DHCR215;
}

public boolean getDHCR216() {
return DHCR216;
}

public boolean getDHCR217() {
return DHCR217;
}

public boolean getDHCR218() {
return DHCR218;
}

public boolean getDHCR219() {
return DHCR219;
}

public boolean getDHCR220() {
return DHCR220;
}

public byte getDHCR24() {
return DHCR24;
}

public byte getDHCR25() {
return DHCR25;
}

public byte getDHCR26() {
return DHCR26;
}

public byte getDHCR27() {
return DHCR27;
}

public boolean getDHCR28() {
return DHCR28;
}

public byte getDHCR40() {
return DHCR40;
}

public byte getDHCR41() {
return DHCR41;
}

public byte getDHCR42() {
return DHCR42;
}

public byte getDHCR43() {
return DHCR43;
}

public boolean getDHCR44() {
return DHCR44;
}

public byte getDHCR56() {
return DHCR56;
}

public byte getDHCR57() {
return DHCR57;
}

public byte getDHCR58() {
return DHCR58;
}

public boolean getDHCR59() {
return DHCR59;
}

public boolean getDHCR60() {
return DHCR60;
}

public byte getDHCR72() {
return DHCR72;
}

public byte getDHCR73() {
return DHCR73;
}

public byte getDHCR74() {
return DHCR74;
}

public boolean getDHCR75() {
return DHCR75;
}

public boolean getDHCR76() {
return DHCR76;
}

public boolean getDHCR88() {
return DHCR88;
}

public boolean getDHCR89() {
return DHCR89;
}

public boolean getDHCR90() {
return DHCR90;
}

public boolean getDHCR91() {
return DHCR91;
}

public boolean getDHCR92() {
return DHCR92;
}

public byte getDHCS14() {
return DHCS14;
}

public byte getDHDOBC() {
return DHDOBC;
}

public short getDHDOBYR() {
return DHDOBYR;
}

public byte getDHPA10() {
return DHPA10;
}

public byte getDHPA11() {
return DHPA11;
}

public byte getDHPA12() {
return DHPA12;
}

public byte getDHPA13() {
return DHPA13;
}

public byte getDHPA14() {
return DHPA14;
}

public byte getDHPA2() {
return DHPA2;
}

public byte getDHPA3() {
return DHPA3;
}

public byte getDHPA4() {
return DHPA4;
}

public byte getDHPA5() {
return DHPA5;
}

public byte getDHPA6() {
return DHPA6;
}

public byte getDHPA7() {
return DHPA7;
}

public byte getDHPA8() {
return DHPA8;
}

public byte getDHPA9() {
return DHPA9;
}

public byte getDHPB10() {
return DHPB10;
}

public byte getDHPB11() {
return DHPB11;
}

public byte getDHPB12() {
return DHPB12;
}

public byte getDHPB13() {
return DHPB13;
}

public byte getDHPB14() {
return DHPB14;
}

public byte getDHPB2() {
return DHPB2;
}

public byte getDHPB3() {
return DHPB3;
}

public byte getDHPB4() {
return DHPB4;
}

public byte getDHPB5() {
return DHPB5;
}

public byte getDHPB6() {
return DHPB6;
}

public byte getDHPB7() {
return DHPB7;
}

public byte getDHPB8() {
return DHPB8;
}

public byte getDHPB9() {
return DHPB9;
}

public boolean getDHSEX() {
return DHSEX;
}

public byte getDHWORK() {
return DHWORK;
}

public byte getDIAGR() {
return DIAGR;
}

public short getDIAS1() {
return DIAS1;
}

public short getDIAS2() {
return DIAS2;
}

public short getDIAS3() {
return DIAS3;
}

public double getDIAVAL() {
return DIAVAL;
}

public short getDIDBNY() {
return DIDBNY;
}

public byte getDIDOB() {
return DIDOB;
}

public byte getDIFBPC1() {
return DIFBPC1;
}

public byte getDIFBPC2() {
return DIFBPC2;
}

public boolean getDIFBPC3() {
return DIFBPC3;
}

public byte getDIGNMYC() {
return DIGNMYC;
}

public byte getDIKLIVC() {
return DIKLIVC;
}

public byte getDIMAR() {
return DIMAR;
}

public byte getDISEX() {
return DISEX;
}

public byte getDISEXC() {
return DISEXC;
}

public byte getDISIBC() {
return DISIBC;
}

public short getDOBYEAR() {
return DOBYEAR;
}

public byte getEHTCH() {
return EHTCH;
}

public byte getEHTFT() {
return EHTFT;
}

public byte getEHTIN() {
return EHTIN;
}

public double getEHTM() {
return EHTM;
}

public byte getERCAA() {
return ERCAA;
}

public byte getERCAB1() {
return ERCAB1;
}

public byte getERCAB2() {
return ERCAB2;
}

public byte getERCAB3() {
return ERCAB3;
}

public byte getERCAB4() {
return ERCAB4;
}

public byte getERCAB5() {
return ERCAB5;
}

public short getERCAC() {
return ERCAC;
}

public byte getERCADP1() {
return ERCADP1;
}

public byte getERCADP2() {
return ERCADP2;
}

public byte getERCADP3() {
return ERCADP3;
}

public byte getERCADP4() {
return ERCADP4;
}

public byte getERCADP5() {
return ERCADP5;
}

public byte getERCALIV() {
return ERCALIV;
}

public byte getERCAM01() {
return ERCAM01;
}

public byte getERCAM02() {
return ERCAM02;
}

public byte getERCAM03() {
return ERCAM03;
}

public byte getERCAM04() {
return ERCAM04;
}

public byte getERCAM05() {
return ERCAM05;
}

public boolean getERCANU1() {
return ERCANU1;
}

public byte getERCANU2() {
return ERCANU2;
}

public byte getERCANU3() {
return ERCANU3;
}

public byte getERCANU4() {
return ERCANU4;
}

public byte getERCANU5() {
return ERCANU5;
}

public byte getERCANU6() {
return ERCANU6;
}

public byte getERCANU7() {
return ERCANU7;
}

public byte getERCANU8() {
return ERCANU8;
}

public byte getERCARA() {
return ERCARA;
}

public byte getERCARB() {
return ERCARB;
}

public byte getERMOTC1() {
return ERMOTC1;
}

public byte getERMOTC2() {
return ERMOTC2;
}

public byte getERMOTC3() {
return ERMOTC3;
}

public byte getERMOTC4() {
return ERMOTC4;
}

public byte getERMOTC5() {
return ERMOTC5;
}

public byte getERMOTC6() {
return ERMOTC6;
}

public byte getERMOTC7() {
return ERMOTC7;
}

public byte getERMOTV1() {
return ERMOTV1;
}

public byte getERMOTV2() {
return ERMOTV2;
}

public byte getERMOTV3() {
return ERMOTV3;
}

public byte getERMOTV4() {
return ERMOTV4;
}

public byte getERMOTV5() {
return ERMOTV5;
}

public byte getERMOTV6() {
return ERMOTV6;
}

public byte getERMOTV7() {
return ERMOTV7;
}

public byte getERMOTV8() {
return ERMOTV8;
}

public byte getERTOTCN() {
return ERTOTCN;
}

public byte getERVOLA() {
return ERVOLA;
}

public byte getERVOLB() {
return ERVOLB;
}

public double getESTHT() {
return ESTHT;
}

public double getESTWT() {
return ESTWT;
}

public byte getEWTCH() {
return EWTCH;
}

public double getEWTKG() {
return EWTKG;
}

public byte getEWTL() {
return EWTL;
}

public byte getEWTST() {
return EWTST;
}

public byte getEXMOVHA() {
return EXMOVHA;
}

public byte getEXMOVNB() {
return EXMOVNB;
}

public byte getEXNEGA1() {
return EXNEGA1;
}

public byte getEXNEGA2() {
return EXNEGA2;
}

public byte getEXNEGA3() {
return EXNEGA3;
}

public byte getEXNEGA4() {
return EXNEGA4;
}

public byte getEXNEGA5() {
return EXNEGA5;
}

public byte getEXNEGA6() {
return EXNEGA6;
}

public boolean getEXNEGA7() {
return EXNEGA7;
}

public byte getEXPLAN() {
return EXPLAN;
}

public byte getEXPOSA1() {
return EXPOSA1;
}

public byte getEXPOSA2() {
return EXPOSA2;
}

public byte getEXPOSA3() {
return EXPOSA3;
}

public byte getEXPOSA4() {
return EXPOSA4;
}

public byte getEXPOSA5() {
return EXPOSA5;
}

public byte getEXPOSA6() {
return EXPOSA6;
}

public byte getEXPOSA7() {
return EXPOSA7;
}

public byte getEXPWF() {
return EXPWF;
}

public byte getEXRELA() {
return EXRELA;
}

public byte getEXRELB() {
return EXRELB;
}

public byte getEXRELC() {
return EXRELC;
}

public byte getEXRELD() {
return EXRELD;
}

public byte getEXRELE1() {
return EXRELE1;
}

public byte getEXRELE2() {
return EXRELE2;
}

public byte getEXRELE3() {
return EXRELE3;
}

public byte getEXRELE4() {
return EXRELE4;
}

public byte getEXRELE5() {
return EXRELE5;
}

public byte getEXRELE6() {
return EXRELE6;
}

public byte getEXRELE7() {
return EXRELE7;
}

public byte getEXRELE8() {
return EXRELE8;
}

public boolean getEXRELE9() {
return EXRELE9;
}

public byte getEYESURG() {
return EYESURG;
}

public byte getFASTASK() {
return FASTASK;
}

public byte getFASTELI() {
return FASTELI;
}

public byte getFASTHRS() {
return FASTHRS;
}

public double getFEV1() {
return FEV1;
}

public double getFEV2() {
return FEV2;
}

public double getFEV3() {
return FEV3;
}

public boolean getFFPROB() {
return FFPROB;
}

public double getFGLU() {
return FGLU;
}

public String getFINSTAT() {
return FINSTAT;
}

public byte getFIT() {
return FIT;
}

public byte getFLOORC() {
return FLOORC;
}

public byte getFQAQUA() {
return FQAQUA;
}

public byte getFQCBTHR() {
return FQCBTHR;
}

public short getFQCENG() {
return FQCENG;
}

public byte getFQEND() {
return FQEND;
}

public byte getFQETHNR() {
return FQETHNR;
}

public byte getFQQUAL1() {
return FQQUAL1;
}

public byte getFQQUAL2() {
return FQQUAL2;
}

public byte getFQQUAL3() {
return FQQUAL3;
}

public byte getFQQUZM1() {
return FQQUZM1;
}

public byte getFQQUZM2() {
return FQQUZM2;
}

public byte getFULL1() {
return FULL1;
}

public byte getFULL2() {
return FULL2;
}

public byte getFULL3() {
return FULL3;
}

public double getFVC1() {
return FVC1;
}

public double getFVC2() {
return FVC2;
}

public double getFVC3() {
return FVC3;
}

public boolean getGCINHH1() {
return GCINHH1;
}

public byte getHASTRO() {
return HASTRO;
}

public byte getHASURG() {
return HASURG;
}

public double getHBA1C() {
return HBA1C;
}

public double getHDL() {
return HDL;
}

public byte getHEACD() {
return HEACD;
}

public byte getHEACE() {
return HEACE;
}

public byte getHEACEA() {
return HEACEA;
}

public byte getHEACEAC() {
return HEACEAC;
}

public byte getHEADA01() {
return HEADA01;
}

public byte getHEADA02() {
return HEADA02;
}

public byte getHEADA03() {
return HEADA03;
}

public byte getHEADA04() {
return HEADA04;
}

public byte getHEADA05() {
return HEADA05;
}

public byte getHEADA06() {
return HEADA06;
}

public byte getHEADA07() {
return HEADA07;
}

public byte getHEADA08() {
return HEADA08;
}

public byte getHEADA09() {
return HEADA09;
}

public byte getHEADA10() {
return HEADA10;
}

public byte getHEADB01() {
return HEADB01;
}

public byte getHEADB02() {
return HEADB02;
}

public byte getHEADB03() {
return HEADB03;
}

public byte getHEADB04() {
return HEADB04;
}

public byte getHEADB05() {
return HEADB05;
}

public byte getHEADB06() {
return HEADB06;
}

public byte getHEADB07() {
return HEADB07;
}

public byte getHEADB08() {
return HEADB08;
}

public byte getHEADB09() {
return HEADB09;
}

public byte getHEADB10() {
return HEADB10;
}

public byte getHEADB11() {
return HEADB11;
}

public byte getHEADB12() {
return HEADB12;
}

public boolean getHEADB13() {
return HEADB13;
}

public byte getHEAGAR() {
return HEAGAR;
}

public short getHEAGARY() {
return HEAGARY;
}

public byte getHEAGBR() {
return HEAGBR;
}

public short getHEAGBRY() {
return HEAGBRY;
}

public byte getHEAGCR() {
return HEAGCR;
}

public short getHEAGCRY() {
return HEAGCRY;
}

public byte getHEAGDR() {
return HEAGDR;
}

public short getHEAGDRY() {
return HEAGDRY;
}

public byte getHEAGER() {
return HEAGER;
}

public short getHEAGERY() {
return HEAGERY;
}

public byte getHEAGFR() {
return HEAGFR;
}

public short getHEAGFRY() {
return HEAGFRY;
}

public byte getHEAGG() {
return HEAGG;
}

public byte getHEAGGR() {
return HEAGGR;
}

public short getHEAGGRY() {
return HEAGGRY;
}

public byte getHEAGH() {
return HEAGH;
}

public byte getHEAGHR() {
return HEAGHR;
}

public short getHEAGHRY() {
return HEAGHRY;
}

public byte getHEAGIR() {
return HEAGIR;
}

public short getHEAGIRY() {
return HEAGIRY;
}

public byte getHEAGJR() {
return HEAGJR;
}

public short getHEAGJRY() {
return HEAGJRY;
}

public byte getHEAID1() {
return HEAID1;
}

public byte getHEAID10() {
return HEAID10;
}

public byte getHEAID11() {
return HEAID11;
}

public byte getHEAID12() {
return HEAID12;
}

public byte getHEAID17() {
return HEAID17;
}

public byte getHEAID18() {
return HEAID18;
}

public byte getHEAID19() {
return HEAID19;
}

public byte getHEAID2() {
return HEAID2;
}

public byte getHEAID20() {
return HEAID20;
}

public byte getHEAID21() {
return HEAID21;
}

public byte getHEAID22() {
return HEAID22;
}

public byte getHEAID3() {
return HEAID3;
}

public byte getHEAID4() {
return HEAID4;
}

public byte getHEAID5() {
return HEAID5;
}

public byte getHEAID9() {
return HEAID9;
}

public byte getHEAIDC() {
return HEAIDC;
}

public boolean getHEAIDC2() {
return HEAIDC2;
}

public byte getHEAIDC3() {
return HEAIDC3;
}

public byte getHEAIN01() {
return HEAIN01;
}

public boolean getHEAIN05() {
return HEAIN05;
}

public boolean getHEAIN06() {
return HEAIN06;
}

public boolean getHEAIN07() {
return HEAIN07;
}

public boolean getHEAIN19() {
return HEAIN19;
}

public byte getHEAIW01() {
return HEAIW01;
}

public boolean getHEAIW17() {
return HEAIW17;
}

public byte getHEANA() {
return HEANA;
}

public byte getHEANB() {
return HEANB;
}

public byte getHEANC() {
return HEANC;
}

public byte getHEAND() {
return HEAND;
}

public byte getHEANE() {
return HEANE;
}

public byte getHEANF() {
return HEANF;
}

public byte getHEANG() {
return HEANG;
}

public byte getHEANH() {
return HEANH;
}

public byte getHEANI1() {
return HEANI1;
}

public byte getHEANI2() {
return HEANI2;
}

public byte getHEANI3() {
return HEANI3;
}

public byte getHEANI4() {
return HEANI4;
}

public byte getHEANI5() {
return HEANI5;
}

public byte getHEANI6() {
return HEANI6;
}

public byte getHEANIM1() {
return HEANIM1;
}

public byte getHEANIM2() {
return HEANIM2;
}

public byte getHEANIM3() {
return HEANIM3;
}

public byte getHEANIM4() {
return HEANIM4;
}

public byte getHEANIM5() {
return HEANIM5;
}

public boolean getHEANIM6() {
return HEANIM6;
}

public byte getHEANK() {
return HEANK;
}

public byte getHEANL() {
return HEANL;
}

public byte getHEART1() {
return HEART1;
}

public byte getHEART2() {
return HEART2;
}

public byte getHEARTA() {
return HEARTA;
}

public byte getHEARTB() {
return HEARTB;
}

public byte getHEARTC() {
return HEARTC;
}

public byte getHEARTD() {
return HEARTD;
}

public byte getHEARTE() {
return HEARTE;
}

public byte getHEATA() {
return HEATA;
}

public byte getHEATT01() {
return HEATT01;
}

public byte getHEATT02() {
return HEATT02;
}

public byte getHEATT03() {
return HEATT03;
}

public byte getHEATT04() {
return HEATT04;
}

public byte getHEATT05() {
return HEATT05;
}

public byte getHEATT06() {
return HEATT06;
}

public byte getHEATT07() {
return HEATT07;
}

public byte getHEATT08() {
return HEATT08;
}

public byte getHEATT09() {
return HEATT09;
}

public byte getHEATT10() {
return HEATT10;
}

public byte getHEATT11() {
return HEATT11;
}

public byte getHEATT12() {
return HEATT12;
}

public byte getHEATT13() {
return HEATT13;
}

public byte getHEATT14() {
return HEATT14;
}

public byte getHEAVOID() {
return HEAVOID;
}

public byte getHEBAL() {
return HEBAL;
}

public byte getHEBALA1() {
return HEBALA1;
}

public byte getHEBALA2() {
return HEBALA2;
}

public byte getHEBALB1() {
return HEBALB1;
}

public byte getHEBALB2() {
return HEBALB2;
}

public byte getHEBALC1() {
return HEBALC1;
}

public byte getHEBALC2() {
return HEBALC2;
}

public byte getHEBETA() {
return HEBETA;
}

public byte getHEBETB() {
return HEBETB;
}

public boolean getHEBETBC() {
return HEBETBC;
}

public byte getHEBPCHK() {
return HEBPCHK;
}

public byte getHECANA() {
return HECANA;
}

public byte getHECDA() {
return HECDA;
}

public byte getHECDB() {
return HECDB;
}

public byte getHECDC() {
return HECDC;
}

public byte getHECDD() {
return HECDD;
}

public byte getHECDE() {
return HECDE;
}

public byte getHECDF1() {
return HECDF1;
}

public byte getHECDF2() {
return HECDF2;
}

public byte getHECDF3() {
return HECDF3;
}

public byte getHECGNIC() {
return HECGNIC;
}

public byte getHECGSTA() {
return HECGSTA;
}

public byte getHECGSTP() {
return HECGSTP;
}

public byte getHECHOA() {
return HECHOA;
}

public byte getHECHOA2() {
return HECHOA2;
}

public byte getHECHOL() {
return HECHOL;
}

public byte getHECHOL2() {
return HECHOL2;
}

public byte getHECHOLB() {
return HECHOLB;
}

public byte getHECHOLC() {
return HECHOLC;
}

public boolean getHEDIA() {
return HEDIA;
}

public byte getHEDIA01() {
return HEDIA01;
}

public byte getHEDIA02() {
return HEDIA02;
}

public byte getHEDIA03() {
return HEDIA03;
}

public byte getHEDIA04() {
return HEDIA04;
}

public byte getHEDIA05() {
return HEDIA05;
}

public byte getHEDIA06() {
return HEDIA06;
}

public byte getHEDIA07() {
return HEDIA07;
}

public boolean getHEDIA08() {
return HEDIA08;
}

public boolean getHEDIA09() {
return HEDIA09;
}

public byte getHEDIAC1() {
return HEDIAC1;
}

public byte getHEDIAC2() {
return HEDIAC2;
}

public byte getHEDIAC3() {
return HEDIAC3;
}

public byte getHEDIAC4() {
return HEDIAC4;
}

public byte getHEDIAC5() {
return HEDIAC5;
}

public byte getHEDIAC6() {
return HEDIAC6;
}

public byte getHEDIAC7() {
return HEDIAC7;
}

public byte getHEDIAC8() {
return HEDIAC8;
}

public byte getHEDIAC9() {
return HEDIAC9;
}

public byte getHEDIAD1() {
return HEDIAD1;
}

public byte getHEDIAD2() {
return HEDIAD2;
}

public byte getHEDIAD3() {
return HEDIAD3;
}

public byte getHEDIAD4() {
return HEDIAD4;
}

public byte getHEDIAD5() {
return HEDIAD5;
}

public byte getHEDIAD6() {
return HEDIAD6;
}

public byte getHEDIAD7() {
return HEDIAD7;
}

public boolean getHEDIAD8() {
return HEDIAD8;
}

public byte getHEDIAD9() {
return HEDIAD9;
}

public byte getHEDIAM1() {
return HEDIAM1;
}

public byte getHEDIAM2() {
return HEDIAM2;
}

public byte getHEDIAM3() {
return HEDIAM3;
}

public byte getHEDIAM4() {
return HEDIAM4;
}

public byte getHEDIAM5() {
return HEDIAM5;
}

public boolean getHEDIAM6() {
return HEDIAM6;
}

public byte getHEDIAM7() {
return HEDIAM7;
}

public boolean getHEDIAM8() {
return HEDIAM8;
}

public byte getHEDIAM9() {
return HEDIAM9;
}

public byte getHEDIAN1() {
return HEDIAN1;
}

public byte getHEDIAN2() {
return HEDIAN2;
}

public byte getHEDIAN3() {
return HEDIAN3;
}

public boolean getHEDIAN4() {
return HEDIAN4;
}

public byte getHEDIAN5() {
return HEDIAN5;
}

public byte getHEDIAN6() {
return HEDIAN6;
}

public byte getHEDIAN7() {
return HEDIAN7;
}

public boolean getHEDIAN8() {
return HEDIAN8;
}

public byte getHEDIAN9() {
return HEDIAN9;
}

public byte getHEDIAS1() {
return HEDIAS1;
}

public byte getHEDIAS2() {
return HEDIAS2;
}

public boolean getHEDIAS3() {
return HEDIAS3;
}

public byte getHEDIAS4() {
return HEDIAS4;
}

public byte getHEDIAS5() {
return HEDIAS5;
}

public byte getHEDIAS6() {
return HEDIAS6;
}

public byte getHEDIAS7() {
return HEDIAS7;
}

public boolean getHEDIAS8() {
return HEDIAS8;
}

public byte getHEDIAS9() {
return HEDIAS9;
}

public boolean getHEDIAW1() {
return HEDIAW1;
}

public boolean getHEDIAW3() {
return HEDIAW3;
}

public boolean getHEDIAW4() {
return HEDIAW4;
}

public boolean getHEDIAW5() {
return HEDIAW5;
}

public boolean getHEDIAW6() {
return HEDIAW6;
}

public boolean getHEDIAW7() {
return HEDIAW7;
}

public boolean getHEDIAW8() {
return HEDIAW8;
}

public boolean getHEDIAW9() {
return HEDIAW9;
}

public boolean getHEDIB() {
return HEDIB;
}

public byte getHEDIB01() {
return HEDIB01;
}

public byte getHEDIB02() {
return HEDIB02;
}

public byte getHEDIB03() {
return HEDIB03;
}

public byte getHEDIB04() {
return HEDIB04;
}

public boolean getHEDIBW1() {
return HEDIBW1;
}

public boolean getHEDIBW3() {
return HEDIBW3;
}

public boolean getHEDIBW4() {
return HEDIBW4;
}

public boolean getHEDIBW5() {
return HEDIBW5;
}

public boolean getHEDIBW6() {
return HEDIBW6;
}

public boolean getHEDIBW7() {
return HEDIBW7;
}

public boolean getHEDIBW8() {
return HEDIBW8;
}

public boolean getHEDIBW9() {
return HEDIBW9;
}

public byte getHEDIDS1() {
return HEDIDS1;
}

public byte getHEDIDS2() {
return HEDIDS2;
}

public byte getHEDIDS3() {
return HEDIDS3;
}

public byte getHEDIDS4() {
return HEDIDS4;
}

public byte getHEDIDS5() {
return HEDIDS5;
}

public boolean getHEDIDS6() {
return HEDIDS6;
}

public byte getHEDIDS7() {
return HEDIDS7;
}

public boolean getHEDIDS8() {
return HEDIDS8;
}

public byte getHEDIDS9() {
return HEDIDS9;
}

public byte getHEDIM01() {
return HEDIM01;
}

public byte getHEDIM02() {
return HEDIM02;
}

public byte getHEDIM03() {
return HEDIM03;
}

public byte getHEDIM04() {
return HEDIM04;
}

public byte getHEDIM05() {
return HEDIM05;
}

public byte getHEDIM06() {
return HEDIM06;
}

public boolean getHEDIM07() {
return HEDIM07;
}

public boolean getHEDIM08() {
return HEDIM08;
}

public byte getHEDIZ() {
return HEDIZ;
}

public byte getHEDREYE() {
return HEDREYE;
}

public boolean getHEFFLAG() {
return HEFFLAG;
}

public byte getHEFLD() {
return HEFLD;
}

public byte getHEFLE() {
return HEFLE;
}

public byte getHEFLF() {
return HEFLF;
}

public byte getHEFTCHK() {
return HEFTCHK;
}

public byte getHEHBP() {
return HEHBP;
}

public byte getHEHBPA() {
return HEHBPA;
}

public byte getHEHBPB() {
return HEHBPB;
}

public byte getHEHBPB1() {
return HEHBPB1;
}

public byte getHEHELF() {
return HEHELF;
}

public byte getHEHPA() {
return HEHPA;
}

public byte getHEHPB01() {
return HEHPB01;
}

public byte getHEHPB02() {
return HEHPB02;
}

public byte getHEHPB03() {
return HEHPB03;
}

public byte getHEHPB04() {
return HEHPB04;
}

public byte getHEHPB05() {
return HEHPB05;
}

public byte getHEHPB06() {
return HEHPB06;
}

public byte getHEHPB07() {
return HEHPB07;
}

public byte getHEHPB08() {
return HEHPB08;
}

public boolean getHEHPB09() {
return HEHPB09;
}

public byte getHEHPC() {
return HEHPC;
}

public byte getHEHPD() {
return HEHPD;
}

public byte getHEHPE() {
return HEHPE;
}

public byte getHEHRB() {
return HEHRB;
}

public byte getHEHRC() {
return HEHRC;
}

public byte getHEHRD() {
return HEHRD;
}

public byte getHEHRE() {
return HEHRE;
}

public byte getHEHRF() {
return HEHRF;
}

public byte getHEHRG() {
return HEHRG;
}

public byte getHEHRTA() {
return HEHRTA;
}

public byte getHEHRTA2() {
return HEHRTA2;
}

public byte getHEHRTB() {
return HEHRTB;
}

public byte getHEHRTB2() {
return HEHRTB2;
}

public byte getHEHRTC() {
return HEHRTC;
}

public byte getHEHRTC2() {
return HEHRTC2;
}

public byte getHEHRTD() {
return HEHRTD;
}

public byte getHEHRTD2() {
return HEHRTD2;
}

public byte getHEHRTE() {
return HEHRTE;
}

public boolean getHEHRTE2() {
return HEHRTE2;
}

public byte getHEHRTF() {
return HEHRTF;
}

public byte getHEHRTF2() {
return HEHRTF2;
}

public double getHEIGHT() {
return HEIGHT;
}

public byte getHEINCT() {
return HEINCT;
}

public byte getHEINCTA() {
return HEINCTA;
}

public byte getHEINCTB() {
return HEINCTB;
}

public byte getHEINCTC() {
return HEINCTC;
}

public byte getHEINCTD() {
return HEINCTD;
}

public byte getHEINCTE() {
return HEINCTE;
}

public byte getHEINCTF() {
return HEINCTF;
}

public byte getHEINCTG() {
return HEINCTG;
}

public byte getHEINCTH() {
return HEINCTH;
}

public byte getHEINCTI() {
return HEINCTI;
}

public byte getHEINCTJ() {
return HEINCTJ;
}

public byte getHEJIA1() {
return HEJIA1;
}

public byte getHEJIA2() {
return HEJIA2;
}

public byte getHEJIB() {
return HEJIB;
}

public byte getHEJIC() {
return HEJIC;
}

public byte getHEKIDN() {
return HEKIDN;
}

public byte getHEKNEA() {
return HEKNEA;
}

public byte getHEKNEB() {
return HEKNEB;
}

public byte getHEKNEC() {
return HEKNEC;
}

public byte getHELWK() {
return HELWK;
}

public byte getHENICO() {
return HENICO;
}

public byte getHENICTK() {
return HENICTK;
}

public byte getHENMMI() {
return HENMMI;
}

public byte getHENMST() {
return HENMST;
}

public boolean getHEOP() {
return HEOP;
}

public byte getHEOPC() {
return HEOPC;
}

public byte getHEOPN1() {
return HEOPN1;
}

public byte getHEOPN2() {
return HEOPN2;
}

public boolean getHEOPN3() {
return HEOPN3;
}

public byte getHEOPN4() {
return HEOPN4;
}

public byte getHEOPS() {
return HEOPS;
}

public byte getHEOPT1() {
return HEOPT1;
}

public byte getHEOPT2() {
return HEOPT2;
}

public byte getHEOPW1() {
return HEOPW1;
}

public byte getHEOSTE() {
return HEOSTE;
}

public byte getHEOSTEA() {
return HEOSTEA;
}

public byte getHEOSTEB() {
return HEOSTEB;
}

public byte getHEOSTEC() {
return HEOSTEC;
}

public byte getHEOSTED() {
return HEOSTED;
}

public byte getHEPAC() {
return HEPAC;
}

public byte getHEPAD() {
return HEPAD;
}

public byte getHEPAE() {
return HEPAE;
}

public byte getHEPAF() {
return HEPAF;
}

public byte getHEPAF1() {
return HEPAF1;
}

public byte getHEPAG() {
return HEPAG;
}

public byte getHEPAH() {
return HEPAH;
}

public byte getHEPAI() {
return HEPAI;
}

public byte getHEPAJ() {
return HEPAJ;
}

public byte getHEPAK1() {
return HEPAK1;
}

public byte getHEPAK2() {
return HEPAK2;
}

public byte getHEPRKR() {
return HEPRKR;
}

public short getHEPRKRY() {
return HEPRKRY;
}

public byte getHEPSY1() {
return HEPSY1;
}

public byte getHEPSY2() {
return HEPSY2;
}

public byte getHEPSY3() {
return HEPSY3;
}

public byte getHEPSY4() {
return HEPSY4;
}

public byte getHEPSY5() {
return HEPSY5;
}

public byte getHEPSY6() {
return HEPSY6;
}

public byte getHEPSYA() {
return HEPSYA;
}

public byte getHEPSYB() {
return HEPSYB;
}

public byte getHEPSYC() {
return HEPSYC;
}

public byte getHEPSYD() {
return HEPSYD;
}

public byte getHEPSYE() {
return HEPSYE;
}

public byte getHERPA() {
return HERPA;
}

public byte getHERPB() {
return HERPB;
}

public byte getHERPC() {
return HERPC;
}

public byte getHERPD() {
return HERPD;
}

public byte getHERPE() {
return HERPE;
}

public byte getHERPF() {
return HERPF;
}

public byte getHERPG() {
return HERPG;
}

public byte getHERPH() {
return HERPH;
}

public byte getHERPI() {
return HERPI;
}

public byte getHERPJ() {
return HERPJ;
}

public byte getHESKD() {
return HESKD;
}

public byte getHESKE() {
return HESKE;
}

public byte getHESKF() {
return HESKF;
}

public byte getHESLFCB() {
return HESLFCB;
}

public byte getHESLFCM() {
return HESLFCM;
}

public byte getHESLFCR() {
return HESLFCR;
}

public short getHESLFCY() {
return HESLFCY;
}

public byte getHESTOP() {
return HESTOP;
}

public byte getHESTOPC() {
return HESTOPC;
}

public byte getHESUG() {
return HESUG;
}

public byte getHESUGA() {
return HESUGA;
}

public byte getHETEMP() {
return HETEMP;
}

public byte getHEWEE() {
return HEWEE;
}

public byte getHEWEEA() {
return HEWEEA;
}

public byte getHEYRB() {
return HEYRB;
}

public double getHGB() {
return HGB;
}

public byte getHHAGE() {
return HHAGE;
}

public byte getHINREL() {
return HINREL;
}

public double getHIP1() {
return HIP1;
}

public double getHIP2() {
return HIP2;
}

public double getHIP3() {
return HIP3;
}

public byte getHIPOKB() {
return HIPOKB;
}

public double getHIPVAL() {
return HIPVAL;
}

public byte getHJREL() {
return HJREL;
}

public byte getHOADP1() {
return HOADP1;
}

public boolean getHOADP10() {
return HOADP10;
}

public byte getHOADP2() {
return HOADP2;
}

public byte getHOADP3() {
return HOADP3;
}

public byte getHOADP4() {
return HOADP4;
}

public byte getHOADP5() {
return HOADP5;
}

public byte getHOADP6() {
return HOADP6;
}

public byte getHOADP7() {
return HOADP7;
}

public byte getHOADP8() {
return HOADP8;
}

public byte getHOADP9() {
return HOADP9;
}

public byte getHOALF1() {
return HOALF1;
}

public short getHOALF1L() {
return HOALF1L;
}

public byte getHOALF1R() {
return HOALF1R;
}

public byte getHOALF1T() {
return HOALF1T;
}

public short getHOALF1U() {
return HOALF1U;
}

public byte getHOALF2() {
return HOALF2;
}

public short getHOALF2L() {
return HOALF2L;
}

public byte getHOALF2R() {
return HOALF2R;
}

public byte getHOALF2T() {
return HOALF2T;
}

public short getHOALF2U() {
return HOALF2U;
}

public short getHOALFM1() {
return HOALFM1;
}

public short getHOALFM2() {
return HOALFM2;
}

public byte getHOALI1() {
return HOALI1;
}

public byte getHOALI2() {
return HOALI2;
}

public byte getHOASK() {
return HOASK;
}

public byte getHOBA2FE() {
return HOBA2FE;
}

public byte getHOBA2FL() {
return HOBA2FL;
}

public byte getHOBA2FR() {
return HOBA2FR;
}

public byte getHOBA2FU() {
return HOBA2FU;
}

public byte getHOBA2ME() {
return HOBA2ME;
}

public byte getHOBA2ML() {
return HOBA2ML;
}

public byte getHOBA2MR() {
return HOBA2MR;
}

public byte getHOBA2MU() {
return HOBA2MU;
}

public byte getHOBA2OE() {
return HOBA2OE;
}

public short getHOBA2OL() {
return HOBA2OL;
}

public byte getHOBA2OR() {
return HOBA2OR;
}

public short getHOBA2OU() {
return HOBA2OU;
}

public byte getHOBA2WE() {
return HOBA2WE;
}

public byte getHOBA2WL() {
return HOBA2WL;
}

public byte getHOBA2WR() {
return HOBA2WR;
}

public byte getHOBA2WU() {
return HOBA2WU;
}

public byte getHOBA2YE() {
return HOBA2YE;
}

public byte getHOBA2YL() {
return HOBA2YL;
}

public byte getHOBA2YR() {
return HOBA2YR;
}

public byte getHOBA2YU() {
return HOBA2YU;
}

public byte getHOBA3FE() {
return HOBA3FE;
}

public byte getHOBA3FL() {
return HOBA3FL;
}

public byte getHOBA3FR() {
return HOBA3FR;
}

public byte getHOBA3FU() {
return HOBA3FU;
}

public byte getHOBA3ME() {
return HOBA3ME;
}

public short getHOBA3ML() {
return HOBA3ML;
}

public byte getHOBA3MR() {
return HOBA3MR;
}

public short getHOBA3MU() {
return HOBA3MU;
}

public byte getHOBA3OE() {
return HOBA3OE;
}

public short getHOBA3OL() {
return HOBA3OL;
}

public byte getHOBA3OR() {
return HOBA3OR;
}

public short getHOBA3OU() {
return HOBA3OU;
}

public byte getHOBA3WE() {
return HOBA3WE;
}

public byte getHOBA3WL() {
return HOBA3WL;
}

public byte getHOBA3WR() {
return HOBA3WR;
}

public short getHOBA3WU() {
return HOBA3WU;
}

public byte getHOBA3YE() {
return HOBA3YE;
}

public byte getHOBA3YL() {
return HOBA3YL;
}

public byte getHOBA3YR() {
return HOBA3YR;
}

public byte getHOBA3YU() {
return HOBA3YU;
}

public byte getHOBA4FE() {
return HOBA4FE;
}

public byte getHOBA4FL() {
return HOBA4FL;
}

public byte getHOBA4FR() {
return HOBA4FR;
}

public byte getHOBA4FU() {
return HOBA4FU;
}

public byte getHOBA4ME() {
return HOBA4ME;
}

public short getHOBA4ML() {
return HOBA4ML;
}

public byte getHOBA4MR() {
return HOBA4MR;
}

public short getHOBA4MU() {
return HOBA4MU;
}

public byte getHOBA4OE() {
return HOBA4OE;
}

public short getHOBA4OL() {
return HOBA4OL;
}

public byte getHOBA4OR() {
return HOBA4OR;
}

public short getHOBA4OU() {
return HOBA4OU;
}

public byte getHOBA4WE() {
return HOBA4WE;
}

public short getHOBA4WL() {
return HOBA4WL;
}

public byte getHOBA4WR() {
return HOBA4WR;
}

public short getHOBA4WU() {
return HOBA4WU;
}

public byte getHOBA4YE() {
return HOBA4YE;
}

public byte getHOBA4YL() {
return HOBA4YL;
}

public byte getHOBA4YR() {
return HOBA4YR;
}

public byte getHOBA4YU() {
return HOBA4YU;
}

public byte getHOBA5FE() {
return HOBA5FE;
}

public byte getHOBA5FL() {
return HOBA5FL;
}

public byte getHOBA5FR() {
return HOBA5FR;
}

public byte getHOBA5FU() {
return HOBA5FU;
}

public byte getHOBA5ME() {
return HOBA5ME;
}

public short getHOBA5ML() {
return HOBA5ML;
}

public byte getHOBA5MR() {
return HOBA5MR;
}

public short getHOBA5MU() {
return HOBA5MU;
}

public byte getHOBA5OE() {
return HOBA5OE;
}

public byte getHOBA5OL() {
return HOBA5OL;
}

public byte getHOBA5OR() {
return HOBA5OR;
}

public byte getHOBA5OU() {
return HOBA5OU;
}

public byte getHOBA5WE() {
return HOBA5WE;
}

public byte getHOBA5WL() {
return HOBA5WL;
}

public byte getHOBA5WR() {
return HOBA5WR;
}

public byte getHOBA5WU() {
return HOBA5WU;
}

public byte getHOBA5YE() {
return HOBA5YE;
}

public byte getHOBA5YL() {
return HOBA5YL;
}

public byte getHOBA5YR() {
return HOBA5YR;
}

public byte getHOBA5YU() {
return HOBA5YU;
}

public byte getHOBA6FE() {
return HOBA6FE;
}

public byte getHOBA6FL() {
return HOBA6FL;
}

public byte getHOBA6FR() {
return HOBA6FR;
}

public byte getHOBA6FU() {
return HOBA6FU;
}

public byte getHOBA6ME() {
return HOBA6ME;
}

public byte getHOBA6ML() {
return HOBA6ML;
}

public byte getHOBA6MR() {
return HOBA6MR;
}

public byte getHOBA6MU() {
return HOBA6MU;
}

public byte getHOBA6OE() {
return HOBA6OE;
}

public byte getHOBA6OL() {
return HOBA6OL;
}

public byte getHOBA6OR() {
return HOBA6OR;
}

public byte getHOBA6OU() {
return HOBA6OU;
}

public byte getHOBA6WE() {
return HOBA6WE;
}

public byte getHOBA6WL() {
return HOBA6WL;
}

public byte getHOBA6WR() {
return HOBA6WR;
}

public byte getHOBA6WU() {
return HOBA6WU;
}

public byte getHOBA6YE() {
return HOBA6YE;
}

public byte getHOBA6YL() {
return HOBA6YL;
}

public byte getHOBA6YR() {
return HOBA6YR;
}

public byte getHOBA6YU() {
return HOBA6YU;
}

public byte getHOBA7FE() {
return HOBA7FE;
}

public byte getHOBA7FL() {
return HOBA7FL;
}

public byte getHOBA7FR() {
return HOBA7FR;
}

public byte getHOBA7FU() {
return HOBA7FU;
}

public byte getHOBA7ME() {
return HOBA7ME;
}

public byte getHOBA7ML() {
return HOBA7ML;
}

public byte getHOBA7MR() {
return HOBA7MR;
}

public byte getHOBA7MU() {
return HOBA7MU;
}

public byte getHOBA7OE() {
return HOBA7OE;
}

public byte getHOBA7OL() {
return HOBA7OL;
}

public byte getHOBA7OR() {
return HOBA7OR;
}

public byte getHOBA7OU() {
return HOBA7OU;
}

public byte getHOBA7WE() {
return HOBA7WE;
}

public byte getHOBA7WL() {
return HOBA7WL;
}

public byte getHOBA7WR() {
return HOBA7WR;
}

public byte getHOBA7WU() {
return HOBA7WU;
}

public byte getHOBA7YE() {
return HOBA7YE;
}

public byte getHOBA7YL() {
return HOBA7YL;
}

public byte getHOBA7YR() {
return HOBA7YR;
}

public byte getHOBA7YU() {
return HOBA7YU;
}

public byte getHOBA8FE() {
return HOBA8FE;
}

public byte getHOBA8FL() {
return HOBA8FL;
}

public byte getHOBA8FR() {
return HOBA8FR;
}

public byte getHOBA8FU() {
return HOBA8FU;
}

public byte getHOBA8ME() {
return HOBA8ME;
}

public byte getHOBA8ML() {
return HOBA8ML;
}

public byte getHOBA8MR() {
return HOBA8MR;
}

public byte getHOBA8MU() {
return HOBA8MU;
}

public byte getHOBA8OE() {
return HOBA8OE;
}

public byte getHOBA8OL() {
return HOBA8OL;
}

public byte getHOBA8OR() {
return HOBA8OR;
}

public byte getHOBA8OU() {
return HOBA8OU;
}

public byte getHOBA8WE() {
return HOBA8WE;
}

public byte getHOBA8WL() {
return HOBA8WL;
}

public byte getHOBA8WR() {
return HOBA8WR;
}

public byte getHOBA8WU() {
return HOBA8WU;
}

public byte getHOBA8YE() {
return HOBA8YE;
}

public byte getHOBA8YL() {
return HOBA8YL;
}

public byte getHOBA8YR() {
return HOBA8YR;
}

public byte getHOBA8YU() {
return HOBA8YU;
}

public byte getHOBA9FE() {
return HOBA9FE;
}

public byte getHOBA9FL() {
return HOBA9FL;
}

public byte getHOBA9FR() {
return HOBA9FR;
}

public byte getHOBA9FU() {
return HOBA9FU;
}

public byte getHOBA9ME() {
return HOBA9ME;
}

public byte getHOBA9ML() {
return HOBA9ML;
}

public byte getHOBA9MR() {
return HOBA9MR;
}

public byte getHOBA9MU() {
return HOBA9MU;
}

public byte getHOBA9OE() {
return HOBA9OE;
}

public byte getHOBA9OL() {
return HOBA9OL;
}

public byte getHOBA9OR() {
return HOBA9OR;
}

public byte getHOBA9OU() {
return HOBA9OU;
}

public byte getHOBA9WE() {
return HOBA9WE;
}

public byte getHOBA9WL() {
return HOBA9WL;
}

public byte getHOBA9WR() {
return HOBA9WR;
}

public byte getHOBA9WU() {
return HOBA9WU;
}

public byte getHOBA9YE() {
return HOBA9YE;
}

public byte getHOBA9YL() {
return HOBA9YL;
}

public byte getHOBA9YR() {
return HOBA9YR;
}

public byte getHOBA9YU() {
return HOBA9YU;
}

public byte getHOBAFE() {
return HOBAFE;
}

public byte getHOBAFL() {
return HOBAFL;
}

public byte getHOBAFR() {
return HOBAFR;
}

public byte getHOBAFU() {
return HOBAFU;
}

public byte getHOBAME() {
return HOBAME;
}

public short getHOBAML() {
return HOBAML;
}

public byte getHOBAMR() {
return HOBAMR;
}

public short getHOBAMU() {
return HOBAMU;
}

public byte getHOBAOE() {
return HOBAOE;
}

public short getHOBAOL() {
return HOBAOL;
}

public byte getHOBAOR() {
return HOBAOR;
}

public short getHOBAOU() {
return HOBAOU;
}

public byte getHOBAWE() {
return HOBAWE;
}

public short getHOBAWL() {
return HOBAWL;
}

public byte getHOBAWR() {
return HOBAWR;
}

public byte getHOBAWU() {
return HOBAWU;
}

public byte getHOBAYE() {
return HOBAYE;
}

public byte getHOBAYL() {
return HOBAYL;
}

public byte getHOBAYR() {
return HOBAYR;
}

public short getHOBAYU() {
return HOBAYU;
}

public byte getHOCC01() {
return HOCC01;
}

public byte getHOCC02() {
return HOCC02;
}

public byte getHOCC03() {
return HOCC03;
}

public byte getHOCC04() {
return HOCC04;
}

public byte getHOCC05() {
return HOCC05;
}

public byte getHOCC06() {
return HOCC06;
}

public byte getHOCC07() {
return HOCC07;
}

public byte getHOCC08() {
return HOCC08;
}

public byte getHOCC09() {
return HOCC09;
}

public byte getHOCC10() {
return HOCC10;
}

public byte getHOCC11() {
return HOCC11;
}

public byte getHOCC12() {
return HOCC12;
}

public byte getHOCC13() {
return HOCC13;
}

public byte getHOCC14() {
return HOCC14;
}

public byte getHOCC15() {
return HOCC15;
}

public byte getHOCC16() {
return HOCC16;
}

public byte getHOCC17() {
return HOCC17;
}

public byte getHOCC18() {
return HOCC18;
}

public byte getHOCC19() {
return HOCC19;
}

public byte getHOCC20() {
return HOCC20;
}

public byte getHOCENP() {
return HOCENP;
}

public short getHOCL() {
return HOCL;
}

public byte getHOCLE() {
return HOCLE;
}

public short getHOCLL() {
return HOCLL;
}

public byte getHOCLR() {
return HOCLR;
}

public short getHOCLU() {
return HOCLU;
}

public byte getHOEB() {
return HOEB;
}

public short getHOEBMS() {
return HOEBMS;
}

public byte getHOEBMSE() {
return HOEBMSE;
}

public byte getHOEBMSL() {
return HOEBMSL;
}

public byte getHOEBMSR() {
return HOEBMSR;
}

public byte getHOEBMSU() {
return HOEBMSU;
}

public short getHOEBMW() {
return HOEBMW;
}

public byte getHOEBMWE() {
return HOEBMWE;
}

public byte getHOEBMWL() {
return HOEBMWL;
}

public byte getHOEBMWR() {
return HOEBMWR;
}

public byte getHOEBMWU() {
return HOEBMWU;
}

public short getHOEBQS() {
return HOEBQS;
}

public byte getHOEBQSE() {
return HOEBQSE;
}

public short getHOEBQSL() {
return HOEBQSL;
}

public byte getHOEBQSR() {
return HOEBQSR;
}

public short getHOEBQSU() {
return HOEBQSU;
}

public short getHOEBQW() {
return HOEBQW;
}

public byte getHOEBQWE() {
return HOEBQWE;
}

public short getHOEBQWL() {
return HOEBQWL;
}

public byte getHOEBQWR() {
return HOEBQWR;
}

public short getHOEBQWU() {
return HOEBQWU;
}

public byte getHOED() {
return HOED;
}

public short getHOEDM() {
return HOEDM;
}

public byte getHOEDME() {
return HOEDME;
}

public byte getHOEDML() {
return HOEDML;
}

public byte getHOEDMR() {
return HOEDMR;
}

public byte getHOEDMU() {
return HOEDMU;
}

public short getHOEDQ() {
return HOEDQ;
}

public byte getHOEDQE() {
return HOEDQE;
}

public short getHOEDQL() {
return HOEDQL;
}

public byte getHOEDQR() {
return HOEDQR;
}

public short getHOEDQU() {
return HOEDQU;
}

public byte getHOEOS() {
return HOEOS;
}

public byte getHOEOSE() {
return HOEOSE;
}

public byte getHOEOSL() {
return HOEOSL;
}

public byte getHOEOSR() {
return HOEOSR;
}

public byte getHOEOSU() {
return HOEOSU;
}

public byte getHOEOW() {
return HOEOW;
}

public byte getHOEOWE() {
return HOEOWE;
}

public byte getHOEOWL() {
return HOEOWL;
}

public byte getHOEOWR() {
return HOEOWR;
}

public byte getHOEOWU() {
return HOEOWU;
}

public byte getHOEPAY() {
return HOEPAY;
}

public byte getHOEPS() {
return HOEPS;
}

public byte getHOEPSE() {
return HOEPSE;
}

public byte getHOEPSL() {
return HOEPSL;
}

public byte getHOEPSR() {
return HOEPSR;
}

public byte getHOEPSU() {
return HOEPSU;
}

public byte getHOEPW() {
return HOEPW;
}

public byte getHOEPWE() {
return HOEPWE;
}

public byte getHOEPWL() {
return HOEPWL;
}

public byte getHOEPWR() {
return HOEPWR;
}

public byte getHOEPWU() {
return HOEPWU;
}

public byte getHOFB() {
return HOFB;
}

public short getHOFBMS() {
return HOFBMS;
}

public byte getHOFBMSE() {
return HOFBMSE;
}

public byte getHOFBMSL() {
return HOFBMSL;
}

public byte getHOFBMSR() {
return HOFBMSR;
}

public byte getHOFBMSU() {
return HOFBMSU;
}

public short getHOFBMW() {
return HOFBMW;
}

public byte getHOFBMWE() {
return HOFBMWE;
}

public byte getHOFBMWL() {
return HOFBMWL;
}

public byte getHOFBMWR() {
return HOFBMWR;
}

public byte getHOFBMWU() {
return HOFBMWU;
}

public short getHOFBQS() {
return HOFBQS;
}

public byte getHOFBQSE() {
return HOFBQSE;
}

public short getHOFBQSL() {
return HOFBQSL;
}

public byte getHOFBQSR() {
return HOFBQSR;
}

public short getHOFBQSU() {
return HOFBQSU;
}

public short getHOFBQW() {
return HOFBQW;
}

public byte getHOFBQWE() {
return HOFBQWE;
}

public short getHOFBQWL() {
return HOFBQWL;
}

public byte getHOFBQWR() {
return HOFBQWR;
}

public short getHOFBQWU() {
return HOFBQWU;
}

public byte getHOFCS() {
return HOFCS;
}

public byte getHOFCSE() {
return HOFCSE;
}

public byte getHOFCSL() {
return HOFCSL;
}

public byte getHOFCSR() {
return HOFCSR;
}

public byte getHOFCSU() {
return HOFCSU;
}

public byte getHOFCW() {
return HOFCW;
}

public byte getHOFCWE() {
return HOFCWE;
}

public byte getHOFCWL() {
return HOFCWL;
}

public byte getHOFCWR() {
return HOFCWR;
}

public byte getHOFCWU() {
return HOFCWU;
}

public byte getHOFD() {
return HOFD;
}

public short getHOFDM() {
return HOFDM;
}

public byte getHOFDME() {
return HOFDME;
}

public byte getHOFDML() {
return HOFDML;
}

public byte getHOFDMR() {
return HOFDMR;
}

public byte getHOFDMU() {
return HOFDMU;
}

public short getHOFDQ() {
return HOFDQ;
}

public byte getHOFDQE() {
return HOFDQE;
}

public short getHOFDQL() {
return HOFDQL;
}

public byte getHOFDQR() {
return HOFDQR;
}

public short getHOFDQU() {
return HOFDQU;
}

public byte getHOFOIS() {
return HOFOIS;
}

public byte getHOFOISE() {
return HOFOISE;
}

public byte getHOFOISL() {
return HOFOISL;
}

public byte getHOFOISR() {
return HOFOISR;
}

public byte getHOFOISU() {
return HOFOISU;
}

public byte getHOFOIW() {
return HOFOIW;
}

public byte getHOFOIWE() {
return HOFOIWE;
}

public byte getHOFOIWL() {
return HOFOIWL;
}

public byte getHOFOIWR() {
return HOFOIWR;
}

public byte getHOFOIWU() {
return HOFOIWU;
}

public byte getHOFOODE() {
return HOFOODE;
}

public short getHOFOODL() {
return HOFOODL;
}

public byte getHOFOODR() {
return HOFOODR;
}

public short getHOFOODU() {
return HOFOODU;
}

public byte getHOFOS() {
return HOFOS;
}

public byte getHOFOSE() {
return HOFOSE;
}

public byte getHOFOSL() {
return HOFOSL;
}

public byte getHOFOSR() {
return HOFOSR;
}

public byte getHOFOSU() {
return HOFOSU;
}

public byte getHOFOW() {
return HOFOW;
}

public byte getHOFOWE() {
return HOFOWE;
}

public byte getHOFOWL() {
return HOFOWL;
}

public byte getHOFOWR() {
return HOFOWR;
}

public byte getHOFOWU() {
return HOFOWU;
}

public byte getHOFPAY() {
return HOFPAY;
}

public byte getHOFPGS() {
return HOFPGS;
}

public byte getHOFPGSE() {
return HOFPGSE;
}

public byte getHOFPGSL() {
return HOFPGSL;
}

public byte getHOFPGSR() {
return HOFPGSR;
}

public byte getHOFPGSU() {
return HOFPGSU;
}

public byte getHOFPGW() {
return HOFPGW;
}

public byte getHOFPGWE() {
return HOFPGWE;
}

public byte getHOFPGWL() {
return HOFPGWL;
}

public byte getHOFPGWR() {
return HOFPGWR;
}

public byte getHOFPGWU() {
return HOFPGWU;
}

public byte getHOFPS() {
return HOFPS;
}

public byte getHOFPSE() {
return HOFPSE;
}

public byte getHOFPSL() {
return HOFPSL;
}

public byte getHOFPSR() {
return HOFPSR;
}

public byte getHOFPSU() {
return HOFPSU;
}

public byte getHOFPW() {
return HOFPW;
}

public byte getHOFPWE() {
return HOFPWE;
}

public byte getHOFPWL() {
return HOFPWL;
}

public byte getHOFPWR() {
return HOFPWR;
}

public byte getHOFPWU() {
return HOFPWU;
}

public short getHOFSM() {
return HOFSM;
}

public byte getHOFSME() {
return HOFSME;
}

public byte getHOFSML() {
return HOFSML;
}

public byte getHOFSMR() {
return HOFSMR;
}

public byte getHOFSMU() {
return HOFSMU;
}

public byte getHOFSP() {
return HOFSP;
}

public byte getHOFSQ() {
return HOFSQ;
}

public byte getHOFSQE() {
return HOFSQE;
}

public byte getHOFSQL() {
return HOFSQL;
}

public byte getHOFSQR() {
return HOFSQR;
}

public byte getHOFSQU() {
return HOFSQU;
}

public byte getHOFSUP() {
return HOFSUP;
}

public short getHOFSW() {
return HOFSW;
}

public byte getHOFSWE() {
return HOFSWE;
}

public byte getHOFSWL() {
return HOFSWL;
}

public byte getHOFSWR() {
return HOFSWR;
}

public byte getHOFSWU() {
return HOFSWU;
}

public byte getHOFTOG() {
return HOFTOG;
}

public byte getHOFUEL1() {
return HOFUEL1;
}

public byte getHOFUEL2() {
return HOFUEL2;
}

public byte getHOFUEL3() {
return HOFUEL3;
}

public byte getHOFUEL4() {
return HOFUEL4;
}

public byte getHOFUEL5() {
return HOFUEL5;
}

public byte getHOFUEZ1() {
return HOFUEZ1;
}

public byte getHOFUEZ2() {
return HOFUEZ2;
}

public byte getHOFWS() {
return HOFWS;
}

public byte getHOFWSE() {
return HOFWSE;
}

public byte getHOFWSL() {
return HOFWSL;
}

public byte getHOFWSR() {
return HOFWSR;
}

public byte getHOFWSU() {
return HOFWSU;
}

public byte getHOFWW() {
return HOFWW;
}

public byte getHOFWWE() {
return HOFWWE;
}

public byte getHOFWWL() {
return HOFWWL;
}

public byte getHOFWWR() {
return HOFWWR;
}

public byte getHOFWWU() {
return HOFWWU;
}

public byte getHOFXS() {
return HOFXS;
}

public byte getHOFXSE() {
return HOFXSE;
}

public byte getHOFXSL() {
return HOFXSL;
}

public byte getHOFXSR() {
return HOFXSR;
}

public byte getHOFXSU() {
return HOFXSU;
}

public byte getHOFXW() {
return HOFXW;
}

public byte getHOFXWE() {
return HOFXWE;
}

public byte getHOFXWL() {
return HOFXWL;
}

public byte getHOFXWR() {
return HOFXWR;
}

public byte getHOFXWU() {
return HOFXWU;
}

public short getHOGBMS() {
return HOGBMS;
}

public byte getHOGBMSE() {
return HOGBMSE;
}

public byte getHOGBMSL() {
return HOGBMSL;
}

public byte getHOGBMSR() {
return HOGBMSR;
}

public byte getHOGBMSU() {
return HOGBMSU;
}

public short getHOGBMW() {
return HOGBMW;
}

public byte getHOGBMWE() {
return HOGBMWE;
}

public byte getHOGBMWL() {
return HOGBMWL;
}

public byte getHOGBMWR() {
return HOGBMWR;
}

public byte getHOGBMWU() {
return HOGBMWU;
}

public byte getHOGBP() {
return HOGBP;
}

public short getHOGBQS() {
return HOGBQS;
}

public byte getHOGBQSE() {
return HOGBQSE;
}

public short getHOGBQSL() {
return HOGBQSL;
}

public byte getHOGBQSR() {
return HOGBQSR;
}

public short getHOGBQSU() {
return HOGBQSU;
}

public short getHOGBQW() {
return HOGBQW;
}

public byte getHOGBQWE() {
return HOGBQWE;
}

public short getHOGBQWL() {
return HOGBQWL;
}

public byte getHOGBQWR() {
return HOGBQWR;
}

public short getHOGBQWU() {
return HOGBQWU;
}

public byte getHOGD() {
return HOGD;
}

public short getHOGDM() {
return HOGDM;
}

public byte getHOGDME() {
return HOGDME;
}

public byte getHOGDML() {
return HOGDML;
}

public byte getHOGDMR() {
return HOGDMR;
}

public byte getHOGDMU() {
return HOGDMU;
}

public short getHOGDQ() {
return HOGDQ;
}

public byte getHOGDQE() {
return HOGDQE;
}

public short getHOGDQL() {
return HOGDQL;
}

public byte getHOGDQR() {
return HOGDQR;
}

public short getHOGDQU() {
return HOGDQU;
}

public byte getHOGOS() {
return HOGOS;
}

public byte getHOGOSE() {
return HOGOSE;
}

public byte getHOGOSL() {
return HOGOSL;
}

public byte getHOGOSR() {
return HOGOSR;
}

public byte getHOGOSU() {
return HOGOSU;
}

public byte getHOGOW() {
return HOGOW;
}

public byte getHOGOWE() {
return HOGOWE;
}

public byte getHOGOWL() {
return HOGOWL;
}

public byte getHOGOWR() {
return HOGOWR;
}

public byte getHOGOWU() {
return HOGOWU;
}

public byte getHOGPAY() {
return HOGPAY;
}

public byte getHOGPS() {
return HOGPS;
}

public byte getHOGPSE() {
return HOGPSE;
}

public byte getHOGPSL() {
return HOGPSL;
}

public byte getHOGPSR() {
return HOGPSR;
}

public byte getHOGPSU() {
return HOGPSU;
}

public byte getHOGPW() {
return HOGPW;
}

public byte getHOGPWE() {
return HOGPWE;
}

public byte getHOGPWL() {
return HOGPWL;
}

public byte getHOGPWR() {
return HOGPWR;
}

public byte getHOGPWU() {
return HOGPWU;
}

public byte getHOHAV1() {
return HOHAV1;
}

public byte getHOHAV10() {
return HOHAV10;
}

public byte getHOHAV11() {
return HOHAV11;
}

public byte getHOHAV12() {
return HOHAV12;
}

public byte getHOHAV2() {
return HOHAV2;
}

public byte getHOHAV3() {
return HOHAV3;
}

public byte getHOHAV4() {
return HOHAV4;
}

public byte getHOHAV5() {
return HOHAV5;
}

public byte getHOHAV6() {
return HOHAV6;
}

public byte getHOHAV7() {
return HOHAV7;
}

public byte getHOHAV8() {
return HOHAV8;
}

public byte getHOHAV9() {
return HOHAV9;
}

public byte getHOHB1() {
return HOHB1;
}

public byte getHOHB2() {
return HOHB2;
}

public byte getHOHB3() {
return HOHB3;
}

public short getHOHBA() {
return HOHBA;
}

public byte getHOHBAFE() {
return HOHBAFE;
}

public byte getHOHBAFL() {
return HOHBAFL;
}

public byte getHOHBAFR() {
return HOHBAFR;
}

public byte getHOHBAFU() {
return HOHBAFU;
}

public byte getHOHBAME() {
return HOHBAME;
}

public short getHOHBAML() {
return HOHBAML;
}

public byte getHOHBAMR() {
return HOHBAMR;
}

public short getHOHBAMU() {
return HOHBAMU;
}

public byte getHOHBAOE() {
return HOHBAOE;
}

public byte getHOHBAOL() {
return HOHBAOL;
}

public byte getHOHBAOR() {
return HOHBAOR;
}

public short getHOHBAOU() {
return HOHBAOU;
}

public byte getHOHBAWE() {
return HOHBAWE;
}

public byte getHOHBAWL() {
return HOHBAWL;
}

public byte getHOHBAWR() {
return HOHBAWR;
}

public byte getHOHBAWU() {
return HOHBAWU;
}

public byte getHOHBAYE() {
return HOHBAYE;
}

public byte getHOHBAYL() {
return HOHBAYL;
}

public byte getHOHBAYR() {
return HOHBAYR;
}

public byte getHOHBAYU() {
return HOHBAYU;
}

public byte getHOHBCK() {
return HOHBCK;
}

public byte getHOHBEN() {
return HOHBEN;
}

public byte getHOHBM1() {
return HOHBM1;
}

public byte getHOHBM2() {
return HOHBM2;
}

public byte getHOHBM3() {
return HOHBM3;
}

public byte getHOHBP() {
return HOHBP;
}

public short getHOHV01() {
return HOHV01;
}

public byte getHOHV01E() {
return HOHV01E;
}

public short getHOHV01L() {
return HOHV01L;
}

public byte getHOHV01R() {
return HOHV01R;
}

public short getHOHV01U() {
return HOHV01U;
}

public short getHOHV02() {
return HOHV02;
}

public byte getHOHV02E() {
return HOHV02E;
}

public short getHOHV02L() {
return HOHV02L;
}

public byte getHOHV02R() {
return HOHV02R;
}

public short getHOHV02U() {
return HOHV02U;
}

public short getHOHV03() {
return HOHV03;
}

public byte getHOHV03E() {
return HOHV03E;
}

public short getHOHV03L() {
return HOHV03L;
}

public byte getHOHV03R() {
return HOHV03R;
}

public short getHOHV03U() {
return HOHV03U;
}

public short getHOHV04() {
return HOHV04;
}

public byte getHOHV04E() {
return HOHV04E;
}

public short getHOHV04L() {
return HOHV04L;
}

public byte getHOHV04R() {
return HOHV04R;
}

public short getHOHV04U() {
return HOHV04U;
}

public short getHOHV05() {
return HOHV05;
}

public byte getHOHV05E() {
return HOHV05E;
}

public short getHOHV05L() {
return HOHV05L;
}

public byte getHOHV05R() {
return HOHV05R;
}

public short getHOHV05U() {
return HOHV05U;
}

public short getHOHV06() {
return HOHV06;
}

public byte getHOHV06E() {
return HOHV06E;
}

public short getHOHV06L() {
return HOHV06L;
}

public byte getHOHV06R() {
return HOHV06R;
}

public short getHOHV06U() {
return HOHV06U;
}

public short getHOHV07() {
return HOHV07;
}

public byte getHOHV07E() {
return HOHV07E;
}

public short getHOHV07L() {
return HOHV07L;
}

public byte getHOHV07R() {
return HOHV07R;
}

public short getHOHV07U() {
return HOHV07U;
}

public short getHOHV08() {
return HOHV08;
}

public byte getHOHV08E() {
return HOHV08E;
}

public short getHOHV08L() {
return HOHV08L;
}

public byte getHOHV08R() {
return HOHV08R;
}

public short getHOHV08U() {
return HOHV08U;
}

public short getHOHV09() {
return HOHV09;
}

public byte getHOHV09E() {
return HOHV09E;
}

public short getHOHV09L() {
return HOHV09L;
}

public byte getHOHV09R() {
return HOHV09R;
}

public short getHOHV09U() {
return HOHV09U;
}

public short getHOHV10() {
return HOHV10;
}

public byte getHOHV10E() {
return HOHV10E;
}

public short getHOHV10L() {
return HOHV10L;
}

public byte getHOHV10R() {
return HOHV10R;
}

public short getHOHV10U() {
return HOHV10U;
}

public short getHOHV11() {
return HOHV11;
}

public byte getHOHV11E() {
return HOHV11E;
}

public short getHOHV11L() {
return HOHV11L;
}

public byte getHOHV11R() {
return HOHV11R;
}

public short getHOHV11U() {
return HOHV11U;
}

public short getHOHV12() {
return HOHV12;
}

public byte getHOHV12E() {
return HOHV12E;
}

public short getHOHV12L() {
return HOHV12L;
}

public byte getHOHV12R() {
return HOHV12R;
}

public short getHOHV12U() {
return HOHV12U;
}

public byte getHOHVB1() {
return HOHVB1;
}

public byte getHOHVB10() {
return HOHVB10;
}

public boolean getHOHVB11() {
return HOHVB11;
}

public boolean getHOHVB12() {
return HOHVB12;
}

public byte getHOHVB2() {
return HOHVB2;
}

public byte getHOHVB3() {
return HOHVB3;
}

public byte getHOHVB4() {
return HOHVB4;
}

public byte getHOHVB5() {
return HOHVB5;
}

public byte getHOHVB6() {
return HOHVB6;
}

public byte getHOHVB7() {
return HOHVB7;
}

public byte getHOHVB8() {
return HOHVB8;
}

public byte getHOHVB9() {
return HOHVB9;
}

public byte getHOINAM1() {
return HOINAM1;
}

public byte getHOINAM2() {
return HOINAM2;
}

public byte getHOINAM3() {
return HOINAM3;
}

public byte getHOINAM4() {
return HOINAM4;
}

public boolean getHOINAM5() {
return HOINAM5;
}

public byte getHOINC1() {
return HOINC1;
}

public byte getHOINC2() {
return HOINC2;
}

public byte getHOINC3() {
return HOINC3;
}

public boolean getHOINC4() {
return HOINC4;
}

public byte getHOINCA1() {
return HOINCA1;
}

public byte getHOINCA2() {
return HOINCA2;
}

public byte getHOINCA3() {
return HOINCA3;
}

public byte getHOINCA4() {
return HOINCA4;
}

public boolean getHOINCA5() {
return HOINCA5;
}

public byte getHOINCL1() {
return HOINCL1;
}

public byte getHOINCL2() {
return HOINCL2;
}

public byte getHOINCL3() {
return HOINCL3;
}

public byte getHOINCL4() {
return HOINCL4;
}

public boolean getHOINCL5() {
return HOINCL5;
}

public byte getHOINCM1() {
return HOINCM1;
}

public byte getHOINCM2() {
return HOINCM2;
}

public byte getHOINCM3() {
return HOINCM3;
}

public byte getHOINCM4() {
return HOINCM4;
}

public short getHOLEIS() {
return HOLEIS;
}

public byte getHOLEISE() {
return HOLEISE;
}

public short getHOLEISL() {
return HOLEISL;
}

public byte getHOLEISR() {
return HOLEISR;
}

public short getHOLEISU() {
return HOLEISU;
}

public byte getHOMEXT3() {
return HOMEXT3;
}

public byte getHOMEXT4() {
return HOMEXT4;
}

public boolean getHOMEXT5() {
return HOMEXT5;
}

public boolean getHOMEXT6() {
return HOMEXT6;
}

public boolean getHOMEXT7() {
return HOMEXT7;
}

public byte getHOMFV1() {
return HOMFV1;
}

public byte getHOMFV10() {
return HOMFV10;
}

public byte getHOMFV2() {
return HOMFV2;
}

public byte getHOMFV3() {
return HOMFV3;
}

public byte getHOMFV4() {
return HOMFV4;
}

public byte getHOMFV5() {
return HOMFV5;
}

public boolean getHOMFV6() {
return HOMFV6;
}

public boolean getHOMFV7() {
return HOMFV7;
}

public byte getHOMFV8() {
return HOMFV8;
}

public boolean getHOMFV9() {
return HOMFV9;
}

public short getHOMINC() {
return HOMINC;
}

public boolean getHOMINCE() {
return HOMINCE;
}

public boolean getHOMINCL() {
return HOMINCL;
}

public boolean getHOMINCR() {
return HOMINCR;
}

public boolean getHOMINCU() {
return HOMINCU;
}

public byte getHOMMISN() {
return HOMMISN;
}

public byte getHOMNEWN() {
return HOMNEWN;
}

public boolean getHOMNM18() {
return HOMNM18;
}

public boolean getHOMNM19() {
return HOMNM19;
}

public boolean getHOMNM28() {
return HOMNM28;
}

public boolean getHOMNM29() {
return HOMNM29;
}

public boolean getHOMNM38() {
return HOMNM38;
}

public boolean getHOMNM39() {
return HOMNM39;
}

public boolean getHOMNM48() {
return HOMNM48;
}

public boolean getHOMNM49() {
return HOMNM49;
}

public byte getHOMNRE8() {
return HOMNRE8;
}

public boolean getHOMNRE9() {
return HOMNRE9;
}

public byte getHOMNU18() {
return HOMNU18;
}

public boolean getHOMNU19() {
return HOMNU19;
}

public byte getHOMNU28() {
return HOMNU28;
}

public boolean getHOMNU29() {
return HOMNU29;
}

public byte getHOMNU38() {
return HOMNU38;
}

public boolean getHOMNU39() {
return HOMNU39;
}

public byte getHOMNU48() {
return HOMNU48;
}

public boolean getHOMNU49() {
return HOMNU49;
}

public byte getHOMREA3() {
return HOMREA3;
}

public boolean getHOMREA4() {
return HOMREA4;
}

public boolean getHOMREA5() {
return HOMREA5;
}

public boolean getHOMREA6() {
return HOMREA6;
}

public boolean getHOMREA7() {
return HOMREA7;
}

public byte getHOMREPE() {
return HOMREPE;
}

public short getHOMREPL() {
return HOMREPL;
}

public byte getHOMREPR() {
return HOMREPR;
}

public short getHOMREPU() {
return HOMREPU;
}

public byte getHOMSAM3() {
return HOMSAM3;
}

public byte getHOMSAM4() {
return HOMSAM4;
}

public byte getHOMSAM5() {
return HOMSAM5;
}

public byte getHOMSAM6() {
return HOMSAM6;
}

public byte getHOMSAM7() {
return HOMSAM7;
}

public byte getHOMTY1() {
return HOMTY1;
}

public byte getHOMTY10() {
return HOMTY10;
}

public byte getHOMTY2() {
return HOMTY2;
}

public byte getHOMTY8() {
return HOMTY8;
}

public boolean getHOMTY9() {
return HOMTY9;
}

public byte getHOMUM13() {
return HOMUM13;
}

public byte getHOMUM14() {
return HOMUM14;
}

public boolean getHOMUM15() {
return HOMUM15;
}

public boolean getHOMUM16() {
return HOMUM16;
}

public boolean getHOMUM17() {
return HOMUM17;
}

public byte getHOMUM23() {
return HOMUM23;
}

public boolean getHOMUM24() {
return HOMUM24;
}

public boolean getHOMUM25() {
return HOMUM25;
}

public boolean getHOMUM26() {
return HOMUM26;
}

public boolean getHOMUM27() {
return HOMUM27;
}

public boolean getHOMUM33() {
return HOMUM33;
}

public boolean getHOMUM34() {
return HOMUM34;
}

public boolean getHOMUM35() {
return HOMUM35;
}

public boolean getHOMUM36() {
return HOMUM36;
}

public boolean getHOMUM37() {
return HOMUM37;
}

public byte getHOMUS13() {
return HOMUS13;
}

public byte getHOMUS14() {
return HOMUS14;
}

public boolean getHOMUS15() {
return HOMUS15;
}

public boolean getHOMUS16() {
return HOMUS16;
}

public boolean getHOMUS17() {
return HOMUS17;
}

public byte getHOMUS23() {
return HOMUS23;
}

public boolean getHOMUS24() {
return HOMUS24;
}

public boolean getHOMUS25() {
return HOMUS25;
}

public boolean getHOMUS26() {
return HOMUS26;
}

public boolean getHOMUS27() {
return HOMUS27;
}

public boolean getHOMUS33() {
return HOMUS33;
}

public boolean getHOMUS34() {
return HOMUS34;
}

public boolean getHOMUS35() {
return HOMUS35;
}

public boolean getHOMUS36() {
return HOMUS36;
}

public boolean getHOMUS37() {
return HOMUS37;
}

public int getHOMWA8() {
return HOMWA8;
}

public byte getHOMWA8E() {
return HOMWA8E;
}

public int getHOMWA8L() {
return HOMWA8L;
}

public byte getHOMWA8R() {
return HOMWA8R;
}

public short getHOMWA8U() {
return HOMWA8U;
}

public boolean getHOMWA9() {
return HOMWA9;
}

public boolean getHOMWA9E() {
return HOMWA9E;
}

public boolean getHOMWA9L() {
return HOMWA9L;
}

public boolean getHOMWA9R() {
return HOMWA9R;
}

public boolean getHOMWA9U() {
return HOMWA9U;
}

public int getHOMXA3() {
return HOMXA3;
}

public byte getHOMXA3E() {
return HOMXA3E;
}

public int getHOMXA3L() {
return HOMXA3L;
}

public byte getHOMXA3R() {
return HOMXA3R;
}

public short getHOMXA3U() {
return HOMXA3U;
}

public short getHOMXA4() {
return HOMXA4;
}

public boolean getHOMXA4E() {
return HOMXA4E;
}

public boolean getHOMXA4L() {
return HOMXA4L;
}

public boolean getHOMXA4R() {
return HOMXA4R;
}

public boolean getHOMXA4U() {
return HOMXA4U;
}

public boolean getHOMXA5() {
return HOMXA5;
}

public boolean getHOMXA5E() {
return HOMXA5E;
}

public boolean getHOMXA5L() {
return HOMXA5L;
}

public boolean getHOMXA5R() {
return HOMXA5R;
}

public boolean getHOMXA5U() {
return HOMXA5U;
}

public boolean getHOMXA6() {
return HOMXA6;
}

public boolean getHOMXA6E() {
return HOMXA6E;
}

public boolean getHOMXA6L() {
return HOMXA6L;
}

public boolean getHOMXA6R() {
return HOMXA6R;
}

public boolean getHOMXA6U() {
return HOMXA6U;
}

public boolean getHOMXA7() {
return HOMXA7;
}

public boolean getHOMXA7E() {
return HOMXA7E;
}

public boolean getHOMXA7L() {
return HOMXA7L;
}

public boolean getHOMXA7R() {
return HOMXA7R;
}

public boolean getHOMXA7U() {
return HOMXA7U;
}

public byte getHOOHEA1() {
return HOOHEA1;
}

public byte getHOOHEA2() {
return HOOHEA2;
}

public byte getHOOHEA3() {
return HOOHEA3;
}

public byte getHOOHEM1() {
return HOOHEM1;
}

public byte getHOOHEM2() {
return HOOHEM2;
}

public byte getHOOHEM3() {
return HOOHEM3;
}

public byte getHOOUTFE() {
return HOOUTFE;
}

public short getHOOUTFL() {
return HOOUTFL;
}

public byte getHOOUTFR() {
return HOOUTFR;
}

public short getHOOUTFU() {
return HOOUTFU;
}

public byte getHOPAYE() {
return HOPAYE;
}

public int getHOPAYL() {
return HOPAYL;
}

public byte getHOPAYR() {
return HOPAYR;
}

public int getHOPAYU() {
return HOPAYU;
}

public byte getHOPRB1() {
return HOPRB1;
}

public boolean getHOPRB10() {
return HOPRB10;
}

public byte getHOPRB2() {
return HOPRB2;
}

public byte getHOPRB3() {
return HOPRB3;
}

public byte getHOPRB4() {
return HOPRB4;
}

public byte getHOPRB5() {
return HOPRB5;
}

public byte getHOPRB6() {
return HOPRB6;
}

public byte getHOPRB7() {
return HOPRB7;
}

public byte getHOPRB8() {
return HOPRB8;
}

public byte getHOPRB9() {
return HOPRB9;
}

public byte getHOPRM1() {
return HOPRM1;
}

public boolean getHOPRM10() {
return HOPRM10;
}

public byte getHOPRM2() {
return HOPRM2;
}

public byte getHOPRM3() {
return HOPRM3;
}

public byte getHOPRM4() {
return HOPRM4;
}

public byte getHOPRM5() {
return HOPRM5;
}

public byte getHOPRM6() {
return HOPRM6;
}

public byte getHOPRM7() {
return HOPRM7;
}

public byte getHOPRM8() {
return HOPRM8;
}

public byte getHOPRM9() {
return HOPRM9;
}

public byte getHOREBFE() {
return HOREBFE;
}

public short getHOREBFL() {
return HOREBFL;
}

public byte getHOREBFR() {
return HOREBFR;
}

public short getHOREBFU() {
return HOREBFU;
}

public byte getHOREBME() {
return HOREBME;
}

public short getHOREBML() {
return HOREBML;
}

public byte getHOREBMR() {
return HOREBMR;
}

public short getHOREBMU() {
return HOREBMU;
}

public byte getHOREBOE() {
return HOREBOE;
}

public short getHOREBOL() {
return HOREBOL;
}

public byte getHOREBOR() {
return HOREBOR;
}

public short getHOREBOU() {
return HOREBOU;
}

public byte getHOREBWE() {
return HOREBWE;
}

public short getHOREBWL() {
return HOREBWL;
}

public byte getHOREBWR() {
return HOREBWR;
}

public short getHOREBWU() {
return HOREBWU;
}

public byte getHOREBYE() {
return HOREBYE;
}

public short getHOREBYL() {
return HOREBYL;
}

public byte getHOREBYR() {
return HOREBYR;
}

public byte getHOREBYU() {
return HOREBYU;
}

public byte getHORET() {
return HORET;
}

public byte getHORFEE1() {
return HORFEE1;
}

public byte getHORFEE2() {
return HORFEE2;
}

public byte getHORFEP1() {
return HORFEP1;
}

public boolean getHORFEP2() {
return HORFEP2;
}

public byte getHORHB() {
return HORHB;
}

public byte getHORINC1() {
return HORINC1;
}

public short getHORINM() {
return HORINM;
}

public byte getHORINM1() {
return HORINM1;
}

public byte getHORINME() {
return HORINME;
}

public short getHORINML() {
return HORINML;
}

public byte getHORINMR() {
return HORINMR;
}

public short getHORINMU() {
return HORINMU;
}

public byte getHORMAIN() {
return HORMAIN;
}

public byte getHORMAM1() {
return HORMAM1;
}

public byte getHORMAM2() {
return HORMAM2;
}

public byte getHORMAM3() {
return HORMAM3;
}

public boolean getHORMAM4() {
return HORMAM4;
}

public byte getHORMO1() {
return HORMO1;
}

public byte getHORMO10() {
return HORMO10;
}

public byte getHORMO2() {
return HORMO2;
}

public byte getHORMO8() {
return HORMO8;
}

public boolean getHORMO9() {
return HORMO9;
}

public boolean getHORMOFE() {
return HORMOFE;
}

public boolean getHORMOFL() {
return HORMOFL;
}

public boolean getHORMOFR() {
return HORMOFR;
}

public boolean getHORMOFU() {
return HORMOFU;
}

public int getHORMOL() {
return HORMOL;
}

public byte getHORMOLE() {
return HORMOLE;
}

public int getHORMOLL() {
return HORMOLL;
}

public byte getHORMOLR() {
return HORMOLR;
}

public int getHORMOLU() {
return HORMOLU;
}

public boolean getHORMOME() {
return HORMOME;
}

public boolean getHORMOML() {
return HORMOML;
}

public boolean getHORMOMR() {
return HORMOMR;
}

public boolean getHORMOMU() {
return HORMOMU;
}

public boolean getHORMOOE() {
return HORMOOE;
}

public boolean getHORMOOL() {
return HORMOOL;
}

public boolean getHORMOOR() {
return HORMOOR;
}

public boolean getHORMOOU() {
return HORMOOU;
}

public boolean getHORMOWE() {
return HORMOWE;
}

public boolean getHORMOWL() {
return HORMOWL;
}

public boolean getHORMOWR() {
return HORMOWR;
}

public boolean getHORMOWU() {
return HORMOWU;
}

public boolean getHORMOYE() {
return HORMOYE;
}

public boolean getHORMOYL() {
return HORMOYL;
}

public boolean getHORMOYR() {
return HORMOYR;
}

public boolean getHORMOYU() {
return HORMOYU;
}

public byte getHORMS() {
return HORMS;
}

public short getHORMU() {
return HORMU;
}

public boolean getHORMUFE() {
return HORMUFE;
}

public boolean getHORMUFL() {
return HORMUFL;
}

public boolean getHORMUFR() {
return HORMUFR;
}

public boolean getHORMUFU() {
return HORMUFU;
}

public boolean getHORMUME() {
return HORMUME;
}

public boolean getHORMUML() {
return HORMUML;
}

public boolean getHORMUMR() {
return HORMUMR;
}

public boolean getHORMUMU() {
return HORMUMU;
}

public boolean getHORMUO() {
return HORMUO;
}

public boolean getHORMUOE() {
return HORMUOE;
}

public boolean getHORMUOL() {
return HORMUOL;
}

public boolean getHORMUOR() {
return HORMUOR;
}

public boolean getHORMUOU() {
return HORMUOU;
}

public boolean getHORMUWE() {
return HORMUWE;
}

public boolean getHORMUWL() {
return HORMUWL;
}

public boolean getHORMUWR() {
return HORMUWR;
}

public boolean getHORMUWU() {
return HORMUWU;
}

public boolean getHORMUYE() {
return HORMUYE;
}

public boolean getHORMUYL() {
return HORMUYL;
}

public boolean getHORMUYR() {
return HORMUYR;
}

public boolean getHORMUYU() {
return HORMUYU;
}

public byte getHORMV1() {
return HORMV1;
}

public byte getHORMV2() {
return HORMV2;
}

public byte getHORMV3() {
return HORMV3;
}

public byte getHORMV4() {
return HORMV4;
}

public byte getHORMVA1() {
return HORMVA1;
}

public byte getHORMVA2() {
return HORMVA2;
}

public byte getHORMVA3() {
return HORMVA3;
}

public boolean getHORMVA4() {
return HORMVA4;
}

public byte getHORMVM1() {
return HORMVM1;
}

public byte getHORMVM2() {
return HORMVM2;
}

public byte getHORMVM3() {
return HORMVM3;
}

public byte getHORMVM4() {
return HORMVM4;
}

public byte getHORPAY() {
return HORPAY;
}

public byte getHORPC() {
return HORPC;
}

public int getHORPCM() {
return HORPCM;
}

public boolean getHORPCME() {
return HORPCME;
}

public boolean getHORPCML() {
return HORPCML;
}

public boolean getHORPCMR() {
return HORPCMR;
}

public boolean getHORPCMU() {
return HORPCMU;
}

public int getHORPM() {
return HORPM;
}

public byte getHORPME() {
return HORPME;
}

public short getHORPML() {
return HORPML;
}

public byte getHORPMR() {
return HORPMR;
}

public int getHORPMU() {
return HORPMU;
}

public boolean getHORPOF() {
return HORPOF;
}

public boolean getHORPOFO() {
return HORPOFO;
}

public byte getHORPOS() {
return HORPOS;
}

public boolean getHORPOSO() {
return HORPOSO;
}

public boolean getHORRM() {
return HORRM;
}

public boolean getHORRME() {
return HORRME;
}

public boolean getHORRML() {
return HORRML;
}

public boolean getHORRMR() {
return HORRMR;
}

public boolean getHORRMU() {
return HORRMU;
}

public byte getHOSELLE() {
return HOSELLE;
}

public int getHOSELLL() {
return HOSELLL;
}

public byte getHOSELLR() {
return HOSELLR;
}

public int getHOSELLU() {
return HOSELLU;
}

public byte getHOTENST() {
return HOTENST;
}

public int getHOTRAN() {
return HOTRAN;
}

public byte getHOTRANE() {
return HOTRANE;
}

public short getHOTRANL() {
return HOTRANL;
}

public byte getHOTRANR() {
return HOTRANR;
}

public short getHOTRANU() {
return HOTRANU;
}

public byte getHOV() {
return HOV;
}

public byte getHOVAG11() {
return HOVAG11;
}

public byte getHOVAG12() {
return HOVAG12;
}

public byte getHOVAG13() {
return HOVAG13;
}

public byte getHOVAG14() {
return HOVAG14;
}

public byte getHOVAG15() {
return HOVAG15;
}

public byte getHOVAG16() {
return HOVAG16;
}

public int getHOVE1() {
return HOVE1;
}

public int getHOVE10() {
return HOVE10;
}

public byte getHOVE10E() {
return HOVE10E;
}

public short getHOVE10L() {
return HOVE10L;
}

public byte getHOVE10R() {
return HOVE10R;
}

public short getHOVE10U() {
return HOVE10U;
}

public int getHOVE1E() {
return HOVE1E;
}

public int getHOVE1L() {
return HOVE1L;
}

public byte getHOVE1R() {
return HOVE1R;
}

public int getHOVE1U() {
return HOVE1U;
}

public int getHOVE2() {
return HOVE2;
}

public short getHOVE2E() {
return HOVE2E;
}

public short getHOVE2L() {
return HOVE2L;
}

public byte getHOVE2R() {
return HOVE2R;
}

public short getHOVE2U() {
return HOVE2U;
}

public int getHOVE3() {
return HOVE3;
}

public short getHOVE3E() {
return HOVE3E;
}

public int getHOVE3L() {
return HOVE3L;
}

public byte getHOVE3R() {
return HOVE3R;
}

public int getHOVE3U() {
return HOVE3U;
}

public short getHOVE4() {
return HOVE4;
}

public byte getHOVE4E() {
return HOVE4E;
}

public short getHOVE4L() {
return HOVE4L;
}

public byte getHOVE4R() {
return HOVE4R;
}

public short getHOVE4U() {
return HOVE4U;
}

public short getHOVE5() {
return HOVE5;
}

public byte getHOVE5E() {
return HOVE5E;
}

public int getHOVE5L() {
return HOVE5L;
}

public byte getHOVE5R() {
return HOVE5R;
}

public int getHOVE5U() {
return HOVE5U;
}

public boolean getHOVE6() {
return HOVE6;
}

public boolean getHOVE6E() {
return HOVE6E;
}

public boolean getHOVE6L() {
return HOVE6L;
}

public boolean getHOVE6R() {
return HOVE6R;
}

public boolean getHOVE6U() {
return HOVE6U;
}

public boolean getHOVE7() {
return HOVE7;
}

public boolean getHOVE7E() {
return HOVE7E;
}

public boolean getHOVE7L() {
return HOVE7L;
}

public boolean getHOVE7R() {
return HOVE7R;
}

public boolean getHOVE7U() {
return HOVE7U;
}

public int getHOVE8() {
return HOVE8;
}

public byte getHOVE8E() {
return HOVE8E;
}

public short getHOVE8L() {
return HOVE8L;
}

public byte getHOVE8R() {
return HOVE8R;
}

public int getHOVE8U() {
return HOVE8U;
}

public boolean getHOVE9() {
return HOVE9;
}

public boolean getHOVE9E() {
return HOVE9E;
}

public boolean getHOVE9L() {
return HOVE9L;
}

public boolean getHOVE9R() {
return HOVE9R;
}

public boolean getHOVE9U() {
return HOVE9U;
}

public byte getHOVEHX() {
return HOVEHX;
}

public String getHOVER() {
return HOVER;
}

public String getHOVER10() {
return HOVER10;
}

public boolean getHOVER11() {
return HOVER11;
}

public String getHOVER12() {
return HOVER12;
}

public String getHOVER13() {
return HOVER13;
}

public boolean getHOVER14() {
return HOVER14;
}

public boolean getHOVER15() {
return HOVER15;
}

public String getHOVER16() {
return HOVER16;
}

public String getHOVER2() {
return HOVER2;
}

public String getHOVER3() {
return HOVER3;
}

public String getHOVER4() {
return HOVER4;
}

public String getHOVER5() {
return HOVER5;
}

public String getHOVER6() {
return HOVER6;
}

public String getHOVER7() {
return HOVER7;
}

public boolean getHOVER8() {
return HOVER8;
}

public String getHOVER9() {
return HOVER9;
}

public String getHOVLR() {
return HOVLR;
}

public String getHOVLR10() {
return HOVLR10;
}

public boolean getHOVLR11() {
return HOVLR11;
}

public boolean getHOVLR12() {
return HOVLR12;
}

public boolean getHOVLR13() {
return HOVLR13;
}

public boolean getHOVLR14() {
return HOVLR14;
}

public String getHOVLR15() {
return HOVLR15;
}

public boolean getHOVLR16() {
return HOVLR16;
}

public String getHOVLR2() {
return HOVLR2;
}

public String getHOVLR3() {
return HOVLR3;
}

public String getHOVLR4() {
return HOVLR4;
}

public String getHOVLR5() {
return HOVLR5;
}

public String getHOVLR6() {
return HOVLR6;
}

public String getHOVLR7() {
return HOVLR7;
}

public String getHOVLR8() {
return HOVLR8;
}

public String getHOVLR9() {
return HOVLR9;
}

public int getHOVM1() {
return HOVM1;
}

public int getHOVM10() {
return HOVM10;
}

public boolean getHOVM10E() {
return HOVM10E;
}

public boolean getHOVM10L() {
return HOVM10L;
}

public boolean getHOVM10R() {
return HOVM10R;
}

public boolean getHOVM10U() {
return HOVM10U;
}

public byte getHOVM1E() {
return HOVM1E;
}

public int getHOVM1L() {
return HOVM1L;
}

public byte getHOVM1R() {
return HOVM1R;
}

public int getHOVM1U() {
return HOVM1U;
}

public int getHOVM2() {
return HOVM2;
}

public byte getHOVM2E() {
return HOVM2E;
}

public int getHOVM2L() {
return HOVM2L;
}

public byte getHOVM2R() {
return HOVM2R;
}

public int getHOVM2U() {
return HOVM2U;
}

public int getHOVM3() {
return HOVM3;
}

public byte getHOVM3E() {
return HOVM3E;
}

public int getHOVM3L() {
return HOVM3L;
}

public byte getHOVM3R() {
return HOVM3R;
}

public int getHOVM3U() {
return HOVM3U;
}

public int getHOVM4() {
return HOVM4;
}

public byte getHOVM4E() {
return HOVM4E;
}

public int getHOVM4L() {
return HOVM4L;
}

public byte getHOVM4R() {
return HOVM4R;
}

public int getHOVM4U() {
return HOVM4U;
}

public short getHOVM5() {
return HOVM5;
}

public boolean getHOVM5E() {
return HOVM5E;
}

public short getHOVM5L() {
return HOVM5L;
}

public boolean getHOVM5R() {
return HOVM5R;
}

public boolean getHOVM5U() {
return HOVM5U;
}

public boolean getHOVM6() {
return HOVM6;
}

public boolean getHOVM6E() {
return HOVM6E;
}

public boolean getHOVM6L() {
return HOVM6L;
}

public boolean getHOVM6R() {
return HOVM6R;
}

public boolean getHOVM6U() {
return HOVM6U;
}

public boolean getHOVM7() {
return HOVM7;
}

public boolean getHOVM7E() {
return HOVM7E;
}

public boolean getHOVM7L() {
return HOVM7L;
}

public boolean getHOVM7R() {
return HOVM7R;
}

public boolean getHOVM7U() {
return HOVM7U;
}

public int getHOVM8() {
return HOVM8;
}

public byte getHOVM8E() {
return HOVM8E;
}

public short getHOVM8L() {
return HOVM8L;
}

public byte getHOVM8R() {
return HOVM8R;
}

public int getHOVM8U() {
return HOVM8U;
}

public short getHOVM9() {
return HOVM9;
}

public boolean getHOVM9E() {
return HOVM9E;
}

public boolean getHOVM9L() {
return HOVM9L;
}

public boolean getHOVM9R() {
return HOVM9R;
}

public boolean getHOVM9U() {
return HOVM9U;
}

public byte getHOVN() {
return HOVN;
}

public byte getHOVNO() {
return HOVNO;
}

public byte getHOVNO10() {
return HOVNO10;
}

public byte getHOVNO11() {
return HOVNO11;
}

public byte getHOVNO12() {
return HOVNO12;
}

public byte getHOVNO13() {
return HOVNO13;
}

public byte getHOVNO14() {
return HOVNO14;
}

public byte getHOVNO15() {
return HOVNO15;
}

public byte getHOVNO16() {
return HOVNO16;
}

public byte getHOVNO2() {
return HOVNO2;
}

public byte getHOVNO3() {
return HOVNO3;
}

public byte getHOVNO4() {
return HOVNO4;
}

public byte getHOVNO5() {
return HOVNO5;
}

public byte getHOVNO6() {
return HOVNO6;
}

public byte getHOVNO7() {
return HOVNO7;
}

public byte getHOVNO8() {
return HOVNO8;
}

public byte getHOVNO9() {
return HOVNO9;
}

public byte getHOVNR() {
return HOVNR;
}

public boolean getHOVNR10() {
return HOVNR10;
}

public byte getHOVNR11() {
return HOVNR11;
}

public boolean getHOVNR12() {
return HOVNR12;
}

public boolean getHOVNR13() {
return HOVNR13;
}

public byte getHOVNR14() {
return HOVNR14;
}

public boolean getHOVNR15() {
return HOVNR15;
}

public boolean getHOVNR16() {
return HOVNR16;
}

public byte getHOVNR2() {
return HOVNR2;
}

public String getHOVNR3() {
return HOVNR3;
}

public byte getHOVNR4() {
return HOVNR4;
}

public byte getHOVNR5() {
return HOVNR5;
}

public byte getHOVNR6() {
return HOVNR6;
}

public byte getHOVNR7() {
return HOVNR7;
}

public byte getHOVNR8() {
return HOVNR8;
}

public byte getHOVNR9() {
return HOVNR9;
}

public byte getHOVNW() {
return HOVNW;
}

public byte getHOVNW10() {
return HOVNW10;
}

public byte getHOVNW11() {
return HOVNW11;
}

public byte getHOVNW12() {
return HOVNW12;
}

public byte getHOVNW13() {
return HOVNW13;
}

public byte getHOVNW14() {
return HOVNW14;
}

public byte getHOVNW15() {
return HOVNW15;
}

public byte getHOVNW16() {
return HOVNW16;
}

public byte getHOVNW3() {
return HOVNW3;
}

public byte getHOVNW4() {
return HOVNW4;
}

public byte getHOVNW5() {
return HOVNW5;
}

public byte getHOVNW6() {
return HOVNW6;
}

public byte getHOVNW7() {
return HOVNW7;
}

public byte getHOVNW8() {
return HOVNW8;
}

public byte getHOVNW9() {
return HOVNW9;
}

public boolean getHOVO101() {
return HOVO101;
}

public boolean getHOVO102() {
return HOVO102;
}

public byte getHOVO11() {
return HOVO11;
}

public boolean getHOVO111() {
return HOVO111;
}

public boolean getHOVO112() {
return HOVO112;
}

public byte getHOVO12() {
return HOVO12;
}

public boolean getHOVO121() {
return HOVO121;
}

public boolean getHOVO122() {
return HOVO122;
}

public boolean getHOVO131() {
return HOVO131;
}

public boolean getHOVO132() {
return HOVO132;
}

public boolean getHOVO141() {
return HOVO141;
}

public boolean getHOVO142() {
return HOVO142;
}

public boolean getHOVO151() {
return HOVO151;
}

public boolean getHOVO152() {
return HOVO152;
}

public boolean getHOVO161() {
return HOVO161;
}

public boolean getHOVO162() {
return HOVO162;
}

public byte getHOVO21() {
return HOVO21;
}

public byte getHOVO22() {
return HOVO22;
}

public byte getHOVO31() {
return HOVO31;
}

public byte getHOVO32() {
return HOVO32;
}

public byte getHOVO41() {
return HOVO41;
}

public boolean getHOVO42() {
return HOVO42;
}

public byte getHOVO51() {
return HOVO51;
}

public boolean getHOVO52() {
return HOVO52;
}

public byte getHOVO61() {
return HOVO61;
}

public boolean getHOVO62() {
return HOVO62;
}

public byte getHOVO71() {
return HOVO71;
}

public boolean getHOVO72() {
return HOVO72;
}

public boolean getHOVO81() {
return HOVO81;
}

public boolean getHOVO82() {
return HOVO82;
}

public boolean getHOVO91() {
return HOVO91;
}

public boolean getHOVO92() {
return HOVO92;
}

public byte getHOVST() {
return HOVST;
}

public byte getHOVST10() {
return HOVST10;
}

public byte getHOVST11() {
return HOVST11;
}

public byte getHOVST12() {
return HOVST12;
}

public byte getHOVST13() {
return HOVST13;
}

public byte getHOVST14() {
return HOVST14;
}

public byte getHOVST15() {
return HOVST15;
}

public byte getHOVST16() {
return HOVST16;
}

public byte getHOVST2() {
return HOVST2;
}

public byte getHOVST3() {
return HOVST3;
}

public byte getHOVST4() {
return HOVST4;
}

public byte getHOVST5() {
return HOVST5;
}

public byte getHOVST6() {
return HOVST6;
}

public byte getHOVST7() {
return HOVST7;
}

public byte getHOVST8() {
return HOVST8;
}

public byte getHOVST9() {
return HOVST9;
}

public byte getHOVW11() {
return HOVW11;
}

public byte getHOVW12() {
return HOVW12;
}

public byte getHOVW13() {
return HOVW13;
}

public byte getHOVW14() {
return HOVW14;
}

public byte getHOVW15() {
return HOVW15;
}

public byte getHOVW16() {
return HOVW16;
}

public byte getHOVW3() {
return HOVW3;
}

public byte getHOVW4() {
return HOVW4;
}

public byte getHOVW5() {
return HOVW5;
}

public byte getHOVW6() {
return HOVW6;
}

public byte getHOVW7() {
return HOVW7;
}

public byte getHOVW8() {
return HOVW8;
}

public short getHOVYR() {
return HOVYR;
}

public short getHOVYR10() {
return HOVYR10;
}

public short getHOVYR11() {
return HOVYR11;
}

public short getHOVYR12() {
return HOVYR12;
}

public short getHOVYR13() {
return HOVYR13;
}

public short getHOVYR14() {
return HOVYR14;
}

public short getHOVYR15() {
return HOVYR15;
}

public short getHOVYR16() {
return HOVYR16;
}

public short getHOVYR2() {
return HOVYR2;
}

public short getHOVYR3() {
return HOVYR3;
}

public short getHOVYR4() {
return HOVYR4;
}

public short getHOVYR5() {
return HOVYR5;
}

public short getHOVYR6() {
return HOVYR6;
}

public short getHOVYR7() {
return HOVYR7;
}

public short getHOVYR8() {
return HOVYR8;
}

public short getHOVYR9() {
return HOVYR9;
}

public byte getHOWHN01() {
return HOWHN01;
}

public byte getHOWHN02() {
return HOWHN02;
}

public byte getHOWHN03() {
return HOWHN03;
}

public byte getHOWHN04() {
return HOWHN04;
}

public boolean getHOWHN05() {
return HOWHN05;
}

public double getHSCRP() {
return HSCRP;
}

public short getHSECLST() {
return HSECLST;
}

public boolean getHSEINT() {
return HSEINT;
}

public short getHSEYR() {
return HSEYR;
}

public double getHTFEV() {
return HTFEV;
}

public double getHTFVC() {
return HTFVC;
}

public byte getHTOK() {
return HTOK;
}

public short getHTPF() {
return HTPF;
}

public double getHTVAL() {
return HTVAL;
}

public short getIAA39() {
return IAA39;
}

public boolean getIAA39FE() {
return IAA39FE;
}

public boolean getIAA39FL() {
return IAA39FL;
}

public boolean getIAA39FR() {
return IAA39FR;
}

public boolean getIAA39FU() {
return IAA39FU;
}

public byte getIAA39ME() {
return IAA39ME;
}

public short getIAA39ML() {
return IAA39ML;
}

public boolean getIAA39MR() {
return IAA39MR;
}

public short getIAA39MU() {
return IAA39MU;
}

public byte getIAA39OE() {
return IAA39OE;
}

public boolean getIAA39OL() {
return IAA39OL;
}

public byte getIAA39OR() {
return IAA39OR;
}

public short getIAA39OU() {
return IAA39OU;
}

public byte getIAA39WE() {
return IAA39WE;
}

public boolean getIAA39WL() {
return IAA39WL;
}

public boolean getIAA39WR() {
return IAA39WR;
}

public boolean getIAA39WU() {
return IAA39WU;
}

public boolean getIAA39YE() {
return IAA39YE;
}

public boolean getIAA39YL() {
return IAA39YL;
}

public boolean getIAA39YR() {
return IAA39YR;
}

public boolean getIAA39YU() {
return IAA39YU;
}

public short getIAA40() {
return IAA40;
}

public boolean getIAA40FE() {
return IAA40FE;
}

public boolean getIAA40FL() {
return IAA40FL;
}

public boolean getIAA40FR() {
return IAA40FR;
}

public boolean getIAA40FU() {
return IAA40FU;
}

public byte getIAA40ME() {
return IAA40ME;
}

public short getIAA40ML() {
return IAA40ML;
}

public boolean getIAA40MR() {
return IAA40MR;
}

public short getIAA40MU() {
return IAA40MU;
}

public byte getIAA40OE() {
return IAA40OE;
}

public short getIAA40OL() {
return IAA40OL;
}

public byte getIAA40OR() {
return IAA40OR;
}

public short getIAA40OU() {
return IAA40OU;
}

public boolean getIAA40WE() {
return IAA40WE;
}

public boolean getIAA40WL() {
return IAA40WL;
}

public boolean getIAA40WR() {
return IAA40WR;
}

public boolean getIAA40WU() {
return IAA40WU;
}

public boolean getIAA40YE() {
return IAA40YE;
}

public boolean getIAA40YL() {
return IAA40YL;
}

public boolean getIAA40YR() {
return IAA40YR;
}

public boolean getIAA40YU() {
return IAA40YU;
}

public short getIAA41() {
return IAA41;
}

public byte getIAA41FE() {
return IAA41FE;
}

public short getIAA41FL() {
return IAA41FL;
}

public byte getIAA41FR() {
return IAA41FR;
}

public short getIAA41FU() {
return IAA41FU;
}

public boolean getIAA41ME() {
return IAA41ME;
}

public boolean getIAA41ML() {
return IAA41ML;
}

public boolean getIAA41MR() {
return IAA41MR;
}

public short getIAA41MU() {
return IAA41MU;
}

public byte getIAA41OE() {
return IAA41OE;
}

public short getIAA41OL() {
return IAA41OL;
}

public byte getIAA41OR() {
return IAA41OR;
}

public short getIAA41OU() {
return IAA41OU;
}

public byte getIAA41WE() {
return IAA41WE;
}

public byte getIAA41WL() {
return IAA41WL;
}

public byte getIAA41WR() {
return IAA41WR;
}

public byte getIAA41WU() {
return IAA41WU;
}

public boolean getIAA41YE() {
return IAA41YE;
}

public boolean getIAA41YL() {
return IAA41YL;
}

public boolean getIAA41YR() {
return IAA41YR;
}

public boolean getIAA41YU() {
return IAA41YU;
}

public short getIAA42() {
return IAA42;
}

public boolean getIAA42FE() {
return IAA42FE;
}

public boolean getIAA42FL() {
return IAA42FL;
}

public boolean getIAA42FR() {
return IAA42FR;
}

public boolean getIAA42FU() {
return IAA42FU;
}

public byte getIAA42ME() {
return IAA42ME;
}

public short getIAA42ML() {
return IAA42ML;
}

public byte getIAA42MR() {
return IAA42MR;
}

public short getIAA42MU() {
return IAA42MU;
}

public byte getIAA42OE() {
return IAA42OE;
}

public short getIAA42OL() {
return IAA42OL;
}

public byte getIAA42OR() {
return IAA42OR;
}

public short getIAA42OU() {
return IAA42OU;
}

public byte getIAA42WE() {
return IAA42WE;
}

public short getIAA42WL() {
return IAA42WL;
}

public byte getIAA42WR() {
return IAA42WR;
}

public short getIAA42WU() {
return IAA42WU;
}

public boolean getIAA42YE() {
return IAA42YE;
}

public boolean getIAA42YL() {
return IAA42YL;
}

public boolean getIAA42YR() {
return IAA42YR;
}

public short getIAA42YU() {
return IAA42YU;
}

public short getIAA43() {
return IAA43;
}

public boolean getIAA43FE() {
return IAA43FE;
}

public boolean getIAA43FL() {
return IAA43FL;
}

public boolean getIAA43FR() {
return IAA43FR;
}

public boolean getIAA43FU() {
return IAA43FU;
}

public byte getIAA43ME() {
return IAA43ME;
}

public short getIAA43ML() {
return IAA43ML;
}

public byte getIAA43MR() {
return IAA43MR;
}

public short getIAA43MU() {
return IAA43MU;
}

public byte getIAA43OE() {
return IAA43OE;
}

public byte getIAA43OL() {
return IAA43OL;
}

public byte getIAA43OR() {
return IAA43OR;
}

public short getIAA43OU() {
return IAA43OU;
}

public byte getIAA43WE() {
return IAA43WE;
}

public boolean getIAA43WL() {
return IAA43WL;
}

public boolean getIAA43WR() {
return IAA43WR;
}

public boolean getIAA43WU() {
return IAA43WU;
}

public boolean getIAA43YE() {
return IAA43YE;
}

public boolean getIAA43YL() {
return IAA43YL;
}

public boolean getIAA43YR() {
return IAA43YR;
}

public boolean getIAA43YU() {
return IAA43YU;
}

public short getIAA44() {
return IAA44;
}

public boolean getIAA44FE() {
return IAA44FE;
}

public boolean getIAA44FL() {
return IAA44FL;
}

public boolean getIAA44FR() {
return IAA44FR;
}

public boolean getIAA44FU() {
return IAA44FU;
}

public byte getIAA44ME() {
return IAA44ME;
}

public short getIAA44ML() {
return IAA44ML;
}

public boolean getIAA44MR() {
return IAA44MR;
}

public short getIAA44MU() {
return IAA44MU;
}

public byte getIAA44OE() {
return IAA44OE;
}

public short getIAA44OL() {
return IAA44OL;
}

public byte getIAA44OR() {
return IAA44OR;
}

public short getIAA44OU() {
return IAA44OU;
}

public byte getIAA44WE() {
return IAA44WE;
}

public boolean getIAA44WL() {
return IAA44WL;
}

public byte getIAA44WR() {
return IAA44WR;
}

public byte getIAA44WU() {
return IAA44WU;
}

public boolean getIAA44YE() {
return IAA44YE;
}

public boolean getIAA44YL() {
return IAA44YL;
}

public boolean getIAA44YR() {
return IAA44YR;
}

public boolean getIAA44YU() {
return IAA44YU;
}

public short getIAA45() {
return IAA45;
}

public boolean getIAA45FE() {
return IAA45FE;
}

public boolean getIAA45FL() {
return IAA45FL;
}

public boolean getIAA45FR() {
return IAA45FR;
}

public boolean getIAA45FU() {
return IAA45FU;
}

public byte getIAA45ME() {
return IAA45ME;
}

public short getIAA45ML() {
return IAA45ML;
}

public byte getIAA45MR() {
return IAA45MR;
}

public short getIAA45MU() {
return IAA45MU;
}

public byte getIAA45OE() {
return IAA45OE;
}

public short getIAA45OL() {
return IAA45OL;
}

public byte getIAA45OR() {
return IAA45OR;
}

public short getIAA45OU() {
return IAA45OU;
}

public byte getIAA45WE() {
return IAA45WE;
}

public byte getIAA45WL() {
return IAA45WL;
}

public byte getIAA45WR() {
return IAA45WR;
}

public short getIAA45WU() {
return IAA45WU;
}

public boolean getIAA45YE() {
return IAA45YE;
}

public boolean getIAA45YL() {
return IAA45YL;
}

public boolean getIAA45YR() {
return IAA45YR;
}

public boolean getIAA45YU() {
return IAA45YU;
}

public short getIAA46() {
return IAA46;
}

public boolean getIAA46FE() {
return IAA46FE;
}

public short getIAA46FL() {
return IAA46FL;
}

public boolean getIAA46FR() {
return IAA46FR;
}

public short getIAA46FU() {
return IAA46FU;
}

public byte getIAA46ME() {
return IAA46ME;
}

public short getIAA46ML() {
return IAA46ML;
}

public byte getIAA46MR() {
return IAA46MR;
}

public short getIAA46MU() {
return IAA46MU;
}

public byte getIAA46OE() {
return IAA46OE;
}

public short getIAA46OL() {
return IAA46OL;
}

public byte getIAA46OR() {
return IAA46OR;
}

public short getIAA46OU() {
return IAA46OU;
}

public byte getIAA46WE() {
return IAA46WE;
}

public byte getIAA46WL() {
return IAA46WL;
}

public boolean getIAA46WR() {
return IAA46WR;
}

public byte getIAA46WU() {
return IAA46WU;
}

public boolean getIAA46YE() {
return IAA46YE;
}

public boolean getIAA46YL() {
return IAA46YL;
}

public boolean getIAA46YR() {
return IAA46YR;
}

public boolean getIAA46YU() {
return IAA46YU;
}

public short getIAA47() {
return IAA47;
}

public boolean getIAA47FE() {
return IAA47FE;
}

public boolean getIAA47FL() {
return IAA47FL;
}

public boolean getIAA47FR() {
return IAA47FR;
}

public boolean getIAA47FU() {
return IAA47FU;
}

public byte getIAA47ME() {
return IAA47ME;
}

public short getIAA47ML() {
return IAA47ML;
}

public boolean getIAA47MR() {
return IAA47MR;
}

public short getIAA47MU() {
return IAA47MU;
}

public byte getIAA47OE() {
return IAA47OE;
}

public short getIAA47OL() {
return IAA47OL;
}

public byte getIAA47OR() {
return IAA47OR;
}

public short getIAA47OU() {
return IAA47OU;
}

public byte getIAA47WE() {
return IAA47WE;
}

public byte getIAA47WL() {
return IAA47WL;
}

public byte getIAA47WR() {
return IAA47WR;
}

public byte getIAA47WU() {
return IAA47WU;
}

public boolean getIAA47YE() {
return IAA47YE;
}

public boolean getIAA47YL() {
return IAA47YL;
}

public boolean getIAA47YR() {
return IAA47YR;
}

public short getIAA47YU() {
return IAA47YU;
}

public short getIAA48() {
return IAA48;
}

public boolean getIAA48FE() {
return IAA48FE;
}

public boolean getIAA48FL() {
return IAA48FL;
}

public boolean getIAA48FR() {
return IAA48FR;
}

public boolean getIAA48FU() {
return IAA48FU;
}

public boolean getIAA48ME() {
return IAA48ME;
}

public boolean getIAA48ML() {
return IAA48ML;
}

public boolean getIAA48MR() {
return IAA48MR;
}

public short getIAA48MU() {
return IAA48MU;
}

public byte getIAA48OE() {
return IAA48OE;
}

public short getIAA48OL() {
return IAA48OL;
}

public byte getIAA48OR() {
return IAA48OR;
}

public short getIAA48OU() {
return IAA48OU;
}

public byte getIAA48WE() {
return IAA48WE;
}

public byte getIAA48WL() {
return IAA48WL;
}

public boolean getIAA48WR() {
return IAA48WR;
}

public short getIAA48WU() {
return IAA48WU;
}

public boolean getIAA48YE() {
return IAA48YE;
}

public boolean getIAA48YL() {
return IAA48YL;
}

public boolean getIAA48YR() {
return IAA48YR;
}

public boolean getIAA48YU() {
return IAA48YU;
}

public short getIAA49() {
return IAA49;
}

public boolean getIAA49FE() {
return IAA49FE;
}

public boolean getIAA49FL() {
return IAA49FL;
}

public boolean getIAA49FR() {
return IAA49FR;
}

public boolean getIAA49FU() {
return IAA49FU;
}

public boolean getIAA49ME() {
return IAA49ME;
}

public boolean getIAA49ML() {
return IAA49ML;
}

public boolean getIAA49MR() {
return IAA49MR;
}

public short getIAA49MU() {
return IAA49MU;
}

public boolean getIAA49OE() {
return IAA49OE;
}

public boolean getIAA49OL() {
return IAA49OL;
}

public boolean getIAA49OR() {
return IAA49OR;
}

public short getIAA49OU() {
return IAA49OU;
}

public boolean getIAA49WE() {
return IAA49WE;
}

public boolean getIAA49WL() {
return IAA49WL;
}

public boolean getIAA49WR() {
return IAA49WR;
}

public boolean getIAA49WU() {
return IAA49WU;
}

public boolean getIAA49YE() {
return IAA49YE;
}

public boolean getIAA49YL() {
return IAA49YL;
}

public boolean getIAA49YR() {
return IAA49YR;
}

public boolean getIAA49YU() {
return IAA49YU;
}

public short getIAA50() {
return IAA50;
}

public boolean getIAA50FE() {
return IAA50FE;
}

public boolean getIAA50FL() {
return IAA50FL;
}

public boolean getIAA50FR() {
return IAA50FR;
}

public boolean getIAA50FU() {
return IAA50FU;
}

public boolean getIAA50ME() {
return IAA50ME;
}

public boolean getIAA50ML() {
return IAA50ML;
}

public boolean getIAA50MR() {
return IAA50MR;
}

public boolean getIAA50MU() {
return IAA50MU;
}

public boolean getIAA50OE() {
return IAA50OE;
}

public boolean getIAA50OL() {
return IAA50OL;
}

public boolean getIAA50OR() {
return IAA50OR;
}

public boolean getIAA50OU() {
return IAA50OU;
}

public byte getIAA50WE() {
return IAA50WE;
}

public byte getIAA50WL() {
return IAA50WL;
}

public byte getIAA50WR() {
return IAA50WR;
}

public byte getIAA50WU() {
return IAA50WU;
}

public boolean getIAA50YE() {
return IAA50YE;
}

public boolean getIAA50YL() {
return IAA50YL;
}

public boolean getIAA50YR() {
return IAA50YR;
}

public boolean getIAA50YU() {
return IAA50YU;
}

public short getIAA51() {
return IAA51;
}

public boolean getIAA51FE() {
return IAA51FE;
}

public boolean getIAA51FL() {
return IAA51FL;
}

public boolean getIAA51FR() {
return IAA51FR;
}

public boolean getIAA51FU() {
return IAA51FU;
}

public boolean getIAA51ME() {
return IAA51ME;
}

public boolean getIAA51ML() {
return IAA51ML;
}

public boolean getIAA51MR() {
return IAA51MR;
}

public boolean getIAA51MU() {
return IAA51MU;
}

public byte getIAA51OE() {
return IAA51OE;
}

public short getIAA51OL() {
return IAA51OL;
}

public byte getIAA51OR() {
return IAA51OR;
}

public short getIAA51OU() {
return IAA51OU;
}

public boolean getIAA51WE() {
return IAA51WE;
}

public boolean getIAA51WL() {
return IAA51WL;
}

public boolean getIAA51WR() {
return IAA51WR;
}

public boolean getIAA51WU() {
return IAA51WU;
}

public boolean getIAA51YE() {
return IAA51YE;
}

public boolean getIAA51YL() {
return IAA51YL;
}

public boolean getIAA51YR() {
return IAA51YR;
}

public boolean getIAA51YU() {
return IAA51YU;
}

public short getIAA52() {
return IAA52;
}

public boolean getIAA52FE() {
return IAA52FE;
}

public boolean getIAA52FL() {
return IAA52FL;
}

public boolean getIAA52FR() {
return IAA52FR;
}

public boolean getIAA52FU() {
return IAA52FU;
}

public boolean getIAA52ME() {
return IAA52ME;
}

public boolean getIAA52ML() {
return IAA52ML;
}

public boolean getIAA52MR() {
return IAA52MR;
}

public short getIAA52MU() {
return IAA52MU;
}

public byte getIAA52OE() {
return IAA52OE;
}

public boolean getIAA52OL() {
return IAA52OL;
}

public byte getIAA52OR() {
return IAA52OR;
}

public short getIAA52OU() {
return IAA52OU;
}

public boolean getIAA52WE() {
return IAA52WE;
}

public boolean getIAA52WL() {
return IAA52WL;
}

public boolean getIAA52WR() {
return IAA52WR;
}

public boolean getIAA52WU() {
return IAA52WU;
}

public boolean getIAA52YE() {
return IAA52YE;
}

public boolean getIAA52YL() {
return IAA52YL;
}

public boolean getIAA52YR() {
return IAA52YR;
}

public boolean getIAA52YU() {
return IAA52YU;
}

public short getIAA53() {
return IAA53;
}

public boolean getIAA53FE() {
return IAA53FE;
}

public boolean getIAA53FL() {
return IAA53FL;
}

public boolean getIAA53FR() {
return IAA53FR;
}

public boolean getIAA53FU() {
return IAA53FU;
}

public boolean getIAA53ME() {
return IAA53ME;
}

public boolean getIAA53ML() {
return IAA53ML;
}

public boolean getIAA53MR() {
return IAA53MR;
}

public short getIAA53MU() {
return IAA53MU;
}

public byte getIAA53OE() {
return IAA53OE;
}

public boolean getIAA53OL() {
return IAA53OL;
}

public byte getIAA53OR() {
return IAA53OR;
}

public short getIAA53OU() {
return IAA53OU;
}

public byte getIAA53WE() {
return IAA53WE;
}

public boolean getIAA53WL() {
return IAA53WL;
}

public byte getIAA53WR() {
return IAA53WR;
}

public byte getIAA53WU() {
return IAA53WU;
}

public boolean getIAA53YE() {
return IAA53YE;
}

public boolean getIAA53YL() {
return IAA53YL;
}

public boolean getIAA53YR() {
return IAA53YR;
}

public boolean getIAA53YU() {
return IAA53YU;
}

public short getIAA54() {
return IAA54;
}

public boolean getIAA54FE() {
return IAA54FE;
}

public boolean getIAA54FL() {
return IAA54FL;
}

public boolean getIAA54FR() {
return IAA54FR;
}

public boolean getIAA54FU() {
return IAA54FU;
}

public boolean getIAA54ME() {
return IAA54ME;
}

public short getIAA54ML() {
return IAA54ML;
}

public boolean getIAA54MR() {
return IAA54MR;
}

public short getIAA54MU() {
return IAA54MU;
}

public byte getIAA54OE() {
return IAA54OE;
}

public short getIAA54OL() {
return IAA54OL;
}

public byte getIAA54OR() {
return IAA54OR;
}

public short getIAA54OU() {
return IAA54OU;
}

public boolean getIAA54WE() {
return IAA54WE;
}

public boolean getIAA54WL() {
return IAA54WL;
}

public boolean getIAA54WR() {
return IAA54WR;
}

public boolean getIAA54WU() {
return IAA54WU;
}

public boolean getIAA54YE() {
return IAA54YE;
}

public boolean getIAA54YL() {
return IAA54YL;
}

public boolean getIAA54YR() {
return IAA54YR;
}

public short getIAA54YU() {
return IAA54YU;
}

public short getIAA55() {
return IAA55;
}

public byte getIAA55FE() {
return IAA55FE;
}

public byte getIAA55FL() {
return IAA55FL;
}

public boolean getIAA55FR() {
return IAA55FR;
}

public byte getIAA55FU() {
return IAA55FU;
}

public boolean getIAA55ME() {
return IAA55ME;
}

public short getIAA55ML() {
return IAA55ML;
}

public boolean getIAA55MR() {
return IAA55MR;
}

public short getIAA55MU() {
return IAA55MU;
}

public byte getIAA55OE() {
return IAA55OE;
}

public short getIAA55OL() {
return IAA55OL;
}

public byte getIAA55OR() {
return IAA55OR;
}

public short getIAA55OU() {
return IAA55OU;
}

public byte getIAA55WE() {
return IAA55WE;
}

public short getIAA55WL() {
return IAA55WL;
}

public byte getIAA55WR() {
return IAA55WR;
}

public short getIAA55WU() {
return IAA55WU;
}

public boolean getIAA55YE() {
return IAA55YE;
}

public boolean getIAA55YL() {
return IAA55YL;
}

public boolean getIAA55YR() {
return IAA55YR;
}

public boolean getIAA55YU() {
return IAA55YU;
}

public short getIAA56() {
return IAA56;
}

public boolean getIAA56FE() {
return IAA56FE;
}

public boolean getIAA56FL() {
return IAA56FL;
}

public boolean getIAA56FR() {
return IAA56FR;
}

public boolean getIAA56FU() {
return IAA56FU;
}

public boolean getIAA56ME() {
return IAA56ME;
}

public short getIAA56ML() {
return IAA56ML;
}

public boolean getIAA56MR() {
return IAA56MR;
}

public short getIAA56MU() {
return IAA56MU;
}

public byte getIAA56OE() {
return IAA56OE;
}

public byte getIAA56OL() {
return IAA56OL;
}

public byte getIAA56OR() {
return IAA56OR;
}

public short getIAA56OU() {
return IAA56OU;
}

public byte getIAA56WE() {
return IAA56WE;
}

public byte getIAA56WL() {
return IAA56WL;
}

public byte getIAA56WR() {
return IAA56WR;
}

public byte getIAA56WU() {
return IAA56WU;
}

public boolean getIAA56YE() {
return IAA56YE;
}

public boolean getIAA56YL() {
return IAA56YL;
}

public boolean getIAA56YR() {
return IAA56YR;
}

public boolean getIAA56YU() {
return IAA56YU;
}

public short getIAA57() {
return IAA57;
}

public boolean getIAA57FE() {
return IAA57FE;
}

public boolean getIAA57FL() {
return IAA57FL;
}

public boolean getIAA57FR() {
return IAA57FR;
}

public boolean getIAA57FU() {
return IAA57FU;
}

public boolean getIAA57ME() {
return IAA57ME;
}

public boolean getIAA57ML() {
return IAA57ML;
}

public boolean getIAA57MR() {
return IAA57MR;
}

public boolean getIAA57MU() {
return IAA57MU;
}

public boolean getIAA57OE() {
return IAA57OE;
}

public boolean getIAA57OL() {
return IAA57OL;
}

public boolean getIAA57OR() {
return IAA57OR;
}

public short getIAA57OU() {
return IAA57OU;
}

public boolean getIAA57WE() {
return IAA57WE;
}

public boolean getIAA57WL() {
return IAA57WL;
}

public boolean getIAA57WR() {
return IAA57WR;
}

public boolean getIAA57WU() {
return IAA57WU;
}

public boolean getIAA57YE() {
return IAA57YE;
}

public boolean getIAA57YL() {
return IAA57YL;
}

public boolean getIAA57YR() {
return IAA57YR;
}

public boolean getIAA57YU() {
return IAA57YU;
}

public short getIAA58() {
return IAA58;
}

public boolean getIAA58FE() {
return IAA58FE;
}

public boolean getIAA58FL() {
return IAA58FL;
}

public boolean getIAA58FR() {
return IAA58FR;
}

public boolean getIAA58FU() {
return IAA58FU;
}

public boolean getIAA58ME() {
return IAA58ME;
}

public boolean getIAA58ML() {
return IAA58ML;
}

public boolean getIAA58MR() {
return IAA58MR;
}

public boolean getIAA58MU() {
return IAA58MU;
}

public boolean getIAA58OE() {
return IAA58OE;
}

public boolean getIAA58OL() {
return IAA58OL;
}

public boolean getIAA58OR() {
return IAA58OR;
}

public boolean getIAA58OU() {
return IAA58OU;
}

public boolean getIAA58WE() {
return IAA58WE;
}

public boolean getIAA58WL() {
return IAA58WL;
}

public boolean getIAA58WR() {
return IAA58WR;
}

public boolean getIAA58WU() {
return IAA58WU;
}

public boolean getIAA58YE() {
return IAA58YE;
}

public boolean getIAA58YL() {
return IAA58YL;
}

public boolean getIAA58YR() {
return IAA58YR;
}

public boolean getIAA58YU() {
return IAA58YU;
}

public short getIAA59() {
return IAA59;
}

public boolean getIAA59FE() {
return IAA59FE;
}

public boolean getIAA59FL() {
return IAA59FL;
}

public boolean getIAA59FR() {
return IAA59FR;
}

public boolean getIAA59FU() {
return IAA59FU;
}

public boolean getIAA59ME() {
return IAA59ME;
}

public boolean getIAA59ML() {
return IAA59ML;
}

public boolean getIAA59MR() {
return IAA59MR;
}

public boolean getIAA59MU() {
return IAA59MU;
}

public boolean getIAA59OE() {
return IAA59OE;
}

public boolean getIAA59OL() {
return IAA59OL;
}

public boolean getIAA59OR() {
return IAA59OR;
}

public boolean getIAA59OU() {
return IAA59OU;
}

public boolean getIAA59WE() {
return IAA59WE;
}

public boolean getIAA59WL() {
return IAA59WL;
}

public boolean getIAA59WR() {
return IAA59WR;
}

public boolean getIAA59WU() {
return IAA59WU;
}

public boolean getIAA59YE() {
return IAA59YE;
}

public boolean getIAA59YL() {
return IAA59YL;
}

public boolean getIAA59YR() {
return IAA59YR;
}

public boolean getIAA59YU() {
return IAA59YU;
}

public short getIAA60() {
return IAA60;
}

public boolean getIAA60FE() {
return IAA60FE;
}

public boolean getIAA60FL() {
return IAA60FL;
}

public boolean getIAA60FR() {
return IAA60FR;
}

public boolean getIAA60FU() {
return IAA60FU;
}

public byte getIAA60ME() {
return IAA60ME;
}

public boolean getIAA60ML() {
return IAA60ML;
}

public boolean getIAA60MR() {
return IAA60MR;
}

public short getIAA60MU() {
return IAA60MU;
}

public byte getIAA60OE() {
return IAA60OE;
}

public short getIAA60OL() {
return IAA60OL;
}

public boolean getIAA60OR() {
return IAA60OR;
}

public short getIAA60OU() {
return IAA60OU;
}

public boolean getIAA60WE() {
return IAA60WE;
}

public boolean getIAA60WL() {
return IAA60WL;
}

public boolean getIAA60WR() {
return IAA60WR;
}

public boolean getIAA60WU() {
return IAA60WU;
}

public boolean getIAA60YE() {
return IAA60YE;
}

public boolean getIAA60YL() {
return IAA60YL;
}

public boolean getIAA60YR() {
return IAA60YR;
}

public boolean getIAA60YU() {
return IAA60YU;
}

public short getIAA61() {
return IAA61;
}

public boolean getIAA61FE() {
return IAA61FE;
}

public boolean getIAA61FL() {
return IAA61FL;
}

public boolean getIAA61FR() {
return IAA61FR;
}

public boolean getIAA61FU() {
return IAA61FU;
}

public byte getIAA61ME() {
return IAA61ME;
}

public short getIAA61ML() {
return IAA61ML;
}

public boolean getIAA61MR() {
return IAA61MR;
}

public short getIAA61MU() {
return IAA61MU;
}

public byte getIAA61OE() {
return IAA61OE;
}

public boolean getIAA61OL() {
return IAA61OL;
}

public byte getIAA61OR() {
return IAA61OR;
}

public short getIAA61OU() {
return IAA61OU;
}

public boolean getIAA61WE() {
return IAA61WE;
}

public boolean getIAA61WL() {
return IAA61WL;
}

public boolean getIAA61WR() {
return IAA61WR;
}

public boolean getIAA61WU() {
return IAA61WU;
}

public boolean getIAA61YE() {
return IAA61YE;
}

public boolean getIAA61YL() {
return IAA61YL;
}

public boolean getIAA61YR() {
return IAA61YR;
}

public boolean getIAA61YU() {
return IAA61YU;
}

public short getIAA62() {
return IAA62;
}

public boolean getIAA62FE() {
return IAA62FE;
}

public boolean getIAA62FL() {
return IAA62FL;
}

public boolean getIAA62FR() {
return IAA62FR;
}

public boolean getIAA62FU() {
return IAA62FU;
}

public boolean getIAA62ME() {
return IAA62ME;
}

public boolean getIAA62ML() {
return IAA62ML;
}

public boolean getIAA62MR() {
return IAA62MR;
}

public short getIAA62MU() {
return IAA62MU;
}

public byte getIAA62OE() {
return IAA62OE;
}

public short getIAA62OL() {
return IAA62OL;
}

public byte getIAA62OR() {
return IAA62OR;
}

public short getIAA62OU() {
return IAA62OU;
}

public boolean getIAA62WE() {
return IAA62WE;
}

public boolean getIAA62WL() {
return IAA62WL;
}

public boolean getIAA62WR() {
return IAA62WR;
}

public boolean getIAA62WU() {
return IAA62WU;
}

public boolean getIAA62YE() {
return IAA62YE;
}

public boolean getIAA62YL() {
return IAA62YL;
}

public boolean getIAA62YR() {
return IAA62YR;
}

public boolean getIAA62YU() {
return IAA62YU;
}

public short getIAA63() {
return IAA63;
}

public boolean getIAA63FE() {
return IAA63FE;
}

public boolean getIAA63FL() {
return IAA63FL;
}

public boolean getIAA63FR() {
return IAA63FR;
}

public boolean getIAA63FU() {
return IAA63FU;
}

public boolean getIAA63ME() {
return IAA63ME;
}

public boolean getIAA63ML() {
return IAA63ML;
}

public boolean getIAA63MR() {
return IAA63MR;
}

public boolean getIAA63MU() {
return IAA63MU;
}

public boolean getIAA63OE() {
return IAA63OE;
}

public boolean getIAA63OL() {
return IAA63OL;
}

public boolean getIAA63OR() {
return IAA63OR;
}

public boolean getIAA63OU() {
return IAA63OU;
}

public boolean getIAA63WE() {
return IAA63WE;
}

public boolean getIAA63WL() {
return IAA63WL;
}

public boolean getIAA63WR() {
return IAA63WR;
}

public boolean getIAA63WU() {
return IAA63WU;
}

public boolean getIAA63YE() {
return IAA63YE;
}

public boolean getIAA63YL() {
return IAA63YL;
}

public boolean getIAA63YR() {
return IAA63YR;
}

public boolean getIAA63YU() {
return IAA63YU;
}

public short getIAA64() {
return IAA64;
}

public boolean getIAA64FE() {
return IAA64FE;
}

public boolean getIAA64FL() {
return IAA64FL;
}

public boolean getIAA64FR() {
return IAA64FR;
}

public boolean getIAA64FU() {
return IAA64FU;
}

public boolean getIAA64ME() {
return IAA64ME;
}

public boolean getIAA64ML() {
return IAA64ML;
}

public boolean getIAA64MR() {
return IAA64MR;
}

public short getIAA64MU() {
return IAA64MU;
}

public boolean getIAA64OE() {
return IAA64OE;
}

public boolean getIAA64OL() {
return IAA64OL;
}

public byte getIAA64OR() {
return IAA64OR;
}

public short getIAA64OU() {
return IAA64OU;
}

public boolean getIAA64WE() {
return IAA64WE;
}

public boolean getIAA64WL() {
return IAA64WL;
}

public boolean getIAA64WR() {
return IAA64WR;
}

public boolean getIAA64WU() {
return IAA64WU;
}

public boolean getIAA64YE() {
return IAA64YE;
}

public boolean getIAA64YL() {
return IAA64YL;
}

public boolean getIAA64YR() {
return IAA64YR;
}

public boolean getIAA64YU() {
return IAA64YU;
}

public short getIAA65() {
return IAA65;
}

public boolean getIAA65FE() {
return IAA65FE;
}

public boolean getIAA65FL() {
return IAA65FL;
}

public boolean getIAA65FR() {
return IAA65FR;
}

public boolean getIAA65FU() {
return IAA65FU;
}

public byte getIAA65ME() {
return IAA65ME;
}

public short getIAA65ML() {
return IAA65ML;
}

public byte getIAA65MR() {
return IAA65MR;
}

public short getIAA65MU() {
return IAA65MU;
}

public boolean getIAA65OE() {
return IAA65OE;
}

public boolean getIAA65OL() {
return IAA65OL;
}

public boolean getIAA65OR() {
return IAA65OR;
}

public short getIAA65OU() {
return IAA65OU;
}

public byte getIAA65WE() {
return IAA65WE;
}

public boolean getIAA65WL() {
return IAA65WL;
}

public byte getIAA65WR() {
return IAA65WR;
}

public byte getIAA65WU() {
return IAA65WU;
}

public boolean getIAA65YE() {
return IAA65YE;
}

public boolean getIAA65YL() {
return IAA65YL;
}

public boolean getIAA65YR() {
return IAA65YR;
}

public boolean getIAA65YU() {
return IAA65YU;
}

public short getIAA66() {
return IAA66;
}

public boolean getIAA66FE() {
return IAA66FE;
}

public boolean getIAA66FL() {
return IAA66FL;
}

public boolean getIAA66FR() {
return IAA66FR;
}

public boolean getIAA66FU() {
return IAA66FU;
}

public boolean getIAA66ME() {
return IAA66ME;
}

public boolean getIAA66ML() {
return IAA66ML;
}

public boolean getIAA66MR() {
return IAA66MR;
}

public boolean getIAA66MU() {
return IAA66MU;
}

public boolean getIAA66OE() {
return IAA66OE;
}

public boolean getIAA66OL() {
return IAA66OL;
}

public boolean getIAA66OR() {
return IAA66OR;
}

public short getIAA66OU() {
return IAA66OU;
}

public boolean getIAA66WE() {
return IAA66WE;
}

public boolean getIAA66WL() {
return IAA66WL;
}

public boolean getIAA66WR() {
return IAA66WR;
}

public boolean getIAA66WU() {
return IAA66WU;
}

public boolean getIAA66YE() {
return IAA66YE;
}

public boolean getIAA66YL() {
return IAA66YL;
}

public boolean getIAA66YR() {
return IAA66YR;
}

public boolean getIAA66YU() {
return IAA66YU;
}

public byte getIAA67() {
return IAA67;
}

public boolean getIAA67FE() {
return IAA67FE;
}

public boolean getIAA67FL() {
return IAA67FL;
}

public boolean getIAA67FR() {
return IAA67FR;
}

public short getIAA67FU() {
return IAA67FU;
}

public boolean getIAA67ME() {
return IAA67ME;
}

public boolean getIAA67ML() {
return IAA67ML;
}

public boolean getIAA67MR() {
return IAA67MR;
}

public boolean getIAA67MU() {
return IAA67MU;
}

public boolean getIAA67OE() {
return IAA67OE;
}

public boolean getIAA67OL() {
return IAA67OL;
}

public boolean getIAA67OR() {
return IAA67OR;
}

public boolean getIAA67OU() {
return IAA67OU;
}

public boolean getIAA67WE() {
return IAA67WE;
}

public boolean getIAA67WL() {
return IAA67WL;
}

public boolean getIAA67WR() {
return IAA67WR;
}

public boolean getIAA67WU() {
return IAA67WU;
}

public boolean getIAA67YE() {
return IAA67YE;
}

public boolean getIAA67YL() {
return IAA67YL;
}

public boolean getIAA67YR() {
return IAA67YR;
}

public boolean getIAA67YU() {
return IAA67YU;
}

public short getIAA68() {
return IAA68;
}

public boolean getIAA68FE() {
return IAA68FE;
}

public boolean getIAA68FL() {
return IAA68FL;
}

public boolean getIAA68FR() {
return IAA68FR;
}

public boolean getIAA68FU() {
return IAA68FU;
}

public boolean getIAA68ME() {
return IAA68ME;
}

public boolean getIAA68ML() {
return IAA68ML;
}

public boolean getIAA68MR() {
return IAA68MR;
}

public boolean getIAA68MU() {
return IAA68MU;
}

public boolean getIAA68OE() {
return IAA68OE;
}

public boolean getIAA68OL() {
return IAA68OL;
}

public boolean getIAA68OR() {
return IAA68OR;
}

public boolean getIAA68OU() {
return IAA68OU;
}

public boolean getIAA68WE() {
return IAA68WE;
}

public boolean getIAA68WL() {
return IAA68WL;
}

public boolean getIAA68WR() {
return IAA68WR;
}

public boolean getIAA68WU() {
return IAA68WU;
}

public boolean getIAA68YE() {
return IAA68YE;
}

public boolean getIAA68YL() {
return IAA68YL;
}

public boolean getIAA68YR() {
return IAA68YR;
}

public boolean getIAA68YU() {
return IAA68YU;
}

public short getIAA69() {
return IAA69;
}

public boolean getIAA69FE() {
return IAA69FE;
}

public boolean getIAA69FL() {
return IAA69FL;
}

public boolean getIAA69FR() {
return IAA69FR;
}

public boolean getIAA69FU() {
return IAA69FU;
}

public boolean getIAA69ME() {
return IAA69ME;
}

public boolean getIAA69ML() {
return IAA69ML;
}

public boolean getIAA69MR() {
return IAA69MR;
}

public boolean getIAA69MU() {
return IAA69MU;
}

public boolean getIAA69OE() {
return IAA69OE;
}

public boolean getIAA69OL() {
return IAA69OL;
}

public boolean getIAA69OR() {
return IAA69OR;
}

public boolean getIAA69OU() {
return IAA69OU;
}

public boolean getIAA69WE() {
return IAA69WE;
}

public boolean getIAA69WL() {
return IAA69WL;
}

public boolean getIAA69WR() {
return IAA69WR;
}

public boolean getIAA69WU() {
return IAA69WU;
}

public boolean getIAA69YE() {
return IAA69YE;
}

public boolean getIAA69YL() {
return IAA69YL;
}

public boolean getIAA69YR() {
return IAA69YR;
}

public boolean getIAA69YU() {
return IAA69YU;
}

public short getIAA70() {
return IAA70;
}

public boolean getIAA70FE() {
return IAA70FE;
}

public boolean getIAA70FL() {
return IAA70FL;
}

public boolean getIAA70FR() {
return IAA70FR;
}

public boolean getIAA70FU() {
return IAA70FU;
}

public boolean getIAA70ME() {
return IAA70ME;
}

public boolean getIAA70ML() {
return IAA70ML;
}

public boolean getIAA70MR() {
return IAA70MR;
}

public boolean getIAA70MU() {
return IAA70MU;
}

public boolean getIAA70OE() {
return IAA70OE;
}

public boolean getIAA70OL() {
return IAA70OL;
}

public boolean getIAA70OR() {
return IAA70OR;
}

public boolean getIAA70OU() {
return IAA70OU;
}

public boolean getIAA70WE() {
return IAA70WE;
}

public boolean getIAA70WL() {
return IAA70WL;
}

public boolean getIAA70WR() {
return IAA70WR;
}

public boolean getIAA70WU() {
return IAA70WU;
}

public boolean getIAA70YE() {
return IAA70YE;
}

public boolean getIAA70YL() {
return IAA70YL;
}

public boolean getIAA70YR() {
return IAA70YR;
}

public boolean getIAA70YU() {
return IAA70YU;
}

public short getIAA71() {
return IAA71;
}

public boolean getIAA71FE() {
return IAA71FE;
}

public boolean getIAA71FL() {
return IAA71FL;
}

public boolean getIAA71FR() {
return IAA71FR;
}

public boolean getIAA71FU() {
return IAA71FU;
}

public boolean getIAA71ME() {
return IAA71ME;
}

public boolean getIAA71ML() {
return IAA71ML;
}

public boolean getIAA71MR() {
return IAA71MR;
}

public short getIAA71MU() {
return IAA71MU;
}

public boolean getIAA71OE() {
return IAA71OE;
}

public boolean getIAA71OL() {
return IAA71OL;
}

public boolean getIAA71OR() {
return IAA71OR;
}

public boolean getIAA71OU() {
return IAA71OU;
}

public boolean getIAA71WE() {
return IAA71WE;
}

public boolean getIAA71WL() {
return IAA71WL;
}

public boolean getIAA71WR() {
return IAA71WR;
}

public boolean getIAA71WU() {
return IAA71WU;
}

public boolean getIAA71YE() {
return IAA71YE;
}

public boolean getIAA71YL() {
return IAA71YL;
}

public boolean getIAA71YR() {
return IAA71YR;
}

public boolean getIAA71YU() {
return IAA71YU;
}

public byte getIAA72() {
return IAA72;
}

public boolean getIAA72FE() {
return IAA72FE;
}

public boolean getIAA72FL() {
return IAA72FL;
}

public boolean getIAA72FR() {
return IAA72FR;
}

public boolean getIAA72FU() {
return IAA72FU;
}

public boolean getIAA72ME() {
return IAA72ME;
}

public boolean getIAA72ML() {
return IAA72ML;
}

public boolean getIAA72MR() {
return IAA72MR;
}

public boolean getIAA72MU() {
return IAA72MU;
}

public boolean getIAA72OE() {
return IAA72OE;
}

public boolean getIAA72OL() {
return IAA72OL;
}

public boolean getIAA72OR() {
return IAA72OR;
}

public short getIAA72OU() {
return IAA72OU;
}

public boolean getIAA72WE() {
return IAA72WE;
}

public boolean getIAA72WL() {
return IAA72WL;
}

public boolean getIAA72WR() {
return IAA72WR;
}

public boolean getIAA72WU() {
return IAA72WU;
}

public boolean getIAA72YE() {
return IAA72YE;
}

public boolean getIAA72YL() {
return IAA72YL;
}

public boolean getIAA72YR() {
return IAA72YR;
}

public boolean getIAA72YU() {
return IAA72YU;
}

public byte getIAAIPE() {
return IAAIPE;
}

public short getIAAIPL() {
return IAAIPL;
}

public byte getIAAIPR() {
return IAAIPR;
}

public short getIAAIPU() {
return IAAIPU;
}

public byte getIAB10() {
return IAB10;
}

public byte getIAB11() {
return IAB11;
}

public byte getIAB12() {
return IAB12;
}

public byte getIAB13() {
return IAB13;
}

public byte getIAB14() {
return IAB14;
}

public byte getIAB15() {
return IAB15;
}

public byte getIAB16() {
return IAB16;
}

public byte getIAB17() {
return IAB17;
}

public byte getIAB18() {
return IAB18;
}

public byte getIAB28() {
return IAB28;
}

public byte getIAB29() {
return IAB29;
}

public byte getIAB30() {
return IAB30;
}

public byte getIAB31() {
return IAB31;
}

public byte getIAB32() {
return IAB32;
}

public byte getIAB33() {
return IAB33;
}

public byte getIAB34() {
return IAB34;
}

public byte getIAB35() {
return IAB35;
}

public byte getIAB36() {
return IAB36;
}

public byte getIAB46() {
return IAB46;
}

public byte getIAB47() {
return IAB47;
}

public byte getIAB48() {
return IAB48;
}

public byte getIAB49() {
return IAB49;
}

public byte getIAB50() {
return IAB50;
}

public byte getIAB51() {
return IAB51;
}

public byte getIAB52() {
return IAB52;
}

public byte getIAB53() {
return IAB53;
}

public byte getIAB54() {
return IAB54;
}

public byte getIAB64() {
return IAB64;
}

public byte getIAB65() {
return IAB65;
}

public byte getIAB66() {
return IAB66;
}

public byte getIAB67() {
return IAB67;
}

public byte getIAB68() {
return IAB68;
}

public boolean getIAB69() {
return IAB69;
}

public byte getIAB70() {
return IAB70;
}

public byte getIAB71() {
return IAB71;
}

public byte getIAB72() {
return IAB72;
}

public byte getIABEB() {
return IABEB;
}

public byte getIABEN1() {
return IABEN1;
}

public byte getIABEN2() {
return IABEN2;
}

public byte getIABEN3() {
return IABEN3;
}

public boolean getIABEN4() {
return IABEN4;
}

public byte getIABEP1() {
return IABEP1;
}

public byte getIABEP2() {
return IABEP2;
}

public boolean getIABEP3() {
return IABEP3;
}

public byte getIABEPM1() {
return IABEPM1;
}

public byte getIABEPM2() {
return IABEPM2;
}

public boolean getIABEPM3() {
return IABEPM3;
}

public byte getIABEPN1() {
return IABEPN1;
}

public byte getIABEPN2() {
return IABEPN2;
}

public boolean getIABEPN3() {
return IABEPN3;
}

public byte getIABER1() {
return IABER1;
}

public byte getIABER2() {
return IABER2;
}

public byte getIABER3() {
return IABER3;
}

public byte getIABER4() {
return IABER4;
}

public byte getIABERM1() {
return IABERM1;
}

public byte getIABERM2() {
return IABERM2;
}

public byte getIABERM3() {
return IABERM3;
}

public byte getIABERM4() {
return IABERM4;
}

public byte getIABM10() {
return IABM10;
}

public byte getIABM11() {
return IABM11;
}

public byte getIABM12() {
return IABM12;
}

public byte getIABM13() {
return IABM13;
}

public byte getIABM14() {
return IABM14;
}

public byte getIABM15() {
return IABM15;
}

public boolean getIABM16() {
return IABM16;
}

public byte getIABM17() {
return IABM17;
}

public byte getIABM18() {
return IABM18;
}

public byte getIABM28() {
return IABM28;
}

public byte getIABM29() {
return IABM29;
}

public byte getIABM30() {
return IABM30;
}

public byte getIABM31() {
return IABM31;
}

public byte getIABM32() {
return IABM32;
}

public byte getIABM33() {
return IABM33;
}

public boolean getIABM34() {
return IABM34;
}

public byte getIABM35() {
return IABM35;
}

public byte getIABM36() {
return IABM36;
}

public byte getIABM46() {
return IABM46;
}

public byte getIABM47() {
return IABM47;
}

public byte getIABM48() {
return IABM48;
}

public byte getIABM49() {
return IABM49;
}

public byte getIABM50() {
return IABM50;
}

public byte getIABM51() {
return IABM51;
}

public byte getIABM52() {
return IABM52;
}

public byte getIABM53() {
return IABM53;
}

public byte getIABM54() {
return IABM54;
}

public byte getIABM64() {
return IABM64;
}

public byte getIABM65() {
return IABM65;
}

public byte getIABM66() {
return IABM66;
}

public byte getIABM67() {
return IABM67;
}

public byte getIABM68() {
return IABM68;
}

public boolean getIABM69() {
return IABM69;
}

public byte getIABM70() {
return IABM70;
}

public byte getIABM71() {
return IABM71;
}

public boolean getIABM72() {
return IABM72;
}

public byte getIABW10() {
return IABW10;
}

public byte getIABW11() {
return IABW11;
}

public byte getIABW12() {
return IABW12;
}

public byte getIABW13() {
return IABW13;
}

public byte getIABW14() {
return IABW14;
}

public byte getIABW15() {
return IABW15;
}

public byte getIABW16() {
return IABW16;
}

public byte getIABW17() {
return IABW17;
}

public byte getIABW18() {
return IABW18;
}

public byte getIABW28() {
return IABW28;
}

public boolean getIABW29() {
return IABW29;
}

public byte getIABW30() {
return IABW30;
}

public byte getIABW31() {
return IABW31;
}

public byte getIABW32() {
return IABW32;
}

public byte getIABW33() {
return IABW33;
}

public byte getIABW34() {
return IABW34;
}

public byte getIABW35() {
return IABW35;
}

public boolean getIABW36() {
return IABW36;
}

public byte getIABW46() {
return IABW46;
}

public byte getIABW47() {
return IABW47;
}

public byte getIABW48() {
return IABW48;
}

public byte getIABW49() {
return IABW49;
}

public byte getIABW50() {
return IABW50;
}

public byte getIABW51() {
return IABW51;
}

public byte getIABW52() {
return IABW52;
}

public byte getIABW53() {
return IABW53;
}

public byte getIABW54() {
return IABW54;
}

public byte getIABW64() {
return IABW64;
}

public byte getIABW65() {
return IABW65;
}

public boolean getIABW66() {
return IABW66;
}

public byte getIABW67() {
return IABW67;
}

public boolean getIABW68() {
return IABW68;
}

public boolean getIABW69() {
return IABW69;
}

public byte getIABW70() {
return IABW70;
}

public byte getIABW71() {
return IABW71;
}

public byte getIABW72() {
return IABW72;
}

public byte getIACISAE() {
return IACISAE;
}

public short getIACISAL() {
return IACISAL;
}

public byte getIACISAR() {
return IACISAR;
}

public short getIACISAU() {
return IACISAU;
}

public byte getIADATM() {
return IADATM;
}

public short getIADATY() {
return IADATY;
}

public byte getIADEBME() {
return IADEBME;
}

public short getIADEBML() {
return IADEBML;
}

public byte getIADEBMR() {
return IADEBMR;
}

public short getIADEBMU() {
return IADEBMU;
}

public byte getIAEAR2E() {
return IAEAR2E;
}

public int getIAEAR2L() {
return IAEAR2L;
}

public byte getIAEAR2R() {
return IAEAR2R;
}

public int getIAEAR2U() {
return IAEAR2U;
}

public byte getIAEAR3E() {
return IAEAR3E;
}

public int getIAEAR3L() {
return IAEAR3L;
}

public byte getIAEAR3R() {
return IAEAR3R;
}

public int getIAEAR3U() {
return IAEAR3U;
}

public byte getIAEAR4E() {
return IAEAR4E;
}

public int getIAEAR4L() {
return IAEAR4L;
}

public byte getIAEAR4R() {
return IAEAR4R;
}

public int getIAEAR4U() {
return IAEAR4U;
}

public byte getIAEAR5E() {
return IAEAR5E;
}

public int getIAEAR5L() {
return IAEAR5L;
}

public byte getIAEAR5R() {
return IAEAR5R;
}

public int getIAEAR5U() {
return IAEAR5U;
}

public byte getIAEAR6E() {
return IAEAR6E;
}

public int getIAEAR6L() {
return IAEAR6L;
}

public byte getIAEAR6R() {
return IAEAR6R;
}

public int getIAEAR6U() {
return IAEAR6U;
}

public byte getIAEAR7E() {
return IAEAR7E;
}

public int getIAEAR7L() {
return IAEAR7L;
}

public byte getIAEAR7R() {
return IAEAR7R;
}

public int getIAEAR7U() {
return IAEAR7U;
}

public byte getIAEAR8E() {
return IAEAR8E;
}

public int getIAEAR8L() {
return IAEAR8L;
}

public byte getIAEAR8R() {
return IAEAR8R;
}

public int getIAEAR8U() {
return IAEAR8U;
}

public byte getIAEARE() {
return IAEARE;
}

public int getIAEARL() {
return IAEARL;
}

public byte getIAEARR() {
return IAEARR;
}

public int getIAEARU() {
return IAEARU;
}

public short getIAERN() {
return IAERN;
}

public byte getIAERN10() {
return IAERN10;
}

public int getIAERN2() {
return IAERN2;
}

public int getIAERN3() {
return IAERN3;
}

public int getIAERN4() {
return IAERN4;
}

public int getIAERN5() {
return IAERN5;
}

public short getIAERN6() {
return IAERN6;
}

public short getIAERN7() {
return IAERN7;
}

public short getIAERN8() {
return IAERN8;
}

public byte getIAERN9() {
return IAERN9;
}

public byte getIAFBAE() {
return IAFBAE;
}

public int getIAFBAL() {
return IAFBAL;
}

public byte getIAFBAR() {
return IAFBAR;
}

public int getIAFBAU() {
return IAFBAU;
}

public byte getIAFFNUM() {
return IAFFNUM;
}

public byte getIAFINDC() {
return IAFINDC;
}

public byte getIAFUEL() {
return IAFUEL;
}

public byte getIAHDB() {
return IAHDB;
}

public byte getIAHDN1() {
return IAHDN1;
}

public byte getIAHDN2() {
return IAHDN2;
}

public byte getIAHDN3() {
return IAHDN3;
}

public byte getIAHDN4() {
return IAHDN4;
}

public boolean getIAHDN5() {
return IAHDN5;
}

public byte getIAHDP1() {
return IAHDP1;
}

public byte getIAHDP2() {
return IAHDP2;
}

public byte getIAHDP3() {
return IAHDP3;
}

public byte getIAHDP4() {
return IAHDP4;
}

public byte getIAHDPM1() {
return IAHDPM1;
}

public byte getIAHDPM2() {
return IAHDPM2;
}

public byte getIAHDPM3() {
return IAHDPM3;
}

public byte getIAHDPM4() {
return IAHDPM4;
}

public byte getIAHDPN1() {
return IAHDPN1;
}

public byte getIAHDPN2() {
return IAHDPN2;
}

public byte getIAHDPN3() {
return IAHDPN3;
}

public byte getIAHDPN4() {
return IAHDPN4;
}

public byte getIAHDR1() {
return IAHDR1;
}

public byte getIAHDR2() {
return IAHDR2;
}

public byte getIAHDR3() {
return IAHDR3;
}

public byte getIAHDR4() {
return IAHDR4;
}

public boolean getIAHDR5() {
return IAHDR5;
}

public byte getIAHDRM1() {
return IAHDRM1;
}

public byte getIAHDRM2() {
return IAHDRM2;
}

public byte getIAHDRM3() {
return IAHDRM3;
}

public byte getIAHDRM4() {
return IAHDRM4;
}

public boolean getIAHDRM5() {
return IAHDRM5;
}

public byte getIAHOMEE() {
return IAHOMEE;
}

public int getIAHOMEL() {
return IAHOMEL;
}

public byte getIAHOMER() {
return IAHOMER;
}

public int getIAHOMEU() {
return IAHOMEU;
}

public byte getIAIRAE() {
return IAIRAE;
}

public int getIAIRAL() {
return IAIRAL;
}

public byte getIAIRAR() {
return IAIRAR;
}

public int getIAIRAU() {
return IAIRAU;
}

public byte getIAISA1() {
return IAISA1;
}

public byte getIAISA2() {
return IAISA2;
}

public byte getIAISA3() {
return IAISA3;
}

public byte getIAISADE() {
return IAISADE;
}

public short getIAISADL() {
return IAISADL;
}

public byte getIAISADR() {
return IAISADR;
}

public short getIAISADU() {
return IAISADU;
}

public byte getIALIPAE() {
return IALIPAE;
}

public int getIALIPAL() {
return IALIPAL;
}

public byte getIALIPAR() {
return IALIPAR;
}

public int getIALIPAU() {
return IALIPAU;
}

public byte getIALISAE() {
return IALISAE;
}

public short getIALISAL() {
return IALISAL;
}

public byte getIALISAR() {
return IALISAR;
}

public short getIALISAU() {
return IALISAU;
}

public byte getIALIYAE() {
return IALIYAE;
}

public int getIALIYAL() {
return IALIYAL;
}

public byte getIALIYAR() {
return IALIYAR;
}

public int getIALIYAU() {
return IALIYAU;
}

public byte getIALM() {
return IALM;
}

public byte getIALM19() {
return IALM19;
}

public byte getIALM2() {
return IALM2;
}

public boolean getIALM20() {
return IALM20;
}

public byte getIALM21() {
return IALM21;
}

public byte getIALM22() {
return IALM22;
}

public byte getIALM23() {
return IALM23;
}

public byte getIALM24() {
return IALM24;
}

public byte getIALM25() {
return IALM25;
}

public byte getIALM26() {
return IALM26;
}

public byte getIALM27() {
return IALM27;
}

public byte getIALM3() {
return IALM3;
}

public byte getIALM37() {
return IALM37;
}

public byte getIALM38() {
return IALM38;
}

public byte getIALM39() {
return IALM39;
}

public byte getIALM4() {
return IALM4;
}

public byte getIALM40() {
return IALM40;
}

public byte getIALM41() {
return IALM41;
}

public byte getIALM42() {
return IALM42;
}

public byte getIALM43() {
return IALM43;
}

public byte getIALM44() {
return IALM44;
}

public byte getIALM45() {
return IALM45;
}

public byte getIALM5() {
return IALM5;
}

public byte getIALM55() {
return IALM55;
}

public byte getIALM56() {
return IALM56;
}

public byte getIALM57() {
return IALM57;
}

public byte getIALM58() {
return IALM58;
}

public boolean getIALM59() {
return IALM59;
}

public byte getIALM6() {
return IALM6;
}

public byte getIALM60() {
return IALM60;
}

public byte getIALM61() {
return IALM61;
}

public byte getIALM62() {
return IALM62;
}

public byte getIALM63() {
return IALM63;
}

public byte getIALM7() {
return IALM7;
}

public byte getIALM8() {
return IALM8;
}

public boolean getIALM9() {
return IALM9;
}

public byte getIALOAME() {
return IALOAME;
}

public short getIALOAML() {
return IALOAML;
}

public byte getIALOAMR() {
return IALOAMR;
}

public short getIALOAMU() {
return IALOAMU;
}

public byte getIALOAN1() {
return IALOAN1;
}

public byte getIALOAN2() {
return IALOAN2;
}

public byte getIALOAN3() {
return IALOAN3;
}

public byte getIALOAN4() {
return IALOAN4;
}

public byte getIALREFE() {
return IALREFE;
}

public byte getIALREFL() {
return IALREFL;
}

public byte getIALREFR() {
return IALREFR;
}

public byte getIALREFU() {
return IALREFU;
}

public byte getIALREME() {
return IALREME;
}

public short getIALREML() {
return IALREML;
}

public byte getIALREMR() {
return IALREMR;
}

public short getIALREMU() {
return IALREMU;
}

public byte getIALREOE() {
return IALREOE;
}

public short getIALREOL() {
return IALREOL;
}

public byte getIALREOR() {
return IALREOR;
}

public short getIALREOU() {
return IALREOU;
}

public byte getIALREWE() {
return IALREWE;
}

public short getIALREWL() {
return IALREWL;
}

public byte getIALREWR() {
return IALREWR;
}

public byte getIALREWU() {
return IALREWU;
}

public byte getIALREYE() {
return IALREYE;
}

public short getIALREYL() {
return IALREYL;
}

public byte getIALREYR() {
return IALREYR;
}

public short getIALREYU() {
return IALREYU;
}

public byte getIALY() {
return IALY;
}

public byte getIALY19() {
return IALY19;
}

public byte getIALY2() {
return IALY2;
}

public byte getIALY20() {
return IALY20;
}

public byte getIALY21() {
return IALY21;
}

public byte getIALY22() {
return IALY22;
}

public byte getIALY23() {
return IALY23;
}

public byte getIALY24() {
return IALY24;
}

public byte getIALY25() {
return IALY25;
}

public byte getIALY26() {
return IALY26;
}

public byte getIALY27() {
return IALY27;
}

public byte getIALY3() {
return IALY3;
}

public byte getIALY37() {
return IALY37;
}

public byte getIALY38() {
return IALY38;
}

public byte getIALY39() {
return IALY39;
}

public byte getIALY4() {
return IALY4;
}

public byte getIALY40() {
return IALY40;
}

public byte getIALY41() {
return IALY41;
}

public byte getIALY42() {
return IALY42;
}

public byte getIALY43() {
return IALY43;
}

public byte getIALY44() {
return IALY44;
}

public byte getIALY45() {
return IALY45;
}

public byte getIALY5() {
return IALY5;
}

public byte getIALY55() {
return IALY55;
}

public byte getIALY56() {
return IALY56;
}

public byte getIALY57() {
return IALY57;
}

public byte getIALY58() {
return IALY58;
}

public boolean getIALY59() {
return IALY59;
}

public byte getIALY6() {
return IALY6;
}

public byte getIALY60() {
return IALY60;
}

public byte getIALY61() {
return IALY61;
}

public byte getIALY62() {
return IALY62;
}

public byte getIALY63() {
return IALY63;
}

public byte getIALY7() {
return IALY7;
}

public byte getIALY8() {
return IALY8;
}

public boolean getIALY9() {
return IALY9;
}

public byte getIANPBPE() {
return IANPBPE;
}

public short getIANPBPL() {
return IANPBPL;
}

public byte getIANPBPR() {
return IANPBPR;
}

public short getIANPBPU() {
return IANPBPU;
}

public byte getIAOASAE() {
return IAOASAE;
}

public int getIAOASAL() {
return IAOASAL;
}

public byte getIAOASAR() {
return IAOASAR;
}

public int getIAOASAU() {
return IAOASAU;
}

public byte getIAOMME() {
return IAOMME;
}

public int getIAOMML() {
return IAOMML;
}

public byte getIAOMMR() {
return IAOMMR;
}

public int getIAOMMU() {
return IAOMMU;
}

public byte getIAORGFC() {
return IAORGFC;
}

public byte getIAOWEME() {
return IAOWEME;
}

public short getIAOWEML() {
return IAOWEML;
}

public byte getIAOWEMR() {
return IAOWEMR;
}

public short getIAOWEMU() {
return IAOWEMU;
}

public byte getIAP39() {
return IAP39;
}

public byte getIAP40() {
return IAP40;
}

public byte getIAP41() {
return IAP41;
}

public byte getIAP42() {
return IAP42;
}

public byte getIAP43() {
return IAP43;
}

public byte getIAP44() {
return IAP44;
}

public byte getIAP45() {
return IAP45;
}

public byte getIAP46() {
return IAP46;
}

public byte getIAP47() {
return IAP47;
}

public byte getIAP48() {
return IAP48;
}

public byte getIAP49() {
return IAP49;
}

public byte getIAP50() {
return IAP50;
}

public byte getIAP51() {
return IAP51;
}

public byte getIAP52() {
return IAP52;
}

public byte getIAP53() {
return IAP53;
}

public byte getIAP54() {
return IAP54;
}

public byte getIAP55() {
return IAP55;
}

public byte getIAP56() {
return IAP56;
}

public byte getIAP57() {
return IAP57;
}

public byte getIAP58() {
return IAP58;
}

public byte getIAP59() {
return IAP59;
}

public byte getIAP60() {
return IAP60;
}

public byte getIAP61() {
return IAP61;
}

public byte getIAP62() {
return IAP62;
}

public byte getIAP63() {
return IAP63;
}

public byte getIAP64() {
return IAP64;
}

public byte getIAP65() {
return IAP65;
}

public byte getIAP66() {
return IAP66;
}

public byte getIAP67() {
return IAP67;
}

public byte getIAP68() {
return IAP68;
}

public boolean getIAP69() {
return IAP69;
}

public byte getIAP70() {
return IAP70;
}

public byte getIAP71() {
return IAP71;
}

public byte getIAP72() {
return IAP72;
}

public byte getIAPAY() {
return IAPAY;
}

public boolean getIAPAY0E() {
return IAPAY0E;
}

public boolean getIAPAY0L() {
return IAPAY0L;
}

public boolean getIAPAY0R() {
return IAPAY0R;
}

public boolean getIAPAY0U() {
return IAPAY0U;
}

public byte getIAPAY2() {
return IAPAY2;
}

public boolean getIAPAY9E() {
return IAPAY9E;
}

public boolean getIAPAY9L() {
return IAPAY9L;
}

public boolean getIAPAY9R() {
return IAPAY9R;
}

public boolean getIAPAY9U() {
return IAPAY9U;
}

public byte getIAPAYR() {
return IAPAYR;
}

public byte getIAPAYR2() {
return IAPAYR2;
}

public byte getIAPK1() {
return IAPK1;
}

public byte getIAPK2() {
return IAPK2;
}

public byte getIAPK3() {
return IAPK3;
}

public byte getIAPK4() {
return IAPK4;
}

public byte getIAPKM1E() {
return IAPKM1E;
}

public int getIAPKM1L() {
return IAPKM1L;
}

public byte getIAPKM1R() {
return IAPKM1R;
}

public int getIAPKM1U() {
return IAPKM1U;
}

public byte getIAPKM2E() {
return IAPKM2E;
}

public int getIAPKM2L() {
return IAPKM2L;
}

public byte getIAPKM2R() {
return IAPKM2R;
}

public int getIAPKM2U() {
return IAPKM2U;
}

public byte getIAPKM3E() {
return IAPKM3E;
}

public boolean getIAPKM3L() {
return IAPKM3L;
}

public byte getIAPKM3R() {
return IAPKM3R;
}

public short getIAPKM3U() {
return IAPKM3U;
}

public byte getIAPKM4E() {
return IAPKM4E;
}

public short getIAPKM4L() {
return IAPKM4L;
}

public byte getIAPKM4R() {
return IAPKM4R;
}

public short getIAPKM4U() {
return IAPKM4U;
}

public byte getIAPKM5E() {
return IAPKM5E;
}

public int getIAPKM5L() {
return IAPKM5L;
}

public byte getIAPKM5R() {
return IAPKM5R;
}

public int getIAPKM5U() {
return IAPKM5U;
}

public byte getIAPKM6E() {
return IAPKM6E;
}

public int getIAPKM6L() {
return IAPKM6L;
}

public byte getIAPKM6R() {
return IAPKM6R;
}

public int getIAPKM6U() {
return IAPKM6U;
}

public byte getIAPKM7E() {
return IAPKM7E;
}

public short getIAPKM7L() {
return IAPKM7L;
}

public byte getIAPKM7R() {
return IAPKM7R;
}

public short getIAPKM7U() {
return IAPKM7U;
}

public byte getIAPKM8E() {
return IAPKM8E;
}

public int getIAPKM8L() {
return IAPKM8L;
}

public byte getIAPKM8R() {
return IAPKM8R;
}

public int getIAPKM8U() {
return IAPKM8U;
}

public byte getIAPKZM1() {
return IAPKZM1;
}

public byte getIAPKZM2() {
return IAPKZM2;
}

public byte getIAPKZM3() {
return IAPKZM3;
}

public boolean getIAPKZM4() {
return IAPKZM4;
}

public byte getIAPLW() {
return IAPLW;
}

public byte getIAPLY() {
return IAPLY;
}

public byte getIAPLYP() {
return IAPLYP;
}

public byte getIAPLYW() {
return IAPLYW;
}

public byte getIAPPAFE() {
return IAPPAFE;
}

public boolean getIAPPAFL() {
return IAPPAFL;
}

public byte getIAPPAFR() {
return IAPPAFR;
}

public short getIAPPAFU() {
return IAPPAFU;
}

public byte getIAPPAME() {
return IAPPAME;
}

public short getIAPPAML() {
return IAPPAML;
}

public byte getIAPPAMR() {
return IAPPAMR;
}

public short getIAPPAMU() {
return IAPPAMU;
}

public byte getIAPPAOE() {
return IAPPAOE;
}

public short getIAPPAOL() {
return IAPPAOL;
}

public byte getIAPPAOR() {
return IAPPAOR;
}

public short getIAPPAOU() {
return IAPPAOU;
}

public byte getIAPPAWE() {
return IAPPAWE;
}

public short getIAPPAWL() {
return IAPPAWL;
}

public byte getIAPPAWR() {
return IAPPAWR;
}

public short getIAPPAWU() {
return IAPPAWU;
}

public byte getIAPPAYE() {
return IAPPAYE;
}

public short getIAPPAYL() {
return IAPPAYL;
}

public byte getIAPPAYR() {
return IAPPAYR;
}

public short getIAPPAYU() {
return IAPPAYU;
}

public byte getIAPPEIE() {
return IAPPEIE;
}

public short getIAPPEIL() {
return IAPPEIL;
}

public byte getIAPPEIR() {
return IAPPEIR;
}

public short getIAPPEIU() {
return IAPPEIU;
}

public byte getIAPRC() {
return IAPRC;
}

public byte getIAPROP1() {
return IAPROP1;
}

public byte getIAPROP2() {
return IAPROP2;
}

public byte getIAPROP3() {
return IAPROP3;
}

public byte getIAPROP4() {
return IAPROP4;
}

public byte getIAPROP5() {
return IAPROP5;
}

public boolean getIAPROP6() {
return IAPROP6;
}

public byte getIAPYR2C() {
return IAPYR2C;
}

public byte getIAPYRC() {
return IAPYRC;
}

public byte getIAPYW3() {
return IAPYW3;
}

public byte getIAPYW4() {
return IAPYW4;
}

public byte getIAPYW5() {
return IAPYW5;
}

public byte getIAPYW6() {
return IAPYW6;
}

public byte getIAPYW7() {
return IAPYW7;
}

public byte getIAPYW8() {
return IAPYW8;
}

public byte getIAPYW9() {
return IAPYW9;
}

public byte getIARECE() {
return IARECE;
}

public short getIARECL() {
return IARECL;
}

public byte getIARECR() {
return IARECR;
}

public short getIARECU() {
return IARECU;
}

public byte getIAREGYR() {
return IAREGYR;
}

public boolean getIAREPFE() {
return IAREPFE;
}

public boolean getIAREPFL() {
return IAREPFL;
}

public boolean getIAREPFR() {
return IAREPFR;
}

public boolean getIAREPFU() {
return IAREPFU;
}

public byte getIAREPME() {
return IAREPME;
}

public byte getIAREPML() {
return IAREPML;
}

public byte getIAREPMR() {
return IAREPMR;
}

public short getIAREPMU() {
return IAREPMU;
}

public byte getIAREPOE() {
return IAREPOE;
}

public short getIAREPOL() {
return IAREPOL;
}

public byte getIAREPOR() {
return IAREPOR;
}

public short getIAREPOU() {
return IAREPOU;
}

public byte getIAREPWE() {
return IAREPWE;
}

public byte getIAREPWL() {
return IAREPWL;
}

public byte getIAREPWR() {
return IAREPWR;
}

public byte getIAREPWU() {
return IAREPWU;
}

public byte getIAREPYE() {
return IAREPYE;
}

public byte getIAREPYL() {
return IAREPYL;
}

public byte getIAREPYR() {
return IAREPYR;
}

public short getIAREPYU() {
return IAREPYU;
}

public boolean getIARG2FE() {
return IARG2FE;
}

public boolean getIARG2FL() {
return IARG2FL;
}

public boolean getIARG2FR() {
return IARG2FR;
}

public boolean getIARG2FU() {
return IARG2FU;
}

public byte getIARG2ME() {
return IARG2ME;
}

public short getIARG2ML() {
return IARG2ML;
}

public byte getIARG2MR() {
return IARG2MR;
}

public short getIARG2MU() {
return IARG2MU;
}

public byte getIARG2OE() {
return IARG2OE;
}

public byte getIARG2OL() {
return IARG2OL;
}

public byte getIARG2OR() {
return IARG2OR;
}

public byte getIARG2OU() {
return IARG2OU;
}

public boolean getIARG2WE() {
return IARG2WE;
}

public boolean getIARG2WL() {
return IARG2WL;
}

public boolean getIARG2WR() {
return IARG2WR;
}

public boolean getIARG2WU() {
return IARG2WU;
}

public boolean getIARG2YE() {
return IARG2YE;
}

public boolean getIARG2YL() {
return IARG2YL;
}

public boolean getIARG2YR() {
return IARG2YR;
}

public boolean getIARG2YU() {
return IARG2YU;
}

public boolean getIARGFE() {
return IARGFE;
}

public boolean getIARGFL() {
return IARGFL;
}

public boolean getIARGFR() {
return IARGFR;
}

public boolean getIARGFU() {
return IARGFU;
}

public boolean getIARGM() {
return IARGM;
}

public byte getIARGME() {
return IARGME;
}

public short getIARGML() {
return IARGML;
}

public byte getIARGMR() {
return IARGMR;
}

public short getIARGMU() {
return IARGMU;
}

public byte getIARGMW() {
return IARGMW;
}

public byte getIARGMWP() {
return IARGMWP;
}

public byte getIARGOE() {
return IARGOE;
}

public short getIARGOL() {
return IARGOL;
}

public byte getIARGOR() {
return IARGOR;
}

public short getIARGOU() {
return IARGOU;
}

public byte getIARGWE() {
return IARGWE;
}

public byte getIARGWL() {
return IARGWL;
}

public byte getIARGWR() {
return IARGWR;
}

public byte getIARGWU() {
return IARGWU;
}

public byte getIARGYE() {
return IARGYE;
}

public byte getIARGYL() {
return IARGYL;
}

public byte getIARGYR() {
return IARGYR;
}

public byte getIARGYR2() {
return IARGYR2;
}

public byte getIARGYRP() {
return IARGYRP;
}

public byte getIARGYU() {
return IARGYU;
}

public byte getIARMWA() {
return IARMWA;
}

public boolean getIARMWA2() {
return IARMWA2;
}

public boolean getIARMWPA() {
return IARMWPA;
}

public byte getIASAVAE() {
return IASAVAE;
}

public int getIASAVAL() {
return IASAVAL;
}

public byte getIASAVAR() {
return IASAVAR;
}

public int getIASAVAU() {
return IASAVAU;
}

public byte getIASCAE() {
return IASCAE;
}

public int getIASCAL() {
return IASCAL;
}

public byte getIASCAR() {
return IASCAR;
}

public int getIASCAU() {
return IASCAU;
}

public byte getIASHTY1() {
return IASHTY1;
}

public byte getIASHTY2() {
return IASHTY2;
}

public byte getIASHTY3() {
return IASHTY3;
}

public byte getIASHTY4() {
return IASHTY4;
}

public byte getIASI01() {
return IASI01;
}

public byte getIASI02() {
return IASI02;
}

public byte getIASI03() {
return IASI03;
}

public byte getIASI04() {
return IASI04;
}

public byte getIASI05() {
return IASI05;
}

public byte getIASI06() {
return IASI06;
}

public byte getIASI07() {
return IASI07;
}

public byte getIASI08() {
return IASI08;
}

public byte getIASI09() {
return IASI09;
}

public byte getIASI10() {
return IASI10;
}

public byte getIASI11() {
return IASI11;
}

public byte getIASIOIE() {
return IASIOIE;
}

public short getIASIOIL() {
return IASIOIL;
}

public byte getIASIOIR() {
return IASIOIR;
}

public short getIASIOIU() {
return IASIOIU;
}

public byte getIASISAE() {
return IASISAE;
}

public int getIASISAL() {
return IASISAL;
}

public byte getIASISAR() {
return IASISAR;
}

public int getIASISAU() {
return IASISAU;
}

public byte getIASSSE() {
return IASSSE;
}

public byte getIASSSIE() {
return IASSSIE;
}

public short getIASSSIL() {
return IASSSIL;
}

public byte getIASSSIR() {
return IASSSIR;
}

public short getIASSSIU() {
return IASSSIU;
}

public int getIASSSL() {
return IASSSL;
}

public byte getIASSSR() {
return IASSSR;
}

public int getIASSSU() {
return IASSSU;
}

public boolean getIAT39() {
return IAT39;
}

public boolean getIAT40() {
return IAT40;
}

public boolean getIAT41() {
return IAT41;
}

public boolean getIAT42() {
return IAT42;
}

public boolean getIAT43() {
return IAT43;
}

public boolean getIAT44() {
return IAT44;
}

public boolean getIAT45() {
return IAT45;
}

public boolean getIAT46() {
return IAT46;
}

public boolean getIAT47() {
return IAT47;
}

public boolean getIAT48() {
return IAT48;
}

public boolean getIAT49() {
return IAT49;
}

public boolean getIAT50() {
return IAT50;
}

public boolean getIAT51() {
return IAT51;
}

public boolean getIAT52() {
return IAT52;
}

public boolean getIAT53() {
return IAT53;
}

public boolean getIAT54() {
return IAT54;
}

public boolean getIAT55() {
return IAT55;
}

public boolean getIAT56() {
return IAT56;
}

public boolean getIAT57() {
return IAT57;
}

public boolean getIAT58() {
return IAT58;
}

public boolean getIAT59() {
return IAT59;
}

public boolean getIAT60() {
return IAT60;
}

public boolean getIAT61() {
return IAT61;
}

public boolean getIAT62() {
return IAT62;
}

public boolean getIAT63() {
return IAT63;
}

public boolean getIAT64() {
return IAT64;
}

public boolean getIAT65() {
return IAT65;
}

public boolean getIAT66() {
return IAT66;
}

public boolean getIAT67() {
return IAT67;
}

public boolean getIAT68() {
return IAT68;
}

public boolean getIAT69() {
return IAT69;
}

public boolean getIAT70() {
return IAT70;
}

public boolean getIAT71() {
return IAT71;
}

public boolean getIAT72() {
return IAT72;
}

public byte getIAUITE() {
return IAUITE;
}

public byte getIAUITIE() {
return IAUITIE;
}

public short getIAUITIL() {
return IAUITIL;
}

public byte getIAUITIR() {
return IAUITIR;
}

public short getIAUITIU() {
return IAUITIU;
}

public int getIAUITL() {
return IAUITL;
}

public byte getIAUITR() {
return IAUITR;
}

public int getIAUITU() {
return IAUITU;
}

public byte getIAW1R() {
return IAW1R;
}

public int getIDAIND() {
return IDAIND;
}

public byte getIFLAG_DBSR1() {
return IFLAG_DBSR1;
}

public byte getIFLAG_DBSR2() {
return IFLAG_DBSR2;
}

public byte getIFLAG_DCCONT() {
return IFLAG_DCCONT;
}

public byte getIFLAG_DCFUND() {
return IFLAG_DCFUND;
}

public boolean getIFLAG_EARN() {
return IFLAG_EARN;
}

public byte getIFLAG_REC() {
return IFLAG_REC;
}

public byte getIFLAG_RTEN() {
return IFLAG_RTEN;
}

public byte getIINTDTM() {
return IINTDTM;
}

public short getIINTDTY() {
return IINTDTY;
}

public byte getINHALER() {
return INHALER;
}

public byte getINHALHR() {
return INHALHR;
}

public double getINRECEIPT_04() {
return INRECEIPT_04;
}

public double getINRECEIPT_SPA() {
return INRECEIPT_SPA;
}

public double getLDL() {
return LDL;
}

public byte getLFNOMEA() {
return LFNOMEA;
}

public byte getLFRESP() {
return LFRESP;
}

public byte getLFSTAND() {
return LFSTAND;
}

public double getLFTEMP() {
return LFTEMP;
}

public byte getLFWILL() {
return LFWILL;
}

public boolean getMAINHH1() {
return MAINHH1;
}

public short getMAP1() {
return MAP1;
}

public short getMAP2() {
return MAP2;
}

public short getMAP3() {
return MAP3;
}

public double getMAPVAL() {
return MAPVAL;
}

public byte getMMAIDC() {
return MMAIDC;
}

public byte getMMBCSC() {
return MMBCSC;
}

public byte getMMCOMZ1() {
return MMCOMZ1;
}

public byte getMMCOMZ2() {
return MMCOMZ2;
}

public boolean getMMCOMZ3() {
return MMCOMZ3;
}

public byte getMMCRAV() {
return MMCRAV;
}

public byte getMMCRNA() {
return MMCRNA;
}

public byte getMMCRRE() {
return MMCRRE;
}

public byte getMMCRSC() {
return MMCRSC;
}

public byte getMMFTNA() {
return MMFTNA;
}

public byte getMMFTRE2() {
return MMFTRE2;
}

public byte getMMFTSC() {
return MMFTSC;
}

public double getMMFTTI() {
return MMFTTI;
}

public byte getMMGSD1() {
return MMGSD1;
}

public byte getMMGSD2() {
return MMGSD2;
}

public byte getMMGSD3() {
return MMGSD3;
}

public byte getMMGSDOM() {
return MMGSDOM;
}

public byte getMMGSN1() {
return MMGSN1;
}

public byte getMMGSN2() {
return MMGSN2;
}

public byte getMMGSN3() {
return MMGSN3;
}

public byte getMMGSPR1() {
return MMGSPR1;
}

public boolean getMMGSPR2() {
return MMGSPR2;
}

public byte getMMGSRES() {
return MMGSRES;
}

public byte getMMGSSTA() {
return MMGSSTA;
}

public byte getMMGSTP() {
return MMGSTP;
}

public byte getMMGSWIL() {
return MMGSWIL;
}

public byte getMMLONA() {
return MMLONA;
}

public byte getMMLORE() {
return MMLORE;
}

public byte getMMLOSC() {
return MMLOSC;
}

public double getMMLOTI() {
return MMLOTI;
}

public byte getMMLSNA() {
return MMLSNA;
}

public byte getMMLSRE() {
return MMLSRE;
}

public byte getMMLSSC() {
return MMLSSC;
}

public double getMMLSTI() {
return MMLSTI;
}

public byte getMMRECRC() {
return MMRECRC;
}

public double getMMRRFTI() {
return MMRRFTI;
}

public byte getMMRRNA() {
return MMRRNA;
}

public byte getMMRROC() {
return MMRROC;
}

public byte getMMRRRE() {
return MMRRRE;
}

public byte getMMRRSC() {
return MMRRSC;
}

public double getMMRRTTI() {
return MMRRTTI;
}

public byte getMMSSNA() {
return MMSSNA;
}

public byte getMMSSRE() {
return MMSSRE;
}

public byte getMMSSSC() {
return MMSSSC;
}

public double getMMSSTI() {
return MMSSTI;
}

public byte getMMSTNA() {
return MMSTNA;
}

public byte getMMSTRE() {
return MMSTRE;
}

public byte getMMSTSC() {
return MMSTSC;
}

public double getMMSTTI() {
return MMSTTI;
}

public byte getNATTBP1() {
return NATTBP1;
}

public byte getNATTBP2() {
return NATTBP2;
}

public byte getNLSATLF() {
return NLSATLF;
}

public byte getNNCLM() {
return NNCLM;
}

public byte getNNCORRE() {
return NNCORRE;
}

public byte getNNMISSE() {
return NNMISSE;
}

public byte getNNROW() {
return NNROW;
}

public byte getNOATTLF() {
return NOATTLF;
}

public byte getNOBSM1() {
return NOBSM1;
}

public byte getNOBSM2() {
return NOBSM2;
}

public byte getNOHTBC1() {
return NOHTBC1;
}

public byte getNOHTBC2() {
return NOHTBC2;
}

public byte getNOHTBC3() {
return NOHTBC3;
}

public boolean getNOHTBC4() {
return NOHTBC4;
}

public byte getNOREAD() {
return NOREAD;
}

public byte getNOWTBC1() {
return NOWTBC1;
}

public byte getNOWTBC2() {
return NOWTBC2;
}

public boolean getNOWTBC3() {
return NOWTBC3;
}

public boolean getNOWTBC4() {
return NOWTBC4;
}

public short getNROWCL() {
return NROWCL;
}

public byte getORDCON() {
return ORDCON;
}

public boolean getOUTNSC() {
return OUTNSC;
}

public byte getOUTSC() {
return OUTSC;
}

public boolean getPAINHH1() {
return PAINHH1;
}

public byte getPC_P_F() {
return PC_P_F;
}

public double getPC_P_I() {
return PC_P_I;
}

public short getPC_P_O() {
return PC_P_O;
}

public short getPC_P_T() {
return PC_P_T;
}

public byte getPC_R_F() {
return PC_R_F;
}

public double getPC_R_I() {
return PC_R_I;
}

public short getPC_R_O() {
return PC_R_O;
}

public short getPC_R_T() {
return PC_R_T;
}

public byte getPENNUM() {
return PENNUM;
}

public byte getPENTYPE_WAVE2() {
return PENTYPE_WAVE2;
}

public short getPF1() {
return PF1;
}

public short getPF2() {
return PF2;
}

public short getPF3() {
return PF3;
}

public double getPRIPENW_04() {
return PRIPENW_04;
}

public double getPRIPENW_SPA() {
return PRIPENW_SPA;
}

public byte getPROBHJ() {
return PROBHJ;
}

public byte getPROBLF1() {
return PROBLF1;
}

public byte getPROBLF2() {
return PROBLF2;
}

public boolean getPROBLF3() {
return PROBLF3;
}

public byte getPROBWJ() {
return PROBWJ;
}

public byte getPSFEEL() {
return PSFEEL;
}

public byte getPSPSYA() {
return PSPSYA;
}

public byte getPSPSYB() {
return PSPSYB;
}

public byte getPSPSYC() {
return PSPSYC;
}

public byte getPSPSYD() {
return PSPSYD;
}

public byte getPSPSYE() {
return PSPSYE;
}

public short getPULSE1() {
return PULSE1;
}

public short getPULSE2() {
return PULSE2;
}

public short getPULSE3() {
return PULSE3;
}

public double getPULVAL() {
return PULVAL;
}

public String getQVER() {
return QVER;
}

public byte getREFBSC1() {
return REFBSC1;
}

public byte getREFBSC2() {
return REFBSC2;
}

public byte getREFBSC3() {
return REFBSC3;
}

public byte getRELHITE() {
return RELHITE;
}

public byte getRELWAIT() {
return RELWAIT;
}

public byte getRESNHI() {
return RESNHI;
}

public byte getRESNWT() {
return RESNWT;
}

public byte getRESPBPS() {
return RESPBPS;
}

public byte getRESPHTS() {
return RESPHTS;
}

public byte getRESPWH() {
return RESPWH;
}

public byte getRESPWTS() {
return RESPWTS;
}

public double getRETAINEDDB_04() {
return RETAINEDDB_04;
}

public double getRETAINEDDB_SPA() {
return RETAINEDDB_SPA;
}

public double getRETAINEDDC_04() {
return RETAINEDDC_04;
}

public double getRETAINEDDC_SPA() {
return RETAINEDDC_SPA;
}

public byte getRFACCOM() {
return RFACCOM;
}

public byte getRFACTIV() {
return RFACTIV;
}

public byte getRFARRAN() {
return RFARRAN;
}

public byte getRFATTIT() {
return RFATTIT;
}

public byte getRFBUILD() {
return RFBUILD;
}

public byte getRFCHARG() {
return RFCHARG;
}

public byte getRFCLOSE() {
return RFCLOSE;
}

public byte getRFCOMPA() {
return RFCOMPA;
}

public byte getRFCONFI() {
return RFCONFI;
}

public byte getRFDECIS() {
return RFDECIS;
}

public byte getRFDEMAN() {
return RFDEMAN;
}

public byte getRFDEVEL() {
return RFDEVEL;
}

public byte getRFDIFF() {
return RFDIFF;
}

public byte getRFDISAG() {
return RFDISAG;
}

public byte getRFDISAP() {
return RFDISAP;
}

public byte getRFDONE() {
return RFDONE;
}

public byte getRFEXPER() {
return RFEXPER;
}

public byte getRFFITIN() {
return RFFITIN;
}

public byte getRFFRIEN() {
return RFFRIEN;
}

public byte getRFGOALS() {
return RFGOALS;
}

public byte getRFHORIZ() {
return RFHORIZ;
}

public byte getRFIMPRO() {
return RFIMPRO;
}

public byte getRFINFLU() {
return RFINFLU;
}

public byte getRFJUDGE() {
return RFJUDGE;
}

public byte getRFLEARN() {
return RFLEARN;
}

public byte getRFLONEL() {
return RFLONEL;
}

public byte getRFLOVIN() {
return RFLOVIN;
}

public byte getRFMANAG() {
return RFMANAG;
}

public byte getRFMORE() {
return RFMORE;
}

public byte getRFNIMPR() {
return RFNIMPR;
}

public byte getRFONEDA() {
return RFONEDA;
}

public byte getRFOVERW() {
return RFOVERW;
}

public byte getRFPERS() {
return RFPERS;
}

public byte getRFPLANS() {
return RFPLANS;
}

public byte getRFPOSIT() {
return RFPOSIT;
}

public byte getRFSENSE() {
return RFSENSE;
}

public byte getRFSHARE() {
return RFSHARE;
}

public byte getRFSTORY() {
return RFSTORY;
}

public byte getRFTRICK() {
return RFTRICK;
}

public byte getRFTRUST() {
return RFTRUST;
}

public byte getRFVOICE() {
return RFVOICE;
}

public byte getRFWAND() {
return RFWAND;
}

public byte getRFWARM() {
return RFWARM;
}

public short getRTIN() {
return RTIN;
}

public byte getSAMDIF1() {
return SAMDIF1;
}

public byte getSAMDIF2() {
return SAMDIF2;
}

public byte getSAMDIF3() {
return SAMDIF3;
}

public boolean getSAMDIF4() {
return SAMDIF4;
}

public byte getSAMPSTA() {
return SAMPSTA;
}

public byte getSAMPTAK() {
return SAMPTAK;
}

public byte getSCABNLC() {
return SCABNLC;
}

public double getSCABNP() {
return SCABNP;
}

public byte getSCABNSC() {
return SCABNSC;
}

public byte getSCABSLC() {
return SCABSLC;
}

public double getSCABSP() {
return SCABSP;
}

public byte getSCABSSC() {
return SCABSSC;
}

public byte getSCACCA() {
return SCACCA;
}

public byte getSCACCB() {
return SCACCB;
}

public byte getSCACCC() {
return SCACCC;
}

public byte getSCACCD() {
return SCACCD;
}

public byte getSCACCE() {
return SCACCE;
}

public byte getSCACCF() {
return SCACCF;
}

public byte getSCACCG() {
return SCACCG;
}

public byte getSCACCH() {
return SCACCH;
}

public byte getSCACCI() {
return SCACCI;
}

public byte getSCACCJ() {
return SCACCJ;
}

public byte getSCACTA() {
return SCACTA;
}

public byte getSCACTB() {
return SCACTB;
}

public byte getSCACTC() {
return SCACTC;
}

public byte getSCACTD() {
return SCACTD;
}

public byte getSCAKO() {
return SCAKO;
}

public byte getSCAL7A() {
return SCAL7A;
}

public byte getSCAL7B() {
return SCAL7B;
}

public byte getSCAPOPG() {
return SCAPOPG;
}

public byte getSCASHER() {
return SCASHER;
}

public byte getSCASPIR() {
return SCASPIR;
}

public byte getSCAWIN() {
return SCAWIN;
}

public byte getSCDCA() {
return SCDCA;
}

public byte getSCDCC() {
return SCDCC;
}

public byte getSCDCD() {
return SCDCD;
}

public byte getSCDCE() {
return SCDCE;
}

public byte getSCDCG() {
return SCDCG;
}

public byte getSCDRI() {
return SCDRI;
}

public byte getSCDRI01() {
return SCDRI01;
}

public byte getSCDRI02() {
return SCDRI02;
}

public byte getSCDRI03() {
return SCDRI03;
}

public byte getSCDRI04() {
return SCDRI04;
}

public byte getSCDRI05() {
return SCDRI05;
}

public byte getSCDRI06() {
return SCDRI06;
}

public byte getSCEMPL() {
return SCEMPL;
}

public byte getSCEXPA() {
return SCEXPA;
}

public byte getSCEXPB() {
return SCEXPB;
}

public byte getSCEXPC() {
return SCEXPC;
}

public byte getSCEXPD() {
return SCEXPD;
}

public byte getSCEXPE() {
return SCEXPE;
}

public byte getSCEXPF() {
return SCEXPF;
}

public byte getSCEXPG() {
return SCEXPG;
}

public byte getSCEXPH() {
return SCEXPH;
}

public byte getSCEXPI() {
return SCEXPI;
}

public byte getSCEXPJ() {
return SCEXPJ;
}

public byte getSCEXPK() {
return SCEXPK;
}

public byte getSCEXPL() {
return SCEXPL;
}

public byte getSCFAMH() {
return SCFAMH;
}

public byte getSCFAMM() {
return SCFAMM;
}

public byte getSCFEELA() {
return SCFEELA;
}

public byte getSCFEELB() {
return SCFEELB;
}

public byte getSCFEELC() {
return SCFEELC;
}

public byte getSCFEELD() {
return SCFEELD;
}

public byte getSCFRDM() {
return SCFRDM;
}

public byte getSCLADDC() {
return SCLADDC;
}

public byte getSCLIFEA() {
return SCLIFEA;
}

public byte getSCLIFEB() {
return SCLIFEB;
}

public byte getSCLIFEC() {
return SCLIFEC;
}

public byte getSCLIFED() {
return SCLIFED;
}

public byte getSCLIFEE() {
return SCLIFEE;
}

public byte getSCMOREA() {
return SCMOREA;
}

public byte getSCMOREB() {
return SCMOREB;
}

public byte getSCMOREC() {
return SCMOREC;
}

public byte getSCMORED() {
return SCMORED;
}

public byte getSCOLD() {
return SCOLD;
}

public byte getSCORG01() {
return SCORG01;
}

public byte getSCORG02() {
return SCORG02;
}

public byte getSCORG03() {
return SCORG03;
}

public byte getSCORG04() {
return SCORG04;
}

public byte getSCORG05() {
return SCORG05;
}

public byte getSCORG06() {
return SCORG06;
}

public byte getSCORG07() {
return SCORG07;
}

public byte getSCORG08() {
return SCORG08;
}

public byte getSCORG09() {
return SCORG09;
}

public byte getSCPONEG() {
return SCPONEG;
}

public byte getSCPT02() {
return SCPT02;
}

public byte getSCPT03() {
return SCPT03;
}

public byte getSCPT04() {
return SCPT04;
}

public byte getSCPT05() {
return SCPT05;
}

public byte getSCPT06() {
return SCPT06;
}

public byte getSCPT07() {
return SCPT07;
}

public byte getSCPT08() {
return SCPT08;
}

public byte getSCPT09() {
return SCPT09;
}

public byte getSCPTR() {
return SCPTR;
}

public byte getSCPTRA() {
return SCPTRA;
}

public byte getSCPTRB() {
return SCPTRB;
}

public byte getSCPTRC() {
return SCPTRC;
}

public byte getSCPTRD() {
return SCPTRD;
}

public byte getSCPTRE() {
return SCPTRE;
}

public byte getSCPTRF() {
return SCPTRF;
}

public byte getSCPTRG() {
return SCPTRG;
}

public short getSCRTAGE() {
return SCRTAGE;
}

public byte getSCTOBE() {
return SCTOBE;
}

public double getSCW2WGT() {
return SCW2WGT;
}

public byte getSCWORKA() {
return SCWORKA;
}

public byte getSCWORKB() {
return SCWORKB;
}

public byte getSCWORKC() {
return SCWORKC;
}

public byte getSCWORKD() {
return SCWORKD;
}

public byte getSCWORKE() {
return SCWORKE;
}

public byte getSCWORKF() {
return SCWORKF;
}

public byte getSCWORKG() {
return SCWORKG;
}

public byte getSCWORKH() {
return SCWORKH;
}

public byte getSCWORKI() {
return SCWORKI;
}

public byte getSCWORKJ() {
return SCWORKJ;
}

public byte getSCWORKK() {
return SCWORKK;
}

public byte getSCWORKL() {
return SCWORKL;
}

public double getSITHGT() {
return SITHGT;
}

public byte getSITHTRS() {
return SITHTRS;
}

public byte getSPCARA() {
return SPCARA;
}

public byte getSPTRAB1() {
return SPTRAB1;
}

public byte getSPTRAB2() {
return SPTRAB2;
}

public byte getSPTRAB3() {
return SPTRAB3;
}

public byte getSPTRAB4() {
return SPTRAB4;
}

public byte getSPTRAB5() {
return SPTRAB5;
}

public byte getSPTRAB6() {
return SPTRAB6;
}

public byte getSPTRAB7() {
return SPTRAB7;
}

public byte getSPTRM01() {
return SPTRM01;
}

public byte getSPTRM02() {
return SPTRM02;
}

public byte getSPTRM03() {
return SPTRM03;
}

public byte getSPTRM04() {
return SPTRM04;
}

public byte getSPTRM05() {
return SPTRM05;
}

public byte getSPTRM06() {
return SPTRM06;
}

public boolean getSPTRM07() {
return SPTRM07;
}

public double getSTPENW_04() {
return STPENW_04;
}

public double getSTPENW_SPA() {
return STPENW_SPA;
}

public short getSYS1() {
return SYS1;
}

public short getSYS2() {
return SYS2;
}

public short getSYS3() {
return SYS3;
}

public double getSYSVAL() {
return SYSVAL;
}

public byte getTECHNI1() {
return TECHNI1;
}

public byte getTECHNI2() {
return TECHNI2;
}

public byte getTECHNI3() {
return TECHNI3;
}

public double getTOTPENW_04() {
return TOTPENW_04;
}

public double getTOTPENW_SPA() {
return TOTPENW_SPA;
}

public byte getTOTPSC() {
return TOTPSC;
}

public double getTRIG() {
return TRIG;
}

public byte getVISMON() {
return VISMON;
}

public short getVISYEAR() {
return VISYEAR;
}

public short getW1HHOUT() {
return W1HHOUT;
}

public short getW1INDOUT() {
return W1INDOUT;
}

public short getW2HHOUT() {
return W2HHOUT;
}

public byte getW2INDOUT() {
return W2INDOUT;
}

public byte getW2NSSEC3() {
return W2NSSEC3;
}

public byte getW2NSSEC5() {
return W2NSSEC5;
}

public byte getW2NSSEC8() {
return W2NSSEC8;
}

public boolean getW2SEC() {
return W2SEC;
}

public boolean getW2SIC() {
return W2SIC;
}

public byte getW2SIC92() {
return W2SIC92;
}

public byte getW2SIC92MIS() {
return W2SIC92MIS;
}

public boolean getW2SOC() {
return W2SOC;
}

public byte getW2SOC2000() {
return W2SOC2000;
}

public byte getW2SOC2000MIS() {
return W2SOC2000MIS;
}

public double getW2WGT() {
return W2WGT;
}

public double getW2WTBLD() {
return W2WTBLD;
}

public double getW2WTNUR() {
return W2WTNUR;
}

public double getWAIST1() {
return WAIST1;
}

public double getWAIST2() {
return WAIST2;
}

public double getWAIST3() {
return WAIST3;
}

public double getWEIGHT() {
return WEIGHT;
}

public byte getWHINTRO() {
return WHINTRO;
}

public byte getWHOKB() {
return WHOKB;
}

public byte getWHPNAB1() {
return WHPNAB1;
}

public byte getWHPNAB2() {
return WHPNAB2;
}

public boolean getWHPNAB3() {
return WHPNAB3;
}

public double getWHVAL() {
return WHVAL;
}

public double getWIDPEN_04() {
return WIDPEN_04;
}

public double getWIDPEN_SPA() {
return WIDPEN_SPA;
}

public byte getWJREL() {
return WJREL;
}

public int getWP1Q() {
return WP1Q;
}

public int getWP1SQ() {
return WP1SQ;
}

public int getWP2Q() {
return WP2Q;
}

public int getWP2SQ() {
return WP2SQ;
}

public int getWP3Q() {
return WP3Q;
}

public int getWP3SQ() {
return WP3SQ;
}

public int getWPAC2() {
return WPAC2;
}

public short getWPAC3() {
return WPAC3;
}

public int getWPAC4() {
return WPAC4;
}

public boolean getWPAC5() {
return WPAC5;
}

public short getWPACAT() {
return WPACAT;
}

public boolean getWPACAT2() {
return WPACAT2;
}

public boolean getWPACAT3() {
return WPACAT3;
}

public boolean getWPACAT4() {
return WPACAT4;
}

public short getWPACAT5() {
return WPACAT5;
}

public boolean getWPACAT6() {
return WPACAT6;
}

public byte getWPACHG() {
return WPACHG;
}

public byte getWPACOA2() {
return WPACOA2;
}

public byte getWPACOA3() {
return WPACOA3;
}

public byte getWPACOA4() {
return WPACOA4;
}

public byte getWPACOA5() {
return WPACOA5;
}

public boolean getWPACOA6() {
return WPACOA6;
}

public short getWPACOB2() {
return WPACOB2;
}

public short getWPACOB3() {
return WPACOB3;
}

public short getWPACOB4() {
return WPACOB4;
}

public short getWPACOB5() {
return WPACOB5;
}

public boolean getWPACOB6() {
return WPACOB6;
}

public byte getWPACOC2() {
return WPACOC2;
}

public boolean getWPACOC3() {
return WPACOC3;
}

public byte getWPACOC4() {
return WPACOC4;
}

public boolean getWPACOC5() {
return WPACOC5;
}

public boolean getWPACOC6() {
return WPACOC6;
}

public byte getWPACON2() {
return WPACON2;
}

public byte getWPACON3() {
return WPACON3;
}

public byte getWPACON4() {
return WPACON4;
}

public byte getWPACON5() {
return WPACON5;
}

public boolean getWPACON6() {
return WPACON6;
}

public byte getWPACT1() {
return WPACT1;
}

public byte getWPACT2() {
return WPACT2;
}

public byte getWPACT3() {
return WPACT3;
}

public byte getWPACT4() {
return WPACT4;
}

public byte getWPACT5() {
return WPACT5;
}

public boolean getWPACT6() {
return WPACT6;
}

public byte getWPADY2() {
return WPADY2;
}

public boolean getWPADY3() {
return WPADY3;
}

public boolean getWPADY4() {
return WPADY4;
}

public boolean getWPADY5() {
return WPADY5;
}

public boolean getWPADY6() {
return WPADY6;
}

public short getWPAECP() {
return WPAECP;
}

public boolean getWPAECP2() {
return WPAECP2;
}

public boolean getWPAECP3() {
return WPAECP3;
}

public boolean getWPAECP4() {
return WPAECP4;
}

public boolean getWPAECP5() {
return WPAECP5;
}

public byte getWPAM2AE() {
return WPAM2AE;
}

public int getWPAM2AL() {
return WPAM2AL;
}

public byte getWPAM2AR() {
return WPAM2AR;
}

public int getWPAM2AU() {
return WPAM2AU;
}

public byte getWPAM2TE() {
return WPAM2TE;
}

public int getWPAM2TL() {
return WPAM2TL;
}

public byte getWPAM2TR() {
return WPAM2TR;
}

public int getWPAM2TU() {
return WPAM2TU;
}

public byte getWPAM3AE() {
return WPAM3AE;
}

public int getWPAM3AL() {
return WPAM3AL;
}

public byte getWPAM3AR() {
return WPAM3AR;
}

public int getWPAM3AU() {
return WPAM3AU;
}

public boolean getWPAM3TE() {
return WPAM3TE;
}

public short getWPAM3TL() {
return WPAM3TL;
}

public boolean getWPAM3TR() {
return WPAM3TR;
}

public int getWPAM3TU() {
return WPAM3TU;
}

public byte getWPAM4AE() {
return WPAM4AE;
}

public int getWPAM4AL() {
return WPAM4AL;
}

public byte getWPAM4AR() {
return WPAM4AR;
}

public int getWPAM4AU() {
return WPAM4AU;
}

public byte getWPAM4TE() {
return WPAM4TE;
}

public short getWPAM4TL() {
return WPAM4TL;
}

public byte getWPAM4TR() {
return WPAM4TR;
}

public short getWPAM4TU() {
return WPAM4TU;
}

public byte getWPAM5AE() {
return WPAM5AE;
}

public short getWPAM5AL() {
return WPAM5AL;
}

public byte getWPAM5AR() {
return WPAM5AR;
}

public int getWPAM5AU() {
return WPAM5AU;
}

public boolean getWPAM5TE() {
return WPAM5TE;
}

public boolean getWPAM5TL() {
return WPAM5TL;
}

public boolean getWPAM5TR() {
return WPAM5TR;
}

public boolean getWPAM5TU() {
return WPAM5TU;
}

public byte getWPAMAE() {
return WPAMAE;
}

public int getWPAMAL() {
return WPAMAL;
}

public byte getWPAMAR() {
return WPAMAR;
}

public int getWPAMAU() {
return WPAMAU;
}

public short getWPAMEC2() {
return WPAMEC2;
}

public short getWPAMEC3() {
return WPAMEC3;
}

public short getWPAMEC4() {
return WPAMEC4;
}

public boolean getWPAMEC5() {
return WPAMEC5;
}

public int getWPAMOU() {
return WPAMOU;
}

public int getWPAMOU2() {
return WPAMOU2;
}

public int getWPAMOU3() {
return WPAMOU3;
}

public int getWPAMOU4() {
return WPAMOU4;
}

public int getWPAMOU5() {
return WPAMOU5;
}

public byte getWPAMTE() {
return WPAMTE;
}

public int getWPAMTL() {
return WPAMTL;
}

public byte getWPAMTR() {
return WPAMTR;
}

public int getWPAMTU() {
return WPAMTU;
}

public byte getWPANYC() {
return WPANYC;
}

public byte getWPANYC2() {
return WPANYC2;
}

public boolean getWPANYC3() {
return WPANYC3;
}

public byte getWPANYC4() {
return WPANYC4;
}

public byte getWPANYC5() {
return WPANYC5;
}

public boolean getWPANYC6() {
return WPANYC6;
}

public byte getWPANYP() {
return WPANYP;
}

public byte getWPAOTFE() {
return WPAOTFE;
}

public short getWPAOTFL() {
return WPAOTFL;
}

public byte getWPAOTFR() {
return WPAOTFR;
}

public short getWPAOTFU() {
return WPAOTFU;
}

public byte getWPAOTME() {
return WPAOTME;
}

public short getWPAOTML() {
return WPAOTML;
}

public byte getWPAOTMR() {
return WPAOTMR;
}

public short getWPAOTMU() {
return WPAOTMU;
}

public byte getWPAOTOE() {
return WPAOTOE;
}

public short getWPAOTOL() {
return WPAOTOL;
}

public byte getWPAOTOR() {
return WPAOTOR;
}

public short getWPAOTOU() {
return WPAOTOU;
}

public byte getWPAOTWE() {
return WPAOTWE;
}

public short getWPAOTWL() {
return WPAOTWL;
}

public byte getWPAOTWR() {
return WPAOTWR;
}

public short getWPAOTWU() {
return WPAOTWU;
}

public byte getWPAOTYE() {
return WPAOTYE;
}

public int getWPAOTYL() {
return WPAOTYL;
}

public byte getWPAOTYR() {
return WPAOTYR;
}

public int getWPAOTYU() {
return WPAOTYU;
}

public int getWPAPF2() {
return WPAPF2;
}

public byte getWPAPF2E() {
return WPAPF2E;
}

public int getWPAPF2L() {
return WPAPF2L;
}

public byte getWPAPF2R() {
return WPAPF2R;
}

public int getWPAPF2U() {
return WPAPF2U;
}

public int getWPAPF3() {
return WPAPF3;
}

public byte getWPAPF3E() {
return WPAPF3E;
}

public int getWPAPF3L() {
return WPAPF3L;
}

public byte getWPAPF3R() {
return WPAPF3R;
}

public int getWPAPF3U() {
return WPAPF3U;
}

public int getWPAPF4() {
return WPAPF4;
}

public byte getWPAPF4E() {
return WPAPF4E;
}

public int getWPAPF4L() {
return WPAPF4L;
}

public byte getWPAPF4R() {
return WPAPF4R;
}

public int getWPAPF4U() {
return WPAPF4U;
}

public int getWPAPF5() {
return WPAPF5;
}

public byte getWPAPF5E() {
return WPAPF5E;
}

public int getWPAPF5L() {
return WPAPF5L;
}

public byte getWPAPF5R() {
return WPAPF5R;
}

public int getWPAPF5U() {
return WPAPF5U;
}

public int getWPAPF6() {
return WPAPF6;
}

public byte getWPAPF6E() {
return WPAPF6E;
}

public short getWPAPF6L() {
return WPAPF6L;
}

public byte getWPAPF6R() {
return WPAPF6R;
}

public int getWPAPF6U() {
return WPAPF6U;
}

public byte getWPAPFE() {
return WPAPFE;
}

public double getWPAPFL() {
return WPAPFL;
}

public byte getWPAPFR() {
return WPAPFR;
}

public double getWPAPFU() {
return WPAPFU;
}

public byte getWPASA2E() {
return WPASA2E;
}

public short getWPASA2L() {
return WPASA2L;
}

public byte getWPASA2R() {
return WPASA2R;
}

public short getWPASA2U() {
return WPASA2U;
}

public byte getWPASA3E() {
return WPASA3E;
}

public short getWPASA3L() {
return WPASA3L;
}

public byte getWPASA3R() {
return WPASA3R;
}

public short getWPASA3U() {
return WPASA3U;
}

public byte getWPASA4E() {
return WPASA4E;
}

public short getWPASA4L() {
return WPASA4L;
}

public byte getWPASA4R() {
return WPASA4R;
}

public int getWPASA4U() {
return WPASA4U;
}

public byte getWPASA5E() {
return WPASA5E;
}

public short getWPASA5L() {
return WPASA5L;
}

public byte getWPASA5R() {
return WPASA5R;
}

public short getWPASA5U() {
return WPASA5U;
}

public boolean getWPASA6E() {
return WPASA6E;
}

public boolean getWPASA6L() {
return WPASA6L;
}

public boolean getWPASA6R() {
return WPASA6R;
}

public boolean getWPASA6U() {
return WPASA6U;
}

public short getWPASAL2() {
return WPASAL2;
}

public short getWPASAL3() {
return WPASAL3;
}

public int getWPASAL4() {
return WPASAL4;
}

public int getWPASAL5() {
return WPASAL5;
}

public short getWPASAL6() {
return WPASAL6;
}

public byte getWPASALE() {
return WPASALE;
}

public double getWPASALL() {
return WPASALL;
}

public byte getWPASALR() {
return WPASALR;
}

public double getWPASALU() {
return WPASALU;
}

public boolean getWPASK() {
return WPASK;
}

public boolean getWPASK2() {
return WPASK2;
}

public byte getWPASKD() {
return WPASKD;
}

public byte getWPASKE() {
return WPASKE;
}

public byte getWPASKF() {
return WPASKF;
}

public short getWPAUC() {
return WPAUC;
}

public boolean getWPAUC2() {
return WPAUC2;
}

public boolean getWPAUC3() {
return WPAUC3;
}

public short getWPAUC4() {
return WPAUC4;
}

public short getWPAUC5() {
return WPAUC5;
}

public boolean getWPAUC6() {
return WPAUC6;
}

public byte getWPAWP() {
return WPAWP;
}

public byte getWPBCHG1() {
return WPBCHG1;
}

public byte getWPBCHG2() {
return WPBCHG2;
}

public byte getWPBCHG3() {
return WPBCHG3;
}

public byte getWPBCHG4() {
return WPBCHG4;
}

public byte getWPBIMAE() {
return WPBIMAE;
}

public short getWPBIMAL() {
return WPBIMAL;
}

public byte getWPBIMAR() {
return WPBIMAR;
}

public short getWPBIMAU() {
return WPBIMAU;
}

public byte getWPBIWAE() {
return WPBIWAE;
}

public short getWPBIWAL() {
return WPBIWAL;
}

public byte getWPBIWAR() {
return WPBIWAR;
}

public short getWPBIWAU() {
return WPBIWAU;
}

public byte getWPBPS() {
return WPBPS;
}

public byte getWPBTHA2() {
return WPBTHA2;
}

public byte getWPBTHA3() {
return WPBTHA3;
}

public byte getWPBTHA4() {
return WPBTHA4;
}

public byte getWPBTHA5() {
return WPBTHA5;
}

public byte getWPBTHA6() {
return WPBTHA6;
}

public byte getWPBTHP2() {
return WPBTHP2;
}

public boolean getWPBTHP3() {
return WPBTHP3;
}

public byte getWPBTHP4() {
return WPBTHP4;
}

public byte getWPBTHP5() {
return WPBTHP5;
}

public boolean getWPBTHP6() {
return WPBTHP6;
}

public byte getWPBUSVE() {
return WPBUSVE;
}

public int getWPBUSVL() {
return WPBUSVL;
}

public byte getWPBUSVR() {
return WPBUSVR;
}

public int getWPBUSVU() {
return WPBUSVU;
}

public short getWPCAMT() {
return WPCAMT;
}

public short getWPCAMT2() {
return WPCAMT2;
}

public short getWPCAMT3() {
return WPCAMT3;
}

public short getWPCAMT4() {
return WPCAMT4;
}

public short getWPCAMT5() {
return WPCAMT5;
}

public int getWPCB() {
return WPCB;
}

public int getWPCB2() {
return WPCB2;
}

public byte getWPCB2E() {
return WPCB2E;
}

public int getWPCB2L() {
return WPCB2L;
}

public boolean getWPCB2R() {
return WPCB2R;
}

public int getWPCB2U() {
return WPCB2U;
}

public int getWPCB3() {
return WPCB3;
}

public boolean getWPCB3E() {
return WPCB3E;
}

public boolean getWPCB3L() {
return WPCB3L;
}

public boolean getWPCB3R() {
return WPCB3R;
}

public boolean getWPCB3U() {
return WPCB3U;
}

public int getWPCB4() {
return WPCB4;
}

public byte getWPCB4E() {
return WPCB4E;
}

public int getWPCB4L() {
return WPCB4L;
}

public byte getWPCB4R() {
return WPCB4R;
}

public short getWPCB4U() {
return WPCB4U;
}

public boolean getWPCB5() {
return WPCB5;
}

public boolean getWPCB5E() {
return WPCB5E;
}

public short getWPCB5L() {
return WPCB5L;
}

public boolean getWPCB5R() {
return WPCB5R;
}

public short getWPCB5U() {
return WPCB5U;
}

public byte getWPCBE() {
return WPCBE;
}

public int getWPCBL() {
return WPCBL;
}

public byte getWPCBR() {
return WPCBR;
}

public int getWPCBU() {
return WPCBU;
}

public byte getWPCEMP2() {
return WPCEMP2;
}

public byte getWPCEMP3() {
return WPCEMP3;
}

public byte getWPCEMP4() {
return WPCEMP4;
}

public byte getWPCEMP5() {
return WPCEMP5;
}

public byte getWPCHDM1() {
return WPCHDM1;
}

public byte getWPCHDM2() {
return WPCHDM2;
}

public boolean getWPCHDM3() {
return WPCHDM3;
}

public byte getWPCHG1() {
return WPCHG1;
}

public byte getWPCHG2() {
return WPCHG2;
}

public byte getWPCHG3() {
return WPCHG3;
}

public byte getWPCHG4() {
return WPCHG4;
}

public byte getWPCHGA() {
return WPCHGA;
}

public byte getWPCHGB1() {
return WPCHGB1;
}

public byte getWPCHGB2() {
return WPCHGB2;
}

public byte getWPCHGB3() {
return WPCHGB3;
}

public byte getWPCHGD1() {
return WPCHGD1;
}

public byte getWPCHGD2() {
return WPCHGD2;
}

public boolean getWPCHGD3() {
return WPCHGD3;
}

public byte getWPCHGDN() {
return WPCHGDN;
}

public byte getWPCHGL1() {
return WPCHGL1;
}

public byte getWPCHGL2() {
return WPCHGL2;
}

public byte getWPCHGL3() {
return WPCHGL3;
}

public boolean getWPCHGL4() {
return WPCHGL4;
}

public boolean getWPCHGL5() {
return WPCHGL5;
}

public byte getWPCHGM1() {
return WPCHGM1;
}

public byte getWPCHGM2() {
return WPCHGM2;
}

public byte getWPCHGM3() {
return WPCHGM3;
}

public byte getWPCHGM4() {
return WPCHGM4;
}

public byte getWPCHGNO() {
return WPCHGNO;
}

public byte getWPCHGO() {
return WPCHGO;
}

public byte getWPCHL11() {
return WPCHL11;
}

public byte getWPCHL12() {
return WPCHL12;
}

public byte getWPCHL13() {
return WPCHL13;
}

public boolean getWPCHL14() {
return WPCHL14;
}

public boolean getWPCHL15() {
return WPCHL15;
}

public byte getWPCJB1() {
return WPCJB1;
}

public byte getWPCJB2() {
return WPCJB2;
}

public byte getWPCJB3() {
return WPCJB3;
}

public byte getWPCJB4() {
return WPCJB4;
}

public boolean getWPCON() {
return WPCON;
}

public boolean getWPCON2() {
return WPCON2;
}

public boolean getWPCON3() {
return WPCON3;
}

public boolean getWPCON4() {
return WPCON4;
}

public boolean getWPCON5() {
return WPCON5;
}

public byte getWPCONS() {
return WPCONS;
}

public byte getWPCONS2() {
return WPCONS2;
}

public boolean getWPCONS3() {
return WPCONS3;
}

public byte getWPCONS4() {
return WPCONS4;
}

public byte getWPCONS5() {
return WPCONS5;
}

public byte getWPCONS6() {
return WPCONS6;
}

public boolean getWPCONY2() {
return WPCONY2;
}

public boolean getWPCONY3() {
return WPCONY3;
}

public short getWPCONY4() {
return WPCONY4;
}

public boolean getWPCONY5() {
return WPCONY5;
}

public boolean getWPCONY6() {
return WPCONY6;
}

public byte getWPCOS() {
return WPCOS;
}

public byte getWPCOS2() {
return WPCOS2;
}

public byte getWPCOS3() {
return WPCOS3;
}

public byte getWPCOS4() {
return WPCOS4;
}

public byte getWPCOS5() {
return WPCOS5;
}

public byte getWPCOS6() {
return WPCOS6;
}

public byte getWPCPER() {
return WPCPER;
}

public byte getWPCPER2() {
return WPCPER2;
}

public byte getWPCPER3() {
return WPCPER3;
}

public byte getWPCPER4() {
return WPCPER4;
}

public byte getWPCPER5() {
return WPCPER5;
}

public byte getWPCPS() {
return WPCPS;
}

public byte getWPCPS2() {
return WPCPS2;
}

public byte getWPCPSC() {
return WPCPSC;
}

public byte getWPCPSC2() {
return WPCPSC2;
}

public byte getWPCRAGE() {
return WPCRAGE;
}

public byte getWPCRET() {
return WPCRET;
}

public byte getWPCRETL() {
return WPCRETL;
}

public int getWPCUV() {
return WPCUV;
}

public int getWPCUV2() {
return WPCUV2;
}

public byte getWPCUV2E() {
return WPCUV2E;
}

public int getWPCUV2L() {
return WPCUV2L;
}

public byte getWPCUV2R() {
return WPCUV2R;
}

public int getWPCUV2U() {
return WPCUV2U;
}

public int getWPCUV3() {
return WPCUV3;
}

public byte getWPCUV3E() {
return WPCUV3E;
}

public int getWPCUV3L() {
return WPCUV3L;
}

public byte getWPCUV3R() {
return WPCUV3R;
}

public int getWPCUV3U() {
return WPCUV3U;
}

public int getWPCUV4() {
return WPCUV4;
}

public byte getWPCUV4E() {
return WPCUV4E;
}

public int getWPCUV4L() {
return WPCUV4L;
}

public byte getWPCUV4R() {
return WPCUV4R;
}

public int getWPCUV4U() {
return WPCUV4U;
}

public int getWPCUV5() {
return WPCUV5;
}

public byte getWPCUV5E() {
return WPCUV5E;
}

public short getWPCUV5L() {
return WPCUV5L;
}

public byte getWPCUV5R() {
return WPCUV5R;
}

public int getWPCUV5U() {
return WPCUV5U;
}

public byte getWPCUVE() {
return WPCUVE;
}

public int getWPCUVL() {
return WPCUVL;
}

public byte getWPCUVR() {
return WPCUVR;
}

public int getWPCUVU() {
return WPCUVU;
}

public short getWPDE2() {
return WPDE2;
}

public short getWPDE3() {
return WPDE3;
}

public boolean getWPDES2C() {
return WPDES2C;
}

public boolean getWPDES4C() {
return WPDES4C;
}

public boolean getWPDES5C() {
return WPDES5C;
}

public byte getWPDESC() {
return WPDESC;
}

public byte getWPDESPC() {
return WPDESPC;
}

public byte getWPDPSN() {
return WPDPSN;
}

public byte getWPDPSN2() {
return WPDPSN2;
}

public byte getWPDPSN3() {
return WPDPSN3;
}

public short getWPDS2() {
return WPDS2;
}

public short getWPDS3() {
return WPDS3;
}

public byte getWPDSNB() {
return WPDSNB;
}

public byte getWPDSNB2() {
return WPDSNB2;
}

public byte getWPDSNB3() {
return WPDSNB3;
}

public byte getWPDSNC() {
return WPDSNC;
}

public byte getWPDSNC2() {
return WPDSNC2;
}

public byte getWPDSNC3() {
return WPDSNC3;
}

public byte getWPDSND() {
return WPDSND;
}

public byte getWPDSND1() {
return WPDSND1;
}

public byte getWPDSND2() {
return WPDSND2;
}

public byte getWPDSND3() {
return WPDSND3;
}

public byte getWPDSP() {
return WPDSP;
}

public byte getWPDSP2() {
return WPDSP2;
}

public byte getWPDSP3() {
return WPDSP3;
}

public byte getWPDSP4() {
return WPDSP4;
}

public byte getWPDSP5() {
return WPDSP5;
}

public byte getWPDSP6() {
return WPDSP6;
}

public byte getWPEC() {
return WPEC;
}

public byte getWPECA() {
return WPECA;
}

public int getWPECNA() {
return WPECNA;
}

public byte getWPECNA2() {
return WPECNA2;
}

public byte getWPECNA3() {
return WPECNA3;
}

public short getWPECNA4() {
return WPECNA4;
}

public boolean getWPECNA5() {
return WPECNA5;
}

public boolean getWPECNA6() {
return WPECNA6;
}

public byte getWPECON() {
return WPECON;
}

public byte getWPECON2() {
return WPECON2;
}

public byte getWPECON3() {
return WPECON3;
}

public byte getWPECON4() {
return WPECON4;
}

public byte getWPECON5() {
return WPECON5;
}

public byte getWPECON6() {
return WPECON6;
}

public byte getWPECPP() {
return WPECPP;
}

public byte getWPECPP2() {
return WPECPP2;
}

public byte getWPECPP3() {
return WPECPP3;
}

public boolean getWPECPP4() {
return WPECPP4;
}

public boolean getWPECPP5() {
return WPECPP5;
}

public byte getWPEFS() {
return WPEFS;
}

public byte getWPEFS2() {
return WPEFS2;
}

public byte getWPEFS3() {
return WPEFS3;
}

public byte getWPEFS4() {
return WPEFS4;
}

public byte getWPEFS5() {
return WPEFS5;
}

public boolean getWPEFS6() {
return WPEFS6;
}

public boolean getWPEPER2() {
return WPEPER2;
}

public boolean getWPEPER3() {
return WPEPER3;
}

public byte getWPEPER4() {
return WPEPER4;
}

public boolean getWPEPER5() {
return WPEPER5;
}

public boolean getWPEPER6() {
return WPEPER6;
}

public byte getWPERA2() {
return WPERA2;
}

public byte getWPERA3() {
return WPERA3;
}

public byte getWPERA4() {
return WPERA4;
}

public byte getWPERA5() {
return WPERA5;
}

public byte getWPERA6() {
return WPERA6;
}

public byte getWPERC2() {
return WPERC2;
}

public byte getWPERC3() {
return WPERC3;
}

public byte getWPERC4() {
return WPERC4;
}

public byte getWPERC5() {
return WPERC5;
}

public byte getWPERC6() {
return WPERC6;
}

public byte getWPERCD() {
return WPERCD;
}

public byte getWPERCD1() {
return WPERCD1;
}

public byte getWPERCD2() {
return WPERCD2;
}

public byte getWPERCD3() {
return WPERCD3;
}

public byte getWPERET2() {
return WPERET2;
}

public byte getWPESJME() {
return WPESJME;
}

public short getWPESJML() {
return WPESJML;
}

public byte getWPESJMR() {
return WPESJMR;
}

public short getWPESJMU() {
return WPESJMU;
}

public byte getWPEXN() {
return WPEXN;
}

public byte getWPEXR() {
return WPEXR;
}

public byte getWPEXW() {
return WPEXW;
}

public byte getWPFINF() {
return WPFINF;
}

public byte getWPFINF2() {
return WPFINF2;
}

public byte getWPFINF3() {
return WPFINF3;
}

public byte getWPFINF4() {
return WPFINF4;
}

public byte getWPFINF5() {
return WPFINF5;
}

public byte getWPFINF6() {
return WPFINF6;
}

public byte getWPFRAS2() {
return WPFRAS2;
}

public byte getWPFRAS3() {
return WPFRAS3;
}

public byte getWPFRAS4() {
return WPFRAS4;
}

public boolean getWPFRAS5() {
return WPFRAS5;
}

public boolean getWPFRAS6() {
return WPFRAS6;
}

public byte getWPFRUC() {
return WPFRUC;
}

public boolean getWPFRUC2() {
return WPFRUC2;
}

public boolean getWPFRUC3() {
return WPFRUC3;
}

public byte getWPFRUC4() {
return WPFRUC4;
}

public byte getWPFRUC5() {
return WPFRUC5;
}

public boolean getWPFRUC6() {
return WPFRUC6;
}

public byte getWPFSAP2() {
return WPFSAP2;
}

public byte getWPFSAP3() {
return WPFSAP3;
}

public byte getWPFSAP4() {
return WPFSAP4;
}

public byte getWPFSAP5() {
return WPFSAP5;
}

public byte getWPFSAP6() {
return WPFSAP6;
}

public byte getWPFSAPC() {
return WPFSAPC;
}

public byte getWPFSAV2() {
return WPFSAV2;
}

public boolean getWPFSAV3() {
return WPFSAV3;
}

public byte getWPFSAV4() {
return WPFSAV4;
}

public byte getWPFSAV5() {
return WPFSAV5;
}

public boolean getWPFSAV6() {
return WPFSAV6;
}

public byte getWPFSC() {
return WPFSC;
}

public boolean getWPFSC2() {
return WPFSC2;
}

public boolean getWPFSC3() {
return WPFSC3;
}

public boolean getWPFSC4() {
return WPFSC4;
}

public boolean getWPFSC5() {
return WPFSC5;
}

public byte getWPFSCO2() {
return WPFSCO2;
}

public byte getWPFSCO3() {
return WPFSCO3;
}

public byte getWPFSCO4() {
return WPFSCO4;
}

public byte getWPFSCO5() {
return WPFSCO5;
}

public byte getWPFSCP2() {
return WPFSCP2;
}

public byte getWPFSCP3() {
return WPFSCP3;
}

public byte getWPFSCP4() {
return WPFSCP4;
}

public boolean getWPFSCP5() {
return WPFSCP5;
}

public byte getWPFSEC() {
return WPFSEC;
}

public boolean getWPFSEC2() {
return WPFSEC2;
}

public boolean getWPFSEC3() {
return WPFSEC3;
}

public boolean getWPFSEC4() {
return WPFSEC4;
}

public boolean getWPFSEC5() {
return WPFSEC5;
}

public boolean getWPFSP4C() {
return WPFSP4C;
}

public boolean getWPFSP5C() {
return WPFSP5C;
}

public byte getWPHCON() {
return WPHCON;
}

public byte getWPHCON2() {
return WPHCON2;
}

public byte getWPHCON3() {
return WPHCON3;
}

public byte getWPHCON4() {
return WPHCON4;
}

public byte getWPHCON5() {
return WPHCON5;
}

public byte getWPHLWZ() {
return WPHLWZ;
}

public boolean getWPID2E() {
return WPID2E;
}

public boolean getWPID2L() {
return WPID2L;
}

public boolean getWPID2R() {
return WPID2R;
}

public boolean getWPID2U() {
return WPID2U;
}

public boolean getWPID3E() {
return WPID3E;
}

public boolean getWPID3L() {
return WPID3L;
}

public boolean getWPID3R() {
return WPID3R;
}

public boolean getWPID3U() {
return WPID3U;
}

public byte getWPIDE() {
return WPIDE;
}

public boolean getWPIDL() {
return WPIDL;
}

public byte getWPIDR() {
return WPIDR;
}

public boolean getWPIDR2E() {
return WPIDR2E;
}

public boolean getWPIDR2L() {
return WPIDR2L;
}

public boolean getWPIDR2R() {
return WPIDR2R;
}

public boolean getWPIDR2U() {
return WPIDR2U;
}

public boolean getWPIDR3E() {
return WPIDR3E;
}

public boolean getWPIDR3L() {
return WPIDR3L;
}

public boolean getWPIDR3R() {
return WPIDR3R;
}

public boolean getWPIDR3U() {
return WPIDR3U;
}

public byte getWPIDRE() {
return WPIDRE;
}

public short getWPIDRL() {
return WPIDRL;
}

public byte getWPIDRR() {
return WPIDRR;
}

public int getWPIDRU() {
return WPIDRU;
}

public short getWPIDU() {
return WPIDU;
}

public byte getWPIFS01() {
return WPIFS01;
}

public byte getWPIFS02() {
return WPIFS02;
}

public byte getWPIFS03() {
return WPIFS03;
}

public byte getWPIFS1() {
return WPIFS1;
}

public byte getWPIFS10() {
return WPIFS10;
}

public byte getWPIFS11() {
return WPIFS11;
}

public byte getWPIFS12() {
return WPIFS12;
}

public byte getWPIFS19() {
return WPIFS19;
}

public byte getWPIFS2() {
return WPIFS2;
}

public byte getWPIFS20() {
return WPIFS20;
}

public byte getWPIFS28() {
return WPIFS28;
}

public byte getWPIFS29() {
return WPIFS29;
}

public byte getWPIFS3() {
return WPIFS3;
}

public boolean getWPIFS30() {
return WPIFS30;
}

public byte getWPIFS37() {
return WPIFS37;
}

public byte getWPIFS38() {
return WPIFS38;
}

public boolean getWPIFS39() {
return WPIFS39;
}

public byte getWPIFS46() {
return WPIFS46;
}

public boolean getWPIFS47() {
return WPIFS47;
}

public byte getWPIN14E() {
return WPIN14E;
}

public short getWPIN14L() {
return WPIN14L;
}

public byte getWPIN14R() {
return WPIN14R;
}

public int getWPIN14U() {
return WPIN14U;
}

public boolean getWPIN15E() {
return WPIN15E;
}

public boolean getWPIN15L() {
return WPIN15L;
}

public boolean getWPIN15R() {
return WPIN15R;
}

public boolean getWPIN15U() {
return WPIN15U;
}

public boolean getWPIN16E() {
return WPIN16E;
}

public boolean getWPIN16L() {
return WPIN16L;
}

public boolean getWPIN16R() {
return WPIN16R;
}

public boolean getWPIN16U() {
return WPIN16U;
}

public boolean getWPINC4E() {
return WPINC4E;
}

public boolean getWPINC4L() {
return WPINC4L;
}

public boolean getWPINC4R() {
return WPINC4R;
}

public boolean getWPINC4U() {
return WPINC4U;
}

public boolean getWPINC5E() {
return WPINC5E;
}

public boolean getWPINC5L() {
return WPINC5L;
}

public boolean getWPINC5R() {
return WPINC5R;
}

public boolean getWPINC5U() {
return WPINC5U;
}

public double getWPINCD() {
return WPINCD;
}

public short getWPINCD2() {
return WPINCD2;
}

public short getWPINCD3() {
return WPINCD3;
}

public int getWPIND() {
return WPIND;
}

public short getWPIND14() {
return WPIND14;
}

public short getWPIND15() {
return WPIND15;
}

public boolean getWPIND16() {
return WPIND16;
}

public short getWPIND2() {
return WPIND2;
}

public boolean getWPIND3() {
return WPIND3;
}

public boolean getWPIND4() {
return WPIND4;
}

public short getWPIND5() {
return WPIND5;
}

public byte getWPINF17() {
return WPINF17;
}

public byte getWPINF18() {
return WPINF18;
}

public byte getWPINF19() {
return WPINF19;
}

public byte getWPINF2() {
return WPINF2;
}

public byte getWPINF3() {
return WPINF3;
}

public byte getWPINF4() {
return WPINF4;
}

public byte getWPINF5() {
return WPINF5;
}

public byte getWPINF6() {
return WPINF6;
}

public byte getWPINF7() {
return WPINF7;
}

public byte getWPINF8() {
return WPINF8;
}

public byte getWPINFO() {
return WPINFO;
}

public byte getWPINTA() {
return WPINTA;
}

public byte getWPKP() {
return WPKP;
}

public byte getWPKP2() {
return WPKP2;
}

public byte getWPKP2C() {
return WPKP2C;
}

public byte getWPKPC() {
return WPKPC;
}

public byte getWPKPS() {
return WPKPS;
}

public byte getWPKPS2() {
return WPKPS2;
}

public byte getWPKPS3() {
return WPKPS3;
}

public short getWPLAC() {
return WPLAC;
}

public short getWPLAC2() {
return WPLAC2;
}

public boolean getWPLAC3() {
return WPLAC3;
}

public short getWPLAC4() {
return WPLAC4;
}

public boolean getWPLAC5() {
return WPLAC5;
}

public byte getWPLASM() {
return WPLASM;
}

public byte getWPLASM2() {
return WPLASM2;
}

public byte getWPLASM3() {
return WPLASM3;
}

public byte getWPLASM4() {
return WPLASM4;
}

public byte getWPLASM5() {
return WPLASM5;
}

public byte getWPLASP() {
return WPLASP;
}

public byte getWPLASP2() {
return WPLASP2;
}

public byte getWPLASP3() {
return WPLASP3;
}

public byte getWPLASP4() {
return WPLASP4;
}

public byte getWPLASP5() {
return WPLASP5;
}

public short getWPLASY() {
return WPLASY;
}

public short getWPLASY2() {
return WPLASY2;
}

public short getWPLASY3() {
return WPLASY3;
}

public short getWPLASY4() {
return WPLASY4;
}

public short getWPLASY5() {
return WPLASY5;
}

public byte getWPLCOM2() {
return WPLCOM2;
}

public byte getWPLCOM3() {
return WPLCOM3;
}

public byte getWPLCOM4() {
return WPLCOM4;
}

public boolean getWPLCOM5() {
return WPLCOM5;
}

public short getWPLCOY2() {
return WPLCOY2;
}

public short getWPLCOY3() {
return WPLCOY3;
}

public short getWPLCOY4() {
return WPLCOY4;
}

public short getWPLCOY5() {
return WPLCOY5;
}

public byte getWPLFT13() {
return WPLFT13;
}

public byte getWPLFTM1() {
return WPLFTM1;
}

public byte getWPLFTM2() {
return WPLFTM2;
}

public boolean getWPLFTM3() {
return WPLFTM3;
}

public byte getWPLFTM4() {
return WPLFTM4;
}

public byte getWPLFTM7() {
return WPLFTM7;
}

public byte getWPLFTM8() {
return WPLFTM8;
}

public boolean getWPLFTM9() {
return WPLFTM9;
}

public byte getWPLFTP1() {
return WPLFTP1;
}

public byte getWPLFTP2() {
return WPLFTP2;
}

public boolean getWPLFTP3() {
return WPLFTP3;
}

public byte getWPLFTP5() {
return WPLFTP5;
}

public byte getWPLFTP6() {
return WPLFTP6;
}

public boolean getWPLFTP7() {
return WPLFTP7;
}

public byte getWPLFTP9() {
return WPLFTP9;
}

public byte getWPLIMWK() {
return WPLIMWK;
}

public byte getWPLJO12() {
return WPLJO12;
}

public byte getWPLJO13() {
return WPLJO13;
}

public byte getWPLJO14() {
return WPLJO14;
}

public byte getWPLJO15() {
return WPLJO15;
}

public boolean getWPLJO16() {
return WPLJO16;
}

public byte getWPLJOB1() {
return WPLJOB1;
}

public byte getWPLJOB2() {
return WPLJOB2;
}

public byte getWPLJOB3() {
return WPLJOB3;
}

public byte getWPLJOB4() {
return WPLJOB4;
}

public boolean getWPLJOB5() {
return WPLJOB5;
}

public byte getWPLJOBM() {
return WPLJOBM;
}

public byte getWPLKCH1() {
return WPLKCH1;
}

public byte getWPLKCH2() {
return WPLKCH2;
}

public byte getWPLKCH3() {
return WPLKCH3;
}

public byte getWPLKCH4() {
return WPLKCH4;
}

public byte getWPLKCH5() {
return WPLKCH5;
}

public boolean getWPLKCH6() {
return WPLKCH6;
}

public byte getWPLKCM1() {
return WPLKCM1;
}

public byte getWPLKCM2() {
return WPLKCM2;
}

public byte getWPLKCM3() {
return WPLKCM3;
}

public byte getWPLKCM4() {
return WPLKCM4;
}

public byte getWPLKCM5() {
return WPLKCM5;
}

public boolean getWPLKCM6() {
return WPLKCM6;
}

public byte getWPLLJM() {
return WPLLJM;
}

public short getWPLLJY() {
return WPLLJY;
}

public byte getWPLLSM() {
return WPLLSM;
}

public short getWPLLSY() {
return WPLLSY;
}

public byte getWPLM14E() {
return WPLM14E;
}

public int getWPLM14L() {
return WPLM14L;
}

public byte getWPLM14R() {
return WPLM14R;
}

public int getWPLM14U() {
return WPLM14U;
}

public byte getWPLM15E() {
return WPLM15E;
}

public short getWPLM15L() {
return WPLM15L;
}

public byte getWPLM15R() {
return WPLM15R;
}

public short getWPLM15U() {
return WPLM15U;
}

public boolean getWPLM16E() {
return WPLM16E;
}

public boolean getWPLM16L() {
return WPLM16L;
}

public boolean getWPLM16R() {
return WPLM16R;
}

public short getWPLM16U() {
return WPLM16U;
}

public int getWPLMA() {
return WPLMA;
}

public int getWPLMA14() {
return WPLMA14;
}

public int getWPLMA15() {
return WPLMA15;
}

public short getWPLMA16() {
return WPLMA16;
}

public int getWPLMA2() {
return WPLMA2;
}

public short getWPLMA3() {
return WPLMA3;
}

public short getWPLMA4() {
return WPLMA4;
}

public boolean getWPLMA5() {
return WPLMA5;
}

public byte getWPLMP2E() {
return WPLMP2E;
}

public byte getWPLMP2L() {
return WPLMP2L;
}

public byte getWPLMP2R() {
return WPLMP2R;
}

public short getWPLMP2U() {
return WPLMP2U;
}

public byte getWPLMP3E() {
return WPLMP3E;
}

public byte getWPLMP3L() {
return WPLMP3L;
}

public byte getWPLMP3R() {
return WPLMP3R;
}

public byte getWPLMP3U() {
return WPLMP3U;
}

public boolean getWPLMP4E() {
return WPLMP4E;
}

public boolean getWPLMP4L() {
return WPLMP4L;
}

public boolean getWPLMP4R() {
return WPLMP4R;
}

public boolean getWPLMP4U() {
return WPLMP4U;
}

public boolean getWPLMP5E() {
return WPLMP5E;
}

public boolean getWPLMP5L() {
return WPLMP5L;
}

public boolean getWPLMP5R() {
return WPLMP5R;
}

public boolean getWPLMP5U() {
return WPLMP5U;
}

public byte getWPLMPAE() {
return WPLMPAE;
}

public short getWPLMPAL() {
return WPLMPAL;
}

public byte getWPLMPAR() {
return WPLMPAR;
}

public short getWPLMPAU() {
return WPLMPAU;
}

public byte getWPLMPE() {
return WPLMPE;
}

public int getWPLMPL() {
return WPLMPL;
}

public byte getWPLMPR() {
return WPLMPR;
}

public int getWPLMPU() {
return WPLMPU;
}

public byte getWPLMS() {
return WPLMS;
}

public byte getWPLMS14() {
return WPLMS14;
}

public byte getWPLMS15() {
return WPLMS15;
}

public byte getWPLMS16() {
return WPLMS16;
}

public byte getWPLMS2() {
return WPLMS2;
}

public byte getWPLMS3() {
return WPLMS3;
}

public byte getWPLMS4() {
return WPLMS4;
}

public byte getWPLMS5() {
return WPLMS5;
}

public byte getWPLP2AE() {
return WPLP2AE;
}

public int getWPLP2AL() {
return WPLP2AL;
}

public byte getWPLP2AR() {
return WPLP2AR;
}

public int getWPLP2AU() {
return WPLP2AU;
}

public boolean getWPLP2TE() {
return WPLP2TE;
}

public boolean getWPLP2TL() {
return WPLP2TL;
}

public boolean getWPLP2TR() {
return WPLP2TR;
}

public boolean getWPLP2TU() {
return WPLP2TU;
}

public boolean getWPLP3AE() {
return WPLP3AE;
}

public boolean getWPLP3AL() {
return WPLP3AL;
}

public boolean getWPLP3AR() {
return WPLP3AR;
}

public boolean getWPLP3AU() {
return WPLP3AU;
}

public boolean getWPLP3TE() {
return WPLP3TE;
}

public boolean getWPLP3TL() {
return WPLP3TL;
}

public boolean getWPLP3TR() {
return WPLP3TR;
}

public boolean getWPLP3TU() {
return WPLP3TU;
}

public byte getWPLP4AE() {
return WPLP4AE;
}

public short getWPLP4AL() {
return WPLP4AL;
}

public byte getWPLP4AR() {
return WPLP4AR;
}

public int getWPLP4AU() {
return WPLP4AU;
}

public boolean getWPLP4TE() {
return WPLP4TE;
}

public boolean getWPLP4TL() {
return WPLP4TL;
}

public boolean getWPLP4TR() {
return WPLP4TR;
}

public boolean getWPLP4TU() {
return WPLP4TU;
}

public boolean getWPLP5AE() {
return WPLP5AE;
}

public short getWPLP5AL() {
return WPLP5AL;
}

public boolean getWPLP5AR() {
return WPLP5AR;
}

public int getWPLP5AU() {
return WPLP5AU;
}

public boolean getWPLP5TE() {
return WPLP5TE;
}

public boolean getWPLP5TL() {
return WPLP5TL;
}

public boolean getWPLP5TR() {
return WPLP5TR;
}

public boolean getWPLP5TU() {
return WPLP5TU;
}

public int getWPLPA() {
return WPLPA;
}

public int getWPLPA2() {
return WPLPA2;
}

public short getWPLPA3() {
return WPLPA3;
}

public short getWPLPA4() {
return WPLPA4;
}

public boolean getWPLPA5() {
return WPLPA5;
}

public byte getWPLPAE() {
return WPLPAE;
}

public int getWPLPAL() {
return WPLPAL;
}

public byte getWPLPAR() {
return WPLPAR;
}

public int getWPLPAU() {
return WPLPAU;
}

public byte getWPLPE() {
return WPLPE;
}

public byte getWPLPE2() {
return WPLPE2;
}

public byte getWPLPE3() {
return WPLPE3;
}

public byte getWPLPE4() {
return WPLPE4;
}

public boolean getWPLPE5() {
return WPLPE5;
}

public byte getWPLPEM() {
return WPLPEM;
}

public byte getWPLPEM2() {
return WPLPEM2;
}

public byte getWPLPEM3() {
return WPLPEM3;
}

public byte getWPLPEM4() {
return WPLPEM4;
}

public byte getWPLPEM5() {
return WPLPEM5;
}

public short getWPLPEY() {
return WPLPEY;
}

public short getWPLPEY2() {
return WPLPEY2;
}

public short getWPLPEY3() {
return WPLPEY3;
}

public short getWPLPEY4() {
return WPLPEY4;
}

public short getWPLPEY5() {
return WPLPEY5;
}

public byte getWPLPSM() {
return WPLPSM;
}

public byte getWPLPSM2() {
return WPLPSM2;
}

public byte getWPLPSM3() {
return WPLPSM3;
}

public byte getWPLPSM4() {
return WPLPSM4;
}

public byte getWPLPSM5() {
return WPLPSM5;
}

public short getWPLPSY() {
return WPLPSY;
}

public short getWPLPSY2() {
return WPLPSY2;
}

public short getWPLPSY3() {
return WPLPSY3;
}

public short getWPLPSY4() {
return WPLPSY4;
}

public short getWPLPSY5() {
return WPLPSY5;
}

public boolean getWPLPTE() {
return WPLPTE;
}

public short getWPLPTL() {
return WPLPTL;
}

public boolean getWPLPTR() {
return WPLPTR;
}

public short getWPLPTU() {
return WPLPTU;
}

public byte getWPLRCM() {
return WPLRCM;
}

public boolean getWPLRCM2() {
return WPLRCM2;
}

public boolean getWPLRCM3() {
return WPLRCM3;
}

public byte getWPLRCM4() {
return WPLRCM4;
}

public boolean getWPLRCM5() {
return WPLRCM5;
}

public short getWPLRCY() {
return WPLRCY;
}

public short getWPLRCY2() {
return WPLRCY2;
}

public boolean getWPLRCY3() {
return WPLRCY3;
}

public short getWPLRCY4() {
return WPLRCY4;
}

public short getWPLRCY5() {
return WPLRCY5;
}

public byte getWPLU2E() {
return WPLU2E;
}

public int getWPLU2L() {
return WPLU2L;
}

public byte getWPLU2R() {
return WPLU2R;
}

public int getWPLU2U() {
return WPLU2U;
}

public boolean getWPLU3E() {
return WPLU3E;
}

public short getWPLU3L() {
return WPLU3L;
}

public boolean getWPLU3R() {
return WPLU3R;
}

public short getWPLU3U() {
return WPLU3U;
}

public byte getWPLU4E() {
return WPLU4E;
}

public int getWPLU4L() {
return WPLU4L;
}

public byte getWPLU4R() {
return WPLU4R;
}

public int getWPLU4U() {
return WPLU4U;
}

public byte getWPLU5E() {
return WPLU5E;
}

public int getWPLU5L() {
return WPLU5L;
}

public byte getWPLU5R() {
return WPLU5R;
}

public int getWPLU5U() {
return WPLU5U;
}

public boolean getWPLU6E() {
return WPLU6E;
}

public short getWPLU6L() {
return WPLU6L;
}

public boolean getWPLU6R() {
return WPLU6R;
}

public short getWPLU6U() {
return WPLU6U;
}

public byte getWPLUE() {
return WPLUE;
}

public int getWPLUL() {
return WPLUL;
}

public byte getWPLUM2E() {
return WPLUM2E;
}

public int getWPLUM2L() {
return WPLUM2L;
}

public byte getWPLUM2R() {
return WPLUM2R;
}

public int getWPLUM2U() {
return WPLUM2U;
}

public byte getWPLUM3E() {
return WPLUM3E;
}

public short getWPLUM3L() {
return WPLUM3L;
}

public byte getWPLUM3R() {
return WPLUM3R;
}

public short getWPLUM3U() {
return WPLUM3U;
}

public byte getWPLUME() {
return WPLUME;
}

public int getWPLUML() {
return WPLUML;
}

public int getWPLUMP2() {
return WPLUMP2;
}

public int getWPLUMP3() {
return WPLUMP3;
}

public int getWPLUMP4() {
return WPLUMP4;
}

public int getWPLUMP5() {
return WPLUMP5;
}

public short getWPLUMP6() {
return WPLUMP6;
}

public byte getWPLUMPE() {
return WPLUMPE;
}

public double getWPLUMPL() {
return WPLUMPL;
}

public byte getWPLUMPR() {
return WPLUMPR;
}

public double getWPLUMPU() {
return WPLUMPU;
}

public byte getWPLUMR() {
return WPLUMR;
}

public int getWPLUMU() {
return WPLUMU;
}

public double getWPLUPA() {
return WPLUPA;
}

public int getWPLUPA2() {
return WPLUPA2;
}

public int getWPLUPA3() {
return WPLUPA3;
}

public byte getWPLUPS() {
return WPLUPS;
}

public byte getWPLUPS2() {
return WPLUPS2;
}

public byte getWPLUPS3() {
return WPLUPS3;
}

public byte getWPLUR() {
return WPLUR;
}

public int getWPLUU() {
return WPLUU;
}

public byte getWPMANPP() {
return WPMANPP;
}

public byte getWPMANSP() {
return WPMANSP;
}

public byte getWPMC2() {
return WPMC2;
}

public byte getWPMC3() {
return WPMC3;
}

public byte getWPMC4() {
return WPMC4;
}

public byte getWPMC5() {
return WPMC5;
}

public byte getWPMC6() {
return WPMC6;
}

public short getWPMCA2() {
return WPMCA2;
}

public short getWPMCA3() {
return WPMCA3;
}

public short getWPMCA4() {
return WPMCA4;
}

public byte getWPMCA5() {
return WPMCA5;
}

public boolean getWPMCA6() {
return WPMCA6;
}

public byte getWPMCAF2() {
return WPMCAF2;
}

public byte getWPMCAF3() {
return WPMCAF3;
}

public byte getWPMCAF4() {
return WPMCAF4;
}

public byte getWPMCAF5() {
return WPMCAF5;
}

public boolean getWPMCAF6() {
return WPMCAF6;
}

public byte getWPMCON2() {
return WPMCON2;
}

public byte getWPMCON3() {
return WPMCON3;
}

public byte getWPMCON4() {
return WPMCON4;
}

public byte getWPMCON5() {
return WPMCON5;
}

public byte getWPMCRTP() {
return WPMCRTP;
}

public byte getWPMCRTS() {
return WPMCRTS;
}

public byte getWPMEC2() {
return WPMEC2;
}

public byte getWPMEC3() {
return WPMEC3;
}

public byte getWPMEC4() {
return WPMEC4;
}

public byte getWPMEC5() {
return WPMEC5;
}

public byte getWPMFQ() {
return WPMFQ;
}

public byte getWPMFRC() {
return WPMFRC;
}

public byte getWPMFRC2() {
return WPMFRC2;
}

public byte getWPMFRC3() {
return WPMFRC3;
}

public byte getWPMFRC4() {
return WPMFRC4;
}

public byte getWPMFRC5() {
return WPMFRC5;
}

public byte getWPMFRC6() {
return WPMFRC6;
}

public byte getWPMHIE() {
return WPMHIE;
}

public short getWPMHIL() {
return WPMHIL;
}

public byte getWPMHIR() {
return WPMHIR;
}

public short getWPMHIU() {
return WPMHIU;
}

public int getWPMLAS() {
return WPMLAS;
}

public int getWPMLAS2() {
return WPMLAS2;
}

public short getWPMLAS3() {
return WPMLAS3;
}

public short getWPMLAS4() {
return WPMLAS4;
}

public short getWPMLAS5() {
return WPMLAS5;
}

public byte getWPMMIN2() {
return WPMMIN2;
}

public byte getWPMMIN3() {
return WPMMIN3;
}

public byte getWPMMIN4() {
return WPMMIN4;
}

public byte getWPMMIN5() {
return WPMMIN5;
}

public boolean getWPMMIN6() {
return WPMMIN6;
}

public int getWPMPAH() {
return WPMPAH;
}

public int getWPMPAL() {
return WPMPAL;
}

public short getWPMRC() {
return WPMRC;
}

public short getWPMRC2() {
return WPMRC2;
}

public short getWPMRC3() {
return WPMRC3;
}

public byte getWPMRC4() {
return WPMRC4;
}

public boolean getWPMRC5() {
return WPMRC5;
}

public byte getWPMRCP() {
return WPMRCP;
}

public byte getWPMRCP2() {
return WPMRCP2;
}

public byte getWPMRCP3() {
return WPMRCP3;
}

public boolean getWPMRCP4() {
return WPMRCP4;
}

public boolean getWPMRCP5() {
return WPMRCP5;
}

public int getWPMSAH() {
return WPMSAH;
}

public int getWPMSAL() {
return WPMSAL;
}

public byte getWPMSC() {
return WPMSC;
}

public byte getWPMSC2() {
return WPMSC2;
}

public byte getWPMSC3() {
return WPMSC3;
}

public byte getWPMSFQ() {
return WPMSFQ;
}

public byte getWPMSQ() {
return WPMSQ;
}

public byte getWPMSSQ() {
return WPMSSQ;
}

public byte getWPMSTQ() {
return WPMSTQ;
}

public byte getWPMTQ() {
return WPMTQ;
}

public byte getWPMUC() {
return WPMUC;
}

public boolean getWPMUC2() {
return WPMUC2;
}

public boolean getWPMUC3() {
return WPMUC3;
}

public byte getWPMUC4() {
return WPMUC4;
}

public byte getWPMUC5() {
return WPMUC5;
}

public boolean getWPMUC6() {
return WPMUC6;
}

public byte getWPMYNJ() {
return WPMYNJ;
}

public byte getWPNCH17() {
return WPNCH17;
}

public boolean getWPNCH18() {
return WPNCH18;
}

public byte getWPNCHB1() {
return WPNCHB1;
}

public boolean getWPNCHB2() {
return WPNCHB2;
}

public byte getWPNCHG1() {
return WPNCHG1;
}

public byte getWPNCHG2() {
return WPNCHG2;
}

public boolean getWPNCHG3() {
return WPNCHG3;
}

public byte getWPNCHGA() {
return WPNCHGA;
}

public byte getWPNCHGN() {
return WPNCHGN;
}

public byte getWPNCHGO() {
return WPNCHGO;
}

public byte getWPNCHM1() {
return WPNCHM1;
}

public byte getWPNCHM2() {
return WPNCHM2;
}

public boolean getWPNCHM3() {
return WPNCHM3;
}

public byte getWPNIFP() {
return WPNIFP;
}

public byte getWPNIFP2() {
return WPNIFP2;
}

public byte getWPNIFP3() {
return WPNIFP3;
}

public byte getWPNIFP4() {
return WPNIFP4;
}

public boolean getWPNIFP5() {
return WPNIFP5;
}

public byte getWPNIRR2() {
return WPNIRR2;
}

public byte getWPNIRR3() {
return WPNIRR3;
}

public byte getWPNIRR4() {
return WPNIRR4;
}

public boolean getWPNIRR5() {
return WPNIRR5;
}

public byte getWPNOL12() {
return WPNOL12;
}

public byte getWPNOL13() {
return WPNOL13;
}

public byte getWPNOL14() {
return WPNOL14;
}

public byte getWPNOL15() {
return WPNOL15;
}

public byte getWPNOL16() {
return WPNOL16;
}

public byte getWPNOLK1() {
return WPNOLK1;
}

public byte getWPNOLK2() {
return WPNOLK2;
}

public byte getWPNOLK3() {
return WPNOLK3;
}

public byte getWPNOLK4() {
return WPNOLK4;
}

public byte getWPNOLK5() {
return WPNOLK5;
}

public byte getWPNOSC() {
return WPNOSC;
}

public byte getWPNRA2() {
return WPNRA2;
}

public byte getWPNRA3() {
return WPNRA3;
}

public byte getWPNRA4() {
return WPNRA4;
}

public byte getWPNRA5() {
return WPNRA5;
}

public byte getWPNRA6() {
return WPNRA6;
}

public boolean getWPNUM() {
return WPNUM;
}

public boolean getWPNUM11() {
return WPNUM11;
}

public boolean getWPNUM12() {
return WPNUM12;
}

public boolean getWPNUM14() {
return WPNUM14;
}

public boolean getWPNUM15() {
return WPNUM15;
}

public boolean getWPNUM16() {
return WPNUM16;
}

public boolean getWPNUM17() {
return WPNUM17;
}

public boolean getWPNUM18() {
return WPNUM18;
}

public boolean getWPNUM19() {
return WPNUM19;
}

public boolean getWPNUM2() {
return WPNUM2;
}

public boolean getWPNUM20() {
return WPNUM20;
}

public boolean getWPNUM21() {
return WPNUM21;
}

public boolean getWPNUM22() {
return WPNUM22;
}

public boolean getWPNUM23() {
return WPNUM23;
}

public boolean getWPNUM24() {
return WPNUM24;
}

public boolean getWPNUM25() {
return WPNUM25;
}

public boolean getWPNUM26() {
return WPNUM26;
}

public boolean getWPNUM27() {
return WPNUM27;
}

public boolean getWPNUM28() {
return WPNUM28;
}

public boolean getWPNUM29() {
return WPNUM29;
}

public boolean getWPNUM3() {
return WPNUM3;
}

public boolean getWPNUM30() {
return WPNUM30;
}

public boolean getWPNUM31() {
return WPNUM31;
}

public boolean getWPNUM4() {
return WPNUM4;
}

public boolean getWPNUM5() {
return WPNUM5;
}

public boolean getWPNUM6() {
return WPNUM6;
}

public boolean getWPNUM7() {
return WPNUM7;
}

public boolean getWPNUM8() {
return WPNUM8;
}

public boolean getWPNUM9() {
return WPNUM9;
}

public byte getWPOARS() {
return WPOARS;
}

public byte getWPOARS2() {
return WPOARS2;
}

public byte getWPOCHG() {
return WPOCHG;
}

public byte getWPOJ() {
return WPOJ;
}

public byte getWPOJ2() {
return WPOJ2;
}

public byte getWPOJ3() {
return WPOJ3;
}

public byte getWPOJ4() {
return WPOJ4;
}

public byte getWPOJ5() {
return WPOJ5;
}

public byte getWPOWB() {
return WPOWB;
}

public byte getWPOWB2() {
return WPOWB2;
}

public byte getWPOWB3() {
return WPOWB3;
}

public byte getWPOWB4() {
return WPOWB4;
}

public byte getWPOWB5() {
return WPOWB5;
}

public byte getWPPAY17() {
return WPPAY17;
}

public byte getWPPAY18() {
return WPPAY18;
}

public byte getWPPAY19() {
return WPPAY19;
}

public byte getWPPAY2() {
return WPPAY2;
}

public byte getWPPAY3() {
return WPPAY3;
}

public byte getWPPAY4() {
return WPPAY4;
}

public byte getWPPAY5() {
return WPPAY5;
}

public byte getWPPAY6() {
return WPPAY6;
}

public byte getWPPAY7() {
return WPPAY7;
}

public byte getWPPAY8() {
return WPPAY8;
}

public byte getWPPCON2() {
return WPPCON2;
}

public byte getWPPCON3() {
return WPPCON3;
}

public byte getWPPCON4() {
return WPPCON4;
}

public byte getWPPCON5() {
return WPPCON5;
}

public byte getWPPDES() {
return WPPDES;
}

public byte getWPPDES2() {
return WPPDES2;
}

public byte getWPPDOC() {
return WPPDOC;
}

public byte getWPPE2AE() {
return WPPE2AE;
}

public short getWPPE2AL() {
return WPPE2AL;
}

public byte getWPPE2AR() {
return WPPE2AR;
}

public int getWPPE2AU() {
return WPPE2AU;
}

public boolean getWPPE2TE() {
return WPPE2TE;
}

public boolean getWPPE2TL() {
return WPPE2TL;
}

public boolean getWPPE2TR() {
return WPPE2TR;
}

public short getWPPE2TU() {
return WPPE2TU;
}

public byte getWPPE3AE() {
return WPPE3AE;
}

public short getWPPE3AL() {
return WPPE3AL;
}

public byte getWPPE3AR() {
return WPPE3AR;
}

public short getWPPE3AU() {
return WPPE3AU;
}

public boolean getWPPE3TE() {
return WPPE3TE;
}

public boolean getWPPE3TL() {
return WPPE3TL;
}

public boolean getWPPE3TR() {
return WPPE3TR;
}

public boolean getWPPE3TU() {
return WPPE3TU;
}

public byte getWPPE4AE() {
return WPPE4AE;
}

public int getWPPE4AL() {
return WPPE4AL;
}

public byte getWPPE4AR() {
return WPPE4AR;
}

public int getWPPE4AU() {
return WPPE4AU;
}

public boolean getWPPE4TE() {
return WPPE4TE;
}

public int getWPPE4TL() {
return WPPE4TL;
}

public boolean getWPPE4TR() {
return WPPE4TR;
}

public boolean getWPPE4TU() {
return WPPE4TU;
}

public byte getWPPE5AE() {
return WPPE5AE;
}

public int getWPPE5AL() {
return WPPE5AL;
}

public byte getWPPE5AR() {
return WPPE5AR;
}

public int getWPPE5AU() {
return WPPE5AU;
}

public boolean getWPPE5TE() {
return WPPE5TE;
}

public boolean getWPPE5TL() {
return WPPE5TL;
}

public boolean getWPPE5TR() {
return WPPE5TR;
}

public boolean getWPPE5TU() {
return WPPE5TU;
}

public byte getWPPE6AE() {
return WPPE6AE;
}

public int getWPPE6AL() {
return WPPE6AL;
}

public byte getWPPE6AR() {
return WPPE6AR;
}

public short getWPPE6AU() {
return WPPE6AU;
}

public boolean getWPPE6TE() {
return WPPE6TE;
}

public boolean getWPPE6TL() {
return WPPE6TL;
}

public boolean getWPPE6TR() {
return WPPE6TR;
}

public boolean getWPPE6TU() {
return WPPE6TU;
}

public byte getWPPEAE() {
return WPPEAE;
}

public int getWPPEAL() {
return WPPEAL;
}

public byte getWPPEAR() {
return WPPEAR;
}

public int getWPPEAU() {
return WPPEAU;
}

public int getWPPENB2() {
return WPPENB2;
}

public int getWPPENB3() {
return WPPENB3;
}

public int getWPPENB4() {
return WPPENB4;
}

public int getWPPENB5() {
return WPPENB5;
}

public short getWPPENB6() {
return WPPENB6;
}

public byte getWPPEPR() {
return WPPEPR;
}

public byte getWPPER() {
return WPPER;
}

public boolean getWPPER2() {
return WPPER2;
}

public boolean getWPPER3() {
return WPPER3;
}

public byte getWPPER4() {
return WPPER4;
}

public boolean getWPPER5() {
return WPPER5;
}

public boolean getWPPER6() {
return WPPER6;
}

public byte getWPPERC2() {
return WPPERC2;
}

public byte getWPPERC3() {
return WPPERC3;
}

public byte getWPPERC4() {
return WPPERC4;
}

public byte getWPPERC5() {
return WPPERC5;
}

public boolean getWPPERC6() {
return WPPERC6;
}

public byte getWPPETE() {
return WPPETE;
}

public int getWPPETL() {
return WPPETL;
}

public byte getWPPETR() {
return WPPETR;
}

public int getWPPETU() {
return WPPETU;
}

public byte getWPPEXP() {
return WPPEXP;
}

public byte getWPPEXP2() {
return WPPEXP2;
}

public byte getWPPEXP3() {
return WPPEXP3;
}

public byte getWPPEXP4() {
return WPPEXP4;
}

public byte getWPPEXP5() {
return WPPEXP5;
}

public boolean getWPPF2E() {
return WPPF2E;
}

public boolean getWPPF2L() {
return WPPF2L;
}

public boolean getWPPF2R() {
return WPPF2R;
}

public boolean getWPPF2U() {
return WPPF2U;
}

public byte getWPPFE() {
return WPPFE;
}

public int getWPPFL() {
return WPPFL;
}

public byte getWPPFR() {
return WPPFR;
}

public int getWPPFU() {
return WPPFU;
}

public boolean getWPPFV3E() {
return WPPFV3E;
}

public boolean getWPPFV3L() {
return WPPFV3L;
}

public boolean getWPPFV3R() {
return WPPFV3R;
}

public boolean getWPPFV3U() {
return WPPFV3U;
}

public byte getWPPFV4E() {
return WPPFV4E;
}

public short getWPPFV4L() {
return WPPFV4L;
}

public byte getWPPFV4R() {
return WPPFV4R;
}

public short getWPPFV4U() {
return WPPFV4U;
}

public byte getWPPFV5E() {
return WPPFV5E;
}

public short getWPPFV5L() {
return WPPFV5L;
}

public byte getWPPFV5R() {
return WPPFV5R;
}

public int getWPPFV5U() {
return WPPFV5U;
}

public boolean getWPPFV6E() {
return WPPFV6E;
}

public boolean getWPPFV6L() {
return WPPFV6L;
}

public boolean getWPPFV6R() {
return WPPFV6R;
}

public boolean getWPPFV6U() {
return WPPFV6U;
}

public short getWPPFVA2() {
return WPPFVA2;
}

public boolean getWPPFVA3() {
return WPPFVA3;
}

public short getWPPFVA4() {
return WPPFVA4;
}

public byte getWPPFVA5() {
return WPPFVA5;
}

public boolean getWPPFVA6() {
return WPPFVA6;
}

public byte getWPPLON() {
return WPPLON;
}

public byte getWPPLON2() {
return WPPLON2;
}

public byte getWPPLON3() {
return WPPLON3;
}

public byte getWPPLON4() {
return WPPLON4;
}

public byte getWPPLON5() {
return WPPLON5;
}

public byte getWPPLP2() {
return WPPLP2;
}

public byte getWPPLP3() {
return WPPLP3;
}

public byte getWPPLP4() {
return WPPLP4;
}

public byte getWPPLP5() {
return WPPLP5;
}

public byte getWPPLP6() {
return WPPLP6;
}

public byte getWPPLPH2() {
return WPPLPH2;
}

public byte getWPPLPH3() {
return WPPLPH3;
}

public byte getWPPLPH4() {
return WPPLPH4;
}

public boolean getWPPLPH5() {
return WPPLPH5;
}

public boolean getWPPLPH6() {
return WPPLPH6;
}

public int getWPPRIVA() {
return WPPRIVA;
}

public byte getWPPRIVP() {
return WPPRIVP;
}

public byte getWPPROFE() {
return WPPROFE;
}

public int getWPPROFL() {
return WPPROFL;
}

public byte getWPPROFR() {
return WPPROFR;
}

public int getWPPROFU() {
return WPPROFU;
}

public byte getWPPRPE() {
return WPPRPE;
}

public byte getWPPS() {
return WPPS;
}

public byte getWPPSAL2() {
return WPPSAL2;
}

public boolean getWPPSAL3() {
return WPPSAL3;
}

public byte getWPPSAL4() {
return WPPSAL4;
}

public byte getWPPSAL5() {
return WPPSAL5;
}

public boolean getWPPSAL6() {
return WPPSAL6;
}

public byte getWPPSM1() {
return WPPSM1;
}

public byte getWPPSM2() {
return WPPSM2;
}

public byte getWPPSMM1() {
return WPPSMM1;
}

public byte getWPPSMM2() {
return WPPSMM2;
}

public boolean getWPPSMM3() {
return WPPSMM3;
}

public byte getWPPSTR() {
return WPPSTR;
}

public byte getWPPSTR2() {
return WPPSTR2;
}

public byte getWPPSTR3() {
return WPPSTR3;
}

public byte getWPPTOP2() {
return WPPTOP2;
}

public byte getWPPTOP3() {
return WPPTOP3;
}

public byte getWPPTOP4() {
return WPPTOP4;
}

public byte getWPPTOP5() {
return WPPTOP5;
}

public byte getWPPTOP6() {
return WPPTOP6;
}

public byte getWPPTP2() {
return WPPTP2;
}

public byte getWPPTP3() {
return WPPTP3;
}

public byte getWPPTP4() {
return WPPTP4;
}

public byte getWPPTP5() {
return WPPTP5;
}

public boolean getWPPTP6() {
return WPPTP6;
}

public byte getWPPW() {
return WPPW;
}

public byte getWPPWP() {
return WPPWP;
}

public byte getWPPWP14() {
return WPPWP14;
}

public boolean getWPPWP15() {
return WPPWP15;
}

public boolean getWPPWP16() {
return WPPWP16;
}

public byte getWPPWP2() {
return WPPWP2;
}

public byte getWPPWP24() {
return WPPWP24;
}

public byte getWPPWP25() {
return WPPWP25;
}

public boolean getWPPWP26() {
return WPPWP26;
}

public byte getWPPWP3() {
return WPPWP3;
}

public byte getWPPWP4() {
return WPPWP4;
}

public byte getWPPWP5() {
return WPPWP5;
}

public boolean getWPPWP6() {
return WPPWP6;
}

public int getWPPWR() {
return WPPWR;
}

public short getWPPWR14() {
return WPPWR14;
}

public short getWPPWR15() {
return WPPWR15;
}

public short getWPPWR16() {
return WPPWR16;
}

public short getWPPWR2() {
return WPPWR2;
}

public short getWPPWR24() {
return WPPWR24;
}

public byte getWPPWR25() {
return WPPWR25;
}

public byte getWPPWR26() {
return WPPWR26;
}

public short getWPPWR3() {
return WPPWR3;
}

public short getWPPWR4() {
return WPPWR4;
}

public short getWPPWR5() {
return WPPWR5;
}

public byte getWPPWR6() {
return WPPWR6;
}

public int getWPPYR17() {
return WPPYR17;
}

public short getWPPYR18() {
return WPPYR18;
}

public short getWPPYR19() {
return WPPYR19;
}

public int getWPPYR2() {
return WPPYR2;
}

public int getWPPYR3() {
return WPPYR3;
}

public int getWPPYR4() {
return WPPYR4;
}

public short getWPPYR5() {
return WPPYR5;
}

public short getWPPYR6() {
return WPPYR6;
}

public short getWPPYR7() {
return WPPYR7;
}

public byte getWPPYR8() {
return WPPYR8;
}

public byte getWPQN() {
return WPQN;
}

public byte getWPRCON2() {
return WPRCON2;
}

public byte getWPRCON3() {
return WPRCON3;
}

public byte getWPRCON4() {
return WPRCON4;
}

public byte getWPRCON5() {
return WPRCON5;
}

public byte getWPREA01() {
return WPREA01;
}

public byte getWPREA02() {
return WPREA02;
}

public byte getWPREA03() {
return WPREA03;
}

public byte getWPREA04() {
return WPREA04;
}

public byte getWPREA05() {
return WPREA05;
}

public byte getWPREA06() {
return WPREA06;
}

public boolean getWPREA07() {
return WPREA07;
}

public byte getWPREAM1() {
return WPREAM1;
}

public byte getWPREAM2() {
return WPREAM2;
}

public byte getWPREAM3() {
return WPREAM3;
}

public byte getWPREAM4() {
return WPREAM4;
}

public byte getWPREAM5() {
return WPREAM5;
}

public byte getWPREAM6() {
return WPREAM6;
}

public byte getWPREC2() {
return WPREC2;
}

public byte getWPREC3() {
return WPREC3;
}

public byte getWPRECN() {
return WPRECN;
}

public byte getWPRECN1() {
return WPRECN1;
}

public byte getWPRECN2() {
return WPRECN2;
}

public byte getWPRECN3() {
return WPRECN3;
}

public byte getWPRECS() {
return WPRECS;
}

public byte getWPRECS1() {
return WPRECS1;
}

public byte getWPRECS2() {
return WPRECS2;
}

public byte getWPRECS3() {
return WPRECS3;
}

public byte getWPREN() {
return WPREN;
}

public byte getWPRGH() {
return WPRGH;
}

public byte getWPRGH2() {
return WPRGH2;
}

public byte getWPRGH3() {
return WPRGH3;
}

public byte getWPRGHB() {
return WPRGHB;
}

public byte getWPRGHB2() {
return WPRGHB2;
}

public byte getWPRGHB3() {
return WPRGHB3;
}

public byte getWPRGHX() {
return WPRGHX;
}

public byte getWPRGHX2() {
return WPRGHX2;
}

public byte getWPRGHX3() {
return WPRGHX3;
}

public byte getWPRGHX4() {
return WPRGHX4;
}

public byte getWPRGHX5() {
return WPRGHX5;
}

public byte getWPRRE01() {
return WPRRE01;
}

public byte getWPRRE02() {
return WPRRE02;
}

public byte getWPRRE03() {
return WPRRE03;
}

public byte getWPRRE04() {
return WPRRE04;
}

public boolean getWPRRE05() {
return WPRRE05;
}

public byte getWPRREM1() {
return WPRREM1;
}

public byte getWPRREM2() {
return WPRREM2;
}

public byte getWPRREM3() {
return WPRREM3;
}

public byte getWPRREM4() {
return WPRREM4;
}

public boolean getWPRREM5() {
return WPRREM5;
}

public byte getWPRSC1() {
return WPRSC1;
}

public byte getWPRSC13() {
return WPRSC13;
}

public boolean getWPRSC14() {
return WPRSC14;
}

public byte getWPRSC19() {
return WPRSC19;
}

public byte getWPRSC2() {
return WPRSC2;
}

public boolean getWPRSC20() {
return WPRSC20;
}

public byte getWPRSC25() {
return WPRSC25;
}

public boolean getWPRSC3() {
return WPRSC3;
}

public byte getWPRSC7() {
return WPRSC7;
}

public boolean getWPRSC8() {
return WPRSC8;
}

public byte getWPRSC9() {
return WPRSC9;
}

public byte getWPRSM1() {
return WPRSM1;
}

public byte getWPRSM13() {
return WPRSM13;
}

public boolean getWPRSM14() {
return WPRSM14;
}

public byte getWPRSM2() {
return WPRSM2;
}

public boolean getWPRSM3() {
return WPRSM3;
}

public byte getWPRSM37() {
return WPRSM37;
}

public boolean getWPRSM38() {
return WPRSM38;
}

public byte getWPRSM49() {
return WPRSM49;
}

public byte getWPRSM50() {
return WPRSM50;
}

public boolean getWPRSM51() {
return WPRSM51;
}

public byte getWPSJOBM() {
return WPSJOBM;
}

public short getWPSJOBY() {
return WPSJOBY;
}

public byte getWPSN() {
return WPSN;
}

public byte getWPSPS() {
return WPSPS;
}

public byte getWPSPS2() {
return WPSPS2;
}

public byte getWPSPS3() {
return WPSPS3;
}

public byte getWPSRC() {
return WPSRC;
}

public byte getWPSRC2() {
return WPSRC2;
}

public boolean getWPSRC3() {
return WPSRC3;
}

public byte getWPSRC4() {
return WPSRC4;
}

public boolean getWPSRC5() {
return WPSRC5;
}

public byte getWPSRUL() {
return WPSRUL;
}

public byte getWPSRUL2() {
return WPSRUL2;
}

public byte getWPSRUL3() {
return WPSRUL3;
}

public int getWPSTATA() {
return WPSTATA;
}

public byte getWPSTATP() {
return WPSTATP;
}

public byte getWPTAKP() {
return WPTAKP;
}

public byte getWPTAKP2() {
return WPTAKP2;
}

public byte getWPTAKP3() {
return WPTAKP3;
}

public byte getWPTAWC() {
return WPTAWC;
}

public byte getWPTAX17() {
return WPTAX17;
}

public byte getWPTAX18() {
return WPTAX18;
}

public byte getWPTAX19() {
return WPTAX19;
}

public byte getWPTAX2() {
return WPTAX2;
}

public byte getWPTAX3() {
return WPTAX3;
}

public byte getWPTAX4() {
return WPTAX4;
}

public byte getWPTAX5() {
return WPTAX5;
}

public byte getWPTAX6() {
return WPTAX6;
}

public byte getWPTAX7() {
return WPTAX7;
}

public byte getWPTAX8() {
return WPTAX8;
}

public byte getWPTHPFE() {
return WPTHPFE;
}

public short getWPTHPFL() {
return WPTHPFL;
}

public byte getWPTHPFR() {
return WPTHPFR;
}

public short getWPTHPFU() {
return WPTHPFU;
}

public byte getWPTHPME() {
return WPTHPME;
}

public short getWPTHPML() {
return WPTHPML;
}

public byte getWPTHPMR() {
return WPTHPMR;
}

public short getWPTHPMU() {
return WPTHPMU;
}

public byte getWPTHPOE() {
return WPTHPOE;
}

public short getWPTHPOL() {
return WPTHPOL;
}

public byte getWPTHPOR() {
return WPTHPOR;
}

public short getWPTHPOU() {
return WPTHPOU;
}

public byte getWPTHPWE() {
return WPTHPWE;
}

public short getWPTHPWL() {
return WPTHPWL;
}

public byte getWPTHPWR() {
return WPTHPWR;
}

public short getWPTHPWU() {
return WPTHPWU;
}

public byte getWPTHPYE() {
return WPTHPYE;
}

public int getWPTHPYL() {
return WPTHPYL;
}

public byte getWPTHPYR() {
return WPTHPYR;
}

public int getWPTHPYU() {
return WPTHPYU;
}

public byte getWPTKP() {
return WPTKP;
}

public byte getWPTKP14() {
return WPTKP14;
}

public byte getWPTKP15() {
return WPTKP15;
}

public byte getWPTKP16() {
return WPTKP16;
}

public byte getWPTKP2() {
return WPTKP2;
}

public byte getWPTKP3() {
return WPTKP3;
}

public byte getWPTKP4() {
return WPTKP4;
}

public byte getWPTKP5() {
return WPTKP5;
}

public byte getWPUPAFE() {
return WPUPAFE;
}

public short getWPUPAFL() {
return WPUPAFL;
}

public byte getWPUPAFR() {
return WPUPAFR;
}

public short getWPUPAFU() {
return WPUPAFU;
}

public byte getWPUPAME() {
return WPUPAME;
}

public short getWPUPAML() {
return WPUPAML;
}

public byte getWPUPAMR() {
return WPUPAMR;
}

public short getWPUPAMU() {
return WPUPAMU;
}

public int getWPUPAOE() {
return WPUPAOE;
}

public short getWPUPAOL() {
return WPUPAOL;
}

public byte getWPUPAOR() {
return WPUPAOR;
}

public short getWPUPAOU() {
return WPUPAOU;
}

public byte getWPUPAWE() {
return WPUPAWE;
}

public short getWPUPAWL() {
return WPUPAWL;
}

public byte getWPUPAWR() {
return WPUPAWR;
}

public short getWPUPAWU() {
return WPUPAWU;
}

public byte getWPUPAYE() {
return WPUPAYE;
}

public byte getWPUPAYL() {
return WPUPAYL;
}

public byte getWPUPAYR() {
return WPUPAYR;
}

public short getWPUPAYU() {
return WPUPAYU;
}

public byte getWPVBUSE() {
return WPVBUSE;
}

public int getWPVBUSL() {
return WPVBUSL;
}

public byte getWPVBUSR() {
return WPVBUSR;
}

public int getWPVBUSU() {
return WPVBUSU;
}

public boolean getWPW14FE() {
return WPW14FE;
}

public boolean getWPW14FL() {
return WPW14FL;
}

public boolean getWPW14FR() {
return WPW14FR;
}

public boolean getWPW14FU() {
return WPW14FU;
}

public byte getWPW14ME() {
return WPW14ME;
}

public byte getWPW14ML() {
return WPW14ML;
}

public byte getWPW14MR() {
return WPW14MR;
}

public short getWPW14MU() {
return WPW14MU;
}

public boolean getWPW14OE() {
return WPW14OE;
}

public boolean getWPW14OL() {
return WPW14OL;
}

public boolean getWPW14OR() {
return WPW14OR;
}

public boolean getWPW14OU() {
return WPW14OU;
}

public boolean getWPW14WE() {
return WPW14WE;
}

public boolean getWPW14WL() {
return WPW14WL;
}

public boolean getWPW14WR() {
return WPW14WR;
}

public boolean getWPW14WU() {
return WPW14WU;
}

public boolean getWPW14YE() {
return WPW14YE;
}

public boolean getWPW14YL() {
return WPW14YL;
}

public boolean getWPW14YR() {
return WPW14YR;
}

public boolean getWPW14YU() {
return WPW14YU;
}

public boolean getWPW15FE() {
return WPW15FE;
}

public boolean getWPW15FL() {
return WPW15FL;
}

public boolean getWPW15FR() {
return WPW15FR;
}

public boolean getWPW15FU() {
return WPW15FU;
}

public boolean getWPW15ME() {
return WPW15ME;
}

public boolean getWPW15ML() {
return WPW15ML;
}

public boolean getWPW15MR() {
return WPW15MR;
}

public boolean getWPW15MU() {
return WPW15MU;
}

public boolean getWPW15OE() {
return WPW15OE;
}

public boolean getWPW15OL() {
return WPW15OL;
}

public boolean getWPW15OR() {
return WPW15OR;
}

public boolean getWPW15OU() {
return WPW15OU;
}

public boolean getWPW15WE() {
return WPW15WE;
}

public boolean getWPW15WL() {
return WPW15WL;
}

public boolean getWPW15WR() {
return WPW15WR;
}

public boolean getWPW15WU() {
return WPW15WU;
}

public boolean getWPW15YE() {
return WPW15YE;
}

public boolean getWPW15YL() {
return WPW15YL;
}

public boolean getWPW15YR() {
return WPW15YR;
}

public boolean getWPW15YU() {
return WPW15YU;
}

public boolean getWPW16FE() {
return WPW16FE;
}

public boolean getWPW16FL() {
return WPW16FL;
}

public boolean getWPW16FR() {
return WPW16FR;
}

public boolean getWPW16FU() {
return WPW16FU;
}

public boolean getWPW16ME() {
return WPW16ME;
}

public boolean getWPW16ML() {
return WPW16ML;
}

public boolean getWPW16MR() {
return WPW16MR;
}

public boolean getWPW16MU() {
return WPW16MU;
}

public boolean getWPW16OE() {
return WPW16OE;
}

public boolean getWPW16OL() {
return WPW16OL;
}

public boolean getWPW16OR() {
return WPW16OR;
}

public boolean getWPW16OU() {
return WPW16OU;
}

public boolean getWPW16WE() {
return WPW16WE;
}

public boolean getWPW16WL() {
return WPW16WL;
}

public boolean getWPW16WR() {
return WPW16WR;
}

public boolean getWPW16WU() {
return WPW16WU;
}

public boolean getWPW16YE() {
return WPW16YE;
}

public boolean getWPW16YL() {
return WPW16YL;
}

public boolean getWPW16YR() {
return WPW16YR;
}

public boolean getWPW16YU() {
return WPW16YU;
}

public boolean getWPW24FE() {
return WPW24FE;
}

public short getWPW24FL() {
return WPW24FL;
}

public boolean getWPW24FR() {
return WPW24FR;
}

public short getWPW24FU() {
return WPW24FU;
}

public byte getWPW24ME() {
return WPW24ME;
}

public short getWPW24ML() {
return WPW24ML;
}

public byte getWPW24MR() {
return WPW24MR;
}

public short getWPW24MU() {
return WPW24MU;
}

public boolean getWPW24OE() {
return WPW24OE;
}

public boolean getWPW24OL() {
return WPW24OL;
}

public boolean getWPW24OR() {
return WPW24OR;
}

public boolean getWPW24OU() {
return WPW24OU;
}

public boolean getWPW24WE() {
return WPW24WE;
}

public boolean getWPW24WL() {
return WPW24WL;
}

public boolean getWPW24WR() {
return WPW24WR;
}

public boolean getWPW24WU() {
return WPW24WU;
}

public boolean getWPW24YE() {
return WPW24YE;
}

public boolean getWPW24YL() {
return WPW24YL;
}

public boolean getWPW24YR() {
return WPW24YR;
}

public boolean getWPW24YU() {
return WPW24YU;
}

public boolean getWPW25FE() {
return WPW25FE;
}

public boolean getWPW25FL() {
return WPW25FL;
}

public boolean getWPW25FR() {
return WPW25FR;
}

public boolean getWPW25FU() {
return WPW25FU;
}

public boolean getWPW25ME() {
return WPW25ME;
}

public boolean getWPW25ML() {
return WPW25ML;
}

public boolean getWPW25MR() {
return WPW25MR;
}

public boolean getWPW25MU() {
return WPW25MU;
}

public boolean getWPW25OE() {
return WPW25OE;
}

public boolean getWPW25OL() {
return WPW25OL;
}

public boolean getWPW25OR() {
return WPW25OR;
}

public boolean getWPW25OU() {
return WPW25OU;
}

public boolean getWPW25WE() {
return WPW25WE;
}

public boolean getWPW25WL() {
return WPW25WL;
}

public boolean getWPW25WR() {
return WPW25WR;
}

public boolean getWPW25WU() {
return WPW25WU;
}

public boolean getWPW25YE() {
return WPW25YE;
}

public boolean getWPW25YL() {
return WPW25YL;
}

public boolean getWPW25YR() {
return WPW25YR;
}

public boolean getWPW25YU() {
return WPW25YU;
}

public boolean getWPW26FE() {
return WPW26FE;
}

public boolean getWPW26FL() {
return WPW26FL;
}

public boolean getWPW26FR() {
return WPW26FR;
}

public boolean getWPW26FU() {
return WPW26FU;
}

public boolean getWPW26ME() {
return WPW26ME;
}

public boolean getWPW26ML() {
return WPW26ML;
}

public boolean getWPW26MR() {
return WPW26MR;
}

public boolean getWPW26MU() {
return WPW26MU;
}

public boolean getWPW26OE() {
return WPW26OE;
}

public boolean getWPW26OL() {
return WPW26OL;
}

public boolean getWPW26OR() {
return WPW26OR;
}

public boolean getWPW26OU() {
return WPW26OU;
}

public boolean getWPW26WE() {
return WPW26WE;
}

public boolean getWPW26WL() {
return WPW26WL;
}

public boolean getWPW26WR() {
return WPW26WR;
}

public boolean getWPW26WU() {
return WPW26WU;
}

public boolean getWPW26YE() {
return WPW26YE;
}

public boolean getWPW26YL() {
return WPW26YL;
}

public boolean getWPW26YR() {
return WPW26YR;
}

public boolean getWPW26YU() {
return WPW26YU;
}

public byte getWPWHYJ1() {
return WPWHYJ1;
}

public byte getWPWHYJ2() {
return WPWHYJ2;
}

public byte getWPWHYJ3() {
return WPWHYJ3;
}

public byte getWPWHYJ4() {
return WPWHYJ4;
}

public byte getWPWHYJ5() {
return WPWHYJ5;
}

public byte getWPWHYJM() {
return WPWHYJM;
}

public byte getWPWHYN1() {
return WPWHYN1;
}

public byte getWPWHYN2() {
return WPWHYN2;
}

public byte getWPWHYN3() {
return WPWHYN3;
}

public byte getWPWHYN4() {
return WPWHYN4;
}

public byte getWPWHYN5() {
return WPWHYN5;
}

public boolean getWPWHYN6() {
return WPWHYN6;
}

public byte getWPWLYYE() {
return WPWLYYE;
}

public int getWPWLYYL() {
return WPWLYYL;
}

public byte getWPWLYYR() {
return WPWLYYR;
}

public int getWPWLYYU() {
return WPWLYYU;
}

public byte getWPWPN() {
return WPWPN;
}

public byte getWPWPS() {
return WPWPS;
}

public byte getWPWTX() {
return WPWTX;
}

public byte getWPWTX14() {
return WPWTX14;
}

public boolean getWPWTX15() {
return WPWTX15;
}

public boolean getWPWTX16() {
return WPWTX16;
}

public byte getWPWTX2() {
return WPWTX2;
}

public byte getWPWTX24() {
return WPWTX24;
}

public byte getWPWTX25() {
return WPWTX25;
}

public boolean getWPWTX26() {
return WPWTX26;
}

public byte getWPWTX3() {
return WPWTX3;
}

public byte getWPWTX4() {
return WPWTX4;
}

public byte getWPWTX5() {
return WPWTX5;
}

public boolean getWPWTX6() {
return WPWTX6;
}

public boolean getWPWW2FE() {
return WPWW2FE;
}

public boolean getWPWW2FL() {
return WPWW2FL;
}

public boolean getWPWW2FR() {
return WPWW2FR;
}

public boolean getWPWW2FU() {
return WPWW2FU;
}

public byte getWPWW2ME() {
return WPWW2ME;
}

public short getWPWW2ML() {
return WPWW2ML;
}

public byte getWPWW2MR() {
return WPWW2MR;
}

public short getWPWW2MU() {
return WPWW2MU;
}

public boolean getWPWW2OE() {
return WPWW2OE;
}

public boolean getWPWW2OL() {
return WPWW2OL;
}

public boolean getWPWW2OR() {
return WPWW2OR;
}

public boolean getWPWW2OU() {
return WPWW2OU;
}

public boolean getWPWW2WE() {
return WPWW2WE;
}

public boolean getWPWW2WL() {
return WPWW2WL;
}

public boolean getWPWW2WR() {
return WPWW2WR;
}

public boolean getWPWW2WU() {
return WPWW2WU;
}

public boolean getWPWW2YE() {
return WPWW2YE;
}

public boolean getWPWW2YL() {
return WPWW2YL;
}

public boolean getWPWW2YR() {
return WPWW2YR;
}

public boolean getWPWW2YU() {
return WPWW2YU;
}

public boolean getWPWW3FE() {
return WPWW3FE;
}

public boolean getWPWW3FL() {
return WPWW3FL;
}

public boolean getWPWW3FR() {
return WPWW3FR;
}

public boolean getWPWW3FU() {
return WPWW3FU;
}

public byte getWPWW3ME() {
return WPWW3ME;
}

public short getWPWW3ML() {
return WPWW3ML;
}

public byte getWPWW3MR() {
return WPWW3MR;
}

public short getWPWW3MU() {
return WPWW3MU;
}

public boolean getWPWW3OE() {
return WPWW3OE;
}

public boolean getWPWW3OL() {
return WPWW3OL;
}

public boolean getWPWW3OR() {
return WPWW3OR;
}

public boolean getWPWW3OU() {
return WPWW3OU;
}

public boolean getWPWW3WE() {
return WPWW3WE;
}

public boolean getWPWW3WL() {
return WPWW3WL;
}

public boolean getWPWW3WR() {
return WPWW3WR;
}

public boolean getWPWW3WU() {
return WPWW3WU;
}

public boolean getWPWW3YE() {
return WPWW3YE;
}

public boolean getWPWW3YL() {
return WPWW3YL;
}

public boolean getWPWW3YR() {
return WPWW3YR;
}

public boolean getWPWW3YU() {
return WPWW3YU;
}

public boolean getWPWW4FE() {
return WPWW4FE;
}

public boolean getWPWW4FL() {
return WPWW4FL;
}

public boolean getWPWW4FR() {
return WPWW4FR;
}

public boolean getWPWW4FU() {
return WPWW4FU;
}

public byte getWPWW4ME() {
return WPWW4ME;
}

public short getWPWW4ML() {
return WPWW4ML;
}

public byte getWPWW4MR() {
return WPWW4MR;
}

public short getWPWW4MU() {
return WPWW4MU;
}

public byte getWPWW4OE() {
return WPWW4OE;
}

public byte getWPWW4OL() {
return WPWW4OL;
}

public byte getWPWW4OR() {
return WPWW4OR;
}

public short getWPWW4OU() {
return WPWW4OU;
}

public boolean getWPWW4WE() {
return WPWW4WE;
}

public short getWPWW4WL() {
return WPWW4WL;
}

public boolean getWPWW4WR() {
return WPWW4WR;
}

public short getWPWW4WU() {
return WPWW4WU;
}

public boolean getWPWW4YE() {
return WPWW4YE;
}

public boolean getWPWW4YL() {
return WPWW4YL;
}

public boolean getWPWW4YR() {
return WPWW4YR;
}

public boolean getWPWW4YU() {
return WPWW4YU;
}

public boolean getWPWW5FE() {
return WPWW5FE;
}

public boolean getWPWW5FL() {
return WPWW5FL;
}

public boolean getWPWW5FR() {
return WPWW5FR;
}

public boolean getWPWW5FU() {
return WPWW5FU;
}

public byte getWPWW5ME() {
return WPWW5ME;
}

public boolean getWPWW5ML() {
return WPWW5ML;
}

public boolean getWPWW5MR() {
return WPWW5MR;
}

public boolean getWPWW5MU() {
return WPWW5MU;
}

public byte getWPWW5OE() {
return WPWW5OE;
}

public byte getWPWW5OL() {
return WPWW5OL;
}

public byte getWPWW5OR() {
return WPWW5OR;
}

public byte getWPWW5OU() {
return WPWW5OU;
}

public boolean getWPWW5WE() {
return WPWW5WE;
}

public boolean getWPWW5WL() {
return WPWW5WL;
}

public boolean getWPWW5WR() {
return WPWW5WR;
}

public boolean getWPWW5WU() {
return WPWW5WU;
}

public boolean getWPWW5YE() {
return WPWW5YE;
}

public boolean getWPWW5YL() {
return WPWW5YL;
}

public boolean getWPWW5YR() {
return WPWW5YR;
}

public boolean getWPWW5YU() {
return WPWW5YU;
}

public boolean getWPWW6FE() {
return WPWW6FE;
}

public boolean getWPWW6FL() {
return WPWW6FL;
}

public boolean getWPWW6FR() {
return WPWW6FR;
}

public boolean getWPWW6FU() {
return WPWW6FU;
}

public boolean getWPWW6ME() {
return WPWW6ME;
}

public boolean getWPWW6ML() {
return WPWW6ML;
}

public boolean getWPWW6MR() {
return WPWW6MR;
}

public boolean getWPWW6MU() {
return WPWW6MU;
}

public boolean getWPWW6OE() {
return WPWW6OE;
}

public boolean getWPWW6OL() {
return WPWW6OL;
}

public boolean getWPWW6OR() {
return WPWW6OR;
}

public boolean getWPWW6OU() {
return WPWW6OU;
}

public boolean getWPWW6WE() {
return WPWW6WE;
}

public boolean getWPWW6WL() {
return WPWW6WL;
}

public boolean getWPWW6WR() {
return WPWW6WR;
}

public boolean getWPWW6WU() {
return WPWW6WU;
}

public boolean getWPWW6YE() {
return WPWW6YE;
}

public boolean getWPWW6YL() {
return WPWW6YL;
}

public boolean getWPWW6YR() {
return WPWW6YR;
}

public boolean getWPWW6YU() {
return WPWW6YU;
}

public boolean getWPWWFE() {
return WPWWFE;
}

public boolean getWPWWFL() {
return WPWWFL;
}

public boolean getWPWWFR() {
return WPWWFR;
}

public boolean getWPWWFU() {
return WPWWFU;
}

public byte getWPWWME() {
return WPWWME;
}

public short getWPWWML() {
return WPWWML;
}

public byte getWPWWMR() {
return WPWWMR;
}

public short getWPWWMU() {
return WPWWMU;
}

public byte getWPWWOE() {
return WPWWOE;
}

public byte getWPWWOL() {
return WPWWOL;
}

public byte getWPWWOR() {
return WPWWOR;
}

public short getWPWWOU() {
return WPWWOU;
}

public byte getWPWWWE() {
return WPWWWE;
}

public short getWPWWWL() {
return WPWWWL;
}

public boolean getWPWWWR() {
return WPWWWR;
}

public short getWPWWWU() {
return WPWWWU;
}

public byte getWPWWYE() {
return WPWWYE;
}

public byte getWPWWYL() {
return WPWWYL;
}

public byte getWPWWYR() {
return WPWWYR;
}

public short getWPWWYU() {
return WPWWYU;
}

public byte getWPWYJ14() {
return WPWYJ14;
}

public byte getWPWYJ15() {
return WPWYJ15;
}

public byte getWPWYJ16() {
return WPWYJ16;
}

public byte getWPWYJ17() {
return WPWYJ17;
}

public byte getWPWYJ18() {
return WPWYJ18;
}

public byte getWPWYN16() {
return WPWYN16;
}

public byte getWPWYN17() {
return WPWYN17;
}

public byte getWPWYN18() {
return WPWYN18;
}

public byte getWPWYN19() {
return WPWYN19;
}

public byte getWPWYN20() {
return WPWYN20;
}

public boolean getWPWYN21() {
return WPWYN21;
}

public byte getWPWYW15() {
return WPWYW15;
}

public byte getWPWYW16() {
return WPWYW16;
}

public byte getWPWYW17() {
return WPWYW17;
}

public byte getWPWYW18() {
return WPWYW18;
}

public byte getWPWYWK1() {
return WPWYWK1;
}

public byte getWPWYWK2() {
return WPWYWK2;
}

public byte getWPWYWK3() {
return WPWYWK3;
}

public byte getWPWYWK4() {
return WPWYWK4;
}

public boolean getWPWYWK5() {
return WPWYWK5;
}

public boolean getWPY17FE() {
return WPY17FE;
}

public boolean getWPY17FL() {
return WPY17FL;
}

public boolean getWPY17FR() {
return WPY17FR;
}

public boolean getWPY17FU() {
return WPY17FU;
}

public byte getWPY17ME() {
return WPY17ME;
}

public short getWPY17ML() {
return WPY17ML;
}

public byte getWPY17MR() {
return WPY17MR;
}

public short getWPY17MU() {
return WPY17MU;
}

public byte getWPY17OE() {
return WPY17OE;
}

public short getWPY17OL() {
return WPY17OL;
}

public byte getWPY17OR() {
return WPY17OR;
}

public short getWPY17OU() {
return WPY17OU;
}

public byte getWPY17WE() {
return WPY17WE;
}

public short getWPY17WL() {
return WPY17WL;
}

public byte getWPY17WR() {
return WPY17WR;
}

public short getWPY17WU() {
return WPY17WU;
}

public byte getWPY17YE() {
return WPY17YE;
}

public short getWPY17YL() {
return WPY17YL;
}

public byte getWPY17YR() {
return WPY17YR;
}

public short getWPY17YU() {
return WPY17YU;
}

public boolean getWPY18FE() {
return WPY18FE;
}

public boolean getWPY18FL() {
return WPY18FL;
}

public boolean getWPY18FR() {
return WPY18FR;
}

public boolean getWPY18FU() {
return WPY18FU;
}

public byte getWPY18ME() {
return WPY18ME;
}

public short getWPY18ML() {
return WPY18ML;
}

public byte getWPY18MR() {
return WPY18MR;
}

public short getWPY18MU() {
return WPY18MU;
}

public byte getWPY18OE() {
return WPY18OE;
}

public short getWPY18OL() {
return WPY18OL;
}

public byte getWPY18OR() {
return WPY18OR;
}

public short getWPY18OU() {
return WPY18OU;
}

public boolean getWPY18WE() {
return WPY18WE;
}

public boolean getWPY18WL() {
return WPY18WL;
}

public boolean getWPY18WR() {
return WPY18WR;
}

public boolean getWPY18WU() {
return WPY18WU;
}

public boolean getWPY18YE() {
return WPY18YE;
}

public boolean getWPY18YL() {
return WPY18YL;
}

public boolean getWPY18YR() {
return WPY18YR;
}

public boolean getWPY18YU() {
return WPY18YU;
}

public boolean getWPY19FE() {
return WPY19FE;
}

public boolean getWPY19FL() {
return WPY19FL;
}

public boolean getWPY19FR() {
return WPY19FR;
}

public boolean getWPY19FU() {
return WPY19FU;
}

public boolean getWPY19ME() {
return WPY19ME;
}

public byte getWPY19ML() {
return WPY19ML;
}

public boolean getWPY19MR() {
return WPY19MR;
}

public short getWPY19MU() {
return WPY19MU;
}

public boolean getWPY19OE() {
return WPY19OE;
}

public boolean getWPY19OL() {
return WPY19OL;
}

public boolean getWPY19OR() {
return WPY19OR;
}

public boolean getWPY19OU() {
return WPY19OU;
}

public boolean getWPY19WE() {
return WPY19WE;
}

public boolean getWPY19WL() {
return WPY19WL;
}

public boolean getWPY19WR() {
return WPY19WR;
}

public boolean getWPY19WU() {
return WPY19WU;
}

public boolean getWPY19YE() {
return WPY19YE;
}

public boolean getWPY19YL() {
return WPY19YL;
}

public boolean getWPY19YR() {
return WPY19YR;
}

public boolean getWPY19YU() {
return WPY19YU;
}

public boolean getWPY2FE() {
return WPY2FE;
}

public boolean getWPY2FL() {
return WPY2FL;
}

public boolean getWPY2FR() {
return WPY2FR;
}

public boolean getWPY2FU() {
return WPY2FU;
}

public byte getWPY2ME() {
return WPY2ME;
}

public short getWPY2ML() {
return WPY2ML;
}

public byte getWPY2MR() {
return WPY2MR;
}

public short getWPY2MU() {
return WPY2MU;
}

public byte getWPY2OE() {
return WPY2OE;
}

public short getWPY2OL() {
return WPY2OL;
}

public boolean getWPY2OR() {
return WPY2OR;
}

public short getWPY2OU() {
return WPY2OU;
}

public boolean getWPY2WE() {
return WPY2WE;
}

public boolean getWPY2WL() {
return WPY2WL;
}

public boolean getWPY2WR() {
return WPY2WR;
}

public boolean getWPY2WU() {
return WPY2WU;
}

public boolean getWPY2YE() {
return WPY2YE;
}

public boolean getWPY2YL() {
return WPY2YL;
}

public boolean getWPY2YR() {
return WPY2YR;
}

public boolean getWPY2YU() {
return WPY2YU;
}

public boolean getWPY3FE() {
return WPY3FE;
}

public boolean getWPY3FL() {
return WPY3FL;
}

public boolean getWPY3FR() {
return WPY3FR;
}

public boolean getWPY3FU() {
return WPY3FU;
}

public byte getWPY3ME() {
return WPY3ME;
}

public short getWPY3ML() {
return WPY3ML;
}

public byte getWPY3MR() {
return WPY3MR;
}

public short getWPY3MU() {
return WPY3MU;
}

public boolean getWPY3OE() {
return WPY3OE;
}

public boolean getWPY3OL() {
return WPY3OL;
}

public boolean getWPY3OR() {
return WPY3OR;
}

public boolean getWPY3OU() {
return WPY3OU;
}

public boolean getWPY3WE() {
return WPY3WE;
}

public boolean getWPY3WL() {
return WPY3WL;
}

public boolean getWPY3WR() {
return WPY3WR;
}

public boolean getWPY3WU() {
return WPY3WU;
}

public boolean getWPY3YE() {
return WPY3YE;
}

public boolean getWPY3YL() {
return WPY3YL;
}

public boolean getWPY3YR() {
return WPY3YR;
}

public boolean getWPY3YU() {
return WPY3YU;
}

public boolean getWPY4FE() {
return WPY4FE;
}

public boolean getWPY4FL() {
return WPY4FL;
}

public boolean getWPY4FR() {
return WPY4FR;
}

public boolean getWPY4FU() {
return WPY4FU;
}

public byte getWPY4ME() {
return WPY4ME;
}

public short getWPY4ML() {
return WPY4ML;
}

public byte getWPY4MR() {
return WPY4MR;
}

public short getWPY4MU() {
return WPY4MU;
}

public byte getWPY4OE() {
return WPY4OE;
}

public short getWPY4OL() {
return WPY4OL;
}

public byte getWPY4OR() {
return WPY4OR;
}

public short getWPY4OU() {
return WPY4OU;
}

public boolean getWPY4WE() {
return WPY4WE;
}

public boolean getWPY4WL() {
return WPY4WL;
}

public boolean getWPY4WR() {
return WPY4WR;
}

public boolean getWPY4WU() {
return WPY4WU;
}

public boolean getWPY4YE() {
return WPY4YE;
}

public boolean getWPY4YL() {
return WPY4YL;
}

public boolean getWPY4YR() {
return WPY4YR;
}

public boolean getWPY4YU() {
return WPY4YU;
}

public boolean getWPY5FE() {
return WPY5FE;
}

public boolean getWPY5FL() {
return WPY5FL;
}

public boolean getWPY5FR() {
return WPY5FR;
}

public boolean getWPY5FU() {
return WPY5FU;
}

public byte getWPY5ME() {
return WPY5ME;
}

public byte getWPY5ML() {
return WPY5ML;
}

public byte getWPY5MR() {
return WPY5MR;
}

public byte getWPY5MU() {
return WPY5MU;
}

public byte getWPY5OE() {
return WPY5OE;
}

public byte getWPY5OL() {
return WPY5OL;
}

public byte getWPY5OR() {
return WPY5OR;
}

public byte getWPY5OU() {
return WPY5OU;
}

public boolean getWPY5WE() {
return WPY5WE;
}

public boolean getWPY5WL() {
return WPY5WL;
}

public boolean getWPY5WR() {
return WPY5WR;
}

public boolean getWPY5WU() {
return WPY5WU;
}

public boolean getWPY5YE() {
return WPY5YE;
}

public boolean getWPY5YL() {
return WPY5YL;
}

public boolean getWPY5YR() {
return WPY5YR;
}

public short getWPY5YU() {
return WPY5YU;
}

public boolean getWPY6FE() {
return WPY6FE;
}

public boolean getWPY6FL() {
return WPY6FL;
}

public boolean getWPY6FR() {
return WPY6FR;
}

public boolean getWPY6FU() {
return WPY6FU;
}

public byte getWPY6ME() {
return WPY6ME;
}

public byte getWPY6ML() {
return WPY6ML;
}

public byte getWPY6MR() {
return WPY6MR;
}

public byte getWPY6MU() {
return WPY6MU;
}

public boolean getWPY6OE() {
return WPY6OE;
}

public short getWPY6OL() {
return WPY6OL;
}

public boolean getWPY6OR() {
return WPY6OR;
}

public short getWPY6OU() {
return WPY6OU;
}

public boolean getWPY6WE() {
return WPY6WE;
}

public boolean getWPY6WL() {
return WPY6WL;
}

public boolean getWPY6WR() {
return WPY6WR;
}

public boolean getWPY6WU() {
return WPY6WU;
}

public boolean getWPY6YE() {
return WPY6YE;
}

public boolean getWPY6YL() {
return WPY6YL;
}

public boolean getWPY6YR() {
return WPY6YR;
}

public boolean getWPY6YU() {
return WPY6YU;
}

public boolean getWPY7FE() {
return WPY7FE;
}

public boolean getWPY7FL() {
return WPY7FL;
}

public boolean getWPY7FR() {
return WPY7FR;
}

public boolean getWPY7FU() {
return WPY7FU;
}

public boolean getWPY7ME() {
return WPY7ME;
}

public boolean getWPY7ML() {
return WPY7ML;
}

public boolean getWPY7MR() {
return WPY7MR;
}

public short getWPY7MU() {
return WPY7MU;
}

public boolean getWPY7OE() {
return WPY7OE;
}

public boolean getWPY7OL() {
return WPY7OL;
}

public boolean getWPY7OR() {
return WPY7OR;
}

public boolean getWPY7OU() {
return WPY7OU;
}

public boolean getWPY7WE() {
return WPY7WE;
}

public boolean getWPY7WL() {
return WPY7WL;
}

public boolean getWPY7WR() {
return WPY7WR;
}

public boolean getWPY7WU() {
return WPY7WU;
}

public boolean getWPY7YE() {
return WPY7YE;
}

public boolean getWPY7YL() {
return WPY7YL;
}

public boolean getWPY7YR() {
return WPY7YR;
}

public boolean getWPY7YU() {
return WPY7YU;
}

public boolean getWPY8FE() {
return WPY8FE;
}

public boolean getWPY8FL() {
return WPY8FL;
}

public boolean getWPY8FR() {
return WPY8FR;
}

public boolean getWPY8FU() {
return WPY8FU;
}

public boolean getWPY8ME() {
return WPY8ME;
}

public boolean getWPY8ML() {
return WPY8ML;
}

public boolean getWPY8MR() {
return WPY8MR;
}

public boolean getWPY8MU() {
return WPY8MU;
}

public byte getWPY8OE() {
return WPY8OE;
}

public byte getWPY8OL() {
return WPY8OL;
}

public byte getWPY8OR() {
return WPY8OR;
}

public byte getWPY8OU() {
return WPY8OU;
}

public boolean getWPY8WE() {
return WPY8WE;
}

public boolean getWPY8WL() {
return WPY8WL;
}

public boolean getWPY8WR() {
return WPY8WR;
}

public boolean getWPY8WU() {
return WPY8WU;
}

public boolean getWPY8YE() {
return WPY8YE;
}

public boolean getWPY8YL() {
return WPY8YL;
}

public boolean getWPY8YR() {
return WPY8YR;
}

public boolean getWPY8YU() {
return WPY8YU;
}

public byte getWPYAER2() {
return WPYAER2;
}

public byte getWPYAER3() {
return WPYAER3;
}

public byte getWPYAER4() {
return WPYAER4;
}

public byte getWPYAER5() {
return WPYAER5;
}

public byte getWPYAER6() {
return WPYAER6;
}

public byte getWPYBS2() {
return WPYBS2;
}

public byte getWPYBS3() {
return WPYBS3;
}

public byte getWPYBS4() {
return WPYBS4;
}

public byte getWPYBS5() {
return WPYBS5;
}

public byte getWPYBS6() {
return WPYBS6;
}

public int getWPYCA2() {
return WPYCA2;
}

public short getWPYCA3() {
return WPYCA3;
}

public short getWPYCA4() {
return WPYCA4;
}

public short getWPYCA5() {
return WPYCA5;
}

public short getWPYCA6() {
return WPYCA6;
}

public byte getWPYCAT2() {
return WPYCAT2;
}

public byte getWPYCAT3() {
return WPYCAT3;
}

public byte getWPYCAT4() {
return WPYCAT4;
}

public byte getWPYCAT5() {
return WPYCAT5;
}

public byte getWPYCAT6() {
return WPYCAT6;
}

public boolean getWPYFE() {
return WPYFE;
}

public boolean getWPYFL() {
return WPYFL;
}

public boolean getWPYFR() {
return WPYFR;
}

public byte getWPYFRA() {
return WPYFRA;
}

public byte getWPYFRA2() {
return WPYFRA2;
}

public boolean getWPYFRA3() {
return WPYFRA3;
}

public byte getWPYFRA4() {
return WPYFRA4;
}

public boolean getWPYFRA5() {
return WPYFRA5;
}

public boolean getWPYFRA6() {
return WPYFRA6;
}

public boolean getWPYFU() {
return WPYFU;
}

public byte getWPYME() {
return WPYME;
}

public short getWPYML() {
return WPYML;
}

public byte getWPYMR() {
return WPYMR;
}

public short getWPYMU() {
return WPYMU;
}

public byte getWPYOE() {
return WPYOE;
}

public short getWPYOL() {
return WPYOL;
}

public byte getWPYOR() {
return WPYOR;
}

public short getWPYOU() {
return WPYOU;
}

public byte getWPYPEN() {
return WPYPEN;
}

public byte getWPYPEN2() {
return WPYPEN2;
}

public boolean getWPYPEN3() {
return WPYPEN3;
}

public byte getWPYPEN4() {
return WPYPEN4;
}

public boolean getWPYPEN5() {
return WPYPEN5;
}

public byte getWPYSTM1() {
return WPYSTM1;
}

public byte getWPYSTM2() {
return WPYSTM2;
}

public byte getWPYSTM3() {
return WPYSTM3;
}

public byte getWPYSTM4() {
return WPYSTM4;
}

public byte getWPYSTM5() {
return WPYSTM5;
}

public byte getWPYSTP1() {
return WPYSTP1;
}

public byte getWPYSTP2() {
return WPYSTP2;
}

public byte getWPYSTP3() {
return WPYSTP3;
}

public byte getWPYSTP4() {
return WPYSTP4;
}

public byte getWPYSTP5() {
return WPYSTP5;
}

public byte getWPYSTPM() {
return WPYSTPM;
}

public byte getWPYWE() {
return WPYWE;
}

public short getWPYWL() {
return WPYWL;
}

public byte getWPYWR() {
return WPYWR;
}

public short getWPYWU() {
return WPYWU;
}

public byte getWPYYE() {
return WPYYE;
}

public short getWPYYL() {
return WPYYL;
}

public byte getWPYYR() {
return WPYYR;
}

public short getWPYYU() {
return WPYYU;
}

public byte getWSTOKB() {
return WSTOKB;
}

public double getWSTVAL() {
return WSTVAL;
}

public byte getWTC_P_F() {
return WTC_P_F;
}

public double getWTC_P_I() {
return WTC_P_I;
}

public short getWTC_P_O() {
return WTC_P_O;
}

public short getWTC_P_T() {
return WTC_P_T;
}

public byte getWTC_R_F() {
return WTC_R_F;
}

public double getWTC_R_I() {
return WTC_R_I;
}

public short getWTC_R_O() {
return WTC_R_O;
}

public short getWTC_R_T() {
return WTC_R_T;
}

public byte getWTOK() {
return WTOK;
}

public double getWTVAL() {
return WTVAL;
}

public byte getYNOBP() {
return YNOBP;
}

public byte getYNOLF() {
return YNOLF;
}

public byte getYNOWH() {
return YNOWH;
}

public ELSA_Wave2_Record(String line) {
init_0_999(line);
init_1000_1999(line);
init_2000_2999(line);
init_3000_3999(line);
init_4000_4999(line);
init_5000_5999(line);
init_6000_6999(line);
init_7000_7999(line);
init_8000_8444(line);
}
public void init_0_999(String line) {
initIDAUNIQ(s[0]);
initW2SEC(s[1]);
initW2SIC(s[2]);
initW2SOC(s[3]);
initW2NSSEC8(s[4]);
initW2NSSEC5(s[5]);
initW2NSSEC3(s[6]);
initW2SOC2000(s[7]);
initW2SOC2000MIS(s[8]);
initW2SIC92(s[9]);
initW2SIC92MIS(s[10]);
initIDAIND(s[11]);
initIDAHH(s[12]);
initPERSNO(s[13]);
initSAMPSTA(s[14]);
initFINSTAT(s[15]);
initW2INDOUT(s[16]);
initW2HHOUT(s[17]);
initCOUPLE(s[18]);
initCPID(s[19]);
initCHINHH1(s[20]);
initCHOUTHH(s[21]);
initGCINHH1(s[22]);
initMAINHH1(s[23]);
initPAINHH1(s[24]);
initDHSAMEH(s[25]);
initDHSEX(s[26]);
initDHDOBC(s[27]);
initDHDOBYR(s[28]);
initDHAGER(s[29]);
initDHWORK(s[30]);
initDHR(s[31]);
initDHR2(s[32]);
initDHR3(s[33]);
initDHR4(s[34]);
initDHR5(s[35]);
initDHR6(s[36]);
initDHR7(s[37]);
initDHR8(s[38]);
initDHR9(s[39]);
initDHR10(s[40]);
initDHR11(s[41]);
initDHR12(s[42]);
initHHRESP(s[43]);
initDHPA(s[44]);
initDHPB(s[45]);
initDHC(s[46]);
initDHCS(s[47]);
initDHCDY(s[48]);
initDHCAG(s[49]);
initDHCR01(s[50]);
initDHCR02(s[51]);
initDHCR03(s[52]);
initDHCR04(s[53]);
initDHCR05(s[54]);
initDHCR06(s[55]);
initDHCR07(s[56]);
initDHCR08(s[57]);
initDHCR09(s[58]);
initDHCR10(s[59]);
initDHCR11(s[60]);
initDHCR12(s[61]);
initDHPA2(s[62]);
initDHPB2(s[63]);
initDHC2(s[64]);
initDHCS2(s[65]);
initDHCBY02(s[66]);
initDHCAG2(s[67]);
initDHCR17(s[68]);
initDHCR18(s[69]);
initDHCR19(s[70]);
initDHCR20(s[71]);
initDHCR21(s[72]);
initDHCR22(s[73]);
initDHCR23(s[74]);
initDHCR24(s[75]);
initDHCR25(s[76]);
initDHCR26(s[77]);
initDHCR27(s[78]);
initDHCR28(s[79]);
initDHPA3(s[80]);
initDHPB3(s[81]);
initDHC3(s[82]);
initDHCS3(s[83]);
initDHCBY03(s[84]);
initDHCAG3(s[85]);
initDHCR33(s[86]);
initDHCR34(s[87]);
initDHCR35(s[88]);
initDHCR36(s[89]);
initDHCR37(s[90]);
initDHCR38(s[91]);
initDHCR39(s[92]);
initDHCR40(s[93]);
initDHCR41(s[94]);
initDHCR42(s[95]);
initDHCR43(s[96]);
initDHCR44(s[97]);
initDHPA4(s[98]);
initDHPB4(s[99]);
initDHC4(s[100]);
initDHCS4(s[101]);
initDHCBY04(s[102]);
initDHCAG4(s[103]);
initDHCR49(s[104]);
initDHCR50(s[105]);
initDHCR51(s[106]);
initDHCR52(s[107]);
initDHCR53(s[108]);
initDHCR54(s[109]);
initDHCR55(s[110]);
initDHCR56(s[111]);
initDHCR57(s[112]);
initDHCR58(s[113]);
initDHCR59(s[114]);
initDHCR60(s[115]);
initDHPA5(s[116]);
initDHPB5(s[117]);
initDHC5(s[118]);
initDHCS5(s[119]);
initDHCBY05(s[120]);
initDHCAG5(s[121]);
initDHCR65(s[122]);
initDHCR66(s[123]);
initDHCR67(s[124]);
initDHCR68(s[125]);
initDHCR69(s[126]);
initDHCR70(s[127]);
initDHCR71(s[128]);
initDHCR72(s[129]);
initDHCR73(s[130]);
initDHCR74(s[131]);
initDHCR75(s[132]);
initDHCR76(s[133]);
initDHPA6(s[134]);
initDHPB6(s[135]);
initDHC6(s[136]);
initDHCS6(s[137]);
initDHCBY06(s[138]);
initDHCAG6(s[139]);
initDHCR81(s[140]);
initDHCR82(s[141]);
initDHCR83(s[142]);
initDHCR84(s[143]);
initDHCR85(s[144]);
initDHCR86(s[145]);
initDHCR87(s[146]);
initDHCR88(s[147]);
initDHCR89(s[148]);
initDHCR90(s[149]);
initDHCR91(s[150]);
initDHCR92(s[151]);
initDHPA7(s[152]);
initDHPB7(s[153]);
initDHC7(s[154]);
initDHCS7(s[155]);
initDHCBY07(s[156]);
initDHCAG7(s[157]);
initDHCR97(s[158]);
initDHCR98(s[159]);
initDHCR99(s[160]);
initDHCR100(s[161]);
initDHCR101(s[162]);
initDHCR102(s[163]);
initDHCR103(s[164]);
initDHCR104(s[165]);
initDHCR105(s[166]);
initDHCR106(s[167]);
initDHCR107(s[168]);
initDHCR108(s[169]);
initDHPA8(s[170]);
initDHPB8(s[171]);
initDHC8(s[172]);
initDHCS8(s[173]);
initDHCBY08(s[174]);
initDHCAG8(s[175]);
initDHCR113(s[176]);
initDHCR114(s[177]);
initDHCR115(s[178]);
initDHCR116(s[179]);
initDHCR117(s[180]);
initDHCR118(s[181]);
initDHCR119(s[182]);
initDHCR120(s[183]);
initDHCR121(s[184]);
initDHCR122(s[185]);
initDHCR123(s[186]);
initDHCR124(s[187]);
initDHPA9(s[188]);
initDHPB9(s[189]);
initDHC9(s[190]);
initDHCS9(s[191]);
initDHCBY09(s[192]);
initDHCAG9(s[193]);
initDHCR129(s[194]);
initDHCR130(s[195]);
initDHCR131(s[196]);
initDHCR132(s[197]);
initDHCR133(s[198]);
initDHCR134(s[199]);
initDHCR135(s[200]);
initDHCR136(s[201]);
initDHCR137(s[202]);
initDHCR138(s[203]);
initDHCR139(s[204]);
initDHCR140(s[205]);
initDHPA10(s[206]);
initDHPB10(s[207]);
initDHC10(s[208]);
initDHCS10(s[209]);
initDHCBY10(s[210]);
initDHCAG10(s[211]);
initDHCR145(s[212]);
initDHCR146(s[213]);
initDHCR147(s[214]);
initDHCR148(s[215]);
initDHCR149(s[216]);
initDHCR150(s[217]);
initDHCR151(s[218]);
initDHCR152(s[219]);
initDHCR153(s[220]);
initDHCR154(s[221]);
initDHCR155(s[222]);
initDHCR156(s[223]);
initDHPA11(s[224]);
initDHPB11(s[225]);
initDHC11(s[226]);
initDHCS11(s[227]);
initDHCBY11(s[228]);
initDHCAG11(s[229]);
initDHCR161(s[230]);
initDHCR162(s[231]);
initDHCR163(s[232]);
initDHCR164(s[233]);
initDHCR165(s[234]);
initDHCR166(s[235]);
initDHCR167(s[236]);
initDHCR168(s[237]);
initDHCR169(s[238]);
initDHCR170(s[239]);
initDHCR171(s[240]);
initDHCR172(s[241]);
initDHPA12(s[242]);
initDHPB12(s[243]);
initDHC12(s[244]);
initDHCS12(s[245]);
initDHCBY12(s[246]);
initDHCAG12(s[247]);
initDHCR177(s[248]);
initDHCR178(s[249]);
initDHCR179(s[250]);
initDHCR180(s[251]);
initDHCR181(s[252]);
initDHCR182(s[253]);
initDHCR183(s[254]);
initDHCR184(s[255]);
initDHCR185(s[256]);
initDHCR186(s[257]);
initDHCR187(s[258]);
initDHCR188(s[259]);
initDHPA13(s[260]);
initDHPB13(s[261]);
initDHC13(s[262]);
initDHCS13(s[263]);
initDHCBY13(s[264]);
initDHCAG13(s[265]);
initDHCR193(s[266]);
initDHCR194(s[267]);
initDHCR195(s[268]);
initDHCR196(s[269]);
initDHCR197(s[270]);
initDHCR198(s[271]);
initDHCR199(s[272]);
initDHCR200(s[273]);
initDHCR201(s[274]);
initDHCR202(s[275]);
initDHCR203(s[276]);
initDHCR204(s[277]);
initDHPA14(s[278]);
initDHPB14(s[279]);
initDHC14(s[280]);
initDHCS14(s[281]);
initDHCBY14(s[282]);
initDHCAG14(s[283]);
initDHCR209(s[284]);
initDHCR210(s[285]);
initDHCR211(s[286]);
initDHCR212(s[287]);
initDHCR213(s[288]);
initDHCR214(s[289]);
initDHCR215(s[290]);
initDHCR216(s[291]);
initDHCR217(s[292]);
initDHCR218(s[293]);
initDHCR219(s[294]);
initDHCR220(s[295]);
initDHANYPX(s[296]);
initDIDOB(s[297]);
initDIDBNY(s[298]);
initDIAGR(s[299]);
initDIINT(s[300]);
initDIPRE(s[301]);
initDISEXC(s[302]);
initDISEX(s[303]);
initDIMAR(s[304]);
initDIGRAN(s[305]);
initDIGNMYC(s[306]);
initDIGNMY(s[307]);
initDISIBC(s[308]);
initDISIB(s[309]);
initDINMA(s[310]);
initDIANM(s[311]);
initDIMAD(s[312]);
initDICDNM(s[313]);
initDINFA(s[314]);
initDIANF(s[315]);
initDIFAD(s[316]);
initDICDNF(s[317]);
initDIKLIV(s[318]);
initDIKLIVC(s[319]);
initDIFJOB(s[320]);
initHEHELF(s[321]);
initHEILL(s[322]);
initHELIM(s[323]);
initHELWK(s[324]);
initHETEMP(s[325]);
initHEFUNC(s[326]);
initHEATT01(s[327]);
initHEATT02(s[328]);
initHEATT03(s[329]);
initHEATT04(s[330]);
initHEATT05(s[331]);
initHEATT06(s[332]);
initHEATT07(s[333]);
initHEATT08(s[334]);
initHEATT09(s[335]);
initHEATT10(s[336]);
initHEATT11(s[337]);
initHEATT12(s[338]);
initHEATT13(s[339]);
initHEATT14(s[340]);
initHEATA(s[341]);
initHEBALB1(s[342]);
initHEBALA1(s[343]);
initHEBALC1(s[344]);
initHEAID1(s[345]);
initHEAID2(s[346]);
initHEAID3(s[347]);
initHEAID4(s[348]);
initHEAID5(s[349]);
initHEAIDC(s[350]);
initHEAIW01(s[351]);
initHEAIN01(s[352]);
initHEAIN05(s[353]);
initHEAIN06(s[354]);
initHEAIN07(s[355]);
initHEEYE(s[356]);
initHEFRND(s[357]);
initHEPAP(s[358]);
initHEOPC(s[359]);
initHEOPW1(s[360]);
initHEOP(s[361]);
initHEOPN1(s[362]);
initHEOPN2(s[363]);
initHEOPN3(s[364]);
initHEOPN4(s[365]);
initHEOPS(s[366]);
initHEOPT1(s[367]);
initHEOPT2(s[368]);
initHEDREYE(s[369]);
initHECAT(s[370]);
initHEHEAR(s[371]);
initHEHRA(s[372]);
initHEHRB(s[373]);
initHEHRC(s[374]);
initHEHRD(s[375]);
initHEHRE(s[376]);
initHEHRF(s[377]);
initHEHRG(s[378]);
initHEBPCHK(s[379]);
initHEDIAW1(s[380]);
initHEDIA(s[381]);
initHEDIAW3(s[382]);
initHEDIAW4(s[383]);
initHEDIAW5(s[384]);
initHEDIAW6(s[385]);
initHEDIAW7(s[386]);
initHEDIAW8(s[387]);
initHEDIAW9(s[388]);
initHEFFLAG(s[389]);
initHEDIAC1(s[390]);
initHEDIAC2(s[391]);
initHEDIAC3(s[392]);
initHEDIAC4(s[393]);
initHEDIAC5(s[394]);
initHEDIAC6(s[395]);
initHEDIAC7(s[396]);
initHEDIAC8(s[397]);
initHEDIAC9(s[398]);
initHEDIAN1(s[399]);
initHEDIAN2(s[400]);
initHEDIAN3(s[401]);
initHEDIAN4(s[402]);
initHEDIAN5(s[403]);
initHEDIAN6(s[404]);
initHEDIAN7(s[405]);
initHEDIAN8(s[406]);
initHEDIAN9(s[407]);
initHEDIAS1(s[408]);
initHEDIAS2(s[409]);
initHEDIAS4(s[410]);
initHEDIAS5(s[411]);
initHEDIAS6(s[412]);
initHEDIAS7(s[413]);
initHEDIAS9(s[414]);
initHEDIA01(s[415]);
initHEDIA02(s[416]);
initHEDIA03(s[417]);
initHEDIA04(s[418]);
initHEDIA05(s[419]);
initHEDIA06(s[420]);
initHEDIA07(s[421]);
initHEDIA08(s[422]);
initHEDIA09(s[423]);
initHEDIM01(s[424]);
initHEDIM02(s[425]);
initHEDIM03(s[426]);
initHEDIM04(s[427]);
initHEDIM05(s[428]);
initHEDIM06(s[429]);
initHEDIM07(s[430]);
initHEDIM08(s[431]);
initHEHBP(s[432]);
initHEHBPA(s[433]);
initHEHBPB(s[434]);
initHEMDA(s[435]);
initHEAGA(s[436]);
initHEAGAR(s[437]);
initHEAGARY(s[438]);
initHEYRA(s[439]);
initHEAGB(s[440]);
initHEAGBR(s[441]);
initHEAGBRY(s[442]);
initHENMMI(s[443]);
initHEYRB(s[444]);
initHEBETA(s[445]);
initHEBETB(s[446]);
initHEBETBC(s[447]);
initHEAGC(s[448]);
initHEAGCR(s[449]);
initHEAGCRY(s[450]);
initHEAGD(s[451]);
initHEAGDR(s[452]);
initHEAGDRY(s[453]);
initHEACD(s[454]);
initHEINS(s[455]);
initHEMDB(s[456]);
initHEACE(s[457]);
initHEACEA(s[458]);
initHEACEAC(s[459]);
initHEWEE(s[460]);
initHEWEEA(s[461]);
initHEKIDN(s[462]);
initHESUG(s[463]);
initHESUGA(s[464]);
initHEFTCHK(s[465]);
initHESLFCR(s[466]);
initHESLFCM(s[467]);
initHESLFCY(s[468]);
initHESLFCB(s[469]);
initHEAGE(s[470]);
initHEAGER(s[471]);
initHEAGERY(s[472]);
initHENMST(s[473]);
initHEHBPB1(s[474]);
initHEPBS(s[475]);
initHEWKS(s[476]);
initHESPK(s[477]);
initHEVSI(s[478]);
initHETHK(s[479]);
initHEHRTA(s[480]);
initHEHRTB(s[481]);
initHEHRTC(s[482]);
initHEHRTD(s[483]);
initHEHRTE(s[484]);
initHEHRTF(s[485]);
initHECHOL(s[486]);
initHECHOA(s[487]);
initHECHOLB(s[488]);
initHECHOLC(s[489]);
initHEDIBW1(s[490]);
initHEDIB(s[491]);
initHEDIBW3(s[492]);
initHEDIBW4(s[493]);
initHEDIBW5(s[494]);
initHEDIBW6(s[495]);
initHEDIBW7(s[496]);
initHEDIBW8(s[497]);
initHEDIBW9(s[498]);
initHEDIAD1(s[499]);
initHEDIAD2(s[500]);
initHEDIAD3(s[501]);
initHEDIAD4(s[502]);
initHEDIAD5(s[503]);
initHEDIAD6(s[504]);
initHEDIAD7(s[505]);
initHEDIAD8(s[506]);
initHEDIAD9(s[507]);
initHEDIAM1(s[508]);
initHEDIAM2(s[509]);
initHEDIAM3(s[510]);
initHEDIAM4(s[511]);
initHEDIAM5(s[512]);
initHEDIAM6(s[513]);
initHEDIAM7(s[514]);
initHEDIAM8(s[515]);
initHEDIAM9(s[516]);
initHEDIDS1(s[517]);
initHEDIDS2(s[518]);
initHEDIDS3(s[519]);
initHEDIDS4(s[520]);
initHEDIDS5(s[521]);
initHEDIDS6(s[522]);
initHEDIDS7(s[523]);
initHEDIDS8(s[524]);
initHEDIDS9(s[525]);
initHEDIB01(s[526]);
initHEDIB02(s[527]);
initHEDIB03(s[528]);
initHEDIB04(s[529]);
initHELNG(s[530]);
initHEAMA(s[531]);
initHEART1(s[532]);
initHEART2(s[533]);
initHEOSTE(s[534]);
initHEOSTEA(s[535]);
initHEOSTEB(s[536]);
initHEOSTEC(s[537]);
initHEOSTED(s[538]);
initHEAGF(s[539]);
initHEAGFR(s[540]);
initHEAGFRY(s[541]);
initHEARTA(s[542]);
initHEARTB(s[543]);
initHEARTC(s[544]);
initHEARTD(s[545]);
initHEARTE(s[546]);
initHEAGG(s[547]);
initHEAGGR(s[548]);
initHEAGGRY(s[549]);
initHECANA(s[550]);
initHECANB(s[551]);
initHEPRK(s[552]);
initHEPRKR(s[553]);
initHEPRKRY(s[554]);
initHEAGH(s[555]);
initHEAGHR(s[556]);
initHEAGHRY(s[557]);
initHEPSY1(s[558]);
initHEPSY2(s[559]);
initHEPSY3(s[560]);
initHEPSY4(s[561]);
initHEPSY5(s[562]);
initHEPSY6(s[563]);
initHEYRC(s[564]);
initHEPSYA(s[565]);
initHEPSYB(s[566]);
initHEPSYC(s[567]);
initHEPSYD(s[568]);
initHEPSYE(s[569]);
initHEAGI(s[570]);
initHEAGIR(s[571]);
initHEAGIRY(s[572]);
initHEAGJ(s[573]);
initHEAGJR(s[574]);
initHEAGJRY(s[575]);
initHEFLA(s[576]);
initHEFLB(s[577]);
initHEFLC(s[578]);
initHEFLD(s[579]);
initHEFLE(s[580]);
initHEFLF(s[581]);
initHEFRAC(s[582]);
initHEJI(s[583]);
initHEJIA1(s[584]);
initHEJIA2(s[585]);
initHEJIB(s[586]);
initHEJIC(s[587]);
initHEIQA(s[588]);
initHEIQB(s[589]);
initHEIQC(s[590]);
initHEIQD(s[591]);
initHEIQE(s[592]);
initHEIQF(s[593]);
initHEIQG(s[594]);
initHEIQH(s[595]);
initHEIQI(s[596]);
initHEIQJ(s[597]);
initHEIQK(s[598]);
initHEIQL(s[599]);
initHEIQM(s[600]);
initHEIQN(s[601]);
initHEIQO(s[602]);
initHEIQP(s[603]);
initHEIQQ(s[604]);
initHEPAIN(s[605]);
initHEPAA(s[606]);
initHEBCK(s[607]);
initHEHIP(s[608]);
initHEKNE(s[609]);
initHEFET(s[610]);
initHEPAC(s[611]);
initHEPAD(s[612]);
initHEPAE(s[613]);
initHEPAF(s[614]);
initHEPAF1(s[615]);
initHEKNEA(s[616]);
initHEKNEB(s[617]);
initHEKNEC(s[618]);
initHEPAK1(s[619]);
initHEPAG(s[620]);
initHEPAH(s[621]);
initHEPAI(s[622]);
initHEPAJ(s[623]);
initHEPAK2(s[624]);
initHEBAL(s[625]);
initHEBALA2(s[626]);
initHEBALB2(s[627]);
initHEBALC2(s[628]);
initHEAID9(s[629]);
initHEAID10(s[630]);
initHEAID11(s[631]);
initHEAID12(s[632]);
initHEAIDC2(s[633]);
initHEDIZ(s[634]);
initHEANA(s[635]);
initHEANB(s[636]);
initHEANC(s[637]);
initHEAND(s[638]);
initHEANE(s[639]);
initHEANF(s[640]);
initHEANG(s[641]);
initHEANH(s[642]);
initHEANI1(s[643]);
initHEANI2(s[644]);
initHEANI3(s[645]);
initHEANI4(s[646]);
initHEANI5(s[647]);
initHEANI6(s[648]);
initHEANIM1(s[649]);
initHEANIM2(s[650]);
initHEANIM3(s[651]);
initHEANIM4(s[652]);
initHEANIM5(s[653]);
initHEANIM6(s[654]);
initHEANL(s[655]);
initHEHRTA2(s[656]);
initHEHRTB2(s[657]);
initHEHRTC2(s[658]);
initHEHRTD2(s[659]);
initHEHRTE2(s[660]);
initHEHRTF2(s[661]);
initHECHOL2(s[662]);
initHECHOA2(s[663]);
initHEANK(s[664]);
initHERPA(s[665]);
initHERPB(s[666]);
initHERPC(s[667]);
initHERPD(s[668]);
initHERPE(s[669]);
initHERPF(s[670]);
initHERPG(s[671]);
initHERPH(s[672]);
initHERPI(s[673]);
initHERPJ(s[674]);
initHECDA(s[675]);
initHECDB(s[676]);
initHECDC(s[677]);
initHECDD(s[678]);
initHECDE(s[679]);
initHECDF1(s[680]);
initHECDF2(s[681]);
initHECDF3(s[682]);
initHEAVOID(s[683]);
initHEADA01(s[684]);
initHEADA02(s[685]);
initHEADA03(s[686]);
initHEADA04(s[687]);
initHEADA05(s[688]);
initHEADA06(s[689]);
initHEADA07(s[690]);
initHEADA08(s[691]);
initHEADA09(s[692]);
initHEADA10(s[693]);
initHEADB01(s[694]);
initHEADB02(s[695]);
initHEADB03(s[696]);
initHEADB04(s[697]);
initHEADB05(s[698]);
initHEADB06(s[699]);
initHEADB07(s[700]);
initHEADB08(s[701]);
initHEADB09(s[702]);
initHEADB10(s[703]);
initHEADB11(s[704]);
initHEADB12(s[705]);
initHEADB13(s[706]);
initHEHPA(s[707]);
initHEHPD(s[708]);
initHEHPE(s[709]);
initHEHPB01(s[710]);
initHEHPB02(s[711]);
initHEHPB03(s[712]);
initHEHPB04(s[713]);
initHEHPB05(s[714]);
initHEHPB06(s[715]);
initHEHPB07(s[716]);
initHEHPB08(s[717]);
initHEHPB09(s[718]);
initHEHPC(s[719]);
initHEAID17(s[720]);
initHEAID18(s[721]);
initHEAID19(s[722]);
initHEAID20(s[723]);
initHEAID21(s[724]);
initHEAID22(s[725]);
initHEAIDC3(s[726]);
initHEAIW17(s[727]);
initHEAIN19(s[728]);
initHEINCT(s[729]);
initHEINCTA(s[730]);
initHEINCTB(s[731]);
initHEINCTC(s[732]);
initHEINCTD(s[733]);
initHEINCTE(s[734]);
initHEINCTF(s[735]);
initHEINCTG(s[736]);
initHEINCTH(s[737]);
initHEINCTI(s[738]);
initHEINCTJ(s[739]);
initHESMK(s[740]);
initHESKA(s[741]);
initHESKD(s[742]);
initHESKE(s[743]);
initHESKF(s[744]);
initHESTOP(s[745]);
initHESTOPC(s[746]);
initHENICO(s[747]);
initHECIG(s[748]);
initHESKB(s[749]);
initHETBA(s[750]);
initHETBB(s[751]);
initHESKC(s[752]);
initHETBC(s[753]);
initHETBD(s[754]);
initHECGSTP(s[755]);
initHECGSTA(s[756]);
initHECGNIC(s[757]);
initHENICTK(s[758]);
initHEACTA(s[759]);
initHEACTB(s[760]);
initHEACTC(s[761]);
initHEDIAS3(s[762]);
initHEDIAS8(s[763]);
initMMSCHS(s[764]);
initMMALONE(s[765]);
initMMHSS(s[766]);
initMMWILL(s[767]);
initMMSAF(s[768]);
initMMAVSP(s[769]);
initMMWALA(s[770]);
initMMTRYA(s[771]);
initMMWLKA(s[772]);
initMMTRYB(s[773]);
initMMWLKB(s[774]);
initMMPAIN(s[775]);
initMMRECR(s[776]);
initMMRECRC(s[777]);
initMMAID(s[778]);
initMMAIDC(s[779]);
initMMCOMZ1(s[780]);
initMMCOMZ2(s[781]);
initMMCOMZ3(s[782]);
initSPCAR(s[783]);
initSPCARA(s[784]);
initSPTRAA(s[785]);
initSPTRAB1(s[786]);
initSPTRAB2(s[787]);
initSPTRAB3(s[788]);
initSPTRAB4(s[789]);
initSPTRAB5(s[790]);
initSPTRAB6(s[791]);
initSPTRAB7(s[792]);
initSPTRM01(s[793]);
initSPTRM02(s[794]);
initSPTRM03(s[795]);
initSPTRM04(s[796]);
initSPTRM05(s[797]);
initSPTRM06(s[798]);
initSPTRM07(s[799]);
initWPACT1(s[800]);
initWPACT2(s[801]);
initWPACT3(s[802]);
initWPACT4(s[803]);
initWPACT5(s[804]);
initWPACT6(s[805]);
initWPAWAY(s[806]);
initWPACTW(s[807]);
initWPTAW(s[808]);
initWPTAWC(s[809]);
initWPDES(s[810]);
initWPDESC(s[811]);
initWPEDC(s[812]);
initWPVW(s[813]);
initWPES(s[814]);
initWPJOB(s[815]);
initWPJOBL(s[816]);
initWPSTJ(s[817]);
initWPEMP(s[818]);
initWPEVER(s[819]);
initWPLJOB1(s[820]);
initWPLJOB2(s[821]);
initWPLJOB3(s[822]);
initWPLJOB4(s[823]);
initWPLJOB5(s[824]);
initWPLJO12(s[825]);
initWPLJO13(s[826]);
initWPLJO14(s[827]);
initWPLJO15(s[828]);
initWPLJO16(s[829]);
initWPLJOBM(s[830]);
initWPCHG1(s[831]);
initWPCHG2(s[832]);
initWPCHG3(s[833]);
initWPCHG4(s[834]);
initWPCHGNO(s[835]);
initWPCHGM1(s[836]);
initWPCHGM2(s[837]);
initWPCHGM3(s[838]);
initWPCHGM4(s[839]);
initWPCHGO(s[840]);
initWPCHGA(s[841]);
initWPCHGB1(s[842]);
initWPCHGB2(s[843]);
initWPCHGB3(s[844]);
initWPESP(s[845]);
initWPASKD(s[846]);
initWPASKE(s[847]);
initWPASKF(s[848]);
initWPSUP(s[849]);
initWPEST(s[850]);
initWPSAL(s[851]);
initWPCJB1(s[852]);
initWPCJB2(s[853]);
initWPCJB3(s[854]);
initWPCJB4(s[855]);
initWPNEMP(s[856]);
initWPEMPL(s[857]);
initWPNOE(s[858]);
initWPJACT(s[859]);
initWPSJOBY(s[860]);
initWPSJOBM(s[861]);
initWPWYWK1(s[862]);
initWPWYWK2(s[863]);
initWPWYWK3(s[864]);
initWPWYWK4(s[865]);
initWPWYWK5(s[866]);
initWPWYW15(s[867]);
initWPWYW16(s[868]);
initWPWYW17(s[869]);
initWPWYW18(s[870]);
initWPWHYJ1(s[871]);
initWPWHYJ2(s[872]);
initWPWHYJ3(s[873]);
initWPWHYJ4(s[874]);
initWPWHYJ5(s[875]);
initWPWYJ14(s[876]);
initWPWYJ15(s[877]);
initWPWYJ16(s[878]);
initWPWYJ17(s[879]);
initWPWYJ18(s[880]);
initWPWHYJM(s[881]);
initWPCJOB(s[882]);
initWPHJOB(s[883]);
initWPHWRK(s[884]);
initWPWLY(s[885]);
initWPWLYM(s[886]);
initWPHLY(s[887]);
initWPWLYY(s[888]);
initWPWLYYL(s[889]);
initWPWLYYU(s[890]);
initWPWLYYE(s[891]);
initWPWLYYR(s[892]);
initWPLLSY(s[893]);
initWPLLSM(s[894]);
initWPLLJY(s[895]);
initWPLLJM(s[896]);
initWPYSTP1(s[897]);
initWPYSTP2(s[898]);
initWPYSTP3(s[899]);
initWPYSTP4(s[900]);
initWPYSTP5(s[901]);
initWPYSTM1(s[902]);
initWPYSTM2(s[903]);
initWPYSTM3(s[904]);
initWPYSTM4(s[905]);
initWPYSTM5(s[906]);
initWPYSTPM(s[907]);
initWPNCHG1(s[908]);
initWPNCHG2(s[909]);
initWPNCHG3(s[910]);
initWPNCHM1(s[911]);
initWPNCHM2(s[912]);
initWPNCHM3(s[913]);
initWPNCHGN(s[914]);
initWPNCHGO(s[915]);
initWPNCHGA(s[916]);
initWPNCHB1(s[917]);
initWPNCHB2(s[918]);
initWPOJ(s[919]);
initWPOWB(s[920]);
initWPLPSY(s[921]);
initWPLPSM(s[922]);
initWPLPEY(s[923]);
initWPLPEM(s[924]);
initWPOJ2(s[925]);
initWPOWB2(s[926]);
initWPLPSY2(s[927]);
initWPLPSM2(s[928]);
initWPLPEY2(s[929]);
initWPLPEM2(s[930]);
initWPOJ3(s[931]);
initWPOWB3(s[932]);
initWPLPSY3(s[933]);
initWPLPSM3(s[934]);
initWPLPEY3(s[935]);
initWPLPEM3(s[936]);
initWPOJ4(s[937]);
initWPOWB4(s[938]);
initWPLPSY4(s[939]);
initWPLPSM4(s[940]);
initWPLPEY4(s[941]);
initWPLPEM4(s[942]);
initWPOJ5(s[943]);
initWPOWB5(s[944]);
initWPLPSY5(s[945]);
initWPLPSM5(s[946]);
initWPLPEY5(s[947]);
initWPLPEM5(s[948]);
initWPNIC(s[949]);
initWPNICE(s[950]);
initWPNIMW(s[951]);
initWPLIMWK(s[952]);
initWPCHGD1(s[953]);
initWPCHGD2(s[954]);
initWPCHGD3(s[955]);
initWPCHDM1(s[956]);
initWPCHDM2(s[957]);
initWPCHDM3(s[958]);
initWPCHGDN(s[959]);
initWPCHGL1(s[960]);
initWPCHGL2(s[961]);
initWPCHGL3(s[962]);
initWPCHGL4(s[963]);
initWPCHGL5(s[964]);
initWPCHL11(s[965]);
initWPCHL12(s[966]);
initWPCHL13(s[967]);
initWPCHL14(s[968]);
initWPCHL15(s[969]);
initWPOCHG(s[970]);
initWPACHG(s[971]);
initWPBCHG1(s[972]);
initWPBCHG2(s[973]);
initWPBCHG3(s[974]);
initWPBCHG4(s[975]);
initWPNCH17(s[976]);
initWPNCH18(s[977]);
initWPLNJ(s[978]);
initWPWHYN1(s[979]);
initWPWHYN2(s[980]);
initWPWHYN3(s[981]);
initWPWHYN4(s[982]);
initWPWHYN5(s[983]);
initWPWHYN6(s[984]);
initWPWYN16(s[985]);
initWPWYN17(s[986]);
initWPWYN18(s[987]);
initWPWYN19(s[988]);
initWPWYN20(s[989]);
initWPWYN21(s[990]);
initWPMYNJ(s[991]);
initWPLKCH1(s[992]);
initWPLKCH2(s[993]);
initWPLKCH3(s[994]);
initWPLKCH4(s[995]);
initWPLKCH5(s[996]);
initWPLKCH6(s[997]);
initWPLKCM1(s[998]);
initWPLKCM2(s[999]);
}
public void init_1000_1999(String line) {
initWPLKCM3(s[1000]);
initWPLKCM4(s[1001]);
initWPLKCM5(s[1002]);
initWPLKCM6(s[1003]);
initWPNOLK1(s[1004]);
initWPNOLK2(s[1005]);
initWPNOLK3(s[1006]);
initWPNOLK4(s[1007]);
initWPNOLK5(s[1008]);
initWPNOL12(s[1009]);
initWPNOL13(s[1010]);
initWPNOL14(s[1011]);
initWPNOL15(s[1012]);
initWPNOL16(s[1013]);
initWPSPAY(s[1014]);
initWPOTP(s[1015]);
initWPAOTP(s[1016]);
initWPAOTWL(s[1017]);
initWPAOTWU(s[1018]);
initWPAOTWE(s[1019]);
initWPAOTWR(s[1020]);
initWPAOTFL(s[1021]);
initWPAOTFU(s[1022]);
initWPAOTFE(s[1023]);
initWPAOTFR(s[1024]);
initWPAOTML(s[1025]);
initWPAOTMU(s[1026]);
initWPAOTME(s[1027]);
initWPAOTMR(s[1028]);
initWPAOTYL(s[1029]);
initWPAOTYU(s[1030]);
initWPAOTYE(s[1031]);
initWPAOTYR(s[1032]);
initWPAOTOL(s[1033]);
initWPAOTOU(s[1034]);
initWPAOTOE(s[1035]);
initWPAOTOR(s[1036]);
initWPPERI(s[1037]);
initWPSLIP(s[1038]);
initWPTHP(s[1039]);
initWPTHPWL(s[1040]);
initWPTHPWU(s[1041]);
initWPTHPWE(s[1042]);
initWPTHPWR(s[1043]);
initWPTHPFL(s[1044]);
initWPTHPFU(s[1045]);
initWPTHPFE(s[1046]);
initWPTHPFR(s[1047]);
initWPTHPML(s[1048]);
initWPTHPMU(s[1049]);
initWPTHPME(s[1050]);
initWPTHPMR(s[1051]);
initWPTHPYL(s[1052]);
initWPTHPYU(s[1053]);
initWPTHPYE(s[1054]);
initWPTHPYR(s[1055]);
initWPTHPOL(s[1056]);
initWPTHPOU(s[1057]);
initWPTHPOE(s[1058]);
initWPTHPOR(s[1059]);
initWPTHL(s[1060]);
initWPUP(s[1061]);
initWPUPA(s[1062]);
initWPUPAWL(s[1063]);
initWPUPAWU(s[1064]);
initWPUPAWE(s[1065]);
initWPUPAWR(s[1066]);
initWPUPAFL(s[1067]);
initWPUPAFU(s[1068]);
initWPUPAFE(s[1069]);
initWPUPAFR(s[1070]);
initWPUPAML(s[1071]);
initWPUPAMU(s[1072]);
initWPUPAME(s[1073]);
initWPUPAMR(s[1074]);
initWPUPAYL(s[1075]);
initWPUPAYU(s[1076]);
initWPUPAYE(s[1077]);
initWPUPAYR(s[1078]);
initWPUPAOL(s[1079]);
initWPUPAOU(s[1080]);
initWPUPAOE(s[1081]);
initWPUPAOR(s[1082]);
initWPPAYA(s[1083]);
initWPCRET(s[1084]);
initWPCRAGE(s[1085]);
initWPCRETL(s[1086]);
initWPIR(s[1087]);
initWPAP(s[1088]);
initWPRAIR(s[1089]);
initWPRAIM(s[1090]);
initWPRAEY(s[1091]);
initWPRAEM(s[1092]);
initWPPROF(s[1093]);
initWPPROFL(s[1094]);
initWPPROFU(s[1095]);
initWPPROFE(s[1096]);
initWPPROFR(s[1097]);
initWPPL(s[1098]);
initWPBDT(s[1099]);
initWPBDNI(s[1100]);
initWPBI(s[1101]);
initWPBIWA(s[1102]);
initWPBIWAL(s[1103]);
initWPBIWAU(s[1104]);
initWPBIWAE(s[1105]);
initWPBIWAR(s[1106]);
initWPBIMA(s[1107]);
initWPBIMAL(s[1108]);
initWPBIMAU(s[1109]);
initWPBIMAE(s[1110]);
initWPBIMAR(s[1111]);
initWPBUSV(s[1112]);
initWPBUSVL(s[1113]);
initWPBUSVU(s[1114]);
initWPBUSVE(s[1115]);
initWPBUSVR(s[1116]);
initWPMOJ(s[1117]);
initWPHMSJ(s[1118]);
initWPESJ(s[1119]);
initWPESJL(s[1120]);
initWPESJU(s[1121]);
initWPESJE(s[1122]);
initWPESJR(s[1123]);
initWPESJM(s[1124]);
initWPESJML(s[1125]);
initWPESJMU(s[1126]);
initWPESJME(s[1127]);
initWPESJMR(s[1128]);
initWPBUS(s[1129]);
initWPVBUS(s[1130]);
initWPVBUSL(s[1131]);
initWPVBUSU(s[1132]);
initWPVBUSE(s[1133]);
initWPVBUSR(s[1134]);
initASKINFO(s[1135]);
initWPNUM(s[1136]);
initWPSPS(s[1137]);
initWPLFTP1(s[1138]);
initWPLFTM1(s[1139]);
initWPLFTM2(s[1140]);
initWPSRUL(s[1141]);
initWPDPSN(s[1142]);
initWPDSNB(s[1143]);
initWPNUM2(s[1144]);
initWPSPS2(s[1145]);
initWPKPS2(s[1146]);
initWPLFTP5(s[1147]);
initWPLFTP6(s[1148]);
initWPLFTP7(s[1149]);
initWPLFTM7(s[1150]);
initWPLFTM8(s[1151]);
initWPLFTM9(s[1152]);
initWPLFT13(s[1153]);
initWPSRUL2(s[1154]);
initWPDPSN2(s[1155]);
initWPDSNB2(s[1156]);
initWPNUM3(s[1157]);
initWPSPS3(s[1158]);
initWPKPS3(s[1159]);
initWPLFTP9(s[1160]);
initWPSRUL3(s[1161]);
initWPDPSN3(s[1162]);
initWPDSNB3(s[1163]);
initWPNUM4(s[1164]);
initASKPST(s[1165]);
initASKSNC(s[1166]);
initWPPSTR(s[1167]);
initWPDSNC(s[1168]);
initWPINF(s[1169]);
initWPPAY(s[1170]);
initWPPYR(s[1171]);
initWPYWL(s[1172]);
initWPYWU(s[1173]);
initWPYWE(s[1174]);
initWPYWR(s[1175]);
initWPYFL(s[1176]);
initWPYFU(s[1177]);
initWPYFE(s[1178]);
initWPYFR(s[1179]);
initWPYML(s[1180]);
initWPYMU(s[1181]);
initWPYME(s[1182]);
initWPYMR(s[1183]);
initWPYYL(s[1184]);
initWPYYU(s[1185]);
initWPYYE(s[1186]);
initWPYYR(s[1187]);
initWPYOL(s[1188]);
initWPYOU(s[1189]);
initWPYOE(s[1190]);
initWPYOR(s[1191]);
initWPTAX(s[1192]);
initWPLUPS(s[1193]);
initWPLUPA(s[1194]);
initWPLUMPL(s[1195]);
initWPLUMPU(s[1196]);
initWPLUMPE(s[1197]);
initWPLUMPR(s[1198]);
initWPTAKP(s[1199]);
initWPINCD(s[1200]);
initWPIDL(s[1201]);
initWPIDU(s[1202]);
initWPIDE(s[1203]);
initWPIDR(s[1204]);
initWPRGHB(s[1205]);
initWPNUM5(s[1206]);
initASKPST2(s[1207]);
initASKSNC2(s[1208]);
initWPPSTR2(s[1209]);
initWPDSNC2(s[1210]);
initWPINF2(s[1211]);
initWPPAY2(s[1212]);
initWPPYR2(s[1213]);
initWPY2WL(s[1214]);
initWPY2WU(s[1215]);
initWPY2WE(s[1216]);
initWPY2WR(s[1217]);
initWPY2FL(s[1218]);
initWPY2FU(s[1219]);
initWPY2FE(s[1220]);
initWPY2FR(s[1221]);
initWPY2ML(s[1222]);
initWPY2MU(s[1223]);
initWPY2ME(s[1224]);
initWPY2MR(s[1225]);
initWPY2YL(s[1226]);
initWPY2YU(s[1227]);
initWPY2YE(s[1228]);
initWPY2YR(s[1229]);
initWPY2OL(s[1230]);
initWPY2OU(s[1231]);
initWPY2OE(s[1232]);
initWPY2OR(s[1233]);
initWPTAX2(s[1234]);
initWPLUPS2(s[1235]);
initWPLUPA2(s[1236]);
initWPLUM2L(s[1237]);
initWPLUM2U(s[1238]);
initWPLUM2E(s[1239]);
initWPLUM2R(s[1240]);
initWPTAKP2(s[1241]);
initWPINCD2(s[1242]);
initWPID2L(s[1243]);
initWPID2U(s[1244]);
initWPID2E(s[1245]);
initWPID2R(s[1246]);
initWPRGHB2(s[1247]);
initWPNUM6(s[1248]);
initASKPST3(s[1249]);
initASKSNC3(s[1250]);
initWPPSTR3(s[1251]);
initWPDSNC3(s[1252]);
initWPINF3(s[1253]);
initWPPAY3(s[1254]);
initWPPYR3(s[1255]);
initWPY3WL(s[1256]);
initWPY3WU(s[1257]);
initWPY3WE(s[1258]);
initWPY3WR(s[1259]);
initWPY3FL(s[1260]);
initWPY3FU(s[1261]);
initWPY3FE(s[1262]);
initWPY3FR(s[1263]);
initWPY3ML(s[1264]);
initWPY3MU(s[1265]);
initWPY3ME(s[1266]);
initWPY3MR(s[1267]);
initWPY3YL(s[1268]);
initWPY3YU(s[1269]);
initWPY3YE(s[1270]);
initWPY3YR(s[1271]);
initWPY3OL(s[1272]);
initWPY3OU(s[1273]);
initWPY3OE(s[1274]);
initWPY3OR(s[1275]);
initWPTAX3(s[1276]);
initWPLUPS3(s[1277]);
initWPLUPA3(s[1278]);
initWPLUM3L(s[1279]);
initWPLUM3U(s[1280]);
initWPLUM3E(s[1281]);
initWPLUM3R(s[1282]);
initWPTAKP3(s[1283]);
initWPINCD3(s[1284]);
initWPID3L(s[1285]);
initWPID3U(s[1286]);
initWPID3E(s[1287]);
initWPID3R(s[1288]);
initWPRGHB3(s[1289]);
initWPNUM7(s[1290]);
initASKQS(s[1291]);
initASKDCB(s[1292]);
initASKRUL(s[1293]);
initWPCOS(s[1294]);
initWPYBS(s[1295]);
initWPERC(s[1296]);
initWPMC(s[1297]);
initWPMCA(s[1298]);
initWPPERC(s[1299]);
initWPMFRC(s[1300]);
initWPYCAT(s[1301]);
initWPYCA(s[1302]);
initWPMCAF(s[1303]);
initWPYFRA(s[1304]);
initWPACON(s[1305]);
initWPACOA(s[1306]);
initWPACOB(s[1307]);
initWPACOC(s[1308]);
initWPFRAS(s[1309]);
initWPCONY(s[1310]);
initWPADY(s[1311]);
initWPMMIN(s[1312]);
initWPMUC(s[1313]);
initWPAUC(s[1314]);
initWPPER(s[1315]);
initWPFRUC(s[1316]);
initWPANYC(s[1317]);
initWPACAT(s[1318]);
initWPECON(s[1319]);
initWPECNA(s[1320]);
initWPEPER(s[1321]);
initWPEFS(s[1322]);
initWPNRA(s[1323]);
initWPBTHA(s[1324]);
initWPBTHP(s[1325]);
initWPERA(s[1326]);
initWPYAER(s[1327]);
initWPDSP(s[1328]);
initWPDESPC(s[1329]);
initWPFSAP(s[1330]);
initWPFSAPC(s[1331]);
initWPPLP(s[1332]);
initWPPLPH(s[1333]);
initWPLUMP(s[1334]);
initWPLUL(s[1335]);
initWPLUU(s[1336]);
initWPLUE(s[1337]);
initWPLUR(s[1338]);
initWPPTP(s[1339]);
initWPPSAL(s[1340]);
initWPASAL(s[1341]);
initWPASALL(s[1342]);
initWPASALU(s[1343]);
initWPASALE(s[1344]);
initWPASALR(s[1345]);
initWPFSAV(s[1346]);
initWPPFVA(s[1347]);
initWPPFL(s[1348]);
initWPPFU(s[1349]);
initWPPFE(s[1350]);
initWPPFR(s[1351]);
initWPAPF(s[1352]);
initWPAPFL(s[1353]);
initWPAPFU(s[1354]);
initWPAPFE(s[1355]);
initWPAPFR(s[1356]);
initWPPTOP(s[1357]);
initWPPENB(s[1358]);
initWPPETL(s[1359]);
initWPPETU(s[1360]);
initWPPETR(s[1361]);
initWPPETE(s[1362]);
initWPPEAL(s[1363]);
initWPPEAU(s[1364]);
initWPPEAR(s[1365]);
initWPPEAE(s[1366]);
initWPCONS(s[1367]);
initWPNUM8(s[1368]);
initASKQS2(s[1369]);
initASKDCB2(s[1370]);
initASKRUL2(s[1371]);
initWPCOS2(s[1372]);
initWPYBS2(s[1373]);
initWPERC2(s[1374]);
initWPMC2(s[1375]);
initWPMCA2(s[1376]);
initWPPERC2(s[1377]);
initWPMFRC2(s[1378]);
initWPYCAT2(s[1379]);
initWPYCA2(s[1380]);
initWPMCAF2(s[1381]);
initWPYFRA2(s[1382]);
initWPACON2(s[1383]);
initWPACOA2(s[1384]);
initWPACOB2(s[1385]);
initWPACOC2(s[1386]);
initWPFRAS2(s[1387]);
initWPCONY2(s[1388]);
initWPADY2(s[1389]);
initWPMMIN2(s[1390]);
initWPMUC2(s[1391]);
initWPAUC2(s[1392]);
initWPPER2(s[1393]);
initWPFRUC2(s[1394]);
initWPANYC2(s[1395]);
initWPACAT2(s[1396]);
initWPECON2(s[1397]);
initWPECNA2(s[1398]);
initWPEPER2(s[1399]);
initWPEFS2(s[1400]);
initWPNRA2(s[1401]);
initWPBTHA2(s[1402]);
initWPBTHP2(s[1403]);
initWPERA2(s[1404]);
initWPYAER2(s[1405]);
initWPDSP2(s[1406]);
initWPFSAP2(s[1407]);
initWPPLP2(s[1408]);
initWPPLPH2(s[1409]);
initWPLUMP2(s[1410]);
initWPLU2L(s[1411]);
initWPLU2U(s[1412]);
initWPLU2E(s[1413]);
initWPLU2R(s[1414]);
initWPPTP2(s[1415]);
initWPPSAL2(s[1416]);
initWPASAL2(s[1417]);
initWPASA2L(s[1418]);
initWPASA2U(s[1419]);
initWPASA2E(s[1420]);
initWPASA2R(s[1421]);
initWPFSAV2(s[1422]);
initWPPFVA2(s[1423]);
initWPPF2L(s[1424]);
initWPPF2U(s[1425]);
initWPPF2E(s[1426]);
initWPPF2R(s[1427]);
initWPAPF2(s[1428]);
initWPAPF2L(s[1429]);
initWPAPF2U(s[1430]);
initWPAPF2E(s[1431]);
initWPAPF2R(s[1432]);
initWPPTOP2(s[1433]);
initWPPENB2(s[1434]);
initWPPE2TL(s[1435]);
initWPPE2TU(s[1436]);
initWPPE2TR(s[1437]);
initWPPE2TE(s[1438]);
initWPPE2AL(s[1439]);
initWPPE2AU(s[1440]);
initWPPE2AR(s[1441]);
initWPPE2AE(s[1442]);
initWPCONS2(s[1443]);
initWPNUM9(s[1444]);
initASKQS3(s[1445]);
initASKDCB3(s[1446]);
initASKRUL3(s[1447]);
initWPCOS3(s[1448]);
initWPYBS3(s[1449]);
initWPERC3(s[1450]);
initWPMC3(s[1451]);
initWPMCA3(s[1452]);
initWPPERC3(s[1453]);
initWPMFRC3(s[1454]);
initWPYCAT3(s[1455]);
initWPYCA3(s[1456]);
initWPMCAF3(s[1457]);
initWPYFRA3(s[1458]);
initWPACON3(s[1459]);
initWPACOA3(s[1460]);
initWPACOB3(s[1461]);
initWPACOC3(s[1462]);
initWPFRAS3(s[1463]);
initWPCONY3(s[1464]);
initWPADY3(s[1465]);
initWPMMIN3(s[1466]);
initWPMUC3(s[1467]);
initWPAUC3(s[1468]);
initWPPER3(s[1469]);
initWPFRUC3(s[1470]);
initWPANYC3(s[1471]);
initWPACAT3(s[1472]);
initWPECON3(s[1473]);
initWPECNA3(s[1474]);
initWPEPER3(s[1475]);
initWPEFS3(s[1476]);
initWPNRA3(s[1477]);
initWPBTHA3(s[1478]);
initWPBTHP3(s[1479]);
initWPERA3(s[1480]);
initWPYAER3(s[1481]);
initWPDSP3(s[1482]);
initWPFSAP3(s[1483]);
initWPPLP3(s[1484]);
initWPPLPH3(s[1485]);
initWPLUMP3(s[1486]);
initWPLU3L(s[1487]);
initWPLU3U(s[1488]);
initWPLU3E(s[1489]);
initWPLU3R(s[1490]);
initWPPTP3(s[1491]);
initWPPSAL3(s[1492]);
initWPASAL3(s[1493]);
initWPASA3L(s[1494]);
initWPASA3U(s[1495]);
initWPASA3E(s[1496]);
initWPASA3R(s[1497]);
initWPFSAV3(s[1498]);
initWPPFVA3(s[1499]);
initWPPFV3L(s[1500]);
initWPPFV3U(s[1501]);
initWPPFV3E(s[1502]);
initWPPFV3R(s[1503]);
initWPAPF3(s[1504]);
initWPAPF3L(s[1505]);
initWPAPF3U(s[1506]);
initWPAPF3E(s[1507]);
initWPAPF3R(s[1508]);
initWPPTOP3(s[1509]);
initWPPENB3(s[1510]);
initWPPE3TL(s[1511]);
initWPPE3TU(s[1512]);
initWPPE3TR(s[1513]);
initWPPE3TE(s[1514]);
initWPPE3AL(s[1515]);
initWPPE3AU(s[1516]);
initWPPE3AR(s[1517]);
initWPPE3AE(s[1518]);
initWPCONS3(s[1519]);
initWPNUM11(s[1520]);
initWPYPEN2(s[1521]);
initWPCB2(s[1522]);
initWPCB2L(s[1523]);
initWPCB2U(s[1524]);
initWPCB2E(s[1525]);
initWPCB2R(s[1526]);
initWPSRC2(s[1527]);
initWPMRC2(s[1528]);
initWPMRCP2(s[1529]);
initWPLRCY2(s[1530]);
initWPLRCM2(s[1531]);
initWPLAC2(s[1532]);
initWPCON2(s[1533]);
initWPLPE2(s[1534]);
initWPLPA2(s[1535]);
initWPLP2TL(s[1536]);
initWPLP2TU(s[1537]);
initWPLP2TE(s[1538]);
initWPLP2TR(s[1539]);
initWPLP2AL(s[1540]);
initWPLP2AU(s[1541]);
initWPLP2AE(s[1542]);
initWPLP2AR(s[1543]);
initWPNUM12(s[1544]);
initWPYPEN3(s[1545]);
initWPCB3(s[1546]);
initWPCB3L(s[1547]);
initWPCB3U(s[1548]);
initWPCB3E(s[1549]);
initWPCB3R(s[1550]);
initWPSRC3(s[1551]);
initWPMRC3(s[1552]);
initWPMRCP3(s[1553]);
initWPLRCY3(s[1554]);
initWPLRCM3(s[1555]);
initWPLAC3(s[1556]);
initWPCON3(s[1557]);
initWPLPE3(s[1558]);
initWPLPA3(s[1559]);
initWPLP3TL(s[1560]);
initWPLP3TU(s[1561]);
initWPLP3TE(s[1562]);
initWPLP3TR(s[1563]);
initWPLP3AL(s[1564]);
initWPLP3AU(s[1565]);
initWPLP3AE(s[1566]);
initWPLP3AR(s[1567]);
initWPNUM14(s[1568]);
initASKCEM2(s[1569]);
initWPPLON2(s[1570]);
initWPPCON2(s[1571]);
initWPHCON2(s[1572]);
initWPCAMT2(s[1573]);
initWPCPER2(s[1574]);
initWPNIFP2(s[1575]);
initWPLCOY2(s[1576]);
initWPLCOM2(s[1577]);
initWPMCON2(s[1578]);
initWPAC2(s[1579]);
initWPFSC2(s[1580]);
initWPNIRR2(s[1581]);
initWPLASY2(s[1582]);
initWPLASM2(s[1583]);
initWPMLAS2(s[1584]);
initWPLASP2(s[1585]);
initWPRCON2(s[1586]);
initWPRSC7(s[1587]);
initWPRSC8(s[1588]);
initWPRSC9(s[1589]);
initWPCEMP2(s[1590]);
initWPECPP2(s[1591]);
initWPAECP2(s[1592]);
initWPFSEC2(s[1593]);
initWPMEC2(s[1594]);
initWPAMEC2(s[1595]);
initWPFSCP2(s[1596]);
initWPFSCO2(s[1597]);
initWPCUV2(s[1598]);
initWPCUV2L(s[1599]);
initWPCUV2U(s[1600]);
initWPCUV2E(s[1601]);
initWPCUV2R(s[1602]);
initWPPEXP2(s[1603]);
initWPAMOU2(s[1604]);
initWPAM2TL(s[1605]);
initWPAM2TU(s[1606]);
initWPAM2TE(s[1607]);
initWPAM2TR(s[1608]);
initWPAM2AL(s[1609]);
initWPAM2AU(s[1610]);
initWPAM2AE(s[1611]);
initWPAM2AR(s[1612]);
initWPNUM15(s[1613]);
initASKCEM3(s[1614]);
initWPPLON3(s[1615]);
initWPPCON3(s[1616]);
initWPHCON3(s[1617]);
initWPCAMT3(s[1618]);
initWPCPER3(s[1619]);
initWPNIFP3(s[1620]);
initWPLCOY3(s[1621]);
initWPLCOM3(s[1622]);
initWPMCON3(s[1623]);
initWPAC3(s[1624]);
initWPFSC3(s[1625]);
initWPNIRR3(s[1626]);
initWPLASY3(s[1627]);
initWPLASM3(s[1628]);
initWPMLAS3(s[1629]);
initWPLASP3(s[1630]);
initWPRCON3(s[1631]);
initWPRSC13(s[1632]);
initWPRSC14(s[1633]);
initWPRSM13(s[1634]);
initWPRSM14(s[1635]);
initWPCEMP3(s[1636]);
initWPECPP3(s[1637]);
initWPAECP3(s[1638]);
initWPFSEC3(s[1639]);
initWPMEC3(s[1640]);
initWPAMEC3(s[1641]);
initWPFSCP3(s[1642]);
initWPFSCO3(s[1643]);
initWPCUV3(s[1644]);
initWPCUV3L(s[1645]);
initWPCUV3U(s[1646]);
initWPCUV3E(s[1647]);
initWPCUV3R(s[1648]);
initWPPEXP3(s[1649]);
initWPAMOU3(s[1650]);
initWPAM3TL(s[1651]);
initWPAM3TU(s[1652]);
initWPAM3TE(s[1653]);
initWPAM3TR(s[1654]);
initWPAM3AL(s[1655]);
initWPAM3AU(s[1656]);
initWPAM3AE(s[1657]);
initWPAM3AR(s[1658]);
initWPNUM16(s[1659]);
initWPIFS01(s[1660]);
initWPIFS02(s[1661]);
initWPIFS03(s[1662]);
initWPFINF(s[1663]);
initWPNUM17(s[1664]);
initWPIFS10(s[1665]);
initWPIFS11(s[1666]);
initWPIFS12(s[1667]);
initWPFINF2(s[1668]);
initWPNUM18(s[1669]);
initWPIFS19(s[1670]);
initWPIFS20(s[1671]);
initWPFINF3(s[1672]);
initWPNUM19(s[1673]);
initWPERET(s[1674]);
initWPERAG(s[1675]);
initWPBPS(s[1676]);
initWPANYP(s[1677]);
initWPPS(s[1678]);
initWPDPS(s[1679]);
initWPPSM1(s[1680]);
initWPPSM2(s[1681]);
initWPPSMM1(s[1682]);
initWPPSMM2(s[1683]);
initWPPSMM3(s[1684]);
initWPEC(s[1685]);
initWPECA(s[1686]);
initWPNUM20(s[1687]);
initASKQS4(s[1688]);
initASKDCB4(s[1689]);
initASKRUL4(s[1690]);
initWPCOS4(s[1691]);
initWPYBS4(s[1692]);
initWPERC4(s[1693]);
initWPMC4(s[1694]);
initWPMCA4(s[1695]);
initWPPERC4(s[1696]);
initWPMFRC4(s[1697]);
initWPYCAT4(s[1698]);
initWPYCA4(s[1699]);
initWPMCAF4(s[1700]);
initWPYFRA4(s[1701]);
initWPACON4(s[1702]);
initWPACOA4(s[1703]);
initWPACOB4(s[1704]);
initWPACOC4(s[1705]);
initWPFRAS4(s[1706]);
initWPCONY4(s[1707]);
initWPADY4(s[1708]);
initWPMMIN4(s[1709]);
initWPMUC4(s[1710]);
initWPAUC4(s[1711]);
initWPPER4(s[1712]);
initWPFRUC4(s[1713]);
initWPANYC4(s[1714]);
initWPACAT4(s[1715]);
initWPECON4(s[1716]);
initWPECNA4(s[1717]);
initWPEPER4(s[1718]);
initWPEFS4(s[1719]);
initWPNRA4(s[1720]);
initWPBTHA4(s[1721]);
initWPBTHP4(s[1722]);
initWPERA4(s[1723]);
initWPYAER4(s[1724]);
initWPDSP4(s[1725]);
initWPDES4C(s[1726]);
initWPFSAP4(s[1727]);
initWPFSP4C(s[1728]);
initWPPLP4(s[1729]);
initWPPLPH4(s[1730]);
initWPLUMP4(s[1731]);
initWPLU4L(s[1732]);
initWPLU4U(s[1733]);
initWPLU4E(s[1734]);
initWPLU4R(s[1735]);
initWPPTP4(s[1736]);
initWPPSAL4(s[1737]);
initWPASAL4(s[1738]);
initWPASA4L(s[1739]);
initWPASA4U(s[1740]);
initWPASA4E(s[1741]);
initWPASA4R(s[1742]);
initWPFSAV4(s[1743]);
initWPPFVA4(s[1744]);
initWPPFV4L(s[1745]);
initWPPFV4U(s[1746]);
initWPPFV4E(s[1747]);
initWPPFV4R(s[1748]);
initWPAPF4(s[1749]);
initWPAPF4L(s[1750]);
initWPAPF4U(s[1751]);
initWPAPF4E(s[1752]);
initWPAPF4R(s[1753]);
initWPPTOP4(s[1754]);
initWPPENB4(s[1755]);
initWPPE4TL(s[1756]);
initWPPE4TU(s[1757]);
initWPPE4TR(s[1758]);
initWPPE4TE(s[1759]);
initWPPE4AL(s[1760]);
initWPPE4AU(s[1761]);
initWPPE4AR(s[1762]);
initWPPE4AE(s[1763]);
initWPCONS4(s[1764]);
initWPNUM21(s[1765]);
initWPIFS28(s[1766]);
initWPIFS29(s[1767]);
initWPIFS30(s[1768]);
initWPFINF4(s[1769]);
initWPNUM22(s[1770]);
initWPASK(s[1771]);
initWPCPS(s[1772]);
initWPCPSC(s[1773]);
initWPKP(s[1774]);
initWPKPC(s[1775]);
initWPPDES(s[1776]);
initWPOARS(s[1777]);
initWPNUM23(s[1778]);
initWPASK2(s[1779]);
initWPCPS2(s[1780]);
initWPCPSC2(s[1781]);
initWPKP2(s[1782]);
initWPKP2C(s[1783]);
initWPPDES2(s[1784]);
initWPOARS2(s[1785]);
initWPNUM24(s[1786]);
initASKQS5(s[1787]);
initASKDCB5(s[1788]);
initASKRUL5(s[1789]);
initWPCOS5(s[1790]);
initWPYBS5(s[1791]);
initWPERC5(s[1792]);
initWPMC5(s[1793]);
initWPMCA5(s[1794]);
initWPPERC5(s[1795]);
initWPMFRC5(s[1796]);
initWPYCAT5(s[1797]);
initWPYCA5(s[1798]);
initWPMCAF5(s[1799]);
initWPYFRA5(s[1800]);
initWPACON5(s[1801]);
initWPACOA5(s[1802]);
initWPACOB5(s[1803]);
initWPACOC5(s[1804]);
initWPFRAS5(s[1805]);
initWPCONY5(s[1806]);
initWPADY5(s[1807]);
initWPMMIN5(s[1808]);
initWPMUC5(s[1809]);
initWPAUC5(s[1810]);
initWPPER5(s[1811]);
initWPFRUC5(s[1812]);
initWPANYC5(s[1813]);
initWPACAT5(s[1814]);
initWPECON5(s[1815]);
initWPECNA5(s[1816]);
initWPEPER5(s[1817]);
initWPEFS5(s[1818]);
initWPNRA5(s[1819]);
initWPBTHA5(s[1820]);
initWPBTHP5(s[1821]);
initWPERA5(s[1822]);
initWPYAER5(s[1823]);
initWPDSP5(s[1824]);
initWPDES5C(s[1825]);
initWPFSAP5(s[1826]);
initWPFSP5C(s[1827]);
initWPPLP5(s[1828]);
initWPPLPH5(s[1829]);
initWPLUMP5(s[1830]);
initWPLU5L(s[1831]);
initWPLU5U(s[1832]);
initWPLU5E(s[1833]);
initWPLU5R(s[1834]);
initWPPTP5(s[1835]);
initWPPSAL5(s[1836]);
initWPASAL5(s[1837]);
initWPASA5L(s[1838]);
initWPASA5U(s[1839]);
initWPASA5E(s[1840]);
initWPASA5R(s[1841]);
initWPFSAV5(s[1842]);
initWPPFVA5(s[1843]);
initWPPFV5L(s[1844]);
initWPPFV5U(s[1845]);
initWPPFV5E(s[1846]);
initWPPFV5R(s[1847]);
initWPAPF5(s[1848]);
initWPAPF5L(s[1849]);
initWPAPF5U(s[1850]);
initWPAPF5E(s[1851]);
initWPAPF5R(s[1852]);
initWPPTOP5(s[1853]);
initWPPENB5(s[1854]);
initWPPE5TL(s[1855]);
initWPPE5TU(s[1856]);
initWPPE5TR(s[1857]);
initWPPE5TE(s[1858]);
initWPPE5AL(s[1859]);
initWPPE5AU(s[1860]);
initWPPE5AR(s[1861]);
initWPPE5AE(s[1862]);
initWPCONS5(s[1863]);
initWPNUM25(s[1864]);
initASKQS6(s[1865]);
initASKDCB6(s[1866]);
initASKRUL6(s[1867]);
initWPCOS6(s[1868]);
initWPYBS6(s[1869]);
initWPERC6(s[1870]);
initWPMC6(s[1871]);
initWPMCA6(s[1872]);
initWPPERC6(s[1873]);
initWPMFRC6(s[1874]);
initWPYCAT6(s[1875]);
initWPYCA6(s[1876]);
initWPMCAF6(s[1877]);
initWPYFRA6(s[1878]);
initWPACON6(s[1879]);
initWPACOA6(s[1880]);
initWPACOB6(s[1881]);
initWPACOC6(s[1882]);
initWPFRAS6(s[1883]);
initWPCONY6(s[1884]);
initWPADY6(s[1885]);
initWPMMIN6(s[1886]);
initWPMUC6(s[1887]);
initWPAUC6(s[1888]);
initWPPER6(s[1889]);
initWPFRUC6(s[1890]);
initWPANYC6(s[1891]);
initWPACAT6(s[1892]);
initWPECON6(s[1893]);
initWPECNA6(s[1894]);
initWPEPER6(s[1895]);
initWPEFS6(s[1896]);
initWPNRA6(s[1897]);
initWPBTHA6(s[1898]);
initWPBTHP6(s[1899]);
initWPERA6(s[1900]);
initWPYAER6(s[1901]);
initWPDSP6(s[1902]);
initWPFSAP6(s[1903]);
initWPPLP6(s[1904]);
initWPPLPH6(s[1905]);
initWPLUMP6(s[1906]);
initWPLU6L(s[1907]);
initWPLU6U(s[1908]);
initWPLU6E(s[1909]);
initWPLU6R(s[1910]);
initWPPTP6(s[1911]);
initWPPSAL6(s[1912]);
initWPASAL6(s[1913]);
initWPASA6L(s[1914]);
initWPASA6U(s[1915]);
initWPASA6E(s[1916]);
initWPASA6R(s[1917]);
initWPFSAV6(s[1918]);
initWPPFVA6(s[1919]);
initWPPFV6L(s[1920]);
initWPPFV6U(s[1921]);
initWPPFV6E(s[1922]);
initWPPFV6R(s[1923]);
initWPAPF6(s[1924]);
initWPAPF6L(s[1925]);
initWPAPF6U(s[1926]);
initWPAPF6E(s[1927]);
initWPAPF6R(s[1928]);
initWPPTOP6(s[1929]);
initWPPENB6(s[1930]);
initWPPE6TL(s[1931]);
initWPPE6TU(s[1932]);
initWPPE6TR(s[1933]);
initWPPE6TE(s[1934]);
initWPPE6AL(s[1935]);
initWPPE6AU(s[1936]);
initWPPE6AR(s[1937]);
initWPPE6AE(s[1938]);
initWPCONS6(s[1939]);
initWPNUM26(s[1940]);
initWPYPEN4(s[1941]);
initWPCB4(s[1942]);
initWPCB4L(s[1943]);
initWPCB4U(s[1944]);
initWPCB4E(s[1945]);
initWPCB4R(s[1946]);
initWPSRC4(s[1947]);
initWPMRC4(s[1948]);
initWPMRCP4(s[1949]);
initWPLRCY4(s[1950]);
initWPLRCM4(s[1951]);
initWPLAC4(s[1952]);
initWPCON4(s[1953]);
initWPLPE4(s[1954]);
initWPLPA4(s[1955]);
initWPLP4TL(s[1956]);
initWPLP4TU(s[1957]);
initWPLP4TE(s[1958]);
initWPLP4TR(s[1959]);
initWPLP4AL(s[1960]);
initWPLP4AU(s[1961]);
initWPLP4AE(s[1962]);
initWPLP4AR(s[1963]);
initWPNUM27(s[1964]);
initWPYPEN5(s[1965]);
initWPCB5(s[1966]);
initWPCB5L(s[1967]);
initWPCB5U(s[1968]);
initWPCB5E(s[1969]);
initWPCB5R(s[1970]);
initWPSRC5(s[1971]);
initWPMRC5(s[1972]);
initWPMRCP5(s[1973]);
initWPLRCY5(s[1974]);
initWPLRCM5(s[1975]);
initWPLAC5(s[1976]);
initWPCON5(s[1977]);
initWPLPE5(s[1978]);
initWPLPA5(s[1979]);
initWPLP5TL(s[1980]);
initWPLP5TU(s[1981]);
initWPLP5TE(s[1982]);
initWPLP5TR(s[1983]);
initWPLP5AL(s[1984]);
initWPLP5AU(s[1985]);
initWPLP5AE(s[1986]);
initWPLP5AR(s[1987]);
initWPNUM28(s[1988]);
initASKCEM4(s[1989]);
initWPPLON4(s[1990]);
initWPPCON4(s[1991]);
initWPHCON4(s[1992]);
initWPCAMT4(s[1993]);
initWPCPER4(s[1994]);
initWPNIFP4(s[1995]);
initWPLCOY4(s[1996]);
initWPLCOM4(s[1997]);
initWPMCON4(s[1998]);
initWPAC4(s[1999]);
}
public void init_2000_2999(String line) {
initWPFSC4(s[2000]);
initWPNIRR4(s[2001]);
initWPLASY4(s[2002]);
initWPLASM4(s[2003]);
initWPMLAS4(s[2004]);
initWPLASP4(s[2005]);
initWPRCON4(s[2006]);
initWPRSC19(s[2007]);
initWPRSC20(s[2008]);
initWPRSM37(s[2009]);
initWPRSM38(s[2010]);
initWPCEMP4(s[2011]);
initWPECPP4(s[2012]);
initWPAECP4(s[2013]);
initWPFSEC4(s[2014]);
initWPMEC4(s[2015]);
initWPAMEC4(s[2016]);
initWPFSCP4(s[2017]);
initWPFSCO4(s[2018]);
initWPCUV4(s[2019]);
initWPCUV4L(s[2020]);
initWPCUV4U(s[2021]);
initWPCUV4E(s[2022]);
initWPCUV4R(s[2023]);
initWPPEXP4(s[2024]);
initWPAMOU4(s[2025]);
initWPAM4TL(s[2026]);
initWPAM4TU(s[2027]);
initWPAM4TE(s[2028]);
initWPAM4TR(s[2029]);
initWPAM4AL(s[2030]);
initWPAM4AU(s[2031]);
initWPAM4AE(s[2032]);
initWPAM4AR(s[2033]);
initWPNUM29(s[2034]);
initASKCEM5(s[2035]);
initWPPLON5(s[2036]);
initWPPCON5(s[2037]);
initWPHCON5(s[2038]);
initWPCAMT5(s[2039]);
initWPCPER5(s[2040]);
initWPNIFP5(s[2041]);
initWPLCOY5(s[2042]);
initWPLCOM5(s[2043]);
initWPMCON5(s[2044]);
initWPAC5(s[2045]);
initWPFSC5(s[2046]);
initWPNIRR5(s[2047]);
initWPLASY5(s[2048]);
initWPLASM5(s[2049]);
initWPMLAS5(s[2050]);
initWPLASP5(s[2051]);
initWPRCON5(s[2052]);
initWPRSC25(s[2053]);
initWPRSM49(s[2054]);
initWPRSM50(s[2055]);
initWPRSM51(s[2056]);
initWPCEMP5(s[2057]);
initWPECPP5(s[2058]);
initWPAECP5(s[2059]);
initWPFSEC5(s[2060]);
initWPMEC5(s[2061]);
initWPAMEC5(s[2062]);
initWPFSCP5(s[2063]);
initWPFSCO5(s[2064]);
initWPCUV5(s[2065]);
initWPCUV5L(s[2066]);
initWPCUV5U(s[2067]);
initWPCUV5E(s[2068]);
initWPCUV5R(s[2069]);
initWPPEXP5(s[2070]);
initWPAMOU5(s[2071]);
initWPAM5TL(s[2072]);
initWPAM5TU(s[2073]);
initWPAM5TE(s[2074]);
initWPAM5TR(s[2075]);
initWPAM5AL(s[2076]);
initWPAM5AU(s[2077]);
initWPAM5AE(s[2078]);
initWPAM5AR(s[2079]);
initWPNUM30(s[2080]);
initWPIFS37(s[2081]);
initWPIFS38(s[2082]);
initWPIFS39(s[2083]);
initWPFINF5(s[2084]);
initWPNUM31(s[2085]);
initWPIFS46(s[2086]);
initWPIFS47(s[2087]);
initWPFINF6(s[2088]);
initASKINF2(s[2089]);
initWPRECS1(s[2090]);
initWPRECS2(s[2091]);
initWPRECS3(s[2092]);
initWPPWP(s[2093]);
initWPPWR(s[2094]);
initWPWWWL(s[2095]);
initWPWWWU(s[2096]);
initWPWWWE(s[2097]);
initWPWWWR(s[2098]);
initWPWWFL(s[2099]);
initWPWWFU(s[2100]);
initWPWWFE(s[2101]);
initWPWWFR(s[2102]);
initWPWWML(s[2103]);
initWPWWMU(s[2104]);
initWPWWME(s[2105]);
initWPWWMR(s[2106]);
initWPWWYL(s[2107]);
initWPWWYU(s[2108]);
initWPWWYE(s[2109]);
initWPWWYR(s[2110]);
initWPWWOL(s[2111]);
initWPWWOU(s[2112]);
initWPWWOE(s[2113]);
initWPWWOR(s[2114]);
initWPWTX(s[2115]);
initWPPWP2(s[2116]);
initWPPWR2(s[2117]);
initWPWW2WL(s[2118]);
initWPWW2WU(s[2119]);
initWPWW2WE(s[2120]);
initWPWW2WR(s[2121]);
initWPWW2FL(s[2122]);
initWPWW2FU(s[2123]);
initWPWW2FE(s[2124]);
initWPWW2FR(s[2125]);
initWPWW2ML(s[2126]);
initWPWW2MU(s[2127]);
initWPWW2ME(s[2128]);
initWPWW2MR(s[2129]);
initWPWW2YL(s[2130]);
initWPWW2YU(s[2131]);
initWPWW2YE(s[2132]);
initWPWW2YR(s[2133]);
initWPWW2OL(s[2134]);
initWPWW2OU(s[2135]);
initWPWW2OE(s[2136]);
initWPWW2OR(s[2137]);
initWPWTX2(s[2138]);
initWPPWP3(s[2139]);
initWPPWR3(s[2140]);
initWPWW3WL(s[2141]);
initWPWW3WU(s[2142]);
initWPWW3WE(s[2143]);
initWPWW3WR(s[2144]);
initWPWW3FL(s[2145]);
initWPWW3FU(s[2146]);
initWPWW3FE(s[2147]);
initWPWW3FR(s[2148]);
initWPWW3ML(s[2149]);
initWPWW3MU(s[2150]);
initWPWW3ME(s[2151]);
initWPWW3MR(s[2152]);
initWPWW3YL(s[2153]);
initWPWW3YU(s[2154]);
initWPWW3YE(s[2155]);
initWPWW3YR(s[2156]);
initWPWW3OL(s[2157]);
initWPWW3OU(s[2158]);
initWPWW3OE(s[2159]);
initWPWW3OR(s[2160]);
initWPWTX3(s[2161]);
initWPRECN1(s[2162]);
initWPRECN2(s[2163]);
initWPRECN3(s[2164]);
initWPDSND1(s[2165]);
initWPDSND2(s[2166]);
initWPDSND3(s[2167]);
initWPERCD1(s[2168]);
initWPERCD2(s[2169]);
initWPERCD3(s[2170]);
initWPINF4(s[2171]);
initWPPAY4(s[2172]);
initWPPYR4(s[2173]);
initWPY4WL(s[2174]);
initWPY4WU(s[2175]);
initWPY4WE(s[2176]);
initWPY4WR(s[2177]);
initWPY4FL(s[2178]);
initWPY4FU(s[2179]);
initWPY4FE(s[2180]);
initWPY4FR(s[2181]);
initWPY4ML(s[2182]);
initWPY4MU(s[2183]);
initWPY4ME(s[2184]);
initWPY4MR(s[2185]);
initWPY4YL(s[2186]);
initWPY4YU(s[2187]);
initWPY4YE(s[2188]);
initWPY4YR(s[2189]);
initWPY4OL(s[2190]);
initWPY4OU(s[2191]);
initWPY4OE(s[2192]);
initWPY4OR(s[2193]);
initWPTAX4(s[2194]);
initWPINF5(s[2195]);
initWPPAY5(s[2196]);
initWPPYR5(s[2197]);
initWPY5WL(s[2198]);
initWPY5WU(s[2199]);
initWPY5WE(s[2200]);
initWPY5WR(s[2201]);
initWPY5FL(s[2202]);
initWPY5FU(s[2203]);
initWPY5FE(s[2204]);
initWPY5FR(s[2205]);
initWPY5ML(s[2206]);
initWPY5MU(s[2207]);
initWPY5ME(s[2208]);
initWPY5MR(s[2209]);
initWPY5YL(s[2210]);
initWPY5YU(s[2211]);
initWPY5YE(s[2212]);
initWPY5YR(s[2213]);
initWPY5OL(s[2214]);
initWPY5OU(s[2215]);
initWPY5OE(s[2216]);
initWPY5OR(s[2217]);
initWPTAX5(s[2218]);
initWPINF6(s[2219]);
initWPPAY6(s[2220]);
initWPPYR6(s[2221]);
initWPY6WL(s[2222]);
initWPY6WU(s[2223]);
initWPY6WE(s[2224]);
initWPY6WR(s[2225]);
initWPY6FL(s[2226]);
initWPY6FU(s[2227]);
initWPY6FE(s[2228]);
initWPY6FR(s[2229]);
initWPY6ML(s[2230]);
initWPY6MU(s[2231]);
initWPY6ME(s[2232]);
initWPY6MR(s[2233]);
initWPY6YL(s[2234]);
initWPY6YU(s[2235]);
initWPY6YE(s[2236]);
initWPY6YR(s[2237]);
initWPY6OL(s[2238]);
initWPY6OU(s[2239]);
initWPY6OE(s[2240]);
initWPY6OR(s[2241]);
initWPTAX6(s[2242]);
initWPLMS(s[2243]);
initWPLMA(s[2244]);
initWPLMPAL(s[2245]);
initWPLMPAU(s[2246]);
initWPLMPAE(s[2247]);
initWPLMPAR(s[2248]);
initWPTKP(s[2249]);
initWPIND(s[2250]);
initWPIDRL(s[2251]);
initWPIDRU(s[2252]);
initWPIDRE(s[2253]);
initWPIDRR(s[2254]);
initWPLMS2(s[2255]);
initWPLMA2(s[2256]);
initWPLMP2L(s[2257]);
initWPLMP2U(s[2258]);
initWPLMP2E(s[2259]);
initWPLMP2R(s[2260]);
initWPTKP2(s[2261]);
initWPIND2(s[2262]);
initWPIDR2L(s[2263]);
initWPIDR2U(s[2264]);
initWPIDR2E(s[2265]);
initWPIDR2R(s[2266]);
initWPLMS3(s[2267]);
initWPLMA3(s[2268]);
initWPLMP3L(s[2269]);
initWPLMP3U(s[2270]);
initWPLMP3E(s[2271]);
initWPLMP3R(s[2272]);
initWPTKP3(s[2273]);
initWPIND3(s[2274]);
initWPIDR3L(s[2275]);
initWPIDR3U(s[2276]);
initWPIDR3E(s[2277]);
initWPIDR3R(s[2278]);
initWPRGHX(s[2279]);
initWPRGHX2(s[2280]);
initWPRGHX3(s[2281]);
initWPWPS(s[2282]);
initWPPWP4(s[2283]);
initWPPWR4(s[2284]);
initWPWW4WL(s[2285]);
initWPWW4WU(s[2286]);
initWPWW4WE(s[2287]);
initWPWW4WR(s[2288]);
initWPWW4FL(s[2289]);
initWPWW4FU(s[2290]);
initWPWW4FE(s[2291]);
initWPWW4FR(s[2292]);
initWPWW4ML(s[2293]);
initWPWW4MU(s[2294]);
initWPWW4ME(s[2295]);
initWPWW4MR(s[2296]);
initWPWW4YL(s[2297]);
initWPWW4YU(s[2298]);
initWPWW4YE(s[2299]);
initWPWW4YR(s[2300]);
initWPWW4OL(s[2301]);
initWPWW4OU(s[2302]);
initWPWW4OE(s[2303]);
initWPWW4OR(s[2304]);
initWPWTX4(s[2305]);
initWPPWP5(s[2306]);
initWPPWR5(s[2307]);
initWPWW5WL(s[2308]);
initWPWW5WU(s[2309]);
initWPWW5WE(s[2310]);
initWPWW5WR(s[2311]);
initWPWW5FL(s[2312]);
initWPWW5FU(s[2313]);
initWPWW5FE(s[2314]);
initWPWW5FR(s[2315]);
initWPWW5ML(s[2316]);
initWPWW5MU(s[2317]);
initWPWW5ME(s[2318]);
initWPWW5MR(s[2319]);
initWPWW5YL(s[2320]);
initWPWW5YU(s[2321]);
initWPWW5YE(s[2322]);
initWPWW5YR(s[2323]);
initWPWW5OL(s[2324]);
initWPWW5OU(s[2325]);
initWPWW5OE(s[2326]);
initWPWW5OR(s[2327]);
initWPWTX5(s[2328]);
initWPPWP6(s[2329]);
initWPPWR6(s[2330]);
initWPWW6WL(s[2331]);
initWPWW6WU(s[2332]);
initWPWW6WE(s[2333]);
initWPWW6WR(s[2334]);
initWPWW6FL(s[2335]);
initWPWW6FU(s[2336]);
initWPWW6FE(s[2337]);
initWPWW6FR(s[2338]);
initWPWW6ML(s[2339]);
initWPWW6MU(s[2340]);
initWPWW6ME(s[2341]);
initWPWW6MR(s[2342]);
initWPWW6YL(s[2343]);
initWPWW6YU(s[2344]);
initWPWW6YE(s[2345]);
initWPWW6YR(s[2346]);
initWPWW6OL(s[2347]);
initWPWW6OU(s[2348]);
initWPWW6OE(s[2349]);
initWPWW6OR(s[2350]);
initWPWTX6(s[2351]);
initWPRGHX4(s[2352]);
initWPAWP(s[2353]);
initWPWPN(s[2354]);
initWPPWP14(s[2355]);
initWPPWR14(s[2356]);
initWPW14WL(s[2357]);
initWPW14WU(s[2358]);
initWPW14WE(s[2359]);
initWPW14WR(s[2360]);
initWPW14FL(s[2361]);
initWPW14FU(s[2362]);
initWPW14FE(s[2363]);
initWPW14FR(s[2364]);
initWPW14ML(s[2365]);
initWPW14MU(s[2366]);
initWPW14ME(s[2367]);
initWPW14MR(s[2368]);
initWPW14YL(s[2369]);
initWPW14YU(s[2370]);
initWPW14YE(s[2371]);
initWPW14YR(s[2372]);
initWPW14OL(s[2373]);
initWPW14OU(s[2374]);
initWPW14OE(s[2375]);
initWPW14OR(s[2376]);
initWPWTX14(s[2377]);
initWPPWP15(s[2378]);
initWPPWR15(s[2379]);
initWPW15WL(s[2380]);
initWPW15WU(s[2381]);
initWPW15WE(s[2382]);
initWPW15WR(s[2383]);
initWPW15FL(s[2384]);
initWPW15FU(s[2385]);
initWPW15FE(s[2386]);
initWPW15FR(s[2387]);
initWPW15ML(s[2388]);
initWPW15MU(s[2389]);
initWPW15ME(s[2390]);
initWPW15MR(s[2391]);
initWPW15YL(s[2392]);
initWPW15YU(s[2393]);
initWPW15YE(s[2394]);
initWPW15YR(s[2395]);
initWPW15OL(s[2396]);
initWPW15OU(s[2397]);
initWPW15OE(s[2398]);
initWPW15OR(s[2399]);
initWPWTX15(s[2400]);
initWPPWP16(s[2401]);
initWPPWR16(s[2402]);
initWPW16WL(s[2403]);
initWPW16WU(s[2404]);
initWPW16WE(s[2405]);
initWPW16WR(s[2406]);
initWPW16FL(s[2407]);
initWPW16FU(s[2408]);
initWPW16FE(s[2409]);
initWPW16FR(s[2410]);
initWPW16ML(s[2411]);
initWPW16MU(s[2412]);
initWPW16ME(s[2413]);
initWPW16MR(s[2414]);
initWPW16YL(s[2415]);
initWPW16YU(s[2416]);
initWPW16YE(s[2417]);
initWPW16YR(s[2418]);
initWPW16OL(s[2419]);
initWPW16OU(s[2420]);
initWPW16OE(s[2421]);
initWPW16OR(s[2422]);
initWPWTX16(s[2423]);
initWPEXR(s[2424]);
initWPRGHX5(s[2425]);
initWPEXN(s[2426]);
initWPINF7(s[2427]);
initWPPAY7(s[2428]);
initWPPYR7(s[2429]);
initWPY7WL(s[2430]);
initWPY7WU(s[2431]);
initWPY7WE(s[2432]);
initWPY7WR(s[2433]);
initWPY7FL(s[2434]);
initWPY7FU(s[2435]);
initWPY7FE(s[2436]);
initWPY7FR(s[2437]);
initWPY7ML(s[2438]);
initWPY7MU(s[2439]);
initWPY7ME(s[2440]);
initWPY7MR(s[2441]);
initWPY7YL(s[2442]);
initWPY7YU(s[2443]);
initWPY7YE(s[2444]);
initWPY7YR(s[2445]);
initWPY7OL(s[2446]);
initWPY7OU(s[2447]);
initWPY7OE(s[2448]);
initWPY7OR(s[2449]);
initWPTAX7(s[2450]);
initWPINF8(s[2451]);
initWPPAY8(s[2452]);
initWPPYR8(s[2453]);
initWPY8WL(s[2454]);
initWPY8WU(s[2455]);
initWPY8WE(s[2456]);
initWPY8WR(s[2457]);
initWPY8FL(s[2458]);
initWPY8FU(s[2459]);
initWPY8FE(s[2460]);
initWPY8FR(s[2461]);
initWPY8ML(s[2462]);
initWPY8MU(s[2463]);
initWPY8ME(s[2464]);
initWPY8MR(s[2465]);
initWPY8YL(s[2466]);
initWPY8YU(s[2467]);
initWPY8YE(s[2468]);
initWPY8YR(s[2469]);
initWPY8OL(s[2470]);
initWPY8OU(s[2471]);
initWPY8OE(s[2472]);
initWPY8OR(s[2473]);
initWPTAX8(s[2474]);
initWPLMS4(s[2475]);
initWPLMA4(s[2476]);
initWPLMP4L(s[2477]);
initWPLMP4U(s[2478]);
initWPLMP4E(s[2479]);
initWPLMP4R(s[2480]);
initWPTKP4(s[2481]);
initWPIND4(s[2482]);
initWPINC4L(s[2483]);
initWPINC4U(s[2484]);
initWPINC4E(s[2485]);
initWPINC4R(s[2486]);
initWPLMS5(s[2487]);
initWPLMA5(s[2488]);
initWPLMP5L(s[2489]);
initWPLMP5U(s[2490]);
initWPLMP5E(s[2491]);
initWPLMP5R(s[2492]);
initWPTKP5(s[2493]);
initWPIND5(s[2494]);
initWPINC5L(s[2495]);
initWPINC5U(s[2496]);
initWPINC5E(s[2497]);
initWPINC5R(s[2498]);
initWPPW(s[2499]);
initWPREN(s[2500]);
initWPEXW(s[2501]);
initWPPWP24(s[2502]);
initWPPWR24(s[2503]);
initWPW24WL(s[2504]);
initWPW24WU(s[2505]);
initWPW24WE(s[2506]);
initWPW24WR(s[2507]);
initWPW24FL(s[2508]);
initWPW24FU(s[2509]);
initWPW24FE(s[2510]);
initWPW24FR(s[2511]);
initWPW24ML(s[2512]);
initWPW24MU(s[2513]);
initWPW24ME(s[2514]);
initWPW24MR(s[2515]);
initWPW24YL(s[2516]);
initWPW24YU(s[2517]);
initWPW24YE(s[2518]);
initWPW24YR(s[2519]);
initWPW24OL(s[2520]);
initWPW24OU(s[2521]);
initWPW24OE(s[2522]);
initWPW24OR(s[2523]);
initWPWTX24(s[2524]);
initWPPWP25(s[2525]);
initWPPWR25(s[2526]);
initWPW25WL(s[2527]);
initWPW25WU(s[2528]);
initWPW25WE(s[2529]);
initWPW25WR(s[2530]);
initWPW25FL(s[2531]);
initWPW25FU(s[2532]);
initWPW25FE(s[2533]);
initWPW25FR(s[2534]);
initWPW25ML(s[2535]);
initWPW25MU(s[2536]);
initWPW25ME(s[2537]);
initWPW25MR(s[2538]);
initWPW25YL(s[2539]);
initWPW25YU(s[2540]);
initWPW25YE(s[2541]);
initWPW25YR(s[2542]);
initWPW25OL(s[2543]);
initWPW25OU(s[2544]);
initWPW25OE(s[2545]);
initWPW25OR(s[2546]);
initWPWTX25(s[2547]);
initWPPWP26(s[2548]);
initWPPWR26(s[2549]);
initWPW26WL(s[2550]);
initWPW26WU(s[2551]);
initWPW26WE(s[2552]);
initWPW26WR(s[2553]);
initWPW26FL(s[2554]);
initWPW26FU(s[2555]);
initWPW26FE(s[2556]);
initWPW26FR(s[2557]);
initWPW26ML(s[2558]);
initWPW26MU(s[2559]);
initWPW26ME(s[2560]);
initWPW26MR(s[2561]);
initWPW26YL(s[2562]);
initWPW26YU(s[2563]);
initWPW26YE(s[2564]);
initWPW26YR(s[2565]);
initWPW26OL(s[2566]);
initWPW26OU(s[2567]);
initWPW26OE(s[2568]);
initWPW26OR(s[2569]);
initWPWTX26(s[2570]);
initWPPRPE(s[2571]);
initWPPEPR(s[2572]);
initWPNOSC(s[2573]);
initWPREC(s[2574]);
initWPMSC(s[2575]);
initWPDS(s[2576]);
initWPDE(s[2577]);
initWPRGH(s[2578]);
initWPREC2(s[2579]);
initWPMSC2(s[2580]);
initWPDS2(s[2581]);
initWPDE2(s[2582]);
initWPRGH2(s[2583]);
initWPREC3(s[2584]);
initWPMSC3(s[2585]);
initWPDS3(s[2586]);
initWPDE3(s[2587]);
initWPRGH3(s[2588]);
initWPINF17(s[2589]);
initWPPAY17(s[2590]);
initWPPYR17(s[2591]);
initWPY17WL(s[2592]);
initWPY17WU(s[2593]);
initWPY17WE(s[2594]);
initWPY17WR(s[2595]);
initWPY17FL(s[2596]);
initWPY17FU(s[2597]);
initWPY17FE(s[2598]);
initWPY17FR(s[2599]);
initWPY17ML(s[2600]);
initWPY17MU(s[2601]);
initWPY17ME(s[2602]);
initWPY17MR(s[2603]);
initWPY17YL(s[2604]);
initWPY17YU(s[2605]);
initWPY17YE(s[2606]);
initWPY17YR(s[2607]);
initWPY17OL(s[2608]);
initWPY17OU(s[2609]);
initWPY17OE(s[2610]);
initWPY17OR(s[2611]);
initWPTAX17(s[2612]);
initWPINF18(s[2613]);
initWPPAY18(s[2614]);
initWPPYR18(s[2615]);
initWPY18WL(s[2616]);
initWPY18WU(s[2617]);
initWPY18WE(s[2618]);
initWPY18WR(s[2619]);
initWPY18FL(s[2620]);
initWPY18FU(s[2621]);
initWPY18FE(s[2622]);
initWPY18FR(s[2623]);
initWPY18ML(s[2624]);
initWPY18MU(s[2625]);
initWPY18ME(s[2626]);
initWPY18MR(s[2627]);
initWPY18YL(s[2628]);
initWPY18YU(s[2629]);
initWPY18YE(s[2630]);
initWPY18YR(s[2631]);
initWPY18OL(s[2632]);
initWPY18OU(s[2633]);
initWPY18OE(s[2634]);
initWPY18OR(s[2635]);
initWPTAX18(s[2636]);
initWPINF19(s[2637]);
initWPPAY19(s[2638]);
initWPPYR19(s[2639]);
initWPY19WL(s[2640]);
initWPY19WU(s[2641]);
initWPY19WE(s[2642]);
initWPY19WR(s[2643]);
initWPY19FL(s[2644]);
initWPY19FU(s[2645]);
initWPY19FE(s[2646]);
initWPY19FR(s[2647]);
initWPY19ML(s[2648]);
initWPY19MU(s[2649]);
initWPY19ME(s[2650]);
initWPY19MR(s[2651]);
initWPY19YL(s[2652]);
initWPY19YU(s[2653]);
initWPY19YE(s[2654]);
initWPY19YR(s[2655]);
initWPY19OL(s[2656]);
initWPY19OU(s[2657]);
initWPY19OE(s[2658]);
initWPY19OR(s[2659]);
initWPTAX19(s[2660]);
initWPLMS14(s[2661]);
initWPLMA14(s[2662]);
initWPLM14L(s[2663]);
initWPLM14U(s[2664]);
initWPLM14E(s[2665]);
initWPLM14R(s[2666]);
initWPTKP14(s[2667]);
initWPIND14(s[2668]);
initWPIN14L(s[2669]);
initWPIN14U(s[2670]);
initWPIN14E(s[2671]);
initWPIN14R(s[2672]);
initWPLMS15(s[2673]);
initWPLMA15(s[2674]);
initWPLM15L(s[2675]);
initWPLM15U(s[2676]);
initWPLM15E(s[2677]);
initWPLM15R(s[2678]);
initWPTKP15(s[2679]);
initWPIND15(s[2680]);
initWPIN15L(s[2681]);
initWPIN15U(s[2682]);
initWPIN15E(s[2683]);
initWPIN15R(s[2684]);
initWPLMS16(s[2685]);
initWPLMA16(s[2686]);
initWPLM16L(s[2687]);
initWPLM16U(s[2688]);
initWPLM16E(s[2689]);
initWPLM16R(s[2690]);
initWPTKP16(s[2691]);
initWPIND16(s[2692]);
initWPIN16L(s[2693]);
initWPIN16U(s[2694]);
initWPIN16E(s[2695]);
initWPIN16R(s[2696]);
initWPINFO(s[2697]);
initWPMCRTP(s[2698]);
initWPPRIVP(s[2699]);
initWPPRIVA(s[2700]);
initWPMANPP(s[2701]);
initWPMPAH(s[2702]);
initWPMPAL(s[2703]);
initWPQN(s[2704]);
initWP1Q(s[2705]);
initWP2Q(s[2706]);
initWP3Q(s[2707]);
initWPMFQ(s[2708]);
initWPMSQ(s[2709]);
initWPMTQ(s[2710]);
initWPMCRTS(s[2711]);
initWPSTATP(s[2712]);
initWPSTATA(s[2713]);
initWPMANSP(s[2714]);
initWPMSAH(s[2715]);
initWPMSAL(s[2716]);
initWPSN(s[2717]);
initWP1SQ(s[2718]);
initWP2SQ(s[2719]);
initWP3SQ(s[2720]);
initWPMSFQ(s[2721]);
initWPMSSQ(s[2722]);
initWPMSTQ(s[2723]);
initWPPDOC(s[2724]);
initWPINTA(s[2725]);
initWPRAGE(s[2726]);
initWPERET2(s[2727]);
initWPERP(s[2728]);
initWPREA01(s[2729]);
initWPREA02(s[2730]);
initWPREA03(s[2731]);
initWPREA04(s[2732]);
initWPREA05(s[2733]);
initWPREA06(s[2734]);
initWPREA07(s[2735]);
initWPREAM1(s[2736]);
initWPREAM2(s[2737]);
initWPREAM3(s[2738]);
initWPREAM4(s[2739]);
initWPREAM5(s[2740]);
initWPREAM6(s[2741]);
initWPMREA(s[2742]);
initWPRRE01(s[2743]);
initWPRRE02(s[2744]);
initWPRRE03(s[2745]);
initWPRRE04(s[2746]);
initWPRRE05(s[2747]);
initWPRREM1(s[2748]);
initWPRREM2(s[2749]);
initWPRREM3(s[2750]);
initWPRREM4(s[2751]);
initWPRREM5(s[2752]);
initWPMRRE(s[2753]);
initWPWKR(s[2754]);
initWPPHI(s[2755]);
initWPHOWU(s[2756]);
initWPHLWZ(s[2757]);
initWPHOWE(s[2758]);
initWPMHI(s[2759]);
initWPMHIL(s[2760]);
initWPMHIU(s[2761]);
initWPMHIE(s[2762]);
initWPMHIR(s[2763]);
initWPDES2C(s[2764]);
initIAPID(s[2765]);
initIAW1R(s[2766]);
initIAFFNUM(s[2767]);
initIAASK(s[2768]);
initIAWORK(s[2769]);
initIASINC(s[2770]);
initIASINCL(s[2771]);
initIASINCU(s[2772]);
initIASINCE(s[2773]);
initIASINCR(s[2774]);
initIASPEN(s[2775]);
initIASPW(s[2776]);
initIASPA(s[2777]);
initIAPAM(s[2778]);
initIAPAMWL(s[2779]);
initIAPAMWU(s[2780]);
initIAPAMWE(s[2781]);
initIAPAMWR(s[2782]);
initIAPAMFL(s[2783]);
initIAPAMFU(s[2784]);
initIAPAMFE(s[2785]);
initIAPAMFR(s[2786]);
initIAPAMML(s[2787]);
initIAPAMMU(s[2788]);
initIAPAMME(s[2789]);
initIAPAMMR(s[2790]);
initIAPAMYL(s[2791]);
initIAPAMYU(s[2792]);
initIAPAMYE(s[2793]);
initIAPAMYR(s[2794]);
initIAPAMOL(s[2795]);
initIAPAMOU(s[2796]);
initIAPAMOE(s[2797]);
initIAPAMOR(s[2798]);
initIAPLY(s[2799]);
initIAPLYW(s[2800]);
initIASPP(s[2801]);
initIAPPAM(s[2802]);
initIAPPAWL(s[2803]);
initIAPPAWU(s[2804]);
initIAPPAWE(s[2805]);
initIAPPAWR(s[2806]);
initIAPPAFL(s[2807]);
initIAPPAFU(s[2808]);
initIAPPAFE(s[2809]);
initIAPPAFR(s[2810]);
initIAPPAML(s[2811]);
initIAPPAMU(s[2812]);
initIAPPAME(s[2813]);
initIAPPAMR(s[2814]);
initIAPPAYL(s[2815]);
initIAPPAYU(s[2816]);
initIAPPAYE(s[2817]);
initIAPPAYR(s[2818]);
initIAPPAOL(s[2819]);
initIAPPAOU(s[2820]);
initIAPPAOE(s[2821]);
initIAPPAOR(s[2822]);
initIAPLYP(s[2823]);
initIAPLW(s[2824]);
initIAPPEN(s[2825]);
initIAPPEI(s[2826]);
initIAPPEIL(s[2827]);
initIAPPEIU(s[2828]);
initIAPPEIE(s[2829]);
initIAPPEIR(s[2830]);
initIAANIN(s[2831]);
initIAAILY(s[2832]);
initIAAIM(s[2833]);
initIAAIML(s[2834]);
initIAAIMU(s[2835]);
initIAAIME(s[2836]);
initIAAIMR(s[2837]);
initIAAIP(s[2838]);
initIAAIPL(s[2839]);
initIAAIPU(s[2840]);
initIAAIPE(s[2841]);
initIAAIPR(s[2842]);
initIAHDB(s[2843]);
initIAHDR1(s[2844]);
initIAHDR2(s[2845]);
initIAHDR3(s[2846]);
initIAHDR4(s[2847]);
initIAHDR5(s[2848]);
initIAHDRM1(s[2849]);
initIAHDRM2(s[2850]);
initIAHDRM3(s[2851]);
initIAHDRM4(s[2852]);
initIAHDRM5(s[2853]);
initIAHDN1(s[2854]);
initIAHDN2(s[2855]);
initIAHDN3(s[2856]);
initIAHDN4(s[2857]);
initIAHDN5(s[2858]);
initIAT(s[2859]);
initIAP(s[2860]);
initIAA(s[2861]);
initIAA1WL(s[2862]);
initIAA1WU(s[2863]);
initIAA1WE(s[2864]);
initIAA1WR(s[2865]);
initIAA1FL(s[2866]);
initIAA1FU(s[2867]);
initIAA1FE(s[2868]);
initIAA1FR(s[2869]);
initIAA1ML(s[2870]);
initIAA1MU(s[2871]);
initIAA1ME(s[2872]);
initIAA1MR(s[2873]);
initIAA1YL(s[2874]);
initIAA1YU(s[2875]);
initIAA1YE(s[2876]);
initIAA1YR(s[2877]);
initIAA1OL(s[2878]);
initIAA1OU(s[2879]);
initIAA1OE(s[2880]);
initIAA1OR(s[2881]);
initIALY(s[2882]);
initIALM(s[2883]);
initIAT2(s[2884]);
initIAP2(s[2885]);
initIAA2(s[2886]);
initIAA2WL(s[2887]);
initIAA2WU(s[2888]);
initIAA2WE(s[2889]);
initIAA2WR(s[2890]);
initIAA2FL(s[2891]);
initIAA2FU(s[2892]);
initIAA2FE(s[2893]);
initIAA2FR(s[2894]);
initIAA2ML(s[2895]);
initIAA2MU(s[2896]);
initIAA2ME(s[2897]);
initIAA2MR(s[2898]);
initIAA2YL(s[2899]);
initIAA2YU(s[2900]);
initIAA2YE(s[2901]);
initIAA2YR(s[2902]);
initIAA2OL(s[2903]);
initIAA2OU(s[2904]);
initIAA2OE(s[2905]);
initIAA2OR(s[2906]);
initIALY2(s[2907]);
initIALM2(s[2908]);
initIAT3(s[2909]);
initIAP3(s[2910]);
initIAA3(s[2911]);
initIAA3WL(s[2912]);
initIAA3WU(s[2913]);
initIAA3WE(s[2914]);
initIAA3WR(s[2915]);
initIAA3FL(s[2916]);
initIAA3FU(s[2917]);
initIAA3FE(s[2918]);
initIAA3FR(s[2919]);
initIAA3ML(s[2920]);
initIAA3MU(s[2921]);
initIAA3ME(s[2922]);
initIAA3MR(s[2923]);
initIAA3YL(s[2924]);
initIAA3YU(s[2925]);
initIAA3YE(s[2926]);
initIAA3YR(s[2927]);
initIAA3OL(s[2928]);
initIAA3OU(s[2929]);
initIAA3OE(s[2930]);
initIAA3OR(s[2931]);
initIALY3(s[2932]);
initIALM3(s[2933]);
initIAT4(s[2934]);
initIAP4(s[2935]);
initIAA4(s[2936]);
initIAA4WL(s[2937]);
initIAA4WU(s[2938]);
initIAA4WE(s[2939]);
initIAA4WR(s[2940]);
initIAA4FL(s[2941]);
initIAA4FU(s[2942]);
initIAA4FE(s[2943]);
initIAA4FR(s[2944]);
initIAA4ML(s[2945]);
initIAA4MU(s[2946]);
initIAA4ME(s[2947]);
initIAA4MR(s[2948]);
initIAA4YL(s[2949]);
initIAA4YU(s[2950]);
initIAA4YE(s[2951]);
initIAA4YR(s[2952]);
initIAA4OL(s[2953]);
initIAA4OU(s[2954]);
initIAA4OE(s[2955]);
initIAA4OR(s[2956]);
initIALY4(s[2957]);
initIALM4(s[2958]);
initIAT5(s[2959]);
initIAP5(s[2960]);
initIAA5(s[2961]);
initIAA5WL(s[2962]);
initIAA5WU(s[2963]);
initIAA5WE(s[2964]);
initIAA5WR(s[2965]);
initIAA5FL(s[2966]);
initIAA5FU(s[2967]);
initIAA5FE(s[2968]);
initIAA5FR(s[2969]);
initIAA5ML(s[2970]);
initIAA5MU(s[2971]);
initIAA5ME(s[2972]);
initIAA5MR(s[2973]);
initIAA5YL(s[2974]);
initIAA5YU(s[2975]);
initIAA5YE(s[2976]);
initIAA5YR(s[2977]);
initIAA5OL(s[2978]);
initIAA5OU(s[2979]);
initIAA5OE(s[2980]);
initIAA5OR(s[2981]);
initIALY5(s[2982]);
initIALM5(s[2983]);
initIAT6(s[2984]);
initIAP6(s[2985]);
initIAA6(s[2986]);
initIAA6WL(s[2987]);
initIAA6WU(s[2988]);
initIAA6WE(s[2989]);
initIAA6WR(s[2990]);
initIAA6FL(s[2991]);
initIAA6FU(s[2992]);
initIAA6FE(s[2993]);
initIAA6FR(s[2994]);
initIAA6ML(s[2995]);
initIAA6MU(s[2996]);
initIAA6ME(s[2997]);
initIAA6MR(s[2998]);
initIAA6YL(s[2999]);
}
public void init_3000_3999(String line) {
initIAA6YU(s[3000]);
initIAA6YE(s[3001]);
initIAA6YR(s[3002]);
initIAA6OL(s[3003]);
initIAA6OU(s[3004]);
initIAA6OE(s[3005]);
initIAA6OR(s[3006]);
initIALY6(s[3007]);
initIALM6(s[3008]);
initIAT7(s[3009]);
initIAP7(s[3010]);
initIAA7(s[3011]);
initIAA7WL(s[3012]);
initIAA7WU(s[3013]);
initIAA7WE(s[3014]);
initIAA7WR(s[3015]);
initIAA7FL(s[3016]);
initIAA7FU(s[3017]);
initIAA7FE(s[3018]);
initIAA7FR(s[3019]);
initIAA7ML(s[3020]);
initIAA7MU(s[3021]);
initIAA7ME(s[3022]);
initIAA7MR(s[3023]);
initIAA7YL(s[3024]);
initIAA7YU(s[3025]);
initIAA7YE(s[3026]);
initIAA7YR(s[3027]);
initIAA7OL(s[3028]);
initIAA7OU(s[3029]);
initIAA7OE(s[3030]);
initIAA7OR(s[3031]);
initIALY7(s[3032]);
initIALM7(s[3033]);
initIAT8(s[3034]);
initIAP8(s[3035]);
initIAA8(s[3036]);
initIAA8WL(s[3037]);
initIAA8WU(s[3038]);
initIAA8WE(s[3039]);
initIAA8WR(s[3040]);
initIAA8FL(s[3041]);
initIAA8FU(s[3042]);
initIAA8FE(s[3043]);
initIAA8FR(s[3044]);
initIAA8ML(s[3045]);
initIAA8MU(s[3046]);
initIAA8ME(s[3047]);
initIAA8MR(s[3048]);
initIAA8YL(s[3049]);
initIAA8YU(s[3050]);
initIAA8YE(s[3051]);
initIAA8YR(s[3052]);
initIAA8OL(s[3053]);
initIAA8OU(s[3054]);
initIAA8OE(s[3055]);
initIAA8OR(s[3056]);
initIALY8(s[3057]);
initIALM8(s[3058]);
initIAT9(s[3059]);
initIAP9(s[3060]);
initIAA9(s[3061]);
initIAA9WL(s[3062]);
initIAA9WU(s[3063]);
initIAA9WE(s[3064]);
initIAA9WR(s[3065]);
initIAA9FL(s[3066]);
initIAA9FU(s[3067]);
initIAA9FE(s[3068]);
initIAA9FR(s[3069]);
initIAA9ML(s[3070]);
initIAA9MU(s[3071]);
initIAA9ME(s[3072]);
initIAA9MR(s[3073]);
initIAA9YL(s[3074]);
initIAA9YU(s[3075]);
initIAA9YE(s[3076]);
initIAA9YR(s[3077]);
initIAA9OL(s[3078]);
initIAA9OU(s[3079]);
initIAA9OE(s[3080]);
initIAA9OR(s[3081]);
initIALY9(s[3082]);
initIALM9(s[3083]);
initIAT10(s[3084]);
initIAP10(s[3085]);
initIAA10(s[3086]);
initIAA10WL(s[3087]);
initIAA10WU(s[3088]);
initIAA10WE(s[3089]);
initIAA10WR(s[3090]);
initIAA10FL(s[3091]);
initIAA10FU(s[3092]);
initIAA10FE(s[3093]);
initIAA10FR(s[3094]);
initIAA10ML(s[3095]);
initIAA10MU(s[3096]);
initIAA10ME(s[3097]);
initIAA10MR(s[3098]);
initIAA10YL(s[3099]);
initIAA10YU(s[3100]);
initIAA10YE(s[3101]);
initIAA10YR(s[3102]);
initIAA10OL(s[3103]);
initIAA10OU(s[3104]);
initIAA10OE(s[3105]);
initIAA10OR(s[3106]);
initIAB10(s[3107]);
initIABW10(s[3108]);
initIABM10(s[3109]);
initIAT11(s[3110]);
initIAP11(s[3111]);
initIAA11(s[3112]);
initIAA11WL(s[3113]);
initIAA11WU(s[3114]);
initIAA11WE(s[3115]);
initIAA11WR(s[3116]);
initIAA11FL(s[3117]);
initIAA11FU(s[3118]);
initIAA11FE(s[3119]);
initIAA11FR(s[3120]);
initIAA11ML(s[3121]);
initIAA11MU(s[3122]);
initIAA11ME(s[3123]);
initIAA11MR(s[3124]);
initIAA11YL(s[3125]);
initIAA11YU(s[3126]);
initIAA11YE(s[3127]);
initIAA11YR(s[3128]);
initIAA11OL(s[3129]);
initIAA11OU(s[3130]);
initIAA11OE(s[3131]);
initIAA11OR(s[3132]);
initIAB11(s[3133]);
initIABW11(s[3134]);
initIABM11(s[3135]);
initIAT12(s[3136]);
initIAP12(s[3137]);
initIAA12(s[3138]);
initIAA12WL(s[3139]);
initIAA12WU(s[3140]);
initIAA12WE(s[3141]);
initIAA12WR(s[3142]);
initIAA12FL(s[3143]);
initIAA12FU(s[3144]);
initIAA12FE(s[3145]);
initIAA12FR(s[3146]);
initIAA12ML(s[3147]);
initIAA12MU(s[3148]);
initIAA12ME(s[3149]);
initIAA12MR(s[3150]);
initIAA12YL(s[3151]);
initIAA12YU(s[3152]);
initIAA12YE(s[3153]);
initIAA12YR(s[3154]);
initIAA12OL(s[3155]);
initIAA12OU(s[3156]);
initIAA12OE(s[3157]);
initIAA12OR(s[3158]);
initIAB12(s[3159]);
initIABW12(s[3160]);
initIABM12(s[3161]);
initIAT13(s[3162]);
initIAP13(s[3163]);
initIAA13(s[3164]);
initIAA13WL(s[3165]);
initIAA13WU(s[3166]);
initIAA13WE(s[3167]);
initIAA13WR(s[3168]);
initIAA13FL(s[3169]);
initIAA13FU(s[3170]);
initIAA13FE(s[3171]);
initIAA13FR(s[3172]);
initIAA13ML(s[3173]);
initIAA13MU(s[3174]);
initIAA13ME(s[3175]);
initIAA13MR(s[3176]);
initIAA13YL(s[3177]);
initIAA13YU(s[3178]);
initIAA13YE(s[3179]);
initIAA13YR(s[3180]);
initIAA13OL(s[3181]);
initIAA13OU(s[3182]);
initIAA13OE(s[3183]);
initIAA13OR(s[3184]);
initIAB13(s[3185]);
initIABW13(s[3186]);
initIABM13(s[3187]);
initIAT14(s[3188]);
initIAP14(s[3189]);
initIAA14(s[3190]);
initIAA14WL(s[3191]);
initIAA14WU(s[3192]);
initIAA14WE(s[3193]);
initIAA14WR(s[3194]);
initIAA14FL(s[3195]);
initIAA14FU(s[3196]);
initIAA14FE(s[3197]);
initIAA14FR(s[3198]);
initIAA14ML(s[3199]);
initIAA14MU(s[3200]);
initIAA14ME(s[3201]);
initIAA14MR(s[3202]);
initIAA14YL(s[3203]);
initIAA14YU(s[3204]);
initIAA14YE(s[3205]);
initIAA14YR(s[3206]);
initIAA14OL(s[3207]);
initIAA14OU(s[3208]);
initIAA14OE(s[3209]);
initIAA14OR(s[3210]);
initIAB14(s[3211]);
initIABW14(s[3212]);
initIABM14(s[3213]);
initIAT15(s[3214]);
initIAP15(s[3215]);
initIAA15(s[3216]);
initIAA15WL(s[3217]);
initIAA15WU(s[3218]);
initIAA15WE(s[3219]);
initIAA15WR(s[3220]);
initIAA15FL(s[3221]);
initIAA15FU(s[3222]);
initIAA15FE(s[3223]);
initIAA15FR(s[3224]);
initIAA15ML(s[3225]);
initIAA15MU(s[3226]);
initIAA15ME(s[3227]);
initIAA15MR(s[3228]);
initIAA15YL(s[3229]);
initIAA15YU(s[3230]);
initIAA15YE(s[3231]);
initIAA15YR(s[3232]);
initIAA15OL(s[3233]);
initIAA15OU(s[3234]);
initIAA15OE(s[3235]);
initIAA15OR(s[3236]);
initIAB15(s[3237]);
initIABW15(s[3238]);
initIABM15(s[3239]);
initIAT16(s[3240]);
initIAP16(s[3241]);
initIAA16(s[3242]);
initIAA16WL(s[3243]);
initIAA16WU(s[3244]);
initIAA16WE(s[3245]);
initIAA16WR(s[3246]);
initIAA16FL(s[3247]);
initIAA16FU(s[3248]);
initIAA16FE(s[3249]);
initIAA16FR(s[3250]);
initIAA16ML(s[3251]);
initIAA16MU(s[3252]);
initIAA16ME(s[3253]);
initIAA16MR(s[3254]);
initIAA16YL(s[3255]);
initIAA16YU(s[3256]);
initIAA16YE(s[3257]);
initIAA16YR(s[3258]);
initIAA16OL(s[3259]);
initIAA16OU(s[3260]);
initIAA16OE(s[3261]);
initIAA16OR(s[3262]);
initIAB16(s[3263]);
initIABW16(s[3264]);
initIABM16(s[3265]);
initIAT17(s[3266]);
initIAP17(s[3267]);
initIAA17(s[3268]);
initIAA17WL(s[3269]);
initIAA17WU(s[3270]);
initIAA17WE(s[3271]);
initIAA17WR(s[3272]);
initIAA17FL(s[3273]);
initIAA17FU(s[3274]);
initIAA17FE(s[3275]);
initIAA17FR(s[3276]);
initIAA17ML(s[3277]);
initIAA17MU(s[3278]);
initIAA17ME(s[3279]);
initIAA17MR(s[3280]);
initIAA17YL(s[3281]);
initIAA17YU(s[3282]);
initIAA17YE(s[3283]);
initIAA17YR(s[3284]);
initIAA17OL(s[3285]);
initIAA17OU(s[3286]);
initIAA17OE(s[3287]);
initIAA17OR(s[3288]);
initIAB17(s[3289]);
initIABW17(s[3290]);
initIABM17(s[3291]);
initIAT18(s[3292]);
initIAP18(s[3293]);
initIAA18(s[3294]);
initIAA18WL(s[3295]);
initIAA18WU(s[3296]);
initIAA18WE(s[3297]);
initIAA18WR(s[3298]);
initIAA18FL(s[3299]);
initIAA18FU(s[3300]);
initIAA18FE(s[3301]);
initIAA18FR(s[3302]);
initIAA18ML(s[3303]);
initIAA18MU(s[3304]);
initIAA18ME(s[3305]);
initIAA18MR(s[3306]);
initIAA18YL(s[3307]);
initIAA18YU(s[3308]);
initIAA18YE(s[3309]);
initIAA18YR(s[3310]);
initIAA18OL(s[3311]);
initIAA18OU(s[3312]);
initIAA18OE(s[3313]);
initIAA18OR(s[3314]);
initIAB18(s[3315]);
initIABW18(s[3316]);
initIABM18(s[3317]);
initIAHDP1(s[3318]);
initIAHDP2(s[3319]);
initIAHDP3(s[3320]);
initIAHDP4(s[3321]);
initIAHDPM1(s[3322]);
initIAHDPM2(s[3323]);
initIAHDPM3(s[3324]);
initIAHDPM4(s[3325]);
initIAHDPN1(s[3326]);
initIAHDPN2(s[3327]);
initIAHDPN3(s[3328]);
initIAHDPN4(s[3329]);
initIAT19(s[3330]);
initIAP19(s[3331]);
initIAA19(s[3332]);
initIAA19WL(s[3333]);
initIAA19WU(s[3334]);
initIAA19WE(s[3335]);
initIAA19WR(s[3336]);
initIAA19FL(s[3337]);
initIAA19FU(s[3338]);
initIAA19FE(s[3339]);
initIAA19FR(s[3340]);
initIAA19ML(s[3341]);
initIAA19MU(s[3342]);
initIAA19ME(s[3343]);
initIAA19MR(s[3344]);
initIAA19YL(s[3345]);
initIAA19YU(s[3346]);
initIAA19YE(s[3347]);
initIAA19YR(s[3348]);
initIAA19OL(s[3349]);
initIAA19OU(s[3350]);
initIAA19OE(s[3351]);
initIAA19OR(s[3352]);
initIALY19(s[3353]);
initIALM19(s[3354]);
initIAT20(s[3355]);
initIAP20(s[3356]);
initIAA20(s[3357]);
initIAA20WL(s[3358]);
initIAA20WU(s[3359]);
initIAA20WE(s[3360]);
initIAA20WR(s[3361]);
initIAA20FL(s[3362]);
initIAA20FU(s[3363]);
initIAA20FE(s[3364]);
initIAA20FR(s[3365]);
initIAA20ML(s[3366]);
initIAA20MU(s[3367]);
initIAA20ME(s[3368]);
initIAA20MR(s[3369]);
initIAA20YL(s[3370]);
initIAA20YU(s[3371]);
initIAA20YE(s[3372]);
initIAA20YR(s[3373]);
initIAA20OL(s[3374]);
initIAA20OU(s[3375]);
initIAA20OE(s[3376]);
initIAA20OR(s[3377]);
initIALY20(s[3378]);
initIALM20(s[3379]);
initIAT21(s[3380]);
initIAP21(s[3381]);
initIAA21(s[3382]);
initIAA21WL(s[3383]);
initIAA21WU(s[3384]);
initIAA21WE(s[3385]);
initIAA21WR(s[3386]);
initIAA21FL(s[3387]);
initIAA21FU(s[3388]);
initIAA21FE(s[3389]);
initIAA21FR(s[3390]);
initIAA21ML(s[3391]);
initIAA21MU(s[3392]);
initIAA21ME(s[3393]);
initIAA21MR(s[3394]);
initIAA21YL(s[3395]);
initIAA21YU(s[3396]);
initIAA21YE(s[3397]);
initIAA21YR(s[3398]);
initIAA21OL(s[3399]);
initIAA21OU(s[3400]);
initIAA21OE(s[3401]);
initIAA21OR(s[3402]);
initIALY21(s[3403]);
initIALM21(s[3404]);
initIAT22(s[3405]);
initIAP22(s[3406]);
initIAA22(s[3407]);
initIAA22WL(s[3408]);
initIAA22WU(s[3409]);
initIAA22WE(s[3410]);
initIAA22WR(s[3411]);
initIAA22FL(s[3412]);
initIAA22FU(s[3413]);
initIAA22FE(s[3414]);
initIAA22FR(s[3415]);
initIAA22ML(s[3416]);
initIAA22MU(s[3417]);
initIAA22ME(s[3418]);
initIAA22MR(s[3419]);
initIAA22YL(s[3420]);
initIAA22YU(s[3421]);
initIAA22YE(s[3422]);
initIAA22YR(s[3423]);
initIAA22OL(s[3424]);
initIAA22OU(s[3425]);
initIAA22OE(s[3426]);
initIAA22OR(s[3427]);
initIALY22(s[3428]);
initIALM22(s[3429]);
initIAT23(s[3430]);
initIAP23(s[3431]);
initIAA23(s[3432]);
initIAA23WL(s[3433]);
initIAA23WU(s[3434]);
initIAA23WE(s[3435]);
initIAA23WR(s[3436]);
initIAA23FL(s[3437]);
initIAA23FU(s[3438]);
initIAA23FE(s[3439]);
initIAA23FR(s[3440]);
initIAA23ML(s[3441]);
initIAA23MU(s[3442]);
initIAA23ME(s[3443]);
initIAA23MR(s[3444]);
initIAA23YL(s[3445]);
initIAA23YU(s[3446]);
initIAA23YE(s[3447]);
initIAA23YR(s[3448]);
initIAA23OL(s[3449]);
initIAA23OU(s[3450]);
initIAA23OE(s[3451]);
initIAA23OR(s[3452]);
initIALY23(s[3453]);
initIALM23(s[3454]);
initIAT24(s[3455]);
initIAP24(s[3456]);
initIAA24(s[3457]);
initIAA24WL(s[3458]);
initIAA24WU(s[3459]);
initIAA24WE(s[3460]);
initIAA24WR(s[3461]);
initIAA24FL(s[3462]);
initIAA24FU(s[3463]);
initIAA24FE(s[3464]);
initIAA24FR(s[3465]);
initIAA24ML(s[3466]);
initIAA24MU(s[3467]);
initIAA24ME(s[3468]);
initIAA24MR(s[3469]);
initIAA24YL(s[3470]);
initIAA24YU(s[3471]);
initIAA24YE(s[3472]);
initIAA24YR(s[3473]);
initIAA24OL(s[3474]);
initIAA24OU(s[3475]);
initIAA24OE(s[3476]);
initIAA24OR(s[3477]);
initIALY24(s[3478]);
initIALM24(s[3479]);
initIAT25(s[3480]);
initIAP25(s[3481]);
initIAA25(s[3482]);
initIAA25WL(s[3483]);
initIAA25WU(s[3484]);
initIAA25WE(s[3485]);
initIAA25WR(s[3486]);
initIAA25FL(s[3487]);
initIAA25FU(s[3488]);
initIAA25FE(s[3489]);
initIAA25FR(s[3490]);
initIAA25ML(s[3491]);
initIAA25MU(s[3492]);
initIAA25ME(s[3493]);
initIAA25MR(s[3494]);
initIAA25YL(s[3495]);
initIAA25YU(s[3496]);
initIAA25YE(s[3497]);
initIAA25YR(s[3498]);
initIAA25OL(s[3499]);
initIAA25OU(s[3500]);
initIAA25OE(s[3501]);
initIAA25OR(s[3502]);
initIALY25(s[3503]);
initIALM25(s[3504]);
initIAT26(s[3505]);
initIAP26(s[3506]);
initIAA26(s[3507]);
initIAA26WL(s[3508]);
initIAA26WU(s[3509]);
initIAA26WE(s[3510]);
initIAA26WR(s[3511]);
initIAA26FL(s[3512]);
initIAA26FU(s[3513]);
initIAA26FE(s[3514]);
initIAA26FR(s[3515]);
initIAA26ML(s[3516]);
initIAA26MU(s[3517]);
initIAA26ME(s[3518]);
initIAA26MR(s[3519]);
initIAA26YL(s[3520]);
initIAA26YU(s[3521]);
initIAA26YE(s[3522]);
initIAA26YR(s[3523]);
initIAA26OL(s[3524]);
initIAA26OU(s[3525]);
initIAA26OE(s[3526]);
initIAA26OR(s[3527]);
initIALY26(s[3528]);
initIALM26(s[3529]);
initIAT27(s[3530]);
initIAP27(s[3531]);
initIAA27(s[3532]);
initIAA27WL(s[3533]);
initIAA27WU(s[3534]);
initIAA27WE(s[3535]);
initIAA27WR(s[3536]);
initIAA27FL(s[3537]);
initIAA27FU(s[3538]);
initIAA27FE(s[3539]);
initIAA27FR(s[3540]);
initIAA27ML(s[3541]);
initIAA27MU(s[3542]);
initIAA27ME(s[3543]);
initIAA27MR(s[3544]);
initIAA27YL(s[3545]);
initIAA27YU(s[3546]);
initIAA27YE(s[3547]);
initIAA27YR(s[3548]);
initIAA27OL(s[3549]);
initIAA27OU(s[3550]);
initIAA27OE(s[3551]);
initIAA27OR(s[3552]);
initIALY27(s[3553]);
initIALM27(s[3554]);
initIAT28(s[3555]);
initIAP28(s[3556]);
initIAA28(s[3557]);
initIAA28WL(s[3558]);
initIAA28WU(s[3559]);
initIAA28WE(s[3560]);
initIAA28WR(s[3561]);
initIAA28FL(s[3562]);
initIAA28FU(s[3563]);
initIAA28FE(s[3564]);
initIAA28FR(s[3565]);
initIAA28ML(s[3566]);
initIAA28MU(s[3567]);
initIAA28ME(s[3568]);
initIAA28MR(s[3569]);
initIAA28YL(s[3570]);
initIAA28YU(s[3571]);
initIAA28YE(s[3572]);
initIAA28YR(s[3573]);
initIAA28OL(s[3574]);
initIAA28OU(s[3575]);
initIAA28OE(s[3576]);
initIAA28OR(s[3577]);
initIAB28(s[3578]);
initIABW28(s[3579]);
initIABM28(s[3580]);
initIAT29(s[3581]);
initIAP29(s[3582]);
initIAA29(s[3583]);
initIAA29WL(s[3584]);
initIAA29WU(s[3585]);
initIAA29WE(s[3586]);
initIAA29WR(s[3587]);
initIAA29FL(s[3588]);
initIAA29FU(s[3589]);
initIAA29FE(s[3590]);
initIAA29FR(s[3591]);
initIAA29ML(s[3592]);
initIAA29MU(s[3593]);
initIAA29ME(s[3594]);
initIAA29MR(s[3595]);
initIAA29YL(s[3596]);
initIAA29YU(s[3597]);
initIAA29YE(s[3598]);
initIAA29YR(s[3599]);
initIAA29OL(s[3600]);
initIAA29OU(s[3601]);
initIAA29OE(s[3602]);
initIAA29OR(s[3603]);
initIAB29(s[3604]);
initIABW29(s[3605]);
initIABM29(s[3606]);
initIAT30(s[3607]);
initIAP30(s[3608]);
initIAA30(s[3609]);
initIAA30WL(s[3610]);
initIAA30WU(s[3611]);
initIAA30WE(s[3612]);
initIAA30WR(s[3613]);
initIAA30FL(s[3614]);
initIAA30FU(s[3615]);
initIAA30FE(s[3616]);
initIAA30FR(s[3617]);
initIAA30ML(s[3618]);
initIAA30MU(s[3619]);
initIAA30ME(s[3620]);
initIAA30MR(s[3621]);
initIAA30YL(s[3622]);
initIAA30YU(s[3623]);
initIAA30YE(s[3624]);
initIAA30YR(s[3625]);
initIAA30OL(s[3626]);
initIAA30OU(s[3627]);
initIAA30OE(s[3628]);
initIAA30OR(s[3629]);
initIAB30(s[3630]);
initIABW30(s[3631]);
initIABM30(s[3632]);
initIAT31(s[3633]);
initIAP31(s[3634]);
initIAA31(s[3635]);
initIAA31WL(s[3636]);
initIAA31WU(s[3637]);
initIAA31WE(s[3638]);
initIAA31WR(s[3639]);
initIAA31FL(s[3640]);
initIAA31FU(s[3641]);
initIAA31FE(s[3642]);
initIAA31FR(s[3643]);
initIAA31ML(s[3644]);
initIAA31MU(s[3645]);
initIAA31ME(s[3646]);
initIAA31MR(s[3647]);
initIAA31YL(s[3648]);
initIAA31YU(s[3649]);
initIAA31YE(s[3650]);
initIAA31YR(s[3651]);
initIAA31OL(s[3652]);
initIAA31OU(s[3653]);
initIAA31OE(s[3654]);
initIAA31OR(s[3655]);
initIAB31(s[3656]);
initIABW31(s[3657]);
initIABM31(s[3658]);
initIAT32(s[3659]);
initIAP32(s[3660]);
initIAA32(s[3661]);
initIAA32WL(s[3662]);
initIAA32WU(s[3663]);
initIAA32WE(s[3664]);
initIAA32WR(s[3665]);
initIAA32FL(s[3666]);
initIAA32FU(s[3667]);
initIAA32FE(s[3668]);
initIAA32FR(s[3669]);
initIAA32ML(s[3670]);
initIAA32MU(s[3671]);
initIAA32ME(s[3672]);
initIAA32MR(s[3673]);
initIAA32YL(s[3674]);
initIAA32YU(s[3675]);
initIAA32YE(s[3676]);
initIAA32YR(s[3677]);
initIAA32OL(s[3678]);
initIAA32OU(s[3679]);
initIAA32OE(s[3680]);
initIAA32OR(s[3681]);
initIAB32(s[3682]);
initIABW32(s[3683]);
initIABM32(s[3684]);
initIAT33(s[3685]);
initIAP33(s[3686]);
initIAA33(s[3687]);
initIAA33WL(s[3688]);
initIAA33WU(s[3689]);
initIAA33WE(s[3690]);
initIAA33WR(s[3691]);
initIAA33FL(s[3692]);
initIAA33FU(s[3693]);
initIAA33FE(s[3694]);
initIAA33FR(s[3695]);
initIAA33ML(s[3696]);
initIAA33MU(s[3697]);
initIAA33ME(s[3698]);
initIAA33MR(s[3699]);
initIAA33YL(s[3700]);
initIAA33YU(s[3701]);
initIAA33YE(s[3702]);
initIAA33YR(s[3703]);
initIAA33OL(s[3704]);
initIAA33OU(s[3705]);
initIAA33OE(s[3706]);
initIAA33OR(s[3707]);
initIAB33(s[3708]);
initIABW33(s[3709]);
initIABM33(s[3710]);
initIAT34(s[3711]);
initIAP34(s[3712]);
initIAA34(s[3713]);
initIAA34WL(s[3714]);
initIAA34WU(s[3715]);
initIAA34WE(s[3716]);
initIAA34WR(s[3717]);
initIAA34FL(s[3718]);
initIAA34FU(s[3719]);
initIAA34FE(s[3720]);
initIAA34FR(s[3721]);
initIAA34ML(s[3722]);
initIAA34MU(s[3723]);
initIAA34ME(s[3724]);
initIAA34MR(s[3725]);
initIAA34YL(s[3726]);
initIAA34YU(s[3727]);
initIAA34YE(s[3728]);
initIAA34YR(s[3729]);
initIAA34OL(s[3730]);
initIAA34OU(s[3731]);
initIAA34OE(s[3732]);
initIAA34OR(s[3733]);
initIAB34(s[3734]);
initIABW34(s[3735]);
initIABM34(s[3736]);
initIAT35(s[3737]);
initIAP35(s[3738]);
initIAA35(s[3739]);
initIAA35WL(s[3740]);
initIAA35WU(s[3741]);
initIAA35WE(s[3742]);
initIAA35WR(s[3743]);
initIAA35FL(s[3744]);
initIAA35FU(s[3745]);
initIAA35FE(s[3746]);
initIAA35FR(s[3747]);
initIAA35ML(s[3748]);
initIAA35MU(s[3749]);
initIAA35ME(s[3750]);
initIAA35MR(s[3751]);
initIAA35YL(s[3752]);
initIAA35YU(s[3753]);
initIAA35YE(s[3754]);
initIAA35YR(s[3755]);
initIAA35OL(s[3756]);
initIAA35OU(s[3757]);
initIAA35OE(s[3758]);
initIAA35OR(s[3759]);
initIAB35(s[3760]);
initIABW35(s[3761]);
initIABM35(s[3762]);
initIAT36(s[3763]);
initIAP36(s[3764]);
initIAA36(s[3765]);
initIAA36WL(s[3766]);
initIAA36WU(s[3767]);
initIAA36WE(s[3768]);
initIAA36WR(s[3769]);
initIAA36FL(s[3770]);
initIAA36FU(s[3771]);
initIAA36FE(s[3772]);
initIAA36FR(s[3773]);
initIAA36ML(s[3774]);
initIAA36MU(s[3775]);
initIAA36ME(s[3776]);
initIAA36MR(s[3777]);
initIAA36YL(s[3778]);
initIAA36YU(s[3779]);
initIAA36YE(s[3780]);
initIAA36YR(s[3781]);
initIAA36OL(s[3782]);
initIAA36OU(s[3783]);
initIAA36OE(s[3784]);
initIAA36OR(s[3785]);
initIAB36(s[3786]);
initIABW36(s[3787]);
initIABM36(s[3788]);
initIABEB(s[3789]);
initIABER1(s[3790]);
initIABER2(s[3791]);
initIABER3(s[3792]);
initIABER4(s[3793]);
initIABERM1(s[3794]);
initIABERM2(s[3795]);
initIABERM3(s[3796]);
initIABERM4(s[3797]);
initIABEN1(s[3798]);
initIABEN2(s[3799]);
initIABEN3(s[3800]);
initIABEN4(s[3801]);
initIAT37(s[3802]);
initIAP37(s[3803]);
initIAA37(s[3804]);
initIAA37WL(s[3805]);
initIAA37WU(s[3806]);
initIAA37WE(s[3807]);
initIAA37WR(s[3808]);
initIAA37FL(s[3809]);
initIAA37FU(s[3810]);
initIAA37FE(s[3811]);
initIAA37FR(s[3812]);
initIAA37ML(s[3813]);
initIAA37MU(s[3814]);
initIAA37ME(s[3815]);
initIAA37MR(s[3816]);
initIAA37YL(s[3817]);
initIAA37YU(s[3818]);
initIAA37YE(s[3819]);
initIAA37YR(s[3820]);
initIAA37OL(s[3821]);
initIAA37OU(s[3822]);
initIAA37OE(s[3823]);
initIAA37OR(s[3824]);
initIALY37(s[3825]);
initIALM37(s[3826]);
initIAT38(s[3827]);
initIAP38(s[3828]);
initIAA38(s[3829]);
initIAA38WL(s[3830]);
initIAA38WU(s[3831]);
initIAA38WE(s[3832]);
initIAA38WR(s[3833]);
initIAA38FL(s[3834]);
initIAA38FU(s[3835]);
initIAA38FE(s[3836]);
initIAA38FR(s[3837]);
initIAA38ML(s[3838]);
initIAA38MU(s[3839]);
initIAA38ME(s[3840]);
initIAA38MR(s[3841]);
initIAA38YL(s[3842]);
initIAA38YU(s[3843]);
initIAA38YE(s[3844]);
initIAA38YR(s[3845]);
initIAA38OL(s[3846]);
initIAA38OU(s[3847]);
initIAA38OE(s[3848]);
initIAA38OR(s[3849]);
initIALY38(s[3850]);
initIALM38(s[3851]);
initIAT39(s[3852]);
initIAP39(s[3853]);
initIAA39(s[3854]);
initIAA39WL(s[3855]);
initIAA39WU(s[3856]);
initIAA39WE(s[3857]);
initIAA39WR(s[3858]);
initIAA39FL(s[3859]);
initIAA39FU(s[3860]);
initIAA39FE(s[3861]);
initIAA39FR(s[3862]);
initIAA39ML(s[3863]);
initIAA39MU(s[3864]);
initIAA39ME(s[3865]);
initIAA39MR(s[3866]);
initIAA39YL(s[3867]);
initIAA39YU(s[3868]);
initIAA39YE(s[3869]);
initIAA39YR(s[3870]);
initIAA39OL(s[3871]);
initIAA39OU(s[3872]);
initIAA39OE(s[3873]);
initIAA39OR(s[3874]);
initIALY39(s[3875]);
initIALM39(s[3876]);
initIAT40(s[3877]);
initIAP40(s[3878]);
initIAA40(s[3879]);
initIAA40WL(s[3880]);
initIAA40WU(s[3881]);
initIAA40WE(s[3882]);
initIAA40WR(s[3883]);
initIAA40FL(s[3884]);
initIAA40FU(s[3885]);
initIAA40FE(s[3886]);
initIAA40FR(s[3887]);
initIAA40ML(s[3888]);
initIAA40MU(s[3889]);
initIAA40ME(s[3890]);
initIAA40MR(s[3891]);
initIAA40YL(s[3892]);
initIAA40YU(s[3893]);
initIAA40YE(s[3894]);
initIAA40YR(s[3895]);
initIAA40OL(s[3896]);
initIAA40OU(s[3897]);
initIAA40OE(s[3898]);
initIAA40OR(s[3899]);
initIALY40(s[3900]);
initIALM40(s[3901]);
initIAT41(s[3902]);
initIAP41(s[3903]);
initIAA41(s[3904]);
initIAA41WL(s[3905]);
initIAA41WU(s[3906]);
initIAA41WE(s[3907]);
initIAA41WR(s[3908]);
initIAA41FL(s[3909]);
initIAA41FU(s[3910]);
initIAA41FE(s[3911]);
initIAA41FR(s[3912]);
initIAA41ML(s[3913]);
initIAA41MU(s[3914]);
initIAA41ME(s[3915]);
initIAA41MR(s[3916]);
initIAA41YL(s[3917]);
initIAA41YU(s[3918]);
initIAA41YE(s[3919]);
initIAA41YR(s[3920]);
initIAA41OL(s[3921]);
initIAA41OU(s[3922]);
initIAA41OE(s[3923]);
initIAA41OR(s[3924]);
initIALY41(s[3925]);
initIALM41(s[3926]);
initIAT42(s[3927]);
initIAP42(s[3928]);
initIAA42(s[3929]);
initIAA42WL(s[3930]);
initIAA42WU(s[3931]);
initIAA42WE(s[3932]);
initIAA42WR(s[3933]);
initIAA42FL(s[3934]);
initIAA42FU(s[3935]);
initIAA42FE(s[3936]);
initIAA42FR(s[3937]);
initIAA42ML(s[3938]);
initIAA42MU(s[3939]);
initIAA42ME(s[3940]);
initIAA42MR(s[3941]);
initIAA42YL(s[3942]);
initIAA42YU(s[3943]);
initIAA42YE(s[3944]);
initIAA42YR(s[3945]);
initIAA42OL(s[3946]);
initIAA42OU(s[3947]);
initIAA42OE(s[3948]);
initIAA42OR(s[3949]);
initIALY42(s[3950]);
initIALM42(s[3951]);
initIAT43(s[3952]);
initIAP43(s[3953]);
initIAA43(s[3954]);
initIAA43WL(s[3955]);
initIAA43WU(s[3956]);
initIAA43WE(s[3957]);
initIAA43WR(s[3958]);
initIAA43FL(s[3959]);
initIAA43FU(s[3960]);
initIAA43FE(s[3961]);
initIAA43FR(s[3962]);
initIAA43ML(s[3963]);
initIAA43MU(s[3964]);
initIAA43ME(s[3965]);
initIAA43MR(s[3966]);
initIAA43YL(s[3967]);
initIAA43YU(s[3968]);
initIAA43YE(s[3969]);
initIAA43YR(s[3970]);
initIAA43OL(s[3971]);
initIAA43OU(s[3972]);
initIAA43OE(s[3973]);
initIAA43OR(s[3974]);
initIALY43(s[3975]);
initIALM43(s[3976]);
initIAT44(s[3977]);
initIAP44(s[3978]);
initIAA44(s[3979]);
initIAA44WL(s[3980]);
initIAA44WU(s[3981]);
initIAA44WE(s[3982]);
initIAA44WR(s[3983]);
initIAA44FL(s[3984]);
initIAA44FU(s[3985]);
initIAA44FE(s[3986]);
initIAA44FR(s[3987]);
initIAA44ML(s[3988]);
initIAA44MU(s[3989]);
initIAA44ME(s[3990]);
initIAA44MR(s[3991]);
initIAA44YL(s[3992]);
initIAA44YU(s[3993]);
initIAA44YE(s[3994]);
initIAA44YR(s[3995]);
initIAA44OL(s[3996]);
initIAA44OU(s[3997]);
initIAA44OE(s[3998]);
initIAA44OR(s[3999]);
}
public void init_4000_4999(String line) {
initIALY44(s[4000]);
initIALM44(s[4001]);
initIAT45(s[4002]);
initIAP45(s[4003]);
initIAA45(s[4004]);
initIAA45WL(s[4005]);
initIAA45WU(s[4006]);
initIAA45WE(s[4007]);
initIAA45WR(s[4008]);
initIAA45FL(s[4009]);
initIAA45FU(s[4010]);
initIAA45FE(s[4011]);
initIAA45FR(s[4012]);
initIAA45ML(s[4013]);
initIAA45MU(s[4014]);
initIAA45ME(s[4015]);
initIAA45MR(s[4016]);
initIAA45YL(s[4017]);
initIAA45YU(s[4018]);
initIAA45YE(s[4019]);
initIAA45YR(s[4020]);
initIAA45OL(s[4021]);
initIAA45OU(s[4022]);
initIAA45OE(s[4023]);
initIAA45OR(s[4024]);
initIALY45(s[4025]);
initIALM45(s[4026]);
initIAT46(s[4027]);
initIAP46(s[4028]);
initIAA46(s[4029]);
initIAA46WL(s[4030]);
initIAA46WU(s[4031]);
initIAA46WE(s[4032]);
initIAA46WR(s[4033]);
initIAA46FL(s[4034]);
initIAA46FU(s[4035]);
initIAA46FE(s[4036]);
initIAA46FR(s[4037]);
initIAA46ML(s[4038]);
initIAA46MU(s[4039]);
initIAA46ME(s[4040]);
initIAA46MR(s[4041]);
initIAA46YL(s[4042]);
initIAA46YU(s[4043]);
initIAA46YE(s[4044]);
initIAA46YR(s[4045]);
initIAA46OL(s[4046]);
initIAA46OU(s[4047]);
initIAA46OE(s[4048]);
initIAA46OR(s[4049]);
initIAB46(s[4050]);
initIABW46(s[4051]);
initIABM46(s[4052]);
initIAT47(s[4053]);
initIAP47(s[4054]);
initIAA47(s[4055]);
initIAA47WL(s[4056]);
initIAA47WU(s[4057]);
initIAA47WE(s[4058]);
initIAA47WR(s[4059]);
initIAA47FL(s[4060]);
initIAA47FU(s[4061]);
initIAA47FE(s[4062]);
initIAA47FR(s[4063]);
initIAA47ML(s[4064]);
initIAA47MU(s[4065]);
initIAA47ME(s[4066]);
initIAA47MR(s[4067]);
initIAA47YL(s[4068]);
initIAA47YU(s[4069]);
initIAA47YE(s[4070]);
initIAA47YR(s[4071]);
initIAA47OL(s[4072]);
initIAA47OU(s[4073]);
initIAA47OE(s[4074]);
initIAA47OR(s[4075]);
initIAB47(s[4076]);
initIABW47(s[4077]);
initIABM47(s[4078]);
initIAT48(s[4079]);
initIAP48(s[4080]);
initIAA48(s[4081]);
initIAA48WL(s[4082]);
initIAA48WU(s[4083]);
initIAA48WE(s[4084]);
initIAA48WR(s[4085]);
initIAA48FL(s[4086]);
initIAA48FU(s[4087]);
initIAA48FE(s[4088]);
initIAA48FR(s[4089]);
initIAA48ML(s[4090]);
initIAA48MU(s[4091]);
initIAA48ME(s[4092]);
initIAA48MR(s[4093]);
initIAA48YL(s[4094]);
initIAA48YU(s[4095]);
initIAA48YE(s[4096]);
initIAA48YR(s[4097]);
initIAA48OL(s[4098]);
initIAA48OU(s[4099]);
initIAA48OE(s[4100]);
initIAA48OR(s[4101]);
initIAB48(s[4102]);
initIABW48(s[4103]);
initIABM48(s[4104]);
initIAT49(s[4105]);
initIAP49(s[4106]);
initIAA49(s[4107]);
initIAA49WL(s[4108]);
initIAA49WU(s[4109]);
initIAA49WE(s[4110]);
initIAA49WR(s[4111]);
initIAA49FL(s[4112]);
initIAA49FU(s[4113]);
initIAA49FE(s[4114]);
initIAA49FR(s[4115]);
initIAA49ML(s[4116]);
initIAA49MU(s[4117]);
initIAA49ME(s[4118]);
initIAA49MR(s[4119]);
initIAA49YL(s[4120]);
initIAA49YU(s[4121]);
initIAA49YE(s[4122]);
initIAA49YR(s[4123]);
initIAA49OL(s[4124]);
initIAA49OU(s[4125]);
initIAA49OE(s[4126]);
initIAA49OR(s[4127]);
initIAB49(s[4128]);
initIABW49(s[4129]);
initIABM49(s[4130]);
initIAT50(s[4131]);
initIAP50(s[4132]);
initIAA50(s[4133]);
initIAA50WL(s[4134]);
initIAA50WU(s[4135]);
initIAA50WE(s[4136]);
initIAA50WR(s[4137]);
initIAA50FL(s[4138]);
initIAA50FU(s[4139]);
initIAA50FE(s[4140]);
initIAA50FR(s[4141]);
initIAA50ML(s[4142]);
initIAA50MU(s[4143]);
initIAA50ME(s[4144]);
initIAA50MR(s[4145]);
initIAA50YL(s[4146]);
initIAA50YU(s[4147]);
initIAA50YE(s[4148]);
initIAA50YR(s[4149]);
initIAA50OL(s[4150]);
initIAA50OU(s[4151]);
initIAA50OE(s[4152]);
initIAA50OR(s[4153]);
initIAB50(s[4154]);
initIABW50(s[4155]);
initIABM50(s[4156]);
initIAT51(s[4157]);
initIAP51(s[4158]);
initIAA51(s[4159]);
initIAA51WL(s[4160]);
initIAA51WU(s[4161]);
initIAA51WE(s[4162]);
initIAA51WR(s[4163]);
initIAA51FL(s[4164]);
initIAA51FU(s[4165]);
initIAA51FE(s[4166]);
initIAA51FR(s[4167]);
initIAA51ML(s[4168]);
initIAA51MU(s[4169]);
initIAA51ME(s[4170]);
initIAA51MR(s[4171]);
initIAA51YL(s[4172]);
initIAA51YU(s[4173]);
initIAA51YE(s[4174]);
initIAA51YR(s[4175]);
initIAA51OL(s[4176]);
initIAA51OU(s[4177]);
initIAA51OE(s[4178]);
initIAA51OR(s[4179]);
initIAB51(s[4180]);
initIABW51(s[4181]);
initIABM51(s[4182]);
initIAT52(s[4183]);
initIAP52(s[4184]);
initIAA52(s[4185]);
initIAA52WL(s[4186]);
initIAA52WU(s[4187]);
initIAA52WE(s[4188]);
initIAA52WR(s[4189]);
initIAA52FL(s[4190]);
initIAA52FU(s[4191]);
initIAA52FE(s[4192]);
initIAA52FR(s[4193]);
initIAA52ML(s[4194]);
initIAA52MU(s[4195]);
initIAA52ME(s[4196]);
initIAA52MR(s[4197]);
initIAA52YL(s[4198]);
initIAA52YU(s[4199]);
initIAA52YE(s[4200]);
initIAA52YR(s[4201]);
initIAA52OL(s[4202]);
initIAA52OU(s[4203]);
initIAA52OE(s[4204]);
initIAA52OR(s[4205]);
initIAB52(s[4206]);
initIABW52(s[4207]);
initIABM52(s[4208]);
initIAT53(s[4209]);
initIAP53(s[4210]);
initIAA53(s[4211]);
initIAA53WL(s[4212]);
initIAA53WU(s[4213]);
initIAA53WE(s[4214]);
initIAA53WR(s[4215]);
initIAA53FL(s[4216]);
initIAA53FU(s[4217]);
initIAA53FE(s[4218]);
initIAA53FR(s[4219]);
initIAA53ML(s[4220]);
initIAA53MU(s[4221]);
initIAA53ME(s[4222]);
initIAA53MR(s[4223]);
initIAA53YL(s[4224]);
initIAA53YU(s[4225]);
initIAA53YE(s[4226]);
initIAA53YR(s[4227]);
initIAA53OL(s[4228]);
initIAA53OU(s[4229]);
initIAA53OE(s[4230]);
initIAA53OR(s[4231]);
initIAB53(s[4232]);
initIABW53(s[4233]);
initIABM53(s[4234]);
initIAT54(s[4235]);
initIAP54(s[4236]);
initIAA54(s[4237]);
initIAA54WL(s[4238]);
initIAA54WU(s[4239]);
initIAA54WE(s[4240]);
initIAA54WR(s[4241]);
initIAA54FL(s[4242]);
initIAA54FU(s[4243]);
initIAA54FE(s[4244]);
initIAA54FR(s[4245]);
initIAA54ML(s[4246]);
initIAA54MU(s[4247]);
initIAA54ME(s[4248]);
initIAA54MR(s[4249]);
initIAA54YL(s[4250]);
initIAA54YU(s[4251]);
initIAA54YE(s[4252]);
initIAA54YR(s[4253]);
initIAA54OL(s[4254]);
initIAA54OU(s[4255]);
initIAA54OE(s[4256]);
initIAA54OR(s[4257]);
initIAB54(s[4258]);
initIABW54(s[4259]);
initIABM54(s[4260]);
initIABEP1(s[4261]);
initIABEP2(s[4262]);
initIABEP3(s[4263]);
initIABEPM1(s[4264]);
initIABEPM2(s[4265]);
initIABEPM3(s[4266]);
initIABEPN1(s[4267]);
initIABEPN2(s[4268]);
initIABEPN3(s[4269]);
initIAT55(s[4270]);
initIAP55(s[4271]);
initIAA55(s[4272]);
initIAA55WL(s[4273]);
initIAA55WU(s[4274]);
initIAA55WE(s[4275]);
initIAA55WR(s[4276]);
initIAA55FL(s[4277]);
initIAA55FU(s[4278]);
initIAA55FE(s[4279]);
initIAA55FR(s[4280]);
initIAA55ML(s[4281]);
initIAA55MU(s[4282]);
initIAA55ME(s[4283]);
initIAA55MR(s[4284]);
initIAA55YL(s[4285]);
initIAA55YU(s[4286]);
initIAA55YE(s[4287]);
initIAA55YR(s[4288]);
initIAA55OL(s[4289]);
initIAA55OU(s[4290]);
initIAA55OE(s[4291]);
initIAA55OR(s[4292]);
initIALY55(s[4293]);
initIALM55(s[4294]);
initIAT56(s[4295]);
initIAP56(s[4296]);
initIAA56(s[4297]);
initIAA56WL(s[4298]);
initIAA56WU(s[4299]);
initIAA56WE(s[4300]);
initIAA56WR(s[4301]);
initIAA56FL(s[4302]);
initIAA56FU(s[4303]);
initIAA56FE(s[4304]);
initIAA56FR(s[4305]);
initIAA56ML(s[4306]);
initIAA56MU(s[4307]);
initIAA56ME(s[4308]);
initIAA56MR(s[4309]);
initIAA56YL(s[4310]);
initIAA56YU(s[4311]);
initIAA56YE(s[4312]);
initIAA56YR(s[4313]);
initIAA56OL(s[4314]);
initIAA56OU(s[4315]);
initIAA56OE(s[4316]);
initIAA56OR(s[4317]);
initIALY56(s[4318]);
initIALM56(s[4319]);
initIAT57(s[4320]);
initIAP57(s[4321]);
initIAA57(s[4322]);
initIAA57WL(s[4323]);
initIAA57WU(s[4324]);
initIAA57WE(s[4325]);
initIAA57WR(s[4326]);
initIAA57FL(s[4327]);
initIAA57FU(s[4328]);
initIAA57FE(s[4329]);
initIAA57FR(s[4330]);
initIAA57ML(s[4331]);
initIAA57MU(s[4332]);
initIAA57ME(s[4333]);
initIAA57MR(s[4334]);
initIAA57YL(s[4335]);
initIAA57YU(s[4336]);
initIAA57YE(s[4337]);
initIAA57YR(s[4338]);
initIAA57OL(s[4339]);
initIAA57OU(s[4340]);
initIAA57OE(s[4341]);
initIAA57OR(s[4342]);
initIALY57(s[4343]);
initIALM57(s[4344]);
initIAT58(s[4345]);
initIAP58(s[4346]);
initIAA58(s[4347]);
initIAA58WL(s[4348]);
initIAA58WU(s[4349]);
initIAA58WE(s[4350]);
initIAA58WR(s[4351]);
initIAA58FL(s[4352]);
initIAA58FU(s[4353]);
initIAA58FE(s[4354]);
initIAA58FR(s[4355]);
initIAA58ML(s[4356]);
initIAA58MU(s[4357]);
initIAA58ME(s[4358]);
initIAA58MR(s[4359]);
initIAA58YL(s[4360]);
initIAA58YU(s[4361]);
initIAA58YE(s[4362]);
initIAA58YR(s[4363]);
initIAA58OL(s[4364]);
initIAA58OU(s[4365]);
initIAA58OE(s[4366]);
initIAA58OR(s[4367]);
initIALY58(s[4368]);
initIALM58(s[4369]);
initIAT59(s[4370]);
initIAP59(s[4371]);
initIAA59(s[4372]);
initIAA59WL(s[4373]);
initIAA59WU(s[4374]);
initIAA59WE(s[4375]);
initIAA59WR(s[4376]);
initIAA59FL(s[4377]);
initIAA59FU(s[4378]);
initIAA59FE(s[4379]);
initIAA59FR(s[4380]);
initIAA59ML(s[4381]);
initIAA59MU(s[4382]);
initIAA59ME(s[4383]);
initIAA59MR(s[4384]);
initIAA59YL(s[4385]);
initIAA59YU(s[4386]);
initIAA59YE(s[4387]);
initIAA59YR(s[4388]);
initIAA59OL(s[4389]);
initIAA59OU(s[4390]);
initIAA59OE(s[4391]);
initIAA59OR(s[4392]);
initIALY59(s[4393]);
initIALM59(s[4394]);
initIAT60(s[4395]);
initIAP60(s[4396]);
initIAA60(s[4397]);
initIAA60WL(s[4398]);
initIAA60WU(s[4399]);
initIAA60WE(s[4400]);
initIAA60WR(s[4401]);
initIAA60FL(s[4402]);
initIAA60FU(s[4403]);
initIAA60FE(s[4404]);
initIAA60FR(s[4405]);
initIAA60ML(s[4406]);
initIAA60MU(s[4407]);
initIAA60ME(s[4408]);
initIAA60MR(s[4409]);
initIAA60YL(s[4410]);
initIAA60YU(s[4411]);
initIAA60YE(s[4412]);
initIAA60YR(s[4413]);
initIAA60OL(s[4414]);
initIAA60OU(s[4415]);
initIAA60OE(s[4416]);
initIAA60OR(s[4417]);
initIALY60(s[4418]);
initIALM60(s[4419]);
initIAT61(s[4420]);
initIAP61(s[4421]);
initIAA61(s[4422]);
initIAA61WL(s[4423]);
initIAA61WU(s[4424]);
initIAA61WE(s[4425]);
initIAA61WR(s[4426]);
initIAA61FL(s[4427]);
initIAA61FU(s[4428]);
initIAA61FE(s[4429]);
initIAA61FR(s[4430]);
initIAA61ML(s[4431]);
initIAA61MU(s[4432]);
initIAA61ME(s[4433]);
initIAA61MR(s[4434]);
initIAA61YL(s[4435]);
initIAA61YU(s[4436]);
initIAA61YE(s[4437]);
initIAA61YR(s[4438]);
initIAA61OL(s[4439]);
initIAA61OU(s[4440]);
initIAA61OE(s[4441]);
initIAA61OR(s[4442]);
initIALY61(s[4443]);
initIALM61(s[4444]);
initIAT62(s[4445]);
initIAP62(s[4446]);
initIAA62(s[4447]);
initIAA62WL(s[4448]);
initIAA62WU(s[4449]);
initIAA62WE(s[4450]);
initIAA62WR(s[4451]);
initIAA62FL(s[4452]);
initIAA62FU(s[4453]);
initIAA62FE(s[4454]);
initIAA62FR(s[4455]);
initIAA62ML(s[4456]);
initIAA62MU(s[4457]);
initIAA62ME(s[4458]);
initIAA62MR(s[4459]);
initIAA62YL(s[4460]);
initIAA62YU(s[4461]);
initIAA62YE(s[4462]);
initIAA62YR(s[4463]);
initIAA62OL(s[4464]);
initIAA62OU(s[4465]);
initIAA62OE(s[4466]);
initIAA62OR(s[4467]);
initIALY62(s[4468]);
initIALM62(s[4469]);
initIAT63(s[4470]);
initIAP63(s[4471]);
initIAA63(s[4472]);
initIAA63WL(s[4473]);
initIAA63WU(s[4474]);
initIAA63WE(s[4475]);
initIAA63WR(s[4476]);
initIAA63FL(s[4477]);
initIAA63FU(s[4478]);
initIAA63FE(s[4479]);
initIAA63FR(s[4480]);
initIAA63ML(s[4481]);
initIAA63MU(s[4482]);
initIAA63ME(s[4483]);
initIAA63MR(s[4484]);
initIAA63YL(s[4485]);
initIAA63YU(s[4486]);
initIAA63YE(s[4487]);
initIAA63YR(s[4488]);
initIAA63OL(s[4489]);
initIAA63OU(s[4490]);
initIAA63OE(s[4491]);
initIAA63OR(s[4492]);
initIALY63(s[4493]);
initIALM63(s[4494]);
initIAT64(s[4495]);
initIAP64(s[4496]);
initIAA64(s[4497]);
initIAA64WL(s[4498]);
initIAA64WU(s[4499]);
initIAA64WE(s[4500]);
initIAA64WR(s[4501]);
initIAA64FL(s[4502]);
initIAA64FU(s[4503]);
initIAA64FE(s[4504]);
initIAA64FR(s[4505]);
initIAA64ML(s[4506]);
initIAA64MU(s[4507]);
initIAA64ME(s[4508]);
initIAA64MR(s[4509]);
initIAA64YL(s[4510]);
initIAA64YU(s[4511]);
initIAA64YE(s[4512]);
initIAA64YR(s[4513]);
initIAA64OL(s[4514]);
initIAA64OU(s[4515]);
initIAA64OE(s[4516]);
initIAA64OR(s[4517]);
initIAB64(s[4518]);
initIABW64(s[4519]);
initIABM64(s[4520]);
initIAT65(s[4521]);
initIAP65(s[4522]);
initIAA65(s[4523]);
initIAA65WL(s[4524]);
initIAA65WU(s[4525]);
initIAA65WE(s[4526]);
initIAA65WR(s[4527]);
initIAA65FL(s[4528]);
initIAA65FU(s[4529]);
initIAA65FE(s[4530]);
initIAA65FR(s[4531]);
initIAA65ML(s[4532]);
initIAA65MU(s[4533]);
initIAA65ME(s[4534]);
initIAA65MR(s[4535]);
initIAA65YL(s[4536]);
initIAA65YU(s[4537]);
initIAA65YE(s[4538]);
initIAA65YR(s[4539]);
initIAA65OL(s[4540]);
initIAA65OU(s[4541]);
initIAA65OE(s[4542]);
initIAA65OR(s[4543]);
initIAB65(s[4544]);
initIABW65(s[4545]);
initIABM65(s[4546]);
initIAT66(s[4547]);
initIAP66(s[4548]);
initIAA66(s[4549]);
initIAA66WL(s[4550]);
initIAA66WU(s[4551]);
initIAA66WE(s[4552]);
initIAA66WR(s[4553]);
initIAA66FL(s[4554]);
initIAA66FU(s[4555]);
initIAA66FE(s[4556]);
initIAA66FR(s[4557]);
initIAA66ML(s[4558]);
initIAA66MU(s[4559]);
initIAA66ME(s[4560]);
initIAA66MR(s[4561]);
initIAA66YL(s[4562]);
initIAA66YU(s[4563]);
initIAA66YE(s[4564]);
initIAA66YR(s[4565]);
initIAA66OL(s[4566]);
initIAA66OU(s[4567]);
initIAA66OE(s[4568]);
initIAA66OR(s[4569]);
initIAB66(s[4570]);
initIABW66(s[4571]);
initIABM66(s[4572]);
initIAT67(s[4573]);
initIAP67(s[4574]);
initIAA67(s[4575]);
initIAA67WL(s[4576]);
initIAA67WU(s[4577]);
initIAA67WE(s[4578]);
initIAA67WR(s[4579]);
initIAA67FL(s[4580]);
initIAA67FU(s[4581]);
initIAA67FE(s[4582]);
initIAA67FR(s[4583]);
initIAA67ML(s[4584]);
initIAA67MU(s[4585]);
initIAA67ME(s[4586]);
initIAA67MR(s[4587]);
initIAA67YL(s[4588]);
initIAA67YU(s[4589]);
initIAA67YE(s[4590]);
initIAA67YR(s[4591]);
initIAA67OL(s[4592]);
initIAA67OU(s[4593]);
initIAA67OE(s[4594]);
initIAA67OR(s[4595]);
initIAB67(s[4596]);
initIABW67(s[4597]);
initIABM67(s[4598]);
initIAT68(s[4599]);
initIAP68(s[4600]);
initIAA68(s[4601]);
initIAA68WL(s[4602]);
initIAA68WU(s[4603]);
initIAA68WE(s[4604]);
initIAA68WR(s[4605]);
initIAA68FL(s[4606]);
initIAA68FU(s[4607]);
initIAA68FE(s[4608]);
initIAA68FR(s[4609]);
initIAA68ML(s[4610]);
initIAA68MU(s[4611]);
initIAA68ME(s[4612]);
initIAA68MR(s[4613]);
initIAA68YL(s[4614]);
initIAA68YU(s[4615]);
initIAA68YE(s[4616]);
initIAA68YR(s[4617]);
initIAA68OL(s[4618]);
initIAA68OU(s[4619]);
initIAA68OE(s[4620]);
initIAA68OR(s[4621]);
initIAB68(s[4622]);
initIABW68(s[4623]);
initIABM68(s[4624]);
initIAT69(s[4625]);
initIAP69(s[4626]);
initIAA69(s[4627]);
initIAA69WL(s[4628]);
initIAA69WU(s[4629]);
initIAA69WE(s[4630]);
initIAA69WR(s[4631]);
initIAA69FL(s[4632]);
initIAA69FU(s[4633]);
initIAA69FE(s[4634]);
initIAA69FR(s[4635]);
initIAA69ML(s[4636]);
initIAA69MU(s[4637]);
initIAA69ME(s[4638]);
initIAA69MR(s[4639]);
initIAA69YL(s[4640]);
initIAA69YU(s[4641]);
initIAA69YE(s[4642]);
initIAA69YR(s[4643]);
initIAA69OL(s[4644]);
initIAA69OU(s[4645]);
initIAA69OE(s[4646]);
initIAA69OR(s[4647]);
initIAB69(s[4648]);
initIABW69(s[4649]);
initIABM69(s[4650]);
initIAT70(s[4651]);
initIAP70(s[4652]);
initIAA70(s[4653]);
initIAA70WL(s[4654]);
initIAA70WU(s[4655]);
initIAA70WE(s[4656]);
initIAA70WR(s[4657]);
initIAA70FL(s[4658]);
initIAA70FU(s[4659]);
initIAA70FE(s[4660]);
initIAA70FR(s[4661]);
initIAA70ML(s[4662]);
initIAA70MU(s[4663]);
initIAA70ME(s[4664]);
initIAA70MR(s[4665]);
initIAA70YL(s[4666]);
initIAA70YU(s[4667]);
initIAA70YE(s[4668]);
initIAA70YR(s[4669]);
initIAA70OL(s[4670]);
initIAA70OU(s[4671]);
initIAA70OE(s[4672]);
initIAA70OR(s[4673]);
initIAB70(s[4674]);
initIABW70(s[4675]);
initIABM70(s[4676]);
initIAT71(s[4677]);
initIAP71(s[4678]);
initIAA71(s[4679]);
initIAA71WL(s[4680]);
initIAA71WU(s[4681]);
initIAA71WE(s[4682]);
initIAA71WR(s[4683]);
initIAA71FL(s[4684]);
initIAA71FU(s[4685]);
initIAA71FE(s[4686]);
initIAA71FR(s[4687]);
initIAA71ML(s[4688]);
initIAA71MU(s[4689]);
initIAA71ME(s[4690]);
initIAA71MR(s[4691]);
initIAA71YL(s[4692]);
initIAA71YU(s[4693]);
initIAA71YE(s[4694]);
initIAA71YR(s[4695]);
initIAA71OL(s[4696]);
initIAA71OU(s[4697]);
initIAA71OE(s[4698]);
initIAA71OR(s[4699]);
initIAB71(s[4700]);
initIABW71(s[4701]);
initIABM71(s[4702]);
initIAT72(s[4703]);
initIAP72(s[4704]);
initIAA72(s[4705]);
initIAA72WL(s[4706]);
initIAA72WU(s[4707]);
initIAA72WE(s[4708]);
initIAA72WR(s[4709]);
initIAA72FL(s[4710]);
initIAA72FU(s[4711]);
initIAA72FE(s[4712]);
initIAA72FR(s[4713]);
initIAA72ML(s[4714]);
initIAA72MU(s[4715]);
initIAA72ME(s[4716]);
initIAA72MR(s[4717]);
initIAA72YL(s[4718]);
initIAA72YU(s[4719]);
initIAA72YE(s[4720]);
initIAA72YR(s[4721]);
initIAA72OL(s[4722]);
initIAA72OU(s[4723]);
initIAA72OE(s[4724]);
initIAA72OR(s[4725]);
initIAB72(s[4726]);
initIABW72(s[4727]);
initIABM72(s[4728]);
initIAFUEL(s[4729]);
initIASI01(s[4730]);
initIASI02(s[4731]);
initIASI03(s[4732]);
initIASI04(s[4733]);
initIASI05(s[4734]);
initIASI06(s[4735]);
initIASI07(s[4736]);
initIASI08(s[4737]);
initIASI09(s[4738]);
initIASI10(s[4739]);
initIASI11(s[4740]);
initIASAVA(s[4741]);
initIASAVAL(s[4742]);
initIASAVAU(s[4743]);
initIASAVAE(s[4744]);
initIASAVAR(s[4745]);
initIASINT(s[4746]);
initIASINTL(s[4747]);
initIASINTU(s[4748]);
initIASINTE(s[4749]);
initIASINTR(s[4750]);
initIANS(s[4751]);
initIANSL(s[4752]);
initIANSU(s[4753]);
initIANSE(s[4754]);
initIANSR(s[4755]);
initIANSI(s[4756]);
initIANSIL(s[4757]);
initIANSIU(s[4758]);
initIANSIE(s[4759]);
initIANSIR(s[4760]);
initIANPB(s[4761]);
initIANPBL(s[4762]);
initIANPBU(s[4763]);
initIANPBE(s[4764]);
initIANPBR(s[4765]);
initIANPBP(s[4766]);
initIANPBPL(s[4767]);
initIANPBPU(s[4768]);
initIANPBPE(s[4769]);
initIANPBPR(s[4770]);
initIATI(s[4771]);
initIATIL(s[4772]);
initIATIU(s[4773]);
initIATIE(s[4774]);
initIATIR(s[4775]);
initIATII(s[4776]);
initIATIIL(s[4777]);
initIATIIU(s[4778]);
initIATIIE(s[4779]);
initIATIIR(s[4780]);
initIAISA1(s[4781]);
initIAISA2(s[4782]);
initIAISA3(s[4783]);
initIACISA(s[4784]);
initIACISAL(s[4785]);
initIACISAU(s[4786]);
initIACISAE(s[4787]);
initIACISAR(s[4788]);
initIALISA(s[4789]);
initIALISAL(s[4790]);
initIALISAU(s[4791]);
initIALISAE(s[4792]);
initIALISAR(s[4793]);
initIASISA(s[4794]);
initIASISAL(s[4795]);
initIASISAU(s[4796]);
initIASISAE(s[4797]);
initIASISAR(s[4798]);
initIAISAD(s[4799]);
initIAISADL(s[4800]);
initIAISADU(s[4801]);
initIAISADE(s[4802]);
initIAISADR(s[4803]);
initIAIP(s[4804]);
initIAIPL(s[4805]);
initIAIPU(s[4806]);
initIAIPE(s[4807]);
initIAIPR(s[4808]);
initIAIPI(s[4809]);
initIAIPIL(s[4810]);
initIAIPIU(s[4811]);
initIAIPIE(s[4812]);
initIAIPIR(s[4813]);
initIASSS(s[4814]);
initIASSSL(s[4815]);
initIASSSU(s[4816]);
initIASSSE(s[4817]);
initIASSSR(s[4818]);
initIASSSI(s[4819]);
initIASSSIL(s[4820]);
initIASSSIU(s[4821]);
initIASSSIE(s[4822]);
initIASSSIR(s[4823]);
initIASHTY1(s[4824]);
initIASHTY2(s[4825]);
initIASHTY3(s[4826]);
initIASHTY4(s[4827]);
initIADENAT(s[4828]);
initIADEMUT(s[4829]);
initIAUIT(s[4830]);
initIAUITL(s[4831]);
initIAUITU(s[4832]);
initIAUITE(s[4833]);
initIAUITR(s[4834]);
initIAUITI(s[4835]);
initIAUITIL(s[4836]);
initIAUITIU(s[4837]);
initIAUITIE(s[4838]);
initIAUITIR(s[4839]);
initIABG(s[4840]);
initIABGL(s[4841]);
initIABGU(s[4842]);
initIABGE(s[4843]);
initIABGR(s[4844]);
initIABGI(s[4845]);
initIABGIL(s[4846]);
initIABGIU(s[4847]);
initIABGIE(s[4848]);
initIABGIR(s[4849]);
initIASIO(s[4850]);
initIASIOL(s[4851]);
initIASIOU(s[4852]);
initIASIOE(s[4853]);
initIASIOR(s[4854]);
initIASIOI(s[4855]);
initIASIOIL(s[4856]);
initIASIOIU(s[4857]);
initIASIOIE(s[4858]);
initIASIOIR(s[4859]);
initIALI(s[4860]);
initIALIW(s[4861]);
initIALIYA(s[4862]);
initIALIYAL(s[4863]);
initIALIYAU(s[4864]);
initIALIYAE(s[4865]);
initIALIYAR(s[4866]);
initIALIPA(s[4867]);
initIALIPAL(s[4868]);
initIALIPAU(s[4869]);
initIALIPAE(s[4870]);
initIALIPAR(s[4871]);
initIASC(s[4872]);
initIASCA(s[4873]);
initIASCAL(s[4874]);
initIASCAU(s[4875]);
initIASCAE(s[4876]);
initIASCAR(s[4877]);
initIADOC(s[4878]);
initIAINTA(s[4879]);
initIAPROP1(s[4880]);
initIAPROP2(s[4881]);
initIAPROP3(s[4882]);
initIAPROP4(s[4883]);
initIAPROP5(s[4884]);
initIAPROP6(s[4885]);
initIAHOME(s[4886]);
initIAHOMEL(s[4887]);
initIAHOMEU(s[4888]);
initIAHOMEE(s[4889]);
initIAHOMER(s[4890]);
initIAIR(s[4891]);
initIAIRA(s[4892]);
initIAIRAL(s[4893]);
initIAIRAU(s[4894]);
initIAIRAE(s[4895]);
initIAIRAR(s[4896]);
initIAFBPS(s[4897]);
initIAFBPSL(s[4898]);
initIAFBPSU(s[4899]);
initIAFBPSE(s[4900]);
initIAFBPSR(s[4901]);
initIAFBPR(s[4902]);
initIAFBA(s[4903]);
initIAFBAL(s[4904]);
initIAFBAU(s[4905]);
initIAFBAE(s[4906]);
initIAFBAR(s[4907]);
initIAOASA(s[4908]);
initIAOASAL(s[4909]);
initIAOASAU(s[4910]);
initIAOASAE(s[4911]);
initIAOASAR(s[4912]);
initIAREGP(s[4913]);
initIAPAY(s[4914]);
initIAPAYR(s[4915]);
initIAPYRC(s[4916]);
initIAREGO(s[4917]);
initIAREGM(s[4918]);
initIARGWL(s[4919]);
initIARGWU(s[4920]);
initIARGWE(s[4921]);
initIARGWR(s[4922]);
initIARGFL(s[4923]);
initIARGFU(s[4924]);
initIARGFE(s[4925]);
initIARGFR(s[4926]);
initIARGML(s[4927]);
initIARGMU(s[4928]);
initIARGME(s[4929]);
initIARGMR(s[4930]);
initIARGYL(s[4931]);
initIARGYU(s[4932]);
initIARGYE(s[4933]);
initIARGYR(s[4934]);
initIARGOL(s[4935]);
initIARGOU(s[4936]);
initIARGOE(s[4937]);
initIARGOR(s[4938]);
initIAREGYR(s[4939]);
initIARGMW(s[4940]);
initIARMWA(s[4941]);
initIAOTHP(s[4942]);
initIAPAY2(s[4943]);
initIAPAYR2(s[4944]);
initIAPYR2C(s[4945]);
initIAREGO2(s[4946]);
initIAREGM2(s[4947]);
initIARG2WL(s[4948]);
initIARG2WU(s[4949]);
initIARG2WE(s[4950]);
initIARG2WR(s[4951]);
initIARG2FL(s[4952]);
initIARG2FU(s[4953]);
initIARG2FE(s[4954]);
initIARG2FR(s[4955]);
initIARG2ML(s[4956]);
initIARG2MU(s[4957]);
initIARG2ME(s[4958]);
initIARG2MR(s[4959]);
initIARG2YL(s[4960]);
initIARG2YU(s[4961]);
initIARG2YE(s[4962]);
initIARG2YR(s[4963]);
initIARG2OL(s[4964]);
initIARG2OU(s[4965]);
initIARG2OE(s[4966]);
initIARG2OR(s[4967]);
initIARGYR2(s[4968]);
initIARGM(s[4969]);
initIARMWA2(s[4970]);
initIAOTHP2(s[4971]);
initIAPAR(s[4972]);
initIAPS(s[4973]);
initIAPR(s[4974]);
initIAPRC(s[4975]);
initIAPF(s[4976]);
initIAPAM2(s[4977]);
initIAPA2WL(s[4978]);
initIAPA2WU(s[4979]);
initIAPA2WE(s[4980]);
initIAPA2WR(s[4981]);
initIAPA2FL(s[4982]);
initIAPA2FU(s[4983]);
initIAPA2FE(s[4984]);
initIAPA2FR(s[4985]);
initIAPA2ML(s[4986]);
initIAPA2MU(s[4987]);
initIAPA2ME(s[4988]);
initIAPA2MR(s[4989]);
initIAPA2YL(s[4990]);
initIAPA2YU(s[4991]);
initIAPA2YE(s[4992]);
initIAPA2YR(s[4993]);
initIAPA2OL(s[4994]);
initIAPA2OU(s[4995]);
initIAPA2OE(s[4996]);
initIAPA2OR(s[4997]);
initIARGYRP(s[4998]);
initIARGMWP(s[4999]);
}
public void init_5000_5999(String line) {
initIARMWPA(s[5000]);
initIAMRP(s[5001]);
initIAPK1(s[5002]);
initIAPK2(s[5003]);
initIAPK3(s[5004]);
initIAPK4(s[5005]);
initIAPKZM1(s[5006]);
initIAPKZM2(s[5007]);
initIAPKZM3(s[5008]);
initIAPKZM4(s[5009]);
initIAPKM1(s[5010]);
initIAPKM2(s[5011]);
initIAPKM3(s[5012]);
initIAPKM4(s[5013]);
initIAPKM5(s[5014]);
initIAPKM6(s[5015]);
initIAPKM7(s[5016]);
initIAPKM8(s[5017]);
initIAPKM1L(s[5018]);
initIAPKM1U(s[5019]);
initIAPKM1E(s[5020]);
initIAPKM1R(s[5021]);
initIAPKM2L(s[5022]);
initIAPKM2U(s[5023]);
initIAPKM2E(s[5024]);
initIAPKM2R(s[5025]);
initIAPKM3L(s[5026]);
initIAPKM3U(s[5027]);
initIAPKM3E(s[5028]);
initIAPKM3R(s[5029]);
initIAPKM4L(s[5030]);
initIAPKM4U(s[5031]);
initIAPKM4E(s[5032]);
initIAPKM4R(s[5033]);
initIAPKM5L(s[5034]);
initIAPKM5U(s[5035]);
initIAPKM5E(s[5036]);
initIAPKM5R(s[5037]);
initIAPKM6L(s[5038]);
initIAPKM6U(s[5039]);
initIAPKM6E(s[5040]);
initIAPKM6R(s[5041]);
initIAPKM7L(s[5042]);
initIAPKM7U(s[5043]);
initIAPKM7E(s[5044]);
initIAPKM7R(s[5045]);
initIAPKM8L(s[5046]);
initIAPKM8U(s[5047]);
initIAPKM8E(s[5048]);
initIAPKM8R(s[5049]);
initIADEBT(s[5050]);
initIADEBM(s[5051]);
initIADEBML(s[5052]);
initIADEBMU(s[5053]);
initIADEBME(s[5054]);
initIADEBMR(s[5055]);
initIAOWE(s[5056]);
initIAOWEM(s[5057]);
initIAOWEML(s[5058]);
initIAOWEMU(s[5059]);
initIAOWEME(s[5060]);
initIAOWEMR(s[5061]);
initIAREGR(s[5062]);
initIAREGRP(s[5063]);
initIAREP(s[5064]);
initIAREPWL(s[5065]);
initIAREPWU(s[5066]);
initIAREPWE(s[5067]);
initIAREPWR(s[5068]);
initIAREPFL(s[5069]);
initIAREPFU(s[5070]);
initIAREPFE(s[5071]);
initIAREPFR(s[5072]);
initIAREPML(s[5073]);
initIAREPMU(s[5074]);
initIAREPME(s[5075]);
initIAREPMR(s[5076]);
initIAREPYL(s[5077]);
initIAREPYU(s[5078]);
initIAREPYE(s[5079]);
initIAREPYR(s[5080]);
initIAREPOL(s[5081]);
initIAREPOU(s[5082]);
initIAREPOE(s[5083]);
initIAREPOR(s[5084]);
initIALOAN1(s[5085]);
initIALOAN2(s[5086]);
initIALOAN3(s[5087]);
initIALOAN4(s[5088]);
initIALOAM(s[5089]);
initIALOAML(s[5090]);
initIALOAMU(s[5091]);
initIALOAME(s[5092]);
initIALOAMR(s[5093]);
initIALREP(s[5094]);
initIALRE(s[5095]);
initIALREWL(s[5096]);
initIALREWU(s[5097]);
initIALREWE(s[5098]);
initIALREWR(s[5099]);
initIALREFL(s[5100]);
initIALREFU(s[5101]);
initIALREFE(s[5102]);
initIALREFR(s[5103]);
initIALREML(s[5104]);
initIALREMU(s[5105]);
initIALREME(s[5106]);
initIALREMR(s[5107]);
initIALREYL(s[5108]);
initIALREYU(s[5109]);
initIALREYE(s[5110]);
initIALREYR(s[5111]);
initIALREOL(s[5112]);
initIALREOU(s[5113]);
initIALREOE(s[5114]);
initIALREOR(s[5115]);
initIAJNT(s[5116]);
initIAAM(s[5117]);
initIAAML(s[5118]);
initIAAMU(s[5119]);
initIAAME(s[5120]);
initIAAMR(s[5121]);
initIAFCON(s[5122]);
initIAORGF(s[5123]);
initIAORGFC(s[5124]);
initIAFIND(s[5125]);
initIAFINDC(s[5126]);
initIAPYW(s[5127]);
initIAERN(s[5128]);
initIAEARL(s[5129]);
initIAEARU(s[5130]);
initIAEARE(s[5131]);
initIAEARR(s[5132]);
initIAPY(s[5133]);
initIAERN2(s[5134]);
initIAEAR2L(s[5135]);
initIAEAR2U(s[5136]);
initIAEAR2E(s[5137]);
initIAEAR2R(s[5138]);
initIAPYW3(s[5139]);
initIAERN3(s[5140]);
initIAEAR3L(s[5141]);
initIAEAR3U(s[5142]);
initIAEAR3E(s[5143]);
initIAEAR3R(s[5144]);
initIAPYW4(s[5145]);
initIAERN4(s[5146]);
initIAEAR4L(s[5147]);
initIAEAR4U(s[5148]);
initIAEAR4E(s[5149]);
initIAEAR4R(s[5150]);
initIAPYW5(s[5151]);
initIAERN5(s[5152]);
initIAEAR5L(s[5153]);
initIAEAR5U(s[5154]);
initIAEAR5E(s[5155]);
initIAEAR5R(s[5156]);
initIAPYW6(s[5157]);
initIAERN6(s[5158]);
initIAEAR6L(s[5159]);
initIAEAR6U(s[5160]);
initIAEAR6E(s[5161]);
initIAEAR6R(s[5162]);
initIAPYW7(s[5163]);
initIAERN7(s[5164]);
initIAEAR7L(s[5165]);
initIAEAR7U(s[5166]);
initIAEAR7E(s[5167]);
initIAEAR7R(s[5168]);
initIAPYW8(s[5169]);
initIAERN8(s[5170]);
initIAEAR8L(s[5171]);
initIAEAR8U(s[5172]);
initIAEAR8E(s[5173]);
initIAEAR8R(s[5174]);
initIAPYW9(s[5175]);
initIAERN9(s[5176]);
initIAPAY9L(s[5177]);
initIAPAY9U(s[5178]);
initIAPAY9E(s[5179]);
initIAPAY9R(s[5180]);
initIAPYW10(s[5181]);
initIAERN10(s[5182]);
initIAPAY0L(s[5183]);
initIAPAY0U(s[5184]);
initIAPAY0E(s[5185]);
initIAPAY0R(s[5186]);
initIAREC(s[5187]);
initIARECL(s[5188]);
initIARECU(s[5189]);
initIARECE(s[5190]);
initIARECR(s[5191]);
initIAOM(s[5192]);
initIAOMM(s[5193]);
initIAOMML(s[5194]);
initIAOMMU(s[5195]);
initIAOMME(s[5196]);
initIAOMMR(s[5197]);
initIADATM(s[5198]);
initIADATY(s[5199]);
initHOPID(s[5200]);
initHOASK(s[5201]);
initHOELI(s[5202]);
initHOWHO(s[5203]);
initHOWHN01(s[5204]);
initHOWHN02(s[5205]);
initHOWHN03(s[5206]);
initHOWHN04(s[5207]);
initHOWHN05(s[5208]);
initHOBAS(s[5209]);
initHOBP(s[5210]);
initHOBA(s[5211]);
initHOBAWL(s[5212]);
initHOBAWU(s[5213]);
initHOBAWE(s[5214]);
initHOBAWR(s[5215]);
initHOBAFL(s[5216]);
initHOBAFU(s[5217]);
initHOBAFE(s[5218]);
initHOBAFR(s[5219]);
initHOBAML(s[5220]);
initHOBAMU(s[5221]);
initHOBAME(s[5222]);
initHOBAMR(s[5223]);
initHOBAYL(s[5224]);
initHOBAYU(s[5225]);
initHOBAYE(s[5226]);
initHOBAYR(s[5227]);
initHOBAOL(s[5228]);
initHOBAOU(s[5229]);
initHOBAOE(s[5230]);
initHOBAOR(s[5231]);
initHOBAS2(s[5232]);
initHOBP2(s[5233]);
initHOBA2(s[5234]);
initHOBA2WL(s[5235]);
initHOBA2WU(s[5236]);
initHOBA2WE(s[5237]);
initHOBA2WR(s[5238]);
initHOBA2FL(s[5239]);
initHOBA2FU(s[5240]);
initHOBA2FE(s[5241]);
initHOBA2FR(s[5242]);
initHOBA2ML(s[5243]);
initHOBA2MU(s[5244]);
initHOBA2ME(s[5245]);
initHOBA2MR(s[5246]);
initHOBA2YL(s[5247]);
initHOBA2YU(s[5248]);
initHOBA2YE(s[5249]);
initHOBA2YR(s[5250]);
initHOBA2OL(s[5251]);
initHOBA2OU(s[5252]);
initHOBA2OE(s[5253]);
initHOBA2OR(s[5254]);
initHOBAS3(s[5255]);
initHOBP3(s[5256]);
initHOBA3(s[5257]);
initHOBA3WL(s[5258]);
initHOBA3WU(s[5259]);
initHOBA3WE(s[5260]);
initHOBA3WR(s[5261]);
initHOBA3FL(s[5262]);
initHOBA3FU(s[5263]);
initHOBA3FE(s[5264]);
initHOBA3FR(s[5265]);
initHOBA3ML(s[5266]);
initHOBA3MU(s[5267]);
initHOBA3ME(s[5268]);
initHOBA3MR(s[5269]);
initHOBA3YL(s[5270]);
initHOBA3YU(s[5271]);
initHOBA3YE(s[5272]);
initHOBA3YR(s[5273]);
initHOBA3OL(s[5274]);
initHOBA3OU(s[5275]);
initHOBA3OE(s[5276]);
initHOBA3OR(s[5277]);
initHOBAS4(s[5278]);
initHOBP4(s[5279]);
initHOBA4(s[5280]);
initHOBA4WL(s[5281]);
initHOBA4WU(s[5282]);
initHOBA4WE(s[5283]);
initHOBA4WR(s[5284]);
initHOBA4FL(s[5285]);
initHOBA4FU(s[5286]);
initHOBA4FE(s[5287]);
initHOBA4FR(s[5288]);
initHOBA4ML(s[5289]);
initHOBA4MU(s[5290]);
initHOBA4ME(s[5291]);
initHOBA4MR(s[5292]);
initHOBA4YL(s[5293]);
initHOBA4YU(s[5294]);
initHOBA4YE(s[5295]);
initHOBA4YR(s[5296]);
initHOBA4OL(s[5297]);
initHOBA4OU(s[5298]);
initHOBA4OE(s[5299]);
initHOBA4OR(s[5300]);
initHOBAS5(s[5301]);
initHOBP5(s[5302]);
initHOBA5(s[5303]);
initHOBA5WL(s[5304]);
initHOBA5WU(s[5305]);
initHOBA5WE(s[5306]);
initHOBA5WR(s[5307]);
initHOBA5FL(s[5308]);
initHOBA5FU(s[5309]);
initHOBA5FE(s[5310]);
initHOBA5FR(s[5311]);
initHOBA5ML(s[5312]);
initHOBA5MU(s[5313]);
initHOBA5ME(s[5314]);
initHOBA5MR(s[5315]);
initHOBA5YL(s[5316]);
initHOBA5YU(s[5317]);
initHOBA5YE(s[5318]);
initHOBA5YR(s[5319]);
initHOBA5OL(s[5320]);
initHOBA5OU(s[5321]);
initHOBA5OE(s[5322]);
initHOBA5OR(s[5323]);
initHOBAS6(s[5324]);
initHOBP6(s[5325]);
initHOBA6(s[5326]);
initHOBA6WL(s[5327]);
initHOBA6WU(s[5328]);
initHOBA6WE(s[5329]);
initHOBA6WR(s[5330]);
initHOBA6FL(s[5331]);
initHOBA6FU(s[5332]);
initHOBA6FE(s[5333]);
initHOBA6FR(s[5334]);
initHOBA6ML(s[5335]);
initHOBA6MU(s[5336]);
initHOBA6ME(s[5337]);
initHOBA6MR(s[5338]);
initHOBA6YL(s[5339]);
initHOBA6YU(s[5340]);
initHOBA6YE(s[5341]);
initHOBA6YR(s[5342]);
initHOBA6OL(s[5343]);
initHOBA6OU(s[5344]);
initHOBA6OE(s[5345]);
initHOBA6OR(s[5346]);
initHOBAS7(s[5347]);
initHOBP7(s[5348]);
initHOBA7(s[5349]);
initHOBA7WL(s[5350]);
initHOBA7WU(s[5351]);
initHOBA7WE(s[5352]);
initHOBA7WR(s[5353]);
initHOBA7FL(s[5354]);
initHOBA7FU(s[5355]);
initHOBA7FE(s[5356]);
initHOBA7FR(s[5357]);
initHOBA7ML(s[5358]);
initHOBA7MU(s[5359]);
initHOBA7ME(s[5360]);
initHOBA7MR(s[5361]);
initHOBA7YL(s[5362]);
initHOBA7YU(s[5363]);
initHOBA7YE(s[5364]);
initHOBA7YR(s[5365]);
initHOBA7OL(s[5366]);
initHOBA7OU(s[5367]);
initHOBA7OE(s[5368]);
initHOBA7OR(s[5369]);
initHOBAS8(s[5370]);
initHOBP8(s[5371]);
initHOBA8(s[5372]);
initHOBA8WL(s[5373]);
initHOBA8WU(s[5374]);
initHOBA8WE(s[5375]);
initHOBA8WR(s[5376]);
initHOBA8FL(s[5377]);
initHOBA8FU(s[5378]);
initHOBA8FE(s[5379]);
initHOBA8FR(s[5380]);
initHOBA8ML(s[5381]);
initHOBA8MU(s[5382]);
initHOBA8ME(s[5383]);
initHOBA8MR(s[5384]);
initHOBA8YL(s[5385]);
initHOBA8YU(s[5386]);
initHOBA8YE(s[5387]);
initHOBA8YR(s[5388]);
initHOBA8OL(s[5389]);
initHOBA8OU(s[5390]);
initHOBA8OE(s[5391]);
initHOBA8OR(s[5392]);
initHOBAS9(s[5393]);
initHOBP9(s[5394]);
initHOBA9(s[5395]);
initHOBA9WL(s[5396]);
initHOBA9WU(s[5397]);
initHOBA9WE(s[5398]);
initHOBA9WR(s[5399]);
initHOBA9FL(s[5400]);
initHOBA9FU(s[5401]);
initHOBA9FE(s[5402]);
initHOBA9FR(s[5403]);
initHOBA9ML(s[5404]);
initHOBA9MU(s[5405]);
initHOBA9ME(s[5406]);
initHOBA9MR(s[5407]);
initHOBA9YL(s[5408]);
initHOBA9YU(s[5409]);
initHOBA9YE(s[5410]);
initHOBA9YR(s[5411]);
initHOBA9OL(s[5412]);
initHOBA9OU(s[5413]);
initHOBA9OE(s[5414]);
initHOBA9OR(s[5415]);
initHOTENUN(s[5416]);
initHOTENST(s[5417]);
initHOTENU(s[5418]);
initHOJOB(s[5419]);
initHOLAND(s[5420]);
initHOFURN(s[5421]);
initHOPART(s[5422]);
initHPOPR(s[5423]);
initHOPERI(s[5424]);
initHORENT(s[5425]);
initHORENWL(s[5426]);
initHORENWU(s[5427]);
initHORENWE(s[5428]);
initHORENWR(s[5429]);
initHORENFL(s[5430]);
initHORENFU(s[5431]);
initHORENFE(s[5432]);
initHORENFR(s[5433]);
initHORENML(s[5434]);
initHORENMU(s[5435]);
initHORENME(s[5436]);
initHORENMR(s[5437]);
initHORENYL(s[5438]);
initHORENYU(s[5439]);
initHORENYE(s[5440]);
initHORENYR(s[5441]);
initHORENOL(s[5442]);
initHORENOU(s[5443]);
initHORENOE(s[5444]);
initHORENOR(s[5445]);
initHOINCL1(s[5446]);
initHOINCL2(s[5447]);
initHOINCL3(s[5448]);
initHOINCL4(s[5449]);
initHOINCL5(s[5450]);
initHOINCA1(s[5451]);
initHOINCA2(s[5452]);
initHOINCA3(s[5453]);
initHOINCA4(s[5454]);
initHOINCA5(s[5455]);
initHOINAM1(s[5456]);
initHOINAM2(s[5457]);
initHOINAM3(s[5458]);
initHOINAM4(s[5459]);
initHOINAM5(s[5460]);
initHOHBEN(s[5461]);
initHORHB(s[5462]);
initHOHBCK(s[5463]);
initHOREBA(s[5464]);
initHOREBP(s[5465]);
initHOREBWL(s[5466]);
initHOREBWU(s[5467]);
initHOREBWE(s[5468]);
initHOREBWR(s[5469]);
initHOREBFL(s[5470]);
initHOREBFU(s[5471]);
initHOREBFE(s[5472]);
initHOREBFR(s[5473]);
initHOREBML(s[5474]);
initHOREBMU(s[5475]);
initHOREBME(s[5476]);
initHOREBMR(s[5477]);
initHOREBYL(s[5478]);
initHOREBYU(s[5479]);
initHOREBYE(s[5480]);
initHOREBYR(s[5481]);
initHOREBOL(s[5482]);
initHOREBOU(s[5483]);
initHOREBOE(s[5484]);
initHOREBOR(s[5485]);
initHOHBP(s[5486]);
initHOHBA(s[5487]);
initHOHBAWL(s[5488]);
initHOHBAWU(s[5489]);
initHOHBAWE(s[5490]);
initHOHBAWR(s[5491]);
initHOHBAFL(s[5492]);
initHOHBAFU(s[5493]);
initHOHBAFE(s[5494]);
initHOHBAFR(s[5495]);
initHOHBAML(s[5496]);
initHOHBAMU(s[5497]);
initHOHBAME(s[5498]);
initHOHBAMR(s[5499]);
initHOHBAYL(s[5500]);
initHOHBAYU(s[5501]);
initHOHBAYE(s[5502]);
initHOHBAYR(s[5503]);
initHOHBAOL(s[5504]);
initHOHBAOU(s[5505]);
initHOHBAOE(s[5506]);
initHOHBAOR(s[5507]);
initHOHB1(s[5508]);
initHOHB2(s[5509]);
initHOHB3(s[5510]);
initHOHBM1(s[5511]);
initHOHBM2(s[5512]);
initHOHBM3(s[5513]);
initHOYEAR(s[5514]);
initHOPAY(s[5515]);
initHOPAYL(s[5516]);
initHOPAYU(s[5517]);
initHOPAYE(s[5518]);
initHOPAYR(s[5519]);
initHORTB(s[5520]);
initHORTBE(s[5521]);
initHOEVM(s[5522]);
initHOORM(s[5523]);
initHOSELLP(s[5524]);
initHOSELLL(s[5525]);
initHOSELLU(s[5526]);
initHOSELLE(s[5527]);
initHOSELLR(s[5528]);
initHOOUTM(s[5529]);
initHOMNEWN(s[5530]);
initHOMMISN(s[5531]);
initHOMREP(s[5532]);
initHOMREPL(s[5533]);
initHOMREPU(s[5534]);
initHOMREPE(s[5535]);
initHOMREPR(s[5536]);
initHOINC1(s[5537]);
initHOINC2(s[5538]);
initHOINC3(s[5539]);
initHOINC4(s[5540]);
initHOINCM1(s[5541]);
initHOINCM2(s[5542]);
initHOINCM3(s[5543]);
initHOINCM4(s[5544]);
initHOINCC(s[5545]);
initHOEVRE(s[5546]);
initHORINC1(s[5547]);
initHORINM1(s[5548]);
initHORMOL(s[5549]);
initHORMOLL(s[5550]);
initHORMOLU(s[5551]);
initHORMOLE(s[5552]);
initHORMOLR(s[5553]);
initHORINM(s[5554]);
initHORINML(s[5555]);
initHORINMU(s[5556]);
initHORINME(s[5557]);
initHORINMR(s[5558]);
initHORPAY(s[5559]);
initHORPM(s[5560]);
initHORPML(s[5561]);
initHORPMU(s[5562]);
initHORPME(s[5563]);
initHORPMR(s[5564]);
initHOMINC(s[5565]);
initHOMINCL(s[5566]);
initHOMINCU(s[5567]);
initHOMINCE(s[5568]);
initHOMINCR(s[5569]);
initHORMS(s[5570]);
initHORRM(s[5571]);
initHORRML(s[5572]);
initHORRMU(s[5573]);
initHORRME(s[5574]);
initHORRMR(s[5575]);
initHORFEE1(s[5576]);
initHORFEE2(s[5577]);
initHORFEP1(s[5578]);
initHORFEP2(s[5579]);
initHOALF1(s[5580]);
initHOALF2(s[5581]);
initHOALFM1(s[5582]);
initHOALFM2(s[5583]);
initHOALF1L(s[5584]);
initHOALF1U(s[5585]);
initHOALF1R(s[5586]);
initHOALF1T(s[5587]);
initHOALF2L(s[5588]);
initHOALF2U(s[5589]);
initHOALF2R(s[5590]);
initHOALF2T(s[5591]);
initHOALI1(s[5592]);
initHOALI2(s[5593]);
initHORPOS(s[5594]);
initHORPOF(s[5595]);
initHORMU(s[5596]);
initHORMUWL(s[5597]);
initHORMUWU(s[5598]);
initHORMUWE(s[5599]);
initHORMUWR(s[5600]);
initHORMUFL(s[5601]);
initHORMUFU(s[5602]);
initHORMUFE(s[5603]);
initHORMUFR(s[5604]);
initHORMUML(s[5605]);
initHORMUMU(s[5606]);
initHORMUME(s[5607]);
initHORMUMR(s[5608]);
initHORMUYL(s[5609]);
initHORMUYU(s[5610]);
initHORMUYE(s[5611]);
initHORMUYR(s[5612]);
initHORMUOL(s[5613]);
initHORMUOU(s[5614]);
initHORMUOE(s[5615]);
initHORMUOR(s[5616]);
initHORPC(s[5617]);
initHORPCM(s[5618]);
initHORPCML(s[5619]);
initHORPCMU(s[5620]);
initHORPCME(s[5621]);
initHORPCMR(s[5622]);
initHORPOSO(s[5623]);
initHORPOFO(s[5624]);
initHORMUO(s[5625]);
initHORMOWL(s[5626]);
initHORMOWU(s[5627]);
initHORMOWE(s[5628]);
initHORMOWR(s[5629]);
initHORMOFL(s[5630]);
initHORMOFU(s[5631]);
initHORMOFE(s[5632]);
initHORMOFR(s[5633]);
initHORMOML(s[5634]);
initHORMOMU(s[5635]);
initHORMOME(s[5636]);
initHORMOMR(s[5637]);
initHORMOYL(s[5638]);
initHORMOYU(s[5639]);
initHORMOYE(s[5640]);
initHORMOYR(s[5641]);
initHORMOOL(s[5642]);
initHORMOOU(s[5643]);
initHORMOOE(s[5644]);
initHORMOOR(s[5645]);
initHOOLD(s[5646]);
initHODIFF(s[5647]);
initHODIFFT(s[5648]);
initHODOC(s[5649]);
initHOINTA(s[5650]);
initHORET(s[5651]);
initHOMOVE(s[5652]);
initHORMV1(s[5653]);
initHORMV2(s[5654]);
initHORMV3(s[5655]);
initHORMV4(s[5656]);
initHORMVM1(s[5657]);
initHORMVM2(s[5658]);
initHORMVM3(s[5659]);
initHORMVM4(s[5660]);
initHORMAIN(s[5661]);
initHORMVA1(s[5662]);
initHORMVA2(s[5663]);
initHORMVA3(s[5664]);
initHORMVA4(s[5665]);
initHORMAM1(s[5666]);
initHORMAM2(s[5667]);
initHORMAM3(s[5668]);
initHORMAM4(s[5669]);
initHOROOM(s[5670]);
initHOADP1(s[5671]);
initHOADP2(s[5672]);
initHOADP3(s[5673]);
initHOADP4(s[5674]);
initHOADP5(s[5675]);
initHOADP6(s[5676]);
initHOADP7(s[5677]);
initHOADP8(s[5678]);
initHOADP9(s[5679]);
initHOADP10(s[5680]);
initHOPRB1(s[5681]);
initHOPRB2(s[5682]);
initHOPRB3(s[5683]);
initHOPRB4(s[5684]);
initHOPRB5(s[5685]);
initHOPRB6(s[5686]);
initHOPRB7(s[5687]);
initHOPRB8(s[5688]);
initHOPRB9(s[5689]);
initHOPRB10(s[5690]);
initHOPRM1(s[5691]);
initHOPRM2(s[5692]);
initHOPRM3(s[5693]);
initHOPRM4(s[5694]);
initHOPRM5(s[5695]);
initHOPRM6(s[5696]);
initHOPRM7(s[5697]);
initHOPRM8(s[5698]);
initHOPRM9(s[5699]);
initHOPRM10(s[5700]);
initHOHAV1(s[5701]);
initHOHAV2(s[5702]);
initHOHAV3(s[5703]);
initHOHAV4(s[5704]);
initHOHAV5(s[5705]);
initHOHAV6(s[5706]);
initHOHAV7(s[5707]);
initHOHAV8(s[5708]);
initHOHAV9(s[5709]);
initHOHAV10(s[5710]);
initHOHAV11(s[5711]);
initHOHAV12(s[5712]);
initHOHVB1(s[5713]);
initHOHVB2(s[5714]);
initHOHVB3(s[5715]);
initHOHVB4(s[5716]);
initHOHVB5(s[5717]);
initHOHVB6(s[5718]);
initHOHVB7(s[5719]);
initHOHVB8(s[5720]);
initHOHVB9(s[5721]);
initHOHVB10(s[5722]);
initHOHVB11(s[5723]);
initHOHVB12(s[5724]);
initHOHV01(s[5725]);
initHOHV02(s[5726]);
initHOHV03(s[5727]);
initHOHV04(s[5728]);
initHOHV05(s[5729]);
initHOHV06(s[5730]);
initHOHV07(s[5731]);
initHOHV08(s[5732]);
initHOHV09(s[5733]);
initHOHV10(s[5734]);
initHOHV11(s[5735]);
initHOHV12(s[5736]);
initHOHV01L(s[5737]);
initHOHV01U(s[5738]);
initHOHV01E(s[5739]);
initHOHV01R(s[5740]);
initHOHV02L(s[5741]);
initHOHV02U(s[5742]);
initHOHV02E(s[5743]);
initHOHV02R(s[5744]);
initHOHV03L(s[5745]);
initHOHV03U(s[5746]);
initHOHV03E(s[5747]);
initHOHV03R(s[5748]);
initHOHV04L(s[5749]);
initHOHV04U(s[5750]);
initHOHV04E(s[5751]);
initHOHV04R(s[5752]);
initHOHV05L(s[5753]);
initHOHV05U(s[5754]);
initHOHV05E(s[5755]);
initHOHV05R(s[5756]);
initHOHV06L(s[5757]);
initHOHV06U(s[5758]);
initHOHV06E(s[5759]);
initHOHV06R(s[5760]);
initHOHV07L(s[5761]);
initHOHV07U(s[5762]);
initHOHV07E(s[5763]);
initHOHV07R(s[5764]);
initHOHV08L(s[5765]);
initHOHV08U(s[5766]);
initHOHV08E(s[5767]);
initHOHV08R(s[5768]);
initHOHV09L(s[5769]);
initHOHV09U(s[5770]);
initHOHV09E(s[5771]);
initHOHV09R(s[5772]);
initHOHV10L(s[5773]);
initHOHV10U(s[5774]);
initHOHV10E(s[5775]);
initHOHV10R(s[5776]);
initHOHV11L(s[5777]);
initHOHV11U(s[5778]);
initHOHV11E(s[5779]);
initHOHV11R(s[5780]);
initHOHV12L(s[5781]);
initHOHV12U(s[5782]);
initHOHV12E(s[5783]);
initHOHV12R(s[5784]);
initHOFOOD(s[5785]);
initHOFOODL(s[5786]);
initHOFOODU(s[5787]);
initHOFOODE(s[5788]);
initHOFOODR(s[5789]);
initHOOUTF(s[5790]);
initHOOUTFL(s[5791]);
initHOOUTFU(s[5792]);
initHOOUTFE(s[5793]);
initHOOUTFR(s[5794]);
initHOMEAL(s[5795]);
initHOMOFT(s[5796]);
initHOCL(s[5797]);
initHOCLL(s[5798]);
initHOCLU(s[5799]);
initHOCLE(s[5800]);
initHOCLR(s[5801]);
initHOLEIS(s[5802]);
initHOLEISL(s[5803]);
initHOLEISU(s[5804]);
initHOLEISE(s[5805]);
initHOLEISR(s[5806]);
initHOTRAN(s[5807]);
initHOTRANL(s[5808]);
initHOTRANU(s[5809]);
initHOTRANE(s[5810]);
initHOTRANR(s[5811]);
initHOCENH(s[5812]);
initHOCENP(s[5813]);
initHOOHEA1(s[5814]);
initHOOHEA2(s[5815]);
initHOOHEA3(s[5816]);
initHOOHEM1(s[5817]);
initHOOHEM2(s[5818]);
initHOOHEM3(s[5819]);
initHOFUEL1(s[5820]);
initHOFUEL2(s[5821]);
initHOFUEL3(s[5822]);
initHOFUEL4(s[5823]);
initHOFUEL5(s[5824]);
initHOFSUP(s[5825]);
initHOFTOG(s[5826]);
initHOFPAY(s[5827]);
initHOFD(s[5828]);
initHOFDM(s[5829]);
initHOFDML(s[5830]);
initHOFDMU(s[5831]);
initHOFDME(s[5832]);
initHOFDMR(s[5833]);
initHOFDQ(s[5834]);
initHOFDQL(s[5835]);
initHOFDQU(s[5836]);
initHOFDQE(s[5837]);
initHOFDQR(s[5838]);
initHOFB(s[5839]);
initHOFBMW(s[5840]);
initHOFBMWL(s[5841]);
initHOFBMWU(s[5842]);
initHOFBMWE(s[5843]);
initHOFBMWR(s[5844]);
initHOFBMS(s[5845]);
initHOFBMSL(s[5846]);
initHOFBMSU(s[5847]);
initHOFBMSE(s[5848]);
initHOFBMSR(s[5849]);
initHOFBQW(s[5850]);
initHOFBQWL(s[5851]);
initHOFBQWU(s[5852]);
initHOFBQWE(s[5853]);
initHOFBQWR(s[5854]);
initHOFBQS(s[5855]);
initHOFBQSL(s[5856]);
initHOFBQSU(s[5857]);
initHOFBQSE(s[5858]);
initHOFBQSR(s[5859]);
initHOFPW(s[5860]);
initHOFPWL(s[5861]);
initHOFPWU(s[5862]);
initHOFPWE(s[5863]);
initHOFPWR(s[5864]);
initHOFPS(s[5865]);
initHOFPSL(s[5866]);
initHOFPSU(s[5867]);
initHOFPSE(s[5868]);
initHOFPSR(s[5869]);
initHOFOW(s[5870]);
initHOFOWL(s[5871]);
initHOFOWU(s[5872]);
initHOFOWE(s[5873]);
initHOFOWR(s[5874]);
initHOFOS(s[5875]);
initHOFOSL(s[5876]);
initHOFOSU(s[5877]);
initHOFOSE(s[5878]);
initHOFOSR(s[5879]);
initHOFSP(s[5880]);
initHOFSW(s[5881]);
initHOFSWL(s[5882]);
initHOFSWU(s[5883]);
initHOFSWE(s[5884]);
initHOFSWR(s[5885]);
initHOFSM(s[5886]);
initHOFSML(s[5887]);
initHOFSMU(s[5888]);
initHOFSME(s[5889]);
initHOFSMR(s[5890]);
initHOFSQ(s[5891]);
initHOFSQL(s[5892]);
initHOFSQU(s[5893]);
initHOFSQE(s[5894]);
initHOFSQR(s[5895]);
initHOGPAY(s[5896]);
initHOGD(s[5897]);
initHOGDM(s[5898]);
initHOGDML(s[5899]);
initHOGDMU(s[5900]);
initHOGDME(s[5901]);
initHOGDMR(s[5902]);
initHOGDQ(s[5903]);
initHOGDQL(s[5904]);
initHOGDQU(s[5905]);
initHOGDQE(s[5906]);
initHOGDQR(s[5907]);
initHOGBP(s[5908]);
initHOGBMW(s[5909]);
initHOGBMWL(s[5910]);
initHOGBMWU(s[5911]);
initHOGBMWE(s[5912]);
initHOGBMWR(s[5913]);
initHOGBMS(s[5914]);
initHOGBMSL(s[5915]);
initHOGBMSU(s[5916]);
initHOGBMSE(s[5917]);
initHOGBMSR(s[5918]);
initHOGBQW(s[5919]);
initHOGBQWL(s[5920]);
initHOGBQWU(s[5921]);
initHOGBQWE(s[5922]);
initHOGBQWR(s[5923]);
initHOGBQS(s[5924]);
initHOGBQSL(s[5925]);
initHOGBQSU(s[5926]);
initHOGBQSE(s[5927]);
initHOGBQSR(s[5928]);
initHOGPW(s[5929]);
initHOGPWL(s[5930]);
initHOGPWU(s[5931]);
initHOGPWE(s[5932]);
initHOGPWR(s[5933]);
initHOGPS(s[5934]);
initHOGPSL(s[5935]);
initHOGPSU(s[5936]);
initHOGPSE(s[5937]);
initHOGPSR(s[5938]);
initHOGOW(s[5939]);
initHOGOWL(s[5940]);
initHOGOWU(s[5941]);
initHOGOWE(s[5942]);
initHOGOWR(s[5943]);
initHOGOS(s[5944]);
initHOGOSL(s[5945]);
initHOGOSU(s[5946]);
initHOGOSE(s[5947]);
initHOGOSR(s[5948]);
initHOEPAY(s[5949]);
initHOED(s[5950]);
initHOEDM(s[5951]);
initHOEDML(s[5952]);
initHOEDMU(s[5953]);
initHOEDME(s[5954]);
initHOEDMR(s[5955]);
initHOEDQ(s[5956]);
initHOEDQL(s[5957]);
initHOEDQU(s[5958]);
initHOEDQE(s[5959]);
initHOEDQR(s[5960]);
initHOEB(s[5961]);
initHOEBMW(s[5962]);
initHOEBMWL(s[5963]);
initHOEBMWU(s[5964]);
initHOEBMWE(s[5965]);
initHOEBMWR(s[5966]);
initHOEBMS(s[5967]);
initHOEBMSL(s[5968]);
initHOEBMSU(s[5969]);
initHOEBMSE(s[5970]);
initHOEBMSR(s[5971]);
initHOEBQW(s[5972]);
initHOEBQWL(s[5973]);
initHOEBQWU(s[5974]);
initHOEBQWE(s[5975]);
initHOEBQWR(s[5976]);
initHOEBQS(s[5977]);
initHOEBQSL(s[5978]);
initHOEBQSU(s[5979]);
initHOEBQSE(s[5980]);
initHOEBQSR(s[5981]);
initHOEPW(s[5982]);
initHOEPWL(s[5983]);
initHOEPWU(s[5984]);
initHOEPWE(s[5985]);
initHOEPWR(s[5986]);
initHOEPS(s[5987]);
initHOEPSL(s[5988]);
initHOEPSU(s[5989]);
initHOEPSE(s[5990]);
initHOEPSR(s[5991]);
initHOEOW(s[5992]);
initHOEOWL(s[5993]);
initHOEOWU(s[5994]);
initHOEOWE(s[5995]);
initHOEOWR(s[5996]);
initHOEOS(s[5997]);
initHOEOSL(s[5998]);
initHOEOSU(s[5999]);
}
public void init_6000_6999(String line) {
initHOEOSE(s[6000]);
initHOEOSR(s[6001]);
initHOFCW(s[6002]);
initHOFCWL(s[6003]);
initHOFCWU(s[6004]);
initHOFCWE(s[6005]);
initHOFCWR(s[6006]);
initHOFCS(s[6007]);
initHOFCSL(s[6008]);
initHOFCSU(s[6009]);
initHOFCSE(s[6010]);
initHOFCSR(s[6011]);
initHOFPGW(s[6012]);
initHOFPGWL(s[6013]);
initHOFPGWU(s[6014]);
initHOFPGWE(s[6015]);
initHOFPGWR(s[6016]);
initHOFPGS(s[6017]);
initHOFPGSL(s[6018]);
initHOFPGSU(s[6019]);
initHOFPGSE(s[6020]);
initHOFPGSR(s[6021]);
initHOFOIW(s[6022]);
initHOFOIWL(s[6023]);
initHOFOIWU(s[6024]);
initHOFOIWE(s[6025]);
initHOFOIWR(s[6026]);
initHOFOIS(s[6027]);
initHOFOISL(s[6028]);
initHOFOISU(s[6029]);
initHOFOISE(s[6030]);
initHOFOISR(s[6031]);
initHOFWW(s[6032]);
initHOFWWL(s[6033]);
initHOFWWU(s[6034]);
initHOFWWE(s[6035]);
initHOFWWR(s[6036]);
initHOFWS(s[6037]);
initHOFWSL(s[6038]);
initHOFWSU(s[6039]);
initHOFWSE(s[6040]);
initHOFWSR(s[6041]);
initHOFUEZ1(s[6042]);
initHOFUEZ2(s[6043]);
initHOFXW(s[6044]);
initHOFXWL(s[6045]);
initHOFXWU(s[6046]);
initHOFXWE(s[6047]);
initHOFXWR(s[6048]);
initHOFXS(s[6049]);
initHOFXSL(s[6050]);
initHOFXSU(s[6051]);
initHOFXSE(s[6052]);
initHOFXSR(s[6053]);
initHOVEH(s[6054]);
initHOCC01(s[6055]);
initHOCC02(s[6056]);
initHOCC03(s[6057]);
initHOCC04(s[6058]);
initHOCC05(s[6059]);
initHOCC06(s[6060]);
initHOCC07(s[6061]);
initHOCC08(s[6062]);
initHOCC09(s[6063]);
initHOCC10(s[6064]);
initHOCC11(s[6065]);
initHOCC12(s[6066]);
initHOCC13(s[6067]);
initHOCC14(s[6068]);
initHOCC15(s[6069]);
initHOCC16(s[6070]);
initHOCC17(s[6071]);
initHOCC18(s[6072]);
initHOCC19(s[6073]);
initHOCC20(s[6074]);
initHOVST(s[6075]);
initHOVW(s[6076]);
initHOVAG(s[6077]);
initHOVYR(s[6078]);
initHOVLR(s[6079]);
initHOVER(s[6080]);
initHOVNR(s[6081]);
initHOVNO(s[6082]);
initHOVO11(s[6083]);
initHOVO12(s[6084]);
initHOVNW(s[6085]);
initHOVST2(s[6086]);
initHOV(s[6087]);
initHOVAG2(s[6088]);
initHOVYR2(s[6089]);
initHOVLR2(s[6090]);
initHOVER2(s[6091]);
initHOVNR2(s[6092]);
initHOVNO2(s[6093]);
initHOVO21(s[6094]);
initHOVO22(s[6095]);
initHOVN(s[6096]);
initHOVST3(s[6097]);
initHOVW3(s[6098]);
initHOVAG3(s[6099]);
initHOVYR3(s[6100]);
initHOVLR3(s[6101]);
initHOVER3(s[6102]);
initHOVNR3(s[6103]);
initHOVNO3(s[6104]);
initHOVO31(s[6105]);
initHOVO32(s[6106]);
initHOVNW3(s[6107]);
initHOVST4(s[6108]);
initHOVW4(s[6109]);
initHOVAG4(s[6110]);
initHOVYR4(s[6111]);
initHOVLR4(s[6112]);
initHOVER4(s[6113]);
initHOVNR4(s[6114]);
initHOVNO4(s[6115]);
initHOVO41(s[6116]);
initHOVO42(s[6117]);
initHOVNW4(s[6118]);
initHOVST5(s[6119]);
initHOVW5(s[6120]);
initHOVAG5(s[6121]);
initHOVYR5(s[6122]);
initHOVLR5(s[6123]);
initHOVER5(s[6124]);
initHOVNR5(s[6125]);
initHOVNO5(s[6126]);
initHOVO51(s[6127]);
initHOVO52(s[6128]);
initHOVNW5(s[6129]);
initHOVST6(s[6130]);
initHOVW6(s[6131]);
initHOVAG6(s[6132]);
initHOVYR6(s[6133]);
initHOVLR6(s[6134]);
initHOVER6(s[6135]);
initHOVNR6(s[6136]);
initHOVNO6(s[6137]);
initHOVO61(s[6138]);
initHOVO62(s[6139]);
initHOVNW6(s[6140]);
initHOVST7(s[6141]);
initHOVW7(s[6142]);
initHOVAG7(s[6143]);
initHOVYR7(s[6144]);
initHOVLR7(s[6145]);
initHOVER7(s[6146]);
initHOVNR7(s[6147]);
initHOVNO7(s[6148]);
initHOVO71(s[6149]);
initHOVO72(s[6150]);
initHOVNW7(s[6151]);
initHOVST8(s[6152]);
initHOVW8(s[6153]);
initHOVAG8(s[6154]);
initHOVYR8(s[6155]);
initHOVLR8(s[6156]);
initHOVER8(s[6157]);
initHOVNR8(s[6158]);
initHOVNO8(s[6159]);
initHOVO81(s[6160]);
initHOVO82(s[6161]);
initHOVNW8(s[6162]);
initHOVST9(s[6163]);
initHOVW9(s[6164]);
initHOVAG9(s[6165]);
initHOVYR9(s[6166]);
initHOVLR9(s[6167]);
initHOVER9(s[6168]);
initHOVNR9(s[6169]);
initHOVNO9(s[6170]);
initHOVO91(s[6171]);
initHOVO92(s[6172]);
initHOVNW9(s[6173]);
initHOVST10(s[6174]);
initHOVW10(s[6175]);
initHOVAG10(s[6176]);
initHOVYR10(s[6177]);
initHOVLR10(s[6178]);
initHOVER10(s[6179]);
initHOVNR10(s[6180]);
initHOVNO10(s[6181]);
initHOVO101(s[6182]);
initHOVO102(s[6183]);
initHOVNW10(s[6184]);
initHOVST11(s[6185]);
initHOVW11(s[6186]);
initHOVAG11(s[6187]);
initHOVYR11(s[6188]);
initHOVLR11(s[6189]);
initHOVER11(s[6190]);
initHOVNR11(s[6191]);
initHOVNO11(s[6192]);
initHOVO111(s[6193]);
initHOVO112(s[6194]);
initHOVNW11(s[6195]);
initHOVST12(s[6196]);
initHOVW12(s[6197]);
initHOVAG12(s[6198]);
initHOVYR12(s[6199]);
initHOVLR12(s[6200]);
initHOVER12(s[6201]);
initHOVNR12(s[6202]);
initHOVNO12(s[6203]);
initHOVO121(s[6204]);
initHOVO122(s[6205]);
initHOVNW12(s[6206]);
initHOVST13(s[6207]);
initHOVW13(s[6208]);
initHOVAG13(s[6209]);
initHOVYR13(s[6210]);
initHOVLR13(s[6211]);
initHOVER13(s[6212]);
initHOVNR13(s[6213]);
initHOVNO13(s[6214]);
initHOVO131(s[6215]);
initHOVO132(s[6216]);
initHOVNW13(s[6217]);
initHOVST14(s[6218]);
initHOVW14(s[6219]);
initHOVAG14(s[6220]);
initHOVYR14(s[6221]);
initHOVLR14(s[6222]);
initHOVER14(s[6223]);
initHOVNR14(s[6224]);
initHOVNO14(s[6225]);
initHOVO141(s[6226]);
initHOVO142(s[6227]);
initHOVNW14(s[6228]);
initHOVST15(s[6229]);
initHOVW15(s[6230]);
initHOVAG15(s[6231]);
initHOVYR15(s[6232]);
initHOVLR15(s[6233]);
initHOVER15(s[6234]);
initHOVNR15(s[6235]);
initHOVNO15(s[6236]);
initHOVO151(s[6237]);
initHOVO152(s[6238]);
initHOVNW15(s[6239]);
initHOVST16(s[6240]);
initHOVW16(s[6241]);
initHOVAG16(s[6242]);
initHOVYR16(s[6243]);
initHOVLR16(s[6244]);
initHOVER16(s[6245]);
initHOVNR16(s[6246]);
initHOVNO16(s[6247]);
initHOVO161(s[6248]);
initHOVO162(s[6249]);
initHOVNW16(s[6250]);
initHOVEHX(s[6251]);
initCFMETM(s[6252]);
initCFMETMT(s[6253]);
initCFDATD(s[6254]);
initCFDATM(s[6255]);
initCFDATY(s[6256]);
initCFDAY(s[6257]);
initCFDSCR(s[6258]);
initCFTEST(s[6259]);
initCFWRDS(s[6260]);
initCFLISEN(s[6261]);
initCFANI(s[6262]);
initCFMEM(s[6263]);
initCFMEMS(s[6264]);
initCFPASCR(s[6265]);
initCFLISD(s[6266]);
initCFLITSK(s[6267]);
initCFLITOC(s[6268]);
initCFLITB(s[6269]);
initCFLITC(s[6270]);
initCFLITD(s[6271]);
initCFLITE(s[6272]);
initCFWHO1(s[6273]);
initCFWHO2(s[6274]);
initCFWHO3(s[6275]);
initCFWHO4(s[6276]);
initCFIMP(s[6277]);
initCFWHZ1(s[6278]);
initCFWHZ2(s[6279]);
initCFWHZ3(s[6280]);
initNNCORRE(s[6281]);
initNNMISSE(s[6282]);
initNNROW(s[6283]);
initNNCLM(s[6284]);
initNROWCL(s[6285]);
initEXRAIN(s[6286]);
initEXMOVHA(s[6287]);
initEXMOVNB(s[6288]);
initEXLO80(s[6289]);
initEXPW(s[6290]);
initEXPWF(s[6291]);
initEXHLIM(s[6292]);
initEXRSLF(s[6293]);
initEXAINH(s[6294]);
initEXCINH(s[6295]);
initEXINHE(s[6296]);
initEXCIN(s[6297]);
initEXCAIN(s[6298]);
initEXCPIN(s[6299]);
initEXHVR(s[6300]);
initEXHVA(s[6301]);
initEXPLAN(s[6302]);
initEXRELA(s[6303]);
initEXRELB(s[6304]);
initEXRELC(s[6305]);
initEXRELD(s[6306]);
initEXRELE1(s[6307]);
initEXRELE2(s[6308]);
initEXRELE3(s[6309]);
initEXRELE4(s[6310]);
initEXRELE5(s[6311]);
initEXRELE6(s[6312]);
initEXRELE7(s[6313]);
initEXRELE8(s[6314]);
initEXRELE9(s[6315]);
initEXPOSA1(s[6316]);
initEXPOSA2(s[6317]);
initEXPOSA3(s[6318]);
initEXPOSA4(s[6319]);
initEXPOSA5(s[6320]);
initEXPOSA6(s[6321]);
initEXPOSA7(s[6322]);
initEXNEGA1(s[6323]);
initEXNEGA2(s[6324]);
initEXNEGA3(s[6325]);
initEXNEGA4(s[6326]);
initEXNEGA5(s[6327]);
initEXNEGA6(s[6328]);
initEXNEGA7(s[6329]);
initERCAA(s[6330]);
initERCAB1(s[6331]);
initERCAB2(s[6332]);
initERCAB3(s[6333]);
initERCAB4(s[6334]);
initERCAB5(s[6335]);
initERCAM01(s[6336]);
initERCAM02(s[6337]);
initERCAM03(s[6338]);
initERCAM04(s[6339]);
initERCAM05(s[6340]);
initERCANU1(s[6341]);
initERCANU2(s[6342]);
initERCANU3(s[6343]);
initERCANU4(s[6344]);
initERCANU5(s[6345]);
initERCANU6(s[6346]);
initERCANU7(s[6347]);
initERCANU8(s[6348]);
initERTOTCN(s[6349]);
initERCALIV(s[6350]);
initERCADP1(s[6351]);
initERCADP2(s[6352]);
initERCADP3(s[6353]);
initERCADP4(s[6354]);
initERCADP5(s[6355]);
initERCAC(s[6356]);
initERMOTC1(s[6357]);
initERMOTC2(s[6358]);
initERMOTC3(s[6359]);
initERMOTC4(s[6360]);
initERMOTC5(s[6361]);
initERMOTC6(s[6362]);
initERMOTC7(s[6363]);
initERMOTV1(s[6364]);
initERMOTV2(s[6365]);
initERMOTV3(s[6366]);
initERMOTV4(s[6367]);
initERMOTV5(s[6368]);
initERMOTV6(s[6369]);
initERMOTV7(s[6370]);
initERMOTV8(s[6371]);
initERVOLA(s[6372]);
initERVOLB(s[6373]);
initERCARA(s[6374]);
initERCARB(s[6375]);
initPSCEDA(s[6376]);
initPSCEDB(s[6377]);
initPSCEDC(s[6378]);
initPSCEDD(s[6379]);
initPSCEDE(s[6380]);
initPSCEDF(s[6381]);
initPSCEDG(s[6382]);
initPSCEDH(s[6383]);
initTOTPSC(s[6384]);
initPSFEEL(s[6385]);
initPSPSYA(s[6386]);
initPSPSYB(s[6387]);
initPSPSYC(s[6388]);
initPSPSYD(s[6389]);
initPSPSYE(s[6390]);
initFQETHNR(s[6391]);
initFQCBTHR(s[6392]);
initFQCENG(s[6393]);
initFQMQUA(s[6394]);
initFQAQUA(s[6395]);
initFQQUAL1(s[6396]);
initFQQUAL2(s[6397]);
initFQQUAL3(s[6398]);
initFQQUZM1(s[6399]);
initFQQUZM2(s[6400]);
initFQEND(s[6401]);
initFQHELP(s[6402]);
initOUTSC(s[6403]);
initSCPT02(s[6404]);
initSCPT03(s[6405]);
initSCPT04(s[6406]);
initSCPT05(s[6407]);
initSCPT06(s[6408]);
initSCPT07(s[6409]);
initSCPT08(s[6410]);
initSCPT09(s[6411]);
initSCORG01(s[6412]);
initSCORG02(s[6413]);
initSCORG03(s[6414]);
initSCORG04(s[6415]);
initSCORG05(s[6416]);
initSCORG06(s[6417]);
initSCORG07(s[6418]);
initSCORG08(s[6419]);
initSCORG09(s[6420]);
initSCORGN(s[6421]);
initSCACCA(s[6422]);
initSCACCB(s[6423]);
initSCACCC(s[6424]);
initSCACCD(s[6425]);
initSCACCE(s[6426]);
initSCACCF(s[6427]);
initSCACCG(s[6428]);
initSCACCH(s[6429]);
initSCACCI(s[6430]);
initSCACCJ(s[6431]);
initSCACTA(s[6432]);
initSCACTB(s[6433]);
initSCACTC(s[6434]);
initSCACTD(s[6435]);
initSCMOREA(s[6436]);
initSCMOREB(s[6437]);
initSCMOREC(s[6438]);
initSCMORED(s[6439]);
initSCQOLA(s[6440]);
initSCQOLB(s[6441]);
initSCQOLC(s[6442]);
initSCQOLD(s[6443]);
initSCQOLE(s[6444]);
initSCQOLF(s[6445]);
initSCQOLG(s[6446]);
initSCQOLH(s[6447]);
initSCQOLI(s[6448]);
initSCQOLJ(s[6449]);
initSCQOLK(s[6450]);
initSCQOLL(s[6451]);
initSCQOLM(s[6452]);
initSCQOLN(s[6453]);
initSCQOLO(s[6454]);
initSCQOLP(s[6455]);
initSCQOLQ(s[6456]);
initSCQOLR(s[6457]);
initSCQOLS(s[6458]);
initSCFEELA(s[6459]);
initSCFEELB(s[6460]);
initSCFEELC(s[6461]);
initSCFEELD(s[6462]);
initSCLIFEA(s[6463]);
initSCLIFEB(s[6464]);
initSCLIFEC(s[6465]);
initSCLIFED(s[6466]);
initSCLIFEE(s[6467]);
initSCDCA(s[6468]);
initSCDCC(s[6469]);
initSCDCD(s[6470]);
initSCDCE(s[6471]);
initSCDCG(s[6472]);
initSCPTR(s[6473]);
initSCPTRA(s[6474]);
initSCPTRB(s[6475]);
initSCPTRC(s[6476]);
initSCPTRD(s[6477]);
initSCPTRE(s[6478]);
initSCPTRF(s[6479]);
initSCPTRG(s[6480]);
initSCCHD(s[6481]);
initSCCHDA(s[6482]);
initSCCHDB(s[6483]);
initSCCHDC(s[6484]);
initSCCHDD(s[6485]);
initSCCHDE(s[6486]);
initSCCHDF(s[6487]);
initSCCHDG(s[6488]);
initSCCHDH(s[6489]);
initSCCHDI(s[6490]);
initSCCHDM(s[6491]);
initSCFAM(s[6492]);
initSCFAMA(s[6493]);
initSCFAMB(s[6494]);
initSCFAMC(s[6495]);
initSCFAMD(s[6496]);
initSCFAME(s[6497]);
initSCFAMF(s[6498]);
initSCFAMG(s[6499]);
initSCFAMH(s[6500]);
initSCFAMI(s[6501]);
initSCFAMM(s[6502]);
initSCFRD(s[6503]);
initSCFRDA(s[6504]);
initSCFRDB(s[6505]);
initSCFRDC(s[6506]);
initSCFRDD(s[6507]);
initSCFRDE(s[6508]);
initSCFRDF(s[6509]);
initSCFRDG(s[6510]);
initSCFRDH(s[6511]);
initSCFRDI(s[6512]);
initSCFRDM(s[6513]);
initSCEMPL(s[6514]);
initSCWORKA(s[6515]);
initSCWORKB(s[6516]);
initSCWORKC(s[6517]);
initSCWORKD(s[6518]);
initSCWORKE(s[6519]);
initSCWORKF(s[6520]);
initSCWORKG(s[6521]);
initSCWORKH(s[6522]);
initSCWORKI(s[6523]);
initSCWORKJ(s[6524]);
initSCWORKK(s[6525]);
initSCWORKL(s[6526]);
initSCRTAGE(s[6527]);
initSCLDDR(s[6528]);
initSCLADDC(s[6529]);
initSCOLD(s[6530]);
initSCTOBE(s[6531]);
initSCPONEG(s[6532]);
initSCEXPA(s[6533]);
initSCEXPB(s[6534]);
initSCEXPC(s[6535]);
initSCEXPD(s[6536]);
initSCEXPE(s[6537]);
initSCEXPF(s[6538]);
initSCEXPG(s[6539]);
initSCEXPH(s[6540]);
initSCEXPI(s[6541]);
initSCEXPJ(s[6542]);
initSCEXPK(s[6543]);
initSCEXPL(s[6544]);
initSCAKO(s[6545]);
initSCAL7A(s[6546]);
initSCAL7B(s[6547]);
initSCDRI(s[6548]);
initSCDRI01(s[6549]);
initSCDRI02(s[6550]);
initSCDRI03(s[6551]);
initSCDRI04(s[6552]);
initSCDRI05(s[6553]);
initSCDRI06(s[6554]);
initSCABNP(s[6555]);
initSCABNLC(s[6556]);
initSCABNSC(s[6557]);
initSCABSP(s[6558]);
initSCABSLC(s[6559]);
initSCABSSC(s[6560]);
initSCASPIR(s[6561]);
initSCASHER(s[6562]);
initSCAWIN(s[6563]);
initSCAPOPG(s[6564]);
initCONCUR(s[6565]);
initORDCON(s[6566]);
initWHOSO1(s[6567]);
initWHOSO2(s[6568]);
initWHOSO3(s[6569]);
initHHTOT(s[6570]);
initASKPX1(s[6571]);
initFUTYPE(s[6572]);
initINTDATM(s[6573]);
initINTDATY(s[6574]);
initIINTDTM(s[6575]);
initIINTDTY(s[6576]);
initINDSEX(s[6577]);
initINDOBYR(s[6578]);
initINDAGER(s[6579]);
initW1INDOUT(s[6580]);
initW1HHOUT(s[6581]);
initHSECLST(s[6582]);
initHSEINT(s[6583]);
initHSEYR(s[6584]);
initQVER(s[6585]);
initFFPROB(s[6586]);
initASTRATIF(s[6587]);
initBHEAID1(s[6588]);
initBHEAID2(s[6589]);
initBHEAID3(s[6590]);
initBHEAID4(s[6591]);
initBHEAID5(s[6592]);
initBHEOPT1(s[6593]);
initBHEOPT2(s[6594]);
initBHEOPT3(s[6595]);
initBHEOPT4(s[6596]);
initBEHDIA01(s[6597]);
initBEHDIA02(s[6598]);
initBEHDIA03(s[6599]);
initBEHDIA04(s[6600]);
initBEHDIA05(s[6601]);
initBEHDIA06(s[6602]);
initBEHDIA07(s[6603]);
initBHEAGA(s[6604]);
initBHEAGB(s[6605]);
initBHEAGC(s[6606]);
initBHEAGD(s[6607]);
initBHEAGE(s[6608]);
initBHEART1(s[6609]);
initBHEART2(s[6610]);
initBHEART3(s[6611]);
initBHEAGF(s[6612]);
initBHEAGG(s[6613]);
initBHECANA(s[6614]);
initBHEPRK(s[6615]);
initBHEAGH(s[6616]);
initBHEAGI(s[6617]);
initBHEAGJ(s[6618]);
initBHESMK(s[6619]);
initBHESKA(s[6620]);
initW2WGT(s[6621]);
initSCW2WGT(s[6622]);
initGOR(s[6623]);
initIDAUNIQ(s[6624]);
initIDAHH(s[6625]);
initPERID(s[6626]);
initCOUPID(s[6627]);
initFUTYPE(s[6628]);
initFUID(s[6629]);
initBUEQ(s[6630]);
initSINC_BU_I(s[6631]);
initSINC_BU_F(s[6632]);
initSINC_BU_T(s[6633]);
initSINC_BU_O(s[6634]);
initPPEN_BU_I(s[6635]);
initPPEN_BU_F(s[6636]);
initPPEN_BU_T(s[6637]);
initPPEN_BU_O(s[6638]);
initSPEN_R_I(s[6639]);
initSPEN_R_F(s[6640]);
initSPEN_R_T(s[6641]);
initSPEN_R_O(s[6642]);
initSPEN_P_I(s[6643]);
initSPEN_P_F(s[6644]);
initSPEN_P_T(s[6645]);
initSPEN_P_O(s[6646]);
initANIN_R_I(s[6647]);
initANIN_R_F(s[6648]);
initANIN_R_T(s[6649]);
initANIN_R_O(s[6650]);
initANIN_P_I(s[6651]);
initANIN_P_F(s[6652]);
initANIN_P_T(s[6653]);
initANIN_P_O(s[6654]);
initICB_R_I(s[6655]);
initICB_R_F(s[6656]);
initICB_R_T(s[6657]);
initICB_R_O(s[6658]);
initICB_P_I(s[6659]);
initICB_P_F(s[6660]);
initICB_P_T(s[6661]);
initICB_P_O(s[6662]);
initSDA_R_I(s[6663]);
initSDA_R_F(s[6664]);
initSDA_R_T(s[6665]);
initSDA_R_O(s[6666]);
initSDA_P_I(s[6667]);
initSDA_P_F(s[6668]);
initSDA_P_T(s[6669]);
initSDA_P_O(s[6670]);
initSSP_R_I(s[6671]);
initSSP_R_F(s[6672]);
initSSP_R_T(s[6673]);
initSSP_R_O(s[6674]);
initSSP_P_I(s[6675]);
initSSP_P_F(s[6676]);
initSSP_P_T(s[6677]);
initSSP_P_O(s[6678]);
initATTALL_R_I(s[6679]);
initATTALL_R_F(s[6680]);
initATTALL_R_T(s[6681]);
initATTALL_R_O(s[6682]);
initATTALL_P_I(s[6683]);
initATTALL_P_F(s[6684]);
initATTALL_P_T(s[6685]);
initATTALL_P_O(s[6686]);
initDLA_R_I(s[6687]);
initDLA_R_F(s[6688]);
initDLA_R_T(s[6689]);
initDLA_R_O(s[6690]);
initDLA_P_I(s[6691]);
initDLA_P_F(s[6692]);
initDLA_P_T(s[6693]);
initDLA_P_O(s[6694]);
initINDINJ_R_I(s[6695]);
initINDINJ_R_F(s[6696]);
initINDINJ_R_T(s[6697]);
initINDINJ_R_O(s[6698]);
initINDINJ_P_I(s[6699]);
initINDINJ_P_F(s[6700]);
initINDINJ_P_T(s[6701]);
initINDINJ_P_O(s[6702]);
initWAR_R_I(s[6703]);
initWAR_R_F(s[6704]);
initWAR_R_T(s[6705]);
initWAR_R_O(s[6706]);
initWAR_P_I(s[6707]);
initWAR_P_F(s[6708]);
initWAR_P_T(s[6709]);
initWAR_P_O(s[6710]);
initCARERS_R_I(s[6711]);
initCARERS_R_F(s[6712]);
initCARERS_R_T(s[6713]);
initCARERS_R_O(s[6714]);
initCARERS_P_I(s[6715]);
initCARERS_P_F(s[6716]);
initCARERS_P_T(s[6717]);
initCARERS_P_O(s[6718]);
initOTH1_R_I(s[6719]);
initOTH1_R_F(s[6720]);
initOTH1_R_T(s[6721]);
initOTH1_R_O(s[6722]);
initOTH1_P_I(s[6723]);
initOTH1_P_F(s[6724]);
initOTH1_P_T(s[6725]);
initOTH1_P_O(s[6726]);
initIS_R_I(s[6727]);
initIS_R_F(s[6728]);
initIS_R_T(s[6729]);
initIS_R_O(s[6730]);
initIS_P_I(s[6731]);
initIS_P_F(s[6732]);
initIS_P_T(s[6733]);
initIS_P_O(s[6734]);
initPC_R_I(s[6735]);
initPC_R_F(s[6736]);
initPC_R_T(s[6737]);
initPC_R_O(s[6738]);
initPC_P_I(s[6739]);
initPC_P_F(s[6740]);
initPC_P_T(s[6741]);
initPC_P_O(s[6742]);
initWTC_R_I(s[6743]);
initWTC_R_F(s[6744]);
initWTC_R_T(s[6745]);
initWTC_R_O(s[6746]);
initWTC_P_I(s[6747]);
initWTC_P_F(s[6748]);
initWTC_P_T(s[6749]);
initWTC_P_O(s[6750]);
initJSA_R_I(s[6751]);
initJSA_R_F(s[6752]);
initJSA_R_T(s[6753]);
initJSA_R_O(s[6754]);
initJSA_P_I(s[6755]);
initJSA_P_F(s[6756]);
initJSA_P_T(s[6757]);
initJSA_P_O(s[6758]);
initGALL_R_I(s[6759]);
initGALL_R_F(s[6760]);
initGALL_R_T(s[6761]);
initGALL_R_O(s[6762]);
initGALL_P_I(s[6763]);
initGALL_P_F(s[6764]);
initGALL_P_T(s[6765]);
initGALL_P_O(s[6766]);
initWIDPEN_R_I(s[6767]);
initWIDPEN_R_F(s[6768]);
initWIDPEN_R_T(s[6769]);
initWIDPEN_R_O(s[6770]);
initWIDPEN_P_I(s[6771]);
initWIDPEN_P_F(s[6772]);
initWIDPEN_P_T(s[6773]);
initWIDPEN_P_O(s[6774]);
initCB_R_I(s[6775]);
initCB_R_F(s[6776]);
initCB_R_T(s[6777]);
initCB_R_O(s[6778]);
initCB_P_I(s[6779]);
initCB_P_F(s[6780]);
initCB_P_T(s[6781]);
initCB_P_O(s[6782]);
initCTC_R_I(s[6783]);
initCTC_R_F(s[6784]);
initCTC_R_T(s[6785]);
initCTC_R_O(s[6786]);
initCTC_P_I(s[6787]);
initCTC_P_F(s[6788]);
initCTC_P_T(s[6789]);
initCTC_P_O(s[6790]);
initOTH2_R_I(s[6791]);
initOTH2_R_F(s[6792]);
initOTH2_R_T(s[6793]);
initOTH2_R_O(s[6794]);
initOTH2_P_I(s[6795]);
initOTH2_P_F(s[6796]);
initOTH2_P_T(s[6797]);
initOTH2_P_O(s[6798]);
initOTHPAY_R_I(s[6799]);
initOTHPAY_R_F(s[6800]);
initOTHPAY_R_T(s[6801]);
initOTHPAY_R_O(s[6802]);
initOTHPAY_P_I(s[6803]);
initOTHPAY_P_F(s[6804]);
initOTHPAY_P_T(s[6805]);
initOTHPAY_P_O(s[6806]);
initSAVE_BU_I(s[6807]);
initSAVE_BU_F(s[6808]);
initSAVE_BU_T(s[6809]);
initSAVE_BU_O(s[6810]);
initSAVEI_BU_I(s[6811]);
initSAVEI_BU_F(s[6812]);
initSAVEI_BU_T(s[6813]);
initSAVEI_BU_O(s[6814]);
initTESSA_BU_I(s[6815]);
initTESSA_BU_F(s[6816]);
initTESSA_BU_T(s[6817]);
initTESSA_BU_O(s[6818]);
initTESSAI_BU_I(s[6819]);
initTESSAI_BU_F(s[6820]);
initTESSAI_BU_T(s[6821]);
initTESSAI_BU_O(s[6822]);
initCASHISA_BU_I(s[6823]);
initCASHISA_BU_F(s[6824]);
initCASHISA_BU_T(s[6825]);
initCASHISA_BU_O(s[6826]);
initLISA_BU_I(s[6827]);
initLISA_BU_F(s[6828]);
initLISA_BU_T(s[6829]);
initLISA_BU_O(s[6830]);
initSHISA_BU_I(s[6831]);
initSHISA_BU_F(s[6832]);
initSHISA_BU_T(s[6833]);
initSHISA_BU_O(s[6834]);
initISAI_BU_I(s[6835]);
initISAI_BU_F(s[6836]);
initISAI_BU_T(s[6837]);
initISAI_BU_O(s[6838]);
initPRBONDS_BU_I(s[6839]);
initPRBONDS_BU_F(s[6840]);
initPRBONDS_BU_T(s[6841]);
initPRBONDS_BU_O(s[6842]);
initPRBONDSI_BU_I(s[6843]);
initPRBONDSI_BU_F(s[6844]);
initPRBONDSI_BU_T(s[6845]);
initPRBONDSI_BU_O(s[6846]);
initNSAV_BU_I(s[6847]);
initNSAV_BU_F(s[6848]);
initNSAV_BU_T(s[6849]);
initNSAV_BU_O(s[6850]);
initNSAVI_BU_I(s[6851]);
initNSAVI_BU_F(s[6852]);
initNSAVI_BU_T(s[6853]);
initNSAVI_BU_O(s[6854]);
initPEP_BU_I(s[6855]);
initPEP_BU_F(s[6856]);
initPEP_BU_T(s[6857]);
initPEP_BU_O(s[6858]);
initPEPI_BU_I(s[6859]);
initPEPI_BU_F(s[6860]);
initPEPI_BU_T(s[6861]);
initPEPI_BU_O(s[6862]);
initSHARES_BU_I(s[6863]);
initSHARES_BU_F(s[6864]);
initSHARES_BU_T(s[6865]);
initSHARES_BU_O(s[6866]);
initSHARESI_BU_I(s[6867]);
initSHARESI_BU_F(s[6868]);
initSHARESI_BU_T(s[6869]);
initSHARESI_BU_O(s[6870]);
initTRUSTS_BU_I(s[6871]);
initTRUSTS_BU_F(s[6872]);
initTRUSTS_BU_T(s[6873]);
initTRUSTS_BU_O(s[6874]);
initTRUSTSI_BU_I(s[6875]);
initTRUSTSI_BU_F(s[6876]);
initTRUSTSI_BU_T(s[6877]);
initTRUSTSI_BU_O(s[6878]);
initBONDS_BU_I(s[6879]);
initBONDS_BU_F(s[6880]);
initBONDS_BU_T(s[6881]);
initBONDS_BU_O(s[6882]);
initBONDSI_BU_I(s[6883]);
initBONDSI_BU_F(s[6884]);
initBONDSI_BU_T(s[6885]);
initBONDSI_BU_O(s[6886]);
initOTHSAV_BU_I(s[6887]);
initOTHSAV_BU_F(s[6888]);
initOTHSAV_BU_T(s[6889]);
initOTHSAV_BU_O(s[6890]);
initOTHSAVI_BU_I(s[6891]);
initOTHSAVI_BU_F(s[6892]);
initOTHSAVI_BU_T(s[6893]);
initOTHSAVI_BU_O(s[6894]);
initLISAVE_BU_I(s[6895]);
initLISAVE_BU_F(s[6896]);
initLISAVE_BU_T(s[6897]);
initLISAVE_BU_O(s[6898]);
initHOME_BU_I(s[6899]);
initHOME_BU_F(s[6900]);
initHOME_BU_T(s[6901]);
initHOME_BU_O(s[6902]);
initHOMEI_BU_I(s[6903]);
initHOMEI_BU_F(s[6904]);
initHOMEI_BU_T(s[6905]);
initHOMEI_BU_O(s[6906]);
initFARM_BU_I(s[6907]);
initFARM_BU_F(s[6908]);
initFARM_BU_T(s[6909]);
initFARM_BU_O(s[6910]);
initFARMI_BU_I(s[6911]);
initFARMI_BU_F(s[6912]);
initFARMI_BU_T(s[6913]);
initFARMI_BU_O(s[6914]);
initTOTHASS_BU_I(s[6915]);
initTOTHASS_BU_F(s[6916]);
initTOTHASS_BU_T(s[6917]);
initTOTHASS_BU_O(s[6918]);
initCCARD_BU_I(s[6919]);
initCCARD_BU_F(s[6920]);
initCCARD_BU_T(s[6921]);
initCCARD_BU_O(s[6922]);
initPRDEBT_BU_I(s[6923]);
initPRDEBT_BU_F(s[6924]);
initPRDEBT_BU_T(s[6925]);
initPRDEBT_BU_O(s[6926]);
initODEBT_BU_I(s[6927]);
initODEBT_BU_F(s[6928]);
initODEBT_BU_T(s[6929]);
initODEBT_BU_O(s[6930]);
initJNTASS_BU_I(s[6931]);
initJNTASS_BU_F(s[6932]);
initJNTASS_BU_T(s[6933]);
initJNTASS_BU_O(s[6934]);
initWPPP_BU_I(s[6935]);
initWPPP_BU_F(s[6936]);
initWPPP_BU_T(s[6937]);
initWPPP_BU_O(s[6938]);
initWPPP_R_I(s[6939]);
initWPPP_R_F(s[6940]);
initWPPP_R_T(s[6941]);
initWPPP_R_O(s[6942]);
initWPPP_P_I(s[6943]);
initWPPP_P_F(s[6944]);
initWPPP_P_T(s[6945]);
initWPPP_P_O(s[6946]);
initTHP_BU_I(s[6947]);
initTHP_BU_F(s[6948]);
initTHP_BU_T(s[6949]);
initTHP_BU_O(s[6950]);
initTHP_R_I(s[6951]);
initTHP_R_F(s[6952]);
initTHP_R_T(s[6953]);
initTHP_R_O(s[6954]);
initTHP_P_I(s[6955]);
initTHP_P_F(s[6956]);
initTHP_P_T(s[6957]);
initTHP_P_O(s[6958]);
initNETPROF_BU_I(s[6959]);
initNETPROF_BU_F(s[6960]);
initNETPROF_BU_T(s[6961]);
initNETPROF_BU_O(s[6962]);
initNETPROF_R_I(s[6963]);
initNETPROF_R_F(s[6964]);
initNETPROF_R_T(s[6965]);
initNETPROF_R_O(s[6966]);
initNETPROF_P_I(s[6967]);
initNETPROF_P_F(s[6968]);
initNETPROF_P_T(s[6969]);
initNETPROF_P_O(s[6970]);
initSEDRAW_BU_I(s[6971]);
initSEDRAW_BU_F(s[6972]);
initSEDRAW_BU_T(s[6973]);
initSEDRAW_BU_O(s[6974]);
initSEDRAW_R_I(s[6975]);
initSEDRAW_R_F(s[6976]);
initSEDRAW_R_T(s[6977]);
initSEDRAW_R_O(s[6978]);
initSEDRAW_P_I(s[6979]);
initSEDRAW_P_F(s[6980]);
initSEDRAW_P_T(s[6981]);
initSEDRAW_P_O(s[6982]);
initBUSV_BU_I(s[6983]);
initBUSV_BU_F(s[6984]);
initBUSV_BU_T(s[6985]);
initBUSV_BU_O(s[6986]);
initBUSV_R_I(s[6987]);
initBUSV_R_F(s[6988]);
initBUSV_R_T(s[6989]);
initBUSV_R_O(s[6990]);
initBUSV_P_I(s[6991]);
initBUSV_P_F(s[6992]);
initBUSV_P_T(s[6993]);
initBUSV_P_O(s[6994]);
initOJ_BU_I(s[6995]);
initOJ_BU_F(s[6996]);
initOJ_BU_T(s[6997]);
initOJ_BU_O(s[6998]);
initOJ_R_I(s[6999]);
}
public void init_7000_7999(String line) {
initOJ_R_F(s[7000]);
initOJ_R_T(s[7001]);
initOJ_R_O(s[7002]);
initOJ_P_I(s[7003]);
initOJ_P_F(s[7004]);
initOJ_P_T(s[7005]);
initOJ_P_O(s[7006]);
initOTHBUSV_BU_I(s[7007]);
initOTHBUSV_BU_F(s[7008]);
initOTHBUSV_BU_T(s[7009]);
initOTHBUSV_BU_O(s[7010]);
initOTHBUSV_R_I(s[7011]);
initOTHBUSV_R_F(s[7012]);
initOTHBUSV_R_T(s[7013]);
initOTHBUSV_R_O(s[7014]);
initOTHBUSV_P_I(s[7015]);
initOTHBUSV_P_F(s[7016]);
initOTHBUSV_P_T(s[7017]);
initOTHBUSV_P_O(s[7018]);
initHSVAL_HH_I(s[7019]);
initHSVAL_HH_F(s[7020]);
initHSVAL_HH_T(s[7021]);
initHSVAL_HH_O(s[7022]);
initHDEBT_HH_I(s[7023]);
initHDEBT_HH_F(s[7024]);
initHDEBT_HH_T(s[7025]);
initHDEBT_HH_O(s[7026]);
initTOTINC_BU_S(s[7027]);
initTOTINC_BU_F(s[7028]);
initTOTINC_BU_T(s[7029]);
initTOTINC_BU_NI2(s[7030]);
initTOTINC_BU_NI3(s[7031]);
initTOTINC_BU_NI4(s[7032]);
initEQTOTINC_BU_S(s[7033]);
initEQTOTINC_BU_F(s[7034]);
initEQTOTINC_BU_T(s[7035]);
initEQTOTINC_BU_NI2(s[7036]);
initEQTOTINC_BU_NI3(s[7037]);
initEQTOTINC_BU_NI4(s[7038]);
initEMPINC_BU_S(s[7039]);
initEMPINC_BU_F(s[7040]);
initEMPINC_BU_T(s[7041]);
initEMPINC_BU_NI2(s[7042]);
initEMPINC_BU_NI3(s[7043]);
initEMPINC_BU_NI4(s[7044]);
initEQEMPINC_BU_S(s[7045]);
initEQEMPINC_BU_F(s[7046]);
initEQEMPINC_BU_T(s[7047]);
initEQEMPINC_BU_NI2(s[7048]);
initEQEMPINC_BU_NI3(s[7049]);
initEQEMPINC_BU_NI4(s[7050]);
initEMPINC_R_S(s[7051]);
initEMPINC_R_F(s[7052]);
initEMPINC_R_T(s[7053]);
initEMPINC_R_NI2(s[7054]);
initEMPINC_R_NI3(s[7055]);
initEMPINC_R_NI4(s[7056]);
initEMPINC_P_S(s[7057]);
initEMPINC_P_F(s[7058]);
initEMPINC_P_T(s[7059]);
initEMPINC_P_NI2(s[7060]);
initEMPINC_P_NI3(s[7061]);
initEMPINC_P_NI4(s[7062]);
initSEINC_BU_S(s[7063]);
initSEINC_BU_F(s[7064]);
initSEINC_BU_T(s[7065]);
initSEINC_BU_NI2(s[7066]);
initSEINC_BU_NI3(s[7067]);
initSEINC_BU_NI4(s[7068]);
initEQSEINC_BU_S(s[7069]);
initEQSEINC_BU_F(s[7070]);
initEQSEINC_BU_T(s[7071]);
initEQSEINC_BU_NI2(s[7072]);
initEQSEINC_BU_NI3(s[7073]);
initEQSEINC_BU_NI4(s[7074]);
initSEINC_R_S(s[7075]);
initSEINC_R_F(s[7076]);
initSEINC_R_T(s[7077]);
initSEINC_R_NI2(s[7078]);
initSEINC_R_NI3(s[7079]);
initSEINC_R_NI4(s[7080]);
initSEINC_P_S(s[7081]);
initSEINC_P_F(s[7082]);
initSEINC_P_T(s[7083]);
initSEINC_P_NI2(s[7084]);
initSEINC_P_NI3(s[7085]);
initSEINC_P_NI4(s[7086]);
initPPINC_BU_S(s[7087]);
initPPINC_BU_F(s[7088]);
initPPINC_BU_T(s[7089]);
initPPINC_BU_NI2(s[7090]);
initPPINC_BU_NI3(s[7091]);
initPPINC_BU_NI4(s[7092]);
initEQPPINC_BU_S(s[7093]);
initEQPPINC_BU_F(s[7094]);
initEQPPINC_BU_T(s[7095]);
initEQPPINC_BU_NI2(s[7096]);
initEQPPINC_BU_NI3(s[7097]);
initEQPPINC_BU_NI4(s[7098]);
initPPINC_R_S(s[7099]);
initPPINC_R_F(s[7100]);
initPPINC_R_T(s[7101]);
initPPINC_R_NI2(s[7102]);
initPPINC_R_NI3(s[7103]);
initPPINC_R_NI4(s[7104]);
initPPINC_P_S(s[7105]);
initPPINC_P_F(s[7106]);
initPPINC_P_T(s[7107]);
initPPINC_P_NI2(s[7108]);
initPPINC_P_NI3(s[7109]);
initPPINC_P_NI4(s[7110]);
initSPINC_BU_S(s[7111]);
initSPINC_BU_F(s[7112]);
initSPINC_BU_T(s[7113]);
initSPINC_BU_NI2(s[7114]);
initSPINC_BU_NI3(s[7115]);
initSPINC_BU_NI4(s[7116]);
initEQSPINC_BU_S(s[7117]);
initEQSPINC_BU_F(s[7118]);
initEQSPINC_BU_T(s[7119]);
initEQSPINC_BU_NI2(s[7120]);
initEQSPINC_BU_NI3(s[7121]);
initEQSPINC_BU_NI4(s[7122]);
initSPINC_R_S(s[7123]);
initSPINC_R_F(s[7124]);
initSPINC_R_T(s[7125]);
initSPINC_R_NI2(s[7126]);
initSPINC_R_NI3(s[7127]);
initSPINC_R_NI4(s[7128]);
initSPINC_P_S(s[7129]);
initSPINC_P_F(s[7130]);
initSPINC_P_T(s[7131]);
initSPINC_P_NI2(s[7132]);
initSPINC_P_NI3(s[7133]);
initSPINC_P_NI4(s[7134]);
initBENINC_BU_S(s[7135]);
initBENINC_BU_F(s[7136]);
initBENINC_BU_T(s[7137]);
initBENINC_BU_NI2(s[7138]);
initBENINC_BU_NI3(s[7139]);
initBENINC_BU_NI4(s[7140]);
initEQBENINC_BU_S(s[7141]);
initEQBENINC_BU_F(s[7142]);
initEQBENINC_BU_T(s[7143]);
initEQBENINC_BU_NI2(s[7144]);
initEQBENINC_BU_NI3(s[7145]);
initEQBENINC_BU_NI4(s[7146]);
initBENINC_R_S(s[7147]);
initBENINC_R_F(s[7148]);
initBENINC_R_T(s[7149]);
initBENINC_R_NI2(s[7150]);
initBENINC_R_NI3(s[7151]);
initBENINC_R_NI4(s[7152]);
initBENINC_P_S(s[7153]);
initBENINC_P_F(s[7154]);
initBENINC_P_T(s[7155]);
initBENINC_P_NI2(s[7156]);
initBENINC_P_NI3(s[7157]);
initBENINC_P_NI4(s[7158]);
initASSINC_BU_S(s[7159]);
initASSINC_BU_F(s[7160]);
initASSINC_BU_T(s[7161]);
initASSINC_BU_NI2(s[7162]);
initASSINC_BU_NI3(s[7163]);
initASSINC_BU_NI4(s[7164]);
initEQASSINC_BU_S(s[7165]);
initEQASSINC_BU_F(s[7166]);
initEQASSINC_BU_T(s[7167]);
initEQASSINC_BU_NI2(s[7168]);
initEQASSINC_BU_NI3(s[7169]);
initEQASSINC_BU_NI4(s[7170]);
initOTHINC_BU_S(s[7171]);
initOTHINC_BU_F(s[7172]);
initOTHINC_BU_T(s[7173]);
initOTHINC_BU_NI2(s[7174]);
initOTHINC_BU_NI3(s[7175]);
initOTHINC_BU_NI4(s[7176]);
initEQOTHINC_BU_S(s[7177]);
initEQOTHINC_BU_F(s[7178]);
initEQOTHINC_BU_T(s[7179]);
initEQOTHINC_BU_NI2(s[7180]);
initEQOTHINC_BU_NI3(s[7181]);
initEQOTHINC_BU_NI4(s[7182]);
initOTHINC_R_S(s[7183]);
initOTHINC_R_F(s[7184]);
initOTHINC_R_T(s[7185]);
initOTHINC_R_NI2(s[7186]);
initOTHINC_R_NI3(s[7187]);
initOTHINC_R_NI4(s[7188]);
initOTHINC_P_S(s[7189]);
initOTHINC_P_F(s[7190]);
initOTHINC_P_T(s[7191]);
initOTHINC_P_NI2(s[7192]);
initOTHINC_P_NI3(s[7193]);
initOTHINC_P_NI4(s[7194]);
initSAVINGS_BU_S(s[7195]);
initSAVINGS_BU_F(s[7196]);
initSAVINGS_BU_T(s[7197]);
initSAVINGS_BU_NI2(s[7198]);
initSAVINGS_BU_NI3(s[7199]);
initSAVINGS_BU_NI4(s[7200]);
initINVESTS_BU_S(s[7201]);
initINVESTS_BU_F(s[7202]);
initINVESTS_BU_T(s[7203]);
initINVESTS_BU_NI2(s[7204]);
initINVESTS_BU_NI3(s[7205]);
initINVESTS_BU_NI4(s[7206]);
initGROSSFW_BU_S(s[7207]);
initGROSSFW_BU_F(s[7208]);
initGROSSFW_BU_T(s[7209]);
initGROSSFW_BU_NI2(s[7210]);
initGROSSFW_BU_NI3(s[7211]);
initGROSSFW_BU_NI4(s[7212]);
initDEBT_BU_S(s[7213]);
initDEBT_BU_F(s[7214]);
initDEBT_BU_T(s[7215]);
initDEBT_BU_NI2(s[7216]);
initDEBT_BU_NI3(s[7217]);
initDEBT_BU_NI4(s[7218]);
initNETFW_BU_S(s[7219]);
initNETFW_BU_F(s[7220]);
initNETFW_BU_T(s[7221]);
initNETFW_BU_NI2(s[7222]);
initNETFW_BU_NI3(s[7223]);
initNETFW_BU_NI4(s[7224]);
initNETPW_BU_S(s[7225]);
initNETPW_BU_F(s[7226]);
initNETPW_BU_T(s[7227]);
initNETPW_BU_NI2(s[7228]);
initNETPW_BU_NI3(s[7229]);
initNETPW_BU_NI4(s[7230]);
initGROSSTOTNHW_BU_S(s[7231]);
initGROSSTOTNHW_BU_F(s[7232]);
initGROSSTOTNHW_BU_T(s[7233]);
initGROSSTOTNHW_BU_NI2(s[7234]);
initGROSSTOTNHW_BU_NI3(s[7235]);
initGROSSTOTNHW_BU_NI4(s[7236]);
initNETTOTNHW_BU_S(s[7237]);
initNETTOTNHW_BU_F(s[7238]);
initNETTOTNHW_BU_T(s[7239]);
initNETTOTNHW_BU_NI2(s[7240]);
initNETTOTNHW_BU_NI3(s[7241]);
initNETTOTNHW_BU_NI4(s[7242]);
initGROSSHW_BU_S(s[7243]);
initGROSSHW_BU_F(s[7244]);
initGROSSHW_BU_T(s[7245]);
initGROSSHW_BU_NI2(s[7246]);
initGROSSHW_BU_NI3(s[7247]);
initGROSSHW_BU_NI4(s[7248]);
initNETHW_BU_S(s[7249]);
initNETHW_BU_F(s[7250]);
initNETHW_BU_T(s[7251]);
initNETHW_BU_NI2(s[7252]);
initNETHW_BU_NI3(s[7253]);
initNETHW_BU_NI4(s[7254]);
initMGDEBT_BU_S(s[7255]);
initMGDEBT_BU_F(s[7256]);
initMGDEBT_BU_T(s[7257]);
initMGDEBT_BU_NI2(s[7258]);
initMGDEBT_BU_NI3(s[7259]);
initMGDEBT_BU_NI4(s[7260]);
initNETTOTW_BU_S(s[7261]);
initNETTOTW_BU_F(s[7262]);
initNETTOTW_BU_T(s[7263]);
initNETTOTW_BU_NI2(s[7264]);
initNETTOTW_BU_NI3(s[7265]);
initNETTOTW_BU_NI4(s[7266]);
initYQ5_BU_S(s[7267]);
initYQ5_BU_F(s[7268]);
initYQ10_BU_S(s[7269]);
initYQ10_BU_F(s[7270]);
initTNHWQ5_BU_S(s[7271]);
initTNHWQ5_BU_F(s[7272]);
initTNHWQ10_BU_S(s[7273]);
initTNHWQ10_BU_F(s[7274]);
initNFWQ5_BU_S(s[7275]);
initNFWQ5_BU_F(s[7276]);
initNFWQ10_BU_S(s[7277]);
initNFWQ10_BU_F(s[7278]);
initTOTWQ5_BU_S(s[7279]);
initTOTWQ5_BU_F(s[7280]);
initTOTWQ10_BU_S(s[7281]);
initTOTWQ10_BU_F(s[7282]);
initIDAUNIQ(s[7283]);
initIDAHH(s[7284]);
initHHID(s[7285]);
initWGT(s[7286]);
initLWGT(s[7287]);
initWAVE(s[7288]);
initPERID(s[7289]);
initPERSNO(s[7290]);
initCOUPID(s[7291]);
initCOUPID_INST(s[7292]);
initXCOUPID(s[7293]);
initXCOUPID_INST(s[7294]);
initFUTYPE(s[7295]);
initFUID(s[7296]);
initFUID_INST(s[7297]);
initBUNO(s[7298]);
initCPID(s[7299]);
initIDAUNIQ_P(s[7300]);
initINTDATM(s[7301]);
initINTDATY(s[7302]);
initIINTDATM(s[7303]);
initIINTDATY(s[7304]);
initAGE(s[7305]);
initAGE_P(s[7306]);
initINDOBYR(s[7307]);
initINDOBYR_P(s[7308]);
initSEX(s[7309]);
initSEX_P(s[7310]);
initELSA(s[7311]);
initELSA_P(s[7312]);
initINST(s[7313]);
initINST_P(s[7314]);
initRESPONDED_P(s[7315]);
initDIED_P(s[7316]);
initCOUPLE(s[7317]);
initHHANSHO(s[7318]);
initIANSHO(s[7319]);
initIANSIA(s[7320]);
initNUMANSIA(s[7321]);
initNUMANSIAFU(s[7322]);
initPROXY(s[7323]);
initNONWHITE(s[7324]);
initREFRESHTYPE(s[7325]);
initNUMBUS(s[7326]);
initNUMINELIG(s[7327]);
initNSAMPMEM(s[7328]);
initHOH(s[7329]);
initRELTOHOH(s[7330]);
initHOHSP(s[7331]);
initBUHEAD(s[7332]);
initFIRSTBU(s[7333]);
initNPEOPLE(s[7334]);
initNUMHHAD(s[7335]);
initNUMBUAD(s[7336]);
initNUMBUKID(s[7337]);
initNUMHHKID(s[7338]);
initAGEBUHEAD(s[7339]);
initAGEBUSP(s[7340]);
initSEXBUHEAD(s[7341]);
initAGEHOH(s[7342]);
initSEXHOH(s[7343]);
initNUMMALE(s[7344]);
initNUMFEMALE(s[7345]);
initNUMMALEAD(s[7346]);
initNUMFEMALEAD(s[7347]);
initAGEHHCH1(s[7348]);
initAGEHHCH2(s[7349]);
initAGEHHCH3(s[7350]);
initAGEHHCH4(s[7351]);
initAGEHHCH5(s[7352]);
initAGEHHCH6(s[7353]);
initAGEHHCH7(s[7354]);
initAGEHHCH8(s[7355]);
initAGEBUCH1(s[7356]);
initAGEBUCH2(s[7357]);
initAGEBUCH3(s[7358]);
initAGEBUCH4(s[7359]);
initAGEBUCH5(s[7360]);
initAGEBUCH6(s[7361]);
initAGEBUCH7(s[7362]);
initAGEBUCH8(s[7363]);
initCHAGE1(s[7364]);
initCHSEX1(s[7365]);
initCHTYPE1(s[7366]);
initCHSTAT1(s[7367]);
initCHAGE2(s[7368]);
initCHSEX2(s[7369]);
initCHTYPE2(s[7370]);
initCHSTAT2(s[7371]);
initCHAGE3(s[7372]);
initCHSEX3(s[7373]);
initCHTYPE3(s[7374]);
initCHSTAT3(s[7375]);
initCHAGE4(s[7376]);
initCHSEX4(s[7377]);
initCHTYPE4(s[7378]);
initCHSTAT4(s[7379]);
initCHAGE5(s[7380]);
initCHSEX5(s[7381]);
initCHTYPE5(s[7382]);
initCHSTAT5(s[7383]);
initCHAGE6(s[7384]);
initCHSEX6(s[7385]);
initCHTYPE6(s[7386]);
initCHSTAT6(s[7387]);
initCHAGE7(s[7388]);
initCHSEX7(s[7389]);
initCHTYPE7(s[7390]);
initCHSTAT7(s[7391]);
initCHAGE8(s[7392]);
initCHSEX8(s[7393]);
initCHTYPE8(s[7394]);
initCHSTAT8(s[7395]);
initCHAGE9(s[7396]);
initCHSEX9(s[7397]);
initCHTYPE9(s[7398]);
initCHSTAT9(s[7399]);
initCHAGE10(s[7400]);
initCHSEX10(s[7401]);
initCHTYPE10(s[7402]);
initCHSTAT10(s[7403]);
initCHAGE11(s[7404]);
initCHSEX11(s[7405]);
initCHTYPE11(s[7406]);
initCHSTAT11(s[7407]);
initCHAGE12(s[7408]);
initCHSEX12(s[7409]);
initCHTYPE12(s[7410]);
initCHSTAT12(s[7411]);
initCHAGE13(s[7412]);
initCHSEX13(s[7413]);
initCHTYPE13(s[7414]);
initCHSTAT13(s[7415]);
initCHAGE14(s[7416]);
initCHSEX14(s[7417]);
initCHTYPE14(s[7418]);
initCHSTAT14(s[7419]);
initCHAGE15(s[7420]);
initCHSEX15(s[7421]);
initCHTYPE15(s[7422]);
initCHSTAT15(s[7423]);
initCHAGE16(s[7424]);
initCHSEX16(s[7425]);
initCHTYPE16(s[7426]);
initCHSTAT16(s[7427]);
initNGRANDCH(s[7428]);
initNGRANDCHINHH(s[7429]);
initNSIBS(s[7430]);
initFAMTYPE(s[7431]);
initBUTYPE(s[7432]);
initAGEG5(s[7433]);
initAGEG5_BU(s[7434]);
initAGEG7(s[7435]);
initAGEG7_BU(s[7436]);
initAGEG10(s[7437]);
initAGEG10_BU(s[7438]);
initAGEG3(s[7439]);
initAGEG3_BU(s[7440]);
initSPAGE(s[7441]);
initSPAGE_BU(s[7442]);
initNUMBUK013(s[7443]);
initNUMBUK1418(s[7444]);
initNUMHHK013(s[7445]);
initNUMHHK1418(s[7446]);
initBUEQ(s[7447]);
initHHEQ(s[7448]);
initTENURE(s[7449]);
initSOCRENT(s[7450]);
initNUMHHLDRSINHH(s[7451]);
initAGEHHLDR1(s[7452]);
initAGEHHLDR2(s[7453]);
initAGEHHLDR3(s[7454]);
initAGEHHLDR4(s[7455]);
initNAMEONPROP(s[7456]);
initSPNAMEONPROP(s[7457]);
initMARSTAT(s[7458]);
initHHGRIDDHWORK(s[7459]);
initHHGRIDDHWORK_P(s[7460]);
initWPACTIVE(s[7461]);
initWPACTIVE_P(s[7462]);
initWSELFD(s[7463]);
initWSELFD_P(s[7464]);
initECPOS(s[7465]);
initWORKTIME(s[7466]);
initHOURS(s[7467]);
initHOURS_AJ(s[7468]);
initEVERWORK(s[7469]);
initPP_MEM(s[7470]);
initPP_CONT(s[7471]);
initPP_NCONT(s[7472]);
initPP_OCC(s[7473]);
initPP_NOCC(s[7474]);
initPP_OCCDB(s[7475]);
initPP_NOCCDB(s[7476]);
initPP_OCCDC(s[7477]);
initPP_NOCCDC(s[7478]);
initPP_OCCNK(s[7479]);
initPP_NOCCNK(s[7480]);
initPP_PER(s[7481]);
initPP_NPER(s[7482]);
initPP_NK(s[7483]);
initPP_NNK(s[7484]);
initPP_REC(s[7485]);
initPP_NREC(s[7486]);
initPP_RR(s[7487]);
initPP_NRR(s[7488]);
initPP_MAXYRS(s[7489]);
initEDEND(s[7490]);
initEDQUAL(s[7491]);
initQUAL2(s[7492]);
initQUAL3(s[7493]);
initSCHLEAVE(s[7494]);
initQUAL2_P(s[7495]);
initQUAL3_P(s[7496]);
initSCHLEAVE_P(s[7497]);
initLACKRES(s[7498]);
initLACKRESB(s[7499]);
initINHERGT0(s[7500]);
initINHERGT0B(s[7501]);
initINHERGT10(s[7502]);
initINHERGT10B(s[7503]);
initINHERGT100(s[7504]);
initINHERGT100B(s[7505]);
initBEQUESTGT50(s[7506]);
initBEQUESTGT50B(s[7507]);
initBEQUESTGT0(s[7508]);
initBEQUESTGT0B(s[7509]);
initBEQUESTGT150(s[7510]);
initBEQUESTGT150B(s[7511]);
initEXPLIVE(s[7512]);
initEXPLIVEB(s[7513]);
initEXPLIVE75(s[7514]);
initEXPLIVE80(s[7515]);
initEXPLIVE85(s[7516]);
initEXPLIVE90(s[7517]);
initEXPLIVE95(s[7518]);
initEXPLIVE100(s[7519]);
initEXPLIVE75B(s[7520]);
initEXPLIVE80B(s[7521]);
initEXPLIVE85B(s[7522]);
initEXPLIVE90B(s[7523]);
initEXPLIVE95B(s[7524]);
initEXPLIVE100B(s[7525]);
initEXWORK(s[7526]);
initEXWORKB(s[7527]);
initEXWORK55(s[7528]);
initEXWORK55B(s[7529]);
initEXWORK60(s[7530]);
initEXWORK60B(s[7531]);
initEXWORK65(s[7532]);
initEXWORK65B(s[7533]);
initEXHLIMW(s[7534]);
initEXHLIMWB(s[7535]);
initFINDIFF(s[7536]);
initNDEPRIV(s[7537]);
initSRH_HRS(s[7538]);
initSRH_HSE(s[7539]);
initHRSFIRST(s[7540]);
initSRH3_HRS(s[7541]);
initSRH3_HSE(s[7542]);
initSRH3_HRS_P(s[7543]);
initSRH3_HSE_P(s[7544]);
initLLSILL(s[7545]);
initHLIMWRK(s[7546]);
initHLIMWRKC(s[7547]);
initHEMOBWA(s[7548]);
initHEMOBSI(s[7549]);
initHEMOBCH(s[7550]);
initHEMOBCS(s[7551]);
initHEMOBCL(s[7552]);
initHEMOBST(s[7553]);
initHEMOBRE(s[7554]);
initHEMOBPU(s[7555]);
initHEMOBLI(s[7556]);
initHEMOBPI(s[7557]);
initHEMOB96(s[7558]);
initHEADLDR(s[7559]);
initHEADLWA(s[7560]);
initHEADLBA(s[7561]);
initHEADLEA(s[7562]);
initHEADLBE(s[7563]);
initHEADLWC(s[7564]);
initHEADLMA(s[7565]);
initHEADLDA(s[7566]);
initHEADLPR(s[7567]);
initHEADLSH(s[7568]);
initHEADLPH(s[7569]);
initHEADLCO(s[7570]);
initHEADLME(s[7571]);
initHEADLHO(s[7572]);
initHEADLMO(s[7573]);
initHEADL96(s[7574]);
initSMOKER(s[7575]);
initSMOKERSTAT(s[7576]);
initMALIVE(s[7577]);
initMOTHAGE(s[7578]);
initMAGEDIED(s[7579]);
initFALIVE(s[7580]);
initFATHAGE(s[7581]);
initFAGEDIED(s[7582]);
initDIKLIVM(s[7583]);
initDIFJOBM(s[7584]);
initNRIGHT(s[7585]);
initNUMTYPE5(s[7586]);
initNUMTYPE4(s[7587]);
initNUMTYPE2(s[7588]);
initEXECNN(s[7589]);
initMEMTOT(s[7590]);
initMEMTOTB(s[7591]);
initMAXNUMTYPE5(s[7592]);
initMAXNUMTYPE4(s[7593]);
initMAXNUMTYPE2(s[7594]);
initMAXEXECNN(s[7595]);
initMAXMEMTOTB(s[7596]);
initCESD_SC(s[7597]);
initCESD_NA(s[7598]);
initNROOMS(s[7599]);
initHOOLDM(s[7600]);
initHOMOVEM(s[7601]);
initHOYEARM(s[7602]);
initHOPAYM(s[7603]);
initRPI(s[7604]);
initFOODINL(s[7605]);
initFOODINU(s[7606]);
initFOODINT(s[7607]);
initFOODOUTL(s[7608]);
initFOODOUTU(s[7609]);
initFOODOUTT(s[7610]);
initCLOTHESL(s[7611]);
initCLOTHESU(s[7612]);
initCLOTHEST(s[7613]);
initLEISUREL(s[7614]);
initLEISUREU(s[7615]);
initLEISURET(s[7616]);
initTRANSFERSL(s[7617]);
initTRANSFERSU(s[7618]);
initTRANSFERST(s[7619]);
initUSESGAS(s[7620]);
initUSESELEC(s[7621]);
initUSESCOAL(s[7622]);
initUSESPARA(s[7623]);
initUSESOIL(s[7624]);
initUSESWOOD(s[7625]);
initUSESOTHERF(s[7626]);
initGASELECT(s[7627]);
initGASELECL(s[7628]);
initGASELECU(s[7629]);
initGASELECMETH(s[7630]);
initGAST(s[7631]);
initGASL(s[7632]);
initGASU(s[7633]);
initGASMETH(s[7634]);
initELECT(s[7635]);
initELECL(s[7636]);
initELECU(s[7637]);
initELECMETH(s[7638]);
initCOALL(s[7639]);
initCOALU(s[7640]);
initCOALT(s[7641]);
initPARAL(s[7642]);
initPARAU(s[7643]);
initPARAT(s[7644]);
initOILL(s[7645]);
initOILU(s[7646]);
initOILT(s[7647]);
initWOODL(s[7648]);
initWOODU(s[7649]);
initWOODT(s[7650]);
initOTHERFL(s[7651]);
initOTHERFU(s[7652]);
initOTHERFT(s[7653]);
initGROSSRENTL(s[7654]);
initGROSSRENTU(s[7655]);
initGROSSRENTT(s[7656]);
initGETSHB(s[7657]);
initNETRENTL(s[7658]);
initNETRENTU(s[7659]);
initNETRENTT(s[7660]);
initRENTINCWA(s[7661]);
initRENTINCSE(s[7662]);
initRENTINCLA(s[7663]);
initRENTINCGA(s[7664]);
initRENTINCHE(s[7665]);
initRENTINCCO(s[7666]);
initRENTINCME(s[7667]);
initRENTINCGD(s[7668]);
initRENTINCCL(s[7669]);
initRENTINCWP(s[7670]);
initRENTINCSG(s[7671]);
initRENTINC85(s[7672]);
initMORTPAYL(s[7673]);
initMORTPAYU(s[7674]);
initMORTPAYT(s[7675]);
initMORTPAYXL(s[7676]);
initMORTPAYXU(s[7677]);
initMORTPAYXT(s[7678]);
initMORTINCPP(s[7679]);
initMORTINCBI(s[7680]);
initMORTINCPI(s[7681]);
initMORTINC85(s[7682]);
initIDAUNIQ(s[7683]);
initIDAIND(s[7684]);
initIDAHH(s[7685]);
initPENID(s[7686]);
initPENNUM(s[7687]);
initPENTYPE_WAVE2(s[7688]);
initWPSPS(s[7689]);
initWPLFTP1(s[7690]);
initWPLFTP2(s[7691]);
initWPLFTP3(s[7692]);
initWPLFTM1(s[7693]);
initWPLFTM2(s[7694]);
initWPLFTM3(s[7695]);
initWPLFTM4(s[7696]);
initWPSRUL(s[7697]);
initWPDPSN(s[7698]);
initWPDSNB(s[7699]);
initWPPSTR(s[7700]);
initWPDSNC(s[7701]);
initWPINF(s[7702]);
initWPPAY(s[7703]);
initWPPYR(s[7704]);
initWPYWL(s[7705]);
initWPYWU(s[7706]);
initWPYWE(s[7707]);
initWPYWR(s[7708]);
initWPYFL(s[7709]);
initWPYFU(s[7710]);
initWPYFE(s[7711]);
initWPYFR(s[7712]);
initWPYML(s[7713]);
initWPYMU(s[7714]);
initWPYME(s[7715]);
initWPYMR(s[7716]);
initWPYYL(s[7717]);
initWPYYU(s[7718]);
initWPYYE(s[7719]);
initWPYYR(s[7720]);
initWPYOL(s[7721]);
initWPYOU(s[7722]);
initWPYOE(s[7723]);
initWPYOR(s[7724]);
initWPTAX(s[7725]);
initWPLUPS(s[7726]);
initWPLUPA(s[7727]);
initWPLUML(s[7728]);
initWPLUMU(s[7729]);
initWPLUME(s[7730]);
initWPLUMR(s[7731]);
initWPTAKP(s[7732]);
initWPINCD(s[7733]);
initWPIDL(s[7734]);
initWPIDU(s[7735]);
initWPIDE(s[7736]);
initWPIDR(s[7737]);
initWPRGHB(s[7738]);
initWPCOS(s[7739]);
initWPYBS(s[7740]);
initWPERC(s[7741]);
initWPMC(s[7742]);
initWPMCA(s[7743]);
initWPPERC(s[7744]);
initWPMFRC(s[7745]);
initWPYCAT(s[7746]);
initWPYCA(s[7747]);
initWPMCAF(s[7748]);
initWPYFRA(s[7749]);
initWPACON(s[7750]);
initWPACOA(s[7751]);
initWPACOB(s[7752]);
initWPACOC(s[7753]);
initWPFRAS(s[7754]);
initWPCONY(s[7755]);
initWPADY(s[7756]);
initWPMMIN(s[7757]);
initWPMUC(s[7758]);
initWPAUC(s[7759]);
initWPPER(s[7760]);
initWPFRUC(s[7761]);
initWPANYC(s[7762]);
initWPACAT(s[7763]);
initWPECON(s[7764]);
initWPECNA(s[7765]);
initWPEPER(s[7766]);
initWPEFS(s[7767]);
initWPNRA(s[7768]);
initWPBTHA(s[7769]);
initWPBTHP(s[7770]);
initWPERA(s[7771]);
initWPYAER(s[7772]);
initWPDSP(s[7773]);
initWPDESPC(s[7774]);
initWPFSAP(s[7775]);
initWPFSAPC(s[7776]);
initWPPLP(s[7777]);
initWPPLPH(s[7778]);
initWPLUMP(s[7779]);
initWPLUL(s[7780]);
initWPLUU(s[7781]);
initWPLUE(s[7782]);
initWPLUR(s[7783]);
initWPPTP(s[7784]);
initWPPSAL(s[7785]);
initWPASAL(s[7786]);
initWPASALL(s[7787]);
initWPASALU(s[7788]);
initWPASALE(s[7789]);
initWPASALR(s[7790]);
initWPFSAV(s[7791]);
initWPPFVA(s[7792]);
initWPPFL(s[7793]);
initWPPFU(s[7794]);
initWPPFE(s[7795]);
initWPPFR(s[7796]);
initWPAPF(s[7797]);
initWPAPFL(s[7798]);
initWPAPFU(s[7799]);
initWPAPFE(s[7800]);
initWPAPFR(s[7801]);
initWPPTOP(s[7802]);
initWPPENB(s[7803]);
initWPPETL(s[7804]);
initWPPETU(s[7805]);
initWPPETE(s[7806]);
initWPPETR(s[7807]);
initWPPEAL(s[7808]);
initWPPEAU(s[7809]);
initWPPEAE(s[7810]);
initWPPEAR(s[7811]);
initWPCONS(s[7812]);
initWPIFS1(s[7813]);
initWPIFS2(s[7814]);
initWPIFS3(s[7815]);
initWPFINF(s[7816]);
initWPKPS(s[7817]);
initWPYPEN(s[7818]);
initWPCB(s[7819]);
initWPCBL(s[7820]);
initWPCBU(s[7821]);
initWPCBE(s[7822]);
initWPCBR(s[7823]);
initWPSRC(s[7824]);
initWPMRC(s[7825]);
initWPMRCP(s[7826]);
initWPLRCY(s[7827]);
initWPLRCM(s[7828]);
initWPLAC(s[7829]);
initWPCON(s[7830]);
initWPLPE(s[7831]);
initWPLPA(s[7832]);
initWPLPTL(s[7833]);
initWPLPTU(s[7834]);
initWPLPTE(s[7835]);
initWPLPTR(s[7836]);
initWPLPAL(s[7837]);
initWPLPAU(s[7838]);
initWPLPAE(s[7839]);
initWPLPAR(s[7840]);
initWPPLON(s[7841]);
initWPPCON(s[7842]);
initWPHCON(s[7843]);
initWPCAMT(s[7844]);
initWPCPER(s[7845]);
initWPNIFP(s[7846]);
initWPLCOY(s[7847]);
initWPLCOM(s[7848]);
initWPMCON(s[7849]);
initWPAC(s[7850]);
initWPFSC(s[7851]);
initWPNIRR(s[7852]);
initWPLASY(s[7853]);
initWPLASM(s[7854]);
initWPMLAS(s[7855]);
initWPLASP(s[7856]);
initWPRCON(s[7857]);
initWPRSC1(s[7858]);
initWPRSC2(s[7859]);
initWPRSC3(s[7860]);
initWPRSM1(s[7861]);
initWPRSM2(s[7862]);
initWPRSM3(s[7863]);
initWPCEMP(s[7864]);
initWPECPP(s[7865]);
initWPAECP(s[7866]);
initWPFSEC(s[7867]);
initWPMEC(s[7868]);
initWPAMEC(s[7869]);
initWPFSCP(s[7870]);
initWPFSCO(s[7871]);
initWPCUV(s[7872]);
initWPCUVL(s[7873]);
initWPCUVU(s[7874]);
initWPCUVE(s[7875]);
initWPCUVR(s[7876]);
initWPPEXP(s[7877]);
initWPAMOU(s[7878]);
initWPAMTL(s[7879]);
initWPAMTU(s[7880]);
initWPAMTE(s[7881]);
initWPAMTR(s[7882]);
initWPAMAL(s[7883]);
initWPAMAU(s[7884]);
initWPAMAE(s[7885]);
initWPAMAR(s[7886]);
initWPDPS(s[7887]);
initWPKP(s[7888]);
initWPKPC(s[7889]);
initWPPDES(s[7890]);
initWPOARS(s[7891]);
initWPRECN(s[7892]);
initWPDSND(s[7893]);
initWPERCD(s[7894]);
initWPLMS(s[7895]);
initWPLMA(s[7896]);
initWPLMPL(s[7897]);
initWPLMPU(s[7898]);
initWPLMPE(s[7899]);
initWPLMPR(s[7900]);
initWPTKP(s[7901]);
initWPIND(s[7902]);
initWPIDRL(s[7903]);
initWPIDRU(s[7904]);
initWPIDRE(s[7905]);
initWPIDRR(s[7906]);
initWPRECS(s[7907]);
initWPPWP(s[7908]);
initWPPWR(s[7909]);
initWPWWWL(s[7910]);
initWPWWWU(s[7911]);
initWPWWWE(s[7912]);
initWPWWWR(s[7913]);
initWPWWFL(s[7914]);
initWPWWFU(s[7915]);
initWPWWFE(s[7916]);
initWPWWFR(s[7917]);
initWPWWML(s[7918]);
initWPWWMU(s[7919]);
initWPWWME(s[7920]);
initWPWWMR(s[7921]);
initWPWWYL(s[7922]);
initWPWWYU(s[7923]);
initWPWWYE(s[7924]);
initWPWWYR(s[7925]);
initWPWWOL(s[7926]);
initWPWWOU(s[7927]);
initWPWWOE(s[7928]);
initWPWWOR(s[7929]);
initWPWTX(s[7930]);
initWPREC(s[7931]);
initWPMSC(s[7932]);
initWPDS(s[7933]);
initWPDE(s[7934]);
initWPRGH(s[7935]);
initWPRGHX(s[7936]);
initDEMPPEN(s[7937]);
initDDBDC(s[7938]);
initDCURPEN(s[7939]);
initIDAUNIQ(s[7940]);
initTOTPENW_04(s[7941]);
initSTPENW_04(s[7942]);
initBSP_04(s[7943]);
initADDPEN_04(s[7944]);
initPRIPENW_04(s[7945]);
initCURRENTDC_04(s[7946]);
initCURRENTDB_04(s[7947]);
initRETAINEDDC_04(s[7948]);
initRETAINEDDB_04(s[7949]);
initINRECEIPT_04(s[7950]);
initWIDPEN_04(s[7951]);
initTOTPENW_SPA(s[7952]);
initSTPENW_SPA(s[7953]);
initBSP_SPA(s[7954]);
initADDPEN_SPA(s[7955]);
initPRIPENW_SPA(s[7956]);
initCURRENTDC_SPA(s[7957]);
initCURRENTDB_SPA(s[7958]);
initRETAINEDDC_SPA(s[7959]);
initRETAINEDDB_SPA(s[7960]);
initINRECEIPT_SPA(s[7961]);
initWIDPEN_SPA(s[7962]);
initIFLAG_EARN(s[7963]);
initIFLAG_DCFUND(s[7964]);
initIFLAG_DBSR1(s[7965]);
initIFLAG_DBSR2(s[7966]);
initIFLAG_DCCONT(s[7967]);
initIFLAG_RTEN(s[7968]);
initIFLAG_REC(s[7969]);
initIDAUNIQ(s[7970]);
initHOOUTM(s[7971]);
initHOMTY1(s[7972]);
initHORMO1(s[7973]);
initHOMFV1(s[7974]);
initHOVM1(s[7975]);
initHOVM1L(s[7976]);
initHOVM1U(s[7977]);
initHOVM1E(s[7978]);
initHOVM1R(s[7979]);
initHOVE1(s[7980]);
initHOVE1L(s[7981]);
initHOVE1U(s[7982]);
initHOVE1E(s[7983]);
initHOVE1R(s[7984]);
initHOMTY2(s[7985]);
initHORMO2(s[7986]);
initHOMFV2(s[7987]);
initHOVM2(s[7988]);
initHOVM2L(s[7989]);
initHOVM2U(s[7990]);
initHOVM2E(s[7991]);
initHOVM2R(s[7992]);
initHOVE2(s[7993]);
initHOVE2L(s[7994]);
initHOVE2U(s[7995]);
initHOVE2E(s[7996]);
initHOVE2R(s[7997]);
initHOMSAM3(s[7998]);
initHOMEXT3(s[7999]);
}
public void init_8000_8444(String line) {
initHOMXA3(s[8000]);
initHOMXA3L(s[8001]);
initHOMXA3U(s[8002]);
initHOMXA3E(s[8003]);
initHOMXA3R(s[8004]);
initHOMUS13(s[8005]);
initHOMUS23(s[8006]);
initHOMUS33(s[8007]);
initHOMUM13(s[8008]);
initHOMUM23(s[8009]);
initHOMUM33(s[8010]);
initHOMREA3(s[8011]);
initHOMFV3(s[8012]);
initHOVM3(s[8013]);
initHOVM3L(s[8014]);
initHOVM3U(s[8015]);
initHOVM3E(s[8016]);
initHOVM3R(s[8017]);
initHOVE3(s[8018]);
initHOVE3L(s[8019]);
initHOVE3U(s[8020]);
initHOVE3E(s[8021]);
initHOVE3R(s[8022]);
initHOMSAM4(s[8023]);
initHOMEXT4(s[8024]);
initHOMXA4(s[8025]);
initHOMXA4L(s[8026]);
initHOMXA4U(s[8027]);
initHOMXA4E(s[8028]);
initHOMXA4R(s[8029]);
initHOMUS14(s[8030]);
initHOMUS24(s[8031]);
initHOMUS34(s[8032]);
initHOMUM14(s[8033]);
initHOMUM24(s[8034]);
initHOMUM34(s[8035]);
initHOMREA4(s[8036]);
initHOMFV4(s[8037]);
initHOVM4(s[8038]);
initHOVM4L(s[8039]);
initHOVM4U(s[8040]);
initHOVM4E(s[8041]);
initHOVM4R(s[8042]);
initHOVE4(s[8043]);
initHOVE4L(s[8044]);
initHOVE4U(s[8045]);
initHOVE4E(s[8046]);
initHOVE4R(s[8047]);
initHOMSAM5(s[8048]);
initHOMEXT5(s[8049]);
initHOMXA5(s[8050]);
initHOMXA5L(s[8051]);
initHOMXA5U(s[8052]);
initHOMXA5E(s[8053]);
initHOMXA5R(s[8054]);
initHOMUS15(s[8055]);
initHOMUS25(s[8056]);
initHOMUS35(s[8057]);
initHOMUM15(s[8058]);
initHOMUM25(s[8059]);
initHOMUM35(s[8060]);
initHOMREA5(s[8061]);
initHOMFV5(s[8062]);
initHOVM5(s[8063]);
initHOVM5L(s[8064]);
initHOVM5U(s[8065]);
initHOVM5E(s[8066]);
initHOVM5R(s[8067]);
initHOVE5(s[8068]);
initHOVE5L(s[8069]);
initHOVE5U(s[8070]);
initHOVE5E(s[8071]);
initHOVE5R(s[8072]);
initHOMSAM6(s[8073]);
initHOMEXT6(s[8074]);
initHOMXA6(s[8075]);
initHOMXA6L(s[8076]);
initHOMXA6U(s[8077]);
initHOMXA6E(s[8078]);
initHOMXA6R(s[8079]);
initHOMUS16(s[8080]);
initHOMUS26(s[8081]);
initHOMUS36(s[8082]);
initHOMUM16(s[8083]);
initHOMUM26(s[8084]);
initHOMUM36(s[8085]);
initHOMREA6(s[8086]);
initHOMFV6(s[8087]);
initHOVM6(s[8088]);
initHOVM6L(s[8089]);
initHOVM6U(s[8090]);
initHOVM6E(s[8091]);
initHOVM6R(s[8092]);
initHOVE6(s[8093]);
initHOVE6L(s[8094]);
initHOVE6U(s[8095]);
initHOVE6E(s[8096]);
initHOVE6R(s[8097]);
initHOMSAM7(s[8098]);
initHOMEXT7(s[8099]);
initHOMXA7(s[8100]);
initHOMXA7L(s[8101]);
initHOMXA7U(s[8102]);
initHOMXA7E(s[8103]);
initHOMXA7R(s[8104]);
initHOMUS17(s[8105]);
initHOMUS27(s[8106]);
initHOMUS37(s[8107]);
initHOMUM17(s[8108]);
initHOMUM27(s[8109]);
initHOMUM37(s[8110]);
initHOMREA7(s[8111]);
initHOMFV7(s[8112]);
initHOVM7(s[8113]);
initHOVM7L(s[8114]);
initHOVM7U(s[8115]);
initHOVM7E(s[8116]);
initHOVM7R(s[8117]);
initHOVE7(s[8118]);
initHOVE7L(s[8119]);
initHOVE7U(s[8120]);
initHOVE7E(s[8121]);
initHOVE7R(s[8122]);
initHOMTY8(s[8123]);
initHOMNU18(s[8124]);
initHOMNU28(s[8125]);
initHOMNU38(s[8126]);
initHOMNU48(s[8127]);
initHOMNM18(s[8128]);
initHOMNM28(s[8129]);
initHOMNM38(s[8130]);
initHOMNM48(s[8131]);
initHOMNRE8(s[8132]);
initHOMWA8(s[8133]);
initHOMWA8L(s[8134]);
initHOMWA8U(s[8135]);
initHOMWA8E(s[8136]);
initHOMWA8R(s[8137]);
initHORMO8(s[8138]);
initHOMFV8(s[8139]);
initHOVM8(s[8140]);
initHOVM8L(s[8141]);
initHOVM8U(s[8142]);
initHOVM8E(s[8143]);
initHOVM8R(s[8144]);
initHOVE8(s[8145]);
initHOVE8L(s[8146]);
initHOVE8U(s[8147]);
initHOVE8E(s[8148]);
initHOVE8R(s[8149]);
initHOMTY9(s[8150]);
initHOMNU19(s[8151]);
initHOMNU29(s[8152]);
initHOMNU39(s[8153]);
initHOMNU49(s[8154]);
initHOMNM19(s[8155]);
initHOMNM29(s[8156]);
initHOMNM39(s[8157]);
initHOMNM49(s[8158]);
initHOMNRE9(s[8159]);
initHOMWA9(s[8160]);
initHOMWA9L(s[8161]);
initHOMWA9U(s[8162]);
initHOMWA9E(s[8163]);
initHOMWA9R(s[8164]);
initHORMO9(s[8165]);
initHOMFV9(s[8166]);
initHOVM9(s[8167]);
initHOVM9L(s[8168]);
initHOVM9U(s[8169]);
initHOVM9E(s[8170]);
initHOVM9R(s[8171]);
initHOVE9(s[8172]);
initHOVE9L(s[8173]);
initHOVE9U(s[8174]);
initHOVE9E(s[8175]);
initHOVE9R(s[8176]);
initHOMTY10(s[8177]);
initHORMO10(s[8178]);
initHOMFV10(s[8179]);
initHOVM10(s[8180]);
initHOVM10L(s[8181]);
initHOVM10U(s[8182]);
initHOVM10E(s[8183]);
initHOVM10R(s[8184]);
initHOVE10(s[8185]);
initHOVE10L(s[8186]);
initHOVE10U(s[8187]);
initHOVE10E(s[8188]);
initHOVE10R(s[8189]);
initIDAUNIQ(s[8190]);
initIDAIND(s[8191]);
initIDAHH(s[8192]);
initW2WTNUR(s[8193]);
initW2WTBLD(s[8194]);
initVISMON(s[8195]);
initVISYEAR(s[8196]);
initHHAGE(s[8197]);
initCONFAGE(s[8198]);
initSEX(s[8199]);
initDOBYEAR(s[8200]);
initBPCONST(s[8201]);
initCONSUB1(s[8202]);
initCONSUB2(s[8203]);
initCONSUB3(s[8204]);
initCUFSIZE(s[8205]);
initAIRTEMP(s[8206]);
initSYS1(s[8207]);
initDIAS1(s[8208]);
initPULSE1(s[8209]);
initMAP1(s[8210]);
initFULL1(s[8211]);
initSYS2(s[8212]);
initDIAS2(s[8213]);
initPULSE2(s[8214]);
initMAP2(s[8215]);
initFULL2(s[8216]);
initSYS3(s[8217]);
initDIAS3(s[8218]);
initPULSE3(s[8219]);
initMAP3(s[8220]);
initFULL3(s[8221]);
initYNOBP(s[8222]);
initBPRESPC(s[8223]);
initSYSVAL(s[8224]);
initDIAVAL(s[8225]);
initPULVAL(s[8226]);
initMAPVAL(s[8227]);
initRESPBPS(s[8228]);
initNATTBP1(s[8229]);
initNATTBP2(s[8230]);
initDIFBPC1(s[8231]);
initDIFBPC2(s[8232]);
initDIFBPC3(s[8233]);
initMMGSWIL(s[8234]);
initMMGSDOM(s[8235]);
initMMGSSTA(s[8236]);
initMMGSD1(s[8237]);
initMMGSN1(s[8238]);
initMMGSD2(s[8239]);
initMMGSN2(s[8240]);
initMMGSD3(s[8241]);
initMMGSN3(s[8242]);
initMMGSTP(s[8243]);
initMMGSRES(s[8244]);
initMMGSPR1(s[8245]);
initMMGSPR2(s[8246]);
initCLOTB(s[8247]);
initFIT(s[8248]);
initBSWILL(s[8249]);
initFASTASK(s[8250]);
initFASTELI(s[8251]);
initFASTHRS(s[8252]);
initREFBSC1(s[8253]);
initREFBSC2(s[8254]);
initREFBSC3(s[8255]);
initSAMPTAK(s[8256]);
initBSOUTC(s[8257]);
initSAMDIF1(s[8258]);
initSAMDIF2(s[8259]);
initSAMDIF3(s[8260]);
initSAMDIF4(s[8261]);
initNOBSM1(s[8262]);
initNOBSM2(s[8263]);
initCFIB(s[8264]);
initCHOL(s[8265]);
initHDL(s[8266]);
initTRIG(s[8267]);
initLDL(s[8268]);
initFGLU(s[8269]);
initRTIN(s[8270]);
initHSCRP(s[8271]);
initAPOE(s[8272]);
initHGB(s[8273]);
initHBA1C(s[8274]);
initBLOODR(s[8275]);
initRESPHTS(s[8276]);
initHEIGHT(s[8277]);
initRESNHI(s[8278]);
initEHTCH(s[8279]);
initEHTM(s[8280]);
initEHTFT(s[8281]);
initEHTIN(s[8282]);
initESTHT(s[8283]);
initHTVAL(s[8284]);
initHTOK(s[8285]);
initNOHTBC1(s[8286]);
initNOHTBC2(s[8287]);
initNOHTBC3(s[8288]);
initNOHTBC4(s[8289]);
initRELHITE(s[8290]);
initHINREL(s[8291]);
initSITHTRS(s[8292]);
initSITHGT(s[8293]);
initRESPWTS(s[8294]);
initWEIGHT(s[8295]);
initRESNWT(s[8296]);
initEWTCH(s[8297]);
initEWTKG(s[8298]);
initEWTST(s[8299]);
initEWTL(s[8300]);
initESTWT(s[8301]);
initWTVAL(s[8302]);
initWTOK(s[8303]);
initNOWTBC1(s[8304]);
initNOWTBC2(s[8305]);
initNOWTBC3(s[8306]);
initNOWTBC4(s[8307]);
initFLOORC(s[8308]);
initRELWAIT(s[8309]);
initBMI(s[8310]);
initBMIVAL(s[8311]);
initBMIOK(s[8312]);
initBMIOBE(s[8313]);
initWHINTRO(s[8314]);
initWAIST1(s[8315]);
initHIP1(s[8316]);
initWAIST2(s[8317]);
initHIP2(s[8318]);
initWAIST3(s[8319]);
initHIP3(s[8320]);
initWSTVAL(s[8321]);
initHIPVAL(s[8322]);
initWHVAL(s[8323]);
initWSTOKB(s[8324]);
initHIPOKB(s[8325]);
initWHOKB(s[8326]);
initYNOWH(s[8327]);
initRESPWH(s[8328]);
initWHPNAB1(s[8329]);
initWHPNAB2(s[8330]);
initWHPNAB3(s[8331]);
initWJREL(s[8332]);
initPROBWJ(s[8333]);
initHJREL(s[8334]);
initPROBHJ(s[8335]);
initHASURG(s[8336]);
initEYESURG(s[8337]);
initHASTRO(s[8338]);
initCHESTIN(s[8339]);
initINHALER(s[8340]);
initINHALHR(s[8341]);
initLFWILL(s[8342]);
initLFTEMP(s[8343]);
initFVC1(s[8344]);
initFEV1(s[8345]);
initPF1(s[8346]);
initTECHNI1(s[8347]);
initFVC2(s[8348]);
initFEV2(s[8349]);
initPF2(s[8350]);
initTECHNI2(s[8351]);
initFVC3(s[8352]);
initFEV3(s[8353]);
initPF3(s[8354]);
initTECHNI3(s[8355]);
initNLSATLF(s[8356]);
initHTFVC(s[8357]);
initHTFEV(s[8358]);
initHTPF(s[8359]);
initNOREAD(s[8360]);
initYNOLF(s[8361]);
initLFSTAND(s[8362]);
initLFRESP(s[8363]);
initPROBLF1(s[8364]);
initPROBLF2(s[8365]);
initPROBLF3(s[8366]);
initNOATTLF(s[8367]);
initLFNOMEA(s[8368]);
initMMBCSC(s[8369]);
initMMSSSC(s[8370]);
initMMSSRE(s[8371]);
initMMSSTI(s[8372]);
initMMSSNA(s[8373]);
initMMSTSC(s[8374]);
initMMSTRE(s[8375]);
initMMSTTI(s[8376]);
initMMSTNA(s[8377]);
initMMFTSC(s[8378]);
initMMFTRE2(s[8379]);
initMMFTTI(s[8380]);
initMMFTNA(s[8381]);
initMMLOSC(s[8382]);
initMMLORE(s[8383]);
initMMLOTI(s[8384]);
initMMLONA(s[8385]);
initMMLSSC(s[8386]);
initMMLSRE(s[8387]);
initMMLSTI(s[8388]);
initMMLSNA(s[8389]);
initMMCRAV(s[8390]);
initMMCRSC(s[8391]);
initMMCRRE(s[8392]);
initMMCRNA(s[8393]);
initMMRRSC(s[8394]);
initMMRRRE(s[8395]);
initMMRRFTI(s[8396]);
initMMRRTTI(s[8397]);
initMMRROC(s[8398]);
initMMRRNA(s[8399]);
initIDAUNIQ(s[8400]);
initOUTNSC(s[8401]);
initRFPERS(s[8402]);
initRFSTORY(s[8403]);
initRFWAND(s[8404]);
initRFDEMAN(s[8405]);
initRFDISAP(s[8406]);
initRFCLOSE(s[8407]);
initRFONEDA(s[8408]);
initRFCHARG(s[8409]);
initRFMANAG(s[8410]);
initRFDONE(s[8411]);
initRFLEARN(s[8412]);
initRFEXPER(s[8413]);
initRFSHARE(s[8414]);
initRFIMPRO(s[8415]);
initRFINFLU(s[8416]);
initRFWARM(s[8417]);
initRFCONFI(s[8418]);
initRFJUDGE(s[8419]);
initRFVOICE(s[8420]);
initRFSENSE(s[8421]);
initRFPOSIT(s[8422]);
initRFLOVIN(s[8423]);
initRFHORIZ(s[8424]);
initRFFITIN(s[8425]);
initRFDECIS(s[8426]);
initRFACCOM(s[8427]);
initRFMORE(s[8428]);
initRFLONEL(s[8429]);
initRFNIMPR(s[8430]);
initRFOVERW(s[8431]);
initRFDIFF(s[8432]);
initRFGOALS(s[8433]);
initRFATTIT(s[8434]);
initRFFRIEN(s[8435]);
initRFDEVEL(s[8436]);
initRFARRAN(s[8437]);
initRFDISAG(s[8438]);
initRFPLANS(s[8439]);
initRFCOMPA(s[8440]);
initRFTRUST(s[8441]);
initRFTRICK(s[8442]);
initRFBUILD(s[8443]);
initRFACTIV(s[8444]);
}
}
