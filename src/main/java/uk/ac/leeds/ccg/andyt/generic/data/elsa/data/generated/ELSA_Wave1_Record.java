/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.elsa.process.ELSA_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.elsa.data.generated;
public class ELSA_Wave1_Record extends ELSA_Waves1To8_Record {
protected byte AAGEANGI;
protected byte AAGEDI;
protected byte AAGEHART;
protected byte AAGEMAB;
protected byte AAGEPAB;
protected byte AAGESTRO;
protected byte ADIRCTR;
protected byte ADRESP1;
protected byte ADRESP2;
protected byte AECONACT;
protected byte AEDUCEND;
protected byte AEMPLOYE;
protected byte AEMPSTAT;
protected byte AETHNICR;
protected byte AEVERJOB;
protected byte AFTPTIME;
protected byte AHHLDR01;
protected byte AHHLDR02;
protected byte AHHLDR03;
protected boolean AHHLDR04;
protected byte AHHSIZE;
protected short AHSECLS2;
protected byte AHSEINT;
protected byte AHSEST;
protected short AHSEYEAR;
protected byte ALIVEMAB;
protected byte ALIVEPAB;
protected byte ALLOCP1;
protected byte ALLOCP2;
protected byte AMINTB;
protected byte ANACTIV;
protected byte ANEMPLEE;
protected double ANSSEC;
protected byte AOTHPAID;
protected byte APERSNO;
protected byte APOBR;
protected byte AQUAL;
protected byte ARELTO01;
protected byte ARELTO02;
protected byte ARELTO03;
protected byte ARELTO04;
protected byte ARELTO05;
protected byte ARELTO06;
protected byte ARELTO07;
protected byte ARELTO08;
protected byte ARELTO09;
protected byte ARELTO10;
protected String ASAMPSTA;
protected byte ASEX;
protected byte ASKPAY;
protected boolean ASKPX1;
protected byte ASKREC;
protected byte ASNEMPLE;
protected byte ASOCCLS;
protected short ASTRATIF;
protected byte ASTWORK;
protected byte ATENUREB;
protected byte AWKLOOK;
protected byte AWKSTRT;
protected short AXSC2000;
protected short AYINTB;
protected byte CFANI;
protected byte CFEND;
protected byte CFMEM;
protected byte CFMEMS;
protected byte CFMETM;
protected byte CFMSCR;
protected byte CFPASCR;
protected byte CFPBSCR;
protected byte CFPMB;
protected byte CFPTSCR;
protected byte CFSUMA;
protected byte CFSUMB;
protected byte CFSUMC;
protected byte CFSUMD;
protected byte CFSUME;
protected byte CFSUMF;
protected byte CFWHO1;
protected byte CFWHO2;
protected byte CFWHO3;
protected byte CFWHZ1;
protected byte CFWHZ2;
protected byte CFWHZ3;
protected boolean CFWHZ4;
protected boolean CHINHH1;
protected byte COGREC;
protected byte COUPLE1;
protected byte DCURPEN;
protected byte DDBDC;
protected byte DEMPPEN;
protected byte DHAGER;
protected byte DHANYPX;
protected short DHCBY;
protected short DHCBY02;
protected short DHCBY03;
protected short DHCBY04;
protected short DHCBY05;
protected short DHCBY06;
protected short DHCBY07;
protected short DHCBY08;
protected short DHCBY09;
protected short DHCBY10;
protected short DHCBY11;
protected short DHCBY12;
protected short DHCBY13;
protected byte DHCH;
protected short DHDOBYR;
protected boolean DHM;
protected byte DHM10;
protected byte DHM11;
protected byte DHM12;
protected boolean DHM13;
protected byte DHM2;
protected byte DHM3;
protected byte DHM4;
protected byte DHM5;
protected byte DHM6;
protected byte DHM7;
protected byte DHM8;
protected byte DHM9;
protected byte DHNCH;
protected byte DHPRX01;
protected byte DHPRX02;
protected byte DHR13;
protected boolean DHSEX;
protected boolean DIAG;
protected short DIDBNY;
protected byte DIDOB;
protected byte DIKLIVC;
protected byte DIMAR;
protected byte DISEX;
protected boolean DPTC_P_F;
protected byte DPTC_P_I;
protected short DPTC_P_O;
protected short DPTC_P_T;
protected boolean DPTC_R_F;
protected double DPTC_R_I;
protected short DPTC_R_O;
protected short DPTC_R_T;
protected byte ELIG;
protected byte ELIGAT;
protected byte ELIGBT;
protected byte ELIGCT;
protected double ENSSEC;
protected byte EXPLAN;
protected byte EXPLANC;
protected short EXS2000;
protected String FINSTAT;
protected byte FQBACK1;
protected boolean FQBACK2;
protected byte FQBCG1;
protected byte FQCBAC1;
protected byte FQCBTHR;
protected short FQCENG;
protected byte FQCUL1;
protected byte FQCUL2;
protected byte FQCUL3;
protected byte FQCULB1;
protected byte FQEND;
protected byte FQETHNR;
protected byte FQQUAL1;
protected byte FQQUAL2;
protected byte FQQUAL3;
protected byte FQQUZM1;
protected byte FQQUZM2;
protected byte FQQUZM3;
protected byte FQWCUL1;
protected byte FQWCUL2;
protected byte FQWCUL3;
protected boolean FQWCUL4;
protected boolean GCINHH1;
protected byte HEADA01;
protected byte HEADA02;
protected byte HEADA03;
protected byte HEADA04;
protected byte HEADA05;
protected byte HEADA06;
protected byte HEADA07;
protected byte HEADA08;
protected byte HEADA09;
protected byte HEADA10;
protected boolean HEADA11;
protected byte HEADB01;
protected byte HEADB02;
protected byte HEADB03;
protected byte HEADB04;
protected byte HEADB05;
protected byte HEADB06;
protected byte HEADB07;
protected byte HEADB08;
protected byte HEADB09;
protected byte HEADB10;
protected byte HEADB11;
protected byte HEADB12;
protected boolean HEADB13;
protected boolean HEADB14;
protected byte HEAGG;
protected byte HEAGH;
protected byte HEAID1;
protected byte HEAID2;
protected byte HEAID3;
protected byte HEAID4;
protected byte HEAID5;
protected boolean HEAID6;
protected boolean HEAID7;
protected boolean HEAID8;
protected byte HEALA;
protected byte HEALB;
protected byte HEALC;
protected byte HEANA;
protected byte HEANB;
protected byte HEANC;
protected byte HEAND;
protected byte HEANE;
protected byte HEANF;
protected byte HEANG;
protected byte HEANH;
protected byte HEANI;
protected boolean HEANIC;
protected byte HEANK;
protected byte HEART1;
protected byte HEART2;
protected boolean HEART3;
protected byte HEATA;
protected byte HEATT01;
protected byte HEATT02;
protected byte HEATT03;
protected byte HEATT04;
protected byte HEATT05;
protected byte HEATT06;
protected byte HEATT07;
protected byte HEATT08;
protected byte HEATT09;
protected byte HEATT10;
protected byte HEATT11;
protected byte HEATT12;
protected byte HEATT13;
protected byte HEATT14;
protected byte HEATT15;
protected byte HEATT16;
protected boolean HEATT17;
protected byte HEAVOID;
protected byte HEBAL;
protected byte HECANA;
protected byte HECDA;
protected byte HECDB;
protected byte HECDC;
protected byte HECDD;
protected byte HECDE;
protected byte HECDF1;
protected byte HECDF2;
protected byte HECDF3;
protected byte HEDIA01;
protected byte HEDIA02;
protected byte HEDIA03;
protected byte HEDIA04;
protected byte HEDIA05;
protected byte HEDIA06;
protected byte HEDIA07;
protected boolean HEDIA08;
protected boolean HEDIA09;
protected boolean HEDIA10;
protected byte HEDIB01;
protected byte HEDIB02;
protected byte HEDIB03;
protected byte HEDIB04;
protected byte HEDIB05;
protected boolean HEDIB06;
protected boolean HEDIB07;
protected boolean HEDIB08;
protected boolean HEDIB09;
protected boolean HEDIB10;
protected byte HEDIM01;
protected byte HEDIM02;
protected byte HEDIM03;
protected byte HEDIM04;
protected byte HEDIM05;
protected byte HEDIM06;
protected boolean HEDIM07;
protected byte HEDIZ;
protected byte HEGENH;
protected byte HEGENHB;
protected byte HEHELF;
protected byte HEHELFB;
protected byte HEHPA;
protected byte HEHPB01;
protected byte HEHPB02;
protected byte HEHPB03;
protected byte HEHPB04;
protected byte HEHPB05;
protected byte HEHPB06;
protected byte HEHPB07;
protected byte HEHPB08;
protected boolean HEHPB09;
protected boolean HEHPB10;
protected boolean HEHPB11;
protected boolean HEHPB12;
protected boolean HEHPB13;
protected boolean HEHPB14;
protected boolean HEHPB15;
protected boolean HEHPB16;
protected byte HEHPC;
protected byte HEINCT;
protected byte HEJIA1;
protected byte HEJIA2;
protected boolean HEJIA3;
protected boolean HEJIA4;
protected boolean HEJIA5;
protected boolean HEJIA6;
protected byte HEJIB;
protected byte HEJIC;
protected byte HEOPT1;
protected byte HEOPT2;
protected byte HEOPT3;
protected boolean HEOPT4;
protected boolean HEOPT5;
protected byte HEPAB;
protected byte HEPSY1;
protected byte HEPSY2;
protected byte HEPSY3;
protected byte HEPSY4;
protected byte HEPSY5;
protected byte HEPSY6;
protected byte HEPSY7;
protected boolean HEPSY8;
protected boolean HEPSY9;
protected byte HERPA;
protected byte HERPB;
protected byte HERPC;
protected byte HERPD;
protected byte HERPE;
protected byte HERPF;
protected byte HERPG;
protected byte HERPH;
protected byte HERPI;
protected byte HERPJ;
protected byte HEYRB;
protected byte HHSEL;
protected byte HOADP01;
protected byte HOADP02;
protected byte HOADP03;
protected byte HOADP04;
protected byte HOADP05;
protected byte HOADP06;
protected byte HOADP07;
protected byte HOADP08;
protected byte HOADP09;
protected boolean HOADP10;
protected byte HOALE;
protected byte HOALF;
protected short HOALFM;
protected byte HOALI;
protected short HOALL;
protected boolean HOALR;
protected short HOALU;
protected byte HOASK;
protected boolean HOB10FE;
protected boolean HOB10FL;
protected boolean HOB10FR;
protected boolean HOB10FU;
protected boolean HOB10ME;
protected boolean HOB10ML;
protected boolean HOB10MR;
protected boolean HOB10MU;
protected boolean HOB10OE;
protected boolean HOB10OL;
protected boolean HOB10OR;
protected boolean HOB10OU;
protected boolean HOB10WE;
protected boolean HOB10WL;
protected boolean HOB10WR;
protected boolean HOB10WU;
protected boolean HOB10YE;
protected boolean HOB10YL;
protected boolean HOB10YR;
protected boolean HOB10YU;
protected boolean HOB11FE;
protected boolean HOB11FL;
protected boolean HOB11FR;
protected boolean HOB11FU;
protected boolean HOB11ME;
protected boolean HOB11ML;
protected boolean HOB11MR;
protected boolean HOB11MU;
protected boolean HOB11OE;
protected boolean HOB11OL;
protected boolean HOB11OR;
protected boolean HOB11OU;
protected boolean HOB11WE;
protected boolean HOB11WL;
protected boolean HOB11WR;
protected boolean HOB11WU;
protected boolean HOB11YE;
protected boolean HOB11YL;
protected boolean HOB11YR;
protected boolean HOB11YU;
protected boolean HOB12FE;
protected boolean HOB12FL;
protected boolean HOB12FR;
protected boolean HOB12FU;
protected boolean HOB12ME;
protected boolean HOB12ML;
protected boolean HOB12MR;
protected boolean HOB12MU;
protected boolean HOB12OE;
protected boolean HOB12OL;
protected boolean HOB12OR;
protected boolean HOB12OU;
protected boolean HOB12WE;
protected boolean HOB12WL;
protected boolean HOB12WR;
protected boolean HOB12WU;
protected boolean HOB12YE;
protected boolean HOB12YL;
protected boolean HOB12YR;
protected boolean HOB12YU;
protected boolean HOB13FE;
protected boolean HOB13FL;
protected boolean HOB13FR;
protected boolean HOB13FU;
protected boolean HOB13ME;
protected boolean HOB13ML;
protected boolean HOB13MR;
protected boolean HOB13MU;
protected boolean HOB13OE;
protected boolean HOB13OL;
protected boolean HOB13OR;
protected boolean HOB13OU;
protected boolean HOB13WE;
protected boolean HOB13WL;
protected boolean HOB13WR;
protected boolean HOB13WU;
protected boolean HOB13YE;
protected boolean HOB13YL;
protected boolean HOB13YR;
protected boolean HOB13YU;
protected boolean HOB2FE;
protected boolean HOB2FL;
protected boolean HOB2FR;
protected boolean HOB2FU;
protected boolean HOB2ME;
protected boolean HOB2ML;
protected boolean HOB2MR;
protected boolean HOB2MU;
protected byte HOB2OE;
protected byte HOB2OL;
protected byte HOB2OR;
protected byte HOB2OU;
protected byte HOB2WE;
protected byte HOB2WL;
protected byte HOB2WR;
protected byte HOB2WU;
protected boolean HOB2YE;
protected boolean HOB2YL;
protected boolean HOB2YR;
protected boolean HOB2YU;
protected boolean HOB3FE;
protected boolean HOB3FL;
protected boolean HOB3FR;
protected boolean HOB3FU;
protected byte HOB3ME;
protected byte HOB3ML;
protected byte HOB3MR;
protected short HOB3MU;
protected byte HOB3OE;
protected short HOB3OL;
protected byte HOB3OR;
protected short HOB3OU;
protected byte HOB3WE;
protected byte HOB3WL;
protected byte HOB3WR;
protected byte HOB3WU;
protected boolean HOB3YE;
protected boolean HOB3YL;
protected boolean HOB3YR;
protected boolean HOB3YU;
protected boolean HOB4FE;
protected boolean HOB4FL;
protected boolean HOB4FR;
protected boolean HOB4FU;
protected byte HOB4ME;
protected byte HOB4ML;
protected byte HOB4MR;
protected short HOB4MU;
protected byte HOB4OE;
protected boolean HOB4OL;
protected boolean HOB4OR;
protected boolean HOB4OU;
protected byte HOB4WE;
protected byte HOB4WL;
protected byte HOB4WR;
protected byte HOB4WU;
protected boolean HOB4YE;
protected boolean HOB4YL;
protected boolean HOB4YR;
protected boolean HOB4YU;
protected boolean HOB5FE;
protected boolean HOB5FL;
protected boolean HOB5FR;
protected boolean HOB5FU;
protected boolean HOB5ME;
protected boolean HOB5ML;
protected boolean HOB5MR;
protected boolean HOB5MU;
protected boolean HOB5OE;
protected boolean HOB5OL;
protected boolean HOB5OR;
protected boolean HOB5OU;
protected boolean HOB5WE;
protected boolean HOB5WL;
protected boolean HOB5WR;
protected boolean HOB5WU;
protected boolean HOB5YE;
protected boolean HOB5YL;
protected boolean HOB5YR;
protected boolean HOB5YU;
protected boolean HOB6FE;
protected boolean HOB6FL;
protected boolean HOB6FR;
protected boolean HOB6FU;
protected boolean HOB6ME;
protected boolean HOB6ML;
protected boolean HOB6MR;
protected boolean HOB6MU;
protected boolean HOB6OE;
protected boolean HOB6OL;
protected boolean HOB6OR;
protected boolean HOB6OU;
protected boolean HOB6WE;
protected boolean HOB6WL;
protected boolean HOB6WR;
protected boolean HOB6WU;
protected boolean HOB6YE;
protected boolean HOB6YL;
protected boolean HOB6YR;
protected boolean HOB6YU;
protected boolean HOB7FE;
protected boolean HOB7FL;
protected boolean HOB7FR;
protected boolean HOB7FU;
protected boolean HOB7ME;
protected boolean HOB7ML;
protected boolean HOB7MR;
protected boolean HOB7MU;
protected boolean HOB7OE;
protected boolean HOB7OL;
protected boolean HOB7OR;
protected boolean HOB7OU;
protected boolean HOB7WE;
protected boolean HOB7WL;
protected boolean HOB7WR;
protected boolean HOB7WU;
protected boolean HOB7YE;
protected boolean HOB7YL;
protected boolean HOB7YR;
protected boolean HOB7YU;
protected boolean HOB8FE;
protected boolean HOB8FL;
protected boolean HOB8FR;
protected boolean HOB8FU;
protected boolean HOB8ME;
protected boolean HOB8ML;
protected boolean HOB8MR;
protected boolean HOB8MU;
protected boolean HOB8OE;
protected boolean HOB8OL;
protected boolean HOB8OR;
protected boolean HOB8OU;
protected boolean HOB8WE;
protected boolean HOB8WL;
protected boolean HOB8WR;
protected boolean HOB8WU;
protected boolean HOB8YE;
protected boolean HOB8YL;
protected boolean HOB8YR;
protected boolean HOB8YU;
protected boolean HOB9FE;
protected boolean HOB9FL;
protected boolean HOB9FR;
protected boolean HOB9FU;
protected boolean HOB9ME;
protected boolean HOB9ML;
protected boolean HOB9MR;
protected boolean HOB9MU;
protected boolean HOB9OE;
protected boolean HOB9OL;
protected boolean HOB9OR;
protected boolean HOB9OU;
protected boolean HOB9WE;
protected boolean HOB9WL;
protected boolean HOB9WR;
protected boolean HOB9WU;
protected boolean HOB9YE;
protected boolean HOB9YL;
protected boolean HOB9YR;
protected boolean HOB9YU;
protected boolean HOBA10;
protected boolean HOBA11;
protected boolean HOBA12;
protected boolean HOBA13;
protected boolean HOBAS10;
protected boolean HOBAS11;
protected boolean HOBAS12;
protected boolean HOBAS13;
protected boolean HOBFE;
protected boolean HOBFL;
protected boolean HOBFR;
protected boolean HOBFU;
protected boolean HOBME;
protected short HOBML;
protected byte HOBMR;
protected short HOBMU;
protected boolean HOBOE;
protected boolean HOBOL;
protected boolean HOBOR;
protected boolean HOBOU;
protected boolean HOBP10;
protected boolean HOBP11;
protected boolean HOBP12;
protected boolean HOBP13;
protected byte HOBWE;
protected short HOBWL;
protected byte HOBWR;
protected byte HOBWU;
protected boolean HOBYE;
protected boolean HOBYL;
protected boolean HOBYR;
protected boolean HOBYU;
protected byte HOFOE;
protected short HOFOL;
protected byte HOFOR;
protected short HOFOU;
protected byte HOHAV01;
protected byte HOHAV02;
protected byte HOHAV03;
protected byte HOHAV04;
protected byte HOHAV05;
protected byte HOHAV06;
protected byte HOHAV07;
protected byte HOHAV08;
protected byte HOHAV09;
protected byte HOHAV10;
protected byte HOHAV11;
protected byte HOHB1;
protected byte HOHB2;
protected byte HOHB3;
protected byte HOHBM1;
protected byte HOHBM2;
protected byte HOHBM3;
protected byte HOINAM1;
protected byte HOINAM2;
protected byte HOINAM3;
protected byte HOINAM4;
protected boolean HOINAM5;
protected byte HOINC1;
protected byte HOINC2;
protected byte HOINC3;
protected boolean HOINC4;
protected byte HOINCA1;
protected byte HOINCA2;
protected byte HOINCA3;
protected byte HOINCA4;
protected boolean HOINCA5;
protected byte HOINCL1;
protected byte HOINCL2;
protected byte HOINCL3;
protected byte HOINCL4;
protected boolean HOINCL5;
protected byte HOINCM1;
protected byte HOINCM2;
protected byte HOINCM3;
protected byte HOINCM4;
protected byte HOMFV;
protected byte HOMFV2;
protected byte HOMFV3;
protected byte HOMFV4;
protected byte HOMFV5;
protected boolean HOMIE;
protected boolean HOMIL;
protected short HOMINC;
protected boolean HOMIR;
protected boolean HOMIU;
protected byte HOMRE;
protected short HOMRL;
protected byte HOMRR;
protected short HOMRU;
protected byte HOMTY;
protected byte HOMTY2;
protected byte HOMTY3;
protected byte HOMTY4;
protected byte HOMTY5;
protected byte HOMTYC;
protected byte HOMTYC2;
protected byte HOOHEA1;
protected byte HOOHEA2;
protected byte HOOHEA3;
protected byte HOOHEM1;
protected byte HOOHEM2;
protected byte HOOHEM3;
protected byte HOOUE;
protected byte HOOUL;
protected byte HOOUR;
protected short HOOUU;
protected byte HOPAE;
protected int HOPAL;
protected byte HOPAR;
protected int HOPAU;
protected byte HOPRM01;
protected byte HOPRM02;
protected byte HOPRM03;
protected byte HOPRM04;
protected byte HOPRM05;
protected byte HOPRM06;
protected byte HOPRM07;
protected byte HOPRM08;
protected byte HOPRM09;
protected boolean HOPRM10;
protected byte HOPRO01;
protected byte HOPRO02;
protected byte HOPRO03;
protected byte HOPRO04;
protected byte HOPRO05;
protected byte HOPRO06;
protected byte HOPRO07;
protected byte HOPRO08;
protected byte HOPRO09;
protected boolean HOPRO10;
protected byte HOREBT;
protected byte HOREFE;
protected byte HOREFL;
protected byte HOREFR;
protected byte HOREFU;
protected byte HOREME;
protected short HOREML;
protected byte HOREMR;
protected short HOREMU;
protected byte HOREOE;
protected short HOREOL;
protected byte HOREOR;
protected short HOREOU;
protected byte HOREWE;
protected byte HOREWL;
protected byte HOREWR;
protected short HOREWU;
protected byte HOREYE;
protected boolean HOREYL;
protected byte HOREYR;
protected short HOREYU;
protected byte HORFEE;
protected boolean HORFEP;
protected boolean HORIE;
protected short HORIL;
protected byte HORINC;
protected byte HORINCC;
protected short HORINM;
protected boolean HORIR;
protected boolean HORIU;
protected byte HORMBE;
protected int HORMBL;
protected byte HORMBR;
protected short HORMBU;
protected byte HORMO;
protected byte HORMO2;
protected byte HORMO3;
protected byte HORMO4;
protected byte HORMO5;
protected int HORMOL;
protected byte HORMS;
protected short HORMU;
protected boolean HORMUFE;
protected boolean HORMUFL;
protected boolean HORMUFR;
protected boolean HORMUFU;
protected boolean HORMUME;
protected boolean HORMUML;
protected boolean HORMUMR;
protected boolean HORMUMU;
protected boolean HORMUOE;
protected boolean HORMUOL;
protected boolean HORMUOR;
protected boolean HORMUOU;
protected boolean HORMUWE;
protected boolean HORMUWL;
protected boolean HORMUWR;
protected boolean HORMUWU;
protected boolean HORMUYE;
protected boolean HORMUYL;
protected boolean HORMUYR;
protected boolean HORMUYU;
protected byte HORPAY;
protected byte HORPC;
protected int HORPCM;
protected boolean HORPE;
protected boolean HORPL;
protected int HORPM;
protected byte HORPME;
protected short HORPML;
protected byte HORPMR;
protected int HORPMU;
protected boolean HORPOF;
protected byte HORPOS;
protected boolean HORPR;
protected boolean HORPU;
protected boolean HORRE;
protected boolean HORRL;
protected boolean HORRM;
protected boolean HORRR;
protected boolean HORRU;
protected byte HOSEE;
protected int HOSEL;
protected byte HOSER;
protected int HOSEU;
protected int HOVE;
protected int HOVE1E;
protected int HOVE1L;
protected byte HOVE1R;
protected int HOVE1U;
protected int HOVE2;
protected short HOVE2E;
protected short HOVE2L;
protected byte HOVE2R;
protected short HOVE2U;
protected int HOVE3;
protected short HOVE3E;
protected int HOVE3L;
protected byte HOVE3R;
protected int HOVE3U;
protected short HOVE4;
protected byte HOVE4E;
protected short HOVE4L;
protected byte HOVE4R;
protected short HOVE4U;
protected short HOVE5;
protected byte HOVE5E;
protected int HOVE5L;
protected byte HOVE5R;
protected int HOVE5U;
protected String HOVER;
protected String HOVER10;
protected String HOVER2;
protected String HOVER3;
protected String HOVER4;
protected String HOVER5;
protected String HOVER6;
protected String HOVER7;
protected boolean HOVER8;
protected String HOVER9;
protected String HOVLR;
protected String HOVLR10;
protected String HOVLR2;
protected String HOVLR3;
protected String HOVLR4;
protected String HOVLR5;
protected String HOVLR6;
protected String HOVLR7;
protected String HOVLR8;
protected String HOVLR9;
protected byte HOVM1E;
protected int HOVM1L;
protected byte HOVM1R;
protected int HOVM1U;
protected byte HOVM2E;
protected int HOVM2L;
protected byte HOVM2R;
protected int HOVM2U;
protected byte HOVM3E;
protected int HOVM3L;
protected byte HOVM3R;
protected int HOVM3U;
protected byte HOVM4E;
protected int HOVM4L;
protected byte HOVM4R;
protected int HOVM4U;
protected boolean HOVM5E;
protected short HOVM5L;
protected boolean HOVM5R;
protected boolean HOVM5U;
protected int HOVML;
protected int HOVML2;
protected int HOVML3;
protected int HOVML4;
protected int HOVML5;
protected byte HOVNO;
protected byte HOVNO10;
protected byte HOVNO2;
protected byte HOVNO3;
protected byte HOVNO4;
protected byte HOVNO5;
protected byte HOVNO6;
protected byte HOVNO7;
protected byte HOVNO8;
protected byte HOVNO9;
protected byte HOVNR;
protected boolean HOVNR10;
protected byte HOVNR2;
protected String HOVNR3;
protected byte HOVNR4;
protected byte HOVNR5;
protected byte HOVNR6;
protected byte HOVNR7;
protected byte HOVNR8;
protected byte HOVNR9;
protected boolean HOVO101;
protected boolean HOVO102;
protected byte HOVO11;
protected byte HOVO12;
protected byte HOVO21;
protected byte HOVO22;
protected byte HOVO31;
protected byte HOVO32;
protected byte HOVO41;
protected boolean HOVO42;
protected byte HOVO51;
protected boolean HOVO52;
protected byte HOVO61;
protected boolean HOVO62;
protected byte HOVO71;
protected boolean HOVO72;
protected boolean HOVO81;
protected boolean HOVO82;
protected boolean HOVO91;
protected boolean HOVO92;
protected byte HOVW2;
protected byte HOVW3;
protected byte HOVW4;
protected byte HOVW5;
protected byte HOVW6;
protected byte HOVW7;
protected byte HOVW8;
protected short HOVYR;
protected short HOVYR10;
protected short HOVYR2;
protected short HOVYR3;
protected short HOVYR4;
protected short HOVYR5;
protected short HOVYR6;
protected short HOVYR7;
protected short HOVYR8;
protected short HOVYR9;
protected byte HOWHN01;
protected byte HOWHN02;
protected byte HOWHN03;
protected byte HOWHN04;
protected byte HOYML;
protected byte HOYML2;
protected byte HOYML3;
protected byte HOYML4;
protected byte HOYML5;
protected short IAA39;
protected boolean IAA39FE;
protected boolean IAA39FL;
protected boolean IAA39FR;
protected boolean IAA39FU;
protected byte IAA39ME;
protected short IAA39ML;
protected boolean IAA39MR;
protected short IAA39MU;
protected byte IAA39OE;
protected boolean IAA39OL;
protected byte IAA39OR;
protected short IAA39OU;
protected byte IAA39WE;
protected boolean IAA39WL;
protected boolean IAA39WR;
protected boolean IAA39WU;
protected boolean IAA39YE;
protected boolean IAA39YL;
protected boolean IAA39YR;
protected boolean IAA39YU;
protected short IAA40;
protected boolean IAA40FE;
protected boolean IAA40FL;
protected boolean IAA40FR;
protected boolean IAA40FU;
protected byte IAA40ME;
protected short IAA40ML;
protected boolean IAA40MR;
protected short IAA40MU;
protected byte IAA40OE;
protected short IAA40OL;
protected byte IAA40OR;
protected short IAA40OU;
protected boolean IAA40WE;
protected boolean IAA40WL;
protected boolean IAA40WR;
protected boolean IAA40WU;
protected boolean IAA40YE;
protected boolean IAA40YL;
protected boolean IAA40YR;
protected boolean IAA40YU;
protected short IAA41;
protected byte IAA41FE;
protected short IAA41FL;
protected byte IAA41FR;
protected short IAA41FU;
protected boolean IAA41ME;
protected boolean IAA41ML;
protected boolean IAA41MR;
protected short IAA41MU;
protected byte IAA41OE;
protected short IAA41OL;
protected byte IAA41OR;
protected short IAA41OU;
protected byte IAA41WE;
protected byte IAA41WL;
protected byte IAA41WR;
protected byte IAA41WU;
protected boolean IAA41YE;
protected boolean IAA41YL;
protected boolean IAA41YR;
protected boolean IAA41YU;
protected short IAA42;
protected boolean IAA42FE;
protected boolean IAA42FL;
protected boolean IAA42FR;
protected boolean IAA42FU;
protected byte IAA42ME;
protected short IAA42ML;
protected byte IAA42MR;
protected short IAA42MU;
protected byte IAA42OE;
protected short IAA42OL;
protected byte IAA42OR;
protected short IAA42OU;
protected byte IAA42WE;
protected short IAA42WL;
protected byte IAA42WR;
protected short IAA42WU;
protected boolean IAA42YE;
protected boolean IAA42YL;
protected boolean IAA42YR;
protected short IAA42YU;
protected short IAA43;
protected boolean IAA43FE;
protected boolean IAA43FL;
protected boolean IAA43FR;
protected boolean IAA43FU;
protected byte IAA43ME;
protected short IAA43ML;
protected byte IAA43MR;
protected short IAA43MU;
protected byte IAA43OE;
protected byte IAA43OL;
protected byte IAA43OR;
protected short IAA43OU;
protected byte IAA43WE;
protected boolean IAA43WL;
protected boolean IAA43WR;
protected boolean IAA43WU;
protected boolean IAA43YE;
protected boolean IAA43YL;
protected boolean IAA43YR;
protected boolean IAA43YU;
protected short IAA44;
protected boolean IAA44FE;
protected boolean IAA44FL;
protected boolean IAA44FR;
protected boolean IAA44FU;
protected byte IAA44ME;
protected short IAA44ML;
protected boolean IAA44MR;
protected short IAA44MU;
protected byte IAA44OE;
protected short IAA44OL;
protected byte IAA44OR;
protected short IAA44OU;
protected byte IAA44WE;
protected boolean IAA44WL;
protected byte IAA44WR;
protected byte IAA44WU;
protected boolean IAA44YE;
protected boolean IAA44YL;
protected boolean IAA44YR;
protected boolean IAA44YU;
protected short IAA45;
protected boolean IAA45FE;
protected boolean IAA45FL;
protected boolean IAA45FR;
protected boolean IAA45FU;
protected byte IAA45ME;
protected short IAA45ML;
protected byte IAA45MR;
protected short IAA45MU;
protected byte IAA45OE;
protected short IAA45OL;
protected byte IAA45OR;
protected short IAA45OU;
protected byte IAA45WE;
protected byte IAA45WL;
protected byte IAA45WR;
protected short IAA45WU;
protected boolean IAA45YE;
protected boolean IAA45YL;
protected boolean IAA45YR;
protected boolean IAA45YU;
protected short IAA46;
protected boolean IAA46FE;
protected short IAA46FL;
protected boolean IAA46FR;
protected short IAA46FU;
protected byte IAA46ME;
protected short IAA46ML;
protected byte IAA46MR;
protected short IAA46MU;
protected byte IAA46OE;
protected short IAA46OL;
protected byte IAA46OR;
protected short IAA46OU;
protected byte IAA46WE;
protected byte IAA46WL;
protected boolean IAA46WR;
protected byte IAA46WU;
protected boolean IAA46YE;
protected boolean IAA46YL;
protected boolean IAA46YR;
protected boolean IAA46YU;
protected short IAA47;
protected boolean IAA47FE;
protected boolean IAA47FL;
protected boolean IAA47FR;
protected boolean IAA47FU;
protected byte IAA47ME;
protected short IAA47ML;
protected boolean IAA47MR;
protected short IAA47MU;
protected byte IAA47OE;
protected short IAA47OL;
protected byte IAA47OR;
protected short IAA47OU;
protected byte IAA47WE;
protected byte IAA47WL;
protected byte IAA47WR;
protected byte IAA47WU;
protected boolean IAA47YE;
protected boolean IAA47YL;
protected boolean IAA47YR;
protected short IAA47YU;
protected short IAA48;
protected boolean IAA48FE;
protected boolean IAA48FL;
protected boolean IAA48FR;
protected boolean IAA48FU;
protected boolean IAA48ME;
protected boolean IAA48ML;
protected boolean IAA48MR;
protected short IAA48MU;
protected byte IAA48OE;
protected short IAA48OL;
protected byte IAA48OR;
protected short IAA48OU;
protected byte IAA48WE;
protected byte IAA48WL;
protected boolean IAA48WR;
protected short IAA48WU;
protected boolean IAA48YE;
protected boolean IAA48YL;
protected boolean IAA48YR;
protected boolean IAA48YU;
protected short IAA49;
protected boolean IAA49FE;
protected boolean IAA49FL;
protected boolean IAA49FR;
protected boolean IAA49FU;
protected boolean IAA49ME;
protected boolean IAA49ML;
protected boolean IAA49MR;
protected short IAA49MU;
protected boolean IAA49OE;
protected boolean IAA49OL;
protected boolean IAA49OR;
protected short IAA49OU;
protected boolean IAA49WE;
protected boolean IAA49WL;
protected boolean IAA49WR;
protected boolean IAA49WU;
protected boolean IAA49YE;
protected boolean IAA49YL;
protected boolean IAA49YR;
protected boolean IAA49YU;
protected short IAA50;
protected boolean IAA50FE;
protected boolean IAA50FL;
protected boolean IAA50FR;
protected boolean IAA50FU;
protected boolean IAA50ME;
protected boolean IAA50ML;
protected boolean IAA50MR;
protected boolean IAA50MU;
protected boolean IAA50OE;
protected boolean IAA50OL;
protected boolean IAA50OR;
protected boolean IAA50OU;
protected byte IAA50WE;
protected byte IAA50WL;
protected byte IAA50WR;
protected byte IAA50WU;
protected boolean IAA50YE;
protected boolean IAA50YL;
protected boolean IAA50YR;
protected boolean IAA50YU;
protected short IAA51;
protected boolean IAA51FE;
protected boolean IAA51FL;
protected boolean IAA51FR;
protected boolean IAA51FU;
protected boolean IAA51ME;
protected boolean IAA51ML;
protected boolean IAA51MR;
protected boolean IAA51MU;
protected byte IAA51OE;
protected short IAA51OL;
protected byte IAA51OR;
protected short IAA51OU;
protected boolean IAA51WE;
protected boolean IAA51WL;
protected boolean IAA51WR;
protected boolean IAA51WU;
protected boolean IAA51YE;
protected boolean IAA51YL;
protected boolean IAA51YR;
protected boolean IAA51YU;
protected short IAA52;
protected boolean IAA52FE;
protected boolean IAA52FL;
protected boolean IAA52FR;
protected boolean IAA52FU;
protected boolean IAA52ME;
protected boolean IAA52ML;
protected boolean IAA52MR;
protected short IAA52MU;
protected byte IAA52OE;
protected boolean IAA52OL;
protected byte IAA52OR;
protected short IAA52OU;
protected boolean IAA52WE;
protected boolean IAA52WL;
protected boolean IAA52WR;
protected boolean IAA52WU;
protected boolean IAA52YE;
protected boolean IAA52YL;
protected boolean IAA52YR;
protected boolean IAA52YU;
protected short IAA53;
protected boolean IAA53FE;
protected boolean IAA53FL;
protected boolean IAA53FR;
protected boolean IAA53FU;
protected boolean IAA53ME;
protected boolean IAA53ML;
protected boolean IAA53MR;
protected short IAA53MU;
protected byte IAA53OE;
protected boolean IAA53OL;
protected byte IAA53OR;
protected short IAA53OU;
protected byte IAA53WE;
protected boolean IAA53WL;
protected byte IAA53WR;
protected byte IAA53WU;
protected boolean IAA53YE;
protected boolean IAA53YL;
protected boolean IAA53YR;
protected boolean IAA53YU;
protected short IAA54;
protected boolean IAA54FE;
protected boolean IAA54FL;
protected boolean IAA54FR;
protected boolean IAA54FU;
protected boolean IAA54ME;
protected short IAA54ML;
protected boolean IAA54MR;
protected short IAA54MU;
protected byte IAA54OE;
protected short IAA54OL;
protected byte IAA54OR;
protected short IAA54OU;
protected boolean IAA54WE;
protected boolean IAA54WL;
protected boolean IAA54WR;
protected boolean IAA54WU;
protected boolean IAA54YE;
protected boolean IAA54YL;
protected boolean IAA54YR;
protected short IAA54YU;
protected short IAA55;
protected byte IAA55FE;
protected byte IAA55FL;
protected boolean IAA55FR;
protected byte IAA55FU;
protected boolean IAA55ME;
protected short IAA55ML;
protected boolean IAA55MR;
protected short IAA55MU;
protected byte IAA55OE;
protected short IAA55OL;
protected byte IAA55OR;
protected short IAA55OU;
protected byte IAA55WE;
protected short IAA55WL;
protected byte IAA55WR;
protected short IAA55WU;
protected boolean IAA55YE;
protected boolean IAA55YL;
protected boolean IAA55YR;
protected boolean IAA55YU;
protected short IAA56;
protected boolean IAA56FE;
protected boolean IAA56FL;
protected boolean IAA56FR;
protected boolean IAA56FU;
protected boolean IAA56ME;
protected short IAA56ML;
protected boolean IAA56MR;
protected short IAA56MU;
protected byte IAA56OE;
protected byte IAA56OL;
protected byte IAA56OR;
protected short IAA56OU;
protected byte IAA56WE;
protected byte IAA56WL;
protected byte IAA56WR;
protected byte IAA56WU;
protected boolean IAA56YE;
protected boolean IAA56YL;
protected boolean IAA56YR;
protected boolean IAA56YU;
protected short IAA57;
protected boolean IAA57FE;
protected boolean IAA57FL;
protected boolean IAA57FR;
protected boolean IAA57FU;
protected boolean IAA57ME;
protected boolean IAA57ML;
protected boolean IAA57MR;
protected boolean IAA57MU;
protected boolean IAA57OE;
protected boolean IAA57OL;
protected boolean IAA57OR;
protected short IAA57OU;
protected boolean IAA57WE;
protected boolean IAA57WL;
protected boolean IAA57WR;
protected boolean IAA57WU;
protected boolean IAA57YE;
protected boolean IAA57YL;
protected boolean IAA57YR;
protected boolean IAA57YU;
protected short IAA58;
protected boolean IAA58FE;
protected boolean IAA58FL;
protected boolean IAA58FR;
protected boolean IAA58FU;
protected boolean IAA58ME;
protected boolean IAA58ML;
protected boolean IAA58MR;
protected boolean IAA58MU;
protected boolean IAA58OE;
protected boolean IAA58OL;
protected boolean IAA58OR;
protected boolean IAA58OU;
protected boolean IAA58WE;
protected boolean IAA58WL;
protected boolean IAA58WR;
protected boolean IAA58WU;
protected boolean IAA58YE;
protected boolean IAA58YL;
protected boolean IAA58YR;
protected boolean IAA58YU;
protected short IAA59;
protected boolean IAA59FE;
protected boolean IAA59FL;
protected boolean IAA59FR;
protected boolean IAA59FU;
protected boolean IAA59ME;
protected boolean IAA59ML;
protected boolean IAA59MR;
protected boolean IAA59MU;
protected boolean IAA59OE;
protected boolean IAA59OL;
protected boolean IAA59OR;
protected boolean IAA59OU;
protected boolean IAA59WE;
protected boolean IAA59WL;
protected boolean IAA59WR;
protected boolean IAA59WU;
protected boolean IAA59YE;
protected boolean IAA59YL;
protected boolean IAA59YR;
protected boolean IAA59YU;
protected short IAA60;
protected boolean IAA60FE;
protected boolean IAA60FL;
protected boolean IAA60FR;
protected boolean IAA60FU;
protected byte IAA60ME;
protected boolean IAA60ML;
protected boolean IAA60MR;
protected short IAA60MU;
protected byte IAA60OE;
protected short IAA60OL;
protected boolean IAA60OR;
protected short IAA60OU;
protected boolean IAA60WE;
protected boolean IAA60WL;
protected boolean IAA60WR;
protected boolean IAA60WU;
protected boolean IAA60YE;
protected boolean IAA60YL;
protected boolean IAA60YR;
protected boolean IAA60YU;
protected short IAA61;
protected boolean IAA61FE;
protected boolean IAA61FL;
protected boolean IAA61FR;
protected boolean IAA61FU;
protected byte IAA61ME;
protected short IAA61ML;
protected boolean IAA61MR;
protected short IAA61MU;
protected byte IAA61OE;
protected boolean IAA61OL;
protected byte IAA61OR;
protected short IAA61OU;
protected boolean IAA61WE;
protected boolean IAA61WL;
protected boolean IAA61WR;
protected boolean IAA61WU;
protected boolean IAA61YE;
protected boolean IAA61YL;
protected boolean IAA61YR;
protected boolean IAA61YU;
protected short IAA62;
protected boolean IAA62FE;
protected boolean IAA62FL;
protected boolean IAA62FR;
protected boolean IAA62FU;
protected boolean IAA62ME;
protected boolean IAA62ML;
protected boolean IAA62MR;
protected short IAA62MU;
protected byte IAA62OE;
protected short IAA62OL;
protected byte IAA62OR;
protected short IAA62OU;
protected boolean IAA62WE;
protected boolean IAA62WL;
protected boolean IAA62WR;
protected boolean IAA62WU;
protected boolean IAA62YE;
protected boolean IAA62YL;
protected boolean IAA62YR;
protected boolean IAA62YU;
protected short IAA63;
protected boolean IAA63FE;
protected boolean IAA63FL;
protected boolean IAA63FR;
protected boolean IAA63FU;
protected boolean IAA63ME;
protected boolean IAA63ML;
protected boolean IAA63MR;
protected boolean IAA63MU;
protected boolean IAA63OE;
protected boolean IAA63OL;
protected boolean IAA63OR;
protected boolean IAA63OU;
protected boolean IAA63WE;
protected boolean IAA63WL;
protected boolean IAA63WR;
protected boolean IAA63WU;
protected boolean IAA63YE;
protected boolean IAA63YL;
protected boolean IAA63YR;
protected boolean IAA63YU;
protected short IAA64;
protected boolean IAA64FE;
protected boolean IAA64FL;
protected boolean IAA64FR;
protected boolean IAA64FU;
protected boolean IAA64ME;
protected boolean IAA64ML;
protected boolean IAA64MR;
protected short IAA64MU;
protected boolean IAA64OE;
protected boolean IAA64OL;
protected byte IAA64OR;
protected short IAA64OU;
protected boolean IAA64WE;
protected boolean IAA64WL;
protected boolean IAA64WR;
protected boolean IAA64WU;
protected boolean IAA64YE;
protected boolean IAA64YL;
protected boolean IAA64YR;
protected boolean IAA64YU;
protected short IAA65;
protected boolean IAA65FE;
protected boolean IAA65FL;
protected boolean IAA65FR;
protected boolean IAA65FU;
protected byte IAA65ME;
protected short IAA65ML;
protected byte IAA65MR;
protected short IAA65MU;
protected boolean IAA65OE;
protected boolean IAA65OL;
protected boolean IAA65OR;
protected short IAA65OU;
protected byte IAA65WE;
protected boolean IAA65WL;
protected byte IAA65WR;
protected byte IAA65WU;
protected boolean IAA65YE;
protected boolean IAA65YL;
protected boolean IAA65YR;
protected boolean IAA65YU;
protected short IAA66;
protected boolean IAA66FE;
protected boolean IAA66FL;
protected boolean IAA66FR;
protected boolean IAA66FU;
protected boolean IAA66ME;
protected boolean IAA66ML;
protected boolean IAA66MR;
protected boolean IAA66MU;
protected boolean IAA66OE;
protected boolean IAA66OL;
protected boolean IAA66OR;
protected short IAA66OU;
protected boolean IAA66WE;
protected boolean IAA66WL;
protected boolean IAA66WR;
protected boolean IAA66WU;
protected boolean IAA66YE;
protected boolean IAA66YL;
protected boolean IAA66YR;
protected boolean IAA66YU;
protected byte IAA67;
protected boolean IAA67FE;
protected boolean IAA67FL;
protected boolean IAA67FR;
protected short IAA67FU;
protected boolean IAA67ME;
protected boolean IAA67ML;
protected boolean IAA67MR;
protected boolean IAA67MU;
protected boolean IAA67OE;
protected boolean IAA67OL;
protected boolean IAA67OR;
protected boolean IAA67OU;
protected boolean IAA67WE;
protected boolean IAA67WL;
protected boolean IAA67WR;
protected boolean IAA67WU;
protected boolean IAA67YE;
protected boolean IAA67YL;
protected boolean IAA67YR;
protected boolean IAA67YU;
protected short IAA68;
protected boolean IAA68FE;
protected boolean IAA68FL;
protected boolean IAA68FR;
protected boolean IAA68FU;
protected boolean IAA68ME;
protected boolean IAA68ML;
protected boolean IAA68MR;
protected boolean IAA68MU;
protected boolean IAA68OE;
protected boolean IAA68OL;
protected boolean IAA68OR;
protected boolean IAA68OU;
protected boolean IAA68WE;
protected boolean IAA68WL;
protected boolean IAA68WR;
protected boolean IAA68WU;
protected boolean IAA68YE;
protected boolean IAA68YL;
protected boolean IAA68YR;
protected boolean IAA68YU;
protected byte IAAIE;
protected short IAAIL;
protected byte IAAIR;
protected short IAAIU;
protected byte IAB11;
protected byte IAB12;
protected byte IAB13;
protected byte IAB14;
protected byte IAB15;
protected byte IAB16;
protected byte IAB17;
protected byte IAB18;
protected boolean IAB19;
protected byte IAB20;
protected byte IAB31;
protected byte IAB32;
protected byte IAB33;
protected byte IAB34;
protected byte IAB35;
protected byte IAB36;
protected boolean IAB37;
protected byte IAB38;
protected byte IAB39;
protected byte IAB40;
protected byte IAB48;
protected byte IAB49;
protected byte IAB50;
protected byte IAB51;
protected byte IAB52;
protected byte IAB53;
protected byte IAB54;
protected byte IAB62;
protected boolean IAB63;
protected byte IAB64;
protected byte IAB65;
protected byte IAB66;
protected byte IAB67;
protected byte IAB68;
protected byte IABEB;
protected byte IABEN1;
protected byte IABEN2;
protected byte IABEN3;
protected boolean IABEN4;
protected byte IABEP1;
protected byte IABEP2;
protected boolean IABEP3;
protected byte IABEPN1;
protected byte IABEPN2;
protected boolean IABEPN3;
protected byte IABER1;
protected byte IABER2;
protected byte IABER3;
protected byte IABER4;
protected byte IABM11;
protected byte IABM12;
protected byte IABM13;
protected byte IABM14;
protected byte IABM15;
protected boolean IABM16;
protected byte IABM17;
protected byte IABM18;
protected boolean IABM19;
protected byte IABM20;
protected byte IABM31;
protected byte IABM32;
protected byte IABM33;
protected boolean IABM34;
protected byte IABM35;
protected byte IABM36;
protected boolean IABM37;
protected byte IABM38;
protected boolean IABM39;
protected boolean IABM40;
protected byte IABM48;
protected byte IABM49;
protected byte IABM50;
protected byte IABM51;
protected byte IABM52;
protected byte IABM53;
protected byte IABM54;
protected byte IABM62;
protected boolean IABM63;
protected byte IABM64;
protected byte IABM65;
protected byte IABM66;
protected byte IABM67;
protected byte IABM68;
protected byte IABPM01;
protected byte IABPM02;
protected byte IABPM03;
protected byte IABRM01;
protected byte IABRM02;
protected byte IABRM03;
protected byte IABRM04;
protected byte IABW11;
protected byte IABW12;
protected byte IABW13;
protected byte IABW14;
protected byte IABW15;
protected byte IABW16;
protected byte IABW17;
protected byte IABW18;
protected boolean IABW19;
protected boolean IABW20;
protected byte IABW31;
protected byte IABW32;
protected byte IABW33;
protected byte IABW34;
protected byte IABW35;
protected boolean IABW36;
protected boolean IABW37;
protected boolean IABW38;
protected boolean IABW39;
protected byte IABW40;
protected byte IABW48;
protected byte IABW49;
protected byte IABW50;
protected byte IABW51;
protected byte IABW52;
protected byte IABW53;
protected byte IABW54;
protected boolean IABW62;
protected boolean IABW63;
protected byte IABW64;
protected byte IABW65;
protected boolean IABW66;
protected byte IABW67;
protected boolean IABW68;
protected byte IACIE;
protected short IACIL;
protected byte IACIR;
protected short IACIU;
protected byte IADEE;
protected short IADEL;
protected byte IADEM;
protected byte IADEN;
protected byte IADER;
protected short IADEU;
protected byte IAEA10E;
protected short IAEA10L;
protected byte IAEA10R;
protected short IAEA10U;
protected byte IAEA2E;
protected int IAEA2L;
protected byte IAEA2R;
protected int IAEA2U;
protected byte IAEA3E;
protected int IAEA3L;
protected byte IAEA3R;
protected int IAEA3U;
protected byte IAEA4E;
protected int IAEA4L;
protected byte IAEA4R;
protected int IAEA4U;
protected byte IAEA5E;
protected short IAEA5L;
protected byte IAEA5R;
protected int IAEA5U;
protected byte IAEA6E;
protected short IAEA6L;
protected byte IAEA6R;
protected short IAEA6U;
protected boolean IAEA7E;
protected boolean IAEA7L;
protected boolean IAEA7R;
protected short IAEA7U;
protected boolean IAEA8E;
protected boolean IAEA8L;
protected boolean IAEA8R;
protected boolean IAEA8U;
protected boolean IAEA9E;
protected boolean IAEA9L;
protected boolean IAEA9R;
protected boolean IAEA9U;
protected byte IAEAE;
protected short IAEAL;
protected int IAEAN;
protected int IAEAN02;
protected int IAEAN03;
protected short IAEAN04;
protected int IAEAN05;
protected short IAEAN06;
protected short IAEAN07;
protected boolean IAEAN08;
protected boolean IAEAN09;
protected boolean IAEAN10;
protected byte IAEAR;
protected int IAEAU;
protected byte IAFBE;
protected short IAFBL;
protected byte IAFBR;
protected int IAFBU;
protected byte IAFINDC;
protected byte IAFUEL;
protected byte IAHDB;
protected byte IAHDN01;
protected byte IAHDN02;
protected byte IAHDN03;
protected byte IAHDN04;
protected boolean IAHDN05;
protected byte IAHDP01;
protected byte IAHDP02;
protected byte IAHDP03;
protected boolean IAHDP04;
protected byte IAHDR01;
protected byte IAHDR02;
protected byte IAHDR03;
protected byte IAHDR04;
protected boolean IAHDR05;
protected byte IAHOE;
protected int IAHOL;
protected byte IAHOR;
protected int IAHOU;
protected byte IAHPM01;
protected byte IAHPM02;
protected byte IAHPM03;
protected boolean IAHPM04;
protected byte IAHPN01;
protected byte IAHPN02;
protected byte IAHPN03;
protected boolean IAHPN04;
protected byte IAHRM01;
protected byte IAHRM02;
protected byte IAHRM03;
protected byte IAHRM04;
protected boolean IAHRM05;
protected byte IAIRE;
protected short IAIRL;
protected byte IAIRR;
protected int IAIRU;
protected byte IAISA1;
protected byte IAISA2;
protected byte IAISA3;
protected byte IAISE;
protected short IAISL;
protected byte IAISR;
protected short IAISU;
protected byte IALIE;
protected int IALIL;
protected byte IALIR;
protected byte IALISE;
protected short IALISL;
protected byte IALISR;
protected short IALISU;
protected int IALIU;
protected byte IALIYE;
protected int IALIYL;
protected byte IALIYR;
protected int IALIYU;
protected byte IALM;
protected byte IALM10;
protected byte IALM2;
protected byte IALM21;
protected byte IALM22;
protected byte IALM23;
protected byte IALM24;
protected byte IALM25;
protected byte IALM26;
protected byte IALM27;
protected byte IALM28;
protected boolean IALM29;
protected byte IALM3;
protected boolean IALM30;
protected byte IALM4;
protected byte IALM41;
protected byte IALM42;
protected byte IALM43;
protected byte IALM44;
protected byte IALM45;
protected byte IALM46;
protected byte IALM47;
protected byte IALM5;
protected byte IALM55;
protected byte IALM56;
protected byte IALM57;
protected byte IALM58;
protected boolean IALM59;
protected byte IALM6;
protected byte IALM60;
protected byte IALM61;
protected byte IALM7;
protected byte IALM8;
protected boolean IALM9;
protected byte IALOAN1;
protected byte IALOAN2;
protected byte IALOAN3;
protected byte IALOAN4;
protected byte IALOE;
protected short IALOL;
protected byte IALOR;
protected short IALOU;
protected boolean IALRFE;
protected boolean IALRFL;
protected boolean IALRFR;
protected boolean IALRFU;
protected byte IALRME;
protected short IALRML;
protected byte IALRMR;
protected short IALRMU;
protected byte IALROE;
protected short IALROL;
protected byte IALROR;
protected short IALROU;
protected byte IALRWE;
protected byte IALRWL;
protected byte IALRWR;
protected byte IALRWU;
protected byte IALRYE;
protected short IALRYL;
protected byte IALRYR;
protected short IALRYU;
protected byte IALY;
protected byte IALY10;
protected byte IALY2;
protected byte IALY21;
protected byte IALY22;
protected byte IALY23;
protected byte IALY24;
protected byte IALY25;
protected byte IALY26;
protected byte IALY27;
protected byte IALY28;
protected boolean IALY29;
protected byte IALY3;
protected boolean IALY30;
protected byte IALY4;
protected byte IALY41;
protected byte IALY42;
protected byte IALY43;
protected byte IALY44;
protected byte IALY45;
protected byte IALY46;
protected byte IALY47;
protected byte IALY5;
protected byte IALY55;
protected byte IALY56;
protected byte IALY57;
protected byte IALY58;
protected boolean IALY59;
protected byte IALY6;
protected byte IALY60;
protected byte IALY61;
protected byte IALY7;
protected byte IALY8;
protected boolean IALY9;
protected byte IANPE;
protected short IANPL;
protected byte IANPR;
protected short IANPU;
protected byte IAOAE;
protected int IAOAL;
protected byte IAOAR;
protected int IAOAU;
protected byte IAOME;
protected int IAOML;
protected byte IAOMR;
protected int IAOMU;
protected byte IAORGFC;
protected byte IAOTHP3;
protected byte IAOWEE;
protected short IAOWEL;
protected byte IAOWER;
protected short IAOWEU;
protected byte IAP39;
protected byte IAP40;
protected byte IAP41;
protected byte IAP42;
protected byte IAP43;
protected byte IAP44;
protected byte IAP45;
protected byte IAP46;
protected byte IAP47;
protected byte IAP48;
protected byte IAP49;
protected byte IAP50;
protected byte IAP51;
protected byte IAP52;
protected byte IAP53;
protected byte IAP54;
protected byte IAP55;
protected byte IAP56;
protected byte IAP57;
protected byte IAP58;
protected byte IAP59;
protected byte IAP60;
protected byte IAP61;
protected byte IAP62;
protected byte IAP63;
protected byte IAP64;
protected byte IAP65;
protected byte IAP66;
protected byte IAP67;
protected byte IAP68;
protected byte IAPK1;
protected byte IAPK1E;
protected short IAPK1L;
protected byte IAPK1R;
protected int IAPK1U;
protected byte IAPK2;
protected byte IAPK2E;
protected short IAPK2L;
protected byte IAPK2R;
protected int IAPK2U;
protected byte IAPK3;
protected boolean IAPK3E;
protected boolean IAPK3L;
protected boolean IAPK3R;
protected boolean IAPK3U;
protected byte IAPK4;
protected byte IAPK4E;
protected short IAPK4L;
protected byte IAPK4R;
protected short IAPK4U;
protected boolean IAPK5;
protected byte IAPK5E;
protected int IAPK5L;
protected byte IAPK5R;
protected short IAPK5U;
protected byte IAPK6E;
protected int IAPK6L;
protected byte IAPK6R;
protected int IAPK6U;
protected byte IAPK7E;
protected byte IAPK7L;
protected byte IAPK7R;
protected short IAPK7U;
protected byte IAPK8E;
protected short IAPK8L;
protected byte IAPK8R;
protected short IAPK8U;
protected byte IAPKM01;
protected byte IAPKM02;
protected byte IAPKM03;
protected byte IAPKM04;
protected boolean IAPKM05;
protected byte IAPLW;
protected byte IAPLY;
protected byte IAPLYP;
protected byte IAPLYW;
protected byte IAPPE;
protected boolean IAPPFE;
protected boolean IAPPFL;
protected boolean IAPPFR;
protected boolean IAPPFU;
protected short IAPPL;
protected byte IAPPME;
protected short IAPPML;
protected byte IAPPMR;
protected short IAPPMU;
protected byte IAPPOE;
protected short IAPPOL;
protected byte IAPPOR;
protected short IAPPOU;
protected byte IAPPR;
protected short IAPPU;
protected byte IAPPWE;
protected byte IAPPWL;
protected byte IAPPWR;
protected byte IAPPWU;
protected boolean IAPPYE;
protected boolean IAPPYL;
protected boolean IAPPYR;
protected boolean IAPPYU;
protected byte IAPRC;
protected byte IAPROP1;
protected byte IAPROP2;
protected byte IAPROP3;
protected byte IAPROP4;
protected byte IAPROP5;
protected boolean IAPY2;
protected boolean IAPY3;
protected byte IAPYR;
protected boolean IAPYR2;
protected byte IAPYR2C;
protected boolean IAPYR3;
protected byte IAPYRC;
protected byte IAPYW02;
protected byte IAPYW03;
protected byte IAPYW04;
protected byte IAPYW05;
protected byte IAPYW06;
protected byte IAPYW07;
protected boolean IAPYW08;
protected boolean IAPYW09;
protected boolean IARE2FE;
protected boolean IARE2FL;
protected boolean IARE2FR;
protected boolean IARE2FU;
protected boolean IARE2ME;
protected boolean IARE2ML;
protected boolean IARE2MR;
protected boolean IARE2MU;
protected boolean IARE2OE;
protected boolean IARE2OL;
protected boolean IARE2OR;
protected boolean IARE2OU;
protected boolean IARE2WE;
protected boolean IARE2WL;
protected boolean IARE2WR;
protected boolean IARE2WU;
protected boolean IARE2YE;
protected boolean IARE2YL;
protected boolean IARE2YR;
protected boolean IARE2YU;
protected boolean IARE3FE;
protected boolean IARE3FL;
protected boolean IARE3FR;
protected boolean IARE3FU;
protected boolean IARE3ME;
protected boolean IARE3ML;
protected boolean IARE3MR;
protected boolean IARE3MU;
protected boolean IARE3OE;
protected boolean IARE3OL;
protected boolean IARE3OR;
protected boolean IARE3OU;
protected boolean IARE3WE;
protected boolean IARE3WL;
protected boolean IARE3WR;
protected boolean IARE3WU;
protected boolean IARE3YE;
protected boolean IARE3YL;
protected boolean IARE3YR;
protected boolean IARE3YU;
protected byte IAREE;
protected boolean IAREFE;
protected boolean IAREFL;
protected boolean IAREFR;
protected boolean IAREFU;
protected boolean IAREGFE;
protected boolean IAREGFL;
protected boolean IAREGFR;
protected boolean IAREGFU;
protected short IAREGM3;
protected byte IAREGME;
protected short IAREGML;
protected byte IAREGMR;
protected short IAREGMU;
protected byte IAREGO3;
protected boolean IAREGOE;
protected boolean IAREGOL;
protected boolean IAREGOR;
protected boolean IAREGOU;
protected boolean IAREGWE;
protected boolean IAREGWL;
protected boolean IAREGWR;
protected boolean IAREGWU;
protected boolean IAREGYE;
protected short IAREGYL;
protected byte IAREGYR;
protected int IAREGYU;
protected short IAREL;
protected boolean IAREME;
protected boolean IAREML;
protected boolean IAREMR;
protected boolean IAREMU;
protected boolean IAREOE;
protected boolean IAREOL;
protected boolean IAREOR;
protected boolean IAREOU;
protected byte IARER;
protected short IAREU;
protected boolean IAREWE;
protected boolean IAREWL;
protected boolean IAREWR;
protected boolean IAREWU;
protected boolean IAREYE;
protected boolean IAREYL;
protected boolean IAREYR;
protected boolean IAREYU;
protected byte IASAE;
protected int IASAL;
protected byte IASAR;
protected int IASAU;
protected byte IASCE;
protected int IASCL;
protected byte IASCR;
protected int IASCU;
protected byte IASHTY1;
protected byte IASHTY2;
protected byte IASHTY3;
protected byte IASHTY4;
protected byte IASI01;
protected byte IASI02;
protected byte IASI03;
protected byte IASI04;
protected byte IASI05;
protected byte IASI06;
protected byte IASI07;
protected byte IASI08;
protected byte IASI09;
protected byte IASI10;
protected byte IASI11;
protected byte IASIE;
protected short IASIL;
protected byte IASIR;
protected byte IASISE;
protected int IASISL;
protected byte IASISR;
protected int IASISU;
protected short IASIU;
protected byte IASSE;
protected byte IASSIE;
protected short IASSIL;
protected byte IASSIR;
protected short IASSIU;
protected int IASSL;
protected byte IASSR;
protected int IASSU;
protected boolean IAT39;
protected boolean IAT40;
protected boolean IAT41;
protected boolean IAT42;
protected boolean IAT43;
protected boolean IAT44;
protected boolean IAT45;
protected boolean IAT46;
protected boolean IAT47;
protected boolean IAT48;
protected boolean IAT49;
protected boolean IAT50;
protected boolean IAT51;
protected boolean IAT52;
protected boolean IAT53;
protected boolean IAT54;
protected boolean IAT55;
protected boolean IAT56;
protected boolean IAT57;
protected boolean IAT58;
protected boolean IAT59;
protected boolean IAT60;
protected boolean IAT61;
protected boolean IAT62;
protected boolean IAT63;
protected boolean IAT64;
protected boolean IAT65;
protected boolean IAT66;
protected boolean IAT67;
protected boolean IAT68;
protected byte IAUIE;
protected byte IAUIIE;
protected short IAUIIL;
protected byte IAUIIR;
protected short IAUIIU;
protected int IAUIL;
protected byte IAUIR;
protected int IAUIU;
protected int IDAIND;
protected byte IINTDTM;
protected short IINTDTY;
protected byte INDNO;
protected byte INDOC;
protected byte INDRS;
protected boolean INVCARE_P_F;
protected double INVCARE_P_I;
protected short INVCARE_P_O;
protected short INVCARE_P_T;
protected boolean INVCARE_R_F;
protected double INVCARE_R_I;
protected short INVCARE_R_O;
protected short INVCARE_R_T;
protected boolean MAINHH1;
protected byte MAXMEMTOT;
protected byte MMAIDC;
protected byte MMCOMZ1;
protected byte MMCOMZ2;
protected byte MMRECRC;
protected byte MMSTOP;
protected byte NCLM;
protected byte NCORREC;
protected byte NMISSED;
protected byte NOFIQ;
protected byte NROW;
protected short NROWCLM;
protected boolean NUMP;
protected boolean PAINHH1;
protected byte PARTNER;
protected byte PENTYPE_WAVE1;
protected byte PEN_ANY;
protected boolean PEN_DB;
protected boolean PEN_DC;
protected boolean PEN_DK;
protected double PRIPENW2_2002;
protected double PRIPENW2_SPA;
protected double PRIPENW3_2002;
protected double PRIPENW3_SPA;
protected double PRIPENW4_2002;
protected double PRIPENW4_SPA;
protected double PRIPENW5_2002;
protected double PRIPENW5_SPA;
protected double PRIPENW6_2002;
protected double PRIPENW6_SPA;
protected double PRIPENW7_2002;
protected double PRIPENW7_SPA;
protected double PRIPENW8_2002;
protected double PRIPENW8_SPA;
protected double PRIPENW9_2002;
protected double PRIPENW9_SPA;
protected double PRIPEN_2002;
protected double PRIPEN_SPA;
protected short PSMID;
protected short PSOLD;
protected boolean PUBPEN;
protected byte RAND14;
protected short RTHHOUT;
protected byte SCACCA;
protected byte SCACCB;
protected byte SCACCC;
protected byte SCACCD;
protected byte SCACCE;
protected byte SCACCF;
protected byte SCACCG;
protected byte SCACCH;
protected byte SCACCI;
protected byte SCACCJ;
protected byte SCDCA;
protected byte SCDCB;
protected byte SCDCC;
protected byte SCDCD;
protected byte SCDCE;
protected byte SCDCF;
protected byte SCDCG;
protected byte SCEND;
protected byte SCFAMM;
protected byte SCFMH;
protected byte SCFRDM;
protected byte SCGHQA;
protected byte SCGHQB;
protected byte SCGHQC;
protected byte SCGHQD;
protected byte SCGHQE;
protected byte SCGHQF;
protected byte SCGHQG;
protected byte SCGHQH;
protected byte SCGHQI;
protected byte SCGHQJ;
protected byte SCGHQK;
protected byte SCGHQL;
protected byte SCNOSC;
protected byte SCNOSCC;
protected byte SCORG1;
protected byte SCORG3;
protected byte SCORG4;
protected byte SCORG5;
protected byte SCORG6;
protected byte SCORG7;
protected byte SCORG8;
protected byte SCORG9;
protected byte SCORGA2;
protected byte SCPTPA1;
protected byte SCPTPA2;
protected byte SCPTPA3;
protected byte SCPTPA4;
protected byte SCPTPA5;
protected byte SCPTPA6;
protected byte SCPTPA7;
protected byte SCPTPA8;
protected byte SCPTPA9;
protected byte SCPTR;
protected byte SCPTRA;
protected byte SCPTRB;
protected byte SCPTRC;
protected byte SCPTRD;
protected byte SCPTRE;
protected byte SCPTRF;
protected byte SCPTRG;
protected byte SCSCA;
protected byte SCSCB;
protected byte SCSCC;
protected byte SCSCD;
protected byte SCSCE;
protected byte SCSCF;
protected byte SCSCG;
protected byte SCSCH;
protected byte SCSCI;
protected byte SC_REC;
protected byte SPCAA;
protected byte SPCAB1;
protected byte SPCAB2;
protected byte SPCAB3;
protected boolean SPCAB4;
protected short SPCAC;
protected byte SPCAM01;
protected byte SPCAM02;
protected byte SPCAM03;
protected boolean SPCAM04;
protected byte SPCIN;
protected byte SPCINB;
protected byte SPMUS;
protected byte SPMUSB;
protected byte SPREST;
protected byte SPRESTB;
protected byte SPTEA;
protected byte SPTEAB;
protected byte SPTRAB1;
protected byte SPTRAB2;
protected byte SPTRAB3;
protected byte SPTRAB4;
protected byte SPTRAB5;
protected byte SPTRAB6;
protected byte SPTRM01;
protected byte SPTRM02;
protected byte SPTRM03;
protected byte SPTRM04;
protected byte SPTRM05;
protected byte SPTRM06;
protected double STATEPENW2_2002;
protected double STATEPENW2_SPA;
protected double STATEPENW3_2002;
protected double STATEPENW3_SPA;
protected double STATEPENW4_2002;
protected double STATEPENW4_SPA;
protected double STATEPENW5_2002;
protected double STATEPENW5_SPA;
protected double STATEPENW6_2002;
protected double STATEPENW6_SPA;
protected double STATEPENW7_2002;
protected double STATEPENW7_SPA;
protected double STATEPENW8_2002;
protected double STATEPENW8_SPA;
protected double STATEPENW9_2002;
protected double STATEPENW9_SPA;
protected double STATEPEN_2002;
protected double STATEPEN_SPA;
protected boolean W1MOVER;
protected double W1WGT;
protected boolean WFTC_P_F;
protected double WFTC_P_I;
protected short WFTC_P_O;
protected short WFTC_P_T;
protected boolean WFTC_R_F;
protected double WFTC_R_I;
protected short WFTC_R_O;
protected short WFTC_R_T;
protected boolean WP1ASK;
protected boolean WP2ASK;
protected int WPAC2;
protected short WPACAT;
protected boolean WPACAT2;
protected byte WPACOA2;
protected short WPACOB2;
protected byte WPACOC2;
protected byte WPACON2;
protected byte WPACT1;
protected byte WPACT2;
protected byte WPACT3;
protected byte WPACT4;
protected byte WPACT5;
protected boolean WPACT6;
protected byte WPADY2;
protected byte WPAM2AE;
protected int WPAM2AL;
protected byte WPAM2AR;
protected int WPAM2AU;
protected byte WPAMAE;
protected int WPAMAL;
protected byte WPAMAR;
protected int WPAMAU;
protected short WPAMEC2;
protected int WPAMOU;
protected int WPAMOU2;
protected byte WPAMTE;
protected int WPAMTL;
protected byte WPAMTR;
protected int WPAMTU;
protected byte WPANYC;
protected byte WPANYC2;
protected byte WPANYP;
protected boolean WPAOFE;
protected short WPAOFL;
protected boolean WPAOFR;
protected short WPAOFU;
protected byte WPAOME;
protected short WPAOML;
protected byte WPAOMR;
protected short WPAOMU;
protected byte WPAOOE;
protected short WPAOOL;
protected byte WPAOOR;
protected short WPAOOU;
protected byte WPAOWE;
protected short WPAOWL;
protected byte WPAOWR;
protected short WPAOWU;
protected byte WPAOYE;
protected short WPAOYL;
protected byte WPAOYR;
protected int WPAOYU;
protected byte WPAP2E;
protected int WPAP2L;
protected byte WPAP2R;
protected int WPAP2U;
protected byte WPAPE;
protected int WPAPF2;
protected int WPAPL;
protected byte WPAPR;
protected int WPAPU;
protected byte WPAS2E;
protected short WPAS2L;
protected byte WPAS2R;
protected short WPAS2U;
protected short WPASAL2;
protected byte WPASE;
protected byte WPASKD;
protected byte WPASKE;
protected byte WPASKF;
protected int WPASL;
protected byte WPASR;
protected int WPASU;
protected short WPAUC;
protected byte WPBIME;
protected short WPBIML;
protected byte WPBIMR;
protected short WPBIMU;
protected byte WPBPS;
protected byte WPBTHA2;
protected byte WPBTHP2;
protected byte WPBUE;
protected int WPBUL;
protected byte WPBUR;
protected int WPBUU;
protected short WPCAMT;
protected short WPCAMT2;
protected boolean WPCASK;
protected int WPCB;
protected int WPCB2;
protected byte WPCB2E;
protected int WPCB2L;
protected boolean WPCB2R;
protected int WPCB2U;
protected byte WPCBE;
protected int WPCBL;
protected byte WPCBR;
protected int WPCBU;
protected byte WPCEMP2;
protected byte WPCJB1;
protected byte WPCJB2;
protected byte WPCJB3;
protected byte WPCJB4;
protected boolean WPCON;
protected byte WPCONS;
protected byte WPCONS2;
protected byte WPCOS;
protected byte WPCOS2;
protected byte WPCPER;
protected byte WPCPER2;
protected byte WPCPS;
protected byte WPCPS2;
protected byte WPCPSC;
protected byte WPCPSC2;
protected byte WPCU2E;
protected int WPCU2L;
protected byte WPCU2R;
protected int WPCU2U;
protected byte WPCUE;
protected int WPCUL;
protected byte WPCUR;
protected int WPCUU;
protected int WPCUV;
protected int WPCUV2;
protected short WPDE2;
protected short WPDE3;
protected byte WPDESC;
protected short WPDS2;
protected short WPDS3;
protected byte WPDSP;
protected byte WPDSP2;
protected boolean WPDSP2C;
protected byte WPDSPC;
protected byte WPEC;
protected byte WPECA;
protected int WPECNA;
protected byte WPECNA2;
protected byte WPECON;
protected byte WPECON2;
protected byte WPEFS;
protected byte WPEFS2;
protected boolean WPEPER2;
protected byte WPERA2;
protected byte WPERC2;
protected byte WPERET2;
protected byte WPESE;
protected short WPESL;
protected byte WPESR;
protected short WPESU;
protected short WPEXA;
protected byte WPEXAE;
protected short WPEXAL;
protected byte WPEXAR;
protected int WPEXAU;
protected byte WPEXTE;
protected boolean WPEXTL;
protected byte WPEXTR;
protected short WPEXTU;
protected byte WPEXW;
protected byte WPFINF;
protected byte WPFINF2;
protected byte WPFRAS2;
protected byte WPFRUC;
protected byte WPFSAP2;
protected byte WPFSAPC;
protected byte WPFSAV2;
protected byte WPFSCP2;
protected byte WPHCON;
protected byte WPHCON2;
protected byte WPHLWZ;
protected byte WPIFS01;
protected byte WPIFS02;
protected byte WPIFS03;
protected byte WPIFS04;
protected byte WPIFS1;
protected byte WPIFS10;
protected byte WPIFS11;
protected byte WPIFS12;
protected byte WPIFS2;
protected byte WPIFS3;
protected byte WPIFS4;
protected byte WPINF2;
protected byte WPINF3;
protected byte WPINFO;
protected byte WPINTA;
protected byte WPKP;
protected byte WPKP2;
protected byte WPKP2C;
protected byte WPKPC;
protected short WPLAC;
protected short WPLAC2;
protected byte WPLASM;
protected byte WPLASM2;
protected byte WPLASP;
protected byte WPLASP2;
protected short WPLASY;
protected short WPLASY2;
protected byte WPLCOM2;
protected short WPLCOY2;
protected byte WPLLJM;
protected short WPLLJY;
protected byte WPLP2AE;
protected int WPLP2AL;
protected byte WPLP2AR;
protected int WPLP2AU;
protected int WPLPA;
protected int WPLPA2;
protected byte WPLPAE;
protected int WPLPAL;
protected byte WPLPAR;
protected int WPLPAU;
protected byte WPLPE;
protected byte WPLPE2;
protected boolean WPLPTE;
protected short WPLPTL;
protected boolean WPLPTR;
protected short WPLPTU;
protected byte WPLRCM;
protected boolean WPLRCM2;
protected short WPLRCY;
protected short WPLRCY2;
protected byte WPLU2E;
protected int WPLU2L;
protected byte WPLU2R;
protected int WPLU2U;
protected byte WPLUE;
protected int WPLUL;
protected int WPLUMP2;
protected byte WPLUR;
protected int WPLUU;
protected byte WPMC2;
protected short WPMCA2;
protected byte WPMCAF2;
protected byte WPMCON2;
protected byte WPMEC2;
protected byte WPMFRC;
protected byte WPMFRC2;
protected byte WPMHE;
protected short WPMHL;
protected byte WPMHR;
protected short WPMHU;
protected int WPMLAS;
protected int WPMLAS2;
protected byte WPMMIN2;
protected short WPMRC;
protected short WPMRC2;
protected byte WPMRCP;
protected byte WPMRCP2;
protected byte WPMSC;
protected byte WPMSC2;
protected byte WPMSC3;
protected byte WPMUC;
protected boolean WPMUC2;
protected byte WPNIFP;
protected byte WPNIFP2;
protected byte WPNIRR2;
protected byte WPNOSC;
protected byte WPNRA2;
protected byte WPOARS;
protected byte WPOARS2;
protected int WPPA;
protected int WPPA2;
protected byte WPPA2AE;
protected int WPPA2AL;
protected byte WPPA2AR;
protected int WPPA2AU;
protected byte WPPA2TE;
protected short WPPA2TL;
protected byte WPPA2TR;
protected short WPPA2TU;
protected short WPPA3;
protected byte WPPA3AE;
protected short WPPA3AL;
protected byte WPPA3AR;
protected short WPPA3AU;
protected boolean WPPA3TE;
protected int WPPA3TL;
protected boolean WPPA3TR;
protected boolean WPPA3TU;
protected byte WPPAAE;
protected int WPPAAL;
protected byte WPPAAR;
protected int WPPAAU;
protected byte WPPAM;
protected byte WPPAM2;
protected byte WPPAM3;
protected byte WPPATE;
protected int WPPATL;
protected byte WPPATR;
protected int WPPATU;
protected byte WPPAY2;
protected byte WPPAY3;
protected byte WPPCON2;
protected byte WPPDES;
protected byte WPPDES2;
protected byte WPPDOC;
protected byte WPPE2AE;
protected short WPPE2AL;
protected byte WPPE2AR;
protected int WPPE2AU;
protected byte WPPEAE;
protected int WPPEAL;
protected byte WPPEAR;
protected int WPPEAU;
protected int WPPENB2;
protected byte WPPEPR;
protected byte WPPER;
protected byte WPPERC2;
protected byte WPPETE;
protected int WPPETL;
protected byte WPPETR;
protected int WPPETU;
protected byte WPPEXP;
protected byte WPPEXP2;
protected byte WPPFE;
protected int WPPFL;
protected byte WPPFR;
protected int WPPFU;
protected short WPPFVA2;
protected byte WPPLON;
protected byte WPPLON2;
protected byte WPPLP2;
protected byte WPPLPH2;
protected byte WPPRE;
protected int WPPRL;
protected byte WPPRPE;
protected byte WPPRR;
protected int WPPRU;
protected byte WPPS;
protected byte WPPSAL2;
protected byte WPPSM1;
protected byte WPPSM2;
protected byte WPPSMM1;
protected byte WPPSMM2;
protected byte WPPTOP2;
protected byte WPPTP2;
protected byte WPPW;
protected byte WPPW2ME;
protected byte WPPW2ML;
protected byte WPPW2MR;
protected byte WPPW2MU;
protected byte WPPW2OE;
protected boolean WPPW2OL;
protected boolean WPPW2OR;
protected boolean WPPW2OU;
protected boolean WPPW2WE;
protected boolean WPPW2WL;
protected boolean WPPW2WR;
protected boolean WPPW2WU;
protected byte WPPWME;
protected short WPPWML;
protected byte WPPWMR;
protected short WPPWMU;
protected byte WPPWOE;
protected byte WPPWOL;
protected byte WPPWOR;
protected short WPPWOU;
protected byte WPPWP;
protected byte WPPWP2;
protected byte WPPWP3;
protected int WPPWR;
protected short WPPWR2;
protected short WPPWR3;
protected byte WPPWWE;
protected short WPPWWL;
protected byte WPPWWR;
protected short WPPWWU;
protected byte WPPY2ME;
protected short WPPY2ML;
protected byte WPPY2MR;
protected short WPPY2MU;
protected byte WPPY2OE;
protected short WPPY2OL;
protected byte WPPY2OR;
protected byte WPPY2OU;
protected byte WPPY2WE;
protected byte WPPY2WL;
protected byte WPPY2WR;
protected byte WPPY2WU;
protected byte WPPY2YE;
protected short WPPY2YL;
protected byte WPPY2YR;
protected short WPPY2YU;
protected byte WPPY3ME;
protected short WPPY3ML;
protected byte WPPY3MR;
protected short WPPY3MU;
protected byte WPPY3OE;
protected byte WPPY3OL;
protected byte WPPY3OR;
protected byte WPPY3OU;
protected byte WPPY3YE;
protected short WPPY3YL;
protected byte WPPY3YR;
protected short WPPY3YU;
protected boolean WPPYFE;
protected boolean WPPYFL;
protected boolean WPPYFR;
protected boolean WPPYFU;
protected byte WPPYME;
protected short WPPYML;
protected byte WPPYMR;
protected short WPPYMU;
protected byte WPPYOE;
protected short WPPYOL;
protected byte WPPYOR;
protected short WPPYOU;
protected int WPPYR2;
protected int WPPYR3;
protected byte WPPYWE;
protected byte WPPYWL;
protected byte WPPYWR;
protected short WPPYWU;
protected byte WPPYYE;
protected short WPPYYL;
protected byte WPPYYR;
protected short WPPYYU;
protected byte WPRCON2;
protected byte WPREA01;
protected byte WPREA02;
protected byte WPREA03;
protected byte WPREA04;
protected byte WPREA05;
protected byte WPREA06;
protected boolean WPREA07;
protected byte WPREC2;
protected byte WPREC3;
protected byte WPREM01;
protected byte WPREM02;
protected byte WPREM03;
protected byte WPREM04;
protected byte WPREM05;
protected byte WPREM06;
protected boolean WPREM07;
protected byte WPREN;
protected byte WPRGH;
protected byte WPRGH2;
protected byte WPRGH3;
protected byte WPRRE01;
protected byte WPRRE02;
protected byte WPRRE03;
protected byte WPRRE04;
protected boolean WPRRE05;
protected boolean WPRRE06;
protected byte WPRRM01;
protected byte WPRRM02;
protected byte WPRRM03;
protected byte WPRRM04;
protected boolean WPRRM05;
protected boolean WPRRM06;
protected byte WPRSC1;
protected byte WPRSC10;
protected byte WPRSC2;
protected boolean WPRSC3;
protected byte WPRSC9;
protected byte WPRSM02;
protected boolean WPRSM03;
protected byte WPRSM09;
protected byte WPRSM1;
protected byte WPRSM10;
protected byte WPRSM2;
protected boolean WPRSM3;
protected byte WPSJOBM;
protected short WPSJOBY;
protected byte WPSRC;
protected byte WPSRC2;
protected byte WPTAWC;
protected byte WPTAX2;
protected byte WPTAX3;
protected byte WPTHFE;
protected short WPTHFL;
protected byte WPTHFR;
protected short WPTHFU;
protected byte WPTHME;
protected short WPTHML;
protected byte WPTHMR;
protected short WPTHMU;
protected byte WPTHOE;
protected short WPTHOL;
protected byte WPTHOR;
protected short WPTHOU;
protected byte WPTHWE;
protected short WPTHWL;
protected byte WPTHWR;
protected short WPTHWU;
protected byte WPTHYE;
protected short WPTHYL;
protected boolean WPTHYR;
protected int WPTHYU;
protected boolean WPUPFE;
protected boolean WPUPFL;
protected boolean WPUPFR;
protected short WPUPFU;
protected byte WPUPME;
protected short WPUPML;
protected boolean WPUPMR;
protected short WPUPMU;
protected byte WPUPOE;
protected short WPUPOL;
protected boolean WPUPOR;
protected short WPUPOU;
protected byte WPUPWE;
protected short WPUPWL;
protected byte WPUPWR;
protected short WPUPWU;
protected byte WPVBE;
protected int WPVBL;
protected byte WPVBR;
protected int WPVBU;
protected byte WPWEX;
protected byte WPWLE;
protected short WPWLL;
protected byte WPWLR;
protected int WPWLU;
protected byte WPWTX;
protected byte WPWTX2;
protected byte WPWTX3;
protected boolean WPXNO;
protected boolean WPXNO2;
protected byte WPYAER2;
protected byte WPYBS2;
protected int WPYCA2;
protected byte WPYCAT2;
protected byte WPYFRA;
protected byte WPYFRA2;
protected byte WPYPEN;
protected byte WPYPEN2;
protected final void initAAGEANGI(String s) {
if (!s.trim().isEmpty()) {
AAGEANGI = Byte.parseByte(s);
} else {
AAGEANGI = Byte.MIN_VALUE;
}
}

protected final void initAAGEDI(String s) {
if (!s.trim().isEmpty()) {
AAGEDI = Byte.parseByte(s);
} else {
AAGEDI = Byte.MIN_VALUE;
}
}

protected final void initAAGEHART(String s) {
if (!s.trim().isEmpty()) {
AAGEHART = Byte.parseByte(s);
} else {
AAGEHART = Byte.MIN_VALUE;
}
}

protected final void initAAGEMAB(String s) {
if (!s.trim().isEmpty()) {
AAGEMAB = Byte.parseByte(s);
} else {
AAGEMAB = Byte.MIN_VALUE;
}
}

protected final void initAAGEPAB(String s) {
if (!s.trim().isEmpty()) {
AAGEPAB = Byte.parseByte(s);
} else {
AAGEPAB = Byte.MIN_VALUE;
}
}

protected final void initAAGESTRO(String s) {
if (!s.trim().isEmpty()) {
AAGESTRO = Byte.parseByte(s);
} else {
AAGESTRO = Byte.MIN_VALUE;
}
}

protected final void initADIRCTR(String s) {
if (!s.trim().isEmpty()) {
ADIRCTR = Byte.parseByte(s);
} else {
ADIRCTR = Byte.MIN_VALUE;
}
}

protected final void initADRESP1(String s) {
if (!s.trim().isEmpty()) {
ADRESP1 = Byte.parseByte(s);
} else {
ADRESP1 = Byte.MIN_VALUE;
}
}

protected final void initADRESP2(String s) {
if (!s.trim().isEmpty()) {
ADRESP2 = Byte.parseByte(s);
} else {
ADRESP2 = Byte.MIN_VALUE;
}
}

protected final void initAECONACT(String s) {
if (!s.trim().isEmpty()) {
AECONACT = Byte.parseByte(s);
} else {
AECONACT = Byte.MIN_VALUE;
}
}

protected final void initAEDUCEND(String s) {
if (!s.trim().isEmpty()) {
AEDUCEND = Byte.parseByte(s);
} else {
AEDUCEND = Byte.MIN_VALUE;
}
}

protected final void initAEMPLOYE(String s) {
if (!s.trim().isEmpty()) {
AEMPLOYE = Byte.parseByte(s);
} else {
AEMPLOYE = Byte.MIN_VALUE;
}
}

protected final void initAEMPSTAT(String s) {
if (!s.trim().isEmpty()) {
AEMPSTAT = Byte.parseByte(s);
} else {
AEMPSTAT = Byte.MIN_VALUE;
}
}

protected final void initAETHNICR(String s) {
if (!s.trim().isEmpty()) {
AETHNICR = Byte.parseByte(s);
} else {
AETHNICR = Byte.MIN_VALUE;
}
}

protected final void initAEVERJOB(String s) {
if (!s.trim().isEmpty()) {
AEVERJOB = Byte.parseByte(s);
} else {
AEVERJOB = Byte.MIN_VALUE;
}
}

protected final void initAFTPTIME(String s) {
if (!s.trim().isEmpty()) {
AFTPTIME = Byte.parseByte(s);
} else {
AFTPTIME = Byte.MIN_VALUE;
}
}

protected final void initAHHLDR01(String s) {
if (!s.trim().isEmpty()) {
AHHLDR01 = Byte.parseByte(s);
} else {
AHHLDR01 = Byte.MIN_VALUE;
}
}

protected final void initAHHLDR02(String s) {
if (!s.trim().isEmpty()) {
AHHLDR02 = Byte.parseByte(s);
} else {
AHHLDR02 = Byte.MIN_VALUE;
}
}

protected final void initAHHLDR03(String s) {
if (!s.trim().isEmpty()) {
AHHLDR03 = Byte.parseByte(s);
} else {
AHHLDR03 = Byte.MIN_VALUE;
}
}

protected final void initAHHLDR04(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
AHHLDR04 = false;
} else {
AHHLDR04 = true;
}
}
}

protected final void initAHHSIZE(String s) {
if (!s.trim().isEmpty()) {
AHHSIZE = Byte.parseByte(s);
} else {
AHHSIZE = Byte.MIN_VALUE;
}
}

protected final void initAHSECLS2(String s) {
if (!s.trim().isEmpty()) {
AHSECLS2 = Short.parseShort(s);
} else {
AHSECLS2 = Short.MIN_VALUE;
}
}

protected final void initAHSEINT(String s) {
if (!s.trim().isEmpty()) {
AHSEINT = Byte.parseByte(s);
} else {
AHSEINT = Byte.MIN_VALUE;
}
}

protected final void initAHSEST(String s) {
if (!s.trim().isEmpty()) {
AHSEST = Byte.parseByte(s);
} else {
AHSEST = Byte.MIN_VALUE;
}
}

protected final void initAHSEYEAR(String s) {
if (!s.trim().isEmpty()) {
AHSEYEAR = Short.parseShort(s);
} else {
AHSEYEAR = Short.MIN_VALUE;
}
}

protected final void initALIVEMAB(String s) {
if (!s.trim().isEmpty()) {
ALIVEMAB = Byte.parseByte(s);
} else {
ALIVEMAB = Byte.MIN_VALUE;
}
}

protected final void initALIVEPAB(String s) {
if (!s.trim().isEmpty()) {
ALIVEPAB = Byte.parseByte(s);
} else {
ALIVEPAB = Byte.MIN_VALUE;
}
}

protected final void initALLOCP1(String s) {
if (!s.trim().isEmpty()) {
ALLOCP1 = Byte.parseByte(s);
} else {
ALLOCP1 = Byte.MIN_VALUE;
}
}

protected final void initALLOCP2(String s) {
if (!s.trim().isEmpty()) {
ALLOCP2 = Byte.parseByte(s);
} else {
ALLOCP2 = Byte.MIN_VALUE;
}
}

protected final void initAMINTB(String s) {
if (!s.trim().isEmpty()) {
AMINTB = Byte.parseByte(s);
} else {
AMINTB = Byte.MIN_VALUE;
}
}

protected final void initANACTIV(String s) {
if (!s.trim().isEmpty()) {
ANACTIV = Byte.parseByte(s);
} else {
ANACTIV = Byte.MIN_VALUE;
}
}

protected final void initANEMPLEE(String s) {
if (!s.trim().isEmpty()) {
ANEMPLEE = Byte.parseByte(s);
} else {
ANEMPLEE = Byte.MIN_VALUE;
}
}

protected final void initANSSEC(String s) {
if (!s.trim().isEmpty()) {
ANSSEC = Double.parseDouble(s);
} else {
ANSSEC = Double.NaN;
}
}

protected final void initAOTHPAID(String s) {
if (!s.trim().isEmpty()) {
AOTHPAID = Byte.parseByte(s);
} else {
AOTHPAID = Byte.MIN_VALUE;
}
}

protected final void initAPERSNO(String s) {
if (!s.trim().isEmpty()) {
APERSNO = Byte.parseByte(s);
} else {
APERSNO = Byte.MIN_VALUE;
}
}

protected final void initAPOBR(String s) {
if (!s.trim().isEmpty()) {
APOBR = Byte.parseByte(s);
} else {
APOBR = Byte.MIN_VALUE;
}
}

protected final void initAQUAL(String s) {
if (!s.trim().isEmpty()) {
AQUAL = Byte.parseByte(s);
} else {
AQUAL = Byte.MIN_VALUE;
}
}

protected final void initARELTO01(String s) {
if (!s.trim().isEmpty()) {
ARELTO01 = Byte.parseByte(s);
} else {
ARELTO01 = Byte.MIN_VALUE;
}
}

protected final void initARELTO02(String s) {
if (!s.trim().isEmpty()) {
ARELTO02 = Byte.parseByte(s);
} else {
ARELTO02 = Byte.MIN_VALUE;
}
}

protected final void initARELTO03(String s) {
if (!s.trim().isEmpty()) {
ARELTO03 = Byte.parseByte(s);
} else {
ARELTO03 = Byte.MIN_VALUE;
}
}

protected final void initARELTO04(String s) {
if (!s.trim().isEmpty()) {
ARELTO04 = Byte.parseByte(s);
} else {
ARELTO04 = Byte.MIN_VALUE;
}
}

protected final void initARELTO05(String s) {
if (!s.trim().isEmpty()) {
ARELTO05 = Byte.parseByte(s);
} else {
ARELTO05 = Byte.MIN_VALUE;
}
}

protected final void initARELTO06(String s) {
if (!s.trim().isEmpty()) {
ARELTO06 = Byte.parseByte(s);
} else {
ARELTO06 = Byte.MIN_VALUE;
}
}

protected final void initARELTO07(String s) {
if (!s.trim().isEmpty()) {
ARELTO07 = Byte.parseByte(s);
} else {
ARELTO07 = Byte.MIN_VALUE;
}
}

protected final void initARELTO08(String s) {
if (!s.trim().isEmpty()) {
ARELTO08 = Byte.parseByte(s);
} else {
ARELTO08 = Byte.MIN_VALUE;
}
}

protected final void initARELTO09(String s) {
if (!s.trim().isEmpty()) {
ARELTO09 = Byte.parseByte(s);
} else {
ARELTO09 = Byte.MIN_VALUE;
}
}

protected final void initARELTO10(String s) {
if (!s.trim().isEmpty()) {
ARELTO10 = Byte.parseByte(s);
} else {
ARELTO10 = Byte.MIN_VALUE;
}
}

protected final void initASAMPSTA(String s) {
if (!s.trim().isEmpty()) {
ASAMPSTA = s;
}
}

protected final void initASEX(String s) {
if (!s.trim().isEmpty()) {
ASEX = Byte.parseByte(s);
} else {
ASEX = Byte.MIN_VALUE;
}
}

protected final void initASKPAY(String s) {
if (!s.trim().isEmpty()) {
ASKPAY = Byte.parseByte(s);
} else {
ASKPAY = Byte.MIN_VALUE;
}
}

protected final void initASKPX1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
ASKPX1 = false;
} else {
ASKPX1 = true;
}
}
}

protected final void initASKREC(String s) {
if (!s.trim().isEmpty()) {
ASKREC = Byte.parseByte(s);
} else {
ASKREC = Byte.MIN_VALUE;
}
}

protected final void initASNEMPLE(String s) {
if (!s.trim().isEmpty()) {
ASNEMPLE = Byte.parseByte(s);
} else {
ASNEMPLE = Byte.MIN_VALUE;
}
}

protected final void initASOCCLS(String s) {
if (!s.trim().isEmpty()) {
ASOCCLS = Byte.parseByte(s);
} else {
ASOCCLS = Byte.MIN_VALUE;
}
}

protected final void initASTRATIF(String s) {
if (!s.trim().isEmpty()) {
ASTRATIF = Short.parseShort(s);
} else {
ASTRATIF = Short.MIN_VALUE;
}
}

protected final void initASTWORK(String s) {
if (!s.trim().isEmpty()) {
ASTWORK = Byte.parseByte(s);
} else {
ASTWORK = Byte.MIN_VALUE;
}
}

protected final void initATENUREB(String s) {
if (!s.trim().isEmpty()) {
ATENUREB = Byte.parseByte(s);
} else {
ATENUREB = Byte.MIN_VALUE;
}
}

protected final void initAWKLOOK(String s) {
if (!s.trim().isEmpty()) {
AWKLOOK = Byte.parseByte(s);
} else {
AWKLOOK = Byte.MIN_VALUE;
}
}

protected final void initAWKSTRT(String s) {
if (!s.trim().isEmpty()) {
AWKSTRT = Byte.parseByte(s);
} else {
AWKSTRT = Byte.MIN_VALUE;
}
}

protected final void initAXSC2000(String s) {
if (!s.trim().isEmpty()) {
AXSC2000 = Short.parseShort(s);
} else {
AXSC2000 = Short.MIN_VALUE;
}
}

protected final void initAYINTB(String s) {
if (!s.trim().isEmpty()) {
AYINTB = Short.parseShort(s);
} else {
AYINTB = Short.MIN_VALUE;
}
}

protected final void initCFANI(String s) {
if (!s.trim().isEmpty()) {
CFANI = Byte.parseByte(s);
} else {
CFANI = Byte.MIN_VALUE;
}
}

protected final void initCFEND(String s) {
if (!s.trim().isEmpty()) {
CFEND = Byte.parseByte(s);
} else {
CFEND = Byte.MIN_VALUE;
}
}

protected final void initCFMEM(String s) {
if (!s.trim().isEmpty()) {
CFMEM = Byte.parseByte(s);
} else {
CFMEM = Byte.MIN_VALUE;
}
}

protected final void initCFMEMS(String s) {
if (!s.trim().isEmpty()) {
CFMEMS = Byte.parseByte(s);
} else {
CFMEMS = Byte.MIN_VALUE;
}
}

protected final void initCFMETM(String s) {
if (!s.trim().isEmpty()) {
CFMETM = Byte.parseByte(s);
} else {
CFMETM = Byte.MIN_VALUE;
}
}

protected final void initCFMSCR(String s) {
if (!s.trim().isEmpty()) {
CFMSCR = Byte.parseByte(s);
} else {
CFMSCR = Byte.MIN_VALUE;
}
}

protected final void initCFPASCR(String s) {
if (!s.trim().isEmpty()) {
CFPASCR = Byte.parseByte(s);
} else {
CFPASCR = Byte.MIN_VALUE;
}
}

protected final void initCFPBSCR(String s) {
if (!s.trim().isEmpty()) {
CFPBSCR = Byte.parseByte(s);
} else {
CFPBSCR = Byte.MIN_VALUE;
}
}

protected final void initCFPMB(String s) {
if (!s.trim().isEmpty()) {
CFPMB = Byte.parseByte(s);
} else {
CFPMB = Byte.MIN_VALUE;
}
}

protected final void initCFPTSCR(String s) {
if (!s.trim().isEmpty()) {
CFPTSCR = Byte.parseByte(s);
} else {
CFPTSCR = Byte.MIN_VALUE;
}
}

protected final void initCFSUMA(String s) {
if (!s.trim().isEmpty()) {
CFSUMA = Byte.parseByte(s);
} else {
CFSUMA = Byte.MIN_VALUE;
}
}

protected final void initCFSUMB(String s) {
if (!s.trim().isEmpty()) {
CFSUMB = Byte.parseByte(s);
} else {
CFSUMB = Byte.MIN_VALUE;
}
}

protected final void initCFSUMC(String s) {
if (!s.trim().isEmpty()) {
CFSUMC = Byte.parseByte(s);
} else {
CFSUMC = Byte.MIN_VALUE;
}
}

protected final void initCFSUMD(String s) {
if (!s.trim().isEmpty()) {
CFSUMD = Byte.parseByte(s);
} else {
CFSUMD = Byte.MIN_VALUE;
}
}

protected final void initCFSUME(String s) {
if (!s.trim().isEmpty()) {
CFSUME = Byte.parseByte(s);
} else {
CFSUME = Byte.MIN_VALUE;
}
}

protected final void initCFSUMF(String s) {
if (!s.trim().isEmpty()) {
CFSUMF = Byte.parseByte(s);
} else {
CFSUMF = Byte.MIN_VALUE;
}
}

protected final void initCFWHO1(String s) {
if (!s.trim().isEmpty()) {
CFWHO1 = Byte.parseByte(s);
} else {
CFWHO1 = Byte.MIN_VALUE;
}
}

protected final void initCFWHO2(String s) {
if (!s.trim().isEmpty()) {
CFWHO2 = Byte.parseByte(s);
} else {
CFWHO2 = Byte.MIN_VALUE;
}
}

protected final void initCFWHO3(String s) {
if (!s.trim().isEmpty()) {
CFWHO3 = Byte.parseByte(s);
} else {
CFWHO3 = Byte.MIN_VALUE;
}
}

protected final void initCFWHZ1(String s) {
if (!s.trim().isEmpty()) {
CFWHZ1 = Byte.parseByte(s);
} else {
CFWHZ1 = Byte.MIN_VALUE;
}
}

protected final void initCFWHZ2(String s) {
if (!s.trim().isEmpty()) {
CFWHZ2 = Byte.parseByte(s);
} else {
CFWHZ2 = Byte.MIN_VALUE;
}
}

protected final void initCFWHZ3(String s) {
if (!s.trim().isEmpty()) {
CFWHZ3 = Byte.parseByte(s);
} else {
CFWHZ3 = Byte.MIN_VALUE;
}
}

protected final void initCFWHZ4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CFWHZ4 = false;
} else {
CFWHZ4 = true;
}
}
}

protected final void initCHINHH1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
CHINHH1 = false;
} else {
CHINHH1 = true;
}
}
}

protected final void initCOGREC(String s) {
if (!s.trim().isEmpty()) {
COGREC = Byte.parseByte(s);
} else {
COGREC = Byte.MIN_VALUE;
}
}

protected final void initCOUPLE1(String s) {
if (!s.trim().isEmpty()) {
COUPLE1 = Byte.parseByte(s);
} else {
COUPLE1 = Byte.MIN_VALUE;
}
}

protected final void initDCURPEN(String s) {
if (!s.trim().isEmpty()) {
DCURPEN = Byte.parseByte(s);
} else {
DCURPEN = Byte.MIN_VALUE;
}
}

protected final void initDDBDC(String s) {
if (!s.trim().isEmpty()) {
DDBDC = Byte.parseByte(s);
} else {
DDBDC = Byte.MIN_VALUE;
}
}

protected final void initDEMPPEN(String s) {
if (!s.trim().isEmpty()) {
DEMPPEN = Byte.parseByte(s);
} else {
DEMPPEN = Byte.MIN_VALUE;
}
}

protected final void initDHAGER(String s) {
if (!s.trim().isEmpty()) {
DHAGER = Byte.parseByte(s);
} else {
DHAGER = Byte.MIN_VALUE;
}
}

protected final void initDHANYPX(String s) {
if (!s.trim().isEmpty()) {
DHANYPX = Byte.parseByte(s);
} else {
DHANYPX = Byte.MIN_VALUE;
}
}

protected final void initDHCBY(String s) {
if (!s.trim().isEmpty()) {
DHCBY = Short.parseShort(s);
} else {
DHCBY = Short.MIN_VALUE;
}
}

protected final void initDHCBY02(String s) {
if (!s.trim().isEmpty()) {
DHCBY02 = Short.parseShort(s);
} else {
DHCBY02 = Short.MIN_VALUE;
}
}

protected final void initDHCBY03(String s) {
if (!s.trim().isEmpty()) {
DHCBY03 = Short.parseShort(s);
} else {
DHCBY03 = Short.MIN_VALUE;
}
}

protected final void initDHCBY04(String s) {
if (!s.trim().isEmpty()) {
DHCBY04 = Short.parseShort(s);
} else {
DHCBY04 = Short.MIN_VALUE;
}
}

protected final void initDHCBY05(String s) {
if (!s.trim().isEmpty()) {
DHCBY05 = Short.parseShort(s);
} else {
DHCBY05 = Short.MIN_VALUE;
}
}

protected final void initDHCBY06(String s) {
if (!s.trim().isEmpty()) {
DHCBY06 = Short.parseShort(s);
} else {
DHCBY06 = Short.MIN_VALUE;
}
}

protected final void initDHCBY07(String s) {
if (!s.trim().isEmpty()) {
DHCBY07 = Short.parseShort(s);
} else {
DHCBY07 = Short.MIN_VALUE;
}
}

protected final void initDHCBY08(String s) {
if (!s.trim().isEmpty()) {
DHCBY08 = Short.parseShort(s);
} else {
DHCBY08 = Short.MIN_VALUE;
}
}

protected final void initDHCBY09(String s) {
if (!s.trim().isEmpty()) {
DHCBY09 = Short.parseShort(s);
} else {
DHCBY09 = Short.MIN_VALUE;
}
}

protected final void initDHCBY10(String s) {
if (!s.trim().isEmpty()) {
DHCBY10 = Short.parseShort(s);
} else {
DHCBY10 = Short.MIN_VALUE;
}
}

protected final void initDHCBY11(String s) {
if (!s.trim().isEmpty()) {
DHCBY11 = Short.parseShort(s);
} else {
DHCBY11 = Short.MIN_VALUE;
}
}

protected final void initDHCBY12(String s) {
if (!s.trim().isEmpty()) {
DHCBY12 = Short.parseShort(s);
} else {
DHCBY12 = Short.MIN_VALUE;
}
}

protected final void initDHCBY13(String s) {
if (!s.trim().isEmpty()) {
DHCBY13 = Short.parseShort(s);
} else {
DHCBY13 = Short.MIN_VALUE;
}
}

protected final void initDHCH(String s) {
if (!s.trim().isEmpty()) {
DHCH = Byte.parseByte(s);
} else {
DHCH = Byte.MIN_VALUE;
}
}

protected final void initDHDOBYR(String s) {
if (!s.trim().isEmpty()) {
DHDOBYR = Short.parseShort(s);
} else {
DHDOBYR = Short.MIN_VALUE;
}
}

protected final void initDHM(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
DHM = false;
} else {
DHM = true;
}
}
}

protected final void initDHM10(String s) {
if (!s.trim().isEmpty()) {
DHM10 = Byte.parseByte(s);
} else {
DHM10 = Byte.MIN_VALUE;
}
}

protected final void initDHM11(String s) {
if (!s.trim().isEmpty()) {
DHM11 = Byte.parseByte(s);
} else {
DHM11 = Byte.MIN_VALUE;
}
}

protected final void initDHM12(String s) {
if (!s.trim().isEmpty()) {
DHM12 = Byte.parseByte(s);
} else {
DHM12 = Byte.MIN_VALUE;
}
}

protected final void initDHM13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHM13 = false;
} else {
DHM13 = true;
}
}
}

protected final void initDHM2(String s) {
if (!s.trim().isEmpty()) {
DHM2 = Byte.parseByte(s);
} else {
DHM2 = Byte.MIN_VALUE;
}
}

protected final void initDHM3(String s) {
if (!s.trim().isEmpty()) {
DHM3 = Byte.parseByte(s);
} else {
DHM3 = Byte.MIN_VALUE;
}
}

protected final void initDHM4(String s) {
if (!s.trim().isEmpty()) {
DHM4 = Byte.parseByte(s);
} else {
DHM4 = Byte.MIN_VALUE;
}
}

protected final void initDHM5(String s) {
if (!s.trim().isEmpty()) {
DHM5 = Byte.parseByte(s);
} else {
DHM5 = Byte.MIN_VALUE;
}
}

protected final void initDHM6(String s) {
if (!s.trim().isEmpty()) {
DHM6 = Byte.parseByte(s);
} else {
DHM6 = Byte.MIN_VALUE;
}
}

protected final void initDHM7(String s) {
if (!s.trim().isEmpty()) {
DHM7 = Byte.parseByte(s);
} else {
DHM7 = Byte.MIN_VALUE;
}
}

protected final void initDHM8(String s) {
if (!s.trim().isEmpty()) {
DHM8 = Byte.parseByte(s);
} else {
DHM8 = Byte.MIN_VALUE;
}
}

protected final void initDHM9(String s) {
if (!s.trim().isEmpty()) {
DHM9 = Byte.parseByte(s);
} else {
DHM9 = Byte.MIN_VALUE;
}
}

protected final void initDHNCH(String s) {
if (!s.trim().isEmpty()) {
DHNCH = Byte.parseByte(s);
} else {
DHNCH = Byte.MIN_VALUE;
}
}

protected final void initDHPRX01(String s) {
if (!s.trim().isEmpty()) {
DHPRX01 = Byte.parseByte(s);
} else {
DHPRX01 = Byte.MIN_VALUE;
}
}

protected final void initDHPRX02(String s) {
if (!s.trim().isEmpty()) {
DHPRX02 = Byte.parseByte(s);
} else {
DHPRX02 = Byte.MIN_VALUE;
}
}

protected final void initDHR13(String s) {
if (!s.trim().isEmpty()) {
DHR13 = Byte.parseByte(s);
} else {
DHR13 = Byte.MIN_VALUE;
}
}

protected final void initDHSEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
DHSEX = false;
} else {
DHSEX = true;
}
}
}

protected final void initDIAG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DIAG = false;
} else {
DIAG = true;
}
}
}

protected final void initDIDBNY(String s) {
if (!s.trim().isEmpty()) {
DIDBNY = Short.parseShort(s);
} else {
DIDBNY = Short.MIN_VALUE;
}
}

protected final void initDIDOB(String s) {
if (!s.trim().isEmpty()) {
DIDOB = Byte.parseByte(s);
} else {
DIDOB = Byte.MIN_VALUE;
}
}

protected final void initDIKLIVC(String s) {
if (!s.trim().isEmpty()) {
DIKLIVC = Byte.parseByte(s);
} else {
DIKLIVC = Byte.MIN_VALUE;
}
}

protected final void initDIMAR(String s) {
if (!s.trim().isEmpty()) {
DIMAR = Byte.parseByte(s);
} else {
DIMAR = Byte.MIN_VALUE;
}
}

protected final void initDISEX(String s) {
if (!s.trim().isEmpty()) {
DISEX = Byte.parseByte(s);
} else {
DISEX = Byte.MIN_VALUE;
}
}

protected final void initDPTC_P_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
DPTC_P_F = false;
} else {
DPTC_P_F = true;
}
}
}

protected final void initDPTC_P_I(String s) {
if (!s.trim().isEmpty()) {
DPTC_P_I = Byte.parseByte(s);
} else {
DPTC_P_I = Byte.MIN_VALUE;
}
}

protected final void initDPTC_P_O(String s) {
if (!s.trim().isEmpty()) {
DPTC_P_O = Short.parseShort(s);
} else {
DPTC_P_O = Short.MIN_VALUE;
}
}

protected final void initDPTC_P_T(String s) {
if (!s.trim().isEmpty()) {
DPTC_P_T = Short.parseShort(s);
} else {
DPTC_P_T = Short.MIN_VALUE;
}
}

protected final void initDPTC_R_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
DPTC_R_F = false;
} else {
DPTC_R_F = true;
}
}
}

protected final void initDPTC_R_I(String s) {
if (!s.trim().isEmpty()) {
DPTC_R_I = Double.parseDouble(s);
} else {
DPTC_R_I = Double.NaN;
}
}

protected final void initDPTC_R_O(String s) {
if (!s.trim().isEmpty()) {
DPTC_R_O = Short.parseShort(s);
} else {
DPTC_R_O = Short.MIN_VALUE;
}
}

protected final void initDPTC_R_T(String s) {
if (!s.trim().isEmpty()) {
DPTC_R_T = Short.parseShort(s);
} else {
DPTC_R_T = Short.MIN_VALUE;
}
}

protected final void initELIG(String s) {
if (!s.trim().isEmpty()) {
ELIG = Byte.parseByte(s);
} else {
ELIG = Byte.MIN_VALUE;
}
}

protected final void initELIGAT(String s) {
if (!s.trim().isEmpty()) {
ELIGAT = Byte.parseByte(s);
} else {
ELIGAT = Byte.MIN_VALUE;
}
}

protected final void initELIGBT(String s) {
if (!s.trim().isEmpty()) {
ELIGBT = Byte.parseByte(s);
} else {
ELIGBT = Byte.MIN_VALUE;
}
}

protected final void initELIGCT(String s) {
if (!s.trim().isEmpty()) {
ELIGCT = Byte.parseByte(s);
} else {
ELIGCT = Byte.MIN_VALUE;
}
}

protected final void initENSSEC(String s) {
if (!s.trim().isEmpty()) {
ENSSEC = Double.parseDouble(s);
} else {
ENSSEC = Double.NaN;
}
}

protected final void initEXPLAN(String s) {
if (!s.trim().isEmpty()) {
EXPLAN = Byte.parseByte(s);
} else {
EXPLAN = Byte.MIN_VALUE;
}
}

protected final void initEXPLANC(String s) {
if (!s.trim().isEmpty()) {
EXPLANC = Byte.parseByte(s);
} else {
EXPLANC = Byte.MIN_VALUE;
}
}

protected final void initEXS2000(String s) {
if (!s.trim().isEmpty()) {
EXS2000 = Short.parseShort(s);
} else {
EXS2000 = Short.MIN_VALUE;
}
}

protected final void initFINSTAT(String s) {
if (!s.trim().isEmpty()) {
FINSTAT = s;
}
}

protected final void initFQBACK1(String s) {
if (!s.trim().isEmpty()) {
FQBACK1 = Byte.parseByte(s);
} else {
FQBACK1 = Byte.MIN_VALUE;
}
}

protected final void initFQBACK2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
FQBACK2 = false;
} else {
FQBACK2 = true;
}
}
}

protected final void initFQBCG1(String s) {
if (!s.trim().isEmpty()) {
FQBCG1 = Byte.parseByte(s);
} else {
FQBCG1 = Byte.MIN_VALUE;
}
}

protected final void initFQCBAC1(String s) {
if (!s.trim().isEmpty()) {
FQCBAC1 = Byte.parseByte(s);
} else {
FQCBAC1 = Byte.MIN_VALUE;
}
}

protected final void initFQCBTHR(String s) {
if (!s.trim().isEmpty()) {
FQCBTHR = Byte.parseByte(s);
} else {
FQCBTHR = Byte.MIN_VALUE;
}
}

protected final void initFQCENG(String s) {
if (!s.trim().isEmpty()) {
FQCENG = Short.parseShort(s);
} else {
FQCENG = Short.MIN_VALUE;
}
}

protected final void initFQCUL1(String s) {
if (!s.trim().isEmpty()) {
FQCUL1 = Byte.parseByte(s);
} else {
FQCUL1 = Byte.MIN_VALUE;
}
}

protected final void initFQCUL2(String s) {
if (!s.trim().isEmpty()) {
FQCUL2 = Byte.parseByte(s);
} else {
FQCUL2 = Byte.MIN_VALUE;
}
}

protected final void initFQCUL3(String s) {
if (!s.trim().isEmpty()) {
FQCUL3 = Byte.parseByte(s);
} else {
FQCUL3 = Byte.MIN_VALUE;
}
}

protected final void initFQCULB1(String s) {
if (!s.trim().isEmpty()) {
FQCULB1 = Byte.parseByte(s);
} else {
FQCULB1 = Byte.MIN_VALUE;
}
}

protected final void initFQEND(String s) {
if (!s.trim().isEmpty()) {
FQEND = Byte.parseByte(s);
} else {
FQEND = Byte.MIN_VALUE;
}
}

protected final void initFQETHNR(String s) {
if (!s.trim().isEmpty()) {
FQETHNR = Byte.parseByte(s);
} else {
FQETHNR = Byte.MIN_VALUE;
}
}

protected final void initFQQUAL1(String s) {
if (!s.trim().isEmpty()) {
FQQUAL1 = Byte.parseByte(s);
} else {
FQQUAL1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUAL2(String s) {
if (!s.trim().isEmpty()) {
FQQUAL2 = Byte.parseByte(s);
} else {
FQQUAL2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUAL3(String s) {
if (!s.trim().isEmpty()) {
FQQUAL3 = Byte.parseByte(s);
} else {
FQQUAL3 = Byte.MIN_VALUE;
}
}

protected final void initFQQUZM1(String s) {
if (!s.trim().isEmpty()) {
FQQUZM1 = Byte.parseByte(s);
} else {
FQQUZM1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUZM2(String s) {
if (!s.trim().isEmpty()) {
FQQUZM2 = Byte.parseByte(s);
} else {
FQQUZM2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUZM3(String s) {
if (!s.trim().isEmpty()) {
FQQUZM3 = Byte.parseByte(s);
} else {
FQQUZM3 = Byte.MIN_VALUE;
}
}

protected final void initFQWCUL1(String s) {
if (!s.trim().isEmpty()) {
FQWCUL1 = Byte.parseByte(s);
} else {
FQWCUL1 = Byte.MIN_VALUE;
}
}

protected final void initFQWCUL2(String s) {
if (!s.trim().isEmpty()) {
FQWCUL2 = Byte.parseByte(s);
} else {
FQWCUL2 = Byte.MIN_VALUE;
}
}

protected final void initFQWCUL3(String s) {
if (!s.trim().isEmpty()) {
FQWCUL3 = Byte.parseByte(s);
} else {
FQWCUL3 = Byte.MIN_VALUE;
}
}

protected final void initFQWCUL4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
FQWCUL4 = false;
} else {
FQWCUL4 = true;
}
}
}

protected final void initGCINHH1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
GCINHH1 = false;
} else {
GCINHH1 = true;
}
}
}

protected final void initHEADA01(String s) {
if (!s.trim().isEmpty()) {
HEADA01 = Byte.parseByte(s);
} else {
HEADA01 = Byte.MIN_VALUE;
}
}

protected final void initHEADA02(String s) {
if (!s.trim().isEmpty()) {
HEADA02 = Byte.parseByte(s);
} else {
HEADA02 = Byte.MIN_VALUE;
}
}

protected final void initHEADA03(String s) {
if (!s.trim().isEmpty()) {
HEADA03 = Byte.parseByte(s);
} else {
HEADA03 = Byte.MIN_VALUE;
}
}

protected final void initHEADA04(String s) {
if (!s.trim().isEmpty()) {
HEADA04 = Byte.parseByte(s);
} else {
HEADA04 = Byte.MIN_VALUE;
}
}

protected final void initHEADA05(String s) {
if (!s.trim().isEmpty()) {
HEADA05 = Byte.parseByte(s);
} else {
HEADA05 = Byte.MIN_VALUE;
}
}

protected final void initHEADA06(String s) {
if (!s.trim().isEmpty()) {
HEADA06 = Byte.parseByte(s);
} else {
HEADA06 = Byte.MIN_VALUE;
}
}

protected final void initHEADA07(String s) {
if (!s.trim().isEmpty()) {
HEADA07 = Byte.parseByte(s);
} else {
HEADA07 = Byte.MIN_VALUE;
}
}

protected final void initHEADA08(String s) {
if (!s.trim().isEmpty()) {
HEADA08 = Byte.parseByte(s);
} else {
HEADA08 = Byte.MIN_VALUE;
}
}

protected final void initHEADA09(String s) {
if (!s.trim().isEmpty()) {
HEADA09 = Byte.parseByte(s);
} else {
HEADA09 = Byte.MIN_VALUE;
}
}

protected final void initHEADA10(String s) {
if (!s.trim().isEmpty()) {
HEADA10 = Byte.parseByte(s);
} else {
HEADA10 = Byte.MIN_VALUE;
}
}

protected final void initHEADA11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEADA11 = false;
} else {
HEADA11 = true;
}
}
}

protected final void initHEADB01(String s) {
if (!s.trim().isEmpty()) {
HEADB01 = Byte.parseByte(s);
} else {
HEADB01 = Byte.MIN_VALUE;
}
}

protected final void initHEADB02(String s) {
if (!s.trim().isEmpty()) {
HEADB02 = Byte.parseByte(s);
} else {
HEADB02 = Byte.MIN_VALUE;
}
}

protected final void initHEADB03(String s) {
if (!s.trim().isEmpty()) {
HEADB03 = Byte.parseByte(s);
} else {
HEADB03 = Byte.MIN_VALUE;
}
}

protected final void initHEADB04(String s) {
if (!s.trim().isEmpty()) {
HEADB04 = Byte.parseByte(s);
} else {
HEADB04 = Byte.MIN_VALUE;
}
}

protected final void initHEADB05(String s) {
if (!s.trim().isEmpty()) {
HEADB05 = Byte.parseByte(s);
} else {
HEADB05 = Byte.MIN_VALUE;
}
}

protected final void initHEADB06(String s) {
if (!s.trim().isEmpty()) {
HEADB06 = Byte.parseByte(s);
} else {
HEADB06 = Byte.MIN_VALUE;
}
}

protected final void initHEADB07(String s) {
if (!s.trim().isEmpty()) {
HEADB07 = Byte.parseByte(s);
} else {
HEADB07 = Byte.MIN_VALUE;
}
}

protected final void initHEADB08(String s) {
if (!s.trim().isEmpty()) {
HEADB08 = Byte.parseByte(s);
} else {
HEADB08 = Byte.MIN_VALUE;
}
}

protected final void initHEADB09(String s) {
if (!s.trim().isEmpty()) {
HEADB09 = Byte.parseByte(s);
} else {
HEADB09 = Byte.MIN_VALUE;
}
}

protected final void initHEADB10(String s) {
if (!s.trim().isEmpty()) {
HEADB10 = Byte.parseByte(s);
} else {
HEADB10 = Byte.MIN_VALUE;
}
}

protected final void initHEADB11(String s) {
if (!s.trim().isEmpty()) {
HEADB11 = Byte.parseByte(s);
} else {
HEADB11 = Byte.MIN_VALUE;
}
}

protected final void initHEADB12(String s) {
if (!s.trim().isEmpty()) {
HEADB12 = Byte.parseByte(s);
} else {
HEADB12 = Byte.MIN_VALUE;
}
}

protected final void initHEADB13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEADB13 = false;
} else {
HEADB13 = true;
}
}
}

protected final void initHEADB14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEADB14 = false;
} else {
HEADB14 = true;
}
}
}

protected final void initHEAGG(String s) {
if (!s.trim().isEmpty()) {
HEAGG = Byte.parseByte(s);
} else {
HEAGG = Byte.MIN_VALUE;
}
}

protected final void initHEAGH(String s) {
if (!s.trim().isEmpty()) {
HEAGH = Byte.parseByte(s);
} else {
HEAGH = Byte.MIN_VALUE;
}
}

protected final void initHEAID1(String s) {
if (!s.trim().isEmpty()) {
HEAID1 = Byte.parseByte(s);
} else {
HEAID1 = Byte.MIN_VALUE;
}
}

protected final void initHEAID2(String s) {
if (!s.trim().isEmpty()) {
HEAID2 = Byte.parseByte(s);
} else {
HEAID2 = Byte.MIN_VALUE;
}
}

protected final void initHEAID3(String s) {
if (!s.trim().isEmpty()) {
HEAID3 = Byte.parseByte(s);
} else {
HEAID3 = Byte.MIN_VALUE;
}
}

protected final void initHEAID4(String s) {
if (!s.trim().isEmpty()) {
HEAID4 = Byte.parseByte(s);
} else {
HEAID4 = Byte.MIN_VALUE;
}
}

protected final void initHEAID5(String s) {
if (!s.trim().isEmpty()) {
HEAID5 = Byte.parseByte(s);
} else {
HEAID5 = Byte.MIN_VALUE;
}
}

protected final void initHEAID6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEAID6 = false;
} else {
HEAID6 = true;
}
}
}

protected final void initHEAID7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEAID7 = false;
} else {
HEAID7 = true;
}
}
}

protected final void initHEAID8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEAID8 = false;
} else {
HEAID8 = true;
}
}
}

protected final void initHEALA(String s) {
if (!s.trim().isEmpty()) {
HEALA = Byte.parseByte(s);
} else {
HEALA = Byte.MIN_VALUE;
}
}

protected final void initHEALB(String s) {
if (!s.trim().isEmpty()) {
HEALB = Byte.parseByte(s);
} else {
HEALB = Byte.MIN_VALUE;
}
}

protected final void initHEALC(String s) {
if (!s.trim().isEmpty()) {
HEALC = Byte.parseByte(s);
} else {
HEALC = Byte.MIN_VALUE;
}
}

protected final void initHEANA(String s) {
if (!s.trim().isEmpty()) {
HEANA = Byte.parseByte(s);
} else {
HEANA = Byte.MIN_VALUE;
}
}

protected final void initHEANB(String s) {
if (!s.trim().isEmpty()) {
HEANB = Byte.parseByte(s);
} else {
HEANB = Byte.MIN_VALUE;
}
}

protected final void initHEANC(String s) {
if (!s.trim().isEmpty()) {
HEANC = Byte.parseByte(s);
} else {
HEANC = Byte.MIN_VALUE;
}
}

protected final void initHEAND(String s) {
if (!s.trim().isEmpty()) {
HEAND = Byte.parseByte(s);
} else {
HEAND = Byte.MIN_VALUE;
}
}

protected final void initHEANE(String s) {
if (!s.trim().isEmpty()) {
HEANE = Byte.parseByte(s);
} else {
HEANE = Byte.MIN_VALUE;
}
}

protected final void initHEANF(String s) {
if (!s.trim().isEmpty()) {
HEANF = Byte.parseByte(s);
} else {
HEANF = Byte.MIN_VALUE;
}
}

protected final void initHEANG(String s) {
if (!s.trim().isEmpty()) {
HEANG = Byte.parseByte(s);
} else {
HEANG = Byte.MIN_VALUE;
}
}

protected final void initHEANH(String s) {
if (!s.trim().isEmpty()) {
HEANH = Byte.parseByte(s);
} else {
HEANH = Byte.MIN_VALUE;
}
}

protected final void initHEANI(String s) {
if (!s.trim().isEmpty()) {
HEANI = Byte.parseByte(s);
} else {
HEANI = Byte.MIN_VALUE;
}
}

protected final void initHEANIC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEANIC = false;
} else {
HEANIC = true;
}
}
}

protected final void initHEANK(String s) {
if (!s.trim().isEmpty()) {
HEANK = Byte.parseByte(s);
} else {
HEANK = Byte.MIN_VALUE;
}
}

protected final void initHEART1(String s) {
if (!s.trim().isEmpty()) {
HEART1 = Byte.parseByte(s);
} else {
HEART1 = Byte.MIN_VALUE;
}
}

protected final void initHEART2(String s) {
if (!s.trim().isEmpty()) {
HEART2 = Byte.parseByte(s);
} else {
HEART2 = Byte.MIN_VALUE;
}
}

protected final void initHEART3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEART3 = false;
} else {
HEART3 = true;
}
}
}

protected final void initHEATA(String s) {
if (!s.trim().isEmpty()) {
HEATA = Byte.parseByte(s);
} else {
HEATA = Byte.MIN_VALUE;
}
}

protected final void initHEATT01(String s) {
if (!s.trim().isEmpty()) {
HEATT01 = Byte.parseByte(s);
} else {
HEATT01 = Byte.MIN_VALUE;
}
}

protected final void initHEATT02(String s) {
if (!s.trim().isEmpty()) {
HEATT02 = Byte.parseByte(s);
} else {
HEATT02 = Byte.MIN_VALUE;
}
}

protected final void initHEATT03(String s) {
if (!s.trim().isEmpty()) {
HEATT03 = Byte.parseByte(s);
} else {
HEATT03 = Byte.MIN_VALUE;
}
}

protected final void initHEATT04(String s) {
if (!s.trim().isEmpty()) {
HEATT04 = Byte.parseByte(s);
} else {
HEATT04 = Byte.MIN_VALUE;
}
}

protected final void initHEATT05(String s) {
if (!s.trim().isEmpty()) {
HEATT05 = Byte.parseByte(s);
} else {
HEATT05 = Byte.MIN_VALUE;
}
}

protected final void initHEATT06(String s) {
if (!s.trim().isEmpty()) {
HEATT06 = Byte.parseByte(s);
} else {
HEATT06 = Byte.MIN_VALUE;
}
}

protected final void initHEATT07(String s) {
if (!s.trim().isEmpty()) {
HEATT07 = Byte.parseByte(s);
} else {
HEATT07 = Byte.MIN_VALUE;
}
}

protected final void initHEATT08(String s) {
if (!s.trim().isEmpty()) {
HEATT08 = Byte.parseByte(s);
} else {
HEATT08 = Byte.MIN_VALUE;
}
}

protected final void initHEATT09(String s) {
if (!s.trim().isEmpty()) {
HEATT09 = Byte.parseByte(s);
} else {
HEATT09 = Byte.MIN_VALUE;
}
}

protected final void initHEATT10(String s) {
if (!s.trim().isEmpty()) {
HEATT10 = Byte.parseByte(s);
} else {
HEATT10 = Byte.MIN_VALUE;
}
}

protected final void initHEATT11(String s) {
if (!s.trim().isEmpty()) {
HEATT11 = Byte.parseByte(s);
} else {
HEATT11 = Byte.MIN_VALUE;
}
}

protected final void initHEATT12(String s) {
if (!s.trim().isEmpty()) {
HEATT12 = Byte.parseByte(s);
} else {
HEATT12 = Byte.MIN_VALUE;
}
}

protected final void initHEATT13(String s) {
if (!s.trim().isEmpty()) {
HEATT13 = Byte.parseByte(s);
} else {
HEATT13 = Byte.MIN_VALUE;
}
}

protected final void initHEATT14(String s) {
if (!s.trim().isEmpty()) {
HEATT14 = Byte.parseByte(s);
} else {
HEATT14 = Byte.MIN_VALUE;
}
}

protected final void initHEATT15(String s) {
if (!s.trim().isEmpty()) {
HEATT15 = Byte.parseByte(s);
} else {
HEATT15 = Byte.MIN_VALUE;
}
}

protected final void initHEATT16(String s) {
if (!s.trim().isEmpty()) {
HEATT16 = Byte.parseByte(s);
} else {
HEATT16 = Byte.MIN_VALUE;
}
}

protected final void initHEATT17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEATT17 = false;
} else {
HEATT17 = true;
}
}
}

protected final void initHEAVOID(String s) {
if (!s.trim().isEmpty()) {
HEAVOID = Byte.parseByte(s);
} else {
HEAVOID = Byte.MIN_VALUE;
}
}

protected final void initHEBAL(String s) {
if (!s.trim().isEmpty()) {
HEBAL = Byte.parseByte(s);
} else {
HEBAL = Byte.MIN_VALUE;
}
}

protected final void initHECANA(String s) {
if (!s.trim().isEmpty()) {
HECANA = Byte.parseByte(s);
} else {
HECANA = Byte.MIN_VALUE;
}
}

protected final void initHECDA(String s) {
if (!s.trim().isEmpty()) {
HECDA = Byte.parseByte(s);
} else {
HECDA = Byte.MIN_VALUE;
}
}

protected final void initHECDB(String s) {
if (!s.trim().isEmpty()) {
HECDB = Byte.parseByte(s);
} else {
HECDB = Byte.MIN_VALUE;
}
}

protected final void initHECDC(String s) {
if (!s.trim().isEmpty()) {
HECDC = Byte.parseByte(s);
} else {
HECDC = Byte.MIN_VALUE;
}
}

protected final void initHECDD(String s) {
if (!s.trim().isEmpty()) {
HECDD = Byte.parseByte(s);
} else {
HECDD = Byte.MIN_VALUE;
}
}

protected final void initHECDE(String s) {
if (!s.trim().isEmpty()) {
HECDE = Byte.parseByte(s);
} else {
HECDE = Byte.MIN_VALUE;
}
}

protected final void initHECDF1(String s) {
if (!s.trim().isEmpty()) {
HECDF1 = Byte.parseByte(s);
} else {
HECDF1 = Byte.MIN_VALUE;
}
}

protected final void initHECDF2(String s) {
if (!s.trim().isEmpty()) {
HECDF2 = Byte.parseByte(s);
} else {
HECDF2 = Byte.MIN_VALUE;
}
}

protected final void initHECDF3(String s) {
if (!s.trim().isEmpty()) {
HECDF3 = Byte.parseByte(s);
} else {
HECDF3 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA01(String s) {
if (!s.trim().isEmpty()) {
HEDIA01 = Byte.parseByte(s);
} else {
HEDIA01 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA02(String s) {
if (!s.trim().isEmpty()) {
HEDIA02 = Byte.parseByte(s);
} else {
HEDIA02 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA03(String s) {
if (!s.trim().isEmpty()) {
HEDIA03 = Byte.parseByte(s);
} else {
HEDIA03 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA04(String s) {
if (!s.trim().isEmpty()) {
HEDIA04 = Byte.parseByte(s);
} else {
HEDIA04 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA05(String s) {
if (!s.trim().isEmpty()) {
HEDIA05 = Byte.parseByte(s);
} else {
HEDIA05 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA06(String s) {
if (!s.trim().isEmpty()) {
HEDIA06 = Byte.parseByte(s);
} else {
HEDIA06 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA07(String s) {
if (!s.trim().isEmpty()) {
HEDIA07 = Byte.parseByte(s);
} else {
HEDIA07 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIA08 = false;
} else {
HEDIA08 = true;
}
}
}

protected final void initHEDIA09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIA09 = false;
} else {
HEDIA09 = true;
}
}
}

protected final void initHEDIA10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIA10 = false;
} else {
HEDIA10 = true;
}
}
}

protected final void initHEDIB01(String s) {
if (!s.trim().isEmpty()) {
HEDIB01 = Byte.parseByte(s);
} else {
HEDIB01 = Byte.MIN_VALUE;
}
}

protected final void initHEDIB02(String s) {
if (!s.trim().isEmpty()) {
HEDIB02 = Byte.parseByte(s);
} else {
HEDIB02 = Byte.MIN_VALUE;
}
}

protected final void initHEDIB03(String s) {
if (!s.trim().isEmpty()) {
HEDIB03 = Byte.parseByte(s);
} else {
HEDIB03 = Byte.MIN_VALUE;
}
}

protected final void initHEDIB04(String s) {
if (!s.trim().isEmpty()) {
HEDIB04 = Byte.parseByte(s);
} else {
HEDIB04 = Byte.MIN_VALUE;
}
}

protected final void initHEDIB05(String s) {
if (!s.trim().isEmpty()) {
HEDIB05 = Byte.parseByte(s);
} else {
HEDIB05 = Byte.MIN_VALUE;
}
}

protected final void initHEDIB06(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIB06 = false;
} else {
HEDIB06 = true;
}
}
}

protected final void initHEDIB07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIB07 = false;
} else {
HEDIB07 = true;
}
}
}

protected final void initHEDIB08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIB08 = false;
} else {
HEDIB08 = true;
}
}
}

protected final void initHEDIB09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIB09 = false;
} else {
HEDIB09 = true;
}
}
}

protected final void initHEDIB10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIB10 = false;
} else {
HEDIB10 = true;
}
}
}

protected final void initHEDIM01(String s) {
if (!s.trim().isEmpty()) {
HEDIM01 = Byte.parseByte(s);
} else {
HEDIM01 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM02(String s) {
if (!s.trim().isEmpty()) {
HEDIM02 = Byte.parseByte(s);
} else {
HEDIM02 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM03(String s) {
if (!s.trim().isEmpty()) {
HEDIM03 = Byte.parseByte(s);
} else {
HEDIM03 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM04(String s) {
if (!s.trim().isEmpty()) {
HEDIM04 = Byte.parseByte(s);
} else {
HEDIM04 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM05(String s) {
if (!s.trim().isEmpty()) {
HEDIM05 = Byte.parseByte(s);
} else {
HEDIM05 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM06(String s) {
if (!s.trim().isEmpty()) {
HEDIM06 = Byte.parseByte(s);
} else {
HEDIM06 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDIM07 = false;
} else {
HEDIM07 = true;
}
}
}

protected final void initHEDIZ(String s) {
if (!s.trim().isEmpty()) {
HEDIZ = Byte.parseByte(s);
} else {
HEDIZ = Byte.MIN_VALUE;
}
}

protected final void initHEGENH(String s) {
if (!s.trim().isEmpty()) {
HEGENH = Byte.parseByte(s);
} else {
HEGENH = Byte.MIN_VALUE;
}
}

protected final void initHEGENHB(String s) {
if (!s.trim().isEmpty()) {
HEGENHB = Byte.parseByte(s);
} else {
HEGENHB = Byte.MIN_VALUE;
}
}

protected final void initHEHELF(String s) {
if (!s.trim().isEmpty()) {
HEHELF = Byte.parseByte(s);
} else {
HEHELF = Byte.MIN_VALUE;
}
}

protected final void initHEHELFB(String s) {
if (!s.trim().isEmpty()) {
HEHELFB = Byte.parseByte(s);
} else {
HEHELFB = Byte.MIN_VALUE;
}
}

protected final void initHEHPA(String s) {
if (!s.trim().isEmpty()) {
HEHPA = Byte.parseByte(s);
} else {
HEHPA = Byte.MIN_VALUE;
}
}

protected final void initHEHPB01(String s) {
if (!s.trim().isEmpty()) {
HEHPB01 = Byte.parseByte(s);
} else {
HEHPB01 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB02(String s) {
if (!s.trim().isEmpty()) {
HEHPB02 = Byte.parseByte(s);
} else {
HEHPB02 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB03(String s) {
if (!s.trim().isEmpty()) {
HEHPB03 = Byte.parseByte(s);
} else {
HEHPB03 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB04(String s) {
if (!s.trim().isEmpty()) {
HEHPB04 = Byte.parseByte(s);
} else {
HEHPB04 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB05(String s) {
if (!s.trim().isEmpty()) {
HEHPB05 = Byte.parseByte(s);
} else {
HEHPB05 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB06(String s) {
if (!s.trim().isEmpty()) {
HEHPB06 = Byte.parseByte(s);
} else {
HEHPB06 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB07(String s) {
if (!s.trim().isEmpty()) {
HEHPB07 = Byte.parseByte(s);
} else {
HEHPB07 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB08(String s) {
if (!s.trim().isEmpty()) {
HEHPB08 = Byte.parseByte(s);
} else {
HEHPB08 = Byte.MIN_VALUE;
}
}

protected final void initHEHPB09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEHPB09 = false;
} else {
HEHPB09 = true;
}
}
}

protected final void initHEHPB10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEHPB10 = false;
} else {
HEHPB10 = true;
}
}
}

protected final void initHEHPB11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEHPB11 = false;
} else {
HEHPB11 = true;
}
}
}

protected final void initHEHPB12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEHPB12 = false;
} else {
HEHPB12 = true;
}
}
}

protected final void initHEHPB13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEHPB13 = false;
} else {
HEHPB13 = true;
}
}
}

protected final void initHEHPB14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEHPB14 = false;
} else {
HEHPB14 = true;
}
}
}

protected final void initHEHPB15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEHPB15 = false;
} else {
HEHPB15 = true;
}
}
}

protected final void initHEHPB16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEHPB16 = false;
} else {
HEHPB16 = true;
}
}
}

protected final void initHEHPC(String s) {
if (!s.trim().isEmpty()) {
HEHPC = Byte.parseByte(s);
} else {
HEHPC = Byte.MIN_VALUE;
}
}

protected final void initHEINCT(String s) {
if (!s.trim().isEmpty()) {
HEINCT = Byte.parseByte(s);
} else {
HEINCT = Byte.MIN_VALUE;
}
}

protected final void initHEJIA1(String s) {
if (!s.trim().isEmpty()) {
HEJIA1 = Byte.parseByte(s);
} else {
HEJIA1 = Byte.MIN_VALUE;
}
}

protected final void initHEJIA2(String s) {
if (!s.trim().isEmpty()) {
HEJIA2 = Byte.parseByte(s);
} else {
HEJIA2 = Byte.MIN_VALUE;
}
}

protected final void initHEJIA3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEJIA3 = false;
} else {
HEJIA3 = true;
}
}
}

protected final void initHEJIA4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEJIA4 = false;
} else {
HEJIA4 = true;
}
}
}

protected final void initHEJIA5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEJIA5 = false;
} else {
HEJIA5 = true;
}
}
}

protected final void initHEJIA6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEJIA6 = false;
} else {
HEJIA6 = true;
}
}
}

protected final void initHEJIB(String s) {
if (!s.trim().isEmpty()) {
HEJIB = Byte.parseByte(s);
} else {
HEJIB = Byte.MIN_VALUE;
}
}

protected final void initHEJIC(String s) {
if (!s.trim().isEmpty()) {
HEJIC = Byte.parseByte(s);
} else {
HEJIC = Byte.MIN_VALUE;
}
}

protected final void initHEOPT1(String s) {
if (!s.trim().isEmpty()) {
HEOPT1 = Byte.parseByte(s);
} else {
HEOPT1 = Byte.MIN_VALUE;
}
}

protected final void initHEOPT2(String s) {
if (!s.trim().isEmpty()) {
HEOPT2 = Byte.parseByte(s);
} else {
HEOPT2 = Byte.MIN_VALUE;
}
}

protected final void initHEOPT3(String s) {
if (!s.trim().isEmpty()) {
HEOPT3 = Byte.parseByte(s);
} else {
HEOPT3 = Byte.MIN_VALUE;
}
}

protected final void initHEOPT4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEOPT4 = false;
} else {
HEOPT4 = true;
}
}
}

protected final void initHEOPT5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEOPT5 = false;
} else {
HEOPT5 = true;
}
}
}

protected final void initHEPAB(String s) {
if (!s.trim().isEmpty()) {
HEPAB = Byte.parseByte(s);
} else {
HEPAB = Byte.MIN_VALUE;
}
}

protected final void initHEPSY1(String s) {
if (!s.trim().isEmpty()) {
HEPSY1 = Byte.parseByte(s);
} else {
HEPSY1 = Byte.MIN_VALUE;
}
}

protected final void initHEPSY2(String s) {
if (!s.trim().isEmpty()) {
HEPSY2 = Byte.parseByte(s);
} else {
HEPSY2 = Byte.MIN_VALUE;
}
}

protected final void initHEPSY3(String s) {
if (!s.trim().isEmpty()) {
HEPSY3 = Byte.parseByte(s);
} else {
HEPSY3 = Byte.MIN_VALUE;
}
}

protected final void initHEPSY4(String s) {
if (!s.trim().isEmpty()) {
HEPSY4 = Byte.parseByte(s);
} else {
HEPSY4 = Byte.MIN_VALUE;
}
}

protected final void initHEPSY5(String s) {
if (!s.trim().isEmpty()) {
HEPSY5 = Byte.parseByte(s);
} else {
HEPSY5 = Byte.MIN_VALUE;
}
}

protected final void initHEPSY6(String s) {
if (!s.trim().isEmpty()) {
HEPSY6 = Byte.parseByte(s);
} else {
HEPSY6 = Byte.MIN_VALUE;
}
}

protected final void initHEPSY7(String s) {
if (!s.trim().isEmpty()) {
HEPSY7 = Byte.parseByte(s);
} else {
HEPSY7 = Byte.MIN_VALUE;
}
}

protected final void initHEPSY8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEPSY8 = false;
} else {
HEPSY8 = true;
}
}
}

protected final void initHEPSY9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEPSY9 = false;
} else {
HEPSY9 = true;
}
}
}

protected final void initHERPA(String s) {
if (!s.trim().isEmpty()) {
HERPA = Byte.parseByte(s);
} else {
HERPA = Byte.MIN_VALUE;
}
}

protected final void initHERPB(String s) {
if (!s.trim().isEmpty()) {
HERPB = Byte.parseByte(s);
} else {
HERPB = Byte.MIN_VALUE;
}
}

protected final void initHERPC(String s) {
if (!s.trim().isEmpty()) {
HERPC = Byte.parseByte(s);
} else {
HERPC = Byte.MIN_VALUE;
}
}

protected final void initHERPD(String s) {
if (!s.trim().isEmpty()) {
HERPD = Byte.parseByte(s);
} else {
HERPD = Byte.MIN_VALUE;
}
}

protected final void initHERPE(String s) {
if (!s.trim().isEmpty()) {
HERPE = Byte.parseByte(s);
} else {
HERPE = Byte.MIN_VALUE;
}
}

protected final void initHERPF(String s) {
if (!s.trim().isEmpty()) {
HERPF = Byte.parseByte(s);
} else {
HERPF = Byte.MIN_VALUE;
}
}

protected final void initHERPG(String s) {
if (!s.trim().isEmpty()) {
HERPG = Byte.parseByte(s);
} else {
HERPG = Byte.MIN_VALUE;
}
}

protected final void initHERPH(String s) {
if (!s.trim().isEmpty()) {
HERPH = Byte.parseByte(s);
} else {
HERPH = Byte.MIN_VALUE;
}
}

protected final void initHERPI(String s) {
if (!s.trim().isEmpty()) {
HERPI = Byte.parseByte(s);
} else {
HERPI = Byte.MIN_VALUE;
}
}

protected final void initHERPJ(String s) {
if (!s.trim().isEmpty()) {
HERPJ = Byte.parseByte(s);
} else {
HERPJ = Byte.MIN_VALUE;
}
}

protected final void initHEYRB(String s) {
if (!s.trim().isEmpty()) {
HEYRB = Byte.parseByte(s);
} else {
HEYRB = Byte.MIN_VALUE;
}
}

protected final void initHHSEL(String s) {
if (!s.trim().isEmpty()) {
HHSEL = Byte.parseByte(s);
} else {
HHSEL = Byte.MIN_VALUE;
}
}

protected final void initHOADP01(String s) {
if (!s.trim().isEmpty()) {
HOADP01 = Byte.parseByte(s);
} else {
HOADP01 = Byte.MIN_VALUE;
}
}

protected final void initHOADP02(String s) {
if (!s.trim().isEmpty()) {
HOADP02 = Byte.parseByte(s);
} else {
HOADP02 = Byte.MIN_VALUE;
}
}

protected final void initHOADP03(String s) {
if (!s.trim().isEmpty()) {
HOADP03 = Byte.parseByte(s);
} else {
HOADP03 = Byte.MIN_VALUE;
}
}

protected final void initHOADP04(String s) {
if (!s.trim().isEmpty()) {
HOADP04 = Byte.parseByte(s);
} else {
HOADP04 = Byte.MIN_VALUE;
}
}

protected final void initHOADP05(String s) {
if (!s.trim().isEmpty()) {
HOADP05 = Byte.parseByte(s);
} else {
HOADP05 = Byte.MIN_VALUE;
}
}

protected final void initHOADP06(String s) {
if (!s.trim().isEmpty()) {
HOADP06 = Byte.parseByte(s);
} else {
HOADP06 = Byte.MIN_VALUE;
}
}

protected final void initHOADP07(String s) {
if (!s.trim().isEmpty()) {
HOADP07 = Byte.parseByte(s);
} else {
HOADP07 = Byte.MIN_VALUE;
}
}

protected final void initHOADP08(String s) {
if (!s.trim().isEmpty()) {
HOADP08 = Byte.parseByte(s);
} else {
HOADP08 = Byte.MIN_VALUE;
}
}

protected final void initHOADP09(String s) {
if (!s.trim().isEmpty()) {
HOADP09 = Byte.parseByte(s);
} else {
HOADP09 = Byte.MIN_VALUE;
}
}

protected final void initHOADP10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOADP10 = false;
} else {
HOADP10 = true;
}
}
}

protected final void initHOALE(String s) {
if (!s.trim().isEmpty()) {
HOALE = Byte.parseByte(s);
} else {
HOALE = Byte.MIN_VALUE;
}
}

protected final void initHOALF(String s) {
if (!s.trim().isEmpty()) {
HOALF = Byte.parseByte(s);
} else {
HOALF = Byte.MIN_VALUE;
}
}

protected final void initHOALFM(String s) {
if (!s.trim().isEmpty()) {
HOALFM = Short.parseShort(s);
} else {
HOALFM = Short.MIN_VALUE;
}
}

protected final void initHOALI(String s) {
if (!s.trim().isEmpty()) {
HOALI = Byte.parseByte(s);
} else {
HOALI = Byte.MIN_VALUE;
}
}

protected final void initHOALL(String s) {
if (!s.trim().isEmpty()) {
HOALL = Short.parseShort(s);
} else {
HOALL = Short.MIN_VALUE;
}
}

protected final void initHOALR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOALR = false;
} else {
HOALR = true;
}
}
}

protected final void initHOALU(String s) {
if (!s.trim().isEmpty()) {
HOALU = Short.parseShort(s);
} else {
HOALU = Short.MIN_VALUE;
}
}

protected final void initHOASK(String s) {
if (!s.trim().isEmpty()) {
HOASK = Byte.parseByte(s);
} else {
HOASK = Byte.MIN_VALUE;
}
}

protected final void initHOB10FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10FE = false;
} else {
HOB10FE = true;
}
}
}

protected final void initHOB10FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10FL = false;
} else {
HOB10FL = true;
}
}
}

protected final void initHOB10FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10FR = false;
} else {
HOB10FR = true;
}
}
}

protected final void initHOB10FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10FU = false;
} else {
HOB10FU = true;
}
}
}

protected final void initHOB10ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10ME = false;
} else {
HOB10ME = true;
}
}
}

protected final void initHOB10ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10ML = false;
} else {
HOB10ML = true;
}
}
}

protected final void initHOB10MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10MR = false;
} else {
HOB10MR = true;
}
}
}

protected final void initHOB10MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10MU = false;
} else {
HOB10MU = true;
}
}
}

protected final void initHOB10OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10OE = false;
} else {
HOB10OE = true;
}
}
}

protected final void initHOB10OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10OL = false;
} else {
HOB10OL = true;
}
}
}

protected final void initHOB10OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10OR = false;
} else {
HOB10OR = true;
}
}
}

protected final void initHOB10OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10OU = false;
} else {
HOB10OU = true;
}
}
}

protected final void initHOB10WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10WE = false;
} else {
HOB10WE = true;
}
}
}

protected final void initHOB10WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10WL = false;
} else {
HOB10WL = true;
}
}
}

protected final void initHOB10WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10WR = false;
} else {
HOB10WR = true;
}
}
}

protected final void initHOB10WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10WU = false;
} else {
HOB10WU = true;
}
}
}

protected final void initHOB10YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10YE = false;
} else {
HOB10YE = true;
}
}
}

protected final void initHOB10YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10YL = false;
} else {
HOB10YL = true;
}
}
}

protected final void initHOB10YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10YR = false;
} else {
HOB10YR = true;
}
}
}

protected final void initHOB10YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10YU = false;
} else {
HOB10YU = true;
}
}
}

protected final void initHOB11FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11FE = false;
} else {
HOB11FE = true;
}
}
}

protected final void initHOB11FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11FL = false;
} else {
HOB11FL = true;
}
}
}

protected final void initHOB11FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11FR = false;
} else {
HOB11FR = true;
}
}
}

protected final void initHOB11FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11FU = false;
} else {
HOB11FU = true;
}
}
}

protected final void initHOB11ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11ME = false;
} else {
HOB11ME = true;
}
}
}

protected final void initHOB11ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11ML = false;
} else {
HOB11ML = true;
}
}
}

protected final void initHOB11MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11MR = false;
} else {
HOB11MR = true;
}
}
}

protected final void initHOB11MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11MU = false;
} else {
HOB11MU = true;
}
}
}

protected final void initHOB11OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11OE = false;
} else {
HOB11OE = true;
}
}
}

protected final void initHOB11OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11OL = false;
} else {
HOB11OL = true;
}
}
}

protected final void initHOB11OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11OR = false;
} else {
HOB11OR = true;
}
}
}

protected final void initHOB11OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11OU = false;
} else {
HOB11OU = true;
}
}
}

protected final void initHOB11WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11WE = false;
} else {
HOB11WE = true;
}
}
}

protected final void initHOB11WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11WL = false;
} else {
HOB11WL = true;
}
}
}

protected final void initHOB11WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11WR = false;
} else {
HOB11WR = true;
}
}
}

protected final void initHOB11WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11WU = false;
} else {
HOB11WU = true;
}
}
}

protected final void initHOB11YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11YE = false;
} else {
HOB11YE = true;
}
}
}

protected final void initHOB11YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11YL = false;
} else {
HOB11YL = true;
}
}
}

protected final void initHOB11YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11YR = false;
} else {
HOB11YR = true;
}
}
}

protected final void initHOB11YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11YU = false;
} else {
HOB11YU = true;
}
}
}

protected final void initHOB12FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12FE = false;
} else {
HOB12FE = true;
}
}
}

protected final void initHOB12FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12FL = false;
} else {
HOB12FL = true;
}
}
}

protected final void initHOB12FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12FR = false;
} else {
HOB12FR = true;
}
}
}

protected final void initHOB12FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12FU = false;
} else {
HOB12FU = true;
}
}
}

protected final void initHOB12ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12ME = false;
} else {
HOB12ME = true;
}
}
}

protected final void initHOB12ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12ML = false;
} else {
HOB12ML = true;
}
}
}

protected final void initHOB12MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12MR = false;
} else {
HOB12MR = true;
}
}
}

protected final void initHOB12MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12MU = false;
} else {
HOB12MU = true;
}
}
}

protected final void initHOB12OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12OE = false;
} else {
HOB12OE = true;
}
}
}

protected final void initHOB12OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12OL = false;
} else {
HOB12OL = true;
}
}
}

protected final void initHOB12OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12OR = false;
} else {
HOB12OR = true;
}
}
}

protected final void initHOB12OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12OU = false;
} else {
HOB12OU = true;
}
}
}

protected final void initHOB12WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12WE = false;
} else {
HOB12WE = true;
}
}
}

protected final void initHOB12WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12WL = false;
} else {
HOB12WL = true;
}
}
}

protected final void initHOB12WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12WR = false;
} else {
HOB12WR = true;
}
}
}

protected final void initHOB12WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12WU = false;
} else {
HOB12WU = true;
}
}
}

protected final void initHOB12YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12YE = false;
} else {
HOB12YE = true;
}
}
}

protected final void initHOB12YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12YL = false;
} else {
HOB12YL = true;
}
}
}

protected final void initHOB12YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12YR = false;
} else {
HOB12YR = true;
}
}
}

protected final void initHOB12YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12YU = false;
} else {
HOB12YU = true;
}
}
}

protected final void initHOB13FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13FE = false;
} else {
HOB13FE = true;
}
}
}

protected final void initHOB13FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13FL = false;
} else {
HOB13FL = true;
}
}
}

protected final void initHOB13FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13FR = false;
} else {
HOB13FR = true;
}
}
}

protected final void initHOB13FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13FU = false;
} else {
HOB13FU = true;
}
}
}

protected final void initHOB13ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13ME = false;
} else {
HOB13ME = true;
}
}
}

protected final void initHOB13ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13ML = false;
} else {
HOB13ML = true;
}
}
}

protected final void initHOB13MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13MR = false;
} else {
HOB13MR = true;
}
}
}

protected final void initHOB13MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13MU = false;
} else {
HOB13MU = true;
}
}
}

protected final void initHOB13OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13OE = false;
} else {
HOB13OE = true;
}
}
}

protected final void initHOB13OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13OL = false;
} else {
HOB13OL = true;
}
}
}

protected final void initHOB13OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13OR = false;
} else {
HOB13OR = true;
}
}
}

protected final void initHOB13OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13OU = false;
} else {
HOB13OU = true;
}
}
}

protected final void initHOB13WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13WE = false;
} else {
HOB13WE = true;
}
}
}

protected final void initHOB13WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13WL = false;
} else {
HOB13WL = true;
}
}
}

protected final void initHOB13WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13WR = false;
} else {
HOB13WR = true;
}
}
}

protected final void initHOB13WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13WU = false;
} else {
HOB13WU = true;
}
}
}

protected final void initHOB13YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13YE = false;
} else {
HOB13YE = true;
}
}
}

protected final void initHOB13YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13YL = false;
} else {
HOB13YL = true;
}
}
}

protected final void initHOB13YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13YR = false;
} else {
HOB13YR = true;
}
}
}

protected final void initHOB13YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13YU = false;
} else {
HOB13YU = true;
}
}
}

protected final void initHOB2FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB2FE = false;
} else {
HOB2FE = true;
}
}
}

protected final void initHOB2FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB2FL = false;
} else {
HOB2FL = true;
}
}
}

protected final void initHOB2FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB2FR = false;
} else {
HOB2FR = true;
}
}
}

protected final void initHOB2FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB2FU = false;
} else {
HOB2FU = true;
}
}
}

protected final void initHOB2ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB2ME = false;
} else {
HOB2ME = true;
}
}
}

protected final void initHOB2ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
HOB2ML = false;
} else {
HOB2ML = true;
}
}
}

protected final void initHOB2MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB2MR = false;
} else {
HOB2MR = true;
}
}
}

protected final void initHOB2MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
HOB2MU = false;
} else {
HOB2MU = true;
}
}
}

protected final void initHOB2OE(String s) {
if (!s.trim().isEmpty()) {
HOB2OE = Byte.parseByte(s);
} else {
HOB2OE = Byte.MIN_VALUE;
}
}

protected final void initHOB2OL(String s) {
if (!s.trim().isEmpty()) {
HOB2OL = Byte.parseByte(s);
} else {
HOB2OL = Byte.MIN_VALUE;
}
}

protected final void initHOB2OR(String s) {
if (!s.trim().isEmpty()) {
HOB2OR = Byte.parseByte(s);
} else {
HOB2OR = Byte.MIN_VALUE;
}
}

protected final void initHOB2OU(String s) {
if (!s.trim().isEmpty()) {
HOB2OU = Byte.parseByte(s);
} else {
HOB2OU = Byte.MIN_VALUE;
}
}

protected final void initHOB2WE(String s) {
if (!s.trim().isEmpty()) {
HOB2WE = Byte.parseByte(s);
} else {
HOB2WE = Byte.MIN_VALUE;
}
}

protected final void initHOB2WL(String s) {
if (!s.trim().isEmpty()) {
HOB2WL = Byte.parseByte(s);
} else {
HOB2WL = Byte.MIN_VALUE;
}
}

protected final void initHOB2WR(String s) {
if (!s.trim().isEmpty()) {
HOB2WR = Byte.parseByte(s);
} else {
HOB2WR = Byte.MIN_VALUE;
}
}

protected final void initHOB2WU(String s) {
if (!s.trim().isEmpty()) {
HOB2WU = Byte.parseByte(s);
} else {
HOB2WU = Byte.MIN_VALUE;
}
}

protected final void initHOB2YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB2YE = false;
} else {
HOB2YE = true;
}
}
}

protected final void initHOB2YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB2YL = false;
} else {
HOB2YL = true;
}
}
}

protected final void initHOB2YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB2YR = false;
} else {
HOB2YR = true;
}
}
}

protected final void initHOB2YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB2YU = false;
} else {
HOB2YU = true;
}
}
}

protected final void initHOB3FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB3FE = false;
} else {
HOB3FE = true;
}
}
}

protected final void initHOB3FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB3FL = false;
} else {
HOB3FL = true;
}
}
}

protected final void initHOB3FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB3FR = false;
} else {
HOB3FR = true;
}
}
}

protected final void initHOB3FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB3FU = false;
} else {
HOB3FU = true;
}
}
}

protected final void initHOB3ME(String s) {
if (!s.trim().isEmpty()) {
HOB3ME = Byte.parseByte(s);
} else {
HOB3ME = Byte.MIN_VALUE;
}
}

protected final void initHOB3ML(String s) {
if (!s.trim().isEmpty()) {
HOB3ML = Byte.parseByte(s);
} else {
HOB3ML = Byte.MIN_VALUE;
}
}

protected final void initHOB3MR(String s) {
if (!s.trim().isEmpty()) {
HOB3MR = Byte.parseByte(s);
} else {
HOB3MR = Byte.MIN_VALUE;
}
}

protected final void initHOB3MU(String s) {
if (!s.trim().isEmpty()) {
HOB3MU = Short.parseShort(s);
} else {
HOB3MU = Short.MIN_VALUE;
}
}

protected final void initHOB3OE(String s) {
if (!s.trim().isEmpty()) {
HOB3OE = Byte.parseByte(s);
} else {
HOB3OE = Byte.MIN_VALUE;
}
}

protected final void initHOB3OL(String s) {
if (!s.trim().isEmpty()) {
HOB3OL = Short.parseShort(s);
} else {
HOB3OL = Short.MIN_VALUE;
}
}

protected final void initHOB3OR(String s) {
if (!s.trim().isEmpty()) {
HOB3OR = Byte.parseByte(s);
} else {
HOB3OR = Byte.MIN_VALUE;
}
}

protected final void initHOB3OU(String s) {
if (!s.trim().isEmpty()) {
HOB3OU = Short.parseShort(s);
} else {
HOB3OU = Short.MIN_VALUE;
}
}

protected final void initHOB3WE(String s) {
if (!s.trim().isEmpty()) {
HOB3WE = Byte.parseByte(s);
} else {
HOB3WE = Byte.MIN_VALUE;
}
}

protected final void initHOB3WL(String s) {
if (!s.trim().isEmpty()) {
HOB3WL = Byte.parseByte(s);
} else {
HOB3WL = Byte.MIN_VALUE;
}
}

protected final void initHOB3WR(String s) {
if (!s.trim().isEmpty()) {
HOB3WR = Byte.parseByte(s);
} else {
HOB3WR = Byte.MIN_VALUE;
}
}

protected final void initHOB3WU(String s) {
if (!s.trim().isEmpty()) {
HOB3WU = Byte.parseByte(s);
} else {
HOB3WU = Byte.MIN_VALUE;
}
}

protected final void initHOB3YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB3YE = false;
} else {
HOB3YE = true;
}
}
}

protected final void initHOB3YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB3YL = false;
} else {
HOB3YL = true;
}
}
}

protected final void initHOB3YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB3YR = false;
} else {
HOB3YR = true;
}
}
}

protected final void initHOB3YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB3YU = false;
} else {
HOB3YU = true;
}
}
}

protected final void initHOB4FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB4FE = false;
} else {
HOB4FE = true;
}
}
}

protected final void initHOB4FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB4FL = false;
} else {
HOB4FL = true;
}
}
}

protected final void initHOB4FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB4FR = false;
} else {
HOB4FR = true;
}
}
}

protected final void initHOB4FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB4FU = false;
} else {
HOB4FU = true;
}
}
}

protected final void initHOB4ME(String s) {
if (!s.trim().isEmpty()) {
HOB4ME = Byte.parseByte(s);
} else {
HOB4ME = Byte.MIN_VALUE;
}
}

protected final void initHOB4ML(String s) {
if (!s.trim().isEmpty()) {
HOB4ML = Byte.parseByte(s);
} else {
HOB4ML = Byte.MIN_VALUE;
}
}

protected final void initHOB4MR(String s) {
if (!s.trim().isEmpty()) {
HOB4MR = Byte.parseByte(s);
} else {
HOB4MR = Byte.MIN_VALUE;
}
}

protected final void initHOB4MU(String s) {
if (!s.trim().isEmpty()) {
HOB4MU = Short.parseShort(s);
} else {
HOB4MU = Short.MIN_VALUE;
}
}

protected final void initHOB4OE(String s) {
if (!s.trim().isEmpty()) {
HOB4OE = Byte.parseByte(s);
} else {
HOB4OE = Byte.MIN_VALUE;
}
}

protected final void initHOB4OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
HOB4OL = false;
} else {
HOB4OL = true;
}
}
}

protected final void initHOB4OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB4OR = false;
} else {
HOB4OR = true;
}
}
}

protected final void initHOB4OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
HOB4OU = false;
} else {
HOB4OU = true;
}
}
}

protected final void initHOB4WE(String s) {
if (!s.trim().isEmpty()) {
HOB4WE = Byte.parseByte(s);
} else {
HOB4WE = Byte.MIN_VALUE;
}
}

protected final void initHOB4WL(String s) {
if (!s.trim().isEmpty()) {
HOB4WL = Byte.parseByte(s);
} else {
HOB4WL = Byte.MIN_VALUE;
}
}

protected final void initHOB4WR(String s) {
if (!s.trim().isEmpty()) {
HOB4WR = Byte.parseByte(s);
} else {
HOB4WR = Byte.MIN_VALUE;
}
}

protected final void initHOB4WU(String s) {
if (!s.trim().isEmpty()) {
HOB4WU = Byte.parseByte(s);
} else {
HOB4WU = Byte.MIN_VALUE;
}
}

protected final void initHOB4YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB4YE = false;
} else {
HOB4YE = true;
}
}
}

protected final void initHOB4YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB4YL = false;
} else {
HOB4YL = true;
}
}
}

protected final void initHOB4YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB4YR = false;
} else {
HOB4YR = true;
}
}
}

protected final void initHOB4YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB4YU = false;
} else {
HOB4YU = true;
}
}
}

protected final void initHOB5FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5FE = false;
} else {
HOB5FE = true;
}
}
}

protected final void initHOB5FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5FL = false;
} else {
HOB5FL = true;
}
}
}

protected final void initHOB5FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5FR = false;
} else {
HOB5FR = true;
}
}
}

protected final void initHOB5FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5FU = false;
} else {
HOB5FU = true;
}
}
}

protected final void initHOB5ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5ME = false;
} else {
HOB5ME = true;
}
}
}

protected final void initHOB5ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5ML = false;
} else {
HOB5ML = true;
}
}
}

protected final void initHOB5MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5MR = false;
} else {
HOB5MR = true;
}
}
}

protected final void initHOB5MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5MU = false;
} else {
HOB5MU = true;
}
}
}

protected final void initHOB5OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5OE = false;
} else {
HOB5OE = true;
}
}
}

protected final void initHOB5OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
HOB5OL = false;
} else {
HOB5OL = true;
}
}
}

protected final void initHOB5OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5OR = false;
} else {
HOB5OR = true;
}
}
}

protected final void initHOB5OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
HOB5OU = false;
} else {
HOB5OU = true;
}
}
}

protected final void initHOB5WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5WE = false;
} else {
HOB5WE = true;
}
}
}

protected final void initHOB5WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5WL = false;
} else {
HOB5WL = true;
}
}
}

protected final void initHOB5WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5WR = false;
} else {
HOB5WR = true;
}
}
}

protected final void initHOB5WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5WU = false;
} else {
HOB5WU = true;
}
}
}

protected final void initHOB5YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5YE = false;
} else {
HOB5YE = true;
}
}
}

protected final void initHOB5YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5YL = false;
} else {
HOB5YL = true;
}
}
}

protected final void initHOB5YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5YR = false;
} else {
HOB5YR = true;
}
}
}

protected final void initHOB5YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB5YU = false;
} else {
HOB5YU = true;
}
}
}

protected final void initHOB6FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6FE = false;
} else {
HOB6FE = true;
}
}
}

protected final void initHOB6FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6FL = false;
} else {
HOB6FL = true;
}
}
}

protected final void initHOB6FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6FR = false;
} else {
HOB6FR = true;
}
}
}

protected final void initHOB6FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6FU = false;
} else {
HOB6FU = true;
}
}
}

protected final void initHOB6ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6ME = false;
} else {
HOB6ME = true;
}
}
}

protected final void initHOB6ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6ML = false;
} else {
HOB6ML = true;
}
}
}

protected final void initHOB6MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6MR = false;
} else {
HOB6MR = true;
}
}
}

protected final void initHOB6MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6MU = false;
} else {
HOB6MU = true;
}
}
}

protected final void initHOB6OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6OE = false;
} else {
HOB6OE = true;
}
}
}

protected final void initHOB6OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6OL = false;
} else {
HOB6OL = true;
}
}
}

protected final void initHOB6OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6OR = false;
} else {
HOB6OR = true;
}
}
}

protected final void initHOB6OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6OU = false;
} else {
HOB6OU = true;
}
}
}

protected final void initHOB6WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6WE = false;
} else {
HOB6WE = true;
}
}
}

protected final void initHOB6WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6WL = false;
} else {
HOB6WL = true;
}
}
}

protected final void initHOB6WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6WR = false;
} else {
HOB6WR = true;
}
}
}

protected final void initHOB6WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6WU = false;
} else {
HOB6WU = true;
}
}
}

protected final void initHOB6YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6YE = false;
} else {
HOB6YE = true;
}
}
}

protected final void initHOB6YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6YL = false;
} else {
HOB6YL = true;
}
}
}

protected final void initHOB6YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6YR = false;
} else {
HOB6YR = true;
}
}
}

protected final void initHOB6YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB6YU = false;
} else {
HOB6YU = true;
}
}
}

protected final void initHOB7FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7FE = false;
} else {
HOB7FE = true;
}
}
}

protected final void initHOB7FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7FL = false;
} else {
HOB7FL = true;
}
}
}

protected final void initHOB7FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7FR = false;
} else {
HOB7FR = true;
}
}
}

protected final void initHOB7FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7FU = false;
} else {
HOB7FU = true;
}
}
}

protected final void initHOB7ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7ME = false;
} else {
HOB7ME = true;
}
}
}

protected final void initHOB7ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7ML = false;
} else {
HOB7ML = true;
}
}
}

protected final void initHOB7MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7MR = false;
} else {
HOB7MR = true;
}
}
}

protected final void initHOB7MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7MU = false;
} else {
HOB7MU = true;
}
}
}

protected final void initHOB7OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7OE = false;
} else {
HOB7OE = true;
}
}
}

protected final void initHOB7OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7OL = false;
} else {
HOB7OL = true;
}
}
}

protected final void initHOB7OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7OR = false;
} else {
HOB7OR = true;
}
}
}

protected final void initHOB7OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7OU = false;
} else {
HOB7OU = true;
}
}
}

protected final void initHOB7WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7WE = false;
} else {
HOB7WE = true;
}
}
}

protected final void initHOB7WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7WL = false;
} else {
HOB7WL = true;
}
}
}

protected final void initHOB7WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7WR = false;
} else {
HOB7WR = true;
}
}
}

protected final void initHOB7WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7WU = false;
} else {
HOB7WU = true;
}
}
}

protected final void initHOB7YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7YE = false;
} else {
HOB7YE = true;
}
}
}

protected final void initHOB7YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7YL = false;
} else {
HOB7YL = true;
}
}
}

protected final void initHOB7YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7YR = false;
} else {
HOB7YR = true;
}
}
}

protected final void initHOB7YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB7YU = false;
} else {
HOB7YU = true;
}
}
}

protected final void initHOB8FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8FE = false;
} else {
HOB8FE = true;
}
}
}

protected final void initHOB8FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8FL = false;
} else {
HOB8FL = true;
}
}
}

protected final void initHOB8FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8FR = false;
} else {
HOB8FR = true;
}
}
}

protected final void initHOB8FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8FU = false;
} else {
HOB8FU = true;
}
}
}

protected final void initHOB8ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8ME = false;
} else {
HOB8ME = true;
}
}
}

protected final void initHOB8ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8ML = false;
} else {
HOB8ML = true;
}
}
}

protected final void initHOB8MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8MR = false;
} else {
HOB8MR = true;
}
}
}

protected final void initHOB8MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8MU = false;
} else {
HOB8MU = true;
}
}
}

protected final void initHOB8OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8OE = false;
} else {
HOB8OE = true;
}
}
}

protected final void initHOB8OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8OL = false;
} else {
HOB8OL = true;
}
}
}

protected final void initHOB8OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8OR = false;
} else {
HOB8OR = true;
}
}
}

protected final void initHOB8OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8OU = false;
} else {
HOB8OU = true;
}
}
}

protected final void initHOB8WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8WE = false;
} else {
HOB8WE = true;
}
}
}

protected final void initHOB8WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8WL = false;
} else {
HOB8WL = true;
}
}
}

protected final void initHOB8WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8WR = false;
} else {
HOB8WR = true;
}
}
}

protected final void initHOB8WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8WU = false;
} else {
HOB8WU = true;
}
}
}

protected final void initHOB8YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8YE = false;
} else {
HOB8YE = true;
}
}
}

protected final void initHOB8YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8YL = false;
} else {
HOB8YL = true;
}
}
}

protected final void initHOB8YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8YR = false;
} else {
HOB8YR = true;
}
}
}

protected final void initHOB8YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB8YU = false;
} else {
HOB8YU = true;
}
}
}

protected final void initHOB9FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9FE = false;
} else {
HOB9FE = true;
}
}
}

protected final void initHOB9FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9FL = false;
} else {
HOB9FL = true;
}
}
}

protected final void initHOB9FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9FR = false;
} else {
HOB9FR = true;
}
}
}

protected final void initHOB9FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9FU = false;
} else {
HOB9FU = true;
}
}
}

protected final void initHOB9ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9ME = false;
} else {
HOB9ME = true;
}
}
}

protected final void initHOB9ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9ML = false;
} else {
HOB9ML = true;
}
}
}

protected final void initHOB9MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9MR = false;
} else {
HOB9MR = true;
}
}
}

protected final void initHOB9MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9MU = false;
} else {
HOB9MU = true;
}
}
}

protected final void initHOB9OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9OE = false;
} else {
HOB9OE = true;
}
}
}

protected final void initHOB9OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9OL = false;
} else {
HOB9OL = true;
}
}
}

protected final void initHOB9OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9OR = false;
} else {
HOB9OR = true;
}
}
}

protected final void initHOB9OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9OU = false;
} else {
HOB9OU = true;
}
}
}

protected final void initHOB9WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9WE = false;
} else {
HOB9WE = true;
}
}
}

protected final void initHOB9WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9WL = false;
} else {
HOB9WL = true;
}
}
}

protected final void initHOB9WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9WR = false;
} else {
HOB9WR = true;
}
}
}

protected final void initHOB9WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9WU = false;
} else {
HOB9WU = true;
}
}
}

protected final void initHOB9YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9YE = false;
} else {
HOB9YE = true;
}
}
}

protected final void initHOB9YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9YL = false;
} else {
HOB9YL = true;
}
}
}

protected final void initHOB9YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9YR = false;
} else {
HOB9YR = true;
}
}
}

protected final void initHOB9YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB9YU = false;
} else {
HOB9YU = true;
}
}
}

protected final void initHOBA10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBA10 = false;
} else {
HOBA10 = true;
}
}
}

protected final void initHOBA11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBA11 = false;
} else {
HOBA11 = true;
}
}
}

protected final void initHOBA12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBA12 = false;
} else {
HOBA12 = true;
}
}
}

protected final void initHOBA13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBA13 = false;
} else {
HOBA13 = true;
}
}
}

protected final void initHOBAS10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBAS10 = false;
} else {
HOBAS10 = true;
}
}
}

protected final void initHOBAS11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBAS11 = false;
} else {
HOBAS11 = true;
}
}
}

protected final void initHOBAS12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBAS12 = false;
} else {
HOBAS12 = true;
}
}
}

protected final void initHOBAS13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBAS13 = false;
} else {
HOBAS13 = true;
}
}
}

protected final void initHOBFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBFE = false;
} else {
HOBFE = true;
}
}
}

protected final void initHOBFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBFL = false;
} else {
HOBFL = true;
}
}
}

protected final void initHOBFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBFR = false;
} else {
HOBFR = true;
}
}
}

protected final void initHOBFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBFU = false;
} else {
HOBFU = true;
}
}
}

protected final void initHOBME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBME = false;
} else {
HOBME = true;
}
}
}

protected final void initHOBML(String s) {
if (!s.trim().isEmpty()) {
HOBML = Short.parseShort(s);
} else {
HOBML = Short.MIN_VALUE;
}
}

protected final void initHOBMR(String s) {
if (!s.trim().isEmpty()) {
HOBMR = Byte.parseByte(s);
} else {
HOBMR = Byte.MIN_VALUE;
}
}

protected final void initHOBMU(String s) {
if (!s.trim().isEmpty()) {
HOBMU = Short.parseShort(s);
} else {
HOBMU = Short.MIN_VALUE;
}
}

protected final void initHOBOE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBOE = false;
} else {
HOBOE = true;
}
}
}

protected final void initHOBOL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBOL = false;
} else {
HOBOL = true;
}
}
}

protected final void initHOBOR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBOR = false;
} else {
HOBOR = true;
}
}
}

protected final void initHOBOU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBOU = false;
} else {
HOBOU = true;
}
}
}

protected final void initHOBP10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBP10 = false;
} else {
HOBP10 = true;
}
}
}

protected final void initHOBP11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBP11 = false;
} else {
HOBP11 = true;
}
}
}

protected final void initHOBP12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBP12 = false;
} else {
HOBP12 = true;
}
}
}

protected final void initHOBP13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBP13 = false;
} else {
HOBP13 = true;
}
}
}

protected final void initHOBWE(String s) {
if (!s.trim().isEmpty()) {
HOBWE = Byte.parseByte(s);
} else {
HOBWE = Byte.MIN_VALUE;
}
}

protected final void initHOBWL(String s) {
if (!s.trim().isEmpty()) {
HOBWL = Short.parseShort(s);
} else {
HOBWL = Short.MIN_VALUE;
}
}

protected final void initHOBWR(String s) {
if (!s.trim().isEmpty()) {
HOBWR = Byte.parseByte(s);
} else {
HOBWR = Byte.MIN_VALUE;
}
}

protected final void initHOBWU(String s) {
if (!s.trim().isEmpty()) {
HOBWU = Byte.parseByte(s);
} else {
HOBWU = Byte.MIN_VALUE;
}
}

protected final void initHOBYE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBYE = false;
} else {
HOBYE = true;
}
}
}

protected final void initHOBYL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HOBYL = false;
} else {
HOBYL = true;
}
}
}

protected final void initHOBYR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBYR = false;
} else {
HOBYR = true;
}
}
}

protected final void initHOBYU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HOBYU = false;
} else {
HOBYU = true;
}
}
}

protected final void initHOFOE(String s) {
if (!s.trim().isEmpty()) {
HOFOE = Byte.parseByte(s);
} else {
HOFOE = Byte.MIN_VALUE;
}
}

protected final void initHOFOL(String s) {
if (!s.trim().isEmpty()) {
HOFOL = Short.parseShort(s);
} else {
HOFOL = Short.MIN_VALUE;
}
}

protected final void initHOFOR(String s) {
if (!s.trim().isEmpty()) {
HOFOR = Byte.parseByte(s);
} else {
HOFOR = Byte.MIN_VALUE;
}
}

protected final void initHOFOU(String s) {
if (!s.trim().isEmpty()) {
HOFOU = Short.parseShort(s);
} else {
HOFOU = Short.MIN_VALUE;
}
}

protected final void initHOHAV01(String s) {
if (!s.trim().isEmpty()) {
HOHAV01 = Byte.parseByte(s);
} else {
HOHAV01 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV02(String s) {
if (!s.trim().isEmpty()) {
HOHAV02 = Byte.parseByte(s);
} else {
HOHAV02 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV03(String s) {
if (!s.trim().isEmpty()) {
HOHAV03 = Byte.parseByte(s);
} else {
HOHAV03 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV04(String s) {
if (!s.trim().isEmpty()) {
HOHAV04 = Byte.parseByte(s);
} else {
HOHAV04 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV05(String s) {
if (!s.trim().isEmpty()) {
HOHAV05 = Byte.parseByte(s);
} else {
HOHAV05 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV06(String s) {
if (!s.trim().isEmpty()) {
HOHAV06 = Byte.parseByte(s);
} else {
HOHAV06 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV07(String s) {
if (!s.trim().isEmpty()) {
HOHAV07 = Byte.parseByte(s);
} else {
HOHAV07 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV08(String s) {
if (!s.trim().isEmpty()) {
HOHAV08 = Byte.parseByte(s);
} else {
HOHAV08 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV09(String s) {
if (!s.trim().isEmpty()) {
HOHAV09 = Byte.parseByte(s);
} else {
HOHAV09 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV10(String s) {
if (!s.trim().isEmpty()) {
HOHAV10 = Byte.parseByte(s);
} else {
HOHAV10 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV11(String s) {
if (!s.trim().isEmpty()) {
HOHAV11 = Byte.parseByte(s);
} else {
HOHAV11 = Byte.MIN_VALUE;
}
}

protected final void initHOHB1(String s) {
if (!s.trim().isEmpty()) {
HOHB1 = Byte.parseByte(s);
} else {
HOHB1 = Byte.MIN_VALUE;
}
}

protected final void initHOHB2(String s) {
if (!s.trim().isEmpty()) {
HOHB2 = Byte.parseByte(s);
} else {
HOHB2 = Byte.MIN_VALUE;
}
}

protected final void initHOHB3(String s) {
if (!s.trim().isEmpty()) {
HOHB3 = Byte.parseByte(s);
} else {
HOHB3 = Byte.MIN_VALUE;
}
}

protected final void initHOHBM1(String s) {
if (!s.trim().isEmpty()) {
HOHBM1 = Byte.parseByte(s);
} else {
HOHBM1 = Byte.MIN_VALUE;
}
}

protected final void initHOHBM2(String s) {
if (!s.trim().isEmpty()) {
HOHBM2 = Byte.parseByte(s);
} else {
HOHBM2 = Byte.MIN_VALUE;
}
}

protected final void initHOHBM3(String s) {
if (!s.trim().isEmpty()) {
HOHBM3 = Byte.parseByte(s);
} else {
HOHBM3 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM1(String s) {
if (!s.trim().isEmpty()) {
HOINAM1 = Byte.parseByte(s);
} else {
HOINAM1 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM2(String s) {
if (!s.trim().isEmpty()) {
HOINAM2 = Byte.parseByte(s);
} else {
HOINAM2 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM3(String s) {
if (!s.trim().isEmpty()) {
HOINAM3 = Byte.parseByte(s);
} else {
HOINAM3 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM4(String s) {
if (!s.trim().isEmpty()) {
HOINAM4 = Byte.parseByte(s);
} else {
HOINAM4 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOINAM5 = false;
} else {
HOINAM5 = true;
}
}
}

protected final void initHOINC1(String s) {
if (!s.trim().isEmpty()) {
HOINC1 = Byte.parseByte(s);
} else {
HOINC1 = Byte.MIN_VALUE;
}
}

protected final void initHOINC2(String s) {
if (!s.trim().isEmpty()) {
HOINC2 = Byte.parseByte(s);
} else {
HOINC2 = Byte.MIN_VALUE;
}
}

protected final void initHOINC3(String s) {
if (!s.trim().isEmpty()) {
HOINC3 = Byte.parseByte(s);
} else {
HOINC3 = Byte.MIN_VALUE;
}
}

protected final void initHOINC4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOINC4 = false;
} else {
HOINC4 = true;
}
}
}

protected final void initHOINCA1(String s) {
if (!s.trim().isEmpty()) {
HOINCA1 = Byte.parseByte(s);
} else {
HOINCA1 = Byte.MIN_VALUE;
}
}

protected final void initHOINCA2(String s) {
if (!s.trim().isEmpty()) {
HOINCA2 = Byte.parseByte(s);
} else {
HOINCA2 = Byte.MIN_VALUE;
}
}

protected final void initHOINCA3(String s) {
if (!s.trim().isEmpty()) {
HOINCA3 = Byte.parseByte(s);
} else {
HOINCA3 = Byte.MIN_VALUE;
}
}

protected final void initHOINCA4(String s) {
if (!s.trim().isEmpty()) {
HOINCA4 = Byte.parseByte(s);
} else {
HOINCA4 = Byte.MIN_VALUE;
}
}

protected final void initHOINCA5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOINCA5 = false;
} else {
HOINCA5 = true;
}
}
}

protected final void initHOINCL1(String s) {
if (!s.trim().isEmpty()) {
HOINCL1 = Byte.parseByte(s);
} else {
HOINCL1 = Byte.MIN_VALUE;
}
}

protected final void initHOINCL2(String s) {
if (!s.trim().isEmpty()) {
HOINCL2 = Byte.parseByte(s);
} else {
HOINCL2 = Byte.MIN_VALUE;
}
}

protected final void initHOINCL3(String s) {
if (!s.trim().isEmpty()) {
HOINCL3 = Byte.parseByte(s);
} else {
HOINCL3 = Byte.MIN_VALUE;
}
}

protected final void initHOINCL4(String s) {
if (!s.trim().isEmpty()) {
HOINCL4 = Byte.parseByte(s);
} else {
HOINCL4 = Byte.MIN_VALUE;
}
}

protected final void initHOINCL5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOINCL5 = false;
} else {
HOINCL5 = true;
}
}
}

protected final void initHOINCM1(String s) {
if (!s.trim().isEmpty()) {
HOINCM1 = Byte.parseByte(s);
} else {
HOINCM1 = Byte.MIN_VALUE;
}
}

protected final void initHOINCM2(String s) {
if (!s.trim().isEmpty()) {
HOINCM2 = Byte.parseByte(s);
} else {
HOINCM2 = Byte.MIN_VALUE;
}
}

protected final void initHOINCM3(String s) {
if (!s.trim().isEmpty()) {
HOINCM3 = Byte.parseByte(s);
} else {
HOINCM3 = Byte.MIN_VALUE;
}
}

protected final void initHOINCM4(String s) {
if (!s.trim().isEmpty()) {
HOINCM4 = Byte.parseByte(s);
} else {
HOINCM4 = Byte.MIN_VALUE;
}
}

protected final void initHOMFV(String s) {
if (!s.trim().isEmpty()) {
HOMFV = Byte.parseByte(s);
} else {
HOMFV = Byte.MIN_VALUE;
}
}

protected final void initHOMFV2(String s) {
if (!s.trim().isEmpty()) {
HOMFV2 = Byte.parseByte(s);
} else {
HOMFV2 = Byte.MIN_VALUE;
}
}

protected final void initHOMFV3(String s) {
if (!s.trim().isEmpty()) {
HOMFV3 = Byte.parseByte(s);
} else {
HOMFV3 = Byte.MIN_VALUE;
}
}

protected final void initHOMFV4(String s) {
if (!s.trim().isEmpty()) {
HOMFV4 = Byte.parseByte(s);
} else {
HOMFV4 = Byte.MIN_VALUE;
}
}

protected final void initHOMFV5(String s) {
if (!s.trim().isEmpty()) {
HOMFV5 = Byte.parseByte(s);
} else {
HOMFV5 = Byte.MIN_VALUE;
}
}

protected final void initHOMIE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMIE = false;
} else {
HOMIE = true;
}
}
}

protected final void initHOMIL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMIL = false;
} else {
HOMIL = true;
}
}
}

protected final void initHOMINC(String s) {
if (!s.trim().isEmpty()) {
HOMINC = Short.parseShort(s);
} else {
HOMINC = Short.MIN_VALUE;
}
}

protected final void initHOMIR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMIR = false;
} else {
HOMIR = true;
}
}
}

protected final void initHOMIU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMIU = false;
} else {
HOMIU = true;
}
}
}

protected final void initHOMRE(String s) {
if (!s.trim().isEmpty()) {
HOMRE = Byte.parseByte(s);
} else {
HOMRE = Byte.MIN_VALUE;
}
}

protected final void initHOMRL(String s) {
if (!s.trim().isEmpty()) {
HOMRL = Short.parseShort(s);
} else {
HOMRL = Short.MIN_VALUE;
}
}

protected final void initHOMRR(String s) {
if (!s.trim().isEmpty()) {
HOMRR = Byte.parseByte(s);
} else {
HOMRR = Byte.MIN_VALUE;
}
}

protected final void initHOMRU(String s) {
if (!s.trim().isEmpty()) {
HOMRU = Short.parseShort(s);
} else {
HOMRU = Short.MIN_VALUE;
}
}

protected final void initHOMTY(String s) {
if (!s.trim().isEmpty()) {
HOMTY = Byte.parseByte(s);
} else {
HOMTY = Byte.MIN_VALUE;
}
}

protected final void initHOMTY2(String s) {
if (!s.trim().isEmpty()) {
HOMTY2 = Byte.parseByte(s);
} else {
HOMTY2 = Byte.MIN_VALUE;
}
}

protected final void initHOMTY3(String s) {
if (!s.trim().isEmpty()) {
HOMTY3 = Byte.parseByte(s);
} else {
HOMTY3 = Byte.MIN_VALUE;
}
}

protected final void initHOMTY4(String s) {
if (!s.trim().isEmpty()) {
HOMTY4 = Byte.parseByte(s);
} else {
HOMTY4 = Byte.MIN_VALUE;
}
}

protected final void initHOMTY5(String s) {
if (!s.trim().isEmpty()) {
HOMTY5 = Byte.parseByte(s);
} else {
HOMTY5 = Byte.MIN_VALUE;
}
}

protected final void initHOMTYC(String s) {
if (!s.trim().isEmpty()) {
HOMTYC = Byte.parseByte(s);
} else {
HOMTYC = Byte.MIN_VALUE;
}
}

protected final void initHOMTYC2(String s) {
if (!s.trim().isEmpty()) {
HOMTYC2 = Byte.parseByte(s);
} else {
HOMTYC2 = Byte.MIN_VALUE;
}
}

protected final void initHOOHEA1(String s) {
if (!s.trim().isEmpty()) {
HOOHEA1 = Byte.parseByte(s);
} else {
HOOHEA1 = Byte.MIN_VALUE;
}
}

protected final void initHOOHEA2(String s) {
if (!s.trim().isEmpty()) {
HOOHEA2 = Byte.parseByte(s);
} else {
HOOHEA2 = Byte.MIN_VALUE;
}
}

protected final void initHOOHEA3(String s) {
if (!s.trim().isEmpty()) {
HOOHEA3 = Byte.parseByte(s);
} else {
HOOHEA3 = Byte.MIN_VALUE;
}
}

protected final void initHOOHEM1(String s) {
if (!s.trim().isEmpty()) {
HOOHEM1 = Byte.parseByte(s);
} else {
HOOHEM1 = Byte.MIN_VALUE;
}
}

protected final void initHOOHEM2(String s) {
if (!s.trim().isEmpty()) {
HOOHEM2 = Byte.parseByte(s);
} else {
HOOHEM2 = Byte.MIN_VALUE;
}
}

protected final void initHOOHEM3(String s) {
if (!s.trim().isEmpty()) {
HOOHEM3 = Byte.parseByte(s);
} else {
HOOHEM3 = Byte.MIN_VALUE;
}
}

protected final void initHOOUE(String s) {
if (!s.trim().isEmpty()) {
HOOUE = Byte.parseByte(s);
} else {
HOOUE = Byte.MIN_VALUE;
}
}

protected final void initHOOUL(String s) {
if (!s.trim().isEmpty()) {
HOOUL = Byte.parseByte(s);
} else {
HOOUL = Byte.MIN_VALUE;
}
}

protected final void initHOOUR(String s) {
if (!s.trim().isEmpty()) {
HOOUR = Byte.parseByte(s);
} else {
HOOUR = Byte.MIN_VALUE;
}
}

protected final void initHOOUU(String s) {
if (!s.trim().isEmpty()) {
HOOUU = Short.parseShort(s);
} else {
HOOUU = Short.MIN_VALUE;
}
}

protected final void initHOPAE(String s) {
if (!s.trim().isEmpty()) {
HOPAE = Byte.parseByte(s);
} else {
HOPAE = Byte.MIN_VALUE;
}
}

protected final void initHOPAL(String s) {
if (!s.trim().isEmpty()) {
HOPAL = Integer.parseInt(s);
} else {
HOPAL = Integer.MIN_VALUE;
}
}

protected final void initHOPAR(String s) {
if (!s.trim().isEmpty()) {
HOPAR = Byte.parseByte(s);
} else {
HOPAR = Byte.MIN_VALUE;
}
}

protected final void initHOPAU(String s) {
if (!s.trim().isEmpty()) {
HOPAU = Integer.parseInt(s);
} else {
HOPAU = Integer.MIN_VALUE;
}
}

protected final void initHOPRM01(String s) {
if (!s.trim().isEmpty()) {
HOPRM01 = Byte.parseByte(s);
} else {
HOPRM01 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM02(String s) {
if (!s.trim().isEmpty()) {
HOPRM02 = Byte.parseByte(s);
} else {
HOPRM02 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM03(String s) {
if (!s.trim().isEmpty()) {
HOPRM03 = Byte.parseByte(s);
} else {
HOPRM03 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM04(String s) {
if (!s.trim().isEmpty()) {
HOPRM04 = Byte.parseByte(s);
} else {
HOPRM04 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM05(String s) {
if (!s.trim().isEmpty()) {
HOPRM05 = Byte.parseByte(s);
} else {
HOPRM05 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM06(String s) {
if (!s.trim().isEmpty()) {
HOPRM06 = Byte.parseByte(s);
} else {
HOPRM06 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM07(String s) {
if (!s.trim().isEmpty()) {
HOPRM07 = Byte.parseByte(s);
} else {
HOPRM07 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM08(String s) {
if (!s.trim().isEmpty()) {
HOPRM08 = Byte.parseByte(s);
} else {
HOPRM08 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM09(String s) {
if (!s.trim().isEmpty()) {
HOPRM09 = Byte.parseByte(s);
} else {
HOPRM09 = Byte.MIN_VALUE;
}
}

protected final void initHOPRM10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOPRM10 = false;
} else {
HOPRM10 = true;
}
}
}

protected final void initHOPRO01(String s) {
if (!s.trim().isEmpty()) {
HOPRO01 = Byte.parseByte(s);
} else {
HOPRO01 = Byte.MIN_VALUE;
}
}

protected final void initHOPRO02(String s) {
if (!s.trim().isEmpty()) {
HOPRO02 = Byte.parseByte(s);
} else {
HOPRO02 = Byte.MIN_VALUE;
}
}

protected final void initHOPRO03(String s) {
if (!s.trim().isEmpty()) {
HOPRO03 = Byte.parseByte(s);
} else {
HOPRO03 = Byte.MIN_VALUE;
}
}

protected final void initHOPRO04(String s) {
if (!s.trim().isEmpty()) {
HOPRO04 = Byte.parseByte(s);
} else {
HOPRO04 = Byte.MIN_VALUE;
}
}

protected final void initHOPRO05(String s) {
if (!s.trim().isEmpty()) {
HOPRO05 = Byte.parseByte(s);
} else {
HOPRO05 = Byte.MIN_VALUE;
}
}

protected final void initHOPRO06(String s) {
if (!s.trim().isEmpty()) {
HOPRO06 = Byte.parseByte(s);
} else {
HOPRO06 = Byte.MIN_VALUE;
}
}

protected final void initHOPRO07(String s) {
if (!s.trim().isEmpty()) {
HOPRO07 = Byte.parseByte(s);
} else {
HOPRO07 = Byte.MIN_VALUE;
}
}

protected final void initHOPRO08(String s) {
if (!s.trim().isEmpty()) {
HOPRO08 = Byte.parseByte(s);
} else {
HOPRO08 = Byte.MIN_VALUE;
}
}

protected final void initHOPRO09(String s) {
if (!s.trim().isEmpty()) {
HOPRO09 = Byte.parseByte(s);
} else {
HOPRO09 = Byte.MIN_VALUE;
}
}

protected final void initHOPRO10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOPRO10 = false;
} else {
HOPRO10 = true;
}
}
}

protected final void initHOREBT(String s) {
if (!s.trim().isEmpty()) {
HOREBT = Byte.parseByte(s);
} else {
HOREBT = Byte.MIN_VALUE;
}
}

protected final void initHOREFE(String s) {
if (!s.trim().isEmpty()) {
HOREFE = Byte.parseByte(s);
} else {
HOREFE = Byte.MIN_VALUE;
}
}

protected final void initHOREFL(String s) {
if (!s.trim().isEmpty()) {
HOREFL = Byte.parseByte(s);
} else {
HOREFL = Byte.MIN_VALUE;
}
}

protected final void initHOREFR(String s) {
if (!s.trim().isEmpty()) {
HOREFR = Byte.parseByte(s);
} else {
HOREFR = Byte.MIN_VALUE;
}
}

protected final void initHOREFU(String s) {
if (!s.trim().isEmpty()) {
HOREFU = Byte.parseByte(s);
} else {
HOREFU = Byte.MIN_VALUE;
}
}

protected final void initHOREME(String s) {
if (!s.trim().isEmpty()) {
HOREME = Byte.parseByte(s);
} else {
HOREME = Byte.MIN_VALUE;
}
}

protected final void initHOREML(String s) {
if (!s.trim().isEmpty()) {
HOREML = Short.parseShort(s);
} else {
HOREML = Short.MIN_VALUE;
}
}

protected final void initHOREMR(String s) {
if (!s.trim().isEmpty()) {
HOREMR = Byte.parseByte(s);
} else {
HOREMR = Byte.MIN_VALUE;
}
}

protected final void initHOREMU(String s) {
if (!s.trim().isEmpty()) {
HOREMU = Short.parseShort(s);
} else {
HOREMU = Short.MIN_VALUE;
}
}

protected final void initHOREOE(String s) {
if (!s.trim().isEmpty()) {
HOREOE = Byte.parseByte(s);
} else {
HOREOE = Byte.MIN_VALUE;
}
}

protected final void initHOREOL(String s) {
if (!s.trim().isEmpty()) {
HOREOL = Short.parseShort(s);
} else {
HOREOL = Short.MIN_VALUE;
}
}

protected final void initHOREOR(String s) {
if (!s.trim().isEmpty()) {
HOREOR = Byte.parseByte(s);
} else {
HOREOR = Byte.MIN_VALUE;
}
}

protected final void initHOREOU(String s) {
if (!s.trim().isEmpty()) {
HOREOU = Short.parseShort(s);
} else {
HOREOU = Short.MIN_VALUE;
}
}

protected final void initHOREWE(String s) {
if (!s.trim().isEmpty()) {
HOREWE = Byte.parseByte(s);
} else {
HOREWE = Byte.MIN_VALUE;
}
}

protected final void initHOREWL(String s) {
if (!s.trim().isEmpty()) {
HOREWL = Byte.parseByte(s);
} else {
HOREWL = Byte.MIN_VALUE;
}
}

protected final void initHOREWR(String s) {
if (!s.trim().isEmpty()) {
HOREWR = Byte.parseByte(s);
} else {
HOREWR = Byte.MIN_VALUE;
}
}

protected final void initHOREWU(String s) {
if (!s.trim().isEmpty()) {
HOREWU = Short.parseShort(s);
} else {
HOREWU = Short.MIN_VALUE;
}
}

protected final void initHOREYE(String s) {
if (!s.trim().isEmpty()) {
HOREYE = Byte.parseByte(s);
} else {
HOREYE = Byte.MIN_VALUE;
}
}

protected final void initHOREYL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HOREYL = false;
} else {
HOREYL = true;
}
}
}

protected final void initHOREYR(String s) {
if (!s.trim().isEmpty()) {
HOREYR = Byte.parseByte(s);
} else {
HOREYR = Byte.MIN_VALUE;
}
}

protected final void initHOREYU(String s) {
if (!s.trim().isEmpty()) {
HOREYU = Short.parseShort(s);
} else {
HOREYU = Short.MIN_VALUE;
}
}

protected final void initHORFEE(String s) {
if (!s.trim().isEmpty()) {
HORFEE = Byte.parseByte(s);
} else {
HORFEE = Byte.MIN_VALUE;
}
}

protected final void initHORFEP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORFEP = false;
} else {
HORFEP = true;
}
}
}

protected final void initHORIE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORIE = false;
} else {
HORIE = true;
}
}
}

protected final void initHORIL(String s) {
if (!s.trim().isEmpty()) {
HORIL = Short.parseShort(s);
} else {
HORIL = Short.MIN_VALUE;
}
}

protected final void initHORINC(String s) {
if (!s.trim().isEmpty()) {
HORINC = Byte.parseByte(s);
} else {
HORINC = Byte.MIN_VALUE;
}
}

protected final void initHORINCC(String s) {
if (!s.trim().isEmpty()) {
HORINCC = Byte.parseByte(s);
} else {
HORINCC = Byte.MIN_VALUE;
}
}

protected final void initHORINM(String s) {
if (!s.trim().isEmpty()) {
HORINM = Short.parseShort(s);
} else {
HORINM = Short.MIN_VALUE;
}
}

protected final void initHORIR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORIR = false;
} else {
HORIR = true;
}
}
}

protected final void initHORIU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HORIU = false;
} else {
HORIU = true;
}
}
}

protected final void initHORMBE(String s) {
if (!s.trim().isEmpty()) {
HORMBE = Byte.parseByte(s);
} else {
HORMBE = Byte.MIN_VALUE;
}
}

protected final void initHORMBL(String s) {
if (!s.trim().isEmpty()) {
HORMBL = Integer.parseInt(s);
} else {
HORMBL = Integer.MIN_VALUE;
}
}

protected final void initHORMBR(String s) {
if (!s.trim().isEmpty()) {
HORMBR = Byte.parseByte(s);
} else {
HORMBR = Byte.MIN_VALUE;
}
}

protected final void initHORMBU(String s) {
if (!s.trim().isEmpty()) {
HORMBU = Short.parseShort(s);
} else {
HORMBU = Short.MIN_VALUE;
}
}

protected final void initHORMO(String s) {
if (!s.trim().isEmpty()) {
HORMO = Byte.parseByte(s);
} else {
HORMO = Byte.MIN_VALUE;
}
}

protected final void initHORMO2(String s) {
if (!s.trim().isEmpty()) {
HORMO2 = Byte.parseByte(s);
} else {
HORMO2 = Byte.MIN_VALUE;
}
}

protected final void initHORMO3(String s) {
if (!s.trim().isEmpty()) {
HORMO3 = Byte.parseByte(s);
} else {
HORMO3 = Byte.MIN_VALUE;
}
}

protected final void initHORMO4(String s) {
if (!s.trim().isEmpty()) {
HORMO4 = Byte.parseByte(s);
} else {
HORMO4 = Byte.MIN_VALUE;
}
}

protected final void initHORMO5(String s) {
if (!s.trim().isEmpty()) {
HORMO5 = Byte.parseByte(s);
} else {
HORMO5 = Byte.MIN_VALUE;
}
}

protected final void initHORMOL(String s) {
if (!s.trim().isEmpty()) {
HORMOL = Integer.parseInt(s);
} else {
HORMOL = Integer.MIN_VALUE;
}
}

protected final void initHORMS(String s) {
if (!s.trim().isEmpty()) {
HORMS = Byte.parseByte(s);
} else {
HORMS = Byte.MIN_VALUE;
}
}

protected final void initHORMU(String s) {
if (!s.trim().isEmpty()) {
HORMU = Short.parseShort(s);
} else {
HORMU = Short.MIN_VALUE;
}
}

protected final void initHORMUFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFE = false;
} else {
HORMUFE = true;
}
}
}

protected final void initHORMUFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFL = false;
} else {
HORMUFL = true;
}
}
}

protected final void initHORMUFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFR = false;
} else {
HORMUFR = true;
}
}
}

protected final void initHORMUFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFU = false;
} else {
HORMUFU = true;
}
}
}

protected final void initHORMUME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUME = false;
} else {
HORMUME = true;
}
}
}

protected final void initHORMUML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUML = false;
} else {
HORMUML = true;
}
}
}

protected final void initHORMUMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUMR = false;
} else {
HORMUMR = true;
}
}
}

protected final void initHORMUMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUMU = false;
} else {
HORMUMU = true;
}
}
}

protected final void initHORMUOE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOE = false;
} else {
HORMUOE = true;
}
}
}

protected final void initHORMUOL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOL = false;
} else {
HORMUOL = true;
}
}
}

protected final void initHORMUOR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOR = false;
} else {
HORMUOR = true;
}
}
}

protected final void initHORMUOU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOU = false;
} else {
HORMUOU = true;
}
}
}

protected final void initHORMUWE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWE = false;
} else {
HORMUWE = true;
}
}
}

protected final void initHORMUWL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWL = false;
} else {
HORMUWL = true;
}
}
}

protected final void initHORMUWR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWR = false;
} else {
HORMUWR = true;
}
}
}

protected final void initHORMUWU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWU = false;
} else {
HORMUWU = true;
}
}
}

protected final void initHORMUYE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYE = false;
} else {
HORMUYE = true;
}
}
}

protected final void initHORMUYL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYL = false;
} else {
HORMUYL = true;
}
}
}

protected final void initHORMUYR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYR = false;
} else {
HORMUYR = true;
}
}
}

protected final void initHORMUYU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYU = false;
} else {
HORMUYU = true;
}
}
}

protected final void initHORPAY(String s) {
if (!s.trim().isEmpty()) {
HORPAY = Byte.parseByte(s);
} else {
HORPAY = Byte.MIN_VALUE;
}
}

protected final void initHORPC(String s) {
if (!s.trim().isEmpty()) {
HORPC = Byte.parseByte(s);
} else {
HORPC = Byte.MIN_VALUE;
}
}

protected final void initHORPCM(String s) {
if (!s.trim().isEmpty()) {
HORPCM = Integer.parseInt(s);
} else {
HORPCM = Integer.MIN_VALUE;
}
}

protected final void initHORPE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPE = false;
} else {
HORPE = true;
}
}
}

protected final void initHORPL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPL = false;
} else {
HORPL = true;
}
}
}

protected final void initHORPM(String s) {
if (!s.trim().isEmpty()) {
HORPM = Integer.parseInt(s);
} else {
HORPM = Integer.MIN_VALUE;
}
}

protected final void initHORPME(String s) {
if (!s.trim().isEmpty()) {
HORPME = Byte.parseByte(s);
} else {
HORPME = Byte.MIN_VALUE;
}
}

protected final void initHORPML(String s) {
if (!s.trim().isEmpty()) {
HORPML = Short.parseShort(s);
} else {
HORPML = Short.MIN_VALUE;
}
}

protected final void initHORPMR(String s) {
if (!s.trim().isEmpty()) {
HORPMR = Byte.parseByte(s);
} else {
HORPMR = Byte.MIN_VALUE;
}
}

protected final void initHORPMU(String s) {
if (!s.trim().isEmpty()) {
HORPMU = Integer.parseInt(s);
} else {
HORPMU = Integer.MIN_VALUE;
}
}

protected final void initHORPOF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPOF = false;
} else {
HORPOF = true;
}
}
}

protected final void initHORPOS(String s) {
if (!s.trim().isEmpty()) {
HORPOS = Byte.parseByte(s);
} else {
HORPOS = Byte.MIN_VALUE;
}
}

protected final void initHORPR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPR = false;
} else {
HORPR = true;
}
}
}

protected final void initHORPU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPU = false;
} else {
HORPU = true;
}
}
}

protected final void initHORRE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRE = false;
} else {
HORRE = true;
}
}
}

protected final void initHORRL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRL = false;
} else {
HORRL = true;
}
}
}

protected final void initHORRM(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRM = false;
} else {
HORRM = true;
}
}
}

protected final void initHORRR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRR = false;
} else {
HORRR = true;
}
}
}

protected final void initHORRU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRU = false;
} else {
HORRU = true;
}
}
}

protected final void initHOSEE(String s) {
if (!s.trim().isEmpty()) {
HOSEE = Byte.parseByte(s);
} else {
HOSEE = Byte.MIN_VALUE;
}
}

protected final void initHOSEL(String s) {
if (!s.trim().isEmpty()) {
HOSEL = Integer.parseInt(s);
} else {
HOSEL = Integer.MIN_VALUE;
}
}

protected final void initHOSER(String s) {
if (!s.trim().isEmpty()) {
HOSER = Byte.parseByte(s);
} else {
HOSER = Byte.MIN_VALUE;
}
}

protected final void initHOSEU(String s) {
if (!s.trim().isEmpty()) {
HOSEU = Integer.parseInt(s);
} else {
HOSEU = Integer.MIN_VALUE;
}
}

protected final void initHOVE(String s) {
if (!s.trim().isEmpty()) {
HOVE = Integer.parseInt(s);
} else {
HOVE = Integer.MIN_VALUE;
}
}

protected final void initHOVE1E(String s) {
if (!s.trim().isEmpty()) {
HOVE1E = Integer.parseInt(s);
} else {
HOVE1E = Integer.MIN_VALUE;
}
}

protected final void initHOVE1L(String s) {
if (!s.trim().isEmpty()) {
HOVE1L = Integer.parseInt(s);
} else {
HOVE1L = Integer.MIN_VALUE;
}
}

protected final void initHOVE1R(String s) {
if (!s.trim().isEmpty()) {
HOVE1R = Byte.parseByte(s);
} else {
HOVE1R = Byte.MIN_VALUE;
}
}

protected final void initHOVE1U(String s) {
if (!s.trim().isEmpty()) {
HOVE1U = Integer.parseInt(s);
} else {
HOVE1U = Integer.MIN_VALUE;
}
}

protected final void initHOVE2(String s) {
if (!s.trim().isEmpty()) {
HOVE2 = Integer.parseInt(s);
} else {
HOVE2 = Integer.MIN_VALUE;
}
}

protected final void initHOVE2E(String s) {
if (!s.trim().isEmpty()) {
HOVE2E = Short.parseShort(s);
} else {
HOVE2E = Short.MIN_VALUE;
}
}

protected final void initHOVE2L(String s) {
if (!s.trim().isEmpty()) {
HOVE2L = Short.parseShort(s);
} else {
HOVE2L = Short.MIN_VALUE;
}
}

protected final void initHOVE2R(String s) {
if (!s.trim().isEmpty()) {
HOVE2R = Byte.parseByte(s);
} else {
HOVE2R = Byte.MIN_VALUE;
}
}

protected final void initHOVE2U(String s) {
if (!s.trim().isEmpty()) {
HOVE2U = Short.parseShort(s);
} else {
HOVE2U = Short.MIN_VALUE;
}
}

protected final void initHOVE3(String s) {
if (!s.trim().isEmpty()) {
HOVE3 = Integer.parseInt(s);
} else {
HOVE3 = Integer.MIN_VALUE;
}
}

protected final void initHOVE3E(String s) {
if (!s.trim().isEmpty()) {
HOVE3E = Short.parseShort(s);
} else {
HOVE3E = Short.MIN_VALUE;
}
}

protected final void initHOVE3L(String s) {
if (!s.trim().isEmpty()) {
HOVE3L = Integer.parseInt(s);
} else {
HOVE3L = Integer.MIN_VALUE;
}
}

protected final void initHOVE3R(String s) {
if (!s.trim().isEmpty()) {
HOVE3R = Byte.parseByte(s);
} else {
HOVE3R = Byte.MIN_VALUE;
}
}

protected final void initHOVE3U(String s) {
if (!s.trim().isEmpty()) {
HOVE3U = Integer.parseInt(s);
} else {
HOVE3U = Integer.MIN_VALUE;
}
}

protected final void initHOVE4(String s) {
if (!s.trim().isEmpty()) {
HOVE4 = Short.parseShort(s);
} else {
HOVE4 = Short.MIN_VALUE;
}
}

protected final void initHOVE4E(String s) {
if (!s.trim().isEmpty()) {
HOVE4E = Byte.parseByte(s);
} else {
HOVE4E = Byte.MIN_VALUE;
}
}

protected final void initHOVE4L(String s) {
if (!s.trim().isEmpty()) {
HOVE4L = Short.parseShort(s);
} else {
HOVE4L = Short.MIN_VALUE;
}
}

protected final void initHOVE4R(String s) {
if (!s.trim().isEmpty()) {
HOVE4R = Byte.parseByte(s);
} else {
HOVE4R = Byte.MIN_VALUE;
}
}

protected final void initHOVE4U(String s) {
if (!s.trim().isEmpty()) {
HOVE4U = Short.parseShort(s);
} else {
HOVE4U = Short.MIN_VALUE;
}
}

protected final void initHOVE5(String s) {
if (!s.trim().isEmpty()) {
HOVE5 = Short.parseShort(s);
} else {
HOVE5 = Short.MIN_VALUE;
}
}

protected final void initHOVE5E(String s) {
if (!s.trim().isEmpty()) {
HOVE5E = Byte.parseByte(s);
} else {
HOVE5E = Byte.MIN_VALUE;
}
}

protected final void initHOVE5L(String s) {
if (!s.trim().isEmpty()) {
HOVE5L = Integer.parseInt(s);
} else {
HOVE5L = Integer.MIN_VALUE;
}
}

protected final void initHOVE5R(String s) {
if (!s.trim().isEmpty()) {
HOVE5R = Byte.parseByte(s);
} else {
HOVE5R = Byte.MIN_VALUE;
}
}

protected final void initHOVE5U(String s) {
if (!s.trim().isEmpty()) {
HOVE5U = Integer.parseInt(s);
} else {
HOVE5U = Integer.MIN_VALUE;
}
}

protected final void initHOVER(String s) {
if (!s.trim().isEmpty()) {
HOVER = s;
}
}

protected final void initHOVER10(String s) {
if (!s.trim().isEmpty()) {
HOVER10 = s;
}
}

protected final void initHOVER2(String s) {
if (!s.trim().isEmpty()) {
HOVER2 = s;
}
}

protected final void initHOVER3(String s) {
if (!s.trim().isEmpty()) {
HOVER3 = s;
}
}

protected final void initHOVER4(String s) {
if (!s.trim().isEmpty()) {
HOVER4 = s;
}
}

protected final void initHOVER5(String s) {
if (!s.trim().isEmpty()) {
HOVER5 = s;
}
}

protected final void initHOVER6(String s) {
if (!s.trim().isEmpty()) {
HOVER6 = s;
}
}

protected final void initHOVER7(String s) {
if (!s.trim().isEmpty()) {
HOVER7 = s;
}
}

protected final void initHOVER8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HOVER8 = false;
}
}

protected final void initHOVER9(String s) {
if (!s.trim().isEmpty()) {
HOVER9 = s;
}
}

protected final void initHOVLR(String s) {
if (!s.trim().isEmpty()) {
HOVLR = s;
}
}

protected final void initHOVLR10(String s) {
if (!s.trim().isEmpty()) {
HOVLR10 = s;
}
}

protected final void initHOVLR2(String s) {
if (!s.trim().isEmpty()) {
HOVLR2 = s;
}
}

protected final void initHOVLR3(String s) {
if (!s.trim().isEmpty()) {
HOVLR3 = s;
}
}

protected final void initHOVLR4(String s) {
if (!s.trim().isEmpty()) {
HOVLR4 = s;
}
}

protected final void initHOVLR5(String s) {
if (!s.trim().isEmpty()) {
HOVLR5 = s;
}
}

protected final void initHOVLR6(String s) {
if (!s.trim().isEmpty()) {
HOVLR6 = s;
}
}

protected final void initHOVLR7(String s) {
if (!s.trim().isEmpty()) {
HOVLR7 = s;
}
}

protected final void initHOVLR8(String s) {
if (!s.trim().isEmpty()) {
HOVLR8 = s;
}
}

protected final void initHOVLR9(String s) {
if (!s.trim().isEmpty()) {
HOVLR9 = s;
}
}

protected final void initHOVM1E(String s) {
if (!s.trim().isEmpty()) {
HOVM1E = Byte.parseByte(s);
} else {
HOVM1E = Byte.MIN_VALUE;
}
}

protected final void initHOVM1L(String s) {
if (!s.trim().isEmpty()) {
HOVM1L = Integer.parseInt(s);
} else {
HOVM1L = Integer.MIN_VALUE;
}
}

protected final void initHOVM1R(String s) {
if (!s.trim().isEmpty()) {
HOVM1R = Byte.parseByte(s);
} else {
HOVM1R = Byte.MIN_VALUE;
}
}

protected final void initHOVM1U(String s) {
if (!s.trim().isEmpty()) {
HOVM1U = Integer.parseInt(s);
} else {
HOVM1U = Integer.MIN_VALUE;
}
}

protected final void initHOVM2E(String s) {
if (!s.trim().isEmpty()) {
HOVM2E = Byte.parseByte(s);
} else {
HOVM2E = Byte.MIN_VALUE;
}
}

protected final void initHOVM2L(String s) {
if (!s.trim().isEmpty()) {
HOVM2L = Integer.parseInt(s);
} else {
HOVM2L = Integer.MIN_VALUE;
}
}

protected final void initHOVM2R(String s) {
if (!s.trim().isEmpty()) {
HOVM2R = Byte.parseByte(s);
} else {
HOVM2R = Byte.MIN_VALUE;
}
}

protected final void initHOVM2U(String s) {
if (!s.trim().isEmpty()) {
HOVM2U = Integer.parseInt(s);
} else {
HOVM2U = Integer.MIN_VALUE;
}
}

protected final void initHOVM3E(String s) {
if (!s.trim().isEmpty()) {
HOVM3E = Byte.parseByte(s);
} else {
HOVM3E = Byte.MIN_VALUE;
}
}

protected final void initHOVM3L(String s) {
if (!s.trim().isEmpty()) {
HOVM3L = Integer.parseInt(s);
} else {
HOVM3L = Integer.MIN_VALUE;
}
}

protected final void initHOVM3R(String s) {
if (!s.trim().isEmpty()) {
HOVM3R = Byte.parseByte(s);
} else {
HOVM3R = Byte.MIN_VALUE;
}
}

protected final void initHOVM3U(String s) {
if (!s.trim().isEmpty()) {
HOVM3U = Integer.parseInt(s);
} else {
HOVM3U = Integer.MIN_VALUE;
}
}

protected final void initHOVM4E(String s) {
if (!s.trim().isEmpty()) {
HOVM4E = Byte.parseByte(s);
} else {
HOVM4E = Byte.MIN_VALUE;
}
}

protected final void initHOVM4L(String s) {
if (!s.trim().isEmpty()) {
HOVM4L = Integer.parseInt(s);
} else {
HOVM4L = Integer.MIN_VALUE;
}
}

protected final void initHOVM4R(String s) {
if (!s.trim().isEmpty()) {
HOVM4R = Byte.parseByte(s);
} else {
HOVM4R = Byte.MIN_VALUE;
}
}

protected final void initHOVM4U(String s) {
if (!s.trim().isEmpty()) {
HOVM4U = Integer.parseInt(s);
} else {
HOVM4U = Integer.MIN_VALUE;
}
}

protected final void initHOVM5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM5E = false;
} else {
HOVM5E = true;
}
}
}

protected final void initHOVM5L(String s) {
if (!s.trim().isEmpty()) {
HOVM5L = Short.parseShort(s);
} else {
HOVM5L = Short.MIN_VALUE;
}
}

protected final void initHOVM5R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVM5R = false;
} else {
HOVM5R = true;
}
}
}

protected final void initHOVM5U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HOVM5U = false;
} else {
HOVM5U = true;
}
}
}

protected final void initHOVML(String s) {
if (!s.trim().isEmpty()) {
HOVML = Integer.parseInt(s);
} else {
HOVML = Integer.MIN_VALUE;
}
}

protected final void initHOVML2(String s) {
if (!s.trim().isEmpty()) {
HOVML2 = Integer.parseInt(s);
} else {
HOVML2 = Integer.MIN_VALUE;
}
}

protected final void initHOVML3(String s) {
if (!s.trim().isEmpty()) {
HOVML3 = Integer.parseInt(s);
} else {
HOVML3 = Integer.MIN_VALUE;
}
}

protected final void initHOVML4(String s) {
if (!s.trim().isEmpty()) {
HOVML4 = Integer.parseInt(s);
} else {
HOVML4 = Integer.MIN_VALUE;
}
}

protected final void initHOVML5(String s) {
if (!s.trim().isEmpty()) {
HOVML5 = Integer.parseInt(s);
} else {
HOVML5 = Integer.MIN_VALUE;
}
}

protected final void initHOVNO(String s) {
if (!s.trim().isEmpty()) {
HOVNO = Byte.parseByte(s);
} else {
HOVNO = Byte.MIN_VALUE;
}
}

protected final void initHOVNO10(String s) {
if (!s.trim().isEmpty()) {
HOVNO10 = Byte.parseByte(s);
} else {
HOVNO10 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO2(String s) {
if (!s.trim().isEmpty()) {
HOVNO2 = Byte.parseByte(s);
} else {
HOVNO2 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO3(String s) {
if (!s.trim().isEmpty()) {
HOVNO3 = Byte.parseByte(s);
} else {
HOVNO3 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO4(String s) {
if (!s.trim().isEmpty()) {
HOVNO4 = Byte.parseByte(s);
} else {
HOVNO4 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO5(String s) {
if (!s.trim().isEmpty()) {
HOVNO5 = Byte.parseByte(s);
} else {
HOVNO5 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO6(String s) {
if (!s.trim().isEmpty()) {
HOVNO6 = Byte.parseByte(s);
} else {
HOVNO6 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO7(String s) {
if (!s.trim().isEmpty()) {
HOVNO7 = Byte.parseByte(s);
} else {
HOVNO7 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO8(String s) {
if (!s.trim().isEmpty()) {
HOVNO8 = Byte.parseByte(s);
} else {
HOVNO8 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO9(String s) {
if (!s.trim().isEmpty()) {
HOVNO9 = Byte.parseByte(s);
} else {
HOVNO9 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR(String s) {
if (!s.trim().isEmpty()) {
HOVNR = Byte.parseByte(s);
} else {
HOVNR = Byte.MIN_VALUE;
}
}

protected final void initHOVNR10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR10 = false;
} else {
HOVNR10 = true;
}
}
}

protected final void initHOVNR2(String s) {
if (!s.trim().isEmpty()) {
HOVNR2 = Byte.parseByte(s);
} else {
HOVNR2 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR3(String s) {
if (!s.trim().isEmpty()) {
HOVNR3 = s;
}
}

protected final void initHOVNR4(String s) {
if (!s.trim().isEmpty()) {
HOVNR4 = Byte.parseByte(s);
} else {
HOVNR4 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR5(String s) {
if (!s.trim().isEmpty()) {
HOVNR5 = Byte.parseByte(s);
} else {
HOVNR5 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR6(String s) {
if (!s.trim().isEmpty()) {
HOVNR6 = Byte.parseByte(s);
} else {
HOVNR6 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR7(String s) {
if (!s.trim().isEmpty()) {
HOVNR7 = Byte.parseByte(s);
} else {
HOVNR7 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR8(String s) {
if (!s.trim().isEmpty()) {
HOVNR8 = Byte.parseByte(s);
} else {
HOVNR8 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR9(String s) {
if (!s.trim().isEmpty()) {
HOVNR9 = Byte.parseByte(s);
} else {
HOVNR9 = Byte.MIN_VALUE;
}
}

protected final void initHOVO101(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO101 = false;
} else {
HOVO101 = true;
}
}
}

protected final void initHOVO102(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO102 = false;
} else {
HOVO102 = true;
}
}
}

protected final void initHOVO11(String s) {
if (!s.trim().isEmpty()) {
HOVO11 = Byte.parseByte(s);
} else {
HOVO11 = Byte.MIN_VALUE;
}
}

protected final void initHOVO12(String s) {
if (!s.trim().isEmpty()) {
HOVO12 = Byte.parseByte(s);
} else {
HOVO12 = Byte.MIN_VALUE;
}
}

protected final void initHOVO21(String s) {
if (!s.trim().isEmpty()) {
HOVO21 = Byte.parseByte(s);
} else {
HOVO21 = Byte.MIN_VALUE;
}
}

protected final void initHOVO22(String s) {
if (!s.trim().isEmpty()) {
HOVO22 = Byte.parseByte(s);
} else {
HOVO22 = Byte.MIN_VALUE;
}
}

protected final void initHOVO31(String s) {
if (!s.trim().isEmpty()) {
HOVO31 = Byte.parseByte(s);
} else {
HOVO31 = Byte.MIN_VALUE;
}
}

protected final void initHOVO32(String s) {
if (!s.trim().isEmpty()) {
HOVO32 = Byte.parseByte(s);
} else {
HOVO32 = Byte.MIN_VALUE;
}
}

protected final void initHOVO41(String s) {
if (!s.trim().isEmpty()) {
HOVO41 = Byte.parseByte(s);
} else {
HOVO41 = Byte.MIN_VALUE;
}
}

protected final void initHOVO42(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO42 = false;
} else {
HOVO42 = true;
}
}
}

protected final void initHOVO51(String s) {
if (!s.trim().isEmpty()) {
HOVO51 = Byte.parseByte(s);
} else {
HOVO51 = Byte.MIN_VALUE;
}
}

protected final void initHOVO52(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO52 = false;
} else {
HOVO52 = true;
}
}
}

protected final void initHOVO61(String s) {
if (!s.trim().isEmpty()) {
HOVO61 = Byte.parseByte(s);
} else {
HOVO61 = Byte.MIN_VALUE;
}
}

protected final void initHOVO62(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO62 = false;
} else {
HOVO62 = true;
}
}
}

protected final void initHOVO71(String s) {
if (!s.trim().isEmpty()) {
HOVO71 = Byte.parseByte(s);
} else {
HOVO71 = Byte.MIN_VALUE;
}
}

protected final void initHOVO72(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO72 = false;
} else {
HOVO72 = true;
}
}
}

protected final void initHOVO81(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO81 = false;
} else {
HOVO81 = true;
}
}
}

protected final void initHOVO82(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO82 = false;
} else {
HOVO82 = true;
}
}
}

protected final void initHOVO91(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO91 = false;
} else {
HOVO91 = true;
}
}
}

protected final void initHOVO92(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVO92 = false;
} else {
HOVO92 = true;
}
}
}

protected final void initHOVW2(String s) {
if (!s.trim().isEmpty()) {
HOVW2 = Byte.parseByte(s);
} else {
HOVW2 = Byte.MIN_VALUE;
}
}

protected final void initHOVW3(String s) {
if (!s.trim().isEmpty()) {
HOVW3 = Byte.parseByte(s);
} else {
HOVW3 = Byte.MIN_VALUE;
}
}

protected final void initHOVW4(String s) {
if (!s.trim().isEmpty()) {
HOVW4 = Byte.parseByte(s);
} else {
HOVW4 = Byte.MIN_VALUE;
}
}

protected final void initHOVW5(String s) {
if (!s.trim().isEmpty()) {
HOVW5 = Byte.parseByte(s);
} else {
HOVW5 = Byte.MIN_VALUE;
}
}

protected final void initHOVW6(String s) {
if (!s.trim().isEmpty()) {
HOVW6 = Byte.parseByte(s);
} else {
HOVW6 = Byte.MIN_VALUE;
}
}

protected final void initHOVW7(String s) {
if (!s.trim().isEmpty()) {
HOVW7 = Byte.parseByte(s);
} else {
HOVW7 = Byte.MIN_VALUE;
}
}

protected final void initHOVW8(String s) {
if (!s.trim().isEmpty()) {
HOVW8 = Byte.parseByte(s);
} else {
HOVW8 = Byte.MIN_VALUE;
}
}

protected final void initHOVYR(String s) {
if (!s.trim().isEmpty()) {
HOVYR = Short.parseShort(s);
} else {
HOVYR = Short.MIN_VALUE;
}
}

protected final void initHOVYR10(String s) {
if (!s.trim().isEmpty()) {
HOVYR10 = Short.parseShort(s);
} else {
HOVYR10 = Short.MIN_VALUE;
}
}

protected final void initHOVYR2(String s) {
if (!s.trim().isEmpty()) {
HOVYR2 = Short.parseShort(s);
} else {
HOVYR2 = Short.MIN_VALUE;
}
}

protected final void initHOVYR3(String s) {
if (!s.trim().isEmpty()) {
HOVYR3 = Short.parseShort(s);
} else {
HOVYR3 = Short.MIN_VALUE;
}
}

protected final void initHOVYR4(String s) {
if (!s.trim().isEmpty()) {
HOVYR4 = Short.parseShort(s);
} else {
HOVYR4 = Short.MIN_VALUE;
}
}

protected final void initHOVYR5(String s) {
if (!s.trim().isEmpty()) {
HOVYR5 = Short.parseShort(s);
} else {
HOVYR5 = Short.MIN_VALUE;
}
}

protected final void initHOVYR6(String s) {
if (!s.trim().isEmpty()) {
HOVYR6 = Short.parseShort(s);
} else {
HOVYR6 = Short.MIN_VALUE;
}
}

protected final void initHOVYR7(String s) {
if (!s.trim().isEmpty()) {
HOVYR7 = Short.parseShort(s);
} else {
HOVYR7 = Short.MIN_VALUE;
}
}

protected final void initHOVYR8(String s) {
if (!s.trim().isEmpty()) {
HOVYR8 = Short.parseShort(s);
} else {
HOVYR8 = Short.MIN_VALUE;
}
}

protected final void initHOVYR9(String s) {
if (!s.trim().isEmpty()) {
HOVYR9 = Short.parseShort(s);
} else {
HOVYR9 = Short.MIN_VALUE;
}
}

protected final void initHOWHN01(String s) {
if (!s.trim().isEmpty()) {
HOWHN01 = Byte.parseByte(s);
} else {
HOWHN01 = Byte.MIN_VALUE;
}
}

protected final void initHOWHN02(String s) {
if (!s.trim().isEmpty()) {
HOWHN02 = Byte.parseByte(s);
} else {
HOWHN02 = Byte.MIN_VALUE;
}
}

protected final void initHOWHN03(String s) {
if (!s.trim().isEmpty()) {
HOWHN03 = Byte.parseByte(s);
} else {
HOWHN03 = Byte.MIN_VALUE;
}
}

protected final void initHOWHN04(String s) {
if (!s.trim().isEmpty()) {
HOWHN04 = Byte.parseByte(s);
} else {
HOWHN04 = Byte.MIN_VALUE;
}
}

protected final void initHOYML(String s) {
if (!s.trim().isEmpty()) {
HOYML = Byte.parseByte(s);
} else {
HOYML = Byte.MIN_VALUE;
}
}

protected final void initHOYML2(String s) {
if (!s.trim().isEmpty()) {
HOYML2 = Byte.parseByte(s);
} else {
HOYML2 = Byte.MIN_VALUE;
}
}

protected final void initHOYML3(String s) {
if (!s.trim().isEmpty()) {
HOYML3 = Byte.parseByte(s);
} else {
HOYML3 = Byte.MIN_VALUE;
}
}

protected final void initHOYML4(String s) {
if (!s.trim().isEmpty()) {
HOYML4 = Byte.parseByte(s);
} else {
HOYML4 = Byte.MIN_VALUE;
}
}

protected final void initHOYML5(String s) {
if (!s.trim().isEmpty()) {
HOYML5 = Byte.parseByte(s);
} else {
HOYML5 = Byte.MIN_VALUE;
}
}

protected final void initIAA39(String s) {
if (!s.trim().isEmpty()) {
IAA39 = Short.parseShort(s);
} else {
IAA39 = Short.MIN_VALUE;
}
}

protected final void initIAA39FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FE = false;
} else {
IAA39FE = true;
}
}
}

protected final void initIAA39FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FL = false;
} else {
IAA39FL = true;
}
}
}

protected final void initIAA39FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FR = false;
} else {
IAA39FR = true;
}
}
}

protected final void initIAA39FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FU = false;
} else {
IAA39FU = true;
}
}
}

protected final void initIAA39ME(String s) {
if (!s.trim().isEmpty()) {
IAA39ME = Byte.parseByte(s);
} else {
IAA39ME = Byte.MIN_VALUE;
}
}

protected final void initIAA39ML(String s) {
if (!s.trim().isEmpty()) {
IAA39ML = Short.parseShort(s);
} else {
IAA39ML = Short.MIN_VALUE;
}
}

protected final void initIAA39MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39MR = false;
} else {
IAA39MR = true;
}
}
}

protected final void initIAA39MU(String s) {
if (!s.trim().isEmpty()) {
IAA39MU = Short.parseShort(s);
} else {
IAA39MU = Short.MIN_VALUE;
}
}

protected final void initIAA39OE(String s) {
if (!s.trim().isEmpty()) {
IAA39OE = Byte.parseByte(s);
} else {
IAA39OE = Byte.MIN_VALUE;
}
}

protected final void initIAA39OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39OL = false;
} else {
IAA39OL = true;
}
}
}

protected final void initIAA39OR(String s) {
if (!s.trim().isEmpty()) {
IAA39OR = Byte.parseByte(s);
} else {
IAA39OR = Byte.MIN_VALUE;
}
}

protected final void initIAA39OU(String s) {
if (!s.trim().isEmpty()) {
IAA39OU = Short.parseShort(s);
} else {
IAA39OU = Short.MIN_VALUE;
}
}

protected final void initIAA39WE(String s) {
if (!s.trim().isEmpty()) {
IAA39WE = Byte.parseByte(s);
} else {
IAA39WE = Byte.MIN_VALUE;
}
}

protected final void initIAA39WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WL = false;
} else {
IAA39WL = true;
}
}
}

protected final void initIAA39WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WR = false;
} else {
IAA39WR = true;
}
}
}

protected final void initIAA39WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WU = false;
} else {
IAA39WU = true;
}
}
}

protected final void initIAA39YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YE = false;
} else {
IAA39YE = true;
}
}
}

protected final void initIAA39YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YL = false;
} else {
IAA39YL = true;
}
}
}

protected final void initIAA39YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YR = false;
} else {
IAA39YR = true;
}
}
}

protected final void initIAA39YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YU = false;
} else {
IAA39YU = true;
}
}
}

protected final void initIAA40(String s) {
if (!s.trim().isEmpty()) {
IAA40 = Short.parseShort(s);
} else {
IAA40 = Short.MIN_VALUE;
}
}

protected final void initIAA40FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FE = false;
} else {
IAA40FE = true;
}
}
}

protected final void initIAA40FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FL = false;
} else {
IAA40FL = true;
}
}
}

protected final void initIAA40FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FR = false;
} else {
IAA40FR = true;
}
}
}

protected final void initIAA40FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FU = false;
} else {
IAA40FU = true;
}
}
}

protected final void initIAA40ME(String s) {
if (!s.trim().isEmpty()) {
IAA40ME = Byte.parseByte(s);
} else {
IAA40ME = Byte.MIN_VALUE;
}
}

protected final void initIAA40ML(String s) {
if (!s.trim().isEmpty()) {
IAA40ML = Short.parseShort(s);
} else {
IAA40ML = Short.MIN_VALUE;
}
}

protected final void initIAA40MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40MR = false;
} else {
IAA40MR = true;
}
}
}

protected final void initIAA40MU(String s) {
if (!s.trim().isEmpty()) {
IAA40MU = Short.parseShort(s);
} else {
IAA40MU = Short.MIN_VALUE;
}
}

protected final void initIAA40OE(String s) {
if (!s.trim().isEmpty()) {
IAA40OE = Byte.parseByte(s);
} else {
IAA40OE = Byte.MIN_VALUE;
}
}

protected final void initIAA40OL(String s) {
if (!s.trim().isEmpty()) {
IAA40OL = Short.parseShort(s);
} else {
IAA40OL = Short.MIN_VALUE;
}
}

protected final void initIAA40OR(String s) {
if (!s.trim().isEmpty()) {
IAA40OR = Byte.parseByte(s);
} else {
IAA40OR = Byte.MIN_VALUE;
}
}

protected final void initIAA40OU(String s) {
if (!s.trim().isEmpty()) {
IAA40OU = Short.parseShort(s);
} else {
IAA40OU = Short.MIN_VALUE;
}
}

protected final void initIAA40WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WE = false;
} else {
IAA40WE = true;
}
}
}

protected final void initIAA40WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WL = false;
} else {
IAA40WL = true;
}
}
}

protected final void initIAA40WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WR = false;
} else {
IAA40WR = true;
}
}
}

protected final void initIAA40WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WU = false;
} else {
IAA40WU = true;
}
}
}

protected final void initIAA40YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YE = false;
} else {
IAA40YE = true;
}
}
}

protected final void initIAA40YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YL = false;
} else {
IAA40YL = true;
}
}
}

protected final void initIAA40YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YR = false;
} else {
IAA40YR = true;
}
}
}

protected final void initIAA40YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YU = false;
} else {
IAA40YU = true;
}
}
}

protected final void initIAA41(String s) {
if (!s.trim().isEmpty()) {
IAA41 = Short.parseShort(s);
} else {
IAA41 = Short.MIN_VALUE;
}
}

protected final void initIAA41FE(String s) {
if (!s.trim().isEmpty()) {
IAA41FE = Byte.parseByte(s);
} else {
IAA41FE = Byte.MIN_VALUE;
}
}

protected final void initIAA41FL(String s) {
if (!s.trim().isEmpty()) {
IAA41FL = Short.parseShort(s);
} else {
IAA41FL = Short.MIN_VALUE;
}
}

protected final void initIAA41FR(String s) {
if (!s.trim().isEmpty()) {
IAA41FR = Byte.parseByte(s);
} else {
IAA41FR = Byte.MIN_VALUE;
}
}

protected final void initIAA41FU(String s) {
if (!s.trim().isEmpty()) {
IAA41FU = Short.parseShort(s);
} else {
IAA41FU = Short.MIN_VALUE;
}
}

protected final void initIAA41ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41ME = false;
} else {
IAA41ME = true;
}
}
}

protected final void initIAA41ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA41ML = false;
} else {
IAA41ML = true;
}
}
}

protected final void initIAA41MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41MR = false;
} else {
IAA41MR = true;
}
}
}

protected final void initIAA41MU(String s) {
if (!s.trim().isEmpty()) {
IAA41MU = Short.parseShort(s);
} else {
IAA41MU = Short.MIN_VALUE;
}
}

protected final void initIAA41OE(String s) {
if (!s.trim().isEmpty()) {
IAA41OE = Byte.parseByte(s);
} else {
IAA41OE = Byte.MIN_VALUE;
}
}

protected final void initIAA41OL(String s) {
if (!s.trim().isEmpty()) {
IAA41OL = Short.parseShort(s);
} else {
IAA41OL = Short.MIN_VALUE;
}
}

protected final void initIAA41OR(String s) {
if (!s.trim().isEmpty()) {
IAA41OR = Byte.parseByte(s);
} else {
IAA41OR = Byte.MIN_VALUE;
}
}

protected final void initIAA41OU(String s) {
if (!s.trim().isEmpty()) {
IAA41OU = Short.parseShort(s);
} else {
IAA41OU = Short.MIN_VALUE;
}
}

protected final void initIAA41WE(String s) {
if (!s.trim().isEmpty()) {
IAA41WE = Byte.parseByte(s);
} else {
IAA41WE = Byte.MIN_VALUE;
}
}

protected final void initIAA41WL(String s) {
if (!s.trim().isEmpty()) {
IAA41WL = Byte.parseByte(s);
} else {
IAA41WL = Byte.MIN_VALUE;
}
}

protected final void initIAA41WR(String s) {
if (!s.trim().isEmpty()) {
IAA41WR = Byte.parseByte(s);
} else {
IAA41WR = Byte.MIN_VALUE;
}
}

protected final void initIAA41WU(String s) {
if (!s.trim().isEmpty()) {
IAA41WU = Byte.parseByte(s);
} else {
IAA41WU = Byte.MIN_VALUE;
}
}

protected final void initIAA41YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YE = false;
} else {
IAA41YE = true;
}
}
}

protected final void initIAA41YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YL = false;
} else {
IAA41YL = true;
}
}
}

protected final void initIAA41YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YR = false;
} else {
IAA41YR = true;
}
}
}

protected final void initIAA41YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YU = false;
} else {
IAA41YU = true;
}
}
}

protected final void initIAA42(String s) {
if (!s.trim().isEmpty()) {
IAA42 = Short.parseShort(s);
} else {
IAA42 = Short.MIN_VALUE;
}
}

protected final void initIAA42FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FE = false;
} else {
IAA42FE = true;
}
}
}

protected final void initIAA42FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FL = false;
} else {
IAA42FL = true;
}
}
}

protected final void initIAA42FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FR = false;
} else {
IAA42FR = true;
}
}
}

protected final void initIAA42FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FU = false;
} else {
IAA42FU = true;
}
}
}

protected final void initIAA42ME(String s) {
if (!s.trim().isEmpty()) {
IAA42ME = Byte.parseByte(s);
} else {
IAA42ME = Byte.MIN_VALUE;
}
}

protected final void initIAA42ML(String s) {
if (!s.trim().isEmpty()) {
IAA42ML = Short.parseShort(s);
} else {
IAA42ML = Short.MIN_VALUE;
}
}

protected final void initIAA42MR(String s) {
if (!s.trim().isEmpty()) {
IAA42MR = Byte.parseByte(s);
} else {
IAA42MR = Byte.MIN_VALUE;
}
}

protected final void initIAA42MU(String s) {
if (!s.trim().isEmpty()) {
IAA42MU = Short.parseShort(s);
} else {
IAA42MU = Short.MIN_VALUE;
}
}

protected final void initIAA42OE(String s) {
if (!s.trim().isEmpty()) {
IAA42OE = Byte.parseByte(s);
} else {
IAA42OE = Byte.MIN_VALUE;
}
}

protected final void initIAA42OL(String s) {
if (!s.trim().isEmpty()) {
IAA42OL = Short.parseShort(s);
} else {
IAA42OL = Short.MIN_VALUE;
}
}

protected final void initIAA42OR(String s) {
if (!s.trim().isEmpty()) {
IAA42OR = Byte.parseByte(s);
} else {
IAA42OR = Byte.MIN_VALUE;
}
}

protected final void initIAA42OU(String s) {
if (!s.trim().isEmpty()) {
IAA42OU = Short.parseShort(s);
} else {
IAA42OU = Short.MIN_VALUE;
}
}

protected final void initIAA42WE(String s) {
if (!s.trim().isEmpty()) {
IAA42WE = Byte.parseByte(s);
} else {
IAA42WE = Byte.MIN_VALUE;
}
}

protected final void initIAA42WL(String s) {
if (!s.trim().isEmpty()) {
IAA42WL = Short.parseShort(s);
} else {
IAA42WL = Short.MIN_VALUE;
}
}

protected final void initIAA42WR(String s) {
if (!s.trim().isEmpty()) {
IAA42WR = Byte.parseByte(s);
} else {
IAA42WR = Byte.MIN_VALUE;
}
}

protected final void initIAA42WU(String s) {
if (!s.trim().isEmpty()) {
IAA42WU = Short.parseShort(s);
} else {
IAA42WU = Short.MIN_VALUE;
}
}

protected final void initIAA42YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42YE = false;
} else {
IAA42YE = true;
}
}
}

protected final void initIAA42YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42YL = false;
} else {
IAA42YL = true;
}
}
}

protected final void initIAA42YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42YR = false;
} else {
IAA42YR = true;
}
}
}

protected final void initIAA42YU(String s) {
if (!s.trim().isEmpty()) {
IAA42YU = Short.parseShort(s);
} else {
IAA42YU = Short.MIN_VALUE;
}
}

protected final void initIAA43(String s) {
if (!s.trim().isEmpty()) {
IAA43 = Short.parseShort(s);
} else {
IAA43 = Short.MIN_VALUE;
}
}

protected final void initIAA43FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FE = false;
} else {
IAA43FE = true;
}
}
}

protected final void initIAA43FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FL = false;
} else {
IAA43FL = true;
}
}
}

protected final void initIAA43FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FR = false;
} else {
IAA43FR = true;
}
}
}

protected final void initIAA43FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FU = false;
} else {
IAA43FU = true;
}
}
}

protected final void initIAA43ME(String s) {
if (!s.trim().isEmpty()) {
IAA43ME = Byte.parseByte(s);
} else {
IAA43ME = Byte.MIN_VALUE;
}
}

protected final void initIAA43ML(String s) {
if (!s.trim().isEmpty()) {
IAA43ML = Short.parseShort(s);
} else {
IAA43ML = Short.MIN_VALUE;
}
}

protected final void initIAA43MR(String s) {
if (!s.trim().isEmpty()) {
IAA43MR = Byte.parseByte(s);
} else {
IAA43MR = Byte.MIN_VALUE;
}
}

protected final void initIAA43MU(String s) {
if (!s.trim().isEmpty()) {
IAA43MU = Short.parseShort(s);
} else {
IAA43MU = Short.MIN_VALUE;
}
}

protected final void initIAA43OE(String s) {
if (!s.trim().isEmpty()) {
IAA43OE = Byte.parseByte(s);
} else {
IAA43OE = Byte.MIN_VALUE;
}
}

protected final void initIAA43OL(String s) {
if (!s.trim().isEmpty()) {
IAA43OL = Byte.parseByte(s);
} else {
IAA43OL = Byte.MIN_VALUE;
}
}

protected final void initIAA43OR(String s) {
if (!s.trim().isEmpty()) {
IAA43OR = Byte.parseByte(s);
} else {
IAA43OR = Byte.MIN_VALUE;
}
}

protected final void initIAA43OU(String s) {
if (!s.trim().isEmpty()) {
IAA43OU = Short.parseShort(s);
} else {
IAA43OU = Short.MIN_VALUE;
}
}

protected final void initIAA43WE(String s) {
if (!s.trim().isEmpty()) {
IAA43WE = Byte.parseByte(s);
} else {
IAA43WE = Byte.MIN_VALUE;
}
}

protected final void initIAA43WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43WL = false;
} else {
IAA43WL = true;
}
}
}

protected final void initIAA43WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43WR = false;
} else {
IAA43WR = true;
}
}
}

protected final void initIAA43WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43WU = false;
} else {
IAA43WU = true;
}
}
}

protected final void initIAA43YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YE = false;
} else {
IAA43YE = true;
}
}
}

protected final void initIAA43YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YL = false;
} else {
IAA43YL = true;
}
}
}

protected final void initIAA43YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YR = false;
} else {
IAA43YR = true;
}
}
}

protected final void initIAA43YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YU = false;
} else {
IAA43YU = true;
}
}
}

protected final void initIAA44(String s) {
if (!s.trim().isEmpty()) {
IAA44 = Short.parseShort(s);
} else {
IAA44 = Short.MIN_VALUE;
}
}

protected final void initIAA44FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FE = false;
} else {
IAA44FE = true;
}
}
}

protected final void initIAA44FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FL = false;
} else {
IAA44FL = true;
}
}
}

protected final void initIAA44FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FR = false;
} else {
IAA44FR = true;
}
}
}

protected final void initIAA44FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FU = false;
} else {
IAA44FU = true;
}
}
}

protected final void initIAA44ME(String s) {
if (!s.trim().isEmpty()) {
IAA44ME = Byte.parseByte(s);
} else {
IAA44ME = Byte.MIN_VALUE;
}
}

protected final void initIAA44ML(String s) {
if (!s.trim().isEmpty()) {
IAA44ML = Short.parseShort(s);
} else {
IAA44ML = Short.MIN_VALUE;
}
}

protected final void initIAA44MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44MR = false;
} else {
IAA44MR = true;
}
}
}

protected final void initIAA44MU(String s) {
if (!s.trim().isEmpty()) {
IAA44MU = Short.parseShort(s);
} else {
IAA44MU = Short.MIN_VALUE;
}
}

protected final void initIAA44OE(String s) {
if (!s.trim().isEmpty()) {
IAA44OE = Byte.parseByte(s);
} else {
IAA44OE = Byte.MIN_VALUE;
}
}

protected final void initIAA44OL(String s) {
if (!s.trim().isEmpty()) {
IAA44OL = Short.parseShort(s);
} else {
IAA44OL = Short.MIN_VALUE;
}
}

protected final void initIAA44OR(String s) {
if (!s.trim().isEmpty()) {
IAA44OR = Byte.parseByte(s);
} else {
IAA44OR = Byte.MIN_VALUE;
}
}

protected final void initIAA44OU(String s) {
if (!s.trim().isEmpty()) {
IAA44OU = Short.parseShort(s);
} else {
IAA44OU = Short.MIN_VALUE;
}
}

protected final void initIAA44WE(String s) {
if (!s.trim().isEmpty()) {
IAA44WE = Byte.parseByte(s);
} else {
IAA44WE = Byte.MIN_VALUE;
}
}

protected final void initIAA44WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44WL = false;
} else {
IAA44WL = true;
}
}
}

protected final void initIAA44WR(String s) {
if (!s.trim().isEmpty()) {
IAA44WR = Byte.parseByte(s);
} else {
IAA44WR = Byte.MIN_VALUE;
}
}

protected final void initIAA44WU(String s) {
if (!s.trim().isEmpty()) {
IAA44WU = Byte.parseByte(s);
} else {
IAA44WU = Byte.MIN_VALUE;
}
}

protected final void initIAA44YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44YE = false;
} else {
IAA44YE = true;
}
}
}

protected final void initIAA44YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44YL = false;
} else {
IAA44YL = true;
}
}
}

protected final void initIAA44YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44YR = false;
} else {
IAA44YR = true;
}
}
}

protected final void initIAA44YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44YU = false;
} else {
IAA44YU = true;
}
}
}

protected final void initIAA45(String s) {
if (!s.trim().isEmpty()) {
IAA45 = Short.parseShort(s);
} else {
IAA45 = Short.MIN_VALUE;
}
}

protected final void initIAA45FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45FE = false;
} else {
IAA45FE = true;
}
}
}

protected final void initIAA45FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45FL = false;
} else {
IAA45FL = true;
}
}
}

protected final void initIAA45FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45FR = false;
} else {
IAA45FR = true;
}
}
}

protected final void initIAA45FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45FU = false;
} else {
IAA45FU = true;
}
}
}

protected final void initIAA45ME(String s) {
if (!s.trim().isEmpty()) {
IAA45ME = Byte.parseByte(s);
} else {
IAA45ME = Byte.MIN_VALUE;
}
}

protected final void initIAA45ML(String s) {
if (!s.trim().isEmpty()) {
IAA45ML = Short.parseShort(s);
} else {
IAA45ML = Short.MIN_VALUE;
}
}

protected final void initIAA45MR(String s) {
if (!s.trim().isEmpty()) {
IAA45MR = Byte.parseByte(s);
} else {
IAA45MR = Byte.MIN_VALUE;
}
}

protected final void initIAA45MU(String s) {
if (!s.trim().isEmpty()) {
IAA45MU = Short.parseShort(s);
} else {
IAA45MU = Short.MIN_VALUE;
}
}

protected final void initIAA45OE(String s) {
if (!s.trim().isEmpty()) {
IAA45OE = Byte.parseByte(s);
} else {
IAA45OE = Byte.MIN_VALUE;
}
}

protected final void initIAA45OL(String s) {
if (!s.trim().isEmpty()) {
IAA45OL = Short.parseShort(s);
} else {
IAA45OL = Short.MIN_VALUE;
}
}

protected final void initIAA45OR(String s) {
if (!s.trim().isEmpty()) {
IAA45OR = Byte.parseByte(s);
} else {
IAA45OR = Byte.MIN_VALUE;
}
}

protected final void initIAA45OU(String s) {
if (!s.trim().isEmpty()) {
IAA45OU = Short.parseShort(s);
} else {
IAA45OU = Short.MIN_VALUE;
}
}

protected final void initIAA45WE(String s) {
if (!s.trim().isEmpty()) {
IAA45WE = Byte.parseByte(s);
} else {
IAA45WE = Byte.MIN_VALUE;
}
}

protected final void initIAA45WL(String s) {
if (!s.trim().isEmpty()) {
IAA45WL = Byte.parseByte(s);
} else {
IAA45WL = Byte.MIN_VALUE;
}
}

protected final void initIAA45WR(String s) {
if (!s.trim().isEmpty()) {
IAA45WR = Byte.parseByte(s);
} else {
IAA45WR = Byte.MIN_VALUE;
}
}

protected final void initIAA45WU(String s) {
if (!s.trim().isEmpty()) {
IAA45WU = Short.parseShort(s);
} else {
IAA45WU = Short.MIN_VALUE;
}
}

protected final void initIAA45YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YE = false;
} else {
IAA45YE = true;
}
}
}

protected final void initIAA45YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YL = false;
} else {
IAA45YL = true;
}
}
}

protected final void initIAA45YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YR = false;
} else {
IAA45YR = true;
}
}
}

protected final void initIAA45YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YU = false;
} else {
IAA45YU = true;
}
}
}

protected final void initIAA46(String s) {
if (!s.trim().isEmpty()) {
IAA46 = Short.parseShort(s);
} else {
IAA46 = Short.MIN_VALUE;
}
}

protected final void initIAA46FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46FE = false;
} else {
IAA46FE = true;
}
}
}

protected final void initIAA46FL(String s) {
if (!s.trim().isEmpty()) {
IAA46FL = Short.parseShort(s);
} else {
IAA46FL = Short.MIN_VALUE;
}
}

protected final void initIAA46FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46FR = false;
} else {
IAA46FR = true;
}
}
}

protected final void initIAA46FU(String s) {
if (!s.trim().isEmpty()) {
IAA46FU = Short.parseShort(s);
} else {
IAA46FU = Short.MIN_VALUE;
}
}

protected final void initIAA46ME(String s) {
if (!s.trim().isEmpty()) {
IAA46ME = Byte.parseByte(s);
} else {
IAA46ME = Byte.MIN_VALUE;
}
}

protected final void initIAA46ML(String s) {
if (!s.trim().isEmpty()) {
IAA46ML = Short.parseShort(s);
} else {
IAA46ML = Short.MIN_VALUE;
}
}

protected final void initIAA46MR(String s) {
if (!s.trim().isEmpty()) {
IAA46MR = Byte.parseByte(s);
} else {
IAA46MR = Byte.MIN_VALUE;
}
}

protected final void initIAA46MU(String s) {
if (!s.trim().isEmpty()) {
IAA46MU = Short.parseShort(s);
} else {
IAA46MU = Short.MIN_VALUE;
}
}

protected final void initIAA46OE(String s) {
if (!s.trim().isEmpty()) {
IAA46OE = Byte.parseByte(s);
} else {
IAA46OE = Byte.MIN_VALUE;
}
}

protected final void initIAA46OL(String s) {
if (!s.trim().isEmpty()) {
IAA46OL = Short.parseShort(s);
} else {
IAA46OL = Short.MIN_VALUE;
}
}

protected final void initIAA46OR(String s) {
if (!s.trim().isEmpty()) {
IAA46OR = Byte.parseByte(s);
} else {
IAA46OR = Byte.MIN_VALUE;
}
}

protected final void initIAA46OU(String s) {
if (!s.trim().isEmpty()) {
IAA46OU = Short.parseShort(s);
} else {
IAA46OU = Short.MIN_VALUE;
}
}

protected final void initIAA46WE(String s) {
if (!s.trim().isEmpty()) {
IAA46WE = Byte.parseByte(s);
} else {
IAA46WE = Byte.MIN_VALUE;
}
}

protected final void initIAA46WL(String s) {
if (!s.trim().isEmpty()) {
IAA46WL = Byte.parseByte(s);
} else {
IAA46WL = Byte.MIN_VALUE;
}
}

protected final void initIAA46WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46WR = false;
} else {
IAA46WR = true;
}
}
}

protected final void initIAA46WU(String s) {
if (!s.trim().isEmpty()) {
IAA46WU = Byte.parseByte(s);
} else {
IAA46WU = Byte.MIN_VALUE;
}
}

protected final void initIAA46YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YE = false;
} else {
IAA46YE = true;
}
}
}

protected final void initIAA46YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YL = false;
} else {
IAA46YL = true;
}
}
}

protected final void initIAA46YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YR = false;
} else {
IAA46YR = true;
}
}
}

protected final void initIAA46YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YU = false;
} else {
IAA46YU = true;
}
}
}

protected final void initIAA47(String s) {
if (!s.trim().isEmpty()) {
IAA47 = Short.parseShort(s);
} else {
IAA47 = Short.MIN_VALUE;
}
}

protected final void initIAA47FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FE = false;
} else {
IAA47FE = true;
}
}
}

protected final void initIAA47FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FL = false;
} else {
IAA47FL = true;
}
}
}

protected final void initIAA47FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FR = false;
} else {
IAA47FR = true;
}
}
}

protected final void initIAA47FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FU = false;
} else {
IAA47FU = true;
}
}
}

protected final void initIAA47ME(String s) {
if (!s.trim().isEmpty()) {
IAA47ME = Byte.parseByte(s);
} else {
IAA47ME = Byte.MIN_VALUE;
}
}

protected final void initIAA47ML(String s) {
if (!s.trim().isEmpty()) {
IAA47ML = Short.parseShort(s);
} else {
IAA47ML = Short.MIN_VALUE;
}
}

protected final void initIAA47MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47MR = false;
} else {
IAA47MR = true;
}
}
}

protected final void initIAA47MU(String s) {
if (!s.trim().isEmpty()) {
IAA47MU = Short.parseShort(s);
} else {
IAA47MU = Short.MIN_VALUE;
}
}

protected final void initIAA47OE(String s) {
if (!s.trim().isEmpty()) {
IAA47OE = Byte.parseByte(s);
} else {
IAA47OE = Byte.MIN_VALUE;
}
}

protected final void initIAA47OL(String s) {
if (!s.trim().isEmpty()) {
IAA47OL = Short.parseShort(s);
} else {
IAA47OL = Short.MIN_VALUE;
}
}

protected final void initIAA47OR(String s) {
if (!s.trim().isEmpty()) {
IAA47OR = Byte.parseByte(s);
} else {
IAA47OR = Byte.MIN_VALUE;
}
}

protected final void initIAA47OU(String s) {
if (!s.trim().isEmpty()) {
IAA47OU = Short.parseShort(s);
} else {
IAA47OU = Short.MIN_VALUE;
}
}

protected final void initIAA47WE(String s) {
if (!s.trim().isEmpty()) {
IAA47WE = Byte.parseByte(s);
} else {
IAA47WE = Byte.MIN_VALUE;
}
}

protected final void initIAA47WL(String s) {
if (!s.trim().isEmpty()) {
IAA47WL = Byte.parseByte(s);
} else {
IAA47WL = Byte.MIN_VALUE;
}
}

protected final void initIAA47WR(String s) {
if (!s.trim().isEmpty()) {
IAA47WR = Byte.parseByte(s);
} else {
IAA47WR = Byte.MIN_VALUE;
}
}

protected final void initIAA47WU(String s) {
if (!s.trim().isEmpty()) {
IAA47WU = Byte.parseByte(s);
} else {
IAA47WU = Byte.MIN_VALUE;
}
}

protected final void initIAA47YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47YE = false;
} else {
IAA47YE = true;
}
}
}

protected final void initIAA47YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA47YL = false;
} else {
IAA47YL = true;
}
}
}

protected final void initIAA47YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47YR = false;
} else {
IAA47YR = true;
}
}
}

protected final void initIAA47YU(String s) {
if (!s.trim().isEmpty()) {
IAA47YU = Short.parseShort(s);
} else {
IAA47YU = Short.MIN_VALUE;
}
}

protected final void initIAA48(String s) {
if (!s.trim().isEmpty()) {
IAA48 = Short.parseShort(s);
} else {
IAA48 = Short.MIN_VALUE;
}
}

protected final void initIAA48FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FE = false;
} else {
IAA48FE = true;
}
}
}

protected final void initIAA48FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA48FL = false;
} else {
IAA48FL = true;
}
}
}

protected final void initIAA48FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FR = false;
} else {
IAA48FR = true;
}
}
}

protected final void initIAA48FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FU = false;
} else {
IAA48FU = true;
}
}
}

protected final void initIAA48ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48ME = false;
} else {
IAA48ME = true;
}
}
}

protected final void initIAA48ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA48ML = false;
} else {
IAA48ML = true;
}
}
}

protected final void initIAA48MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48MR = false;
} else {
IAA48MR = true;
}
}
}

protected final void initIAA48MU(String s) {
if (!s.trim().isEmpty()) {
IAA48MU = Short.parseShort(s);
} else {
IAA48MU = Short.MIN_VALUE;
}
}

protected final void initIAA48OE(String s) {
if (!s.trim().isEmpty()) {
IAA48OE = Byte.parseByte(s);
} else {
IAA48OE = Byte.MIN_VALUE;
}
}

protected final void initIAA48OL(String s) {
if (!s.trim().isEmpty()) {
IAA48OL = Short.parseShort(s);
} else {
IAA48OL = Short.MIN_VALUE;
}
}

protected final void initIAA48OR(String s) {
if (!s.trim().isEmpty()) {
IAA48OR = Byte.parseByte(s);
} else {
IAA48OR = Byte.MIN_VALUE;
}
}

protected final void initIAA48OU(String s) {
if (!s.trim().isEmpty()) {
IAA48OU = Short.parseShort(s);
} else {
IAA48OU = Short.MIN_VALUE;
}
}

protected final void initIAA48WE(String s) {
if (!s.trim().isEmpty()) {
IAA48WE = Byte.parseByte(s);
} else {
IAA48WE = Byte.MIN_VALUE;
}
}

protected final void initIAA48WL(String s) {
if (!s.trim().isEmpty()) {
IAA48WL = Byte.parseByte(s);
} else {
IAA48WL = Byte.MIN_VALUE;
}
}

protected final void initIAA48WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48WR = false;
} else {
IAA48WR = true;
}
}
}

protected final void initIAA48WU(String s) {
if (!s.trim().isEmpty()) {
IAA48WU = Short.parseShort(s);
} else {
IAA48WU = Short.MIN_VALUE;
}
}

protected final void initIAA48YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YE = false;
} else {
IAA48YE = true;
}
}
}

protected final void initIAA48YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YL = false;
} else {
IAA48YL = true;
}
}
}

protected final void initIAA48YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YR = false;
} else {
IAA48YR = true;
}
}
}

protected final void initIAA48YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YU = false;
} else {
IAA48YU = true;
}
}
}

protected final void initIAA49(String s) {
if (!s.trim().isEmpty()) {
IAA49 = Short.parseShort(s);
} else {
IAA49 = Short.MIN_VALUE;
}
}

protected final void initIAA49FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FE = false;
} else {
IAA49FE = true;
}
}
}

protected final void initIAA49FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FL = false;
} else {
IAA49FL = true;
}
}
}

protected final void initIAA49FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FR = false;
} else {
IAA49FR = true;
}
}
}

protected final void initIAA49FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FU = false;
} else {
IAA49FU = true;
}
}
}

protected final void initIAA49ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49ME = false;
} else {
IAA49ME = true;
}
}
}

protected final void initIAA49ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49ML = false;
} else {
IAA49ML = true;
}
}
}

protected final void initIAA49MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49MR = false;
} else {
IAA49MR = true;
}
}
}

protected final void initIAA49MU(String s) {
if (!s.trim().isEmpty()) {
IAA49MU = Short.parseShort(s);
} else {
IAA49MU = Short.MIN_VALUE;
}
}

protected final void initIAA49OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49OE = false;
} else {
IAA49OE = true;
}
}
}

protected final void initIAA49OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49OL = false;
} else {
IAA49OL = true;
}
}
}

protected final void initIAA49OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49OR = false;
} else {
IAA49OR = true;
}
}
}

protected final void initIAA49OU(String s) {
if (!s.trim().isEmpty()) {
IAA49OU = Short.parseShort(s);
} else {
IAA49OU = Short.MIN_VALUE;
}
}

protected final void initIAA49WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WE = false;
} else {
IAA49WE = true;
}
}
}

protected final void initIAA49WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WL = false;
} else {
IAA49WL = true;
}
}
}

protected final void initIAA49WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WR = false;
} else {
IAA49WR = true;
}
}
}

protected final void initIAA49WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WU = false;
} else {
IAA49WU = true;
}
}
}

protected final void initIAA49YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YE = false;
} else {
IAA49YE = true;
}
}
}

protected final void initIAA49YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YL = false;
} else {
IAA49YL = true;
}
}
}

protected final void initIAA49YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YR = false;
} else {
IAA49YR = true;
}
}
}

protected final void initIAA49YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YU = false;
} else {
IAA49YU = true;
}
}
}

protected final void initIAA50(String s) {
if (!s.trim().isEmpty()) {
IAA50 = Short.parseShort(s);
} else {
IAA50 = Short.MIN_VALUE;
}
}

protected final void initIAA50FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FE = false;
} else {
IAA50FE = true;
}
}
}

protected final void initIAA50FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA50FL = false;
} else {
IAA50FL = true;
}
}
}

protected final void initIAA50FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FR = false;
} else {
IAA50FR = true;
}
}
}

protected final void initIAA50FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FU = false;
} else {
IAA50FU = true;
}
}
}

protected final void initIAA50ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50ME = false;
} else {
IAA50ME = true;
}
}
}

protected final void initIAA50ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50ML = false;
} else {
IAA50ML = true;
}
}
}

protected final void initIAA50MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50MR = false;
} else {
IAA50MR = true;
}
}
}

protected final void initIAA50MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50MU = false;
} else {
IAA50MU = true;
}
}
}

protected final void initIAA50OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50OE = false;
} else {
IAA50OE = true;
}
}
}

protected final void initIAA50OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
IAA50OL = false;
} else {
IAA50OL = true;
}
}
}

protected final void initIAA50OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50OR = false;
} else {
IAA50OR = true;
}
}
}

protected final void initIAA50OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
IAA50OU = false;
} else {
IAA50OU = true;
}
}
}

protected final void initIAA50WE(String s) {
if (!s.trim().isEmpty()) {
IAA50WE = Byte.parseByte(s);
} else {
IAA50WE = Byte.MIN_VALUE;
}
}

protected final void initIAA50WL(String s) {
if (!s.trim().isEmpty()) {
IAA50WL = Byte.parseByte(s);
} else {
IAA50WL = Byte.MIN_VALUE;
}
}

protected final void initIAA50WR(String s) {
if (!s.trim().isEmpty()) {
IAA50WR = Byte.parseByte(s);
} else {
IAA50WR = Byte.MIN_VALUE;
}
}

protected final void initIAA50WU(String s) {
if (!s.trim().isEmpty()) {
IAA50WU = Byte.parseByte(s);
} else {
IAA50WU = Byte.MIN_VALUE;
}
}

protected final void initIAA50YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YE = false;
} else {
IAA50YE = true;
}
}
}

protected final void initIAA50YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YL = false;
} else {
IAA50YL = true;
}
}
}

protected final void initIAA50YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YR = false;
} else {
IAA50YR = true;
}
}
}

protected final void initIAA50YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YU = false;
} else {
IAA50YU = true;
}
}
}

protected final void initIAA51(String s) {
if (!s.trim().isEmpty()) {
IAA51 = Short.parseShort(s);
} else {
IAA51 = Short.MIN_VALUE;
}
}

protected final void initIAA51FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FE = false;
} else {
IAA51FE = true;
}
}
}

protected final void initIAA51FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FL = false;
} else {
IAA51FL = true;
}
}
}

protected final void initIAA51FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FR = false;
} else {
IAA51FR = true;
}
}
}

protected final void initIAA51FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FU = false;
} else {
IAA51FU = true;
}
}
}

protected final void initIAA51ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51ME = false;
} else {
IAA51ME = true;
}
}
}

protected final void initIAA51ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51ML = false;
} else {
IAA51ML = true;
}
}
}

protected final void initIAA51MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51MR = false;
} else {
IAA51MR = true;
}
}
}

protected final void initIAA51MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51MU = false;
} else {
IAA51MU = true;
}
}
}

protected final void initIAA51OE(String s) {
if (!s.trim().isEmpty()) {
IAA51OE = Byte.parseByte(s);
} else {
IAA51OE = Byte.MIN_VALUE;
}
}

protected final void initIAA51OL(String s) {
if (!s.trim().isEmpty()) {
IAA51OL = Short.parseShort(s);
} else {
IAA51OL = Short.MIN_VALUE;
}
}

protected final void initIAA51OR(String s) {
if (!s.trim().isEmpty()) {
IAA51OR = Byte.parseByte(s);
} else {
IAA51OR = Byte.MIN_VALUE;
}
}

protected final void initIAA51OU(String s) {
if (!s.trim().isEmpty()) {
IAA51OU = Short.parseShort(s);
} else {
IAA51OU = Short.MIN_VALUE;
}
}

protected final void initIAA51WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WE = false;
} else {
IAA51WE = true;
}
}
}

protected final void initIAA51WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WL = false;
} else {
IAA51WL = true;
}
}
}

protected final void initIAA51WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WR = false;
} else {
IAA51WR = true;
}
}
}

protected final void initIAA51WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WU = false;
} else {
IAA51WU = true;
}
}
}

protected final void initIAA51YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51YE = false;
} else {
IAA51YE = true;
}
}
}

protected final void initIAA51YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51YL = false;
} else {
IAA51YL = true;
}
}
}

protected final void initIAA51YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51YR = false;
} else {
IAA51YR = true;
}
}
}

protected final void initIAA51YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51YU = false;
} else {
IAA51YU = true;
}
}
}

protected final void initIAA52(String s) {
if (!s.trim().isEmpty()) {
IAA52 = Short.parseShort(s);
} else {
IAA52 = Short.MIN_VALUE;
}
}

protected final void initIAA52FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FE = false;
} else {
IAA52FE = true;
}
}
}

protected final void initIAA52FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FL = false;
} else {
IAA52FL = true;
}
}
}

protected final void initIAA52FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FR = false;
} else {
IAA52FR = true;
}
}
}

protected final void initIAA52FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FU = false;
} else {
IAA52FU = true;
}
}
}

protected final void initIAA52ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52ME = false;
} else {
IAA52ME = true;
}
}
}

protected final void initIAA52ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52ML = false;
} else {
IAA52ML = true;
}
}
}

protected final void initIAA52MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52MR = false;
} else {
IAA52MR = true;
}
}
}

protected final void initIAA52MU(String s) {
if (!s.trim().isEmpty()) {
IAA52MU = Short.parseShort(s);
} else {
IAA52MU = Short.MIN_VALUE;
}
}

protected final void initIAA52OE(String s) {
if (!s.trim().isEmpty()) {
IAA52OE = Byte.parseByte(s);
} else {
IAA52OE = Byte.MIN_VALUE;
}
}

protected final void initIAA52OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52OL = false;
} else {
IAA52OL = true;
}
}
}

protected final void initIAA52OR(String s) {
if (!s.trim().isEmpty()) {
IAA52OR = Byte.parseByte(s);
} else {
IAA52OR = Byte.MIN_VALUE;
}
}

protected final void initIAA52OU(String s) {
if (!s.trim().isEmpty()) {
IAA52OU = Short.parseShort(s);
} else {
IAA52OU = Short.MIN_VALUE;
}
}

protected final void initIAA52WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WE = false;
} else {
IAA52WE = true;
}
}
}

protected final void initIAA52WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WL = false;
} else {
IAA52WL = true;
}
}
}

protected final void initIAA52WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WR = false;
} else {
IAA52WR = true;
}
}
}

protected final void initIAA52WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WU = false;
} else {
IAA52WU = true;
}
}
}

protected final void initIAA52YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YE = false;
} else {
IAA52YE = true;
}
}
}

protected final void initIAA52YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YL = false;
} else {
IAA52YL = true;
}
}
}

protected final void initIAA52YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YR = false;
} else {
IAA52YR = true;
}
}
}

protected final void initIAA52YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YU = false;
} else {
IAA52YU = true;
}
}
}

protected final void initIAA53(String s) {
if (!s.trim().isEmpty()) {
IAA53 = Short.parseShort(s);
} else {
IAA53 = Short.MIN_VALUE;
}
}

protected final void initIAA53FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FE = false;
} else {
IAA53FE = true;
}
}
}

protected final void initIAA53FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FL = false;
} else {
IAA53FL = true;
}
}
}

protected final void initIAA53FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FR = false;
} else {
IAA53FR = true;
}
}
}

protected final void initIAA53FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FU = false;
} else {
IAA53FU = true;
}
}
}

protected final void initIAA53ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53ME = false;
} else {
IAA53ME = true;
}
}
}

protected final void initIAA53ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53ML = false;
} else {
IAA53ML = true;
}
}
}

protected final void initIAA53MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53MR = false;
} else {
IAA53MR = true;
}
}
}

protected final void initIAA53MU(String s) {
if (!s.trim().isEmpty()) {
IAA53MU = Short.parseShort(s);
} else {
IAA53MU = Short.MIN_VALUE;
}
}

protected final void initIAA53OE(String s) {
if (!s.trim().isEmpty()) {
IAA53OE = Byte.parseByte(s);
} else {
IAA53OE = Byte.MIN_VALUE;
}
}

protected final void initIAA53OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA53OL = false;
} else {
IAA53OL = true;
}
}
}

protected final void initIAA53OR(String s) {
if (!s.trim().isEmpty()) {
IAA53OR = Byte.parseByte(s);
} else {
IAA53OR = Byte.MIN_VALUE;
}
}

protected final void initIAA53OU(String s) {
if (!s.trim().isEmpty()) {
IAA53OU = Short.parseShort(s);
} else {
IAA53OU = Short.MIN_VALUE;
}
}

protected final void initIAA53WE(String s) {
if (!s.trim().isEmpty()) {
IAA53WE = Byte.parseByte(s);
} else {
IAA53WE = Byte.MIN_VALUE;
}
}

protected final void initIAA53WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA53WL = false;
} else {
IAA53WL = true;
}
}
}

protected final void initIAA53WR(String s) {
if (!s.trim().isEmpty()) {
IAA53WR = Byte.parseByte(s);
} else {
IAA53WR = Byte.MIN_VALUE;
}
}

protected final void initIAA53WU(String s) {
if (!s.trim().isEmpty()) {
IAA53WU = Byte.parseByte(s);
} else {
IAA53WU = Byte.MIN_VALUE;
}
}

protected final void initIAA53YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YE = false;
} else {
IAA53YE = true;
}
}
}

protected final void initIAA53YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YL = false;
} else {
IAA53YL = true;
}
}
}

protected final void initIAA53YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YR = false;
} else {
IAA53YR = true;
}
}
}

protected final void initIAA53YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YU = false;
} else {
IAA53YU = true;
}
}
}

protected final void initIAA54(String s) {
if (!s.trim().isEmpty()) {
IAA54 = Short.parseShort(s);
} else {
IAA54 = Short.MIN_VALUE;
}
}

protected final void initIAA54FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FE = false;
} else {
IAA54FE = true;
}
}
}

protected final void initIAA54FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FL = false;
} else {
IAA54FL = true;
}
}
}

protected final void initIAA54FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FR = false;
} else {
IAA54FR = true;
}
}
}

protected final void initIAA54FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FU = false;
} else {
IAA54FU = true;
}
}
}

protected final void initIAA54ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54ME = false;
} else {
IAA54ME = true;
}
}
}

protected final void initIAA54ML(String s) {
if (!s.trim().isEmpty()) {
IAA54ML = Short.parseShort(s);
} else {
IAA54ML = Short.MIN_VALUE;
}
}

protected final void initIAA54MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54MR = false;
} else {
IAA54MR = true;
}
}
}

protected final void initIAA54MU(String s) {
if (!s.trim().isEmpty()) {
IAA54MU = Short.parseShort(s);
} else {
IAA54MU = Short.MIN_VALUE;
}
}

protected final void initIAA54OE(String s) {
if (!s.trim().isEmpty()) {
IAA54OE = Byte.parseByte(s);
} else {
IAA54OE = Byte.MIN_VALUE;
}
}

protected final void initIAA54OL(String s) {
if (!s.trim().isEmpty()) {
IAA54OL = Short.parseShort(s);
} else {
IAA54OL = Short.MIN_VALUE;
}
}

protected final void initIAA54OR(String s) {
if (!s.trim().isEmpty()) {
IAA54OR = Byte.parseByte(s);
} else {
IAA54OR = Byte.MIN_VALUE;
}
}

protected final void initIAA54OU(String s) {
if (!s.trim().isEmpty()) {
IAA54OU = Short.parseShort(s);
} else {
IAA54OU = Short.MIN_VALUE;
}
}

protected final void initIAA54WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WE = false;
} else {
IAA54WE = true;
}
}
}

protected final void initIAA54WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA54WL = false;
} else {
IAA54WL = true;
}
}
}

protected final void initIAA54WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WR = false;
} else {
IAA54WR = true;
}
}
}

protected final void initIAA54WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WU = false;
} else {
IAA54WU = true;
}
}
}

protected final void initIAA54YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54YE = false;
} else {
IAA54YE = true;
}
}
}

protected final void initIAA54YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA54YL = false;
} else {
IAA54YL = true;
}
}
}

protected final void initIAA54YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54YR = false;
} else {
IAA54YR = true;
}
}
}

protected final void initIAA54YU(String s) {
if (!s.trim().isEmpty()) {
IAA54YU = Short.parseShort(s);
} else {
IAA54YU = Short.MIN_VALUE;
}
}

protected final void initIAA55(String s) {
if (!s.trim().isEmpty()) {
IAA55 = Short.parseShort(s);
} else {
IAA55 = Short.MIN_VALUE;
}
}

protected final void initIAA55FE(String s) {
if (!s.trim().isEmpty()) {
IAA55FE = Byte.parseByte(s);
} else {
IAA55FE = Byte.MIN_VALUE;
}
}

protected final void initIAA55FL(String s) {
if (!s.trim().isEmpty()) {
IAA55FL = Byte.parseByte(s);
} else {
IAA55FL = Byte.MIN_VALUE;
}
}

protected final void initIAA55FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55FR = false;
} else {
IAA55FR = true;
}
}
}

protected final void initIAA55FU(String s) {
if (!s.trim().isEmpty()) {
IAA55FU = Byte.parseByte(s);
} else {
IAA55FU = Byte.MIN_VALUE;
}
}

protected final void initIAA55ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55ME = false;
} else {
IAA55ME = true;
}
}
}

protected final void initIAA55ML(String s) {
if (!s.trim().isEmpty()) {
IAA55ML = Short.parseShort(s);
} else {
IAA55ML = Short.MIN_VALUE;
}
}

protected final void initIAA55MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55MR = false;
} else {
IAA55MR = true;
}
}
}

protected final void initIAA55MU(String s) {
if (!s.trim().isEmpty()) {
IAA55MU = Short.parseShort(s);
} else {
IAA55MU = Short.MIN_VALUE;
}
}

protected final void initIAA55OE(String s) {
if (!s.trim().isEmpty()) {
IAA55OE = Byte.parseByte(s);
} else {
IAA55OE = Byte.MIN_VALUE;
}
}

protected final void initIAA55OL(String s) {
if (!s.trim().isEmpty()) {
IAA55OL = Short.parseShort(s);
} else {
IAA55OL = Short.MIN_VALUE;
}
}

protected final void initIAA55OR(String s) {
if (!s.trim().isEmpty()) {
IAA55OR = Byte.parseByte(s);
} else {
IAA55OR = Byte.MIN_VALUE;
}
}

protected final void initIAA55OU(String s) {
if (!s.trim().isEmpty()) {
IAA55OU = Short.parseShort(s);
} else {
IAA55OU = Short.MIN_VALUE;
}
}

protected final void initIAA55WE(String s) {
if (!s.trim().isEmpty()) {
IAA55WE = Byte.parseByte(s);
} else {
IAA55WE = Byte.MIN_VALUE;
}
}

protected final void initIAA55WL(String s) {
if (!s.trim().isEmpty()) {
IAA55WL = Short.parseShort(s);
} else {
IAA55WL = Short.MIN_VALUE;
}
}

protected final void initIAA55WR(String s) {
if (!s.trim().isEmpty()) {
IAA55WR = Byte.parseByte(s);
} else {
IAA55WR = Byte.MIN_VALUE;
}
}

protected final void initIAA55WU(String s) {
if (!s.trim().isEmpty()) {
IAA55WU = Short.parseShort(s);
} else {
IAA55WU = Short.MIN_VALUE;
}
}

protected final void initIAA55YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YE = false;
} else {
IAA55YE = true;
}
}
}

protected final void initIAA55YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YL = false;
} else {
IAA55YL = true;
}
}
}

protected final void initIAA55YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YR = false;
} else {
IAA55YR = true;
}
}
}

protected final void initIAA55YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YU = false;
} else {
IAA55YU = true;
}
}
}

protected final void initIAA56(String s) {
if (!s.trim().isEmpty()) {
IAA56 = Short.parseShort(s);
} else {
IAA56 = Short.MIN_VALUE;
}
}

protected final void initIAA56FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FE = false;
} else {
IAA56FE = true;
}
}
}

protected final void initIAA56FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FL = false;
} else {
IAA56FL = true;
}
}
}

protected final void initIAA56FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FR = false;
} else {
IAA56FR = true;
}
}
}

protected final void initIAA56FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FU = false;
} else {
IAA56FU = true;
}
}
}

protected final void initIAA56ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56ME = false;
} else {
IAA56ME = true;
}
}
}

protected final void initIAA56ML(String s) {
if (!s.trim().isEmpty()) {
IAA56ML = Short.parseShort(s);
} else {
IAA56ML = Short.MIN_VALUE;
}
}

protected final void initIAA56MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56MR = false;
} else {
IAA56MR = true;
}
}
}

protected final void initIAA56MU(String s) {
if (!s.trim().isEmpty()) {
IAA56MU = Short.parseShort(s);
} else {
IAA56MU = Short.MIN_VALUE;
}
}

protected final void initIAA56OE(String s) {
if (!s.trim().isEmpty()) {
IAA56OE = Byte.parseByte(s);
} else {
IAA56OE = Byte.MIN_VALUE;
}
}

protected final void initIAA56OL(String s) {
if (!s.trim().isEmpty()) {
IAA56OL = Byte.parseByte(s);
} else {
IAA56OL = Byte.MIN_VALUE;
}
}

protected final void initIAA56OR(String s) {
if (!s.trim().isEmpty()) {
IAA56OR = Byte.parseByte(s);
} else {
IAA56OR = Byte.MIN_VALUE;
}
}

protected final void initIAA56OU(String s) {
if (!s.trim().isEmpty()) {
IAA56OU = Short.parseShort(s);
} else {
IAA56OU = Short.MIN_VALUE;
}
}

protected final void initIAA56WE(String s) {
if (!s.trim().isEmpty()) {
IAA56WE = Byte.parseByte(s);
} else {
IAA56WE = Byte.MIN_VALUE;
}
}

protected final void initIAA56WL(String s) {
if (!s.trim().isEmpty()) {
IAA56WL = Byte.parseByte(s);
} else {
IAA56WL = Byte.MIN_VALUE;
}
}

protected final void initIAA56WR(String s) {
if (!s.trim().isEmpty()) {
IAA56WR = Byte.parseByte(s);
} else {
IAA56WR = Byte.MIN_VALUE;
}
}

protected final void initIAA56WU(String s) {
if (!s.trim().isEmpty()) {
IAA56WU = Byte.parseByte(s);
} else {
IAA56WU = Byte.MIN_VALUE;
}
}

protected final void initIAA56YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YE = false;
} else {
IAA56YE = true;
}
}
}

protected final void initIAA56YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YL = false;
} else {
IAA56YL = true;
}
}
}

protected final void initIAA56YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YR = false;
} else {
IAA56YR = true;
}
}
}

protected final void initIAA56YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YU = false;
} else {
IAA56YU = true;
}
}
}

protected final void initIAA57(String s) {
if (!s.trim().isEmpty()) {
IAA57 = Short.parseShort(s);
} else {
IAA57 = Short.MIN_VALUE;
}
}

protected final void initIAA57FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FE = false;
} else {
IAA57FE = true;
}
}
}

protected final void initIAA57FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FL = false;
} else {
IAA57FL = true;
}
}
}

protected final void initIAA57FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FR = false;
} else {
IAA57FR = true;
}
}
}

protected final void initIAA57FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FU = false;
} else {
IAA57FU = true;
}
}
}

protected final void initIAA57ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57ME = false;
} else {
IAA57ME = true;
}
}
}

protected final void initIAA57ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57ML = false;
} else {
IAA57ML = true;
}
}
}

protected final void initIAA57MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57MR = false;
} else {
IAA57MR = true;
}
}
}

protected final void initIAA57MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57MU = false;
} else {
IAA57MU = true;
}
}
}

protected final void initIAA57OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57OE = false;
} else {
IAA57OE = true;
}
}
}

protected final void initIAA57OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57OL = false;
} else {
IAA57OL = true;
}
}
}

protected final void initIAA57OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57OR = false;
} else {
IAA57OR = true;
}
}
}

protected final void initIAA57OU(String s) {
if (!s.trim().isEmpty()) {
IAA57OU = Short.parseShort(s);
} else {
IAA57OU = Short.MIN_VALUE;
}
}

protected final void initIAA57WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WE = false;
} else {
IAA57WE = true;
}
}
}

protected final void initIAA57WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WL = false;
} else {
IAA57WL = true;
}
}
}

protected final void initIAA57WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WR = false;
} else {
IAA57WR = true;
}
}
}

protected final void initIAA57WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WU = false;
} else {
IAA57WU = true;
}
}
}

protected final void initIAA57YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YE = false;
} else {
IAA57YE = true;
}
}
}

protected final void initIAA57YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YL = false;
} else {
IAA57YL = true;
}
}
}

protected final void initIAA57YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YR = false;
} else {
IAA57YR = true;
}
}
}

protected final void initIAA57YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YU = false;
} else {
IAA57YU = true;
}
}
}

protected final void initIAA58(String s) {
if (!s.trim().isEmpty()) {
IAA58 = Short.parseShort(s);
} else {
IAA58 = Short.MIN_VALUE;
}
}

protected final void initIAA58FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FE = false;
} else {
IAA58FE = true;
}
}
}

protected final void initIAA58FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FL = false;
} else {
IAA58FL = true;
}
}
}

protected final void initIAA58FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FR = false;
} else {
IAA58FR = true;
}
}
}

protected final void initIAA58FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FU = false;
} else {
IAA58FU = true;
}
}
}

protected final void initIAA58ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58ME = false;
} else {
IAA58ME = true;
}
}
}

protected final void initIAA58ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58ML = false;
} else {
IAA58ML = true;
}
}
}

protected final void initIAA58MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58MR = false;
} else {
IAA58MR = true;
}
}
}

protected final void initIAA58MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58MU = false;
} else {
IAA58MU = true;
}
}
}

protected final void initIAA58OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OE = false;
} else {
IAA58OE = true;
}
}
}

protected final void initIAA58OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OL = false;
} else {
IAA58OL = true;
}
}
}

protected final void initIAA58OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OR = false;
} else {
IAA58OR = true;
}
}
}

protected final void initIAA58OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OU = false;
} else {
IAA58OU = true;
}
}
}

protected final void initIAA58WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WE = false;
} else {
IAA58WE = true;
}
}
}

protected final void initIAA58WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WL = false;
} else {
IAA58WL = true;
}
}
}

protected final void initIAA58WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WR = false;
} else {
IAA58WR = true;
}
}
}

protected final void initIAA58WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WU = false;
} else {
IAA58WU = true;
}
}
}

protected final void initIAA58YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YE = false;
} else {
IAA58YE = true;
}
}
}

protected final void initIAA58YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YL = false;
} else {
IAA58YL = true;
}
}
}

protected final void initIAA58YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YR = false;
} else {
IAA58YR = true;
}
}
}

protected final void initIAA58YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YU = false;
} else {
IAA58YU = true;
}
}
}

protected final void initIAA59(String s) {
if (!s.trim().isEmpty()) {
IAA59 = Short.parseShort(s);
} else {
IAA59 = Short.MIN_VALUE;
}
}

protected final void initIAA59FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FE = false;
} else {
IAA59FE = true;
}
}
}

protected final void initIAA59FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FL = false;
} else {
IAA59FL = true;
}
}
}

protected final void initIAA59FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FR = false;
} else {
IAA59FR = true;
}
}
}

protected final void initIAA59FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FU = false;
} else {
IAA59FU = true;
}
}
}

protected final void initIAA59ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59ME = false;
} else {
IAA59ME = true;
}
}
}

protected final void initIAA59ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59ML = false;
} else {
IAA59ML = true;
}
}
}

protected final void initIAA59MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59MR = false;
} else {
IAA59MR = true;
}
}
}

protected final void initIAA59MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59MU = false;
} else {
IAA59MU = true;
}
}
}

protected final void initIAA59OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OE = false;
} else {
IAA59OE = true;
}
}
}

protected final void initIAA59OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OL = false;
} else {
IAA59OL = true;
}
}
}

protected final void initIAA59OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OR = false;
} else {
IAA59OR = true;
}
}
}

protected final void initIAA59OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OU = false;
} else {
IAA59OU = true;
}
}
}

protected final void initIAA59WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WE = false;
} else {
IAA59WE = true;
}
}
}

protected final void initIAA59WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WL = false;
} else {
IAA59WL = true;
}
}
}

protected final void initIAA59WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WR = false;
} else {
IAA59WR = true;
}
}
}

protected final void initIAA59WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WU = false;
} else {
IAA59WU = true;
}
}
}

protected final void initIAA59YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YE = false;
} else {
IAA59YE = true;
}
}
}

protected final void initIAA59YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YL = false;
} else {
IAA59YL = true;
}
}
}

protected final void initIAA59YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YR = false;
} else {
IAA59YR = true;
}
}
}

protected final void initIAA59YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YU = false;
} else {
IAA59YU = true;
}
}
}

protected final void initIAA60(String s) {
if (!s.trim().isEmpty()) {
IAA60 = Short.parseShort(s);
} else {
IAA60 = Short.MIN_VALUE;
}
}

protected final void initIAA60FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FE = false;
} else {
IAA60FE = true;
}
}
}

protected final void initIAA60FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FL = false;
} else {
IAA60FL = true;
}
}
}

protected final void initIAA60FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FR = false;
} else {
IAA60FR = true;
}
}
}

protected final void initIAA60FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FU = false;
} else {
IAA60FU = true;
}
}
}

protected final void initIAA60ME(String s) {
if (!s.trim().isEmpty()) {
IAA60ME = Byte.parseByte(s);
} else {
IAA60ME = Byte.MIN_VALUE;
}
}

protected final void initIAA60ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA60ML = false;
} else {
IAA60ML = true;
}
}
}

protected final void initIAA60MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60MR = false;
} else {
IAA60MR = true;
}
}
}

protected final void initIAA60MU(String s) {
if (!s.trim().isEmpty()) {
IAA60MU = Short.parseShort(s);
} else {
IAA60MU = Short.MIN_VALUE;
}
}

protected final void initIAA60OE(String s) {
if (!s.trim().isEmpty()) {
IAA60OE = Byte.parseByte(s);
} else {
IAA60OE = Byte.MIN_VALUE;
}
}

protected final void initIAA60OL(String s) {
if (!s.trim().isEmpty()) {
IAA60OL = Short.parseShort(s);
} else {
IAA60OL = Short.MIN_VALUE;
}
}

protected final void initIAA60OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60OR = false;
} else {
IAA60OR = true;
}
}
}

protected final void initIAA60OU(String s) {
if (!s.trim().isEmpty()) {
IAA60OU = Short.parseShort(s);
} else {
IAA60OU = Short.MIN_VALUE;
}
}

protected final void initIAA60WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WE = false;
} else {
IAA60WE = true;
}
}
}

protected final void initIAA60WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WL = false;
} else {
IAA60WL = true;
}
}
}

protected final void initIAA60WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WR = false;
} else {
IAA60WR = true;
}
}
}

protected final void initIAA60WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WU = false;
} else {
IAA60WU = true;
}
}
}

protected final void initIAA60YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YE = false;
} else {
IAA60YE = true;
}
}
}

protected final void initIAA60YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YL = false;
} else {
IAA60YL = true;
}
}
}

protected final void initIAA60YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YR = false;
} else {
IAA60YR = true;
}
}
}

protected final void initIAA60YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YU = false;
} else {
IAA60YU = true;
}
}
}

protected final void initIAA61(String s) {
if (!s.trim().isEmpty()) {
IAA61 = Short.parseShort(s);
} else {
IAA61 = Short.MIN_VALUE;
}
}

protected final void initIAA61FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FE = false;
} else {
IAA61FE = true;
}
}
}

protected final void initIAA61FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FL = false;
} else {
IAA61FL = true;
}
}
}

protected final void initIAA61FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FR = false;
} else {
IAA61FR = true;
}
}
}

protected final void initIAA61FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FU = false;
} else {
IAA61FU = true;
}
}
}

protected final void initIAA61ME(String s) {
if (!s.trim().isEmpty()) {
IAA61ME = Byte.parseByte(s);
} else {
IAA61ME = Byte.MIN_VALUE;
}
}

protected final void initIAA61ML(String s) {
if (!s.trim().isEmpty()) {
IAA61ML = Short.parseShort(s);
} else {
IAA61ML = Short.MIN_VALUE;
}
}

protected final void initIAA61MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61MR = false;
} else {
IAA61MR = true;
}
}
}

protected final void initIAA61MU(String s) {
if (!s.trim().isEmpty()) {
IAA61MU = Short.parseShort(s);
} else {
IAA61MU = Short.MIN_VALUE;
}
}

protected final void initIAA61OE(String s) {
if (!s.trim().isEmpty()) {
IAA61OE = Byte.parseByte(s);
} else {
IAA61OE = Byte.MIN_VALUE;
}
}

protected final void initIAA61OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61OL = false;
} else {
IAA61OL = true;
}
}
}

protected final void initIAA61OR(String s) {
if (!s.trim().isEmpty()) {
IAA61OR = Byte.parseByte(s);
} else {
IAA61OR = Byte.MIN_VALUE;
}
}

protected final void initIAA61OU(String s) {
if (!s.trim().isEmpty()) {
IAA61OU = Short.parseShort(s);
} else {
IAA61OU = Short.MIN_VALUE;
}
}

protected final void initIAA61WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WE = false;
} else {
IAA61WE = true;
}
}
}

protected final void initIAA61WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WL = false;
} else {
IAA61WL = true;
}
}
}

protected final void initIAA61WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WR = false;
} else {
IAA61WR = true;
}
}
}

protected final void initIAA61WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WU = false;
} else {
IAA61WU = true;
}
}
}

protected final void initIAA61YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YE = false;
} else {
IAA61YE = true;
}
}
}

protected final void initIAA61YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YL = false;
} else {
IAA61YL = true;
}
}
}

protected final void initIAA61YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YR = false;
} else {
IAA61YR = true;
}
}
}

protected final void initIAA61YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YU = false;
} else {
IAA61YU = true;
}
}
}

protected final void initIAA62(String s) {
if (!s.trim().isEmpty()) {
IAA62 = Short.parseShort(s);
} else {
IAA62 = Short.MIN_VALUE;
}
}

protected final void initIAA62FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FE = false;
} else {
IAA62FE = true;
}
}
}

protected final void initIAA62FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FL = false;
} else {
IAA62FL = true;
}
}
}

protected final void initIAA62FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FR = false;
} else {
IAA62FR = true;
}
}
}

protected final void initIAA62FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FU = false;
} else {
IAA62FU = true;
}
}
}

protected final void initIAA62ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62ME = false;
} else {
IAA62ME = true;
}
}
}

protected final void initIAA62ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62ML = false;
} else {
IAA62ML = true;
}
}
}

protected final void initIAA62MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62MR = false;
} else {
IAA62MR = true;
}
}
}

protected final void initIAA62MU(String s) {
if (!s.trim().isEmpty()) {
IAA62MU = Short.parseShort(s);
} else {
IAA62MU = Short.MIN_VALUE;
}
}

protected final void initIAA62OE(String s) {
if (!s.trim().isEmpty()) {
IAA62OE = Byte.parseByte(s);
} else {
IAA62OE = Byte.MIN_VALUE;
}
}

protected final void initIAA62OL(String s) {
if (!s.trim().isEmpty()) {
IAA62OL = Short.parseShort(s);
} else {
IAA62OL = Short.MIN_VALUE;
}
}

protected final void initIAA62OR(String s) {
if (!s.trim().isEmpty()) {
IAA62OR = Byte.parseByte(s);
} else {
IAA62OR = Byte.MIN_VALUE;
}
}

protected final void initIAA62OU(String s) {
if (!s.trim().isEmpty()) {
IAA62OU = Short.parseShort(s);
} else {
IAA62OU = Short.MIN_VALUE;
}
}

protected final void initIAA62WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WE = false;
} else {
IAA62WE = true;
}
}
}

protected final void initIAA62WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WL = false;
} else {
IAA62WL = true;
}
}
}

protected final void initIAA62WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WR = false;
} else {
IAA62WR = true;
}
}
}

protected final void initIAA62WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WU = false;
} else {
IAA62WU = true;
}
}
}

protected final void initIAA62YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YE = false;
} else {
IAA62YE = true;
}
}
}

protected final void initIAA62YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YL = false;
} else {
IAA62YL = true;
}
}
}

protected final void initIAA62YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YR = false;
} else {
IAA62YR = true;
}
}
}

protected final void initIAA62YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YU = false;
} else {
IAA62YU = true;
}
}
}

protected final void initIAA63(String s) {
if (!s.trim().isEmpty()) {
IAA63 = Short.parseShort(s);
} else {
IAA63 = Short.MIN_VALUE;
}
}

protected final void initIAA63FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FE = false;
} else {
IAA63FE = true;
}
}
}

protected final void initIAA63FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FL = false;
} else {
IAA63FL = true;
}
}
}

protected final void initIAA63FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FR = false;
} else {
IAA63FR = true;
}
}
}

protected final void initIAA63FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FU = false;
} else {
IAA63FU = true;
}
}
}

protected final void initIAA63ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63ME = false;
} else {
IAA63ME = true;
}
}
}

protected final void initIAA63ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63ML = false;
} else {
IAA63ML = true;
}
}
}

protected final void initIAA63MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63MR = false;
} else {
IAA63MR = true;
}
}
}

protected final void initIAA63MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63MU = false;
} else {
IAA63MU = true;
}
}
}

protected final void initIAA63OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OE = false;
} else {
IAA63OE = true;
}
}
}

protected final void initIAA63OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OL = false;
} else {
IAA63OL = true;
}
}
}

protected final void initIAA63OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OR = false;
} else {
IAA63OR = true;
}
}
}

protected final void initIAA63OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OU = false;
} else {
IAA63OU = true;
}
}
}

protected final void initIAA63WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WE = false;
} else {
IAA63WE = true;
}
}
}

protected final void initIAA63WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WL = false;
} else {
IAA63WL = true;
}
}
}

protected final void initIAA63WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WR = false;
} else {
IAA63WR = true;
}
}
}

protected final void initIAA63WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WU = false;
} else {
IAA63WU = true;
}
}
}

protected final void initIAA63YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YE = false;
} else {
IAA63YE = true;
}
}
}

protected final void initIAA63YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YL = false;
} else {
IAA63YL = true;
}
}
}

protected final void initIAA63YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YR = false;
} else {
IAA63YR = true;
}
}
}

protected final void initIAA63YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YU = false;
} else {
IAA63YU = true;
}
}
}

protected final void initIAA64(String s) {
if (!s.trim().isEmpty()) {
IAA64 = Short.parseShort(s);
} else {
IAA64 = Short.MIN_VALUE;
}
}

protected final void initIAA64FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FE = false;
} else {
IAA64FE = true;
}
}
}

protected final void initIAA64FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FL = false;
} else {
IAA64FL = true;
}
}
}

protected final void initIAA64FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FR = false;
} else {
IAA64FR = true;
}
}
}

protected final void initIAA64FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FU = false;
} else {
IAA64FU = true;
}
}
}

protected final void initIAA64ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64ME = false;
} else {
IAA64ME = true;
}
}
}

protected final void initIAA64ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64ML = false;
} else {
IAA64ML = true;
}
}
}

protected final void initIAA64MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64MR = false;
} else {
IAA64MR = true;
}
}
}

protected final void initIAA64MU(String s) {
if (!s.trim().isEmpty()) {
IAA64MU = Short.parseShort(s);
} else {
IAA64MU = Short.MIN_VALUE;
}
}

protected final void initIAA64OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64OE = false;
} else {
IAA64OE = true;
}
}
}

protected final void initIAA64OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64OL = false;
} else {
IAA64OL = true;
}
}
}

protected final void initIAA64OR(String s) {
if (!s.trim().isEmpty()) {
IAA64OR = Byte.parseByte(s);
} else {
IAA64OR = Byte.MIN_VALUE;
}
}

protected final void initIAA64OU(String s) {
if (!s.trim().isEmpty()) {
IAA64OU = Short.parseShort(s);
} else {
IAA64OU = Short.MIN_VALUE;
}
}

protected final void initIAA64WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64WE = false;
} else {
IAA64WE = true;
}
}
}

protected final void initIAA64WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64WL = false;
} else {
IAA64WL = true;
}
}
}

protected final void initIAA64WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64WR = false;
} else {
IAA64WR = true;
}
}
}

protected final void initIAA64WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64WU = false;
} else {
IAA64WU = true;
}
}
}

protected final void initIAA64YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YE = false;
} else {
IAA64YE = true;
}
}
}

protected final void initIAA64YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YL = false;
} else {
IAA64YL = true;
}
}
}

protected final void initIAA64YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YR = false;
} else {
IAA64YR = true;
}
}
}

protected final void initIAA64YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YU = false;
} else {
IAA64YU = true;
}
}
}

protected final void initIAA65(String s) {
if (!s.trim().isEmpty()) {
IAA65 = Short.parseShort(s);
} else {
IAA65 = Short.MIN_VALUE;
}
}

protected final void initIAA65FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FE = false;
} else {
IAA65FE = true;
}
}
}

protected final void initIAA65FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FL = false;
} else {
IAA65FL = true;
}
}
}

protected final void initIAA65FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FR = false;
} else {
IAA65FR = true;
}
}
}

protected final void initIAA65FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FU = false;
} else {
IAA65FU = true;
}
}
}

protected final void initIAA65ME(String s) {
if (!s.trim().isEmpty()) {
IAA65ME = Byte.parseByte(s);
} else {
IAA65ME = Byte.MIN_VALUE;
}
}

protected final void initIAA65ML(String s) {
if (!s.trim().isEmpty()) {
IAA65ML = Short.parseShort(s);
} else {
IAA65ML = Short.MIN_VALUE;
}
}

protected final void initIAA65MR(String s) {
if (!s.trim().isEmpty()) {
IAA65MR = Byte.parseByte(s);
} else {
IAA65MR = Byte.MIN_VALUE;
}
}

protected final void initIAA65MU(String s) {
if (!s.trim().isEmpty()) {
IAA65MU = Short.parseShort(s);
} else {
IAA65MU = Short.MIN_VALUE;
}
}

protected final void initIAA65OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65OE = false;
} else {
IAA65OE = true;
}
}
}

protected final void initIAA65OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65OL = false;
} else {
IAA65OL = true;
}
}
}

protected final void initIAA65OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65OR = false;
} else {
IAA65OR = true;
}
}
}

protected final void initIAA65OU(String s) {
if (!s.trim().isEmpty()) {
IAA65OU = Short.parseShort(s);
} else {
IAA65OU = Short.MIN_VALUE;
}
}

protected final void initIAA65WE(String s) {
if (!s.trim().isEmpty()) {
IAA65WE = Byte.parseByte(s);
} else {
IAA65WE = Byte.MIN_VALUE;
}
}

protected final void initIAA65WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65WL = false;
} else {
IAA65WL = true;
}
}
}

protected final void initIAA65WR(String s) {
if (!s.trim().isEmpty()) {
IAA65WR = Byte.parseByte(s);
} else {
IAA65WR = Byte.MIN_VALUE;
}
}

protected final void initIAA65WU(String s) {
if (!s.trim().isEmpty()) {
IAA65WU = Byte.parseByte(s);
} else {
IAA65WU = Byte.MIN_VALUE;
}
}

protected final void initIAA65YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YE = false;
} else {
IAA65YE = true;
}
}
}

protected final void initIAA65YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YL = false;
} else {
IAA65YL = true;
}
}
}

protected final void initIAA65YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YR = false;
} else {
IAA65YR = true;
}
}
}

protected final void initIAA65YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YU = false;
} else {
IAA65YU = true;
}
}
}

protected final void initIAA66(String s) {
if (!s.trim().isEmpty()) {
IAA66 = Short.parseShort(s);
} else {
IAA66 = Short.MIN_VALUE;
}
}

protected final void initIAA66FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FE = false;
} else {
IAA66FE = true;
}
}
}

protected final void initIAA66FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FL = false;
} else {
IAA66FL = true;
}
}
}

protected final void initIAA66FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FR = false;
} else {
IAA66FR = true;
}
}
}

protected final void initIAA66FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FU = false;
} else {
IAA66FU = true;
}
}
}

protected final void initIAA66ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66ME = false;
} else {
IAA66ME = true;
}
}
}

protected final void initIAA66ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66ML = false;
} else {
IAA66ML = true;
}
}
}

protected final void initIAA66MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66MR = false;
} else {
IAA66MR = true;
}
}
}

protected final void initIAA66MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66MU = false;
} else {
IAA66MU = true;
}
}
}

protected final void initIAA66OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66OE = false;
} else {
IAA66OE = true;
}
}
}

protected final void initIAA66OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66OL = false;
} else {
IAA66OL = true;
}
}
}

protected final void initIAA66OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66OR = false;
} else {
IAA66OR = true;
}
}
}

protected final void initIAA66OU(String s) {
if (!s.trim().isEmpty()) {
IAA66OU = Short.parseShort(s);
} else {
IAA66OU = Short.MIN_VALUE;
}
}

protected final void initIAA66WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WE = false;
} else {
IAA66WE = true;
}
}
}

protected final void initIAA66WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WL = false;
} else {
IAA66WL = true;
}
}
}

protected final void initIAA66WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WR = false;
} else {
IAA66WR = true;
}
}
}

protected final void initIAA66WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WU = false;
} else {
IAA66WU = true;
}
}
}

protected final void initIAA66YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YE = false;
} else {
IAA66YE = true;
}
}
}

protected final void initIAA66YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YL = false;
} else {
IAA66YL = true;
}
}
}

protected final void initIAA66YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YR = false;
} else {
IAA66YR = true;
}
}
}

protected final void initIAA66YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YU = false;
} else {
IAA66YU = true;
}
}
}

protected final void initIAA67(String s) {
if (!s.trim().isEmpty()) {
IAA67 = Byte.parseByte(s);
} else {
IAA67 = Byte.MIN_VALUE;
}
}

protected final void initIAA67FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67FE = false;
} else {
IAA67FE = true;
}
}
}

protected final void initIAA67FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67FL = false;
} else {
IAA67FL = true;
}
}
}

protected final void initIAA67FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67FR = false;
} else {
IAA67FR = true;
}
}
}

protected final void initIAA67FU(String s) {
if (!s.trim().isEmpty()) {
IAA67FU = Short.parseShort(s);
} else {
IAA67FU = Short.MIN_VALUE;
}
}

protected final void initIAA67ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67ME = false;
} else {
IAA67ME = true;
}
}
}

protected final void initIAA67ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67ML = false;
} else {
IAA67ML = true;
}
}
}

protected final void initIAA67MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67MR = false;
} else {
IAA67MR = true;
}
}
}

protected final void initIAA67MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67MU = false;
} else {
IAA67MU = true;
}
}
}

protected final void initIAA67OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67OE = false;
} else {
IAA67OE = true;
}
}
}

protected final void initIAA67OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
IAA67OL = false;
} else {
IAA67OL = true;
}
}
}

protected final void initIAA67OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67OR = false;
} else {
IAA67OR = true;
}
}
}

protected final void initIAA67OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
IAA67OU = false;
} else {
IAA67OU = true;
}
}
}

protected final void initIAA67WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67WE = false;
} else {
IAA67WE = true;
}
}
}

protected final void initIAA67WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67WL = false;
} else {
IAA67WL = true;
}
}
}

protected final void initIAA67WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67WR = false;
} else {
IAA67WR = true;
}
}
}

protected final void initIAA67WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67WU = false;
} else {
IAA67WU = true;
}
}
}

protected final void initIAA67YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YE = false;
} else {
IAA67YE = true;
}
}
}

protected final void initIAA67YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YL = false;
} else {
IAA67YL = true;
}
}
}

protected final void initIAA67YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YR = false;
} else {
IAA67YR = true;
}
}
}

protected final void initIAA67YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YU = false;
} else {
IAA67YU = true;
}
}
}

protected final void initIAA68(String s) {
if (!s.trim().isEmpty()) {
IAA68 = Short.parseShort(s);
} else {
IAA68 = Short.MIN_VALUE;
}
}

protected final void initIAA68FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FE = false;
} else {
IAA68FE = true;
}
}
}

protected final void initIAA68FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FL = false;
} else {
IAA68FL = true;
}
}
}

protected final void initIAA68FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FR = false;
} else {
IAA68FR = true;
}
}
}

protected final void initIAA68FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FU = false;
} else {
IAA68FU = true;
}
}
}

protected final void initIAA68ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68ME = false;
} else {
IAA68ME = true;
}
}
}

protected final void initIAA68ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68ML = false;
} else {
IAA68ML = true;
}
}
}

protected final void initIAA68MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68MR = false;
} else {
IAA68MR = true;
}
}
}

protected final void initIAA68MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68MU = false;
} else {
IAA68MU = true;
}
}
}

protected final void initIAA68OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OE = false;
} else {
IAA68OE = true;
}
}
}

protected final void initIAA68OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OL = false;
} else {
IAA68OL = true;
}
}
}

protected final void initIAA68OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OR = false;
} else {
IAA68OR = true;
}
}
}

protected final void initIAA68OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OU = false;
} else {
IAA68OU = true;
}
}
}

protected final void initIAA68WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WE = false;
} else {
IAA68WE = true;
}
}
}

protected final void initIAA68WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WL = false;
} else {
IAA68WL = true;
}
}
}

protected final void initIAA68WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WR = false;
} else {
IAA68WR = true;
}
}
}

protected final void initIAA68WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WU = false;
} else {
IAA68WU = true;
}
}
}

protected final void initIAA68YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YE = false;
} else {
IAA68YE = true;
}
}
}

protected final void initIAA68YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YL = false;
} else {
IAA68YL = true;
}
}
}

protected final void initIAA68YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YR = false;
} else {
IAA68YR = true;
}
}
}

protected final void initIAA68YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YU = false;
} else {
IAA68YU = true;
}
}
}

protected final void initIAAIE(String s) {
if (!s.trim().isEmpty()) {
IAAIE = Byte.parseByte(s);
} else {
IAAIE = Byte.MIN_VALUE;
}
}

protected final void initIAAIL(String s) {
if (!s.trim().isEmpty()) {
IAAIL = Short.parseShort(s);
} else {
IAAIL = Short.MIN_VALUE;
}
}

protected final void initIAAIR(String s) {
if (!s.trim().isEmpty()) {
IAAIR = Byte.parseByte(s);
} else {
IAAIR = Byte.MIN_VALUE;
}
}

protected final void initIAAIU(String s) {
if (!s.trim().isEmpty()) {
IAAIU = Short.parseShort(s);
} else {
IAAIU = Short.MIN_VALUE;
}
}

protected final void initIAB11(String s) {
if (!s.trim().isEmpty()) {
IAB11 = Byte.parseByte(s);
} else {
IAB11 = Byte.MIN_VALUE;
}
}

protected final void initIAB12(String s) {
if (!s.trim().isEmpty()) {
IAB12 = Byte.parseByte(s);
} else {
IAB12 = Byte.MIN_VALUE;
}
}

protected final void initIAB13(String s) {
if (!s.trim().isEmpty()) {
IAB13 = Byte.parseByte(s);
} else {
IAB13 = Byte.MIN_VALUE;
}
}

protected final void initIAB14(String s) {
if (!s.trim().isEmpty()) {
IAB14 = Byte.parseByte(s);
} else {
IAB14 = Byte.MIN_VALUE;
}
}

protected final void initIAB15(String s) {
if (!s.trim().isEmpty()) {
IAB15 = Byte.parseByte(s);
} else {
IAB15 = Byte.MIN_VALUE;
}
}

protected final void initIAB16(String s) {
if (!s.trim().isEmpty()) {
IAB16 = Byte.parseByte(s);
} else {
IAB16 = Byte.MIN_VALUE;
}
}

protected final void initIAB17(String s) {
if (!s.trim().isEmpty()) {
IAB17 = Byte.parseByte(s);
} else {
IAB17 = Byte.MIN_VALUE;
}
}

protected final void initIAB18(String s) {
if (!s.trim().isEmpty()) {
IAB18 = Byte.parseByte(s);
} else {
IAB18 = Byte.MIN_VALUE;
}
}

protected final void initIAB19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAB19 = false;
} else {
IAB19 = true;
}
}
}

protected final void initIAB20(String s) {
if (!s.trim().isEmpty()) {
IAB20 = Byte.parseByte(s);
} else {
IAB20 = Byte.MIN_VALUE;
}
}

protected final void initIAB31(String s) {
if (!s.trim().isEmpty()) {
IAB31 = Byte.parseByte(s);
} else {
IAB31 = Byte.MIN_VALUE;
}
}

protected final void initIAB32(String s) {
if (!s.trim().isEmpty()) {
IAB32 = Byte.parseByte(s);
} else {
IAB32 = Byte.MIN_VALUE;
}
}

protected final void initIAB33(String s) {
if (!s.trim().isEmpty()) {
IAB33 = Byte.parseByte(s);
} else {
IAB33 = Byte.MIN_VALUE;
}
}

protected final void initIAB34(String s) {
if (!s.trim().isEmpty()) {
IAB34 = Byte.parseByte(s);
} else {
IAB34 = Byte.MIN_VALUE;
}
}

protected final void initIAB35(String s) {
if (!s.trim().isEmpty()) {
IAB35 = Byte.parseByte(s);
} else {
IAB35 = Byte.MIN_VALUE;
}
}

protected final void initIAB36(String s) {
if (!s.trim().isEmpty()) {
IAB36 = Byte.parseByte(s);
} else {
IAB36 = Byte.MIN_VALUE;
}
}

protected final void initIAB37(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAB37 = false;
} else {
IAB37 = true;
}
}
}

protected final void initIAB38(String s) {
if (!s.trim().isEmpty()) {
IAB38 = Byte.parseByte(s);
} else {
IAB38 = Byte.MIN_VALUE;
}
}

protected final void initIAB39(String s) {
if (!s.trim().isEmpty()) {
IAB39 = Byte.parseByte(s);
} else {
IAB39 = Byte.MIN_VALUE;
}
}

protected final void initIAB40(String s) {
if (!s.trim().isEmpty()) {
IAB40 = Byte.parseByte(s);
} else {
IAB40 = Byte.MIN_VALUE;
}
}

protected final void initIAB48(String s) {
if (!s.trim().isEmpty()) {
IAB48 = Byte.parseByte(s);
} else {
IAB48 = Byte.MIN_VALUE;
}
}

protected final void initIAB49(String s) {
if (!s.trim().isEmpty()) {
IAB49 = Byte.parseByte(s);
} else {
IAB49 = Byte.MIN_VALUE;
}
}

protected final void initIAB50(String s) {
if (!s.trim().isEmpty()) {
IAB50 = Byte.parseByte(s);
} else {
IAB50 = Byte.MIN_VALUE;
}
}

protected final void initIAB51(String s) {
if (!s.trim().isEmpty()) {
IAB51 = Byte.parseByte(s);
} else {
IAB51 = Byte.MIN_VALUE;
}
}

protected final void initIAB52(String s) {
if (!s.trim().isEmpty()) {
IAB52 = Byte.parseByte(s);
} else {
IAB52 = Byte.MIN_VALUE;
}
}

protected final void initIAB53(String s) {
if (!s.trim().isEmpty()) {
IAB53 = Byte.parseByte(s);
} else {
IAB53 = Byte.MIN_VALUE;
}
}

protected final void initIAB54(String s) {
if (!s.trim().isEmpty()) {
IAB54 = Byte.parseByte(s);
} else {
IAB54 = Byte.MIN_VALUE;
}
}

protected final void initIAB62(String s) {
if (!s.trim().isEmpty()) {
IAB62 = Byte.parseByte(s);
} else {
IAB62 = Byte.MIN_VALUE;
}
}

protected final void initIAB63(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAB63 = false;
} else {
IAB63 = true;
}
}
}

protected final void initIAB64(String s) {
if (!s.trim().isEmpty()) {
IAB64 = Byte.parseByte(s);
} else {
IAB64 = Byte.MIN_VALUE;
}
}

protected final void initIAB65(String s) {
if (!s.trim().isEmpty()) {
IAB65 = Byte.parseByte(s);
} else {
IAB65 = Byte.MIN_VALUE;
}
}

protected final void initIAB66(String s) {
if (!s.trim().isEmpty()) {
IAB66 = Byte.parseByte(s);
} else {
IAB66 = Byte.MIN_VALUE;
}
}

protected final void initIAB67(String s) {
if (!s.trim().isEmpty()) {
IAB67 = Byte.parseByte(s);
} else {
IAB67 = Byte.MIN_VALUE;
}
}

protected final void initIAB68(String s) {
if (!s.trim().isEmpty()) {
IAB68 = Byte.parseByte(s);
} else {
IAB68 = Byte.MIN_VALUE;
}
}

protected final void initIABEB(String s) {
if (!s.trim().isEmpty()) {
IABEB = Byte.parseByte(s);
} else {
IABEB = Byte.MIN_VALUE;
}
}

protected final void initIABEN1(String s) {
if (!s.trim().isEmpty()) {
IABEN1 = Byte.parseByte(s);
} else {
IABEN1 = Byte.MIN_VALUE;
}
}

protected final void initIABEN2(String s) {
if (!s.trim().isEmpty()) {
IABEN2 = Byte.parseByte(s);
} else {
IABEN2 = Byte.MIN_VALUE;
}
}

protected final void initIABEN3(String s) {
if (!s.trim().isEmpty()) {
IABEN3 = Byte.parseByte(s);
} else {
IABEN3 = Byte.MIN_VALUE;
}
}

protected final void initIABEN4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABEN4 = false;
} else {
IABEN4 = true;
}
}
}

protected final void initIABEP1(String s) {
if (!s.trim().isEmpty()) {
IABEP1 = Byte.parseByte(s);
} else {
IABEP1 = Byte.MIN_VALUE;
}
}

protected final void initIABEP2(String s) {
if (!s.trim().isEmpty()) {
IABEP2 = Byte.parseByte(s);
} else {
IABEP2 = Byte.MIN_VALUE;
}
}

protected final void initIABEP3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABEP3 = false;
} else {
IABEP3 = true;
}
}
}

protected final void initIABEPN1(String s) {
if (!s.trim().isEmpty()) {
IABEPN1 = Byte.parseByte(s);
} else {
IABEPN1 = Byte.MIN_VALUE;
}
}

protected final void initIABEPN2(String s) {
if (!s.trim().isEmpty()) {
IABEPN2 = Byte.parseByte(s);
} else {
IABEPN2 = Byte.MIN_VALUE;
}
}

protected final void initIABEPN3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABEPN3 = false;
} else {
IABEPN3 = true;
}
}
}

protected final void initIABER1(String s) {
if (!s.trim().isEmpty()) {
IABER1 = Byte.parseByte(s);
} else {
IABER1 = Byte.MIN_VALUE;
}
}

protected final void initIABER2(String s) {
if (!s.trim().isEmpty()) {
IABER2 = Byte.parseByte(s);
} else {
IABER2 = Byte.MIN_VALUE;
}
}

protected final void initIABER3(String s) {
if (!s.trim().isEmpty()) {
IABER3 = Byte.parseByte(s);
} else {
IABER3 = Byte.MIN_VALUE;
}
}

protected final void initIABER4(String s) {
if (!s.trim().isEmpty()) {
IABER4 = Byte.parseByte(s);
} else {
IABER4 = Byte.MIN_VALUE;
}
}

protected final void initIABM11(String s) {
if (!s.trim().isEmpty()) {
IABM11 = Byte.parseByte(s);
} else {
IABM11 = Byte.MIN_VALUE;
}
}

protected final void initIABM12(String s) {
if (!s.trim().isEmpty()) {
IABM12 = Byte.parseByte(s);
} else {
IABM12 = Byte.MIN_VALUE;
}
}

protected final void initIABM13(String s) {
if (!s.trim().isEmpty()) {
IABM13 = Byte.parseByte(s);
} else {
IABM13 = Byte.MIN_VALUE;
}
}

protected final void initIABM14(String s) {
if (!s.trim().isEmpty()) {
IABM14 = Byte.parseByte(s);
} else {
IABM14 = Byte.MIN_VALUE;
}
}

protected final void initIABM15(String s) {
if (!s.trim().isEmpty()) {
IABM15 = Byte.parseByte(s);
} else {
IABM15 = Byte.MIN_VALUE;
}
}

protected final void initIABM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM16 = false;
} else {
IABM16 = true;
}
}
}

protected final void initIABM17(String s) {
if (!s.trim().isEmpty()) {
IABM17 = Byte.parseByte(s);
} else {
IABM17 = Byte.MIN_VALUE;
}
}

protected final void initIABM18(String s) {
if (!s.trim().isEmpty()) {
IABM18 = Byte.parseByte(s);
} else {
IABM18 = Byte.MIN_VALUE;
}
}

protected final void initIABM19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM19 = false;
} else {
IABM19 = true;
}
}
}

protected final void initIABM20(String s) {
if (!s.trim().isEmpty()) {
IABM20 = Byte.parseByte(s);
} else {
IABM20 = Byte.MIN_VALUE;
}
}

protected final void initIABM31(String s) {
if (!s.trim().isEmpty()) {
IABM31 = Byte.parseByte(s);
} else {
IABM31 = Byte.MIN_VALUE;
}
}

protected final void initIABM32(String s) {
if (!s.trim().isEmpty()) {
IABM32 = Byte.parseByte(s);
} else {
IABM32 = Byte.MIN_VALUE;
}
}

protected final void initIABM33(String s) {
if (!s.trim().isEmpty()) {
IABM33 = Byte.parseByte(s);
} else {
IABM33 = Byte.MIN_VALUE;
}
}

protected final void initIABM34(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM34 = false;
} else {
IABM34 = true;
}
}
}

protected final void initIABM35(String s) {
if (!s.trim().isEmpty()) {
IABM35 = Byte.parseByte(s);
} else {
IABM35 = Byte.MIN_VALUE;
}
}

protected final void initIABM36(String s) {
if (!s.trim().isEmpty()) {
IABM36 = Byte.parseByte(s);
} else {
IABM36 = Byte.MIN_VALUE;
}
}

protected final void initIABM37(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM37 = false;
} else {
IABM37 = true;
}
}
}

protected final void initIABM38(String s) {
if (!s.trim().isEmpty()) {
IABM38 = Byte.parseByte(s);
} else {
IABM38 = Byte.MIN_VALUE;
}
}

protected final void initIABM39(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM39 = false;
} else {
IABM39 = true;
}
}
}

protected final void initIABM40(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM40 = false;
} else {
IABM40 = true;
}
}
}

protected final void initIABM48(String s) {
if (!s.trim().isEmpty()) {
IABM48 = Byte.parseByte(s);
} else {
IABM48 = Byte.MIN_VALUE;
}
}

protected final void initIABM49(String s) {
if (!s.trim().isEmpty()) {
IABM49 = Byte.parseByte(s);
} else {
IABM49 = Byte.MIN_VALUE;
}
}

protected final void initIABM50(String s) {
if (!s.trim().isEmpty()) {
IABM50 = Byte.parseByte(s);
} else {
IABM50 = Byte.MIN_VALUE;
}
}

protected final void initIABM51(String s) {
if (!s.trim().isEmpty()) {
IABM51 = Byte.parseByte(s);
} else {
IABM51 = Byte.MIN_VALUE;
}
}

protected final void initIABM52(String s) {
if (!s.trim().isEmpty()) {
IABM52 = Byte.parseByte(s);
} else {
IABM52 = Byte.MIN_VALUE;
}
}

protected final void initIABM53(String s) {
if (!s.trim().isEmpty()) {
IABM53 = Byte.parseByte(s);
} else {
IABM53 = Byte.MIN_VALUE;
}
}

protected final void initIABM54(String s) {
if (!s.trim().isEmpty()) {
IABM54 = Byte.parseByte(s);
} else {
IABM54 = Byte.MIN_VALUE;
}
}

protected final void initIABM62(String s) {
if (!s.trim().isEmpty()) {
IABM62 = Byte.parseByte(s);
} else {
IABM62 = Byte.MIN_VALUE;
}
}

protected final void initIABM63(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM63 = false;
} else {
IABM63 = true;
}
}
}

protected final void initIABM64(String s) {
if (!s.trim().isEmpty()) {
IABM64 = Byte.parseByte(s);
} else {
IABM64 = Byte.MIN_VALUE;
}
}

protected final void initIABM65(String s) {
if (!s.trim().isEmpty()) {
IABM65 = Byte.parseByte(s);
} else {
IABM65 = Byte.MIN_VALUE;
}
}

protected final void initIABM66(String s) {
if (!s.trim().isEmpty()) {
IABM66 = Byte.parseByte(s);
} else {
IABM66 = Byte.MIN_VALUE;
}
}

protected final void initIABM67(String s) {
if (!s.trim().isEmpty()) {
IABM67 = Byte.parseByte(s);
} else {
IABM67 = Byte.MIN_VALUE;
}
}

protected final void initIABM68(String s) {
if (!s.trim().isEmpty()) {
IABM68 = Byte.parseByte(s);
} else {
IABM68 = Byte.MIN_VALUE;
}
}

protected final void initIABPM01(String s) {
if (!s.trim().isEmpty()) {
IABPM01 = Byte.parseByte(s);
} else {
IABPM01 = Byte.MIN_VALUE;
}
}

protected final void initIABPM02(String s) {
if (!s.trim().isEmpty()) {
IABPM02 = Byte.parseByte(s);
} else {
IABPM02 = Byte.MIN_VALUE;
}
}

protected final void initIABPM03(String s) {
if (!s.trim().isEmpty()) {
IABPM03 = Byte.parseByte(s);
} else {
IABPM03 = Byte.MIN_VALUE;
}
}

protected final void initIABRM01(String s) {
if (!s.trim().isEmpty()) {
IABRM01 = Byte.parseByte(s);
} else {
IABRM01 = Byte.MIN_VALUE;
}
}

protected final void initIABRM02(String s) {
if (!s.trim().isEmpty()) {
IABRM02 = Byte.parseByte(s);
} else {
IABRM02 = Byte.MIN_VALUE;
}
}

protected final void initIABRM03(String s) {
if (!s.trim().isEmpty()) {
IABRM03 = Byte.parseByte(s);
} else {
IABRM03 = Byte.MIN_VALUE;
}
}

protected final void initIABRM04(String s) {
if (!s.trim().isEmpty()) {
IABRM04 = Byte.parseByte(s);
} else {
IABRM04 = Byte.MIN_VALUE;
}
}

protected final void initIABW11(String s) {
if (!s.trim().isEmpty()) {
IABW11 = Byte.parseByte(s);
} else {
IABW11 = Byte.MIN_VALUE;
}
}

protected final void initIABW12(String s) {
if (!s.trim().isEmpty()) {
IABW12 = Byte.parseByte(s);
} else {
IABW12 = Byte.MIN_VALUE;
}
}

protected final void initIABW13(String s) {
if (!s.trim().isEmpty()) {
IABW13 = Byte.parseByte(s);
} else {
IABW13 = Byte.MIN_VALUE;
}
}

protected final void initIABW14(String s) {
if (!s.trim().isEmpty()) {
IABW14 = Byte.parseByte(s);
} else {
IABW14 = Byte.MIN_VALUE;
}
}

protected final void initIABW15(String s) {
if (!s.trim().isEmpty()) {
IABW15 = Byte.parseByte(s);
} else {
IABW15 = Byte.MIN_VALUE;
}
}

protected final void initIABW16(String s) {
if (!s.trim().isEmpty()) {
IABW16 = Byte.parseByte(s);
} else {
IABW16 = Byte.MIN_VALUE;
}
}

protected final void initIABW17(String s) {
if (!s.trim().isEmpty()) {
IABW17 = Byte.parseByte(s);
} else {
IABW17 = Byte.MIN_VALUE;
}
}

protected final void initIABW18(String s) {
if (!s.trim().isEmpty()) {
IABW18 = Byte.parseByte(s);
} else {
IABW18 = Byte.MIN_VALUE;
}
}

protected final void initIABW19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW19 = false;
} else {
IABW19 = true;
}
}
}

protected final void initIABW20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW20 = false;
} else {
IABW20 = true;
}
}
}

protected final void initIABW31(String s) {
if (!s.trim().isEmpty()) {
IABW31 = Byte.parseByte(s);
} else {
IABW31 = Byte.MIN_VALUE;
}
}

protected final void initIABW32(String s) {
if (!s.trim().isEmpty()) {
IABW32 = Byte.parseByte(s);
} else {
IABW32 = Byte.MIN_VALUE;
}
}

protected final void initIABW33(String s) {
if (!s.trim().isEmpty()) {
IABW33 = Byte.parseByte(s);
} else {
IABW33 = Byte.MIN_VALUE;
}
}

protected final void initIABW34(String s) {
if (!s.trim().isEmpty()) {
IABW34 = Byte.parseByte(s);
} else {
IABW34 = Byte.MIN_VALUE;
}
}

protected final void initIABW35(String s) {
if (!s.trim().isEmpty()) {
IABW35 = Byte.parseByte(s);
} else {
IABW35 = Byte.MIN_VALUE;
}
}

protected final void initIABW36(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW36 = false;
} else {
IABW36 = true;
}
}
}

protected final void initIABW37(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW37 = false;
} else {
IABW37 = true;
}
}
}

protected final void initIABW38(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW38 = false;
} else {
IABW38 = true;
}
}
}

protected final void initIABW39(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW39 = false;
} else {
IABW39 = true;
}
}
}

protected final void initIABW40(String s) {
if (!s.trim().isEmpty()) {
IABW40 = Byte.parseByte(s);
} else {
IABW40 = Byte.MIN_VALUE;
}
}

protected final void initIABW48(String s) {
if (!s.trim().isEmpty()) {
IABW48 = Byte.parseByte(s);
} else {
IABW48 = Byte.MIN_VALUE;
}
}

protected final void initIABW49(String s) {
if (!s.trim().isEmpty()) {
IABW49 = Byte.parseByte(s);
} else {
IABW49 = Byte.MIN_VALUE;
}
}

protected final void initIABW50(String s) {
if (!s.trim().isEmpty()) {
IABW50 = Byte.parseByte(s);
} else {
IABW50 = Byte.MIN_VALUE;
}
}

protected final void initIABW51(String s) {
if (!s.trim().isEmpty()) {
IABW51 = Byte.parseByte(s);
} else {
IABW51 = Byte.MIN_VALUE;
}
}

protected final void initIABW52(String s) {
if (!s.trim().isEmpty()) {
IABW52 = Byte.parseByte(s);
} else {
IABW52 = Byte.MIN_VALUE;
}
}

protected final void initIABW53(String s) {
if (!s.trim().isEmpty()) {
IABW53 = Byte.parseByte(s);
} else {
IABW53 = Byte.MIN_VALUE;
}
}

protected final void initIABW54(String s) {
if (!s.trim().isEmpty()) {
IABW54 = Byte.parseByte(s);
} else {
IABW54 = Byte.MIN_VALUE;
}
}

protected final void initIABW62(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW62 = false;
} else {
IABW62 = true;
}
}
}

protected final void initIABW63(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW63 = false;
} else {
IABW63 = true;
}
}
}

protected final void initIABW64(String s) {
if (!s.trim().isEmpty()) {
IABW64 = Byte.parseByte(s);
} else {
IABW64 = Byte.MIN_VALUE;
}
}

protected final void initIABW65(String s) {
if (!s.trim().isEmpty()) {
IABW65 = Byte.parseByte(s);
} else {
IABW65 = Byte.MIN_VALUE;
}
}

protected final void initIABW66(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW66 = false;
} else {
IABW66 = true;
}
}
}

protected final void initIABW67(String s) {
if (!s.trim().isEmpty()) {
IABW67 = Byte.parseByte(s);
} else {
IABW67 = Byte.MIN_VALUE;
}
}

protected final void initIABW68(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW68 = false;
} else {
IABW68 = true;
}
}
}

protected final void initIACIE(String s) {
if (!s.trim().isEmpty()) {
IACIE = Byte.parseByte(s);
} else {
IACIE = Byte.MIN_VALUE;
}
}

protected final void initIACIL(String s) {
if (!s.trim().isEmpty()) {
IACIL = Short.parseShort(s);
} else {
IACIL = Short.MIN_VALUE;
}
}

protected final void initIACIR(String s) {
if (!s.trim().isEmpty()) {
IACIR = Byte.parseByte(s);
} else {
IACIR = Byte.MIN_VALUE;
}
}

protected final void initIACIU(String s) {
if (!s.trim().isEmpty()) {
IACIU = Short.parseShort(s);
} else {
IACIU = Short.MIN_VALUE;
}
}

protected final void initIADEE(String s) {
if (!s.trim().isEmpty()) {
IADEE = Byte.parseByte(s);
} else {
IADEE = Byte.MIN_VALUE;
}
}

protected final void initIADEL(String s) {
if (!s.trim().isEmpty()) {
IADEL = Short.parseShort(s);
} else {
IADEL = Short.MIN_VALUE;
}
}

protected final void initIADEM(String s) {
if (!s.trim().isEmpty()) {
IADEM = Byte.parseByte(s);
} else {
IADEM = Byte.MIN_VALUE;
}
}

protected final void initIADEN(String s) {
if (!s.trim().isEmpty()) {
IADEN = Byte.parseByte(s);
} else {
IADEN = Byte.MIN_VALUE;
}
}

protected final void initIADER(String s) {
if (!s.trim().isEmpty()) {
IADER = Byte.parseByte(s);
} else {
IADER = Byte.MIN_VALUE;
}
}

protected final void initIADEU(String s) {
if (!s.trim().isEmpty()) {
IADEU = Short.parseShort(s);
} else {
IADEU = Short.MIN_VALUE;
}
}

protected final void initIAEA10E(String s) {
if (!s.trim().isEmpty()) {
IAEA10E = Byte.parseByte(s);
} else {
IAEA10E = Byte.MIN_VALUE;
}
}

protected final void initIAEA10L(String s) {
if (!s.trim().isEmpty()) {
IAEA10L = Short.parseShort(s);
} else {
IAEA10L = Short.MIN_VALUE;
}
}

protected final void initIAEA10R(String s) {
if (!s.trim().isEmpty()) {
IAEA10R = Byte.parseByte(s);
} else {
IAEA10R = Byte.MIN_VALUE;
}
}

protected final void initIAEA10U(String s) {
if (!s.trim().isEmpty()) {
IAEA10U = Short.parseShort(s);
} else {
IAEA10U = Short.MIN_VALUE;
}
}

protected final void initIAEA2E(String s) {
if (!s.trim().isEmpty()) {
IAEA2E = Byte.parseByte(s);
} else {
IAEA2E = Byte.MIN_VALUE;
}
}

protected final void initIAEA2L(String s) {
if (!s.trim().isEmpty()) {
IAEA2L = Integer.parseInt(s);
} else {
IAEA2L = Integer.MIN_VALUE;
}
}

protected final void initIAEA2R(String s) {
if (!s.trim().isEmpty()) {
IAEA2R = Byte.parseByte(s);
} else {
IAEA2R = Byte.MIN_VALUE;
}
}

protected final void initIAEA2U(String s) {
if (!s.trim().isEmpty()) {
IAEA2U = Integer.parseInt(s);
} else {
IAEA2U = Integer.MIN_VALUE;
}
}

protected final void initIAEA3E(String s) {
if (!s.trim().isEmpty()) {
IAEA3E = Byte.parseByte(s);
} else {
IAEA3E = Byte.MIN_VALUE;
}
}

protected final void initIAEA3L(String s) {
if (!s.trim().isEmpty()) {
IAEA3L = Integer.parseInt(s);
} else {
IAEA3L = Integer.MIN_VALUE;
}
}

protected final void initIAEA3R(String s) {
if (!s.trim().isEmpty()) {
IAEA3R = Byte.parseByte(s);
} else {
IAEA3R = Byte.MIN_VALUE;
}
}

protected final void initIAEA3U(String s) {
if (!s.trim().isEmpty()) {
IAEA3U = Integer.parseInt(s);
} else {
IAEA3U = Integer.MIN_VALUE;
}
}

protected final void initIAEA4E(String s) {
if (!s.trim().isEmpty()) {
IAEA4E = Byte.parseByte(s);
} else {
IAEA4E = Byte.MIN_VALUE;
}
}

protected final void initIAEA4L(String s) {
if (!s.trim().isEmpty()) {
IAEA4L = Integer.parseInt(s);
} else {
IAEA4L = Integer.MIN_VALUE;
}
}

protected final void initIAEA4R(String s) {
if (!s.trim().isEmpty()) {
IAEA4R = Byte.parseByte(s);
} else {
IAEA4R = Byte.MIN_VALUE;
}
}

protected final void initIAEA4U(String s) {
if (!s.trim().isEmpty()) {
IAEA4U = Integer.parseInt(s);
} else {
IAEA4U = Integer.MIN_VALUE;
}
}

protected final void initIAEA5E(String s) {
if (!s.trim().isEmpty()) {
IAEA5E = Byte.parseByte(s);
} else {
IAEA5E = Byte.MIN_VALUE;
}
}

protected final void initIAEA5L(String s) {
if (!s.trim().isEmpty()) {
IAEA5L = Short.parseShort(s);
} else {
IAEA5L = Short.MIN_VALUE;
}
}

protected final void initIAEA5R(String s) {
if (!s.trim().isEmpty()) {
IAEA5R = Byte.parseByte(s);
} else {
IAEA5R = Byte.MIN_VALUE;
}
}

protected final void initIAEA5U(String s) {
if (!s.trim().isEmpty()) {
IAEA5U = Integer.parseInt(s);
} else {
IAEA5U = Integer.MIN_VALUE;
}
}

protected final void initIAEA6E(String s) {
if (!s.trim().isEmpty()) {
IAEA6E = Byte.parseByte(s);
} else {
IAEA6E = Byte.MIN_VALUE;
}
}

protected final void initIAEA6L(String s) {
if (!s.trim().isEmpty()) {
IAEA6L = Short.parseShort(s);
} else {
IAEA6L = Short.MIN_VALUE;
}
}

protected final void initIAEA6R(String s) {
if (!s.trim().isEmpty()) {
IAEA6R = Byte.parseByte(s);
} else {
IAEA6R = Byte.MIN_VALUE;
}
}

protected final void initIAEA6U(String s) {
if (!s.trim().isEmpty()) {
IAEA6U = Short.parseShort(s);
} else {
IAEA6U = Short.MIN_VALUE;
}
}

protected final void initIAEA7E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA7E = false;
} else {
IAEA7E = true;
}
}
}

protected final void initIAEA7L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAEA7L = false;
} else {
IAEA7L = true;
}
}
}

protected final void initIAEA7R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA7R = false;
} else {
IAEA7R = true;
}
}
}

protected final void initIAEA7U(String s) {
if (!s.trim().isEmpty()) {
IAEA7U = Short.parseShort(s);
} else {
IAEA7U = Short.MIN_VALUE;
}
}

protected final void initIAEA8E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA8E = false;
} else {
IAEA8E = true;
}
}
}

protected final void initIAEA8L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA8L = false;
} else {
IAEA8L = true;
}
}
}

protected final void initIAEA8R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA8R = false;
} else {
IAEA8R = true;
}
}
}

protected final void initIAEA8U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA8U = false;
} else {
IAEA8U = true;
}
}
}

protected final void initIAEA9E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA9E = false;
} else {
IAEA9E = true;
}
}
}

protected final void initIAEA9L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA9L = false;
} else {
IAEA9L = true;
}
}
}

protected final void initIAEA9R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA9R = false;
} else {
IAEA9R = true;
}
}
}

protected final void initIAEA9U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA9U = false;
} else {
IAEA9U = true;
}
}
}

protected final void initIAEAE(String s) {
if (!s.trim().isEmpty()) {
IAEAE = Byte.parseByte(s);
} else {
IAEAE = Byte.MIN_VALUE;
}
}

protected final void initIAEAL(String s) {
if (!s.trim().isEmpty()) {
IAEAL = Short.parseShort(s);
} else {
IAEAL = Short.MIN_VALUE;
}
}

protected final void initIAEAN(String s) {
if (!s.trim().isEmpty()) {
IAEAN = Integer.parseInt(s);
} else {
IAEAN = Integer.MIN_VALUE;
}
}

protected final void initIAEAN02(String s) {
if (!s.trim().isEmpty()) {
IAEAN02 = Integer.parseInt(s);
} else {
IAEAN02 = Integer.MIN_VALUE;
}
}

protected final void initIAEAN03(String s) {
if (!s.trim().isEmpty()) {
IAEAN03 = Integer.parseInt(s);
} else {
IAEAN03 = Integer.MIN_VALUE;
}
}

protected final void initIAEAN04(String s) {
if (!s.trim().isEmpty()) {
IAEAN04 = Short.parseShort(s);
} else {
IAEAN04 = Short.MIN_VALUE;
}
}

protected final void initIAEAN05(String s) {
if (!s.trim().isEmpty()) {
IAEAN05 = Integer.parseInt(s);
} else {
IAEAN05 = Integer.MIN_VALUE;
}
}

protected final void initIAEAN06(String s) {
if (!s.trim().isEmpty()) {
IAEAN06 = Short.parseShort(s);
} else {
IAEAN06 = Short.MIN_VALUE;
}
}

protected final void initIAEAN07(String s) {
if (!s.trim().isEmpty()) {
IAEAN07 = Short.parseShort(s);
} else {
IAEAN07 = Short.MIN_VALUE;
}
}

protected final void initIAEAN08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEAN08 = false;
} else {
IAEAN08 = true;
}
}
}

protected final void initIAEAN09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEAN09 = false;
} else {
IAEAN09 = true;
}
}
}

protected final void initIAEAN10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEAN10 = false;
} else {
IAEAN10 = true;
}
}
}

protected final void initIAEAR(String s) {
if (!s.trim().isEmpty()) {
IAEAR = Byte.parseByte(s);
} else {
IAEAR = Byte.MIN_VALUE;
}
}

protected final void initIAEAU(String s) {
if (!s.trim().isEmpty()) {
IAEAU = Integer.parseInt(s);
} else {
IAEAU = Integer.MIN_VALUE;
}
}

protected final void initIAFBE(String s) {
if (!s.trim().isEmpty()) {
IAFBE = Byte.parseByte(s);
} else {
IAFBE = Byte.MIN_VALUE;
}
}

protected final void initIAFBL(String s) {
if (!s.trim().isEmpty()) {
IAFBL = Short.parseShort(s);
} else {
IAFBL = Short.MIN_VALUE;
}
}

protected final void initIAFBR(String s) {
if (!s.trim().isEmpty()) {
IAFBR = Byte.parseByte(s);
} else {
IAFBR = Byte.MIN_VALUE;
}
}

protected final void initIAFBU(String s) {
if (!s.trim().isEmpty()) {
IAFBU = Integer.parseInt(s);
} else {
IAFBU = Integer.MIN_VALUE;
}
}

protected final void initIAFINDC(String s) {
if (!s.trim().isEmpty()) {
IAFINDC = Byte.parseByte(s);
} else {
IAFINDC = Byte.MIN_VALUE;
}
}

protected final void initIAFUEL(String s) {
if (!s.trim().isEmpty()) {
IAFUEL = Byte.parseByte(s);
} else {
IAFUEL = Byte.MIN_VALUE;
}
}

protected final void initIAHDB(String s) {
if (!s.trim().isEmpty()) {
IAHDB = Byte.parseByte(s);
} else {
IAHDB = Byte.MIN_VALUE;
}
}

protected final void initIAHDN01(String s) {
if (!s.trim().isEmpty()) {
IAHDN01 = Byte.parseByte(s);
} else {
IAHDN01 = Byte.MIN_VALUE;
}
}

protected final void initIAHDN02(String s) {
if (!s.trim().isEmpty()) {
IAHDN02 = Byte.parseByte(s);
} else {
IAHDN02 = Byte.MIN_VALUE;
}
}

protected final void initIAHDN03(String s) {
if (!s.trim().isEmpty()) {
IAHDN03 = Byte.parseByte(s);
} else {
IAHDN03 = Byte.MIN_VALUE;
}
}

protected final void initIAHDN04(String s) {
if (!s.trim().isEmpty()) {
IAHDN04 = Byte.parseByte(s);
} else {
IAHDN04 = Byte.MIN_VALUE;
}
}

protected final void initIAHDN05(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAHDN05 = false;
} else {
IAHDN05 = true;
}
}
}

protected final void initIAHDP01(String s) {
if (!s.trim().isEmpty()) {
IAHDP01 = Byte.parseByte(s);
} else {
IAHDP01 = Byte.MIN_VALUE;
}
}

protected final void initIAHDP02(String s) {
if (!s.trim().isEmpty()) {
IAHDP02 = Byte.parseByte(s);
} else {
IAHDP02 = Byte.MIN_VALUE;
}
}

protected final void initIAHDP03(String s) {
if (!s.trim().isEmpty()) {
IAHDP03 = Byte.parseByte(s);
} else {
IAHDP03 = Byte.MIN_VALUE;
}
}

protected final void initIAHDP04(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAHDP04 = false;
} else {
IAHDP04 = true;
}
}
}

protected final void initIAHDR01(String s) {
if (!s.trim().isEmpty()) {
IAHDR01 = Byte.parseByte(s);
} else {
IAHDR01 = Byte.MIN_VALUE;
}
}

protected final void initIAHDR02(String s) {
if (!s.trim().isEmpty()) {
IAHDR02 = Byte.parseByte(s);
} else {
IAHDR02 = Byte.MIN_VALUE;
}
}

protected final void initIAHDR03(String s) {
if (!s.trim().isEmpty()) {
IAHDR03 = Byte.parseByte(s);
} else {
IAHDR03 = Byte.MIN_VALUE;
}
}

protected final void initIAHDR04(String s) {
if (!s.trim().isEmpty()) {
IAHDR04 = Byte.parseByte(s);
} else {
IAHDR04 = Byte.MIN_VALUE;
}
}

protected final void initIAHDR05(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAHDR05 = false;
} else {
IAHDR05 = true;
}
}
}

protected final void initIAHOE(String s) {
if (!s.trim().isEmpty()) {
IAHOE = Byte.parseByte(s);
} else {
IAHOE = Byte.MIN_VALUE;
}
}

protected final void initIAHOL(String s) {
if (!s.trim().isEmpty()) {
IAHOL = Integer.parseInt(s);
} else {
IAHOL = Integer.MIN_VALUE;
}
}

protected final void initIAHOR(String s) {
if (!s.trim().isEmpty()) {
IAHOR = Byte.parseByte(s);
} else {
IAHOR = Byte.MIN_VALUE;
}
}

protected final void initIAHOU(String s) {
if (!s.trim().isEmpty()) {
IAHOU = Integer.parseInt(s);
} else {
IAHOU = Integer.MIN_VALUE;
}
}

protected final void initIAHPM01(String s) {
if (!s.trim().isEmpty()) {
IAHPM01 = Byte.parseByte(s);
} else {
IAHPM01 = Byte.MIN_VALUE;
}
}

protected final void initIAHPM02(String s) {
if (!s.trim().isEmpty()) {
IAHPM02 = Byte.parseByte(s);
} else {
IAHPM02 = Byte.MIN_VALUE;
}
}

protected final void initIAHPM03(String s) {
if (!s.trim().isEmpty()) {
IAHPM03 = Byte.parseByte(s);
} else {
IAHPM03 = Byte.MIN_VALUE;
}
}

protected final void initIAHPM04(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAHPM04 = false;
} else {
IAHPM04 = true;
}
}
}

protected final void initIAHPN01(String s) {
if (!s.trim().isEmpty()) {
IAHPN01 = Byte.parseByte(s);
} else {
IAHPN01 = Byte.MIN_VALUE;
}
}

protected final void initIAHPN02(String s) {
if (!s.trim().isEmpty()) {
IAHPN02 = Byte.parseByte(s);
} else {
IAHPN02 = Byte.MIN_VALUE;
}
}

protected final void initIAHPN03(String s) {
if (!s.trim().isEmpty()) {
IAHPN03 = Byte.parseByte(s);
} else {
IAHPN03 = Byte.MIN_VALUE;
}
}

protected final void initIAHPN04(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAHPN04 = false;
} else {
IAHPN04 = true;
}
}
}

protected final void initIAHRM01(String s) {
if (!s.trim().isEmpty()) {
IAHRM01 = Byte.parseByte(s);
} else {
IAHRM01 = Byte.MIN_VALUE;
}
}

protected final void initIAHRM02(String s) {
if (!s.trim().isEmpty()) {
IAHRM02 = Byte.parseByte(s);
} else {
IAHRM02 = Byte.MIN_VALUE;
}
}

protected final void initIAHRM03(String s) {
if (!s.trim().isEmpty()) {
IAHRM03 = Byte.parseByte(s);
} else {
IAHRM03 = Byte.MIN_VALUE;
}
}

protected final void initIAHRM04(String s) {
if (!s.trim().isEmpty()) {
IAHRM04 = Byte.parseByte(s);
} else {
IAHRM04 = Byte.MIN_VALUE;
}
}

protected final void initIAHRM05(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAHRM05 = false;
} else {
IAHRM05 = true;
}
}
}

protected final void initIAIRE(String s) {
if (!s.trim().isEmpty()) {
IAIRE = Byte.parseByte(s);
} else {
IAIRE = Byte.MIN_VALUE;
}
}

protected final void initIAIRL(String s) {
if (!s.trim().isEmpty()) {
IAIRL = Short.parseShort(s);
} else {
IAIRL = Short.MIN_VALUE;
}
}

protected final void initIAIRR(String s) {
if (!s.trim().isEmpty()) {
IAIRR = Byte.parseByte(s);
} else {
IAIRR = Byte.MIN_VALUE;
}
}

protected final void initIAIRU(String s) {
if (!s.trim().isEmpty()) {
IAIRU = Integer.parseInt(s);
} else {
IAIRU = Integer.MIN_VALUE;
}
}

protected final void initIAISA1(String s) {
if (!s.trim().isEmpty()) {
IAISA1 = Byte.parseByte(s);
} else {
IAISA1 = Byte.MIN_VALUE;
}
}

protected final void initIAISA2(String s) {
if (!s.trim().isEmpty()) {
IAISA2 = Byte.parseByte(s);
} else {
IAISA2 = Byte.MIN_VALUE;
}
}

protected final void initIAISA3(String s) {
if (!s.trim().isEmpty()) {
IAISA3 = Byte.parseByte(s);
} else {
IAISA3 = Byte.MIN_VALUE;
}
}

protected final void initIAISE(String s) {
if (!s.trim().isEmpty()) {
IAISE = Byte.parseByte(s);
} else {
IAISE = Byte.MIN_VALUE;
}
}

protected final void initIAISL(String s) {
if (!s.trim().isEmpty()) {
IAISL = Short.parseShort(s);
} else {
IAISL = Short.MIN_VALUE;
}
}

protected final void initIAISR(String s) {
if (!s.trim().isEmpty()) {
IAISR = Byte.parseByte(s);
} else {
IAISR = Byte.MIN_VALUE;
}
}

protected final void initIAISU(String s) {
if (!s.trim().isEmpty()) {
IAISU = Short.parseShort(s);
} else {
IAISU = Short.MIN_VALUE;
}
}

protected final void initIALIE(String s) {
if (!s.trim().isEmpty()) {
IALIE = Byte.parseByte(s);
} else {
IALIE = Byte.MIN_VALUE;
}
}

protected final void initIALIL(String s) {
if (!s.trim().isEmpty()) {
IALIL = Integer.parseInt(s);
} else {
IALIL = Integer.MIN_VALUE;
}
}

protected final void initIALIR(String s) {
if (!s.trim().isEmpty()) {
IALIR = Byte.parseByte(s);
} else {
IALIR = Byte.MIN_VALUE;
}
}

protected final void initIALISE(String s) {
if (!s.trim().isEmpty()) {
IALISE = Byte.parseByte(s);
} else {
IALISE = Byte.MIN_VALUE;
}
}

protected final void initIALISL(String s) {
if (!s.trim().isEmpty()) {
IALISL = Short.parseShort(s);
} else {
IALISL = Short.MIN_VALUE;
}
}

protected final void initIALISR(String s) {
if (!s.trim().isEmpty()) {
IALISR = Byte.parseByte(s);
} else {
IALISR = Byte.MIN_VALUE;
}
}

protected final void initIALISU(String s) {
if (!s.trim().isEmpty()) {
IALISU = Short.parseShort(s);
} else {
IALISU = Short.MIN_VALUE;
}
}

protected final void initIALIU(String s) {
if (!s.trim().isEmpty()) {
IALIU = Integer.parseInt(s);
} else {
IALIU = Integer.MIN_VALUE;
}
}

protected final void initIALIYE(String s) {
if (!s.trim().isEmpty()) {
IALIYE = Byte.parseByte(s);
} else {
IALIYE = Byte.MIN_VALUE;
}
}

protected final void initIALIYL(String s) {
if (!s.trim().isEmpty()) {
IALIYL = Integer.parseInt(s);
} else {
IALIYL = Integer.MIN_VALUE;
}
}

protected final void initIALIYR(String s) {
if (!s.trim().isEmpty()) {
IALIYR = Byte.parseByte(s);
} else {
IALIYR = Byte.MIN_VALUE;
}
}

protected final void initIALIYU(String s) {
if (!s.trim().isEmpty()) {
IALIYU = Integer.parseInt(s);
} else {
IALIYU = Integer.MIN_VALUE;
}
}

protected final void initIALM(String s) {
if (!s.trim().isEmpty()) {
IALM = Byte.parseByte(s);
} else {
IALM = Byte.MIN_VALUE;
}
}

protected final void initIALM10(String s) {
if (!s.trim().isEmpty()) {
IALM10 = Byte.parseByte(s);
} else {
IALM10 = Byte.MIN_VALUE;
}
}

protected final void initIALM2(String s) {
if (!s.trim().isEmpty()) {
IALM2 = Byte.parseByte(s);
} else {
IALM2 = Byte.MIN_VALUE;
}
}

protected final void initIALM21(String s) {
if (!s.trim().isEmpty()) {
IALM21 = Byte.parseByte(s);
} else {
IALM21 = Byte.MIN_VALUE;
}
}

protected final void initIALM22(String s) {
if (!s.trim().isEmpty()) {
IALM22 = Byte.parseByte(s);
} else {
IALM22 = Byte.MIN_VALUE;
}
}

protected final void initIALM23(String s) {
if (!s.trim().isEmpty()) {
IALM23 = Byte.parseByte(s);
} else {
IALM23 = Byte.MIN_VALUE;
}
}

protected final void initIALM24(String s) {
if (!s.trim().isEmpty()) {
IALM24 = Byte.parseByte(s);
} else {
IALM24 = Byte.MIN_VALUE;
}
}

protected final void initIALM25(String s) {
if (!s.trim().isEmpty()) {
IALM25 = Byte.parseByte(s);
} else {
IALM25 = Byte.MIN_VALUE;
}
}

protected final void initIALM26(String s) {
if (!s.trim().isEmpty()) {
IALM26 = Byte.parseByte(s);
} else {
IALM26 = Byte.MIN_VALUE;
}
}

protected final void initIALM27(String s) {
if (!s.trim().isEmpty()) {
IALM27 = Byte.parseByte(s);
} else {
IALM27 = Byte.MIN_VALUE;
}
}

protected final void initIALM28(String s) {
if (!s.trim().isEmpty()) {
IALM28 = Byte.parseByte(s);
} else {
IALM28 = Byte.MIN_VALUE;
}
}

protected final void initIALM29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALM29 = false;
} else {
IALM29 = true;
}
}
}

protected final void initIALM3(String s) {
if (!s.trim().isEmpty()) {
IALM3 = Byte.parseByte(s);
} else {
IALM3 = Byte.MIN_VALUE;
}
}

protected final void initIALM30(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALM30 = false;
} else {
IALM30 = true;
}
}
}

protected final void initIALM4(String s) {
if (!s.trim().isEmpty()) {
IALM4 = Byte.parseByte(s);
} else {
IALM4 = Byte.MIN_VALUE;
}
}

protected final void initIALM41(String s) {
if (!s.trim().isEmpty()) {
IALM41 = Byte.parseByte(s);
} else {
IALM41 = Byte.MIN_VALUE;
}
}

protected final void initIALM42(String s) {
if (!s.trim().isEmpty()) {
IALM42 = Byte.parseByte(s);
} else {
IALM42 = Byte.MIN_VALUE;
}
}

protected final void initIALM43(String s) {
if (!s.trim().isEmpty()) {
IALM43 = Byte.parseByte(s);
} else {
IALM43 = Byte.MIN_VALUE;
}
}

protected final void initIALM44(String s) {
if (!s.trim().isEmpty()) {
IALM44 = Byte.parseByte(s);
} else {
IALM44 = Byte.MIN_VALUE;
}
}

protected final void initIALM45(String s) {
if (!s.trim().isEmpty()) {
IALM45 = Byte.parseByte(s);
} else {
IALM45 = Byte.MIN_VALUE;
}
}

protected final void initIALM46(String s) {
if (!s.trim().isEmpty()) {
IALM46 = Byte.parseByte(s);
} else {
IALM46 = Byte.MIN_VALUE;
}
}

protected final void initIALM47(String s) {
if (!s.trim().isEmpty()) {
IALM47 = Byte.parseByte(s);
} else {
IALM47 = Byte.MIN_VALUE;
}
}

protected final void initIALM5(String s) {
if (!s.trim().isEmpty()) {
IALM5 = Byte.parseByte(s);
} else {
IALM5 = Byte.MIN_VALUE;
}
}

protected final void initIALM55(String s) {
if (!s.trim().isEmpty()) {
IALM55 = Byte.parseByte(s);
} else {
IALM55 = Byte.MIN_VALUE;
}
}

protected final void initIALM56(String s) {
if (!s.trim().isEmpty()) {
IALM56 = Byte.parseByte(s);
} else {
IALM56 = Byte.MIN_VALUE;
}
}

protected final void initIALM57(String s) {
if (!s.trim().isEmpty()) {
IALM57 = Byte.parseByte(s);
} else {
IALM57 = Byte.MIN_VALUE;
}
}

protected final void initIALM58(String s) {
if (!s.trim().isEmpty()) {
IALM58 = Byte.parseByte(s);
} else {
IALM58 = Byte.MIN_VALUE;
}
}

protected final void initIALM59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALM59 = false;
} else {
IALM59 = true;
}
}
}

protected final void initIALM6(String s) {
if (!s.trim().isEmpty()) {
IALM6 = Byte.parseByte(s);
} else {
IALM6 = Byte.MIN_VALUE;
}
}

protected final void initIALM60(String s) {
if (!s.trim().isEmpty()) {
IALM60 = Byte.parseByte(s);
} else {
IALM60 = Byte.MIN_VALUE;
}
}

protected final void initIALM61(String s) {
if (!s.trim().isEmpty()) {
IALM61 = Byte.parseByte(s);
} else {
IALM61 = Byte.MIN_VALUE;
}
}

protected final void initIALM7(String s) {
if (!s.trim().isEmpty()) {
IALM7 = Byte.parseByte(s);
} else {
IALM7 = Byte.MIN_VALUE;
}
}

protected final void initIALM8(String s) {
if (!s.trim().isEmpty()) {
IALM8 = Byte.parseByte(s);
} else {
IALM8 = Byte.MIN_VALUE;
}
}

protected final void initIALM9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALM9 = false;
} else {
IALM9 = true;
}
}
}

protected final void initIALOAN1(String s) {
if (!s.trim().isEmpty()) {
IALOAN1 = Byte.parseByte(s);
} else {
IALOAN1 = Byte.MIN_VALUE;
}
}

protected final void initIALOAN2(String s) {
if (!s.trim().isEmpty()) {
IALOAN2 = Byte.parseByte(s);
} else {
IALOAN2 = Byte.MIN_VALUE;
}
}

protected final void initIALOAN3(String s) {
if (!s.trim().isEmpty()) {
IALOAN3 = Byte.parseByte(s);
} else {
IALOAN3 = Byte.MIN_VALUE;
}
}

protected final void initIALOAN4(String s) {
if (!s.trim().isEmpty()) {
IALOAN4 = Byte.parseByte(s);
} else {
IALOAN4 = Byte.MIN_VALUE;
}
}

protected final void initIALOE(String s) {
if (!s.trim().isEmpty()) {
IALOE = Byte.parseByte(s);
} else {
IALOE = Byte.MIN_VALUE;
}
}

protected final void initIALOL(String s) {
if (!s.trim().isEmpty()) {
IALOL = Short.parseShort(s);
} else {
IALOL = Short.MIN_VALUE;
}
}

protected final void initIALOR(String s) {
if (!s.trim().isEmpty()) {
IALOR = Byte.parseByte(s);
} else {
IALOR = Byte.MIN_VALUE;
}
}

protected final void initIALOU(String s) {
if (!s.trim().isEmpty()) {
IALOU = Short.parseShort(s);
} else {
IALOU = Short.MIN_VALUE;
}
}

protected final void initIALRFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALRFE = false;
} else {
IALRFE = true;
}
}
}

protected final void initIALRFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALRFL = false;
} else {
IALRFL = true;
}
}
}

protected final void initIALRFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALRFR = false;
} else {
IALRFR = true;
}
}
}

protected final void initIALRFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALRFU = false;
} else {
IALRFU = true;
}
}
}

protected final void initIALRME(String s) {
if (!s.trim().isEmpty()) {
IALRME = Byte.parseByte(s);
} else {
IALRME = Byte.MIN_VALUE;
}
}

protected final void initIALRML(String s) {
if (!s.trim().isEmpty()) {
IALRML = Short.parseShort(s);
} else {
IALRML = Short.MIN_VALUE;
}
}

protected final void initIALRMR(String s) {
if (!s.trim().isEmpty()) {
IALRMR = Byte.parseByte(s);
} else {
IALRMR = Byte.MIN_VALUE;
}
}

protected final void initIALRMU(String s) {
if (!s.trim().isEmpty()) {
IALRMU = Short.parseShort(s);
} else {
IALRMU = Short.MIN_VALUE;
}
}

protected final void initIALROE(String s) {
if (!s.trim().isEmpty()) {
IALROE = Byte.parseByte(s);
} else {
IALROE = Byte.MIN_VALUE;
}
}

protected final void initIALROL(String s) {
if (!s.trim().isEmpty()) {
IALROL = Short.parseShort(s);
} else {
IALROL = Short.MIN_VALUE;
}
}

protected final void initIALROR(String s) {
if (!s.trim().isEmpty()) {
IALROR = Byte.parseByte(s);
} else {
IALROR = Byte.MIN_VALUE;
}
}

protected final void initIALROU(String s) {
if (!s.trim().isEmpty()) {
IALROU = Short.parseShort(s);
} else {
IALROU = Short.MIN_VALUE;
}
}

protected final void initIALRWE(String s) {
if (!s.trim().isEmpty()) {
IALRWE = Byte.parseByte(s);
} else {
IALRWE = Byte.MIN_VALUE;
}
}

protected final void initIALRWL(String s) {
if (!s.trim().isEmpty()) {
IALRWL = Byte.parseByte(s);
} else {
IALRWL = Byte.MIN_VALUE;
}
}

protected final void initIALRWR(String s) {
if (!s.trim().isEmpty()) {
IALRWR = Byte.parseByte(s);
} else {
IALRWR = Byte.MIN_VALUE;
}
}

protected final void initIALRWU(String s) {
if (!s.trim().isEmpty()) {
IALRWU = Byte.parseByte(s);
} else {
IALRWU = Byte.MIN_VALUE;
}
}

protected final void initIALRYE(String s) {
if (!s.trim().isEmpty()) {
IALRYE = Byte.parseByte(s);
} else {
IALRYE = Byte.MIN_VALUE;
}
}

protected final void initIALRYL(String s) {
if (!s.trim().isEmpty()) {
IALRYL = Short.parseShort(s);
} else {
IALRYL = Short.MIN_VALUE;
}
}

protected final void initIALRYR(String s) {
if (!s.trim().isEmpty()) {
IALRYR = Byte.parseByte(s);
} else {
IALRYR = Byte.MIN_VALUE;
}
}

protected final void initIALRYU(String s) {
if (!s.trim().isEmpty()) {
IALRYU = Short.parseShort(s);
} else {
IALRYU = Short.MIN_VALUE;
}
}

protected final void initIALY(String s) {
if (!s.trim().isEmpty()) {
IALY = Byte.parseByte(s);
} else {
IALY = Byte.MIN_VALUE;
}
}

protected final void initIALY10(String s) {
if (!s.trim().isEmpty()) {
IALY10 = Byte.parseByte(s);
} else {
IALY10 = Byte.MIN_VALUE;
}
}

protected final void initIALY2(String s) {
if (!s.trim().isEmpty()) {
IALY2 = Byte.parseByte(s);
} else {
IALY2 = Byte.MIN_VALUE;
}
}

protected final void initIALY21(String s) {
if (!s.trim().isEmpty()) {
IALY21 = Byte.parseByte(s);
} else {
IALY21 = Byte.MIN_VALUE;
}
}

protected final void initIALY22(String s) {
if (!s.trim().isEmpty()) {
IALY22 = Byte.parseByte(s);
} else {
IALY22 = Byte.MIN_VALUE;
}
}

protected final void initIALY23(String s) {
if (!s.trim().isEmpty()) {
IALY23 = Byte.parseByte(s);
} else {
IALY23 = Byte.MIN_VALUE;
}
}

protected final void initIALY24(String s) {
if (!s.trim().isEmpty()) {
IALY24 = Byte.parseByte(s);
} else {
IALY24 = Byte.MIN_VALUE;
}
}

protected final void initIALY25(String s) {
if (!s.trim().isEmpty()) {
IALY25 = Byte.parseByte(s);
} else {
IALY25 = Byte.MIN_VALUE;
}
}

protected final void initIALY26(String s) {
if (!s.trim().isEmpty()) {
IALY26 = Byte.parseByte(s);
} else {
IALY26 = Byte.MIN_VALUE;
}
}

protected final void initIALY27(String s) {
if (!s.trim().isEmpty()) {
IALY27 = Byte.parseByte(s);
} else {
IALY27 = Byte.MIN_VALUE;
}
}

protected final void initIALY28(String s) {
if (!s.trim().isEmpty()) {
IALY28 = Byte.parseByte(s);
} else {
IALY28 = Byte.MIN_VALUE;
}
}

protected final void initIALY29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALY29 = false;
} else {
IALY29 = true;
}
}
}

protected final void initIALY3(String s) {
if (!s.trim().isEmpty()) {
IALY3 = Byte.parseByte(s);
} else {
IALY3 = Byte.MIN_VALUE;
}
}

protected final void initIALY30(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALY30 = false;
} else {
IALY30 = true;
}
}
}

protected final void initIALY4(String s) {
if (!s.trim().isEmpty()) {
IALY4 = Byte.parseByte(s);
} else {
IALY4 = Byte.MIN_VALUE;
}
}

protected final void initIALY41(String s) {
if (!s.trim().isEmpty()) {
IALY41 = Byte.parseByte(s);
} else {
IALY41 = Byte.MIN_VALUE;
}
}

protected final void initIALY42(String s) {
if (!s.trim().isEmpty()) {
IALY42 = Byte.parseByte(s);
} else {
IALY42 = Byte.MIN_VALUE;
}
}

protected final void initIALY43(String s) {
if (!s.trim().isEmpty()) {
IALY43 = Byte.parseByte(s);
} else {
IALY43 = Byte.MIN_VALUE;
}
}

protected final void initIALY44(String s) {
if (!s.trim().isEmpty()) {
IALY44 = Byte.parseByte(s);
} else {
IALY44 = Byte.MIN_VALUE;
}
}

protected final void initIALY45(String s) {
if (!s.trim().isEmpty()) {
IALY45 = Byte.parseByte(s);
} else {
IALY45 = Byte.MIN_VALUE;
}
}

protected final void initIALY46(String s) {
if (!s.trim().isEmpty()) {
IALY46 = Byte.parseByte(s);
} else {
IALY46 = Byte.MIN_VALUE;
}
}

protected final void initIALY47(String s) {
if (!s.trim().isEmpty()) {
IALY47 = Byte.parseByte(s);
} else {
IALY47 = Byte.MIN_VALUE;
}
}

protected final void initIALY5(String s) {
if (!s.trim().isEmpty()) {
IALY5 = Byte.parseByte(s);
} else {
IALY5 = Byte.MIN_VALUE;
}
}

protected final void initIALY55(String s) {
if (!s.trim().isEmpty()) {
IALY55 = Byte.parseByte(s);
} else {
IALY55 = Byte.MIN_VALUE;
}
}

protected final void initIALY56(String s) {
if (!s.trim().isEmpty()) {
IALY56 = Byte.parseByte(s);
} else {
IALY56 = Byte.MIN_VALUE;
}
}

protected final void initIALY57(String s) {
if (!s.trim().isEmpty()) {
IALY57 = Byte.parseByte(s);
} else {
IALY57 = Byte.MIN_VALUE;
}
}

protected final void initIALY58(String s) {
if (!s.trim().isEmpty()) {
IALY58 = Byte.parseByte(s);
} else {
IALY58 = Byte.MIN_VALUE;
}
}

protected final void initIALY59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALY59 = false;
} else {
IALY59 = true;
}
}
}

protected final void initIALY6(String s) {
if (!s.trim().isEmpty()) {
IALY6 = Byte.parseByte(s);
} else {
IALY6 = Byte.MIN_VALUE;
}
}

protected final void initIALY60(String s) {
if (!s.trim().isEmpty()) {
IALY60 = Byte.parseByte(s);
} else {
IALY60 = Byte.MIN_VALUE;
}
}

protected final void initIALY61(String s) {
if (!s.trim().isEmpty()) {
IALY61 = Byte.parseByte(s);
} else {
IALY61 = Byte.MIN_VALUE;
}
}

protected final void initIALY7(String s) {
if (!s.trim().isEmpty()) {
IALY7 = Byte.parseByte(s);
} else {
IALY7 = Byte.MIN_VALUE;
}
}

protected final void initIALY8(String s) {
if (!s.trim().isEmpty()) {
IALY8 = Byte.parseByte(s);
} else {
IALY8 = Byte.MIN_VALUE;
}
}

protected final void initIALY9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALY9 = false;
} else {
IALY9 = true;
}
}
}

protected final void initIANPE(String s) {
if (!s.trim().isEmpty()) {
IANPE = Byte.parseByte(s);
} else {
IANPE = Byte.MIN_VALUE;
}
}

protected final void initIANPL(String s) {
if (!s.trim().isEmpty()) {
IANPL = Short.parseShort(s);
} else {
IANPL = Short.MIN_VALUE;
}
}

protected final void initIANPR(String s) {
if (!s.trim().isEmpty()) {
IANPR = Byte.parseByte(s);
} else {
IANPR = Byte.MIN_VALUE;
}
}

protected final void initIANPU(String s) {
if (!s.trim().isEmpty()) {
IANPU = Short.parseShort(s);
} else {
IANPU = Short.MIN_VALUE;
}
}

protected final void initIAOAE(String s) {
if (!s.trim().isEmpty()) {
IAOAE = Byte.parseByte(s);
} else {
IAOAE = Byte.MIN_VALUE;
}
}

protected final void initIAOAL(String s) {
if (!s.trim().isEmpty()) {
IAOAL = Integer.parseInt(s);
} else {
IAOAL = Integer.MIN_VALUE;
}
}

protected final void initIAOAR(String s) {
if (!s.trim().isEmpty()) {
IAOAR = Byte.parseByte(s);
} else {
IAOAR = Byte.MIN_VALUE;
}
}

protected final void initIAOAU(String s) {
if (!s.trim().isEmpty()) {
IAOAU = Integer.parseInt(s);
} else {
IAOAU = Integer.MIN_VALUE;
}
}

protected final void initIAOME(String s) {
if (!s.trim().isEmpty()) {
IAOME = Byte.parseByte(s);
} else {
IAOME = Byte.MIN_VALUE;
}
}

protected final void initIAOML(String s) {
if (!s.trim().isEmpty()) {
IAOML = Integer.parseInt(s);
} else {
IAOML = Integer.MIN_VALUE;
}
}

protected final void initIAOMR(String s) {
if (!s.trim().isEmpty()) {
IAOMR = Byte.parseByte(s);
} else {
IAOMR = Byte.MIN_VALUE;
}
}

protected final void initIAOMU(String s) {
if (!s.trim().isEmpty()) {
IAOMU = Integer.parseInt(s);
} else {
IAOMU = Integer.MIN_VALUE;
}
}

protected final void initIAORGFC(String s) {
if (!s.trim().isEmpty()) {
IAORGFC = Byte.parseByte(s);
} else {
IAORGFC = Byte.MIN_VALUE;
}
}

protected final void initIAOTHP3(String s) {
if (!s.trim().isEmpty()) {
IAOTHP3 = Byte.parseByte(s);
} else {
IAOTHP3 = Byte.MIN_VALUE;
}
}

protected final void initIAOWEE(String s) {
if (!s.trim().isEmpty()) {
IAOWEE = Byte.parseByte(s);
} else {
IAOWEE = Byte.MIN_VALUE;
}
}

protected final void initIAOWEL(String s) {
if (!s.trim().isEmpty()) {
IAOWEL = Short.parseShort(s);
} else {
IAOWEL = Short.MIN_VALUE;
}
}

protected final void initIAOWER(String s) {
if (!s.trim().isEmpty()) {
IAOWER = Byte.parseByte(s);
} else {
IAOWER = Byte.MIN_VALUE;
}
}

protected final void initIAOWEU(String s) {
if (!s.trim().isEmpty()) {
IAOWEU = Short.parseShort(s);
} else {
IAOWEU = Short.MIN_VALUE;
}
}

protected final void initIAP39(String s) {
if (!s.trim().isEmpty()) {
IAP39 = Byte.parseByte(s);
} else {
IAP39 = Byte.MIN_VALUE;
}
}

protected final void initIAP40(String s) {
if (!s.trim().isEmpty()) {
IAP40 = Byte.parseByte(s);
} else {
IAP40 = Byte.MIN_VALUE;
}
}

protected final void initIAP41(String s) {
if (!s.trim().isEmpty()) {
IAP41 = Byte.parseByte(s);
} else {
IAP41 = Byte.MIN_VALUE;
}
}

protected final void initIAP42(String s) {
if (!s.trim().isEmpty()) {
IAP42 = Byte.parseByte(s);
} else {
IAP42 = Byte.MIN_VALUE;
}
}

protected final void initIAP43(String s) {
if (!s.trim().isEmpty()) {
IAP43 = Byte.parseByte(s);
} else {
IAP43 = Byte.MIN_VALUE;
}
}

protected final void initIAP44(String s) {
if (!s.trim().isEmpty()) {
IAP44 = Byte.parseByte(s);
} else {
IAP44 = Byte.MIN_VALUE;
}
}

protected final void initIAP45(String s) {
if (!s.trim().isEmpty()) {
IAP45 = Byte.parseByte(s);
} else {
IAP45 = Byte.MIN_VALUE;
}
}

protected final void initIAP46(String s) {
if (!s.trim().isEmpty()) {
IAP46 = Byte.parseByte(s);
} else {
IAP46 = Byte.MIN_VALUE;
}
}

protected final void initIAP47(String s) {
if (!s.trim().isEmpty()) {
IAP47 = Byte.parseByte(s);
} else {
IAP47 = Byte.MIN_VALUE;
}
}

protected final void initIAP48(String s) {
if (!s.trim().isEmpty()) {
IAP48 = Byte.parseByte(s);
} else {
IAP48 = Byte.MIN_VALUE;
}
}

protected final void initIAP49(String s) {
if (!s.trim().isEmpty()) {
IAP49 = Byte.parseByte(s);
} else {
IAP49 = Byte.MIN_VALUE;
}
}

protected final void initIAP50(String s) {
if (!s.trim().isEmpty()) {
IAP50 = Byte.parseByte(s);
} else {
IAP50 = Byte.MIN_VALUE;
}
}

protected final void initIAP51(String s) {
if (!s.trim().isEmpty()) {
IAP51 = Byte.parseByte(s);
} else {
IAP51 = Byte.MIN_VALUE;
}
}

protected final void initIAP52(String s) {
if (!s.trim().isEmpty()) {
IAP52 = Byte.parseByte(s);
} else {
IAP52 = Byte.MIN_VALUE;
}
}

protected final void initIAP53(String s) {
if (!s.trim().isEmpty()) {
IAP53 = Byte.parseByte(s);
} else {
IAP53 = Byte.MIN_VALUE;
}
}

protected final void initIAP54(String s) {
if (!s.trim().isEmpty()) {
IAP54 = Byte.parseByte(s);
} else {
IAP54 = Byte.MIN_VALUE;
}
}

protected final void initIAP55(String s) {
if (!s.trim().isEmpty()) {
IAP55 = Byte.parseByte(s);
} else {
IAP55 = Byte.MIN_VALUE;
}
}

protected final void initIAP56(String s) {
if (!s.trim().isEmpty()) {
IAP56 = Byte.parseByte(s);
} else {
IAP56 = Byte.MIN_VALUE;
}
}

protected final void initIAP57(String s) {
if (!s.trim().isEmpty()) {
IAP57 = Byte.parseByte(s);
} else {
IAP57 = Byte.MIN_VALUE;
}
}

protected final void initIAP58(String s) {
if (!s.trim().isEmpty()) {
IAP58 = Byte.parseByte(s);
} else {
IAP58 = Byte.MIN_VALUE;
}
}

protected final void initIAP59(String s) {
if (!s.trim().isEmpty()) {
IAP59 = Byte.parseByte(s);
} else {
IAP59 = Byte.MIN_VALUE;
}
}

protected final void initIAP60(String s) {
if (!s.trim().isEmpty()) {
IAP60 = Byte.parseByte(s);
} else {
IAP60 = Byte.MIN_VALUE;
}
}

protected final void initIAP61(String s) {
if (!s.trim().isEmpty()) {
IAP61 = Byte.parseByte(s);
} else {
IAP61 = Byte.MIN_VALUE;
}
}

protected final void initIAP62(String s) {
if (!s.trim().isEmpty()) {
IAP62 = Byte.parseByte(s);
} else {
IAP62 = Byte.MIN_VALUE;
}
}

protected final void initIAP63(String s) {
if (!s.trim().isEmpty()) {
IAP63 = Byte.parseByte(s);
} else {
IAP63 = Byte.MIN_VALUE;
}
}

protected final void initIAP64(String s) {
if (!s.trim().isEmpty()) {
IAP64 = Byte.parseByte(s);
} else {
IAP64 = Byte.MIN_VALUE;
}
}

protected final void initIAP65(String s) {
if (!s.trim().isEmpty()) {
IAP65 = Byte.parseByte(s);
} else {
IAP65 = Byte.MIN_VALUE;
}
}

protected final void initIAP66(String s) {
if (!s.trim().isEmpty()) {
IAP66 = Byte.parseByte(s);
} else {
IAP66 = Byte.MIN_VALUE;
}
}

protected final void initIAP67(String s) {
if (!s.trim().isEmpty()) {
IAP67 = Byte.parseByte(s);
} else {
IAP67 = Byte.MIN_VALUE;
}
}

protected final void initIAP68(String s) {
if (!s.trim().isEmpty()) {
IAP68 = Byte.parseByte(s);
} else {
IAP68 = Byte.MIN_VALUE;
}
}

protected final void initIAPK1(String s) {
if (!s.trim().isEmpty()) {
IAPK1 = Byte.parseByte(s);
} else {
IAPK1 = Byte.MIN_VALUE;
}
}

protected final void initIAPK1E(String s) {
if (!s.trim().isEmpty()) {
IAPK1E = Byte.parseByte(s);
} else {
IAPK1E = Byte.MIN_VALUE;
}
}

protected final void initIAPK1L(String s) {
if (!s.trim().isEmpty()) {
IAPK1L = Short.parseShort(s);
} else {
IAPK1L = Short.MIN_VALUE;
}
}

protected final void initIAPK1R(String s) {
if (!s.trim().isEmpty()) {
IAPK1R = Byte.parseByte(s);
} else {
IAPK1R = Byte.MIN_VALUE;
}
}

protected final void initIAPK1U(String s) {
if (!s.trim().isEmpty()) {
IAPK1U = Integer.parseInt(s);
} else {
IAPK1U = Integer.MIN_VALUE;
}
}

protected final void initIAPK2(String s) {
if (!s.trim().isEmpty()) {
IAPK2 = Byte.parseByte(s);
} else {
IAPK2 = Byte.MIN_VALUE;
}
}

protected final void initIAPK2E(String s) {
if (!s.trim().isEmpty()) {
IAPK2E = Byte.parseByte(s);
} else {
IAPK2E = Byte.MIN_VALUE;
}
}

protected final void initIAPK2L(String s) {
if (!s.trim().isEmpty()) {
IAPK2L = Short.parseShort(s);
} else {
IAPK2L = Short.MIN_VALUE;
}
}

protected final void initIAPK2R(String s) {
if (!s.trim().isEmpty()) {
IAPK2R = Byte.parseByte(s);
} else {
IAPK2R = Byte.MIN_VALUE;
}
}

protected final void initIAPK2U(String s) {
if (!s.trim().isEmpty()) {
IAPK2U = Integer.parseInt(s);
} else {
IAPK2U = Integer.MIN_VALUE;
}
}

protected final void initIAPK3(String s) {
if (!s.trim().isEmpty()) {
IAPK3 = Byte.parseByte(s);
} else {
IAPK3 = Byte.MIN_VALUE;
}
}

protected final void initIAPK3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPK3E = false;
} else {
IAPK3E = true;
}
}
}

protected final void initIAPK3L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPK3L = false;
} else {
IAPK3L = true;
}
}
}

protected final void initIAPK3R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPK3R = false;
} else {
IAPK3R = true;
}
}
}

protected final void initIAPK3U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPK3U = false;
} else {
IAPK3U = true;
}
}
}

protected final void initIAPK4(String s) {
if (!s.trim().isEmpty()) {
IAPK4 = Byte.parseByte(s);
} else {
IAPK4 = Byte.MIN_VALUE;
}
}

protected final void initIAPK4E(String s) {
if (!s.trim().isEmpty()) {
IAPK4E = Byte.parseByte(s);
} else {
IAPK4E = Byte.MIN_VALUE;
}
}

protected final void initIAPK4L(String s) {
if (!s.trim().isEmpty()) {
IAPK4L = Short.parseShort(s);
} else {
IAPK4L = Short.MIN_VALUE;
}
}

protected final void initIAPK4R(String s) {
if (!s.trim().isEmpty()) {
IAPK4R = Byte.parseByte(s);
} else {
IAPK4R = Byte.MIN_VALUE;
}
}

protected final void initIAPK4U(String s) {
if (!s.trim().isEmpty()) {
IAPK4U = Short.parseShort(s);
} else {
IAPK4U = Short.MIN_VALUE;
}
}

protected final void initIAPK5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPK5 = false;
} else {
IAPK5 = true;
}
}
}

protected final void initIAPK5E(String s) {
if (!s.trim().isEmpty()) {
IAPK5E = Byte.parseByte(s);
} else {
IAPK5E = Byte.MIN_VALUE;
}
}

protected final void initIAPK5L(String s) {
if (!s.trim().isEmpty()) {
IAPK5L = Integer.parseInt(s);
} else {
IAPK5L = Integer.MIN_VALUE;
}
}

protected final void initIAPK5R(String s) {
if (!s.trim().isEmpty()) {
IAPK5R = Byte.parseByte(s);
} else {
IAPK5R = Byte.MIN_VALUE;
}
}

protected final void initIAPK5U(String s) {
if (!s.trim().isEmpty()) {
IAPK5U = Short.parseShort(s);
} else {
IAPK5U = Short.MIN_VALUE;
}
}

protected final void initIAPK6E(String s) {
if (!s.trim().isEmpty()) {
IAPK6E = Byte.parseByte(s);
} else {
IAPK6E = Byte.MIN_VALUE;
}
}

protected final void initIAPK6L(String s) {
if (!s.trim().isEmpty()) {
IAPK6L = Integer.parseInt(s);
} else {
IAPK6L = Integer.MIN_VALUE;
}
}

protected final void initIAPK6R(String s) {
if (!s.trim().isEmpty()) {
IAPK6R = Byte.parseByte(s);
} else {
IAPK6R = Byte.MIN_VALUE;
}
}

protected final void initIAPK6U(String s) {
if (!s.trim().isEmpty()) {
IAPK6U = Integer.parseInt(s);
} else {
IAPK6U = Integer.MIN_VALUE;
}
}

protected final void initIAPK7E(String s) {
if (!s.trim().isEmpty()) {
IAPK7E = Byte.parseByte(s);
} else {
IAPK7E = Byte.MIN_VALUE;
}
}

protected final void initIAPK7L(String s) {
if (!s.trim().isEmpty()) {
IAPK7L = Byte.parseByte(s);
} else {
IAPK7L = Byte.MIN_VALUE;
}
}

protected final void initIAPK7R(String s) {
if (!s.trim().isEmpty()) {
IAPK7R = Byte.parseByte(s);
} else {
IAPK7R = Byte.MIN_VALUE;
}
}

protected final void initIAPK7U(String s) {
if (!s.trim().isEmpty()) {
IAPK7U = Short.parseShort(s);
} else {
IAPK7U = Short.MIN_VALUE;
}
}

protected final void initIAPK8E(String s) {
if (!s.trim().isEmpty()) {
IAPK8E = Byte.parseByte(s);
} else {
IAPK8E = Byte.MIN_VALUE;
}
}

protected final void initIAPK8L(String s) {
if (!s.trim().isEmpty()) {
IAPK8L = Short.parseShort(s);
} else {
IAPK8L = Short.MIN_VALUE;
}
}

protected final void initIAPK8R(String s) {
if (!s.trim().isEmpty()) {
IAPK8R = Byte.parseByte(s);
} else {
IAPK8R = Byte.MIN_VALUE;
}
}

protected final void initIAPK8U(String s) {
if (!s.trim().isEmpty()) {
IAPK8U = Short.parseShort(s);
} else {
IAPK8U = Short.MIN_VALUE;
}
}

protected final void initIAPKM01(String s) {
if (!s.trim().isEmpty()) {
IAPKM01 = Byte.parseByte(s);
} else {
IAPKM01 = Byte.MIN_VALUE;
}
}

protected final void initIAPKM02(String s) {
if (!s.trim().isEmpty()) {
IAPKM02 = Byte.parseByte(s);
} else {
IAPKM02 = Byte.MIN_VALUE;
}
}

protected final void initIAPKM03(String s) {
if (!s.trim().isEmpty()) {
IAPKM03 = Byte.parseByte(s);
} else {
IAPKM03 = Byte.MIN_VALUE;
}
}

protected final void initIAPKM04(String s) {
if (!s.trim().isEmpty()) {
IAPKM04 = Byte.parseByte(s);
} else {
IAPKM04 = Byte.MIN_VALUE;
}
}

protected final void initIAPKM05(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPKM05 = false;
} else {
IAPKM05 = true;
}
}
}

protected final void initIAPLW(String s) {
if (!s.trim().isEmpty()) {
IAPLW = Byte.parseByte(s);
} else {
IAPLW = Byte.MIN_VALUE;
}
}

protected final void initIAPLY(String s) {
if (!s.trim().isEmpty()) {
IAPLY = Byte.parseByte(s);
} else {
IAPLY = Byte.MIN_VALUE;
}
}

protected final void initIAPLYP(String s) {
if (!s.trim().isEmpty()) {
IAPLYP = Byte.parseByte(s);
} else {
IAPLYP = Byte.MIN_VALUE;
}
}

protected final void initIAPLYW(String s) {
if (!s.trim().isEmpty()) {
IAPLYW = Byte.parseByte(s);
} else {
IAPLYW = Byte.MIN_VALUE;
}
}

protected final void initIAPPE(String s) {
if (!s.trim().isEmpty()) {
IAPPE = Byte.parseByte(s);
} else {
IAPPE = Byte.MIN_VALUE;
}
}

protected final void initIAPPFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPPFE = false;
} else {
IAPPFE = true;
}
}
}

protected final void initIAPPFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPPFL = false;
} else {
IAPPFL = true;
}
}
}

protected final void initIAPPFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPPFR = false;
} else {
IAPPFR = true;
}
}
}

protected final void initIAPPFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPPFU = false;
} else {
IAPPFU = true;
}
}
}

protected final void initIAPPL(String s) {
if (!s.trim().isEmpty()) {
IAPPL = Short.parseShort(s);
} else {
IAPPL = Short.MIN_VALUE;
}
}

protected final void initIAPPME(String s) {
if (!s.trim().isEmpty()) {
IAPPME = Byte.parseByte(s);
} else {
IAPPME = Byte.MIN_VALUE;
}
}

protected final void initIAPPML(String s) {
if (!s.trim().isEmpty()) {
IAPPML = Short.parseShort(s);
} else {
IAPPML = Short.MIN_VALUE;
}
}

protected final void initIAPPMR(String s) {
if (!s.trim().isEmpty()) {
IAPPMR = Byte.parseByte(s);
} else {
IAPPMR = Byte.MIN_VALUE;
}
}

protected final void initIAPPMU(String s) {
if (!s.trim().isEmpty()) {
IAPPMU = Short.parseShort(s);
} else {
IAPPMU = Short.MIN_VALUE;
}
}

protected final void initIAPPOE(String s) {
if (!s.trim().isEmpty()) {
IAPPOE = Byte.parseByte(s);
} else {
IAPPOE = Byte.MIN_VALUE;
}
}

protected final void initIAPPOL(String s) {
if (!s.trim().isEmpty()) {
IAPPOL = Short.parseShort(s);
} else {
IAPPOL = Short.MIN_VALUE;
}
}

protected final void initIAPPOR(String s) {
if (!s.trim().isEmpty()) {
IAPPOR = Byte.parseByte(s);
} else {
IAPPOR = Byte.MIN_VALUE;
}
}

protected final void initIAPPOU(String s) {
if (!s.trim().isEmpty()) {
IAPPOU = Short.parseShort(s);
} else {
IAPPOU = Short.MIN_VALUE;
}
}

protected final void initIAPPR(String s) {
if (!s.trim().isEmpty()) {
IAPPR = Byte.parseByte(s);
} else {
IAPPR = Byte.MIN_VALUE;
}
}

protected final void initIAPPU(String s) {
if (!s.trim().isEmpty()) {
IAPPU = Short.parseShort(s);
} else {
IAPPU = Short.MIN_VALUE;
}
}

protected final void initIAPPWE(String s) {
if (!s.trim().isEmpty()) {
IAPPWE = Byte.parseByte(s);
} else {
IAPPWE = Byte.MIN_VALUE;
}
}

protected final void initIAPPWL(String s) {
if (!s.trim().isEmpty()) {
IAPPWL = Byte.parseByte(s);
} else {
IAPPWL = Byte.MIN_VALUE;
}
}

protected final void initIAPPWR(String s) {
if (!s.trim().isEmpty()) {
IAPPWR = Byte.parseByte(s);
} else {
IAPPWR = Byte.MIN_VALUE;
}
}

protected final void initIAPPWU(String s) {
if (!s.trim().isEmpty()) {
IAPPWU = Byte.parseByte(s);
} else {
IAPPWU = Byte.MIN_VALUE;
}
}

protected final void initIAPPYE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPPYE = false;
} else {
IAPPYE = true;
}
}
}

protected final void initIAPPYL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPPYL = false;
} else {
IAPPYL = true;
}
}
}

protected final void initIAPPYR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPPYR = false;
} else {
IAPPYR = true;
}
}
}

protected final void initIAPPYU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPPYU = false;
} else {
IAPPYU = true;
}
}
}

protected final void initIAPRC(String s) {
if (!s.trim().isEmpty()) {
IAPRC = Byte.parseByte(s);
} else {
IAPRC = Byte.MIN_VALUE;
}
}

protected final void initIAPROP1(String s) {
if (!s.trim().isEmpty()) {
IAPROP1 = Byte.parseByte(s);
} else {
IAPROP1 = Byte.MIN_VALUE;
}
}

protected final void initIAPROP2(String s) {
if (!s.trim().isEmpty()) {
IAPROP2 = Byte.parseByte(s);
} else {
IAPROP2 = Byte.MIN_VALUE;
}
}

protected final void initIAPROP3(String s) {
if (!s.trim().isEmpty()) {
IAPROP3 = Byte.parseByte(s);
} else {
IAPROP3 = Byte.MIN_VALUE;
}
}

protected final void initIAPROP4(String s) {
if (!s.trim().isEmpty()) {
IAPROP4 = Byte.parseByte(s);
} else {
IAPROP4 = Byte.MIN_VALUE;
}
}

protected final void initIAPROP5(String s) {
if (!s.trim().isEmpty()) {
IAPROP5 = Byte.parseByte(s);
} else {
IAPROP5 = Byte.MIN_VALUE;
}
}

protected final void initIAPY2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPY2 = false;
} else {
IAPY2 = true;
}
}
}

protected final void initIAPY3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPY3 = false;
} else {
IAPY3 = true;
}
}
}

protected final void initIAPYR(String s) {
if (!s.trim().isEmpty()) {
IAPYR = Byte.parseByte(s);
} else {
IAPYR = Byte.MIN_VALUE;
}
}

protected final void initIAPYR2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPYR2 = false;
} else {
IAPYR2 = true;
}
}
}

protected final void initIAPYR2C(String s) {
if (!s.trim().isEmpty()) {
IAPYR2C = Byte.parseByte(s);
} else {
IAPYR2C = Byte.MIN_VALUE;
}
}

protected final void initIAPYR3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPYR3 = false;
} else {
IAPYR3 = true;
}
}
}

protected final void initIAPYRC(String s) {
if (!s.trim().isEmpty()) {
IAPYRC = Byte.parseByte(s);
} else {
IAPYRC = Byte.MIN_VALUE;
}
}

protected final void initIAPYW02(String s) {
if (!s.trim().isEmpty()) {
IAPYW02 = Byte.parseByte(s);
} else {
IAPYW02 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW03(String s) {
if (!s.trim().isEmpty()) {
IAPYW03 = Byte.parseByte(s);
} else {
IAPYW03 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW04(String s) {
if (!s.trim().isEmpty()) {
IAPYW04 = Byte.parseByte(s);
} else {
IAPYW04 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW05(String s) {
if (!s.trim().isEmpty()) {
IAPYW05 = Byte.parseByte(s);
} else {
IAPYW05 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW06(String s) {
if (!s.trim().isEmpty()) {
IAPYW06 = Byte.parseByte(s);
} else {
IAPYW06 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW07(String s) {
if (!s.trim().isEmpty()) {
IAPYW07 = Byte.parseByte(s);
} else {
IAPYW07 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW08(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPYW08 = false;
} else {
IAPYW08 = true;
}
}
}

protected final void initIAPYW09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPYW09 = false;
} else {
IAPYW09 = true;
}
}
}

protected final void initIARE2FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2FE = false;
} else {
IARE2FE = true;
}
}
}

protected final void initIARE2FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2FL = false;
} else {
IARE2FL = true;
}
}
}

protected final void initIARE2FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2FR = false;
} else {
IARE2FR = true;
}
}
}

protected final void initIARE2FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2FU = false;
} else {
IARE2FU = true;
}
}
}

protected final void initIARE2ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2ME = false;
} else {
IARE2ME = true;
}
}
}

protected final void initIARE2ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2ML = false;
} else {
IARE2ML = true;
}
}
}

protected final void initIARE2MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2MR = false;
} else {
IARE2MR = true;
}
}
}

protected final void initIARE2MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2MU = false;
} else {
IARE2MU = true;
}
}
}

protected final void initIARE2OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2OE = false;
} else {
IARE2OE = true;
}
}
}

protected final void initIARE2OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2OL = false;
} else {
IARE2OL = true;
}
}
}

protected final void initIARE2OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2OR = false;
} else {
IARE2OR = true;
}
}
}

protected final void initIARE2OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2OU = false;
} else {
IARE2OU = true;
}
}
}

protected final void initIARE2WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2WE = false;
} else {
IARE2WE = true;
}
}
}

protected final void initIARE2WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2WL = false;
} else {
IARE2WL = true;
}
}
}

protected final void initIARE2WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2WR = false;
} else {
IARE2WR = true;
}
}
}

protected final void initIARE2WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2WU = false;
} else {
IARE2WU = true;
}
}
}

protected final void initIARE2YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2YE = false;
} else {
IARE2YE = true;
}
}
}

protected final void initIARE2YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2YL = false;
} else {
IARE2YL = true;
}
}
}

protected final void initIARE2YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2YR = false;
} else {
IARE2YR = true;
}
}
}

protected final void initIARE2YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE2YU = false;
} else {
IARE2YU = true;
}
}
}

protected final void initIARE3FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3FE = false;
} else {
IARE3FE = true;
}
}
}

protected final void initIARE3FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3FL = false;
} else {
IARE3FL = true;
}
}
}

protected final void initIARE3FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3FR = false;
} else {
IARE3FR = true;
}
}
}

protected final void initIARE3FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3FU = false;
} else {
IARE3FU = true;
}
}
}

protected final void initIARE3ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3ME = false;
} else {
IARE3ME = true;
}
}
}

protected final void initIARE3ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3ML = false;
} else {
IARE3ML = true;
}
}
}

protected final void initIARE3MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3MR = false;
} else {
IARE3MR = true;
}
}
}

protected final void initIARE3MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3MU = false;
} else {
IARE3MU = true;
}
}
}

protected final void initIARE3OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3OE = false;
} else {
IARE3OE = true;
}
}
}

protected final void initIARE3OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3OL = false;
} else {
IARE3OL = true;
}
}
}

protected final void initIARE3OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3OR = false;
} else {
IARE3OR = true;
}
}
}

protected final void initIARE3OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3OU = false;
} else {
IARE3OU = true;
}
}
}

protected final void initIARE3WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3WE = false;
} else {
IARE3WE = true;
}
}
}

protected final void initIARE3WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3WL = false;
} else {
IARE3WL = true;
}
}
}

protected final void initIARE3WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3WR = false;
} else {
IARE3WR = true;
}
}
}

protected final void initIARE3WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3WU = false;
} else {
IARE3WU = true;
}
}
}

protected final void initIARE3YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3YE = false;
} else {
IARE3YE = true;
}
}
}

protected final void initIARE3YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3YL = false;
} else {
IARE3YL = true;
}
}
}

protected final void initIARE3YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3YR = false;
} else {
IARE3YR = true;
}
}
}

protected final void initIARE3YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARE3YU = false;
} else {
IARE3YU = true;
}
}
}

protected final void initIAREE(String s) {
if (!s.trim().isEmpty()) {
IAREE = Byte.parseByte(s);
} else {
IAREE = Byte.MIN_VALUE;
}
}

protected final void initIAREFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREFE = false;
} else {
IAREFE = true;
}
}
}

protected final void initIAREFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREFL = false;
} else {
IAREFL = true;
}
}
}

protected final void initIAREFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREFR = false;
} else {
IAREFR = true;
}
}
}

protected final void initIAREFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREFU = false;
} else {
IAREFU = true;
}
}
}

protected final void initIAREGFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGFE = false;
} else {
IAREGFE = true;
}
}
}

protected final void initIAREGFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGFL = false;
} else {
IAREGFL = true;
}
}
}

protected final void initIAREGFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGFR = false;
} else {
IAREGFR = true;
}
}
}

protected final void initIAREGFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGFU = false;
} else {
IAREGFU = true;
}
}
}

protected final void initIAREGM3(String s) {
if (!s.trim().isEmpty()) {
IAREGM3 = Short.parseShort(s);
} else {
IAREGM3 = Short.MIN_VALUE;
}
}

protected final void initIAREGME(String s) {
if (!s.trim().isEmpty()) {
IAREGME = Byte.parseByte(s);
} else {
IAREGME = Byte.MIN_VALUE;
}
}

protected final void initIAREGML(String s) {
if (!s.trim().isEmpty()) {
IAREGML = Short.parseShort(s);
} else {
IAREGML = Short.MIN_VALUE;
}
}

protected final void initIAREGMR(String s) {
if (!s.trim().isEmpty()) {
IAREGMR = Byte.parseByte(s);
} else {
IAREGMR = Byte.MIN_VALUE;
}
}

protected final void initIAREGMU(String s) {
if (!s.trim().isEmpty()) {
IAREGMU = Short.parseShort(s);
} else {
IAREGMU = Short.MIN_VALUE;
}
}

protected final void initIAREGO3(String s) {
if (!s.trim().isEmpty()) {
IAREGO3 = Byte.parseByte(s);
} else {
IAREGO3 = Byte.MIN_VALUE;
}
}

protected final void initIAREGOE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGOE = false;
} else {
IAREGOE = true;
}
}
}

protected final void initIAREGOL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGOL = false;
} else {
IAREGOL = true;
}
}
}

protected final void initIAREGOR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGOR = false;
} else {
IAREGOR = true;
}
}
}

protected final void initIAREGOU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGOU = false;
} else {
IAREGOU = true;
}
}
}

protected final void initIAREGWE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGWE = false;
} else {
IAREGWE = true;
}
}
}

protected final void initIAREGWL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGWL = false;
} else {
IAREGWL = true;
}
}
}

protected final void initIAREGWR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGWR = false;
} else {
IAREGWR = true;
}
}
}

protected final void initIAREGWU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGWU = false;
} else {
IAREGWU = true;
}
}
}

protected final void initIAREGYE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGYE = false;
} else {
IAREGYE = true;
}
}
}

protected final void initIAREGYL(String s) {
if (!s.trim().isEmpty()) {
IAREGYL = Short.parseShort(s);
} else {
IAREGYL = Short.MIN_VALUE;
}
}

protected final void initIAREGYR(String s) {
if (!s.trim().isEmpty()) {
IAREGYR = Byte.parseByte(s);
} else {
IAREGYR = Byte.MIN_VALUE;
}
}

protected final void initIAREGYU(String s) {
if (!s.trim().isEmpty()) {
IAREGYU = Integer.parseInt(s);
} else {
IAREGYU = Integer.MIN_VALUE;
}
}

protected final void initIAREL(String s) {
if (!s.trim().isEmpty()) {
IAREL = Short.parseShort(s);
} else {
IAREL = Short.MIN_VALUE;
}
}

protected final void initIAREME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREME = false;
} else {
IAREME = true;
}
}
}

protected final void initIAREML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREML = false;
} else {
IAREML = true;
}
}
}

protected final void initIAREMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREMR = false;
} else {
IAREMR = true;
}
}
}

protected final void initIAREMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREMU = false;
} else {
IAREMU = true;
}
}
}

protected final void initIAREOE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREOE = false;
} else {
IAREOE = true;
}
}
}

protected final void initIAREOL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREOL = false;
} else {
IAREOL = true;
}
}
}

protected final void initIAREOR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREOR = false;
} else {
IAREOR = true;
}
}
}

protected final void initIAREOU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREOU = false;
} else {
IAREOU = true;
}
}
}

protected final void initIARER(String s) {
if (!s.trim().isEmpty()) {
IARER = Byte.parseByte(s);
} else {
IARER = Byte.MIN_VALUE;
}
}

protected final void initIAREU(String s) {
if (!s.trim().isEmpty()) {
IAREU = Short.parseShort(s);
} else {
IAREU = Short.MIN_VALUE;
}
}

protected final void initIAREWE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREWE = false;
} else {
IAREWE = true;
}
}
}

protected final void initIAREWL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREWL = false;
} else {
IAREWL = true;
}
}
}

protected final void initIAREWR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREWR = false;
} else {
IAREWR = true;
}
}
}

protected final void initIAREWU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREWU = false;
} else {
IAREWU = true;
}
}
}

protected final void initIAREYE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREYE = false;
} else {
IAREYE = true;
}
}
}

protected final void initIAREYL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREYL = false;
} else {
IAREYL = true;
}
}
}

protected final void initIAREYR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREYR = false;
} else {
IAREYR = true;
}
}
}

protected final void initIAREYU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREYU = false;
} else {
IAREYU = true;
}
}
}

protected final void initIASAE(String s) {
if (!s.trim().isEmpty()) {
IASAE = Byte.parseByte(s);
} else {
IASAE = Byte.MIN_VALUE;
}
}

protected final void initIASAL(String s) {
if (!s.trim().isEmpty()) {
IASAL = Integer.parseInt(s);
} else {
IASAL = Integer.MIN_VALUE;
}
}

protected final void initIASAR(String s) {
if (!s.trim().isEmpty()) {
IASAR = Byte.parseByte(s);
} else {
IASAR = Byte.MIN_VALUE;
}
}

protected final void initIASAU(String s) {
if (!s.trim().isEmpty()) {
IASAU = Integer.parseInt(s);
} else {
IASAU = Integer.MIN_VALUE;
}
}

protected final void initIASCE(String s) {
if (!s.trim().isEmpty()) {
IASCE = Byte.parseByte(s);
} else {
IASCE = Byte.MIN_VALUE;
}
}

protected final void initIASCL(String s) {
if (!s.trim().isEmpty()) {
IASCL = Integer.parseInt(s);
} else {
IASCL = Integer.MIN_VALUE;
}
}

protected final void initIASCR(String s) {
if (!s.trim().isEmpty()) {
IASCR = Byte.parseByte(s);
} else {
IASCR = Byte.MIN_VALUE;
}
}

protected final void initIASCU(String s) {
if (!s.trim().isEmpty()) {
IASCU = Integer.parseInt(s);
} else {
IASCU = Integer.MIN_VALUE;
}
}

protected final void initIASHTY1(String s) {
if (!s.trim().isEmpty()) {
IASHTY1 = Byte.parseByte(s);
} else {
IASHTY1 = Byte.MIN_VALUE;
}
}

protected final void initIASHTY2(String s) {
if (!s.trim().isEmpty()) {
IASHTY2 = Byte.parseByte(s);
} else {
IASHTY2 = Byte.MIN_VALUE;
}
}

protected final void initIASHTY3(String s) {
if (!s.trim().isEmpty()) {
IASHTY3 = Byte.parseByte(s);
} else {
IASHTY3 = Byte.MIN_VALUE;
}
}

protected final void initIASHTY4(String s) {
if (!s.trim().isEmpty()) {
IASHTY4 = Byte.parseByte(s);
} else {
IASHTY4 = Byte.MIN_VALUE;
}
}

protected final void initIASI01(String s) {
if (!s.trim().isEmpty()) {
IASI01 = Byte.parseByte(s);
} else {
IASI01 = Byte.MIN_VALUE;
}
}

protected final void initIASI02(String s) {
if (!s.trim().isEmpty()) {
IASI02 = Byte.parseByte(s);
} else {
IASI02 = Byte.MIN_VALUE;
}
}

protected final void initIASI03(String s) {
if (!s.trim().isEmpty()) {
IASI03 = Byte.parseByte(s);
} else {
IASI03 = Byte.MIN_VALUE;
}
}

protected final void initIASI04(String s) {
if (!s.trim().isEmpty()) {
IASI04 = Byte.parseByte(s);
} else {
IASI04 = Byte.MIN_VALUE;
}
}

protected final void initIASI05(String s) {
if (!s.trim().isEmpty()) {
IASI05 = Byte.parseByte(s);
} else {
IASI05 = Byte.MIN_VALUE;
}
}

protected final void initIASI06(String s) {
if (!s.trim().isEmpty()) {
IASI06 = Byte.parseByte(s);
} else {
IASI06 = Byte.MIN_VALUE;
}
}

protected final void initIASI07(String s) {
if (!s.trim().isEmpty()) {
IASI07 = Byte.parseByte(s);
} else {
IASI07 = Byte.MIN_VALUE;
}
}

protected final void initIASI08(String s) {
if (!s.trim().isEmpty()) {
IASI08 = Byte.parseByte(s);
} else {
IASI08 = Byte.MIN_VALUE;
}
}

protected final void initIASI09(String s) {
if (!s.trim().isEmpty()) {
IASI09 = Byte.parseByte(s);
} else {
IASI09 = Byte.MIN_VALUE;
}
}

protected final void initIASI10(String s) {
if (!s.trim().isEmpty()) {
IASI10 = Byte.parseByte(s);
} else {
IASI10 = Byte.MIN_VALUE;
}
}

protected final void initIASI11(String s) {
if (!s.trim().isEmpty()) {
IASI11 = Byte.parseByte(s);
} else {
IASI11 = Byte.MIN_VALUE;
}
}

protected final void initIASIE(String s) {
if (!s.trim().isEmpty()) {
IASIE = Byte.parseByte(s);
} else {
IASIE = Byte.MIN_VALUE;
}
}

protected final void initIASIL(String s) {
if (!s.trim().isEmpty()) {
IASIL = Short.parseShort(s);
} else {
IASIL = Short.MIN_VALUE;
}
}

protected final void initIASIR(String s) {
if (!s.trim().isEmpty()) {
IASIR = Byte.parseByte(s);
} else {
IASIR = Byte.MIN_VALUE;
}
}

protected final void initIASISE(String s) {
if (!s.trim().isEmpty()) {
IASISE = Byte.parseByte(s);
} else {
IASISE = Byte.MIN_VALUE;
}
}

protected final void initIASISL(String s) {
if (!s.trim().isEmpty()) {
IASISL = Integer.parseInt(s);
} else {
IASISL = Integer.MIN_VALUE;
}
}

protected final void initIASISR(String s) {
if (!s.trim().isEmpty()) {
IASISR = Byte.parseByte(s);
} else {
IASISR = Byte.MIN_VALUE;
}
}

protected final void initIASISU(String s) {
if (!s.trim().isEmpty()) {
IASISU = Integer.parseInt(s);
} else {
IASISU = Integer.MIN_VALUE;
}
}

protected final void initIASIU(String s) {
if (!s.trim().isEmpty()) {
IASIU = Short.parseShort(s);
} else {
IASIU = Short.MIN_VALUE;
}
}

protected final void initIASSE(String s) {
if (!s.trim().isEmpty()) {
IASSE = Byte.parseByte(s);
} else {
IASSE = Byte.MIN_VALUE;
}
}

protected final void initIASSIE(String s) {
if (!s.trim().isEmpty()) {
IASSIE = Byte.parseByte(s);
} else {
IASSIE = Byte.MIN_VALUE;
}
}

protected final void initIASSIL(String s) {
if (!s.trim().isEmpty()) {
IASSIL = Short.parseShort(s);
} else {
IASSIL = Short.MIN_VALUE;
}
}

protected final void initIASSIR(String s) {
if (!s.trim().isEmpty()) {
IASSIR = Byte.parseByte(s);
} else {
IASSIR = Byte.MIN_VALUE;
}
}

protected final void initIASSIU(String s) {
if (!s.trim().isEmpty()) {
IASSIU = Short.parseShort(s);
} else {
IASSIU = Short.MIN_VALUE;
}
}

protected final void initIASSL(String s) {
if (!s.trim().isEmpty()) {
IASSL = Integer.parseInt(s);
} else {
IASSL = Integer.MIN_VALUE;
}
}

protected final void initIASSR(String s) {
if (!s.trim().isEmpty()) {
IASSR = Byte.parseByte(s);
} else {
IASSR = Byte.MIN_VALUE;
}
}

protected final void initIASSU(String s) {
if (!s.trim().isEmpty()) {
IASSU = Integer.parseInt(s);
} else {
IASSU = Integer.MIN_VALUE;
}
}

protected final void initIAT39(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT39 = false;
} else {
IAT39 = true;
}
}
}

protected final void initIAT40(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT40 = false;
} else {
IAT40 = true;
}
}
}

protected final void initIAT41(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT41 = false;
} else {
IAT41 = true;
}
}
}

protected final void initIAT42(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT42 = false;
} else {
IAT42 = true;
}
}
}

protected final void initIAT43(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT43 = false;
} else {
IAT43 = true;
}
}
}

protected final void initIAT44(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT44 = false;
} else {
IAT44 = true;
}
}
}

protected final void initIAT45(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT45 = false;
} else {
IAT45 = true;
}
}
}

protected final void initIAT46(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT46 = false;
} else {
IAT46 = true;
}
}
}

protected final void initIAT47(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT47 = false;
} else {
IAT47 = true;
}
}
}

protected final void initIAT48(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT48 = false;
} else {
IAT48 = true;
}
}
}

protected final void initIAT49(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT49 = false;
} else {
IAT49 = true;
}
}
}

protected final void initIAT50(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT50 = false;
} else {
IAT50 = true;
}
}
}

protected final void initIAT51(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT51 = false;
} else {
IAT51 = true;
}
}
}

protected final void initIAT52(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT52 = false;
} else {
IAT52 = true;
}
}
}

protected final void initIAT53(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT53 = false;
} else {
IAT53 = true;
}
}
}

protected final void initIAT54(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT54 = false;
} else {
IAT54 = true;
}
}
}

protected final void initIAT55(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT55 = false;
} else {
IAT55 = true;
}
}
}

protected final void initIAT56(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT56 = false;
} else {
IAT56 = true;
}
}
}

protected final void initIAT57(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT57 = false;
} else {
IAT57 = true;
}
}
}

protected final void initIAT58(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT58 = false;
} else {
IAT58 = true;
}
}
}

protected final void initIAT59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT59 = false;
} else {
IAT59 = true;
}
}
}

protected final void initIAT60(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT60 = false;
} else {
IAT60 = true;
}
}
}

protected final void initIAT61(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT61 = false;
} else {
IAT61 = true;
}
}
}

protected final void initIAT62(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT62 = false;
} else {
IAT62 = true;
}
}
}

protected final void initIAT63(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT63 = false;
} else {
IAT63 = true;
}
}
}

protected final void initIAT64(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT64 = false;
} else {
IAT64 = true;
}
}
}

protected final void initIAT65(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT65 = false;
} else {
IAT65 = true;
}
}
}

protected final void initIAT66(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT66 = false;
} else {
IAT66 = true;
}
}
}

protected final void initIAT67(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT67 = false;
} else {
IAT67 = true;
}
}
}

protected final void initIAT68(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT68 = false;
} else {
IAT68 = true;
}
}
}

protected final void initIAUIE(String s) {
if (!s.trim().isEmpty()) {
IAUIE = Byte.parseByte(s);
} else {
IAUIE = Byte.MIN_VALUE;
}
}

protected final void initIAUIIE(String s) {
if (!s.trim().isEmpty()) {
IAUIIE = Byte.parseByte(s);
} else {
IAUIIE = Byte.MIN_VALUE;
}
}

protected final void initIAUIIL(String s) {
if (!s.trim().isEmpty()) {
IAUIIL = Short.parseShort(s);
} else {
IAUIIL = Short.MIN_VALUE;
}
}

protected final void initIAUIIR(String s) {
if (!s.trim().isEmpty()) {
IAUIIR = Byte.parseByte(s);
} else {
IAUIIR = Byte.MIN_VALUE;
}
}

protected final void initIAUIIU(String s) {
if (!s.trim().isEmpty()) {
IAUIIU = Short.parseShort(s);
} else {
IAUIIU = Short.MIN_VALUE;
}
}

protected final void initIAUIL(String s) {
if (!s.trim().isEmpty()) {
IAUIL = Integer.parseInt(s);
} else {
IAUIL = Integer.MIN_VALUE;
}
}

protected final void initIAUIR(String s) {
if (!s.trim().isEmpty()) {
IAUIR = Byte.parseByte(s);
} else {
IAUIR = Byte.MIN_VALUE;
}
}

protected final void initIAUIU(String s) {
if (!s.trim().isEmpty()) {
IAUIU = Integer.parseInt(s);
} else {
IAUIU = Integer.MIN_VALUE;
}
}

protected final void initIDAIND(String s) {
if (!s.trim().isEmpty()) {
IDAIND = Integer.parseInt(s);
} else {
IDAIND = Integer.MIN_VALUE;
}
}

protected final void initIINTDTM(String s) {
if (!s.trim().isEmpty()) {
IINTDTM = Byte.parseByte(s);
} else {
IINTDTM = Byte.MIN_VALUE;
}
}

protected final void initIINTDTY(String s) {
if (!s.trim().isEmpty()) {
IINTDTY = Short.parseShort(s);
} else {
IINTDTY = Short.MIN_VALUE;
}
}

protected final void initINDNO(String s) {
if (!s.trim().isEmpty()) {
INDNO = Byte.parseByte(s);
} else {
INDNO = Byte.MIN_VALUE;
}
}

protected final void initINDOC(String s) {
if (!s.trim().isEmpty()) {
INDOC = Byte.parseByte(s);
} else {
INDOC = Byte.MIN_VALUE;
}
}

protected final void initINDRS(String s) {
if (!s.trim().isEmpty()) {
INDRS = Byte.parseByte(s);
} else {
INDRS = Byte.MIN_VALUE;
}
}

protected final void initINVCARE_P_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
INVCARE_P_F = false;
} else {
INVCARE_P_F = true;
}
}
}

protected final void initINVCARE_P_I(String s) {
if (!s.trim().isEmpty()) {
INVCARE_P_I = Double.parseDouble(s);
} else {
INVCARE_P_I = Double.NaN;
}
}

protected final void initINVCARE_P_O(String s) {
if (!s.trim().isEmpty()) {
INVCARE_P_O = Short.parseShort(s);
} else {
INVCARE_P_O = Short.MIN_VALUE;
}
}

protected final void initINVCARE_P_T(String s) {
if (!s.trim().isEmpty()) {
INVCARE_P_T = Short.parseShort(s);
} else {
INVCARE_P_T = Short.MIN_VALUE;
}
}

protected final void initINVCARE_R_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
INVCARE_R_F = false;
} else {
INVCARE_R_F = true;
}
}
}

protected final void initINVCARE_R_I(String s) {
if (!s.trim().isEmpty()) {
INVCARE_R_I = Double.parseDouble(s);
} else {
INVCARE_R_I = Double.NaN;
}
}

protected final void initINVCARE_R_O(String s) {
if (!s.trim().isEmpty()) {
INVCARE_R_O = Short.parseShort(s);
} else {
INVCARE_R_O = Short.MIN_VALUE;
}
}

protected final void initINVCARE_R_T(String s) {
if (!s.trim().isEmpty()) {
INVCARE_R_T = Short.parseShort(s);
} else {
INVCARE_R_T = Short.MIN_VALUE;
}
}

protected final void initMAINHH1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
MAINHH1 = false;
} else {
MAINHH1 = true;
}
}
}

protected final void initMAXMEMTOT(String s) {
if (!s.trim().isEmpty()) {
MAXMEMTOT = Byte.parseByte(s);
} else {
MAXMEMTOT = Byte.MIN_VALUE;
}
}

protected final void initMMAIDC(String s) {
if (!s.trim().isEmpty()) {
MMAIDC = Byte.parseByte(s);
} else {
MMAIDC = Byte.MIN_VALUE;
}
}

protected final void initMMCOMZ1(String s) {
if (!s.trim().isEmpty()) {
MMCOMZ1 = Byte.parseByte(s);
} else {
MMCOMZ1 = Byte.MIN_VALUE;
}
}

protected final void initMMCOMZ2(String s) {
if (!s.trim().isEmpty()) {
MMCOMZ2 = Byte.parseByte(s);
} else {
MMCOMZ2 = Byte.MIN_VALUE;
}
}

protected final void initMMRECRC(String s) {
if (!s.trim().isEmpty()) {
MMRECRC = Byte.parseByte(s);
} else {
MMRECRC = Byte.MIN_VALUE;
}
}

protected final void initMMSTOP(String s) {
if (!s.trim().isEmpty()) {
MMSTOP = Byte.parseByte(s);
} else {
MMSTOP = Byte.MIN_VALUE;
}
}

protected final void initNCLM(String s) {
if (!s.trim().isEmpty()) {
NCLM = Byte.parseByte(s);
} else {
NCLM = Byte.MIN_VALUE;
}
}

protected final void initNCORREC(String s) {
if (!s.trim().isEmpty()) {
NCORREC = Byte.parseByte(s);
} else {
NCORREC = Byte.MIN_VALUE;
}
}

protected final void initNMISSED(String s) {
if (!s.trim().isEmpty()) {
NMISSED = Byte.parseByte(s);
} else {
NMISSED = Byte.MIN_VALUE;
}
}

protected final void initNOFIQ(String s) {
if (!s.trim().isEmpty()) {
NOFIQ = Byte.parseByte(s);
} else {
NOFIQ = Byte.MIN_VALUE;
}
}

protected final void initNROW(String s) {
if (!s.trim().isEmpty()) {
NROW = Byte.parseByte(s);
} else {
NROW = Byte.MIN_VALUE;
}
}

protected final void initNROWCLM(String s) {
if (!s.trim().isEmpty()) {
NROWCLM = Short.parseShort(s);
} else {
NROWCLM = Short.MIN_VALUE;
}
}

protected final void initNUMP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
NUMP = false;
} else {
NUMP = true;
}
}
}

protected final void initPAINHH1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
PAINHH1 = false;
} else {
PAINHH1 = true;
}
}
}

protected final void initPARTNER(String s) {
if (!s.trim().isEmpty()) {
PARTNER = Byte.parseByte(s);
} else {
PARTNER = Byte.MIN_VALUE;
}
}

protected final void initPENTYPE_WAVE1(String s) {
if (!s.trim().isEmpty()) {
PENTYPE_WAVE1 = Byte.parseByte(s);
} else {
PENTYPE_WAVE1 = Byte.MIN_VALUE;
}
}

protected final void initPEN_ANY(String s) {
if (!s.trim().isEmpty()) {
PEN_ANY = Byte.parseByte(s);
} else {
PEN_ANY = Byte.MIN_VALUE;
}
}

protected final void initPEN_DB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
PEN_DB = false;
} else {
PEN_DB = true;
}
}
}

protected final void initPEN_DC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
PEN_DC = false;
} else {
PEN_DC = true;
}
}
}

protected final void initPEN_DK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
PEN_DK = false;
} else {
PEN_DK = true;
}
}
}

protected final void initPRIPENW2_2002(String s) {
if (!s.trim().isEmpty()) {
PRIPENW2_2002 = Double.parseDouble(s);
} else {
PRIPENW2_2002 = Double.NaN;
}
}

protected final void initPRIPENW2_SPA(String s) {
if (!s.trim().isEmpty()) {
PRIPENW2_SPA = Double.parseDouble(s);
} else {
PRIPENW2_SPA = Double.NaN;
}
}

protected final void initPRIPENW3_2002(String s) {
if (!s.trim().isEmpty()) {
PRIPENW3_2002 = Double.parseDouble(s);
} else {
PRIPENW3_2002 = Double.NaN;
}
}

protected final void initPRIPENW3_SPA(String s) {
if (!s.trim().isEmpty()) {
PRIPENW3_SPA = Double.parseDouble(s);
} else {
PRIPENW3_SPA = Double.NaN;
}
}

protected final void initPRIPENW4_2002(String s) {
if (!s.trim().isEmpty()) {
PRIPENW4_2002 = Double.parseDouble(s);
} else {
PRIPENW4_2002 = Double.NaN;
}
}

protected final void initPRIPENW4_SPA(String s) {
if (!s.trim().isEmpty()) {
PRIPENW4_SPA = Double.parseDouble(s);
} else {
PRIPENW4_SPA = Double.NaN;
}
}

protected final void initPRIPENW5_2002(String s) {
if (!s.trim().isEmpty()) {
PRIPENW5_2002 = Double.parseDouble(s);
} else {
PRIPENW5_2002 = Double.NaN;
}
}

protected final void initPRIPENW5_SPA(String s) {
if (!s.trim().isEmpty()) {
PRIPENW5_SPA = Double.parseDouble(s);
} else {
PRIPENW5_SPA = Double.NaN;
}
}

protected final void initPRIPENW6_2002(String s) {
if (!s.trim().isEmpty()) {
PRIPENW6_2002 = Double.parseDouble(s);
} else {
PRIPENW6_2002 = Double.NaN;
}
}

protected final void initPRIPENW6_SPA(String s) {
if (!s.trim().isEmpty()) {
PRIPENW6_SPA = Double.parseDouble(s);
} else {
PRIPENW6_SPA = Double.NaN;
}
}

protected final void initPRIPENW7_2002(String s) {
if (!s.trim().isEmpty()) {
PRIPENW7_2002 = Double.parseDouble(s);
} else {
PRIPENW7_2002 = Double.NaN;
}
}

protected final void initPRIPENW7_SPA(String s) {
if (!s.trim().isEmpty()) {
PRIPENW7_SPA = Double.parseDouble(s);
} else {
PRIPENW7_SPA = Double.NaN;
}
}

protected final void initPRIPENW8_2002(String s) {
if (!s.trim().isEmpty()) {
PRIPENW8_2002 = Double.parseDouble(s);
} else {
PRIPENW8_2002 = Double.NaN;
}
}

protected final void initPRIPENW8_SPA(String s) {
if (!s.trim().isEmpty()) {
PRIPENW8_SPA = Double.parseDouble(s);
} else {
PRIPENW8_SPA = Double.NaN;
}
}

protected final void initPRIPENW9_2002(String s) {
if (!s.trim().isEmpty()) {
PRIPENW9_2002 = Double.parseDouble(s);
} else {
PRIPENW9_2002 = Double.NaN;
}
}

protected final void initPRIPENW9_SPA(String s) {
if (!s.trim().isEmpty()) {
PRIPENW9_SPA = Double.parseDouble(s);
} else {
PRIPENW9_SPA = Double.NaN;
}
}

protected final void initPRIPEN_2002(String s) {
if (!s.trim().isEmpty()) {
PRIPEN_2002 = Double.parseDouble(s);
} else {
PRIPEN_2002 = Double.NaN;
}
}

protected final void initPRIPEN_SPA(String s) {
if (!s.trim().isEmpty()) {
PRIPEN_SPA = Double.parseDouble(s);
} else {
PRIPEN_SPA = Double.NaN;
}
}

protected final void initPSMID(String s) {
if (!s.trim().isEmpty()) {
PSMID = Short.parseShort(s);
} else {
PSMID = Short.MIN_VALUE;
}
}

protected final void initPSOLD(String s) {
if (!s.trim().isEmpty()) {
PSOLD = Short.parseShort(s);
} else {
PSOLD = Short.MIN_VALUE;
}
}

protected final void initPUBPEN(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
PUBPEN = false;
} else {
PUBPEN = true;
}
}
}

protected final void initRAND14(String s) {
if (!s.trim().isEmpty()) {
RAND14 = Byte.parseByte(s);
} else {
RAND14 = Byte.MIN_VALUE;
}
}

protected final void initRTHHOUT(String s) {
if (!s.trim().isEmpty()) {
RTHHOUT = Short.parseShort(s);
} else {
RTHHOUT = Short.MIN_VALUE;
}
}

protected final void initSCACCA(String s) {
if (!s.trim().isEmpty()) {
SCACCA = Byte.parseByte(s);
} else {
SCACCA = Byte.MIN_VALUE;
}
}

protected final void initSCACCB(String s) {
if (!s.trim().isEmpty()) {
SCACCB = Byte.parseByte(s);
} else {
SCACCB = Byte.MIN_VALUE;
}
}

protected final void initSCACCC(String s) {
if (!s.trim().isEmpty()) {
SCACCC = Byte.parseByte(s);
} else {
SCACCC = Byte.MIN_VALUE;
}
}

protected final void initSCACCD(String s) {
if (!s.trim().isEmpty()) {
SCACCD = Byte.parseByte(s);
} else {
SCACCD = Byte.MIN_VALUE;
}
}

protected final void initSCACCE(String s) {
if (!s.trim().isEmpty()) {
SCACCE = Byte.parseByte(s);
} else {
SCACCE = Byte.MIN_VALUE;
}
}

protected final void initSCACCF(String s) {
if (!s.trim().isEmpty()) {
SCACCF = Byte.parseByte(s);
} else {
SCACCF = Byte.MIN_VALUE;
}
}

protected final void initSCACCG(String s) {
if (!s.trim().isEmpty()) {
SCACCG = Byte.parseByte(s);
} else {
SCACCG = Byte.MIN_VALUE;
}
}

protected final void initSCACCH(String s) {
if (!s.trim().isEmpty()) {
SCACCH = Byte.parseByte(s);
} else {
SCACCH = Byte.MIN_VALUE;
}
}

protected final void initSCACCI(String s) {
if (!s.trim().isEmpty()) {
SCACCI = Byte.parseByte(s);
} else {
SCACCI = Byte.MIN_VALUE;
}
}

protected final void initSCACCJ(String s) {
if (!s.trim().isEmpty()) {
SCACCJ = Byte.parseByte(s);
} else {
SCACCJ = Byte.MIN_VALUE;
}
}

protected final void initSCDCA(String s) {
if (!s.trim().isEmpty()) {
SCDCA = Byte.parseByte(s);
} else {
SCDCA = Byte.MIN_VALUE;
}
}

protected final void initSCDCB(String s) {
if (!s.trim().isEmpty()) {
SCDCB = Byte.parseByte(s);
} else {
SCDCB = Byte.MIN_VALUE;
}
}

protected final void initSCDCC(String s) {
if (!s.trim().isEmpty()) {
SCDCC = Byte.parseByte(s);
} else {
SCDCC = Byte.MIN_VALUE;
}
}

protected final void initSCDCD(String s) {
if (!s.trim().isEmpty()) {
SCDCD = Byte.parseByte(s);
} else {
SCDCD = Byte.MIN_VALUE;
}
}

protected final void initSCDCE(String s) {
if (!s.trim().isEmpty()) {
SCDCE = Byte.parseByte(s);
} else {
SCDCE = Byte.MIN_VALUE;
}
}

protected final void initSCDCF(String s) {
if (!s.trim().isEmpty()) {
SCDCF = Byte.parseByte(s);
} else {
SCDCF = Byte.MIN_VALUE;
}
}

protected final void initSCDCG(String s) {
if (!s.trim().isEmpty()) {
SCDCG = Byte.parseByte(s);
} else {
SCDCG = Byte.MIN_VALUE;
}
}

protected final void initSCEND(String s) {
if (!s.trim().isEmpty()) {
SCEND = Byte.parseByte(s);
} else {
SCEND = Byte.MIN_VALUE;
}
}

protected final void initSCFAMM(String s) {
if (!s.trim().isEmpty()) {
SCFAMM = Byte.parseByte(s);
} else {
SCFAMM = Byte.MIN_VALUE;
}
}

protected final void initSCFMH(String s) {
if (!s.trim().isEmpty()) {
SCFMH = Byte.parseByte(s);
} else {
SCFMH = Byte.MIN_VALUE;
}
}

protected final void initSCFRDM(String s) {
if (!s.trim().isEmpty()) {
SCFRDM = Byte.parseByte(s);
} else {
SCFRDM = Byte.MIN_VALUE;
}
}

protected final void initSCGHQA(String s) {
if (!s.trim().isEmpty()) {
SCGHQA = Byte.parseByte(s);
} else {
SCGHQA = Byte.MIN_VALUE;
}
}

protected final void initSCGHQB(String s) {
if (!s.trim().isEmpty()) {
SCGHQB = Byte.parseByte(s);
} else {
SCGHQB = Byte.MIN_VALUE;
}
}

protected final void initSCGHQC(String s) {
if (!s.trim().isEmpty()) {
SCGHQC = Byte.parseByte(s);
} else {
SCGHQC = Byte.MIN_VALUE;
}
}

protected final void initSCGHQD(String s) {
if (!s.trim().isEmpty()) {
SCGHQD = Byte.parseByte(s);
} else {
SCGHQD = Byte.MIN_VALUE;
}
}

protected final void initSCGHQE(String s) {
if (!s.trim().isEmpty()) {
SCGHQE = Byte.parseByte(s);
} else {
SCGHQE = Byte.MIN_VALUE;
}
}

protected final void initSCGHQF(String s) {
if (!s.trim().isEmpty()) {
SCGHQF = Byte.parseByte(s);
} else {
SCGHQF = Byte.MIN_VALUE;
}
}

protected final void initSCGHQG(String s) {
if (!s.trim().isEmpty()) {
SCGHQG = Byte.parseByte(s);
} else {
SCGHQG = Byte.MIN_VALUE;
}
}

protected final void initSCGHQH(String s) {
if (!s.trim().isEmpty()) {
SCGHQH = Byte.parseByte(s);
} else {
SCGHQH = Byte.MIN_VALUE;
}
}

protected final void initSCGHQI(String s) {
if (!s.trim().isEmpty()) {
SCGHQI = Byte.parseByte(s);
} else {
SCGHQI = Byte.MIN_VALUE;
}
}

protected final void initSCGHQJ(String s) {
if (!s.trim().isEmpty()) {
SCGHQJ = Byte.parseByte(s);
} else {
SCGHQJ = Byte.MIN_VALUE;
}
}

protected final void initSCGHQK(String s) {
if (!s.trim().isEmpty()) {
SCGHQK = Byte.parseByte(s);
} else {
SCGHQK = Byte.MIN_VALUE;
}
}

protected final void initSCGHQL(String s) {
if (!s.trim().isEmpty()) {
SCGHQL = Byte.parseByte(s);
} else {
SCGHQL = Byte.MIN_VALUE;
}
}

protected final void initSCNOSC(String s) {
if (!s.trim().isEmpty()) {
SCNOSC = Byte.parseByte(s);
} else {
SCNOSC = Byte.MIN_VALUE;
}
}

protected final void initSCNOSCC(String s) {
if (!s.trim().isEmpty()) {
SCNOSCC = Byte.parseByte(s);
} else {
SCNOSCC = Byte.MIN_VALUE;
}
}

protected final void initSCORG1(String s) {
if (!s.trim().isEmpty()) {
SCORG1 = Byte.parseByte(s);
} else {
SCORG1 = Byte.MIN_VALUE;
}
}

protected final void initSCORG3(String s) {
if (!s.trim().isEmpty()) {
SCORG3 = Byte.parseByte(s);
} else {
SCORG3 = Byte.MIN_VALUE;
}
}

protected final void initSCORG4(String s) {
if (!s.trim().isEmpty()) {
SCORG4 = Byte.parseByte(s);
} else {
SCORG4 = Byte.MIN_VALUE;
}
}

protected final void initSCORG5(String s) {
if (!s.trim().isEmpty()) {
SCORG5 = Byte.parseByte(s);
} else {
SCORG5 = Byte.MIN_VALUE;
}
}

protected final void initSCORG6(String s) {
if (!s.trim().isEmpty()) {
SCORG6 = Byte.parseByte(s);
} else {
SCORG6 = Byte.MIN_VALUE;
}
}

protected final void initSCORG7(String s) {
if (!s.trim().isEmpty()) {
SCORG7 = Byte.parseByte(s);
} else {
SCORG7 = Byte.MIN_VALUE;
}
}

protected final void initSCORG8(String s) {
if (!s.trim().isEmpty()) {
SCORG8 = Byte.parseByte(s);
} else {
SCORG8 = Byte.MIN_VALUE;
}
}

protected final void initSCORG9(String s) {
if (!s.trim().isEmpty()) {
SCORG9 = Byte.parseByte(s);
} else {
SCORG9 = Byte.MIN_VALUE;
}
}

protected final void initSCORGA2(String s) {
if (!s.trim().isEmpty()) {
SCORGA2 = Byte.parseByte(s);
} else {
SCORGA2 = Byte.MIN_VALUE;
}
}

protected final void initSCPTPA1(String s) {
if (!s.trim().isEmpty()) {
SCPTPA1 = Byte.parseByte(s);
} else {
SCPTPA1 = Byte.MIN_VALUE;
}
}

protected final void initSCPTPA2(String s) {
if (!s.trim().isEmpty()) {
SCPTPA2 = Byte.parseByte(s);
} else {
SCPTPA2 = Byte.MIN_VALUE;
}
}

protected final void initSCPTPA3(String s) {
if (!s.trim().isEmpty()) {
SCPTPA3 = Byte.parseByte(s);
} else {
SCPTPA3 = Byte.MIN_VALUE;
}
}

protected final void initSCPTPA4(String s) {
if (!s.trim().isEmpty()) {
SCPTPA4 = Byte.parseByte(s);
} else {
SCPTPA4 = Byte.MIN_VALUE;
}
}

protected final void initSCPTPA5(String s) {
if (!s.trim().isEmpty()) {
SCPTPA5 = Byte.parseByte(s);
} else {
SCPTPA5 = Byte.MIN_VALUE;
}
}

protected final void initSCPTPA6(String s) {
if (!s.trim().isEmpty()) {
SCPTPA6 = Byte.parseByte(s);
} else {
SCPTPA6 = Byte.MIN_VALUE;
}
}

protected final void initSCPTPA7(String s) {
if (!s.trim().isEmpty()) {
SCPTPA7 = Byte.parseByte(s);
} else {
SCPTPA7 = Byte.MIN_VALUE;
}
}

protected final void initSCPTPA8(String s) {
if (!s.trim().isEmpty()) {
SCPTPA8 = Byte.parseByte(s);
} else {
SCPTPA8 = Byte.MIN_VALUE;
}
}

protected final void initSCPTPA9(String s) {
if (!s.trim().isEmpty()) {
SCPTPA9 = Byte.parseByte(s);
} else {
SCPTPA9 = Byte.MIN_VALUE;
}
}

protected final void initSCPTR(String s) {
if (!s.trim().isEmpty()) {
SCPTR = Byte.parseByte(s);
} else {
SCPTR = Byte.MIN_VALUE;
}
}

protected final void initSCPTRA(String s) {
if (!s.trim().isEmpty()) {
SCPTRA = Byte.parseByte(s);
} else {
SCPTRA = Byte.MIN_VALUE;
}
}

protected final void initSCPTRB(String s) {
if (!s.trim().isEmpty()) {
SCPTRB = Byte.parseByte(s);
} else {
SCPTRB = Byte.MIN_VALUE;
}
}

protected final void initSCPTRC(String s) {
if (!s.trim().isEmpty()) {
SCPTRC = Byte.parseByte(s);
} else {
SCPTRC = Byte.MIN_VALUE;
}
}

protected final void initSCPTRD(String s) {
if (!s.trim().isEmpty()) {
SCPTRD = Byte.parseByte(s);
} else {
SCPTRD = Byte.MIN_VALUE;
}
}

protected final void initSCPTRE(String s) {
if (!s.trim().isEmpty()) {
SCPTRE = Byte.parseByte(s);
} else {
SCPTRE = Byte.MIN_VALUE;
}
}

protected final void initSCPTRF(String s) {
if (!s.trim().isEmpty()) {
SCPTRF = Byte.parseByte(s);
} else {
SCPTRF = Byte.MIN_VALUE;
}
}

protected final void initSCPTRG(String s) {
if (!s.trim().isEmpty()) {
SCPTRG = Byte.parseByte(s);
} else {
SCPTRG = Byte.MIN_VALUE;
}
}

protected final void initSCSCA(String s) {
if (!s.trim().isEmpty()) {
SCSCA = Byte.parseByte(s);
} else {
SCSCA = Byte.MIN_VALUE;
}
}

protected final void initSCSCB(String s) {
if (!s.trim().isEmpty()) {
SCSCB = Byte.parseByte(s);
} else {
SCSCB = Byte.MIN_VALUE;
}
}

protected final void initSCSCC(String s) {
if (!s.trim().isEmpty()) {
SCSCC = Byte.parseByte(s);
} else {
SCSCC = Byte.MIN_VALUE;
}
}

protected final void initSCSCD(String s) {
if (!s.trim().isEmpty()) {
SCSCD = Byte.parseByte(s);
} else {
SCSCD = Byte.MIN_VALUE;
}
}

protected final void initSCSCE(String s) {
if (!s.trim().isEmpty()) {
SCSCE = Byte.parseByte(s);
} else {
SCSCE = Byte.MIN_VALUE;
}
}

protected final void initSCSCF(String s) {
if (!s.trim().isEmpty()) {
SCSCF = Byte.parseByte(s);
} else {
SCSCF = Byte.MIN_VALUE;
}
}

protected final void initSCSCG(String s) {
if (!s.trim().isEmpty()) {
SCSCG = Byte.parseByte(s);
} else {
SCSCG = Byte.MIN_VALUE;
}
}

protected final void initSCSCH(String s) {
if (!s.trim().isEmpty()) {
SCSCH = Byte.parseByte(s);
} else {
SCSCH = Byte.MIN_VALUE;
}
}

protected final void initSCSCI(String s) {
if (!s.trim().isEmpty()) {
SCSCI = Byte.parseByte(s);
} else {
SCSCI = Byte.MIN_VALUE;
}
}

protected final void initSC_REC(String s) {
if (!s.trim().isEmpty()) {
SC_REC = Byte.parseByte(s);
} else {
SC_REC = Byte.MIN_VALUE;
}
}

protected final void initSPCAA(String s) {
if (!s.trim().isEmpty()) {
SPCAA = Byte.parseByte(s);
} else {
SPCAA = Byte.MIN_VALUE;
}
}

protected final void initSPCAB1(String s) {
if (!s.trim().isEmpty()) {
SPCAB1 = Byte.parseByte(s);
} else {
SPCAB1 = Byte.MIN_VALUE;
}
}

protected final void initSPCAB2(String s) {
if (!s.trim().isEmpty()) {
SPCAB2 = Byte.parseByte(s);
} else {
SPCAB2 = Byte.MIN_VALUE;
}
}

protected final void initSPCAB3(String s) {
if (!s.trim().isEmpty()) {
SPCAB3 = Byte.parseByte(s);
} else {
SPCAB3 = Byte.MIN_VALUE;
}
}

protected final void initSPCAB4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
SPCAB4 = false;
} else {
SPCAB4 = true;
}
}
}

protected final void initSPCAC(String s) {
if (!s.trim().isEmpty()) {
SPCAC = Short.parseShort(s);
} else {
SPCAC = Short.MIN_VALUE;
}
}

protected final void initSPCAM01(String s) {
if (!s.trim().isEmpty()) {
SPCAM01 = Byte.parseByte(s);
} else {
SPCAM01 = Byte.MIN_VALUE;
}
}

protected final void initSPCAM02(String s) {
if (!s.trim().isEmpty()) {
SPCAM02 = Byte.parseByte(s);
} else {
SPCAM02 = Byte.MIN_VALUE;
}
}

protected final void initSPCAM03(String s) {
if (!s.trim().isEmpty()) {
SPCAM03 = Byte.parseByte(s);
} else {
SPCAM03 = Byte.MIN_VALUE;
}
}

protected final void initSPCAM04(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
SPCAM04 = false;
} else {
SPCAM04 = true;
}
}
}

protected final void initSPCIN(String s) {
if (!s.trim().isEmpty()) {
SPCIN = Byte.parseByte(s);
} else {
SPCIN = Byte.MIN_VALUE;
}
}

protected final void initSPCINB(String s) {
if (!s.trim().isEmpty()) {
SPCINB = Byte.parseByte(s);
} else {
SPCINB = Byte.MIN_VALUE;
}
}

protected final void initSPMUS(String s) {
if (!s.trim().isEmpty()) {
SPMUS = Byte.parseByte(s);
} else {
SPMUS = Byte.MIN_VALUE;
}
}

protected final void initSPMUSB(String s) {
if (!s.trim().isEmpty()) {
SPMUSB = Byte.parseByte(s);
} else {
SPMUSB = Byte.MIN_VALUE;
}
}

protected final void initSPREST(String s) {
if (!s.trim().isEmpty()) {
SPREST = Byte.parseByte(s);
} else {
SPREST = Byte.MIN_VALUE;
}
}

protected final void initSPRESTB(String s) {
if (!s.trim().isEmpty()) {
SPRESTB = Byte.parseByte(s);
} else {
SPRESTB = Byte.MIN_VALUE;
}
}

protected final void initSPTEA(String s) {
if (!s.trim().isEmpty()) {
SPTEA = Byte.parseByte(s);
} else {
SPTEA = Byte.MIN_VALUE;
}
}

protected final void initSPTEAB(String s) {
if (!s.trim().isEmpty()) {
SPTEAB = Byte.parseByte(s);
} else {
SPTEAB = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB1(String s) {
if (!s.trim().isEmpty()) {
SPTRAB1 = Byte.parseByte(s);
} else {
SPTRAB1 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB2(String s) {
if (!s.trim().isEmpty()) {
SPTRAB2 = Byte.parseByte(s);
} else {
SPTRAB2 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB3(String s) {
if (!s.trim().isEmpty()) {
SPTRAB3 = Byte.parseByte(s);
} else {
SPTRAB3 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB4(String s) {
if (!s.trim().isEmpty()) {
SPTRAB4 = Byte.parseByte(s);
} else {
SPTRAB4 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB5(String s) {
if (!s.trim().isEmpty()) {
SPTRAB5 = Byte.parseByte(s);
} else {
SPTRAB5 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB6(String s) {
if (!s.trim().isEmpty()) {
SPTRAB6 = Byte.parseByte(s);
} else {
SPTRAB6 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM01(String s) {
if (!s.trim().isEmpty()) {
SPTRM01 = Byte.parseByte(s);
} else {
SPTRM01 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM02(String s) {
if (!s.trim().isEmpty()) {
SPTRM02 = Byte.parseByte(s);
} else {
SPTRM02 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM03(String s) {
if (!s.trim().isEmpty()) {
SPTRM03 = Byte.parseByte(s);
} else {
SPTRM03 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM04(String s) {
if (!s.trim().isEmpty()) {
SPTRM04 = Byte.parseByte(s);
} else {
SPTRM04 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM05(String s) {
if (!s.trim().isEmpty()) {
SPTRM05 = Byte.parseByte(s);
} else {
SPTRM05 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM06(String s) {
if (!s.trim().isEmpty()) {
SPTRM06 = Byte.parseByte(s);
} else {
SPTRM06 = Byte.MIN_VALUE;
}
}

protected final void initSTATEPENW2_2002(String s) {
if (!s.trim().isEmpty()) {
STATEPENW2_2002 = Double.parseDouble(s);
} else {
STATEPENW2_2002 = Double.NaN;
}
}

protected final void initSTATEPENW2_SPA(String s) {
if (!s.trim().isEmpty()) {
STATEPENW2_SPA = Double.parseDouble(s);
} else {
STATEPENW2_SPA = Double.NaN;
}
}

protected final void initSTATEPENW3_2002(String s) {
if (!s.trim().isEmpty()) {
STATEPENW3_2002 = Double.parseDouble(s);
} else {
STATEPENW3_2002 = Double.NaN;
}
}

protected final void initSTATEPENW3_SPA(String s) {
if (!s.trim().isEmpty()) {
STATEPENW3_SPA = Double.parseDouble(s);
} else {
STATEPENW3_SPA = Double.NaN;
}
}

protected final void initSTATEPENW4_2002(String s) {
if (!s.trim().isEmpty()) {
STATEPENW4_2002 = Double.parseDouble(s);
} else {
STATEPENW4_2002 = Double.NaN;
}
}

protected final void initSTATEPENW4_SPA(String s) {
if (!s.trim().isEmpty()) {
STATEPENW4_SPA = Double.parseDouble(s);
} else {
STATEPENW4_SPA = Double.NaN;
}
}

protected final void initSTATEPENW5_2002(String s) {
if (!s.trim().isEmpty()) {
STATEPENW5_2002 = Double.parseDouble(s);
} else {
STATEPENW5_2002 = Double.NaN;
}
}

protected final void initSTATEPENW5_SPA(String s) {
if (!s.trim().isEmpty()) {
STATEPENW5_SPA = Double.parseDouble(s);
} else {
STATEPENW5_SPA = Double.NaN;
}
}

protected final void initSTATEPENW6_2002(String s) {
if (!s.trim().isEmpty()) {
STATEPENW6_2002 = Double.parseDouble(s);
} else {
STATEPENW6_2002 = Double.NaN;
}
}

protected final void initSTATEPENW6_SPA(String s) {
if (!s.trim().isEmpty()) {
STATEPENW6_SPA = Double.parseDouble(s);
} else {
STATEPENW6_SPA = Double.NaN;
}
}

protected final void initSTATEPENW7_2002(String s) {
if (!s.trim().isEmpty()) {
STATEPENW7_2002 = Double.parseDouble(s);
} else {
STATEPENW7_2002 = Double.NaN;
}
}

protected final void initSTATEPENW7_SPA(String s) {
if (!s.trim().isEmpty()) {
STATEPENW7_SPA = Double.parseDouble(s);
} else {
STATEPENW7_SPA = Double.NaN;
}
}

protected final void initSTATEPENW8_2002(String s) {
if (!s.trim().isEmpty()) {
STATEPENW8_2002 = Double.parseDouble(s);
} else {
STATEPENW8_2002 = Double.NaN;
}
}

protected final void initSTATEPENW8_SPA(String s) {
if (!s.trim().isEmpty()) {
STATEPENW8_SPA = Double.parseDouble(s);
} else {
STATEPENW8_SPA = Double.NaN;
}
}

protected final void initSTATEPENW9_2002(String s) {
if (!s.trim().isEmpty()) {
STATEPENW9_2002 = Double.parseDouble(s);
} else {
STATEPENW9_2002 = Double.NaN;
}
}

protected final void initSTATEPENW9_SPA(String s) {
if (!s.trim().isEmpty()) {
STATEPENW9_SPA = Double.parseDouble(s);
} else {
STATEPENW9_SPA = Double.NaN;
}
}

protected final void initSTATEPEN_2002(String s) {
if (!s.trim().isEmpty()) {
STATEPEN_2002 = Double.parseDouble(s);
} else {
STATEPEN_2002 = Double.NaN;
}
}

protected final void initSTATEPEN_SPA(String s) {
if (!s.trim().isEmpty()) {
STATEPEN_SPA = Double.parseDouble(s);
} else {
STATEPEN_SPA = Double.NaN;
}
}

protected final void initW1MOVER(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
W1MOVER = false;
} else {
W1MOVER = true;
}
}
}

protected final void initW1WGT(String s) {
if (!s.trim().isEmpty()) {
W1WGT = Double.parseDouble(s);
} else {
W1WGT = Double.NaN;
}
}

protected final void initWFTC_P_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
WFTC_P_F = false;
} else {
WFTC_P_F = true;
}
}
}

protected final void initWFTC_P_I(String s) {
if (!s.trim().isEmpty()) {
WFTC_P_I = Double.parseDouble(s);
} else {
WFTC_P_I = Double.NaN;
}
}

protected final void initWFTC_P_O(String s) {
if (!s.trim().isEmpty()) {
WFTC_P_O = Short.parseShort(s);
} else {
WFTC_P_O = Short.MIN_VALUE;
}
}

protected final void initWFTC_P_T(String s) {
if (!s.trim().isEmpty()) {
WFTC_P_T = Short.parseShort(s);
} else {
WFTC_P_T = Short.MIN_VALUE;
}
}

protected final void initWFTC_R_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
WFTC_R_F = false;
} else {
WFTC_R_F = true;
}
}
}

protected final void initWFTC_R_I(String s) {
if (!s.trim().isEmpty()) {
WFTC_R_I = Double.parseDouble(s);
} else {
WFTC_R_I = Double.NaN;
}
}

protected final void initWFTC_R_O(String s) {
if (!s.trim().isEmpty()) {
WFTC_R_O = Short.parseShort(s);
} else {
WFTC_R_O = Short.MIN_VALUE;
}
}

protected final void initWFTC_R_T(String s) {
if (!s.trim().isEmpty()) {
WFTC_R_T = Short.parseShort(s);
} else {
WFTC_R_T = Short.MIN_VALUE;
}
}

protected final void initWP1ASK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
WP1ASK = false;
} else {
WP1ASK = true;
}
}
}

protected final void initWP2ASK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
WP2ASK = false;
} else {
WP2ASK = true;
}
}
}

protected final void initWPAC2(String s) {
if (!s.trim().isEmpty()) {
WPAC2 = Integer.parseInt(s);
} else {
WPAC2 = Integer.MIN_VALUE;
}
}

protected final void initWPACAT(String s) {
if (!s.trim().isEmpty()) {
WPACAT = Short.parseShort(s);
} else {
WPACAT = Short.MIN_VALUE;
}
}

protected final void initWPACAT2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPACAT2 = false;
} else {
WPACAT2 = true;
}
}
}

protected final void initWPACOA2(String s) {
if (!s.trim().isEmpty()) {
WPACOA2 = Byte.parseByte(s);
} else {
WPACOA2 = Byte.MIN_VALUE;
}
}

protected final void initWPACOB2(String s) {
if (!s.trim().isEmpty()) {
WPACOB2 = Short.parseShort(s);
} else {
WPACOB2 = Short.MIN_VALUE;
}
}

protected final void initWPACOC2(String s) {
if (!s.trim().isEmpty()) {
WPACOC2 = Byte.parseByte(s);
} else {
WPACOC2 = Byte.MIN_VALUE;
}
}

protected final void initWPACON2(String s) {
if (!s.trim().isEmpty()) {
WPACON2 = Byte.parseByte(s);
} else {
WPACON2 = Byte.MIN_VALUE;
}
}

protected final void initWPACT1(String s) {
if (!s.trim().isEmpty()) {
WPACT1 = Byte.parseByte(s);
} else {
WPACT1 = Byte.MIN_VALUE;
}
}

protected final void initWPACT2(String s) {
if (!s.trim().isEmpty()) {
WPACT2 = Byte.parseByte(s);
} else {
WPACT2 = Byte.MIN_VALUE;
}
}

protected final void initWPACT3(String s) {
if (!s.trim().isEmpty()) {
WPACT3 = Byte.parseByte(s);
} else {
WPACT3 = Byte.MIN_VALUE;
}
}

protected final void initWPACT4(String s) {
if (!s.trim().isEmpty()) {
WPACT4 = Byte.parseByte(s);
} else {
WPACT4 = Byte.MIN_VALUE;
}
}

protected final void initWPACT5(String s) {
if (!s.trim().isEmpty()) {
WPACT5 = Byte.parseByte(s);
} else {
WPACT5 = Byte.MIN_VALUE;
}
}

protected final void initWPACT6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACT6 = false;
} else {
WPACT6 = true;
}
}
}

protected final void initWPADY2(String s) {
if (!s.trim().isEmpty()) {
WPADY2 = Byte.parseByte(s);
} else {
WPADY2 = Byte.MIN_VALUE;
}
}

protected final void initWPAM2AE(String s) {
if (!s.trim().isEmpty()) {
WPAM2AE = Byte.parseByte(s);
} else {
WPAM2AE = Byte.MIN_VALUE;
}
}

protected final void initWPAM2AL(String s) {
if (!s.trim().isEmpty()) {
WPAM2AL = Integer.parseInt(s);
} else {
WPAM2AL = Integer.MIN_VALUE;
}
}

protected final void initWPAM2AR(String s) {
if (!s.trim().isEmpty()) {
WPAM2AR = Byte.parseByte(s);
} else {
WPAM2AR = Byte.MIN_VALUE;
}
}

protected final void initWPAM2AU(String s) {
if (!s.trim().isEmpty()) {
WPAM2AU = Integer.parseInt(s);
} else {
WPAM2AU = Integer.MIN_VALUE;
}
}

protected final void initWPAMAE(String s) {
if (!s.trim().isEmpty()) {
WPAMAE = Byte.parseByte(s);
} else {
WPAMAE = Byte.MIN_VALUE;
}
}

protected final void initWPAMAL(String s) {
if (!s.trim().isEmpty()) {
WPAMAL = Integer.parseInt(s);
} else {
WPAMAL = Integer.MIN_VALUE;
}
}

protected final void initWPAMAR(String s) {
if (!s.trim().isEmpty()) {
WPAMAR = Byte.parseByte(s);
} else {
WPAMAR = Byte.MIN_VALUE;
}
}

protected final void initWPAMAU(String s) {
if (!s.trim().isEmpty()) {
WPAMAU = Integer.parseInt(s);
} else {
WPAMAU = Integer.MIN_VALUE;
}
}

protected final void initWPAMEC2(String s) {
if (!s.trim().isEmpty()) {
WPAMEC2 = Short.parseShort(s);
} else {
WPAMEC2 = Short.MIN_VALUE;
}
}

protected final void initWPAMOU(String s) {
if (!s.trim().isEmpty()) {
WPAMOU = Integer.parseInt(s);
} else {
WPAMOU = Integer.MIN_VALUE;
}
}

protected final void initWPAMOU2(String s) {
if (!s.trim().isEmpty()) {
WPAMOU2 = Integer.parseInt(s);
} else {
WPAMOU2 = Integer.MIN_VALUE;
}
}

protected final void initWPAMTE(String s) {
if (!s.trim().isEmpty()) {
WPAMTE = Byte.parseByte(s);
} else {
WPAMTE = Byte.MIN_VALUE;
}
}

protected final void initWPAMTL(String s) {
if (!s.trim().isEmpty()) {
WPAMTL = Integer.parseInt(s);
} else {
WPAMTL = Integer.MIN_VALUE;
}
}

protected final void initWPAMTR(String s) {
if (!s.trim().isEmpty()) {
WPAMTR = Byte.parseByte(s);
} else {
WPAMTR = Byte.MIN_VALUE;
}
}

protected final void initWPAMTU(String s) {
if (!s.trim().isEmpty()) {
WPAMTU = Integer.parseInt(s);
} else {
WPAMTU = Integer.MIN_VALUE;
}
}

protected final void initWPANYC(String s) {
if (!s.trim().isEmpty()) {
WPANYC = Byte.parseByte(s);
} else {
WPANYC = Byte.MIN_VALUE;
}
}

protected final void initWPANYC2(String s) {
if (!s.trim().isEmpty()) {
WPANYC2 = Byte.parseByte(s);
} else {
WPANYC2 = Byte.MIN_VALUE;
}
}

protected final void initWPANYP(String s) {
if (!s.trim().isEmpty()) {
WPANYP = Byte.parseByte(s);
} else {
WPANYP = Byte.MIN_VALUE;
}
}

protected final void initWPAOFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAOFE = false;
} else {
WPAOFE = true;
}
}
}

protected final void initWPAOFL(String s) {
if (!s.trim().isEmpty()) {
WPAOFL = Short.parseShort(s);
} else {
WPAOFL = Short.MIN_VALUE;
}
}

protected final void initWPAOFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAOFR = false;
} else {
WPAOFR = true;
}
}
}

protected final void initWPAOFU(String s) {
if (!s.trim().isEmpty()) {
WPAOFU = Short.parseShort(s);
} else {
WPAOFU = Short.MIN_VALUE;
}
}

protected final void initWPAOME(String s) {
if (!s.trim().isEmpty()) {
WPAOME = Byte.parseByte(s);
} else {
WPAOME = Byte.MIN_VALUE;
}
}

protected final void initWPAOML(String s) {
if (!s.trim().isEmpty()) {
WPAOML = Short.parseShort(s);
} else {
WPAOML = Short.MIN_VALUE;
}
}

protected final void initWPAOMR(String s) {
if (!s.trim().isEmpty()) {
WPAOMR = Byte.parseByte(s);
} else {
WPAOMR = Byte.MIN_VALUE;
}
}

protected final void initWPAOMU(String s) {
if (!s.trim().isEmpty()) {
WPAOMU = Short.parseShort(s);
} else {
WPAOMU = Short.MIN_VALUE;
}
}

protected final void initWPAOOE(String s) {
if (!s.trim().isEmpty()) {
WPAOOE = Byte.parseByte(s);
} else {
WPAOOE = Byte.MIN_VALUE;
}
}

protected final void initWPAOOL(String s) {
if (!s.trim().isEmpty()) {
WPAOOL = Short.parseShort(s);
} else {
WPAOOL = Short.MIN_VALUE;
}
}

protected final void initWPAOOR(String s) {
if (!s.trim().isEmpty()) {
WPAOOR = Byte.parseByte(s);
} else {
WPAOOR = Byte.MIN_VALUE;
}
}

protected final void initWPAOOU(String s) {
if (!s.trim().isEmpty()) {
WPAOOU = Short.parseShort(s);
} else {
WPAOOU = Short.MIN_VALUE;
}
}

protected final void initWPAOWE(String s) {
if (!s.trim().isEmpty()) {
WPAOWE = Byte.parseByte(s);
} else {
WPAOWE = Byte.MIN_VALUE;
}
}

protected final void initWPAOWL(String s) {
if (!s.trim().isEmpty()) {
WPAOWL = Short.parseShort(s);
} else {
WPAOWL = Short.MIN_VALUE;
}
}

protected final void initWPAOWR(String s) {
if (!s.trim().isEmpty()) {
WPAOWR = Byte.parseByte(s);
} else {
WPAOWR = Byte.MIN_VALUE;
}
}

protected final void initWPAOWU(String s) {
if (!s.trim().isEmpty()) {
WPAOWU = Short.parseShort(s);
} else {
WPAOWU = Short.MIN_VALUE;
}
}

protected final void initWPAOYE(String s) {
if (!s.trim().isEmpty()) {
WPAOYE = Byte.parseByte(s);
} else {
WPAOYE = Byte.MIN_VALUE;
}
}

protected final void initWPAOYL(String s) {
if (!s.trim().isEmpty()) {
WPAOYL = Short.parseShort(s);
} else {
WPAOYL = Short.MIN_VALUE;
}
}

protected final void initWPAOYR(String s) {
if (!s.trim().isEmpty()) {
WPAOYR = Byte.parseByte(s);
} else {
WPAOYR = Byte.MIN_VALUE;
}
}

protected final void initWPAOYU(String s) {
if (!s.trim().isEmpty()) {
WPAOYU = Integer.parseInt(s);
} else {
WPAOYU = Integer.MIN_VALUE;
}
}

protected final void initWPAP2E(String s) {
if (!s.trim().isEmpty()) {
WPAP2E = Byte.parseByte(s);
} else {
WPAP2E = Byte.MIN_VALUE;
}
}

protected final void initWPAP2L(String s) {
if (!s.trim().isEmpty()) {
WPAP2L = Integer.parseInt(s);
} else {
WPAP2L = Integer.MIN_VALUE;
}
}

protected final void initWPAP2R(String s) {
if (!s.trim().isEmpty()) {
WPAP2R = Byte.parseByte(s);
} else {
WPAP2R = Byte.MIN_VALUE;
}
}

protected final void initWPAP2U(String s) {
if (!s.trim().isEmpty()) {
WPAP2U = Integer.parseInt(s);
} else {
WPAP2U = Integer.MIN_VALUE;
}
}

protected final void initWPAPE(String s) {
if (!s.trim().isEmpty()) {
WPAPE = Byte.parseByte(s);
} else {
WPAPE = Byte.MIN_VALUE;
}
}

protected final void initWPAPF2(String s) {
if (!s.trim().isEmpty()) {
WPAPF2 = Integer.parseInt(s);
} else {
WPAPF2 = Integer.MIN_VALUE;
}
}

protected final void initWPAPL(String s) {
if (!s.trim().isEmpty()) {
WPAPL = Integer.parseInt(s);
} else {
WPAPL = Integer.MIN_VALUE;
}
}

protected final void initWPAPR(String s) {
if (!s.trim().isEmpty()) {
WPAPR = Byte.parseByte(s);
} else {
WPAPR = Byte.MIN_VALUE;
}
}

protected final void initWPAPU(String s) {
if (!s.trim().isEmpty()) {
WPAPU = Integer.parseInt(s);
} else {
WPAPU = Integer.MIN_VALUE;
}
}

protected final void initWPAS2E(String s) {
if (!s.trim().isEmpty()) {
WPAS2E = Byte.parseByte(s);
} else {
WPAS2E = Byte.MIN_VALUE;
}
}

protected final void initWPAS2L(String s) {
if (!s.trim().isEmpty()) {
WPAS2L = Short.parseShort(s);
} else {
WPAS2L = Short.MIN_VALUE;
}
}

protected final void initWPAS2R(String s) {
if (!s.trim().isEmpty()) {
WPAS2R = Byte.parseByte(s);
} else {
WPAS2R = Byte.MIN_VALUE;
}
}

protected final void initWPAS2U(String s) {
if (!s.trim().isEmpty()) {
WPAS2U = Short.parseShort(s);
} else {
WPAS2U = Short.MIN_VALUE;
}
}

protected final void initWPASAL2(String s) {
if (!s.trim().isEmpty()) {
WPASAL2 = Short.parseShort(s);
} else {
WPASAL2 = Short.MIN_VALUE;
}
}

protected final void initWPASE(String s) {
if (!s.trim().isEmpty()) {
WPASE = Byte.parseByte(s);
} else {
WPASE = Byte.MIN_VALUE;
}
}

protected final void initWPASKD(String s) {
if (!s.trim().isEmpty()) {
WPASKD = Byte.parseByte(s);
} else {
WPASKD = Byte.MIN_VALUE;
}
}

protected final void initWPASKE(String s) {
if (!s.trim().isEmpty()) {
WPASKE = Byte.parseByte(s);
} else {
WPASKE = Byte.MIN_VALUE;
}
}

protected final void initWPASKF(String s) {
if (!s.trim().isEmpty()) {
WPASKF = Byte.parseByte(s);
} else {
WPASKF = Byte.MIN_VALUE;
}
}

protected final void initWPASL(String s) {
if (!s.trim().isEmpty()) {
WPASL = Integer.parseInt(s);
} else {
WPASL = Integer.MIN_VALUE;
}
}

protected final void initWPASR(String s) {
if (!s.trim().isEmpty()) {
WPASR = Byte.parseByte(s);
} else {
WPASR = Byte.MIN_VALUE;
}
}

protected final void initWPASU(String s) {
if (!s.trim().isEmpty()) {
WPASU = Integer.parseInt(s);
} else {
WPASU = Integer.MIN_VALUE;
}
}

protected final void initWPAUC(String s) {
if (!s.trim().isEmpty()) {
WPAUC = Short.parseShort(s);
} else {
WPAUC = Short.MIN_VALUE;
}
}

protected final void initWPBIME(String s) {
if (!s.trim().isEmpty()) {
WPBIME = Byte.parseByte(s);
} else {
WPBIME = Byte.MIN_VALUE;
}
}

protected final void initWPBIML(String s) {
if (!s.trim().isEmpty()) {
WPBIML = Short.parseShort(s);
} else {
WPBIML = Short.MIN_VALUE;
}
}

protected final void initWPBIMR(String s) {
if (!s.trim().isEmpty()) {
WPBIMR = Byte.parseByte(s);
} else {
WPBIMR = Byte.MIN_VALUE;
}
}

protected final void initWPBIMU(String s) {
if (!s.trim().isEmpty()) {
WPBIMU = Short.parseShort(s);
} else {
WPBIMU = Short.MIN_VALUE;
}
}

protected final void initWPBPS(String s) {
if (!s.trim().isEmpty()) {
WPBPS = Byte.parseByte(s);
} else {
WPBPS = Byte.MIN_VALUE;
}
}

protected final void initWPBTHA2(String s) {
if (!s.trim().isEmpty()) {
WPBTHA2 = Byte.parseByte(s);
} else {
WPBTHA2 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHP2(String s) {
if (!s.trim().isEmpty()) {
WPBTHP2 = Byte.parseByte(s);
} else {
WPBTHP2 = Byte.MIN_VALUE;
}
}

protected final void initWPBUE(String s) {
if (!s.trim().isEmpty()) {
WPBUE = Byte.parseByte(s);
} else {
WPBUE = Byte.MIN_VALUE;
}
}

protected final void initWPBUL(String s) {
if (!s.trim().isEmpty()) {
WPBUL = Integer.parseInt(s);
} else {
WPBUL = Integer.MIN_VALUE;
}
}

protected final void initWPBUR(String s) {
if (!s.trim().isEmpty()) {
WPBUR = Byte.parseByte(s);
} else {
WPBUR = Byte.MIN_VALUE;
}
}

protected final void initWPBUU(String s) {
if (!s.trim().isEmpty()) {
WPBUU = Integer.parseInt(s);
} else {
WPBUU = Integer.MIN_VALUE;
}
}

protected final void initWPCAMT(String s) {
if (!s.trim().isEmpty()) {
WPCAMT = Short.parseShort(s);
} else {
WPCAMT = Short.MIN_VALUE;
}
}

protected final void initWPCAMT2(String s) {
if (!s.trim().isEmpty()) {
WPCAMT2 = Short.parseShort(s);
} else {
WPCAMT2 = Short.MIN_VALUE;
}
}

protected final void initWPCASK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
WPCASK = false;
} else {
WPCASK = true;
}
}
}

protected final void initWPCB(String s) {
if (!s.trim().isEmpty()) {
WPCB = Integer.parseInt(s);
} else {
WPCB = Integer.MIN_VALUE;
}
}

protected final void initWPCB2(String s) {
if (!s.trim().isEmpty()) {
WPCB2 = Integer.parseInt(s);
} else {
WPCB2 = Integer.MIN_VALUE;
}
}

protected final void initWPCB2E(String s) {
if (!s.trim().isEmpty()) {
WPCB2E = Byte.parseByte(s);
} else {
WPCB2E = Byte.MIN_VALUE;
}
}

protected final void initWPCB2L(String s) {
if (!s.trim().isEmpty()) {
WPCB2L = Integer.parseInt(s);
} else {
WPCB2L = Integer.MIN_VALUE;
}
}

protected final void initWPCB2R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCB2R = false;
} else {
WPCB2R = true;
}
}
}

protected final void initWPCB2U(String s) {
if (!s.trim().isEmpty()) {
WPCB2U = Integer.parseInt(s);
} else {
WPCB2U = Integer.MIN_VALUE;
}
}

protected final void initWPCBE(String s) {
if (!s.trim().isEmpty()) {
WPCBE = Byte.parseByte(s);
} else {
WPCBE = Byte.MIN_VALUE;
}
}

protected final void initWPCBL(String s) {
if (!s.trim().isEmpty()) {
WPCBL = Integer.parseInt(s);
} else {
WPCBL = Integer.MIN_VALUE;
}
}

protected final void initWPCBR(String s) {
if (!s.trim().isEmpty()) {
WPCBR = Byte.parseByte(s);
} else {
WPCBR = Byte.MIN_VALUE;
}
}

protected final void initWPCBU(String s) {
if (!s.trim().isEmpty()) {
WPCBU = Integer.parseInt(s);
} else {
WPCBU = Integer.MIN_VALUE;
}
}

protected final void initWPCEMP2(String s) {
if (!s.trim().isEmpty()) {
WPCEMP2 = Byte.parseByte(s);
} else {
WPCEMP2 = Byte.MIN_VALUE;
}
}

protected final void initWPCJB1(String s) {
if (!s.trim().isEmpty()) {
WPCJB1 = Byte.parseByte(s);
} else {
WPCJB1 = Byte.MIN_VALUE;
}
}

protected final void initWPCJB2(String s) {
if (!s.trim().isEmpty()) {
WPCJB2 = Byte.parseByte(s);
} else {
WPCJB2 = Byte.MIN_VALUE;
}
}

protected final void initWPCJB3(String s) {
if (!s.trim().isEmpty()) {
WPCJB3 = Byte.parseByte(s);
} else {
WPCJB3 = Byte.MIN_VALUE;
}
}

protected final void initWPCJB4(String s) {
if (!s.trim().isEmpty()) {
WPCJB4 = Byte.parseByte(s);
} else {
WPCJB4 = Byte.MIN_VALUE;
}
}

protected final void initWPCON(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCON = false;
} else {
WPCON = true;
}
}
}

protected final void initWPCONS(String s) {
if (!s.trim().isEmpty()) {
WPCONS = Byte.parseByte(s);
} else {
WPCONS = Byte.MIN_VALUE;
}
}

protected final void initWPCONS2(String s) {
if (!s.trim().isEmpty()) {
WPCONS2 = Byte.parseByte(s);
} else {
WPCONS2 = Byte.MIN_VALUE;
}
}

protected final void initWPCOS(String s) {
if (!s.trim().isEmpty()) {
WPCOS = Byte.parseByte(s);
} else {
WPCOS = Byte.MIN_VALUE;
}
}

protected final void initWPCOS2(String s) {
if (!s.trim().isEmpty()) {
WPCOS2 = Byte.parseByte(s);
} else {
WPCOS2 = Byte.MIN_VALUE;
}
}

protected final void initWPCPER(String s) {
if (!s.trim().isEmpty()) {
WPCPER = Byte.parseByte(s);
} else {
WPCPER = Byte.MIN_VALUE;
}
}

protected final void initWPCPER2(String s) {
if (!s.trim().isEmpty()) {
WPCPER2 = Byte.parseByte(s);
} else {
WPCPER2 = Byte.MIN_VALUE;
}
}

protected final void initWPCPS(String s) {
if (!s.trim().isEmpty()) {
WPCPS = Byte.parseByte(s);
} else {
WPCPS = Byte.MIN_VALUE;
}
}

protected final void initWPCPS2(String s) {
if (!s.trim().isEmpty()) {
WPCPS2 = Byte.parseByte(s);
} else {
WPCPS2 = Byte.MIN_VALUE;
}
}

protected final void initWPCPSC(String s) {
if (!s.trim().isEmpty()) {
WPCPSC = Byte.parseByte(s);
} else {
WPCPSC = Byte.MIN_VALUE;
}
}

protected final void initWPCPSC2(String s) {
if (!s.trim().isEmpty()) {
WPCPSC2 = Byte.parseByte(s);
} else {
WPCPSC2 = Byte.MIN_VALUE;
}
}

protected final void initWPCU2E(String s) {
if (!s.trim().isEmpty()) {
WPCU2E = Byte.parseByte(s);
} else {
WPCU2E = Byte.MIN_VALUE;
}
}

protected final void initWPCU2L(String s) {
if (!s.trim().isEmpty()) {
WPCU2L = Integer.parseInt(s);
} else {
WPCU2L = Integer.MIN_VALUE;
}
}

protected final void initWPCU2R(String s) {
if (!s.trim().isEmpty()) {
WPCU2R = Byte.parseByte(s);
} else {
WPCU2R = Byte.MIN_VALUE;
}
}

protected final void initWPCU2U(String s) {
if (!s.trim().isEmpty()) {
WPCU2U = Integer.parseInt(s);
} else {
WPCU2U = Integer.MIN_VALUE;
}
}

protected final void initWPCUE(String s) {
if (!s.trim().isEmpty()) {
WPCUE = Byte.parseByte(s);
} else {
WPCUE = Byte.MIN_VALUE;
}
}

protected final void initWPCUL(String s) {
if (!s.trim().isEmpty()) {
WPCUL = Integer.parseInt(s);
} else {
WPCUL = Integer.MIN_VALUE;
}
}

protected final void initWPCUR(String s) {
if (!s.trim().isEmpty()) {
WPCUR = Byte.parseByte(s);
} else {
WPCUR = Byte.MIN_VALUE;
}
}

protected final void initWPCUU(String s) {
if (!s.trim().isEmpty()) {
WPCUU = Integer.parseInt(s);
} else {
WPCUU = Integer.MIN_VALUE;
}
}

protected final void initWPCUV(String s) {
if (!s.trim().isEmpty()) {
WPCUV = Integer.parseInt(s);
} else {
WPCUV = Integer.MIN_VALUE;
}
}

protected final void initWPCUV2(String s) {
if (!s.trim().isEmpty()) {
WPCUV2 = Integer.parseInt(s);
} else {
WPCUV2 = Integer.MIN_VALUE;
}
}

protected final void initWPDE2(String s) {
if (!s.trim().isEmpty()) {
WPDE2 = Short.parseShort(s);
} else {
WPDE2 = Short.MIN_VALUE;
}
}

protected final void initWPDE3(String s) {
if (!s.trim().isEmpty()) {
WPDE3 = Short.parseShort(s);
} else {
WPDE3 = Short.MIN_VALUE;
}
}

protected final void initWPDESC(String s) {
if (!s.trim().isEmpty()) {
WPDESC = Byte.parseByte(s);
} else {
WPDESC = Byte.MIN_VALUE;
}
}

protected final void initWPDS2(String s) {
if (!s.trim().isEmpty()) {
WPDS2 = Short.parseShort(s);
} else {
WPDS2 = Short.MIN_VALUE;
}
}

protected final void initWPDS3(String s) {
if (!s.trim().isEmpty()) {
WPDS3 = Short.parseShort(s);
} else {
WPDS3 = Short.MIN_VALUE;
}
}

protected final void initWPDSP(String s) {
if (!s.trim().isEmpty()) {
WPDSP = Byte.parseByte(s);
} else {
WPDSP = Byte.MIN_VALUE;
}
}

protected final void initWPDSP2(String s) {
if (!s.trim().isEmpty()) {
WPDSP2 = Byte.parseByte(s);
} else {
WPDSP2 = Byte.MIN_VALUE;
}
}

protected final void initWPDSP2C(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPDSP2C = false;
} else {
WPDSP2C = true;
}
}
}

protected final void initWPDSPC(String s) {
if (!s.trim().isEmpty()) {
WPDSPC = Byte.parseByte(s);
} else {
WPDSPC = Byte.MIN_VALUE;
}
}

protected final void initWPEC(String s) {
if (!s.trim().isEmpty()) {
WPEC = Byte.parseByte(s);
} else {
WPEC = Byte.MIN_VALUE;
}
}

protected final void initWPECA(String s) {
if (!s.trim().isEmpty()) {
WPECA = Byte.parseByte(s);
} else {
WPECA = Byte.MIN_VALUE;
}
}

protected final void initWPECNA(String s) {
if (!s.trim().isEmpty()) {
WPECNA = Integer.parseInt(s);
} else {
WPECNA = Integer.MIN_VALUE;
}
}

protected final void initWPECNA2(String s) {
if (!s.trim().isEmpty()) {
WPECNA2 = Byte.parseByte(s);
} else {
WPECNA2 = Byte.MIN_VALUE;
}
}

protected final void initWPECON(String s) {
if (!s.trim().isEmpty()) {
WPECON = Byte.parseByte(s);
} else {
WPECON = Byte.MIN_VALUE;
}
}

protected final void initWPECON2(String s) {
if (!s.trim().isEmpty()) {
WPECON2 = Byte.parseByte(s);
} else {
WPECON2 = Byte.MIN_VALUE;
}
}

protected final void initWPEFS(String s) {
if (!s.trim().isEmpty()) {
WPEFS = Byte.parseByte(s);
} else {
WPEFS = Byte.MIN_VALUE;
}
}

protected final void initWPEFS2(String s) {
if (!s.trim().isEmpty()) {
WPEFS2 = Byte.parseByte(s);
} else {
WPEFS2 = Byte.MIN_VALUE;
}
}

protected final void initWPEPER2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPEPER2 = false;
} else {
WPEPER2 = true;
}
}
}

protected final void initWPERA2(String s) {
if (!s.trim().isEmpty()) {
WPERA2 = Byte.parseByte(s);
} else {
WPERA2 = Byte.MIN_VALUE;
}
}

protected final void initWPERC2(String s) {
if (!s.trim().isEmpty()) {
WPERC2 = Byte.parseByte(s);
} else {
WPERC2 = Byte.MIN_VALUE;
}
}

protected final void initWPERET2(String s) {
if (!s.trim().isEmpty()) {
WPERET2 = Byte.parseByte(s);
} else {
WPERET2 = Byte.MIN_VALUE;
}
}

protected final void initWPESE(String s) {
if (!s.trim().isEmpty()) {
WPESE = Byte.parseByte(s);
} else {
WPESE = Byte.MIN_VALUE;
}
}

protected final void initWPESL(String s) {
if (!s.trim().isEmpty()) {
WPESL = Short.parseShort(s);
} else {
WPESL = Short.MIN_VALUE;
}
}

protected final void initWPESR(String s) {
if (!s.trim().isEmpty()) {
WPESR = Byte.parseByte(s);
} else {
WPESR = Byte.MIN_VALUE;
}
}

protected final void initWPESU(String s) {
if (!s.trim().isEmpty()) {
WPESU = Short.parseShort(s);
} else {
WPESU = Short.MIN_VALUE;
}
}

protected final void initWPEXA(String s) {
if (!s.trim().isEmpty()) {
WPEXA = Short.parseShort(s);
} else {
WPEXA = Short.MIN_VALUE;
}
}

protected final void initWPEXAE(String s) {
if (!s.trim().isEmpty()) {
WPEXAE = Byte.parseByte(s);
} else {
WPEXAE = Byte.MIN_VALUE;
}
}

protected final void initWPEXAL(String s) {
if (!s.trim().isEmpty()) {
WPEXAL = Short.parseShort(s);
} else {
WPEXAL = Short.MIN_VALUE;
}
}

protected final void initWPEXAR(String s) {
if (!s.trim().isEmpty()) {
WPEXAR = Byte.parseByte(s);
} else {
WPEXAR = Byte.MIN_VALUE;
}
}

protected final void initWPEXAU(String s) {
if (!s.trim().isEmpty()) {
WPEXAU = Integer.parseInt(s);
} else {
WPEXAU = Integer.MIN_VALUE;
}
}

protected final void initWPEXTE(String s) {
if (!s.trim().isEmpty()) {
WPEXTE = Byte.parseByte(s);
} else {
WPEXTE = Byte.MIN_VALUE;
}
}

protected final void initWPEXTL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPEXTL = false;
} else {
WPEXTL = true;
}
}
}

protected final void initWPEXTR(String s) {
if (!s.trim().isEmpty()) {
WPEXTR = Byte.parseByte(s);
} else {
WPEXTR = Byte.MIN_VALUE;
}
}

protected final void initWPEXTU(String s) {
if (!s.trim().isEmpty()) {
WPEXTU = Short.parseShort(s);
} else {
WPEXTU = Short.MIN_VALUE;
}
}

protected final void initWPEXW(String s) {
if (!s.trim().isEmpty()) {
WPEXW = Byte.parseByte(s);
} else {
WPEXW = Byte.MIN_VALUE;
}
}

protected final void initWPFINF(String s) {
if (!s.trim().isEmpty()) {
WPFINF = Byte.parseByte(s);
} else {
WPFINF = Byte.MIN_VALUE;
}
}

protected final void initWPFINF2(String s) {
if (!s.trim().isEmpty()) {
WPFINF2 = Byte.parseByte(s);
} else {
WPFINF2 = Byte.MIN_VALUE;
}
}

protected final void initWPFRAS2(String s) {
if (!s.trim().isEmpty()) {
WPFRAS2 = Byte.parseByte(s);
} else {
WPFRAS2 = Byte.MIN_VALUE;
}
}

protected final void initWPFRUC(String s) {
if (!s.trim().isEmpty()) {
WPFRUC = Byte.parseByte(s);
} else {
WPFRUC = Byte.MIN_VALUE;
}
}

protected final void initWPFSAP2(String s) {
if (!s.trim().isEmpty()) {
WPFSAP2 = Byte.parseByte(s);
} else {
WPFSAP2 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAPC(String s) {
if (!s.trim().isEmpty()) {
WPFSAPC = Byte.parseByte(s);
} else {
WPFSAPC = Byte.MIN_VALUE;
}
}

protected final void initWPFSAV2(String s) {
if (!s.trim().isEmpty()) {
WPFSAV2 = Byte.parseByte(s);
} else {
WPFSAV2 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCP2(String s) {
if (!s.trim().isEmpty()) {
WPFSCP2 = Byte.parseByte(s);
} else {
WPFSCP2 = Byte.MIN_VALUE;
}
}

protected final void initWPHCON(String s) {
if (!s.trim().isEmpty()) {
WPHCON = Byte.parseByte(s);
} else {
WPHCON = Byte.MIN_VALUE;
}
}

protected final void initWPHCON2(String s) {
if (!s.trim().isEmpty()) {
WPHCON2 = Byte.parseByte(s);
} else {
WPHCON2 = Byte.MIN_VALUE;
}
}

protected final void initWPHLWZ(String s) {
if (!s.trim().isEmpty()) {
WPHLWZ = Byte.parseByte(s);
} else {
WPHLWZ = Byte.MIN_VALUE;
}
}

protected final void initWPIFS01(String s) {
if (!s.trim().isEmpty()) {
WPIFS01 = Byte.parseByte(s);
} else {
WPIFS01 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS02(String s) {
if (!s.trim().isEmpty()) {
WPIFS02 = Byte.parseByte(s);
} else {
WPIFS02 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS03(String s) {
if (!s.trim().isEmpty()) {
WPIFS03 = Byte.parseByte(s);
} else {
WPIFS03 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS04(String s) {
if (!s.trim().isEmpty()) {
WPIFS04 = Byte.parseByte(s);
} else {
WPIFS04 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS1(String s) {
if (!s.trim().isEmpty()) {
WPIFS1 = Byte.parseByte(s);
} else {
WPIFS1 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS10(String s) {
if (!s.trim().isEmpty()) {
WPIFS10 = Byte.parseByte(s);
} else {
WPIFS10 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS11(String s) {
if (!s.trim().isEmpty()) {
WPIFS11 = Byte.parseByte(s);
} else {
WPIFS11 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS12(String s) {
if (!s.trim().isEmpty()) {
WPIFS12 = Byte.parseByte(s);
} else {
WPIFS12 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS2(String s) {
if (!s.trim().isEmpty()) {
WPIFS2 = Byte.parseByte(s);
} else {
WPIFS2 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS3(String s) {
if (!s.trim().isEmpty()) {
WPIFS3 = Byte.parseByte(s);
} else {
WPIFS3 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS4(String s) {
if (!s.trim().isEmpty()) {
WPIFS4 = Byte.parseByte(s);
} else {
WPIFS4 = Byte.MIN_VALUE;
}
}

protected final void initWPINF2(String s) {
if (!s.trim().isEmpty()) {
WPINF2 = Byte.parseByte(s);
} else {
WPINF2 = Byte.MIN_VALUE;
}
}

protected final void initWPINF3(String s) {
if (!s.trim().isEmpty()) {
WPINF3 = Byte.parseByte(s);
} else {
WPINF3 = Byte.MIN_VALUE;
}
}

protected final void initWPINFO(String s) {
if (!s.trim().isEmpty()) {
WPINFO = Byte.parseByte(s);
} else {
WPINFO = Byte.MIN_VALUE;
}
}

protected final void initWPINTA(String s) {
if (!s.trim().isEmpty()) {
WPINTA = Byte.parseByte(s);
} else {
WPINTA = Byte.MIN_VALUE;
}
}

protected final void initWPKP(String s) {
if (!s.trim().isEmpty()) {
WPKP = Byte.parseByte(s);
} else {
WPKP = Byte.MIN_VALUE;
}
}

protected final void initWPKP2(String s) {
if (!s.trim().isEmpty()) {
WPKP2 = Byte.parseByte(s);
} else {
WPKP2 = Byte.MIN_VALUE;
}
}

protected final void initWPKP2C(String s) {
if (!s.trim().isEmpty()) {
WPKP2C = Byte.parseByte(s);
} else {
WPKP2C = Byte.MIN_VALUE;
}
}

protected final void initWPKPC(String s) {
if (!s.trim().isEmpty()) {
WPKPC = Byte.parseByte(s);
} else {
WPKPC = Byte.MIN_VALUE;
}
}

protected final void initWPLAC(String s) {
if (!s.trim().isEmpty()) {
WPLAC = Short.parseShort(s);
} else {
WPLAC = Short.MIN_VALUE;
}
}

protected final void initWPLAC2(String s) {
if (!s.trim().isEmpty()) {
WPLAC2 = Short.parseShort(s);
} else {
WPLAC2 = Short.MIN_VALUE;
}
}

protected final void initWPLASM(String s) {
if (!s.trim().isEmpty()) {
WPLASM = Byte.parseByte(s);
} else {
WPLASM = Byte.MIN_VALUE;
}
}

protected final void initWPLASM2(String s) {
if (!s.trim().isEmpty()) {
WPLASM2 = Byte.parseByte(s);
} else {
WPLASM2 = Byte.MIN_VALUE;
}
}

protected final void initWPLASP(String s) {
if (!s.trim().isEmpty()) {
WPLASP = Byte.parseByte(s);
} else {
WPLASP = Byte.MIN_VALUE;
}
}

protected final void initWPLASP2(String s) {
if (!s.trim().isEmpty()) {
WPLASP2 = Byte.parseByte(s);
} else {
WPLASP2 = Byte.MIN_VALUE;
}
}

protected final void initWPLASY(String s) {
if (!s.trim().isEmpty()) {
WPLASY = Short.parseShort(s);
} else {
WPLASY = Short.MIN_VALUE;
}
}

protected final void initWPLASY2(String s) {
if (!s.trim().isEmpty()) {
WPLASY2 = Short.parseShort(s);
} else {
WPLASY2 = Short.MIN_VALUE;
}
}

protected final void initWPLCOM2(String s) {
if (!s.trim().isEmpty()) {
WPLCOM2 = Byte.parseByte(s);
} else {
WPLCOM2 = Byte.MIN_VALUE;
}
}

protected final void initWPLCOY2(String s) {
if (!s.trim().isEmpty()) {
WPLCOY2 = Short.parseShort(s);
} else {
WPLCOY2 = Short.MIN_VALUE;
}
}

protected final void initWPLLJM(String s) {
if (!s.trim().isEmpty()) {
WPLLJM = Byte.parseByte(s);
} else {
WPLLJM = Byte.MIN_VALUE;
}
}

protected final void initWPLLJY(String s) {
if (!s.trim().isEmpty()) {
WPLLJY = Short.parseShort(s);
} else {
WPLLJY = Short.MIN_VALUE;
}
}

protected final void initWPLP2AE(String s) {
if (!s.trim().isEmpty()) {
WPLP2AE = Byte.parseByte(s);
} else {
WPLP2AE = Byte.MIN_VALUE;
}
}

protected final void initWPLP2AL(String s) {
if (!s.trim().isEmpty()) {
WPLP2AL = Integer.parseInt(s);
} else {
WPLP2AL = Integer.MIN_VALUE;
}
}

protected final void initWPLP2AR(String s) {
if (!s.trim().isEmpty()) {
WPLP2AR = Byte.parseByte(s);
} else {
WPLP2AR = Byte.MIN_VALUE;
}
}

protected final void initWPLP2AU(String s) {
if (!s.trim().isEmpty()) {
WPLP2AU = Integer.parseInt(s);
} else {
WPLP2AU = Integer.MIN_VALUE;
}
}

protected final void initWPLPA(String s) {
if (!s.trim().isEmpty()) {
WPLPA = Integer.parseInt(s);
} else {
WPLPA = Integer.MIN_VALUE;
}
}

protected final void initWPLPA2(String s) {
if (!s.trim().isEmpty()) {
WPLPA2 = Integer.parseInt(s);
} else {
WPLPA2 = Integer.MIN_VALUE;
}
}

protected final void initWPLPAE(String s) {
if (!s.trim().isEmpty()) {
WPLPAE = Byte.parseByte(s);
} else {
WPLPAE = Byte.MIN_VALUE;
}
}

protected final void initWPLPAL(String s) {
if (!s.trim().isEmpty()) {
WPLPAL = Integer.parseInt(s);
} else {
WPLPAL = Integer.MIN_VALUE;
}
}

protected final void initWPLPAR(String s) {
if (!s.trim().isEmpty()) {
WPLPAR = Byte.parseByte(s);
} else {
WPLPAR = Byte.MIN_VALUE;
}
}

protected final void initWPLPAU(String s) {
if (!s.trim().isEmpty()) {
WPLPAU = Integer.parseInt(s);
} else {
WPLPAU = Integer.MIN_VALUE;
}
}

protected final void initWPLPE(String s) {
if (!s.trim().isEmpty()) {
WPLPE = Byte.parseByte(s);
} else {
WPLPE = Byte.MIN_VALUE;
}
}

protected final void initWPLPE2(String s) {
if (!s.trim().isEmpty()) {
WPLPE2 = Byte.parseByte(s);
} else {
WPLPE2 = Byte.MIN_VALUE;
}
}

protected final void initWPLPTE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLPTE = false;
} else {
WPLPTE = true;
}
}
}

protected final void initWPLPTL(String s) {
if (!s.trim().isEmpty()) {
WPLPTL = Short.parseShort(s);
} else {
WPLPTL = Short.MIN_VALUE;
}
}

protected final void initWPLPTR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLPTR = false;
} else {
WPLPTR = true;
}
}
}

protected final void initWPLPTU(String s) {
if (!s.trim().isEmpty()) {
WPLPTU = Short.parseShort(s);
} else {
WPLPTU = Short.MIN_VALUE;
}
}

protected final void initWPLRCM(String s) {
if (!s.trim().isEmpty()) {
WPLRCM = Byte.parseByte(s);
} else {
WPLRCM = Byte.MIN_VALUE;
}
}

protected final void initWPLRCM2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLRCM2 = false;
} else {
WPLRCM2 = true;
}
}
}

protected final void initWPLRCY(String s) {
if (!s.trim().isEmpty()) {
WPLRCY = Short.parseShort(s);
} else {
WPLRCY = Short.MIN_VALUE;
}
}

protected final void initWPLRCY2(String s) {
if (!s.trim().isEmpty()) {
WPLRCY2 = Short.parseShort(s);
} else {
WPLRCY2 = Short.MIN_VALUE;
}
}

protected final void initWPLU2E(String s) {
if (!s.trim().isEmpty()) {
WPLU2E = Byte.parseByte(s);
} else {
WPLU2E = Byte.MIN_VALUE;
}
}

protected final void initWPLU2L(String s) {
if (!s.trim().isEmpty()) {
WPLU2L = Integer.parseInt(s);
} else {
WPLU2L = Integer.MIN_VALUE;
}
}

protected final void initWPLU2R(String s) {
if (!s.trim().isEmpty()) {
WPLU2R = Byte.parseByte(s);
} else {
WPLU2R = Byte.MIN_VALUE;
}
}

protected final void initWPLU2U(String s) {
if (!s.trim().isEmpty()) {
WPLU2U = Integer.parseInt(s);
} else {
WPLU2U = Integer.MIN_VALUE;
}
}

protected final void initWPLUE(String s) {
if (!s.trim().isEmpty()) {
WPLUE = Byte.parseByte(s);
} else {
WPLUE = Byte.MIN_VALUE;
}
}

protected final void initWPLUL(String s) {
if (!s.trim().isEmpty()) {
WPLUL = Integer.parseInt(s);
} else {
WPLUL = Integer.MIN_VALUE;
}
}

protected final void initWPLUMP2(String s) {
if (!s.trim().isEmpty()) {
WPLUMP2 = Integer.parseInt(s);
} else {
WPLUMP2 = Integer.MIN_VALUE;
}
}

protected final void initWPLUR(String s) {
if (!s.trim().isEmpty()) {
WPLUR = Byte.parseByte(s);
} else {
WPLUR = Byte.MIN_VALUE;
}
}

protected final void initWPLUU(String s) {
if (!s.trim().isEmpty()) {
WPLUU = Integer.parseInt(s);
} else {
WPLUU = Integer.MIN_VALUE;
}
}

protected final void initWPMC2(String s) {
if (!s.trim().isEmpty()) {
WPMC2 = Byte.parseByte(s);
} else {
WPMC2 = Byte.MIN_VALUE;
}
}

protected final void initWPMCA2(String s) {
if (!s.trim().isEmpty()) {
WPMCA2 = Short.parseShort(s);
} else {
WPMCA2 = Short.MIN_VALUE;
}
}

protected final void initWPMCAF2(String s) {
if (!s.trim().isEmpty()) {
WPMCAF2 = Byte.parseByte(s);
} else {
WPMCAF2 = Byte.MIN_VALUE;
}
}

protected final void initWPMCON2(String s) {
if (!s.trim().isEmpty()) {
WPMCON2 = Byte.parseByte(s);
} else {
WPMCON2 = Byte.MIN_VALUE;
}
}

protected final void initWPMEC2(String s) {
if (!s.trim().isEmpty()) {
WPMEC2 = Byte.parseByte(s);
} else {
WPMEC2 = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC(String s) {
if (!s.trim().isEmpty()) {
WPMFRC = Byte.parseByte(s);
} else {
WPMFRC = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC2(String s) {
if (!s.trim().isEmpty()) {
WPMFRC2 = Byte.parseByte(s);
} else {
WPMFRC2 = Byte.MIN_VALUE;
}
}

protected final void initWPMHE(String s) {
if (!s.trim().isEmpty()) {
WPMHE = Byte.parseByte(s);
} else {
WPMHE = Byte.MIN_VALUE;
}
}

protected final void initWPMHL(String s) {
if (!s.trim().isEmpty()) {
WPMHL = Short.parseShort(s);
} else {
WPMHL = Short.MIN_VALUE;
}
}

protected final void initWPMHR(String s) {
if (!s.trim().isEmpty()) {
WPMHR = Byte.parseByte(s);
} else {
WPMHR = Byte.MIN_VALUE;
}
}

protected final void initWPMHU(String s) {
if (!s.trim().isEmpty()) {
WPMHU = Short.parseShort(s);
} else {
WPMHU = Short.MIN_VALUE;
}
}

protected final void initWPMLAS(String s) {
if (!s.trim().isEmpty()) {
WPMLAS = Integer.parseInt(s);
} else {
WPMLAS = Integer.MIN_VALUE;
}
}

protected final void initWPMLAS2(String s) {
if (!s.trim().isEmpty()) {
WPMLAS2 = Integer.parseInt(s);
} else {
WPMLAS2 = Integer.MIN_VALUE;
}
}

protected final void initWPMMIN2(String s) {
if (!s.trim().isEmpty()) {
WPMMIN2 = Byte.parseByte(s);
} else {
WPMMIN2 = Byte.MIN_VALUE;
}
}

protected final void initWPMRC(String s) {
if (!s.trim().isEmpty()) {
WPMRC = Short.parseShort(s);
} else {
WPMRC = Short.MIN_VALUE;
}
}

protected final void initWPMRC2(String s) {
if (!s.trim().isEmpty()) {
WPMRC2 = Short.parseShort(s);
} else {
WPMRC2 = Short.MIN_VALUE;
}
}

protected final void initWPMRCP(String s) {
if (!s.trim().isEmpty()) {
WPMRCP = Byte.parseByte(s);
} else {
WPMRCP = Byte.MIN_VALUE;
}
}

protected final void initWPMRCP2(String s) {
if (!s.trim().isEmpty()) {
WPMRCP2 = Byte.parseByte(s);
} else {
WPMRCP2 = Byte.MIN_VALUE;
}
}

protected final void initWPMSC(String s) {
if (!s.trim().isEmpty()) {
WPMSC = Byte.parseByte(s);
} else {
WPMSC = Byte.MIN_VALUE;
}
}

protected final void initWPMSC2(String s) {
if (!s.trim().isEmpty()) {
WPMSC2 = Byte.parseByte(s);
} else {
WPMSC2 = Byte.MIN_VALUE;
}
}

protected final void initWPMSC3(String s) {
if (!s.trim().isEmpty()) {
WPMSC3 = Byte.parseByte(s);
} else {
WPMSC3 = Byte.MIN_VALUE;
}
}

protected final void initWPMUC(String s) {
if (!s.trim().isEmpty()) {
WPMUC = Byte.parseByte(s);
} else {
WPMUC = Byte.MIN_VALUE;
}
}

protected final void initWPMUC2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMUC2 = false;
} else {
WPMUC2 = true;
}
}
}

protected final void initWPNIFP(String s) {
if (!s.trim().isEmpty()) {
WPNIFP = Byte.parseByte(s);
} else {
WPNIFP = Byte.MIN_VALUE;
}
}

protected final void initWPNIFP2(String s) {
if (!s.trim().isEmpty()) {
WPNIFP2 = Byte.parseByte(s);
} else {
WPNIFP2 = Byte.MIN_VALUE;
}
}

protected final void initWPNIRR2(String s) {
if (!s.trim().isEmpty()) {
WPNIRR2 = Byte.parseByte(s);
} else {
WPNIRR2 = Byte.MIN_VALUE;
}
}

protected final void initWPNOSC(String s) {
if (!s.trim().isEmpty()) {
WPNOSC = Byte.parseByte(s);
} else {
WPNOSC = Byte.MIN_VALUE;
}
}

protected final void initWPNRA2(String s) {
if (!s.trim().isEmpty()) {
WPNRA2 = Byte.parseByte(s);
} else {
WPNRA2 = Byte.MIN_VALUE;
}
}

protected final void initWPOARS(String s) {
if (!s.trim().isEmpty()) {
WPOARS = Byte.parseByte(s);
} else {
WPOARS = Byte.MIN_VALUE;
}
}

protected final void initWPOARS2(String s) {
if (!s.trim().isEmpty()) {
WPOARS2 = Byte.parseByte(s);
} else {
WPOARS2 = Byte.MIN_VALUE;
}
}

protected final void initWPPA(String s) {
if (!s.trim().isEmpty()) {
WPPA = Integer.parseInt(s);
} else {
WPPA = Integer.MIN_VALUE;
}
}

protected final void initWPPA2(String s) {
if (!s.trim().isEmpty()) {
WPPA2 = Integer.parseInt(s);
} else {
WPPA2 = Integer.MIN_VALUE;
}
}

protected final void initWPPA2AE(String s) {
if (!s.trim().isEmpty()) {
WPPA2AE = Byte.parseByte(s);
} else {
WPPA2AE = Byte.MIN_VALUE;
}
}

protected final void initWPPA2AL(String s) {
if (!s.trim().isEmpty()) {
WPPA2AL = Integer.parseInt(s);
} else {
WPPA2AL = Integer.MIN_VALUE;
}
}

protected final void initWPPA2AR(String s) {
if (!s.trim().isEmpty()) {
WPPA2AR = Byte.parseByte(s);
} else {
WPPA2AR = Byte.MIN_VALUE;
}
}

protected final void initWPPA2AU(String s) {
if (!s.trim().isEmpty()) {
WPPA2AU = Integer.parseInt(s);
} else {
WPPA2AU = Integer.MIN_VALUE;
}
}

protected final void initWPPA2TE(String s) {
if (!s.trim().isEmpty()) {
WPPA2TE = Byte.parseByte(s);
} else {
WPPA2TE = Byte.MIN_VALUE;
}
}

protected final void initWPPA2TL(String s) {
if (!s.trim().isEmpty()) {
WPPA2TL = Short.parseShort(s);
} else {
WPPA2TL = Short.MIN_VALUE;
}
}

protected final void initWPPA2TR(String s) {
if (!s.trim().isEmpty()) {
WPPA2TR = Byte.parseByte(s);
} else {
WPPA2TR = Byte.MIN_VALUE;
}
}

protected final void initWPPA2TU(String s) {
if (!s.trim().isEmpty()) {
WPPA2TU = Short.parseShort(s);
} else {
WPPA2TU = Short.MIN_VALUE;
}
}

protected final void initWPPA3(String s) {
if (!s.trim().isEmpty()) {
WPPA3 = Short.parseShort(s);
} else {
WPPA3 = Short.MIN_VALUE;
}
}

protected final void initWPPA3AE(String s) {
if (!s.trim().isEmpty()) {
WPPA3AE = Byte.parseByte(s);
} else {
WPPA3AE = Byte.MIN_VALUE;
}
}

protected final void initWPPA3AL(String s) {
if (!s.trim().isEmpty()) {
WPPA3AL = Short.parseShort(s);
} else {
WPPA3AL = Short.MIN_VALUE;
}
}

protected final void initWPPA3AR(String s) {
if (!s.trim().isEmpty()) {
WPPA3AR = Byte.parseByte(s);
} else {
WPPA3AR = Byte.MIN_VALUE;
}
}

protected final void initWPPA3AU(String s) {
if (!s.trim().isEmpty()) {
WPPA3AU = Short.parseShort(s);
} else {
WPPA3AU = Short.MIN_VALUE;
}
}

protected final void initWPPA3TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPA3TE = false;
} else {
WPPA3TE = true;
}
}
}

protected final void initWPPA3TL(String s) {
if (!s.trim().isEmpty()) {
WPPA3TL = Integer.parseInt(s);
} else {
WPPA3TL = Integer.MIN_VALUE;
}
}

protected final void initWPPA3TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPA3TR = false;
} else {
WPPA3TR = true;
}
}
}

protected final void initWPPA3TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPPA3TU = false;
} else {
WPPA3TU = true;
}
}
}

protected final void initWPPAAE(String s) {
if (!s.trim().isEmpty()) {
WPPAAE = Byte.parseByte(s);
} else {
WPPAAE = Byte.MIN_VALUE;
}
}

protected final void initWPPAAL(String s) {
if (!s.trim().isEmpty()) {
WPPAAL = Integer.parseInt(s);
} else {
WPPAAL = Integer.MIN_VALUE;
}
}

protected final void initWPPAAR(String s) {
if (!s.trim().isEmpty()) {
WPPAAR = Byte.parseByte(s);
} else {
WPPAAR = Byte.MIN_VALUE;
}
}

protected final void initWPPAAU(String s) {
if (!s.trim().isEmpty()) {
WPPAAU = Integer.parseInt(s);
} else {
WPPAAU = Integer.MIN_VALUE;
}
}

protected final void initWPPAM(String s) {
if (!s.trim().isEmpty()) {
WPPAM = Byte.parseByte(s);
} else {
WPPAM = Byte.MIN_VALUE;
}
}

protected final void initWPPAM2(String s) {
if (!s.trim().isEmpty()) {
WPPAM2 = Byte.parseByte(s);
} else {
WPPAM2 = Byte.MIN_VALUE;
}
}

protected final void initWPPAM3(String s) {
if (!s.trim().isEmpty()) {
WPPAM3 = Byte.parseByte(s);
} else {
WPPAM3 = Byte.MIN_VALUE;
}
}

protected final void initWPPATE(String s) {
if (!s.trim().isEmpty()) {
WPPATE = Byte.parseByte(s);
} else {
WPPATE = Byte.MIN_VALUE;
}
}

protected final void initWPPATL(String s) {
if (!s.trim().isEmpty()) {
WPPATL = Integer.parseInt(s);
} else {
WPPATL = Integer.MIN_VALUE;
}
}

protected final void initWPPATR(String s) {
if (!s.trim().isEmpty()) {
WPPATR = Byte.parseByte(s);
} else {
WPPATR = Byte.MIN_VALUE;
}
}

protected final void initWPPATU(String s) {
if (!s.trim().isEmpty()) {
WPPATU = Integer.parseInt(s);
} else {
WPPATU = Integer.MIN_VALUE;
}
}

protected final void initWPPAY2(String s) {
if (!s.trim().isEmpty()) {
WPPAY2 = Byte.parseByte(s);
} else {
WPPAY2 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY3(String s) {
if (!s.trim().isEmpty()) {
WPPAY3 = Byte.parseByte(s);
} else {
WPPAY3 = Byte.MIN_VALUE;
}
}

protected final void initWPPCON2(String s) {
if (!s.trim().isEmpty()) {
WPPCON2 = Byte.parseByte(s);
} else {
WPPCON2 = Byte.MIN_VALUE;
}
}

protected final void initWPPDES(String s) {
if (!s.trim().isEmpty()) {
WPPDES = Byte.parseByte(s);
} else {
WPPDES = Byte.MIN_VALUE;
}
}

protected final void initWPPDES2(String s) {
if (!s.trim().isEmpty()) {
WPPDES2 = Byte.parseByte(s);
} else {
WPPDES2 = Byte.MIN_VALUE;
}
}

protected final void initWPPDOC(String s) {
if (!s.trim().isEmpty()) {
WPPDOC = Byte.parseByte(s);
} else {
WPPDOC = Byte.MIN_VALUE;
}
}

protected final void initWPPE2AE(String s) {
if (!s.trim().isEmpty()) {
WPPE2AE = Byte.parseByte(s);
} else {
WPPE2AE = Byte.MIN_VALUE;
}
}

protected final void initWPPE2AL(String s) {
if (!s.trim().isEmpty()) {
WPPE2AL = Short.parseShort(s);
} else {
WPPE2AL = Short.MIN_VALUE;
}
}

protected final void initWPPE2AR(String s) {
if (!s.trim().isEmpty()) {
WPPE2AR = Byte.parseByte(s);
} else {
WPPE2AR = Byte.MIN_VALUE;
}
}

protected final void initWPPE2AU(String s) {
if (!s.trim().isEmpty()) {
WPPE2AU = Integer.parseInt(s);
} else {
WPPE2AU = Integer.MIN_VALUE;
}
}

protected final void initWPPEAE(String s) {
if (!s.trim().isEmpty()) {
WPPEAE = Byte.parseByte(s);
} else {
WPPEAE = Byte.MIN_VALUE;
}
}

protected final void initWPPEAL(String s) {
if (!s.trim().isEmpty()) {
WPPEAL = Integer.parseInt(s);
} else {
WPPEAL = Integer.MIN_VALUE;
}
}

protected final void initWPPEAR(String s) {
if (!s.trim().isEmpty()) {
WPPEAR = Byte.parseByte(s);
} else {
WPPEAR = Byte.MIN_VALUE;
}
}

protected final void initWPPEAU(String s) {
if (!s.trim().isEmpty()) {
WPPEAU = Integer.parseInt(s);
} else {
WPPEAU = Integer.MIN_VALUE;
}
}

protected final void initWPPENB2(String s) {
if (!s.trim().isEmpty()) {
WPPENB2 = Integer.parseInt(s);
} else {
WPPENB2 = Integer.MIN_VALUE;
}
}

protected final void initWPPEPR(String s) {
if (!s.trim().isEmpty()) {
WPPEPR = Byte.parseByte(s);
} else {
WPPEPR = Byte.MIN_VALUE;
}
}

protected final void initWPPER(String s) {
if (!s.trim().isEmpty()) {
WPPER = Byte.parseByte(s);
} else {
WPPER = Byte.MIN_VALUE;
}
}

protected final void initWPPERC2(String s) {
if (!s.trim().isEmpty()) {
WPPERC2 = Byte.parseByte(s);
} else {
WPPERC2 = Byte.MIN_VALUE;
}
}

protected final void initWPPETE(String s) {
if (!s.trim().isEmpty()) {
WPPETE = Byte.parseByte(s);
} else {
WPPETE = Byte.MIN_VALUE;
}
}

protected final void initWPPETL(String s) {
if (!s.trim().isEmpty()) {
WPPETL = Integer.parseInt(s);
} else {
WPPETL = Integer.MIN_VALUE;
}
}

protected final void initWPPETR(String s) {
if (!s.trim().isEmpty()) {
WPPETR = Byte.parseByte(s);
} else {
WPPETR = Byte.MIN_VALUE;
}
}

protected final void initWPPETU(String s) {
if (!s.trim().isEmpty()) {
WPPETU = Integer.parseInt(s);
} else {
WPPETU = Integer.MIN_VALUE;
}
}

protected final void initWPPEXP(String s) {
if (!s.trim().isEmpty()) {
WPPEXP = Byte.parseByte(s);
} else {
WPPEXP = Byte.MIN_VALUE;
}
}

protected final void initWPPEXP2(String s) {
if (!s.trim().isEmpty()) {
WPPEXP2 = Byte.parseByte(s);
} else {
WPPEXP2 = Byte.MIN_VALUE;
}
}

protected final void initWPPFE(String s) {
if (!s.trim().isEmpty()) {
WPPFE = Byte.parseByte(s);
} else {
WPPFE = Byte.MIN_VALUE;
}
}

protected final void initWPPFL(String s) {
if (!s.trim().isEmpty()) {
WPPFL = Integer.parseInt(s);
} else {
WPPFL = Integer.MIN_VALUE;
}
}

protected final void initWPPFR(String s) {
if (!s.trim().isEmpty()) {
WPPFR = Byte.parseByte(s);
} else {
WPPFR = Byte.MIN_VALUE;
}
}

protected final void initWPPFU(String s) {
if (!s.trim().isEmpty()) {
WPPFU = Integer.parseInt(s);
} else {
WPPFU = Integer.MIN_VALUE;
}
}

protected final void initWPPFVA2(String s) {
if (!s.trim().isEmpty()) {
WPPFVA2 = Short.parseShort(s);
} else {
WPPFVA2 = Short.MIN_VALUE;
}
}

protected final void initWPPLON(String s) {
if (!s.trim().isEmpty()) {
WPPLON = Byte.parseByte(s);
} else {
WPPLON = Byte.MIN_VALUE;
}
}

protected final void initWPPLON2(String s) {
if (!s.trim().isEmpty()) {
WPPLON2 = Byte.parseByte(s);
} else {
WPPLON2 = Byte.MIN_VALUE;
}
}

protected final void initWPPLP2(String s) {
if (!s.trim().isEmpty()) {
WPPLP2 = Byte.parseByte(s);
} else {
WPPLP2 = Byte.MIN_VALUE;
}
}

protected final void initWPPLPH2(String s) {
if (!s.trim().isEmpty()) {
WPPLPH2 = Byte.parseByte(s);
} else {
WPPLPH2 = Byte.MIN_VALUE;
}
}

protected final void initWPPRE(String s) {
if (!s.trim().isEmpty()) {
WPPRE = Byte.parseByte(s);
} else {
WPPRE = Byte.MIN_VALUE;
}
}

protected final void initWPPRL(String s) {
if (!s.trim().isEmpty()) {
WPPRL = Integer.parseInt(s);
} else {
WPPRL = Integer.MIN_VALUE;
}
}

protected final void initWPPRPE(String s) {
if (!s.trim().isEmpty()) {
WPPRPE = Byte.parseByte(s);
} else {
WPPRPE = Byte.MIN_VALUE;
}
}

protected final void initWPPRR(String s) {
if (!s.trim().isEmpty()) {
WPPRR = Byte.parseByte(s);
} else {
WPPRR = Byte.MIN_VALUE;
}
}

protected final void initWPPRU(String s) {
if (!s.trim().isEmpty()) {
WPPRU = Integer.parseInt(s);
} else {
WPPRU = Integer.MIN_VALUE;
}
}

protected final void initWPPS(String s) {
if (!s.trim().isEmpty()) {
WPPS = Byte.parseByte(s);
} else {
WPPS = Byte.MIN_VALUE;
}
}

protected final void initWPPSAL2(String s) {
if (!s.trim().isEmpty()) {
WPPSAL2 = Byte.parseByte(s);
} else {
WPPSAL2 = Byte.MIN_VALUE;
}
}

protected final void initWPPSM1(String s) {
if (!s.trim().isEmpty()) {
WPPSM1 = Byte.parseByte(s);
} else {
WPPSM1 = Byte.MIN_VALUE;
}
}

protected final void initWPPSM2(String s) {
if (!s.trim().isEmpty()) {
WPPSM2 = Byte.parseByte(s);
} else {
WPPSM2 = Byte.MIN_VALUE;
}
}

protected final void initWPPSMM1(String s) {
if (!s.trim().isEmpty()) {
WPPSMM1 = Byte.parseByte(s);
} else {
WPPSMM1 = Byte.MIN_VALUE;
}
}

protected final void initWPPSMM2(String s) {
if (!s.trim().isEmpty()) {
WPPSMM2 = Byte.parseByte(s);
} else {
WPPSMM2 = Byte.MIN_VALUE;
}
}

protected final void initWPPTOP2(String s) {
if (!s.trim().isEmpty()) {
WPPTOP2 = Byte.parseByte(s);
} else {
WPPTOP2 = Byte.MIN_VALUE;
}
}

protected final void initWPPTP2(String s) {
if (!s.trim().isEmpty()) {
WPPTP2 = Byte.parseByte(s);
} else {
WPPTP2 = Byte.MIN_VALUE;
}
}

protected final void initWPPW(String s) {
if (!s.trim().isEmpty()) {
WPPW = Byte.parseByte(s);
} else {
WPPW = Byte.MIN_VALUE;
}
}

protected final void initWPPW2ME(String s) {
if (!s.trim().isEmpty()) {
WPPW2ME = Byte.parseByte(s);
} else {
WPPW2ME = Byte.MIN_VALUE;
}
}

protected final void initWPPW2ML(String s) {
if (!s.trim().isEmpty()) {
WPPW2ML = Byte.parseByte(s);
} else {
WPPW2ML = Byte.MIN_VALUE;
}
}

protected final void initWPPW2MR(String s) {
if (!s.trim().isEmpty()) {
WPPW2MR = Byte.parseByte(s);
} else {
WPPW2MR = Byte.MIN_VALUE;
}
}

protected final void initWPPW2MU(String s) {
if (!s.trim().isEmpty()) {
WPPW2MU = Byte.parseByte(s);
} else {
WPPW2MU = Byte.MIN_VALUE;
}
}

protected final void initWPPW2OE(String s) {
if (!s.trim().isEmpty()) {
WPPW2OE = Byte.parseByte(s);
} else {
WPPW2OE = Byte.MIN_VALUE;
}
}

protected final void initWPPW2OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPPW2OL = false;
} else {
WPPW2OL = true;
}
}
}

protected final void initWPPW2OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPW2OR = false;
} else {
WPPW2OR = true;
}
}
}

protected final void initWPPW2OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPPW2OU = false;
} else {
WPPW2OU = true;
}
}
}

protected final void initWPPW2WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPW2WE = false;
} else {
WPPW2WE = true;
}
}
}

protected final void initWPPW2WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
WPPW2WL = false;
} else {
WPPW2WL = true;
}
}
}

protected final void initWPPW2WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPW2WR = false;
} else {
WPPW2WR = true;
}
}
}

protected final void initWPPW2WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
WPPW2WU = false;
} else {
WPPW2WU = true;
}
}
}

protected final void initWPPWME(String s) {
if (!s.trim().isEmpty()) {
WPPWME = Byte.parseByte(s);
} else {
WPPWME = Byte.MIN_VALUE;
}
}

protected final void initWPPWML(String s) {
if (!s.trim().isEmpty()) {
WPPWML = Short.parseShort(s);
} else {
WPPWML = Short.MIN_VALUE;
}
}

protected final void initWPPWMR(String s) {
if (!s.trim().isEmpty()) {
WPPWMR = Byte.parseByte(s);
} else {
WPPWMR = Byte.MIN_VALUE;
}
}

protected final void initWPPWMU(String s) {
if (!s.trim().isEmpty()) {
WPPWMU = Short.parseShort(s);
} else {
WPPWMU = Short.MIN_VALUE;
}
}

protected final void initWPPWOE(String s) {
if (!s.trim().isEmpty()) {
WPPWOE = Byte.parseByte(s);
} else {
WPPWOE = Byte.MIN_VALUE;
}
}

protected final void initWPPWOL(String s) {
if (!s.trim().isEmpty()) {
WPPWOL = Byte.parseByte(s);
} else {
WPPWOL = Byte.MIN_VALUE;
}
}

protected final void initWPPWOR(String s) {
if (!s.trim().isEmpty()) {
WPPWOR = Byte.parseByte(s);
} else {
WPPWOR = Byte.MIN_VALUE;
}
}

protected final void initWPPWOU(String s) {
if (!s.trim().isEmpty()) {
WPPWOU = Short.parseShort(s);
} else {
WPPWOU = Short.MIN_VALUE;
}
}

protected final void initWPPWP(String s) {
if (!s.trim().isEmpty()) {
WPPWP = Byte.parseByte(s);
} else {
WPPWP = Byte.MIN_VALUE;
}
}

protected final void initWPPWP2(String s) {
if (!s.trim().isEmpty()) {
WPPWP2 = Byte.parseByte(s);
} else {
WPPWP2 = Byte.MIN_VALUE;
}
}

protected final void initWPPWP3(String s) {
if (!s.trim().isEmpty()) {
WPPWP3 = Byte.parseByte(s);
} else {
WPPWP3 = Byte.MIN_VALUE;
}
}

protected final void initWPPWR(String s) {
if (!s.trim().isEmpty()) {
WPPWR = Integer.parseInt(s);
} else {
WPPWR = Integer.MIN_VALUE;
}
}

protected final void initWPPWR2(String s) {
if (!s.trim().isEmpty()) {
WPPWR2 = Short.parseShort(s);
} else {
WPPWR2 = Short.MIN_VALUE;
}
}

protected final void initWPPWR3(String s) {
if (!s.trim().isEmpty()) {
WPPWR3 = Short.parseShort(s);
} else {
WPPWR3 = Short.MIN_VALUE;
}
}

protected final void initWPPWWE(String s) {
if (!s.trim().isEmpty()) {
WPPWWE = Byte.parseByte(s);
} else {
WPPWWE = Byte.MIN_VALUE;
}
}

protected final void initWPPWWL(String s) {
if (!s.trim().isEmpty()) {
WPPWWL = Short.parseShort(s);
} else {
WPPWWL = Short.MIN_VALUE;
}
}

protected final void initWPPWWR(String s) {
if (!s.trim().isEmpty()) {
WPPWWR = Byte.parseByte(s);
} else {
WPPWWR = Byte.MIN_VALUE;
}
}

protected final void initWPPWWU(String s) {
if (!s.trim().isEmpty()) {
WPPWWU = Short.parseShort(s);
} else {
WPPWWU = Short.MIN_VALUE;
}
}

protected final void initWPPY2ME(String s) {
if (!s.trim().isEmpty()) {
WPPY2ME = Byte.parseByte(s);
} else {
WPPY2ME = Byte.MIN_VALUE;
}
}

protected final void initWPPY2ML(String s) {
if (!s.trim().isEmpty()) {
WPPY2ML = Short.parseShort(s);
} else {
WPPY2ML = Short.MIN_VALUE;
}
}

protected final void initWPPY2MR(String s) {
if (!s.trim().isEmpty()) {
WPPY2MR = Byte.parseByte(s);
} else {
WPPY2MR = Byte.MIN_VALUE;
}
}

protected final void initWPPY2MU(String s) {
if (!s.trim().isEmpty()) {
WPPY2MU = Short.parseShort(s);
} else {
WPPY2MU = Short.MIN_VALUE;
}
}

protected final void initWPPY2OE(String s) {
if (!s.trim().isEmpty()) {
WPPY2OE = Byte.parseByte(s);
} else {
WPPY2OE = Byte.MIN_VALUE;
}
}

protected final void initWPPY2OL(String s) {
if (!s.trim().isEmpty()) {
WPPY2OL = Short.parseShort(s);
} else {
WPPY2OL = Short.MIN_VALUE;
}
}

protected final void initWPPY2OR(String s) {
if (!s.trim().isEmpty()) {
WPPY2OR = Byte.parseByte(s);
} else {
WPPY2OR = Byte.MIN_VALUE;
}
}

protected final void initWPPY2OU(String s) {
if (!s.trim().isEmpty()) {
WPPY2OU = Byte.parseByte(s);
} else {
WPPY2OU = Byte.MIN_VALUE;
}
}

protected final void initWPPY2WE(String s) {
if (!s.trim().isEmpty()) {
WPPY2WE = Byte.parseByte(s);
} else {
WPPY2WE = Byte.MIN_VALUE;
}
}

protected final void initWPPY2WL(String s) {
if (!s.trim().isEmpty()) {
WPPY2WL = Byte.parseByte(s);
} else {
WPPY2WL = Byte.MIN_VALUE;
}
}

protected final void initWPPY2WR(String s) {
if (!s.trim().isEmpty()) {
WPPY2WR = Byte.parseByte(s);
} else {
WPPY2WR = Byte.MIN_VALUE;
}
}

protected final void initWPPY2WU(String s) {
if (!s.trim().isEmpty()) {
WPPY2WU = Byte.parseByte(s);
} else {
WPPY2WU = Byte.MIN_VALUE;
}
}

protected final void initWPPY2YE(String s) {
if (!s.trim().isEmpty()) {
WPPY2YE = Byte.parseByte(s);
} else {
WPPY2YE = Byte.MIN_VALUE;
}
}

protected final void initWPPY2YL(String s) {
if (!s.trim().isEmpty()) {
WPPY2YL = Short.parseShort(s);
} else {
WPPY2YL = Short.MIN_VALUE;
}
}

protected final void initWPPY2YR(String s) {
if (!s.trim().isEmpty()) {
WPPY2YR = Byte.parseByte(s);
} else {
WPPY2YR = Byte.MIN_VALUE;
}
}

protected final void initWPPY2YU(String s) {
if (!s.trim().isEmpty()) {
WPPY2YU = Short.parseShort(s);
} else {
WPPY2YU = Short.MIN_VALUE;
}
}

protected final void initWPPY3ME(String s) {
if (!s.trim().isEmpty()) {
WPPY3ME = Byte.parseByte(s);
} else {
WPPY3ME = Byte.MIN_VALUE;
}
}

protected final void initWPPY3ML(String s) {
if (!s.trim().isEmpty()) {
WPPY3ML = Short.parseShort(s);
} else {
WPPY3ML = Short.MIN_VALUE;
}
}

protected final void initWPPY3MR(String s) {
if (!s.trim().isEmpty()) {
WPPY3MR = Byte.parseByte(s);
} else {
WPPY3MR = Byte.MIN_VALUE;
}
}

protected final void initWPPY3MU(String s) {
if (!s.trim().isEmpty()) {
WPPY3MU = Short.parseShort(s);
} else {
WPPY3MU = Short.MIN_VALUE;
}
}

protected final void initWPPY3OE(String s) {
if (!s.trim().isEmpty()) {
WPPY3OE = Byte.parseByte(s);
} else {
WPPY3OE = Byte.MIN_VALUE;
}
}

protected final void initWPPY3OL(String s) {
if (!s.trim().isEmpty()) {
WPPY3OL = Byte.parseByte(s);
} else {
WPPY3OL = Byte.MIN_VALUE;
}
}

protected final void initWPPY3OR(String s) {
if (!s.trim().isEmpty()) {
WPPY3OR = Byte.parseByte(s);
} else {
WPPY3OR = Byte.MIN_VALUE;
}
}

protected final void initWPPY3OU(String s) {
if (!s.trim().isEmpty()) {
WPPY3OU = Byte.parseByte(s);
} else {
WPPY3OU = Byte.MIN_VALUE;
}
}

protected final void initWPPY3YE(String s) {
if (!s.trim().isEmpty()) {
WPPY3YE = Byte.parseByte(s);
} else {
WPPY3YE = Byte.MIN_VALUE;
}
}

protected final void initWPPY3YL(String s) {
if (!s.trim().isEmpty()) {
WPPY3YL = Short.parseShort(s);
} else {
WPPY3YL = Short.MIN_VALUE;
}
}

protected final void initWPPY3YR(String s) {
if (!s.trim().isEmpty()) {
WPPY3YR = Byte.parseByte(s);
} else {
WPPY3YR = Byte.MIN_VALUE;
}
}

protected final void initWPPY3YU(String s) {
if (!s.trim().isEmpty()) {
WPPY3YU = Short.parseShort(s);
} else {
WPPY3YU = Short.MIN_VALUE;
}
}

protected final void initWPPYFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPYFE = false;
} else {
WPPYFE = true;
}
}
}

protected final void initWPPYFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPYFL = false;
} else {
WPPYFL = true;
}
}
}

protected final void initWPPYFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPYFR = false;
} else {
WPPYFR = true;
}
}
}

protected final void initWPPYFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPYFU = false;
} else {
WPPYFU = true;
}
}
}

protected final void initWPPYME(String s) {
if (!s.trim().isEmpty()) {
WPPYME = Byte.parseByte(s);
} else {
WPPYME = Byte.MIN_VALUE;
}
}

protected final void initWPPYML(String s) {
if (!s.trim().isEmpty()) {
WPPYML = Short.parseShort(s);
} else {
WPPYML = Short.MIN_VALUE;
}
}

protected final void initWPPYMR(String s) {
if (!s.trim().isEmpty()) {
WPPYMR = Byte.parseByte(s);
} else {
WPPYMR = Byte.MIN_VALUE;
}
}

protected final void initWPPYMU(String s) {
if (!s.trim().isEmpty()) {
WPPYMU = Short.parseShort(s);
} else {
WPPYMU = Short.MIN_VALUE;
}
}

protected final void initWPPYOE(String s) {
if (!s.trim().isEmpty()) {
WPPYOE = Byte.parseByte(s);
} else {
WPPYOE = Byte.MIN_VALUE;
}
}

protected final void initWPPYOL(String s) {
if (!s.trim().isEmpty()) {
WPPYOL = Short.parseShort(s);
} else {
WPPYOL = Short.MIN_VALUE;
}
}

protected final void initWPPYOR(String s) {
if (!s.trim().isEmpty()) {
WPPYOR = Byte.parseByte(s);
} else {
WPPYOR = Byte.MIN_VALUE;
}
}

protected final void initWPPYOU(String s) {
if (!s.trim().isEmpty()) {
WPPYOU = Short.parseShort(s);
} else {
WPPYOU = Short.MIN_VALUE;
}
}

protected final void initWPPYR2(String s) {
if (!s.trim().isEmpty()) {
WPPYR2 = Integer.parseInt(s);
} else {
WPPYR2 = Integer.MIN_VALUE;
}
}

protected final void initWPPYR3(String s) {
if (!s.trim().isEmpty()) {
WPPYR3 = Integer.parseInt(s);
} else {
WPPYR3 = Integer.MIN_VALUE;
}
}

protected final void initWPPYWE(String s) {
if (!s.trim().isEmpty()) {
WPPYWE = Byte.parseByte(s);
} else {
WPPYWE = Byte.MIN_VALUE;
}
}

protected final void initWPPYWL(String s) {
if (!s.trim().isEmpty()) {
WPPYWL = Byte.parseByte(s);
} else {
WPPYWL = Byte.MIN_VALUE;
}
}

protected final void initWPPYWR(String s) {
if (!s.trim().isEmpty()) {
WPPYWR = Byte.parseByte(s);
} else {
WPPYWR = Byte.MIN_VALUE;
}
}

protected final void initWPPYWU(String s) {
if (!s.trim().isEmpty()) {
WPPYWU = Short.parseShort(s);
} else {
WPPYWU = Short.MIN_VALUE;
}
}

protected final void initWPPYYE(String s) {
if (!s.trim().isEmpty()) {
WPPYYE = Byte.parseByte(s);
} else {
WPPYYE = Byte.MIN_VALUE;
}
}

protected final void initWPPYYL(String s) {
if (!s.trim().isEmpty()) {
WPPYYL = Short.parseShort(s);
} else {
WPPYYL = Short.MIN_VALUE;
}
}

protected final void initWPPYYR(String s) {
if (!s.trim().isEmpty()) {
WPPYYR = Byte.parseByte(s);
} else {
WPPYYR = Byte.MIN_VALUE;
}
}

protected final void initWPPYYU(String s) {
if (!s.trim().isEmpty()) {
WPPYYU = Short.parseShort(s);
} else {
WPPYYU = Short.MIN_VALUE;
}
}

protected final void initWPRCON2(String s) {
if (!s.trim().isEmpty()) {
WPRCON2 = Byte.parseByte(s);
} else {
WPRCON2 = Byte.MIN_VALUE;
}
}

protected final void initWPREA01(String s) {
if (!s.trim().isEmpty()) {
WPREA01 = Byte.parseByte(s);
} else {
WPREA01 = Byte.MIN_VALUE;
}
}

protected final void initWPREA02(String s) {
if (!s.trim().isEmpty()) {
WPREA02 = Byte.parseByte(s);
} else {
WPREA02 = Byte.MIN_VALUE;
}
}

protected final void initWPREA03(String s) {
if (!s.trim().isEmpty()) {
WPREA03 = Byte.parseByte(s);
} else {
WPREA03 = Byte.MIN_VALUE;
}
}

protected final void initWPREA04(String s) {
if (!s.trim().isEmpty()) {
WPREA04 = Byte.parseByte(s);
} else {
WPREA04 = Byte.MIN_VALUE;
}
}

protected final void initWPREA05(String s) {
if (!s.trim().isEmpty()) {
WPREA05 = Byte.parseByte(s);
} else {
WPREA05 = Byte.MIN_VALUE;
}
}

protected final void initWPREA06(String s) {
if (!s.trim().isEmpty()) {
WPREA06 = Byte.parseByte(s);
} else {
WPREA06 = Byte.MIN_VALUE;
}
}

protected final void initWPREA07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPREA07 = false;
} else {
WPREA07 = true;
}
}
}

protected final void initWPREC2(String s) {
if (!s.trim().isEmpty()) {
WPREC2 = Byte.parseByte(s);
} else {
WPREC2 = Byte.MIN_VALUE;
}
}

protected final void initWPREC3(String s) {
if (!s.trim().isEmpty()) {
WPREC3 = Byte.parseByte(s);
} else {
WPREC3 = Byte.MIN_VALUE;
}
}

protected final void initWPREM01(String s) {
if (!s.trim().isEmpty()) {
WPREM01 = Byte.parseByte(s);
} else {
WPREM01 = Byte.MIN_VALUE;
}
}

protected final void initWPREM02(String s) {
if (!s.trim().isEmpty()) {
WPREM02 = Byte.parseByte(s);
} else {
WPREM02 = Byte.MIN_VALUE;
}
}

protected final void initWPREM03(String s) {
if (!s.trim().isEmpty()) {
WPREM03 = Byte.parseByte(s);
} else {
WPREM03 = Byte.MIN_VALUE;
}
}

protected final void initWPREM04(String s) {
if (!s.trim().isEmpty()) {
WPREM04 = Byte.parseByte(s);
} else {
WPREM04 = Byte.MIN_VALUE;
}
}

protected final void initWPREM05(String s) {
if (!s.trim().isEmpty()) {
WPREM05 = Byte.parseByte(s);
} else {
WPREM05 = Byte.MIN_VALUE;
}
}

protected final void initWPREM06(String s) {
if (!s.trim().isEmpty()) {
WPREM06 = Byte.parseByte(s);
} else {
WPREM06 = Byte.MIN_VALUE;
}
}

protected final void initWPREM07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPREM07 = false;
} else {
WPREM07 = true;
}
}
}

protected final void initWPREN(String s) {
if (!s.trim().isEmpty()) {
WPREN = Byte.parseByte(s);
} else {
WPREN = Byte.MIN_VALUE;
}
}

protected final void initWPRGH(String s) {
if (!s.trim().isEmpty()) {
WPRGH = Byte.parseByte(s);
} else {
WPRGH = Byte.MIN_VALUE;
}
}

protected final void initWPRGH2(String s) {
if (!s.trim().isEmpty()) {
WPRGH2 = Byte.parseByte(s);
} else {
WPRGH2 = Byte.MIN_VALUE;
}
}

protected final void initWPRGH3(String s) {
if (!s.trim().isEmpty()) {
WPRGH3 = Byte.parseByte(s);
} else {
WPRGH3 = Byte.MIN_VALUE;
}
}

protected final void initWPRRE01(String s) {
if (!s.trim().isEmpty()) {
WPRRE01 = Byte.parseByte(s);
} else {
WPRRE01 = Byte.MIN_VALUE;
}
}

protected final void initWPRRE02(String s) {
if (!s.trim().isEmpty()) {
WPRRE02 = Byte.parseByte(s);
} else {
WPRRE02 = Byte.MIN_VALUE;
}
}

protected final void initWPRRE03(String s) {
if (!s.trim().isEmpty()) {
WPRRE03 = Byte.parseByte(s);
} else {
WPRRE03 = Byte.MIN_VALUE;
}
}

protected final void initWPRRE04(String s) {
if (!s.trim().isEmpty()) {
WPRRE04 = Byte.parseByte(s);
} else {
WPRRE04 = Byte.MIN_VALUE;
}
}

protected final void initWPRRE05(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRRE05 = false;
} else {
WPRRE05 = true;
}
}
}

protected final void initWPRRE06(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRRE06 = false;
} else {
WPRRE06 = true;
}
}
}

protected final void initWPRRM01(String s) {
if (!s.trim().isEmpty()) {
WPRRM01 = Byte.parseByte(s);
} else {
WPRRM01 = Byte.MIN_VALUE;
}
}

protected final void initWPRRM02(String s) {
if (!s.trim().isEmpty()) {
WPRRM02 = Byte.parseByte(s);
} else {
WPRRM02 = Byte.MIN_VALUE;
}
}

protected final void initWPRRM03(String s) {
if (!s.trim().isEmpty()) {
WPRRM03 = Byte.parseByte(s);
} else {
WPRRM03 = Byte.MIN_VALUE;
}
}

protected final void initWPRRM04(String s) {
if (!s.trim().isEmpty()) {
WPRRM04 = Byte.parseByte(s);
} else {
WPRRM04 = Byte.MIN_VALUE;
}
}

protected final void initWPRRM05(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRRM05 = false;
} else {
WPRRM05 = true;
}
}
}

protected final void initWPRRM06(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRRM06 = false;
} else {
WPRRM06 = true;
}
}
}

protected final void initWPRSC1(String s) {
if (!s.trim().isEmpty()) {
WPRSC1 = Byte.parseByte(s);
} else {
WPRSC1 = Byte.MIN_VALUE;
}
}

protected final void initWPRSC10(String s) {
if (!s.trim().isEmpty()) {
WPRSC10 = Byte.parseByte(s);
} else {
WPRSC10 = Byte.MIN_VALUE;
}
}

protected final void initWPRSC2(String s) {
if (!s.trim().isEmpty()) {
WPRSC2 = Byte.parseByte(s);
} else {
WPRSC2 = Byte.MIN_VALUE;
}
}

protected final void initWPRSC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRSC3 = false;
} else {
WPRSC3 = true;
}
}
}

protected final void initWPRSC9(String s) {
if (!s.trim().isEmpty()) {
WPRSC9 = Byte.parseByte(s);
} else {
WPRSC9 = Byte.MIN_VALUE;
}
}

protected final void initWPRSM02(String s) {
if (!s.trim().isEmpty()) {
WPRSM02 = Byte.parseByte(s);
} else {
WPRSM02 = Byte.MIN_VALUE;
}
}

protected final void initWPRSM03(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRSM03 = false;
} else {
WPRSM03 = true;
}
}
}

protected final void initWPRSM09(String s) {
if (!s.trim().isEmpty()) {
WPRSM09 = Byte.parseByte(s);
} else {
WPRSM09 = Byte.MIN_VALUE;
}
}

protected final void initWPRSM1(String s) {
if (!s.trim().isEmpty()) {
WPRSM1 = Byte.parseByte(s);
} else {
WPRSM1 = Byte.MIN_VALUE;
}
}

protected final void initWPRSM10(String s) {
if (!s.trim().isEmpty()) {
WPRSM10 = Byte.parseByte(s);
} else {
WPRSM10 = Byte.MIN_VALUE;
}
}

protected final void initWPRSM2(String s) {
if (!s.trim().isEmpty()) {
WPRSM2 = Byte.parseByte(s);
} else {
WPRSM2 = Byte.MIN_VALUE;
}
}

protected final void initWPRSM3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRSM3 = false;
} else {
WPRSM3 = true;
}
}
}

protected final void initWPSJOBM(String s) {
if (!s.trim().isEmpty()) {
WPSJOBM = Byte.parseByte(s);
} else {
WPSJOBM = Byte.MIN_VALUE;
}
}

protected final void initWPSJOBY(String s) {
if (!s.trim().isEmpty()) {
WPSJOBY = Short.parseShort(s);
} else {
WPSJOBY = Short.MIN_VALUE;
}
}

protected final void initWPSRC(String s) {
if (!s.trim().isEmpty()) {
WPSRC = Byte.parseByte(s);
} else {
WPSRC = Byte.MIN_VALUE;
}
}

protected final void initWPSRC2(String s) {
if (!s.trim().isEmpty()) {
WPSRC2 = Byte.parseByte(s);
} else {
WPSRC2 = Byte.MIN_VALUE;
}
}

protected final void initWPTAWC(String s) {
if (!s.trim().isEmpty()) {
WPTAWC = Byte.parseByte(s);
} else {
WPTAWC = Byte.MIN_VALUE;
}
}

protected final void initWPTAX2(String s) {
if (!s.trim().isEmpty()) {
WPTAX2 = Byte.parseByte(s);
} else {
WPTAX2 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX3(String s) {
if (!s.trim().isEmpty()) {
WPTAX3 = Byte.parseByte(s);
} else {
WPTAX3 = Byte.MIN_VALUE;
}
}

protected final void initWPTHFE(String s) {
if (!s.trim().isEmpty()) {
WPTHFE = Byte.parseByte(s);
} else {
WPTHFE = Byte.MIN_VALUE;
}
}

protected final void initWPTHFL(String s) {
if (!s.trim().isEmpty()) {
WPTHFL = Short.parseShort(s);
} else {
WPTHFL = Short.MIN_VALUE;
}
}

protected final void initWPTHFR(String s) {
if (!s.trim().isEmpty()) {
WPTHFR = Byte.parseByte(s);
} else {
WPTHFR = Byte.MIN_VALUE;
}
}

protected final void initWPTHFU(String s) {
if (!s.trim().isEmpty()) {
WPTHFU = Short.parseShort(s);
} else {
WPTHFU = Short.MIN_VALUE;
}
}

protected final void initWPTHME(String s) {
if (!s.trim().isEmpty()) {
WPTHME = Byte.parseByte(s);
} else {
WPTHME = Byte.MIN_VALUE;
}
}

protected final void initWPTHML(String s) {
if (!s.trim().isEmpty()) {
WPTHML = Short.parseShort(s);
} else {
WPTHML = Short.MIN_VALUE;
}
}

protected final void initWPTHMR(String s) {
if (!s.trim().isEmpty()) {
WPTHMR = Byte.parseByte(s);
} else {
WPTHMR = Byte.MIN_VALUE;
}
}

protected final void initWPTHMU(String s) {
if (!s.trim().isEmpty()) {
WPTHMU = Short.parseShort(s);
} else {
WPTHMU = Short.MIN_VALUE;
}
}

protected final void initWPTHOE(String s) {
if (!s.trim().isEmpty()) {
WPTHOE = Byte.parseByte(s);
} else {
WPTHOE = Byte.MIN_VALUE;
}
}

protected final void initWPTHOL(String s) {
if (!s.trim().isEmpty()) {
WPTHOL = Short.parseShort(s);
} else {
WPTHOL = Short.MIN_VALUE;
}
}

protected final void initWPTHOR(String s) {
if (!s.trim().isEmpty()) {
WPTHOR = Byte.parseByte(s);
} else {
WPTHOR = Byte.MIN_VALUE;
}
}

protected final void initWPTHOU(String s) {
if (!s.trim().isEmpty()) {
WPTHOU = Short.parseShort(s);
} else {
WPTHOU = Short.MIN_VALUE;
}
}

protected final void initWPTHWE(String s) {
if (!s.trim().isEmpty()) {
WPTHWE = Byte.parseByte(s);
} else {
WPTHWE = Byte.MIN_VALUE;
}
}

protected final void initWPTHWL(String s) {
if (!s.trim().isEmpty()) {
WPTHWL = Short.parseShort(s);
} else {
WPTHWL = Short.MIN_VALUE;
}
}

protected final void initWPTHWR(String s) {
if (!s.trim().isEmpty()) {
WPTHWR = Byte.parseByte(s);
} else {
WPTHWR = Byte.MIN_VALUE;
}
}

protected final void initWPTHWU(String s) {
if (!s.trim().isEmpty()) {
WPTHWU = Short.parseShort(s);
} else {
WPTHWU = Short.MIN_VALUE;
}
}

protected final void initWPTHYE(String s) {
if (!s.trim().isEmpty()) {
WPTHYE = Byte.parseByte(s);
} else {
WPTHYE = Byte.MIN_VALUE;
}
}

protected final void initWPTHYL(String s) {
if (!s.trim().isEmpty()) {
WPTHYL = Short.parseShort(s);
} else {
WPTHYL = Short.MIN_VALUE;
}
}

protected final void initWPTHYR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPTHYR = false;
} else {
WPTHYR = true;
}
}
}

protected final void initWPTHYU(String s) {
if (!s.trim().isEmpty()) {
WPTHYU = Integer.parseInt(s);
} else {
WPTHYU = Integer.MIN_VALUE;
}
}

protected final void initWPUPFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPUPFE = false;
} else {
WPUPFE = true;
}
}
}

protected final void initWPUPFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPUPFL = false;
} else {
WPUPFL = true;
}
}
}

protected final void initWPUPFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPUPFR = false;
} else {
WPUPFR = true;
}
}
}

protected final void initWPUPFU(String s) {
if (!s.trim().isEmpty()) {
WPUPFU = Short.parseShort(s);
} else {
WPUPFU = Short.MIN_VALUE;
}
}

protected final void initWPUPME(String s) {
if (!s.trim().isEmpty()) {
WPUPME = Byte.parseByte(s);
} else {
WPUPME = Byte.MIN_VALUE;
}
}

protected final void initWPUPML(String s) {
if (!s.trim().isEmpty()) {
WPUPML = Short.parseShort(s);
} else {
WPUPML = Short.MIN_VALUE;
}
}

protected final void initWPUPMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPUPMR = false;
} else {
WPUPMR = true;
}
}
}

protected final void initWPUPMU(String s) {
if (!s.trim().isEmpty()) {
WPUPMU = Short.parseShort(s);
} else {
WPUPMU = Short.MIN_VALUE;
}
}

protected final void initWPUPOE(String s) {
if (!s.trim().isEmpty()) {
WPUPOE = Byte.parseByte(s);
} else {
WPUPOE = Byte.MIN_VALUE;
}
}

protected final void initWPUPOL(String s) {
if (!s.trim().isEmpty()) {
WPUPOL = Short.parseShort(s);
} else {
WPUPOL = Short.MIN_VALUE;
}
}

protected final void initWPUPOR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPUPOR = false;
} else {
WPUPOR = true;
}
}
}

protected final void initWPUPOU(String s) {
if (!s.trim().isEmpty()) {
WPUPOU = Short.parseShort(s);
} else {
WPUPOU = Short.MIN_VALUE;
}
}

protected final void initWPUPWE(String s) {
if (!s.trim().isEmpty()) {
WPUPWE = Byte.parseByte(s);
} else {
WPUPWE = Byte.MIN_VALUE;
}
}

protected final void initWPUPWL(String s) {
if (!s.trim().isEmpty()) {
WPUPWL = Short.parseShort(s);
} else {
WPUPWL = Short.MIN_VALUE;
}
}

protected final void initWPUPWR(String s) {
if (!s.trim().isEmpty()) {
WPUPWR = Byte.parseByte(s);
} else {
WPUPWR = Byte.MIN_VALUE;
}
}

protected final void initWPUPWU(String s) {
if (!s.trim().isEmpty()) {
WPUPWU = Short.parseShort(s);
} else {
WPUPWU = Short.MIN_VALUE;
}
}

protected final void initWPVBE(String s) {
if (!s.trim().isEmpty()) {
WPVBE = Byte.parseByte(s);
} else {
WPVBE = Byte.MIN_VALUE;
}
}

protected final void initWPVBL(String s) {
if (!s.trim().isEmpty()) {
WPVBL = Integer.parseInt(s);
} else {
WPVBL = Integer.MIN_VALUE;
}
}

protected final void initWPVBR(String s) {
if (!s.trim().isEmpty()) {
WPVBR = Byte.parseByte(s);
} else {
WPVBR = Byte.MIN_VALUE;
}
}

protected final void initWPVBU(String s) {
if (!s.trim().isEmpty()) {
WPVBU = Integer.parseInt(s);
} else {
WPVBU = Integer.MIN_VALUE;
}
}

protected final void initWPWEX(String s) {
if (!s.trim().isEmpty()) {
WPWEX = Byte.parseByte(s);
} else {
WPWEX = Byte.MIN_VALUE;
}
}

protected final void initWPWLE(String s) {
if (!s.trim().isEmpty()) {
WPWLE = Byte.parseByte(s);
} else {
WPWLE = Byte.MIN_VALUE;
}
}

protected final void initWPWLL(String s) {
if (!s.trim().isEmpty()) {
WPWLL = Short.parseShort(s);
} else {
WPWLL = Short.MIN_VALUE;
}
}

protected final void initWPWLR(String s) {
if (!s.trim().isEmpty()) {
WPWLR = Byte.parseByte(s);
} else {
WPWLR = Byte.MIN_VALUE;
}
}

protected final void initWPWLU(String s) {
if (!s.trim().isEmpty()) {
WPWLU = Integer.parseInt(s);
} else {
WPWLU = Integer.MIN_VALUE;
}
}

protected final void initWPWTX(String s) {
if (!s.trim().isEmpty()) {
WPWTX = Byte.parseByte(s);
} else {
WPWTX = Byte.MIN_VALUE;
}
}

protected final void initWPWTX2(String s) {
if (!s.trim().isEmpty()) {
WPWTX2 = Byte.parseByte(s);
} else {
WPWTX2 = Byte.MIN_VALUE;
}
}

protected final void initWPWTX3(String s) {
if (!s.trim().isEmpty()) {
WPWTX3 = Byte.parseByte(s);
} else {
WPWTX3 = Byte.MIN_VALUE;
}
}

protected final void initWPXNO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
WPXNO = false;
} else {
WPXNO = true;
}
}
}

protected final void initWPXNO2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 2) {
WPXNO2 = false;
} else {
WPXNO2 = true;
}
}
}

protected final void initWPYAER2(String s) {
if (!s.trim().isEmpty()) {
WPYAER2 = Byte.parseByte(s);
} else {
WPYAER2 = Byte.MIN_VALUE;
}
}

protected final void initWPYBS2(String s) {
if (!s.trim().isEmpty()) {
WPYBS2 = Byte.parseByte(s);
} else {
WPYBS2 = Byte.MIN_VALUE;
}
}

protected final void initWPYCA2(String s) {
if (!s.trim().isEmpty()) {
WPYCA2 = Integer.parseInt(s);
} else {
WPYCA2 = Integer.MIN_VALUE;
}
}

protected final void initWPYCAT2(String s) {
if (!s.trim().isEmpty()) {
WPYCAT2 = Byte.parseByte(s);
} else {
WPYCAT2 = Byte.MIN_VALUE;
}
}

protected final void initWPYFRA(String s) {
if (!s.trim().isEmpty()) {
WPYFRA = Byte.parseByte(s);
} else {
WPYFRA = Byte.MIN_VALUE;
}
}

protected final void initWPYFRA2(String s) {
if (!s.trim().isEmpty()) {
WPYFRA2 = Byte.parseByte(s);
} else {
WPYFRA2 = Byte.MIN_VALUE;
}
}

protected final void initWPYPEN(String s) {
if (!s.trim().isEmpty()) {
WPYPEN = Byte.parseByte(s);
} else {
WPYPEN = Byte.MIN_VALUE;
}
}

protected final void initWPYPEN2(String s) {
if (!s.trim().isEmpty()) {
WPYPEN2 = Byte.parseByte(s);
} else {
WPYPEN2 = Byte.MIN_VALUE;
}
}

public byte getAAGEANGI() {
return AAGEANGI;
}

public byte getAAGEDI() {
return AAGEDI;
}

public byte getAAGEHART() {
return AAGEHART;
}

public byte getAAGEMAB() {
return AAGEMAB;
}

public byte getAAGEPAB() {
return AAGEPAB;
}

public byte getAAGESTRO() {
return AAGESTRO;
}

public byte getADIRCTR() {
return ADIRCTR;
}

public byte getADRESP1() {
return ADRESP1;
}

public byte getADRESP2() {
return ADRESP2;
}

public byte getAECONACT() {
return AECONACT;
}

public byte getAEDUCEND() {
return AEDUCEND;
}

public byte getAEMPLOYE() {
return AEMPLOYE;
}

public byte getAEMPSTAT() {
return AEMPSTAT;
}

public byte getAETHNICR() {
return AETHNICR;
}

public byte getAEVERJOB() {
return AEVERJOB;
}

public byte getAFTPTIME() {
return AFTPTIME;
}

public byte getAHHLDR01() {
return AHHLDR01;
}

public byte getAHHLDR02() {
return AHHLDR02;
}

public byte getAHHLDR03() {
return AHHLDR03;
}

public boolean getAHHLDR04() {
return AHHLDR04;
}

public byte getAHHSIZE() {
return AHHSIZE;
}

public short getAHSECLS2() {
return AHSECLS2;
}

public byte getAHSEINT() {
return AHSEINT;
}

public byte getAHSEST() {
return AHSEST;
}

public short getAHSEYEAR() {
return AHSEYEAR;
}

public byte getALIVEMAB() {
return ALIVEMAB;
}

public byte getALIVEPAB() {
return ALIVEPAB;
}

public byte getALLOCP1() {
return ALLOCP1;
}

public byte getALLOCP2() {
return ALLOCP2;
}

public byte getAMINTB() {
return AMINTB;
}

public byte getANACTIV() {
return ANACTIV;
}

public byte getANEMPLEE() {
return ANEMPLEE;
}

public double getANSSEC() {
return ANSSEC;
}

public byte getAOTHPAID() {
return AOTHPAID;
}

public byte getAPERSNO() {
return APERSNO;
}

public byte getAPOBR() {
return APOBR;
}

public byte getAQUAL() {
return AQUAL;
}

public byte getARELTO01() {
return ARELTO01;
}

public byte getARELTO02() {
return ARELTO02;
}

public byte getARELTO03() {
return ARELTO03;
}

public byte getARELTO04() {
return ARELTO04;
}

public byte getARELTO05() {
return ARELTO05;
}

public byte getARELTO06() {
return ARELTO06;
}

public byte getARELTO07() {
return ARELTO07;
}

public byte getARELTO08() {
return ARELTO08;
}

public byte getARELTO09() {
return ARELTO09;
}

public byte getARELTO10() {
return ARELTO10;
}

public String getASAMPSTA() {
return ASAMPSTA;
}

public byte getASEX() {
return ASEX;
}

public byte getASKPAY() {
return ASKPAY;
}

public boolean getASKPX1() {
return ASKPX1;
}

public byte getASKREC() {
return ASKREC;
}

public byte getASNEMPLE() {
return ASNEMPLE;
}

public byte getASOCCLS() {
return ASOCCLS;
}

public short getASTRATIF() {
return ASTRATIF;
}

public byte getASTWORK() {
return ASTWORK;
}

public byte getATENUREB() {
return ATENUREB;
}

public byte getAWKLOOK() {
return AWKLOOK;
}

public byte getAWKSTRT() {
return AWKSTRT;
}

public short getAXSC2000() {
return AXSC2000;
}

public short getAYINTB() {
return AYINTB;
}

public byte getCFANI() {
return CFANI;
}

public byte getCFEND() {
return CFEND;
}

public byte getCFMEM() {
return CFMEM;
}

public byte getCFMEMS() {
return CFMEMS;
}

public byte getCFMETM() {
return CFMETM;
}

public byte getCFMSCR() {
return CFMSCR;
}

public byte getCFPASCR() {
return CFPASCR;
}

public byte getCFPBSCR() {
return CFPBSCR;
}

public byte getCFPMB() {
return CFPMB;
}

public byte getCFPTSCR() {
return CFPTSCR;
}

public byte getCFSUMA() {
return CFSUMA;
}

public byte getCFSUMB() {
return CFSUMB;
}

public byte getCFSUMC() {
return CFSUMC;
}

public byte getCFSUMD() {
return CFSUMD;
}

public byte getCFSUME() {
return CFSUME;
}

public byte getCFSUMF() {
return CFSUMF;
}

public byte getCFWHO1() {
return CFWHO1;
}

public byte getCFWHO2() {
return CFWHO2;
}

public byte getCFWHO3() {
return CFWHO3;
}

public byte getCFWHZ1() {
return CFWHZ1;
}

public byte getCFWHZ2() {
return CFWHZ2;
}

public byte getCFWHZ3() {
return CFWHZ3;
}

public boolean getCFWHZ4() {
return CFWHZ4;
}

public boolean getCHINHH1() {
return CHINHH1;
}

public byte getCOGREC() {
return COGREC;
}

public byte getCOUPLE1() {
return COUPLE1;
}

public byte getDCURPEN() {
return DCURPEN;
}

public byte getDDBDC() {
return DDBDC;
}

public byte getDEMPPEN() {
return DEMPPEN;
}

public byte getDHAGER() {
return DHAGER;
}

public byte getDHANYPX() {
return DHANYPX;
}

public short getDHCBY() {
return DHCBY;
}

public short getDHCBY02() {
return DHCBY02;
}

public short getDHCBY03() {
return DHCBY03;
}

public short getDHCBY04() {
return DHCBY04;
}

public short getDHCBY05() {
return DHCBY05;
}

public short getDHCBY06() {
return DHCBY06;
}

public short getDHCBY07() {
return DHCBY07;
}

public short getDHCBY08() {
return DHCBY08;
}

public short getDHCBY09() {
return DHCBY09;
}

public short getDHCBY10() {
return DHCBY10;
}

public short getDHCBY11() {
return DHCBY11;
}

public short getDHCBY12() {
return DHCBY12;
}

public short getDHCBY13() {
return DHCBY13;
}

public byte getDHCH() {
return DHCH;
}

public short getDHDOBYR() {
return DHDOBYR;
}

public boolean getDHM() {
return DHM;
}

public byte getDHM10() {
return DHM10;
}

public byte getDHM11() {
return DHM11;
}

public byte getDHM12() {
return DHM12;
}

public boolean getDHM13() {
return DHM13;
}

public byte getDHM2() {
return DHM2;
}

public byte getDHM3() {
return DHM3;
}

public byte getDHM4() {
return DHM4;
}

public byte getDHM5() {
return DHM5;
}

public byte getDHM6() {
return DHM6;
}

public byte getDHM7() {
return DHM7;
}

public byte getDHM8() {
return DHM8;
}

public byte getDHM9() {
return DHM9;
}

public byte getDHNCH() {
return DHNCH;
}

public byte getDHPRX01() {
return DHPRX01;
}

public byte getDHPRX02() {
return DHPRX02;
}

public byte getDHR13() {
return DHR13;
}

public boolean getDHSEX() {
return DHSEX;
}

public boolean getDIAG() {
return DIAG;
}

public short getDIDBNY() {
return DIDBNY;
}

public byte getDIDOB() {
return DIDOB;
}

public byte getDIKLIVC() {
return DIKLIVC;
}

public byte getDIMAR() {
return DIMAR;
}

public byte getDISEX() {
return DISEX;
}

public boolean getDPTC_P_F() {
return DPTC_P_F;
}

public byte getDPTC_P_I() {
return DPTC_P_I;
}

public short getDPTC_P_O() {
return DPTC_P_O;
}

public short getDPTC_P_T() {
return DPTC_P_T;
}

public boolean getDPTC_R_F() {
return DPTC_R_F;
}

public double getDPTC_R_I() {
return DPTC_R_I;
}

public short getDPTC_R_O() {
return DPTC_R_O;
}

public short getDPTC_R_T() {
return DPTC_R_T;
}

public byte getELIG() {
return ELIG;
}

public byte getELIGAT() {
return ELIGAT;
}

public byte getELIGBT() {
return ELIGBT;
}

public byte getELIGCT() {
return ELIGCT;
}

public double getENSSEC() {
return ENSSEC;
}

public byte getEXPLAN() {
return EXPLAN;
}

public byte getEXPLANC() {
return EXPLANC;
}

public short getEXS2000() {
return EXS2000;
}

public String getFINSTAT() {
return FINSTAT;
}

public byte getFQBACK1() {
return FQBACK1;
}

public boolean getFQBACK2() {
return FQBACK2;
}

public byte getFQBCG1() {
return FQBCG1;
}

public byte getFQCBAC1() {
return FQCBAC1;
}

public byte getFQCBTHR() {
return FQCBTHR;
}

public short getFQCENG() {
return FQCENG;
}

public byte getFQCUL1() {
return FQCUL1;
}

public byte getFQCUL2() {
return FQCUL2;
}

public byte getFQCUL3() {
return FQCUL3;
}

public byte getFQCULB1() {
return FQCULB1;
}

public byte getFQEND() {
return FQEND;
}

public byte getFQETHNR() {
return FQETHNR;
}

public byte getFQQUAL1() {
return FQQUAL1;
}

public byte getFQQUAL2() {
return FQQUAL2;
}

public byte getFQQUAL3() {
return FQQUAL3;
}

public byte getFQQUZM1() {
return FQQUZM1;
}

public byte getFQQUZM2() {
return FQQUZM2;
}

public byte getFQQUZM3() {
return FQQUZM3;
}

public byte getFQWCUL1() {
return FQWCUL1;
}

public byte getFQWCUL2() {
return FQWCUL2;
}

public byte getFQWCUL3() {
return FQWCUL3;
}

public boolean getFQWCUL4() {
return FQWCUL4;
}

public boolean getGCINHH1() {
return GCINHH1;
}

public byte getHEADA01() {
return HEADA01;
}

public byte getHEADA02() {
return HEADA02;
}

public byte getHEADA03() {
return HEADA03;
}

public byte getHEADA04() {
return HEADA04;
}

public byte getHEADA05() {
return HEADA05;
}

public byte getHEADA06() {
return HEADA06;
}

public byte getHEADA07() {
return HEADA07;
}

public byte getHEADA08() {
return HEADA08;
}

public byte getHEADA09() {
return HEADA09;
}

public byte getHEADA10() {
return HEADA10;
}

public boolean getHEADA11() {
return HEADA11;
}

public byte getHEADB01() {
return HEADB01;
}

public byte getHEADB02() {
return HEADB02;
}

public byte getHEADB03() {
return HEADB03;
}

public byte getHEADB04() {
return HEADB04;
}

public byte getHEADB05() {
return HEADB05;
}

public byte getHEADB06() {
return HEADB06;
}

public byte getHEADB07() {
return HEADB07;
}

public byte getHEADB08() {
return HEADB08;
}

public byte getHEADB09() {
return HEADB09;
}

public byte getHEADB10() {
return HEADB10;
}

public byte getHEADB11() {
return HEADB11;
}

public byte getHEADB12() {
return HEADB12;
}

public boolean getHEADB13() {
return HEADB13;
}

public boolean getHEADB14() {
return HEADB14;
}

public byte getHEAGG() {
return HEAGG;
}

public byte getHEAGH() {
return HEAGH;
}

public byte getHEAID1() {
return HEAID1;
}

public byte getHEAID2() {
return HEAID2;
}

public byte getHEAID3() {
return HEAID3;
}

public byte getHEAID4() {
return HEAID4;
}

public byte getHEAID5() {
return HEAID5;
}

public boolean getHEAID6() {
return HEAID6;
}

public boolean getHEAID7() {
return HEAID7;
}

public boolean getHEAID8() {
return HEAID8;
}

public byte getHEALA() {
return HEALA;
}

public byte getHEALB() {
return HEALB;
}

public byte getHEALC() {
return HEALC;
}

public byte getHEANA() {
return HEANA;
}

public byte getHEANB() {
return HEANB;
}

public byte getHEANC() {
return HEANC;
}

public byte getHEAND() {
return HEAND;
}

public byte getHEANE() {
return HEANE;
}

public byte getHEANF() {
return HEANF;
}

public byte getHEANG() {
return HEANG;
}

public byte getHEANH() {
return HEANH;
}

public byte getHEANI() {
return HEANI;
}

public boolean getHEANIC() {
return HEANIC;
}

public byte getHEANK() {
return HEANK;
}

public byte getHEART1() {
return HEART1;
}

public byte getHEART2() {
return HEART2;
}

public boolean getHEART3() {
return HEART3;
}

public byte getHEATA() {
return HEATA;
}

public byte getHEATT01() {
return HEATT01;
}

public byte getHEATT02() {
return HEATT02;
}

public byte getHEATT03() {
return HEATT03;
}

public byte getHEATT04() {
return HEATT04;
}

public byte getHEATT05() {
return HEATT05;
}

public byte getHEATT06() {
return HEATT06;
}

public byte getHEATT07() {
return HEATT07;
}

public byte getHEATT08() {
return HEATT08;
}

public byte getHEATT09() {
return HEATT09;
}

public byte getHEATT10() {
return HEATT10;
}

public byte getHEATT11() {
return HEATT11;
}

public byte getHEATT12() {
return HEATT12;
}

public byte getHEATT13() {
return HEATT13;
}

public byte getHEATT14() {
return HEATT14;
}

public byte getHEATT15() {
return HEATT15;
}

public byte getHEATT16() {
return HEATT16;
}

public boolean getHEATT17() {
return HEATT17;
}

public byte getHEAVOID() {
return HEAVOID;
}

public byte getHEBAL() {
return HEBAL;
}

public byte getHECANA() {
return HECANA;
}

public byte getHECDA() {
return HECDA;
}

public byte getHECDB() {
return HECDB;
}

public byte getHECDC() {
return HECDC;
}

public byte getHECDD() {
return HECDD;
}

public byte getHECDE() {
return HECDE;
}

public byte getHECDF1() {
return HECDF1;
}

public byte getHECDF2() {
return HECDF2;
}

public byte getHECDF3() {
return HECDF3;
}

public byte getHEDIA01() {
return HEDIA01;
}

public byte getHEDIA02() {
return HEDIA02;
}

public byte getHEDIA03() {
return HEDIA03;
}

public byte getHEDIA04() {
return HEDIA04;
}

public byte getHEDIA05() {
return HEDIA05;
}

public byte getHEDIA06() {
return HEDIA06;
}

public byte getHEDIA07() {
return HEDIA07;
}

public boolean getHEDIA08() {
return HEDIA08;
}

public boolean getHEDIA09() {
return HEDIA09;
}

public boolean getHEDIA10() {
return HEDIA10;
}

public byte getHEDIB01() {
return HEDIB01;
}

public byte getHEDIB02() {
return HEDIB02;
}

public byte getHEDIB03() {
return HEDIB03;
}

public byte getHEDIB04() {
return HEDIB04;
}

public byte getHEDIB05() {
return HEDIB05;
}

public boolean getHEDIB06() {
return HEDIB06;
}

public boolean getHEDIB07() {
return HEDIB07;
}

public boolean getHEDIB08() {
return HEDIB08;
}

public boolean getHEDIB09() {
return HEDIB09;
}

public boolean getHEDIB10() {
return HEDIB10;
}

public byte getHEDIM01() {
return HEDIM01;
}

public byte getHEDIM02() {
return HEDIM02;
}

public byte getHEDIM03() {
return HEDIM03;
}

public byte getHEDIM04() {
return HEDIM04;
}

public byte getHEDIM05() {
return HEDIM05;
}

public byte getHEDIM06() {
return HEDIM06;
}

public boolean getHEDIM07() {
return HEDIM07;
}

public byte getHEDIZ() {
return HEDIZ;
}

public byte getHEGENH() {
return HEGENH;
}

public byte getHEGENHB() {
return HEGENHB;
}

public byte getHEHELF() {
return HEHELF;
}

public byte getHEHELFB() {
return HEHELFB;
}

public byte getHEHPA() {
return HEHPA;
}

public byte getHEHPB01() {
return HEHPB01;
}

public byte getHEHPB02() {
return HEHPB02;
}

public byte getHEHPB03() {
return HEHPB03;
}

public byte getHEHPB04() {
return HEHPB04;
}

public byte getHEHPB05() {
return HEHPB05;
}

public byte getHEHPB06() {
return HEHPB06;
}

public byte getHEHPB07() {
return HEHPB07;
}

public byte getHEHPB08() {
return HEHPB08;
}

public boolean getHEHPB09() {
return HEHPB09;
}

public boolean getHEHPB10() {
return HEHPB10;
}

public boolean getHEHPB11() {
return HEHPB11;
}

public boolean getHEHPB12() {
return HEHPB12;
}

public boolean getHEHPB13() {
return HEHPB13;
}

public boolean getHEHPB14() {
return HEHPB14;
}

public boolean getHEHPB15() {
return HEHPB15;
}

public boolean getHEHPB16() {
return HEHPB16;
}

public byte getHEHPC() {
return HEHPC;
}

public byte getHEINCT() {
return HEINCT;
}

public byte getHEJIA1() {
return HEJIA1;
}

public byte getHEJIA2() {
return HEJIA2;
}

public boolean getHEJIA3() {
return HEJIA3;
}

public boolean getHEJIA4() {
return HEJIA4;
}

public boolean getHEJIA5() {
return HEJIA5;
}

public boolean getHEJIA6() {
return HEJIA6;
}

public byte getHEJIB() {
return HEJIB;
}

public byte getHEJIC() {
return HEJIC;
}

public byte getHEOPT1() {
return HEOPT1;
}

public byte getHEOPT2() {
return HEOPT2;
}

public byte getHEOPT3() {
return HEOPT3;
}

public boolean getHEOPT4() {
return HEOPT4;
}

public boolean getHEOPT5() {
return HEOPT5;
}

public byte getHEPAB() {
return HEPAB;
}

public byte getHEPSY1() {
return HEPSY1;
}

public byte getHEPSY2() {
return HEPSY2;
}

public byte getHEPSY3() {
return HEPSY3;
}

public byte getHEPSY4() {
return HEPSY4;
}

public byte getHEPSY5() {
return HEPSY5;
}

public byte getHEPSY6() {
return HEPSY6;
}

public byte getHEPSY7() {
return HEPSY7;
}

public boolean getHEPSY8() {
return HEPSY8;
}

public boolean getHEPSY9() {
return HEPSY9;
}

public byte getHERPA() {
return HERPA;
}

public byte getHERPB() {
return HERPB;
}

public byte getHERPC() {
return HERPC;
}

public byte getHERPD() {
return HERPD;
}

public byte getHERPE() {
return HERPE;
}

public byte getHERPF() {
return HERPF;
}

public byte getHERPG() {
return HERPG;
}

public byte getHERPH() {
return HERPH;
}

public byte getHERPI() {
return HERPI;
}

public byte getHERPJ() {
return HERPJ;
}

public byte getHEYRB() {
return HEYRB;
}

public byte getHHSEL() {
return HHSEL;
}

public byte getHOADP01() {
return HOADP01;
}

public byte getHOADP02() {
return HOADP02;
}

public byte getHOADP03() {
return HOADP03;
}

public byte getHOADP04() {
return HOADP04;
}

public byte getHOADP05() {
return HOADP05;
}

public byte getHOADP06() {
return HOADP06;
}

public byte getHOADP07() {
return HOADP07;
}

public byte getHOADP08() {
return HOADP08;
}

public byte getHOADP09() {
return HOADP09;
}

public boolean getHOADP10() {
return HOADP10;
}

public byte getHOALE() {
return HOALE;
}

public byte getHOALF() {
return HOALF;
}

public short getHOALFM() {
return HOALFM;
}

public byte getHOALI() {
return HOALI;
}

public short getHOALL() {
return HOALL;
}

public boolean getHOALR() {
return HOALR;
}

public short getHOALU() {
return HOALU;
}

public byte getHOASK() {
return HOASK;
}

public boolean getHOB10FE() {
return HOB10FE;
}

public boolean getHOB10FL() {
return HOB10FL;
}

public boolean getHOB10FR() {
return HOB10FR;
}

public boolean getHOB10FU() {
return HOB10FU;
}

public boolean getHOB10ME() {
return HOB10ME;
}

public boolean getHOB10ML() {
return HOB10ML;
}

public boolean getHOB10MR() {
return HOB10MR;
}

public boolean getHOB10MU() {
return HOB10MU;
}

public boolean getHOB10OE() {
return HOB10OE;
}

public boolean getHOB10OL() {
return HOB10OL;
}

public boolean getHOB10OR() {
return HOB10OR;
}

public boolean getHOB10OU() {
return HOB10OU;
}

public boolean getHOB10WE() {
return HOB10WE;
}

public boolean getHOB10WL() {
return HOB10WL;
}

public boolean getHOB10WR() {
return HOB10WR;
}

public boolean getHOB10WU() {
return HOB10WU;
}

public boolean getHOB10YE() {
return HOB10YE;
}

public boolean getHOB10YL() {
return HOB10YL;
}

public boolean getHOB10YR() {
return HOB10YR;
}

public boolean getHOB10YU() {
return HOB10YU;
}

public boolean getHOB11FE() {
return HOB11FE;
}

public boolean getHOB11FL() {
return HOB11FL;
}

public boolean getHOB11FR() {
return HOB11FR;
}

public boolean getHOB11FU() {
return HOB11FU;
}

public boolean getHOB11ME() {
return HOB11ME;
}

public boolean getHOB11ML() {
return HOB11ML;
}

public boolean getHOB11MR() {
return HOB11MR;
}

public boolean getHOB11MU() {
return HOB11MU;
}

public boolean getHOB11OE() {
return HOB11OE;
}

public boolean getHOB11OL() {
return HOB11OL;
}

public boolean getHOB11OR() {
return HOB11OR;
}

public boolean getHOB11OU() {
return HOB11OU;
}

public boolean getHOB11WE() {
return HOB11WE;
}

public boolean getHOB11WL() {
return HOB11WL;
}

public boolean getHOB11WR() {
return HOB11WR;
}

public boolean getHOB11WU() {
return HOB11WU;
}

public boolean getHOB11YE() {
return HOB11YE;
}

public boolean getHOB11YL() {
return HOB11YL;
}

public boolean getHOB11YR() {
return HOB11YR;
}

public boolean getHOB11YU() {
return HOB11YU;
}

public boolean getHOB12FE() {
return HOB12FE;
}

public boolean getHOB12FL() {
return HOB12FL;
}

public boolean getHOB12FR() {
return HOB12FR;
}

public boolean getHOB12FU() {
return HOB12FU;
}

public boolean getHOB12ME() {
return HOB12ME;
}

public boolean getHOB12ML() {
return HOB12ML;
}

public boolean getHOB12MR() {
return HOB12MR;
}

public boolean getHOB12MU() {
return HOB12MU;
}

public boolean getHOB12OE() {
return HOB12OE;
}

public boolean getHOB12OL() {
return HOB12OL;
}

public boolean getHOB12OR() {
return HOB12OR;
}

public boolean getHOB12OU() {
return HOB12OU;
}

public boolean getHOB12WE() {
return HOB12WE;
}

public boolean getHOB12WL() {
return HOB12WL;
}

public boolean getHOB12WR() {
return HOB12WR;
}

public boolean getHOB12WU() {
return HOB12WU;
}

public boolean getHOB12YE() {
return HOB12YE;
}

public boolean getHOB12YL() {
return HOB12YL;
}

public boolean getHOB12YR() {
return HOB12YR;
}

public boolean getHOB12YU() {
return HOB12YU;
}

public boolean getHOB13FE() {
return HOB13FE;
}

public boolean getHOB13FL() {
return HOB13FL;
}

public boolean getHOB13FR() {
return HOB13FR;
}

public boolean getHOB13FU() {
return HOB13FU;
}

public boolean getHOB13ME() {
return HOB13ME;
}

public boolean getHOB13ML() {
return HOB13ML;
}

public boolean getHOB13MR() {
return HOB13MR;
}

public boolean getHOB13MU() {
return HOB13MU;
}

public boolean getHOB13OE() {
return HOB13OE;
}

public boolean getHOB13OL() {
return HOB13OL;
}

public boolean getHOB13OR() {
return HOB13OR;
}

public boolean getHOB13OU() {
return HOB13OU;
}

public boolean getHOB13WE() {
return HOB13WE;
}

public boolean getHOB13WL() {
return HOB13WL;
}

public boolean getHOB13WR() {
return HOB13WR;
}

public boolean getHOB13WU() {
return HOB13WU;
}

public boolean getHOB13YE() {
return HOB13YE;
}

public boolean getHOB13YL() {
return HOB13YL;
}

public boolean getHOB13YR() {
return HOB13YR;
}

public boolean getHOB13YU() {
return HOB13YU;
}

public boolean getHOB2FE() {
return HOB2FE;
}

public boolean getHOB2FL() {
return HOB2FL;
}

public boolean getHOB2FR() {
return HOB2FR;
}

public boolean getHOB2FU() {
return HOB2FU;
}

public boolean getHOB2ME() {
return HOB2ME;
}

public boolean getHOB2ML() {
return HOB2ML;
}

public boolean getHOB2MR() {
return HOB2MR;
}

public boolean getHOB2MU() {
return HOB2MU;
}

public byte getHOB2OE() {
return HOB2OE;
}

public byte getHOB2OL() {
return HOB2OL;
}

public byte getHOB2OR() {
return HOB2OR;
}

public byte getHOB2OU() {
return HOB2OU;
}

public byte getHOB2WE() {
return HOB2WE;
}

public byte getHOB2WL() {
return HOB2WL;
}

public byte getHOB2WR() {
return HOB2WR;
}

public byte getHOB2WU() {
return HOB2WU;
}

public boolean getHOB2YE() {
return HOB2YE;
}

public boolean getHOB2YL() {
return HOB2YL;
}

public boolean getHOB2YR() {
return HOB2YR;
}

public boolean getHOB2YU() {
return HOB2YU;
}

public boolean getHOB3FE() {
return HOB3FE;
}

public boolean getHOB3FL() {
return HOB3FL;
}

public boolean getHOB3FR() {
return HOB3FR;
}

public boolean getHOB3FU() {
return HOB3FU;
}

public byte getHOB3ME() {
return HOB3ME;
}

public byte getHOB3ML() {
return HOB3ML;
}

public byte getHOB3MR() {
return HOB3MR;
}

public short getHOB3MU() {
return HOB3MU;
}

public byte getHOB3OE() {
return HOB3OE;
}

public short getHOB3OL() {
return HOB3OL;
}

public byte getHOB3OR() {
return HOB3OR;
}

public short getHOB3OU() {
return HOB3OU;
}

public byte getHOB3WE() {
return HOB3WE;
}

public byte getHOB3WL() {
return HOB3WL;
}

public byte getHOB3WR() {
return HOB3WR;
}

public byte getHOB3WU() {
return HOB3WU;
}

public boolean getHOB3YE() {
return HOB3YE;
}

public boolean getHOB3YL() {
return HOB3YL;
}

public boolean getHOB3YR() {
return HOB3YR;
}

public boolean getHOB3YU() {
return HOB3YU;
}

public boolean getHOB4FE() {
return HOB4FE;
}

public boolean getHOB4FL() {
return HOB4FL;
}

public boolean getHOB4FR() {
return HOB4FR;
}

public boolean getHOB4FU() {
return HOB4FU;
}

public byte getHOB4ME() {
return HOB4ME;
}

public byte getHOB4ML() {
return HOB4ML;
}

public byte getHOB4MR() {
return HOB4MR;
}

public short getHOB4MU() {
return HOB4MU;
}

public byte getHOB4OE() {
return HOB4OE;
}

public boolean getHOB4OL() {
return HOB4OL;
}

public boolean getHOB4OR() {
return HOB4OR;
}

public boolean getHOB4OU() {
return HOB4OU;
}

public byte getHOB4WE() {
return HOB4WE;
}

public byte getHOB4WL() {
return HOB4WL;
}

public byte getHOB4WR() {
return HOB4WR;
}

public byte getHOB4WU() {
return HOB4WU;
}

public boolean getHOB4YE() {
return HOB4YE;
}

public boolean getHOB4YL() {
return HOB4YL;
}

public boolean getHOB4YR() {
return HOB4YR;
}

public boolean getHOB4YU() {
return HOB4YU;
}

public boolean getHOB5FE() {
return HOB5FE;
}

public boolean getHOB5FL() {
return HOB5FL;
}

public boolean getHOB5FR() {
return HOB5FR;
}

public boolean getHOB5FU() {
return HOB5FU;
}

public boolean getHOB5ME() {
return HOB5ME;
}

public boolean getHOB5ML() {
return HOB5ML;
}

public boolean getHOB5MR() {
return HOB5MR;
}

public boolean getHOB5MU() {
return HOB5MU;
}

public boolean getHOB5OE() {
return HOB5OE;
}

public boolean getHOB5OL() {
return HOB5OL;
}

public boolean getHOB5OR() {
return HOB5OR;
}

public boolean getHOB5OU() {
return HOB5OU;
}

public boolean getHOB5WE() {
return HOB5WE;
}

public boolean getHOB5WL() {
return HOB5WL;
}

public boolean getHOB5WR() {
return HOB5WR;
}

public boolean getHOB5WU() {
return HOB5WU;
}

public boolean getHOB5YE() {
return HOB5YE;
}

public boolean getHOB5YL() {
return HOB5YL;
}

public boolean getHOB5YR() {
return HOB5YR;
}

public boolean getHOB5YU() {
return HOB5YU;
}

public boolean getHOB6FE() {
return HOB6FE;
}

public boolean getHOB6FL() {
return HOB6FL;
}

public boolean getHOB6FR() {
return HOB6FR;
}

public boolean getHOB6FU() {
return HOB6FU;
}

public boolean getHOB6ME() {
return HOB6ME;
}

public boolean getHOB6ML() {
return HOB6ML;
}

public boolean getHOB6MR() {
return HOB6MR;
}

public boolean getHOB6MU() {
return HOB6MU;
}

public boolean getHOB6OE() {
return HOB6OE;
}

public boolean getHOB6OL() {
return HOB6OL;
}

public boolean getHOB6OR() {
return HOB6OR;
}

public boolean getHOB6OU() {
return HOB6OU;
}

public boolean getHOB6WE() {
return HOB6WE;
}

public boolean getHOB6WL() {
return HOB6WL;
}

public boolean getHOB6WR() {
return HOB6WR;
}

public boolean getHOB6WU() {
return HOB6WU;
}

public boolean getHOB6YE() {
return HOB6YE;
}

public boolean getHOB6YL() {
return HOB6YL;
}

public boolean getHOB6YR() {
return HOB6YR;
}

public boolean getHOB6YU() {
return HOB6YU;
}

public boolean getHOB7FE() {
return HOB7FE;
}

public boolean getHOB7FL() {
return HOB7FL;
}

public boolean getHOB7FR() {
return HOB7FR;
}

public boolean getHOB7FU() {
return HOB7FU;
}

public boolean getHOB7ME() {
return HOB7ME;
}

public boolean getHOB7ML() {
return HOB7ML;
}

public boolean getHOB7MR() {
return HOB7MR;
}

public boolean getHOB7MU() {
return HOB7MU;
}

public boolean getHOB7OE() {
return HOB7OE;
}

public boolean getHOB7OL() {
return HOB7OL;
}

public boolean getHOB7OR() {
return HOB7OR;
}

public boolean getHOB7OU() {
return HOB7OU;
}

public boolean getHOB7WE() {
return HOB7WE;
}

public boolean getHOB7WL() {
return HOB7WL;
}

public boolean getHOB7WR() {
return HOB7WR;
}

public boolean getHOB7WU() {
return HOB7WU;
}

public boolean getHOB7YE() {
return HOB7YE;
}

public boolean getHOB7YL() {
return HOB7YL;
}

public boolean getHOB7YR() {
return HOB7YR;
}

public boolean getHOB7YU() {
return HOB7YU;
}

public boolean getHOB8FE() {
return HOB8FE;
}

public boolean getHOB8FL() {
return HOB8FL;
}

public boolean getHOB8FR() {
return HOB8FR;
}

public boolean getHOB8FU() {
return HOB8FU;
}

public boolean getHOB8ME() {
return HOB8ME;
}

public boolean getHOB8ML() {
return HOB8ML;
}

public boolean getHOB8MR() {
return HOB8MR;
}

public boolean getHOB8MU() {
return HOB8MU;
}

public boolean getHOB8OE() {
return HOB8OE;
}

public boolean getHOB8OL() {
return HOB8OL;
}

public boolean getHOB8OR() {
return HOB8OR;
}

public boolean getHOB8OU() {
return HOB8OU;
}

public boolean getHOB8WE() {
return HOB8WE;
}

public boolean getHOB8WL() {
return HOB8WL;
}

public boolean getHOB8WR() {
return HOB8WR;
}

public boolean getHOB8WU() {
return HOB8WU;
}

public boolean getHOB8YE() {
return HOB8YE;
}

public boolean getHOB8YL() {
return HOB8YL;
}

public boolean getHOB8YR() {
return HOB8YR;
}

public boolean getHOB8YU() {
return HOB8YU;
}

public boolean getHOB9FE() {
return HOB9FE;
}

public boolean getHOB9FL() {
return HOB9FL;
}

public boolean getHOB9FR() {
return HOB9FR;
}

public boolean getHOB9FU() {
return HOB9FU;
}

public boolean getHOB9ME() {
return HOB9ME;
}

public boolean getHOB9ML() {
return HOB9ML;
}

public boolean getHOB9MR() {
return HOB9MR;
}

public boolean getHOB9MU() {
return HOB9MU;
}

public boolean getHOB9OE() {
return HOB9OE;
}

public boolean getHOB9OL() {
return HOB9OL;
}

public boolean getHOB9OR() {
return HOB9OR;
}

public boolean getHOB9OU() {
return HOB9OU;
}

public boolean getHOB9WE() {
return HOB9WE;
}

public boolean getHOB9WL() {
return HOB9WL;
}

public boolean getHOB9WR() {
return HOB9WR;
}

public boolean getHOB9WU() {
return HOB9WU;
}

public boolean getHOB9YE() {
return HOB9YE;
}

public boolean getHOB9YL() {
return HOB9YL;
}

public boolean getHOB9YR() {
return HOB9YR;
}

public boolean getHOB9YU() {
return HOB9YU;
}

public boolean getHOBA10() {
return HOBA10;
}

public boolean getHOBA11() {
return HOBA11;
}

public boolean getHOBA12() {
return HOBA12;
}

public boolean getHOBA13() {
return HOBA13;
}

public boolean getHOBAS10() {
return HOBAS10;
}

public boolean getHOBAS11() {
return HOBAS11;
}

public boolean getHOBAS12() {
return HOBAS12;
}

public boolean getHOBAS13() {
return HOBAS13;
}

public boolean getHOBFE() {
return HOBFE;
}

public boolean getHOBFL() {
return HOBFL;
}

public boolean getHOBFR() {
return HOBFR;
}

public boolean getHOBFU() {
return HOBFU;
}

public boolean getHOBME() {
return HOBME;
}

public short getHOBML() {
return HOBML;
}

public byte getHOBMR() {
return HOBMR;
}

public short getHOBMU() {
return HOBMU;
}

public boolean getHOBOE() {
return HOBOE;
}

public boolean getHOBOL() {
return HOBOL;
}

public boolean getHOBOR() {
return HOBOR;
}

public boolean getHOBOU() {
return HOBOU;
}

public boolean getHOBP10() {
return HOBP10;
}

public boolean getHOBP11() {
return HOBP11;
}

public boolean getHOBP12() {
return HOBP12;
}

public boolean getHOBP13() {
return HOBP13;
}

public byte getHOBWE() {
return HOBWE;
}

public short getHOBWL() {
return HOBWL;
}

public byte getHOBWR() {
return HOBWR;
}

public byte getHOBWU() {
return HOBWU;
}

public boolean getHOBYE() {
return HOBYE;
}

public boolean getHOBYL() {
return HOBYL;
}

public boolean getHOBYR() {
return HOBYR;
}

public boolean getHOBYU() {
return HOBYU;
}

public byte getHOFOE() {
return HOFOE;
}

public short getHOFOL() {
return HOFOL;
}

public byte getHOFOR() {
return HOFOR;
}

public short getHOFOU() {
return HOFOU;
}

public byte getHOHAV01() {
return HOHAV01;
}

public byte getHOHAV02() {
return HOHAV02;
}

public byte getHOHAV03() {
return HOHAV03;
}

public byte getHOHAV04() {
return HOHAV04;
}

public byte getHOHAV05() {
return HOHAV05;
}

public byte getHOHAV06() {
return HOHAV06;
}

public byte getHOHAV07() {
return HOHAV07;
}

public byte getHOHAV08() {
return HOHAV08;
}

public byte getHOHAV09() {
return HOHAV09;
}

public byte getHOHAV10() {
return HOHAV10;
}

public byte getHOHAV11() {
return HOHAV11;
}

public byte getHOHB1() {
return HOHB1;
}

public byte getHOHB2() {
return HOHB2;
}

public byte getHOHB3() {
return HOHB3;
}

public byte getHOHBM1() {
return HOHBM1;
}

public byte getHOHBM2() {
return HOHBM2;
}

public byte getHOHBM3() {
return HOHBM3;
}

public byte getHOINAM1() {
return HOINAM1;
}

public byte getHOINAM2() {
return HOINAM2;
}

public byte getHOINAM3() {
return HOINAM3;
}

public byte getHOINAM4() {
return HOINAM4;
}

public boolean getHOINAM5() {
return HOINAM5;
}

public byte getHOINC1() {
return HOINC1;
}

public byte getHOINC2() {
return HOINC2;
}

public byte getHOINC3() {
return HOINC3;
}

public boolean getHOINC4() {
return HOINC4;
}

public byte getHOINCA1() {
return HOINCA1;
}

public byte getHOINCA2() {
return HOINCA2;
}

public byte getHOINCA3() {
return HOINCA3;
}

public byte getHOINCA4() {
return HOINCA4;
}

public boolean getHOINCA5() {
return HOINCA5;
}

public byte getHOINCL1() {
return HOINCL1;
}

public byte getHOINCL2() {
return HOINCL2;
}

public byte getHOINCL3() {
return HOINCL3;
}

public byte getHOINCL4() {
return HOINCL4;
}

public boolean getHOINCL5() {
return HOINCL5;
}

public byte getHOINCM1() {
return HOINCM1;
}

public byte getHOINCM2() {
return HOINCM2;
}

public byte getHOINCM3() {
return HOINCM3;
}

public byte getHOINCM4() {
return HOINCM4;
}

public byte getHOMFV() {
return HOMFV;
}

public byte getHOMFV2() {
return HOMFV2;
}

public byte getHOMFV3() {
return HOMFV3;
}

public byte getHOMFV4() {
return HOMFV4;
}

public byte getHOMFV5() {
return HOMFV5;
}

public boolean getHOMIE() {
return HOMIE;
}

public boolean getHOMIL() {
return HOMIL;
}

public short getHOMINC() {
return HOMINC;
}

public boolean getHOMIR() {
return HOMIR;
}

public boolean getHOMIU() {
return HOMIU;
}

public byte getHOMRE() {
return HOMRE;
}

public short getHOMRL() {
return HOMRL;
}

public byte getHOMRR() {
return HOMRR;
}

public short getHOMRU() {
return HOMRU;
}

public byte getHOMTY() {
return HOMTY;
}

public byte getHOMTY2() {
return HOMTY2;
}

public byte getHOMTY3() {
return HOMTY3;
}

public byte getHOMTY4() {
return HOMTY4;
}

public byte getHOMTY5() {
return HOMTY5;
}

public byte getHOMTYC() {
return HOMTYC;
}

public byte getHOMTYC2() {
return HOMTYC2;
}

public byte getHOOHEA1() {
return HOOHEA1;
}

public byte getHOOHEA2() {
return HOOHEA2;
}

public byte getHOOHEA3() {
return HOOHEA3;
}

public byte getHOOHEM1() {
return HOOHEM1;
}

public byte getHOOHEM2() {
return HOOHEM2;
}

public byte getHOOHEM3() {
return HOOHEM3;
}

public byte getHOOUE() {
return HOOUE;
}

public byte getHOOUL() {
return HOOUL;
}

public byte getHOOUR() {
return HOOUR;
}

public short getHOOUU() {
return HOOUU;
}

public byte getHOPAE() {
return HOPAE;
}

public int getHOPAL() {
return HOPAL;
}

public byte getHOPAR() {
return HOPAR;
}

public int getHOPAU() {
return HOPAU;
}

public byte getHOPRM01() {
return HOPRM01;
}

public byte getHOPRM02() {
return HOPRM02;
}

public byte getHOPRM03() {
return HOPRM03;
}

public byte getHOPRM04() {
return HOPRM04;
}

public byte getHOPRM05() {
return HOPRM05;
}

public byte getHOPRM06() {
return HOPRM06;
}

public byte getHOPRM07() {
return HOPRM07;
}

public byte getHOPRM08() {
return HOPRM08;
}

public byte getHOPRM09() {
return HOPRM09;
}

public boolean getHOPRM10() {
return HOPRM10;
}

public byte getHOPRO01() {
return HOPRO01;
}

public byte getHOPRO02() {
return HOPRO02;
}

public byte getHOPRO03() {
return HOPRO03;
}

public byte getHOPRO04() {
return HOPRO04;
}

public byte getHOPRO05() {
return HOPRO05;
}

public byte getHOPRO06() {
return HOPRO06;
}

public byte getHOPRO07() {
return HOPRO07;
}

public byte getHOPRO08() {
return HOPRO08;
}

public byte getHOPRO09() {
return HOPRO09;
}

public boolean getHOPRO10() {
return HOPRO10;
}

public byte getHOREBT() {
return HOREBT;
}

public byte getHOREFE() {
return HOREFE;
}

public byte getHOREFL() {
return HOREFL;
}

public byte getHOREFR() {
return HOREFR;
}

public byte getHOREFU() {
return HOREFU;
}

public byte getHOREME() {
return HOREME;
}

public short getHOREML() {
return HOREML;
}

public byte getHOREMR() {
return HOREMR;
}

public short getHOREMU() {
return HOREMU;
}

public byte getHOREOE() {
return HOREOE;
}

public short getHOREOL() {
return HOREOL;
}

public byte getHOREOR() {
return HOREOR;
}

public short getHOREOU() {
return HOREOU;
}

public byte getHOREWE() {
return HOREWE;
}

public byte getHOREWL() {
return HOREWL;
}

public byte getHOREWR() {
return HOREWR;
}

public short getHOREWU() {
return HOREWU;
}

public byte getHOREYE() {
return HOREYE;
}

public boolean getHOREYL() {
return HOREYL;
}

public byte getHOREYR() {
return HOREYR;
}

public short getHOREYU() {
return HOREYU;
}

public byte getHORFEE() {
return HORFEE;
}

public boolean getHORFEP() {
return HORFEP;
}

public boolean getHORIE() {
return HORIE;
}

public short getHORIL() {
return HORIL;
}

public byte getHORINC() {
return HORINC;
}

public byte getHORINCC() {
return HORINCC;
}

public short getHORINM() {
return HORINM;
}

public boolean getHORIR() {
return HORIR;
}

public boolean getHORIU() {
return HORIU;
}

public byte getHORMBE() {
return HORMBE;
}

public int getHORMBL() {
return HORMBL;
}

public byte getHORMBR() {
return HORMBR;
}

public short getHORMBU() {
return HORMBU;
}

public byte getHORMO() {
return HORMO;
}

public byte getHORMO2() {
return HORMO2;
}

public byte getHORMO3() {
return HORMO3;
}

public byte getHORMO4() {
return HORMO4;
}

public byte getHORMO5() {
return HORMO5;
}

public int getHORMOL() {
return HORMOL;
}

public byte getHORMS() {
return HORMS;
}

public short getHORMU() {
return HORMU;
}

public boolean getHORMUFE() {
return HORMUFE;
}

public boolean getHORMUFL() {
return HORMUFL;
}

public boolean getHORMUFR() {
return HORMUFR;
}

public boolean getHORMUFU() {
return HORMUFU;
}

public boolean getHORMUME() {
return HORMUME;
}

public boolean getHORMUML() {
return HORMUML;
}

public boolean getHORMUMR() {
return HORMUMR;
}

public boolean getHORMUMU() {
return HORMUMU;
}

public boolean getHORMUOE() {
return HORMUOE;
}

public boolean getHORMUOL() {
return HORMUOL;
}

public boolean getHORMUOR() {
return HORMUOR;
}

public boolean getHORMUOU() {
return HORMUOU;
}

public boolean getHORMUWE() {
return HORMUWE;
}

public boolean getHORMUWL() {
return HORMUWL;
}

public boolean getHORMUWR() {
return HORMUWR;
}

public boolean getHORMUWU() {
return HORMUWU;
}

public boolean getHORMUYE() {
return HORMUYE;
}

public boolean getHORMUYL() {
return HORMUYL;
}

public boolean getHORMUYR() {
return HORMUYR;
}

public boolean getHORMUYU() {
return HORMUYU;
}

public byte getHORPAY() {
return HORPAY;
}

public byte getHORPC() {
return HORPC;
}

public int getHORPCM() {
return HORPCM;
}

public boolean getHORPE() {
return HORPE;
}

public boolean getHORPL() {
return HORPL;
}

public int getHORPM() {
return HORPM;
}

public byte getHORPME() {
return HORPME;
}

public short getHORPML() {
return HORPML;
}

public byte getHORPMR() {
return HORPMR;
}

public int getHORPMU() {
return HORPMU;
}

public boolean getHORPOF() {
return HORPOF;
}

public byte getHORPOS() {
return HORPOS;
}

public boolean getHORPR() {
return HORPR;
}

public boolean getHORPU() {
return HORPU;
}

public boolean getHORRE() {
return HORRE;
}

public boolean getHORRL() {
return HORRL;
}

public boolean getHORRM() {
return HORRM;
}

public boolean getHORRR() {
return HORRR;
}

public boolean getHORRU() {
return HORRU;
}

public byte getHOSEE() {
return HOSEE;
}

public int getHOSEL() {
return HOSEL;
}

public byte getHOSER() {
return HOSER;
}

public int getHOSEU() {
return HOSEU;
}

public int getHOVE() {
return HOVE;
}

public int getHOVE1E() {
return HOVE1E;
}

public int getHOVE1L() {
return HOVE1L;
}

public byte getHOVE1R() {
return HOVE1R;
}

public int getHOVE1U() {
return HOVE1U;
}

public int getHOVE2() {
return HOVE2;
}

public short getHOVE2E() {
return HOVE2E;
}

public short getHOVE2L() {
return HOVE2L;
}

public byte getHOVE2R() {
return HOVE2R;
}

public short getHOVE2U() {
return HOVE2U;
}

public int getHOVE3() {
return HOVE3;
}

public short getHOVE3E() {
return HOVE3E;
}

public int getHOVE3L() {
return HOVE3L;
}

public byte getHOVE3R() {
return HOVE3R;
}

public int getHOVE3U() {
return HOVE3U;
}

public short getHOVE4() {
return HOVE4;
}

public byte getHOVE4E() {
return HOVE4E;
}

public short getHOVE4L() {
return HOVE4L;
}

public byte getHOVE4R() {
return HOVE4R;
}

public short getHOVE4U() {
return HOVE4U;
}

public short getHOVE5() {
return HOVE5;
}

public byte getHOVE5E() {
return HOVE5E;
}

public int getHOVE5L() {
return HOVE5L;
}

public byte getHOVE5R() {
return HOVE5R;
}

public int getHOVE5U() {
return HOVE5U;
}

public String getHOVER() {
return HOVER;
}

public String getHOVER10() {
return HOVER10;
}

public String getHOVER2() {
return HOVER2;
}

public String getHOVER3() {
return HOVER3;
}

public String getHOVER4() {
return HOVER4;
}

public String getHOVER5() {
return HOVER5;
}

public String getHOVER6() {
return HOVER6;
}

public String getHOVER7() {
return HOVER7;
}

public boolean getHOVER8() {
return HOVER8;
}

public String getHOVER9() {
return HOVER9;
}

public String getHOVLR() {
return HOVLR;
}

public String getHOVLR10() {
return HOVLR10;
}

public String getHOVLR2() {
return HOVLR2;
}

public String getHOVLR3() {
return HOVLR3;
}

public String getHOVLR4() {
return HOVLR4;
}

public String getHOVLR5() {
return HOVLR5;
}

public String getHOVLR6() {
return HOVLR6;
}

public String getHOVLR7() {
return HOVLR7;
}

public String getHOVLR8() {
return HOVLR8;
}

public String getHOVLR9() {
return HOVLR9;
}

public byte getHOVM1E() {
return HOVM1E;
}

public int getHOVM1L() {
return HOVM1L;
}

public byte getHOVM1R() {
return HOVM1R;
}

public int getHOVM1U() {
return HOVM1U;
}

public byte getHOVM2E() {
return HOVM2E;
}

public int getHOVM2L() {
return HOVM2L;
}

public byte getHOVM2R() {
return HOVM2R;
}

public int getHOVM2U() {
return HOVM2U;
}

public byte getHOVM3E() {
return HOVM3E;
}

public int getHOVM3L() {
return HOVM3L;
}

public byte getHOVM3R() {
return HOVM3R;
}

public int getHOVM3U() {
return HOVM3U;
}

public byte getHOVM4E() {
return HOVM4E;
}

public int getHOVM4L() {
return HOVM4L;
}

public byte getHOVM4R() {
return HOVM4R;
}

public int getHOVM4U() {
return HOVM4U;
}

public boolean getHOVM5E() {
return HOVM5E;
}

public short getHOVM5L() {
return HOVM5L;
}

public boolean getHOVM5R() {
return HOVM5R;
}

public boolean getHOVM5U() {
return HOVM5U;
}

public int getHOVML() {
return HOVML;
}

public int getHOVML2() {
return HOVML2;
}

public int getHOVML3() {
return HOVML3;
}

public int getHOVML4() {
return HOVML4;
}

public int getHOVML5() {
return HOVML5;
}

public byte getHOVNO() {
return HOVNO;
}

public byte getHOVNO10() {
return HOVNO10;
}

public byte getHOVNO2() {
return HOVNO2;
}

public byte getHOVNO3() {
return HOVNO3;
}

public byte getHOVNO4() {
return HOVNO4;
}

public byte getHOVNO5() {
return HOVNO5;
}

public byte getHOVNO6() {
return HOVNO6;
}

public byte getHOVNO7() {
return HOVNO7;
}

public byte getHOVNO8() {
return HOVNO8;
}

public byte getHOVNO9() {
return HOVNO9;
}

public byte getHOVNR() {
return HOVNR;
}

public boolean getHOVNR10() {
return HOVNR10;
}

public byte getHOVNR2() {
return HOVNR2;
}

public String getHOVNR3() {
return HOVNR3;
}

public byte getHOVNR4() {
return HOVNR4;
}

public byte getHOVNR5() {
return HOVNR5;
}

public byte getHOVNR6() {
return HOVNR6;
}

public byte getHOVNR7() {
return HOVNR7;
}

public byte getHOVNR8() {
return HOVNR8;
}

public byte getHOVNR9() {
return HOVNR9;
}

public boolean getHOVO101() {
return HOVO101;
}

public boolean getHOVO102() {
return HOVO102;
}

public byte getHOVO11() {
return HOVO11;
}

public byte getHOVO12() {
return HOVO12;
}

public byte getHOVO21() {
return HOVO21;
}

public byte getHOVO22() {
return HOVO22;
}

public byte getHOVO31() {
return HOVO31;
}

public byte getHOVO32() {
return HOVO32;
}

public byte getHOVO41() {
return HOVO41;
}

public boolean getHOVO42() {
return HOVO42;
}

public byte getHOVO51() {
return HOVO51;
}

public boolean getHOVO52() {
return HOVO52;
}

public byte getHOVO61() {
return HOVO61;
}

public boolean getHOVO62() {
return HOVO62;
}

public byte getHOVO71() {
return HOVO71;
}

public boolean getHOVO72() {
return HOVO72;
}

public boolean getHOVO81() {
return HOVO81;
}

public boolean getHOVO82() {
return HOVO82;
}

public boolean getHOVO91() {
return HOVO91;
}

public boolean getHOVO92() {
return HOVO92;
}

public byte getHOVW2() {
return HOVW2;
}

public byte getHOVW3() {
return HOVW3;
}

public byte getHOVW4() {
return HOVW4;
}

public byte getHOVW5() {
return HOVW5;
}

public byte getHOVW6() {
return HOVW6;
}

public byte getHOVW7() {
return HOVW7;
}

public byte getHOVW8() {
return HOVW8;
}

public short getHOVYR() {
return HOVYR;
}

public short getHOVYR10() {
return HOVYR10;
}

public short getHOVYR2() {
return HOVYR2;
}

public short getHOVYR3() {
return HOVYR3;
}

public short getHOVYR4() {
return HOVYR4;
}

public short getHOVYR5() {
return HOVYR5;
}

public short getHOVYR6() {
return HOVYR6;
}

public short getHOVYR7() {
return HOVYR7;
}

public short getHOVYR8() {
return HOVYR8;
}

public short getHOVYR9() {
return HOVYR9;
}

public byte getHOWHN01() {
return HOWHN01;
}

public byte getHOWHN02() {
return HOWHN02;
}

public byte getHOWHN03() {
return HOWHN03;
}

public byte getHOWHN04() {
return HOWHN04;
}

public byte getHOYML() {
return HOYML;
}

public byte getHOYML2() {
return HOYML2;
}

public byte getHOYML3() {
return HOYML3;
}

public byte getHOYML4() {
return HOYML4;
}

public byte getHOYML5() {
return HOYML5;
}

public short getIAA39() {
return IAA39;
}

public boolean getIAA39FE() {
return IAA39FE;
}

public boolean getIAA39FL() {
return IAA39FL;
}

public boolean getIAA39FR() {
return IAA39FR;
}

public boolean getIAA39FU() {
return IAA39FU;
}

public byte getIAA39ME() {
return IAA39ME;
}

public short getIAA39ML() {
return IAA39ML;
}

public boolean getIAA39MR() {
return IAA39MR;
}

public short getIAA39MU() {
return IAA39MU;
}

public byte getIAA39OE() {
return IAA39OE;
}

public boolean getIAA39OL() {
return IAA39OL;
}

public byte getIAA39OR() {
return IAA39OR;
}

public short getIAA39OU() {
return IAA39OU;
}

public byte getIAA39WE() {
return IAA39WE;
}

public boolean getIAA39WL() {
return IAA39WL;
}

public boolean getIAA39WR() {
return IAA39WR;
}

public boolean getIAA39WU() {
return IAA39WU;
}

public boolean getIAA39YE() {
return IAA39YE;
}

public boolean getIAA39YL() {
return IAA39YL;
}

public boolean getIAA39YR() {
return IAA39YR;
}

public boolean getIAA39YU() {
return IAA39YU;
}

public short getIAA40() {
return IAA40;
}

public boolean getIAA40FE() {
return IAA40FE;
}

public boolean getIAA40FL() {
return IAA40FL;
}

public boolean getIAA40FR() {
return IAA40FR;
}

public boolean getIAA40FU() {
return IAA40FU;
}

public byte getIAA40ME() {
return IAA40ME;
}

public short getIAA40ML() {
return IAA40ML;
}

public boolean getIAA40MR() {
return IAA40MR;
}

public short getIAA40MU() {
return IAA40MU;
}

public byte getIAA40OE() {
return IAA40OE;
}

public short getIAA40OL() {
return IAA40OL;
}

public byte getIAA40OR() {
return IAA40OR;
}

public short getIAA40OU() {
return IAA40OU;
}

public boolean getIAA40WE() {
return IAA40WE;
}

public boolean getIAA40WL() {
return IAA40WL;
}

public boolean getIAA40WR() {
return IAA40WR;
}

public boolean getIAA40WU() {
return IAA40WU;
}

public boolean getIAA40YE() {
return IAA40YE;
}

public boolean getIAA40YL() {
return IAA40YL;
}

public boolean getIAA40YR() {
return IAA40YR;
}

public boolean getIAA40YU() {
return IAA40YU;
}

public short getIAA41() {
return IAA41;
}

public byte getIAA41FE() {
return IAA41FE;
}

public short getIAA41FL() {
return IAA41FL;
}

public byte getIAA41FR() {
return IAA41FR;
}

public short getIAA41FU() {
return IAA41FU;
}

public boolean getIAA41ME() {
return IAA41ME;
}

public boolean getIAA41ML() {
return IAA41ML;
}

public boolean getIAA41MR() {
return IAA41MR;
}

public short getIAA41MU() {
return IAA41MU;
}

public byte getIAA41OE() {
return IAA41OE;
}

public short getIAA41OL() {
return IAA41OL;
}

public byte getIAA41OR() {
return IAA41OR;
}

public short getIAA41OU() {
return IAA41OU;
}

public byte getIAA41WE() {
return IAA41WE;
}

public byte getIAA41WL() {
return IAA41WL;
}

public byte getIAA41WR() {
return IAA41WR;
}

public byte getIAA41WU() {
return IAA41WU;
}

public boolean getIAA41YE() {
return IAA41YE;
}

public boolean getIAA41YL() {
return IAA41YL;
}

public boolean getIAA41YR() {
return IAA41YR;
}

public boolean getIAA41YU() {
return IAA41YU;
}

public short getIAA42() {
return IAA42;
}

public boolean getIAA42FE() {
return IAA42FE;
}

public boolean getIAA42FL() {
return IAA42FL;
}

public boolean getIAA42FR() {
return IAA42FR;
}

public boolean getIAA42FU() {
return IAA42FU;
}

public byte getIAA42ME() {
return IAA42ME;
}

public short getIAA42ML() {
return IAA42ML;
}

public byte getIAA42MR() {
return IAA42MR;
}

public short getIAA42MU() {
return IAA42MU;
}

public byte getIAA42OE() {
return IAA42OE;
}

public short getIAA42OL() {
return IAA42OL;
}

public byte getIAA42OR() {
return IAA42OR;
}

public short getIAA42OU() {
return IAA42OU;
}

public byte getIAA42WE() {
return IAA42WE;
}

public short getIAA42WL() {
return IAA42WL;
}

public byte getIAA42WR() {
return IAA42WR;
}

public short getIAA42WU() {
return IAA42WU;
}

public boolean getIAA42YE() {
return IAA42YE;
}

public boolean getIAA42YL() {
return IAA42YL;
}

public boolean getIAA42YR() {
return IAA42YR;
}

public short getIAA42YU() {
return IAA42YU;
}

public short getIAA43() {
return IAA43;
}

public boolean getIAA43FE() {
return IAA43FE;
}

public boolean getIAA43FL() {
return IAA43FL;
}

public boolean getIAA43FR() {
return IAA43FR;
}

public boolean getIAA43FU() {
return IAA43FU;
}

public byte getIAA43ME() {
return IAA43ME;
}

public short getIAA43ML() {
return IAA43ML;
}

public byte getIAA43MR() {
return IAA43MR;
}

public short getIAA43MU() {
return IAA43MU;
}

public byte getIAA43OE() {
return IAA43OE;
}

public byte getIAA43OL() {
return IAA43OL;
}

public byte getIAA43OR() {
return IAA43OR;
}

public short getIAA43OU() {
return IAA43OU;
}

public byte getIAA43WE() {
return IAA43WE;
}

public boolean getIAA43WL() {
return IAA43WL;
}

public boolean getIAA43WR() {
return IAA43WR;
}

public boolean getIAA43WU() {
return IAA43WU;
}

public boolean getIAA43YE() {
return IAA43YE;
}

public boolean getIAA43YL() {
return IAA43YL;
}

public boolean getIAA43YR() {
return IAA43YR;
}

public boolean getIAA43YU() {
return IAA43YU;
}

public short getIAA44() {
return IAA44;
}

public boolean getIAA44FE() {
return IAA44FE;
}

public boolean getIAA44FL() {
return IAA44FL;
}

public boolean getIAA44FR() {
return IAA44FR;
}

public boolean getIAA44FU() {
return IAA44FU;
}

public byte getIAA44ME() {
return IAA44ME;
}

public short getIAA44ML() {
return IAA44ML;
}

public boolean getIAA44MR() {
return IAA44MR;
}

public short getIAA44MU() {
return IAA44MU;
}

public byte getIAA44OE() {
return IAA44OE;
}

public short getIAA44OL() {
return IAA44OL;
}

public byte getIAA44OR() {
return IAA44OR;
}

public short getIAA44OU() {
return IAA44OU;
}

public byte getIAA44WE() {
return IAA44WE;
}

public boolean getIAA44WL() {
return IAA44WL;
}

public byte getIAA44WR() {
return IAA44WR;
}

public byte getIAA44WU() {
return IAA44WU;
}

public boolean getIAA44YE() {
return IAA44YE;
}

public boolean getIAA44YL() {
return IAA44YL;
}

public boolean getIAA44YR() {
return IAA44YR;
}

public boolean getIAA44YU() {
return IAA44YU;
}

public short getIAA45() {
return IAA45;
}

public boolean getIAA45FE() {
return IAA45FE;
}

public boolean getIAA45FL() {
return IAA45FL;
}

public boolean getIAA45FR() {
return IAA45FR;
}

public boolean getIAA45FU() {
return IAA45FU;
}

public byte getIAA45ME() {
return IAA45ME;
}

public short getIAA45ML() {
return IAA45ML;
}

public byte getIAA45MR() {
return IAA45MR;
}

public short getIAA45MU() {
return IAA45MU;
}

public byte getIAA45OE() {
return IAA45OE;
}

public short getIAA45OL() {
return IAA45OL;
}

public byte getIAA45OR() {
return IAA45OR;
}

public short getIAA45OU() {
return IAA45OU;
}

public byte getIAA45WE() {
return IAA45WE;
}

public byte getIAA45WL() {
return IAA45WL;
}

public byte getIAA45WR() {
return IAA45WR;
}

public short getIAA45WU() {
return IAA45WU;
}

public boolean getIAA45YE() {
return IAA45YE;
}

public boolean getIAA45YL() {
return IAA45YL;
}

public boolean getIAA45YR() {
return IAA45YR;
}

public boolean getIAA45YU() {
return IAA45YU;
}

public short getIAA46() {
return IAA46;
}

public boolean getIAA46FE() {
return IAA46FE;
}

public short getIAA46FL() {
return IAA46FL;
}

public boolean getIAA46FR() {
return IAA46FR;
}

public short getIAA46FU() {
return IAA46FU;
}

public byte getIAA46ME() {
return IAA46ME;
}

public short getIAA46ML() {
return IAA46ML;
}

public byte getIAA46MR() {
return IAA46MR;
}

public short getIAA46MU() {
return IAA46MU;
}

public byte getIAA46OE() {
return IAA46OE;
}

public short getIAA46OL() {
return IAA46OL;
}

public byte getIAA46OR() {
return IAA46OR;
}

public short getIAA46OU() {
return IAA46OU;
}

public byte getIAA46WE() {
return IAA46WE;
}

public byte getIAA46WL() {
return IAA46WL;
}

public boolean getIAA46WR() {
return IAA46WR;
}

public byte getIAA46WU() {
return IAA46WU;
}

public boolean getIAA46YE() {
return IAA46YE;
}

public boolean getIAA46YL() {
return IAA46YL;
}

public boolean getIAA46YR() {
return IAA46YR;
}

public boolean getIAA46YU() {
return IAA46YU;
}

public short getIAA47() {
return IAA47;
}

public boolean getIAA47FE() {
return IAA47FE;
}

public boolean getIAA47FL() {
return IAA47FL;
}

public boolean getIAA47FR() {
return IAA47FR;
}

public boolean getIAA47FU() {
return IAA47FU;
}

public byte getIAA47ME() {
return IAA47ME;
}

public short getIAA47ML() {
return IAA47ML;
}

public boolean getIAA47MR() {
return IAA47MR;
}

public short getIAA47MU() {
return IAA47MU;
}

public byte getIAA47OE() {
return IAA47OE;
}

public short getIAA47OL() {
return IAA47OL;
}

public byte getIAA47OR() {
return IAA47OR;
}

public short getIAA47OU() {
return IAA47OU;
}

public byte getIAA47WE() {
return IAA47WE;
}

public byte getIAA47WL() {
return IAA47WL;
}

public byte getIAA47WR() {
return IAA47WR;
}

public byte getIAA47WU() {
return IAA47WU;
}

public boolean getIAA47YE() {
return IAA47YE;
}

public boolean getIAA47YL() {
return IAA47YL;
}

public boolean getIAA47YR() {
return IAA47YR;
}

public short getIAA47YU() {
return IAA47YU;
}

public short getIAA48() {
return IAA48;
}

public boolean getIAA48FE() {
return IAA48FE;
}

public boolean getIAA48FL() {
return IAA48FL;
}

public boolean getIAA48FR() {
return IAA48FR;
}

public boolean getIAA48FU() {
return IAA48FU;
}

public boolean getIAA48ME() {
return IAA48ME;
}

public boolean getIAA48ML() {
return IAA48ML;
}

public boolean getIAA48MR() {
return IAA48MR;
}

public short getIAA48MU() {
return IAA48MU;
}

public byte getIAA48OE() {
return IAA48OE;
}

public short getIAA48OL() {
return IAA48OL;
}

public byte getIAA48OR() {
return IAA48OR;
}

public short getIAA48OU() {
return IAA48OU;
}

public byte getIAA48WE() {
return IAA48WE;
}

public byte getIAA48WL() {
return IAA48WL;
}

public boolean getIAA48WR() {
return IAA48WR;
}

public short getIAA48WU() {
return IAA48WU;
}

public boolean getIAA48YE() {
return IAA48YE;
}

public boolean getIAA48YL() {
return IAA48YL;
}

public boolean getIAA48YR() {
return IAA48YR;
}

public boolean getIAA48YU() {
return IAA48YU;
}

public short getIAA49() {
return IAA49;
}

public boolean getIAA49FE() {
return IAA49FE;
}

public boolean getIAA49FL() {
return IAA49FL;
}

public boolean getIAA49FR() {
return IAA49FR;
}

public boolean getIAA49FU() {
return IAA49FU;
}

public boolean getIAA49ME() {
return IAA49ME;
}

public boolean getIAA49ML() {
return IAA49ML;
}

public boolean getIAA49MR() {
return IAA49MR;
}

public short getIAA49MU() {
return IAA49MU;
}

public boolean getIAA49OE() {
return IAA49OE;
}

public boolean getIAA49OL() {
return IAA49OL;
}

public boolean getIAA49OR() {
return IAA49OR;
}

public short getIAA49OU() {
return IAA49OU;
}

public boolean getIAA49WE() {
return IAA49WE;
}

public boolean getIAA49WL() {
return IAA49WL;
}

public boolean getIAA49WR() {
return IAA49WR;
}

public boolean getIAA49WU() {
return IAA49WU;
}

public boolean getIAA49YE() {
return IAA49YE;
}

public boolean getIAA49YL() {
return IAA49YL;
}

public boolean getIAA49YR() {
return IAA49YR;
}

public boolean getIAA49YU() {
return IAA49YU;
}

public short getIAA50() {
return IAA50;
}

public boolean getIAA50FE() {
return IAA50FE;
}

public boolean getIAA50FL() {
return IAA50FL;
}

public boolean getIAA50FR() {
return IAA50FR;
}

public boolean getIAA50FU() {
return IAA50FU;
}

public boolean getIAA50ME() {
return IAA50ME;
}

public boolean getIAA50ML() {
return IAA50ML;
}

public boolean getIAA50MR() {
return IAA50MR;
}

public boolean getIAA50MU() {
return IAA50MU;
}

public boolean getIAA50OE() {
return IAA50OE;
}

public boolean getIAA50OL() {
return IAA50OL;
}

public boolean getIAA50OR() {
return IAA50OR;
}

public boolean getIAA50OU() {
return IAA50OU;
}

public byte getIAA50WE() {
return IAA50WE;
}

public byte getIAA50WL() {
return IAA50WL;
}

public byte getIAA50WR() {
return IAA50WR;
}

public byte getIAA50WU() {
return IAA50WU;
}

public boolean getIAA50YE() {
return IAA50YE;
}

public boolean getIAA50YL() {
return IAA50YL;
}

public boolean getIAA50YR() {
return IAA50YR;
}

public boolean getIAA50YU() {
return IAA50YU;
}

public short getIAA51() {
return IAA51;
}

public boolean getIAA51FE() {
return IAA51FE;
}

public boolean getIAA51FL() {
return IAA51FL;
}

public boolean getIAA51FR() {
return IAA51FR;
}

public boolean getIAA51FU() {
return IAA51FU;
}

public boolean getIAA51ME() {
return IAA51ME;
}

public boolean getIAA51ML() {
return IAA51ML;
}

public boolean getIAA51MR() {
return IAA51MR;
}

public boolean getIAA51MU() {
return IAA51MU;
}

public byte getIAA51OE() {
return IAA51OE;
}

public short getIAA51OL() {
return IAA51OL;
}

public byte getIAA51OR() {
return IAA51OR;
}

public short getIAA51OU() {
return IAA51OU;
}

public boolean getIAA51WE() {
return IAA51WE;
}

public boolean getIAA51WL() {
return IAA51WL;
}

public boolean getIAA51WR() {
return IAA51WR;
}

public boolean getIAA51WU() {
return IAA51WU;
}

public boolean getIAA51YE() {
return IAA51YE;
}

public boolean getIAA51YL() {
return IAA51YL;
}

public boolean getIAA51YR() {
return IAA51YR;
}

public boolean getIAA51YU() {
return IAA51YU;
}

public short getIAA52() {
return IAA52;
}

public boolean getIAA52FE() {
return IAA52FE;
}

public boolean getIAA52FL() {
return IAA52FL;
}

public boolean getIAA52FR() {
return IAA52FR;
}

public boolean getIAA52FU() {
return IAA52FU;
}

public boolean getIAA52ME() {
return IAA52ME;
}

public boolean getIAA52ML() {
return IAA52ML;
}

public boolean getIAA52MR() {
return IAA52MR;
}

public short getIAA52MU() {
return IAA52MU;
}

public byte getIAA52OE() {
return IAA52OE;
}

public boolean getIAA52OL() {
return IAA52OL;
}

public byte getIAA52OR() {
return IAA52OR;
}

public short getIAA52OU() {
return IAA52OU;
}

public boolean getIAA52WE() {
return IAA52WE;
}

public boolean getIAA52WL() {
return IAA52WL;
}

public boolean getIAA52WR() {
return IAA52WR;
}

public boolean getIAA52WU() {
return IAA52WU;
}

public boolean getIAA52YE() {
return IAA52YE;
}

public boolean getIAA52YL() {
return IAA52YL;
}

public boolean getIAA52YR() {
return IAA52YR;
}

public boolean getIAA52YU() {
return IAA52YU;
}

public short getIAA53() {
return IAA53;
}

public boolean getIAA53FE() {
return IAA53FE;
}

public boolean getIAA53FL() {
return IAA53FL;
}

public boolean getIAA53FR() {
return IAA53FR;
}

public boolean getIAA53FU() {
return IAA53FU;
}

public boolean getIAA53ME() {
return IAA53ME;
}

public boolean getIAA53ML() {
return IAA53ML;
}

public boolean getIAA53MR() {
return IAA53MR;
}

public short getIAA53MU() {
return IAA53MU;
}

public byte getIAA53OE() {
return IAA53OE;
}

public boolean getIAA53OL() {
return IAA53OL;
}

public byte getIAA53OR() {
return IAA53OR;
}

public short getIAA53OU() {
return IAA53OU;
}

public byte getIAA53WE() {
return IAA53WE;
}

public boolean getIAA53WL() {
return IAA53WL;
}

public byte getIAA53WR() {
return IAA53WR;
}

public byte getIAA53WU() {
return IAA53WU;
}

public boolean getIAA53YE() {
return IAA53YE;
}

public boolean getIAA53YL() {
return IAA53YL;
}

public boolean getIAA53YR() {
return IAA53YR;
}

public boolean getIAA53YU() {
return IAA53YU;
}

public short getIAA54() {
return IAA54;
}

public boolean getIAA54FE() {
return IAA54FE;
}

public boolean getIAA54FL() {
return IAA54FL;
}

public boolean getIAA54FR() {
return IAA54FR;
}

public boolean getIAA54FU() {
return IAA54FU;
}

public boolean getIAA54ME() {
return IAA54ME;
}

public short getIAA54ML() {
return IAA54ML;
}

public boolean getIAA54MR() {
return IAA54MR;
}

public short getIAA54MU() {
return IAA54MU;
}

public byte getIAA54OE() {
return IAA54OE;
}

public short getIAA54OL() {
return IAA54OL;
}

public byte getIAA54OR() {
return IAA54OR;
}

public short getIAA54OU() {
return IAA54OU;
}

public boolean getIAA54WE() {
return IAA54WE;
}

public boolean getIAA54WL() {
return IAA54WL;
}

public boolean getIAA54WR() {
return IAA54WR;
}

public boolean getIAA54WU() {
return IAA54WU;
}

public boolean getIAA54YE() {
return IAA54YE;
}

public boolean getIAA54YL() {
return IAA54YL;
}

public boolean getIAA54YR() {
return IAA54YR;
}

public short getIAA54YU() {
return IAA54YU;
}

public short getIAA55() {
return IAA55;
}

public byte getIAA55FE() {
return IAA55FE;
}

public byte getIAA55FL() {
return IAA55FL;
}

public boolean getIAA55FR() {
return IAA55FR;
}

public byte getIAA55FU() {
return IAA55FU;
}

public boolean getIAA55ME() {
return IAA55ME;
}

public short getIAA55ML() {
return IAA55ML;
}

public boolean getIAA55MR() {
return IAA55MR;
}

public short getIAA55MU() {
return IAA55MU;
}

public byte getIAA55OE() {
return IAA55OE;
}

public short getIAA55OL() {
return IAA55OL;
}

public byte getIAA55OR() {
return IAA55OR;
}

public short getIAA55OU() {
return IAA55OU;
}

public byte getIAA55WE() {
return IAA55WE;
}

public short getIAA55WL() {
return IAA55WL;
}

public byte getIAA55WR() {
return IAA55WR;
}

public short getIAA55WU() {
return IAA55WU;
}

public boolean getIAA55YE() {
return IAA55YE;
}

public boolean getIAA55YL() {
return IAA55YL;
}

public boolean getIAA55YR() {
return IAA55YR;
}

public boolean getIAA55YU() {
return IAA55YU;
}

public short getIAA56() {
return IAA56;
}

public boolean getIAA56FE() {
return IAA56FE;
}

public boolean getIAA56FL() {
return IAA56FL;
}

public boolean getIAA56FR() {
return IAA56FR;
}

public boolean getIAA56FU() {
return IAA56FU;
}

public boolean getIAA56ME() {
return IAA56ME;
}

public short getIAA56ML() {
return IAA56ML;
}

public boolean getIAA56MR() {
return IAA56MR;
}

public short getIAA56MU() {
return IAA56MU;
}

public byte getIAA56OE() {
return IAA56OE;
}

public byte getIAA56OL() {
return IAA56OL;
}

public byte getIAA56OR() {
return IAA56OR;
}

public short getIAA56OU() {
return IAA56OU;
}

public byte getIAA56WE() {
return IAA56WE;
}

public byte getIAA56WL() {
return IAA56WL;
}

public byte getIAA56WR() {
return IAA56WR;
}

public byte getIAA56WU() {
return IAA56WU;
}

public boolean getIAA56YE() {
return IAA56YE;
}

public boolean getIAA56YL() {
return IAA56YL;
}

public boolean getIAA56YR() {
return IAA56YR;
}

public boolean getIAA56YU() {
return IAA56YU;
}

public short getIAA57() {
return IAA57;
}

public boolean getIAA57FE() {
return IAA57FE;
}

public boolean getIAA57FL() {
return IAA57FL;
}

public boolean getIAA57FR() {
return IAA57FR;
}

public boolean getIAA57FU() {
return IAA57FU;
}

public boolean getIAA57ME() {
return IAA57ME;
}

public boolean getIAA57ML() {
return IAA57ML;
}

public boolean getIAA57MR() {
return IAA57MR;
}

public boolean getIAA57MU() {
return IAA57MU;
}

public boolean getIAA57OE() {
return IAA57OE;
}

public boolean getIAA57OL() {
return IAA57OL;
}

public boolean getIAA57OR() {
return IAA57OR;
}

public short getIAA57OU() {
return IAA57OU;
}

public boolean getIAA57WE() {
return IAA57WE;
}

public boolean getIAA57WL() {
return IAA57WL;
}

public boolean getIAA57WR() {
return IAA57WR;
}

public boolean getIAA57WU() {
return IAA57WU;
}

public boolean getIAA57YE() {
return IAA57YE;
}

public boolean getIAA57YL() {
return IAA57YL;
}

public boolean getIAA57YR() {
return IAA57YR;
}

public boolean getIAA57YU() {
return IAA57YU;
}

public short getIAA58() {
return IAA58;
}

public boolean getIAA58FE() {
return IAA58FE;
}

public boolean getIAA58FL() {
return IAA58FL;
}

public boolean getIAA58FR() {
return IAA58FR;
}

public boolean getIAA58FU() {
return IAA58FU;
}

public boolean getIAA58ME() {
return IAA58ME;
}

public boolean getIAA58ML() {
return IAA58ML;
}

public boolean getIAA58MR() {
return IAA58MR;
}

public boolean getIAA58MU() {
return IAA58MU;
}

public boolean getIAA58OE() {
return IAA58OE;
}

public boolean getIAA58OL() {
return IAA58OL;
}

public boolean getIAA58OR() {
return IAA58OR;
}

public boolean getIAA58OU() {
return IAA58OU;
}

public boolean getIAA58WE() {
return IAA58WE;
}

public boolean getIAA58WL() {
return IAA58WL;
}

public boolean getIAA58WR() {
return IAA58WR;
}

public boolean getIAA58WU() {
return IAA58WU;
}

public boolean getIAA58YE() {
return IAA58YE;
}

public boolean getIAA58YL() {
return IAA58YL;
}

public boolean getIAA58YR() {
return IAA58YR;
}

public boolean getIAA58YU() {
return IAA58YU;
}

public short getIAA59() {
return IAA59;
}

public boolean getIAA59FE() {
return IAA59FE;
}

public boolean getIAA59FL() {
return IAA59FL;
}

public boolean getIAA59FR() {
return IAA59FR;
}

public boolean getIAA59FU() {
return IAA59FU;
}

public boolean getIAA59ME() {
return IAA59ME;
}

public boolean getIAA59ML() {
return IAA59ML;
}

public boolean getIAA59MR() {
return IAA59MR;
}

public boolean getIAA59MU() {
return IAA59MU;
}

public boolean getIAA59OE() {
return IAA59OE;
}

public boolean getIAA59OL() {
return IAA59OL;
}

public boolean getIAA59OR() {
return IAA59OR;
}

public boolean getIAA59OU() {
return IAA59OU;
}

public boolean getIAA59WE() {
return IAA59WE;
}

public boolean getIAA59WL() {
return IAA59WL;
}

public boolean getIAA59WR() {
return IAA59WR;
}

public boolean getIAA59WU() {
return IAA59WU;
}

public boolean getIAA59YE() {
return IAA59YE;
}

public boolean getIAA59YL() {
return IAA59YL;
}

public boolean getIAA59YR() {
return IAA59YR;
}

public boolean getIAA59YU() {
return IAA59YU;
}

public short getIAA60() {
return IAA60;
}

public boolean getIAA60FE() {
return IAA60FE;
}

public boolean getIAA60FL() {
return IAA60FL;
}

public boolean getIAA60FR() {
return IAA60FR;
}

public boolean getIAA60FU() {
return IAA60FU;
}

public byte getIAA60ME() {
return IAA60ME;
}

public boolean getIAA60ML() {
return IAA60ML;
}

public boolean getIAA60MR() {
return IAA60MR;
}

public short getIAA60MU() {
return IAA60MU;
}

public byte getIAA60OE() {
return IAA60OE;
}

public short getIAA60OL() {
return IAA60OL;
}

public boolean getIAA60OR() {
return IAA60OR;
}

public short getIAA60OU() {
return IAA60OU;
}

public boolean getIAA60WE() {
return IAA60WE;
}

public boolean getIAA60WL() {
return IAA60WL;
}

public boolean getIAA60WR() {
return IAA60WR;
}

public boolean getIAA60WU() {
return IAA60WU;
}

public boolean getIAA60YE() {
return IAA60YE;
}

public boolean getIAA60YL() {
return IAA60YL;
}

public boolean getIAA60YR() {
return IAA60YR;
}

public boolean getIAA60YU() {
return IAA60YU;
}

public short getIAA61() {
return IAA61;
}

public boolean getIAA61FE() {
return IAA61FE;
}

public boolean getIAA61FL() {
return IAA61FL;
}

public boolean getIAA61FR() {
return IAA61FR;
}

public boolean getIAA61FU() {
return IAA61FU;
}

public byte getIAA61ME() {
return IAA61ME;
}

public short getIAA61ML() {
return IAA61ML;
}

public boolean getIAA61MR() {
return IAA61MR;
}

public short getIAA61MU() {
return IAA61MU;
}

public byte getIAA61OE() {
return IAA61OE;
}

public boolean getIAA61OL() {
return IAA61OL;
}

public byte getIAA61OR() {
return IAA61OR;
}

public short getIAA61OU() {
return IAA61OU;
}

public boolean getIAA61WE() {
return IAA61WE;
}

public boolean getIAA61WL() {
return IAA61WL;
}

public boolean getIAA61WR() {
return IAA61WR;
}

public boolean getIAA61WU() {
return IAA61WU;
}

public boolean getIAA61YE() {
return IAA61YE;
}

public boolean getIAA61YL() {
return IAA61YL;
}

public boolean getIAA61YR() {
return IAA61YR;
}

public boolean getIAA61YU() {
return IAA61YU;
}

public short getIAA62() {
return IAA62;
}

public boolean getIAA62FE() {
return IAA62FE;
}

public boolean getIAA62FL() {
return IAA62FL;
}

public boolean getIAA62FR() {
return IAA62FR;
}

public boolean getIAA62FU() {
return IAA62FU;
}

public boolean getIAA62ME() {
return IAA62ME;
}

public boolean getIAA62ML() {
return IAA62ML;
}

public boolean getIAA62MR() {
return IAA62MR;
}

public short getIAA62MU() {
return IAA62MU;
}

public byte getIAA62OE() {
return IAA62OE;
}

public short getIAA62OL() {
return IAA62OL;
}

public byte getIAA62OR() {
return IAA62OR;
}

public short getIAA62OU() {
return IAA62OU;
}

public boolean getIAA62WE() {
return IAA62WE;
}

public boolean getIAA62WL() {
return IAA62WL;
}

public boolean getIAA62WR() {
return IAA62WR;
}

public boolean getIAA62WU() {
return IAA62WU;
}

public boolean getIAA62YE() {
return IAA62YE;
}

public boolean getIAA62YL() {
return IAA62YL;
}

public boolean getIAA62YR() {
return IAA62YR;
}

public boolean getIAA62YU() {
return IAA62YU;
}

public short getIAA63() {
return IAA63;
}

public boolean getIAA63FE() {
return IAA63FE;
}

public boolean getIAA63FL() {
return IAA63FL;
}

public boolean getIAA63FR() {
return IAA63FR;
}

public boolean getIAA63FU() {
return IAA63FU;
}

public boolean getIAA63ME() {
return IAA63ME;
}

public boolean getIAA63ML() {
return IAA63ML;
}

public boolean getIAA63MR() {
return IAA63MR;
}

public boolean getIAA63MU() {
return IAA63MU;
}

public boolean getIAA63OE() {
return IAA63OE;
}

public boolean getIAA63OL() {
return IAA63OL;
}

public boolean getIAA63OR() {
return IAA63OR;
}

public boolean getIAA63OU() {
return IAA63OU;
}

public boolean getIAA63WE() {
return IAA63WE;
}

public boolean getIAA63WL() {
return IAA63WL;
}

public boolean getIAA63WR() {
return IAA63WR;
}

public boolean getIAA63WU() {
return IAA63WU;
}

public boolean getIAA63YE() {
return IAA63YE;
}

public boolean getIAA63YL() {
return IAA63YL;
}

public boolean getIAA63YR() {
return IAA63YR;
}

public boolean getIAA63YU() {
return IAA63YU;
}

public short getIAA64() {
return IAA64;
}

public boolean getIAA64FE() {
return IAA64FE;
}

public boolean getIAA64FL() {
return IAA64FL;
}

public boolean getIAA64FR() {
return IAA64FR;
}

public boolean getIAA64FU() {
return IAA64FU;
}

public boolean getIAA64ME() {
return IAA64ME;
}

public boolean getIAA64ML() {
return IAA64ML;
}

public boolean getIAA64MR() {
return IAA64MR;
}

public short getIAA64MU() {
return IAA64MU;
}

public boolean getIAA64OE() {
return IAA64OE;
}

public boolean getIAA64OL() {
return IAA64OL;
}

public byte getIAA64OR() {
return IAA64OR;
}

public short getIAA64OU() {
return IAA64OU;
}

public boolean getIAA64WE() {
return IAA64WE;
}

public boolean getIAA64WL() {
return IAA64WL;
}

public boolean getIAA64WR() {
return IAA64WR;
}

public boolean getIAA64WU() {
return IAA64WU;
}

public boolean getIAA64YE() {
return IAA64YE;
}

public boolean getIAA64YL() {
return IAA64YL;
}

public boolean getIAA64YR() {
return IAA64YR;
}

public boolean getIAA64YU() {
return IAA64YU;
}

public short getIAA65() {
return IAA65;
}

public boolean getIAA65FE() {
return IAA65FE;
}

public boolean getIAA65FL() {
return IAA65FL;
}

public boolean getIAA65FR() {
return IAA65FR;
}

public boolean getIAA65FU() {
return IAA65FU;
}

public byte getIAA65ME() {
return IAA65ME;
}

public short getIAA65ML() {
return IAA65ML;
}

public byte getIAA65MR() {
return IAA65MR;
}

public short getIAA65MU() {
return IAA65MU;
}

public boolean getIAA65OE() {
return IAA65OE;
}

public boolean getIAA65OL() {
return IAA65OL;
}

public boolean getIAA65OR() {
return IAA65OR;
}

public short getIAA65OU() {
return IAA65OU;
}

public byte getIAA65WE() {
return IAA65WE;
}

public boolean getIAA65WL() {
return IAA65WL;
}

public byte getIAA65WR() {
return IAA65WR;
}

public byte getIAA65WU() {
return IAA65WU;
}

public boolean getIAA65YE() {
return IAA65YE;
}

public boolean getIAA65YL() {
return IAA65YL;
}

public boolean getIAA65YR() {
return IAA65YR;
}

public boolean getIAA65YU() {
return IAA65YU;
}

public short getIAA66() {
return IAA66;
}

public boolean getIAA66FE() {
return IAA66FE;
}

public boolean getIAA66FL() {
return IAA66FL;
}

public boolean getIAA66FR() {
return IAA66FR;
}

public boolean getIAA66FU() {
return IAA66FU;
}

public boolean getIAA66ME() {
return IAA66ME;
}

public boolean getIAA66ML() {
return IAA66ML;
}

public boolean getIAA66MR() {
return IAA66MR;
}

public boolean getIAA66MU() {
return IAA66MU;
}

public boolean getIAA66OE() {
return IAA66OE;
}

public boolean getIAA66OL() {
return IAA66OL;
}

public boolean getIAA66OR() {
return IAA66OR;
}

public short getIAA66OU() {
return IAA66OU;
}

public boolean getIAA66WE() {
return IAA66WE;
}

public boolean getIAA66WL() {
return IAA66WL;
}

public boolean getIAA66WR() {
return IAA66WR;
}

public boolean getIAA66WU() {
return IAA66WU;
}

public boolean getIAA66YE() {
return IAA66YE;
}

public boolean getIAA66YL() {
return IAA66YL;
}

public boolean getIAA66YR() {
return IAA66YR;
}

public boolean getIAA66YU() {
return IAA66YU;
}

public byte getIAA67() {
return IAA67;
}

public boolean getIAA67FE() {
return IAA67FE;
}

public boolean getIAA67FL() {
return IAA67FL;
}

public boolean getIAA67FR() {
return IAA67FR;
}

public short getIAA67FU() {
return IAA67FU;
}

public boolean getIAA67ME() {
return IAA67ME;
}

public boolean getIAA67ML() {
return IAA67ML;
}

public boolean getIAA67MR() {
return IAA67MR;
}

public boolean getIAA67MU() {
return IAA67MU;
}

public boolean getIAA67OE() {
return IAA67OE;
}

public boolean getIAA67OL() {
return IAA67OL;
}

public boolean getIAA67OR() {
return IAA67OR;
}

public boolean getIAA67OU() {
return IAA67OU;
}

public boolean getIAA67WE() {
return IAA67WE;
}

public boolean getIAA67WL() {
return IAA67WL;
}

public boolean getIAA67WR() {
return IAA67WR;
}

public boolean getIAA67WU() {
return IAA67WU;
}

public boolean getIAA67YE() {
return IAA67YE;
}

public boolean getIAA67YL() {
return IAA67YL;
}

public boolean getIAA67YR() {
return IAA67YR;
}

public boolean getIAA67YU() {
return IAA67YU;
}

public short getIAA68() {
return IAA68;
}

public boolean getIAA68FE() {
return IAA68FE;
}

public boolean getIAA68FL() {
return IAA68FL;
}

public boolean getIAA68FR() {
return IAA68FR;
}

public boolean getIAA68FU() {
return IAA68FU;
}

public boolean getIAA68ME() {
return IAA68ME;
}

public boolean getIAA68ML() {
return IAA68ML;
}

public boolean getIAA68MR() {
return IAA68MR;
}

public boolean getIAA68MU() {
return IAA68MU;
}

public boolean getIAA68OE() {
return IAA68OE;
}

public boolean getIAA68OL() {
return IAA68OL;
}

public boolean getIAA68OR() {
return IAA68OR;
}

public boolean getIAA68OU() {
return IAA68OU;
}

public boolean getIAA68WE() {
return IAA68WE;
}

public boolean getIAA68WL() {
return IAA68WL;
}

public boolean getIAA68WR() {
return IAA68WR;
}

public boolean getIAA68WU() {
return IAA68WU;
}

public boolean getIAA68YE() {
return IAA68YE;
}

public boolean getIAA68YL() {
return IAA68YL;
}

public boolean getIAA68YR() {
return IAA68YR;
}

public boolean getIAA68YU() {
return IAA68YU;
}

public byte getIAAIE() {
return IAAIE;
}

public short getIAAIL() {
return IAAIL;
}

public byte getIAAIR() {
return IAAIR;
}

public short getIAAIU() {
return IAAIU;
}

public byte getIAB11() {
return IAB11;
}

public byte getIAB12() {
return IAB12;
}

public byte getIAB13() {
return IAB13;
}

public byte getIAB14() {
return IAB14;
}

public byte getIAB15() {
return IAB15;
}

public byte getIAB16() {
return IAB16;
}

public byte getIAB17() {
return IAB17;
}

public byte getIAB18() {
return IAB18;
}

public boolean getIAB19() {
return IAB19;
}

public byte getIAB20() {
return IAB20;
}

public byte getIAB31() {
return IAB31;
}

public byte getIAB32() {
return IAB32;
}

public byte getIAB33() {
return IAB33;
}

public byte getIAB34() {
return IAB34;
}

public byte getIAB35() {
return IAB35;
}

public byte getIAB36() {
return IAB36;
}

public boolean getIAB37() {
return IAB37;
}

public byte getIAB38() {
return IAB38;
}

public byte getIAB39() {
return IAB39;
}

public byte getIAB40() {
return IAB40;
}

public byte getIAB48() {
return IAB48;
}

public byte getIAB49() {
return IAB49;
}

public byte getIAB50() {
return IAB50;
}

public byte getIAB51() {
return IAB51;
}

public byte getIAB52() {
return IAB52;
}

public byte getIAB53() {
return IAB53;
}

public byte getIAB54() {
return IAB54;
}

public byte getIAB62() {
return IAB62;
}

public boolean getIAB63() {
return IAB63;
}

public byte getIAB64() {
return IAB64;
}

public byte getIAB65() {
return IAB65;
}

public byte getIAB66() {
return IAB66;
}

public byte getIAB67() {
return IAB67;
}

public byte getIAB68() {
return IAB68;
}

public byte getIABEB() {
return IABEB;
}

public byte getIABEN1() {
return IABEN1;
}

public byte getIABEN2() {
return IABEN2;
}

public byte getIABEN3() {
return IABEN3;
}

public boolean getIABEN4() {
return IABEN4;
}

public byte getIABEP1() {
return IABEP1;
}

public byte getIABEP2() {
return IABEP2;
}

public boolean getIABEP3() {
return IABEP3;
}

public byte getIABEPN1() {
return IABEPN1;
}

public byte getIABEPN2() {
return IABEPN2;
}

public boolean getIABEPN3() {
return IABEPN3;
}

public byte getIABER1() {
return IABER1;
}

public byte getIABER2() {
return IABER2;
}

public byte getIABER3() {
return IABER3;
}

public byte getIABER4() {
return IABER4;
}

public byte getIABM11() {
return IABM11;
}

public byte getIABM12() {
return IABM12;
}

public byte getIABM13() {
return IABM13;
}

public byte getIABM14() {
return IABM14;
}

public byte getIABM15() {
return IABM15;
}

public boolean getIABM16() {
return IABM16;
}

public byte getIABM17() {
return IABM17;
}

public byte getIABM18() {
return IABM18;
}

public boolean getIABM19() {
return IABM19;
}

public byte getIABM20() {
return IABM20;
}

public byte getIABM31() {
return IABM31;
}

public byte getIABM32() {
return IABM32;
}

public byte getIABM33() {
return IABM33;
}

public boolean getIABM34() {
return IABM34;
}

public byte getIABM35() {
return IABM35;
}

public byte getIABM36() {
return IABM36;
}

public boolean getIABM37() {
return IABM37;
}

public byte getIABM38() {
return IABM38;
}

public boolean getIABM39() {
return IABM39;
}

public boolean getIABM40() {
return IABM40;
}

public byte getIABM48() {
return IABM48;
}

public byte getIABM49() {
return IABM49;
}

public byte getIABM50() {
return IABM50;
}

public byte getIABM51() {
return IABM51;
}

public byte getIABM52() {
return IABM52;
}

public byte getIABM53() {
return IABM53;
}

public byte getIABM54() {
return IABM54;
}

public byte getIABM62() {
return IABM62;
}

public boolean getIABM63() {
return IABM63;
}

public byte getIABM64() {
return IABM64;
}

public byte getIABM65() {
return IABM65;
}

public byte getIABM66() {
return IABM66;
}

public byte getIABM67() {
return IABM67;
}

public byte getIABM68() {
return IABM68;
}

public byte getIABPM01() {
return IABPM01;
}

public byte getIABPM02() {
return IABPM02;
}

public byte getIABPM03() {
return IABPM03;
}

public byte getIABRM01() {
return IABRM01;
}

public byte getIABRM02() {
return IABRM02;
}

public byte getIABRM03() {
return IABRM03;
}

public byte getIABRM04() {
return IABRM04;
}

public byte getIABW11() {
return IABW11;
}

public byte getIABW12() {
return IABW12;
}

public byte getIABW13() {
return IABW13;
}

public byte getIABW14() {
return IABW14;
}

public byte getIABW15() {
return IABW15;
}

public byte getIABW16() {
return IABW16;
}

public byte getIABW17() {
return IABW17;
}

public byte getIABW18() {
return IABW18;
}

public boolean getIABW19() {
return IABW19;
}

public boolean getIABW20() {
return IABW20;
}

public byte getIABW31() {
return IABW31;
}

public byte getIABW32() {
return IABW32;
}

public byte getIABW33() {
return IABW33;
}

public byte getIABW34() {
return IABW34;
}

public byte getIABW35() {
return IABW35;
}

public boolean getIABW36() {
return IABW36;
}

public boolean getIABW37() {
return IABW37;
}

public boolean getIABW38() {
return IABW38;
}

public boolean getIABW39() {
return IABW39;
}

public byte getIABW40() {
return IABW40;
}

public byte getIABW48() {
return IABW48;
}

public byte getIABW49() {
return IABW49;
}

public byte getIABW50() {
return IABW50;
}

public byte getIABW51() {
return IABW51;
}

public byte getIABW52() {
return IABW52;
}

public byte getIABW53() {
return IABW53;
}

public byte getIABW54() {
return IABW54;
}

public boolean getIABW62() {
return IABW62;
}

public boolean getIABW63() {
return IABW63;
}

public byte getIABW64() {
return IABW64;
}

public byte getIABW65() {
return IABW65;
}

public boolean getIABW66() {
return IABW66;
}

public byte getIABW67() {
return IABW67;
}

public boolean getIABW68() {
return IABW68;
}

public byte getIACIE() {
return IACIE;
}

public short getIACIL() {
return IACIL;
}

public byte getIACIR() {
return IACIR;
}

public short getIACIU() {
return IACIU;
}

public byte getIADEE() {
return IADEE;
}

public short getIADEL() {
return IADEL;
}

public byte getIADEM() {
return IADEM;
}

public byte getIADEN() {
return IADEN;
}

public byte getIADER() {
return IADER;
}

public short getIADEU() {
return IADEU;
}

public byte getIAEA10E() {
return IAEA10E;
}

public short getIAEA10L() {
return IAEA10L;
}

public byte getIAEA10R() {
return IAEA10R;
}

public short getIAEA10U() {
return IAEA10U;
}

public byte getIAEA2E() {
return IAEA2E;
}

public int getIAEA2L() {
return IAEA2L;
}

public byte getIAEA2R() {
return IAEA2R;
}

public int getIAEA2U() {
return IAEA2U;
}

public byte getIAEA3E() {
return IAEA3E;
}

public int getIAEA3L() {
return IAEA3L;
}

public byte getIAEA3R() {
return IAEA3R;
}

public int getIAEA3U() {
return IAEA3U;
}

public byte getIAEA4E() {
return IAEA4E;
}

public int getIAEA4L() {
return IAEA4L;
}

public byte getIAEA4R() {
return IAEA4R;
}

public int getIAEA4U() {
return IAEA4U;
}

public byte getIAEA5E() {
return IAEA5E;
}

public short getIAEA5L() {
return IAEA5L;
}

public byte getIAEA5R() {
return IAEA5R;
}

public int getIAEA5U() {
return IAEA5U;
}

public byte getIAEA6E() {
return IAEA6E;
}

public short getIAEA6L() {
return IAEA6L;
}

public byte getIAEA6R() {
return IAEA6R;
}

public short getIAEA6U() {
return IAEA6U;
}

public boolean getIAEA7E() {
return IAEA7E;
}

public boolean getIAEA7L() {
return IAEA7L;
}

public boolean getIAEA7R() {
return IAEA7R;
}

public short getIAEA7U() {
return IAEA7U;
}

public boolean getIAEA8E() {
return IAEA8E;
}

public boolean getIAEA8L() {
return IAEA8L;
}

public boolean getIAEA8R() {
return IAEA8R;
}

public boolean getIAEA8U() {
return IAEA8U;
}

public boolean getIAEA9E() {
return IAEA9E;
}

public boolean getIAEA9L() {
return IAEA9L;
}

public boolean getIAEA9R() {
return IAEA9R;
}

public boolean getIAEA9U() {
return IAEA9U;
}

public byte getIAEAE() {
return IAEAE;
}

public short getIAEAL() {
return IAEAL;
}

public int getIAEAN() {
return IAEAN;
}

public int getIAEAN02() {
return IAEAN02;
}

public int getIAEAN03() {
return IAEAN03;
}

public short getIAEAN04() {
return IAEAN04;
}

public int getIAEAN05() {
return IAEAN05;
}

public short getIAEAN06() {
return IAEAN06;
}

public short getIAEAN07() {
return IAEAN07;
}

public boolean getIAEAN08() {
return IAEAN08;
}

public boolean getIAEAN09() {
return IAEAN09;
}

public boolean getIAEAN10() {
return IAEAN10;
}

public byte getIAEAR() {
return IAEAR;
}

public int getIAEAU() {
return IAEAU;
}

public byte getIAFBE() {
return IAFBE;
}

public short getIAFBL() {
return IAFBL;
}

public byte getIAFBR() {
return IAFBR;
}

public int getIAFBU() {
return IAFBU;
}

public byte getIAFINDC() {
return IAFINDC;
}

public byte getIAFUEL() {
return IAFUEL;
}

public byte getIAHDB() {
return IAHDB;
}

public byte getIAHDN01() {
return IAHDN01;
}

public byte getIAHDN02() {
return IAHDN02;
}

public byte getIAHDN03() {
return IAHDN03;
}

public byte getIAHDN04() {
return IAHDN04;
}

public boolean getIAHDN05() {
return IAHDN05;
}

public byte getIAHDP01() {
return IAHDP01;
}

public byte getIAHDP02() {
return IAHDP02;
}

public byte getIAHDP03() {
return IAHDP03;
}

public boolean getIAHDP04() {
return IAHDP04;
}

public byte getIAHDR01() {
return IAHDR01;
}

public byte getIAHDR02() {
return IAHDR02;
}

public byte getIAHDR03() {
return IAHDR03;
}

public byte getIAHDR04() {
return IAHDR04;
}

public boolean getIAHDR05() {
return IAHDR05;
}

public byte getIAHOE() {
return IAHOE;
}

public int getIAHOL() {
return IAHOL;
}

public byte getIAHOR() {
return IAHOR;
}

public int getIAHOU() {
return IAHOU;
}

public byte getIAHPM01() {
return IAHPM01;
}

public byte getIAHPM02() {
return IAHPM02;
}

public byte getIAHPM03() {
return IAHPM03;
}

public boolean getIAHPM04() {
return IAHPM04;
}

public byte getIAHPN01() {
return IAHPN01;
}

public byte getIAHPN02() {
return IAHPN02;
}

public byte getIAHPN03() {
return IAHPN03;
}

public boolean getIAHPN04() {
return IAHPN04;
}

public byte getIAHRM01() {
return IAHRM01;
}

public byte getIAHRM02() {
return IAHRM02;
}

public byte getIAHRM03() {
return IAHRM03;
}

public byte getIAHRM04() {
return IAHRM04;
}

public boolean getIAHRM05() {
return IAHRM05;
}

public byte getIAIRE() {
return IAIRE;
}

public short getIAIRL() {
return IAIRL;
}

public byte getIAIRR() {
return IAIRR;
}

public int getIAIRU() {
return IAIRU;
}

public byte getIAISA1() {
return IAISA1;
}

public byte getIAISA2() {
return IAISA2;
}

public byte getIAISA3() {
return IAISA3;
}

public byte getIAISE() {
return IAISE;
}

public short getIAISL() {
return IAISL;
}

public byte getIAISR() {
return IAISR;
}

public short getIAISU() {
return IAISU;
}

public byte getIALIE() {
return IALIE;
}

public int getIALIL() {
return IALIL;
}

public byte getIALIR() {
return IALIR;
}

public byte getIALISE() {
return IALISE;
}

public short getIALISL() {
return IALISL;
}

public byte getIALISR() {
return IALISR;
}

public short getIALISU() {
return IALISU;
}

public int getIALIU() {
return IALIU;
}

public byte getIALIYE() {
return IALIYE;
}

public int getIALIYL() {
return IALIYL;
}

public byte getIALIYR() {
return IALIYR;
}

public int getIALIYU() {
return IALIYU;
}

public byte getIALM() {
return IALM;
}

public byte getIALM10() {
return IALM10;
}

public byte getIALM2() {
return IALM2;
}

public byte getIALM21() {
return IALM21;
}

public byte getIALM22() {
return IALM22;
}

public byte getIALM23() {
return IALM23;
}

public byte getIALM24() {
return IALM24;
}

public byte getIALM25() {
return IALM25;
}

public byte getIALM26() {
return IALM26;
}

public byte getIALM27() {
return IALM27;
}

public byte getIALM28() {
return IALM28;
}

public boolean getIALM29() {
return IALM29;
}

public byte getIALM3() {
return IALM3;
}

public boolean getIALM30() {
return IALM30;
}

public byte getIALM4() {
return IALM4;
}

public byte getIALM41() {
return IALM41;
}

public byte getIALM42() {
return IALM42;
}

public byte getIALM43() {
return IALM43;
}

public byte getIALM44() {
return IALM44;
}

public byte getIALM45() {
return IALM45;
}

public byte getIALM46() {
return IALM46;
}

public byte getIALM47() {
return IALM47;
}

public byte getIALM5() {
return IALM5;
}

public byte getIALM55() {
return IALM55;
}

public byte getIALM56() {
return IALM56;
}

public byte getIALM57() {
return IALM57;
}

public byte getIALM58() {
return IALM58;
}

public boolean getIALM59() {
return IALM59;
}

public byte getIALM6() {
return IALM6;
}

public byte getIALM60() {
return IALM60;
}

public byte getIALM61() {
return IALM61;
}

public byte getIALM7() {
return IALM7;
}

public byte getIALM8() {
return IALM8;
}

public boolean getIALM9() {
return IALM9;
}

public byte getIALOAN1() {
return IALOAN1;
}

public byte getIALOAN2() {
return IALOAN2;
}

public byte getIALOAN3() {
return IALOAN3;
}

public byte getIALOAN4() {
return IALOAN4;
}

public byte getIALOE() {
return IALOE;
}

public short getIALOL() {
return IALOL;
}

public byte getIALOR() {
return IALOR;
}

public short getIALOU() {
return IALOU;
}

public boolean getIALRFE() {
return IALRFE;
}

public boolean getIALRFL() {
return IALRFL;
}

public boolean getIALRFR() {
return IALRFR;
}

public boolean getIALRFU() {
return IALRFU;
}

public byte getIALRME() {
return IALRME;
}

public short getIALRML() {
return IALRML;
}

public byte getIALRMR() {
return IALRMR;
}

public short getIALRMU() {
return IALRMU;
}

public byte getIALROE() {
return IALROE;
}

public short getIALROL() {
return IALROL;
}

public byte getIALROR() {
return IALROR;
}

public short getIALROU() {
return IALROU;
}

public byte getIALRWE() {
return IALRWE;
}

public byte getIALRWL() {
return IALRWL;
}

public byte getIALRWR() {
return IALRWR;
}

public byte getIALRWU() {
return IALRWU;
}

public byte getIALRYE() {
return IALRYE;
}

public short getIALRYL() {
return IALRYL;
}

public byte getIALRYR() {
return IALRYR;
}

public short getIALRYU() {
return IALRYU;
}

public byte getIALY() {
return IALY;
}

public byte getIALY10() {
return IALY10;
}

public byte getIALY2() {
return IALY2;
}

public byte getIALY21() {
return IALY21;
}

public byte getIALY22() {
return IALY22;
}

public byte getIALY23() {
return IALY23;
}

public byte getIALY24() {
return IALY24;
}

public byte getIALY25() {
return IALY25;
}

public byte getIALY26() {
return IALY26;
}

public byte getIALY27() {
return IALY27;
}

public byte getIALY28() {
return IALY28;
}

public boolean getIALY29() {
return IALY29;
}

public byte getIALY3() {
return IALY3;
}

public boolean getIALY30() {
return IALY30;
}

public byte getIALY4() {
return IALY4;
}

public byte getIALY41() {
return IALY41;
}

public byte getIALY42() {
return IALY42;
}

public byte getIALY43() {
return IALY43;
}

public byte getIALY44() {
return IALY44;
}

public byte getIALY45() {
return IALY45;
}

public byte getIALY46() {
return IALY46;
}

public byte getIALY47() {
return IALY47;
}

public byte getIALY5() {
return IALY5;
}

public byte getIALY55() {
return IALY55;
}

public byte getIALY56() {
return IALY56;
}

public byte getIALY57() {
return IALY57;
}

public byte getIALY58() {
return IALY58;
}

public boolean getIALY59() {
return IALY59;
}

public byte getIALY6() {
return IALY6;
}

public byte getIALY60() {
return IALY60;
}

public byte getIALY61() {
return IALY61;
}

public byte getIALY7() {
return IALY7;
}

public byte getIALY8() {
return IALY8;
}

public boolean getIALY9() {
return IALY9;
}

public byte getIANPE() {
return IANPE;
}

public short getIANPL() {
return IANPL;
}

public byte getIANPR() {
return IANPR;
}

public short getIANPU() {
return IANPU;
}

public byte getIAOAE() {
return IAOAE;
}

public int getIAOAL() {
return IAOAL;
}

public byte getIAOAR() {
return IAOAR;
}

public int getIAOAU() {
return IAOAU;
}

public byte getIAOME() {
return IAOME;
}

public int getIAOML() {
return IAOML;
}

public byte getIAOMR() {
return IAOMR;
}

public int getIAOMU() {
return IAOMU;
}

public byte getIAORGFC() {
return IAORGFC;
}

public byte getIAOTHP3() {
return IAOTHP3;
}

public byte getIAOWEE() {
return IAOWEE;
}

public short getIAOWEL() {
return IAOWEL;
}

public byte getIAOWER() {
return IAOWER;
}

public short getIAOWEU() {
return IAOWEU;
}

public byte getIAP39() {
return IAP39;
}

public byte getIAP40() {
return IAP40;
}

public byte getIAP41() {
return IAP41;
}

public byte getIAP42() {
return IAP42;
}

public byte getIAP43() {
return IAP43;
}

public byte getIAP44() {
return IAP44;
}

public byte getIAP45() {
return IAP45;
}

public byte getIAP46() {
return IAP46;
}

public byte getIAP47() {
return IAP47;
}

public byte getIAP48() {
return IAP48;
}

public byte getIAP49() {
return IAP49;
}

public byte getIAP50() {
return IAP50;
}

public byte getIAP51() {
return IAP51;
}

public byte getIAP52() {
return IAP52;
}

public byte getIAP53() {
return IAP53;
}

public byte getIAP54() {
return IAP54;
}

public byte getIAP55() {
return IAP55;
}

public byte getIAP56() {
return IAP56;
}

public byte getIAP57() {
return IAP57;
}

public byte getIAP58() {
return IAP58;
}

public byte getIAP59() {
return IAP59;
}

public byte getIAP60() {
return IAP60;
}

public byte getIAP61() {
return IAP61;
}

public byte getIAP62() {
return IAP62;
}

public byte getIAP63() {
return IAP63;
}

public byte getIAP64() {
return IAP64;
}

public byte getIAP65() {
return IAP65;
}

public byte getIAP66() {
return IAP66;
}

public byte getIAP67() {
return IAP67;
}

public byte getIAP68() {
return IAP68;
}

public byte getIAPK1() {
return IAPK1;
}

public byte getIAPK1E() {
return IAPK1E;
}

public short getIAPK1L() {
return IAPK1L;
}

public byte getIAPK1R() {
return IAPK1R;
}

public int getIAPK1U() {
return IAPK1U;
}

public byte getIAPK2() {
return IAPK2;
}

public byte getIAPK2E() {
return IAPK2E;
}

public short getIAPK2L() {
return IAPK2L;
}

public byte getIAPK2R() {
return IAPK2R;
}

public int getIAPK2U() {
return IAPK2U;
}

public byte getIAPK3() {
return IAPK3;
}

public boolean getIAPK3E() {
return IAPK3E;
}

public boolean getIAPK3L() {
return IAPK3L;
}

public boolean getIAPK3R() {
return IAPK3R;
}

public boolean getIAPK3U() {
return IAPK3U;
}

public byte getIAPK4() {
return IAPK4;
}

public byte getIAPK4E() {
return IAPK4E;
}

public short getIAPK4L() {
return IAPK4L;
}

public byte getIAPK4R() {
return IAPK4R;
}

public short getIAPK4U() {
return IAPK4U;
}

public boolean getIAPK5() {
return IAPK5;
}

public byte getIAPK5E() {
return IAPK5E;
}

public int getIAPK5L() {
return IAPK5L;
}

public byte getIAPK5R() {
return IAPK5R;
}

public short getIAPK5U() {
return IAPK5U;
}

public byte getIAPK6E() {
return IAPK6E;
}

public int getIAPK6L() {
return IAPK6L;
}

public byte getIAPK6R() {
return IAPK6R;
}

public int getIAPK6U() {
return IAPK6U;
}

public byte getIAPK7E() {
return IAPK7E;
}

public byte getIAPK7L() {
return IAPK7L;
}

public byte getIAPK7R() {
return IAPK7R;
}

public short getIAPK7U() {
return IAPK7U;
}

public byte getIAPK8E() {
return IAPK8E;
}

public short getIAPK8L() {
return IAPK8L;
}

public byte getIAPK8R() {
return IAPK8R;
}

public short getIAPK8U() {
return IAPK8U;
}

public byte getIAPKM01() {
return IAPKM01;
}

public byte getIAPKM02() {
return IAPKM02;
}

public byte getIAPKM03() {
return IAPKM03;
}

public byte getIAPKM04() {
return IAPKM04;
}

public boolean getIAPKM05() {
return IAPKM05;
}

public byte getIAPLW() {
return IAPLW;
}

public byte getIAPLY() {
return IAPLY;
}

public byte getIAPLYP() {
return IAPLYP;
}

public byte getIAPLYW() {
return IAPLYW;
}

public byte getIAPPE() {
return IAPPE;
}

public boolean getIAPPFE() {
return IAPPFE;
}

public boolean getIAPPFL() {
return IAPPFL;
}

public boolean getIAPPFR() {
return IAPPFR;
}

public boolean getIAPPFU() {
return IAPPFU;
}

public short getIAPPL() {
return IAPPL;
}

public byte getIAPPME() {
return IAPPME;
}

public short getIAPPML() {
return IAPPML;
}

public byte getIAPPMR() {
return IAPPMR;
}

public short getIAPPMU() {
return IAPPMU;
}

public byte getIAPPOE() {
return IAPPOE;
}

public short getIAPPOL() {
return IAPPOL;
}

public byte getIAPPOR() {
return IAPPOR;
}

public short getIAPPOU() {
return IAPPOU;
}

public byte getIAPPR() {
return IAPPR;
}

public short getIAPPU() {
return IAPPU;
}

public byte getIAPPWE() {
return IAPPWE;
}

public byte getIAPPWL() {
return IAPPWL;
}

public byte getIAPPWR() {
return IAPPWR;
}

public byte getIAPPWU() {
return IAPPWU;
}

public boolean getIAPPYE() {
return IAPPYE;
}

public boolean getIAPPYL() {
return IAPPYL;
}

public boolean getIAPPYR() {
return IAPPYR;
}

public boolean getIAPPYU() {
return IAPPYU;
}

public byte getIAPRC() {
return IAPRC;
}

public byte getIAPROP1() {
return IAPROP1;
}

public byte getIAPROP2() {
return IAPROP2;
}

public byte getIAPROP3() {
return IAPROP3;
}

public byte getIAPROP4() {
return IAPROP4;
}

public byte getIAPROP5() {
return IAPROP5;
}

public boolean getIAPY2() {
return IAPY2;
}

public boolean getIAPY3() {
return IAPY3;
}

public byte getIAPYR() {
return IAPYR;
}

public boolean getIAPYR2() {
return IAPYR2;
}

public byte getIAPYR2C() {
return IAPYR2C;
}

public boolean getIAPYR3() {
return IAPYR3;
}

public byte getIAPYRC() {
return IAPYRC;
}

public byte getIAPYW02() {
return IAPYW02;
}

public byte getIAPYW03() {
return IAPYW03;
}

public byte getIAPYW04() {
return IAPYW04;
}

public byte getIAPYW05() {
return IAPYW05;
}

public byte getIAPYW06() {
return IAPYW06;
}

public byte getIAPYW07() {
return IAPYW07;
}

public boolean getIAPYW08() {
return IAPYW08;
}

public boolean getIAPYW09() {
return IAPYW09;
}

public boolean getIARE2FE() {
return IARE2FE;
}

public boolean getIARE2FL() {
return IARE2FL;
}

public boolean getIARE2FR() {
return IARE2FR;
}

public boolean getIARE2FU() {
return IARE2FU;
}

public boolean getIARE2ME() {
return IARE2ME;
}

public boolean getIARE2ML() {
return IARE2ML;
}

public boolean getIARE2MR() {
return IARE2MR;
}

public boolean getIARE2MU() {
return IARE2MU;
}

public boolean getIARE2OE() {
return IARE2OE;
}

public boolean getIARE2OL() {
return IARE2OL;
}

public boolean getIARE2OR() {
return IARE2OR;
}

public boolean getIARE2OU() {
return IARE2OU;
}

public boolean getIARE2WE() {
return IARE2WE;
}

public boolean getIARE2WL() {
return IARE2WL;
}

public boolean getIARE2WR() {
return IARE2WR;
}

public boolean getIARE2WU() {
return IARE2WU;
}

public boolean getIARE2YE() {
return IARE2YE;
}

public boolean getIARE2YL() {
return IARE2YL;
}

public boolean getIARE2YR() {
return IARE2YR;
}

public boolean getIARE2YU() {
return IARE2YU;
}

public boolean getIARE3FE() {
return IARE3FE;
}

public boolean getIARE3FL() {
return IARE3FL;
}

public boolean getIARE3FR() {
return IARE3FR;
}

public boolean getIARE3FU() {
return IARE3FU;
}

public boolean getIARE3ME() {
return IARE3ME;
}

public boolean getIARE3ML() {
return IARE3ML;
}

public boolean getIARE3MR() {
return IARE3MR;
}

public boolean getIARE3MU() {
return IARE3MU;
}

public boolean getIARE3OE() {
return IARE3OE;
}

public boolean getIARE3OL() {
return IARE3OL;
}

public boolean getIARE3OR() {
return IARE3OR;
}

public boolean getIARE3OU() {
return IARE3OU;
}

public boolean getIARE3WE() {
return IARE3WE;
}

public boolean getIARE3WL() {
return IARE3WL;
}

public boolean getIARE3WR() {
return IARE3WR;
}

public boolean getIARE3WU() {
return IARE3WU;
}

public boolean getIARE3YE() {
return IARE3YE;
}

public boolean getIARE3YL() {
return IARE3YL;
}

public boolean getIARE3YR() {
return IARE3YR;
}

public boolean getIARE3YU() {
return IARE3YU;
}

public byte getIAREE() {
return IAREE;
}

public boolean getIAREFE() {
return IAREFE;
}

public boolean getIAREFL() {
return IAREFL;
}

public boolean getIAREFR() {
return IAREFR;
}

public boolean getIAREFU() {
return IAREFU;
}

public boolean getIAREGFE() {
return IAREGFE;
}

public boolean getIAREGFL() {
return IAREGFL;
}

public boolean getIAREGFR() {
return IAREGFR;
}

public boolean getIAREGFU() {
return IAREGFU;
}

public short getIAREGM3() {
return IAREGM3;
}

public byte getIAREGME() {
return IAREGME;
}

public short getIAREGML() {
return IAREGML;
}

public byte getIAREGMR() {
return IAREGMR;
}

public short getIAREGMU() {
return IAREGMU;
}

public byte getIAREGO3() {
return IAREGO3;
}

public boolean getIAREGOE() {
return IAREGOE;
}

public boolean getIAREGOL() {
return IAREGOL;
}

public boolean getIAREGOR() {
return IAREGOR;
}

public boolean getIAREGOU() {
return IAREGOU;
}

public boolean getIAREGWE() {
return IAREGWE;
}

public boolean getIAREGWL() {
return IAREGWL;
}

public boolean getIAREGWR() {
return IAREGWR;
}

public boolean getIAREGWU() {
return IAREGWU;
}

public boolean getIAREGYE() {
return IAREGYE;
}

public short getIAREGYL() {
return IAREGYL;
}

public byte getIAREGYR() {
return IAREGYR;
}

public int getIAREGYU() {
return IAREGYU;
}

public short getIAREL() {
return IAREL;
}

public boolean getIAREME() {
return IAREME;
}

public boolean getIAREML() {
return IAREML;
}

public boolean getIAREMR() {
return IAREMR;
}

public boolean getIAREMU() {
return IAREMU;
}

public boolean getIAREOE() {
return IAREOE;
}

public boolean getIAREOL() {
return IAREOL;
}

public boolean getIAREOR() {
return IAREOR;
}

public boolean getIAREOU() {
return IAREOU;
}

public byte getIARER() {
return IARER;
}

public short getIAREU() {
return IAREU;
}

public boolean getIAREWE() {
return IAREWE;
}

public boolean getIAREWL() {
return IAREWL;
}

public boolean getIAREWR() {
return IAREWR;
}

public boolean getIAREWU() {
return IAREWU;
}

public boolean getIAREYE() {
return IAREYE;
}

public boolean getIAREYL() {
return IAREYL;
}

public boolean getIAREYR() {
return IAREYR;
}

public boolean getIAREYU() {
return IAREYU;
}

public byte getIASAE() {
return IASAE;
}

public int getIASAL() {
return IASAL;
}

public byte getIASAR() {
return IASAR;
}

public int getIASAU() {
return IASAU;
}

public byte getIASCE() {
return IASCE;
}

public int getIASCL() {
return IASCL;
}

public byte getIASCR() {
return IASCR;
}

public int getIASCU() {
return IASCU;
}

public byte getIASHTY1() {
return IASHTY1;
}

public byte getIASHTY2() {
return IASHTY2;
}

public byte getIASHTY3() {
return IASHTY3;
}

public byte getIASHTY4() {
return IASHTY4;
}

public byte getIASI01() {
return IASI01;
}

public byte getIASI02() {
return IASI02;
}

public byte getIASI03() {
return IASI03;
}

public byte getIASI04() {
return IASI04;
}

public byte getIASI05() {
return IASI05;
}

public byte getIASI06() {
return IASI06;
}

public byte getIASI07() {
return IASI07;
}

public byte getIASI08() {
return IASI08;
}

public byte getIASI09() {
return IASI09;
}

public byte getIASI10() {
return IASI10;
}

public byte getIASI11() {
return IASI11;
}

public byte getIASIE() {
return IASIE;
}

public short getIASIL() {
return IASIL;
}

public byte getIASIR() {
return IASIR;
}

public byte getIASISE() {
return IASISE;
}

public int getIASISL() {
return IASISL;
}

public byte getIASISR() {
return IASISR;
}

public int getIASISU() {
return IASISU;
}

public short getIASIU() {
return IASIU;
}

public byte getIASSE() {
return IASSE;
}

public byte getIASSIE() {
return IASSIE;
}

public short getIASSIL() {
return IASSIL;
}

public byte getIASSIR() {
return IASSIR;
}

public short getIASSIU() {
return IASSIU;
}

public int getIASSL() {
return IASSL;
}

public byte getIASSR() {
return IASSR;
}

public int getIASSU() {
return IASSU;
}

public boolean getIAT39() {
return IAT39;
}

public boolean getIAT40() {
return IAT40;
}

public boolean getIAT41() {
return IAT41;
}

public boolean getIAT42() {
return IAT42;
}

public boolean getIAT43() {
return IAT43;
}

public boolean getIAT44() {
return IAT44;
}

public boolean getIAT45() {
return IAT45;
}

public boolean getIAT46() {
return IAT46;
}

public boolean getIAT47() {
return IAT47;
}

public boolean getIAT48() {
return IAT48;
}

public boolean getIAT49() {
return IAT49;
}

public boolean getIAT50() {
return IAT50;
}

public boolean getIAT51() {
return IAT51;
}

public boolean getIAT52() {
return IAT52;
}

public boolean getIAT53() {
return IAT53;
}

public boolean getIAT54() {
return IAT54;
}

public boolean getIAT55() {
return IAT55;
}

public boolean getIAT56() {
return IAT56;
}

public boolean getIAT57() {
return IAT57;
}

public boolean getIAT58() {
return IAT58;
}

public boolean getIAT59() {
return IAT59;
}

public boolean getIAT60() {
return IAT60;
}

public boolean getIAT61() {
return IAT61;
}

public boolean getIAT62() {
return IAT62;
}

public boolean getIAT63() {
return IAT63;
}

public boolean getIAT64() {
return IAT64;
}

public boolean getIAT65() {
return IAT65;
}

public boolean getIAT66() {
return IAT66;
}

public boolean getIAT67() {
return IAT67;
}

public boolean getIAT68() {
return IAT68;
}

public byte getIAUIE() {
return IAUIE;
}

public byte getIAUIIE() {
return IAUIIE;
}

public short getIAUIIL() {
return IAUIIL;
}

public byte getIAUIIR() {
return IAUIIR;
}

public short getIAUIIU() {
return IAUIIU;
}

public int getIAUIL() {
return IAUIL;
}

public byte getIAUIR() {
return IAUIR;
}

public int getIAUIU() {
return IAUIU;
}

public int getIDAIND() {
return IDAIND;
}

public byte getIINTDTM() {
return IINTDTM;
}

public short getIINTDTY() {
return IINTDTY;
}

public byte getINDNO() {
return INDNO;
}

public byte getINDOC() {
return INDOC;
}

public byte getINDRS() {
return INDRS;
}

public boolean getINVCARE_P_F() {
return INVCARE_P_F;
}

public double getINVCARE_P_I() {
return INVCARE_P_I;
}

public short getINVCARE_P_O() {
return INVCARE_P_O;
}

public short getINVCARE_P_T() {
return INVCARE_P_T;
}

public boolean getINVCARE_R_F() {
return INVCARE_R_F;
}

public double getINVCARE_R_I() {
return INVCARE_R_I;
}

public short getINVCARE_R_O() {
return INVCARE_R_O;
}

public short getINVCARE_R_T() {
return INVCARE_R_T;
}

public boolean getMAINHH1() {
return MAINHH1;
}

public byte getMAXMEMTOT() {
return MAXMEMTOT;
}

public byte getMMAIDC() {
return MMAIDC;
}

public byte getMMCOMZ1() {
return MMCOMZ1;
}

public byte getMMCOMZ2() {
return MMCOMZ2;
}

public byte getMMRECRC() {
return MMRECRC;
}

public byte getMMSTOP() {
return MMSTOP;
}

public byte getNCLM() {
return NCLM;
}

public byte getNCORREC() {
return NCORREC;
}

public byte getNMISSED() {
return NMISSED;
}

public byte getNOFIQ() {
return NOFIQ;
}

public byte getNROW() {
return NROW;
}

public short getNROWCLM() {
return NROWCLM;
}

public boolean getNUMP() {
return NUMP;
}

public boolean getPAINHH1() {
return PAINHH1;
}

public byte getPARTNER() {
return PARTNER;
}

public byte getPENTYPE_WAVE1() {
return PENTYPE_WAVE1;
}

public byte getPEN_ANY() {
return PEN_ANY;
}

public boolean getPEN_DB() {
return PEN_DB;
}

public boolean getPEN_DC() {
return PEN_DC;
}

public boolean getPEN_DK() {
return PEN_DK;
}

public double getPRIPENW2_2002() {
return PRIPENW2_2002;
}

public double getPRIPENW2_SPA() {
return PRIPENW2_SPA;
}

public double getPRIPENW3_2002() {
return PRIPENW3_2002;
}

public double getPRIPENW3_SPA() {
return PRIPENW3_SPA;
}

public double getPRIPENW4_2002() {
return PRIPENW4_2002;
}

public double getPRIPENW4_SPA() {
return PRIPENW4_SPA;
}

public double getPRIPENW5_2002() {
return PRIPENW5_2002;
}

public double getPRIPENW5_SPA() {
return PRIPENW5_SPA;
}

public double getPRIPENW6_2002() {
return PRIPENW6_2002;
}

public double getPRIPENW6_SPA() {
return PRIPENW6_SPA;
}

public double getPRIPENW7_2002() {
return PRIPENW7_2002;
}

public double getPRIPENW7_SPA() {
return PRIPENW7_SPA;
}

public double getPRIPENW8_2002() {
return PRIPENW8_2002;
}

public double getPRIPENW8_SPA() {
return PRIPENW8_SPA;
}

public double getPRIPENW9_2002() {
return PRIPENW9_2002;
}

public double getPRIPENW9_SPA() {
return PRIPENW9_SPA;
}

public double getPRIPEN_2002() {
return PRIPEN_2002;
}

public double getPRIPEN_SPA() {
return PRIPEN_SPA;
}

public short getPSMID() {
return PSMID;
}

public short getPSOLD() {
return PSOLD;
}

public boolean getPUBPEN() {
return PUBPEN;
}

public byte getRAND14() {
return RAND14;
}

public short getRTHHOUT() {
return RTHHOUT;
}

public byte getSCACCA() {
return SCACCA;
}

public byte getSCACCB() {
return SCACCB;
}

public byte getSCACCC() {
return SCACCC;
}

public byte getSCACCD() {
return SCACCD;
}

public byte getSCACCE() {
return SCACCE;
}

public byte getSCACCF() {
return SCACCF;
}

public byte getSCACCG() {
return SCACCG;
}

public byte getSCACCH() {
return SCACCH;
}

public byte getSCACCI() {
return SCACCI;
}

public byte getSCACCJ() {
return SCACCJ;
}

public byte getSCDCA() {
return SCDCA;
}

public byte getSCDCB() {
return SCDCB;
}

public byte getSCDCC() {
return SCDCC;
}

public byte getSCDCD() {
return SCDCD;
}

public byte getSCDCE() {
return SCDCE;
}

public byte getSCDCF() {
return SCDCF;
}

public byte getSCDCG() {
return SCDCG;
}

public byte getSCEND() {
return SCEND;
}

public byte getSCFAMM() {
return SCFAMM;
}

public byte getSCFMH() {
return SCFMH;
}

public byte getSCFRDM() {
return SCFRDM;
}

public byte getSCGHQA() {
return SCGHQA;
}

public byte getSCGHQB() {
return SCGHQB;
}

public byte getSCGHQC() {
return SCGHQC;
}

public byte getSCGHQD() {
return SCGHQD;
}

public byte getSCGHQE() {
return SCGHQE;
}

public byte getSCGHQF() {
return SCGHQF;
}

public byte getSCGHQG() {
return SCGHQG;
}

public byte getSCGHQH() {
return SCGHQH;
}

public byte getSCGHQI() {
return SCGHQI;
}

public byte getSCGHQJ() {
return SCGHQJ;
}

public byte getSCGHQK() {
return SCGHQK;
}

public byte getSCGHQL() {
return SCGHQL;
}

public byte getSCNOSC() {
return SCNOSC;
}

public byte getSCNOSCC() {
return SCNOSCC;
}

public byte getSCORG1() {
return SCORG1;
}

public byte getSCORG3() {
return SCORG3;
}

public byte getSCORG4() {
return SCORG4;
}

public byte getSCORG5() {
return SCORG5;
}

public byte getSCORG6() {
return SCORG6;
}

public byte getSCORG7() {
return SCORG7;
}

public byte getSCORG8() {
return SCORG8;
}

public byte getSCORG9() {
return SCORG9;
}

public byte getSCORGA2() {
return SCORGA2;
}

public byte getSCPTPA1() {
return SCPTPA1;
}

public byte getSCPTPA2() {
return SCPTPA2;
}

public byte getSCPTPA3() {
return SCPTPA3;
}

public byte getSCPTPA4() {
return SCPTPA4;
}

public byte getSCPTPA5() {
return SCPTPA5;
}

public byte getSCPTPA6() {
return SCPTPA6;
}

public byte getSCPTPA7() {
return SCPTPA7;
}

public byte getSCPTPA8() {
return SCPTPA8;
}

public byte getSCPTPA9() {
return SCPTPA9;
}

public byte getSCPTR() {
return SCPTR;
}

public byte getSCPTRA() {
return SCPTRA;
}

public byte getSCPTRB() {
return SCPTRB;
}

public byte getSCPTRC() {
return SCPTRC;
}

public byte getSCPTRD() {
return SCPTRD;
}

public byte getSCPTRE() {
return SCPTRE;
}

public byte getSCPTRF() {
return SCPTRF;
}

public byte getSCPTRG() {
return SCPTRG;
}

public byte getSCSCA() {
return SCSCA;
}

public byte getSCSCB() {
return SCSCB;
}

public byte getSCSCC() {
return SCSCC;
}

public byte getSCSCD() {
return SCSCD;
}

public byte getSCSCE() {
return SCSCE;
}

public byte getSCSCF() {
return SCSCF;
}

public byte getSCSCG() {
return SCSCG;
}

public byte getSCSCH() {
return SCSCH;
}

public byte getSCSCI() {
return SCSCI;
}

public byte getSC_REC() {
return SC_REC;
}

public byte getSPCAA() {
return SPCAA;
}

public byte getSPCAB1() {
return SPCAB1;
}

public byte getSPCAB2() {
return SPCAB2;
}

public byte getSPCAB3() {
return SPCAB3;
}

public boolean getSPCAB4() {
return SPCAB4;
}

public short getSPCAC() {
return SPCAC;
}

public byte getSPCAM01() {
return SPCAM01;
}

public byte getSPCAM02() {
return SPCAM02;
}

public byte getSPCAM03() {
return SPCAM03;
}

public boolean getSPCAM04() {
return SPCAM04;
}

public byte getSPCIN() {
return SPCIN;
}

public byte getSPCINB() {
return SPCINB;
}

public byte getSPMUS() {
return SPMUS;
}

public byte getSPMUSB() {
return SPMUSB;
}

public byte getSPREST() {
return SPREST;
}

public byte getSPRESTB() {
return SPRESTB;
}

public byte getSPTEA() {
return SPTEA;
}

public byte getSPTEAB() {
return SPTEAB;
}

public byte getSPTRAB1() {
return SPTRAB1;
}

public byte getSPTRAB2() {
return SPTRAB2;
}

public byte getSPTRAB3() {
return SPTRAB3;
}

public byte getSPTRAB4() {
return SPTRAB4;
}

public byte getSPTRAB5() {
return SPTRAB5;
}

public byte getSPTRAB6() {
return SPTRAB6;
}

public byte getSPTRM01() {
return SPTRM01;
}

public byte getSPTRM02() {
return SPTRM02;
}

public byte getSPTRM03() {
return SPTRM03;
}

public byte getSPTRM04() {
return SPTRM04;
}

public byte getSPTRM05() {
return SPTRM05;
}

public byte getSPTRM06() {
return SPTRM06;
}

public double getSTATEPENW2_2002() {
return STATEPENW2_2002;
}

public double getSTATEPENW2_SPA() {
return STATEPENW2_SPA;
}

public double getSTATEPENW3_2002() {
return STATEPENW3_2002;
}

public double getSTATEPENW3_SPA() {
return STATEPENW3_SPA;
}

public double getSTATEPENW4_2002() {
return STATEPENW4_2002;
}

public double getSTATEPENW4_SPA() {
return STATEPENW4_SPA;
}

public double getSTATEPENW5_2002() {
return STATEPENW5_2002;
}

public double getSTATEPENW5_SPA() {
return STATEPENW5_SPA;
}

public double getSTATEPENW6_2002() {
return STATEPENW6_2002;
}

public double getSTATEPENW6_SPA() {
return STATEPENW6_SPA;
}

public double getSTATEPENW7_2002() {
return STATEPENW7_2002;
}

public double getSTATEPENW7_SPA() {
return STATEPENW7_SPA;
}

public double getSTATEPENW8_2002() {
return STATEPENW8_2002;
}

public double getSTATEPENW8_SPA() {
return STATEPENW8_SPA;
}

public double getSTATEPENW9_2002() {
return STATEPENW9_2002;
}

public double getSTATEPENW9_SPA() {
return STATEPENW9_SPA;
}

public double getSTATEPEN_2002() {
return STATEPEN_2002;
}

public double getSTATEPEN_SPA() {
return STATEPEN_SPA;
}

public boolean getW1MOVER() {
return W1MOVER;
}

public double getW1WGT() {
return W1WGT;
}

public boolean getWFTC_P_F() {
return WFTC_P_F;
}

public double getWFTC_P_I() {
return WFTC_P_I;
}

public short getWFTC_P_O() {
return WFTC_P_O;
}

public short getWFTC_P_T() {
return WFTC_P_T;
}

public boolean getWFTC_R_F() {
return WFTC_R_F;
}

public double getWFTC_R_I() {
return WFTC_R_I;
}

public short getWFTC_R_O() {
return WFTC_R_O;
}

public short getWFTC_R_T() {
return WFTC_R_T;
}

public boolean getWP1ASK() {
return WP1ASK;
}

public boolean getWP2ASK() {
return WP2ASK;
}

public int getWPAC2() {
return WPAC2;
}

public short getWPACAT() {
return WPACAT;
}

public boolean getWPACAT2() {
return WPACAT2;
}

public byte getWPACOA2() {
return WPACOA2;
}

public short getWPACOB2() {
return WPACOB2;
}

public byte getWPACOC2() {
return WPACOC2;
}

public byte getWPACON2() {
return WPACON2;
}

public byte getWPACT1() {
return WPACT1;
}

public byte getWPACT2() {
return WPACT2;
}

public byte getWPACT3() {
return WPACT3;
}

public byte getWPACT4() {
return WPACT4;
}

public byte getWPACT5() {
return WPACT5;
}

public boolean getWPACT6() {
return WPACT6;
}

public byte getWPADY2() {
return WPADY2;
}

public byte getWPAM2AE() {
return WPAM2AE;
}

public int getWPAM2AL() {
return WPAM2AL;
}

public byte getWPAM2AR() {
return WPAM2AR;
}

public int getWPAM2AU() {
return WPAM2AU;
}

public byte getWPAMAE() {
return WPAMAE;
}

public int getWPAMAL() {
return WPAMAL;
}

public byte getWPAMAR() {
return WPAMAR;
}

public int getWPAMAU() {
return WPAMAU;
}

public short getWPAMEC2() {
return WPAMEC2;
}

public int getWPAMOU() {
return WPAMOU;
}

public int getWPAMOU2() {
return WPAMOU2;
}

public byte getWPAMTE() {
return WPAMTE;
}

public int getWPAMTL() {
return WPAMTL;
}

public byte getWPAMTR() {
return WPAMTR;
}

public int getWPAMTU() {
return WPAMTU;
}

public byte getWPANYC() {
return WPANYC;
}

public byte getWPANYC2() {
return WPANYC2;
}

public byte getWPANYP() {
return WPANYP;
}

public boolean getWPAOFE() {
return WPAOFE;
}

public short getWPAOFL() {
return WPAOFL;
}

public boolean getWPAOFR() {
return WPAOFR;
}

public short getWPAOFU() {
return WPAOFU;
}

public byte getWPAOME() {
return WPAOME;
}

public short getWPAOML() {
return WPAOML;
}

public byte getWPAOMR() {
return WPAOMR;
}

public short getWPAOMU() {
return WPAOMU;
}

public byte getWPAOOE() {
return WPAOOE;
}

public short getWPAOOL() {
return WPAOOL;
}

public byte getWPAOOR() {
return WPAOOR;
}

public short getWPAOOU() {
return WPAOOU;
}

public byte getWPAOWE() {
return WPAOWE;
}

public short getWPAOWL() {
return WPAOWL;
}

public byte getWPAOWR() {
return WPAOWR;
}

public short getWPAOWU() {
return WPAOWU;
}

public byte getWPAOYE() {
return WPAOYE;
}

public short getWPAOYL() {
return WPAOYL;
}

public byte getWPAOYR() {
return WPAOYR;
}

public int getWPAOYU() {
return WPAOYU;
}

public byte getWPAP2E() {
return WPAP2E;
}

public int getWPAP2L() {
return WPAP2L;
}

public byte getWPAP2R() {
return WPAP2R;
}

public int getWPAP2U() {
return WPAP2U;
}

public byte getWPAPE() {
return WPAPE;
}

public int getWPAPF2() {
return WPAPF2;
}

public int getWPAPL() {
return WPAPL;
}

public byte getWPAPR() {
return WPAPR;
}

public int getWPAPU() {
return WPAPU;
}

public byte getWPAS2E() {
return WPAS2E;
}

public short getWPAS2L() {
return WPAS2L;
}

public byte getWPAS2R() {
return WPAS2R;
}

public short getWPAS2U() {
return WPAS2U;
}

public short getWPASAL2() {
return WPASAL2;
}

public byte getWPASE() {
return WPASE;
}

public byte getWPASKD() {
return WPASKD;
}

public byte getWPASKE() {
return WPASKE;
}

public byte getWPASKF() {
return WPASKF;
}

public int getWPASL() {
return WPASL;
}

public byte getWPASR() {
return WPASR;
}

public int getWPASU() {
return WPASU;
}

public short getWPAUC() {
return WPAUC;
}

public byte getWPBIME() {
return WPBIME;
}

public short getWPBIML() {
return WPBIML;
}

public byte getWPBIMR() {
return WPBIMR;
}

public short getWPBIMU() {
return WPBIMU;
}

public byte getWPBPS() {
return WPBPS;
}

public byte getWPBTHA2() {
return WPBTHA2;
}

public byte getWPBTHP2() {
return WPBTHP2;
}

public byte getWPBUE() {
return WPBUE;
}

public int getWPBUL() {
return WPBUL;
}

public byte getWPBUR() {
return WPBUR;
}

public int getWPBUU() {
return WPBUU;
}

public short getWPCAMT() {
return WPCAMT;
}

public short getWPCAMT2() {
return WPCAMT2;
}

public boolean getWPCASK() {
return WPCASK;
}

public int getWPCB() {
return WPCB;
}

public int getWPCB2() {
return WPCB2;
}

public byte getWPCB2E() {
return WPCB2E;
}

public int getWPCB2L() {
return WPCB2L;
}

public boolean getWPCB2R() {
return WPCB2R;
}

public int getWPCB2U() {
return WPCB2U;
}

public byte getWPCBE() {
return WPCBE;
}

public int getWPCBL() {
return WPCBL;
}

public byte getWPCBR() {
return WPCBR;
}

public int getWPCBU() {
return WPCBU;
}

public byte getWPCEMP2() {
return WPCEMP2;
}

public byte getWPCJB1() {
return WPCJB1;
}

public byte getWPCJB2() {
return WPCJB2;
}

public byte getWPCJB3() {
return WPCJB3;
}

public byte getWPCJB4() {
return WPCJB4;
}

public boolean getWPCON() {
return WPCON;
}

public byte getWPCONS() {
return WPCONS;
}

public byte getWPCONS2() {
return WPCONS2;
}

public byte getWPCOS() {
return WPCOS;
}

public byte getWPCOS2() {
return WPCOS2;
}

public byte getWPCPER() {
return WPCPER;
}

public byte getWPCPER2() {
return WPCPER2;
}

public byte getWPCPS() {
return WPCPS;
}

public byte getWPCPS2() {
return WPCPS2;
}

public byte getWPCPSC() {
return WPCPSC;
}

public byte getWPCPSC2() {
return WPCPSC2;
}

public byte getWPCU2E() {
return WPCU2E;
}

public int getWPCU2L() {
return WPCU2L;
}

public byte getWPCU2R() {
return WPCU2R;
}

public int getWPCU2U() {
return WPCU2U;
}

public byte getWPCUE() {
return WPCUE;
}

public int getWPCUL() {
return WPCUL;
}

public byte getWPCUR() {
return WPCUR;
}

public int getWPCUU() {
return WPCUU;
}

public int getWPCUV() {
return WPCUV;
}

public int getWPCUV2() {
return WPCUV2;
}

public short getWPDE2() {
return WPDE2;
}

public short getWPDE3() {
return WPDE3;
}

public byte getWPDESC() {
return WPDESC;
}

public short getWPDS2() {
return WPDS2;
}

public short getWPDS3() {
return WPDS3;
}

public byte getWPDSP() {
return WPDSP;
}

public byte getWPDSP2() {
return WPDSP2;
}

public boolean getWPDSP2C() {
return WPDSP2C;
}

public byte getWPDSPC() {
return WPDSPC;
}

public byte getWPEC() {
return WPEC;
}

public byte getWPECA() {
return WPECA;
}

public int getWPECNA() {
return WPECNA;
}

public byte getWPECNA2() {
return WPECNA2;
}

public byte getWPECON() {
return WPECON;
}

public byte getWPECON2() {
return WPECON2;
}

public byte getWPEFS() {
return WPEFS;
}

public byte getWPEFS2() {
return WPEFS2;
}

public boolean getWPEPER2() {
return WPEPER2;
}

public byte getWPERA2() {
return WPERA2;
}

public byte getWPERC2() {
return WPERC2;
}

public byte getWPERET2() {
return WPERET2;
}

public byte getWPESE() {
return WPESE;
}

public short getWPESL() {
return WPESL;
}

public byte getWPESR() {
return WPESR;
}

public short getWPESU() {
return WPESU;
}

public short getWPEXA() {
return WPEXA;
}

public byte getWPEXAE() {
return WPEXAE;
}

public short getWPEXAL() {
return WPEXAL;
}

public byte getWPEXAR() {
return WPEXAR;
}

public int getWPEXAU() {
return WPEXAU;
}

public byte getWPEXTE() {
return WPEXTE;
}

public boolean getWPEXTL() {
return WPEXTL;
}

public byte getWPEXTR() {
return WPEXTR;
}

public short getWPEXTU() {
return WPEXTU;
}

public byte getWPEXW() {
return WPEXW;
}

public byte getWPFINF() {
return WPFINF;
}

public byte getWPFINF2() {
return WPFINF2;
}

public byte getWPFRAS2() {
return WPFRAS2;
}

public byte getWPFRUC() {
return WPFRUC;
}

public byte getWPFSAP2() {
return WPFSAP2;
}

public byte getWPFSAPC() {
return WPFSAPC;
}

public byte getWPFSAV2() {
return WPFSAV2;
}

public byte getWPFSCP2() {
return WPFSCP2;
}

public byte getWPHCON() {
return WPHCON;
}

public byte getWPHCON2() {
return WPHCON2;
}

public byte getWPHLWZ() {
return WPHLWZ;
}

public byte getWPIFS01() {
return WPIFS01;
}

public byte getWPIFS02() {
return WPIFS02;
}

public byte getWPIFS03() {
return WPIFS03;
}

public byte getWPIFS04() {
return WPIFS04;
}

public byte getWPIFS1() {
return WPIFS1;
}

public byte getWPIFS10() {
return WPIFS10;
}

public byte getWPIFS11() {
return WPIFS11;
}

public byte getWPIFS12() {
return WPIFS12;
}

public byte getWPIFS2() {
return WPIFS2;
}

public byte getWPIFS3() {
return WPIFS3;
}

public byte getWPIFS4() {
return WPIFS4;
}

public byte getWPINF2() {
return WPINF2;
}

public byte getWPINF3() {
return WPINF3;
}

public byte getWPINFO() {
return WPINFO;
}

public byte getWPINTA() {
return WPINTA;
}

public byte getWPKP() {
return WPKP;
}

public byte getWPKP2() {
return WPKP2;
}

public byte getWPKP2C() {
return WPKP2C;
}

public byte getWPKPC() {
return WPKPC;
}

public short getWPLAC() {
return WPLAC;
}

public short getWPLAC2() {
return WPLAC2;
}

public byte getWPLASM() {
return WPLASM;
}

public byte getWPLASM2() {
return WPLASM2;
}

public byte getWPLASP() {
return WPLASP;
}

public byte getWPLASP2() {
return WPLASP2;
}

public short getWPLASY() {
return WPLASY;
}

public short getWPLASY2() {
return WPLASY2;
}

public byte getWPLCOM2() {
return WPLCOM2;
}

public short getWPLCOY2() {
return WPLCOY2;
}

public byte getWPLLJM() {
return WPLLJM;
}

public short getWPLLJY() {
return WPLLJY;
}

public byte getWPLP2AE() {
return WPLP2AE;
}

public int getWPLP2AL() {
return WPLP2AL;
}

public byte getWPLP2AR() {
return WPLP2AR;
}

public int getWPLP2AU() {
return WPLP2AU;
}

public int getWPLPA() {
return WPLPA;
}

public int getWPLPA2() {
return WPLPA2;
}

public byte getWPLPAE() {
return WPLPAE;
}

public int getWPLPAL() {
return WPLPAL;
}

public byte getWPLPAR() {
return WPLPAR;
}

public int getWPLPAU() {
return WPLPAU;
}

public byte getWPLPE() {
return WPLPE;
}

public byte getWPLPE2() {
return WPLPE2;
}

public boolean getWPLPTE() {
return WPLPTE;
}

public short getWPLPTL() {
return WPLPTL;
}

public boolean getWPLPTR() {
return WPLPTR;
}

public short getWPLPTU() {
return WPLPTU;
}

public byte getWPLRCM() {
return WPLRCM;
}

public boolean getWPLRCM2() {
return WPLRCM2;
}

public short getWPLRCY() {
return WPLRCY;
}

public short getWPLRCY2() {
return WPLRCY2;
}

public byte getWPLU2E() {
return WPLU2E;
}

public int getWPLU2L() {
return WPLU2L;
}

public byte getWPLU2R() {
return WPLU2R;
}

public int getWPLU2U() {
return WPLU2U;
}

public byte getWPLUE() {
return WPLUE;
}

public int getWPLUL() {
return WPLUL;
}

public int getWPLUMP2() {
return WPLUMP2;
}

public byte getWPLUR() {
return WPLUR;
}

public int getWPLUU() {
return WPLUU;
}

public byte getWPMC2() {
return WPMC2;
}

public short getWPMCA2() {
return WPMCA2;
}

public byte getWPMCAF2() {
return WPMCAF2;
}

public byte getWPMCON2() {
return WPMCON2;
}

public byte getWPMEC2() {
return WPMEC2;
}

public byte getWPMFRC() {
return WPMFRC;
}

public byte getWPMFRC2() {
return WPMFRC2;
}

public byte getWPMHE() {
return WPMHE;
}

public short getWPMHL() {
return WPMHL;
}

public byte getWPMHR() {
return WPMHR;
}

public short getWPMHU() {
return WPMHU;
}

public int getWPMLAS() {
return WPMLAS;
}

public int getWPMLAS2() {
return WPMLAS2;
}

public byte getWPMMIN2() {
return WPMMIN2;
}

public short getWPMRC() {
return WPMRC;
}

public short getWPMRC2() {
return WPMRC2;
}

public byte getWPMRCP() {
return WPMRCP;
}

public byte getWPMRCP2() {
return WPMRCP2;
}

public byte getWPMSC() {
return WPMSC;
}

public byte getWPMSC2() {
return WPMSC2;
}

public byte getWPMSC3() {
return WPMSC3;
}

public byte getWPMUC() {
return WPMUC;
}

public boolean getWPMUC2() {
return WPMUC2;
}

public byte getWPNIFP() {
return WPNIFP;
}

public byte getWPNIFP2() {
return WPNIFP2;
}

public byte getWPNIRR2() {
return WPNIRR2;
}

public byte getWPNOSC() {
return WPNOSC;
}

public byte getWPNRA2() {
return WPNRA2;
}

public byte getWPOARS() {
return WPOARS;
}

public byte getWPOARS2() {
return WPOARS2;
}

public int getWPPA() {
return WPPA;
}

public int getWPPA2() {
return WPPA2;
}

public byte getWPPA2AE() {
return WPPA2AE;
}

public int getWPPA2AL() {
return WPPA2AL;
}

public byte getWPPA2AR() {
return WPPA2AR;
}

public int getWPPA2AU() {
return WPPA2AU;
}

public byte getWPPA2TE() {
return WPPA2TE;
}

public short getWPPA2TL() {
return WPPA2TL;
}

public byte getWPPA2TR() {
return WPPA2TR;
}

public short getWPPA2TU() {
return WPPA2TU;
}

public short getWPPA3() {
return WPPA3;
}

public byte getWPPA3AE() {
return WPPA3AE;
}

public short getWPPA3AL() {
return WPPA3AL;
}

public byte getWPPA3AR() {
return WPPA3AR;
}

public short getWPPA3AU() {
return WPPA3AU;
}

public boolean getWPPA3TE() {
return WPPA3TE;
}

public int getWPPA3TL() {
return WPPA3TL;
}

public boolean getWPPA3TR() {
return WPPA3TR;
}

public boolean getWPPA3TU() {
return WPPA3TU;
}

public byte getWPPAAE() {
return WPPAAE;
}

public int getWPPAAL() {
return WPPAAL;
}

public byte getWPPAAR() {
return WPPAAR;
}

public int getWPPAAU() {
return WPPAAU;
}

public byte getWPPAM() {
return WPPAM;
}

public byte getWPPAM2() {
return WPPAM2;
}

public byte getWPPAM3() {
return WPPAM3;
}

public byte getWPPATE() {
return WPPATE;
}

public int getWPPATL() {
return WPPATL;
}

public byte getWPPATR() {
return WPPATR;
}

public int getWPPATU() {
return WPPATU;
}

public byte getWPPAY2() {
return WPPAY2;
}

public byte getWPPAY3() {
return WPPAY3;
}

public byte getWPPCON2() {
return WPPCON2;
}

public byte getWPPDES() {
return WPPDES;
}

public byte getWPPDES2() {
return WPPDES2;
}

public byte getWPPDOC() {
return WPPDOC;
}

public byte getWPPE2AE() {
return WPPE2AE;
}

public short getWPPE2AL() {
return WPPE2AL;
}

public byte getWPPE2AR() {
return WPPE2AR;
}

public int getWPPE2AU() {
return WPPE2AU;
}

public byte getWPPEAE() {
return WPPEAE;
}

public int getWPPEAL() {
return WPPEAL;
}

public byte getWPPEAR() {
return WPPEAR;
}

public int getWPPEAU() {
return WPPEAU;
}

public int getWPPENB2() {
return WPPENB2;
}

public byte getWPPEPR() {
return WPPEPR;
}

public byte getWPPER() {
return WPPER;
}

public byte getWPPERC2() {
return WPPERC2;
}

public byte getWPPETE() {
return WPPETE;
}

public int getWPPETL() {
return WPPETL;
}

public byte getWPPETR() {
return WPPETR;
}

public int getWPPETU() {
return WPPETU;
}

public byte getWPPEXP() {
return WPPEXP;
}

public byte getWPPEXP2() {
return WPPEXP2;
}

public byte getWPPFE() {
return WPPFE;
}

public int getWPPFL() {
return WPPFL;
}

public byte getWPPFR() {
return WPPFR;
}

public int getWPPFU() {
return WPPFU;
}

public short getWPPFVA2() {
return WPPFVA2;
}

public byte getWPPLON() {
return WPPLON;
}

public byte getWPPLON2() {
return WPPLON2;
}

public byte getWPPLP2() {
return WPPLP2;
}

public byte getWPPLPH2() {
return WPPLPH2;
}

public byte getWPPRE() {
return WPPRE;
}

public int getWPPRL() {
return WPPRL;
}

public byte getWPPRPE() {
return WPPRPE;
}

public byte getWPPRR() {
return WPPRR;
}

public int getWPPRU() {
return WPPRU;
}

public byte getWPPS() {
return WPPS;
}

public byte getWPPSAL2() {
return WPPSAL2;
}

public byte getWPPSM1() {
return WPPSM1;
}

public byte getWPPSM2() {
return WPPSM2;
}

public byte getWPPSMM1() {
return WPPSMM1;
}

public byte getWPPSMM2() {
return WPPSMM2;
}

public byte getWPPTOP2() {
return WPPTOP2;
}

public byte getWPPTP2() {
return WPPTP2;
}

public byte getWPPW() {
return WPPW;
}

public byte getWPPW2ME() {
return WPPW2ME;
}

public byte getWPPW2ML() {
return WPPW2ML;
}

public byte getWPPW2MR() {
return WPPW2MR;
}

public byte getWPPW2MU() {
return WPPW2MU;
}

public byte getWPPW2OE() {
return WPPW2OE;
}

public boolean getWPPW2OL() {
return WPPW2OL;
}

public boolean getWPPW2OR() {
return WPPW2OR;
}

public boolean getWPPW2OU() {
return WPPW2OU;
}

public boolean getWPPW2WE() {
return WPPW2WE;
}

public boolean getWPPW2WL() {
return WPPW2WL;
}

public boolean getWPPW2WR() {
return WPPW2WR;
}

public boolean getWPPW2WU() {
return WPPW2WU;
}

public byte getWPPWME() {
return WPPWME;
}

public short getWPPWML() {
return WPPWML;
}

public byte getWPPWMR() {
return WPPWMR;
}

public short getWPPWMU() {
return WPPWMU;
}

public byte getWPPWOE() {
return WPPWOE;
}

public byte getWPPWOL() {
return WPPWOL;
}

public byte getWPPWOR() {
return WPPWOR;
}

public short getWPPWOU() {
return WPPWOU;
}

public byte getWPPWP() {
return WPPWP;
}

public byte getWPPWP2() {
return WPPWP2;
}

public byte getWPPWP3() {
return WPPWP3;
}

public int getWPPWR() {
return WPPWR;
}

public short getWPPWR2() {
return WPPWR2;
}

public short getWPPWR3() {
return WPPWR3;
}

public byte getWPPWWE() {
return WPPWWE;
}

public short getWPPWWL() {
return WPPWWL;
}

public byte getWPPWWR() {
return WPPWWR;
}

public short getWPPWWU() {
return WPPWWU;
}

public byte getWPPY2ME() {
return WPPY2ME;
}

public short getWPPY2ML() {
return WPPY2ML;
}

public byte getWPPY2MR() {
return WPPY2MR;
}

public short getWPPY2MU() {
return WPPY2MU;
}

public byte getWPPY2OE() {
return WPPY2OE;
}

public short getWPPY2OL() {
return WPPY2OL;
}

public byte getWPPY2OR() {
return WPPY2OR;
}

public byte getWPPY2OU() {
return WPPY2OU;
}

public byte getWPPY2WE() {
return WPPY2WE;
}

public byte getWPPY2WL() {
return WPPY2WL;
}

public byte getWPPY2WR() {
return WPPY2WR;
}

public byte getWPPY2WU() {
return WPPY2WU;
}

public byte getWPPY2YE() {
return WPPY2YE;
}

public short getWPPY2YL() {
return WPPY2YL;
}

public byte getWPPY2YR() {
return WPPY2YR;
}

public short getWPPY2YU() {
return WPPY2YU;
}

public byte getWPPY3ME() {
return WPPY3ME;
}

public short getWPPY3ML() {
return WPPY3ML;
}

public byte getWPPY3MR() {
return WPPY3MR;
}

public short getWPPY3MU() {
return WPPY3MU;
}

public byte getWPPY3OE() {
return WPPY3OE;
}

public byte getWPPY3OL() {
return WPPY3OL;
}

public byte getWPPY3OR() {
return WPPY3OR;
}

public byte getWPPY3OU() {
return WPPY3OU;
}

public byte getWPPY3YE() {
return WPPY3YE;
}

public short getWPPY3YL() {
return WPPY3YL;
}

public byte getWPPY3YR() {
return WPPY3YR;
}

public short getWPPY3YU() {
return WPPY3YU;
}

public boolean getWPPYFE() {
return WPPYFE;
}

public boolean getWPPYFL() {
return WPPYFL;
}

public boolean getWPPYFR() {
return WPPYFR;
}

public boolean getWPPYFU() {
return WPPYFU;
}

public byte getWPPYME() {
return WPPYME;
}

public short getWPPYML() {
return WPPYML;
}

public byte getWPPYMR() {
return WPPYMR;
}

public short getWPPYMU() {
return WPPYMU;
}

public byte getWPPYOE() {
return WPPYOE;
}

public short getWPPYOL() {
return WPPYOL;
}

public byte getWPPYOR() {
return WPPYOR;
}

public short getWPPYOU() {
return WPPYOU;
}

public int getWPPYR2() {
return WPPYR2;
}

public int getWPPYR3() {
return WPPYR3;
}

public byte getWPPYWE() {
return WPPYWE;
}

public byte getWPPYWL() {
return WPPYWL;
}

public byte getWPPYWR() {
return WPPYWR;
}

public short getWPPYWU() {
return WPPYWU;
}

public byte getWPPYYE() {
return WPPYYE;
}

public short getWPPYYL() {
return WPPYYL;
}

public byte getWPPYYR() {
return WPPYYR;
}

public short getWPPYYU() {
return WPPYYU;
}

public byte getWPRCON2() {
return WPRCON2;
}

public byte getWPREA01() {
return WPREA01;
}

public byte getWPREA02() {
return WPREA02;
}

public byte getWPREA03() {
return WPREA03;
}

public byte getWPREA04() {
return WPREA04;
}

public byte getWPREA05() {
return WPREA05;
}

public byte getWPREA06() {
return WPREA06;
}

public boolean getWPREA07() {
return WPREA07;
}

public byte getWPREC2() {
return WPREC2;
}

public byte getWPREC3() {
return WPREC3;
}

public byte getWPREM01() {
return WPREM01;
}

public byte getWPREM02() {
return WPREM02;
}

public byte getWPREM03() {
return WPREM03;
}

public byte getWPREM04() {
return WPREM04;
}

public byte getWPREM05() {
return WPREM05;
}

public byte getWPREM06() {
return WPREM06;
}

public boolean getWPREM07() {
return WPREM07;
}

public byte getWPREN() {
return WPREN;
}

public byte getWPRGH() {
return WPRGH;
}

public byte getWPRGH2() {
return WPRGH2;
}

public byte getWPRGH3() {
return WPRGH3;
}

public byte getWPRRE01() {
return WPRRE01;
}

public byte getWPRRE02() {
return WPRRE02;
}

public byte getWPRRE03() {
return WPRRE03;
}

public byte getWPRRE04() {
return WPRRE04;
}

public boolean getWPRRE05() {
return WPRRE05;
}

public boolean getWPRRE06() {
return WPRRE06;
}

public byte getWPRRM01() {
return WPRRM01;
}

public byte getWPRRM02() {
return WPRRM02;
}

public byte getWPRRM03() {
return WPRRM03;
}

public byte getWPRRM04() {
return WPRRM04;
}

public boolean getWPRRM05() {
return WPRRM05;
}

public boolean getWPRRM06() {
return WPRRM06;
}

public byte getWPRSC1() {
return WPRSC1;
}

public byte getWPRSC10() {
return WPRSC10;
}

public byte getWPRSC2() {
return WPRSC2;
}

public boolean getWPRSC3() {
return WPRSC3;
}

public byte getWPRSC9() {
return WPRSC9;
}

public byte getWPRSM02() {
return WPRSM02;
}

public boolean getWPRSM03() {
return WPRSM03;
}

public byte getWPRSM09() {
return WPRSM09;
}

public byte getWPRSM1() {
return WPRSM1;
}

public byte getWPRSM10() {
return WPRSM10;
}

public byte getWPRSM2() {
return WPRSM2;
}

public boolean getWPRSM3() {
return WPRSM3;
}

public byte getWPSJOBM() {
return WPSJOBM;
}

public short getWPSJOBY() {
return WPSJOBY;
}

public byte getWPSRC() {
return WPSRC;
}

public byte getWPSRC2() {
return WPSRC2;
}

public byte getWPTAWC() {
return WPTAWC;
}

public byte getWPTAX2() {
return WPTAX2;
}

public byte getWPTAX3() {
return WPTAX3;
}

public byte getWPTHFE() {
return WPTHFE;
}

public short getWPTHFL() {
return WPTHFL;
}

public byte getWPTHFR() {
return WPTHFR;
}

public short getWPTHFU() {
return WPTHFU;
}

public byte getWPTHME() {
return WPTHME;
}

public short getWPTHML() {
return WPTHML;
}

public byte getWPTHMR() {
return WPTHMR;
}

public short getWPTHMU() {
return WPTHMU;
}

public byte getWPTHOE() {
return WPTHOE;
}

public short getWPTHOL() {
return WPTHOL;
}

public byte getWPTHOR() {
return WPTHOR;
}

public short getWPTHOU() {
return WPTHOU;
}

public byte getWPTHWE() {
return WPTHWE;
}

public short getWPTHWL() {
return WPTHWL;
}

public byte getWPTHWR() {
return WPTHWR;
}

public short getWPTHWU() {
return WPTHWU;
}

public byte getWPTHYE() {
return WPTHYE;
}

public short getWPTHYL() {
return WPTHYL;
}

public boolean getWPTHYR() {
return WPTHYR;
}

public int getWPTHYU() {
return WPTHYU;
}

public boolean getWPUPFE() {
return WPUPFE;
}

public boolean getWPUPFL() {
return WPUPFL;
}

public boolean getWPUPFR() {
return WPUPFR;
}

public short getWPUPFU() {
return WPUPFU;
}

public byte getWPUPME() {
return WPUPME;
}

public short getWPUPML() {
return WPUPML;
}

public boolean getWPUPMR() {
return WPUPMR;
}

public short getWPUPMU() {
return WPUPMU;
}

public byte getWPUPOE() {
return WPUPOE;
}

public short getWPUPOL() {
return WPUPOL;
}

public boolean getWPUPOR() {
return WPUPOR;
}

public short getWPUPOU() {
return WPUPOU;
}

public byte getWPUPWE() {
return WPUPWE;
}

public short getWPUPWL() {
return WPUPWL;
}

public byte getWPUPWR() {
return WPUPWR;
}

public short getWPUPWU() {
return WPUPWU;
}

public byte getWPVBE() {
return WPVBE;
}

public int getWPVBL() {
return WPVBL;
}

public byte getWPVBR() {
return WPVBR;
}

public int getWPVBU() {
return WPVBU;
}

public byte getWPWEX() {
return WPWEX;
}

public byte getWPWLE() {
return WPWLE;
}

public short getWPWLL() {
return WPWLL;
}

public byte getWPWLR() {
return WPWLR;
}

public int getWPWLU() {
return WPWLU;
}

public byte getWPWTX() {
return WPWTX;
}

public byte getWPWTX2() {
return WPWTX2;
}

public byte getWPWTX3() {
return WPWTX3;
}

public boolean getWPXNO() {
return WPXNO;
}

public boolean getWPXNO2() {
return WPXNO2;
}

public byte getWPYAER2() {
return WPYAER2;
}

public byte getWPYBS2() {
return WPYBS2;
}

public int getWPYCA2() {
return WPYCA2;
}

public byte getWPYCAT2() {
return WPYCAT2;
}

public byte getWPYFRA() {
return WPYFRA;
}

public byte getWPYFRA2() {
return WPYFRA2;
}

public byte getWPYPEN() {
return WPYPEN;
}

public byte getWPYPEN2() {
return WPYPEN2;
}

public ELSA_Wave1_Record(String line) {
s = line.split("\t");
initIDAIND(s[0]);
initIDAHH(s[1]);
initIDAUNIQ(s[2]);
initPERID(s[3]);
initFINSTAT(s[4]);
initINDOC(s[5]);
initW1WGT(s[6]);
initDHSAMEH(s[7]);
initHHRESP(s[8]);
initDHSEX(s[9]);
initDHDOBYR(s[10]);
initDHAGER(s[11]);
initDHR(s[12]);
initDHR2(s[13]);
initDHR3(s[14]);
initDHR4(s[15]);
initDHR5(s[16]);
initDHR6(s[17]);
initDHR7(s[18]);
initDHR8(s[19]);
initDHR9(s[20]);
initDHR10(s[21]);
initDHR11(s[22]);
initDHR12(s[23]);
initDHR13(s[24]);
initDHPA(s[25]);
initDHPB(s[26]);
initDHC(s[27]);
initDHCH(s[28]);
initDHNCH(s[29]);
initDHCS(s[30]);
initDHCBY(s[31]);
initDHCAG(s[32]);
initDHCR01(s[33]);
initDHCR02(s[34]);
initDHCR03(s[35]);
initDHCR04(s[36]);
initDHCR05(s[37]);
initDHCR06(s[38]);
initDHCR07(s[39]);
initDHM(s[40]);
initDHC2(s[41]);
initDHCS2(s[42]);
initDHCBY02(s[43]);
initDHCAG2(s[44]);
initDHCR17(s[45]);
initDHCR18(s[46]);
initDHCR19(s[47]);
initDHCR20(s[48]);
initDHCR21(s[49]);
initDHCR22(s[50]);
initDHCR23(s[51]);
initDHM2(s[52]);
initDHC3(s[53]);
initDHCS3(s[54]);
initDHCBY03(s[55]);
initDHCAG3(s[56]);
initDHCR33(s[57]);
initDHCR34(s[58]);
initDHCR35(s[59]);
initDHCR36(s[60]);
initDHCR37(s[61]);
initDHCR38(s[62]);
initDHCR39(s[63]);
initDHM3(s[64]);
initDHC4(s[65]);
initDHCS4(s[66]);
initDHCBY04(s[67]);
initDHCAG4(s[68]);
initDHCR49(s[69]);
initDHCR50(s[70]);
initDHCR51(s[71]);
initDHCR52(s[72]);
initDHCR53(s[73]);
initDHCR54(s[74]);
initDHCR55(s[75]);
initDHM4(s[76]);
initDHC5(s[77]);
initDHCS5(s[78]);
initDHCBY05(s[79]);
initDHCAG5(s[80]);
initDHCR65(s[81]);
initDHCR66(s[82]);
initDHCR67(s[83]);
initDHCR68(s[84]);
initDHCR69(s[85]);
initDHCR70(s[86]);
initDHCR71(s[87]);
initDHM5(s[88]);
initDHC6(s[89]);
initDHCS6(s[90]);
initDHCBY06(s[91]);
initDHCAG6(s[92]);
initDHCR81(s[93]);
initDHCR82(s[94]);
initDHCR83(s[95]);
initDHCR84(s[96]);
initDHCR85(s[97]);
initDHCR86(s[98]);
initDHCR87(s[99]);
initDHM6(s[100]);
initDHC7(s[101]);
initDHCS7(s[102]);
initDHCBY07(s[103]);
initDHCAG7(s[104]);
initDHCR97(s[105]);
initDHCR98(s[106]);
initDHCR99(s[107]);
initDHCR100(s[108]);
initDHCR101(s[109]);
initDHCR102(s[110]);
initDHCR103(s[111]);
initDHM7(s[112]);
initDHC8(s[113]);
initDHCS8(s[114]);
initDHCBY08(s[115]);
initDHCAG8(s[116]);
initDHCR113(s[117]);
initDHCR114(s[118]);
initDHCR115(s[119]);
initDHCR116(s[120]);
initDHCR117(s[121]);
initDHM8(s[122]);
initDHC9(s[123]);
initDHCS9(s[124]);
initDHCBY09(s[125]);
initDHCAG9(s[126]);
initDHCR129(s[127]);
initDHCR130(s[128]);
initDHCR131(s[129]);
initDHCR132(s[130]);
initDHCR133(s[131]);
initDHM9(s[132]);
initDHC10(s[133]);
initDHCS10(s[134]);
initDHCBY10(s[135]);
initDHCAG10(s[136]);
initDHCR145(s[137]);
initDHCR146(s[138]);
initDHM10(s[139]);
initDHC11(s[140]);
initDHCS11(s[141]);
initDHCBY11(s[142]);
initDHCAG11(s[143]);
initDHCR161(s[144]);
initDHCR162(s[145]);
initDHM11(s[146]);
initDHC12(s[147]);
initDHCS12(s[148]);
initDHCBY12(s[149]);
initDHCAG12(s[150]);
initDHCR177(s[151]);
initDHM12(s[152]);
initDHC13(s[153]);
initDHCS13(s[154]);
initDHCBY13(s[155]);
initDHCAG13(s[156]);
initDHCR193(s[157]);
initDHM13(s[158]);
initDHANYPX(s[159]);
initDHPRX01(s[160]);
initDHPRX02(s[161]);
initDIDOB(s[162]);
initDIDBNY(s[163]);
initDIAG(s[164]);
initDIINT(s[165]);
initDIPRE(s[166]);
initDISEX(s[167]);
initDIMAR(s[168]);
initDIGRAN(s[169]);
initDIGNMY(s[170]);
initDISIB(s[171]);
initDINMA(s[172]);
initDIANM(s[173]);
initDIMAD(s[174]);
initDICDNM(s[175]);
initDINFA(s[176]);
initDIANF(s[177]);
initDIFAD(s[178]);
initDICDNF(s[179]);
initDIKLIV(s[180]);
initDIKLIVC(s[181]);
initDIFJOB(s[182]);
initHEGENH(s[183]);
initHEHELF(s[184]);
initHEILL(s[185]);
initHELIM(s[186]);
initHEFUNC(s[187]);
initHEATT01(s[188]);
initHEATT02(s[189]);
initHEATT03(s[190]);
initHEATT04(s[191]);
initHEATT05(s[192]);
initHEATT06(s[193]);
initHEATT07(s[194]);
initHEATT08(s[195]);
initHEATT09(s[196]);
initHEATT10(s[197]);
initHEATT11(s[198]);
initHEATT12(s[199]);
initHEATT13(s[200]);
initHEATT14(s[201]);
initHEATT15(s[202]);
initHEATT16(s[203]);
initHEATT17(s[204]);
initHEATA(s[205]);
initHEEYE(s[206]);
initHEFRND(s[207]);
initHEPAP(s[208]);
initHEOPT1(s[209]);
initHEOPT2(s[210]);
initHEOPT3(s[211]);
initHEOPT4(s[212]);
initHEOPT5(s[213]);
initHECAT(s[214]);
initHEHEAR(s[215]);
initHEHRA(s[216]);
initHEDIA01(s[217]);
initHEDIA02(s[218]);
initHEDIA03(s[219]);
initHEDIA04(s[220]);
initHEDIA05(s[221]);
initHEDIA06(s[222]);
initHEDIA07(s[223]);
initHEDIA08(s[224]);
initHEDIA09(s[225]);
initHEDIA10(s[226]);
initHEDIM01(s[227]);
initHEDIM02(s[228]);
initHEDIM03(s[229]);
initHEDIM04(s[230]);
initHEDIM05(s[231]);
initHEDIM06(s[232]);
initHEDIM07(s[233]);
initHEMDA(s[234]);
initHEAGA(s[235]);
initHEYRA(s[236]);
initHEAGB(s[237]);
initHEYRB(s[238]);
initHEAGC(s[239]);
initHEAGD(s[240]);
initHEINS(s[241]);
initHEMDB(s[242]);
initHEAGE(s[243]);
initHEPBS(s[244]);
initHEWKS(s[245]);
initHESPK(s[246]);
initHEVSI(s[247]);
initHETHK(s[248]);
initHEDIB01(s[249]);
initHEDIB02(s[250]);
initHEDIB03(s[251]);
initHEDIB04(s[252]);
initHEDIB05(s[253]);
initHEDIB06(s[254]);
initHEDIB07(s[255]);
initHEDIB08(s[256]);
initHEDIB09(s[257]);
initHEDIB10(s[258]);
initHELNG(s[259]);
initHEAMA(s[260]);
initHEART1(s[261]);
initHEART2(s[262]);
initHEART3(s[263]);
initHEAGF(s[264]);
initHEAGG(s[265]);
initHECANA(s[266]);
initHECANB(s[267]);
initHEPRK(s[268]);
initHEAGH(s[269]);
initHEPSY1(s[270]);
initHEPSY2(s[271]);
initHEPSY3(s[272]);
initHEPSY4(s[273]);
initHEPSY5(s[274]);
initHEPSY6(s[275]);
initHEPSY7(s[276]);
initHEPSY8(s[277]);
initHEPSY9(s[278]);
initHEYRC(s[279]);
initHEAGI(s[280]);
initHEAGJ(s[281]);
initHEFLA(s[282]);
initHEFLB(s[283]);
initHEFLC(s[284]);
initHEFRAC(s[285]);
initHEJI(s[286]);
initHEJIA1(s[287]);
initHEJIA2(s[288]);
initHEJIA3(s[289]);
initHEJIA4(s[290]);
initHEJIA5(s[291]);
initHEJIA6(s[292]);
initHEJIB(s[293]);
initHEJIC(s[294]);
initHEIQA(s[295]);
initHEIQB(s[296]);
initHEIQC(s[297]);
initHEIQD(s[298]);
initHEIQE(s[299]);
initHEIQF(s[300]);
initHEIQG(s[301]);
initHEIQH(s[302]);
initHEIQI(s[303]);
initHEIQJ(s[304]);
initHEIQK(s[305]);
initHEIQL(s[306]);
initHEIQM(s[307]);
initHEIQN(s[308]);
initHEIQO(s[309]);
initHEIQP(s[310]);
initHEIQQ(s[311]);
initHEPAIN(s[312]);
initHEPAA(s[313]);
initHEPAB(s[314]);
initHEBCK(s[315]);
initHEHIP(s[316]);
initHEKNE(s[317]);
initHEFET(s[318]);
initHEBAL(s[319]);
initHEDIZ(s[320]);
initHEANA(s[321]);
initHEANB(s[322]);
initHEANC(s[323]);
initHEAND(s[324]);
initHEANE(s[325]);
initHEANF(s[326]);
initHEANG(s[327]);
initHEANH(s[328]);
initHEANI(s[329]);
initHEANIC(s[330]);
initHEANK(s[331]);
initHERPA(s[332]);
initHERPB(s[333]);
initHERPC(s[334]);
initHERPD(s[335]);
initHERPE(s[336]);
initHERPF(s[337]);
initHERPG(s[338]);
initHERPH(s[339]);
initHERPI(s[340]);
initHERPJ(s[341]);
initHECDA(s[342]);
initHECDB(s[343]);
initHECDC(s[344]);
initHECDD(s[345]);
initHECDE(s[346]);
initHECDF1(s[347]);
initHECDF2(s[348]);
initHECDF3(s[349]);
initHEAVOID(s[350]);
initHEADA01(s[351]);
initHEADA02(s[352]);
initHEADA03(s[353]);
initHEADA04(s[354]);
initHEADA05(s[355]);
initHEADA06(s[356]);
initHEADA07(s[357]);
initHEADA08(s[358]);
initHEADA09(s[359]);
initHEADA10(s[360]);
initHEADA11(s[361]);
initHEADB01(s[362]);
initHEADB02(s[363]);
initHEADB03(s[364]);
initHEADB04(s[365]);
initHEADB05(s[366]);
initHEADB06(s[367]);
initHEADB07(s[368]);
initHEADB08(s[369]);
initHEADB09(s[370]);
initHEADB10(s[371]);
initHEADB11(s[372]);
initHEADB12(s[373]);
initHEADB13(s[374]);
initHEADB14(s[375]);
initHEHPA(s[376]);
initHEHPB01(s[377]);
initHEHPB02(s[378]);
initHEHPB03(s[379]);
initHEHPB04(s[380]);
initHEHPB05(s[381]);
initHEHPB06(s[382]);
initHEHPB07(s[383]);
initHEHPB08(s[384]);
initHEHPB09(s[385]);
initHEHPB10(s[386]);
initHEHPB11(s[387]);
initHEHPB12(s[388]);
initHEHPB13(s[389]);
initHEHPB14(s[390]);
initHEHPB15(s[391]);
initHEHPB16(s[392]);
initHEHPC(s[393]);
initHEAID1(s[394]);
initHEAID2(s[395]);
initHEAID3(s[396]);
initHEAID4(s[397]);
initHEAID5(s[398]);
initHEAID6(s[399]);
initHEAID7(s[400]);
initHEAID8(s[401]);
initHEINCT(s[402]);
initHESMK(s[403]);
initHESKA(s[404]);
initHECIG(s[405]);
initHESKB(s[406]);
initHETBA(s[407]);
initHETBB(s[408]);
initHESKC(s[409]);
initHETBC(s[410]);
initHETBD(s[411]);
initHEALA(s[412]);
initHEALB(s[413]);
initHEALC(s[414]);
initHEACTA(s[415]);
initHEACTB(s[416]);
initHEACTC(s[417]);
initHEHELFB(s[418]);
initHEGENHB(s[419]);
initSPCAA(s[420]);
initSPCAB1(s[421]);
initSPCAB2(s[422]);
initSPCAB3(s[423]);
initSPCAB4(s[424]);
initSPCAM01(s[425]);
initSPCAM02(s[426]);
initSPCAM03(s[427]);
initSPCAM04(s[428]);
initSPCAC(s[429]);
initSPCIN(s[430]);
initSPCINB(s[431]);
initSPREST(s[432]);
initSPRESTB(s[433]);
initSPMUS(s[434]);
initSPMUSB(s[435]);
initSPTEA(s[436]);
initSPTEAB(s[437]);
initSPCAR(s[438]);
initSPTRAA(s[439]);
initSPTRAB1(s[440]);
initSPTRAB2(s[441]);
initSPTRAB3(s[442]);
initSPTRAB4(s[443]);
initSPTRAB5(s[444]);
initSPTRAB6(s[445]);
initSPTRM01(s[446]);
initSPTRM02(s[447]);
initSPTRM03(s[448]);
initSPTRM04(s[449]);
initSPTRM05(s[450]);
initSPTRM06(s[451]);
initMMSCHS(s[452]);
initMMALONE(s[453]);
initMMHSS(s[454]);
initMMWILL(s[455]);
initMMSAF(s[456]);
initMMSTOP(s[457]);
initMMAVSP(s[458]);
initMMWALA(s[459]);
initMMTRYA(s[460]);
initMMWLKA(s[461]);
initMMTRYB(s[462]);
initMMWLKB(s[463]);
initMMPAIN(s[464]);
initMMRECR(s[465]);
initMMRECRC(s[466]);
initMMAID(s[467]);
initMMAIDC(s[468]);
initMMCOMZ1(s[469]);
initMMCOMZ2(s[470]);
initWPACT1(s[471]);
initWPACT2(s[472]);
initWPACT3(s[473]);
initWPACT4(s[474]);
initWPACT5(s[475]);
initWPACT6(s[476]);
initWPAWAY(s[477]);
initWPACTW(s[478]);
initWPTAW(s[479]);
initWPTAWC(s[480]);
initWPDES(s[481]);
initWPDESC(s[482]);
initWPEDC(s[483]);
initWPVW(s[484]);
initWPES(s[485]);
initWPESP(s[486]);
initWPJOB(s[487]);
initWPJOBL(s[488]);
initWPSTJ(s[489]);
initWPEMP(s[490]);
initWPEVER(s[491]);
initWPASKD(s[492]);
initWPASKE(s[493]);
initWPASKF(s[494]);
initWPSUP(s[495]);
initWPEST(s[496]);
initWPSAL(s[497]);
initWPCJB1(s[498]);
initWPCJB2(s[499]);
initWPCJB3(s[500]);
initWPCJB4(s[501]);
initWPNEMP(s[502]);
initWPEMPL(s[503]);
initWPNOE(s[504]);
initWPJACT(s[505]);
initWPSJOBY(s[506]);
initWPSJOBM(s[507]);
initWPCJOB(s[508]);
initWPHJOB(s[509]);
initWPHWRK(s[510]);
initWPWLY(s[511]);
initWPWLYM(s[512]);
initWPHLY(s[513]);
initWPWLYY(s[514]);
initWPWLL(s[515]);
initWPWLU(s[516]);
initWPWLE(s[517]);
initWPWLR(s[518]);
initWPLLJY(s[519]);
initWPLLJM(s[520]);
initWPNIC(s[521]);
initWPNICE(s[522]);
initWPNIMW(s[523]);
initWPLNJ(s[524]);
initWPSPAY(s[525]);
initWPOTP(s[526]);
initWPAOTP(s[527]);
initWPAOWL(s[528]);
initWPAOWU(s[529]);
initWPAOWE(s[530]);
initWPAOWR(s[531]);
initWPAOFL(s[532]);
initWPAOFU(s[533]);
initWPAOFE(s[534]);
initWPAOFR(s[535]);
initWPAOML(s[536]);
initWPAOMU(s[537]);
initWPAOME(s[538]);
initWPAOMR(s[539]);
initWPAOYL(s[540]);
initWPAOYU(s[541]);
initWPAOYE(s[542]);
initWPAOYR(s[543]);
initWPAOOL(s[544]);
initWPAOOU(s[545]);
initWPAOOE(s[546]);
initWPAOOR(s[547]);
initWPPERI(s[548]);
initWPSLIP(s[549]);
initWPTHP(s[550]);
initWPTHWL(s[551]);
initWPTHWU(s[552]);
initWPTHWE(s[553]);
initWPTHWR(s[554]);
initWPTHFL(s[555]);
initWPTHFU(s[556]);
initWPTHFE(s[557]);
initWPTHFR(s[558]);
initWPTHML(s[559]);
initWPTHMU(s[560]);
initWPTHME(s[561]);
initWPTHMR(s[562]);
initWPTHYL(s[563]);
initWPTHYU(s[564]);
initWPTHYE(s[565]);
initWPTHYR(s[566]);
initWPTHOL(s[567]);
initWPTHOU(s[568]);
initWPTHOE(s[569]);
initWPTHOR(s[570]);
initWPTHL(s[571]);
initWPUP(s[572]);
initWPUPA(s[573]);
initWPUPWL(s[574]);
initWPUPWU(s[575]);
initWPUPWE(s[576]);
initWPUPWR(s[577]);
initWPUPFL(s[578]);
initWPUPFU(s[579]);
initWPUPFE(s[580]);
initWPUPFR(s[581]);
initWPUPML(s[582]);
initWPUPMU(s[583]);
initWPUPME(s[584]);
initWPUPMR(s[585]);
initWPUPOL(s[586]);
initWPUPOU(s[587]);
initWPUPOE(s[588]);
initWPUPOR(s[589]);
initWPPAYA(s[590]);
initWPIR(s[591]);
initWPAP(s[592]);
initWPRAIR(s[593]);
initWPRAIM(s[594]);
initWPRAEY(s[595]);
initWPRAEM(s[596]);
initWPPROF(s[597]);
initWPPRL(s[598]);
initWPPRU(s[599]);
initWPPRE(s[600]);
initWPPRR(s[601]);
initWPPL(s[602]);
initWPBDT(s[603]);
initWPBDNI(s[604]);
initWPBI(s[605]);
initWPBIWA(s[606]);
initWPBIMA(s[607]);
initWPBIML(s[608]);
initWPBIMU(s[609]);
initWPBIME(s[610]);
initWPBIMR(s[611]);
initWPBUSV(s[612]);
initWPBUL(s[613]);
initWPBUU(s[614]);
initWPBUE(s[615]);
initWPBUR(s[616]);
initWPMOJ(s[617]);
initWPHMSJ(s[618]);
initWPESJ(s[619]);
initWPESJL(s[620]);
initWPESJU(s[621]);
initWPESJE(s[622]);
initWPESJR(s[623]);
initWPESJM(s[624]);
initWPESL(s[625]);
initWPESU(s[626]);
initWPESE(s[627]);
initWPESR(s[628]);
initWPBUS(s[629]);
initWPVBUS(s[630]);
initWPVBL(s[631]);
initWPVBU(s[632]);
initWPVBE(s[633]);
initWPVBR(s[634]);
initWPERET(s[635]);
initWPERAG(s[636]);
initWPBPS(s[637]);
initWPANYP(s[638]);
initWPPS(s[639]);
initWPDPS(s[640]);
initWPPSM1(s[641]);
initWPPSM2(s[642]);
initWPPSMM1(s[643]);
initWPPSMM2(s[644]);
initWPEC(s[645]);
initWPECA(s[646]);
initWP1ASK(s[647]);
initWP2ASK(s[648]);
initWPCASK(s[649]);
initWPXNO(s[650]);
initWPCPS(s[651]);
initWPCPSC(s[652]);
initWPKP(s[653]);
initWPKPC(s[654]);
initWPPDES(s[655]);
initWPOARS(s[656]);
initWPCOS(s[657]);
initWPYBS(s[658]);
initWPERC(s[659]);
initWPMC(s[660]);
initWPMCA(s[661]);
initWPPERC(s[662]);
initWPMFRC(s[663]);
initWPYCAT(s[664]);
initWPYCA(s[665]);
initWPMCAF(s[666]);
initWPYFRA(s[667]);
initWPACON(s[668]);
initWPACOA(s[669]);
initWPACOB(s[670]);
initWPACOC(s[671]);
initWPFRAS(s[672]);
initWPCONY(s[673]);
initWPADY(s[674]);
initWPMMIN(s[675]);
initWPMUC(s[676]);
initWPAUC(s[677]);
initWPPER(s[678]);
initWPFRUC(s[679]);
initWPANYC(s[680]);
initWPACAT(s[681]);
initWPECON(s[682]);
initWPECNA(s[683]);
initWPEPER(s[684]);
initWPEFS(s[685]);
initWPNRA(s[686]);
initWPBTHA(s[687]);
initWPBTHP(s[688]);
initWPERA(s[689]);
initWPYAER(s[690]);
initWPDSP(s[691]);
initWPDSPC(s[692]);
initWPFSAP(s[693]);
initWPFSAPC(s[694]);
initWPPLP(s[695]);
initWPPLPH(s[696]);
initWPLUMP(s[697]);
initWPLUL(s[698]);
initWPLUU(s[699]);
initWPLUE(s[700]);
initWPLUR(s[701]);
initWPPTP(s[702]);
initWPPSAL(s[703]);
initWPASAL(s[704]);
initWPASL(s[705]);
initWPASU(s[706]);
initWPASE(s[707]);
initWPASR(s[708]);
initWPFSAV(s[709]);
initWPPFVA(s[710]);
initWPPFL(s[711]);
initWPPFU(s[712]);
initWPPFE(s[713]);
initWPPFR(s[714]);
initWPAPF(s[715]);
initWPAPL(s[716]);
initWPAPU(s[717]);
initWPAPE(s[718]);
initWPAPR(s[719]);
initWPPTOP(s[720]);
initWPPENB(s[721]);
initWPPETL(s[722]);
initWPPETU(s[723]);
initWPPETE(s[724]);
initWPPETR(s[725]);
initWPPEAL(s[726]);
initWPPEAU(s[727]);
initWPPEAE(s[728]);
initWPPEAR(s[729]);
initWPCONS(s[730]);
initWPPLON(s[731]);
initWPPCON(s[732]);
initWPHCON(s[733]);
initWPCAMT(s[734]);
initWPCPER(s[735]);
initWPNIFP(s[736]);
initWPLCOY(s[737]);
initWPLCOM(s[738]);
initWPMCON(s[739]);
initWPAC(s[740]);
initWPNIRR(s[741]);
initWPLASY(s[742]);
initWPLASM(s[743]);
initWPMLAS(s[744]);
initWPLASP(s[745]);
initWPRCON(s[746]);
initWPRSC1(s[747]);
initWPRSC2(s[748]);
initWPRSC3(s[749]);
initWPRSM1(s[750]);
initWPRSM02(s[751]);
initWPRSM03(s[752]);
initWPCEMP(s[753]);
initWPMEC(s[754]);
initWPAMEC(s[755]);
initWPFSCP(s[756]);
initWPFSCO(s[757]);
initWPCUV(s[758]);
initWPCUL(s[759]);
initWPCUU(s[760]);
initWPCUE(s[761]);
initWPCUR(s[762]);
initWPPEXP(s[763]);
initWPAMOU(s[764]);
initWPAMTL(s[765]);
initWPAMTU(s[766]);
initWPAMTE(s[767]);
initWPAMTR(s[768]);
initWPAMAL(s[769]);
initWPAMAU(s[770]);
initWPAMAE(s[771]);
initWPAMAR(s[772]);
initWPYPEN(s[773]);
initWPCB(s[774]);
initWPCBL(s[775]);
initWPCBU(s[776]);
initWPCBE(s[777]);
initWPCBR(s[778]);
initWPSRC(s[779]);
initWPMRC(s[780]);
initWPMRCP(s[781]);
initWPLRCY(s[782]);
initWPLRCM(s[783]);
initWPLAC(s[784]);
initWPCON(s[785]);
initWPLPE(s[786]);
initWPLPA(s[787]);
initWPLPTL(s[788]);
initWPLPTU(s[789]);
initWPLPTE(s[790]);
initWPLPTR(s[791]);
initWPLPAL(s[792]);
initWPLPAU(s[793]);
initWPLPAE(s[794]);
initWPLPAR(s[795]);
initWPIFS01(s[796]);
initWPIFS02(s[797]);
initWPIFS03(s[798]);
initWPIFS04(s[799]);
initWPFINF(s[800]);
initWPXNO2(s[801]);
initWPCPS2(s[802]);
initWPCPSC2(s[803]);
initWPKP2(s[804]);
initWPKP2C(s[805]);
initWPPDES2(s[806]);
initWPOARS2(s[807]);
initWPCOS2(s[808]);
initWPYBS2(s[809]);
initWPERC2(s[810]);
initWPMC2(s[811]);
initWPMCA2(s[812]);
initWPPERC2(s[813]);
initWPMFRC2(s[814]);
initWPYCAT2(s[815]);
initWPYCA2(s[816]);
initWPMCAF2(s[817]);
initWPYFRA2(s[818]);
initWPACON2(s[819]);
initWPACOA2(s[820]);
initWPACOB2(s[821]);
initWPACOC2(s[822]);
initWPFRAS2(s[823]);
initWPADY2(s[824]);
initWPMMIN2(s[825]);
initWPMUC2(s[826]);
initWPANYC2(s[827]);
initWPACAT2(s[828]);
initWPECON2(s[829]);
initWPECNA2(s[830]);
initWPEPER2(s[831]);
initWPEFS2(s[832]);
initWPNRA2(s[833]);
initWPBTHA2(s[834]);
initWPBTHP2(s[835]);
initWPERA2(s[836]);
initWPYAER2(s[837]);
initWPDSP2(s[838]);
initWPDSP2C(s[839]);
initWPFSAP2(s[840]);
initWPPLP2(s[841]);
initWPPLPH2(s[842]);
initWPLUMP2(s[843]);
initWPLU2L(s[844]);
initWPLU2U(s[845]);
initWPLU2E(s[846]);
initWPLU2R(s[847]);
initWPPTP2(s[848]);
initWPPSAL2(s[849]);
initWPASAL2(s[850]);
initWPAS2L(s[851]);
initWPAS2U(s[852]);
initWPAS2E(s[853]);
initWPAS2R(s[854]);
initWPFSAV2(s[855]);
initWPPFVA2(s[856]);
initWPAPF2(s[857]);
initWPAP2L(s[858]);
initWPAP2U(s[859]);
initWPAP2E(s[860]);
initWPAP2R(s[861]);
initWPPTOP2(s[862]);
initWPPENB2(s[863]);
initWPPE2AL(s[864]);
initWPPE2AU(s[865]);
initWPPE2AE(s[866]);
initWPPE2AR(s[867]);
initWPCONS2(s[868]);
initWPPLON2(s[869]);
initWPPCON2(s[870]);
initWPHCON2(s[871]);
initWPCAMT2(s[872]);
initWPCPER2(s[873]);
initWPNIFP2(s[874]);
initWPLCOY2(s[875]);
initWPLCOM2(s[876]);
initWPMCON2(s[877]);
initWPAC2(s[878]);
initWPNIRR2(s[879]);
initWPLASY2(s[880]);
initWPLASM2(s[881]);
initWPMLAS2(s[882]);
initWPLASP2(s[883]);
initWPRCON2(s[884]);
initWPRSC9(s[885]);
initWPRSC10(s[886]);
initWPRSM09(s[887]);
initWPRSM10(s[888]);
initWPCEMP2(s[889]);
initWPMEC2(s[890]);
initWPAMEC2(s[891]);
initWPFSCP2(s[892]);
initWPCUV2(s[893]);
initWPCU2L(s[894]);
initWPCU2U(s[895]);
initWPCU2E(s[896]);
initWPCU2R(s[897]);
initWPPEXP2(s[898]);
initWPAMOU2(s[899]);
initWPAM2AL(s[900]);
initWPAM2AU(s[901]);
initWPAM2AE(s[902]);
initWPAM2AR(s[903]);
initWPYPEN2(s[904]);
initWPCB2(s[905]);
initWPCB2L(s[906]);
initWPCB2U(s[907]);
initWPCB2E(s[908]);
initWPCB2R(s[909]);
initWPSRC2(s[910]);
initWPMRC2(s[911]);
initWPMRCP2(s[912]);
initWPLRCY2(s[913]);
initWPLRCM2(s[914]);
initWPLAC2(s[915]);
initWPLPE2(s[916]);
initWPLPA2(s[917]);
initWPLP2AL(s[918]);
initWPLP2AU(s[919]);
initWPLP2AE(s[920]);
initWPLP2AR(s[921]);
initWPIFS10(s[922]);
initWPIFS11(s[923]);
initWPIFS12(s[924]);
initWPFINF2(s[925]);
initWPPDOC(s[926]);
initWPINTA(s[927]);
initWPPRPE(s[928]);
initWPPEPR(s[929]);
initWPNOSC(s[930]);
initWPREC(s[931]);
initWPMSC(s[932]);
initWPDS(s[933]);
initWPDE(s[934]);
initWPRGH(s[935]);
initWPPAM(s[936]);
initWPPA(s[937]);
initWPPATL(s[938]);
initWPPATU(s[939]);
initWPPATE(s[940]);
initWPPATR(s[941]);
initWPPAAL(s[942]);
initWPPAAU(s[943]);
initWPPAAE(s[944]);
initWPPAAR(s[945]);
initWPINF(s[946]);
initWPPAY(s[947]);
initWPPYR(s[948]);
initWPPYWL(s[949]);
initWPPYWU(s[950]);
initWPPYWE(s[951]);
initWPPYWR(s[952]);
initWPPYML(s[953]);
initWPPYMU(s[954]);
initWPPYME(s[955]);
initWPPYMR(s[956]);
initWPPYYL(s[957]);
initWPPYYU(s[958]);
initWPPYYE(s[959]);
initWPPYYR(s[960]);
initWPPYOL(s[961]);
initWPPYOU(s[962]);
initWPPYOE(s[963]);
initWPPYOR(s[964]);
initWPTAX(s[965]);
initWPREC2(s[966]);
initWPMSC2(s[967]);
initWPDS2(s[968]);
initWPDE2(s[969]);
initWPRGH2(s[970]);
initWPPAM2(s[971]);
initWPPA2(s[972]);
initWPPA2TL(s[973]);
initWPPA2TU(s[974]);
initWPPA2TE(s[975]);
initWPPA2TR(s[976]);
initWPPA2AL(s[977]);
initWPPA2AU(s[978]);
initWPPA2AE(s[979]);
initWPPA2AR(s[980]);
initWPINF2(s[981]);
initWPPAY2(s[982]);
initWPPYR2(s[983]);
initWPPY2WL(s[984]);
initWPPY2WU(s[985]);
initWPPY2WE(s[986]);
initWPPY2WR(s[987]);
initWPPY2ML(s[988]);
initWPPY2MU(s[989]);
initWPPY2ME(s[990]);
initWPPY2MR(s[991]);
initWPPY2YL(s[992]);
initWPPY2YU(s[993]);
initWPPY2YE(s[994]);
initWPPY2YR(s[995]);
initWPPY2OL(s[996]);
initWPPY2OU(s[997]);
initWPPY2OE(s[998]);
initWPPY2OR(s[999]);
initWPTAX2(s[1000]);
initWPREC3(s[1001]);
initWPMSC3(s[1002]);
initWPDS3(s[1003]);
initWPDE3(s[1004]);
initWPRGH3(s[1005]);
initWPPAM3(s[1006]);
initWPPA3(s[1007]);
initWPPA3TL(s[1008]);
initWPPA3TU(s[1009]);
initWPPA3TE(s[1010]);
initWPPA3TR(s[1011]);
initWPPA3AL(s[1012]);
initWPPA3AU(s[1013]);
initWPPA3AE(s[1014]);
initWPPA3AR(s[1015]);
initWPINF3(s[1016]);
initWPPAY3(s[1017]);
initWPPYR3(s[1018]);
initWPPY3ML(s[1019]);
initWPPY3MU(s[1020]);
initWPPY3ME(s[1021]);
initWPPY3MR(s[1022]);
initWPPY3YL(s[1023]);
initWPPY3YU(s[1024]);
initWPPY3YE(s[1025]);
initWPPY3YR(s[1026]);
initWPPY3OL(s[1027]);
initWPPY3OU(s[1028]);
initWPPY3OE(s[1029]);
initWPPY3OR(s[1030]);
initWPTAX3(s[1031]);
initWPPW(s[1032]);
initWPREN(s[1033]);
initWPEXW(s[1034]);
initWPPWP(s[1035]);
initWPPWR(s[1036]);
initWPPWWL(s[1037]);
initWPPWWU(s[1038]);
initWPPWWE(s[1039]);
initWPPWWR(s[1040]);
initWPPWML(s[1041]);
initWPPWMU(s[1042]);
initWPPWME(s[1043]);
initWPPWMR(s[1044]);
initWPPWOL(s[1045]);
initWPPWOU(s[1046]);
initWPPWOE(s[1047]);
initWPPWOR(s[1048]);
initWPWTX(s[1049]);
initWPPWP2(s[1050]);
initWPPWR2(s[1051]);
initWPPW2WL(s[1052]);
initWPPW2WU(s[1053]);
initWPPW2WE(s[1054]);
initWPPW2WR(s[1055]);
initWPPW2ML(s[1056]);
initWPPW2MU(s[1057]);
initWPPW2ME(s[1058]);
initWPPW2MR(s[1059]);
initWPPW2OL(s[1060]);
initWPPW2OU(s[1061]);
initWPPW2OE(s[1062]);
initWPPW2OR(s[1063]);
initWPWTX2(s[1064]);
initWPPWP3(s[1065]);
initWPPWR3(s[1066]);
initWPWTX3(s[1067]);
initWPWEX(s[1068]);
initWPEXA(s[1069]);
initWPEXTL(s[1070]);
initWPEXTU(s[1071]);
initWPEXTE(s[1072]);
initWPEXTR(s[1073]);
initWPEXAL(s[1074]);
initWPEXAU(s[1075]);
initWPEXAE(s[1076]);
initWPEXAR(s[1077]);
initWPINFO(s[1078]);
initWPRAGE(s[1079]);
initWPERET2(s[1080]);
initWPERP(s[1081]);
initWPREA01(s[1082]);
initWPREA02(s[1083]);
initWPREA03(s[1084]);
initWPREA04(s[1085]);
initWPREA05(s[1086]);
initWPREA06(s[1087]);
initWPREA07(s[1088]);
initWPREM01(s[1089]);
initWPREM02(s[1090]);
initWPREM03(s[1091]);
initWPREM04(s[1092]);
initWPREM05(s[1093]);
initWPREM06(s[1094]);
initWPREM07(s[1095]);
initWPMREA(s[1096]);
initWPRRE01(s[1097]);
initWPRRE02(s[1098]);
initWPRRE03(s[1099]);
initWPRRE04(s[1100]);
initWPRRE05(s[1101]);
initWPRRE06(s[1102]);
initWPRRM01(s[1103]);
initWPRRM02(s[1104]);
initWPRRM03(s[1105]);
initWPRRM04(s[1106]);
initWPRRM05(s[1107]);
initWPRRM06(s[1108]);
initWPMRRE(s[1109]);
initWPWKR(s[1110]);
initWPPHI(s[1111]);
initWPHOWU(s[1112]);
initWPHLWZ(s[1113]);
initWPHOWE(s[1114]);
initWPMHI(s[1115]);
initWPMHL(s[1116]);
initWPMHU(s[1117]);
initWPMHE(s[1118]);
initWPMHR(s[1119]);
initIAASK(s[1120]);
initIAWORK(s[1121]);
initIASINC(s[1122]);
initIASINCL(s[1123]);
initIASINCU(s[1124]);
initIASINCE(s[1125]);
initIASINCR(s[1126]);
initIASPEN(s[1127]);
initIASPW(s[1128]);
initIASPA(s[1129]);
initIAPAM(s[1130]);
initIAPAMWL(s[1131]);
initIAPAMWU(s[1132]);
initIAPAMWE(s[1133]);
initIAPAMWR(s[1134]);
initIAPAMFL(s[1135]);
initIAPAMFU(s[1136]);
initIAPAMFE(s[1137]);
initIAPAMFR(s[1138]);
initIAPAMML(s[1139]);
initIAPAMMU(s[1140]);
initIAPAMME(s[1141]);
initIAPAMMR(s[1142]);
initIAPAMYL(s[1143]);
initIAPAMYU(s[1144]);
initIAPAMYE(s[1145]);
initIAPAMYR(s[1146]);
initIAPAMOL(s[1147]);
initIAPAMOU(s[1148]);
initIAPAMOE(s[1149]);
initIAPAMOR(s[1150]);
initIAPLY(s[1151]);
initIAPLYW(s[1152]);
initIASPP(s[1153]);
initIAPPAM(s[1154]);
initIAPPWL(s[1155]);
initIAPPWU(s[1156]);
initIAPPWE(s[1157]);
initIAPPWR(s[1158]);
initIAPPFL(s[1159]);
initIAPPFU(s[1160]);
initIAPPFE(s[1161]);
initIAPPFR(s[1162]);
initIAPPML(s[1163]);
initIAPPMU(s[1164]);
initIAPPME(s[1165]);
initIAPPMR(s[1166]);
initIAPPYL(s[1167]);
initIAPPYU(s[1168]);
initIAPPYE(s[1169]);
initIAPPYR(s[1170]);
initIAPPOL(s[1171]);
initIAPPOU(s[1172]);
initIAPPOE(s[1173]);
initIAPPOR(s[1174]);
initIAPLYP(s[1175]);
initIAPLW(s[1176]);
initIAPPEN(s[1177]);
initIAPPEI(s[1178]);
initIAPPL(s[1179]);
initIAPPU(s[1180]);
initIAPPE(s[1181]);
initIAPPR(s[1182]);
initIAANIN(s[1183]);
initIAAILY(s[1184]);
initIAAIM(s[1185]);
initIAAIML(s[1186]);
initIAAIMU(s[1187]);
initIAAIME(s[1188]);
initIAAIMR(s[1189]);
initIAAIP(s[1190]);
initIAAIL(s[1191]);
initIAAIU(s[1192]);
initIAAIE(s[1193]);
initIAAIR(s[1194]);
initIAHDB(s[1195]);
initIAHDR01(s[1196]);
initIAHDR02(s[1197]);
initIAHDR03(s[1198]);
initIAHDR04(s[1199]);
initIAHDR05(s[1200]);
initIAHRM01(s[1201]);
initIAHRM02(s[1202]);
initIAHRM03(s[1203]);
initIAHRM04(s[1204]);
initIAHRM05(s[1205]);
initIAHDN01(s[1206]);
initIAHDN02(s[1207]);
initIAHDN03(s[1208]);
initIAHDN04(s[1209]);
initIAHDN05(s[1210]);
initIAT(s[1211]);
initIAP(s[1212]);
initIAA(s[1213]);
initIAA1WL(s[1214]);
initIAA1WU(s[1215]);
initIAA1WE(s[1216]);
initIAA1WR(s[1217]);
initIAA1FL(s[1218]);
initIAA1FU(s[1219]);
initIAA1FE(s[1220]);
initIAA1FR(s[1221]);
initIAA1ML(s[1222]);
initIAA1MU(s[1223]);
initIAA1ME(s[1224]);
initIAA1MR(s[1225]);
initIAA1YL(s[1226]);
initIAA1YU(s[1227]);
initIAA1YE(s[1228]);
initIAA1YR(s[1229]);
initIAA1OL(s[1230]);
initIAA1OU(s[1231]);
initIAA1OE(s[1232]);
initIAA1OR(s[1233]);
initIALY(s[1234]);
initIALM(s[1235]);
initIAT2(s[1236]);
initIAP2(s[1237]);
initIAA2(s[1238]);
initIAA2WL(s[1239]);
initIAA2WU(s[1240]);
initIAA2WE(s[1241]);
initIAA2WR(s[1242]);
initIAA2FL(s[1243]);
initIAA2FU(s[1244]);
initIAA2FE(s[1245]);
initIAA2FR(s[1246]);
initIAA2ML(s[1247]);
initIAA2MU(s[1248]);
initIAA2ME(s[1249]);
initIAA2MR(s[1250]);
initIAA2YL(s[1251]);
initIAA2YU(s[1252]);
initIAA2YE(s[1253]);
initIAA2YR(s[1254]);
initIAA2OL(s[1255]);
initIAA2OU(s[1256]);
initIAA2OE(s[1257]);
initIAA2OR(s[1258]);
initIALY2(s[1259]);
initIALM2(s[1260]);
initIAT3(s[1261]);
initIAP3(s[1262]);
initIAA3(s[1263]);
initIAA3WL(s[1264]);
initIAA3WU(s[1265]);
initIAA3WE(s[1266]);
initIAA3WR(s[1267]);
initIAA3FL(s[1268]);
initIAA3FU(s[1269]);
initIAA3FE(s[1270]);
initIAA3FR(s[1271]);
initIAA3ML(s[1272]);
initIAA3MU(s[1273]);
initIAA3ME(s[1274]);
initIAA3MR(s[1275]);
initIAA3YL(s[1276]);
initIAA3YU(s[1277]);
initIAA3YE(s[1278]);
initIAA3YR(s[1279]);
initIAA3OL(s[1280]);
initIAA3OU(s[1281]);
initIAA3OE(s[1282]);
initIAA3OR(s[1283]);
initIALY3(s[1284]);
initIALM3(s[1285]);
initIAT4(s[1286]);
initIAP4(s[1287]);
initIAA4(s[1288]);
initIAA4WL(s[1289]);
initIAA4WU(s[1290]);
initIAA4WE(s[1291]);
initIAA4WR(s[1292]);
initIAA4FL(s[1293]);
initIAA4FU(s[1294]);
initIAA4FE(s[1295]);
initIAA4FR(s[1296]);
initIAA4ML(s[1297]);
initIAA4MU(s[1298]);
initIAA4ME(s[1299]);
initIAA4MR(s[1300]);
initIAA4YL(s[1301]);
initIAA4YU(s[1302]);
initIAA4YE(s[1303]);
initIAA4YR(s[1304]);
initIAA4OL(s[1305]);
initIAA4OU(s[1306]);
initIAA4OE(s[1307]);
initIAA4OR(s[1308]);
initIALY4(s[1309]);
initIALM4(s[1310]);
initIAT5(s[1311]);
initIAP5(s[1312]);
initIAA5(s[1313]);
initIAA5WL(s[1314]);
initIAA5WU(s[1315]);
initIAA5WE(s[1316]);
initIAA5WR(s[1317]);
initIAA5FL(s[1318]);
initIAA5FU(s[1319]);
initIAA5FE(s[1320]);
initIAA5FR(s[1321]);
initIAA5ML(s[1322]);
initIAA5MU(s[1323]);
initIAA5ME(s[1324]);
initIAA5MR(s[1325]);
initIAA5YL(s[1326]);
initIAA5YU(s[1327]);
initIAA5YE(s[1328]);
initIAA5YR(s[1329]);
initIAA5OL(s[1330]);
initIAA5OU(s[1331]);
initIAA5OE(s[1332]);
initIAA5OR(s[1333]);
initIALY5(s[1334]);
initIALM5(s[1335]);
initIAT6(s[1336]);
initIAP6(s[1337]);
initIAA6(s[1338]);
initIAA6WL(s[1339]);
initIAA6WU(s[1340]);
initIAA6WE(s[1341]);
initIAA6WR(s[1342]);
initIAA6FL(s[1343]);
initIAA6FU(s[1344]);
initIAA6FE(s[1345]);
initIAA6FR(s[1346]);
initIAA6ML(s[1347]);
initIAA6MU(s[1348]);
initIAA6ME(s[1349]);
initIAA6MR(s[1350]);
initIAA6YL(s[1351]);
initIAA6YU(s[1352]);
initIAA6YE(s[1353]);
initIAA6YR(s[1354]);
initIAA6OL(s[1355]);
initIAA6OU(s[1356]);
initIAA6OE(s[1357]);
initIAA6OR(s[1358]);
initIALY6(s[1359]);
initIALM6(s[1360]);
initIAT7(s[1361]);
initIAP7(s[1362]);
initIAA7(s[1363]);
initIAA7WL(s[1364]);
initIAA7WU(s[1365]);
initIAA7WE(s[1366]);
initIAA7WR(s[1367]);
initIAA7FL(s[1368]);
initIAA7FU(s[1369]);
initIAA7FE(s[1370]);
initIAA7FR(s[1371]);
initIAA7ML(s[1372]);
initIAA7MU(s[1373]);
initIAA7ME(s[1374]);
initIAA7MR(s[1375]);
initIAA7YL(s[1376]);
initIAA7YU(s[1377]);
initIAA7YE(s[1378]);
initIAA7YR(s[1379]);
initIAA7OL(s[1380]);
initIAA7OU(s[1381]);
initIAA7OE(s[1382]);
initIAA7OR(s[1383]);
initIALY7(s[1384]);
initIALM7(s[1385]);
initIAT8(s[1386]);
initIAP8(s[1387]);
initIAA8(s[1388]);
initIAA8WL(s[1389]);
initIAA8WU(s[1390]);
initIAA8WE(s[1391]);
initIAA8WR(s[1392]);
initIAA8FL(s[1393]);
initIAA8FU(s[1394]);
initIAA8FE(s[1395]);
initIAA8FR(s[1396]);
initIAA8ML(s[1397]);
initIAA8MU(s[1398]);
initIAA8ME(s[1399]);
initIAA8MR(s[1400]);
initIAA8YL(s[1401]);
initIAA8YU(s[1402]);
initIAA8YE(s[1403]);
initIAA8YR(s[1404]);
initIAA8OL(s[1405]);
initIAA8OU(s[1406]);
initIAA8OE(s[1407]);
initIAA8OR(s[1408]);
initIALY8(s[1409]);
initIALM8(s[1410]);
initIAT9(s[1411]);
initIAP9(s[1412]);
initIAA9(s[1413]);
initIAA9WL(s[1414]);
initIAA9WU(s[1415]);
initIAA9WE(s[1416]);
initIAA9WR(s[1417]);
initIAA9FL(s[1418]);
initIAA9FU(s[1419]);
initIAA9FE(s[1420]);
initIAA9FR(s[1421]);
initIAA9ML(s[1422]);
initIAA9MU(s[1423]);
initIAA9ME(s[1424]);
initIAA9MR(s[1425]);
initIAA9YL(s[1426]);
initIAA9YU(s[1427]);
initIAA9YE(s[1428]);
initIAA9YR(s[1429]);
initIAA9OL(s[1430]);
initIAA9OU(s[1431]);
initIAA9OE(s[1432]);
initIAA9OR(s[1433]);
initIALY9(s[1434]);
initIALM9(s[1435]);
initIAT10(s[1436]);
initIAP10(s[1437]);
initIAA10(s[1438]);
initIAA10WL(s[1439]);
initIAA10WU(s[1440]);
initIAA10WE(s[1441]);
initIAA10WR(s[1442]);
initIAA10FL(s[1443]);
initIAA10FU(s[1444]);
initIAA10FE(s[1445]);
initIAA10FR(s[1446]);
initIAA10ML(s[1447]);
initIAA10MU(s[1448]);
initIAA10ME(s[1449]);
initIAA10MR(s[1450]);
initIAA10YL(s[1451]);
initIAA10YU(s[1452]);
initIAA10YE(s[1453]);
initIAA10YR(s[1454]);
initIAA10OL(s[1455]);
initIAA10OU(s[1456]);
initIAA10OE(s[1457]);
initIAA10OR(s[1458]);
initIALY10(s[1459]);
initIALM10(s[1460]);
initIAT11(s[1461]);
initIAP11(s[1462]);
initIAA11(s[1463]);
initIAA11WL(s[1464]);
initIAA11WU(s[1465]);
initIAA11WE(s[1466]);
initIAA11WR(s[1467]);
initIAA11FL(s[1468]);
initIAA11FU(s[1469]);
initIAA11FE(s[1470]);
initIAA11FR(s[1471]);
initIAA11ML(s[1472]);
initIAA11MU(s[1473]);
initIAA11ME(s[1474]);
initIAA11MR(s[1475]);
initIAA11YL(s[1476]);
initIAA11YU(s[1477]);
initIAA11YE(s[1478]);
initIAA11YR(s[1479]);
initIAA11OL(s[1480]);
initIAA11OU(s[1481]);
initIAA11OE(s[1482]);
initIAA11OR(s[1483]);
initIAB11(s[1484]);
initIABW11(s[1485]);
initIABM11(s[1486]);
initIAT12(s[1487]);
initIAP12(s[1488]);
initIAA12(s[1489]);
initIAA12WL(s[1490]);
initIAA12WU(s[1491]);
initIAA12WE(s[1492]);
initIAA12WR(s[1493]);
initIAA12FL(s[1494]);
initIAA12FU(s[1495]);
initIAA12FE(s[1496]);
initIAA12FR(s[1497]);
initIAA12ML(s[1498]);
initIAA12MU(s[1499]);
initIAA12ME(s[1500]);
initIAA12MR(s[1501]);
initIAA12YL(s[1502]);
initIAA12YU(s[1503]);
initIAA12YE(s[1504]);
initIAA12YR(s[1505]);
initIAA12OL(s[1506]);
initIAA12OU(s[1507]);
initIAA12OE(s[1508]);
initIAA12OR(s[1509]);
initIAB12(s[1510]);
initIABW12(s[1511]);
initIABM12(s[1512]);
initIAT13(s[1513]);
initIAP13(s[1514]);
initIAA13(s[1515]);
initIAA13WL(s[1516]);
initIAA13WU(s[1517]);
initIAA13WE(s[1518]);
initIAA13WR(s[1519]);
initIAA13FL(s[1520]);
initIAA13FU(s[1521]);
initIAA13FE(s[1522]);
initIAA13FR(s[1523]);
initIAA13ML(s[1524]);
initIAA13MU(s[1525]);
initIAA13ME(s[1526]);
initIAA13MR(s[1527]);
initIAA13YL(s[1528]);
initIAA13YU(s[1529]);
initIAA13YE(s[1530]);
initIAA13YR(s[1531]);
initIAA13OL(s[1532]);
initIAA13OU(s[1533]);
initIAA13OE(s[1534]);
initIAA13OR(s[1535]);
initIAB13(s[1536]);
initIABW13(s[1537]);
initIABM13(s[1538]);
initIAT14(s[1539]);
initIAP14(s[1540]);
initIAA14(s[1541]);
initIAA14WL(s[1542]);
initIAA14WU(s[1543]);
initIAA14WE(s[1544]);
initIAA14WR(s[1545]);
initIAA14FL(s[1546]);
initIAA14FU(s[1547]);
initIAA14FE(s[1548]);
initIAA14FR(s[1549]);
initIAA14ML(s[1550]);
initIAA14MU(s[1551]);
initIAA14ME(s[1552]);
initIAA14MR(s[1553]);
initIAA14YL(s[1554]);
initIAA14YU(s[1555]);
initIAA14YE(s[1556]);
initIAA14YR(s[1557]);
initIAA14OL(s[1558]);
initIAA14OU(s[1559]);
initIAA14OE(s[1560]);
initIAA14OR(s[1561]);
initIAB14(s[1562]);
initIABW14(s[1563]);
initIABM14(s[1564]);
initIAT15(s[1565]);
initIAP15(s[1566]);
initIAA15(s[1567]);
initIAA15WL(s[1568]);
initIAA15WU(s[1569]);
initIAA15WE(s[1570]);
initIAA15WR(s[1571]);
initIAA15FL(s[1572]);
initIAA15FU(s[1573]);
initIAA15FE(s[1574]);
initIAA15FR(s[1575]);
initIAA15ML(s[1576]);
initIAA15MU(s[1577]);
initIAA15ME(s[1578]);
initIAA15MR(s[1579]);
initIAA15YL(s[1580]);
initIAA15YU(s[1581]);
initIAA15YE(s[1582]);
initIAA15YR(s[1583]);
initIAA15OL(s[1584]);
initIAA15OU(s[1585]);
initIAA15OE(s[1586]);
initIAA15OR(s[1587]);
initIAB15(s[1588]);
initIABW15(s[1589]);
initIABM15(s[1590]);
initIAT16(s[1591]);
initIAP16(s[1592]);
initIAA16(s[1593]);
initIAA16WL(s[1594]);
initIAA16WU(s[1595]);
initIAA16WE(s[1596]);
initIAA16WR(s[1597]);
initIAA16FL(s[1598]);
initIAA16FU(s[1599]);
initIAA16FE(s[1600]);
initIAA16FR(s[1601]);
initIAA16ML(s[1602]);
initIAA16MU(s[1603]);
initIAA16ME(s[1604]);
initIAA16MR(s[1605]);
initIAA16YL(s[1606]);
initIAA16YU(s[1607]);
initIAA16YE(s[1608]);
initIAA16YR(s[1609]);
initIAA16OL(s[1610]);
initIAA16OU(s[1611]);
initIAA16OE(s[1612]);
initIAA16OR(s[1613]);
initIAB16(s[1614]);
initIABW16(s[1615]);
initIABM16(s[1616]);
initIAT17(s[1617]);
initIAP17(s[1618]);
initIAA17(s[1619]);
initIAA17WL(s[1620]);
initIAA17WU(s[1621]);
initIAA17WE(s[1622]);
initIAA17WR(s[1623]);
initIAA17FL(s[1624]);
initIAA17FU(s[1625]);
initIAA17FE(s[1626]);
initIAA17FR(s[1627]);
initIAA17ML(s[1628]);
initIAA17MU(s[1629]);
initIAA17ME(s[1630]);
initIAA17MR(s[1631]);
initIAA17YL(s[1632]);
initIAA17YU(s[1633]);
initIAA17YE(s[1634]);
initIAA17YR(s[1635]);
initIAA17OL(s[1636]);
initIAA17OU(s[1637]);
initIAA17OE(s[1638]);
initIAA17OR(s[1639]);
initIAB17(s[1640]);
initIABW17(s[1641]);
initIABM17(s[1642]);
initIAT18(s[1643]);
initIAP18(s[1644]);
initIAA18(s[1645]);
initIAA18WL(s[1646]);
initIAA18WU(s[1647]);
initIAA18WE(s[1648]);
initIAA18WR(s[1649]);
initIAA18FL(s[1650]);
initIAA18FU(s[1651]);
initIAA18FE(s[1652]);
initIAA18FR(s[1653]);
initIAA18ML(s[1654]);
initIAA18MU(s[1655]);
initIAA18ME(s[1656]);
initIAA18MR(s[1657]);
initIAA18YL(s[1658]);
initIAA18YU(s[1659]);
initIAA18YE(s[1660]);
initIAA18YR(s[1661]);
initIAA18OL(s[1662]);
initIAA18OU(s[1663]);
initIAA18OE(s[1664]);
initIAA18OR(s[1665]);
initIAB18(s[1666]);
initIABW18(s[1667]);
initIABM18(s[1668]);
initIAT19(s[1669]);
initIAP19(s[1670]);
initIAA19(s[1671]);
initIAA19WL(s[1672]);
initIAA19WU(s[1673]);
initIAA19WE(s[1674]);
initIAA19WR(s[1675]);
initIAA19FL(s[1676]);
initIAA19FU(s[1677]);
initIAA19FE(s[1678]);
initIAA19FR(s[1679]);
initIAA19ML(s[1680]);
initIAA19MU(s[1681]);
initIAA19ME(s[1682]);
initIAA19MR(s[1683]);
initIAA19YL(s[1684]);
initIAA19YU(s[1685]);
initIAA19YE(s[1686]);
initIAA19YR(s[1687]);
initIAA19OL(s[1688]);
initIAA19OU(s[1689]);
initIAA19OE(s[1690]);
initIAA19OR(s[1691]);
initIAB19(s[1692]);
initIABW19(s[1693]);
initIABM19(s[1694]);
initIAT20(s[1695]);
initIAP20(s[1696]);
initIAA20(s[1697]);
initIAA20WL(s[1698]);
initIAA20WU(s[1699]);
initIAA20WE(s[1700]);
initIAA20WR(s[1701]);
initIAA20FL(s[1702]);
initIAA20FU(s[1703]);
initIAA20FE(s[1704]);
initIAA20FR(s[1705]);
initIAA20ML(s[1706]);
initIAA20MU(s[1707]);
initIAA20ME(s[1708]);
initIAA20MR(s[1709]);
initIAA20YL(s[1710]);
initIAA20YU(s[1711]);
initIAA20YE(s[1712]);
initIAA20YR(s[1713]);
initIAA20OL(s[1714]);
initIAA20OU(s[1715]);
initIAA20OE(s[1716]);
initIAA20OR(s[1717]);
initIAB20(s[1718]);
initIABW20(s[1719]);
initIABM20(s[1720]);
initIAHDP01(s[1721]);
initIAHDP02(s[1722]);
initIAHDP03(s[1723]);
initIAHDP04(s[1724]);
initIAHPM01(s[1725]);
initIAHPM02(s[1726]);
initIAHPM03(s[1727]);
initIAHPM04(s[1728]);
initIAHPN01(s[1729]);
initIAHPN02(s[1730]);
initIAHPN03(s[1731]);
initIAHPN04(s[1732]);
initIAT21(s[1733]);
initIAP21(s[1734]);
initIAA21(s[1735]);
initIAA21WL(s[1736]);
initIAA21WU(s[1737]);
initIAA21WE(s[1738]);
initIAA21WR(s[1739]);
initIAA21FL(s[1740]);
initIAA21FU(s[1741]);
initIAA21FE(s[1742]);
initIAA21FR(s[1743]);
initIAA21ML(s[1744]);
initIAA21MU(s[1745]);
initIAA21ME(s[1746]);
initIAA21MR(s[1747]);
initIAA21YL(s[1748]);
initIAA21YU(s[1749]);
initIAA21YE(s[1750]);
initIAA21YR(s[1751]);
initIAA21OL(s[1752]);
initIAA21OU(s[1753]);
initIAA21OE(s[1754]);
initIAA21OR(s[1755]);
initIALY21(s[1756]);
initIALM21(s[1757]);
initIAT22(s[1758]);
initIAP22(s[1759]);
initIAA22(s[1760]);
initIAA22WL(s[1761]);
initIAA22WU(s[1762]);
initIAA22WE(s[1763]);
initIAA22WR(s[1764]);
initIAA22FL(s[1765]);
initIAA22FU(s[1766]);
initIAA22FE(s[1767]);
initIAA22FR(s[1768]);
initIAA22ML(s[1769]);
initIAA22MU(s[1770]);
initIAA22ME(s[1771]);
initIAA22MR(s[1772]);
initIAA22YL(s[1773]);
initIAA22YU(s[1774]);
initIAA22YE(s[1775]);
initIAA22YR(s[1776]);
initIAA22OL(s[1777]);
initIAA22OU(s[1778]);
initIAA22OE(s[1779]);
initIAA22OR(s[1780]);
initIALY22(s[1781]);
initIALM22(s[1782]);
initIAT23(s[1783]);
initIAP23(s[1784]);
initIAA23(s[1785]);
initIAA23WL(s[1786]);
initIAA23WU(s[1787]);
initIAA23WE(s[1788]);
initIAA23WR(s[1789]);
initIAA23FL(s[1790]);
initIAA23FU(s[1791]);
initIAA23FE(s[1792]);
initIAA23FR(s[1793]);
initIAA23ML(s[1794]);
initIAA23MU(s[1795]);
initIAA23ME(s[1796]);
initIAA23MR(s[1797]);
initIAA23YL(s[1798]);
initIAA23YU(s[1799]);
initIAA23YE(s[1800]);
initIAA23YR(s[1801]);
initIAA23OL(s[1802]);
initIAA23OU(s[1803]);
initIAA23OE(s[1804]);
initIAA23OR(s[1805]);
initIALY23(s[1806]);
initIALM23(s[1807]);
initIAT24(s[1808]);
initIAP24(s[1809]);
initIAA24(s[1810]);
initIAA24WL(s[1811]);
initIAA24WU(s[1812]);
initIAA24WE(s[1813]);
initIAA24WR(s[1814]);
initIAA24FL(s[1815]);
initIAA24FU(s[1816]);
initIAA24FE(s[1817]);
initIAA24FR(s[1818]);
initIAA24ML(s[1819]);
initIAA24MU(s[1820]);
initIAA24ME(s[1821]);
initIAA24MR(s[1822]);
initIAA24YL(s[1823]);
initIAA24YU(s[1824]);
initIAA24YE(s[1825]);
initIAA24YR(s[1826]);
initIAA24OL(s[1827]);
initIAA24OU(s[1828]);
initIAA24OE(s[1829]);
initIAA24OR(s[1830]);
initIALY24(s[1831]);
initIALM24(s[1832]);
initIAT25(s[1833]);
initIAP25(s[1834]);
initIAA25(s[1835]);
initIAA25WL(s[1836]);
initIAA25WU(s[1837]);
initIAA25WE(s[1838]);
initIAA25WR(s[1839]);
initIAA25FL(s[1840]);
initIAA25FU(s[1841]);
initIAA25FE(s[1842]);
initIAA25FR(s[1843]);
initIAA25ML(s[1844]);
initIAA25MU(s[1845]);
initIAA25ME(s[1846]);
initIAA25MR(s[1847]);
initIAA25YL(s[1848]);
initIAA25YU(s[1849]);
initIAA25YE(s[1850]);
initIAA25YR(s[1851]);
initIAA25OL(s[1852]);
initIAA25OU(s[1853]);
initIAA25OE(s[1854]);
initIAA25OR(s[1855]);
initIALY25(s[1856]);
initIALM25(s[1857]);
initIAT26(s[1858]);
initIAP26(s[1859]);
initIAA26(s[1860]);
initIAA26WL(s[1861]);
initIAA26WU(s[1862]);
initIAA26WE(s[1863]);
initIAA26WR(s[1864]);
initIAA26FL(s[1865]);
initIAA26FU(s[1866]);
initIAA26FE(s[1867]);
initIAA26FR(s[1868]);
initIAA26ML(s[1869]);
initIAA26MU(s[1870]);
initIAA26ME(s[1871]);
initIAA26MR(s[1872]);
initIAA26YL(s[1873]);
initIAA26YU(s[1874]);
initIAA26YE(s[1875]);
initIAA26YR(s[1876]);
initIAA26OL(s[1877]);
initIAA26OU(s[1878]);
initIAA26OE(s[1879]);
initIAA26OR(s[1880]);
initIALY26(s[1881]);
initIALM26(s[1882]);
initIAT27(s[1883]);
initIAP27(s[1884]);
initIAA27(s[1885]);
initIAA27WL(s[1886]);
initIAA27WU(s[1887]);
initIAA27WE(s[1888]);
initIAA27WR(s[1889]);
initIAA27FL(s[1890]);
initIAA27FU(s[1891]);
initIAA27FE(s[1892]);
initIAA27FR(s[1893]);
initIAA27ML(s[1894]);
initIAA27MU(s[1895]);
initIAA27ME(s[1896]);
initIAA27MR(s[1897]);
initIAA27YL(s[1898]);
initIAA27YU(s[1899]);
initIAA27YE(s[1900]);
initIAA27YR(s[1901]);
initIAA27OL(s[1902]);
initIAA27OU(s[1903]);
initIAA27OE(s[1904]);
initIAA27OR(s[1905]);
initIALY27(s[1906]);
initIALM27(s[1907]);
initIAT28(s[1908]);
initIAP28(s[1909]);
initIAA28(s[1910]);
initIAA28WL(s[1911]);
initIAA28WU(s[1912]);
initIAA28WE(s[1913]);
initIAA28WR(s[1914]);
initIAA28FL(s[1915]);
initIAA28FU(s[1916]);
initIAA28FE(s[1917]);
initIAA28FR(s[1918]);
initIAA28ML(s[1919]);
initIAA28MU(s[1920]);
initIAA28ME(s[1921]);
initIAA28MR(s[1922]);
initIAA28YL(s[1923]);
initIAA28YU(s[1924]);
initIAA28YE(s[1925]);
initIAA28YR(s[1926]);
initIAA28OL(s[1927]);
initIAA28OU(s[1928]);
initIAA28OE(s[1929]);
initIAA28OR(s[1930]);
initIALY28(s[1931]);
initIALM28(s[1932]);
initIAT29(s[1933]);
initIAP29(s[1934]);
initIAA29(s[1935]);
initIAA29WL(s[1936]);
initIAA29WU(s[1937]);
initIAA29WE(s[1938]);
initIAA29WR(s[1939]);
initIAA29FL(s[1940]);
initIAA29FU(s[1941]);
initIAA29FE(s[1942]);
initIAA29FR(s[1943]);
initIAA29ML(s[1944]);
initIAA29MU(s[1945]);
initIAA29ME(s[1946]);
initIAA29MR(s[1947]);
initIAA29YL(s[1948]);
initIAA29YU(s[1949]);
initIAA29YE(s[1950]);
initIAA29YR(s[1951]);
initIAA29OL(s[1952]);
initIAA29OU(s[1953]);
initIAA29OE(s[1954]);
initIAA29OR(s[1955]);
initIALY29(s[1956]);
initIALM29(s[1957]);
initIAT30(s[1958]);
initIAP30(s[1959]);
initIAA30(s[1960]);
initIAA30WL(s[1961]);
initIAA30WU(s[1962]);
initIAA30WE(s[1963]);
initIAA30WR(s[1964]);
initIAA30FL(s[1965]);
initIAA30FU(s[1966]);
initIAA30FE(s[1967]);
initIAA30FR(s[1968]);
initIAA30ML(s[1969]);
initIAA30MU(s[1970]);
initIAA30ME(s[1971]);
initIAA30MR(s[1972]);
initIAA30YL(s[1973]);
initIAA30YU(s[1974]);
initIAA30YE(s[1975]);
initIAA30YR(s[1976]);
initIAA30OL(s[1977]);
initIAA30OU(s[1978]);
initIAA30OE(s[1979]);
initIAA30OR(s[1980]);
initIALY30(s[1981]);
initIALM30(s[1982]);
initIAT31(s[1983]);
initIAP31(s[1984]);
initIAA31(s[1985]);
initIAA31WL(s[1986]);
initIAA31WU(s[1987]);
initIAA31WE(s[1988]);
initIAA31WR(s[1989]);
initIAA31FL(s[1990]);
initIAA31FU(s[1991]);
initIAA31FE(s[1992]);
initIAA31FR(s[1993]);
initIAA31ML(s[1994]);
initIAA31MU(s[1995]);
initIAA31ME(s[1996]);
initIAA31MR(s[1997]);
initIAA31YL(s[1998]);
initIAA31YU(s[1999]);
initIAA31YE(s[2000]);
initIAA31YR(s[2001]);
initIAA31OL(s[2002]);
initIAA31OU(s[2003]);
initIAA31OE(s[2004]);
initIAA31OR(s[2005]);
initIAB31(s[2006]);
initIABW31(s[2007]);
initIABM31(s[2008]);
initIAT32(s[2009]);
initIAP32(s[2010]);
initIAA32(s[2011]);
initIAA32WL(s[2012]);
initIAA32WU(s[2013]);
initIAA32WE(s[2014]);
initIAA32WR(s[2015]);
initIAA32FL(s[2016]);
initIAA32FU(s[2017]);
initIAA32FE(s[2018]);
initIAA32FR(s[2019]);
initIAA32ML(s[2020]);
initIAA32MU(s[2021]);
initIAA32ME(s[2022]);
initIAA32MR(s[2023]);
initIAA32YL(s[2024]);
initIAA32YU(s[2025]);
initIAA32YE(s[2026]);
initIAA32YR(s[2027]);
initIAA32OL(s[2028]);
initIAA32OU(s[2029]);
initIAA32OE(s[2030]);
initIAA32OR(s[2031]);
initIAB32(s[2032]);
initIABW32(s[2033]);
initIABM32(s[2034]);
initIAT33(s[2035]);
initIAP33(s[2036]);
initIAA33(s[2037]);
initIAA33WL(s[2038]);
initIAA33WU(s[2039]);
initIAA33WE(s[2040]);
initIAA33WR(s[2041]);
initIAA33FL(s[2042]);
initIAA33FU(s[2043]);
initIAA33FE(s[2044]);
initIAA33FR(s[2045]);
initIAA33ML(s[2046]);
initIAA33MU(s[2047]);
initIAA33ME(s[2048]);
initIAA33MR(s[2049]);
initIAA33YL(s[2050]);
initIAA33YU(s[2051]);
initIAA33YE(s[2052]);
initIAA33YR(s[2053]);
initIAA33OL(s[2054]);
initIAA33OU(s[2055]);
initIAA33OE(s[2056]);
initIAA33OR(s[2057]);
initIAB33(s[2058]);
initIABW33(s[2059]);
initIABM33(s[2060]);
initIAT34(s[2061]);
initIAP34(s[2062]);
initIAA34(s[2063]);
initIAA34WL(s[2064]);
initIAA34WU(s[2065]);
initIAA34WE(s[2066]);
initIAA34WR(s[2067]);
initIAA34FL(s[2068]);
initIAA34FU(s[2069]);
initIAA34FE(s[2070]);
initIAA34FR(s[2071]);
initIAA34ML(s[2072]);
initIAA34MU(s[2073]);
initIAA34ME(s[2074]);
initIAA34MR(s[2075]);
initIAA34YL(s[2076]);
initIAA34YU(s[2077]);
initIAA34YE(s[2078]);
initIAA34YR(s[2079]);
initIAA34OL(s[2080]);
initIAA34OU(s[2081]);
initIAA34OE(s[2082]);
initIAA34OR(s[2083]);
initIAB34(s[2084]);
initIABW34(s[2085]);
initIABM34(s[2086]);
initIAT35(s[2087]);
initIAP35(s[2088]);
initIAA35(s[2089]);
initIAA35WL(s[2090]);
initIAA35WU(s[2091]);
initIAA35WE(s[2092]);
initIAA35WR(s[2093]);
initIAA35FL(s[2094]);
initIAA35FU(s[2095]);
initIAA35FE(s[2096]);
initIAA35FR(s[2097]);
initIAA35ML(s[2098]);
initIAA35MU(s[2099]);
initIAA35ME(s[2100]);
initIAA35MR(s[2101]);
initIAA35YL(s[2102]);
initIAA35YU(s[2103]);
initIAA35YE(s[2104]);
initIAA35YR(s[2105]);
initIAA35OL(s[2106]);
initIAA35OU(s[2107]);
initIAA35OE(s[2108]);
initIAA35OR(s[2109]);
initIAB35(s[2110]);
initIABW35(s[2111]);
initIABM35(s[2112]);
initIAT36(s[2113]);
initIAP36(s[2114]);
initIAA36(s[2115]);
initIAA36WL(s[2116]);
initIAA36WU(s[2117]);
initIAA36WE(s[2118]);
initIAA36WR(s[2119]);
initIAA36FL(s[2120]);
initIAA36FU(s[2121]);
initIAA36FE(s[2122]);
initIAA36FR(s[2123]);
initIAA36ML(s[2124]);
initIAA36MU(s[2125]);
initIAA36ME(s[2126]);
initIAA36MR(s[2127]);
initIAA36YL(s[2128]);
initIAA36YU(s[2129]);
initIAA36YE(s[2130]);
initIAA36YR(s[2131]);
initIAA36OL(s[2132]);
initIAA36OU(s[2133]);
initIAA36OE(s[2134]);
initIAA36OR(s[2135]);
initIAB36(s[2136]);
initIABW36(s[2137]);
initIABM36(s[2138]);
initIAT37(s[2139]);
initIAP37(s[2140]);
initIAA37(s[2141]);
initIAA37WL(s[2142]);
initIAA37WU(s[2143]);
initIAA37WE(s[2144]);
initIAA37WR(s[2145]);
initIAA37FL(s[2146]);
initIAA37FU(s[2147]);
initIAA37FE(s[2148]);
initIAA37FR(s[2149]);
initIAA37ML(s[2150]);
initIAA37MU(s[2151]);
initIAA37ME(s[2152]);
initIAA37MR(s[2153]);
initIAA37YL(s[2154]);
initIAA37YU(s[2155]);
initIAA37YE(s[2156]);
initIAA37YR(s[2157]);
initIAA37OL(s[2158]);
initIAA37OU(s[2159]);
initIAA37OE(s[2160]);
initIAA37OR(s[2161]);
initIAB37(s[2162]);
initIABW37(s[2163]);
initIABM37(s[2164]);
initIAT38(s[2165]);
initIAP38(s[2166]);
initIAA38(s[2167]);
initIAA38WL(s[2168]);
initIAA38WU(s[2169]);
initIAA38WE(s[2170]);
initIAA38WR(s[2171]);
initIAA38FL(s[2172]);
initIAA38FU(s[2173]);
initIAA38FE(s[2174]);
initIAA38FR(s[2175]);
initIAA38ML(s[2176]);
initIAA38MU(s[2177]);
initIAA38ME(s[2178]);
initIAA38MR(s[2179]);
initIAA38YL(s[2180]);
initIAA38YU(s[2181]);
initIAA38YE(s[2182]);
initIAA38YR(s[2183]);
initIAA38OL(s[2184]);
initIAA38OU(s[2185]);
initIAA38OE(s[2186]);
initIAA38OR(s[2187]);
initIAB38(s[2188]);
initIABW38(s[2189]);
initIABM38(s[2190]);
initIAT39(s[2191]);
initIAP39(s[2192]);
initIAA39(s[2193]);
initIAA39WL(s[2194]);
initIAA39WU(s[2195]);
initIAA39WE(s[2196]);
initIAA39WR(s[2197]);
initIAA39FL(s[2198]);
initIAA39FU(s[2199]);
initIAA39FE(s[2200]);
initIAA39FR(s[2201]);
initIAA39ML(s[2202]);
initIAA39MU(s[2203]);
initIAA39ME(s[2204]);
initIAA39MR(s[2205]);
initIAA39YL(s[2206]);
initIAA39YU(s[2207]);
initIAA39YE(s[2208]);
initIAA39YR(s[2209]);
initIAA39OL(s[2210]);
initIAA39OU(s[2211]);
initIAA39OE(s[2212]);
initIAA39OR(s[2213]);
initIAB39(s[2214]);
initIABW39(s[2215]);
initIABM39(s[2216]);
initIAT40(s[2217]);
initIAP40(s[2218]);
initIAA40(s[2219]);
initIAA40WL(s[2220]);
initIAA40WU(s[2221]);
initIAA40WE(s[2222]);
initIAA40WR(s[2223]);
initIAA40FL(s[2224]);
initIAA40FU(s[2225]);
initIAA40FE(s[2226]);
initIAA40FR(s[2227]);
initIAA40ML(s[2228]);
initIAA40MU(s[2229]);
initIAA40ME(s[2230]);
initIAA40MR(s[2231]);
initIAA40YL(s[2232]);
initIAA40YU(s[2233]);
initIAA40YE(s[2234]);
initIAA40YR(s[2235]);
initIAA40OL(s[2236]);
initIAA40OU(s[2237]);
initIAA40OE(s[2238]);
initIAA40OR(s[2239]);
initIAB40(s[2240]);
initIABW40(s[2241]);
initIABM40(s[2242]);
initIABEB(s[2243]);
initIABER1(s[2244]);
initIABER2(s[2245]);
initIABER3(s[2246]);
initIABER4(s[2247]);
initIABRM01(s[2248]);
initIABRM02(s[2249]);
initIABRM03(s[2250]);
initIABRM04(s[2251]);
initIABEN1(s[2252]);
initIABEN2(s[2253]);
initIABEN3(s[2254]);
initIABEN4(s[2255]);
initIAT41(s[2256]);
initIAP41(s[2257]);
initIAA41(s[2258]);
initIAA41WL(s[2259]);
initIAA41WU(s[2260]);
initIAA41WE(s[2261]);
initIAA41WR(s[2262]);
initIAA41FL(s[2263]);
initIAA41FU(s[2264]);
initIAA41FE(s[2265]);
initIAA41FR(s[2266]);
initIAA41ML(s[2267]);
initIAA41MU(s[2268]);
initIAA41ME(s[2269]);
initIAA41MR(s[2270]);
initIAA41YL(s[2271]);
initIAA41YU(s[2272]);
initIAA41YE(s[2273]);
initIAA41YR(s[2274]);
initIAA41OL(s[2275]);
initIAA41OU(s[2276]);
initIAA41OE(s[2277]);
initIAA41OR(s[2278]);
initIALY41(s[2279]);
initIALM41(s[2280]);
initIAT42(s[2281]);
initIAP42(s[2282]);
initIAA42(s[2283]);
initIAA42WL(s[2284]);
initIAA42WU(s[2285]);
initIAA42WE(s[2286]);
initIAA42WR(s[2287]);
initIAA42FL(s[2288]);
initIAA42FU(s[2289]);
initIAA42FE(s[2290]);
initIAA42FR(s[2291]);
initIAA42ML(s[2292]);
initIAA42MU(s[2293]);
initIAA42ME(s[2294]);
initIAA42MR(s[2295]);
initIAA42YL(s[2296]);
initIAA42YU(s[2297]);
initIAA42YE(s[2298]);
initIAA42YR(s[2299]);
initIAA42OL(s[2300]);
initIAA42OU(s[2301]);
initIAA42OE(s[2302]);
initIAA42OR(s[2303]);
initIALY42(s[2304]);
initIALM42(s[2305]);
initIAT43(s[2306]);
initIAP43(s[2307]);
initIAA43(s[2308]);
initIAA43WL(s[2309]);
initIAA43WU(s[2310]);
initIAA43WE(s[2311]);
initIAA43WR(s[2312]);
initIAA43FL(s[2313]);
initIAA43FU(s[2314]);
initIAA43FE(s[2315]);
initIAA43FR(s[2316]);
initIAA43ML(s[2317]);
initIAA43MU(s[2318]);
initIAA43ME(s[2319]);
initIAA43MR(s[2320]);
initIAA43YL(s[2321]);
initIAA43YU(s[2322]);
initIAA43YE(s[2323]);
initIAA43YR(s[2324]);
initIAA43OL(s[2325]);
initIAA43OU(s[2326]);
initIAA43OE(s[2327]);
initIAA43OR(s[2328]);
initIALY43(s[2329]);
initIALM43(s[2330]);
initIAT44(s[2331]);
initIAP44(s[2332]);
initIAA44(s[2333]);
initIAA44WL(s[2334]);
initIAA44WU(s[2335]);
initIAA44WE(s[2336]);
initIAA44WR(s[2337]);
initIAA44FL(s[2338]);
initIAA44FU(s[2339]);
initIAA44FE(s[2340]);
initIAA44FR(s[2341]);
initIAA44ML(s[2342]);
initIAA44MU(s[2343]);
initIAA44ME(s[2344]);
initIAA44MR(s[2345]);
initIAA44YL(s[2346]);
initIAA44YU(s[2347]);
initIAA44YE(s[2348]);
initIAA44YR(s[2349]);
initIAA44OL(s[2350]);
initIAA44OU(s[2351]);
initIAA44OE(s[2352]);
initIAA44OR(s[2353]);
initIALY44(s[2354]);
initIALM44(s[2355]);
initIAT45(s[2356]);
initIAP45(s[2357]);
initIAA45(s[2358]);
initIAA45WL(s[2359]);
initIAA45WU(s[2360]);
initIAA45WE(s[2361]);
initIAA45WR(s[2362]);
initIAA45FL(s[2363]);
initIAA45FU(s[2364]);
initIAA45FE(s[2365]);
initIAA45FR(s[2366]);
initIAA45ML(s[2367]);
initIAA45MU(s[2368]);
initIAA45ME(s[2369]);
initIAA45MR(s[2370]);
initIAA45YL(s[2371]);
initIAA45YU(s[2372]);
initIAA45YE(s[2373]);
initIAA45YR(s[2374]);
initIAA45OL(s[2375]);
initIAA45OU(s[2376]);
initIAA45OE(s[2377]);
initIAA45OR(s[2378]);
initIALY45(s[2379]);
initIALM45(s[2380]);
initIAT46(s[2381]);
initIAP46(s[2382]);
initIAA46(s[2383]);
initIAA46WL(s[2384]);
initIAA46WU(s[2385]);
initIAA46WE(s[2386]);
initIAA46WR(s[2387]);
initIAA46FL(s[2388]);
initIAA46FU(s[2389]);
initIAA46FE(s[2390]);
initIAA46FR(s[2391]);
initIAA46ML(s[2392]);
initIAA46MU(s[2393]);
initIAA46ME(s[2394]);
initIAA46MR(s[2395]);
initIAA46YL(s[2396]);
initIAA46YU(s[2397]);
initIAA46YE(s[2398]);
initIAA46YR(s[2399]);
initIAA46OL(s[2400]);
initIAA46OU(s[2401]);
initIAA46OE(s[2402]);
initIAA46OR(s[2403]);
initIALY46(s[2404]);
initIALM46(s[2405]);
initIAT47(s[2406]);
initIAP47(s[2407]);
initIAA47(s[2408]);
initIAA47WL(s[2409]);
initIAA47WU(s[2410]);
initIAA47WE(s[2411]);
initIAA47WR(s[2412]);
initIAA47FL(s[2413]);
initIAA47FU(s[2414]);
initIAA47FE(s[2415]);
initIAA47FR(s[2416]);
initIAA47ML(s[2417]);
initIAA47MU(s[2418]);
initIAA47ME(s[2419]);
initIAA47MR(s[2420]);
initIAA47YL(s[2421]);
initIAA47YU(s[2422]);
initIAA47YE(s[2423]);
initIAA47YR(s[2424]);
initIAA47OL(s[2425]);
initIAA47OU(s[2426]);
initIAA47OE(s[2427]);
initIAA47OR(s[2428]);
initIALY47(s[2429]);
initIALM47(s[2430]);
initIAT48(s[2431]);
initIAP48(s[2432]);
initIAA48(s[2433]);
initIAA48WL(s[2434]);
initIAA48WU(s[2435]);
initIAA48WE(s[2436]);
initIAA48WR(s[2437]);
initIAA48FL(s[2438]);
initIAA48FU(s[2439]);
initIAA48FE(s[2440]);
initIAA48FR(s[2441]);
initIAA48ML(s[2442]);
initIAA48MU(s[2443]);
initIAA48ME(s[2444]);
initIAA48MR(s[2445]);
initIAA48YL(s[2446]);
initIAA48YU(s[2447]);
initIAA48YE(s[2448]);
initIAA48YR(s[2449]);
initIAA48OL(s[2450]);
initIAA48OU(s[2451]);
initIAA48OE(s[2452]);
initIAA48OR(s[2453]);
initIAB48(s[2454]);
initIABW48(s[2455]);
initIABM48(s[2456]);
initIAT49(s[2457]);
initIAP49(s[2458]);
initIAA49(s[2459]);
initIAA49WL(s[2460]);
initIAA49WU(s[2461]);
initIAA49WE(s[2462]);
initIAA49WR(s[2463]);
initIAA49FL(s[2464]);
initIAA49FU(s[2465]);
initIAA49FE(s[2466]);
initIAA49FR(s[2467]);
initIAA49ML(s[2468]);
initIAA49MU(s[2469]);
initIAA49ME(s[2470]);
initIAA49MR(s[2471]);
initIAA49YL(s[2472]);
initIAA49YU(s[2473]);
initIAA49YE(s[2474]);
initIAA49YR(s[2475]);
initIAA49OL(s[2476]);
initIAA49OU(s[2477]);
initIAA49OE(s[2478]);
initIAA49OR(s[2479]);
initIAB49(s[2480]);
initIABW49(s[2481]);
initIABM49(s[2482]);
initIAT50(s[2483]);
initIAP50(s[2484]);
initIAA50(s[2485]);
initIAA50WL(s[2486]);
initIAA50WU(s[2487]);
initIAA50WE(s[2488]);
initIAA50WR(s[2489]);
initIAA50FL(s[2490]);
initIAA50FU(s[2491]);
initIAA50FE(s[2492]);
initIAA50FR(s[2493]);
initIAA50ML(s[2494]);
initIAA50MU(s[2495]);
initIAA50ME(s[2496]);
initIAA50MR(s[2497]);
initIAA50YL(s[2498]);
initIAA50YU(s[2499]);
initIAA50YE(s[2500]);
initIAA50YR(s[2501]);
initIAA50OL(s[2502]);
initIAA50OU(s[2503]);
initIAA50OE(s[2504]);
initIAA50OR(s[2505]);
initIAB50(s[2506]);
initIABW50(s[2507]);
initIABM50(s[2508]);
initIAT51(s[2509]);
initIAP51(s[2510]);
initIAA51(s[2511]);
initIAA51WL(s[2512]);
initIAA51WU(s[2513]);
initIAA51WE(s[2514]);
initIAA51WR(s[2515]);
initIAA51FL(s[2516]);
initIAA51FU(s[2517]);
initIAA51FE(s[2518]);
initIAA51FR(s[2519]);
initIAA51ML(s[2520]);
initIAA51MU(s[2521]);
initIAA51ME(s[2522]);
initIAA51MR(s[2523]);
initIAA51YL(s[2524]);
initIAA51YU(s[2525]);
initIAA51YE(s[2526]);
initIAA51YR(s[2527]);
initIAA51OL(s[2528]);
initIAA51OU(s[2529]);
initIAA51OE(s[2530]);
initIAA51OR(s[2531]);
initIAB51(s[2532]);
initIABW51(s[2533]);
initIABM51(s[2534]);
initIAT52(s[2535]);
initIAP52(s[2536]);
initIAA52(s[2537]);
initIAA52WL(s[2538]);
initIAA52WU(s[2539]);
initIAA52WE(s[2540]);
initIAA52WR(s[2541]);
initIAA52FL(s[2542]);
initIAA52FU(s[2543]);
initIAA52FE(s[2544]);
initIAA52FR(s[2545]);
initIAA52ML(s[2546]);
initIAA52MU(s[2547]);
initIAA52ME(s[2548]);
initIAA52MR(s[2549]);
initIAA52YL(s[2550]);
initIAA52YU(s[2551]);
initIAA52YE(s[2552]);
initIAA52YR(s[2553]);
initIAA52OL(s[2554]);
initIAA52OU(s[2555]);
initIAA52OE(s[2556]);
initIAA52OR(s[2557]);
initIAB52(s[2558]);
initIABW52(s[2559]);
initIABM52(s[2560]);
initIAT53(s[2561]);
initIAP53(s[2562]);
initIAA53(s[2563]);
initIAA53WL(s[2564]);
initIAA53WU(s[2565]);
initIAA53WE(s[2566]);
initIAA53WR(s[2567]);
initIAA53FL(s[2568]);
initIAA53FU(s[2569]);
initIAA53FE(s[2570]);
initIAA53FR(s[2571]);
initIAA53ML(s[2572]);
initIAA53MU(s[2573]);
initIAA53ME(s[2574]);
initIAA53MR(s[2575]);
initIAA53YL(s[2576]);
initIAA53YU(s[2577]);
initIAA53YE(s[2578]);
initIAA53YR(s[2579]);
initIAA53OL(s[2580]);
initIAA53OU(s[2581]);
initIAA53OE(s[2582]);
initIAA53OR(s[2583]);
initIAB53(s[2584]);
initIABW53(s[2585]);
initIABM53(s[2586]);
initIAT54(s[2587]);
initIAP54(s[2588]);
initIAA54(s[2589]);
initIAA54WL(s[2590]);
initIAA54WU(s[2591]);
initIAA54WE(s[2592]);
initIAA54WR(s[2593]);
initIAA54FL(s[2594]);
initIAA54FU(s[2595]);
initIAA54FE(s[2596]);
initIAA54FR(s[2597]);
initIAA54ML(s[2598]);
initIAA54MU(s[2599]);
initIAA54ME(s[2600]);
initIAA54MR(s[2601]);
initIAA54YL(s[2602]);
initIAA54YU(s[2603]);
initIAA54YE(s[2604]);
initIAA54YR(s[2605]);
initIAA54OL(s[2606]);
initIAA54OU(s[2607]);
initIAA54OE(s[2608]);
initIAA54OR(s[2609]);
initIAB54(s[2610]);
initIABW54(s[2611]);
initIABM54(s[2612]);
initIABEP1(s[2613]);
initIABEP2(s[2614]);
initIABEP3(s[2615]);
initIABPM01(s[2616]);
initIABPM02(s[2617]);
initIABPM03(s[2618]);
initIABEPN1(s[2619]);
initIABEPN2(s[2620]);
initIABEPN3(s[2621]);
initIAT55(s[2622]);
initIAP55(s[2623]);
initIAA55(s[2624]);
initIAA55WL(s[2625]);
initIAA55WU(s[2626]);
initIAA55WE(s[2627]);
initIAA55WR(s[2628]);
initIAA55FL(s[2629]);
initIAA55FU(s[2630]);
initIAA55FE(s[2631]);
initIAA55FR(s[2632]);
initIAA55ML(s[2633]);
initIAA55MU(s[2634]);
initIAA55ME(s[2635]);
initIAA55MR(s[2636]);
initIAA55YL(s[2637]);
initIAA55YU(s[2638]);
initIAA55YE(s[2639]);
initIAA55YR(s[2640]);
initIAA55OL(s[2641]);
initIAA55OU(s[2642]);
initIAA55OE(s[2643]);
initIAA55OR(s[2644]);
initIALY55(s[2645]);
initIALM55(s[2646]);
initIAT56(s[2647]);
initIAP56(s[2648]);
initIAA56(s[2649]);
initIAA56WL(s[2650]);
initIAA56WU(s[2651]);
initIAA56WE(s[2652]);
initIAA56WR(s[2653]);
initIAA56FL(s[2654]);
initIAA56FU(s[2655]);
initIAA56FE(s[2656]);
initIAA56FR(s[2657]);
initIAA56ML(s[2658]);
initIAA56MU(s[2659]);
initIAA56ME(s[2660]);
initIAA56MR(s[2661]);
initIAA56YL(s[2662]);
initIAA56YU(s[2663]);
initIAA56YE(s[2664]);
initIAA56YR(s[2665]);
initIAA56OL(s[2666]);
initIAA56OU(s[2667]);
initIAA56OE(s[2668]);
initIAA56OR(s[2669]);
initIALY56(s[2670]);
initIALM56(s[2671]);
initIAT57(s[2672]);
initIAP57(s[2673]);
initIAA57(s[2674]);
initIAA57WL(s[2675]);
initIAA57WU(s[2676]);
initIAA57WE(s[2677]);
initIAA57WR(s[2678]);
initIAA57FL(s[2679]);
initIAA57FU(s[2680]);
initIAA57FE(s[2681]);
initIAA57FR(s[2682]);
initIAA57ML(s[2683]);
initIAA57MU(s[2684]);
initIAA57ME(s[2685]);
initIAA57MR(s[2686]);
initIAA57YL(s[2687]);
initIAA57YU(s[2688]);
initIAA57YE(s[2689]);
initIAA57YR(s[2690]);
initIAA57OL(s[2691]);
initIAA57OU(s[2692]);
initIAA57OE(s[2693]);
initIAA57OR(s[2694]);
initIALY57(s[2695]);
initIALM57(s[2696]);
initIAT58(s[2697]);
initIAP58(s[2698]);
initIAA58(s[2699]);
initIAA58WL(s[2700]);
initIAA58WU(s[2701]);
initIAA58WE(s[2702]);
initIAA58WR(s[2703]);
initIAA58FL(s[2704]);
initIAA58FU(s[2705]);
initIAA58FE(s[2706]);
initIAA58FR(s[2707]);
initIAA58ML(s[2708]);
initIAA58MU(s[2709]);
initIAA58ME(s[2710]);
initIAA58MR(s[2711]);
initIAA58YL(s[2712]);
initIAA58YU(s[2713]);
initIAA58YE(s[2714]);
initIAA58YR(s[2715]);
initIAA58OL(s[2716]);
initIAA58OU(s[2717]);
initIAA58OE(s[2718]);
initIAA58OR(s[2719]);
initIALY58(s[2720]);
initIALM58(s[2721]);
initIAT59(s[2722]);
initIAP59(s[2723]);
initIAA59(s[2724]);
initIAA59WL(s[2725]);
initIAA59WU(s[2726]);
initIAA59WE(s[2727]);
initIAA59WR(s[2728]);
initIAA59FL(s[2729]);
initIAA59FU(s[2730]);
initIAA59FE(s[2731]);
initIAA59FR(s[2732]);
initIAA59ML(s[2733]);
initIAA59MU(s[2734]);
initIAA59ME(s[2735]);
initIAA59MR(s[2736]);
initIAA59YL(s[2737]);
initIAA59YU(s[2738]);
initIAA59YE(s[2739]);
initIAA59YR(s[2740]);
initIAA59OL(s[2741]);
initIAA59OU(s[2742]);
initIAA59OE(s[2743]);
initIAA59OR(s[2744]);
initIALY59(s[2745]);
initIALM59(s[2746]);
initIAT60(s[2747]);
initIAP60(s[2748]);
initIAA60(s[2749]);
initIAA60WL(s[2750]);
initIAA60WU(s[2751]);
initIAA60WE(s[2752]);
initIAA60WR(s[2753]);
initIAA60FL(s[2754]);
initIAA60FU(s[2755]);
initIAA60FE(s[2756]);
initIAA60FR(s[2757]);
initIAA60ML(s[2758]);
initIAA60MU(s[2759]);
initIAA60ME(s[2760]);
initIAA60MR(s[2761]);
initIAA60YL(s[2762]);
initIAA60YU(s[2763]);
initIAA60YE(s[2764]);
initIAA60YR(s[2765]);
initIAA60OL(s[2766]);
initIAA60OU(s[2767]);
initIAA60OE(s[2768]);
initIAA60OR(s[2769]);
initIALY60(s[2770]);
initIALM60(s[2771]);
initIAT61(s[2772]);
initIAP61(s[2773]);
initIAA61(s[2774]);
initIAA61WL(s[2775]);
initIAA61WU(s[2776]);
initIAA61WE(s[2777]);
initIAA61WR(s[2778]);
initIAA61FL(s[2779]);
initIAA61FU(s[2780]);
initIAA61FE(s[2781]);
initIAA61FR(s[2782]);
initIAA61ML(s[2783]);
initIAA61MU(s[2784]);
initIAA61ME(s[2785]);
initIAA61MR(s[2786]);
initIAA61YL(s[2787]);
initIAA61YU(s[2788]);
initIAA61YE(s[2789]);
initIAA61YR(s[2790]);
initIAA61OL(s[2791]);
initIAA61OU(s[2792]);
initIAA61OE(s[2793]);
initIAA61OR(s[2794]);
initIALY61(s[2795]);
initIALM61(s[2796]);
initIAT62(s[2797]);
initIAP62(s[2798]);
initIAA62(s[2799]);
initIAA62WL(s[2800]);
initIAA62WU(s[2801]);
initIAA62WE(s[2802]);
initIAA62WR(s[2803]);
initIAA62FL(s[2804]);
initIAA62FU(s[2805]);
initIAA62FE(s[2806]);
initIAA62FR(s[2807]);
initIAA62ML(s[2808]);
initIAA62MU(s[2809]);
initIAA62ME(s[2810]);
initIAA62MR(s[2811]);
initIAA62YL(s[2812]);
initIAA62YU(s[2813]);
initIAA62YE(s[2814]);
initIAA62YR(s[2815]);
initIAA62OL(s[2816]);
initIAA62OU(s[2817]);
initIAA62OE(s[2818]);
initIAA62OR(s[2819]);
initIAB62(s[2820]);
initIABW62(s[2821]);
initIABM62(s[2822]);
initIAT63(s[2823]);
initIAP63(s[2824]);
initIAA63(s[2825]);
initIAA63WL(s[2826]);
initIAA63WU(s[2827]);
initIAA63WE(s[2828]);
initIAA63WR(s[2829]);
initIAA63FL(s[2830]);
initIAA63FU(s[2831]);
initIAA63FE(s[2832]);
initIAA63FR(s[2833]);
initIAA63ML(s[2834]);
initIAA63MU(s[2835]);
initIAA63ME(s[2836]);
initIAA63MR(s[2837]);
initIAA63YL(s[2838]);
initIAA63YU(s[2839]);
initIAA63YE(s[2840]);
initIAA63YR(s[2841]);
initIAA63OL(s[2842]);
initIAA63OU(s[2843]);
initIAA63OE(s[2844]);
initIAA63OR(s[2845]);
initIAB63(s[2846]);
initIABW63(s[2847]);
initIABM63(s[2848]);
initIAT64(s[2849]);
initIAP64(s[2850]);
initIAA64(s[2851]);
initIAA64WL(s[2852]);
initIAA64WU(s[2853]);
initIAA64WE(s[2854]);
initIAA64WR(s[2855]);
initIAA64FL(s[2856]);
initIAA64FU(s[2857]);
initIAA64FE(s[2858]);
initIAA64FR(s[2859]);
initIAA64ML(s[2860]);
initIAA64MU(s[2861]);
initIAA64ME(s[2862]);
initIAA64MR(s[2863]);
initIAA64YL(s[2864]);
initIAA64YU(s[2865]);
initIAA64YE(s[2866]);
initIAA64YR(s[2867]);
initIAA64OL(s[2868]);
initIAA64OU(s[2869]);
initIAA64OE(s[2870]);
initIAA64OR(s[2871]);
initIAB64(s[2872]);
initIABW64(s[2873]);
initIABM64(s[2874]);
initIAT65(s[2875]);
initIAP65(s[2876]);
initIAA65(s[2877]);
initIAA65WL(s[2878]);
initIAA65WU(s[2879]);
initIAA65WE(s[2880]);
initIAA65WR(s[2881]);
initIAA65FL(s[2882]);
initIAA65FU(s[2883]);
initIAA65FE(s[2884]);
initIAA65FR(s[2885]);
initIAA65ML(s[2886]);
initIAA65MU(s[2887]);
initIAA65ME(s[2888]);
initIAA65MR(s[2889]);
initIAA65YL(s[2890]);
initIAA65YU(s[2891]);
initIAA65YE(s[2892]);
initIAA65YR(s[2893]);
initIAA65OL(s[2894]);
initIAA65OU(s[2895]);
initIAA65OE(s[2896]);
initIAA65OR(s[2897]);
initIAB65(s[2898]);
initIABW65(s[2899]);
initIABM65(s[2900]);
initIAT66(s[2901]);
initIAP66(s[2902]);
initIAA66(s[2903]);
initIAA66WL(s[2904]);
initIAA66WU(s[2905]);
initIAA66WE(s[2906]);
initIAA66WR(s[2907]);
initIAA66FL(s[2908]);
initIAA66FU(s[2909]);
initIAA66FE(s[2910]);
initIAA66FR(s[2911]);
initIAA66ML(s[2912]);
initIAA66MU(s[2913]);
initIAA66ME(s[2914]);
initIAA66MR(s[2915]);
initIAA66YL(s[2916]);
initIAA66YU(s[2917]);
initIAA66YE(s[2918]);
initIAA66YR(s[2919]);
initIAA66OL(s[2920]);
initIAA66OU(s[2921]);
initIAA66OE(s[2922]);
initIAA66OR(s[2923]);
initIAB66(s[2924]);
initIABW66(s[2925]);
initIABM66(s[2926]);
initIAT67(s[2927]);
initIAP67(s[2928]);
initIAA67(s[2929]);
initIAA67WL(s[2930]);
initIAA67WU(s[2931]);
initIAA67WE(s[2932]);
initIAA67WR(s[2933]);
initIAA67FL(s[2934]);
initIAA67FU(s[2935]);
initIAA67FE(s[2936]);
initIAA67FR(s[2937]);
initIAA67ML(s[2938]);
initIAA67MU(s[2939]);
initIAA67ME(s[2940]);
initIAA67MR(s[2941]);
initIAA67YL(s[2942]);
initIAA67YU(s[2943]);
initIAA67YE(s[2944]);
initIAA67YR(s[2945]);
initIAA67OL(s[2946]);
initIAA67OU(s[2947]);
initIAA67OE(s[2948]);
initIAA67OR(s[2949]);
initIAB67(s[2950]);
initIABW67(s[2951]);
initIABM67(s[2952]);
initIAT68(s[2953]);
initIAP68(s[2954]);
initIAA68(s[2955]);
initIAA68WL(s[2956]);
initIAA68WU(s[2957]);
initIAA68WE(s[2958]);
initIAA68WR(s[2959]);
initIAA68FL(s[2960]);
initIAA68FU(s[2961]);
initIAA68FE(s[2962]);
initIAA68FR(s[2963]);
initIAA68ML(s[2964]);
initIAA68MU(s[2965]);
initIAA68ME(s[2966]);
initIAA68MR(s[2967]);
initIAA68YL(s[2968]);
initIAA68YU(s[2969]);
initIAA68YE(s[2970]);
initIAA68YR(s[2971]);
initIAA68OL(s[2972]);
initIAA68OU(s[2973]);
initIAA68OE(s[2974]);
initIAA68OR(s[2975]);
initIAB68(s[2976]);
initIABW68(s[2977]);
initIABM68(s[2978]);
initIAFUEL(s[2979]);
initIASI01(s[2980]);
initIASI02(s[2981]);
initIASI03(s[2982]);
initIASI04(s[2983]);
initIASI05(s[2984]);
initIASI06(s[2985]);
initIASI07(s[2986]);
initIASI08(s[2987]);
initIASI09(s[2988]);
initIASI10(s[2989]);
initIASI11(s[2990]);
initIASAVA(s[2991]);
initIASAL(s[2992]);
initIASAU(s[2993]);
initIASAE(s[2994]);
initIASAR(s[2995]);
initIASINT(s[2996]);
initIASINTL(s[2997]);
initIASINTU(s[2998]);
initIASINTE(s[2999]);
initIASINTR(s[3000]);
initIANS(s[3001]);
initIANSL(s[3002]);
initIANSU(s[3003]);
initIANSE(s[3004]);
initIANSR(s[3005]);
initIANSI(s[3006]);
initIANSIL(s[3007]);
initIANSIU(s[3008]);
initIANSIE(s[3009]);
initIANSIR(s[3010]);
initIANPB(s[3011]);
initIANPBL(s[3012]);
initIANPBU(s[3013]);
initIANPBE(s[3014]);
initIANPBR(s[3015]);
initIANPBP(s[3016]);
initIANPL(s[3017]);
initIANPU(s[3018]);
initIANPE(s[3019]);
initIANPR(s[3020]);
initIATI(s[3021]);
initIATIL(s[3022]);
initIATIU(s[3023]);
initIATIE(s[3024]);
initIATIR(s[3025]);
initIATII(s[3026]);
initIATIIL(s[3027]);
initIATIIU(s[3028]);
initIATIIE(s[3029]);
initIATIIR(s[3030]);
initIAISA1(s[3031]);
initIAISA2(s[3032]);
initIAISA3(s[3033]);
initIACISA(s[3034]);
initIACIL(s[3035]);
initIACIU(s[3036]);
initIACIE(s[3037]);
initIACIR(s[3038]);
initIALISA(s[3039]);
initIALISL(s[3040]);
initIALISU(s[3041]);
initIALISE(s[3042]);
initIALISR(s[3043]);
initIASISA(s[3044]);
initIASISL(s[3045]);
initIASISU(s[3046]);
initIASISE(s[3047]);
initIASISR(s[3048]);
initIAISAD(s[3049]);
initIAISL(s[3050]);
initIAISU(s[3051]);
initIAISE(s[3052]);
initIAISR(s[3053]);
initIAIP(s[3054]);
initIAIPL(s[3055]);
initIAIPU(s[3056]);
initIAIPE(s[3057]);
initIAIPR(s[3058]);
initIAIPI(s[3059]);
initIAIPIL(s[3060]);
initIAIPIU(s[3061]);
initIAIPIE(s[3062]);
initIAIPIR(s[3063]);
initIASSS(s[3064]);
initIASSL(s[3065]);
initIASSU(s[3066]);
initIASSE(s[3067]);
initIASSR(s[3068]);
initIASSSI(s[3069]);
initIASSIL(s[3070]);
initIASSIU(s[3071]);
initIASSIE(s[3072]);
initIASSIR(s[3073]);
initIASHTY1(s[3074]);
initIASHTY2(s[3075]);
initIASHTY3(s[3076]);
initIASHTY4(s[3077]);
initIADENAT(s[3078]);
initIADEMUT(s[3079]);
initIAUIT(s[3080]);
initIAUIL(s[3081]);
initIAUIU(s[3082]);
initIAUIE(s[3083]);
initIAUIR(s[3084]);
initIAUITI(s[3085]);
initIAUIIL(s[3086]);
initIAUIIU(s[3087]);
initIAUIIE(s[3088]);
initIAUIIR(s[3089]);
initIABG(s[3090]);
initIABGL(s[3091]);
initIABGU(s[3092]);
initIABGE(s[3093]);
initIABGR(s[3094]);
initIABGI(s[3095]);
initIABGIL(s[3096]);
initIABGIU(s[3097]);
initIABGIE(s[3098]);
initIABGIR(s[3099]);
initIASIO(s[3100]);
initIASIOL(s[3101]);
initIASIOU(s[3102]);
initIASIOE(s[3103]);
initIASIOR(s[3104]);
initIASIOI(s[3105]);
initIASIL(s[3106]);
initIASIU(s[3107]);
initIASIE(s[3108]);
initIASIR(s[3109]);
initIADEN(s[3110]);
initIADEM(s[3111]);
initIALI(s[3112]);
initIALIW(s[3113]);
initIALIYA(s[3114]);
initIALIYL(s[3115]);
initIALIYU(s[3116]);
initIALIYE(s[3117]);
initIALIYR(s[3118]);
initIALIPA(s[3119]);
initIALIL(s[3120]);
initIALIU(s[3121]);
initIALIE(s[3122]);
initIALIR(s[3123]);
initIASC(s[3124]);
initIASCA(s[3125]);
initIASCL(s[3126]);
initIASCU(s[3127]);
initIASCE(s[3128]);
initIASCR(s[3129]);
initIADOC(s[3130]);
initIAINTA(s[3131]);
initIAPROP1(s[3132]);
initIAPROP2(s[3133]);
initIAPROP3(s[3134]);
initIAPROP4(s[3135]);
initIAPROP5(s[3136]);
initIAHOME(s[3137]);
initIAHOL(s[3138]);
initIAHOU(s[3139]);
initIAHOE(s[3140]);
initIAHOR(s[3141]);
initIAIR(s[3142]);
initIAIRA(s[3143]);
initIAIRL(s[3144]);
initIAIRU(s[3145]);
initIAIRE(s[3146]);
initIAIRR(s[3147]);
initIAFBPS(s[3148]);
initIAFBPSL(s[3149]);
initIAFBPSU(s[3150]);
initIAFBPSE(s[3151]);
initIAFBPSR(s[3152]);
initIAFBPR(s[3153]);
initIAFBA(s[3154]);
initIAFBL(s[3155]);
initIAFBU(s[3156]);
initIAFBE(s[3157]);
initIAFBR(s[3158]);
initIAOASA(s[3159]);
initIAOAL(s[3160]);
initIAOAU(s[3161]);
initIAOAE(s[3162]);
initIAOAR(s[3163]);
initIAREGP(s[3164]);
initIAPY(s[3165]);
initIAPYR(s[3166]);
initIAPYRC(s[3167]);
initIAREGO(s[3168]);
initIAREGM(s[3169]);
initIAREGWL(s[3170]);
initIAREGWU(s[3171]);
initIAREGWE(s[3172]);
initIAREGWR(s[3173]);
initIAREGFL(s[3174]);
initIAREGFU(s[3175]);
initIAREGFE(s[3176]);
initIAREGFR(s[3177]);
initIAREGML(s[3178]);
initIAREGMU(s[3179]);
initIAREGME(s[3180]);
initIAREGMR(s[3181]);
initIAREGYL(s[3182]);
initIAREGYU(s[3183]);
initIAREGYE(s[3184]);
initIAREGYR(s[3185]);
initIAREGOL(s[3186]);
initIAREGOU(s[3187]);
initIAREGOE(s[3188]);
initIAREGOR(s[3189]);
initIAOTHP(s[3190]);
initIAPY2(s[3191]);
initIAPYR2(s[3192]);
initIAPYR2C(s[3193]);
initIAREGO2(s[3194]);
initIAREGM2(s[3195]);
initIARE2WL(s[3196]);
initIARE2WU(s[3197]);
initIARE2WE(s[3198]);
initIARE2WR(s[3199]);
initIARE2FL(s[3200]);
initIARE2FU(s[3201]);
initIARE2FE(s[3202]);
initIARE2FR(s[3203]);
initIARE2ML(s[3204]);
initIARE2MU(s[3205]);
initIARE2ME(s[3206]);
initIARE2MR(s[3207]);
initIARE2YL(s[3208]);
initIARE2YU(s[3209]);
initIARE2YE(s[3210]);
initIARE2YR(s[3211]);
initIARE2OL(s[3212]);
initIARE2OU(s[3213]);
initIARE2OE(s[3214]);
initIARE2OR(s[3215]);
initIAOTHP2(s[3216]);
initIAPY3(s[3217]);
initIAPYR3(s[3218]);
initIAREGO3(s[3219]);
initIAREGM3(s[3220]);
initIARE3WL(s[3221]);
initIARE3WU(s[3222]);
initIARE3WE(s[3223]);
initIARE3WR(s[3224]);
initIARE3FL(s[3225]);
initIARE3FU(s[3226]);
initIARE3FE(s[3227]);
initIARE3FR(s[3228]);
initIARE3ML(s[3229]);
initIARE3MU(s[3230]);
initIARE3ME(s[3231]);
initIARE3MR(s[3232]);
initIARE3YL(s[3233]);
initIARE3YU(s[3234]);
initIARE3YE(s[3235]);
initIARE3YR(s[3236]);
initIARE3OL(s[3237]);
initIARE3OU(s[3238]);
initIARE3OE(s[3239]);
initIARE3OR(s[3240]);
initIAOTHP3(s[3241]);
initIAPAR(s[3242]);
initIAPS(s[3243]);
initIAPR(s[3244]);
initIAPRC(s[3245]);
initIAPF(s[3246]);
initIAPAM2(s[3247]);
initIAPA2WL(s[3248]);
initIAPA2WU(s[3249]);
initIAPA2WE(s[3250]);
initIAPA2WR(s[3251]);
initIAPA2FL(s[3252]);
initIAPA2FU(s[3253]);
initIAPA2FE(s[3254]);
initIAPA2FR(s[3255]);
initIAPA2ML(s[3256]);
initIAPA2MU(s[3257]);
initIAPA2ME(s[3258]);
initIAPA2MR(s[3259]);
initIAPA2YL(s[3260]);
initIAPA2YU(s[3261]);
initIAPA2YE(s[3262]);
initIAPA2YR(s[3263]);
initIAPA2OL(s[3264]);
initIAPA2OU(s[3265]);
initIAPA2OE(s[3266]);
initIAPA2OR(s[3267]);
initIAMRP(s[3268]);
initIAPK1(s[3269]);
initIAPK2(s[3270]);
initIAPK3(s[3271]);
initIAPK4(s[3272]);
initIAPK5(s[3273]);
initIAPKM01(s[3274]);
initIAPKM02(s[3275]);
initIAPKM03(s[3276]);
initIAPKM04(s[3277]);
initIAPKM05(s[3278]);
initIAPKM1(s[3279]);
initIAPKM2(s[3280]);
initIAPKM3(s[3281]);
initIAPKM4(s[3282]);
initIAPKM5(s[3283]);
initIAPKM6(s[3284]);
initIAPKM7(s[3285]);
initIAPKM8(s[3286]);
initIAPK1L(s[3287]);
initIAPK1U(s[3288]);
initIAPK1E(s[3289]);
initIAPK1R(s[3290]);
initIAPK2L(s[3291]);
initIAPK2U(s[3292]);
initIAPK2E(s[3293]);
initIAPK2R(s[3294]);
initIAPK3L(s[3295]);
initIAPK3U(s[3296]);
initIAPK3E(s[3297]);
initIAPK3R(s[3298]);
initIAPK4L(s[3299]);
initIAPK4U(s[3300]);
initIAPK4E(s[3301]);
initIAPK4R(s[3302]);
initIAPK5L(s[3303]);
initIAPK5U(s[3304]);
initIAPK5E(s[3305]);
initIAPK5R(s[3306]);
initIAPK6L(s[3307]);
initIAPK6U(s[3308]);
initIAPK6E(s[3309]);
initIAPK6R(s[3310]);
initIAPK7L(s[3311]);
initIAPK7U(s[3312]);
initIAPK7E(s[3313]);
initIAPK7R(s[3314]);
initIAPK8L(s[3315]);
initIAPK8U(s[3316]);
initIAPK8E(s[3317]);
initIAPK8R(s[3318]);
initIADEBT(s[3319]);
initIADEBM(s[3320]);
initIADEL(s[3321]);
initIADEU(s[3322]);
initIADEE(s[3323]);
initIADER(s[3324]);
initIAOWE(s[3325]);
initIAOWEM(s[3326]);
initIAOWEL(s[3327]);
initIAOWEU(s[3328]);
initIAOWEE(s[3329]);
initIAOWER(s[3330]);
initIAREGR(s[3331]);
initIAREGRP(s[3332]);
initIAREP(s[3333]);
initIAREWL(s[3334]);
initIAREWU(s[3335]);
initIAREWE(s[3336]);
initIAREWR(s[3337]);
initIAREFL(s[3338]);
initIAREFU(s[3339]);
initIAREFE(s[3340]);
initIAREFR(s[3341]);
initIAREML(s[3342]);
initIAREMU(s[3343]);
initIAREME(s[3344]);
initIAREMR(s[3345]);
initIAREYL(s[3346]);
initIAREYU(s[3347]);
initIAREYE(s[3348]);
initIAREYR(s[3349]);
initIAREOL(s[3350]);
initIAREOU(s[3351]);
initIAREOE(s[3352]);
initIAREOR(s[3353]);
initIALOAN1(s[3354]);
initIALOAN2(s[3355]);
initIALOAN3(s[3356]);
initIALOAN4(s[3357]);
initIALOAM(s[3358]);
initIALOL(s[3359]);
initIALOU(s[3360]);
initIALOE(s[3361]);
initIALOR(s[3362]);
initIALREP(s[3363]);
initIALRE(s[3364]);
initIALRWL(s[3365]);
initIALRWU(s[3366]);
initIALRWE(s[3367]);
initIALRWR(s[3368]);
initIALRFL(s[3369]);
initIALRFU(s[3370]);
initIALRFE(s[3371]);
initIALRFR(s[3372]);
initIALRML(s[3373]);
initIALRMU(s[3374]);
initIALRME(s[3375]);
initIALRMR(s[3376]);
initIALRYL(s[3377]);
initIALRYU(s[3378]);
initIALRYE(s[3379]);
initIALRYR(s[3380]);
initIALROL(s[3381]);
initIALROU(s[3382]);
initIALROE(s[3383]);
initIALROR(s[3384]);
initIAJNT(s[3385]);
initIAAM(s[3386]);
initIAAML(s[3387]);
initIAAMU(s[3388]);
initIAAME(s[3389]);
initIAAMR(s[3390]);
initIAFCON(s[3391]);
initIAORGF(s[3392]);
initIAORGFC(s[3393]);
initIAFIND(s[3394]);
initIAFINDC(s[3395]);
initASKREC(s[3396]);
initIAPYW(s[3397]);
initIAEAN(s[3398]);
initIAEAL(s[3399]);
initIAEAU(s[3400]);
initIAEAE(s[3401]);
initIAEAR(s[3402]);
initIAPYW02(s[3403]);
initIAEAN02(s[3404]);
initIAEA2L(s[3405]);
initIAEA2U(s[3406]);
initIAEA2E(s[3407]);
initIAEA2R(s[3408]);
initIAPYW03(s[3409]);
initIAEAN03(s[3410]);
initIAEA3L(s[3411]);
initIAEA3U(s[3412]);
initIAEA3E(s[3413]);
initIAEA3R(s[3414]);
initIAPYW04(s[3415]);
initIAEAN04(s[3416]);
initIAEA4L(s[3417]);
initIAEA4U(s[3418]);
initIAEA4E(s[3419]);
initIAEA4R(s[3420]);
initIAPYW05(s[3421]);
initIAEAN05(s[3422]);
initIAEA5L(s[3423]);
initIAEA5U(s[3424]);
initIAEA5E(s[3425]);
initIAEA5R(s[3426]);
initIAPYW06(s[3427]);
initIAEAN06(s[3428]);
initIAEA6L(s[3429]);
initIAEA6U(s[3430]);
initIAEA6E(s[3431]);
initIAEA6R(s[3432]);
initIAPYW07(s[3433]);
initIAEAN07(s[3434]);
initIAEA7L(s[3435]);
initIAEA7U(s[3436]);
initIAEA7E(s[3437]);
initIAEA7R(s[3438]);
initIAPYW08(s[3439]);
initIAEAN08(s[3440]);
initIAEA8L(s[3441]);
initIAEA8U(s[3442]);
initIAEA8E(s[3443]);
initIAEA8R(s[3444]);
initIAPYW09(s[3445]);
initIAEAN09(s[3446]);
initIAEA9L(s[3447]);
initIAEA9U(s[3448]);
initIAEA9E(s[3449]);
initIAEA9R(s[3450]);
initIAPYW10(s[3451]);
initIAEAN10(s[3452]);
initIAEA10L(s[3453]);
initIAEA10U(s[3454]);
initIAEA10E(s[3455]);
initIAEA10R(s[3456]);
initIAREC(s[3457]);
initIAREL(s[3458]);
initIAREU(s[3459]);
initIAREE(s[3460]);
initIARER(s[3461]);
initIAOM(s[3462]);
initIAOMM(s[3463]);
initIAOML(s[3464]);
initIAOMU(s[3465]);
initIAOME(s[3466]);
initIAOMR(s[3467]);
initHOASK(s[3468]);
initHOELI(s[3469]);
initHOWHO(s[3470]);
initHOWHN01(s[3471]);
initHOWHN02(s[3472]);
initHOWHN03(s[3473]);
initHOWHN04(s[3474]);
initHOBAS(s[3475]);
initHOBP(s[3476]);
initHOBA(s[3477]);
initHOBWL(s[3478]);
initHOBWU(s[3479]);
initHOBWE(s[3480]);
initHOBWR(s[3481]);
initHOBFL(s[3482]);
initHOBFU(s[3483]);
initHOBFE(s[3484]);
initHOBFR(s[3485]);
initHOBML(s[3486]);
initHOBMU(s[3487]);
initHOBME(s[3488]);
initHOBMR(s[3489]);
initHOBYL(s[3490]);
initHOBYU(s[3491]);
initHOBYE(s[3492]);
initHOBYR(s[3493]);
initHOBOL(s[3494]);
initHOBOU(s[3495]);
initHOBOE(s[3496]);
initHOBOR(s[3497]);
initHOBAS2(s[3498]);
initHOBP2(s[3499]);
initHOBA2(s[3500]);
initHOB2WL(s[3501]);
initHOB2WU(s[3502]);
initHOB2WE(s[3503]);
initHOB2WR(s[3504]);
initHOB2FL(s[3505]);
initHOB2FU(s[3506]);
initHOB2FE(s[3507]);
initHOB2FR(s[3508]);
initHOB2ML(s[3509]);
initHOB2MU(s[3510]);
initHOB2ME(s[3511]);
initHOB2MR(s[3512]);
initHOB2YL(s[3513]);
initHOB2YU(s[3514]);
initHOB2YE(s[3515]);
initHOB2YR(s[3516]);
initHOB2OL(s[3517]);
initHOB2OU(s[3518]);
initHOB2OE(s[3519]);
initHOB2OR(s[3520]);
initHOBAS3(s[3521]);
initHOBP3(s[3522]);
initHOBA3(s[3523]);
initHOB3WL(s[3524]);
initHOB3WU(s[3525]);
initHOB3WE(s[3526]);
initHOB3WR(s[3527]);
initHOB3FL(s[3528]);
initHOB3FU(s[3529]);
initHOB3FE(s[3530]);
initHOB3FR(s[3531]);
initHOB3ML(s[3532]);
initHOB3MU(s[3533]);
initHOB3ME(s[3534]);
initHOB3MR(s[3535]);
initHOB3YL(s[3536]);
initHOB3YU(s[3537]);
initHOB3YE(s[3538]);
initHOB3YR(s[3539]);
initHOB3OL(s[3540]);
initHOB3OU(s[3541]);
initHOB3OE(s[3542]);
initHOB3OR(s[3543]);
initHOBAS4(s[3544]);
initHOBP4(s[3545]);
initHOBA4(s[3546]);
initHOB4WL(s[3547]);
initHOB4WU(s[3548]);
initHOB4WE(s[3549]);
initHOB4WR(s[3550]);
initHOB4FL(s[3551]);
initHOB4FU(s[3552]);
initHOB4FE(s[3553]);
initHOB4FR(s[3554]);
initHOB4ML(s[3555]);
initHOB4MU(s[3556]);
initHOB4ME(s[3557]);
initHOB4MR(s[3558]);
initHOB4YL(s[3559]);
initHOB4YU(s[3560]);
initHOB4YE(s[3561]);
initHOB4YR(s[3562]);
initHOB4OL(s[3563]);
initHOB4OU(s[3564]);
initHOB4OE(s[3565]);
initHOB4OR(s[3566]);
initHOBAS5(s[3567]);
initHOBP5(s[3568]);
initHOBA5(s[3569]);
initHOB5WL(s[3570]);
initHOB5WU(s[3571]);
initHOB5WE(s[3572]);
initHOB5WR(s[3573]);
initHOB5FL(s[3574]);
initHOB5FU(s[3575]);
initHOB5FE(s[3576]);
initHOB5FR(s[3577]);
initHOB5ML(s[3578]);
initHOB5MU(s[3579]);
initHOB5ME(s[3580]);
initHOB5MR(s[3581]);
initHOB5YL(s[3582]);
initHOB5YU(s[3583]);
initHOB5YE(s[3584]);
initHOB5YR(s[3585]);
initHOB5OL(s[3586]);
initHOB5OU(s[3587]);
initHOB5OE(s[3588]);
initHOB5OR(s[3589]);
initHOBAS6(s[3590]);
initHOBP6(s[3591]);
initHOBA6(s[3592]);
initHOB6WL(s[3593]);
initHOB6WU(s[3594]);
initHOB6WE(s[3595]);
initHOB6WR(s[3596]);
initHOB6FL(s[3597]);
initHOB6FU(s[3598]);
initHOB6FE(s[3599]);
initHOB6FR(s[3600]);
initHOB6ML(s[3601]);
initHOB6MU(s[3602]);
initHOB6ME(s[3603]);
initHOB6MR(s[3604]);
initHOB6YL(s[3605]);
initHOB6YU(s[3606]);
initHOB6YE(s[3607]);
initHOB6YR(s[3608]);
initHOB6OL(s[3609]);
initHOB6OU(s[3610]);
initHOB6OE(s[3611]);
initHOB6OR(s[3612]);
initHOBAS7(s[3613]);
initHOBP7(s[3614]);
initHOBA7(s[3615]);
initHOB7WL(s[3616]);
initHOB7WU(s[3617]);
initHOB7WE(s[3618]);
initHOB7WR(s[3619]);
initHOB7FL(s[3620]);
initHOB7FU(s[3621]);
initHOB7FE(s[3622]);
initHOB7FR(s[3623]);
initHOB7ML(s[3624]);
initHOB7MU(s[3625]);
initHOB7ME(s[3626]);
initHOB7MR(s[3627]);
initHOB7YL(s[3628]);
initHOB7YU(s[3629]);
initHOB7YE(s[3630]);
initHOB7YR(s[3631]);
initHOB7OL(s[3632]);
initHOB7OU(s[3633]);
initHOB7OE(s[3634]);
initHOB7OR(s[3635]);
initHOBAS8(s[3636]);
initHOBP8(s[3637]);
initHOBA8(s[3638]);
initHOB8WL(s[3639]);
initHOB8WU(s[3640]);
initHOB8WE(s[3641]);
initHOB8WR(s[3642]);
initHOB8FL(s[3643]);
initHOB8FU(s[3644]);
initHOB8FE(s[3645]);
initHOB8FR(s[3646]);
initHOB8ML(s[3647]);
initHOB8MU(s[3648]);
initHOB8ME(s[3649]);
initHOB8MR(s[3650]);
initHOB8YL(s[3651]);
initHOB8YU(s[3652]);
initHOB8YE(s[3653]);
initHOB8YR(s[3654]);
initHOB8OL(s[3655]);
initHOB8OU(s[3656]);
initHOB8OE(s[3657]);
initHOB8OR(s[3658]);
initHOBAS9(s[3659]);
initHOBP9(s[3660]);
initHOBA9(s[3661]);
initHOB9WL(s[3662]);
initHOB9WU(s[3663]);
initHOB9WE(s[3664]);
initHOB9WR(s[3665]);
initHOB9FL(s[3666]);
initHOB9FU(s[3667]);
initHOB9FE(s[3668]);
initHOB9FR(s[3669]);
initHOB9ML(s[3670]);
initHOB9MU(s[3671]);
initHOB9ME(s[3672]);
initHOB9MR(s[3673]);
initHOB9YL(s[3674]);
initHOB9YU(s[3675]);
initHOB9YE(s[3676]);
initHOB9YR(s[3677]);
initHOB9OL(s[3678]);
initHOB9OU(s[3679]);
initHOB9OE(s[3680]);
initHOB9OR(s[3681]);
initHOBAS10(s[3682]);
initHOBP10(s[3683]);
initHOBA10(s[3684]);
initHOB10WL(s[3685]);
initHOB10WU(s[3686]);
initHOB10WE(s[3687]);
initHOB10WR(s[3688]);
initHOB10FL(s[3689]);
initHOB10FU(s[3690]);
initHOB10FE(s[3691]);
initHOB10FR(s[3692]);
initHOB10ML(s[3693]);
initHOB10MU(s[3694]);
initHOB10ME(s[3695]);
initHOB10MR(s[3696]);
initHOB10YL(s[3697]);
initHOB10YU(s[3698]);
initHOB10YE(s[3699]);
initHOB10YR(s[3700]);
initHOB10OL(s[3701]);
initHOB10OU(s[3702]);
initHOB10OE(s[3703]);
initHOB10OR(s[3704]);
initHOBAS11(s[3705]);
initHOBP11(s[3706]);
initHOBA11(s[3707]);
initHOB11WL(s[3708]);
initHOB11WU(s[3709]);
initHOB11WE(s[3710]);
initHOB11WR(s[3711]);
initHOB11FL(s[3712]);
initHOB11FU(s[3713]);
initHOB11FE(s[3714]);
initHOB11FR(s[3715]);
initHOB11ML(s[3716]);
initHOB11MU(s[3717]);
initHOB11ME(s[3718]);
initHOB11MR(s[3719]);
initHOB11YL(s[3720]);
initHOB11YU(s[3721]);
initHOB11YE(s[3722]);
initHOB11YR(s[3723]);
initHOB11OL(s[3724]);
initHOB11OU(s[3725]);
initHOB11OE(s[3726]);
initHOB11OR(s[3727]);
initHOBAS12(s[3728]);
initHOBP12(s[3729]);
initHOBA12(s[3730]);
initHOB12WL(s[3731]);
initHOB12WU(s[3732]);
initHOB12WE(s[3733]);
initHOB12WR(s[3734]);
initHOB12FL(s[3735]);
initHOB12FU(s[3736]);
initHOB12FE(s[3737]);
initHOB12FR(s[3738]);
initHOB12ML(s[3739]);
initHOB12MU(s[3740]);
initHOB12ME(s[3741]);
initHOB12MR(s[3742]);
initHOB12YL(s[3743]);
initHOB12YU(s[3744]);
initHOB12YE(s[3745]);
initHOB12YR(s[3746]);
initHOB12OL(s[3747]);
initHOB12OU(s[3748]);
initHOB12OE(s[3749]);
initHOB12OR(s[3750]);
initHOBAS13(s[3751]);
initHOBP13(s[3752]);
initHOBA13(s[3753]);
initHOB13WL(s[3754]);
initHOB13WU(s[3755]);
initHOB13WE(s[3756]);
initHOB13WR(s[3757]);
initHOB13FL(s[3758]);
initHOB13FU(s[3759]);
initHOB13FE(s[3760]);
initHOB13FR(s[3761]);
initHOB13ML(s[3762]);
initHOB13MU(s[3763]);
initHOB13ME(s[3764]);
initHOB13MR(s[3765]);
initHOB13YL(s[3766]);
initHOB13YU(s[3767]);
initHOB13YE(s[3768]);
initHOB13YR(s[3769]);
initHOB13OL(s[3770]);
initHOB13OU(s[3771]);
initHOB13OE(s[3772]);
initHOB13OR(s[3773]);
initHOTENUN(s[3774]);
initHOTENU(s[3775]);
initHOJOB(s[3776]);
initHOLAND(s[3777]);
initHOFURN(s[3778]);
initHOMOVE(s[3779]);
initHOROOM(s[3780]);
initHOADP01(s[3781]);
initHOADP02(s[3782]);
initHOADP03(s[3783]);
initHOADP04(s[3784]);
initHOADP05(s[3785]);
initHOADP06(s[3786]);
initHOADP07(s[3787]);
initHOADP08(s[3788]);
initHOADP09(s[3789]);
initHOADP10(s[3790]);
initHOPART(s[3791]);
initHPOPR(s[3792]);
initHOPERI(s[3793]);
initHORENT(s[3794]);
initHORENWL(s[3795]);
initHORENWU(s[3796]);
initHORENWE(s[3797]);
initHORENWR(s[3798]);
initHORENFL(s[3799]);
initHORENFU(s[3800]);
initHORENFE(s[3801]);
initHORENFR(s[3802]);
initHORENML(s[3803]);
initHORENMU(s[3804]);
initHORENME(s[3805]);
initHORENMR(s[3806]);
initHORENYL(s[3807]);
initHORENYU(s[3808]);
initHORENYE(s[3809]);
initHORENYR(s[3810]);
initHORENOL(s[3811]);
initHORENOU(s[3812]);
initHORENOE(s[3813]);
initHORENOR(s[3814]);
initHOINCL1(s[3815]);
initHOINCL2(s[3816]);
initHOINCL3(s[3817]);
initHOINCL4(s[3818]);
initHOINCL5(s[3819]);
initHOINCA1(s[3820]);
initHOINCA2(s[3821]);
initHOINCA3(s[3822]);
initHOINCA4(s[3823]);
initHOINCA5(s[3824]);
initHOINAM1(s[3825]);
initHOINAM2(s[3826]);
initHOINAM3(s[3827]);
initHOINAM4(s[3828]);
initHOINAM5(s[3829]);
initHOREBT(s[3830]);
initHOREBA(s[3831]);
initHOREBP(s[3832]);
initHOREWL(s[3833]);
initHOREWU(s[3834]);
initHOREWE(s[3835]);
initHOREWR(s[3836]);
initHOREFL(s[3837]);
initHOREFU(s[3838]);
initHOREFE(s[3839]);
initHOREFR(s[3840]);
initHOREML(s[3841]);
initHOREMU(s[3842]);
initHOREME(s[3843]);
initHOREMR(s[3844]);
initHOREYL(s[3845]);
initHOREYU(s[3846]);
initHOREYE(s[3847]);
initHOREYR(s[3848]);
initHOREOL(s[3849]);
initHOREOU(s[3850]);
initHOREOE(s[3851]);
initHOREOR(s[3852]);
initHOHB1(s[3853]);
initHOHB2(s[3854]);
initHOHB3(s[3855]);
initHOHBM1(s[3856]);
initHOHBM2(s[3857]);
initHOHBM3(s[3858]);
initHOYEAR(s[3859]);
initHOPAY(s[3860]);
initHOPAL(s[3861]);
initHOPAU(s[3862]);
initHOPAE(s[3863]);
initHOPAR(s[3864]);
initHORTB(s[3865]);
initHORTBE(s[3866]);
initHOEVM(s[3867]);
initHOORM(s[3868]);
initHOSELLP(s[3869]);
initHOSEL(s[3870]);
initHOSEU(s[3871]);
initHOSEE(s[3872]);
initHOSER(s[3873]);
initHOOUTM(s[3874]);
initHOMTY(s[3875]);
initHOMTYC(s[3876]);
initHORMO(s[3877]);
initHOMFV(s[3878]);
initHOVML(s[3879]);
initHOVM1L(s[3880]);
initHOVM1U(s[3881]);
initHOVM1E(s[3882]);
initHOVM1R(s[3883]);
initHOVE(s[3884]);
initHOVE1L(s[3885]);
initHOVE1U(s[3886]);
initHOVE1E(s[3887]);
initHOVE1R(s[3888]);
initHOYML(s[3889]);
initHOMTY2(s[3890]);
initHOMTYC2(s[3891]);
initHORMO2(s[3892]);
initHOMFV2(s[3893]);
initHOVML2(s[3894]);
initHOVM2L(s[3895]);
initHOVM2U(s[3896]);
initHOVM2E(s[3897]);
initHOVM2R(s[3898]);
initHOVE2(s[3899]);
initHOVE2L(s[3900]);
initHOVE2U(s[3901]);
initHOVE2E(s[3902]);
initHOVE2R(s[3903]);
initHOYML2(s[3904]);
initHOMTY3(s[3905]);
initHORMO3(s[3906]);
initHOMFV3(s[3907]);
initHOVML3(s[3908]);
initHOVM3L(s[3909]);
initHOVM3U(s[3910]);
initHOVM3E(s[3911]);
initHOVM3R(s[3912]);
initHOVE3(s[3913]);
initHOVE3L(s[3914]);
initHOVE3U(s[3915]);
initHOVE3E(s[3916]);
initHOVE3R(s[3917]);
initHOYML3(s[3918]);
initHOMTY4(s[3919]);
initHORMO4(s[3920]);
initHOMFV4(s[3921]);
initHOVML4(s[3922]);
initHOVM4L(s[3923]);
initHOVM4U(s[3924]);
initHOVM4E(s[3925]);
initHOVM4R(s[3926]);
initHOVE4(s[3927]);
initHOVE4L(s[3928]);
initHOVE4U(s[3929]);
initHOVE4E(s[3930]);
initHOVE4R(s[3931]);
initHOYML4(s[3932]);
initHOMTY5(s[3933]);
initHORMO5(s[3934]);
initHOMFV5(s[3935]);
initHOVML5(s[3936]);
initHOVM5L(s[3937]);
initHOVM5U(s[3938]);
initHOVM5E(s[3939]);
initHOVM5R(s[3940]);
initHOVE5(s[3941]);
initHOVE5L(s[3942]);
initHOVE5U(s[3943]);
initHOVE5E(s[3944]);
initHOVE5R(s[3945]);
initHOYML5(s[3946]);
initHOEVRE(s[3947]);
initHOMREP(s[3948]);
initHOMRL(s[3949]);
initHOMRU(s[3950]);
initHOMRE(s[3951]);
initHOMRR(s[3952]);
initHOINC1(s[3953]);
initHOINC2(s[3954]);
initHOINC3(s[3955]);
initHOINC4(s[3956]);
initHOINCM1(s[3957]);
initHOINCM2(s[3958]);
initHOINCM3(s[3959]);
initHOINCM4(s[3960]);
initHOINCC(s[3961]);
initHORINC(s[3962]);
initHORINCC(s[3963]);
initHORMOL(s[3964]);
initHORMBL(s[3965]);
initHORMBU(s[3966]);
initHORMBE(s[3967]);
initHORMBR(s[3968]);
initHORINM(s[3969]);
initHORIL(s[3970]);
initHORIU(s[3971]);
initHORIE(s[3972]);
initHORIR(s[3973]);
initHORPAY(s[3974]);
initHORPM(s[3975]);
initHORPML(s[3976]);
initHORPMU(s[3977]);
initHORPME(s[3978]);
initHORPMR(s[3979]);
initHOMINC(s[3980]);
initHOMIL(s[3981]);
initHOMIU(s[3982]);
initHOMIE(s[3983]);
initHOMIR(s[3984]);
initHORMS(s[3985]);
initHORRM(s[3986]);
initHORRL(s[3987]);
initHORRU(s[3988]);
initHORRE(s[3989]);
initHORRR(s[3990]);
initHORFEE(s[3991]);
initHORFEP(s[3992]);
initHOALF(s[3993]);
initHOALFM(s[3994]);
initHOALL(s[3995]);
initHOALU(s[3996]);
initHOALE(s[3997]);
initHOALR(s[3998]);
initHOALI(s[3999]);
initHORPOS(s[4000]);
initHORPOF(s[4001]);
initHORMU(s[4002]);
initHORMUWL(s[4003]);
initHORMUWU(s[4004]);
initHORMUWE(s[4005]);
initHORMUWR(s[4006]);
initHORMUFL(s[4007]);
initHORMUFU(s[4008]);
initHORMUFE(s[4009]);
initHORMUFR(s[4010]);
initHORMUML(s[4011]);
initHORMUMU(s[4012]);
initHORMUME(s[4013]);
initHORMUMR(s[4014]);
initHORMUYL(s[4015]);
initHORMUYU(s[4016]);
initHORMUYE(s[4017]);
initHORMUYR(s[4018]);
initHORMUOL(s[4019]);
initHORMUOU(s[4020]);
initHORMUOE(s[4021]);
initHORMUOR(s[4022]);
initHORPC(s[4023]);
initHORPCM(s[4024]);
initHORPL(s[4025]);
initHORPU(s[4026]);
initHORPE(s[4027]);
initHORPR(s[4028]);
initHOOLD(s[4029]);
initHODIFF(s[4030]);
initHODIFFT(s[4031]);
initHODOC(s[4032]);
initHOINTA(s[4033]);
initHOPRO01(s[4034]);
initHOPRO02(s[4035]);
initHOPRO03(s[4036]);
initHOPRO04(s[4037]);
initHOPRO05(s[4038]);
initHOPRO06(s[4039]);
initHOPRO07(s[4040]);
initHOPRO08(s[4041]);
initHOPRO09(s[4042]);
initHOPRO10(s[4043]);
initHOPRM01(s[4044]);
initHOPRM02(s[4045]);
initHOPRM03(s[4046]);
initHOPRM04(s[4047]);
initHOPRM05(s[4048]);
initHOPRM06(s[4049]);
initHOPRM07(s[4050]);
initHOPRM08(s[4051]);
initHOPRM09(s[4052]);
initHOPRM10(s[4053]);
initHOCENH(s[4054]);
initHOOHEA1(s[4055]);
initHOOHEA2(s[4056]);
initHOOHEA3(s[4057]);
initHOOHEM1(s[4058]);
initHOOHEM2(s[4059]);
initHOOHEM3(s[4060]);
initHOHAV01(s[4061]);
initHOHAV02(s[4062]);
initHOHAV03(s[4063]);
initHOHAV04(s[4064]);
initHOHAV05(s[4065]);
initHOHAV06(s[4066]);
initHOHAV07(s[4067]);
initHOHAV08(s[4068]);
initHOHAV09(s[4069]);
initHOHAV10(s[4070]);
initHOHAV11(s[4071]);
initHOVEH(s[4072]);
initHOVW(s[4073]);
initHOVAG(s[4074]);
initHOVYR(s[4075]);
initHOVLR(s[4076]);
initHOVER(s[4077]);
initHOVNR(s[4078]);
initHOVNO(s[4079]);
initHOVO11(s[4080]);
initHOVO12(s[4081]);
initHOVW2(s[4082]);
initHOVAG2(s[4083]);
initHOVYR2(s[4084]);
initHOVLR2(s[4085]);
initHOVER2(s[4086]);
initHOVNR2(s[4087]);
initHOVNO2(s[4088]);
initHOVO21(s[4089]);
initHOVO22(s[4090]);
initHOVW3(s[4091]);
initHOVAG3(s[4092]);
initHOVYR3(s[4093]);
initHOVLR3(s[4094]);
initHOVER3(s[4095]);
initHOVNR3(s[4096]);
initHOVNO3(s[4097]);
initHOVO31(s[4098]);
initHOVO32(s[4099]);
initHOVW4(s[4100]);
initHOVAG4(s[4101]);
initHOVYR4(s[4102]);
initHOVLR4(s[4103]);
initHOVER4(s[4104]);
initHOVNR4(s[4105]);
initHOVNO4(s[4106]);
initHOVO41(s[4107]);
initHOVO42(s[4108]);
initHOVW5(s[4109]);
initHOVAG5(s[4110]);
initHOVYR5(s[4111]);
initHOVLR5(s[4112]);
initHOVER5(s[4113]);
initHOVNR5(s[4114]);
initHOVNO5(s[4115]);
initHOVO51(s[4116]);
initHOVO52(s[4117]);
initHOVW6(s[4118]);
initHOVAG6(s[4119]);
initHOVYR6(s[4120]);
initHOVLR6(s[4121]);
initHOVER6(s[4122]);
initHOVNR6(s[4123]);
initHOVNO6(s[4124]);
initHOVO61(s[4125]);
initHOVO62(s[4126]);
initHOVW7(s[4127]);
initHOVAG7(s[4128]);
initHOVYR7(s[4129]);
initHOVLR7(s[4130]);
initHOVER7(s[4131]);
initHOVNR7(s[4132]);
initHOVNO7(s[4133]);
initHOVO71(s[4134]);
initHOVO72(s[4135]);
initHOVW8(s[4136]);
initHOVAG8(s[4137]);
initHOVYR8(s[4138]);
initHOVLR8(s[4139]);
initHOVER8(s[4140]);
initHOVNR8(s[4141]);
initHOVNO8(s[4142]);
initHOVO81(s[4143]);
initHOVO82(s[4144]);
initHOVW9(s[4145]);
initHOVAG9(s[4146]);
initHOVYR9(s[4147]);
initHOVLR9(s[4148]);
initHOVER9(s[4149]);
initHOVNR9(s[4150]);
initHOVNO9(s[4151]);
initHOVO91(s[4152]);
initHOVO92(s[4153]);
initHOVW10(s[4154]);
initHOVAG10(s[4155]);
initHOVYR10(s[4156]);
initHOVLR10(s[4157]);
initHOVER10(s[4158]);
initHOVNR10(s[4159]);
initHOVNO10(s[4160]);
initHOVO101(s[4161]);
initHOVO102(s[4162]);
initHOFOOD(s[4163]);
initHOFOL(s[4164]);
initHOFOU(s[4165]);
initHOFOE(s[4166]);
initHOFOR(s[4167]);
initHOOUTF(s[4168]);
initHOOUL(s[4169]);
initHOOUU(s[4170]);
initHOOUE(s[4171]);
initHOOUR(s[4172]);
initHOMEAL(s[4173]);
initHOMOFT(s[4174]);
initCFMETM(s[4175]);
initCFDATD(s[4176]);
initCFDATM(s[4177]);
initCFDATY(s[4178]);
initCFDAY(s[4179]);
initCFDSCR(s[4180]);
initCFTEST(s[4181]);
initCFWRDS(s[4182]);
initRAND14(s[4183]);
initCFLISEN(s[4184]);
initCFANI(s[4185]);
initCFMEM(s[4186]);
initNCORREC(s[4187]);
initNMISSED(s[4188]);
initNROW(s[4189]);
initNCLM(s[4190]);
initNROWCLM(s[4191]);
initCFMEMS(s[4192]);
initCFPASCR(s[4193]);
initCFLISD(s[4194]);
initCFSUMB(s[4195]);
initCFSUMC(s[4196]);
initCFSUMD(s[4197]);
initCFSUMA(s[4198]);
initCFSUME(s[4199]);
initCFSUMF(s[4200]);
initCFMSCR(s[4201]);
initCFEND(s[4202]);
initCFPMB(s[4203]);
initCFPBSCR(s[4204]);
initCFPTSCR(s[4205]);
initCFWHO1(s[4206]);
initCFWHO2(s[4207]);
initCFWHO3(s[4208]);
initCFIMP(s[4209]);
initCFWHZ1(s[4210]);
initCFWHZ2(s[4211]);
initCFWHZ3(s[4212]);
initCFWHZ4(s[4213]);
initEXRAIN(s[4214]);
initEXLO80(s[4215]);
initEXPW(s[4216]);
initEXHLIM(s[4217]);
initEXRSLF(s[4218]);
initEXAINH(s[4219]);
initEXCINH(s[4220]);
initEXINHE(s[4221]);
initEXCIN(s[4222]);
initEXCAIN(s[4223]);
initEXCPIN(s[4224]);
initEXHVR(s[4225]);
initEXHVA(s[4226]);
initEXPLAN(s[4227]);
initEXPLANC(s[4228]);
initPSCEDA(s[4229]);
initPSCEDB(s[4230]);
initPSCEDC(s[4231]);
initPSCEDD(s[4232]);
initPSCEDE(s[4233]);
initPSCEDF(s[4234]);
initPSCEDG(s[4235]);
initPSCEDH(s[4236]);
initPSOLD(s[4237]);
initPSMID(s[4238]);
initFQETHNR(s[4239]);
initFQWCUL1(s[4240]);
initFQWCUL2(s[4241]);
initFQWCUL3(s[4242]);
initFQWCUL4(s[4243]);
initFQBCG1(s[4244]);
initFQBACK1(s[4245]);
initFQBACK2(s[4246]);
initFQCBAC1(s[4247]);
initFQCULB1(s[4248]);
initFQCUL1(s[4249]);
initFQCUL2(s[4250]);
initFQCUL3(s[4251]);
initFQCBTHR(s[4252]);
initFQCENG(s[4253]);
initFQMQUA(s[4254]);
initFQQUAL1(s[4255]);
initFQQUAL2(s[4256]);
initFQQUAL3(s[4257]);
initFQQUZM1(s[4258]);
initFQQUZM2(s[4259]);
initFQQUZM3(s[4260]);
initEDQUAL(s[4261]);
initFQEND(s[4262]);
initFQHELP(s[4263]);
initSCQOLA(s[4264]);
initSCQOLB(s[4265]);
initSCQOLC(s[4266]);
initSCQOLD(s[4267]);
initSCQOLE(s[4268]);
initSCQOLF(s[4269]);
initSCQOLG(s[4270]);
initSCQOLH(s[4271]);
initSCQOLI(s[4272]);
initSCQOLJ(s[4273]);
initSCQOLK(s[4274]);
initSCQOLL(s[4275]);
initSCQOLM(s[4276]);
initSCQOLN(s[4277]);
initSCQOLO(s[4278]);
initSCQOLP(s[4279]);
initSCQOLQ(s[4280]);
initSCQOLR(s[4281]);
initSCQOLS(s[4282]);
initSCPTPA1(s[4283]);
initSCPTPA2(s[4284]);
initSCPTPA3(s[4285]);
initSCPTPA4(s[4286]);
initSCPTPA5(s[4287]);
initSCPTPA6(s[4288]);
initSCPTPA7(s[4289]);
initSCPTPA8(s[4290]);
initSCPTPA9(s[4291]);
initSCORG1(s[4292]);
initSCORGA2(s[4293]);
initSCORG3(s[4294]);
initSCORG4(s[4295]);
initSCORG5(s[4296]);
initSCORG6(s[4297]);
initSCORG7(s[4298]);
initSCORG8(s[4299]);
initSCORG9(s[4300]);
initSCORGN(s[4301]);
initSCACCA(s[4302]);
initSCACCB(s[4303]);
initSCACCC(s[4304]);
initSCACCD(s[4305]);
initSCACCE(s[4306]);
initSCACCF(s[4307]);
initSCACCG(s[4308]);
initSCACCH(s[4309]);
initSCACCI(s[4310]);
initSCACCJ(s[4311]);
initSCGHQA(s[4312]);
initSCGHQB(s[4313]);
initSCGHQC(s[4314]);
initSCGHQD(s[4315]);
initSCGHQE(s[4316]);
initSCGHQF(s[4317]);
initSCGHQG(s[4318]);
initSCGHQH(s[4319]);
initSCGHQI(s[4320]);
initSCGHQJ(s[4321]);
initSCGHQK(s[4322]);
initSCGHQL(s[4323]);
initSCDCA(s[4324]);
initSCDCB(s[4325]);
initSCDCC(s[4326]);
initSCDCD(s[4327]);
initSCDCE(s[4328]);
initSCDCF(s[4329]);
initSCDCG(s[4330]);
initSCLDDR(s[4331]);
initSCPTR(s[4332]);
initSCPTRA(s[4333]);
initSCPTRB(s[4334]);
initSCPTRC(s[4335]);
initSCPTRD(s[4336]);
initSCPTRE(s[4337]);
initSCPTRF(s[4338]);
initSCPTRG(s[4339]);
initSCCHD(s[4340]);
initSCCHDA(s[4341]);
initSCCHDB(s[4342]);
initSCCHDC(s[4343]);
initSCCHDD(s[4344]);
initSCCHDE(s[4345]);
initSCCHDF(s[4346]);
initSCCHDG(s[4347]);
initSCCHDH(s[4348]);
initSCCHDI(s[4349]);
initSCCHDM(s[4350]);
initSCFAM(s[4351]);
initSCFAMA(s[4352]);
initSCFAMB(s[4353]);
initSCFAMC(s[4354]);
initSCFAMD(s[4355]);
initSCFAME(s[4356]);
initSCFAMF(s[4357]);
initSCFAMG(s[4358]);
initSCFMH(s[4359]);
initSCFAMI(s[4360]);
initSCFAMM(s[4361]);
initSCFRD(s[4362]);
initSCFRDA(s[4363]);
initSCFRDB(s[4364]);
initSCFRDC(s[4365]);
initSCFRDD(s[4366]);
initSCFRDE(s[4367]);
initSCFRDF(s[4368]);
initSCFRDG(s[4369]);
initSCFRDH(s[4370]);
initSCFRDI(s[4371]);
initSCFRDM(s[4372]);
initSCSCA(s[4373]);
initSCSCB(s[4374]);
initSCSCC(s[4375]);
initSCSCD(s[4376]);
initSCSCE(s[4377]);
initSCSCF(s[4378]);
initSCSCG(s[4379]);
initSCSCH(s[4380]);
initSCSCI(s[4381]);
initSCEND(s[4382]);
initINTDATM(s[4383]);
initINTDATY(s[4384]);
initIINTDTM(s[4385]);
initIINTDTY(s[4386]);
initRTHHOUT(s[4387]);
initELIG(s[4388]);
initELSA(s[4389]);
initPARTNER(s[4390]);
initELIGAT(s[4391]);
initELIGBT(s[4392]);
initELIGCT(s[4393]);
initHHSEL(s[4394]);
initNOFIQ(s[4395]);
initINDNO(s[4396]);
initNUMP(s[4397]);
initALLOCP1(s[4398]);
initALLOCP2(s[4399]);
initADRESP1(s[4400]);
initADRESP2(s[4401]);
initCPID(s[4402]);
initASKPX1(s[4403]);
initINDRS(s[4404]);
initW1MOVER(s[4405]);
initHOPID(s[4406]);
initIAPID(s[4407]);
initASKPAY(s[4408]);
initFUTYPE(s[4409]);
initINDSEX(s[4410]);
initINDOBYR(s[4411]);
initINDAGER(s[4412]);
initANSSEC(s[4413]);
initAXSC2000(s[4414]);
initENSSEC(s[4415]);
initEXS2000(s[4416]);
initHHTOT(s[4417]);
initCHINHH1(s[4418]);
initCHOUTHH(s[4419]);
initGCINHH1(s[4420]);
initMAINHH1(s[4421]);
initPAINHH1(s[4422]);
initCOUPLE1(s[4423]);
initWHOSO1(s[4424]);
initWHOSO2(s[4425]);
initWHOSO3(s[4426]);
initSCNOSC(s[4427]);
initSCNOSCC(s[4428]);
initSC_REC(s[4429]);
initCOGREC(s[4430]);
initAHSEYEAR(s[4431]);
initASAMPSTA(s[4432]);
initAHSECLS2(s[4433]);
initASTRATIF(s[4434]);
initAHSEINT(s[4435]);
initAHSEST(s[4436]);
initAHHSIZE(s[4437]);
initAPERSNO(s[4438]);
initAMINTB(s[4439]);
initAYINTB(s[4440]);
initASEX(s[4441]);
initARELTO01(s[4442]);
initARELTO02(s[4443]);
initARELTO03(s[4444]);
initARELTO04(s[4445]);
initARELTO05(s[4446]);
initARELTO06(s[4447]);
initARELTO07(s[4448]);
initARELTO08(s[4449]);
initARELTO09(s[4450]);
initARELTO10(s[4451]);
initALIVEMAB(s[4452]);
initAAGEMAB(s[4453]);
initALIVEPAB(s[4454]);
initAAGEPAB(s[4455]);
initAAGEANGI(s[4456]);
initAAGEHART(s[4457]);
initAAGESTRO(s[4458]);
initAAGEDI(s[4459]);
initANACTIV(s[4460]);
initAEVERJOB(s[4461]);
initAEMPLOYE(s[4462]);
initASOCCLS(s[4463]);
initAECONACT(s[4464]);
initASTWORK(s[4465]);
initAWKLOOK(s[4466]);
initAWKSTRT(s[4467]);
initAOTHPAID(s[4468]);
initAFTPTIME(s[4469]);
initADIRCTR(s[4470]);
initAEMPSTAT(s[4471]);
initANEMPLEE(s[4472]);
initASNEMPLE(s[4473]);
initAHHLDR01(s[4474]);
initAHHLDR02(s[4475]);
initAHHLDR03(s[4476]);
initAHHLDR04(s[4477]);
initATENUREB(s[4478]);
initAQUAL(s[4479]);
initAEDUCEND(s[4480]);
initAPOBR(s[4481]);
initAETHNICR(s[4482]);
initGOR(s[4483]);
initIDAUNIQ(s[4484]);
initIDAHH(s[4485]);
initPERID(s[4486]);
initCOUPID(s[4487]);
initFUTYPE(s[4488]);
initFUID(s[4489]);
initBUEQ(s[4490]);
initSINC_BU_I(s[4491]);
initSINC_BU_F(s[4492]);
initSINC_BU_T(s[4493]);
initSINC_BU_O(s[4494]);
initPPEN_BU_I(s[4495]);
initPPEN_BU_F(s[4496]);
initPPEN_BU_T(s[4497]);
initPPEN_BU_O(s[4498]);
initSPEN_R_I(s[4499]);
initSPEN_R_F(s[4500]);
initSPEN_R_T(s[4501]);
initSPEN_R_O(s[4502]);
initSPEN_P_I(s[4503]);
initSPEN_P_F(s[4504]);
initSPEN_P_T(s[4505]);
initSPEN_P_O(s[4506]);
initANIN_R_I(s[4507]);
initANIN_R_F(s[4508]);
initANIN_R_T(s[4509]);
initANIN_R_O(s[4510]);
initANIN_P_I(s[4511]);
initANIN_P_F(s[4512]);
initANIN_P_T(s[4513]);
initANIN_P_O(s[4514]);
initICB_R_I(s[4515]);
initICB_R_F(s[4516]);
initICB_R_T(s[4517]);
initICB_R_O(s[4518]);
initICB_P_I(s[4519]);
initICB_P_F(s[4520]);
initICB_P_T(s[4521]);
initICB_P_O(s[4522]);
initSDA_R_I(s[4523]);
initSDA_R_F(s[4524]);
initSDA_R_T(s[4525]);
initSDA_R_O(s[4526]);
initSDA_P_I(s[4527]);
initSDA_P_F(s[4528]);
initSDA_P_T(s[4529]);
initSDA_P_O(s[4530]);
initSSP_R_I(s[4531]);
initSSP_R_F(s[4532]);
initSSP_R_T(s[4533]);
initSSP_R_O(s[4534]);
initSSP_P_I(s[4535]);
initSSP_P_F(s[4536]);
initSSP_P_T(s[4537]);
initSSP_P_O(s[4538]);
initATTALL_R_I(s[4539]);
initATTALL_R_F(s[4540]);
initATTALL_R_T(s[4541]);
initATTALL_R_O(s[4542]);
initATTALL_P_I(s[4543]);
initATTALL_P_F(s[4544]);
initATTALL_P_T(s[4545]);
initATTALL_P_O(s[4546]);
initDLA_R_I(s[4547]);
initDLA_R_F(s[4548]);
initDLA_R_T(s[4549]);
initDLA_R_O(s[4550]);
initDLA_P_I(s[4551]);
initDLA_P_F(s[4552]);
initDLA_P_T(s[4553]);
initDLA_P_O(s[4554]);
initINDINJ_R_I(s[4555]);
initINDINJ_R_F(s[4556]);
initINDINJ_R_T(s[4557]);
initINDINJ_R_O(s[4558]);
initINDINJ_P_I(s[4559]);
initINDINJ_P_F(s[4560]);
initINDINJ_P_T(s[4561]);
initINDINJ_P_O(s[4562]);
initWAR_R_I(s[4563]);
initWAR_R_F(s[4564]);
initWAR_R_T(s[4565]);
initWAR_R_O(s[4566]);
initWAR_P_I(s[4567]);
initWAR_P_F(s[4568]);
initWAR_P_T(s[4569]);
initWAR_P_O(s[4570]);
initINVCARE_R_I(s[4571]);
initINVCARE_R_F(s[4572]);
initINVCARE_R_T(s[4573]);
initINVCARE_R_O(s[4574]);
initINVCARE_P_I(s[4575]);
initINVCARE_P_F(s[4576]);
initINVCARE_P_T(s[4577]);
initINVCARE_P_O(s[4578]);
initDPTC_R_I(s[4579]);
initDPTC_R_F(s[4580]);
initDPTC_R_T(s[4581]);
initDPTC_R_O(s[4582]);
initDPTC_P_I(s[4583]);
initDPTC_P_F(s[4584]);
initDPTC_P_T(s[4585]);
initDPTC_P_O(s[4586]);
initOTH1_R_I(s[4587]);
initOTH1_R_F(s[4588]);
initOTH1_R_T(s[4589]);
initOTH1_R_O(s[4590]);
initOTH1_P_I(s[4591]);
initOTH1_P_F(s[4592]);
initOTH1_P_T(s[4593]);
initOTH1_P_O(s[4594]);
initIS_R_I(s[4595]);
initIS_R_F(s[4596]);
initIS_R_T(s[4597]);
initIS_R_O(s[4598]);
initIS_P_I(s[4599]);
initIS_P_F(s[4600]);
initIS_P_T(s[4601]);
initIS_P_O(s[4602]);
initWFTC_R_I(s[4603]);
initWFTC_R_F(s[4604]);
initWFTC_R_T(s[4605]);
initWFTC_R_O(s[4606]);
initWFTC_P_I(s[4607]);
initWFTC_P_F(s[4608]);
initWFTC_P_T(s[4609]);
initWFTC_P_O(s[4610]);
initJSA_R_I(s[4611]);
initJSA_R_F(s[4612]);
initJSA_R_T(s[4613]);
initJSA_R_O(s[4614]);
initJSA_P_I(s[4615]);
initJSA_P_F(s[4616]);
initJSA_P_T(s[4617]);
initJSA_P_O(s[4618]);
initGALL_R_I(s[4619]);
initGALL_R_F(s[4620]);
initGALL_R_T(s[4621]);
initGALL_R_O(s[4622]);
initGALL_P_I(s[4623]);
initGALL_P_F(s[4624]);
initGALL_P_T(s[4625]);
initGALL_P_O(s[4626]);
initWIDPEN_R_I(s[4627]);
initWIDPEN_R_F(s[4628]);
initWIDPEN_R_T(s[4629]);
initWIDPEN_R_O(s[4630]);
initWIDPEN_P_I(s[4631]);
initWIDPEN_P_F(s[4632]);
initWIDPEN_P_T(s[4633]);
initWIDPEN_P_O(s[4634]);
initCB_R_I(s[4635]);
initCB_R_F(s[4636]);
initCB_R_T(s[4637]);
initCB_R_O(s[4638]);
initCB_P_I(s[4639]);
initCB_P_F(s[4640]);
initCB_P_T(s[4641]);
initCB_P_O(s[4642]);
initOTH2_R_I(s[4643]);
initOTH2_R_F(s[4644]);
initOTH2_R_T(s[4645]);
initOTH2_R_O(s[4646]);
initOTH2_P_I(s[4647]);
initOTH2_P_F(s[4648]);
initOTH2_P_T(s[4649]);
initOTH2_P_O(s[4650]);
initOTHPAY_R_I(s[4651]);
initOTHPAY_R_F(s[4652]);
initOTHPAY_R_T(s[4653]);
initOTHPAY_R_O(s[4654]);
initOTHPAY_P_I(s[4655]);
initOTHPAY_P_F(s[4656]);
initOTHPAY_P_T(s[4657]);
initOTHPAY_P_O(s[4658]);
initSAVE_BU_I(s[4659]);
initSAVE_BU_F(s[4660]);
initSAVE_BU_T(s[4661]);
initSAVE_BU_O(s[4662]);
initSAVEI_BU_I(s[4663]);
initSAVEI_BU_F(s[4664]);
initSAVEI_BU_T(s[4665]);
initSAVEI_BU_O(s[4666]);
initTESSA_BU_I(s[4667]);
initTESSA_BU_F(s[4668]);
initTESSA_BU_T(s[4669]);
initTESSA_BU_O(s[4670]);
initTESSAI_BU_I(s[4671]);
initTESSAI_BU_F(s[4672]);
initTESSAI_BU_T(s[4673]);
initTESSAI_BU_O(s[4674]);
initCASHISA_BU_I(s[4675]);
initCASHISA_BU_F(s[4676]);
initCASHISA_BU_T(s[4677]);
initCASHISA_BU_O(s[4678]);
initLISA_BU_I(s[4679]);
initLISA_BU_F(s[4680]);
initLISA_BU_T(s[4681]);
initLISA_BU_O(s[4682]);
initSHISA_BU_I(s[4683]);
initSHISA_BU_F(s[4684]);
initSHISA_BU_T(s[4685]);
initSHISA_BU_O(s[4686]);
initISAI_BU_I(s[4687]);
initISAI_BU_F(s[4688]);
initISAI_BU_T(s[4689]);
initISAI_BU_O(s[4690]);
initPRBONDS_BU_I(s[4691]);
initPRBONDS_BU_F(s[4692]);
initPRBONDS_BU_T(s[4693]);
initPRBONDS_BU_O(s[4694]);
initPRBONDSI_BU_I(s[4695]);
initPRBONDSI_BU_F(s[4696]);
initPRBONDSI_BU_T(s[4697]);
initPRBONDSI_BU_O(s[4698]);
initNSAV_BU_I(s[4699]);
initNSAV_BU_F(s[4700]);
initNSAV_BU_T(s[4701]);
initNSAV_BU_O(s[4702]);
initNSAVI_BU_I(s[4703]);
initNSAVI_BU_F(s[4704]);
initNSAVI_BU_T(s[4705]);
initNSAVI_BU_O(s[4706]);
initPEP_BU_I(s[4707]);
initPEP_BU_F(s[4708]);
initPEP_BU_T(s[4709]);
initPEP_BU_O(s[4710]);
initPEPI_BU_I(s[4711]);
initPEPI_BU_F(s[4712]);
initPEPI_BU_T(s[4713]);
initPEPI_BU_O(s[4714]);
initSHARES_BU_I(s[4715]);
initSHARES_BU_F(s[4716]);
initSHARES_BU_T(s[4717]);
initSHARES_BU_O(s[4718]);
initSHARESI_BU_I(s[4719]);
initSHARESI_BU_F(s[4720]);
initSHARESI_BU_T(s[4721]);
initSHARESI_BU_O(s[4722]);
initTRUSTS_BU_I(s[4723]);
initTRUSTS_BU_F(s[4724]);
initTRUSTS_BU_T(s[4725]);
initTRUSTS_BU_O(s[4726]);
initTRUSTSI_BU_I(s[4727]);
initTRUSTSI_BU_F(s[4728]);
initTRUSTSI_BU_T(s[4729]);
initTRUSTSI_BU_O(s[4730]);
initBONDS_BU_I(s[4731]);
initBONDS_BU_F(s[4732]);
initBONDS_BU_T(s[4733]);
initBONDS_BU_O(s[4734]);
initBONDSI_BU_I(s[4735]);
initBONDSI_BU_F(s[4736]);
initBONDSI_BU_T(s[4737]);
initBONDSI_BU_O(s[4738]);
initOTHSAV_BU_I(s[4739]);
initOTHSAV_BU_F(s[4740]);
initOTHSAV_BU_T(s[4741]);
initOTHSAV_BU_O(s[4742]);
initOTHSAVI_BU_I(s[4743]);
initOTHSAVI_BU_F(s[4744]);
initOTHSAVI_BU_T(s[4745]);
initOTHSAVI_BU_O(s[4746]);
initLISAVE_BU_I(s[4747]);
initLISAVE_BU_F(s[4748]);
initLISAVE_BU_T(s[4749]);
initLISAVE_BU_O(s[4750]);
initHOME_BU_I(s[4751]);
initHOME_BU_F(s[4752]);
initHOME_BU_T(s[4753]);
initHOME_BU_O(s[4754]);
initHOMEI_BU_I(s[4755]);
initHOMEI_BU_F(s[4756]);
initHOMEI_BU_T(s[4757]);
initHOMEI_BU_O(s[4758]);
initFARM_BU_I(s[4759]);
initFARM_BU_F(s[4760]);
initFARM_BU_T(s[4761]);
initFARM_BU_O(s[4762]);
initFARMI_BU_I(s[4763]);
initFARMI_BU_F(s[4764]);
initFARMI_BU_T(s[4765]);
initFARMI_BU_O(s[4766]);
initTOTHASS_BU_I(s[4767]);
initTOTHASS_BU_F(s[4768]);
initTOTHASS_BU_T(s[4769]);
initTOTHASS_BU_O(s[4770]);
initCCARD_BU_I(s[4771]);
initCCARD_BU_F(s[4772]);
initCCARD_BU_T(s[4773]);
initCCARD_BU_O(s[4774]);
initPRDEBT_BU_I(s[4775]);
initPRDEBT_BU_F(s[4776]);
initPRDEBT_BU_T(s[4777]);
initPRDEBT_BU_O(s[4778]);
initODEBT_BU_I(s[4779]);
initODEBT_BU_F(s[4780]);
initODEBT_BU_T(s[4781]);
initODEBT_BU_O(s[4782]);
initJNTASS_BU_I(s[4783]);
initJNTASS_BU_F(s[4784]);
initJNTASS_BU_T(s[4785]);
initJNTASS_BU_O(s[4786]);
initWPPP_BU_I(s[4787]);
initWPPP_BU_F(s[4788]);
initWPPP_BU_T(s[4789]);
initWPPP_BU_O(s[4790]);
initWPPP_R_I(s[4791]);
initWPPP_R_F(s[4792]);
initWPPP_R_T(s[4793]);
initWPPP_R_O(s[4794]);
initWPPP_P_I(s[4795]);
initWPPP_P_F(s[4796]);
initWPPP_P_T(s[4797]);
initWPPP_P_O(s[4798]);
initTHP_BU_I(s[4799]);
initTHP_BU_F(s[4800]);
initTHP_BU_T(s[4801]);
initTHP_BU_O(s[4802]);
initTHP_R_I(s[4803]);
initTHP_R_F(s[4804]);
initTHP_R_T(s[4805]);
initTHP_R_O(s[4806]);
initTHP_P_I(s[4807]);
initTHP_P_F(s[4808]);
initTHP_P_T(s[4809]);
initTHP_P_O(s[4810]);
initNETPROF_BU_I(s[4811]);
initNETPROF_BU_F(s[4812]);
initNETPROF_BU_T(s[4813]);
initNETPROF_BU_O(s[4814]);
initNETPROF_R_I(s[4815]);
initNETPROF_R_F(s[4816]);
initNETPROF_R_T(s[4817]);
initNETPROF_R_O(s[4818]);
initNETPROF_P_I(s[4819]);
initNETPROF_P_F(s[4820]);
initNETPROF_P_T(s[4821]);
initNETPROF_P_O(s[4822]);
initSEDRAW_BU_I(s[4823]);
initSEDRAW_BU_F(s[4824]);
initSEDRAW_BU_T(s[4825]);
initSEDRAW_BU_O(s[4826]);
initSEDRAW_R_I(s[4827]);
initSEDRAW_R_F(s[4828]);
initSEDRAW_R_T(s[4829]);
initSEDRAW_R_O(s[4830]);
initSEDRAW_P_I(s[4831]);
initSEDRAW_P_F(s[4832]);
initSEDRAW_P_T(s[4833]);
initSEDRAW_P_O(s[4834]);
initBUSV_BU_I(s[4835]);
initBUSV_BU_F(s[4836]);
initBUSV_BU_T(s[4837]);
initBUSV_BU_O(s[4838]);
initBUSV_R_I(s[4839]);
initBUSV_R_F(s[4840]);
initBUSV_R_T(s[4841]);
initBUSV_R_O(s[4842]);
initBUSV_P_I(s[4843]);
initBUSV_P_F(s[4844]);
initBUSV_P_T(s[4845]);
initBUSV_P_O(s[4846]);
initOJ_BU_I(s[4847]);
initOJ_BU_F(s[4848]);
initOJ_BU_T(s[4849]);
initOJ_BU_O(s[4850]);
initOJ_R_I(s[4851]);
initOJ_R_F(s[4852]);
initOJ_R_T(s[4853]);
initOJ_R_O(s[4854]);
initOJ_P_I(s[4855]);
initOJ_P_F(s[4856]);
initOJ_P_T(s[4857]);
initOJ_P_O(s[4858]);
initOTHBUSV_BU_I(s[4859]);
initOTHBUSV_BU_F(s[4860]);
initOTHBUSV_BU_T(s[4861]);
initOTHBUSV_BU_O(s[4862]);
initOTHBUSV_R_I(s[4863]);
initOTHBUSV_R_F(s[4864]);
initOTHBUSV_R_T(s[4865]);
initOTHBUSV_R_O(s[4866]);
initOTHBUSV_P_I(s[4867]);
initOTHBUSV_P_F(s[4868]);
initOTHBUSV_P_T(s[4869]);
initOTHBUSV_P_O(s[4870]);
initHSVAL_HH_I(s[4871]);
initHSVAL_HH_F(s[4872]);
initHSVAL_HH_T(s[4873]);
initHSVAL_HH_O(s[4874]);
initHDEBT_HH_I(s[4875]);
initHDEBT_HH_F(s[4876]);
initHDEBT_HH_T(s[4877]);
initHDEBT_HH_O(s[4878]);
initTOTINC_BU_S(s[4879]);
initTOTINC_BU_F(s[4880]);
initTOTINC_BU_T(s[4881]);
initTOTINC_BU_NI2(s[4882]);
initTOTINC_BU_NI3(s[4883]);
initTOTINC_BU_NI4(s[4884]);
initEQTOTINC_BU_S(s[4885]);
initEQTOTINC_BU_F(s[4886]);
initEQTOTINC_BU_T(s[4887]);
initEQTOTINC_BU_NI2(s[4888]);
initEQTOTINC_BU_NI3(s[4889]);
initEQTOTINC_BU_NI4(s[4890]);
initEMPINC_BU_S(s[4891]);
initEMPINC_BU_F(s[4892]);
initEMPINC_BU_T(s[4893]);
initEMPINC_BU_NI2(s[4894]);
initEMPINC_BU_NI3(s[4895]);
initEMPINC_BU_NI4(s[4896]);
initEQEMPINC_BU_S(s[4897]);
initEQEMPINC_BU_F(s[4898]);
initEQEMPINC_BU_T(s[4899]);
initEQEMPINC_BU_NI2(s[4900]);
initEQEMPINC_BU_NI3(s[4901]);
initEQEMPINC_BU_NI4(s[4902]);
initEMPINC_R_S(s[4903]);
initEMPINC_R_F(s[4904]);
initEMPINC_R_T(s[4905]);
initEMPINC_R_NI2(s[4906]);
initEMPINC_R_NI3(s[4907]);
initEMPINC_R_NI4(s[4908]);
initEMPINC_P_S(s[4909]);
initEMPINC_P_F(s[4910]);
initEMPINC_P_T(s[4911]);
initEMPINC_P_NI2(s[4912]);
initEMPINC_P_NI3(s[4913]);
initEMPINC_P_NI4(s[4914]);
initSEINC_BU_S(s[4915]);
initSEINC_BU_F(s[4916]);
initSEINC_BU_T(s[4917]);
initSEINC_BU_NI2(s[4918]);
initSEINC_BU_NI3(s[4919]);
initSEINC_BU_NI4(s[4920]);
initEQSEINC_BU_S(s[4921]);
initEQSEINC_BU_F(s[4922]);
initEQSEINC_BU_T(s[4923]);
initEQSEINC_BU_NI2(s[4924]);
initEQSEINC_BU_NI3(s[4925]);
initEQSEINC_BU_NI4(s[4926]);
initSEINC_R_S(s[4927]);
initSEINC_R_F(s[4928]);
initSEINC_R_T(s[4929]);
initSEINC_R_NI2(s[4930]);
initSEINC_R_NI3(s[4931]);
initSEINC_R_NI4(s[4932]);
initSEINC_P_S(s[4933]);
initSEINC_P_F(s[4934]);
initSEINC_P_T(s[4935]);
initSEINC_P_NI2(s[4936]);
initSEINC_P_NI3(s[4937]);
initSEINC_P_NI4(s[4938]);
initPPINC_BU_S(s[4939]);
initPPINC_BU_F(s[4940]);
initPPINC_BU_T(s[4941]);
initPPINC_BU_NI2(s[4942]);
initPPINC_BU_NI3(s[4943]);
initPPINC_BU_NI4(s[4944]);
initEQPPINC_BU_S(s[4945]);
initEQPPINC_BU_F(s[4946]);
initEQPPINC_BU_T(s[4947]);
initEQPPINC_BU_NI2(s[4948]);
initEQPPINC_BU_NI3(s[4949]);
initEQPPINC_BU_NI4(s[4950]);
initPPINC_R_S(s[4951]);
initPPINC_R_F(s[4952]);
initPPINC_R_T(s[4953]);
initPPINC_R_NI2(s[4954]);
initPPINC_R_NI3(s[4955]);
initPPINC_R_NI4(s[4956]);
initPPINC_P_S(s[4957]);
initPPINC_P_F(s[4958]);
initPPINC_P_T(s[4959]);
initPPINC_P_NI2(s[4960]);
initPPINC_P_NI3(s[4961]);
initPPINC_P_NI4(s[4962]);
initSPINC_BU_S(s[4963]);
initSPINC_BU_F(s[4964]);
initSPINC_BU_T(s[4965]);
initSPINC_BU_NI2(s[4966]);
initSPINC_BU_NI3(s[4967]);
initSPINC_BU_NI4(s[4968]);
initEQSPINC_BU_S(s[4969]);
initEQSPINC_BU_F(s[4970]);
initEQSPINC_BU_T(s[4971]);
initEQSPINC_BU_NI2(s[4972]);
initEQSPINC_BU_NI3(s[4973]);
initEQSPINC_BU_NI4(s[4974]);
initSPINC_R_S(s[4975]);
initSPINC_R_F(s[4976]);
initSPINC_R_T(s[4977]);
initSPINC_R_NI2(s[4978]);
initSPINC_R_NI3(s[4979]);
initSPINC_R_NI4(s[4980]);
initSPINC_P_S(s[4981]);
initSPINC_P_F(s[4982]);
initSPINC_P_T(s[4983]);
initSPINC_P_NI2(s[4984]);
initSPINC_P_NI3(s[4985]);
initSPINC_P_NI4(s[4986]);
initBENINC_BU_S(s[4987]);
initBENINC_BU_F(s[4988]);
initBENINC_BU_T(s[4989]);
initBENINC_BU_NI2(s[4990]);
initBENINC_BU_NI3(s[4991]);
initBENINC_BU_NI4(s[4992]);
initEQBENINC_BU_S(s[4993]);
initEQBENINC_BU_F(s[4994]);
initEQBENINC_BU_T(s[4995]);
initEQBENINC_BU_NI2(s[4996]);
initEQBENINC_BU_NI3(s[4997]);
initEQBENINC_BU_NI4(s[4998]);
initBENINC_R_S(s[4999]);
initBENINC_R_F(s[5000]);
initBENINC_R_T(s[5001]);
initBENINC_R_NI2(s[5002]);
initBENINC_R_NI3(s[5003]);
initBENINC_R_NI4(s[5004]);
initBENINC_P_S(s[5005]);
initBENINC_P_F(s[5006]);
initBENINC_P_T(s[5007]);
initBENINC_P_NI2(s[5008]);
initBENINC_P_NI3(s[5009]);
initBENINC_P_NI4(s[5010]);
initASSINC_BU_S(s[5011]);
initASSINC_BU_F(s[5012]);
initASSINC_BU_T(s[5013]);
initASSINC_BU_NI2(s[5014]);
initASSINC_BU_NI3(s[5015]);
initASSINC_BU_NI4(s[5016]);
initEQASSINC_BU_S(s[5017]);
initEQASSINC_BU_F(s[5018]);
initEQASSINC_BU_T(s[5019]);
initEQASSINC_BU_NI2(s[5020]);
initEQASSINC_BU_NI3(s[5021]);
initEQASSINC_BU_NI4(s[5022]);
initOTHINC_BU_S(s[5023]);
initOTHINC_BU_F(s[5024]);
initOTHINC_BU_T(s[5025]);
initOTHINC_BU_NI2(s[5026]);
initOTHINC_BU_NI3(s[5027]);
initOTHINC_BU_NI4(s[5028]);
initEQOTHINC_BU_S(s[5029]);
initEQOTHINC_BU_F(s[5030]);
initEQOTHINC_BU_T(s[5031]);
initEQOTHINC_BU_NI2(s[5032]);
initEQOTHINC_BU_NI3(s[5033]);
initEQOTHINC_BU_NI4(s[5034]);
initOTHINC_R_S(s[5035]);
initOTHINC_R_F(s[5036]);
initOTHINC_R_T(s[5037]);
initOTHINC_R_NI2(s[5038]);
initOTHINC_R_NI3(s[5039]);
initOTHINC_R_NI4(s[5040]);
initOTHINC_P_S(s[5041]);
initOTHINC_P_F(s[5042]);
initOTHINC_P_T(s[5043]);
initOTHINC_P_NI2(s[5044]);
initOTHINC_P_NI3(s[5045]);
initOTHINC_P_NI4(s[5046]);
initSAVINGS_BU_S(s[5047]);
initSAVINGS_BU_F(s[5048]);
initSAVINGS_BU_T(s[5049]);
initSAVINGS_BU_NI2(s[5050]);
initSAVINGS_BU_NI3(s[5051]);
initSAVINGS_BU_NI4(s[5052]);
initINVESTS_BU_S(s[5053]);
initINVESTS_BU_F(s[5054]);
initINVESTS_BU_T(s[5055]);
initINVESTS_BU_NI2(s[5056]);
initINVESTS_BU_NI3(s[5057]);
initINVESTS_BU_NI4(s[5058]);
initGROSSFW_BU_S(s[5059]);
initGROSSFW_BU_F(s[5060]);
initGROSSFW_BU_T(s[5061]);
initGROSSFW_BU_NI2(s[5062]);
initGROSSFW_BU_NI3(s[5063]);
initGROSSFW_BU_NI4(s[5064]);
initDEBT_BU_S(s[5065]);
initDEBT_BU_F(s[5066]);
initDEBT_BU_T(s[5067]);
initDEBT_BU_NI2(s[5068]);
initDEBT_BU_NI3(s[5069]);
initDEBT_BU_NI4(s[5070]);
initNETFW_BU_S(s[5071]);
initNETFW_BU_F(s[5072]);
initNETFW_BU_T(s[5073]);
initNETFW_BU_NI2(s[5074]);
initNETFW_BU_NI3(s[5075]);
initNETFW_BU_NI4(s[5076]);
initNETPW_BU_S(s[5077]);
initNETPW_BU_F(s[5078]);
initNETPW_BU_T(s[5079]);
initNETPW_BU_NI2(s[5080]);
initNETPW_BU_NI3(s[5081]);
initNETPW_BU_NI4(s[5082]);
initGROSSTOTNHW_BU_S(s[5083]);
initGROSSTOTNHW_BU_F(s[5084]);
initGROSSTOTNHW_BU_T(s[5085]);
initGROSSTOTNHW_BU_NI2(s[5086]);
initGROSSTOTNHW_BU_NI3(s[5087]);
initGROSSTOTNHW_BU_NI4(s[5088]);
initNETTOTNHW_BU_S(s[5089]);
initNETTOTNHW_BU_F(s[5090]);
initNETTOTNHW_BU_T(s[5091]);
initNETTOTNHW_BU_NI2(s[5092]);
initNETTOTNHW_BU_NI3(s[5093]);
initNETTOTNHW_BU_NI4(s[5094]);
initGROSSHW_BU_S(s[5095]);
initGROSSHW_BU_F(s[5096]);
initGROSSHW_BU_T(s[5097]);
initGROSSHW_BU_NI2(s[5098]);
initGROSSHW_BU_NI3(s[5099]);
initGROSSHW_BU_NI4(s[5100]);
initNETHW_BU_S(s[5101]);
initNETHW_BU_F(s[5102]);
initNETHW_BU_T(s[5103]);
initNETHW_BU_NI2(s[5104]);
initNETHW_BU_NI3(s[5105]);
initNETHW_BU_NI4(s[5106]);
initMGDEBT_BU_S(s[5107]);
initMGDEBT_BU_F(s[5108]);
initMGDEBT_BU_T(s[5109]);
initMGDEBT_BU_NI2(s[5110]);
initMGDEBT_BU_NI3(s[5111]);
initMGDEBT_BU_NI4(s[5112]);
initNETTOTW_BU_S(s[5113]);
initNETTOTW_BU_F(s[5114]);
initNETTOTW_BU_T(s[5115]);
initNETTOTW_BU_NI2(s[5116]);
initNETTOTW_BU_NI3(s[5117]);
initNETTOTW_BU_NI4(s[5118]);
initYQ5_BU_S(s[5119]);
initYQ5_BU_F(s[5120]);
initYQ10_BU_S(s[5121]);
initYQ10_BU_F(s[5122]);
initTNHWQ5_BU_S(s[5123]);
initTNHWQ5_BU_F(s[5124]);
initTNHWQ10_BU_S(s[5125]);
initTNHWQ10_BU_F(s[5126]);
initNFWQ5_BU_S(s[5127]);
initNFWQ5_BU_F(s[5128]);
initNFWQ10_BU_S(s[5129]);
initNFWQ10_BU_F(s[5130]);
initTOTWQ5_BU_S(s[5131]);
initTOTWQ5_BU_F(s[5132]);
initTOTWQ10_BU_S(s[5133]);
initTOTWQ10_BU_F(s[5134]);
initIDAUNIQ(s[5135]);
initIDAHH(s[5136]);
initHHID(s[5137]);
initWGT(s[5138]);
initLWGT(s[5139]);
initWAVE(s[5140]);
initPERID(s[5141]);
initPERSNO(s[5142]);
initCOUPID(s[5143]);
initCOUPID_INST(s[5144]);
initXCOUPID(s[5145]);
initXCOUPID_INST(s[5146]);
initFUTYPE(s[5147]);
initFUID(s[5148]);
initFUID_INST(s[5149]);
initBUNO(s[5150]);
initCPID(s[5151]);
initIDAUNIQ_P(s[5152]);
initINTDATM(s[5153]);
initINTDATY(s[5154]);
initIINTDATM(s[5155]);
initIINTDATY(s[5156]);
initAGE(s[5157]);
initAGE_P(s[5158]);
initINDOBYR(s[5159]);
initINDOBYR_P(s[5160]);
initSEX(s[5161]);
initSEX_P(s[5162]);
initELSA(s[5163]);
initELSA_P(s[5164]);
initINST(s[5165]);
initINST_P(s[5166]);
initRESPONDED_P(s[5167]);
initDIED_P(s[5168]);
initCOUPLE(s[5169]);
initHHANSHO(s[5170]);
initIANSHO(s[5171]);
initIANSIA(s[5172]);
initNUMANSIA(s[5173]);
initNUMANSIAFU(s[5174]);
initPROXY(s[5175]);
initNONWHITE(s[5176]);
initREFRESHTYPE(s[5177]);
initNUMBUS(s[5178]);
initNUMINELIG(s[5179]);
initNSAMPMEM(s[5180]);
initHOH(s[5181]);
initRELTOHOH(s[5182]);
initHOHSP(s[5183]);
initBUHEAD(s[5184]);
initFIRSTBU(s[5185]);
initNPEOPLE(s[5186]);
initNUMHHAD(s[5187]);
initNUMBUAD(s[5188]);
initNUMBUKID(s[5189]);
initNUMHHKID(s[5190]);
initAGEBUHEAD(s[5191]);
initAGEBUSP(s[5192]);
initSEXBUHEAD(s[5193]);
initAGEHOH(s[5194]);
initSEXHOH(s[5195]);
initNUMMALE(s[5196]);
initNUMFEMALE(s[5197]);
initNUMMALEAD(s[5198]);
initNUMFEMALEAD(s[5199]);
initAGEHHCH1(s[5200]);
initAGEHHCH2(s[5201]);
initAGEHHCH3(s[5202]);
initAGEHHCH4(s[5203]);
initAGEHHCH5(s[5204]);
initAGEHHCH6(s[5205]);
initAGEHHCH7(s[5206]);
initAGEHHCH8(s[5207]);
initAGEBUCH1(s[5208]);
initAGEBUCH2(s[5209]);
initAGEBUCH3(s[5210]);
initAGEBUCH4(s[5211]);
initAGEBUCH5(s[5212]);
initAGEBUCH6(s[5213]);
initAGEBUCH7(s[5214]);
initAGEBUCH8(s[5215]);
initCHAGE1(s[5216]);
initCHSEX1(s[5217]);
initCHTYPE1(s[5218]);
initCHSTAT1(s[5219]);
initCHAGE2(s[5220]);
initCHSEX2(s[5221]);
initCHTYPE2(s[5222]);
initCHSTAT2(s[5223]);
initCHAGE3(s[5224]);
initCHSEX3(s[5225]);
initCHTYPE3(s[5226]);
initCHSTAT3(s[5227]);
initCHAGE4(s[5228]);
initCHSEX4(s[5229]);
initCHTYPE4(s[5230]);
initCHSTAT4(s[5231]);
initCHAGE5(s[5232]);
initCHSEX5(s[5233]);
initCHTYPE5(s[5234]);
initCHSTAT5(s[5235]);
initCHAGE6(s[5236]);
initCHSEX6(s[5237]);
initCHTYPE6(s[5238]);
initCHSTAT6(s[5239]);
initCHAGE7(s[5240]);
initCHSEX7(s[5241]);
initCHTYPE7(s[5242]);
initCHSTAT7(s[5243]);
initCHAGE8(s[5244]);
initCHSEX8(s[5245]);
initCHTYPE8(s[5246]);
initCHSTAT8(s[5247]);
initCHAGE9(s[5248]);
initCHSEX9(s[5249]);
initCHTYPE9(s[5250]);
initCHSTAT9(s[5251]);
initCHAGE10(s[5252]);
initCHSEX10(s[5253]);
initCHTYPE10(s[5254]);
initCHSTAT10(s[5255]);
initCHAGE11(s[5256]);
initCHSEX11(s[5257]);
initCHTYPE11(s[5258]);
initCHSTAT11(s[5259]);
initCHAGE12(s[5260]);
initCHSEX12(s[5261]);
initCHTYPE12(s[5262]);
initCHSTAT12(s[5263]);
initCHAGE13(s[5264]);
initCHSEX13(s[5265]);
initCHTYPE13(s[5266]);
initCHSTAT13(s[5267]);
initCHAGE14(s[5268]);
initCHSEX14(s[5269]);
initCHTYPE14(s[5270]);
initCHSTAT14(s[5271]);
initCHAGE15(s[5272]);
initCHSEX15(s[5273]);
initCHTYPE15(s[5274]);
initCHSTAT15(s[5275]);
initCHAGE16(s[5276]);
initCHSEX16(s[5277]);
initCHTYPE16(s[5278]);
initCHSTAT16(s[5279]);
initNGRANDCH(s[5280]);
initNGRANDCHINHH(s[5281]);
initNSIBS(s[5282]);
initFAMTYPE(s[5283]);
initBUTYPE(s[5284]);
initAGEG5(s[5285]);
initAGEG5_BU(s[5286]);
initAGEG7(s[5287]);
initAGEG7_BU(s[5288]);
initAGEG10(s[5289]);
initAGEG10_BU(s[5290]);
initAGEG3(s[5291]);
initAGEG3_BU(s[5292]);
initSPAGE(s[5293]);
initSPAGE_BU(s[5294]);
initNUMBUK013(s[5295]);
initNUMBUK1418(s[5296]);
initNUMHHK013(s[5297]);
initNUMHHK1418(s[5298]);
initBUEQ(s[5299]);
initHHEQ(s[5300]);
initTENURE(s[5301]);
initSOCRENT(s[5302]);
initNUMHHLDRSINHH(s[5303]);
initAGEHHLDR1(s[5304]);
initAGEHHLDR2(s[5305]);
initAGEHHLDR3(s[5306]);
initAGEHHLDR4(s[5307]);
initNAMEONPROP(s[5308]);
initSPNAMEONPROP(s[5309]);
initMARSTAT(s[5310]);
initHHGRIDDHWORK(s[5311]);
initHHGRIDDHWORK_P(s[5312]);
initWPACTIVE(s[5313]);
initWPACTIVE_P(s[5314]);
initWSELFD(s[5315]);
initWSELFD_P(s[5316]);
initECPOS(s[5317]);
initWORKTIME(s[5318]);
initHOURS(s[5319]);
initHOURS_AJ(s[5320]);
initEVERWORK(s[5321]);
initPP_MEM(s[5322]);
initPP_CONT(s[5323]);
initPP_NCONT(s[5324]);
initPP_OCC(s[5325]);
initPP_NOCC(s[5326]);
initPP_OCCDB(s[5327]);
initPP_NOCCDB(s[5328]);
initPP_OCCDC(s[5329]);
initPP_NOCCDC(s[5330]);
initPP_OCCNK(s[5331]);
initPP_NOCCNK(s[5332]);
initPP_PER(s[5333]);
initPP_NPER(s[5334]);
initPP_NK(s[5335]);
initPP_NNK(s[5336]);
initPP_REC(s[5337]);
initPP_NREC(s[5338]);
initPP_RR(s[5339]);
initPP_NRR(s[5340]);
initPP_MAXYRS(s[5341]);
initEDEND(s[5342]);
initEDQUAL(s[5343]);
initQUAL2(s[5344]);
initQUAL3(s[5345]);
initSCHLEAVE(s[5346]);
initQUAL2_P(s[5347]);
initQUAL3_P(s[5348]);
initSCHLEAVE_P(s[5349]);
initLACKRES(s[5350]);
initLACKRESB(s[5351]);
initINHERGT0(s[5352]);
initINHERGT0B(s[5353]);
initINHERGT10(s[5354]);
initINHERGT10B(s[5355]);
initINHERGT100(s[5356]);
initINHERGT100B(s[5357]);
initBEQUESTGT50(s[5358]);
initBEQUESTGT50B(s[5359]);
initBEQUESTGT0(s[5360]);
initBEQUESTGT0B(s[5361]);
initBEQUESTGT150(s[5362]);
initBEQUESTGT150B(s[5363]);
initEXPLIVE(s[5364]);
initEXPLIVEB(s[5365]);
initEXPLIVE75(s[5366]);
initEXPLIVE80(s[5367]);
initEXPLIVE85(s[5368]);
initEXPLIVE90(s[5369]);
initEXPLIVE95(s[5370]);
initEXPLIVE100(s[5371]);
initEXPLIVE75B(s[5372]);
initEXPLIVE80B(s[5373]);
initEXPLIVE85B(s[5374]);
initEXPLIVE90B(s[5375]);
initEXPLIVE95B(s[5376]);
initEXPLIVE100B(s[5377]);
initEXWORK(s[5378]);
initEXWORKB(s[5379]);
initEXWORK55(s[5380]);
initEXWORK55B(s[5381]);
initEXWORK60(s[5382]);
initEXWORK60B(s[5383]);
initEXWORK65(s[5384]);
initEXWORK65B(s[5385]);
initEXHLIMW(s[5386]);
initEXHLIMWB(s[5387]);
initFINDIFF(s[5388]);
initNDEPRIV(s[5389]);
initSRH_HRS(s[5390]);
initSRH_HSE(s[5391]);
initHRSFIRST(s[5392]);
initSRH3_HRS(s[5393]);
initSRH3_HSE(s[5394]);
initSRH3_HRS_P(s[5395]);
initSRH3_HSE_P(s[5396]);
initLLSILL(s[5397]);
initHLIMWRK(s[5398]);
initHLIMWRKC(s[5399]);
initHEMOBWA(s[5400]);
initHEMOBSI(s[5401]);
initHEMOBCH(s[5402]);
initHEMOBCS(s[5403]);
initHEMOBCL(s[5404]);
initHEMOBST(s[5405]);
initHEMOBRE(s[5406]);
initHEMOBPU(s[5407]);
initHEMOBLI(s[5408]);
initHEMOBPI(s[5409]);
initHEMOB96(s[5410]);
initHEADLDR(s[5411]);
initHEADLWA(s[5412]);
initHEADLBA(s[5413]);
initHEADLEA(s[5414]);
initHEADLBE(s[5415]);
initHEADLWC(s[5416]);
initHEADLMA(s[5417]);
initHEADLDA(s[5418]);
initHEADLPR(s[5419]);
initHEADLSH(s[5420]);
initHEADLPH(s[5421]);
initHEADLCO(s[5422]);
initHEADLME(s[5423]);
initHEADLHO(s[5424]);
initHEADLMO(s[5425]);
initHEADL96(s[5426]);
initSMOKER(s[5427]);
initSMOKERSTAT(s[5428]);
initMALIVE(s[5429]);
initMOTHAGE(s[5430]);
initMAGEDIED(s[5431]);
initFALIVE(s[5432]);
initFATHAGE(s[5433]);
initFAGEDIED(s[5434]);
initDIKLIVM(s[5435]);
initDIFJOBM(s[5436]);
initNRIGHT(s[5437]);
initNUMTYPE5(s[5438]);
initNUMTYPE4(s[5439]);
initNUMTYPE2(s[5440]);
initEXECNN(s[5441]);
initMEMTOT(s[5442]);
initMEMTOTB(s[5443]);
initMAXNUMTYPE5(s[5444]);
initMAXNUMTYPE4(s[5445]);
initMAXNUMTYPE2(s[5446]);
initMAXEXECNN(s[5447]);
initMAXMEMTOT(s[5448]);
initMAXMEMTOTB(s[5449]);
initCESD_SC(s[5450]);
initCESD_NA(s[5451]);
initNROOMS(s[5452]);
initHOOLDM(s[5453]);
initHOMOVEM(s[5454]);
initHOYEARM(s[5455]);
initHOPAYM(s[5456]);
initRPI(s[5457]);
initFOODINL(s[5458]);
initFOODINU(s[5459]);
initFOODINT(s[5460]);
initFOODOUTL(s[5461]);
initFOODOUTU(s[5462]);
initFOODOUTT(s[5463]);
initCLOTHESL(s[5464]);
initCLOTHESU(s[5465]);
initCLOTHEST(s[5466]);
initLEISUREL(s[5467]);
initLEISUREU(s[5468]);
initLEISURET(s[5469]);
initTRANSFERSL(s[5470]);
initTRANSFERSU(s[5471]);
initTRANSFERST(s[5472]);
initUSESGAS(s[5473]);
initUSESELEC(s[5474]);
initUSESCOAL(s[5475]);
initUSESPARA(s[5476]);
initUSESOIL(s[5477]);
initUSESWOOD(s[5478]);
initUSESOTHERF(s[5479]);
initGASELECT(s[5480]);
initGASELECL(s[5481]);
initGASELECU(s[5482]);
initGASELECMETH(s[5483]);
initGAST(s[5484]);
initGASL(s[5485]);
initGASU(s[5486]);
initGASMETH(s[5487]);
initELECT(s[5488]);
initELECL(s[5489]);
initELECU(s[5490]);
initELECMETH(s[5491]);
initCOALL(s[5492]);
initCOALU(s[5493]);
initCOALT(s[5494]);
initPARAL(s[5495]);
initPARAU(s[5496]);
initPARAT(s[5497]);
initOILL(s[5498]);
initOILU(s[5499]);
initOILT(s[5500]);
initWOODL(s[5501]);
initWOODU(s[5502]);
initWOODT(s[5503]);
initOTHERFL(s[5504]);
initOTHERFU(s[5505]);
initOTHERFT(s[5506]);
initGROSSRENTL(s[5507]);
initGROSSRENTU(s[5508]);
initGROSSRENTT(s[5509]);
initGETSHB(s[5510]);
initNETRENTL(s[5511]);
initNETRENTU(s[5512]);
initNETRENTT(s[5513]);
initRENTINCWA(s[5514]);
initRENTINCSE(s[5515]);
initRENTINCLA(s[5516]);
initRENTINCGA(s[5517]);
initRENTINCHE(s[5518]);
initRENTINCCO(s[5519]);
initRENTINCME(s[5520]);
initRENTINCGD(s[5521]);
initRENTINCCL(s[5522]);
initRENTINCWP(s[5523]);
initRENTINCSG(s[5524]);
initRENTINC85(s[5525]);
initMORTPAYL(s[5526]);
initMORTPAYU(s[5527]);
initMORTPAYT(s[5528]);
initMORTPAYXL(s[5529]);
initMORTPAYXU(s[5530]);
initMORTPAYXT(s[5531]);
initMORTINCPP(s[5532]);
initMORTINCBI(s[5533]);
initMORTINCPI(s[5534]);
initMORTINC85(s[5535]);
initIDAUNIQ(s[5536]);
initPENID(s[5537]);
initPENTYPE_WAVE1(s[5538]);
initWPDPS(s[5539]);
initWPKP(s[5540]);
initWPKPC(s[5541]);
initWPPDES(s[5542]);
initWPOARS(s[5543]);
initWPCOS(s[5544]);
initWPYBS(s[5545]);
initWPERC(s[5546]);
initWPMC(s[5547]);
initWPMCA(s[5548]);
initWPPERC(s[5549]);
initWPMFRC(s[5550]);
initWPYCAT(s[5551]);
initWPYCA(s[5552]);
initWPMCAF(s[5553]);
initWPYFRA(s[5554]);
initWPACON(s[5555]);
initWPACOA(s[5556]);
initWPACOB(s[5557]);
initWPACOC(s[5558]);
initWPFRAS(s[5559]);
initWPCONY(s[5560]);
initWPADY(s[5561]);
initWPMMIN(s[5562]);
initWPMUC(s[5563]);
initWPAUC(s[5564]);
initWPPER(s[5565]);
initWPFRUC(s[5566]);
initWPANYC(s[5567]);
initWPACAT(s[5568]);
initWPECON(s[5569]);
initWPECNA(s[5570]);
initWPEPER(s[5571]);
initWPEFS(s[5572]);
initWPNRA(s[5573]);
initWPBTHA(s[5574]);
initWPBTHP(s[5575]);
initWPERA(s[5576]);
initWPYAER(s[5577]);
initWPDSP(s[5578]);
initWPDSPC(s[5579]);
initWPFSAP(s[5580]);
initWPFSAPC(s[5581]);
initWPPLP(s[5582]);
initWPPLPH(s[5583]);
initWPLUMP(s[5584]);
initWPLUL(s[5585]);
initWPLUU(s[5586]);
initWPLUE(s[5587]);
initWPLUR(s[5588]);
initWPPTP(s[5589]);
initWPPSAL(s[5590]);
initWPASAL(s[5591]);
initWPASL(s[5592]);
initWPASU(s[5593]);
initWPASE(s[5594]);
initWPASR(s[5595]);
initWPFSAV(s[5596]);
initWPPFVA(s[5597]);
initWPPFL(s[5598]);
initWPPFU(s[5599]);
initWPPFE(s[5600]);
initWPPFR(s[5601]);
initWPAPF(s[5602]);
initWPAPL(s[5603]);
initWPAPU(s[5604]);
initWPAPE(s[5605]);
initWPAPR(s[5606]);
initWPPTOP(s[5607]);
initWPPENB(s[5608]);
initWPPETL(s[5609]);
initWPPETU(s[5610]);
initWPPETE(s[5611]);
initWPPETR(s[5612]);
initWPPEAL(s[5613]);
initWPPEAU(s[5614]);
initWPPEAE(s[5615]);
initWPPEAR(s[5616]);
initWPCONS(s[5617]);
initWPPLON(s[5618]);
initWPPCON(s[5619]);
initWPHCON(s[5620]);
initWPCAMT(s[5621]);
initWPCPER(s[5622]);
initWPNIFP(s[5623]);
initWPLCOY(s[5624]);
initWPLCOM(s[5625]);
initWPMCON(s[5626]);
initWPAC(s[5627]);
initWPNIRR(s[5628]);
initWPLASY(s[5629]);
initWPLASM(s[5630]);
initWPMLAS(s[5631]);
initWPLASP(s[5632]);
initWPRCON(s[5633]);
initWPRSC1(s[5634]);
initWPRSC2(s[5635]);
initWPRSC3(s[5636]);
initWPRSM1(s[5637]);
initWPRSM2(s[5638]);
initWPRSM3(s[5639]);
initWPCEMP(s[5640]);
initWPMEC(s[5641]);
initWPAMEC(s[5642]);
initWPFSCP(s[5643]);
initWPFSCO(s[5644]);
initWPCUV(s[5645]);
initWPCUL(s[5646]);
initWPCUU(s[5647]);
initWPCUE(s[5648]);
initWPCUR(s[5649]);
initWPPEXP(s[5650]);
initWPAMOU(s[5651]);
initWPAMTL(s[5652]);
initWPAMTU(s[5653]);
initWPAMTE(s[5654]);
initWPAMTR(s[5655]);
initWPAMAL(s[5656]);
initWPAMAU(s[5657]);
initWPAMAE(s[5658]);
initWPAMAR(s[5659]);
initWPYPEN(s[5660]);
initWPCB(s[5661]);
initWPCBL(s[5662]);
initWPCBU(s[5663]);
initWPCBE(s[5664]);
initWPCBR(s[5665]);
initWPSRC(s[5666]);
initWPMRC(s[5667]);
initWPMRCP(s[5668]);
initWPLRCY(s[5669]);
initWPLRCM(s[5670]);
initWPLAC(s[5671]);
initWPCON(s[5672]);
initWPLPE(s[5673]);
initWPLPA(s[5674]);
initWPLPTL(s[5675]);
initWPLPTU(s[5676]);
initWPLPTE(s[5677]);
initWPLPTR(s[5678]);
initWPLPAL(s[5679]);
initWPLPAU(s[5680]);
initWPLPAE(s[5681]);
initWPLPAR(s[5682]);
initWPIFS1(s[5683]);
initWPIFS2(s[5684]);
initWPIFS3(s[5685]);
initWPIFS4(s[5686]);
initWPFINF(s[5687]);
initWPREC(s[5688]);
initWPMSC(s[5689]);
initWPDS(s[5690]);
initWPDE(s[5691]);
initWPRGH(s[5692]);
initWPPAM(s[5693]);
initWPPA(s[5694]);
initWPPATL(s[5695]);
initWPPATU(s[5696]);
initWPPATE(s[5697]);
initWPPATR(s[5698]);
initWPPAAL(s[5699]);
initWPPAAU(s[5700]);
initWPPAAE(s[5701]);
initWPPAAR(s[5702]);
initWPINF(s[5703]);
initWPPAY(s[5704]);
initWPPYR(s[5705]);
initWPPYWL(s[5706]);
initWPPYWU(s[5707]);
initWPPYWE(s[5708]);
initWPPYWR(s[5709]);
initWPPYFL(s[5710]);
initWPPYFU(s[5711]);
initWPPYFE(s[5712]);
initWPPYFR(s[5713]);
initWPPYML(s[5714]);
initWPPYMU(s[5715]);
initWPPYME(s[5716]);
initWPPYMR(s[5717]);
initWPPYYL(s[5718]);
initWPPYYU(s[5719]);
initWPPYYE(s[5720]);
initWPPYYR(s[5721]);
initWPPYOL(s[5722]);
initWPPYOU(s[5723]);
initWPPYOE(s[5724]);
initWPPYOR(s[5725]);
initWPTAX(s[5726]);
initDEMPPEN(s[5727]);
initDDBDC(s[5728]);
initDCURPEN(s[5729]);
initIDAUNIQ(s[5730]);
initIDAIND(s[5731]);
initIDAHH(s[5732]);
initPRIPEN_2002(s[5733]);
initSTATEPEN_2002(s[5734]);
initPRIPEN_SPA(s[5735]);
initSTATEPEN_SPA(s[5736]);
initPRIPENW2_2002(s[5737]);
initSTATEPENW2_2002(s[5738]);
initPRIPENW2_SPA(s[5739]);
initSTATEPENW2_SPA(s[5740]);
initPRIPENW3_2002(s[5741]);
initSTATEPENW3_2002(s[5742]);
initPRIPENW3_SPA(s[5743]);
initSTATEPENW3_SPA(s[5744]);
initPRIPENW4_2002(s[5745]);
initSTATEPENW4_2002(s[5746]);
initPRIPENW4_SPA(s[5747]);
initSTATEPENW4_SPA(s[5748]);
initPRIPENW5_2002(s[5749]);
initSTATEPENW5_2002(s[5750]);
initPRIPENW5_SPA(s[5751]);
initSTATEPENW5_SPA(s[5752]);
initPRIPENW6_2002(s[5753]);
initSTATEPENW6_2002(s[5754]);
initPRIPENW6_SPA(s[5755]);
initSTATEPENW6_SPA(s[5756]);
initPRIPENW7_2002(s[5757]);
initSTATEPENW7_2002(s[5758]);
initPRIPENW7_SPA(s[5759]);
initSTATEPENW7_SPA(s[5760]);
initPRIPENW8_2002(s[5761]);
initSTATEPENW8_2002(s[5762]);
initPRIPENW8_SPA(s[5763]);
initSTATEPENW8_SPA(s[5764]);
initPRIPENW9_2002(s[5765]);
initSTATEPENW9_2002(s[5766]);
initPRIPENW9_SPA(s[5767]);
initSTATEPENW9_SPA(s[5768]);
initPEN_DB(s[5769]);
initPEN_DC(s[5770]);
initPEN_DK(s[5771]);
initPEN_ANY(s[5772]);
initPUBPEN(s[5773]);
}
}
