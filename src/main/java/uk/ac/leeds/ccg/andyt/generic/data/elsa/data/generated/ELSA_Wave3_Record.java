/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.elsa.process.ELSA_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.elsa.data.generated;
public class ELSA_Wave3_Record extends ELSA_Waves1To8_Record {
protected byte ACCUR;
protected double ADDPEN_06;
protected double ADDPEN_SPA;
protected byte ALLADCH;
protected byte ALLFSCH;
protected byte ALLNATCH;
protected byte ALLSPCH;
protected byte ALLTOTCH;
protected byte ALONE;
protected byte ASKINST;
protected boolean ASKPX;
protected byte BRETHS;
protected double BSP_06;
protected double BSP_SPA;
protected byte CARERS_P_F;
protected double CARERS_P_I;
protected short CARERS_P_O;
protected short CARERS_P_T;
protected byte CARERS_R_F;
protected double CARERS_R_I;
protected short CARERS_R_O;
protected short CARERS_R_T;
protected byte CASP19;
protected byte CASPAUT;
protected byte CASPCTL;
protected byte CASPPLE;
protected byte CASPSR;
protected double CFACCUR;
protected byte CFANI;
protected byte CFANIG;
protected byte CFEXIND;
protected byte CFIND;
protected byte CFLETEN;
protected byte CFMEIND;
protected byte CFMEM;
protected byte CFMEMS;
protected byte CFMERSP;
protected byte CFMETM;
protected byte CFMETMT;
protected byte CFPASCR;
protected byte CFPRMEM;
protected byte CFPROM;
protected double CFRECAL;
protected byte CFSPEED;
protected byte CFWHM85;
protected byte CFWHM86;
protected byte CFWHMALC;
protected byte CFWHMCON;
protected byte CFWHMDIS;
protected byte CFWHMENG;
protected byte CFWHMEYE;
protected byte CFWHMHEA;
protected byte CFWHMILL;
protected byte CFWHMLAP;
protected byte CFWHMMEM;
protected byte CFWHMMEN;
protected byte CFWHMNER;
protected byte CFWHMNOI;
protected byte CFWHMREF;
protected byte CFWHMTIR;
protected byte CFWHMUP;
protected byte CFWHOAD;
protected byte CFWHOCHI;
protected byte CFWHONON;
protected byte CFWHOOTH;
protected byte CFWHOPAR;
protected byte CFWHT95;
protected byte CFWHTCON;
protected byte CFWHTDIS;
protected byte CFWHTENG;
protected byte CFWHTEYE;
protected byte CFWHTHEA;
protected byte CFWHTILL;
protected byte CFWHTLAP;
protected byte CFWHTMEN;
protected byte CFWHTNER;
protected byte CFWHTNOI;
protected byte CFWHTTIR;
protected byte CHEACD;
protected byte CHEFLA;
protected byte CHEFRAC;
protected byte CHEJI;
protected byte CHESKA;
protected byte CHESMK;
protected byte CHIADP;
protected byte CHIFST;
protected byte CHINAT;
protected byte CHINHH;
protected byte CHISTP;
protected byte CHITOT;
protected byte CHOADP;
protected byte CHOFST;
protected byte CHONAT;
protected byte CHOSTP;
protected byte CHOTOT;
protected byte CLAUD;
protected boolean CONCUR;
protected byte CTC_P_F;
protected double CTC_P_I;
protected short CTC_P_O;
protected short CTC_P_T;
protected byte CTC_R_F;
protected double CTC_R_I;
protected short CTC_R_O;
protected short CTC_R_T;
protected double CURRENTDB_06;
protected double CURRENTDB_SPA;
protected double CURRENTDC_06;
protected double CURRENTDC_SPA;
protected byte CVD7DBTS;
protected byte CVD7DIHB;
protected byte DCURPEN;
protected byte DDBDC;
protected byte DEMPPEN;
protected byte DHAGER;
protected byte DHC14;
protected byte DHC15;
protected byte DHCAG14;
protected byte DHCAG15;
protected short DHCDBY1;
protected short DHCDBY10;
protected short DHCDBY11;
protected short DHCDBY12;
protected short DHCDBY13;
protected short DHCDBY14;
protected short DHCDBY15;
protected short DHCDBY2;
protected short DHCDBY3;
protected short DHCDBY4;
protected short DHCDBY5;
protected short DHCDBY6;
protected short DHCDBY7;
protected short DHCDBY8;
protected short DHCDBY9;
protected byte DHCR08;
protected byte DHCR09;
protected byte DHCR10;
protected boolean DHCR104;
protected boolean DHCR105;
protected boolean DHCR106;
protected byte DHCR118;
protected boolean DHCR119;
protected boolean DHCR120;
protected boolean DHCR121;
protected boolean DHCR122;
protected byte DHCR134;
protected boolean DHCR135;
protected boolean DHCR136;
protected boolean DHCR137;
protected boolean DHCR138;
protected byte DHCR147;
protected boolean DHCR148;
protected boolean DHCR149;
protected byte DHCR150;
protected boolean DHCR151;
protected boolean DHCR152;
protected boolean DHCR153;
protected boolean DHCR154;
protected boolean DHCR163;
protected boolean DHCR164;
protected boolean DHCR165;
protected byte DHCR166;
protected boolean DHCR167;
protected boolean DHCR168;
protected boolean DHCR169;
protected boolean DHCR170;
protected byte DHCR178;
protected boolean DHCR179;
protected boolean DHCR180;
protected boolean DHCR181;
protected boolean DHCR182;
protected boolean DHCR183;
protected boolean DHCR184;
protected boolean DHCR185;
protected boolean DHCR186;
protected byte DHCR194;
protected boolean DHCR195;
protected boolean DHCR196;
protected boolean DHCR197;
protected boolean DHCR198;
protected boolean DHCR199;
protected boolean DHCR200;
protected boolean DHCR201;
protected boolean DHCR202;
protected byte DHCR209;
protected byte DHCR210;
protected boolean DHCR211;
protected boolean DHCR212;
protected boolean DHCR213;
protected boolean DHCR214;
protected boolean DHCR215;
protected boolean DHCR216;
protected boolean DHCR217;
protected boolean DHCR218;
protected byte DHCR225;
protected boolean DHCR226;
protected boolean DHCR227;
protected boolean DHCR228;
protected boolean DHCR229;
protected boolean DHCR230;
protected boolean DHCR231;
protected boolean DHCR232;
protected boolean DHCR233;
protected boolean DHCR234;
protected byte DHCR24;
protected byte DHCR25;
protected byte DHCR26;
protected byte DHCR40;
protected byte DHCR41;
protected byte DHCR42;
protected byte DHCR56;
protected byte DHCR57;
protected byte DHCR58;
protected byte DHCR72;
protected byte DHCR73;
protected byte DHCR74;
protected boolean DHCR88;
protected boolean DHCR89;
protected boolean DHCR90;
protected byte DHCS14;
protected byte DHCS15;
protected byte DHDOBC;
protected short DHDOBYR;
protected byte DHEACD;
protected byte DHEDIBAD;
protected byte DHEDIBAR;
protected byte DHEDIBAS;
protected byte DHEDIBCA;
protected byte DHEDIBDE;
protected byte DHEDIBLU;
protected byte DHEDIBOS;
protected byte DHEDIBPD;
protected byte DHEDIBPS;
protected byte DHEDIMAN;
protected byte DHEDIMAR;
protected byte DHEDIMBP;
protected byte DHEDIMCH;
protected byte DHEDIMDI;
protected byte DHEDIMHF;
protected byte DHEDIMHM;
protected byte DHEDIMMI;
protected byte DHEDIMST;
protected byte DHEOPTCA;
protected byte DHEOPTDI;
protected byte DHEOPTGL;
protected byte DHEOPTMD;
protected byte DHPA10;
protected byte DHPA11;
protected byte DHPA12;
protected byte DHPA13;
protected byte DHPA14;
protected byte DHPA15;
protected byte DHPA2;
protected byte DHPA3;
protected byte DHPA4;
protected byte DHPA5;
protected byte DHPA6;
protected byte DHPA7;
protected byte DHPA8;
protected byte DHPA9;
protected byte DHPB10;
protected byte DHPB11;
protected byte DHPB12;
protected byte DHPB13;
protected byte DHPB14;
protected byte DHPB15;
protected byte DHPB2;
protected byte DHPB3;
protected byte DHPB4;
protected byte DHPB5;
protected byte DHPB6;
protected byte DHPB7;
protected byte DHPB8;
protected byte DHPB9;
protected boolean DHSEX;
protected byte DHWORK;
protected byte DIAGR;
protected short DIDBNY;
protected byte DIDOB;
protected byte DIGNMYC;
protected byte DIKLIVC;
protected byte DIMAR;
protected byte DISEX;
protected byte DISEXC;
protected byte DISIBC;
protected byte DOBCHK;
protected byte EDQUAMIS;
protected byte ERCAA;
protected byte ERCABCH;
protected byte ERCABFR;
protected byte ERCABGC;
protected byte ERCABOR;
protected byte ERCABOT;
protected byte ERCABPA;
protected byte ERCABPL;
protected byte ERCABSP;
protected short ERCAC;
protected byte ERCADP1;
protected byte ERCADP10;
protected byte ERCADP11;
protected byte ERCADP12;
protected byte ERCADP2;
protected byte ERCADP3;
protected byte ERCADP4;
protected byte ERCADP5;
protected byte ERCADP6;
protected byte ERCADP7;
protected byte ERCADP8;
protected byte ERCADP9;
protected byte ERCALIVE;
protected byte ERCAM85;
protected byte ERCAM86;
protected byte ERCAMCH;
protected byte ERCAMFR;
protected byte ERCAMGC;
protected byte ERCAMOR;
protected byte ERCAMOT;
protected byte ERCAMPA;
protected byte ERCAMPL;
protected byte ERCAMSP;
protected byte ERCANCH;
protected byte ERCANFR;
protected byte ERCANGC;
protected byte ERCANOR;
protected byte ERCANOT;
protected byte ERCANPA;
protected byte ERCANPL;
protected boolean ERCANSP;
protected byte ERCANTT;
protected byte ERCARA;
protected byte ERCARB;
protected byte ERMOCAC;
protected byte ERMOCFI;
protected byte ERMOCMO;
protected byte ERMOCNE;
protected byte ERMOCNJ;
protected byte ERMOCOB;
protected byte ERMOCOT;
protected byte ERMOCSK;
protected byte ERMOCSO;
protected byte ERMOCUS;
protected byte ERMOVAC;
protected byte ERMOVFI;
protected byte ERMOVMO;
protected byte ERMOVNE;
protected byte ERMOVNJ;
protected byte ERMOVOB;
protected byte ERMOVOT;
protected byte ERMOVSK;
protected byte ERMOVSO;
protected byte ERMOVUS;
protected byte ERVOLA;
protected byte ERVOLB;
protected byte EXLO90;
protected byte EXPWF;
protected byte EXREL96;
protected byte EXRELA;
protected byte EXRELB;
protected byte EXRELC;
protected byte EXRELD;
protected byte EXRELEDE;
protected byte EXRELEEL;
protected byte EXRELEFA;
protected byte EXRELEFO;
protected byte EXRELEHO;
protected byte EXRELEME;
protected byte EXRELEOU;
protected byte EXRELEPR;
protected byte EXRELETR;
protected byte FATHER;
protected byte FFCHAG1;
protected byte FFCHAG10;
protected byte FFCHAG11;
protected boolean FFCHAG12;
protected boolean FFCHAG13;
protected byte FFCHAG2;
protected byte FFCHAG3;
protected byte FFCHAG4;
protected byte FFCHAG5;
protected byte FFCHAG6;
protected byte FFCHAG7;
protected byte FFCHAG8;
protected byte FFCHAG9;
protected byte FFCHSX1;
protected byte FFCHSX10;
protected byte FFCHSX11;
protected boolean FFCHSX12;
protected boolean FFCHSX13;
protected byte FFCHSX2;
protected byte FFCHSX3;
protected byte FFCHSX4;
protected byte FFCHSX5;
protected byte FFCHSX6;
protected byte FFCHSX7;
protected byte FFCHSX8;
protected byte FFCHSX9;
protected byte FFCHVAR;
protected byte FFFTEAG;
protected byte FFRELT10;
protected boolean FFRELT11;
protected boolean FFRELT12;
protected boolean FFRELT13;
protected byte FFRELTX;
protected byte FFRELTX2;
protected byte FFRELTX3;
protected byte FFRELTX4;
protected byte FFRELTX5;
protected byte FFRELTX6;
protected byte FFRELTX7;
protected byte FFRELTX8;
protected byte FFRELTX9;
protected String FINSTAT;
protected byte FQAQUA;
protected byte FQCBTHR;
protected short FQCENG;
protected byte FQEND;
protected byte FQETHNR;
protected byte FQQUA95;
protected byte FQQUAALE;
protected byte FQQUAASL;
protected byte FQQUACGA;
protected byte FQQUACGF;
protected byte FQQUACGO;
protected byte FQQUACLE;
protected byte FQQUACS1;
protected byte FQQUACS2;
protected byte FQQUACSU;
protected byte FQQUADEG;
protected byte FQQUAGCA;
protected byte FQQUAGCD;
protected byte FQQUAHNC;
protected byte FQQUAMAT;
protected byte FQQUANUR;
protected byte FQQUANV1;
protected byte FQQUANV2;
protected byte FQQUANV3;
protected byte FQQUANV4;
protected byte FQQUANV5;
protected byte FQQUAOLA;
protected byte FQQUAOLD;
protected byte FQQUAOLP;
protected byte FQQUAONC;
protected byte FQQUASLC;
protected byte FQQUASLL;
protected byte FQQUASUP;
protected byte FQQUATEA;
protected byte FQQUATRA;
protected byte FQQUM85;
protected byte FQQUM86;
protected byte FQQUMALE;
protected byte FQQUMASL;
protected byte FQQUMCGA;
protected byte FQQUMCGF;
protected byte FQQUMCGO;
protected byte FQQUMCLE;
protected byte FQQUMCS1;
protected byte FQQUMCS2;
protected byte FQQUMCSU;
protected byte FQQUMDEG;
protected byte FQQUMDIP;
protected byte FQQUMFOR;
protected byte FQQUMGCA;
protected byte FQQUMGCD;
protected byte FQQUMHNC;
protected byte FQQUMMAT;
protected byte FQQUMMIL;
protected byte FQQUMNNE;
protected byte FQQUMNUR;
protected byte FQQUMNV1;
protected byte FQQUMNV2;
protected byte FQQUMNV3;
protected byte FQQUMNV4;
protected byte FQQUMNV5;
protected byte FQQUMNVZ;
protected byte FQQUMOAC;
protected byte FQQUMOLA;
protected byte FQQUMOLD;
protected byte FQQUMOLP;
protected byte FQQUMONC;
protected byte FQQUMOPR;
protected byte FQQUMOVO;
protected byte FQQUMSLC;
protected byte FQQUMSLL;
protected byte FQQUMSUP;
protected byte FQQUMTEA;
protected byte FQQUMTRA;
protected double FST_TM;
protected byte FTHAGD;
protected byte GCINHH;
protected byte GTSPD_AG;
protected double GTSPD_AV;
protected byte GTSPD_ID;
protected byte HEACE;
protected byte HEACEA;
protected byte HEAGAR;
protected short HEAGARY;
protected byte HEAGBR;
protected short HEAGBRY;
protected byte HEAGCR;
protected short HEAGCRY;
protected byte HEAGDR;
protected short HEAGDRY;
protected byte HEAGER;
protected short HEAGERY;
protected byte HEAGFR;
protected short HEAGFRY;
protected byte HEAGG;
protected byte HEAGGR;
protected short HEAGGRY;
protected byte HEAGH;
protected byte HEAGHR;
protected short HEAGHRY;
protected byte HEAGIR;
protected short HEAGIRY;
protected byte HEAGJR;
protected short HEAGJRY;
protected byte HEAGK;
protected byte HEAGKR;
protected short HEAGKRY;
protected byte HEAID96;
protected byte HEAIDAL;
protected byte HEAIDBU;
protected byte HEAIDCA;
protected byte HEAIDCR;
protected byte HEAIDEA;
protected byte HEAIDEW;
protected byte HEAIDMW;
protected byte HEAIDZI;
protected byte HEAMB;
protected byte HEANA;
protected byte HEANB;
protected byte HEANC;
protected byte HEAND;
protected byte HEAND1;
protected byte HEANE;
protected byte HEANF;
protected byte HEANG;
protected byte HEANH;
protected byte HEANILS;
protected byte HEANIM86;
protected byte HEANIUS;
protected byte HEANK;
protected byte HEANM85;
protected byte HEANMLA;
protected byte HEANMLC;
protected byte HEANMLS;
protected byte HEANMRA;
protected byte HEANMRC;
protected byte HEANMUS;
protected byte HEANS95;
protected byte HEANSLA;
protected byte HEANSLC;
protected byte HEANSRA;
protected byte HEANSRC;
protected byte HEARTA;
protected byte HEARTB;
protected byte HEARTC;
protected byte HEARTD;
protected byte HEARTE;
protected byte HEARTOA;
protected byte HEARTOT;
protected byte HEARTRA;
protected byte HEBPCHK;
protected byte HECANAA;
protected byte HECANBB;
protected byte HECDA;
protected byte HECDB;
protected byte HECDC;
protected byte HECDD;
protected byte HECDD1;
protected byte HECDE;
protected byte HECDFCA;
protected byte HECDFOT;
protected byte HECDFTH;
protected byte HECHMD;
protected byte HECHME;
protected byte HECLUB1;
protected byte HECLUB2;
protected byte HECLUB3;
protected byte HECLUB96;
protected byte HEDACAN;
protected byte HEDACAR;
protected byte HEDACBP;
protected byte HEDACCH;
protected byte HEDACDI;
protected byte HEDACHF;
protected byte HEDACHM;
protected byte HEDACMI;
protected byte HEDACOT;
protected byte HEDACST;
protected byte HEDANAN;
protected byte HEDANAR;
protected byte HEDANBP;
protected byte HEDANCH;
protected byte HEDANDI;
protected byte HEDANHF;
protected byte HEDANHM;
protected byte HEDANMI;
protected byte HEDANOT;
protected byte HEDANST;
protected byte HEDASAN;
protected byte HEDASAR;
protected byte HEDASBP;
protected byte HEDASCH;
protected byte HEDASHF;
protected byte HEDASHM;
protected byte HEDASOT;
protected byte HEDAWAN;
protected byte HEDAWAR;
protected byte HEDAWBP;
protected byte HEDAWCH;
protected byte HEDAWDI;
protected byte HEDAWHF;
protected byte HEDAWHM;
protected byte HEDAWMI;
protected byte HEDAWOT;
protected byte HEDAWST;
protected byte HEDBDAD;
protected byte HEDBDAR;
protected byte HEDBDAS;
protected byte HEDBDCA;
protected byte HEDBDDE;
protected byte HEDBDLU;
protected byte HEDBDOS;
protected byte HEDBDPD;
protected byte HEDBDPS;
protected byte HEDBLU;
protected byte HEDBMAD;
protected byte HEDBMAR;
protected byte HEDBMAS;
protected byte HEDBMCA;
protected byte HEDBMDE;
protected byte HEDBMLU;
protected byte HEDBMOS;
protected byte HEDBMPD;
protected byte HEDBMPS;
protected byte HEDBSAR;
protected byte HEDBSAS;
protected byte HEDBSCA;
protected byte HEDBSDE;
protected byte HEDBSOS;
protected byte HEDBSPD;
protected byte HEDBTS;
protected byte HEDBWAD;
protected byte HEDBWAR;
protected byte HEDBWAS;
protected byte HEDBWCA;
protected byte HEDBWDE;
protected byte HEDBWLU;
protected byte HEDBWOS;
protected byte HEDBWPD;
protected byte HEDBWPS;
protected byte HEDCC;
protected byte HEDENT;
protected byte HEDIA95;
protected byte HEDIA96;
protected byte HEDIAAN;
protected byte HEDIAAR;
protected byte HEDIABP;
protected byte HEDIACH;
protected byte HEDIADI;
protected byte HEDIAHF;
protected byte HEDIAHM;
protected byte HEDIAMI;
protected byte HEDIAST;
protected byte HEDIB96;
protected byte HEDIBAD;
protected byte HEDIBAR;
protected byte HEDIBAS;
protected byte HEDIBBL;
protected byte HEDIBCA;
protected byte HEDIBDE;
protected byte HEDIBLU;
protected byte HEDIBOS;
protected byte HEDIBPD;
protected byte HEDIBPS;
protected byte HEDIM85;
protected byte HEDIM86;
protected byte HEDIM96;
protected byte HEDIMAN;
protected byte HEDIMAR;
protected byte HEDIMBP;
protected byte HEDIMCH;
protected byte HEDIMDI;
protected byte HEDIMHF;
protected byte HEDIMHM;
protected byte HEDIMMI;
protected byte HEDIMST;
protected byte HEDNTA;
protected byte HEDNTB0;
protected byte HEDNTB1;
protected byte HEDNTB2;
protected byte HEDNTB3;
protected byte HEDNTB4;
protected byte HEDNTB5;
protected byte HEFTCHK;
protected byte HEGENH;
protected byte HEHBP;
protected byte HEHBPA;
protected byte HEHBPB;
protected byte HEHBPB1;
protected byte HEHPA;
protected byte HEHPC;
protected byte HEHPD96;
protected byte HEHPDBR;
protected byte HEHPDDA;
protected byte HEHPDDL;
protected byte HEHPDFR;
protected byte HEHPDGD;
protected byte HEHPDGS;
protected byte HEHPDNU;
protected byte HEHPDOR;
protected byte HEHPDOS;
protected byte HEHPDOT;
protected byte HEHPDPA;
protected byte HEHPDPR;
protected byte HEHPDSI;
protected byte HEHPDSL;
protected byte HEHPDSO;
protected byte HEHPDSP;
protected byte HEHPDSS;
protected byte HEHPDVO;
protected byte HEHPH96;
protected byte HEHPHBR;
protected byte HEHPHDA;
protected byte HEHPHDL;
protected byte HEHPHFR;
protected byte HEHPHGD;
protected byte HEHPHGS;
protected byte HEHPHNU;
protected byte HEHPHOR;
protected byte HEHPHOS;
protected byte HEHPHOT;
protected byte HEHPHPA;
protected byte HEHPHPR;
protected byte HEHPHSI;
protected byte HEHPHSL;
protected byte HEHPHSO;
protected byte HEHPHSP;
protected byte HEHPHSS;
protected byte HEHPHVO;
protected byte HEHPM96;
protected byte HEHPMBR;
protected byte HEHPMDA;
protected byte HEHPMDL;
protected byte HEHPMFR;
protected byte HEHPMGD;
protected boolean HEHPMGS;
protected byte HEHPMNU;
protected byte HEHPMOR;
protected byte HEHPMOS;
protected byte HEHPMOT;
protected boolean HEHPMPA;
protected byte HEHPMPR;
protected byte HEHPMSI;
protected byte HEHPMSL;
protected byte HEHPMSO;
protected byte HEHPMSP;
protected byte HEHPMSS;
protected boolean HEHPMVO;
protected byte HEHPP96;
protected byte HEHPPBR;
protected byte HEHPPDA;
protected byte HEHPPDL;
protected byte HEHPPFR;
protected byte HEHPPGD;
protected byte HEHPPGS;
protected byte HEHPPNU;
protected byte HEHPPOR;
protected byte HEHPPOS;
protected byte HEHPPOT;
protected byte HEHPPPA;
protected byte HEHPPPR;
protected byte HEHPPSI;
protected byte HEHPPSL;
protected byte HEHPPSO;
protected byte HEHPPSP;
protected byte HEHPPSS;
protected byte HEHPPVO;
protected byte HEHPS95;
protected byte HEHPS96;
protected byte HEHPSCH;
protected byte HEHPSLE;
protected byte HEHPSOT;
protected byte HEHPSVE;
protected byte HEHPT96;
protected byte HEHPTBR;
protected byte HEHPTDA;
protected byte HEHPTDL;
protected byte HEHPTFR;
protected byte HEHPTGD;
protected byte HEHPTGS;
protected byte HEHPTNU;
protected byte HEHPTOR;
protected byte HEHPTOS;
protected byte HEHPTOT;
protected byte HEHPTPA;
protected byte HEHPTPR;
protected byte HEHPTSI;
protected byte HEHPTSL;
protected byte HEHPTSO;
protected byte HEHPTSP;
protected byte HEHPTSS;
protected byte HEHPTVO;
protected byte HEHPW96;
protected byte HEHPWBR;
protected byte HEHPWDA;
protected byte HEHPWDL;
protected byte HEHPWFR;
protected byte HEHPWGD;
protected byte HEHPWGS;
protected byte HEHPWNU;
protected byte HEHPWOR;
protected byte HEHPWOS;
protected byte HEHPWOT;
protected byte HEHPWPA;
protected byte HEHPWPR;
protected byte HEHPWSI;
protected byte HEHPWSL;
protected byte HEHPWSO;
protected byte HEHPWSP;
protected byte HEHPWSS;
protected byte HEHPWVO;
protected byte HEHRTMD;
protected byte HEHSM85;
protected byte HEHSM86;
protected byte HEHSM96;
protected byte HEHSMAC;
protected byte HEHSMAQ;
protected byte HEHSMCH;
protected byte HEHSMCR;
protected byte HEHSMGY;
protected byte HEHSMHY;
protected byte HEHSMLE;
protected byte HEHSMMA;
protected byte HEHSMOS;
protected byte HEHSMOT;
protected byte HEHSMPE;
protected byte HEHSMTH;
protected byte HEHSMVE;
protected byte HEINCT;
protected byte HEINCTA;
protected byte HEJIAA1;
protected byte HEJIAA2;
protected byte HEJIAA3;
protected byte HEJIAA4;
protected byte HEJIAA5;
protected byte HEJIBLH;
protected byte HEJIBLK;
protected byte HEJIBRH;
protected byte HEJIBRK;
protected byte HEKIDN;
protected byte HEKNEA;
protected byte HEKNEB;
protected byte HEKNEC;
protected byte HELC;
protected byte HELEUK;
protected byte HELNGB;
protected byte HELWK;
protected byte HEMDAB;
protected byte HEMW;
protected byte HENMMI;
protected byte HENMST;
protected byte HEOPCCA;
protected byte HEOPCDI;
protected byte HEOPCGL;
protected byte HEOPCMD;
protected byte HEOPFCA;
protected byte HEOPFDI;
protected byte HEOPFGL;
protected byte HEOPFMD;
protected byte HEOPNCA;
protected byte HEOPNDI;
protected byte HEOPNGL;
protected byte HEOPNMD;
protected byte HEOPSCA;
protected byte HEOPSDI;
protected byte HEOPSGL;
protected byte HEOPSMD;
protected byte HEOPT96;
protected byte HEOPTCA;
protected byte HEOPTDI;
protected byte HEOPTGL;
protected byte HEOPTMD;
protected byte HEPAB;
protected byte HEPAB1;
protected byte HEPAC;
protected byte HEPAD;
protected byte HEPAE;
protected byte HEPAF;
protected byte HEPAF1;
protected byte HEPAK1;
protected byte HEPAWAL;
protected byte HEPAWBA;
protected byte HEPAWFE;
protected byte HEPAWHI;
protected byte HEPAWKN;
protected byte HEPAWMO;
protected byte HEPAWOT;
protected byte HEPRKR;
protected short HEPRKRY;
protected byte HEPSY95;
protected byte HEPSYAN;
protected byte HEPSYDE;
protected byte HEPSYEM;
protected byte HEPSYHA;
protected byte HEPSYMA;
protected byte HEPSYMO;
protected byte HEPSYPS;
protected byte HEPSYSC;
protected byte HEROSMD;
protected byte HERPA;
protected byte HERPB;
protected byte HERPC;
protected byte HERPD;
protected byte HERPE;
protected byte HERPE1;
protected byte HERPF;
protected byte HERPG;
protected byte HERPH;
protected byte HERPI;
protected byte HERPJ;
protected byte HESKD;
protected byte HESKE;
protected byte HESKF;
protected byte HESLFCB;
protected byte HESLFCM;
protected byte HESLFCR;
protected short HESLFCY;
protected byte HESTOP;
protected byte HESTOPC;
protected byte HESUG;
protected byte HESUGA;
protected byte HETEMP;
protected byte HEWEE;
protected byte HEWEEA;
protected byte HOADP95;
protected byte HOADP96;
protected byte HOADPAD;
protected byte HOADPAL;
protected byte HOADPAP;
protected byte HOADPBM;
protected byte HOADPCL;
protected byte HOADPHR;
protected byte HOADPKM;
protected byte HOADPLI;
protected byte HOADPRS;
protected byte HOADPWD;
protected byte HOALF1;
protected short HOALF1L;
protected byte HOALF1R;
protected byte HOALF1T;
protected short HOALF1U;
protected byte HOALF2;
protected short HOALF2L;
protected byte HOALF2R;
protected byte HOALF2T;
protected short HOALF2U;
protected short HOALFM1;
protected short HOALFM2;
protected byte HOALI1;
protected byte HOALI2;
protected byte HOASK;
protected byte HOBA2FE;
protected byte HOBA2FL;
protected byte HOBA2FR;
protected byte HOBA2FU;
protected byte HOBA2ME;
protected byte HOBA2ML;
protected byte HOBA2MR;
protected byte HOBA2MU;
protected byte HOBA2OE;
protected short HOBA2OL;
protected byte HOBA2OR;
protected short HOBA2OU;
protected byte HOBA2WE;
protected byte HOBA2WL;
protected byte HOBA2WR;
protected byte HOBA2WU;
protected byte HOBA2YE;
protected byte HOBA2YL;
protected byte HOBA2YR;
protected byte HOBA2YU;
protected byte HOBA3FE;
protected byte HOBA3FL;
protected byte HOBA3FR;
protected byte HOBA3FU;
protected byte HOBA3ME;
protected short HOBA3ML;
protected byte HOBA3MR;
protected short HOBA3MU;
protected byte HOBA3OE;
protected short HOBA3OL;
protected byte HOBA3OR;
protected short HOBA3OU;
protected byte HOBA3WE;
protected byte HOBA3WL;
protected byte HOBA3WR;
protected short HOBA3WU;
protected byte HOBA3YE;
protected byte HOBA3YL;
protected byte HOBA3YR;
protected byte HOBA3YU;
protected byte HOBA4FE;
protected byte HOBA4FL;
protected byte HOBA4FR;
protected byte HOBA4FU;
protected byte HOBA4ME;
protected short HOBA4ML;
protected byte HOBA4MR;
protected short HOBA4MU;
protected byte HOBA4OE;
protected short HOBA4OL;
protected byte HOBA4OR;
protected short HOBA4OU;
protected byte HOBA4WE;
protected short HOBA4WL;
protected byte HOBA4WR;
protected short HOBA4WU;
protected byte HOBA4YE;
protected byte HOBA4YL;
protected byte HOBA4YR;
protected byte HOBA4YU;
protected byte HOBA5FE;
protected byte HOBA5FL;
protected byte HOBA5FR;
protected byte HOBA5FU;
protected byte HOBA5ME;
protected short HOBA5ML;
protected byte HOBA5MR;
protected short HOBA5MU;
protected byte HOBA5OE;
protected byte HOBA5OL;
protected byte HOBA5OR;
protected byte HOBA5OU;
protected byte HOBA5WE;
protected byte HOBA5WL;
protected byte HOBA5WR;
protected byte HOBA5WU;
protected byte HOBA5YE;
protected byte HOBA5YL;
protected byte HOBA5YR;
protected byte HOBA5YU;
protected byte HOBA6FE;
protected byte HOBA6FL;
protected byte HOBA6FR;
protected byte HOBA6FU;
protected byte HOBA6ME;
protected byte HOBA6ML;
protected byte HOBA6MR;
protected byte HOBA6MU;
protected byte HOBA6OE;
protected byte HOBA6OL;
protected byte HOBA6OR;
protected byte HOBA6OU;
protected byte HOBA6WE;
protected byte HOBA6WL;
protected byte HOBA6WR;
protected byte HOBA6WU;
protected byte HOBA6YE;
protected byte HOBA6YL;
protected byte HOBA6YR;
protected byte HOBA6YU;
protected byte HOBA7FE;
protected byte HOBA7FL;
protected byte HOBA7FR;
protected byte HOBA7FU;
protected byte HOBA7ME;
protected byte HOBA7ML;
protected byte HOBA7MR;
protected byte HOBA7MU;
protected byte HOBA7OE;
protected byte HOBA7OL;
protected byte HOBA7OR;
protected byte HOBA7OU;
protected byte HOBA7WE;
protected byte HOBA7WL;
protected byte HOBA7WR;
protected byte HOBA7WU;
protected byte HOBA7YE;
protected byte HOBA7YL;
protected byte HOBA7YR;
protected byte HOBA7YU;
protected byte HOBA8FE;
protected byte HOBA8FL;
protected byte HOBA8FR;
protected byte HOBA8FU;
protected byte HOBA8ME;
protected byte HOBA8ML;
protected byte HOBA8MR;
protected byte HOBA8MU;
protected byte HOBA8OE;
protected byte HOBA8OL;
protected byte HOBA8OR;
protected byte HOBA8OU;
protected byte HOBA8WE;
protected byte HOBA8WL;
protected byte HOBA8WR;
protected byte HOBA8WU;
protected byte HOBA8YE;
protected byte HOBA8YL;
protected byte HOBA8YR;
protected byte HOBA8YU;
protected byte HOBA9FE;
protected byte HOBA9FL;
protected byte HOBA9FR;
protected byte HOBA9FU;
protected byte HOBA9ME;
protected byte HOBA9ML;
protected byte HOBA9MR;
protected byte HOBA9MU;
protected byte HOBA9OE;
protected byte HOBA9OL;
protected byte HOBA9OR;
protected byte HOBA9OU;
protected byte HOBA9WE;
protected byte HOBA9WL;
protected byte HOBA9WR;
protected byte HOBA9WU;
protected byte HOBA9YE;
protected byte HOBA9YL;
protected byte HOBA9YR;
protected byte HOBA9YU;
protected byte HOBAFE;
protected byte HOBAFL;
protected byte HOBAFR;
protected byte HOBAFU;
protected byte HOBAME;
protected short HOBAML;
protected byte HOBAMR;
protected short HOBAMU;
protected byte HOBAOE;
protected short HOBAOL;
protected byte HOBAOR;
protected short HOBAOU;
protected byte HOBAWE;
protected short HOBAWL;
protected byte HOBAWR;
protected byte HOBAWU;
protected byte HOBAYE;
protected byte HOBAYL;
protected byte HOBAYR;
protected short HOBAYU;
protected byte HOCC01;
protected byte HOCC02;
protected byte HOCC03;
protected byte HOCC04;
protected byte HOCC05;
protected byte HOCC06;
protected byte HOCC07;
protected byte HOCC08;
protected byte HOCC09;
protected byte HOCC10;
protected byte HOCC11;
protected byte HOCC12;
protected byte HOCC13;
protected byte HOCC14;
protected byte HOCC15;
protected byte HOCC16;
protected byte HOCC17;
protected byte HOCC18;
protected byte HOCC19;
protected byte HOCC20;
protected byte HOCENP;
protected short HOCL;
protected byte HOCLE;
protected short HOCLL;
protected byte HOCLR;
protected short HOCLU;
protected byte HOEB;
protected short HOEBMS;
protected byte HOEBMSE;
protected byte HOEBMSL;
protected byte HOEBMSR;
protected byte HOEBMSU;
protected short HOEBMW;
protected byte HOEBMWE;
protected byte HOEBMWL;
protected byte HOEBMWR;
protected byte HOEBMWU;
protected short HOEBQS;
protected byte HOEBQSE;
protected short HOEBQSL;
protected byte HOEBQSR;
protected short HOEBQSU;
protected short HOEBQW;
protected byte HOEBQWE;
protected short HOEBQWL;
protected byte HOEBQWR;
protected short HOEBQWU;
protected byte HOED;
protected short HOEDM;
protected byte HOEDME;
protected byte HOEDML;
protected byte HOEDMR;
protected byte HOEDMU;
protected short HOEDQ;
protected byte HOEDQE;
protected short HOEDQL;
protected byte HOEDQR;
protected short HOEDQU;
protected byte HOEOS;
protected byte HOEOSE;
protected byte HOEOSL;
protected byte HOEOSR;
protected byte HOEOSU;
protected byte HOEOW;
protected byte HOEOWE;
protected byte HOEOWL;
protected byte HOEOWR;
protected byte HOEOWU;
protected byte HOEPAY;
protected byte HOEPS;
protected byte HOEPSE;
protected byte HOEPSL;
protected byte HOEPSR;
protected byte HOEPSU;
protected byte HOEPW;
protected byte HOEPWE;
protected byte HOEPWL;
protected byte HOEPWR;
protected byte HOEPWU;
protected byte HOFB;
protected short HOFBMS;
protected byte HOFBMSE;
protected byte HOFBMSL;
protected byte HOFBMSR;
protected byte HOFBMSU;
protected short HOFBMW;
protected byte HOFBMWE;
protected byte HOFBMWL;
protected byte HOFBMWR;
protected byte HOFBMWU;
protected short HOFBQS;
protected byte HOFBQSE;
protected short HOFBQSL;
protected byte HOFBQSR;
protected short HOFBQSU;
protected short HOFBQW;
protected byte HOFBQWE;
protected short HOFBQWL;
protected byte HOFBQWR;
protected short HOFBQWU;
protected byte HOFCS;
protected byte HOFCSE;
protected byte HOFCSL;
protected byte HOFCSR;
protected byte HOFCSU;
protected byte HOFCW;
protected byte HOFCWE;
protected byte HOFCWL;
protected byte HOFCWR;
protected byte HOFCWU;
protected byte HOFD;
protected short HOFDM;
protected byte HOFDME;
protected byte HOFDML;
protected byte HOFDMR;
protected byte HOFDMU;
protected short HOFDQ;
protected byte HOFDQE;
protected short HOFDQL;
protected byte HOFDQR;
protected short HOFDQU;
protected byte HOFOIS;
protected byte HOFOISE;
protected byte HOFOISL;
protected byte HOFOISR;
protected byte HOFOISU;
protected byte HOFOIW;
protected byte HOFOIWE;
protected byte HOFOIWL;
protected byte HOFOIWR;
protected byte HOFOIWU;
protected byte HOFOODE;
protected short HOFOODL;
protected byte HOFOODR;
protected short HOFOODU;
protected byte HOFOS;
protected byte HOFOSE;
protected byte HOFOSL;
protected byte HOFOSR;
protected byte HOFOSU;
protected byte HOFOW;
protected byte HOFOWE;
protected byte HOFOWL;
protected byte HOFOWR;
protected byte HOFOWU;
protected byte HOFPAY;
protected byte HOFPGS;
protected byte HOFPGSE;
protected byte HOFPGSL;
protected byte HOFPGSR;
protected byte HOFPGSU;
protected byte HOFPGW;
protected byte HOFPGWE;
protected byte HOFPGWL;
protected byte HOFPGWR;
protected byte HOFPGWU;
protected byte HOFPS;
protected byte HOFPSE;
protected byte HOFPSL;
protected byte HOFPSR;
protected byte HOFPSU;
protected byte HOFPW;
protected byte HOFPWE;
protected byte HOFPWL;
protected byte HOFPWR;
protected byte HOFPWU;
protected short HOFSM;
protected byte HOFSME;
protected byte HOFSML;
protected byte HOFSMR;
protected byte HOFSMU;
protected byte HOFSP;
protected byte HOFSQ;
protected byte HOFSQE;
protected byte HOFSQL;
protected byte HOFSQR;
protected byte HOFSQU;
protected byte HOFSUP;
protected short HOFSW;
protected byte HOFSWE;
protected byte HOFSWL;
protected byte HOFSWR;
protected byte HOFSWU;
protected byte HOFTOG;
protected byte HOFUEL95;
protected byte HOFUELCO;
protected byte HOFUELEL;
protected byte HOFUELGA;
protected byte HOFUELOI;
protected byte HOFUELPA;
protected byte HOFUELWO;
protected byte HOFUEM85;
protected byte HOFUEM86;
protected byte HOFUEMCO;
protected byte HOFUEMEL;
protected byte HOFUEMGA;
protected byte HOFUEMOI;
protected byte HOFUEMPA;
protected byte HOFUEMWO;
protected byte HOFWS;
protected byte HOFWSE;
protected byte HOFWSL;
protected byte HOFWSR;
protected byte HOFWSU;
protected byte HOFWW;
protected byte HOFWWE;
protected byte HOFWWL;
protected byte HOFWWR;
protected byte HOFWWU;
protected byte HOFXS;
protected byte HOFXSE;
protected byte HOFXSL;
protected byte HOFXSR;
protected byte HOFXSU;
protected byte HOFXW;
protected byte HOFXWE;
protected byte HOFXWL;
protected byte HOFXWR;
protected byte HOFXWU;
protected short HOGBMS;
protected byte HOGBMSE;
protected byte HOGBMSL;
protected byte HOGBMSR;
protected byte HOGBMSU;
protected short HOGBMW;
protected byte HOGBMWE;
protected byte HOGBMWL;
protected byte HOGBMWR;
protected byte HOGBMWU;
protected byte HOGBP;
protected short HOGBQS;
protected byte HOGBQSE;
protected short HOGBQSL;
protected byte HOGBQSR;
protected short HOGBQSU;
protected short HOGBQW;
protected byte HOGBQWE;
protected short HOGBQWL;
protected byte HOGBQWR;
protected short HOGBQWU;
protected byte HOGD;
protected short HOGDM;
protected byte HOGDME;
protected byte HOGDML;
protected byte HOGDMR;
protected byte HOGDMU;
protected short HOGDQ;
protected byte HOGDQE;
protected short HOGDQL;
protected byte HOGDQR;
protected short HOGDQU;
protected byte HOGOS;
protected byte HOGOSE;
protected byte HOGOSL;
protected byte HOGOSR;
protected byte HOGOSU;
protected byte HOGOW;
protected byte HOGOWE;
protected byte HOGOWL;
protected byte HOGOWR;
protected byte HOGOWU;
protected byte HOGPAY;
protected byte HOGPS;
protected byte HOGPSE;
protected byte HOGPSL;
protected byte HOGPSR;
protected byte HOGPSU;
protected byte HOGPW;
protected byte HOGPWE;
protected byte HOGPWL;
protected byte HOGPWR;
protected byte HOGPWU;
protected byte HOHAV95;
protected byte HOHAV96;
protected byte HOHAVB95;
protected byte HOHAVB96;
protected byte HOHAVBCD;
protected byte HOHAVBDT;
protected byte HOHAVBDV;
protected byte HOHAVBDW;
protected byte HOHAVBFF;
protected byte HOHAVBMO;
protected byte HOHAVBPC;
protected byte HOHAVBPH;
protected byte HOHAVBTV;
protected byte HOHAVBVR;
protected byte HOHAVBWD;
protected byte HOHAVBWM;
protected byte HOHAVCD;
protected byte HOHAVDT;
protected byte HOHAVDV;
protected byte HOHAVDW;
protected byte HOHAVFF;
protected byte HOHAVMO;
protected byte HOHAVPC;
protected byte HOHAVPH;
protected byte HOHAVTV;
protected byte HOHAVVR;
protected byte HOHAVWD;
protected byte HOHAVWM;
protected byte HOHB95;
protected byte HOHB96;
protected short HOHBA;
protected byte HOHBAFE;
protected byte HOHBAFL;
protected byte HOHBAFR;
protected byte HOHBAFU;
protected byte HOHBAME;
protected short HOHBAML;
protected byte HOHBAMR;
protected short HOHBAMU;
protected byte HOHBAOE;
protected byte HOHBAOL;
protected byte HOHBAOR;
protected short HOHBAOU;
protected byte HOHBAWE;
protected byte HOHBAWL;
protected byte HOHBAWR;
protected byte HOHBAWU;
protected byte HOHBAYE;
protected byte HOHBAYL;
protected byte HOHBAYR;
protected byte HOHBAYU;
protected byte HOHBCK;
protected byte HOHBCL;
protected byte HOHBEN;
protected byte HOHBGA;
protected byte HOHBM85;
protected byte HOHBM86;
protected byte HOHBM96;
protected byte HOHBMCL;
protected byte HOHBME;
protected byte HOHBMGA;
protected byte HOHBMME;
protected byte HOHBMSG;
protected byte HOHBMWP;
protected byte HOHBP;
protected byte HOHBSG;
protected byte HOHBWP;
protected byte HOHEA95;
protected byte HOHEA96;
protected byte HOHEAEF;
protected byte HOHEAGF;
protected byte HOHEAM85;
protected byte HOHEAM86;
protected byte HOHEAM96;
protected byte HOHEAMEF;
protected byte HOHEAMGF;
protected byte HOHEAMOF;
protected byte HOHEAMPH;
protected byte HOHEAOF;
protected byte HOHEAPH;
protected short HOHV01;
protected byte HOHV01E;
protected short HOHV01L;
protected byte HOHV01R;
protected short HOHV01U;
protected short HOHV02;
protected byte HOHV02E;
protected short HOHV02L;
protected byte HOHV02R;
protected short HOHV02U;
protected short HOHV03;
protected byte HOHV03E;
protected short HOHV03L;
protected byte HOHV03R;
protected short HOHV03U;
protected short HOHV04;
protected byte HOHV04E;
protected short HOHV04L;
protected byte HOHV04R;
protected short HOHV04U;
protected short HOHV05;
protected byte HOHV05E;
protected short HOHV05L;
protected byte HOHV05R;
protected short HOHV05U;
protected short HOHV06;
protected byte HOHV06E;
protected short HOHV06L;
protected byte HOHV06R;
protected short HOHV06U;
protected short HOHV07;
protected byte HOHV07E;
protected short HOHV07L;
protected byte HOHV07R;
protected short HOHV07U;
protected short HOHV08;
protected byte HOHV08E;
protected short HOHV08L;
protected byte HOHV08R;
protected short HOHV08U;
protected short HOHV09;
protected byte HOHV09E;
protected short HOHV09L;
protected byte HOHV09R;
protected short HOHV09U;
protected short HOHV10;
protected byte HOHV10E;
protected short HOHV10L;
protected byte HOHV10R;
protected short HOHV10U;
protected short HOHV11;
protected byte HOHV11E;
protected short HOHV11L;
protected byte HOHV11R;
protected short HOHV11U;
protected short HOHV12;
protected byte HOHV12E;
protected short HOHV12L;
protected byte HOHV12R;
protected short HOHV12U;
protected byte HOINA95;
protected byte HOINA96;
protected byte HOINACL;
protected byte HOINAGD;
protected byte HOINAM85;
protected byte HOINAM86;
protected byte HOINAM96;
protected byte HOINAMCL;
protected byte HOINAME;
protected byte HOINAMGD;
protected byte HOINAMME;
protected byte HOINAMSG;
protected byte HOINAMWP;
protected byte HOINASG;
protected byte HOINAWP;
protected byte HOINC96;
protected byte HOINCBI;
protected byte HOINCL96;
protected byte HOINCLCO;
protected byte HOINCLGA;
protected byte HOINCLHE;
protected byte HOINCLLA;
protected byte HOINCLSE;
protected byte HOINCLWA;
protected byte HOINCM85;
protected byte HOINCM86;
protected byte HOINCM96;
protected byte HOINCMBI;
protected byte HOINCMOT;
protected byte HOINCMPI;
protected byte HOINCMPP;
protected byte HOINCOT;
protected byte HOINCPI;
protected byte HOINCPP;
protected byte HOMEXT;
protected int HOMEXTA;
protected boolean HOMEXTE;
protected int HOMEXTL;
protected boolean HOMEXTR;
protected boolean HOMEXTU;
protected byte HOMFV;
protected short HOMINC;
protected boolean HOMINCE;
protected boolean HOMINCL;
protected boolean HOMINCR;
protected boolean HOMINCU;
protected byte HOMMISN;
protected int HOMNEWA;
protected byte HOMNEWE;
protected int HOMNEWL;
protected byte HOMNEWN;
protected byte HOMNEWR;
protected byte HOMNEWU;
protected byte HOMNREA;
protected byte HOMNUM85;
protected byte HOMNUM86;
protected byte HOMNUM96;
protected byte HOMNUMCP;
protected byte HOMNUMHE;
protected byte HOMNUMHI;
protected byte HOMNUMOC;
protected byte HOMNUS95;
protected byte HOMNUS96;
protected byte HOMNUSCP;
protected byte HOMNUSHE;
protected byte HOMNUSHI;
protected byte HOMNUSOC;
protected byte HOMREA;
protected byte HOMREPE;
protected short HOMREPL;
protected byte HOMREPR;
protected short HOMREPU;
protected byte HOMSAM;
protected byte HOMTY;
protected byte HOMUM85;
protected byte HOMUM86;
protected byte HOMUMCP;
protected byte HOMUMHE;
protected byte HOMUMHI;
protected byte HOMUMOC;
protected byte HOMUSECP;
protected byte HOMUSEHE;
protected byte HOMUSEHI;
protected byte HOMUSEOC;
protected byte HOMUSEOT;
protected byte HOOUTFE;
protected short HOOUTFL;
protected byte HOOUTFR;
protected short HOOUTFU;
protected byte HOPAYE;
protected int HOPAYL;
protected byte HOPAYR;
protected int HOPAYU;
protected byte HOPRO95;
protected byte HOPRO96;
protected byte HOPROCO;
protected byte HOPROCP;
protected byte HOPRODK;
protected byte HOPROEP;
protected byte HOPROIN;
protected byte HOPROM85;
protected byte HOPROM86;
protected byte HOPROM96;
protected byte HOPROMCO;
protected byte HOPROMCP;
protected byte HOPROMDK;
protected byte HOPROMEP;
protected byte HOPROMIN;
protected byte HOPROMNZ;
protected byte HOPROMPO;
protected byte HOPROMRD;
protected byte HOPROMRO;
protected byte HOPROMSN;
protected byte HOPROMSP;
protected byte HOPROMST;
protected byte HOPROMVA;
protected byte HOPROMWA;
protected byte HOPRONZ;
protected byte HOPROPO;
protected byte HOPRORD;
protected byte HOPRORO;
protected byte HOPROSN;
protected byte HOPROSP;
protected byte HOPROWA;
protected byte HOREBFE;
protected short HOREBFL;
protected byte HOREBFR;
protected short HOREBFU;
protected byte HOREBME;
protected short HOREBML;
protected byte HOREBMR;
protected short HOREBMU;
protected byte HOREBOE;
protected short HOREBOL;
protected byte HOREBOR;
protected short HOREBOU;
protected byte HOREBWE;
protected short HOREBWL;
protected byte HOREBWR;
protected short HOREBWU;
protected byte HOREBYE;
protected short HOREBYL;
protected byte HOREBYR;
protected byte HOREBYU;
protected byte HORET;
protected byte HORFEE1;
protected byte HORFEE2;
protected byte HORFEP1;
protected boolean HORFEP2;
protected byte HORHB;
protected byte HORIN96;
protected byte HORIN97;
protected byte HORINHI;
protected byte HORINHR;
protected short HORINM;
protected byte HORINM85;
protected byte HORINM86;
protected byte HORINM96;
protected byte HORINM97;
protected byte HORINME;
protected byte HORINMHI;
protected byte HORINMHR;
protected short HORINML;
protected boolean HORINMOT;
protected byte HORINMPA;
protected byte HORINMR;
protected short HORINMU;
protected byte HORINOT;
protected byte HORINPA;
protected byte HORMAIN;
protected byte HORMO;
protected boolean HORMOFE;
protected boolean HORMOFL;
protected byte HORMOFP;
protected boolean HORMOFR;
protected boolean HORMOFU;
protected int HORMOL;
protected byte HORMOLA;
protected byte HORMOLE;
protected int HORMOLL;
protected byte HORMOLR;
protected int HORMOLU;
protected byte HORMOM85;
protected byte HORMOM86;
protected byte HORMOMBA;
protected byte HORMOMBQ;
protected boolean HORMOME;
protected byte HORMOMFP;
protected boolean HORMOML;
protected byte HORMOMLA;
protected byte HORMOMNS;
protected boolean HORMOMR;
protected byte HORMOMSH;
protected byte HORMOMSM;
protected boolean HORMOMU;
protected boolean HORMOOE;
protected boolean HORMOOL;
protected boolean HORMOOR;
protected byte HORMOOT;
protected boolean HORMOOU;
protected byte HORMOSH;
protected byte HORMOSM;
protected boolean HORMOWE;
protected boolean HORMOWL;
protected boolean HORMOWR;
protected boolean HORMOWU;
protected boolean HORMOYE;
protected boolean HORMOYL;
protected boolean HORMOYR;
protected boolean HORMOYU;
protected byte HORMS;
protected boolean HORMUFE;
protected boolean HORMUFL;
protected boolean HORMUFR;
protected boolean HORMUFU;
protected boolean HORMUME;
protected boolean HORMUML;
protected boolean HORMUMR;
protected boolean HORMUMU;
protected boolean HORMUO;
protected boolean HORMUOE;
protected boolean HORMUOL;
protected boolean HORMUOR;
protected boolean HORMUOU;
protected boolean HORMUWE;
protected boolean HORMUWL;
protected boolean HORMUWR;
protected boolean HORMUWU;
protected boolean HORMUYE;
protected boolean HORMUYL;
protected boolean HORMUYR;
protected boolean HORMUYU;
protected byte HORMV95;
protected byte HORMVBA;
protected byte HORMVBO;
protected byte HORMVER;
protected byte HORMVHR;
protected byte HORMVIF;
protected byte HORMVJR;
protected byte HORMVM85;
protected byte HORMVM86;
protected byte HORMVMAB;
protected byte HORMVMBA;
protected byte HORMVMBO;
protected byte HORMVMER;
protected byte HORMVMHR;
protected byte HORMVMIF;
protected byte HORMVMJR;
protected byte HORMVMMS;
protected byte HORMVMNF;
protected byte HORMVMNH;
protected byte HORMVMNJ;
protected byte HORMVMOF;
protected byte HORMVMPC;
protected byte HORMVMPN;
protected byte HORMVMS;
protected byte HORMVMSP;
protected byte HORMVNF;
protected byte HORMVNJ;
protected byte HORMVOF;
protected byte HORMVPN;
protected byte HORMVSP;
protected byte HORPAY;
protected byte HORPC;
protected int HORPCM;
protected boolean HORPCME;
protected boolean HORPCML;
protected boolean HORPCMR;
protected boolean HORPCMU;
protected int HORPM;
protected byte HORPME;
protected short HORPML;
protected byte HORPMR;
protected int HORPMU;
protected boolean HORPOFO;
protected byte HORPOS;
protected boolean HORPOSO;
protected boolean HORRME;
protected boolean HORRML;
protected boolean HORRMR;
protected boolean HORRMU;
protected byte HOSELLE;
protected int HOSELLL;
protected byte HOSELLR;
protected int HOSELLU;
protected byte HOTENST;
protected byte HOV;
protected byte HOVAG11;
protected byte HOVAG12;
protected byte HOVAG13;
protected byte HOVAG14;
protected byte HOVAG15;
protected byte HOVAG16;
protected int HOVE;
protected byte HOVEE;
protected byte HOVEHX;
protected int HOVEL;
protected String HOVER;
protected String HOVER10;
protected boolean HOVER11;
protected String HOVER12;
protected String HOVER13;
protected boolean HOVER14;
protected boolean HOVER15;
protected String HOVER16;
protected String HOVER2;
protected String HOVER3;
protected String HOVER4;
protected String HOVER5;
protected String HOVER6;
protected String HOVER7;
protected boolean HOVER8;
protected String HOVER9;
protected int HOVEU;
protected String HOVLR;
protected String HOVLR10;
protected boolean HOVLR11;
protected boolean HOVLR12;
protected boolean HOVLR13;
protected boolean HOVLR14;
protected String HOVLR15;
protected boolean HOVLR16;
protected String HOVLR2;
protected String HOVLR3;
protected String HOVLR4;
protected String HOVLR5;
protected String HOVLR6;
protected String HOVLR7;
protected String HOVLR8;
protected String HOVLR9;
protected int HOVML;
protected byte HOVMLE;
protected int HOVMLL;
protected byte HOVMLR;
protected int HOVMLU;
protected byte HOVN;
protected byte HOVNO;
protected byte HOVNO10;
protected byte HOVNO11;
protected byte HOVNO12;
protected byte HOVNO13;
protected byte HOVNO14;
protected byte HOVNO15;
protected byte HOVNO16;
protected byte HOVNO2;
protected byte HOVNO3;
protected byte HOVNO4;
protected byte HOVNO5;
protected byte HOVNO6;
protected byte HOVNO7;
protected byte HOVNO8;
protected byte HOVNO9;
protected byte HOVNR;
protected boolean HOVNR10;
protected byte HOVNR11;
protected boolean HOVNR12;
protected boolean HOVNR13;
protected byte HOVNR14;
protected boolean HOVNR15;
protected boolean HOVNR16;
protected byte HOVNR2;
protected String HOVNR3;
protected byte HOVNR4;
protected byte HOVNR5;
protected byte HOVNR6;
protected byte HOVNR7;
protected byte HOVNR8;
protected byte HOVNR9;
protected byte HOVNW;
protected byte HOVNW10;
protected byte HOVNW11;
protected byte HOVNW12;
protected byte HOVNW13;
protected byte HOVNW14;
protected byte HOVNW15;
protected byte HOVNW16;
protected byte HOVNW2;
protected byte HOVNW4;
protected byte HOVNW5;
protected byte HOVNW6;
protected byte HOVNW7;
protected byte HOVNW8;
protected byte HOVNW9;
protected byte HOVST;
protected byte HOVST10;
protected byte HOVST11;
protected byte HOVST12;
protected byte HOVST13;
protected byte HOVST14;
protected byte HOVST15;
protected byte HOVST16;
protected byte HOVST2;
protected byte HOVST3;
protected byte HOVST4;
protected byte HOVST5;
protected byte HOVST6;
protected byte HOVST7;
protected byte HOVST8;
protected byte HOVST9;
protected byte HOVW1001;
protected byte HOVW1002;
protected byte HOVW1003;
protected byte HOVW1004;
protected byte HOVW1005;
protected byte HOVW1006;
protected byte HOVW1007;
protected byte HOVW1008;
protected byte HOVW1009;
protected byte HOVW101;
protected byte HOVW1010;
protected byte HOVW1011;
protected byte HOVW1012;
protected byte HOVW1013;
protected byte HOVW1014;
protected byte HOVW1015;
protected byte HOVW1016;
protected byte HOVW1017;
protected byte HOVW1018;
protected byte HOVW1019;
protected byte HOVW102;
protected byte HOVW103;
protected byte HOVW104;
protected byte HOVW105;
protected byte HOVW106;
protected byte HOVW107;
protected byte HOVW108;
protected byte HOVW109;
protected byte HOVW11;
protected byte HOVW110;
protected byte HOVW1101;
protected byte HOVW1102;
protected byte HOVW1103;
protected byte HOVW1104;
protected byte HOVW1105;
protected byte HOVW1106;
protected byte HOVW1107;
protected byte HOVW1108;
protected byte HOVW1109;
protected byte HOVW111;
protected byte HOVW1110;
protected byte HOVW1111;
protected byte HOVW1112;
protected byte HOVW1113;
protected byte HOVW1114;
protected byte HOVW1115;
protected byte HOVW1116;
protected byte HOVW1117;
protected byte HOVW1118;
protected byte HOVW1119;
protected byte HOVW112;
protected byte HOVW113;
protected byte HOVW114;
protected byte HOVW115;
protected byte HOVW116;
protected byte HOVW117;
protected byte HOVW118;
protected byte HOVW119;
protected byte HOVW12;
protected byte HOVW1201;
protected byte HOVW1202;
protected byte HOVW1203;
protected byte HOVW1204;
protected byte HOVW1205;
protected byte HOVW1206;
protected byte HOVW1207;
protected byte HOVW1208;
protected byte HOVW1209;
protected byte HOVW1210;
protected byte HOVW1211;
protected byte HOVW1212;
protected byte HOVW1213;
protected byte HOVW1214;
protected byte HOVW1215;
protected byte HOVW1216;
protected byte HOVW1217;
protected byte HOVW1218;
protected byte HOVW1219;
protected byte HOVW13;
protected byte HOVW1301;
protected byte HOVW1302;
protected byte HOVW1303;
protected byte HOVW1304;
protected byte HOVW1305;
protected byte HOVW1306;
protected byte HOVW1307;
protected byte HOVW1308;
protected byte HOVW1309;
protected byte HOVW1310;
protected byte HOVW1311;
protected byte HOVW1312;
protected byte HOVW1313;
protected byte HOVW1314;
protected byte HOVW1315;
protected byte HOVW1316;
protected byte HOVW1317;
protected byte HOVW1318;
protected byte HOVW1319;
protected byte HOVW14;
protected byte HOVW1401;
protected byte HOVW1402;
protected byte HOVW1403;
protected byte HOVW1404;
protected byte HOVW1405;
protected byte HOVW1406;
protected byte HOVW1407;
protected byte HOVW1408;
protected byte HOVW1409;
protected byte HOVW1410;
protected byte HOVW1411;
protected byte HOVW1412;
protected byte HOVW1413;
protected byte HOVW1414;
protected byte HOVW1415;
protected byte HOVW1416;
protected byte HOVW1417;
protected byte HOVW1418;
protected byte HOVW1419;
protected byte HOVW15;
protected byte HOVW1501;
protected byte HOVW1502;
protected byte HOVW1503;
protected byte HOVW1504;
protected byte HOVW1505;
protected byte HOVW1506;
protected byte HOVW1507;
protected byte HOVW1508;
protected byte HOVW1509;
protected byte HOVW1510;
protected byte HOVW1511;
protected byte HOVW1512;
protected byte HOVW1513;
protected byte HOVW1514;
protected byte HOVW1515;
protected byte HOVW1516;
protected byte HOVW1517;
protected byte HOVW1518;
protected byte HOVW1519;
protected byte HOVW16;
protected byte HOVW1601;
protected byte HOVW1602;
protected byte HOVW1603;
protected byte HOVW1604;
protected byte HOVW1605;
protected byte HOVW1606;
protected byte HOVW1607;
protected byte HOVW1608;
protected byte HOVW1609;
protected byte HOVW1610;
protected byte HOVW1611;
protected byte HOVW1612;
protected byte HOVW1613;
protected byte HOVW1614;
protected byte HOVW1615;
protected byte HOVW1616;
protected byte HOVW1617;
protected byte HOVW1618;
protected byte HOVW1619;
protected byte HOVW2;
protected byte HOVW201;
protected byte HOVW202;
protected byte HOVW203;
protected byte HOVW204;
protected byte HOVW205;
protected byte HOVW206;
protected byte HOVW207;
protected byte HOVW208;
protected byte HOVW209;
protected byte HOVW210;
protected byte HOVW211;
protected byte HOVW212;
protected byte HOVW213;
protected byte HOVW214;
protected byte HOVW215;
protected byte HOVW216;
protected byte HOVW217;
protected byte HOVW218;
protected byte HOVW219;
protected byte HOVW301;
protected byte HOVW302;
protected byte HOVW303;
protected byte HOVW304;
protected byte HOVW305;
protected byte HOVW306;
protected byte HOVW307;
protected byte HOVW308;
protected byte HOVW309;
protected byte HOVW310;
protected byte HOVW311;
protected byte HOVW312;
protected byte HOVW313;
protected byte HOVW314;
protected byte HOVW315;
protected byte HOVW316;
protected byte HOVW317;
protected byte HOVW318;
protected byte HOVW319;
protected byte HOVW4;
protected byte HOVW401;
protected byte HOVW402;
protected byte HOVW403;
protected byte HOVW404;
protected byte HOVW405;
protected byte HOVW406;
protected byte HOVW407;
protected byte HOVW408;
protected byte HOVW409;
protected byte HOVW410;
protected byte HOVW411;
protected byte HOVW412;
protected byte HOVW413;
protected byte HOVW414;
protected byte HOVW415;
protected byte HOVW416;
protected byte HOVW417;
protected byte HOVW418;
protected byte HOVW419;
protected byte HOVW5;
protected byte HOVW501;
protected byte HOVW502;
protected byte HOVW503;
protected byte HOVW504;
protected byte HOVW505;
protected byte HOVW506;
protected byte HOVW507;
protected byte HOVW508;
protected byte HOVW509;
protected byte HOVW510;
protected byte HOVW511;
protected byte HOVW512;
protected byte HOVW513;
protected byte HOVW514;
protected byte HOVW515;
protected byte HOVW516;
protected byte HOVW517;
protected byte HOVW518;
protected byte HOVW519;
protected byte HOVW6;
protected byte HOVW601;
protected byte HOVW602;
protected byte HOVW603;
protected byte HOVW604;
protected byte HOVW605;
protected byte HOVW606;
protected byte HOVW607;
protected byte HOVW608;
protected byte HOVW609;
protected byte HOVW610;
protected byte HOVW611;
protected byte HOVW612;
protected byte HOVW613;
protected byte HOVW614;
protected byte HOVW615;
protected byte HOVW616;
protected byte HOVW617;
protected byte HOVW618;
protected byte HOVW619;
protected byte HOVW7;
protected byte HOVW701;
protected byte HOVW702;
protected byte HOVW703;
protected byte HOVW704;
protected byte HOVW705;
protected byte HOVW706;
protected byte HOVW707;
protected byte HOVW708;
protected byte HOVW709;
protected byte HOVW710;
protected byte HOVW711;
protected byte HOVW712;
protected byte HOVW713;
protected byte HOVW714;
protected byte HOVW715;
protected byte HOVW716;
protected byte HOVW717;
protected byte HOVW718;
protected byte HOVW719;
protected byte HOVW8;
protected byte HOVW801;
protected byte HOVW802;
protected byte HOVW803;
protected byte HOVW804;
protected byte HOVW805;
protected byte HOVW806;
protected byte HOVW807;
protected byte HOVW808;
protected byte HOVW809;
protected byte HOVW810;
protected byte HOVW811;
protected byte HOVW812;
protected byte HOVW813;
protected byte HOVW814;
protected byte HOVW815;
protected byte HOVW816;
protected byte HOVW817;
protected byte HOVW818;
protected byte HOVW819;
protected byte HOVW901;
protected byte HOVW902;
protected byte HOVW903;
protected byte HOVW904;
protected byte HOVW905;
protected byte HOVW906;
protected byte HOVW907;
protected byte HOVW908;
protected byte HOVW909;
protected byte HOVW910;
protected byte HOVW911;
protected byte HOVW912;
protected byte HOVW913;
protected byte HOVW914;
protected byte HOVW915;
protected byte HOVW916;
protected byte HOVW917;
protected byte HOVW918;
protected byte HOVW919;
protected short HOVYR;
protected short HOVYR10;
protected short HOVYR11;
protected short HOVYR12;
protected short HOVYR13;
protected short HOVYR14;
protected short HOVYR15;
protected short HOVYR16;
protected short HOVYR2;
protected short HOVYR3;
protected short HOVYR4;
protected short HOVYR5;
protected short HOVYR6;
protected short HOVYR7;
protected short HOVYR8;
protected short HOVYR9;
protected byte HOWH1;
protected byte HOWH10;
protected byte HOWH11;
protected byte HOWH12;
protected byte HOWH2;
protected byte HOWH3;
protected byte HOWH4;
protected byte HOWH5;
protected byte HOWH6;
protected byte HOWH7;
protected byte HOWH8;
protected byte HOWH9;
protected byte HOWH97;
protected byte HOYML;
protected short HSEYR;
protected short IAA39;
protected boolean IAA39FE;
protected boolean IAA39FL;
protected boolean IAA39FR;
protected boolean IAA39FU;
protected byte IAA39ME;
protected short IAA39ML;
protected boolean IAA39MR;
protected short IAA39MU;
protected byte IAA39OE;
protected boolean IAA39OL;
protected byte IAA39OR;
protected short IAA39OU;
protected byte IAA39WE;
protected boolean IAA39WL;
protected boolean IAA39WR;
protected boolean IAA39WU;
protected boolean IAA39YE;
protected boolean IAA39YL;
protected boolean IAA39YR;
protected boolean IAA39YU;
protected short IAA40;
protected boolean IAA40FE;
protected boolean IAA40FL;
protected boolean IAA40FR;
protected boolean IAA40FU;
protected byte IAA40ME;
protected short IAA40ML;
protected boolean IAA40MR;
protected short IAA40MU;
protected byte IAA40OE;
protected short IAA40OL;
protected byte IAA40OR;
protected short IAA40OU;
protected boolean IAA40WE;
protected boolean IAA40WL;
protected boolean IAA40WR;
protected boolean IAA40WU;
protected boolean IAA40YE;
protected boolean IAA40YL;
protected boolean IAA40YR;
protected boolean IAA40YU;
protected short IAA41;
protected byte IAA41FE;
protected short IAA41FL;
protected byte IAA41FR;
protected short IAA41FU;
protected boolean IAA41ME;
protected boolean IAA41ML;
protected boolean IAA41MR;
protected short IAA41MU;
protected byte IAA41OE;
protected short IAA41OL;
protected byte IAA41OR;
protected short IAA41OU;
protected byte IAA41WE;
protected byte IAA41WL;
protected byte IAA41WR;
protected byte IAA41WU;
protected boolean IAA41YE;
protected boolean IAA41YL;
protected boolean IAA41YR;
protected boolean IAA41YU;
protected short IAA42;
protected boolean IAA42FE;
protected boolean IAA42FL;
protected boolean IAA42FR;
protected boolean IAA42FU;
protected byte IAA42ME;
protected short IAA42ML;
protected byte IAA42MR;
protected short IAA42MU;
protected byte IAA42OE;
protected short IAA42OL;
protected byte IAA42OR;
protected short IAA42OU;
protected byte IAA42WE;
protected short IAA42WL;
protected byte IAA42WR;
protected short IAA42WU;
protected boolean IAA42YE;
protected boolean IAA42YL;
protected boolean IAA42YR;
protected short IAA42YU;
protected short IAA43;
protected boolean IAA43FE;
protected boolean IAA43FL;
protected boolean IAA43FR;
protected boolean IAA43FU;
protected byte IAA43ME;
protected short IAA43ML;
protected byte IAA43MR;
protected short IAA43MU;
protected byte IAA43OE;
protected byte IAA43OL;
protected byte IAA43OR;
protected short IAA43OU;
protected byte IAA43WE;
protected boolean IAA43WL;
protected boolean IAA43WR;
protected boolean IAA43WU;
protected boolean IAA43YE;
protected boolean IAA43YL;
protected boolean IAA43YR;
protected boolean IAA43YU;
protected short IAA44;
protected boolean IAA44FE;
protected boolean IAA44FL;
protected boolean IAA44FR;
protected boolean IAA44FU;
protected byte IAA44ME;
protected short IAA44ML;
protected boolean IAA44MR;
protected short IAA44MU;
protected byte IAA44OE;
protected short IAA44OL;
protected byte IAA44OR;
protected short IAA44OU;
protected byte IAA44WE;
protected boolean IAA44WL;
protected byte IAA44WR;
protected byte IAA44WU;
protected boolean IAA44YE;
protected boolean IAA44YL;
protected boolean IAA44YR;
protected boolean IAA44YU;
protected short IAA45;
protected boolean IAA45FE;
protected boolean IAA45FL;
protected boolean IAA45FR;
protected boolean IAA45FU;
protected byte IAA45ME;
protected short IAA45ML;
protected byte IAA45MR;
protected short IAA45MU;
protected byte IAA45OE;
protected short IAA45OL;
protected byte IAA45OR;
protected short IAA45OU;
protected byte IAA45WE;
protected byte IAA45WL;
protected byte IAA45WR;
protected short IAA45WU;
protected boolean IAA45YE;
protected boolean IAA45YL;
protected boolean IAA45YR;
protected boolean IAA45YU;
protected short IAA46;
protected boolean IAA46FE;
protected short IAA46FL;
protected boolean IAA46FR;
protected short IAA46FU;
protected byte IAA46ME;
protected short IAA46ML;
protected byte IAA46MR;
protected short IAA46MU;
protected byte IAA46OE;
protected short IAA46OL;
protected byte IAA46OR;
protected short IAA46OU;
protected byte IAA46WE;
protected byte IAA46WL;
protected boolean IAA46WR;
protected byte IAA46WU;
protected boolean IAA46YE;
protected boolean IAA46YL;
protected boolean IAA46YR;
protected boolean IAA46YU;
protected short IAA47;
protected boolean IAA47FE;
protected boolean IAA47FL;
protected boolean IAA47FR;
protected boolean IAA47FU;
protected byte IAA47ME;
protected short IAA47ML;
protected boolean IAA47MR;
protected short IAA47MU;
protected byte IAA47OE;
protected short IAA47OL;
protected byte IAA47OR;
protected short IAA47OU;
protected byte IAA47WE;
protected byte IAA47WL;
protected byte IAA47WR;
protected byte IAA47WU;
protected boolean IAA47YE;
protected boolean IAA47YL;
protected boolean IAA47YR;
protected short IAA47YU;
protected short IAA48;
protected boolean IAA48FE;
protected boolean IAA48FL;
protected boolean IAA48FR;
protected boolean IAA48FU;
protected boolean IAA48ME;
protected boolean IAA48ML;
protected boolean IAA48MR;
protected short IAA48MU;
protected byte IAA48OE;
protected short IAA48OL;
protected byte IAA48OR;
protected short IAA48OU;
protected byte IAA48WE;
protected byte IAA48WL;
protected boolean IAA48WR;
protected short IAA48WU;
protected boolean IAA48YE;
protected boolean IAA48YL;
protected boolean IAA48YR;
protected boolean IAA48YU;
protected short IAA49;
protected boolean IAA49FE;
protected boolean IAA49FL;
protected boolean IAA49FR;
protected boolean IAA49FU;
protected boolean IAA49ME;
protected boolean IAA49ML;
protected boolean IAA49MR;
protected short IAA49MU;
protected boolean IAA49OE;
protected boolean IAA49OL;
protected boolean IAA49OR;
protected short IAA49OU;
protected boolean IAA49WE;
protected boolean IAA49WL;
protected boolean IAA49WR;
protected boolean IAA49WU;
protected boolean IAA49YE;
protected boolean IAA49YL;
protected boolean IAA49YR;
protected boolean IAA49YU;
protected short IAA50;
protected boolean IAA50FE;
protected boolean IAA50FL;
protected boolean IAA50FR;
protected boolean IAA50FU;
protected boolean IAA50ME;
protected boolean IAA50ML;
protected boolean IAA50MR;
protected boolean IAA50MU;
protected boolean IAA50OE;
protected boolean IAA50OL;
protected boolean IAA50OR;
protected boolean IAA50OU;
protected byte IAA50WE;
protected byte IAA50WL;
protected byte IAA50WR;
protected byte IAA50WU;
protected boolean IAA50YE;
protected boolean IAA50YL;
protected boolean IAA50YR;
protected boolean IAA50YU;
protected short IAA51;
protected boolean IAA51FE;
protected boolean IAA51FL;
protected boolean IAA51FR;
protected boolean IAA51FU;
protected boolean IAA51ME;
protected boolean IAA51ML;
protected boolean IAA51MR;
protected boolean IAA51MU;
protected byte IAA51OE;
protected short IAA51OL;
protected byte IAA51OR;
protected short IAA51OU;
protected boolean IAA51WE;
protected boolean IAA51WL;
protected boolean IAA51WR;
protected boolean IAA51WU;
protected boolean IAA51YE;
protected boolean IAA51YL;
protected boolean IAA51YR;
protected boolean IAA51YU;
protected short IAA52;
protected boolean IAA52FE;
protected boolean IAA52FL;
protected boolean IAA52FR;
protected boolean IAA52FU;
protected boolean IAA52ME;
protected boolean IAA52ML;
protected boolean IAA52MR;
protected short IAA52MU;
protected byte IAA52OE;
protected boolean IAA52OL;
protected byte IAA52OR;
protected short IAA52OU;
protected boolean IAA52WE;
protected boolean IAA52WL;
protected boolean IAA52WR;
protected boolean IAA52WU;
protected boolean IAA52YE;
protected boolean IAA52YL;
protected boolean IAA52YR;
protected boolean IAA52YU;
protected short IAA53;
protected boolean IAA53FE;
protected boolean IAA53FL;
protected boolean IAA53FR;
protected boolean IAA53FU;
protected boolean IAA53ME;
protected boolean IAA53ML;
protected boolean IAA53MR;
protected short IAA53MU;
protected byte IAA53OE;
protected boolean IAA53OL;
protected byte IAA53OR;
protected short IAA53OU;
protected byte IAA53WE;
protected boolean IAA53WL;
protected byte IAA53WR;
protected byte IAA53WU;
protected boolean IAA53YE;
protected boolean IAA53YL;
protected boolean IAA53YR;
protected boolean IAA53YU;
protected short IAA54;
protected boolean IAA54FE;
protected boolean IAA54FL;
protected boolean IAA54FR;
protected boolean IAA54FU;
protected boolean IAA54ME;
protected short IAA54ML;
protected boolean IAA54MR;
protected short IAA54MU;
protected byte IAA54OE;
protected short IAA54OL;
protected byte IAA54OR;
protected short IAA54OU;
protected boolean IAA54WE;
protected boolean IAA54WL;
protected boolean IAA54WR;
protected boolean IAA54WU;
protected boolean IAA54YE;
protected boolean IAA54YL;
protected boolean IAA54YR;
protected short IAA54YU;
protected short IAA55;
protected byte IAA55FE;
protected byte IAA55FL;
protected boolean IAA55FR;
protected byte IAA55FU;
protected boolean IAA55ME;
protected short IAA55ML;
protected boolean IAA55MR;
protected short IAA55MU;
protected byte IAA55OE;
protected short IAA55OL;
protected byte IAA55OR;
protected short IAA55OU;
protected byte IAA55WE;
protected short IAA55WL;
protected byte IAA55WR;
protected short IAA55WU;
protected boolean IAA55YE;
protected boolean IAA55YL;
protected boolean IAA55YR;
protected boolean IAA55YU;
protected short IAA56;
protected boolean IAA56FE;
protected boolean IAA56FL;
protected boolean IAA56FR;
protected boolean IAA56FU;
protected boolean IAA56ME;
protected short IAA56ML;
protected boolean IAA56MR;
protected short IAA56MU;
protected byte IAA56OE;
protected byte IAA56OL;
protected byte IAA56OR;
protected short IAA56OU;
protected byte IAA56WE;
protected byte IAA56WL;
protected byte IAA56WR;
protected byte IAA56WU;
protected boolean IAA56YE;
protected boolean IAA56YL;
protected boolean IAA56YR;
protected boolean IAA56YU;
protected short IAA57;
protected boolean IAA57FE;
protected boolean IAA57FL;
protected boolean IAA57FR;
protected boolean IAA57FU;
protected boolean IAA57ME;
protected boolean IAA57ML;
protected boolean IAA57MR;
protected boolean IAA57MU;
protected boolean IAA57OE;
protected boolean IAA57OL;
protected boolean IAA57OR;
protected short IAA57OU;
protected boolean IAA57WE;
protected boolean IAA57WL;
protected boolean IAA57WR;
protected boolean IAA57WU;
protected boolean IAA57YE;
protected boolean IAA57YL;
protected boolean IAA57YR;
protected boolean IAA57YU;
protected short IAA58;
protected boolean IAA58FE;
protected boolean IAA58FL;
protected boolean IAA58FR;
protected boolean IAA58FU;
protected boolean IAA58ME;
protected boolean IAA58ML;
protected boolean IAA58MR;
protected boolean IAA58MU;
protected boolean IAA58OE;
protected boolean IAA58OL;
protected boolean IAA58OR;
protected boolean IAA58OU;
protected boolean IAA58WE;
protected boolean IAA58WL;
protected boolean IAA58WR;
protected boolean IAA58WU;
protected boolean IAA58YE;
protected boolean IAA58YL;
protected boolean IAA58YR;
protected boolean IAA58YU;
protected short IAA59;
protected boolean IAA59FE;
protected boolean IAA59FL;
protected boolean IAA59FR;
protected boolean IAA59FU;
protected boolean IAA59ME;
protected boolean IAA59ML;
protected boolean IAA59MR;
protected boolean IAA59MU;
protected boolean IAA59OE;
protected boolean IAA59OL;
protected boolean IAA59OR;
protected boolean IAA59OU;
protected boolean IAA59WE;
protected boolean IAA59WL;
protected boolean IAA59WR;
protected boolean IAA59WU;
protected boolean IAA59YE;
protected boolean IAA59YL;
protected boolean IAA59YR;
protected boolean IAA59YU;
protected short IAA60;
protected boolean IAA60FE;
protected boolean IAA60FL;
protected boolean IAA60FR;
protected boolean IAA60FU;
protected byte IAA60ME;
protected boolean IAA60ML;
protected boolean IAA60MR;
protected short IAA60MU;
protected byte IAA60OE;
protected short IAA60OL;
protected boolean IAA60OR;
protected short IAA60OU;
protected boolean IAA60WE;
protected boolean IAA60WL;
protected boolean IAA60WR;
protected boolean IAA60WU;
protected boolean IAA60YE;
protected boolean IAA60YL;
protected boolean IAA60YR;
protected boolean IAA60YU;
protected short IAA61;
protected boolean IAA61FE;
protected boolean IAA61FL;
protected boolean IAA61FR;
protected boolean IAA61FU;
protected byte IAA61ME;
protected short IAA61ML;
protected boolean IAA61MR;
protected short IAA61MU;
protected byte IAA61OE;
protected boolean IAA61OL;
protected byte IAA61OR;
protected short IAA61OU;
protected boolean IAA61WE;
protected boolean IAA61WL;
protected boolean IAA61WR;
protected boolean IAA61WU;
protected boolean IAA61YE;
protected boolean IAA61YL;
protected boolean IAA61YR;
protected boolean IAA61YU;
protected short IAA62;
protected boolean IAA62FE;
protected boolean IAA62FL;
protected boolean IAA62FR;
protected boolean IAA62FU;
protected boolean IAA62ME;
protected boolean IAA62ML;
protected boolean IAA62MR;
protected short IAA62MU;
protected byte IAA62OE;
protected short IAA62OL;
protected byte IAA62OR;
protected short IAA62OU;
protected boolean IAA62WE;
protected boolean IAA62WL;
protected boolean IAA62WR;
protected boolean IAA62WU;
protected boolean IAA62YE;
protected boolean IAA62YL;
protected boolean IAA62YR;
protected boolean IAA62YU;
protected short IAA63;
protected boolean IAA63FE;
protected boolean IAA63FL;
protected boolean IAA63FR;
protected boolean IAA63FU;
protected boolean IAA63ME;
protected boolean IAA63ML;
protected boolean IAA63MR;
protected boolean IAA63MU;
protected boolean IAA63OE;
protected boolean IAA63OL;
protected boolean IAA63OR;
protected boolean IAA63OU;
protected boolean IAA63WE;
protected boolean IAA63WL;
protected boolean IAA63WR;
protected boolean IAA63WU;
protected boolean IAA63YE;
protected boolean IAA63YL;
protected boolean IAA63YR;
protected boolean IAA63YU;
protected short IAA64;
protected boolean IAA64FE;
protected boolean IAA64FL;
protected boolean IAA64FR;
protected boolean IAA64FU;
protected boolean IAA64ME;
protected boolean IAA64ML;
protected boolean IAA64MR;
protected short IAA64MU;
protected boolean IAA64OE;
protected boolean IAA64OL;
protected byte IAA64OR;
protected short IAA64OU;
protected boolean IAA64WE;
protected boolean IAA64WL;
protected boolean IAA64WR;
protected boolean IAA64WU;
protected boolean IAA64YE;
protected boolean IAA64YL;
protected boolean IAA64YR;
protected boolean IAA64YU;
protected short IAA65;
protected boolean IAA65FE;
protected boolean IAA65FL;
protected boolean IAA65FR;
protected boolean IAA65FU;
protected byte IAA65ME;
protected short IAA65ML;
protected byte IAA65MR;
protected short IAA65MU;
protected boolean IAA65OE;
protected boolean IAA65OL;
protected boolean IAA65OR;
protected short IAA65OU;
protected byte IAA65WE;
protected boolean IAA65WL;
protected byte IAA65WR;
protected byte IAA65WU;
protected boolean IAA65YE;
protected boolean IAA65YL;
protected boolean IAA65YR;
protected boolean IAA65YU;
protected short IAA66;
protected boolean IAA66FE;
protected boolean IAA66FL;
protected boolean IAA66FR;
protected boolean IAA66FU;
protected boolean IAA66ME;
protected boolean IAA66ML;
protected boolean IAA66MR;
protected boolean IAA66MU;
protected boolean IAA66OE;
protected boolean IAA66OL;
protected boolean IAA66OR;
protected short IAA66OU;
protected boolean IAA66WE;
protected boolean IAA66WL;
protected boolean IAA66WR;
protected boolean IAA66WU;
protected boolean IAA66YE;
protected boolean IAA66YL;
protected boolean IAA66YR;
protected boolean IAA66YU;
protected byte IAA67;
protected boolean IAA67FE;
protected boolean IAA67FL;
protected boolean IAA67FR;
protected short IAA67FU;
protected boolean IAA67ME;
protected boolean IAA67ML;
protected boolean IAA67MR;
protected boolean IAA67MU;
protected boolean IAA67OE;
protected boolean IAA67OL;
protected boolean IAA67OR;
protected boolean IAA67OU;
protected boolean IAA67WE;
protected boolean IAA67WL;
protected boolean IAA67WR;
protected boolean IAA67WU;
protected boolean IAA67YE;
protected boolean IAA67YL;
protected boolean IAA67YR;
protected boolean IAA67YU;
protected short IAA68;
protected boolean IAA68FE;
protected boolean IAA68FL;
protected boolean IAA68FR;
protected boolean IAA68FU;
protected boolean IAA68ME;
protected boolean IAA68ML;
protected boolean IAA68MR;
protected boolean IAA68MU;
protected boolean IAA68OE;
protected boolean IAA68OL;
protected boolean IAA68OR;
protected boolean IAA68OU;
protected boolean IAA68WE;
protected boolean IAA68WL;
protected boolean IAA68WR;
protected boolean IAA68WU;
protected boolean IAA68YE;
protected boolean IAA68YL;
protected boolean IAA68YR;
protected boolean IAA68YU;
protected short IAA69;
protected boolean IAA69FE;
protected boolean IAA69FL;
protected boolean IAA69FR;
protected boolean IAA69FU;
protected boolean IAA69ME;
protected boolean IAA69ML;
protected boolean IAA69MR;
protected boolean IAA69MU;
protected boolean IAA69OE;
protected boolean IAA69OL;
protected boolean IAA69OR;
protected boolean IAA69OU;
protected boolean IAA69WE;
protected boolean IAA69WL;
protected boolean IAA69WR;
protected boolean IAA69WU;
protected boolean IAA69YE;
protected boolean IAA69YL;
protected boolean IAA69YR;
protected boolean IAA69YU;
protected short IAA70;
protected boolean IAA70FE;
protected boolean IAA70FL;
protected boolean IAA70FR;
protected boolean IAA70FU;
protected boolean IAA70ME;
protected boolean IAA70ML;
protected boolean IAA70MR;
protected boolean IAA70MU;
protected boolean IAA70OE;
protected boolean IAA70OL;
protected boolean IAA70OR;
protected boolean IAA70OU;
protected boolean IAA70WE;
protected boolean IAA70WL;
protected boolean IAA70WR;
protected boolean IAA70WU;
protected boolean IAA70YE;
protected boolean IAA70YL;
protected boolean IAA70YR;
protected boolean IAA70YU;
protected short IAA71;
protected boolean IAA71FE;
protected boolean IAA71FL;
protected boolean IAA71FR;
protected boolean IAA71FU;
protected boolean IAA71ME;
protected boolean IAA71ML;
protected boolean IAA71MR;
protected short IAA71MU;
protected boolean IAA71OE;
protected boolean IAA71OL;
protected boolean IAA71OR;
protected boolean IAA71OU;
protected boolean IAA71WE;
protected boolean IAA71WL;
protected boolean IAA71WR;
protected boolean IAA71WU;
protected boolean IAA71YE;
protected boolean IAA71YL;
protected boolean IAA71YR;
protected boolean IAA71YU;
protected byte IAA72;
protected boolean IAA72FE;
protected boolean IAA72FL;
protected boolean IAA72FR;
protected boolean IAA72FU;
protected boolean IAA72ME;
protected boolean IAA72ML;
protected boolean IAA72MR;
protected boolean IAA72MU;
protected boolean IAA72OE;
protected boolean IAA72OL;
protected boolean IAA72OR;
protected short IAA72OU;
protected boolean IAA72WE;
protected boolean IAA72WL;
protected boolean IAA72WR;
protected boolean IAA72WU;
protected boolean IAA72YE;
protected boolean IAA72YL;
protected boolean IAA72YR;
protected boolean IAA72YU;
protected byte IAAIPE;
protected short IAAIPL;
protected byte IAAIPR;
protected short IAAIPU;
protected byte IAB10;
protected byte IAB11;
protected byte IAB12;
protected byte IAB13;
protected byte IAB14;
protected byte IAB15;
protected byte IAB16;
protected byte IAB17;
protected byte IAB18;
protected byte IAB28;
protected byte IAB29;
protected byte IAB30;
protected byte IAB31;
protected byte IAB32;
protected byte IAB33;
protected byte IAB34;
protected byte IAB35;
protected byte IAB36;
protected byte IAB46;
protected byte IAB47;
protected byte IAB48;
protected byte IAB49;
protected byte IAB50;
protected byte IAB51;
protected byte IAB52;
protected byte IAB53;
protected byte IAB54;
protected byte IAB64;
protected byte IAB65;
protected byte IAB66;
protected byte IAB67;
protected byte IAB68;
protected boolean IAB69;
protected byte IAB70;
protected byte IAB71;
protected byte IAB72;
protected byte IABEB;
protected byte IABEN95;
protected byte IABEN96;
protected byte IABENCB;
protected byte IABENCC;
protected byte IABENGA;
protected byte IABENIS;
protected byte IABENJA;
protected byte IABENPC;
protected byte IABENTC;
protected byte IABENWP;
protected byte IABEP95;
protected byte IABEP96;
protected byte IABEPCB;
protected byte IABEPCC;
protected byte IABEPGA;
protected byte IABEPIS;
protected byte IABEPJA;
protected byte IABEPM85;
protected byte IABEPM86;
protected byte IABEPM96;
protected byte IABEPMCB;
protected byte IABEPMCC;
protected byte IABEPMFP;
protected byte IABEPMGA;
protected byte IABEPMIS;
protected byte IABEPMJA;
protected byte IABEPMPC;
protected byte IABEPMTC;
protected byte IABEPMWP;
protected byte IABEPN95;
protected byte IABEPN96;
protected byte IABEPNCB;
protected byte IABEPNCC;
protected byte IABEPNGA;
protected byte IABEPNIS;
protected byte IABEPNJA;
protected byte IABEPNPC;
protected byte IABEPNWC;
protected byte IABEPNWP;
protected byte IABEPPC;
protected byte IABEPTC;
protected byte IABEPWP;
protected byte IABER95;
protected byte IABER96;
protected byte IABERCB;
protected byte IABERCC;
protected byte IABERGA;
protected byte IABERIS;
protected byte IABERJA;
protected byte IABERM85;
protected byte IABERM86;
protected byte IABERM96;
protected byte IABERMCB;
protected byte IABERMCC;
protected byte IABERMFP;
protected byte IABERMGA;
protected byte IABERMIS;
protected byte IABERMJA;
protected byte IABERMPC;
protected byte IABERMTC;
protected byte IABERMWP;
protected byte IABERPC;
protected byte IABERTC;
protected byte IABERWP;
protected byte IABM10;
protected byte IABM11;
protected byte IABM12;
protected byte IABM13;
protected byte IABM14;
protected byte IABM15;
protected boolean IABM16;
protected byte IABM17;
protected byte IABM18;
protected byte IABM28;
protected byte IABM29;
protected byte IABM30;
protected byte IABM31;
protected byte IABM32;
protected byte IABM33;
protected boolean IABM34;
protected byte IABM35;
protected byte IABM36;
protected byte IABM46;
protected byte IABM47;
protected byte IABM48;
protected byte IABM49;
protected byte IABM50;
protected byte IABM51;
protected byte IABM52;
protected byte IABM53;
protected byte IABM54;
protected byte IABM64;
protected byte IABM65;
protected byte IABM66;
protected byte IABM67;
protected byte IABM68;
protected boolean IABM69;
protected byte IABM70;
protected byte IABM71;
protected boolean IABM72;
protected byte IABW10;
protected byte IABW11;
protected byte IABW12;
protected byte IABW13;
protected byte IABW14;
protected byte IABW15;
protected byte IABW16;
protected byte IABW17;
protected byte IABW18;
protected byte IABW28;
protected boolean IABW29;
protected byte IABW30;
protected byte IABW31;
protected byte IABW32;
protected byte IABW33;
protected byte IABW34;
protected byte IABW35;
protected boolean IABW36;
protected byte IABW46;
protected byte IABW47;
protected byte IABW48;
protected byte IABW49;
protected byte IABW50;
protected byte IABW51;
protected byte IABW52;
protected byte IABW53;
protected byte IABW54;
protected byte IABW64;
protected byte IABW65;
protected boolean IABW66;
protected byte IABW67;
protected boolean IABW68;
protected boolean IABW69;
protected byte IABW70;
protected byte IABW71;
protected byte IABW72;
protected byte IACISAE;
protected short IACISAL;
protected byte IACISAR;
protected short IACISAU;
protected byte IADEBME;
protected short IADEBML;
protected byte IADEBMR;
protected short IADEBMU;
protected byte IAEA10E;
protected short IAEA10L;
protected byte IAEA10R;
protected short IAEA10U;
protected boolean IAEA11E;
protected byte IAEA11L;
protected boolean IAEA11R;
protected short IAEA11U;
protected byte IAEAR2E;
protected int IAEAR2L;
protected byte IAEAR2R;
protected int IAEAR2U;
protected byte IAEAR3E;
protected int IAEAR3L;
protected byte IAEAR3R;
protected int IAEAR3U;
protected byte IAEAR4E;
protected int IAEAR4L;
protected byte IAEAR4R;
protected int IAEAR4U;
protected byte IAEAR5E;
protected int IAEAR5L;
protected byte IAEAR5R;
protected int IAEAR5U;
protected byte IAEAR6E;
protected int IAEAR6L;
protected byte IAEAR6R;
protected int IAEAR6U;
protected byte IAEAR7E;
protected int IAEAR7L;
protected byte IAEAR7R;
protected int IAEAR7U;
protected byte IAEAR8E;
protected int IAEAR8L;
protected byte IAEAR8R;
protected int IAEAR8U;
protected byte IAEAR9E;
protected short IAEAR9L;
protected byte IAEAR9R;
protected short IAEAR9U;
protected byte IAEARE;
protected int IAEARL;
protected boolean IAEARN11;
protected byte IAEARR;
protected int IAEARU;
protected short IAERN;
protected byte IAERN10;
protected int IAERN2;
protected int IAERN3;
protected int IAERN4;
protected int IAERN5;
protected short IAERN6;
protected short IAERN7;
protected short IAERN8;
protected byte IAERN9;
protected byte IAFBAE;
protected int IAFBAL;
protected byte IAFBAR;
protected int IAFBAU;
protected byte IAFUEL;
protected byte IAHDB;
protected byte IAHDN95;
protected byte IAHDN96;
protected byte IAHDNAA;
protected byte IAHDNCA;
protected byte IAHDNDL;
protected byte IAHDNIB;
protected byte IAHDNII;
protected byte IAHDNSD;
protected byte IAHDNSP;
protected byte IAHDNWD;
protected byte IAHDP95;
protected byte IAHDP96;
protected byte IAHDPAA;
protected byte IAHDPCA;
protected byte IAHDPDL;
protected byte IAHDPIB;
protected byte IAHDPII;
protected byte IAHDPM85;
protected byte IAHDPM86;
protected byte IAHDPM96;
protected byte IAHDPMAA;
protected byte IAHDPMCA;
protected byte IAHDPMDL;
protected byte IAHDPMIB;
protected byte IAHDPMII;
protected byte IAHDPMSD;
protected byte IAHDPMSP;
protected byte IAHDPMWD;
protected byte IAHDPN85;
protected byte IAHDPN96;
protected byte IAHDPNAA;
protected byte IAHDPNCA;
protected byte IAHDPNDL;
protected byte IAHDPNIB;
protected byte IAHDPNII;
protected byte IAHDPNSD;
protected byte IAHDPNSP;
protected byte IAHDPNWD;
protected byte IAHDPSD;
protected byte IAHDPSP;
protected byte IAHDPWD;
protected byte IAHDR95;
protected byte IAHDR96;
protected byte IAHDRAA;
protected byte IAHDRCA;
protected byte IAHDRDL;
protected byte IAHDRIB;
protected byte IAHDRII;
protected byte IAHDRM85;
protected byte IAHDRM86;
protected byte IAHDRM96;
protected byte IAHDRMAA;
protected byte IAHDRMCA;
protected byte IAHDRMDL;
protected byte IAHDRMIB;
protected byte IAHDRMII;
protected byte IAHDRMSD;
protected byte IAHDRMSP;
protected byte IAHDRMWD;
protected byte IAHDRSD;
protected byte IAHDRSP;
protected byte IAHDRWD;
protected byte IAHOMEE;
protected int IAHOMEL;
protected byte IAHOMER;
protected int IAHOMEU;
protected byte IAIRAE;
protected int IAIRAL;
protected byte IAIRAR;
protected int IAIRAU;
protected byte IAISACAS;
protected byte IAISADE;
protected short IAISADL;
protected byte IAISADR;
protected short IAISADU;
protected byte IAISALI;
protected byte IAISASHA;
protected byte IALIPAE;
protected int IALIPAL;
protected byte IALIPAR;
protected int IALIPAU;
protected byte IALISAE;
protected short IALISAL;
protected byte IALISAR;
protected short IALISAU;
protected byte IALIYAE;
protected int IALIYAL;
protected byte IALIYAR;
protected int IALIYAU;
protected byte IALM19;
protected boolean IALM20;
protected byte IALM21;
protected byte IALM22;
protected byte IALM23;
protected byte IALM24;
protected byte IALM25;
protected byte IALM26;
protected byte IALM27;
protected byte IALM37;
protected byte IALM38;
protected byte IALM39;
protected byte IALM40;
protected byte IALM41;
protected byte IALM42;
protected byte IALM43;
protected byte IALM44;
protected byte IALM45;
protected byte IALM55;
protected byte IALM56;
protected byte IALM57;
protected byte IALM58;
protected boolean IALM59;
protected byte IALM60;
protected byte IALM61;
protected byte IALM62;
protected byte IALM63;
protected byte IALOAME;
protected short IALOAML;
protected byte IALOAMR;
protected short IALOAMU;
protected byte IALOAN96;
protected byte IALOANHP;
protected byte IALOANML;
protected byte IALOANMO;
protected byte IALOANOD;
protected byte IALOANPL;
protected byte IALOANSF;
protected byte IALREFE;
protected byte IALREFL;
protected byte IALREFR;
protected byte IALREFU;
protected byte IALREME;
protected short IALREML;
protected byte IALREMR;
protected short IALREMU;
protected byte IALREOE;
protected short IALREOL;
protected byte IALREOR;
protected short IALREOU;
protected byte IALREWE;
protected short IALREWL;
protected byte IALREWR;
protected byte IALREWU;
protected byte IALREYE;
protected short IALREYL;
protected byte IALREYR;
protected short IALREYU;
protected byte IALY19;
protected byte IALY20;
protected byte IALY21;
protected byte IALY22;
protected byte IALY23;
protected byte IALY24;
protected byte IALY25;
protected byte IALY26;
protected byte IALY27;
protected byte IALY37;
protected byte IALY38;
protected byte IALY39;
protected byte IALY40;
protected byte IALY41;
protected byte IALY42;
protected byte IALY43;
protected byte IALY44;
protected byte IALY45;
protected byte IALY55;
protected byte IALY56;
protected byte IALY57;
protected byte IALY58;
protected boolean IALY59;
protected byte IALY60;
protected byte IALY61;
protected byte IALY62;
protected byte IALY63;
protected byte IANPBPE;
protected short IANPBPL;
protected byte IANPBPR;
protected short IANPBPU;
protected byte IAOASAE;
protected int IAOASAL;
protected byte IAOASAR;
protected int IAOASAU;
protected byte IAOMME;
protected int IAOMML;
protected byte IAOMMR;
protected int IAOMMU;
protected byte IAOTHP3;
protected byte IAOWEME;
protected short IAOWEML;
protected byte IAOWEMR;
protected short IAOWEMU;
protected byte IAP39;
protected byte IAP40;
protected byte IAP41;
protected byte IAP42;
protected byte IAP43;
protected byte IAP44;
protected byte IAP45;
protected byte IAP46;
protected byte IAP47;
protected byte IAP48;
protected byte IAP49;
protected byte IAP50;
protected byte IAP51;
protected byte IAP52;
protected byte IAP53;
protected byte IAP54;
protected byte IAP55;
protected byte IAP56;
protected byte IAP57;
protected byte IAP58;
protected byte IAP59;
protected byte IAP60;
protected byte IAP61;
protected byte IAP62;
protected byte IAP63;
protected byte IAP64;
protected byte IAP65;
protected byte IAP66;
protected byte IAP67;
protected byte IAP68;
protected boolean IAP69;
protected byte IAP70;
protected byte IAP71;
protected byte IAP72;
protected byte IAPAY;
protected byte IAPAY2;
protected byte IAPAY3;
protected byte IAPAYR;
protected byte IAPAYR2;
protected byte IAPAYR3;
protected byte IAPAYW11;
protected byte IAPK95;
protected byte IAPK96;
protected byte IAPKGW;
protected byte IAPKIOB;
protected byte IAPKLI;
protected byte IAPKM1E;
protected int IAPKM1L;
protected byte IAPKM1R;
protected int IAPKM1U;
protected byte IAPKM2E;
protected int IAPKM2L;
protected byte IAPKM2R;
protected int IAPKM2U;
protected byte IAPKM3E;
protected boolean IAPKM3L;
protected byte IAPKM3R;
protected short IAPKM3U;
protected byte IAPKM4E;
protected short IAPKM4L;
protected byte IAPKM4R;
protected short IAPKM4U;
protected byte IAPKM5E;
protected int IAPKM5L;
protected byte IAPKM5R;
protected int IAPKM5U;
protected byte IAPKM6E;
protected int IAPKM6L;
protected byte IAPKM6R;
protected int IAPKM6U;
protected byte IAPKM7E;
protected short IAPKM7L;
protected byte IAPKM7R;
protected short IAPKM7U;
protected byte IAPKM85;
protected byte IAPKM86;
protected byte IAPKM8E;
protected int IAPKM8L;
protected byte IAPKM8R;
protected int IAPKM8U;
protected byte IAPKM96;
protected byte IAPKMGW;
protected byte IAPKMIOB;
protected byte IAPKMLI;
protected byte IAPKMOIP;
protected byte IAPKMPAP;
protected byte IAPKMPP;
protected byte IAPKMRP;
protected byte IAPKOIP;
protected byte IAPKPAP;
protected byte IAPKPP;
protected byte IAPKRP;
protected byte IAPLW;
protected byte IAPLY;
protected byte IAPLYP;
protected byte IAPLYW;
protected byte IAPPAFE;
protected boolean IAPPAFL;
protected byte IAPPAFR;
protected short IAPPAFU;
protected byte IAPPAME;
protected short IAPPAML;
protected byte IAPPAMR;
protected short IAPPAMU;
protected byte IAPPAOE;
protected short IAPPAOL;
protected byte IAPPAOR;
protected short IAPPAOU;
protected byte IAPPAWE;
protected short IAPPAWL;
protected byte IAPPAWR;
protected short IAPPAWU;
protected byte IAPPAYE;
protected short IAPPAYL;
protected byte IAPPAYR;
protected short IAPPAYU;
protected byte IAPPEIE;
protected short IAPPEIL;
protected byte IAPPEIR;
protected short IAPPEIU;
protected byte IAPROP95;
protected byte IAPROP96;
protected byte IAPROPFA;
protected byte IAPROPHO;
protected byte IAPROPIN;
protected byte IAPROPOL;
protected byte IAPROPOW;
protected byte IAPROPTR;
protected byte IAPYW2;
protected byte IAPYW4;
protected byte IAPYW5;
protected byte IAPYW6;
protected byte IAPYW7;
protected byte IAPYW8;
protected byte IAPYW9;
protected byte IARECE;
protected short IARECL;
protected byte IARECR;
protected short IARECU;
protected short IAREGM3;
protected byte IAREGO3;
protected boolean IAREPFE;
protected boolean IAREPFL;
protected boolean IAREPFR;
protected boolean IAREPFU;
protected byte IAREPME;
protected byte IAREPML;
protected byte IAREPMR;
protected short IAREPMU;
protected byte IAREPOE;
protected short IAREPOL;
protected byte IAREPOR;
protected short IAREPOU;
protected byte IAREPWE;
protected byte IAREPWL;
protected byte IAREPWR;
protected byte IAREPWU;
protected byte IAREPYE;
protected byte IAREPYL;
protected byte IAREPYR;
protected short IAREPYU;
protected boolean IARG2FE;
protected boolean IARG2FL;
protected boolean IARG2FR;
protected boolean IARG2FU;
protected byte IARG2ME;
protected short IARG2ML;
protected byte IARG2MR;
protected short IARG2MU;
protected byte IARG2OE;
protected byte IARG2OL;
protected byte IARG2OR;
protected byte IARG2OU;
protected boolean IARG2WE;
protected boolean IARG2WL;
protected boolean IARG2WR;
protected boolean IARG2WU;
protected boolean IARG2YE;
protected boolean IARG2YL;
protected boolean IARG2YR;
protected boolean IARG2YU;
protected boolean IARG3FE;
protected boolean IARG3FL;
protected boolean IARG3FR;
protected boolean IARG3FU;
protected boolean IARG3ME;
protected boolean IARG3ML;
protected boolean IARG3MR;
protected boolean IARG3MU;
protected boolean IARG3OE;
protected boolean IARG3OL;
protected boolean IARG3OR;
protected boolean IARG3OU;
protected boolean IARG3WE;
protected boolean IARG3WL;
protected boolean IARG3WR;
protected boolean IARG3WU;
protected boolean IARG3YE;
protected boolean IARG3YL;
protected boolean IARG3YR;
protected boolean IARG3YU;
protected boolean IARGFE;
protected boolean IARGFL;
protected boolean IARGFR;
protected boolean IARGFU;
protected boolean IARGM;
protected byte IARGME;
protected short IARGML;
protected byte IARGMR;
protected short IARGMU;
protected byte IARGMW;
protected boolean IARGMW2;
protected byte IARGMWP;
protected byte IARGOE;
protected short IARGOL;
protected byte IARGOR;
protected short IARGOU;
protected byte IARGWE;
protected byte IARGWL;
protected byte IARGWR;
protected byte IARGWU;
protected byte IARGYE;
protected byte IARGYL;
protected byte IARGYR;
protected byte IARGYR1;
protected byte IARGYR2;
protected boolean IARGYR3;
protected byte IARGYRP;
protected byte IARGYU;
protected byte IARMWA;
protected boolean IARMWA2;
protected boolean IARMWA3;
protected boolean IARMWPA;
protected byte IASAVAE;
protected int IASAVAL;
protected byte IASAVAR;
protected int IASAVAU;
protected byte IASCAE;
protected int IASCAL;
protected byte IASCAR;
protected int IASCAU;
protected byte IASHTFOL;
protected byte IASHTMUT;
protected byte IASHTPRI;
protected byte IASHTUKL;
protected byte IASI95;
protected byte IASI96;
protected byte IASIBG;
protected byte IASICA;
protected byte IASIISA;
protected byte IASINS;
protected byte IASIOIE;
protected short IASIOIL;
protected byte IASIOIR;
protected short IASIOIU;
protected byte IASIOPT;
protected byte IASIPB;
protected byte IASIPEP;
protected byte IASISAE;
protected int IASISAL;
protected byte IASISAR;
protected int IASISAU;
protected byte IASISAV;
protected byte IASISC;
protected byte IASISHA;
protected byte IASITESS;
protected byte IASIUIT;
protected byte IASSSE;
protected byte IASSSIE;
protected short IASSSIL;
protected byte IASSSIR;
protected short IASSSIU;
protected int IASSSL;
protected byte IASSSR;
protected int IASSSU;
protected boolean IAT39;
protected boolean IAT40;
protected boolean IAT41;
protected boolean IAT42;
protected boolean IAT43;
protected boolean IAT44;
protected boolean IAT45;
protected boolean IAT46;
protected boolean IAT47;
protected boolean IAT48;
protected boolean IAT49;
protected boolean IAT50;
protected boolean IAT51;
protected boolean IAT52;
protected boolean IAT53;
protected boolean IAT54;
protected boolean IAT55;
protected boolean IAT56;
protected boolean IAT57;
protected boolean IAT58;
protected boolean IAT59;
protected boolean IAT60;
protected boolean IAT61;
protected boolean IAT62;
protected boolean IAT63;
protected boolean IAT64;
protected boolean IAT65;
protected boolean IAT66;
protected boolean IAT67;
protected boolean IAT68;
protected boolean IAT69;
protected boolean IAT70;
protected boolean IAT71;
protected boolean IAT72;
protected byte IAUITE;
protected byte IAUITIE;
protected short IAUITIL;
protected byte IAUITIR;
protected short IAUITIU;
protected int IAUITL;
protected byte IAUITR;
protected int IAUITU;
protected boolean IAWHMT39;
protected byte IFLAG_DBSR1;
protected byte IFLAG_DBSR2;
protected byte IFLAG_DCCONT;
protected byte IFLAG_DCFUND;
protected boolean IFLAG_EARN;
protected byte IFLAG_REC;
protected byte IFLAG_RTEN;
protected double INRECEIPT_06;
protected double INRECEIPT_SPA;
protected byte INTMTH;
protected short INTYEAR;
protected byte MAINHH;
protected double MAXALC;
protected byte MID;
protected byte MMAIDC;
protected byte MMCOM85;
protected byte MMCOM86;
protected byte MMCOMNI;
protected byte MMCOMPA;
protected byte MMCOMRF;
protected byte MMCOMSP;
protected byte MMCOMUN;
protected byte MMRECRC;
protected byte MOTHER;
protected byte MSTAT;
protected byte MTHAGD;
protected byte NCLM;
protected byte NCORRECT;
protected byte NMISSED;
protected byte NNMISRC;
protected byte NROW;
protected short NROWCLM;
protected byte ORDCON;
protected byte ORGANIS;
protected byte ORGNO;
protected byte OUTSC;
protected byte OUTSH;
protected byte OUTSW;
protected byte PAINHH;
protected byte PALEVEL;
protected byte PC_P_F;
protected double PC_P_I;
protected short PC_P_O;
protected short PC_P_T;
protected byte PC_R_F;
protected double PC_R_I;
protected short PC_R_O;
protected short PC_R_T;
protected byte PENSNO;
protected byte PHLEGM;
protected double PRIPENW_06;
protected double PRIPENW_SPA;
protected short PSMID;
protected short PSOLD;
protected String QVER;
protected byte RAAUK;
protected byte RABKS;
protected byte RABOR;
protected byte RABUK;
protected byte RABUK10;
protected byte RABUK11;
protected byte RABUK12;
protected byte RABUK13;
protected byte RABUK14;
protected byte RABUK15;
protected byte RABUK16;
protected byte RABUK17;
protected byte RABUK18;
protected byte RABUK19;
protected byte RABUK2;
protected byte RABUK20;
protected byte RABUK3;
protected byte RABUK4;
protected byte RABUK5;
protected byte RABUK6;
protected byte RABUK7;
protected byte RABUK8;
protected byte RABUK9;
protected byte RADIV;
protected short RADIY;
protected short RAESS;
protected boolean RAESS10;
protected boolean RAESS11;
protected short RAESS12;
protected boolean RAESS13;
protected boolean RAESS14;
protected boolean RAESS15;
protected boolean RAESS16;
protected boolean RAESS17;
protected boolean RAESS18;
protected boolean RAESS19;
protected short RAESS2;
protected boolean RAESS20;
protected boolean RAESS3;
protected short RAESS4;
protected short RAESS5;
protected boolean RAESS6;
protected boolean RAESS7;
protected short RAESS8;
protected short RAESS9;
protected short RAEST;
protected boolean RAEST10;
protected short RAEST11;
protected boolean RAEST12;
protected boolean RAEST13;
protected boolean RAEST14;
protected boolean RAEST15;
protected boolean RAEST16;
protected boolean RAEST17;
protected boolean RAEST18;
protected boolean RAEST19;
protected short RAEST2;
protected boolean RAEST20;
protected short RAEST3;
protected short RAEST4;
protected short RAEST5;
protected short RAEST6;
protected short RAEST7;
protected short RAEST8;
protected short RAEST9;
protected byte RAFAC1;
protected byte RAFAC2;
protected byte RAFAC3;
protected byte RAFAC4;
protected byte RAFAC5;
protected byte RAFAC6;
protected byte RAFAC96;
protected byte RAGAP;
protected byte RAGAP10;
protected byte RAGAP11;
protected byte RAGAP12;
protected byte RAGAP13;
protected byte RAGAP14;
protected byte RAGAP15;
protected byte RAGAP16;
protected byte RAGAP17;
protected boolean RAGAP18;
protected byte RAGAP19;
protected byte RAGAP2;
protected boolean RAGAP20;
protected byte RAGAP3;
protected byte RAGAP4;
protected byte RAGAP5;
protected byte RAGAP6;
protected byte RAGAP7;
protected byte RAGAP8;
protected byte RAGAP9;
protected byte RALIS1;
protected byte RALIS2;
protected byte RALIS3;
protected byte RALIS4;
protected byte RALIS5;
protected byte RALIS6;
protected byte RALIS7;
protected byte RALIS8;
protected byte RALIS96;
protected byte RALOOP10;
protected short RAMOA;
protected byte RAMOT;
protected byte RAMOY;
protected byte RAMOYC;
protected byte RAOWN;
protected byte RAOWN10;
protected byte RAOWN11;
protected byte RAOWN12;
protected byte RAOWN13;
protected byte RAOWN14;
protected byte RAOWN15;
protected byte RAOWN16;
protected byte RAOWN17;
protected byte RAOWN18;
protected byte RAOWN19;
protected byte RAOWN2;
protected byte RAOWN20;
protected byte RAOWN3;
protected byte RAOWN4;
protected byte RAOWN5;
protected byte RAOWN6;
protected byte RAOWN7;
protected byte RAOWN8;
protected byte RAOWN9;
protected short RAPAR;
protected byte RAPEO;
protected byte RAPRI;
protected byte RAPRI10;
protected byte RAPRI10C;
protected byte RAPRI11;
protected byte RAPRI11C;
protected byte RAPRI12;
protected byte RAPRI12C;
protected byte RAPRI13;
protected byte RAPRI13C;
protected byte RAPRI14;
protected byte RAPRI14C;
protected byte RAPRI15;
protected byte RAPRI15C;
protected byte RAPRI16;
protected byte RAPRI16C;
protected byte RAPRI17;
protected byte RAPRI17C;
protected byte RAPRI18;
protected byte RAPRI18C;
protected byte RAPRI19;
protected byte RAPRI19C;
protected byte RAPRI2;
protected byte RAPRI20;
protected byte RAPRI20C;
protected byte RAPRI2C;
protected byte RAPRI3;
protected byte RAPRI3C;
protected byte RAPRI4;
protected byte RAPRI4C;
protected short RAPRI5;
protected byte RAPRI5C;
protected byte RAPRI6;
protected byte RAPRI6C;
protected byte RAPRI7;
protected byte RAPRI7C;
protected byte RAPRI8;
protected byte RAPRI8C;
protected byte RAPRI9;
protected byte RAPRI9C;
protected byte RAPRIC;
protected byte RAREL1;
protected byte RAREL2;
protected byte RAREL3;
protected byte RAREL4;
protected byte RAREL5;
protected byte RAREL6;
protected byte RAREL7;
protected byte RAREL8;
protected byte RAREL9;
protected byte RAROO;
protected short RASTB;
protected short RASTB10;
protected short RASTB11;
protected short RASTB12;
protected short RASTB13;
protected short RASTB14;
protected short RASTB15;
protected short RASTB16;
protected short RASTB17;
protected short RASTB18;
protected short RASTB19;
protected short RASTB2;
protected short RASTB20;
protected short RASTB3;
protected short RASTB4;
protected short RASTB5;
protected short RASTB6;
protected short RASTB7;
protected short RASTB8;
protected short RASTB9;
protected short RASTLY10;
protected short RASTLY11;
protected short RASTLY12;
protected short RASTLY13;
protected short RASTLY14;
protected short RASTLY15;
protected short RASTLY16;
protected short RASTLY17;
protected short RASTLY18;
protected short RASTLY19;
protected short RASTLY20;
protected short RASTLYR;
protected short RASTLYR2;
protected short RASTLYR3;
protected short RASTLYR4;
protected short RASTLYR5;
protected short RASTLYR6;
protected short RASTLYR7;
protected short RASTLYR8;
protected short RASTLYR9;
protected short RASTP;
protected short RASTP10;
protected short RASTP11;
protected short RASTP12;
protected short RASTP13;
protected short RASTP14;
protected short RASTP15;
protected short RASTP16;
protected short RASTP17;
protected short RASTP18;
protected short RASTP19;
protected short RASTP2;
protected short RASTP20;
protected short RASTP3;
protected short RASTP4;
protected short RASTP5;
protected short RASTP6;
protected short RASTP7;
protected short RASTP8;
protected short RASTP9;
protected byte RASTT10;
protected byte RASTT11;
protected byte RASTT12;
protected byte RASTT13;
protected byte RASTT14;
protected byte RASTT15;
protected byte RASTT16;
protected byte RASTT17;
protected byte RASTT18;
protected byte RASTT19;
protected byte RASTT2;
protected byte RASTT20;
protected byte RASTT3;
protected byte RASTT4;
protected byte RASTT5;
protected byte RASTT6;
protected byte RASTT7;
protected byte RASTT8;
protected byte RASTT9;
protected short RASTY;
protected short RASTY10;
protected short RASTY11;
protected short RASTY12;
protected short RASTY13;
protected short RASTY14;
protected short RASTY15;
protected short RASTY16;
protected short RASTY17;
protected short RASTY18;
protected short RASTY19;
protected short RASTY2;
protected short RASTY20;
protected short RASTY3;
protected short RASTY4;
protected short RASTY5;
protected short RASTY6;
protected short RASTY7;
protected short RASTY8;
protected short RASTY9;
protected byte RCAAL;
protected byte RCAAL2;
protected byte RCABT;
protected short RCADD;
protected short RCADD2;
protected byte RCADP;
protected short RCADT;
protected short RCADT2;
protected short RCADY;
protected boolean RCADY10;
protected boolean RCADY11;
protected boolean RCADY12;
protected boolean RCADY13;
protected short RCADY2;
protected short RCADY3;
protected short RCADY4;
protected short RCADY5;
protected short RCADY6;
protected boolean RCADY7;
protected short RCADY8;
protected boolean RCADY9;
protected byte RCALI;
protected byte RCALI2;
protected byte RCALI3;
protected byte RCALI4;
protected byte RCALI5;
protected byte RCALI6;
protected byte RCALO;
protected byte RCALV;
protected boolean RCALV10;
protected boolean RCALV11;
protected boolean RCALV12;
protected boolean RCALV13;
protected byte RCALV2;
protected byte RCALV21;
protected byte RCALV22;
protected byte RCALV3;
protected byte RCALV4;
protected boolean RCALV5;
protected boolean RCALV6;
protected byte RCALV7;
protected boolean RCALV8;
protected boolean RCALV9;
protected byte RCANO;
protected byte RCASX;
protected byte RCASX2;
protected short RCAYR;
protected short RCAYR2;
protected byte RCBNO;
protected byte RCBTH;
protected byte RCCHC;
protected byte RCCHC10;
protected byte RCCHC11;
protected boolean RCCHC12;
protected boolean RCCHC13;
protected byte RCCHC2;
protected byte RCCHC3;
protected byte RCCHC4;
protected byte RCCHC5;
protected byte RCCHC6;
protected byte RCCHC7;
protected byte RCCHC8;
protected byte RCCHC9;
protected short RCCHDY10;
protected short RCCHDY11;
protected short RCCHDY12;
protected short RCCHDY13;
protected short RCCHDYR;
protected short RCCHDYR2;
protected short RCCHDYR3;
protected short RCCHDYR4;
protected short RCCHDYR5;
protected short RCCHDYR6;
protected short RCCHDYR7;
protected short RCCHDYR8;
protected short RCCHDYR9;
protected byte RCCHSEX;
protected byte RCCHSEX2;
protected byte RCCHSEX3;
protected byte RCCHSEX4;
protected byte RCCHSEX5;
protected byte RCCHSEX6;
protected byte RCCHSEX7;
protected byte RCCHSEX8;
protected byte RCCHSEX9;
protected byte RCCHSX10;
protected byte RCCHSX11;
protected boolean RCCHSX12;
protected boolean RCCHSX13;
protected byte RCDBC;
protected boolean RCDBC10;
protected boolean RCDBC11;
protected boolean RCDBC12;
protected boolean RCDBC13;
protected byte RCDBC2;
protected byte RCDBC3;
protected byte RCDBC4;
protected byte RCDBC5;
protected byte RCDBC6;
protected byte RCDBC7;
protected byte RCDBC8;
protected byte RCDBC9;
protected byte RCDNO;
protected short RCDYY;
protected boolean RCDYY10;
protected boolean RCDYY11;
protected boolean RCDYY12;
protected boolean RCDYY13;
protected short RCDYY2;
protected short RCDYY3;
protected short RCDYY4;
protected boolean RCDYY5;
protected boolean RCDYY6;
protected boolean RCDYY7;
protected boolean RCDYY8;
protected boolean RCDYY9;
protected byte RCEND;
protected boolean RCEND10;
protected boolean RCEND11;
protected boolean RCEND12;
protected boolean RCEND13;
protected byte RCEND2;
protected byte RCEND3;
protected byte RCEND4;
protected byte RCEND5;
protected boolean RCEND6;
protected boolean RCEND7;
protected boolean RCEND8;
protected boolean RCEND9;
protected byte RCFAT;
protected byte RCFNO;
protected byte RCFOST;
protected byte RCFOYR;
protected byte RCLIV;
protected byte RCLIV2;
protected byte RCLIV3;
protected byte RCLIV4;
protected byte RCLIV5;
protected boolean RCLIV6;
protected byte RCLVF;
protected byte RCLVF10;
protected byte RCLVF11;
protected boolean RCLVF12;
protected boolean RCLVF13;
protected byte RCLVF2;
protected byte RCLVF3;
protected byte RCLVF4;
protected byte RCLVF5;
protected byte RCLVF6;
protected byte RCLVF7;
protected byte RCLVF8;
protected byte RCLVF9;
protected short RCMDT;
protected short RCMDT10;
protected short RCMDT11;
protected short RCMDT12;
protected boolean RCMDT13;
protected short RCMDT2;
protected short RCMDT3;
protected short RCMDT4;
protected short RCMDT5;
protected short RCMDT6;
protected short RCMDT7;
protected short RCMDT8;
protected short RCMDT9;
protected short RCNDY;
protected short RCNDY2;
protected short RCNDY3;
protected short RCNDY4;
protected short RCNDY5;
protected short RCNDY6;
protected byte RCREL;
protected boolean RCREL10;
protected boolean RCREL11;
protected boolean RCREL12;
protected boolean RCREL13;
protected byte RCREL2;
protected byte RCREL3;
protected byte RCREL4;
protected byte RCREL5;
protected byte RCREL6;
protected byte RCREL7;
protected byte RCREL8;
protected byte RCREL9;
protected byte RCRELC10;
protected boolean RCRELC11;
protected boolean RCRELC12;
protected boolean RCRELC13;
protected byte RCRELCH;
protected byte RCRELCH2;
protected byte RCRELCH3;
protected byte RCRELCH4;
protected byte RCRELCH5;
protected byte RCRELCH6;
protected byte RCRELCH7;
protected byte RCRELCH8;
protected byte RCRELCH9;
protected byte RCRLC;
protected boolean RCRLC10;
protected boolean RCRLC11;
protected boolean RCRLC12;
protected boolean RCRLC13;
protected byte RCRLC2;
protected byte RCRLC3;
protected byte RCRLC4;
protected byte RCRLC5;
protected byte RCRLC6;
protected byte RCRLC7;
protected byte RCRLC8;
protected byte RCRLC9;
protected byte RCSEX;
protected byte RCSEX2;
protected byte RCSEX3;
protected byte RCSEX4;
protected byte RCSEX5;
protected boolean RCSEX6;
protected byte RCSXC;
protected boolean RCSXC10;
protected boolean RCSXC11;
protected boolean RCSXC12;
protected boolean RCSXC13;
protected byte RCSXC2;
protected byte RCSXC3;
protected byte RCSXC4;
protected byte RCSXC5;
protected byte RCSXC6;
protected boolean RCSXC7;
protected boolean RCSXC8;
protected boolean RCSXC9;
protected byte RCSXN;
protected boolean RCSXN10;
protected boolean RCSXN11;
protected boolean RCSXN12;
protected boolean RCSXN13;
protected boolean RCSXN2;
protected byte RCSXN3;
protected byte RCSXN4;
protected boolean RCSXN5;
protected boolean RCSXN6;
protected boolean RCSXN7;
protected boolean RCSXN8;
protected boolean RCSXN9;
protected byte RCTIM;
protected byte RCTIM10;
protected byte RCTIM11;
protected byte RCTIM12;
protected boolean RCTIM13;
protected byte RCTIM2;
protected byte RCTIM3;
protected byte RCTIM4;
protected byte RCTIM5;
protected byte RCTIM6;
protected byte RCTIM7;
protected byte RCTIM8;
protected byte RCTIM9;
protected short RCYRS;
protected short RCYRS2;
protected short RCYRS3;
protected short RCYRS4;
protected short RCYRS5;
protected short RCYRS6;
protected double RETAINEDDB_06;
protected double RETAINEDDB_SPA;
protected double RETAINEDDC_06;
protected double RETAINEDDC_SPA;
protected double RETROWGT;
protected byte RHCCLC;
protected byte RHCCLD;
protected byte RHCCLE;
protected byte RHCCLF;
protected byte RHCCLG;
protected byte RHCCLH;
protected byte RHCCLJ;
protected short RHCCYA;
protected short RHCCYB;
protected short RHCCYC;
protected short RHCCYD;
protected short RHCCYE;
protected short RHCCYF;
protected short RHCCYG;
protected short RHCCYH;
protected short RHCCYJ;
protected short RHCCYK;
protected short RHCCYL;
protected short RHCCYM;
protected boolean RHCCYN;
protected short RHCCYP;
protected short RHCCYQ;
protected byte RHCIA;
protected byte RHCIB;
protected byte RHCIC;
protected byte RHCID;
protected byte RHCIE;
protected byte RHCIF;
protected byte RHCIG1;
protected byte RHCIG10;
protected byte RHCIG10M;
protected byte RHCIG11;
protected byte RHCIG11M;
protected byte RHCIG12;
protected byte RHCIG12M;
protected byte RHCIG13;
protected byte RHCIG13M;
protected byte RHCIG14;
protected byte RHCIG14M;
protected byte RHCIG1M;
protected byte RHCIG2;
protected byte RHCIG2M;
protected byte RHCIG3;
protected byte RHCIG3M;
protected byte RHCIG4;
protected byte RHCIG4M;
protected byte RHCIG5;
protected byte RHCIG51M;
protected byte RHCIG52M;
protected byte RHCIG53M;
protected byte RHCIG54M;
protected byte RHCIG55M;
protected byte RHCIG56M;
protected byte RHCIG57M;
protected byte RHCIG5M;
protected byte RHCIG6;
protected byte RHCIG6M;
protected byte RHCIG7;
protected byte RHCIG7M;
protected byte RHCIG8;
protected byte RHCIG85M;
protected byte RHCIG86M;
protected byte RHCIG8M;
protected byte RHCIG9;
protected byte RHCIG95;
protected byte RHCIG96;
protected byte RHCIG9M;
protected short RHHFY;
protected byte RHHNO;
protected byte RHHPS;
protected byte RHHPY;
protected byte RHHRT;
protected short RHHST;
protected byte RHHYE;
protected short RHHYY;
protected short RHINA;
protected byte RHINJ;
protected byte RHMEB;
protected byte RHMEN;
protected byte RHOVE;
protected short RHOVY;
protected byte RHPBB;
protected byte RHPBC1;
protected byte RHPBC10;
protected byte RHPBC2;
protected byte RHPBC3;
protected byte RHPBC4;
protected byte RHPBC5;
protected byte RHPBC6;
protected byte RHPBC7;
protected byte RHPBC8;
protected byte RHPBC9;
protected byte RHPBC96;
protected byte RHPBD1;
protected byte RHPBD2;
protected byte RHPBD3;
protected byte RHPBD4;
protected byte RHPBD5;
protected byte RHPBD6;
protected byte RHPBD7;
protected byte RHPBD8;
protected byte RHPBD9;
protected byte RHPBE1;
protected byte RHPBE1M;
protected byte RHPBE2;
protected byte RHPBE2M;
protected byte RHPBE3;
protected byte RHPBE3M;
protected byte RHPBE4;
protected byte RHPBE4M;
protected byte RHPBE5;
protected byte RHPBE51M;
protected byte RHPBE52M;
protected byte RHPBE5M;
protected byte RHPBE6;
protected byte RHPBE6M;
protected byte RHPBE7;
protected byte RHPBE7M;
protected byte RHPBE85M;
protected byte RHPBE86M;
protected byte RHPBE95;
protected byte RHPBE96;
protected byte RHPBX1;
protected byte RHPBX1M;
protected byte RHPBX2;
protected byte RHPBX2M;
protected byte RHPBX3;
protected byte RHPBX3M;
protected byte RHPBX4;
protected byte RHPBX4M;
protected byte RHPBX5;
protected byte RHPBX51M;
protected byte RHPBX52M;
protected byte RHPBX53M;
protected byte RHPBX54M;
protected byte RHPBX55M;
protected byte RHPBX56M;
protected byte RHPBX57M;
protected byte RHPBX5M;
protected byte RHPBX6;
protected byte RHPBX6M;
protected byte RHPBX7;
protected byte RHPBX7M;
protected byte RHPBX8;
protected byte RHPBX85M;
protected byte RHPBX86M;
protected byte RHPBX8M;
protected byte RHPBX95;
protected byte RHPBX96;
protected byte RHPEE;
protected byte RHPER;
protected byte RHPERC;
protected short RHPEY;
protected byte RHSKA;
protected byte RHSMA;
protected byte RHSMB;
protected short RHSMF;
protected byte RHSMK;
protected short RHSML;
protected byte RHSMS;
protected byte RHSMT1;
protected byte RHSMT2;
protected byte RHSMT3;
protected byte RHSMT4;
protected byte RHSMT5;
protected byte RHSMT6;
protected byte RHSMT7;
protected byte RHSMT8;
protected byte RHSMT96;
protected byte RHSMX;
protected byte RHSMY;
protected byte ROIMP;
protected byte ROIMP2;
protected byte ROIMP3;
protected short ROOTY;
protected short ROOTY2;
protected short ROOTY3;
protected byte ROSC;
protected byte RPCHK;
protected byte RPCHK2;
protected byte RPCHK3;
protected byte RPCHK4;
protected boolean RPCHK5;
protected boolean RPCHK6;
protected boolean RPCHK7;
protected byte RPDIV;
protected byte RPDIV2;
protected byte RPDIV3;
protected byte RPDIV4;
protected boolean RPDIV5;
protected boolean RPDIV6;
protected boolean RPDIV7;
protected short RPDIY;
protected short RPDIY2;
protected short RPDIY3;
protected short RPDIY4;
protected boolean RPDIY5;
protected boolean RPDIY6;
protected boolean RPDIY7;
protected short RPDYR;
protected short RPDYR2;
protected short RPDYR3;
protected short RPDYR4;
protected short RPDYR5;
protected boolean RPDYR6;
protected short RPDYR7;
protected short RPEYR;
protected short RPEYR2;
protected short RPEYR3;
protected short RPEYR4;
protected short RPEYR5;
protected short RPEYR6;
protected short RPEYR7;
protected byte RPFIN;
protected byte RPFIN1C;
protected byte RPFIN2;
protected byte RPFIN2C;
protected byte RPFIN3;
protected byte RPFIN3C;
protected byte RPFIN4;
protected boolean RPFIN5;
protected boolean RPFIN6;
protected boolean RPFIN7;
protected byte RPINB;
protected short RPLIV;
protected short RPLIV2;
protected short RPLIV3;
protected short RPLIV4;
protected short RPLIV5;
protected short RPLIV6;
protected short RPLIV7;
protected byte RPLTR;
protected byte RPLTR2;
protected byte RPLTR3;
protected byte RPLTR4;
protected byte RPLTR5;
protected boolean RPLTR6;
protected boolean RPLTR7;
protected byte RPMAR;
protected byte RPMAR2;
protected byte RPMAR3;
protected byte RPMAR4;
protected byte RPMAR5;
protected byte RPMAR6;
protected byte RPMAR7;
protected byte RPMARST;
protected byte RPMARST2;
protected byte RPMARST3;
protected byte RPMARST4;
protected byte RPMARST5;
protected byte RPMARST6;
protected byte RPMARST7;
protected byte RPMOR;
protected byte RPMOR2;
protected byte RPMOR3;
protected byte RPMOR4;
protected byte RPMOR5;
protected byte RPMOR6;
protected boolean RPMOR7;
protected short RPMYR;
protected short RPMYR2;
protected short RPMYR3;
protected short RPMYR4;
protected short RPMYR5;
protected boolean RPMYR6;
protected boolean RPMYR7;
protected byte RPNCA;
protected short RPNCB;
protected short RPNCB2;
protected short RPNCB3;
protected short RPNCB4;
protected short RPNCB5;
protected short RPNCB6;
protected short RPNCB7;
protected short RPNCB8;
protected short RPNCB9;
protected byte RPNCE;
protected byte RPNCE2;
protected byte RPNCE3;
protected byte RPNCE4;
protected boolean RPNCE5;
protected boolean RPNCE6;
protected boolean RPNCE7;
protected boolean RPNCE8;
protected boolean RPNCE9;
protected short RPNCF;
protected short RPNCF2;
protected short RPNCF3;
protected short RPNCF4;
protected short RPNCF5;
protected short RPNCF6;
protected short RPNCF7;
protected boolean RPNCF8;
protected short RPNCF9;
protected byte RPNCH;
protected byte RPNCH2;
protected byte RPNCH3;
protected byte RPNCH4;
protected byte RPNCH5;
protected byte RPNCH6;
protected boolean RPNCH7;
protected boolean RPNCH8;
protected boolean RPNCH9;
protected byte RPREL;
protected byte RPREL2;
protected byte RPREL3;
protected byte RPREL4;
protected byte RPREL5;
protected boolean RPREL6;
protected boolean RPREL7;
protected byte RPSTL;
protected byte RPSTL2;
protected byte RPSTL3;
protected byte RPSTL4;
protected byte RPSTL5;
protected byte RPSTL6;
protected byte RPSTL7;
protected short RPYRMA;
protected short RPYRMA2;
protected short RPYRMA3;
protected short RPYRMA4;
protected short RPYRMA5;
protected short RPYRMA6;
protected short RPYRMA7;
protected byte RSABUSE;
protected byte RSABUSEY;
protected byte RSADDIC;
protected byte RSADDICY;
protected byte RSARGUE;
protected byte RSARGUEY;
protected byte RSATTAC;
protected byte RSATTACY;
protected byte RSCARE;
protected byte RSCAREY;
protected byte RSDISAS;
protected byte RSDISASY;
protected byte RSDRINK;
protected byte RSDRINKY;
protected byte RSFCOLD;
protected byte RSFDECID;
protected byte RSFDEPEN;
protected byte RSFINAN;
protected byte RSFINANY;
protected byte RSFIRED;
protected byte RSFIREDY;
protected byte RSFLET;
protected byte RSFNATUR;
protected byte RSFNOTWA;
protected byte RSFOVERP;
protected byte RSFUNDER;
protected byte RSILL;
protected byte RSILLY;
protected byte RSLOSWR;
protected byte RSLOSWRY;
protected byte RSMCOLD;
protected byte RSMDEPEN;
protected byte RSMDICDE;
protected byte RSMLET;
protected byte RSMNATUR;
protected byte RSMNOTWA;
protected byte RSMOVERP;
protected byte RSMUNDER;
protected byte RSRISKF;
protected byte RSRISKFY;
protected byte RSSEXAS;
protected byte RSSEXASY;
protected byte RSUNEMP;
protected byte RSUNEMPY;
protected byte RSWITKL;
protected byte RSWITKLY;
protected byte RSWITRY;
protected byte RSWITWR;
protected byte RWAGELE;
protected byte RWANO;
protected byte RWANO10;
protected byte RWANO11;
protected boolean RWANO12;
protected boolean RWANO13;
protected byte RWANO14;
protected byte RWANO15;
protected byte RWANO16;
protected boolean RWANO17;
protected byte RWANO18;
protected boolean RWANO19;
protected byte RWANO2;
protected boolean RWANO20;
protected byte RWANO3;
protected byte RWANO4;
protected byte RWANO5;
protected byte RWANO6;
protected byte RWANO7;
protected byte RWANO8;
protected byte RWANO9;
protected byte RWBUS;
protected byte RWBUX1;
protected byte RWBUX10;
protected byte RWBUX11;
protected byte RWBUX12;
protected byte RWBUX13;
protected byte RWBUX14;
protected byte RWBUX15;
protected byte RWBUX16;
protected byte RWBUX17;
protected byte RWBUX18;
protected byte RWBUX19;
protected byte RWBUX2;
protected byte RWBUX20;
protected byte RWBUX3;
protected byte RWBUX4;
protected byte RWBUX5;
protected byte RWBUX6;
protected byte RWBUX7;
protected byte RWBUX8;
protected byte RWBUX9;
protected short RWEDY;
protected short RWEDY10;
protected short RWEDY11;
protected short RWEDY12;
protected short RWEDY13;
protected short RWEDY14;
protected short RWEDY15;
protected short RWEDY16;
protected short RWEDY17;
protected short RWEDY18;
protected short RWEDY19;
protected short RWEDY2;
protected short RWEDY20;
protected short RWEDY3;
protected short RWEDY4;
protected short RWEDY5;
protected short RWEDY6;
protected short RWEDY7;
protected short RWEDY8;
protected short RWEDY9;
protected byte RWEVW;
protected byte RWFT;
protected byte RWFT10;
protected byte RWFT11;
protected byte RWFT12;
protected byte RWFT13;
protected byte RWFT14;
protected byte RWFT15;
protected byte RWFT16;
protected byte RWFT17;
protected byte RWFT18;
protected byte RWFT19;
protected byte RWFT2;
protected byte RWFT20;
protected byte RWFT3;
protected byte RWFT4;
protected byte RWFT5;
protected byte RWFT6;
protected byte RWFT7;
protected byte RWFT8;
protected byte RWFT9;
protected byte RWFTC;
protected byte RWFTE;
protected byte RWFTN;
protected short RWFTP;
protected short RWFTP10;
protected short RWFTP11;
protected short RWFTP12;
protected short RWFTP13;
protected short RWFTP14;
protected short RWFTP15;
protected boolean RWFTP16;
protected boolean RWFTP17;
protected short RWFTP18;
protected boolean RWFTP19;
protected short RWFTP2;
protected boolean RWFTP20;
protected short RWFTP3;
protected short RWFTP4;
protected short RWFTP5;
protected short RWFTP6;
protected short RWFTP7;
protected short RWFTP8;
protected short RWFTP9;
protected byte RWILL;
protected byte RWILX1;
protected byte RWILX10;
protected byte RWILX11;
protected byte RWILX12;
protected byte RWILX13;
protected byte RWILX14;
protected byte RWILX15;
protected byte RWILX16;
protected byte RWILX17;
protected byte RWILX18;
protected byte RWILX19;
protected byte RWILX2;
protected byte RWILX20;
protected byte RWILX3;
protected byte RWILX4;
protected byte RWILX5;
protected byte RWILX6;
protected byte RWILX7;
protected byte RWILX8;
protected byte RWILX9;
protected byte RWJSA;
protected short RWJSTY10;
protected short RWJSTY11;
protected short RWJSTY12;
protected short RWJSTY13;
protected short RWJSTY14;
protected short RWJSTY15;
protected short RWJSTY16;
protected short RWJSTY17;
protected short RWJSTY18;
protected short RWJSTY19;
protected short RWJSTY20;
protected short RWJSTYR;
protected short RWJSTYR2;
protected short RWJSTYR3;
protected short RWJSTYR4;
protected short RWJSTYR5;
protected short RWJSTYR6;
protected short RWJSTYR7;
protected short RWJSTYR8;
protected short RWJSTYR9;
protected short RWJSY;
protected short RWJSY10;
protected short RWJSY11;
protected short RWJSY12;
protected short RWJSY13;
protected short RWJSY14;
protected short RWJSY15;
protected short RWJSY16;
protected short RWJSY17;
protected short RWJSY18;
protected boolean RWJSY19;
protected short RWJSY2;
protected boolean RWJSY20;
protected short RWJSY3;
protected short RWJSY4;
protected short RWJSY5;
protected short RWJSY6;
protected short RWJSY7;
protected short RWJSY8;
protected short RWJSY9;
protected byte RWLJO;
protected byte RWNED;
protected byte RWNWA;
protected byte RWNWA2;
protected byte RWNWA3;
protected boolean RWNWA4;
protected boolean RWNWA5;
protected boolean RWNWA6;
protected boolean RWNWA7;
protected boolean RWNWA8;
protected boolean RWNWA9;
protected short RWNWB;
protected short RWNWB2;
protected short RWNWB3;
protected short RWNWB4;
protected short RWNWB5;
protected short RWNWB6;
protected short RWNWB7;
protected short RWNWB8;
protected boolean RWNWB9;
protected boolean RWNWC1;
protected boolean RWNWC10;
protected boolean RWNWC100;
protected boolean RWNWC101;
protected boolean RWNWC102;
protected boolean RWNWC103;
protected boolean RWNWC11;
protected boolean RWNWC12;
protected byte RWNWC13;
protected boolean RWNWC14;
protected boolean RWNWC15;
protected byte RWNWC16;
protected boolean RWNWC17;
protected byte RWNWC18;
protected boolean RWNWC19;
protected boolean RWNWC2;
protected boolean RWNWC20;
protected boolean RWNWC21;
protected boolean RWNWC22;
protected boolean RWNWC23;
protected boolean RWNWC24;
protected boolean RWNWC25;
protected boolean RWNWC26;
protected boolean RWNWC27;
protected boolean RWNWC28;
protected boolean RWNWC29;
protected boolean RWNWC3;
protected boolean RWNWC30;
protected boolean RWNWC31;
protected boolean RWNWC32;
protected boolean RWNWC33;
protected boolean RWNWC34;
protected boolean RWNWC35;
protected boolean RWNWC36;
protected boolean RWNWC37;
protected boolean RWNWC38;
protected boolean RWNWC39;
protected byte RWNWC4;
protected boolean RWNWC40;
protected boolean RWNWC41;
protected boolean RWNWC42;
protected boolean RWNWC43;
protected boolean RWNWC44;
protected boolean RWNWC45;
protected boolean RWNWC46;
protected boolean RWNWC47;
protected boolean RWNWC48;
protected boolean RWNWC49;
protected byte RWNWC5;
protected boolean RWNWC50;
protected boolean RWNWC51;
protected boolean RWNWC52;
protected boolean RWNWC53;
protected boolean RWNWC54;
protected boolean RWNWC55;
protected boolean RWNWC56;
protected boolean RWNWC57;
protected boolean RWNWC58;
protected boolean RWNWC59;
protected boolean RWNWC6;
protected boolean RWNWC60;
protected boolean RWNWC61;
protected boolean RWNWC62;
protected boolean RWNWC63;
protected boolean RWNWC64;
protected boolean RWNWC65;
protected boolean RWNWC66;
protected boolean RWNWC67;
protected boolean RWNWC68;
protected boolean RWNWC69;
protected boolean RWNWC7;
protected boolean RWNWC70;
protected boolean RWNWC71;
protected boolean RWNWC72;
protected boolean RWNWC73;
protected boolean RWNWC74;
protected boolean RWNWC75;
protected boolean RWNWC76;
protected boolean RWNWC77;
protected boolean RWNWC78;
protected boolean RWNWC79;
protected byte RWNWC8;
protected boolean RWNWC80;
protected boolean RWNWC81;
protected byte RWNWC9;
protected byte RWNWC95;
protected byte RWNWC96;
protected boolean RWNWC97;
protected boolean RWNWC98;
protected boolean RWNWC99;
protected byte RWNX;
protected byte RWNX10;
protected byte RWNX11;
protected byte RWNX12;
protected byte RWNX13;
protected byte RWNX14;
protected byte RWNX15;
protected byte RWNX16;
protected byte RWNX17;
protected boolean RWNX18;
protected byte RWNX19;
protected byte RWNX2;
protected boolean RWNX20;
protected byte RWNX3;
protected byte RWNX4;
protected byte RWNX5;
protected byte RWNX6;
protected byte RWNX7;
protected byte RWNX8;
protected byte RWNX9;
protected short RWPTF;
protected short RWPTF10;
protected boolean RWPTF11;
protected short RWPTF12;
protected short RWPTF13;
protected short RWPTF14;
protected boolean RWPTF15;
protected boolean RWPTF16;
protected short RWPTF17;
protected boolean RWPTF18;
protected boolean RWPTF19;
protected short RWPTF2;
protected boolean RWPTF20;
protected short RWPTF3;
protected short RWPTF4;
protected short RWPTF5;
protected short RWPTF6;
protected short RWPTF7;
protected short RWPTF8;
protected short RWPTF9;
protected byte RWS;
protected byte RWS10;
protected byte RWS11;
protected byte RWS12;
protected byte RWS13;
protected byte RWS14;
protected byte RWS15;
protected byte RWS16;
protected byte RWS17;
protected byte RWS18;
protected byte RWS19;
protected byte RWS2;
protected byte RWS20;
protected byte RWS3;
protected byte RWS4;
protected byte RWS5;
protected byte RWS6;
protected byte RWS7;
protected byte RWS8;
protected byte RWS9;
protected byte RWSAD;
protected byte RWSAD10;
protected byte RWSAD11;
protected byte RWSAD12;
protected boolean RWSAD13;
protected boolean RWSAD14;
protected boolean RWSAD15;
protected boolean RWSAD16;
protected boolean RWSAD17;
protected boolean RWSAD18;
protected boolean RWSAD19;
protected byte RWSAD2;
protected boolean RWSAD20;
protected short RWSAD3;
protected byte RWSAD4;
protected short RWSAD5;
protected byte RWSAD6;
protected byte RWSAD7;
protected byte RWSAD8;
protected byte RWSAD9;
protected short RWSAN;
protected int RWSAN10;
protected int RWSAN11;
protected int RWSAN12;
protected int RWSAN13;
protected int RWSAN14;
protected short RWSAN15;
protected int RWSAN16;
protected short RWSAN17;
protected short RWSAN18;
protected short RWSAN19;
protected int RWSAN2;
protected short RWSAN20;
protected int RWSAN3;
protected int RWSAN4;
protected int RWSAN5;
protected int RWSAN6;
protected int RWSAN7;
protected int RWSAN8;
protected int RWSAN9;
protected short RWSAP;
protected short RWSAP10;
protected short RWSAP11;
protected byte RWSAP12;
protected short RWSAP13;
protected boolean RWSAP14;
protected boolean RWSAP15;
protected boolean RWSAP16;
protected boolean RWSAP17;
protected boolean RWSAP18;
protected boolean RWSAP19;
protected short RWSAP2;
protected boolean RWSAP20;
protected int RWSAP3;
protected short RWSAP4;
protected short RWSAP5;
protected short RWSAP6;
protected short RWSAP7;
protected short RWSAP8;
protected short RWSAP9;
protected short RWSAS;
protected byte RWSAS10;
protected byte RWSAS11;
protected byte RWSAS12;
protected boolean RWSAS13;
protected boolean RWSAS14;
protected boolean RWSAS15;
protected boolean RWSAS16;
protected boolean RWSAS17;
protected boolean RWSAS18;
protected boolean RWSAS19;
protected byte RWSAS2;
protected boolean RWSAS20;
protected short RWSAS3;
protected short RWSAS4;
protected short RWSAS5;
protected byte RWSAS6;
protected byte RWSAS7;
protected byte RWSAS8;
protected byte RWSAS9;
protected byte RWSE;
protected byte RWSE10;
protected byte RWSE11;
protected byte RWSE12;
protected byte RWSE13;
protected byte RWSE14;
protected byte RWSE15;
protected byte RWSE16;
protected byte RWSE17;
protected byte RWSE18;
protected byte RWSE19;
protected byte RWSE2;
protected byte RWSE20;
protected byte RWSE3;
protected byte RWSE4;
protected byte RWSE5;
protected byte RWSE6;
protected byte RWSE7;
protected byte RWSE8;
protected byte RWSE9;
protected byte RWSF;
protected byte RWSFD;
protected byte RWSFF1;
protected byte RWSFF10;
protected byte RWSFF100;
protected byte RWSFF101;
protected byte RWSFF102;
protected byte RWSFF103;
protected boolean RWSFF104;
protected byte RWSFF105;
protected boolean RWSFF106;
protected byte RWSFF107;
protected boolean RWSFF108;
protected byte RWSFF109;
protected byte RWSFF11;
protected byte RWSFF110;
protected byte RWSFF111;
protected byte RWSFF112;
protected byte RWSFF113;
protected byte RWSFF114;
protected byte RWSFF115;
protected byte RWSFF116;
protected byte RWSFF117;
protected byte RWSFF118;
protected byte RWSFF119;
protected byte RWSFF12;
protected byte RWSFF120;
protected boolean RWSFF121;
protected byte RWSFF122;
protected byte RWSFF123;
protected byte RWSFF124;
protected byte RWSFF125;
protected byte RWSFF126;
protected byte RWSFF127;
protected byte RWSFF128;
protected byte RWSFF129;
protected byte RWSFF13;
protected boolean RWSFF130;
protected boolean RWSFF131;
protected byte RWSFF132;
protected boolean RWSFF133;
protected byte RWSFF134;
protected byte RWSFF135;
protected byte RWSFF136;
protected byte RWSFF137;
protected boolean RWSFF138;
protected byte RWSFF139;
protected byte RWSFF14;
protected boolean RWSFF140;
protected boolean RWSFF141;
protected boolean RWSFF142;
protected boolean RWSFF143;
protected boolean RWSFF144;
protected boolean RWSFF145;
protected byte RWSFF146;
protected byte RWSFF147;
protected boolean RWSFF148;
protected boolean RWSFF149;
protected byte RWSFF15;
protected boolean RWSFF150;
protected boolean RWSFF151;
protected boolean RWSFF152;
protected boolean RWSFF153;
protected byte RWSFF154;
protected boolean RWSFF155;
protected boolean RWSFF156;
protected byte RWSFF157;
protected boolean RWSFF158;
protected boolean RWSFF159;
protected byte RWSFF16;
protected boolean RWSFF160;
protected boolean RWSFF161;
protected boolean RWSFF162;
protected boolean RWSFF163;
protected byte RWSFF164;
protected byte RWSFF165;
protected byte RWSFF166;
protected byte RWSFF167;
protected boolean RWSFF168;
protected boolean RWSFF169;
protected byte RWSFF17;
protected boolean RWSFF170;
protected boolean RWSFF171;
protected boolean RWSFF172;
protected boolean RWSFF173;
protected boolean RWSFF174;
protected boolean RWSFF175;
protected boolean RWSFF176;
protected boolean RWSFF177;
protected boolean RWSFF178;
protected boolean RWSFF179;
protected byte RWSFF18;
protected boolean RWSFF180;
protected boolean RWSFF181;
protected boolean RWSFF182;
protected boolean RWSFF183;
protected boolean RWSFF184;
protected boolean RWSFF185;
protected boolean RWSFF186;
protected boolean RWSFF187;
protected boolean RWSFF188;
protected boolean RWSFF189;
protected byte RWSFF19;
protected boolean RWSFF190;
protected boolean RWSFF191;
protected boolean RWSFF192;
protected boolean RWSFF193;
protected boolean RWSFF194;
protected boolean RWSFF195;
protected boolean RWSFF196;
protected boolean RWSFF197;
protected boolean RWSFF198;
protected boolean RWSFF199;
protected byte RWSFF2;
protected byte RWSFF20;
protected boolean RWSFF200;
protected byte RWSFF21;
protected byte RWSFF22;
protected byte RWSFF23;
protected byte RWSFF24;
protected byte RWSFF25;
protected byte RWSFF26;
protected byte RWSFF27;
protected byte RWSFF28;
protected byte RWSFF29;
protected byte RWSFF3;
protected byte RWSFF30;
protected byte RWSFF31;
protected byte RWSFF32;
protected byte RWSFF33;
protected byte RWSFF34;
protected byte RWSFF35;
protected byte RWSFF36;
protected byte RWSFF37;
protected byte RWSFF38;
protected byte RWSFF39;
protected byte RWSFF4;
protected byte RWSFF40;
protected byte RWSFF41;
protected byte RWSFF42;
protected byte RWSFF43;
protected byte RWSFF44;
protected byte RWSFF45;
protected byte RWSFF46;
protected byte RWSFF47;
protected byte RWSFF48;
protected byte RWSFF49;
protected byte RWSFF5;
protected byte RWSFF50;
protected byte RWSFF51;
protected byte RWSFF52;
protected byte RWSFF53;
protected byte RWSFF54;
protected byte RWSFF55;
protected byte RWSFF56;
protected byte RWSFF57;
protected byte RWSFF58;
protected byte RWSFF59;
protected byte RWSFF6;
protected byte RWSFF60;
protected byte RWSFF61;
protected byte RWSFF62;
protected byte RWSFF63;
protected byte RWSFF64;
protected byte RWSFF65;
protected byte RWSFF66;
protected byte RWSFF67;
protected byte RWSFF68;
protected byte RWSFF69;
protected byte RWSFF7;
protected byte RWSFF70;
protected byte RWSFF71;
protected byte RWSFF72;
protected byte RWSFF73;
protected byte RWSFF74;
protected byte RWSFF75;
protected byte RWSFF76;
protected byte RWSFF77;
protected byte RWSFF78;
protected byte RWSFF79;
protected byte RWSFF8;
protected boolean RWSFF80;
protected byte RWSFF81;
protected byte RWSFF82;
protected boolean RWSFF83;
protected byte RWSFF84;
protected byte RWSFF85;
protected byte RWSFF86;
protected byte RWSFF87;
protected byte RWSFF88;
protected boolean RWSFF89;
protected byte RWSFF9;
protected byte RWSFF90;
protected byte RWSFF91;
protected byte RWSFF92;
protected boolean RWSFF93;
protected byte RWSFF94;
protected byte RWSFF95;
protected byte RWSFF96;
protected byte RWSFF97;
protected byte RWSFF98;
protected byte RWSFF99;
protected byte RWSFG;
protected byte RWSFM;
protected int RWSFN;
protected int RWSFP;
protected byte RWSFS;
protected byte RWSGN;
protected byte RWSGN10;
protected byte RWSGN11;
protected byte RWSGN12;
protected byte RWSGN13;
protected byte RWSGN14;
protected byte RWSGN15;
protected byte RWSGN16;
protected byte RWSGN17;
protected boolean RWSGN18;
protected boolean RWSGN19;
protected byte RWSGN2;
protected boolean RWSGN20;
protected byte RWSGN3;
protected byte RWSGN4;
protected byte RWSGN5;
protected byte RWSGN6;
protected byte RWSGN7;
protected byte RWSGN8;
protected byte RWSGN9;
protected byte RWSM;
protected byte RWSM10;
protected byte RWSM11;
protected byte RWSM12;
protected byte RWSM13;
protected byte RWSM14;
protected boolean RWSM15;
protected boolean RWSM16;
protected boolean RWSM17;
protected boolean RWSM18;
protected boolean RWSM19;
protected byte RWSM2;
protected boolean RWSM20;
protected byte RWSM3;
protected byte RWSM4;
protected byte RWSM5;
protected byte RWSM6;
protected byte RWSM7;
protected byte RWSM8;
protected byte RWSM9;
protected byte RWST1A;
protected byte RWST1AM;
protected byte RWST1B;
protected byte RWST1BM;
protected byte RWST1C;
protected byte RWST1CM;
protected byte RWST1D;
protected byte RWST1DM;
protected byte RWST1E;
protected byte RWST1EM;
protected byte RWST1F;
protected byte RWST1FM;
protected byte RWST1G;
protected byte RWST1GM;
protected byte RWST1H;
protected byte RWST1HM;
protected byte RWST1I;
protected byte RWST1IM;
protected byte RWST1J;
protected byte RWST1JM;
protected byte RWST1K;
protected byte RWST1KM;
protected byte RWST1L;
protected byte RWST1M;
protected boolean RWST1N;
protected boolean RWST1O;
protected byte RWST1P;
protected boolean RWST1Q;
protected boolean RWST1R;
protected boolean RWST1S;
protected boolean RWST1T;
protected byte RWST2A;
protected byte RWST2AM;
protected byte RWST2B;
protected byte RWST2BM;
protected byte RWST2C;
protected byte RWST2CM;
protected byte RWST2D;
protected byte RWST2DM;
protected byte RWST2E;
protected byte RWST2EM;
protected byte RWST2F;
protected byte RWST2FM;
protected byte RWST2G;
protected byte RWST2GM;
protected byte RWST2H;
protected byte RWST2HM;
protected byte RWST2I;
protected byte RWST2IM;
protected byte RWST2J;
protected byte RWST2JM;
protected byte RWST2K;
protected byte RWST2KM;
protected byte RWST2L;
protected boolean RWST2M;
protected byte RWST2N;
protected boolean RWST2O;
protected boolean RWST2P;
protected byte RWST2Q;
protected boolean RWST2R;
protected boolean RWST2S;
protected boolean RWST2T;
protected byte RWST3A;
protected byte RWST3AM;
protected byte RWST3B;
protected byte RWST3BM;
protected byte RWST3C;
protected byte RWST3CM;
protected byte RWST3D;
protected byte RWST3DM;
protected byte RWST3E;
protected byte RWST3EM;
protected byte RWST3F;
protected byte RWST3FM;
protected byte RWST3G;
protected byte RWST3GM;
protected byte RWST3H;
protected byte RWST3HM;
protected byte RWST3I;
protected byte RWST3IM;
protected byte RWST3J;
protected byte RWST3JM;
protected byte RWST3K;
protected byte RWST3KM;
protected byte RWST3L;
protected byte RWST3M;
protected boolean RWST3N;
protected boolean RWST3O;
protected byte RWST3P;
protected boolean RWST3Q;
protected boolean RWST3R;
protected boolean RWST3S;
protected boolean RWST3T;
protected byte RWST4A;
protected byte RWST4AM;
protected byte RWST4B;
protected byte RWST4BM;
protected byte RWST4C;
protected byte RWST4CM;
protected byte RWST4D;
protected byte RWST4DM;
protected byte RWST4E;
protected byte RWST4EM;
protected byte RWST4F;
protected byte RWST4FM;
protected byte RWST4G;
protected byte RWST4GM;
protected byte RWST4H;
protected byte RWST4HM;
protected byte RWST4I;
protected byte RWST4IM;
protected byte RWST4J;
protected byte RWST4JM;
protected byte RWST4K;
protected byte RWST4KM;
protected byte RWST4L;
protected boolean RWST4M;
protected boolean RWST4N;
protected boolean RWST4O;
protected boolean RWST4P;
protected boolean RWST4Q;
protected boolean RWST4R;
protected boolean RWST4S;
protected boolean RWST4T;
protected byte RWST51AM;
protected byte RWST51BM;
protected byte RWST51CM;
protected byte RWST51DM;
protected byte RWST52AM;
protected byte RWST52BM;
protected byte RWST52CM;
protected byte RWST52DM;
protected byte RWST52EM;
protected byte RWST52FM;
protected byte RWST52GM;
protected byte RWST52HM;
protected byte RWST52JM;
protected byte RWST52KM;
protected byte RWST53AM;
protected byte RWST53DM;
protected byte RWST53EM;
protected byte RWST53FM;
protected byte RWST53GM;
protected byte RWST54AM;
protected byte RWST54CM;
protected byte RWST54DM;
protected byte RWST54FM;
protected byte RWST55AM;
protected byte RWST55BM;
protected byte RWST55CM;
protected byte RWST55DM;
protected byte RWST55EM;
protected byte RWST55GM;
protected byte RWST56AM;
protected byte RWST56BM;
protected byte RWST56CM;
protected byte RWST56DM;
protected byte RWST56EM;
protected byte RWST56FM;
protected byte RWST56GM;
protected byte RWST56IM;
protected byte RWST5A;
protected byte RWST5AM;
protected byte RWST5B;
protected byte RWST5BM;
protected byte RWST5C;
protected byte RWST5CM;
protected byte RWST5D;
protected byte RWST5DM;
protected byte RWST5E;
protected byte RWST5EM;
protected byte RWST5F;
protected byte RWST5FM;
protected byte RWST5G;
protected byte RWST5GM;
protected byte RWST5H;
protected byte RWST5HM;
protected byte RWST5I;
protected byte RWST5IM;
protected byte RWST5J;
protected byte RWST5JM;
protected byte RWST5K;
protected byte RWST5KM;
protected byte RWST5L;
protected byte RWST5M;
protected byte RWST5N;
protected boolean RWST5O;
protected boolean RWST5P;
protected boolean RWST5Q;
protected boolean RWST5R;
protected boolean RWST5S;
protected boolean RWST5T;
protected byte RWST6A;
protected byte RWST6AM;
protected byte RWST6B;
protected byte RWST6BM;
protected byte RWST6C;
protected byte RWST6CM;
protected byte RWST6D;
protected byte RWST6DM;
protected byte RWST6E;
protected byte RWST6EM;
protected byte RWST6F;
protected byte RWST6FM;
protected byte RWST6G;
protected byte RWST6GM;
protected byte RWST6H;
protected byte RWST6HM;
protected byte RWST6I;
protected byte RWST6IM;
protected byte RWST6J;
protected byte RWST6JM;
protected boolean RWST6K;
protected boolean RWST6KM;
protected byte RWST6L;
protected boolean RWST6M;
protected boolean RWST6N;
protected boolean RWST6O;
protected boolean RWST6P;
protected boolean RWST6Q;
protected boolean RWST6R;
protected boolean RWST6S;
protected boolean RWST6T;
protected byte RWST7A;
protected byte RWST7AM;
protected byte RWST7B;
protected byte RWST7BM;
protected byte RWST7C;
protected byte RWST7CM;
protected byte RWST7D;
protected byte RWST7DM;
protected byte RWST7E;
protected byte RWST7EM;
protected byte RWST7F;
protected byte RWST7FM;
protected byte RWST7G;
protected byte RWST7GM;
protected byte RWST7H;
protected byte RWST7HM;
protected byte RWST7I;
protected byte RWST7IM;
protected byte RWST7J;
protected byte RWST7JM;
protected byte RWST7K;
protected byte RWST7KM;
protected byte RWST7L;
protected byte RWST7M;
protected boolean RWST7N;
protected boolean RWST7O;
protected boolean RWST7P;
protected boolean RWST7Q;
protected boolean RWST7R;
protected boolean RWST7S;
protected boolean RWST7T;
protected byte RWST85AM;
protected byte RWST85BM;
protected byte RWST85CM;
protected byte RWST85DM;
protected byte RWST85EM;
protected byte RWST85FM;
protected byte RWST85GM;
protected byte RWST85HM;
protected byte RWST85IM;
protected byte RWST85JM;
protected byte RWST8A;
protected byte RWST8AM;
protected byte RWST8B;
protected byte RWST8BM;
protected byte RWST8C;
protected byte RWST8CM;
protected byte RWST8D;
protected byte RWST8DM;
protected byte RWST8E;
protected byte RWST8EM;
protected byte RWST8F;
protected byte RWST8FM;
protected byte RWST8G;
protected byte RWST8GM;
protected byte RWST8H;
protected byte RWST8HM;
protected byte RWST8I;
protected byte RWST8IM;
protected byte RWST8J;
protected byte RWST8JM;
protected byte RWST8K;
protected byte RWST8KM;
protected byte RWST8L;
protected boolean RWST8M;
protected boolean RWST8N;
protected boolean RWST8O;
protected boolean RWST8P;
protected byte RWST8Q;
protected boolean RWST8R;
protected boolean RWST8S;
protected boolean RWST8T;
protected byte RWST95A;
protected byte RWST95B;
protected byte RWST95C;
protected byte RWST95D;
protected byte RWST95E;
protected byte RWST95F;
protected byte RWST95G;
protected byte RWST95H;
protected byte RWST95I;
protected byte RWST95J;
protected byte RWST95K;
protected boolean RWST95L;
protected boolean RWST95M;
protected boolean RWST95N;
protected boolean RWST95O;
protected boolean RWST95P;
protected boolean RWST95Q;
protected boolean RWST95R;
protected boolean RWST95S;
protected boolean RWST95T;
protected byte RWST9A;
protected byte RWST9AM;
protected byte RWST9B;
protected byte RWST9BM;
protected byte RWST9C;
protected byte RWST9CM;
protected byte RWST9D;
protected byte RWST9DM;
protected byte RWST9E;
protected byte RWST9EM;
protected byte RWST9F;
protected byte RWST9FM;
protected byte RWST9G;
protected byte RWST9GM;
protected boolean RWST9H;
protected boolean RWST9HM;
protected byte RWST9I;
protected byte RWST9IM;
protected boolean RWST9J;
protected boolean RWST9JM;
protected byte RWST9K;
protected byte RWST9KM;
protected boolean RWST9L;
protected boolean RWST9M;
protected boolean RWST9N;
protected boolean RWST9O;
protected boolean RWST9P;
protected boolean RWST9Q;
protected boolean RWST9R;
protected boolean RWST9S;
protected boolean RWST9T;
protected byte RWSTF1;
protected byte RWSTF1M;
protected byte RWSTF2;
protected byte RWSTF2M;
protected byte RWSTF3;
protected byte RWSTF3M;
protected byte RWSTF4;
protected byte RWSTF4M;
protected byte RWSTF5;
protected byte RWSTF51M;
protected byte RWSTF52M;
protected byte RWSTF53M;
protected byte RWSTF54M;
protected byte RWSTF56M;
protected byte RWSTF5M;
protected byte RWSTF6;
protected byte RWSTF6M;
protected byte RWSTF7;
protected byte RWSTF7M;
protected byte RWSTF8;
protected byte RWSTF85M;
protected byte RWSTF8M;
protected byte RWSTF9;
protected byte RWSTF95;
protected byte RWSTF9M;
protected boolean RWSTI;
protected boolean RWSTI10;
protected boolean RWSTI11;
protected boolean RWSTI12;
protected boolean RWSTI13;
protected boolean RWSTI14;
protected boolean RWSTI15;
protected boolean RWSTI16;
protected boolean RWSTI17;
protected boolean RWSTI18;
protected boolean RWSTI19;
protected boolean RWSTI2;
protected boolean RWSTI20;
protected boolean RWSTI3;
protected boolean RWSTI4;
protected boolean RWSTI5;
protected boolean RWSTI6;
protected boolean RWSTI7;
protected boolean RWSTI8;
protected boolean RWSTI9;
protected byte SAMPSTA;
protected byte SCABNLC;
protected double SCABNP;
protected byte SCABNSC;
protected byte SCABSLC;
protected double SCABSP;
protected byte SCABSSC;
protected byte SCACTA;
protected byte SCACTB;
protected byte SCACTC;
protected byte SCACTD;
protected byte SCAKO;
protected byte SCAL7A;
protected byte SCAL7B;
protected byte SCAPOPG;
protected byte SCASHER;
protected byte SCASPIR;
protected byte SCAWIN;
protected byte SCDCA;
protected byte SCDCC;
protected byte SCDCD;
protected byte SCDCE;
protected byte SCDCG;
protected byte SCDRI01;
protected byte SCDRI02;
protected byte SCDRI03;
protected byte SCDRI04;
protected byte SCDRI05;
protected byte SCDRI06;
protected byte SCDRI07;
protected byte SCEMPL;
protected byte SCFAMH;
protected byte SCFAMM;
protected byte SCFEELA;
protected byte SCFEELB;
protected byte SCFEELC;
protected byte SCFEELD;
protected byte SCFEELE;
protected byte SCFRDM;
protected byte SCFRUIA;
protected byte SCFRUIB;
protected byte SCFRUIC;
protected byte SCFRUID;
protected byte SCFRUIE;
protected byte SCFRUIF;
protected byte SCFRUIG;
protected byte SCFRUIH;
protected byte SCFRUII;
protected byte SCGHQA;
protected byte SCGHQB;
protected byte SCGHQC;
protected byte SCGHQD;
protected byte SCGHQE;
protected byte SCGHQF;
protected byte SCGHQG;
protected byte SCGHQH;
protected byte SCGHQI;
protected byte SCGHQJ;
protected byte SCGHQK;
protected byte SCGHQL;
protected byte SCLADDC;
protected byte SCLIFEA;
protected byte SCLIFEB;
protected byte SCLIFEC;
protected byte SCLIFED;
protected byte SCLIFEE;
protected byte SCMOREA;
protected byte SCMOREB;
protected byte SCMOREC;
protected byte SCMORED;
protected byte SCORG01;
protected byte SCORG02;
protected byte SCORG03;
protected byte SCORG04;
protected byte SCORG05;
protected byte SCORG06;
protected byte SCORG07;
protected byte SCORG08;
protected byte SCORG09;
protected byte SCPT01;
protected byte SCPT02;
protected byte SCPT03;
protected byte SCPT04;
protected byte SCPT05;
protected byte SCPT06;
protected byte SCPT07;
protected byte SCPT08;
protected byte SCPT09;
protected byte SCPTR;
protected byte SCPTRA;
protected byte SCPTRB;
protected byte SCPTRC;
protected byte SCPTRD;
protected byte SCPTRE;
protected byte SCPTRF;
protected byte SCPTRG;
protected byte SCREC;
protected short SCRTAGE;
protected byte SCSCA;
protected byte SCSCB;
protected byte SCSCC;
protected byte SCSCD;
protected byte SCSCE;
protected byte SCSCF;
protected byte SCSCG;
protected byte SCSCH;
protected byte SCSCI;
protected byte SCVEGA;
protected byte SCVEGB;
protected byte SCVEGC;
protected byte SCVEGD;
protected byte SCWORKA;
protected byte SCWORKB;
protected byte SCWORKC;
protected byte SCWORKD;
protected byte SCWORKE;
protected byte SCWORKF;
protected byte SCWORKG;
protected byte SCWORKH;
protected byte SCWORKI;
protected byte SCWORKJ;
protected byte SCWORKK;
protected byte SCWORKL;
protected byte SHACHE1;
protected byte SHACHE2;
protected byte SHACHE3;
protected byte SHACHE4;
protected byte SHMEM1;
protected byte SHMEM2;
protected byte SHMEM3;
protected byte SHMEM4;
protected byte SHMOB1;
protected byte SHMOB2;
protected byte SHMOB3;
protected byte SHMOB4;
protected byte SHRESP1;
protected byte SHRESP2;
protected byte SHRESP3;
protected byte SHRESP4;
protected byte SHSAD1;
protected byte SHSAD2;
protected byte SHSAD3;
protected byte SHSAD4;
protected byte SHWAKE1;
protected byte SHWAKE2;
protected byte SHWAKE3;
protected byte SHWAKE4;
protected byte SHWORK1;
protected byte SPCARA;
protected byte SPCARB;
protected byte SPDTDT;
protected byte SPHOSP;
protected byte SPLIFT;
protected byte SPTAXI;
protected byte SPTR96;
protected byte SPTRB95;
protected byte SPTRBCON;
protected byte SPTRBDES;
protected byte SPTRBDIR;
protected byte SPTRBEXP;
protected byte SPTRBFEA;
protected byte SPTRBFRE;
protected byte SPTRBHEA;
protected byte SPTRBNEE;
protected byte SPTRBUNA;
protected byte SPTRBUNR;
protected byte SPTRBWAL;
protected byte SPTRCOM;
protected byte SPTRFAM;
protected byte SPTRHOS;
protected byte SPTRM85;
protected byte SPTRM86;
protected byte SPTRMCON;
protected byte SPTRMDES;
protected byte SPTRMDIR;
protected byte SPTRMEXP;
protected byte SPTRMFEA;
protected byte SPTRMFRE;
protected byte SPTRMHEA;
protected byte SPTRMNEE;
protected byte SPTRMUNA;
protected byte SPTRMUNR;
protected byte SPTRMWAL;
protected byte SPTRTAX;
protected double STPENW_06;
protected double STPENW_SPA;
protected byte SWACHE1;
protected byte SWACHE2;
protected byte SWACHE3;
protected byte SWACHE4;
protected byte SWMEM1;
protected byte SWMOB1;
protected byte SWMOB2;
protected byte SWMOB3;
protected byte SWMOB4;
protected byte SWRESP1;
protected byte SWSAD1;
protected byte SWSAD2;
protected byte SWSAD3;
protected byte SWSAD4;
protected byte SWWAKE1;
protected byte SWWORK1;
protected byte TOTALPSC;
protected double TOTPENW_06;
protected double TOTPENW_SPA;
protected String VERSION;
protected byte W3EDQUAL;
protected short W3HHOUT;
protected byte W3INDOUT;
protected double W3LWGT;
protected double W3NSSEC;
protected double W3NSSEC13;
protected byte W3NSSEC3;
protected byte W3NSSEC5;
protected byte W3NSSEC8;
protected byte W3NSSECMIS;
protected byte W3OTHERQ;
protected short W3RINDOUT;
protected boolean W3SEC;
protected boolean W3SIC;
protected byte W3SIC92;
protected byte W3SIC92MIS;
protected boolean W3SOC;
protected byte W3SOC2000;
protected byte W3SOC2000MIS;
protected double W3XWGT;
protected byte WHOSO4;
protected byte WHOSO5;
protected double WIDPEN_06;
protected double WIDPEN_SPA;
protected int WP1Q;
protected int WP1SQ;
protected int WP2Q;
protected int WP2SQ;
protected int WP3Q;
protected int WP3SQ;
protected byte WPACHG;
protected byte WPACT96;
protected byte WPACTCA;
protected byte WPACTED;
protected byte WPACTLO;
protected byte WPACTPW;
protected byte WPACTSE;
protected byte WPACTVW;
protected byte WPADDP;
protected short WPAECP;
protected byte WPANYP;
protected byte WPAOTFE;
protected short WPAOTFL;
protected byte WPAOTFR;
protected short WPAOTFU;
protected byte WPAOTME;
protected short WPAOTML;
protected byte WPAOTMR;
protected short WPAOTMU;
protected byte WPAOTOE;
protected short WPAOTOL;
protected byte WPAOTOR;
protected short WPAOTOU;
protected byte WPAOTWE;
protected short WPAOTWL;
protected byte WPAOTWR;
protected short WPAOTWU;
protected byte WPAOTYE;
protected int WPAOTYL;
protected byte WPAOTYR;
protected int WPAOTYU;
protected byte WPAPFE;
protected double WPAPFL;
protected byte WPAPFR;
protected double WPAPFU;
protected double WPAPS;
protected byte WPASE;
protected byte WPASKD;
protected byte WPASKE;
protected byte WPASKF;
protected int WPASL;
protected byte WPASR;
protected int WPASU;
protected byte WPBCH95;
protected byte WPBCHAD;
protected byte WPBCHFL;
protected byte WPBCHHO;
protected byte WPBCHHR;
protected byte WPBCHME;
protected byte WPBCHPH;
protected byte WPBIMAE;
protected short WPBIMAL;
protected byte WPBIMAR;
protected short WPBIMAU;
protected byte WPBIWAE;
protected short WPBIWAL;
protected byte WPBIWAR;
protected short WPBIWAU;
protected double WPBPPS;
protected byte WPBPS;
protected byte WPBPSP;
protected byte WPBUSVE;
protected int WPBUSVL;
protected byte WPBUSVR;
protected int WPBUSVU;
protected byte WPCH96;
protected byte WPCHAD;
protected byte WPCHB95;
protected byte WPCHBAD;
protected byte WPCHBFL;
protected byte WPCHBHO;
protected byte WPCHBHR;
protected byte WPCHBME;
protected byte WPCHBPH;
protected byte WPCHD96;
protected byte WPCHDAD;
protected byte WPCHDFL;
protected byte WPCHDHO;
protected byte WPCHDHR;
protected byte WPCHDM85;
protected byte WPCHDM86;
protected byte WPCHDM96;
protected byte WPCHDMAD;
protected byte WPCHDMCO;
protected byte WPCHDME;
protected byte WPCHDMFL;
protected byte WPCHDMHO;
protected byte WPCHDMHR;
protected byte WPCHDMME;
protected byte WPCHDMPH;
protected byte WPCHDPH;
protected byte WPCHFL;
protected byte WPCHGA;
protected byte WPCHGDN;
protected byte WPCHGNO;
protected byte WPCHGO;
protected byte WPCHHO;
protected byte WPCHHR;
protected byte WPCHL95;
protected byte WPCHL96;
protected byte WPCHLAD;
protected byte WPCHLFL;
protected byte WPCHLHO;
protected byte WPCHLHR;
protected byte WPCHLM85;
protected boolean WPCHLM86;
protected byte WPCHLM96;
protected byte WPCHLMAD;
protected byte WPCHLME;
protected byte WPCHLMFL;
protected byte WPCHLMHO;
protected byte WPCHLMHR;
protected byte WPCHLMME;
protected byte WPCHLMPH;
protected byte WPCHLPH;
protected byte WPCHM85;
protected byte WPCHM86;
protected byte WPCHM96;
protected byte WPCHMAD;
protected byte WPCHMBO;
protected byte WPCHME;
protected byte WPCHMFL;
protected byte WPCHMHO;
protected byte WPCHMHR;
protected byte WPCHMME;
protected byte WPCHMPH;
protected byte WPCHMSA;
protected byte WPCHPH;
protected byte WPCJ96;
protected byte WPCJAG;
protected byte WPCJBU;
protected byte WPCJDI;
protected byte WPCJFR;
protected byte WPCJPA;
protected byte WPCJSC;
protected byte WPCJSE;
protected byte WPCONS;
protected byte WPCOS;
protected byte WPCRAGE;
protected byte WPCRET;
protected byte WPCRETL;
protected byte WPCURP;
protected byte WPCURR;
protected byte WPDCDB;
protected byte WPDESC;
protected byte WPDESP;
protected byte WPDPSP;
protected byte WPEARLY;
protected byte WPEC;
protected byte WPECA;
protected byte WPECPP;
protected byte WPERCP;
protected byte WPESJME;
protected short WPESJML;
protected byte WPESJMR;
protected short WPESJMU;
protected byte WPEXW;
protected byte WPFFCONS;
protected byte WPFFCURP;
protected byte WPFFDCDB;
protected byte WPFFPENT;
protected byte WPFFRECP;
protected byte WPFFYBS;
protected byte WPFINFO;
protected byte WPFPN;
protected byte WPFPR;
protected byte WPFSC;
protected byte WPFSEC;
protected byte WPHLWZ;
protected byte WPIFS95;
protected byte WPIFSAC;
protected byte WPIFSCO;
protected byte WPIFSEM;
protected byte WPIFSFA;
protected byte WPIFSNO;
protected byte WPIFSPR;
protected byte WPIFSRE;
protected byte WPIFSRP;
protected double WPINCD;
protected byte WPINCE;
protected int WPINCL;
protected byte WPINCR;
protected short WPINCU;
protected byte WPLCH95;
protected byte WPLCH96;
protected byte WPLCHAD;
protected byte WPLCHFL;
protected byte WPLCHHO;
protected byte WPLCHHR;
protected byte WPLCHM85;
protected byte WPLCHM86;
protected byte WPLCHMAD;
protected byte WPLCHMBO;
protected byte WPLCHMCO;
protected byte WPLCHMDE;
protected byte WPLCHME;
protected byte WPLCHMFL;
protected byte WPLCHMHO;
protected byte WPLCHMHR;
protected byte WPLCHMLH;
protected byte WPLCHMLO;
protected byte WPLCHMME;
protected byte WPLCHMPH;
protected byte WPLCHMRT;
protected byte WPLCHMSA;
protected byte WPLCHPH;
protected byte WPLFTP95;
protected byte WPLFTPAF;
protected byte WPLFTPCH;
protected byte WPLFTPEL;
protected byte WPLFTPOF;
protected byte WPLFTPRE;
protected byte WPLFTPRT;
protected byte WPLIMWK;
protected byte WPLJO95;
protected byte WPLJOBM;
protected byte WPLJOCA;
protected byte WPLJOCL;
protected byte WPLJODI;
protected byte WPLJOFE;
protected byte WPLJOIL;
protected byte WPLJOM85;
protected byte WPLJOM86;
protected byte WPLJOMBE;
protected byte WPLJOMCA;
protected byte WPLJOMCF;
protected byte WPLJOMCL;
protected byte WPLJOMDI;
protected byte WPLJOMER;
protected byte WPLJOMFE;
protected byte WPLJOMIL;
protected byte WPLJOMME;
protected byte WPLJOMMO;
protected byte WPLJOMO;
protected byte WPLJOMPR;
protected byte WPLJOMRE;
protected byte WPLJOMSA;
protected byte WPLJOMSE;
protected byte WPLJOMSP;
protected byte WPLJOMTI;
protected byte WPLJOMVO;
protected byte WPLJORE;
protected byte WPLJOSP;
protected byte WPLJOTI;
protected byte WPLJOVO;
protected byte WPLLJM;
protected short WPLLJY;
protected byte WPLLSM;
protected short WPLLSY;
protected byte WPLPEM;
protected byte WPLPEM2;
protected byte WPLPEM3;
protected byte WPLPEM4;
protected byte WPLPEM5;
protected short WPLPEY;
protected short WPLPEY2;
protected short WPLPEY3;
protected short WPLPEY4;
protected short WPLPEY5;
protected byte WPLPSM;
protected byte WPLPSM2;
protected byte WPLPSM3;
protected byte WPLPSM4;
protected byte WPLPSM5;
protected short WPLPSY;
protected short WPLPSY2;
protected short WPLPSY3;
protected short WPLPSY4;
protected short WPLPSY5;
protected byte WPLUAE;
protected double WPLUAL;
protected byte WPLUAR;
protected double WPLUAU;
protected byte WPLUME;
protected int WPLUML;
protected byte WPLUMR;
protected int WPLUMU;
protected double WPLUPA;
protected byte WPLUPS;
protected int WPMALA;
protected byte WPMANPP;
protected byte WPMANSP;
protected byte WPMFQ;
protected byte WPMFRC;
protected byte WPMHIE;
protected short WPMHIL;
protected byte WPMHIR;
protected short WPMHIU;
protected byte WPMORE;
protected byte WPMORP;
protected int WPMPAH;
protected int WPMSAH;
protected byte WPMSFQ;
protected int WPMSH;
protected byte WPMSQ;
protected byte WPMSSQ;
protected byte WPMSTQ;
protected byte WPMTQ;
protected byte WPMYNJ;
protected byte WPNCBM85;
protected byte WPNCBM86;
protected byte WPNCBMAD;
protected byte WPNCBMCO;
protected byte WPNCBMFL;
protected byte WPNCBMHO;
protected byte WPNCBMHR;
protected byte WPNCBMME;
protected byte WPNCBMPH;
protected byte WPNCH96;
protected byte WPNCHAD;
protected byte WPNCHB85;
protected byte WPNCHBAD;
protected byte WPNCHBFL;
protected byte WPNCHBHO;
protected byte WPNCHBHR;
protected byte WPNCHBME;
protected byte WPNCHBPH;
protected byte WPNCHFL;
protected byte WPNCHGA;
protected byte WPNCHGN;
protected byte WPNCHGO;
protected byte WPNCHHO;
protected byte WPNCHHR;
protected byte WPNCHM85;
protected byte WPNCHM86;
protected byte WPNCHM96;
protected byte WPNCHMAD;
protected byte WPNCHMCO;
protected byte WPNCHME;
protected byte WPNCHMFL;
protected byte WPNCHMHO;
protected byte WPNCHMHR;
protected byte WPNCHMME;
protected byte WPNCHMPH;
protected byte WPNCHPH;
protected byte WPNEW;
protected boolean WPNEWP;
protected byte WPNLK95;
protected byte WPNLKDI;
protected byte WPNLKLO;
protected boolean WPNLKM85;
protected boolean WPNLKM86;
protected byte WPNLKMAC;
protected byte WPNLKMCM;
protected byte WPNLKMCN;
protected byte WPNLKMCO;
protected byte WPNLKMDE;
protected byte WPNLKMDI;
protected byte WPNLKMEN;
protected byte WPNLKMFI;
protected byte WPNLKMFR;
protected byte WPNLKMHR;
protected byte WPNLKMLO;
protected byte WPNLKMNO;
protected byte WPNLKMPA;
protected byte WPNLKMPE;
protected byte WPNLKMRT;
protected byte WPNLKMSE;
protected byte WPNLKMSU;
protected byte WPNLKPA;
protected byte WPNLKPE;
protected byte WPNLKRT;
protected byte WPNLKSU;
protected byte WPNPENS;
protected byte WPOCHG;
protected byte WPOJ;
protected byte WPOJ2;
protected byte WPOJ3;
protected byte WPOJ4;
protected byte WPOJ5;
protected byte WPOWB;
protected byte WPOWB2;
protected byte WPOWB3;
protected byte WPOWB4;
protected byte WPOWB5;
protected byte WPPEAE;
protected int WPPEAL;
protected byte WPPEAR;
protected int WPPEAU;
protected byte WPPENN;
protected byte WPPENT;
protected byte WPPETE;
protected int WPPETL;
protected byte WPPETR;
protected int WPPETU;
protected byte WPPFDM;
protected short WPPFDY;
protected byte WPPFEX;
protected byte WPPFVE;
protected double WPPFVL;
protected byte WPPFVR;
protected double WPPFVU;
protected byte WPPREV;
protected byte WPPROFE;
protected int WPPROFL;
protected byte WPPROFR;
protected int WPPROFU;
protected byte WPPS;
protected byte WPPS95;
protected byte WPPSAF;
protected byte WPPSEL;
protected byte WPPSEX;
protected byte WPPSM85;
protected byte WPPSM86;
protected boolean WPPSM96;
protected byte WPPSMAF;
protected byte WPPSMAG;
protected byte WPPSMAL;
protected byte WPPSMDL;
protected byte WPPSMEL;
protected byte WPPSMEX;
protected byte WPPSMHR;
protected byte WPPSMOT;
protected byte WPPSOT;
protected byte WPPSPC;
protected boolean WPPYFE;
protected boolean WPPYFL;
protected boolean WPPYFR;
protected boolean WPPYFU;
protected byte WPPYME;
protected short WPPYML;
protected byte WPPYMR;
protected short WPPYMU;
protected byte WPPYOE;
protected short WPPYOL;
protected byte WPPYOR;
protected short WPPYOU;
protected byte WPPYWE;
protected byte WPPYWL;
protected byte WPPYWR;
protected short WPPYWU;
protected byte WPPYYE;
protected short WPPYYL;
protected byte WPPYYR;
protected short WPPYYU;
protected byte WPQN;
protected byte WPRC95;
protected byte WPRCM85;
protected byte WPRCM86;
protected byte WPRCMAF;
protected byte WPRCMMO;
protected byte WPRCMNK;
protected byte WPRCMO;
protected byte WPRCMOH;
protected byte WPRCMPU;
protected byte WPRCMRE;
protected byte WPRCMRI;
protected byte WPRCMST;
protected byte WPRCMUN;
protected byte WPRCPU;
protected byte WPRCRE;
protected byte WPRCRI;
protected byte WPRCST;
protected byte WPREA95;
protected byte WPREA96;
protected byte WPREACH;
protected byte WPREADT;
protected byte WPREAEN;
protected byte WPREAFA;
protected byte WPREAFI;
protected byte WPREAM85;
protected byte WPREAM86;
protected byte WPREAM96;
protected byte WPREAMCH;
protected byte WPREAMDT;
protected byte WPREAMEN;
protected byte WPREAMFA;
protected byte WPREAMFI;
protected byte WPREAMNO;
protected byte WPREAMOH;
protected byte WPREAMRE;
protected byte WPREAMRH;
protected byte WPREAMST;
protected byte WPREAMVR;
protected byte WPREAMYO;
protected byte WPREANO;
protected byte WPREAOH;
protected byte WPREARE;
protected byte WPREARH;
protected byte WPREAST;
protected byte WPREAVR;
protected byte WPREAYO;
protected byte WPRGHX;
protected byte WPRPENS;
protected byte WPRR95;
protected byte WPRR96;
protected byte WPRRAG;
protected byte WPRRCH;
protected byte WPRRDT;
protected byte WPRREN;
protected byte WPRRFA;
protected byte WPRRFI;
protected byte WPRRM85;
protected byte WPRRM86;
protected byte WPRRM96;
protected byte WPRRMAF;
protected byte WPRRMAG;
protected byte WPRRMCH;
protected byte WPRRMDT;
protected byte WPRRMEN;
protected byte WPRRMFA;
protected byte WPRRMFI;
protected byte WPRRMLI;
protected byte WPRRMOH;
protected byte WPRRMRE;
protected byte WPRRMRH;
protected byte WPRRMST;
protected byte WPRRMYO;
protected byte WPRROH;
protected byte WPRRRE;
protected byte WPRRRH;
protected byte WPRRST;
protected byte WPRRYO;
protected byte WPSFOR;
protected byte WPSJOBM;
protected short WPSJOBY;
protected byte WPSN;
protected byte WPSPAM;
protected byte WPSPAW;
protected byte WPSPFU;
protected int WPSPOU;
protected byte WPSPOUP;
protected byte WPSPY;
protected byte WPSRUL;
protected byte WPTAKP;
protected byte WPTAWC;
protected byte WPTHPFE;
protected short WPTHPFL;
protected byte WPTHPFR;
protected short WPTHPFU;
protected byte WPTHPME;
protected short WPTHPML;
protected byte WPTHPMR;
protected short WPTHPMU;
protected byte WPTHPOE;
protected short WPTHPOL;
protected byte WPTHPOR;
protected short WPTHPOU;
protected byte WPTHPWE;
protected short WPTHPWL;
protected byte WPTHPWR;
protected short WPTHPWU;
protected byte WPTHPYE;
protected int WPTHPYL;
protected byte WPTHPYR;
protected int WPTHPYU;
protected byte WPUPAFE;
protected short WPUPAFL;
protected byte WPUPAFR;
protected short WPUPAFU;
protected byte WPUPAME;
protected short WPUPAML;
protected byte WPUPAMR;
protected short WPUPAMU;
protected int WPUPAOE;
protected short WPUPAOL;
protected byte WPUPAOR;
protected short WPUPAOU;
protected byte WPUPAWE;
protected short WPUPAWL;
protected byte WPUPAWR;
protected short WPUPAWU;
protected byte WPUPAYE;
protected byte WPUPAYL;
protected byte WPUPAYR;
protected short WPUPAYU;
protected byte WPVBUSE;
protected int WPVBUSL;
protected byte WPVBUSR;
protected int WPVBUSU;
protected byte WPWLYYE;
protected int WPWLYYL;
protected byte WPWLYYR;
protected int WPWLYYU;
protected byte WPWYJ95;
protected byte WPWYJBU;
protected byte WPWYJCA;
protected byte WPWYJCO;
protected byte WPWYJFB;
protected byte WPWYJFI;
protected byte WPWYJHO;
protected byte WPWYJM85;
protected byte WPWYJM86;
protected byte WPWYJMBC;
protected byte WPWYJMBU;
protected byte WPWYJMCA;
protected byte WPWYJMCH;
protected byte WPWYJMCO;
protected byte WPWYJMFB;
protected byte WPWYJMFI;
protected byte WPWYJMHF;
protected byte WPWYJMHH;
protected byte WPWYJMHO;
protected byte WPWYJMLO;
protected byte WPWYJMMO;
protected byte WPWYJMON;
protected byte WPWYJMPA;
protected byte WPWYJMPH;
protected byte WPWYJMTI;
protected byte WPWYJMTO;
protected byte WPWYJON;
protected byte WPWYJPA;
protected byte WPWYJREA;
protected byte WPWYJTI;
protected byte WPWYN85;
protected byte WPWYNCA;
protected byte WPWYNCH;
protected byte WPWYNEA;
protected byte WPWYNEM;
protected byte WPWYNFA;
protected byte WPWYNM85;
protected byte WPWYNM86;
protected boolean WPWYNMAB;
protected byte WPWYNMCA;
protected byte WPWYNMCH;
protected byte WPWYNMCO;
protected byte WPWYNMDE;
protected byte WPWYNMEA;
protected byte WPWYNMEM;
protected byte WPWYNMFA;
protected byte WPWYNMLH;
protected byte WPWYNMLO;
protected byte WPWYNMMO;
protected byte WPWYNMO;
protected byte WPWYNMOH;
protected byte WPWYNMOR;
protected byte WPWYNMOU;
protected byte WPWYNMRE;
protected byte WPWYNMRH;
protected byte WPWYNMTI;
protected byte WPWYNMVR;
protected byte WPWYNOH;
protected byte WPWYNOU;
protected byte WPWYNRE;
protected byte WPWYNRH;
protected byte WPWYNTI;
protected byte WPWYNVR;
protected byte WPWYW95;
protected byte WPWYWEN;
protected byte WPWYWM85;
protected byte WPWYWM86;
protected byte WPWYWMCH;
protected byte WPWYWMEN;
protected byte WPWYWMFI;
protected byte WPWYWMHE;
protected byte WPWYWMHH;
protected byte WPWYWMMO;
protected byte WPWYWMO;
protected byte WPWYWMOH;
protected byte WPWYWMRH;
protected byte WPWYWMSU;
protected byte WPWYWOH;
protected byte WPWYWRH;
protected byte WPWYWSU;
protected byte WPYFRAC;
protected byte WPYST95;
protected byte WPYSTAF;
protected byte WPYSTCH;
protected byte WPYSTEN;
protected byte WPYSTFA;
protected byte WPYSTFI;
protected byte WPYSTM85;
protected byte WPYSTM86;
protected byte WPYSTMAF;
protected byte WPYSTMAG;
protected byte WPYSTMCH;
protected byte WPYSTMCO;
protected byte WPYSTMEN;
protected byte WPYSTMFA;
protected byte WPYSTMFI;
protected byte WPYSTMMO;
protected byte WPYSTMOH;
protected byte WPYSTMOU;
protected byte WPYSTMPA;
protected byte WPYSTMRE;
protected byte WPYSTMRH;
protected byte WPYSTMST;
protected byte WPYSTMTI;
protected byte WPYSTMVR;
protected byte WPYSTMYO;
protected byte WPYSTOH;
protected byte WPYSTOMO;
protected byte WPYSTOU;
protected byte WPYSTPA;
protected byte WPYSTPM;
protected byte WPYSTRE;
protected byte WPYSTRH;
protected byte WPYSTTI;
protected byte WPYSTVR;
protected byte WPYSTYO;
protected byte WTC_P_F;
protected double WTC_P_I;
protected short WTC_P_O;
protected short WTC_P_T;
protected byte WTC_R_F;
protected double WTC_R_I;
protected short WTC_R_O;
protected short WTC_R_T;
protected short YRBIRTH;
protected final void initACCUR(String s) {
if (!s.trim().isEmpty()) {
ACCUR = Byte.parseByte(s);
} else {
ACCUR = Byte.MIN_VALUE;
}
}

protected final void initADDPEN_06(String s) {
if (!s.trim().isEmpty()) {
ADDPEN_06 = Double.parseDouble(s);
} else {
ADDPEN_06 = Double.NaN;
}
}

protected final void initADDPEN_SPA(String s) {
if (!s.trim().isEmpty()) {
ADDPEN_SPA = Double.parseDouble(s);
} else {
ADDPEN_SPA = Double.NaN;
}
}

protected final void initALLADCH(String s) {
if (!s.trim().isEmpty()) {
ALLADCH = Byte.parseByte(s);
} else {
ALLADCH = Byte.MIN_VALUE;
}
}

protected final void initALLFSCH(String s) {
if (!s.trim().isEmpty()) {
ALLFSCH = Byte.parseByte(s);
} else {
ALLFSCH = Byte.MIN_VALUE;
}
}

protected final void initALLNATCH(String s) {
if (!s.trim().isEmpty()) {
ALLNATCH = Byte.parseByte(s);
} else {
ALLNATCH = Byte.MIN_VALUE;
}
}

protected final void initALLSPCH(String s) {
if (!s.trim().isEmpty()) {
ALLSPCH = Byte.parseByte(s);
} else {
ALLSPCH = Byte.MIN_VALUE;
}
}

protected final void initALLTOTCH(String s) {
if (!s.trim().isEmpty()) {
ALLTOTCH = Byte.parseByte(s);
} else {
ALLTOTCH = Byte.MIN_VALUE;
}
}

protected final void initALONE(String s) {
if (!s.trim().isEmpty()) {
ALONE = Byte.parseByte(s);
} else {
ALONE = Byte.MIN_VALUE;
}
}

protected final void initASKINST(String s) {
if (!s.trim().isEmpty()) {
ASKINST = Byte.parseByte(s);
} else {
ASKINST = Byte.MIN_VALUE;
}
}

protected final void initASKPX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ASKPX = false;
} else {
ASKPX = true;
}
}
}

protected final void initBRETHS(String s) {
if (!s.trim().isEmpty()) {
BRETHS = Byte.parseByte(s);
} else {
BRETHS = Byte.MIN_VALUE;
}
}

protected final void initBSP_06(String s) {
if (!s.trim().isEmpty()) {
BSP_06 = Double.parseDouble(s);
} else {
BSP_06 = Double.NaN;
}
}

protected final void initBSP_SPA(String s) {
if (!s.trim().isEmpty()) {
BSP_SPA = Double.parseDouble(s);
} else {
BSP_SPA = Double.NaN;
}
}

protected final void initCARERS_P_F(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_F = Byte.parseByte(s);
} else {
CARERS_P_F = Byte.MIN_VALUE;
}
}

protected final void initCARERS_P_I(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_I = Double.parseDouble(s);
} else {
CARERS_P_I = Double.NaN;
}
}

protected final void initCARERS_P_O(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_O = Short.parseShort(s);
} else {
CARERS_P_O = Short.MIN_VALUE;
}
}

protected final void initCARERS_P_T(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_T = Short.parseShort(s);
} else {
CARERS_P_T = Short.MIN_VALUE;
}
}

protected final void initCARERS_R_F(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_F = Byte.parseByte(s);
} else {
CARERS_R_F = Byte.MIN_VALUE;
}
}

protected final void initCARERS_R_I(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_I = Double.parseDouble(s);
} else {
CARERS_R_I = Double.NaN;
}
}

protected final void initCARERS_R_O(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_O = Short.parseShort(s);
} else {
CARERS_R_O = Short.MIN_VALUE;
}
}

protected final void initCARERS_R_T(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_T = Short.parseShort(s);
} else {
CARERS_R_T = Short.MIN_VALUE;
}
}

protected final void initCASP19(String s) {
if (!s.trim().isEmpty()) {
CASP19 = Byte.parseByte(s);
} else {
CASP19 = Byte.MIN_VALUE;
}
}

protected final void initCASPAUT(String s) {
if (!s.trim().isEmpty()) {
CASPAUT = Byte.parseByte(s);
} else {
CASPAUT = Byte.MIN_VALUE;
}
}

protected final void initCASPCTL(String s) {
if (!s.trim().isEmpty()) {
CASPCTL = Byte.parseByte(s);
} else {
CASPCTL = Byte.MIN_VALUE;
}
}

protected final void initCASPPLE(String s) {
if (!s.trim().isEmpty()) {
CASPPLE = Byte.parseByte(s);
} else {
CASPPLE = Byte.MIN_VALUE;
}
}

protected final void initCASPSR(String s) {
if (!s.trim().isEmpty()) {
CASPSR = Byte.parseByte(s);
} else {
CASPSR = Byte.MIN_VALUE;
}
}

protected final void initCFACCUR(String s) {
if (!s.trim().isEmpty()) {
CFACCUR = Double.parseDouble(s);
} else {
CFACCUR = Double.NaN;
}
}

protected final void initCFANI(String s) {
if (!s.trim().isEmpty()) {
CFANI = Byte.parseByte(s);
} else {
CFANI = Byte.MIN_VALUE;
}
}

protected final void initCFANIG(String s) {
if (!s.trim().isEmpty()) {
CFANIG = Byte.parseByte(s);
} else {
CFANIG = Byte.MIN_VALUE;
}
}

protected final void initCFEXIND(String s) {
if (!s.trim().isEmpty()) {
CFEXIND = Byte.parseByte(s);
} else {
CFEXIND = Byte.MIN_VALUE;
}
}

protected final void initCFIND(String s) {
if (!s.trim().isEmpty()) {
CFIND = Byte.parseByte(s);
} else {
CFIND = Byte.MIN_VALUE;
}
}

protected final void initCFLETEN(String s) {
if (!s.trim().isEmpty()) {
CFLETEN = Byte.parseByte(s);
} else {
CFLETEN = Byte.MIN_VALUE;
}
}

protected final void initCFMEIND(String s) {
if (!s.trim().isEmpty()) {
CFMEIND = Byte.parseByte(s);
} else {
CFMEIND = Byte.MIN_VALUE;
}
}

protected final void initCFMEM(String s) {
if (!s.trim().isEmpty()) {
CFMEM = Byte.parseByte(s);
} else {
CFMEM = Byte.MIN_VALUE;
}
}

protected final void initCFMEMS(String s) {
if (!s.trim().isEmpty()) {
CFMEMS = Byte.parseByte(s);
} else {
CFMEMS = Byte.MIN_VALUE;
}
}

protected final void initCFMERSP(String s) {
if (!s.trim().isEmpty()) {
CFMERSP = Byte.parseByte(s);
} else {
CFMERSP = Byte.MIN_VALUE;
}
}

protected final void initCFMETM(String s) {
if (!s.trim().isEmpty()) {
CFMETM = Byte.parseByte(s);
} else {
CFMETM = Byte.MIN_VALUE;
}
}

protected final void initCFMETMT(String s) {
if (!s.trim().isEmpty()) {
CFMETMT = Byte.parseByte(s);
} else {
CFMETMT = Byte.MIN_VALUE;
}
}

protected final void initCFPASCR(String s) {
if (!s.trim().isEmpty()) {
CFPASCR = Byte.parseByte(s);
} else {
CFPASCR = Byte.MIN_VALUE;
}
}

protected final void initCFPRMEM(String s) {
if (!s.trim().isEmpty()) {
CFPRMEM = Byte.parseByte(s);
} else {
CFPRMEM = Byte.MIN_VALUE;
}
}

protected final void initCFPROM(String s) {
if (!s.trim().isEmpty()) {
CFPROM = Byte.parseByte(s);
} else {
CFPROM = Byte.MIN_VALUE;
}
}

protected final void initCFRECAL(String s) {
if (!s.trim().isEmpty()) {
CFRECAL = Double.parseDouble(s);
} else {
CFRECAL = Double.NaN;
}
}

protected final void initCFSPEED(String s) {
if (!s.trim().isEmpty()) {
CFSPEED = Byte.parseByte(s);
} else {
CFSPEED = Byte.MIN_VALUE;
}
}

protected final void initCFWHM85(String s) {
if (!s.trim().isEmpty()) {
CFWHM85 = Byte.parseByte(s);
} else {
CFWHM85 = Byte.MIN_VALUE;
}
}

protected final void initCFWHM86(String s) {
if (!s.trim().isEmpty()) {
CFWHM86 = Byte.parseByte(s);
} else {
CFWHM86 = Byte.MIN_VALUE;
}
}

protected final void initCFWHMALC(String s) {
if (!s.trim().isEmpty()) {
CFWHMALC = Byte.parseByte(s);
} else {
CFWHMALC = Byte.MIN_VALUE;
}
}

protected final void initCFWHMCON(String s) {
if (!s.trim().isEmpty()) {
CFWHMCON = Byte.parseByte(s);
} else {
CFWHMCON = Byte.MIN_VALUE;
}
}

protected final void initCFWHMDIS(String s) {
if (!s.trim().isEmpty()) {
CFWHMDIS = Byte.parseByte(s);
} else {
CFWHMDIS = Byte.MIN_VALUE;
}
}

protected final void initCFWHMENG(String s) {
if (!s.trim().isEmpty()) {
CFWHMENG = Byte.parseByte(s);
} else {
CFWHMENG = Byte.MIN_VALUE;
}
}

protected final void initCFWHMEYE(String s) {
if (!s.trim().isEmpty()) {
CFWHMEYE = Byte.parseByte(s);
} else {
CFWHMEYE = Byte.MIN_VALUE;
}
}

protected final void initCFWHMHEA(String s) {
if (!s.trim().isEmpty()) {
CFWHMHEA = Byte.parseByte(s);
} else {
CFWHMHEA = Byte.MIN_VALUE;
}
}

protected final void initCFWHMILL(String s) {
if (!s.trim().isEmpty()) {
CFWHMILL = Byte.parseByte(s);
} else {
CFWHMILL = Byte.MIN_VALUE;
}
}

protected final void initCFWHMLAP(String s) {
if (!s.trim().isEmpty()) {
CFWHMLAP = Byte.parseByte(s);
} else {
CFWHMLAP = Byte.MIN_VALUE;
}
}

protected final void initCFWHMMEM(String s) {
if (!s.trim().isEmpty()) {
CFWHMMEM = Byte.parseByte(s);
} else {
CFWHMMEM = Byte.MIN_VALUE;
}
}

protected final void initCFWHMMEN(String s) {
if (!s.trim().isEmpty()) {
CFWHMMEN = Byte.parseByte(s);
} else {
CFWHMMEN = Byte.MIN_VALUE;
}
}

protected final void initCFWHMNER(String s) {
if (!s.trim().isEmpty()) {
CFWHMNER = Byte.parseByte(s);
} else {
CFWHMNER = Byte.MIN_VALUE;
}
}

protected final void initCFWHMNOI(String s) {
if (!s.trim().isEmpty()) {
CFWHMNOI = Byte.parseByte(s);
} else {
CFWHMNOI = Byte.MIN_VALUE;
}
}

protected final void initCFWHMREF(String s) {
if (!s.trim().isEmpty()) {
CFWHMREF = Byte.parseByte(s);
} else {
CFWHMREF = Byte.MIN_VALUE;
}
}

protected final void initCFWHMTIR(String s) {
if (!s.trim().isEmpty()) {
CFWHMTIR = Byte.parseByte(s);
} else {
CFWHMTIR = Byte.MIN_VALUE;
}
}

protected final void initCFWHMUP(String s) {
if (!s.trim().isEmpty()) {
CFWHMUP = Byte.parseByte(s);
} else {
CFWHMUP = Byte.MIN_VALUE;
}
}

protected final void initCFWHOAD(String s) {
if (!s.trim().isEmpty()) {
CFWHOAD = Byte.parseByte(s);
} else {
CFWHOAD = Byte.MIN_VALUE;
}
}

protected final void initCFWHOCHI(String s) {
if (!s.trim().isEmpty()) {
CFWHOCHI = Byte.parseByte(s);
} else {
CFWHOCHI = Byte.MIN_VALUE;
}
}

protected final void initCFWHONON(String s) {
if (!s.trim().isEmpty()) {
CFWHONON = Byte.parseByte(s);
} else {
CFWHONON = Byte.MIN_VALUE;
}
}

protected final void initCFWHOOTH(String s) {
if (!s.trim().isEmpty()) {
CFWHOOTH = Byte.parseByte(s);
} else {
CFWHOOTH = Byte.MIN_VALUE;
}
}

protected final void initCFWHOPAR(String s) {
if (!s.trim().isEmpty()) {
CFWHOPAR = Byte.parseByte(s);
} else {
CFWHOPAR = Byte.MIN_VALUE;
}
}

protected final void initCFWHT95(String s) {
if (!s.trim().isEmpty()) {
CFWHT95 = Byte.parseByte(s);
} else {
CFWHT95 = Byte.MIN_VALUE;
}
}

protected final void initCFWHTCON(String s) {
if (!s.trim().isEmpty()) {
CFWHTCON = Byte.parseByte(s);
} else {
CFWHTCON = Byte.MIN_VALUE;
}
}

protected final void initCFWHTDIS(String s) {
if (!s.trim().isEmpty()) {
CFWHTDIS = Byte.parseByte(s);
} else {
CFWHTDIS = Byte.MIN_VALUE;
}
}

protected final void initCFWHTENG(String s) {
if (!s.trim().isEmpty()) {
CFWHTENG = Byte.parseByte(s);
} else {
CFWHTENG = Byte.MIN_VALUE;
}
}

protected final void initCFWHTEYE(String s) {
if (!s.trim().isEmpty()) {
CFWHTEYE = Byte.parseByte(s);
} else {
CFWHTEYE = Byte.MIN_VALUE;
}
}

protected final void initCFWHTHEA(String s) {
if (!s.trim().isEmpty()) {
CFWHTHEA = Byte.parseByte(s);
} else {
CFWHTHEA = Byte.MIN_VALUE;
}
}

protected final void initCFWHTILL(String s) {
if (!s.trim().isEmpty()) {
CFWHTILL = Byte.parseByte(s);
} else {
CFWHTILL = Byte.MIN_VALUE;
}
}

protected final void initCFWHTLAP(String s) {
if (!s.trim().isEmpty()) {
CFWHTLAP = Byte.parseByte(s);
} else {
CFWHTLAP = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMEN(String s) {
if (!s.trim().isEmpty()) {
CFWHTMEN = Byte.parseByte(s);
} else {
CFWHTMEN = Byte.MIN_VALUE;
}
}

protected final void initCFWHTNER(String s) {
if (!s.trim().isEmpty()) {
CFWHTNER = Byte.parseByte(s);
} else {
CFWHTNER = Byte.MIN_VALUE;
}
}

protected final void initCFWHTNOI(String s) {
if (!s.trim().isEmpty()) {
CFWHTNOI = Byte.parseByte(s);
} else {
CFWHTNOI = Byte.MIN_VALUE;
}
}

protected final void initCFWHTTIR(String s) {
if (!s.trim().isEmpty()) {
CFWHTTIR = Byte.parseByte(s);
} else {
CFWHTTIR = Byte.MIN_VALUE;
}
}

protected final void initCHEACD(String s) {
if (!s.trim().isEmpty()) {
CHEACD = Byte.parseByte(s);
} else {
CHEACD = Byte.MIN_VALUE;
}
}

protected final void initCHEFLA(String s) {
if (!s.trim().isEmpty()) {
CHEFLA = Byte.parseByte(s);
} else {
CHEFLA = Byte.MIN_VALUE;
}
}

protected final void initCHEFRAC(String s) {
if (!s.trim().isEmpty()) {
CHEFRAC = Byte.parseByte(s);
} else {
CHEFRAC = Byte.MIN_VALUE;
}
}

protected final void initCHEJI(String s) {
if (!s.trim().isEmpty()) {
CHEJI = Byte.parseByte(s);
} else {
CHEJI = Byte.MIN_VALUE;
}
}

protected final void initCHESKA(String s) {
if (!s.trim().isEmpty()) {
CHESKA = Byte.parseByte(s);
} else {
CHESKA = Byte.MIN_VALUE;
}
}

protected final void initCHESMK(String s) {
if (!s.trim().isEmpty()) {
CHESMK = Byte.parseByte(s);
} else {
CHESMK = Byte.MIN_VALUE;
}
}

protected final void initCHIADP(String s) {
if (!s.trim().isEmpty()) {
CHIADP = Byte.parseByte(s);
} else {
CHIADP = Byte.MIN_VALUE;
}
}

protected final void initCHIFST(String s) {
if (!s.trim().isEmpty()) {
CHIFST = Byte.parseByte(s);
} else {
CHIFST = Byte.MIN_VALUE;
}
}

protected final void initCHINAT(String s) {
if (!s.trim().isEmpty()) {
CHINAT = Byte.parseByte(s);
} else {
CHINAT = Byte.MIN_VALUE;
}
}

protected final void initCHINHH(String s) {
if (!s.trim().isEmpty()) {
CHINHH = Byte.parseByte(s);
} else {
CHINHH = Byte.MIN_VALUE;
}
}

protected final void initCHISTP(String s) {
if (!s.trim().isEmpty()) {
CHISTP = Byte.parseByte(s);
} else {
CHISTP = Byte.MIN_VALUE;
}
}

protected final void initCHITOT(String s) {
if (!s.trim().isEmpty()) {
CHITOT = Byte.parseByte(s);
} else {
CHITOT = Byte.MIN_VALUE;
}
}

protected final void initCHOADP(String s) {
if (!s.trim().isEmpty()) {
CHOADP = Byte.parseByte(s);
} else {
CHOADP = Byte.MIN_VALUE;
}
}

protected final void initCHOFST(String s) {
if (!s.trim().isEmpty()) {
CHOFST = Byte.parseByte(s);
} else {
CHOFST = Byte.MIN_VALUE;
}
}

protected final void initCHONAT(String s) {
if (!s.trim().isEmpty()) {
CHONAT = Byte.parseByte(s);
} else {
CHONAT = Byte.MIN_VALUE;
}
}

protected final void initCHOSTP(String s) {
if (!s.trim().isEmpty()) {
CHOSTP = Byte.parseByte(s);
} else {
CHOSTP = Byte.MIN_VALUE;
}
}

protected final void initCHOTOT(String s) {
if (!s.trim().isEmpty()) {
CHOTOT = Byte.parseByte(s);
} else {
CHOTOT = Byte.MIN_VALUE;
}
}

protected final void initCLAUD(String s) {
if (!s.trim().isEmpty()) {
CLAUD = Byte.parseByte(s);
} else {
CLAUD = Byte.MIN_VALUE;
}
}

protected final void initCONCUR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
CONCUR = false;
} else {
CONCUR = true;
}
}
}

protected final void initCTC_P_F(String s) {
if (!s.trim().isEmpty()) {
CTC_P_F = Byte.parseByte(s);
} else {
CTC_P_F = Byte.MIN_VALUE;
}
}

protected final void initCTC_P_I(String s) {
if (!s.trim().isEmpty()) {
CTC_P_I = Double.parseDouble(s);
} else {
CTC_P_I = Double.NaN;
}
}

protected final void initCTC_P_O(String s) {
if (!s.trim().isEmpty()) {
CTC_P_O = Short.parseShort(s);
} else {
CTC_P_O = Short.MIN_VALUE;
}
}

protected final void initCTC_P_T(String s) {
if (!s.trim().isEmpty()) {
CTC_P_T = Short.parseShort(s);
} else {
CTC_P_T = Short.MIN_VALUE;
}
}

protected final void initCTC_R_F(String s) {
if (!s.trim().isEmpty()) {
CTC_R_F = Byte.parseByte(s);
} else {
CTC_R_F = Byte.MIN_VALUE;
}
}

protected final void initCTC_R_I(String s) {
if (!s.trim().isEmpty()) {
CTC_R_I = Double.parseDouble(s);
} else {
CTC_R_I = Double.NaN;
}
}

protected final void initCTC_R_O(String s) {
if (!s.trim().isEmpty()) {
CTC_R_O = Short.parseShort(s);
} else {
CTC_R_O = Short.MIN_VALUE;
}
}

protected final void initCTC_R_T(String s) {
if (!s.trim().isEmpty()) {
CTC_R_T = Short.parseShort(s);
} else {
CTC_R_T = Short.MIN_VALUE;
}
}

protected final void initCURRENTDB_06(String s) {
if (!s.trim().isEmpty()) {
CURRENTDB_06 = Double.parseDouble(s);
} else {
CURRENTDB_06 = Double.NaN;
}
}

protected final void initCURRENTDB_SPA(String s) {
if (!s.trim().isEmpty()) {
CURRENTDB_SPA = Double.parseDouble(s);
} else {
CURRENTDB_SPA = Double.NaN;
}
}

protected final void initCURRENTDC_06(String s) {
if (!s.trim().isEmpty()) {
CURRENTDC_06 = Double.parseDouble(s);
} else {
CURRENTDC_06 = Double.NaN;
}
}

protected final void initCURRENTDC_SPA(String s) {
if (!s.trim().isEmpty()) {
CURRENTDC_SPA = Double.parseDouble(s);
} else {
CURRENTDC_SPA = Double.NaN;
}
}

protected final void initCVD7DBTS(String s) {
if (!s.trim().isEmpty()) {
CVD7DBTS = Byte.parseByte(s);
} else {
CVD7DBTS = Byte.MIN_VALUE;
}
}

protected final void initCVD7DIHB(String s) {
if (!s.trim().isEmpty()) {
CVD7DIHB = Byte.parseByte(s);
} else {
CVD7DIHB = Byte.MIN_VALUE;
}
}

protected final void initDCURPEN(String s) {
if (!s.trim().isEmpty()) {
DCURPEN = Byte.parseByte(s);
} else {
DCURPEN = Byte.MIN_VALUE;
}
}

protected final void initDDBDC(String s) {
if (!s.trim().isEmpty()) {
DDBDC = Byte.parseByte(s);
} else {
DDBDC = Byte.MIN_VALUE;
}
}

protected final void initDEMPPEN(String s) {
if (!s.trim().isEmpty()) {
DEMPPEN = Byte.parseByte(s);
} else {
DEMPPEN = Byte.MIN_VALUE;
}
}

protected final void initDHAGER(String s) {
if (!s.trim().isEmpty()) {
DHAGER = Byte.parseByte(s);
} else {
DHAGER = Byte.MIN_VALUE;
}
}

protected final void initDHC14(String s) {
if (!s.trim().isEmpty()) {
DHC14 = Byte.parseByte(s);
} else {
DHC14 = Byte.MIN_VALUE;
}
}

protected final void initDHC15(String s) {
if (!s.trim().isEmpty()) {
DHC15 = Byte.parseByte(s);
} else {
DHC15 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG14(String s) {
if (!s.trim().isEmpty()) {
DHCAG14 = Byte.parseByte(s);
} else {
DHCAG14 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG15(String s) {
if (!s.trim().isEmpty()) {
DHCAG15 = Byte.parseByte(s);
} else {
DHCAG15 = Byte.MIN_VALUE;
}
}

protected final void initDHCDBY1(String s) {
if (!s.trim().isEmpty()) {
DHCDBY1 = Short.parseShort(s);
} else {
DHCDBY1 = Short.MIN_VALUE;
}
}

protected final void initDHCDBY10(String s) {
if (!s.trim().isEmpty()) {
DHCDBY10 = Short.parseShort(s);
} else {
DHCDBY10 = Short.MIN_VALUE;
}
}

protected final void initDHCDBY11(String s) {
if (!s.trim().isEmpty()) {
DHCDBY11 = Short.parseShort(s);
} else {
DHCDBY11 = Short.MIN_VALUE;
}
}

protected final void initDHCDBY12(String s) {
if (!s.trim().isEmpty()) {
DHCDBY12 = Short.parseShort(s);
} else {
DHCDBY12 = Short.MIN_VALUE;
}
}

protected final void initDHCDBY13(String s) {
if (!s.trim().isEmpty()) {
DHCDBY13 = Short.parseShort(s);
} else {
DHCDBY13 = Short.MIN_VALUE;
}
}

protected final void initDHCDBY14(String s) {
if (!s.trim().isEmpty()) {
DHCDBY14 = Short.parseShort(s);
} else {
DHCDBY14 = Short.MIN_VALUE;
}
}

protected final void initDHCDBY15(String s) {
if (!s.trim().isEmpty()) {
DHCDBY15 = Short.parseShort(s);
} else {
DHCDBY15 = Short.MIN_VALUE;
}
}

protected final void initDHCDBY2(String s) {
if (!s.trim().isEmpty()) {
DHCDBY2 = Short.parseShort(s);
} else {
DHCDBY2 = Short.MIN_VALUE;
}
}

protected final void initDHCDBY3(String s) {
if (!s.trim().isEmpty()) {
DHCDBY3 = Short.parseShort(s);
} else {
DHCDBY3 = Short.MIN_VALUE;
}
}

protected final void initDHCDBY4(String s) {
if (!s.trim().isEmpty()) {
DHCDBY4 = Short.parseShort(s);
} else {
DHCDBY4 = Short.MIN_VALUE;
}
}

protected final void initDHCDBY5(String s) {
if (!s.trim().isEmpty()) {
DHCDBY5 = Short.parseShort(s);
} else {
DHCDBY5 = Short.MIN_VALUE;
}
}

protected final void initDHCDBY6(String s) {
if (!s.trim().isEmpty()) {
DHCDBY6 = Short.parseShort(s);
} else {
DHCDBY6 = Short.MIN_VALUE;
}
}

protected final void initDHCDBY7(String s) {
if (!s.trim().isEmpty()) {
DHCDBY7 = Short.parseShort(s);
} else {
DHCDBY7 = Short.MIN_VALUE;
}
}

protected final void initDHCDBY8(String s) {
if (!s.trim().isEmpty()) {
DHCDBY8 = Short.parseShort(s);
} else {
DHCDBY8 = Short.MIN_VALUE;
}
}

protected final void initDHCDBY9(String s) {
if (!s.trim().isEmpty()) {
DHCDBY9 = Short.parseShort(s);
} else {
DHCDBY9 = Short.MIN_VALUE;
}
}

protected final void initDHCR08(String s) {
if (!s.trim().isEmpty()) {
DHCR08 = Byte.parseByte(s);
} else {
DHCR08 = Byte.MIN_VALUE;
}
}

protected final void initDHCR09(String s) {
if (!s.trim().isEmpty()) {
DHCR09 = Byte.parseByte(s);
} else {
DHCR09 = Byte.MIN_VALUE;
}
}

protected final void initDHCR10(String s) {
if (!s.trim().isEmpty()) {
DHCR10 = Byte.parseByte(s);
} else {
DHCR10 = Byte.MIN_VALUE;
}
}

protected final void initDHCR104(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR104 = false;
} else {
DHCR104 = true;
}
}
}

protected final void initDHCR105(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR105 = false;
} else {
DHCR105 = true;
}
}
}

protected final void initDHCR106(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR106 = false;
} else {
DHCR106 = true;
}
}
}

protected final void initDHCR118(String s) {
if (!s.trim().isEmpty()) {
DHCR118 = Byte.parseByte(s);
} else {
DHCR118 = Byte.MIN_VALUE;
}
}

protected final void initDHCR119(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR119 = false;
} else {
DHCR119 = true;
}
}
}

protected final void initDHCR120(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR120 = false;
} else {
DHCR120 = true;
}
}
}

protected final void initDHCR121(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR121 = false;
} else {
DHCR121 = true;
}
}
}

protected final void initDHCR122(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR122 = false;
} else {
DHCR122 = true;
}
}
}

protected final void initDHCR134(String s) {
if (!s.trim().isEmpty()) {
DHCR134 = Byte.parseByte(s);
} else {
DHCR134 = Byte.MIN_VALUE;
}
}

protected final void initDHCR135(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR135 = false;
} else {
DHCR135 = true;
}
}
}

protected final void initDHCR136(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR136 = false;
} else {
DHCR136 = true;
}
}
}

protected final void initDHCR137(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR137 = false;
} else {
DHCR137 = true;
}
}
}

protected final void initDHCR138(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR138 = false;
} else {
DHCR138 = true;
}
}
}

protected final void initDHCR147(String s) {
if (!s.trim().isEmpty()) {
DHCR147 = Byte.parseByte(s);
} else {
DHCR147 = Byte.MIN_VALUE;
}
}

protected final void initDHCR148(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR148 = false;
} else {
DHCR148 = true;
}
}
}

protected final void initDHCR149(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR149 = false;
} else {
DHCR149 = true;
}
}
}

protected final void initDHCR150(String s) {
if (!s.trim().isEmpty()) {
DHCR150 = Byte.parseByte(s);
} else {
DHCR150 = Byte.MIN_VALUE;
}
}

protected final void initDHCR151(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR151 = false;
} else {
DHCR151 = true;
}
}
}

protected final void initDHCR152(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR152 = false;
} else {
DHCR152 = true;
}
}
}

protected final void initDHCR153(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR153 = false;
} else {
DHCR153 = true;
}
}
}

protected final void initDHCR154(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR154 = false;
} else {
DHCR154 = true;
}
}
}

protected final void initDHCR163(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR163 = false;
} else {
DHCR163 = true;
}
}
}

protected final void initDHCR164(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR164 = false;
} else {
DHCR164 = true;
}
}
}

protected final void initDHCR165(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR165 = false;
} else {
DHCR165 = true;
}
}
}

protected final void initDHCR166(String s) {
if (!s.trim().isEmpty()) {
DHCR166 = Byte.parseByte(s);
} else {
DHCR166 = Byte.MIN_VALUE;
}
}

protected final void initDHCR167(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR167 = false;
} else {
DHCR167 = true;
}
}
}

protected final void initDHCR168(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR168 = false;
} else {
DHCR168 = true;
}
}
}

protected final void initDHCR169(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR169 = false;
} else {
DHCR169 = true;
}
}
}

protected final void initDHCR170(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR170 = false;
} else {
DHCR170 = true;
}
}
}

protected final void initDHCR178(String s) {
if (!s.trim().isEmpty()) {
DHCR178 = Byte.parseByte(s);
} else {
DHCR178 = Byte.MIN_VALUE;
}
}

protected final void initDHCR179(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR179 = false;
} else {
DHCR179 = true;
}
}
}

protected final void initDHCR180(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR180 = false;
} else {
DHCR180 = true;
}
}
}

protected final void initDHCR181(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR181 = false;
} else {
DHCR181 = true;
}
}
}

protected final void initDHCR182(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR182 = false;
} else {
DHCR182 = true;
}
}
}

protected final void initDHCR183(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR183 = false;
} else {
DHCR183 = true;
}
}
}

protected final void initDHCR184(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR184 = false;
} else {
DHCR184 = true;
}
}
}

protected final void initDHCR185(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR185 = false;
} else {
DHCR185 = true;
}
}
}

protected final void initDHCR186(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR186 = false;
} else {
DHCR186 = true;
}
}
}

protected final void initDHCR194(String s) {
if (!s.trim().isEmpty()) {
DHCR194 = Byte.parseByte(s);
} else {
DHCR194 = Byte.MIN_VALUE;
}
}

protected final void initDHCR195(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR195 = false;
} else {
DHCR195 = true;
}
}
}

protected final void initDHCR196(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR196 = false;
} else {
DHCR196 = true;
}
}
}

protected final void initDHCR197(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR197 = false;
} else {
DHCR197 = true;
}
}
}

protected final void initDHCR198(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR198 = false;
} else {
DHCR198 = true;
}
}
}

protected final void initDHCR199(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR199 = false;
} else {
DHCR199 = true;
}
}
}

protected final void initDHCR200(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR200 = false;
} else {
DHCR200 = true;
}
}
}

protected final void initDHCR201(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR201 = false;
} else {
DHCR201 = true;
}
}
}

protected final void initDHCR202(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR202 = false;
} else {
DHCR202 = true;
}
}
}

protected final void initDHCR209(String s) {
if (!s.trim().isEmpty()) {
DHCR209 = Byte.parseByte(s);
} else {
DHCR209 = Byte.MIN_VALUE;
}
}

protected final void initDHCR210(String s) {
if (!s.trim().isEmpty()) {
DHCR210 = Byte.parseByte(s);
} else {
DHCR210 = Byte.MIN_VALUE;
}
}

protected final void initDHCR211(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR211 = false;
} else {
DHCR211 = true;
}
}
}

protected final void initDHCR212(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR212 = false;
} else {
DHCR212 = true;
}
}
}

protected final void initDHCR213(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR213 = false;
} else {
DHCR213 = true;
}
}
}

protected final void initDHCR214(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR214 = false;
} else {
DHCR214 = true;
}
}
}

protected final void initDHCR215(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR215 = false;
} else {
DHCR215 = true;
}
}
}

protected final void initDHCR216(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR216 = false;
} else {
DHCR216 = true;
}
}
}

protected final void initDHCR217(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR217 = false;
} else {
DHCR217 = true;
}
}
}

protected final void initDHCR218(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR218 = false;
} else {
DHCR218 = true;
}
}
}

protected final void initDHCR225(String s) {
if (!s.trim().isEmpty()) {
DHCR225 = Byte.parseByte(s);
} else {
DHCR225 = Byte.MIN_VALUE;
}
}

protected final void initDHCR226(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR226 = false;
} else {
DHCR226 = true;
}
}
}

protected final void initDHCR227(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR227 = false;
} else {
DHCR227 = true;
}
}
}

protected final void initDHCR228(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR228 = false;
} else {
DHCR228 = true;
}
}
}

protected final void initDHCR229(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR229 = false;
} else {
DHCR229 = true;
}
}
}

protected final void initDHCR230(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR230 = false;
} else {
DHCR230 = true;
}
}
}

protected final void initDHCR231(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR231 = false;
} else {
DHCR231 = true;
}
}
}

protected final void initDHCR232(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR232 = false;
} else {
DHCR232 = true;
}
}
}

protected final void initDHCR233(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR233 = false;
} else {
DHCR233 = true;
}
}
}

protected final void initDHCR234(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR234 = false;
} else {
DHCR234 = true;
}
}
}

protected final void initDHCR24(String s) {
if (!s.trim().isEmpty()) {
DHCR24 = Byte.parseByte(s);
} else {
DHCR24 = Byte.MIN_VALUE;
}
}

protected final void initDHCR25(String s) {
if (!s.trim().isEmpty()) {
DHCR25 = Byte.parseByte(s);
} else {
DHCR25 = Byte.MIN_VALUE;
}
}

protected final void initDHCR26(String s) {
if (!s.trim().isEmpty()) {
DHCR26 = Byte.parseByte(s);
} else {
DHCR26 = Byte.MIN_VALUE;
}
}

protected final void initDHCR40(String s) {
if (!s.trim().isEmpty()) {
DHCR40 = Byte.parseByte(s);
} else {
DHCR40 = Byte.MIN_VALUE;
}
}

protected final void initDHCR41(String s) {
if (!s.trim().isEmpty()) {
DHCR41 = Byte.parseByte(s);
} else {
DHCR41 = Byte.MIN_VALUE;
}
}

protected final void initDHCR42(String s) {
if (!s.trim().isEmpty()) {
DHCR42 = Byte.parseByte(s);
} else {
DHCR42 = Byte.MIN_VALUE;
}
}

protected final void initDHCR56(String s) {
if (!s.trim().isEmpty()) {
DHCR56 = Byte.parseByte(s);
} else {
DHCR56 = Byte.MIN_VALUE;
}
}

protected final void initDHCR57(String s) {
if (!s.trim().isEmpty()) {
DHCR57 = Byte.parseByte(s);
} else {
DHCR57 = Byte.MIN_VALUE;
}
}

protected final void initDHCR58(String s) {
if (!s.trim().isEmpty()) {
DHCR58 = Byte.parseByte(s);
} else {
DHCR58 = Byte.MIN_VALUE;
}
}

protected final void initDHCR72(String s) {
if (!s.trim().isEmpty()) {
DHCR72 = Byte.parseByte(s);
} else {
DHCR72 = Byte.MIN_VALUE;
}
}

protected final void initDHCR73(String s) {
if (!s.trim().isEmpty()) {
DHCR73 = Byte.parseByte(s);
} else {
DHCR73 = Byte.MIN_VALUE;
}
}

protected final void initDHCR74(String s) {
if (!s.trim().isEmpty()) {
DHCR74 = Byte.parseByte(s);
} else {
DHCR74 = Byte.MIN_VALUE;
}
}

protected final void initDHCR88(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR88 = false;
} else {
DHCR88 = true;
}
}
}

protected final void initDHCR89(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR89 = false;
} else {
DHCR89 = true;
}
}
}

protected final void initDHCR90(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR90 = false;
} else {
DHCR90 = true;
}
}
}

protected final void initDHCS14(String s) {
if (!s.trim().isEmpty()) {
DHCS14 = Byte.parseByte(s);
} else {
DHCS14 = Byte.MIN_VALUE;
}
}

protected final void initDHCS15(String s) {
if (!s.trim().isEmpty()) {
DHCS15 = Byte.parseByte(s);
} else {
DHCS15 = Byte.MIN_VALUE;
}
}

protected final void initDHDOBC(String s) {
if (!s.trim().isEmpty()) {
DHDOBC = Byte.parseByte(s);
} else {
DHDOBC = Byte.MIN_VALUE;
}
}

protected final void initDHDOBYR(String s) {
if (!s.trim().isEmpty()) {
DHDOBYR = Short.parseShort(s);
} else {
DHDOBYR = Short.MIN_VALUE;
}
}

protected final void initDHEACD(String s) {
if (!s.trim().isEmpty()) {
DHEACD = Byte.parseByte(s);
} else {
DHEACD = Byte.MIN_VALUE;
}
}

protected final void initDHEDIBAD(String s) {
if (!s.trim().isEmpty()) {
DHEDIBAD = Byte.parseByte(s);
} else {
DHEDIBAD = Byte.MIN_VALUE;
}
}

protected final void initDHEDIBAR(String s) {
if (!s.trim().isEmpty()) {
DHEDIBAR = Byte.parseByte(s);
} else {
DHEDIBAR = Byte.MIN_VALUE;
}
}

protected final void initDHEDIBAS(String s) {
if (!s.trim().isEmpty()) {
DHEDIBAS = Byte.parseByte(s);
} else {
DHEDIBAS = Byte.MIN_VALUE;
}
}

protected final void initDHEDIBCA(String s) {
if (!s.trim().isEmpty()) {
DHEDIBCA = Byte.parseByte(s);
} else {
DHEDIBCA = Byte.MIN_VALUE;
}
}

protected final void initDHEDIBDE(String s) {
if (!s.trim().isEmpty()) {
DHEDIBDE = Byte.parseByte(s);
} else {
DHEDIBDE = Byte.MIN_VALUE;
}
}

protected final void initDHEDIBLU(String s) {
if (!s.trim().isEmpty()) {
DHEDIBLU = Byte.parseByte(s);
} else {
DHEDIBLU = Byte.MIN_VALUE;
}
}

protected final void initDHEDIBOS(String s) {
if (!s.trim().isEmpty()) {
DHEDIBOS = Byte.parseByte(s);
} else {
DHEDIBOS = Byte.MIN_VALUE;
}
}

protected final void initDHEDIBPD(String s) {
if (!s.trim().isEmpty()) {
DHEDIBPD = Byte.parseByte(s);
} else {
DHEDIBPD = Byte.MIN_VALUE;
}
}

protected final void initDHEDIBPS(String s) {
if (!s.trim().isEmpty()) {
DHEDIBPS = Byte.parseByte(s);
} else {
DHEDIBPS = Byte.MIN_VALUE;
}
}

protected final void initDHEDIMAN(String s) {
if (!s.trim().isEmpty()) {
DHEDIMAN = Byte.parseByte(s);
} else {
DHEDIMAN = Byte.MIN_VALUE;
}
}

protected final void initDHEDIMAR(String s) {
if (!s.trim().isEmpty()) {
DHEDIMAR = Byte.parseByte(s);
} else {
DHEDIMAR = Byte.MIN_VALUE;
}
}

protected final void initDHEDIMBP(String s) {
if (!s.trim().isEmpty()) {
DHEDIMBP = Byte.parseByte(s);
} else {
DHEDIMBP = Byte.MIN_VALUE;
}
}

protected final void initDHEDIMCH(String s) {
if (!s.trim().isEmpty()) {
DHEDIMCH = Byte.parseByte(s);
} else {
DHEDIMCH = Byte.MIN_VALUE;
}
}

protected final void initDHEDIMDI(String s) {
if (!s.trim().isEmpty()) {
DHEDIMDI = Byte.parseByte(s);
} else {
DHEDIMDI = Byte.MIN_VALUE;
}
}

protected final void initDHEDIMHF(String s) {
if (!s.trim().isEmpty()) {
DHEDIMHF = Byte.parseByte(s);
} else {
DHEDIMHF = Byte.MIN_VALUE;
}
}

protected final void initDHEDIMHM(String s) {
if (!s.trim().isEmpty()) {
DHEDIMHM = Byte.parseByte(s);
} else {
DHEDIMHM = Byte.MIN_VALUE;
}
}

protected final void initDHEDIMMI(String s) {
if (!s.trim().isEmpty()) {
DHEDIMMI = Byte.parseByte(s);
} else {
DHEDIMMI = Byte.MIN_VALUE;
}
}

protected final void initDHEDIMST(String s) {
if (!s.trim().isEmpty()) {
DHEDIMST = Byte.parseByte(s);
} else {
DHEDIMST = Byte.MIN_VALUE;
}
}

protected final void initDHEOPTCA(String s) {
if (!s.trim().isEmpty()) {
DHEOPTCA = Byte.parseByte(s);
} else {
DHEOPTCA = Byte.MIN_VALUE;
}
}

protected final void initDHEOPTDI(String s) {
if (!s.trim().isEmpty()) {
DHEOPTDI = Byte.parseByte(s);
} else {
DHEOPTDI = Byte.MIN_VALUE;
}
}

protected final void initDHEOPTGL(String s) {
if (!s.trim().isEmpty()) {
DHEOPTGL = Byte.parseByte(s);
} else {
DHEOPTGL = Byte.MIN_VALUE;
}
}

protected final void initDHEOPTMD(String s) {
if (!s.trim().isEmpty()) {
DHEOPTMD = Byte.parseByte(s);
} else {
DHEOPTMD = Byte.MIN_VALUE;
}
}

protected final void initDHPA10(String s) {
if (!s.trim().isEmpty()) {
DHPA10 = Byte.parseByte(s);
} else {
DHPA10 = Byte.MIN_VALUE;
}
}

protected final void initDHPA11(String s) {
if (!s.trim().isEmpty()) {
DHPA11 = Byte.parseByte(s);
} else {
DHPA11 = Byte.MIN_VALUE;
}
}

protected final void initDHPA12(String s) {
if (!s.trim().isEmpty()) {
DHPA12 = Byte.parseByte(s);
} else {
DHPA12 = Byte.MIN_VALUE;
}
}

protected final void initDHPA13(String s) {
if (!s.trim().isEmpty()) {
DHPA13 = Byte.parseByte(s);
} else {
DHPA13 = Byte.MIN_VALUE;
}
}

protected final void initDHPA14(String s) {
if (!s.trim().isEmpty()) {
DHPA14 = Byte.parseByte(s);
} else {
DHPA14 = Byte.MIN_VALUE;
}
}

protected final void initDHPA15(String s) {
if (!s.trim().isEmpty()) {
DHPA15 = Byte.parseByte(s);
} else {
DHPA15 = Byte.MIN_VALUE;
}
}

protected final void initDHPA2(String s) {
if (!s.trim().isEmpty()) {
DHPA2 = Byte.parseByte(s);
} else {
DHPA2 = Byte.MIN_VALUE;
}
}

protected final void initDHPA3(String s) {
if (!s.trim().isEmpty()) {
DHPA3 = Byte.parseByte(s);
} else {
DHPA3 = Byte.MIN_VALUE;
}
}

protected final void initDHPA4(String s) {
if (!s.trim().isEmpty()) {
DHPA4 = Byte.parseByte(s);
} else {
DHPA4 = Byte.MIN_VALUE;
}
}

protected final void initDHPA5(String s) {
if (!s.trim().isEmpty()) {
DHPA5 = Byte.parseByte(s);
} else {
DHPA5 = Byte.MIN_VALUE;
}
}

protected final void initDHPA6(String s) {
if (!s.trim().isEmpty()) {
DHPA6 = Byte.parseByte(s);
} else {
DHPA6 = Byte.MIN_VALUE;
}
}

protected final void initDHPA7(String s) {
if (!s.trim().isEmpty()) {
DHPA7 = Byte.parseByte(s);
} else {
DHPA7 = Byte.MIN_VALUE;
}
}

protected final void initDHPA8(String s) {
if (!s.trim().isEmpty()) {
DHPA8 = Byte.parseByte(s);
} else {
DHPA8 = Byte.MIN_VALUE;
}
}

protected final void initDHPA9(String s) {
if (!s.trim().isEmpty()) {
DHPA9 = Byte.parseByte(s);
} else {
DHPA9 = Byte.MIN_VALUE;
}
}

protected final void initDHPB10(String s) {
if (!s.trim().isEmpty()) {
DHPB10 = Byte.parseByte(s);
} else {
DHPB10 = Byte.MIN_VALUE;
}
}

protected final void initDHPB11(String s) {
if (!s.trim().isEmpty()) {
DHPB11 = Byte.parseByte(s);
} else {
DHPB11 = Byte.MIN_VALUE;
}
}

protected final void initDHPB12(String s) {
if (!s.trim().isEmpty()) {
DHPB12 = Byte.parseByte(s);
} else {
DHPB12 = Byte.MIN_VALUE;
}
}

protected final void initDHPB13(String s) {
if (!s.trim().isEmpty()) {
DHPB13 = Byte.parseByte(s);
} else {
DHPB13 = Byte.MIN_VALUE;
}
}

protected final void initDHPB14(String s) {
if (!s.trim().isEmpty()) {
DHPB14 = Byte.parseByte(s);
} else {
DHPB14 = Byte.MIN_VALUE;
}
}

protected final void initDHPB15(String s) {
if (!s.trim().isEmpty()) {
DHPB15 = Byte.parseByte(s);
} else {
DHPB15 = Byte.MIN_VALUE;
}
}

protected final void initDHPB2(String s) {
if (!s.trim().isEmpty()) {
DHPB2 = Byte.parseByte(s);
} else {
DHPB2 = Byte.MIN_VALUE;
}
}

protected final void initDHPB3(String s) {
if (!s.trim().isEmpty()) {
DHPB3 = Byte.parseByte(s);
} else {
DHPB3 = Byte.MIN_VALUE;
}
}

protected final void initDHPB4(String s) {
if (!s.trim().isEmpty()) {
DHPB4 = Byte.parseByte(s);
} else {
DHPB4 = Byte.MIN_VALUE;
}
}

protected final void initDHPB5(String s) {
if (!s.trim().isEmpty()) {
DHPB5 = Byte.parseByte(s);
} else {
DHPB5 = Byte.MIN_VALUE;
}
}

protected final void initDHPB6(String s) {
if (!s.trim().isEmpty()) {
DHPB6 = Byte.parseByte(s);
} else {
DHPB6 = Byte.MIN_VALUE;
}
}

protected final void initDHPB7(String s) {
if (!s.trim().isEmpty()) {
DHPB7 = Byte.parseByte(s);
} else {
DHPB7 = Byte.MIN_VALUE;
}
}

protected final void initDHPB8(String s) {
if (!s.trim().isEmpty()) {
DHPB8 = Byte.parseByte(s);
} else {
DHPB8 = Byte.MIN_VALUE;
}
}

protected final void initDHPB9(String s) {
if (!s.trim().isEmpty()) {
DHPB9 = Byte.parseByte(s);
} else {
DHPB9 = Byte.MIN_VALUE;
}
}

protected final void initDHSEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
DHSEX = false;
} else {
DHSEX = true;
}
}
}

protected final void initDHWORK(String s) {
if (!s.trim().isEmpty()) {
DHWORK = Byte.parseByte(s);
} else {
DHWORK = Byte.MIN_VALUE;
}
}

protected final void initDIAGR(String s) {
if (!s.trim().isEmpty()) {
DIAGR = Byte.parseByte(s);
} else {
DIAGR = Byte.MIN_VALUE;
}
}

protected final void initDIDBNY(String s) {
if (!s.trim().isEmpty()) {
DIDBNY = Short.parseShort(s);
} else {
DIDBNY = Short.MIN_VALUE;
}
}

protected final void initDIDOB(String s) {
if (!s.trim().isEmpty()) {
DIDOB = Byte.parseByte(s);
} else {
DIDOB = Byte.MIN_VALUE;
}
}

protected final void initDIGNMYC(String s) {
if (!s.trim().isEmpty()) {
DIGNMYC = Byte.parseByte(s);
} else {
DIGNMYC = Byte.MIN_VALUE;
}
}

protected final void initDIKLIVC(String s) {
if (!s.trim().isEmpty()) {
DIKLIVC = Byte.parseByte(s);
} else {
DIKLIVC = Byte.MIN_VALUE;
}
}

protected final void initDIMAR(String s) {
if (!s.trim().isEmpty()) {
DIMAR = Byte.parseByte(s);
} else {
DIMAR = Byte.MIN_VALUE;
}
}

protected final void initDISEX(String s) {
if (!s.trim().isEmpty()) {
DISEX = Byte.parseByte(s);
} else {
DISEX = Byte.MIN_VALUE;
}
}

protected final void initDISEXC(String s) {
if (!s.trim().isEmpty()) {
DISEXC = Byte.parseByte(s);
} else {
DISEXC = Byte.MIN_VALUE;
}
}

protected final void initDISIBC(String s) {
if (!s.trim().isEmpty()) {
DISIBC = Byte.parseByte(s);
} else {
DISIBC = Byte.MIN_VALUE;
}
}

protected final void initDOBCHK(String s) {
if (!s.trim().isEmpty()) {
DOBCHK = Byte.parseByte(s);
} else {
DOBCHK = Byte.MIN_VALUE;
}
}

protected final void initEDQUAMIS(String s) {
if (!s.trim().isEmpty()) {
EDQUAMIS = Byte.parseByte(s);
} else {
EDQUAMIS = Byte.MIN_VALUE;
}
}

protected final void initERCAA(String s) {
if (!s.trim().isEmpty()) {
ERCAA = Byte.parseByte(s);
} else {
ERCAA = Byte.MIN_VALUE;
}
}

protected final void initERCABCH(String s) {
if (!s.trim().isEmpty()) {
ERCABCH = Byte.parseByte(s);
} else {
ERCABCH = Byte.MIN_VALUE;
}
}

protected final void initERCABFR(String s) {
if (!s.trim().isEmpty()) {
ERCABFR = Byte.parseByte(s);
} else {
ERCABFR = Byte.MIN_VALUE;
}
}

protected final void initERCABGC(String s) {
if (!s.trim().isEmpty()) {
ERCABGC = Byte.parseByte(s);
} else {
ERCABGC = Byte.MIN_VALUE;
}
}

protected final void initERCABOR(String s) {
if (!s.trim().isEmpty()) {
ERCABOR = Byte.parseByte(s);
} else {
ERCABOR = Byte.MIN_VALUE;
}
}

protected final void initERCABOT(String s) {
if (!s.trim().isEmpty()) {
ERCABOT = Byte.parseByte(s);
} else {
ERCABOT = Byte.MIN_VALUE;
}
}

protected final void initERCABPA(String s) {
if (!s.trim().isEmpty()) {
ERCABPA = Byte.parseByte(s);
} else {
ERCABPA = Byte.MIN_VALUE;
}
}

protected final void initERCABPL(String s) {
if (!s.trim().isEmpty()) {
ERCABPL = Byte.parseByte(s);
} else {
ERCABPL = Byte.MIN_VALUE;
}
}

protected final void initERCABSP(String s) {
if (!s.trim().isEmpty()) {
ERCABSP = Byte.parseByte(s);
} else {
ERCABSP = Byte.MIN_VALUE;
}
}

protected final void initERCAC(String s) {
if (!s.trim().isEmpty()) {
ERCAC = Short.parseShort(s);
} else {
ERCAC = Short.MIN_VALUE;
}
}

protected final void initERCADP1(String s) {
if (!s.trim().isEmpty()) {
ERCADP1 = Byte.parseByte(s);
} else {
ERCADP1 = Byte.MIN_VALUE;
}
}

protected final void initERCADP10(String s) {
if (!s.trim().isEmpty()) {
ERCADP10 = Byte.parseByte(s);
} else {
ERCADP10 = Byte.MIN_VALUE;
}
}

protected final void initERCADP11(String s) {
if (!s.trim().isEmpty()) {
ERCADP11 = Byte.parseByte(s);
} else {
ERCADP11 = Byte.MIN_VALUE;
}
}

protected final void initERCADP12(String s) {
if (!s.trim().isEmpty()) {
ERCADP12 = Byte.parseByte(s);
} else {
ERCADP12 = Byte.MIN_VALUE;
}
}

protected final void initERCADP2(String s) {
if (!s.trim().isEmpty()) {
ERCADP2 = Byte.parseByte(s);
} else {
ERCADP2 = Byte.MIN_VALUE;
}
}

protected final void initERCADP3(String s) {
if (!s.trim().isEmpty()) {
ERCADP3 = Byte.parseByte(s);
} else {
ERCADP3 = Byte.MIN_VALUE;
}
}

protected final void initERCADP4(String s) {
if (!s.trim().isEmpty()) {
ERCADP4 = Byte.parseByte(s);
} else {
ERCADP4 = Byte.MIN_VALUE;
}
}

protected final void initERCADP5(String s) {
if (!s.trim().isEmpty()) {
ERCADP5 = Byte.parseByte(s);
} else {
ERCADP5 = Byte.MIN_VALUE;
}
}

protected final void initERCADP6(String s) {
if (!s.trim().isEmpty()) {
ERCADP6 = Byte.parseByte(s);
} else {
ERCADP6 = Byte.MIN_VALUE;
}
}

protected final void initERCADP7(String s) {
if (!s.trim().isEmpty()) {
ERCADP7 = Byte.parseByte(s);
} else {
ERCADP7 = Byte.MIN_VALUE;
}
}

protected final void initERCADP8(String s) {
if (!s.trim().isEmpty()) {
ERCADP8 = Byte.parseByte(s);
} else {
ERCADP8 = Byte.MIN_VALUE;
}
}

protected final void initERCADP9(String s) {
if (!s.trim().isEmpty()) {
ERCADP9 = Byte.parseByte(s);
} else {
ERCADP9 = Byte.MIN_VALUE;
}
}

protected final void initERCALIVE(String s) {
if (!s.trim().isEmpty()) {
ERCALIVE = Byte.parseByte(s);
} else {
ERCALIVE = Byte.MIN_VALUE;
}
}

protected final void initERCAM85(String s) {
if (!s.trim().isEmpty()) {
ERCAM85 = Byte.parseByte(s);
} else {
ERCAM85 = Byte.MIN_VALUE;
}
}

protected final void initERCAM86(String s) {
if (!s.trim().isEmpty()) {
ERCAM86 = Byte.parseByte(s);
} else {
ERCAM86 = Byte.MIN_VALUE;
}
}

protected final void initERCAMCH(String s) {
if (!s.trim().isEmpty()) {
ERCAMCH = Byte.parseByte(s);
} else {
ERCAMCH = Byte.MIN_VALUE;
}
}

protected final void initERCAMFR(String s) {
if (!s.trim().isEmpty()) {
ERCAMFR = Byte.parseByte(s);
} else {
ERCAMFR = Byte.MIN_VALUE;
}
}

protected final void initERCAMGC(String s) {
if (!s.trim().isEmpty()) {
ERCAMGC = Byte.parseByte(s);
} else {
ERCAMGC = Byte.MIN_VALUE;
}
}

protected final void initERCAMOR(String s) {
if (!s.trim().isEmpty()) {
ERCAMOR = Byte.parseByte(s);
} else {
ERCAMOR = Byte.MIN_VALUE;
}
}

protected final void initERCAMOT(String s) {
if (!s.trim().isEmpty()) {
ERCAMOT = Byte.parseByte(s);
} else {
ERCAMOT = Byte.MIN_VALUE;
}
}

protected final void initERCAMPA(String s) {
if (!s.trim().isEmpty()) {
ERCAMPA = Byte.parseByte(s);
} else {
ERCAMPA = Byte.MIN_VALUE;
}
}

protected final void initERCAMPL(String s) {
if (!s.trim().isEmpty()) {
ERCAMPL = Byte.parseByte(s);
} else {
ERCAMPL = Byte.MIN_VALUE;
}
}

protected final void initERCAMSP(String s) {
if (!s.trim().isEmpty()) {
ERCAMSP = Byte.parseByte(s);
} else {
ERCAMSP = Byte.MIN_VALUE;
}
}

protected final void initERCANCH(String s) {
if (!s.trim().isEmpty()) {
ERCANCH = Byte.parseByte(s);
} else {
ERCANCH = Byte.MIN_VALUE;
}
}

protected final void initERCANFR(String s) {
if (!s.trim().isEmpty()) {
ERCANFR = Byte.parseByte(s);
} else {
ERCANFR = Byte.MIN_VALUE;
}
}

protected final void initERCANGC(String s) {
if (!s.trim().isEmpty()) {
ERCANGC = Byte.parseByte(s);
} else {
ERCANGC = Byte.MIN_VALUE;
}
}

protected final void initERCANOR(String s) {
if (!s.trim().isEmpty()) {
ERCANOR = Byte.parseByte(s);
} else {
ERCANOR = Byte.MIN_VALUE;
}
}

protected final void initERCANOT(String s) {
if (!s.trim().isEmpty()) {
ERCANOT = Byte.parseByte(s);
} else {
ERCANOT = Byte.MIN_VALUE;
}
}

protected final void initERCANPA(String s) {
if (!s.trim().isEmpty()) {
ERCANPA = Byte.parseByte(s);
} else {
ERCANPA = Byte.MIN_VALUE;
}
}

protected final void initERCANPL(String s) {
if (!s.trim().isEmpty()) {
ERCANPL = Byte.parseByte(s);
} else {
ERCANPL = Byte.MIN_VALUE;
}
}

protected final void initERCANSP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
ERCANSP = false;
} else {
ERCANSP = true;
}
}
}

protected final void initERCANTT(String s) {
if (!s.trim().isEmpty()) {
ERCANTT = Byte.parseByte(s);
} else {
ERCANTT = Byte.MIN_VALUE;
}
}

protected final void initERCARA(String s) {
if (!s.trim().isEmpty()) {
ERCARA = Byte.parseByte(s);
} else {
ERCARA = Byte.MIN_VALUE;
}
}

protected final void initERCARB(String s) {
if (!s.trim().isEmpty()) {
ERCARB = Byte.parseByte(s);
} else {
ERCARB = Byte.MIN_VALUE;
}
}

protected final void initERMOCAC(String s) {
if (!s.trim().isEmpty()) {
ERMOCAC = Byte.parseByte(s);
} else {
ERMOCAC = Byte.MIN_VALUE;
}
}

protected final void initERMOCFI(String s) {
if (!s.trim().isEmpty()) {
ERMOCFI = Byte.parseByte(s);
} else {
ERMOCFI = Byte.MIN_VALUE;
}
}

protected final void initERMOCMO(String s) {
if (!s.trim().isEmpty()) {
ERMOCMO = Byte.parseByte(s);
} else {
ERMOCMO = Byte.MIN_VALUE;
}
}

protected final void initERMOCNE(String s) {
if (!s.trim().isEmpty()) {
ERMOCNE = Byte.parseByte(s);
} else {
ERMOCNE = Byte.MIN_VALUE;
}
}

protected final void initERMOCNJ(String s) {
if (!s.trim().isEmpty()) {
ERMOCNJ = Byte.parseByte(s);
} else {
ERMOCNJ = Byte.MIN_VALUE;
}
}

protected final void initERMOCOB(String s) {
if (!s.trim().isEmpty()) {
ERMOCOB = Byte.parseByte(s);
} else {
ERMOCOB = Byte.MIN_VALUE;
}
}

protected final void initERMOCOT(String s) {
if (!s.trim().isEmpty()) {
ERMOCOT = Byte.parseByte(s);
} else {
ERMOCOT = Byte.MIN_VALUE;
}
}

protected final void initERMOCSK(String s) {
if (!s.trim().isEmpty()) {
ERMOCSK = Byte.parseByte(s);
} else {
ERMOCSK = Byte.MIN_VALUE;
}
}

protected final void initERMOCSO(String s) {
if (!s.trim().isEmpty()) {
ERMOCSO = Byte.parseByte(s);
} else {
ERMOCSO = Byte.MIN_VALUE;
}
}

protected final void initERMOCUS(String s) {
if (!s.trim().isEmpty()) {
ERMOCUS = Byte.parseByte(s);
} else {
ERMOCUS = Byte.MIN_VALUE;
}
}

protected final void initERMOVAC(String s) {
if (!s.trim().isEmpty()) {
ERMOVAC = Byte.parseByte(s);
} else {
ERMOVAC = Byte.MIN_VALUE;
}
}

protected final void initERMOVFI(String s) {
if (!s.trim().isEmpty()) {
ERMOVFI = Byte.parseByte(s);
} else {
ERMOVFI = Byte.MIN_VALUE;
}
}

protected final void initERMOVMO(String s) {
if (!s.trim().isEmpty()) {
ERMOVMO = Byte.parseByte(s);
} else {
ERMOVMO = Byte.MIN_VALUE;
}
}

protected final void initERMOVNE(String s) {
if (!s.trim().isEmpty()) {
ERMOVNE = Byte.parseByte(s);
} else {
ERMOVNE = Byte.MIN_VALUE;
}
}

protected final void initERMOVNJ(String s) {
if (!s.trim().isEmpty()) {
ERMOVNJ = Byte.parseByte(s);
} else {
ERMOVNJ = Byte.MIN_VALUE;
}
}

protected final void initERMOVOB(String s) {
if (!s.trim().isEmpty()) {
ERMOVOB = Byte.parseByte(s);
} else {
ERMOVOB = Byte.MIN_VALUE;
}
}

protected final void initERMOVOT(String s) {
if (!s.trim().isEmpty()) {
ERMOVOT = Byte.parseByte(s);
} else {
ERMOVOT = Byte.MIN_VALUE;
}
}

protected final void initERMOVSK(String s) {
if (!s.trim().isEmpty()) {
ERMOVSK = Byte.parseByte(s);
} else {
ERMOVSK = Byte.MIN_VALUE;
}
}

protected final void initERMOVSO(String s) {
if (!s.trim().isEmpty()) {
ERMOVSO = Byte.parseByte(s);
} else {
ERMOVSO = Byte.MIN_VALUE;
}
}

protected final void initERMOVUS(String s) {
if (!s.trim().isEmpty()) {
ERMOVUS = Byte.parseByte(s);
} else {
ERMOVUS = Byte.MIN_VALUE;
}
}

protected final void initERVOLA(String s) {
if (!s.trim().isEmpty()) {
ERVOLA = Byte.parseByte(s);
} else {
ERVOLA = Byte.MIN_VALUE;
}
}

protected final void initERVOLB(String s) {
if (!s.trim().isEmpty()) {
ERVOLB = Byte.parseByte(s);
} else {
ERVOLB = Byte.MIN_VALUE;
}
}

protected final void initEXLO90(String s) {
if (!s.trim().isEmpty()) {
EXLO90 = Byte.parseByte(s);
} else {
EXLO90 = Byte.MIN_VALUE;
}
}

protected final void initEXPWF(String s) {
if (!s.trim().isEmpty()) {
EXPWF = Byte.parseByte(s);
} else {
EXPWF = Byte.MIN_VALUE;
}
}

protected final void initEXREL96(String s) {
if (!s.trim().isEmpty()) {
EXREL96 = Byte.parseByte(s);
} else {
EXREL96 = Byte.MIN_VALUE;
}
}

protected final void initEXRELA(String s) {
if (!s.trim().isEmpty()) {
EXRELA = Byte.parseByte(s);
} else {
EXRELA = Byte.MIN_VALUE;
}
}

protected final void initEXRELB(String s) {
if (!s.trim().isEmpty()) {
EXRELB = Byte.parseByte(s);
} else {
EXRELB = Byte.MIN_VALUE;
}
}

protected final void initEXRELC(String s) {
if (!s.trim().isEmpty()) {
EXRELC = Byte.parseByte(s);
} else {
EXRELC = Byte.MIN_VALUE;
}
}

protected final void initEXRELD(String s) {
if (!s.trim().isEmpty()) {
EXRELD = Byte.parseByte(s);
} else {
EXRELD = Byte.MIN_VALUE;
}
}

protected final void initEXRELEDE(String s) {
if (!s.trim().isEmpty()) {
EXRELEDE = Byte.parseByte(s);
} else {
EXRELEDE = Byte.MIN_VALUE;
}
}

protected final void initEXRELEEL(String s) {
if (!s.trim().isEmpty()) {
EXRELEEL = Byte.parseByte(s);
} else {
EXRELEEL = Byte.MIN_VALUE;
}
}

protected final void initEXRELEFA(String s) {
if (!s.trim().isEmpty()) {
EXRELEFA = Byte.parseByte(s);
} else {
EXRELEFA = Byte.MIN_VALUE;
}
}

protected final void initEXRELEFO(String s) {
if (!s.trim().isEmpty()) {
EXRELEFO = Byte.parseByte(s);
} else {
EXRELEFO = Byte.MIN_VALUE;
}
}

protected final void initEXRELEHO(String s) {
if (!s.trim().isEmpty()) {
EXRELEHO = Byte.parseByte(s);
} else {
EXRELEHO = Byte.MIN_VALUE;
}
}

protected final void initEXRELEME(String s) {
if (!s.trim().isEmpty()) {
EXRELEME = Byte.parseByte(s);
} else {
EXRELEME = Byte.MIN_VALUE;
}
}

protected final void initEXRELEOU(String s) {
if (!s.trim().isEmpty()) {
EXRELEOU = Byte.parseByte(s);
} else {
EXRELEOU = Byte.MIN_VALUE;
}
}

protected final void initEXRELEPR(String s) {
if (!s.trim().isEmpty()) {
EXRELEPR = Byte.parseByte(s);
} else {
EXRELEPR = Byte.MIN_VALUE;
}
}

protected final void initEXRELETR(String s) {
if (!s.trim().isEmpty()) {
EXRELETR = Byte.parseByte(s);
} else {
EXRELETR = Byte.MIN_VALUE;
}
}

protected final void initFATHER(String s) {
if (!s.trim().isEmpty()) {
FATHER = Byte.parseByte(s);
} else {
FATHER = Byte.MIN_VALUE;
}
}

protected final void initFFCHAG1(String s) {
if (!s.trim().isEmpty()) {
FFCHAG1 = Byte.parseByte(s);
} else {
FFCHAG1 = Byte.MIN_VALUE;
}
}

protected final void initFFCHAG10(String s) {
if (!s.trim().isEmpty()) {
FFCHAG10 = Byte.parseByte(s);
} else {
FFCHAG10 = Byte.MIN_VALUE;
}
}

protected final void initFFCHAG11(String s) {
if (!s.trim().isEmpty()) {
FFCHAG11 = Byte.parseByte(s);
} else {
FFCHAG11 = Byte.MIN_VALUE;
}
}

protected final void initFFCHAG12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
FFCHAG12 = false;
} else {
FFCHAG12 = true;
}
}
}

protected final void initFFCHAG13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
FFCHAG13 = false;
} else {
FFCHAG13 = true;
}
}
}

protected final void initFFCHAG2(String s) {
if (!s.trim().isEmpty()) {
FFCHAG2 = Byte.parseByte(s);
} else {
FFCHAG2 = Byte.MIN_VALUE;
}
}

protected final void initFFCHAG3(String s) {
if (!s.trim().isEmpty()) {
FFCHAG3 = Byte.parseByte(s);
} else {
FFCHAG3 = Byte.MIN_VALUE;
}
}

protected final void initFFCHAG4(String s) {
if (!s.trim().isEmpty()) {
FFCHAG4 = Byte.parseByte(s);
} else {
FFCHAG4 = Byte.MIN_VALUE;
}
}

protected final void initFFCHAG5(String s) {
if (!s.trim().isEmpty()) {
FFCHAG5 = Byte.parseByte(s);
} else {
FFCHAG5 = Byte.MIN_VALUE;
}
}

protected final void initFFCHAG6(String s) {
if (!s.trim().isEmpty()) {
FFCHAG6 = Byte.parseByte(s);
} else {
FFCHAG6 = Byte.MIN_VALUE;
}
}

protected final void initFFCHAG7(String s) {
if (!s.trim().isEmpty()) {
FFCHAG7 = Byte.parseByte(s);
} else {
FFCHAG7 = Byte.MIN_VALUE;
}
}

protected final void initFFCHAG8(String s) {
if (!s.trim().isEmpty()) {
FFCHAG8 = Byte.parseByte(s);
} else {
FFCHAG8 = Byte.MIN_VALUE;
}
}

protected final void initFFCHAG9(String s) {
if (!s.trim().isEmpty()) {
FFCHAG9 = Byte.parseByte(s);
} else {
FFCHAG9 = Byte.MIN_VALUE;
}
}

protected final void initFFCHSX1(String s) {
if (!s.trim().isEmpty()) {
FFCHSX1 = Byte.parseByte(s);
} else {
FFCHSX1 = Byte.MIN_VALUE;
}
}

protected final void initFFCHSX10(String s) {
if (!s.trim().isEmpty()) {
FFCHSX10 = Byte.parseByte(s);
} else {
FFCHSX10 = Byte.MIN_VALUE;
}
}

protected final void initFFCHSX11(String s) {
if (!s.trim().isEmpty()) {
FFCHSX11 = Byte.parseByte(s);
} else {
FFCHSX11 = Byte.MIN_VALUE;
}
}

protected final void initFFCHSX12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
FFCHSX12 = false;
} else {
FFCHSX12 = true;
}
}
}

protected final void initFFCHSX13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
FFCHSX13 = false;
} else {
FFCHSX13 = true;
}
}
}

protected final void initFFCHSX2(String s) {
if (!s.trim().isEmpty()) {
FFCHSX2 = Byte.parseByte(s);
} else {
FFCHSX2 = Byte.MIN_VALUE;
}
}

protected final void initFFCHSX3(String s) {
if (!s.trim().isEmpty()) {
FFCHSX3 = Byte.parseByte(s);
} else {
FFCHSX3 = Byte.MIN_VALUE;
}
}

protected final void initFFCHSX4(String s) {
if (!s.trim().isEmpty()) {
FFCHSX4 = Byte.parseByte(s);
} else {
FFCHSX4 = Byte.MIN_VALUE;
}
}

protected final void initFFCHSX5(String s) {
if (!s.trim().isEmpty()) {
FFCHSX5 = Byte.parseByte(s);
} else {
FFCHSX5 = Byte.MIN_VALUE;
}
}

protected final void initFFCHSX6(String s) {
if (!s.trim().isEmpty()) {
FFCHSX6 = Byte.parseByte(s);
} else {
FFCHSX6 = Byte.MIN_VALUE;
}
}

protected final void initFFCHSX7(String s) {
if (!s.trim().isEmpty()) {
FFCHSX7 = Byte.parseByte(s);
} else {
FFCHSX7 = Byte.MIN_VALUE;
}
}

protected final void initFFCHSX8(String s) {
if (!s.trim().isEmpty()) {
FFCHSX8 = Byte.parseByte(s);
} else {
FFCHSX8 = Byte.MIN_VALUE;
}
}

protected final void initFFCHSX9(String s) {
if (!s.trim().isEmpty()) {
FFCHSX9 = Byte.parseByte(s);
} else {
FFCHSX9 = Byte.MIN_VALUE;
}
}

protected final void initFFCHVAR(String s) {
if (!s.trim().isEmpty()) {
FFCHVAR = Byte.parseByte(s);
} else {
FFCHVAR = Byte.MIN_VALUE;
}
}

protected final void initFFFTEAG(String s) {
if (!s.trim().isEmpty()) {
FFFTEAG = Byte.parseByte(s);
} else {
FFFTEAG = Byte.MIN_VALUE;
}
}

protected final void initFFRELT10(String s) {
if (!s.trim().isEmpty()) {
FFRELT10 = Byte.parseByte(s);
} else {
FFRELT10 = Byte.MIN_VALUE;
}
}

protected final void initFFRELT11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
FFRELT11 = false;
} else {
FFRELT11 = true;
}
}
}

protected final void initFFRELT12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
FFRELT12 = false;
} else {
FFRELT12 = true;
}
}
}

protected final void initFFRELT13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
FFRELT13 = false;
} else {
FFRELT13 = true;
}
}
}

protected final void initFFRELTX(String s) {
if (!s.trim().isEmpty()) {
FFRELTX = Byte.parseByte(s);
} else {
FFRELTX = Byte.MIN_VALUE;
}
}

protected final void initFFRELTX2(String s) {
if (!s.trim().isEmpty()) {
FFRELTX2 = Byte.parseByte(s);
} else {
FFRELTX2 = Byte.MIN_VALUE;
}
}

protected final void initFFRELTX3(String s) {
if (!s.trim().isEmpty()) {
FFRELTX3 = Byte.parseByte(s);
} else {
FFRELTX3 = Byte.MIN_VALUE;
}
}

protected final void initFFRELTX4(String s) {
if (!s.trim().isEmpty()) {
FFRELTX4 = Byte.parseByte(s);
} else {
FFRELTX4 = Byte.MIN_VALUE;
}
}

protected final void initFFRELTX5(String s) {
if (!s.trim().isEmpty()) {
FFRELTX5 = Byte.parseByte(s);
} else {
FFRELTX5 = Byte.MIN_VALUE;
}
}

protected final void initFFRELTX6(String s) {
if (!s.trim().isEmpty()) {
FFRELTX6 = Byte.parseByte(s);
} else {
FFRELTX6 = Byte.MIN_VALUE;
}
}

protected final void initFFRELTX7(String s) {
if (!s.trim().isEmpty()) {
FFRELTX7 = Byte.parseByte(s);
} else {
FFRELTX7 = Byte.MIN_VALUE;
}
}

protected final void initFFRELTX8(String s) {
if (!s.trim().isEmpty()) {
FFRELTX8 = Byte.parseByte(s);
} else {
FFRELTX8 = Byte.MIN_VALUE;
}
}

protected final void initFFRELTX9(String s) {
if (!s.trim().isEmpty()) {
FFRELTX9 = Byte.parseByte(s);
} else {
FFRELTX9 = Byte.MIN_VALUE;
}
}

protected final void initFINSTAT(String s) {
if (!s.trim().isEmpty()) {
FINSTAT = s;
}
}

protected final void initFQAQUA(String s) {
if (!s.trim().isEmpty()) {
FQAQUA = Byte.parseByte(s);
} else {
FQAQUA = Byte.MIN_VALUE;
}
}

protected final void initFQCBTHR(String s) {
if (!s.trim().isEmpty()) {
FQCBTHR = Byte.parseByte(s);
} else {
FQCBTHR = Byte.MIN_VALUE;
}
}

protected final void initFQCENG(String s) {
if (!s.trim().isEmpty()) {
FQCENG = Short.parseShort(s);
} else {
FQCENG = Short.MIN_VALUE;
}
}

protected final void initFQEND(String s) {
if (!s.trim().isEmpty()) {
FQEND = Byte.parseByte(s);
} else {
FQEND = Byte.MIN_VALUE;
}
}

protected final void initFQETHNR(String s) {
if (!s.trim().isEmpty()) {
FQETHNR = Byte.parseByte(s);
} else {
FQETHNR = Byte.MIN_VALUE;
}
}

protected final void initFQQUA95(String s) {
if (!s.trim().isEmpty()) {
FQQUA95 = Byte.parseByte(s);
} else {
FQQUA95 = Byte.MIN_VALUE;
}
}

protected final void initFQQUAALE(String s) {
if (!s.trim().isEmpty()) {
FQQUAALE = Byte.parseByte(s);
} else {
FQQUAALE = Byte.MIN_VALUE;
}
}

protected final void initFQQUAASL(String s) {
if (!s.trim().isEmpty()) {
FQQUAASL = Byte.parseByte(s);
} else {
FQQUAASL = Byte.MIN_VALUE;
}
}

protected final void initFQQUACGA(String s) {
if (!s.trim().isEmpty()) {
FQQUACGA = Byte.parseByte(s);
} else {
FQQUACGA = Byte.MIN_VALUE;
}
}

protected final void initFQQUACGF(String s) {
if (!s.trim().isEmpty()) {
FQQUACGF = Byte.parseByte(s);
} else {
FQQUACGF = Byte.MIN_VALUE;
}
}

protected final void initFQQUACGO(String s) {
if (!s.trim().isEmpty()) {
FQQUACGO = Byte.parseByte(s);
} else {
FQQUACGO = Byte.MIN_VALUE;
}
}

protected final void initFQQUACLE(String s) {
if (!s.trim().isEmpty()) {
FQQUACLE = Byte.parseByte(s);
} else {
FQQUACLE = Byte.MIN_VALUE;
}
}

protected final void initFQQUACS1(String s) {
if (!s.trim().isEmpty()) {
FQQUACS1 = Byte.parseByte(s);
} else {
FQQUACS1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUACS2(String s) {
if (!s.trim().isEmpty()) {
FQQUACS2 = Byte.parseByte(s);
} else {
FQQUACS2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUACSU(String s) {
if (!s.trim().isEmpty()) {
FQQUACSU = Byte.parseByte(s);
} else {
FQQUACSU = Byte.MIN_VALUE;
}
}

protected final void initFQQUADEG(String s) {
if (!s.trim().isEmpty()) {
FQQUADEG = Byte.parseByte(s);
} else {
FQQUADEG = Byte.MIN_VALUE;
}
}

protected final void initFQQUAGCA(String s) {
if (!s.trim().isEmpty()) {
FQQUAGCA = Byte.parseByte(s);
} else {
FQQUAGCA = Byte.MIN_VALUE;
}
}

protected final void initFQQUAGCD(String s) {
if (!s.trim().isEmpty()) {
FQQUAGCD = Byte.parseByte(s);
} else {
FQQUAGCD = Byte.MIN_VALUE;
}
}

protected final void initFQQUAHNC(String s) {
if (!s.trim().isEmpty()) {
FQQUAHNC = Byte.parseByte(s);
} else {
FQQUAHNC = Byte.MIN_VALUE;
}
}

protected final void initFQQUAMAT(String s) {
if (!s.trim().isEmpty()) {
FQQUAMAT = Byte.parseByte(s);
} else {
FQQUAMAT = Byte.MIN_VALUE;
}
}

protected final void initFQQUANUR(String s) {
if (!s.trim().isEmpty()) {
FQQUANUR = Byte.parseByte(s);
} else {
FQQUANUR = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV1(String s) {
if (!s.trim().isEmpty()) {
FQQUANV1 = Byte.parseByte(s);
} else {
FQQUANV1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV2(String s) {
if (!s.trim().isEmpty()) {
FQQUANV2 = Byte.parseByte(s);
} else {
FQQUANV2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV3(String s) {
if (!s.trim().isEmpty()) {
FQQUANV3 = Byte.parseByte(s);
} else {
FQQUANV3 = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV4(String s) {
if (!s.trim().isEmpty()) {
FQQUANV4 = Byte.parseByte(s);
} else {
FQQUANV4 = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV5(String s) {
if (!s.trim().isEmpty()) {
FQQUANV5 = Byte.parseByte(s);
} else {
FQQUANV5 = Byte.MIN_VALUE;
}
}

protected final void initFQQUAOLA(String s) {
if (!s.trim().isEmpty()) {
FQQUAOLA = Byte.parseByte(s);
} else {
FQQUAOLA = Byte.MIN_VALUE;
}
}

protected final void initFQQUAOLD(String s) {
if (!s.trim().isEmpty()) {
FQQUAOLD = Byte.parseByte(s);
} else {
FQQUAOLD = Byte.MIN_VALUE;
}
}

protected final void initFQQUAOLP(String s) {
if (!s.trim().isEmpty()) {
FQQUAOLP = Byte.parseByte(s);
} else {
FQQUAOLP = Byte.MIN_VALUE;
}
}

protected final void initFQQUAONC(String s) {
if (!s.trim().isEmpty()) {
FQQUAONC = Byte.parseByte(s);
} else {
FQQUAONC = Byte.MIN_VALUE;
}
}

protected final void initFQQUASLC(String s) {
if (!s.trim().isEmpty()) {
FQQUASLC = Byte.parseByte(s);
} else {
FQQUASLC = Byte.MIN_VALUE;
}
}

protected final void initFQQUASLL(String s) {
if (!s.trim().isEmpty()) {
FQQUASLL = Byte.parseByte(s);
} else {
FQQUASLL = Byte.MIN_VALUE;
}
}

protected final void initFQQUASUP(String s) {
if (!s.trim().isEmpty()) {
FQQUASUP = Byte.parseByte(s);
} else {
FQQUASUP = Byte.MIN_VALUE;
}
}

protected final void initFQQUATEA(String s) {
if (!s.trim().isEmpty()) {
FQQUATEA = Byte.parseByte(s);
} else {
FQQUATEA = Byte.MIN_VALUE;
}
}

protected final void initFQQUATRA(String s) {
if (!s.trim().isEmpty()) {
FQQUATRA = Byte.parseByte(s);
} else {
FQQUATRA = Byte.MIN_VALUE;
}
}

protected final void initFQQUM85(String s) {
if (!s.trim().isEmpty()) {
FQQUM85 = Byte.parseByte(s);
} else {
FQQUM85 = Byte.MIN_VALUE;
}
}

protected final void initFQQUM86(String s) {
if (!s.trim().isEmpty()) {
FQQUM86 = Byte.parseByte(s);
} else {
FQQUM86 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMALE(String s) {
if (!s.trim().isEmpty()) {
FQQUMALE = Byte.parseByte(s);
} else {
FQQUMALE = Byte.MIN_VALUE;
}
}

protected final void initFQQUMASL(String s) {
if (!s.trim().isEmpty()) {
FQQUMASL = Byte.parseByte(s);
} else {
FQQUMASL = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCGA(String s) {
if (!s.trim().isEmpty()) {
FQQUMCGA = Byte.parseByte(s);
} else {
FQQUMCGA = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCGF(String s) {
if (!s.trim().isEmpty()) {
FQQUMCGF = Byte.parseByte(s);
} else {
FQQUMCGF = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCGO(String s) {
if (!s.trim().isEmpty()) {
FQQUMCGO = Byte.parseByte(s);
} else {
FQQUMCGO = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCLE(String s) {
if (!s.trim().isEmpty()) {
FQQUMCLE = Byte.parseByte(s);
} else {
FQQUMCLE = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCS1(String s) {
if (!s.trim().isEmpty()) {
FQQUMCS1 = Byte.parseByte(s);
} else {
FQQUMCS1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCS2(String s) {
if (!s.trim().isEmpty()) {
FQQUMCS2 = Byte.parseByte(s);
} else {
FQQUMCS2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCSU(String s) {
if (!s.trim().isEmpty()) {
FQQUMCSU = Byte.parseByte(s);
} else {
FQQUMCSU = Byte.MIN_VALUE;
}
}

protected final void initFQQUMDEG(String s) {
if (!s.trim().isEmpty()) {
FQQUMDEG = Byte.parseByte(s);
} else {
FQQUMDEG = Byte.MIN_VALUE;
}
}

protected final void initFQQUMDIP(String s) {
if (!s.trim().isEmpty()) {
FQQUMDIP = Byte.parseByte(s);
} else {
FQQUMDIP = Byte.MIN_VALUE;
}
}

protected final void initFQQUMFOR(String s) {
if (!s.trim().isEmpty()) {
FQQUMFOR = Byte.parseByte(s);
} else {
FQQUMFOR = Byte.MIN_VALUE;
}
}

protected final void initFQQUMGCA(String s) {
if (!s.trim().isEmpty()) {
FQQUMGCA = Byte.parseByte(s);
} else {
FQQUMGCA = Byte.MIN_VALUE;
}
}

protected final void initFQQUMGCD(String s) {
if (!s.trim().isEmpty()) {
FQQUMGCD = Byte.parseByte(s);
} else {
FQQUMGCD = Byte.MIN_VALUE;
}
}

protected final void initFQQUMHNC(String s) {
if (!s.trim().isEmpty()) {
FQQUMHNC = Byte.parseByte(s);
} else {
FQQUMHNC = Byte.MIN_VALUE;
}
}

protected final void initFQQUMMAT(String s) {
if (!s.trim().isEmpty()) {
FQQUMMAT = Byte.parseByte(s);
} else {
FQQUMMAT = Byte.MIN_VALUE;
}
}

protected final void initFQQUMMIL(String s) {
if (!s.trim().isEmpty()) {
FQQUMMIL = Byte.parseByte(s);
} else {
FQQUMMIL = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNNE(String s) {
if (!s.trim().isEmpty()) {
FQQUMNNE = Byte.parseByte(s);
} else {
FQQUMNNE = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNUR(String s) {
if (!s.trim().isEmpty()) {
FQQUMNUR = Byte.parseByte(s);
} else {
FQQUMNUR = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV1(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV1 = Byte.parseByte(s);
} else {
FQQUMNV1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV2(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV2 = Byte.parseByte(s);
} else {
FQQUMNV2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV3(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV3 = Byte.parseByte(s);
} else {
FQQUMNV3 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV4(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV4 = Byte.parseByte(s);
} else {
FQQUMNV4 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV5(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV5 = Byte.parseByte(s);
} else {
FQQUMNV5 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNVZ(String s) {
if (!s.trim().isEmpty()) {
FQQUMNVZ = Byte.parseByte(s);
} else {
FQQUMNVZ = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOAC(String s) {
if (!s.trim().isEmpty()) {
FQQUMOAC = Byte.parseByte(s);
} else {
FQQUMOAC = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOLA(String s) {
if (!s.trim().isEmpty()) {
FQQUMOLA = Byte.parseByte(s);
} else {
FQQUMOLA = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOLD(String s) {
if (!s.trim().isEmpty()) {
FQQUMOLD = Byte.parseByte(s);
} else {
FQQUMOLD = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOLP(String s) {
if (!s.trim().isEmpty()) {
FQQUMOLP = Byte.parseByte(s);
} else {
FQQUMOLP = Byte.MIN_VALUE;
}
}

protected final void initFQQUMONC(String s) {
if (!s.trim().isEmpty()) {
FQQUMONC = Byte.parseByte(s);
} else {
FQQUMONC = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOPR(String s) {
if (!s.trim().isEmpty()) {
FQQUMOPR = Byte.parseByte(s);
} else {
FQQUMOPR = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOVO(String s) {
if (!s.trim().isEmpty()) {
FQQUMOVO = Byte.parseByte(s);
} else {
FQQUMOVO = Byte.MIN_VALUE;
}
}

protected final void initFQQUMSLC(String s) {
if (!s.trim().isEmpty()) {
FQQUMSLC = Byte.parseByte(s);
} else {
FQQUMSLC = Byte.MIN_VALUE;
}
}

protected final void initFQQUMSLL(String s) {
if (!s.trim().isEmpty()) {
FQQUMSLL = Byte.parseByte(s);
} else {
FQQUMSLL = Byte.MIN_VALUE;
}
}

protected final void initFQQUMSUP(String s) {
if (!s.trim().isEmpty()) {
FQQUMSUP = Byte.parseByte(s);
} else {
FQQUMSUP = Byte.MIN_VALUE;
}
}

protected final void initFQQUMTEA(String s) {
if (!s.trim().isEmpty()) {
FQQUMTEA = Byte.parseByte(s);
} else {
FQQUMTEA = Byte.MIN_VALUE;
}
}

protected final void initFQQUMTRA(String s) {
if (!s.trim().isEmpty()) {
FQQUMTRA = Byte.parseByte(s);
} else {
FQQUMTRA = Byte.MIN_VALUE;
}
}

protected final void initFST_TM(String s) {
if (!s.trim().isEmpty()) {
FST_TM = Double.parseDouble(s);
} else {
FST_TM = Double.NaN;
}
}

protected final void initFTHAGD(String s) {
if (!s.trim().isEmpty()) {
FTHAGD = Byte.parseByte(s);
} else {
FTHAGD = Byte.MIN_VALUE;
}
}

protected final void initGCINHH(String s) {
if (!s.trim().isEmpty()) {
GCINHH = Byte.parseByte(s);
} else {
GCINHH = Byte.MIN_VALUE;
}
}

protected final void initGTSPD_AG(String s) {
if (!s.trim().isEmpty()) {
GTSPD_AG = Byte.parseByte(s);
} else {
GTSPD_AG = Byte.MIN_VALUE;
}
}

protected final void initGTSPD_AV(String s) {
if (!s.trim().isEmpty()) {
GTSPD_AV = Double.parseDouble(s);
} else {
GTSPD_AV = Double.NaN;
}
}

protected final void initGTSPD_ID(String s) {
if (!s.trim().isEmpty()) {
GTSPD_ID = Byte.parseByte(s);
} else {
GTSPD_ID = Byte.MIN_VALUE;
}
}

protected final void initHEACE(String s) {
if (!s.trim().isEmpty()) {
HEACE = Byte.parseByte(s);
} else {
HEACE = Byte.MIN_VALUE;
}
}

protected final void initHEACEA(String s) {
if (!s.trim().isEmpty()) {
HEACEA = Byte.parseByte(s);
} else {
HEACEA = Byte.MIN_VALUE;
}
}

protected final void initHEAGAR(String s) {
if (!s.trim().isEmpty()) {
HEAGAR = Byte.parseByte(s);
} else {
HEAGAR = Byte.MIN_VALUE;
}
}

protected final void initHEAGARY(String s) {
if (!s.trim().isEmpty()) {
HEAGARY = Short.parseShort(s);
} else {
HEAGARY = Short.MIN_VALUE;
}
}

protected final void initHEAGBR(String s) {
if (!s.trim().isEmpty()) {
HEAGBR = Byte.parseByte(s);
} else {
HEAGBR = Byte.MIN_VALUE;
}
}

protected final void initHEAGBRY(String s) {
if (!s.trim().isEmpty()) {
HEAGBRY = Short.parseShort(s);
} else {
HEAGBRY = Short.MIN_VALUE;
}
}

protected final void initHEAGCR(String s) {
if (!s.trim().isEmpty()) {
HEAGCR = Byte.parseByte(s);
} else {
HEAGCR = Byte.MIN_VALUE;
}
}

protected final void initHEAGCRY(String s) {
if (!s.trim().isEmpty()) {
HEAGCRY = Short.parseShort(s);
} else {
HEAGCRY = Short.MIN_VALUE;
}
}

protected final void initHEAGDR(String s) {
if (!s.trim().isEmpty()) {
HEAGDR = Byte.parseByte(s);
} else {
HEAGDR = Byte.MIN_VALUE;
}
}

protected final void initHEAGDRY(String s) {
if (!s.trim().isEmpty()) {
HEAGDRY = Short.parseShort(s);
} else {
HEAGDRY = Short.MIN_VALUE;
}
}

protected final void initHEAGER(String s) {
if (!s.trim().isEmpty()) {
HEAGER = Byte.parseByte(s);
} else {
HEAGER = Byte.MIN_VALUE;
}
}

protected final void initHEAGERY(String s) {
if (!s.trim().isEmpty()) {
HEAGERY = Short.parseShort(s);
} else {
HEAGERY = Short.MIN_VALUE;
}
}

protected final void initHEAGFR(String s) {
if (!s.trim().isEmpty()) {
HEAGFR = Byte.parseByte(s);
} else {
HEAGFR = Byte.MIN_VALUE;
}
}

protected final void initHEAGFRY(String s) {
if (!s.trim().isEmpty()) {
HEAGFRY = Short.parseShort(s);
} else {
HEAGFRY = Short.MIN_VALUE;
}
}

protected final void initHEAGG(String s) {
if (!s.trim().isEmpty()) {
HEAGG = Byte.parseByte(s);
} else {
HEAGG = Byte.MIN_VALUE;
}
}

protected final void initHEAGGR(String s) {
if (!s.trim().isEmpty()) {
HEAGGR = Byte.parseByte(s);
} else {
HEAGGR = Byte.MIN_VALUE;
}
}

protected final void initHEAGGRY(String s) {
if (!s.trim().isEmpty()) {
HEAGGRY = Short.parseShort(s);
} else {
HEAGGRY = Short.MIN_VALUE;
}
}

protected final void initHEAGH(String s) {
if (!s.trim().isEmpty()) {
HEAGH = Byte.parseByte(s);
} else {
HEAGH = Byte.MIN_VALUE;
}
}

protected final void initHEAGHR(String s) {
if (!s.trim().isEmpty()) {
HEAGHR = Byte.parseByte(s);
} else {
HEAGHR = Byte.MIN_VALUE;
}
}

protected final void initHEAGHRY(String s) {
if (!s.trim().isEmpty()) {
HEAGHRY = Short.parseShort(s);
} else {
HEAGHRY = Short.MIN_VALUE;
}
}

protected final void initHEAGIR(String s) {
if (!s.trim().isEmpty()) {
HEAGIR = Byte.parseByte(s);
} else {
HEAGIR = Byte.MIN_VALUE;
}
}

protected final void initHEAGIRY(String s) {
if (!s.trim().isEmpty()) {
HEAGIRY = Short.parseShort(s);
} else {
HEAGIRY = Short.MIN_VALUE;
}
}

protected final void initHEAGJR(String s) {
if (!s.trim().isEmpty()) {
HEAGJR = Byte.parseByte(s);
} else {
HEAGJR = Byte.MIN_VALUE;
}
}

protected final void initHEAGJRY(String s) {
if (!s.trim().isEmpty()) {
HEAGJRY = Short.parseShort(s);
} else {
HEAGJRY = Short.MIN_VALUE;
}
}

protected final void initHEAGK(String s) {
if (!s.trim().isEmpty()) {
HEAGK = Byte.parseByte(s);
} else {
HEAGK = Byte.MIN_VALUE;
}
}

protected final void initHEAGKR(String s) {
if (!s.trim().isEmpty()) {
HEAGKR = Byte.parseByte(s);
} else {
HEAGKR = Byte.MIN_VALUE;
}
}

protected final void initHEAGKRY(String s) {
if (!s.trim().isEmpty()) {
HEAGKRY = Short.parseShort(s);
} else {
HEAGKRY = Short.MIN_VALUE;
}
}

protected final void initHEAID96(String s) {
if (!s.trim().isEmpty()) {
HEAID96 = Byte.parseByte(s);
} else {
HEAID96 = Byte.MIN_VALUE;
}
}

protected final void initHEAIDAL(String s) {
if (!s.trim().isEmpty()) {
HEAIDAL = Byte.parseByte(s);
} else {
HEAIDAL = Byte.MIN_VALUE;
}
}

protected final void initHEAIDBU(String s) {
if (!s.trim().isEmpty()) {
HEAIDBU = Byte.parseByte(s);
} else {
HEAIDBU = Byte.MIN_VALUE;
}
}

protected final void initHEAIDCA(String s) {
if (!s.trim().isEmpty()) {
HEAIDCA = Byte.parseByte(s);
} else {
HEAIDCA = Byte.MIN_VALUE;
}
}

protected final void initHEAIDCR(String s) {
if (!s.trim().isEmpty()) {
HEAIDCR = Byte.parseByte(s);
} else {
HEAIDCR = Byte.MIN_VALUE;
}
}

protected final void initHEAIDEA(String s) {
if (!s.trim().isEmpty()) {
HEAIDEA = Byte.parseByte(s);
} else {
HEAIDEA = Byte.MIN_VALUE;
}
}

protected final void initHEAIDEW(String s) {
if (!s.trim().isEmpty()) {
HEAIDEW = Byte.parseByte(s);
} else {
HEAIDEW = Byte.MIN_VALUE;
}
}

protected final void initHEAIDMW(String s) {
if (!s.trim().isEmpty()) {
HEAIDMW = Byte.parseByte(s);
} else {
HEAIDMW = Byte.MIN_VALUE;
}
}

protected final void initHEAIDZI(String s) {
if (!s.trim().isEmpty()) {
HEAIDZI = Byte.parseByte(s);
} else {
HEAIDZI = Byte.MIN_VALUE;
}
}

protected final void initHEAMB(String s) {
if (!s.trim().isEmpty()) {
HEAMB = Byte.parseByte(s);
} else {
HEAMB = Byte.MIN_VALUE;
}
}

protected final void initHEANA(String s) {
if (!s.trim().isEmpty()) {
HEANA = Byte.parseByte(s);
} else {
HEANA = Byte.MIN_VALUE;
}
}

protected final void initHEANB(String s) {
if (!s.trim().isEmpty()) {
HEANB = Byte.parseByte(s);
} else {
HEANB = Byte.MIN_VALUE;
}
}

protected final void initHEANC(String s) {
if (!s.trim().isEmpty()) {
HEANC = Byte.parseByte(s);
} else {
HEANC = Byte.MIN_VALUE;
}
}

protected final void initHEAND(String s) {
if (!s.trim().isEmpty()) {
HEAND = Byte.parseByte(s);
} else {
HEAND = Byte.MIN_VALUE;
}
}

protected final void initHEAND1(String s) {
if (!s.trim().isEmpty()) {
HEAND1 = Byte.parseByte(s);
} else {
HEAND1 = Byte.MIN_VALUE;
}
}

protected final void initHEANE(String s) {
if (!s.trim().isEmpty()) {
HEANE = Byte.parseByte(s);
} else {
HEANE = Byte.MIN_VALUE;
}
}

protected final void initHEANF(String s) {
if (!s.trim().isEmpty()) {
HEANF = Byte.parseByte(s);
} else {
HEANF = Byte.MIN_VALUE;
}
}

protected final void initHEANG(String s) {
if (!s.trim().isEmpty()) {
HEANG = Byte.parseByte(s);
} else {
HEANG = Byte.MIN_VALUE;
}
}

protected final void initHEANH(String s) {
if (!s.trim().isEmpty()) {
HEANH = Byte.parseByte(s);
} else {
HEANH = Byte.MIN_VALUE;
}
}

protected final void initHEANILS(String s) {
if (!s.trim().isEmpty()) {
HEANILS = Byte.parseByte(s);
} else {
HEANILS = Byte.MIN_VALUE;
}
}

protected final void initHEANIM86(String s) {
if (!s.trim().isEmpty()) {
HEANIM86 = Byte.parseByte(s);
} else {
HEANIM86 = Byte.MIN_VALUE;
}
}

protected final void initHEANIUS(String s) {
if (!s.trim().isEmpty()) {
HEANIUS = Byte.parseByte(s);
} else {
HEANIUS = Byte.MIN_VALUE;
}
}

protected final void initHEANK(String s) {
if (!s.trim().isEmpty()) {
HEANK = Byte.parseByte(s);
} else {
HEANK = Byte.MIN_VALUE;
}
}

protected final void initHEANM85(String s) {
if (!s.trim().isEmpty()) {
HEANM85 = Byte.parseByte(s);
} else {
HEANM85 = Byte.MIN_VALUE;
}
}

protected final void initHEANMLA(String s) {
if (!s.trim().isEmpty()) {
HEANMLA = Byte.parseByte(s);
} else {
HEANMLA = Byte.MIN_VALUE;
}
}

protected final void initHEANMLC(String s) {
if (!s.trim().isEmpty()) {
HEANMLC = Byte.parseByte(s);
} else {
HEANMLC = Byte.MIN_VALUE;
}
}

protected final void initHEANMLS(String s) {
if (!s.trim().isEmpty()) {
HEANMLS = Byte.parseByte(s);
} else {
HEANMLS = Byte.MIN_VALUE;
}
}

protected final void initHEANMRA(String s) {
if (!s.trim().isEmpty()) {
HEANMRA = Byte.parseByte(s);
} else {
HEANMRA = Byte.MIN_VALUE;
}
}

protected final void initHEANMRC(String s) {
if (!s.trim().isEmpty()) {
HEANMRC = Byte.parseByte(s);
} else {
HEANMRC = Byte.MIN_VALUE;
}
}

protected final void initHEANMUS(String s) {
if (!s.trim().isEmpty()) {
HEANMUS = Byte.parseByte(s);
} else {
HEANMUS = Byte.MIN_VALUE;
}
}

protected final void initHEANS95(String s) {
if (!s.trim().isEmpty()) {
HEANS95 = Byte.parseByte(s);
} else {
HEANS95 = Byte.MIN_VALUE;
}
}

protected final void initHEANSLA(String s) {
if (!s.trim().isEmpty()) {
HEANSLA = Byte.parseByte(s);
} else {
HEANSLA = Byte.MIN_VALUE;
}
}

protected final void initHEANSLC(String s) {
if (!s.trim().isEmpty()) {
HEANSLC = Byte.parseByte(s);
} else {
HEANSLC = Byte.MIN_VALUE;
}
}

protected final void initHEANSRA(String s) {
if (!s.trim().isEmpty()) {
HEANSRA = Byte.parseByte(s);
} else {
HEANSRA = Byte.MIN_VALUE;
}
}

protected final void initHEANSRC(String s) {
if (!s.trim().isEmpty()) {
HEANSRC = Byte.parseByte(s);
} else {
HEANSRC = Byte.MIN_VALUE;
}
}

protected final void initHEARTA(String s) {
if (!s.trim().isEmpty()) {
HEARTA = Byte.parseByte(s);
} else {
HEARTA = Byte.MIN_VALUE;
}
}

protected final void initHEARTB(String s) {
if (!s.trim().isEmpty()) {
HEARTB = Byte.parseByte(s);
} else {
HEARTB = Byte.MIN_VALUE;
}
}

protected final void initHEARTC(String s) {
if (!s.trim().isEmpty()) {
HEARTC = Byte.parseByte(s);
} else {
HEARTC = Byte.MIN_VALUE;
}
}

protected final void initHEARTD(String s) {
if (!s.trim().isEmpty()) {
HEARTD = Byte.parseByte(s);
} else {
HEARTD = Byte.MIN_VALUE;
}
}

protected final void initHEARTE(String s) {
if (!s.trim().isEmpty()) {
HEARTE = Byte.parseByte(s);
} else {
HEARTE = Byte.MIN_VALUE;
}
}

protected final void initHEARTOA(String s) {
if (!s.trim().isEmpty()) {
HEARTOA = Byte.parseByte(s);
} else {
HEARTOA = Byte.MIN_VALUE;
}
}

protected final void initHEARTOT(String s) {
if (!s.trim().isEmpty()) {
HEARTOT = Byte.parseByte(s);
} else {
HEARTOT = Byte.MIN_VALUE;
}
}

protected final void initHEARTRA(String s) {
if (!s.trim().isEmpty()) {
HEARTRA = Byte.parseByte(s);
} else {
HEARTRA = Byte.MIN_VALUE;
}
}

protected final void initHEBPCHK(String s) {
if (!s.trim().isEmpty()) {
HEBPCHK = Byte.parseByte(s);
} else {
HEBPCHK = Byte.MIN_VALUE;
}
}

protected final void initHECANAA(String s) {
if (!s.trim().isEmpty()) {
HECANAA = Byte.parseByte(s);
} else {
HECANAA = Byte.MIN_VALUE;
}
}

protected final void initHECANBB(String s) {
if (!s.trim().isEmpty()) {
HECANBB = Byte.parseByte(s);
} else {
HECANBB = Byte.MIN_VALUE;
}
}

protected final void initHECDA(String s) {
if (!s.trim().isEmpty()) {
HECDA = Byte.parseByte(s);
} else {
HECDA = Byte.MIN_VALUE;
}
}

protected final void initHECDB(String s) {
if (!s.trim().isEmpty()) {
HECDB = Byte.parseByte(s);
} else {
HECDB = Byte.MIN_VALUE;
}
}

protected final void initHECDC(String s) {
if (!s.trim().isEmpty()) {
HECDC = Byte.parseByte(s);
} else {
HECDC = Byte.MIN_VALUE;
}
}

protected final void initHECDD(String s) {
if (!s.trim().isEmpty()) {
HECDD = Byte.parseByte(s);
} else {
HECDD = Byte.MIN_VALUE;
}
}

protected final void initHECDD1(String s) {
if (!s.trim().isEmpty()) {
HECDD1 = Byte.parseByte(s);
} else {
HECDD1 = Byte.MIN_VALUE;
}
}

protected final void initHECDE(String s) {
if (!s.trim().isEmpty()) {
HECDE = Byte.parseByte(s);
} else {
HECDE = Byte.MIN_VALUE;
}
}

protected final void initHECDFCA(String s) {
if (!s.trim().isEmpty()) {
HECDFCA = Byte.parseByte(s);
} else {
HECDFCA = Byte.MIN_VALUE;
}
}

protected final void initHECDFOT(String s) {
if (!s.trim().isEmpty()) {
HECDFOT = Byte.parseByte(s);
} else {
HECDFOT = Byte.MIN_VALUE;
}
}

protected final void initHECDFTH(String s) {
if (!s.trim().isEmpty()) {
HECDFTH = Byte.parseByte(s);
} else {
HECDFTH = Byte.MIN_VALUE;
}
}

protected final void initHECHMD(String s) {
if (!s.trim().isEmpty()) {
HECHMD = Byte.parseByte(s);
} else {
HECHMD = Byte.MIN_VALUE;
}
}

protected final void initHECHME(String s) {
if (!s.trim().isEmpty()) {
HECHME = Byte.parseByte(s);
} else {
HECHME = Byte.MIN_VALUE;
}
}

protected final void initHECLUB1(String s) {
if (!s.trim().isEmpty()) {
HECLUB1 = Byte.parseByte(s);
} else {
HECLUB1 = Byte.MIN_VALUE;
}
}

protected final void initHECLUB2(String s) {
if (!s.trim().isEmpty()) {
HECLUB2 = Byte.parseByte(s);
} else {
HECLUB2 = Byte.MIN_VALUE;
}
}

protected final void initHECLUB3(String s) {
if (!s.trim().isEmpty()) {
HECLUB3 = Byte.parseByte(s);
} else {
HECLUB3 = Byte.MIN_VALUE;
}
}

protected final void initHECLUB96(String s) {
if (!s.trim().isEmpty()) {
HECLUB96 = Byte.parseByte(s);
} else {
HECLUB96 = Byte.MIN_VALUE;
}
}

protected final void initHEDACAN(String s) {
if (!s.trim().isEmpty()) {
HEDACAN = Byte.parseByte(s);
} else {
HEDACAN = Byte.MIN_VALUE;
}
}

protected final void initHEDACAR(String s) {
if (!s.trim().isEmpty()) {
HEDACAR = Byte.parseByte(s);
} else {
HEDACAR = Byte.MIN_VALUE;
}
}

protected final void initHEDACBP(String s) {
if (!s.trim().isEmpty()) {
HEDACBP = Byte.parseByte(s);
} else {
HEDACBP = Byte.MIN_VALUE;
}
}

protected final void initHEDACCH(String s) {
if (!s.trim().isEmpty()) {
HEDACCH = Byte.parseByte(s);
} else {
HEDACCH = Byte.MIN_VALUE;
}
}

protected final void initHEDACDI(String s) {
if (!s.trim().isEmpty()) {
HEDACDI = Byte.parseByte(s);
} else {
HEDACDI = Byte.MIN_VALUE;
}
}

protected final void initHEDACHF(String s) {
if (!s.trim().isEmpty()) {
HEDACHF = Byte.parseByte(s);
} else {
HEDACHF = Byte.MIN_VALUE;
}
}

protected final void initHEDACHM(String s) {
if (!s.trim().isEmpty()) {
HEDACHM = Byte.parseByte(s);
} else {
HEDACHM = Byte.MIN_VALUE;
}
}

protected final void initHEDACMI(String s) {
if (!s.trim().isEmpty()) {
HEDACMI = Byte.parseByte(s);
} else {
HEDACMI = Byte.MIN_VALUE;
}
}

protected final void initHEDACOT(String s) {
if (!s.trim().isEmpty()) {
HEDACOT = Byte.parseByte(s);
} else {
HEDACOT = Byte.MIN_VALUE;
}
}

protected final void initHEDACST(String s) {
if (!s.trim().isEmpty()) {
HEDACST = Byte.parseByte(s);
} else {
HEDACST = Byte.MIN_VALUE;
}
}

protected final void initHEDANAN(String s) {
if (!s.trim().isEmpty()) {
HEDANAN = Byte.parseByte(s);
} else {
HEDANAN = Byte.MIN_VALUE;
}
}

protected final void initHEDANAR(String s) {
if (!s.trim().isEmpty()) {
HEDANAR = Byte.parseByte(s);
} else {
HEDANAR = Byte.MIN_VALUE;
}
}

protected final void initHEDANBP(String s) {
if (!s.trim().isEmpty()) {
HEDANBP = Byte.parseByte(s);
} else {
HEDANBP = Byte.MIN_VALUE;
}
}

protected final void initHEDANCH(String s) {
if (!s.trim().isEmpty()) {
HEDANCH = Byte.parseByte(s);
} else {
HEDANCH = Byte.MIN_VALUE;
}
}

protected final void initHEDANDI(String s) {
if (!s.trim().isEmpty()) {
HEDANDI = Byte.parseByte(s);
} else {
HEDANDI = Byte.MIN_VALUE;
}
}

protected final void initHEDANHF(String s) {
if (!s.trim().isEmpty()) {
HEDANHF = Byte.parseByte(s);
} else {
HEDANHF = Byte.MIN_VALUE;
}
}

protected final void initHEDANHM(String s) {
if (!s.trim().isEmpty()) {
HEDANHM = Byte.parseByte(s);
} else {
HEDANHM = Byte.MIN_VALUE;
}
}

protected final void initHEDANMI(String s) {
if (!s.trim().isEmpty()) {
HEDANMI = Byte.parseByte(s);
} else {
HEDANMI = Byte.MIN_VALUE;
}
}

protected final void initHEDANOT(String s) {
if (!s.trim().isEmpty()) {
HEDANOT = Byte.parseByte(s);
} else {
HEDANOT = Byte.MIN_VALUE;
}
}

protected final void initHEDANST(String s) {
if (!s.trim().isEmpty()) {
HEDANST = Byte.parseByte(s);
} else {
HEDANST = Byte.MIN_VALUE;
}
}

protected final void initHEDASAN(String s) {
if (!s.trim().isEmpty()) {
HEDASAN = Byte.parseByte(s);
} else {
HEDASAN = Byte.MIN_VALUE;
}
}

protected final void initHEDASAR(String s) {
if (!s.trim().isEmpty()) {
HEDASAR = Byte.parseByte(s);
} else {
HEDASAR = Byte.MIN_VALUE;
}
}

protected final void initHEDASBP(String s) {
if (!s.trim().isEmpty()) {
HEDASBP = Byte.parseByte(s);
} else {
HEDASBP = Byte.MIN_VALUE;
}
}

protected final void initHEDASCH(String s) {
if (!s.trim().isEmpty()) {
HEDASCH = Byte.parseByte(s);
} else {
HEDASCH = Byte.MIN_VALUE;
}
}

protected final void initHEDASHF(String s) {
if (!s.trim().isEmpty()) {
HEDASHF = Byte.parseByte(s);
} else {
HEDASHF = Byte.MIN_VALUE;
}
}

protected final void initHEDASHM(String s) {
if (!s.trim().isEmpty()) {
HEDASHM = Byte.parseByte(s);
} else {
HEDASHM = Byte.MIN_VALUE;
}
}

protected final void initHEDASOT(String s) {
if (!s.trim().isEmpty()) {
HEDASOT = Byte.parseByte(s);
} else {
HEDASOT = Byte.MIN_VALUE;
}
}

protected final void initHEDAWAN(String s) {
if (!s.trim().isEmpty()) {
HEDAWAN = Byte.parseByte(s);
} else {
HEDAWAN = Byte.MIN_VALUE;
}
}

protected final void initHEDAWAR(String s) {
if (!s.trim().isEmpty()) {
HEDAWAR = Byte.parseByte(s);
} else {
HEDAWAR = Byte.MIN_VALUE;
}
}

protected final void initHEDAWBP(String s) {
if (!s.trim().isEmpty()) {
HEDAWBP = Byte.parseByte(s);
} else {
HEDAWBP = Byte.MIN_VALUE;
}
}

protected final void initHEDAWCH(String s) {
if (!s.trim().isEmpty()) {
HEDAWCH = Byte.parseByte(s);
} else {
HEDAWCH = Byte.MIN_VALUE;
}
}

protected final void initHEDAWDI(String s) {
if (!s.trim().isEmpty()) {
HEDAWDI = Byte.parseByte(s);
} else {
HEDAWDI = Byte.MIN_VALUE;
}
}

protected final void initHEDAWHF(String s) {
if (!s.trim().isEmpty()) {
HEDAWHF = Byte.parseByte(s);
} else {
HEDAWHF = Byte.MIN_VALUE;
}
}

protected final void initHEDAWHM(String s) {
if (!s.trim().isEmpty()) {
HEDAWHM = Byte.parseByte(s);
} else {
HEDAWHM = Byte.MIN_VALUE;
}
}

protected final void initHEDAWMI(String s) {
if (!s.trim().isEmpty()) {
HEDAWMI = Byte.parseByte(s);
} else {
HEDAWMI = Byte.MIN_VALUE;
}
}

protected final void initHEDAWOT(String s) {
if (!s.trim().isEmpty()) {
HEDAWOT = Byte.parseByte(s);
} else {
HEDAWOT = Byte.MIN_VALUE;
}
}

protected final void initHEDAWST(String s) {
if (!s.trim().isEmpty()) {
HEDAWST = Byte.parseByte(s);
} else {
HEDAWST = Byte.MIN_VALUE;
}
}

protected final void initHEDBDAD(String s) {
if (!s.trim().isEmpty()) {
HEDBDAD = Byte.parseByte(s);
} else {
HEDBDAD = Byte.MIN_VALUE;
}
}

protected final void initHEDBDAR(String s) {
if (!s.trim().isEmpty()) {
HEDBDAR = Byte.parseByte(s);
} else {
HEDBDAR = Byte.MIN_VALUE;
}
}

protected final void initHEDBDAS(String s) {
if (!s.trim().isEmpty()) {
HEDBDAS = Byte.parseByte(s);
} else {
HEDBDAS = Byte.MIN_VALUE;
}
}

protected final void initHEDBDCA(String s) {
if (!s.trim().isEmpty()) {
HEDBDCA = Byte.parseByte(s);
} else {
HEDBDCA = Byte.MIN_VALUE;
}
}

protected final void initHEDBDDE(String s) {
if (!s.trim().isEmpty()) {
HEDBDDE = Byte.parseByte(s);
} else {
HEDBDDE = Byte.MIN_VALUE;
}
}

protected final void initHEDBDLU(String s) {
if (!s.trim().isEmpty()) {
HEDBDLU = Byte.parseByte(s);
} else {
HEDBDLU = Byte.MIN_VALUE;
}
}

protected final void initHEDBDOS(String s) {
if (!s.trim().isEmpty()) {
HEDBDOS = Byte.parseByte(s);
} else {
HEDBDOS = Byte.MIN_VALUE;
}
}

protected final void initHEDBDPD(String s) {
if (!s.trim().isEmpty()) {
HEDBDPD = Byte.parseByte(s);
} else {
HEDBDPD = Byte.MIN_VALUE;
}
}

protected final void initHEDBDPS(String s) {
if (!s.trim().isEmpty()) {
HEDBDPS = Byte.parseByte(s);
} else {
HEDBDPS = Byte.MIN_VALUE;
}
}

protected final void initHEDBLU(String s) {
if (!s.trim().isEmpty()) {
HEDBLU = Byte.parseByte(s);
} else {
HEDBLU = Byte.MIN_VALUE;
}
}

protected final void initHEDBMAD(String s) {
if (!s.trim().isEmpty()) {
HEDBMAD = Byte.parseByte(s);
} else {
HEDBMAD = Byte.MIN_VALUE;
}
}

protected final void initHEDBMAR(String s) {
if (!s.trim().isEmpty()) {
HEDBMAR = Byte.parseByte(s);
} else {
HEDBMAR = Byte.MIN_VALUE;
}
}

protected final void initHEDBMAS(String s) {
if (!s.trim().isEmpty()) {
HEDBMAS = Byte.parseByte(s);
} else {
HEDBMAS = Byte.MIN_VALUE;
}
}

protected final void initHEDBMCA(String s) {
if (!s.trim().isEmpty()) {
HEDBMCA = Byte.parseByte(s);
} else {
HEDBMCA = Byte.MIN_VALUE;
}
}

protected final void initHEDBMDE(String s) {
if (!s.trim().isEmpty()) {
HEDBMDE = Byte.parseByte(s);
} else {
HEDBMDE = Byte.MIN_VALUE;
}
}

protected final void initHEDBMLU(String s) {
if (!s.trim().isEmpty()) {
HEDBMLU = Byte.parseByte(s);
} else {
HEDBMLU = Byte.MIN_VALUE;
}
}

protected final void initHEDBMOS(String s) {
if (!s.trim().isEmpty()) {
HEDBMOS = Byte.parseByte(s);
} else {
HEDBMOS = Byte.MIN_VALUE;
}
}

protected final void initHEDBMPD(String s) {
if (!s.trim().isEmpty()) {
HEDBMPD = Byte.parseByte(s);
} else {
HEDBMPD = Byte.MIN_VALUE;
}
}

protected final void initHEDBMPS(String s) {
if (!s.trim().isEmpty()) {
HEDBMPS = Byte.parseByte(s);
} else {
HEDBMPS = Byte.MIN_VALUE;
}
}

protected final void initHEDBSAR(String s) {
if (!s.trim().isEmpty()) {
HEDBSAR = Byte.parseByte(s);
} else {
HEDBSAR = Byte.MIN_VALUE;
}
}

protected final void initHEDBSAS(String s) {
if (!s.trim().isEmpty()) {
HEDBSAS = Byte.parseByte(s);
} else {
HEDBSAS = Byte.MIN_VALUE;
}
}

protected final void initHEDBSCA(String s) {
if (!s.trim().isEmpty()) {
HEDBSCA = Byte.parseByte(s);
} else {
HEDBSCA = Byte.MIN_VALUE;
}
}

protected final void initHEDBSDE(String s) {
if (!s.trim().isEmpty()) {
HEDBSDE = Byte.parseByte(s);
} else {
HEDBSDE = Byte.MIN_VALUE;
}
}

protected final void initHEDBSOS(String s) {
if (!s.trim().isEmpty()) {
HEDBSOS = Byte.parseByte(s);
} else {
HEDBSOS = Byte.MIN_VALUE;
}
}

protected final void initHEDBSPD(String s) {
if (!s.trim().isEmpty()) {
HEDBSPD = Byte.parseByte(s);
} else {
HEDBSPD = Byte.MIN_VALUE;
}
}

protected final void initHEDBTS(String s) {
if (!s.trim().isEmpty()) {
HEDBTS = Byte.parseByte(s);
} else {
HEDBTS = Byte.MIN_VALUE;
}
}

protected final void initHEDBWAD(String s) {
if (!s.trim().isEmpty()) {
HEDBWAD = Byte.parseByte(s);
} else {
HEDBWAD = Byte.MIN_VALUE;
}
}

protected final void initHEDBWAR(String s) {
if (!s.trim().isEmpty()) {
HEDBWAR = Byte.parseByte(s);
} else {
HEDBWAR = Byte.MIN_VALUE;
}
}

protected final void initHEDBWAS(String s) {
if (!s.trim().isEmpty()) {
HEDBWAS = Byte.parseByte(s);
} else {
HEDBWAS = Byte.MIN_VALUE;
}
}

protected final void initHEDBWCA(String s) {
if (!s.trim().isEmpty()) {
HEDBWCA = Byte.parseByte(s);
} else {
HEDBWCA = Byte.MIN_VALUE;
}
}

protected final void initHEDBWDE(String s) {
if (!s.trim().isEmpty()) {
HEDBWDE = Byte.parseByte(s);
} else {
HEDBWDE = Byte.MIN_VALUE;
}
}

protected final void initHEDBWLU(String s) {
if (!s.trim().isEmpty()) {
HEDBWLU = Byte.parseByte(s);
} else {
HEDBWLU = Byte.MIN_VALUE;
}
}

protected final void initHEDBWOS(String s) {
if (!s.trim().isEmpty()) {
HEDBWOS = Byte.parseByte(s);
} else {
HEDBWOS = Byte.MIN_VALUE;
}
}

protected final void initHEDBWPD(String s) {
if (!s.trim().isEmpty()) {
HEDBWPD = Byte.parseByte(s);
} else {
HEDBWPD = Byte.MIN_VALUE;
}
}

protected final void initHEDBWPS(String s) {
if (!s.trim().isEmpty()) {
HEDBWPS = Byte.parseByte(s);
} else {
HEDBWPS = Byte.MIN_VALUE;
}
}

protected final void initHEDCC(String s) {
if (!s.trim().isEmpty()) {
HEDCC = Byte.parseByte(s);
} else {
HEDCC = Byte.MIN_VALUE;
}
}

protected final void initHEDENT(String s) {
if (!s.trim().isEmpty()) {
HEDENT = Byte.parseByte(s);
} else {
HEDENT = Byte.MIN_VALUE;
}
}

protected final void initHEDIA95(String s) {
if (!s.trim().isEmpty()) {
HEDIA95 = Byte.parseByte(s);
} else {
HEDIA95 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA96(String s) {
if (!s.trim().isEmpty()) {
HEDIA96 = Byte.parseByte(s);
} else {
HEDIA96 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAAN(String s) {
if (!s.trim().isEmpty()) {
HEDIAAN = Byte.parseByte(s);
} else {
HEDIAAN = Byte.MIN_VALUE;
}
}

protected final void initHEDIAAR(String s) {
if (!s.trim().isEmpty()) {
HEDIAAR = Byte.parseByte(s);
} else {
HEDIAAR = Byte.MIN_VALUE;
}
}

protected final void initHEDIABP(String s) {
if (!s.trim().isEmpty()) {
HEDIABP = Byte.parseByte(s);
} else {
HEDIABP = Byte.MIN_VALUE;
}
}

protected final void initHEDIACH(String s) {
if (!s.trim().isEmpty()) {
HEDIACH = Byte.parseByte(s);
} else {
HEDIACH = Byte.MIN_VALUE;
}
}

protected final void initHEDIADI(String s) {
if (!s.trim().isEmpty()) {
HEDIADI = Byte.parseByte(s);
} else {
HEDIADI = Byte.MIN_VALUE;
}
}

protected final void initHEDIAHF(String s) {
if (!s.trim().isEmpty()) {
HEDIAHF = Byte.parseByte(s);
} else {
HEDIAHF = Byte.MIN_VALUE;
}
}

protected final void initHEDIAHM(String s) {
if (!s.trim().isEmpty()) {
HEDIAHM = Byte.parseByte(s);
} else {
HEDIAHM = Byte.MIN_VALUE;
}
}

protected final void initHEDIAMI(String s) {
if (!s.trim().isEmpty()) {
HEDIAMI = Byte.parseByte(s);
} else {
HEDIAMI = Byte.MIN_VALUE;
}
}

protected final void initHEDIAST(String s) {
if (!s.trim().isEmpty()) {
HEDIAST = Byte.parseByte(s);
} else {
HEDIAST = Byte.MIN_VALUE;
}
}

protected final void initHEDIB96(String s) {
if (!s.trim().isEmpty()) {
HEDIB96 = Byte.parseByte(s);
} else {
HEDIB96 = Byte.MIN_VALUE;
}
}

protected final void initHEDIBAD(String s) {
if (!s.trim().isEmpty()) {
HEDIBAD = Byte.parseByte(s);
} else {
HEDIBAD = Byte.MIN_VALUE;
}
}

protected final void initHEDIBAR(String s) {
if (!s.trim().isEmpty()) {
HEDIBAR = Byte.parseByte(s);
} else {
HEDIBAR = Byte.MIN_VALUE;
}
}

protected final void initHEDIBAS(String s) {
if (!s.trim().isEmpty()) {
HEDIBAS = Byte.parseByte(s);
} else {
HEDIBAS = Byte.MIN_VALUE;
}
}

protected final void initHEDIBBL(String s) {
if (!s.trim().isEmpty()) {
HEDIBBL = Byte.parseByte(s);
} else {
HEDIBBL = Byte.MIN_VALUE;
}
}

protected final void initHEDIBCA(String s) {
if (!s.trim().isEmpty()) {
HEDIBCA = Byte.parseByte(s);
} else {
HEDIBCA = Byte.MIN_VALUE;
}
}

protected final void initHEDIBDE(String s) {
if (!s.trim().isEmpty()) {
HEDIBDE = Byte.parseByte(s);
} else {
HEDIBDE = Byte.MIN_VALUE;
}
}

protected final void initHEDIBLU(String s) {
if (!s.trim().isEmpty()) {
HEDIBLU = Byte.parseByte(s);
} else {
HEDIBLU = Byte.MIN_VALUE;
}
}

protected final void initHEDIBOS(String s) {
if (!s.trim().isEmpty()) {
HEDIBOS = Byte.parseByte(s);
} else {
HEDIBOS = Byte.MIN_VALUE;
}
}

protected final void initHEDIBPD(String s) {
if (!s.trim().isEmpty()) {
HEDIBPD = Byte.parseByte(s);
} else {
HEDIBPD = Byte.MIN_VALUE;
}
}

protected final void initHEDIBPS(String s) {
if (!s.trim().isEmpty()) {
HEDIBPS = Byte.parseByte(s);
} else {
HEDIBPS = Byte.MIN_VALUE;
}
}

protected final void initHEDIM85(String s) {
if (!s.trim().isEmpty()) {
HEDIM85 = Byte.parseByte(s);
} else {
HEDIM85 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM86(String s) {
if (!s.trim().isEmpty()) {
HEDIM86 = Byte.parseByte(s);
} else {
HEDIM86 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM96(String s) {
if (!s.trim().isEmpty()) {
HEDIM96 = Byte.parseByte(s);
} else {
HEDIM96 = Byte.MIN_VALUE;
}
}

protected final void initHEDIMAN(String s) {
if (!s.trim().isEmpty()) {
HEDIMAN = Byte.parseByte(s);
} else {
HEDIMAN = Byte.MIN_VALUE;
}
}

protected final void initHEDIMAR(String s) {
if (!s.trim().isEmpty()) {
HEDIMAR = Byte.parseByte(s);
} else {
HEDIMAR = Byte.MIN_VALUE;
}
}

protected final void initHEDIMBP(String s) {
if (!s.trim().isEmpty()) {
HEDIMBP = Byte.parseByte(s);
} else {
HEDIMBP = Byte.MIN_VALUE;
}
}

protected final void initHEDIMCH(String s) {
if (!s.trim().isEmpty()) {
HEDIMCH = Byte.parseByte(s);
} else {
HEDIMCH = Byte.MIN_VALUE;
}
}

protected final void initHEDIMDI(String s) {
if (!s.trim().isEmpty()) {
HEDIMDI = Byte.parseByte(s);
} else {
HEDIMDI = Byte.MIN_VALUE;
}
}

protected final void initHEDIMHF(String s) {
if (!s.trim().isEmpty()) {
HEDIMHF = Byte.parseByte(s);
} else {
HEDIMHF = Byte.MIN_VALUE;
}
}

protected final void initHEDIMHM(String s) {
if (!s.trim().isEmpty()) {
HEDIMHM = Byte.parseByte(s);
} else {
HEDIMHM = Byte.MIN_VALUE;
}
}

protected final void initHEDIMMI(String s) {
if (!s.trim().isEmpty()) {
HEDIMMI = Byte.parseByte(s);
} else {
HEDIMMI = Byte.MIN_VALUE;
}
}

protected final void initHEDIMST(String s) {
if (!s.trim().isEmpty()) {
HEDIMST = Byte.parseByte(s);
} else {
HEDIMST = Byte.MIN_VALUE;
}
}

protected final void initHEDNTA(String s) {
if (!s.trim().isEmpty()) {
HEDNTA = Byte.parseByte(s);
} else {
HEDNTA = Byte.MIN_VALUE;
}
}

protected final void initHEDNTB0(String s) {
if (!s.trim().isEmpty()) {
HEDNTB0 = Byte.parseByte(s);
} else {
HEDNTB0 = Byte.MIN_VALUE;
}
}

protected final void initHEDNTB1(String s) {
if (!s.trim().isEmpty()) {
HEDNTB1 = Byte.parseByte(s);
} else {
HEDNTB1 = Byte.MIN_VALUE;
}
}

protected final void initHEDNTB2(String s) {
if (!s.trim().isEmpty()) {
HEDNTB2 = Byte.parseByte(s);
} else {
HEDNTB2 = Byte.MIN_VALUE;
}
}

protected final void initHEDNTB3(String s) {
if (!s.trim().isEmpty()) {
HEDNTB3 = Byte.parseByte(s);
} else {
HEDNTB3 = Byte.MIN_VALUE;
}
}

protected final void initHEDNTB4(String s) {
if (!s.trim().isEmpty()) {
HEDNTB4 = Byte.parseByte(s);
} else {
HEDNTB4 = Byte.MIN_VALUE;
}
}

protected final void initHEDNTB5(String s) {
if (!s.trim().isEmpty()) {
HEDNTB5 = Byte.parseByte(s);
} else {
HEDNTB5 = Byte.MIN_VALUE;
}
}

protected final void initHEFTCHK(String s) {
if (!s.trim().isEmpty()) {
HEFTCHK = Byte.parseByte(s);
} else {
HEFTCHK = Byte.MIN_VALUE;
}
}

protected final void initHEGENH(String s) {
if (!s.trim().isEmpty()) {
HEGENH = Byte.parseByte(s);
} else {
HEGENH = Byte.MIN_VALUE;
}
}

protected final void initHEHBP(String s) {
if (!s.trim().isEmpty()) {
HEHBP = Byte.parseByte(s);
} else {
HEHBP = Byte.MIN_VALUE;
}
}

protected final void initHEHBPA(String s) {
if (!s.trim().isEmpty()) {
HEHBPA = Byte.parseByte(s);
} else {
HEHBPA = Byte.MIN_VALUE;
}
}

protected final void initHEHBPB(String s) {
if (!s.trim().isEmpty()) {
HEHBPB = Byte.parseByte(s);
} else {
HEHBPB = Byte.MIN_VALUE;
}
}

protected final void initHEHBPB1(String s) {
if (!s.trim().isEmpty()) {
HEHBPB1 = Byte.parseByte(s);
} else {
HEHBPB1 = Byte.MIN_VALUE;
}
}

protected final void initHEHPA(String s) {
if (!s.trim().isEmpty()) {
HEHPA = Byte.parseByte(s);
} else {
HEHPA = Byte.MIN_VALUE;
}
}

protected final void initHEHPC(String s) {
if (!s.trim().isEmpty()) {
HEHPC = Byte.parseByte(s);
} else {
HEHPC = Byte.MIN_VALUE;
}
}

protected final void initHEHPD96(String s) {
if (!s.trim().isEmpty()) {
HEHPD96 = Byte.parseByte(s);
} else {
HEHPD96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPDBR(String s) {
if (!s.trim().isEmpty()) {
HEHPDBR = Byte.parseByte(s);
} else {
HEHPDBR = Byte.MIN_VALUE;
}
}

protected final void initHEHPDDA(String s) {
if (!s.trim().isEmpty()) {
HEHPDDA = Byte.parseByte(s);
} else {
HEHPDDA = Byte.MIN_VALUE;
}
}

protected final void initHEHPDDL(String s) {
if (!s.trim().isEmpty()) {
HEHPDDL = Byte.parseByte(s);
} else {
HEHPDDL = Byte.MIN_VALUE;
}
}

protected final void initHEHPDFR(String s) {
if (!s.trim().isEmpty()) {
HEHPDFR = Byte.parseByte(s);
} else {
HEHPDFR = Byte.MIN_VALUE;
}
}

protected final void initHEHPDGD(String s) {
if (!s.trim().isEmpty()) {
HEHPDGD = Byte.parseByte(s);
} else {
HEHPDGD = Byte.MIN_VALUE;
}
}

protected final void initHEHPDGS(String s) {
if (!s.trim().isEmpty()) {
HEHPDGS = Byte.parseByte(s);
} else {
HEHPDGS = Byte.MIN_VALUE;
}
}

protected final void initHEHPDNU(String s) {
if (!s.trim().isEmpty()) {
HEHPDNU = Byte.parseByte(s);
} else {
HEHPDNU = Byte.MIN_VALUE;
}
}

protected final void initHEHPDOR(String s) {
if (!s.trim().isEmpty()) {
HEHPDOR = Byte.parseByte(s);
} else {
HEHPDOR = Byte.MIN_VALUE;
}
}

protected final void initHEHPDOS(String s) {
if (!s.trim().isEmpty()) {
HEHPDOS = Byte.parseByte(s);
} else {
HEHPDOS = Byte.MIN_VALUE;
}
}

protected final void initHEHPDOT(String s) {
if (!s.trim().isEmpty()) {
HEHPDOT = Byte.parseByte(s);
} else {
HEHPDOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPDPA(String s) {
if (!s.trim().isEmpty()) {
HEHPDPA = Byte.parseByte(s);
} else {
HEHPDPA = Byte.MIN_VALUE;
}
}

protected final void initHEHPDPR(String s) {
if (!s.trim().isEmpty()) {
HEHPDPR = Byte.parseByte(s);
} else {
HEHPDPR = Byte.MIN_VALUE;
}
}

protected final void initHEHPDSI(String s) {
if (!s.trim().isEmpty()) {
HEHPDSI = Byte.parseByte(s);
} else {
HEHPDSI = Byte.MIN_VALUE;
}
}

protected final void initHEHPDSL(String s) {
if (!s.trim().isEmpty()) {
HEHPDSL = Byte.parseByte(s);
} else {
HEHPDSL = Byte.MIN_VALUE;
}
}

protected final void initHEHPDSO(String s) {
if (!s.trim().isEmpty()) {
HEHPDSO = Byte.parseByte(s);
} else {
HEHPDSO = Byte.MIN_VALUE;
}
}

protected final void initHEHPDSP(String s) {
if (!s.trim().isEmpty()) {
HEHPDSP = Byte.parseByte(s);
} else {
HEHPDSP = Byte.MIN_VALUE;
}
}

protected final void initHEHPDSS(String s) {
if (!s.trim().isEmpty()) {
HEHPDSS = Byte.parseByte(s);
} else {
HEHPDSS = Byte.MIN_VALUE;
}
}

protected final void initHEHPDVO(String s) {
if (!s.trim().isEmpty()) {
HEHPDVO = Byte.parseByte(s);
} else {
HEHPDVO = Byte.MIN_VALUE;
}
}

protected final void initHEHPH96(String s) {
if (!s.trim().isEmpty()) {
HEHPH96 = Byte.parseByte(s);
} else {
HEHPH96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPHBR(String s) {
if (!s.trim().isEmpty()) {
HEHPHBR = Byte.parseByte(s);
} else {
HEHPHBR = Byte.MIN_VALUE;
}
}

protected final void initHEHPHDA(String s) {
if (!s.trim().isEmpty()) {
HEHPHDA = Byte.parseByte(s);
} else {
HEHPHDA = Byte.MIN_VALUE;
}
}

protected final void initHEHPHDL(String s) {
if (!s.trim().isEmpty()) {
HEHPHDL = Byte.parseByte(s);
} else {
HEHPHDL = Byte.MIN_VALUE;
}
}

protected final void initHEHPHFR(String s) {
if (!s.trim().isEmpty()) {
HEHPHFR = Byte.parseByte(s);
} else {
HEHPHFR = Byte.MIN_VALUE;
}
}

protected final void initHEHPHGD(String s) {
if (!s.trim().isEmpty()) {
HEHPHGD = Byte.parseByte(s);
} else {
HEHPHGD = Byte.MIN_VALUE;
}
}

protected final void initHEHPHGS(String s) {
if (!s.trim().isEmpty()) {
HEHPHGS = Byte.parseByte(s);
} else {
HEHPHGS = Byte.MIN_VALUE;
}
}

protected final void initHEHPHNU(String s) {
if (!s.trim().isEmpty()) {
HEHPHNU = Byte.parseByte(s);
} else {
HEHPHNU = Byte.MIN_VALUE;
}
}

protected final void initHEHPHOR(String s) {
if (!s.trim().isEmpty()) {
HEHPHOR = Byte.parseByte(s);
} else {
HEHPHOR = Byte.MIN_VALUE;
}
}

protected final void initHEHPHOS(String s) {
if (!s.trim().isEmpty()) {
HEHPHOS = Byte.parseByte(s);
} else {
HEHPHOS = Byte.MIN_VALUE;
}
}

protected final void initHEHPHOT(String s) {
if (!s.trim().isEmpty()) {
HEHPHOT = Byte.parseByte(s);
} else {
HEHPHOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPHPA(String s) {
if (!s.trim().isEmpty()) {
HEHPHPA = Byte.parseByte(s);
} else {
HEHPHPA = Byte.MIN_VALUE;
}
}

protected final void initHEHPHPR(String s) {
if (!s.trim().isEmpty()) {
HEHPHPR = Byte.parseByte(s);
} else {
HEHPHPR = Byte.MIN_VALUE;
}
}

protected final void initHEHPHSI(String s) {
if (!s.trim().isEmpty()) {
HEHPHSI = Byte.parseByte(s);
} else {
HEHPHSI = Byte.MIN_VALUE;
}
}

protected final void initHEHPHSL(String s) {
if (!s.trim().isEmpty()) {
HEHPHSL = Byte.parseByte(s);
} else {
HEHPHSL = Byte.MIN_VALUE;
}
}

protected final void initHEHPHSO(String s) {
if (!s.trim().isEmpty()) {
HEHPHSO = Byte.parseByte(s);
} else {
HEHPHSO = Byte.MIN_VALUE;
}
}

protected final void initHEHPHSP(String s) {
if (!s.trim().isEmpty()) {
HEHPHSP = Byte.parseByte(s);
} else {
HEHPHSP = Byte.MIN_VALUE;
}
}

protected final void initHEHPHSS(String s) {
if (!s.trim().isEmpty()) {
HEHPHSS = Byte.parseByte(s);
} else {
HEHPHSS = Byte.MIN_VALUE;
}
}

protected final void initHEHPHVO(String s) {
if (!s.trim().isEmpty()) {
HEHPHVO = Byte.parseByte(s);
} else {
HEHPHVO = Byte.MIN_VALUE;
}
}

protected final void initHEHPM96(String s) {
if (!s.trim().isEmpty()) {
HEHPM96 = Byte.parseByte(s);
} else {
HEHPM96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPMBR(String s) {
if (!s.trim().isEmpty()) {
HEHPMBR = Byte.parseByte(s);
} else {
HEHPMBR = Byte.MIN_VALUE;
}
}

protected final void initHEHPMDA(String s) {
if (!s.trim().isEmpty()) {
HEHPMDA = Byte.parseByte(s);
} else {
HEHPMDA = Byte.MIN_VALUE;
}
}

protected final void initHEHPMDL(String s) {
if (!s.trim().isEmpty()) {
HEHPMDL = Byte.parseByte(s);
} else {
HEHPMDL = Byte.MIN_VALUE;
}
}

protected final void initHEHPMFR(String s) {
if (!s.trim().isEmpty()) {
HEHPMFR = Byte.parseByte(s);
} else {
HEHPMFR = Byte.MIN_VALUE;
}
}

protected final void initHEHPMGD(String s) {
if (!s.trim().isEmpty()) {
HEHPMGD = Byte.parseByte(s);
} else {
HEHPMGD = Byte.MIN_VALUE;
}
}

protected final void initHEHPMGS(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEHPMGS = false;
} else {
HEHPMGS = true;
}
}
}

protected final void initHEHPMNU(String s) {
if (!s.trim().isEmpty()) {
HEHPMNU = Byte.parseByte(s);
} else {
HEHPMNU = Byte.MIN_VALUE;
}
}

protected final void initHEHPMOR(String s) {
if (!s.trim().isEmpty()) {
HEHPMOR = Byte.parseByte(s);
} else {
HEHPMOR = Byte.MIN_VALUE;
}
}

protected final void initHEHPMOS(String s) {
if (!s.trim().isEmpty()) {
HEHPMOS = Byte.parseByte(s);
} else {
HEHPMOS = Byte.MIN_VALUE;
}
}

protected final void initHEHPMOT(String s) {
if (!s.trim().isEmpty()) {
HEHPMOT = Byte.parseByte(s);
} else {
HEHPMOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPMPA(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEHPMPA = false;
} else {
HEHPMPA = true;
}
}
}

protected final void initHEHPMPR(String s) {
if (!s.trim().isEmpty()) {
HEHPMPR = Byte.parseByte(s);
} else {
HEHPMPR = Byte.MIN_VALUE;
}
}

protected final void initHEHPMSI(String s) {
if (!s.trim().isEmpty()) {
HEHPMSI = Byte.parseByte(s);
} else {
HEHPMSI = Byte.MIN_VALUE;
}
}

protected final void initHEHPMSL(String s) {
if (!s.trim().isEmpty()) {
HEHPMSL = Byte.parseByte(s);
} else {
HEHPMSL = Byte.MIN_VALUE;
}
}

protected final void initHEHPMSO(String s) {
if (!s.trim().isEmpty()) {
HEHPMSO = Byte.parseByte(s);
} else {
HEHPMSO = Byte.MIN_VALUE;
}
}

protected final void initHEHPMSP(String s) {
if (!s.trim().isEmpty()) {
HEHPMSP = Byte.parseByte(s);
} else {
HEHPMSP = Byte.MIN_VALUE;
}
}

protected final void initHEHPMSS(String s) {
if (!s.trim().isEmpty()) {
HEHPMSS = Byte.parseByte(s);
} else {
HEHPMSS = Byte.MIN_VALUE;
}
}

protected final void initHEHPMVO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEHPMVO = false;
} else {
HEHPMVO = true;
}
}
}

protected final void initHEHPP96(String s) {
if (!s.trim().isEmpty()) {
HEHPP96 = Byte.parseByte(s);
} else {
HEHPP96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPPBR(String s) {
if (!s.trim().isEmpty()) {
HEHPPBR = Byte.parseByte(s);
} else {
HEHPPBR = Byte.MIN_VALUE;
}
}

protected final void initHEHPPDA(String s) {
if (!s.trim().isEmpty()) {
HEHPPDA = Byte.parseByte(s);
} else {
HEHPPDA = Byte.MIN_VALUE;
}
}

protected final void initHEHPPDL(String s) {
if (!s.trim().isEmpty()) {
HEHPPDL = Byte.parseByte(s);
} else {
HEHPPDL = Byte.MIN_VALUE;
}
}

protected final void initHEHPPFR(String s) {
if (!s.trim().isEmpty()) {
HEHPPFR = Byte.parseByte(s);
} else {
HEHPPFR = Byte.MIN_VALUE;
}
}

protected final void initHEHPPGD(String s) {
if (!s.trim().isEmpty()) {
HEHPPGD = Byte.parseByte(s);
} else {
HEHPPGD = Byte.MIN_VALUE;
}
}

protected final void initHEHPPGS(String s) {
if (!s.trim().isEmpty()) {
HEHPPGS = Byte.parseByte(s);
} else {
HEHPPGS = Byte.MIN_VALUE;
}
}

protected final void initHEHPPNU(String s) {
if (!s.trim().isEmpty()) {
HEHPPNU = Byte.parseByte(s);
} else {
HEHPPNU = Byte.MIN_VALUE;
}
}

protected final void initHEHPPOR(String s) {
if (!s.trim().isEmpty()) {
HEHPPOR = Byte.parseByte(s);
} else {
HEHPPOR = Byte.MIN_VALUE;
}
}

protected final void initHEHPPOS(String s) {
if (!s.trim().isEmpty()) {
HEHPPOS = Byte.parseByte(s);
} else {
HEHPPOS = Byte.MIN_VALUE;
}
}

protected final void initHEHPPOT(String s) {
if (!s.trim().isEmpty()) {
HEHPPOT = Byte.parseByte(s);
} else {
HEHPPOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPPPA(String s) {
if (!s.trim().isEmpty()) {
HEHPPPA = Byte.parseByte(s);
} else {
HEHPPPA = Byte.MIN_VALUE;
}
}

protected final void initHEHPPPR(String s) {
if (!s.trim().isEmpty()) {
HEHPPPR = Byte.parseByte(s);
} else {
HEHPPPR = Byte.MIN_VALUE;
}
}

protected final void initHEHPPSI(String s) {
if (!s.trim().isEmpty()) {
HEHPPSI = Byte.parseByte(s);
} else {
HEHPPSI = Byte.MIN_VALUE;
}
}

protected final void initHEHPPSL(String s) {
if (!s.trim().isEmpty()) {
HEHPPSL = Byte.parseByte(s);
} else {
HEHPPSL = Byte.MIN_VALUE;
}
}

protected final void initHEHPPSO(String s) {
if (!s.trim().isEmpty()) {
HEHPPSO = Byte.parseByte(s);
} else {
HEHPPSO = Byte.MIN_VALUE;
}
}

protected final void initHEHPPSP(String s) {
if (!s.trim().isEmpty()) {
HEHPPSP = Byte.parseByte(s);
} else {
HEHPPSP = Byte.MIN_VALUE;
}
}

protected final void initHEHPPSS(String s) {
if (!s.trim().isEmpty()) {
HEHPPSS = Byte.parseByte(s);
} else {
HEHPPSS = Byte.MIN_VALUE;
}
}

protected final void initHEHPPVO(String s) {
if (!s.trim().isEmpty()) {
HEHPPVO = Byte.parseByte(s);
} else {
HEHPPVO = Byte.MIN_VALUE;
}
}

protected final void initHEHPS95(String s) {
if (!s.trim().isEmpty()) {
HEHPS95 = Byte.parseByte(s);
} else {
HEHPS95 = Byte.MIN_VALUE;
}
}

protected final void initHEHPS96(String s) {
if (!s.trim().isEmpty()) {
HEHPS96 = Byte.parseByte(s);
} else {
HEHPS96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPSCH(String s) {
if (!s.trim().isEmpty()) {
HEHPSCH = Byte.parseByte(s);
} else {
HEHPSCH = Byte.MIN_VALUE;
}
}

protected final void initHEHPSLE(String s) {
if (!s.trim().isEmpty()) {
HEHPSLE = Byte.parseByte(s);
} else {
HEHPSLE = Byte.MIN_VALUE;
}
}

protected final void initHEHPSOT(String s) {
if (!s.trim().isEmpty()) {
HEHPSOT = Byte.parseByte(s);
} else {
HEHPSOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPSVE(String s) {
if (!s.trim().isEmpty()) {
HEHPSVE = Byte.parseByte(s);
} else {
HEHPSVE = Byte.MIN_VALUE;
}
}

protected final void initHEHPT96(String s) {
if (!s.trim().isEmpty()) {
HEHPT96 = Byte.parseByte(s);
} else {
HEHPT96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPTBR(String s) {
if (!s.trim().isEmpty()) {
HEHPTBR = Byte.parseByte(s);
} else {
HEHPTBR = Byte.MIN_VALUE;
}
}

protected final void initHEHPTDA(String s) {
if (!s.trim().isEmpty()) {
HEHPTDA = Byte.parseByte(s);
} else {
HEHPTDA = Byte.MIN_VALUE;
}
}

protected final void initHEHPTDL(String s) {
if (!s.trim().isEmpty()) {
HEHPTDL = Byte.parseByte(s);
} else {
HEHPTDL = Byte.MIN_VALUE;
}
}

protected final void initHEHPTFR(String s) {
if (!s.trim().isEmpty()) {
HEHPTFR = Byte.parseByte(s);
} else {
HEHPTFR = Byte.MIN_VALUE;
}
}

protected final void initHEHPTGD(String s) {
if (!s.trim().isEmpty()) {
HEHPTGD = Byte.parseByte(s);
} else {
HEHPTGD = Byte.MIN_VALUE;
}
}

protected final void initHEHPTGS(String s) {
if (!s.trim().isEmpty()) {
HEHPTGS = Byte.parseByte(s);
} else {
HEHPTGS = Byte.MIN_VALUE;
}
}

protected final void initHEHPTNU(String s) {
if (!s.trim().isEmpty()) {
HEHPTNU = Byte.parseByte(s);
} else {
HEHPTNU = Byte.MIN_VALUE;
}
}

protected final void initHEHPTOR(String s) {
if (!s.trim().isEmpty()) {
HEHPTOR = Byte.parseByte(s);
} else {
HEHPTOR = Byte.MIN_VALUE;
}
}

protected final void initHEHPTOS(String s) {
if (!s.trim().isEmpty()) {
HEHPTOS = Byte.parseByte(s);
} else {
HEHPTOS = Byte.MIN_VALUE;
}
}

protected final void initHEHPTOT(String s) {
if (!s.trim().isEmpty()) {
HEHPTOT = Byte.parseByte(s);
} else {
HEHPTOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPTPA(String s) {
if (!s.trim().isEmpty()) {
HEHPTPA = Byte.parseByte(s);
} else {
HEHPTPA = Byte.MIN_VALUE;
}
}

protected final void initHEHPTPR(String s) {
if (!s.trim().isEmpty()) {
HEHPTPR = Byte.parseByte(s);
} else {
HEHPTPR = Byte.MIN_VALUE;
}
}

protected final void initHEHPTSI(String s) {
if (!s.trim().isEmpty()) {
HEHPTSI = Byte.parseByte(s);
} else {
HEHPTSI = Byte.MIN_VALUE;
}
}

protected final void initHEHPTSL(String s) {
if (!s.trim().isEmpty()) {
HEHPTSL = Byte.parseByte(s);
} else {
HEHPTSL = Byte.MIN_VALUE;
}
}

protected final void initHEHPTSO(String s) {
if (!s.trim().isEmpty()) {
HEHPTSO = Byte.parseByte(s);
} else {
HEHPTSO = Byte.MIN_VALUE;
}
}

protected final void initHEHPTSP(String s) {
if (!s.trim().isEmpty()) {
HEHPTSP = Byte.parseByte(s);
} else {
HEHPTSP = Byte.MIN_VALUE;
}
}

protected final void initHEHPTSS(String s) {
if (!s.trim().isEmpty()) {
HEHPTSS = Byte.parseByte(s);
} else {
HEHPTSS = Byte.MIN_VALUE;
}
}

protected final void initHEHPTVO(String s) {
if (!s.trim().isEmpty()) {
HEHPTVO = Byte.parseByte(s);
} else {
HEHPTVO = Byte.MIN_VALUE;
}
}

protected final void initHEHPW96(String s) {
if (!s.trim().isEmpty()) {
HEHPW96 = Byte.parseByte(s);
} else {
HEHPW96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPWBR(String s) {
if (!s.trim().isEmpty()) {
HEHPWBR = Byte.parseByte(s);
} else {
HEHPWBR = Byte.MIN_VALUE;
}
}

protected final void initHEHPWDA(String s) {
if (!s.trim().isEmpty()) {
HEHPWDA = Byte.parseByte(s);
} else {
HEHPWDA = Byte.MIN_VALUE;
}
}

protected final void initHEHPWDL(String s) {
if (!s.trim().isEmpty()) {
HEHPWDL = Byte.parseByte(s);
} else {
HEHPWDL = Byte.MIN_VALUE;
}
}

protected final void initHEHPWFR(String s) {
if (!s.trim().isEmpty()) {
HEHPWFR = Byte.parseByte(s);
} else {
HEHPWFR = Byte.MIN_VALUE;
}
}

protected final void initHEHPWGD(String s) {
if (!s.trim().isEmpty()) {
HEHPWGD = Byte.parseByte(s);
} else {
HEHPWGD = Byte.MIN_VALUE;
}
}

protected final void initHEHPWGS(String s) {
if (!s.trim().isEmpty()) {
HEHPWGS = Byte.parseByte(s);
} else {
HEHPWGS = Byte.MIN_VALUE;
}
}

protected final void initHEHPWNU(String s) {
if (!s.trim().isEmpty()) {
HEHPWNU = Byte.parseByte(s);
} else {
HEHPWNU = Byte.MIN_VALUE;
}
}

protected final void initHEHPWOR(String s) {
if (!s.trim().isEmpty()) {
HEHPWOR = Byte.parseByte(s);
} else {
HEHPWOR = Byte.MIN_VALUE;
}
}

protected final void initHEHPWOS(String s) {
if (!s.trim().isEmpty()) {
HEHPWOS = Byte.parseByte(s);
} else {
HEHPWOS = Byte.MIN_VALUE;
}
}

protected final void initHEHPWOT(String s) {
if (!s.trim().isEmpty()) {
HEHPWOT = Byte.parseByte(s);
} else {
HEHPWOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPWPA(String s) {
if (!s.trim().isEmpty()) {
HEHPWPA = Byte.parseByte(s);
} else {
HEHPWPA = Byte.MIN_VALUE;
}
}

protected final void initHEHPWPR(String s) {
if (!s.trim().isEmpty()) {
HEHPWPR = Byte.parseByte(s);
} else {
HEHPWPR = Byte.MIN_VALUE;
}
}

protected final void initHEHPWSI(String s) {
if (!s.trim().isEmpty()) {
HEHPWSI = Byte.parseByte(s);
} else {
HEHPWSI = Byte.MIN_VALUE;
}
}

protected final void initHEHPWSL(String s) {
if (!s.trim().isEmpty()) {
HEHPWSL = Byte.parseByte(s);
} else {
HEHPWSL = Byte.MIN_VALUE;
}
}

protected final void initHEHPWSO(String s) {
if (!s.trim().isEmpty()) {
HEHPWSO = Byte.parseByte(s);
} else {
HEHPWSO = Byte.MIN_VALUE;
}
}

protected final void initHEHPWSP(String s) {
if (!s.trim().isEmpty()) {
HEHPWSP = Byte.parseByte(s);
} else {
HEHPWSP = Byte.MIN_VALUE;
}
}

protected final void initHEHPWSS(String s) {
if (!s.trim().isEmpty()) {
HEHPWSS = Byte.parseByte(s);
} else {
HEHPWSS = Byte.MIN_VALUE;
}
}

protected final void initHEHPWVO(String s) {
if (!s.trim().isEmpty()) {
HEHPWVO = Byte.parseByte(s);
} else {
HEHPWVO = Byte.MIN_VALUE;
}
}

protected final void initHEHRTMD(String s) {
if (!s.trim().isEmpty()) {
HEHRTMD = Byte.parseByte(s);
} else {
HEHRTMD = Byte.MIN_VALUE;
}
}

protected final void initHEHSM85(String s) {
if (!s.trim().isEmpty()) {
HEHSM85 = Byte.parseByte(s);
} else {
HEHSM85 = Byte.MIN_VALUE;
}
}

protected final void initHEHSM86(String s) {
if (!s.trim().isEmpty()) {
HEHSM86 = Byte.parseByte(s);
} else {
HEHSM86 = Byte.MIN_VALUE;
}
}

protected final void initHEHSM96(String s) {
if (!s.trim().isEmpty()) {
HEHSM96 = Byte.parseByte(s);
} else {
HEHSM96 = Byte.MIN_VALUE;
}
}

protected final void initHEHSMAC(String s) {
if (!s.trim().isEmpty()) {
HEHSMAC = Byte.parseByte(s);
} else {
HEHSMAC = Byte.MIN_VALUE;
}
}

protected final void initHEHSMAQ(String s) {
if (!s.trim().isEmpty()) {
HEHSMAQ = Byte.parseByte(s);
} else {
HEHSMAQ = Byte.MIN_VALUE;
}
}

protected final void initHEHSMCH(String s) {
if (!s.trim().isEmpty()) {
HEHSMCH = Byte.parseByte(s);
} else {
HEHSMCH = Byte.MIN_VALUE;
}
}

protected final void initHEHSMCR(String s) {
if (!s.trim().isEmpty()) {
HEHSMCR = Byte.parseByte(s);
} else {
HEHSMCR = Byte.MIN_VALUE;
}
}

protected final void initHEHSMGY(String s) {
if (!s.trim().isEmpty()) {
HEHSMGY = Byte.parseByte(s);
} else {
HEHSMGY = Byte.MIN_VALUE;
}
}

protected final void initHEHSMHY(String s) {
if (!s.trim().isEmpty()) {
HEHSMHY = Byte.parseByte(s);
} else {
HEHSMHY = Byte.MIN_VALUE;
}
}

protected final void initHEHSMLE(String s) {
if (!s.trim().isEmpty()) {
HEHSMLE = Byte.parseByte(s);
} else {
HEHSMLE = Byte.MIN_VALUE;
}
}

protected final void initHEHSMMA(String s) {
if (!s.trim().isEmpty()) {
HEHSMMA = Byte.parseByte(s);
} else {
HEHSMMA = Byte.MIN_VALUE;
}
}

protected final void initHEHSMOS(String s) {
if (!s.trim().isEmpty()) {
HEHSMOS = Byte.parseByte(s);
} else {
HEHSMOS = Byte.MIN_VALUE;
}
}

protected final void initHEHSMOT(String s) {
if (!s.trim().isEmpty()) {
HEHSMOT = Byte.parseByte(s);
} else {
HEHSMOT = Byte.MIN_VALUE;
}
}

protected final void initHEHSMPE(String s) {
if (!s.trim().isEmpty()) {
HEHSMPE = Byte.parseByte(s);
} else {
HEHSMPE = Byte.MIN_VALUE;
}
}

protected final void initHEHSMTH(String s) {
if (!s.trim().isEmpty()) {
HEHSMTH = Byte.parseByte(s);
} else {
HEHSMTH = Byte.MIN_VALUE;
}
}

protected final void initHEHSMVE(String s) {
if (!s.trim().isEmpty()) {
HEHSMVE = Byte.parseByte(s);
} else {
HEHSMVE = Byte.MIN_VALUE;
}
}

protected final void initHEINCT(String s) {
if (!s.trim().isEmpty()) {
HEINCT = Byte.parseByte(s);
} else {
HEINCT = Byte.MIN_VALUE;
}
}

protected final void initHEINCTA(String s) {
if (!s.trim().isEmpty()) {
HEINCTA = Byte.parseByte(s);
} else {
HEINCTA = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA1(String s) {
if (!s.trim().isEmpty()) {
HEJIAA1 = Byte.parseByte(s);
} else {
HEJIAA1 = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA2(String s) {
if (!s.trim().isEmpty()) {
HEJIAA2 = Byte.parseByte(s);
} else {
HEJIAA2 = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA3(String s) {
if (!s.trim().isEmpty()) {
HEJIAA3 = Byte.parseByte(s);
} else {
HEJIAA3 = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA4(String s) {
if (!s.trim().isEmpty()) {
HEJIAA4 = Byte.parseByte(s);
} else {
HEJIAA4 = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA5(String s) {
if (!s.trim().isEmpty()) {
HEJIAA5 = Byte.parseByte(s);
} else {
HEJIAA5 = Byte.MIN_VALUE;
}
}

protected final void initHEJIBLH(String s) {
if (!s.trim().isEmpty()) {
HEJIBLH = Byte.parseByte(s);
} else {
HEJIBLH = Byte.MIN_VALUE;
}
}

protected final void initHEJIBLK(String s) {
if (!s.trim().isEmpty()) {
HEJIBLK = Byte.parseByte(s);
} else {
HEJIBLK = Byte.MIN_VALUE;
}
}

protected final void initHEJIBRH(String s) {
if (!s.trim().isEmpty()) {
HEJIBRH = Byte.parseByte(s);
} else {
HEJIBRH = Byte.MIN_VALUE;
}
}

protected final void initHEJIBRK(String s) {
if (!s.trim().isEmpty()) {
HEJIBRK = Byte.parseByte(s);
} else {
HEJIBRK = Byte.MIN_VALUE;
}
}

protected final void initHEKIDN(String s) {
if (!s.trim().isEmpty()) {
HEKIDN = Byte.parseByte(s);
} else {
HEKIDN = Byte.MIN_VALUE;
}
}

protected final void initHEKNEA(String s) {
if (!s.trim().isEmpty()) {
HEKNEA = Byte.parseByte(s);
} else {
HEKNEA = Byte.MIN_VALUE;
}
}

protected final void initHEKNEB(String s) {
if (!s.trim().isEmpty()) {
HEKNEB = Byte.parseByte(s);
} else {
HEKNEB = Byte.MIN_VALUE;
}
}

protected final void initHEKNEC(String s) {
if (!s.trim().isEmpty()) {
HEKNEC = Byte.parseByte(s);
} else {
HEKNEC = Byte.MIN_VALUE;
}
}

protected final void initHELC(String s) {
if (!s.trim().isEmpty()) {
HELC = Byte.parseByte(s);
} else {
HELC = Byte.MIN_VALUE;
}
}

protected final void initHELEUK(String s) {
if (!s.trim().isEmpty()) {
HELEUK = Byte.parseByte(s);
} else {
HELEUK = Byte.MIN_VALUE;
}
}

protected final void initHELNGB(String s) {
if (!s.trim().isEmpty()) {
HELNGB = Byte.parseByte(s);
} else {
HELNGB = Byte.MIN_VALUE;
}
}

protected final void initHELWK(String s) {
if (!s.trim().isEmpty()) {
HELWK = Byte.parseByte(s);
} else {
HELWK = Byte.MIN_VALUE;
}
}

protected final void initHEMDAB(String s) {
if (!s.trim().isEmpty()) {
HEMDAB = Byte.parseByte(s);
} else {
HEMDAB = Byte.MIN_VALUE;
}
}

protected final void initHEMW(String s) {
if (!s.trim().isEmpty()) {
HEMW = Byte.parseByte(s);
} else {
HEMW = Byte.MIN_VALUE;
}
}

protected final void initHENMMI(String s) {
if (!s.trim().isEmpty()) {
HENMMI = Byte.parseByte(s);
} else {
HENMMI = Byte.MIN_VALUE;
}
}

protected final void initHENMST(String s) {
if (!s.trim().isEmpty()) {
HENMST = Byte.parseByte(s);
} else {
HENMST = Byte.MIN_VALUE;
}
}

protected final void initHEOPCCA(String s) {
if (!s.trim().isEmpty()) {
HEOPCCA = Byte.parseByte(s);
} else {
HEOPCCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPCDI(String s) {
if (!s.trim().isEmpty()) {
HEOPCDI = Byte.parseByte(s);
} else {
HEOPCDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPCGL(String s) {
if (!s.trim().isEmpty()) {
HEOPCGL = Byte.parseByte(s);
} else {
HEOPCGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPCMD(String s) {
if (!s.trim().isEmpty()) {
HEOPCMD = Byte.parseByte(s);
} else {
HEOPCMD = Byte.MIN_VALUE;
}
}

protected final void initHEOPFCA(String s) {
if (!s.trim().isEmpty()) {
HEOPFCA = Byte.parseByte(s);
} else {
HEOPFCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPFDI(String s) {
if (!s.trim().isEmpty()) {
HEOPFDI = Byte.parseByte(s);
} else {
HEOPFDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPFGL(String s) {
if (!s.trim().isEmpty()) {
HEOPFGL = Byte.parseByte(s);
} else {
HEOPFGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPFMD(String s) {
if (!s.trim().isEmpty()) {
HEOPFMD = Byte.parseByte(s);
} else {
HEOPFMD = Byte.MIN_VALUE;
}
}

protected final void initHEOPNCA(String s) {
if (!s.trim().isEmpty()) {
HEOPNCA = Byte.parseByte(s);
} else {
HEOPNCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPNDI(String s) {
if (!s.trim().isEmpty()) {
HEOPNDI = Byte.parseByte(s);
} else {
HEOPNDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPNGL(String s) {
if (!s.trim().isEmpty()) {
HEOPNGL = Byte.parseByte(s);
} else {
HEOPNGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPNMD(String s) {
if (!s.trim().isEmpty()) {
HEOPNMD = Byte.parseByte(s);
} else {
HEOPNMD = Byte.MIN_VALUE;
}
}

protected final void initHEOPSCA(String s) {
if (!s.trim().isEmpty()) {
HEOPSCA = Byte.parseByte(s);
} else {
HEOPSCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPSDI(String s) {
if (!s.trim().isEmpty()) {
HEOPSDI = Byte.parseByte(s);
} else {
HEOPSDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPSGL(String s) {
if (!s.trim().isEmpty()) {
HEOPSGL = Byte.parseByte(s);
} else {
HEOPSGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPSMD(String s) {
if (!s.trim().isEmpty()) {
HEOPSMD = Byte.parseByte(s);
} else {
HEOPSMD = Byte.MIN_VALUE;
}
}

protected final void initHEOPT96(String s) {
if (!s.trim().isEmpty()) {
HEOPT96 = Byte.parseByte(s);
} else {
HEOPT96 = Byte.MIN_VALUE;
}
}

protected final void initHEOPTCA(String s) {
if (!s.trim().isEmpty()) {
HEOPTCA = Byte.parseByte(s);
} else {
HEOPTCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPTDI(String s) {
if (!s.trim().isEmpty()) {
HEOPTDI = Byte.parseByte(s);
} else {
HEOPTDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPTGL(String s) {
if (!s.trim().isEmpty()) {
HEOPTGL = Byte.parseByte(s);
} else {
HEOPTGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPTMD(String s) {
if (!s.trim().isEmpty()) {
HEOPTMD = Byte.parseByte(s);
} else {
HEOPTMD = Byte.MIN_VALUE;
}
}

protected final void initHEPAB(String s) {
if (!s.trim().isEmpty()) {
HEPAB = Byte.parseByte(s);
} else {
HEPAB = Byte.MIN_VALUE;
}
}

protected final void initHEPAB1(String s) {
if (!s.trim().isEmpty()) {
HEPAB1 = Byte.parseByte(s);
} else {
HEPAB1 = Byte.MIN_VALUE;
}
}

protected final void initHEPAC(String s) {
if (!s.trim().isEmpty()) {
HEPAC = Byte.parseByte(s);
} else {
HEPAC = Byte.MIN_VALUE;
}
}

protected final void initHEPAD(String s) {
if (!s.trim().isEmpty()) {
HEPAD = Byte.parseByte(s);
} else {
HEPAD = Byte.MIN_VALUE;
}
}

protected final void initHEPAE(String s) {
if (!s.trim().isEmpty()) {
HEPAE = Byte.parseByte(s);
} else {
HEPAE = Byte.MIN_VALUE;
}
}

protected final void initHEPAF(String s) {
if (!s.trim().isEmpty()) {
HEPAF = Byte.parseByte(s);
} else {
HEPAF = Byte.MIN_VALUE;
}
}

protected final void initHEPAF1(String s) {
if (!s.trim().isEmpty()) {
HEPAF1 = Byte.parseByte(s);
} else {
HEPAF1 = Byte.MIN_VALUE;
}
}

protected final void initHEPAK1(String s) {
if (!s.trim().isEmpty()) {
HEPAK1 = Byte.parseByte(s);
} else {
HEPAK1 = Byte.MIN_VALUE;
}
}

protected final void initHEPAWAL(String s) {
if (!s.trim().isEmpty()) {
HEPAWAL = Byte.parseByte(s);
} else {
HEPAWAL = Byte.MIN_VALUE;
}
}

protected final void initHEPAWBA(String s) {
if (!s.trim().isEmpty()) {
HEPAWBA = Byte.parseByte(s);
} else {
HEPAWBA = Byte.MIN_VALUE;
}
}

protected final void initHEPAWFE(String s) {
if (!s.trim().isEmpty()) {
HEPAWFE = Byte.parseByte(s);
} else {
HEPAWFE = Byte.MIN_VALUE;
}
}

protected final void initHEPAWHI(String s) {
if (!s.trim().isEmpty()) {
HEPAWHI = Byte.parseByte(s);
} else {
HEPAWHI = Byte.MIN_VALUE;
}
}

protected final void initHEPAWKN(String s) {
if (!s.trim().isEmpty()) {
HEPAWKN = Byte.parseByte(s);
} else {
HEPAWKN = Byte.MIN_VALUE;
}
}

protected final void initHEPAWMO(String s) {
if (!s.trim().isEmpty()) {
HEPAWMO = Byte.parseByte(s);
} else {
HEPAWMO = Byte.MIN_VALUE;
}
}

protected final void initHEPAWOT(String s) {
if (!s.trim().isEmpty()) {
HEPAWOT = Byte.parseByte(s);
} else {
HEPAWOT = Byte.MIN_VALUE;
}
}

protected final void initHEPRKR(String s) {
if (!s.trim().isEmpty()) {
HEPRKR = Byte.parseByte(s);
} else {
HEPRKR = Byte.MIN_VALUE;
}
}

protected final void initHEPRKRY(String s) {
if (!s.trim().isEmpty()) {
HEPRKRY = Short.parseShort(s);
} else {
HEPRKRY = Short.MIN_VALUE;
}
}

protected final void initHEPSY95(String s) {
if (!s.trim().isEmpty()) {
HEPSY95 = Byte.parseByte(s);
} else {
HEPSY95 = Byte.MIN_VALUE;
}
}

protected final void initHEPSYAN(String s) {
if (!s.trim().isEmpty()) {
HEPSYAN = Byte.parseByte(s);
} else {
HEPSYAN = Byte.MIN_VALUE;
}
}

protected final void initHEPSYDE(String s) {
if (!s.trim().isEmpty()) {
HEPSYDE = Byte.parseByte(s);
} else {
HEPSYDE = Byte.MIN_VALUE;
}
}

protected final void initHEPSYEM(String s) {
if (!s.trim().isEmpty()) {
HEPSYEM = Byte.parseByte(s);
} else {
HEPSYEM = Byte.MIN_VALUE;
}
}

protected final void initHEPSYHA(String s) {
if (!s.trim().isEmpty()) {
HEPSYHA = Byte.parseByte(s);
} else {
HEPSYHA = Byte.MIN_VALUE;
}
}

protected final void initHEPSYMA(String s) {
if (!s.trim().isEmpty()) {
HEPSYMA = Byte.parseByte(s);
} else {
HEPSYMA = Byte.MIN_VALUE;
}
}

protected final void initHEPSYMO(String s) {
if (!s.trim().isEmpty()) {
HEPSYMO = Byte.parseByte(s);
} else {
HEPSYMO = Byte.MIN_VALUE;
}
}

protected final void initHEPSYPS(String s) {
if (!s.trim().isEmpty()) {
HEPSYPS = Byte.parseByte(s);
} else {
HEPSYPS = Byte.MIN_VALUE;
}
}

protected final void initHEPSYSC(String s) {
if (!s.trim().isEmpty()) {
HEPSYSC = Byte.parseByte(s);
} else {
HEPSYSC = Byte.MIN_VALUE;
}
}

protected final void initHEROSMD(String s) {
if (!s.trim().isEmpty()) {
HEROSMD = Byte.parseByte(s);
} else {
HEROSMD = Byte.MIN_VALUE;
}
}

protected final void initHERPA(String s) {
if (!s.trim().isEmpty()) {
HERPA = Byte.parseByte(s);
} else {
HERPA = Byte.MIN_VALUE;
}
}

protected final void initHERPB(String s) {
if (!s.trim().isEmpty()) {
HERPB = Byte.parseByte(s);
} else {
HERPB = Byte.MIN_VALUE;
}
}

protected final void initHERPC(String s) {
if (!s.trim().isEmpty()) {
HERPC = Byte.parseByte(s);
} else {
HERPC = Byte.MIN_VALUE;
}
}

protected final void initHERPD(String s) {
if (!s.trim().isEmpty()) {
HERPD = Byte.parseByte(s);
} else {
HERPD = Byte.MIN_VALUE;
}
}

protected final void initHERPE(String s) {
if (!s.trim().isEmpty()) {
HERPE = Byte.parseByte(s);
} else {
HERPE = Byte.MIN_VALUE;
}
}

protected final void initHERPE1(String s) {
if (!s.trim().isEmpty()) {
HERPE1 = Byte.parseByte(s);
} else {
HERPE1 = Byte.MIN_VALUE;
}
}

protected final void initHERPF(String s) {
if (!s.trim().isEmpty()) {
HERPF = Byte.parseByte(s);
} else {
HERPF = Byte.MIN_VALUE;
}
}

protected final void initHERPG(String s) {
if (!s.trim().isEmpty()) {
HERPG = Byte.parseByte(s);
} else {
HERPG = Byte.MIN_VALUE;
}
}

protected final void initHERPH(String s) {
if (!s.trim().isEmpty()) {
HERPH = Byte.parseByte(s);
} else {
HERPH = Byte.MIN_VALUE;
}
}

protected final void initHERPI(String s) {
if (!s.trim().isEmpty()) {
HERPI = Byte.parseByte(s);
} else {
HERPI = Byte.MIN_VALUE;
}
}

protected final void initHERPJ(String s) {
if (!s.trim().isEmpty()) {
HERPJ = Byte.parseByte(s);
} else {
HERPJ = Byte.MIN_VALUE;
}
}

protected final void initHESKD(String s) {
if (!s.trim().isEmpty()) {
HESKD = Byte.parseByte(s);
} else {
HESKD = Byte.MIN_VALUE;
}
}

protected final void initHESKE(String s) {
if (!s.trim().isEmpty()) {
HESKE = Byte.parseByte(s);
} else {
HESKE = Byte.MIN_VALUE;
}
}

protected final void initHESKF(String s) {
if (!s.trim().isEmpty()) {
HESKF = Byte.parseByte(s);
} else {
HESKF = Byte.MIN_VALUE;
}
}

protected final void initHESLFCB(String s) {
if (!s.trim().isEmpty()) {
HESLFCB = Byte.parseByte(s);
} else {
HESLFCB = Byte.MIN_VALUE;
}
}

protected final void initHESLFCM(String s) {
if (!s.trim().isEmpty()) {
HESLFCM = Byte.parseByte(s);
} else {
HESLFCM = Byte.MIN_VALUE;
}
}

protected final void initHESLFCR(String s) {
if (!s.trim().isEmpty()) {
HESLFCR = Byte.parseByte(s);
} else {
HESLFCR = Byte.MIN_VALUE;
}
}

protected final void initHESLFCY(String s) {
if (!s.trim().isEmpty()) {
HESLFCY = Short.parseShort(s);
} else {
HESLFCY = Short.MIN_VALUE;
}
}

protected final void initHESTOP(String s) {
if (!s.trim().isEmpty()) {
HESTOP = Byte.parseByte(s);
} else {
HESTOP = Byte.MIN_VALUE;
}
}

protected final void initHESTOPC(String s) {
if (!s.trim().isEmpty()) {
HESTOPC = Byte.parseByte(s);
} else {
HESTOPC = Byte.MIN_VALUE;
}
}

protected final void initHESUG(String s) {
if (!s.trim().isEmpty()) {
HESUG = Byte.parseByte(s);
} else {
HESUG = Byte.MIN_VALUE;
}
}

protected final void initHESUGA(String s) {
if (!s.trim().isEmpty()) {
HESUGA = Byte.parseByte(s);
} else {
HESUGA = Byte.MIN_VALUE;
}
}

protected final void initHETEMP(String s) {
if (!s.trim().isEmpty()) {
HETEMP = Byte.parseByte(s);
} else {
HETEMP = Byte.MIN_VALUE;
}
}

protected final void initHEWEE(String s) {
if (!s.trim().isEmpty()) {
HEWEE = Byte.parseByte(s);
} else {
HEWEE = Byte.MIN_VALUE;
}
}

protected final void initHEWEEA(String s) {
if (!s.trim().isEmpty()) {
HEWEEA = Byte.parseByte(s);
} else {
HEWEEA = Byte.MIN_VALUE;
}
}

protected final void initHOADP95(String s) {
if (!s.trim().isEmpty()) {
HOADP95 = Byte.parseByte(s);
} else {
HOADP95 = Byte.MIN_VALUE;
}
}

protected final void initHOADP96(String s) {
if (!s.trim().isEmpty()) {
HOADP96 = Byte.parseByte(s);
} else {
HOADP96 = Byte.MIN_VALUE;
}
}

protected final void initHOADPAD(String s) {
if (!s.trim().isEmpty()) {
HOADPAD = Byte.parseByte(s);
} else {
HOADPAD = Byte.MIN_VALUE;
}
}

protected final void initHOADPAL(String s) {
if (!s.trim().isEmpty()) {
HOADPAL = Byte.parseByte(s);
} else {
HOADPAL = Byte.MIN_VALUE;
}
}

protected final void initHOADPAP(String s) {
if (!s.trim().isEmpty()) {
HOADPAP = Byte.parseByte(s);
} else {
HOADPAP = Byte.MIN_VALUE;
}
}

protected final void initHOADPBM(String s) {
if (!s.trim().isEmpty()) {
HOADPBM = Byte.parseByte(s);
} else {
HOADPBM = Byte.MIN_VALUE;
}
}

protected final void initHOADPCL(String s) {
if (!s.trim().isEmpty()) {
HOADPCL = Byte.parseByte(s);
} else {
HOADPCL = Byte.MIN_VALUE;
}
}

protected final void initHOADPHR(String s) {
if (!s.trim().isEmpty()) {
HOADPHR = Byte.parseByte(s);
} else {
HOADPHR = Byte.MIN_VALUE;
}
}

protected final void initHOADPKM(String s) {
if (!s.trim().isEmpty()) {
HOADPKM = Byte.parseByte(s);
} else {
HOADPKM = Byte.MIN_VALUE;
}
}

protected final void initHOADPLI(String s) {
if (!s.trim().isEmpty()) {
HOADPLI = Byte.parseByte(s);
} else {
HOADPLI = Byte.MIN_VALUE;
}
}

protected final void initHOADPRS(String s) {
if (!s.trim().isEmpty()) {
HOADPRS = Byte.parseByte(s);
} else {
HOADPRS = Byte.MIN_VALUE;
}
}

protected final void initHOADPWD(String s) {
if (!s.trim().isEmpty()) {
HOADPWD = Byte.parseByte(s);
} else {
HOADPWD = Byte.MIN_VALUE;
}
}

protected final void initHOALF1(String s) {
if (!s.trim().isEmpty()) {
HOALF1 = Byte.parseByte(s);
} else {
HOALF1 = Byte.MIN_VALUE;
}
}

protected final void initHOALF1L(String s) {
if (!s.trim().isEmpty()) {
HOALF1L = Short.parseShort(s);
} else {
HOALF1L = Short.MIN_VALUE;
}
}

protected final void initHOALF1R(String s) {
if (!s.trim().isEmpty()) {
HOALF1R = Byte.parseByte(s);
} else {
HOALF1R = Byte.MIN_VALUE;
}
}

protected final void initHOALF1T(String s) {
if (!s.trim().isEmpty()) {
HOALF1T = Byte.parseByte(s);
} else {
HOALF1T = Byte.MIN_VALUE;
}
}

protected final void initHOALF1U(String s) {
if (!s.trim().isEmpty()) {
HOALF1U = Short.parseShort(s);
} else {
HOALF1U = Short.MIN_VALUE;
}
}

protected final void initHOALF2(String s) {
if (!s.trim().isEmpty()) {
HOALF2 = Byte.parseByte(s);
} else {
HOALF2 = Byte.MIN_VALUE;
}
}

protected final void initHOALF2L(String s) {
if (!s.trim().isEmpty()) {
HOALF2L = Short.parseShort(s);
} else {
HOALF2L = Short.MIN_VALUE;
}
}

protected final void initHOALF2R(String s) {
if (!s.trim().isEmpty()) {
HOALF2R = Byte.parseByte(s);
} else {
HOALF2R = Byte.MIN_VALUE;
}
}

protected final void initHOALF2T(String s) {
if (!s.trim().isEmpty()) {
HOALF2T = Byte.parseByte(s);
} else {
HOALF2T = Byte.MIN_VALUE;
}
}

protected final void initHOALF2U(String s) {
if (!s.trim().isEmpty()) {
HOALF2U = Short.parseShort(s);
} else {
HOALF2U = Short.MIN_VALUE;
}
}

protected final void initHOALFM1(String s) {
if (!s.trim().isEmpty()) {
HOALFM1 = Short.parseShort(s);
} else {
HOALFM1 = Short.MIN_VALUE;
}
}

protected final void initHOALFM2(String s) {
if (!s.trim().isEmpty()) {
HOALFM2 = Short.parseShort(s);
} else {
HOALFM2 = Short.MIN_VALUE;
}
}

protected final void initHOALI1(String s) {
if (!s.trim().isEmpty()) {
HOALI1 = Byte.parseByte(s);
} else {
HOALI1 = Byte.MIN_VALUE;
}
}

protected final void initHOALI2(String s) {
if (!s.trim().isEmpty()) {
HOALI2 = Byte.parseByte(s);
} else {
HOALI2 = Byte.MIN_VALUE;
}
}

protected final void initHOASK(String s) {
if (!s.trim().isEmpty()) {
HOASK = Byte.parseByte(s);
} else {
HOASK = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FE(String s) {
if (!s.trim().isEmpty()) {
HOBA2FE = Byte.parseByte(s);
} else {
HOBA2FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FL(String s) {
if (!s.trim().isEmpty()) {
HOBA2FL = Byte.parseByte(s);
} else {
HOBA2FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FR(String s) {
if (!s.trim().isEmpty()) {
HOBA2FR = Byte.parseByte(s);
} else {
HOBA2FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FU(String s) {
if (!s.trim().isEmpty()) {
HOBA2FU = Byte.parseByte(s);
} else {
HOBA2FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA2ME(String s) {
if (!s.trim().isEmpty()) {
HOBA2ME = Byte.parseByte(s);
} else {
HOBA2ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA2ML(String s) {
if (!s.trim().isEmpty()) {
HOBA2ML = Byte.parseByte(s);
} else {
HOBA2ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA2MR(String s) {
if (!s.trim().isEmpty()) {
HOBA2MR = Byte.parseByte(s);
} else {
HOBA2MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2MU(String s) {
if (!s.trim().isEmpty()) {
HOBA2MU = Byte.parseByte(s);
} else {
HOBA2MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA2OE(String s) {
if (!s.trim().isEmpty()) {
HOBA2OE = Byte.parseByte(s);
} else {
HOBA2OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2OL(String s) {
if (!s.trim().isEmpty()) {
HOBA2OL = Short.parseShort(s);
} else {
HOBA2OL = Short.MIN_VALUE;
}
}

protected final void initHOBA2OR(String s) {
if (!s.trim().isEmpty()) {
HOBA2OR = Byte.parseByte(s);
} else {
HOBA2OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2OU(String s) {
if (!s.trim().isEmpty()) {
HOBA2OU = Short.parseShort(s);
} else {
HOBA2OU = Short.MIN_VALUE;
}
}

protected final void initHOBA2WE(String s) {
if (!s.trim().isEmpty()) {
HOBA2WE = Byte.parseByte(s);
} else {
HOBA2WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2WL(String s) {
if (!s.trim().isEmpty()) {
HOBA2WL = Byte.parseByte(s);
} else {
HOBA2WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA2WR(String s) {
if (!s.trim().isEmpty()) {
HOBA2WR = Byte.parseByte(s);
} else {
HOBA2WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2WU(String s) {
if (!s.trim().isEmpty()) {
HOBA2WU = Byte.parseByte(s);
} else {
HOBA2WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YE(String s) {
if (!s.trim().isEmpty()) {
HOBA2YE = Byte.parseByte(s);
} else {
HOBA2YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YL(String s) {
if (!s.trim().isEmpty()) {
HOBA2YL = Byte.parseByte(s);
} else {
HOBA2YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YR(String s) {
if (!s.trim().isEmpty()) {
HOBA2YR = Byte.parseByte(s);
} else {
HOBA2YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YU(String s) {
if (!s.trim().isEmpty()) {
HOBA2YU = Byte.parseByte(s);
} else {
HOBA2YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FE(String s) {
if (!s.trim().isEmpty()) {
HOBA3FE = Byte.parseByte(s);
} else {
HOBA3FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FL(String s) {
if (!s.trim().isEmpty()) {
HOBA3FL = Byte.parseByte(s);
} else {
HOBA3FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FR(String s) {
if (!s.trim().isEmpty()) {
HOBA3FR = Byte.parseByte(s);
} else {
HOBA3FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FU(String s) {
if (!s.trim().isEmpty()) {
HOBA3FU = Byte.parseByte(s);
} else {
HOBA3FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA3ME(String s) {
if (!s.trim().isEmpty()) {
HOBA3ME = Byte.parseByte(s);
} else {
HOBA3ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA3ML(String s) {
if (!s.trim().isEmpty()) {
HOBA3ML = Short.parseShort(s);
} else {
HOBA3ML = Short.MIN_VALUE;
}
}

protected final void initHOBA3MR(String s) {
if (!s.trim().isEmpty()) {
HOBA3MR = Byte.parseByte(s);
} else {
HOBA3MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3MU(String s) {
if (!s.trim().isEmpty()) {
HOBA3MU = Short.parseShort(s);
} else {
HOBA3MU = Short.MIN_VALUE;
}
}

protected final void initHOBA3OE(String s) {
if (!s.trim().isEmpty()) {
HOBA3OE = Byte.parseByte(s);
} else {
HOBA3OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3OL(String s) {
if (!s.trim().isEmpty()) {
HOBA3OL = Short.parseShort(s);
} else {
HOBA3OL = Short.MIN_VALUE;
}
}

protected final void initHOBA3OR(String s) {
if (!s.trim().isEmpty()) {
HOBA3OR = Byte.parseByte(s);
} else {
HOBA3OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3OU(String s) {
if (!s.trim().isEmpty()) {
HOBA3OU = Short.parseShort(s);
} else {
HOBA3OU = Short.MIN_VALUE;
}
}

protected final void initHOBA3WE(String s) {
if (!s.trim().isEmpty()) {
HOBA3WE = Byte.parseByte(s);
} else {
HOBA3WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3WL(String s) {
if (!s.trim().isEmpty()) {
HOBA3WL = Byte.parseByte(s);
} else {
HOBA3WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA3WR(String s) {
if (!s.trim().isEmpty()) {
HOBA3WR = Byte.parseByte(s);
} else {
HOBA3WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3WU(String s) {
if (!s.trim().isEmpty()) {
HOBA3WU = Short.parseShort(s);
} else {
HOBA3WU = Short.MIN_VALUE;
}
}

protected final void initHOBA3YE(String s) {
if (!s.trim().isEmpty()) {
HOBA3YE = Byte.parseByte(s);
} else {
HOBA3YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3YL(String s) {
if (!s.trim().isEmpty()) {
HOBA3YL = Byte.parseByte(s);
} else {
HOBA3YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA3YR(String s) {
if (!s.trim().isEmpty()) {
HOBA3YR = Byte.parseByte(s);
} else {
HOBA3YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3YU(String s) {
if (!s.trim().isEmpty()) {
HOBA3YU = Byte.parseByte(s);
} else {
HOBA3YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FE(String s) {
if (!s.trim().isEmpty()) {
HOBA4FE = Byte.parseByte(s);
} else {
HOBA4FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FL(String s) {
if (!s.trim().isEmpty()) {
HOBA4FL = Byte.parseByte(s);
} else {
HOBA4FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FR(String s) {
if (!s.trim().isEmpty()) {
HOBA4FR = Byte.parseByte(s);
} else {
HOBA4FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FU(String s) {
if (!s.trim().isEmpty()) {
HOBA4FU = Byte.parseByte(s);
} else {
HOBA4FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA4ME(String s) {
if (!s.trim().isEmpty()) {
HOBA4ME = Byte.parseByte(s);
} else {
HOBA4ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA4ML(String s) {
if (!s.trim().isEmpty()) {
HOBA4ML = Short.parseShort(s);
} else {
HOBA4ML = Short.MIN_VALUE;
}
}

protected final void initHOBA4MR(String s) {
if (!s.trim().isEmpty()) {
HOBA4MR = Byte.parseByte(s);
} else {
HOBA4MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4MU(String s) {
if (!s.trim().isEmpty()) {
HOBA4MU = Short.parseShort(s);
} else {
HOBA4MU = Short.MIN_VALUE;
}
}

protected final void initHOBA4OE(String s) {
if (!s.trim().isEmpty()) {
HOBA4OE = Byte.parseByte(s);
} else {
HOBA4OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4OL(String s) {
if (!s.trim().isEmpty()) {
HOBA4OL = Short.parseShort(s);
} else {
HOBA4OL = Short.MIN_VALUE;
}
}

protected final void initHOBA4OR(String s) {
if (!s.trim().isEmpty()) {
HOBA4OR = Byte.parseByte(s);
} else {
HOBA4OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4OU(String s) {
if (!s.trim().isEmpty()) {
HOBA4OU = Short.parseShort(s);
} else {
HOBA4OU = Short.MIN_VALUE;
}
}

protected final void initHOBA4WE(String s) {
if (!s.trim().isEmpty()) {
HOBA4WE = Byte.parseByte(s);
} else {
HOBA4WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4WL(String s) {
if (!s.trim().isEmpty()) {
HOBA4WL = Short.parseShort(s);
} else {
HOBA4WL = Short.MIN_VALUE;
}
}

protected final void initHOBA4WR(String s) {
if (!s.trim().isEmpty()) {
HOBA4WR = Byte.parseByte(s);
} else {
HOBA4WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4WU(String s) {
if (!s.trim().isEmpty()) {
HOBA4WU = Short.parseShort(s);
} else {
HOBA4WU = Short.MIN_VALUE;
}
}

protected final void initHOBA4YE(String s) {
if (!s.trim().isEmpty()) {
HOBA4YE = Byte.parseByte(s);
} else {
HOBA4YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4YL(String s) {
if (!s.trim().isEmpty()) {
HOBA4YL = Byte.parseByte(s);
} else {
HOBA4YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA4YR(String s) {
if (!s.trim().isEmpty()) {
HOBA4YR = Byte.parseByte(s);
} else {
HOBA4YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4YU(String s) {
if (!s.trim().isEmpty()) {
HOBA4YU = Byte.parseByte(s);
} else {
HOBA4YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FE(String s) {
if (!s.trim().isEmpty()) {
HOBA5FE = Byte.parseByte(s);
} else {
HOBA5FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FL(String s) {
if (!s.trim().isEmpty()) {
HOBA5FL = Byte.parseByte(s);
} else {
HOBA5FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FR(String s) {
if (!s.trim().isEmpty()) {
HOBA5FR = Byte.parseByte(s);
} else {
HOBA5FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FU(String s) {
if (!s.trim().isEmpty()) {
HOBA5FU = Byte.parseByte(s);
} else {
HOBA5FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5ME(String s) {
if (!s.trim().isEmpty()) {
HOBA5ME = Byte.parseByte(s);
} else {
HOBA5ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA5ML(String s) {
if (!s.trim().isEmpty()) {
HOBA5ML = Short.parseShort(s);
} else {
HOBA5ML = Short.MIN_VALUE;
}
}

protected final void initHOBA5MR(String s) {
if (!s.trim().isEmpty()) {
HOBA5MR = Byte.parseByte(s);
} else {
HOBA5MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5MU(String s) {
if (!s.trim().isEmpty()) {
HOBA5MU = Short.parseShort(s);
} else {
HOBA5MU = Short.MIN_VALUE;
}
}

protected final void initHOBA5OE(String s) {
if (!s.trim().isEmpty()) {
HOBA5OE = Byte.parseByte(s);
} else {
HOBA5OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5OL(String s) {
if (!s.trim().isEmpty()) {
HOBA5OL = Byte.parseByte(s);
} else {
HOBA5OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5OR(String s) {
if (!s.trim().isEmpty()) {
HOBA5OR = Byte.parseByte(s);
} else {
HOBA5OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5OU(String s) {
if (!s.trim().isEmpty()) {
HOBA5OU = Byte.parseByte(s);
} else {
HOBA5OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WE(String s) {
if (!s.trim().isEmpty()) {
HOBA5WE = Byte.parseByte(s);
} else {
HOBA5WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WL(String s) {
if (!s.trim().isEmpty()) {
HOBA5WL = Byte.parseByte(s);
} else {
HOBA5WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WR(String s) {
if (!s.trim().isEmpty()) {
HOBA5WR = Byte.parseByte(s);
} else {
HOBA5WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WU(String s) {
if (!s.trim().isEmpty()) {
HOBA5WU = Byte.parseByte(s);
} else {
HOBA5WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YE(String s) {
if (!s.trim().isEmpty()) {
HOBA5YE = Byte.parseByte(s);
} else {
HOBA5YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YL(String s) {
if (!s.trim().isEmpty()) {
HOBA5YL = Byte.parseByte(s);
} else {
HOBA5YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YR(String s) {
if (!s.trim().isEmpty()) {
HOBA5YR = Byte.parseByte(s);
} else {
HOBA5YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YU(String s) {
if (!s.trim().isEmpty()) {
HOBA5YU = Byte.parseByte(s);
} else {
HOBA5YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FE(String s) {
if (!s.trim().isEmpty()) {
HOBA6FE = Byte.parseByte(s);
} else {
HOBA6FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FL(String s) {
if (!s.trim().isEmpty()) {
HOBA6FL = Byte.parseByte(s);
} else {
HOBA6FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FR(String s) {
if (!s.trim().isEmpty()) {
HOBA6FR = Byte.parseByte(s);
} else {
HOBA6FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FU(String s) {
if (!s.trim().isEmpty()) {
HOBA6FU = Byte.parseByte(s);
} else {
HOBA6FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6ME(String s) {
if (!s.trim().isEmpty()) {
HOBA6ME = Byte.parseByte(s);
} else {
HOBA6ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA6ML(String s) {
if (!s.trim().isEmpty()) {
HOBA6ML = Byte.parseByte(s);
} else {
HOBA6ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA6MR(String s) {
if (!s.trim().isEmpty()) {
HOBA6MR = Byte.parseByte(s);
} else {
HOBA6MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6MU(String s) {
if (!s.trim().isEmpty()) {
HOBA6MU = Byte.parseByte(s);
} else {
HOBA6MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OE(String s) {
if (!s.trim().isEmpty()) {
HOBA6OE = Byte.parseByte(s);
} else {
HOBA6OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OL(String s) {
if (!s.trim().isEmpty()) {
HOBA6OL = Byte.parseByte(s);
} else {
HOBA6OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OR(String s) {
if (!s.trim().isEmpty()) {
HOBA6OR = Byte.parseByte(s);
} else {
HOBA6OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OU(String s) {
if (!s.trim().isEmpty()) {
HOBA6OU = Byte.parseByte(s);
} else {
HOBA6OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WE(String s) {
if (!s.trim().isEmpty()) {
HOBA6WE = Byte.parseByte(s);
} else {
HOBA6WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WL(String s) {
if (!s.trim().isEmpty()) {
HOBA6WL = Byte.parseByte(s);
} else {
HOBA6WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WR(String s) {
if (!s.trim().isEmpty()) {
HOBA6WR = Byte.parseByte(s);
} else {
HOBA6WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WU(String s) {
if (!s.trim().isEmpty()) {
HOBA6WU = Byte.parseByte(s);
} else {
HOBA6WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YE(String s) {
if (!s.trim().isEmpty()) {
HOBA6YE = Byte.parseByte(s);
} else {
HOBA6YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YL(String s) {
if (!s.trim().isEmpty()) {
HOBA6YL = Byte.parseByte(s);
} else {
HOBA6YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YR(String s) {
if (!s.trim().isEmpty()) {
HOBA6YR = Byte.parseByte(s);
} else {
HOBA6YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YU(String s) {
if (!s.trim().isEmpty()) {
HOBA6YU = Byte.parseByte(s);
} else {
HOBA6YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FE(String s) {
if (!s.trim().isEmpty()) {
HOBA7FE = Byte.parseByte(s);
} else {
HOBA7FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FL(String s) {
if (!s.trim().isEmpty()) {
HOBA7FL = Byte.parseByte(s);
} else {
HOBA7FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FR(String s) {
if (!s.trim().isEmpty()) {
HOBA7FR = Byte.parseByte(s);
} else {
HOBA7FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FU(String s) {
if (!s.trim().isEmpty()) {
HOBA7FU = Byte.parseByte(s);
} else {
HOBA7FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7ME(String s) {
if (!s.trim().isEmpty()) {
HOBA7ME = Byte.parseByte(s);
} else {
HOBA7ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA7ML(String s) {
if (!s.trim().isEmpty()) {
HOBA7ML = Byte.parseByte(s);
} else {
HOBA7ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA7MR(String s) {
if (!s.trim().isEmpty()) {
HOBA7MR = Byte.parseByte(s);
} else {
HOBA7MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7MU(String s) {
if (!s.trim().isEmpty()) {
HOBA7MU = Byte.parseByte(s);
} else {
HOBA7MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OE(String s) {
if (!s.trim().isEmpty()) {
HOBA7OE = Byte.parseByte(s);
} else {
HOBA7OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OL(String s) {
if (!s.trim().isEmpty()) {
HOBA7OL = Byte.parseByte(s);
} else {
HOBA7OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OR(String s) {
if (!s.trim().isEmpty()) {
HOBA7OR = Byte.parseByte(s);
} else {
HOBA7OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OU(String s) {
if (!s.trim().isEmpty()) {
HOBA7OU = Byte.parseByte(s);
} else {
HOBA7OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WE(String s) {
if (!s.trim().isEmpty()) {
HOBA7WE = Byte.parseByte(s);
} else {
HOBA7WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WL(String s) {
if (!s.trim().isEmpty()) {
HOBA7WL = Byte.parseByte(s);
} else {
HOBA7WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WR(String s) {
if (!s.trim().isEmpty()) {
HOBA7WR = Byte.parseByte(s);
} else {
HOBA7WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WU(String s) {
if (!s.trim().isEmpty()) {
HOBA7WU = Byte.parseByte(s);
} else {
HOBA7WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YE(String s) {
if (!s.trim().isEmpty()) {
HOBA7YE = Byte.parseByte(s);
} else {
HOBA7YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YL(String s) {
if (!s.trim().isEmpty()) {
HOBA7YL = Byte.parseByte(s);
} else {
HOBA7YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YR(String s) {
if (!s.trim().isEmpty()) {
HOBA7YR = Byte.parseByte(s);
} else {
HOBA7YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YU(String s) {
if (!s.trim().isEmpty()) {
HOBA7YU = Byte.parseByte(s);
} else {
HOBA7YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FE(String s) {
if (!s.trim().isEmpty()) {
HOBA8FE = Byte.parseByte(s);
} else {
HOBA8FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FL(String s) {
if (!s.trim().isEmpty()) {
HOBA8FL = Byte.parseByte(s);
} else {
HOBA8FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FR(String s) {
if (!s.trim().isEmpty()) {
HOBA8FR = Byte.parseByte(s);
} else {
HOBA8FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FU(String s) {
if (!s.trim().isEmpty()) {
HOBA8FU = Byte.parseByte(s);
} else {
HOBA8FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8ME(String s) {
if (!s.trim().isEmpty()) {
HOBA8ME = Byte.parseByte(s);
} else {
HOBA8ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA8ML(String s) {
if (!s.trim().isEmpty()) {
HOBA8ML = Byte.parseByte(s);
} else {
HOBA8ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA8MR(String s) {
if (!s.trim().isEmpty()) {
HOBA8MR = Byte.parseByte(s);
} else {
HOBA8MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8MU(String s) {
if (!s.trim().isEmpty()) {
HOBA8MU = Byte.parseByte(s);
} else {
HOBA8MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OE(String s) {
if (!s.trim().isEmpty()) {
HOBA8OE = Byte.parseByte(s);
} else {
HOBA8OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OL(String s) {
if (!s.trim().isEmpty()) {
HOBA8OL = Byte.parseByte(s);
} else {
HOBA8OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OR(String s) {
if (!s.trim().isEmpty()) {
HOBA8OR = Byte.parseByte(s);
} else {
HOBA8OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OU(String s) {
if (!s.trim().isEmpty()) {
HOBA8OU = Byte.parseByte(s);
} else {
HOBA8OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WE(String s) {
if (!s.trim().isEmpty()) {
HOBA8WE = Byte.parseByte(s);
} else {
HOBA8WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WL(String s) {
if (!s.trim().isEmpty()) {
HOBA8WL = Byte.parseByte(s);
} else {
HOBA8WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WR(String s) {
if (!s.trim().isEmpty()) {
HOBA8WR = Byte.parseByte(s);
} else {
HOBA8WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WU(String s) {
if (!s.trim().isEmpty()) {
HOBA8WU = Byte.parseByte(s);
} else {
HOBA8WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YE(String s) {
if (!s.trim().isEmpty()) {
HOBA8YE = Byte.parseByte(s);
} else {
HOBA8YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YL(String s) {
if (!s.trim().isEmpty()) {
HOBA8YL = Byte.parseByte(s);
} else {
HOBA8YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YR(String s) {
if (!s.trim().isEmpty()) {
HOBA8YR = Byte.parseByte(s);
} else {
HOBA8YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YU(String s) {
if (!s.trim().isEmpty()) {
HOBA8YU = Byte.parseByte(s);
} else {
HOBA8YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FE(String s) {
if (!s.trim().isEmpty()) {
HOBA9FE = Byte.parseByte(s);
} else {
HOBA9FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FL(String s) {
if (!s.trim().isEmpty()) {
HOBA9FL = Byte.parseByte(s);
} else {
HOBA9FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FR(String s) {
if (!s.trim().isEmpty()) {
HOBA9FR = Byte.parseByte(s);
} else {
HOBA9FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FU(String s) {
if (!s.trim().isEmpty()) {
HOBA9FU = Byte.parseByte(s);
} else {
HOBA9FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9ME(String s) {
if (!s.trim().isEmpty()) {
HOBA9ME = Byte.parseByte(s);
} else {
HOBA9ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA9ML(String s) {
if (!s.trim().isEmpty()) {
HOBA9ML = Byte.parseByte(s);
} else {
HOBA9ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA9MR(String s) {
if (!s.trim().isEmpty()) {
HOBA9MR = Byte.parseByte(s);
} else {
HOBA9MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9MU(String s) {
if (!s.trim().isEmpty()) {
HOBA9MU = Byte.parseByte(s);
} else {
HOBA9MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OE(String s) {
if (!s.trim().isEmpty()) {
HOBA9OE = Byte.parseByte(s);
} else {
HOBA9OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OL(String s) {
if (!s.trim().isEmpty()) {
HOBA9OL = Byte.parseByte(s);
} else {
HOBA9OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OR(String s) {
if (!s.trim().isEmpty()) {
HOBA9OR = Byte.parseByte(s);
} else {
HOBA9OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OU(String s) {
if (!s.trim().isEmpty()) {
HOBA9OU = Byte.parseByte(s);
} else {
HOBA9OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WE(String s) {
if (!s.trim().isEmpty()) {
HOBA9WE = Byte.parseByte(s);
} else {
HOBA9WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WL(String s) {
if (!s.trim().isEmpty()) {
HOBA9WL = Byte.parseByte(s);
} else {
HOBA9WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WR(String s) {
if (!s.trim().isEmpty()) {
HOBA9WR = Byte.parseByte(s);
} else {
HOBA9WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WU(String s) {
if (!s.trim().isEmpty()) {
HOBA9WU = Byte.parseByte(s);
} else {
HOBA9WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YE(String s) {
if (!s.trim().isEmpty()) {
HOBA9YE = Byte.parseByte(s);
} else {
HOBA9YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YL(String s) {
if (!s.trim().isEmpty()) {
HOBA9YL = Byte.parseByte(s);
} else {
HOBA9YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YR(String s) {
if (!s.trim().isEmpty()) {
HOBA9YR = Byte.parseByte(s);
} else {
HOBA9YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YU(String s) {
if (!s.trim().isEmpty()) {
HOBA9YU = Byte.parseByte(s);
} else {
HOBA9YU = Byte.MIN_VALUE;
}
}

protected final void initHOBAFE(String s) {
if (!s.trim().isEmpty()) {
HOBAFE = Byte.parseByte(s);
} else {
HOBAFE = Byte.MIN_VALUE;
}
}

protected final void initHOBAFL(String s) {
if (!s.trim().isEmpty()) {
HOBAFL = Byte.parseByte(s);
} else {
HOBAFL = Byte.MIN_VALUE;
}
}

protected final void initHOBAFR(String s) {
if (!s.trim().isEmpty()) {
HOBAFR = Byte.parseByte(s);
} else {
HOBAFR = Byte.MIN_VALUE;
}
}

protected final void initHOBAFU(String s) {
if (!s.trim().isEmpty()) {
HOBAFU = Byte.parseByte(s);
} else {
HOBAFU = Byte.MIN_VALUE;
}
}

protected final void initHOBAME(String s) {
if (!s.trim().isEmpty()) {
HOBAME = Byte.parseByte(s);
} else {
HOBAME = Byte.MIN_VALUE;
}
}

protected final void initHOBAML(String s) {
if (!s.trim().isEmpty()) {
HOBAML = Short.parseShort(s);
} else {
HOBAML = Short.MIN_VALUE;
}
}

protected final void initHOBAMR(String s) {
if (!s.trim().isEmpty()) {
HOBAMR = Byte.parseByte(s);
} else {
HOBAMR = Byte.MIN_VALUE;
}
}

protected final void initHOBAMU(String s) {
if (!s.trim().isEmpty()) {
HOBAMU = Short.parseShort(s);
} else {
HOBAMU = Short.MIN_VALUE;
}
}

protected final void initHOBAOE(String s) {
if (!s.trim().isEmpty()) {
HOBAOE = Byte.parseByte(s);
} else {
HOBAOE = Byte.MIN_VALUE;
}
}

protected final void initHOBAOL(String s) {
if (!s.trim().isEmpty()) {
HOBAOL = Short.parseShort(s);
} else {
HOBAOL = Short.MIN_VALUE;
}
}

protected final void initHOBAOR(String s) {
if (!s.trim().isEmpty()) {
HOBAOR = Byte.parseByte(s);
} else {
HOBAOR = Byte.MIN_VALUE;
}
}

protected final void initHOBAOU(String s) {
if (!s.trim().isEmpty()) {
HOBAOU = Short.parseShort(s);
} else {
HOBAOU = Short.MIN_VALUE;
}
}

protected final void initHOBAWE(String s) {
if (!s.trim().isEmpty()) {
HOBAWE = Byte.parseByte(s);
} else {
HOBAWE = Byte.MIN_VALUE;
}
}

protected final void initHOBAWL(String s) {
if (!s.trim().isEmpty()) {
HOBAWL = Short.parseShort(s);
} else {
HOBAWL = Short.MIN_VALUE;
}
}

protected final void initHOBAWR(String s) {
if (!s.trim().isEmpty()) {
HOBAWR = Byte.parseByte(s);
} else {
HOBAWR = Byte.MIN_VALUE;
}
}

protected final void initHOBAWU(String s) {
if (!s.trim().isEmpty()) {
HOBAWU = Byte.parseByte(s);
} else {
HOBAWU = Byte.MIN_VALUE;
}
}

protected final void initHOBAYE(String s) {
if (!s.trim().isEmpty()) {
HOBAYE = Byte.parseByte(s);
} else {
HOBAYE = Byte.MIN_VALUE;
}
}

protected final void initHOBAYL(String s) {
if (!s.trim().isEmpty()) {
HOBAYL = Byte.parseByte(s);
} else {
HOBAYL = Byte.MIN_VALUE;
}
}

protected final void initHOBAYR(String s) {
if (!s.trim().isEmpty()) {
HOBAYR = Byte.parseByte(s);
} else {
HOBAYR = Byte.MIN_VALUE;
}
}

protected final void initHOBAYU(String s) {
if (!s.trim().isEmpty()) {
HOBAYU = Short.parseShort(s);
} else {
HOBAYU = Short.MIN_VALUE;
}
}

protected final void initHOCC01(String s) {
if (!s.trim().isEmpty()) {
HOCC01 = Byte.parseByte(s);
} else {
HOCC01 = Byte.MIN_VALUE;
}
}

protected final void initHOCC02(String s) {
if (!s.trim().isEmpty()) {
HOCC02 = Byte.parseByte(s);
} else {
HOCC02 = Byte.MIN_VALUE;
}
}

protected final void initHOCC03(String s) {
if (!s.trim().isEmpty()) {
HOCC03 = Byte.parseByte(s);
} else {
HOCC03 = Byte.MIN_VALUE;
}
}

protected final void initHOCC04(String s) {
if (!s.trim().isEmpty()) {
HOCC04 = Byte.parseByte(s);
} else {
HOCC04 = Byte.MIN_VALUE;
}
}

protected final void initHOCC05(String s) {
if (!s.trim().isEmpty()) {
HOCC05 = Byte.parseByte(s);
} else {
HOCC05 = Byte.MIN_VALUE;
}
}

protected final void initHOCC06(String s) {
if (!s.trim().isEmpty()) {
HOCC06 = Byte.parseByte(s);
} else {
HOCC06 = Byte.MIN_VALUE;
}
}

protected final void initHOCC07(String s) {
if (!s.trim().isEmpty()) {
HOCC07 = Byte.parseByte(s);
} else {
HOCC07 = Byte.MIN_VALUE;
}
}

protected final void initHOCC08(String s) {
if (!s.trim().isEmpty()) {
HOCC08 = Byte.parseByte(s);
} else {
HOCC08 = Byte.MIN_VALUE;
}
}

protected final void initHOCC09(String s) {
if (!s.trim().isEmpty()) {
HOCC09 = Byte.parseByte(s);
} else {
HOCC09 = Byte.MIN_VALUE;
}
}

protected final void initHOCC10(String s) {
if (!s.trim().isEmpty()) {
HOCC10 = Byte.parseByte(s);
} else {
HOCC10 = Byte.MIN_VALUE;
}
}

protected final void initHOCC11(String s) {
if (!s.trim().isEmpty()) {
HOCC11 = Byte.parseByte(s);
} else {
HOCC11 = Byte.MIN_VALUE;
}
}

protected final void initHOCC12(String s) {
if (!s.trim().isEmpty()) {
HOCC12 = Byte.parseByte(s);
} else {
HOCC12 = Byte.MIN_VALUE;
}
}

protected final void initHOCC13(String s) {
if (!s.trim().isEmpty()) {
HOCC13 = Byte.parseByte(s);
} else {
HOCC13 = Byte.MIN_VALUE;
}
}

protected final void initHOCC14(String s) {
if (!s.trim().isEmpty()) {
HOCC14 = Byte.parseByte(s);
} else {
HOCC14 = Byte.MIN_VALUE;
}
}

protected final void initHOCC15(String s) {
if (!s.trim().isEmpty()) {
HOCC15 = Byte.parseByte(s);
} else {
HOCC15 = Byte.MIN_VALUE;
}
}

protected final void initHOCC16(String s) {
if (!s.trim().isEmpty()) {
HOCC16 = Byte.parseByte(s);
} else {
HOCC16 = Byte.MIN_VALUE;
}
}

protected final void initHOCC17(String s) {
if (!s.trim().isEmpty()) {
HOCC17 = Byte.parseByte(s);
} else {
HOCC17 = Byte.MIN_VALUE;
}
}

protected final void initHOCC18(String s) {
if (!s.trim().isEmpty()) {
HOCC18 = Byte.parseByte(s);
} else {
HOCC18 = Byte.MIN_VALUE;
}
}

protected final void initHOCC19(String s) {
if (!s.trim().isEmpty()) {
HOCC19 = Byte.parseByte(s);
} else {
HOCC19 = Byte.MIN_VALUE;
}
}

protected final void initHOCC20(String s) {
if (!s.trim().isEmpty()) {
HOCC20 = Byte.parseByte(s);
} else {
HOCC20 = Byte.MIN_VALUE;
}
}

protected final void initHOCENP(String s) {
if (!s.trim().isEmpty()) {
HOCENP = Byte.parseByte(s);
} else {
HOCENP = Byte.MIN_VALUE;
}
}

protected final void initHOCL(String s) {
if (!s.trim().isEmpty()) {
HOCL = Short.parseShort(s);
} else {
HOCL = Short.MIN_VALUE;
}
}

protected final void initHOCLE(String s) {
if (!s.trim().isEmpty()) {
HOCLE = Byte.parseByte(s);
} else {
HOCLE = Byte.MIN_VALUE;
}
}

protected final void initHOCLL(String s) {
if (!s.trim().isEmpty()) {
HOCLL = Short.parseShort(s);
} else {
HOCLL = Short.MIN_VALUE;
}
}

protected final void initHOCLR(String s) {
if (!s.trim().isEmpty()) {
HOCLR = Byte.parseByte(s);
} else {
HOCLR = Byte.MIN_VALUE;
}
}

protected final void initHOCLU(String s) {
if (!s.trim().isEmpty()) {
HOCLU = Short.parseShort(s);
} else {
HOCLU = Short.MIN_VALUE;
}
}

protected final void initHOEB(String s) {
if (!s.trim().isEmpty()) {
HOEB = Byte.parseByte(s);
} else {
HOEB = Byte.MIN_VALUE;
}
}

protected final void initHOEBMS(String s) {
if (!s.trim().isEmpty()) {
HOEBMS = Short.parseShort(s);
} else {
HOEBMS = Short.MIN_VALUE;
}
}

protected final void initHOEBMSE(String s) {
if (!s.trim().isEmpty()) {
HOEBMSE = Byte.parseByte(s);
} else {
HOEBMSE = Byte.MIN_VALUE;
}
}

protected final void initHOEBMSL(String s) {
if (!s.trim().isEmpty()) {
HOEBMSL = Byte.parseByte(s);
} else {
HOEBMSL = Byte.MIN_VALUE;
}
}

protected final void initHOEBMSR(String s) {
if (!s.trim().isEmpty()) {
HOEBMSR = Byte.parseByte(s);
} else {
HOEBMSR = Byte.MIN_VALUE;
}
}

protected final void initHOEBMSU(String s) {
if (!s.trim().isEmpty()) {
HOEBMSU = Byte.parseByte(s);
} else {
HOEBMSU = Byte.MIN_VALUE;
}
}

protected final void initHOEBMW(String s) {
if (!s.trim().isEmpty()) {
HOEBMW = Short.parseShort(s);
} else {
HOEBMW = Short.MIN_VALUE;
}
}

protected final void initHOEBMWE(String s) {
if (!s.trim().isEmpty()) {
HOEBMWE = Byte.parseByte(s);
} else {
HOEBMWE = Byte.MIN_VALUE;
}
}

protected final void initHOEBMWL(String s) {
if (!s.trim().isEmpty()) {
HOEBMWL = Byte.parseByte(s);
} else {
HOEBMWL = Byte.MIN_VALUE;
}
}

protected final void initHOEBMWR(String s) {
if (!s.trim().isEmpty()) {
HOEBMWR = Byte.parseByte(s);
} else {
HOEBMWR = Byte.MIN_VALUE;
}
}

protected final void initHOEBMWU(String s) {
if (!s.trim().isEmpty()) {
HOEBMWU = Byte.parseByte(s);
} else {
HOEBMWU = Byte.MIN_VALUE;
}
}

protected final void initHOEBQS(String s) {
if (!s.trim().isEmpty()) {
HOEBQS = Short.parseShort(s);
} else {
HOEBQS = Short.MIN_VALUE;
}
}

protected final void initHOEBQSE(String s) {
if (!s.trim().isEmpty()) {
HOEBQSE = Byte.parseByte(s);
} else {
HOEBQSE = Byte.MIN_VALUE;
}
}

protected final void initHOEBQSL(String s) {
if (!s.trim().isEmpty()) {
HOEBQSL = Short.parseShort(s);
} else {
HOEBQSL = Short.MIN_VALUE;
}
}

protected final void initHOEBQSR(String s) {
if (!s.trim().isEmpty()) {
HOEBQSR = Byte.parseByte(s);
} else {
HOEBQSR = Byte.MIN_VALUE;
}
}

protected final void initHOEBQSU(String s) {
if (!s.trim().isEmpty()) {
HOEBQSU = Short.parseShort(s);
} else {
HOEBQSU = Short.MIN_VALUE;
}
}

protected final void initHOEBQW(String s) {
if (!s.trim().isEmpty()) {
HOEBQW = Short.parseShort(s);
} else {
HOEBQW = Short.MIN_VALUE;
}
}

protected final void initHOEBQWE(String s) {
if (!s.trim().isEmpty()) {
HOEBQWE = Byte.parseByte(s);
} else {
HOEBQWE = Byte.MIN_VALUE;
}
}

protected final void initHOEBQWL(String s) {
if (!s.trim().isEmpty()) {
HOEBQWL = Short.parseShort(s);
} else {
HOEBQWL = Short.MIN_VALUE;
}
}

protected final void initHOEBQWR(String s) {
if (!s.trim().isEmpty()) {
HOEBQWR = Byte.parseByte(s);
} else {
HOEBQWR = Byte.MIN_VALUE;
}
}

protected final void initHOEBQWU(String s) {
if (!s.trim().isEmpty()) {
HOEBQWU = Short.parseShort(s);
} else {
HOEBQWU = Short.MIN_VALUE;
}
}

protected final void initHOED(String s) {
if (!s.trim().isEmpty()) {
HOED = Byte.parseByte(s);
} else {
HOED = Byte.MIN_VALUE;
}
}

protected final void initHOEDM(String s) {
if (!s.trim().isEmpty()) {
HOEDM = Short.parseShort(s);
} else {
HOEDM = Short.MIN_VALUE;
}
}

protected final void initHOEDME(String s) {
if (!s.trim().isEmpty()) {
HOEDME = Byte.parseByte(s);
} else {
HOEDME = Byte.MIN_VALUE;
}
}

protected final void initHOEDML(String s) {
if (!s.trim().isEmpty()) {
HOEDML = Byte.parseByte(s);
} else {
HOEDML = Byte.MIN_VALUE;
}
}

protected final void initHOEDMR(String s) {
if (!s.trim().isEmpty()) {
HOEDMR = Byte.parseByte(s);
} else {
HOEDMR = Byte.MIN_VALUE;
}
}

protected final void initHOEDMU(String s) {
if (!s.trim().isEmpty()) {
HOEDMU = Byte.parseByte(s);
} else {
HOEDMU = Byte.MIN_VALUE;
}
}

protected final void initHOEDQ(String s) {
if (!s.trim().isEmpty()) {
HOEDQ = Short.parseShort(s);
} else {
HOEDQ = Short.MIN_VALUE;
}
}

protected final void initHOEDQE(String s) {
if (!s.trim().isEmpty()) {
HOEDQE = Byte.parseByte(s);
} else {
HOEDQE = Byte.MIN_VALUE;
}
}

protected final void initHOEDQL(String s) {
if (!s.trim().isEmpty()) {
HOEDQL = Short.parseShort(s);
} else {
HOEDQL = Short.MIN_VALUE;
}
}

protected final void initHOEDQR(String s) {
if (!s.trim().isEmpty()) {
HOEDQR = Byte.parseByte(s);
} else {
HOEDQR = Byte.MIN_VALUE;
}
}

protected final void initHOEDQU(String s) {
if (!s.trim().isEmpty()) {
HOEDQU = Short.parseShort(s);
} else {
HOEDQU = Short.MIN_VALUE;
}
}

protected final void initHOEOS(String s) {
if (!s.trim().isEmpty()) {
HOEOS = Byte.parseByte(s);
} else {
HOEOS = Byte.MIN_VALUE;
}
}

protected final void initHOEOSE(String s) {
if (!s.trim().isEmpty()) {
HOEOSE = Byte.parseByte(s);
} else {
HOEOSE = Byte.MIN_VALUE;
}
}

protected final void initHOEOSL(String s) {
if (!s.trim().isEmpty()) {
HOEOSL = Byte.parseByte(s);
} else {
HOEOSL = Byte.MIN_VALUE;
}
}

protected final void initHOEOSR(String s) {
if (!s.trim().isEmpty()) {
HOEOSR = Byte.parseByte(s);
} else {
HOEOSR = Byte.MIN_VALUE;
}
}

protected final void initHOEOSU(String s) {
if (!s.trim().isEmpty()) {
HOEOSU = Byte.parseByte(s);
} else {
HOEOSU = Byte.MIN_VALUE;
}
}

protected final void initHOEOW(String s) {
if (!s.trim().isEmpty()) {
HOEOW = Byte.parseByte(s);
} else {
HOEOW = Byte.MIN_VALUE;
}
}

protected final void initHOEOWE(String s) {
if (!s.trim().isEmpty()) {
HOEOWE = Byte.parseByte(s);
} else {
HOEOWE = Byte.MIN_VALUE;
}
}

protected final void initHOEOWL(String s) {
if (!s.trim().isEmpty()) {
HOEOWL = Byte.parseByte(s);
} else {
HOEOWL = Byte.MIN_VALUE;
}
}

protected final void initHOEOWR(String s) {
if (!s.trim().isEmpty()) {
HOEOWR = Byte.parseByte(s);
} else {
HOEOWR = Byte.MIN_VALUE;
}
}

protected final void initHOEOWU(String s) {
if (!s.trim().isEmpty()) {
HOEOWU = Byte.parseByte(s);
} else {
HOEOWU = Byte.MIN_VALUE;
}
}

protected final void initHOEPAY(String s) {
if (!s.trim().isEmpty()) {
HOEPAY = Byte.parseByte(s);
} else {
HOEPAY = Byte.MIN_VALUE;
}
}

protected final void initHOEPS(String s) {
if (!s.trim().isEmpty()) {
HOEPS = Byte.parseByte(s);
} else {
HOEPS = Byte.MIN_VALUE;
}
}

protected final void initHOEPSE(String s) {
if (!s.trim().isEmpty()) {
HOEPSE = Byte.parseByte(s);
} else {
HOEPSE = Byte.MIN_VALUE;
}
}

protected final void initHOEPSL(String s) {
if (!s.trim().isEmpty()) {
HOEPSL = Byte.parseByte(s);
} else {
HOEPSL = Byte.MIN_VALUE;
}
}

protected final void initHOEPSR(String s) {
if (!s.trim().isEmpty()) {
HOEPSR = Byte.parseByte(s);
} else {
HOEPSR = Byte.MIN_VALUE;
}
}

protected final void initHOEPSU(String s) {
if (!s.trim().isEmpty()) {
HOEPSU = Byte.parseByte(s);
} else {
HOEPSU = Byte.MIN_VALUE;
}
}

protected final void initHOEPW(String s) {
if (!s.trim().isEmpty()) {
HOEPW = Byte.parseByte(s);
} else {
HOEPW = Byte.MIN_VALUE;
}
}

protected final void initHOEPWE(String s) {
if (!s.trim().isEmpty()) {
HOEPWE = Byte.parseByte(s);
} else {
HOEPWE = Byte.MIN_VALUE;
}
}

protected final void initHOEPWL(String s) {
if (!s.trim().isEmpty()) {
HOEPWL = Byte.parseByte(s);
} else {
HOEPWL = Byte.MIN_VALUE;
}
}

protected final void initHOEPWR(String s) {
if (!s.trim().isEmpty()) {
HOEPWR = Byte.parseByte(s);
} else {
HOEPWR = Byte.MIN_VALUE;
}
}

protected final void initHOEPWU(String s) {
if (!s.trim().isEmpty()) {
HOEPWU = Byte.parseByte(s);
} else {
HOEPWU = Byte.MIN_VALUE;
}
}

protected final void initHOFB(String s) {
if (!s.trim().isEmpty()) {
HOFB = Byte.parseByte(s);
} else {
HOFB = Byte.MIN_VALUE;
}
}

protected final void initHOFBMS(String s) {
if (!s.trim().isEmpty()) {
HOFBMS = Short.parseShort(s);
} else {
HOFBMS = Short.MIN_VALUE;
}
}

protected final void initHOFBMSE(String s) {
if (!s.trim().isEmpty()) {
HOFBMSE = Byte.parseByte(s);
} else {
HOFBMSE = Byte.MIN_VALUE;
}
}

protected final void initHOFBMSL(String s) {
if (!s.trim().isEmpty()) {
HOFBMSL = Byte.parseByte(s);
} else {
HOFBMSL = Byte.MIN_VALUE;
}
}

protected final void initHOFBMSR(String s) {
if (!s.trim().isEmpty()) {
HOFBMSR = Byte.parseByte(s);
} else {
HOFBMSR = Byte.MIN_VALUE;
}
}

protected final void initHOFBMSU(String s) {
if (!s.trim().isEmpty()) {
HOFBMSU = Byte.parseByte(s);
} else {
HOFBMSU = Byte.MIN_VALUE;
}
}

protected final void initHOFBMW(String s) {
if (!s.trim().isEmpty()) {
HOFBMW = Short.parseShort(s);
} else {
HOFBMW = Short.MIN_VALUE;
}
}

protected final void initHOFBMWE(String s) {
if (!s.trim().isEmpty()) {
HOFBMWE = Byte.parseByte(s);
} else {
HOFBMWE = Byte.MIN_VALUE;
}
}

protected final void initHOFBMWL(String s) {
if (!s.trim().isEmpty()) {
HOFBMWL = Byte.parseByte(s);
} else {
HOFBMWL = Byte.MIN_VALUE;
}
}

protected final void initHOFBMWR(String s) {
if (!s.trim().isEmpty()) {
HOFBMWR = Byte.parseByte(s);
} else {
HOFBMWR = Byte.MIN_VALUE;
}
}

protected final void initHOFBMWU(String s) {
if (!s.trim().isEmpty()) {
HOFBMWU = Byte.parseByte(s);
} else {
HOFBMWU = Byte.MIN_VALUE;
}
}

protected final void initHOFBQS(String s) {
if (!s.trim().isEmpty()) {
HOFBQS = Short.parseShort(s);
} else {
HOFBQS = Short.MIN_VALUE;
}
}

protected final void initHOFBQSE(String s) {
if (!s.trim().isEmpty()) {
HOFBQSE = Byte.parseByte(s);
} else {
HOFBQSE = Byte.MIN_VALUE;
}
}

protected final void initHOFBQSL(String s) {
if (!s.trim().isEmpty()) {
HOFBQSL = Short.parseShort(s);
} else {
HOFBQSL = Short.MIN_VALUE;
}
}

protected final void initHOFBQSR(String s) {
if (!s.trim().isEmpty()) {
HOFBQSR = Byte.parseByte(s);
} else {
HOFBQSR = Byte.MIN_VALUE;
}
}

protected final void initHOFBQSU(String s) {
if (!s.trim().isEmpty()) {
HOFBQSU = Short.parseShort(s);
} else {
HOFBQSU = Short.MIN_VALUE;
}
}

protected final void initHOFBQW(String s) {
if (!s.trim().isEmpty()) {
HOFBQW = Short.parseShort(s);
} else {
HOFBQW = Short.MIN_VALUE;
}
}

protected final void initHOFBQWE(String s) {
if (!s.trim().isEmpty()) {
HOFBQWE = Byte.parseByte(s);
} else {
HOFBQWE = Byte.MIN_VALUE;
}
}

protected final void initHOFBQWL(String s) {
if (!s.trim().isEmpty()) {
HOFBQWL = Short.parseShort(s);
} else {
HOFBQWL = Short.MIN_VALUE;
}
}

protected final void initHOFBQWR(String s) {
if (!s.trim().isEmpty()) {
HOFBQWR = Byte.parseByte(s);
} else {
HOFBQWR = Byte.MIN_VALUE;
}
}

protected final void initHOFBQWU(String s) {
if (!s.trim().isEmpty()) {
HOFBQWU = Short.parseShort(s);
} else {
HOFBQWU = Short.MIN_VALUE;
}
}

protected final void initHOFCS(String s) {
if (!s.trim().isEmpty()) {
HOFCS = Byte.parseByte(s);
} else {
HOFCS = Byte.MIN_VALUE;
}
}

protected final void initHOFCSE(String s) {
if (!s.trim().isEmpty()) {
HOFCSE = Byte.parseByte(s);
} else {
HOFCSE = Byte.MIN_VALUE;
}
}

protected final void initHOFCSL(String s) {
if (!s.trim().isEmpty()) {
HOFCSL = Byte.parseByte(s);
} else {
HOFCSL = Byte.MIN_VALUE;
}
}

protected final void initHOFCSR(String s) {
if (!s.trim().isEmpty()) {
HOFCSR = Byte.parseByte(s);
} else {
HOFCSR = Byte.MIN_VALUE;
}
}

protected final void initHOFCSU(String s) {
if (!s.trim().isEmpty()) {
HOFCSU = Byte.parseByte(s);
} else {
HOFCSU = Byte.MIN_VALUE;
}
}

protected final void initHOFCW(String s) {
if (!s.trim().isEmpty()) {
HOFCW = Byte.parseByte(s);
} else {
HOFCW = Byte.MIN_VALUE;
}
}

protected final void initHOFCWE(String s) {
if (!s.trim().isEmpty()) {
HOFCWE = Byte.parseByte(s);
} else {
HOFCWE = Byte.MIN_VALUE;
}
}

protected final void initHOFCWL(String s) {
if (!s.trim().isEmpty()) {
HOFCWL = Byte.parseByte(s);
} else {
HOFCWL = Byte.MIN_VALUE;
}
}

protected final void initHOFCWR(String s) {
if (!s.trim().isEmpty()) {
HOFCWR = Byte.parseByte(s);
} else {
HOFCWR = Byte.MIN_VALUE;
}
}

protected final void initHOFCWU(String s) {
if (!s.trim().isEmpty()) {
HOFCWU = Byte.parseByte(s);
} else {
HOFCWU = Byte.MIN_VALUE;
}
}

protected final void initHOFD(String s) {
if (!s.trim().isEmpty()) {
HOFD = Byte.parseByte(s);
} else {
HOFD = Byte.MIN_VALUE;
}
}

protected final void initHOFDM(String s) {
if (!s.trim().isEmpty()) {
HOFDM = Short.parseShort(s);
} else {
HOFDM = Short.MIN_VALUE;
}
}

protected final void initHOFDME(String s) {
if (!s.trim().isEmpty()) {
HOFDME = Byte.parseByte(s);
} else {
HOFDME = Byte.MIN_VALUE;
}
}

protected final void initHOFDML(String s) {
if (!s.trim().isEmpty()) {
HOFDML = Byte.parseByte(s);
} else {
HOFDML = Byte.MIN_VALUE;
}
}

protected final void initHOFDMR(String s) {
if (!s.trim().isEmpty()) {
HOFDMR = Byte.parseByte(s);
} else {
HOFDMR = Byte.MIN_VALUE;
}
}

protected final void initHOFDMU(String s) {
if (!s.trim().isEmpty()) {
HOFDMU = Byte.parseByte(s);
} else {
HOFDMU = Byte.MIN_VALUE;
}
}

protected final void initHOFDQ(String s) {
if (!s.trim().isEmpty()) {
HOFDQ = Short.parseShort(s);
} else {
HOFDQ = Short.MIN_VALUE;
}
}

protected final void initHOFDQE(String s) {
if (!s.trim().isEmpty()) {
HOFDQE = Byte.parseByte(s);
} else {
HOFDQE = Byte.MIN_VALUE;
}
}

protected final void initHOFDQL(String s) {
if (!s.trim().isEmpty()) {
HOFDQL = Short.parseShort(s);
} else {
HOFDQL = Short.MIN_VALUE;
}
}

protected final void initHOFDQR(String s) {
if (!s.trim().isEmpty()) {
HOFDQR = Byte.parseByte(s);
} else {
HOFDQR = Byte.MIN_VALUE;
}
}

protected final void initHOFDQU(String s) {
if (!s.trim().isEmpty()) {
HOFDQU = Short.parseShort(s);
} else {
HOFDQU = Short.MIN_VALUE;
}
}

protected final void initHOFOIS(String s) {
if (!s.trim().isEmpty()) {
HOFOIS = Byte.parseByte(s);
} else {
HOFOIS = Byte.MIN_VALUE;
}
}

protected final void initHOFOISE(String s) {
if (!s.trim().isEmpty()) {
HOFOISE = Byte.parseByte(s);
} else {
HOFOISE = Byte.MIN_VALUE;
}
}

protected final void initHOFOISL(String s) {
if (!s.trim().isEmpty()) {
HOFOISL = Byte.parseByte(s);
} else {
HOFOISL = Byte.MIN_VALUE;
}
}

protected final void initHOFOISR(String s) {
if (!s.trim().isEmpty()) {
HOFOISR = Byte.parseByte(s);
} else {
HOFOISR = Byte.MIN_VALUE;
}
}

protected final void initHOFOISU(String s) {
if (!s.trim().isEmpty()) {
HOFOISU = Byte.parseByte(s);
} else {
HOFOISU = Byte.MIN_VALUE;
}
}

protected final void initHOFOIW(String s) {
if (!s.trim().isEmpty()) {
HOFOIW = Byte.parseByte(s);
} else {
HOFOIW = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWE(String s) {
if (!s.trim().isEmpty()) {
HOFOIWE = Byte.parseByte(s);
} else {
HOFOIWE = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWL(String s) {
if (!s.trim().isEmpty()) {
HOFOIWL = Byte.parseByte(s);
} else {
HOFOIWL = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWR(String s) {
if (!s.trim().isEmpty()) {
HOFOIWR = Byte.parseByte(s);
} else {
HOFOIWR = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWU(String s) {
if (!s.trim().isEmpty()) {
HOFOIWU = Byte.parseByte(s);
} else {
HOFOIWU = Byte.MIN_VALUE;
}
}

protected final void initHOFOODE(String s) {
if (!s.trim().isEmpty()) {
HOFOODE = Byte.parseByte(s);
} else {
HOFOODE = Byte.MIN_VALUE;
}
}

protected final void initHOFOODL(String s) {
if (!s.trim().isEmpty()) {
HOFOODL = Short.parseShort(s);
} else {
HOFOODL = Short.MIN_VALUE;
}
}

protected final void initHOFOODR(String s) {
if (!s.trim().isEmpty()) {
HOFOODR = Byte.parseByte(s);
} else {
HOFOODR = Byte.MIN_VALUE;
}
}

protected final void initHOFOODU(String s) {
if (!s.trim().isEmpty()) {
HOFOODU = Short.parseShort(s);
} else {
HOFOODU = Short.MIN_VALUE;
}
}

protected final void initHOFOS(String s) {
if (!s.trim().isEmpty()) {
HOFOS = Byte.parseByte(s);
} else {
HOFOS = Byte.MIN_VALUE;
}
}

protected final void initHOFOSE(String s) {
if (!s.trim().isEmpty()) {
HOFOSE = Byte.parseByte(s);
} else {
HOFOSE = Byte.MIN_VALUE;
}
}

protected final void initHOFOSL(String s) {
if (!s.trim().isEmpty()) {
HOFOSL = Byte.parseByte(s);
} else {
HOFOSL = Byte.MIN_VALUE;
}
}

protected final void initHOFOSR(String s) {
if (!s.trim().isEmpty()) {
HOFOSR = Byte.parseByte(s);
} else {
HOFOSR = Byte.MIN_VALUE;
}
}

protected final void initHOFOSU(String s) {
if (!s.trim().isEmpty()) {
HOFOSU = Byte.parseByte(s);
} else {
HOFOSU = Byte.MIN_VALUE;
}
}

protected final void initHOFOW(String s) {
if (!s.trim().isEmpty()) {
HOFOW = Byte.parseByte(s);
} else {
HOFOW = Byte.MIN_VALUE;
}
}

protected final void initHOFOWE(String s) {
if (!s.trim().isEmpty()) {
HOFOWE = Byte.parseByte(s);
} else {
HOFOWE = Byte.MIN_VALUE;
}
}

protected final void initHOFOWL(String s) {
if (!s.trim().isEmpty()) {
HOFOWL = Byte.parseByte(s);
} else {
HOFOWL = Byte.MIN_VALUE;
}
}

protected final void initHOFOWR(String s) {
if (!s.trim().isEmpty()) {
HOFOWR = Byte.parseByte(s);
} else {
HOFOWR = Byte.MIN_VALUE;
}
}

protected final void initHOFOWU(String s) {
if (!s.trim().isEmpty()) {
HOFOWU = Byte.parseByte(s);
} else {
HOFOWU = Byte.MIN_VALUE;
}
}

protected final void initHOFPAY(String s) {
if (!s.trim().isEmpty()) {
HOFPAY = Byte.parseByte(s);
} else {
HOFPAY = Byte.MIN_VALUE;
}
}

protected final void initHOFPGS(String s) {
if (!s.trim().isEmpty()) {
HOFPGS = Byte.parseByte(s);
} else {
HOFPGS = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSE(String s) {
if (!s.trim().isEmpty()) {
HOFPGSE = Byte.parseByte(s);
} else {
HOFPGSE = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSL(String s) {
if (!s.trim().isEmpty()) {
HOFPGSL = Byte.parseByte(s);
} else {
HOFPGSL = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSR(String s) {
if (!s.trim().isEmpty()) {
HOFPGSR = Byte.parseByte(s);
} else {
HOFPGSR = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSU(String s) {
if (!s.trim().isEmpty()) {
HOFPGSU = Byte.parseByte(s);
} else {
HOFPGSU = Byte.MIN_VALUE;
}
}

protected final void initHOFPGW(String s) {
if (!s.trim().isEmpty()) {
HOFPGW = Byte.parseByte(s);
} else {
HOFPGW = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWE(String s) {
if (!s.trim().isEmpty()) {
HOFPGWE = Byte.parseByte(s);
} else {
HOFPGWE = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWL(String s) {
if (!s.trim().isEmpty()) {
HOFPGWL = Byte.parseByte(s);
} else {
HOFPGWL = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWR(String s) {
if (!s.trim().isEmpty()) {
HOFPGWR = Byte.parseByte(s);
} else {
HOFPGWR = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWU(String s) {
if (!s.trim().isEmpty()) {
HOFPGWU = Byte.parseByte(s);
} else {
HOFPGWU = Byte.MIN_VALUE;
}
}

protected final void initHOFPS(String s) {
if (!s.trim().isEmpty()) {
HOFPS = Byte.parseByte(s);
} else {
HOFPS = Byte.MIN_VALUE;
}
}

protected final void initHOFPSE(String s) {
if (!s.trim().isEmpty()) {
HOFPSE = Byte.parseByte(s);
} else {
HOFPSE = Byte.MIN_VALUE;
}
}

protected final void initHOFPSL(String s) {
if (!s.trim().isEmpty()) {
HOFPSL = Byte.parseByte(s);
} else {
HOFPSL = Byte.MIN_VALUE;
}
}

protected final void initHOFPSR(String s) {
if (!s.trim().isEmpty()) {
HOFPSR = Byte.parseByte(s);
} else {
HOFPSR = Byte.MIN_VALUE;
}
}

protected final void initHOFPSU(String s) {
if (!s.trim().isEmpty()) {
HOFPSU = Byte.parseByte(s);
} else {
HOFPSU = Byte.MIN_VALUE;
}
}

protected final void initHOFPW(String s) {
if (!s.trim().isEmpty()) {
HOFPW = Byte.parseByte(s);
} else {
HOFPW = Byte.MIN_VALUE;
}
}

protected final void initHOFPWE(String s) {
if (!s.trim().isEmpty()) {
HOFPWE = Byte.parseByte(s);
} else {
HOFPWE = Byte.MIN_VALUE;
}
}

protected final void initHOFPWL(String s) {
if (!s.trim().isEmpty()) {
HOFPWL = Byte.parseByte(s);
} else {
HOFPWL = Byte.MIN_VALUE;
}
}

protected final void initHOFPWR(String s) {
if (!s.trim().isEmpty()) {
HOFPWR = Byte.parseByte(s);
} else {
HOFPWR = Byte.MIN_VALUE;
}
}

protected final void initHOFPWU(String s) {
if (!s.trim().isEmpty()) {
HOFPWU = Byte.parseByte(s);
} else {
HOFPWU = Byte.MIN_VALUE;
}
}

protected final void initHOFSM(String s) {
if (!s.trim().isEmpty()) {
HOFSM = Short.parseShort(s);
} else {
HOFSM = Short.MIN_VALUE;
}
}

protected final void initHOFSME(String s) {
if (!s.trim().isEmpty()) {
HOFSME = Byte.parseByte(s);
} else {
HOFSME = Byte.MIN_VALUE;
}
}

protected final void initHOFSML(String s) {
if (!s.trim().isEmpty()) {
HOFSML = Byte.parseByte(s);
} else {
HOFSML = Byte.MIN_VALUE;
}
}

protected final void initHOFSMR(String s) {
if (!s.trim().isEmpty()) {
HOFSMR = Byte.parseByte(s);
} else {
HOFSMR = Byte.MIN_VALUE;
}
}

protected final void initHOFSMU(String s) {
if (!s.trim().isEmpty()) {
HOFSMU = Byte.parseByte(s);
} else {
HOFSMU = Byte.MIN_VALUE;
}
}

protected final void initHOFSP(String s) {
if (!s.trim().isEmpty()) {
HOFSP = Byte.parseByte(s);
} else {
HOFSP = Byte.MIN_VALUE;
}
}

protected final void initHOFSQ(String s) {
if (!s.trim().isEmpty()) {
HOFSQ = Byte.parseByte(s);
} else {
HOFSQ = Byte.MIN_VALUE;
}
}

protected final void initHOFSQE(String s) {
if (!s.trim().isEmpty()) {
HOFSQE = Byte.parseByte(s);
} else {
HOFSQE = Byte.MIN_VALUE;
}
}

protected final void initHOFSQL(String s) {
if (!s.trim().isEmpty()) {
HOFSQL = Byte.parseByte(s);
} else {
HOFSQL = Byte.MIN_VALUE;
}
}

protected final void initHOFSQR(String s) {
if (!s.trim().isEmpty()) {
HOFSQR = Byte.parseByte(s);
} else {
HOFSQR = Byte.MIN_VALUE;
}
}

protected final void initHOFSQU(String s) {
if (!s.trim().isEmpty()) {
HOFSQU = Byte.parseByte(s);
} else {
HOFSQU = Byte.MIN_VALUE;
}
}

protected final void initHOFSUP(String s) {
if (!s.trim().isEmpty()) {
HOFSUP = Byte.parseByte(s);
} else {
HOFSUP = Byte.MIN_VALUE;
}
}

protected final void initHOFSW(String s) {
if (!s.trim().isEmpty()) {
HOFSW = Short.parseShort(s);
} else {
HOFSW = Short.MIN_VALUE;
}
}

protected final void initHOFSWE(String s) {
if (!s.trim().isEmpty()) {
HOFSWE = Byte.parseByte(s);
} else {
HOFSWE = Byte.MIN_VALUE;
}
}

protected final void initHOFSWL(String s) {
if (!s.trim().isEmpty()) {
HOFSWL = Byte.parseByte(s);
} else {
HOFSWL = Byte.MIN_VALUE;
}
}

protected final void initHOFSWR(String s) {
if (!s.trim().isEmpty()) {
HOFSWR = Byte.parseByte(s);
} else {
HOFSWR = Byte.MIN_VALUE;
}
}

protected final void initHOFSWU(String s) {
if (!s.trim().isEmpty()) {
HOFSWU = Byte.parseByte(s);
} else {
HOFSWU = Byte.MIN_VALUE;
}
}

protected final void initHOFTOG(String s) {
if (!s.trim().isEmpty()) {
HOFTOG = Byte.parseByte(s);
} else {
HOFTOG = Byte.MIN_VALUE;
}
}

protected final void initHOFUEL95(String s) {
if (!s.trim().isEmpty()) {
HOFUEL95 = Byte.parseByte(s);
} else {
HOFUEL95 = Byte.MIN_VALUE;
}
}

protected final void initHOFUELCO(String s) {
if (!s.trim().isEmpty()) {
HOFUELCO = Byte.parseByte(s);
} else {
HOFUELCO = Byte.MIN_VALUE;
}
}

protected final void initHOFUELEL(String s) {
if (!s.trim().isEmpty()) {
HOFUELEL = Byte.parseByte(s);
} else {
HOFUELEL = Byte.MIN_VALUE;
}
}

protected final void initHOFUELGA(String s) {
if (!s.trim().isEmpty()) {
HOFUELGA = Byte.parseByte(s);
} else {
HOFUELGA = Byte.MIN_VALUE;
}
}

protected final void initHOFUELOI(String s) {
if (!s.trim().isEmpty()) {
HOFUELOI = Byte.parseByte(s);
} else {
HOFUELOI = Byte.MIN_VALUE;
}
}

protected final void initHOFUELPA(String s) {
if (!s.trim().isEmpty()) {
HOFUELPA = Byte.parseByte(s);
} else {
HOFUELPA = Byte.MIN_VALUE;
}
}

protected final void initHOFUELWO(String s) {
if (!s.trim().isEmpty()) {
HOFUELWO = Byte.parseByte(s);
} else {
HOFUELWO = Byte.MIN_VALUE;
}
}

protected final void initHOFUEM85(String s) {
if (!s.trim().isEmpty()) {
HOFUEM85 = Byte.parseByte(s);
} else {
HOFUEM85 = Byte.MIN_VALUE;
}
}

protected final void initHOFUEM86(String s) {
if (!s.trim().isEmpty()) {
HOFUEM86 = Byte.parseByte(s);
} else {
HOFUEM86 = Byte.MIN_VALUE;
}
}

protected final void initHOFUEMCO(String s) {
if (!s.trim().isEmpty()) {
HOFUEMCO = Byte.parseByte(s);
} else {
HOFUEMCO = Byte.MIN_VALUE;
}
}

protected final void initHOFUEMEL(String s) {
if (!s.trim().isEmpty()) {
HOFUEMEL = Byte.parseByte(s);
} else {
HOFUEMEL = Byte.MIN_VALUE;
}
}

protected final void initHOFUEMGA(String s) {
if (!s.trim().isEmpty()) {
HOFUEMGA = Byte.parseByte(s);
} else {
HOFUEMGA = Byte.MIN_VALUE;
}
}

protected final void initHOFUEMOI(String s) {
if (!s.trim().isEmpty()) {
HOFUEMOI = Byte.parseByte(s);
} else {
HOFUEMOI = Byte.MIN_VALUE;
}
}

protected final void initHOFUEMPA(String s) {
if (!s.trim().isEmpty()) {
HOFUEMPA = Byte.parseByte(s);
} else {
HOFUEMPA = Byte.MIN_VALUE;
}
}

protected final void initHOFUEMWO(String s) {
if (!s.trim().isEmpty()) {
HOFUEMWO = Byte.parseByte(s);
} else {
HOFUEMWO = Byte.MIN_VALUE;
}
}

protected final void initHOFWS(String s) {
if (!s.trim().isEmpty()) {
HOFWS = Byte.parseByte(s);
} else {
HOFWS = Byte.MIN_VALUE;
}
}

protected final void initHOFWSE(String s) {
if (!s.trim().isEmpty()) {
HOFWSE = Byte.parseByte(s);
} else {
HOFWSE = Byte.MIN_VALUE;
}
}

protected final void initHOFWSL(String s) {
if (!s.trim().isEmpty()) {
HOFWSL = Byte.parseByte(s);
} else {
HOFWSL = Byte.MIN_VALUE;
}
}

protected final void initHOFWSR(String s) {
if (!s.trim().isEmpty()) {
HOFWSR = Byte.parseByte(s);
} else {
HOFWSR = Byte.MIN_VALUE;
}
}

protected final void initHOFWSU(String s) {
if (!s.trim().isEmpty()) {
HOFWSU = Byte.parseByte(s);
} else {
HOFWSU = Byte.MIN_VALUE;
}
}

protected final void initHOFWW(String s) {
if (!s.trim().isEmpty()) {
HOFWW = Byte.parseByte(s);
} else {
HOFWW = Byte.MIN_VALUE;
}
}

protected final void initHOFWWE(String s) {
if (!s.trim().isEmpty()) {
HOFWWE = Byte.parseByte(s);
} else {
HOFWWE = Byte.MIN_VALUE;
}
}

protected final void initHOFWWL(String s) {
if (!s.trim().isEmpty()) {
HOFWWL = Byte.parseByte(s);
} else {
HOFWWL = Byte.MIN_VALUE;
}
}

protected final void initHOFWWR(String s) {
if (!s.trim().isEmpty()) {
HOFWWR = Byte.parseByte(s);
} else {
HOFWWR = Byte.MIN_VALUE;
}
}

protected final void initHOFWWU(String s) {
if (!s.trim().isEmpty()) {
HOFWWU = Byte.parseByte(s);
} else {
HOFWWU = Byte.MIN_VALUE;
}
}

protected final void initHOFXS(String s) {
if (!s.trim().isEmpty()) {
HOFXS = Byte.parseByte(s);
} else {
HOFXS = Byte.MIN_VALUE;
}
}

protected final void initHOFXSE(String s) {
if (!s.trim().isEmpty()) {
HOFXSE = Byte.parseByte(s);
} else {
HOFXSE = Byte.MIN_VALUE;
}
}

protected final void initHOFXSL(String s) {
if (!s.trim().isEmpty()) {
HOFXSL = Byte.parseByte(s);
} else {
HOFXSL = Byte.MIN_VALUE;
}
}

protected final void initHOFXSR(String s) {
if (!s.trim().isEmpty()) {
HOFXSR = Byte.parseByte(s);
} else {
HOFXSR = Byte.MIN_VALUE;
}
}

protected final void initHOFXSU(String s) {
if (!s.trim().isEmpty()) {
HOFXSU = Byte.parseByte(s);
} else {
HOFXSU = Byte.MIN_VALUE;
}
}

protected final void initHOFXW(String s) {
if (!s.trim().isEmpty()) {
HOFXW = Byte.parseByte(s);
} else {
HOFXW = Byte.MIN_VALUE;
}
}

protected final void initHOFXWE(String s) {
if (!s.trim().isEmpty()) {
HOFXWE = Byte.parseByte(s);
} else {
HOFXWE = Byte.MIN_VALUE;
}
}

protected final void initHOFXWL(String s) {
if (!s.trim().isEmpty()) {
HOFXWL = Byte.parseByte(s);
} else {
HOFXWL = Byte.MIN_VALUE;
}
}

protected final void initHOFXWR(String s) {
if (!s.trim().isEmpty()) {
HOFXWR = Byte.parseByte(s);
} else {
HOFXWR = Byte.MIN_VALUE;
}
}

protected final void initHOFXWU(String s) {
if (!s.trim().isEmpty()) {
HOFXWU = Byte.parseByte(s);
} else {
HOFXWU = Byte.MIN_VALUE;
}
}

protected final void initHOGBMS(String s) {
if (!s.trim().isEmpty()) {
HOGBMS = Short.parseShort(s);
} else {
HOGBMS = Short.MIN_VALUE;
}
}

protected final void initHOGBMSE(String s) {
if (!s.trim().isEmpty()) {
HOGBMSE = Byte.parseByte(s);
} else {
HOGBMSE = Byte.MIN_VALUE;
}
}

protected final void initHOGBMSL(String s) {
if (!s.trim().isEmpty()) {
HOGBMSL = Byte.parseByte(s);
} else {
HOGBMSL = Byte.MIN_VALUE;
}
}

protected final void initHOGBMSR(String s) {
if (!s.trim().isEmpty()) {
HOGBMSR = Byte.parseByte(s);
} else {
HOGBMSR = Byte.MIN_VALUE;
}
}

protected final void initHOGBMSU(String s) {
if (!s.trim().isEmpty()) {
HOGBMSU = Byte.parseByte(s);
} else {
HOGBMSU = Byte.MIN_VALUE;
}
}

protected final void initHOGBMW(String s) {
if (!s.trim().isEmpty()) {
HOGBMW = Short.parseShort(s);
} else {
HOGBMW = Short.MIN_VALUE;
}
}

protected final void initHOGBMWE(String s) {
if (!s.trim().isEmpty()) {
HOGBMWE = Byte.parseByte(s);
} else {
HOGBMWE = Byte.MIN_VALUE;
}
}

protected final void initHOGBMWL(String s) {
if (!s.trim().isEmpty()) {
HOGBMWL = Byte.parseByte(s);
} else {
HOGBMWL = Byte.MIN_VALUE;
}
}

protected final void initHOGBMWR(String s) {
if (!s.trim().isEmpty()) {
HOGBMWR = Byte.parseByte(s);
} else {
HOGBMWR = Byte.MIN_VALUE;
}
}

protected final void initHOGBMWU(String s) {
if (!s.trim().isEmpty()) {
HOGBMWU = Byte.parseByte(s);
} else {
HOGBMWU = Byte.MIN_VALUE;
}
}

protected final void initHOGBP(String s) {
if (!s.trim().isEmpty()) {
HOGBP = Byte.parseByte(s);
} else {
HOGBP = Byte.MIN_VALUE;
}
}

protected final void initHOGBQS(String s) {
if (!s.trim().isEmpty()) {
HOGBQS = Short.parseShort(s);
} else {
HOGBQS = Short.MIN_VALUE;
}
}

protected final void initHOGBQSE(String s) {
if (!s.trim().isEmpty()) {
HOGBQSE = Byte.parseByte(s);
} else {
HOGBQSE = Byte.MIN_VALUE;
}
}

protected final void initHOGBQSL(String s) {
if (!s.trim().isEmpty()) {
HOGBQSL = Short.parseShort(s);
} else {
HOGBQSL = Short.MIN_VALUE;
}
}

protected final void initHOGBQSR(String s) {
if (!s.trim().isEmpty()) {
HOGBQSR = Byte.parseByte(s);
} else {
HOGBQSR = Byte.MIN_VALUE;
}
}

protected final void initHOGBQSU(String s) {
if (!s.trim().isEmpty()) {
HOGBQSU = Short.parseShort(s);
} else {
HOGBQSU = Short.MIN_VALUE;
}
}

protected final void initHOGBQW(String s) {
if (!s.trim().isEmpty()) {
HOGBQW = Short.parseShort(s);
} else {
HOGBQW = Short.MIN_VALUE;
}
}

protected final void initHOGBQWE(String s) {
if (!s.trim().isEmpty()) {
HOGBQWE = Byte.parseByte(s);
} else {
HOGBQWE = Byte.MIN_VALUE;
}
}

protected final void initHOGBQWL(String s) {
if (!s.trim().isEmpty()) {
HOGBQWL = Short.parseShort(s);
} else {
HOGBQWL = Short.MIN_VALUE;
}
}

protected final void initHOGBQWR(String s) {
if (!s.trim().isEmpty()) {
HOGBQWR = Byte.parseByte(s);
} else {
HOGBQWR = Byte.MIN_VALUE;
}
}

protected final void initHOGBQWU(String s) {
if (!s.trim().isEmpty()) {
HOGBQWU = Short.parseShort(s);
} else {
HOGBQWU = Short.MIN_VALUE;
}
}

protected final void initHOGD(String s) {
if (!s.trim().isEmpty()) {
HOGD = Byte.parseByte(s);
} else {
HOGD = Byte.MIN_VALUE;
}
}

protected final void initHOGDM(String s) {
if (!s.trim().isEmpty()) {
HOGDM = Short.parseShort(s);
} else {
HOGDM = Short.MIN_VALUE;
}
}

protected final void initHOGDME(String s) {
if (!s.trim().isEmpty()) {
HOGDME = Byte.parseByte(s);
} else {
HOGDME = Byte.MIN_VALUE;
}
}

protected final void initHOGDML(String s) {
if (!s.trim().isEmpty()) {
HOGDML = Byte.parseByte(s);
} else {
HOGDML = Byte.MIN_VALUE;
}
}

protected final void initHOGDMR(String s) {
if (!s.trim().isEmpty()) {
HOGDMR = Byte.parseByte(s);
} else {
HOGDMR = Byte.MIN_VALUE;
}
}

protected final void initHOGDMU(String s) {
if (!s.trim().isEmpty()) {
HOGDMU = Byte.parseByte(s);
} else {
HOGDMU = Byte.MIN_VALUE;
}
}

protected final void initHOGDQ(String s) {
if (!s.trim().isEmpty()) {
HOGDQ = Short.parseShort(s);
} else {
HOGDQ = Short.MIN_VALUE;
}
}

protected final void initHOGDQE(String s) {
if (!s.trim().isEmpty()) {
HOGDQE = Byte.parseByte(s);
} else {
HOGDQE = Byte.MIN_VALUE;
}
}

protected final void initHOGDQL(String s) {
if (!s.trim().isEmpty()) {
HOGDQL = Short.parseShort(s);
} else {
HOGDQL = Short.MIN_VALUE;
}
}

protected final void initHOGDQR(String s) {
if (!s.trim().isEmpty()) {
HOGDQR = Byte.parseByte(s);
} else {
HOGDQR = Byte.MIN_VALUE;
}
}

protected final void initHOGDQU(String s) {
if (!s.trim().isEmpty()) {
HOGDQU = Short.parseShort(s);
} else {
HOGDQU = Short.MIN_VALUE;
}
}

protected final void initHOGOS(String s) {
if (!s.trim().isEmpty()) {
HOGOS = Byte.parseByte(s);
} else {
HOGOS = Byte.MIN_VALUE;
}
}

protected final void initHOGOSE(String s) {
if (!s.trim().isEmpty()) {
HOGOSE = Byte.parseByte(s);
} else {
HOGOSE = Byte.MIN_VALUE;
}
}

protected final void initHOGOSL(String s) {
if (!s.trim().isEmpty()) {
HOGOSL = Byte.parseByte(s);
} else {
HOGOSL = Byte.MIN_VALUE;
}
}

protected final void initHOGOSR(String s) {
if (!s.trim().isEmpty()) {
HOGOSR = Byte.parseByte(s);
} else {
HOGOSR = Byte.MIN_VALUE;
}
}

protected final void initHOGOSU(String s) {
if (!s.trim().isEmpty()) {
HOGOSU = Byte.parseByte(s);
} else {
HOGOSU = Byte.MIN_VALUE;
}
}

protected final void initHOGOW(String s) {
if (!s.trim().isEmpty()) {
HOGOW = Byte.parseByte(s);
} else {
HOGOW = Byte.MIN_VALUE;
}
}

protected final void initHOGOWE(String s) {
if (!s.trim().isEmpty()) {
HOGOWE = Byte.parseByte(s);
} else {
HOGOWE = Byte.MIN_VALUE;
}
}

protected final void initHOGOWL(String s) {
if (!s.trim().isEmpty()) {
HOGOWL = Byte.parseByte(s);
} else {
HOGOWL = Byte.MIN_VALUE;
}
}

protected final void initHOGOWR(String s) {
if (!s.trim().isEmpty()) {
HOGOWR = Byte.parseByte(s);
} else {
HOGOWR = Byte.MIN_VALUE;
}
}

protected final void initHOGOWU(String s) {
if (!s.trim().isEmpty()) {
HOGOWU = Byte.parseByte(s);
} else {
HOGOWU = Byte.MIN_VALUE;
}
}

protected final void initHOGPAY(String s) {
if (!s.trim().isEmpty()) {
HOGPAY = Byte.parseByte(s);
} else {
HOGPAY = Byte.MIN_VALUE;
}
}

protected final void initHOGPS(String s) {
if (!s.trim().isEmpty()) {
HOGPS = Byte.parseByte(s);
} else {
HOGPS = Byte.MIN_VALUE;
}
}

protected final void initHOGPSE(String s) {
if (!s.trim().isEmpty()) {
HOGPSE = Byte.parseByte(s);
} else {
HOGPSE = Byte.MIN_VALUE;
}
}

protected final void initHOGPSL(String s) {
if (!s.trim().isEmpty()) {
HOGPSL = Byte.parseByte(s);
} else {
HOGPSL = Byte.MIN_VALUE;
}
}

protected final void initHOGPSR(String s) {
if (!s.trim().isEmpty()) {
HOGPSR = Byte.parseByte(s);
} else {
HOGPSR = Byte.MIN_VALUE;
}
}

protected final void initHOGPSU(String s) {
if (!s.trim().isEmpty()) {
HOGPSU = Byte.parseByte(s);
} else {
HOGPSU = Byte.MIN_VALUE;
}
}

protected final void initHOGPW(String s) {
if (!s.trim().isEmpty()) {
HOGPW = Byte.parseByte(s);
} else {
HOGPW = Byte.MIN_VALUE;
}
}

protected final void initHOGPWE(String s) {
if (!s.trim().isEmpty()) {
HOGPWE = Byte.parseByte(s);
} else {
HOGPWE = Byte.MIN_VALUE;
}
}

protected final void initHOGPWL(String s) {
if (!s.trim().isEmpty()) {
HOGPWL = Byte.parseByte(s);
} else {
HOGPWL = Byte.MIN_VALUE;
}
}

protected final void initHOGPWR(String s) {
if (!s.trim().isEmpty()) {
HOGPWR = Byte.parseByte(s);
} else {
HOGPWR = Byte.MIN_VALUE;
}
}

protected final void initHOGPWU(String s) {
if (!s.trim().isEmpty()) {
HOGPWU = Byte.parseByte(s);
} else {
HOGPWU = Byte.MIN_VALUE;
}
}

protected final void initHOHAV95(String s) {
if (!s.trim().isEmpty()) {
HOHAV95 = Byte.parseByte(s);
} else {
HOHAV95 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV96(String s) {
if (!s.trim().isEmpty()) {
HOHAV96 = Byte.parseByte(s);
} else {
HOHAV96 = Byte.MIN_VALUE;
}
}

protected final void initHOHAVB95(String s) {
if (!s.trim().isEmpty()) {
HOHAVB95 = Byte.parseByte(s);
} else {
HOHAVB95 = Byte.MIN_VALUE;
}
}

protected final void initHOHAVB96(String s) {
if (!s.trim().isEmpty()) {
HOHAVB96 = Byte.parseByte(s);
} else {
HOHAVB96 = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBCD(String s) {
if (!s.trim().isEmpty()) {
HOHAVBCD = Byte.parseByte(s);
} else {
HOHAVBCD = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBDT(String s) {
if (!s.trim().isEmpty()) {
HOHAVBDT = Byte.parseByte(s);
} else {
HOHAVBDT = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBDV(String s) {
if (!s.trim().isEmpty()) {
HOHAVBDV = Byte.parseByte(s);
} else {
HOHAVBDV = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBDW(String s) {
if (!s.trim().isEmpty()) {
HOHAVBDW = Byte.parseByte(s);
} else {
HOHAVBDW = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBFF(String s) {
if (!s.trim().isEmpty()) {
HOHAVBFF = Byte.parseByte(s);
} else {
HOHAVBFF = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBMO(String s) {
if (!s.trim().isEmpty()) {
HOHAVBMO = Byte.parseByte(s);
} else {
HOHAVBMO = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBPC(String s) {
if (!s.trim().isEmpty()) {
HOHAVBPC = Byte.parseByte(s);
} else {
HOHAVBPC = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBPH(String s) {
if (!s.trim().isEmpty()) {
HOHAVBPH = Byte.parseByte(s);
} else {
HOHAVBPH = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBTV(String s) {
if (!s.trim().isEmpty()) {
HOHAVBTV = Byte.parseByte(s);
} else {
HOHAVBTV = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBVR(String s) {
if (!s.trim().isEmpty()) {
HOHAVBVR = Byte.parseByte(s);
} else {
HOHAVBVR = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBWD(String s) {
if (!s.trim().isEmpty()) {
HOHAVBWD = Byte.parseByte(s);
} else {
HOHAVBWD = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBWM(String s) {
if (!s.trim().isEmpty()) {
HOHAVBWM = Byte.parseByte(s);
} else {
HOHAVBWM = Byte.MIN_VALUE;
}
}

protected final void initHOHAVCD(String s) {
if (!s.trim().isEmpty()) {
HOHAVCD = Byte.parseByte(s);
} else {
HOHAVCD = Byte.MIN_VALUE;
}
}

protected final void initHOHAVDT(String s) {
if (!s.trim().isEmpty()) {
HOHAVDT = Byte.parseByte(s);
} else {
HOHAVDT = Byte.MIN_VALUE;
}
}

protected final void initHOHAVDV(String s) {
if (!s.trim().isEmpty()) {
HOHAVDV = Byte.parseByte(s);
} else {
HOHAVDV = Byte.MIN_VALUE;
}
}

protected final void initHOHAVDW(String s) {
if (!s.trim().isEmpty()) {
HOHAVDW = Byte.parseByte(s);
} else {
HOHAVDW = Byte.MIN_VALUE;
}
}

protected final void initHOHAVFF(String s) {
if (!s.trim().isEmpty()) {
HOHAVFF = Byte.parseByte(s);
} else {
HOHAVFF = Byte.MIN_VALUE;
}
}

protected final void initHOHAVMO(String s) {
if (!s.trim().isEmpty()) {
HOHAVMO = Byte.parseByte(s);
} else {
HOHAVMO = Byte.MIN_VALUE;
}
}

protected final void initHOHAVPC(String s) {
if (!s.trim().isEmpty()) {
HOHAVPC = Byte.parseByte(s);
} else {
HOHAVPC = Byte.MIN_VALUE;
}
}

protected final void initHOHAVPH(String s) {
if (!s.trim().isEmpty()) {
HOHAVPH = Byte.parseByte(s);
} else {
HOHAVPH = Byte.MIN_VALUE;
}
}

protected final void initHOHAVTV(String s) {
if (!s.trim().isEmpty()) {
HOHAVTV = Byte.parseByte(s);
} else {
HOHAVTV = Byte.MIN_VALUE;
}
}

protected final void initHOHAVVR(String s) {
if (!s.trim().isEmpty()) {
HOHAVVR = Byte.parseByte(s);
} else {
HOHAVVR = Byte.MIN_VALUE;
}
}

protected final void initHOHAVWD(String s) {
if (!s.trim().isEmpty()) {
HOHAVWD = Byte.parseByte(s);
} else {
HOHAVWD = Byte.MIN_VALUE;
}
}

protected final void initHOHAVWM(String s) {
if (!s.trim().isEmpty()) {
HOHAVWM = Byte.parseByte(s);
} else {
HOHAVWM = Byte.MIN_VALUE;
}
}

protected final void initHOHB95(String s) {
if (!s.trim().isEmpty()) {
HOHB95 = Byte.parseByte(s);
} else {
HOHB95 = Byte.MIN_VALUE;
}
}

protected final void initHOHB96(String s) {
if (!s.trim().isEmpty()) {
HOHB96 = Byte.parseByte(s);
} else {
HOHB96 = Byte.MIN_VALUE;
}
}

protected final void initHOHBA(String s) {
if (!s.trim().isEmpty()) {
HOHBA = Short.parseShort(s);
} else {
HOHBA = Short.MIN_VALUE;
}
}

protected final void initHOHBAFE(String s) {
if (!s.trim().isEmpty()) {
HOHBAFE = Byte.parseByte(s);
} else {
HOHBAFE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAFL(String s) {
if (!s.trim().isEmpty()) {
HOHBAFL = Byte.parseByte(s);
} else {
HOHBAFL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAFR(String s) {
if (!s.trim().isEmpty()) {
HOHBAFR = Byte.parseByte(s);
} else {
HOHBAFR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAFU(String s) {
if (!s.trim().isEmpty()) {
HOHBAFU = Byte.parseByte(s);
} else {
HOHBAFU = Byte.MIN_VALUE;
}
}

protected final void initHOHBAME(String s) {
if (!s.trim().isEmpty()) {
HOHBAME = Byte.parseByte(s);
} else {
HOHBAME = Byte.MIN_VALUE;
}
}

protected final void initHOHBAML(String s) {
if (!s.trim().isEmpty()) {
HOHBAML = Short.parseShort(s);
} else {
HOHBAML = Short.MIN_VALUE;
}
}

protected final void initHOHBAMR(String s) {
if (!s.trim().isEmpty()) {
HOHBAMR = Byte.parseByte(s);
} else {
HOHBAMR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAMU(String s) {
if (!s.trim().isEmpty()) {
HOHBAMU = Short.parseShort(s);
} else {
HOHBAMU = Short.MIN_VALUE;
}
}

protected final void initHOHBAOE(String s) {
if (!s.trim().isEmpty()) {
HOHBAOE = Byte.parseByte(s);
} else {
HOHBAOE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAOL(String s) {
if (!s.trim().isEmpty()) {
HOHBAOL = Byte.parseByte(s);
} else {
HOHBAOL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAOR(String s) {
if (!s.trim().isEmpty()) {
HOHBAOR = Byte.parseByte(s);
} else {
HOHBAOR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAOU(String s) {
if (!s.trim().isEmpty()) {
HOHBAOU = Short.parseShort(s);
} else {
HOHBAOU = Short.MIN_VALUE;
}
}

protected final void initHOHBAWE(String s) {
if (!s.trim().isEmpty()) {
HOHBAWE = Byte.parseByte(s);
} else {
HOHBAWE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAWL(String s) {
if (!s.trim().isEmpty()) {
HOHBAWL = Byte.parseByte(s);
} else {
HOHBAWL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAWR(String s) {
if (!s.trim().isEmpty()) {
HOHBAWR = Byte.parseByte(s);
} else {
HOHBAWR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAWU(String s) {
if (!s.trim().isEmpty()) {
HOHBAWU = Byte.parseByte(s);
} else {
HOHBAWU = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYE(String s) {
if (!s.trim().isEmpty()) {
HOHBAYE = Byte.parseByte(s);
} else {
HOHBAYE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYL(String s) {
if (!s.trim().isEmpty()) {
HOHBAYL = Byte.parseByte(s);
} else {
HOHBAYL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYR(String s) {
if (!s.trim().isEmpty()) {
HOHBAYR = Byte.parseByte(s);
} else {
HOHBAYR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYU(String s) {
if (!s.trim().isEmpty()) {
HOHBAYU = Byte.parseByte(s);
} else {
HOHBAYU = Byte.MIN_VALUE;
}
}

protected final void initHOHBCK(String s) {
if (!s.trim().isEmpty()) {
HOHBCK = Byte.parseByte(s);
} else {
HOHBCK = Byte.MIN_VALUE;
}
}

protected final void initHOHBCL(String s) {
if (!s.trim().isEmpty()) {
HOHBCL = Byte.parseByte(s);
} else {
HOHBCL = Byte.MIN_VALUE;
}
}

protected final void initHOHBEN(String s) {
if (!s.trim().isEmpty()) {
HOHBEN = Byte.parseByte(s);
} else {
HOHBEN = Byte.MIN_VALUE;
}
}

protected final void initHOHBGA(String s) {
if (!s.trim().isEmpty()) {
HOHBGA = Byte.parseByte(s);
} else {
HOHBGA = Byte.MIN_VALUE;
}
}

protected final void initHOHBM85(String s) {
if (!s.trim().isEmpty()) {
HOHBM85 = Byte.parseByte(s);
} else {
HOHBM85 = Byte.MIN_VALUE;
}
}

protected final void initHOHBM86(String s) {
if (!s.trim().isEmpty()) {
HOHBM86 = Byte.parseByte(s);
} else {
HOHBM86 = Byte.MIN_VALUE;
}
}

protected final void initHOHBM96(String s) {
if (!s.trim().isEmpty()) {
HOHBM96 = Byte.parseByte(s);
} else {
HOHBM96 = Byte.MIN_VALUE;
}
}

protected final void initHOHBMCL(String s) {
if (!s.trim().isEmpty()) {
HOHBMCL = Byte.parseByte(s);
} else {
HOHBMCL = Byte.MIN_VALUE;
}
}

protected final void initHOHBME(String s) {
if (!s.trim().isEmpty()) {
HOHBME = Byte.parseByte(s);
} else {
HOHBME = Byte.MIN_VALUE;
}
}

protected final void initHOHBMGA(String s) {
if (!s.trim().isEmpty()) {
HOHBMGA = Byte.parseByte(s);
} else {
HOHBMGA = Byte.MIN_VALUE;
}
}

protected final void initHOHBMME(String s) {
if (!s.trim().isEmpty()) {
HOHBMME = Byte.parseByte(s);
} else {
HOHBMME = Byte.MIN_VALUE;
}
}

protected final void initHOHBMSG(String s) {
if (!s.trim().isEmpty()) {
HOHBMSG = Byte.parseByte(s);
} else {
HOHBMSG = Byte.MIN_VALUE;
}
}

protected final void initHOHBMWP(String s) {
if (!s.trim().isEmpty()) {
HOHBMWP = Byte.parseByte(s);
} else {
HOHBMWP = Byte.MIN_VALUE;
}
}

protected final void initHOHBP(String s) {
if (!s.trim().isEmpty()) {
HOHBP = Byte.parseByte(s);
} else {
HOHBP = Byte.MIN_VALUE;
}
}

protected final void initHOHBSG(String s) {
if (!s.trim().isEmpty()) {
HOHBSG = Byte.parseByte(s);
} else {
HOHBSG = Byte.MIN_VALUE;
}
}

protected final void initHOHBWP(String s) {
if (!s.trim().isEmpty()) {
HOHBWP = Byte.parseByte(s);
} else {
HOHBWP = Byte.MIN_VALUE;
}
}

protected final void initHOHEA95(String s) {
if (!s.trim().isEmpty()) {
HOHEA95 = Byte.parseByte(s);
} else {
HOHEA95 = Byte.MIN_VALUE;
}
}

protected final void initHOHEA96(String s) {
if (!s.trim().isEmpty()) {
HOHEA96 = Byte.parseByte(s);
} else {
HOHEA96 = Byte.MIN_VALUE;
}
}

protected final void initHOHEAEF(String s) {
if (!s.trim().isEmpty()) {
HOHEAEF = Byte.parseByte(s);
} else {
HOHEAEF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAGF(String s) {
if (!s.trim().isEmpty()) {
HOHEAGF = Byte.parseByte(s);
} else {
HOHEAGF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAM85(String s) {
if (!s.trim().isEmpty()) {
HOHEAM85 = Byte.parseByte(s);
} else {
HOHEAM85 = Byte.MIN_VALUE;
}
}

protected final void initHOHEAM86(String s) {
if (!s.trim().isEmpty()) {
HOHEAM86 = Byte.parseByte(s);
} else {
HOHEAM86 = Byte.MIN_VALUE;
}
}

protected final void initHOHEAM96(String s) {
if (!s.trim().isEmpty()) {
HOHEAM96 = Byte.parseByte(s);
} else {
HOHEAM96 = Byte.MIN_VALUE;
}
}

protected final void initHOHEAMEF(String s) {
if (!s.trim().isEmpty()) {
HOHEAMEF = Byte.parseByte(s);
} else {
HOHEAMEF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAMGF(String s) {
if (!s.trim().isEmpty()) {
HOHEAMGF = Byte.parseByte(s);
} else {
HOHEAMGF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAMOF(String s) {
if (!s.trim().isEmpty()) {
HOHEAMOF = Byte.parseByte(s);
} else {
HOHEAMOF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAMPH(String s) {
if (!s.trim().isEmpty()) {
HOHEAMPH = Byte.parseByte(s);
} else {
HOHEAMPH = Byte.MIN_VALUE;
}
}

protected final void initHOHEAOF(String s) {
if (!s.trim().isEmpty()) {
HOHEAOF = Byte.parseByte(s);
} else {
HOHEAOF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAPH(String s) {
if (!s.trim().isEmpty()) {
HOHEAPH = Byte.parseByte(s);
} else {
HOHEAPH = Byte.MIN_VALUE;
}
}

protected final void initHOHV01(String s) {
if (!s.trim().isEmpty()) {
HOHV01 = Short.parseShort(s);
} else {
HOHV01 = Short.MIN_VALUE;
}
}

protected final void initHOHV01E(String s) {
if (!s.trim().isEmpty()) {
HOHV01E = Byte.parseByte(s);
} else {
HOHV01E = Byte.MIN_VALUE;
}
}

protected final void initHOHV01L(String s) {
if (!s.trim().isEmpty()) {
HOHV01L = Short.parseShort(s);
} else {
HOHV01L = Short.MIN_VALUE;
}
}

protected final void initHOHV01R(String s) {
if (!s.trim().isEmpty()) {
HOHV01R = Byte.parseByte(s);
} else {
HOHV01R = Byte.MIN_VALUE;
}
}

protected final void initHOHV01U(String s) {
if (!s.trim().isEmpty()) {
HOHV01U = Short.parseShort(s);
} else {
HOHV01U = Short.MIN_VALUE;
}
}

protected final void initHOHV02(String s) {
if (!s.trim().isEmpty()) {
HOHV02 = Short.parseShort(s);
} else {
HOHV02 = Short.MIN_VALUE;
}
}

protected final void initHOHV02E(String s) {
if (!s.trim().isEmpty()) {
HOHV02E = Byte.parseByte(s);
} else {
HOHV02E = Byte.MIN_VALUE;
}
}

protected final void initHOHV02L(String s) {
if (!s.trim().isEmpty()) {
HOHV02L = Short.parseShort(s);
} else {
HOHV02L = Short.MIN_VALUE;
}
}

protected final void initHOHV02R(String s) {
if (!s.trim().isEmpty()) {
HOHV02R = Byte.parseByte(s);
} else {
HOHV02R = Byte.MIN_VALUE;
}
}

protected final void initHOHV02U(String s) {
if (!s.trim().isEmpty()) {
HOHV02U = Short.parseShort(s);
} else {
HOHV02U = Short.MIN_VALUE;
}
}

protected final void initHOHV03(String s) {
if (!s.trim().isEmpty()) {
HOHV03 = Short.parseShort(s);
} else {
HOHV03 = Short.MIN_VALUE;
}
}

protected final void initHOHV03E(String s) {
if (!s.trim().isEmpty()) {
HOHV03E = Byte.parseByte(s);
} else {
HOHV03E = Byte.MIN_VALUE;
}
}

protected final void initHOHV03L(String s) {
if (!s.trim().isEmpty()) {
HOHV03L = Short.parseShort(s);
} else {
HOHV03L = Short.MIN_VALUE;
}
}

protected final void initHOHV03R(String s) {
if (!s.trim().isEmpty()) {
HOHV03R = Byte.parseByte(s);
} else {
HOHV03R = Byte.MIN_VALUE;
}
}

protected final void initHOHV03U(String s) {
if (!s.trim().isEmpty()) {
HOHV03U = Short.parseShort(s);
} else {
HOHV03U = Short.MIN_VALUE;
}
}

protected final void initHOHV04(String s) {
if (!s.trim().isEmpty()) {
HOHV04 = Short.parseShort(s);
} else {
HOHV04 = Short.MIN_VALUE;
}
}

protected final void initHOHV04E(String s) {
if (!s.trim().isEmpty()) {
HOHV04E = Byte.parseByte(s);
} else {
HOHV04E = Byte.MIN_VALUE;
}
}

protected final void initHOHV04L(String s) {
if (!s.trim().isEmpty()) {
HOHV04L = Short.parseShort(s);
} else {
HOHV04L = Short.MIN_VALUE;
}
}

protected final void initHOHV04R(String s) {
if (!s.trim().isEmpty()) {
HOHV04R = Byte.parseByte(s);
} else {
HOHV04R = Byte.MIN_VALUE;
}
}

protected final void initHOHV04U(String s) {
if (!s.trim().isEmpty()) {
HOHV04U = Short.parseShort(s);
} else {
HOHV04U = Short.MIN_VALUE;
}
}

protected final void initHOHV05(String s) {
if (!s.trim().isEmpty()) {
HOHV05 = Short.parseShort(s);
} else {
HOHV05 = Short.MIN_VALUE;
}
}

protected final void initHOHV05E(String s) {
if (!s.trim().isEmpty()) {
HOHV05E = Byte.parseByte(s);
} else {
HOHV05E = Byte.MIN_VALUE;
}
}

protected final void initHOHV05L(String s) {
if (!s.trim().isEmpty()) {
HOHV05L = Short.parseShort(s);
} else {
HOHV05L = Short.MIN_VALUE;
}
}

protected final void initHOHV05R(String s) {
if (!s.trim().isEmpty()) {
HOHV05R = Byte.parseByte(s);
} else {
HOHV05R = Byte.MIN_VALUE;
}
}

protected final void initHOHV05U(String s) {
if (!s.trim().isEmpty()) {
HOHV05U = Short.parseShort(s);
} else {
HOHV05U = Short.MIN_VALUE;
}
}

protected final void initHOHV06(String s) {
if (!s.trim().isEmpty()) {
HOHV06 = Short.parseShort(s);
} else {
HOHV06 = Short.MIN_VALUE;
}
}

protected final void initHOHV06E(String s) {
if (!s.trim().isEmpty()) {
HOHV06E = Byte.parseByte(s);
} else {
HOHV06E = Byte.MIN_VALUE;
}
}

protected final void initHOHV06L(String s) {
if (!s.trim().isEmpty()) {
HOHV06L = Short.parseShort(s);
} else {
HOHV06L = Short.MIN_VALUE;
}
}

protected final void initHOHV06R(String s) {
if (!s.trim().isEmpty()) {
HOHV06R = Byte.parseByte(s);
} else {
HOHV06R = Byte.MIN_VALUE;
}
}

protected final void initHOHV06U(String s) {
if (!s.trim().isEmpty()) {
HOHV06U = Short.parseShort(s);
} else {
HOHV06U = Short.MIN_VALUE;
}
}

protected final void initHOHV07(String s) {
if (!s.trim().isEmpty()) {
HOHV07 = Short.parseShort(s);
} else {
HOHV07 = Short.MIN_VALUE;
}
}

protected final void initHOHV07E(String s) {
if (!s.trim().isEmpty()) {
HOHV07E = Byte.parseByte(s);
} else {
HOHV07E = Byte.MIN_VALUE;
}
}

protected final void initHOHV07L(String s) {
if (!s.trim().isEmpty()) {
HOHV07L = Short.parseShort(s);
} else {
HOHV07L = Short.MIN_VALUE;
}
}

protected final void initHOHV07R(String s) {
if (!s.trim().isEmpty()) {
HOHV07R = Byte.parseByte(s);
} else {
HOHV07R = Byte.MIN_VALUE;
}
}

protected final void initHOHV07U(String s) {
if (!s.trim().isEmpty()) {
HOHV07U = Short.parseShort(s);
} else {
HOHV07U = Short.MIN_VALUE;
}
}

protected final void initHOHV08(String s) {
if (!s.trim().isEmpty()) {
HOHV08 = Short.parseShort(s);
} else {
HOHV08 = Short.MIN_VALUE;
}
}

protected final void initHOHV08E(String s) {
if (!s.trim().isEmpty()) {
HOHV08E = Byte.parseByte(s);
} else {
HOHV08E = Byte.MIN_VALUE;
}
}

protected final void initHOHV08L(String s) {
if (!s.trim().isEmpty()) {
HOHV08L = Short.parseShort(s);
} else {
HOHV08L = Short.MIN_VALUE;
}
}

protected final void initHOHV08R(String s) {
if (!s.trim().isEmpty()) {
HOHV08R = Byte.parseByte(s);
} else {
HOHV08R = Byte.MIN_VALUE;
}
}

protected final void initHOHV08U(String s) {
if (!s.trim().isEmpty()) {
HOHV08U = Short.parseShort(s);
} else {
HOHV08U = Short.MIN_VALUE;
}
}

protected final void initHOHV09(String s) {
if (!s.trim().isEmpty()) {
HOHV09 = Short.parseShort(s);
} else {
HOHV09 = Short.MIN_VALUE;
}
}

protected final void initHOHV09E(String s) {
if (!s.trim().isEmpty()) {
HOHV09E = Byte.parseByte(s);
} else {
HOHV09E = Byte.MIN_VALUE;
}
}

protected final void initHOHV09L(String s) {
if (!s.trim().isEmpty()) {
HOHV09L = Short.parseShort(s);
} else {
HOHV09L = Short.MIN_VALUE;
}
}

protected final void initHOHV09R(String s) {
if (!s.trim().isEmpty()) {
HOHV09R = Byte.parseByte(s);
} else {
HOHV09R = Byte.MIN_VALUE;
}
}

protected final void initHOHV09U(String s) {
if (!s.trim().isEmpty()) {
HOHV09U = Short.parseShort(s);
} else {
HOHV09U = Short.MIN_VALUE;
}
}

protected final void initHOHV10(String s) {
if (!s.trim().isEmpty()) {
HOHV10 = Short.parseShort(s);
} else {
HOHV10 = Short.MIN_VALUE;
}
}

protected final void initHOHV10E(String s) {
if (!s.trim().isEmpty()) {
HOHV10E = Byte.parseByte(s);
} else {
HOHV10E = Byte.MIN_VALUE;
}
}

protected final void initHOHV10L(String s) {
if (!s.trim().isEmpty()) {
HOHV10L = Short.parseShort(s);
} else {
HOHV10L = Short.MIN_VALUE;
}
}

protected final void initHOHV10R(String s) {
if (!s.trim().isEmpty()) {
HOHV10R = Byte.parseByte(s);
} else {
HOHV10R = Byte.MIN_VALUE;
}
}

protected final void initHOHV10U(String s) {
if (!s.trim().isEmpty()) {
HOHV10U = Short.parseShort(s);
} else {
HOHV10U = Short.MIN_VALUE;
}
}

protected final void initHOHV11(String s) {
if (!s.trim().isEmpty()) {
HOHV11 = Short.parseShort(s);
} else {
HOHV11 = Short.MIN_VALUE;
}
}

protected final void initHOHV11E(String s) {
if (!s.trim().isEmpty()) {
HOHV11E = Byte.parseByte(s);
} else {
HOHV11E = Byte.MIN_VALUE;
}
}

protected final void initHOHV11L(String s) {
if (!s.trim().isEmpty()) {
HOHV11L = Short.parseShort(s);
} else {
HOHV11L = Short.MIN_VALUE;
}
}

protected final void initHOHV11R(String s) {
if (!s.trim().isEmpty()) {
HOHV11R = Byte.parseByte(s);
} else {
HOHV11R = Byte.MIN_VALUE;
}
}

protected final void initHOHV11U(String s) {
if (!s.trim().isEmpty()) {
HOHV11U = Short.parseShort(s);
} else {
HOHV11U = Short.MIN_VALUE;
}
}

protected final void initHOHV12(String s) {
if (!s.trim().isEmpty()) {
HOHV12 = Short.parseShort(s);
} else {
HOHV12 = Short.MIN_VALUE;
}
}

protected final void initHOHV12E(String s) {
if (!s.trim().isEmpty()) {
HOHV12E = Byte.parseByte(s);
} else {
HOHV12E = Byte.MIN_VALUE;
}
}

protected final void initHOHV12L(String s) {
if (!s.trim().isEmpty()) {
HOHV12L = Short.parseShort(s);
} else {
HOHV12L = Short.MIN_VALUE;
}
}

protected final void initHOHV12R(String s) {
if (!s.trim().isEmpty()) {
HOHV12R = Byte.parseByte(s);
} else {
HOHV12R = Byte.MIN_VALUE;
}
}

protected final void initHOHV12U(String s) {
if (!s.trim().isEmpty()) {
HOHV12U = Short.parseShort(s);
} else {
HOHV12U = Short.MIN_VALUE;
}
}

protected final void initHOINA95(String s) {
if (!s.trim().isEmpty()) {
HOINA95 = Byte.parseByte(s);
} else {
HOINA95 = Byte.MIN_VALUE;
}
}

protected final void initHOINA96(String s) {
if (!s.trim().isEmpty()) {
HOINA96 = Byte.parseByte(s);
} else {
HOINA96 = Byte.MIN_VALUE;
}
}

protected final void initHOINACL(String s) {
if (!s.trim().isEmpty()) {
HOINACL = Byte.parseByte(s);
} else {
HOINACL = Byte.MIN_VALUE;
}
}

protected final void initHOINAGD(String s) {
if (!s.trim().isEmpty()) {
HOINAGD = Byte.parseByte(s);
} else {
HOINAGD = Byte.MIN_VALUE;
}
}

protected final void initHOINAM85(String s) {
if (!s.trim().isEmpty()) {
HOINAM85 = Byte.parseByte(s);
} else {
HOINAM85 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM86(String s) {
if (!s.trim().isEmpty()) {
HOINAM86 = Byte.parseByte(s);
} else {
HOINAM86 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM96(String s) {
if (!s.trim().isEmpty()) {
HOINAM96 = Byte.parseByte(s);
} else {
HOINAM96 = Byte.MIN_VALUE;
}
}

protected final void initHOINAMCL(String s) {
if (!s.trim().isEmpty()) {
HOINAMCL = Byte.parseByte(s);
} else {
HOINAMCL = Byte.MIN_VALUE;
}
}

protected final void initHOINAME(String s) {
if (!s.trim().isEmpty()) {
HOINAME = Byte.parseByte(s);
} else {
HOINAME = Byte.MIN_VALUE;
}
}

protected final void initHOINAMGD(String s) {
if (!s.trim().isEmpty()) {
HOINAMGD = Byte.parseByte(s);
} else {
HOINAMGD = Byte.MIN_VALUE;
}
}

protected final void initHOINAMME(String s) {
if (!s.trim().isEmpty()) {
HOINAMME = Byte.parseByte(s);
} else {
HOINAMME = Byte.MIN_VALUE;
}
}

protected final void initHOINAMSG(String s) {
if (!s.trim().isEmpty()) {
HOINAMSG = Byte.parseByte(s);
} else {
HOINAMSG = Byte.MIN_VALUE;
}
}

protected final void initHOINAMWP(String s) {
if (!s.trim().isEmpty()) {
HOINAMWP = Byte.parseByte(s);
} else {
HOINAMWP = Byte.MIN_VALUE;
}
}

protected final void initHOINASG(String s) {
if (!s.trim().isEmpty()) {
HOINASG = Byte.parseByte(s);
} else {
HOINASG = Byte.MIN_VALUE;
}
}

protected final void initHOINAWP(String s) {
if (!s.trim().isEmpty()) {
HOINAWP = Byte.parseByte(s);
} else {
HOINAWP = Byte.MIN_VALUE;
}
}

protected final void initHOINC96(String s) {
if (!s.trim().isEmpty()) {
HOINC96 = Byte.parseByte(s);
} else {
HOINC96 = Byte.MIN_VALUE;
}
}

protected final void initHOINCBI(String s) {
if (!s.trim().isEmpty()) {
HOINCBI = Byte.parseByte(s);
} else {
HOINCBI = Byte.MIN_VALUE;
}
}

protected final void initHOINCL96(String s) {
if (!s.trim().isEmpty()) {
HOINCL96 = Byte.parseByte(s);
} else {
HOINCL96 = Byte.MIN_VALUE;
}
}

protected final void initHOINCLCO(String s) {
if (!s.trim().isEmpty()) {
HOINCLCO = Byte.parseByte(s);
} else {
HOINCLCO = Byte.MIN_VALUE;
}
}

protected final void initHOINCLGA(String s) {
if (!s.trim().isEmpty()) {
HOINCLGA = Byte.parseByte(s);
} else {
HOINCLGA = Byte.MIN_VALUE;
}
}

protected final void initHOINCLHE(String s) {
if (!s.trim().isEmpty()) {
HOINCLHE = Byte.parseByte(s);
} else {
HOINCLHE = Byte.MIN_VALUE;
}
}

protected final void initHOINCLLA(String s) {
if (!s.trim().isEmpty()) {
HOINCLLA = Byte.parseByte(s);
} else {
HOINCLLA = Byte.MIN_VALUE;
}
}

protected final void initHOINCLSE(String s) {
if (!s.trim().isEmpty()) {
HOINCLSE = Byte.parseByte(s);
} else {
HOINCLSE = Byte.MIN_VALUE;
}
}

protected final void initHOINCLWA(String s) {
if (!s.trim().isEmpty()) {
HOINCLWA = Byte.parseByte(s);
} else {
HOINCLWA = Byte.MIN_VALUE;
}
}

protected final void initHOINCM85(String s) {
if (!s.trim().isEmpty()) {
HOINCM85 = Byte.parseByte(s);
} else {
HOINCM85 = Byte.MIN_VALUE;
}
}

protected final void initHOINCM86(String s) {
if (!s.trim().isEmpty()) {
HOINCM86 = Byte.parseByte(s);
} else {
HOINCM86 = Byte.MIN_VALUE;
}
}

protected final void initHOINCM96(String s) {
if (!s.trim().isEmpty()) {
HOINCM96 = Byte.parseByte(s);
} else {
HOINCM96 = Byte.MIN_VALUE;
}
}

protected final void initHOINCMBI(String s) {
if (!s.trim().isEmpty()) {
HOINCMBI = Byte.parseByte(s);
} else {
HOINCMBI = Byte.MIN_VALUE;
}
}

protected final void initHOINCMOT(String s) {
if (!s.trim().isEmpty()) {
HOINCMOT = Byte.parseByte(s);
} else {
HOINCMOT = Byte.MIN_VALUE;
}
}

protected final void initHOINCMPI(String s) {
if (!s.trim().isEmpty()) {
HOINCMPI = Byte.parseByte(s);
} else {
HOINCMPI = Byte.MIN_VALUE;
}
}

protected final void initHOINCMPP(String s) {
if (!s.trim().isEmpty()) {
HOINCMPP = Byte.parseByte(s);
} else {
HOINCMPP = Byte.MIN_VALUE;
}
}

protected final void initHOINCOT(String s) {
if (!s.trim().isEmpty()) {
HOINCOT = Byte.parseByte(s);
} else {
HOINCOT = Byte.MIN_VALUE;
}
}

protected final void initHOINCPI(String s) {
if (!s.trim().isEmpty()) {
HOINCPI = Byte.parseByte(s);
} else {
HOINCPI = Byte.MIN_VALUE;
}
}

protected final void initHOINCPP(String s) {
if (!s.trim().isEmpty()) {
HOINCPP = Byte.parseByte(s);
} else {
HOINCPP = Byte.MIN_VALUE;
}
}

protected final void initHOMEXT(String s) {
if (!s.trim().isEmpty()) {
HOMEXT = Byte.parseByte(s);
} else {
HOMEXT = Byte.MIN_VALUE;
}
}

protected final void initHOMEXTA(String s) {
if (!s.trim().isEmpty()) {
HOMEXTA = Integer.parseInt(s);
} else {
HOMEXTA = Integer.MIN_VALUE;
}
}

protected final void initHOMEXTE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXTE = false;
} else {
HOMEXTE = true;
}
}
}

protected final void initHOMEXTL(String s) {
if (!s.trim().isEmpty()) {
HOMEXTL = Integer.parseInt(s);
} else {
HOMEXTL = Integer.MIN_VALUE;
}
}

protected final void initHOMEXTR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXTR = false;
} else {
HOMEXTR = true;
}
}
}

protected final void initHOMEXTU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HOMEXTU = false;
} else {
HOMEXTU = true;
}
}
}

protected final void initHOMFV(String s) {
if (!s.trim().isEmpty()) {
HOMFV = Byte.parseByte(s);
} else {
HOMFV = Byte.MIN_VALUE;
}
}

protected final void initHOMINC(String s) {
if (!s.trim().isEmpty()) {
HOMINC = Short.parseShort(s);
} else {
HOMINC = Short.MIN_VALUE;
}
}

protected final void initHOMINCE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMINCE = false;
} else {
HOMINCE = true;
}
}
}

protected final void initHOMINCL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMINCL = false;
} else {
HOMINCL = true;
}
}
}

protected final void initHOMINCR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMINCR = false;
} else {
HOMINCR = true;
}
}
}

protected final void initHOMINCU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMINCU = false;
} else {
HOMINCU = true;
}
}
}

protected final void initHOMMISN(String s) {
if (!s.trim().isEmpty()) {
HOMMISN = Byte.parseByte(s);
} else {
HOMMISN = Byte.MIN_VALUE;
}
}

protected final void initHOMNEWA(String s) {
if (!s.trim().isEmpty()) {
HOMNEWA = Integer.parseInt(s);
} else {
HOMNEWA = Integer.MIN_VALUE;
}
}

protected final void initHOMNEWE(String s) {
if (!s.trim().isEmpty()) {
HOMNEWE = Byte.parseByte(s);
} else {
HOMNEWE = Byte.MIN_VALUE;
}
}

protected final void initHOMNEWL(String s) {
if (!s.trim().isEmpty()) {
HOMNEWL = Integer.parseInt(s);
} else {
HOMNEWL = Integer.MIN_VALUE;
}
}

protected final void initHOMNEWN(String s) {
if (!s.trim().isEmpty()) {
HOMNEWN = Byte.parseByte(s);
} else {
HOMNEWN = Byte.MIN_VALUE;
}
}

protected final void initHOMNEWR(String s) {
if (!s.trim().isEmpty()) {
HOMNEWR = Byte.parseByte(s);
} else {
HOMNEWR = Byte.MIN_VALUE;
}
}

protected final void initHOMNEWU(String s) {
if (!s.trim().isEmpty()) {
HOMNEWU = Byte.parseByte(s);
} else {
HOMNEWU = Byte.MIN_VALUE;
}
}

protected final void initHOMNREA(String s) {
if (!s.trim().isEmpty()) {
HOMNREA = Byte.parseByte(s);
} else {
HOMNREA = Byte.MIN_VALUE;
}
}

protected final void initHOMNUM85(String s) {
if (!s.trim().isEmpty()) {
HOMNUM85 = Byte.parseByte(s);
} else {
HOMNUM85 = Byte.MIN_VALUE;
}
}

protected final void initHOMNUM86(String s) {
if (!s.trim().isEmpty()) {
HOMNUM86 = Byte.parseByte(s);
} else {
HOMNUM86 = Byte.MIN_VALUE;
}
}

protected final void initHOMNUM96(String s) {
if (!s.trim().isEmpty()) {
HOMNUM96 = Byte.parseByte(s);
} else {
HOMNUM96 = Byte.MIN_VALUE;
}
}

protected final void initHOMNUMCP(String s) {
if (!s.trim().isEmpty()) {
HOMNUMCP = Byte.parseByte(s);
} else {
HOMNUMCP = Byte.MIN_VALUE;
}
}

protected final void initHOMNUMHE(String s) {
if (!s.trim().isEmpty()) {
HOMNUMHE = Byte.parseByte(s);
} else {
HOMNUMHE = Byte.MIN_VALUE;
}
}

protected final void initHOMNUMHI(String s) {
if (!s.trim().isEmpty()) {
HOMNUMHI = Byte.parseByte(s);
} else {
HOMNUMHI = Byte.MIN_VALUE;
}
}

protected final void initHOMNUMOC(String s) {
if (!s.trim().isEmpty()) {
HOMNUMOC = Byte.parseByte(s);
} else {
HOMNUMOC = Byte.MIN_VALUE;
}
}

protected final void initHOMNUS95(String s) {
if (!s.trim().isEmpty()) {
HOMNUS95 = Byte.parseByte(s);
} else {
HOMNUS95 = Byte.MIN_VALUE;
}
}

protected final void initHOMNUS96(String s) {
if (!s.trim().isEmpty()) {
HOMNUS96 = Byte.parseByte(s);
} else {
HOMNUS96 = Byte.MIN_VALUE;
}
}

protected final void initHOMNUSCP(String s) {
if (!s.trim().isEmpty()) {
HOMNUSCP = Byte.parseByte(s);
} else {
HOMNUSCP = Byte.MIN_VALUE;
}
}

protected final void initHOMNUSHE(String s) {
if (!s.trim().isEmpty()) {
HOMNUSHE = Byte.parseByte(s);
} else {
HOMNUSHE = Byte.MIN_VALUE;
}
}

protected final void initHOMNUSHI(String s) {
if (!s.trim().isEmpty()) {
HOMNUSHI = Byte.parseByte(s);
} else {
HOMNUSHI = Byte.MIN_VALUE;
}
}

protected final void initHOMNUSOC(String s) {
if (!s.trim().isEmpty()) {
HOMNUSOC = Byte.parseByte(s);
} else {
HOMNUSOC = Byte.MIN_VALUE;
}
}

protected final void initHOMREA(String s) {
if (!s.trim().isEmpty()) {
HOMREA = Byte.parseByte(s);
} else {
HOMREA = Byte.MIN_VALUE;
}
}

protected final void initHOMREPE(String s) {
if (!s.trim().isEmpty()) {
HOMREPE = Byte.parseByte(s);
} else {
HOMREPE = Byte.MIN_VALUE;
}
}

protected final void initHOMREPL(String s) {
if (!s.trim().isEmpty()) {
HOMREPL = Short.parseShort(s);
} else {
HOMREPL = Short.MIN_VALUE;
}
}

protected final void initHOMREPR(String s) {
if (!s.trim().isEmpty()) {
HOMREPR = Byte.parseByte(s);
} else {
HOMREPR = Byte.MIN_VALUE;
}
}

protected final void initHOMREPU(String s) {
if (!s.trim().isEmpty()) {
HOMREPU = Short.parseShort(s);
} else {
HOMREPU = Short.MIN_VALUE;
}
}

protected final void initHOMSAM(String s) {
if (!s.trim().isEmpty()) {
HOMSAM = Byte.parseByte(s);
} else {
HOMSAM = Byte.MIN_VALUE;
}
}

protected final void initHOMTY(String s) {
if (!s.trim().isEmpty()) {
HOMTY = Byte.parseByte(s);
} else {
HOMTY = Byte.MIN_VALUE;
}
}

protected final void initHOMUM85(String s) {
if (!s.trim().isEmpty()) {
HOMUM85 = Byte.parseByte(s);
} else {
HOMUM85 = Byte.MIN_VALUE;
}
}

protected final void initHOMUM86(String s) {
if (!s.trim().isEmpty()) {
HOMUM86 = Byte.parseByte(s);
} else {
HOMUM86 = Byte.MIN_VALUE;
}
}

protected final void initHOMUMCP(String s) {
if (!s.trim().isEmpty()) {
HOMUMCP = Byte.parseByte(s);
} else {
HOMUMCP = Byte.MIN_VALUE;
}
}

protected final void initHOMUMHE(String s) {
if (!s.trim().isEmpty()) {
HOMUMHE = Byte.parseByte(s);
} else {
HOMUMHE = Byte.MIN_VALUE;
}
}

protected final void initHOMUMHI(String s) {
if (!s.trim().isEmpty()) {
HOMUMHI = Byte.parseByte(s);
} else {
HOMUMHI = Byte.MIN_VALUE;
}
}

protected final void initHOMUMOC(String s) {
if (!s.trim().isEmpty()) {
HOMUMOC = Byte.parseByte(s);
} else {
HOMUMOC = Byte.MIN_VALUE;
}
}

protected final void initHOMUSECP(String s) {
if (!s.trim().isEmpty()) {
HOMUSECP = Byte.parseByte(s);
} else {
HOMUSECP = Byte.MIN_VALUE;
}
}

protected final void initHOMUSEHE(String s) {
if (!s.trim().isEmpty()) {
HOMUSEHE = Byte.parseByte(s);
} else {
HOMUSEHE = Byte.MIN_VALUE;
}
}

protected final void initHOMUSEHI(String s) {
if (!s.trim().isEmpty()) {
HOMUSEHI = Byte.parseByte(s);
} else {
HOMUSEHI = Byte.MIN_VALUE;
}
}

protected final void initHOMUSEOC(String s) {
if (!s.trim().isEmpty()) {
HOMUSEOC = Byte.parseByte(s);
} else {
HOMUSEOC = Byte.MIN_VALUE;
}
}

protected final void initHOMUSEOT(String s) {
if (!s.trim().isEmpty()) {
HOMUSEOT = Byte.parseByte(s);
} else {
HOMUSEOT = Byte.MIN_VALUE;
}
}

protected final void initHOOUTFE(String s) {
if (!s.trim().isEmpty()) {
HOOUTFE = Byte.parseByte(s);
} else {
HOOUTFE = Byte.MIN_VALUE;
}
}

protected final void initHOOUTFL(String s) {
if (!s.trim().isEmpty()) {
HOOUTFL = Short.parseShort(s);
} else {
HOOUTFL = Short.MIN_VALUE;
}
}

protected final void initHOOUTFR(String s) {
if (!s.trim().isEmpty()) {
HOOUTFR = Byte.parseByte(s);
} else {
HOOUTFR = Byte.MIN_VALUE;
}
}

protected final void initHOOUTFU(String s) {
if (!s.trim().isEmpty()) {
HOOUTFU = Short.parseShort(s);
} else {
HOOUTFU = Short.MIN_VALUE;
}
}

protected final void initHOPAYE(String s) {
if (!s.trim().isEmpty()) {
HOPAYE = Byte.parseByte(s);
} else {
HOPAYE = Byte.MIN_VALUE;
}
}

protected final void initHOPAYL(String s) {
if (!s.trim().isEmpty()) {
HOPAYL = Integer.parseInt(s);
} else {
HOPAYL = Integer.MIN_VALUE;
}
}

protected final void initHOPAYR(String s) {
if (!s.trim().isEmpty()) {
HOPAYR = Byte.parseByte(s);
} else {
HOPAYR = Byte.MIN_VALUE;
}
}

protected final void initHOPAYU(String s) {
if (!s.trim().isEmpty()) {
HOPAYU = Integer.parseInt(s);
} else {
HOPAYU = Integer.MIN_VALUE;
}
}

protected final void initHOPRO95(String s) {
if (!s.trim().isEmpty()) {
HOPRO95 = Byte.parseByte(s);
} else {
HOPRO95 = Byte.MIN_VALUE;
}
}

protected final void initHOPRO96(String s) {
if (!s.trim().isEmpty()) {
HOPRO96 = Byte.parseByte(s);
} else {
HOPRO96 = Byte.MIN_VALUE;
}
}

protected final void initHOPROCO(String s) {
if (!s.trim().isEmpty()) {
HOPROCO = Byte.parseByte(s);
} else {
HOPROCO = Byte.MIN_VALUE;
}
}

protected final void initHOPROCP(String s) {
if (!s.trim().isEmpty()) {
HOPROCP = Byte.parseByte(s);
} else {
HOPROCP = Byte.MIN_VALUE;
}
}

protected final void initHOPRODK(String s) {
if (!s.trim().isEmpty()) {
HOPRODK = Byte.parseByte(s);
} else {
HOPRODK = Byte.MIN_VALUE;
}
}

protected final void initHOPROEP(String s) {
if (!s.trim().isEmpty()) {
HOPROEP = Byte.parseByte(s);
} else {
HOPROEP = Byte.MIN_VALUE;
}
}

protected final void initHOPROIN(String s) {
if (!s.trim().isEmpty()) {
HOPROIN = Byte.parseByte(s);
} else {
HOPROIN = Byte.MIN_VALUE;
}
}

protected final void initHOPROM85(String s) {
if (!s.trim().isEmpty()) {
HOPROM85 = Byte.parseByte(s);
} else {
HOPROM85 = Byte.MIN_VALUE;
}
}

protected final void initHOPROM86(String s) {
if (!s.trim().isEmpty()) {
HOPROM86 = Byte.parseByte(s);
} else {
HOPROM86 = Byte.MIN_VALUE;
}
}

protected final void initHOPROM96(String s) {
if (!s.trim().isEmpty()) {
HOPROM96 = Byte.parseByte(s);
} else {
HOPROM96 = Byte.MIN_VALUE;
}
}

protected final void initHOPROMCO(String s) {
if (!s.trim().isEmpty()) {
HOPROMCO = Byte.parseByte(s);
} else {
HOPROMCO = Byte.MIN_VALUE;
}
}

protected final void initHOPROMCP(String s) {
if (!s.trim().isEmpty()) {
HOPROMCP = Byte.parseByte(s);
} else {
HOPROMCP = Byte.MIN_VALUE;
}
}

protected final void initHOPROMDK(String s) {
if (!s.trim().isEmpty()) {
HOPROMDK = Byte.parseByte(s);
} else {
HOPROMDK = Byte.MIN_VALUE;
}
}

protected final void initHOPROMEP(String s) {
if (!s.trim().isEmpty()) {
HOPROMEP = Byte.parseByte(s);
} else {
HOPROMEP = Byte.MIN_VALUE;
}
}

protected final void initHOPROMIN(String s) {
if (!s.trim().isEmpty()) {
HOPROMIN = Byte.parseByte(s);
} else {
HOPROMIN = Byte.MIN_VALUE;
}
}

protected final void initHOPROMNZ(String s) {
if (!s.trim().isEmpty()) {
HOPROMNZ = Byte.parseByte(s);
} else {
HOPROMNZ = Byte.MIN_VALUE;
}
}

protected final void initHOPROMPO(String s) {
if (!s.trim().isEmpty()) {
HOPROMPO = Byte.parseByte(s);
} else {
HOPROMPO = Byte.MIN_VALUE;
}
}

protected final void initHOPROMRD(String s) {
if (!s.trim().isEmpty()) {
HOPROMRD = Byte.parseByte(s);
} else {
HOPROMRD = Byte.MIN_VALUE;
}
}

protected final void initHOPROMRO(String s) {
if (!s.trim().isEmpty()) {
HOPROMRO = Byte.parseByte(s);
} else {
HOPROMRO = Byte.MIN_VALUE;
}
}

protected final void initHOPROMSN(String s) {
if (!s.trim().isEmpty()) {
HOPROMSN = Byte.parseByte(s);
} else {
HOPROMSN = Byte.MIN_VALUE;
}
}

protected final void initHOPROMSP(String s) {
if (!s.trim().isEmpty()) {
HOPROMSP = Byte.parseByte(s);
} else {
HOPROMSP = Byte.MIN_VALUE;
}
}

protected final void initHOPROMST(String s) {
if (!s.trim().isEmpty()) {
HOPROMST = Byte.parseByte(s);
} else {
HOPROMST = Byte.MIN_VALUE;
}
}

protected final void initHOPROMVA(String s) {
if (!s.trim().isEmpty()) {
HOPROMVA = Byte.parseByte(s);
} else {
HOPROMVA = Byte.MIN_VALUE;
}
}

protected final void initHOPROMWA(String s) {
if (!s.trim().isEmpty()) {
HOPROMWA = Byte.parseByte(s);
} else {
HOPROMWA = Byte.MIN_VALUE;
}
}

protected final void initHOPRONZ(String s) {
if (!s.trim().isEmpty()) {
HOPRONZ = Byte.parseByte(s);
} else {
HOPRONZ = Byte.MIN_VALUE;
}
}

protected final void initHOPROPO(String s) {
if (!s.trim().isEmpty()) {
HOPROPO = Byte.parseByte(s);
} else {
HOPROPO = Byte.MIN_VALUE;
}
}

protected final void initHOPRORD(String s) {
if (!s.trim().isEmpty()) {
HOPRORD = Byte.parseByte(s);
} else {
HOPRORD = Byte.MIN_VALUE;
}
}

protected final void initHOPRORO(String s) {
if (!s.trim().isEmpty()) {
HOPRORO = Byte.parseByte(s);
} else {
HOPRORO = Byte.MIN_VALUE;
}
}

protected final void initHOPROSN(String s) {
if (!s.trim().isEmpty()) {
HOPROSN = Byte.parseByte(s);
} else {
HOPROSN = Byte.MIN_VALUE;
}
}

protected final void initHOPROSP(String s) {
if (!s.trim().isEmpty()) {
HOPROSP = Byte.parseByte(s);
} else {
HOPROSP = Byte.MIN_VALUE;
}
}

protected final void initHOPROWA(String s) {
if (!s.trim().isEmpty()) {
HOPROWA = Byte.parseByte(s);
} else {
HOPROWA = Byte.MIN_VALUE;
}
}

protected final void initHOREBFE(String s) {
if (!s.trim().isEmpty()) {
HOREBFE = Byte.parseByte(s);
} else {
HOREBFE = Byte.MIN_VALUE;
}
}

protected final void initHOREBFL(String s) {
if (!s.trim().isEmpty()) {
HOREBFL = Short.parseShort(s);
} else {
HOREBFL = Short.MIN_VALUE;
}
}

protected final void initHOREBFR(String s) {
if (!s.trim().isEmpty()) {
HOREBFR = Byte.parseByte(s);
} else {
HOREBFR = Byte.MIN_VALUE;
}
}

protected final void initHOREBFU(String s) {
if (!s.trim().isEmpty()) {
HOREBFU = Short.parseShort(s);
} else {
HOREBFU = Short.MIN_VALUE;
}
}

protected final void initHOREBME(String s) {
if (!s.trim().isEmpty()) {
HOREBME = Byte.parseByte(s);
} else {
HOREBME = Byte.MIN_VALUE;
}
}

protected final void initHOREBML(String s) {
if (!s.trim().isEmpty()) {
HOREBML = Short.parseShort(s);
} else {
HOREBML = Short.MIN_VALUE;
}
}

protected final void initHOREBMR(String s) {
if (!s.trim().isEmpty()) {
HOREBMR = Byte.parseByte(s);
} else {
HOREBMR = Byte.MIN_VALUE;
}
}

protected final void initHOREBMU(String s) {
if (!s.trim().isEmpty()) {
HOREBMU = Short.parseShort(s);
} else {
HOREBMU = Short.MIN_VALUE;
}
}

protected final void initHOREBOE(String s) {
if (!s.trim().isEmpty()) {
HOREBOE = Byte.parseByte(s);
} else {
HOREBOE = Byte.MIN_VALUE;
}
}

protected final void initHOREBOL(String s) {
if (!s.trim().isEmpty()) {
HOREBOL = Short.parseShort(s);
} else {
HOREBOL = Short.MIN_VALUE;
}
}

protected final void initHOREBOR(String s) {
if (!s.trim().isEmpty()) {
HOREBOR = Byte.parseByte(s);
} else {
HOREBOR = Byte.MIN_VALUE;
}
}

protected final void initHOREBOU(String s) {
if (!s.trim().isEmpty()) {
HOREBOU = Short.parseShort(s);
} else {
HOREBOU = Short.MIN_VALUE;
}
}

protected final void initHOREBWE(String s) {
if (!s.trim().isEmpty()) {
HOREBWE = Byte.parseByte(s);
} else {
HOREBWE = Byte.MIN_VALUE;
}
}

protected final void initHOREBWL(String s) {
if (!s.trim().isEmpty()) {
HOREBWL = Short.parseShort(s);
} else {
HOREBWL = Short.MIN_VALUE;
}
}

protected final void initHOREBWR(String s) {
if (!s.trim().isEmpty()) {
HOREBWR = Byte.parseByte(s);
} else {
HOREBWR = Byte.MIN_VALUE;
}
}

protected final void initHOREBWU(String s) {
if (!s.trim().isEmpty()) {
HOREBWU = Short.parseShort(s);
} else {
HOREBWU = Short.MIN_VALUE;
}
}

protected final void initHOREBYE(String s) {
if (!s.trim().isEmpty()) {
HOREBYE = Byte.parseByte(s);
} else {
HOREBYE = Byte.MIN_VALUE;
}
}

protected final void initHOREBYL(String s) {
if (!s.trim().isEmpty()) {
HOREBYL = Short.parseShort(s);
} else {
HOREBYL = Short.MIN_VALUE;
}
}

protected final void initHOREBYR(String s) {
if (!s.trim().isEmpty()) {
HOREBYR = Byte.parseByte(s);
} else {
HOREBYR = Byte.MIN_VALUE;
}
}

protected final void initHOREBYU(String s) {
if (!s.trim().isEmpty()) {
HOREBYU = Byte.parseByte(s);
} else {
HOREBYU = Byte.MIN_VALUE;
}
}

protected final void initHORET(String s) {
if (!s.trim().isEmpty()) {
HORET = Byte.parseByte(s);
} else {
HORET = Byte.MIN_VALUE;
}
}

protected final void initHORFEE1(String s) {
if (!s.trim().isEmpty()) {
HORFEE1 = Byte.parseByte(s);
} else {
HORFEE1 = Byte.MIN_VALUE;
}
}

protected final void initHORFEE2(String s) {
if (!s.trim().isEmpty()) {
HORFEE2 = Byte.parseByte(s);
} else {
HORFEE2 = Byte.MIN_VALUE;
}
}

protected final void initHORFEP1(String s) {
if (!s.trim().isEmpty()) {
HORFEP1 = Byte.parseByte(s);
} else {
HORFEP1 = Byte.MIN_VALUE;
}
}

protected final void initHORFEP2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HORFEP2 = false;
} else {
HORFEP2 = true;
}
}
}

protected final void initHORHB(String s) {
if (!s.trim().isEmpty()) {
HORHB = Byte.parseByte(s);
} else {
HORHB = Byte.MIN_VALUE;
}
}

protected final void initHORIN96(String s) {
if (!s.trim().isEmpty()) {
HORIN96 = Byte.parseByte(s);
} else {
HORIN96 = Byte.MIN_VALUE;
}
}

protected final void initHORIN97(String s) {
if (!s.trim().isEmpty()) {
HORIN97 = Byte.parseByte(s);
} else {
HORIN97 = Byte.MIN_VALUE;
}
}

protected final void initHORINHI(String s) {
if (!s.trim().isEmpty()) {
HORINHI = Byte.parseByte(s);
} else {
HORINHI = Byte.MIN_VALUE;
}
}

protected final void initHORINHR(String s) {
if (!s.trim().isEmpty()) {
HORINHR = Byte.parseByte(s);
} else {
HORINHR = Byte.MIN_VALUE;
}
}

protected final void initHORINM(String s) {
if (!s.trim().isEmpty()) {
HORINM = Short.parseShort(s);
} else {
HORINM = Short.MIN_VALUE;
}
}

protected final void initHORINM85(String s) {
if (!s.trim().isEmpty()) {
HORINM85 = Byte.parseByte(s);
} else {
HORINM85 = Byte.MIN_VALUE;
}
}

protected final void initHORINM86(String s) {
if (!s.trim().isEmpty()) {
HORINM86 = Byte.parseByte(s);
} else {
HORINM86 = Byte.MIN_VALUE;
}
}

protected final void initHORINM96(String s) {
if (!s.trim().isEmpty()) {
HORINM96 = Byte.parseByte(s);
} else {
HORINM96 = Byte.MIN_VALUE;
}
}

protected final void initHORINM97(String s) {
if (!s.trim().isEmpty()) {
HORINM97 = Byte.parseByte(s);
} else {
HORINM97 = Byte.MIN_VALUE;
}
}

protected final void initHORINME(String s) {
if (!s.trim().isEmpty()) {
HORINME = Byte.parseByte(s);
} else {
HORINME = Byte.MIN_VALUE;
}
}

protected final void initHORINMHI(String s) {
if (!s.trim().isEmpty()) {
HORINMHI = Byte.parseByte(s);
} else {
HORINMHI = Byte.MIN_VALUE;
}
}

protected final void initHORINMHR(String s) {
if (!s.trim().isEmpty()) {
HORINMHR = Byte.parseByte(s);
} else {
HORINMHR = Byte.MIN_VALUE;
}
}

protected final void initHORINML(String s) {
if (!s.trim().isEmpty()) {
HORINML = Short.parseShort(s);
} else {
HORINML = Short.MIN_VALUE;
}
}

protected final void initHORINMOT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORINMOT = false;
} else {
HORINMOT = true;
}
}
}

protected final void initHORINMPA(String s) {
if (!s.trim().isEmpty()) {
HORINMPA = Byte.parseByte(s);
} else {
HORINMPA = Byte.MIN_VALUE;
}
}

protected final void initHORINMR(String s) {
if (!s.trim().isEmpty()) {
HORINMR = Byte.parseByte(s);
} else {
HORINMR = Byte.MIN_VALUE;
}
}

protected final void initHORINMU(String s) {
if (!s.trim().isEmpty()) {
HORINMU = Short.parseShort(s);
} else {
HORINMU = Short.MIN_VALUE;
}
}

protected final void initHORINOT(String s) {
if (!s.trim().isEmpty()) {
HORINOT = Byte.parseByte(s);
} else {
HORINOT = Byte.MIN_VALUE;
}
}

protected final void initHORINPA(String s) {
if (!s.trim().isEmpty()) {
HORINPA = Byte.parseByte(s);
} else {
HORINPA = Byte.MIN_VALUE;
}
}

protected final void initHORMAIN(String s) {
if (!s.trim().isEmpty()) {
HORMAIN = Byte.parseByte(s);
} else {
HORMAIN = Byte.MIN_VALUE;
}
}

protected final void initHORMO(String s) {
if (!s.trim().isEmpty()) {
HORMO = Byte.parseByte(s);
} else {
HORMO = Byte.MIN_VALUE;
}
}

protected final void initHORMOFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOFE = false;
} else {
HORMOFE = true;
}
}
}

protected final void initHORMOFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOFL = false;
} else {
HORMOFL = true;
}
}
}

protected final void initHORMOFP(String s) {
if (!s.trim().isEmpty()) {
HORMOFP = Byte.parseByte(s);
} else {
HORMOFP = Byte.MIN_VALUE;
}
}

protected final void initHORMOFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOFR = false;
} else {
HORMOFR = true;
}
}
}

protected final void initHORMOFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOFU = false;
} else {
HORMOFU = true;
}
}
}

protected final void initHORMOL(String s) {
if (!s.trim().isEmpty()) {
HORMOL = Integer.parseInt(s);
} else {
HORMOL = Integer.MIN_VALUE;
}
}

protected final void initHORMOLA(String s) {
if (!s.trim().isEmpty()) {
HORMOLA = Byte.parseByte(s);
} else {
HORMOLA = Byte.MIN_VALUE;
}
}

protected final void initHORMOLE(String s) {
if (!s.trim().isEmpty()) {
HORMOLE = Byte.parseByte(s);
} else {
HORMOLE = Byte.MIN_VALUE;
}
}

protected final void initHORMOLL(String s) {
if (!s.trim().isEmpty()) {
HORMOLL = Integer.parseInt(s);
} else {
HORMOLL = Integer.MIN_VALUE;
}
}

protected final void initHORMOLR(String s) {
if (!s.trim().isEmpty()) {
HORMOLR = Byte.parseByte(s);
} else {
HORMOLR = Byte.MIN_VALUE;
}
}

protected final void initHORMOLU(String s) {
if (!s.trim().isEmpty()) {
HORMOLU = Integer.parseInt(s);
} else {
HORMOLU = Integer.MIN_VALUE;
}
}

protected final void initHORMOM85(String s) {
if (!s.trim().isEmpty()) {
HORMOM85 = Byte.parseByte(s);
} else {
HORMOM85 = Byte.MIN_VALUE;
}
}

protected final void initHORMOM86(String s) {
if (!s.trim().isEmpty()) {
HORMOM86 = Byte.parseByte(s);
} else {
HORMOM86 = Byte.MIN_VALUE;
}
}

protected final void initHORMOMBA(String s) {
if (!s.trim().isEmpty()) {
HORMOMBA = Byte.parseByte(s);
} else {
HORMOMBA = Byte.MIN_VALUE;
}
}

protected final void initHORMOMBQ(String s) {
if (!s.trim().isEmpty()) {
HORMOMBQ = Byte.parseByte(s);
} else {
HORMOMBQ = Byte.MIN_VALUE;
}
}

protected final void initHORMOME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOME = false;
} else {
HORMOME = true;
}
}
}

protected final void initHORMOMFP(String s) {
if (!s.trim().isEmpty()) {
HORMOMFP = Byte.parseByte(s);
} else {
HORMOMFP = Byte.MIN_VALUE;
}
}

protected final void initHORMOML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOML = false;
} else {
HORMOML = true;
}
}
}

protected final void initHORMOMLA(String s) {
if (!s.trim().isEmpty()) {
HORMOMLA = Byte.parseByte(s);
} else {
HORMOMLA = Byte.MIN_VALUE;
}
}

protected final void initHORMOMNS(String s) {
if (!s.trim().isEmpty()) {
HORMOMNS = Byte.parseByte(s);
} else {
HORMOMNS = Byte.MIN_VALUE;
}
}

protected final void initHORMOMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOMR = false;
} else {
HORMOMR = true;
}
}
}

protected final void initHORMOMSH(String s) {
if (!s.trim().isEmpty()) {
HORMOMSH = Byte.parseByte(s);
} else {
HORMOMSH = Byte.MIN_VALUE;
}
}

protected final void initHORMOMSM(String s) {
if (!s.trim().isEmpty()) {
HORMOMSM = Byte.parseByte(s);
} else {
HORMOMSM = Byte.MIN_VALUE;
}
}

protected final void initHORMOMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOMU = false;
} else {
HORMOMU = true;
}
}
}

protected final void initHORMOOE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOOE = false;
} else {
HORMOOE = true;
}
}
}

protected final void initHORMOOL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOOL = false;
} else {
HORMOOL = true;
}
}
}

protected final void initHORMOOR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOOR = false;
} else {
HORMOOR = true;
}
}
}

protected final void initHORMOOT(String s) {
if (!s.trim().isEmpty()) {
HORMOOT = Byte.parseByte(s);
} else {
HORMOOT = Byte.MIN_VALUE;
}
}

protected final void initHORMOOU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOOU = false;
} else {
HORMOOU = true;
}
}
}

protected final void initHORMOSH(String s) {
if (!s.trim().isEmpty()) {
HORMOSH = Byte.parseByte(s);
} else {
HORMOSH = Byte.MIN_VALUE;
}
}

protected final void initHORMOSM(String s) {
if (!s.trim().isEmpty()) {
HORMOSM = Byte.parseByte(s);
} else {
HORMOSM = Byte.MIN_VALUE;
}
}

protected final void initHORMOWE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOWE = false;
} else {
HORMOWE = true;
}
}
}

protected final void initHORMOWL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOWL = false;
} else {
HORMOWL = true;
}
}
}

protected final void initHORMOWR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOWR = false;
} else {
HORMOWR = true;
}
}
}

protected final void initHORMOWU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOWU = false;
} else {
HORMOWU = true;
}
}
}

protected final void initHORMOYE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOYE = false;
} else {
HORMOYE = true;
}
}
}

protected final void initHORMOYL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOYL = false;
} else {
HORMOYL = true;
}
}
}

protected final void initHORMOYR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOYR = false;
} else {
HORMOYR = true;
}
}
}

protected final void initHORMOYU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOYU = false;
} else {
HORMOYU = true;
}
}
}

protected final void initHORMS(String s) {
if (!s.trim().isEmpty()) {
HORMS = Byte.parseByte(s);
} else {
HORMS = Byte.MIN_VALUE;
}
}

protected final void initHORMUFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFE = false;
} else {
HORMUFE = true;
}
}
}

protected final void initHORMUFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFL = false;
} else {
HORMUFL = true;
}
}
}

protected final void initHORMUFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFR = false;
} else {
HORMUFR = true;
}
}
}

protected final void initHORMUFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFU = false;
} else {
HORMUFU = true;
}
}
}

protected final void initHORMUME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUME = false;
} else {
HORMUME = true;
}
}
}

protected final void initHORMUML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUML = false;
} else {
HORMUML = true;
}
}
}

protected final void initHORMUMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUMR = false;
} else {
HORMUMR = true;
}
}
}

protected final void initHORMUMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUMU = false;
} else {
HORMUMU = true;
}
}
}

protected final void initHORMUO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUO = false;
} else {
HORMUO = true;
}
}
}

protected final void initHORMUOE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOE = false;
} else {
HORMUOE = true;
}
}
}

protected final void initHORMUOL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOL = false;
} else {
HORMUOL = true;
}
}
}

protected final void initHORMUOR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOR = false;
} else {
HORMUOR = true;
}
}
}

protected final void initHORMUOU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOU = false;
} else {
HORMUOU = true;
}
}
}

protected final void initHORMUWE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWE = false;
} else {
HORMUWE = true;
}
}
}

protected final void initHORMUWL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWL = false;
} else {
HORMUWL = true;
}
}
}

protected final void initHORMUWR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWR = false;
} else {
HORMUWR = true;
}
}
}

protected final void initHORMUWU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWU = false;
} else {
HORMUWU = true;
}
}
}

protected final void initHORMUYE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYE = false;
} else {
HORMUYE = true;
}
}
}

protected final void initHORMUYL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYL = false;
} else {
HORMUYL = true;
}
}
}

protected final void initHORMUYR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYR = false;
} else {
HORMUYR = true;
}
}
}

protected final void initHORMUYU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYU = false;
} else {
HORMUYU = true;
}
}
}

protected final void initHORMV95(String s) {
if (!s.trim().isEmpty()) {
HORMV95 = Byte.parseByte(s);
} else {
HORMV95 = Byte.MIN_VALUE;
}
}

protected final void initHORMVBA(String s) {
if (!s.trim().isEmpty()) {
HORMVBA = Byte.parseByte(s);
} else {
HORMVBA = Byte.MIN_VALUE;
}
}

protected final void initHORMVBO(String s) {
if (!s.trim().isEmpty()) {
HORMVBO = Byte.parseByte(s);
} else {
HORMVBO = Byte.MIN_VALUE;
}
}

protected final void initHORMVER(String s) {
if (!s.trim().isEmpty()) {
HORMVER = Byte.parseByte(s);
} else {
HORMVER = Byte.MIN_VALUE;
}
}

protected final void initHORMVHR(String s) {
if (!s.trim().isEmpty()) {
HORMVHR = Byte.parseByte(s);
} else {
HORMVHR = Byte.MIN_VALUE;
}
}

protected final void initHORMVIF(String s) {
if (!s.trim().isEmpty()) {
HORMVIF = Byte.parseByte(s);
} else {
HORMVIF = Byte.MIN_VALUE;
}
}

protected final void initHORMVJR(String s) {
if (!s.trim().isEmpty()) {
HORMVJR = Byte.parseByte(s);
} else {
HORMVJR = Byte.MIN_VALUE;
}
}

protected final void initHORMVM85(String s) {
if (!s.trim().isEmpty()) {
HORMVM85 = Byte.parseByte(s);
} else {
HORMVM85 = Byte.MIN_VALUE;
}
}

protected final void initHORMVM86(String s) {
if (!s.trim().isEmpty()) {
HORMVM86 = Byte.parseByte(s);
} else {
HORMVM86 = Byte.MIN_VALUE;
}
}

protected final void initHORMVMAB(String s) {
if (!s.trim().isEmpty()) {
HORMVMAB = Byte.parseByte(s);
} else {
HORMVMAB = Byte.MIN_VALUE;
}
}

protected final void initHORMVMBA(String s) {
if (!s.trim().isEmpty()) {
HORMVMBA = Byte.parseByte(s);
} else {
HORMVMBA = Byte.MIN_VALUE;
}
}

protected final void initHORMVMBO(String s) {
if (!s.trim().isEmpty()) {
HORMVMBO = Byte.parseByte(s);
} else {
HORMVMBO = Byte.MIN_VALUE;
}
}

protected final void initHORMVMER(String s) {
if (!s.trim().isEmpty()) {
HORMVMER = Byte.parseByte(s);
} else {
HORMVMER = Byte.MIN_VALUE;
}
}

protected final void initHORMVMHR(String s) {
if (!s.trim().isEmpty()) {
HORMVMHR = Byte.parseByte(s);
} else {
HORMVMHR = Byte.MIN_VALUE;
}
}

protected final void initHORMVMIF(String s) {
if (!s.trim().isEmpty()) {
HORMVMIF = Byte.parseByte(s);
} else {
HORMVMIF = Byte.MIN_VALUE;
}
}

protected final void initHORMVMJR(String s) {
if (!s.trim().isEmpty()) {
HORMVMJR = Byte.parseByte(s);
} else {
HORMVMJR = Byte.MIN_VALUE;
}
}

protected final void initHORMVMMS(String s) {
if (!s.trim().isEmpty()) {
HORMVMMS = Byte.parseByte(s);
} else {
HORMVMMS = Byte.MIN_VALUE;
}
}

protected final void initHORMVMNF(String s) {
if (!s.trim().isEmpty()) {
HORMVMNF = Byte.parseByte(s);
} else {
HORMVMNF = Byte.MIN_VALUE;
}
}

protected final void initHORMVMNH(String s) {
if (!s.trim().isEmpty()) {
HORMVMNH = Byte.parseByte(s);
} else {
HORMVMNH = Byte.MIN_VALUE;
}
}

protected final void initHORMVMNJ(String s) {
if (!s.trim().isEmpty()) {
HORMVMNJ = Byte.parseByte(s);
} else {
HORMVMNJ = Byte.MIN_VALUE;
}
}

protected final void initHORMVMOF(String s) {
if (!s.trim().isEmpty()) {
HORMVMOF = Byte.parseByte(s);
} else {
HORMVMOF = Byte.MIN_VALUE;
}
}

protected final void initHORMVMPC(String s) {
if (!s.trim().isEmpty()) {
HORMVMPC = Byte.parseByte(s);
} else {
HORMVMPC = Byte.MIN_VALUE;
}
}

protected final void initHORMVMPN(String s) {
if (!s.trim().isEmpty()) {
HORMVMPN = Byte.parseByte(s);
} else {
HORMVMPN = Byte.MIN_VALUE;
}
}

protected final void initHORMVMS(String s) {
if (!s.trim().isEmpty()) {
HORMVMS = Byte.parseByte(s);
} else {
HORMVMS = Byte.MIN_VALUE;
}
}

protected final void initHORMVMSP(String s) {
if (!s.trim().isEmpty()) {
HORMVMSP = Byte.parseByte(s);
} else {
HORMVMSP = Byte.MIN_VALUE;
}
}

protected final void initHORMVNF(String s) {
if (!s.trim().isEmpty()) {
HORMVNF = Byte.parseByte(s);
} else {
HORMVNF = Byte.MIN_VALUE;
}
}

protected final void initHORMVNJ(String s) {
if (!s.trim().isEmpty()) {
HORMVNJ = Byte.parseByte(s);
} else {
HORMVNJ = Byte.MIN_VALUE;
}
}

protected final void initHORMVOF(String s) {
if (!s.trim().isEmpty()) {
HORMVOF = Byte.parseByte(s);
} else {
HORMVOF = Byte.MIN_VALUE;
}
}

protected final void initHORMVPN(String s) {
if (!s.trim().isEmpty()) {
HORMVPN = Byte.parseByte(s);
} else {
HORMVPN = Byte.MIN_VALUE;
}
}

protected final void initHORMVSP(String s) {
if (!s.trim().isEmpty()) {
HORMVSP = Byte.parseByte(s);
} else {
HORMVSP = Byte.MIN_VALUE;
}
}

protected final void initHORPAY(String s) {
if (!s.trim().isEmpty()) {
HORPAY = Byte.parseByte(s);
} else {
HORPAY = Byte.MIN_VALUE;
}
}

protected final void initHORPC(String s) {
if (!s.trim().isEmpty()) {
HORPC = Byte.parseByte(s);
} else {
HORPC = Byte.MIN_VALUE;
}
}

protected final void initHORPCM(String s) {
if (!s.trim().isEmpty()) {
HORPCM = Integer.parseInt(s);
} else {
HORPCM = Integer.MIN_VALUE;
}
}

protected final void initHORPCME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPCME = false;
} else {
HORPCME = true;
}
}
}

protected final void initHORPCML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPCML = false;
} else {
HORPCML = true;
}
}
}

protected final void initHORPCMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPCMR = false;
} else {
HORPCMR = true;
}
}
}

protected final void initHORPCMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPCMU = false;
} else {
HORPCMU = true;
}
}
}

protected final void initHORPM(String s) {
if (!s.trim().isEmpty()) {
HORPM = Integer.parseInt(s);
} else {
HORPM = Integer.MIN_VALUE;
}
}

protected final void initHORPME(String s) {
if (!s.trim().isEmpty()) {
HORPME = Byte.parseByte(s);
} else {
HORPME = Byte.MIN_VALUE;
}
}

protected final void initHORPML(String s) {
if (!s.trim().isEmpty()) {
HORPML = Short.parseShort(s);
} else {
HORPML = Short.MIN_VALUE;
}
}

protected final void initHORPMR(String s) {
if (!s.trim().isEmpty()) {
HORPMR = Byte.parseByte(s);
} else {
HORPMR = Byte.MIN_VALUE;
}
}

protected final void initHORPMU(String s) {
if (!s.trim().isEmpty()) {
HORPMU = Integer.parseInt(s);
} else {
HORPMU = Integer.MIN_VALUE;
}
}

protected final void initHORPOFO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPOFO = false;
} else {
HORPOFO = true;
}
}
}

protected final void initHORPOS(String s) {
if (!s.trim().isEmpty()) {
HORPOS = Byte.parseByte(s);
} else {
HORPOS = Byte.MIN_VALUE;
}
}

protected final void initHORPOSO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPOSO = false;
} else {
HORPOSO = true;
}
}
}

protected final void initHORRME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRME = false;
} else {
HORRME = true;
}
}
}

protected final void initHORRML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRML = false;
} else {
HORRML = true;
}
}
}

protected final void initHORRMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRMR = false;
} else {
HORRMR = true;
}
}
}

protected final void initHORRMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRMU = false;
} else {
HORRMU = true;
}
}
}

protected final void initHOSELLE(String s) {
if (!s.trim().isEmpty()) {
HOSELLE = Byte.parseByte(s);
} else {
HOSELLE = Byte.MIN_VALUE;
}
}

protected final void initHOSELLL(String s) {
if (!s.trim().isEmpty()) {
HOSELLL = Integer.parseInt(s);
} else {
HOSELLL = Integer.MIN_VALUE;
}
}

protected final void initHOSELLR(String s) {
if (!s.trim().isEmpty()) {
HOSELLR = Byte.parseByte(s);
} else {
HOSELLR = Byte.MIN_VALUE;
}
}

protected final void initHOSELLU(String s) {
if (!s.trim().isEmpty()) {
HOSELLU = Integer.parseInt(s);
} else {
HOSELLU = Integer.MIN_VALUE;
}
}

protected final void initHOTENST(String s) {
if (!s.trim().isEmpty()) {
HOTENST = Byte.parseByte(s);
} else {
HOTENST = Byte.MIN_VALUE;
}
}

protected final void initHOV(String s) {
if (!s.trim().isEmpty()) {
HOV = Byte.parseByte(s);
} else {
HOV = Byte.MIN_VALUE;
}
}

protected final void initHOVAG11(String s) {
if (!s.trim().isEmpty()) {
HOVAG11 = Byte.parseByte(s);
} else {
HOVAG11 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG12(String s) {
if (!s.trim().isEmpty()) {
HOVAG12 = Byte.parseByte(s);
} else {
HOVAG12 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG13(String s) {
if (!s.trim().isEmpty()) {
HOVAG13 = Byte.parseByte(s);
} else {
HOVAG13 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG14(String s) {
if (!s.trim().isEmpty()) {
HOVAG14 = Byte.parseByte(s);
} else {
HOVAG14 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG15(String s) {
if (!s.trim().isEmpty()) {
HOVAG15 = Byte.parseByte(s);
} else {
HOVAG15 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG16(String s) {
if (!s.trim().isEmpty()) {
HOVAG16 = Byte.parseByte(s);
} else {
HOVAG16 = Byte.MIN_VALUE;
}
}

protected final void initHOVE(String s) {
if (!s.trim().isEmpty()) {
HOVE = Integer.parseInt(s);
} else {
HOVE = Integer.MIN_VALUE;
}
}

protected final void initHOVEE(String s) {
if (!s.trim().isEmpty()) {
HOVEE = Byte.parseByte(s);
} else {
HOVEE = Byte.MIN_VALUE;
}
}

protected final void initHOVEHX(String s) {
if (!s.trim().isEmpty()) {
HOVEHX = Byte.parseByte(s);
} else {
HOVEHX = Byte.MIN_VALUE;
}
}

protected final void initHOVEL(String s) {
if (!s.trim().isEmpty()) {
HOVEL = Integer.parseInt(s);
} else {
HOVEL = Integer.MIN_VALUE;
}
}

protected final void initHOVER(String s) {
if (!s.trim().isEmpty()) {
HOVER = s;
}
}

protected final void initHOVER10(String s) {
if (!s.trim().isEmpty()) {
HOVER10 = s;
}
}

protected final void initHOVER11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER11 = false;
} else {
HOVER11 = true;
}
}
}

protected final void initHOVER12(String s) {
if (!s.trim().isEmpty()) {
HOVER12 = s;
}
}

protected final void initHOVER13(String s) {
if (!s.trim().isEmpty()) {
HOVER13 = s;
}
}

protected final void initHOVER14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER14 = false;
} else {
HOVER14 = true;
}
}
}

protected final void initHOVER15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER15 = false;
} else {
HOVER15 = true;
}
}
}

protected final void initHOVER16(String s) {
if (!s.trim().isEmpty()) {
HOVER16 = s;
}
}

protected final void initHOVER2(String s) {
if (!s.trim().isEmpty()) {
HOVER2 = s;
}
}

protected final void initHOVER3(String s) {
if (!s.trim().isEmpty()) {
HOVER3 = s;
}
}

protected final void initHOVER4(String s) {
if (!s.trim().isEmpty()) {
HOVER4 = s;
}
}

protected final void initHOVER5(String s) {
if (!s.trim().isEmpty()) {
HOVER5 = s;
}
}

protected final void initHOVER6(String s) {
if (!s.trim().isEmpty()) {
HOVER6 = s;
}
}

protected final void initHOVER7(String s) {
if (!s.trim().isEmpty()) {
HOVER7 = s;
}
}

protected final void initHOVER8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER8 = false;
} else {
HOVER8 = true;
}
}
}

protected final void initHOVER9(String s) {
if (!s.trim().isEmpty()) {
HOVER9 = s;
}
}

protected final void initHOVEU(String s) {
if (!s.trim().isEmpty()) {
HOVEU = Integer.parseInt(s);
} else {
HOVEU = Integer.MIN_VALUE;
}
}

protected final void initHOVLR(String s) {
if (!s.trim().isEmpty()) {
HOVLR = s;
}
}

protected final void initHOVLR10(String s) {
if (!s.trim().isEmpty()) {
HOVLR10 = s;
}
}

protected final void initHOVLR11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVLR11 = false;
} else {
HOVLR11 = true;
}
}
}

protected final void initHOVLR12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVLR12 = false;
} else {
HOVLR12 = true;
}
}
}

protected final void initHOVLR13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVLR13 = false;
} else {
HOVLR13 = true;
}
}
}

protected final void initHOVLR14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVLR14 = false;
} else {
HOVLR14 = true;
}
}
}

protected final void initHOVLR15(String s) {
if (!s.trim().isEmpty()) {
HOVLR15 = s;
}
}

protected final void initHOVLR16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVLR16 = false;
} else {
HOVLR16 = true;
}
}
}

protected final void initHOVLR2(String s) {
if (!s.trim().isEmpty()) {
HOVLR2 = s;
}
}

protected final void initHOVLR3(String s) {
if (!s.trim().isEmpty()) {
HOVLR3 = s;
}
}

protected final void initHOVLR4(String s) {
if (!s.trim().isEmpty()) {
HOVLR4 = s;
}
}

protected final void initHOVLR5(String s) {
if (!s.trim().isEmpty()) {
HOVLR5 = s;
}
}

protected final void initHOVLR6(String s) {
if (!s.trim().isEmpty()) {
HOVLR6 = s;
}
}

protected final void initHOVLR7(String s) {
if (!s.trim().isEmpty()) {
HOVLR7 = s;
}
}

protected final void initHOVLR8(String s) {
if (!s.trim().isEmpty()) {
HOVLR8 = s;
}
}

protected final void initHOVLR9(String s) {
if (!s.trim().isEmpty()) {
HOVLR9 = s;
}
}

protected final void initHOVML(String s) {
if (!s.trim().isEmpty()) {
HOVML = Integer.parseInt(s);
} else {
HOVML = Integer.MIN_VALUE;
}
}

protected final void initHOVMLE(String s) {
if (!s.trim().isEmpty()) {
HOVMLE = Byte.parseByte(s);
} else {
HOVMLE = Byte.MIN_VALUE;
}
}

protected final void initHOVMLL(String s) {
if (!s.trim().isEmpty()) {
HOVMLL = Integer.parseInt(s);
} else {
HOVMLL = Integer.MIN_VALUE;
}
}

protected final void initHOVMLR(String s) {
if (!s.trim().isEmpty()) {
HOVMLR = Byte.parseByte(s);
} else {
HOVMLR = Byte.MIN_VALUE;
}
}

protected final void initHOVMLU(String s) {
if (!s.trim().isEmpty()) {
HOVMLU = Integer.parseInt(s);
} else {
HOVMLU = Integer.MIN_VALUE;
}
}

protected final void initHOVN(String s) {
if (!s.trim().isEmpty()) {
HOVN = Byte.parseByte(s);
} else {
HOVN = Byte.MIN_VALUE;
}
}

protected final void initHOVNO(String s) {
if (!s.trim().isEmpty()) {
HOVNO = Byte.parseByte(s);
} else {
HOVNO = Byte.MIN_VALUE;
}
}

protected final void initHOVNO10(String s) {
if (!s.trim().isEmpty()) {
HOVNO10 = Byte.parseByte(s);
} else {
HOVNO10 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO11(String s) {
if (!s.trim().isEmpty()) {
HOVNO11 = Byte.parseByte(s);
} else {
HOVNO11 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO12(String s) {
if (!s.trim().isEmpty()) {
HOVNO12 = Byte.parseByte(s);
} else {
HOVNO12 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO13(String s) {
if (!s.trim().isEmpty()) {
HOVNO13 = Byte.parseByte(s);
} else {
HOVNO13 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO14(String s) {
if (!s.trim().isEmpty()) {
HOVNO14 = Byte.parseByte(s);
} else {
HOVNO14 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO15(String s) {
if (!s.trim().isEmpty()) {
HOVNO15 = Byte.parseByte(s);
} else {
HOVNO15 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO16(String s) {
if (!s.trim().isEmpty()) {
HOVNO16 = Byte.parseByte(s);
} else {
HOVNO16 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO2(String s) {
if (!s.trim().isEmpty()) {
HOVNO2 = Byte.parseByte(s);
} else {
HOVNO2 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO3(String s) {
if (!s.trim().isEmpty()) {
HOVNO3 = Byte.parseByte(s);
} else {
HOVNO3 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO4(String s) {
if (!s.trim().isEmpty()) {
HOVNO4 = Byte.parseByte(s);
} else {
HOVNO4 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO5(String s) {
if (!s.trim().isEmpty()) {
HOVNO5 = Byte.parseByte(s);
} else {
HOVNO5 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO6(String s) {
if (!s.trim().isEmpty()) {
HOVNO6 = Byte.parseByte(s);
} else {
HOVNO6 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO7(String s) {
if (!s.trim().isEmpty()) {
HOVNO7 = Byte.parseByte(s);
} else {
HOVNO7 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO8(String s) {
if (!s.trim().isEmpty()) {
HOVNO8 = Byte.parseByte(s);
} else {
HOVNO8 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO9(String s) {
if (!s.trim().isEmpty()) {
HOVNO9 = Byte.parseByte(s);
} else {
HOVNO9 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR(String s) {
if (!s.trim().isEmpty()) {
HOVNR = Byte.parseByte(s);
} else {
HOVNR = Byte.MIN_VALUE;
}
}

protected final void initHOVNR10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR10 = false;
} else {
HOVNR10 = true;
}
}
}

protected final void initHOVNR11(String s) {
if (!s.trim().isEmpty()) {
HOVNR11 = Byte.parseByte(s);
} else {
HOVNR11 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR12 = false;
} else {
HOVNR12 = true;
}
}
}

protected final void initHOVNR13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR13 = false;
} else {
HOVNR13 = true;
}
}
}

protected final void initHOVNR14(String s) {
if (!s.trim().isEmpty()) {
HOVNR14 = Byte.parseByte(s);
} else {
HOVNR14 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR15 = false;
} else {
HOVNR15 = true;
}
}
}

protected final void initHOVNR16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR16 = false;
} else {
HOVNR16 = true;
}
}
}

protected final void initHOVNR2(String s) {
if (!s.trim().isEmpty()) {
HOVNR2 = Byte.parseByte(s);
} else {
HOVNR2 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR3(String s) {
if (!s.trim().isEmpty()) {
HOVNR3 = s;
}
}

protected final void initHOVNR4(String s) {
if (!s.trim().isEmpty()) {
HOVNR4 = Byte.parseByte(s);
} else {
HOVNR4 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR5(String s) {
if (!s.trim().isEmpty()) {
HOVNR5 = Byte.parseByte(s);
} else {
HOVNR5 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR6(String s) {
if (!s.trim().isEmpty()) {
HOVNR6 = Byte.parseByte(s);
} else {
HOVNR6 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR7(String s) {
if (!s.trim().isEmpty()) {
HOVNR7 = Byte.parseByte(s);
} else {
HOVNR7 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR8(String s) {
if (!s.trim().isEmpty()) {
HOVNR8 = Byte.parseByte(s);
} else {
HOVNR8 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR9(String s) {
if (!s.trim().isEmpty()) {
HOVNR9 = Byte.parseByte(s);
} else {
HOVNR9 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW(String s) {
if (!s.trim().isEmpty()) {
HOVNW = Byte.parseByte(s);
} else {
HOVNW = Byte.MIN_VALUE;
}
}

protected final void initHOVNW10(String s) {
if (!s.trim().isEmpty()) {
HOVNW10 = Byte.parseByte(s);
} else {
HOVNW10 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW11(String s) {
if (!s.trim().isEmpty()) {
HOVNW11 = Byte.parseByte(s);
} else {
HOVNW11 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW12(String s) {
if (!s.trim().isEmpty()) {
HOVNW12 = Byte.parseByte(s);
} else {
HOVNW12 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW13(String s) {
if (!s.trim().isEmpty()) {
HOVNW13 = Byte.parseByte(s);
} else {
HOVNW13 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW14(String s) {
if (!s.trim().isEmpty()) {
HOVNW14 = Byte.parseByte(s);
} else {
HOVNW14 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW15(String s) {
if (!s.trim().isEmpty()) {
HOVNW15 = Byte.parseByte(s);
} else {
HOVNW15 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW16(String s) {
if (!s.trim().isEmpty()) {
HOVNW16 = Byte.parseByte(s);
} else {
HOVNW16 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW2(String s) {
if (!s.trim().isEmpty()) {
HOVNW2 = Byte.parseByte(s);
} else {
HOVNW2 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW4(String s) {
if (!s.trim().isEmpty()) {
HOVNW4 = Byte.parseByte(s);
} else {
HOVNW4 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW5(String s) {
if (!s.trim().isEmpty()) {
HOVNW5 = Byte.parseByte(s);
} else {
HOVNW5 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW6(String s) {
if (!s.trim().isEmpty()) {
HOVNW6 = Byte.parseByte(s);
} else {
HOVNW6 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW7(String s) {
if (!s.trim().isEmpty()) {
HOVNW7 = Byte.parseByte(s);
} else {
HOVNW7 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW8(String s) {
if (!s.trim().isEmpty()) {
HOVNW8 = Byte.parseByte(s);
} else {
HOVNW8 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW9(String s) {
if (!s.trim().isEmpty()) {
HOVNW9 = Byte.parseByte(s);
} else {
HOVNW9 = Byte.MIN_VALUE;
}
}

protected final void initHOVST(String s) {
if (!s.trim().isEmpty()) {
HOVST = Byte.parseByte(s);
} else {
HOVST = Byte.MIN_VALUE;
}
}

protected final void initHOVST10(String s) {
if (!s.trim().isEmpty()) {
HOVST10 = Byte.parseByte(s);
} else {
HOVST10 = Byte.MIN_VALUE;
}
}

protected final void initHOVST11(String s) {
if (!s.trim().isEmpty()) {
HOVST11 = Byte.parseByte(s);
} else {
HOVST11 = Byte.MIN_VALUE;
}
}

protected final void initHOVST12(String s) {
if (!s.trim().isEmpty()) {
HOVST12 = Byte.parseByte(s);
} else {
HOVST12 = Byte.MIN_VALUE;
}
}

protected final void initHOVST13(String s) {
if (!s.trim().isEmpty()) {
HOVST13 = Byte.parseByte(s);
} else {
HOVST13 = Byte.MIN_VALUE;
}
}

protected final void initHOVST14(String s) {
if (!s.trim().isEmpty()) {
HOVST14 = Byte.parseByte(s);
} else {
HOVST14 = Byte.MIN_VALUE;
}
}

protected final void initHOVST15(String s) {
if (!s.trim().isEmpty()) {
HOVST15 = Byte.parseByte(s);
} else {
HOVST15 = Byte.MIN_VALUE;
}
}

protected final void initHOVST16(String s) {
if (!s.trim().isEmpty()) {
HOVST16 = Byte.parseByte(s);
} else {
HOVST16 = Byte.MIN_VALUE;
}
}

protected final void initHOVST2(String s) {
if (!s.trim().isEmpty()) {
HOVST2 = Byte.parseByte(s);
} else {
HOVST2 = Byte.MIN_VALUE;
}
}

protected final void initHOVST3(String s) {
if (!s.trim().isEmpty()) {
HOVST3 = Byte.parseByte(s);
} else {
HOVST3 = Byte.MIN_VALUE;
}
}

protected final void initHOVST4(String s) {
if (!s.trim().isEmpty()) {
HOVST4 = Byte.parseByte(s);
} else {
HOVST4 = Byte.MIN_VALUE;
}
}

protected final void initHOVST5(String s) {
if (!s.trim().isEmpty()) {
HOVST5 = Byte.parseByte(s);
} else {
HOVST5 = Byte.MIN_VALUE;
}
}

protected final void initHOVST6(String s) {
if (!s.trim().isEmpty()) {
HOVST6 = Byte.parseByte(s);
} else {
HOVST6 = Byte.MIN_VALUE;
}
}

protected final void initHOVST7(String s) {
if (!s.trim().isEmpty()) {
HOVST7 = Byte.parseByte(s);
} else {
HOVST7 = Byte.MIN_VALUE;
}
}

protected final void initHOVST8(String s) {
if (!s.trim().isEmpty()) {
HOVST8 = Byte.parseByte(s);
} else {
HOVST8 = Byte.MIN_VALUE;
}
}

protected final void initHOVST9(String s) {
if (!s.trim().isEmpty()) {
HOVST9 = Byte.parseByte(s);
} else {
HOVST9 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1001(String s) {
if (!s.trim().isEmpty()) {
HOVW1001 = Byte.parseByte(s);
} else {
HOVW1001 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1002(String s) {
if (!s.trim().isEmpty()) {
HOVW1002 = Byte.parseByte(s);
} else {
HOVW1002 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1003(String s) {
if (!s.trim().isEmpty()) {
HOVW1003 = Byte.parseByte(s);
} else {
HOVW1003 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1004(String s) {
if (!s.trim().isEmpty()) {
HOVW1004 = Byte.parseByte(s);
} else {
HOVW1004 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1005(String s) {
if (!s.trim().isEmpty()) {
HOVW1005 = Byte.parseByte(s);
} else {
HOVW1005 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1006(String s) {
if (!s.trim().isEmpty()) {
HOVW1006 = Byte.parseByte(s);
} else {
HOVW1006 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1007(String s) {
if (!s.trim().isEmpty()) {
HOVW1007 = Byte.parseByte(s);
} else {
HOVW1007 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1008(String s) {
if (!s.trim().isEmpty()) {
HOVW1008 = Byte.parseByte(s);
} else {
HOVW1008 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1009(String s) {
if (!s.trim().isEmpty()) {
HOVW1009 = Byte.parseByte(s);
} else {
HOVW1009 = Byte.MIN_VALUE;
}
}

protected final void initHOVW101(String s) {
if (!s.trim().isEmpty()) {
HOVW101 = Byte.parseByte(s);
} else {
HOVW101 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1010(String s) {
if (!s.trim().isEmpty()) {
HOVW1010 = Byte.parseByte(s);
} else {
HOVW1010 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1011(String s) {
if (!s.trim().isEmpty()) {
HOVW1011 = Byte.parseByte(s);
} else {
HOVW1011 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1012(String s) {
if (!s.trim().isEmpty()) {
HOVW1012 = Byte.parseByte(s);
} else {
HOVW1012 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1013(String s) {
if (!s.trim().isEmpty()) {
HOVW1013 = Byte.parseByte(s);
} else {
HOVW1013 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1014(String s) {
if (!s.trim().isEmpty()) {
HOVW1014 = Byte.parseByte(s);
} else {
HOVW1014 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1015(String s) {
if (!s.trim().isEmpty()) {
HOVW1015 = Byte.parseByte(s);
} else {
HOVW1015 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1016(String s) {
if (!s.trim().isEmpty()) {
HOVW1016 = Byte.parseByte(s);
} else {
HOVW1016 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1017(String s) {
if (!s.trim().isEmpty()) {
HOVW1017 = Byte.parseByte(s);
} else {
HOVW1017 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1018(String s) {
if (!s.trim().isEmpty()) {
HOVW1018 = Byte.parseByte(s);
} else {
HOVW1018 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1019(String s) {
if (!s.trim().isEmpty()) {
HOVW1019 = Byte.parseByte(s);
} else {
HOVW1019 = Byte.MIN_VALUE;
}
}

protected final void initHOVW102(String s) {
if (!s.trim().isEmpty()) {
HOVW102 = Byte.parseByte(s);
} else {
HOVW102 = Byte.MIN_VALUE;
}
}

protected final void initHOVW103(String s) {
if (!s.trim().isEmpty()) {
HOVW103 = Byte.parseByte(s);
} else {
HOVW103 = Byte.MIN_VALUE;
}
}

protected final void initHOVW104(String s) {
if (!s.trim().isEmpty()) {
HOVW104 = Byte.parseByte(s);
} else {
HOVW104 = Byte.MIN_VALUE;
}
}

protected final void initHOVW105(String s) {
if (!s.trim().isEmpty()) {
HOVW105 = Byte.parseByte(s);
} else {
HOVW105 = Byte.MIN_VALUE;
}
}

protected final void initHOVW106(String s) {
if (!s.trim().isEmpty()) {
HOVW106 = Byte.parseByte(s);
} else {
HOVW106 = Byte.MIN_VALUE;
}
}

protected final void initHOVW107(String s) {
if (!s.trim().isEmpty()) {
HOVW107 = Byte.parseByte(s);
} else {
HOVW107 = Byte.MIN_VALUE;
}
}

protected final void initHOVW108(String s) {
if (!s.trim().isEmpty()) {
HOVW108 = Byte.parseByte(s);
} else {
HOVW108 = Byte.MIN_VALUE;
}
}

protected final void initHOVW109(String s) {
if (!s.trim().isEmpty()) {
HOVW109 = Byte.parseByte(s);
} else {
HOVW109 = Byte.MIN_VALUE;
}
}

protected final void initHOVW11(String s) {
if (!s.trim().isEmpty()) {
HOVW11 = Byte.parseByte(s);
} else {
HOVW11 = Byte.MIN_VALUE;
}
}

protected final void initHOVW110(String s) {
if (!s.trim().isEmpty()) {
HOVW110 = Byte.parseByte(s);
} else {
HOVW110 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1101(String s) {
if (!s.trim().isEmpty()) {
HOVW1101 = Byte.parseByte(s);
} else {
HOVW1101 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1102(String s) {
if (!s.trim().isEmpty()) {
HOVW1102 = Byte.parseByte(s);
} else {
HOVW1102 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1103(String s) {
if (!s.trim().isEmpty()) {
HOVW1103 = Byte.parseByte(s);
} else {
HOVW1103 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1104(String s) {
if (!s.trim().isEmpty()) {
HOVW1104 = Byte.parseByte(s);
} else {
HOVW1104 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1105(String s) {
if (!s.trim().isEmpty()) {
HOVW1105 = Byte.parseByte(s);
} else {
HOVW1105 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1106(String s) {
if (!s.trim().isEmpty()) {
HOVW1106 = Byte.parseByte(s);
} else {
HOVW1106 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1107(String s) {
if (!s.trim().isEmpty()) {
HOVW1107 = Byte.parseByte(s);
} else {
HOVW1107 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1108(String s) {
if (!s.trim().isEmpty()) {
HOVW1108 = Byte.parseByte(s);
} else {
HOVW1108 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1109(String s) {
if (!s.trim().isEmpty()) {
HOVW1109 = Byte.parseByte(s);
} else {
HOVW1109 = Byte.MIN_VALUE;
}
}

protected final void initHOVW111(String s) {
if (!s.trim().isEmpty()) {
HOVW111 = Byte.parseByte(s);
} else {
HOVW111 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1110(String s) {
if (!s.trim().isEmpty()) {
HOVW1110 = Byte.parseByte(s);
} else {
HOVW1110 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1111(String s) {
if (!s.trim().isEmpty()) {
HOVW1111 = Byte.parseByte(s);
} else {
HOVW1111 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1112(String s) {
if (!s.trim().isEmpty()) {
HOVW1112 = Byte.parseByte(s);
} else {
HOVW1112 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1113(String s) {
if (!s.trim().isEmpty()) {
HOVW1113 = Byte.parseByte(s);
} else {
HOVW1113 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1114(String s) {
if (!s.trim().isEmpty()) {
HOVW1114 = Byte.parseByte(s);
} else {
HOVW1114 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1115(String s) {
if (!s.trim().isEmpty()) {
HOVW1115 = Byte.parseByte(s);
} else {
HOVW1115 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1116(String s) {
if (!s.trim().isEmpty()) {
HOVW1116 = Byte.parseByte(s);
} else {
HOVW1116 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1117(String s) {
if (!s.trim().isEmpty()) {
HOVW1117 = Byte.parseByte(s);
} else {
HOVW1117 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1118(String s) {
if (!s.trim().isEmpty()) {
HOVW1118 = Byte.parseByte(s);
} else {
HOVW1118 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1119(String s) {
if (!s.trim().isEmpty()) {
HOVW1119 = Byte.parseByte(s);
} else {
HOVW1119 = Byte.MIN_VALUE;
}
}

protected final void initHOVW112(String s) {
if (!s.trim().isEmpty()) {
HOVW112 = Byte.parseByte(s);
} else {
HOVW112 = Byte.MIN_VALUE;
}
}

protected final void initHOVW113(String s) {
if (!s.trim().isEmpty()) {
HOVW113 = Byte.parseByte(s);
} else {
HOVW113 = Byte.MIN_VALUE;
}
}

protected final void initHOVW114(String s) {
if (!s.trim().isEmpty()) {
HOVW114 = Byte.parseByte(s);
} else {
HOVW114 = Byte.MIN_VALUE;
}
}

protected final void initHOVW115(String s) {
if (!s.trim().isEmpty()) {
HOVW115 = Byte.parseByte(s);
} else {
HOVW115 = Byte.MIN_VALUE;
}
}

protected final void initHOVW116(String s) {
if (!s.trim().isEmpty()) {
HOVW116 = Byte.parseByte(s);
} else {
HOVW116 = Byte.MIN_VALUE;
}
}

protected final void initHOVW117(String s) {
if (!s.trim().isEmpty()) {
HOVW117 = Byte.parseByte(s);
} else {
HOVW117 = Byte.MIN_VALUE;
}
}

protected final void initHOVW118(String s) {
if (!s.trim().isEmpty()) {
HOVW118 = Byte.parseByte(s);
} else {
HOVW118 = Byte.MIN_VALUE;
}
}

protected final void initHOVW119(String s) {
if (!s.trim().isEmpty()) {
HOVW119 = Byte.parseByte(s);
} else {
HOVW119 = Byte.MIN_VALUE;
}
}

protected final void initHOVW12(String s) {
if (!s.trim().isEmpty()) {
HOVW12 = Byte.parseByte(s);
} else {
HOVW12 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1201(String s) {
if (!s.trim().isEmpty()) {
HOVW1201 = Byte.parseByte(s);
} else {
HOVW1201 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1202(String s) {
if (!s.trim().isEmpty()) {
HOVW1202 = Byte.parseByte(s);
} else {
HOVW1202 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1203(String s) {
if (!s.trim().isEmpty()) {
HOVW1203 = Byte.parseByte(s);
} else {
HOVW1203 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1204(String s) {
if (!s.trim().isEmpty()) {
HOVW1204 = Byte.parseByte(s);
} else {
HOVW1204 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1205(String s) {
if (!s.trim().isEmpty()) {
HOVW1205 = Byte.parseByte(s);
} else {
HOVW1205 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1206(String s) {
if (!s.trim().isEmpty()) {
HOVW1206 = Byte.parseByte(s);
} else {
HOVW1206 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1207(String s) {
if (!s.trim().isEmpty()) {
HOVW1207 = Byte.parseByte(s);
} else {
HOVW1207 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1208(String s) {
if (!s.trim().isEmpty()) {
HOVW1208 = Byte.parseByte(s);
} else {
HOVW1208 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1209(String s) {
if (!s.trim().isEmpty()) {
HOVW1209 = Byte.parseByte(s);
} else {
HOVW1209 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1210(String s) {
if (!s.trim().isEmpty()) {
HOVW1210 = Byte.parseByte(s);
} else {
HOVW1210 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1211(String s) {
if (!s.trim().isEmpty()) {
HOVW1211 = Byte.parseByte(s);
} else {
HOVW1211 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1212(String s) {
if (!s.trim().isEmpty()) {
HOVW1212 = Byte.parseByte(s);
} else {
HOVW1212 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1213(String s) {
if (!s.trim().isEmpty()) {
HOVW1213 = Byte.parseByte(s);
} else {
HOVW1213 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1214(String s) {
if (!s.trim().isEmpty()) {
HOVW1214 = Byte.parseByte(s);
} else {
HOVW1214 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1215(String s) {
if (!s.trim().isEmpty()) {
HOVW1215 = Byte.parseByte(s);
} else {
HOVW1215 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1216(String s) {
if (!s.trim().isEmpty()) {
HOVW1216 = Byte.parseByte(s);
} else {
HOVW1216 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1217(String s) {
if (!s.trim().isEmpty()) {
HOVW1217 = Byte.parseByte(s);
} else {
HOVW1217 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1218(String s) {
if (!s.trim().isEmpty()) {
HOVW1218 = Byte.parseByte(s);
} else {
HOVW1218 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1219(String s) {
if (!s.trim().isEmpty()) {
HOVW1219 = Byte.parseByte(s);
} else {
HOVW1219 = Byte.MIN_VALUE;
}
}

protected final void initHOVW13(String s) {
if (!s.trim().isEmpty()) {
HOVW13 = Byte.parseByte(s);
} else {
HOVW13 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1301(String s) {
if (!s.trim().isEmpty()) {
HOVW1301 = Byte.parseByte(s);
} else {
HOVW1301 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1302(String s) {
if (!s.trim().isEmpty()) {
HOVW1302 = Byte.parseByte(s);
} else {
HOVW1302 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1303(String s) {
if (!s.trim().isEmpty()) {
HOVW1303 = Byte.parseByte(s);
} else {
HOVW1303 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1304(String s) {
if (!s.trim().isEmpty()) {
HOVW1304 = Byte.parseByte(s);
} else {
HOVW1304 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1305(String s) {
if (!s.trim().isEmpty()) {
HOVW1305 = Byte.parseByte(s);
} else {
HOVW1305 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1306(String s) {
if (!s.trim().isEmpty()) {
HOVW1306 = Byte.parseByte(s);
} else {
HOVW1306 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1307(String s) {
if (!s.trim().isEmpty()) {
HOVW1307 = Byte.parseByte(s);
} else {
HOVW1307 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1308(String s) {
if (!s.trim().isEmpty()) {
HOVW1308 = Byte.parseByte(s);
} else {
HOVW1308 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1309(String s) {
if (!s.trim().isEmpty()) {
HOVW1309 = Byte.parseByte(s);
} else {
HOVW1309 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1310(String s) {
if (!s.trim().isEmpty()) {
HOVW1310 = Byte.parseByte(s);
} else {
HOVW1310 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1311(String s) {
if (!s.trim().isEmpty()) {
HOVW1311 = Byte.parseByte(s);
} else {
HOVW1311 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1312(String s) {
if (!s.trim().isEmpty()) {
HOVW1312 = Byte.parseByte(s);
} else {
HOVW1312 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1313(String s) {
if (!s.trim().isEmpty()) {
HOVW1313 = Byte.parseByte(s);
} else {
HOVW1313 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1314(String s) {
if (!s.trim().isEmpty()) {
HOVW1314 = Byte.parseByte(s);
} else {
HOVW1314 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1315(String s) {
if (!s.trim().isEmpty()) {
HOVW1315 = Byte.parseByte(s);
} else {
HOVW1315 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1316(String s) {
if (!s.trim().isEmpty()) {
HOVW1316 = Byte.parseByte(s);
} else {
HOVW1316 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1317(String s) {
if (!s.trim().isEmpty()) {
HOVW1317 = Byte.parseByte(s);
} else {
HOVW1317 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1318(String s) {
if (!s.trim().isEmpty()) {
HOVW1318 = Byte.parseByte(s);
} else {
HOVW1318 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1319(String s) {
if (!s.trim().isEmpty()) {
HOVW1319 = Byte.parseByte(s);
} else {
HOVW1319 = Byte.MIN_VALUE;
}
}

protected final void initHOVW14(String s) {
if (!s.trim().isEmpty()) {
HOVW14 = Byte.parseByte(s);
} else {
HOVW14 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1401(String s) {
if (!s.trim().isEmpty()) {
HOVW1401 = Byte.parseByte(s);
} else {
HOVW1401 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1402(String s) {
if (!s.trim().isEmpty()) {
HOVW1402 = Byte.parseByte(s);
} else {
HOVW1402 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1403(String s) {
if (!s.trim().isEmpty()) {
HOVW1403 = Byte.parseByte(s);
} else {
HOVW1403 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1404(String s) {
if (!s.trim().isEmpty()) {
HOVW1404 = Byte.parseByte(s);
} else {
HOVW1404 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1405(String s) {
if (!s.trim().isEmpty()) {
HOVW1405 = Byte.parseByte(s);
} else {
HOVW1405 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1406(String s) {
if (!s.trim().isEmpty()) {
HOVW1406 = Byte.parseByte(s);
} else {
HOVW1406 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1407(String s) {
if (!s.trim().isEmpty()) {
HOVW1407 = Byte.parseByte(s);
} else {
HOVW1407 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1408(String s) {
if (!s.trim().isEmpty()) {
HOVW1408 = Byte.parseByte(s);
} else {
HOVW1408 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1409(String s) {
if (!s.trim().isEmpty()) {
HOVW1409 = Byte.parseByte(s);
} else {
HOVW1409 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1410(String s) {
if (!s.trim().isEmpty()) {
HOVW1410 = Byte.parseByte(s);
} else {
HOVW1410 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1411(String s) {
if (!s.trim().isEmpty()) {
HOVW1411 = Byte.parseByte(s);
} else {
HOVW1411 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1412(String s) {
if (!s.trim().isEmpty()) {
HOVW1412 = Byte.parseByte(s);
} else {
HOVW1412 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1413(String s) {
if (!s.trim().isEmpty()) {
HOVW1413 = Byte.parseByte(s);
} else {
HOVW1413 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1414(String s) {
if (!s.trim().isEmpty()) {
HOVW1414 = Byte.parseByte(s);
} else {
HOVW1414 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1415(String s) {
if (!s.trim().isEmpty()) {
HOVW1415 = Byte.parseByte(s);
} else {
HOVW1415 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1416(String s) {
if (!s.trim().isEmpty()) {
HOVW1416 = Byte.parseByte(s);
} else {
HOVW1416 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1417(String s) {
if (!s.trim().isEmpty()) {
HOVW1417 = Byte.parseByte(s);
} else {
HOVW1417 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1418(String s) {
if (!s.trim().isEmpty()) {
HOVW1418 = Byte.parseByte(s);
} else {
HOVW1418 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1419(String s) {
if (!s.trim().isEmpty()) {
HOVW1419 = Byte.parseByte(s);
} else {
HOVW1419 = Byte.MIN_VALUE;
}
}

protected final void initHOVW15(String s) {
if (!s.trim().isEmpty()) {
HOVW15 = Byte.parseByte(s);
} else {
HOVW15 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1501(String s) {
if (!s.trim().isEmpty()) {
HOVW1501 = Byte.parseByte(s);
} else {
HOVW1501 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1502(String s) {
if (!s.trim().isEmpty()) {
HOVW1502 = Byte.parseByte(s);
} else {
HOVW1502 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1503(String s) {
if (!s.trim().isEmpty()) {
HOVW1503 = Byte.parseByte(s);
} else {
HOVW1503 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1504(String s) {
if (!s.trim().isEmpty()) {
HOVW1504 = Byte.parseByte(s);
} else {
HOVW1504 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1505(String s) {
if (!s.trim().isEmpty()) {
HOVW1505 = Byte.parseByte(s);
} else {
HOVW1505 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1506(String s) {
if (!s.trim().isEmpty()) {
HOVW1506 = Byte.parseByte(s);
} else {
HOVW1506 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1507(String s) {
if (!s.trim().isEmpty()) {
HOVW1507 = Byte.parseByte(s);
} else {
HOVW1507 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1508(String s) {
if (!s.trim().isEmpty()) {
HOVW1508 = Byte.parseByte(s);
} else {
HOVW1508 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1509(String s) {
if (!s.trim().isEmpty()) {
HOVW1509 = Byte.parseByte(s);
} else {
HOVW1509 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1510(String s) {
if (!s.trim().isEmpty()) {
HOVW1510 = Byte.parseByte(s);
} else {
HOVW1510 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1511(String s) {
if (!s.trim().isEmpty()) {
HOVW1511 = Byte.parseByte(s);
} else {
HOVW1511 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1512(String s) {
if (!s.trim().isEmpty()) {
HOVW1512 = Byte.parseByte(s);
} else {
HOVW1512 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1513(String s) {
if (!s.trim().isEmpty()) {
HOVW1513 = Byte.parseByte(s);
} else {
HOVW1513 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1514(String s) {
if (!s.trim().isEmpty()) {
HOVW1514 = Byte.parseByte(s);
} else {
HOVW1514 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1515(String s) {
if (!s.trim().isEmpty()) {
HOVW1515 = Byte.parseByte(s);
} else {
HOVW1515 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1516(String s) {
if (!s.trim().isEmpty()) {
HOVW1516 = Byte.parseByte(s);
} else {
HOVW1516 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1517(String s) {
if (!s.trim().isEmpty()) {
HOVW1517 = Byte.parseByte(s);
} else {
HOVW1517 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1518(String s) {
if (!s.trim().isEmpty()) {
HOVW1518 = Byte.parseByte(s);
} else {
HOVW1518 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1519(String s) {
if (!s.trim().isEmpty()) {
HOVW1519 = Byte.parseByte(s);
} else {
HOVW1519 = Byte.MIN_VALUE;
}
}

protected final void initHOVW16(String s) {
if (!s.trim().isEmpty()) {
HOVW16 = Byte.parseByte(s);
} else {
HOVW16 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1601(String s) {
if (!s.trim().isEmpty()) {
HOVW1601 = Byte.parseByte(s);
} else {
HOVW1601 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1602(String s) {
if (!s.trim().isEmpty()) {
HOVW1602 = Byte.parseByte(s);
} else {
HOVW1602 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1603(String s) {
if (!s.trim().isEmpty()) {
HOVW1603 = Byte.parseByte(s);
} else {
HOVW1603 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1604(String s) {
if (!s.trim().isEmpty()) {
HOVW1604 = Byte.parseByte(s);
} else {
HOVW1604 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1605(String s) {
if (!s.trim().isEmpty()) {
HOVW1605 = Byte.parseByte(s);
} else {
HOVW1605 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1606(String s) {
if (!s.trim().isEmpty()) {
HOVW1606 = Byte.parseByte(s);
} else {
HOVW1606 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1607(String s) {
if (!s.trim().isEmpty()) {
HOVW1607 = Byte.parseByte(s);
} else {
HOVW1607 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1608(String s) {
if (!s.trim().isEmpty()) {
HOVW1608 = Byte.parseByte(s);
} else {
HOVW1608 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1609(String s) {
if (!s.trim().isEmpty()) {
HOVW1609 = Byte.parseByte(s);
} else {
HOVW1609 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1610(String s) {
if (!s.trim().isEmpty()) {
HOVW1610 = Byte.parseByte(s);
} else {
HOVW1610 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1611(String s) {
if (!s.trim().isEmpty()) {
HOVW1611 = Byte.parseByte(s);
} else {
HOVW1611 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1612(String s) {
if (!s.trim().isEmpty()) {
HOVW1612 = Byte.parseByte(s);
} else {
HOVW1612 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1613(String s) {
if (!s.trim().isEmpty()) {
HOVW1613 = Byte.parseByte(s);
} else {
HOVW1613 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1614(String s) {
if (!s.trim().isEmpty()) {
HOVW1614 = Byte.parseByte(s);
} else {
HOVW1614 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1615(String s) {
if (!s.trim().isEmpty()) {
HOVW1615 = Byte.parseByte(s);
} else {
HOVW1615 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1616(String s) {
if (!s.trim().isEmpty()) {
HOVW1616 = Byte.parseByte(s);
} else {
HOVW1616 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1617(String s) {
if (!s.trim().isEmpty()) {
HOVW1617 = Byte.parseByte(s);
} else {
HOVW1617 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1618(String s) {
if (!s.trim().isEmpty()) {
HOVW1618 = Byte.parseByte(s);
} else {
HOVW1618 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1619(String s) {
if (!s.trim().isEmpty()) {
HOVW1619 = Byte.parseByte(s);
} else {
HOVW1619 = Byte.MIN_VALUE;
}
}

protected final void initHOVW2(String s) {
if (!s.trim().isEmpty()) {
HOVW2 = Byte.parseByte(s);
} else {
HOVW2 = Byte.MIN_VALUE;
}
}

protected final void initHOVW201(String s) {
if (!s.trim().isEmpty()) {
HOVW201 = Byte.parseByte(s);
} else {
HOVW201 = Byte.MIN_VALUE;
}
}

protected final void initHOVW202(String s) {
if (!s.trim().isEmpty()) {
HOVW202 = Byte.parseByte(s);
} else {
HOVW202 = Byte.MIN_VALUE;
}
}

protected final void initHOVW203(String s) {
if (!s.trim().isEmpty()) {
HOVW203 = Byte.parseByte(s);
} else {
HOVW203 = Byte.MIN_VALUE;
}
}

protected final void initHOVW204(String s) {
if (!s.trim().isEmpty()) {
HOVW204 = Byte.parseByte(s);
} else {
HOVW204 = Byte.MIN_VALUE;
}
}

protected final void initHOVW205(String s) {
if (!s.trim().isEmpty()) {
HOVW205 = Byte.parseByte(s);
} else {
HOVW205 = Byte.MIN_VALUE;
}
}

protected final void initHOVW206(String s) {
if (!s.trim().isEmpty()) {
HOVW206 = Byte.parseByte(s);
} else {
HOVW206 = Byte.MIN_VALUE;
}
}

protected final void initHOVW207(String s) {
if (!s.trim().isEmpty()) {
HOVW207 = Byte.parseByte(s);
} else {
HOVW207 = Byte.MIN_VALUE;
}
}

protected final void initHOVW208(String s) {
if (!s.trim().isEmpty()) {
HOVW208 = Byte.parseByte(s);
} else {
HOVW208 = Byte.MIN_VALUE;
}
}

protected final void initHOVW209(String s) {
if (!s.trim().isEmpty()) {
HOVW209 = Byte.parseByte(s);
} else {
HOVW209 = Byte.MIN_VALUE;
}
}

protected final void initHOVW210(String s) {
if (!s.trim().isEmpty()) {
HOVW210 = Byte.parseByte(s);
} else {
HOVW210 = Byte.MIN_VALUE;
}
}

protected final void initHOVW211(String s) {
if (!s.trim().isEmpty()) {
HOVW211 = Byte.parseByte(s);
} else {
HOVW211 = Byte.MIN_VALUE;
}
}

protected final void initHOVW212(String s) {
if (!s.trim().isEmpty()) {
HOVW212 = Byte.parseByte(s);
} else {
HOVW212 = Byte.MIN_VALUE;
}
}

protected final void initHOVW213(String s) {
if (!s.trim().isEmpty()) {
HOVW213 = Byte.parseByte(s);
} else {
HOVW213 = Byte.MIN_VALUE;
}
}

protected final void initHOVW214(String s) {
if (!s.trim().isEmpty()) {
HOVW214 = Byte.parseByte(s);
} else {
HOVW214 = Byte.MIN_VALUE;
}
}

protected final void initHOVW215(String s) {
if (!s.trim().isEmpty()) {
HOVW215 = Byte.parseByte(s);
} else {
HOVW215 = Byte.MIN_VALUE;
}
}

protected final void initHOVW216(String s) {
if (!s.trim().isEmpty()) {
HOVW216 = Byte.parseByte(s);
} else {
HOVW216 = Byte.MIN_VALUE;
}
}

protected final void initHOVW217(String s) {
if (!s.trim().isEmpty()) {
HOVW217 = Byte.parseByte(s);
} else {
HOVW217 = Byte.MIN_VALUE;
}
}

protected final void initHOVW218(String s) {
if (!s.trim().isEmpty()) {
HOVW218 = Byte.parseByte(s);
} else {
HOVW218 = Byte.MIN_VALUE;
}
}

protected final void initHOVW219(String s) {
if (!s.trim().isEmpty()) {
HOVW219 = Byte.parseByte(s);
} else {
HOVW219 = Byte.MIN_VALUE;
}
}

protected final void initHOVW301(String s) {
if (!s.trim().isEmpty()) {
HOVW301 = Byte.parseByte(s);
} else {
HOVW301 = Byte.MIN_VALUE;
}
}

protected final void initHOVW302(String s) {
if (!s.trim().isEmpty()) {
HOVW302 = Byte.parseByte(s);
} else {
HOVW302 = Byte.MIN_VALUE;
}
}

protected final void initHOVW303(String s) {
if (!s.trim().isEmpty()) {
HOVW303 = Byte.parseByte(s);
} else {
HOVW303 = Byte.MIN_VALUE;
}
}

protected final void initHOVW304(String s) {
if (!s.trim().isEmpty()) {
HOVW304 = Byte.parseByte(s);
} else {
HOVW304 = Byte.MIN_VALUE;
}
}

protected final void initHOVW305(String s) {
if (!s.trim().isEmpty()) {
HOVW305 = Byte.parseByte(s);
} else {
HOVW305 = Byte.MIN_VALUE;
}
}

protected final void initHOVW306(String s) {
if (!s.trim().isEmpty()) {
HOVW306 = Byte.parseByte(s);
} else {
HOVW306 = Byte.MIN_VALUE;
}
}

protected final void initHOVW307(String s) {
if (!s.trim().isEmpty()) {
HOVW307 = Byte.parseByte(s);
} else {
HOVW307 = Byte.MIN_VALUE;
}
}

protected final void initHOVW308(String s) {
if (!s.trim().isEmpty()) {
HOVW308 = Byte.parseByte(s);
} else {
HOVW308 = Byte.MIN_VALUE;
}
}

protected final void initHOVW309(String s) {
if (!s.trim().isEmpty()) {
HOVW309 = Byte.parseByte(s);
} else {
HOVW309 = Byte.MIN_VALUE;
}
}

protected final void initHOVW310(String s) {
if (!s.trim().isEmpty()) {
HOVW310 = Byte.parseByte(s);
} else {
HOVW310 = Byte.MIN_VALUE;
}
}

protected final void initHOVW311(String s) {
if (!s.trim().isEmpty()) {
HOVW311 = Byte.parseByte(s);
} else {
HOVW311 = Byte.MIN_VALUE;
}
}

protected final void initHOVW312(String s) {
if (!s.trim().isEmpty()) {
HOVW312 = Byte.parseByte(s);
} else {
HOVW312 = Byte.MIN_VALUE;
}
}

protected final void initHOVW313(String s) {
if (!s.trim().isEmpty()) {
HOVW313 = Byte.parseByte(s);
} else {
HOVW313 = Byte.MIN_VALUE;
}
}

protected final void initHOVW314(String s) {
if (!s.trim().isEmpty()) {
HOVW314 = Byte.parseByte(s);
} else {
HOVW314 = Byte.MIN_VALUE;
}
}

protected final void initHOVW315(String s) {
if (!s.trim().isEmpty()) {
HOVW315 = Byte.parseByte(s);
} else {
HOVW315 = Byte.MIN_VALUE;
}
}

protected final void initHOVW316(String s) {
if (!s.trim().isEmpty()) {
HOVW316 = Byte.parseByte(s);
} else {
HOVW316 = Byte.MIN_VALUE;
}
}

protected final void initHOVW317(String s) {
if (!s.trim().isEmpty()) {
HOVW317 = Byte.parseByte(s);
} else {
HOVW317 = Byte.MIN_VALUE;
}
}

protected final void initHOVW318(String s) {
if (!s.trim().isEmpty()) {
HOVW318 = Byte.parseByte(s);
} else {
HOVW318 = Byte.MIN_VALUE;
}
}

protected final void initHOVW319(String s) {
if (!s.trim().isEmpty()) {
HOVW319 = Byte.parseByte(s);
} else {
HOVW319 = Byte.MIN_VALUE;
}
}

protected final void initHOVW4(String s) {
if (!s.trim().isEmpty()) {
HOVW4 = Byte.parseByte(s);
} else {
HOVW4 = Byte.MIN_VALUE;
}
}

protected final void initHOVW401(String s) {
if (!s.trim().isEmpty()) {
HOVW401 = Byte.parseByte(s);
} else {
HOVW401 = Byte.MIN_VALUE;
}
}

protected final void initHOVW402(String s) {
if (!s.trim().isEmpty()) {
HOVW402 = Byte.parseByte(s);
} else {
HOVW402 = Byte.MIN_VALUE;
}
}

protected final void initHOVW403(String s) {
if (!s.trim().isEmpty()) {
HOVW403 = Byte.parseByte(s);
} else {
HOVW403 = Byte.MIN_VALUE;
}
}

protected final void initHOVW404(String s) {
if (!s.trim().isEmpty()) {
HOVW404 = Byte.parseByte(s);
} else {
HOVW404 = Byte.MIN_VALUE;
}
}

protected final void initHOVW405(String s) {
if (!s.trim().isEmpty()) {
HOVW405 = Byte.parseByte(s);
} else {
HOVW405 = Byte.MIN_VALUE;
}
}

protected final void initHOVW406(String s) {
if (!s.trim().isEmpty()) {
HOVW406 = Byte.parseByte(s);
} else {
HOVW406 = Byte.MIN_VALUE;
}
}

protected final void initHOVW407(String s) {
if (!s.trim().isEmpty()) {
HOVW407 = Byte.parseByte(s);
} else {
HOVW407 = Byte.MIN_VALUE;
}
}

protected final void initHOVW408(String s) {
if (!s.trim().isEmpty()) {
HOVW408 = Byte.parseByte(s);
} else {
HOVW408 = Byte.MIN_VALUE;
}
}

protected final void initHOVW409(String s) {
if (!s.trim().isEmpty()) {
HOVW409 = Byte.parseByte(s);
} else {
HOVW409 = Byte.MIN_VALUE;
}
}

protected final void initHOVW410(String s) {
if (!s.trim().isEmpty()) {
HOVW410 = Byte.parseByte(s);
} else {
HOVW410 = Byte.MIN_VALUE;
}
}

protected final void initHOVW411(String s) {
if (!s.trim().isEmpty()) {
HOVW411 = Byte.parseByte(s);
} else {
HOVW411 = Byte.MIN_VALUE;
}
}

protected final void initHOVW412(String s) {
if (!s.trim().isEmpty()) {
HOVW412 = Byte.parseByte(s);
} else {
HOVW412 = Byte.MIN_VALUE;
}
}

protected final void initHOVW413(String s) {
if (!s.trim().isEmpty()) {
HOVW413 = Byte.parseByte(s);
} else {
HOVW413 = Byte.MIN_VALUE;
}
}

protected final void initHOVW414(String s) {
if (!s.trim().isEmpty()) {
HOVW414 = Byte.parseByte(s);
} else {
HOVW414 = Byte.MIN_VALUE;
}
}

protected final void initHOVW415(String s) {
if (!s.trim().isEmpty()) {
HOVW415 = Byte.parseByte(s);
} else {
HOVW415 = Byte.MIN_VALUE;
}
}

protected final void initHOVW416(String s) {
if (!s.trim().isEmpty()) {
HOVW416 = Byte.parseByte(s);
} else {
HOVW416 = Byte.MIN_VALUE;
}
}

protected final void initHOVW417(String s) {
if (!s.trim().isEmpty()) {
HOVW417 = Byte.parseByte(s);
} else {
HOVW417 = Byte.MIN_VALUE;
}
}

protected final void initHOVW418(String s) {
if (!s.trim().isEmpty()) {
HOVW418 = Byte.parseByte(s);
} else {
HOVW418 = Byte.MIN_VALUE;
}
}

protected final void initHOVW419(String s) {
if (!s.trim().isEmpty()) {
HOVW419 = Byte.parseByte(s);
} else {
HOVW419 = Byte.MIN_VALUE;
}
}

protected final void initHOVW5(String s) {
if (!s.trim().isEmpty()) {
HOVW5 = Byte.parseByte(s);
} else {
HOVW5 = Byte.MIN_VALUE;
}
}

protected final void initHOVW501(String s) {
if (!s.trim().isEmpty()) {
HOVW501 = Byte.parseByte(s);
} else {
HOVW501 = Byte.MIN_VALUE;
}
}

protected final void initHOVW502(String s) {
if (!s.trim().isEmpty()) {
HOVW502 = Byte.parseByte(s);
} else {
HOVW502 = Byte.MIN_VALUE;
}
}

protected final void initHOVW503(String s) {
if (!s.trim().isEmpty()) {
HOVW503 = Byte.parseByte(s);
} else {
HOVW503 = Byte.MIN_VALUE;
}
}

protected final void initHOVW504(String s) {
if (!s.trim().isEmpty()) {
HOVW504 = Byte.parseByte(s);
} else {
HOVW504 = Byte.MIN_VALUE;
}
}

protected final void initHOVW505(String s) {
if (!s.trim().isEmpty()) {
HOVW505 = Byte.parseByte(s);
} else {
HOVW505 = Byte.MIN_VALUE;
}
}

protected final void initHOVW506(String s) {
if (!s.trim().isEmpty()) {
HOVW506 = Byte.parseByte(s);
} else {
HOVW506 = Byte.MIN_VALUE;
}
}

protected final void initHOVW507(String s) {
if (!s.trim().isEmpty()) {
HOVW507 = Byte.parseByte(s);
} else {
HOVW507 = Byte.MIN_VALUE;
}
}

protected final void initHOVW508(String s) {
if (!s.trim().isEmpty()) {
HOVW508 = Byte.parseByte(s);
} else {
HOVW508 = Byte.MIN_VALUE;
}
}

protected final void initHOVW509(String s) {
if (!s.trim().isEmpty()) {
HOVW509 = Byte.parseByte(s);
} else {
HOVW509 = Byte.MIN_VALUE;
}
}

protected final void initHOVW510(String s) {
if (!s.trim().isEmpty()) {
HOVW510 = Byte.parseByte(s);
} else {
HOVW510 = Byte.MIN_VALUE;
}
}

protected final void initHOVW511(String s) {
if (!s.trim().isEmpty()) {
HOVW511 = Byte.parseByte(s);
} else {
HOVW511 = Byte.MIN_VALUE;
}
}

protected final void initHOVW512(String s) {
if (!s.trim().isEmpty()) {
HOVW512 = Byte.parseByte(s);
} else {
HOVW512 = Byte.MIN_VALUE;
}
}

protected final void initHOVW513(String s) {
if (!s.trim().isEmpty()) {
HOVW513 = Byte.parseByte(s);
} else {
HOVW513 = Byte.MIN_VALUE;
}
}

protected final void initHOVW514(String s) {
if (!s.trim().isEmpty()) {
HOVW514 = Byte.parseByte(s);
} else {
HOVW514 = Byte.MIN_VALUE;
}
}

protected final void initHOVW515(String s) {
if (!s.trim().isEmpty()) {
HOVW515 = Byte.parseByte(s);
} else {
HOVW515 = Byte.MIN_VALUE;
}
}

protected final void initHOVW516(String s) {
if (!s.trim().isEmpty()) {
HOVW516 = Byte.parseByte(s);
} else {
HOVW516 = Byte.MIN_VALUE;
}
}

protected final void initHOVW517(String s) {
if (!s.trim().isEmpty()) {
HOVW517 = Byte.parseByte(s);
} else {
HOVW517 = Byte.MIN_VALUE;
}
}

protected final void initHOVW518(String s) {
if (!s.trim().isEmpty()) {
HOVW518 = Byte.parseByte(s);
} else {
HOVW518 = Byte.MIN_VALUE;
}
}

protected final void initHOVW519(String s) {
if (!s.trim().isEmpty()) {
HOVW519 = Byte.parseByte(s);
} else {
HOVW519 = Byte.MIN_VALUE;
}
}

protected final void initHOVW6(String s) {
if (!s.trim().isEmpty()) {
HOVW6 = Byte.parseByte(s);
} else {
HOVW6 = Byte.MIN_VALUE;
}
}

protected final void initHOVW601(String s) {
if (!s.trim().isEmpty()) {
HOVW601 = Byte.parseByte(s);
} else {
HOVW601 = Byte.MIN_VALUE;
}
}

protected final void initHOVW602(String s) {
if (!s.trim().isEmpty()) {
HOVW602 = Byte.parseByte(s);
} else {
HOVW602 = Byte.MIN_VALUE;
}
}

protected final void initHOVW603(String s) {
if (!s.trim().isEmpty()) {
HOVW603 = Byte.parseByte(s);
} else {
HOVW603 = Byte.MIN_VALUE;
}
}

protected final void initHOVW604(String s) {
if (!s.trim().isEmpty()) {
HOVW604 = Byte.parseByte(s);
} else {
HOVW604 = Byte.MIN_VALUE;
}
}

protected final void initHOVW605(String s) {
if (!s.trim().isEmpty()) {
HOVW605 = Byte.parseByte(s);
} else {
HOVW605 = Byte.MIN_VALUE;
}
}

protected final void initHOVW606(String s) {
if (!s.trim().isEmpty()) {
HOVW606 = Byte.parseByte(s);
} else {
HOVW606 = Byte.MIN_VALUE;
}
}

protected final void initHOVW607(String s) {
if (!s.trim().isEmpty()) {
HOVW607 = Byte.parseByte(s);
} else {
HOVW607 = Byte.MIN_VALUE;
}
}

protected final void initHOVW608(String s) {
if (!s.trim().isEmpty()) {
HOVW608 = Byte.parseByte(s);
} else {
HOVW608 = Byte.MIN_VALUE;
}
}

protected final void initHOVW609(String s) {
if (!s.trim().isEmpty()) {
HOVW609 = Byte.parseByte(s);
} else {
HOVW609 = Byte.MIN_VALUE;
}
}

protected final void initHOVW610(String s) {
if (!s.trim().isEmpty()) {
HOVW610 = Byte.parseByte(s);
} else {
HOVW610 = Byte.MIN_VALUE;
}
}

protected final void initHOVW611(String s) {
if (!s.trim().isEmpty()) {
HOVW611 = Byte.parseByte(s);
} else {
HOVW611 = Byte.MIN_VALUE;
}
}

protected final void initHOVW612(String s) {
if (!s.trim().isEmpty()) {
HOVW612 = Byte.parseByte(s);
} else {
HOVW612 = Byte.MIN_VALUE;
}
}

protected final void initHOVW613(String s) {
if (!s.trim().isEmpty()) {
HOVW613 = Byte.parseByte(s);
} else {
HOVW613 = Byte.MIN_VALUE;
}
}

protected final void initHOVW614(String s) {
if (!s.trim().isEmpty()) {
HOVW614 = Byte.parseByte(s);
} else {
HOVW614 = Byte.MIN_VALUE;
}
}

protected final void initHOVW615(String s) {
if (!s.trim().isEmpty()) {
HOVW615 = Byte.parseByte(s);
} else {
HOVW615 = Byte.MIN_VALUE;
}
}

protected final void initHOVW616(String s) {
if (!s.trim().isEmpty()) {
HOVW616 = Byte.parseByte(s);
} else {
HOVW616 = Byte.MIN_VALUE;
}
}

protected final void initHOVW617(String s) {
if (!s.trim().isEmpty()) {
HOVW617 = Byte.parseByte(s);
} else {
HOVW617 = Byte.MIN_VALUE;
}
}

protected final void initHOVW618(String s) {
if (!s.trim().isEmpty()) {
HOVW618 = Byte.parseByte(s);
} else {
HOVW618 = Byte.MIN_VALUE;
}
}

protected final void initHOVW619(String s) {
if (!s.trim().isEmpty()) {
HOVW619 = Byte.parseByte(s);
} else {
HOVW619 = Byte.MIN_VALUE;
}
}

protected final void initHOVW7(String s) {
if (!s.trim().isEmpty()) {
HOVW7 = Byte.parseByte(s);
} else {
HOVW7 = Byte.MIN_VALUE;
}
}

protected final void initHOVW701(String s) {
if (!s.trim().isEmpty()) {
HOVW701 = Byte.parseByte(s);
} else {
HOVW701 = Byte.MIN_VALUE;
}
}

protected final void initHOVW702(String s) {
if (!s.trim().isEmpty()) {
HOVW702 = Byte.parseByte(s);
} else {
HOVW702 = Byte.MIN_VALUE;
}
}

protected final void initHOVW703(String s) {
if (!s.trim().isEmpty()) {
HOVW703 = Byte.parseByte(s);
} else {
HOVW703 = Byte.MIN_VALUE;
}
}

protected final void initHOVW704(String s) {
if (!s.trim().isEmpty()) {
HOVW704 = Byte.parseByte(s);
} else {
HOVW704 = Byte.MIN_VALUE;
}
}

protected final void initHOVW705(String s) {
if (!s.trim().isEmpty()) {
HOVW705 = Byte.parseByte(s);
} else {
HOVW705 = Byte.MIN_VALUE;
}
}

protected final void initHOVW706(String s) {
if (!s.trim().isEmpty()) {
HOVW706 = Byte.parseByte(s);
} else {
HOVW706 = Byte.MIN_VALUE;
}
}

protected final void initHOVW707(String s) {
if (!s.trim().isEmpty()) {
HOVW707 = Byte.parseByte(s);
} else {
HOVW707 = Byte.MIN_VALUE;
}
}

protected final void initHOVW708(String s) {
if (!s.trim().isEmpty()) {
HOVW708 = Byte.parseByte(s);
} else {
HOVW708 = Byte.MIN_VALUE;
}
}

protected final void initHOVW709(String s) {
if (!s.trim().isEmpty()) {
HOVW709 = Byte.parseByte(s);
} else {
HOVW709 = Byte.MIN_VALUE;
}
}

protected final void initHOVW710(String s) {
if (!s.trim().isEmpty()) {
HOVW710 = Byte.parseByte(s);
} else {
HOVW710 = Byte.MIN_VALUE;
}
}

protected final void initHOVW711(String s) {
if (!s.trim().isEmpty()) {
HOVW711 = Byte.parseByte(s);
} else {
HOVW711 = Byte.MIN_VALUE;
}
}

protected final void initHOVW712(String s) {
if (!s.trim().isEmpty()) {
HOVW712 = Byte.parseByte(s);
} else {
HOVW712 = Byte.MIN_VALUE;
}
}

protected final void initHOVW713(String s) {
if (!s.trim().isEmpty()) {
HOVW713 = Byte.parseByte(s);
} else {
HOVW713 = Byte.MIN_VALUE;
}
}

protected final void initHOVW714(String s) {
if (!s.trim().isEmpty()) {
HOVW714 = Byte.parseByte(s);
} else {
HOVW714 = Byte.MIN_VALUE;
}
}

protected final void initHOVW715(String s) {
if (!s.trim().isEmpty()) {
HOVW715 = Byte.parseByte(s);
} else {
HOVW715 = Byte.MIN_VALUE;
}
}

protected final void initHOVW716(String s) {
if (!s.trim().isEmpty()) {
HOVW716 = Byte.parseByte(s);
} else {
HOVW716 = Byte.MIN_VALUE;
}
}

protected final void initHOVW717(String s) {
if (!s.trim().isEmpty()) {
HOVW717 = Byte.parseByte(s);
} else {
HOVW717 = Byte.MIN_VALUE;
}
}

protected final void initHOVW718(String s) {
if (!s.trim().isEmpty()) {
HOVW718 = Byte.parseByte(s);
} else {
HOVW718 = Byte.MIN_VALUE;
}
}

protected final void initHOVW719(String s) {
if (!s.trim().isEmpty()) {
HOVW719 = Byte.parseByte(s);
} else {
HOVW719 = Byte.MIN_VALUE;
}
}

protected final void initHOVW8(String s) {
if (!s.trim().isEmpty()) {
HOVW8 = Byte.parseByte(s);
} else {
HOVW8 = Byte.MIN_VALUE;
}
}

protected final void initHOVW801(String s) {
if (!s.trim().isEmpty()) {
HOVW801 = Byte.parseByte(s);
} else {
HOVW801 = Byte.MIN_VALUE;
}
}

protected final void initHOVW802(String s) {
if (!s.trim().isEmpty()) {
HOVW802 = Byte.parseByte(s);
} else {
HOVW802 = Byte.MIN_VALUE;
}
}

protected final void initHOVW803(String s) {
if (!s.trim().isEmpty()) {
HOVW803 = Byte.parseByte(s);
} else {
HOVW803 = Byte.MIN_VALUE;
}
}

protected final void initHOVW804(String s) {
if (!s.trim().isEmpty()) {
HOVW804 = Byte.parseByte(s);
} else {
HOVW804 = Byte.MIN_VALUE;
}
}

protected final void initHOVW805(String s) {
if (!s.trim().isEmpty()) {
HOVW805 = Byte.parseByte(s);
} else {
HOVW805 = Byte.MIN_VALUE;
}
}

protected final void initHOVW806(String s) {
if (!s.trim().isEmpty()) {
HOVW806 = Byte.parseByte(s);
} else {
HOVW806 = Byte.MIN_VALUE;
}
}

protected final void initHOVW807(String s) {
if (!s.trim().isEmpty()) {
HOVW807 = Byte.parseByte(s);
} else {
HOVW807 = Byte.MIN_VALUE;
}
}

protected final void initHOVW808(String s) {
if (!s.trim().isEmpty()) {
HOVW808 = Byte.parseByte(s);
} else {
HOVW808 = Byte.MIN_VALUE;
}
}

protected final void initHOVW809(String s) {
if (!s.trim().isEmpty()) {
HOVW809 = Byte.parseByte(s);
} else {
HOVW809 = Byte.MIN_VALUE;
}
}

protected final void initHOVW810(String s) {
if (!s.trim().isEmpty()) {
HOVW810 = Byte.parseByte(s);
} else {
HOVW810 = Byte.MIN_VALUE;
}
}

protected final void initHOVW811(String s) {
if (!s.trim().isEmpty()) {
HOVW811 = Byte.parseByte(s);
} else {
HOVW811 = Byte.MIN_VALUE;
}
}

protected final void initHOVW812(String s) {
if (!s.trim().isEmpty()) {
HOVW812 = Byte.parseByte(s);
} else {
HOVW812 = Byte.MIN_VALUE;
}
}

protected final void initHOVW813(String s) {
if (!s.trim().isEmpty()) {
HOVW813 = Byte.parseByte(s);
} else {
HOVW813 = Byte.MIN_VALUE;
}
}

protected final void initHOVW814(String s) {
if (!s.trim().isEmpty()) {
HOVW814 = Byte.parseByte(s);
} else {
HOVW814 = Byte.MIN_VALUE;
}
}

protected final void initHOVW815(String s) {
if (!s.trim().isEmpty()) {
HOVW815 = Byte.parseByte(s);
} else {
HOVW815 = Byte.MIN_VALUE;
}
}

protected final void initHOVW816(String s) {
if (!s.trim().isEmpty()) {
HOVW816 = Byte.parseByte(s);
} else {
HOVW816 = Byte.MIN_VALUE;
}
}

protected final void initHOVW817(String s) {
if (!s.trim().isEmpty()) {
HOVW817 = Byte.parseByte(s);
} else {
HOVW817 = Byte.MIN_VALUE;
}
}

protected final void initHOVW818(String s) {
if (!s.trim().isEmpty()) {
HOVW818 = Byte.parseByte(s);
} else {
HOVW818 = Byte.MIN_VALUE;
}
}

protected final void initHOVW819(String s) {
if (!s.trim().isEmpty()) {
HOVW819 = Byte.parseByte(s);
} else {
HOVW819 = Byte.MIN_VALUE;
}
}

protected final void initHOVW901(String s) {
if (!s.trim().isEmpty()) {
HOVW901 = Byte.parseByte(s);
} else {
HOVW901 = Byte.MIN_VALUE;
}
}

protected final void initHOVW902(String s) {
if (!s.trim().isEmpty()) {
HOVW902 = Byte.parseByte(s);
} else {
HOVW902 = Byte.MIN_VALUE;
}
}

protected final void initHOVW903(String s) {
if (!s.trim().isEmpty()) {
HOVW903 = Byte.parseByte(s);
} else {
HOVW903 = Byte.MIN_VALUE;
}
}

protected final void initHOVW904(String s) {
if (!s.trim().isEmpty()) {
HOVW904 = Byte.parseByte(s);
} else {
HOVW904 = Byte.MIN_VALUE;
}
}

protected final void initHOVW905(String s) {
if (!s.trim().isEmpty()) {
HOVW905 = Byte.parseByte(s);
} else {
HOVW905 = Byte.MIN_VALUE;
}
}

protected final void initHOVW906(String s) {
if (!s.trim().isEmpty()) {
HOVW906 = Byte.parseByte(s);
} else {
HOVW906 = Byte.MIN_VALUE;
}
}

protected final void initHOVW907(String s) {
if (!s.trim().isEmpty()) {
HOVW907 = Byte.parseByte(s);
} else {
HOVW907 = Byte.MIN_VALUE;
}
}

protected final void initHOVW908(String s) {
if (!s.trim().isEmpty()) {
HOVW908 = Byte.parseByte(s);
} else {
HOVW908 = Byte.MIN_VALUE;
}
}

protected final void initHOVW909(String s) {
if (!s.trim().isEmpty()) {
HOVW909 = Byte.parseByte(s);
} else {
HOVW909 = Byte.MIN_VALUE;
}
}

protected final void initHOVW910(String s) {
if (!s.trim().isEmpty()) {
HOVW910 = Byte.parseByte(s);
} else {
HOVW910 = Byte.MIN_VALUE;
}
}

protected final void initHOVW911(String s) {
if (!s.trim().isEmpty()) {
HOVW911 = Byte.parseByte(s);
} else {
HOVW911 = Byte.MIN_VALUE;
}
}

protected final void initHOVW912(String s) {
if (!s.trim().isEmpty()) {
HOVW912 = Byte.parseByte(s);
} else {
HOVW912 = Byte.MIN_VALUE;
}
}

protected final void initHOVW913(String s) {
if (!s.trim().isEmpty()) {
HOVW913 = Byte.parseByte(s);
} else {
HOVW913 = Byte.MIN_VALUE;
}
}

protected final void initHOVW914(String s) {
if (!s.trim().isEmpty()) {
HOVW914 = Byte.parseByte(s);
} else {
HOVW914 = Byte.MIN_VALUE;
}
}

protected final void initHOVW915(String s) {
if (!s.trim().isEmpty()) {
HOVW915 = Byte.parseByte(s);
} else {
HOVW915 = Byte.MIN_VALUE;
}
}

protected final void initHOVW916(String s) {
if (!s.trim().isEmpty()) {
HOVW916 = Byte.parseByte(s);
} else {
HOVW916 = Byte.MIN_VALUE;
}
}

protected final void initHOVW917(String s) {
if (!s.trim().isEmpty()) {
HOVW917 = Byte.parseByte(s);
} else {
HOVW917 = Byte.MIN_VALUE;
}
}

protected final void initHOVW918(String s) {
if (!s.trim().isEmpty()) {
HOVW918 = Byte.parseByte(s);
} else {
HOVW918 = Byte.MIN_VALUE;
}
}

protected final void initHOVW919(String s) {
if (!s.trim().isEmpty()) {
HOVW919 = Byte.parseByte(s);
} else {
HOVW919 = Byte.MIN_VALUE;
}
}

protected final void initHOVYR(String s) {
if (!s.trim().isEmpty()) {
HOVYR = Short.parseShort(s);
} else {
HOVYR = Short.MIN_VALUE;
}
}

protected final void initHOVYR10(String s) {
if (!s.trim().isEmpty()) {
HOVYR10 = Short.parseShort(s);
} else {
HOVYR10 = Short.MIN_VALUE;
}
}

protected final void initHOVYR11(String s) {
if (!s.trim().isEmpty()) {
HOVYR11 = Short.parseShort(s);
} else {
HOVYR11 = Short.MIN_VALUE;
}
}

protected final void initHOVYR12(String s) {
if (!s.trim().isEmpty()) {
HOVYR12 = Short.parseShort(s);
} else {
HOVYR12 = Short.MIN_VALUE;
}
}

protected final void initHOVYR13(String s) {
if (!s.trim().isEmpty()) {
HOVYR13 = Short.parseShort(s);
} else {
HOVYR13 = Short.MIN_VALUE;
}
}

protected final void initHOVYR14(String s) {
if (!s.trim().isEmpty()) {
HOVYR14 = Short.parseShort(s);
} else {
HOVYR14 = Short.MIN_VALUE;
}
}

protected final void initHOVYR15(String s) {
if (!s.trim().isEmpty()) {
HOVYR15 = Short.parseShort(s);
} else {
HOVYR15 = Short.MIN_VALUE;
}
}

protected final void initHOVYR16(String s) {
if (!s.trim().isEmpty()) {
HOVYR16 = Short.parseShort(s);
} else {
HOVYR16 = Short.MIN_VALUE;
}
}

protected final void initHOVYR2(String s) {
if (!s.trim().isEmpty()) {
HOVYR2 = Short.parseShort(s);
} else {
HOVYR2 = Short.MIN_VALUE;
}
}

protected final void initHOVYR3(String s) {
if (!s.trim().isEmpty()) {
HOVYR3 = Short.parseShort(s);
} else {
HOVYR3 = Short.MIN_VALUE;
}
}

protected final void initHOVYR4(String s) {
if (!s.trim().isEmpty()) {
HOVYR4 = Short.parseShort(s);
} else {
HOVYR4 = Short.MIN_VALUE;
}
}

protected final void initHOVYR5(String s) {
if (!s.trim().isEmpty()) {
HOVYR5 = Short.parseShort(s);
} else {
HOVYR5 = Short.MIN_VALUE;
}
}

protected final void initHOVYR6(String s) {
if (!s.trim().isEmpty()) {
HOVYR6 = Short.parseShort(s);
} else {
HOVYR6 = Short.MIN_VALUE;
}
}

protected final void initHOVYR7(String s) {
if (!s.trim().isEmpty()) {
HOVYR7 = Short.parseShort(s);
} else {
HOVYR7 = Short.MIN_VALUE;
}
}

protected final void initHOVYR8(String s) {
if (!s.trim().isEmpty()) {
HOVYR8 = Short.parseShort(s);
} else {
HOVYR8 = Short.MIN_VALUE;
}
}

protected final void initHOVYR9(String s) {
if (!s.trim().isEmpty()) {
HOVYR9 = Short.parseShort(s);
} else {
HOVYR9 = Short.MIN_VALUE;
}
}

protected final void initHOWH1(String s) {
if (!s.trim().isEmpty()) {
HOWH1 = Byte.parseByte(s);
} else {
HOWH1 = Byte.MIN_VALUE;
}
}

protected final void initHOWH10(String s) {
if (!s.trim().isEmpty()) {
HOWH10 = Byte.parseByte(s);
} else {
HOWH10 = Byte.MIN_VALUE;
}
}

protected final void initHOWH11(String s) {
if (!s.trim().isEmpty()) {
HOWH11 = Byte.parseByte(s);
} else {
HOWH11 = Byte.MIN_VALUE;
}
}

protected final void initHOWH12(String s) {
if (!s.trim().isEmpty()) {
HOWH12 = Byte.parseByte(s);
} else {
HOWH12 = Byte.MIN_VALUE;
}
}

protected final void initHOWH2(String s) {
if (!s.trim().isEmpty()) {
HOWH2 = Byte.parseByte(s);
} else {
HOWH2 = Byte.MIN_VALUE;
}
}

protected final void initHOWH3(String s) {
if (!s.trim().isEmpty()) {
HOWH3 = Byte.parseByte(s);
} else {
HOWH3 = Byte.MIN_VALUE;
}
}

protected final void initHOWH4(String s) {
if (!s.trim().isEmpty()) {
HOWH4 = Byte.parseByte(s);
} else {
HOWH4 = Byte.MIN_VALUE;
}
}

protected final void initHOWH5(String s) {
if (!s.trim().isEmpty()) {
HOWH5 = Byte.parseByte(s);
} else {
HOWH5 = Byte.MIN_VALUE;
}
}

protected final void initHOWH6(String s) {
if (!s.trim().isEmpty()) {
HOWH6 = Byte.parseByte(s);
} else {
HOWH6 = Byte.MIN_VALUE;
}
}

protected final void initHOWH7(String s) {
if (!s.trim().isEmpty()) {
HOWH7 = Byte.parseByte(s);
} else {
HOWH7 = Byte.MIN_VALUE;
}
}

protected final void initHOWH8(String s) {
if (!s.trim().isEmpty()) {
HOWH8 = Byte.parseByte(s);
} else {
HOWH8 = Byte.MIN_VALUE;
}
}

protected final void initHOWH9(String s) {
if (!s.trim().isEmpty()) {
HOWH9 = Byte.parseByte(s);
} else {
HOWH9 = Byte.MIN_VALUE;
}
}

protected final void initHOWH97(String s) {
if (!s.trim().isEmpty()) {
HOWH97 = Byte.parseByte(s);
} else {
HOWH97 = Byte.MIN_VALUE;
}
}

protected final void initHOYML(String s) {
if (!s.trim().isEmpty()) {
HOYML = Byte.parseByte(s);
} else {
HOYML = Byte.MIN_VALUE;
}
}

protected final void initHSEYR(String s) {
if (!s.trim().isEmpty()) {
HSEYR = Short.parseShort(s);
} else {
HSEYR = Short.MIN_VALUE;
}
}

protected final void initIAA39(String s) {
if (!s.trim().isEmpty()) {
IAA39 = Short.parseShort(s);
} else {
IAA39 = Short.MIN_VALUE;
}
}

protected final void initIAA39FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FE = false;
} else {
IAA39FE = true;
}
}
}

protected final void initIAA39FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FL = false;
} else {
IAA39FL = true;
}
}
}

protected final void initIAA39FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FR = false;
} else {
IAA39FR = true;
}
}
}

protected final void initIAA39FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FU = false;
} else {
IAA39FU = true;
}
}
}

protected final void initIAA39ME(String s) {
if (!s.trim().isEmpty()) {
IAA39ME = Byte.parseByte(s);
} else {
IAA39ME = Byte.MIN_VALUE;
}
}

protected final void initIAA39ML(String s) {
if (!s.trim().isEmpty()) {
IAA39ML = Short.parseShort(s);
} else {
IAA39ML = Short.MIN_VALUE;
}
}

protected final void initIAA39MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39MR = false;
} else {
IAA39MR = true;
}
}
}

protected final void initIAA39MU(String s) {
if (!s.trim().isEmpty()) {
IAA39MU = Short.parseShort(s);
} else {
IAA39MU = Short.MIN_VALUE;
}
}

protected final void initIAA39OE(String s) {
if (!s.trim().isEmpty()) {
IAA39OE = Byte.parseByte(s);
} else {
IAA39OE = Byte.MIN_VALUE;
}
}

protected final void initIAA39OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA39OL = false;
} else {
IAA39OL = true;
}
}
}

protected final void initIAA39OR(String s) {
if (!s.trim().isEmpty()) {
IAA39OR = Byte.parseByte(s);
} else {
IAA39OR = Byte.MIN_VALUE;
}
}

protected final void initIAA39OU(String s) {
if (!s.trim().isEmpty()) {
IAA39OU = Short.parseShort(s);
} else {
IAA39OU = Short.MIN_VALUE;
}
}

protected final void initIAA39WE(String s) {
if (!s.trim().isEmpty()) {
IAA39WE = Byte.parseByte(s);
} else {
IAA39WE = Byte.MIN_VALUE;
}
}

protected final void initIAA39WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WL = false;
} else {
IAA39WL = true;
}
}
}

protected final void initIAA39WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WR = false;
} else {
IAA39WR = true;
}
}
}

protected final void initIAA39WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WU = false;
} else {
IAA39WU = true;
}
}
}

protected final void initIAA39YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YE = false;
} else {
IAA39YE = true;
}
}
}

protected final void initIAA39YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YL = false;
} else {
IAA39YL = true;
}
}
}

protected final void initIAA39YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YR = false;
} else {
IAA39YR = true;
}
}
}

protected final void initIAA39YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YU = false;
} else {
IAA39YU = true;
}
}
}

protected final void initIAA40(String s) {
if (!s.trim().isEmpty()) {
IAA40 = Short.parseShort(s);
} else {
IAA40 = Short.MIN_VALUE;
}
}

protected final void initIAA40FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FE = false;
} else {
IAA40FE = true;
}
}
}

protected final void initIAA40FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FL = false;
} else {
IAA40FL = true;
}
}
}

protected final void initIAA40FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FR = false;
} else {
IAA40FR = true;
}
}
}

protected final void initIAA40FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FU = false;
} else {
IAA40FU = true;
}
}
}

protected final void initIAA40ME(String s) {
if (!s.trim().isEmpty()) {
IAA40ME = Byte.parseByte(s);
} else {
IAA40ME = Byte.MIN_VALUE;
}
}

protected final void initIAA40ML(String s) {
if (!s.trim().isEmpty()) {
IAA40ML = Short.parseShort(s);
} else {
IAA40ML = Short.MIN_VALUE;
}
}

protected final void initIAA40MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40MR = false;
} else {
IAA40MR = true;
}
}
}

protected final void initIAA40MU(String s) {
if (!s.trim().isEmpty()) {
IAA40MU = Short.parseShort(s);
} else {
IAA40MU = Short.MIN_VALUE;
}
}

protected final void initIAA40OE(String s) {
if (!s.trim().isEmpty()) {
IAA40OE = Byte.parseByte(s);
} else {
IAA40OE = Byte.MIN_VALUE;
}
}

protected final void initIAA40OL(String s) {
if (!s.trim().isEmpty()) {
IAA40OL = Short.parseShort(s);
} else {
IAA40OL = Short.MIN_VALUE;
}
}

protected final void initIAA40OR(String s) {
if (!s.trim().isEmpty()) {
IAA40OR = Byte.parseByte(s);
} else {
IAA40OR = Byte.MIN_VALUE;
}
}

protected final void initIAA40OU(String s) {
if (!s.trim().isEmpty()) {
IAA40OU = Short.parseShort(s);
} else {
IAA40OU = Short.MIN_VALUE;
}
}

protected final void initIAA40WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WE = false;
} else {
IAA40WE = true;
}
}
}

protected final void initIAA40WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WL = false;
} else {
IAA40WL = true;
}
}
}

protected final void initIAA40WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WR = false;
} else {
IAA40WR = true;
}
}
}

protected final void initIAA40WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WU = false;
} else {
IAA40WU = true;
}
}
}

protected final void initIAA40YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YE = false;
} else {
IAA40YE = true;
}
}
}

protected final void initIAA40YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YL = false;
} else {
IAA40YL = true;
}
}
}

protected final void initIAA40YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YR = false;
} else {
IAA40YR = true;
}
}
}

protected final void initIAA40YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YU = false;
} else {
IAA40YU = true;
}
}
}

protected final void initIAA41(String s) {
if (!s.trim().isEmpty()) {
IAA41 = Short.parseShort(s);
} else {
IAA41 = Short.MIN_VALUE;
}
}

protected final void initIAA41FE(String s) {
if (!s.trim().isEmpty()) {
IAA41FE = Byte.parseByte(s);
} else {
IAA41FE = Byte.MIN_VALUE;
}
}

protected final void initIAA41FL(String s) {
if (!s.trim().isEmpty()) {
IAA41FL = Short.parseShort(s);
} else {
IAA41FL = Short.MIN_VALUE;
}
}

protected final void initIAA41FR(String s) {
if (!s.trim().isEmpty()) {
IAA41FR = Byte.parseByte(s);
} else {
IAA41FR = Byte.MIN_VALUE;
}
}

protected final void initIAA41FU(String s) {
if (!s.trim().isEmpty()) {
IAA41FU = Short.parseShort(s);
} else {
IAA41FU = Short.MIN_VALUE;
}
}

protected final void initIAA41ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41ME = false;
} else {
IAA41ME = true;
}
}
}

protected final void initIAA41ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41ML = false;
} else {
IAA41ML = true;
}
}
}

protected final void initIAA41MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41MR = false;
} else {
IAA41MR = true;
}
}
}

protected final void initIAA41MU(String s) {
if (!s.trim().isEmpty()) {
IAA41MU = Short.parseShort(s);
} else {
IAA41MU = Short.MIN_VALUE;
}
}

protected final void initIAA41OE(String s) {
if (!s.trim().isEmpty()) {
IAA41OE = Byte.parseByte(s);
} else {
IAA41OE = Byte.MIN_VALUE;
}
}

protected final void initIAA41OL(String s) {
if (!s.trim().isEmpty()) {
IAA41OL = Short.parseShort(s);
} else {
IAA41OL = Short.MIN_VALUE;
}
}

protected final void initIAA41OR(String s) {
if (!s.trim().isEmpty()) {
IAA41OR = Byte.parseByte(s);
} else {
IAA41OR = Byte.MIN_VALUE;
}
}

protected final void initIAA41OU(String s) {
if (!s.trim().isEmpty()) {
IAA41OU = Short.parseShort(s);
} else {
IAA41OU = Short.MIN_VALUE;
}
}

protected final void initIAA41WE(String s) {
if (!s.trim().isEmpty()) {
IAA41WE = Byte.parseByte(s);
} else {
IAA41WE = Byte.MIN_VALUE;
}
}

protected final void initIAA41WL(String s) {
if (!s.trim().isEmpty()) {
IAA41WL = Byte.parseByte(s);
} else {
IAA41WL = Byte.MIN_VALUE;
}
}

protected final void initIAA41WR(String s) {
if (!s.trim().isEmpty()) {
IAA41WR = Byte.parseByte(s);
} else {
IAA41WR = Byte.MIN_VALUE;
}
}

protected final void initIAA41WU(String s) {
if (!s.trim().isEmpty()) {
IAA41WU = Byte.parseByte(s);
} else {
IAA41WU = Byte.MIN_VALUE;
}
}

protected final void initIAA41YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YE = false;
} else {
IAA41YE = true;
}
}
}

protected final void initIAA41YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YL = false;
} else {
IAA41YL = true;
}
}
}

protected final void initIAA41YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YR = false;
} else {
IAA41YR = true;
}
}
}

protected final void initIAA41YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YU = false;
} else {
IAA41YU = true;
}
}
}

protected final void initIAA42(String s) {
if (!s.trim().isEmpty()) {
IAA42 = Short.parseShort(s);
} else {
IAA42 = Short.MIN_VALUE;
}
}

protected final void initIAA42FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FE = false;
} else {
IAA42FE = true;
}
}
}

protected final void initIAA42FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FL = false;
} else {
IAA42FL = true;
}
}
}

protected final void initIAA42FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FR = false;
} else {
IAA42FR = true;
}
}
}

protected final void initIAA42FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FU = false;
} else {
IAA42FU = true;
}
}
}

protected final void initIAA42ME(String s) {
if (!s.trim().isEmpty()) {
IAA42ME = Byte.parseByte(s);
} else {
IAA42ME = Byte.MIN_VALUE;
}
}

protected final void initIAA42ML(String s) {
if (!s.trim().isEmpty()) {
IAA42ML = Short.parseShort(s);
} else {
IAA42ML = Short.MIN_VALUE;
}
}

protected final void initIAA42MR(String s) {
if (!s.trim().isEmpty()) {
IAA42MR = Byte.parseByte(s);
} else {
IAA42MR = Byte.MIN_VALUE;
}
}

protected final void initIAA42MU(String s) {
if (!s.trim().isEmpty()) {
IAA42MU = Short.parseShort(s);
} else {
IAA42MU = Short.MIN_VALUE;
}
}

protected final void initIAA42OE(String s) {
if (!s.trim().isEmpty()) {
IAA42OE = Byte.parseByte(s);
} else {
IAA42OE = Byte.MIN_VALUE;
}
}

protected final void initIAA42OL(String s) {
if (!s.trim().isEmpty()) {
IAA42OL = Short.parseShort(s);
} else {
IAA42OL = Short.MIN_VALUE;
}
}

protected final void initIAA42OR(String s) {
if (!s.trim().isEmpty()) {
IAA42OR = Byte.parseByte(s);
} else {
IAA42OR = Byte.MIN_VALUE;
}
}

protected final void initIAA42OU(String s) {
if (!s.trim().isEmpty()) {
IAA42OU = Short.parseShort(s);
} else {
IAA42OU = Short.MIN_VALUE;
}
}

protected final void initIAA42WE(String s) {
if (!s.trim().isEmpty()) {
IAA42WE = Byte.parseByte(s);
} else {
IAA42WE = Byte.MIN_VALUE;
}
}

protected final void initIAA42WL(String s) {
if (!s.trim().isEmpty()) {
IAA42WL = Short.parseShort(s);
} else {
IAA42WL = Short.MIN_VALUE;
}
}

protected final void initIAA42WR(String s) {
if (!s.trim().isEmpty()) {
IAA42WR = Byte.parseByte(s);
} else {
IAA42WR = Byte.MIN_VALUE;
}
}

protected final void initIAA42WU(String s) {
if (!s.trim().isEmpty()) {
IAA42WU = Short.parseShort(s);
} else {
IAA42WU = Short.MIN_VALUE;
}
}

protected final void initIAA42YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42YE = false;
} else {
IAA42YE = true;
}
}
}

protected final void initIAA42YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42YL = false;
} else {
IAA42YL = true;
}
}
}

protected final void initIAA42YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42YR = false;
} else {
IAA42YR = true;
}
}
}

protected final void initIAA42YU(String s) {
if (!s.trim().isEmpty()) {
IAA42YU = Short.parseShort(s);
} else {
IAA42YU = Short.MIN_VALUE;
}
}

protected final void initIAA43(String s) {
if (!s.trim().isEmpty()) {
IAA43 = Short.parseShort(s);
} else {
IAA43 = Short.MIN_VALUE;
}
}

protected final void initIAA43FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FE = false;
} else {
IAA43FE = true;
}
}
}

protected final void initIAA43FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FL = false;
} else {
IAA43FL = true;
}
}
}

protected final void initIAA43FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FR = false;
} else {
IAA43FR = true;
}
}
}

protected final void initIAA43FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FU = false;
} else {
IAA43FU = true;
}
}
}

protected final void initIAA43ME(String s) {
if (!s.trim().isEmpty()) {
IAA43ME = Byte.parseByte(s);
} else {
IAA43ME = Byte.MIN_VALUE;
}
}

protected final void initIAA43ML(String s) {
if (!s.trim().isEmpty()) {
IAA43ML = Short.parseShort(s);
} else {
IAA43ML = Short.MIN_VALUE;
}
}

protected final void initIAA43MR(String s) {
if (!s.trim().isEmpty()) {
IAA43MR = Byte.parseByte(s);
} else {
IAA43MR = Byte.MIN_VALUE;
}
}

protected final void initIAA43MU(String s) {
if (!s.trim().isEmpty()) {
IAA43MU = Short.parseShort(s);
} else {
IAA43MU = Short.MIN_VALUE;
}
}

protected final void initIAA43OE(String s) {
if (!s.trim().isEmpty()) {
IAA43OE = Byte.parseByte(s);
} else {
IAA43OE = Byte.MIN_VALUE;
}
}

protected final void initIAA43OL(String s) {
if (!s.trim().isEmpty()) {
IAA43OL = Byte.parseByte(s);
} else {
IAA43OL = Byte.MIN_VALUE;
}
}

protected final void initIAA43OR(String s) {
if (!s.trim().isEmpty()) {
IAA43OR = Byte.parseByte(s);
} else {
IAA43OR = Byte.MIN_VALUE;
}
}

protected final void initIAA43OU(String s) {
if (!s.trim().isEmpty()) {
IAA43OU = Short.parseShort(s);
} else {
IAA43OU = Short.MIN_VALUE;
}
}

protected final void initIAA43WE(String s) {
if (!s.trim().isEmpty()) {
IAA43WE = Byte.parseByte(s);
} else {
IAA43WE = Byte.MIN_VALUE;
}
}

protected final void initIAA43WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43WL = false;
} else {
IAA43WL = true;
}
}
}

protected final void initIAA43WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43WR = false;
} else {
IAA43WR = true;
}
}
}

protected final void initIAA43WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43WU = false;
} else {
IAA43WU = true;
}
}
}

protected final void initIAA43YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YE = false;
} else {
IAA43YE = true;
}
}
}

protected final void initIAA43YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YL = false;
} else {
IAA43YL = true;
}
}
}

protected final void initIAA43YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YR = false;
} else {
IAA43YR = true;
}
}
}

protected final void initIAA43YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YU = false;
} else {
IAA43YU = true;
}
}
}

protected final void initIAA44(String s) {
if (!s.trim().isEmpty()) {
IAA44 = Short.parseShort(s);
} else {
IAA44 = Short.MIN_VALUE;
}
}

protected final void initIAA44FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FE = false;
} else {
IAA44FE = true;
}
}
}

protected final void initIAA44FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FL = false;
} else {
IAA44FL = true;
}
}
}

protected final void initIAA44FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FR = false;
} else {
IAA44FR = true;
}
}
}

protected final void initIAA44FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FU = false;
} else {
IAA44FU = true;
}
}
}

protected final void initIAA44ME(String s) {
if (!s.trim().isEmpty()) {
IAA44ME = Byte.parseByte(s);
} else {
IAA44ME = Byte.MIN_VALUE;
}
}

protected final void initIAA44ML(String s) {
if (!s.trim().isEmpty()) {
IAA44ML = Short.parseShort(s);
} else {
IAA44ML = Short.MIN_VALUE;
}
}

protected final void initIAA44MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44MR = false;
} else {
IAA44MR = true;
}
}
}

protected final void initIAA44MU(String s) {
if (!s.trim().isEmpty()) {
IAA44MU = Short.parseShort(s);
} else {
IAA44MU = Short.MIN_VALUE;
}
}

protected final void initIAA44OE(String s) {
if (!s.trim().isEmpty()) {
IAA44OE = Byte.parseByte(s);
} else {
IAA44OE = Byte.MIN_VALUE;
}
}

protected final void initIAA44OL(String s) {
if (!s.trim().isEmpty()) {
IAA44OL = Short.parseShort(s);
} else {
IAA44OL = Short.MIN_VALUE;
}
}

protected final void initIAA44OR(String s) {
if (!s.trim().isEmpty()) {
IAA44OR = Byte.parseByte(s);
} else {
IAA44OR = Byte.MIN_VALUE;
}
}

protected final void initIAA44OU(String s) {
if (!s.trim().isEmpty()) {
IAA44OU = Short.parseShort(s);
} else {
IAA44OU = Short.MIN_VALUE;
}
}

protected final void initIAA44WE(String s) {
if (!s.trim().isEmpty()) {
IAA44WE = Byte.parseByte(s);
} else {
IAA44WE = Byte.MIN_VALUE;
}
}

protected final void initIAA44WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44WL = false;
} else {
IAA44WL = true;
}
}
}

protected final void initIAA44WR(String s) {
if (!s.trim().isEmpty()) {
IAA44WR = Byte.parseByte(s);
} else {
IAA44WR = Byte.MIN_VALUE;
}
}

protected final void initIAA44WU(String s) {
if (!s.trim().isEmpty()) {
IAA44WU = Byte.parseByte(s);
} else {
IAA44WU = Byte.MIN_VALUE;
}
}

protected final void initIAA44YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44YE = false;
} else {
IAA44YE = true;
}
}
}

protected final void initIAA44YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44YL = false;
} else {
IAA44YL = true;
}
}
}

protected final void initIAA44YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44YR = false;
} else {
IAA44YR = true;
}
}
}

protected final void initIAA44YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44YU = false;
} else {
IAA44YU = true;
}
}
}

protected final void initIAA45(String s) {
if (!s.trim().isEmpty()) {
IAA45 = Short.parseShort(s);
} else {
IAA45 = Short.MIN_VALUE;
}
}

protected final void initIAA45FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45FE = false;
} else {
IAA45FE = true;
}
}
}

protected final void initIAA45FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45FL = false;
} else {
IAA45FL = true;
}
}
}

protected final void initIAA45FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45FR = false;
} else {
IAA45FR = true;
}
}
}

protected final void initIAA45FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45FU = false;
} else {
IAA45FU = true;
}
}
}

protected final void initIAA45ME(String s) {
if (!s.trim().isEmpty()) {
IAA45ME = Byte.parseByte(s);
} else {
IAA45ME = Byte.MIN_VALUE;
}
}

protected final void initIAA45ML(String s) {
if (!s.trim().isEmpty()) {
IAA45ML = Short.parseShort(s);
} else {
IAA45ML = Short.MIN_VALUE;
}
}

protected final void initIAA45MR(String s) {
if (!s.trim().isEmpty()) {
IAA45MR = Byte.parseByte(s);
} else {
IAA45MR = Byte.MIN_VALUE;
}
}

protected final void initIAA45MU(String s) {
if (!s.trim().isEmpty()) {
IAA45MU = Short.parseShort(s);
} else {
IAA45MU = Short.MIN_VALUE;
}
}

protected final void initIAA45OE(String s) {
if (!s.trim().isEmpty()) {
IAA45OE = Byte.parseByte(s);
} else {
IAA45OE = Byte.MIN_VALUE;
}
}

protected final void initIAA45OL(String s) {
if (!s.trim().isEmpty()) {
IAA45OL = Short.parseShort(s);
} else {
IAA45OL = Short.MIN_VALUE;
}
}

protected final void initIAA45OR(String s) {
if (!s.trim().isEmpty()) {
IAA45OR = Byte.parseByte(s);
} else {
IAA45OR = Byte.MIN_VALUE;
}
}

protected final void initIAA45OU(String s) {
if (!s.trim().isEmpty()) {
IAA45OU = Short.parseShort(s);
} else {
IAA45OU = Short.MIN_VALUE;
}
}

protected final void initIAA45WE(String s) {
if (!s.trim().isEmpty()) {
IAA45WE = Byte.parseByte(s);
} else {
IAA45WE = Byte.MIN_VALUE;
}
}

protected final void initIAA45WL(String s) {
if (!s.trim().isEmpty()) {
IAA45WL = Byte.parseByte(s);
} else {
IAA45WL = Byte.MIN_VALUE;
}
}

protected final void initIAA45WR(String s) {
if (!s.trim().isEmpty()) {
IAA45WR = Byte.parseByte(s);
} else {
IAA45WR = Byte.MIN_VALUE;
}
}

protected final void initIAA45WU(String s) {
if (!s.trim().isEmpty()) {
IAA45WU = Short.parseShort(s);
} else {
IAA45WU = Short.MIN_VALUE;
}
}

protected final void initIAA45YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YE = false;
} else {
IAA45YE = true;
}
}
}

protected final void initIAA45YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YL = false;
} else {
IAA45YL = true;
}
}
}

protected final void initIAA45YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YR = false;
} else {
IAA45YR = true;
}
}
}

protected final void initIAA45YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YU = false;
} else {
IAA45YU = true;
}
}
}

protected final void initIAA46(String s) {
if (!s.trim().isEmpty()) {
IAA46 = Short.parseShort(s);
} else {
IAA46 = Short.MIN_VALUE;
}
}

protected final void initIAA46FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46FE = false;
} else {
IAA46FE = true;
}
}
}

protected final void initIAA46FL(String s) {
if (!s.trim().isEmpty()) {
IAA46FL = Short.parseShort(s);
} else {
IAA46FL = Short.MIN_VALUE;
}
}

protected final void initIAA46FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46FR = false;
} else {
IAA46FR = true;
}
}
}

protected final void initIAA46FU(String s) {
if (!s.trim().isEmpty()) {
IAA46FU = Short.parseShort(s);
} else {
IAA46FU = Short.MIN_VALUE;
}
}

protected final void initIAA46ME(String s) {
if (!s.trim().isEmpty()) {
IAA46ME = Byte.parseByte(s);
} else {
IAA46ME = Byte.MIN_VALUE;
}
}

protected final void initIAA46ML(String s) {
if (!s.trim().isEmpty()) {
IAA46ML = Short.parseShort(s);
} else {
IAA46ML = Short.MIN_VALUE;
}
}

protected final void initIAA46MR(String s) {
if (!s.trim().isEmpty()) {
IAA46MR = Byte.parseByte(s);
} else {
IAA46MR = Byte.MIN_VALUE;
}
}

protected final void initIAA46MU(String s) {
if (!s.trim().isEmpty()) {
IAA46MU = Short.parseShort(s);
} else {
IAA46MU = Short.MIN_VALUE;
}
}

protected final void initIAA46OE(String s) {
if (!s.trim().isEmpty()) {
IAA46OE = Byte.parseByte(s);
} else {
IAA46OE = Byte.MIN_VALUE;
}
}

protected final void initIAA46OL(String s) {
if (!s.trim().isEmpty()) {
IAA46OL = Short.parseShort(s);
} else {
IAA46OL = Short.MIN_VALUE;
}
}

protected final void initIAA46OR(String s) {
if (!s.trim().isEmpty()) {
IAA46OR = Byte.parseByte(s);
} else {
IAA46OR = Byte.MIN_VALUE;
}
}

protected final void initIAA46OU(String s) {
if (!s.trim().isEmpty()) {
IAA46OU = Short.parseShort(s);
} else {
IAA46OU = Short.MIN_VALUE;
}
}

protected final void initIAA46WE(String s) {
if (!s.trim().isEmpty()) {
IAA46WE = Byte.parseByte(s);
} else {
IAA46WE = Byte.MIN_VALUE;
}
}

protected final void initIAA46WL(String s) {
if (!s.trim().isEmpty()) {
IAA46WL = Byte.parseByte(s);
} else {
IAA46WL = Byte.MIN_VALUE;
}
}

protected final void initIAA46WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46WR = false;
} else {
IAA46WR = true;
}
}
}

protected final void initIAA46WU(String s) {
if (!s.trim().isEmpty()) {
IAA46WU = Byte.parseByte(s);
} else {
IAA46WU = Byte.MIN_VALUE;
}
}

protected final void initIAA46YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YE = false;
} else {
IAA46YE = true;
}
}
}

protected final void initIAA46YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YL = false;
} else {
IAA46YL = true;
}
}
}

protected final void initIAA46YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YR = false;
} else {
IAA46YR = true;
}
}
}

protected final void initIAA46YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YU = false;
} else {
IAA46YU = true;
}
}
}

protected final void initIAA47(String s) {
if (!s.trim().isEmpty()) {
IAA47 = Short.parseShort(s);
} else {
IAA47 = Short.MIN_VALUE;
}
}

protected final void initIAA47FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FE = false;
} else {
IAA47FE = true;
}
}
}

protected final void initIAA47FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FL = false;
} else {
IAA47FL = true;
}
}
}

protected final void initIAA47FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FR = false;
} else {
IAA47FR = true;
}
}
}

protected final void initIAA47FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FU = false;
} else {
IAA47FU = true;
}
}
}

protected final void initIAA47ME(String s) {
if (!s.trim().isEmpty()) {
IAA47ME = Byte.parseByte(s);
} else {
IAA47ME = Byte.MIN_VALUE;
}
}

protected final void initIAA47ML(String s) {
if (!s.trim().isEmpty()) {
IAA47ML = Short.parseShort(s);
} else {
IAA47ML = Short.MIN_VALUE;
}
}

protected final void initIAA47MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47MR = false;
} else {
IAA47MR = true;
}
}
}

protected final void initIAA47MU(String s) {
if (!s.trim().isEmpty()) {
IAA47MU = Short.parseShort(s);
} else {
IAA47MU = Short.MIN_VALUE;
}
}

protected final void initIAA47OE(String s) {
if (!s.trim().isEmpty()) {
IAA47OE = Byte.parseByte(s);
} else {
IAA47OE = Byte.MIN_VALUE;
}
}

protected final void initIAA47OL(String s) {
if (!s.trim().isEmpty()) {
IAA47OL = Short.parseShort(s);
} else {
IAA47OL = Short.MIN_VALUE;
}
}

protected final void initIAA47OR(String s) {
if (!s.trim().isEmpty()) {
IAA47OR = Byte.parseByte(s);
} else {
IAA47OR = Byte.MIN_VALUE;
}
}

protected final void initIAA47OU(String s) {
if (!s.trim().isEmpty()) {
IAA47OU = Short.parseShort(s);
} else {
IAA47OU = Short.MIN_VALUE;
}
}

protected final void initIAA47WE(String s) {
if (!s.trim().isEmpty()) {
IAA47WE = Byte.parseByte(s);
} else {
IAA47WE = Byte.MIN_VALUE;
}
}

protected final void initIAA47WL(String s) {
if (!s.trim().isEmpty()) {
IAA47WL = Byte.parseByte(s);
} else {
IAA47WL = Byte.MIN_VALUE;
}
}

protected final void initIAA47WR(String s) {
if (!s.trim().isEmpty()) {
IAA47WR = Byte.parseByte(s);
} else {
IAA47WR = Byte.MIN_VALUE;
}
}

protected final void initIAA47WU(String s) {
if (!s.trim().isEmpty()) {
IAA47WU = Byte.parseByte(s);
} else {
IAA47WU = Byte.MIN_VALUE;
}
}

protected final void initIAA47YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47YE = false;
} else {
IAA47YE = true;
}
}
}

protected final void initIAA47YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47YL = false;
} else {
IAA47YL = true;
}
}
}

protected final void initIAA47YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47YR = false;
} else {
IAA47YR = true;
}
}
}

protected final void initIAA47YU(String s) {
if (!s.trim().isEmpty()) {
IAA47YU = Short.parseShort(s);
} else {
IAA47YU = Short.MIN_VALUE;
}
}

protected final void initIAA48(String s) {
if (!s.trim().isEmpty()) {
IAA48 = Short.parseShort(s);
} else {
IAA48 = Short.MIN_VALUE;
}
}

protected final void initIAA48FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FE = false;
} else {
IAA48FE = true;
}
}
}

protected final void initIAA48FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FL = false;
} else {
IAA48FL = true;
}
}
}

protected final void initIAA48FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FR = false;
} else {
IAA48FR = true;
}
}
}

protected final void initIAA48FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FU = false;
} else {
IAA48FU = true;
}
}
}

protected final void initIAA48ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48ME = false;
} else {
IAA48ME = true;
}
}
}

protected final void initIAA48ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48ML = false;
} else {
IAA48ML = true;
}
}
}

protected final void initIAA48MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48MR = false;
} else {
IAA48MR = true;
}
}
}

protected final void initIAA48MU(String s) {
if (!s.trim().isEmpty()) {
IAA48MU = Short.parseShort(s);
} else {
IAA48MU = Short.MIN_VALUE;
}
}

protected final void initIAA48OE(String s) {
if (!s.trim().isEmpty()) {
IAA48OE = Byte.parseByte(s);
} else {
IAA48OE = Byte.MIN_VALUE;
}
}

protected final void initIAA48OL(String s) {
if (!s.trim().isEmpty()) {
IAA48OL = Short.parseShort(s);
} else {
IAA48OL = Short.MIN_VALUE;
}
}

protected final void initIAA48OR(String s) {
if (!s.trim().isEmpty()) {
IAA48OR = Byte.parseByte(s);
} else {
IAA48OR = Byte.MIN_VALUE;
}
}

protected final void initIAA48OU(String s) {
if (!s.trim().isEmpty()) {
IAA48OU = Short.parseShort(s);
} else {
IAA48OU = Short.MIN_VALUE;
}
}

protected final void initIAA48WE(String s) {
if (!s.trim().isEmpty()) {
IAA48WE = Byte.parseByte(s);
} else {
IAA48WE = Byte.MIN_VALUE;
}
}

protected final void initIAA48WL(String s) {
if (!s.trim().isEmpty()) {
IAA48WL = Byte.parseByte(s);
} else {
IAA48WL = Byte.MIN_VALUE;
}
}

protected final void initIAA48WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48WR = false;
} else {
IAA48WR = true;
}
}
}

protected final void initIAA48WU(String s) {
if (!s.trim().isEmpty()) {
IAA48WU = Short.parseShort(s);
} else {
IAA48WU = Short.MIN_VALUE;
}
}

protected final void initIAA48YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YE = false;
} else {
IAA48YE = true;
}
}
}

protected final void initIAA48YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YL = false;
} else {
IAA48YL = true;
}
}
}

protected final void initIAA48YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YR = false;
} else {
IAA48YR = true;
}
}
}

protected final void initIAA48YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YU = false;
} else {
IAA48YU = true;
}
}
}

protected final void initIAA49(String s) {
if (!s.trim().isEmpty()) {
IAA49 = Short.parseShort(s);
} else {
IAA49 = Short.MIN_VALUE;
}
}

protected final void initIAA49FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FE = false;
} else {
IAA49FE = true;
}
}
}

protected final void initIAA49FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FL = false;
} else {
IAA49FL = true;
}
}
}

protected final void initIAA49FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FR = false;
} else {
IAA49FR = true;
}
}
}

protected final void initIAA49FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FU = false;
} else {
IAA49FU = true;
}
}
}

protected final void initIAA49ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49ME = false;
} else {
IAA49ME = true;
}
}
}

protected final void initIAA49ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49ML = false;
} else {
IAA49ML = true;
}
}
}

protected final void initIAA49MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49MR = false;
} else {
IAA49MR = true;
}
}
}

protected final void initIAA49MU(String s) {
if (!s.trim().isEmpty()) {
IAA49MU = Short.parseShort(s);
} else {
IAA49MU = Short.MIN_VALUE;
}
}

protected final void initIAA49OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49OE = false;
} else {
IAA49OE = true;
}
}
}

protected final void initIAA49OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA49OL = false;
} else {
IAA49OL = true;
}
}
}

protected final void initIAA49OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49OR = false;
} else {
IAA49OR = true;
}
}
}

protected final void initIAA49OU(String s) {
if (!s.trim().isEmpty()) {
IAA49OU = Short.parseShort(s);
} else {
IAA49OU = Short.MIN_VALUE;
}
}

protected final void initIAA49WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WE = false;
} else {
IAA49WE = true;
}
}
}

protected final void initIAA49WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WL = false;
} else {
IAA49WL = true;
}
}
}

protected final void initIAA49WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WR = false;
} else {
IAA49WR = true;
}
}
}

protected final void initIAA49WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WU = false;
} else {
IAA49WU = true;
}
}
}

protected final void initIAA49YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YE = false;
} else {
IAA49YE = true;
}
}
}

protected final void initIAA49YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YL = false;
} else {
IAA49YL = true;
}
}
}

protected final void initIAA49YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YR = false;
} else {
IAA49YR = true;
}
}
}

protected final void initIAA49YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YU = false;
} else {
IAA49YU = true;
}
}
}

protected final void initIAA50(String s) {
if (!s.trim().isEmpty()) {
IAA50 = Short.parseShort(s);
} else {
IAA50 = Short.MIN_VALUE;
}
}

protected final void initIAA50FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FE = false;
} else {
IAA50FE = true;
}
}
}

protected final void initIAA50FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FL = false;
} else {
IAA50FL = true;
}
}
}

protected final void initIAA50FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FR = false;
} else {
IAA50FR = true;
}
}
}

protected final void initIAA50FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FU = false;
} else {
IAA50FU = true;
}
}
}

protected final void initIAA50ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50ME = false;
} else {
IAA50ME = true;
}
}
}

protected final void initIAA50ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50ML = false;
} else {
IAA50ML = true;
}
}
}

protected final void initIAA50MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50MR = false;
} else {
IAA50MR = true;
}
}
}

protected final void initIAA50MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50MU = false;
} else {
IAA50MU = true;
}
}
}

protected final void initIAA50OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50OE = false;
} else {
IAA50OE = true;
}
}
}

protected final void initIAA50OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50OL = false;
} else {
IAA50OL = true;
}
}
}

protected final void initIAA50OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50OR = false;
} else {
IAA50OR = true;
}
}
}

protected final void initIAA50OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50OU = false;
} else {
IAA50OU = true;
}
}
}

protected final void initIAA50WE(String s) {
if (!s.trim().isEmpty()) {
IAA50WE = Byte.parseByte(s);
} else {
IAA50WE = Byte.MIN_VALUE;
}
}

protected final void initIAA50WL(String s) {
if (!s.trim().isEmpty()) {
IAA50WL = Byte.parseByte(s);
} else {
IAA50WL = Byte.MIN_VALUE;
}
}

protected final void initIAA50WR(String s) {
if (!s.trim().isEmpty()) {
IAA50WR = Byte.parseByte(s);
} else {
IAA50WR = Byte.MIN_VALUE;
}
}

protected final void initIAA50WU(String s) {
if (!s.trim().isEmpty()) {
IAA50WU = Byte.parseByte(s);
} else {
IAA50WU = Byte.MIN_VALUE;
}
}

protected final void initIAA50YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YE = false;
} else {
IAA50YE = true;
}
}
}

protected final void initIAA50YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YL = false;
} else {
IAA50YL = true;
}
}
}

protected final void initIAA50YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YR = false;
} else {
IAA50YR = true;
}
}
}

protected final void initIAA50YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YU = false;
} else {
IAA50YU = true;
}
}
}

protected final void initIAA51(String s) {
if (!s.trim().isEmpty()) {
IAA51 = Short.parseShort(s);
} else {
IAA51 = Short.MIN_VALUE;
}
}

protected final void initIAA51FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FE = false;
} else {
IAA51FE = true;
}
}
}

protected final void initIAA51FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FL = false;
} else {
IAA51FL = true;
}
}
}

protected final void initIAA51FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FR = false;
} else {
IAA51FR = true;
}
}
}

protected final void initIAA51FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FU = false;
} else {
IAA51FU = true;
}
}
}

protected final void initIAA51ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51ME = false;
} else {
IAA51ME = true;
}
}
}

protected final void initIAA51ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51ML = false;
} else {
IAA51ML = true;
}
}
}

protected final void initIAA51MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51MR = false;
} else {
IAA51MR = true;
}
}
}

protected final void initIAA51MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51MU = false;
} else {
IAA51MU = true;
}
}
}

protected final void initIAA51OE(String s) {
if (!s.trim().isEmpty()) {
IAA51OE = Byte.parseByte(s);
} else {
IAA51OE = Byte.MIN_VALUE;
}
}

protected final void initIAA51OL(String s) {
if (!s.trim().isEmpty()) {
IAA51OL = Short.parseShort(s);
} else {
IAA51OL = Short.MIN_VALUE;
}
}

protected final void initIAA51OR(String s) {
if (!s.trim().isEmpty()) {
IAA51OR = Byte.parseByte(s);
} else {
IAA51OR = Byte.MIN_VALUE;
}
}

protected final void initIAA51OU(String s) {
if (!s.trim().isEmpty()) {
IAA51OU = Short.parseShort(s);
} else {
IAA51OU = Short.MIN_VALUE;
}
}

protected final void initIAA51WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WE = false;
} else {
IAA51WE = true;
}
}
}

protected final void initIAA51WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA51WL = false;
} else {
IAA51WL = true;
}
}
}

protected final void initIAA51WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WR = false;
} else {
IAA51WR = true;
}
}
}

protected final void initIAA51WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WU = false;
} else {
IAA51WU = true;
}
}
}

protected final void initIAA51YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51YE = false;
} else {
IAA51YE = true;
}
}
}

protected final void initIAA51YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA51YL = false;
} else {
IAA51YL = true;
}
}
}

protected final void initIAA51YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51YR = false;
} else {
IAA51YR = true;
}
}
}

protected final void initIAA51YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA51YU = false;
} else {
IAA51YU = true;
}
}
}

protected final void initIAA52(String s) {
if (!s.trim().isEmpty()) {
IAA52 = Short.parseShort(s);
} else {
IAA52 = Short.MIN_VALUE;
}
}

protected final void initIAA52FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FE = false;
} else {
IAA52FE = true;
}
}
}

protected final void initIAA52FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FL = false;
} else {
IAA52FL = true;
}
}
}

protected final void initIAA52FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FR = false;
} else {
IAA52FR = true;
}
}
}

protected final void initIAA52FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FU = false;
} else {
IAA52FU = true;
}
}
}

protected final void initIAA52ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52ME = false;
} else {
IAA52ME = true;
}
}
}

protected final void initIAA52ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA52ML = false;
} else {
IAA52ML = true;
}
}
}

protected final void initIAA52MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52MR = false;
} else {
IAA52MR = true;
}
}
}

protected final void initIAA52MU(String s) {
if (!s.trim().isEmpty()) {
IAA52MU = Short.parseShort(s);
} else {
IAA52MU = Short.MIN_VALUE;
}
}

protected final void initIAA52OE(String s) {
if (!s.trim().isEmpty()) {
IAA52OE = Byte.parseByte(s);
} else {
IAA52OE = Byte.MIN_VALUE;
}
}

protected final void initIAA52OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA52OL = false;
} else {
IAA52OL = true;
}
}
}

protected final void initIAA52OR(String s) {
if (!s.trim().isEmpty()) {
IAA52OR = Byte.parseByte(s);
} else {
IAA52OR = Byte.MIN_VALUE;
}
}

protected final void initIAA52OU(String s) {
if (!s.trim().isEmpty()) {
IAA52OU = Short.parseShort(s);
} else {
IAA52OU = Short.MIN_VALUE;
}
}

protected final void initIAA52WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WE = false;
} else {
IAA52WE = true;
}
}
}

protected final void initIAA52WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WL = false;
} else {
IAA52WL = true;
}
}
}

protected final void initIAA52WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WR = false;
} else {
IAA52WR = true;
}
}
}

protected final void initIAA52WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WU = false;
} else {
IAA52WU = true;
}
}
}

protected final void initIAA52YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YE = false;
} else {
IAA52YE = true;
}
}
}

protected final void initIAA52YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YL = false;
} else {
IAA52YL = true;
}
}
}

protected final void initIAA52YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YR = false;
} else {
IAA52YR = true;
}
}
}

protected final void initIAA52YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YU = false;
} else {
IAA52YU = true;
}
}
}

protected final void initIAA53(String s) {
if (!s.trim().isEmpty()) {
IAA53 = Short.parseShort(s);
} else {
IAA53 = Short.MIN_VALUE;
}
}

protected final void initIAA53FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FE = false;
} else {
IAA53FE = true;
}
}
}

protected final void initIAA53FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FL = false;
} else {
IAA53FL = true;
}
}
}

protected final void initIAA53FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FR = false;
} else {
IAA53FR = true;
}
}
}

protected final void initIAA53FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FU = false;
} else {
IAA53FU = true;
}
}
}

protected final void initIAA53ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53ME = false;
} else {
IAA53ME = true;
}
}
}

protected final void initIAA53ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA53ML = false;
} else {
IAA53ML = true;
}
}
}

protected final void initIAA53MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53MR = false;
} else {
IAA53MR = true;
}
}
}

protected final void initIAA53MU(String s) {
if (!s.trim().isEmpty()) {
IAA53MU = Short.parseShort(s);
} else {
IAA53MU = Short.MIN_VALUE;
}
}

protected final void initIAA53OE(String s) {
if (!s.trim().isEmpty()) {
IAA53OE = Byte.parseByte(s);
} else {
IAA53OE = Byte.MIN_VALUE;
}
}

protected final void initIAA53OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA53OL = false;
} else {
IAA53OL = true;
}
}
}

protected final void initIAA53OR(String s) {
if (!s.trim().isEmpty()) {
IAA53OR = Byte.parseByte(s);
} else {
IAA53OR = Byte.MIN_VALUE;
}
}

protected final void initIAA53OU(String s) {
if (!s.trim().isEmpty()) {
IAA53OU = Short.parseShort(s);
} else {
IAA53OU = Short.MIN_VALUE;
}
}

protected final void initIAA53WE(String s) {
if (!s.trim().isEmpty()) {
IAA53WE = Byte.parseByte(s);
} else {
IAA53WE = Byte.MIN_VALUE;
}
}

protected final void initIAA53WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA53WL = false;
} else {
IAA53WL = true;
}
}
}

protected final void initIAA53WR(String s) {
if (!s.trim().isEmpty()) {
IAA53WR = Byte.parseByte(s);
} else {
IAA53WR = Byte.MIN_VALUE;
}
}

protected final void initIAA53WU(String s) {
if (!s.trim().isEmpty()) {
IAA53WU = Byte.parseByte(s);
} else {
IAA53WU = Byte.MIN_VALUE;
}
}

protected final void initIAA53YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YE = false;
} else {
IAA53YE = true;
}
}
}

protected final void initIAA53YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YL = false;
} else {
IAA53YL = true;
}
}
}

protected final void initIAA53YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YR = false;
} else {
IAA53YR = true;
}
}
}

protected final void initIAA53YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YU = false;
} else {
IAA53YU = true;
}
}
}

protected final void initIAA54(String s) {
if (!s.trim().isEmpty()) {
IAA54 = Short.parseShort(s);
} else {
IAA54 = Short.MIN_VALUE;
}
}

protected final void initIAA54FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FE = false;
} else {
IAA54FE = true;
}
}
}

protected final void initIAA54FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FL = false;
} else {
IAA54FL = true;
}
}
}

protected final void initIAA54FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FR = false;
} else {
IAA54FR = true;
}
}
}

protected final void initIAA54FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FU = false;
} else {
IAA54FU = true;
}
}
}

protected final void initIAA54ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54ME = false;
} else {
IAA54ME = true;
}
}
}

protected final void initIAA54ML(String s) {
if (!s.trim().isEmpty()) {
IAA54ML = Short.parseShort(s);
} else {
IAA54ML = Short.MIN_VALUE;
}
}

protected final void initIAA54MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54MR = false;
} else {
IAA54MR = true;
}
}
}

protected final void initIAA54MU(String s) {
if (!s.trim().isEmpty()) {
IAA54MU = Short.parseShort(s);
} else {
IAA54MU = Short.MIN_VALUE;
}
}

protected final void initIAA54OE(String s) {
if (!s.trim().isEmpty()) {
IAA54OE = Byte.parseByte(s);
} else {
IAA54OE = Byte.MIN_VALUE;
}
}

protected final void initIAA54OL(String s) {
if (!s.trim().isEmpty()) {
IAA54OL = Short.parseShort(s);
} else {
IAA54OL = Short.MIN_VALUE;
}
}

protected final void initIAA54OR(String s) {
if (!s.trim().isEmpty()) {
IAA54OR = Byte.parseByte(s);
} else {
IAA54OR = Byte.MIN_VALUE;
}
}

protected final void initIAA54OU(String s) {
if (!s.trim().isEmpty()) {
IAA54OU = Short.parseShort(s);
} else {
IAA54OU = Short.MIN_VALUE;
}
}

protected final void initIAA54WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WE = false;
} else {
IAA54WE = true;
}
}
}

protected final void initIAA54WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WL = false;
} else {
IAA54WL = true;
}
}
}

protected final void initIAA54WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WR = false;
} else {
IAA54WR = true;
}
}
}

protected final void initIAA54WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WU = false;
} else {
IAA54WU = true;
}
}
}

protected final void initIAA54YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54YE = false;
} else {
IAA54YE = true;
}
}
}

protected final void initIAA54YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54YL = false;
} else {
IAA54YL = true;
}
}
}

protected final void initIAA54YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54YR = false;
} else {
IAA54YR = true;
}
}
}

protected final void initIAA54YU(String s) {
if (!s.trim().isEmpty()) {
IAA54YU = Short.parseShort(s);
} else {
IAA54YU = Short.MIN_VALUE;
}
}

protected final void initIAA55(String s) {
if (!s.trim().isEmpty()) {
IAA55 = Short.parseShort(s);
} else {
IAA55 = Short.MIN_VALUE;
}
}

protected final void initIAA55FE(String s) {
if (!s.trim().isEmpty()) {
IAA55FE = Byte.parseByte(s);
} else {
IAA55FE = Byte.MIN_VALUE;
}
}

protected final void initIAA55FL(String s) {
if (!s.trim().isEmpty()) {
IAA55FL = Byte.parseByte(s);
} else {
IAA55FL = Byte.MIN_VALUE;
}
}

protected final void initIAA55FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55FR = false;
} else {
IAA55FR = true;
}
}
}

protected final void initIAA55FU(String s) {
if (!s.trim().isEmpty()) {
IAA55FU = Byte.parseByte(s);
} else {
IAA55FU = Byte.MIN_VALUE;
}
}

protected final void initIAA55ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55ME = false;
} else {
IAA55ME = true;
}
}
}

protected final void initIAA55ML(String s) {
if (!s.trim().isEmpty()) {
IAA55ML = Short.parseShort(s);
} else {
IAA55ML = Short.MIN_VALUE;
}
}

protected final void initIAA55MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55MR = false;
} else {
IAA55MR = true;
}
}
}

protected final void initIAA55MU(String s) {
if (!s.trim().isEmpty()) {
IAA55MU = Short.parseShort(s);
} else {
IAA55MU = Short.MIN_VALUE;
}
}

protected final void initIAA55OE(String s) {
if (!s.trim().isEmpty()) {
IAA55OE = Byte.parseByte(s);
} else {
IAA55OE = Byte.MIN_VALUE;
}
}

protected final void initIAA55OL(String s) {
if (!s.trim().isEmpty()) {
IAA55OL = Short.parseShort(s);
} else {
IAA55OL = Short.MIN_VALUE;
}
}

protected final void initIAA55OR(String s) {
if (!s.trim().isEmpty()) {
IAA55OR = Byte.parseByte(s);
} else {
IAA55OR = Byte.MIN_VALUE;
}
}

protected final void initIAA55OU(String s) {
if (!s.trim().isEmpty()) {
IAA55OU = Short.parseShort(s);
} else {
IAA55OU = Short.MIN_VALUE;
}
}

protected final void initIAA55WE(String s) {
if (!s.trim().isEmpty()) {
IAA55WE = Byte.parseByte(s);
} else {
IAA55WE = Byte.MIN_VALUE;
}
}

protected final void initIAA55WL(String s) {
if (!s.trim().isEmpty()) {
IAA55WL = Short.parseShort(s);
} else {
IAA55WL = Short.MIN_VALUE;
}
}

protected final void initIAA55WR(String s) {
if (!s.trim().isEmpty()) {
IAA55WR = Byte.parseByte(s);
} else {
IAA55WR = Byte.MIN_VALUE;
}
}

protected final void initIAA55WU(String s) {
if (!s.trim().isEmpty()) {
IAA55WU = Short.parseShort(s);
} else {
IAA55WU = Short.MIN_VALUE;
}
}

protected final void initIAA55YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YE = false;
} else {
IAA55YE = true;
}
}
}

protected final void initIAA55YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YL = false;
} else {
IAA55YL = true;
}
}
}

protected final void initIAA55YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YR = false;
} else {
IAA55YR = true;
}
}
}

protected final void initIAA55YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YU = false;
} else {
IAA55YU = true;
}
}
}

protected final void initIAA56(String s) {
if (!s.trim().isEmpty()) {
IAA56 = Short.parseShort(s);
} else {
IAA56 = Short.MIN_VALUE;
}
}

protected final void initIAA56FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FE = false;
} else {
IAA56FE = true;
}
}
}

protected final void initIAA56FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FL = false;
} else {
IAA56FL = true;
}
}
}

protected final void initIAA56FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FR = false;
} else {
IAA56FR = true;
}
}
}

protected final void initIAA56FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FU = false;
} else {
IAA56FU = true;
}
}
}

protected final void initIAA56ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56ME = false;
} else {
IAA56ME = true;
}
}
}

protected final void initIAA56ML(String s) {
if (!s.trim().isEmpty()) {
IAA56ML = Short.parseShort(s);
} else {
IAA56ML = Short.MIN_VALUE;
}
}

protected final void initIAA56MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56MR = false;
} else {
IAA56MR = true;
}
}
}

protected final void initIAA56MU(String s) {
if (!s.trim().isEmpty()) {
IAA56MU = Short.parseShort(s);
} else {
IAA56MU = Short.MIN_VALUE;
}
}

protected final void initIAA56OE(String s) {
if (!s.trim().isEmpty()) {
IAA56OE = Byte.parseByte(s);
} else {
IAA56OE = Byte.MIN_VALUE;
}
}

protected final void initIAA56OL(String s) {
if (!s.trim().isEmpty()) {
IAA56OL = Byte.parseByte(s);
} else {
IAA56OL = Byte.MIN_VALUE;
}
}

protected final void initIAA56OR(String s) {
if (!s.trim().isEmpty()) {
IAA56OR = Byte.parseByte(s);
} else {
IAA56OR = Byte.MIN_VALUE;
}
}

protected final void initIAA56OU(String s) {
if (!s.trim().isEmpty()) {
IAA56OU = Short.parseShort(s);
} else {
IAA56OU = Short.MIN_VALUE;
}
}

protected final void initIAA56WE(String s) {
if (!s.trim().isEmpty()) {
IAA56WE = Byte.parseByte(s);
} else {
IAA56WE = Byte.MIN_VALUE;
}
}

protected final void initIAA56WL(String s) {
if (!s.trim().isEmpty()) {
IAA56WL = Byte.parseByte(s);
} else {
IAA56WL = Byte.MIN_VALUE;
}
}

protected final void initIAA56WR(String s) {
if (!s.trim().isEmpty()) {
IAA56WR = Byte.parseByte(s);
} else {
IAA56WR = Byte.MIN_VALUE;
}
}

protected final void initIAA56WU(String s) {
if (!s.trim().isEmpty()) {
IAA56WU = Byte.parseByte(s);
} else {
IAA56WU = Byte.MIN_VALUE;
}
}

protected final void initIAA56YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YE = false;
} else {
IAA56YE = true;
}
}
}

protected final void initIAA56YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YL = false;
} else {
IAA56YL = true;
}
}
}

protected final void initIAA56YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YR = false;
} else {
IAA56YR = true;
}
}
}

protected final void initIAA56YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YU = false;
} else {
IAA56YU = true;
}
}
}

protected final void initIAA57(String s) {
if (!s.trim().isEmpty()) {
IAA57 = Short.parseShort(s);
} else {
IAA57 = Short.MIN_VALUE;
}
}

protected final void initIAA57FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FE = false;
} else {
IAA57FE = true;
}
}
}

protected final void initIAA57FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FL = false;
} else {
IAA57FL = true;
}
}
}

protected final void initIAA57FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FR = false;
} else {
IAA57FR = true;
}
}
}

protected final void initIAA57FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FU = false;
} else {
IAA57FU = true;
}
}
}

protected final void initIAA57ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57ME = false;
} else {
IAA57ME = true;
}
}
}

protected final void initIAA57ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57ML = false;
} else {
IAA57ML = true;
}
}
}

protected final void initIAA57MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57MR = false;
} else {
IAA57MR = true;
}
}
}

protected final void initIAA57MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57MU = false;
} else {
IAA57MU = true;
}
}
}

protected final void initIAA57OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57OE = false;
} else {
IAA57OE = true;
}
}
}

protected final void initIAA57OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA57OL = false;
} else {
IAA57OL = true;
}
}
}

protected final void initIAA57OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57OR = false;
} else {
IAA57OR = true;
}
}
}

protected final void initIAA57OU(String s) {
if (!s.trim().isEmpty()) {
IAA57OU = Short.parseShort(s);
} else {
IAA57OU = Short.MIN_VALUE;
}
}

protected final void initIAA57WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WE = false;
} else {
IAA57WE = true;
}
}
}

protected final void initIAA57WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WL = false;
} else {
IAA57WL = true;
}
}
}

protected final void initIAA57WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WR = false;
} else {
IAA57WR = true;
}
}
}

protected final void initIAA57WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WU = false;
} else {
IAA57WU = true;
}
}
}

protected final void initIAA57YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YE = false;
} else {
IAA57YE = true;
}
}
}

protected final void initIAA57YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YL = false;
} else {
IAA57YL = true;
}
}
}

protected final void initIAA57YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YR = false;
} else {
IAA57YR = true;
}
}
}

protected final void initIAA57YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YU = false;
} else {
IAA57YU = true;
}
}
}

protected final void initIAA58(String s) {
if (!s.trim().isEmpty()) {
IAA58 = Short.parseShort(s);
} else {
IAA58 = Short.MIN_VALUE;
}
}

protected final void initIAA58FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FE = false;
} else {
IAA58FE = true;
}
}
}

protected final void initIAA58FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FL = false;
} else {
IAA58FL = true;
}
}
}

protected final void initIAA58FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FR = false;
} else {
IAA58FR = true;
}
}
}

protected final void initIAA58FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FU = false;
} else {
IAA58FU = true;
}
}
}

protected final void initIAA58ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58ME = false;
} else {
IAA58ME = true;
}
}
}

protected final void initIAA58ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58ML = false;
} else {
IAA58ML = true;
}
}
}

protected final void initIAA58MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58MR = false;
} else {
IAA58MR = true;
}
}
}

protected final void initIAA58MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58MU = false;
} else {
IAA58MU = true;
}
}
}

protected final void initIAA58OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OE = false;
} else {
IAA58OE = true;
}
}
}

protected final void initIAA58OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OL = false;
} else {
IAA58OL = true;
}
}
}

protected final void initIAA58OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OR = false;
} else {
IAA58OR = true;
}
}
}

protected final void initIAA58OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OU = false;
} else {
IAA58OU = true;
}
}
}

protected final void initIAA58WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WE = false;
} else {
IAA58WE = true;
}
}
}

protected final void initIAA58WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WL = false;
} else {
IAA58WL = true;
}
}
}

protected final void initIAA58WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WR = false;
} else {
IAA58WR = true;
}
}
}

protected final void initIAA58WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WU = false;
} else {
IAA58WU = true;
}
}
}

protected final void initIAA58YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YE = false;
} else {
IAA58YE = true;
}
}
}

protected final void initIAA58YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YL = false;
} else {
IAA58YL = true;
}
}
}

protected final void initIAA58YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YR = false;
} else {
IAA58YR = true;
}
}
}

protected final void initIAA58YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YU = false;
} else {
IAA58YU = true;
}
}
}

protected final void initIAA59(String s) {
if (!s.trim().isEmpty()) {
IAA59 = Short.parseShort(s);
} else {
IAA59 = Short.MIN_VALUE;
}
}

protected final void initIAA59FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FE = false;
} else {
IAA59FE = true;
}
}
}

protected final void initIAA59FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FL = false;
} else {
IAA59FL = true;
}
}
}

protected final void initIAA59FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FR = false;
} else {
IAA59FR = true;
}
}
}

protected final void initIAA59FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FU = false;
} else {
IAA59FU = true;
}
}
}

protected final void initIAA59ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59ME = false;
} else {
IAA59ME = true;
}
}
}

protected final void initIAA59ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59ML = false;
} else {
IAA59ML = true;
}
}
}

protected final void initIAA59MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59MR = false;
} else {
IAA59MR = true;
}
}
}

protected final void initIAA59MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59MU = false;
} else {
IAA59MU = true;
}
}
}

protected final void initIAA59OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OE = false;
} else {
IAA59OE = true;
}
}
}

protected final void initIAA59OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OL = false;
} else {
IAA59OL = true;
}
}
}

protected final void initIAA59OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OR = false;
} else {
IAA59OR = true;
}
}
}

protected final void initIAA59OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OU = false;
} else {
IAA59OU = true;
}
}
}

protected final void initIAA59WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WE = false;
} else {
IAA59WE = true;
}
}
}

protected final void initIAA59WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WL = false;
} else {
IAA59WL = true;
}
}
}

protected final void initIAA59WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WR = false;
} else {
IAA59WR = true;
}
}
}

protected final void initIAA59WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WU = false;
} else {
IAA59WU = true;
}
}
}

protected final void initIAA59YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YE = false;
} else {
IAA59YE = true;
}
}
}

protected final void initIAA59YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YL = false;
} else {
IAA59YL = true;
}
}
}

protected final void initIAA59YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YR = false;
} else {
IAA59YR = true;
}
}
}

protected final void initIAA59YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YU = false;
} else {
IAA59YU = true;
}
}
}

protected final void initIAA60(String s) {
if (!s.trim().isEmpty()) {
IAA60 = Short.parseShort(s);
} else {
IAA60 = Short.MIN_VALUE;
}
}

protected final void initIAA60FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FE = false;
} else {
IAA60FE = true;
}
}
}

protected final void initIAA60FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FL = false;
} else {
IAA60FL = true;
}
}
}

protected final void initIAA60FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FR = false;
} else {
IAA60FR = true;
}
}
}

protected final void initIAA60FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FU = false;
} else {
IAA60FU = true;
}
}
}

protected final void initIAA60ME(String s) {
if (!s.trim().isEmpty()) {
IAA60ME = Byte.parseByte(s);
} else {
IAA60ME = Byte.MIN_VALUE;
}
}

protected final void initIAA60ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60ML = false;
} else {
IAA60ML = true;
}
}
}

protected final void initIAA60MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60MR = false;
} else {
IAA60MR = true;
}
}
}

protected final void initIAA60MU(String s) {
if (!s.trim().isEmpty()) {
IAA60MU = Short.parseShort(s);
} else {
IAA60MU = Short.MIN_VALUE;
}
}

protected final void initIAA60OE(String s) {
if (!s.trim().isEmpty()) {
IAA60OE = Byte.parseByte(s);
} else {
IAA60OE = Byte.MIN_VALUE;
}
}

protected final void initIAA60OL(String s) {
if (!s.trim().isEmpty()) {
IAA60OL = Short.parseShort(s);
} else {
IAA60OL = Short.MIN_VALUE;
}
}

protected final void initIAA60OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60OR = false;
} else {
IAA60OR = true;
}
}
}

protected final void initIAA60OU(String s) {
if (!s.trim().isEmpty()) {
IAA60OU = Short.parseShort(s);
} else {
IAA60OU = Short.MIN_VALUE;
}
}

protected final void initIAA60WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WE = false;
} else {
IAA60WE = true;
}
}
}

protected final void initIAA60WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WL = false;
} else {
IAA60WL = true;
}
}
}

protected final void initIAA60WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WR = false;
} else {
IAA60WR = true;
}
}
}

protected final void initIAA60WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WU = false;
} else {
IAA60WU = true;
}
}
}

protected final void initIAA60YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YE = false;
} else {
IAA60YE = true;
}
}
}

protected final void initIAA60YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YL = false;
} else {
IAA60YL = true;
}
}
}

protected final void initIAA60YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YR = false;
} else {
IAA60YR = true;
}
}
}

protected final void initIAA60YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YU = false;
} else {
IAA60YU = true;
}
}
}

protected final void initIAA61(String s) {
if (!s.trim().isEmpty()) {
IAA61 = Short.parseShort(s);
} else {
IAA61 = Short.MIN_VALUE;
}
}

protected final void initIAA61FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FE = false;
} else {
IAA61FE = true;
}
}
}

protected final void initIAA61FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FL = false;
} else {
IAA61FL = true;
}
}
}

protected final void initIAA61FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FR = false;
} else {
IAA61FR = true;
}
}
}

protected final void initIAA61FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FU = false;
} else {
IAA61FU = true;
}
}
}

protected final void initIAA61ME(String s) {
if (!s.trim().isEmpty()) {
IAA61ME = Byte.parseByte(s);
} else {
IAA61ME = Byte.MIN_VALUE;
}
}

protected final void initIAA61ML(String s) {
if (!s.trim().isEmpty()) {
IAA61ML = Short.parseShort(s);
} else {
IAA61ML = Short.MIN_VALUE;
}
}

protected final void initIAA61MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61MR = false;
} else {
IAA61MR = true;
}
}
}

protected final void initIAA61MU(String s) {
if (!s.trim().isEmpty()) {
IAA61MU = Short.parseShort(s);
} else {
IAA61MU = Short.MIN_VALUE;
}
}

protected final void initIAA61OE(String s) {
if (!s.trim().isEmpty()) {
IAA61OE = Byte.parseByte(s);
} else {
IAA61OE = Byte.MIN_VALUE;
}
}

protected final void initIAA61OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA61OL = false;
} else {
IAA61OL = true;
}
}
}

protected final void initIAA61OR(String s) {
if (!s.trim().isEmpty()) {
IAA61OR = Byte.parseByte(s);
} else {
IAA61OR = Byte.MIN_VALUE;
}
}

protected final void initIAA61OU(String s) {
if (!s.trim().isEmpty()) {
IAA61OU = Short.parseShort(s);
} else {
IAA61OU = Short.MIN_VALUE;
}
}

protected final void initIAA61WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WE = false;
} else {
IAA61WE = true;
}
}
}

protected final void initIAA61WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WL = false;
} else {
IAA61WL = true;
}
}
}

protected final void initIAA61WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WR = false;
} else {
IAA61WR = true;
}
}
}

protected final void initIAA61WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WU = false;
} else {
IAA61WU = true;
}
}
}

protected final void initIAA61YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YE = false;
} else {
IAA61YE = true;
}
}
}

protected final void initIAA61YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YL = false;
} else {
IAA61YL = true;
}
}
}

protected final void initIAA61YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YR = false;
} else {
IAA61YR = true;
}
}
}

protected final void initIAA61YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YU = false;
} else {
IAA61YU = true;
}
}
}

protected final void initIAA62(String s) {
if (!s.trim().isEmpty()) {
IAA62 = Short.parseShort(s);
} else {
IAA62 = Short.MIN_VALUE;
}
}

protected final void initIAA62FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FE = false;
} else {
IAA62FE = true;
}
}
}

protected final void initIAA62FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FL = false;
} else {
IAA62FL = true;
}
}
}

protected final void initIAA62FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FR = false;
} else {
IAA62FR = true;
}
}
}

protected final void initIAA62FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FU = false;
} else {
IAA62FU = true;
}
}
}

protected final void initIAA62ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62ME = false;
} else {
IAA62ME = true;
}
}
}

protected final void initIAA62ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62ML = false;
} else {
IAA62ML = true;
}
}
}

protected final void initIAA62MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62MR = false;
} else {
IAA62MR = true;
}
}
}

protected final void initIAA62MU(String s) {
if (!s.trim().isEmpty()) {
IAA62MU = Short.parseShort(s);
} else {
IAA62MU = Short.MIN_VALUE;
}
}

protected final void initIAA62OE(String s) {
if (!s.trim().isEmpty()) {
IAA62OE = Byte.parseByte(s);
} else {
IAA62OE = Byte.MIN_VALUE;
}
}

protected final void initIAA62OL(String s) {
if (!s.trim().isEmpty()) {
IAA62OL = Short.parseShort(s);
} else {
IAA62OL = Short.MIN_VALUE;
}
}

protected final void initIAA62OR(String s) {
if (!s.trim().isEmpty()) {
IAA62OR = Byte.parseByte(s);
} else {
IAA62OR = Byte.MIN_VALUE;
}
}

protected final void initIAA62OU(String s) {
if (!s.trim().isEmpty()) {
IAA62OU = Short.parseShort(s);
} else {
IAA62OU = Short.MIN_VALUE;
}
}

protected final void initIAA62WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WE = false;
} else {
IAA62WE = true;
}
}
}

protected final void initIAA62WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WL = false;
} else {
IAA62WL = true;
}
}
}

protected final void initIAA62WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WR = false;
} else {
IAA62WR = true;
}
}
}

protected final void initIAA62WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WU = false;
} else {
IAA62WU = true;
}
}
}

protected final void initIAA62YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YE = false;
} else {
IAA62YE = true;
}
}
}

protected final void initIAA62YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YL = false;
} else {
IAA62YL = true;
}
}
}

protected final void initIAA62YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YR = false;
} else {
IAA62YR = true;
}
}
}

protected final void initIAA62YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YU = false;
} else {
IAA62YU = true;
}
}
}

protected final void initIAA63(String s) {
if (!s.trim().isEmpty()) {
IAA63 = Short.parseShort(s);
} else {
IAA63 = Short.MIN_VALUE;
}
}

protected final void initIAA63FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FE = false;
} else {
IAA63FE = true;
}
}
}

protected final void initIAA63FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FL = false;
} else {
IAA63FL = true;
}
}
}

protected final void initIAA63FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FR = false;
} else {
IAA63FR = true;
}
}
}

protected final void initIAA63FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FU = false;
} else {
IAA63FU = true;
}
}
}

protected final void initIAA63ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63ME = false;
} else {
IAA63ME = true;
}
}
}

protected final void initIAA63ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63ML = false;
} else {
IAA63ML = true;
}
}
}

protected final void initIAA63MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63MR = false;
} else {
IAA63MR = true;
}
}
}

protected final void initIAA63MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63MU = false;
} else {
IAA63MU = true;
}
}
}

protected final void initIAA63OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OE = false;
} else {
IAA63OE = true;
}
}
}

protected final void initIAA63OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OL = false;
} else {
IAA63OL = true;
}
}
}

protected final void initIAA63OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OR = false;
} else {
IAA63OR = true;
}
}
}

protected final void initIAA63OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OU = false;
} else {
IAA63OU = true;
}
}
}

protected final void initIAA63WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WE = false;
} else {
IAA63WE = true;
}
}
}

protected final void initIAA63WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WL = false;
} else {
IAA63WL = true;
}
}
}

protected final void initIAA63WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WR = false;
} else {
IAA63WR = true;
}
}
}

protected final void initIAA63WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WU = false;
} else {
IAA63WU = true;
}
}
}

protected final void initIAA63YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YE = false;
} else {
IAA63YE = true;
}
}
}

protected final void initIAA63YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YL = false;
} else {
IAA63YL = true;
}
}
}

protected final void initIAA63YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YR = false;
} else {
IAA63YR = true;
}
}
}

protected final void initIAA63YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YU = false;
} else {
IAA63YU = true;
}
}
}

protected final void initIAA64(String s) {
if (!s.trim().isEmpty()) {
IAA64 = Short.parseShort(s);
} else {
IAA64 = Short.MIN_VALUE;
}
}

protected final void initIAA64FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FE = false;
} else {
IAA64FE = true;
}
}
}

protected final void initIAA64FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FL = false;
} else {
IAA64FL = true;
}
}
}

protected final void initIAA64FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FR = false;
} else {
IAA64FR = true;
}
}
}

protected final void initIAA64FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FU = false;
} else {
IAA64FU = true;
}
}
}

protected final void initIAA64ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64ME = false;
} else {
IAA64ME = true;
}
}
}

protected final void initIAA64ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64ML = false;
} else {
IAA64ML = true;
}
}
}

protected final void initIAA64MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64MR = false;
} else {
IAA64MR = true;
}
}
}

protected final void initIAA64MU(String s) {
if (!s.trim().isEmpty()) {
IAA64MU = Short.parseShort(s);
} else {
IAA64MU = Short.MIN_VALUE;
}
}

protected final void initIAA64OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64OE = false;
} else {
IAA64OE = true;
}
}
}

protected final void initIAA64OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64OL = false;
} else {
IAA64OL = true;
}
}
}

protected final void initIAA64OR(String s) {
if (!s.trim().isEmpty()) {
IAA64OR = Byte.parseByte(s);
} else {
IAA64OR = Byte.MIN_VALUE;
}
}

protected final void initIAA64OU(String s) {
if (!s.trim().isEmpty()) {
IAA64OU = Short.parseShort(s);
} else {
IAA64OU = Short.MIN_VALUE;
}
}

protected final void initIAA64WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64WE = false;
} else {
IAA64WE = true;
}
}
}

protected final void initIAA64WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64WL = false;
} else {
IAA64WL = true;
}
}
}

protected final void initIAA64WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64WR = false;
} else {
IAA64WR = true;
}
}
}

protected final void initIAA64WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64WU = false;
} else {
IAA64WU = true;
}
}
}

protected final void initIAA64YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YE = false;
} else {
IAA64YE = true;
}
}
}

protected final void initIAA64YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YL = false;
} else {
IAA64YL = true;
}
}
}

protected final void initIAA64YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YR = false;
} else {
IAA64YR = true;
}
}
}

protected final void initIAA64YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YU = false;
} else {
IAA64YU = true;
}
}
}

protected final void initIAA65(String s) {
if (!s.trim().isEmpty()) {
IAA65 = Short.parseShort(s);
} else {
IAA65 = Short.MIN_VALUE;
}
}

protected final void initIAA65FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FE = false;
} else {
IAA65FE = true;
}
}
}

protected final void initIAA65FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FL = false;
} else {
IAA65FL = true;
}
}
}

protected final void initIAA65FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FR = false;
} else {
IAA65FR = true;
}
}
}

protected final void initIAA65FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FU = false;
} else {
IAA65FU = true;
}
}
}

protected final void initIAA65ME(String s) {
if (!s.trim().isEmpty()) {
IAA65ME = Byte.parseByte(s);
} else {
IAA65ME = Byte.MIN_VALUE;
}
}

protected final void initIAA65ML(String s) {
if (!s.trim().isEmpty()) {
IAA65ML = Short.parseShort(s);
} else {
IAA65ML = Short.MIN_VALUE;
}
}

protected final void initIAA65MR(String s) {
if (!s.trim().isEmpty()) {
IAA65MR = Byte.parseByte(s);
} else {
IAA65MR = Byte.MIN_VALUE;
}
}

protected final void initIAA65MU(String s) {
if (!s.trim().isEmpty()) {
IAA65MU = Short.parseShort(s);
} else {
IAA65MU = Short.MIN_VALUE;
}
}

protected final void initIAA65OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65OE = false;
} else {
IAA65OE = true;
}
}
}

protected final void initIAA65OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65OL = false;
} else {
IAA65OL = true;
}
}
}

protected final void initIAA65OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65OR = false;
} else {
IAA65OR = true;
}
}
}

protected final void initIAA65OU(String s) {
if (!s.trim().isEmpty()) {
IAA65OU = Short.parseShort(s);
} else {
IAA65OU = Short.MIN_VALUE;
}
}

protected final void initIAA65WE(String s) {
if (!s.trim().isEmpty()) {
IAA65WE = Byte.parseByte(s);
} else {
IAA65WE = Byte.MIN_VALUE;
}
}

protected final void initIAA65WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65WL = false;
} else {
IAA65WL = true;
}
}
}

protected final void initIAA65WR(String s) {
if (!s.trim().isEmpty()) {
IAA65WR = Byte.parseByte(s);
} else {
IAA65WR = Byte.MIN_VALUE;
}
}

protected final void initIAA65WU(String s) {
if (!s.trim().isEmpty()) {
IAA65WU = Byte.parseByte(s);
} else {
IAA65WU = Byte.MIN_VALUE;
}
}

protected final void initIAA65YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YE = false;
} else {
IAA65YE = true;
}
}
}

protected final void initIAA65YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YL = false;
} else {
IAA65YL = true;
}
}
}

protected final void initIAA65YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YR = false;
} else {
IAA65YR = true;
}
}
}

protected final void initIAA65YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YU = false;
} else {
IAA65YU = true;
}
}
}

protected final void initIAA66(String s) {
if (!s.trim().isEmpty()) {
IAA66 = Short.parseShort(s);
} else {
IAA66 = Short.MIN_VALUE;
}
}

protected final void initIAA66FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FE = false;
} else {
IAA66FE = true;
}
}
}

protected final void initIAA66FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FL = false;
} else {
IAA66FL = true;
}
}
}

protected final void initIAA66FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FR = false;
} else {
IAA66FR = true;
}
}
}

protected final void initIAA66FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FU = false;
} else {
IAA66FU = true;
}
}
}

protected final void initIAA66ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66ME = false;
} else {
IAA66ME = true;
}
}
}

protected final void initIAA66ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66ML = false;
} else {
IAA66ML = true;
}
}
}

protected final void initIAA66MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66MR = false;
} else {
IAA66MR = true;
}
}
}

protected final void initIAA66MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66MU = false;
} else {
IAA66MU = true;
}
}
}

protected final void initIAA66OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66OE = false;
} else {
IAA66OE = true;
}
}
}

protected final void initIAA66OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA66OL = false;
} else {
IAA66OL = true;
}
}
}

protected final void initIAA66OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66OR = false;
} else {
IAA66OR = true;
}
}
}

protected final void initIAA66OU(String s) {
if (!s.trim().isEmpty()) {
IAA66OU = Short.parseShort(s);
} else {
IAA66OU = Short.MIN_VALUE;
}
}

protected final void initIAA66WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WE = false;
} else {
IAA66WE = true;
}
}
}

protected final void initIAA66WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WL = false;
} else {
IAA66WL = true;
}
}
}

protected final void initIAA66WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WR = false;
} else {
IAA66WR = true;
}
}
}

protected final void initIAA66WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WU = false;
} else {
IAA66WU = true;
}
}
}

protected final void initIAA66YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YE = false;
} else {
IAA66YE = true;
}
}
}

protected final void initIAA66YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YL = false;
} else {
IAA66YL = true;
}
}
}

protected final void initIAA66YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YR = false;
} else {
IAA66YR = true;
}
}
}

protected final void initIAA66YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YU = false;
} else {
IAA66YU = true;
}
}
}

protected final void initIAA67(String s) {
if (!s.trim().isEmpty()) {
IAA67 = Byte.parseByte(s);
} else {
IAA67 = Byte.MIN_VALUE;
}
}

protected final void initIAA67FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67FE = false;
} else {
IAA67FE = true;
}
}
}

protected final void initIAA67FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67FL = false;
} else {
IAA67FL = true;
}
}
}

protected final void initIAA67FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67FR = false;
} else {
IAA67FR = true;
}
}
}

protected final void initIAA67FU(String s) {
if (!s.trim().isEmpty()) {
IAA67FU = Short.parseShort(s);
} else {
IAA67FU = Short.MIN_VALUE;
}
}

protected final void initIAA67ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67ME = false;
} else {
IAA67ME = true;
}
}
}

protected final void initIAA67ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67ML = false;
} else {
IAA67ML = true;
}
}
}

protected final void initIAA67MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67MR = false;
} else {
IAA67MR = true;
}
}
}

protected final void initIAA67MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67MU = false;
} else {
IAA67MU = true;
}
}
}

protected final void initIAA67OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67OE = false;
} else {
IAA67OE = true;
}
}
}

protected final void initIAA67OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67OL = false;
} else {
IAA67OL = true;
}
}
}

protected final void initIAA67OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67OR = false;
} else {
IAA67OR = true;
}
}
}

protected final void initIAA67OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67OU = false;
} else {
IAA67OU = true;
}
}
}

protected final void initIAA67WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67WE = false;
} else {
IAA67WE = true;
}
}
}

protected final void initIAA67WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA67WL = false;
} else {
IAA67WL = true;
}
}
}

protected final void initIAA67WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67WR = false;
} else {
IAA67WR = true;
}
}
}

protected final void initIAA67WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA67WU = false;
} else {
IAA67WU = true;
}
}
}

protected final void initIAA67YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YE = false;
} else {
IAA67YE = true;
}
}
}

protected final void initIAA67YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YL = false;
} else {
IAA67YL = true;
}
}
}

protected final void initIAA67YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YR = false;
} else {
IAA67YR = true;
}
}
}

protected final void initIAA67YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YU = false;
} else {
IAA67YU = true;
}
}
}

protected final void initIAA68(String s) {
if (!s.trim().isEmpty()) {
IAA68 = Short.parseShort(s);
} else {
IAA68 = Short.MIN_VALUE;
}
}

protected final void initIAA68FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FE = false;
} else {
IAA68FE = true;
}
}
}

protected final void initIAA68FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FL = false;
} else {
IAA68FL = true;
}
}
}

protected final void initIAA68FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FR = false;
} else {
IAA68FR = true;
}
}
}

protected final void initIAA68FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FU = false;
} else {
IAA68FU = true;
}
}
}

protected final void initIAA68ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68ME = false;
} else {
IAA68ME = true;
}
}
}

protected final void initIAA68ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68ML = false;
} else {
IAA68ML = true;
}
}
}

protected final void initIAA68MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68MR = false;
} else {
IAA68MR = true;
}
}
}

protected final void initIAA68MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68MU = false;
} else {
IAA68MU = true;
}
}
}

protected final void initIAA68OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OE = false;
} else {
IAA68OE = true;
}
}
}

protected final void initIAA68OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OL = false;
} else {
IAA68OL = true;
}
}
}

protected final void initIAA68OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OR = false;
} else {
IAA68OR = true;
}
}
}

protected final void initIAA68OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OU = false;
} else {
IAA68OU = true;
}
}
}

protected final void initIAA68WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WE = false;
} else {
IAA68WE = true;
}
}
}

protected final void initIAA68WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WL = false;
} else {
IAA68WL = true;
}
}
}

protected final void initIAA68WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WR = false;
} else {
IAA68WR = true;
}
}
}

protected final void initIAA68WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WU = false;
} else {
IAA68WU = true;
}
}
}

protected final void initIAA68YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YE = false;
} else {
IAA68YE = true;
}
}
}

protected final void initIAA68YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YL = false;
} else {
IAA68YL = true;
}
}
}

protected final void initIAA68YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YR = false;
} else {
IAA68YR = true;
}
}
}

protected final void initIAA68YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YU = false;
} else {
IAA68YU = true;
}
}
}

protected final void initIAA69(String s) {
if (!s.trim().isEmpty()) {
IAA69 = Short.parseShort(s);
} else {
IAA69 = Short.MIN_VALUE;
}
}

protected final void initIAA69FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69FE = false;
} else {
IAA69FE = true;
}
}
}

protected final void initIAA69FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69FL = false;
} else {
IAA69FL = true;
}
}
}

protected final void initIAA69FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69FR = false;
} else {
IAA69FR = true;
}
}
}

protected final void initIAA69FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69FU = false;
} else {
IAA69FU = true;
}
}
}

protected final void initIAA69ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69ME = false;
} else {
IAA69ME = true;
}
}
}

protected final void initIAA69ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69ML = false;
} else {
IAA69ML = true;
}
}
}

protected final void initIAA69MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69MR = false;
} else {
IAA69MR = true;
}
}
}

protected final void initIAA69MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69MU = false;
} else {
IAA69MU = true;
}
}
}

protected final void initIAA69OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69OE = false;
} else {
IAA69OE = true;
}
}
}

protected final void initIAA69OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69OL = false;
} else {
IAA69OL = true;
}
}
}

protected final void initIAA69OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69OR = false;
} else {
IAA69OR = true;
}
}
}

protected final void initIAA69OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69OU = false;
} else {
IAA69OU = true;
}
}
}

protected final void initIAA69WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69WE = false;
} else {
IAA69WE = true;
}
}
}

protected final void initIAA69WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69WL = false;
} else {
IAA69WL = true;
}
}
}

protected final void initIAA69WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69WR = false;
} else {
IAA69WR = true;
}
}
}

protected final void initIAA69WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69WU = false;
} else {
IAA69WU = true;
}
}
}

protected final void initIAA69YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69YE = false;
} else {
IAA69YE = true;
}
}
}

protected final void initIAA69YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69YL = false;
} else {
IAA69YL = true;
}
}
}

protected final void initIAA69YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69YR = false;
} else {
IAA69YR = true;
}
}
}

protected final void initIAA69YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69YU = false;
} else {
IAA69YU = true;
}
}
}

protected final void initIAA70(String s) {
if (!s.trim().isEmpty()) {
IAA70 = Short.parseShort(s);
} else {
IAA70 = Short.MIN_VALUE;
}
}

protected final void initIAA70FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70FE = false;
} else {
IAA70FE = true;
}
}
}

protected final void initIAA70FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70FL = false;
} else {
IAA70FL = true;
}
}
}

protected final void initIAA70FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70FR = false;
} else {
IAA70FR = true;
}
}
}

protected final void initIAA70FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70FU = false;
} else {
IAA70FU = true;
}
}
}

protected final void initIAA70ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70ME = false;
} else {
IAA70ME = true;
}
}
}

protected final void initIAA70ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70ML = false;
} else {
IAA70ML = true;
}
}
}

protected final void initIAA70MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70MR = false;
} else {
IAA70MR = true;
}
}
}

protected final void initIAA70MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70MU = false;
} else {
IAA70MU = true;
}
}
}

protected final void initIAA70OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70OE = false;
} else {
IAA70OE = true;
}
}
}

protected final void initIAA70OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70OL = false;
} else {
IAA70OL = true;
}
}
}

protected final void initIAA70OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70OR = false;
} else {
IAA70OR = true;
}
}
}

protected final void initIAA70OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70OU = false;
} else {
IAA70OU = true;
}
}
}

protected final void initIAA70WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70WE = false;
} else {
IAA70WE = true;
}
}
}

protected final void initIAA70WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70WL = false;
} else {
IAA70WL = true;
}
}
}

protected final void initIAA70WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70WR = false;
} else {
IAA70WR = true;
}
}
}

protected final void initIAA70WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70WU = false;
} else {
IAA70WU = true;
}
}
}

protected final void initIAA70YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70YE = false;
} else {
IAA70YE = true;
}
}
}

protected final void initIAA70YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70YL = false;
} else {
IAA70YL = true;
}
}
}

protected final void initIAA70YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70YR = false;
} else {
IAA70YR = true;
}
}
}

protected final void initIAA70YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70YU = false;
} else {
IAA70YU = true;
}
}
}

protected final void initIAA71(String s) {
if (!s.trim().isEmpty()) {
IAA71 = Short.parseShort(s);
} else {
IAA71 = Short.MIN_VALUE;
}
}

protected final void initIAA71FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71FE = false;
} else {
IAA71FE = true;
}
}
}

protected final void initIAA71FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71FL = false;
} else {
IAA71FL = true;
}
}
}

protected final void initIAA71FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71FR = false;
} else {
IAA71FR = true;
}
}
}

protected final void initIAA71FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71FU = false;
} else {
IAA71FU = true;
}
}
}

protected final void initIAA71ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71ME = false;
} else {
IAA71ME = true;
}
}
}

protected final void initIAA71ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA71ML = false;
} else {
IAA71ML = true;
}
}
}

protected final void initIAA71MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71MR = false;
} else {
IAA71MR = true;
}
}
}

protected final void initIAA71MU(String s) {
if (!s.trim().isEmpty()) {
IAA71MU = Short.parseShort(s);
} else {
IAA71MU = Short.MIN_VALUE;
}
}

protected final void initIAA71OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71OE = false;
} else {
IAA71OE = true;
}
}
}

protected final void initIAA71OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA71OL = false;
} else {
IAA71OL = true;
}
}
}

protected final void initIAA71OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71OR = false;
} else {
IAA71OR = true;
}
}
}

protected final void initIAA71OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA71OU = false;
} else {
IAA71OU = true;
}
}
}

protected final void initIAA71WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71WE = false;
} else {
IAA71WE = true;
}
}
}

protected final void initIAA71WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71WL = false;
} else {
IAA71WL = true;
}
}
}

protected final void initIAA71WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71WR = false;
} else {
IAA71WR = true;
}
}
}

protected final void initIAA71WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71WU = false;
} else {
IAA71WU = true;
}
}
}

protected final void initIAA71YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71YE = false;
} else {
IAA71YE = true;
}
}
}

protected final void initIAA71YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71YL = false;
} else {
IAA71YL = true;
}
}
}

protected final void initIAA71YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71YR = false;
} else {
IAA71YR = true;
}
}
}

protected final void initIAA71YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71YU = false;
} else {
IAA71YU = true;
}
}
}

protected final void initIAA72(String s) {
if (!s.trim().isEmpty()) {
IAA72 = Byte.parseByte(s);
} else {
IAA72 = Byte.MIN_VALUE;
}
}

protected final void initIAA72FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72FE = false;
} else {
IAA72FE = true;
}
}
}

protected final void initIAA72FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72FL = false;
} else {
IAA72FL = true;
}
}
}

protected final void initIAA72FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72FR = false;
} else {
IAA72FR = true;
}
}
}

protected final void initIAA72FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72FU = false;
} else {
IAA72FU = true;
}
}
}

protected final void initIAA72ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72ME = false;
} else {
IAA72ME = true;
}
}
}

protected final void initIAA72ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72ML = false;
} else {
IAA72ML = true;
}
}
}

protected final void initIAA72MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72MR = false;
} else {
IAA72MR = true;
}
}
}

protected final void initIAA72MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72MU = false;
} else {
IAA72MU = true;
}
}
}

protected final void initIAA72OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72OE = false;
} else {
IAA72OE = true;
}
}
}

protected final void initIAA72OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72OL = false;
} else {
IAA72OL = true;
}
}
}

protected final void initIAA72OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72OR = false;
} else {
IAA72OR = true;
}
}
}

protected final void initIAA72OU(String s) {
if (!s.trim().isEmpty()) {
IAA72OU = Short.parseShort(s);
} else {
IAA72OU = Short.MIN_VALUE;
}
}

protected final void initIAA72WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72WE = false;
} else {
IAA72WE = true;
}
}
}

protected final void initIAA72WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72WL = false;
} else {
IAA72WL = true;
}
}
}

protected final void initIAA72WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72WR = false;
} else {
IAA72WR = true;
}
}
}

protected final void initIAA72WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72WU = false;
} else {
IAA72WU = true;
}
}
}

protected final void initIAA72YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72YE = false;
} else {
IAA72YE = true;
}
}
}

protected final void initIAA72YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72YL = false;
} else {
IAA72YL = true;
}
}
}

protected final void initIAA72YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72YR = false;
} else {
IAA72YR = true;
}
}
}

protected final void initIAA72YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72YU = false;
} else {
IAA72YU = true;
}
}
}

protected final void initIAAIPE(String s) {
if (!s.trim().isEmpty()) {
IAAIPE = Byte.parseByte(s);
} else {
IAAIPE = Byte.MIN_VALUE;
}
}

protected final void initIAAIPL(String s) {
if (!s.trim().isEmpty()) {
IAAIPL = Short.parseShort(s);
} else {
IAAIPL = Short.MIN_VALUE;
}
}

protected final void initIAAIPR(String s) {
if (!s.trim().isEmpty()) {
IAAIPR = Byte.parseByte(s);
} else {
IAAIPR = Byte.MIN_VALUE;
}
}

protected final void initIAAIPU(String s) {
if (!s.trim().isEmpty()) {
IAAIPU = Short.parseShort(s);
} else {
IAAIPU = Short.MIN_VALUE;
}
}

protected final void initIAB10(String s) {
if (!s.trim().isEmpty()) {
IAB10 = Byte.parseByte(s);
} else {
IAB10 = Byte.MIN_VALUE;
}
}

protected final void initIAB11(String s) {
if (!s.trim().isEmpty()) {
IAB11 = Byte.parseByte(s);
} else {
IAB11 = Byte.MIN_VALUE;
}
}

protected final void initIAB12(String s) {
if (!s.trim().isEmpty()) {
IAB12 = Byte.parseByte(s);
} else {
IAB12 = Byte.MIN_VALUE;
}
}

protected final void initIAB13(String s) {
if (!s.trim().isEmpty()) {
IAB13 = Byte.parseByte(s);
} else {
IAB13 = Byte.MIN_VALUE;
}
}

protected final void initIAB14(String s) {
if (!s.trim().isEmpty()) {
IAB14 = Byte.parseByte(s);
} else {
IAB14 = Byte.MIN_VALUE;
}
}

protected final void initIAB15(String s) {
if (!s.trim().isEmpty()) {
IAB15 = Byte.parseByte(s);
} else {
IAB15 = Byte.MIN_VALUE;
}
}

protected final void initIAB16(String s) {
if (!s.trim().isEmpty()) {
IAB16 = Byte.parseByte(s);
} else {
IAB16 = Byte.MIN_VALUE;
}
}

protected final void initIAB17(String s) {
if (!s.trim().isEmpty()) {
IAB17 = Byte.parseByte(s);
} else {
IAB17 = Byte.MIN_VALUE;
}
}

protected final void initIAB18(String s) {
if (!s.trim().isEmpty()) {
IAB18 = Byte.parseByte(s);
} else {
IAB18 = Byte.MIN_VALUE;
}
}

protected final void initIAB28(String s) {
if (!s.trim().isEmpty()) {
IAB28 = Byte.parseByte(s);
} else {
IAB28 = Byte.MIN_VALUE;
}
}

protected final void initIAB29(String s) {
if (!s.trim().isEmpty()) {
IAB29 = Byte.parseByte(s);
} else {
IAB29 = Byte.MIN_VALUE;
}
}

protected final void initIAB30(String s) {
if (!s.trim().isEmpty()) {
IAB30 = Byte.parseByte(s);
} else {
IAB30 = Byte.MIN_VALUE;
}
}

protected final void initIAB31(String s) {
if (!s.trim().isEmpty()) {
IAB31 = Byte.parseByte(s);
} else {
IAB31 = Byte.MIN_VALUE;
}
}

protected final void initIAB32(String s) {
if (!s.trim().isEmpty()) {
IAB32 = Byte.parseByte(s);
} else {
IAB32 = Byte.MIN_VALUE;
}
}

protected final void initIAB33(String s) {
if (!s.trim().isEmpty()) {
IAB33 = Byte.parseByte(s);
} else {
IAB33 = Byte.MIN_VALUE;
}
}

protected final void initIAB34(String s) {
if (!s.trim().isEmpty()) {
IAB34 = Byte.parseByte(s);
} else {
IAB34 = Byte.MIN_VALUE;
}
}

protected final void initIAB35(String s) {
if (!s.trim().isEmpty()) {
IAB35 = Byte.parseByte(s);
} else {
IAB35 = Byte.MIN_VALUE;
}
}

protected final void initIAB36(String s) {
if (!s.trim().isEmpty()) {
IAB36 = Byte.parseByte(s);
} else {
IAB36 = Byte.MIN_VALUE;
}
}

protected final void initIAB46(String s) {
if (!s.trim().isEmpty()) {
IAB46 = Byte.parseByte(s);
} else {
IAB46 = Byte.MIN_VALUE;
}
}

protected final void initIAB47(String s) {
if (!s.trim().isEmpty()) {
IAB47 = Byte.parseByte(s);
} else {
IAB47 = Byte.MIN_VALUE;
}
}

protected final void initIAB48(String s) {
if (!s.trim().isEmpty()) {
IAB48 = Byte.parseByte(s);
} else {
IAB48 = Byte.MIN_VALUE;
}
}

protected final void initIAB49(String s) {
if (!s.trim().isEmpty()) {
IAB49 = Byte.parseByte(s);
} else {
IAB49 = Byte.MIN_VALUE;
}
}

protected final void initIAB50(String s) {
if (!s.trim().isEmpty()) {
IAB50 = Byte.parseByte(s);
} else {
IAB50 = Byte.MIN_VALUE;
}
}

protected final void initIAB51(String s) {
if (!s.trim().isEmpty()) {
IAB51 = Byte.parseByte(s);
} else {
IAB51 = Byte.MIN_VALUE;
}
}

protected final void initIAB52(String s) {
if (!s.trim().isEmpty()) {
IAB52 = Byte.parseByte(s);
} else {
IAB52 = Byte.MIN_VALUE;
}
}

protected final void initIAB53(String s) {
if (!s.trim().isEmpty()) {
IAB53 = Byte.parseByte(s);
} else {
IAB53 = Byte.MIN_VALUE;
}
}

protected final void initIAB54(String s) {
if (!s.trim().isEmpty()) {
IAB54 = Byte.parseByte(s);
} else {
IAB54 = Byte.MIN_VALUE;
}
}

protected final void initIAB64(String s) {
if (!s.trim().isEmpty()) {
IAB64 = Byte.parseByte(s);
} else {
IAB64 = Byte.MIN_VALUE;
}
}

protected final void initIAB65(String s) {
if (!s.trim().isEmpty()) {
IAB65 = Byte.parseByte(s);
} else {
IAB65 = Byte.MIN_VALUE;
}
}

protected final void initIAB66(String s) {
if (!s.trim().isEmpty()) {
IAB66 = Byte.parseByte(s);
} else {
IAB66 = Byte.MIN_VALUE;
}
}

protected final void initIAB67(String s) {
if (!s.trim().isEmpty()) {
IAB67 = Byte.parseByte(s);
} else {
IAB67 = Byte.MIN_VALUE;
}
}

protected final void initIAB68(String s) {
if (!s.trim().isEmpty()) {
IAB68 = Byte.parseByte(s);
} else {
IAB68 = Byte.MIN_VALUE;
}
}

protected final void initIAB69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAB69 = false;
} else {
IAB69 = true;
}
}
}

protected final void initIAB70(String s) {
if (!s.trim().isEmpty()) {
IAB70 = Byte.parseByte(s);
} else {
IAB70 = Byte.MIN_VALUE;
}
}

protected final void initIAB71(String s) {
if (!s.trim().isEmpty()) {
IAB71 = Byte.parseByte(s);
} else {
IAB71 = Byte.MIN_VALUE;
}
}

protected final void initIAB72(String s) {
if (!s.trim().isEmpty()) {
IAB72 = Byte.parseByte(s);
} else {
IAB72 = Byte.MIN_VALUE;
}
}

protected final void initIABEB(String s) {
if (!s.trim().isEmpty()) {
IABEB = Byte.parseByte(s);
} else {
IABEB = Byte.MIN_VALUE;
}
}

protected final void initIABEN95(String s) {
if (!s.trim().isEmpty()) {
IABEN95 = Byte.parseByte(s);
} else {
IABEN95 = Byte.MIN_VALUE;
}
}

protected final void initIABEN96(String s) {
if (!s.trim().isEmpty()) {
IABEN96 = Byte.parseByte(s);
} else {
IABEN96 = Byte.MIN_VALUE;
}
}

protected final void initIABENCB(String s) {
if (!s.trim().isEmpty()) {
IABENCB = Byte.parseByte(s);
} else {
IABENCB = Byte.MIN_VALUE;
}
}

protected final void initIABENCC(String s) {
if (!s.trim().isEmpty()) {
IABENCC = Byte.parseByte(s);
} else {
IABENCC = Byte.MIN_VALUE;
}
}

protected final void initIABENGA(String s) {
if (!s.trim().isEmpty()) {
IABENGA = Byte.parseByte(s);
} else {
IABENGA = Byte.MIN_VALUE;
}
}

protected final void initIABENIS(String s) {
if (!s.trim().isEmpty()) {
IABENIS = Byte.parseByte(s);
} else {
IABENIS = Byte.MIN_VALUE;
}
}

protected final void initIABENJA(String s) {
if (!s.trim().isEmpty()) {
IABENJA = Byte.parseByte(s);
} else {
IABENJA = Byte.MIN_VALUE;
}
}

protected final void initIABENPC(String s) {
if (!s.trim().isEmpty()) {
IABENPC = Byte.parseByte(s);
} else {
IABENPC = Byte.MIN_VALUE;
}
}

protected final void initIABENTC(String s) {
if (!s.trim().isEmpty()) {
IABENTC = Byte.parseByte(s);
} else {
IABENTC = Byte.MIN_VALUE;
}
}

protected final void initIABENWP(String s) {
if (!s.trim().isEmpty()) {
IABENWP = Byte.parseByte(s);
} else {
IABENWP = Byte.MIN_VALUE;
}
}

protected final void initIABEP95(String s) {
if (!s.trim().isEmpty()) {
IABEP95 = Byte.parseByte(s);
} else {
IABEP95 = Byte.MIN_VALUE;
}
}

protected final void initIABEP96(String s) {
if (!s.trim().isEmpty()) {
IABEP96 = Byte.parseByte(s);
} else {
IABEP96 = Byte.MIN_VALUE;
}
}

protected final void initIABEPCB(String s) {
if (!s.trim().isEmpty()) {
IABEPCB = Byte.parseByte(s);
} else {
IABEPCB = Byte.MIN_VALUE;
}
}

protected final void initIABEPCC(String s) {
if (!s.trim().isEmpty()) {
IABEPCC = Byte.parseByte(s);
} else {
IABEPCC = Byte.MIN_VALUE;
}
}

protected final void initIABEPGA(String s) {
if (!s.trim().isEmpty()) {
IABEPGA = Byte.parseByte(s);
} else {
IABEPGA = Byte.MIN_VALUE;
}
}

protected final void initIABEPIS(String s) {
if (!s.trim().isEmpty()) {
IABEPIS = Byte.parseByte(s);
} else {
IABEPIS = Byte.MIN_VALUE;
}
}

protected final void initIABEPJA(String s) {
if (!s.trim().isEmpty()) {
IABEPJA = Byte.parseByte(s);
} else {
IABEPJA = Byte.MIN_VALUE;
}
}

protected final void initIABEPM85(String s) {
if (!s.trim().isEmpty()) {
IABEPM85 = Byte.parseByte(s);
} else {
IABEPM85 = Byte.MIN_VALUE;
}
}

protected final void initIABEPM86(String s) {
if (!s.trim().isEmpty()) {
IABEPM86 = Byte.parseByte(s);
} else {
IABEPM86 = Byte.MIN_VALUE;
}
}

protected final void initIABEPM96(String s) {
if (!s.trim().isEmpty()) {
IABEPM96 = Byte.parseByte(s);
} else {
IABEPM96 = Byte.MIN_VALUE;
}
}

protected final void initIABEPMCB(String s) {
if (!s.trim().isEmpty()) {
IABEPMCB = Byte.parseByte(s);
} else {
IABEPMCB = Byte.MIN_VALUE;
}
}

protected final void initIABEPMCC(String s) {
if (!s.trim().isEmpty()) {
IABEPMCC = Byte.parseByte(s);
} else {
IABEPMCC = Byte.MIN_VALUE;
}
}

protected final void initIABEPMFP(String s) {
if (!s.trim().isEmpty()) {
IABEPMFP = Byte.parseByte(s);
} else {
IABEPMFP = Byte.MIN_VALUE;
}
}

protected final void initIABEPMGA(String s) {
if (!s.trim().isEmpty()) {
IABEPMGA = Byte.parseByte(s);
} else {
IABEPMGA = Byte.MIN_VALUE;
}
}

protected final void initIABEPMIS(String s) {
if (!s.trim().isEmpty()) {
IABEPMIS = Byte.parseByte(s);
} else {
IABEPMIS = Byte.MIN_VALUE;
}
}

protected final void initIABEPMJA(String s) {
if (!s.trim().isEmpty()) {
IABEPMJA = Byte.parseByte(s);
} else {
IABEPMJA = Byte.MIN_VALUE;
}
}

protected final void initIABEPMPC(String s) {
if (!s.trim().isEmpty()) {
IABEPMPC = Byte.parseByte(s);
} else {
IABEPMPC = Byte.MIN_VALUE;
}
}

protected final void initIABEPMTC(String s) {
if (!s.trim().isEmpty()) {
IABEPMTC = Byte.parseByte(s);
} else {
IABEPMTC = Byte.MIN_VALUE;
}
}

protected final void initIABEPMWP(String s) {
if (!s.trim().isEmpty()) {
IABEPMWP = Byte.parseByte(s);
} else {
IABEPMWP = Byte.MIN_VALUE;
}
}

protected final void initIABEPN95(String s) {
if (!s.trim().isEmpty()) {
IABEPN95 = Byte.parseByte(s);
} else {
IABEPN95 = Byte.MIN_VALUE;
}
}

protected final void initIABEPN96(String s) {
if (!s.trim().isEmpty()) {
IABEPN96 = Byte.parseByte(s);
} else {
IABEPN96 = Byte.MIN_VALUE;
}
}

protected final void initIABEPNCB(String s) {
if (!s.trim().isEmpty()) {
IABEPNCB = Byte.parseByte(s);
} else {
IABEPNCB = Byte.MIN_VALUE;
}
}

protected final void initIABEPNCC(String s) {
if (!s.trim().isEmpty()) {
IABEPNCC = Byte.parseByte(s);
} else {
IABEPNCC = Byte.MIN_VALUE;
}
}

protected final void initIABEPNGA(String s) {
if (!s.trim().isEmpty()) {
IABEPNGA = Byte.parseByte(s);
} else {
IABEPNGA = Byte.MIN_VALUE;
}
}

protected final void initIABEPNIS(String s) {
if (!s.trim().isEmpty()) {
IABEPNIS = Byte.parseByte(s);
} else {
IABEPNIS = Byte.MIN_VALUE;
}
}

protected final void initIABEPNJA(String s) {
if (!s.trim().isEmpty()) {
IABEPNJA = Byte.parseByte(s);
} else {
IABEPNJA = Byte.MIN_VALUE;
}
}

protected final void initIABEPNPC(String s) {
if (!s.trim().isEmpty()) {
IABEPNPC = Byte.parseByte(s);
} else {
IABEPNPC = Byte.MIN_VALUE;
}
}

protected final void initIABEPNWC(String s) {
if (!s.trim().isEmpty()) {
IABEPNWC = Byte.parseByte(s);
} else {
IABEPNWC = Byte.MIN_VALUE;
}
}

protected final void initIABEPNWP(String s) {
if (!s.trim().isEmpty()) {
IABEPNWP = Byte.parseByte(s);
} else {
IABEPNWP = Byte.MIN_VALUE;
}
}

protected final void initIABEPPC(String s) {
if (!s.trim().isEmpty()) {
IABEPPC = Byte.parseByte(s);
} else {
IABEPPC = Byte.MIN_VALUE;
}
}

protected final void initIABEPTC(String s) {
if (!s.trim().isEmpty()) {
IABEPTC = Byte.parseByte(s);
} else {
IABEPTC = Byte.MIN_VALUE;
}
}

protected final void initIABEPWP(String s) {
if (!s.trim().isEmpty()) {
IABEPWP = Byte.parseByte(s);
} else {
IABEPWP = Byte.MIN_VALUE;
}
}

protected final void initIABER95(String s) {
if (!s.trim().isEmpty()) {
IABER95 = Byte.parseByte(s);
} else {
IABER95 = Byte.MIN_VALUE;
}
}

protected final void initIABER96(String s) {
if (!s.trim().isEmpty()) {
IABER96 = Byte.parseByte(s);
} else {
IABER96 = Byte.MIN_VALUE;
}
}

protected final void initIABERCB(String s) {
if (!s.trim().isEmpty()) {
IABERCB = Byte.parseByte(s);
} else {
IABERCB = Byte.MIN_VALUE;
}
}

protected final void initIABERCC(String s) {
if (!s.trim().isEmpty()) {
IABERCC = Byte.parseByte(s);
} else {
IABERCC = Byte.MIN_VALUE;
}
}

protected final void initIABERGA(String s) {
if (!s.trim().isEmpty()) {
IABERGA = Byte.parseByte(s);
} else {
IABERGA = Byte.MIN_VALUE;
}
}

protected final void initIABERIS(String s) {
if (!s.trim().isEmpty()) {
IABERIS = Byte.parseByte(s);
} else {
IABERIS = Byte.MIN_VALUE;
}
}

protected final void initIABERJA(String s) {
if (!s.trim().isEmpty()) {
IABERJA = Byte.parseByte(s);
} else {
IABERJA = Byte.MIN_VALUE;
}
}

protected final void initIABERM85(String s) {
if (!s.trim().isEmpty()) {
IABERM85 = Byte.parseByte(s);
} else {
IABERM85 = Byte.MIN_VALUE;
}
}

protected final void initIABERM86(String s) {
if (!s.trim().isEmpty()) {
IABERM86 = Byte.parseByte(s);
} else {
IABERM86 = Byte.MIN_VALUE;
}
}

protected final void initIABERM96(String s) {
if (!s.trim().isEmpty()) {
IABERM96 = Byte.parseByte(s);
} else {
IABERM96 = Byte.MIN_VALUE;
}
}

protected final void initIABERMCB(String s) {
if (!s.trim().isEmpty()) {
IABERMCB = Byte.parseByte(s);
} else {
IABERMCB = Byte.MIN_VALUE;
}
}

protected final void initIABERMCC(String s) {
if (!s.trim().isEmpty()) {
IABERMCC = Byte.parseByte(s);
} else {
IABERMCC = Byte.MIN_VALUE;
}
}

protected final void initIABERMFP(String s) {
if (!s.trim().isEmpty()) {
IABERMFP = Byte.parseByte(s);
} else {
IABERMFP = Byte.MIN_VALUE;
}
}

protected final void initIABERMGA(String s) {
if (!s.trim().isEmpty()) {
IABERMGA = Byte.parseByte(s);
} else {
IABERMGA = Byte.MIN_VALUE;
}
}

protected final void initIABERMIS(String s) {
if (!s.trim().isEmpty()) {
IABERMIS = Byte.parseByte(s);
} else {
IABERMIS = Byte.MIN_VALUE;
}
}

protected final void initIABERMJA(String s) {
if (!s.trim().isEmpty()) {
IABERMJA = Byte.parseByte(s);
} else {
IABERMJA = Byte.MIN_VALUE;
}
}

protected final void initIABERMPC(String s) {
if (!s.trim().isEmpty()) {
IABERMPC = Byte.parseByte(s);
} else {
IABERMPC = Byte.MIN_VALUE;
}
}

protected final void initIABERMTC(String s) {
if (!s.trim().isEmpty()) {
IABERMTC = Byte.parseByte(s);
} else {
IABERMTC = Byte.MIN_VALUE;
}
}

protected final void initIABERMWP(String s) {
if (!s.trim().isEmpty()) {
IABERMWP = Byte.parseByte(s);
} else {
IABERMWP = Byte.MIN_VALUE;
}
}

protected final void initIABERPC(String s) {
if (!s.trim().isEmpty()) {
IABERPC = Byte.parseByte(s);
} else {
IABERPC = Byte.MIN_VALUE;
}
}

protected final void initIABERTC(String s) {
if (!s.trim().isEmpty()) {
IABERTC = Byte.parseByte(s);
} else {
IABERTC = Byte.MIN_VALUE;
}
}

protected final void initIABERWP(String s) {
if (!s.trim().isEmpty()) {
IABERWP = Byte.parseByte(s);
} else {
IABERWP = Byte.MIN_VALUE;
}
}

protected final void initIABM10(String s) {
if (!s.trim().isEmpty()) {
IABM10 = Byte.parseByte(s);
} else {
IABM10 = Byte.MIN_VALUE;
}
}

protected final void initIABM11(String s) {
if (!s.trim().isEmpty()) {
IABM11 = Byte.parseByte(s);
} else {
IABM11 = Byte.MIN_VALUE;
}
}

protected final void initIABM12(String s) {
if (!s.trim().isEmpty()) {
IABM12 = Byte.parseByte(s);
} else {
IABM12 = Byte.MIN_VALUE;
}
}

protected final void initIABM13(String s) {
if (!s.trim().isEmpty()) {
IABM13 = Byte.parseByte(s);
} else {
IABM13 = Byte.MIN_VALUE;
}
}

protected final void initIABM14(String s) {
if (!s.trim().isEmpty()) {
IABM14 = Byte.parseByte(s);
} else {
IABM14 = Byte.MIN_VALUE;
}
}

protected final void initIABM15(String s) {
if (!s.trim().isEmpty()) {
IABM15 = Byte.parseByte(s);
} else {
IABM15 = Byte.MIN_VALUE;
}
}

protected final void initIABM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM16 = false;
} else {
IABM16 = true;
}
}
}

protected final void initIABM17(String s) {
if (!s.trim().isEmpty()) {
IABM17 = Byte.parseByte(s);
} else {
IABM17 = Byte.MIN_VALUE;
}
}

protected final void initIABM18(String s) {
if (!s.trim().isEmpty()) {
IABM18 = Byte.parseByte(s);
} else {
IABM18 = Byte.MIN_VALUE;
}
}

protected final void initIABM28(String s) {
if (!s.trim().isEmpty()) {
IABM28 = Byte.parseByte(s);
} else {
IABM28 = Byte.MIN_VALUE;
}
}

protected final void initIABM29(String s) {
if (!s.trim().isEmpty()) {
IABM29 = Byte.parseByte(s);
} else {
IABM29 = Byte.MIN_VALUE;
}
}

protected final void initIABM30(String s) {
if (!s.trim().isEmpty()) {
IABM30 = Byte.parseByte(s);
} else {
IABM30 = Byte.MIN_VALUE;
}
}

protected final void initIABM31(String s) {
if (!s.trim().isEmpty()) {
IABM31 = Byte.parseByte(s);
} else {
IABM31 = Byte.MIN_VALUE;
}
}

protected final void initIABM32(String s) {
if (!s.trim().isEmpty()) {
IABM32 = Byte.parseByte(s);
} else {
IABM32 = Byte.MIN_VALUE;
}
}

protected final void initIABM33(String s) {
if (!s.trim().isEmpty()) {
IABM33 = Byte.parseByte(s);
} else {
IABM33 = Byte.MIN_VALUE;
}
}

protected final void initIABM34(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM34 = false;
} else {
IABM34 = true;
}
}
}

protected final void initIABM35(String s) {
if (!s.trim().isEmpty()) {
IABM35 = Byte.parseByte(s);
} else {
IABM35 = Byte.MIN_VALUE;
}
}

protected final void initIABM36(String s) {
if (!s.trim().isEmpty()) {
IABM36 = Byte.parseByte(s);
} else {
IABM36 = Byte.MIN_VALUE;
}
}

protected final void initIABM46(String s) {
if (!s.trim().isEmpty()) {
IABM46 = Byte.parseByte(s);
} else {
IABM46 = Byte.MIN_VALUE;
}
}

protected final void initIABM47(String s) {
if (!s.trim().isEmpty()) {
IABM47 = Byte.parseByte(s);
} else {
IABM47 = Byte.MIN_VALUE;
}
}

protected final void initIABM48(String s) {
if (!s.trim().isEmpty()) {
IABM48 = Byte.parseByte(s);
} else {
IABM48 = Byte.MIN_VALUE;
}
}

protected final void initIABM49(String s) {
if (!s.trim().isEmpty()) {
IABM49 = Byte.parseByte(s);
} else {
IABM49 = Byte.MIN_VALUE;
}
}

protected final void initIABM50(String s) {
if (!s.trim().isEmpty()) {
IABM50 = Byte.parseByte(s);
} else {
IABM50 = Byte.MIN_VALUE;
}
}

protected final void initIABM51(String s) {
if (!s.trim().isEmpty()) {
IABM51 = Byte.parseByte(s);
} else {
IABM51 = Byte.MIN_VALUE;
}
}

protected final void initIABM52(String s) {
if (!s.trim().isEmpty()) {
IABM52 = Byte.parseByte(s);
} else {
IABM52 = Byte.MIN_VALUE;
}
}

protected final void initIABM53(String s) {
if (!s.trim().isEmpty()) {
IABM53 = Byte.parseByte(s);
} else {
IABM53 = Byte.MIN_VALUE;
}
}

protected final void initIABM54(String s) {
if (!s.trim().isEmpty()) {
IABM54 = Byte.parseByte(s);
} else {
IABM54 = Byte.MIN_VALUE;
}
}

protected final void initIABM64(String s) {
if (!s.trim().isEmpty()) {
IABM64 = Byte.parseByte(s);
} else {
IABM64 = Byte.MIN_VALUE;
}
}

protected final void initIABM65(String s) {
if (!s.trim().isEmpty()) {
IABM65 = Byte.parseByte(s);
} else {
IABM65 = Byte.MIN_VALUE;
}
}

protected final void initIABM66(String s) {
if (!s.trim().isEmpty()) {
IABM66 = Byte.parseByte(s);
} else {
IABM66 = Byte.MIN_VALUE;
}
}

protected final void initIABM67(String s) {
if (!s.trim().isEmpty()) {
IABM67 = Byte.parseByte(s);
} else {
IABM67 = Byte.MIN_VALUE;
}
}

protected final void initIABM68(String s) {
if (!s.trim().isEmpty()) {
IABM68 = Byte.parseByte(s);
} else {
IABM68 = Byte.MIN_VALUE;
}
}

protected final void initIABM69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM69 = false;
} else {
IABM69 = true;
}
}
}

protected final void initIABM70(String s) {
if (!s.trim().isEmpty()) {
IABM70 = Byte.parseByte(s);
} else {
IABM70 = Byte.MIN_VALUE;
}
}

protected final void initIABM71(String s) {
if (!s.trim().isEmpty()) {
IABM71 = Byte.parseByte(s);
} else {
IABM71 = Byte.MIN_VALUE;
}
}

protected final void initIABM72(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM72 = false;
} else {
IABM72 = true;
}
}
}

protected final void initIABW10(String s) {
if (!s.trim().isEmpty()) {
IABW10 = Byte.parseByte(s);
} else {
IABW10 = Byte.MIN_VALUE;
}
}

protected final void initIABW11(String s) {
if (!s.trim().isEmpty()) {
IABW11 = Byte.parseByte(s);
} else {
IABW11 = Byte.MIN_VALUE;
}
}

protected final void initIABW12(String s) {
if (!s.trim().isEmpty()) {
IABW12 = Byte.parseByte(s);
} else {
IABW12 = Byte.MIN_VALUE;
}
}

protected final void initIABW13(String s) {
if (!s.trim().isEmpty()) {
IABW13 = Byte.parseByte(s);
} else {
IABW13 = Byte.MIN_VALUE;
}
}

protected final void initIABW14(String s) {
if (!s.trim().isEmpty()) {
IABW14 = Byte.parseByte(s);
} else {
IABW14 = Byte.MIN_VALUE;
}
}

protected final void initIABW15(String s) {
if (!s.trim().isEmpty()) {
IABW15 = Byte.parseByte(s);
} else {
IABW15 = Byte.MIN_VALUE;
}
}

protected final void initIABW16(String s) {
if (!s.trim().isEmpty()) {
IABW16 = Byte.parseByte(s);
} else {
IABW16 = Byte.MIN_VALUE;
}
}

protected final void initIABW17(String s) {
if (!s.trim().isEmpty()) {
IABW17 = Byte.parseByte(s);
} else {
IABW17 = Byte.MIN_VALUE;
}
}

protected final void initIABW18(String s) {
if (!s.trim().isEmpty()) {
IABW18 = Byte.parseByte(s);
} else {
IABW18 = Byte.MIN_VALUE;
}
}

protected final void initIABW28(String s) {
if (!s.trim().isEmpty()) {
IABW28 = Byte.parseByte(s);
} else {
IABW28 = Byte.MIN_VALUE;
}
}

protected final void initIABW29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW29 = false;
} else {
IABW29 = true;
}
}
}

protected final void initIABW30(String s) {
if (!s.trim().isEmpty()) {
IABW30 = Byte.parseByte(s);
} else {
IABW30 = Byte.MIN_VALUE;
}
}

protected final void initIABW31(String s) {
if (!s.trim().isEmpty()) {
IABW31 = Byte.parseByte(s);
} else {
IABW31 = Byte.MIN_VALUE;
}
}

protected final void initIABW32(String s) {
if (!s.trim().isEmpty()) {
IABW32 = Byte.parseByte(s);
} else {
IABW32 = Byte.MIN_VALUE;
}
}

protected final void initIABW33(String s) {
if (!s.trim().isEmpty()) {
IABW33 = Byte.parseByte(s);
} else {
IABW33 = Byte.MIN_VALUE;
}
}

protected final void initIABW34(String s) {
if (!s.trim().isEmpty()) {
IABW34 = Byte.parseByte(s);
} else {
IABW34 = Byte.MIN_VALUE;
}
}

protected final void initIABW35(String s) {
if (!s.trim().isEmpty()) {
IABW35 = Byte.parseByte(s);
} else {
IABW35 = Byte.MIN_VALUE;
}
}

protected final void initIABW36(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW36 = false;
} else {
IABW36 = true;
}
}
}

protected final void initIABW46(String s) {
if (!s.trim().isEmpty()) {
IABW46 = Byte.parseByte(s);
} else {
IABW46 = Byte.MIN_VALUE;
}
}

protected final void initIABW47(String s) {
if (!s.trim().isEmpty()) {
IABW47 = Byte.parseByte(s);
} else {
IABW47 = Byte.MIN_VALUE;
}
}

protected final void initIABW48(String s) {
if (!s.trim().isEmpty()) {
IABW48 = Byte.parseByte(s);
} else {
IABW48 = Byte.MIN_VALUE;
}
}

protected final void initIABW49(String s) {
if (!s.trim().isEmpty()) {
IABW49 = Byte.parseByte(s);
} else {
IABW49 = Byte.MIN_VALUE;
}
}

protected final void initIABW50(String s) {
if (!s.trim().isEmpty()) {
IABW50 = Byte.parseByte(s);
} else {
IABW50 = Byte.MIN_VALUE;
}
}

protected final void initIABW51(String s) {
if (!s.trim().isEmpty()) {
IABW51 = Byte.parseByte(s);
} else {
IABW51 = Byte.MIN_VALUE;
}
}

protected final void initIABW52(String s) {
if (!s.trim().isEmpty()) {
IABW52 = Byte.parseByte(s);
} else {
IABW52 = Byte.MIN_VALUE;
}
}

protected final void initIABW53(String s) {
if (!s.trim().isEmpty()) {
IABW53 = Byte.parseByte(s);
} else {
IABW53 = Byte.MIN_VALUE;
}
}

protected final void initIABW54(String s) {
if (!s.trim().isEmpty()) {
IABW54 = Byte.parseByte(s);
} else {
IABW54 = Byte.MIN_VALUE;
}
}

protected final void initIABW64(String s) {
if (!s.trim().isEmpty()) {
IABW64 = Byte.parseByte(s);
} else {
IABW64 = Byte.MIN_VALUE;
}
}

protected final void initIABW65(String s) {
if (!s.trim().isEmpty()) {
IABW65 = Byte.parseByte(s);
} else {
IABW65 = Byte.MIN_VALUE;
}
}

protected final void initIABW66(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW66 = false;
} else {
IABW66 = true;
}
}
}

protected final void initIABW67(String s) {
if (!s.trim().isEmpty()) {
IABW67 = Byte.parseByte(s);
} else {
IABW67 = Byte.MIN_VALUE;
}
}

protected final void initIABW68(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW68 = false;
} else {
IABW68 = true;
}
}
}

protected final void initIABW69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW69 = false;
} else {
IABW69 = true;
}
}
}

protected final void initIABW70(String s) {
if (!s.trim().isEmpty()) {
IABW70 = Byte.parseByte(s);
} else {
IABW70 = Byte.MIN_VALUE;
}
}

protected final void initIABW71(String s) {
if (!s.trim().isEmpty()) {
IABW71 = Byte.parseByte(s);
} else {
IABW71 = Byte.MIN_VALUE;
}
}

protected final void initIABW72(String s) {
if (!s.trim().isEmpty()) {
IABW72 = Byte.parseByte(s);
} else {
IABW72 = Byte.MIN_VALUE;
}
}

protected final void initIACISAE(String s) {
if (!s.trim().isEmpty()) {
IACISAE = Byte.parseByte(s);
} else {
IACISAE = Byte.MIN_VALUE;
}
}

protected final void initIACISAL(String s) {
if (!s.trim().isEmpty()) {
IACISAL = Short.parseShort(s);
} else {
IACISAL = Short.MIN_VALUE;
}
}

protected final void initIACISAR(String s) {
if (!s.trim().isEmpty()) {
IACISAR = Byte.parseByte(s);
} else {
IACISAR = Byte.MIN_VALUE;
}
}

protected final void initIACISAU(String s) {
if (!s.trim().isEmpty()) {
IACISAU = Short.parseShort(s);
} else {
IACISAU = Short.MIN_VALUE;
}
}

protected final void initIADEBME(String s) {
if (!s.trim().isEmpty()) {
IADEBME = Byte.parseByte(s);
} else {
IADEBME = Byte.MIN_VALUE;
}
}

protected final void initIADEBML(String s) {
if (!s.trim().isEmpty()) {
IADEBML = Short.parseShort(s);
} else {
IADEBML = Short.MIN_VALUE;
}
}

protected final void initIADEBMR(String s) {
if (!s.trim().isEmpty()) {
IADEBMR = Byte.parseByte(s);
} else {
IADEBMR = Byte.MIN_VALUE;
}
}

protected final void initIADEBMU(String s) {
if (!s.trim().isEmpty()) {
IADEBMU = Short.parseShort(s);
} else {
IADEBMU = Short.MIN_VALUE;
}
}

protected final void initIAEA10E(String s) {
if (!s.trim().isEmpty()) {
IAEA10E = Byte.parseByte(s);
} else {
IAEA10E = Byte.MIN_VALUE;
}
}

protected final void initIAEA10L(String s) {
if (!s.trim().isEmpty()) {
IAEA10L = Short.parseShort(s);
} else {
IAEA10L = Short.MIN_VALUE;
}
}

protected final void initIAEA10R(String s) {
if (!s.trim().isEmpty()) {
IAEA10R = Byte.parseByte(s);
} else {
IAEA10R = Byte.MIN_VALUE;
}
}

protected final void initIAEA10U(String s) {
if (!s.trim().isEmpty()) {
IAEA10U = Short.parseShort(s);
} else {
IAEA10U = Short.MIN_VALUE;
}
}

protected final void initIAEA11E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA11E = false;
} else {
IAEA11E = true;
}
}
}

protected final void initIAEA11L(String s) {
if (!s.trim().isEmpty()) {
IAEA11L = Byte.parseByte(s);
} else {
IAEA11L = Byte.MIN_VALUE;
}
}

protected final void initIAEA11R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA11R = false;
} else {
IAEA11R = true;
}
}
}

protected final void initIAEA11U(String s) {
if (!s.trim().isEmpty()) {
IAEA11U = Short.parseShort(s);
} else {
IAEA11U = Short.MIN_VALUE;
}
}

protected final void initIAEAR2E(String s) {
if (!s.trim().isEmpty()) {
IAEAR2E = Byte.parseByte(s);
} else {
IAEAR2E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR2L(String s) {
if (!s.trim().isEmpty()) {
IAEAR2L = Integer.parseInt(s);
} else {
IAEAR2L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR2R(String s) {
if (!s.trim().isEmpty()) {
IAEAR2R = Byte.parseByte(s);
} else {
IAEAR2R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR2U(String s) {
if (!s.trim().isEmpty()) {
IAEAR2U = Integer.parseInt(s);
} else {
IAEAR2U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR3E(String s) {
if (!s.trim().isEmpty()) {
IAEAR3E = Byte.parseByte(s);
} else {
IAEAR3E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR3L(String s) {
if (!s.trim().isEmpty()) {
IAEAR3L = Integer.parseInt(s);
} else {
IAEAR3L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR3R(String s) {
if (!s.trim().isEmpty()) {
IAEAR3R = Byte.parseByte(s);
} else {
IAEAR3R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR3U(String s) {
if (!s.trim().isEmpty()) {
IAEAR3U = Integer.parseInt(s);
} else {
IAEAR3U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR4E(String s) {
if (!s.trim().isEmpty()) {
IAEAR4E = Byte.parseByte(s);
} else {
IAEAR4E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR4L(String s) {
if (!s.trim().isEmpty()) {
IAEAR4L = Integer.parseInt(s);
} else {
IAEAR4L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR4R(String s) {
if (!s.trim().isEmpty()) {
IAEAR4R = Byte.parseByte(s);
} else {
IAEAR4R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR4U(String s) {
if (!s.trim().isEmpty()) {
IAEAR4U = Integer.parseInt(s);
} else {
IAEAR4U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR5E(String s) {
if (!s.trim().isEmpty()) {
IAEAR5E = Byte.parseByte(s);
} else {
IAEAR5E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR5L(String s) {
if (!s.trim().isEmpty()) {
IAEAR5L = Integer.parseInt(s);
} else {
IAEAR5L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR5R(String s) {
if (!s.trim().isEmpty()) {
IAEAR5R = Byte.parseByte(s);
} else {
IAEAR5R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR5U(String s) {
if (!s.trim().isEmpty()) {
IAEAR5U = Integer.parseInt(s);
} else {
IAEAR5U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR6E(String s) {
if (!s.trim().isEmpty()) {
IAEAR6E = Byte.parseByte(s);
} else {
IAEAR6E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR6L(String s) {
if (!s.trim().isEmpty()) {
IAEAR6L = Integer.parseInt(s);
} else {
IAEAR6L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR6R(String s) {
if (!s.trim().isEmpty()) {
IAEAR6R = Byte.parseByte(s);
} else {
IAEAR6R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR6U(String s) {
if (!s.trim().isEmpty()) {
IAEAR6U = Integer.parseInt(s);
} else {
IAEAR6U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR7E(String s) {
if (!s.trim().isEmpty()) {
IAEAR7E = Byte.parseByte(s);
} else {
IAEAR7E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR7L(String s) {
if (!s.trim().isEmpty()) {
IAEAR7L = Integer.parseInt(s);
} else {
IAEAR7L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR7R(String s) {
if (!s.trim().isEmpty()) {
IAEAR7R = Byte.parseByte(s);
} else {
IAEAR7R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR7U(String s) {
if (!s.trim().isEmpty()) {
IAEAR7U = Integer.parseInt(s);
} else {
IAEAR7U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR8E(String s) {
if (!s.trim().isEmpty()) {
IAEAR8E = Byte.parseByte(s);
} else {
IAEAR8E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR8L(String s) {
if (!s.trim().isEmpty()) {
IAEAR8L = Integer.parseInt(s);
} else {
IAEAR8L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR8R(String s) {
if (!s.trim().isEmpty()) {
IAEAR8R = Byte.parseByte(s);
} else {
IAEAR8R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR8U(String s) {
if (!s.trim().isEmpty()) {
IAEAR8U = Integer.parseInt(s);
} else {
IAEAR8U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR9E(String s) {
if (!s.trim().isEmpty()) {
IAEAR9E = Byte.parseByte(s);
} else {
IAEAR9E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR9L(String s) {
if (!s.trim().isEmpty()) {
IAEAR9L = Short.parseShort(s);
} else {
IAEAR9L = Short.MIN_VALUE;
}
}

protected final void initIAEAR9R(String s) {
if (!s.trim().isEmpty()) {
IAEAR9R = Byte.parseByte(s);
} else {
IAEAR9R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR9U(String s) {
if (!s.trim().isEmpty()) {
IAEAR9U = Short.parseShort(s);
} else {
IAEAR9U = Short.MIN_VALUE;
}
}

protected final void initIAEARE(String s) {
if (!s.trim().isEmpty()) {
IAEARE = Byte.parseByte(s);
} else {
IAEARE = Byte.MIN_VALUE;
}
}

protected final void initIAEARL(String s) {
if (!s.trim().isEmpty()) {
IAEARL = Integer.parseInt(s);
} else {
IAEARL = Integer.MIN_VALUE;
}
}

protected final void initIAEARN11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAEARN11 = false;
} else {
IAEARN11 = true;
}
}
}

protected final void initIAEARR(String s) {
if (!s.trim().isEmpty()) {
IAEARR = Byte.parseByte(s);
} else {
IAEARR = Byte.MIN_VALUE;
}
}

protected final void initIAEARU(String s) {
if (!s.trim().isEmpty()) {
IAEARU = Integer.parseInt(s);
} else {
IAEARU = Integer.MIN_VALUE;
}
}

protected final void initIAERN(String s) {
if (!s.trim().isEmpty()) {
IAERN = Short.parseShort(s);
} else {
IAERN = Short.MIN_VALUE;
}
}

protected final void initIAERN10(String s) {
if (!s.trim().isEmpty()) {
IAERN10 = Byte.parseByte(s);
} else {
IAERN10 = Byte.MIN_VALUE;
}
}

protected final void initIAERN2(String s) {
if (!s.trim().isEmpty()) {
IAERN2 = Integer.parseInt(s);
} else {
IAERN2 = Integer.MIN_VALUE;
}
}

protected final void initIAERN3(String s) {
if (!s.trim().isEmpty()) {
IAERN3 = Integer.parseInt(s);
} else {
IAERN3 = Integer.MIN_VALUE;
}
}

protected final void initIAERN4(String s) {
if (!s.trim().isEmpty()) {
IAERN4 = Integer.parseInt(s);
} else {
IAERN4 = Integer.MIN_VALUE;
}
}

protected final void initIAERN5(String s) {
if (!s.trim().isEmpty()) {
IAERN5 = Integer.parseInt(s);
} else {
IAERN5 = Integer.MIN_VALUE;
}
}

protected final void initIAERN6(String s) {
if (!s.trim().isEmpty()) {
IAERN6 = Short.parseShort(s);
} else {
IAERN6 = Short.MIN_VALUE;
}
}

protected final void initIAERN7(String s) {
if (!s.trim().isEmpty()) {
IAERN7 = Short.parseShort(s);
} else {
IAERN7 = Short.MIN_VALUE;
}
}

protected final void initIAERN8(String s) {
if (!s.trim().isEmpty()) {
IAERN8 = Short.parseShort(s);
} else {
IAERN8 = Short.MIN_VALUE;
}
}

protected final void initIAERN9(String s) {
if (!s.trim().isEmpty()) {
IAERN9 = Byte.parseByte(s);
} else {
IAERN9 = Byte.MIN_VALUE;
}
}

protected final void initIAFBAE(String s) {
if (!s.trim().isEmpty()) {
IAFBAE = Byte.parseByte(s);
} else {
IAFBAE = Byte.MIN_VALUE;
}
}

protected final void initIAFBAL(String s) {
if (!s.trim().isEmpty()) {
IAFBAL = Integer.parseInt(s);
} else {
IAFBAL = Integer.MIN_VALUE;
}
}

protected final void initIAFBAR(String s) {
if (!s.trim().isEmpty()) {
IAFBAR = Byte.parseByte(s);
} else {
IAFBAR = Byte.MIN_VALUE;
}
}

protected final void initIAFBAU(String s) {
if (!s.trim().isEmpty()) {
IAFBAU = Integer.parseInt(s);
} else {
IAFBAU = Integer.MIN_VALUE;
}
}

protected final void initIAFUEL(String s) {
if (!s.trim().isEmpty()) {
IAFUEL = Byte.parseByte(s);
} else {
IAFUEL = Byte.MIN_VALUE;
}
}

protected final void initIAHDB(String s) {
if (!s.trim().isEmpty()) {
IAHDB = Byte.parseByte(s);
} else {
IAHDB = Byte.MIN_VALUE;
}
}

protected final void initIAHDN95(String s) {
if (!s.trim().isEmpty()) {
IAHDN95 = Byte.parseByte(s);
} else {
IAHDN95 = Byte.MIN_VALUE;
}
}

protected final void initIAHDN96(String s) {
if (!s.trim().isEmpty()) {
IAHDN96 = Byte.parseByte(s);
} else {
IAHDN96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDNAA(String s) {
if (!s.trim().isEmpty()) {
IAHDNAA = Byte.parseByte(s);
} else {
IAHDNAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDNCA(String s) {
if (!s.trim().isEmpty()) {
IAHDNCA = Byte.parseByte(s);
} else {
IAHDNCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDNDL(String s) {
if (!s.trim().isEmpty()) {
IAHDNDL = Byte.parseByte(s);
} else {
IAHDNDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDNIB(String s) {
if (!s.trim().isEmpty()) {
IAHDNIB = Byte.parseByte(s);
} else {
IAHDNIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDNII(String s) {
if (!s.trim().isEmpty()) {
IAHDNII = Byte.parseByte(s);
} else {
IAHDNII = Byte.MIN_VALUE;
}
}

protected final void initIAHDNSD(String s) {
if (!s.trim().isEmpty()) {
IAHDNSD = Byte.parseByte(s);
} else {
IAHDNSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDNSP(String s) {
if (!s.trim().isEmpty()) {
IAHDNSP = Byte.parseByte(s);
} else {
IAHDNSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDNWD(String s) {
if (!s.trim().isEmpty()) {
IAHDNWD = Byte.parseByte(s);
} else {
IAHDNWD = Byte.MIN_VALUE;
}
}

protected final void initIAHDP95(String s) {
if (!s.trim().isEmpty()) {
IAHDP95 = Byte.parseByte(s);
} else {
IAHDP95 = Byte.MIN_VALUE;
}
}

protected final void initIAHDP96(String s) {
if (!s.trim().isEmpty()) {
IAHDP96 = Byte.parseByte(s);
} else {
IAHDP96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPAA(String s) {
if (!s.trim().isEmpty()) {
IAHDPAA = Byte.parseByte(s);
} else {
IAHDPAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPCA(String s) {
if (!s.trim().isEmpty()) {
IAHDPCA = Byte.parseByte(s);
} else {
IAHDPCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPDL(String s) {
if (!s.trim().isEmpty()) {
IAHDPDL = Byte.parseByte(s);
} else {
IAHDPDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDPIB(String s) {
if (!s.trim().isEmpty()) {
IAHDPIB = Byte.parseByte(s);
} else {
IAHDPIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDPII(String s) {
if (!s.trim().isEmpty()) {
IAHDPII = Byte.parseByte(s);
} else {
IAHDPII = Byte.MIN_VALUE;
}
}

protected final void initIAHDPM85(String s) {
if (!s.trim().isEmpty()) {
IAHDPM85 = Byte.parseByte(s);
} else {
IAHDPM85 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPM86(String s) {
if (!s.trim().isEmpty()) {
IAHDPM86 = Byte.parseByte(s);
} else {
IAHDPM86 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPM96(String s) {
if (!s.trim().isEmpty()) {
IAHDPM96 = Byte.parseByte(s);
} else {
IAHDPM96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMAA(String s) {
if (!s.trim().isEmpty()) {
IAHDPMAA = Byte.parseByte(s);
} else {
IAHDPMAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMCA(String s) {
if (!s.trim().isEmpty()) {
IAHDPMCA = Byte.parseByte(s);
} else {
IAHDPMCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMDL(String s) {
if (!s.trim().isEmpty()) {
IAHDPMDL = Byte.parseByte(s);
} else {
IAHDPMDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMIB(String s) {
if (!s.trim().isEmpty()) {
IAHDPMIB = Byte.parseByte(s);
} else {
IAHDPMIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMII(String s) {
if (!s.trim().isEmpty()) {
IAHDPMII = Byte.parseByte(s);
} else {
IAHDPMII = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMSD(String s) {
if (!s.trim().isEmpty()) {
IAHDPMSD = Byte.parseByte(s);
} else {
IAHDPMSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMSP(String s) {
if (!s.trim().isEmpty()) {
IAHDPMSP = Byte.parseByte(s);
} else {
IAHDPMSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMWD(String s) {
if (!s.trim().isEmpty()) {
IAHDPMWD = Byte.parseByte(s);
} else {
IAHDPMWD = Byte.MIN_VALUE;
}
}

protected final void initIAHDPN85(String s) {
if (!s.trim().isEmpty()) {
IAHDPN85 = Byte.parseByte(s);
} else {
IAHDPN85 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPN96(String s) {
if (!s.trim().isEmpty()) {
IAHDPN96 = Byte.parseByte(s);
} else {
IAHDPN96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNAA(String s) {
if (!s.trim().isEmpty()) {
IAHDPNAA = Byte.parseByte(s);
} else {
IAHDPNAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNCA(String s) {
if (!s.trim().isEmpty()) {
IAHDPNCA = Byte.parseByte(s);
} else {
IAHDPNCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNDL(String s) {
if (!s.trim().isEmpty()) {
IAHDPNDL = Byte.parseByte(s);
} else {
IAHDPNDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNIB(String s) {
if (!s.trim().isEmpty()) {
IAHDPNIB = Byte.parseByte(s);
} else {
IAHDPNIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNII(String s) {
if (!s.trim().isEmpty()) {
IAHDPNII = Byte.parseByte(s);
} else {
IAHDPNII = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNSD(String s) {
if (!s.trim().isEmpty()) {
IAHDPNSD = Byte.parseByte(s);
} else {
IAHDPNSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNSP(String s) {
if (!s.trim().isEmpty()) {
IAHDPNSP = Byte.parseByte(s);
} else {
IAHDPNSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNWD(String s) {
if (!s.trim().isEmpty()) {
IAHDPNWD = Byte.parseByte(s);
} else {
IAHDPNWD = Byte.MIN_VALUE;
}
}

protected final void initIAHDPSD(String s) {
if (!s.trim().isEmpty()) {
IAHDPSD = Byte.parseByte(s);
} else {
IAHDPSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDPSP(String s) {
if (!s.trim().isEmpty()) {
IAHDPSP = Byte.parseByte(s);
} else {
IAHDPSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDPWD(String s) {
if (!s.trim().isEmpty()) {
IAHDPWD = Byte.parseByte(s);
} else {
IAHDPWD = Byte.MIN_VALUE;
}
}

protected final void initIAHDR95(String s) {
if (!s.trim().isEmpty()) {
IAHDR95 = Byte.parseByte(s);
} else {
IAHDR95 = Byte.MIN_VALUE;
}
}

protected final void initIAHDR96(String s) {
if (!s.trim().isEmpty()) {
IAHDR96 = Byte.parseByte(s);
} else {
IAHDR96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDRAA(String s) {
if (!s.trim().isEmpty()) {
IAHDRAA = Byte.parseByte(s);
} else {
IAHDRAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDRCA(String s) {
if (!s.trim().isEmpty()) {
IAHDRCA = Byte.parseByte(s);
} else {
IAHDRCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDRDL(String s) {
if (!s.trim().isEmpty()) {
IAHDRDL = Byte.parseByte(s);
} else {
IAHDRDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDRIB(String s) {
if (!s.trim().isEmpty()) {
IAHDRIB = Byte.parseByte(s);
} else {
IAHDRIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDRII(String s) {
if (!s.trim().isEmpty()) {
IAHDRII = Byte.parseByte(s);
} else {
IAHDRII = Byte.MIN_VALUE;
}
}

protected final void initIAHDRM85(String s) {
if (!s.trim().isEmpty()) {
IAHDRM85 = Byte.parseByte(s);
} else {
IAHDRM85 = Byte.MIN_VALUE;
}
}

protected final void initIAHDRM86(String s) {
if (!s.trim().isEmpty()) {
IAHDRM86 = Byte.parseByte(s);
} else {
IAHDRM86 = Byte.MIN_VALUE;
}
}

protected final void initIAHDRM96(String s) {
if (!s.trim().isEmpty()) {
IAHDRM96 = Byte.parseByte(s);
} else {
IAHDRM96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMAA(String s) {
if (!s.trim().isEmpty()) {
IAHDRMAA = Byte.parseByte(s);
} else {
IAHDRMAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMCA(String s) {
if (!s.trim().isEmpty()) {
IAHDRMCA = Byte.parseByte(s);
} else {
IAHDRMCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMDL(String s) {
if (!s.trim().isEmpty()) {
IAHDRMDL = Byte.parseByte(s);
} else {
IAHDRMDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMIB(String s) {
if (!s.trim().isEmpty()) {
IAHDRMIB = Byte.parseByte(s);
} else {
IAHDRMIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMII(String s) {
if (!s.trim().isEmpty()) {
IAHDRMII = Byte.parseByte(s);
} else {
IAHDRMII = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMSD(String s) {
if (!s.trim().isEmpty()) {
IAHDRMSD = Byte.parseByte(s);
} else {
IAHDRMSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMSP(String s) {
if (!s.trim().isEmpty()) {
IAHDRMSP = Byte.parseByte(s);
} else {
IAHDRMSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMWD(String s) {
if (!s.trim().isEmpty()) {
IAHDRMWD = Byte.parseByte(s);
} else {
IAHDRMWD = Byte.MIN_VALUE;
}
}

protected final void initIAHDRSD(String s) {
if (!s.trim().isEmpty()) {
IAHDRSD = Byte.parseByte(s);
} else {
IAHDRSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDRSP(String s) {
if (!s.trim().isEmpty()) {
IAHDRSP = Byte.parseByte(s);
} else {
IAHDRSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDRWD(String s) {
if (!s.trim().isEmpty()) {
IAHDRWD = Byte.parseByte(s);
} else {
IAHDRWD = Byte.MIN_VALUE;
}
}

protected final void initIAHOMEE(String s) {
if (!s.trim().isEmpty()) {
IAHOMEE = Byte.parseByte(s);
} else {
IAHOMEE = Byte.MIN_VALUE;
}
}

protected final void initIAHOMEL(String s) {
if (!s.trim().isEmpty()) {
IAHOMEL = Integer.parseInt(s);
} else {
IAHOMEL = Integer.MIN_VALUE;
}
}

protected final void initIAHOMER(String s) {
if (!s.trim().isEmpty()) {
IAHOMER = Byte.parseByte(s);
} else {
IAHOMER = Byte.MIN_VALUE;
}
}

protected final void initIAHOMEU(String s) {
if (!s.trim().isEmpty()) {
IAHOMEU = Integer.parseInt(s);
} else {
IAHOMEU = Integer.MIN_VALUE;
}
}

protected final void initIAIRAE(String s) {
if (!s.trim().isEmpty()) {
IAIRAE = Byte.parseByte(s);
} else {
IAIRAE = Byte.MIN_VALUE;
}
}

protected final void initIAIRAL(String s) {
if (!s.trim().isEmpty()) {
IAIRAL = Integer.parseInt(s);
} else {
IAIRAL = Integer.MIN_VALUE;
}
}

protected final void initIAIRAR(String s) {
if (!s.trim().isEmpty()) {
IAIRAR = Byte.parseByte(s);
} else {
IAIRAR = Byte.MIN_VALUE;
}
}

protected final void initIAIRAU(String s) {
if (!s.trim().isEmpty()) {
IAIRAU = Integer.parseInt(s);
} else {
IAIRAU = Integer.MIN_VALUE;
}
}

protected final void initIAISACAS(String s) {
if (!s.trim().isEmpty()) {
IAISACAS = Byte.parseByte(s);
} else {
IAISACAS = Byte.MIN_VALUE;
}
}

protected final void initIAISADE(String s) {
if (!s.trim().isEmpty()) {
IAISADE = Byte.parseByte(s);
} else {
IAISADE = Byte.MIN_VALUE;
}
}

protected final void initIAISADL(String s) {
if (!s.trim().isEmpty()) {
IAISADL = Short.parseShort(s);
} else {
IAISADL = Short.MIN_VALUE;
}
}

protected final void initIAISADR(String s) {
if (!s.trim().isEmpty()) {
IAISADR = Byte.parseByte(s);
} else {
IAISADR = Byte.MIN_VALUE;
}
}

protected final void initIAISADU(String s) {
if (!s.trim().isEmpty()) {
IAISADU = Short.parseShort(s);
} else {
IAISADU = Short.MIN_VALUE;
}
}

protected final void initIAISALI(String s) {
if (!s.trim().isEmpty()) {
IAISALI = Byte.parseByte(s);
} else {
IAISALI = Byte.MIN_VALUE;
}
}

protected final void initIAISASHA(String s) {
if (!s.trim().isEmpty()) {
IAISASHA = Byte.parseByte(s);
} else {
IAISASHA = Byte.MIN_VALUE;
}
}

protected final void initIALIPAE(String s) {
if (!s.trim().isEmpty()) {
IALIPAE = Byte.parseByte(s);
} else {
IALIPAE = Byte.MIN_VALUE;
}
}

protected final void initIALIPAL(String s) {
if (!s.trim().isEmpty()) {
IALIPAL = Integer.parseInt(s);
} else {
IALIPAL = Integer.MIN_VALUE;
}
}

protected final void initIALIPAR(String s) {
if (!s.trim().isEmpty()) {
IALIPAR = Byte.parseByte(s);
} else {
IALIPAR = Byte.MIN_VALUE;
}
}

protected final void initIALIPAU(String s) {
if (!s.trim().isEmpty()) {
IALIPAU = Integer.parseInt(s);
} else {
IALIPAU = Integer.MIN_VALUE;
}
}

protected final void initIALISAE(String s) {
if (!s.trim().isEmpty()) {
IALISAE = Byte.parseByte(s);
} else {
IALISAE = Byte.MIN_VALUE;
}
}

protected final void initIALISAL(String s) {
if (!s.trim().isEmpty()) {
IALISAL = Short.parseShort(s);
} else {
IALISAL = Short.MIN_VALUE;
}
}

protected final void initIALISAR(String s) {
if (!s.trim().isEmpty()) {
IALISAR = Byte.parseByte(s);
} else {
IALISAR = Byte.MIN_VALUE;
}
}

protected final void initIALISAU(String s) {
if (!s.trim().isEmpty()) {
IALISAU = Short.parseShort(s);
} else {
IALISAU = Short.MIN_VALUE;
}
}

protected final void initIALIYAE(String s) {
if (!s.trim().isEmpty()) {
IALIYAE = Byte.parseByte(s);
} else {
IALIYAE = Byte.MIN_VALUE;
}
}

protected final void initIALIYAL(String s) {
if (!s.trim().isEmpty()) {
IALIYAL = Integer.parseInt(s);
} else {
IALIYAL = Integer.MIN_VALUE;
}
}

protected final void initIALIYAR(String s) {
if (!s.trim().isEmpty()) {
IALIYAR = Byte.parseByte(s);
} else {
IALIYAR = Byte.MIN_VALUE;
}
}

protected final void initIALIYAU(String s) {
if (!s.trim().isEmpty()) {
IALIYAU = Integer.parseInt(s);
} else {
IALIYAU = Integer.MIN_VALUE;
}
}

protected final void initIALM19(String s) {
if (!s.trim().isEmpty()) {
IALM19 = Byte.parseByte(s);
} else {
IALM19 = Byte.MIN_VALUE;
}
}

protected final void initIALM20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALM20 = false;
} else {
IALM20 = true;
}
}
}

protected final void initIALM21(String s) {
if (!s.trim().isEmpty()) {
IALM21 = Byte.parseByte(s);
} else {
IALM21 = Byte.MIN_VALUE;
}
}

protected final void initIALM22(String s) {
if (!s.trim().isEmpty()) {
IALM22 = Byte.parseByte(s);
} else {
IALM22 = Byte.MIN_VALUE;
}
}

protected final void initIALM23(String s) {
if (!s.trim().isEmpty()) {
IALM23 = Byte.parseByte(s);
} else {
IALM23 = Byte.MIN_VALUE;
}
}

protected final void initIALM24(String s) {
if (!s.trim().isEmpty()) {
IALM24 = Byte.parseByte(s);
} else {
IALM24 = Byte.MIN_VALUE;
}
}

protected final void initIALM25(String s) {
if (!s.trim().isEmpty()) {
IALM25 = Byte.parseByte(s);
} else {
IALM25 = Byte.MIN_VALUE;
}
}

protected final void initIALM26(String s) {
if (!s.trim().isEmpty()) {
IALM26 = Byte.parseByte(s);
} else {
IALM26 = Byte.MIN_VALUE;
}
}

protected final void initIALM27(String s) {
if (!s.trim().isEmpty()) {
IALM27 = Byte.parseByte(s);
} else {
IALM27 = Byte.MIN_VALUE;
}
}

protected final void initIALM37(String s) {
if (!s.trim().isEmpty()) {
IALM37 = Byte.parseByte(s);
} else {
IALM37 = Byte.MIN_VALUE;
}
}

protected final void initIALM38(String s) {
if (!s.trim().isEmpty()) {
IALM38 = Byte.parseByte(s);
} else {
IALM38 = Byte.MIN_VALUE;
}
}

protected final void initIALM39(String s) {
if (!s.trim().isEmpty()) {
IALM39 = Byte.parseByte(s);
} else {
IALM39 = Byte.MIN_VALUE;
}
}

protected final void initIALM40(String s) {
if (!s.trim().isEmpty()) {
IALM40 = Byte.parseByte(s);
} else {
IALM40 = Byte.MIN_VALUE;
}
}

protected final void initIALM41(String s) {
if (!s.trim().isEmpty()) {
IALM41 = Byte.parseByte(s);
} else {
IALM41 = Byte.MIN_VALUE;
}
}

protected final void initIALM42(String s) {
if (!s.trim().isEmpty()) {
IALM42 = Byte.parseByte(s);
} else {
IALM42 = Byte.MIN_VALUE;
}
}

protected final void initIALM43(String s) {
if (!s.trim().isEmpty()) {
IALM43 = Byte.parseByte(s);
} else {
IALM43 = Byte.MIN_VALUE;
}
}

protected final void initIALM44(String s) {
if (!s.trim().isEmpty()) {
IALM44 = Byte.parseByte(s);
} else {
IALM44 = Byte.MIN_VALUE;
}
}

protected final void initIALM45(String s) {
if (!s.trim().isEmpty()) {
IALM45 = Byte.parseByte(s);
} else {
IALM45 = Byte.MIN_VALUE;
}
}

protected final void initIALM55(String s) {
if (!s.trim().isEmpty()) {
IALM55 = Byte.parseByte(s);
} else {
IALM55 = Byte.MIN_VALUE;
}
}

protected final void initIALM56(String s) {
if (!s.trim().isEmpty()) {
IALM56 = Byte.parseByte(s);
} else {
IALM56 = Byte.MIN_VALUE;
}
}

protected final void initIALM57(String s) {
if (!s.trim().isEmpty()) {
IALM57 = Byte.parseByte(s);
} else {
IALM57 = Byte.MIN_VALUE;
}
}

protected final void initIALM58(String s) {
if (!s.trim().isEmpty()) {
IALM58 = Byte.parseByte(s);
} else {
IALM58 = Byte.MIN_VALUE;
}
}

protected final void initIALM59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALM59 = false;
} else {
IALM59 = true;
}
}
}

protected final void initIALM60(String s) {
if (!s.trim().isEmpty()) {
IALM60 = Byte.parseByte(s);
} else {
IALM60 = Byte.MIN_VALUE;
}
}

protected final void initIALM61(String s) {
if (!s.trim().isEmpty()) {
IALM61 = Byte.parseByte(s);
} else {
IALM61 = Byte.MIN_VALUE;
}
}

protected final void initIALM62(String s) {
if (!s.trim().isEmpty()) {
IALM62 = Byte.parseByte(s);
} else {
IALM62 = Byte.MIN_VALUE;
}
}

protected final void initIALM63(String s) {
if (!s.trim().isEmpty()) {
IALM63 = Byte.parseByte(s);
} else {
IALM63 = Byte.MIN_VALUE;
}
}

protected final void initIALOAME(String s) {
if (!s.trim().isEmpty()) {
IALOAME = Byte.parseByte(s);
} else {
IALOAME = Byte.MIN_VALUE;
}
}

protected final void initIALOAML(String s) {
if (!s.trim().isEmpty()) {
IALOAML = Short.parseShort(s);
} else {
IALOAML = Short.MIN_VALUE;
}
}

protected final void initIALOAMR(String s) {
if (!s.trim().isEmpty()) {
IALOAMR = Byte.parseByte(s);
} else {
IALOAMR = Byte.MIN_VALUE;
}
}

protected final void initIALOAMU(String s) {
if (!s.trim().isEmpty()) {
IALOAMU = Short.parseShort(s);
} else {
IALOAMU = Short.MIN_VALUE;
}
}

protected final void initIALOAN96(String s) {
if (!s.trim().isEmpty()) {
IALOAN96 = Byte.parseByte(s);
} else {
IALOAN96 = Byte.MIN_VALUE;
}
}

protected final void initIALOANHP(String s) {
if (!s.trim().isEmpty()) {
IALOANHP = Byte.parseByte(s);
} else {
IALOANHP = Byte.MIN_VALUE;
}
}

protected final void initIALOANML(String s) {
if (!s.trim().isEmpty()) {
IALOANML = Byte.parseByte(s);
} else {
IALOANML = Byte.MIN_VALUE;
}
}

protected final void initIALOANMO(String s) {
if (!s.trim().isEmpty()) {
IALOANMO = Byte.parseByte(s);
} else {
IALOANMO = Byte.MIN_VALUE;
}
}

protected final void initIALOANOD(String s) {
if (!s.trim().isEmpty()) {
IALOANOD = Byte.parseByte(s);
} else {
IALOANOD = Byte.MIN_VALUE;
}
}

protected final void initIALOANPL(String s) {
if (!s.trim().isEmpty()) {
IALOANPL = Byte.parseByte(s);
} else {
IALOANPL = Byte.MIN_VALUE;
}
}

protected final void initIALOANSF(String s) {
if (!s.trim().isEmpty()) {
IALOANSF = Byte.parseByte(s);
} else {
IALOANSF = Byte.MIN_VALUE;
}
}

protected final void initIALREFE(String s) {
if (!s.trim().isEmpty()) {
IALREFE = Byte.parseByte(s);
} else {
IALREFE = Byte.MIN_VALUE;
}
}

protected final void initIALREFL(String s) {
if (!s.trim().isEmpty()) {
IALREFL = Byte.parseByte(s);
} else {
IALREFL = Byte.MIN_VALUE;
}
}

protected final void initIALREFR(String s) {
if (!s.trim().isEmpty()) {
IALREFR = Byte.parseByte(s);
} else {
IALREFR = Byte.MIN_VALUE;
}
}

protected final void initIALREFU(String s) {
if (!s.trim().isEmpty()) {
IALREFU = Byte.parseByte(s);
} else {
IALREFU = Byte.MIN_VALUE;
}
}

protected final void initIALREME(String s) {
if (!s.trim().isEmpty()) {
IALREME = Byte.parseByte(s);
} else {
IALREME = Byte.MIN_VALUE;
}
}

protected final void initIALREML(String s) {
if (!s.trim().isEmpty()) {
IALREML = Short.parseShort(s);
} else {
IALREML = Short.MIN_VALUE;
}
}

protected final void initIALREMR(String s) {
if (!s.trim().isEmpty()) {
IALREMR = Byte.parseByte(s);
} else {
IALREMR = Byte.MIN_VALUE;
}
}

protected final void initIALREMU(String s) {
if (!s.trim().isEmpty()) {
IALREMU = Short.parseShort(s);
} else {
IALREMU = Short.MIN_VALUE;
}
}

protected final void initIALREOE(String s) {
if (!s.trim().isEmpty()) {
IALREOE = Byte.parseByte(s);
} else {
IALREOE = Byte.MIN_VALUE;
}
}

protected final void initIALREOL(String s) {
if (!s.trim().isEmpty()) {
IALREOL = Short.parseShort(s);
} else {
IALREOL = Short.MIN_VALUE;
}
}

protected final void initIALREOR(String s) {
if (!s.trim().isEmpty()) {
IALREOR = Byte.parseByte(s);
} else {
IALREOR = Byte.MIN_VALUE;
}
}

protected final void initIALREOU(String s) {
if (!s.trim().isEmpty()) {
IALREOU = Short.parseShort(s);
} else {
IALREOU = Short.MIN_VALUE;
}
}

protected final void initIALREWE(String s) {
if (!s.trim().isEmpty()) {
IALREWE = Byte.parseByte(s);
} else {
IALREWE = Byte.MIN_VALUE;
}
}

protected final void initIALREWL(String s) {
if (!s.trim().isEmpty()) {
IALREWL = Short.parseShort(s);
} else {
IALREWL = Short.MIN_VALUE;
}
}

protected final void initIALREWR(String s) {
if (!s.trim().isEmpty()) {
IALREWR = Byte.parseByte(s);
} else {
IALREWR = Byte.MIN_VALUE;
}
}

protected final void initIALREWU(String s) {
if (!s.trim().isEmpty()) {
IALREWU = Byte.parseByte(s);
} else {
IALREWU = Byte.MIN_VALUE;
}
}

protected final void initIALREYE(String s) {
if (!s.trim().isEmpty()) {
IALREYE = Byte.parseByte(s);
} else {
IALREYE = Byte.MIN_VALUE;
}
}

protected final void initIALREYL(String s) {
if (!s.trim().isEmpty()) {
IALREYL = Short.parseShort(s);
} else {
IALREYL = Short.MIN_VALUE;
}
}

protected final void initIALREYR(String s) {
if (!s.trim().isEmpty()) {
IALREYR = Byte.parseByte(s);
} else {
IALREYR = Byte.MIN_VALUE;
}
}

protected final void initIALREYU(String s) {
if (!s.trim().isEmpty()) {
IALREYU = Short.parseShort(s);
} else {
IALREYU = Short.MIN_VALUE;
}
}

protected final void initIALY19(String s) {
if (!s.trim().isEmpty()) {
IALY19 = Byte.parseByte(s);
} else {
IALY19 = Byte.MIN_VALUE;
}
}

protected final void initIALY20(String s) {
if (!s.trim().isEmpty()) {
IALY20 = Byte.parseByte(s);
} else {
IALY20 = Byte.MIN_VALUE;
}
}

protected final void initIALY21(String s) {
if (!s.trim().isEmpty()) {
IALY21 = Byte.parseByte(s);
} else {
IALY21 = Byte.MIN_VALUE;
}
}

protected final void initIALY22(String s) {
if (!s.trim().isEmpty()) {
IALY22 = Byte.parseByte(s);
} else {
IALY22 = Byte.MIN_VALUE;
}
}

protected final void initIALY23(String s) {
if (!s.trim().isEmpty()) {
IALY23 = Byte.parseByte(s);
} else {
IALY23 = Byte.MIN_VALUE;
}
}

protected final void initIALY24(String s) {
if (!s.trim().isEmpty()) {
IALY24 = Byte.parseByte(s);
} else {
IALY24 = Byte.MIN_VALUE;
}
}

protected final void initIALY25(String s) {
if (!s.trim().isEmpty()) {
IALY25 = Byte.parseByte(s);
} else {
IALY25 = Byte.MIN_VALUE;
}
}

protected final void initIALY26(String s) {
if (!s.trim().isEmpty()) {
IALY26 = Byte.parseByte(s);
} else {
IALY26 = Byte.MIN_VALUE;
}
}

protected final void initIALY27(String s) {
if (!s.trim().isEmpty()) {
IALY27 = Byte.parseByte(s);
} else {
IALY27 = Byte.MIN_VALUE;
}
}

protected final void initIALY37(String s) {
if (!s.trim().isEmpty()) {
IALY37 = Byte.parseByte(s);
} else {
IALY37 = Byte.MIN_VALUE;
}
}

protected final void initIALY38(String s) {
if (!s.trim().isEmpty()) {
IALY38 = Byte.parseByte(s);
} else {
IALY38 = Byte.MIN_VALUE;
}
}

protected final void initIALY39(String s) {
if (!s.trim().isEmpty()) {
IALY39 = Byte.parseByte(s);
} else {
IALY39 = Byte.MIN_VALUE;
}
}

protected final void initIALY40(String s) {
if (!s.trim().isEmpty()) {
IALY40 = Byte.parseByte(s);
} else {
IALY40 = Byte.MIN_VALUE;
}
}

protected final void initIALY41(String s) {
if (!s.trim().isEmpty()) {
IALY41 = Byte.parseByte(s);
} else {
IALY41 = Byte.MIN_VALUE;
}
}

protected final void initIALY42(String s) {
if (!s.trim().isEmpty()) {
IALY42 = Byte.parseByte(s);
} else {
IALY42 = Byte.MIN_VALUE;
}
}

protected final void initIALY43(String s) {
if (!s.trim().isEmpty()) {
IALY43 = Byte.parseByte(s);
} else {
IALY43 = Byte.MIN_VALUE;
}
}

protected final void initIALY44(String s) {
if (!s.trim().isEmpty()) {
IALY44 = Byte.parseByte(s);
} else {
IALY44 = Byte.MIN_VALUE;
}
}

protected final void initIALY45(String s) {
if (!s.trim().isEmpty()) {
IALY45 = Byte.parseByte(s);
} else {
IALY45 = Byte.MIN_VALUE;
}
}

protected final void initIALY55(String s) {
if (!s.trim().isEmpty()) {
IALY55 = Byte.parseByte(s);
} else {
IALY55 = Byte.MIN_VALUE;
}
}

protected final void initIALY56(String s) {
if (!s.trim().isEmpty()) {
IALY56 = Byte.parseByte(s);
} else {
IALY56 = Byte.MIN_VALUE;
}
}

protected final void initIALY57(String s) {
if (!s.trim().isEmpty()) {
IALY57 = Byte.parseByte(s);
} else {
IALY57 = Byte.MIN_VALUE;
}
}

protected final void initIALY58(String s) {
if (!s.trim().isEmpty()) {
IALY58 = Byte.parseByte(s);
} else {
IALY58 = Byte.MIN_VALUE;
}
}

protected final void initIALY59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALY59 = false;
} else {
IALY59 = true;
}
}
}

protected final void initIALY60(String s) {
if (!s.trim().isEmpty()) {
IALY60 = Byte.parseByte(s);
} else {
IALY60 = Byte.MIN_VALUE;
}
}

protected final void initIALY61(String s) {
if (!s.trim().isEmpty()) {
IALY61 = Byte.parseByte(s);
} else {
IALY61 = Byte.MIN_VALUE;
}
}

protected final void initIALY62(String s) {
if (!s.trim().isEmpty()) {
IALY62 = Byte.parseByte(s);
} else {
IALY62 = Byte.MIN_VALUE;
}
}

protected final void initIALY63(String s) {
if (!s.trim().isEmpty()) {
IALY63 = Byte.parseByte(s);
} else {
IALY63 = Byte.MIN_VALUE;
}
}

protected final void initIANPBPE(String s) {
if (!s.trim().isEmpty()) {
IANPBPE = Byte.parseByte(s);
} else {
IANPBPE = Byte.MIN_VALUE;
}
}

protected final void initIANPBPL(String s) {
if (!s.trim().isEmpty()) {
IANPBPL = Short.parseShort(s);
} else {
IANPBPL = Short.MIN_VALUE;
}
}

protected final void initIANPBPR(String s) {
if (!s.trim().isEmpty()) {
IANPBPR = Byte.parseByte(s);
} else {
IANPBPR = Byte.MIN_VALUE;
}
}

protected final void initIANPBPU(String s) {
if (!s.trim().isEmpty()) {
IANPBPU = Short.parseShort(s);
} else {
IANPBPU = Short.MIN_VALUE;
}
}

protected final void initIAOASAE(String s) {
if (!s.trim().isEmpty()) {
IAOASAE = Byte.parseByte(s);
} else {
IAOASAE = Byte.MIN_VALUE;
}
}

protected final void initIAOASAL(String s) {
if (!s.trim().isEmpty()) {
IAOASAL = Integer.parseInt(s);
} else {
IAOASAL = Integer.MIN_VALUE;
}
}

protected final void initIAOASAR(String s) {
if (!s.trim().isEmpty()) {
IAOASAR = Byte.parseByte(s);
} else {
IAOASAR = Byte.MIN_VALUE;
}
}

protected final void initIAOASAU(String s) {
if (!s.trim().isEmpty()) {
IAOASAU = Integer.parseInt(s);
} else {
IAOASAU = Integer.MIN_VALUE;
}
}

protected final void initIAOMME(String s) {
if (!s.trim().isEmpty()) {
IAOMME = Byte.parseByte(s);
} else {
IAOMME = Byte.MIN_VALUE;
}
}

protected final void initIAOMML(String s) {
if (!s.trim().isEmpty()) {
IAOMML = Integer.parseInt(s);
} else {
IAOMML = Integer.MIN_VALUE;
}
}

protected final void initIAOMMR(String s) {
if (!s.trim().isEmpty()) {
IAOMMR = Byte.parseByte(s);
} else {
IAOMMR = Byte.MIN_VALUE;
}
}

protected final void initIAOMMU(String s) {
if (!s.trim().isEmpty()) {
IAOMMU = Integer.parseInt(s);
} else {
IAOMMU = Integer.MIN_VALUE;
}
}

protected final void initIAOTHP3(String s) {
if (!s.trim().isEmpty()) {
IAOTHP3 = Byte.parseByte(s);
} else {
IAOTHP3 = Byte.MIN_VALUE;
}
}

protected final void initIAOWEME(String s) {
if (!s.trim().isEmpty()) {
IAOWEME = Byte.parseByte(s);
} else {
IAOWEME = Byte.MIN_VALUE;
}
}

protected final void initIAOWEML(String s) {
if (!s.trim().isEmpty()) {
IAOWEML = Short.parseShort(s);
} else {
IAOWEML = Short.MIN_VALUE;
}
}

protected final void initIAOWEMR(String s) {
if (!s.trim().isEmpty()) {
IAOWEMR = Byte.parseByte(s);
} else {
IAOWEMR = Byte.MIN_VALUE;
}
}

protected final void initIAOWEMU(String s) {
if (!s.trim().isEmpty()) {
IAOWEMU = Short.parseShort(s);
} else {
IAOWEMU = Short.MIN_VALUE;
}
}

protected final void initIAP39(String s) {
if (!s.trim().isEmpty()) {
IAP39 = Byte.parseByte(s);
} else {
IAP39 = Byte.MIN_VALUE;
}
}

protected final void initIAP40(String s) {
if (!s.trim().isEmpty()) {
IAP40 = Byte.parseByte(s);
} else {
IAP40 = Byte.MIN_VALUE;
}
}

protected final void initIAP41(String s) {
if (!s.trim().isEmpty()) {
IAP41 = Byte.parseByte(s);
} else {
IAP41 = Byte.MIN_VALUE;
}
}

protected final void initIAP42(String s) {
if (!s.trim().isEmpty()) {
IAP42 = Byte.parseByte(s);
} else {
IAP42 = Byte.MIN_VALUE;
}
}

protected final void initIAP43(String s) {
if (!s.trim().isEmpty()) {
IAP43 = Byte.parseByte(s);
} else {
IAP43 = Byte.MIN_VALUE;
}
}

protected final void initIAP44(String s) {
if (!s.trim().isEmpty()) {
IAP44 = Byte.parseByte(s);
} else {
IAP44 = Byte.MIN_VALUE;
}
}

protected final void initIAP45(String s) {
if (!s.trim().isEmpty()) {
IAP45 = Byte.parseByte(s);
} else {
IAP45 = Byte.MIN_VALUE;
}
}

protected final void initIAP46(String s) {
if (!s.trim().isEmpty()) {
IAP46 = Byte.parseByte(s);
} else {
IAP46 = Byte.MIN_VALUE;
}
}

protected final void initIAP47(String s) {
if (!s.trim().isEmpty()) {
IAP47 = Byte.parseByte(s);
} else {
IAP47 = Byte.MIN_VALUE;
}
}

protected final void initIAP48(String s) {
if (!s.trim().isEmpty()) {
IAP48 = Byte.parseByte(s);
} else {
IAP48 = Byte.MIN_VALUE;
}
}

protected final void initIAP49(String s) {
if (!s.trim().isEmpty()) {
IAP49 = Byte.parseByte(s);
} else {
IAP49 = Byte.MIN_VALUE;
}
}

protected final void initIAP50(String s) {
if (!s.trim().isEmpty()) {
IAP50 = Byte.parseByte(s);
} else {
IAP50 = Byte.MIN_VALUE;
}
}

protected final void initIAP51(String s) {
if (!s.trim().isEmpty()) {
IAP51 = Byte.parseByte(s);
} else {
IAP51 = Byte.MIN_VALUE;
}
}

protected final void initIAP52(String s) {
if (!s.trim().isEmpty()) {
IAP52 = Byte.parseByte(s);
} else {
IAP52 = Byte.MIN_VALUE;
}
}

protected final void initIAP53(String s) {
if (!s.trim().isEmpty()) {
IAP53 = Byte.parseByte(s);
} else {
IAP53 = Byte.MIN_VALUE;
}
}

protected final void initIAP54(String s) {
if (!s.trim().isEmpty()) {
IAP54 = Byte.parseByte(s);
} else {
IAP54 = Byte.MIN_VALUE;
}
}

protected final void initIAP55(String s) {
if (!s.trim().isEmpty()) {
IAP55 = Byte.parseByte(s);
} else {
IAP55 = Byte.MIN_VALUE;
}
}

protected final void initIAP56(String s) {
if (!s.trim().isEmpty()) {
IAP56 = Byte.parseByte(s);
} else {
IAP56 = Byte.MIN_VALUE;
}
}

protected final void initIAP57(String s) {
if (!s.trim().isEmpty()) {
IAP57 = Byte.parseByte(s);
} else {
IAP57 = Byte.MIN_VALUE;
}
}

protected final void initIAP58(String s) {
if (!s.trim().isEmpty()) {
IAP58 = Byte.parseByte(s);
} else {
IAP58 = Byte.MIN_VALUE;
}
}

protected final void initIAP59(String s) {
if (!s.trim().isEmpty()) {
IAP59 = Byte.parseByte(s);
} else {
IAP59 = Byte.MIN_VALUE;
}
}

protected final void initIAP60(String s) {
if (!s.trim().isEmpty()) {
IAP60 = Byte.parseByte(s);
} else {
IAP60 = Byte.MIN_VALUE;
}
}

protected final void initIAP61(String s) {
if (!s.trim().isEmpty()) {
IAP61 = Byte.parseByte(s);
} else {
IAP61 = Byte.MIN_VALUE;
}
}

protected final void initIAP62(String s) {
if (!s.trim().isEmpty()) {
IAP62 = Byte.parseByte(s);
} else {
IAP62 = Byte.MIN_VALUE;
}
}

protected final void initIAP63(String s) {
if (!s.trim().isEmpty()) {
IAP63 = Byte.parseByte(s);
} else {
IAP63 = Byte.MIN_VALUE;
}
}

protected final void initIAP64(String s) {
if (!s.trim().isEmpty()) {
IAP64 = Byte.parseByte(s);
} else {
IAP64 = Byte.MIN_VALUE;
}
}

protected final void initIAP65(String s) {
if (!s.trim().isEmpty()) {
IAP65 = Byte.parseByte(s);
} else {
IAP65 = Byte.MIN_VALUE;
}
}

protected final void initIAP66(String s) {
if (!s.trim().isEmpty()) {
IAP66 = Byte.parseByte(s);
} else {
IAP66 = Byte.MIN_VALUE;
}
}

protected final void initIAP67(String s) {
if (!s.trim().isEmpty()) {
IAP67 = Byte.parseByte(s);
} else {
IAP67 = Byte.MIN_VALUE;
}
}

protected final void initIAP68(String s) {
if (!s.trim().isEmpty()) {
IAP68 = Byte.parseByte(s);
} else {
IAP68 = Byte.MIN_VALUE;
}
}

protected final void initIAP69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAP69 = false;
} else {
IAP69 = true;
}
}
}

protected final void initIAP70(String s) {
if (!s.trim().isEmpty()) {
IAP70 = Byte.parseByte(s);
} else {
IAP70 = Byte.MIN_VALUE;
}
}

protected final void initIAP71(String s) {
if (!s.trim().isEmpty()) {
IAP71 = Byte.parseByte(s);
} else {
IAP71 = Byte.MIN_VALUE;
}
}

protected final void initIAP72(String s) {
if (!s.trim().isEmpty()) {
IAP72 = Byte.parseByte(s);
} else {
IAP72 = Byte.MIN_VALUE;
}
}

protected final void initIAPAY(String s) {
if (!s.trim().isEmpty()) {
IAPAY = Byte.parseByte(s);
} else {
IAPAY = Byte.MIN_VALUE;
}
}

protected final void initIAPAY2(String s) {
if (!s.trim().isEmpty()) {
IAPAY2 = Byte.parseByte(s);
} else {
IAPAY2 = Byte.MIN_VALUE;
}
}

protected final void initIAPAY3(String s) {
if (!s.trim().isEmpty()) {
IAPAY3 = Byte.parseByte(s);
} else {
IAPAY3 = Byte.MIN_VALUE;
}
}

protected final void initIAPAYR(String s) {
if (!s.trim().isEmpty()) {
IAPAYR = Byte.parseByte(s);
} else {
IAPAYR = Byte.MIN_VALUE;
}
}

protected final void initIAPAYR2(String s) {
if (!s.trim().isEmpty()) {
IAPAYR2 = Byte.parseByte(s);
} else {
IAPAYR2 = Byte.MIN_VALUE;
}
}

protected final void initIAPAYR3(String s) {
if (!s.trim().isEmpty()) {
IAPAYR3 = Byte.parseByte(s);
} else {
IAPAYR3 = Byte.MIN_VALUE;
}
}

protected final void initIAPAYW11(String s) {
if (!s.trim().isEmpty()) {
IAPAYW11 = Byte.parseByte(s);
} else {
IAPAYW11 = Byte.MIN_VALUE;
}
}

protected final void initIAPK95(String s) {
if (!s.trim().isEmpty()) {
IAPK95 = Byte.parseByte(s);
} else {
IAPK95 = Byte.MIN_VALUE;
}
}

protected final void initIAPK96(String s) {
if (!s.trim().isEmpty()) {
IAPK96 = Byte.parseByte(s);
} else {
IAPK96 = Byte.MIN_VALUE;
}
}

protected final void initIAPKGW(String s) {
if (!s.trim().isEmpty()) {
IAPKGW = Byte.parseByte(s);
} else {
IAPKGW = Byte.MIN_VALUE;
}
}

protected final void initIAPKIOB(String s) {
if (!s.trim().isEmpty()) {
IAPKIOB = Byte.parseByte(s);
} else {
IAPKIOB = Byte.MIN_VALUE;
}
}

protected final void initIAPKLI(String s) {
if (!s.trim().isEmpty()) {
IAPKLI = Byte.parseByte(s);
} else {
IAPKLI = Byte.MIN_VALUE;
}
}

protected final void initIAPKM1E(String s) {
if (!s.trim().isEmpty()) {
IAPKM1E = Byte.parseByte(s);
} else {
IAPKM1E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM1L(String s) {
if (!s.trim().isEmpty()) {
IAPKM1L = Integer.parseInt(s);
} else {
IAPKM1L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM1R(String s) {
if (!s.trim().isEmpty()) {
IAPKM1R = Byte.parseByte(s);
} else {
IAPKM1R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM1U(String s) {
if (!s.trim().isEmpty()) {
IAPKM1U = Integer.parseInt(s);
} else {
IAPKM1U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM2E(String s) {
if (!s.trim().isEmpty()) {
IAPKM2E = Byte.parseByte(s);
} else {
IAPKM2E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM2L(String s) {
if (!s.trim().isEmpty()) {
IAPKM2L = Integer.parseInt(s);
} else {
IAPKM2L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM2R(String s) {
if (!s.trim().isEmpty()) {
IAPKM2R = Byte.parseByte(s);
} else {
IAPKM2R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM2U(String s) {
if (!s.trim().isEmpty()) {
IAPKM2U = Integer.parseInt(s);
} else {
IAPKM2U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM3E(String s) {
if (!s.trim().isEmpty()) {
IAPKM3E = Byte.parseByte(s);
} else {
IAPKM3E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM3L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPKM3L = false;
} else {
IAPKM3L = true;
}
}
}

protected final void initIAPKM3R(String s) {
if (!s.trim().isEmpty()) {
IAPKM3R = Byte.parseByte(s);
} else {
IAPKM3R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM3U(String s) {
if (!s.trim().isEmpty()) {
IAPKM3U = Short.parseShort(s);
} else {
IAPKM3U = Short.MIN_VALUE;
}
}

protected final void initIAPKM4E(String s) {
if (!s.trim().isEmpty()) {
IAPKM4E = Byte.parseByte(s);
} else {
IAPKM4E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM4L(String s) {
if (!s.trim().isEmpty()) {
IAPKM4L = Short.parseShort(s);
} else {
IAPKM4L = Short.MIN_VALUE;
}
}

protected final void initIAPKM4R(String s) {
if (!s.trim().isEmpty()) {
IAPKM4R = Byte.parseByte(s);
} else {
IAPKM4R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM4U(String s) {
if (!s.trim().isEmpty()) {
IAPKM4U = Short.parseShort(s);
} else {
IAPKM4U = Short.MIN_VALUE;
}
}

protected final void initIAPKM5E(String s) {
if (!s.trim().isEmpty()) {
IAPKM5E = Byte.parseByte(s);
} else {
IAPKM5E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM5L(String s) {
if (!s.trim().isEmpty()) {
IAPKM5L = Integer.parseInt(s);
} else {
IAPKM5L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM5R(String s) {
if (!s.trim().isEmpty()) {
IAPKM5R = Byte.parseByte(s);
} else {
IAPKM5R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM5U(String s) {
if (!s.trim().isEmpty()) {
IAPKM5U = Integer.parseInt(s);
} else {
IAPKM5U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM6E(String s) {
if (!s.trim().isEmpty()) {
IAPKM6E = Byte.parseByte(s);
} else {
IAPKM6E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM6L(String s) {
if (!s.trim().isEmpty()) {
IAPKM6L = Integer.parseInt(s);
} else {
IAPKM6L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM6R(String s) {
if (!s.trim().isEmpty()) {
IAPKM6R = Byte.parseByte(s);
} else {
IAPKM6R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM6U(String s) {
if (!s.trim().isEmpty()) {
IAPKM6U = Integer.parseInt(s);
} else {
IAPKM6U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM7E(String s) {
if (!s.trim().isEmpty()) {
IAPKM7E = Byte.parseByte(s);
} else {
IAPKM7E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM7L(String s) {
if (!s.trim().isEmpty()) {
IAPKM7L = Short.parseShort(s);
} else {
IAPKM7L = Short.MIN_VALUE;
}
}

protected final void initIAPKM7R(String s) {
if (!s.trim().isEmpty()) {
IAPKM7R = Byte.parseByte(s);
} else {
IAPKM7R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM7U(String s) {
if (!s.trim().isEmpty()) {
IAPKM7U = Short.parseShort(s);
} else {
IAPKM7U = Short.MIN_VALUE;
}
}

protected final void initIAPKM85(String s) {
if (!s.trim().isEmpty()) {
IAPKM85 = Byte.parseByte(s);
} else {
IAPKM85 = Byte.MIN_VALUE;
}
}

protected final void initIAPKM86(String s) {
if (!s.trim().isEmpty()) {
IAPKM86 = Byte.parseByte(s);
} else {
IAPKM86 = Byte.MIN_VALUE;
}
}

protected final void initIAPKM8E(String s) {
if (!s.trim().isEmpty()) {
IAPKM8E = Byte.parseByte(s);
} else {
IAPKM8E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM8L(String s) {
if (!s.trim().isEmpty()) {
IAPKM8L = Integer.parseInt(s);
} else {
IAPKM8L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM8R(String s) {
if (!s.trim().isEmpty()) {
IAPKM8R = Byte.parseByte(s);
} else {
IAPKM8R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM8U(String s) {
if (!s.trim().isEmpty()) {
IAPKM8U = Integer.parseInt(s);
} else {
IAPKM8U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM96(String s) {
if (!s.trim().isEmpty()) {
IAPKM96 = Byte.parseByte(s);
} else {
IAPKM96 = Byte.MIN_VALUE;
}
}

protected final void initIAPKMGW(String s) {
if (!s.trim().isEmpty()) {
IAPKMGW = Byte.parseByte(s);
} else {
IAPKMGW = Byte.MIN_VALUE;
}
}

protected final void initIAPKMIOB(String s) {
if (!s.trim().isEmpty()) {
IAPKMIOB = Byte.parseByte(s);
} else {
IAPKMIOB = Byte.MIN_VALUE;
}
}

protected final void initIAPKMLI(String s) {
if (!s.trim().isEmpty()) {
IAPKMLI = Byte.parseByte(s);
} else {
IAPKMLI = Byte.MIN_VALUE;
}
}

protected final void initIAPKMOIP(String s) {
if (!s.trim().isEmpty()) {
IAPKMOIP = Byte.parseByte(s);
} else {
IAPKMOIP = Byte.MIN_VALUE;
}
}

protected final void initIAPKMPAP(String s) {
if (!s.trim().isEmpty()) {
IAPKMPAP = Byte.parseByte(s);
} else {
IAPKMPAP = Byte.MIN_VALUE;
}
}

protected final void initIAPKMPP(String s) {
if (!s.trim().isEmpty()) {
IAPKMPP = Byte.parseByte(s);
} else {
IAPKMPP = Byte.MIN_VALUE;
}
}

protected final void initIAPKMRP(String s) {
if (!s.trim().isEmpty()) {
IAPKMRP = Byte.parseByte(s);
} else {
IAPKMRP = Byte.MIN_VALUE;
}
}

protected final void initIAPKOIP(String s) {
if (!s.trim().isEmpty()) {
IAPKOIP = Byte.parseByte(s);
} else {
IAPKOIP = Byte.MIN_VALUE;
}
}

protected final void initIAPKPAP(String s) {
if (!s.trim().isEmpty()) {
IAPKPAP = Byte.parseByte(s);
} else {
IAPKPAP = Byte.MIN_VALUE;
}
}

protected final void initIAPKPP(String s) {
if (!s.trim().isEmpty()) {
IAPKPP = Byte.parseByte(s);
} else {
IAPKPP = Byte.MIN_VALUE;
}
}

protected final void initIAPKRP(String s) {
if (!s.trim().isEmpty()) {
IAPKRP = Byte.parseByte(s);
} else {
IAPKRP = Byte.MIN_VALUE;
}
}

protected final void initIAPLW(String s) {
if (!s.trim().isEmpty()) {
IAPLW = Byte.parseByte(s);
} else {
IAPLW = Byte.MIN_VALUE;
}
}

protected final void initIAPLY(String s) {
if (!s.trim().isEmpty()) {
IAPLY = Byte.parseByte(s);
} else {
IAPLY = Byte.MIN_VALUE;
}
}

protected final void initIAPLYP(String s) {
if (!s.trim().isEmpty()) {
IAPLYP = Byte.parseByte(s);
} else {
IAPLYP = Byte.MIN_VALUE;
}
}

protected final void initIAPLYW(String s) {
if (!s.trim().isEmpty()) {
IAPLYW = Byte.parseByte(s);
} else {
IAPLYW = Byte.MIN_VALUE;
}
}

protected final void initIAPPAFE(String s) {
if (!s.trim().isEmpty()) {
IAPPAFE = Byte.parseByte(s);
} else {
IAPPAFE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPPAFL = false;
} else {
IAPPAFL = true;
}
}
}

protected final void initIAPPAFR(String s) {
if (!s.trim().isEmpty()) {
IAPPAFR = Byte.parseByte(s);
} else {
IAPPAFR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAFU(String s) {
if (!s.trim().isEmpty()) {
IAPPAFU = Short.parseShort(s);
} else {
IAPPAFU = Short.MIN_VALUE;
}
}

protected final void initIAPPAME(String s) {
if (!s.trim().isEmpty()) {
IAPPAME = Byte.parseByte(s);
} else {
IAPPAME = Byte.MIN_VALUE;
}
}

protected final void initIAPPAML(String s) {
if (!s.trim().isEmpty()) {
IAPPAML = Short.parseShort(s);
} else {
IAPPAML = Short.MIN_VALUE;
}
}

protected final void initIAPPAMR(String s) {
if (!s.trim().isEmpty()) {
IAPPAMR = Byte.parseByte(s);
} else {
IAPPAMR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAMU(String s) {
if (!s.trim().isEmpty()) {
IAPPAMU = Short.parseShort(s);
} else {
IAPPAMU = Short.MIN_VALUE;
}
}

protected final void initIAPPAOE(String s) {
if (!s.trim().isEmpty()) {
IAPPAOE = Byte.parseByte(s);
} else {
IAPPAOE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAOL(String s) {
if (!s.trim().isEmpty()) {
IAPPAOL = Short.parseShort(s);
} else {
IAPPAOL = Short.MIN_VALUE;
}
}

protected final void initIAPPAOR(String s) {
if (!s.trim().isEmpty()) {
IAPPAOR = Byte.parseByte(s);
} else {
IAPPAOR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAOU(String s) {
if (!s.trim().isEmpty()) {
IAPPAOU = Short.parseShort(s);
} else {
IAPPAOU = Short.MIN_VALUE;
}
}

protected final void initIAPPAWE(String s) {
if (!s.trim().isEmpty()) {
IAPPAWE = Byte.parseByte(s);
} else {
IAPPAWE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAWL(String s) {
if (!s.trim().isEmpty()) {
IAPPAWL = Short.parseShort(s);
} else {
IAPPAWL = Short.MIN_VALUE;
}
}

protected final void initIAPPAWR(String s) {
if (!s.trim().isEmpty()) {
IAPPAWR = Byte.parseByte(s);
} else {
IAPPAWR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAWU(String s) {
if (!s.trim().isEmpty()) {
IAPPAWU = Short.parseShort(s);
} else {
IAPPAWU = Short.MIN_VALUE;
}
}

protected final void initIAPPAYE(String s) {
if (!s.trim().isEmpty()) {
IAPPAYE = Byte.parseByte(s);
} else {
IAPPAYE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAYL(String s) {
if (!s.trim().isEmpty()) {
IAPPAYL = Short.parseShort(s);
} else {
IAPPAYL = Short.MIN_VALUE;
}
}

protected final void initIAPPAYR(String s) {
if (!s.trim().isEmpty()) {
IAPPAYR = Byte.parseByte(s);
} else {
IAPPAYR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAYU(String s) {
if (!s.trim().isEmpty()) {
IAPPAYU = Short.parseShort(s);
} else {
IAPPAYU = Short.MIN_VALUE;
}
}

protected final void initIAPPEIE(String s) {
if (!s.trim().isEmpty()) {
IAPPEIE = Byte.parseByte(s);
} else {
IAPPEIE = Byte.MIN_VALUE;
}
}

protected final void initIAPPEIL(String s) {
if (!s.trim().isEmpty()) {
IAPPEIL = Short.parseShort(s);
} else {
IAPPEIL = Short.MIN_VALUE;
}
}

protected final void initIAPPEIR(String s) {
if (!s.trim().isEmpty()) {
IAPPEIR = Byte.parseByte(s);
} else {
IAPPEIR = Byte.MIN_VALUE;
}
}

protected final void initIAPPEIU(String s) {
if (!s.trim().isEmpty()) {
IAPPEIU = Short.parseShort(s);
} else {
IAPPEIU = Short.MIN_VALUE;
}
}

protected final void initIAPROP95(String s) {
if (!s.trim().isEmpty()) {
IAPROP95 = Byte.parseByte(s);
} else {
IAPROP95 = Byte.MIN_VALUE;
}
}

protected final void initIAPROP96(String s) {
if (!s.trim().isEmpty()) {
IAPROP96 = Byte.parseByte(s);
} else {
IAPROP96 = Byte.MIN_VALUE;
}
}

protected final void initIAPROPFA(String s) {
if (!s.trim().isEmpty()) {
IAPROPFA = Byte.parseByte(s);
} else {
IAPROPFA = Byte.MIN_VALUE;
}
}

protected final void initIAPROPHO(String s) {
if (!s.trim().isEmpty()) {
IAPROPHO = Byte.parseByte(s);
} else {
IAPROPHO = Byte.MIN_VALUE;
}
}

protected final void initIAPROPIN(String s) {
if (!s.trim().isEmpty()) {
IAPROPIN = Byte.parseByte(s);
} else {
IAPROPIN = Byte.MIN_VALUE;
}
}

protected final void initIAPROPOL(String s) {
if (!s.trim().isEmpty()) {
IAPROPOL = Byte.parseByte(s);
} else {
IAPROPOL = Byte.MIN_VALUE;
}
}

protected final void initIAPROPOW(String s) {
if (!s.trim().isEmpty()) {
IAPROPOW = Byte.parseByte(s);
} else {
IAPROPOW = Byte.MIN_VALUE;
}
}

protected final void initIAPROPTR(String s) {
if (!s.trim().isEmpty()) {
IAPROPTR = Byte.parseByte(s);
} else {
IAPROPTR = Byte.MIN_VALUE;
}
}

protected final void initIAPYW2(String s) {
if (!s.trim().isEmpty()) {
IAPYW2 = Byte.parseByte(s);
} else {
IAPYW2 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW4(String s) {
if (!s.trim().isEmpty()) {
IAPYW4 = Byte.parseByte(s);
} else {
IAPYW4 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW5(String s) {
if (!s.trim().isEmpty()) {
IAPYW5 = Byte.parseByte(s);
} else {
IAPYW5 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW6(String s) {
if (!s.trim().isEmpty()) {
IAPYW6 = Byte.parseByte(s);
} else {
IAPYW6 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW7(String s) {
if (!s.trim().isEmpty()) {
IAPYW7 = Byte.parseByte(s);
} else {
IAPYW7 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW8(String s) {
if (!s.trim().isEmpty()) {
IAPYW8 = Byte.parseByte(s);
} else {
IAPYW8 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW9(String s) {
if (!s.trim().isEmpty()) {
IAPYW9 = Byte.parseByte(s);
} else {
IAPYW9 = Byte.MIN_VALUE;
}
}

protected final void initIARECE(String s) {
if (!s.trim().isEmpty()) {
IARECE = Byte.parseByte(s);
} else {
IARECE = Byte.MIN_VALUE;
}
}

protected final void initIARECL(String s) {
if (!s.trim().isEmpty()) {
IARECL = Short.parseShort(s);
} else {
IARECL = Short.MIN_VALUE;
}
}

protected final void initIARECR(String s) {
if (!s.trim().isEmpty()) {
IARECR = Byte.parseByte(s);
} else {
IARECR = Byte.MIN_VALUE;
}
}

protected final void initIARECU(String s) {
if (!s.trim().isEmpty()) {
IARECU = Short.parseShort(s);
} else {
IARECU = Short.MIN_VALUE;
}
}

protected final void initIAREGM3(String s) {
if (!s.trim().isEmpty()) {
IAREGM3 = Short.parseShort(s);
} else {
IAREGM3 = Short.MIN_VALUE;
}
}

protected final void initIAREGO3(String s) {
if (!s.trim().isEmpty()) {
IAREGO3 = Byte.parseByte(s);
} else {
IAREGO3 = Byte.MIN_VALUE;
}
}

protected final void initIAREPFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFE = false;
} else {
IAREPFE = true;
}
}
}

protected final void initIAREPFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFL = false;
} else {
IAREPFL = true;
}
}
}

protected final void initIAREPFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFR = false;
} else {
IAREPFR = true;
}
}
}

protected final void initIAREPFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFU = false;
} else {
IAREPFU = true;
}
}
}

protected final void initIAREPME(String s) {
if (!s.trim().isEmpty()) {
IAREPME = Byte.parseByte(s);
} else {
IAREPME = Byte.MIN_VALUE;
}
}

protected final void initIAREPML(String s) {
if (!s.trim().isEmpty()) {
IAREPML = Byte.parseByte(s);
} else {
IAREPML = Byte.MIN_VALUE;
}
}

protected final void initIAREPMR(String s) {
if (!s.trim().isEmpty()) {
IAREPMR = Byte.parseByte(s);
} else {
IAREPMR = Byte.MIN_VALUE;
}
}

protected final void initIAREPMU(String s) {
if (!s.trim().isEmpty()) {
IAREPMU = Short.parseShort(s);
} else {
IAREPMU = Short.MIN_VALUE;
}
}

protected final void initIAREPOE(String s) {
if (!s.trim().isEmpty()) {
IAREPOE = Byte.parseByte(s);
} else {
IAREPOE = Byte.MIN_VALUE;
}
}

protected final void initIAREPOL(String s) {
if (!s.trim().isEmpty()) {
IAREPOL = Short.parseShort(s);
} else {
IAREPOL = Short.MIN_VALUE;
}
}

protected final void initIAREPOR(String s) {
if (!s.trim().isEmpty()) {
IAREPOR = Byte.parseByte(s);
} else {
IAREPOR = Byte.MIN_VALUE;
}
}

protected final void initIAREPOU(String s) {
if (!s.trim().isEmpty()) {
IAREPOU = Short.parseShort(s);
} else {
IAREPOU = Short.MIN_VALUE;
}
}

protected final void initIAREPWE(String s) {
if (!s.trim().isEmpty()) {
IAREPWE = Byte.parseByte(s);
} else {
IAREPWE = Byte.MIN_VALUE;
}
}

protected final void initIAREPWL(String s) {
if (!s.trim().isEmpty()) {
IAREPWL = Byte.parseByte(s);
} else {
IAREPWL = Byte.MIN_VALUE;
}
}

protected final void initIAREPWR(String s) {
if (!s.trim().isEmpty()) {
IAREPWR = Byte.parseByte(s);
} else {
IAREPWR = Byte.MIN_VALUE;
}
}

protected final void initIAREPWU(String s) {
if (!s.trim().isEmpty()) {
IAREPWU = Byte.parseByte(s);
} else {
IAREPWU = Byte.MIN_VALUE;
}
}

protected final void initIAREPYE(String s) {
if (!s.trim().isEmpty()) {
IAREPYE = Byte.parseByte(s);
} else {
IAREPYE = Byte.MIN_VALUE;
}
}

protected final void initIAREPYL(String s) {
if (!s.trim().isEmpty()) {
IAREPYL = Byte.parseByte(s);
} else {
IAREPYL = Byte.MIN_VALUE;
}
}

protected final void initIAREPYR(String s) {
if (!s.trim().isEmpty()) {
IAREPYR = Byte.parseByte(s);
} else {
IAREPYR = Byte.MIN_VALUE;
}
}

protected final void initIAREPYU(String s) {
if (!s.trim().isEmpty()) {
IAREPYU = Short.parseShort(s);
} else {
IAREPYU = Short.MIN_VALUE;
}
}

protected final void initIARG2FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FE = false;
} else {
IARG2FE = true;
}
}
}

protected final void initIARG2FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FL = false;
} else {
IARG2FL = true;
}
}
}

protected final void initIARG2FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FR = false;
} else {
IARG2FR = true;
}
}
}

protected final void initIARG2FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FU = false;
} else {
IARG2FU = true;
}
}
}

protected final void initIARG2ME(String s) {
if (!s.trim().isEmpty()) {
IARG2ME = Byte.parseByte(s);
} else {
IARG2ME = Byte.MIN_VALUE;
}
}

protected final void initIARG2ML(String s) {
if (!s.trim().isEmpty()) {
IARG2ML = Short.parseShort(s);
} else {
IARG2ML = Short.MIN_VALUE;
}
}

protected final void initIARG2MR(String s) {
if (!s.trim().isEmpty()) {
IARG2MR = Byte.parseByte(s);
} else {
IARG2MR = Byte.MIN_VALUE;
}
}

protected final void initIARG2MU(String s) {
if (!s.trim().isEmpty()) {
IARG2MU = Short.parseShort(s);
} else {
IARG2MU = Short.MIN_VALUE;
}
}

protected final void initIARG2OE(String s) {
if (!s.trim().isEmpty()) {
IARG2OE = Byte.parseByte(s);
} else {
IARG2OE = Byte.MIN_VALUE;
}
}

protected final void initIARG2OL(String s) {
if (!s.trim().isEmpty()) {
IARG2OL = Byte.parseByte(s);
} else {
IARG2OL = Byte.MIN_VALUE;
}
}

protected final void initIARG2OR(String s) {
if (!s.trim().isEmpty()) {
IARG2OR = Byte.parseByte(s);
} else {
IARG2OR = Byte.MIN_VALUE;
}
}

protected final void initIARG2OU(String s) {
if (!s.trim().isEmpty()) {
IARG2OU = Byte.parseByte(s);
} else {
IARG2OU = Byte.MIN_VALUE;
}
}

protected final void initIARG2WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WE = false;
} else {
IARG2WE = true;
}
}
}

protected final void initIARG2WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WL = false;
} else {
IARG2WL = true;
}
}
}

protected final void initIARG2WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WR = false;
} else {
IARG2WR = true;
}
}
}

protected final void initIARG2WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WU = false;
} else {
IARG2WU = true;
}
}
}

protected final void initIARG2YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YE = false;
} else {
IARG2YE = true;
}
}
}

protected final void initIARG2YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YL = false;
} else {
IARG2YL = true;
}
}
}

protected final void initIARG2YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YR = false;
} else {
IARG2YR = true;
}
}
}

protected final void initIARG2YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YU = false;
} else {
IARG2YU = true;
}
}
}

protected final void initIARG3FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3FE = false;
} else {
IARG3FE = true;
}
}
}

protected final void initIARG3FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3FL = false;
} else {
IARG3FL = true;
}
}
}

protected final void initIARG3FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3FR = false;
} else {
IARG3FR = true;
}
}
}

protected final void initIARG3FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3FU = false;
} else {
IARG3FU = true;
}
}
}

protected final void initIARG3ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3ME = false;
} else {
IARG3ME = true;
}
}
}

protected final void initIARG3ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3ML = false;
} else {
IARG3ML = true;
}
}
}

protected final void initIARG3MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3MR = false;
} else {
IARG3MR = true;
}
}
}

protected final void initIARG3MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3MU = false;
} else {
IARG3MU = true;
}
}
}

protected final void initIARG3OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3OE = false;
} else {
IARG3OE = true;
}
}
}

protected final void initIARG3OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3OL = false;
} else {
IARG3OL = true;
}
}
}

protected final void initIARG3OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3OR = false;
} else {
IARG3OR = true;
}
}
}

protected final void initIARG3OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3OU = false;
} else {
IARG3OU = true;
}
}
}

protected final void initIARG3WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3WE = false;
} else {
IARG3WE = true;
}
}
}

protected final void initIARG3WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3WL = false;
} else {
IARG3WL = true;
}
}
}

protected final void initIARG3WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3WR = false;
} else {
IARG3WR = true;
}
}
}

protected final void initIARG3WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3WU = false;
} else {
IARG3WU = true;
}
}
}

protected final void initIARG3YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3YE = false;
} else {
IARG3YE = true;
}
}
}

protected final void initIARG3YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3YL = false;
} else {
IARG3YL = true;
}
}
}

protected final void initIARG3YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3YR = false;
} else {
IARG3YR = true;
}
}
}

protected final void initIARG3YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3YU = false;
} else {
IARG3YU = true;
}
}
}

protected final void initIARGFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFE = false;
} else {
IARGFE = true;
}
}
}

protected final void initIARGFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFL = false;
} else {
IARGFL = true;
}
}
}

protected final void initIARGFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFR = false;
} else {
IARGFR = true;
}
}
}

protected final void initIARGFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFU = false;
} else {
IARGFU = true;
}
}
}

protected final void initIARGM(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGM = false;
} else {
IARGM = true;
}
}
}

protected final void initIARGME(String s) {
if (!s.trim().isEmpty()) {
IARGME = Byte.parseByte(s);
} else {
IARGME = Byte.MIN_VALUE;
}
}

protected final void initIARGML(String s) {
if (!s.trim().isEmpty()) {
IARGML = Short.parseShort(s);
} else {
IARGML = Short.MIN_VALUE;
}
}

protected final void initIARGMR(String s) {
if (!s.trim().isEmpty()) {
IARGMR = Byte.parseByte(s);
} else {
IARGMR = Byte.MIN_VALUE;
}
}

protected final void initIARGMU(String s) {
if (!s.trim().isEmpty()) {
IARGMU = Short.parseShort(s);
} else {
IARGMU = Short.MIN_VALUE;
}
}

protected final void initIARGMW(String s) {
if (!s.trim().isEmpty()) {
IARGMW = Byte.parseByte(s);
} else {
IARGMW = Byte.MIN_VALUE;
}
}

protected final void initIARGMW2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGMW2 = false;
} else {
IARGMW2 = true;
}
}
}

protected final void initIARGMWP(String s) {
if (!s.trim().isEmpty()) {
IARGMWP = Byte.parseByte(s);
} else {
IARGMWP = Byte.MIN_VALUE;
}
}

protected final void initIARGOE(String s) {
if (!s.trim().isEmpty()) {
IARGOE = Byte.parseByte(s);
} else {
IARGOE = Byte.MIN_VALUE;
}
}

protected final void initIARGOL(String s) {
if (!s.trim().isEmpty()) {
IARGOL = Short.parseShort(s);
} else {
IARGOL = Short.MIN_VALUE;
}
}

protected final void initIARGOR(String s) {
if (!s.trim().isEmpty()) {
IARGOR = Byte.parseByte(s);
} else {
IARGOR = Byte.MIN_VALUE;
}
}

protected final void initIARGOU(String s) {
if (!s.trim().isEmpty()) {
IARGOU = Short.parseShort(s);
} else {
IARGOU = Short.MIN_VALUE;
}
}

protected final void initIARGWE(String s) {
if (!s.trim().isEmpty()) {
IARGWE = Byte.parseByte(s);
} else {
IARGWE = Byte.MIN_VALUE;
}
}

protected final void initIARGWL(String s) {
if (!s.trim().isEmpty()) {
IARGWL = Byte.parseByte(s);
} else {
IARGWL = Byte.MIN_VALUE;
}
}

protected final void initIARGWR(String s) {
if (!s.trim().isEmpty()) {
IARGWR = Byte.parseByte(s);
} else {
IARGWR = Byte.MIN_VALUE;
}
}

protected final void initIARGWU(String s) {
if (!s.trim().isEmpty()) {
IARGWU = Byte.parseByte(s);
} else {
IARGWU = Byte.MIN_VALUE;
}
}

protected final void initIARGYE(String s) {
if (!s.trim().isEmpty()) {
IARGYE = Byte.parseByte(s);
} else {
IARGYE = Byte.MIN_VALUE;
}
}

protected final void initIARGYL(String s) {
if (!s.trim().isEmpty()) {
IARGYL = Byte.parseByte(s);
} else {
IARGYL = Byte.MIN_VALUE;
}
}

protected final void initIARGYR(String s) {
if (!s.trim().isEmpty()) {
IARGYR = Byte.parseByte(s);
} else {
IARGYR = Byte.MIN_VALUE;
}
}

protected final void initIARGYR1(String s) {
if (!s.trim().isEmpty()) {
IARGYR1 = Byte.parseByte(s);
} else {
IARGYR1 = Byte.MIN_VALUE;
}
}

protected final void initIARGYR2(String s) {
if (!s.trim().isEmpty()) {
IARGYR2 = Byte.parseByte(s);
} else {
IARGYR2 = Byte.MIN_VALUE;
}
}

protected final void initIARGYR3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGYR3 = false;
} else {
IARGYR3 = true;
}
}
}

protected final void initIARGYRP(String s) {
if (!s.trim().isEmpty()) {
IARGYRP = Byte.parseByte(s);
} else {
IARGYRP = Byte.MIN_VALUE;
}
}

protected final void initIARGYU(String s) {
if (!s.trim().isEmpty()) {
IARGYU = Byte.parseByte(s);
} else {
IARGYU = Byte.MIN_VALUE;
}
}

protected final void initIARMWA(String s) {
if (!s.trim().isEmpty()) {
IARMWA = Byte.parseByte(s);
} else {
IARMWA = Byte.MIN_VALUE;
}
}

protected final void initIARMWA2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARMWA2 = false;
} else {
IARMWA2 = true;
}
}
}

protected final void initIARMWA3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARMWA3 = false;
} else {
IARMWA3 = true;
}
}
}

protected final void initIARMWPA(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARMWPA = false;
} else {
IARMWPA = true;
}
}
}

protected final void initIASAVAE(String s) {
if (!s.trim().isEmpty()) {
IASAVAE = Byte.parseByte(s);
} else {
IASAVAE = Byte.MIN_VALUE;
}
}

protected final void initIASAVAL(String s) {
if (!s.trim().isEmpty()) {
IASAVAL = Integer.parseInt(s);
} else {
IASAVAL = Integer.MIN_VALUE;
}
}

protected final void initIASAVAR(String s) {
if (!s.trim().isEmpty()) {
IASAVAR = Byte.parseByte(s);
} else {
IASAVAR = Byte.MIN_VALUE;
}
}

protected final void initIASAVAU(String s) {
if (!s.trim().isEmpty()) {
IASAVAU = Integer.parseInt(s);
} else {
IASAVAU = Integer.MIN_VALUE;
}
}

protected final void initIASCAE(String s) {
if (!s.trim().isEmpty()) {
IASCAE = Byte.parseByte(s);
} else {
IASCAE = Byte.MIN_VALUE;
}
}

protected final void initIASCAL(String s) {
if (!s.trim().isEmpty()) {
IASCAL = Integer.parseInt(s);
} else {
IASCAL = Integer.MIN_VALUE;
}
}

protected final void initIASCAR(String s) {
if (!s.trim().isEmpty()) {
IASCAR = Byte.parseByte(s);
} else {
IASCAR = Byte.MIN_VALUE;
}
}

protected final void initIASCAU(String s) {
if (!s.trim().isEmpty()) {
IASCAU = Integer.parseInt(s);
} else {
IASCAU = Integer.MIN_VALUE;
}
}

protected final void initIASHTFOL(String s) {
if (!s.trim().isEmpty()) {
IASHTFOL = Byte.parseByte(s);
} else {
IASHTFOL = Byte.MIN_VALUE;
}
}

protected final void initIASHTMUT(String s) {
if (!s.trim().isEmpty()) {
IASHTMUT = Byte.parseByte(s);
} else {
IASHTMUT = Byte.MIN_VALUE;
}
}

protected final void initIASHTPRI(String s) {
if (!s.trim().isEmpty()) {
IASHTPRI = Byte.parseByte(s);
} else {
IASHTPRI = Byte.MIN_VALUE;
}
}

protected final void initIASHTUKL(String s) {
if (!s.trim().isEmpty()) {
IASHTUKL = Byte.parseByte(s);
} else {
IASHTUKL = Byte.MIN_VALUE;
}
}

protected final void initIASI95(String s) {
if (!s.trim().isEmpty()) {
IASI95 = Byte.parseByte(s);
} else {
IASI95 = Byte.MIN_VALUE;
}
}

protected final void initIASI96(String s) {
if (!s.trim().isEmpty()) {
IASI96 = Byte.parseByte(s);
} else {
IASI96 = Byte.MIN_VALUE;
}
}

protected final void initIASIBG(String s) {
if (!s.trim().isEmpty()) {
IASIBG = Byte.parseByte(s);
} else {
IASIBG = Byte.MIN_VALUE;
}
}

protected final void initIASICA(String s) {
if (!s.trim().isEmpty()) {
IASICA = Byte.parseByte(s);
} else {
IASICA = Byte.MIN_VALUE;
}
}

protected final void initIASIISA(String s) {
if (!s.trim().isEmpty()) {
IASIISA = Byte.parseByte(s);
} else {
IASIISA = Byte.MIN_VALUE;
}
}

protected final void initIASINS(String s) {
if (!s.trim().isEmpty()) {
IASINS = Byte.parseByte(s);
} else {
IASINS = Byte.MIN_VALUE;
}
}

protected final void initIASIOIE(String s) {
if (!s.trim().isEmpty()) {
IASIOIE = Byte.parseByte(s);
} else {
IASIOIE = Byte.MIN_VALUE;
}
}

protected final void initIASIOIL(String s) {
if (!s.trim().isEmpty()) {
IASIOIL = Short.parseShort(s);
} else {
IASIOIL = Short.MIN_VALUE;
}
}

protected final void initIASIOIR(String s) {
if (!s.trim().isEmpty()) {
IASIOIR = Byte.parseByte(s);
} else {
IASIOIR = Byte.MIN_VALUE;
}
}

protected final void initIASIOIU(String s) {
if (!s.trim().isEmpty()) {
IASIOIU = Short.parseShort(s);
} else {
IASIOIU = Short.MIN_VALUE;
}
}

protected final void initIASIOPT(String s) {
if (!s.trim().isEmpty()) {
IASIOPT = Byte.parseByte(s);
} else {
IASIOPT = Byte.MIN_VALUE;
}
}

protected final void initIASIPB(String s) {
if (!s.trim().isEmpty()) {
IASIPB = Byte.parseByte(s);
} else {
IASIPB = Byte.MIN_VALUE;
}
}

protected final void initIASIPEP(String s) {
if (!s.trim().isEmpty()) {
IASIPEP = Byte.parseByte(s);
} else {
IASIPEP = Byte.MIN_VALUE;
}
}

protected final void initIASISAE(String s) {
if (!s.trim().isEmpty()) {
IASISAE = Byte.parseByte(s);
} else {
IASISAE = Byte.MIN_VALUE;
}
}

protected final void initIASISAL(String s) {
if (!s.trim().isEmpty()) {
IASISAL = Integer.parseInt(s);
} else {
IASISAL = Integer.MIN_VALUE;
}
}

protected final void initIASISAR(String s) {
if (!s.trim().isEmpty()) {
IASISAR = Byte.parseByte(s);
} else {
IASISAR = Byte.MIN_VALUE;
}
}

protected final void initIASISAU(String s) {
if (!s.trim().isEmpty()) {
IASISAU = Integer.parseInt(s);
} else {
IASISAU = Integer.MIN_VALUE;
}
}

protected final void initIASISAV(String s) {
if (!s.trim().isEmpty()) {
IASISAV = Byte.parseByte(s);
} else {
IASISAV = Byte.MIN_VALUE;
}
}

protected final void initIASISC(String s) {
if (!s.trim().isEmpty()) {
IASISC = Byte.parseByte(s);
} else {
IASISC = Byte.MIN_VALUE;
}
}

protected final void initIASISHA(String s) {
if (!s.trim().isEmpty()) {
IASISHA = Byte.parseByte(s);
} else {
IASISHA = Byte.MIN_VALUE;
}
}

protected final void initIASITESS(String s) {
if (!s.trim().isEmpty()) {
IASITESS = Byte.parseByte(s);
} else {
IASITESS = Byte.MIN_VALUE;
}
}

protected final void initIASIUIT(String s) {
if (!s.trim().isEmpty()) {
IASIUIT = Byte.parseByte(s);
} else {
IASIUIT = Byte.MIN_VALUE;
}
}

protected final void initIASSSE(String s) {
if (!s.trim().isEmpty()) {
IASSSE = Byte.parseByte(s);
} else {
IASSSE = Byte.MIN_VALUE;
}
}

protected final void initIASSSIE(String s) {
if (!s.trim().isEmpty()) {
IASSSIE = Byte.parseByte(s);
} else {
IASSSIE = Byte.MIN_VALUE;
}
}

protected final void initIASSSIL(String s) {
if (!s.trim().isEmpty()) {
IASSSIL = Short.parseShort(s);
} else {
IASSSIL = Short.MIN_VALUE;
}
}

protected final void initIASSSIR(String s) {
if (!s.trim().isEmpty()) {
IASSSIR = Byte.parseByte(s);
} else {
IASSSIR = Byte.MIN_VALUE;
}
}

protected final void initIASSSIU(String s) {
if (!s.trim().isEmpty()) {
IASSSIU = Short.parseShort(s);
} else {
IASSSIU = Short.MIN_VALUE;
}
}

protected final void initIASSSL(String s) {
if (!s.trim().isEmpty()) {
IASSSL = Integer.parseInt(s);
} else {
IASSSL = Integer.MIN_VALUE;
}
}

protected final void initIASSSR(String s) {
if (!s.trim().isEmpty()) {
IASSSR = Byte.parseByte(s);
} else {
IASSSR = Byte.MIN_VALUE;
}
}

protected final void initIASSSU(String s) {
if (!s.trim().isEmpty()) {
IASSSU = Integer.parseInt(s);
} else {
IASSSU = Integer.MIN_VALUE;
}
}

protected final void initIAT39(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT39 = false;
} else {
IAT39 = true;
}
}
}

protected final void initIAT40(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT40 = false;
} else {
IAT40 = true;
}
}
}

protected final void initIAT41(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT41 = false;
} else {
IAT41 = true;
}
}
}

protected final void initIAT42(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT42 = false;
} else {
IAT42 = true;
}
}
}

protected final void initIAT43(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT43 = false;
} else {
IAT43 = true;
}
}
}

protected final void initIAT44(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT44 = false;
} else {
IAT44 = true;
}
}
}

protected final void initIAT45(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT45 = false;
} else {
IAT45 = true;
}
}
}

protected final void initIAT46(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT46 = false;
} else {
IAT46 = true;
}
}
}

protected final void initIAT47(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT47 = false;
} else {
IAT47 = true;
}
}
}

protected final void initIAT48(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT48 = false;
} else {
IAT48 = true;
}
}
}

protected final void initIAT49(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT49 = false;
} else {
IAT49 = true;
}
}
}

protected final void initIAT50(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT50 = false;
} else {
IAT50 = true;
}
}
}

protected final void initIAT51(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT51 = false;
} else {
IAT51 = true;
}
}
}

protected final void initIAT52(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT52 = false;
} else {
IAT52 = true;
}
}
}

protected final void initIAT53(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT53 = false;
} else {
IAT53 = true;
}
}
}

protected final void initIAT54(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT54 = false;
} else {
IAT54 = true;
}
}
}

protected final void initIAT55(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT55 = false;
} else {
IAT55 = true;
}
}
}

protected final void initIAT56(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT56 = false;
} else {
IAT56 = true;
}
}
}

protected final void initIAT57(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT57 = false;
} else {
IAT57 = true;
}
}
}

protected final void initIAT58(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT58 = false;
} else {
IAT58 = true;
}
}
}

protected final void initIAT59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT59 = false;
} else {
IAT59 = true;
}
}
}

protected final void initIAT60(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT60 = false;
} else {
IAT60 = true;
}
}
}

protected final void initIAT61(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT61 = false;
} else {
IAT61 = true;
}
}
}

protected final void initIAT62(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT62 = false;
} else {
IAT62 = true;
}
}
}

protected final void initIAT63(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT63 = false;
} else {
IAT63 = true;
}
}
}

protected final void initIAT64(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT64 = false;
} else {
IAT64 = true;
}
}
}

protected final void initIAT65(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT65 = false;
} else {
IAT65 = true;
}
}
}

protected final void initIAT66(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT66 = false;
} else {
IAT66 = true;
}
}
}

protected final void initIAT67(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT67 = false;
} else {
IAT67 = true;
}
}
}

protected final void initIAT68(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT68 = false;
} else {
IAT68 = true;
}
}
}

protected final void initIAT69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT69 = false;
} else {
IAT69 = true;
}
}
}

protected final void initIAT70(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT70 = false;
} else {
IAT70 = true;
}
}
}

protected final void initIAT71(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT71 = false;
} else {
IAT71 = true;
}
}
}

protected final void initIAT72(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT72 = false;
} else {
IAT72 = true;
}
}
}

protected final void initIAUITE(String s) {
if (!s.trim().isEmpty()) {
IAUITE = Byte.parseByte(s);
} else {
IAUITE = Byte.MIN_VALUE;
}
}

protected final void initIAUITIE(String s) {
if (!s.trim().isEmpty()) {
IAUITIE = Byte.parseByte(s);
} else {
IAUITIE = Byte.MIN_VALUE;
}
}

protected final void initIAUITIL(String s) {
if (!s.trim().isEmpty()) {
IAUITIL = Short.parseShort(s);
} else {
IAUITIL = Short.MIN_VALUE;
}
}

protected final void initIAUITIR(String s) {
if (!s.trim().isEmpty()) {
IAUITIR = Byte.parseByte(s);
} else {
IAUITIR = Byte.MIN_VALUE;
}
}

protected final void initIAUITIU(String s) {
if (!s.trim().isEmpty()) {
IAUITIU = Short.parseShort(s);
} else {
IAUITIU = Short.MIN_VALUE;
}
}

protected final void initIAUITL(String s) {
if (!s.trim().isEmpty()) {
IAUITL = Integer.parseInt(s);
} else {
IAUITL = Integer.MIN_VALUE;
}
}

protected final void initIAUITR(String s) {
if (!s.trim().isEmpty()) {
IAUITR = Byte.parseByte(s);
} else {
IAUITR = Byte.MIN_VALUE;
}
}

protected final void initIAUITU(String s) {
if (!s.trim().isEmpty()) {
IAUITU = Integer.parseInt(s);
} else {
IAUITU = Integer.MIN_VALUE;
}
}

protected final void initIAWHMT39(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAWHMT39 = false;
} else {
IAWHMT39 = true;
}
}
}

protected final void initIFLAG_DBSR1(String s) {
if (!s.trim().isEmpty()) {
IFLAG_DBSR1 = Byte.parseByte(s);
} else {
IFLAG_DBSR1 = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_DBSR2(String s) {
if (!s.trim().isEmpty()) {
IFLAG_DBSR2 = Byte.parseByte(s);
} else {
IFLAG_DBSR2 = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_DCCONT(String s) {
if (!s.trim().isEmpty()) {
IFLAG_DCCONT = Byte.parseByte(s);
} else {
IFLAG_DCCONT = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_DCFUND(String s) {
if (!s.trim().isEmpty()) {
IFLAG_DCFUND = Byte.parseByte(s);
} else {
IFLAG_DCFUND = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_EARN(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
IFLAG_EARN = false;
} else {
IFLAG_EARN = true;
}
}
}

protected final void initIFLAG_REC(String s) {
if (!s.trim().isEmpty()) {
IFLAG_REC = Byte.parseByte(s);
} else {
IFLAG_REC = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_RTEN(String s) {
if (!s.trim().isEmpty()) {
IFLAG_RTEN = Byte.parseByte(s);
} else {
IFLAG_RTEN = Byte.MIN_VALUE;
}
}

protected final void initINRECEIPT_06(String s) {
if (!s.trim().isEmpty()) {
INRECEIPT_06 = Double.parseDouble(s);
} else {
INRECEIPT_06 = Double.NaN;
}
}

protected final void initINRECEIPT_SPA(String s) {
if (!s.trim().isEmpty()) {
INRECEIPT_SPA = Double.parseDouble(s);
} else {
INRECEIPT_SPA = Double.NaN;
}
}

protected final void initINTMTH(String s) {
if (!s.trim().isEmpty()) {
INTMTH = Byte.parseByte(s);
} else {
INTMTH = Byte.MIN_VALUE;
}
}

protected final void initINTYEAR(String s) {
if (!s.trim().isEmpty()) {
INTYEAR = Short.parseShort(s);
} else {
INTYEAR = Short.MIN_VALUE;
}
}

protected final void initMAINHH(String s) {
if (!s.trim().isEmpty()) {
MAINHH = Byte.parseByte(s);
} else {
MAINHH = Byte.MIN_VALUE;
}
}

protected final void initMAXALC(String s) {
if (!s.trim().isEmpty()) {
MAXALC = Double.parseDouble(s);
} else {
MAXALC = Double.NaN;
}
}

protected final void initMID(String s) {
if (!s.trim().isEmpty()) {
MID = Byte.parseByte(s);
} else {
MID = Byte.MIN_VALUE;
}
}

protected final void initMMAIDC(String s) {
if (!s.trim().isEmpty()) {
MMAIDC = Byte.parseByte(s);
} else {
MMAIDC = Byte.MIN_VALUE;
}
}

protected final void initMMCOM85(String s) {
if (!s.trim().isEmpty()) {
MMCOM85 = Byte.parseByte(s);
} else {
MMCOM85 = Byte.MIN_VALUE;
}
}

protected final void initMMCOM86(String s) {
if (!s.trim().isEmpty()) {
MMCOM86 = Byte.parseByte(s);
} else {
MMCOM86 = Byte.MIN_VALUE;
}
}

protected final void initMMCOMNI(String s) {
if (!s.trim().isEmpty()) {
MMCOMNI = Byte.parseByte(s);
} else {
MMCOMNI = Byte.MIN_VALUE;
}
}

protected final void initMMCOMPA(String s) {
if (!s.trim().isEmpty()) {
MMCOMPA = Byte.parseByte(s);
} else {
MMCOMPA = Byte.MIN_VALUE;
}
}

protected final void initMMCOMRF(String s) {
if (!s.trim().isEmpty()) {
MMCOMRF = Byte.parseByte(s);
} else {
MMCOMRF = Byte.MIN_VALUE;
}
}

protected final void initMMCOMSP(String s) {
if (!s.trim().isEmpty()) {
MMCOMSP = Byte.parseByte(s);
} else {
MMCOMSP = Byte.MIN_VALUE;
}
}

protected final void initMMCOMUN(String s) {
if (!s.trim().isEmpty()) {
MMCOMUN = Byte.parseByte(s);
} else {
MMCOMUN = Byte.MIN_VALUE;
}
}

protected final void initMMRECRC(String s) {
if (!s.trim().isEmpty()) {
MMRECRC = Byte.parseByte(s);
} else {
MMRECRC = Byte.MIN_VALUE;
}
}

protected final void initMOTHER(String s) {
if (!s.trim().isEmpty()) {
MOTHER = Byte.parseByte(s);
} else {
MOTHER = Byte.MIN_VALUE;
}
}

protected final void initMSTAT(String s) {
if (!s.trim().isEmpty()) {
MSTAT = Byte.parseByte(s);
} else {
MSTAT = Byte.MIN_VALUE;
}
}

protected final void initMTHAGD(String s) {
if (!s.trim().isEmpty()) {
MTHAGD = Byte.parseByte(s);
} else {
MTHAGD = Byte.MIN_VALUE;
}
}

protected final void initNCLM(String s) {
if (!s.trim().isEmpty()) {
NCLM = Byte.parseByte(s);
} else {
NCLM = Byte.MIN_VALUE;
}
}

protected final void initNCORRECT(String s) {
if (!s.trim().isEmpty()) {
NCORRECT = Byte.parseByte(s);
} else {
NCORRECT = Byte.MIN_VALUE;
}
}

protected final void initNMISSED(String s) {
if (!s.trim().isEmpty()) {
NMISSED = Byte.parseByte(s);
} else {
NMISSED = Byte.MIN_VALUE;
}
}

protected final void initNNMISRC(String s) {
if (!s.trim().isEmpty()) {
NNMISRC = Byte.parseByte(s);
} else {
NNMISRC = Byte.MIN_VALUE;
}
}

protected final void initNROW(String s) {
if (!s.trim().isEmpty()) {
NROW = Byte.parseByte(s);
} else {
NROW = Byte.MIN_VALUE;
}
}

protected final void initNROWCLM(String s) {
if (!s.trim().isEmpty()) {
NROWCLM = Short.parseShort(s);
} else {
NROWCLM = Short.MIN_VALUE;
}
}

protected final void initORDCON(String s) {
if (!s.trim().isEmpty()) {
ORDCON = Byte.parseByte(s);
} else {
ORDCON = Byte.MIN_VALUE;
}
}

protected final void initORGANIS(String s) {
if (!s.trim().isEmpty()) {
ORGANIS = Byte.parseByte(s);
} else {
ORGANIS = Byte.MIN_VALUE;
}
}

protected final void initORGNO(String s) {
if (!s.trim().isEmpty()) {
ORGNO = Byte.parseByte(s);
} else {
ORGNO = Byte.MIN_VALUE;
}
}

protected final void initOUTSC(String s) {
if (!s.trim().isEmpty()) {
OUTSC = Byte.parseByte(s);
} else {
OUTSC = Byte.MIN_VALUE;
}
}

protected final void initOUTSH(String s) {
if (!s.trim().isEmpty()) {
OUTSH = Byte.parseByte(s);
} else {
OUTSH = Byte.MIN_VALUE;
}
}

protected final void initOUTSW(String s) {
if (!s.trim().isEmpty()) {
OUTSW = Byte.parseByte(s);
} else {
OUTSW = Byte.MIN_VALUE;
}
}

protected final void initPAINHH(String s) {
if (!s.trim().isEmpty()) {
PAINHH = Byte.parseByte(s);
} else {
PAINHH = Byte.MIN_VALUE;
}
}

protected final void initPALEVEL(String s) {
if (!s.trim().isEmpty()) {
PALEVEL = Byte.parseByte(s);
} else {
PALEVEL = Byte.MIN_VALUE;
}
}

protected final void initPC_P_F(String s) {
if (!s.trim().isEmpty()) {
PC_P_F = Byte.parseByte(s);
} else {
PC_P_F = Byte.MIN_VALUE;
}
}

protected final void initPC_P_I(String s) {
if (!s.trim().isEmpty()) {
PC_P_I = Double.parseDouble(s);
} else {
PC_P_I = Double.NaN;
}
}

protected final void initPC_P_O(String s) {
if (!s.trim().isEmpty()) {
PC_P_O = Short.parseShort(s);
} else {
PC_P_O = Short.MIN_VALUE;
}
}

protected final void initPC_P_T(String s) {
if (!s.trim().isEmpty()) {
PC_P_T = Short.parseShort(s);
} else {
PC_P_T = Short.MIN_VALUE;
}
}

protected final void initPC_R_F(String s) {
if (!s.trim().isEmpty()) {
PC_R_F = Byte.parseByte(s);
} else {
PC_R_F = Byte.MIN_VALUE;
}
}

protected final void initPC_R_I(String s) {
if (!s.trim().isEmpty()) {
PC_R_I = Double.parseDouble(s);
} else {
PC_R_I = Double.NaN;
}
}

protected final void initPC_R_O(String s) {
if (!s.trim().isEmpty()) {
PC_R_O = Short.parseShort(s);
} else {
PC_R_O = Short.MIN_VALUE;
}
}

protected final void initPC_R_T(String s) {
if (!s.trim().isEmpty()) {
PC_R_T = Short.parseShort(s);
} else {
PC_R_T = Short.MIN_VALUE;
}
}

protected final void initPENSNO(String s) {
if (!s.trim().isEmpty()) {
PENSNO = Byte.parseByte(s);
} else {
PENSNO = Byte.MIN_VALUE;
}
}

protected final void initPHLEGM(String s) {
if (!s.trim().isEmpty()) {
PHLEGM = Byte.parseByte(s);
} else {
PHLEGM = Byte.MIN_VALUE;
}
}

protected final void initPRIPENW_06(String s) {
if (!s.trim().isEmpty()) {
PRIPENW_06 = Double.parseDouble(s);
} else {
PRIPENW_06 = Double.NaN;
}
}

protected final void initPRIPENW_SPA(String s) {
if (!s.trim().isEmpty()) {
PRIPENW_SPA = Double.parseDouble(s);
} else {
PRIPENW_SPA = Double.NaN;
}
}

protected final void initPSMID(String s) {
if (!s.trim().isEmpty()) {
PSMID = Short.parseShort(s);
} else {
PSMID = Short.MIN_VALUE;
}
}

protected final void initPSOLD(String s) {
if (!s.trim().isEmpty()) {
PSOLD = Short.parseShort(s);
} else {
PSOLD = Short.MIN_VALUE;
}
}

protected final void initQVER(String s) {
if (!s.trim().isEmpty()) {
QVER = s;
}
}

protected final void initRAAUK(String s) {
if (!s.trim().isEmpty()) {
RAAUK = Byte.parseByte(s);
} else {
RAAUK = Byte.MIN_VALUE;
}
}

protected final void initRABKS(String s) {
if (!s.trim().isEmpty()) {
RABKS = Byte.parseByte(s);
} else {
RABKS = Byte.MIN_VALUE;
}
}

protected final void initRABOR(String s) {
if (!s.trim().isEmpty()) {
RABOR = Byte.parseByte(s);
} else {
RABOR = Byte.MIN_VALUE;
}
}

protected final void initRABUK(String s) {
if (!s.trim().isEmpty()) {
RABUK = Byte.parseByte(s);
} else {
RABUK = Byte.MIN_VALUE;
}
}

protected final void initRABUK10(String s) {
if (!s.trim().isEmpty()) {
RABUK10 = Byte.parseByte(s);
} else {
RABUK10 = Byte.MIN_VALUE;
}
}

protected final void initRABUK11(String s) {
if (!s.trim().isEmpty()) {
RABUK11 = Byte.parseByte(s);
} else {
RABUK11 = Byte.MIN_VALUE;
}
}

protected final void initRABUK12(String s) {
if (!s.trim().isEmpty()) {
RABUK12 = Byte.parseByte(s);
} else {
RABUK12 = Byte.MIN_VALUE;
}
}

protected final void initRABUK13(String s) {
if (!s.trim().isEmpty()) {
RABUK13 = Byte.parseByte(s);
} else {
RABUK13 = Byte.MIN_VALUE;
}
}

protected final void initRABUK14(String s) {
if (!s.trim().isEmpty()) {
RABUK14 = Byte.parseByte(s);
} else {
RABUK14 = Byte.MIN_VALUE;
}
}

protected final void initRABUK15(String s) {
if (!s.trim().isEmpty()) {
RABUK15 = Byte.parseByte(s);
} else {
RABUK15 = Byte.MIN_VALUE;
}
}

protected final void initRABUK16(String s) {
if (!s.trim().isEmpty()) {
RABUK16 = Byte.parseByte(s);
} else {
RABUK16 = Byte.MIN_VALUE;
}
}

protected final void initRABUK17(String s) {
if (!s.trim().isEmpty()) {
RABUK17 = Byte.parseByte(s);
} else {
RABUK17 = Byte.MIN_VALUE;
}
}

protected final void initRABUK18(String s) {
if (!s.trim().isEmpty()) {
RABUK18 = Byte.parseByte(s);
} else {
RABUK18 = Byte.MIN_VALUE;
}
}

protected final void initRABUK19(String s) {
if (!s.trim().isEmpty()) {
RABUK19 = Byte.parseByte(s);
} else {
RABUK19 = Byte.MIN_VALUE;
}
}

protected final void initRABUK2(String s) {
if (!s.trim().isEmpty()) {
RABUK2 = Byte.parseByte(s);
} else {
RABUK2 = Byte.MIN_VALUE;
}
}

protected final void initRABUK20(String s) {
if (!s.trim().isEmpty()) {
RABUK20 = Byte.parseByte(s);
} else {
RABUK20 = Byte.MIN_VALUE;
}
}

protected final void initRABUK3(String s) {
if (!s.trim().isEmpty()) {
RABUK3 = Byte.parseByte(s);
} else {
RABUK3 = Byte.MIN_VALUE;
}
}

protected final void initRABUK4(String s) {
if (!s.trim().isEmpty()) {
RABUK4 = Byte.parseByte(s);
} else {
RABUK4 = Byte.MIN_VALUE;
}
}

protected final void initRABUK5(String s) {
if (!s.trim().isEmpty()) {
RABUK5 = Byte.parseByte(s);
} else {
RABUK5 = Byte.MIN_VALUE;
}
}

protected final void initRABUK6(String s) {
if (!s.trim().isEmpty()) {
RABUK6 = Byte.parseByte(s);
} else {
RABUK6 = Byte.MIN_VALUE;
}
}

protected final void initRABUK7(String s) {
if (!s.trim().isEmpty()) {
RABUK7 = Byte.parseByte(s);
} else {
RABUK7 = Byte.MIN_VALUE;
}
}

protected final void initRABUK8(String s) {
if (!s.trim().isEmpty()) {
RABUK8 = Byte.parseByte(s);
} else {
RABUK8 = Byte.MIN_VALUE;
}
}

protected final void initRABUK9(String s) {
if (!s.trim().isEmpty()) {
RABUK9 = Byte.parseByte(s);
} else {
RABUK9 = Byte.MIN_VALUE;
}
}

protected final void initRADIV(String s) {
if (!s.trim().isEmpty()) {
RADIV = Byte.parseByte(s);
} else {
RADIV = Byte.MIN_VALUE;
}
}

protected final void initRADIY(String s) {
if (!s.trim().isEmpty()) {
RADIY = Short.parseShort(s);
} else {
RADIY = Short.MIN_VALUE;
}
}

protected final void initRAESS(String s) {
if (!s.trim().isEmpty()) {
RAESS = Short.parseShort(s);
} else {
RAESS = Short.MIN_VALUE;
}
}

protected final void initRAESS10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAESS10 = false;
} else {
RAESS10 = true;
}
}
}

protected final void initRAESS11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAESS11 = false;
} else {
RAESS11 = true;
}
}
}

protected final void initRAESS12(String s) {
if (!s.trim().isEmpty()) {
RAESS12 = Short.parseShort(s);
} else {
RAESS12 = Short.MIN_VALUE;
}
}

protected final void initRAESS13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAESS13 = false;
} else {
RAESS13 = true;
}
}
}

protected final void initRAESS14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAESS14 = false;
} else {
RAESS14 = true;
}
}
}

protected final void initRAESS15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAESS15 = false;
} else {
RAESS15 = true;
}
}
}

protected final void initRAESS16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAESS16 = false;
} else {
RAESS16 = true;
}
}
}

protected final void initRAESS17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAESS17 = false;
} else {
RAESS17 = true;
}
}
}

protected final void initRAESS18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAESS18 = false;
} else {
RAESS18 = true;
}
}
}

protected final void initRAESS19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAESS19 = false;
} else {
RAESS19 = true;
}
}
}

protected final void initRAESS2(String s) {
if (!s.trim().isEmpty()) {
RAESS2 = Short.parseShort(s);
} else {
RAESS2 = Short.MIN_VALUE;
}
}

protected final void initRAESS20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAESS20 = false;
} else {
RAESS20 = true;
}
}
}

protected final void initRAESS3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
RAESS3 = false;
} else {
RAESS3 = true;
}
}
}

protected final void initRAESS4(String s) {
if (!s.trim().isEmpty()) {
RAESS4 = Short.parseShort(s);
} else {
RAESS4 = Short.MIN_VALUE;
}
}

protected final void initRAESS5(String s) {
if (!s.trim().isEmpty()) {
RAESS5 = Short.parseShort(s);
} else {
RAESS5 = Short.MIN_VALUE;
}
}

protected final void initRAESS6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAESS6 = false;
} else {
RAESS6 = true;
}
}
}

protected final void initRAESS7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAESS7 = false;
} else {
RAESS7 = true;
}
}
}

protected final void initRAESS8(String s) {
if (!s.trim().isEmpty()) {
RAESS8 = Short.parseShort(s);
} else {
RAESS8 = Short.MIN_VALUE;
}
}

protected final void initRAESS9(String s) {
if (!s.trim().isEmpty()) {
RAESS9 = Short.parseShort(s);
} else {
RAESS9 = Short.MIN_VALUE;
}
}

protected final void initRAEST(String s) {
if (!s.trim().isEmpty()) {
RAEST = Short.parseShort(s);
} else {
RAEST = Short.MIN_VALUE;
}
}

protected final void initRAEST10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAEST10 = false;
} else {
RAEST10 = true;
}
}
}

protected final void initRAEST11(String s) {
if (!s.trim().isEmpty()) {
RAEST11 = Short.parseShort(s);
} else {
RAEST11 = Short.MIN_VALUE;
}
}

protected final void initRAEST12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAEST12 = false;
} else {
RAEST12 = true;
}
}
}

protected final void initRAEST13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAEST13 = false;
} else {
RAEST13 = true;
}
}
}

protected final void initRAEST14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAEST14 = false;
} else {
RAEST14 = true;
}
}
}

protected final void initRAEST15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAEST15 = false;
} else {
RAEST15 = true;
}
}
}

protected final void initRAEST16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAEST16 = false;
} else {
RAEST16 = true;
}
}
}

protected final void initRAEST17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAEST17 = false;
} else {
RAEST17 = true;
}
}
}

protected final void initRAEST18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAEST18 = false;
} else {
RAEST18 = true;
}
}
}

protected final void initRAEST19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAEST19 = false;
} else {
RAEST19 = true;
}
}
}

protected final void initRAEST2(String s) {
if (!s.trim().isEmpty()) {
RAEST2 = Short.parseShort(s);
} else {
RAEST2 = Short.MIN_VALUE;
}
}

protected final void initRAEST20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAEST20 = false;
} else {
RAEST20 = true;
}
}
}

protected final void initRAEST3(String s) {
if (!s.trim().isEmpty()) {
RAEST3 = Short.parseShort(s);
} else {
RAEST3 = Short.MIN_VALUE;
}
}

protected final void initRAEST4(String s) {
if (!s.trim().isEmpty()) {
RAEST4 = Short.parseShort(s);
} else {
RAEST4 = Short.MIN_VALUE;
}
}

protected final void initRAEST5(String s) {
if (!s.trim().isEmpty()) {
RAEST5 = Short.parseShort(s);
} else {
RAEST5 = Short.MIN_VALUE;
}
}

protected final void initRAEST6(String s) {
if (!s.trim().isEmpty()) {
RAEST6 = Short.parseShort(s);
} else {
RAEST6 = Short.MIN_VALUE;
}
}

protected final void initRAEST7(String s) {
if (!s.trim().isEmpty()) {
RAEST7 = Short.parseShort(s);
} else {
RAEST7 = Short.MIN_VALUE;
}
}

protected final void initRAEST8(String s) {
if (!s.trim().isEmpty()) {
RAEST8 = Short.parseShort(s);
} else {
RAEST8 = Short.MIN_VALUE;
}
}

protected final void initRAEST9(String s) {
if (!s.trim().isEmpty()) {
RAEST9 = Short.parseShort(s);
} else {
RAEST9 = Short.MIN_VALUE;
}
}

protected final void initRAFAC1(String s) {
if (!s.trim().isEmpty()) {
RAFAC1 = Byte.parseByte(s);
} else {
RAFAC1 = Byte.MIN_VALUE;
}
}

protected final void initRAFAC2(String s) {
if (!s.trim().isEmpty()) {
RAFAC2 = Byte.parseByte(s);
} else {
RAFAC2 = Byte.MIN_VALUE;
}
}

protected final void initRAFAC3(String s) {
if (!s.trim().isEmpty()) {
RAFAC3 = Byte.parseByte(s);
} else {
RAFAC3 = Byte.MIN_VALUE;
}
}

protected final void initRAFAC4(String s) {
if (!s.trim().isEmpty()) {
RAFAC4 = Byte.parseByte(s);
} else {
RAFAC4 = Byte.MIN_VALUE;
}
}

protected final void initRAFAC5(String s) {
if (!s.trim().isEmpty()) {
RAFAC5 = Byte.parseByte(s);
} else {
RAFAC5 = Byte.MIN_VALUE;
}
}

protected final void initRAFAC6(String s) {
if (!s.trim().isEmpty()) {
RAFAC6 = Byte.parseByte(s);
} else {
RAFAC6 = Byte.MIN_VALUE;
}
}

protected final void initRAFAC96(String s) {
if (!s.trim().isEmpty()) {
RAFAC96 = Byte.parseByte(s);
} else {
RAFAC96 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP(String s) {
if (!s.trim().isEmpty()) {
RAGAP = Byte.parseByte(s);
} else {
RAGAP = Byte.MIN_VALUE;
}
}

protected final void initRAGAP10(String s) {
if (!s.trim().isEmpty()) {
RAGAP10 = Byte.parseByte(s);
} else {
RAGAP10 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP11(String s) {
if (!s.trim().isEmpty()) {
RAGAP11 = Byte.parseByte(s);
} else {
RAGAP11 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP12(String s) {
if (!s.trim().isEmpty()) {
RAGAP12 = Byte.parseByte(s);
} else {
RAGAP12 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP13(String s) {
if (!s.trim().isEmpty()) {
RAGAP13 = Byte.parseByte(s);
} else {
RAGAP13 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP14(String s) {
if (!s.trim().isEmpty()) {
RAGAP14 = Byte.parseByte(s);
} else {
RAGAP14 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP15(String s) {
if (!s.trim().isEmpty()) {
RAGAP15 = Byte.parseByte(s);
} else {
RAGAP15 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP16(String s) {
if (!s.trim().isEmpty()) {
RAGAP16 = Byte.parseByte(s);
} else {
RAGAP16 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP17(String s) {
if (!s.trim().isEmpty()) {
RAGAP17 = Byte.parseByte(s);
} else {
RAGAP17 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAGAP18 = false;
} else {
RAGAP18 = true;
}
}
}

protected final void initRAGAP19(String s) {
if (!s.trim().isEmpty()) {
RAGAP19 = Byte.parseByte(s);
} else {
RAGAP19 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP2(String s) {
if (!s.trim().isEmpty()) {
RAGAP2 = Byte.parseByte(s);
} else {
RAGAP2 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RAGAP20 = false;
} else {
RAGAP20 = true;
}
}
}

protected final void initRAGAP3(String s) {
if (!s.trim().isEmpty()) {
RAGAP3 = Byte.parseByte(s);
} else {
RAGAP3 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP4(String s) {
if (!s.trim().isEmpty()) {
RAGAP4 = Byte.parseByte(s);
} else {
RAGAP4 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP5(String s) {
if (!s.trim().isEmpty()) {
RAGAP5 = Byte.parseByte(s);
} else {
RAGAP5 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP6(String s) {
if (!s.trim().isEmpty()) {
RAGAP6 = Byte.parseByte(s);
} else {
RAGAP6 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP7(String s) {
if (!s.trim().isEmpty()) {
RAGAP7 = Byte.parseByte(s);
} else {
RAGAP7 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP8(String s) {
if (!s.trim().isEmpty()) {
RAGAP8 = Byte.parseByte(s);
} else {
RAGAP8 = Byte.MIN_VALUE;
}
}

protected final void initRAGAP9(String s) {
if (!s.trim().isEmpty()) {
RAGAP9 = Byte.parseByte(s);
} else {
RAGAP9 = Byte.MIN_VALUE;
}
}

protected final void initRALIS1(String s) {
if (!s.trim().isEmpty()) {
RALIS1 = Byte.parseByte(s);
} else {
RALIS1 = Byte.MIN_VALUE;
}
}

protected final void initRALIS2(String s) {
if (!s.trim().isEmpty()) {
RALIS2 = Byte.parseByte(s);
} else {
RALIS2 = Byte.MIN_VALUE;
}
}

protected final void initRALIS3(String s) {
if (!s.trim().isEmpty()) {
RALIS3 = Byte.parseByte(s);
} else {
RALIS3 = Byte.MIN_VALUE;
}
}

protected final void initRALIS4(String s) {
if (!s.trim().isEmpty()) {
RALIS4 = Byte.parseByte(s);
} else {
RALIS4 = Byte.MIN_VALUE;
}
}

protected final void initRALIS5(String s) {
if (!s.trim().isEmpty()) {
RALIS5 = Byte.parseByte(s);
} else {
RALIS5 = Byte.MIN_VALUE;
}
}

protected final void initRALIS6(String s) {
if (!s.trim().isEmpty()) {
RALIS6 = Byte.parseByte(s);
} else {
RALIS6 = Byte.MIN_VALUE;
}
}

protected final void initRALIS7(String s) {
if (!s.trim().isEmpty()) {
RALIS7 = Byte.parseByte(s);
} else {
RALIS7 = Byte.MIN_VALUE;
}
}

protected final void initRALIS8(String s) {
if (!s.trim().isEmpty()) {
RALIS8 = Byte.parseByte(s);
} else {
RALIS8 = Byte.MIN_VALUE;
}
}

protected final void initRALIS96(String s) {
if (!s.trim().isEmpty()) {
RALIS96 = Byte.parseByte(s);
} else {
RALIS96 = Byte.MIN_VALUE;
}
}

protected final void initRALOOP10(String s) {
if (!s.trim().isEmpty()) {
RALOOP10 = Byte.parseByte(s);
} else {
RALOOP10 = Byte.MIN_VALUE;
}
}

protected final void initRAMOA(String s) {
if (!s.trim().isEmpty()) {
RAMOA = Short.parseShort(s);
} else {
RAMOA = Short.MIN_VALUE;
}
}

protected final void initRAMOT(String s) {
if (!s.trim().isEmpty()) {
RAMOT = Byte.parseByte(s);
} else {
RAMOT = Byte.MIN_VALUE;
}
}

protected final void initRAMOY(String s) {
if (!s.trim().isEmpty()) {
RAMOY = Byte.parseByte(s);
} else {
RAMOY = Byte.MIN_VALUE;
}
}

protected final void initRAMOYC(String s) {
if (!s.trim().isEmpty()) {
RAMOYC = Byte.parseByte(s);
} else {
RAMOYC = Byte.MIN_VALUE;
}
}

protected final void initRAOWN(String s) {
if (!s.trim().isEmpty()) {
RAOWN = Byte.parseByte(s);
} else {
RAOWN = Byte.MIN_VALUE;
}
}

protected final void initRAOWN10(String s) {
if (!s.trim().isEmpty()) {
RAOWN10 = Byte.parseByte(s);
} else {
RAOWN10 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN11(String s) {
if (!s.trim().isEmpty()) {
RAOWN11 = Byte.parseByte(s);
} else {
RAOWN11 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN12(String s) {
if (!s.trim().isEmpty()) {
RAOWN12 = Byte.parseByte(s);
} else {
RAOWN12 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN13(String s) {
if (!s.trim().isEmpty()) {
RAOWN13 = Byte.parseByte(s);
} else {
RAOWN13 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN14(String s) {
if (!s.trim().isEmpty()) {
RAOWN14 = Byte.parseByte(s);
} else {
RAOWN14 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN15(String s) {
if (!s.trim().isEmpty()) {
RAOWN15 = Byte.parseByte(s);
} else {
RAOWN15 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN16(String s) {
if (!s.trim().isEmpty()) {
RAOWN16 = Byte.parseByte(s);
} else {
RAOWN16 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN17(String s) {
if (!s.trim().isEmpty()) {
RAOWN17 = Byte.parseByte(s);
} else {
RAOWN17 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN18(String s) {
if (!s.trim().isEmpty()) {
RAOWN18 = Byte.parseByte(s);
} else {
RAOWN18 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN19(String s) {
if (!s.trim().isEmpty()) {
RAOWN19 = Byte.parseByte(s);
} else {
RAOWN19 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN2(String s) {
if (!s.trim().isEmpty()) {
RAOWN2 = Byte.parseByte(s);
} else {
RAOWN2 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN20(String s) {
if (!s.trim().isEmpty()) {
RAOWN20 = Byte.parseByte(s);
} else {
RAOWN20 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN3(String s) {
if (!s.trim().isEmpty()) {
RAOWN3 = Byte.parseByte(s);
} else {
RAOWN3 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN4(String s) {
if (!s.trim().isEmpty()) {
RAOWN4 = Byte.parseByte(s);
} else {
RAOWN4 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN5(String s) {
if (!s.trim().isEmpty()) {
RAOWN5 = Byte.parseByte(s);
} else {
RAOWN5 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN6(String s) {
if (!s.trim().isEmpty()) {
RAOWN6 = Byte.parseByte(s);
} else {
RAOWN6 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN7(String s) {
if (!s.trim().isEmpty()) {
RAOWN7 = Byte.parseByte(s);
} else {
RAOWN7 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN8(String s) {
if (!s.trim().isEmpty()) {
RAOWN8 = Byte.parseByte(s);
} else {
RAOWN8 = Byte.MIN_VALUE;
}
}

protected final void initRAOWN9(String s) {
if (!s.trim().isEmpty()) {
RAOWN9 = Byte.parseByte(s);
} else {
RAOWN9 = Byte.MIN_VALUE;
}
}

protected final void initRAPAR(String s) {
if (!s.trim().isEmpty()) {
RAPAR = Short.parseShort(s);
} else {
RAPAR = Short.MIN_VALUE;
}
}

protected final void initRAPEO(String s) {
if (!s.trim().isEmpty()) {
RAPEO = Byte.parseByte(s);
} else {
RAPEO = Byte.MIN_VALUE;
}
}

protected final void initRAPRI(String s) {
if (!s.trim().isEmpty()) {
RAPRI = Byte.parseByte(s);
} else {
RAPRI = Byte.MIN_VALUE;
}
}

protected final void initRAPRI10(String s) {
if (!s.trim().isEmpty()) {
RAPRI10 = Byte.parseByte(s);
} else {
RAPRI10 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI10C(String s) {
if (!s.trim().isEmpty()) {
RAPRI10C = Byte.parseByte(s);
} else {
RAPRI10C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI11(String s) {
if (!s.trim().isEmpty()) {
RAPRI11 = Byte.parseByte(s);
} else {
RAPRI11 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI11C(String s) {
if (!s.trim().isEmpty()) {
RAPRI11C = Byte.parseByte(s);
} else {
RAPRI11C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI12(String s) {
if (!s.trim().isEmpty()) {
RAPRI12 = Byte.parseByte(s);
} else {
RAPRI12 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI12C(String s) {
if (!s.trim().isEmpty()) {
RAPRI12C = Byte.parseByte(s);
} else {
RAPRI12C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI13(String s) {
if (!s.trim().isEmpty()) {
RAPRI13 = Byte.parseByte(s);
} else {
RAPRI13 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI13C(String s) {
if (!s.trim().isEmpty()) {
RAPRI13C = Byte.parseByte(s);
} else {
RAPRI13C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI14(String s) {
if (!s.trim().isEmpty()) {
RAPRI14 = Byte.parseByte(s);
} else {
RAPRI14 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI14C(String s) {
if (!s.trim().isEmpty()) {
RAPRI14C = Byte.parseByte(s);
} else {
RAPRI14C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI15(String s) {
if (!s.trim().isEmpty()) {
RAPRI15 = Byte.parseByte(s);
} else {
RAPRI15 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI15C(String s) {
if (!s.trim().isEmpty()) {
RAPRI15C = Byte.parseByte(s);
} else {
RAPRI15C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI16(String s) {
if (!s.trim().isEmpty()) {
RAPRI16 = Byte.parseByte(s);
} else {
RAPRI16 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI16C(String s) {
if (!s.trim().isEmpty()) {
RAPRI16C = Byte.parseByte(s);
} else {
RAPRI16C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI17(String s) {
if (!s.trim().isEmpty()) {
RAPRI17 = Byte.parseByte(s);
} else {
RAPRI17 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI17C(String s) {
if (!s.trim().isEmpty()) {
RAPRI17C = Byte.parseByte(s);
} else {
RAPRI17C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI18(String s) {
if (!s.trim().isEmpty()) {
RAPRI18 = Byte.parseByte(s);
} else {
RAPRI18 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI18C(String s) {
if (!s.trim().isEmpty()) {
RAPRI18C = Byte.parseByte(s);
} else {
RAPRI18C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI19(String s) {
if (!s.trim().isEmpty()) {
RAPRI19 = Byte.parseByte(s);
} else {
RAPRI19 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI19C(String s) {
if (!s.trim().isEmpty()) {
RAPRI19C = Byte.parseByte(s);
} else {
RAPRI19C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI2(String s) {
if (!s.trim().isEmpty()) {
RAPRI2 = Byte.parseByte(s);
} else {
RAPRI2 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI20(String s) {
if (!s.trim().isEmpty()) {
RAPRI20 = Byte.parseByte(s);
} else {
RAPRI20 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI20C(String s) {
if (!s.trim().isEmpty()) {
RAPRI20C = Byte.parseByte(s);
} else {
RAPRI20C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI2C(String s) {
if (!s.trim().isEmpty()) {
RAPRI2C = Byte.parseByte(s);
} else {
RAPRI2C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI3(String s) {
if (!s.trim().isEmpty()) {
RAPRI3 = Byte.parseByte(s);
} else {
RAPRI3 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI3C(String s) {
if (!s.trim().isEmpty()) {
RAPRI3C = Byte.parseByte(s);
} else {
RAPRI3C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI4(String s) {
if (!s.trim().isEmpty()) {
RAPRI4 = Byte.parseByte(s);
} else {
RAPRI4 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI4C(String s) {
if (!s.trim().isEmpty()) {
RAPRI4C = Byte.parseByte(s);
} else {
RAPRI4C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI5(String s) {
if (!s.trim().isEmpty()) {
RAPRI5 = Short.parseShort(s);
} else {
RAPRI5 = Short.MIN_VALUE;
}
}

protected final void initRAPRI5C(String s) {
if (!s.trim().isEmpty()) {
RAPRI5C = Byte.parseByte(s);
} else {
RAPRI5C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI6(String s) {
if (!s.trim().isEmpty()) {
RAPRI6 = Byte.parseByte(s);
} else {
RAPRI6 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI6C(String s) {
if (!s.trim().isEmpty()) {
RAPRI6C = Byte.parseByte(s);
} else {
RAPRI6C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI7(String s) {
if (!s.trim().isEmpty()) {
RAPRI7 = Byte.parseByte(s);
} else {
RAPRI7 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI7C(String s) {
if (!s.trim().isEmpty()) {
RAPRI7C = Byte.parseByte(s);
} else {
RAPRI7C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI8(String s) {
if (!s.trim().isEmpty()) {
RAPRI8 = Byte.parseByte(s);
} else {
RAPRI8 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI8C(String s) {
if (!s.trim().isEmpty()) {
RAPRI8C = Byte.parseByte(s);
} else {
RAPRI8C = Byte.MIN_VALUE;
}
}

protected final void initRAPRI9(String s) {
if (!s.trim().isEmpty()) {
RAPRI9 = Byte.parseByte(s);
} else {
RAPRI9 = Byte.MIN_VALUE;
}
}

protected final void initRAPRI9C(String s) {
if (!s.trim().isEmpty()) {
RAPRI9C = Byte.parseByte(s);
} else {
RAPRI9C = Byte.MIN_VALUE;
}
}

protected final void initRAPRIC(String s) {
if (!s.trim().isEmpty()) {
RAPRIC = Byte.parseByte(s);
} else {
RAPRIC = Byte.MIN_VALUE;
}
}

protected final void initRAREL1(String s) {
if (!s.trim().isEmpty()) {
RAREL1 = Byte.parseByte(s);
} else {
RAREL1 = Byte.MIN_VALUE;
}
}

protected final void initRAREL2(String s) {
if (!s.trim().isEmpty()) {
RAREL2 = Byte.parseByte(s);
} else {
RAREL2 = Byte.MIN_VALUE;
}
}

protected final void initRAREL3(String s) {
if (!s.trim().isEmpty()) {
RAREL3 = Byte.parseByte(s);
} else {
RAREL3 = Byte.MIN_VALUE;
}
}

protected final void initRAREL4(String s) {
if (!s.trim().isEmpty()) {
RAREL4 = Byte.parseByte(s);
} else {
RAREL4 = Byte.MIN_VALUE;
}
}

protected final void initRAREL5(String s) {
if (!s.trim().isEmpty()) {
RAREL5 = Byte.parseByte(s);
} else {
RAREL5 = Byte.MIN_VALUE;
}
}

protected final void initRAREL6(String s) {
if (!s.trim().isEmpty()) {
RAREL6 = Byte.parseByte(s);
} else {
RAREL6 = Byte.MIN_VALUE;
}
}

protected final void initRAREL7(String s) {
if (!s.trim().isEmpty()) {
RAREL7 = Byte.parseByte(s);
} else {
RAREL7 = Byte.MIN_VALUE;
}
}

protected final void initRAREL8(String s) {
if (!s.trim().isEmpty()) {
RAREL8 = Byte.parseByte(s);
} else {
RAREL8 = Byte.MIN_VALUE;
}
}

protected final void initRAREL9(String s) {
if (!s.trim().isEmpty()) {
RAREL9 = Byte.parseByte(s);
} else {
RAREL9 = Byte.MIN_VALUE;
}
}

protected final void initRAROO(String s) {
if (!s.trim().isEmpty()) {
RAROO = Byte.parseByte(s);
} else {
RAROO = Byte.MIN_VALUE;
}
}

protected final void initRASTB(String s) {
if (!s.trim().isEmpty()) {
RASTB = Short.parseShort(s);
} else {
RASTB = Short.MIN_VALUE;
}
}

protected final void initRASTB10(String s) {
if (!s.trim().isEmpty()) {
RASTB10 = Short.parseShort(s);
} else {
RASTB10 = Short.MIN_VALUE;
}
}

protected final void initRASTB11(String s) {
if (!s.trim().isEmpty()) {
RASTB11 = Short.parseShort(s);
} else {
RASTB11 = Short.MIN_VALUE;
}
}

protected final void initRASTB12(String s) {
if (!s.trim().isEmpty()) {
RASTB12 = Short.parseShort(s);
} else {
RASTB12 = Short.MIN_VALUE;
}
}

protected final void initRASTB13(String s) {
if (!s.trim().isEmpty()) {
RASTB13 = Short.parseShort(s);
} else {
RASTB13 = Short.MIN_VALUE;
}
}

protected final void initRASTB14(String s) {
if (!s.trim().isEmpty()) {
RASTB14 = Short.parseShort(s);
} else {
RASTB14 = Short.MIN_VALUE;
}
}

protected final void initRASTB15(String s) {
if (!s.trim().isEmpty()) {
RASTB15 = Short.parseShort(s);
} else {
RASTB15 = Short.MIN_VALUE;
}
}

protected final void initRASTB16(String s) {
if (!s.trim().isEmpty()) {
RASTB16 = Short.parseShort(s);
} else {
RASTB16 = Short.MIN_VALUE;
}
}

protected final void initRASTB17(String s) {
if (!s.trim().isEmpty()) {
RASTB17 = Short.parseShort(s);
} else {
RASTB17 = Short.MIN_VALUE;
}
}

protected final void initRASTB18(String s) {
if (!s.trim().isEmpty()) {
RASTB18 = Short.parseShort(s);
} else {
RASTB18 = Short.MIN_VALUE;
}
}

protected final void initRASTB19(String s) {
if (!s.trim().isEmpty()) {
RASTB19 = Short.parseShort(s);
} else {
RASTB19 = Short.MIN_VALUE;
}
}

protected final void initRASTB2(String s) {
if (!s.trim().isEmpty()) {
RASTB2 = Short.parseShort(s);
} else {
RASTB2 = Short.MIN_VALUE;
}
}

protected final void initRASTB20(String s) {
if (!s.trim().isEmpty()) {
RASTB20 = Short.parseShort(s);
} else {
RASTB20 = Short.MIN_VALUE;
}
}

protected final void initRASTB3(String s) {
if (!s.trim().isEmpty()) {
RASTB3 = Short.parseShort(s);
} else {
RASTB3 = Short.MIN_VALUE;
}
}

protected final void initRASTB4(String s) {
if (!s.trim().isEmpty()) {
RASTB4 = Short.parseShort(s);
} else {
RASTB4 = Short.MIN_VALUE;
}
}

protected final void initRASTB5(String s) {
if (!s.trim().isEmpty()) {
RASTB5 = Short.parseShort(s);
} else {
RASTB5 = Short.MIN_VALUE;
}
}

protected final void initRASTB6(String s) {
if (!s.trim().isEmpty()) {
RASTB6 = Short.parseShort(s);
} else {
RASTB6 = Short.MIN_VALUE;
}
}

protected final void initRASTB7(String s) {
if (!s.trim().isEmpty()) {
RASTB7 = Short.parseShort(s);
} else {
RASTB7 = Short.MIN_VALUE;
}
}

protected final void initRASTB8(String s) {
if (!s.trim().isEmpty()) {
RASTB8 = Short.parseShort(s);
} else {
RASTB8 = Short.MIN_VALUE;
}
}

protected final void initRASTB9(String s) {
if (!s.trim().isEmpty()) {
RASTB9 = Short.parseShort(s);
} else {
RASTB9 = Short.MIN_VALUE;
}
}

protected final void initRASTLY10(String s) {
if (!s.trim().isEmpty()) {
RASTLY10 = Short.parseShort(s);
} else {
RASTLY10 = Short.MIN_VALUE;
}
}

protected final void initRASTLY11(String s) {
if (!s.trim().isEmpty()) {
RASTLY11 = Short.parseShort(s);
} else {
RASTLY11 = Short.MIN_VALUE;
}
}

protected final void initRASTLY12(String s) {
if (!s.trim().isEmpty()) {
RASTLY12 = Short.parseShort(s);
} else {
RASTLY12 = Short.MIN_VALUE;
}
}

protected final void initRASTLY13(String s) {
if (!s.trim().isEmpty()) {
RASTLY13 = Short.parseShort(s);
} else {
RASTLY13 = Short.MIN_VALUE;
}
}

protected final void initRASTLY14(String s) {
if (!s.trim().isEmpty()) {
RASTLY14 = Short.parseShort(s);
} else {
RASTLY14 = Short.MIN_VALUE;
}
}

protected final void initRASTLY15(String s) {
if (!s.trim().isEmpty()) {
RASTLY15 = Short.parseShort(s);
} else {
RASTLY15 = Short.MIN_VALUE;
}
}

protected final void initRASTLY16(String s) {
if (!s.trim().isEmpty()) {
RASTLY16 = Short.parseShort(s);
} else {
RASTLY16 = Short.MIN_VALUE;
}
}

protected final void initRASTLY17(String s) {
if (!s.trim().isEmpty()) {
RASTLY17 = Short.parseShort(s);
} else {
RASTLY17 = Short.MIN_VALUE;
}
}

protected final void initRASTLY18(String s) {
if (!s.trim().isEmpty()) {
RASTLY18 = Short.parseShort(s);
} else {
RASTLY18 = Short.MIN_VALUE;
}
}

protected final void initRASTLY19(String s) {
if (!s.trim().isEmpty()) {
RASTLY19 = Short.parseShort(s);
} else {
RASTLY19 = Short.MIN_VALUE;
}
}

protected final void initRASTLY20(String s) {
if (!s.trim().isEmpty()) {
RASTLY20 = Short.parseShort(s);
} else {
RASTLY20 = Short.MIN_VALUE;
}
}

protected final void initRASTLYR(String s) {
if (!s.trim().isEmpty()) {
RASTLYR = Short.parseShort(s);
} else {
RASTLYR = Short.MIN_VALUE;
}
}

protected final void initRASTLYR2(String s) {
if (!s.trim().isEmpty()) {
RASTLYR2 = Short.parseShort(s);
} else {
RASTLYR2 = Short.MIN_VALUE;
}
}

protected final void initRASTLYR3(String s) {
if (!s.trim().isEmpty()) {
RASTLYR3 = Short.parseShort(s);
} else {
RASTLYR3 = Short.MIN_VALUE;
}
}

protected final void initRASTLYR4(String s) {
if (!s.trim().isEmpty()) {
RASTLYR4 = Short.parseShort(s);
} else {
RASTLYR4 = Short.MIN_VALUE;
}
}

protected final void initRASTLYR5(String s) {
if (!s.trim().isEmpty()) {
RASTLYR5 = Short.parseShort(s);
} else {
RASTLYR5 = Short.MIN_VALUE;
}
}

protected final void initRASTLYR6(String s) {
if (!s.trim().isEmpty()) {
RASTLYR6 = Short.parseShort(s);
} else {
RASTLYR6 = Short.MIN_VALUE;
}
}

protected final void initRASTLYR7(String s) {
if (!s.trim().isEmpty()) {
RASTLYR7 = Short.parseShort(s);
} else {
RASTLYR7 = Short.MIN_VALUE;
}
}

protected final void initRASTLYR8(String s) {
if (!s.trim().isEmpty()) {
RASTLYR8 = Short.parseShort(s);
} else {
RASTLYR8 = Short.MIN_VALUE;
}
}

protected final void initRASTLYR9(String s) {
if (!s.trim().isEmpty()) {
RASTLYR9 = Short.parseShort(s);
} else {
RASTLYR9 = Short.MIN_VALUE;
}
}

protected final void initRASTP(String s) {
if (!s.trim().isEmpty()) {
RASTP = Short.parseShort(s);
} else {
RASTP = Short.MIN_VALUE;
}
}

protected final void initRASTP10(String s) {
if (!s.trim().isEmpty()) {
RASTP10 = Short.parseShort(s);
} else {
RASTP10 = Short.MIN_VALUE;
}
}

protected final void initRASTP11(String s) {
if (!s.trim().isEmpty()) {
RASTP11 = Short.parseShort(s);
} else {
RASTP11 = Short.MIN_VALUE;
}
}

protected final void initRASTP12(String s) {
if (!s.trim().isEmpty()) {
RASTP12 = Short.parseShort(s);
} else {
RASTP12 = Short.MIN_VALUE;
}
}

protected final void initRASTP13(String s) {
if (!s.trim().isEmpty()) {
RASTP13 = Short.parseShort(s);
} else {
RASTP13 = Short.MIN_VALUE;
}
}

protected final void initRASTP14(String s) {
if (!s.trim().isEmpty()) {
RASTP14 = Short.parseShort(s);
} else {
RASTP14 = Short.MIN_VALUE;
}
}

protected final void initRASTP15(String s) {
if (!s.trim().isEmpty()) {
RASTP15 = Short.parseShort(s);
} else {
RASTP15 = Short.MIN_VALUE;
}
}

protected final void initRASTP16(String s) {
if (!s.trim().isEmpty()) {
RASTP16 = Short.parseShort(s);
} else {
RASTP16 = Short.MIN_VALUE;
}
}

protected final void initRASTP17(String s) {
if (!s.trim().isEmpty()) {
RASTP17 = Short.parseShort(s);
} else {
RASTP17 = Short.MIN_VALUE;
}
}

protected final void initRASTP18(String s) {
if (!s.trim().isEmpty()) {
RASTP18 = Short.parseShort(s);
} else {
RASTP18 = Short.MIN_VALUE;
}
}

protected final void initRASTP19(String s) {
if (!s.trim().isEmpty()) {
RASTP19 = Short.parseShort(s);
} else {
RASTP19 = Short.MIN_VALUE;
}
}

protected final void initRASTP2(String s) {
if (!s.trim().isEmpty()) {
RASTP2 = Short.parseShort(s);
} else {
RASTP2 = Short.MIN_VALUE;
}
}

protected final void initRASTP20(String s) {
if (!s.trim().isEmpty()) {
RASTP20 = Short.parseShort(s);
} else {
RASTP20 = Short.MIN_VALUE;
}
}

protected final void initRASTP3(String s) {
if (!s.trim().isEmpty()) {
RASTP3 = Short.parseShort(s);
} else {
RASTP3 = Short.MIN_VALUE;
}
}

protected final void initRASTP4(String s) {
if (!s.trim().isEmpty()) {
RASTP4 = Short.parseShort(s);
} else {
RASTP4 = Short.MIN_VALUE;
}
}

protected final void initRASTP5(String s) {
if (!s.trim().isEmpty()) {
RASTP5 = Short.parseShort(s);
} else {
RASTP5 = Short.MIN_VALUE;
}
}

protected final void initRASTP6(String s) {
if (!s.trim().isEmpty()) {
RASTP6 = Short.parseShort(s);
} else {
RASTP6 = Short.MIN_VALUE;
}
}

protected final void initRASTP7(String s) {
if (!s.trim().isEmpty()) {
RASTP7 = Short.parseShort(s);
} else {
RASTP7 = Short.MIN_VALUE;
}
}

protected final void initRASTP8(String s) {
if (!s.trim().isEmpty()) {
RASTP8 = Short.parseShort(s);
} else {
RASTP8 = Short.MIN_VALUE;
}
}

protected final void initRASTP9(String s) {
if (!s.trim().isEmpty()) {
RASTP9 = Short.parseShort(s);
} else {
RASTP9 = Short.MIN_VALUE;
}
}

protected final void initRASTT10(String s) {
if (!s.trim().isEmpty()) {
RASTT10 = Byte.parseByte(s);
} else {
RASTT10 = Byte.MIN_VALUE;
}
}

protected final void initRASTT11(String s) {
if (!s.trim().isEmpty()) {
RASTT11 = Byte.parseByte(s);
} else {
RASTT11 = Byte.MIN_VALUE;
}
}

protected final void initRASTT12(String s) {
if (!s.trim().isEmpty()) {
RASTT12 = Byte.parseByte(s);
} else {
RASTT12 = Byte.MIN_VALUE;
}
}

protected final void initRASTT13(String s) {
if (!s.trim().isEmpty()) {
RASTT13 = Byte.parseByte(s);
} else {
RASTT13 = Byte.MIN_VALUE;
}
}

protected final void initRASTT14(String s) {
if (!s.trim().isEmpty()) {
RASTT14 = Byte.parseByte(s);
} else {
RASTT14 = Byte.MIN_VALUE;
}
}

protected final void initRASTT15(String s) {
if (!s.trim().isEmpty()) {
RASTT15 = Byte.parseByte(s);
} else {
RASTT15 = Byte.MIN_VALUE;
}
}

protected final void initRASTT16(String s) {
if (!s.trim().isEmpty()) {
RASTT16 = Byte.parseByte(s);
} else {
RASTT16 = Byte.MIN_VALUE;
}
}

protected final void initRASTT17(String s) {
if (!s.trim().isEmpty()) {
RASTT17 = Byte.parseByte(s);
} else {
RASTT17 = Byte.MIN_VALUE;
}
}

protected final void initRASTT18(String s) {
if (!s.trim().isEmpty()) {
RASTT18 = Byte.parseByte(s);
} else {
RASTT18 = Byte.MIN_VALUE;
}
}

protected final void initRASTT19(String s) {
if (!s.trim().isEmpty()) {
RASTT19 = Byte.parseByte(s);
} else {
RASTT19 = Byte.MIN_VALUE;
}
}

protected final void initRASTT2(String s) {
if (!s.trim().isEmpty()) {
RASTT2 = Byte.parseByte(s);
} else {
RASTT2 = Byte.MIN_VALUE;
}
}

protected final void initRASTT20(String s) {
if (!s.trim().isEmpty()) {
RASTT20 = Byte.parseByte(s);
} else {
RASTT20 = Byte.MIN_VALUE;
}
}

protected final void initRASTT3(String s) {
if (!s.trim().isEmpty()) {
RASTT3 = Byte.parseByte(s);
} else {
RASTT3 = Byte.MIN_VALUE;
}
}

protected final void initRASTT4(String s) {
if (!s.trim().isEmpty()) {
RASTT4 = Byte.parseByte(s);
} else {
RASTT4 = Byte.MIN_VALUE;
}
}

protected final void initRASTT5(String s) {
if (!s.trim().isEmpty()) {
RASTT5 = Byte.parseByte(s);
} else {
RASTT5 = Byte.MIN_VALUE;
}
}

protected final void initRASTT6(String s) {
if (!s.trim().isEmpty()) {
RASTT6 = Byte.parseByte(s);
} else {
RASTT6 = Byte.MIN_VALUE;
}
}

protected final void initRASTT7(String s) {
if (!s.trim().isEmpty()) {
RASTT7 = Byte.parseByte(s);
} else {
RASTT7 = Byte.MIN_VALUE;
}
}

protected final void initRASTT8(String s) {
if (!s.trim().isEmpty()) {
RASTT8 = Byte.parseByte(s);
} else {
RASTT8 = Byte.MIN_VALUE;
}
}

protected final void initRASTT9(String s) {
if (!s.trim().isEmpty()) {
RASTT9 = Byte.parseByte(s);
} else {
RASTT9 = Byte.MIN_VALUE;
}
}

protected final void initRASTY(String s) {
if (!s.trim().isEmpty()) {
RASTY = Short.parseShort(s);
} else {
RASTY = Short.MIN_VALUE;
}
}

protected final void initRASTY10(String s) {
if (!s.trim().isEmpty()) {
RASTY10 = Short.parseShort(s);
} else {
RASTY10 = Short.MIN_VALUE;
}
}

protected final void initRASTY11(String s) {
if (!s.trim().isEmpty()) {
RASTY11 = Short.parseShort(s);
} else {
RASTY11 = Short.MIN_VALUE;
}
}

protected final void initRASTY12(String s) {
if (!s.trim().isEmpty()) {
RASTY12 = Short.parseShort(s);
} else {
RASTY12 = Short.MIN_VALUE;
}
}

protected final void initRASTY13(String s) {
if (!s.trim().isEmpty()) {
RASTY13 = Short.parseShort(s);
} else {
RASTY13 = Short.MIN_VALUE;
}
}

protected final void initRASTY14(String s) {
if (!s.trim().isEmpty()) {
RASTY14 = Short.parseShort(s);
} else {
RASTY14 = Short.MIN_VALUE;
}
}

protected final void initRASTY15(String s) {
if (!s.trim().isEmpty()) {
RASTY15 = Short.parseShort(s);
} else {
RASTY15 = Short.MIN_VALUE;
}
}

protected final void initRASTY16(String s) {
if (!s.trim().isEmpty()) {
RASTY16 = Short.parseShort(s);
} else {
RASTY16 = Short.MIN_VALUE;
}
}

protected final void initRASTY17(String s) {
if (!s.trim().isEmpty()) {
RASTY17 = Short.parseShort(s);
} else {
RASTY17 = Short.MIN_VALUE;
}
}

protected final void initRASTY18(String s) {
if (!s.trim().isEmpty()) {
RASTY18 = Short.parseShort(s);
} else {
RASTY18 = Short.MIN_VALUE;
}
}

protected final void initRASTY19(String s) {
if (!s.trim().isEmpty()) {
RASTY19 = Short.parseShort(s);
} else {
RASTY19 = Short.MIN_VALUE;
}
}

protected final void initRASTY2(String s) {
if (!s.trim().isEmpty()) {
RASTY2 = Short.parseShort(s);
} else {
RASTY2 = Short.MIN_VALUE;
}
}

protected final void initRASTY20(String s) {
if (!s.trim().isEmpty()) {
RASTY20 = Short.parseShort(s);
} else {
RASTY20 = Short.MIN_VALUE;
}
}

protected final void initRASTY3(String s) {
if (!s.trim().isEmpty()) {
RASTY3 = Short.parseShort(s);
} else {
RASTY3 = Short.MIN_VALUE;
}
}

protected final void initRASTY4(String s) {
if (!s.trim().isEmpty()) {
RASTY4 = Short.parseShort(s);
} else {
RASTY4 = Short.MIN_VALUE;
}
}

protected final void initRASTY5(String s) {
if (!s.trim().isEmpty()) {
RASTY5 = Short.parseShort(s);
} else {
RASTY5 = Short.MIN_VALUE;
}
}

protected final void initRASTY6(String s) {
if (!s.trim().isEmpty()) {
RASTY6 = Short.parseShort(s);
} else {
RASTY6 = Short.MIN_VALUE;
}
}

protected final void initRASTY7(String s) {
if (!s.trim().isEmpty()) {
RASTY7 = Short.parseShort(s);
} else {
RASTY7 = Short.MIN_VALUE;
}
}

protected final void initRASTY8(String s) {
if (!s.trim().isEmpty()) {
RASTY8 = Short.parseShort(s);
} else {
RASTY8 = Short.MIN_VALUE;
}
}

protected final void initRASTY9(String s) {
if (!s.trim().isEmpty()) {
RASTY9 = Short.parseShort(s);
} else {
RASTY9 = Short.MIN_VALUE;
}
}

protected final void initRCAAL(String s) {
if (!s.trim().isEmpty()) {
RCAAL = Byte.parseByte(s);
} else {
RCAAL = Byte.MIN_VALUE;
}
}

protected final void initRCAAL2(String s) {
if (!s.trim().isEmpty()) {
RCAAL2 = Byte.parseByte(s);
} else {
RCAAL2 = Byte.MIN_VALUE;
}
}

protected final void initRCABT(String s) {
if (!s.trim().isEmpty()) {
RCABT = Byte.parseByte(s);
} else {
RCABT = Byte.MIN_VALUE;
}
}

protected final void initRCADD(String s) {
if (!s.trim().isEmpty()) {
RCADD = Short.parseShort(s);
} else {
RCADD = Short.MIN_VALUE;
}
}

protected final void initRCADD2(String s) {
if (!s.trim().isEmpty()) {
RCADD2 = Short.parseShort(s);
} else {
RCADD2 = Short.MIN_VALUE;
}
}

protected final void initRCADP(String s) {
if (!s.trim().isEmpty()) {
RCADP = Byte.parseByte(s);
} else {
RCADP = Byte.MIN_VALUE;
}
}

protected final void initRCADT(String s) {
if (!s.trim().isEmpty()) {
RCADT = Short.parseShort(s);
} else {
RCADT = Short.MIN_VALUE;
}
}

protected final void initRCADT2(String s) {
if (!s.trim().isEmpty()) {
RCADT2 = Short.parseShort(s);
} else {
RCADT2 = Short.MIN_VALUE;
}
}

protected final void initRCADY(String s) {
if (!s.trim().isEmpty()) {
RCADY = Short.parseShort(s);
} else {
RCADY = Short.MIN_VALUE;
}
}

protected final void initRCADY10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCADY10 = false;
} else {
RCADY10 = true;
}
}
}

protected final void initRCADY11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCADY11 = false;
} else {
RCADY11 = true;
}
}
}

protected final void initRCADY12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCADY12 = false;
} else {
RCADY12 = true;
}
}
}

protected final void initRCADY13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCADY13 = false;
} else {
RCADY13 = true;
}
}
}

protected final void initRCADY2(String s) {
if (!s.trim().isEmpty()) {
RCADY2 = Short.parseShort(s);
} else {
RCADY2 = Short.MIN_VALUE;
}
}

protected final void initRCADY3(String s) {
if (!s.trim().isEmpty()) {
RCADY3 = Short.parseShort(s);
} else {
RCADY3 = Short.MIN_VALUE;
}
}

protected final void initRCADY4(String s) {
if (!s.trim().isEmpty()) {
RCADY4 = Short.parseShort(s);
} else {
RCADY4 = Short.MIN_VALUE;
}
}

protected final void initRCADY5(String s) {
if (!s.trim().isEmpty()) {
RCADY5 = Short.parseShort(s);
} else {
RCADY5 = Short.MIN_VALUE;
}
}

protected final void initRCADY6(String s) {
if (!s.trim().isEmpty()) {
RCADY6 = Short.parseShort(s);
} else {
RCADY6 = Short.MIN_VALUE;
}
}

protected final void initRCADY7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCADY7 = false;
} else {
RCADY7 = true;
}
}
}

protected final void initRCADY8(String s) {
if (!s.trim().isEmpty()) {
RCADY8 = Short.parseShort(s);
} else {
RCADY8 = Short.MIN_VALUE;
}
}

protected final void initRCADY9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCADY9 = false;
} else {
RCADY9 = true;
}
}
}

protected final void initRCALI(String s) {
if (!s.trim().isEmpty()) {
RCALI = Byte.parseByte(s);
} else {
RCALI = Byte.MIN_VALUE;
}
}

protected final void initRCALI2(String s) {
if (!s.trim().isEmpty()) {
RCALI2 = Byte.parseByte(s);
} else {
RCALI2 = Byte.MIN_VALUE;
}
}

protected final void initRCALI3(String s) {
if (!s.trim().isEmpty()) {
RCALI3 = Byte.parseByte(s);
} else {
RCALI3 = Byte.MIN_VALUE;
}
}

protected final void initRCALI4(String s) {
if (!s.trim().isEmpty()) {
RCALI4 = Byte.parseByte(s);
} else {
RCALI4 = Byte.MIN_VALUE;
}
}

protected final void initRCALI5(String s) {
if (!s.trim().isEmpty()) {
RCALI5 = Byte.parseByte(s);
} else {
RCALI5 = Byte.MIN_VALUE;
}
}

protected final void initRCALI6(String s) {
if (!s.trim().isEmpty()) {
RCALI6 = Byte.parseByte(s);
} else {
RCALI6 = Byte.MIN_VALUE;
}
}

protected final void initRCALO(String s) {
if (!s.trim().isEmpty()) {
RCALO = Byte.parseByte(s);
} else {
RCALO = Byte.MIN_VALUE;
}
}

protected final void initRCALV(String s) {
if (!s.trim().isEmpty()) {
RCALV = Byte.parseByte(s);
} else {
RCALV = Byte.MIN_VALUE;
}
}

protected final void initRCALV10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCALV10 = false;
} else {
RCALV10 = true;
}
}
}

protected final void initRCALV11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCALV11 = false;
} else {
RCALV11 = true;
}
}
}

protected final void initRCALV12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCALV12 = false;
} else {
RCALV12 = true;
}
}
}

protected final void initRCALV13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCALV13 = false;
} else {
RCALV13 = true;
}
}
}

protected final void initRCALV2(String s) {
if (!s.trim().isEmpty()) {
RCALV2 = Byte.parseByte(s);
} else {
RCALV2 = Byte.MIN_VALUE;
}
}

protected final void initRCALV21(String s) {
if (!s.trim().isEmpty()) {
RCALV21 = Byte.parseByte(s);
} else {
RCALV21 = Byte.MIN_VALUE;
}
}

protected final void initRCALV22(String s) {
if (!s.trim().isEmpty()) {
RCALV22 = Byte.parseByte(s);
} else {
RCALV22 = Byte.MIN_VALUE;
}
}

protected final void initRCALV3(String s) {
if (!s.trim().isEmpty()) {
RCALV3 = Byte.parseByte(s);
} else {
RCALV3 = Byte.MIN_VALUE;
}
}

protected final void initRCALV4(String s) {
if (!s.trim().isEmpty()) {
RCALV4 = Byte.parseByte(s);
} else {
RCALV4 = Byte.MIN_VALUE;
}
}

protected final void initRCALV5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCALV5 = false;
} else {
RCALV5 = true;
}
}
}

protected final void initRCALV6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCALV6 = false;
} else {
RCALV6 = true;
}
}
}

protected final void initRCALV7(String s) {
if (!s.trim().isEmpty()) {
RCALV7 = Byte.parseByte(s);
} else {
RCALV7 = Byte.MIN_VALUE;
}
}

protected final void initRCALV8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCALV8 = false;
} else {
RCALV8 = true;
}
}
}

protected final void initRCALV9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCALV9 = false;
} else {
RCALV9 = true;
}
}
}

protected final void initRCANO(String s) {
if (!s.trim().isEmpty()) {
RCANO = Byte.parseByte(s);
} else {
RCANO = Byte.MIN_VALUE;
}
}

protected final void initRCASX(String s) {
if (!s.trim().isEmpty()) {
RCASX = Byte.parseByte(s);
} else {
RCASX = Byte.MIN_VALUE;
}
}

protected final void initRCASX2(String s) {
if (!s.trim().isEmpty()) {
RCASX2 = Byte.parseByte(s);
} else {
RCASX2 = Byte.MIN_VALUE;
}
}

protected final void initRCAYR(String s) {
if (!s.trim().isEmpty()) {
RCAYR = Short.parseShort(s);
} else {
RCAYR = Short.MIN_VALUE;
}
}

protected final void initRCAYR2(String s) {
if (!s.trim().isEmpty()) {
RCAYR2 = Short.parseShort(s);
} else {
RCAYR2 = Short.MIN_VALUE;
}
}

protected final void initRCBNO(String s) {
if (!s.trim().isEmpty()) {
RCBNO = Byte.parseByte(s);
} else {
RCBNO = Byte.MIN_VALUE;
}
}

protected final void initRCBTH(String s) {
if (!s.trim().isEmpty()) {
RCBTH = Byte.parseByte(s);
} else {
RCBTH = Byte.MIN_VALUE;
}
}

protected final void initRCCHC(String s) {
if (!s.trim().isEmpty()) {
RCCHC = Byte.parseByte(s);
} else {
RCCHC = Byte.MIN_VALUE;
}
}

protected final void initRCCHC10(String s) {
if (!s.trim().isEmpty()) {
RCCHC10 = Byte.parseByte(s);
} else {
RCCHC10 = Byte.MIN_VALUE;
}
}

protected final void initRCCHC11(String s) {
if (!s.trim().isEmpty()) {
RCCHC11 = Byte.parseByte(s);
} else {
RCCHC11 = Byte.MIN_VALUE;
}
}

protected final void initRCCHC12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCCHC12 = false;
} else {
RCCHC12 = true;
}
}
}

protected final void initRCCHC13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCCHC13 = false;
} else {
RCCHC13 = true;
}
}
}

protected final void initRCCHC2(String s) {
if (!s.trim().isEmpty()) {
RCCHC2 = Byte.parseByte(s);
} else {
RCCHC2 = Byte.MIN_VALUE;
}
}

protected final void initRCCHC3(String s) {
if (!s.trim().isEmpty()) {
RCCHC3 = Byte.parseByte(s);
} else {
RCCHC3 = Byte.MIN_VALUE;
}
}

protected final void initRCCHC4(String s) {
if (!s.trim().isEmpty()) {
RCCHC4 = Byte.parseByte(s);
} else {
RCCHC4 = Byte.MIN_VALUE;
}
}

protected final void initRCCHC5(String s) {
if (!s.trim().isEmpty()) {
RCCHC5 = Byte.parseByte(s);
} else {
RCCHC5 = Byte.MIN_VALUE;
}
}

protected final void initRCCHC6(String s) {
if (!s.trim().isEmpty()) {
RCCHC6 = Byte.parseByte(s);
} else {
RCCHC6 = Byte.MIN_VALUE;
}
}

protected final void initRCCHC7(String s) {
if (!s.trim().isEmpty()) {
RCCHC7 = Byte.parseByte(s);
} else {
RCCHC7 = Byte.MIN_VALUE;
}
}

protected final void initRCCHC8(String s) {
if (!s.trim().isEmpty()) {
RCCHC8 = Byte.parseByte(s);
} else {
RCCHC8 = Byte.MIN_VALUE;
}
}

protected final void initRCCHC9(String s) {
if (!s.trim().isEmpty()) {
RCCHC9 = Byte.parseByte(s);
} else {
RCCHC9 = Byte.MIN_VALUE;
}
}

protected final void initRCCHDY10(String s) {
if (!s.trim().isEmpty()) {
RCCHDY10 = Short.parseShort(s);
} else {
RCCHDY10 = Short.MIN_VALUE;
}
}

protected final void initRCCHDY11(String s) {
if (!s.trim().isEmpty()) {
RCCHDY11 = Short.parseShort(s);
} else {
RCCHDY11 = Short.MIN_VALUE;
}
}

protected final void initRCCHDY12(String s) {
if (!s.trim().isEmpty()) {
RCCHDY12 = Short.parseShort(s);
} else {
RCCHDY12 = Short.MIN_VALUE;
}
}

protected final void initRCCHDY13(String s) {
if (!s.trim().isEmpty()) {
RCCHDY13 = Short.parseShort(s);
} else {
RCCHDY13 = Short.MIN_VALUE;
}
}

protected final void initRCCHDYR(String s) {
if (!s.trim().isEmpty()) {
RCCHDYR = Short.parseShort(s);
} else {
RCCHDYR = Short.MIN_VALUE;
}
}

protected final void initRCCHDYR2(String s) {
if (!s.trim().isEmpty()) {
RCCHDYR2 = Short.parseShort(s);
} else {
RCCHDYR2 = Short.MIN_VALUE;
}
}

protected final void initRCCHDYR3(String s) {
if (!s.trim().isEmpty()) {
RCCHDYR3 = Short.parseShort(s);
} else {
RCCHDYR3 = Short.MIN_VALUE;
}
}

protected final void initRCCHDYR4(String s) {
if (!s.trim().isEmpty()) {
RCCHDYR4 = Short.parseShort(s);
} else {
RCCHDYR4 = Short.MIN_VALUE;
}
}

protected final void initRCCHDYR5(String s) {
if (!s.trim().isEmpty()) {
RCCHDYR5 = Short.parseShort(s);
} else {
RCCHDYR5 = Short.MIN_VALUE;
}
}

protected final void initRCCHDYR6(String s) {
if (!s.trim().isEmpty()) {
RCCHDYR6 = Short.parseShort(s);
} else {
RCCHDYR6 = Short.MIN_VALUE;
}
}

protected final void initRCCHDYR7(String s) {
if (!s.trim().isEmpty()) {
RCCHDYR7 = Short.parseShort(s);
} else {
RCCHDYR7 = Short.MIN_VALUE;
}
}

protected final void initRCCHDYR8(String s) {
if (!s.trim().isEmpty()) {
RCCHDYR8 = Short.parseShort(s);
} else {
RCCHDYR8 = Short.MIN_VALUE;
}
}

protected final void initRCCHDYR9(String s) {
if (!s.trim().isEmpty()) {
RCCHDYR9 = Short.parseShort(s);
} else {
RCCHDYR9 = Short.MIN_VALUE;
}
}

protected final void initRCCHSEX(String s) {
if (!s.trim().isEmpty()) {
RCCHSEX = Byte.parseByte(s);
} else {
RCCHSEX = Byte.MIN_VALUE;
}
}

protected final void initRCCHSEX2(String s) {
if (!s.trim().isEmpty()) {
RCCHSEX2 = Byte.parseByte(s);
} else {
RCCHSEX2 = Byte.MIN_VALUE;
}
}

protected final void initRCCHSEX3(String s) {
if (!s.trim().isEmpty()) {
RCCHSEX3 = Byte.parseByte(s);
} else {
RCCHSEX3 = Byte.MIN_VALUE;
}
}

protected final void initRCCHSEX4(String s) {
if (!s.trim().isEmpty()) {
RCCHSEX4 = Byte.parseByte(s);
} else {
RCCHSEX4 = Byte.MIN_VALUE;
}
}

protected final void initRCCHSEX5(String s) {
if (!s.trim().isEmpty()) {
RCCHSEX5 = Byte.parseByte(s);
} else {
RCCHSEX5 = Byte.MIN_VALUE;
}
}

protected final void initRCCHSEX6(String s) {
if (!s.trim().isEmpty()) {
RCCHSEX6 = Byte.parseByte(s);
} else {
RCCHSEX6 = Byte.MIN_VALUE;
}
}

protected final void initRCCHSEX7(String s) {
if (!s.trim().isEmpty()) {
RCCHSEX7 = Byte.parseByte(s);
} else {
RCCHSEX7 = Byte.MIN_VALUE;
}
}

protected final void initRCCHSEX8(String s) {
if (!s.trim().isEmpty()) {
RCCHSEX8 = Byte.parseByte(s);
} else {
RCCHSEX8 = Byte.MIN_VALUE;
}
}

protected final void initRCCHSEX9(String s) {
if (!s.trim().isEmpty()) {
RCCHSEX9 = Byte.parseByte(s);
} else {
RCCHSEX9 = Byte.MIN_VALUE;
}
}

protected final void initRCCHSX10(String s) {
if (!s.trim().isEmpty()) {
RCCHSX10 = Byte.parseByte(s);
} else {
RCCHSX10 = Byte.MIN_VALUE;
}
}

protected final void initRCCHSX11(String s) {
if (!s.trim().isEmpty()) {
RCCHSX11 = Byte.parseByte(s);
} else {
RCCHSX11 = Byte.MIN_VALUE;
}
}

protected final void initRCCHSX12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCCHSX12 = false;
} else {
RCCHSX12 = true;
}
}
}

protected final void initRCCHSX13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCCHSX13 = false;
} else {
RCCHSX13 = true;
}
}
}

protected final void initRCDBC(String s) {
if (!s.trim().isEmpty()) {
RCDBC = Byte.parseByte(s);
} else {
RCDBC = Byte.MIN_VALUE;
}
}

protected final void initRCDBC10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCDBC10 = false;
} else {
RCDBC10 = true;
}
}
}

protected final void initRCDBC11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCDBC11 = false;
} else {
RCDBC11 = true;
}
}
}

protected final void initRCDBC12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCDBC12 = false;
} else {
RCDBC12 = true;
}
}
}

protected final void initRCDBC13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCDBC13 = false;
} else {
RCDBC13 = true;
}
}
}

protected final void initRCDBC2(String s) {
if (!s.trim().isEmpty()) {
RCDBC2 = Byte.parseByte(s);
} else {
RCDBC2 = Byte.MIN_VALUE;
}
}

protected final void initRCDBC3(String s) {
if (!s.trim().isEmpty()) {
RCDBC3 = Byte.parseByte(s);
} else {
RCDBC3 = Byte.MIN_VALUE;
}
}

protected final void initRCDBC4(String s) {
if (!s.trim().isEmpty()) {
RCDBC4 = Byte.parseByte(s);
} else {
RCDBC4 = Byte.MIN_VALUE;
}
}

protected final void initRCDBC5(String s) {
if (!s.trim().isEmpty()) {
RCDBC5 = Byte.parseByte(s);
} else {
RCDBC5 = Byte.MIN_VALUE;
}
}

protected final void initRCDBC6(String s) {
if (!s.trim().isEmpty()) {
RCDBC6 = Byte.parseByte(s);
} else {
RCDBC6 = Byte.MIN_VALUE;
}
}

protected final void initRCDBC7(String s) {
if (!s.trim().isEmpty()) {
RCDBC7 = Byte.parseByte(s);
} else {
RCDBC7 = Byte.MIN_VALUE;
}
}

protected final void initRCDBC8(String s) {
if (!s.trim().isEmpty()) {
RCDBC8 = Byte.parseByte(s);
} else {
RCDBC8 = Byte.MIN_VALUE;
}
}

protected final void initRCDBC9(String s) {
if (!s.trim().isEmpty()) {
RCDBC9 = Byte.parseByte(s);
} else {
RCDBC9 = Byte.MIN_VALUE;
}
}

protected final void initRCDNO(String s) {
if (!s.trim().isEmpty()) {
RCDNO = Byte.parseByte(s);
} else {
RCDNO = Byte.MIN_VALUE;
}
}

protected final void initRCDYY(String s) {
if (!s.trim().isEmpty()) {
RCDYY = Short.parseShort(s);
} else {
RCDYY = Short.MIN_VALUE;
}
}

protected final void initRCDYY10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCDYY10 = false;
} else {
RCDYY10 = true;
}
}
}

protected final void initRCDYY11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCDYY11 = false;
} else {
RCDYY11 = true;
}
}
}

protected final void initRCDYY12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCDYY12 = false;
} else {
RCDYY12 = true;
}
}
}

protected final void initRCDYY13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCDYY13 = false;
} else {
RCDYY13 = true;
}
}
}

protected final void initRCDYY2(String s) {
if (!s.trim().isEmpty()) {
RCDYY2 = Short.parseShort(s);
} else {
RCDYY2 = Short.MIN_VALUE;
}
}

protected final void initRCDYY3(String s) {
if (!s.trim().isEmpty()) {
RCDYY3 = Short.parseShort(s);
} else {
RCDYY3 = Short.MIN_VALUE;
}
}

protected final void initRCDYY4(String s) {
if (!s.trim().isEmpty()) {
RCDYY4 = Short.parseShort(s);
} else {
RCDYY4 = Short.MIN_VALUE;
}
}

protected final void initRCDYY5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCDYY5 = false;
} else {
RCDYY5 = true;
}
}
}

protected final void initRCDYY6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCDYY6 = false;
} else {
RCDYY6 = true;
}
}
}

protected final void initRCDYY7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCDYY7 = false;
} else {
RCDYY7 = true;
}
}
}

protected final void initRCDYY8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCDYY8 = false;
} else {
RCDYY8 = true;
}
}
}

protected final void initRCDYY9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCDYY9 = false;
} else {
RCDYY9 = true;
}
}
}

protected final void initRCEND(String s) {
if (!s.trim().isEmpty()) {
RCEND = Byte.parseByte(s);
} else {
RCEND = Byte.MIN_VALUE;
}
}

protected final void initRCEND10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCEND10 = false;
} else {
RCEND10 = true;
}
}
}

protected final void initRCEND11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCEND11 = false;
} else {
RCEND11 = true;
}
}
}

protected final void initRCEND12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCEND12 = false;
} else {
RCEND12 = true;
}
}
}

protected final void initRCEND13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCEND13 = false;
} else {
RCEND13 = true;
}
}
}

protected final void initRCEND2(String s) {
if (!s.trim().isEmpty()) {
RCEND2 = Byte.parseByte(s);
} else {
RCEND2 = Byte.MIN_VALUE;
}
}

protected final void initRCEND3(String s) {
if (!s.trim().isEmpty()) {
RCEND3 = Byte.parseByte(s);
} else {
RCEND3 = Byte.MIN_VALUE;
}
}

protected final void initRCEND4(String s) {
if (!s.trim().isEmpty()) {
RCEND4 = Byte.parseByte(s);
} else {
RCEND4 = Byte.MIN_VALUE;
}
}

protected final void initRCEND5(String s) {
if (!s.trim().isEmpty()) {
RCEND5 = Byte.parseByte(s);
} else {
RCEND5 = Byte.MIN_VALUE;
}
}

protected final void initRCEND6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCEND6 = false;
} else {
RCEND6 = true;
}
}
}

protected final void initRCEND7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCEND7 = false;
} else {
RCEND7 = true;
}
}
}

protected final void initRCEND8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCEND8 = false;
} else {
RCEND8 = true;
}
}
}

protected final void initRCEND9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCEND9 = false;
} else {
RCEND9 = true;
}
}
}

protected final void initRCFAT(String s) {
if (!s.trim().isEmpty()) {
RCFAT = Byte.parseByte(s);
} else {
RCFAT = Byte.MIN_VALUE;
}
}

protected final void initRCFNO(String s) {
if (!s.trim().isEmpty()) {
RCFNO = Byte.parseByte(s);
} else {
RCFNO = Byte.MIN_VALUE;
}
}

protected final void initRCFOST(String s) {
if (!s.trim().isEmpty()) {
RCFOST = Byte.parseByte(s);
} else {
RCFOST = Byte.MIN_VALUE;
}
}

protected final void initRCFOYR(String s) {
if (!s.trim().isEmpty()) {
RCFOYR = Byte.parseByte(s);
} else {
RCFOYR = Byte.MIN_VALUE;
}
}

protected final void initRCLIV(String s) {
if (!s.trim().isEmpty()) {
RCLIV = Byte.parseByte(s);
} else {
RCLIV = Byte.MIN_VALUE;
}
}

protected final void initRCLIV2(String s) {
if (!s.trim().isEmpty()) {
RCLIV2 = Byte.parseByte(s);
} else {
RCLIV2 = Byte.MIN_VALUE;
}
}

protected final void initRCLIV3(String s) {
if (!s.trim().isEmpty()) {
RCLIV3 = Byte.parseByte(s);
} else {
RCLIV3 = Byte.MIN_VALUE;
}
}

protected final void initRCLIV4(String s) {
if (!s.trim().isEmpty()) {
RCLIV4 = Byte.parseByte(s);
} else {
RCLIV4 = Byte.MIN_VALUE;
}
}

protected final void initRCLIV5(String s) {
if (!s.trim().isEmpty()) {
RCLIV5 = Byte.parseByte(s);
} else {
RCLIV5 = Byte.MIN_VALUE;
}
}

protected final void initRCLIV6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCLIV6 = false;
} else {
RCLIV6 = true;
}
}
}

protected final void initRCLVF(String s) {
if (!s.trim().isEmpty()) {
RCLVF = Byte.parseByte(s);
} else {
RCLVF = Byte.MIN_VALUE;
}
}

protected final void initRCLVF10(String s) {
if (!s.trim().isEmpty()) {
RCLVF10 = Byte.parseByte(s);
} else {
RCLVF10 = Byte.MIN_VALUE;
}
}

protected final void initRCLVF11(String s) {
if (!s.trim().isEmpty()) {
RCLVF11 = Byte.parseByte(s);
} else {
RCLVF11 = Byte.MIN_VALUE;
}
}

protected final void initRCLVF12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCLVF12 = false;
} else {
RCLVF12 = true;
}
}
}

protected final void initRCLVF13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCLVF13 = false;
} else {
RCLVF13 = true;
}
}
}

protected final void initRCLVF2(String s) {
if (!s.trim().isEmpty()) {
RCLVF2 = Byte.parseByte(s);
} else {
RCLVF2 = Byte.MIN_VALUE;
}
}

protected final void initRCLVF3(String s) {
if (!s.trim().isEmpty()) {
RCLVF3 = Byte.parseByte(s);
} else {
RCLVF3 = Byte.MIN_VALUE;
}
}

protected final void initRCLVF4(String s) {
if (!s.trim().isEmpty()) {
RCLVF4 = Byte.parseByte(s);
} else {
RCLVF4 = Byte.MIN_VALUE;
}
}

protected final void initRCLVF5(String s) {
if (!s.trim().isEmpty()) {
RCLVF5 = Byte.parseByte(s);
} else {
RCLVF5 = Byte.MIN_VALUE;
}
}

protected final void initRCLVF6(String s) {
if (!s.trim().isEmpty()) {
RCLVF6 = Byte.parseByte(s);
} else {
RCLVF6 = Byte.MIN_VALUE;
}
}

protected final void initRCLVF7(String s) {
if (!s.trim().isEmpty()) {
RCLVF7 = Byte.parseByte(s);
} else {
RCLVF7 = Byte.MIN_VALUE;
}
}

protected final void initRCLVF8(String s) {
if (!s.trim().isEmpty()) {
RCLVF8 = Byte.parseByte(s);
} else {
RCLVF8 = Byte.MIN_VALUE;
}
}

protected final void initRCLVF9(String s) {
if (!s.trim().isEmpty()) {
RCLVF9 = Byte.parseByte(s);
} else {
RCLVF9 = Byte.MIN_VALUE;
}
}

protected final void initRCMDT(String s) {
if (!s.trim().isEmpty()) {
RCMDT = Short.parseShort(s);
} else {
RCMDT = Short.MIN_VALUE;
}
}

protected final void initRCMDT10(String s) {
if (!s.trim().isEmpty()) {
RCMDT10 = Short.parseShort(s);
} else {
RCMDT10 = Short.MIN_VALUE;
}
}

protected final void initRCMDT11(String s) {
if (!s.trim().isEmpty()) {
RCMDT11 = Short.parseShort(s);
} else {
RCMDT11 = Short.MIN_VALUE;
}
}

protected final void initRCMDT12(String s) {
if (!s.trim().isEmpty()) {
RCMDT12 = Short.parseShort(s);
} else {
RCMDT12 = Short.MIN_VALUE;
}
}

protected final void initRCMDT13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
RCMDT13 = false;
} else {
RCMDT13 = true;
}
}
}

protected final void initRCMDT2(String s) {
if (!s.trim().isEmpty()) {
RCMDT2 = Short.parseShort(s);
} else {
RCMDT2 = Short.MIN_VALUE;
}
}

protected final void initRCMDT3(String s) {
if (!s.trim().isEmpty()) {
RCMDT3 = Short.parseShort(s);
} else {
RCMDT3 = Short.MIN_VALUE;
}
}

protected final void initRCMDT4(String s) {
if (!s.trim().isEmpty()) {
RCMDT4 = Short.parseShort(s);
} else {
RCMDT4 = Short.MIN_VALUE;
}
}

protected final void initRCMDT5(String s) {
if (!s.trim().isEmpty()) {
RCMDT5 = Short.parseShort(s);
} else {
RCMDT5 = Short.MIN_VALUE;
}
}

protected final void initRCMDT6(String s) {
if (!s.trim().isEmpty()) {
RCMDT6 = Short.parseShort(s);
} else {
RCMDT6 = Short.MIN_VALUE;
}
}

protected final void initRCMDT7(String s) {
if (!s.trim().isEmpty()) {
RCMDT7 = Short.parseShort(s);
} else {
RCMDT7 = Short.MIN_VALUE;
}
}

protected final void initRCMDT8(String s) {
if (!s.trim().isEmpty()) {
RCMDT8 = Short.parseShort(s);
} else {
RCMDT8 = Short.MIN_VALUE;
}
}

protected final void initRCMDT9(String s) {
if (!s.trim().isEmpty()) {
RCMDT9 = Short.parseShort(s);
} else {
RCMDT9 = Short.MIN_VALUE;
}
}

protected final void initRCNDY(String s) {
if (!s.trim().isEmpty()) {
RCNDY = Short.parseShort(s);
} else {
RCNDY = Short.MIN_VALUE;
}
}

protected final void initRCNDY2(String s) {
if (!s.trim().isEmpty()) {
RCNDY2 = Short.parseShort(s);
} else {
RCNDY2 = Short.MIN_VALUE;
}
}

protected final void initRCNDY3(String s) {
if (!s.trim().isEmpty()) {
RCNDY3 = Short.parseShort(s);
} else {
RCNDY3 = Short.MIN_VALUE;
}
}

protected final void initRCNDY4(String s) {
if (!s.trim().isEmpty()) {
RCNDY4 = Short.parseShort(s);
} else {
RCNDY4 = Short.MIN_VALUE;
}
}

protected final void initRCNDY5(String s) {
if (!s.trim().isEmpty()) {
RCNDY5 = Short.parseShort(s);
} else {
RCNDY5 = Short.MIN_VALUE;
}
}

protected final void initRCNDY6(String s) {
if (!s.trim().isEmpty()) {
RCNDY6 = Short.parseShort(s);
} else {
RCNDY6 = Short.MIN_VALUE;
}
}

protected final void initRCREL(String s) {
if (!s.trim().isEmpty()) {
RCREL = Byte.parseByte(s);
} else {
RCREL = Byte.MIN_VALUE;
}
}

protected final void initRCREL10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCREL10 = false;
} else {
RCREL10 = true;
}
}
}

protected final void initRCREL11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCREL11 = false;
} else {
RCREL11 = true;
}
}
}

protected final void initRCREL12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCREL12 = false;
} else {
RCREL12 = true;
}
}
}

protected final void initRCREL13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCREL13 = false;
} else {
RCREL13 = true;
}
}
}

protected final void initRCREL2(String s) {
if (!s.trim().isEmpty()) {
RCREL2 = Byte.parseByte(s);
} else {
RCREL2 = Byte.MIN_VALUE;
}
}

protected final void initRCREL3(String s) {
if (!s.trim().isEmpty()) {
RCREL3 = Byte.parseByte(s);
} else {
RCREL3 = Byte.MIN_VALUE;
}
}

protected final void initRCREL4(String s) {
if (!s.trim().isEmpty()) {
RCREL4 = Byte.parseByte(s);
} else {
RCREL4 = Byte.MIN_VALUE;
}
}

protected final void initRCREL5(String s) {
if (!s.trim().isEmpty()) {
RCREL5 = Byte.parseByte(s);
} else {
RCREL5 = Byte.MIN_VALUE;
}
}

protected final void initRCREL6(String s) {
if (!s.trim().isEmpty()) {
RCREL6 = Byte.parseByte(s);
} else {
RCREL6 = Byte.MIN_VALUE;
}
}

protected final void initRCREL7(String s) {
if (!s.trim().isEmpty()) {
RCREL7 = Byte.parseByte(s);
} else {
RCREL7 = Byte.MIN_VALUE;
}
}

protected final void initRCREL8(String s) {
if (!s.trim().isEmpty()) {
RCREL8 = Byte.parseByte(s);
} else {
RCREL8 = Byte.MIN_VALUE;
}
}

protected final void initRCREL9(String s) {
if (!s.trim().isEmpty()) {
RCREL9 = Byte.parseByte(s);
} else {
RCREL9 = Byte.MIN_VALUE;
}
}

protected final void initRCRELC10(String s) {
if (!s.trim().isEmpty()) {
RCRELC10 = Byte.parseByte(s);
} else {
RCRELC10 = Byte.MIN_VALUE;
}
}

protected final void initRCRELC11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCRELC11 = false;
} else {
RCRELC11 = true;
}
}
}

protected final void initRCRELC12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCRELC12 = false;
} else {
RCRELC12 = true;
}
}
}

protected final void initRCRELC13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCRELC13 = false;
} else {
RCRELC13 = true;
}
}
}

protected final void initRCRELCH(String s) {
if (!s.trim().isEmpty()) {
RCRELCH = Byte.parseByte(s);
} else {
RCRELCH = Byte.MIN_VALUE;
}
}

protected final void initRCRELCH2(String s) {
if (!s.trim().isEmpty()) {
RCRELCH2 = Byte.parseByte(s);
} else {
RCRELCH2 = Byte.MIN_VALUE;
}
}

protected final void initRCRELCH3(String s) {
if (!s.trim().isEmpty()) {
RCRELCH3 = Byte.parseByte(s);
} else {
RCRELCH3 = Byte.MIN_VALUE;
}
}

protected final void initRCRELCH4(String s) {
if (!s.trim().isEmpty()) {
RCRELCH4 = Byte.parseByte(s);
} else {
RCRELCH4 = Byte.MIN_VALUE;
}
}

protected final void initRCRELCH5(String s) {
if (!s.trim().isEmpty()) {
RCRELCH5 = Byte.parseByte(s);
} else {
RCRELCH5 = Byte.MIN_VALUE;
}
}

protected final void initRCRELCH6(String s) {
if (!s.trim().isEmpty()) {
RCRELCH6 = Byte.parseByte(s);
} else {
RCRELCH6 = Byte.MIN_VALUE;
}
}

protected final void initRCRELCH7(String s) {
if (!s.trim().isEmpty()) {
RCRELCH7 = Byte.parseByte(s);
} else {
RCRELCH7 = Byte.MIN_VALUE;
}
}

protected final void initRCRELCH8(String s) {
if (!s.trim().isEmpty()) {
RCRELCH8 = Byte.parseByte(s);
} else {
RCRELCH8 = Byte.MIN_VALUE;
}
}

protected final void initRCRELCH9(String s) {
if (!s.trim().isEmpty()) {
RCRELCH9 = Byte.parseByte(s);
} else {
RCRELCH9 = Byte.MIN_VALUE;
}
}

protected final void initRCRLC(String s) {
if (!s.trim().isEmpty()) {
RCRLC = Byte.parseByte(s);
} else {
RCRLC = Byte.MIN_VALUE;
}
}

protected final void initRCRLC10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCRLC10 = false;
} else {
RCRLC10 = true;
}
}
}

protected final void initRCRLC11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCRLC11 = false;
} else {
RCRLC11 = true;
}
}
}

protected final void initRCRLC12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCRLC12 = false;
} else {
RCRLC12 = true;
}
}
}

protected final void initRCRLC13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCRLC13 = false;
} else {
RCRLC13 = true;
}
}
}

protected final void initRCRLC2(String s) {
if (!s.trim().isEmpty()) {
RCRLC2 = Byte.parseByte(s);
} else {
RCRLC2 = Byte.MIN_VALUE;
}
}

protected final void initRCRLC3(String s) {
if (!s.trim().isEmpty()) {
RCRLC3 = Byte.parseByte(s);
} else {
RCRLC3 = Byte.MIN_VALUE;
}
}

protected final void initRCRLC4(String s) {
if (!s.trim().isEmpty()) {
RCRLC4 = Byte.parseByte(s);
} else {
RCRLC4 = Byte.MIN_VALUE;
}
}

protected final void initRCRLC5(String s) {
if (!s.trim().isEmpty()) {
RCRLC5 = Byte.parseByte(s);
} else {
RCRLC5 = Byte.MIN_VALUE;
}
}

protected final void initRCRLC6(String s) {
if (!s.trim().isEmpty()) {
RCRLC6 = Byte.parseByte(s);
} else {
RCRLC6 = Byte.MIN_VALUE;
}
}

protected final void initRCRLC7(String s) {
if (!s.trim().isEmpty()) {
RCRLC7 = Byte.parseByte(s);
} else {
RCRLC7 = Byte.MIN_VALUE;
}
}

protected final void initRCRLC8(String s) {
if (!s.trim().isEmpty()) {
RCRLC8 = Byte.parseByte(s);
} else {
RCRLC8 = Byte.MIN_VALUE;
}
}

protected final void initRCRLC9(String s) {
if (!s.trim().isEmpty()) {
RCRLC9 = Byte.parseByte(s);
} else {
RCRLC9 = Byte.MIN_VALUE;
}
}

protected final void initRCSEX(String s) {
if (!s.trim().isEmpty()) {
RCSEX = Byte.parseByte(s);
} else {
RCSEX = Byte.MIN_VALUE;
}
}

protected final void initRCSEX2(String s) {
if (!s.trim().isEmpty()) {
RCSEX2 = Byte.parseByte(s);
} else {
RCSEX2 = Byte.MIN_VALUE;
}
}

protected final void initRCSEX3(String s) {
if (!s.trim().isEmpty()) {
RCSEX3 = Byte.parseByte(s);
} else {
RCSEX3 = Byte.MIN_VALUE;
}
}

protected final void initRCSEX4(String s) {
if (!s.trim().isEmpty()) {
RCSEX4 = Byte.parseByte(s);
} else {
RCSEX4 = Byte.MIN_VALUE;
}
}

protected final void initRCSEX5(String s) {
if (!s.trim().isEmpty()) {
RCSEX5 = Byte.parseByte(s);
} else {
RCSEX5 = Byte.MIN_VALUE;
}
}

protected final void initRCSEX6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSEX6 = false;
} else {
RCSEX6 = true;
}
}
}

protected final void initRCSXC(String s) {
if (!s.trim().isEmpty()) {
RCSXC = Byte.parseByte(s);
} else {
RCSXC = Byte.MIN_VALUE;
}
}

protected final void initRCSXC10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXC10 = false;
} else {
RCSXC10 = true;
}
}
}

protected final void initRCSXC11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXC11 = false;
} else {
RCSXC11 = true;
}
}
}

protected final void initRCSXC12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXC12 = false;
} else {
RCSXC12 = true;
}
}
}

protected final void initRCSXC13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXC13 = false;
} else {
RCSXC13 = true;
}
}
}

protected final void initRCSXC2(String s) {
if (!s.trim().isEmpty()) {
RCSXC2 = Byte.parseByte(s);
} else {
RCSXC2 = Byte.MIN_VALUE;
}
}

protected final void initRCSXC3(String s) {
if (!s.trim().isEmpty()) {
RCSXC3 = Byte.parseByte(s);
} else {
RCSXC3 = Byte.MIN_VALUE;
}
}

protected final void initRCSXC4(String s) {
if (!s.trim().isEmpty()) {
RCSXC4 = Byte.parseByte(s);
} else {
RCSXC4 = Byte.MIN_VALUE;
}
}

protected final void initRCSXC5(String s) {
if (!s.trim().isEmpty()) {
RCSXC5 = Byte.parseByte(s);
} else {
RCSXC5 = Byte.MIN_VALUE;
}
}

protected final void initRCSXC6(String s) {
if (!s.trim().isEmpty()) {
RCSXC6 = Byte.parseByte(s);
} else {
RCSXC6 = Byte.MIN_VALUE;
}
}

protected final void initRCSXC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXC7 = false;
} else {
RCSXC7 = true;
}
}
}

protected final void initRCSXC8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXC8 = false;
} else {
RCSXC8 = true;
}
}
}

protected final void initRCSXC9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXC9 = false;
} else {
RCSXC9 = true;
}
}
}

protected final void initRCSXN(String s) {
if (!s.trim().isEmpty()) {
RCSXN = Byte.parseByte(s);
} else {
RCSXN = Byte.MIN_VALUE;
}
}

protected final void initRCSXN10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXN10 = false;
} else {
RCSXN10 = true;
}
}
}

protected final void initRCSXN11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXN11 = false;
} else {
RCSXN11 = true;
}
}
}

protected final void initRCSXN12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXN12 = false;
} else {
RCSXN12 = true;
}
}
}

protected final void initRCSXN13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXN13 = false;
} else {
RCSXN13 = true;
}
}
}

protected final void initRCSXN2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXN2 = false;
} else {
RCSXN2 = true;
}
}
}

protected final void initRCSXN3(String s) {
if (!s.trim().isEmpty()) {
RCSXN3 = Byte.parseByte(s);
} else {
RCSXN3 = Byte.MIN_VALUE;
}
}

protected final void initRCSXN4(String s) {
if (!s.trim().isEmpty()) {
RCSXN4 = Byte.parseByte(s);
} else {
RCSXN4 = Byte.MIN_VALUE;
}
}

protected final void initRCSXN5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXN5 = false;
} else {
RCSXN5 = true;
}
}
}

protected final void initRCSXN6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXN6 = false;
} else {
RCSXN6 = true;
}
}
}

protected final void initRCSXN7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXN7 = false;
} else {
RCSXN7 = true;
}
}
}

protected final void initRCSXN8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXN8 = false;
} else {
RCSXN8 = true;
}
}
}

protected final void initRCSXN9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCSXN9 = false;
} else {
RCSXN9 = true;
}
}
}

protected final void initRCTIM(String s) {
if (!s.trim().isEmpty()) {
RCTIM = Byte.parseByte(s);
} else {
RCTIM = Byte.MIN_VALUE;
}
}

protected final void initRCTIM10(String s) {
if (!s.trim().isEmpty()) {
RCTIM10 = Byte.parseByte(s);
} else {
RCTIM10 = Byte.MIN_VALUE;
}
}

protected final void initRCTIM11(String s) {
if (!s.trim().isEmpty()) {
RCTIM11 = Byte.parseByte(s);
} else {
RCTIM11 = Byte.MIN_VALUE;
}
}

protected final void initRCTIM12(String s) {
if (!s.trim().isEmpty()) {
RCTIM12 = Byte.parseByte(s);
} else {
RCTIM12 = Byte.MIN_VALUE;
}
}

protected final void initRCTIM13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RCTIM13 = false;
} else {
RCTIM13 = true;
}
}
}

protected final void initRCTIM2(String s) {
if (!s.trim().isEmpty()) {
RCTIM2 = Byte.parseByte(s);
} else {
RCTIM2 = Byte.MIN_VALUE;
}
}

protected final void initRCTIM3(String s) {
if (!s.trim().isEmpty()) {
RCTIM3 = Byte.parseByte(s);
} else {
RCTIM3 = Byte.MIN_VALUE;
}
}

protected final void initRCTIM4(String s) {
if (!s.trim().isEmpty()) {
RCTIM4 = Byte.parseByte(s);
} else {
RCTIM4 = Byte.MIN_VALUE;
}
}

protected final void initRCTIM5(String s) {
if (!s.trim().isEmpty()) {
RCTIM5 = Byte.parseByte(s);
} else {
RCTIM5 = Byte.MIN_VALUE;
}
}

protected final void initRCTIM6(String s) {
if (!s.trim().isEmpty()) {
RCTIM6 = Byte.parseByte(s);
} else {
RCTIM6 = Byte.MIN_VALUE;
}
}

protected final void initRCTIM7(String s) {
if (!s.trim().isEmpty()) {
RCTIM7 = Byte.parseByte(s);
} else {
RCTIM7 = Byte.MIN_VALUE;
}
}

protected final void initRCTIM8(String s) {
if (!s.trim().isEmpty()) {
RCTIM8 = Byte.parseByte(s);
} else {
RCTIM8 = Byte.MIN_VALUE;
}
}

protected final void initRCTIM9(String s) {
if (!s.trim().isEmpty()) {
RCTIM9 = Byte.parseByte(s);
} else {
RCTIM9 = Byte.MIN_VALUE;
}
}

protected final void initRCYRS(String s) {
if (!s.trim().isEmpty()) {
RCYRS = Short.parseShort(s);
} else {
RCYRS = Short.MIN_VALUE;
}
}

protected final void initRCYRS2(String s) {
if (!s.trim().isEmpty()) {
RCYRS2 = Short.parseShort(s);
} else {
RCYRS2 = Short.MIN_VALUE;
}
}

protected final void initRCYRS3(String s) {
if (!s.trim().isEmpty()) {
RCYRS3 = Short.parseShort(s);
} else {
RCYRS3 = Short.MIN_VALUE;
}
}

protected final void initRCYRS4(String s) {
if (!s.trim().isEmpty()) {
RCYRS4 = Short.parseShort(s);
} else {
RCYRS4 = Short.MIN_VALUE;
}
}

protected final void initRCYRS5(String s) {
if (!s.trim().isEmpty()) {
RCYRS5 = Short.parseShort(s);
} else {
RCYRS5 = Short.MIN_VALUE;
}
}

protected final void initRCYRS6(String s) {
if (!s.trim().isEmpty()) {
RCYRS6 = Short.parseShort(s);
} else {
RCYRS6 = Short.MIN_VALUE;
}
}

protected final void initRETAINEDDB_06(String s) {
if (!s.trim().isEmpty()) {
RETAINEDDB_06 = Double.parseDouble(s);
} else {
RETAINEDDB_06 = Double.NaN;
}
}

protected final void initRETAINEDDB_SPA(String s) {
if (!s.trim().isEmpty()) {
RETAINEDDB_SPA = Double.parseDouble(s);
} else {
RETAINEDDB_SPA = Double.NaN;
}
}

protected final void initRETAINEDDC_06(String s) {
if (!s.trim().isEmpty()) {
RETAINEDDC_06 = Double.parseDouble(s);
} else {
RETAINEDDC_06 = Double.NaN;
}
}

protected final void initRETAINEDDC_SPA(String s) {
if (!s.trim().isEmpty()) {
RETAINEDDC_SPA = Double.parseDouble(s);
} else {
RETAINEDDC_SPA = Double.NaN;
}
}

protected final void initRETROWGT(String s) {
if (!s.trim().isEmpty()) {
RETROWGT = Double.parseDouble(s);
} else {
RETROWGT = Double.NaN;
}
}

protected final void initRHCCLC(String s) {
if (!s.trim().isEmpty()) {
RHCCLC = Byte.parseByte(s);
} else {
RHCCLC = Byte.MIN_VALUE;
}
}

protected final void initRHCCLD(String s) {
if (!s.trim().isEmpty()) {
RHCCLD = Byte.parseByte(s);
} else {
RHCCLD = Byte.MIN_VALUE;
}
}

protected final void initRHCCLE(String s) {
if (!s.trim().isEmpty()) {
RHCCLE = Byte.parseByte(s);
} else {
RHCCLE = Byte.MIN_VALUE;
}
}

protected final void initRHCCLF(String s) {
if (!s.trim().isEmpty()) {
RHCCLF = Byte.parseByte(s);
} else {
RHCCLF = Byte.MIN_VALUE;
}
}

protected final void initRHCCLG(String s) {
if (!s.trim().isEmpty()) {
RHCCLG = Byte.parseByte(s);
} else {
RHCCLG = Byte.MIN_VALUE;
}
}

protected final void initRHCCLH(String s) {
if (!s.trim().isEmpty()) {
RHCCLH = Byte.parseByte(s);
} else {
RHCCLH = Byte.MIN_VALUE;
}
}

protected final void initRHCCLJ(String s) {
if (!s.trim().isEmpty()) {
RHCCLJ = Byte.parseByte(s);
} else {
RHCCLJ = Byte.MIN_VALUE;
}
}

protected final void initRHCCYA(String s) {
if (!s.trim().isEmpty()) {
RHCCYA = Short.parseShort(s);
} else {
RHCCYA = Short.MIN_VALUE;
}
}

protected final void initRHCCYB(String s) {
if (!s.trim().isEmpty()) {
RHCCYB = Short.parseShort(s);
} else {
RHCCYB = Short.MIN_VALUE;
}
}

protected final void initRHCCYC(String s) {
if (!s.trim().isEmpty()) {
RHCCYC = Short.parseShort(s);
} else {
RHCCYC = Short.MIN_VALUE;
}
}

protected final void initRHCCYD(String s) {
if (!s.trim().isEmpty()) {
RHCCYD = Short.parseShort(s);
} else {
RHCCYD = Short.MIN_VALUE;
}
}

protected final void initRHCCYE(String s) {
if (!s.trim().isEmpty()) {
RHCCYE = Short.parseShort(s);
} else {
RHCCYE = Short.MIN_VALUE;
}
}

protected final void initRHCCYF(String s) {
if (!s.trim().isEmpty()) {
RHCCYF = Short.parseShort(s);
} else {
RHCCYF = Short.MIN_VALUE;
}
}

protected final void initRHCCYG(String s) {
if (!s.trim().isEmpty()) {
RHCCYG = Short.parseShort(s);
} else {
RHCCYG = Short.MIN_VALUE;
}
}

protected final void initRHCCYH(String s) {
if (!s.trim().isEmpty()) {
RHCCYH = Short.parseShort(s);
} else {
RHCCYH = Short.MIN_VALUE;
}
}

protected final void initRHCCYJ(String s) {
if (!s.trim().isEmpty()) {
RHCCYJ = Short.parseShort(s);
} else {
RHCCYJ = Short.MIN_VALUE;
}
}

protected final void initRHCCYK(String s) {
if (!s.trim().isEmpty()) {
RHCCYK = Short.parseShort(s);
} else {
RHCCYK = Short.MIN_VALUE;
}
}

protected final void initRHCCYL(String s) {
if (!s.trim().isEmpty()) {
RHCCYL = Short.parseShort(s);
} else {
RHCCYL = Short.MIN_VALUE;
}
}

protected final void initRHCCYM(String s) {
if (!s.trim().isEmpty()) {
RHCCYM = Short.parseShort(s);
} else {
RHCCYM = Short.MIN_VALUE;
}
}

protected final void initRHCCYN(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RHCCYN = false;
} else {
RHCCYN = true;
}
}
}

protected final void initRHCCYP(String s) {
if (!s.trim().isEmpty()) {
RHCCYP = Short.parseShort(s);
} else {
RHCCYP = Short.MIN_VALUE;
}
}

protected final void initRHCCYQ(String s) {
if (!s.trim().isEmpty()) {
RHCCYQ = Short.parseShort(s);
} else {
RHCCYQ = Short.MIN_VALUE;
}
}

protected final void initRHCIA(String s) {
if (!s.trim().isEmpty()) {
RHCIA = Byte.parseByte(s);
} else {
RHCIA = Byte.MIN_VALUE;
}
}

protected final void initRHCIB(String s) {
if (!s.trim().isEmpty()) {
RHCIB = Byte.parseByte(s);
} else {
RHCIB = Byte.MIN_VALUE;
}
}

protected final void initRHCIC(String s) {
if (!s.trim().isEmpty()) {
RHCIC = Byte.parseByte(s);
} else {
RHCIC = Byte.MIN_VALUE;
}
}

protected final void initRHCID(String s) {
if (!s.trim().isEmpty()) {
RHCID = Byte.parseByte(s);
} else {
RHCID = Byte.MIN_VALUE;
}
}

protected final void initRHCIE(String s) {
if (!s.trim().isEmpty()) {
RHCIE = Byte.parseByte(s);
} else {
RHCIE = Byte.MIN_VALUE;
}
}

protected final void initRHCIF(String s) {
if (!s.trim().isEmpty()) {
RHCIF = Byte.parseByte(s);
} else {
RHCIF = Byte.MIN_VALUE;
}
}

protected final void initRHCIG1(String s) {
if (!s.trim().isEmpty()) {
RHCIG1 = Byte.parseByte(s);
} else {
RHCIG1 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG10(String s) {
if (!s.trim().isEmpty()) {
RHCIG10 = Byte.parseByte(s);
} else {
RHCIG10 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG10M(String s) {
if (!s.trim().isEmpty()) {
RHCIG10M = Byte.parseByte(s);
} else {
RHCIG10M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG11(String s) {
if (!s.trim().isEmpty()) {
RHCIG11 = Byte.parseByte(s);
} else {
RHCIG11 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG11M(String s) {
if (!s.trim().isEmpty()) {
RHCIG11M = Byte.parseByte(s);
} else {
RHCIG11M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG12(String s) {
if (!s.trim().isEmpty()) {
RHCIG12 = Byte.parseByte(s);
} else {
RHCIG12 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG12M(String s) {
if (!s.trim().isEmpty()) {
RHCIG12M = Byte.parseByte(s);
} else {
RHCIG12M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG13(String s) {
if (!s.trim().isEmpty()) {
RHCIG13 = Byte.parseByte(s);
} else {
RHCIG13 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG13M(String s) {
if (!s.trim().isEmpty()) {
RHCIG13M = Byte.parseByte(s);
} else {
RHCIG13M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG14(String s) {
if (!s.trim().isEmpty()) {
RHCIG14 = Byte.parseByte(s);
} else {
RHCIG14 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG14M(String s) {
if (!s.trim().isEmpty()) {
RHCIG14M = Byte.parseByte(s);
} else {
RHCIG14M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG1M(String s) {
if (!s.trim().isEmpty()) {
RHCIG1M = Byte.parseByte(s);
} else {
RHCIG1M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG2(String s) {
if (!s.trim().isEmpty()) {
RHCIG2 = Byte.parseByte(s);
} else {
RHCIG2 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG2M(String s) {
if (!s.trim().isEmpty()) {
RHCIG2M = Byte.parseByte(s);
} else {
RHCIG2M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG3(String s) {
if (!s.trim().isEmpty()) {
RHCIG3 = Byte.parseByte(s);
} else {
RHCIG3 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG3M(String s) {
if (!s.trim().isEmpty()) {
RHCIG3M = Byte.parseByte(s);
} else {
RHCIG3M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG4(String s) {
if (!s.trim().isEmpty()) {
RHCIG4 = Byte.parseByte(s);
} else {
RHCIG4 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG4M(String s) {
if (!s.trim().isEmpty()) {
RHCIG4M = Byte.parseByte(s);
} else {
RHCIG4M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG5(String s) {
if (!s.trim().isEmpty()) {
RHCIG5 = Byte.parseByte(s);
} else {
RHCIG5 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG51M(String s) {
if (!s.trim().isEmpty()) {
RHCIG51M = Byte.parseByte(s);
} else {
RHCIG51M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG52M(String s) {
if (!s.trim().isEmpty()) {
RHCIG52M = Byte.parseByte(s);
} else {
RHCIG52M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG53M(String s) {
if (!s.trim().isEmpty()) {
RHCIG53M = Byte.parseByte(s);
} else {
RHCIG53M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG54M(String s) {
if (!s.trim().isEmpty()) {
RHCIG54M = Byte.parseByte(s);
} else {
RHCIG54M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG55M(String s) {
if (!s.trim().isEmpty()) {
RHCIG55M = Byte.parseByte(s);
} else {
RHCIG55M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG56M(String s) {
if (!s.trim().isEmpty()) {
RHCIG56M = Byte.parseByte(s);
} else {
RHCIG56M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG57M(String s) {
if (!s.trim().isEmpty()) {
RHCIG57M = Byte.parseByte(s);
} else {
RHCIG57M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG5M(String s) {
if (!s.trim().isEmpty()) {
RHCIG5M = Byte.parseByte(s);
} else {
RHCIG5M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG6(String s) {
if (!s.trim().isEmpty()) {
RHCIG6 = Byte.parseByte(s);
} else {
RHCIG6 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG6M(String s) {
if (!s.trim().isEmpty()) {
RHCIG6M = Byte.parseByte(s);
} else {
RHCIG6M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG7(String s) {
if (!s.trim().isEmpty()) {
RHCIG7 = Byte.parseByte(s);
} else {
RHCIG7 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG7M(String s) {
if (!s.trim().isEmpty()) {
RHCIG7M = Byte.parseByte(s);
} else {
RHCIG7M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG8(String s) {
if (!s.trim().isEmpty()) {
RHCIG8 = Byte.parseByte(s);
} else {
RHCIG8 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG85M(String s) {
if (!s.trim().isEmpty()) {
RHCIG85M = Byte.parseByte(s);
} else {
RHCIG85M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG86M(String s) {
if (!s.trim().isEmpty()) {
RHCIG86M = Byte.parseByte(s);
} else {
RHCIG86M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG8M(String s) {
if (!s.trim().isEmpty()) {
RHCIG8M = Byte.parseByte(s);
} else {
RHCIG8M = Byte.MIN_VALUE;
}
}

protected final void initRHCIG9(String s) {
if (!s.trim().isEmpty()) {
RHCIG9 = Byte.parseByte(s);
} else {
RHCIG9 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG95(String s) {
if (!s.trim().isEmpty()) {
RHCIG95 = Byte.parseByte(s);
} else {
RHCIG95 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG96(String s) {
if (!s.trim().isEmpty()) {
RHCIG96 = Byte.parseByte(s);
} else {
RHCIG96 = Byte.MIN_VALUE;
}
}

protected final void initRHCIG9M(String s) {
if (!s.trim().isEmpty()) {
RHCIG9M = Byte.parseByte(s);
} else {
RHCIG9M = Byte.MIN_VALUE;
}
}

protected final void initRHHFY(String s) {
if (!s.trim().isEmpty()) {
RHHFY = Short.parseShort(s);
} else {
RHHFY = Short.MIN_VALUE;
}
}

protected final void initRHHNO(String s) {
if (!s.trim().isEmpty()) {
RHHNO = Byte.parseByte(s);
} else {
RHHNO = Byte.MIN_VALUE;
}
}

protected final void initRHHPS(String s) {
if (!s.trim().isEmpty()) {
RHHPS = Byte.parseByte(s);
} else {
RHHPS = Byte.MIN_VALUE;
}
}

protected final void initRHHPY(String s) {
if (!s.trim().isEmpty()) {
RHHPY = Byte.parseByte(s);
} else {
RHHPY = Byte.MIN_VALUE;
}
}

protected final void initRHHRT(String s) {
if (!s.trim().isEmpty()) {
RHHRT = Byte.parseByte(s);
} else {
RHHRT = Byte.MIN_VALUE;
}
}

protected final void initRHHST(String s) {
if (!s.trim().isEmpty()) {
RHHST = Short.parseShort(s);
} else {
RHHST = Short.MIN_VALUE;
}
}

protected final void initRHHYE(String s) {
if (!s.trim().isEmpty()) {
RHHYE = Byte.parseByte(s);
} else {
RHHYE = Byte.MIN_VALUE;
}
}

protected final void initRHHYY(String s) {
if (!s.trim().isEmpty()) {
RHHYY = Short.parseShort(s);
} else {
RHHYY = Short.MIN_VALUE;
}
}

protected final void initRHINA(String s) {
if (!s.trim().isEmpty()) {
RHINA = Short.parseShort(s);
} else {
RHINA = Short.MIN_VALUE;
}
}

protected final void initRHINJ(String s) {
if (!s.trim().isEmpty()) {
RHINJ = Byte.parseByte(s);
} else {
RHINJ = Byte.MIN_VALUE;
}
}

protected final void initRHMEB(String s) {
if (!s.trim().isEmpty()) {
RHMEB = Byte.parseByte(s);
} else {
RHMEB = Byte.MIN_VALUE;
}
}

protected final void initRHMEN(String s) {
if (!s.trim().isEmpty()) {
RHMEN = Byte.parseByte(s);
} else {
RHMEN = Byte.MIN_VALUE;
}
}

protected final void initRHOVE(String s) {
if (!s.trim().isEmpty()) {
RHOVE = Byte.parseByte(s);
} else {
RHOVE = Byte.MIN_VALUE;
}
}

protected final void initRHOVY(String s) {
if (!s.trim().isEmpty()) {
RHOVY = Short.parseShort(s);
} else {
RHOVY = Short.MIN_VALUE;
}
}

protected final void initRHPBB(String s) {
if (!s.trim().isEmpty()) {
RHPBB = Byte.parseByte(s);
} else {
RHPBB = Byte.MIN_VALUE;
}
}

protected final void initRHPBC1(String s) {
if (!s.trim().isEmpty()) {
RHPBC1 = Byte.parseByte(s);
} else {
RHPBC1 = Byte.MIN_VALUE;
}
}

protected final void initRHPBC10(String s) {
if (!s.trim().isEmpty()) {
RHPBC10 = Byte.parseByte(s);
} else {
RHPBC10 = Byte.MIN_VALUE;
}
}

protected final void initRHPBC2(String s) {
if (!s.trim().isEmpty()) {
RHPBC2 = Byte.parseByte(s);
} else {
RHPBC2 = Byte.MIN_VALUE;
}
}

protected final void initRHPBC3(String s) {
if (!s.trim().isEmpty()) {
RHPBC3 = Byte.parseByte(s);
} else {
RHPBC3 = Byte.MIN_VALUE;
}
}

protected final void initRHPBC4(String s) {
if (!s.trim().isEmpty()) {
RHPBC4 = Byte.parseByte(s);
} else {
RHPBC4 = Byte.MIN_VALUE;
}
}

protected final void initRHPBC5(String s) {
if (!s.trim().isEmpty()) {
RHPBC5 = Byte.parseByte(s);
} else {
RHPBC5 = Byte.MIN_VALUE;
}
}

protected final void initRHPBC6(String s) {
if (!s.trim().isEmpty()) {
RHPBC6 = Byte.parseByte(s);
} else {
RHPBC6 = Byte.MIN_VALUE;
}
}

protected final void initRHPBC7(String s) {
if (!s.trim().isEmpty()) {
RHPBC7 = Byte.parseByte(s);
} else {
RHPBC7 = Byte.MIN_VALUE;
}
}

protected final void initRHPBC8(String s) {
if (!s.trim().isEmpty()) {
RHPBC8 = Byte.parseByte(s);
} else {
RHPBC8 = Byte.MIN_VALUE;
}
}

protected final void initRHPBC9(String s) {
if (!s.trim().isEmpty()) {
RHPBC9 = Byte.parseByte(s);
} else {
RHPBC9 = Byte.MIN_VALUE;
}
}

protected final void initRHPBC96(String s) {
if (!s.trim().isEmpty()) {
RHPBC96 = Byte.parseByte(s);
} else {
RHPBC96 = Byte.MIN_VALUE;
}
}

protected final void initRHPBD1(String s) {
if (!s.trim().isEmpty()) {
RHPBD1 = Byte.parseByte(s);
} else {
RHPBD1 = Byte.MIN_VALUE;
}
}

protected final void initRHPBD2(String s) {
if (!s.trim().isEmpty()) {
RHPBD2 = Byte.parseByte(s);
} else {
RHPBD2 = Byte.MIN_VALUE;
}
}

protected final void initRHPBD3(String s) {
if (!s.trim().isEmpty()) {
RHPBD3 = Byte.parseByte(s);
} else {
RHPBD3 = Byte.MIN_VALUE;
}
}

protected final void initRHPBD4(String s) {
if (!s.trim().isEmpty()) {
RHPBD4 = Byte.parseByte(s);
} else {
RHPBD4 = Byte.MIN_VALUE;
}
}

protected final void initRHPBD5(String s) {
if (!s.trim().isEmpty()) {
RHPBD5 = Byte.parseByte(s);
} else {
RHPBD5 = Byte.MIN_VALUE;
}
}

protected final void initRHPBD6(String s) {
if (!s.trim().isEmpty()) {
RHPBD6 = Byte.parseByte(s);
} else {
RHPBD6 = Byte.MIN_VALUE;
}
}

protected final void initRHPBD7(String s) {
if (!s.trim().isEmpty()) {
RHPBD7 = Byte.parseByte(s);
} else {
RHPBD7 = Byte.MIN_VALUE;
}
}

protected final void initRHPBD8(String s) {
if (!s.trim().isEmpty()) {
RHPBD8 = Byte.parseByte(s);
} else {
RHPBD8 = Byte.MIN_VALUE;
}
}

protected final void initRHPBD9(String s) {
if (!s.trim().isEmpty()) {
RHPBD9 = Byte.parseByte(s);
} else {
RHPBD9 = Byte.MIN_VALUE;
}
}

protected final void initRHPBE1(String s) {
if (!s.trim().isEmpty()) {
RHPBE1 = Byte.parseByte(s);
} else {
RHPBE1 = Byte.MIN_VALUE;
}
}

protected final void initRHPBE1M(String s) {
if (!s.trim().isEmpty()) {
RHPBE1M = Byte.parseByte(s);
} else {
RHPBE1M = Byte.MIN_VALUE;
}
}

protected final void initRHPBE2(String s) {
if (!s.trim().isEmpty()) {
RHPBE2 = Byte.parseByte(s);
} else {
RHPBE2 = Byte.MIN_VALUE;
}
}

protected final void initRHPBE2M(String s) {
if (!s.trim().isEmpty()) {
RHPBE2M = Byte.parseByte(s);
} else {
RHPBE2M = Byte.MIN_VALUE;
}
}

protected final void initRHPBE3(String s) {
if (!s.trim().isEmpty()) {
RHPBE3 = Byte.parseByte(s);
} else {
RHPBE3 = Byte.MIN_VALUE;
}
}

protected final void initRHPBE3M(String s) {
if (!s.trim().isEmpty()) {
RHPBE3M = Byte.parseByte(s);
} else {
RHPBE3M = Byte.MIN_VALUE;
}
}

protected final void initRHPBE4(String s) {
if (!s.trim().isEmpty()) {
RHPBE4 = Byte.parseByte(s);
} else {
RHPBE4 = Byte.MIN_VALUE;
}
}

protected final void initRHPBE4M(String s) {
if (!s.trim().isEmpty()) {
RHPBE4M = Byte.parseByte(s);
} else {
RHPBE4M = Byte.MIN_VALUE;
}
}

protected final void initRHPBE5(String s) {
if (!s.trim().isEmpty()) {
RHPBE5 = Byte.parseByte(s);
} else {
RHPBE5 = Byte.MIN_VALUE;
}
}

protected final void initRHPBE51M(String s) {
if (!s.trim().isEmpty()) {
RHPBE51M = Byte.parseByte(s);
} else {
RHPBE51M = Byte.MIN_VALUE;
}
}

protected final void initRHPBE52M(String s) {
if (!s.trim().isEmpty()) {
RHPBE52M = Byte.parseByte(s);
} else {
RHPBE52M = Byte.MIN_VALUE;
}
}

protected final void initRHPBE5M(String s) {
if (!s.trim().isEmpty()) {
RHPBE5M = Byte.parseByte(s);
} else {
RHPBE5M = Byte.MIN_VALUE;
}
}

protected final void initRHPBE6(String s) {
if (!s.trim().isEmpty()) {
RHPBE6 = Byte.parseByte(s);
} else {
RHPBE6 = Byte.MIN_VALUE;
}
}

protected final void initRHPBE6M(String s) {
if (!s.trim().isEmpty()) {
RHPBE6M = Byte.parseByte(s);
} else {
RHPBE6M = Byte.MIN_VALUE;
}
}

protected final void initRHPBE7(String s) {
if (!s.trim().isEmpty()) {
RHPBE7 = Byte.parseByte(s);
} else {
RHPBE7 = Byte.MIN_VALUE;
}
}

protected final void initRHPBE7M(String s) {
if (!s.trim().isEmpty()) {
RHPBE7M = Byte.parseByte(s);
} else {
RHPBE7M = Byte.MIN_VALUE;
}
}

protected final void initRHPBE85M(String s) {
if (!s.trim().isEmpty()) {
RHPBE85M = Byte.parseByte(s);
} else {
RHPBE85M = Byte.MIN_VALUE;
}
}

protected final void initRHPBE86M(String s) {
if (!s.trim().isEmpty()) {
RHPBE86M = Byte.parseByte(s);
} else {
RHPBE86M = Byte.MIN_VALUE;
}
}

protected final void initRHPBE95(String s) {
if (!s.trim().isEmpty()) {
RHPBE95 = Byte.parseByte(s);
} else {
RHPBE95 = Byte.MIN_VALUE;
}
}

protected final void initRHPBE96(String s) {
if (!s.trim().isEmpty()) {
RHPBE96 = Byte.parseByte(s);
} else {
RHPBE96 = Byte.MIN_VALUE;
}
}

protected final void initRHPBX1(String s) {
if (!s.trim().isEmpty()) {
RHPBX1 = Byte.parseByte(s);
} else {
RHPBX1 = Byte.MIN_VALUE;
}
}

protected final void initRHPBX1M(String s) {
if (!s.trim().isEmpty()) {
RHPBX1M = Byte.parseByte(s);
} else {
RHPBX1M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX2(String s) {
if (!s.trim().isEmpty()) {
RHPBX2 = Byte.parseByte(s);
} else {
RHPBX2 = Byte.MIN_VALUE;
}
}

protected final void initRHPBX2M(String s) {
if (!s.trim().isEmpty()) {
RHPBX2M = Byte.parseByte(s);
} else {
RHPBX2M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX3(String s) {
if (!s.trim().isEmpty()) {
RHPBX3 = Byte.parseByte(s);
} else {
RHPBX3 = Byte.MIN_VALUE;
}
}

protected final void initRHPBX3M(String s) {
if (!s.trim().isEmpty()) {
RHPBX3M = Byte.parseByte(s);
} else {
RHPBX3M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX4(String s) {
if (!s.trim().isEmpty()) {
RHPBX4 = Byte.parseByte(s);
} else {
RHPBX4 = Byte.MIN_VALUE;
}
}

protected final void initRHPBX4M(String s) {
if (!s.trim().isEmpty()) {
RHPBX4M = Byte.parseByte(s);
} else {
RHPBX4M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX5(String s) {
if (!s.trim().isEmpty()) {
RHPBX5 = Byte.parseByte(s);
} else {
RHPBX5 = Byte.MIN_VALUE;
}
}

protected final void initRHPBX51M(String s) {
if (!s.trim().isEmpty()) {
RHPBX51M = Byte.parseByte(s);
} else {
RHPBX51M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX52M(String s) {
if (!s.trim().isEmpty()) {
RHPBX52M = Byte.parseByte(s);
} else {
RHPBX52M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX53M(String s) {
if (!s.trim().isEmpty()) {
RHPBX53M = Byte.parseByte(s);
} else {
RHPBX53M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX54M(String s) {
if (!s.trim().isEmpty()) {
RHPBX54M = Byte.parseByte(s);
} else {
RHPBX54M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX55M(String s) {
if (!s.trim().isEmpty()) {
RHPBX55M = Byte.parseByte(s);
} else {
RHPBX55M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX56M(String s) {
if (!s.trim().isEmpty()) {
RHPBX56M = Byte.parseByte(s);
} else {
RHPBX56M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX57M(String s) {
if (!s.trim().isEmpty()) {
RHPBX57M = Byte.parseByte(s);
} else {
RHPBX57M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX5M(String s) {
if (!s.trim().isEmpty()) {
RHPBX5M = Byte.parseByte(s);
} else {
RHPBX5M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX6(String s) {
if (!s.trim().isEmpty()) {
RHPBX6 = Byte.parseByte(s);
} else {
RHPBX6 = Byte.MIN_VALUE;
}
}

protected final void initRHPBX6M(String s) {
if (!s.trim().isEmpty()) {
RHPBX6M = Byte.parseByte(s);
} else {
RHPBX6M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX7(String s) {
if (!s.trim().isEmpty()) {
RHPBX7 = Byte.parseByte(s);
} else {
RHPBX7 = Byte.MIN_VALUE;
}
}

protected final void initRHPBX7M(String s) {
if (!s.trim().isEmpty()) {
RHPBX7M = Byte.parseByte(s);
} else {
RHPBX7M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX8(String s) {
if (!s.trim().isEmpty()) {
RHPBX8 = Byte.parseByte(s);
} else {
RHPBX8 = Byte.MIN_VALUE;
}
}

protected final void initRHPBX85M(String s) {
if (!s.trim().isEmpty()) {
RHPBX85M = Byte.parseByte(s);
} else {
RHPBX85M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX86M(String s) {
if (!s.trim().isEmpty()) {
RHPBX86M = Byte.parseByte(s);
} else {
RHPBX86M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX8M(String s) {
if (!s.trim().isEmpty()) {
RHPBX8M = Byte.parseByte(s);
} else {
RHPBX8M = Byte.MIN_VALUE;
}
}

protected final void initRHPBX95(String s) {
if (!s.trim().isEmpty()) {
RHPBX95 = Byte.parseByte(s);
} else {
RHPBX95 = Byte.MIN_VALUE;
}
}

protected final void initRHPBX96(String s) {
if (!s.trim().isEmpty()) {
RHPBX96 = Byte.parseByte(s);
} else {
RHPBX96 = Byte.MIN_VALUE;
}
}

protected final void initRHPEE(String s) {
if (!s.trim().isEmpty()) {
RHPEE = Byte.parseByte(s);
} else {
RHPEE = Byte.MIN_VALUE;
}
}

protected final void initRHPER(String s) {
if (!s.trim().isEmpty()) {
RHPER = Byte.parseByte(s);
} else {
RHPER = Byte.MIN_VALUE;
}
}

protected final void initRHPERC(String s) {
if (!s.trim().isEmpty()) {
RHPERC = Byte.parseByte(s);
} else {
RHPERC = Byte.MIN_VALUE;
}
}

protected final void initRHPEY(String s) {
if (!s.trim().isEmpty()) {
RHPEY = Short.parseShort(s);
} else {
RHPEY = Short.MIN_VALUE;
}
}

protected final void initRHSKA(String s) {
if (!s.trim().isEmpty()) {
RHSKA = Byte.parseByte(s);
} else {
RHSKA = Byte.MIN_VALUE;
}
}

protected final void initRHSMA(String s) {
if (!s.trim().isEmpty()) {
RHSMA = Byte.parseByte(s);
} else {
RHSMA = Byte.MIN_VALUE;
}
}

protected final void initRHSMB(String s) {
if (!s.trim().isEmpty()) {
RHSMB = Byte.parseByte(s);
} else {
RHSMB = Byte.MIN_VALUE;
}
}

protected final void initRHSMF(String s) {
if (!s.trim().isEmpty()) {
RHSMF = Short.parseShort(s);
} else {
RHSMF = Short.MIN_VALUE;
}
}

protected final void initRHSMK(String s) {
if (!s.trim().isEmpty()) {
RHSMK = Byte.parseByte(s);
} else {
RHSMK = Byte.MIN_VALUE;
}
}

protected final void initRHSML(String s) {
if (!s.trim().isEmpty()) {
RHSML = Short.parseShort(s);
} else {
RHSML = Short.MIN_VALUE;
}
}

protected final void initRHSMS(String s) {
if (!s.trim().isEmpty()) {
RHSMS = Byte.parseByte(s);
} else {
RHSMS = Byte.MIN_VALUE;
}
}

protected final void initRHSMT1(String s) {
if (!s.trim().isEmpty()) {
RHSMT1 = Byte.parseByte(s);
} else {
RHSMT1 = Byte.MIN_VALUE;
}
}

protected final void initRHSMT2(String s) {
if (!s.trim().isEmpty()) {
RHSMT2 = Byte.parseByte(s);
} else {
RHSMT2 = Byte.MIN_VALUE;
}
}

protected final void initRHSMT3(String s) {
if (!s.trim().isEmpty()) {
RHSMT3 = Byte.parseByte(s);
} else {
RHSMT3 = Byte.MIN_VALUE;
}
}

protected final void initRHSMT4(String s) {
if (!s.trim().isEmpty()) {
RHSMT4 = Byte.parseByte(s);
} else {
RHSMT4 = Byte.MIN_VALUE;
}
}

protected final void initRHSMT5(String s) {
if (!s.trim().isEmpty()) {
RHSMT5 = Byte.parseByte(s);
} else {
RHSMT5 = Byte.MIN_VALUE;
}
}

protected final void initRHSMT6(String s) {
if (!s.trim().isEmpty()) {
RHSMT6 = Byte.parseByte(s);
} else {
RHSMT6 = Byte.MIN_VALUE;
}
}

protected final void initRHSMT7(String s) {
if (!s.trim().isEmpty()) {
RHSMT7 = Byte.parseByte(s);
} else {
RHSMT7 = Byte.MIN_VALUE;
}
}

protected final void initRHSMT8(String s) {
if (!s.trim().isEmpty()) {
RHSMT8 = Byte.parseByte(s);
} else {
RHSMT8 = Byte.MIN_VALUE;
}
}

protected final void initRHSMT96(String s) {
if (!s.trim().isEmpty()) {
RHSMT96 = Byte.parseByte(s);
} else {
RHSMT96 = Byte.MIN_VALUE;
}
}

protected final void initRHSMX(String s) {
if (!s.trim().isEmpty()) {
RHSMX = Byte.parseByte(s);
} else {
RHSMX = Byte.MIN_VALUE;
}
}

protected final void initRHSMY(String s) {
if (!s.trim().isEmpty()) {
RHSMY = Byte.parseByte(s);
} else {
RHSMY = Byte.MIN_VALUE;
}
}

protected final void initROIMP(String s) {
if (!s.trim().isEmpty()) {
ROIMP = Byte.parseByte(s);
} else {
ROIMP = Byte.MIN_VALUE;
}
}

protected final void initROIMP2(String s) {
if (!s.trim().isEmpty()) {
ROIMP2 = Byte.parseByte(s);
} else {
ROIMP2 = Byte.MIN_VALUE;
}
}

protected final void initROIMP3(String s) {
if (!s.trim().isEmpty()) {
ROIMP3 = Byte.parseByte(s);
} else {
ROIMP3 = Byte.MIN_VALUE;
}
}

protected final void initROOTY(String s) {
if (!s.trim().isEmpty()) {
ROOTY = Short.parseShort(s);
} else {
ROOTY = Short.MIN_VALUE;
}
}

protected final void initROOTY2(String s) {
if (!s.trim().isEmpty()) {
ROOTY2 = Short.parseShort(s);
} else {
ROOTY2 = Short.MIN_VALUE;
}
}

protected final void initROOTY3(String s) {
if (!s.trim().isEmpty()) {
ROOTY3 = Short.parseShort(s);
} else {
ROOTY3 = Short.MIN_VALUE;
}
}

protected final void initROSC(String s) {
if (!s.trim().isEmpty()) {
ROSC = Byte.parseByte(s);
} else {
ROSC = Byte.MIN_VALUE;
}
}

protected final void initRPCHK(String s) {
if (!s.trim().isEmpty()) {
RPCHK = Byte.parseByte(s);
} else {
RPCHK = Byte.MIN_VALUE;
}
}

protected final void initRPCHK2(String s) {
if (!s.trim().isEmpty()) {
RPCHK2 = Byte.parseByte(s);
} else {
RPCHK2 = Byte.MIN_VALUE;
}
}

protected final void initRPCHK3(String s) {
if (!s.trim().isEmpty()) {
RPCHK3 = Byte.parseByte(s);
} else {
RPCHK3 = Byte.MIN_VALUE;
}
}

protected final void initRPCHK4(String s) {
if (!s.trim().isEmpty()) {
RPCHK4 = Byte.parseByte(s);
} else {
RPCHK4 = Byte.MIN_VALUE;
}
}

protected final void initRPCHK5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPCHK5 = false;
} else {
RPCHK5 = true;
}
}
}

protected final void initRPCHK6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPCHK6 = false;
} else {
RPCHK6 = true;
}
}
}

protected final void initRPCHK7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPCHK7 = false;
} else {
RPCHK7 = true;
}
}
}

protected final void initRPDIV(String s) {
if (!s.trim().isEmpty()) {
RPDIV = Byte.parseByte(s);
} else {
RPDIV = Byte.MIN_VALUE;
}
}

protected final void initRPDIV2(String s) {
if (!s.trim().isEmpty()) {
RPDIV2 = Byte.parseByte(s);
} else {
RPDIV2 = Byte.MIN_VALUE;
}
}

protected final void initRPDIV3(String s) {
if (!s.trim().isEmpty()) {
RPDIV3 = Byte.parseByte(s);
} else {
RPDIV3 = Byte.MIN_VALUE;
}
}

protected final void initRPDIV4(String s) {
if (!s.trim().isEmpty()) {
RPDIV4 = Byte.parseByte(s);
} else {
RPDIV4 = Byte.MIN_VALUE;
}
}

protected final void initRPDIV5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPDIV5 = false;
} else {
RPDIV5 = true;
}
}
}

protected final void initRPDIV6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPDIV6 = false;
} else {
RPDIV6 = true;
}
}
}

protected final void initRPDIV7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPDIV7 = false;
} else {
RPDIV7 = true;
}
}
}

protected final void initRPDIY(String s) {
if (!s.trim().isEmpty()) {
RPDIY = Short.parseShort(s);
} else {
RPDIY = Short.MIN_VALUE;
}
}

protected final void initRPDIY2(String s) {
if (!s.trim().isEmpty()) {
RPDIY2 = Short.parseShort(s);
} else {
RPDIY2 = Short.MIN_VALUE;
}
}

protected final void initRPDIY3(String s) {
if (!s.trim().isEmpty()) {
RPDIY3 = Short.parseShort(s);
} else {
RPDIY3 = Short.MIN_VALUE;
}
}

protected final void initRPDIY4(String s) {
if (!s.trim().isEmpty()) {
RPDIY4 = Short.parseShort(s);
} else {
RPDIY4 = Short.MIN_VALUE;
}
}

protected final void initRPDIY5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPDIY5 = false;
} else {
RPDIY5 = true;
}
}
}

protected final void initRPDIY6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPDIY6 = false;
} else {
RPDIY6 = true;
}
}
}

protected final void initRPDIY7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPDIY7 = false;
} else {
RPDIY7 = true;
}
}
}

protected final void initRPDYR(String s) {
if (!s.trim().isEmpty()) {
RPDYR = Short.parseShort(s);
} else {
RPDYR = Short.MIN_VALUE;
}
}

protected final void initRPDYR2(String s) {
if (!s.trim().isEmpty()) {
RPDYR2 = Short.parseShort(s);
} else {
RPDYR2 = Short.MIN_VALUE;
}
}

protected final void initRPDYR3(String s) {
if (!s.trim().isEmpty()) {
RPDYR3 = Short.parseShort(s);
} else {
RPDYR3 = Short.MIN_VALUE;
}
}

protected final void initRPDYR4(String s) {
if (!s.trim().isEmpty()) {
RPDYR4 = Short.parseShort(s);
} else {
RPDYR4 = Short.MIN_VALUE;
}
}

protected final void initRPDYR5(String s) {
if (!s.trim().isEmpty()) {
RPDYR5 = Short.parseShort(s);
} else {
RPDYR5 = Short.MIN_VALUE;
}
}

protected final void initRPDYR6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPDYR6 = false;
} else {
RPDYR6 = true;
}
}
}

protected final void initRPDYR7(String s) {
if (!s.trim().isEmpty()) {
RPDYR7 = Short.parseShort(s);
} else {
RPDYR7 = Short.MIN_VALUE;
}
}

protected final void initRPEYR(String s) {
if (!s.trim().isEmpty()) {
RPEYR = Short.parseShort(s);
} else {
RPEYR = Short.MIN_VALUE;
}
}

protected final void initRPEYR2(String s) {
if (!s.trim().isEmpty()) {
RPEYR2 = Short.parseShort(s);
} else {
RPEYR2 = Short.MIN_VALUE;
}
}

protected final void initRPEYR3(String s) {
if (!s.trim().isEmpty()) {
RPEYR3 = Short.parseShort(s);
} else {
RPEYR3 = Short.MIN_VALUE;
}
}

protected final void initRPEYR4(String s) {
if (!s.trim().isEmpty()) {
RPEYR4 = Short.parseShort(s);
} else {
RPEYR4 = Short.MIN_VALUE;
}
}

protected final void initRPEYR5(String s) {
if (!s.trim().isEmpty()) {
RPEYR5 = Short.parseShort(s);
} else {
RPEYR5 = Short.MIN_VALUE;
}
}

protected final void initRPEYR6(String s) {
if (!s.trim().isEmpty()) {
RPEYR6 = Short.parseShort(s);
} else {
RPEYR6 = Short.MIN_VALUE;
}
}

protected final void initRPEYR7(String s) {
if (!s.trim().isEmpty()) {
RPEYR7 = Short.parseShort(s);
} else {
RPEYR7 = Short.MIN_VALUE;
}
}

protected final void initRPFIN(String s) {
if (!s.trim().isEmpty()) {
RPFIN = Byte.parseByte(s);
} else {
RPFIN = Byte.MIN_VALUE;
}
}

protected final void initRPFIN1C(String s) {
if (!s.trim().isEmpty()) {
RPFIN1C = Byte.parseByte(s);
} else {
RPFIN1C = Byte.MIN_VALUE;
}
}

protected final void initRPFIN2(String s) {
if (!s.trim().isEmpty()) {
RPFIN2 = Byte.parseByte(s);
} else {
RPFIN2 = Byte.MIN_VALUE;
}
}

protected final void initRPFIN2C(String s) {
if (!s.trim().isEmpty()) {
RPFIN2C = Byte.parseByte(s);
} else {
RPFIN2C = Byte.MIN_VALUE;
}
}

protected final void initRPFIN3(String s) {
if (!s.trim().isEmpty()) {
RPFIN3 = Byte.parseByte(s);
} else {
RPFIN3 = Byte.MIN_VALUE;
}
}

protected final void initRPFIN3C(String s) {
if (!s.trim().isEmpty()) {
RPFIN3C = Byte.parseByte(s);
} else {
RPFIN3C = Byte.MIN_VALUE;
}
}

protected final void initRPFIN4(String s) {
if (!s.trim().isEmpty()) {
RPFIN4 = Byte.parseByte(s);
} else {
RPFIN4 = Byte.MIN_VALUE;
}
}

protected final void initRPFIN5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPFIN5 = false;
} else {
RPFIN5 = true;
}
}
}

protected final void initRPFIN6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPFIN6 = false;
} else {
RPFIN6 = true;
}
}
}

protected final void initRPFIN7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPFIN7 = false;
} else {
RPFIN7 = true;
}
}
}

protected final void initRPINB(String s) {
if (!s.trim().isEmpty()) {
RPINB = Byte.parseByte(s);
} else {
RPINB = Byte.MIN_VALUE;
}
}

protected final void initRPLIV(String s) {
if (!s.trim().isEmpty()) {
RPLIV = Short.parseShort(s);
} else {
RPLIV = Short.MIN_VALUE;
}
}

protected final void initRPLIV2(String s) {
if (!s.trim().isEmpty()) {
RPLIV2 = Short.parseShort(s);
} else {
RPLIV2 = Short.MIN_VALUE;
}
}

protected final void initRPLIV3(String s) {
if (!s.trim().isEmpty()) {
RPLIV3 = Short.parseShort(s);
} else {
RPLIV3 = Short.MIN_VALUE;
}
}

protected final void initRPLIV4(String s) {
if (!s.trim().isEmpty()) {
RPLIV4 = Short.parseShort(s);
} else {
RPLIV4 = Short.MIN_VALUE;
}
}

protected final void initRPLIV5(String s) {
if (!s.trim().isEmpty()) {
RPLIV5 = Short.parseShort(s);
} else {
RPLIV5 = Short.MIN_VALUE;
}
}

protected final void initRPLIV6(String s) {
if (!s.trim().isEmpty()) {
RPLIV6 = Short.parseShort(s);
} else {
RPLIV6 = Short.MIN_VALUE;
}
}

protected final void initRPLIV7(String s) {
if (!s.trim().isEmpty()) {
RPLIV7 = Short.parseShort(s);
} else {
RPLIV7 = Short.MIN_VALUE;
}
}

protected final void initRPLTR(String s) {
if (!s.trim().isEmpty()) {
RPLTR = Byte.parseByte(s);
} else {
RPLTR = Byte.MIN_VALUE;
}
}

protected final void initRPLTR2(String s) {
if (!s.trim().isEmpty()) {
RPLTR2 = Byte.parseByte(s);
} else {
RPLTR2 = Byte.MIN_VALUE;
}
}

protected final void initRPLTR3(String s) {
if (!s.trim().isEmpty()) {
RPLTR3 = Byte.parseByte(s);
} else {
RPLTR3 = Byte.MIN_VALUE;
}
}

protected final void initRPLTR4(String s) {
if (!s.trim().isEmpty()) {
RPLTR4 = Byte.parseByte(s);
} else {
RPLTR4 = Byte.MIN_VALUE;
}
}

protected final void initRPLTR5(String s) {
if (!s.trim().isEmpty()) {
RPLTR5 = Byte.parseByte(s);
} else {
RPLTR5 = Byte.MIN_VALUE;
}
}

protected final void initRPLTR6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPLTR6 = false;
} else {
RPLTR6 = true;
}
}
}

protected final void initRPLTR7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPLTR7 = false;
} else {
RPLTR7 = true;
}
}
}

protected final void initRPMAR(String s) {
if (!s.trim().isEmpty()) {
RPMAR = Byte.parseByte(s);
} else {
RPMAR = Byte.MIN_VALUE;
}
}

protected final void initRPMAR2(String s) {
if (!s.trim().isEmpty()) {
RPMAR2 = Byte.parseByte(s);
} else {
RPMAR2 = Byte.MIN_VALUE;
}
}

protected final void initRPMAR3(String s) {
if (!s.trim().isEmpty()) {
RPMAR3 = Byte.parseByte(s);
} else {
RPMAR3 = Byte.MIN_VALUE;
}
}

protected final void initRPMAR4(String s) {
if (!s.trim().isEmpty()) {
RPMAR4 = Byte.parseByte(s);
} else {
RPMAR4 = Byte.MIN_VALUE;
}
}

protected final void initRPMAR5(String s) {
if (!s.trim().isEmpty()) {
RPMAR5 = Byte.parseByte(s);
} else {
RPMAR5 = Byte.MIN_VALUE;
}
}

protected final void initRPMAR6(String s) {
if (!s.trim().isEmpty()) {
RPMAR6 = Byte.parseByte(s);
} else {
RPMAR6 = Byte.MIN_VALUE;
}
}

protected final void initRPMAR7(String s) {
if (!s.trim().isEmpty()) {
RPMAR7 = Byte.parseByte(s);
} else {
RPMAR7 = Byte.MIN_VALUE;
}
}

protected final void initRPMARST(String s) {
if (!s.trim().isEmpty()) {
RPMARST = Byte.parseByte(s);
} else {
RPMARST = Byte.MIN_VALUE;
}
}

protected final void initRPMARST2(String s) {
if (!s.trim().isEmpty()) {
RPMARST2 = Byte.parseByte(s);
} else {
RPMARST2 = Byte.MIN_VALUE;
}
}

protected final void initRPMARST3(String s) {
if (!s.trim().isEmpty()) {
RPMARST3 = Byte.parseByte(s);
} else {
RPMARST3 = Byte.MIN_VALUE;
}
}

protected final void initRPMARST4(String s) {
if (!s.trim().isEmpty()) {
RPMARST4 = Byte.parseByte(s);
} else {
RPMARST4 = Byte.MIN_VALUE;
}
}

protected final void initRPMARST5(String s) {
if (!s.trim().isEmpty()) {
RPMARST5 = Byte.parseByte(s);
} else {
RPMARST5 = Byte.MIN_VALUE;
}
}

protected final void initRPMARST6(String s) {
if (!s.trim().isEmpty()) {
RPMARST6 = Byte.parseByte(s);
} else {
RPMARST6 = Byte.MIN_VALUE;
}
}

protected final void initRPMARST7(String s) {
if (!s.trim().isEmpty()) {
RPMARST7 = Byte.parseByte(s);
} else {
RPMARST7 = Byte.MIN_VALUE;
}
}

protected final void initRPMOR(String s) {
if (!s.trim().isEmpty()) {
RPMOR = Byte.parseByte(s);
} else {
RPMOR = Byte.MIN_VALUE;
}
}

protected final void initRPMOR2(String s) {
if (!s.trim().isEmpty()) {
RPMOR2 = Byte.parseByte(s);
} else {
RPMOR2 = Byte.MIN_VALUE;
}
}

protected final void initRPMOR3(String s) {
if (!s.trim().isEmpty()) {
RPMOR3 = Byte.parseByte(s);
} else {
RPMOR3 = Byte.MIN_VALUE;
}
}

protected final void initRPMOR4(String s) {
if (!s.trim().isEmpty()) {
RPMOR4 = Byte.parseByte(s);
} else {
RPMOR4 = Byte.MIN_VALUE;
}
}

protected final void initRPMOR5(String s) {
if (!s.trim().isEmpty()) {
RPMOR5 = Byte.parseByte(s);
} else {
RPMOR5 = Byte.MIN_VALUE;
}
}

protected final void initRPMOR6(String s) {
if (!s.trim().isEmpty()) {
RPMOR6 = Byte.parseByte(s);
} else {
RPMOR6 = Byte.MIN_VALUE;
}
}

protected final void initRPMOR7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPMOR7 = false;
} else {
RPMOR7 = true;
}
}
}

protected final void initRPMYR(String s) {
if (!s.trim().isEmpty()) {
RPMYR = Short.parseShort(s);
} else {
RPMYR = Short.MIN_VALUE;
}
}

protected final void initRPMYR2(String s) {
if (!s.trim().isEmpty()) {
RPMYR2 = Short.parseShort(s);
} else {
RPMYR2 = Short.MIN_VALUE;
}
}

protected final void initRPMYR3(String s) {
if (!s.trim().isEmpty()) {
RPMYR3 = Short.parseShort(s);
} else {
RPMYR3 = Short.MIN_VALUE;
}
}

protected final void initRPMYR4(String s) {
if (!s.trim().isEmpty()) {
RPMYR4 = Short.parseShort(s);
} else {
RPMYR4 = Short.MIN_VALUE;
}
}

protected final void initRPMYR5(String s) {
if (!s.trim().isEmpty()) {
RPMYR5 = Short.parseShort(s);
} else {
RPMYR5 = Short.MIN_VALUE;
}
}

protected final void initRPMYR6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPMYR6 = false;
} else {
RPMYR6 = true;
}
}
}

protected final void initRPMYR7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPMYR7 = false;
} else {
RPMYR7 = true;
}
}
}

protected final void initRPNCA(String s) {
if (!s.trim().isEmpty()) {
RPNCA = Byte.parseByte(s);
} else {
RPNCA = Byte.MIN_VALUE;
}
}

protected final void initRPNCB(String s) {
if (!s.trim().isEmpty()) {
RPNCB = Short.parseShort(s);
} else {
RPNCB = Short.MIN_VALUE;
}
}

protected final void initRPNCB2(String s) {
if (!s.trim().isEmpty()) {
RPNCB2 = Short.parseShort(s);
} else {
RPNCB2 = Short.MIN_VALUE;
}
}

protected final void initRPNCB3(String s) {
if (!s.trim().isEmpty()) {
RPNCB3 = Short.parseShort(s);
} else {
RPNCB3 = Short.MIN_VALUE;
}
}

protected final void initRPNCB4(String s) {
if (!s.trim().isEmpty()) {
RPNCB4 = Short.parseShort(s);
} else {
RPNCB4 = Short.MIN_VALUE;
}
}

protected final void initRPNCB5(String s) {
if (!s.trim().isEmpty()) {
RPNCB5 = Short.parseShort(s);
} else {
RPNCB5 = Short.MIN_VALUE;
}
}

protected final void initRPNCB6(String s) {
if (!s.trim().isEmpty()) {
RPNCB6 = Short.parseShort(s);
} else {
RPNCB6 = Short.MIN_VALUE;
}
}

protected final void initRPNCB7(String s) {
if (!s.trim().isEmpty()) {
RPNCB7 = Short.parseShort(s);
} else {
RPNCB7 = Short.MIN_VALUE;
}
}

protected final void initRPNCB8(String s) {
if (!s.trim().isEmpty()) {
RPNCB8 = Short.parseShort(s);
} else {
RPNCB8 = Short.MIN_VALUE;
}
}

protected final void initRPNCB9(String s) {
if (!s.trim().isEmpty()) {
RPNCB9 = Short.parseShort(s);
} else {
RPNCB9 = Short.MIN_VALUE;
}
}

protected final void initRPNCE(String s) {
if (!s.trim().isEmpty()) {
RPNCE = Byte.parseByte(s);
} else {
RPNCE = Byte.MIN_VALUE;
}
}

protected final void initRPNCE2(String s) {
if (!s.trim().isEmpty()) {
RPNCE2 = Byte.parseByte(s);
} else {
RPNCE2 = Byte.MIN_VALUE;
}
}

protected final void initRPNCE3(String s) {
if (!s.trim().isEmpty()) {
RPNCE3 = Byte.parseByte(s);
} else {
RPNCE3 = Byte.MIN_VALUE;
}
}

protected final void initRPNCE4(String s) {
if (!s.trim().isEmpty()) {
RPNCE4 = Byte.parseByte(s);
} else {
RPNCE4 = Byte.MIN_VALUE;
}
}

protected final void initRPNCE5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPNCE5 = false;
} else {
RPNCE5 = true;
}
}
}

protected final void initRPNCE6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPNCE6 = false;
} else {
RPNCE6 = true;
}
}
}

protected final void initRPNCE7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPNCE7 = false;
} else {
RPNCE7 = true;
}
}
}

protected final void initRPNCE8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPNCE8 = false;
} else {
RPNCE8 = true;
}
}
}

protected final void initRPNCE9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPNCE9 = false;
} else {
RPNCE9 = true;
}
}
}

protected final void initRPNCF(String s) {
if (!s.trim().isEmpty()) {
RPNCF = Short.parseShort(s);
} else {
RPNCF = Short.MIN_VALUE;
}
}

protected final void initRPNCF2(String s) {
if (!s.trim().isEmpty()) {
RPNCF2 = Short.parseShort(s);
} else {
RPNCF2 = Short.MIN_VALUE;
}
}

protected final void initRPNCF3(String s) {
if (!s.trim().isEmpty()) {
RPNCF3 = Short.parseShort(s);
} else {
RPNCF3 = Short.MIN_VALUE;
}
}

protected final void initRPNCF4(String s) {
if (!s.trim().isEmpty()) {
RPNCF4 = Short.parseShort(s);
} else {
RPNCF4 = Short.MIN_VALUE;
}
}

protected final void initRPNCF5(String s) {
if (!s.trim().isEmpty()) {
RPNCF5 = Short.parseShort(s);
} else {
RPNCF5 = Short.MIN_VALUE;
}
}

protected final void initRPNCF6(String s) {
if (!s.trim().isEmpty()) {
RPNCF6 = Short.parseShort(s);
} else {
RPNCF6 = Short.MIN_VALUE;
}
}

protected final void initRPNCF7(String s) {
if (!s.trim().isEmpty()) {
RPNCF7 = Short.parseShort(s);
} else {
RPNCF7 = Short.MIN_VALUE;
}
}

protected final void initRPNCF8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPNCF8 = false;
} else {
RPNCF8 = true;
}
}
}

protected final void initRPNCF9(String s) {
if (!s.trim().isEmpty()) {
RPNCF9 = Short.parseShort(s);
} else {
RPNCF9 = Short.MIN_VALUE;
}
}

protected final void initRPNCH(String s) {
if (!s.trim().isEmpty()) {
RPNCH = Byte.parseByte(s);
} else {
RPNCH = Byte.MIN_VALUE;
}
}

protected final void initRPNCH2(String s) {
if (!s.trim().isEmpty()) {
RPNCH2 = Byte.parseByte(s);
} else {
RPNCH2 = Byte.MIN_VALUE;
}
}

protected final void initRPNCH3(String s) {
if (!s.trim().isEmpty()) {
RPNCH3 = Byte.parseByte(s);
} else {
RPNCH3 = Byte.MIN_VALUE;
}
}

protected final void initRPNCH4(String s) {
if (!s.trim().isEmpty()) {
RPNCH4 = Byte.parseByte(s);
} else {
RPNCH4 = Byte.MIN_VALUE;
}
}

protected final void initRPNCH5(String s) {
if (!s.trim().isEmpty()) {
RPNCH5 = Byte.parseByte(s);
} else {
RPNCH5 = Byte.MIN_VALUE;
}
}

protected final void initRPNCH6(String s) {
if (!s.trim().isEmpty()) {
RPNCH6 = Byte.parseByte(s);
} else {
RPNCH6 = Byte.MIN_VALUE;
}
}

protected final void initRPNCH7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPNCH7 = false;
} else {
RPNCH7 = true;
}
}
}

protected final void initRPNCH8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPNCH8 = false;
} else {
RPNCH8 = true;
}
}
}

protected final void initRPNCH9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPNCH9 = false;
} else {
RPNCH9 = true;
}
}
}

protected final void initRPREL(String s) {
if (!s.trim().isEmpty()) {
RPREL = Byte.parseByte(s);
} else {
RPREL = Byte.MIN_VALUE;
}
}

protected final void initRPREL2(String s) {
if (!s.trim().isEmpty()) {
RPREL2 = Byte.parseByte(s);
} else {
RPREL2 = Byte.MIN_VALUE;
}
}

protected final void initRPREL3(String s) {
if (!s.trim().isEmpty()) {
RPREL3 = Byte.parseByte(s);
} else {
RPREL3 = Byte.MIN_VALUE;
}
}

protected final void initRPREL4(String s) {
if (!s.trim().isEmpty()) {
RPREL4 = Byte.parseByte(s);
} else {
RPREL4 = Byte.MIN_VALUE;
}
}

protected final void initRPREL5(String s) {
if (!s.trim().isEmpty()) {
RPREL5 = Byte.parseByte(s);
} else {
RPREL5 = Byte.MIN_VALUE;
}
}

protected final void initRPREL6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPREL6 = false;
} else {
RPREL6 = true;
}
}
}

protected final void initRPREL7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RPREL7 = false;
} else {
RPREL7 = true;
}
}
}

protected final void initRPSTL(String s) {
if (!s.trim().isEmpty()) {
RPSTL = Byte.parseByte(s);
} else {
RPSTL = Byte.MIN_VALUE;
}
}

protected final void initRPSTL2(String s) {
if (!s.trim().isEmpty()) {
RPSTL2 = Byte.parseByte(s);
} else {
RPSTL2 = Byte.MIN_VALUE;
}
}

protected final void initRPSTL3(String s) {
if (!s.trim().isEmpty()) {
RPSTL3 = Byte.parseByte(s);
} else {
RPSTL3 = Byte.MIN_VALUE;
}
}

protected final void initRPSTL4(String s) {
if (!s.trim().isEmpty()) {
RPSTL4 = Byte.parseByte(s);
} else {
RPSTL4 = Byte.MIN_VALUE;
}
}

protected final void initRPSTL5(String s) {
if (!s.trim().isEmpty()) {
RPSTL5 = Byte.parseByte(s);
} else {
RPSTL5 = Byte.MIN_VALUE;
}
}

protected final void initRPSTL6(String s) {
if (!s.trim().isEmpty()) {
RPSTL6 = Byte.parseByte(s);
} else {
RPSTL6 = Byte.MIN_VALUE;
}
}

protected final void initRPSTL7(String s) {
if (!s.trim().isEmpty()) {
RPSTL7 = Byte.parseByte(s);
} else {
RPSTL7 = Byte.MIN_VALUE;
}
}

protected final void initRPYRMA(String s) {
if (!s.trim().isEmpty()) {
RPYRMA = Short.parseShort(s);
} else {
RPYRMA = Short.MIN_VALUE;
}
}

protected final void initRPYRMA2(String s) {
if (!s.trim().isEmpty()) {
RPYRMA2 = Short.parseShort(s);
} else {
RPYRMA2 = Short.MIN_VALUE;
}
}

protected final void initRPYRMA3(String s) {
if (!s.trim().isEmpty()) {
RPYRMA3 = Short.parseShort(s);
} else {
RPYRMA3 = Short.MIN_VALUE;
}
}

protected final void initRPYRMA4(String s) {
if (!s.trim().isEmpty()) {
RPYRMA4 = Short.parseShort(s);
} else {
RPYRMA4 = Short.MIN_VALUE;
}
}

protected final void initRPYRMA5(String s) {
if (!s.trim().isEmpty()) {
RPYRMA5 = Short.parseShort(s);
} else {
RPYRMA5 = Short.MIN_VALUE;
}
}

protected final void initRPYRMA6(String s) {
if (!s.trim().isEmpty()) {
RPYRMA6 = Short.parseShort(s);
} else {
RPYRMA6 = Short.MIN_VALUE;
}
}

protected final void initRPYRMA7(String s) {
if (!s.trim().isEmpty()) {
RPYRMA7 = Short.parseShort(s);
} else {
RPYRMA7 = Short.MIN_VALUE;
}
}

protected final void initRSABUSE(String s) {
if (!s.trim().isEmpty()) {
RSABUSE = Byte.parseByte(s);
} else {
RSABUSE = Byte.MIN_VALUE;
}
}

protected final void initRSABUSEY(String s) {
if (!s.trim().isEmpty()) {
RSABUSEY = Byte.parseByte(s);
} else {
RSABUSEY = Byte.MIN_VALUE;
}
}

protected final void initRSADDIC(String s) {
if (!s.trim().isEmpty()) {
RSADDIC = Byte.parseByte(s);
} else {
RSADDIC = Byte.MIN_VALUE;
}
}

protected final void initRSADDICY(String s) {
if (!s.trim().isEmpty()) {
RSADDICY = Byte.parseByte(s);
} else {
RSADDICY = Byte.MIN_VALUE;
}
}

protected final void initRSARGUE(String s) {
if (!s.trim().isEmpty()) {
RSARGUE = Byte.parseByte(s);
} else {
RSARGUE = Byte.MIN_VALUE;
}
}

protected final void initRSARGUEY(String s) {
if (!s.trim().isEmpty()) {
RSARGUEY = Byte.parseByte(s);
} else {
RSARGUEY = Byte.MIN_VALUE;
}
}

protected final void initRSATTAC(String s) {
if (!s.trim().isEmpty()) {
RSATTAC = Byte.parseByte(s);
} else {
RSATTAC = Byte.MIN_VALUE;
}
}

protected final void initRSATTACY(String s) {
if (!s.trim().isEmpty()) {
RSATTACY = Byte.parseByte(s);
} else {
RSATTACY = Byte.MIN_VALUE;
}
}

protected final void initRSCARE(String s) {
if (!s.trim().isEmpty()) {
RSCARE = Byte.parseByte(s);
} else {
RSCARE = Byte.MIN_VALUE;
}
}

protected final void initRSCAREY(String s) {
if (!s.trim().isEmpty()) {
RSCAREY = Byte.parseByte(s);
} else {
RSCAREY = Byte.MIN_VALUE;
}
}

protected final void initRSDISAS(String s) {
if (!s.trim().isEmpty()) {
RSDISAS = Byte.parseByte(s);
} else {
RSDISAS = Byte.MIN_VALUE;
}
}

protected final void initRSDISASY(String s) {
if (!s.trim().isEmpty()) {
RSDISASY = Byte.parseByte(s);
} else {
RSDISASY = Byte.MIN_VALUE;
}
}

protected final void initRSDRINK(String s) {
if (!s.trim().isEmpty()) {
RSDRINK = Byte.parseByte(s);
} else {
RSDRINK = Byte.MIN_VALUE;
}
}

protected final void initRSDRINKY(String s) {
if (!s.trim().isEmpty()) {
RSDRINKY = Byte.parseByte(s);
} else {
RSDRINKY = Byte.MIN_VALUE;
}
}

protected final void initRSFCOLD(String s) {
if (!s.trim().isEmpty()) {
RSFCOLD = Byte.parseByte(s);
} else {
RSFCOLD = Byte.MIN_VALUE;
}
}

protected final void initRSFDECID(String s) {
if (!s.trim().isEmpty()) {
RSFDECID = Byte.parseByte(s);
} else {
RSFDECID = Byte.MIN_VALUE;
}
}

protected final void initRSFDEPEN(String s) {
if (!s.trim().isEmpty()) {
RSFDEPEN = Byte.parseByte(s);
} else {
RSFDEPEN = Byte.MIN_VALUE;
}
}

protected final void initRSFINAN(String s) {
if (!s.trim().isEmpty()) {
RSFINAN = Byte.parseByte(s);
} else {
RSFINAN = Byte.MIN_VALUE;
}
}

protected final void initRSFINANY(String s) {
if (!s.trim().isEmpty()) {
RSFINANY = Byte.parseByte(s);
} else {
RSFINANY = Byte.MIN_VALUE;
}
}

protected final void initRSFIRED(String s) {
if (!s.trim().isEmpty()) {
RSFIRED = Byte.parseByte(s);
} else {
RSFIRED = Byte.MIN_VALUE;
}
}

protected final void initRSFIREDY(String s) {
if (!s.trim().isEmpty()) {
RSFIREDY = Byte.parseByte(s);
} else {
RSFIREDY = Byte.MIN_VALUE;
}
}

protected final void initRSFLET(String s) {
if (!s.trim().isEmpty()) {
RSFLET = Byte.parseByte(s);
} else {
RSFLET = Byte.MIN_VALUE;
}
}

protected final void initRSFNATUR(String s) {
if (!s.trim().isEmpty()) {
RSFNATUR = Byte.parseByte(s);
} else {
RSFNATUR = Byte.MIN_VALUE;
}
}

protected final void initRSFNOTWA(String s) {
if (!s.trim().isEmpty()) {
RSFNOTWA = Byte.parseByte(s);
} else {
RSFNOTWA = Byte.MIN_VALUE;
}
}

protected final void initRSFOVERP(String s) {
if (!s.trim().isEmpty()) {
RSFOVERP = Byte.parseByte(s);
} else {
RSFOVERP = Byte.MIN_VALUE;
}
}

protected final void initRSFUNDER(String s) {
if (!s.trim().isEmpty()) {
RSFUNDER = Byte.parseByte(s);
} else {
RSFUNDER = Byte.MIN_VALUE;
}
}

protected final void initRSILL(String s) {
if (!s.trim().isEmpty()) {
RSILL = Byte.parseByte(s);
} else {
RSILL = Byte.MIN_VALUE;
}
}

protected final void initRSILLY(String s) {
if (!s.trim().isEmpty()) {
RSILLY = Byte.parseByte(s);
} else {
RSILLY = Byte.MIN_VALUE;
}
}

protected final void initRSLOSWR(String s) {
if (!s.trim().isEmpty()) {
RSLOSWR = Byte.parseByte(s);
} else {
RSLOSWR = Byte.MIN_VALUE;
}
}

protected final void initRSLOSWRY(String s) {
if (!s.trim().isEmpty()) {
RSLOSWRY = Byte.parseByte(s);
} else {
RSLOSWRY = Byte.MIN_VALUE;
}
}

protected final void initRSMCOLD(String s) {
if (!s.trim().isEmpty()) {
RSMCOLD = Byte.parseByte(s);
} else {
RSMCOLD = Byte.MIN_VALUE;
}
}

protected final void initRSMDEPEN(String s) {
if (!s.trim().isEmpty()) {
RSMDEPEN = Byte.parseByte(s);
} else {
RSMDEPEN = Byte.MIN_VALUE;
}
}

protected final void initRSMDICDE(String s) {
if (!s.trim().isEmpty()) {
RSMDICDE = Byte.parseByte(s);
} else {
RSMDICDE = Byte.MIN_VALUE;
}
}

protected final void initRSMLET(String s) {
if (!s.trim().isEmpty()) {
RSMLET = Byte.parseByte(s);
} else {
RSMLET = Byte.MIN_VALUE;
}
}

protected final void initRSMNATUR(String s) {
if (!s.trim().isEmpty()) {
RSMNATUR = Byte.parseByte(s);
} else {
RSMNATUR = Byte.MIN_VALUE;
}
}

protected final void initRSMNOTWA(String s) {
if (!s.trim().isEmpty()) {
RSMNOTWA = Byte.parseByte(s);
} else {
RSMNOTWA = Byte.MIN_VALUE;
}
}

protected final void initRSMOVERP(String s) {
if (!s.trim().isEmpty()) {
RSMOVERP = Byte.parseByte(s);
} else {
RSMOVERP = Byte.MIN_VALUE;
}
}

protected final void initRSMUNDER(String s) {
if (!s.trim().isEmpty()) {
RSMUNDER = Byte.parseByte(s);
} else {
RSMUNDER = Byte.MIN_VALUE;
}
}

protected final void initRSRISKF(String s) {
if (!s.trim().isEmpty()) {
RSRISKF = Byte.parseByte(s);
} else {
RSRISKF = Byte.MIN_VALUE;
}
}

protected final void initRSRISKFY(String s) {
if (!s.trim().isEmpty()) {
RSRISKFY = Byte.parseByte(s);
} else {
RSRISKFY = Byte.MIN_VALUE;
}
}

protected final void initRSSEXAS(String s) {
if (!s.trim().isEmpty()) {
RSSEXAS = Byte.parseByte(s);
} else {
RSSEXAS = Byte.MIN_VALUE;
}
}

protected final void initRSSEXASY(String s) {
if (!s.trim().isEmpty()) {
RSSEXASY = Byte.parseByte(s);
} else {
RSSEXASY = Byte.MIN_VALUE;
}
}

protected final void initRSUNEMP(String s) {
if (!s.trim().isEmpty()) {
RSUNEMP = Byte.parseByte(s);
} else {
RSUNEMP = Byte.MIN_VALUE;
}
}

protected final void initRSUNEMPY(String s) {
if (!s.trim().isEmpty()) {
RSUNEMPY = Byte.parseByte(s);
} else {
RSUNEMPY = Byte.MIN_VALUE;
}
}

protected final void initRSWITKL(String s) {
if (!s.trim().isEmpty()) {
RSWITKL = Byte.parseByte(s);
} else {
RSWITKL = Byte.MIN_VALUE;
}
}

protected final void initRSWITKLY(String s) {
if (!s.trim().isEmpty()) {
RSWITKLY = Byte.parseByte(s);
} else {
RSWITKLY = Byte.MIN_VALUE;
}
}

protected final void initRSWITRY(String s) {
if (!s.trim().isEmpty()) {
RSWITRY = Byte.parseByte(s);
} else {
RSWITRY = Byte.MIN_VALUE;
}
}

protected final void initRSWITWR(String s) {
if (!s.trim().isEmpty()) {
RSWITWR = Byte.parseByte(s);
} else {
RSWITWR = Byte.MIN_VALUE;
}
}

protected final void initRWAGELE(String s) {
if (!s.trim().isEmpty()) {
RWAGELE = Byte.parseByte(s);
} else {
RWAGELE = Byte.MIN_VALUE;
}
}

protected final void initRWANO(String s) {
if (!s.trim().isEmpty()) {
RWANO = Byte.parseByte(s);
} else {
RWANO = Byte.MIN_VALUE;
}
}

protected final void initRWANO10(String s) {
if (!s.trim().isEmpty()) {
RWANO10 = Byte.parseByte(s);
} else {
RWANO10 = Byte.MIN_VALUE;
}
}

protected final void initRWANO11(String s) {
if (!s.trim().isEmpty()) {
RWANO11 = Byte.parseByte(s);
} else {
RWANO11 = Byte.MIN_VALUE;
}
}

protected final void initRWANO12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWANO12 = false;
} else {
RWANO12 = true;
}
}
}

protected final void initRWANO13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWANO13 = false;
} else {
RWANO13 = true;
}
}
}

protected final void initRWANO14(String s) {
if (!s.trim().isEmpty()) {
RWANO14 = Byte.parseByte(s);
} else {
RWANO14 = Byte.MIN_VALUE;
}
}

protected final void initRWANO15(String s) {
if (!s.trim().isEmpty()) {
RWANO15 = Byte.parseByte(s);
} else {
RWANO15 = Byte.MIN_VALUE;
}
}

protected final void initRWANO16(String s) {
if (!s.trim().isEmpty()) {
RWANO16 = Byte.parseByte(s);
} else {
RWANO16 = Byte.MIN_VALUE;
}
}

protected final void initRWANO17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWANO17 = false;
} else {
RWANO17 = true;
}
}
}

protected final void initRWANO18(String s) {
if (!s.trim().isEmpty()) {
RWANO18 = Byte.parseByte(s);
} else {
RWANO18 = Byte.MIN_VALUE;
}
}

protected final void initRWANO19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWANO19 = false;
} else {
RWANO19 = true;
}
}
}

protected final void initRWANO2(String s) {
if (!s.trim().isEmpty()) {
RWANO2 = Byte.parseByte(s);
} else {
RWANO2 = Byte.MIN_VALUE;
}
}

protected final void initRWANO20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWANO20 = false;
} else {
RWANO20 = true;
}
}
}

protected final void initRWANO3(String s) {
if (!s.trim().isEmpty()) {
RWANO3 = Byte.parseByte(s);
} else {
RWANO3 = Byte.MIN_VALUE;
}
}

protected final void initRWANO4(String s) {
if (!s.trim().isEmpty()) {
RWANO4 = Byte.parseByte(s);
} else {
RWANO4 = Byte.MIN_VALUE;
}
}

protected final void initRWANO5(String s) {
if (!s.trim().isEmpty()) {
RWANO5 = Byte.parseByte(s);
} else {
RWANO5 = Byte.MIN_VALUE;
}
}

protected final void initRWANO6(String s) {
if (!s.trim().isEmpty()) {
RWANO6 = Byte.parseByte(s);
} else {
RWANO6 = Byte.MIN_VALUE;
}
}

protected final void initRWANO7(String s) {
if (!s.trim().isEmpty()) {
RWANO7 = Byte.parseByte(s);
} else {
RWANO7 = Byte.MIN_VALUE;
}
}

protected final void initRWANO8(String s) {
if (!s.trim().isEmpty()) {
RWANO8 = Byte.parseByte(s);
} else {
RWANO8 = Byte.MIN_VALUE;
}
}

protected final void initRWANO9(String s) {
if (!s.trim().isEmpty()) {
RWANO9 = Byte.parseByte(s);
} else {
RWANO9 = Byte.MIN_VALUE;
}
}

protected final void initRWBUS(String s) {
if (!s.trim().isEmpty()) {
RWBUS = Byte.parseByte(s);
} else {
RWBUS = Byte.MIN_VALUE;
}
}

protected final void initRWBUX1(String s) {
if (!s.trim().isEmpty()) {
RWBUX1 = Byte.parseByte(s);
} else {
RWBUX1 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX10(String s) {
if (!s.trim().isEmpty()) {
RWBUX10 = Byte.parseByte(s);
} else {
RWBUX10 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX11(String s) {
if (!s.trim().isEmpty()) {
RWBUX11 = Byte.parseByte(s);
} else {
RWBUX11 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX12(String s) {
if (!s.trim().isEmpty()) {
RWBUX12 = Byte.parseByte(s);
} else {
RWBUX12 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX13(String s) {
if (!s.trim().isEmpty()) {
RWBUX13 = Byte.parseByte(s);
} else {
RWBUX13 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX14(String s) {
if (!s.trim().isEmpty()) {
RWBUX14 = Byte.parseByte(s);
} else {
RWBUX14 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX15(String s) {
if (!s.trim().isEmpty()) {
RWBUX15 = Byte.parseByte(s);
} else {
RWBUX15 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX16(String s) {
if (!s.trim().isEmpty()) {
RWBUX16 = Byte.parseByte(s);
} else {
RWBUX16 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX17(String s) {
if (!s.trim().isEmpty()) {
RWBUX17 = Byte.parseByte(s);
} else {
RWBUX17 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX18(String s) {
if (!s.trim().isEmpty()) {
RWBUX18 = Byte.parseByte(s);
} else {
RWBUX18 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX19(String s) {
if (!s.trim().isEmpty()) {
RWBUX19 = Byte.parseByte(s);
} else {
RWBUX19 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX2(String s) {
if (!s.trim().isEmpty()) {
RWBUX2 = Byte.parseByte(s);
} else {
RWBUX2 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX20(String s) {
if (!s.trim().isEmpty()) {
RWBUX20 = Byte.parseByte(s);
} else {
RWBUX20 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX3(String s) {
if (!s.trim().isEmpty()) {
RWBUX3 = Byte.parseByte(s);
} else {
RWBUX3 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX4(String s) {
if (!s.trim().isEmpty()) {
RWBUX4 = Byte.parseByte(s);
} else {
RWBUX4 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX5(String s) {
if (!s.trim().isEmpty()) {
RWBUX5 = Byte.parseByte(s);
} else {
RWBUX5 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX6(String s) {
if (!s.trim().isEmpty()) {
RWBUX6 = Byte.parseByte(s);
} else {
RWBUX6 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX7(String s) {
if (!s.trim().isEmpty()) {
RWBUX7 = Byte.parseByte(s);
} else {
RWBUX7 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX8(String s) {
if (!s.trim().isEmpty()) {
RWBUX8 = Byte.parseByte(s);
} else {
RWBUX8 = Byte.MIN_VALUE;
}
}

protected final void initRWBUX9(String s) {
if (!s.trim().isEmpty()) {
RWBUX9 = Byte.parseByte(s);
} else {
RWBUX9 = Byte.MIN_VALUE;
}
}

protected final void initRWEDY(String s) {
if (!s.trim().isEmpty()) {
RWEDY = Short.parseShort(s);
} else {
RWEDY = Short.MIN_VALUE;
}
}

protected final void initRWEDY10(String s) {
if (!s.trim().isEmpty()) {
RWEDY10 = Short.parseShort(s);
} else {
RWEDY10 = Short.MIN_VALUE;
}
}

protected final void initRWEDY11(String s) {
if (!s.trim().isEmpty()) {
RWEDY11 = Short.parseShort(s);
} else {
RWEDY11 = Short.MIN_VALUE;
}
}

protected final void initRWEDY12(String s) {
if (!s.trim().isEmpty()) {
RWEDY12 = Short.parseShort(s);
} else {
RWEDY12 = Short.MIN_VALUE;
}
}

protected final void initRWEDY13(String s) {
if (!s.trim().isEmpty()) {
RWEDY13 = Short.parseShort(s);
} else {
RWEDY13 = Short.MIN_VALUE;
}
}

protected final void initRWEDY14(String s) {
if (!s.trim().isEmpty()) {
RWEDY14 = Short.parseShort(s);
} else {
RWEDY14 = Short.MIN_VALUE;
}
}

protected final void initRWEDY15(String s) {
if (!s.trim().isEmpty()) {
RWEDY15 = Short.parseShort(s);
} else {
RWEDY15 = Short.MIN_VALUE;
}
}

protected final void initRWEDY16(String s) {
if (!s.trim().isEmpty()) {
RWEDY16 = Short.parseShort(s);
} else {
RWEDY16 = Short.MIN_VALUE;
}
}

protected final void initRWEDY17(String s) {
if (!s.trim().isEmpty()) {
RWEDY17 = Short.parseShort(s);
} else {
RWEDY17 = Short.MIN_VALUE;
}
}

protected final void initRWEDY18(String s) {
if (!s.trim().isEmpty()) {
RWEDY18 = Short.parseShort(s);
} else {
RWEDY18 = Short.MIN_VALUE;
}
}

protected final void initRWEDY19(String s) {
if (!s.trim().isEmpty()) {
RWEDY19 = Short.parseShort(s);
} else {
RWEDY19 = Short.MIN_VALUE;
}
}

protected final void initRWEDY2(String s) {
if (!s.trim().isEmpty()) {
RWEDY2 = Short.parseShort(s);
} else {
RWEDY2 = Short.MIN_VALUE;
}
}

protected final void initRWEDY20(String s) {
if (!s.trim().isEmpty()) {
RWEDY20 = Short.parseShort(s);
} else {
RWEDY20 = Short.MIN_VALUE;
}
}

protected final void initRWEDY3(String s) {
if (!s.trim().isEmpty()) {
RWEDY3 = Short.parseShort(s);
} else {
RWEDY3 = Short.MIN_VALUE;
}
}

protected final void initRWEDY4(String s) {
if (!s.trim().isEmpty()) {
RWEDY4 = Short.parseShort(s);
} else {
RWEDY4 = Short.MIN_VALUE;
}
}

protected final void initRWEDY5(String s) {
if (!s.trim().isEmpty()) {
RWEDY5 = Short.parseShort(s);
} else {
RWEDY5 = Short.MIN_VALUE;
}
}

protected final void initRWEDY6(String s) {
if (!s.trim().isEmpty()) {
RWEDY6 = Short.parseShort(s);
} else {
RWEDY6 = Short.MIN_VALUE;
}
}

protected final void initRWEDY7(String s) {
if (!s.trim().isEmpty()) {
RWEDY7 = Short.parseShort(s);
} else {
RWEDY7 = Short.MIN_VALUE;
}
}

protected final void initRWEDY8(String s) {
if (!s.trim().isEmpty()) {
RWEDY8 = Short.parseShort(s);
} else {
RWEDY8 = Short.MIN_VALUE;
}
}

protected final void initRWEDY9(String s) {
if (!s.trim().isEmpty()) {
RWEDY9 = Short.parseShort(s);
} else {
RWEDY9 = Short.MIN_VALUE;
}
}

protected final void initRWEVW(String s) {
if (!s.trim().isEmpty()) {
RWEVW = Byte.parseByte(s);
} else {
RWEVW = Byte.MIN_VALUE;
}
}

protected final void initRWFT(String s) {
if (!s.trim().isEmpty()) {
RWFT = Byte.parseByte(s);
} else {
RWFT = Byte.MIN_VALUE;
}
}

protected final void initRWFT10(String s) {
if (!s.trim().isEmpty()) {
RWFT10 = Byte.parseByte(s);
} else {
RWFT10 = Byte.MIN_VALUE;
}
}

protected final void initRWFT11(String s) {
if (!s.trim().isEmpty()) {
RWFT11 = Byte.parseByte(s);
} else {
RWFT11 = Byte.MIN_VALUE;
}
}

protected final void initRWFT12(String s) {
if (!s.trim().isEmpty()) {
RWFT12 = Byte.parseByte(s);
} else {
RWFT12 = Byte.MIN_VALUE;
}
}

protected final void initRWFT13(String s) {
if (!s.trim().isEmpty()) {
RWFT13 = Byte.parseByte(s);
} else {
RWFT13 = Byte.MIN_VALUE;
}
}

protected final void initRWFT14(String s) {
if (!s.trim().isEmpty()) {
RWFT14 = Byte.parseByte(s);
} else {
RWFT14 = Byte.MIN_VALUE;
}
}

protected final void initRWFT15(String s) {
if (!s.trim().isEmpty()) {
RWFT15 = Byte.parseByte(s);
} else {
RWFT15 = Byte.MIN_VALUE;
}
}

protected final void initRWFT16(String s) {
if (!s.trim().isEmpty()) {
RWFT16 = Byte.parseByte(s);
} else {
RWFT16 = Byte.MIN_VALUE;
}
}

protected final void initRWFT17(String s) {
if (!s.trim().isEmpty()) {
RWFT17 = Byte.parseByte(s);
} else {
RWFT17 = Byte.MIN_VALUE;
}
}

protected final void initRWFT18(String s) {
if (!s.trim().isEmpty()) {
RWFT18 = Byte.parseByte(s);
} else {
RWFT18 = Byte.MIN_VALUE;
}
}

protected final void initRWFT19(String s) {
if (!s.trim().isEmpty()) {
RWFT19 = Byte.parseByte(s);
} else {
RWFT19 = Byte.MIN_VALUE;
}
}

protected final void initRWFT2(String s) {
if (!s.trim().isEmpty()) {
RWFT2 = Byte.parseByte(s);
} else {
RWFT2 = Byte.MIN_VALUE;
}
}

protected final void initRWFT20(String s) {
if (!s.trim().isEmpty()) {
RWFT20 = Byte.parseByte(s);
} else {
RWFT20 = Byte.MIN_VALUE;
}
}

protected final void initRWFT3(String s) {
if (!s.trim().isEmpty()) {
RWFT3 = Byte.parseByte(s);
} else {
RWFT3 = Byte.MIN_VALUE;
}
}

protected final void initRWFT4(String s) {
if (!s.trim().isEmpty()) {
RWFT4 = Byte.parseByte(s);
} else {
RWFT4 = Byte.MIN_VALUE;
}
}

protected final void initRWFT5(String s) {
if (!s.trim().isEmpty()) {
RWFT5 = Byte.parseByte(s);
} else {
RWFT5 = Byte.MIN_VALUE;
}
}

protected final void initRWFT6(String s) {
if (!s.trim().isEmpty()) {
RWFT6 = Byte.parseByte(s);
} else {
RWFT6 = Byte.MIN_VALUE;
}
}

protected final void initRWFT7(String s) {
if (!s.trim().isEmpty()) {
RWFT7 = Byte.parseByte(s);
} else {
RWFT7 = Byte.MIN_VALUE;
}
}

protected final void initRWFT8(String s) {
if (!s.trim().isEmpty()) {
RWFT8 = Byte.parseByte(s);
} else {
RWFT8 = Byte.MIN_VALUE;
}
}

protected final void initRWFT9(String s) {
if (!s.trim().isEmpty()) {
RWFT9 = Byte.parseByte(s);
} else {
RWFT9 = Byte.MIN_VALUE;
}
}

protected final void initRWFTC(String s) {
if (!s.trim().isEmpty()) {
RWFTC = Byte.parseByte(s);
} else {
RWFTC = Byte.MIN_VALUE;
}
}

protected final void initRWFTE(String s) {
if (!s.trim().isEmpty()) {
RWFTE = Byte.parseByte(s);
} else {
RWFTE = Byte.MIN_VALUE;
}
}

protected final void initRWFTN(String s) {
if (!s.trim().isEmpty()) {
RWFTN = Byte.parseByte(s);
} else {
RWFTN = Byte.MIN_VALUE;
}
}

protected final void initRWFTP(String s) {
if (!s.trim().isEmpty()) {
RWFTP = Short.parseShort(s);
} else {
RWFTP = Short.MIN_VALUE;
}
}

protected final void initRWFTP10(String s) {
if (!s.trim().isEmpty()) {
RWFTP10 = Short.parseShort(s);
} else {
RWFTP10 = Short.MIN_VALUE;
}
}

protected final void initRWFTP11(String s) {
if (!s.trim().isEmpty()) {
RWFTP11 = Short.parseShort(s);
} else {
RWFTP11 = Short.MIN_VALUE;
}
}

protected final void initRWFTP12(String s) {
if (!s.trim().isEmpty()) {
RWFTP12 = Short.parseShort(s);
} else {
RWFTP12 = Short.MIN_VALUE;
}
}

protected final void initRWFTP13(String s) {
if (!s.trim().isEmpty()) {
RWFTP13 = Short.parseShort(s);
} else {
RWFTP13 = Short.MIN_VALUE;
}
}

protected final void initRWFTP14(String s) {
if (!s.trim().isEmpty()) {
RWFTP14 = Short.parseShort(s);
} else {
RWFTP14 = Short.MIN_VALUE;
}
}

protected final void initRWFTP15(String s) {
if (!s.trim().isEmpty()) {
RWFTP15 = Short.parseShort(s);
} else {
RWFTP15 = Short.MIN_VALUE;
}
}

protected final void initRWFTP16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWFTP16 = false;
} else {
RWFTP16 = true;
}
}
}

protected final void initRWFTP17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWFTP17 = false;
} else {
RWFTP17 = true;
}
}
}

protected final void initRWFTP18(String s) {
if (!s.trim().isEmpty()) {
RWFTP18 = Short.parseShort(s);
} else {
RWFTP18 = Short.MIN_VALUE;
}
}

protected final void initRWFTP19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWFTP19 = false;
} else {
RWFTP19 = true;
}
}
}

protected final void initRWFTP2(String s) {
if (!s.trim().isEmpty()) {
RWFTP2 = Short.parseShort(s);
} else {
RWFTP2 = Short.MIN_VALUE;
}
}

protected final void initRWFTP20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWFTP20 = false;
} else {
RWFTP20 = true;
}
}
}

protected final void initRWFTP3(String s) {
if (!s.trim().isEmpty()) {
RWFTP3 = Short.parseShort(s);
} else {
RWFTP3 = Short.MIN_VALUE;
}
}

protected final void initRWFTP4(String s) {
if (!s.trim().isEmpty()) {
RWFTP4 = Short.parseShort(s);
} else {
RWFTP4 = Short.MIN_VALUE;
}
}

protected final void initRWFTP5(String s) {
if (!s.trim().isEmpty()) {
RWFTP5 = Short.parseShort(s);
} else {
RWFTP5 = Short.MIN_VALUE;
}
}

protected final void initRWFTP6(String s) {
if (!s.trim().isEmpty()) {
RWFTP6 = Short.parseShort(s);
} else {
RWFTP6 = Short.MIN_VALUE;
}
}

protected final void initRWFTP7(String s) {
if (!s.trim().isEmpty()) {
RWFTP7 = Short.parseShort(s);
} else {
RWFTP7 = Short.MIN_VALUE;
}
}

protected final void initRWFTP8(String s) {
if (!s.trim().isEmpty()) {
RWFTP8 = Short.parseShort(s);
} else {
RWFTP8 = Short.MIN_VALUE;
}
}

protected final void initRWFTP9(String s) {
if (!s.trim().isEmpty()) {
RWFTP9 = Short.parseShort(s);
} else {
RWFTP9 = Short.MIN_VALUE;
}
}

protected final void initRWILL(String s) {
if (!s.trim().isEmpty()) {
RWILL = Byte.parseByte(s);
} else {
RWILL = Byte.MIN_VALUE;
}
}

protected final void initRWILX1(String s) {
if (!s.trim().isEmpty()) {
RWILX1 = Byte.parseByte(s);
} else {
RWILX1 = Byte.MIN_VALUE;
}
}

protected final void initRWILX10(String s) {
if (!s.trim().isEmpty()) {
RWILX10 = Byte.parseByte(s);
} else {
RWILX10 = Byte.MIN_VALUE;
}
}

protected final void initRWILX11(String s) {
if (!s.trim().isEmpty()) {
RWILX11 = Byte.parseByte(s);
} else {
RWILX11 = Byte.MIN_VALUE;
}
}

protected final void initRWILX12(String s) {
if (!s.trim().isEmpty()) {
RWILX12 = Byte.parseByte(s);
} else {
RWILX12 = Byte.MIN_VALUE;
}
}

protected final void initRWILX13(String s) {
if (!s.trim().isEmpty()) {
RWILX13 = Byte.parseByte(s);
} else {
RWILX13 = Byte.MIN_VALUE;
}
}

protected final void initRWILX14(String s) {
if (!s.trim().isEmpty()) {
RWILX14 = Byte.parseByte(s);
} else {
RWILX14 = Byte.MIN_VALUE;
}
}

protected final void initRWILX15(String s) {
if (!s.trim().isEmpty()) {
RWILX15 = Byte.parseByte(s);
} else {
RWILX15 = Byte.MIN_VALUE;
}
}

protected final void initRWILX16(String s) {
if (!s.trim().isEmpty()) {
RWILX16 = Byte.parseByte(s);
} else {
RWILX16 = Byte.MIN_VALUE;
}
}

protected final void initRWILX17(String s) {
if (!s.trim().isEmpty()) {
RWILX17 = Byte.parseByte(s);
} else {
RWILX17 = Byte.MIN_VALUE;
}
}

protected final void initRWILX18(String s) {
if (!s.trim().isEmpty()) {
RWILX18 = Byte.parseByte(s);
} else {
RWILX18 = Byte.MIN_VALUE;
}
}

protected final void initRWILX19(String s) {
if (!s.trim().isEmpty()) {
RWILX19 = Byte.parseByte(s);
} else {
RWILX19 = Byte.MIN_VALUE;
}
}

protected final void initRWILX2(String s) {
if (!s.trim().isEmpty()) {
RWILX2 = Byte.parseByte(s);
} else {
RWILX2 = Byte.MIN_VALUE;
}
}

protected final void initRWILX20(String s) {
if (!s.trim().isEmpty()) {
RWILX20 = Byte.parseByte(s);
} else {
RWILX20 = Byte.MIN_VALUE;
}
}

protected final void initRWILX3(String s) {
if (!s.trim().isEmpty()) {
RWILX3 = Byte.parseByte(s);
} else {
RWILX3 = Byte.MIN_VALUE;
}
}

protected final void initRWILX4(String s) {
if (!s.trim().isEmpty()) {
RWILX4 = Byte.parseByte(s);
} else {
RWILX4 = Byte.MIN_VALUE;
}
}

protected final void initRWILX5(String s) {
if (!s.trim().isEmpty()) {
RWILX5 = Byte.parseByte(s);
} else {
RWILX5 = Byte.MIN_VALUE;
}
}

protected final void initRWILX6(String s) {
if (!s.trim().isEmpty()) {
RWILX6 = Byte.parseByte(s);
} else {
RWILX6 = Byte.MIN_VALUE;
}
}

protected final void initRWILX7(String s) {
if (!s.trim().isEmpty()) {
RWILX7 = Byte.parseByte(s);
} else {
RWILX7 = Byte.MIN_VALUE;
}
}

protected final void initRWILX8(String s) {
if (!s.trim().isEmpty()) {
RWILX8 = Byte.parseByte(s);
} else {
RWILX8 = Byte.MIN_VALUE;
}
}

protected final void initRWILX9(String s) {
if (!s.trim().isEmpty()) {
RWILX9 = Byte.parseByte(s);
} else {
RWILX9 = Byte.MIN_VALUE;
}
}

protected final void initRWJSA(String s) {
if (!s.trim().isEmpty()) {
RWJSA = Byte.parseByte(s);
} else {
RWJSA = Byte.MIN_VALUE;
}
}

protected final void initRWJSTY10(String s) {
if (!s.trim().isEmpty()) {
RWJSTY10 = Short.parseShort(s);
} else {
RWJSTY10 = Short.MIN_VALUE;
}
}

protected final void initRWJSTY11(String s) {
if (!s.trim().isEmpty()) {
RWJSTY11 = Short.parseShort(s);
} else {
RWJSTY11 = Short.MIN_VALUE;
}
}

protected final void initRWJSTY12(String s) {
if (!s.trim().isEmpty()) {
RWJSTY12 = Short.parseShort(s);
} else {
RWJSTY12 = Short.MIN_VALUE;
}
}

protected final void initRWJSTY13(String s) {
if (!s.trim().isEmpty()) {
RWJSTY13 = Short.parseShort(s);
} else {
RWJSTY13 = Short.MIN_VALUE;
}
}

protected final void initRWJSTY14(String s) {
if (!s.trim().isEmpty()) {
RWJSTY14 = Short.parseShort(s);
} else {
RWJSTY14 = Short.MIN_VALUE;
}
}

protected final void initRWJSTY15(String s) {
if (!s.trim().isEmpty()) {
RWJSTY15 = Short.parseShort(s);
} else {
RWJSTY15 = Short.MIN_VALUE;
}
}

protected final void initRWJSTY16(String s) {
if (!s.trim().isEmpty()) {
RWJSTY16 = Short.parseShort(s);
} else {
RWJSTY16 = Short.MIN_VALUE;
}
}

protected final void initRWJSTY17(String s) {
if (!s.trim().isEmpty()) {
RWJSTY17 = Short.parseShort(s);
} else {
RWJSTY17 = Short.MIN_VALUE;
}
}

protected final void initRWJSTY18(String s) {
if (!s.trim().isEmpty()) {
RWJSTY18 = Short.parseShort(s);
} else {
RWJSTY18 = Short.MIN_VALUE;
}
}

protected final void initRWJSTY19(String s) {
if (!s.trim().isEmpty()) {
RWJSTY19 = Short.parseShort(s);
} else {
RWJSTY19 = Short.MIN_VALUE;
}
}

protected final void initRWJSTY20(String s) {
if (!s.trim().isEmpty()) {
RWJSTY20 = Short.parseShort(s);
} else {
RWJSTY20 = Short.MIN_VALUE;
}
}

protected final void initRWJSTYR(String s) {
if (!s.trim().isEmpty()) {
RWJSTYR = Short.parseShort(s);
} else {
RWJSTYR = Short.MIN_VALUE;
}
}

protected final void initRWJSTYR2(String s) {
if (!s.trim().isEmpty()) {
RWJSTYR2 = Short.parseShort(s);
} else {
RWJSTYR2 = Short.MIN_VALUE;
}
}

protected final void initRWJSTYR3(String s) {
if (!s.trim().isEmpty()) {
RWJSTYR3 = Short.parseShort(s);
} else {
RWJSTYR3 = Short.MIN_VALUE;
}
}

protected final void initRWJSTYR4(String s) {
if (!s.trim().isEmpty()) {
RWJSTYR4 = Short.parseShort(s);
} else {
RWJSTYR4 = Short.MIN_VALUE;
}
}

protected final void initRWJSTYR5(String s) {
if (!s.trim().isEmpty()) {
RWJSTYR5 = Short.parseShort(s);
} else {
RWJSTYR5 = Short.MIN_VALUE;
}
}

protected final void initRWJSTYR6(String s) {
if (!s.trim().isEmpty()) {
RWJSTYR6 = Short.parseShort(s);
} else {
RWJSTYR6 = Short.MIN_VALUE;
}
}

protected final void initRWJSTYR7(String s) {
if (!s.trim().isEmpty()) {
RWJSTYR7 = Short.parseShort(s);
} else {
RWJSTYR7 = Short.MIN_VALUE;
}
}

protected final void initRWJSTYR8(String s) {
if (!s.trim().isEmpty()) {
RWJSTYR8 = Short.parseShort(s);
} else {
RWJSTYR8 = Short.MIN_VALUE;
}
}

protected final void initRWJSTYR9(String s) {
if (!s.trim().isEmpty()) {
RWJSTYR9 = Short.parseShort(s);
} else {
RWJSTYR9 = Short.MIN_VALUE;
}
}

protected final void initRWJSY(String s) {
if (!s.trim().isEmpty()) {
RWJSY = Short.parseShort(s);
} else {
RWJSY = Short.MIN_VALUE;
}
}

protected final void initRWJSY10(String s) {
if (!s.trim().isEmpty()) {
RWJSY10 = Short.parseShort(s);
} else {
RWJSY10 = Short.MIN_VALUE;
}
}

protected final void initRWJSY11(String s) {
if (!s.trim().isEmpty()) {
RWJSY11 = Short.parseShort(s);
} else {
RWJSY11 = Short.MIN_VALUE;
}
}

protected final void initRWJSY12(String s) {
if (!s.trim().isEmpty()) {
RWJSY12 = Short.parseShort(s);
} else {
RWJSY12 = Short.MIN_VALUE;
}
}

protected final void initRWJSY13(String s) {
if (!s.trim().isEmpty()) {
RWJSY13 = Short.parseShort(s);
} else {
RWJSY13 = Short.MIN_VALUE;
}
}

protected final void initRWJSY14(String s) {
if (!s.trim().isEmpty()) {
RWJSY14 = Short.parseShort(s);
} else {
RWJSY14 = Short.MIN_VALUE;
}
}

protected final void initRWJSY15(String s) {
if (!s.trim().isEmpty()) {
RWJSY15 = Short.parseShort(s);
} else {
RWJSY15 = Short.MIN_VALUE;
}
}

protected final void initRWJSY16(String s) {
if (!s.trim().isEmpty()) {
RWJSY16 = Short.parseShort(s);
} else {
RWJSY16 = Short.MIN_VALUE;
}
}

protected final void initRWJSY17(String s) {
if (!s.trim().isEmpty()) {
RWJSY17 = Short.parseShort(s);
} else {
RWJSY17 = Short.MIN_VALUE;
}
}

protected final void initRWJSY18(String s) {
if (!s.trim().isEmpty()) {
RWJSY18 = Short.parseShort(s);
} else {
RWJSY18 = Short.MIN_VALUE;
}
}

protected final void initRWJSY19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWJSY19 = false;
} else {
RWJSY19 = true;
}
}
}

protected final void initRWJSY2(String s) {
if (!s.trim().isEmpty()) {
RWJSY2 = Short.parseShort(s);
} else {
RWJSY2 = Short.MIN_VALUE;
}
}

protected final void initRWJSY20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWJSY20 = false;
} else {
RWJSY20 = true;
}
}
}

protected final void initRWJSY3(String s) {
if (!s.trim().isEmpty()) {
RWJSY3 = Short.parseShort(s);
} else {
RWJSY3 = Short.MIN_VALUE;
}
}

protected final void initRWJSY4(String s) {
if (!s.trim().isEmpty()) {
RWJSY4 = Short.parseShort(s);
} else {
RWJSY4 = Short.MIN_VALUE;
}
}

protected final void initRWJSY5(String s) {
if (!s.trim().isEmpty()) {
RWJSY5 = Short.parseShort(s);
} else {
RWJSY5 = Short.MIN_VALUE;
}
}

protected final void initRWJSY6(String s) {
if (!s.trim().isEmpty()) {
RWJSY6 = Short.parseShort(s);
} else {
RWJSY6 = Short.MIN_VALUE;
}
}

protected final void initRWJSY7(String s) {
if (!s.trim().isEmpty()) {
RWJSY7 = Short.parseShort(s);
} else {
RWJSY7 = Short.MIN_VALUE;
}
}

protected final void initRWJSY8(String s) {
if (!s.trim().isEmpty()) {
RWJSY8 = Short.parseShort(s);
} else {
RWJSY8 = Short.MIN_VALUE;
}
}

protected final void initRWJSY9(String s) {
if (!s.trim().isEmpty()) {
RWJSY9 = Short.parseShort(s);
} else {
RWJSY9 = Short.MIN_VALUE;
}
}

protected final void initRWLJO(String s) {
if (!s.trim().isEmpty()) {
RWLJO = Byte.parseByte(s);
} else {
RWLJO = Byte.MIN_VALUE;
}
}

protected final void initRWNED(String s) {
if (!s.trim().isEmpty()) {
RWNED = Byte.parseByte(s);
} else {
RWNED = Byte.MIN_VALUE;
}
}

protected final void initRWNWA(String s) {
if (!s.trim().isEmpty()) {
RWNWA = Byte.parseByte(s);
} else {
RWNWA = Byte.MIN_VALUE;
}
}

protected final void initRWNWA2(String s) {
if (!s.trim().isEmpty()) {
RWNWA2 = Byte.parseByte(s);
} else {
RWNWA2 = Byte.MIN_VALUE;
}
}

protected final void initRWNWA3(String s) {
if (!s.trim().isEmpty()) {
RWNWA3 = Byte.parseByte(s);
} else {
RWNWA3 = Byte.MIN_VALUE;
}
}

protected final void initRWNWA4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWA4 = false;
} else {
RWNWA4 = true;
}
}
}

protected final void initRWNWA5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWA5 = false;
} else {
RWNWA5 = true;
}
}
}

protected final void initRWNWA6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWA6 = false;
} else {
RWNWA6 = true;
}
}
}

protected final void initRWNWA7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWA7 = false;
} else {
RWNWA7 = true;
}
}
}

protected final void initRWNWA8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWA8 = false;
} else {
RWNWA8 = true;
}
}
}

protected final void initRWNWA9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWA9 = false;
} else {
RWNWA9 = true;
}
}
}

protected final void initRWNWB(String s) {
if (!s.trim().isEmpty()) {
RWNWB = Short.parseShort(s);
} else {
RWNWB = Short.MIN_VALUE;
}
}

protected final void initRWNWB2(String s) {
if (!s.trim().isEmpty()) {
RWNWB2 = Short.parseShort(s);
} else {
RWNWB2 = Short.MIN_VALUE;
}
}

protected final void initRWNWB3(String s) {
if (!s.trim().isEmpty()) {
RWNWB3 = Short.parseShort(s);
} else {
RWNWB3 = Short.MIN_VALUE;
}
}

protected final void initRWNWB4(String s) {
if (!s.trim().isEmpty()) {
RWNWB4 = Short.parseShort(s);
} else {
RWNWB4 = Short.MIN_VALUE;
}
}

protected final void initRWNWB5(String s) {
if (!s.trim().isEmpty()) {
RWNWB5 = Short.parseShort(s);
} else {
RWNWB5 = Short.MIN_VALUE;
}
}

protected final void initRWNWB6(String s) {
if (!s.trim().isEmpty()) {
RWNWB6 = Short.parseShort(s);
} else {
RWNWB6 = Short.MIN_VALUE;
}
}

protected final void initRWNWB7(String s) {
if (!s.trim().isEmpty()) {
RWNWB7 = Short.parseShort(s);
} else {
RWNWB7 = Short.MIN_VALUE;
}
}

protected final void initRWNWB8(String s) {
if (!s.trim().isEmpty()) {
RWNWB8 = Short.parseShort(s);
} else {
RWNWB8 = Short.MIN_VALUE;
}
}

protected final void initRWNWB9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWB9 = false;
} else {
RWNWB9 = true;
}
}
}

protected final void initRWNWC1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC1 = false;
} else {
RWNWC1 = true;
}
}
}

protected final void initRWNWC10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC10 = false;
} else {
RWNWC10 = true;
}
}
}

protected final void initRWNWC100(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC100 = false;
} else {
RWNWC100 = true;
}
}
}

protected final void initRWNWC101(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC101 = false;
} else {
RWNWC101 = true;
}
}
}

protected final void initRWNWC102(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC102 = false;
} else {
RWNWC102 = true;
}
}
}

protected final void initRWNWC103(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC103 = false;
} else {
RWNWC103 = true;
}
}
}

protected final void initRWNWC11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC11 = false;
} else {
RWNWC11 = true;
}
}
}

protected final void initRWNWC12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC12 = false;
} else {
RWNWC12 = true;
}
}
}

protected final void initRWNWC13(String s) {
if (!s.trim().isEmpty()) {
RWNWC13 = Byte.parseByte(s);
} else {
RWNWC13 = Byte.MIN_VALUE;
}
}

protected final void initRWNWC14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC14 = false;
} else {
RWNWC14 = true;
}
}
}

protected final void initRWNWC15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC15 = false;
} else {
RWNWC15 = true;
}
}
}

protected final void initRWNWC16(String s) {
if (!s.trim().isEmpty()) {
RWNWC16 = Byte.parseByte(s);
} else {
RWNWC16 = Byte.MIN_VALUE;
}
}

protected final void initRWNWC17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC17 = false;
} else {
RWNWC17 = true;
}
}
}

protected final void initRWNWC18(String s) {
if (!s.trim().isEmpty()) {
RWNWC18 = Byte.parseByte(s);
} else {
RWNWC18 = Byte.MIN_VALUE;
}
}

protected final void initRWNWC19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC19 = false;
} else {
RWNWC19 = true;
}
}
}

protected final void initRWNWC2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC2 = false;
} else {
RWNWC2 = true;
}
}
}

protected final void initRWNWC20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC20 = false;
} else {
RWNWC20 = true;
}
}
}

protected final void initRWNWC21(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC21 = false;
} else {
RWNWC21 = true;
}
}
}

protected final void initRWNWC22(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC22 = false;
} else {
RWNWC22 = true;
}
}
}

protected final void initRWNWC23(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC23 = false;
} else {
RWNWC23 = true;
}
}
}

protected final void initRWNWC24(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC24 = false;
} else {
RWNWC24 = true;
}
}
}

protected final void initRWNWC25(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC25 = false;
} else {
RWNWC25 = true;
}
}
}

protected final void initRWNWC26(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC26 = false;
} else {
RWNWC26 = true;
}
}
}

protected final void initRWNWC27(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC27 = false;
} else {
RWNWC27 = true;
}
}
}

protected final void initRWNWC28(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC28 = false;
} else {
RWNWC28 = true;
}
}
}

protected final void initRWNWC29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC29 = false;
} else {
RWNWC29 = true;
}
}
}

protected final void initRWNWC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC3 = false;
} else {
RWNWC3 = true;
}
}
}

protected final void initRWNWC30(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC30 = false;
} else {
RWNWC30 = true;
}
}
}

protected final void initRWNWC31(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC31 = false;
} else {
RWNWC31 = true;
}
}
}

protected final void initRWNWC32(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC32 = false;
} else {
RWNWC32 = true;
}
}
}

protected final void initRWNWC33(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC33 = false;
} else {
RWNWC33 = true;
}
}
}

protected final void initRWNWC34(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC34 = false;
} else {
RWNWC34 = true;
}
}
}

protected final void initRWNWC35(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC35 = false;
} else {
RWNWC35 = true;
}
}
}

protected final void initRWNWC36(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC36 = false;
} else {
RWNWC36 = true;
}
}
}

protected final void initRWNWC37(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC37 = false;
} else {
RWNWC37 = true;
}
}
}

protected final void initRWNWC38(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC38 = false;
} else {
RWNWC38 = true;
}
}
}

protected final void initRWNWC39(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC39 = false;
} else {
RWNWC39 = true;
}
}
}

protected final void initRWNWC4(String s) {
if (!s.trim().isEmpty()) {
RWNWC4 = Byte.parseByte(s);
} else {
RWNWC4 = Byte.MIN_VALUE;
}
}

protected final void initRWNWC40(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC40 = false;
} else {
RWNWC40 = true;
}
}
}

protected final void initRWNWC41(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC41 = false;
} else {
RWNWC41 = true;
}
}
}

protected final void initRWNWC42(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC42 = false;
} else {
RWNWC42 = true;
}
}
}

protected final void initRWNWC43(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC43 = false;
} else {
RWNWC43 = true;
}
}
}

protected final void initRWNWC44(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC44 = false;
} else {
RWNWC44 = true;
}
}
}

protected final void initRWNWC45(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC45 = false;
} else {
RWNWC45 = true;
}
}
}

protected final void initRWNWC46(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC46 = false;
} else {
RWNWC46 = true;
}
}
}

protected final void initRWNWC47(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC47 = false;
} else {
RWNWC47 = true;
}
}
}

protected final void initRWNWC48(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC48 = false;
} else {
RWNWC48 = true;
}
}
}

protected final void initRWNWC49(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC49 = false;
} else {
RWNWC49 = true;
}
}
}

protected final void initRWNWC5(String s) {
if (!s.trim().isEmpty()) {
RWNWC5 = Byte.parseByte(s);
} else {
RWNWC5 = Byte.MIN_VALUE;
}
}

protected final void initRWNWC50(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC50 = false;
} else {
RWNWC50 = true;
}
}
}

protected final void initRWNWC51(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC51 = false;
} else {
RWNWC51 = true;
}
}
}

protected final void initRWNWC52(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC52 = false;
} else {
RWNWC52 = true;
}
}
}

protected final void initRWNWC53(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC53 = false;
} else {
RWNWC53 = true;
}
}
}

protected final void initRWNWC54(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC54 = false;
} else {
RWNWC54 = true;
}
}
}

protected final void initRWNWC55(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC55 = false;
} else {
RWNWC55 = true;
}
}
}

protected final void initRWNWC56(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC56 = false;
} else {
RWNWC56 = true;
}
}
}

protected final void initRWNWC57(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC57 = false;
} else {
RWNWC57 = true;
}
}
}

protected final void initRWNWC58(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC58 = false;
} else {
RWNWC58 = true;
}
}
}

protected final void initRWNWC59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC59 = false;
} else {
RWNWC59 = true;
}
}
}

protected final void initRWNWC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC6 = false;
} else {
RWNWC6 = true;
}
}
}

protected final void initRWNWC60(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC60 = false;
} else {
RWNWC60 = true;
}
}
}

protected final void initRWNWC61(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC61 = false;
} else {
RWNWC61 = true;
}
}
}

protected final void initRWNWC62(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC62 = false;
} else {
RWNWC62 = true;
}
}
}

protected final void initRWNWC63(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC63 = false;
} else {
RWNWC63 = true;
}
}
}

protected final void initRWNWC64(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC64 = false;
} else {
RWNWC64 = true;
}
}
}

protected final void initRWNWC65(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC65 = false;
} else {
RWNWC65 = true;
}
}
}

protected final void initRWNWC66(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC66 = false;
} else {
RWNWC66 = true;
}
}
}

protected final void initRWNWC67(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC67 = false;
} else {
RWNWC67 = true;
}
}
}

protected final void initRWNWC68(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC68 = false;
} else {
RWNWC68 = true;
}
}
}

protected final void initRWNWC69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC69 = false;
} else {
RWNWC69 = true;
}
}
}

protected final void initRWNWC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC7 = false;
} else {
RWNWC7 = true;
}
}
}

protected final void initRWNWC70(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC70 = false;
} else {
RWNWC70 = true;
}
}
}

protected final void initRWNWC71(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC71 = false;
} else {
RWNWC71 = true;
}
}
}

protected final void initRWNWC72(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC72 = false;
} else {
RWNWC72 = true;
}
}
}

protected final void initRWNWC73(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC73 = false;
} else {
RWNWC73 = true;
}
}
}

protected final void initRWNWC74(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC74 = false;
} else {
RWNWC74 = true;
}
}
}

protected final void initRWNWC75(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC75 = false;
} else {
RWNWC75 = true;
}
}
}

protected final void initRWNWC76(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC76 = false;
} else {
RWNWC76 = true;
}
}
}

protected final void initRWNWC77(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC77 = false;
} else {
RWNWC77 = true;
}
}
}

protected final void initRWNWC78(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC78 = false;
} else {
RWNWC78 = true;
}
}
}

protected final void initRWNWC79(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC79 = false;
} else {
RWNWC79 = true;
}
}
}

protected final void initRWNWC8(String s) {
if (!s.trim().isEmpty()) {
RWNWC8 = Byte.parseByte(s);
} else {
RWNWC8 = Byte.MIN_VALUE;
}
}

protected final void initRWNWC80(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC80 = false;
} else {
RWNWC80 = true;
}
}
}

protected final void initRWNWC81(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC81 = false;
} else {
RWNWC81 = true;
}
}
}

protected final void initRWNWC9(String s) {
if (!s.trim().isEmpty()) {
RWNWC9 = Byte.parseByte(s);
} else {
RWNWC9 = Byte.MIN_VALUE;
}
}

protected final void initRWNWC95(String s) {
if (!s.trim().isEmpty()) {
RWNWC95 = Byte.parseByte(s);
} else {
RWNWC95 = Byte.MIN_VALUE;
}
}

protected final void initRWNWC96(String s) {
if (!s.trim().isEmpty()) {
RWNWC96 = Byte.parseByte(s);
} else {
RWNWC96 = Byte.MIN_VALUE;
}
}

protected final void initRWNWC97(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC97 = false;
} else {
RWNWC97 = true;
}
}
}

protected final void initRWNWC98(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC98 = false;
} else {
RWNWC98 = true;
}
}
}

protected final void initRWNWC99(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNWC99 = false;
} else {
RWNWC99 = true;
}
}
}

protected final void initRWNX(String s) {
if (!s.trim().isEmpty()) {
RWNX = Byte.parseByte(s);
} else {
RWNX = Byte.MIN_VALUE;
}
}

protected final void initRWNX10(String s) {
if (!s.trim().isEmpty()) {
RWNX10 = Byte.parseByte(s);
} else {
RWNX10 = Byte.MIN_VALUE;
}
}

protected final void initRWNX11(String s) {
if (!s.trim().isEmpty()) {
RWNX11 = Byte.parseByte(s);
} else {
RWNX11 = Byte.MIN_VALUE;
}
}

protected final void initRWNX12(String s) {
if (!s.trim().isEmpty()) {
RWNX12 = Byte.parseByte(s);
} else {
RWNX12 = Byte.MIN_VALUE;
}
}

protected final void initRWNX13(String s) {
if (!s.trim().isEmpty()) {
RWNX13 = Byte.parseByte(s);
} else {
RWNX13 = Byte.MIN_VALUE;
}
}

protected final void initRWNX14(String s) {
if (!s.trim().isEmpty()) {
RWNX14 = Byte.parseByte(s);
} else {
RWNX14 = Byte.MIN_VALUE;
}
}

protected final void initRWNX15(String s) {
if (!s.trim().isEmpty()) {
RWNX15 = Byte.parseByte(s);
} else {
RWNX15 = Byte.MIN_VALUE;
}
}

protected final void initRWNX16(String s) {
if (!s.trim().isEmpty()) {
RWNX16 = Byte.parseByte(s);
} else {
RWNX16 = Byte.MIN_VALUE;
}
}

protected final void initRWNX17(String s) {
if (!s.trim().isEmpty()) {
RWNX17 = Byte.parseByte(s);
} else {
RWNX17 = Byte.MIN_VALUE;
}
}

protected final void initRWNX18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNX18 = false;
} else {
RWNX18 = true;
}
}
}

protected final void initRWNX19(String s) {
if (!s.trim().isEmpty()) {
RWNX19 = Byte.parseByte(s);
} else {
RWNX19 = Byte.MIN_VALUE;
}
}

protected final void initRWNX2(String s) {
if (!s.trim().isEmpty()) {
RWNX2 = Byte.parseByte(s);
} else {
RWNX2 = Byte.MIN_VALUE;
}
}

protected final void initRWNX20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWNX20 = false;
} else {
RWNX20 = true;
}
}
}

protected final void initRWNX3(String s) {
if (!s.trim().isEmpty()) {
RWNX3 = Byte.parseByte(s);
} else {
RWNX3 = Byte.MIN_VALUE;
}
}

protected final void initRWNX4(String s) {
if (!s.trim().isEmpty()) {
RWNX4 = Byte.parseByte(s);
} else {
RWNX4 = Byte.MIN_VALUE;
}
}

protected final void initRWNX5(String s) {
if (!s.trim().isEmpty()) {
RWNX5 = Byte.parseByte(s);
} else {
RWNX5 = Byte.MIN_VALUE;
}
}

protected final void initRWNX6(String s) {
if (!s.trim().isEmpty()) {
RWNX6 = Byte.parseByte(s);
} else {
RWNX6 = Byte.MIN_VALUE;
}
}

protected final void initRWNX7(String s) {
if (!s.trim().isEmpty()) {
RWNX7 = Byte.parseByte(s);
} else {
RWNX7 = Byte.MIN_VALUE;
}
}

protected final void initRWNX8(String s) {
if (!s.trim().isEmpty()) {
RWNX8 = Byte.parseByte(s);
} else {
RWNX8 = Byte.MIN_VALUE;
}
}

protected final void initRWNX9(String s) {
if (!s.trim().isEmpty()) {
RWNX9 = Byte.parseByte(s);
} else {
RWNX9 = Byte.MIN_VALUE;
}
}

protected final void initRWPTF(String s) {
if (!s.trim().isEmpty()) {
RWPTF = Short.parseShort(s);
} else {
RWPTF = Short.MIN_VALUE;
}
}

protected final void initRWPTF10(String s) {
if (!s.trim().isEmpty()) {
RWPTF10 = Short.parseShort(s);
} else {
RWPTF10 = Short.MIN_VALUE;
}
}

protected final void initRWPTF11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWPTF11 = false;
} else {
RWPTF11 = true;
}
}
}

protected final void initRWPTF12(String s) {
if (!s.trim().isEmpty()) {
RWPTF12 = Short.parseShort(s);
} else {
RWPTF12 = Short.MIN_VALUE;
}
}

protected final void initRWPTF13(String s) {
if (!s.trim().isEmpty()) {
RWPTF13 = Short.parseShort(s);
} else {
RWPTF13 = Short.MIN_VALUE;
}
}

protected final void initRWPTF14(String s) {
if (!s.trim().isEmpty()) {
RWPTF14 = Short.parseShort(s);
} else {
RWPTF14 = Short.MIN_VALUE;
}
}

protected final void initRWPTF15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWPTF15 = false;
} else {
RWPTF15 = true;
}
}
}

protected final void initRWPTF16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWPTF16 = false;
} else {
RWPTF16 = true;
}
}
}

protected final void initRWPTF17(String s) {
if (!s.trim().isEmpty()) {
RWPTF17 = Short.parseShort(s);
} else {
RWPTF17 = Short.MIN_VALUE;
}
}

protected final void initRWPTF18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWPTF18 = false;
} else {
RWPTF18 = true;
}
}
}

protected final void initRWPTF19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWPTF19 = false;
} else {
RWPTF19 = true;
}
}
}

protected final void initRWPTF2(String s) {
if (!s.trim().isEmpty()) {
RWPTF2 = Short.parseShort(s);
} else {
RWPTF2 = Short.MIN_VALUE;
}
}

protected final void initRWPTF20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWPTF20 = false;
} else {
RWPTF20 = true;
}
}
}

protected final void initRWPTF3(String s) {
if (!s.trim().isEmpty()) {
RWPTF3 = Short.parseShort(s);
} else {
RWPTF3 = Short.MIN_VALUE;
}
}

protected final void initRWPTF4(String s) {
if (!s.trim().isEmpty()) {
RWPTF4 = Short.parseShort(s);
} else {
RWPTF4 = Short.MIN_VALUE;
}
}

protected final void initRWPTF5(String s) {
if (!s.trim().isEmpty()) {
RWPTF5 = Short.parseShort(s);
} else {
RWPTF5 = Short.MIN_VALUE;
}
}

protected final void initRWPTF6(String s) {
if (!s.trim().isEmpty()) {
RWPTF6 = Short.parseShort(s);
} else {
RWPTF6 = Short.MIN_VALUE;
}
}

protected final void initRWPTF7(String s) {
if (!s.trim().isEmpty()) {
RWPTF7 = Short.parseShort(s);
} else {
RWPTF7 = Short.MIN_VALUE;
}
}

protected final void initRWPTF8(String s) {
if (!s.trim().isEmpty()) {
RWPTF8 = Short.parseShort(s);
} else {
RWPTF8 = Short.MIN_VALUE;
}
}

protected final void initRWPTF9(String s) {
if (!s.trim().isEmpty()) {
RWPTF9 = Short.parseShort(s);
} else {
RWPTF9 = Short.MIN_VALUE;
}
}

protected final void initRWS(String s) {
if (!s.trim().isEmpty()) {
RWS = Byte.parseByte(s);
} else {
RWS = Byte.MIN_VALUE;
}
}

protected final void initRWS10(String s) {
if (!s.trim().isEmpty()) {
RWS10 = Byte.parseByte(s);
} else {
RWS10 = Byte.MIN_VALUE;
}
}

protected final void initRWS11(String s) {
if (!s.trim().isEmpty()) {
RWS11 = Byte.parseByte(s);
} else {
RWS11 = Byte.MIN_VALUE;
}
}

protected final void initRWS12(String s) {
if (!s.trim().isEmpty()) {
RWS12 = Byte.parseByte(s);
} else {
RWS12 = Byte.MIN_VALUE;
}
}

protected final void initRWS13(String s) {
if (!s.trim().isEmpty()) {
RWS13 = Byte.parseByte(s);
} else {
RWS13 = Byte.MIN_VALUE;
}
}

protected final void initRWS14(String s) {
if (!s.trim().isEmpty()) {
RWS14 = Byte.parseByte(s);
} else {
RWS14 = Byte.MIN_VALUE;
}
}

protected final void initRWS15(String s) {
if (!s.trim().isEmpty()) {
RWS15 = Byte.parseByte(s);
} else {
RWS15 = Byte.MIN_VALUE;
}
}

protected final void initRWS16(String s) {
if (!s.trim().isEmpty()) {
RWS16 = Byte.parseByte(s);
} else {
RWS16 = Byte.MIN_VALUE;
}
}

protected final void initRWS17(String s) {
if (!s.trim().isEmpty()) {
RWS17 = Byte.parseByte(s);
} else {
RWS17 = Byte.MIN_VALUE;
}
}

protected final void initRWS18(String s) {
if (!s.trim().isEmpty()) {
RWS18 = Byte.parseByte(s);
} else {
RWS18 = Byte.MIN_VALUE;
}
}

protected final void initRWS19(String s) {
if (!s.trim().isEmpty()) {
RWS19 = Byte.parseByte(s);
} else {
RWS19 = Byte.MIN_VALUE;
}
}

protected final void initRWS2(String s) {
if (!s.trim().isEmpty()) {
RWS2 = Byte.parseByte(s);
} else {
RWS2 = Byte.MIN_VALUE;
}
}

protected final void initRWS20(String s) {
if (!s.trim().isEmpty()) {
RWS20 = Byte.parseByte(s);
} else {
RWS20 = Byte.MIN_VALUE;
}
}

protected final void initRWS3(String s) {
if (!s.trim().isEmpty()) {
RWS3 = Byte.parseByte(s);
} else {
RWS3 = Byte.MIN_VALUE;
}
}

protected final void initRWS4(String s) {
if (!s.trim().isEmpty()) {
RWS4 = Byte.parseByte(s);
} else {
RWS4 = Byte.MIN_VALUE;
}
}

protected final void initRWS5(String s) {
if (!s.trim().isEmpty()) {
RWS5 = Byte.parseByte(s);
} else {
RWS5 = Byte.MIN_VALUE;
}
}

protected final void initRWS6(String s) {
if (!s.trim().isEmpty()) {
RWS6 = Byte.parseByte(s);
} else {
RWS6 = Byte.MIN_VALUE;
}
}

protected final void initRWS7(String s) {
if (!s.trim().isEmpty()) {
RWS7 = Byte.parseByte(s);
} else {
RWS7 = Byte.MIN_VALUE;
}
}

protected final void initRWS8(String s) {
if (!s.trim().isEmpty()) {
RWS8 = Byte.parseByte(s);
} else {
RWS8 = Byte.MIN_VALUE;
}
}

protected final void initRWS9(String s) {
if (!s.trim().isEmpty()) {
RWS9 = Byte.parseByte(s);
} else {
RWS9 = Byte.MIN_VALUE;
}
}

protected final void initRWSAD(String s) {
if (!s.trim().isEmpty()) {
RWSAD = Byte.parseByte(s);
} else {
RWSAD = Byte.MIN_VALUE;
}
}

protected final void initRWSAD10(String s) {
if (!s.trim().isEmpty()) {
RWSAD10 = Byte.parseByte(s);
} else {
RWSAD10 = Byte.MIN_VALUE;
}
}

protected final void initRWSAD11(String s) {
if (!s.trim().isEmpty()) {
RWSAD11 = Byte.parseByte(s);
} else {
RWSAD11 = Byte.MIN_VALUE;
}
}

protected final void initRWSAD12(String s) {
if (!s.trim().isEmpty()) {
RWSAD12 = Byte.parseByte(s);
} else {
RWSAD12 = Byte.MIN_VALUE;
}
}

protected final void initRWSAD13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAD13 = false;
} else {
RWSAD13 = true;
}
}
}

protected final void initRWSAD14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAD14 = false;
} else {
RWSAD14 = true;
}
}
}

protected final void initRWSAD15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAD15 = false;
} else {
RWSAD15 = true;
}
}
}

protected final void initRWSAD16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAD16 = false;
} else {
RWSAD16 = true;
}
}
}

protected final void initRWSAD17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAD17 = false;
} else {
RWSAD17 = true;
}
}
}

protected final void initRWSAD18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAD18 = false;
} else {
RWSAD18 = true;
}
}
}

protected final void initRWSAD19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAD19 = false;
} else {
RWSAD19 = true;
}
}
}

protected final void initRWSAD2(String s) {
if (!s.trim().isEmpty()) {
RWSAD2 = Byte.parseByte(s);
} else {
RWSAD2 = Byte.MIN_VALUE;
}
}

protected final void initRWSAD20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAD20 = false;
} else {
RWSAD20 = true;
}
}
}

protected final void initRWSAD3(String s) {
if (!s.trim().isEmpty()) {
RWSAD3 = Short.parseShort(s);
} else {
RWSAD3 = Short.MIN_VALUE;
}
}

protected final void initRWSAD4(String s) {
if (!s.trim().isEmpty()) {
RWSAD4 = Byte.parseByte(s);
} else {
RWSAD4 = Byte.MIN_VALUE;
}
}

protected final void initRWSAD5(String s) {
if (!s.trim().isEmpty()) {
RWSAD5 = Short.parseShort(s);
} else {
RWSAD5 = Short.MIN_VALUE;
}
}

protected final void initRWSAD6(String s) {
if (!s.trim().isEmpty()) {
RWSAD6 = Byte.parseByte(s);
} else {
RWSAD6 = Byte.MIN_VALUE;
}
}

protected final void initRWSAD7(String s) {
if (!s.trim().isEmpty()) {
RWSAD7 = Byte.parseByte(s);
} else {
RWSAD7 = Byte.MIN_VALUE;
}
}

protected final void initRWSAD8(String s) {
if (!s.trim().isEmpty()) {
RWSAD8 = Byte.parseByte(s);
} else {
RWSAD8 = Byte.MIN_VALUE;
}
}

protected final void initRWSAD9(String s) {
if (!s.trim().isEmpty()) {
RWSAD9 = Byte.parseByte(s);
} else {
RWSAD9 = Byte.MIN_VALUE;
}
}

protected final void initRWSAN(String s) {
if (!s.trim().isEmpty()) {
RWSAN = Short.parseShort(s);
} else {
RWSAN = Short.MIN_VALUE;
}
}

protected final void initRWSAN10(String s) {
if (!s.trim().isEmpty()) {
RWSAN10 = Integer.parseInt(s);
} else {
RWSAN10 = Integer.MIN_VALUE;
}
}

protected final void initRWSAN11(String s) {
if (!s.trim().isEmpty()) {
RWSAN11 = Integer.parseInt(s);
} else {
RWSAN11 = Integer.MIN_VALUE;
}
}

protected final void initRWSAN12(String s) {
if (!s.trim().isEmpty()) {
RWSAN12 = Integer.parseInt(s);
} else {
RWSAN12 = Integer.MIN_VALUE;
}
}

protected final void initRWSAN13(String s) {
if (!s.trim().isEmpty()) {
RWSAN13 = Integer.parseInt(s);
} else {
RWSAN13 = Integer.MIN_VALUE;
}
}

protected final void initRWSAN14(String s) {
if (!s.trim().isEmpty()) {
RWSAN14 = Integer.parseInt(s);
} else {
RWSAN14 = Integer.MIN_VALUE;
}
}

protected final void initRWSAN15(String s) {
if (!s.trim().isEmpty()) {
RWSAN15 = Short.parseShort(s);
} else {
RWSAN15 = Short.MIN_VALUE;
}
}

protected final void initRWSAN16(String s) {
if (!s.trim().isEmpty()) {
RWSAN16 = Integer.parseInt(s);
} else {
RWSAN16 = Integer.MIN_VALUE;
}
}

protected final void initRWSAN17(String s) {
if (!s.trim().isEmpty()) {
RWSAN17 = Short.parseShort(s);
} else {
RWSAN17 = Short.MIN_VALUE;
}
}

protected final void initRWSAN18(String s) {
if (!s.trim().isEmpty()) {
RWSAN18 = Short.parseShort(s);
} else {
RWSAN18 = Short.MIN_VALUE;
}
}

protected final void initRWSAN19(String s) {
if (!s.trim().isEmpty()) {
RWSAN19 = Short.parseShort(s);
} else {
RWSAN19 = Short.MIN_VALUE;
}
}

protected final void initRWSAN2(String s) {
if (!s.trim().isEmpty()) {
RWSAN2 = Integer.parseInt(s);
} else {
RWSAN2 = Integer.MIN_VALUE;
}
}

protected final void initRWSAN20(String s) {
if (!s.trim().isEmpty()) {
RWSAN20 = Short.parseShort(s);
} else {
RWSAN20 = Short.MIN_VALUE;
}
}

protected final void initRWSAN3(String s) {
if (!s.trim().isEmpty()) {
RWSAN3 = Integer.parseInt(s);
} else {
RWSAN3 = Integer.MIN_VALUE;
}
}

protected final void initRWSAN4(String s) {
if (!s.trim().isEmpty()) {
RWSAN4 = Integer.parseInt(s);
} else {
RWSAN4 = Integer.MIN_VALUE;
}
}

protected final void initRWSAN5(String s) {
if (!s.trim().isEmpty()) {
RWSAN5 = Integer.parseInt(s);
} else {
RWSAN5 = Integer.MIN_VALUE;
}
}

protected final void initRWSAN6(String s) {
if (!s.trim().isEmpty()) {
RWSAN6 = Integer.parseInt(s);
} else {
RWSAN6 = Integer.MIN_VALUE;
}
}

protected final void initRWSAN7(String s) {
if (!s.trim().isEmpty()) {
RWSAN7 = Integer.parseInt(s);
} else {
RWSAN7 = Integer.MIN_VALUE;
}
}

protected final void initRWSAN8(String s) {
if (!s.trim().isEmpty()) {
RWSAN8 = Integer.parseInt(s);
} else {
RWSAN8 = Integer.MIN_VALUE;
}
}

protected final void initRWSAN9(String s) {
if (!s.trim().isEmpty()) {
RWSAN9 = Integer.parseInt(s);
} else {
RWSAN9 = Integer.MIN_VALUE;
}
}

protected final void initRWSAP(String s) {
if (!s.trim().isEmpty()) {
RWSAP = Short.parseShort(s);
} else {
RWSAP = Short.MIN_VALUE;
}
}

protected final void initRWSAP10(String s) {
if (!s.trim().isEmpty()) {
RWSAP10 = Short.parseShort(s);
} else {
RWSAP10 = Short.MIN_VALUE;
}
}

protected final void initRWSAP11(String s) {
if (!s.trim().isEmpty()) {
RWSAP11 = Short.parseShort(s);
} else {
RWSAP11 = Short.MIN_VALUE;
}
}

protected final void initRWSAP12(String s) {
if (!s.trim().isEmpty()) {
RWSAP12 = Byte.parseByte(s);
} else {
RWSAP12 = Byte.MIN_VALUE;
}
}

protected final void initRWSAP13(String s) {
if (!s.trim().isEmpty()) {
RWSAP13 = Short.parseShort(s);
} else {
RWSAP13 = Short.MIN_VALUE;
}
}

protected final void initRWSAP14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAP14 = false;
} else {
RWSAP14 = true;
}
}
}

protected final void initRWSAP15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAP15 = false;
} else {
RWSAP15 = true;
}
}
}

protected final void initRWSAP16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAP16 = false;
} else {
RWSAP16 = true;
}
}
}

protected final void initRWSAP17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAP17 = false;
} else {
RWSAP17 = true;
}
}
}

protected final void initRWSAP18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAP18 = false;
} else {
RWSAP18 = true;
}
}
}

protected final void initRWSAP19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAP19 = false;
} else {
RWSAP19 = true;
}
}
}

protected final void initRWSAP2(String s) {
if (!s.trim().isEmpty()) {
RWSAP2 = Short.parseShort(s);
} else {
RWSAP2 = Short.MIN_VALUE;
}
}

protected final void initRWSAP20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAP20 = false;
} else {
RWSAP20 = true;
}
}
}

protected final void initRWSAP3(String s) {
if (!s.trim().isEmpty()) {
RWSAP3 = Integer.parseInt(s);
} else {
RWSAP3 = Integer.MIN_VALUE;
}
}

protected final void initRWSAP4(String s) {
if (!s.trim().isEmpty()) {
RWSAP4 = Short.parseShort(s);
} else {
RWSAP4 = Short.MIN_VALUE;
}
}

protected final void initRWSAP5(String s) {
if (!s.trim().isEmpty()) {
RWSAP5 = Short.parseShort(s);
} else {
RWSAP5 = Short.MIN_VALUE;
}
}

protected final void initRWSAP6(String s) {
if (!s.trim().isEmpty()) {
RWSAP6 = Short.parseShort(s);
} else {
RWSAP6 = Short.MIN_VALUE;
}
}

protected final void initRWSAP7(String s) {
if (!s.trim().isEmpty()) {
RWSAP7 = Short.parseShort(s);
} else {
RWSAP7 = Short.MIN_VALUE;
}
}

protected final void initRWSAP8(String s) {
if (!s.trim().isEmpty()) {
RWSAP8 = Short.parseShort(s);
} else {
RWSAP8 = Short.MIN_VALUE;
}
}

protected final void initRWSAP9(String s) {
if (!s.trim().isEmpty()) {
RWSAP9 = Short.parseShort(s);
} else {
RWSAP9 = Short.MIN_VALUE;
}
}

protected final void initRWSAS(String s) {
if (!s.trim().isEmpty()) {
RWSAS = Short.parseShort(s);
} else {
RWSAS = Short.MIN_VALUE;
}
}

protected final void initRWSAS10(String s) {
if (!s.trim().isEmpty()) {
RWSAS10 = Byte.parseByte(s);
} else {
RWSAS10 = Byte.MIN_VALUE;
}
}

protected final void initRWSAS11(String s) {
if (!s.trim().isEmpty()) {
RWSAS11 = Byte.parseByte(s);
} else {
RWSAS11 = Byte.MIN_VALUE;
}
}

protected final void initRWSAS12(String s) {
if (!s.trim().isEmpty()) {
RWSAS12 = Byte.parseByte(s);
} else {
RWSAS12 = Byte.MIN_VALUE;
}
}

protected final void initRWSAS13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAS13 = false;
} else {
RWSAS13 = true;
}
}
}

protected final void initRWSAS14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAS14 = false;
} else {
RWSAS14 = true;
}
}
}

protected final void initRWSAS15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAS15 = false;
} else {
RWSAS15 = true;
}
}
}

protected final void initRWSAS16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAS16 = false;
} else {
RWSAS16 = true;
}
}
}

protected final void initRWSAS17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAS17 = false;
} else {
RWSAS17 = true;
}
}
}

protected final void initRWSAS18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAS18 = false;
} else {
RWSAS18 = true;
}
}
}

protected final void initRWSAS19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAS19 = false;
} else {
RWSAS19 = true;
}
}
}

protected final void initRWSAS2(String s) {
if (!s.trim().isEmpty()) {
RWSAS2 = Byte.parseByte(s);
} else {
RWSAS2 = Byte.MIN_VALUE;
}
}

protected final void initRWSAS20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSAS20 = false;
} else {
RWSAS20 = true;
}
}
}

protected final void initRWSAS3(String s) {
if (!s.trim().isEmpty()) {
RWSAS3 = Short.parseShort(s);
} else {
RWSAS3 = Short.MIN_VALUE;
}
}

protected final void initRWSAS4(String s) {
if (!s.trim().isEmpty()) {
RWSAS4 = Short.parseShort(s);
} else {
RWSAS4 = Short.MIN_VALUE;
}
}

protected final void initRWSAS5(String s) {
if (!s.trim().isEmpty()) {
RWSAS5 = Short.parseShort(s);
} else {
RWSAS5 = Short.MIN_VALUE;
}
}

protected final void initRWSAS6(String s) {
if (!s.trim().isEmpty()) {
RWSAS6 = Byte.parseByte(s);
} else {
RWSAS6 = Byte.MIN_VALUE;
}
}

protected final void initRWSAS7(String s) {
if (!s.trim().isEmpty()) {
RWSAS7 = Byte.parseByte(s);
} else {
RWSAS7 = Byte.MIN_VALUE;
}
}

protected final void initRWSAS8(String s) {
if (!s.trim().isEmpty()) {
RWSAS8 = Byte.parseByte(s);
} else {
RWSAS8 = Byte.MIN_VALUE;
}
}

protected final void initRWSAS9(String s) {
if (!s.trim().isEmpty()) {
RWSAS9 = Byte.parseByte(s);
} else {
RWSAS9 = Byte.MIN_VALUE;
}
}

protected final void initRWSE(String s) {
if (!s.trim().isEmpty()) {
RWSE = Byte.parseByte(s);
} else {
RWSE = Byte.MIN_VALUE;
}
}

protected final void initRWSE10(String s) {
if (!s.trim().isEmpty()) {
RWSE10 = Byte.parseByte(s);
} else {
RWSE10 = Byte.MIN_VALUE;
}
}

protected final void initRWSE11(String s) {
if (!s.trim().isEmpty()) {
RWSE11 = Byte.parseByte(s);
} else {
RWSE11 = Byte.MIN_VALUE;
}
}

protected final void initRWSE12(String s) {
if (!s.trim().isEmpty()) {
RWSE12 = Byte.parseByte(s);
} else {
RWSE12 = Byte.MIN_VALUE;
}
}

protected final void initRWSE13(String s) {
if (!s.trim().isEmpty()) {
RWSE13 = Byte.parseByte(s);
} else {
RWSE13 = Byte.MIN_VALUE;
}
}

protected final void initRWSE14(String s) {
if (!s.trim().isEmpty()) {
RWSE14 = Byte.parseByte(s);
} else {
RWSE14 = Byte.MIN_VALUE;
}
}

protected final void initRWSE15(String s) {
if (!s.trim().isEmpty()) {
RWSE15 = Byte.parseByte(s);
} else {
RWSE15 = Byte.MIN_VALUE;
}
}

protected final void initRWSE16(String s) {
if (!s.trim().isEmpty()) {
RWSE16 = Byte.parseByte(s);
} else {
RWSE16 = Byte.MIN_VALUE;
}
}

protected final void initRWSE17(String s) {
if (!s.trim().isEmpty()) {
RWSE17 = Byte.parseByte(s);
} else {
RWSE17 = Byte.MIN_VALUE;
}
}

protected final void initRWSE18(String s) {
if (!s.trim().isEmpty()) {
RWSE18 = Byte.parseByte(s);
} else {
RWSE18 = Byte.MIN_VALUE;
}
}

protected final void initRWSE19(String s) {
if (!s.trim().isEmpty()) {
RWSE19 = Byte.parseByte(s);
} else {
RWSE19 = Byte.MIN_VALUE;
}
}

protected final void initRWSE2(String s) {
if (!s.trim().isEmpty()) {
RWSE2 = Byte.parseByte(s);
} else {
RWSE2 = Byte.MIN_VALUE;
}
}

protected final void initRWSE20(String s) {
if (!s.trim().isEmpty()) {
RWSE20 = Byte.parseByte(s);
} else {
RWSE20 = Byte.MIN_VALUE;
}
}

protected final void initRWSE3(String s) {
if (!s.trim().isEmpty()) {
RWSE3 = Byte.parseByte(s);
} else {
RWSE3 = Byte.MIN_VALUE;
}
}

protected final void initRWSE4(String s) {
if (!s.trim().isEmpty()) {
RWSE4 = Byte.parseByte(s);
} else {
RWSE4 = Byte.MIN_VALUE;
}
}

protected final void initRWSE5(String s) {
if (!s.trim().isEmpty()) {
RWSE5 = Byte.parseByte(s);
} else {
RWSE5 = Byte.MIN_VALUE;
}
}

protected final void initRWSE6(String s) {
if (!s.trim().isEmpty()) {
RWSE6 = Byte.parseByte(s);
} else {
RWSE6 = Byte.MIN_VALUE;
}
}

protected final void initRWSE7(String s) {
if (!s.trim().isEmpty()) {
RWSE7 = Byte.parseByte(s);
} else {
RWSE7 = Byte.MIN_VALUE;
}
}

protected final void initRWSE8(String s) {
if (!s.trim().isEmpty()) {
RWSE8 = Byte.parseByte(s);
} else {
RWSE8 = Byte.MIN_VALUE;
}
}

protected final void initRWSE9(String s) {
if (!s.trim().isEmpty()) {
RWSE9 = Byte.parseByte(s);
} else {
RWSE9 = Byte.MIN_VALUE;
}
}

protected final void initRWSF(String s) {
if (!s.trim().isEmpty()) {
RWSF = Byte.parseByte(s);
} else {
RWSF = Byte.MIN_VALUE;
}
}

protected final void initRWSFD(String s) {
if (!s.trim().isEmpty()) {
RWSFD = Byte.parseByte(s);
} else {
RWSFD = Byte.MIN_VALUE;
}
}

protected final void initRWSFF1(String s) {
if (!s.trim().isEmpty()) {
RWSFF1 = Byte.parseByte(s);
} else {
RWSFF1 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF10(String s) {
if (!s.trim().isEmpty()) {
RWSFF10 = Byte.parseByte(s);
} else {
RWSFF10 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF100(String s) {
if (!s.trim().isEmpty()) {
RWSFF100 = Byte.parseByte(s);
} else {
RWSFF100 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF101(String s) {
if (!s.trim().isEmpty()) {
RWSFF101 = Byte.parseByte(s);
} else {
RWSFF101 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF102(String s) {
if (!s.trim().isEmpty()) {
RWSFF102 = Byte.parseByte(s);
} else {
RWSFF102 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF103(String s) {
if (!s.trim().isEmpty()) {
RWSFF103 = Byte.parseByte(s);
} else {
RWSFF103 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF104(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF104 = false;
} else {
RWSFF104 = true;
}
}
}

protected final void initRWSFF105(String s) {
if (!s.trim().isEmpty()) {
RWSFF105 = Byte.parseByte(s);
} else {
RWSFF105 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF106(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF106 = false;
} else {
RWSFF106 = true;
}
}
}

protected final void initRWSFF107(String s) {
if (!s.trim().isEmpty()) {
RWSFF107 = Byte.parseByte(s);
} else {
RWSFF107 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF108(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF108 = false;
} else {
RWSFF108 = true;
}
}
}

protected final void initRWSFF109(String s) {
if (!s.trim().isEmpty()) {
RWSFF109 = Byte.parseByte(s);
} else {
RWSFF109 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF11(String s) {
if (!s.trim().isEmpty()) {
RWSFF11 = Byte.parseByte(s);
} else {
RWSFF11 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF110(String s) {
if (!s.trim().isEmpty()) {
RWSFF110 = Byte.parseByte(s);
} else {
RWSFF110 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF111(String s) {
if (!s.trim().isEmpty()) {
RWSFF111 = Byte.parseByte(s);
} else {
RWSFF111 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF112(String s) {
if (!s.trim().isEmpty()) {
RWSFF112 = Byte.parseByte(s);
} else {
RWSFF112 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF113(String s) {
if (!s.trim().isEmpty()) {
RWSFF113 = Byte.parseByte(s);
} else {
RWSFF113 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF114(String s) {
if (!s.trim().isEmpty()) {
RWSFF114 = Byte.parseByte(s);
} else {
RWSFF114 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF115(String s) {
if (!s.trim().isEmpty()) {
RWSFF115 = Byte.parseByte(s);
} else {
RWSFF115 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF116(String s) {
if (!s.trim().isEmpty()) {
RWSFF116 = Byte.parseByte(s);
} else {
RWSFF116 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF117(String s) {
if (!s.trim().isEmpty()) {
RWSFF117 = Byte.parseByte(s);
} else {
RWSFF117 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF118(String s) {
if (!s.trim().isEmpty()) {
RWSFF118 = Byte.parseByte(s);
} else {
RWSFF118 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF119(String s) {
if (!s.trim().isEmpty()) {
RWSFF119 = Byte.parseByte(s);
} else {
RWSFF119 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF12(String s) {
if (!s.trim().isEmpty()) {
RWSFF12 = Byte.parseByte(s);
} else {
RWSFF12 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF120(String s) {
if (!s.trim().isEmpty()) {
RWSFF120 = Byte.parseByte(s);
} else {
RWSFF120 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF121(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF121 = false;
} else {
RWSFF121 = true;
}
}
}

protected final void initRWSFF122(String s) {
if (!s.trim().isEmpty()) {
RWSFF122 = Byte.parseByte(s);
} else {
RWSFF122 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF123(String s) {
if (!s.trim().isEmpty()) {
RWSFF123 = Byte.parseByte(s);
} else {
RWSFF123 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF124(String s) {
if (!s.trim().isEmpty()) {
RWSFF124 = Byte.parseByte(s);
} else {
RWSFF124 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF125(String s) {
if (!s.trim().isEmpty()) {
RWSFF125 = Byte.parseByte(s);
} else {
RWSFF125 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF126(String s) {
if (!s.trim().isEmpty()) {
RWSFF126 = Byte.parseByte(s);
} else {
RWSFF126 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF127(String s) {
if (!s.trim().isEmpty()) {
RWSFF127 = Byte.parseByte(s);
} else {
RWSFF127 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF128(String s) {
if (!s.trim().isEmpty()) {
RWSFF128 = Byte.parseByte(s);
} else {
RWSFF128 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF129(String s) {
if (!s.trim().isEmpty()) {
RWSFF129 = Byte.parseByte(s);
} else {
RWSFF129 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF13(String s) {
if (!s.trim().isEmpty()) {
RWSFF13 = Byte.parseByte(s);
} else {
RWSFF13 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF130(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF130 = false;
} else {
RWSFF130 = true;
}
}
}

protected final void initRWSFF131(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF131 = false;
} else {
RWSFF131 = true;
}
}
}

protected final void initRWSFF132(String s) {
if (!s.trim().isEmpty()) {
RWSFF132 = Byte.parseByte(s);
} else {
RWSFF132 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF133(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF133 = false;
} else {
RWSFF133 = true;
}
}
}

protected final void initRWSFF134(String s) {
if (!s.trim().isEmpty()) {
RWSFF134 = Byte.parseByte(s);
} else {
RWSFF134 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF135(String s) {
if (!s.trim().isEmpty()) {
RWSFF135 = Byte.parseByte(s);
} else {
RWSFF135 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF136(String s) {
if (!s.trim().isEmpty()) {
RWSFF136 = Byte.parseByte(s);
} else {
RWSFF136 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF137(String s) {
if (!s.trim().isEmpty()) {
RWSFF137 = Byte.parseByte(s);
} else {
RWSFF137 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF138(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF138 = false;
} else {
RWSFF138 = true;
}
}
}

protected final void initRWSFF139(String s) {
if (!s.trim().isEmpty()) {
RWSFF139 = Byte.parseByte(s);
} else {
RWSFF139 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF14(String s) {
if (!s.trim().isEmpty()) {
RWSFF14 = Byte.parseByte(s);
} else {
RWSFF14 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF140(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF140 = false;
} else {
RWSFF140 = true;
}
}
}

protected final void initRWSFF141(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF141 = false;
} else {
RWSFF141 = true;
}
}
}

protected final void initRWSFF142(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF142 = false;
} else {
RWSFF142 = true;
}
}
}

protected final void initRWSFF143(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF143 = false;
} else {
RWSFF143 = true;
}
}
}

protected final void initRWSFF144(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF144 = false;
} else {
RWSFF144 = true;
}
}
}

protected final void initRWSFF145(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF145 = false;
} else {
RWSFF145 = true;
}
}
}

protected final void initRWSFF146(String s) {
if (!s.trim().isEmpty()) {
RWSFF146 = Byte.parseByte(s);
} else {
RWSFF146 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF147(String s) {
if (!s.trim().isEmpty()) {
RWSFF147 = Byte.parseByte(s);
} else {
RWSFF147 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF148(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF148 = false;
} else {
RWSFF148 = true;
}
}
}

protected final void initRWSFF149(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF149 = false;
} else {
RWSFF149 = true;
}
}
}

protected final void initRWSFF15(String s) {
if (!s.trim().isEmpty()) {
RWSFF15 = Byte.parseByte(s);
} else {
RWSFF15 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF150(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF150 = false;
} else {
RWSFF150 = true;
}
}
}

protected final void initRWSFF151(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF151 = false;
} else {
RWSFF151 = true;
}
}
}

protected final void initRWSFF152(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF152 = false;
} else {
RWSFF152 = true;
}
}
}

protected final void initRWSFF153(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF153 = false;
} else {
RWSFF153 = true;
}
}
}

protected final void initRWSFF154(String s) {
if (!s.trim().isEmpty()) {
RWSFF154 = Byte.parseByte(s);
} else {
RWSFF154 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF155(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF155 = false;
} else {
RWSFF155 = true;
}
}
}

protected final void initRWSFF156(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF156 = false;
} else {
RWSFF156 = true;
}
}
}

protected final void initRWSFF157(String s) {
if (!s.trim().isEmpty()) {
RWSFF157 = Byte.parseByte(s);
} else {
RWSFF157 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF158(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF158 = false;
} else {
RWSFF158 = true;
}
}
}

protected final void initRWSFF159(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF159 = false;
} else {
RWSFF159 = true;
}
}
}

protected final void initRWSFF16(String s) {
if (!s.trim().isEmpty()) {
RWSFF16 = Byte.parseByte(s);
} else {
RWSFF16 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF160(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF160 = false;
} else {
RWSFF160 = true;
}
}
}

protected final void initRWSFF161(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF161 = false;
} else {
RWSFF161 = true;
}
}
}

protected final void initRWSFF162(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF162 = false;
} else {
RWSFF162 = true;
}
}
}

protected final void initRWSFF163(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF163 = false;
} else {
RWSFF163 = true;
}
}
}

protected final void initRWSFF164(String s) {
if (!s.trim().isEmpty()) {
RWSFF164 = Byte.parseByte(s);
} else {
RWSFF164 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF165(String s) {
if (!s.trim().isEmpty()) {
RWSFF165 = Byte.parseByte(s);
} else {
RWSFF165 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF166(String s) {
if (!s.trim().isEmpty()) {
RWSFF166 = Byte.parseByte(s);
} else {
RWSFF166 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF167(String s) {
if (!s.trim().isEmpty()) {
RWSFF167 = Byte.parseByte(s);
} else {
RWSFF167 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF168(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF168 = false;
} else {
RWSFF168 = true;
}
}
}

protected final void initRWSFF169(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF169 = false;
} else {
RWSFF169 = true;
}
}
}

protected final void initRWSFF17(String s) {
if (!s.trim().isEmpty()) {
RWSFF17 = Byte.parseByte(s);
} else {
RWSFF17 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF170(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF170 = false;
} else {
RWSFF170 = true;
}
}
}

protected final void initRWSFF171(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF171 = false;
} else {
RWSFF171 = true;
}
}
}

protected final void initRWSFF172(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF172 = false;
} else {
RWSFF172 = true;
}
}
}

protected final void initRWSFF173(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF173 = false;
} else {
RWSFF173 = true;
}
}
}

protected final void initRWSFF174(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF174 = false;
} else {
RWSFF174 = true;
}
}
}

protected final void initRWSFF175(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF175 = false;
} else {
RWSFF175 = true;
}
}
}

protected final void initRWSFF176(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF176 = false;
} else {
RWSFF176 = true;
}
}
}

protected final void initRWSFF177(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF177 = false;
} else {
RWSFF177 = true;
}
}
}

protected final void initRWSFF178(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF178 = false;
} else {
RWSFF178 = true;
}
}
}

protected final void initRWSFF179(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF179 = false;
} else {
RWSFF179 = true;
}
}
}

protected final void initRWSFF18(String s) {
if (!s.trim().isEmpty()) {
RWSFF18 = Byte.parseByte(s);
} else {
RWSFF18 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF180(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF180 = false;
} else {
RWSFF180 = true;
}
}
}

protected final void initRWSFF181(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF181 = false;
} else {
RWSFF181 = true;
}
}
}

protected final void initRWSFF182(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF182 = false;
} else {
RWSFF182 = true;
}
}
}

protected final void initRWSFF183(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF183 = false;
} else {
RWSFF183 = true;
}
}
}

protected final void initRWSFF184(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF184 = false;
} else {
RWSFF184 = true;
}
}
}

protected final void initRWSFF185(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF185 = false;
} else {
RWSFF185 = true;
}
}
}

protected final void initRWSFF186(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF186 = false;
} else {
RWSFF186 = true;
}
}
}

protected final void initRWSFF187(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF187 = false;
} else {
RWSFF187 = true;
}
}
}

protected final void initRWSFF188(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF188 = false;
} else {
RWSFF188 = true;
}
}
}

protected final void initRWSFF189(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF189 = false;
} else {
RWSFF189 = true;
}
}
}

protected final void initRWSFF19(String s) {
if (!s.trim().isEmpty()) {
RWSFF19 = Byte.parseByte(s);
} else {
RWSFF19 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF190(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF190 = false;
} else {
RWSFF190 = true;
}
}
}

protected final void initRWSFF191(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF191 = false;
} else {
RWSFF191 = true;
}
}
}

protected final void initRWSFF192(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF192 = false;
} else {
RWSFF192 = true;
}
}
}

protected final void initRWSFF193(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF193 = false;
} else {
RWSFF193 = true;
}
}
}

protected final void initRWSFF194(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF194 = false;
} else {
RWSFF194 = true;
}
}
}

protected final void initRWSFF195(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF195 = false;
} else {
RWSFF195 = true;
}
}
}

protected final void initRWSFF196(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF196 = false;
} else {
RWSFF196 = true;
}
}
}

protected final void initRWSFF197(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF197 = false;
} else {
RWSFF197 = true;
}
}
}

protected final void initRWSFF198(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF198 = false;
} else {
RWSFF198 = true;
}
}
}

protected final void initRWSFF199(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF199 = false;
} else {
RWSFF199 = true;
}
}
}

protected final void initRWSFF2(String s) {
if (!s.trim().isEmpty()) {
RWSFF2 = Byte.parseByte(s);
} else {
RWSFF2 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF20(String s) {
if (!s.trim().isEmpty()) {
RWSFF20 = Byte.parseByte(s);
} else {
RWSFF20 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF200(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF200 = false;
} else {
RWSFF200 = true;
}
}
}

protected final void initRWSFF21(String s) {
if (!s.trim().isEmpty()) {
RWSFF21 = Byte.parseByte(s);
} else {
RWSFF21 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF22(String s) {
if (!s.trim().isEmpty()) {
RWSFF22 = Byte.parseByte(s);
} else {
RWSFF22 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF23(String s) {
if (!s.trim().isEmpty()) {
RWSFF23 = Byte.parseByte(s);
} else {
RWSFF23 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF24(String s) {
if (!s.trim().isEmpty()) {
RWSFF24 = Byte.parseByte(s);
} else {
RWSFF24 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF25(String s) {
if (!s.trim().isEmpty()) {
RWSFF25 = Byte.parseByte(s);
} else {
RWSFF25 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF26(String s) {
if (!s.trim().isEmpty()) {
RWSFF26 = Byte.parseByte(s);
} else {
RWSFF26 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF27(String s) {
if (!s.trim().isEmpty()) {
RWSFF27 = Byte.parseByte(s);
} else {
RWSFF27 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF28(String s) {
if (!s.trim().isEmpty()) {
RWSFF28 = Byte.parseByte(s);
} else {
RWSFF28 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF29(String s) {
if (!s.trim().isEmpty()) {
RWSFF29 = Byte.parseByte(s);
} else {
RWSFF29 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF3(String s) {
if (!s.trim().isEmpty()) {
RWSFF3 = Byte.parseByte(s);
} else {
RWSFF3 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF30(String s) {
if (!s.trim().isEmpty()) {
RWSFF30 = Byte.parseByte(s);
} else {
RWSFF30 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF31(String s) {
if (!s.trim().isEmpty()) {
RWSFF31 = Byte.parseByte(s);
} else {
RWSFF31 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF32(String s) {
if (!s.trim().isEmpty()) {
RWSFF32 = Byte.parseByte(s);
} else {
RWSFF32 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF33(String s) {
if (!s.trim().isEmpty()) {
RWSFF33 = Byte.parseByte(s);
} else {
RWSFF33 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF34(String s) {
if (!s.trim().isEmpty()) {
RWSFF34 = Byte.parseByte(s);
} else {
RWSFF34 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF35(String s) {
if (!s.trim().isEmpty()) {
RWSFF35 = Byte.parseByte(s);
} else {
RWSFF35 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF36(String s) {
if (!s.trim().isEmpty()) {
RWSFF36 = Byte.parseByte(s);
} else {
RWSFF36 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF37(String s) {
if (!s.trim().isEmpty()) {
RWSFF37 = Byte.parseByte(s);
} else {
RWSFF37 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF38(String s) {
if (!s.trim().isEmpty()) {
RWSFF38 = Byte.parseByte(s);
} else {
RWSFF38 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF39(String s) {
if (!s.trim().isEmpty()) {
RWSFF39 = Byte.parseByte(s);
} else {
RWSFF39 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF4(String s) {
if (!s.trim().isEmpty()) {
RWSFF4 = Byte.parseByte(s);
} else {
RWSFF4 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF40(String s) {
if (!s.trim().isEmpty()) {
RWSFF40 = Byte.parseByte(s);
} else {
RWSFF40 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF41(String s) {
if (!s.trim().isEmpty()) {
RWSFF41 = Byte.parseByte(s);
} else {
RWSFF41 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF42(String s) {
if (!s.trim().isEmpty()) {
RWSFF42 = Byte.parseByte(s);
} else {
RWSFF42 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF43(String s) {
if (!s.trim().isEmpty()) {
RWSFF43 = Byte.parseByte(s);
} else {
RWSFF43 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF44(String s) {
if (!s.trim().isEmpty()) {
RWSFF44 = Byte.parseByte(s);
} else {
RWSFF44 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF45(String s) {
if (!s.trim().isEmpty()) {
RWSFF45 = Byte.parseByte(s);
} else {
RWSFF45 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF46(String s) {
if (!s.trim().isEmpty()) {
RWSFF46 = Byte.parseByte(s);
} else {
RWSFF46 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF47(String s) {
if (!s.trim().isEmpty()) {
RWSFF47 = Byte.parseByte(s);
} else {
RWSFF47 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF48(String s) {
if (!s.trim().isEmpty()) {
RWSFF48 = Byte.parseByte(s);
} else {
RWSFF48 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF49(String s) {
if (!s.trim().isEmpty()) {
RWSFF49 = Byte.parseByte(s);
} else {
RWSFF49 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF5(String s) {
if (!s.trim().isEmpty()) {
RWSFF5 = Byte.parseByte(s);
} else {
RWSFF5 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF50(String s) {
if (!s.trim().isEmpty()) {
RWSFF50 = Byte.parseByte(s);
} else {
RWSFF50 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF51(String s) {
if (!s.trim().isEmpty()) {
RWSFF51 = Byte.parseByte(s);
} else {
RWSFF51 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF52(String s) {
if (!s.trim().isEmpty()) {
RWSFF52 = Byte.parseByte(s);
} else {
RWSFF52 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF53(String s) {
if (!s.trim().isEmpty()) {
RWSFF53 = Byte.parseByte(s);
} else {
RWSFF53 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF54(String s) {
if (!s.trim().isEmpty()) {
RWSFF54 = Byte.parseByte(s);
} else {
RWSFF54 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF55(String s) {
if (!s.trim().isEmpty()) {
RWSFF55 = Byte.parseByte(s);
} else {
RWSFF55 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF56(String s) {
if (!s.trim().isEmpty()) {
RWSFF56 = Byte.parseByte(s);
} else {
RWSFF56 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF57(String s) {
if (!s.trim().isEmpty()) {
RWSFF57 = Byte.parseByte(s);
} else {
RWSFF57 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF58(String s) {
if (!s.trim().isEmpty()) {
RWSFF58 = Byte.parseByte(s);
} else {
RWSFF58 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF59(String s) {
if (!s.trim().isEmpty()) {
RWSFF59 = Byte.parseByte(s);
} else {
RWSFF59 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF6(String s) {
if (!s.trim().isEmpty()) {
RWSFF6 = Byte.parseByte(s);
} else {
RWSFF6 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF60(String s) {
if (!s.trim().isEmpty()) {
RWSFF60 = Byte.parseByte(s);
} else {
RWSFF60 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF61(String s) {
if (!s.trim().isEmpty()) {
RWSFF61 = Byte.parseByte(s);
} else {
RWSFF61 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF62(String s) {
if (!s.trim().isEmpty()) {
RWSFF62 = Byte.parseByte(s);
} else {
RWSFF62 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF63(String s) {
if (!s.trim().isEmpty()) {
RWSFF63 = Byte.parseByte(s);
} else {
RWSFF63 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF64(String s) {
if (!s.trim().isEmpty()) {
RWSFF64 = Byte.parseByte(s);
} else {
RWSFF64 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF65(String s) {
if (!s.trim().isEmpty()) {
RWSFF65 = Byte.parseByte(s);
} else {
RWSFF65 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF66(String s) {
if (!s.trim().isEmpty()) {
RWSFF66 = Byte.parseByte(s);
} else {
RWSFF66 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF67(String s) {
if (!s.trim().isEmpty()) {
RWSFF67 = Byte.parseByte(s);
} else {
RWSFF67 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF68(String s) {
if (!s.trim().isEmpty()) {
RWSFF68 = Byte.parseByte(s);
} else {
RWSFF68 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF69(String s) {
if (!s.trim().isEmpty()) {
RWSFF69 = Byte.parseByte(s);
} else {
RWSFF69 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF7(String s) {
if (!s.trim().isEmpty()) {
RWSFF7 = Byte.parseByte(s);
} else {
RWSFF7 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF70(String s) {
if (!s.trim().isEmpty()) {
RWSFF70 = Byte.parseByte(s);
} else {
RWSFF70 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF71(String s) {
if (!s.trim().isEmpty()) {
RWSFF71 = Byte.parseByte(s);
} else {
RWSFF71 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF72(String s) {
if (!s.trim().isEmpty()) {
RWSFF72 = Byte.parseByte(s);
} else {
RWSFF72 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF73(String s) {
if (!s.trim().isEmpty()) {
RWSFF73 = Byte.parseByte(s);
} else {
RWSFF73 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF74(String s) {
if (!s.trim().isEmpty()) {
RWSFF74 = Byte.parseByte(s);
} else {
RWSFF74 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF75(String s) {
if (!s.trim().isEmpty()) {
RWSFF75 = Byte.parseByte(s);
} else {
RWSFF75 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF76(String s) {
if (!s.trim().isEmpty()) {
RWSFF76 = Byte.parseByte(s);
} else {
RWSFF76 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF77(String s) {
if (!s.trim().isEmpty()) {
RWSFF77 = Byte.parseByte(s);
} else {
RWSFF77 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF78(String s) {
if (!s.trim().isEmpty()) {
RWSFF78 = Byte.parseByte(s);
} else {
RWSFF78 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF79(String s) {
if (!s.trim().isEmpty()) {
RWSFF79 = Byte.parseByte(s);
} else {
RWSFF79 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF8(String s) {
if (!s.trim().isEmpty()) {
RWSFF8 = Byte.parseByte(s);
} else {
RWSFF8 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF80(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF80 = false;
} else {
RWSFF80 = true;
}
}
}

protected final void initRWSFF81(String s) {
if (!s.trim().isEmpty()) {
RWSFF81 = Byte.parseByte(s);
} else {
RWSFF81 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF82(String s) {
if (!s.trim().isEmpty()) {
RWSFF82 = Byte.parseByte(s);
} else {
RWSFF82 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF83(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF83 = false;
} else {
RWSFF83 = true;
}
}
}

protected final void initRWSFF84(String s) {
if (!s.trim().isEmpty()) {
RWSFF84 = Byte.parseByte(s);
} else {
RWSFF84 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF85(String s) {
if (!s.trim().isEmpty()) {
RWSFF85 = Byte.parseByte(s);
} else {
RWSFF85 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF86(String s) {
if (!s.trim().isEmpty()) {
RWSFF86 = Byte.parseByte(s);
} else {
RWSFF86 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF87(String s) {
if (!s.trim().isEmpty()) {
RWSFF87 = Byte.parseByte(s);
} else {
RWSFF87 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF88(String s) {
if (!s.trim().isEmpty()) {
RWSFF88 = Byte.parseByte(s);
} else {
RWSFF88 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF89(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF89 = false;
} else {
RWSFF89 = true;
}
}
}

protected final void initRWSFF9(String s) {
if (!s.trim().isEmpty()) {
RWSFF9 = Byte.parseByte(s);
} else {
RWSFF9 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF90(String s) {
if (!s.trim().isEmpty()) {
RWSFF90 = Byte.parseByte(s);
} else {
RWSFF90 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF91(String s) {
if (!s.trim().isEmpty()) {
RWSFF91 = Byte.parseByte(s);
} else {
RWSFF91 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF92(String s) {
if (!s.trim().isEmpty()) {
RWSFF92 = Byte.parseByte(s);
} else {
RWSFF92 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF93(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSFF93 = false;
} else {
RWSFF93 = true;
}
}
}

protected final void initRWSFF94(String s) {
if (!s.trim().isEmpty()) {
RWSFF94 = Byte.parseByte(s);
} else {
RWSFF94 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF95(String s) {
if (!s.trim().isEmpty()) {
RWSFF95 = Byte.parseByte(s);
} else {
RWSFF95 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF96(String s) {
if (!s.trim().isEmpty()) {
RWSFF96 = Byte.parseByte(s);
} else {
RWSFF96 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF97(String s) {
if (!s.trim().isEmpty()) {
RWSFF97 = Byte.parseByte(s);
} else {
RWSFF97 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF98(String s) {
if (!s.trim().isEmpty()) {
RWSFF98 = Byte.parseByte(s);
} else {
RWSFF98 = Byte.MIN_VALUE;
}
}

protected final void initRWSFF99(String s) {
if (!s.trim().isEmpty()) {
RWSFF99 = Byte.parseByte(s);
} else {
RWSFF99 = Byte.MIN_VALUE;
}
}

protected final void initRWSFG(String s) {
if (!s.trim().isEmpty()) {
RWSFG = Byte.parseByte(s);
} else {
RWSFG = Byte.MIN_VALUE;
}
}

protected final void initRWSFM(String s) {
if (!s.trim().isEmpty()) {
RWSFM = Byte.parseByte(s);
} else {
RWSFM = Byte.MIN_VALUE;
}
}

protected final void initRWSFN(String s) {
if (!s.trim().isEmpty()) {
RWSFN = Integer.parseInt(s);
} else {
RWSFN = Integer.MIN_VALUE;
}
}

protected final void initRWSFP(String s) {
if (!s.trim().isEmpty()) {
RWSFP = Integer.parseInt(s);
} else {
RWSFP = Integer.MIN_VALUE;
}
}

protected final void initRWSFS(String s) {
if (!s.trim().isEmpty()) {
RWSFS = Byte.parseByte(s);
} else {
RWSFS = Byte.MIN_VALUE;
}
}

protected final void initRWSGN(String s) {
if (!s.trim().isEmpty()) {
RWSGN = Byte.parseByte(s);
} else {
RWSGN = Byte.MIN_VALUE;
}
}

protected final void initRWSGN10(String s) {
if (!s.trim().isEmpty()) {
RWSGN10 = Byte.parseByte(s);
} else {
RWSGN10 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN11(String s) {
if (!s.trim().isEmpty()) {
RWSGN11 = Byte.parseByte(s);
} else {
RWSGN11 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN12(String s) {
if (!s.trim().isEmpty()) {
RWSGN12 = Byte.parseByte(s);
} else {
RWSGN12 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN13(String s) {
if (!s.trim().isEmpty()) {
RWSGN13 = Byte.parseByte(s);
} else {
RWSGN13 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN14(String s) {
if (!s.trim().isEmpty()) {
RWSGN14 = Byte.parseByte(s);
} else {
RWSGN14 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN15(String s) {
if (!s.trim().isEmpty()) {
RWSGN15 = Byte.parseByte(s);
} else {
RWSGN15 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN16(String s) {
if (!s.trim().isEmpty()) {
RWSGN16 = Byte.parseByte(s);
} else {
RWSGN16 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN17(String s) {
if (!s.trim().isEmpty()) {
RWSGN17 = Byte.parseByte(s);
} else {
RWSGN17 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSGN18 = false;
} else {
RWSGN18 = true;
}
}
}

protected final void initRWSGN19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSGN19 = false;
} else {
RWSGN19 = true;
}
}
}

protected final void initRWSGN2(String s) {
if (!s.trim().isEmpty()) {
RWSGN2 = Byte.parseByte(s);
} else {
RWSGN2 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSGN20 = false;
} else {
RWSGN20 = true;
}
}
}

protected final void initRWSGN3(String s) {
if (!s.trim().isEmpty()) {
RWSGN3 = Byte.parseByte(s);
} else {
RWSGN3 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN4(String s) {
if (!s.trim().isEmpty()) {
RWSGN4 = Byte.parseByte(s);
} else {
RWSGN4 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN5(String s) {
if (!s.trim().isEmpty()) {
RWSGN5 = Byte.parseByte(s);
} else {
RWSGN5 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN6(String s) {
if (!s.trim().isEmpty()) {
RWSGN6 = Byte.parseByte(s);
} else {
RWSGN6 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN7(String s) {
if (!s.trim().isEmpty()) {
RWSGN7 = Byte.parseByte(s);
} else {
RWSGN7 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN8(String s) {
if (!s.trim().isEmpty()) {
RWSGN8 = Byte.parseByte(s);
} else {
RWSGN8 = Byte.MIN_VALUE;
}
}

protected final void initRWSGN9(String s) {
if (!s.trim().isEmpty()) {
RWSGN9 = Byte.parseByte(s);
} else {
RWSGN9 = Byte.MIN_VALUE;
}
}

protected final void initRWSM(String s) {
if (!s.trim().isEmpty()) {
RWSM = Byte.parseByte(s);
} else {
RWSM = Byte.MIN_VALUE;
}
}

protected final void initRWSM10(String s) {
if (!s.trim().isEmpty()) {
RWSM10 = Byte.parseByte(s);
} else {
RWSM10 = Byte.MIN_VALUE;
}
}

protected final void initRWSM11(String s) {
if (!s.trim().isEmpty()) {
RWSM11 = Byte.parseByte(s);
} else {
RWSM11 = Byte.MIN_VALUE;
}
}

protected final void initRWSM12(String s) {
if (!s.trim().isEmpty()) {
RWSM12 = Byte.parseByte(s);
} else {
RWSM12 = Byte.MIN_VALUE;
}
}

protected final void initRWSM13(String s) {
if (!s.trim().isEmpty()) {
RWSM13 = Byte.parseByte(s);
} else {
RWSM13 = Byte.MIN_VALUE;
}
}

protected final void initRWSM14(String s) {
if (!s.trim().isEmpty()) {
RWSM14 = Byte.parseByte(s);
} else {
RWSM14 = Byte.MIN_VALUE;
}
}

protected final void initRWSM15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSM15 = false;
} else {
RWSM15 = true;
}
}
}

protected final void initRWSM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSM16 = false;
} else {
RWSM16 = true;
}
}
}

protected final void initRWSM17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSM17 = false;
} else {
RWSM17 = true;
}
}
}

protected final void initRWSM18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSM18 = false;
} else {
RWSM18 = true;
}
}
}

protected final void initRWSM19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSM19 = false;
} else {
RWSM19 = true;
}
}
}

protected final void initRWSM2(String s) {
if (!s.trim().isEmpty()) {
RWSM2 = Byte.parseByte(s);
} else {
RWSM2 = Byte.MIN_VALUE;
}
}

protected final void initRWSM20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSM20 = false;
} else {
RWSM20 = true;
}
}
}

protected final void initRWSM3(String s) {
if (!s.trim().isEmpty()) {
RWSM3 = Byte.parseByte(s);
} else {
RWSM3 = Byte.MIN_VALUE;
}
}

protected final void initRWSM4(String s) {
if (!s.trim().isEmpty()) {
RWSM4 = Byte.parseByte(s);
} else {
RWSM4 = Byte.MIN_VALUE;
}
}

protected final void initRWSM5(String s) {
if (!s.trim().isEmpty()) {
RWSM5 = Byte.parseByte(s);
} else {
RWSM5 = Byte.MIN_VALUE;
}
}

protected final void initRWSM6(String s) {
if (!s.trim().isEmpty()) {
RWSM6 = Byte.parseByte(s);
} else {
RWSM6 = Byte.MIN_VALUE;
}
}

protected final void initRWSM7(String s) {
if (!s.trim().isEmpty()) {
RWSM7 = Byte.parseByte(s);
} else {
RWSM7 = Byte.MIN_VALUE;
}
}

protected final void initRWSM8(String s) {
if (!s.trim().isEmpty()) {
RWSM8 = Byte.parseByte(s);
} else {
RWSM8 = Byte.MIN_VALUE;
}
}

protected final void initRWSM9(String s) {
if (!s.trim().isEmpty()) {
RWSM9 = Byte.parseByte(s);
} else {
RWSM9 = Byte.MIN_VALUE;
}
}

protected final void initRWST1A(String s) {
if (!s.trim().isEmpty()) {
RWST1A = Byte.parseByte(s);
} else {
RWST1A = Byte.MIN_VALUE;
}
}

protected final void initRWST1AM(String s) {
if (!s.trim().isEmpty()) {
RWST1AM = Byte.parseByte(s);
} else {
RWST1AM = Byte.MIN_VALUE;
}
}

protected final void initRWST1B(String s) {
if (!s.trim().isEmpty()) {
RWST1B = Byte.parseByte(s);
} else {
RWST1B = Byte.MIN_VALUE;
}
}

protected final void initRWST1BM(String s) {
if (!s.trim().isEmpty()) {
RWST1BM = Byte.parseByte(s);
} else {
RWST1BM = Byte.MIN_VALUE;
}
}

protected final void initRWST1C(String s) {
if (!s.trim().isEmpty()) {
RWST1C = Byte.parseByte(s);
} else {
RWST1C = Byte.MIN_VALUE;
}
}

protected final void initRWST1CM(String s) {
if (!s.trim().isEmpty()) {
RWST1CM = Byte.parseByte(s);
} else {
RWST1CM = Byte.MIN_VALUE;
}
}

protected final void initRWST1D(String s) {
if (!s.trim().isEmpty()) {
RWST1D = Byte.parseByte(s);
} else {
RWST1D = Byte.MIN_VALUE;
}
}

protected final void initRWST1DM(String s) {
if (!s.trim().isEmpty()) {
RWST1DM = Byte.parseByte(s);
} else {
RWST1DM = Byte.MIN_VALUE;
}
}

protected final void initRWST1E(String s) {
if (!s.trim().isEmpty()) {
RWST1E = Byte.parseByte(s);
} else {
RWST1E = Byte.MIN_VALUE;
}
}

protected final void initRWST1EM(String s) {
if (!s.trim().isEmpty()) {
RWST1EM = Byte.parseByte(s);
} else {
RWST1EM = Byte.MIN_VALUE;
}
}

protected final void initRWST1F(String s) {
if (!s.trim().isEmpty()) {
RWST1F = Byte.parseByte(s);
} else {
RWST1F = Byte.MIN_VALUE;
}
}

protected final void initRWST1FM(String s) {
if (!s.trim().isEmpty()) {
RWST1FM = Byte.parseByte(s);
} else {
RWST1FM = Byte.MIN_VALUE;
}
}

protected final void initRWST1G(String s) {
if (!s.trim().isEmpty()) {
RWST1G = Byte.parseByte(s);
} else {
RWST1G = Byte.MIN_VALUE;
}
}

protected final void initRWST1GM(String s) {
if (!s.trim().isEmpty()) {
RWST1GM = Byte.parseByte(s);
} else {
RWST1GM = Byte.MIN_VALUE;
}
}

protected final void initRWST1H(String s) {
if (!s.trim().isEmpty()) {
RWST1H = Byte.parseByte(s);
} else {
RWST1H = Byte.MIN_VALUE;
}
}

protected final void initRWST1HM(String s) {
if (!s.trim().isEmpty()) {
RWST1HM = Byte.parseByte(s);
} else {
RWST1HM = Byte.MIN_VALUE;
}
}

protected final void initRWST1I(String s) {
if (!s.trim().isEmpty()) {
RWST1I = Byte.parseByte(s);
} else {
RWST1I = Byte.MIN_VALUE;
}
}

protected final void initRWST1IM(String s) {
if (!s.trim().isEmpty()) {
RWST1IM = Byte.parseByte(s);
} else {
RWST1IM = Byte.MIN_VALUE;
}
}

protected final void initRWST1J(String s) {
if (!s.trim().isEmpty()) {
RWST1J = Byte.parseByte(s);
} else {
RWST1J = Byte.MIN_VALUE;
}
}

protected final void initRWST1JM(String s) {
if (!s.trim().isEmpty()) {
RWST1JM = Byte.parseByte(s);
} else {
RWST1JM = Byte.MIN_VALUE;
}
}

protected final void initRWST1K(String s) {
if (!s.trim().isEmpty()) {
RWST1K = Byte.parseByte(s);
} else {
RWST1K = Byte.MIN_VALUE;
}
}

protected final void initRWST1KM(String s) {
if (!s.trim().isEmpty()) {
RWST1KM = Byte.parseByte(s);
} else {
RWST1KM = Byte.MIN_VALUE;
}
}

protected final void initRWST1L(String s) {
if (!s.trim().isEmpty()) {
RWST1L = Byte.parseByte(s);
} else {
RWST1L = Byte.MIN_VALUE;
}
}

protected final void initRWST1M(String s) {
if (!s.trim().isEmpty()) {
RWST1M = Byte.parseByte(s);
} else {
RWST1M = Byte.MIN_VALUE;
}
}

protected final void initRWST1N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST1N = false;
} else {
RWST1N = true;
}
}
}

protected final void initRWST1O(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST1O = false;
} else {
RWST1O = true;
}
}
}

protected final void initRWST1P(String s) {
if (!s.trim().isEmpty()) {
RWST1P = Byte.parseByte(s);
} else {
RWST1P = Byte.MIN_VALUE;
}
}

protected final void initRWST1Q(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST1Q = false;
} else {
RWST1Q = true;
}
}
}

protected final void initRWST1R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST1R = false;
} else {
RWST1R = true;
}
}
}

protected final void initRWST1S(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST1S = false;
} else {
RWST1S = true;
}
}
}

protected final void initRWST1T(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST1T = false;
} else {
RWST1T = true;
}
}
}

protected final void initRWST2A(String s) {
if (!s.trim().isEmpty()) {
RWST2A = Byte.parseByte(s);
} else {
RWST2A = Byte.MIN_VALUE;
}
}

protected final void initRWST2AM(String s) {
if (!s.trim().isEmpty()) {
RWST2AM = Byte.parseByte(s);
} else {
RWST2AM = Byte.MIN_VALUE;
}
}

protected final void initRWST2B(String s) {
if (!s.trim().isEmpty()) {
RWST2B = Byte.parseByte(s);
} else {
RWST2B = Byte.MIN_VALUE;
}
}

protected final void initRWST2BM(String s) {
if (!s.trim().isEmpty()) {
RWST2BM = Byte.parseByte(s);
} else {
RWST2BM = Byte.MIN_VALUE;
}
}

protected final void initRWST2C(String s) {
if (!s.trim().isEmpty()) {
RWST2C = Byte.parseByte(s);
} else {
RWST2C = Byte.MIN_VALUE;
}
}

protected final void initRWST2CM(String s) {
if (!s.trim().isEmpty()) {
RWST2CM = Byte.parseByte(s);
} else {
RWST2CM = Byte.MIN_VALUE;
}
}

protected final void initRWST2D(String s) {
if (!s.trim().isEmpty()) {
RWST2D = Byte.parseByte(s);
} else {
RWST2D = Byte.MIN_VALUE;
}
}

protected final void initRWST2DM(String s) {
if (!s.trim().isEmpty()) {
RWST2DM = Byte.parseByte(s);
} else {
RWST2DM = Byte.MIN_VALUE;
}
}

protected final void initRWST2E(String s) {
if (!s.trim().isEmpty()) {
RWST2E = Byte.parseByte(s);
} else {
RWST2E = Byte.MIN_VALUE;
}
}

protected final void initRWST2EM(String s) {
if (!s.trim().isEmpty()) {
RWST2EM = Byte.parseByte(s);
} else {
RWST2EM = Byte.MIN_VALUE;
}
}

protected final void initRWST2F(String s) {
if (!s.trim().isEmpty()) {
RWST2F = Byte.parseByte(s);
} else {
RWST2F = Byte.MIN_VALUE;
}
}

protected final void initRWST2FM(String s) {
if (!s.trim().isEmpty()) {
RWST2FM = Byte.parseByte(s);
} else {
RWST2FM = Byte.MIN_VALUE;
}
}

protected final void initRWST2G(String s) {
if (!s.trim().isEmpty()) {
RWST2G = Byte.parseByte(s);
} else {
RWST2G = Byte.MIN_VALUE;
}
}

protected final void initRWST2GM(String s) {
if (!s.trim().isEmpty()) {
RWST2GM = Byte.parseByte(s);
} else {
RWST2GM = Byte.MIN_VALUE;
}
}

protected final void initRWST2H(String s) {
if (!s.trim().isEmpty()) {
RWST2H = Byte.parseByte(s);
} else {
RWST2H = Byte.MIN_VALUE;
}
}

protected final void initRWST2HM(String s) {
if (!s.trim().isEmpty()) {
RWST2HM = Byte.parseByte(s);
} else {
RWST2HM = Byte.MIN_VALUE;
}
}

protected final void initRWST2I(String s) {
if (!s.trim().isEmpty()) {
RWST2I = Byte.parseByte(s);
} else {
RWST2I = Byte.MIN_VALUE;
}
}

protected final void initRWST2IM(String s) {
if (!s.trim().isEmpty()) {
RWST2IM = Byte.parseByte(s);
} else {
RWST2IM = Byte.MIN_VALUE;
}
}

protected final void initRWST2J(String s) {
if (!s.trim().isEmpty()) {
RWST2J = Byte.parseByte(s);
} else {
RWST2J = Byte.MIN_VALUE;
}
}

protected final void initRWST2JM(String s) {
if (!s.trim().isEmpty()) {
RWST2JM = Byte.parseByte(s);
} else {
RWST2JM = Byte.MIN_VALUE;
}
}

protected final void initRWST2K(String s) {
if (!s.trim().isEmpty()) {
RWST2K = Byte.parseByte(s);
} else {
RWST2K = Byte.MIN_VALUE;
}
}

protected final void initRWST2KM(String s) {
if (!s.trim().isEmpty()) {
RWST2KM = Byte.parseByte(s);
} else {
RWST2KM = Byte.MIN_VALUE;
}
}

protected final void initRWST2L(String s) {
if (!s.trim().isEmpty()) {
RWST2L = Byte.parseByte(s);
} else {
RWST2L = Byte.MIN_VALUE;
}
}

protected final void initRWST2M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST2M = false;
} else {
RWST2M = true;
}
}
}

protected final void initRWST2N(String s) {
if (!s.trim().isEmpty()) {
RWST2N = Byte.parseByte(s);
} else {
RWST2N = Byte.MIN_VALUE;
}
}

protected final void initRWST2O(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST2O = false;
} else {
RWST2O = true;
}
}
}

protected final void initRWST2P(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST2P = false;
} else {
RWST2P = true;
}
}
}

protected final void initRWST2Q(String s) {
if (!s.trim().isEmpty()) {
RWST2Q = Byte.parseByte(s);
} else {
RWST2Q = Byte.MIN_VALUE;
}
}

protected final void initRWST2R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST2R = false;
} else {
RWST2R = true;
}
}
}

protected final void initRWST2S(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST2S = false;
} else {
RWST2S = true;
}
}
}

protected final void initRWST2T(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST2T = false;
} else {
RWST2T = true;
}
}
}

protected final void initRWST3A(String s) {
if (!s.trim().isEmpty()) {
RWST3A = Byte.parseByte(s);
} else {
RWST3A = Byte.MIN_VALUE;
}
}

protected final void initRWST3AM(String s) {
if (!s.trim().isEmpty()) {
RWST3AM = Byte.parseByte(s);
} else {
RWST3AM = Byte.MIN_VALUE;
}
}

protected final void initRWST3B(String s) {
if (!s.trim().isEmpty()) {
RWST3B = Byte.parseByte(s);
} else {
RWST3B = Byte.MIN_VALUE;
}
}

protected final void initRWST3BM(String s) {
if (!s.trim().isEmpty()) {
RWST3BM = Byte.parseByte(s);
} else {
RWST3BM = Byte.MIN_VALUE;
}
}

protected final void initRWST3C(String s) {
if (!s.trim().isEmpty()) {
RWST3C = Byte.parseByte(s);
} else {
RWST3C = Byte.MIN_VALUE;
}
}

protected final void initRWST3CM(String s) {
if (!s.trim().isEmpty()) {
RWST3CM = Byte.parseByte(s);
} else {
RWST3CM = Byte.MIN_VALUE;
}
}

protected final void initRWST3D(String s) {
if (!s.trim().isEmpty()) {
RWST3D = Byte.parseByte(s);
} else {
RWST3D = Byte.MIN_VALUE;
}
}

protected final void initRWST3DM(String s) {
if (!s.trim().isEmpty()) {
RWST3DM = Byte.parseByte(s);
} else {
RWST3DM = Byte.MIN_VALUE;
}
}

protected final void initRWST3E(String s) {
if (!s.trim().isEmpty()) {
RWST3E = Byte.parseByte(s);
} else {
RWST3E = Byte.MIN_VALUE;
}
}

protected final void initRWST3EM(String s) {
if (!s.trim().isEmpty()) {
RWST3EM = Byte.parseByte(s);
} else {
RWST3EM = Byte.MIN_VALUE;
}
}

protected final void initRWST3F(String s) {
if (!s.trim().isEmpty()) {
RWST3F = Byte.parseByte(s);
} else {
RWST3F = Byte.MIN_VALUE;
}
}

protected final void initRWST3FM(String s) {
if (!s.trim().isEmpty()) {
RWST3FM = Byte.parseByte(s);
} else {
RWST3FM = Byte.MIN_VALUE;
}
}

protected final void initRWST3G(String s) {
if (!s.trim().isEmpty()) {
RWST3G = Byte.parseByte(s);
} else {
RWST3G = Byte.MIN_VALUE;
}
}

protected final void initRWST3GM(String s) {
if (!s.trim().isEmpty()) {
RWST3GM = Byte.parseByte(s);
} else {
RWST3GM = Byte.MIN_VALUE;
}
}

protected final void initRWST3H(String s) {
if (!s.trim().isEmpty()) {
RWST3H = Byte.parseByte(s);
} else {
RWST3H = Byte.MIN_VALUE;
}
}

protected final void initRWST3HM(String s) {
if (!s.trim().isEmpty()) {
RWST3HM = Byte.parseByte(s);
} else {
RWST3HM = Byte.MIN_VALUE;
}
}

protected final void initRWST3I(String s) {
if (!s.trim().isEmpty()) {
RWST3I = Byte.parseByte(s);
} else {
RWST3I = Byte.MIN_VALUE;
}
}

protected final void initRWST3IM(String s) {
if (!s.trim().isEmpty()) {
RWST3IM = Byte.parseByte(s);
} else {
RWST3IM = Byte.MIN_VALUE;
}
}

protected final void initRWST3J(String s) {
if (!s.trim().isEmpty()) {
RWST3J = Byte.parseByte(s);
} else {
RWST3J = Byte.MIN_VALUE;
}
}

protected final void initRWST3JM(String s) {
if (!s.trim().isEmpty()) {
RWST3JM = Byte.parseByte(s);
} else {
RWST3JM = Byte.MIN_VALUE;
}
}

protected final void initRWST3K(String s) {
if (!s.trim().isEmpty()) {
RWST3K = Byte.parseByte(s);
} else {
RWST3K = Byte.MIN_VALUE;
}
}

protected final void initRWST3KM(String s) {
if (!s.trim().isEmpty()) {
RWST3KM = Byte.parseByte(s);
} else {
RWST3KM = Byte.MIN_VALUE;
}
}

protected final void initRWST3L(String s) {
if (!s.trim().isEmpty()) {
RWST3L = Byte.parseByte(s);
} else {
RWST3L = Byte.MIN_VALUE;
}
}

protected final void initRWST3M(String s) {
if (!s.trim().isEmpty()) {
RWST3M = Byte.parseByte(s);
} else {
RWST3M = Byte.MIN_VALUE;
}
}

protected final void initRWST3N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST3N = false;
} else {
RWST3N = true;
}
}
}

protected final void initRWST3O(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST3O = false;
} else {
RWST3O = true;
}
}
}

protected final void initRWST3P(String s) {
if (!s.trim().isEmpty()) {
RWST3P = Byte.parseByte(s);
} else {
RWST3P = Byte.MIN_VALUE;
}
}

protected final void initRWST3Q(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST3Q = false;
} else {
RWST3Q = true;
}
}
}

protected final void initRWST3R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST3R = false;
} else {
RWST3R = true;
}
}
}

protected final void initRWST3S(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST3S = false;
} else {
RWST3S = true;
}
}
}

protected final void initRWST3T(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST3T = false;
} else {
RWST3T = true;
}
}
}

protected final void initRWST4A(String s) {
if (!s.trim().isEmpty()) {
RWST4A = Byte.parseByte(s);
} else {
RWST4A = Byte.MIN_VALUE;
}
}

protected final void initRWST4AM(String s) {
if (!s.trim().isEmpty()) {
RWST4AM = Byte.parseByte(s);
} else {
RWST4AM = Byte.MIN_VALUE;
}
}

protected final void initRWST4B(String s) {
if (!s.trim().isEmpty()) {
RWST4B = Byte.parseByte(s);
} else {
RWST4B = Byte.MIN_VALUE;
}
}

protected final void initRWST4BM(String s) {
if (!s.trim().isEmpty()) {
RWST4BM = Byte.parseByte(s);
} else {
RWST4BM = Byte.MIN_VALUE;
}
}

protected final void initRWST4C(String s) {
if (!s.trim().isEmpty()) {
RWST4C = Byte.parseByte(s);
} else {
RWST4C = Byte.MIN_VALUE;
}
}

protected final void initRWST4CM(String s) {
if (!s.trim().isEmpty()) {
RWST4CM = Byte.parseByte(s);
} else {
RWST4CM = Byte.MIN_VALUE;
}
}

protected final void initRWST4D(String s) {
if (!s.trim().isEmpty()) {
RWST4D = Byte.parseByte(s);
} else {
RWST4D = Byte.MIN_VALUE;
}
}

protected final void initRWST4DM(String s) {
if (!s.trim().isEmpty()) {
RWST4DM = Byte.parseByte(s);
} else {
RWST4DM = Byte.MIN_VALUE;
}
}

protected final void initRWST4E(String s) {
if (!s.trim().isEmpty()) {
RWST4E = Byte.parseByte(s);
} else {
RWST4E = Byte.MIN_VALUE;
}
}

protected final void initRWST4EM(String s) {
if (!s.trim().isEmpty()) {
RWST4EM = Byte.parseByte(s);
} else {
RWST4EM = Byte.MIN_VALUE;
}
}

protected final void initRWST4F(String s) {
if (!s.trim().isEmpty()) {
RWST4F = Byte.parseByte(s);
} else {
RWST4F = Byte.MIN_VALUE;
}
}

protected final void initRWST4FM(String s) {
if (!s.trim().isEmpty()) {
RWST4FM = Byte.parseByte(s);
} else {
RWST4FM = Byte.MIN_VALUE;
}
}

protected final void initRWST4G(String s) {
if (!s.trim().isEmpty()) {
RWST4G = Byte.parseByte(s);
} else {
RWST4G = Byte.MIN_VALUE;
}
}

protected final void initRWST4GM(String s) {
if (!s.trim().isEmpty()) {
RWST4GM = Byte.parseByte(s);
} else {
RWST4GM = Byte.MIN_VALUE;
}
}

protected final void initRWST4H(String s) {
if (!s.trim().isEmpty()) {
RWST4H = Byte.parseByte(s);
} else {
RWST4H = Byte.MIN_VALUE;
}
}

protected final void initRWST4HM(String s) {
if (!s.trim().isEmpty()) {
RWST4HM = Byte.parseByte(s);
} else {
RWST4HM = Byte.MIN_VALUE;
}
}

protected final void initRWST4I(String s) {
if (!s.trim().isEmpty()) {
RWST4I = Byte.parseByte(s);
} else {
RWST4I = Byte.MIN_VALUE;
}
}

protected final void initRWST4IM(String s) {
if (!s.trim().isEmpty()) {
RWST4IM = Byte.parseByte(s);
} else {
RWST4IM = Byte.MIN_VALUE;
}
}

protected final void initRWST4J(String s) {
if (!s.trim().isEmpty()) {
RWST4J = Byte.parseByte(s);
} else {
RWST4J = Byte.MIN_VALUE;
}
}

protected final void initRWST4JM(String s) {
if (!s.trim().isEmpty()) {
RWST4JM = Byte.parseByte(s);
} else {
RWST4JM = Byte.MIN_VALUE;
}
}

protected final void initRWST4K(String s) {
if (!s.trim().isEmpty()) {
RWST4K = Byte.parseByte(s);
} else {
RWST4K = Byte.MIN_VALUE;
}
}

protected final void initRWST4KM(String s) {
if (!s.trim().isEmpty()) {
RWST4KM = Byte.parseByte(s);
} else {
RWST4KM = Byte.MIN_VALUE;
}
}

protected final void initRWST4L(String s) {
if (!s.trim().isEmpty()) {
RWST4L = Byte.parseByte(s);
} else {
RWST4L = Byte.MIN_VALUE;
}
}

protected final void initRWST4M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST4M = false;
} else {
RWST4M = true;
}
}
}

protected final void initRWST4N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST4N = false;
} else {
RWST4N = true;
}
}
}

protected final void initRWST4O(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST4O = false;
} else {
RWST4O = true;
}
}
}

protected final void initRWST4P(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST4P = false;
} else {
RWST4P = true;
}
}
}

protected final void initRWST4Q(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST4Q = false;
} else {
RWST4Q = true;
}
}
}

protected final void initRWST4R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST4R = false;
} else {
RWST4R = true;
}
}
}

protected final void initRWST4S(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST4S = false;
} else {
RWST4S = true;
}
}
}

protected final void initRWST4T(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST4T = false;
} else {
RWST4T = true;
}
}
}

protected final void initRWST51AM(String s) {
if (!s.trim().isEmpty()) {
RWST51AM = Byte.parseByte(s);
} else {
RWST51AM = Byte.MIN_VALUE;
}
}

protected final void initRWST51BM(String s) {
if (!s.trim().isEmpty()) {
RWST51BM = Byte.parseByte(s);
} else {
RWST51BM = Byte.MIN_VALUE;
}
}

protected final void initRWST51CM(String s) {
if (!s.trim().isEmpty()) {
RWST51CM = Byte.parseByte(s);
} else {
RWST51CM = Byte.MIN_VALUE;
}
}

protected final void initRWST51DM(String s) {
if (!s.trim().isEmpty()) {
RWST51DM = Byte.parseByte(s);
} else {
RWST51DM = Byte.MIN_VALUE;
}
}

protected final void initRWST52AM(String s) {
if (!s.trim().isEmpty()) {
RWST52AM = Byte.parseByte(s);
} else {
RWST52AM = Byte.MIN_VALUE;
}
}

protected final void initRWST52BM(String s) {
if (!s.trim().isEmpty()) {
RWST52BM = Byte.parseByte(s);
} else {
RWST52BM = Byte.MIN_VALUE;
}
}

protected final void initRWST52CM(String s) {
if (!s.trim().isEmpty()) {
RWST52CM = Byte.parseByte(s);
} else {
RWST52CM = Byte.MIN_VALUE;
}
}

protected final void initRWST52DM(String s) {
if (!s.trim().isEmpty()) {
RWST52DM = Byte.parseByte(s);
} else {
RWST52DM = Byte.MIN_VALUE;
}
}

protected final void initRWST52EM(String s) {
if (!s.trim().isEmpty()) {
RWST52EM = Byte.parseByte(s);
} else {
RWST52EM = Byte.MIN_VALUE;
}
}

protected final void initRWST52FM(String s) {
if (!s.trim().isEmpty()) {
RWST52FM = Byte.parseByte(s);
} else {
RWST52FM = Byte.MIN_VALUE;
}
}

protected final void initRWST52GM(String s) {
if (!s.trim().isEmpty()) {
RWST52GM = Byte.parseByte(s);
} else {
RWST52GM = Byte.MIN_VALUE;
}
}

protected final void initRWST52HM(String s) {
if (!s.trim().isEmpty()) {
RWST52HM = Byte.parseByte(s);
} else {
RWST52HM = Byte.MIN_VALUE;
}
}

protected final void initRWST52JM(String s) {
if (!s.trim().isEmpty()) {
RWST52JM = Byte.parseByte(s);
} else {
RWST52JM = Byte.MIN_VALUE;
}
}

protected final void initRWST52KM(String s) {
if (!s.trim().isEmpty()) {
RWST52KM = Byte.parseByte(s);
} else {
RWST52KM = Byte.MIN_VALUE;
}
}

protected final void initRWST53AM(String s) {
if (!s.trim().isEmpty()) {
RWST53AM = Byte.parseByte(s);
} else {
RWST53AM = Byte.MIN_VALUE;
}
}

protected final void initRWST53DM(String s) {
if (!s.trim().isEmpty()) {
RWST53DM = Byte.parseByte(s);
} else {
RWST53DM = Byte.MIN_VALUE;
}
}

protected final void initRWST53EM(String s) {
if (!s.trim().isEmpty()) {
RWST53EM = Byte.parseByte(s);
} else {
RWST53EM = Byte.MIN_VALUE;
}
}

protected final void initRWST53FM(String s) {
if (!s.trim().isEmpty()) {
RWST53FM = Byte.parseByte(s);
} else {
RWST53FM = Byte.MIN_VALUE;
}
}

protected final void initRWST53GM(String s) {
if (!s.trim().isEmpty()) {
RWST53GM = Byte.parseByte(s);
} else {
RWST53GM = Byte.MIN_VALUE;
}
}

protected final void initRWST54AM(String s) {
if (!s.trim().isEmpty()) {
RWST54AM = Byte.parseByte(s);
} else {
RWST54AM = Byte.MIN_VALUE;
}
}

protected final void initRWST54CM(String s) {
if (!s.trim().isEmpty()) {
RWST54CM = Byte.parseByte(s);
} else {
RWST54CM = Byte.MIN_VALUE;
}
}

protected final void initRWST54DM(String s) {
if (!s.trim().isEmpty()) {
RWST54DM = Byte.parseByte(s);
} else {
RWST54DM = Byte.MIN_VALUE;
}
}

protected final void initRWST54FM(String s) {
if (!s.trim().isEmpty()) {
RWST54FM = Byte.parseByte(s);
} else {
RWST54FM = Byte.MIN_VALUE;
}
}

protected final void initRWST55AM(String s) {
if (!s.trim().isEmpty()) {
RWST55AM = Byte.parseByte(s);
} else {
RWST55AM = Byte.MIN_VALUE;
}
}

protected final void initRWST55BM(String s) {
if (!s.trim().isEmpty()) {
RWST55BM = Byte.parseByte(s);
} else {
RWST55BM = Byte.MIN_VALUE;
}
}

protected final void initRWST55CM(String s) {
if (!s.trim().isEmpty()) {
RWST55CM = Byte.parseByte(s);
} else {
RWST55CM = Byte.MIN_VALUE;
}
}

protected final void initRWST55DM(String s) {
if (!s.trim().isEmpty()) {
RWST55DM = Byte.parseByte(s);
} else {
RWST55DM = Byte.MIN_VALUE;
}
}

protected final void initRWST55EM(String s) {
if (!s.trim().isEmpty()) {
RWST55EM = Byte.parseByte(s);
} else {
RWST55EM = Byte.MIN_VALUE;
}
}

protected final void initRWST55GM(String s) {
if (!s.trim().isEmpty()) {
RWST55GM = Byte.parseByte(s);
} else {
RWST55GM = Byte.MIN_VALUE;
}
}

protected final void initRWST56AM(String s) {
if (!s.trim().isEmpty()) {
RWST56AM = Byte.parseByte(s);
} else {
RWST56AM = Byte.MIN_VALUE;
}
}

protected final void initRWST56BM(String s) {
if (!s.trim().isEmpty()) {
RWST56BM = Byte.parseByte(s);
} else {
RWST56BM = Byte.MIN_VALUE;
}
}

protected final void initRWST56CM(String s) {
if (!s.trim().isEmpty()) {
RWST56CM = Byte.parseByte(s);
} else {
RWST56CM = Byte.MIN_VALUE;
}
}

protected final void initRWST56DM(String s) {
if (!s.trim().isEmpty()) {
RWST56DM = Byte.parseByte(s);
} else {
RWST56DM = Byte.MIN_VALUE;
}
}

protected final void initRWST56EM(String s) {
if (!s.trim().isEmpty()) {
RWST56EM = Byte.parseByte(s);
} else {
RWST56EM = Byte.MIN_VALUE;
}
}

protected final void initRWST56FM(String s) {
if (!s.trim().isEmpty()) {
RWST56FM = Byte.parseByte(s);
} else {
RWST56FM = Byte.MIN_VALUE;
}
}

protected final void initRWST56GM(String s) {
if (!s.trim().isEmpty()) {
RWST56GM = Byte.parseByte(s);
} else {
RWST56GM = Byte.MIN_VALUE;
}
}

protected final void initRWST56IM(String s) {
if (!s.trim().isEmpty()) {
RWST56IM = Byte.parseByte(s);
} else {
RWST56IM = Byte.MIN_VALUE;
}
}

protected final void initRWST5A(String s) {
if (!s.trim().isEmpty()) {
RWST5A = Byte.parseByte(s);
} else {
RWST5A = Byte.MIN_VALUE;
}
}

protected final void initRWST5AM(String s) {
if (!s.trim().isEmpty()) {
RWST5AM = Byte.parseByte(s);
} else {
RWST5AM = Byte.MIN_VALUE;
}
}

protected final void initRWST5B(String s) {
if (!s.trim().isEmpty()) {
RWST5B = Byte.parseByte(s);
} else {
RWST5B = Byte.MIN_VALUE;
}
}

protected final void initRWST5BM(String s) {
if (!s.trim().isEmpty()) {
RWST5BM = Byte.parseByte(s);
} else {
RWST5BM = Byte.MIN_VALUE;
}
}

protected final void initRWST5C(String s) {
if (!s.trim().isEmpty()) {
RWST5C = Byte.parseByte(s);
} else {
RWST5C = Byte.MIN_VALUE;
}
}

protected final void initRWST5CM(String s) {
if (!s.trim().isEmpty()) {
RWST5CM = Byte.parseByte(s);
} else {
RWST5CM = Byte.MIN_VALUE;
}
}

protected final void initRWST5D(String s) {
if (!s.trim().isEmpty()) {
RWST5D = Byte.parseByte(s);
} else {
RWST5D = Byte.MIN_VALUE;
}
}

protected final void initRWST5DM(String s) {
if (!s.trim().isEmpty()) {
RWST5DM = Byte.parseByte(s);
} else {
RWST5DM = Byte.MIN_VALUE;
}
}

protected final void initRWST5E(String s) {
if (!s.trim().isEmpty()) {
RWST5E = Byte.parseByte(s);
} else {
RWST5E = Byte.MIN_VALUE;
}
}

protected final void initRWST5EM(String s) {
if (!s.trim().isEmpty()) {
RWST5EM = Byte.parseByte(s);
} else {
RWST5EM = Byte.MIN_VALUE;
}
}

protected final void initRWST5F(String s) {
if (!s.trim().isEmpty()) {
RWST5F = Byte.parseByte(s);
} else {
RWST5F = Byte.MIN_VALUE;
}
}

protected final void initRWST5FM(String s) {
if (!s.trim().isEmpty()) {
RWST5FM = Byte.parseByte(s);
} else {
RWST5FM = Byte.MIN_VALUE;
}
}

protected final void initRWST5G(String s) {
if (!s.trim().isEmpty()) {
RWST5G = Byte.parseByte(s);
} else {
RWST5G = Byte.MIN_VALUE;
}
}

protected final void initRWST5GM(String s) {
if (!s.trim().isEmpty()) {
RWST5GM = Byte.parseByte(s);
} else {
RWST5GM = Byte.MIN_VALUE;
}
}

protected final void initRWST5H(String s) {
if (!s.trim().isEmpty()) {
RWST5H = Byte.parseByte(s);
} else {
RWST5H = Byte.MIN_VALUE;
}
}

protected final void initRWST5HM(String s) {
if (!s.trim().isEmpty()) {
RWST5HM = Byte.parseByte(s);
} else {
RWST5HM = Byte.MIN_VALUE;
}
}

protected final void initRWST5I(String s) {
if (!s.trim().isEmpty()) {
RWST5I = Byte.parseByte(s);
} else {
RWST5I = Byte.MIN_VALUE;
}
}

protected final void initRWST5IM(String s) {
if (!s.trim().isEmpty()) {
RWST5IM = Byte.parseByte(s);
} else {
RWST5IM = Byte.MIN_VALUE;
}
}

protected final void initRWST5J(String s) {
if (!s.trim().isEmpty()) {
RWST5J = Byte.parseByte(s);
} else {
RWST5J = Byte.MIN_VALUE;
}
}

protected final void initRWST5JM(String s) {
if (!s.trim().isEmpty()) {
RWST5JM = Byte.parseByte(s);
} else {
RWST5JM = Byte.MIN_VALUE;
}
}

protected final void initRWST5K(String s) {
if (!s.trim().isEmpty()) {
RWST5K = Byte.parseByte(s);
} else {
RWST5K = Byte.MIN_VALUE;
}
}

protected final void initRWST5KM(String s) {
if (!s.trim().isEmpty()) {
RWST5KM = Byte.parseByte(s);
} else {
RWST5KM = Byte.MIN_VALUE;
}
}

protected final void initRWST5L(String s) {
if (!s.trim().isEmpty()) {
RWST5L = Byte.parseByte(s);
} else {
RWST5L = Byte.MIN_VALUE;
}
}

protected final void initRWST5M(String s) {
if (!s.trim().isEmpty()) {
RWST5M = Byte.parseByte(s);
} else {
RWST5M = Byte.MIN_VALUE;
}
}

protected final void initRWST5N(String s) {
if (!s.trim().isEmpty()) {
RWST5N = Byte.parseByte(s);
} else {
RWST5N = Byte.MIN_VALUE;
}
}

protected final void initRWST5O(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST5O = false;
} else {
RWST5O = true;
}
}
}

protected final void initRWST5P(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST5P = false;
} else {
RWST5P = true;
}
}
}

protected final void initRWST5Q(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST5Q = false;
} else {
RWST5Q = true;
}
}
}

protected final void initRWST5R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST5R = false;
} else {
RWST5R = true;
}
}
}

protected final void initRWST5S(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST5S = false;
} else {
RWST5S = true;
}
}
}

protected final void initRWST5T(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST5T = false;
} else {
RWST5T = true;
}
}
}

protected final void initRWST6A(String s) {
if (!s.trim().isEmpty()) {
RWST6A = Byte.parseByte(s);
} else {
RWST6A = Byte.MIN_VALUE;
}
}

protected final void initRWST6AM(String s) {
if (!s.trim().isEmpty()) {
RWST6AM = Byte.parseByte(s);
} else {
RWST6AM = Byte.MIN_VALUE;
}
}

protected final void initRWST6B(String s) {
if (!s.trim().isEmpty()) {
RWST6B = Byte.parseByte(s);
} else {
RWST6B = Byte.MIN_VALUE;
}
}

protected final void initRWST6BM(String s) {
if (!s.trim().isEmpty()) {
RWST6BM = Byte.parseByte(s);
} else {
RWST6BM = Byte.MIN_VALUE;
}
}

protected final void initRWST6C(String s) {
if (!s.trim().isEmpty()) {
RWST6C = Byte.parseByte(s);
} else {
RWST6C = Byte.MIN_VALUE;
}
}

protected final void initRWST6CM(String s) {
if (!s.trim().isEmpty()) {
RWST6CM = Byte.parseByte(s);
} else {
RWST6CM = Byte.MIN_VALUE;
}
}

protected final void initRWST6D(String s) {
if (!s.trim().isEmpty()) {
RWST6D = Byte.parseByte(s);
} else {
RWST6D = Byte.MIN_VALUE;
}
}

protected final void initRWST6DM(String s) {
if (!s.trim().isEmpty()) {
RWST6DM = Byte.parseByte(s);
} else {
RWST6DM = Byte.MIN_VALUE;
}
}

protected final void initRWST6E(String s) {
if (!s.trim().isEmpty()) {
RWST6E = Byte.parseByte(s);
} else {
RWST6E = Byte.MIN_VALUE;
}
}

protected final void initRWST6EM(String s) {
if (!s.trim().isEmpty()) {
RWST6EM = Byte.parseByte(s);
} else {
RWST6EM = Byte.MIN_VALUE;
}
}

protected final void initRWST6F(String s) {
if (!s.trim().isEmpty()) {
RWST6F = Byte.parseByte(s);
} else {
RWST6F = Byte.MIN_VALUE;
}
}

protected final void initRWST6FM(String s) {
if (!s.trim().isEmpty()) {
RWST6FM = Byte.parseByte(s);
} else {
RWST6FM = Byte.MIN_VALUE;
}
}

protected final void initRWST6G(String s) {
if (!s.trim().isEmpty()) {
RWST6G = Byte.parseByte(s);
} else {
RWST6G = Byte.MIN_VALUE;
}
}

protected final void initRWST6GM(String s) {
if (!s.trim().isEmpty()) {
RWST6GM = Byte.parseByte(s);
} else {
RWST6GM = Byte.MIN_VALUE;
}
}

protected final void initRWST6H(String s) {
if (!s.trim().isEmpty()) {
RWST6H = Byte.parseByte(s);
} else {
RWST6H = Byte.MIN_VALUE;
}
}

protected final void initRWST6HM(String s) {
if (!s.trim().isEmpty()) {
RWST6HM = Byte.parseByte(s);
} else {
RWST6HM = Byte.MIN_VALUE;
}
}

protected final void initRWST6I(String s) {
if (!s.trim().isEmpty()) {
RWST6I = Byte.parseByte(s);
} else {
RWST6I = Byte.MIN_VALUE;
}
}

protected final void initRWST6IM(String s) {
if (!s.trim().isEmpty()) {
RWST6IM = Byte.parseByte(s);
} else {
RWST6IM = Byte.MIN_VALUE;
}
}

protected final void initRWST6J(String s) {
if (!s.trim().isEmpty()) {
RWST6J = Byte.parseByte(s);
} else {
RWST6J = Byte.MIN_VALUE;
}
}

protected final void initRWST6JM(String s) {
if (!s.trim().isEmpty()) {
RWST6JM = Byte.parseByte(s);
} else {
RWST6JM = Byte.MIN_VALUE;
}
}

protected final void initRWST6K(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST6K = false;
} else {
RWST6K = true;
}
}
}

protected final void initRWST6KM(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST6KM = false;
} else {
RWST6KM = true;
}
}
}

protected final void initRWST6L(String s) {
if (!s.trim().isEmpty()) {
RWST6L = Byte.parseByte(s);
} else {
RWST6L = Byte.MIN_VALUE;
}
}

protected final void initRWST6M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST6M = false;
} else {
RWST6M = true;
}
}
}

protected final void initRWST6N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST6N = false;
} else {
RWST6N = true;
}
}
}

protected final void initRWST6O(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST6O = false;
} else {
RWST6O = true;
}
}
}

protected final void initRWST6P(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST6P = false;
} else {
RWST6P = true;
}
}
}

protected final void initRWST6Q(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST6Q = false;
} else {
RWST6Q = true;
}
}
}

protected final void initRWST6R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST6R = false;
} else {
RWST6R = true;
}
}
}

protected final void initRWST6S(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST6S = false;
} else {
RWST6S = true;
}
}
}

protected final void initRWST6T(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST6T = false;
} else {
RWST6T = true;
}
}
}

protected final void initRWST7A(String s) {
if (!s.trim().isEmpty()) {
RWST7A = Byte.parseByte(s);
} else {
RWST7A = Byte.MIN_VALUE;
}
}

protected final void initRWST7AM(String s) {
if (!s.trim().isEmpty()) {
RWST7AM = Byte.parseByte(s);
} else {
RWST7AM = Byte.MIN_VALUE;
}
}

protected final void initRWST7B(String s) {
if (!s.trim().isEmpty()) {
RWST7B = Byte.parseByte(s);
} else {
RWST7B = Byte.MIN_VALUE;
}
}

protected final void initRWST7BM(String s) {
if (!s.trim().isEmpty()) {
RWST7BM = Byte.parseByte(s);
} else {
RWST7BM = Byte.MIN_VALUE;
}
}

protected final void initRWST7C(String s) {
if (!s.trim().isEmpty()) {
RWST7C = Byte.parseByte(s);
} else {
RWST7C = Byte.MIN_VALUE;
}
}

protected final void initRWST7CM(String s) {
if (!s.trim().isEmpty()) {
RWST7CM = Byte.parseByte(s);
} else {
RWST7CM = Byte.MIN_VALUE;
}
}

protected final void initRWST7D(String s) {
if (!s.trim().isEmpty()) {
RWST7D = Byte.parseByte(s);
} else {
RWST7D = Byte.MIN_VALUE;
}
}

protected final void initRWST7DM(String s) {
if (!s.trim().isEmpty()) {
RWST7DM = Byte.parseByte(s);
} else {
RWST7DM = Byte.MIN_VALUE;
}
}

protected final void initRWST7E(String s) {
if (!s.trim().isEmpty()) {
RWST7E = Byte.parseByte(s);
} else {
RWST7E = Byte.MIN_VALUE;
}
}

protected final void initRWST7EM(String s) {
if (!s.trim().isEmpty()) {
RWST7EM = Byte.parseByte(s);
} else {
RWST7EM = Byte.MIN_VALUE;
}
}

protected final void initRWST7F(String s) {
if (!s.trim().isEmpty()) {
RWST7F = Byte.parseByte(s);
} else {
RWST7F = Byte.MIN_VALUE;
}
}

protected final void initRWST7FM(String s) {
if (!s.trim().isEmpty()) {
RWST7FM = Byte.parseByte(s);
} else {
RWST7FM = Byte.MIN_VALUE;
}
}

protected final void initRWST7G(String s) {
if (!s.trim().isEmpty()) {
RWST7G = Byte.parseByte(s);
} else {
RWST7G = Byte.MIN_VALUE;
}
}

protected final void initRWST7GM(String s) {
if (!s.trim().isEmpty()) {
RWST7GM = Byte.parseByte(s);
} else {
RWST7GM = Byte.MIN_VALUE;
}
}

protected final void initRWST7H(String s) {
if (!s.trim().isEmpty()) {
RWST7H = Byte.parseByte(s);
} else {
RWST7H = Byte.MIN_VALUE;
}
}

protected final void initRWST7HM(String s) {
if (!s.trim().isEmpty()) {
RWST7HM = Byte.parseByte(s);
} else {
RWST7HM = Byte.MIN_VALUE;
}
}

protected final void initRWST7I(String s) {
if (!s.trim().isEmpty()) {
RWST7I = Byte.parseByte(s);
} else {
RWST7I = Byte.MIN_VALUE;
}
}

protected final void initRWST7IM(String s) {
if (!s.trim().isEmpty()) {
RWST7IM = Byte.parseByte(s);
} else {
RWST7IM = Byte.MIN_VALUE;
}
}

protected final void initRWST7J(String s) {
if (!s.trim().isEmpty()) {
RWST7J = Byte.parseByte(s);
} else {
RWST7J = Byte.MIN_VALUE;
}
}

protected final void initRWST7JM(String s) {
if (!s.trim().isEmpty()) {
RWST7JM = Byte.parseByte(s);
} else {
RWST7JM = Byte.MIN_VALUE;
}
}

protected final void initRWST7K(String s) {
if (!s.trim().isEmpty()) {
RWST7K = Byte.parseByte(s);
} else {
RWST7K = Byte.MIN_VALUE;
}
}

protected final void initRWST7KM(String s) {
if (!s.trim().isEmpty()) {
RWST7KM = Byte.parseByte(s);
} else {
RWST7KM = Byte.MIN_VALUE;
}
}

protected final void initRWST7L(String s) {
if (!s.trim().isEmpty()) {
RWST7L = Byte.parseByte(s);
} else {
RWST7L = Byte.MIN_VALUE;
}
}

protected final void initRWST7M(String s) {
if (!s.trim().isEmpty()) {
RWST7M = Byte.parseByte(s);
} else {
RWST7M = Byte.MIN_VALUE;
}
}

protected final void initRWST7N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST7N = false;
} else {
RWST7N = true;
}
}
}

protected final void initRWST7O(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST7O = false;
} else {
RWST7O = true;
}
}
}

protected final void initRWST7P(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST7P = false;
} else {
RWST7P = true;
}
}
}

protected final void initRWST7Q(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST7Q = false;
} else {
RWST7Q = true;
}
}
}

protected final void initRWST7R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST7R = false;
} else {
RWST7R = true;
}
}
}

protected final void initRWST7S(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST7S = false;
} else {
RWST7S = true;
}
}
}

protected final void initRWST7T(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST7T = false;
} else {
RWST7T = true;
}
}
}

protected final void initRWST85AM(String s) {
if (!s.trim().isEmpty()) {
RWST85AM = Byte.parseByte(s);
} else {
RWST85AM = Byte.MIN_VALUE;
}
}

protected final void initRWST85BM(String s) {
if (!s.trim().isEmpty()) {
RWST85BM = Byte.parseByte(s);
} else {
RWST85BM = Byte.MIN_VALUE;
}
}

protected final void initRWST85CM(String s) {
if (!s.trim().isEmpty()) {
RWST85CM = Byte.parseByte(s);
} else {
RWST85CM = Byte.MIN_VALUE;
}
}

protected final void initRWST85DM(String s) {
if (!s.trim().isEmpty()) {
RWST85DM = Byte.parseByte(s);
} else {
RWST85DM = Byte.MIN_VALUE;
}
}

protected final void initRWST85EM(String s) {
if (!s.trim().isEmpty()) {
RWST85EM = Byte.parseByte(s);
} else {
RWST85EM = Byte.MIN_VALUE;
}
}

protected final void initRWST85FM(String s) {
if (!s.trim().isEmpty()) {
RWST85FM = Byte.parseByte(s);
} else {
RWST85FM = Byte.MIN_VALUE;
}
}

protected final void initRWST85GM(String s) {
if (!s.trim().isEmpty()) {
RWST85GM = Byte.parseByte(s);
} else {
RWST85GM = Byte.MIN_VALUE;
}
}

protected final void initRWST85HM(String s) {
if (!s.trim().isEmpty()) {
RWST85HM = Byte.parseByte(s);
} else {
RWST85HM = Byte.MIN_VALUE;
}
}

protected final void initRWST85IM(String s) {
if (!s.trim().isEmpty()) {
RWST85IM = Byte.parseByte(s);
} else {
RWST85IM = Byte.MIN_VALUE;
}
}

protected final void initRWST85JM(String s) {
if (!s.trim().isEmpty()) {
RWST85JM = Byte.parseByte(s);
} else {
RWST85JM = Byte.MIN_VALUE;
}
}

protected final void initRWST8A(String s) {
if (!s.trim().isEmpty()) {
RWST8A = Byte.parseByte(s);
} else {
RWST8A = Byte.MIN_VALUE;
}
}

protected final void initRWST8AM(String s) {
if (!s.trim().isEmpty()) {
RWST8AM = Byte.parseByte(s);
} else {
RWST8AM = Byte.MIN_VALUE;
}
}

protected final void initRWST8B(String s) {
if (!s.trim().isEmpty()) {
RWST8B = Byte.parseByte(s);
} else {
RWST8B = Byte.MIN_VALUE;
}
}

protected final void initRWST8BM(String s) {
if (!s.trim().isEmpty()) {
RWST8BM = Byte.parseByte(s);
} else {
RWST8BM = Byte.MIN_VALUE;
}
}

protected final void initRWST8C(String s) {
if (!s.trim().isEmpty()) {
RWST8C = Byte.parseByte(s);
} else {
RWST8C = Byte.MIN_VALUE;
}
}

protected final void initRWST8CM(String s) {
if (!s.trim().isEmpty()) {
RWST8CM = Byte.parseByte(s);
} else {
RWST8CM = Byte.MIN_VALUE;
}
}

protected final void initRWST8D(String s) {
if (!s.trim().isEmpty()) {
RWST8D = Byte.parseByte(s);
} else {
RWST8D = Byte.MIN_VALUE;
}
}

protected final void initRWST8DM(String s) {
if (!s.trim().isEmpty()) {
RWST8DM = Byte.parseByte(s);
} else {
RWST8DM = Byte.MIN_VALUE;
}
}

protected final void initRWST8E(String s) {
if (!s.trim().isEmpty()) {
RWST8E = Byte.parseByte(s);
} else {
RWST8E = Byte.MIN_VALUE;
}
}

protected final void initRWST8EM(String s) {
if (!s.trim().isEmpty()) {
RWST8EM = Byte.parseByte(s);
} else {
RWST8EM = Byte.MIN_VALUE;
}
}

protected final void initRWST8F(String s) {
if (!s.trim().isEmpty()) {
RWST8F = Byte.parseByte(s);
} else {
RWST8F = Byte.MIN_VALUE;
}
}

protected final void initRWST8FM(String s) {
if (!s.trim().isEmpty()) {
RWST8FM = Byte.parseByte(s);
} else {
RWST8FM = Byte.MIN_VALUE;
}
}

protected final void initRWST8G(String s) {
if (!s.trim().isEmpty()) {
RWST8G = Byte.parseByte(s);
} else {
RWST8G = Byte.MIN_VALUE;
}
}

protected final void initRWST8GM(String s) {
if (!s.trim().isEmpty()) {
RWST8GM = Byte.parseByte(s);
} else {
RWST8GM = Byte.MIN_VALUE;
}
}

protected final void initRWST8H(String s) {
if (!s.trim().isEmpty()) {
RWST8H = Byte.parseByte(s);
} else {
RWST8H = Byte.MIN_VALUE;
}
}

protected final void initRWST8HM(String s) {
if (!s.trim().isEmpty()) {
RWST8HM = Byte.parseByte(s);
} else {
RWST8HM = Byte.MIN_VALUE;
}
}

protected final void initRWST8I(String s) {
if (!s.trim().isEmpty()) {
RWST8I = Byte.parseByte(s);
} else {
RWST8I = Byte.MIN_VALUE;
}
}

protected final void initRWST8IM(String s) {
if (!s.trim().isEmpty()) {
RWST8IM = Byte.parseByte(s);
} else {
RWST8IM = Byte.MIN_VALUE;
}
}

protected final void initRWST8J(String s) {
if (!s.trim().isEmpty()) {
RWST8J = Byte.parseByte(s);
} else {
RWST8J = Byte.MIN_VALUE;
}
}

protected final void initRWST8JM(String s) {
if (!s.trim().isEmpty()) {
RWST8JM = Byte.parseByte(s);
} else {
RWST8JM = Byte.MIN_VALUE;
}
}

protected final void initRWST8K(String s) {
if (!s.trim().isEmpty()) {
RWST8K = Byte.parseByte(s);
} else {
RWST8K = Byte.MIN_VALUE;
}
}

protected final void initRWST8KM(String s) {
if (!s.trim().isEmpty()) {
RWST8KM = Byte.parseByte(s);
} else {
RWST8KM = Byte.MIN_VALUE;
}
}

protected final void initRWST8L(String s) {
if (!s.trim().isEmpty()) {
RWST8L = Byte.parseByte(s);
} else {
RWST8L = Byte.MIN_VALUE;
}
}

protected final void initRWST8M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST8M = false;
} else {
RWST8M = true;
}
}
}

protected final void initRWST8N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST8N = false;
} else {
RWST8N = true;
}
}
}

protected final void initRWST8O(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST8O = false;
} else {
RWST8O = true;
}
}
}

protected final void initRWST8P(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST8P = false;
} else {
RWST8P = true;
}
}
}

protected final void initRWST8Q(String s) {
if (!s.trim().isEmpty()) {
RWST8Q = Byte.parseByte(s);
} else {
RWST8Q = Byte.MIN_VALUE;
}
}

protected final void initRWST8R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST8R = false;
} else {
RWST8R = true;
}
}
}

protected final void initRWST8S(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST8S = false;
} else {
RWST8S = true;
}
}
}

protected final void initRWST8T(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST8T = false;
} else {
RWST8T = true;
}
}
}

protected final void initRWST95A(String s) {
if (!s.trim().isEmpty()) {
RWST95A = Byte.parseByte(s);
} else {
RWST95A = Byte.MIN_VALUE;
}
}

protected final void initRWST95B(String s) {
if (!s.trim().isEmpty()) {
RWST95B = Byte.parseByte(s);
} else {
RWST95B = Byte.MIN_VALUE;
}
}

protected final void initRWST95C(String s) {
if (!s.trim().isEmpty()) {
RWST95C = Byte.parseByte(s);
} else {
RWST95C = Byte.MIN_VALUE;
}
}

protected final void initRWST95D(String s) {
if (!s.trim().isEmpty()) {
RWST95D = Byte.parseByte(s);
} else {
RWST95D = Byte.MIN_VALUE;
}
}

protected final void initRWST95E(String s) {
if (!s.trim().isEmpty()) {
RWST95E = Byte.parseByte(s);
} else {
RWST95E = Byte.MIN_VALUE;
}
}

protected final void initRWST95F(String s) {
if (!s.trim().isEmpty()) {
RWST95F = Byte.parseByte(s);
} else {
RWST95F = Byte.MIN_VALUE;
}
}

protected final void initRWST95G(String s) {
if (!s.trim().isEmpty()) {
RWST95G = Byte.parseByte(s);
} else {
RWST95G = Byte.MIN_VALUE;
}
}

protected final void initRWST95H(String s) {
if (!s.trim().isEmpty()) {
RWST95H = Byte.parseByte(s);
} else {
RWST95H = Byte.MIN_VALUE;
}
}

protected final void initRWST95I(String s) {
if (!s.trim().isEmpty()) {
RWST95I = Byte.parseByte(s);
} else {
RWST95I = Byte.MIN_VALUE;
}
}

protected final void initRWST95J(String s) {
if (!s.trim().isEmpty()) {
RWST95J = Byte.parseByte(s);
} else {
RWST95J = Byte.MIN_VALUE;
}
}

protected final void initRWST95K(String s) {
if (!s.trim().isEmpty()) {
RWST95K = Byte.parseByte(s);
} else {
RWST95K = Byte.MIN_VALUE;
}
}

protected final void initRWST95L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST95L = false;
} else {
RWST95L = true;
}
}
}

protected final void initRWST95M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST95M = false;
} else {
RWST95M = true;
}
}
}

protected final void initRWST95N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST95N = false;
} else {
RWST95N = true;
}
}
}

protected final void initRWST95O(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST95O = false;
} else {
RWST95O = true;
}
}
}

protected final void initRWST95P(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST95P = false;
} else {
RWST95P = true;
}
}
}

protected final void initRWST95Q(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST95Q = false;
} else {
RWST95Q = true;
}
}
}

protected final void initRWST95R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST95R = false;
} else {
RWST95R = true;
}
}
}

protected final void initRWST95S(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST95S = false;
} else {
RWST95S = true;
}
}
}

protected final void initRWST95T(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST95T = false;
} else {
RWST95T = true;
}
}
}

protected final void initRWST9A(String s) {
if (!s.trim().isEmpty()) {
RWST9A = Byte.parseByte(s);
} else {
RWST9A = Byte.MIN_VALUE;
}
}

protected final void initRWST9AM(String s) {
if (!s.trim().isEmpty()) {
RWST9AM = Byte.parseByte(s);
} else {
RWST9AM = Byte.MIN_VALUE;
}
}

protected final void initRWST9B(String s) {
if (!s.trim().isEmpty()) {
RWST9B = Byte.parseByte(s);
} else {
RWST9B = Byte.MIN_VALUE;
}
}

protected final void initRWST9BM(String s) {
if (!s.trim().isEmpty()) {
RWST9BM = Byte.parseByte(s);
} else {
RWST9BM = Byte.MIN_VALUE;
}
}

protected final void initRWST9C(String s) {
if (!s.trim().isEmpty()) {
RWST9C = Byte.parseByte(s);
} else {
RWST9C = Byte.MIN_VALUE;
}
}

protected final void initRWST9CM(String s) {
if (!s.trim().isEmpty()) {
RWST9CM = Byte.parseByte(s);
} else {
RWST9CM = Byte.MIN_VALUE;
}
}

protected final void initRWST9D(String s) {
if (!s.trim().isEmpty()) {
RWST9D = Byte.parseByte(s);
} else {
RWST9D = Byte.MIN_VALUE;
}
}

protected final void initRWST9DM(String s) {
if (!s.trim().isEmpty()) {
RWST9DM = Byte.parseByte(s);
} else {
RWST9DM = Byte.MIN_VALUE;
}
}

protected final void initRWST9E(String s) {
if (!s.trim().isEmpty()) {
RWST9E = Byte.parseByte(s);
} else {
RWST9E = Byte.MIN_VALUE;
}
}

protected final void initRWST9EM(String s) {
if (!s.trim().isEmpty()) {
RWST9EM = Byte.parseByte(s);
} else {
RWST9EM = Byte.MIN_VALUE;
}
}

protected final void initRWST9F(String s) {
if (!s.trim().isEmpty()) {
RWST9F = Byte.parseByte(s);
} else {
RWST9F = Byte.MIN_VALUE;
}
}

protected final void initRWST9FM(String s) {
if (!s.trim().isEmpty()) {
RWST9FM = Byte.parseByte(s);
} else {
RWST9FM = Byte.MIN_VALUE;
}
}

protected final void initRWST9G(String s) {
if (!s.trim().isEmpty()) {
RWST9G = Byte.parseByte(s);
} else {
RWST9G = Byte.MIN_VALUE;
}
}

protected final void initRWST9GM(String s) {
if (!s.trim().isEmpty()) {
RWST9GM = Byte.parseByte(s);
} else {
RWST9GM = Byte.MIN_VALUE;
}
}

protected final void initRWST9H(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST9H = false;
} else {
RWST9H = true;
}
}
}

protected final void initRWST9HM(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST9HM = false;
} else {
RWST9HM = true;
}
}
}

protected final void initRWST9I(String s) {
if (!s.trim().isEmpty()) {
RWST9I = Byte.parseByte(s);
} else {
RWST9I = Byte.MIN_VALUE;
}
}

protected final void initRWST9IM(String s) {
if (!s.trim().isEmpty()) {
RWST9IM = Byte.parseByte(s);
} else {
RWST9IM = Byte.MIN_VALUE;
}
}

protected final void initRWST9J(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST9J = false;
} else {
RWST9J = true;
}
}
}

protected final void initRWST9JM(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST9JM = false;
} else {
RWST9JM = true;
}
}
}

protected final void initRWST9K(String s) {
if (!s.trim().isEmpty()) {
RWST9K = Byte.parseByte(s);
} else {
RWST9K = Byte.MIN_VALUE;
}
}

protected final void initRWST9KM(String s) {
if (!s.trim().isEmpty()) {
RWST9KM = Byte.parseByte(s);
} else {
RWST9KM = Byte.MIN_VALUE;
}
}

protected final void initRWST9L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST9L = false;
} else {
RWST9L = true;
}
}
}

protected final void initRWST9M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST9M = false;
} else {
RWST9M = true;
}
}
}

protected final void initRWST9N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST9N = false;
} else {
RWST9N = true;
}
}
}

protected final void initRWST9O(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST9O = false;
} else {
RWST9O = true;
}
}
}

protected final void initRWST9P(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST9P = false;
} else {
RWST9P = true;
}
}
}

protected final void initRWST9Q(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST9Q = false;
} else {
RWST9Q = true;
}
}
}

protected final void initRWST9R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST9R = false;
} else {
RWST9R = true;
}
}
}

protected final void initRWST9S(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST9S = false;
} else {
RWST9S = true;
}
}
}

protected final void initRWST9T(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWST9T = false;
} else {
RWST9T = true;
}
}
}

protected final void initRWSTF1(String s) {
if (!s.trim().isEmpty()) {
RWSTF1 = Byte.parseByte(s);
} else {
RWSTF1 = Byte.MIN_VALUE;
}
}

protected final void initRWSTF1M(String s) {
if (!s.trim().isEmpty()) {
RWSTF1M = Byte.parseByte(s);
} else {
RWSTF1M = Byte.MIN_VALUE;
}
}

protected final void initRWSTF2(String s) {
if (!s.trim().isEmpty()) {
RWSTF2 = Byte.parseByte(s);
} else {
RWSTF2 = Byte.MIN_VALUE;
}
}

protected final void initRWSTF2M(String s) {
if (!s.trim().isEmpty()) {
RWSTF2M = Byte.parseByte(s);
} else {
RWSTF2M = Byte.MIN_VALUE;
}
}

protected final void initRWSTF3(String s) {
if (!s.trim().isEmpty()) {
RWSTF3 = Byte.parseByte(s);
} else {
RWSTF3 = Byte.MIN_VALUE;
}
}

protected final void initRWSTF3M(String s) {
if (!s.trim().isEmpty()) {
RWSTF3M = Byte.parseByte(s);
} else {
RWSTF3M = Byte.MIN_VALUE;
}
}

protected final void initRWSTF4(String s) {
if (!s.trim().isEmpty()) {
RWSTF4 = Byte.parseByte(s);
} else {
RWSTF4 = Byte.MIN_VALUE;
}
}

protected final void initRWSTF4M(String s) {
if (!s.trim().isEmpty()) {
RWSTF4M = Byte.parseByte(s);
} else {
RWSTF4M = Byte.MIN_VALUE;
}
}

protected final void initRWSTF5(String s) {
if (!s.trim().isEmpty()) {
RWSTF5 = Byte.parseByte(s);
} else {
RWSTF5 = Byte.MIN_VALUE;
}
}

protected final void initRWSTF51M(String s) {
if (!s.trim().isEmpty()) {
RWSTF51M = Byte.parseByte(s);
} else {
RWSTF51M = Byte.MIN_VALUE;
}
}

protected final void initRWSTF52M(String s) {
if (!s.trim().isEmpty()) {
RWSTF52M = Byte.parseByte(s);
} else {
RWSTF52M = Byte.MIN_VALUE;
}
}

protected final void initRWSTF53M(String s) {
if (!s.trim().isEmpty()) {
RWSTF53M = Byte.parseByte(s);
} else {
RWSTF53M = Byte.MIN_VALUE;
}
}

protected final void initRWSTF54M(String s) {
if (!s.trim().isEmpty()) {
RWSTF54M = Byte.parseByte(s);
} else {
RWSTF54M = Byte.MIN_VALUE;
}
}

protected final void initRWSTF56M(String s) {
if (!s.trim().isEmpty()) {
RWSTF56M = Byte.parseByte(s);
} else {
RWSTF56M = Byte.MIN_VALUE;
}
}

protected final void initRWSTF5M(String s) {
if (!s.trim().isEmpty()) {
RWSTF5M = Byte.parseByte(s);
} else {
RWSTF5M = Byte.MIN_VALUE;
}
}

protected final void initRWSTF6(String s) {
if (!s.trim().isEmpty()) {
RWSTF6 = Byte.parseByte(s);
} else {
RWSTF6 = Byte.MIN_VALUE;
}
}

protected final void initRWSTF6M(String s) {
if (!s.trim().isEmpty()) {
RWSTF6M = Byte.parseByte(s);
} else {
RWSTF6M = Byte.MIN_VALUE;
}
}

protected final void initRWSTF7(String s) {
if (!s.trim().isEmpty()) {
RWSTF7 = Byte.parseByte(s);
} else {
RWSTF7 = Byte.MIN_VALUE;
}
}

protected final void initRWSTF7M(String s) {
if (!s.trim().isEmpty()) {
RWSTF7M = Byte.parseByte(s);
} else {
RWSTF7M = Byte.MIN_VALUE;
}
}

protected final void initRWSTF8(String s) {
if (!s.trim().isEmpty()) {
RWSTF8 = Byte.parseByte(s);
} else {
RWSTF8 = Byte.MIN_VALUE;
}
}

protected final void initRWSTF85M(String s) {
if (!s.trim().isEmpty()) {
RWSTF85M = Byte.parseByte(s);
} else {
RWSTF85M = Byte.MIN_VALUE;
}
}

protected final void initRWSTF8M(String s) {
if (!s.trim().isEmpty()) {
RWSTF8M = Byte.parseByte(s);
} else {
RWSTF8M = Byte.MIN_VALUE;
}
}

protected final void initRWSTF9(String s) {
if (!s.trim().isEmpty()) {
RWSTF9 = Byte.parseByte(s);
} else {
RWSTF9 = Byte.MIN_VALUE;
}
}

protected final void initRWSTF95(String s) {
if (!s.trim().isEmpty()) {
RWSTF95 = Byte.parseByte(s);
} else {
RWSTF95 = Byte.MIN_VALUE;
}
}

protected final void initRWSTF9M(String s) {
if (!s.trim().isEmpty()) {
RWSTF9M = Byte.parseByte(s);
} else {
RWSTF9M = Byte.MIN_VALUE;
}
}

protected final void initRWSTI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI = false;
} else {
RWSTI = true;
}
}
}

protected final void initRWSTI10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI10 = false;
} else {
RWSTI10 = true;
}
}
}

protected final void initRWSTI11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI11 = false;
} else {
RWSTI11 = true;
}
}
}

protected final void initRWSTI12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI12 = false;
} else {
RWSTI12 = true;
}
}
}

protected final void initRWSTI13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI13 = false;
} else {
RWSTI13 = true;
}
}
}

protected final void initRWSTI14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI14 = false;
} else {
RWSTI14 = true;
}
}
}

protected final void initRWSTI15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI15 = false;
} else {
RWSTI15 = true;
}
}
}

protected final void initRWSTI16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI16 = false;
} else {
RWSTI16 = true;
}
}
}

protected final void initRWSTI17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI17 = false;
} else {
RWSTI17 = true;
}
}
}

protected final void initRWSTI18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI18 = false;
} else {
RWSTI18 = true;
}
}
}

protected final void initRWSTI19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI19 = false;
} else {
RWSTI19 = true;
}
}
}

protected final void initRWSTI2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI2 = false;
} else {
RWSTI2 = true;
}
}
}

protected final void initRWSTI20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI20 = false;
} else {
RWSTI20 = true;
}
}
}

protected final void initRWSTI3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI3 = false;
} else {
RWSTI3 = true;
}
}
}

protected final void initRWSTI4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI4 = false;
} else {
RWSTI4 = true;
}
}
}

protected final void initRWSTI5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI5 = false;
} else {
RWSTI5 = true;
}
}
}

protected final void initRWSTI6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI6 = false;
} else {
RWSTI6 = true;
}
}
}

protected final void initRWSTI7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI7 = false;
} else {
RWSTI7 = true;
}
}
}

protected final void initRWSTI8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI8 = false;
} else {
RWSTI8 = true;
}
}
}

protected final void initRWSTI9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
RWSTI9 = false;
} else {
RWSTI9 = true;
}
}
}

protected final void initSAMPSTA(String s) {
if (!s.trim().isEmpty()) {
SAMPSTA = Byte.parseByte(s);
} else {
SAMPSTA = Byte.MIN_VALUE;
}
}

protected final void initSCABNLC(String s) {
if (!s.trim().isEmpty()) {
SCABNLC = Byte.parseByte(s);
} else {
SCABNLC = Byte.MIN_VALUE;
}
}

protected final void initSCABNP(String s) {
if (!s.trim().isEmpty()) {
SCABNP = Double.parseDouble(s);
} else {
SCABNP = Double.NaN;
}
}

protected final void initSCABNSC(String s) {
if (!s.trim().isEmpty()) {
SCABNSC = Byte.parseByte(s);
} else {
SCABNSC = Byte.MIN_VALUE;
}
}

protected final void initSCABSLC(String s) {
if (!s.trim().isEmpty()) {
SCABSLC = Byte.parseByte(s);
} else {
SCABSLC = Byte.MIN_VALUE;
}
}

protected final void initSCABSP(String s) {
if (!s.trim().isEmpty()) {
SCABSP = Double.parseDouble(s);
} else {
SCABSP = Double.NaN;
}
}

protected final void initSCABSSC(String s) {
if (!s.trim().isEmpty()) {
SCABSSC = Byte.parseByte(s);
} else {
SCABSSC = Byte.MIN_VALUE;
}
}

protected final void initSCACTA(String s) {
if (!s.trim().isEmpty()) {
SCACTA = Byte.parseByte(s);
} else {
SCACTA = Byte.MIN_VALUE;
}
}

protected final void initSCACTB(String s) {
if (!s.trim().isEmpty()) {
SCACTB = Byte.parseByte(s);
} else {
SCACTB = Byte.MIN_VALUE;
}
}

protected final void initSCACTC(String s) {
if (!s.trim().isEmpty()) {
SCACTC = Byte.parseByte(s);
} else {
SCACTC = Byte.MIN_VALUE;
}
}

protected final void initSCACTD(String s) {
if (!s.trim().isEmpty()) {
SCACTD = Byte.parseByte(s);
} else {
SCACTD = Byte.MIN_VALUE;
}
}

protected final void initSCAKO(String s) {
if (!s.trim().isEmpty()) {
SCAKO = Byte.parseByte(s);
} else {
SCAKO = Byte.MIN_VALUE;
}
}

protected final void initSCAL7A(String s) {
if (!s.trim().isEmpty()) {
SCAL7A = Byte.parseByte(s);
} else {
SCAL7A = Byte.MIN_VALUE;
}
}

protected final void initSCAL7B(String s) {
if (!s.trim().isEmpty()) {
SCAL7B = Byte.parseByte(s);
} else {
SCAL7B = Byte.MIN_VALUE;
}
}

protected final void initSCAPOPG(String s) {
if (!s.trim().isEmpty()) {
SCAPOPG = Byte.parseByte(s);
} else {
SCAPOPG = Byte.MIN_VALUE;
}
}

protected final void initSCASHER(String s) {
if (!s.trim().isEmpty()) {
SCASHER = Byte.parseByte(s);
} else {
SCASHER = Byte.MIN_VALUE;
}
}

protected final void initSCASPIR(String s) {
if (!s.trim().isEmpty()) {
SCASPIR = Byte.parseByte(s);
} else {
SCASPIR = Byte.MIN_VALUE;
}
}

protected final void initSCAWIN(String s) {
if (!s.trim().isEmpty()) {
SCAWIN = Byte.parseByte(s);
} else {
SCAWIN = Byte.MIN_VALUE;
}
}

protected final void initSCDCA(String s) {
if (!s.trim().isEmpty()) {
SCDCA = Byte.parseByte(s);
} else {
SCDCA = Byte.MIN_VALUE;
}
}

protected final void initSCDCC(String s) {
if (!s.trim().isEmpty()) {
SCDCC = Byte.parseByte(s);
} else {
SCDCC = Byte.MIN_VALUE;
}
}

protected final void initSCDCD(String s) {
if (!s.trim().isEmpty()) {
SCDCD = Byte.parseByte(s);
} else {
SCDCD = Byte.MIN_VALUE;
}
}

protected final void initSCDCE(String s) {
if (!s.trim().isEmpty()) {
SCDCE = Byte.parseByte(s);
} else {
SCDCE = Byte.MIN_VALUE;
}
}

protected final void initSCDCG(String s) {
if (!s.trim().isEmpty()) {
SCDCG = Byte.parseByte(s);
} else {
SCDCG = Byte.MIN_VALUE;
}
}

protected final void initSCDRI01(String s) {
if (!s.trim().isEmpty()) {
SCDRI01 = Byte.parseByte(s);
} else {
SCDRI01 = Byte.MIN_VALUE;
}
}

protected final void initSCDRI02(String s) {
if (!s.trim().isEmpty()) {
SCDRI02 = Byte.parseByte(s);
} else {
SCDRI02 = Byte.MIN_VALUE;
}
}

protected final void initSCDRI03(String s) {
if (!s.trim().isEmpty()) {
SCDRI03 = Byte.parseByte(s);
} else {
SCDRI03 = Byte.MIN_VALUE;
}
}

protected final void initSCDRI04(String s) {
if (!s.trim().isEmpty()) {
SCDRI04 = Byte.parseByte(s);
} else {
SCDRI04 = Byte.MIN_VALUE;
}
}

protected final void initSCDRI05(String s) {
if (!s.trim().isEmpty()) {
SCDRI05 = Byte.parseByte(s);
} else {
SCDRI05 = Byte.MIN_VALUE;
}
}

protected final void initSCDRI06(String s) {
if (!s.trim().isEmpty()) {
SCDRI06 = Byte.parseByte(s);
} else {
SCDRI06 = Byte.MIN_VALUE;
}
}

protected final void initSCDRI07(String s) {
if (!s.trim().isEmpty()) {
SCDRI07 = Byte.parseByte(s);
} else {
SCDRI07 = Byte.MIN_VALUE;
}
}

protected final void initSCEMPL(String s) {
if (!s.trim().isEmpty()) {
SCEMPL = Byte.parseByte(s);
} else {
SCEMPL = Byte.MIN_VALUE;
}
}

protected final void initSCFAMH(String s) {
if (!s.trim().isEmpty()) {
SCFAMH = Byte.parseByte(s);
} else {
SCFAMH = Byte.MIN_VALUE;
}
}

protected final void initSCFAMM(String s) {
if (!s.trim().isEmpty()) {
SCFAMM = Byte.parseByte(s);
} else {
SCFAMM = Byte.MIN_VALUE;
}
}

protected final void initSCFEELA(String s) {
if (!s.trim().isEmpty()) {
SCFEELA = Byte.parseByte(s);
} else {
SCFEELA = Byte.MIN_VALUE;
}
}

protected final void initSCFEELB(String s) {
if (!s.trim().isEmpty()) {
SCFEELB = Byte.parseByte(s);
} else {
SCFEELB = Byte.MIN_VALUE;
}
}

protected final void initSCFEELC(String s) {
if (!s.trim().isEmpty()) {
SCFEELC = Byte.parseByte(s);
} else {
SCFEELC = Byte.MIN_VALUE;
}
}

protected final void initSCFEELD(String s) {
if (!s.trim().isEmpty()) {
SCFEELD = Byte.parseByte(s);
} else {
SCFEELD = Byte.MIN_VALUE;
}
}

protected final void initSCFEELE(String s) {
if (!s.trim().isEmpty()) {
SCFEELE = Byte.parseByte(s);
} else {
SCFEELE = Byte.MIN_VALUE;
}
}

protected final void initSCFRDM(String s) {
if (!s.trim().isEmpty()) {
SCFRDM = Byte.parseByte(s);
} else {
SCFRDM = Byte.MIN_VALUE;
}
}

protected final void initSCFRUIA(String s) {
if (!s.trim().isEmpty()) {
SCFRUIA = Byte.parseByte(s);
} else {
SCFRUIA = Byte.MIN_VALUE;
}
}

protected final void initSCFRUIB(String s) {
if (!s.trim().isEmpty()) {
SCFRUIB = Byte.parseByte(s);
} else {
SCFRUIB = Byte.MIN_VALUE;
}
}

protected final void initSCFRUIC(String s) {
if (!s.trim().isEmpty()) {
SCFRUIC = Byte.parseByte(s);
} else {
SCFRUIC = Byte.MIN_VALUE;
}
}

protected final void initSCFRUID(String s) {
if (!s.trim().isEmpty()) {
SCFRUID = Byte.parseByte(s);
} else {
SCFRUID = Byte.MIN_VALUE;
}
}

protected final void initSCFRUIE(String s) {
if (!s.trim().isEmpty()) {
SCFRUIE = Byte.parseByte(s);
} else {
SCFRUIE = Byte.MIN_VALUE;
}
}

protected final void initSCFRUIF(String s) {
if (!s.trim().isEmpty()) {
SCFRUIF = Byte.parseByte(s);
} else {
SCFRUIF = Byte.MIN_VALUE;
}
}

protected final void initSCFRUIG(String s) {
if (!s.trim().isEmpty()) {
SCFRUIG = Byte.parseByte(s);
} else {
SCFRUIG = Byte.MIN_VALUE;
}
}

protected final void initSCFRUIH(String s) {
if (!s.trim().isEmpty()) {
SCFRUIH = Byte.parseByte(s);
} else {
SCFRUIH = Byte.MIN_VALUE;
}
}

protected final void initSCFRUII(String s) {
if (!s.trim().isEmpty()) {
SCFRUII = Byte.parseByte(s);
} else {
SCFRUII = Byte.MIN_VALUE;
}
}

protected final void initSCGHQA(String s) {
if (!s.trim().isEmpty()) {
SCGHQA = Byte.parseByte(s);
} else {
SCGHQA = Byte.MIN_VALUE;
}
}

protected final void initSCGHQB(String s) {
if (!s.trim().isEmpty()) {
SCGHQB = Byte.parseByte(s);
} else {
SCGHQB = Byte.MIN_VALUE;
}
}

protected final void initSCGHQC(String s) {
if (!s.trim().isEmpty()) {
SCGHQC = Byte.parseByte(s);
} else {
SCGHQC = Byte.MIN_VALUE;
}
}

protected final void initSCGHQD(String s) {
if (!s.trim().isEmpty()) {
SCGHQD = Byte.parseByte(s);
} else {
SCGHQD = Byte.MIN_VALUE;
}
}

protected final void initSCGHQE(String s) {
if (!s.trim().isEmpty()) {
SCGHQE = Byte.parseByte(s);
} else {
SCGHQE = Byte.MIN_VALUE;
}
}

protected final void initSCGHQF(String s) {
if (!s.trim().isEmpty()) {
SCGHQF = Byte.parseByte(s);
} else {
SCGHQF = Byte.MIN_VALUE;
}
}

protected final void initSCGHQG(String s) {
if (!s.trim().isEmpty()) {
SCGHQG = Byte.parseByte(s);
} else {
SCGHQG = Byte.MIN_VALUE;
}
}

protected final void initSCGHQH(String s) {
if (!s.trim().isEmpty()) {
SCGHQH = Byte.parseByte(s);
} else {
SCGHQH = Byte.MIN_VALUE;
}
}

protected final void initSCGHQI(String s) {
if (!s.trim().isEmpty()) {
SCGHQI = Byte.parseByte(s);
} else {
SCGHQI = Byte.MIN_VALUE;
}
}

protected final void initSCGHQJ(String s) {
if (!s.trim().isEmpty()) {
SCGHQJ = Byte.parseByte(s);
} else {
SCGHQJ = Byte.MIN_VALUE;
}
}

protected final void initSCGHQK(String s) {
if (!s.trim().isEmpty()) {
SCGHQK = Byte.parseByte(s);
} else {
SCGHQK = Byte.MIN_VALUE;
}
}

protected final void initSCGHQL(String s) {
if (!s.trim().isEmpty()) {
SCGHQL = Byte.parseByte(s);
} else {
SCGHQL = Byte.MIN_VALUE;
}
}

protected final void initSCLADDC(String s) {
if (!s.trim().isEmpty()) {
SCLADDC = Byte.parseByte(s);
} else {
SCLADDC = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEA(String s) {
if (!s.trim().isEmpty()) {
SCLIFEA = Byte.parseByte(s);
} else {
SCLIFEA = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEB(String s) {
if (!s.trim().isEmpty()) {
SCLIFEB = Byte.parseByte(s);
} else {
SCLIFEB = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEC(String s) {
if (!s.trim().isEmpty()) {
SCLIFEC = Byte.parseByte(s);
} else {
SCLIFEC = Byte.MIN_VALUE;
}
}

protected final void initSCLIFED(String s) {
if (!s.trim().isEmpty()) {
SCLIFED = Byte.parseByte(s);
} else {
SCLIFED = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEE(String s) {
if (!s.trim().isEmpty()) {
SCLIFEE = Byte.parseByte(s);
} else {
SCLIFEE = Byte.MIN_VALUE;
}
}

protected final void initSCMOREA(String s) {
if (!s.trim().isEmpty()) {
SCMOREA = Byte.parseByte(s);
} else {
SCMOREA = Byte.MIN_VALUE;
}
}

protected final void initSCMOREB(String s) {
if (!s.trim().isEmpty()) {
SCMOREB = Byte.parseByte(s);
} else {
SCMOREB = Byte.MIN_VALUE;
}
}

protected final void initSCMOREC(String s) {
if (!s.trim().isEmpty()) {
SCMOREC = Byte.parseByte(s);
} else {
SCMOREC = Byte.MIN_VALUE;
}
}

protected final void initSCMORED(String s) {
if (!s.trim().isEmpty()) {
SCMORED = Byte.parseByte(s);
} else {
SCMORED = Byte.MIN_VALUE;
}
}

protected final void initSCORG01(String s) {
if (!s.trim().isEmpty()) {
SCORG01 = Byte.parseByte(s);
} else {
SCORG01 = Byte.MIN_VALUE;
}
}

protected final void initSCORG02(String s) {
if (!s.trim().isEmpty()) {
SCORG02 = Byte.parseByte(s);
} else {
SCORG02 = Byte.MIN_VALUE;
}
}

protected final void initSCORG03(String s) {
if (!s.trim().isEmpty()) {
SCORG03 = Byte.parseByte(s);
} else {
SCORG03 = Byte.MIN_VALUE;
}
}

protected final void initSCORG04(String s) {
if (!s.trim().isEmpty()) {
SCORG04 = Byte.parseByte(s);
} else {
SCORG04 = Byte.MIN_VALUE;
}
}

protected final void initSCORG05(String s) {
if (!s.trim().isEmpty()) {
SCORG05 = Byte.parseByte(s);
} else {
SCORG05 = Byte.MIN_VALUE;
}
}

protected final void initSCORG06(String s) {
if (!s.trim().isEmpty()) {
SCORG06 = Byte.parseByte(s);
} else {
SCORG06 = Byte.MIN_VALUE;
}
}

protected final void initSCORG07(String s) {
if (!s.trim().isEmpty()) {
SCORG07 = Byte.parseByte(s);
} else {
SCORG07 = Byte.MIN_VALUE;
}
}

protected final void initSCORG08(String s) {
if (!s.trim().isEmpty()) {
SCORG08 = Byte.parseByte(s);
} else {
SCORG08 = Byte.MIN_VALUE;
}
}

protected final void initSCORG09(String s) {
if (!s.trim().isEmpty()) {
SCORG09 = Byte.parseByte(s);
} else {
SCORG09 = Byte.MIN_VALUE;
}
}

protected final void initSCPT01(String s) {
if (!s.trim().isEmpty()) {
SCPT01 = Byte.parseByte(s);
} else {
SCPT01 = Byte.MIN_VALUE;
}
}

protected final void initSCPT02(String s) {
if (!s.trim().isEmpty()) {
SCPT02 = Byte.parseByte(s);
} else {
SCPT02 = Byte.MIN_VALUE;
}
}

protected final void initSCPT03(String s) {
if (!s.trim().isEmpty()) {
SCPT03 = Byte.parseByte(s);
} else {
SCPT03 = Byte.MIN_VALUE;
}
}

protected final void initSCPT04(String s) {
if (!s.trim().isEmpty()) {
SCPT04 = Byte.parseByte(s);
} else {
SCPT04 = Byte.MIN_VALUE;
}
}

protected final void initSCPT05(String s) {
if (!s.trim().isEmpty()) {
SCPT05 = Byte.parseByte(s);
} else {
SCPT05 = Byte.MIN_VALUE;
}
}

protected final void initSCPT06(String s) {
if (!s.trim().isEmpty()) {
SCPT06 = Byte.parseByte(s);
} else {
SCPT06 = Byte.MIN_VALUE;
}
}

protected final void initSCPT07(String s) {
if (!s.trim().isEmpty()) {
SCPT07 = Byte.parseByte(s);
} else {
SCPT07 = Byte.MIN_VALUE;
}
}

protected final void initSCPT08(String s) {
if (!s.trim().isEmpty()) {
SCPT08 = Byte.parseByte(s);
} else {
SCPT08 = Byte.MIN_VALUE;
}
}

protected final void initSCPT09(String s) {
if (!s.trim().isEmpty()) {
SCPT09 = Byte.parseByte(s);
} else {
SCPT09 = Byte.MIN_VALUE;
}
}

protected final void initSCPTR(String s) {
if (!s.trim().isEmpty()) {
SCPTR = Byte.parseByte(s);
} else {
SCPTR = Byte.MIN_VALUE;
}
}

protected final void initSCPTRA(String s) {
if (!s.trim().isEmpty()) {
SCPTRA = Byte.parseByte(s);
} else {
SCPTRA = Byte.MIN_VALUE;
}
}

protected final void initSCPTRB(String s) {
if (!s.trim().isEmpty()) {
SCPTRB = Byte.parseByte(s);
} else {
SCPTRB = Byte.MIN_VALUE;
}
}

protected final void initSCPTRC(String s) {
if (!s.trim().isEmpty()) {
SCPTRC = Byte.parseByte(s);
} else {
SCPTRC = Byte.MIN_VALUE;
}
}

protected final void initSCPTRD(String s) {
if (!s.trim().isEmpty()) {
SCPTRD = Byte.parseByte(s);
} else {
SCPTRD = Byte.MIN_VALUE;
}
}

protected final void initSCPTRE(String s) {
if (!s.trim().isEmpty()) {
SCPTRE = Byte.parseByte(s);
} else {
SCPTRE = Byte.MIN_VALUE;
}
}

protected final void initSCPTRF(String s) {
if (!s.trim().isEmpty()) {
SCPTRF = Byte.parseByte(s);
} else {
SCPTRF = Byte.MIN_VALUE;
}
}

protected final void initSCPTRG(String s) {
if (!s.trim().isEmpty()) {
SCPTRG = Byte.parseByte(s);
} else {
SCPTRG = Byte.MIN_VALUE;
}
}

protected final void initSCREC(String s) {
if (!s.trim().isEmpty()) {
SCREC = Byte.parseByte(s);
} else {
SCREC = Byte.MIN_VALUE;
}
}

protected final void initSCRTAGE(String s) {
if (!s.trim().isEmpty()) {
SCRTAGE = Short.parseShort(s);
} else {
SCRTAGE = Short.MIN_VALUE;
}
}

protected final void initSCSCA(String s) {
if (!s.trim().isEmpty()) {
SCSCA = Byte.parseByte(s);
} else {
SCSCA = Byte.MIN_VALUE;
}
}

protected final void initSCSCB(String s) {
if (!s.trim().isEmpty()) {
SCSCB = Byte.parseByte(s);
} else {
SCSCB = Byte.MIN_VALUE;
}
}

protected final void initSCSCC(String s) {
if (!s.trim().isEmpty()) {
SCSCC = Byte.parseByte(s);
} else {
SCSCC = Byte.MIN_VALUE;
}
}

protected final void initSCSCD(String s) {
if (!s.trim().isEmpty()) {
SCSCD = Byte.parseByte(s);
} else {
SCSCD = Byte.MIN_VALUE;
}
}

protected final void initSCSCE(String s) {
if (!s.trim().isEmpty()) {
SCSCE = Byte.parseByte(s);
} else {
SCSCE = Byte.MIN_VALUE;
}
}

protected final void initSCSCF(String s) {
if (!s.trim().isEmpty()) {
SCSCF = Byte.parseByte(s);
} else {
SCSCF = Byte.MIN_VALUE;
}
}

protected final void initSCSCG(String s) {
if (!s.trim().isEmpty()) {
SCSCG = Byte.parseByte(s);
} else {
SCSCG = Byte.MIN_VALUE;
}
}

protected final void initSCSCH(String s) {
if (!s.trim().isEmpty()) {
SCSCH = Byte.parseByte(s);
} else {
SCSCH = Byte.MIN_VALUE;
}
}

protected final void initSCSCI(String s) {
if (!s.trim().isEmpty()) {
SCSCI = Byte.parseByte(s);
} else {
SCSCI = Byte.MIN_VALUE;
}
}

protected final void initSCVEGA(String s) {
if (!s.trim().isEmpty()) {
SCVEGA = Byte.parseByte(s);
} else {
SCVEGA = Byte.MIN_VALUE;
}
}

protected final void initSCVEGB(String s) {
if (!s.trim().isEmpty()) {
SCVEGB = Byte.parseByte(s);
} else {
SCVEGB = Byte.MIN_VALUE;
}
}

protected final void initSCVEGC(String s) {
if (!s.trim().isEmpty()) {
SCVEGC = Byte.parseByte(s);
} else {
SCVEGC = Byte.MIN_VALUE;
}
}

protected final void initSCVEGD(String s) {
if (!s.trim().isEmpty()) {
SCVEGD = Byte.parseByte(s);
} else {
SCVEGD = Byte.MIN_VALUE;
}
}

protected final void initSCWORKA(String s) {
if (!s.trim().isEmpty()) {
SCWORKA = Byte.parseByte(s);
} else {
SCWORKA = Byte.MIN_VALUE;
}
}

protected final void initSCWORKB(String s) {
if (!s.trim().isEmpty()) {
SCWORKB = Byte.parseByte(s);
} else {
SCWORKB = Byte.MIN_VALUE;
}
}

protected final void initSCWORKC(String s) {
if (!s.trim().isEmpty()) {
SCWORKC = Byte.parseByte(s);
} else {
SCWORKC = Byte.MIN_VALUE;
}
}

protected final void initSCWORKD(String s) {
if (!s.trim().isEmpty()) {
SCWORKD = Byte.parseByte(s);
} else {
SCWORKD = Byte.MIN_VALUE;
}
}

protected final void initSCWORKE(String s) {
if (!s.trim().isEmpty()) {
SCWORKE = Byte.parseByte(s);
} else {
SCWORKE = Byte.MIN_VALUE;
}
}

protected final void initSCWORKF(String s) {
if (!s.trim().isEmpty()) {
SCWORKF = Byte.parseByte(s);
} else {
SCWORKF = Byte.MIN_VALUE;
}
}

protected final void initSCWORKG(String s) {
if (!s.trim().isEmpty()) {
SCWORKG = Byte.parseByte(s);
} else {
SCWORKG = Byte.MIN_VALUE;
}
}

protected final void initSCWORKH(String s) {
if (!s.trim().isEmpty()) {
SCWORKH = Byte.parseByte(s);
} else {
SCWORKH = Byte.MIN_VALUE;
}
}

protected final void initSCWORKI(String s) {
if (!s.trim().isEmpty()) {
SCWORKI = Byte.parseByte(s);
} else {
SCWORKI = Byte.MIN_VALUE;
}
}

protected final void initSCWORKJ(String s) {
if (!s.trim().isEmpty()) {
SCWORKJ = Byte.parseByte(s);
} else {
SCWORKJ = Byte.MIN_VALUE;
}
}

protected final void initSCWORKK(String s) {
if (!s.trim().isEmpty()) {
SCWORKK = Byte.parseByte(s);
} else {
SCWORKK = Byte.MIN_VALUE;
}
}

protected final void initSCWORKL(String s) {
if (!s.trim().isEmpty()) {
SCWORKL = Byte.parseByte(s);
} else {
SCWORKL = Byte.MIN_VALUE;
}
}

protected final void initSHACHE1(String s) {
if (!s.trim().isEmpty()) {
SHACHE1 = Byte.parseByte(s);
} else {
SHACHE1 = Byte.MIN_VALUE;
}
}

protected final void initSHACHE2(String s) {
if (!s.trim().isEmpty()) {
SHACHE2 = Byte.parseByte(s);
} else {
SHACHE2 = Byte.MIN_VALUE;
}
}

protected final void initSHACHE3(String s) {
if (!s.trim().isEmpty()) {
SHACHE3 = Byte.parseByte(s);
} else {
SHACHE3 = Byte.MIN_VALUE;
}
}

protected final void initSHACHE4(String s) {
if (!s.trim().isEmpty()) {
SHACHE4 = Byte.parseByte(s);
} else {
SHACHE4 = Byte.MIN_VALUE;
}
}

protected final void initSHMEM1(String s) {
if (!s.trim().isEmpty()) {
SHMEM1 = Byte.parseByte(s);
} else {
SHMEM1 = Byte.MIN_VALUE;
}
}

protected final void initSHMEM2(String s) {
if (!s.trim().isEmpty()) {
SHMEM2 = Byte.parseByte(s);
} else {
SHMEM2 = Byte.MIN_VALUE;
}
}

protected final void initSHMEM3(String s) {
if (!s.trim().isEmpty()) {
SHMEM3 = Byte.parseByte(s);
} else {
SHMEM3 = Byte.MIN_VALUE;
}
}

protected final void initSHMEM4(String s) {
if (!s.trim().isEmpty()) {
SHMEM4 = Byte.parseByte(s);
} else {
SHMEM4 = Byte.MIN_VALUE;
}
}

protected final void initSHMOB1(String s) {
if (!s.trim().isEmpty()) {
SHMOB1 = Byte.parseByte(s);
} else {
SHMOB1 = Byte.MIN_VALUE;
}
}

protected final void initSHMOB2(String s) {
if (!s.trim().isEmpty()) {
SHMOB2 = Byte.parseByte(s);
} else {
SHMOB2 = Byte.MIN_VALUE;
}
}

protected final void initSHMOB3(String s) {
if (!s.trim().isEmpty()) {
SHMOB3 = Byte.parseByte(s);
} else {
SHMOB3 = Byte.MIN_VALUE;
}
}

protected final void initSHMOB4(String s) {
if (!s.trim().isEmpty()) {
SHMOB4 = Byte.parseByte(s);
} else {
SHMOB4 = Byte.MIN_VALUE;
}
}

protected final void initSHRESP1(String s) {
if (!s.trim().isEmpty()) {
SHRESP1 = Byte.parseByte(s);
} else {
SHRESP1 = Byte.MIN_VALUE;
}
}

protected final void initSHRESP2(String s) {
if (!s.trim().isEmpty()) {
SHRESP2 = Byte.parseByte(s);
} else {
SHRESP2 = Byte.MIN_VALUE;
}
}

protected final void initSHRESP3(String s) {
if (!s.trim().isEmpty()) {
SHRESP3 = Byte.parseByte(s);
} else {
SHRESP3 = Byte.MIN_VALUE;
}
}

protected final void initSHRESP4(String s) {
if (!s.trim().isEmpty()) {
SHRESP4 = Byte.parseByte(s);
} else {
SHRESP4 = Byte.MIN_VALUE;
}
}

protected final void initSHSAD1(String s) {
if (!s.trim().isEmpty()) {
SHSAD1 = Byte.parseByte(s);
} else {
SHSAD1 = Byte.MIN_VALUE;
}
}

protected final void initSHSAD2(String s) {
if (!s.trim().isEmpty()) {
SHSAD2 = Byte.parseByte(s);
} else {
SHSAD2 = Byte.MIN_VALUE;
}
}

protected final void initSHSAD3(String s) {
if (!s.trim().isEmpty()) {
SHSAD3 = Byte.parseByte(s);
} else {
SHSAD3 = Byte.MIN_VALUE;
}
}

protected final void initSHSAD4(String s) {
if (!s.trim().isEmpty()) {
SHSAD4 = Byte.parseByte(s);
} else {
SHSAD4 = Byte.MIN_VALUE;
}
}

protected final void initSHWAKE1(String s) {
if (!s.trim().isEmpty()) {
SHWAKE1 = Byte.parseByte(s);
} else {
SHWAKE1 = Byte.MIN_VALUE;
}
}

protected final void initSHWAKE2(String s) {
if (!s.trim().isEmpty()) {
SHWAKE2 = Byte.parseByte(s);
} else {
SHWAKE2 = Byte.MIN_VALUE;
}
}

protected final void initSHWAKE3(String s) {
if (!s.trim().isEmpty()) {
SHWAKE3 = Byte.parseByte(s);
} else {
SHWAKE3 = Byte.MIN_VALUE;
}
}

protected final void initSHWAKE4(String s) {
if (!s.trim().isEmpty()) {
SHWAKE4 = Byte.parseByte(s);
} else {
SHWAKE4 = Byte.MIN_VALUE;
}
}

protected final void initSHWORK1(String s) {
if (!s.trim().isEmpty()) {
SHWORK1 = Byte.parseByte(s);
} else {
SHWORK1 = Byte.MIN_VALUE;
}
}

protected final void initSPCARA(String s) {
if (!s.trim().isEmpty()) {
SPCARA = Byte.parseByte(s);
} else {
SPCARA = Byte.MIN_VALUE;
}
}

protected final void initSPCARB(String s) {
if (!s.trim().isEmpty()) {
SPCARB = Byte.parseByte(s);
} else {
SPCARB = Byte.MIN_VALUE;
}
}

protected final void initSPDTDT(String s) {
if (!s.trim().isEmpty()) {
SPDTDT = Byte.parseByte(s);
} else {
SPDTDT = Byte.MIN_VALUE;
}
}

protected final void initSPHOSP(String s) {
if (!s.trim().isEmpty()) {
SPHOSP = Byte.parseByte(s);
} else {
SPHOSP = Byte.MIN_VALUE;
}
}

protected final void initSPLIFT(String s) {
if (!s.trim().isEmpty()) {
SPLIFT = Byte.parseByte(s);
} else {
SPLIFT = Byte.MIN_VALUE;
}
}

protected final void initSPTAXI(String s) {
if (!s.trim().isEmpty()) {
SPTAXI = Byte.parseByte(s);
} else {
SPTAXI = Byte.MIN_VALUE;
}
}

protected final void initSPTR96(String s) {
if (!s.trim().isEmpty()) {
SPTR96 = Byte.parseByte(s);
} else {
SPTR96 = Byte.MIN_VALUE;
}
}

protected final void initSPTRB95(String s) {
if (!s.trim().isEmpty()) {
SPTRB95 = Byte.parseByte(s);
} else {
SPTRB95 = Byte.MIN_VALUE;
}
}

protected final void initSPTRBCON(String s) {
if (!s.trim().isEmpty()) {
SPTRBCON = Byte.parseByte(s);
} else {
SPTRBCON = Byte.MIN_VALUE;
}
}

protected final void initSPTRBDES(String s) {
if (!s.trim().isEmpty()) {
SPTRBDES = Byte.parseByte(s);
} else {
SPTRBDES = Byte.MIN_VALUE;
}
}

protected final void initSPTRBDIR(String s) {
if (!s.trim().isEmpty()) {
SPTRBDIR = Byte.parseByte(s);
} else {
SPTRBDIR = Byte.MIN_VALUE;
}
}

protected final void initSPTRBEXP(String s) {
if (!s.trim().isEmpty()) {
SPTRBEXP = Byte.parseByte(s);
} else {
SPTRBEXP = Byte.MIN_VALUE;
}
}

protected final void initSPTRBFEA(String s) {
if (!s.trim().isEmpty()) {
SPTRBFEA = Byte.parseByte(s);
} else {
SPTRBFEA = Byte.MIN_VALUE;
}
}

protected final void initSPTRBFRE(String s) {
if (!s.trim().isEmpty()) {
SPTRBFRE = Byte.parseByte(s);
} else {
SPTRBFRE = Byte.MIN_VALUE;
}
}

protected final void initSPTRBHEA(String s) {
if (!s.trim().isEmpty()) {
SPTRBHEA = Byte.parseByte(s);
} else {
SPTRBHEA = Byte.MIN_VALUE;
}
}

protected final void initSPTRBNEE(String s) {
if (!s.trim().isEmpty()) {
SPTRBNEE = Byte.parseByte(s);
} else {
SPTRBNEE = Byte.MIN_VALUE;
}
}

protected final void initSPTRBUNA(String s) {
if (!s.trim().isEmpty()) {
SPTRBUNA = Byte.parseByte(s);
} else {
SPTRBUNA = Byte.MIN_VALUE;
}
}

protected final void initSPTRBUNR(String s) {
if (!s.trim().isEmpty()) {
SPTRBUNR = Byte.parseByte(s);
} else {
SPTRBUNR = Byte.MIN_VALUE;
}
}

protected final void initSPTRBWAL(String s) {
if (!s.trim().isEmpty()) {
SPTRBWAL = Byte.parseByte(s);
} else {
SPTRBWAL = Byte.MIN_VALUE;
}
}

protected final void initSPTRCOM(String s) {
if (!s.trim().isEmpty()) {
SPTRCOM = Byte.parseByte(s);
} else {
SPTRCOM = Byte.MIN_VALUE;
}
}

protected final void initSPTRFAM(String s) {
if (!s.trim().isEmpty()) {
SPTRFAM = Byte.parseByte(s);
} else {
SPTRFAM = Byte.MIN_VALUE;
}
}

protected final void initSPTRHOS(String s) {
if (!s.trim().isEmpty()) {
SPTRHOS = Byte.parseByte(s);
} else {
SPTRHOS = Byte.MIN_VALUE;
}
}

protected final void initSPTRM85(String s) {
if (!s.trim().isEmpty()) {
SPTRM85 = Byte.parseByte(s);
} else {
SPTRM85 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM86(String s) {
if (!s.trim().isEmpty()) {
SPTRM86 = Byte.parseByte(s);
} else {
SPTRM86 = Byte.MIN_VALUE;
}
}

protected final void initSPTRMCON(String s) {
if (!s.trim().isEmpty()) {
SPTRMCON = Byte.parseByte(s);
} else {
SPTRMCON = Byte.MIN_VALUE;
}
}

protected final void initSPTRMDES(String s) {
if (!s.trim().isEmpty()) {
SPTRMDES = Byte.parseByte(s);
} else {
SPTRMDES = Byte.MIN_VALUE;
}
}

protected final void initSPTRMDIR(String s) {
if (!s.trim().isEmpty()) {
SPTRMDIR = Byte.parseByte(s);
} else {
SPTRMDIR = Byte.MIN_VALUE;
}
}

protected final void initSPTRMEXP(String s) {
if (!s.trim().isEmpty()) {
SPTRMEXP = Byte.parseByte(s);
} else {
SPTRMEXP = Byte.MIN_VALUE;
}
}

protected final void initSPTRMFEA(String s) {
if (!s.trim().isEmpty()) {
SPTRMFEA = Byte.parseByte(s);
} else {
SPTRMFEA = Byte.MIN_VALUE;
}
}

protected final void initSPTRMFRE(String s) {
if (!s.trim().isEmpty()) {
SPTRMFRE = Byte.parseByte(s);
} else {
SPTRMFRE = Byte.MIN_VALUE;
}
}

protected final void initSPTRMHEA(String s) {
if (!s.trim().isEmpty()) {
SPTRMHEA = Byte.parseByte(s);
} else {
SPTRMHEA = Byte.MIN_VALUE;
}
}

protected final void initSPTRMNEE(String s) {
if (!s.trim().isEmpty()) {
SPTRMNEE = Byte.parseByte(s);
} else {
SPTRMNEE = Byte.MIN_VALUE;
}
}

protected final void initSPTRMUNA(String s) {
if (!s.trim().isEmpty()) {
SPTRMUNA = Byte.parseByte(s);
} else {
SPTRMUNA = Byte.MIN_VALUE;
}
}

protected final void initSPTRMUNR(String s) {
if (!s.trim().isEmpty()) {
SPTRMUNR = Byte.parseByte(s);
} else {
SPTRMUNR = Byte.MIN_VALUE;
}
}

protected final void initSPTRMWAL(String s) {
if (!s.trim().isEmpty()) {
SPTRMWAL = Byte.parseByte(s);
} else {
SPTRMWAL = Byte.MIN_VALUE;
}
}

protected final void initSPTRTAX(String s) {
if (!s.trim().isEmpty()) {
SPTRTAX = Byte.parseByte(s);
} else {
SPTRTAX = Byte.MIN_VALUE;
}
}

protected final void initSTPENW_06(String s) {
if (!s.trim().isEmpty()) {
STPENW_06 = Double.parseDouble(s);
} else {
STPENW_06 = Double.NaN;
}
}

protected final void initSTPENW_SPA(String s) {
if (!s.trim().isEmpty()) {
STPENW_SPA = Double.parseDouble(s);
} else {
STPENW_SPA = Double.NaN;
}
}

protected final void initSWACHE1(String s) {
if (!s.trim().isEmpty()) {
SWACHE1 = Byte.parseByte(s);
} else {
SWACHE1 = Byte.MIN_VALUE;
}
}

protected final void initSWACHE2(String s) {
if (!s.trim().isEmpty()) {
SWACHE2 = Byte.parseByte(s);
} else {
SWACHE2 = Byte.MIN_VALUE;
}
}

protected final void initSWACHE3(String s) {
if (!s.trim().isEmpty()) {
SWACHE3 = Byte.parseByte(s);
} else {
SWACHE3 = Byte.MIN_VALUE;
}
}

protected final void initSWACHE4(String s) {
if (!s.trim().isEmpty()) {
SWACHE4 = Byte.parseByte(s);
} else {
SWACHE4 = Byte.MIN_VALUE;
}
}

protected final void initSWMEM1(String s) {
if (!s.trim().isEmpty()) {
SWMEM1 = Byte.parseByte(s);
} else {
SWMEM1 = Byte.MIN_VALUE;
}
}

protected final void initSWMOB1(String s) {
if (!s.trim().isEmpty()) {
SWMOB1 = Byte.parseByte(s);
} else {
SWMOB1 = Byte.MIN_VALUE;
}
}

protected final void initSWMOB2(String s) {
if (!s.trim().isEmpty()) {
SWMOB2 = Byte.parseByte(s);
} else {
SWMOB2 = Byte.MIN_VALUE;
}
}

protected final void initSWMOB3(String s) {
if (!s.trim().isEmpty()) {
SWMOB3 = Byte.parseByte(s);
} else {
SWMOB3 = Byte.MIN_VALUE;
}
}

protected final void initSWMOB4(String s) {
if (!s.trim().isEmpty()) {
SWMOB4 = Byte.parseByte(s);
} else {
SWMOB4 = Byte.MIN_VALUE;
}
}

protected final void initSWRESP1(String s) {
if (!s.trim().isEmpty()) {
SWRESP1 = Byte.parseByte(s);
} else {
SWRESP1 = Byte.MIN_VALUE;
}
}

protected final void initSWSAD1(String s) {
if (!s.trim().isEmpty()) {
SWSAD1 = Byte.parseByte(s);
} else {
SWSAD1 = Byte.MIN_VALUE;
}
}

protected final void initSWSAD2(String s) {
if (!s.trim().isEmpty()) {
SWSAD2 = Byte.parseByte(s);
} else {
SWSAD2 = Byte.MIN_VALUE;
}
}

protected final void initSWSAD3(String s) {
if (!s.trim().isEmpty()) {
SWSAD3 = Byte.parseByte(s);
} else {
SWSAD3 = Byte.MIN_VALUE;
}
}

protected final void initSWSAD4(String s) {
if (!s.trim().isEmpty()) {
SWSAD4 = Byte.parseByte(s);
} else {
SWSAD4 = Byte.MIN_VALUE;
}
}

protected final void initSWWAKE1(String s) {
if (!s.trim().isEmpty()) {
SWWAKE1 = Byte.parseByte(s);
} else {
SWWAKE1 = Byte.MIN_VALUE;
}
}

protected final void initSWWORK1(String s) {
if (!s.trim().isEmpty()) {
SWWORK1 = Byte.parseByte(s);
} else {
SWWORK1 = Byte.MIN_VALUE;
}
}

protected final void initTOTALPSC(String s) {
if (!s.trim().isEmpty()) {
TOTALPSC = Byte.parseByte(s);
} else {
TOTALPSC = Byte.MIN_VALUE;
}
}

protected final void initTOTPENW_06(String s) {
if (!s.trim().isEmpty()) {
TOTPENW_06 = Double.parseDouble(s);
} else {
TOTPENW_06 = Double.NaN;
}
}

protected final void initTOTPENW_SPA(String s) {
if (!s.trim().isEmpty()) {
TOTPENW_SPA = Double.parseDouble(s);
} else {
TOTPENW_SPA = Double.NaN;
}
}

protected final void initVERSION(String s) {
if (!s.trim().isEmpty()) {
VERSION = s;
}
}

protected final void initW3EDQUAL(String s) {
if (!s.trim().isEmpty()) {
W3EDQUAL = Byte.parseByte(s);
} else {
W3EDQUAL = Byte.MIN_VALUE;
}
}

protected final void initW3HHOUT(String s) {
if (!s.trim().isEmpty()) {
W3HHOUT = Short.parseShort(s);
} else {
W3HHOUT = Short.MIN_VALUE;
}
}

protected final void initW3INDOUT(String s) {
if (!s.trim().isEmpty()) {
W3INDOUT = Byte.parseByte(s);
} else {
W3INDOUT = Byte.MIN_VALUE;
}
}

protected final void initW3LWGT(String s) {
if (!s.trim().isEmpty()) {
W3LWGT = Double.parseDouble(s);
} else {
W3LWGT = Double.NaN;
}
}

protected final void initW3NSSEC(String s) {
if (!s.trim().isEmpty()) {
W3NSSEC = Double.parseDouble(s);
} else {
W3NSSEC = Double.NaN;
}
}

protected final void initW3NSSEC13(String s) {
if (!s.trim().isEmpty()) {
W3NSSEC13 = Double.parseDouble(s);
} else {
W3NSSEC13 = Double.NaN;
}
}

protected final void initW3NSSEC3(String s) {
if (!s.trim().isEmpty()) {
W3NSSEC3 = Byte.parseByte(s);
} else {
W3NSSEC3 = Byte.MIN_VALUE;
}
}

protected final void initW3NSSEC5(String s) {
if (!s.trim().isEmpty()) {
W3NSSEC5 = Byte.parseByte(s);
} else {
W3NSSEC5 = Byte.MIN_VALUE;
}
}

protected final void initW3NSSEC8(String s) {
if (!s.trim().isEmpty()) {
W3NSSEC8 = Byte.parseByte(s);
} else {
W3NSSEC8 = Byte.MIN_VALUE;
}
}

protected final void initW3NSSECMIS(String s) {
if (!s.trim().isEmpty()) {
W3NSSECMIS = Byte.parseByte(s);
} else {
W3NSSECMIS = Byte.MIN_VALUE;
}
}

protected final void initW3OTHERQ(String s) {
if (!s.trim().isEmpty()) {
W3OTHERQ = Byte.parseByte(s);
} else {
W3OTHERQ = Byte.MIN_VALUE;
}
}

protected final void initW3RINDOUT(String s) {
if (!s.trim().isEmpty()) {
W3RINDOUT = Short.parseShort(s);
} else {
W3RINDOUT = Short.MIN_VALUE;
}
}

protected final void initW3SEC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
W3SEC = false;
} else {
W3SEC = true;
}
}
}

protected final void initW3SIC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
W3SIC = false;
} else {
W3SIC = true;
}
}
}

protected final void initW3SIC92(String s) {
if (!s.trim().isEmpty()) {
W3SIC92 = Byte.parseByte(s);
} else {
W3SIC92 = Byte.MIN_VALUE;
}
}

protected final void initW3SIC92MIS(String s) {
if (!s.trim().isEmpty()) {
W3SIC92MIS = Byte.parseByte(s);
} else {
W3SIC92MIS = Byte.MIN_VALUE;
}
}

protected final void initW3SOC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
W3SOC = false;
} else {
W3SOC = true;
}
}
}

protected final void initW3SOC2000(String s) {
if (!s.trim().isEmpty()) {
W3SOC2000 = Byte.parseByte(s);
} else {
W3SOC2000 = Byte.MIN_VALUE;
}
}

protected final void initW3SOC2000MIS(String s) {
if (!s.trim().isEmpty()) {
W3SOC2000MIS = Byte.parseByte(s);
} else {
W3SOC2000MIS = Byte.MIN_VALUE;
}
}

protected final void initW3XWGT(String s) {
if (!s.trim().isEmpty()) {
W3XWGT = Double.parseDouble(s);
} else {
W3XWGT = Double.NaN;
}
}

protected final void initWHOSO4(String s) {
if (!s.trim().isEmpty()) {
WHOSO4 = Byte.parseByte(s);
} else {
WHOSO4 = Byte.MIN_VALUE;
}
}

protected final void initWHOSO5(String s) {
if (!s.trim().isEmpty()) {
WHOSO5 = Byte.parseByte(s);
} else {
WHOSO5 = Byte.MIN_VALUE;
}
}

protected final void initWIDPEN_06(String s) {
if (!s.trim().isEmpty()) {
WIDPEN_06 = Double.parseDouble(s);
} else {
WIDPEN_06 = Double.NaN;
}
}

protected final void initWIDPEN_SPA(String s) {
if (!s.trim().isEmpty()) {
WIDPEN_SPA = Double.parseDouble(s);
} else {
WIDPEN_SPA = Double.NaN;
}
}

protected final void initWP1Q(String s) {
if (!s.trim().isEmpty()) {
WP1Q = Integer.parseInt(s);
} else {
WP1Q = Integer.MIN_VALUE;
}
}

protected final void initWP1SQ(String s) {
if (!s.trim().isEmpty()) {
WP1SQ = Integer.parseInt(s);
} else {
WP1SQ = Integer.MIN_VALUE;
}
}

protected final void initWP2Q(String s) {
if (!s.trim().isEmpty()) {
WP2Q = Integer.parseInt(s);
} else {
WP2Q = Integer.MIN_VALUE;
}
}

protected final void initWP2SQ(String s) {
if (!s.trim().isEmpty()) {
WP2SQ = Integer.parseInt(s);
} else {
WP2SQ = Integer.MIN_VALUE;
}
}

protected final void initWP3Q(String s) {
if (!s.trim().isEmpty()) {
WP3Q = Integer.parseInt(s);
} else {
WP3Q = Integer.MIN_VALUE;
}
}

protected final void initWP3SQ(String s) {
if (!s.trim().isEmpty()) {
WP3SQ = Integer.parseInt(s);
} else {
WP3SQ = Integer.MIN_VALUE;
}
}

protected final void initWPACHG(String s) {
if (!s.trim().isEmpty()) {
WPACHG = Byte.parseByte(s);
} else {
WPACHG = Byte.MIN_VALUE;
}
}

protected final void initWPACT96(String s) {
if (!s.trim().isEmpty()) {
WPACT96 = Byte.parseByte(s);
} else {
WPACT96 = Byte.MIN_VALUE;
}
}

protected final void initWPACTCA(String s) {
if (!s.trim().isEmpty()) {
WPACTCA = Byte.parseByte(s);
} else {
WPACTCA = Byte.MIN_VALUE;
}
}

protected final void initWPACTED(String s) {
if (!s.trim().isEmpty()) {
WPACTED = Byte.parseByte(s);
} else {
WPACTED = Byte.MIN_VALUE;
}
}

protected final void initWPACTLO(String s) {
if (!s.trim().isEmpty()) {
WPACTLO = Byte.parseByte(s);
} else {
WPACTLO = Byte.MIN_VALUE;
}
}

protected final void initWPACTPW(String s) {
if (!s.trim().isEmpty()) {
WPACTPW = Byte.parseByte(s);
} else {
WPACTPW = Byte.MIN_VALUE;
}
}

protected final void initWPACTSE(String s) {
if (!s.trim().isEmpty()) {
WPACTSE = Byte.parseByte(s);
} else {
WPACTSE = Byte.MIN_VALUE;
}
}

protected final void initWPACTVW(String s) {
if (!s.trim().isEmpty()) {
WPACTVW = Byte.parseByte(s);
} else {
WPACTVW = Byte.MIN_VALUE;
}
}

protected final void initWPADDP(String s) {
if (!s.trim().isEmpty()) {
WPADDP = Byte.parseByte(s);
} else {
WPADDP = Byte.MIN_VALUE;
}
}

protected final void initWPAECP(String s) {
if (!s.trim().isEmpty()) {
WPAECP = Short.parseShort(s);
} else {
WPAECP = Short.MIN_VALUE;
}
}

protected final void initWPANYP(String s) {
if (!s.trim().isEmpty()) {
WPANYP = Byte.parseByte(s);
} else {
WPANYP = Byte.MIN_VALUE;
}
}

protected final void initWPAOTFE(String s) {
if (!s.trim().isEmpty()) {
WPAOTFE = Byte.parseByte(s);
} else {
WPAOTFE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTFL(String s) {
if (!s.trim().isEmpty()) {
WPAOTFL = Short.parseShort(s);
} else {
WPAOTFL = Short.MIN_VALUE;
}
}

protected final void initWPAOTFR(String s) {
if (!s.trim().isEmpty()) {
WPAOTFR = Byte.parseByte(s);
} else {
WPAOTFR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTFU(String s) {
if (!s.trim().isEmpty()) {
WPAOTFU = Short.parseShort(s);
} else {
WPAOTFU = Short.MIN_VALUE;
}
}

protected final void initWPAOTME(String s) {
if (!s.trim().isEmpty()) {
WPAOTME = Byte.parseByte(s);
} else {
WPAOTME = Byte.MIN_VALUE;
}
}

protected final void initWPAOTML(String s) {
if (!s.trim().isEmpty()) {
WPAOTML = Short.parseShort(s);
} else {
WPAOTML = Short.MIN_VALUE;
}
}

protected final void initWPAOTMR(String s) {
if (!s.trim().isEmpty()) {
WPAOTMR = Byte.parseByte(s);
} else {
WPAOTMR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTMU(String s) {
if (!s.trim().isEmpty()) {
WPAOTMU = Short.parseShort(s);
} else {
WPAOTMU = Short.MIN_VALUE;
}
}

protected final void initWPAOTOE(String s) {
if (!s.trim().isEmpty()) {
WPAOTOE = Byte.parseByte(s);
} else {
WPAOTOE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTOL(String s) {
if (!s.trim().isEmpty()) {
WPAOTOL = Short.parseShort(s);
} else {
WPAOTOL = Short.MIN_VALUE;
}
}

protected final void initWPAOTOR(String s) {
if (!s.trim().isEmpty()) {
WPAOTOR = Byte.parseByte(s);
} else {
WPAOTOR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTOU(String s) {
if (!s.trim().isEmpty()) {
WPAOTOU = Short.parseShort(s);
} else {
WPAOTOU = Short.MIN_VALUE;
}
}

protected final void initWPAOTWE(String s) {
if (!s.trim().isEmpty()) {
WPAOTWE = Byte.parseByte(s);
} else {
WPAOTWE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTWL(String s) {
if (!s.trim().isEmpty()) {
WPAOTWL = Short.parseShort(s);
} else {
WPAOTWL = Short.MIN_VALUE;
}
}

protected final void initWPAOTWR(String s) {
if (!s.trim().isEmpty()) {
WPAOTWR = Byte.parseByte(s);
} else {
WPAOTWR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTWU(String s) {
if (!s.trim().isEmpty()) {
WPAOTWU = Short.parseShort(s);
} else {
WPAOTWU = Short.MIN_VALUE;
}
}

protected final void initWPAOTYE(String s) {
if (!s.trim().isEmpty()) {
WPAOTYE = Byte.parseByte(s);
} else {
WPAOTYE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTYL(String s) {
if (!s.trim().isEmpty()) {
WPAOTYL = Integer.parseInt(s);
} else {
WPAOTYL = Integer.MIN_VALUE;
}
}

protected final void initWPAOTYR(String s) {
if (!s.trim().isEmpty()) {
WPAOTYR = Byte.parseByte(s);
} else {
WPAOTYR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTYU(String s) {
if (!s.trim().isEmpty()) {
WPAOTYU = Integer.parseInt(s);
} else {
WPAOTYU = Integer.MIN_VALUE;
}
}

protected final void initWPAPFE(String s) {
if (!s.trim().isEmpty()) {
WPAPFE = Byte.parseByte(s);
} else {
WPAPFE = Byte.MIN_VALUE;
}
}

protected final void initWPAPFL(String s) {
if (!s.trim().isEmpty()) {
WPAPFL = Double.parseDouble(s);
} else {
WPAPFL = Double.NaN;
}
}

protected final void initWPAPFR(String s) {
if (!s.trim().isEmpty()) {
WPAPFR = Byte.parseByte(s);
} else {
WPAPFR = Byte.MIN_VALUE;
}
}

protected final void initWPAPFU(String s) {
if (!s.trim().isEmpty()) {
WPAPFU = Double.parseDouble(s);
} else {
WPAPFU = Double.NaN;
}
}

protected final void initWPAPS(String s) {
if (!s.trim().isEmpty()) {
WPAPS = Double.parseDouble(s);
} else {
WPAPS = Double.NaN;
}
}

protected final void initWPASE(String s) {
if (!s.trim().isEmpty()) {
WPASE = Byte.parseByte(s);
} else {
WPASE = Byte.MIN_VALUE;
}
}

protected final void initWPASKD(String s) {
if (!s.trim().isEmpty()) {
WPASKD = Byte.parseByte(s);
} else {
WPASKD = Byte.MIN_VALUE;
}
}

protected final void initWPASKE(String s) {
if (!s.trim().isEmpty()) {
WPASKE = Byte.parseByte(s);
} else {
WPASKE = Byte.MIN_VALUE;
}
}

protected final void initWPASKF(String s) {
if (!s.trim().isEmpty()) {
WPASKF = Byte.parseByte(s);
} else {
WPASKF = Byte.MIN_VALUE;
}
}

protected final void initWPASL(String s) {
if (!s.trim().isEmpty()) {
WPASL = Integer.parseInt(s);
} else {
WPASL = Integer.MIN_VALUE;
}
}

protected final void initWPASR(String s) {
if (!s.trim().isEmpty()) {
WPASR = Byte.parseByte(s);
} else {
WPASR = Byte.MIN_VALUE;
}
}

protected final void initWPASU(String s) {
if (!s.trim().isEmpty()) {
WPASU = Integer.parseInt(s);
} else {
WPASU = Integer.MIN_VALUE;
}
}

protected final void initWPBCH95(String s) {
if (!s.trim().isEmpty()) {
WPBCH95 = Byte.parseByte(s);
} else {
WPBCH95 = Byte.MIN_VALUE;
}
}

protected final void initWPBCHAD(String s) {
if (!s.trim().isEmpty()) {
WPBCHAD = Byte.parseByte(s);
} else {
WPBCHAD = Byte.MIN_VALUE;
}
}

protected final void initWPBCHFL(String s) {
if (!s.trim().isEmpty()) {
WPBCHFL = Byte.parseByte(s);
} else {
WPBCHFL = Byte.MIN_VALUE;
}
}

protected final void initWPBCHHO(String s) {
if (!s.trim().isEmpty()) {
WPBCHHO = Byte.parseByte(s);
} else {
WPBCHHO = Byte.MIN_VALUE;
}
}

protected final void initWPBCHHR(String s) {
if (!s.trim().isEmpty()) {
WPBCHHR = Byte.parseByte(s);
} else {
WPBCHHR = Byte.MIN_VALUE;
}
}

protected final void initWPBCHME(String s) {
if (!s.trim().isEmpty()) {
WPBCHME = Byte.parseByte(s);
} else {
WPBCHME = Byte.MIN_VALUE;
}
}

protected final void initWPBCHPH(String s) {
if (!s.trim().isEmpty()) {
WPBCHPH = Byte.parseByte(s);
} else {
WPBCHPH = Byte.MIN_VALUE;
}
}

protected final void initWPBIMAE(String s) {
if (!s.trim().isEmpty()) {
WPBIMAE = Byte.parseByte(s);
} else {
WPBIMAE = Byte.MIN_VALUE;
}
}

protected final void initWPBIMAL(String s) {
if (!s.trim().isEmpty()) {
WPBIMAL = Short.parseShort(s);
} else {
WPBIMAL = Short.MIN_VALUE;
}
}

protected final void initWPBIMAR(String s) {
if (!s.trim().isEmpty()) {
WPBIMAR = Byte.parseByte(s);
} else {
WPBIMAR = Byte.MIN_VALUE;
}
}

protected final void initWPBIMAU(String s) {
if (!s.trim().isEmpty()) {
WPBIMAU = Short.parseShort(s);
} else {
WPBIMAU = Short.MIN_VALUE;
}
}

protected final void initWPBIWAE(String s) {
if (!s.trim().isEmpty()) {
WPBIWAE = Byte.parseByte(s);
} else {
WPBIWAE = Byte.MIN_VALUE;
}
}

protected final void initWPBIWAL(String s) {
if (!s.trim().isEmpty()) {
WPBIWAL = Short.parseShort(s);
} else {
WPBIWAL = Short.MIN_VALUE;
}
}

protected final void initWPBIWAR(String s) {
if (!s.trim().isEmpty()) {
WPBIWAR = Byte.parseByte(s);
} else {
WPBIWAR = Byte.MIN_VALUE;
}
}

protected final void initWPBIWAU(String s) {
if (!s.trim().isEmpty()) {
WPBIWAU = Short.parseShort(s);
} else {
WPBIWAU = Short.MIN_VALUE;
}
}

protected final void initWPBPPS(String s) {
if (!s.trim().isEmpty()) {
WPBPPS = Double.parseDouble(s);
} else {
WPBPPS = Double.NaN;
}
}

protected final void initWPBPS(String s) {
if (!s.trim().isEmpty()) {
WPBPS = Byte.parseByte(s);
} else {
WPBPS = Byte.MIN_VALUE;
}
}

protected final void initWPBPSP(String s) {
if (!s.trim().isEmpty()) {
WPBPSP = Byte.parseByte(s);
} else {
WPBPSP = Byte.MIN_VALUE;
}
}

protected final void initWPBUSVE(String s) {
if (!s.trim().isEmpty()) {
WPBUSVE = Byte.parseByte(s);
} else {
WPBUSVE = Byte.MIN_VALUE;
}
}

protected final void initWPBUSVL(String s) {
if (!s.trim().isEmpty()) {
WPBUSVL = Integer.parseInt(s);
} else {
WPBUSVL = Integer.MIN_VALUE;
}
}

protected final void initWPBUSVR(String s) {
if (!s.trim().isEmpty()) {
WPBUSVR = Byte.parseByte(s);
} else {
WPBUSVR = Byte.MIN_VALUE;
}
}

protected final void initWPBUSVU(String s) {
if (!s.trim().isEmpty()) {
WPBUSVU = Integer.parseInt(s);
} else {
WPBUSVU = Integer.MIN_VALUE;
}
}

protected final void initWPCH96(String s) {
if (!s.trim().isEmpty()) {
WPCH96 = Byte.parseByte(s);
} else {
WPCH96 = Byte.MIN_VALUE;
}
}

protected final void initWPCHAD(String s) {
if (!s.trim().isEmpty()) {
WPCHAD = Byte.parseByte(s);
} else {
WPCHAD = Byte.MIN_VALUE;
}
}

protected final void initWPCHB95(String s) {
if (!s.trim().isEmpty()) {
WPCHB95 = Byte.parseByte(s);
} else {
WPCHB95 = Byte.MIN_VALUE;
}
}

protected final void initWPCHBAD(String s) {
if (!s.trim().isEmpty()) {
WPCHBAD = Byte.parseByte(s);
} else {
WPCHBAD = Byte.MIN_VALUE;
}
}

protected final void initWPCHBFL(String s) {
if (!s.trim().isEmpty()) {
WPCHBFL = Byte.parseByte(s);
} else {
WPCHBFL = Byte.MIN_VALUE;
}
}

protected final void initWPCHBHO(String s) {
if (!s.trim().isEmpty()) {
WPCHBHO = Byte.parseByte(s);
} else {
WPCHBHO = Byte.MIN_VALUE;
}
}

protected final void initWPCHBHR(String s) {
if (!s.trim().isEmpty()) {
WPCHBHR = Byte.parseByte(s);
} else {
WPCHBHR = Byte.MIN_VALUE;
}
}

protected final void initWPCHBME(String s) {
if (!s.trim().isEmpty()) {
WPCHBME = Byte.parseByte(s);
} else {
WPCHBME = Byte.MIN_VALUE;
}
}

protected final void initWPCHBPH(String s) {
if (!s.trim().isEmpty()) {
WPCHBPH = Byte.parseByte(s);
} else {
WPCHBPH = Byte.MIN_VALUE;
}
}

protected final void initWPCHD96(String s) {
if (!s.trim().isEmpty()) {
WPCHD96 = Byte.parseByte(s);
} else {
WPCHD96 = Byte.MIN_VALUE;
}
}

protected final void initWPCHDAD(String s) {
if (!s.trim().isEmpty()) {
WPCHDAD = Byte.parseByte(s);
} else {
WPCHDAD = Byte.MIN_VALUE;
}
}

protected final void initWPCHDFL(String s) {
if (!s.trim().isEmpty()) {
WPCHDFL = Byte.parseByte(s);
} else {
WPCHDFL = Byte.MIN_VALUE;
}
}

protected final void initWPCHDHO(String s) {
if (!s.trim().isEmpty()) {
WPCHDHO = Byte.parseByte(s);
} else {
WPCHDHO = Byte.MIN_VALUE;
}
}

protected final void initWPCHDHR(String s) {
if (!s.trim().isEmpty()) {
WPCHDHR = Byte.parseByte(s);
} else {
WPCHDHR = Byte.MIN_VALUE;
}
}

protected final void initWPCHDM85(String s) {
if (!s.trim().isEmpty()) {
WPCHDM85 = Byte.parseByte(s);
} else {
WPCHDM85 = Byte.MIN_VALUE;
}
}

protected final void initWPCHDM86(String s) {
if (!s.trim().isEmpty()) {
WPCHDM86 = Byte.parseByte(s);
} else {
WPCHDM86 = Byte.MIN_VALUE;
}
}

protected final void initWPCHDM96(String s) {
if (!s.trim().isEmpty()) {
WPCHDM96 = Byte.parseByte(s);
} else {
WPCHDM96 = Byte.MIN_VALUE;
}
}

protected final void initWPCHDMAD(String s) {
if (!s.trim().isEmpty()) {
WPCHDMAD = Byte.parseByte(s);
} else {
WPCHDMAD = Byte.MIN_VALUE;
}
}

protected final void initWPCHDMCO(String s) {
if (!s.trim().isEmpty()) {
WPCHDMCO = Byte.parseByte(s);
} else {
WPCHDMCO = Byte.MIN_VALUE;
}
}

protected final void initWPCHDME(String s) {
if (!s.trim().isEmpty()) {
WPCHDME = Byte.parseByte(s);
} else {
WPCHDME = Byte.MIN_VALUE;
}
}

protected final void initWPCHDMFL(String s) {
if (!s.trim().isEmpty()) {
WPCHDMFL = Byte.parseByte(s);
} else {
WPCHDMFL = Byte.MIN_VALUE;
}
}

protected final void initWPCHDMHO(String s) {
if (!s.trim().isEmpty()) {
WPCHDMHO = Byte.parseByte(s);
} else {
WPCHDMHO = Byte.MIN_VALUE;
}
}

protected final void initWPCHDMHR(String s) {
if (!s.trim().isEmpty()) {
WPCHDMHR = Byte.parseByte(s);
} else {
WPCHDMHR = Byte.MIN_VALUE;
}
}

protected final void initWPCHDMME(String s) {
if (!s.trim().isEmpty()) {
WPCHDMME = Byte.parseByte(s);
} else {
WPCHDMME = Byte.MIN_VALUE;
}
}

protected final void initWPCHDMPH(String s) {
if (!s.trim().isEmpty()) {
WPCHDMPH = Byte.parseByte(s);
} else {
WPCHDMPH = Byte.MIN_VALUE;
}
}

protected final void initWPCHDPH(String s) {
if (!s.trim().isEmpty()) {
WPCHDPH = Byte.parseByte(s);
} else {
WPCHDPH = Byte.MIN_VALUE;
}
}

protected final void initWPCHFL(String s) {
if (!s.trim().isEmpty()) {
WPCHFL = Byte.parseByte(s);
} else {
WPCHFL = Byte.MIN_VALUE;
}
}

protected final void initWPCHGA(String s) {
if (!s.trim().isEmpty()) {
WPCHGA = Byte.parseByte(s);
} else {
WPCHGA = Byte.MIN_VALUE;
}
}

protected final void initWPCHGDN(String s) {
if (!s.trim().isEmpty()) {
WPCHGDN = Byte.parseByte(s);
} else {
WPCHGDN = Byte.MIN_VALUE;
}
}

protected final void initWPCHGNO(String s) {
if (!s.trim().isEmpty()) {
WPCHGNO = Byte.parseByte(s);
} else {
WPCHGNO = Byte.MIN_VALUE;
}
}

protected final void initWPCHGO(String s) {
if (!s.trim().isEmpty()) {
WPCHGO = Byte.parseByte(s);
} else {
WPCHGO = Byte.MIN_VALUE;
}
}

protected final void initWPCHHO(String s) {
if (!s.trim().isEmpty()) {
WPCHHO = Byte.parseByte(s);
} else {
WPCHHO = Byte.MIN_VALUE;
}
}

protected final void initWPCHHR(String s) {
if (!s.trim().isEmpty()) {
WPCHHR = Byte.parseByte(s);
} else {
WPCHHR = Byte.MIN_VALUE;
}
}

protected final void initWPCHL95(String s) {
if (!s.trim().isEmpty()) {
WPCHL95 = Byte.parseByte(s);
} else {
WPCHL95 = Byte.MIN_VALUE;
}
}

protected final void initWPCHL96(String s) {
if (!s.trim().isEmpty()) {
WPCHL96 = Byte.parseByte(s);
} else {
WPCHL96 = Byte.MIN_VALUE;
}
}

protected final void initWPCHLAD(String s) {
if (!s.trim().isEmpty()) {
WPCHLAD = Byte.parseByte(s);
} else {
WPCHLAD = Byte.MIN_VALUE;
}
}

protected final void initWPCHLFL(String s) {
if (!s.trim().isEmpty()) {
WPCHLFL = Byte.parseByte(s);
} else {
WPCHLFL = Byte.MIN_VALUE;
}
}

protected final void initWPCHLHO(String s) {
if (!s.trim().isEmpty()) {
WPCHLHO = Byte.parseByte(s);
} else {
WPCHLHO = Byte.MIN_VALUE;
}
}

protected final void initWPCHLHR(String s) {
if (!s.trim().isEmpty()) {
WPCHLHR = Byte.parseByte(s);
} else {
WPCHLHR = Byte.MIN_VALUE;
}
}

protected final void initWPCHLM85(String s) {
if (!s.trim().isEmpty()) {
WPCHLM85 = Byte.parseByte(s);
} else {
WPCHLM85 = Byte.MIN_VALUE;
}
}

protected final void initWPCHLM86(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCHLM86 = false;
} else {
WPCHLM86 = true;
}
}
}

protected final void initWPCHLM96(String s) {
if (!s.trim().isEmpty()) {
WPCHLM96 = Byte.parseByte(s);
} else {
WPCHLM96 = Byte.MIN_VALUE;
}
}

protected final void initWPCHLMAD(String s) {
if (!s.trim().isEmpty()) {
WPCHLMAD = Byte.parseByte(s);
} else {
WPCHLMAD = Byte.MIN_VALUE;
}
}

protected final void initWPCHLME(String s) {
if (!s.trim().isEmpty()) {
WPCHLME = Byte.parseByte(s);
} else {
WPCHLME = Byte.MIN_VALUE;
}
}

protected final void initWPCHLMFL(String s) {
if (!s.trim().isEmpty()) {
WPCHLMFL = Byte.parseByte(s);
} else {
WPCHLMFL = Byte.MIN_VALUE;
}
}

protected final void initWPCHLMHO(String s) {
if (!s.trim().isEmpty()) {
WPCHLMHO = Byte.parseByte(s);
} else {
WPCHLMHO = Byte.MIN_VALUE;
}
}

protected final void initWPCHLMHR(String s) {
if (!s.trim().isEmpty()) {
WPCHLMHR = Byte.parseByte(s);
} else {
WPCHLMHR = Byte.MIN_VALUE;
}
}

protected final void initWPCHLMME(String s) {
if (!s.trim().isEmpty()) {
WPCHLMME = Byte.parseByte(s);
} else {
WPCHLMME = Byte.MIN_VALUE;
}
}

protected final void initWPCHLMPH(String s) {
if (!s.trim().isEmpty()) {
WPCHLMPH = Byte.parseByte(s);
} else {
WPCHLMPH = Byte.MIN_VALUE;
}
}

protected final void initWPCHLPH(String s) {
if (!s.trim().isEmpty()) {
WPCHLPH = Byte.parseByte(s);
} else {
WPCHLPH = Byte.MIN_VALUE;
}
}

protected final void initWPCHM85(String s) {
if (!s.trim().isEmpty()) {
WPCHM85 = Byte.parseByte(s);
} else {
WPCHM85 = Byte.MIN_VALUE;
}
}

protected final void initWPCHM86(String s) {
if (!s.trim().isEmpty()) {
WPCHM86 = Byte.parseByte(s);
} else {
WPCHM86 = Byte.MIN_VALUE;
}
}

protected final void initWPCHM96(String s) {
if (!s.trim().isEmpty()) {
WPCHM96 = Byte.parseByte(s);
} else {
WPCHM96 = Byte.MIN_VALUE;
}
}

protected final void initWPCHMAD(String s) {
if (!s.trim().isEmpty()) {
WPCHMAD = Byte.parseByte(s);
} else {
WPCHMAD = Byte.MIN_VALUE;
}
}

protected final void initWPCHMBO(String s) {
if (!s.trim().isEmpty()) {
WPCHMBO = Byte.parseByte(s);
} else {
WPCHMBO = Byte.MIN_VALUE;
}
}

protected final void initWPCHME(String s) {
if (!s.trim().isEmpty()) {
WPCHME = Byte.parseByte(s);
} else {
WPCHME = Byte.MIN_VALUE;
}
}

protected final void initWPCHMFL(String s) {
if (!s.trim().isEmpty()) {
WPCHMFL = Byte.parseByte(s);
} else {
WPCHMFL = Byte.MIN_VALUE;
}
}

protected final void initWPCHMHO(String s) {
if (!s.trim().isEmpty()) {
WPCHMHO = Byte.parseByte(s);
} else {
WPCHMHO = Byte.MIN_VALUE;
}
}

protected final void initWPCHMHR(String s) {
if (!s.trim().isEmpty()) {
WPCHMHR = Byte.parseByte(s);
} else {
WPCHMHR = Byte.MIN_VALUE;
}
}

protected final void initWPCHMME(String s) {
if (!s.trim().isEmpty()) {
WPCHMME = Byte.parseByte(s);
} else {
WPCHMME = Byte.MIN_VALUE;
}
}

protected final void initWPCHMPH(String s) {
if (!s.trim().isEmpty()) {
WPCHMPH = Byte.parseByte(s);
} else {
WPCHMPH = Byte.MIN_VALUE;
}
}

protected final void initWPCHMSA(String s) {
if (!s.trim().isEmpty()) {
WPCHMSA = Byte.parseByte(s);
} else {
WPCHMSA = Byte.MIN_VALUE;
}
}

protected final void initWPCHPH(String s) {
if (!s.trim().isEmpty()) {
WPCHPH = Byte.parseByte(s);
} else {
WPCHPH = Byte.MIN_VALUE;
}
}

protected final void initWPCJ96(String s) {
if (!s.trim().isEmpty()) {
WPCJ96 = Byte.parseByte(s);
} else {
WPCJ96 = Byte.MIN_VALUE;
}
}

protected final void initWPCJAG(String s) {
if (!s.trim().isEmpty()) {
WPCJAG = Byte.parseByte(s);
} else {
WPCJAG = Byte.MIN_VALUE;
}
}

protected final void initWPCJBU(String s) {
if (!s.trim().isEmpty()) {
WPCJBU = Byte.parseByte(s);
} else {
WPCJBU = Byte.MIN_VALUE;
}
}

protected final void initWPCJDI(String s) {
if (!s.trim().isEmpty()) {
WPCJDI = Byte.parseByte(s);
} else {
WPCJDI = Byte.MIN_VALUE;
}
}

protected final void initWPCJFR(String s) {
if (!s.trim().isEmpty()) {
WPCJFR = Byte.parseByte(s);
} else {
WPCJFR = Byte.MIN_VALUE;
}
}

protected final void initWPCJPA(String s) {
if (!s.trim().isEmpty()) {
WPCJPA = Byte.parseByte(s);
} else {
WPCJPA = Byte.MIN_VALUE;
}
}

protected final void initWPCJSC(String s) {
if (!s.trim().isEmpty()) {
WPCJSC = Byte.parseByte(s);
} else {
WPCJSC = Byte.MIN_VALUE;
}
}

protected final void initWPCJSE(String s) {
if (!s.trim().isEmpty()) {
WPCJSE = Byte.parseByte(s);
} else {
WPCJSE = Byte.MIN_VALUE;
}
}

protected final void initWPCONS(String s) {
if (!s.trim().isEmpty()) {
WPCONS = Byte.parseByte(s);
} else {
WPCONS = Byte.MIN_VALUE;
}
}

protected final void initWPCOS(String s) {
if (!s.trim().isEmpty()) {
WPCOS = Byte.parseByte(s);
} else {
WPCOS = Byte.MIN_VALUE;
}
}

protected final void initWPCRAGE(String s) {
if (!s.trim().isEmpty()) {
WPCRAGE = Byte.parseByte(s);
} else {
WPCRAGE = Byte.MIN_VALUE;
}
}

protected final void initWPCRET(String s) {
if (!s.trim().isEmpty()) {
WPCRET = Byte.parseByte(s);
} else {
WPCRET = Byte.MIN_VALUE;
}
}

protected final void initWPCRETL(String s) {
if (!s.trim().isEmpty()) {
WPCRETL = Byte.parseByte(s);
} else {
WPCRETL = Byte.MIN_VALUE;
}
}

protected final void initWPCURP(String s) {
if (!s.trim().isEmpty()) {
WPCURP = Byte.parseByte(s);
} else {
WPCURP = Byte.MIN_VALUE;
}
}

protected final void initWPCURR(String s) {
if (!s.trim().isEmpty()) {
WPCURR = Byte.parseByte(s);
} else {
WPCURR = Byte.MIN_VALUE;
}
}

protected final void initWPDCDB(String s) {
if (!s.trim().isEmpty()) {
WPDCDB = Byte.parseByte(s);
} else {
WPDCDB = Byte.MIN_VALUE;
}
}

protected final void initWPDESC(String s) {
if (!s.trim().isEmpty()) {
WPDESC = Byte.parseByte(s);
} else {
WPDESC = Byte.MIN_VALUE;
}
}

protected final void initWPDESP(String s) {
if (!s.trim().isEmpty()) {
WPDESP = Byte.parseByte(s);
} else {
WPDESP = Byte.MIN_VALUE;
}
}

protected final void initWPDPSP(String s) {
if (!s.trim().isEmpty()) {
WPDPSP = Byte.parseByte(s);
} else {
WPDPSP = Byte.MIN_VALUE;
}
}

protected final void initWPEARLY(String s) {
if (!s.trim().isEmpty()) {
WPEARLY = Byte.parseByte(s);
} else {
WPEARLY = Byte.MIN_VALUE;
}
}

protected final void initWPEC(String s) {
if (!s.trim().isEmpty()) {
WPEC = Byte.parseByte(s);
} else {
WPEC = Byte.MIN_VALUE;
}
}

protected final void initWPECA(String s) {
if (!s.trim().isEmpty()) {
WPECA = Byte.parseByte(s);
} else {
WPECA = Byte.MIN_VALUE;
}
}

protected final void initWPECPP(String s) {
if (!s.trim().isEmpty()) {
WPECPP = Byte.parseByte(s);
} else {
WPECPP = Byte.MIN_VALUE;
}
}

protected final void initWPERCP(String s) {
if (!s.trim().isEmpty()) {
WPERCP = Byte.parseByte(s);
} else {
WPERCP = Byte.MIN_VALUE;
}
}

protected final void initWPESJME(String s) {
if (!s.trim().isEmpty()) {
WPESJME = Byte.parseByte(s);
} else {
WPESJME = Byte.MIN_VALUE;
}
}

protected final void initWPESJML(String s) {
if (!s.trim().isEmpty()) {
WPESJML = Short.parseShort(s);
} else {
WPESJML = Short.MIN_VALUE;
}
}

protected final void initWPESJMR(String s) {
if (!s.trim().isEmpty()) {
WPESJMR = Byte.parseByte(s);
} else {
WPESJMR = Byte.MIN_VALUE;
}
}

protected final void initWPESJMU(String s) {
if (!s.trim().isEmpty()) {
WPESJMU = Short.parseShort(s);
} else {
WPESJMU = Short.MIN_VALUE;
}
}

protected final void initWPEXW(String s) {
if (!s.trim().isEmpty()) {
WPEXW = Byte.parseByte(s);
} else {
WPEXW = Byte.MIN_VALUE;
}
}

protected final void initWPFFCONS(String s) {
if (!s.trim().isEmpty()) {
WPFFCONS = Byte.parseByte(s);
} else {
WPFFCONS = Byte.MIN_VALUE;
}
}

protected final void initWPFFCURP(String s) {
if (!s.trim().isEmpty()) {
WPFFCURP = Byte.parseByte(s);
} else {
WPFFCURP = Byte.MIN_VALUE;
}
}

protected final void initWPFFDCDB(String s) {
if (!s.trim().isEmpty()) {
WPFFDCDB = Byte.parseByte(s);
} else {
WPFFDCDB = Byte.MIN_VALUE;
}
}

protected final void initWPFFPENT(String s) {
if (!s.trim().isEmpty()) {
WPFFPENT = Byte.parseByte(s);
} else {
WPFFPENT = Byte.MIN_VALUE;
}
}

protected final void initWPFFRECP(String s) {
if (!s.trim().isEmpty()) {
WPFFRECP = Byte.parseByte(s);
} else {
WPFFRECP = Byte.MIN_VALUE;
}
}

protected final void initWPFFYBS(String s) {
if (!s.trim().isEmpty()) {
WPFFYBS = Byte.parseByte(s);
} else {
WPFFYBS = Byte.MIN_VALUE;
}
}

protected final void initWPFINFO(String s) {
if (!s.trim().isEmpty()) {
WPFINFO = Byte.parseByte(s);
} else {
WPFINFO = Byte.MIN_VALUE;
}
}

protected final void initWPFPN(String s) {
if (!s.trim().isEmpty()) {
WPFPN = Byte.parseByte(s);
} else {
WPFPN = Byte.MIN_VALUE;
}
}

protected final void initWPFPR(String s) {
if (!s.trim().isEmpty()) {
WPFPR = Byte.parseByte(s);
} else {
WPFPR = Byte.MIN_VALUE;
}
}

protected final void initWPFSC(String s) {
if (!s.trim().isEmpty()) {
WPFSC = Byte.parseByte(s);
} else {
WPFSC = Byte.MIN_VALUE;
}
}

protected final void initWPFSEC(String s) {
if (!s.trim().isEmpty()) {
WPFSEC = Byte.parseByte(s);
} else {
WPFSEC = Byte.MIN_VALUE;
}
}

protected final void initWPHLWZ(String s) {
if (!s.trim().isEmpty()) {
WPHLWZ = Byte.parseByte(s);
} else {
WPHLWZ = Byte.MIN_VALUE;
}
}

protected final void initWPIFS95(String s) {
if (!s.trim().isEmpty()) {
WPIFS95 = Byte.parseByte(s);
} else {
WPIFS95 = Byte.MIN_VALUE;
}
}

protected final void initWPIFSAC(String s) {
if (!s.trim().isEmpty()) {
WPIFSAC = Byte.parseByte(s);
} else {
WPIFSAC = Byte.MIN_VALUE;
}
}

protected final void initWPIFSCO(String s) {
if (!s.trim().isEmpty()) {
WPIFSCO = Byte.parseByte(s);
} else {
WPIFSCO = Byte.MIN_VALUE;
}
}

protected final void initWPIFSEM(String s) {
if (!s.trim().isEmpty()) {
WPIFSEM = Byte.parseByte(s);
} else {
WPIFSEM = Byte.MIN_VALUE;
}
}

protected final void initWPIFSFA(String s) {
if (!s.trim().isEmpty()) {
WPIFSFA = Byte.parseByte(s);
} else {
WPIFSFA = Byte.MIN_VALUE;
}
}

protected final void initWPIFSNO(String s) {
if (!s.trim().isEmpty()) {
WPIFSNO = Byte.parseByte(s);
} else {
WPIFSNO = Byte.MIN_VALUE;
}
}

protected final void initWPIFSPR(String s) {
if (!s.trim().isEmpty()) {
WPIFSPR = Byte.parseByte(s);
} else {
WPIFSPR = Byte.MIN_VALUE;
}
}

protected final void initWPIFSRE(String s) {
if (!s.trim().isEmpty()) {
WPIFSRE = Byte.parseByte(s);
} else {
WPIFSRE = Byte.MIN_VALUE;
}
}

protected final void initWPIFSRP(String s) {
if (!s.trim().isEmpty()) {
WPIFSRP = Byte.parseByte(s);
} else {
WPIFSRP = Byte.MIN_VALUE;
}
}

protected final void initWPINCD(String s) {
if (!s.trim().isEmpty()) {
WPINCD = Double.parseDouble(s);
} else {
WPINCD = Double.NaN;
}
}

protected final void initWPINCE(String s) {
if (!s.trim().isEmpty()) {
WPINCE = Byte.parseByte(s);
} else {
WPINCE = Byte.MIN_VALUE;
}
}

protected final void initWPINCL(String s) {
if (!s.trim().isEmpty()) {
WPINCL = Integer.parseInt(s);
} else {
WPINCL = Integer.MIN_VALUE;
}
}

protected final void initWPINCR(String s) {
if (!s.trim().isEmpty()) {
WPINCR = Byte.parseByte(s);
} else {
WPINCR = Byte.MIN_VALUE;
}
}

protected final void initWPINCU(String s) {
if (!s.trim().isEmpty()) {
WPINCU = Short.parseShort(s);
} else {
WPINCU = Short.MIN_VALUE;
}
}

protected final void initWPLCH95(String s) {
if (!s.trim().isEmpty()) {
WPLCH95 = Byte.parseByte(s);
} else {
WPLCH95 = Byte.MIN_VALUE;
}
}

protected final void initWPLCH96(String s) {
if (!s.trim().isEmpty()) {
WPLCH96 = Byte.parseByte(s);
} else {
WPLCH96 = Byte.MIN_VALUE;
}
}

protected final void initWPLCHAD(String s) {
if (!s.trim().isEmpty()) {
WPLCHAD = Byte.parseByte(s);
} else {
WPLCHAD = Byte.MIN_VALUE;
}
}

protected final void initWPLCHFL(String s) {
if (!s.trim().isEmpty()) {
WPLCHFL = Byte.parseByte(s);
} else {
WPLCHFL = Byte.MIN_VALUE;
}
}

protected final void initWPLCHHO(String s) {
if (!s.trim().isEmpty()) {
WPLCHHO = Byte.parseByte(s);
} else {
WPLCHHO = Byte.MIN_VALUE;
}
}

protected final void initWPLCHHR(String s) {
if (!s.trim().isEmpty()) {
WPLCHHR = Byte.parseByte(s);
} else {
WPLCHHR = Byte.MIN_VALUE;
}
}

protected final void initWPLCHM85(String s) {
if (!s.trim().isEmpty()) {
WPLCHM85 = Byte.parseByte(s);
} else {
WPLCHM85 = Byte.MIN_VALUE;
}
}

protected final void initWPLCHM86(String s) {
if (!s.trim().isEmpty()) {
WPLCHM86 = Byte.parseByte(s);
} else {
WPLCHM86 = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMAD(String s) {
if (!s.trim().isEmpty()) {
WPLCHMAD = Byte.parseByte(s);
} else {
WPLCHMAD = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMBO(String s) {
if (!s.trim().isEmpty()) {
WPLCHMBO = Byte.parseByte(s);
} else {
WPLCHMBO = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMCO(String s) {
if (!s.trim().isEmpty()) {
WPLCHMCO = Byte.parseByte(s);
} else {
WPLCHMCO = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMDE(String s) {
if (!s.trim().isEmpty()) {
WPLCHMDE = Byte.parseByte(s);
} else {
WPLCHMDE = Byte.MIN_VALUE;
}
}

protected final void initWPLCHME(String s) {
if (!s.trim().isEmpty()) {
WPLCHME = Byte.parseByte(s);
} else {
WPLCHME = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMFL(String s) {
if (!s.trim().isEmpty()) {
WPLCHMFL = Byte.parseByte(s);
} else {
WPLCHMFL = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMHO(String s) {
if (!s.trim().isEmpty()) {
WPLCHMHO = Byte.parseByte(s);
} else {
WPLCHMHO = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMHR(String s) {
if (!s.trim().isEmpty()) {
WPLCHMHR = Byte.parseByte(s);
} else {
WPLCHMHR = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMLH(String s) {
if (!s.trim().isEmpty()) {
WPLCHMLH = Byte.parseByte(s);
} else {
WPLCHMLH = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMLO(String s) {
if (!s.trim().isEmpty()) {
WPLCHMLO = Byte.parseByte(s);
} else {
WPLCHMLO = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMME(String s) {
if (!s.trim().isEmpty()) {
WPLCHMME = Byte.parseByte(s);
} else {
WPLCHMME = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMPH(String s) {
if (!s.trim().isEmpty()) {
WPLCHMPH = Byte.parseByte(s);
} else {
WPLCHMPH = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMRT(String s) {
if (!s.trim().isEmpty()) {
WPLCHMRT = Byte.parseByte(s);
} else {
WPLCHMRT = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMSA(String s) {
if (!s.trim().isEmpty()) {
WPLCHMSA = Byte.parseByte(s);
} else {
WPLCHMSA = Byte.MIN_VALUE;
}
}

protected final void initWPLCHPH(String s) {
if (!s.trim().isEmpty()) {
WPLCHPH = Byte.parseByte(s);
} else {
WPLCHPH = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP95(String s) {
if (!s.trim().isEmpty()) {
WPLFTP95 = Byte.parseByte(s);
} else {
WPLFTP95 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPAF(String s) {
if (!s.trim().isEmpty()) {
WPLFTPAF = Byte.parseByte(s);
} else {
WPLFTPAF = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPCH(String s) {
if (!s.trim().isEmpty()) {
WPLFTPCH = Byte.parseByte(s);
} else {
WPLFTPCH = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPEL(String s) {
if (!s.trim().isEmpty()) {
WPLFTPEL = Byte.parseByte(s);
} else {
WPLFTPEL = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPOF(String s) {
if (!s.trim().isEmpty()) {
WPLFTPOF = Byte.parseByte(s);
} else {
WPLFTPOF = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPRE(String s) {
if (!s.trim().isEmpty()) {
WPLFTPRE = Byte.parseByte(s);
} else {
WPLFTPRE = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPRT(String s) {
if (!s.trim().isEmpty()) {
WPLFTPRT = Byte.parseByte(s);
} else {
WPLFTPRT = Byte.MIN_VALUE;
}
}

protected final void initWPLIMWK(String s) {
if (!s.trim().isEmpty()) {
WPLIMWK = Byte.parseByte(s);
} else {
WPLIMWK = Byte.MIN_VALUE;
}
}

protected final void initWPLJO95(String s) {
if (!s.trim().isEmpty()) {
WPLJO95 = Byte.parseByte(s);
} else {
WPLJO95 = Byte.MIN_VALUE;
}
}

protected final void initWPLJOBM(String s) {
if (!s.trim().isEmpty()) {
WPLJOBM = Byte.parseByte(s);
} else {
WPLJOBM = Byte.MIN_VALUE;
}
}

protected final void initWPLJOCA(String s) {
if (!s.trim().isEmpty()) {
WPLJOCA = Byte.parseByte(s);
} else {
WPLJOCA = Byte.MIN_VALUE;
}
}

protected final void initWPLJOCL(String s) {
if (!s.trim().isEmpty()) {
WPLJOCL = Byte.parseByte(s);
} else {
WPLJOCL = Byte.MIN_VALUE;
}
}

protected final void initWPLJODI(String s) {
if (!s.trim().isEmpty()) {
WPLJODI = Byte.parseByte(s);
} else {
WPLJODI = Byte.MIN_VALUE;
}
}

protected final void initWPLJOFE(String s) {
if (!s.trim().isEmpty()) {
WPLJOFE = Byte.parseByte(s);
} else {
WPLJOFE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOIL(String s) {
if (!s.trim().isEmpty()) {
WPLJOIL = Byte.parseByte(s);
} else {
WPLJOIL = Byte.MIN_VALUE;
}
}

protected final void initWPLJOM85(String s) {
if (!s.trim().isEmpty()) {
WPLJOM85 = Byte.parseByte(s);
} else {
WPLJOM85 = Byte.MIN_VALUE;
}
}

protected final void initWPLJOM86(String s) {
if (!s.trim().isEmpty()) {
WPLJOM86 = Byte.parseByte(s);
} else {
WPLJOM86 = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMBE(String s) {
if (!s.trim().isEmpty()) {
WPLJOMBE = Byte.parseByte(s);
} else {
WPLJOMBE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMCA(String s) {
if (!s.trim().isEmpty()) {
WPLJOMCA = Byte.parseByte(s);
} else {
WPLJOMCA = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMCF(String s) {
if (!s.trim().isEmpty()) {
WPLJOMCF = Byte.parseByte(s);
} else {
WPLJOMCF = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMCL(String s) {
if (!s.trim().isEmpty()) {
WPLJOMCL = Byte.parseByte(s);
} else {
WPLJOMCL = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMDI(String s) {
if (!s.trim().isEmpty()) {
WPLJOMDI = Byte.parseByte(s);
} else {
WPLJOMDI = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMER(String s) {
if (!s.trim().isEmpty()) {
WPLJOMER = Byte.parseByte(s);
} else {
WPLJOMER = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMFE(String s) {
if (!s.trim().isEmpty()) {
WPLJOMFE = Byte.parseByte(s);
} else {
WPLJOMFE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMIL(String s) {
if (!s.trim().isEmpty()) {
WPLJOMIL = Byte.parseByte(s);
} else {
WPLJOMIL = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMME(String s) {
if (!s.trim().isEmpty()) {
WPLJOMME = Byte.parseByte(s);
} else {
WPLJOMME = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMMO(String s) {
if (!s.trim().isEmpty()) {
WPLJOMMO = Byte.parseByte(s);
} else {
WPLJOMMO = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMO(String s) {
if (!s.trim().isEmpty()) {
WPLJOMO = Byte.parseByte(s);
} else {
WPLJOMO = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMPR(String s) {
if (!s.trim().isEmpty()) {
WPLJOMPR = Byte.parseByte(s);
} else {
WPLJOMPR = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMRE(String s) {
if (!s.trim().isEmpty()) {
WPLJOMRE = Byte.parseByte(s);
} else {
WPLJOMRE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMSA(String s) {
if (!s.trim().isEmpty()) {
WPLJOMSA = Byte.parseByte(s);
} else {
WPLJOMSA = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMSE(String s) {
if (!s.trim().isEmpty()) {
WPLJOMSE = Byte.parseByte(s);
} else {
WPLJOMSE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMSP(String s) {
if (!s.trim().isEmpty()) {
WPLJOMSP = Byte.parseByte(s);
} else {
WPLJOMSP = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMTI(String s) {
if (!s.trim().isEmpty()) {
WPLJOMTI = Byte.parseByte(s);
} else {
WPLJOMTI = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMVO(String s) {
if (!s.trim().isEmpty()) {
WPLJOMVO = Byte.parseByte(s);
} else {
WPLJOMVO = Byte.MIN_VALUE;
}
}

protected final void initWPLJORE(String s) {
if (!s.trim().isEmpty()) {
WPLJORE = Byte.parseByte(s);
} else {
WPLJORE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOSP(String s) {
if (!s.trim().isEmpty()) {
WPLJOSP = Byte.parseByte(s);
} else {
WPLJOSP = Byte.MIN_VALUE;
}
}

protected final void initWPLJOTI(String s) {
if (!s.trim().isEmpty()) {
WPLJOTI = Byte.parseByte(s);
} else {
WPLJOTI = Byte.MIN_VALUE;
}
}

protected final void initWPLJOVO(String s) {
if (!s.trim().isEmpty()) {
WPLJOVO = Byte.parseByte(s);
} else {
WPLJOVO = Byte.MIN_VALUE;
}
}

protected final void initWPLLJM(String s) {
if (!s.trim().isEmpty()) {
WPLLJM = Byte.parseByte(s);
} else {
WPLLJM = Byte.MIN_VALUE;
}
}

protected final void initWPLLJY(String s) {
if (!s.trim().isEmpty()) {
WPLLJY = Short.parseShort(s);
} else {
WPLLJY = Short.MIN_VALUE;
}
}

protected final void initWPLLSM(String s) {
if (!s.trim().isEmpty()) {
WPLLSM = Byte.parseByte(s);
} else {
WPLLSM = Byte.MIN_VALUE;
}
}

protected final void initWPLLSY(String s) {
if (!s.trim().isEmpty()) {
WPLLSY = Short.parseShort(s);
} else {
WPLLSY = Short.MIN_VALUE;
}
}

protected final void initWPLPEM(String s) {
if (!s.trim().isEmpty()) {
WPLPEM = Byte.parseByte(s);
} else {
WPLPEM = Byte.MIN_VALUE;
}
}

protected final void initWPLPEM2(String s) {
if (!s.trim().isEmpty()) {
WPLPEM2 = Byte.parseByte(s);
} else {
WPLPEM2 = Byte.MIN_VALUE;
}
}

protected final void initWPLPEM3(String s) {
if (!s.trim().isEmpty()) {
WPLPEM3 = Byte.parseByte(s);
} else {
WPLPEM3 = Byte.MIN_VALUE;
}
}

protected final void initWPLPEM4(String s) {
if (!s.trim().isEmpty()) {
WPLPEM4 = Byte.parseByte(s);
} else {
WPLPEM4 = Byte.MIN_VALUE;
}
}

protected final void initWPLPEM5(String s) {
if (!s.trim().isEmpty()) {
WPLPEM5 = Byte.parseByte(s);
} else {
WPLPEM5 = Byte.MIN_VALUE;
}
}

protected final void initWPLPEY(String s) {
if (!s.trim().isEmpty()) {
WPLPEY = Short.parseShort(s);
} else {
WPLPEY = Short.MIN_VALUE;
}
}

protected final void initWPLPEY2(String s) {
if (!s.trim().isEmpty()) {
WPLPEY2 = Short.parseShort(s);
} else {
WPLPEY2 = Short.MIN_VALUE;
}
}

protected final void initWPLPEY3(String s) {
if (!s.trim().isEmpty()) {
WPLPEY3 = Short.parseShort(s);
} else {
WPLPEY3 = Short.MIN_VALUE;
}
}

protected final void initWPLPEY4(String s) {
if (!s.trim().isEmpty()) {
WPLPEY4 = Short.parseShort(s);
} else {
WPLPEY4 = Short.MIN_VALUE;
}
}

protected final void initWPLPEY5(String s) {
if (!s.trim().isEmpty()) {
WPLPEY5 = Short.parseShort(s);
} else {
WPLPEY5 = Short.MIN_VALUE;
}
}

protected final void initWPLPSM(String s) {
if (!s.trim().isEmpty()) {
WPLPSM = Byte.parseByte(s);
} else {
WPLPSM = Byte.MIN_VALUE;
}
}

protected final void initWPLPSM2(String s) {
if (!s.trim().isEmpty()) {
WPLPSM2 = Byte.parseByte(s);
} else {
WPLPSM2 = Byte.MIN_VALUE;
}
}

protected final void initWPLPSM3(String s) {
if (!s.trim().isEmpty()) {
WPLPSM3 = Byte.parseByte(s);
} else {
WPLPSM3 = Byte.MIN_VALUE;
}
}

protected final void initWPLPSM4(String s) {
if (!s.trim().isEmpty()) {
WPLPSM4 = Byte.parseByte(s);
} else {
WPLPSM4 = Byte.MIN_VALUE;
}
}

protected final void initWPLPSM5(String s) {
if (!s.trim().isEmpty()) {
WPLPSM5 = Byte.parseByte(s);
} else {
WPLPSM5 = Byte.MIN_VALUE;
}
}

protected final void initWPLPSY(String s) {
if (!s.trim().isEmpty()) {
WPLPSY = Short.parseShort(s);
} else {
WPLPSY = Short.MIN_VALUE;
}
}

protected final void initWPLPSY2(String s) {
if (!s.trim().isEmpty()) {
WPLPSY2 = Short.parseShort(s);
} else {
WPLPSY2 = Short.MIN_VALUE;
}
}

protected final void initWPLPSY3(String s) {
if (!s.trim().isEmpty()) {
WPLPSY3 = Short.parseShort(s);
} else {
WPLPSY3 = Short.MIN_VALUE;
}
}

protected final void initWPLPSY4(String s) {
if (!s.trim().isEmpty()) {
WPLPSY4 = Short.parseShort(s);
} else {
WPLPSY4 = Short.MIN_VALUE;
}
}

protected final void initWPLPSY5(String s) {
if (!s.trim().isEmpty()) {
WPLPSY5 = Short.parseShort(s);
} else {
WPLPSY5 = Short.MIN_VALUE;
}
}

protected final void initWPLUAE(String s) {
if (!s.trim().isEmpty()) {
WPLUAE = Byte.parseByte(s);
} else {
WPLUAE = Byte.MIN_VALUE;
}
}

protected final void initWPLUAL(String s) {
if (!s.trim().isEmpty()) {
WPLUAL = Double.parseDouble(s);
} else {
WPLUAL = Double.NaN;
}
}

protected final void initWPLUAR(String s) {
if (!s.trim().isEmpty()) {
WPLUAR = Byte.parseByte(s);
} else {
WPLUAR = Byte.MIN_VALUE;
}
}

protected final void initWPLUAU(String s) {
if (!s.trim().isEmpty()) {
WPLUAU = Double.parseDouble(s);
} else {
WPLUAU = Double.NaN;
}
}

protected final void initWPLUME(String s) {
if (!s.trim().isEmpty()) {
WPLUME = Byte.parseByte(s);
} else {
WPLUME = Byte.MIN_VALUE;
}
}

protected final void initWPLUML(String s) {
if (!s.trim().isEmpty()) {
WPLUML = Integer.parseInt(s);
} else {
WPLUML = Integer.MIN_VALUE;
}
}

protected final void initWPLUMR(String s) {
if (!s.trim().isEmpty()) {
WPLUMR = Byte.parseByte(s);
} else {
WPLUMR = Byte.MIN_VALUE;
}
}

protected final void initWPLUMU(String s) {
if (!s.trim().isEmpty()) {
WPLUMU = Integer.parseInt(s);
} else {
WPLUMU = Integer.MIN_VALUE;
}
}

protected final void initWPLUPA(String s) {
if (!s.trim().isEmpty()) {
WPLUPA = Double.parseDouble(s);
} else {
WPLUPA = Double.NaN;
}
}

protected final void initWPLUPS(String s) {
if (!s.trim().isEmpty()) {
WPLUPS = Byte.parseByte(s);
} else {
WPLUPS = Byte.MIN_VALUE;
}
}

protected final void initWPMALA(String s) {
if (!s.trim().isEmpty()) {
WPMALA = Integer.parseInt(s);
} else {
WPMALA = Integer.MIN_VALUE;
}
}

protected final void initWPMANPP(String s) {
if (!s.trim().isEmpty()) {
WPMANPP = Byte.parseByte(s);
} else {
WPMANPP = Byte.MIN_VALUE;
}
}

protected final void initWPMANSP(String s) {
if (!s.trim().isEmpty()) {
WPMANSP = Byte.parseByte(s);
} else {
WPMANSP = Byte.MIN_VALUE;
}
}

protected final void initWPMFQ(String s) {
if (!s.trim().isEmpty()) {
WPMFQ = Byte.parseByte(s);
} else {
WPMFQ = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC(String s) {
if (!s.trim().isEmpty()) {
WPMFRC = Byte.parseByte(s);
} else {
WPMFRC = Byte.MIN_VALUE;
}
}

protected final void initWPMHIE(String s) {
if (!s.trim().isEmpty()) {
WPMHIE = Byte.parseByte(s);
} else {
WPMHIE = Byte.MIN_VALUE;
}
}

protected final void initWPMHIL(String s) {
if (!s.trim().isEmpty()) {
WPMHIL = Short.parseShort(s);
} else {
WPMHIL = Short.MIN_VALUE;
}
}

protected final void initWPMHIR(String s) {
if (!s.trim().isEmpty()) {
WPMHIR = Byte.parseByte(s);
} else {
WPMHIR = Byte.MIN_VALUE;
}
}

protected final void initWPMHIU(String s) {
if (!s.trim().isEmpty()) {
WPMHIU = Short.parseShort(s);
} else {
WPMHIU = Short.MIN_VALUE;
}
}

protected final void initWPMORE(String s) {
if (!s.trim().isEmpty()) {
WPMORE = Byte.parseByte(s);
} else {
WPMORE = Byte.MIN_VALUE;
}
}

protected final void initWPMORP(String s) {
if (!s.trim().isEmpty()) {
WPMORP = Byte.parseByte(s);
} else {
WPMORP = Byte.MIN_VALUE;
}
}

protected final void initWPMPAH(String s) {
if (!s.trim().isEmpty()) {
WPMPAH = Integer.parseInt(s);
} else {
WPMPAH = Integer.MIN_VALUE;
}
}

protected final void initWPMSAH(String s) {
if (!s.trim().isEmpty()) {
WPMSAH = Integer.parseInt(s);
} else {
WPMSAH = Integer.MIN_VALUE;
}
}

protected final void initWPMSFQ(String s) {
if (!s.trim().isEmpty()) {
WPMSFQ = Byte.parseByte(s);
} else {
WPMSFQ = Byte.MIN_VALUE;
}
}

protected final void initWPMSH(String s) {
if (!s.trim().isEmpty()) {
WPMSH = Integer.parseInt(s);
} else {
WPMSH = Integer.MIN_VALUE;
}
}

protected final void initWPMSQ(String s) {
if (!s.trim().isEmpty()) {
WPMSQ = Byte.parseByte(s);
} else {
WPMSQ = Byte.MIN_VALUE;
}
}

protected final void initWPMSSQ(String s) {
if (!s.trim().isEmpty()) {
WPMSSQ = Byte.parseByte(s);
} else {
WPMSSQ = Byte.MIN_VALUE;
}
}

protected final void initWPMSTQ(String s) {
if (!s.trim().isEmpty()) {
WPMSTQ = Byte.parseByte(s);
} else {
WPMSTQ = Byte.MIN_VALUE;
}
}

protected final void initWPMTQ(String s) {
if (!s.trim().isEmpty()) {
WPMTQ = Byte.parseByte(s);
} else {
WPMTQ = Byte.MIN_VALUE;
}
}

protected final void initWPMYNJ(String s) {
if (!s.trim().isEmpty()) {
WPMYNJ = Byte.parseByte(s);
} else {
WPMYNJ = Byte.MIN_VALUE;
}
}

protected final void initWPNCBM85(String s) {
if (!s.trim().isEmpty()) {
WPNCBM85 = Byte.parseByte(s);
} else {
WPNCBM85 = Byte.MIN_VALUE;
}
}

protected final void initWPNCBM86(String s) {
if (!s.trim().isEmpty()) {
WPNCBM86 = Byte.parseByte(s);
} else {
WPNCBM86 = Byte.MIN_VALUE;
}
}

protected final void initWPNCBMAD(String s) {
if (!s.trim().isEmpty()) {
WPNCBMAD = Byte.parseByte(s);
} else {
WPNCBMAD = Byte.MIN_VALUE;
}
}

protected final void initWPNCBMCO(String s) {
if (!s.trim().isEmpty()) {
WPNCBMCO = Byte.parseByte(s);
} else {
WPNCBMCO = Byte.MIN_VALUE;
}
}

protected final void initWPNCBMFL(String s) {
if (!s.trim().isEmpty()) {
WPNCBMFL = Byte.parseByte(s);
} else {
WPNCBMFL = Byte.MIN_VALUE;
}
}

protected final void initWPNCBMHO(String s) {
if (!s.trim().isEmpty()) {
WPNCBMHO = Byte.parseByte(s);
} else {
WPNCBMHO = Byte.MIN_VALUE;
}
}

protected final void initWPNCBMHR(String s) {
if (!s.trim().isEmpty()) {
WPNCBMHR = Byte.parseByte(s);
} else {
WPNCBMHR = Byte.MIN_VALUE;
}
}

protected final void initWPNCBMME(String s) {
if (!s.trim().isEmpty()) {
WPNCBMME = Byte.parseByte(s);
} else {
WPNCBMME = Byte.MIN_VALUE;
}
}

protected final void initWPNCBMPH(String s) {
if (!s.trim().isEmpty()) {
WPNCBMPH = Byte.parseByte(s);
} else {
WPNCBMPH = Byte.MIN_VALUE;
}
}

protected final void initWPNCH96(String s) {
if (!s.trim().isEmpty()) {
WPNCH96 = Byte.parseByte(s);
} else {
WPNCH96 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHAD(String s) {
if (!s.trim().isEmpty()) {
WPNCHAD = Byte.parseByte(s);
} else {
WPNCHAD = Byte.MIN_VALUE;
}
}

protected final void initWPNCHB85(String s) {
if (!s.trim().isEmpty()) {
WPNCHB85 = Byte.parseByte(s);
} else {
WPNCHB85 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHBAD(String s) {
if (!s.trim().isEmpty()) {
WPNCHBAD = Byte.parseByte(s);
} else {
WPNCHBAD = Byte.MIN_VALUE;
}
}

protected final void initWPNCHBFL(String s) {
if (!s.trim().isEmpty()) {
WPNCHBFL = Byte.parseByte(s);
} else {
WPNCHBFL = Byte.MIN_VALUE;
}
}

protected final void initWPNCHBHO(String s) {
if (!s.trim().isEmpty()) {
WPNCHBHO = Byte.parseByte(s);
} else {
WPNCHBHO = Byte.MIN_VALUE;
}
}

protected final void initWPNCHBHR(String s) {
if (!s.trim().isEmpty()) {
WPNCHBHR = Byte.parseByte(s);
} else {
WPNCHBHR = Byte.MIN_VALUE;
}
}

protected final void initWPNCHBME(String s) {
if (!s.trim().isEmpty()) {
WPNCHBME = Byte.parseByte(s);
} else {
WPNCHBME = Byte.MIN_VALUE;
}
}

protected final void initWPNCHBPH(String s) {
if (!s.trim().isEmpty()) {
WPNCHBPH = Byte.parseByte(s);
} else {
WPNCHBPH = Byte.MIN_VALUE;
}
}

protected final void initWPNCHFL(String s) {
if (!s.trim().isEmpty()) {
WPNCHFL = Byte.parseByte(s);
} else {
WPNCHFL = Byte.MIN_VALUE;
}
}

protected final void initWPNCHGA(String s) {
if (!s.trim().isEmpty()) {
WPNCHGA = Byte.parseByte(s);
} else {
WPNCHGA = Byte.MIN_VALUE;
}
}

protected final void initWPNCHGN(String s) {
if (!s.trim().isEmpty()) {
WPNCHGN = Byte.parseByte(s);
} else {
WPNCHGN = Byte.MIN_VALUE;
}
}

protected final void initWPNCHGO(String s) {
if (!s.trim().isEmpty()) {
WPNCHGO = Byte.parseByte(s);
} else {
WPNCHGO = Byte.MIN_VALUE;
}
}

protected final void initWPNCHHO(String s) {
if (!s.trim().isEmpty()) {
WPNCHHO = Byte.parseByte(s);
} else {
WPNCHHO = Byte.MIN_VALUE;
}
}

protected final void initWPNCHHR(String s) {
if (!s.trim().isEmpty()) {
WPNCHHR = Byte.parseByte(s);
} else {
WPNCHHR = Byte.MIN_VALUE;
}
}

protected final void initWPNCHM85(String s) {
if (!s.trim().isEmpty()) {
WPNCHM85 = Byte.parseByte(s);
} else {
WPNCHM85 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHM86(String s) {
if (!s.trim().isEmpty()) {
WPNCHM86 = Byte.parseByte(s);
} else {
WPNCHM86 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHM96(String s) {
if (!s.trim().isEmpty()) {
WPNCHM96 = Byte.parseByte(s);
} else {
WPNCHM96 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHMAD(String s) {
if (!s.trim().isEmpty()) {
WPNCHMAD = Byte.parseByte(s);
} else {
WPNCHMAD = Byte.MIN_VALUE;
}
}

protected final void initWPNCHMCO(String s) {
if (!s.trim().isEmpty()) {
WPNCHMCO = Byte.parseByte(s);
} else {
WPNCHMCO = Byte.MIN_VALUE;
}
}

protected final void initWPNCHME(String s) {
if (!s.trim().isEmpty()) {
WPNCHME = Byte.parseByte(s);
} else {
WPNCHME = Byte.MIN_VALUE;
}
}

protected final void initWPNCHMFL(String s) {
if (!s.trim().isEmpty()) {
WPNCHMFL = Byte.parseByte(s);
} else {
WPNCHMFL = Byte.MIN_VALUE;
}
}

protected final void initWPNCHMHO(String s) {
if (!s.trim().isEmpty()) {
WPNCHMHO = Byte.parseByte(s);
} else {
WPNCHMHO = Byte.MIN_VALUE;
}
}

protected final void initWPNCHMHR(String s) {
if (!s.trim().isEmpty()) {
WPNCHMHR = Byte.parseByte(s);
} else {
WPNCHMHR = Byte.MIN_VALUE;
}
}

protected final void initWPNCHMME(String s) {
if (!s.trim().isEmpty()) {
WPNCHMME = Byte.parseByte(s);
} else {
WPNCHMME = Byte.MIN_VALUE;
}
}

protected final void initWPNCHMPH(String s) {
if (!s.trim().isEmpty()) {
WPNCHMPH = Byte.parseByte(s);
} else {
WPNCHMPH = Byte.MIN_VALUE;
}
}

protected final void initWPNCHPH(String s) {
if (!s.trim().isEmpty()) {
WPNCHPH = Byte.parseByte(s);
} else {
WPNCHPH = Byte.MIN_VALUE;
}
}

protected final void initWPNEW(String s) {
if (!s.trim().isEmpty()) {
WPNEW = Byte.parseByte(s);
} else {
WPNEW = Byte.MIN_VALUE;
}
}

protected final void initWPNEWP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
WPNEWP = false;
} else {
WPNEWP = true;
}
}
}

protected final void initWPNLK95(String s) {
if (!s.trim().isEmpty()) {
WPNLK95 = Byte.parseByte(s);
} else {
WPNLK95 = Byte.MIN_VALUE;
}
}

protected final void initWPNLKDI(String s) {
if (!s.trim().isEmpty()) {
WPNLKDI = Byte.parseByte(s);
} else {
WPNLKDI = Byte.MIN_VALUE;
}
}

protected final void initWPNLKLO(String s) {
if (!s.trim().isEmpty()) {
WPNLKLO = Byte.parseByte(s);
} else {
WPNLKLO = Byte.MIN_VALUE;
}
}

protected final void initWPNLKM85(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNLKM85 = false;
} else {
WPNLKM85 = true;
}
}
}

protected final void initWPNLKM86(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNLKM86 = false;
} else {
WPNLKM86 = true;
}
}
}

protected final void initWPNLKMAC(String s) {
if (!s.trim().isEmpty()) {
WPNLKMAC = Byte.parseByte(s);
} else {
WPNLKMAC = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMCM(String s) {
if (!s.trim().isEmpty()) {
WPNLKMCM = Byte.parseByte(s);
} else {
WPNLKMCM = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMCN(String s) {
if (!s.trim().isEmpty()) {
WPNLKMCN = Byte.parseByte(s);
} else {
WPNLKMCN = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMCO(String s) {
if (!s.trim().isEmpty()) {
WPNLKMCO = Byte.parseByte(s);
} else {
WPNLKMCO = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMDE(String s) {
if (!s.trim().isEmpty()) {
WPNLKMDE = Byte.parseByte(s);
} else {
WPNLKMDE = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMDI(String s) {
if (!s.trim().isEmpty()) {
WPNLKMDI = Byte.parseByte(s);
} else {
WPNLKMDI = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMEN(String s) {
if (!s.trim().isEmpty()) {
WPNLKMEN = Byte.parseByte(s);
} else {
WPNLKMEN = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMFI(String s) {
if (!s.trim().isEmpty()) {
WPNLKMFI = Byte.parseByte(s);
} else {
WPNLKMFI = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMFR(String s) {
if (!s.trim().isEmpty()) {
WPNLKMFR = Byte.parseByte(s);
} else {
WPNLKMFR = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMHR(String s) {
if (!s.trim().isEmpty()) {
WPNLKMHR = Byte.parseByte(s);
} else {
WPNLKMHR = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMLO(String s) {
if (!s.trim().isEmpty()) {
WPNLKMLO = Byte.parseByte(s);
} else {
WPNLKMLO = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMNO(String s) {
if (!s.trim().isEmpty()) {
WPNLKMNO = Byte.parseByte(s);
} else {
WPNLKMNO = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMPA(String s) {
if (!s.trim().isEmpty()) {
WPNLKMPA = Byte.parseByte(s);
} else {
WPNLKMPA = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMPE(String s) {
if (!s.trim().isEmpty()) {
WPNLKMPE = Byte.parseByte(s);
} else {
WPNLKMPE = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMRT(String s) {
if (!s.trim().isEmpty()) {
WPNLKMRT = Byte.parseByte(s);
} else {
WPNLKMRT = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMSE(String s) {
if (!s.trim().isEmpty()) {
WPNLKMSE = Byte.parseByte(s);
} else {
WPNLKMSE = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMSU(String s) {
if (!s.trim().isEmpty()) {
WPNLKMSU = Byte.parseByte(s);
} else {
WPNLKMSU = Byte.MIN_VALUE;
}
}

protected final void initWPNLKPA(String s) {
if (!s.trim().isEmpty()) {
WPNLKPA = Byte.parseByte(s);
} else {
WPNLKPA = Byte.MIN_VALUE;
}
}

protected final void initWPNLKPE(String s) {
if (!s.trim().isEmpty()) {
WPNLKPE = Byte.parseByte(s);
} else {
WPNLKPE = Byte.MIN_VALUE;
}
}

protected final void initWPNLKRT(String s) {
if (!s.trim().isEmpty()) {
WPNLKRT = Byte.parseByte(s);
} else {
WPNLKRT = Byte.MIN_VALUE;
}
}

protected final void initWPNLKSU(String s) {
if (!s.trim().isEmpty()) {
WPNLKSU = Byte.parseByte(s);
} else {
WPNLKSU = Byte.MIN_VALUE;
}
}

protected final void initWPNPENS(String s) {
if (!s.trim().isEmpty()) {
WPNPENS = Byte.parseByte(s);
} else {
WPNPENS = Byte.MIN_VALUE;
}
}

protected final void initWPOCHG(String s) {
if (!s.trim().isEmpty()) {
WPOCHG = Byte.parseByte(s);
} else {
WPOCHG = Byte.MIN_VALUE;
}
}

protected final void initWPOJ(String s) {
if (!s.trim().isEmpty()) {
WPOJ = Byte.parseByte(s);
} else {
WPOJ = Byte.MIN_VALUE;
}
}

protected final void initWPOJ2(String s) {
if (!s.trim().isEmpty()) {
WPOJ2 = Byte.parseByte(s);
} else {
WPOJ2 = Byte.MIN_VALUE;
}
}

protected final void initWPOJ3(String s) {
if (!s.trim().isEmpty()) {
WPOJ3 = Byte.parseByte(s);
} else {
WPOJ3 = Byte.MIN_VALUE;
}
}

protected final void initWPOJ4(String s) {
if (!s.trim().isEmpty()) {
WPOJ4 = Byte.parseByte(s);
} else {
WPOJ4 = Byte.MIN_VALUE;
}
}

protected final void initWPOJ5(String s) {
if (!s.trim().isEmpty()) {
WPOJ5 = Byte.parseByte(s);
} else {
WPOJ5 = Byte.MIN_VALUE;
}
}

protected final void initWPOWB(String s) {
if (!s.trim().isEmpty()) {
WPOWB = Byte.parseByte(s);
} else {
WPOWB = Byte.MIN_VALUE;
}
}

protected final void initWPOWB2(String s) {
if (!s.trim().isEmpty()) {
WPOWB2 = Byte.parseByte(s);
} else {
WPOWB2 = Byte.MIN_VALUE;
}
}

protected final void initWPOWB3(String s) {
if (!s.trim().isEmpty()) {
WPOWB3 = Byte.parseByte(s);
} else {
WPOWB3 = Byte.MIN_VALUE;
}
}

protected final void initWPOWB4(String s) {
if (!s.trim().isEmpty()) {
WPOWB4 = Byte.parseByte(s);
} else {
WPOWB4 = Byte.MIN_VALUE;
}
}

protected final void initWPOWB5(String s) {
if (!s.trim().isEmpty()) {
WPOWB5 = Byte.parseByte(s);
} else {
WPOWB5 = Byte.MIN_VALUE;
}
}

protected final void initWPPEAE(String s) {
if (!s.trim().isEmpty()) {
WPPEAE = Byte.parseByte(s);
} else {
WPPEAE = Byte.MIN_VALUE;
}
}

protected final void initWPPEAL(String s) {
if (!s.trim().isEmpty()) {
WPPEAL = Integer.parseInt(s);
} else {
WPPEAL = Integer.MIN_VALUE;
}
}

protected final void initWPPEAR(String s) {
if (!s.trim().isEmpty()) {
WPPEAR = Byte.parseByte(s);
} else {
WPPEAR = Byte.MIN_VALUE;
}
}

protected final void initWPPEAU(String s) {
if (!s.trim().isEmpty()) {
WPPEAU = Integer.parseInt(s);
} else {
WPPEAU = Integer.MIN_VALUE;
}
}

protected final void initWPPENN(String s) {
if (!s.trim().isEmpty()) {
WPPENN = Byte.parseByte(s);
} else {
WPPENN = Byte.MIN_VALUE;
}
}

protected final void initWPPENT(String s) {
if (!s.trim().isEmpty()) {
WPPENT = Byte.parseByte(s);
} else {
WPPENT = Byte.MIN_VALUE;
}
}

protected final void initWPPETE(String s) {
if (!s.trim().isEmpty()) {
WPPETE = Byte.parseByte(s);
} else {
WPPETE = Byte.MIN_VALUE;
}
}

protected final void initWPPETL(String s) {
if (!s.trim().isEmpty()) {
WPPETL = Integer.parseInt(s);
} else {
WPPETL = Integer.MIN_VALUE;
}
}

protected final void initWPPETR(String s) {
if (!s.trim().isEmpty()) {
WPPETR = Byte.parseByte(s);
} else {
WPPETR = Byte.MIN_VALUE;
}
}

protected final void initWPPETU(String s) {
if (!s.trim().isEmpty()) {
WPPETU = Integer.parseInt(s);
} else {
WPPETU = Integer.MIN_VALUE;
}
}

protected final void initWPPFDM(String s) {
if (!s.trim().isEmpty()) {
WPPFDM = Byte.parseByte(s);
} else {
WPPFDM = Byte.MIN_VALUE;
}
}

protected final void initWPPFDY(String s) {
if (!s.trim().isEmpty()) {
WPPFDY = Short.parseShort(s);
} else {
WPPFDY = Short.MIN_VALUE;
}
}

protected final void initWPPFEX(String s) {
if (!s.trim().isEmpty()) {
WPPFEX = Byte.parseByte(s);
} else {
WPPFEX = Byte.MIN_VALUE;
}
}

protected final void initWPPFVE(String s) {
if (!s.trim().isEmpty()) {
WPPFVE = Byte.parseByte(s);
} else {
WPPFVE = Byte.MIN_VALUE;
}
}

protected final void initWPPFVL(String s) {
if (!s.trim().isEmpty()) {
WPPFVL = Double.parseDouble(s);
} else {
WPPFVL = Double.NaN;
}
}

protected final void initWPPFVR(String s) {
if (!s.trim().isEmpty()) {
WPPFVR = Byte.parseByte(s);
} else {
WPPFVR = Byte.MIN_VALUE;
}
}

protected final void initWPPFVU(String s) {
if (!s.trim().isEmpty()) {
WPPFVU = Double.parseDouble(s);
} else {
WPPFVU = Double.NaN;
}
}

protected final void initWPPREV(String s) {
if (!s.trim().isEmpty()) {
WPPREV = Byte.parseByte(s);
} else {
WPPREV = Byte.MIN_VALUE;
}
}

protected final void initWPPROFE(String s) {
if (!s.trim().isEmpty()) {
WPPROFE = Byte.parseByte(s);
} else {
WPPROFE = Byte.MIN_VALUE;
}
}

protected final void initWPPROFL(String s) {
if (!s.trim().isEmpty()) {
WPPROFL = Integer.parseInt(s);
} else {
WPPROFL = Integer.MIN_VALUE;
}
}

protected final void initWPPROFR(String s) {
if (!s.trim().isEmpty()) {
WPPROFR = Byte.parseByte(s);
} else {
WPPROFR = Byte.MIN_VALUE;
}
}

protected final void initWPPROFU(String s) {
if (!s.trim().isEmpty()) {
WPPROFU = Integer.parseInt(s);
} else {
WPPROFU = Integer.MIN_VALUE;
}
}

protected final void initWPPS(String s) {
if (!s.trim().isEmpty()) {
WPPS = Byte.parseByte(s);
} else {
WPPS = Byte.MIN_VALUE;
}
}

protected final void initWPPS95(String s) {
if (!s.trim().isEmpty()) {
WPPS95 = Byte.parseByte(s);
} else {
WPPS95 = Byte.MIN_VALUE;
}
}

protected final void initWPPSAF(String s) {
if (!s.trim().isEmpty()) {
WPPSAF = Byte.parseByte(s);
} else {
WPPSAF = Byte.MIN_VALUE;
}
}

protected final void initWPPSEL(String s) {
if (!s.trim().isEmpty()) {
WPPSEL = Byte.parseByte(s);
} else {
WPPSEL = Byte.MIN_VALUE;
}
}

protected final void initWPPSEX(String s) {
if (!s.trim().isEmpty()) {
WPPSEX = Byte.parseByte(s);
} else {
WPPSEX = Byte.MIN_VALUE;
}
}

protected final void initWPPSM85(String s) {
if (!s.trim().isEmpty()) {
WPPSM85 = Byte.parseByte(s);
} else {
WPPSM85 = Byte.MIN_VALUE;
}
}

protected final void initWPPSM86(String s) {
if (!s.trim().isEmpty()) {
WPPSM86 = Byte.parseByte(s);
} else {
WPPSM86 = Byte.MIN_VALUE;
}
}

protected final void initWPPSM96(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPSM96 = false;
} else {
WPPSM96 = true;
}
}
}

protected final void initWPPSMAF(String s) {
if (!s.trim().isEmpty()) {
WPPSMAF = Byte.parseByte(s);
} else {
WPPSMAF = Byte.MIN_VALUE;
}
}

protected final void initWPPSMAG(String s) {
if (!s.trim().isEmpty()) {
WPPSMAG = Byte.parseByte(s);
} else {
WPPSMAG = Byte.MIN_VALUE;
}
}

protected final void initWPPSMAL(String s) {
if (!s.trim().isEmpty()) {
WPPSMAL = Byte.parseByte(s);
} else {
WPPSMAL = Byte.MIN_VALUE;
}
}

protected final void initWPPSMDL(String s) {
if (!s.trim().isEmpty()) {
WPPSMDL = Byte.parseByte(s);
} else {
WPPSMDL = Byte.MIN_VALUE;
}
}

protected final void initWPPSMEL(String s) {
if (!s.trim().isEmpty()) {
WPPSMEL = Byte.parseByte(s);
} else {
WPPSMEL = Byte.MIN_VALUE;
}
}

protected final void initWPPSMEX(String s) {
if (!s.trim().isEmpty()) {
WPPSMEX = Byte.parseByte(s);
} else {
WPPSMEX = Byte.MIN_VALUE;
}
}

protected final void initWPPSMHR(String s) {
if (!s.trim().isEmpty()) {
WPPSMHR = Byte.parseByte(s);
} else {
WPPSMHR = Byte.MIN_VALUE;
}
}

protected final void initWPPSMOT(String s) {
if (!s.trim().isEmpty()) {
WPPSMOT = Byte.parseByte(s);
} else {
WPPSMOT = Byte.MIN_VALUE;
}
}

protected final void initWPPSOT(String s) {
if (!s.trim().isEmpty()) {
WPPSOT = Byte.parseByte(s);
} else {
WPPSOT = Byte.MIN_VALUE;
}
}

protected final void initWPPSPC(String s) {
if (!s.trim().isEmpty()) {
WPPSPC = Byte.parseByte(s);
} else {
WPPSPC = Byte.MIN_VALUE;
}
}

protected final void initWPPYFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPYFE = false;
} else {
WPPYFE = true;
}
}
}

protected final void initWPPYFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPYFL = false;
} else {
WPPYFL = true;
}
}
}

protected final void initWPPYFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPYFR = false;
} else {
WPPYFR = true;
}
}
}

protected final void initWPPYFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPYFU = false;
} else {
WPPYFU = true;
}
}
}

protected final void initWPPYME(String s) {
if (!s.trim().isEmpty()) {
WPPYME = Byte.parseByte(s);
} else {
WPPYME = Byte.MIN_VALUE;
}
}

protected final void initWPPYML(String s) {
if (!s.trim().isEmpty()) {
WPPYML = Short.parseShort(s);
} else {
WPPYML = Short.MIN_VALUE;
}
}

protected final void initWPPYMR(String s) {
if (!s.trim().isEmpty()) {
WPPYMR = Byte.parseByte(s);
} else {
WPPYMR = Byte.MIN_VALUE;
}
}

protected final void initWPPYMU(String s) {
if (!s.trim().isEmpty()) {
WPPYMU = Short.parseShort(s);
} else {
WPPYMU = Short.MIN_VALUE;
}
}

protected final void initWPPYOE(String s) {
if (!s.trim().isEmpty()) {
WPPYOE = Byte.parseByte(s);
} else {
WPPYOE = Byte.MIN_VALUE;
}
}

protected final void initWPPYOL(String s) {
if (!s.trim().isEmpty()) {
WPPYOL = Short.parseShort(s);
} else {
WPPYOL = Short.MIN_VALUE;
}
}

protected final void initWPPYOR(String s) {
if (!s.trim().isEmpty()) {
WPPYOR = Byte.parseByte(s);
} else {
WPPYOR = Byte.MIN_VALUE;
}
}

protected final void initWPPYOU(String s) {
if (!s.trim().isEmpty()) {
WPPYOU = Short.parseShort(s);
} else {
WPPYOU = Short.MIN_VALUE;
}
}

protected final void initWPPYWE(String s) {
if (!s.trim().isEmpty()) {
WPPYWE = Byte.parseByte(s);
} else {
WPPYWE = Byte.MIN_VALUE;
}
}

protected final void initWPPYWL(String s) {
if (!s.trim().isEmpty()) {
WPPYWL = Byte.parseByte(s);
} else {
WPPYWL = Byte.MIN_VALUE;
}
}

protected final void initWPPYWR(String s) {
if (!s.trim().isEmpty()) {
WPPYWR = Byte.parseByte(s);
} else {
WPPYWR = Byte.MIN_VALUE;
}
}

protected final void initWPPYWU(String s) {
if (!s.trim().isEmpty()) {
WPPYWU = Short.parseShort(s);
} else {
WPPYWU = Short.MIN_VALUE;
}
}

protected final void initWPPYYE(String s) {
if (!s.trim().isEmpty()) {
WPPYYE = Byte.parseByte(s);
} else {
WPPYYE = Byte.MIN_VALUE;
}
}

protected final void initWPPYYL(String s) {
if (!s.trim().isEmpty()) {
WPPYYL = Short.parseShort(s);
} else {
WPPYYL = Short.MIN_VALUE;
}
}

protected final void initWPPYYR(String s) {
if (!s.trim().isEmpty()) {
WPPYYR = Byte.parseByte(s);
} else {
WPPYYR = Byte.MIN_VALUE;
}
}

protected final void initWPPYYU(String s) {
if (!s.trim().isEmpty()) {
WPPYYU = Short.parseShort(s);
} else {
WPPYYU = Short.MIN_VALUE;
}
}

protected final void initWPQN(String s) {
if (!s.trim().isEmpty()) {
WPQN = Byte.parseByte(s);
} else {
WPQN = Byte.MIN_VALUE;
}
}

protected final void initWPRC95(String s) {
if (!s.trim().isEmpty()) {
WPRC95 = Byte.parseByte(s);
} else {
WPRC95 = Byte.MIN_VALUE;
}
}

protected final void initWPRCM85(String s) {
if (!s.trim().isEmpty()) {
WPRCM85 = Byte.parseByte(s);
} else {
WPRCM85 = Byte.MIN_VALUE;
}
}

protected final void initWPRCM86(String s) {
if (!s.trim().isEmpty()) {
WPRCM86 = Byte.parseByte(s);
} else {
WPRCM86 = Byte.MIN_VALUE;
}
}

protected final void initWPRCMAF(String s) {
if (!s.trim().isEmpty()) {
WPRCMAF = Byte.parseByte(s);
} else {
WPRCMAF = Byte.MIN_VALUE;
}
}

protected final void initWPRCMMO(String s) {
if (!s.trim().isEmpty()) {
WPRCMMO = Byte.parseByte(s);
} else {
WPRCMMO = Byte.MIN_VALUE;
}
}

protected final void initWPRCMNK(String s) {
if (!s.trim().isEmpty()) {
WPRCMNK = Byte.parseByte(s);
} else {
WPRCMNK = Byte.MIN_VALUE;
}
}

protected final void initWPRCMO(String s) {
if (!s.trim().isEmpty()) {
WPRCMO = Byte.parseByte(s);
} else {
WPRCMO = Byte.MIN_VALUE;
}
}

protected final void initWPRCMOH(String s) {
if (!s.trim().isEmpty()) {
WPRCMOH = Byte.parseByte(s);
} else {
WPRCMOH = Byte.MIN_VALUE;
}
}

protected final void initWPRCMPU(String s) {
if (!s.trim().isEmpty()) {
WPRCMPU = Byte.parseByte(s);
} else {
WPRCMPU = Byte.MIN_VALUE;
}
}

protected final void initWPRCMRE(String s) {
if (!s.trim().isEmpty()) {
WPRCMRE = Byte.parseByte(s);
} else {
WPRCMRE = Byte.MIN_VALUE;
}
}

protected final void initWPRCMRI(String s) {
if (!s.trim().isEmpty()) {
WPRCMRI = Byte.parseByte(s);
} else {
WPRCMRI = Byte.MIN_VALUE;
}
}

protected final void initWPRCMST(String s) {
if (!s.trim().isEmpty()) {
WPRCMST = Byte.parseByte(s);
} else {
WPRCMST = Byte.MIN_VALUE;
}
}

protected final void initWPRCMUN(String s) {
if (!s.trim().isEmpty()) {
WPRCMUN = Byte.parseByte(s);
} else {
WPRCMUN = Byte.MIN_VALUE;
}
}

protected final void initWPRCPU(String s) {
if (!s.trim().isEmpty()) {
WPRCPU = Byte.parseByte(s);
} else {
WPRCPU = Byte.MIN_VALUE;
}
}

protected final void initWPRCRE(String s) {
if (!s.trim().isEmpty()) {
WPRCRE = Byte.parseByte(s);
} else {
WPRCRE = Byte.MIN_VALUE;
}
}

protected final void initWPRCRI(String s) {
if (!s.trim().isEmpty()) {
WPRCRI = Byte.parseByte(s);
} else {
WPRCRI = Byte.MIN_VALUE;
}
}

protected final void initWPRCST(String s) {
if (!s.trim().isEmpty()) {
WPRCST = Byte.parseByte(s);
} else {
WPRCST = Byte.MIN_VALUE;
}
}

protected final void initWPREA95(String s) {
if (!s.trim().isEmpty()) {
WPREA95 = Byte.parseByte(s);
} else {
WPREA95 = Byte.MIN_VALUE;
}
}

protected final void initWPREA96(String s) {
if (!s.trim().isEmpty()) {
WPREA96 = Byte.parseByte(s);
} else {
WPREA96 = Byte.MIN_VALUE;
}
}

protected final void initWPREACH(String s) {
if (!s.trim().isEmpty()) {
WPREACH = Byte.parseByte(s);
} else {
WPREACH = Byte.MIN_VALUE;
}
}

protected final void initWPREADT(String s) {
if (!s.trim().isEmpty()) {
WPREADT = Byte.parseByte(s);
} else {
WPREADT = Byte.MIN_VALUE;
}
}

protected final void initWPREAEN(String s) {
if (!s.trim().isEmpty()) {
WPREAEN = Byte.parseByte(s);
} else {
WPREAEN = Byte.MIN_VALUE;
}
}

protected final void initWPREAFA(String s) {
if (!s.trim().isEmpty()) {
WPREAFA = Byte.parseByte(s);
} else {
WPREAFA = Byte.MIN_VALUE;
}
}

protected final void initWPREAFI(String s) {
if (!s.trim().isEmpty()) {
WPREAFI = Byte.parseByte(s);
} else {
WPREAFI = Byte.MIN_VALUE;
}
}

protected final void initWPREAM85(String s) {
if (!s.trim().isEmpty()) {
WPREAM85 = Byte.parseByte(s);
} else {
WPREAM85 = Byte.MIN_VALUE;
}
}

protected final void initWPREAM86(String s) {
if (!s.trim().isEmpty()) {
WPREAM86 = Byte.parseByte(s);
} else {
WPREAM86 = Byte.MIN_VALUE;
}
}

protected final void initWPREAM96(String s) {
if (!s.trim().isEmpty()) {
WPREAM96 = Byte.parseByte(s);
} else {
WPREAM96 = Byte.MIN_VALUE;
}
}

protected final void initWPREAMCH(String s) {
if (!s.trim().isEmpty()) {
WPREAMCH = Byte.parseByte(s);
} else {
WPREAMCH = Byte.MIN_VALUE;
}
}

protected final void initWPREAMDT(String s) {
if (!s.trim().isEmpty()) {
WPREAMDT = Byte.parseByte(s);
} else {
WPREAMDT = Byte.MIN_VALUE;
}
}

protected final void initWPREAMEN(String s) {
if (!s.trim().isEmpty()) {
WPREAMEN = Byte.parseByte(s);
} else {
WPREAMEN = Byte.MIN_VALUE;
}
}

protected final void initWPREAMFA(String s) {
if (!s.trim().isEmpty()) {
WPREAMFA = Byte.parseByte(s);
} else {
WPREAMFA = Byte.MIN_VALUE;
}
}

protected final void initWPREAMFI(String s) {
if (!s.trim().isEmpty()) {
WPREAMFI = Byte.parseByte(s);
} else {
WPREAMFI = Byte.MIN_VALUE;
}
}

protected final void initWPREAMNO(String s) {
if (!s.trim().isEmpty()) {
WPREAMNO = Byte.parseByte(s);
} else {
WPREAMNO = Byte.MIN_VALUE;
}
}

protected final void initWPREAMOH(String s) {
if (!s.trim().isEmpty()) {
WPREAMOH = Byte.parseByte(s);
} else {
WPREAMOH = Byte.MIN_VALUE;
}
}

protected final void initWPREAMRE(String s) {
if (!s.trim().isEmpty()) {
WPREAMRE = Byte.parseByte(s);
} else {
WPREAMRE = Byte.MIN_VALUE;
}
}

protected final void initWPREAMRH(String s) {
if (!s.trim().isEmpty()) {
WPREAMRH = Byte.parseByte(s);
} else {
WPREAMRH = Byte.MIN_VALUE;
}
}

protected final void initWPREAMST(String s) {
if (!s.trim().isEmpty()) {
WPREAMST = Byte.parseByte(s);
} else {
WPREAMST = Byte.MIN_VALUE;
}
}

protected final void initWPREAMVR(String s) {
if (!s.trim().isEmpty()) {
WPREAMVR = Byte.parseByte(s);
} else {
WPREAMVR = Byte.MIN_VALUE;
}
}

protected final void initWPREAMYO(String s) {
if (!s.trim().isEmpty()) {
WPREAMYO = Byte.parseByte(s);
} else {
WPREAMYO = Byte.MIN_VALUE;
}
}

protected final void initWPREANO(String s) {
if (!s.trim().isEmpty()) {
WPREANO = Byte.parseByte(s);
} else {
WPREANO = Byte.MIN_VALUE;
}
}

protected final void initWPREAOH(String s) {
if (!s.trim().isEmpty()) {
WPREAOH = Byte.parseByte(s);
} else {
WPREAOH = Byte.MIN_VALUE;
}
}

protected final void initWPREARE(String s) {
if (!s.trim().isEmpty()) {
WPREARE = Byte.parseByte(s);
} else {
WPREARE = Byte.MIN_VALUE;
}
}

protected final void initWPREARH(String s) {
if (!s.trim().isEmpty()) {
WPREARH = Byte.parseByte(s);
} else {
WPREARH = Byte.MIN_VALUE;
}
}

protected final void initWPREAST(String s) {
if (!s.trim().isEmpty()) {
WPREAST = Byte.parseByte(s);
} else {
WPREAST = Byte.MIN_VALUE;
}
}

protected final void initWPREAVR(String s) {
if (!s.trim().isEmpty()) {
WPREAVR = Byte.parseByte(s);
} else {
WPREAVR = Byte.MIN_VALUE;
}
}

protected final void initWPREAYO(String s) {
if (!s.trim().isEmpty()) {
WPREAYO = Byte.parseByte(s);
} else {
WPREAYO = Byte.MIN_VALUE;
}
}

protected final void initWPRGHX(String s) {
if (!s.trim().isEmpty()) {
WPRGHX = Byte.parseByte(s);
} else {
WPRGHX = Byte.MIN_VALUE;
}
}

protected final void initWPRPENS(String s) {
if (!s.trim().isEmpty()) {
WPRPENS = Byte.parseByte(s);
} else {
WPRPENS = Byte.MIN_VALUE;
}
}

protected final void initWPRR95(String s) {
if (!s.trim().isEmpty()) {
WPRR95 = Byte.parseByte(s);
} else {
WPRR95 = Byte.MIN_VALUE;
}
}

protected final void initWPRR96(String s) {
if (!s.trim().isEmpty()) {
WPRR96 = Byte.parseByte(s);
} else {
WPRR96 = Byte.MIN_VALUE;
}
}

protected final void initWPRRAG(String s) {
if (!s.trim().isEmpty()) {
WPRRAG = Byte.parseByte(s);
} else {
WPRRAG = Byte.MIN_VALUE;
}
}

protected final void initWPRRCH(String s) {
if (!s.trim().isEmpty()) {
WPRRCH = Byte.parseByte(s);
} else {
WPRRCH = Byte.MIN_VALUE;
}
}

protected final void initWPRRDT(String s) {
if (!s.trim().isEmpty()) {
WPRRDT = Byte.parseByte(s);
} else {
WPRRDT = Byte.MIN_VALUE;
}
}

protected final void initWPRREN(String s) {
if (!s.trim().isEmpty()) {
WPRREN = Byte.parseByte(s);
} else {
WPRREN = Byte.MIN_VALUE;
}
}

protected final void initWPRRFA(String s) {
if (!s.trim().isEmpty()) {
WPRRFA = Byte.parseByte(s);
} else {
WPRRFA = Byte.MIN_VALUE;
}
}

protected final void initWPRRFI(String s) {
if (!s.trim().isEmpty()) {
WPRRFI = Byte.parseByte(s);
} else {
WPRRFI = Byte.MIN_VALUE;
}
}

protected final void initWPRRM85(String s) {
if (!s.trim().isEmpty()) {
WPRRM85 = Byte.parseByte(s);
} else {
WPRRM85 = Byte.MIN_VALUE;
}
}

protected final void initWPRRM86(String s) {
if (!s.trim().isEmpty()) {
WPRRM86 = Byte.parseByte(s);
} else {
WPRRM86 = Byte.MIN_VALUE;
}
}

protected final void initWPRRM96(String s) {
if (!s.trim().isEmpty()) {
WPRRM96 = Byte.parseByte(s);
} else {
WPRRM96 = Byte.MIN_VALUE;
}
}

protected final void initWPRRMAF(String s) {
if (!s.trim().isEmpty()) {
WPRRMAF = Byte.parseByte(s);
} else {
WPRRMAF = Byte.MIN_VALUE;
}
}

protected final void initWPRRMAG(String s) {
if (!s.trim().isEmpty()) {
WPRRMAG = Byte.parseByte(s);
} else {
WPRRMAG = Byte.MIN_VALUE;
}
}

protected final void initWPRRMCH(String s) {
if (!s.trim().isEmpty()) {
WPRRMCH = Byte.parseByte(s);
} else {
WPRRMCH = Byte.MIN_VALUE;
}
}

protected final void initWPRRMDT(String s) {
if (!s.trim().isEmpty()) {
WPRRMDT = Byte.parseByte(s);
} else {
WPRRMDT = Byte.MIN_VALUE;
}
}

protected final void initWPRRMEN(String s) {
if (!s.trim().isEmpty()) {
WPRRMEN = Byte.parseByte(s);
} else {
WPRRMEN = Byte.MIN_VALUE;
}
}

protected final void initWPRRMFA(String s) {
if (!s.trim().isEmpty()) {
WPRRMFA = Byte.parseByte(s);
} else {
WPRRMFA = Byte.MIN_VALUE;
}
}

protected final void initWPRRMFI(String s) {
if (!s.trim().isEmpty()) {
WPRRMFI = Byte.parseByte(s);
} else {
WPRRMFI = Byte.MIN_VALUE;
}
}

protected final void initWPRRMLI(String s) {
if (!s.trim().isEmpty()) {
WPRRMLI = Byte.parseByte(s);
} else {
WPRRMLI = Byte.MIN_VALUE;
}
}

protected final void initWPRRMOH(String s) {
if (!s.trim().isEmpty()) {
WPRRMOH = Byte.parseByte(s);
} else {
WPRRMOH = Byte.MIN_VALUE;
}
}

protected final void initWPRRMRE(String s) {
if (!s.trim().isEmpty()) {
WPRRMRE = Byte.parseByte(s);
} else {
WPRRMRE = Byte.MIN_VALUE;
}
}

protected final void initWPRRMRH(String s) {
if (!s.trim().isEmpty()) {
WPRRMRH = Byte.parseByte(s);
} else {
WPRRMRH = Byte.MIN_VALUE;
}
}

protected final void initWPRRMST(String s) {
if (!s.trim().isEmpty()) {
WPRRMST = Byte.parseByte(s);
} else {
WPRRMST = Byte.MIN_VALUE;
}
}

protected final void initWPRRMYO(String s) {
if (!s.trim().isEmpty()) {
WPRRMYO = Byte.parseByte(s);
} else {
WPRRMYO = Byte.MIN_VALUE;
}
}

protected final void initWPRROH(String s) {
if (!s.trim().isEmpty()) {
WPRROH = Byte.parseByte(s);
} else {
WPRROH = Byte.MIN_VALUE;
}
}

protected final void initWPRRRE(String s) {
if (!s.trim().isEmpty()) {
WPRRRE = Byte.parseByte(s);
} else {
WPRRRE = Byte.MIN_VALUE;
}
}

protected final void initWPRRRH(String s) {
if (!s.trim().isEmpty()) {
WPRRRH = Byte.parseByte(s);
} else {
WPRRRH = Byte.MIN_VALUE;
}
}

protected final void initWPRRST(String s) {
if (!s.trim().isEmpty()) {
WPRRST = Byte.parseByte(s);
} else {
WPRRST = Byte.MIN_VALUE;
}
}

protected final void initWPRRYO(String s) {
if (!s.trim().isEmpty()) {
WPRRYO = Byte.parseByte(s);
} else {
WPRRYO = Byte.MIN_VALUE;
}
}

protected final void initWPSFOR(String s) {
if (!s.trim().isEmpty()) {
WPSFOR = Byte.parseByte(s);
} else {
WPSFOR = Byte.MIN_VALUE;
}
}

protected final void initWPSJOBM(String s) {
if (!s.trim().isEmpty()) {
WPSJOBM = Byte.parseByte(s);
} else {
WPSJOBM = Byte.MIN_VALUE;
}
}

protected final void initWPSJOBY(String s) {
if (!s.trim().isEmpty()) {
WPSJOBY = Short.parseShort(s);
} else {
WPSJOBY = Short.MIN_VALUE;
}
}

protected final void initWPSN(String s) {
if (!s.trim().isEmpty()) {
WPSN = Byte.parseByte(s);
} else {
WPSN = Byte.MIN_VALUE;
}
}

protected final void initWPSPAM(String s) {
if (!s.trim().isEmpty()) {
WPSPAM = Byte.parseByte(s);
} else {
WPSPAM = Byte.MIN_VALUE;
}
}

protected final void initWPSPAW(String s) {
if (!s.trim().isEmpty()) {
WPSPAW = Byte.parseByte(s);
} else {
WPSPAW = Byte.MIN_VALUE;
}
}

protected final void initWPSPFU(String s) {
if (!s.trim().isEmpty()) {
WPSPFU = Byte.parseByte(s);
} else {
WPSPFU = Byte.MIN_VALUE;
}
}

protected final void initWPSPOU(String s) {
if (!s.trim().isEmpty()) {
WPSPOU = Integer.parseInt(s);
} else {
WPSPOU = Integer.MIN_VALUE;
}
}

protected final void initWPSPOUP(String s) {
if (!s.trim().isEmpty()) {
WPSPOUP = Byte.parseByte(s);
} else {
WPSPOUP = Byte.MIN_VALUE;
}
}

protected final void initWPSPY(String s) {
if (!s.trim().isEmpty()) {
WPSPY = Byte.parseByte(s);
} else {
WPSPY = Byte.MIN_VALUE;
}
}

protected final void initWPSRUL(String s) {
if (!s.trim().isEmpty()) {
WPSRUL = Byte.parseByte(s);
} else {
WPSRUL = Byte.MIN_VALUE;
}
}

protected final void initWPTAKP(String s) {
if (!s.trim().isEmpty()) {
WPTAKP = Byte.parseByte(s);
} else {
WPTAKP = Byte.MIN_VALUE;
}
}

protected final void initWPTAWC(String s) {
if (!s.trim().isEmpty()) {
WPTAWC = Byte.parseByte(s);
} else {
WPTAWC = Byte.MIN_VALUE;
}
}

protected final void initWPTHPFE(String s) {
if (!s.trim().isEmpty()) {
WPTHPFE = Byte.parseByte(s);
} else {
WPTHPFE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPFL(String s) {
if (!s.trim().isEmpty()) {
WPTHPFL = Short.parseShort(s);
} else {
WPTHPFL = Short.MIN_VALUE;
}
}

protected final void initWPTHPFR(String s) {
if (!s.trim().isEmpty()) {
WPTHPFR = Byte.parseByte(s);
} else {
WPTHPFR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPFU(String s) {
if (!s.trim().isEmpty()) {
WPTHPFU = Short.parseShort(s);
} else {
WPTHPFU = Short.MIN_VALUE;
}
}

protected final void initWPTHPME(String s) {
if (!s.trim().isEmpty()) {
WPTHPME = Byte.parseByte(s);
} else {
WPTHPME = Byte.MIN_VALUE;
}
}

protected final void initWPTHPML(String s) {
if (!s.trim().isEmpty()) {
WPTHPML = Short.parseShort(s);
} else {
WPTHPML = Short.MIN_VALUE;
}
}

protected final void initWPTHPMR(String s) {
if (!s.trim().isEmpty()) {
WPTHPMR = Byte.parseByte(s);
} else {
WPTHPMR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPMU(String s) {
if (!s.trim().isEmpty()) {
WPTHPMU = Short.parseShort(s);
} else {
WPTHPMU = Short.MIN_VALUE;
}
}

protected final void initWPTHPOE(String s) {
if (!s.trim().isEmpty()) {
WPTHPOE = Byte.parseByte(s);
} else {
WPTHPOE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPOL(String s) {
if (!s.trim().isEmpty()) {
WPTHPOL = Short.parseShort(s);
} else {
WPTHPOL = Short.MIN_VALUE;
}
}

protected final void initWPTHPOR(String s) {
if (!s.trim().isEmpty()) {
WPTHPOR = Byte.parseByte(s);
} else {
WPTHPOR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPOU(String s) {
if (!s.trim().isEmpty()) {
WPTHPOU = Short.parseShort(s);
} else {
WPTHPOU = Short.MIN_VALUE;
}
}

protected final void initWPTHPWE(String s) {
if (!s.trim().isEmpty()) {
WPTHPWE = Byte.parseByte(s);
} else {
WPTHPWE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPWL(String s) {
if (!s.trim().isEmpty()) {
WPTHPWL = Short.parseShort(s);
} else {
WPTHPWL = Short.MIN_VALUE;
}
}

protected final void initWPTHPWR(String s) {
if (!s.trim().isEmpty()) {
WPTHPWR = Byte.parseByte(s);
} else {
WPTHPWR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPWU(String s) {
if (!s.trim().isEmpty()) {
WPTHPWU = Short.parseShort(s);
} else {
WPTHPWU = Short.MIN_VALUE;
}
}

protected final void initWPTHPYE(String s) {
if (!s.trim().isEmpty()) {
WPTHPYE = Byte.parseByte(s);
} else {
WPTHPYE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPYL(String s) {
if (!s.trim().isEmpty()) {
WPTHPYL = Integer.parseInt(s);
} else {
WPTHPYL = Integer.MIN_VALUE;
}
}

protected final void initWPTHPYR(String s) {
if (!s.trim().isEmpty()) {
WPTHPYR = Byte.parseByte(s);
} else {
WPTHPYR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPYU(String s) {
if (!s.trim().isEmpty()) {
WPTHPYU = Integer.parseInt(s);
} else {
WPTHPYU = Integer.MIN_VALUE;
}
}

protected final void initWPUPAFE(String s) {
if (!s.trim().isEmpty()) {
WPUPAFE = Byte.parseByte(s);
} else {
WPUPAFE = Byte.MIN_VALUE;
}
}

protected final void initWPUPAFL(String s) {
if (!s.trim().isEmpty()) {
WPUPAFL = Short.parseShort(s);
} else {
WPUPAFL = Short.MIN_VALUE;
}
}

protected final void initWPUPAFR(String s) {
if (!s.trim().isEmpty()) {
WPUPAFR = Byte.parseByte(s);
} else {
WPUPAFR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAFU(String s) {
if (!s.trim().isEmpty()) {
WPUPAFU = Short.parseShort(s);
} else {
WPUPAFU = Short.MIN_VALUE;
}
}

protected final void initWPUPAME(String s) {
if (!s.trim().isEmpty()) {
WPUPAME = Byte.parseByte(s);
} else {
WPUPAME = Byte.MIN_VALUE;
}
}

protected final void initWPUPAML(String s) {
if (!s.trim().isEmpty()) {
WPUPAML = Short.parseShort(s);
} else {
WPUPAML = Short.MIN_VALUE;
}
}

protected final void initWPUPAMR(String s) {
if (!s.trim().isEmpty()) {
WPUPAMR = Byte.parseByte(s);
} else {
WPUPAMR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAMU(String s) {
if (!s.trim().isEmpty()) {
WPUPAMU = Short.parseShort(s);
} else {
WPUPAMU = Short.MIN_VALUE;
}
}

protected final void initWPUPAOE(String s) {
if (!s.trim().isEmpty()) {
WPUPAOE = Integer.parseInt(s);
} else {
WPUPAOE = Integer.MIN_VALUE;
}
}

protected final void initWPUPAOL(String s) {
if (!s.trim().isEmpty()) {
WPUPAOL = Short.parseShort(s);
} else {
WPUPAOL = Short.MIN_VALUE;
}
}

protected final void initWPUPAOR(String s) {
if (!s.trim().isEmpty()) {
WPUPAOR = Byte.parseByte(s);
} else {
WPUPAOR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAOU(String s) {
if (!s.trim().isEmpty()) {
WPUPAOU = Short.parseShort(s);
} else {
WPUPAOU = Short.MIN_VALUE;
}
}

protected final void initWPUPAWE(String s) {
if (!s.trim().isEmpty()) {
WPUPAWE = Byte.parseByte(s);
} else {
WPUPAWE = Byte.MIN_VALUE;
}
}

protected final void initWPUPAWL(String s) {
if (!s.trim().isEmpty()) {
WPUPAWL = Short.parseShort(s);
} else {
WPUPAWL = Short.MIN_VALUE;
}
}

protected final void initWPUPAWR(String s) {
if (!s.trim().isEmpty()) {
WPUPAWR = Byte.parseByte(s);
} else {
WPUPAWR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAWU(String s) {
if (!s.trim().isEmpty()) {
WPUPAWU = Short.parseShort(s);
} else {
WPUPAWU = Short.MIN_VALUE;
}
}

protected final void initWPUPAYE(String s) {
if (!s.trim().isEmpty()) {
WPUPAYE = Byte.parseByte(s);
} else {
WPUPAYE = Byte.MIN_VALUE;
}
}

protected final void initWPUPAYL(String s) {
if (!s.trim().isEmpty()) {
WPUPAYL = Byte.parseByte(s);
} else {
WPUPAYL = Byte.MIN_VALUE;
}
}

protected final void initWPUPAYR(String s) {
if (!s.trim().isEmpty()) {
WPUPAYR = Byte.parseByte(s);
} else {
WPUPAYR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAYU(String s) {
if (!s.trim().isEmpty()) {
WPUPAYU = Short.parseShort(s);
} else {
WPUPAYU = Short.MIN_VALUE;
}
}

protected final void initWPVBUSE(String s) {
if (!s.trim().isEmpty()) {
WPVBUSE = Byte.parseByte(s);
} else {
WPVBUSE = Byte.MIN_VALUE;
}
}

protected final void initWPVBUSL(String s) {
if (!s.trim().isEmpty()) {
WPVBUSL = Integer.parseInt(s);
} else {
WPVBUSL = Integer.MIN_VALUE;
}
}

protected final void initWPVBUSR(String s) {
if (!s.trim().isEmpty()) {
WPVBUSR = Byte.parseByte(s);
} else {
WPVBUSR = Byte.MIN_VALUE;
}
}

protected final void initWPVBUSU(String s) {
if (!s.trim().isEmpty()) {
WPVBUSU = Integer.parseInt(s);
} else {
WPVBUSU = Integer.MIN_VALUE;
}
}

protected final void initWPWLYYE(String s) {
if (!s.trim().isEmpty()) {
WPWLYYE = Byte.parseByte(s);
} else {
WPWLYYE = Byte.MIN_VALUE;
}
}

protected final void initWPWLYYL(String s) {
if (!s.trim().isEmpty()) {
WPWLYYL = Integer.parseInt(s);
} else {
WPWLYYL = Integer.MIN_VALUE;
}
}

protected final void initWPWLYYR(String s) {
if (!s.trim().isEmpty()) {
WPWLYYR = Byte.parseByte(s);
} else {
WPWLYYR = Byte.MIN_VALUE;
}
}

protected final void initWPWLYYU(String s) {
if (!s.trim().isEmpty()) {
WPWLYYU = Integer.parseInt(s);
} else {
WPWLYYU = Integer.MIN_VALUE;
}
}

protected final void initWPWYJ95(String s) {
if (!s.trim().isEmpty()) {
WPWYJ95 = Byte.parseByte(s);
} else {
WPWYJ95 = Byte.MIN_VALUE;
}
}

protected final void initWPWYJBU(String s) {
if (!s.trim().isEmpty()) {
WPWYJBU = Byte.parseByte(s);
} else {
WPWYJBU = Byte.MIN_VALUE;
}
}

protected final void initWPWYJCA(String s) {
if (!s.trim().isEmpty()) {
WPWYJCA = Byte.parseByte(s);
} else {
WPWYJCA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJCO(String s) {
if (!s.trim().isEmpty()) {
WPWYJCO = Byte.parseByte(s);
} else {
WPWYJCO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJFB(String s) {
if (!s.trim().isEmpty()) {
WPWYJFB = Byte.parseByte(s);
} else {
WPWYJFB = Byte.MIN_VALUE;
}
}

protected final void initWPWYJFI(String s) {
if (!s.trim().isEmpty()) {
WPWYJFI = Byte.parseByte(s);
} else {
WPWYJFI = Byte.MIN_VALUE;
}
}

protected final void initWPWYJHO(String s) {
if (!s.trim().isEmpty()) {
WPWYJHO = Byte.parseByte(s);
} else {
WPWYJHO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJM85(String s) {
if (!s.trim().isEmpty()) {
WPWYJM85 = Byte.parseByte(s);
} else {
WPWYJM85 = Byte.MIN_VALUE;
}
}

protected final void initWPWYJM86(String s) {
if (!s.trim().isEmpty()) {
WPWYJM86 = Byte.parseByte(s);
} else {
WPWYJM86 = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMBC(String s) {
if (!s.trim().isEmpty()) {
WPWYJMBC = Byte.parseByte(s);
} else {
WPWYJMBC = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMBU(String s) {
if (!s.trim().isEmpty()) {
WPWYJMBU = Byte.parseByte(s);
} else {
WPWYJMBU = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMCA(String s) {
if (!s.trim().isEmpty()) {
WPWYJMCA = Byte.parseByte(s);
} else {
WPWYJMCA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMCH(String s) {
if (!s.trim().isEmpty()) {
WPWYJMCH = Byte.parseByte(s);
} else {
WPWYJMCH = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMCO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMCO = Byte.parseByte(s);
} else {
WPWYJMCO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMFB(String s) {
if (!s.trim().isEmpty()) {
WPWYJMFB = Byte.parseByte(s);
} else {
WPWYJMFB = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMFI(String s) {
if (!s.trim().isEmpty()) {
WPWYJMFI = Byte.parseByte(s);
} else {
WPWYJMFI = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMHF(String s) {
if (!s.trim().isEmpty()) {
WPWYJMHF = Byte.parseByte(s);
} else {
WPWYJMHF = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMHH(String s) {
if (!s.trim().isEmpty()) {
WPWYJMHH = Byte.parseByte(s);
} else {
WPWYJMHH = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMHO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMHO = Byte.parseByte(s);
} else {
WPWYJMHO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMLO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMLO = Byte.parseByte(s);
} else {
WPWYJMLO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMMO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMMO = Byte.parseByte(s);
} else {
WPWYJMMO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMON(String s) {
if (!s.trim().isEmpty()) {
WPWYJMON = Byte.parseByte(s);
} else {
WPWYJMON = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMPA(String s) {
if (!s.trim().isEmpty()) {
WPWYJMPA = Byte.parseByte(s);
} else {
WPWYJMPA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMPH(String s) {
if (!s.trim().isEmpty()) {
WPWYJMPH = Byte.parseByte(s);
} else {
WPWYJMPH = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMTI(String s) {
if (!s.trim().isEmpty()) {
WPWYJMTI = Byte.parseByte(s);
} else {
WPWYJMTI = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMTO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMTO = Byte.parseByte(s);
} else {
WPWYJMTO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJON(String s) {
if (!s.trim().isEmpty()) {
WPWYJON = Byte.parseByte(s);
} else {
WPWYJON = Byte.MIN_VALUE;
}
}

protected final void initWPWYJPA(String s) {
if (!s.trim().isEmpty()) {
WPWYJPA = Byte.parseByte(s);
} else {
WPWYJPA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJREA(String s) {
if (!s.trim().isEmpty()) {
WPWYJREA = Byte.parseByte(s);
} else {
WPWYJREA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJTI(String s) {
if (!s.trim().isEmpty()) {
WPWYJTI = Byte.parseByte(s);
} else {
WPWYJTI = Byte.MIN_VALUE;
}
}

protected final void initWPWYN85(String s) {
if (!s.trim().isEmpty()) {
WPWYN85 = Byte.parseByte(s);
} else {
WPWYN85 = Byte.MIN_VALUE;
}
}

protected final void initWPWYNCA(String s) {
if (!s.trim().isEmpty()) {
WPWYNCA = Byte.parseByte(s);
} else {
WPWYNCA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNCH(String s) {
if (!s.trim().isEmpty()) {
WPWYNCH = Byte.parseByte(s);
} else {
WPWYNCH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNEA(String s) {
if (!s.trim().isEmpty()) {
WPWYNEA = Byte.parseByte(s);
} else {
WPWYNEA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNEM(String s) {
if (!s.trim().isEmpty()) {
WPWYNEM = Byte.parseByte(s);
} else {
WPWYNEM = Byte.MIN_VALUE;
}
}

protected final void initWPWYNFA(String s) {
if (!s.trim().isEmpty()) {
WPWYNFA = Byte.parseByte(s);
} else {
WPWYNFA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNM85(String s) {
if (!s.trim().isEmpty()) {
WPWYNM85 = Byte.parseByte(s);
} else {
WPWYNM85 = Byte.MIN_VALUE;
}
}

protected final void initWPWYNM86(String s) {
if (!s.trim().isEmpty()) {
WPWYNM86 = Byte.parseByte(s);
} else {
WPWYNM86 = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMAB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWYNMAB = false;
} else {
WPWYNMAB = true;
}
}
}

protected final void initWPWYNMCA(String s) {
if (!s.trim().isEmpty()) {
WPWYNMCA = Byte.parseByte(s);
} else {
WPWYNMCA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMCH(String s) {
if (!s.trim().isEmpty()) {
WPWYNMCH = Byte.parseByte(s);
} else {
WPWYNMCH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMCO(String s) {
if (!s.trim().isEmpty()) {
WPWYNMCO = Byte.parseByte(s);
} else {
WPWYNMCO = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMDE(String s) {
if (!s.trim().isEmpty()) {
WPWYNMDE = Byte.parseByte(s);
} else {
WPWYNMDE = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMEA(String s) {
if (!s.trim().isEmpty()) {
WPWYNMEA = Byte.parseByte(s);
} else {
WPWYNMEA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMEM(String s) {
if (!s.trim().isEmpty()) {
WPWYNMEM = Byte.parseByte(s);
} else {
WPWYNMEM = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMFA(String s) {
if (!s.trim().isEmpty()) {
WPWYNMFA = Byte.parseByte(s);
} else {
WPWYNMFA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMLH(String s) {
if (!s.trim().isEmpty()) {
WPWYNMLH = Byte.parseByte(s);
} else {
WPWYNMLH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMLO(String s) {
if (!s.trim().isEmpty()) {
WPWYNMLO = Byte.parseByte(s);
} else {
WPWYNMLO = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMMO(String s) {
if (!s.trim().isEmpty()) {
WPWYNMMO = Byte.parseByte(s);
} else {
WPWYNMMO = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMO(String s) {
if (!s.trim().isEmpty()) {
WPWYNMO = Byte.parseByte(s);
} else {
WPWYNMO = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMOH(String s) {
if (!s.trim().isEmpty()) {
WPWYNMOH = Byte.parseByte(s);
} else {
WPWYNMOH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMOR(String s) {
if (!s.trim().isEmpty()) {
WPWYNMOR = Byte.parseByte(s);
} else {
WPWYNMOR = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMOU(String s) {
if (!s.trim().isEmpty()) {
WPWYNMOU = Byte.parseByte(s);
} else {
WPWYNMOU = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMRE(String s) {
if (!s.trim().isEmpty()) {
WPWYNMRE = Byte.parseByte(s);
} else {
WPWYNMRE = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMRH(String s) {
if (!s.trim().isEmpty()) {
WPWYNMRH = Byte.parseByte(s);
} else {
WPWYNMRH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMTI(String s) {
if (!s.trim().isEmpty()) {
WPWYNMTI = Byte.parseByte(s);
} else {
WPWYNMTI = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMVR(String s) {
if (!s.trim().isEmpty()) {
WPWYNMVR = Byte.parseByte(s);
} else {
WPWYNMVR = Byte.MIN_VALUE;
}
}

protected final void initWPWYNOH(String s) {
if (!s.trim().isEmpty()) {
WPWYNOH = Byte.parseByte(s);
} else {
WPWYNOH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNOU(String s) {
if (!s.trim().isEmpty()) {
WPWYNOU = Byte.parseByte(s);
} else {
WPWYNOU = Byte.MIN_VALUE;
}
}

protected final void initWPWYNRE(String s) {
if (!s.trim().isEmpty()) {
WPWYNRE = Byte.parseByte(s);
} else {
WPWYNRE = Byte.MIN_VALUE;
}
}

protected final void initWPWYNRH(String s) {
if (!s.trim().isEmpty()) {
WPWYNRH = Byte.parseByte(s);
} else {
WPWYNRH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNTI(String s) {
if (!s.trim().isEmpty()) {
WPWYNTI = Byte.parseByte(s);
} else {
WPWYNTI = Byte.MIN_VALUE;
}
}

protected final void initWPWYNVR(String s) {
if (!s.trim().isEmpty()) {
WPWYNVR = Byte.parseByte(s);
} else {
WPWYNVR = Byte.MIN_VALUE;
}
}

protected final void initWPWYW95(String s) {
if (!s.trim().isEmpty()) {
WPWYW95 = Byte.parseByte(s);
} else {
WPWYW95 = Byte.MIN_VALUE;
}
}

protected final void initWPWYWEN(String s) {
if (!s.trim().isEmpty()) {
WPWYWEN = Byte.parseByte(s);
} else {
WPWYWEN = Byte.MIN_VALUE;
}
}

protected final void initWPWYWM85(String s) {
if (!s.trim().isEmpty()) {
WPWYWM85 = Byte.parseByte(s);
} else {
WPWYWM85 = Byte.MIN_VALUE;
}
}

protected final void initWPWYWM86(String s) {
if (!s.trim().isEmpty()) {
WPWYWM86 = Byte.parseByte(s);
} else {
WPWYWM86 = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMCH(String s) {
if (!s.trim().isEmpty()) {
WPWYWMCH = Byte.parseByte(s);
} else {
WPWYWMCH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMEN(String s) {
if (!s.trim().isEmpty()) {
WPWYWMEN = Byte.parseByte(s);
} else {
WPWYWMEN = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMFI(String s) {
if (!s.trim().isEmpty()) {
WPWYWMFI = Byte.parseByte(s);
} else {
WPWYWMFI = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMHE(String s) {
if (!s.trim().isEmpty()) {
WPWYWMHE = Byte.parseByte(s);
} else {
WPWYWMHE = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMHH(String s) {
if (!s.trim().isEmpty()) {
WPWYWMHH = Byte.parseByte(s);
} else {
WPWYWMHH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMMO(String s) {
if (!s.trim().isEmpty()) {
WPWYWMMO = Byte.parseByte(s);
} else {
WPWYWMMO = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMO(String s) {
if (!s.trim().isEmpty()) {
WPWYWMO = Byte.parseByte(s);
} else {
WPWYWMO = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMOH(String s) {
if (!s.trim().isEmpty()) {
WPWYWMOH = Byte.parseByte(s);
} else {
WPWYWMOH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMRH(String s) {
if (!s.trim().isEmpty()) {
WPWYWMRH = Byte.parseByte(s);
} else {
WPWYWMRH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMSU(String s) {
if (!s.trim().isEmpty()) {
WPWYWMSU = Byte.parseByte(s);
} else {
WPWYWMSU = Byte.MIN_VALUE;
}
}

protected final void initWPWYWOH(String s) {
if (!s.trim().isEmpty()) {
WPWYWOH = Byte.parseByte(s);
} else {
WPWYWOH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWRH(String s) {
if (!s.trim().isEmpty()) {
WPWYWRH = Byte.parseByte(s);
} else {
WPWYWRH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWSU(String s) {
if (!s.trim().isEmpty()) {
WPWYWSU = Byte.parseByte(s);
} else {
WPWYWSU = Byte.MIN_VALUE;
}
}

protected final void initWPYFRAC(String s) {
if (!s.trim().isEmpty()) {
WPYFRAC = Byte.parseByte(s);
} else {
WPYFRAC = Byte.MIN_VALUE;
}
}

protected final void initWPYST95(String s) {
if (!s.trim().isEmpty()) {
WPYST95 = Byte.parseByte(s);
} else {
WPYST95 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTAF(String s) {
if (!s.trim().isEmpty()) {
WPYSTAF = Byte.parseByte(s);
} else {
WPYSTAF = Byte.MIN_VALUE;
}
}

protected final void initWPYSTCH(String s) {
if (!s.trim().isEmpty()) {
WPYSTCH = Byte.parseByte(s);
} else {
WPYSTCH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTEN(String s) {
if (!s.trim().isEmpty()) {
WPYSTEN = Byte.parseByte(s);
} else {
WPYSTEN = Byte.MIN_VALUE;
}
}

protected final void initWPYSTFA(String s) {
if (!s.trim().isEmpty()) {
WPYSTFA = Byte.parseByte(s);
} else {
WPYSTFA = Byte.MIN_VALUE;
}
}

protected final void initWPYSTFI(String s) {
if (!s.trim().isEmpty()) {
WPYSTFI = Byte.parseByte(s);
} else {
WPYSTFI = Byte.MIN_VALUE;
}
}

protected final void initWPYSTM85(String s) {
if (!s.trim().isEmpty()) {
WPYSTM85 = Byte.parseByte(s);
} else {
WPYSTM85 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTM86(String s) {
if (!s.trim().isEmpty()) {
WPYSTM86 = Byte.parseByte(s);
} else {
WPYSTM86 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMAF(String s) {
if (!s.trim().isEmpty()) {
WPYSTMAF = Byte.parseByte(s);
} else {
WPYSTMAF = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMAG(String s) {
if (!s.trim().isEmpty()) {
WPYSTMAG = Byte.parseByte(s);
} else {
WPYSTMAG = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMCH(String s) {
if (!s.trim().isEmpty()) {
WPYSTMCH = Byte.parseByte(s);
} else {
WPYSTMCH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMCO(String s) {
if (!s.trim().isEmpty()) {
WPYSTMCO = Byte.parseByte(s);
} else {
WPYSTMCO = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMEN(String s) {
if (!s.trim().isEmpty()) {
WPYSTMEN = Byte.parseByte(s);
} else {
WPYSTMEN = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMFA(String s) {
if (!s.trim().isEmpty()) {
WPYSTMFA = Byte.parseByte(s);
} else {
WPYSTMFA = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMFI(String s) {
if (!s.trim().isEmpty()) {
WPYSTMFI = Byte.parseByte(s);
} else {
WPYSTMFI = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMMO(String s) {
if (!s.trim().isEmpty()) {
WPYSTMMO = Byte.parseByte(s);
} else {
WPYSTMMO = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMOH(String s) {
if (!s.trim().isEmpty()) {
WPYSTMOH = Byte.parseByte(s);
} else {
WPYSTMOH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMOU(String s) {
if (!s.trim().isEmpty()) {
WPYSTMOU = Byte.parseByte(s);
} else {
WPYSTMOU = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMPA(String s) {
if (!s.trim().isEmpty()) {
WPYSTMPA = Byte.parseByte(s);
} else {
WPYSTMPA = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMRE(String s) {
if (!s.trim().isEmpty()) {
WPYSTMRE = Byte.parseByte(s);
} else {
WPYSTMRE = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMRH(String s) {
if (!s.trim().isEmpty()) {
WPYSTMRH = Byte.parseByte(s);
} else {
WPYSTMRH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMST(String s) {
if (!s.trim().isEmpty()) {
WPYSTMST = Byte.parseByte(s);
} else {
WPYSTMST = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMTI(String s) {
if (!s.trim().isEmpty()) {
WPYSTMTI = Byte.parseByte(s);
} else {
WPYSTMTI = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMVR(String s) {
if (!s.trim().isEmpty()) {
WPYSTMVR = Byte.parseByte(s);
} else {
WPYSTMVR = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMYO(String s) {
if (!s.trim().isEmpty()) {
WPYSTMYO = Byte.parseByte(s);
} else {
WPYSTMYO = Byte.MIN_VALUE;
}
}

protected final void initWPYSTOH(String s) {
if (!s.trim().isEmpty()) {
WPYSTOH = Byte.parseByte(s);
} else {
WPYSTOH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTOMO(String s) {
if (!s.trim().isEmpty()) {
WPYSTOMO = Byte.parseByte(s);
} else {
WPYSTOMO = Byte.MIN_VALUE;
}
}

protected final void initWPYSTOU(String s) {
if (!s.trim().isEmpty()) {
WPYSTOU = Byte.parseByte(s);
} else {
WPYSTOU = Byte.MIN_VALUE;
}
}

protected final void initWPYSTPA(String s) {
if (!s.trim().isEmpty()) {
WPYSTPA = Byte.parseByte(s);
} else {
WPYSTPA = Byte.MIN_VALUE;
}
}

protected final void initWPYSTPM(String s) {
if (!s.trim().isEmpty()) {
WPYSTPM = Byte.parseByte(s);
} else {
WPYSTPM = Byte.MIN_VALUE;
}
}

protected final void initWPYSTRE(String s) {
if (!s.trim().isEmpty()) {
WPYSTRE = Byte.parseByte(s);
} else {
WPYSTRE = Byte.MIN_VALUE;
}
}

protected final void initWPYSTRH(String s) {
if (!s.trim().isEmpty()) {
WPYSTRH = Byte.parseByte(s);
} else {
WPYSTRH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTTI(String s) {
if (!s.trim().isEmpty()) {
WPYSTTI = Byte.parseByte(s);
} else {
WPYSTTI = Byte.MIN_VALUE;
}
}

protected final void initWPYSTVR(String s) {
if (!s.trim().isEmpty()) {
WPYSTVR = Byte.parseByte(s);
} else {
WPYSTVR = Byte.MIN_VALUE;
}
}

protected final void initWPYSTYO(String s) {
if (!s.trim().isEmpty()) {
WPYSTYO = Byte.parseByte(s);
} else {
WPYSTYO = Byte.MIN_VALUE;
}
}

protected final void initWTC_P_F(String s) {
if (!s.trim().isEmpty()) {
WTC_P_F = Byte.parseByte(s);
} else {
WTC_P_F = Byte.MIN_VALUE;
}
}

protected final void initWTC_P_I(String s) {
if (!s.trim().isEmpty()) {
WTC_P_I = Double.parseDouble(s);
} else {
WTC_P_I = Double.NaN;
}
}

protected final void initWTC_P_O(String s) {
if (!s.trim().isEmpty()) {
WTC_P_O = Short.parseShort(s);
} else {
WTC_P_O = Short.MIN_VALUE;
}
}

protected final void initWTC_P_T(String s) {
if (!s.trim().isEmpty()) {
WTC_P_T = Short.parseShort(s);
} else {
WTC_P_T = Short.MIN_VALUE;
}
}

protected final void initWTC_R_F(String s) {
if (!s.trim().isEmpty()) {
WTC_R_F = Byte.parseByte(s);
} else {
WTC_R_F = Byte.MIN_VALUE;
}
}

protected final void initWTC_R_I(String s) {
if (!s.trim().isEmpty()) {
WTC_R_I = Double.parseDouble(s);
} else {
WTC_R_I = Double.NaN;
}
}

protected final void initWTC_R_O(String s) {
if (!s.trim().isEmpty()) {
WTC_R_O = Short.parseShort(s);
} else {
WTC_R_O = Short.MIN_VALUE;
}
}

protected final void initWTC_R_T(String s) {
if (!s.trim().isEmpty()) {
WTC_R_T = Short.parseShort(s);
} else {
WTC_R_T = Short.MIN_VALUE;
}
}

protected final void initYRBIRTH(String s) {
if (!s.trim().isEmpty()) {
YRBIRTH = Short.parseShort(s);
} else {
YRBIRTH = Short.MIN_VALUE;
}
}

public byte getACCUR() {
return ACCUR;
}

public double getADDPEN_06() {
return ADDPEN_06;
}

public double getADDPEN_SPA() {
return ADDPEN_SPA;
}

public byte getALLADCH() {
return ALLADCH;
}

public byte getALLFSCH() {
return ALLFSCH;
}

public byte getALLNATCH() {
return ALLNATCH;
}

public byte getALLSPCH() {
return ALLSPCH;
}

public byte getALLTOTCH() {
return ALLTOTCH;
}

public byte getALONE() {
return ALONE;
}

public byte getASKINST() {
return ASKINST;
}

public boolean getASKPX() {
return ASKPX;
}

public byte getBRETHS() {
return BRETHS;
}

public double getBSP_06() {
return BSP_06;
}

public double getBSP_SPA() {
return BSP_SPA;
}

public byte getCARERS_P_F() {
return CARERS_P_F;
}

public double getCARERS_P_I() {
return CARERS_P_I;
}

public short getCARERS_P_O() {
return CARERS_P_O;
}

public short getCARERS_P_T() {
return CARERS_P_T;
}

public byte getCARERS_R_F() {
return CARERS_R_F;
}

public double getCARERS_R_I() {
return CARERS_R_I;
}

public short getCARERS_R_O() {
return CARERS_R_O;
}

public short getCARERS_R_T() {
return CARERS_R_T;
}

public byte getCASP19() {
return CASP19;
}

public byte getCASPAUT() {
return CASPAUT;
}

public byte getCASPCTL() {
return CASPCTL;
}

public byte getCASPPLE() {
return CASPPLE;
}

public byte getCASPSR() {
return CASPSR;
}

public double getCFACCUR() {
return CFACCUR;
}

public byte getCFANI() {
return CFANI;
}

public byte getCFANIG() {
return CFANIG;
}

public byte getCFEXIND() {
return CFEXIND;
}

public byte getCFIND() {
return CFIND;
}

public byte getCFLETEN() {
return CFLETEN;
}

public byte getCFMEIND() {
return CFMEIND;
}

public byte getCFMEM() {
return CFMEM;
}

public byte getCFMEMS() {
return CFMEMS;
}

public byte getCFMERSP() {
return CFMERSP;
}

public byte getCFMETM() {
return CFMETM;
}

public byte getCFMETMT() {
return CFMETMT;
}

public byte getCFPASCR() {
return CFPASCR;
}

public byte getCFPRMEM() {
return CFPRMEM;
}

public byte getCFPROM() {
return CFPROM;
}

public double getCFRECAL() {
return CFRECAL;
}

public byte getCFSPEED() {
return CFSPEED;
}

public byte getCFWHM85() {
return CFWHM85;
}

public byte getCFWHM86() {
return CFWHM86;
}

public byte getCFWHMALC() {
return CFWHMALC;
}

public byte getCFWHMCON() {
return CFWHMCON;
}

public byte getCFWHMDIS() {
return CFWHMDIS;
}

public byte getCFWHMENG() {
return CFWHMENG;
}

public byte getCFWHMEYE() {
return CFWHMEYE;
}

public byte getCFWHMHEA() {
return CFWHMHEA;
}

public byte getCFWHMILL() {
return CFWHMILL;
}

public byte getCFWHMLAP() {
return CFWHMLAP;
}

public byte getCFWHMMEM() {
return CFWHMMEM;
}

public byte getCFWHMMEN() {
return CFWHMMEN;
}

public byte getCFWHMNER() {
return CFWHMNER;
}

public byte getCFWHMNOI() {
return CFWHMNOI;
}

public byte getCFWHMREF() {
return CFWHMREF;
}

public byte getCFWHMTIR() {
return CFWHMTIR;
}

public byte getCFWHMUP() {
return CFWHMUP;
}

public byte getCFWHOAD() {
return CFWHOAD;
}

public byte getCFWHOCHI() {
return CFWHOCHI;
}

public byte getCFWHONON() {
return CFWHONON;
}

public byte getCFWHOOTH() {
return CFWHOOTH;
}

public byte getCFWHOPAR() {
return CFWHOPAR;
}

public byte getCFWHT95() {
return CFWHT95;
}

public byte getCFWHTCON() {
return CFWHTCON;
}

public byte getCFWHTDIS() {
return CFWHTDIS;
}

public byte getCFWHTENG() {
return CFWHTENG;
}

public byte getCFWHTEYE() {
return CFWHTEYE;
}

public byte getCFWHTHEA() {
return CFWHTHEA;
}

public byte getCFWHTILL() {
return CFWHTILL;
}

public byte getCFWHTLAP() {
return CFWHTLAP;
}

public byte getCFWHTMEN() {
return CFWHTMEN;
}

public byte getCFWHTNER() {
return CFWHTNER;
}

public byte getCFWHTNOI() {
return CFWHTNOI;
}

public byte getCFWHTTIR() {
return CFWHTTIR;
}

public byte getCHEACD() {
return CHEACD;
}

public byte getCHEFLA() {
return CHEFLA;
}

public byte getCHEFRAC() {
return CHEFRAC;
}

public byte getCHEJI() {
return CHEJI;
}

public byte getCHESKA() {
return CHESKA;
}

public byte getCHESMK() {
return CHESMK;
}

public byte getCHIADP() {
return CHIADP;
}

public byte getCHIFST() {
return CHIFST;
}

public byte getCHINAT() {
return CHINAT;
}

public byte getCHINHH() {
return CHINHH;
}

public byte getCHISTP() {
return CHISTP;
}

public byte getCHITOT() {
return CHITOT;
}

public byte getCHOADP() {
return CHOADP;
}

public byte getCHOFST() {
return CHOFST;
}

public byte getCHONAT() {
return CHONAT;
}

public byte getCHOSTP() {
return CHOSTP;
}

public byte getCHOTOT() {
return CHOTOT;
}

public byte getCLAUD() {
return CLAUD;
}

public boolean getCONCUR() {
return CONCUR;
}

public byte getCTC_P_F() {
return CTC_P_F;
}

public double getCTC_P_I() {
return CTC_P_I;
}

public short getCTC_P_O() {
return CTC_P_O;
}

public short getCTC_P_T() {
return CTC_P_T;
}

public byte getCTC_R_F() {
return CTC_R_F;
}

public double getCTC_R_I() {
return CTC_R_I;
}

public short getCTC_R_O() {
return CTC_R_O;
}

public short getCTC_R_T() {
return CTC_R_T;
}

public double getCURRENTDB_06() {
return CURRENTDB_06;
}

public double getCURRENTDB_SPA() {
return CURRENTDB_SPA;
}

public double getCURRENTDC_06() {
return CURRENTDC_06;
}

public double getCURRENTDC_SPA() {
return CURRENTDC_SPA;
}

public byte getCVD7DBTS() {
return CVD7DBTS;
}

public byte getCVD7DIHB() {
return CVD7DIHB;
}

public byte getDCURPEN() {
return DCURPEN;
}

public byte getDDBDC() {
return DDBDC;
}

public byte getDEMPPEN() {
return DEMPPEN;
}

public byte getDHAGER() {
return DHAGER;
}

public byte getDHC14() {
return DHC14;
}

public byte getDHC15() {
return DHC15;
}

public byte getDHCAG14() {
return DHCAG14;
}

public byte getDHCAG15() {
return DHCAG15;
}

public short getDHCDBY1() {
return DHCDBY1;
}

public short getDHCDBY10() {
return DHCDBY10;
}

public short getDHCDBY11() {
return DHCDBY11;
}

public short getDHCDBY12() {
return DHCDBY12;
}

public short getDHCDBY13() {
return DHCDBY13;
}

public short getDHCDBY14() {
return DHCDBY14;
}

public short getDHCDBY15() {
return DHCDBY15;
}

public short getDHCDBY2() {
return DHCDBY2;
}

public short getDHCDBY3() {
return DHCDBY3;
}

public short getDHCDBY4() {
return DHCDBY4;
}

public short getDHCDBY5() {
return DHCDBY5;
}

public short getDHCDBY6() {
return DHCDBY6;
}

public short getDHCDBY7() {
return DHCDBY7;
}

public short getDHCDBY8() {
return DHCDBY8;
}

public short getDHCDBY9() {
return DHCDBY9;
}

public byte getDHCR08() {
return DHCR08;
}

public byte getDHCR09() {
return DHCR09;
}

public byte getDHCR10() {
return DHCR10;
}

public boolean getDHCR104() {
return DHCR104;
}

public boolean getDHCR105() {
return DHCR105;
}

public boolean getDHCR106() {
return DHCR106;
}

public byte getDHCR118() {
return DHCR118;
}

public boolean getDHCR119() {
return DHCR119;
}

public boolean getDHCR120() {
return DHCR120;
}

public boolean getDHCR121() {
return DHCR121;
}

public boolean getDHCR122() {
return DHCR122;
}

public byte getDHCR134() {
return DHCR134;
}

public boolean getDHCR135() {
return DHCR135;
}

public boolean getDHCR136() {
return DHCR136;
}

public boolean getDHCR137() {
return DHCR137;
}

public boolean getDHCR138() {
return DHCR138;
}

public byte getDHCR147() {
return DHCR147;
}

public boolean getDHCR148() {
return DHCR148;
}

public boolean getDHCR149() {
return DHCR149;
}

public byte getDHCR150() {
return DHCR150;
}

public boolean getDHCR151() {
return DHCR151;
}

public boolean getDHCR152() {
return DHCR152;
}

public boolean getDHCR153() {
return DHCR153;
}

public boolean getDHCR154() {
return DHCR154;
}

public boolean getDHCR163() {
return DHCR163;
}

public boolean getDHCR164() {
return DHCR164;
}

public boolean getDHCR165() {
return DHCR165;
}

public byte getDHCR166() {
return DHCR166;
}

public boolean getDHCR167() {
return DHCR167;
}

public boolean getDHCR168() {
return DHCR168;
}

public boolean getDHCR169() {
return DHCR169;
}

public boolean getDHCR170() {
return DHCR170;
}

public byte getDHCR178() {
return DHCR178;
}

public boolean getDHCR179() {
return DHCR179;
}

public boolean getDHCR180() {
return DHCR180;
}

public boolean getDHCR181() {
return DHCR181;
}

public boolean getDHCR182() {
return DHCR182;
}

public boolean getDHCR183() {
return DHCR183;
}

public boolean getDHCR184() {
return DHCR184;
}

public boolean getDHCR185() {
return DHCR185;
}

public boolean getDHCR186() {
return DHCR186;
}

public byte getDHCR194() {
return DHCR194;
}

public boolean getDHCR195() {
return DHCR195;
}

public boolean getDHCR196() {
return DHCR196;
}

public boolean getDHCR197() {
return DHCR197;
}

public boolean getDHCR198() {
return DHCR198;
}

public boolean getDHCR199() {
return DHCR199;
}

public boolean getDHCR200() {
return DHCR200;
}

public boolean getDHCR201() {
return DHCR201;
}

public boolean getDHCR202() {
return DHCR202;
}

public byte getDHCR209() {
return DHCR209;
}

public byte getDHCR210() {
return DHCR210;
}

public boolean getDHCR211() {
return DHCR211;
}

public boolean getDHCR212() {
return DHCR212;
}

public boolean getDHCR213() {
return DHCR213;
}

public boolean getDHCR214() {
return DHCR214;
}

public boolean getDHCR215() {
return DHCR215;
}

public boolean getDHCR216() {
return DHCR216;
}

public boolean getDHCR217() {
return DHCR217;
}

public boolean getDHCR218() {
return DHCR218;
}

public byte getDHCR225() {
return DHCR225;
}

public boolean getDHCR226() {
return DHCR226;
}

public boolean getDHCR227() {
return DHCR227;
}

public boolean getDHCR228() {
return DHCR228;
}

public boolean getDHCR229() {
return DHCR229;
}

public boolean getDHCR230() {
return DHCR230;
}

public boolean getDHCR231() {
return DHCR231;
}

public boolean getDHCR232() {
return DHCR232;
}

public boolean getDHCR233() {
return DHCR233;
}

public boolean getDHCR234() {
return DHCR234;
}

public byte getDHCR24() {
return DHCR24;
}

public byte getDHCR25() {
return DHCR25;
}

public byte getDHCR26() {
return DHCR26;
}

public byte getDHCR40() {
return DHCR40;
}

public byte getDHCR41() {
return DHCR41;
}

public byte getDHCR42() {
return DHCR42;
}

public byte getDHCR56() {
return DHCR56;
}

public byte getDHCR57() {
return DHCR57;
}

public byte getDHCR58() {
return DHCR58;
}

public byte getDHCR72() {
return DHCR72;
}

public byte getDHCR73() {
return DHCR73;
}

public byte getDHCR74() {
return DHCR74;
}

public boolean getDHCR88() {
return DHCR88;
}

public boolean getDHCR89() {
return DHCR89;
}

public boolean getDHCR90() {
return DHCR90;
}

public byte getDHCS14() {
return DHCS14;
}

public byte getDHCS15() {
return DHCS15;
}

public byte getDHDOBC() {
return DHDOBC;
}

public short getDHDOBYR() {
return DHDOBYR;
}

public byte getDHEACD() {
return DHEACD;
}

public byte getDHEDIBAD() {
return DHEDIBAD;
}

public byte getDHEDIBAR() {
return DHEDIBAR;
}

public byte getDHEDIBAS() {
return DHEDIBAS;
}

public byte getDHEDIBCA() {
return DHEDIBCA;
}

public byte getDHEDIBDE() {
return DHEDIBDE;
}

public byte getDHEDIBLU() {
return DHEDIBLU;
}

public byte getDHEDIBOS() {
return DHEDIBOS;
}

public byte getDHEDIBPD() {
return DHEDIBPD;
}

public byte getDHEDIBPS() {
return DHEDIBPS;
}

public byte getDHEDIMAN() {
return DHEDIMAN;
}

public byte getDHEDIMAR() {
return DHEDIMAR;
}

public byte getDHEDIMBP() {
return DHEDIMBP;
}

public byte getDHEDIMCH() {
return DHEDIMCH;
}

public byte getDHEDIMDI() {
return DHEDIMDI;
}

public byte getDHEDIMHF() {
return DHEDIMHF;
}

public byte getDHEDIMHM() {
return DHEDIMHM;
}

public byte getDHEDIMMI() {
return DHEDIMMI;
}

public byte getDHEDIMST() {
return DHEDIMST;
}

public byte getDHEOPTCA() {
return DHEOPTCA;
}

public byte getDHEOPTDI() {
return DHEOPTDI;
}

public byte getDHEOPTGL() {
return DHEOPTGL;
}

public byte getDHEOPTMD() {
return DHEOPTMD;
}

public byte getDHPA10() {
return DHPA10;
}

public byte getDHPA11() {
return DHPA11;
}

public byte getDHPA12() {
return DHPA12;
}

public byte getDHPA13() {
return DHPA13;
}

public byte getDHPA14() {
return DHPA14;
}

public byte getDHPA15() {
return DHPA15;
}

public byte getDHPA2() {
return DHPA2;
}

public byte getDHPA3() {
return DHPA3;
}

public byte getDHPA4() {
return DHPA4;
}

public byte getDHPA5() {
return DHPA5;
}

public byte getDHPA6() {
return DHPA6;
}

public byte getDHPA7() {
return DHPA7;
}

public byte getDHPA8() {
return DHPA8;
}

public byte getDHPA9() {
return DHPA9;
}

public byte getDHPB10() {
return DHPB10;
}

public byte getDHPB11() {
return DHPB11;
}

public byte getDHPB12() {
return DHPB12;
}

public byte getDHPB13() {
return DHPB13;
}

public byte getDHPB14() {
return DHPB14;
}

public byte getDHPB15() {
return DHPB15;
}

public byte getDHPB2() {
return DHPB2;
}

public byte getDHPB3() {
return DHPB3;
}

public byte getDHPB4() {
return DHPB4;
}

public byte getDHPB5() {
return DHPB5;
}

public byte getDHPB6() {
return DHPB6;
}

public byte getDHPB7() {
return DHPB7;
}

public byte getDHPB8() {
return DHPB8;
}

public byte getDHPB9() {
return DHPB9;
}

public boolean getDHSEX() {
return DHSEX;
}

public byte getDHWORK() {
return DHWORK;
}

public byte getDIAGR() {
return DIAGR;
}

public short getDIDBNY() {
return DIDBNY;
}

public byte getDIDOB() {
return DIDOB;
}

public byte getDIGNMYC() {
return DIGNMYC;
}

public byte getDIKLIVC() {
return DIKLIVC;
}

public byte getDIMAR() {
return DIMAR;
}

public byte getDISEX() {
return DISEX;
}

public byte getDISEXC() {
return DISEXC;
}

public byte getDISIBC() {
return DISIBC;
}

public byte getDOBCHK() {
return DOBCHK;
}

public byte getEDQUAMIS() {
return EDQUAMIS;
}

public byte getERCAA() {
return ERCAA;
}

public byte getERCABCH() {
return ERCABCH;
}

public byte getERCABFR() {
return ERCABFR;
}

public byte getERCABGC() {
return ERCABGC;
}

public byte getERCABOR() {
return ERCABOR;
}

public byte getERCABOT() {
return ERCABOT;
}

public byte getERCABPA() {
return ERCABPA;
}

public byte getERCABPL() {
return ERCABPL;
}

public byte getERCABSP() {
return ERCABSP;
}

public short getERCAC() {
return ERCAC;
}

public byte getERCADP1() {
return ERCADP1;
}

public byte getERCADP10() {
return ERCADP10;
}

public byte getERCADP11() {
return ERCADP11;
}

public byte getERCADP12() {
return ERCADP12;
}

public byte getERCADP2() {
return ERCADP2;
}

public byte getERCADP3() {
return ERCADP3;
}

public byte getERCADP4() {
return ERCADP4;
}

public byte getERCADP5() {
return ERCADP5;
}

public byte getERCADP6() {
return ERCADP6;
}

public byte getERCADP7() {
return ERCADP7;
}

public byte getERCADP8() {
return ERCADP8;
}

public byte getERCADP9() {
return ERCADP9;
}

public byte getERCALIVE() {
return ERCALIVE;
}

public byte getERCAM85() {
return ERCAM85;
}

public byte getERCAM86() {
return ERCAM86;
}

public byte getERCAMCH() {
return ERCAMCH;
}

public byte getERCAMFR() {
return ERCAMFR;
}

public byte getERCAMGC() {
return ERCAMGC;
}

public byte getERCAMOR() {
return ERCAMOR;
}

public byte getERCAMOT() {
return ERCAMOT;
}

public byte getERCAMPA() {
return ERCAMPA;
}

public byte getERCAMPL() {
return ERCAMPL;
}

public byte getERCAMSP() {
return ERCAMSP;
}

public byte getERCANCH() {
return ERCANCH;
}

public byte getERCANFR() {
return ERCANFR;
}

public byte getERCANGC() {
return ERCANGC;
}

public byte getERCANOR() {
return ERCANOR;
}

public byte getERCANOT() {
return ERCANOT;
}

public byte getERCANPA() {
return ERCANPA;
}

public byte getERCANPL() {
return ERCANPL;
}

public boolean getERCANSP() {
return ERCANSP;
}

public byte getERCANTT() {
return ERCANTT;
}

public byte getERCARA() {
return ERCARA;
}

public byte getERCARB() {
return ERCARB;
}

public byte getERMOCAC() {
return ERMOCAC;
}

public byte getERMOCFI() {
return ERMOCFI;
}

public byte getERMOCMO() {
return ERMOCMO;
}

public byte getERMOCNE() {
return ERMOCNE;
}

public byte getERMOCNJ() {
return ERMOCNJ;
}

public byte getERMOCOB() {
return ERMOCOB;
}

public byte getERMOCOT() {
return ERMOCOT;
}

public byte getERMOCSK() {
return ERMOCSK;
}

public byte getERMOCSO() {
return ERMOCSO;
}

public byte getERMOCUS() {
return ERMOCUS;
}

public byte getERMOVAC() {
return ERMOVAC;
}

public byte getERMOVFI() {
return ERMOVFI;
}

public byte getERMOVMO() {
return ERMOVMO;
}

public byte getERMOVNE() {
return ERMOVNE;
}

public byte getERMOVNJ() {
return ERMOVNJ;
}

public byte getERMOVOB() {
return ERMOVOB;
}

public byte getERMOVOT() {
return ERMOVOT;
}

public byte getERMOVSK() {
return ERMOVSK;
}

public byte getERMOVSO() {
return ERMOVSO;
}

public byte getERMOVUS() {
return ERMOVUS;
}

public byte getERVOLA() {
return ERVOLA;
}

public byte getERVOLB() {
return ERVOLB;
}

public byte getEXLO90() {
return EXLO90;
}

public byte getEXPWF() {
return EXPWF;
}

public byte getEXREL96() {
return EXREL96;
}

public byte getEXRELA() {
return EXRELA;
}

public byte getEXRELB() {
return EXRELB;
}

public byte getEXRELC() {
return EXRELC;
}

public byte getEXRELD() {
return EXRELD;
}

public byte getEXRELEDE() {
return EXRELEDE;
}

public byte getEXRELEEL() {
return EXRELEEL;
}

public byte getEXRELEFA() {
return EXRELEFA;
}

public byte getEXRELEFO() {
return EXRELEFO;
}

public byte getEXRELEHO() {
return EXRELEHO;
}

public byte getEXRELEME() {
return EXRELEME;
}

public byte getEXRELEOU() {
return EXRELEOU;
}

public byte getEXRELEPR() {
return EXRELEPR;
}

public byte getEXRELETR() {
return EXRELETR;
}

public byte getFATHER() {
return FATHER;
}

public byte getFFCHAG1() {
return FFCHAG1;
}

public byte getFFCHAG10() {
return FFCHAG10;
}

public byte getFFCHAG11() {
return FFCHAG11;
}

public boolean getFFCHAG12() {
return FFCHAG12;
}

public boolean getFFCHAG13() {
return FFCHAG13;
}

public byte getFFCHAG2() {
return FFCHAG2;
}

public byte getFFCHAG3() {
return FFCHAG3;
}

public byte getFFCHAG4() {
return FFCHAG4;
}

public byte getFFCHAG5() {
return FFCHAG5;
}

public byte getFFCHAG6() {
return FFCHAG6;
}

public byte getFFCHAG7() {
return FFCHAG7;
}

public byte getFFCHAG8() {
return FFCHAG8;
}

public byte getFFCHAG9() {
return FFCHAG9;
}

public byte getFFCHSX1() {
return FFCHSX1;
}

public byte getFFCHSX10() {
return FFCHSX10;
}

public byte getFFCHSX11() {
return FFCHSX11;
}

public boolean getFFCHSX12() {
return FFCHSX12;
}

public boolean getFFCHSX13() {
return FFCHSX13;
}

public byte getFFCHSX2() {
return FFCHSX2;
}

public byte getFFCHSX3() {
return FFCHSX3;
}

public byte getFFCHSX4() {
return FFCHSX4;
}

public byte getFFCHSX5() {
return FFCHSX5;
}

public byte getFFCHSX6() {
return FFCHSX6;
}

public byte getFFCHSX7() {
return FFCHSX7;
}

public byte getFFCHSX8() {
return FFCHSX8;
}

public byte getFFCHSX9() {
return FFCHSX9;
}

public byte getFFCHVAR() {
return FFCHVAR;
}

public byte getFFFTEAG() {
return FFFTEAG;
}

public byte getFFRELT10() {
return FFRELT10;
}

public boolean getFFRELT11() {
return FFRELT11;
}

public boolean getFFRELT12() {
return FFRELT12;
}

public boolean getFFRELT13() {
return FFRELT13;
}

public byte getFFRELTX() {
return FFRELTX;
}

public byte getFFRELTX2() {
return FFRELTX2;
}

public byte getFFRELTX3() {
return FFRELTX3;
}

public byte getFFRELTX4() {
return FFRELTX4;
}

public byte getFFRELTX5() {
return FFRELTX5;
}

public byte getFFRELTX6() {
return FFRELTX6;
}

public byte getFFRELTX7() {
return FFRELTX7;
}

public byte getFFRELTX8() {
return FFRELTX8;
}

public byte getFFRELTX9() {
return FFRELTX9;
}

public String getFINSTAT() {
return FINSTAT;
}

public byte getFQAQUA() {
return FQAQUA;
}

public byte getFQCBTHR() {
return FQCBTHR;
}

public short getFQCENG() {
return FQCENG;
}

public byte getFQEND() {
return FQEND;
}

public byte getFQETHNR() {
return FQETHNR;
}

public byte getFQQUA95() {
return FQQUA95;
}

public byte getFQQUAALE() {
return FQQUAALE;
}

public byte getFQQUAASL() {
return FQQUAASL;
}

public byte getFQQUACGA() {
return FQQUACGA;
}

public byte getFQQUACGF() {
return FQQUACGF;
}

public byte getFQQUACGO() {
return FQQUACGO;
}

public byte getFQQUACLE() {
return FQQUACLE;
}

public byte getFQQUACS1() {
return FQQUACS1;
}

public byte getFQQUACS2() {
return FQQUACS2;
}

public byte getFQQUACSU() {
return FQQUACSU;
}

public byte getFQQUADEG() {
return FQQUADEG;
}

public byte getFQQUAGCA() {
return FQQUAGCA;
}

public byte getFQQUAGCD() {
return FQQUAGCD;
}

public byte getFQQUAHNC() {
return FQQUAHNC;
}

public byte getFQQUAMAT() {
return FQQUAMAT;
}

public byte getFQQUANUR() {
return FQQUANUR;
}

public byte getFQQUANV1() {
return FQQUANV1;
}

public byte getFQQUANV2() {
return FQQUANV2;
}

public byte getFQQUANV3() {
return FQQUANV3;
}

public byte getFQQUANV4() {
return FQQUANV4;
}

public byte getFQQUANV5() {
return FQQUANV5;
}

public byte getFQQUAOLA() {
return FQQUAOLA;
}

public byte getFQQUAOLD() {
return FQQUAOLD;
}

public byte getFQQUAOLP() {
return FQQUAOLP;
}

public byte getFQQUAONC() {
return FQQUAONC;
}

public byte getFQQUASLC() {
return FQQUASLC;
}

public byte getFQQUASLL() {
return FQQUASLL;
}

public byte getFQQUASUP() {
return FQQUASUP;
}

public byte getFQQUATEA() {
return FQQUATEA;
}

public byte getFQQUATRA() {
return FQQUATRA;
}

public byte getFQQUM85() {
return FQQUM85;
}

public byte getFQQUM86() {
return FQQUM86;
}

public byte getFQQUMALE() {
return FQQUMALE;
}

public byte getFQQUMASL() {
return FQQUMASL;
}

public byte getFQQUMCGA() {
return FQQUMCGA;
}

public byte getFQQUMCGF() {
return FQQUMCGF;
}

public byte getFQQUMCGO() {
return FQQUMCGO;
}

public byte getFQQUMCLE() {
return FQQUMCLE;
}

public byte getFQQUMCS1() {
return FQQUMCS1;
}

public byte getFQQUMCS2() {
return FQQUMCS2;
}

public byte getFQQUMCSU() {
return FQQUMCSU;
}

public byte getFQQUMDEG() {
return FQQUMDEG;
}

public byte getFQQUMDIP() {
return FQQUMDIP;
}

public byte getFQQUMFOR() {
return FQQUMFOR;
}

public byte getFQQUMGCA() {
return FQQUMGCA;
}

public byte getFQQUMGCD() {
return FQQUMGCD;
}

public byte getFQQUMHNC() {
return FQQUMHNC;
}

public byte getFQQUMMAT() {
return FQQUMMAT;
}

public byte getFQQUMMIL() {
return FQQUMMIL;
}

public byte getFQQUMNNE() {
return FQQUMNNE;
}

public byte getFQQUMNUR() {
return FQQUMNUR;
}

public byte getFQQUMNV1() {
return FQQUMNV1;
}

public byte getFQQUMNV2() {
return FQQUMNV2;
}

public byte getFQQUMNV3() {
return FQQUMNV3;
}

public byte getFQQUMNV4() {
return FQQUMNV4;
}

public byte getFQQUMNV5() {
return FQQUMNV5;
}

public byte getFQQUMNVZ() {
return FQQUMNVZ;
}

public byte getFQQUMOAC() {
return FQQUMOAC;
}

public byte getFQQUMOLA() {
return FQQUMOLA;
}

public byte getFQQUMOLD() {
return FQQUMOLD;
}

public byte getFQQUMOLP() {
return FQQUMOLP;
}

public byte getFQQUMONC() {
return FQQUMONC;
}

public byte getFQQUMOPR() {
return FQQUMOPR;
}

public byte getFQQUMOVO() {
return FQQUMOVO;
}

public byte getFQQUMSLC() {
return FQQUMSLC;
}

public byte getFQQUMSLL() {
return FQQUMSLL;
}

public byte getFQQUMSUP() {
return FQQUMSUP;
}

public byte getFQQUMTEA() {
return FQQUMTEA;
}

public byte getFQQUMTRA() {
return FQQUMTRA;
}

public double getFST_TM() {
return FST_TM;
}

public byte getFTHAGD() {
return FTHAGD;
}

public byte getGCINHH() {
return GCINHH;
}

public byte getGTSPD_AG() {
return GTSPD_AG;
}

public double getGTSPD_AV() {
return GTSPD_AV;
}

public byte getGTSPD_ID() {
return GTSPD_ID;
}

public byte getHEACE() {
return HEACE;
}

public byte getHEACEA() {
return HEACEA;
}

public byte getHEAGAR() {
return HEAGAR;
}

public short getHEAGARY() {
return HEAGARY;
}

public byte getHEAGBR() {
return HEAGBR;
}

public short getHEAGBRY() {
return HEAGBRY;
}

public byte getHEAGCR() {
return HEAGCR;
}

public short getHEAGCRY() {
return HEAGCRY;
}

public byte getHEAGDR() {
return HEAGDR;
}

public short getHEAGDRY() {
return HEAGDRY;
}

public byte getHEAGER() {
return HEAGER;
}

public short getHEAGERY() {
return HEAGERY;
}

public byte getHEAGFR() {
return HEAGFR;
}

public short getHEAGFRY() {
return HEAGFRY;
}

public byte getHEAGG() {
return HEAGG;
}

public byte getHEAGGR() {
return HEAGGR;
}

public short getHEAGGRY() {
return HEAGGRY;
}

public byte getHEAGH() {
return HEAGH;
}

public byte getHEAGHR() {
return HEAGHR;
}

public short getHEAGHRY() {
return HEAGHRY;
}

public byte getHEAGIR() {
return HEAGIR;
}

public short getHEAGIRY() {
return HEAGIRY;
}

public byte getHEAGJR() {
return HEAGJR;
}

public short getHEAGJRY() {
return HEAGJRY;
}

public byte getHEAGK() {
return HEAGK;
}

public byte getHEAGKR() {
return HEAGKR;
}

public short getHEAGKRY() {
return HEAGKRY;
}

public byte getHEAID96() {
return HEAID96;
}

public byte getHEAIDAL() {
return HEAIDAL;
}

public byte getHEAIDBU() {
return HEAIDBU;
}

public byte getHEAIDCA() {
return HEAIDCA;
}

public byte getHEAIDCR() {
return HEAIDCR;
}

public byte getHEAIDEA() {
return HEAIDEA;
}

public byte getHEAIDEW() {
return HEAIDEW;
}

public byte getHEAIDMW() {
return HEAIDMW;
}

public byte getHEAIDZI() {
return HEAIDZI;
}

public byte getHEAMB() {
return HEAMB;
}

public byte getHEANA() {
return HEANA;
}

public byte getHEANB() {
return HEANB;
}

public byte getHEANC() {
return HEANC;
}

public byte getHEAND() {
return HEAND;
}

public byte getHEAND1() {
return HEAND1;
}

public byte getHEANE() {
return HEANE;
}

public byte getHEANF() {
return HEANF;
}

public byte getHEANG() {
return HEANG;
}

public byte getHEANH() {
return HEANH;
}

public byte getHEANILS() {
return HEANILS;
}

public byte getHEANIM86() {
return HEANIM86;
}

public byte getHEANIUS() {
return HEANIUS;
}

public byte getHEANK() {
return HEANK;
}

public byte getHEANM85() {
return HEANM85;
}

public byte getHEANMLA() {
return HEANMLA;
}

public byte getHEANMLC() {
return HEANMLC;
}

public byte getHEANMLS() {
return HEANMLS;
}

public byte getHEANMRA() {
return HEANMRA;
}

public byte getHEANMRC() {
return HEANMRC;
}

public byte getHEANMUS() {
return HEANMUS;
}

public byte getHEANS95() {
return HEANS95;
}

public byte getHEANSLA() {
return HEANSLA;
}

public byte getHEANSLC() {
return HEANSLC;
}

public byte getHEANSRA() {
return HEANSRA;
}

public byte getHEANSRC() {
return HEANSRC;
}

public byte getHEARTA() {
return HEARTA;
}

public byte getHEARTB() {
return HEARTB;
}

public byte getHEARTC() {
return HEARTC;
}

public byte getHEARTD() {
return HEARTD;
}

public byte getHEARTE() {
return HEARTE;
}

public byte getHEARTOA() {
return HEARTOA;
}

public byte getHEARTOT() {
return HEARTOT;
}

public byte getHEARTRA() {
return HEARTRA;
}

public byte getHEBPCHK() {
return HEBPCHK;
}

public byte getHECANAA() {
return HECANAA;
}

public byte getHECANBB() {
return HECANBB;
}

public byte getHECDA() {
return HECDA;
}

public byte getHECDB() {
return HECDB;
}

public byte getHECDC() {
return HECDC;
}

public byte getHECDD() {
return HECDD;
}

public byte getHECDD1() {
return HECDD1;
}

public byte getHECDE() {
return HECDE;
}

public byte getHECDFCA() {
return HECDFCA;
}

public byte getHECDFOT() {
return HECDFOT;
}

public byte getHECDFTH() {
return HECDFTH;
}

public byte getHECHMD() {
return HECHMD;
}

public byte getHECHME() {
return HECHME;
}

public byte getHECLUB1() {
return HECLUB1;
}

public byte getHECLUB2() {
return HECLUB2;
}

public byte getHECLUB3() {
return HECLUB3;
}

public byte getHECLUB96() {
return HECLUB96;
}

public byte getHEDACAN() {
return HEDACAN;
}

public byte getHEDACAR() {
return HEDACAR;
}

public byte getHEDACBP() {
return HEDACBP;
}

public byte getHEDACCH() {
return HEDACCH;
}

public byte getHEDACDI() {
return HEDACDI;
}

public byte getHEDACHF() {
return HEDACHF;
}

public byte getHEDACHM() {
return HEDACHM;
}

public byte getHEDACMI() {
return HEDACMI;
}

public byte getHEDACOT() {
return HEDACOT;
}

public byte getHEDACST() {
return HEDACST;
}

public byte getHEDANAN() {
return HEDANAN;
}

public byte getHEDANAR() {
return HEDANAR;
}

public byte getHEDANBP() {
return HEDANBP;
}

public byte getHEDANCH() {
return HEDANCH;
}

public byte getHEDANDI() {
return HEDANDI;
}

public byte getHEDANHF() {
return HEDANHF;
}

public byte getHEDANHM() {
return HEDANHM;
}

public byte getHEDANMI() {
return HEDANMI;
}

public byte getHEDANOT() {
return HEDANOT;
}

public byte getHEDANST() {
return HEDANST;
}

public byte getHEDASAN() {
return HEDASAN;
}

public byte getHEDASAR() {
return HEDASAR;
}

public byte getHEDASBP() {
return HEDASBP;
}

public byte getHEDASCH() {
return HEDASCH;
}

public byte getHEDASHF() {
return HEDASHF;
}

public byte getHEDASHM() {
return HEDASHM;
}

public byte getHEDASOT() {
return HEDASOT;
}

public byte getHEDAWAN() {
return HEDAWAN;
}

public byte getHEDAWAR() {
return HEDAWAR;
}

public byte getHEDAWBP() {
return HEDAWBP;
}

public byte getHEDAWCH() {
return HEDAWCH;
}

public byte getHEDAWDI() {
return HEDAWDI;
}

public byte getHEDAWHF() {
return HEDAWHF;
}

public byte getHEDAWHM() {
return HEDAWHM;
}

public byte getHEDAWMI() {
return HEDAWMI;
}

public byte getHEDAWOT() {
return HEDAWOT;
}

public byte getHEDAWST() {
return HEDAWST;
}

public byte getHEDBDAD() {
return HEDBDAD;
}

public byte getHEDBDAR() {
return HEDBDAR;
}

public byte getHEDBDAS() {
return HEDBDAS;
}

public byte getHEDBDCA() {
return HEDBDCA;
}

public byte getHEDBDDE() {
return HEDBDDE;
}

public byte getHEDBDLU() {
return HEDBDLU;
}

public byte getHEDBDOS() {
return HEDBDOS;
}

public byte getHEDBDPD() {
return HEDBDPD;
}

public byte getHEDBDPS() {
return HEDBDPS;
}

public byte getHEDBLU() {
return HEDBLU;
}

public byte getHEDBMAD() {
return HEDBMAD;
}

public byte getHEDBMAR() {
return HEDBMAR;
}

public byte getHEDBMAS() {
return HEDBMAS;
}

public byte getHEDBMCA() {
return HEDBMCA;
}

public byte getHEDBMDE() {
return HEDBMDE;
}

public byte getHEDBMLU() {
return HEDBMLU;
}

public byte getHEDBMOS() {
return HEDBMOS;
}

public byte getHEDBMPD() {
return HEDBMPD;
}

public byte getHEDBMPS() {
return HEDBMPS;
}

public byte getHEDBSAR() {
return HEDBSAR;
}

public byte getHEDBSAS() {
return HEDBSAS;
}

public byte getHEDBSCA() {
return HEDBSCA;
}

public byte getHEDBSDE() {
return HEDBSDE;
}

public byte getHEDBSOS() {
return HEDBSOS;
}

public byte getHEDBSPD() {
return HEDBSPD;
}

public byte getHEDBTS() {
return HEDBTS;
}

public byte getHEDBWAD() {
return HEDBWAD;
}

public byte getHEDBWAR() {
return HEDBWAR;
}

public byte getHEDBWAS() {
return HEDBWAS;
}

public byte getHEDBWCA() {
return HEDBWCA;
}

public byte getHEDBWDE() {
return HEDBWDE;
}

public byte getHEDBWLU() {
return HEDBWLU;
}

public byte getHEDBWOS() {
return HEDBWOS;
}

public byte getHEDBWPD() {
return HEDBWPD;
}

public byte getHEDBWPS() {
return HEDBWPS;
}

public byte getHEDCC() {
return HEDCC;
}

public byte getHEDENT() {
return HEDENT;
}

public byte getHEDIA95() {
return HEDIA95;
}

public byte getHEDIA96() {
return HEDIA96;
}

public byte getHEDIAAN() {
return HEDIAAN;
}

public byte getHEDIAAR() {
return HEDIAAR;
}

public byte getHEDIABP() {
return HEDIABP;
}

public byte getHEDIACH() {
return HEDIACH;
}

public byte getHEDIADI() {
return HEDIADI;
}

public byte getHEDIAHF() {
return HEDIAHF;
}

public byte getHEDIAHM() {
return HEDIAHM;
}

public byte getHEDIAMI() {
return HEDIAMI;
}

public byte getHEDIAST() {
return HEDIAST;
}

public byte getHEDIB96() {
return HEDIB96;
}

public byte getHEDIBAD() {
return HEDIBAD;
}

public byte getHEDIBAR() {
return HEDIBAR;
}

public byte getHEDIBAS() {
return HEDIBAS;
}

public byte getHEDIBBL() {
return HEDIBBL;
}

public byte getHEDIBCA() {
return HEDIBCA;
}

public byte getHEDIBDE() {
return HEDIBDE;
}

public byte getHEDIBLU() {
return HEDIBLU;
}

public byte getHEDIBOS() {
return HEDIBOS;
}

public byte getHEDIBPD() {
return HEDIBPD;
}

public byte getHEDIBPS() {
return HEDIBPS;
}

public byte getHEDIM85() {
return HEDIM85;
}

public byte getHEDIM86() {
return HEDIM86;
}

public byte getHEDIM96() {
return HEDIM96;
}

public byte getHEDIMAN() {
return HEDIMAN;
}

public byte getHEDIMAR() {
return HEDIMAR;
}

public byte getHEDIMBP() {
return HEDIMBP;
}

public byte getHEDIMCH() {
return HEDIMCH;
}

public byte getHEDIMDI() {
return HEDIMDI;
}

public byte getHEDIMHF() {
return HEDIMHF;
}

public byte getHEDIMHM() {
return HEDIMHM;
}

public byte getHEDIMMI() {
return HEDIMMI;
}

public byte getHEDIMST() {
return HEDIMST;
}

public byte getHEDNTA() {
return HEDNTA;
}

public byte getHEDNTB0() {
return HEDNTB0;
}

public byte getHEDNTB1() {
return HEDNTB1;
}

public byte getHEDNTB2() {
return HEDNTB2;
}

public byte getHEDNTB3() {
return HEDNTB3;
}

public byte getHEDNTB4() {
return HEDNTB4;
}

public byte getHEDNTB5() {
return HEDNTB5;
}

public byte getHEFTCHK() {
return HEFTCHK;
}

public byte getHEGENH() {
return HEGENH;
}

public byte getHEHBP() {
return HEHBP;
}

public byte getHEHBPA() {
return HEHBPA;
}

public byte getHEHBPB() {
return HEHBPB;
}

public byte getHEHBPB1() {
return HEHBPB1;
}

public byte getHEHPA() {
return HEHPA;
}

public byte getHEHPC() {
return HEHPC;
}

public byte getHEHPD96() {
return HEHPD96;
}

public byte getHEHPDBR() {
return HEHPDBR;
}

public byte getHEHPDDA() {
return HEHPDDA;
}

public byte getHEHPDDL() {
return HEHPDDL;
}

public byte getHEHPDFR() {
return HEHPDFR;
}

public byte getHEHPDGD() {
return HEHPDGD;
}

public byte getHEHPDGS() {
return HEHPDGS;
}

public byte getHEHPDNU() {
return HEHPDNU;
}

public byte getHEHPDOR() {
return HEHPDOR;
}

public byte getHEHPDOS() {
return HEHPDOS;
}

public byte getHEHPDOT() {
return HEHPDOT;
}

public byte getHEHPDPA() {
return HEHPDPA;
}

public byte getHEHPDPR() {
return HEHPDPR;
}

public byte getHEHPDSI() {
return HEHPDSI;
}

public byte getHEHPDSL() {
return HEHPDSL;
}

public byte getHEHPDSO() {
return HEHPDSO;
}

public byte getHEHPDSP() {
return HEHPDSP;
}

public byte getHEHPDSS() {
return HEHPDSS;
}

public byte getHEHPDVO() {
return HEHPDVO;
}

public byte getHEHPH96() {
return HEHPH96;
}

public byte getHEHPHBR() {
return HEHPHBR;
}

public byte getHEHPHDA() {
return HEHPHDA;
}

public byte getHEHPHDL() {
return HEHPHDL;
}

public byte getHEHPHFR() {
return HEHPHFR;
}

public byte getHEHPHGD() {
return HEHPHGD;
}

public byte getHEHPHGS() {
return HEHPHGS;
}

public byte getHEHPHNU() {
return HEHPHNU;
}

public byte getHEHPHOR() {
return HEHPHOR;
}

public byte getHEHPHOS() {
return HEHPHOS;
}

public byte getHEHPHOT() {
return HEHPHOT;
}

public byte getHEHPHPA() {
return HEHPHPA;
}

public byte getHEHPHPR() {
return HEHPHPR;
}

public byte getHEHPHSI() {
return HEHPHSI;
}

public byte getHEHPHSL() {
return HEHPHSL;
}

public byte getHEHPHSO() {
return HEHPHSO;
}

public byte getHEHPHSP() {
return HEHPHSP;
}

public byte getHEHPHSS() {
return HEHPHSS;
}

public byte getHEHPHVO() {
return HEHPHVO;
}

public byte getHEHPM96() {
return HEHPM96;
}

public byte getHEHPMBR() {
return HEHPMBR;
}

public byte getHEHPMDA() {
return HEHPMDA;
}

public byte getHEHPMDL() {
return HEHPMDL;
}

public byte getHEHPMFR() {
return HEHPMFR;
}

public byte getHEHPMGD() {
return HEHPMGD;
}

public boolean getHEHPMGS() {
return HEHPMGS;
}

public byte getHEHPMNU() {
return HEHPMNU;
}

public byte getHEHPMOR() {
return HEHPMOR;
}

public byte getHEHPMOS() {
return HEHPMOS;
}

public byte getHEHPMOT() {
return HEHPMOT;
}

public boolean getHEHPMPA() {
return HEHPMPA;
}

public byte getHEHPMPR() {
return HEHPMPR;
}

public byte getHEHPMSI() {
return HEHPMSI;
}

public byte getHEHPMSL() {
return HEHPMSL;
}

public byte getHEHPMSO() {
return HEHPMSO;
}

public byte getHEHPMSP() {
return HEHPMSP;
}

public byte getHEHPMSS() {
return HEHPMSS;
}

public boolean getHEHPMVO() {
return HEHPMVO;
}

public byte getHEHPP96() {
return HEHPP96;
}

public byte getHEHPPBR() {
return HEHPPBR;
}

public byte getHEHPPDA() {
return HEHPPDA;
}

public byte getHEHPPDL() {
return HEHPPDL;
}

public byte getHEHPPFR() {
return HEHPPFR;
}

public byte getHEHPPGD() {
return HEHPPGD;
}

public byte getHEHPPGS() {
return HEHPPGS;
}

public byte getHEHPPNU() {
return HEHPPNU;
}

public byte getHEHPPOR() {
return HEHPPOR;
}

public byte getHEHPPOS() {
return HEHPPOS;
}

public byte getHEHPPOT() {
return HEHPPOT;
}

public byte getHEHPPPA() {
return HEHPPPA;
}

public byte getHEHPPPR() {
return HEHPPPR;
}

public byte getHEHPPSI() {
return HEHPPSI;
}

public byte getHEHPPSL() {
return HEHPPSL;
}

public byte getHEHPPSO() {
return HEHPPSO;
}

public byte getHEHPPSP() {
return HEHPPSP;
}

public byte getHEHPPSS() {
return HEHPPSS;
}

public byte getHEHPPVO() {
return HEHPPVO;
}

public byte getHEHPS95() {
return HEHPS95;
}

public byte getHEHPS96() {
return HEHPS96;
}

public byte getHEHPSCH() {
return HEHPSCH;
}

public byte getHEHPSLE() {
return HEHPSLE;
}

public byte getHEHPSOT() {
return HEHPSOT;
}

public byte getHEHPSVE() {
return HEHPSVE;
}

public byte getHEHPT96() {
return HEHPT96;
}

public byte getHEHPTBR() {
return HEHPTBR;
}

public byte getHEHPTDA() {
return HEHPTDA;
}

public byte getHEHPTDL() {
return HEHPTDL;
}

public byte getHEHPTFR() {
return HEHPTFR;
}

public byte getHEHPTGD() {
return HEHPTGD;
}

public byte getHEHPTGS() {
return HEHPTGS;
}

public byte getHEHPTNU() {
return HEHPTNU;
}

public byte getHEHPTOR() {
return HEHPTOR;
}

public byte getHEHPTOS() {
return HEHPTOS;
}

public byte getHEHPTOT() {
return HEHPTOT;
}

public byte getHEHPTPA() {
return HEHPTPA;
}

public byte getHEHPTPR() {
return HEHPTPR;
}

public byte getHEHPTSI() {
return HEHPTSI;
}

public byte getHEHPTSL() {
return HEHPTSL;
}

public byte getHEHPTSO() {
return HEHPTSO;
}

public byte getHEHPTSP() {
return HEHPTSP;
}

public byte getHEHPTSS() {
return HEHPTSS;
}

public byte getHEHPTVO() {
return HEHPTVO;
}

public byte getHEHPW96() {
return HEHPW96;
}

public byte getHEHPWBR() {
return HEHPWBR;
}

public byte getHEHPWDA() {
return HEHPWDA;
}

public byte getHEHPWDL() {
return HEHPWDL;
}

public byte getHEHPWFR() {
return HEHPWFR;
}

public byte getHEHPWGD() {
return HEHPWGD;
}

public byte getHEHPWGS() {
return HEHPWGS;
}

public byte getHEHPWNU() {
return HEHPWNU;
}

public byte getHEHPWOR() {
return HEHPWOR;
}

public byte getHEHPWOS() {
return HEHPWOS;
}

public byte getHEHPWOT() {
return HEHPWOT;
}

public byte getHEHPWPA() {
return HEHPWPA;
}

public byte getHEHPWPR() {
return HEHPWPR;
}

public byte getHEHPWSI() {
return HEHPWSI;
}

public byte getHEHPWSL() {
return HEHPWSL;
}

public byte getHEHPWSO() {
return HEHPWSO;
}

public byte getHEHPWSP() {
return HEHPWSP;
}

public byte getHEHPWSS() {
return HEHPWSS;
}

public byte getHEHPWVO() {
return HEHPWVO;
}

public byte getHEHRTMD() {
return HEHRTMD;
}

public byte getHEHSM85() {
return HEHSM85;
}

public byte getHEHSM86() {
return HEHSM86;
}

public byte getHEHSM96() {
return HEHSM96;
}

public byte getHEHSMAC() {
return HEHSMAC;
}

public byte getHEHSMAQ() {
return HEHSMAQ;
}

public byte getHEHSMCH() {
return HEHSMCH;
}

public byte getHEHSMCR() {
return HEHSMCR;
}

public byte getHEHSMGY() {
return HEHSMGY;
}

public byte getHEHSMHY() {
return HEHSMHY;
}

public byte getHEHSMLE() {
return HEHSMLE;
}

public byte getHEHSMMA() {
return HEHSMMA;
}

public byte getHEHSMOS() {
return HEHSMOS;
}

public byte getHEHSMOT() {
return HEHSMOT;
}

public byte getHEHSMPE() {
return HEHSMPE;
}

public byte getHEHSMTH() {
return HEHSMTH;
}

public byte getHEHSMVE() {
return HEHSMVE;
}

public byte getHEINCT() {
return HEINCT;
}

public byte getHEINCTA() {
return HEINCTA;
}

public byte getHEJIAA1() {
return HEJIAA1;
}

public byte getHEJIAA2() {
return HEJIAA2;
}

public byte getHEJIAA3() {
return HEJIAA3;
}

public byte getHEJIAA4() {
return HEJIAA4;
}

public byte getHEJIAA5() {
return HEJIAA5;
}

public byte getHEJIBLH() {
return HEJIBLH;
}

public byte getHEJIBLK() {
return HEJIBLK;
}

public byte getHEJIBRH() {
return HEJIBRH;
}

public byte getHEJIBRK() {
return HEJIBRK;
}

public byte getHEKIDN() {
return HEKIDN;
}

public byte getHEKNEA() {
return HEKNEA;
}

public byte getHEKNEB() {
return HEKNEB;
}

public byte getHEKNEC() {
return HEKNEC;
}

public byte getHELC() {
return HELC;
}

public byte getHELEUK() {
return HELEUK;
}

public byte getHELNGB() {
return HELNGB;
}

public byte getHELWK() {
return HELWK;
}

public byte getHEMDAB() {
return HEMDAB;
}

public byte getHEMW() {
return HEMW;
}

public byte getHENMMI() {
return HENMMI;
}

public byte getHENMST() {
return HENMST;
}

public byte getHEOPCCA() {
return HEOPCCA;
}

public byte getHEOPCDI() {
return HEOPCDI;
}

public byte getHEOPCGL() {
return HEOPCGL;
}

public byte getHEOPCMD() {
return HEOPCMD;
}

public byte getHEOPFCA() {
return HEOPFCA;
}

public byte getHEOPFDI() {
return HEOPFDI;
}

public byte getHEOPFGL() {
return HEOPFGL;
}

public byte getHEOPFMD() {
return HEOPFMD;
}

public byte getHEOPNCA() {
return HEOPNCA;
}

public byte getHEOPNDI() {
return HEOPNDI;
}

public byte getHEOPNGL() {
return HEOPNGL;
}

public byte getHEOPNMD() {
return HEOPNMD;
}

public byte getHEOPSCA() {
return HEOPSCA;
}

public byte getHEOPSDI() {
return HEOPSDI;
}

public byte getHEOPSGL() {
return HEOPSGL;
}

public byte getHEOPSMD() {
return HEOPSMD;
}

public byte getHEOPT96() {
return HEOPT96;
}

public byte getHEOPTCA() {
return HEOPTCA;
}

public byte getHEOPTDI() {
return HEOPTDI;
}

public byte getHEOPTGL() {
return HEOPTGL;
}

public byte getHEOPTMD() {
return HEOPTMD;
}

public byte getHEPAB() {
return HEPAB;
}

public byte getHEPAB1() {
return HEPAB1;
}

public byte getHEPAC() {
return HEPAC;
}

public byte getHEPAD() {
return HEPAD;
}

public byte getHEPAE() {
return HEPAE;
}

public byte getHEPAF() {
return HEPAF;
}

public byte getHEPAF1() {
return HEPAF1;
}

public byte getHEPAK1() {
return HEPAK1;
}

public byte getHEPAWAL() {
return HEPAWAL;
}

public byte getHEPAWBA() {
return HEPAWBA;
}

public byte getHEPAWFE() {
return HEPAWFE;
}

public byte getHEPAWHI() {
return HEPAWHI;
}

public byte getHEPAWKN() {
return HEPAWKN;
}

public byte getHEPAWMO() {
return HEPAWMO;
}

public byte getHEPAWOT() {
return HEPAWOT;
}

public byte getHEPRKR() {
return HEPRKR;
}

public short getHEPRKRY() {
return HEPRKRY;
}

public byte getHEPSY95() {
return HEPSY95;
}

public byte getHEPSYAN() {
return HEPSYAN;
}

public byte getHEPSYDE() {
return HEPSYDE;
}

public byte getHEPSYEM() {
return HEPSYEM;
}

public byte getHEPSYHA() {
return HEPSYHA;
}

public byte getHEPSYMA() {
return HEPSYMA;
}

public byte getHEPSYMO() {
return HEPSYMO;
}

public byte getHEPSYPS() {
return HEPSYPS;
}

public byte getHEPSYSC() {
return HEPSYSC;
}

public byte getHEROSMD() {
return HEROSMD;
}

public byte getHERPA() {
return HERPA;
}

public byte getHERPB() {
return HERPB;
}

public byte getHERPC() {
return HERPC;
}

public byte getHERPD() {
return HERPD;
}

public byte getHERPE() {
return HERPE;
}

public byte getHERPE1() {
return HERPE1;
}

public byte getHERPF() {
return HERPF;
}

public byte getHERPG() {
return HERPG;
}

public byte getHERPH() {
return HERPH;
}

public byte getHERPI() {
return HERPI;
}

public byte getHERPJ() {
return HERPJ;
}

public byte getHESKD() {
return HESKD;
}

public byte getHESKE() {
return HESKE;
}

public byte getHESKF() {
return HESKF;
}

public byte getHESLFCB() {
return HESLFCB;
}

public byte getHESLFCM() {
return HESLFCM;
}

public byte getHESLFCR() {
return HESLFCR;
}

public short getHESLFCY() {
return HESLFCY;
}

public byte getHESTOP() {
return HESTOP;
}

public byte getHESTOPC() {
return HESTOPC;
}

public byte getHESUG() {
return HESUG;
}

public byte getHESUGA() {
return HESUGA;
}

public byte getHETEMP() {
return HETEMP;
}

public byte getHEWEE() {
return HEWEE;
}

public byte getHEWEEA() {
return HEWEEA;
}

public byte getHOADP95() {
return HOADP95;
}

public byte getHOADP96() {
return HOADP96;
}

public byte getHOADPAD() {
return HOADPAD;
}

public byte getHOADPAL() {
return HOADPAL;
}

public byte getHOADPAP() {
return HOADPAP;
}

public byte getHOADPBM() {
return HOADPBM;
}

public byte getHOADPCL() {
return HOADPCL;
}

public byte getHOADPHR() {
return HOADPHR;
}

public byte getHOADPKM() {
return HOADPKM;
}

public byte getHOADPLI() {
return HOADPLI;
}

public byte getHOADPRS() {
return HOADPRS;
}

public byte getHOADPWD() {
return HOADPWD;
}

public byte getHOALF1() {
return HOALF1;
}

public short getHOALF1L() {
return HOALF1L;
}

public byte getHOALF1R() {
return HOALF1R;
}

public byte getHOALF1T() {
return HOALF1T;
}

public short getHOALF1U() {
return HOALF1U;
}

public byte getHOALF2() {
return HOALF2;
}

public short getHOALF2L() {
return HOALF2L;
}

public byte getHOALF2R() {
return HOALF2R;
}

public byte getHOALF2T() {
return HOALF2T;
}

public short getHOALF2U() {
return HOALF2U;
}

public short getHOALFM1() {
return HOALFM1;
}

public short getHOALFM2() {
return HOALFM2;
}

public byte getHOALI1() {
return HOALI1;
}

public byte getHOALI2() {
return HOALI2;
}

public byte getHOASK() {
return HOASK;
}

public byte getHOBA2FE() {
return HOBA2FE;
}

public byte getHOBA2FL() {
return HOBA2FL;
}

public byte getHOBA2FR() {
return HOBA2FR;
}

public byte getHOBA2FU() {
return HOBA2FU;
}

public byte getHOBA2ME() {
return HOBA2ME;
}

public byte getHOBA2ML() {
return HOBA2ML;
}

public byte getHOBA2MR() {
return HOBA2MR;
}

public byte getHOBA2MU() {
return HOBA2MU;
}

public byte getHOBA2OE() {
return HOBA2OE;
}

public short getHOBA2OL() {
return HOBA2OL;
}

public byte getHOBA2OR() {
return HOBA2OR;
}

public short getHOBA2OU() {
return HOBA2OU;
}

public byte getHOBA2WE() {
return HOBA2WE;
}

public byte getHOBA2WL() {
return HOBA2WL;
}

public byte getHOBA2WR() {
return HOBA2WR;
}

public byte getHOBA2WU() {
return HOBA2WU;
}

public byte getHOBA2YE() {
return HOBA2YE;
}

public byte getHOBA2YL() {
return HOBA2YL;
}

public byte getHOBA2YR() {
return HOBA2YR;
}

public byte getHOBA2YU() {
return HOBA2YU;
}

public byte getHOBA3FE() {
return HOBA3FE;
}

public byte getHOBA3FL() {
return HOBA3FL;
}

public byte getHOBA3FR() {
return HOBA3FR;
}

public byte getHOBA3FU() {
return HOBA3FU;
}

public byte getHOBA3ME() {
return HOBA3ME;
}

public short getHOBA3ML() {
return HOBA3ML;
}

public byte getHOBA3MR() {
return HOBA3MR;
}

public short getHOBA3MU() {
return HOBA3MU;
}

public byte getHOBA3OE() {
return HOBA3OE;
}

public short getHOBA3OL() {
return HOBA3OL;
}

public byte getHOBA3OR() {
return HOBA3OR;
}

public short getHOBA3OU() {
return HOBA3OU;
}

public byte getHOBA3WE() {
return HOBA3WE;
}

public byte getHOBA3WL() {
return HOBA3WL;
}

public byte getHOBA3WR() {
return HOBA3WR;
}

public short getHOBA3WU() {
return HOBA3WU;
}

public byte getHOBA3YE() {
return HOBA3YE;
}

public byte getHOBA3YL() {
return HOBA3YL;
}

public byte getHOBA3YR() {
return HOBA3YR;
}

public byte getHOBA3YU() {
return HOBA3YU;
}

public byte getHOBA4FE() {
return HOBA4FE;
}

public byte getHOBA4FL() {
return HOBA4FL;
}

public byte getHOBA4FR() {
return HOBA4FR;
}

public byte getHOBA4FU() {
return HOBA4FU;
}

public byte getHOBA4ME() {
return HOBA4ME;
}

public short getHOBA4ML() {
return HOBA4ML;
}

public byte getHOBA4MR() {
return HOBA4MR;
}

public short getHOBA4MU() {
return HOBA4MU;
}

public byte getHOBA4OE() {
return HOBA4OE;
}

public short getHOBA4OL() {
return HOBA4OL;
}

public byte getHOBA4OR() {
return HOBA4OR;
}

public short getHOBA4OU() {
return HOBA4OU;
}

public byte getHOBA4WE() {
return HOBA4WE;
}

public short getHOBA4WL() {
return HOBA4WL;
}

public byte getHOBA4WR() {
return HOBA4WR;
}

public short getHOBA4WU() {
return HOBA4WU;
}

public byte getHOBA4YE() {
return HOBA4YE;
}

public byte getHOBA4YL() {
return HOBA4YL;
}

public byte getHOBA4YR() {
return HOBA4YR;
}

public byte getHOBA4YU() {
return HOBA4YU;
}

public byte getHOBA5FE() {
return HOBA5FE;
}

public byte getHOBA5FL() {
return HOBA5FL;
}

public byte getHOBA5FR() {
return HOBA5FR;
}

public byte getHOBA5FU() {
return HOBA5FU;
}

public byte getHOBA5ME() {
return HOBA5ME;
}

public short getHOBA5ML() {
return HOBA5ML;
}

public byte getHOBA5MR() {
return HOBA5MR;
}

public short getHOBA5MU() {
return HOBA5MU;
}

public byte getHOBA5OE() {
return HOBA5OE;
}

public byte getHOBA5OL() {
return HOBA5OL;
}

public byte getHOBA5OR() {
return HOBA5OR;
}

public byte getHOBA5OU() {
return HOBA5OU;
}

public byte getHOBA5WE() {
return HOBA5WE;
}

public byte getHOBA5WL() {
return HOBA5WL;
}

public byte getHOBA5WR() {
return HOBA5WR;
}

public byte getHOBA5WU() {
return HOBA5WU;
}

public byte getHOBA5YE() {
return HOBA5YE;
}

public byte getHOBA5YL() {
return HOBA5YL;
}

public byte getHOBA5YR() {
return HOBA5YR;
}

public byte getHOBA5YU() {
return HOBA5YU;
}

public byte getHOBA6FE() {
return HOBA6FE;
}

public byte getHOBA6FL() {
return HOBA6FL;
}

public byte getHOBA6FR() {
return HOBA6FR;
}

public byte getHOBA6FU() {
return HOBA6FU;
}

public byte getHOBA6ME() {
return HOBA6ME;
}

public byte getHOBA6ML() {
return HOBA6ML;
}

public byte getHOBA6MR() {
return HOBA6MR;
}

public byte getHOBA6MU() {
return HOBA6MU;
}

public byte getHOBA6OE() {
return HOBA6OE;
}

public byte getHOBA6OL() {
return HOBA6OL;
}

public byte getHOBA6OR() {
return HOBA6OR;
}

public byte getHOBA6OU() {
return HOBA6OU;
}

public byte getHOBA6WE() {
return HOBA6WE;
}

public byte getHOBA6WL() {
return HOBA6WL;
}

public byte getHOBA6WR() {
return HOBA6WR;
}

public byte getHOBA6WU() {
return HOBA6WU;
}

public byte getHOBA6YE() {
return HOBA6YE;
}

public byte getHOBA6YL() {
return HOBA6YL;
}

public byte getHOBA6YR() {
return HOBA6YR;
}

public byte getHOBA6YU() {
return HOBA6YU;
}

public byte getHOBA7FE() {
return HOBA7FE;
}

public byte getHOBA7FL() {
return HOBA7FL;
}

public byte getHOBA7FR() {
return HOBA7FR;
}

public byte getHOBA7FU() {
return HOBA7FU;
}

public byte getHOBA7ME() {
return HOBA7ME;
}

public byte getHOBA7ML() {
return HOBA7ML;
}

public byte getHOBA7MR() {
return HOBA7MR;
}

public byte getHOBA7MU() {
return HOBA7MU;
}

public byte getHOBA7OE() {
return HOBA7OE;
}

public byte getHOBA7OL() {
return HOBA7OL;
}

public byte getHOBA7OR() {
return HOBA7OR;
}

public byte getHOBA7OU() {
return HOBA7OU;
}

public byte getHOBA7WE() {
return HOBA7WE;
}

public byte getHOBA7WL() {
return HOBA7WL;
}

public byte getHOBA7WR() {
return HOBA7WR;
}

public byte getHOBA7WU() {
return HOBA7WU;
}

public byte getHOBA7YE() {
return HOBA7YE;
}

public byte getHOBA7YL() {
return HOBA7YL;
}

public byte getHOBA7YR() {
return HOBA7YR;
}

public byte getHOBA7YU() {
return HOBA7YU;
}

public byte getHOBA8FE() {
return HOBA8FE;
}

public byte getHOBA8FL() {
return HOBA8FL;
}

public byte getHOBA8FR() {
return HOBA8FR;
}

public byte getHOBA8FU() {
return HOBA8FU;
}

public byte getHOBA8ME() {
return HOBA8ME;
}

public byte getHOBA8ML() {
return HOBA8ML;
}

public byte getHOBA8MR() {
return HOBA8MR;
}

public byte getHOBA8MU() {
return HOBA8MU;
}

public byte getHOBA8OE() {
return HOBA8OE;
}

public byte getHOBA8OL() {
return HOBA8OL;
}

public byte getHOBA8OR() {
return HOBA8OR;
}

public byte getHOBA8OU() {
return HOBA8OU;
}

public byte getHOBA8WE() {
return HOBA8WE;
}

public byte getHOBA8WL() {
return HOBA8WL;
}

public byte getHOBA8WR() {
return HOBA8WR;
}

public byte getHOBA8WU() {
return HOBA8WU;
}

public byte getHOBA8YE() {
return HOBA8YE;
}

public byte getHOBA8YL() {
return HOBA8YL;
}

public byte getHOBA8YR() {
return HOBA8YR;
}

public byte getHOBA8YU() {
return HOBA8YU;
}

public byte getHOBA9FE() {
return HOBA9FE;
}

public byte getHOBA9FL() {
return HOBA9FL;
}

public byte getHOBA9FR() {
return HOBA9FR;
}

public byte getHOBA9FU() {
return HOBA9FU;
}

public byte getHOBA9ME() {
return HOBA9ME;
}

public byte getHOBA9ML() {
return HOBA9ML;
}

public byte getHOBA9MR() {
return HOBA9MR;
}

public byte getHOBA9MU() {
return HOBA9MU;
}

public byte getHOBA9OE() {
return HOBA9OE;
}

public byte getHOBA9OL() {
return HOBA9OL;
}

public byte getHOBA9OR() {
return HOBA9OR;
}

public byte getHOBA9OU() {
return HOBA9OU;
}

public byte getHOBA9WE() {
return HOBA9WE;
}

public byte getHOBA9WL() {
return HOBA9WL;
}

public byte getHOBA9WR() {
return HOBA9WR;
}

public byte getHOBA9WU() {
return HOBA9WU;
}

public byte getHOBA9YE() {
return HOBA9YE;
}

public byte getHOBA9YL() {
return HOBA9YL;
}

public byte getHOBA9YR() {
return HOBA9YR;
}

public byte getHOBA9YU() {
return HOBA9YU;
}

public byte getHOBAFE() {
return HOBAFE;
}

public byte getHOBAFL() {
return HOBAFL;
}

public byte getHOBAFR() {
return HOBAFR;
}

public byte getHOBAFU() {
return HOBAFU;
}

public byte getHOBAME() {
return HOBAME;
}

public short getHOBAML() {
return HOBAML;
}

public byte getHOBAMR() {
return HOBAMR;
}

public short getHOBAMU() {
return HOBAMU;
}

public byte getHOBAOE() {
return HOBAOE;
}

public short getHOBAOL() {
return HOBAOL;
}

public byte getHOBAOR() {
return HOBAOR;
}

public short getHOBAOU() {
return HOBAOU;
}

public byte getHOBAWE() {
return HOBAWE;
}

public short getHOBAWL() {
return HOBAWL;
}

public byte getHOBAWR() {
return HOBAWR;
}

public byte getHOBAWU() {
return HOBAWU;
}

public byte getHOBAYE() {
return HOBAYE;
}

public byte getHOBAYL() {
return HOBAYL;
}

public byte getHOBAYR() {
return HOBAYR;
}

public short getHOBAYU() {
return HOBAYU;
}

public byte getHOCC01() {
return HOCC01;
}

public byte getHOCC02() {
return HOCC02;
}

public byte getHOCC03() {
return HOCC03;
}

public byte getHOCC04() {
return HOCC04;
}

public byte getHOCC05() {
return HOCC05;
}

public byte getHOCC06() {
return HOCC06;
}

public byte getHOCC07() {
return HOCC07;
}

public byte getHOCC08() {
return HOCC08;
}

public byte getHOCC09() {
return HOCC09;
}

public byte getHOCC10() {
return HOCC10;
}

public byte getHOCC11() {
return HOCC11;
}

public byte getHOCC12() {
return HOCC12;
}

public byte getHOCC13() {
return HOCC13;
}

public byte getHOCC14() {
return HOCC14;
}

public byte getHOCC15() {
return HOCC15;
}

public byte getHOCC16() {
return HOCC16;
}

public byte getHOCC17() {
return HOCC17;
}

public byte getHOCC18() {
return HOCC18;
}

public byte getHOCC19() {
return HOCC19;
}

public byte getHOCC20() {
return HOCC20;
}

public byte getHOCENP() {
return HOCENP;
}

public short getHOCL() {
return HOCL;
}

public byte getHOCLE() {
return HOCLE;
}

public short getHOCLL() {
return HOCLL;
}

public byte getHOCLR() {
return HOCLR;
}

public short getHOCLU() {
return HOCLU;
}

public byte getHOEB() {
return HOEB;
}

public short getHOEBMS() {
return HOEBMS;
}

public byte getHOEBMSE() {
return HOEBMSE;
}

public byte getHOEBMSL() {
return HOEBMSL;
}

public byte getHOEBMSR() {
return HOEBMSR;
}

public byte getHOEBMSU() {
return HOEBMSU;
}

public short getHOEBMW() {
return HOEBMW;
}

public byte getHOEBMWE() {
return HOEBMWE;
}

public byte getHOEBMWL() {
return HOEBMWL;
}

public byte getHOEBMWR() {
return HOEBMWR;
}

public byte getHOEBMWU() {
return HOEBMWU;
}

public short getHOEBQS() {
return HOEBQS;
}

public byte getHOEBQSE() {
return HOEBQSE;
}

public short getHOEBQSL() {
return HOEBQSL;
}

public byte getHOEBQSR() {
return HOEBQSR;
}

public short getHOEBQSU() {
return HOEBQSU;
}

public short getHOEBQW() {
return HOEBQW;
}

public byte getHOEBQWE() {
return HOEBQWE;
}

public short getHOEBQWL() {
return HOEBQWL;
}

public byte getHOEBQWR() {
return HOEBQWR;
}

public short getHOEBQWU() {
return HOEBQWU;
}

public byte getHOED() {
return HOED;
}

public short getHOEDM() {
return HOEDM;
}

public byte getHOEDME() {
return HOEDME;
}

public byte getHOEDML() {
return HOEDML;
}

public byte getHOEDMR() {
return HOEDMR;
}

public byte getHOEDMU() {
return HOEDMU;
}

public short getHOEDQ() {
return HOEDQ;
}

public byte getHOEDQE() {
return HOEDQE;
}

public short getHOEDQL() {
return HOEDQL;
}

public byte getHOEDQR() {
return HOEDQR;
}

public short getHOEDQU() {
return HOEDQU;
}

public byte getHOEOS() {
return HOEOS;
}

public byte getHOEOSE() {
return HOEOSE;
}

public byte getHOEOSL() {
return HOEOSL;
}

public byte getHOEOSR() {
return HOEOSR;
}

public byte getHOEOSU() {
return HOEOSU;
}

public byte getHOEOW() {
return HOEOW;
}

public byte getHOEOWE() {
return HOEOWE;
}

public byte getHOEOWL() {
return HOEOWL;
}

public byte getHOEOWR() {
return HOEOWR;
}

public byte getHOEOWU() {
return HOEOWU;
}

public byte getHOEPAY() {
return HOEPAY;
}

public byte getHOEPS() {
return HOEPS;
}

public byte getHOEPSE() {
return HOEPSE;
}

public byte getHOEPSL() {
return HOEPSL;
}

public byte getHOEPSR() {
return HOEPSR;
}

public byte getHOEPSU() {
return HOEPSU;
}

public byte getHOEPW() {
return HOEPW;
}

public byte getHOEPWE() {
return HOEPWE;
}

public byte getHOEPWL() {
return HOEPWL;
}

public byte getHOEPWR() {
return HOEPWR;
}

public byte getHOEPWU() {
return HOEPWU;
}

public byte getHOFB() {
return HOFB;
}

public short getHOFBMS() {
return HOFBMS;
}

public byte getHOFBMSE() {
return HOFBMSE;
}

public byte getHOFBMSL() {
return HOFBMSL;
}

public byte getHOFBMSR() {
return HOFBMSR;
}

public byte getHOFBMSU() {
return HOFBMSU;
}

public short getHOFBMW() {
return HOFBMW;
}

public byte getHOFBMWE() {
return HOFBMWE;
}

public byte getHOFBMWL() {
return HOFBMWL;
}

public byte getHOFBMWR() {
return HOFBMWR;
}

public byte getHOFBMWU() {
return HOFBMWU;
}

public short getHOFBQS() {
return HOFBQS;
}

public byte getHOFBQSE() {
return HOFBQSE;
}

public short getHOFBQSL() {
return HOFBQSL;
}

public byte getHOFBQSR() {
return HOFBQSR;
}

public short getHOFBQSU() {
return HOFBQSU;
}

public short getHOFBQW() {
return HOFBQW;
}

public byte getHOFBQWE() {
return HOFBQWE;
}

public short getHOFBQWL() {
return HOFBQWL;
}

public byte getHOFBQWR() {
return HOFBQWR;
}

public short getHOFBQWU() {
return HOFBQWU;
}

public byte getHOFCS() {
return HOFCS;
}

public byte getHOFCSE() {
return HOFCSE;
}

public byte getHOFCSL() {
return HOFCSL;
}

public byte getHOFCSR() {
return HOFCSR;
}

public byte getHOFCSU() {
return HOFCSU;
}

public byte getHOFCW() {
return HOFCW;
}

public byte getHOFCWE() {
return HOFCWE;
}

public byte getHOFCWL() {
return HOFCWL;
}

public byte getHOFCWR() {
return HOFCWR;
}

public byte getHOFCWU() {
return HOFCWU;
}

public byte getHOFD() {
return HOFD;
}

public short getHOFDM() {
return HOFDM;
}

public byte getHOFDME() {
return HOFDME;
}

public byte getHOFDML() {
return HOFDML;
}

public byte getHOFDMR() {
return HOFDMR;
}

public byte getHOFDMU() {
return HOFDMU;
}

public short getHOFDQ() {
return HOFDQ;
}

public byte getHOFDQE() {
return HOFDQE;
}

public short getHOFDQL() {
return HOFDQL;
}

public byte getHOFDQR() {
return HOFDQR;
}

public short getHOFDQU() {
return HOFDQU;
}

public byte getHOFOIS() {
return HOFOIS;
}

public byte getHOFOISE() {
return HOFOISE;
}

public byte getHOFOISL() {
return HOFOISL;
}

public byte getHOFOISR() {
return HOFOISR;
}

public byte getHOFOISU() {
return HOFOISU;
}

public byte getHOFOIW() {
return HOFOIW;
}

public byte getHOFOIWE() {
return HOFOIWE;
}

public byte getHOFOIWL() {
return HOFOIWL;
}

public byte getHOFOIWR() {
return HOFOIWR;
}

public byte getHOFOIWU() {
return HOFOIWU;
}

public byte getHOFOODE() {
return HOFOODE;
}

public short getHOFOODL() {
return HOFOODL;
}

public byte getHOFOODR() {
return HOFOODR;
}

public short getHOFOODU() {
return HOFOODU;
}

public byte getHOFOS() {
return HOFOS;
}

public byte getHOFOSE() {
return HOFOSE;
}

public byte getHOFOSL() {
return HOFOSL;
}

public byte getHOFOSR() {
return HOFOSR;
}

public byte getHOFOSU() {
return HOFOSU;
}

public byte getHOFOW() {
return HOFOW;
}

public byte getHOFOWE() {
return HOFOWE;
}

public byte getHOFOWL() {
return HOFOWL;
}

public byte getHOFOWR() {
return HOFOWR;
}

public byte getHOFOWU() {
return HOFOWU;
}

public byte getHOFPAY() {
return HOFPAY;
}

public byte getHOFPGS() {
return HOFPGS;
}

public byte getHOFPGSE() {
return HOFPGSE;
}

public byte getHOFPGSL() {
return HOFPGSL;
}

public byte getHOFPGSR() {
return HOFPGSR;
}

public byte getHOFPGSU() {
return HOFPGSU;
}

public byte getHOFPGW() {
return HOFPGW;
}

public byte getHOFPGWE() {
return HOFPGWE;
}

public byte getHOFPGWL() {
return HOFPGWL;
}

public byte getHOFPGWR() {
return HOFPGWR;
}

public byte getHOFPGWU() {
return HOFPGWU;
}

public byte getHOFPS() {
return HOFPS;
}

public byte getHOFPSE() {
return HOFPSE;
}

public byte getHOFPSL() {
return HOFPSL;
}

public byte getHOFPSR() {
return HOFPSR;
}

public byte getHOFPSU() {
return HOFPSU;
}

public byte getHOFPW() {
return HOFPW;
}

public byte getHOFPWE() {
return HOFPWE;
}

public byte getHOFPWL() {
return HOFPWL;
}

public byte getHOFPWR() {
return HOFPWR;
}

public byte getHOFPWU() {
return HOFPWU;
}

public short getHOFSM() {
return HOFSM;
}

public byte getHOFSME() {
return HOFSME;
}

public byte getHOFSML() {
return HOFSML;
}

public byte getHOFSMR() {
return HOFSMR;
}

public byte getHOFSMU() {
return HOFSMU;
}

public byte getHOFSP() {
return HOFSP;
}

public byte getHOFSQ() {
return HOFSQ;
}

public byte getHOFSQE() {
return HOFSQE;
}

public byte getHOFSQL() {
return HOFSQL;
}

public byte getHOFSQR() {
return HOFSQR;
}

public byte getHOFSQU() {
return HOFSQU;
}

public byte getHOFSUP() {
return HOFSUP;
}

public short getHOFSW() {
return HOFSW;
}

public byte getHOFSWE() {
return HOFSWE;
}

public byte getHOFSWL() {
return HOFSWL;
}

public byte getHOFSWR() {
return HOFSWR;
}

public byte getHOFSWU() {
return HOFSWU;
}

public byte getHOFTOG() {
return HOFTOG;
}

public byte getHOFUEL95() {
return HOFUEL95;
}

public byte getHOFUELCO() {
return HOFUELCO;
}

public byte getHOFUELEL() {
return HOFUELEL;
}

public byte getHOFUELGA() {
return HOFUELGA;
}

public byte getHOFUELOI() {
return HOFUELOI;
}

public byte getHOFUELPA() {
return HOFUELPA;
}

public byte getHOFUELWO() {
return HOFUELWO;
}

public byte getHOFUEM85() {
return HOFUEM85;
}

public byte getHOFUEM86() {
return HOFUEM86;
}

public byte getHOFUEMCO() {
return HOFUEMCO;
}

public byte getHOFUEMEL() {
return HOFUEMEL;
}

public byte getHOFUEMGA() {
return HOFUEMGA;
}

public byte getHOFUEMOI() {
return HOFUEMOI;
}

public byte getHOFUEMPA() {
return HOFUEMPA;
}

public byte getHOFUEMWO() {
return HOFUEMWO;
}

public byte getHOFWS() {
return HOFWS;
}

public byte getHOFWSE() {
return HOFWSE;
}

public byte getHOFWSL() {
return HOFWSL;
}

public byte getHOFWSR() {
return HOFWSR;
}

public byte getHOFWSU() {
return HOFWSU;
}

public byte getHOFWW() {
return HOFWW;
}

public byte getHOFWWE() {
return HOFWWE;
}

public byte getHOFWWL() {
return HOFWWL;
}

public byte getHOFWWR() {
return HOFWWR;
}

public byte getHOFWWU() {
return HOFWWU;
}

public byte getHOFXS() {
return HOFXS;
}

public byte getHOFXSE() {
return HOFXSE;
}

public byte getHOFXSL() {
return HOFXSL;
}

public byte getHOFXSR() {
return HOFXSR;
}

public byte getHOFXSU() {
return HOFXSU;
}

public byte getHOFXW() {
return HOFXW;
}

public byte getHOFXWE() {
return HOFXWE;
}

public byte getHOFXWL() {
return HOFXWL;
}

public byte getHOFXWR() {
return HOFXWR;
}

public byte getHOFXWU() {
return HOFXWU;
}

public short getHOGBMS() {
return HOGBMS;
}

public byte getHOGBMSE() {
return HOGBMSE;
}

public byte getHOGBMSL() {
return HOGBMSL;
}

public byte getHOGBMSR() {
return HOGBMSR;
}

public byte getHOGBMSU() {
return HOGBMSU;
}

public short getHOGBMW() {
return HOGBMW;
}

public byte getHOGBMWE() {
return HOGBMWE;
}

public byte getHOGBMWL() {
return HOGBMWL;
}

public byte getHOGBMWR() {
return HOGBMWR;
}

public byte getHOGBMWU() {
return HOGBMWU;
}

public byte getHOGBP() {
return HOGBP;
}

public short getHOGBQS() {
return HOGBQS;
}

public byte getHOGBQSE() {
return HOGBQSE;
}

public short getHOGBQSL() {
return HOGBQSL;
}

public byte getHOGBQSR() {
return HOGBQSR;
}

public short getHOGBQSU() {
return HOGBQSU;
}

public short getHOGBQW() {
return HOGBQW;
}

public byte getHOGBQWE() {
return HOGBQWE;
}

public short getHOGBQWL() {
return HOGBQWL;
}

public byte getHOGBQWR() {
return HOGBQWR;
}

public short getHOGBQWU() {
return HOGBQWU;
}

public byte getHOGD() {
return HOGD;
}

public short getHOGDM() {
return HOGDM;
}

public byte getHOGDME() {
return HOGDME;
}

public byte getHOGDML() {
return HOGDML;
}

public byte getHOGDMR() {
return HOGDMR;
}

public byte getHOGDMU() {
return HOGDMU;
}

public short getHOGDQ() {
return HOGDQ;
}

public byte getHOGDQE() {
return HOGDQE;
}

public short getHOGDQL() {
return HOGDQL;
}

public byte getHOGDQR() {
return HOGDQR;
}

public short getHOGDQU() {
return HOGDQU;
}

public byte getHOGOS() {
return HOGOS;
}

public byte getHOGOSE() {
return HOGOSE;
}

public byte getHOGOSL() {
return HOGOSL;
}

public byte getHOGOSR() {
return HOGOSR;
}

public byte getHOGOSU() {
return HOGOSU;
}

public byte getHOGOW() {
return HOGOW;
}

public byte getHOGOWE() {
return HOGOWE;
}

public byte getHOGOWL() {
return HOGOWL;
}

public byte getHOGOWR() {
return HOGOWR;
}

public byte getHOGOWU() {
return HOGOWU;
}

public byte getHOGPAY() {
return HOGPAY;
}

public byte getHOGPS() {
return HOGPS;
}

public byte getHOGPSE() {
return HOGPSE;
}

public byte getHOGPSL() {
return HOGPSL;
}

public byte getHOGPSR() {
return HOGPSR;
}

public byte getHOGPSU() {
return HOGPSU;
}

public byte getHOGPW() {
return HOGPW;
}

public byte getHOGPWE() {
return HOGPWE;
}

public byte getHOGPWL() {
return HOGPWL;
}

public byte getHOGPWR() {
return HOGPWR;
}

public byte getHOGPWU() {
return HOGPWU;
}

public byte getHOHAV95() {
return HOHAV95;
}

public byte getHOHAV96() {
return HOHAV96;
}

public byte getHOHAVB95() {
return HOHAVB95;
}

public byte getHOHAVB96() {
return HOHAVB96;
}

public byte getHOHAVBCD() {
return HOHAVBCD;
}

public byte getHOHAVBDT() {
return HOHAVBDT;
}

public byte getHOHAVBDV() {
return HOHAVBDV;
}

public byte getHOHAVBDW() {
return HOHAVBDW;
}

public byte getHOHAVBFF() {
return HOHAVBFF;
}

public byte getHOHAVBMO() {
return HOHAVBMO;
}

public byte getHOHAVBPC() {
return HOHAVBPC;
}

public byte getHOHAVBPH() {
return HOHAVBPH;
}

public byte getHOHAVBTV() {
return HOHAVBTV;
}

public byte getHOHAVBVR() {
return HOHAVBVR;
}

public byte getHOHAVBWD() {
return HOHAVBWD;
}

public byte getHOHAVBWM() {
return HOHAVBWM;
}

public byte getHOHAVCD() {
return HOHAVCD;
}

public byte getHOHAVDT() {
return HOHAVDT;
}

public byte getHOHAVDV() {
return HOHAVDV;
}

public byte getHOHAVDW() {
return HOHAVDW;
}

public byte getHOHAVFF() {
return HOHAVFF;
}

public byte getHOHAVMO() {
return HOHAVMO;
}

public byte getHOHAVPC() {
return HOHAVPC;
}

public byte getHOHAVPH() {
return HOHAVPH;
}

public byte getHOHAVTV() {
return HOHAVTV;
}

public byte getHOHAVVR() {
return HOHAVVR;
}

public byte getHOHAVWD() {
return HOHAVWD;
}

public byte getHOHAVWM() {
return HOHAVWM;
}

public byte getHOHB95() {
return HOHB95;
}

public byte getHOHB96() {
return HOHB96;
}

public short getHOHBA() {
return HOHBA;
}

public byte getHOHBAFE() {
return HOHBAFE;
}

public byte getHOHBAFL() {
return HOHBAFL;
}

public byte getHOHBAFR() {
return HOHBAFR;
}

public byte getHOHBAFU() {
return HOHBAFU;
}

public byte getHOHBAME() {
return HOHBAME;
}

public short getHOHBAML() {
return HOHBAML;
}

public byte getHOHBAMR() {
return HOHBAMR;
}

public short getHOHBAMU() {
return HOHBAMU;
}

public byte getHOHBAOE() {
return HOHBAOE;
}

public byte getHOHBAOL() {
return HOHBAOL;
}

public byte getHOHBAOR() {
return HOHBAOR;
}

public short getHOHBAOU() {
return HOHBAOU;
}

public byte getHOHBAWE() {
return HOHBAWE;
}

public byte getHOHBAWL() {
return HOHBAWL;
}

public byte getHOHBAWR() {
return HOHBAWR;
}

public byte getHOHBAWU() {
return HOHBAWU;
}

public byte getHOHBAYE() {
return HOHBAYE;
}

public byte getHOHBAYL() {
return HOHBAYL;
}

public byte getHOHBAYR() {
return HOHBAYR;
}

public byte getHOHBAYU() {
return HOHBAYU;
}

public byte getHOHBCK() {
return HOHBCK;
}

public byte getHOHBCL() {
return HOHBCL;
}

public byte getHOHBEN() {
return HOHBEN;
}

public byte getHOHBGA() {
return HOHBGA;
}

public byte getHOHBM85() {
return HOHBM85;
}

public byte getHOHBM86() {
return HOHBM86;
}

public byte getHOHBM96() {
return HOHBM96;
}

public byte getHOHBMCL() {
return HOHBMCL;
}

public byte getHOHBME() {
return HOHBME;
}

public byte getHOHBMGA() {
return HOHBMGA;
}

public byte getHOHBMME() {
return HOHBMME;
}

public byte getHOHBMSG() {
return HOHBMSG;
}

public byte getHOHBMWP() {
return HOHBMWP;
}

public byte getHOHBP() {
return HOHBP;
}

public byte getHOHBSG() {
return HOHBSG;
}

public byte getHOHBWP() {
return HOHBWP;
}

public byte getHOHEA95() {
return HOHEA95;
}

public byte getHOHEA96() {
return HOHEA96;
}

public byte getHOHEAEF() {
return HOHEAEF;
}

public byte getHOHEAGF() {
return HOHEAGF;
}

public byte getHOHEAM85() {
return HOHEAM85;
}

public byte getHOHEAM86() {
return HOHEAM86;
}

public byte getHOHEAM96() {
return HOHEAM96;
}

public byte getHOHEAMEF() {
return HOHEAMEF;
}

public byte getHOHEAMGF() {
return HOHEAMGF;
}

public byte getHOHEAMOF() {
return HOHEAMOF;
}

public byte getHOHEAMPH() {
return HOHEAMPH;
}

public byte getHOHEAOF() {
return HOHEAOF;
}

public byte getHOHEAPH() {
return HOHEAPH;
}

public short getHOHV01() {
return HOHV01;
}

public byte getHOHV01E() {
return HOHV01E;
}

public short getHOHV01L() {
return HOHV01L;
}

public byte getHOHV01R() {
return HOHV01R;
}

public short getHOHV01U() {
return HOHV01U;
}

public short getHOHV02() {
return HOHV02;
}

public byte getHOHV02E() {
return HOHV02E;
}

public short getHOHV02L() {
return HOHV02L;
}

public byte getHOHV02R() {
return HOHV02R;
}

public short getHOHV02U() {
return HOHV02U;
}

public short getHOHV03() {
return HOHV03;
}

public byte getHOHV03E() {
return HOHV03E;
}

public short getHOHV03L() {
return HOHV03L;
}

public byte getHOHV03R() {
return HOHV03R;
}

public short getHOHV03U() {
return HOHV03U;
}

public short getHOHV04() {
return HOHV04;
}

public byte getHOHV04E() {
return HOHV04E;
}

public short getHOHV04L() {
return HOHV04L;
}

public byte getHOHV04R() {
return HOHV04R;
}

public short getHOHV04U() {
return HOHV04U;
}

public short getHOHV05() {
return HOHV05;
}

public byte getHOHV05E() {
return HOHV05E;
}

public short getHOHV05L() {
return HOHV05L;
}

public byte getHOHV05R() {
return HOHV05R;
}

public short getHOHV05U() {
return HOHV05U;
}

public short getHOHV06() {
return HOHV06;
}

public byte getHOHV06E() {
return HOHV06E;
}

public short getHOHV06L() {
return HOHV06L;
}

public byte getHOHV06R() {
return HOHV06R;
}

public short getHOHV06U() {
return HOHV06U;
}

public short getHOHV07() {
return HOHV07;
}

public byte getHOHV07E() {
return HOHV07E;
}

public short getHOHV07L() {
return HOHV07L;
}

public byte getHOHV07R() {
return HOHV07R;
}

public short getHOHV07U() {
return HOHV07U;
}

public short getHOHV08() {
return HOHV08;
}

public byte getHOHV08E() {
return HOHV08E;
}

public short getHOHV08L() {
return HOHV08L;
}

public byte getHOHV08R() {
return HOHV08R;
}

public short getHOHV08U() {
return HOHV08U;
}

public short getHOHV09() {
return HOHV09;
}

public byte getHOHV09E() {
return HOHV09E;
}

public short getHOHV09L() {
return HOHV09L;
}

public byte getHOHV09R() {
return HOHV09R;
}

public short getHOHV09U() {
return HOHV09U;
}

public short getHOHV10() {
return HOHV10;
}

public byte getHOHV10E() {
return HOHV10E;
}

public short getHOHV10L() {
return HOHV10L;
}

public byte getHOHV10R() {
return HOHV10R;
}

public short getHOHV10U() {
return HOHV10U;
}

public short getHOHV11() {
return HOHV11;
}

public byte getHOHV11E() {
return HOHV11E;
}

public short getHOHV11L() {
return HOHV11L;
}

public byte getHOHV11R() {
return HOHV11R;
}

public short getHOHV11U() {
return HOHV11U;
}

public short getHOHV12() {
return HOHV12;
}

public byte getHOHV12E() {
return HOHV12E;
}

public short getHOHV12L() {
return HOHV12L;
}

public byte getHOHV12R() {
return HOHV12R;
}

public short getHOHV12U() {
return HOHV12U;
}

public byte getHOINA95() {
return HOINA95;
}

public byte getHOINA96() {
return HOINA96;
}

public byte getHOINACL() {
return HOINACL;
}

public byte getHOINAGD() {
return HOINAGD;
}

public byte getHOINAM85() {
return HOINAM85;
}

public byte getHOINAM86() {
return HOINAM86;
}

public byte getHOINAM96() {
return HOINAM96;
}

public byte getHOINAMCL() {
return HOINAMCL;
}

public byte getHOINAME() {
return HOINAME;
}

public byte getHOINAMGD() {
return HOINAMGD;
}

public byte getHOINAMME() {
return HOINAMME;
}

public byte getHOINAMSG() {
return HOINAMSG;
}

public byte getHOINAMWP() {
return HOINAMWP;
}

public byte getHOINASG() {
return HOINASG;
}

public byte getHOINAWP() {
return HOINAWP;
}

public byte getHOINC96() {
return HOINC96;
}

public byte getHOINCBI() {
return HOINCBI;
}

public byte getHOINCL96() {
return HOINCL96;
}

public byte getHOINCLCO() {
return HOINCLCO;
}

public byte getHOINCLGA() {
return HOINCLGA;
}

public byte getHOINCLHE() {
return HOINCLHE;
}

public byte getHOINCLLA() {
return HOINCLLA;
}

public byte getHOINCLSE() {
return HOINCLSE;
}

public byte getHOINCLWA() {
return HOINCLWA;
}

public byte getHOINCM85() {
return HOINCM85;
}

public byte getHOINCM86() {
return HOINCM86;
}

public byte getHOINCM96() {
return HOINCM96;
}

public byte getHOINCMBI() {
return HOINCMBI;
}

public byte getHOINCMOT() {
return HOINCMOT;
}

public byte getHOINCMPI() {
return HOINCMPI;
}

public byte getHOINCMPP() {
return HOINCMPP;
}

public byte getHOINCOT() {
return HOINCOT;
}

public byte getHOINCPI() {
return HOINCPI;
}

public byte getHOINCPP() {
return HOINCPP;
}

public byte getHOMEXT() {
return HOMEXT;
}

public int getHOMEXTA() {
return HOMEXTA;
}

public boolean getHOMEXTE() {
return HOMEXTE;
}

public int getHOMEXTL() {
return HOMEXTL;
}

public boolean getHOMEXTR() {
return HOMEXTR;
}

public boolean getHOMEXTU() {
return HOMEXTU;
}

public byte getHOMFV() {
return HOMFV;
}

public short getHOMINC() {
return HOMINC;
}

public boolean getHOMINCE() {
return HOMINCE;
}

public boolean getHOMINCL() {
return HOMINCL;
}

public boolean getHOMINCR() {
return HOMINCR;
}

public boolean getHOMINCU() {
return HOMINCU;
}

public byte getHOMMISN() {
return HOMMISN;
}

public int getHOMNEWA() {
return HOMNEWA;
}

public byte getHOMNEWE() {
return HOMNEWE;
}

public int getHOMNEWL() {
return HOMNEWL;
}

public byte getHOMNEWN() {
return HOMNEWN;
}

public byte getHOMNEWR() {
return HOMNEWR;
}

public byte getHOMNEWU() {
return HOMNEWU;
}

public byte getHOMNREA() {
return HOMNREA;
}

public byte getHOMNUM85() {
return HOMNUM85;
}

public byte getHOMNUM86() {
return HOMNUM86;
}

public byte getHOMNUM96() {
return HOMNUM96;
}

public byte getHOMNUMCP() {
return HOMNUMCP;
}

public byte getHOMNUMHE() {
return HOMNUMHE;
}

public byte getHOMNUMHI() {
return HOMNUMHI;
}

public byte getHOMNUMOC() {
return HOMNUMOC;
}

public byte getHOMNUS95() {
return HOMNUS95;
}

public byte getHOMNUS96() {
return HOMNUS96;
}

public byte getHOMNUSCP() {
return HOMNUSCP;
}

public byte getHOMNUSHE() {
return HOMNUSHE;
}

public byte getHOMNUSHI() {
return HOMNUSHI;
}

public byte getHOMNUSOC() {
return HOMNUSOC;
}

public byte getHOMREA() {
return HOMREA;
}

public byte getHOMREPE() {
return HOMREPE;
}

public short getHOMREPL() {
return HOMREPL;
}

public byte getHOMREPR() {
return HOMREPR;
}

public short getHOMREPU() {
return HOMREPU;
}

public byte getHOMSAM() {
return HOMSAM;
}

public byte getHOMTY() {
return HOMTY;
}

public byte getHOMUM85() {
return HOMUM85;
}

public byte getHOMUM86() {
return HOMUM86;
}

public byte getHOMUMCP() {
return HOMUMCP;
}

public byte getHOMUMHE() {
return HOMUMHE;
}

public byte getHOMUMHI() {
return HOMUMHI;
}

public byte getHOMUMOC() {
return HOMUMOC;
}

public byte getHOMUSECP() {
return HOMUSECP;
}

public byte getHOMUSEHE() {
return HOMUSEHE;
}

public byte getHOMUSEHI() {
return HOMUSEHI;
}

public byte getHOMUSEOC() {
return HOMUSEOC;
}

public byte getHOMUSEOT() {
return HOMUSEOT;
}

public byte getHOOUTFE() {
return HOOUTFE;
}

public short getHOOUTFL() {
return HOOUTFL;
}

public byte getHOOUTFR() {
return HOOUTFR;
}

public short getHOOUTFU() {
return HOOUTFU;
}

public byte getHOPAYE() {
return HOPAYE;
}

public int getHOPAYL() {
return HOPAYL;
}

public byte getHOPAYR() {
return HOPAYR;
}

public int getHOPAYU() {
return HOPAYU;
}

public byte getHOPRO95() {
return HOPRO95;
}

public byte getHOPRO96() {
return HOPRO96;
}

public byte getHOPROCO() {
return HOPROCO;
}

public byte getHOPROCP() {
return HOPROCP;
}

public byte getHOPRODK() {
return HOPRODK;
}

public byte getHOPROEP() {
return HOPROEP;
}

public byte getHOPROIN() {
return HOPROIN;
}

public byte getHOPROM85() {
return HOPROM85;
}

public byte getHOPROM86() {
return HOPROM86;
}

public byte getHOPROM96() {
return HOPROM96;
}

public byte getHOPROMCO() {
return HOPROMCO;
}

public byte getHOPROMCP() {
return HOPROMCP;
}

public byte getHOPROMDK() {
return HOPROMDK;
}

public byte getHOPROMEP() {
return HOPROMEP;
}

public byte getHOPROMIN() {
return HOPROMIN;
}

public byte getHOPROMNZ() {
return HOPROMNZ;
}

public byte getHOPROMPO() {
return HOPROMPO;
}

public byte getHOPROMRD() {
return HOPROMRD;
}

public byte getHOPROMRO() {
return HOPROMRO;
}

public byte getHOPROMSN() {
return HOPROMSN;
}

public byte getHOPROMSP() {
return HOPROMSP;
}

public byte getHOPROMST() {
return HOPROMST;
}

public byte getHOPROMVA() {
return HOPROMVA;
}

public byte getHOPROMWA() {
return HOPROMWA;
}

public byte getHOPRONZ() {
return HOPRONZ;
}

public byte getHOPROPO() {
return HOPROPO;
}

public byte getHOPRORD() {
return HOPRORD;
}

public byte getHOPRORO() {
return HOPRORO;
}

public byte getHOPROSN() {
return HOPROSN;
}

public byte getHOPROSP() {
return HOPROSP;
}

public byte getHOPROWA() {
return HOPROWA;
}

public byte getHOREBFE() {
return HOREBFE;
}

public short getHOREBFL() {
return HOREBFL;
}

public byte getHOREBFR() {
return HOREBFR;
}

public short getHOREBFU() {
return HOREBFU;
}

public byte getHOREBME() {
return HOREBME;
}

public short getHOREBML() {
return HOREBML;
}

public byte getHOREBMR() {
return HOREBMR;
}

public short getHOREBMU() {
return HOREBMU;
}

public byte getHOREBOE() {
return HOREBOE;
}

public short getHOREBOL() {
return HOREBOL;
}

public byte getHOREBOR() {
return HOREBOR;
}

public short getHOREBOU() {
return HOREBOU;
}

public byte getHOREBWE() {
return HOREBWE;
}

public short getHOREBWL() {
return HOREBWL;
}

public byte getHOREBWR() {
return HOREBWR;
}

public short getHOREBWU() {
return HOREBWU;
}

public byte getHOREBYE() {
return HOREBYE;
}

public short getHOREBYL() {
return HOREBYL;
}

public byte getHOREBYR() {
return HOREBYR;
}

public byte getHOREBYU() {
return HOREBYU;
}

public byte getHORET() {
return HORET;
}

public byte getHORFEE1() {
return HORFEE1;
}

public byte getHORFEE2() {
return HORFEE2;
}

public byte getHORFEP1() {
return HORFEP1;
}

public boolean getHORFEP2() {
return HORFEP2;
}

public byte getHORHB() {
return HORHB;
}

public byte getHORIN96() {
return HORIN96;
}

public byte getHORIN97() {
return HORIN97;
}

public byte getHORINHI() {
return HORINHI;
}

public byte getHORINHR() {
return HORINHR;
}

public short getHORINM() {
return HORINM;
}

public byte getHORINM85() {
return HORINM85;
}

public byte getHORINM86() {
return HORINM86;
}

public byte getHORINM96() {
return HORINM96;
}

public byte getHORINM97() {
return HORINM97;
}

public byte getHORINME() {
return HORINME;
}

public byte getHORINMHI() {
return HORINMHI;
}

public byte getHORINMHR() {
return HORINMHR;
}

public short getHORINML() {
return HORINML;
}

public boolean getHORINMOT() {
return HORINMOT;
}

public byte getHORINMPA() {
return HORINMPA;
}

public byte getHORINMR() {
return HORINMR;
}

public short getHORINMU() {
return HORINMU;
}

public byte getHORINOT() {
return HORINOT;
}

public byte getHORINPA() {
return HORINPA;
}

public byte getHORMAIN() {
return HORMAIN;
}

public byte getHORMO() {
return HORMO;
}

public boolean getHORMOFE() {
return HORMOFE;
}

public boolean getHORMOFL() {
return HORMOFL;
}

public byte getHORMOFP() {
return HORMOFP;
}

public boolean getHORMOFR() {
return HORMOFR;
}

public boolean getHORMOFU() {
return HORMOFU;
}

public int getHORMOL() {
return HORMOL;
}

public byte getHORMOLA() {
return HORMOLA;
}

public byte getHORMOLE() {
return HORMOLE;
}

public int getHORMOLL() {
return HORMOLL;
}

public byte getHORMOLR() {
return HORMOLR;
}

public int getHORMOLU() {
return HORMOLU;
}

public byte getHORMOM85() {
return HORMOM85;
}

public byte getHORMOM86() {
return HORMOM86;
}

public byte getHORMOMBA() {
return HORMOMBA;
}

public byte getHORMOMBQ() {
return HORMOMBQ;
}

public boolean getHORMOME() {
return HORMOME;
}

public byte getHORMOMFP() {
return HORMOMFP;
}

public boolean getHORMOML() {
return HORMOML;
}

public byte getHORMOMLA() {
return HORMOMLA;
}

public byte getHORMOMNS() {
return HORMOMNS;
}

public boolean getHORMOMR() {
return HORMOMR;
}

public byte getHORMOMSH() {
return HORMOMSH;
}

public byte getHORMOMSM() {
return HORMOMSM;
}

public boolean getHORMOMU() {
return HORMOMU;
}

public boolean getHORMOOE() {
return HORMOOE;
}

public boolean getHORMOOL() {
return HORMOOL;
}

public boolean getHORMOOR() {
return HORMOOR;
}

public byte getHORMOOT() {
return HORMOOT;
}

public boolean getHORMOOU() {
return HORMOOU;
}

public byte getHORMOSH() {
return HORMOSH;
}

public byte getHORMOSM() {
return HORMOSM;
}

public boolean getHORMOWE() {
return HORMOWE;
}

public boolean getHORMOWL() {
return HORMOWL;
}

public boolean getHORMOWR() {
return HORMOWR;
}

public boolean getHORMOWU() {
return HORMOWU;
}

public boolean getHORMOYE() {
return HORMOYE;
}

public boolean getHORMOYL() {
return HORMOYL;
}

public boolean getHORMOYR() {
return HORMOYR;
}

public boolean getHORMOYU() {
return HORMOYU;
}

public byte getHORMS() {
return HORMS;
}

public boolean getHORMUFE() {
return HORMUFE;
}

public boolean getHORMUFL() {
return HORMUFL;
}

public boolean getHORMUFR() {
return HORMUFR;
}

public boolean getHORMUFU() {
return HORMUFU;
}

public boolean getHORMUME() {
return HORMUME;
}

public boolean getHORMUML() {
return HORMUML;
}

public boolean getHORMUMR() {
return HORMUMR;
}

public boolean getHORMUMU() {
return HORMUMU;
}

public boolean getHORMUO() {
return HORMUO;
}

public boolean getHORMUOE() {
return HORMUOE;
}

public boolean getHORMUOL() {
return HORMUOL;
}

public boolean getHORMUOR() {
return HORMUOR;
}

public boolean getHORMUOU() {
return HORMUOU;
}

public boolean getHORMUWE() {
return HORMUWE;
}

public boolean getHORMUWL() {
return HORMUWL;
}

public boolean getHORMUWR() {
return HORMUWR;
}

public boolean getHORMUWU() {
return HORMUWU;
}

public boolean getHORMUYE() {
return HORMUYE;
}

public boolean getHORMUYL() {
return HORMUYL;
}

public boolean getHORMUYR() {
return HORMUYR;
}

public boolean getHORMUYU() {
return HORMUYU;
}

public byte getHORMV95() {
return HORMV95;
}

public byte getHORMVBA() {
return HORMVBA;
}

public byte getHORMVBO() {
return HORMVBO;
}

public byte getHORMVER() {
return HORMVER;
}

public byte getHORMVHR() {
return HORMVHR;
}

public byte getHORMVIF() {
return HORMVIF;
}

public byte getHORMVJR() {
return HORMVJR;
}

public byte getHORMVM85() {
return HORMVM85;
}

public byte getHORMVM86() {
return HORMVM86;
}

public byte getHORMVMAB() {
return HORMVMAB;
}

public byte getHORMVMBA() {
return HORMVMBA;
}

public byte getHORMVMBO() {
return HORMVMBO;
}

public byte getHORMVMER() {
return HORMVMER;
}

public byte getHORMVMHR() {
return HORMVMHR;
}

public byte getHORMVMIF() {
return HORMVMIF;
}

public byte getHORMVMJR() {
return HORMVMJR;
}

public byte getHORMVMMS() {
return HORMVMMS;
}

public byte getHORMVMNF() {
return HORMVMNF;
}

public byte getHORMVMNH() {
return HORMVMNH;
}

public byte getHORMVMNJ() {
return HORMVMNJ;
}

public byte getHORMVMOF() {
return HORMVMOF;
}

public byte getHORMVMPC() {
return HORMVMPC;
}

public byte getHORMVMPN() {
return HORMVMPN;
}

public byte getHORMVMS() {
return HORMVMS;
}

public byte getHORMVMSP() {
return HORMVMSP;
}

public byte getHORMVNF() {
return HORMVNF;
}

public byte getHORMVNJ() {
return HORMVNJ;
}

public byte getHORMVOF() {
return HORMVOF;
}

public byte getHORMVPN() {
return HORMVPN;
}

public byte getHORMVSP() {
return HORMVSP;
}

public byte getHORPAY() {
return HORPAY;
}

public byte getHORPC() {
return HORPC;
}

public int getHORPCM() {
return HORPCM;
}

public boolean getHORPCME() {
return HORPCME;
}

public boolean getHORPCML() {
return HORPCML;
}

public boolean getHORPCMR() {
return HORPCMR;
}

public boolean getHORPCMU() {
return HORPCMU;
}

public int getHORPM() {
return HORPM;
}

public byte getHORPME() {
return HORPME;
}

public short getHORPML() {
return HORPML;
}

public byte getHORPMR() {
return HORPMR;
}

public int getHORPMU() {
return HORPMU;
}

public boolean getHORPOFO() {
return HORPOFO;
}

public byte getHORPOS() {
return HORPOS;
}

public boolean getHORPOSO() {
return HORPOSO;
}

public boolean getHORRME() {
return HORRME;
}

public boolean getHORRML() {
return HORRML;
}

public boolean getHORRMR() {
return HORRMR;
}

public boolean getHORRMU() {
return HORRMU;
}

public byte getHOSELLE() {
return HOSELLE;
}

public int getHOSELLL() {
return HOSELLL;
}

public byte getHOSELLR() {
return HOSELLR;
}

public int getHOSELLU() {
return HOSELLU;
}

public byte getHOTENST() {
return HOTENST;
}

public byte getHOV() {
return HOV;
}

public byte getHOVAG11() {
return HOVAG11;
}

public byte getHOVAG12() {
return HOVAG12;
}

public byte getHOVAG13() {
return HOVAG13;
}

public byte getHOVAG14() {
return HOVAG14;
}

public byte getHOVAG15() {
return HOVAG15;
}

public byte getHOVAG16() {
return HOVAG16;
}

public int getHOVE() {
return HOVE;
}

public byte getHOVEE() {
return HOVEE;
}

public byte getHOVEHX() {
return HOVEHX;
}

public int getHOVEL() {
return HOVEL;
}

public String getHOVER() {
return HOVER;
}

public String getHOVER10() {
return HOVER10;
}

public boolean getHOVER11() {
return HOVER11;
}

public String getHOVER12() {
return HOVER12;
}

public String getHOVER13() {
return HOVER13;
}

public boolean getHOVER14() {
return HOVER14;
}

public boolean getHOVER15() {
return HOVER15;
}

public String getHOVER16() {
return HOVER16;
}

public String getHOVER2() {
return HOVER2;
}

public String getHOVER3() {
return HOVER3;
}

public String getHOVER4() {
return HOVER4;
}

public String getHOVER5() {
return HOVER5;
}

public String getHOVER6() {
return HOVER6;
}

public String getHOVER7() {
return HOVER7;
}

public boolean getHOVER8() {
return HOVER8;
}

public String getHOVER9() {
return HOVER9;
}

public int getHOVEU() {
return HOVEU;
}

public String getHOVLR() {
return HOVLR;
}

public String getHOVLR10() {
return HOVLR10;
}

public boolean getHOVLR11() {
return HOVLR11;
}

public boolean getHOVLR12() {
return HOVLR12;
}

public boolean getHOVLR13() {
return HOVLR13;
}

public boolean getHOVLR14() {
return HOVLR14;
}

public String getHOVLR15() {
return HOVLR15;
}

public boolean getHOVLR16() {
return HOVLR16;
}

public String getHOVLR2() {
return HOVLR2;
}

public String getHOVLR3() {
return HOVLR3;
}

public String getHOVLR4() {
return HOVLR4;
}

public String getHOVLR5() {
return HOVLR5;
}

public String getHOVLR6() {
return HOVLR6;
}

public String getHOVLR7() {
return HOVLR7;
}

public String getHOVLR8() {
return HOVLR8;
}

public String getHOVLR9() {
return HOVLR9;
}

public int getHOVML() {
return HOVML;
}

public byte getHOVMLE() {
return HOVMLE;
}

public int getHOVMLL() {
return HOVMLL;
}

public byte getHOVMLR() {
return HOVMLR;
}

public int getHOVMLU() {
return HOVMLU;
}

public byte getHOVN() {
return HOVN;
}

public byte getHOVNO() {
return HOVNO;
}

public byte getHOVNO10() {
return HOVNO10;
}

public byte getHOVNO11() {
return HOVNO11;
}

public byte getHOVNO12() {
return HOVNO12;
}

public byte getHOVNO13() {
return HOVNO13;
}

public byte getHOVNO14() {
return HOVNO14;
}

public byte getHOVNO15() {
return HOVNO15;
}

public byte getHOVNO16() {
return HOVNO16;
}

public byte getHOVNO2() {
return HOVNO2;
}

public byte getHOVNO3() {
return HOVNO3;
}

public byte getHOVNO4() {
return HOVNO4;
}

public byte getHOVNO5() {
return HOVNO5;
}

public byte getHOVNO6() {
return HOVNO6;
}

public byte getHOVNO7() {
return HOVNO7;
}

public byte getHOVNO8() {
return HOVNO8;
}

public byte getHOVNO9() {
return HOVNO9;
}

public byte getHOVNR() {
return HOVNR;
}

public boolean getHOVNR10() {
return HOVNR10;
}

public byte getHOVNR11() {
return HOVNR11;
}

public boolean getHOVNR12() {
return HOVNR12;
}

public boolean getHOVNR13() {
return HOVNR13;
}

public byte getHOVNR14() {
return HOVNR14;
}

public boolean getHOVNR15() {
return HOVNR15;
}

public boolean getHOVNR16() {
return HOVNR16;
}

public byte getHOVNR2() {
return HOVNR2;
}

public String getHOVNR3() {
return HOVNR3;
}

public byte getHOVNR4() {
return HOVNR4;
}

public byte getHOVNR5() {
return HOVNR5;
}

public byte getHOVNR6() {
return HOVNR6;
}

public byte getHOVNR7() {
return HOVNR7;
}

public byte getHOVNR8() {
return HOVNR8;
}

public byte getHOVNR9() {
return HOVNR9;
}

public byte getHOVNW() {
return HOVNW;
}

public byte getHOVNW10() {
return HOVNW10;
}

public byte getHOVNW11() {
return HOVNW11;
}

public byte getHOVNW12() {
return HOVNW12;
}

public byte getHOVNW13() {
return HOVNW13;
}

public byte getHOVNW14() {
return HOVNW14;
}

public byte getHOVNW15() {
return HOVNW15;
}

public byte getHOVNW16() {
return HOVNW16;
}

public byte getHOVNW2() {
return HOVNW2;
}

public byte getHOVNW4() {
return HOVNW4;
}

public byte getHOVNW5() {
return HOVNW5;
}

public byte getHOVNW6() {
return HOVNW6;
}

public byte getHOVNW7() {
return HOVNW7;
}

public byte getHOVNW8() {
return HOVNW8;
}

public byte getHOVNW9() {
return HOVNW9;
}

public byte getHOVST() {
return HOVST;
}

public byte getHOVST10() {
return HOVST10;
}

public byte getHOVST11() {
return HOVST11;
}

public byte getHOVST12() {
return HOVST12;
}

public byte getHOVST13() {
return HOVST13;
}

public byte getHOVST14() {
return HOVST14;
}

public byte getHOVST15() {
return HOVST15;
}

public byte getHOVST16() {
return HOVST16;
}

public byte getHOVST2() {
return HOVST2;
}

public byte getHOVST3() {
return HOVST3;
}

public byte getHOVST4() {
return HOVST4;
}

public byte getHOVST5() {
return HOVST5;
}

public byte getHOVST6() {
return HOVST6;
}

public byte getHOVST7() {
return HOVST7;
}

public byte getHOVST8() {
return HOVST8;
}

public byte getHOVST9() {
return HOVST9;
}

public byte getHOVW1001() {
return HOVW1001;
}

public byte getHOVW1002() {
return HOVW1002;
}

public byte getHOVW1003() {
return HOVW1003;
}

public byte getHOVW1004() {
return HOVW1004;
}

public byte getHOVW1005() {
return HOVW1005;
}

public byte getHOVW1006() {
return HOVW1006;
}

public byte getHOVW1007() {
return HOVW1007;
}

public byte getHOVW1008() {
return HOVW1008;
}

public byte getHOVW1009() {
return HOVW1009;
}

public byte getHOVW101() {
return HOVW101;
}

public byte getHOVW1010() {
return HOVW1010;
}

public byte getHOVW1011() {
return HOVW1011;
}

public byte getHOVW1012() {
return HOVW1012;
}

public byte getHOVW1013() {
return HOVW1013;
}

public byte getHOVW1014() {
return HOVW1014;
}

public byte getHOVW1015() {
return HOVW1015;
}

public byte getHOVW1016() {
return HOVW1016;
}

public byte getHOVW1017() {
return HOVW1017;
}

public byte getHOVW1018() {
return HOVW1018;
}

public byte getHOVW1019() {
return HOVW1019;
}

public byte getHOVW102() {
return HOVW102;
}

public byte getHOVW103() {
return HOVW103;
}

public byte getHOVW104() {
return HOVW104;
}

public byte getHOVW105() {
return HOVW105;
}

public byte getHOVW106() {
return HOVW106;
}

public byte getHOVW107() {
return HOVW107;
}

public byte getHOVW108() {
return HOVW108;
}

public byte getHOVW109() {
return HOVW109;
}

public byte getHOVW11() {
return HOVW11;
}

public byte getHOVW110() {
return HOVW110;
}

public byte getHOVW1101() {
return HOVW1101;
}

public byte getHOVW1102() {
return HOVW1102;
}

public byte getHOVW1103() {
return HOVW1103;
}

public byte getHOVW1104() {
return HOVW1104;
}

public byte getHOVW1105() {
return HOVW1105;
}

public byte getHOVW1106() {
return HOVW1106;
}

public byte getHOVW1107() {
return HOVW1107;
}

public byte getHOVW1108() {
return HOVW1108;
}

public byte getHOVW1109() {
return HOVW1109;
}

public byte getHOVW111() {
return HOVW111;
}

public byte getHOVW1110() {
return HOVW1110;
}

public byte getHOVW1111() {
return HOVW1111;
}

public byte getHOVW1112() {
return HOVW1112;
}

public byte getHOVW1113() {
return HOVW1113;
}

public byte getHOVW1114() {
return HOVW1114;
}

public byte getHOVW1115() {
return HOVW1115;
}

public byte getHOVW1116() {
return HOVW1116;
}

public byte getHOVW1117() {
return HOVW1117;
}

public byte getHOVW1118() {
return HOVW1118;
}

public byte getHOVW1119() {
return HOVW1119;
}

public byte getHOVW112() {
return HOVW112;
}

public byte getHOVW113() {
return HOVW113;
}

public byte getHOVW114() {
return HOVW114;
}

public byte getHOVW115() {
return HOVW115;
}

public byte getHOVW116() {
return HOVW116;
}

public byte getHOVW117() {
return HOVW117;
}

public byte getHOVW118() {
return HOVW118;
}

public byte getHOVW119() {
return HOVW119;
}

public byte getHOVW12() {
return HOVW12;
}

public byte getHOVW1201() {
return HOVW1201;
}

public byte getHOVW1202() {
return HOVW1202;
}

public byte getHOVW1203() {
return HOVW1203;
}

public byte getHOVW1204() {
return HOVW1204;
}

public byte getHOVW1205() {
return HOVW1205;
}

public byte getHOVW1206() {
return HOVW1206;
}

public byte getHOVW1207() {
return HOVW1207;
}

public byte getHOVW1208() {
return HOVW1208;
}

public byte getHOVW1209() {
return HOVW1209;
}

public byte getHOVW1210() {
return HOVW1210;
}

public byte getHOVW1211() {
return HOVW1211;
}

public byte getHOVW1212() {
return HOVW1212;
}

public byte getHOVW1213() {
return HOVW1213;
}

public byte getHOVW1214() {
return HOVW1214;
}

public byte getHOVW1215() {
return HOVW1215;
}

public byte getHOVW1216() {
return HOVW1216;
}

public byte getHOVW1217() {
return HOVW1217;
}

public byte getHOVW1218() {
return HOVW1218;
}

public byte getHOVW1219() {
return HOVW1219;
}

public byte getHOVW13() {
return HOVW13;
}

public byte getHOVW1301() {
return HOVW1301;
}

public byte getHOVW1302() {
return HOVW1302;
}

public byte getHOVW1303() {
return HOVW1303;
}

public byte getHOVW1304() {
return HOVW1304;
}

public byte getHOVW1305() {
return HOVW1305;
}

public byte getHOVW1306() {
return HOVW1306;
}

public byte getHOVW1307() {
return HOVW1307;
}

public byte getHOVW1308() {
return HOVW1308;
}

public byte getHOVW1309() {
return HOVW1309;
}

public byte getHOVW1310() {
return HOVW1310;
}

public byte getHOVW1311() {
return HOVW1311;
}

public byte getHOVW1312() {
return HOVW1312;
}

public byte getHOVW1313() {
return HOVW1313;
}

public byte getHOVW1314() {
return HOVW1314;
}

public byte getHOVW1315() {
return HOVW1315;
}

public byte getHOVW1316() {
return HOVW1316;
}

public byte getHOVW1317() {
return HOVW1317;
}

public byte getHOVW1318() {
return HOVW1318;
}

public byte getHOVW1319() {
return HOVW1319;
}

public byte getHOVW14() {
return HOVW14;
}

public byte getHOVW1401() {
return HOVW1401;
}

public byte getHOVW1402() {
return HOVW1402;
}

public byte getHOVW1403() {
return HOVW1403;
}

public byte getHOVW1404() {
return HOVW1404;
}

public byte getHOVW1405() {
return HOVW1405;
}

public byte getHOVW1406() {
return HOVW1406;
}

public byte getHOVW1407() {
return HOVW1407;
}

public byte getHOVW1408() {
return HOVW1408;
}

public byte getHOVW1409() {
return HOVW1409;
}

public byte getHOVW1410() {
return HOVW1410;
}

public byte getHOVW1411() {
return HOVW1411;
}

public byte getHOVW1412() {
return HOVW1412;
}

public byte getHOVW1413() {
return HOVW1413;
}

public byte getHOVW1414() {
return HOVW1414;
}

public byte getHOVW1415() {
return HOVW1415;
}

public byte getHOVW1416() {
return HOVW1416;
}

public byte getHOVW1417() {
return HOVW1417;
}

public byte getHOVW1418() {
return HOVW1418;
}

public byte getHOVW1419() {
return HOVW1419;
}

public byte getHOVW15() {
return HOVW15;
}

public byte getHOVW1501() {
return HOVW1501;
}

public byte getHOVW1502() {
return HOVW1502;
}

public byte getHOVW1503() {
return HOVW1503;
}

public byte getHOVW1504() {
return HOVW1504;
}

public byte getHOVW1505() {
return HOVW1505;
}

public byte getHOVW1506() {
return HOVW1506;
}

public byte getHOVW1507() {
return HOVW1507;
}

public byte getHOVW1508() {
return HOVW1508;
}

public byte getHOVW1509() {
return HOVW1509;
}

public byte getHOVW1510() {
return HOVW1510;
}

public byte getHOVW1511() {
return HOVW1511;
}

public byte getHOVW1512() {
return HOVW1512;
}

public byte getHOVW1513() {
return HOVW1513;
}

public byte getHOVW1514() {
return HOVW1514;
}

public byte getHOVW1515() {
return HOVW1515;
}

public byte getHOVW1516() {
return HOVW1516;
}

public byte getHOVW1517() {
return HOVW1517;
}

public byte getHOVW1518() {
return HOVW1518;
}

public byte getHOVW1519() {
return HOVW1519;
}

public byte getHOVW16() {
return HOVW16;
}

public byte getHOVW1601() {
return HOVW1601;
}

public byte getHOVW1602() {
return HOVW1602;
}

public byte getHOVW1603() {
return HOVW1603;
}

public byte getHOVW1604() {
return HOVW1604;
}

public byte getHOVW1605() {
return HOVW1605;
}

public byte getHOVW1606() {
return HOVW1606;
}

public byte getHOVW1607() {
return HOVW1607;
}

public byte getHOVW1608() {
return HOVW1608;
}

public byte getHOVW1609() {
return HOVW1609;
}

public byte getHOVW1610() {
return HOVW1610;
}

public byte getHOVW1611() {
return HOVW1611;
}

public byte getHOVW1612() {
return HOVW1612;
}

public byte getHOVW1613() {
return HOVW1613;
}

public byte getHOVW1614() {
return HOVW1614;
}

public byte getHOVW1615() {
return HOVW1615;
}

public byte getHOVW1616() {
return HOVW1616;
}

public byte getHOVW1617() {
return HOVW1617;
}

public byte getHOVW1618() {
return HOVW1618;
}

public byte getHOVW1619() {
return HOVW1619;
}

public byte getHOVW2() {
return HOVW2;
}

public byte getHOVW201() {
return HOVW201;
}

public byte getHOVW202() {
return HOVW202;
}

public byte getHOVW203() {
return HOVW203;
}

public byte getHOVW204() {
return HOVW204;
}

public byte getHOVW205() {
return HOVW205;
}

public byte getHOVW206() {
return HOVW206;
}

public byte getHOVW207() {
return HOVW207;
}

public byte getHOVW208() {
return HOVW208;
}

public byte getHOVW209() {
return HOVW209;
}

public byte getHOVW210() {
return HOVW210;
}

public byte getHOVW211() {
return HOVW211;
}

public byte getHOVW212() {
return HOVW212;
}

public byte getHOVW213() {
return HOVW213;
}

public byte getHOVW214() {
return HOVW214;
}

public byte getHOVW215() {
return HOVW215;
}

public byte getHOVW216() {
return HOVW216;
}

public byte getHOVW217() {
return HOVW217;
}

public byte getHOVW218() {
return HOVW218;
}

public byte getHOVW219() {
return HOVW219;
}

public byte getHOVW301() {
return HOVW301;
}

public byte getHOVW302() {
return HOVW302;
}

public byte getHOVW303() {
return HOVW303;
}

public byte getHOVW304() {
return HOVW304;
}

public byte getHOVW305() {
return HOVW305;
}

public byte getHOVW306() {
return HOVW306;
}

public byte getHOVW307() {
return HOVW307;
}

public byte getHOVW308() {
return HOVW308;
}

public byte getHOVW309() {
return HOVW309;
}

public byte getHOVW310() {
return HOVW310;
}

public byte getHOVW311() {
return HOVW311;
}

public byte getHOVW312() {
return HOVW312;
}

public byte getHOVW313() {
return HOVW313;
}

public byte getHOVW314() {
return HOVW314;
}

public byte getHOVW315() {
return HOVW315;
}

public byte getHOVW316() {
return HOVW316;
}

public byte getHOVW317() {
return HOVW317;
}

public byte getHOVW318() {
return HOVW318;
}

public byte getHOVW319() {
return HOVW319;
}

public byte getHOVW4() {
return HOVW4;
}

public byte getHOVW401() {
return HOVW401;
}

public byte getHOVW402() {
return HOVW402;
}

public byte getHOVW403() {
return HOVW403;
}

public byte getHOVW404() {
return HOVW404;
}

public byte getHOVW405() {
return HOVW405;
}

public byte getHOVW406() {
return HOVW406;
}

public byte getHOVW407() {
return HOVW407;
}

public byte getHOVW408() {
return HOVW408;
}

public byte getHOVW409() {
return HOVW409;
}

public byte getHOVW410() {
return HOVW410;
}

public byte getHOVW411() {
return HOVW411;
}

public byte getHOVW412() {
return HOVW412;
}

public byte getHOVW413() {
return HOVW413;
}

public byte getHOVW414() {
return HOVW414;
}

public byte getHOVW415() {
return HOVW415;
}

public byte getHOVW416() {
return HOVW416;
}

public byte getHOVW417() {
return HOVW417;
}

public byte getHOVW418() {
return HOVW418;
}

public byte getHOVW419() {
return HOVW419;
}

public byte getHOVW5() {
return HOVW5;
}

public byte getHOVW501() {
return HOVW501;
}

public byte getHOVW502() {
return HOVW502;
}

public byte getHOVW503() {
return HOVW503;
}

public byte getHOVW504() {
return HOVW504;
}

public byte getHOVW505() {
return HOVW505;
}

public byte getHOVW506() {
return HOVW506;
}

public byte getHOVW507() {
return HOVW507;
}

public byte getHOVW508() {
return HOVW508;
}

public byte getHOVW509() {
return HOVW509;
}

public byte getHOVW510() {
return HOVW510;
}

public byte getHOVW511() {
return HOVW511;
}

public byte getHOVW512() {
return HOVW512;
}

public byte getHOVW513() {
return HOVW513;
}

public byte getHOVW514() {
return HOVW514;
}

public byte getHOVW515() {
return HOVW515;
}

public byte getHOVW516() {
return HOVW516;
}

public byte getHOVW517() {
return HOVW517;
}

public byte getHOVW518() {
return HOVW518;
}

public byte getHOVW519() {
return HOVW519;
}

public byte getHOVW6() {
return HOVW6;
}

public byte getHOVW601() {
return HOVW601;
}

public byte getHOVW602() {
return HOVW602;
}

public byte getHOVW603() {
return HOVW603;
}

public byte getHOVW604() {
return HOVW604;
}

public byte getHOVW605() {
return HOVW605;
}

public byte getHOVW606() {
return HOVW606;
}

public byte getHOVW607() {
return HOVW607;
}

public byte getHOVW608() {
return HOVW608;
}

public byte getHOVW609() {
return HOVW609;
}

public byte getHOVW610() {
return HOVW610;
}

public byte getHOVW611() {
return HOVW611;
}

public byte getHOVW612() {
return HOVW612;
}

public byte getHOVW613() {
return HOVW613;
}

public byte getHOVW614() {
return HOVW614;
}

public byte getHOVW615() {
return HOVW615;
}

public byte getHOVW616() {
return HOVW616;
}

public byte getHOVW617() {
return HOVW617;
}

public byte getHOVW618() {
return HOVW618;
}

public byte getHOVW619() {
return HOVW619;
}

public byte getHOVW7() {
return HOVW7;
}

public byte getHOVW701() {
return HOVW701;
}

public byte getHOVW702() {
return HOVW702;
}

public byte getHOVW703() {
return HOVW703;
}

public byte getHOVW704() {
return HOVW704;
}

public byte getHOVW705() {
return HOVW705;
}

public byte getHOVW706() {
return HOVW706;
}

public byte getHOVW707() {
return HOVW707;
}

public byte getHOVW708() {
return HOVW708;
}

public byte getHOVW709() {
return HOVW709;
}

public byte getHOVW710() {
return HOVW710;
}

public byte getHOVW711() {
return HOVW711;
}

public byte getHOVW712() {
return HOVW712;
}

public byte getHOVW713() {
return HOVW713;
}

public byte getHOVW714() {
return HOVW714;
}

public byte getHOVW715() {
return HOVW715;
}

public byte getHOVW716() {
return HOVW716;
}

public byte getHOVW717() {
return HOVW717;
}

public byte getHOVW718() {
return HOVW718;
}

public byte getHOVW719() {
return HOVW719;
}

public byte getHOVW8() {
return HOVW8;
}

public byte getHOVW801() {
return HOVW801;
}

public byte getHOVW802() {
return HOVW802;
}

public byte getHOVW803() {
return HOVW803;
}

public byte getHOVW804() {
return HOVW804;
}

public byte getHOVW805() {
return HOVW805;
}

public byte getHOVW806() {
return HOVW806;
}

public byte getHOVW807() {
return HOVW807;
}

public byte getHOVW808() {
return HOVW808;
}

public byte getHOVW809() {
return HOVW809;
}

public byte getHOVW810() {
return HOVW810;
}

public byte getHOVW811() {
return HOVW811;
}

public byte getHOVW812() {
return HOVW812;
}

public byte getHOVW813() {
return HOVW813;
}

public byte getHOVW814() {
return HOVW814;
}

public byte getHOVW815() {
return HOVW815;
}

public byte getHOVW816() {
return HOVW816;
}

public byte getHOVW817() {
return HOVW817;
}

public byte getHOVW818() {
return HOVW818;
}

public byte getHOVW819() {
return HOVW819;
}

public byte getHOVW901() {
return HOVW901;
}

public byte getHOVW902() {
return HOVW902;
}

public byte getHOVW903() {
return HOVW903;
}

public byte getHOVW904() {
return HOVW904;
}

public byte getHOVW905() {
return HOVW905;
}

public byte getHOVW906() {
return HOVW906;
}

public byte getHOVW907() {
return HOVW907;
}

public byte getHOVW908() {
return HOVW908;
}

public byte getHOVW909() {
return HOVW909;
}

public byte getHOVW910() {
return HOVW910;
}

public byte getHOVW911() {
return HOVW911;
}

public byte getHOVW912() {
return HOVW912;
}

public byte getHOVW913() {
return HOVW913;
}

public byte getHOVW914() {
return HOVW914;
}

public byte getHOVW915() {
return HOVW915;
}

public byte getHOVW916() {
return HOVW916;
}

public byte getHOVW917() {
return HOVW917;
}

public byte getHOVW918() {
return HOVW918;
}

public byte getHOVW919() {
return HOVW919;
}

public short getHOVYR() {
return HOVYR;
}

public short getHOVYR10() {
return HOVYR10;
}

public short getHOVYR11() {
return HOVYR11;
}

public short getHOVYR12() {
return HOVYR12;
}

public short getHOVYR13() {
return HOVYR13;
}

public short getHOVYR14() {
return HOVYR14;
}

public short getHOVYR15() {
return HOVYR15;
}

public short getHOVYR16() {
return HOVYR16;
}

public short getHOVYR2() {
return HOVYR2;
}

public short getHOVYR3() {
return HOVYR3;
}

public short getHOVYR4() {
return HOVYR4;
}

public short getHOVYR5() {
return HOVYR5;
}

public short getHOVYR6() {
return HOVYR6;
}

public short getHOVYR7() {
return HOVYR7;
}

public short getHOVYR8() {
return HOVYR8;
}

public short getHOVYR9() {
return HOVYR9;
}

public byte getHOWH1() {
return HOWH1;
}

public byte getHOWH10() {
return HOWH10;
}

public byte getHOWH11() {
return HOWH11;
}

public byte getHOWH12() {
return HOWH12;
}

public byte getHOWH2() {
return HOWH2;
}

public byte getHOWH3() {
return HOWH3;
}

public byte getHOWH4() {
return HOWH4;
}

public byte getHOWH5() {
return HOWH5;
}

public byte getHOWH6() {
return HOWH6;
}

public byte getHOWH7() {
return HOWH7;
}

public byte getHOWH8() {
return HOWH8;
}

public byte getHOWH9() {
return HOWH9;
}

public byte getHOWH97() {
return HOWH97;
}

public byte getHOYML() {
return HOYML;
}

public short getHSEYR() {
return HSEYR;
}

public short getIAA39() {
return IAA39;
}

public boolean getIAA39FE() {
return IAA39FE;
}

public boolean getIAA39FL() {
return IAA39FL;
}

public boolean getIAA39FR() {
return IAA39FR;
}

public boolean getIAA39FU() {
return IAA39FU;
}

public byte getIAA39ME() {
return IAA39ME;
}

public short getIAA39ML() {
return IAA39ML;
}

public boolean getIAA39MR() {
return IAA39MR;
}

public short getIAA39MU() {
return IAA39MU;
}

public byte getIAA39OE() {
return IAA39OE;
}

public boolean getIAA39OL() {
return IAA39OL;
}

public byte getIAA39OR() {
return IAA39OR;
}

public short getIAA39OU() {
return IAA39OU;
}

public byte getIAA39WE() {
return IAA39WE;
}

public boolean getIAA39WL() {
return IAA39WL;
}

public boolean getIAA39WR() {
return IAA39WR;
}

public boolean getIAA39WU() {
return IAA39WU;
}

public boolean getIAA39YE() {
return IAA39YE;
}

public boolean getIAA39YL() {
return IAA39YL;
}

public boolean getIAA39YR() {
return IAA39YR;
}

public boolean getIAA39YU() {
return IAA39YU;
}

public short getIAA40() {
return IAA40;
}

public boolean getIAA40FE() {
return IAA40FE;
}

public boolean getIAA40FL() {
return IAA40FL;
}

public boolean getIAA40FR() {
return IAA40FR;
}

public boolean getIAA40FU() {
return IAA40FU;
}

public byte getIAA40ME() {
return IAA40ME;
}

public short getIAA40ML() {
return IAA40ML;
}

public boolean getIAA40MR() {
return IAA40MR;
}

public short getIAA40MU() {
return IAA40MU;
}

public byte getIAA40OE() {
return IAA40OE;
}

public short getIAA40OL() {
return IAA40OL;
}

public byte getIAA40OR() {
return IAA40OR;
}

public short getIAA40OU() {
return IAA40OU;
}

public boolean getIAA40WE() {
return IAA40WE;
}

public boolean getIAA40WL() {
return IAA40WL;
}

public boolean getIAA40WR() {
return IAA40WR;
}

public boolean getIAA40WU() {
return IAA40WU;
}

public boolean getIAA40YE() {
return IAA40YE;
}

public boolean getIAA40YL() {
return IAA40YL;
}

public boolean getIAA40YR() {
return IAA40YR;
}

public boolean getIAA40YU() {
return IAA40YU;
}

public short getIAA41() {
return IAA41;
}

public byte getIAA41FE() {
return IAA41FE;
}

public short getIAA41FL() {
return IAA41FL;
}

public byte getIAA41FR() {
return IAA41FR;
}

public short getIAA41FU() {
return IAA41FU;
}

public boolean getIAA41ME() {
return IAA41ME;
}

public boolean getIAA41ML() {
return IAA41ML;
}

public boolean getIAA41MR() {
return IAA41MR;
}

public short getIAA41MU() {
return IAA41MU;
}

public byte getIAA41OE() {
return IAA41OE;
}

public short getIAA41OL() {
return IAA41OL;
}

public byte getIAA41OR() {
return IAA41OR;
}

public short getIAA41OU() {
return IAA41OU;
}

public byte getIAA41WE() {
return IAA41WE;
}

public byte getIAA41WL() {
return IAA41WL;
}

public byte getIAA41WR() {
return IAA41WR;
}

public byte getIAA41WU() {
return IAA41WU;
}

public boolean getIAA41YE() {
return IAA41YE;
}

public boolean getIAA41YL() {
return IAA41YL;
}

public boolean getIAA41YR() {
return IAA41YR;
}

public boolean getIAA41YU() {
return IAA41YU;
}

public short getIAA42() {
return IAA42;
}

public boolean getIAA42FE() {
return IAA42FE;
}

public boolean getIAA42FL() {
return IAA42FL;
}

public boolean getIAA42FR() {
return IAA42FR;
}

public boolean getIAA42FU() {
return IAA42FU;
}

public byte getIAA42ME() {
return IAA42ME;
}

public short getIAA42ML() {
return IAA42ML;
}

public byte getIAA42MR() {
return IAA42MR;
}

public short getIAA42MU() {
return IAA42MU;
}

public byte getIAA42OE() {
return IAA42OE;
}

public short getIAA42OL() {
return IAA42OL;
}

public byte getIAA42OR() {
return IAA42OR;
}

public short getIAA42OU() {
return IAA42OU;
}

public byte getIAA42WE() {
return IAA42WE;
}

public short getIAA42WL() {
return IAA42WL;
}

public byte getIAA42WR() {
return IAA42WR;
}

public short getIAA42WU() {
return IAA42WU;
}

public boolean getIAA42YE() {
return IAA42YE;
}

public boolean getIAA42YL() {
return IAA42YL;
}

public boolean getIAA42YR() {
return IAA42YR;
}

public short getIAA42YU() {
return IAA42YU;
}

public short getIAA43() {
return IAA43;
}

public boolean getIAA43FE() {
return IAA43FE;
}

public boolean getIAA43FL() {
return IAA43FL;
}

public boolean getIAA43FR() {
return IAA43FR;
}

public boolean getIAA43FU() {
return IAA43FU;
}

public byte getIAA43ME() {
return IAA43ME;
}

public short getIAA43ML() {
return IAA43ML;
}

public byte getIAA43MR() {
return IAA43MR;
}

public short getIAA43MU() {
return IAA43MU;
}

public byte getIAA43OE() {
return IAA43OE;
}

public byte getIAA43OL() {
return IAA43OL;
}

public byte getIAA43OR() {
return IAA43OR;
}

public short getIAA43OU() {
return IAA43OU;
}

public byte getIAA43WE() {
return IAA43WE;
}

public boolean getIAA43WL() {
return IAA43WL;
}

public boolean getIAA43WR() {
return IAA43WR;
}

public boolean getIAA43WU() {
return IAA43WU;
}

public boolean getIAA43YE() {
return IAA43YE;
}

public boolean getIAA43YL() {
return IAA43YL;
}

public boolean getIAA43YR() {
return IAA43YR;
}

public boolean getIAA43YU() {
return IAA43YU;
}

public short getIAA44() {
return IAA44;
}

public boolean getIAA44FE() {
return IAA44FE;
}

public boolean getIAA44FL() {
return IAA44FL;
}

public boolean getIAA44FR() {
return IAA44FR;
}

public boolean getIAA44FU() {
return IAA44FU;
}

public byte getIAA44ME() {
return IAA44ME;
}

public short getIAA44ML() {
return IAA44ML;
}

public boolean getIAA44MR() {
return IAA44MR;
}

public short getIAA44MU() {
return IAA44MU;
}

public byte getIAA44OE() {
return IAA44OE;
}

public short getIAA44OL() {
return IAA44OL;
}

public byte getIAA44OR() {
return IAA44OR;
}

public short getIAA44OU() {
return IAA44OU;
}

public byte getIAA44WE() {
return IAA44WE;
}

public boolean getIAA44WL() {
return IAA44WL;
}

public byte getIAA44WR() {
return IAA44WR;
}

public byte getIAA44WU() {
return IAA44WU;
}

public boolean getIAA44YE() {
return IAA44YE;
}

public boolean getIAA44YL() {
return IAA44YL;
}

public boolean getIAA44YR() {
return IAA44YR;
}

public boolean getIAA44YU() {
return IAA44YU;
}

public short getIAA45() {
return IAA45;
}

public boolean getIAA45FE() {
return IAA45FE;
}

public boolean getIAA45FL() {
return IAA45FL;
}

public boolean getIAA45FR() {
return IAA45FR;
}

public boolean getIAA45FU() {
return IAA45FU;
}

public byte getIAA45ME() {
return IAA45ME;
}

public short getIAA45ML() {
return IAA45ML;
}

public byte getIAA45MR() {
return IAA45MR;
}

public short getIAA45MU() {
return IAA45MU;
}

public byte getIAA45OE() {
return IAA45OE;
}

public short getIAA45OL() {
return IAA45OL;
}

public byte getIAA45OR() {
return IAA45OR;
}

public short getIAA45OU() {
return IAA45OU;
}

public byte getIAA45WE() {
return IAA45WE;
}

public byte getIAA45WL() {
return IAA45WL;
}

public byte getIAA45WR() {
return IAA45WR;
}

public short getIAA45WU() {
return IAA45WU;
}

public boolean getIAA45YE() {
return IAA45YE;
}

public boolean getIAA45YL() {
return IAA45YL;
}

public boolean getIAA45YR() {
return IAA45YR;
}

public boolean getIAA45YU() {
return IAA45YU;
}

public short getIAA46() {
return IAA46;
}

public boolean getIAA46FE() {
return IAA46FE;
}

public short getIAA46FL() {
return IAA46FL;
}

public boolean getIAA46FR() {
return IAA46FR;
}

public short getIAA46FU() {
return IAA46FU;
}

public byte getIAA46ME() {
return IAA46ME;
}

public short getIAA46ML() {
return IAA46ML;
}

public byte getIAA46MR() {
return IAA46MR;
}

public short getIAA46MU() {
return IAA46MU;
}

public byte getIAA46OE() {
return IAA46OE;
}

public short getIAA46OL() {
return IAA46OL;
}

public byte getIAA46OR() {
return IAA46OR;
}

public short getIAA46OU() {
return IAA46OU;
}

public byte getIAA46WE() {
return IAA46WE;
}

public byte getIAA46WL() {
return IAA46WL;
}

public boolean getIAA46WR() {
return IAA46WR;
}

public byte getIAA46WU() {
return IAA46WU;
}

public boolean getIAA46YE() {
return IAA46YE;
}

public boolean getIAA46YL() {
return IAA46YL;
}

public boolean getIAA46YR() {
return IAA46YR;
}

public boolean getIAA46YU() {
return IAA46YU;
}

public short getIAA47() {
return IAA47;
}

public boolean getIAA47FE() {
return IAA47FE;
}

public boolean getIAA47FL() {
return IAA47FL;
}

public boolean getIAA47FR() {
return IAA47FR;
}

public boolean getIAA47FU() {
return IAA47FU;
}

public byte getIAA47ME() {
return IAA47ME;
}

public short getIAA47ML() {
return IAA47ML;
}

public boolean getIAA47MR() {
return IAA47MR;
}

public short getIAA47MU() {
return IAA47MU;
}

public byte getIAA47OE() {
return IAA47OE;
}

public short getIAA47OL() {
return IAA47OL;
}

public byte getIAA47OR() {
return IAA47OR;
}

public short getIAA47OU() {
return IAA47OU;
}

public byte getIAA47WE() {
return IAA47WE;
}

public byte getIAA47WL() {
return IAA47WL;
}

public byte getIAA47WR() {
return IAA47WR;
}

public byte getIAA47WU() {
return IAA47WU;
}

public boolean getIAA47YE() {
return IAA47YE;
}

public boolean getIAA47YL() {
return IAA47YL;
}

public boolean getIAA47YR() {
return IAA47YR;
}

public short getIAA47YU() {
return IAA47YU;
}

public short getIAA48() {
return IAA48;
}

public boolean getIAA48FE() {
return IAA48FE;
}

public boolean getIAA48FL() {
return IAA48FL;
}

public boolean getIAA48FR() {
return IAA48FR;
}

public boolean getIAA48FU() {
return IAA48FU;
}

public boolean getIAA48ME() {
return IAA48ME;
}

public boolean getIAA48ML() {
return IAA48ML;
}

public boolean getIAA48MR() {
return IAA48MR;
}

public short getIAA48MU() {
return IAA48MU;
}

public byte getIAA48OE() {
return IAA48OE;
}

public short getIAA48OL() {
return IAA48OL;
}

public byte getIAA48OR() {
return IAA48OR;
}

public short getIAA48OU() {
return IAA48OU;
}

public byte getIAA48WE() {
return IAA48WE;
}

public byte getIAA48WL() {
return IAA48WL;
}

public boolean getIAA48WR() {
return IAA48WR;
}

public short getIAA48WU() {
return IAA48WU;
}

public boolean getIAA48YE() {
return IAA48YE;
}

public boolean getIAA48YL() {
return IAA48YL;
}

public boolean getIAA48YR() {
return IAA48YR;
}

public boolean getIAA48YU() {
return IAA48YU;
}

public short getIAA49() {
return IAA49;
}

public boolean getIAA49FE() {
return IAA49FE;
}

public boolean getIAA49FL() {
return IAA49FL;
}

public boolean getIAA49FR() {
return IAA49FR;
}

public boolean getIAA49FU() {
return IAA49FU;
}

public boolean getIAA49ME() {
return IAA49ME;
}

public boolean getIAA49ML() {
return IAA49ML;
}

public boolean getIAA49MR() {
return IAA49MR;
}

public short getIAA49MU() {
return IAA49MU;
}

public boolean getIAA49OE() {
return IAA49OE;
}

public boolean getIAA49OL() {
return IAA49OL;
}

public boolean getIAA49OR() {
return IAA49OR;
}

public short getIAA49OU() {
return IAA49OU;
}

public boolean getIAA49WE() {
return IAA49WE;
}

public boolean getIAA49WL() {
return IAA49WL;
}

public boolean getIAA49WR() {
return IAA49WR;
}

public boolean getIAA49WU() {
return IAA49WU;
}

public boolean getIAA49YE() {
return IAA49YE;
}

public boolean getIAA49YL() {
return IAA49YL;
}

public boolean getIAA49YR() {
return IAA49YR;
}

public boolean getIAA49YU() {
return IAA49YU;
}

public short getIAA50() {
return IAA50;
}

public boolean getIAA50FE() {
return IAA50FE;
}

public boolean getIAA50FL() {
return IAA50FL;
}

public boolean getIAA50FR() {
return IAA50FR;
}

public boolean getIAA50FU() {
return IAA50FU;
}

public boolean getIAA50ME() {
return IAA50ME;
}

public boolean getIAA50ML() {
return IAA50ML;
}

public boolean getIAA50MR() {
return IAA50MR;
}

public boolean getIAA50MU() {
return IAA50MU;
}

public boolean getIAA50OE() {
return IAA50OE;
}

public boolean getIAA50OL() {
return IAA50OL;
}

public boolean getIAA50OR() {
return IAA50OR;
}

public boolean getIAA50OU() {
return IAA50OU;
}

public byte getIAA50WE() {
return IAA50WE;
}

public byte getIAA50WL() {
return IAA50WL;
}

public byte getIAA50WR() {
return IAA50WR;
}

public byte getIAA50WU() {
return IAA50WU;
}

public boolean getIAA50YE() {
return IAA50YE;
}

public boolean getIAA50YL() {
return IAA50YL;
}

public boolean getIAA50YR() {
return IAA50YR;
}

public boolean getIAA50YU() {
return IAA50YU;
}

public short getIAA51() {
return IAA51;
}

public boolean getIAA51FE() {
return IAA51FE;
}

public boolean getIAA51FL() {
return IAA51FL;
}

public boolean getIAA51FR() {
return IAA51FR;
}

public boolean getIAA51FU() {
return IAA51FU;
}

public boolean getIAA51ME() {
return IAA51ME;
}

public boolean getIAA51ML() {
return IAA51ML;
}

public boolean getIAA51MR() {
return IAA51MR;
}

public boolean getIAA51MU() {
return IAA51MU;
}

public byte getIAA51OE() {
return IAA51OE;
}

public short getIAA51OL() {
return IAA51OL;
}

public byte getIAA51OR() {
return IAA51OR;
}

public short getIAA51OU() {
return IAA51OU;
}

public boolean getIAA51WE() {
return IAA51WE;
}

public boolean getIAA51WL() {
return IAA51WL;
}

public boolean getIAA51WR() {
return IAA51WR;
}

public boolean getIAA51WU() {
return IAA51WU;
}

public boolean getIAA51YE() {
return IAA51YE;
}

public boolean getIAA51YL() {
return IAA51YL;
}

public boolean getIAA51YR() {
return IAA51YR;
}

public boolean getIAA51YU() {
return IAA51YU;
}

public short getIAA52() {
return IAA52;
}

public boolean getIAA52FE() {
return IAA52FE;
}

public boolean getIAA52FL() {
return IAA52FL;
}

public boolean getIAA52FR() {
return IAA52FR;
}

public boolean getIAA52FU() {
return IAA52FU;
}

public boolean getIAA52ME() {
return IAA52ME;
}

public boolean getIAA52ML() {
return IAA52ML;
}

public boolean getIAA52MR() {
return IAA52MR;
}

public short getIAA52MU() {
return IAA52MU;
}

public byte getIAA52OE() {
return IAA52OE;
}

public boolean getIAA52OL() {
return IAA52OL;
}

public byte getIAA52OR() {
return IAA52OR;
}

public short getIAA52OU() {
return IAA52OU;
}

public boolean getIAA52WE() {
return IAA52WE;
}

public boolean getIAA52WL() {
return IAA52WL;
}

public boolean getIAA52WR() {
return IAA52WR;
}

public boolean getIAA52WU() {
return IAA52WU;
}

public boolean getIAA52YE() {
return IAA52YE;
}

public boolean getIAA52YL() {
return IAA52YL;
}

public boolean getIAA52YR() {
return IAA52YR;
}

public boolean getIAA52YU() {
return IAA52YU;
}

public short getIAA53() {
return IAA53;
}

public boolean getIAA53FE() {
return IAA53FE;
}

public boolean getIAA53FL() {
return IAA53FL;
}

public boolean getIAA53FR() {
return IAA53FR;
}

public boolean getIAA53FU() {
return IAA53FU;
}

public boolean getIAA53ME() {
return IAA53ME;
}

public boolean getIAA53ML() {
return IAA53ML;
}

public boolean getIAA53MR() {
return IAA53MR;
}

public short getIAA53MU() {
return IAA53MU;
}

public byte getIAA53OE() {
return IAA53OE;
}

public boolean getIAA53OL() {
return IAA53OL;
}

public byte getIAA53OR() {
return IAA53OR;
}

public short getIAA53OU() {
return IAA53OU;
}

public byte getIAA53WE() {
return IAA53WE;
}

public boolean getIAA53WL() {
return IAA53WL;
}

public byte getIAA53WR() {
return IAA53WR;
}

public byte getIAA53WU() {
return IAA53WU;
}

public boolean getIAA53YE() {
return IAA53YE;
}

public boolean getIAA53YL() {
return IAA53YL;
}

public boolean getIAA53YR() {
return IAA53YR;
}

public boolean getIAA53YU() {
return IAA53YU;
}

public short getIAA54() {
return IAA54;
}

public boolean getIAA54FE() {
return IAA54FE;
}

public boolean getIAA54FL() {
return IAA54FL;
}

public boolean getIAA54FR() {
return IAA54FR;
}

public boolean getIAA54FU() {
return IAA54FU;
}

public boolean getIAA54ME() {
return IAA54ME;
}

public short getIAA54ML() {
return IAA54ML;
}

public boolean getIAA54MR() {
return IAA54MR;
}

public short getIAA54MU() {
return IAA54MU;
}

public byte getIAA54OE() {
return IAA54OE;
}

public short getIAA54OL() {
return IAA54OL;
}

public byte getIAA54OR() {
return IAA54OR;
}

public short getIAA54OU() {
return IAA54OU;
}

public boolean getIAA54WE() {
return IAA54WE;
}

public boolean getIAA54WL() {
return IAA54WL;
}

public boolean getIAA54WR() {
return IAA54WR;
}

public boolean getIAA54WU() {
return IAA54WU;
}

public boolean getIAA54YE() {
return IAA54YE;
}

public boolean getIAA54YL() {
return IAA54YL;
}

public boolean getIAA54YR() {
return IAA54YR;
}

public short getIAA54YU() {
return IAA54YU;
}

public short getIAA55() {
return IAA55;
}

public byte getIAA55FE() {
return IAA55FE;
}

public byte getIAA55FL() {
return IAA55FL;
}

public boolean getIAA55FR() {
return IAA55FR;
}

public byte getIAA55FU() {
return IAA55FU;
}

public boolean getIAA55ME() {
return IAA55ME;
}

public short getIAA55ML() {
return IAA55ML;
}

public boolean getIAA55MR() {
return IAA55MR;
}

public short getIAA55MU() {
return IAA55MU;
}

public byte getIAA55OE() {
return IAA55OE;
}

public short getIAA55OL() {
return IAA55OL;
}

public byte getIAA55OR() {
return IAA55OR;
}

public short getIAA55OU() {
return IAA55OU;
}

public byte getIAA55WE() {
return IAA55WE;
}

public short getIAA55WL() {
return IAA55WL;
}

public byte getIAA55WR() {
return IAA55WR;
}

public short getIAA55WU() {
return IAA55WU;
}

public boolean getIAA55YE() {
return IAA55YE;
}

public boolean getIAA55YL() {
return IAA55YL;
}

public boolean getIAA55YR() {
return IAA55YR;
}

public boolean getIAA55YU() {
return IAA55YU;
}

public short getIAA56() {
return IAA56;
}

public boolean getIAA56FE() {
return IAA56FE;
}

public boolean getIAA56FL() {
return IAA56FL;
}

public boolean getIAA56FR() {
return IAA56FR;
}

public boolean getIAA56FU() {
return IAA56FU;
}

public boolean getIAA56ME() {
return IAA56ME;
}

public short getIAA56ML() {
return IAA56ML;
}

public boolean getIAA56MR() {
return IAA56MR;
}

public short getIAA56MU() {
return IAA56MU;
}

public byte getIAA56OE() {
return IAA56OE;
}

public byte getIAA56OL() {
return IAA56OL;
}

public byte getIAA56OR() {
return IAA56OR;
}

public short getIAA56OU() {
return IAA56OU;
}

public byte getIAA56WE() {
return IAA56WE;
}

public byte getIAA56WL() {
return IAA56WL;
}

public byte getIAA56WR() {
return IAA56WR;
}

public byte getIAA56WU() {
return IAA56WU;
}

public boolean getIAA56YE() {
return IAA56YE;
}

public boolean getIAA56YL() {
return IAA56YL;
}

public boolean getIAA56YR() {
return IAA56YR;
}

public boolean getIAA56YU() {
return IAA56YU;
}

public short getIAA57() {
return IAA57;
}

public boolean getIAA57FE() {
return IAA57FE;
}

public boolean getIAA57FL() {
return IAA57FL;
}

public boolean getIAA57FR() {
return IAA57FR;
}

public boolean getIAA57FU() {
return IAA57FU;
}

public boolean getIAA57ME() {
return IAA57ME;
}

public boolean getIAA57ML() {
return IAA57ML;
}

public boolean getIAA57MR() {
return IAA57MR;
}

public boolean getIAA57MU() {
return IAA57MU;
}

public boolean getIAA57OE() {
return IAA57OE;
}

public boolean getIAA57OL() {
return IAA57OL;
}

public boolean getIAA57OR() {
return IAA57OR;
}

public short getIAA57OU() {
return IAA57OU;
}

public boolean getIAA57WE() {
return IAA57WE;
}

public boolean getIAA57WL() {
return IAA57WL;
}

public boolean getIAA57WR() {
return IAA57WR;
}

public boolean getIAA57WU() {
return IAA57WU;
}

public boolean getIAA57YE() {
return IAA57YE;
}

public boolean getIAA57YL() {
return IAA57YL;
}

public boolean getIAA57YR() {
return IAA57YR;
}

public boolean getIAA57YU() {
return IAA57YU;
}

public short getIAA58() {
return IAA58;
}

public boolean getIAA58FE() {
return IAA58FE;
}

public boolean getIAA58FL() {
return IAA58FL;
}

public boolean getIAA58FR() {
return IAA58FR;
}

public boolean getIAA58FU() {
return IAA58FU;
}

public boolean getIAA58ME() {
return IAA58ME;
}

public boolean getIAA58ML() {
return IAA58ML;
}

public boolean getIAA58MR() {
return IAA58MR;
}

public boolean getIAA58MU() {
return IAA58MU;
}

public boolean getIAA58OE() {
return IAA58OE;
}

public boolean getIAA58OL() {
return IAA58OL;
}

public boolean getIAA58OR() {
return IAA58OR;
}

public boolean getIAA58OU() {
return IAA58OU;
}

public boolean getIAA58WE() {
return IAA58WE;
}

public boolean getIAA58WL() {
return IAA58WL;
}

public boolean getIAA58WR() {
return IAA58WR;
}

public boolean getIAA58WU() {
return IAA58WU;
}

public boolean getIAA58YE() {
return IAA58YE;
}

public boolean getIAA58YL() {
return IAA58YL;
}

public boolean getIAA58YR() {
return IAA58YR;
}

public boolean getIAA58YU() {
return IAA58YU;
}

public short getIAA59() {
return IAA59;
}

public boolean getIAA59FE() {
return IAA59FE;
}

public boolean getIAA59FL() {
return IAA59FL;
}

public boolean getIAA59FR() {
return IAA59FR;
}

public boolean getIAA59FU() {
return IAA59FU;
}

public boolean getIAA59ME() {
return IAA59ME;
}

public boolean getIAA59ML() {
return IAA59ML;
}

public boolean getIAA59MR() {
return IAA59MR;
}

public boolean getIAA59MU() {
return IAA59MU;
}

public boolean getIAA59OE() {
return IAA59OE;
}

public boolean getIAA59OL() {
return IAA59OL;
}

public boolean getIAA59OR() {
return IAA59OR;
}

public boolean getIAA59OU() {
return IAA59OU;
}

public boolean getIAA59WE() {
return IAA59WE;
}

public boolean getIAA59WL() {
return IAA59WL;
}

public boolean getIAA59WR() {
return IAA59WR;
}

public boolean getIAA59WU() {
return IAA59WU;
}

public boolean getIAA59YE() {
return IAA59YE;
}

public boolean getIAA59YL() {
return IAA59YL;
}

public boolean getIAA59YR() {
return IAA59YR;
}

public boolean getIAA59YU() {
return IAA59YU;
}

public short getIAA60() {
return IAA60;
}

public boolean getIAA60FE() {
return IAA60FE;
}

public boolean getIAA60FL() {
return IAA60FL;
}

public boolean getIAA60FR() {
return IAA60FR;
}

public boolean getIAA60FU() {
return IAA60FU;
}

public byte getIAA60ME() {
return IAA60ME;
}

public boolean getIAA60ML() {
return IAA60ML;
}

public boolean getIAA60MR() {
return IAA60MR;
}

public short getIAA60MU() {
return IAA60MU;
}

public byte getIAA60OE() {
return IAA60OE;
}

public short getIAA60OL() {
return IAA60OL;
}

public boolean getIAA60OR() {
return IAA60OR;
}

public short getIAA60OU() {
return IAA60OU;
}

public boolean getIAA60WE() {
return IAA60WE;
}

public boolean getIAA60WL() {
return IAA60WL;
}

public boolean getIAA60WR() {
return IAA60WR;
}

public boolean getIAA60WU() {
return IAA60WU;
}

public boolean getIAA60YE() {
return IAA60YE;
}

public boolean getIAA60YL() {
return IAA60YL;
}

public boolean getIAA60YR() {
return IAA60YR;
}

public boolean getIAA60YU() {
return IAA60YU;
}

public short getIAA61() {
return IAA61;
}

public boolean getIAA61FE() {
return IAA61FE;
}

public boolean getIAA61FL() {
return IAA61FL;
}

public boolean getIAA61FR() {
return IAA61FR;
}

public boolean getIAA61FU() {
return IAA61FU;
}

public byte getIAA61ME() {
return IAA61ME;
}

public short getIAA61ML() {
return IAA61ML;
}

public boolean getIAA61MR() {
return IAA61MR;
}

public short getIAA61MU() {
return IAA61MU;
}

public byte getIAA61OE() {
return IAA61OE;
}

public boolean getIAA61OL() {
return IAA61OL;
}

public byte getIAA61OR() {
return IAA61OR;
}

public short getIAA61OU() {
return IAA61OU;
}

public boolean getIAA61WE() {
return IAA61WE;
}

public boolean getIAA61WL() {
return IAA61WL;
}

public boolean getIAA61WR() {
return IAA61WR;
}

public boolean getIAA61WU() {
return IAA61WU;
}

public boolean getIAA61YE() {
return IAA61YE;
}

public boolean getIAA61YL() {
return IAA61YL;
}

public boolean getIAA61YR() {
return IAA61YR;
}

public boolean getIAA61YU() {
return IAA61YU;
}

public short getIAA62() {
return IAA62;
}

public boolean getIAA62FE() {
return IAA62FE;
}

public boolean getIAA62FL() {
return IAA62FL;
}

public boolean getIAA62FR() {
return IAA62FR;
}

public boolean getIAA62FU() {
return IAA62FU;
}

public boolean getIAA62ME() {
return IAA62ME;
}

public boolean getIAA62ML() {
return IAA62ML;
}

public boolean getIAA62MR() {
return IAA62MR;
}

public short getIAA62MU() {
return IAA62MU;
}

public byte getIAA62OE() {
return IAA62OE;
}

public short getIAA62OL() {
return IAA62OL;
}

public byte getIAA62OR() {
return IAA62OR;
}

public short getIAA62OU() {
return IAA62OU;
}

public boolean getIAA62WE() {
return IAA62WE;
}

public boolean getIAA62WL() {
return IAA62WL;
}

public boolean getIAA62WR() {
return IAA62WR;
}

public boolean getIAA62WU() {
return IAA62WU;
}

public boolean getIAA62YE() {
return IAA62YE;
}

public boolean getIAA62YL() {
return IAA62YL;
}

public boolean getIAA62YR() {
return IAA62YR;
}

public boolean getIAA62YU() {
return IAA62YU;
}

public short getIAA63() {
return IAA63;
}

public boolean getIAA63FE() {
return IAA63FE;
}

public boolean getIAA63FL() {
return IAA63FL;
}

public boolean getIAA63FR() {
return IAA63FR;
}

public boolean getIAA63FU() {
return IAA63FU;
}

public boolean getIAA63ME() {
return IAA63ME;
}

public boolean getIAA63ML() {
return IAA63ML;
}

public boolean getIAA63MR() {
return IAA63MR;
}

public boolean getIAA63MU() {
return IAA63MU;
}

public boolean getIAA63OE() {
return IAA63OE;
}

public boolean getIAA63OL() {
return IAA63OL;
}

public boolean getIAA63OR() {
return IAA63OR;
}

public boolean getIAA63OU() {
return IAA63OU;
}

public boolean getIAA63WE() {
return IAA63WE;
}

public boolean getIAA63WL() {
return IAA63WL;
}

public boolean getIAA63WR() {
return IAA63WR;
}

public boolean getIAA63WU() {
return IAA63WU;
}

public boolean getIAA63YE() {
return IAA63YE;
}

public boolean getIAA63YL() {
return IAA63YL;
}

public boolean getIAA63YR() {
return IAA63YR;
}

public boolean getIAA63YU() {
return IAA63YU;
}

public short getIAA64() {
return IAA64;
}

public boolean getIAA64FE() {
return IAA64FE;
}

public boolean getIAA64FL() {
return IAA64FL;
}

public boolean getIAA64FR() {
return IAA64FR;
}

public boolean getIAA64FU() {
return IAA64FU;
}

public boolean getIAA64ME() {
return IAA64ME;
}

public boolean getIAA64ML() {
return IAA64ML;
}

public boolean getIAA64MR() {
return IAA64MR;
}

public short getIAA64MU() {
return IAA64MU;
}

public boolean getIAA64OE() {
return IAA64OE;
}

public boolean getIAA64OL() {
return IAA64OL;
}

public byte getIAA64OR() {
return IAA64OR;
}

public short getIAA64OU() {
return IAA64OU;
}

public boolean getIAA64WE() {
return IAA64WE;
}

public boolean getIAA64WL() {
return IAA64WL;
}

public boolean getIAA64WR() {
return IAA64WR;
}

public boolean getIAA64WU() {
return IAA64WU;
}

public boolean getIAA64YE() {
return IAA64YE;
}

public boolean getIAA64YL() {
return IAA64YL;
}

public boolean getIAA64YR() {
return IAA64YR;
}

public boolean getIAA64YU() {
return IAA64YU;
}

public short getIAA65() {
return IAA65;
}

public boolean getIAA65FE() {
return IAA65FE;
}

public boolean getIAA65FL() {
return IAA65FL;
}

public boolean getIAA65FR() {
return IAA65FR;
}

public boolean getIAA65FU() {
return IAA65FU;
}

public byte getIAA65ME() {
return IAA65ME;
}

public short getIAA65ML() {
return IAA65ML;
}

public byte getIAA65MR() {
return IAA65MR;
}

public short getIAA65MU() {
return IAA65MU;
}

public boolean getIAA65OE() {
return IAA65OE;
}

public boolean getIAA65OL() {
return IAA65OL;
}

public boolean getIAA65OR() {
return IAA65OR;
}

public short getIAA65OU() {
return IAA65OU;
}

public byte getIAA65WE() {
return IAA65WE;
}

public boolean getIAA65WL() {
return IAA65WL;
}

public byte getIAA65WR() {
return IAA65WR;
}

public byte getIAA65WU() {
return IAA65WU;
}

public boolean getIAA65YE() {
return IAA65YE;
}

public boolean getIAA65YL() {
return IAA65YL;
}

public boolean getIAA65YR() {
return IAA65YR;
}

public boolean getIAA65YU() {
return IAA65YU;
}

public short getIAA66() {
return IAA66;
}

public boolean getIAA66FE() {
return IAA66FE;
}

public boolean getIAA66FL() {
return IAA66FL;
}

public boolean getIAA66FR() {
return IAA66FR;
}

public boolean getIAA66FU() {
return IAA66FU;
}

public boolean getIAA66ME() {
return IAA66ME;
}

public boolean getIAA66ML() {
return IAA66ML;
}

public boolean getIAA66MR() {
return IAA66MR;
}

public boolean getIAA66MU() {
return IAA66MU;
}

public boolean getIAA66OE() {
return IAA66OE;
}

public boolean getIAA66OL() {
return IAA66OL;
}

public boolean getIAA66OR() {
return IAA66OR;
}

public short getIAA66OU() {
return IAA66OU;
}

public boolean getIAA66WE() {
return IAA66WE;
}

public boolean getIAA66WL() {
return IAA66WL;
}

public boolean getIAA66WR() {
return IAA66WR;
}

public boolean getIAA66WU() {
return IAA66WU;
}

public boolean getIAA66YE() {
return IAA66YE;
}

public boolean getIAA66YL() {
return IAA66YL;
}

public boolean getIAA66YR() {
return IAA66YR;
}

public boolean getIAA66YU() {
return IAA66YU;
}

public byte getIAA67() {
return IAA67;
}

public boolean getIAA67FE() {
return IAA67FE;
}

public boolean getIAA67FL() {
return IAA67FL;
}

public boolean getIAA67FR() {
return IAA67FR;
}

public short getIAA67FU() {
return IAA67FU;
}

public boolean getIAA67ME() {
return IAA67ME;
}

public boolean getIAA67ML() {
return IAA67ML;
}

public boolean getIAA67MR() {
return IAA67MR;
}

public boolean getIAA67MU() {
return IAA67MU;
}

public boolean getIAA67OE() {
return IAA67OE;
}

public boolean getIAA67OL() {
return IAA67OL;
}

public boolean getIAA67OR() {
return IAA67OR;
}

public boolean getIAA67OU() {
return IAA67OU;
}

public boolean getIAA67WE() {
return IAA67WE;
}

public boolean getIAA67WL() {
return IAA67WL;
}

public boolean getIAA67WR() {
return IAA67WR;
}

public boolean getIAA67WU() {
return IAA67WU;
}

public boolean getIAA67YE() {
return IAA67YE;
}

public boolean getIAA67YL() {
return IAA67YL;
}

public boolean getIAA67YR() {
return IAA67YR;
}

public boolean getIAA67YU() {
return IAA67YU;
}

public short getIAA68() {
return IAA68;
}

public boolean getIAA68FE() {
return IAA68FE;
}

public boolean getIAA68FL() {
return IAA68FL;
}

public boolean getIAA68FR() {
return IAA68FR;
}

public boolean getIAA68FU() {
return IAA68FU;
}

public boolean getIAA68ME() {
return IAA68ME;
}

public boolean getIAA68ML() {
return IAA68ML;
}

public boolean getIAA68MR() {
return IAA68MR;
}

public boolean getIAA68MU() {
return IAA68MU;
}

public boolean getIAA68OE() {
return IAA68OE;
}

public boolean getIAA68OL() {
return IAA68OL;
}

public boolean getIAA68OR() {
return IAA68OR;
}

public boolean getIAA68OU() {
return IAA68OU;
}

public boolean getIAA68WE() {
return IAA68WE;
}

public boolean getIAA68WL() {
return IAA68WL;
}

public boolean getIAA68WR() {
return IAA68WR;
}

public boolean getIAA68WU() {
return IAA68WU;
}

public boolean getIAA68YE() {
return IAA68YE;
}

public boolean getIAA68YL() {
return IAA68YL;
}

public boolean getIAA68YR() {
return IAA68YR;
}

public boolean getIAA68YU() {
return IAA68YU;
}

public short getIAA69() {
return IAA69;
}

public boolean getIAA69FE() {
return IAA69FE;
}

public boolean getIAA69FL() {
return IAA69FL;
}

public boolean getIAA69FR() {
return IAA69FR;
}

public boolean getIAA69FU() {
return IAA69FU;
}

public boolean getIAA69ME() {
return IAA69ME;
}

public boolean getIAA69ML() {
return IAA69ML;
}

public boolean getIAA69MR() {
return IAA69MR;
}

public boolean getIAA69MU() {
return IAA69MU;
}

public boolean getIAA69OE() {
return IAA69OE;
}

public boolean getIAA69OL() {
return IAA69OL;
}

public boolean getIAA69OR() {
return IAA69OR;
}

public boolean getIAA69OU() {
return IAA69OU;
}

public boolean getIAA69WE() {
return IAA69WE;
}

public boolean getIAA69WL() {
return IAA69WL;
}

public boolean getIAA69WR() {
return IAA69WR;
}

public boolean getIAA69WU() {
return IAA69WU;
}

public boolean getIAA69YE() {
return IAA69YE;
}

public boolean getIAA69YL() {
return IAA69YL;
}

public boolean getIAA69YR() {
return IAA69YR;
}

public boolean getIAA69YU() {
return IAA69YU;
}

public short getIAA70() {
return IAA70;
}

public boolean getIAA70FE() {
return IAA70FE;
}

public boolean getIAA70FL() {
return IAA70FL;
}

public boolean getIAA70FR() {
return IAA70FR;
}

public boolean getIAA70FU() {
return IAA70FU;
}

public boolean getIAA70ME() {
return IAA70ME;
}

public boolean getIAA70ML() {
return IAA70ML;
}

public boolean getIAA70MR() {
return IAA70MR;
}

public boolean getIAA70MU() {
return IAA70MU;
}

public boolean getIAA70OE() {
return IAA70OE;
}

public boolean getIAA70OL() {
return IAA70OL;
}

public boolean getIAA70OR() {
return IAA70OR;
}

public boolean getIAA70OU() {
return IAA70OU;
}

public boolean getIAA70WE() {
return IAA70WE;
}

public boolean getIAA70WL() {
return IAA70WL;
}

public boolean getIAA70WR() {
return IAA70WR;
}

public boolean getIAA70WU() {
return IAA70WU;
}

public boolean getIAA70YE() {
return IAA70YE;
}

public boolean getIAA70YL() {
return IAA70YL;
}

public boolean getIAA70YR() {
return IAA70YR;
}

public boolean getIAA70YU() {
return IAA70YU;
}

public short getIAA71() {
return IAA71;
}

public boolean getIAA71FE() {
return IAA71FE;
}

public boolean getIAA71FL() {
return IAA71FL;
}

public boolean getIAA71FR() {
return IAA71FR;
}

public boolean getIAA71FU() {
return IAA71FU;
}

public boolean getIAA71ME() {
return IAA71ME;
}

public boolean getIAA71ML() {
return IAA71ML;
}

public boolean getIAA71MR() {
return IAA71MR;
}

public short getIAA71MU() {
return IAA71MU;
}

public boolean getIAA71OE() {
return IAA71OE;
}

public boolean getIAA71OL() {
return IAA71OL;
}

public boolean getIAA71OR() {
return IAA71OR;
}

public boolean getIAA71OU() {
return IAA71OU;
}

public boolean getIAA71WE() {
return IAA71WE;
}

public boolean getIAA71WL() {
return IAA71WL;
}

public boolean getIAA71WR() {
return IAA71WR;
}

public boolean getIAA71WU() {
return IAA71WU;
}

public boolean getIAA71YE() {
return IAA71YE;
}

public boolean getIAA71YL() {
return IAA71YL;
}

public boolean getIAA71YR() {
return IAA71YR;
}

public boolean getIAA71YU() {
return IAA71YU;
}

public byte getIAA72() {
return IAA72;
}

public boolean getIAA72FE() {
return IAA72FE;
}

public boolean getIAA72FL() {
return IAA72FL;
}

public boolean getIAA72FR() {
return IAA72FR;
}

public boolean getIAA72FU() {
return IAA72FU;
}

public boolean getIAA72ME() {
return IAA72ME;
}

public boolean getIAA72ML() {
return IAA72ML;
}

public boolean getIAA72MR() {
return IAA72MR;
}

public boolean getIAA72MU() {
return IAA72MU;
}

public boolean getIAA72OE() {
return IAA72OE;
}

public boolean getIAA72OL() {
return IAA72OL;
}

public boolean getIAA72OR() {
return IAA72OR;
}

public short getIAA72OU() {
return IAA72OU;
}

public boolean getIAA72WE() {
return IAA72WE;
}

public boolean getIAA72WL() {
return IAA72WL;
}

public boolean getIAA72WR() {
return IAA72WR;
}

public boolean getIAA72WU() {
return IAA72WU;
}

public boolean getIAA72YE() {
return IAA72YE;
}

public boolean getIAA72YL() {
return IAA72YL;
}

public boolean getIAA72YR() {
return IAA72YR;
}

public boolean getIAA72YU() {
return IAA72YU;
}

public byte getIAAIPE() {
return IAAIPE;
}

public short getIAAIPL() {
return IAAIPL;
}

public byte getIAAIPR() {
return IAAIPR;
}

public short getIAAIPU() {
return IAAIPU;
}

public byte getIAB10() {
return IAB10;
}

public byte getIAB11() {
return IAB11;
}

public byte getIAB12() {
return IAB12;
}

public byte getIAB13() {
return IAB13;
}

public byte getIAB14() {
return IAB14;
}

public byte getIAB15() {
return IAB15;
}

public byte getIAB16() {
return IAB16;
}

public byte getIAB17() {
return IAB17;
}

public byte getIAB18() {
return IAB18;
}

public byte getIAB28() {
return IAB28;
}

public byte getIAB29() {
return IAB29;
}

public byte getIAB30() {
return IAB30;
}

public byte getIAB31() {
return IAB31;
}

public byte getIAB32() {
return IAB32;
}

public byte getIAB33() {
return IAB33;
}

public byte getIAB34() {
return IAB34;
}

public byte getIAB35() {
return IAB35;
}

public byte getIAB36() {
return IAB36;
}

public byte getIAB46() {
return IAB46;
}

public byte getIAB47() {
return IAB47;
}

public byte getIAB48() {
return IAB48;
}

public byte getIAB49() {
return IAB49;
}

public byte getIAB50() {
return IAB50;
}

public byte getIAB51() {
return IAB51;
}

public byte getIAB52() {
return IAB52;
}

public byte getIAB53() {
return IAB53;
}

public byte getIAB54() {
return IAB54;
}

public byte getIAB64() {
return IAB64;
}

public byte getIAB65() {
return IAB65;
}

public byte getIAB66() {
return IAB66;
}

public byte getIAB67() {
return IAB67;
}

public byte getIAB68() {
return IAB68;
}

public boolean getIAB69() {
return IAB69;
}

public byte getIAB70() {
return IAB70;
}

public byte getIAB71() {
return IAB71;
}

public byte getIAB72() {
return IAB72;
}

public byte getIABEB() {
return IABEB;
}

public byte getIABEN95() {
return IABEN95;
}

public byte getIABEN96() {
return IABEN96;
}

public byte getIABENCB() {
return IABENCB;
}

public byte getIABENCC() {
return IABENCC;
}

public byte getIABENGA() {
return IABENGA;
}

public byte getIABENIS() {
return IABENIS;
}

public byte getIABENJA() {
return IABENJA;
}

public byte getIABENPC() {
return IABENPC;
}

public byte getIABENTC() {
return IABENTC;
}

public byte getIABENWP() {
return IABENWP;
}

public byte getIABEP95() {
return IABEP95;
}

public byte getIABEP96() {
return IABEP96;
}

public byte getIABEPCB() {
return IABEPCB;
}

public byte getIABEPCC() {
return IABEPCC;
}

public byte getIABEPGA() {
return IABEPGA;
}

public byte getIABEPIS() {
return IABEPIS;
}

public byte getIABEPJA() {
return IABEPJA;
}

public byte getIABEPM85() {
return IABEPM85;
}

public byte getIABEPM86() {
return IABEPM86;
}

public byte getIABEPM96() {
return IABEPM96;
}

public byte getIABEPMCB() {
return IABEPMCB;
}

public byte getIABEPMCC() {
return IABEPMCC;
}

public byte getIABEPMFP() {
return IABEPMFP;
}

public byte getIABEPMGA() {
return IABEPMGA;
}

public byte getIABEPMIS() {
return IABEPMIS;
}

public byte getIABEPMJA() {
return IABEPMJA;
}

public byte getIABEPMPC() {
return IABEPMPC;
}

public byte getIABEPMTC() {
return IABEPMTC;
}

public byte getIABEPMWP() {
return IABEPMWP;
}

public byte getIABEPN95() {
return IABEPN95;
}

public byte getIABEPN96() {
return IABEPN96;
}

public byte getIABEPNCB() {
return IABEPNCB;
}

public byte getIABEPNCC() {
return IABEPNCC;
}

public byte getIABEPNGA() {
return IABEPNGA;
}

public byte getIABEPNIS() {
return IABEPNIS;
}

public byte getIABEPNJA() {
return IABEPNJA;
}

public byte getIABEPNPC() {
return IABEPNPC;
}

public byte getIABEPNWC() {
return IABEPNWC;
}

public byte getIABEPNWP() {
return IABEPNWP;
}

public byte getIABEPPC() {
return IABEPPC;
}

public byte getIABEPTC() {
return IABEPTC;
}

public byte getIABEPWP() {
return IABEPWP;
}

public byte getIABER95() {
return IABER95;
}

public byte getIABER96() {
return IABER96;
}

public byte getIABERCB() {
return IABERCB;
}

public byte getIABERCC() {
return IABERCC;
}

public byte getIABERGA() {
return IABERGA;
}

public byte getIABERIS() {
return IABERIS;
}

public byte getIABERJA() {
return IABERJA;
}

public byte getIABERM85() {
return IABERM85;
}

public byte getIABERM86() {
return IABERM86;
}

public byte getIABERM96() {
return IABERM96;
}

public byte getIABERMCB() {
return IABERMCB;
}

public byte getIABERMCC() {
return IABERMCC;
}

public byte getIABERMFP() {
return IABERMFP;
}

public byte getIABERMGA() {
return IABERMGA;
}

public byte getIABERMIS() {
return IABERMIS;
}

public byte getIABERMJA() {
return IABERMJA;
}

public byte getIABERMPC() {
return IABERMPC;
}

public byte getIABERMTC() {
return IABERMTC;
}

public byte getIABERMWP() {
return IABERMWP;
}

public byte getIABERPC() {
return IABERPC;
}

public byte getIABERTC() {
return IABERTC;
}

public byte getIABERWP() {
return IABERWP;
}

public byte getIABM10() {
return IABM10;
}

public byte getIABM11() {
return IABM11;
}

public byte getIABM12() {
return IABM12;
}

public byte getIABM13() {
return IABM13;
}

public byte getIABM14() {
return IABM14;
}

public byte getIABM15() {
return IABM15;
}

public boolean getIABM16() {
return IABM16;
}

public byte getIABM17() {
return IABM17;
}

public byte getIABM18() {
return IABM18;
}

public byte getIABM28() {
return IABM28;
}

public byte getIABM29() {
return IABM29;
}

public byte getIABM30() {
return IABM30;
}

public byte getIABM31() {
return IABM31;
}

public byte getIABM32() {
return IABM32;
}

public byte getIABM33() {
return IABM33;
}

public boolean getIABM34() {
return IABM34;
}

public byte getIABM35() {
return IABM35;
}

public byte getIABM36() {
return IABM36;
}

public byte getIABM46() {
return IABM46;
}

public byte getIABM47() {
return IABM47;
}

public byte getIABM48() {
return IABM48;
}

public byte getIABM49() {
return IABM49;
}

public byte getIABM50() {
return IABM50;
}

public byte getIABM51() {
return IABM51;
}

public byte getIABM52() {
return IABM52;
}

public byte getIABM53() {
return IABM53;
}

public byte getIABM54() {
return IABM54;
}

public byte getIABM64() {
return IABM64;
}

public byte getIABM65() {
return IABM65;
}

public byte getIABM66() {
return IABM66;
}

public byte getIABM67() {
return IABM67;
}

public byte getIABM68() {
return IABM68;
}

public boolean getIABM69() {
return IABM69;
}

public byte getIABM70() {
return IABM70;
}

public byte getIABM71() {
return IABM71;
}

public boolean getIABM72() {
return IABM72;
}

public byte getIABW10() {
return IABW10;
}

public byte getIABW11() {
return IABW11;
}

public byte getIABW12() {
return IABW12;
}

public byte getIABW13() {
return IABW13;
}

public byte getIABW14() {
return IABW14;
}

public byte getIABW15() {
return IABW15;
}

public byte getIABW16() {
return IABW16;
}

public byte getIABW17() {
return IABW17;
}

public byte getIABW18() {
return IABW18;
}

public byte getIABW28() {
return IABW28;
}

public boolean getIABW29() {
return IABW29;
}

public byte getIABW30() {
return IABW30;
}

public byte getIABW31() {
return IABW31;
}

public byte getIABW32() {
return IABW32;
}

public byte getIABW33() {
return IABW33;
}

public byte getIABW34() {
return IABW34;
}

public byte getIABW35() {
return IABW35;
}

public boolean getIABW36() {
return IABW36;
}

public byte getIABW46() {
return IABW46;
}

public byte getIABW47() {
return IABW47;
}

public byte getIABW48() {
return IABW48;
}

public byte getIABW49() {
return IABW49;
}

public byte getIABW50() {
return IABW50;
}

public byte getIABW51() {
return IABW51;
}

public byte getIABW52() {
return IABW52;
}

public byte getIABW53() {
return IABW53;
}

public byte getIABW54() {
return IABW54;
}

public byte getIABW64() {
return IABW64;
}

public byte getIABW65() {
return IABW65;
}

public boolean getIABW66() {
return IABW66;
}

public byte getIABW67() {
return IABW67;
}

public boolean getIABW68() {
return IABW68;
}

public boolean getIABW69() {
return IABW69;
}

public byte getIABW70() {
return IABW70;
}

public byte getIABW71() {
return IABW71;
}

public byte getIABW72() {
return IABW72;
}

public byte getIACISAE() {
return IACISAE;
}

public short getIACISAL() {
return IACISAL;
}

public byte getIACISAR() {
return IACISAR;
}

public short getIACISAU() {
return IACISAU;
}

public byte getIADEBME() {
return IADEBME;
}

public short getIADEBML() {
return IADEBML;
}

public byte getIADEBMR() {
return IADEBMR;
}

public short getIADEBMU() {
return IADEBMU;
}

public byte getIAEA10E() {
return IAEA10E;
}

public short getIAEA10L() {
return IAEA10L;
}

public byte getIAEA10R() {
return IAEA10R;
}

public short getIAEA10U() {
return IAEA10U;
}

public boolean getIAEA11E() {
return IAEA11E;
}

public byte getIAEA11L() {
return IAEA11L;
}

public boolean getIAEA11R() {
return IAEA11R;
}

public short getIAEA11U() {
return IAEA11U;
}

public byte getIAEAR2E() {
return IAEAR2E;
}

public int getIAEAR2L() {
return IAEAR2L;
}

public byte getIAEAR2R() {
return IAEAR2R;
}

public int getIAEAR2U() {
return IAEAR2U;
}

public byte getIAEAR3E() {
return IAEAR3E;
}

public int getIAEAR3L() {
return IAEAR3L;
}

public byte getIAEAR3R() {
return IAEAR3R;
}

public int getIAEAR3U() {
return IAEAR3U;
}

public byte getIAEAR4E() {
return IAEAR4E;
}

public int getIAEAR4L() {
return IAEAR4L;
}

public byte getIAEAR4R() {
return IAEAR4R;
}

public int getIAEAR4U() {
return IAEAR4U;
}

public byte getIAEAR5E() {
return IAEAR5E;
}

public int getIAEAR5L() {
return IAEAR5L;
}

public byte getIAEAR5R() {
return IAEAR5R;
}

public int getIAEAR5U() {
return IAEAR5U;
}

public byte getIAEAR6E() {
return IAEAR6E;
}

public int getIAEAR6L() {
return IAEAR6L;
}

public byte getIAEAR6R() {
return IAEAR6R;
}

public int getIAEAR6U() {
return IAEAR6U;
}

public byte getIAEAR7E() {
return IAEAR7E;
}

public int getIAEAR7L() {
return IAEAR7L;
}

public byte getIAEAR7R() {
return IAEAR7R;
}

public int getIAEAR7U() {
return IAEAR7U;
}

public byte getIAEAR8E() {
return IAEAR8E;
}

public int getIAEAR8L() {
return IAEAR8L;
}

public byte getIAEAR8R() {
return IAEAR8R;
}

public int getIAEAR8U() {
return IAEAR8U;
}

public byte getIAEAR9E() {
return IAEAR9E;
}

public short getIAEAR9L() {
return IAEAR9L;
}

public byte getIAEAR9R() {
return IAEAR9R;
}

public short getIAEAR9U() {
return IAEAR9U;
}

public byte getIAEARE() {
return IAEARE;
}

public int getIAEARL() {
return IAEARL;
}

public boolean getIAEARN11() {
return IAEARN11;
}

public byte getIAEARR() {
return IAEARR;
}

public int getIAEARU() {
return IAEARU;
}

public short getIAERN() {
return IAERN;
}

public byte getIAERN10() {
return IAERN10;
}

public int getIAERN2() {
return IAERN2;
}

public int getIAERN3() {
return IAERN3;
}

public int getIAERN4() {
return IAERN4;
}

public int getIAERN5() {
return IAERN5;
}

public short getIAERN6() {
return IAERN6;
}

public short getIAERN7() {
return IAERN7;
}

public short getIAERN8() {
return IAERN8;
}

public byte getIAERN9() {
return IAERN9;
}

public byte getIAFBAE() {
return IAFBAE;
}

public int getIAFBAL() {
return IAFBAL;
}

public byte getIAFBAR() {
return IAFBAR;
}

public int getIAFBAU() {
return IAFBAU;
}

public byte getIAFUEL() {
return IAFUEL;
}

public byte getIAHDB() {
return IAHDB;
}

public byte getIAHDN95() {
return IAHDN95;
}

public byte getIAHDN96() {
return IAHDN96;
}

public byte getIAHDNAA() {
return IAHDNAA;
}

public byte getIAHDNCA() {
return IAHDNCA;
}

public byte getIAHDNDL() {
return IAHDNDL;
}

public byte getIAHDNIB() {
return IAHDNIB;
}

public byte getIAHDNII() {
return IAHDNII;
}

public byte getIAHDNSD() {
return IAHDNSD;
}

public byte getIAHDNSP() {
return IAHDNSP;
}

public byte getIAHDNWD() {
return IAHDNWD;
}

public byte getIAHDP95() {
return IAHDP95;
}

public byte getIAHDP96() {
return IAHDP96;
}

public byte getIAHDPAA() {
return IAHDPAA;
}

public byte getIAHDPCA() {
return IAHDPCA;
}

public byte getIAHDPDL() {
return IAHDPDL;
}

public byte getIAHDPIB() {
return IAHDPIB;
}

public byte getIAHDPII() {
return IAHDPII;
}

public byte getIAHDPM85() {
return IAHDPM85;
}

public byte getIAHDPM86() {
return IAHDPM86;
}

public byte getIAHDPM96() {
return IAHDPM96;
}

public byte getIAHDPMAA() {
return IAHDPMAA;
}

public byte getIAHDPMCA() {
return IAHDPMCA;
}

public byte getIAHDPMDL() {
return IAHDPMDL;
}

public byte getIAHDPMIB() {
return IAHDPMIB;
}

public byte getIAHDPMII() {
return IAHDPMII;
}

public byte getIAHDPMSD() {
return IAHDPMSD;
}

public byte getIAHDPMSP() {
return IAHDPMSP;
}

public byte getIAHDPMWD() {
return IAHDPMWD;
}

public byte getIAHDPN85() {
return IAHDPN85;
}

public byte getIAHDPN96() {
return IAHDPN96;
}

public byte getIAHDPNAA() {
return IAHDPNAA;
}

public byte getIAHDPNCA() {
return IAHDPNCA;
}

public byte getIAHDPNDL() {
return IAHDPNDL;
}

public byte getIAHDPNIB() {
return IAHDPNIB;
}

public byte getIAHDPNII() {
return IAHDPNII;
}

public byte getIAHDPNSD() {
return IAHDPNSD;
}

public byte getIAHDPNSP() {
return IAHDPNSP;
}

public byte getIAHDPNWD() {
return IAHDPNWD;
}

public byte getIAHDPSD() {
return IAHDPSD;
}

public byte getIAHDPSP() {
return IAHDPSP;
}

public byte getIAHDPWD() {
return IAHDPWD;
}

public byte getIAHDR95() {
return IAHDR95;
}

public byte getIAHDR96() {
return IAHDR96;
}

public byte getIAHDRAA() {
return IAHDRAA;
}

public byte getIAHDRCA() {
return IAHDRCA;
}

public byte getIAHDRDL() {
return IAHDRDL;
}

public byte getIAHDRIB() {
return IAHDRIB;
}

public byte getIAHDRII() {
return IAHDRII;
}

public byte getIAHDRM85() {
return IAHDRM85;
}

public byte getIAHDRM86() {
return IAHDRM86;
}

public byte getIAHDRM96() {
return IAHDRM96;
}

public byte getIAHDRMAA() {
return IAHDRMAA;
}

public byte getIAHDRMCA() {
return IAHDRMCA;
}

public byte getIAHDRMDL() {
return IAHDRMDL;
}

public byte getIAHDRMIB() {
return IAHDRMIB;
}

public byte getIAHDRMII() {
return IAHDRMII;
}

public byte getIAHDRMSD() {
return IAHDRMSD;
}

public byte getIAHDRMSP() {
return IAHDRMSP;
}

public byte getIAHDRMWD() {
return IAHDRMWD;
}

public byte getIAHDRSD() {
return IAHDRSD;
}

public byte getIAHDRSP() {
return IAHDRSP;
}

public byte getIAHDRWD() {
return IAHDRWD;
}

public byte getIAHOMEE() {
return IAHOMEE;
}

public int getIAHOMEL() {
return IAHOMEL;
}

public byte getIAHOMER() {
return IAHOMER;
}

public int getIAHOMEU() {
return IAHOMEU;
}

public byte getIAIRAE() {
return IAIRAE;
}

public int getIAIRAL() {
return IAIRAL;
}

public byte getIAIRAR() {
return IAIRAR;
}

public int getIAIRAU() {
return IAIRAU;
}

public byte getIAISACAS() {
return IAISACAS;
}

public byte getIAISADE() {
return IAISADE;
}

public short getIAISADL() {
return IAISADL;
}

public byte getIAISADR() {
return IAISADR;
}

public short getIAISADU() {
return IAISADU;
}

public byte getIAISALI() {
return IAISALI;
}

public byte getIAISASHA() {
return IAISASHA;
}

public byte getIALIPAE() {
return IALIPAE;
}

public int getIALIPAL() {
return IALIPAL;
}

public byte getIALIPAR() {
return IALIPAR;
}

public int getIALIPAU() {
return IALIPAU;
}

public byte getIALISAE() {
return IALISAE;
}

public short getIALISAL() {
return IALISAL;
}

public byte getIALISAR() {
return IALISAR;
}

public short getIALISAU() {
return IALISAU;
}

public byte getIALIYAE() {
return IALIYAE;
}

public int getIALIYAL() {
return IALIYAL;
}

public byte getIALIYAR() {
return IALIYAR;
}

public int getIALIYAU() {
return IALIYAU;
}

public byte getIALM19() {
return IALM19;
}

public boolean getIALM20() {
return IALM20;
}

public byte getIALM21() {
return IALM21;
}

public byte getIALM22() {
return IALM22;
}

public byte getIALM23() {
return IALM23;
}

public byte getIALM24() {
return IALM24;
}

public byte getIALM25() {
return IALM25;
}

public byte getIALM26() {
return IALM26;
}

public byte getIALM27() {
return IALM27;
}

public byte getIALM37() {
return IALM37;
}

public byte getIALM38() {
return IALM38;
}

public byte getIALM39() {
return IALM39;
}

public byte getIALM40() {
return IALM40;
}

public byte getIALM41() {
return IALM41;
}

public byte getIALM42() {
return IALM42;
}

public byte getIALM43() {
return IALM43;
}

public byte getIALM44() {
return IALM44;
}

public byte getIALM45() {
return IALM45;
}

public byte getIALM55() {
return IALM55;
}

public byte getIALM56() {
return IALM56;
}

public byte getIALM57() {
return IALM57;
}

public byte getIALM58() {
return IALM58;
}

public boolean getIALM59() {
return IALM59;
}

public byte getIALM60() {
return IALM60;
}

public byte getIALM61() {
return IALM61;
}

public byte getIALM62() {
return IALM62;
}

public byte getIALM63() {
return IALM63;
}

public byte getIALOAME() {
return IALOAME;
}

public short getIALOAML() {
return IALOAML;
}

public byte getIALOAMR() {
return IALOAMR;
}

public short getIALOAMU() {
return IALOAMU;
}

public byte getIALOAN96() {
return IALOAN96;
}

public byte getIALOANHP() {
return IALOANHP;
}

public byte getIALOANML() {
return IALOANML;
}

public byte getIALOANMO() {
return IALOANMO;
}

public byte getIALOANOD() {
return IALOANOD;
}

public byte getIALOANPL() {
return IALOANPL;
}

public byte getIALOANSF() {
return IALOANSF;
}

public byte getIALREFE() {
return IALREFE;
}

public byte getIALREFL() {
return IALREFL;
}

public byte getIALREFR() {
return IALREFR;
}

public byte getIALREFU() {
return IALREFU;
}

public byte getIALREME() {
return IALREME;
}

public short getIALREML() {
return IALREML;
}

public byte getIALREMR() {
return IALREMR;
}

public short getIALREMU() {
return IALREMU;
}

public byte getIALREOE() {
return IALREOE;
}

public short getIALREOL() {
return IALREOL;
}

public byte getIALREOR() {
return IALREOR;
}

public short getIALREOU() {
return IALREOU;
}

public byte getIALREWE() {
return IALREWE;
}

public short getIALREWL() {
return IALREWL;
}

public byte getIALREWR() {
return IALREWR;
}

public byte getIALREWU() {
return IALREWU;
}

public byte getIALREYE() {
return IALREYE;
}

public short getIALREYL() {
return IALREYL;
}

public byte getIALREYR() {
return IALREYR;
}

public short getIALREYU() {
return IALREYU;
}

public byte getIALY19() {
return IALY19;
}

public byte getIALY20() {
return IALY20;
}

public byte getIALY21() {
return IALY21;
}

public byte getIALY22() {
return IALY22;
}

public byte getIALY23() {
return IALY23;
}

public byte getIALY24() {
return IALY24;
}

public byte getIALY25() {
return IALY25;
}

public byte getIALY26() {
return IALY26;
}

public byte getIALY27() {
return IALY27;
}

public byte getIALY37() {
return IALY37;
}

public byte getIALY38() {
return IALY38;
}

public byte getIALY39() {
return IALY39;
}

public byte getIALY40() {
return IALY40;
}

public byte getIALY41() {
return IALY41;
}

public byte getIALY42() {
return IALY42;
}

public byte getIALY43() {
return IALY43;
}

public byte getIALY44() {
return IALY44;
}

public byte getIALY45() {
return IALY45;
}

public byte getIALY55() {
return IALY55;
}

public byte getIALY56() {
return IALY56;
}

public byte getIALY57() {
return IALY57;
}

public byte getIALY58() {
return IALY58;
}

public boolean getIALY59() {
return IALY59;
}

public byte getIALY60() {
return IALY60;
}

public byte getIALY61() {
return IALY61;
}

public byte getIALY62() {
return IALY62;
}

public byte getIALY63() {
return IALY63;
}

public byte getIANPBPE() {
return IANPBPE;
}

public short getIANPBPL() {
return IANPBPL;
}

public byte getIANPBPR() {
return IANPBPR;
}

public short getIANPBPU() {
return IANPBPU;
}

public byte getIAOASAE() {
return IAOASAE;
}

public int getIAOASAL() {
return IAOASAL;
}

public byte getIAOASAR() {
return IAOASAR;
}

public int getIAOASAU() {
return IAOASAU;
}

public byte getIAOMME() {
return IAOMME;
}

public int getIAOMML() {
return IAOMML;
}

public byte getIAOMMR() {
return IAOMMR;
}

public int getIAOMMU() {
return IAOMMU;
}

public byte getIAOTHP3() {
return IAOTHP3;
}

public byte getIAOWEME() {
return IAOWEME;
}

public short getIAOWEML() {
return IAOWEML;
}

public byte getIAOWEMR() {
return IAOWEMR;
}

public short getIAOWEMU() {
return IAOWEMU;
}

public byte getIAP39() {
return IAP39;
}

public byte getIAP40() {
return IAP40;
}

public byte getIAP41() {
return IAP41;
}

public byte getIAP42() {
return IAP42;
}

public byte getIAP43() {
return IAP43;
}

public byte getIAP44() {
return IAP44;
}

public byte getIAP45() {
return IAP45;
}

public byte getIAP46() {
return IAP46;
}

public byte getIAP47() {
return IAP47;
}

public byte getIAP48() {
return IAP48;
}

public byte getIAP49() {
return IAP49;
}

public byte getIAP50() {
return IAP50;
}

public byte getIAP51() {
return IAP51;
}

public byte getIAP52() {
return IAP52;
}

public byte getIAP53() {
return IAP53;
}

public byte getIAP54() {
return IAP54;
}

public byte getIAP55() {
return IAP55;
}

public byte getIAP56() {
return IAP56;
}

public byte getIAP57() {
return IAP57;
}

public byte getIAP58() {
return IAP58;
}

public byte getIAP59() {
return IAP59;
}

public byte getIAP60() {
return IAP60;
}

public byte getIAP61() {
return IAP61;
}

public byte getIAP62() {
return IAP62;
}

public byte getIAP63() {
return IAP63;
}

public byte getIAP64() {
return IAP64;
}

public byte getIAP65() {
return IAP65;
}

public byte getIAP66() {
return IAP66;
}

public byte getIAP67() {
return IAP67;
}

public byte getIAP68() {
return IAP68;
}

public boolean getIAP69() {
return IAP69;
}

public byte getIAP70() {
return IAP70;
}

public byte getIAP71() {
return IAP71;
}

public byte getIAP72() {
return IAP72;
}

public byte getIAPAY() {
return IAPAY;
}

public byte getIAPAY2() {
return IAPAY2;
}

public byte getIAPAY3() {
return IAPAY3;
}

public byte getIAPAYR() {
return IAPAYR;
}

public byte getIAPAYR2() {
return IAPAYR2;
}

public byte getIAPAYR3() {
return IAPAYR3;
}

public byte getIAPAYW11() {
return IAPAYW11;
}

public byte getIAPK95() {
return IAPK95;
}

public byte getIAPK96() {
return IAPK96;
}

public byte getIAPKGW() {
return IAPKGW;
}

public byte getIAPKIOB() {
return IAPKIOB;
}

public byte getIAPKLI() {
return IAPKLI;
}

public byte getIAPKM1E() {
return IAPKM1E;
}

public int getIAPKM1L() {
return IAPKM1L;
}

public byte getIAPKM1R() {
return IAPKM1R;
}

public int getIAPKM1U() {
return IAPKM1U;
}

public byte getIAPKM2E() {
return IAPKM2E;
}

public int getIAPKM2L() {
return IAPKM2L;
}

public byte getIAPKM2R() {
return IAPKM2R;
}

public int getIAPKM2U() {
return IAPKM2U;
}

public byte getIAPKM3E() {
return IAPKM3E;
}

public boolean getIAPKM3L() {
return IAPKM3L;
}

public byte getIAPKM3R() {
return IAPKM3R;
}

public short getIAPKM3U() {
return IAPKM3U;
}

public byte getIAPKM4E() {
return IAPKM4E;
}

public short getIAPKM4L() {
return IAPKM4L;
}

public byte getIAPKM4R() {
return IAPKM4R;
}

public short getIAPKM4U() {
return IAPKM4U;
}

public byte getIAPKM5E() {
return IAPKM5E;
}

public int getIAPKM5L() {
return IAPKM5L;
}

public byte getIAPKM5R() {
return IAPKM5R;
}

public int getIAPKM5U() {
return IAPKM5U;
}

public byte getIAPKM6E() {
return IAPKM6E;
}

public int getIAPKM6L() {
return IAPKM6L;
}

public byte getIAPKM6R() {
return IAPKM6R;
}

public int getIAPKM6U() {
return IAPKM6U;
}

public byte getIAPKM7E() {
return IAPKM7E;
}

public short getIAPKM7L() {
return IAPKM7L;
}

public byte getIAPKM7R() {
return IAPKM7R;
}

public short getIAPKM7U() {
return IAPKM7U;
}

public byte getIAPKM85() {
return IAPKM85;
}

public byte getIAPKM86() {
return IAPKM86;
}

public byte getIAPKM8E() {
return IAPKM8E;
}

public int getIAPKM8L() {
return IAPKM8L;
}

public byte getIAPKM8R() {
return IAPKM8R;
}

public int getIAPKM8U() {
return IAPKM8U;
}

public byte getIAPKM96() {
return IAPKM96;
}

public byte getIAPKMGW() {
return IAPKMGW;
}

public byte getIAPKMIOB() {
return IAPKMIOB;
}

public byte getIAPKMLI() {
return IAPKMLI;
}

public byte getIAPKMOIP() {
return IAPKMOIP;
}

public byte getIAPKMPAP() {
return IAPKMPAP;
}

public byte getIAPKMPP() {
return IAPKMPP;
}

public byte getIAPKMRP() {
return IAPKMRP;
}

public byte getIAPKOIP() {
return IAPKOIP;
}

public byte getIAPKPAP() {
return IAPKPAP;
}

public byte getIAPKPP() {
return IAPKPP;
}

public byte getIAPKRP() {
return IAPKRP;
}

public byte getIAPLW() {
return IAPLW;
}

public byte getIAPLY() {
return IAPLY;
}

public byte getIAPLYP() {
return IAPLYP;
}

public byte getIAPLYW() {
return IAPLYW;
}

public byte getIAPPAFE() {
return IAPPAFE;
}

public boolean getIAPPAFL() {
return IAPPAFL;
}

public byte getIAPPAFR() {
return IAPPAFR;
}

public short getIAPPAFU() {
return IAPPAFU;
}

public byte getIAPPAME() {
return IAPPAME;
}

public short getIAPPAML() {
return IAPPAML;
}

public byte getIAPPAMR() {
return IAPPAMR;
}

public short getIAPPAMU() {
return IAPPAMU;
}

public byte getIAPPAOE() {
return IAPPAOE;
}

public short getIAPPAOL() {
return IAPPAOL;
}

public byte getIAPPAOR() {
return IAPPAOR;
}

public short getIAPPAOU() {
return IAPPAOU;
}

public byte getIAPPAWE() {
return IAPPAWE;
}

public short getIAPPAWL() {
return IAPPAWL;
}

public byte getIAPPAWR() {
return IAPPAWR;
}

public short getIAPPAWU() {
return IAPPAWU;
}

public byte getIAPPAYE() {
return IAPPAYE;
}

public short getIAPPAYL() {
return IAPPAYL;
}

public byte getIAPPAYR() {
return IAPPAYR;
}

public short getIAPPAYU() {
return IAPPAYU;
}

public byte getIAPPEIE() {
return IAPPEIE;
}

public short getIAPPEIL() {
return IAPPEIL;
}

public byte getIAPPEIR() {
return IAPPEIR;
}

public short getIAPPEIU() {
return IAPPEIU;
}

public byte getIAPROP95() {
return IAPROP95;
}

public byte getIAPROP96() {
return IAPROP96;
}

public byte getIAPROPFA() {
return IAPROPFA;
}

public byte getIAPROPHO() {
return IAPROPHO;
}

public byte getIAPROPIN() {
return IAPROPIN;
}

public byte getIAPROPOL() {
return IAPROPOL;
}

public byte getIAPROPOW() {
return IAPROPOW;
}

public byte getIAPROPTR() {
return IAPROPTR;
}

public byte getIAPYW2() {
return IAPYW2;
}

public byte getIAPYW4() {
return IAPYW4;
}

public byte getIAPYW5() {
return IAPYW5;
}

public byte getIAPYW6() {
return IAPYW6;
}

public byte getIAPYW7() {
return IAPYW7;
}

public byte getIAPYW8() {
return IAPYW8;
}

public byte getIAPYW9() {
return IAPYW9;
}

public byte getIARECE() {
return IARECE;
}

public short getIARECL() {
return IARECL;
}

public byte getIARECR() {
return IARECR;
}

public short getIARECU() {
return IARECU;
}

public short getIAREGM3() {
return IAREGM3;
}

public byte getIAREGO3() {
return IAREGO3;
}

public boolean getIAREPFE() {
return IAREPFE;
}

public boolean getIAREPFL() {
return IAREPFL;
}

public boolean getIAREPFR() {
return IAREPFR;
}

public boolean getIAREPFU() {
return IAREPFU;
}

public byte getIAREPME() {
return IAREPME;
}

public byte getIAREPML() {
return IAREPML;
}

public byte getIAREPMR() {
return IAREPMR;
}

public short getIAREPMU() {
return IAREPMU;
}

public byte getIAREPOE() {
return IAREPOE;
}

public short getIAREPOL() {
return IAREPOL;
}

public byte getIAREPOR() {
return IAREPOR;
}

public short getIAREPOU() {
return IAREPOU;
}

public byte getIAREPWE() {
return IAREPWE;
}

public byte getIAREPWL() {
return IAREPWL;
}

public byte getIAREPWR() {
return IAREPWR;
}

public byte getIAREPWU() {
return IAREPWU;
}

public byte getIAREPYE() {
return IAREPYE;
}

public byte getIAREPYL() {
return IAREPYL;
}

public byte getIAREPYR() {
return IAREPYR;
}

public short getIAREPYU() {
return IAREPYU;
}

public boolean getIARG2FE() {
return IARG2FE;
}

public boolean getIARG2FL() {
return IARG2FL;
}

public boolean getIARG2FR() {
return IARG2FR;
}

public boolean getIARG2FU() {
return IARG2FU;
}

public byte getIARG2ME() {
return IARG2ME;
}

public short getIARG2ML() {
return IARG2ML;
}

public byte getIARG2MR() {
return IARG2MR;
}

public short getIARG2MU() {
return IARG2MU;
}

public byte getIARG2OE() {
return IARG2OE;
}

public byte getIARG2OL() {
return IARG2OL;
}

public byte getIARG2OR() {
return IARG2OR;
}

public byte getIARG2OU() {
return IARG2OU;
}

public boolean getIARG2WE() {
return IARG2WE;
}

public boolean getIARG2WL() {
return IARG2WL;
}

public boolean getIARG2WR() {
return IARG2WR;
}

public boolean getIARG2WU() {
return IARG2WU;
}

public boolean getIARG2YE() {
return IARG2YE;
}

public boolean getIARG2YL() {
return IARG2YL;
}

public boolean getIARG2YR() {
return IARG2YR;
}

public boolean getIARG2YU() {
return IARG2YU;
}

public boolean getIARG3FE() {
return IARG3FE;
}

public boolean getIARG3FL() {
return IARG3FL;
}

public boolean getIARG3FR() {
return IARG3FR;
}

public boolean getIARG3FU() {
return IARG3FU;
}

public boolean getIARG3ME() {
return IARG3ME;
}

public boolean getIARG3ML() {
return IARG3ML;
}

public boolean getIARG3MR() {
return IARG3MR;
}

public boolean getIARG3MU() {
return IARG3MU;
}

public boolean getIARG3OE() {
return IARG3OE;
}

public boolean getIARG3OL() {
return IARG3OL;
}

public boolean getIARG3OR() {
return IARG3OR;
}

public boolean getIARG3OU() {
return IARG3OU;
}

public boolean getIARG3WE() {
return IARG3WE;
}

public boolean getIARG3WL() {
return IARG3WL;
}

public boolean getIARG3WR() {
return IARG3WR;
}

public boolean getIARG3WU() {
return IARG3WU;
}

public boolean getIARG3YE() {
return IARG3YE;
}

public boolean getIARG3YL() {
return IARG3YL;
}

public boolean getIARG3YR() {
return IARG3YR;
}

public boolean getIARG3YU() {
return IARG3YU;
}

public boolean getIARGFE() {
return IARGFE;
}

public boolean getIARGFL() {
return IARGFL;
}

public boolean getIARGFR() {
return IARGFR;
}

public boolean getIARGFU() {
return IARGFU;
}

public boolean getIARGM() {
return IARGM;
}

public byte getIARGME() {
return IARGME;
}

public short getIARGML() {
return IARGML;
}

public byte getIARGMR() {
return IARGMR;
}

public short getIARGMU() {
return IARGMU;
}

public byte getIARGMW() {
return IARGMW;
}

public boolean getIARGMW2() {
return IARGMW2;
}

public byte getIARGMWP() {
return IARGMWP;
}

public byte getIARGOE() {
return IARGOE;
}

public short getIARGOL() {
return IARGOL;
}

public byte getIARGOR() {
return IARGOR;
}

public short getIARGOU() {
return IARGOU;
}

public byte getIARGWE() {
return IARGWE;
}

public byte getIARGWL() {
return IARGWL;
}

public byte getIARGWR() {
return IARGWR;
}

public byte getIARGWU() {
return IARGWU;
}

public byte getIARGYE() {
return IARGYE;
}

public byte getIARGYL() {
return IARGYL;
}

public byte getIARGYR() {
return IARGYR;
}

public byte getIARGYR1() {
return IARGYR1;
}

public byte getIARGYR2() {
return IARGYR2;
}

public boolean getIARGYR3() {
return IARGYR3;
}

public byte getIARGYRP() {
return IARGYRP;
}

public byte getIARGYU() {
return IARGYU;
}

public byte getIARMWA() {
return IARMWA;
}

public boolean getIARMWA2() {
return IARMWA2;
}

public boolean getIARMWA3() {
return IARMWA3;
}

public boolean getIARMWPA() {
return IARMWPA;
}

public byte getIASAVAE() {
return IASAVAE;
}

public int getIASAVAL() {
return IASAVAL;
}

public byte getIASAVAR() {
return IASAVAR;
}

public int getIASAVAU() {
return IASAVAU;
}

public byte getIASCAE() {
return IASCAE;
}

public int getIASCAL() {
return IASCAL;
}

public byte getIASCAR() {
return IASCAR;
}

public int getIASCAU() {
return IASCAU;
}

public byte getIASHTFOL() {
return IASHTFOL;
}

public byte getIASHTMUT() {
return IASHTMUT;
}

public byte getIASHTPRI() {
return IASHTPRI;
}

public byte getIASHTUKL() {
return IASHTUKL;
}

public byte getIASI95() {
return IASI95;
}

public byte getIASI96() {
return IASI96;
}

public byte getIASIBG() {
return IASIBG;
}

public byte getIASICA() {
return IASICA;
}

public byte getIASIISA() {
return IASIISA;
}

public byte getIASINS() {
return IASINS;
}

public byte getIASIOIE() {
return IASIOIE;
}

public short getIASIOIL() {
return IASIOIL;
}

public byte getIASIOIR() {
return IASIOIR;
}

public short getIASIOIU() {
return IASIOIU;
}

public byte getIASIOPT() {
return IASIOPT;
}

public byte getIASIPB() {
return IASIPB;
}

public byte getIASIPEP() {
return IASIPEP;
}

public byte getIASISAE() {
return IASISAE;
}

public int getIASISAL() {
return IASISAL;
}

public byte getIASISAR() {
return IASISAR;
}

public int getIASISAU() {
return IASISAU;
}

public byte getIASISAV() {
return IASISAV;
}

public byte getIASISC() {
return IASISC;
}

public byte getIASISHA() {
return IASISHA;
}

public byte getIASITESS() {
return IASITESS;
}

public byte getIASIUIT() {
return IASIUIT;
}

public byte getIASSSE() {
return IASSSE;
}

public byte getIASSSIE() {
return IASSSIE;
}

public short getIASSSIL() {
return IASSSIL;
}

public byte getIASSSIR() {
return IASSSIR;
}

public short getIASSSIU() {
return IASSSIU;
}

public int getIASSSL() {
return IASSSL;
}

public byte getIASSSR() {
return IASSSR;
}

public int getIASSSU() {
return IASSSU;
}

public boolean getIAT39() {
return IAT39;
}

public boolean getIAT40() {
return IAT40;
}

public boolean getIAT41() {
return IAT41;
}

public boolean getIAT42() {
return IAT42;
}

public boolean getIAT43() {
return IAT43;
}

public boolean getIAT44() {
return IAT44;
}

public boolean getIAT45() {
return IAT45;
}

public boolean getIAT46() {
return IAT46;
}

public boolean getIAT47() {
return IAT47;
}

public boolean getIAT48() {
return IAT48;
}

public boolean getIAT49() {
return IAT49;
}

public boolean getIAT50() {
return IAT50;
}

public boolean getIAT51() {
return IAT51;
}

public boolean getIAT52() {
return IAT52;
}

public boolean getIAT53() {
return IAT53;
}

public boolean getIAT54() {
return IAT54;
}

public boolean getIAT55() {
return IAT55;
}

public boolean getIAT56() {
return IAT56;
}

public boolean getIAT57() {
return IAT57;
}

public boolean getIAT58() {
return IAT58;
}

public boolean getIAT59() {
return IAT59;
}

public boolean getIAT60() {
return IAT60;
}

public boolean getIAT61() {
return IAT61;
}

public boolean getIAT62() {
return IAT62;
}

public boolean getIAT63() {
return IAT63;
}

public boolean getIAT64() {
return IAT64;
}

public boolean getIAT65() {
return IAT65;
}

public boolean getIAT66() {
return IAT66;
}

public boolean getIAT67() {
return IAT67;
}

public boolean getIAT68() {
return IAT68;
}

public boolean getIAT69() {
return IAT69;
}

public boolean getIAT70() {
return IAT70;
}

public boolean getIAT71() {
return IAT71;
}

public boolean getIAT72() {
return IAT72;
}

public byte getIAUITE() {
return IAUITE;
}

public byte getIAUITIE() {
return IAUITIE;
}

public short getIAUITIL() {
return IAUITIL;
}

public byte getIAUITIR() {
return IAUITIR;
}

public short getIAUITIU() {
return IAUITIU;
}

public int getIAUITL() {
return IAUITL;
}

public byte getIAUITR() {
return IAUITR;
}

public int getIAUITU() {
return IAUITU;
}

public boolean getIAWHMT39() {
return IAWHMT39;
}

public byte getIFLAG_DBSR1() {
return IFLAG_DBSR1;
}

public byte getIFLAG_DBSR2() {
return IFLAG_DBSR2;
}

public byte getIFLAG_DCCONT() {
return IFLAG_DCCONT;
}

public byte getIFLAG_DCFUND() {
return IFLAG_DCFUND;
}

public boolean getIFLAG_EARN() {
return IFLAG_EARN;
}

public byte getIFLAG_REC() {
return IFLAG_REC;
}

public byte getIFLAG_RTEN() {
return IFLAG_RTEN;
}

public double getINRECEIPT_06() {
return INRECEIPT_06;
}

public double getINRECEIPT_SPA() {
return INRECEIPT_SPA;
}

public byte getINTMTH() {
return INTMTH;
}

public short getINTYEAR() {
return INTYEAR;
}

public byte getMAINHH() {
return MAINHH;
}

public double getMAXALC() {
return MAXALC;
}

public byte getMID() {
return MID;
}

public byte getMMAIDC() {
return MMAIDC;
}

public byte getMMCOM85() {
return MMCOM85;
}

public byte getMMCOM86() {
return MMCOM86;
}

public byte getMMCOMNI() {
return MMCOMNI;
}

public byte getMMCOMPA() {
return MMCOMPA;
}

public byte getMMCOMRF() {
return MMCOMRF;
}

public byte getMMCOMSP() {
return MMCOMSP;
}

public byte getMMCOMUN() {
return MMCOMUN;
}

public byte getMMRECRC() {
return MMRECRC;
}

public byte getMOTHER() {
return MOTHER;
}

public byte getMSTAT() {
return MSTAT;
}

public byte getMTHAGD() {
return MTHAGD;
}

public byte getNCLM() {
return NCLM;
}

public byte getNCORRECT() {
return NCORRECT;
}

public byte getNMISSED() {
return NMISSED;
}

public byte getNNMISRC() {
return NNMISRC;
}

public byte getNROW() {
return NROW;
}

public short getNROWCLM() {
return NROWCLM;
}

public byte getORDCON() {
return ORDCON;
}

public byte getORGANIS() {
return ORGANIS;
}

public byte getORGNO() {
return ORGNO;
}

public byte getOUTSC() {
return OUTSC;
}

public byte getOUTSH() {
return OUTSH;
}

public byte getOUTSW() {
return OUTSW;
}

public byte getPAINHH() {
return PAINHH;
}

public byte getPALEVEL() {
return PALEVEL;
}

public byte getPC_P_F() {
return PC_P_F;
}

public double getPC_P_I() {
return PC_P_I;
}

public short getPC_P_O() {
return PC_P_O;
}

public short getPC_P_T() {
return PC_P_T;
}

public byte getPC_R_F() {
return PC_R_F;
}

public double getPC_R_I() {
return PC_R_I;
}

public short getPC_R_O() {
return PC_R_O;
}

public short getPC_R_T() {
return PC_R_T;
}

public byte getPENSNO() {
return PENSNO;
}

public byte getPHLEGM() {
return PHLEGM;
}

public double getPRIPENW_06() {
return PRIPENW_06;
}

public double getPRIPENW_SPA() {
return PRIPENW_SPA;
}

public short getPSMID() {
return PSMID;
}

public short getPSOLD() {
return PSOLD;
}

public String getQVER() {
return QVER;
}

public byte getRAAUK() {
return RAAUK;
}

public byte getRABKS() {
return RABKS;
}

public byte getRABOR() {
return RABOR;
}

public byte getRABUK() {
return RABUK;
}

public byte getRABUK10() {
return RABUK10;
}

public byte getRABUK11() {
return RABUK11;
}

public byte getRABUK12() {
return RABUK12;
}

public byte getRABUK13() {
return RABUK13;
}

public byte getRABUK14() {
return RABUK14;
}

public byte getRABUK15() {
return RABUK15;
}

public byte getRABUK16() {
return RABUK16;
}

public byte getRABUK17() {
return RABUK17;
}

public byte getRABUK18() {
return RABUK18;
}

public byte getRABUK19() {
return RABUK19;
}

public byte getRABUK2() {
return RABUK2;
}

public byte getRABUK20() {
return RABUK20;
}

public byte getRABUK3() {
return RABUK3;
}

public byte getRABUK4() {
return RABUK4;
}

public byte getRABUK5() {
return RABUK5;
}

public byte getRABUK6() {
return RABUK6;
}

public byte getRABUK7() {
return RABUK7;
}

public byte getRABUK8() {
return RABUK8;
}

public byte getRABUK9() {
return RABUK9;
}

public byte getRADIV() {
return RADIV;
}

public short getRADIY() {
return RADIY;
}

public short getRAESS() {
return RAESS;
}

public boolean getRAESS10() {
return RAESS10;
}

public boolean getRAESS11() {
return RAESS11;
}

public short getRAESS12() {
return RAESS12;
}

public boolean getRAESS13() {
return RAESS13;
}

public boolean getRAESS14() {
return RAESS14;
}

public boolean getRAESS15() {
return RAESS15;
}

public boolean getRAESS16() {
return RAESS16;
}

public boolean getRAESS17() {
return RAESS17;
}

public boolean getRAESS18() {
return RAESS18;
}

public boolean getRAESS19() {
return RAESS19;
}

public short getRAESS2() {
return RAESS2;
}

public boolean getRAESS20() {
return RAESS20;
}

public boolean getRAESS3() {
return RAESS3;
}

public short getRAESS4() {
return RAESS4;
}

public short getRAESS5() {
return RAESS5;
}

public boolean getRAESS6() {
return RAESS6;
}

public boolean getRAESS7() {
return RAESS7;
}

public short getRAESS8() {
return RAESS8;
}

public short getRAESS9() {
return RAESS9;
}

public short getRAEST() {
return RAEST;
}

public boolean getRAEST10() {
return RAEST10;
}

public short getRAEST11() {
return RAEST11;
}

public boolean getRAEST12() {
return RAEST12;
}

public boolean getRAEST13() {
return RAEST13;
}

public boolean getRAEST14() {
return RAEST14;
}

public boolean getRAEST15() {
return RAEST15;
}

public boolean getRAEST16() {
return RAEST16;
}

public boolean getRAEST17() {
return RAEST17;
}

public boolean getRAEST18() {
return RAEST18;
}

public boolean getRAEST19() {
return RAEST19;
}

public short getRAEST2() {
return RAEST2;
}

public boolean getRAEST20() {
return RAEST20;
}

public short getRAEST3() {
return RAEST3;
}

public short getRAEST4() {
return RAEST4;
}

public short getRAEST5() {
return RAEST5;
}

public short getRAEST6() {
return RAEST6;
}

public short getRAEST7() {
return RAEST7;
}

public short getRAEST8() {
return RAEST8;
}

public short getRAEST9() {
return RAEST9;
}

public byte getRAFAC1() {
return RAFAC1;
}

public byte getRAFAC2() {
return RAFAC2;
}

public byte getRAFAC3() {
return RAFAC3;
}

public byte getRAFAC4() {
return RAFAC4;
}

public byte getRAFAC5() {
return RAFAC5;
}

public byte getRAFAC6() {
return RAFAC6;
}

public byte getRAFAC96() {
return RAFAC96;
}

public byte getRAGAP() {
return RAGAP;
}

public byte getRAGAP10() {
return RAGAP10;
}

public byte getRAGAP11() {
return RAGAP11;
}

public byte getRAGAP12() {
return RAGAP12;
}

public byte getRAGAP13() {
return RAGAP13;
}

public byte getRAGAP14() {
return RAGAP14;
}

public byte getRAGAP15() {
return RAGAP15;
}

public byte getRAGAP16() {
return RAGAP16;
}

public byte getRAGAP17() {
return RAGAP17;
}

public boolean getRAGAP18() {
return RAGAP18;
}

public byte getRAGAP19() {
return RAGAP19;
}

public byte getRAGAP2() {
return RAGAP2;
}

public boolean getRAGAP20() {
return RAGAP20;
}

public byte getRAGAP3() {
return RAGAP3;
}

public byte getRAGAP4() {
return RAGAP4;
}

public byte getRAGAP5() {
return RAGAP5;
}

public byte getRAGAP6() {
return RAGAP6;
}

public byte getRAGAP7() {
return RAGAP7;
}

public byte getRAGAP8() {
return RAGAP8;
}

public byte getRAGAP9() {
return RAGAP9;
}

public byte getRALIS1() {
return RALIS1;
}

public byte getRALIS2() {
return RALIS2;
}

public byte getRALIS3() {
return RALIS3;
}

public byte getRALIS4() {
return RALIS4;
}

public byte getRALIS5() {
return RALIS5;
}

public byte getRALIS6() {
return RALIS6;
}

public byte getRALIS7() {
return RALIS7;
}

public byte getRALIS8() {
return RALIS8;
}

public byte getRALIS96() {
return RALIS96;
}

public byte getRALOOP10() {
return RALOOP10;
}

public short getRAMOA() {
return RAMOA;
}

public byte getRAMOT() {
return RAMOT;
}

public byte getRAMOY() {
return RAMOY;
}

public byte getRAMOYC() {
return RAMOYC;
}

public byte getRAOWN() {
return RAOWN;
}

public byte getRAOWN10() {
return RAOWN10;
}

public byte getRAOWN11() {
return RAOWN11;
}

public byte getRAOWN12() {
return RAOWN12;
}

public byte getRAOWN13() {
return RAOWN13;
}

public byte getRAOWN14() {
return RAOWN14;
}

public byte getRAOWN15() {
return RAOWN15;
}

public byte getRAOWN16() {
return RAOWN16;
}

public byte getRAOWN17() {
return RAOWN17;
}

public byte getRAOWN18() {
return RAOWN18;
}

public byte getRAOWN19() {
return RAOWN19;
}

public byte getRAOWN2() {
return RAOWN2;
}

public byte getRAOWN20() {
return RAOWN20;
}

public byte getRAOWN3() {
return RAOWN3;
}

public byte getRAOWN4() {
return RAOWN4;
}

public byte getRAOWN5() {
return RAOWN5;
}

public byte getRAOWN6() {
return RAOWN6;
}

public byte getRAOWN7() {
return RAOWN7;
}

public byte getRAOWN8() {
return RAOWN8;
}

public byte getRAOWN9() {
return RAOWN9;
}

public short getRAPAR() {
return RAPAR;
}

public byte getRAPEO() {
return RAPEO;
}

public byte getRAPRI() {
return RAPRI;
}

public byte getRAPRI10() {
return RAPRI10;
}

public byte getRAPRI10C() {
return RAPRI10C;
}

public byte getRAPRI11() {
return RAPRI11;
}

public byte getRAPRI11C() {
return RAPRI11C;
}

public byte getRAPRI12() {
return RAPRI12;
}

public byte getRAPRI12C() {
return RAPRI12C;
}

public byte getRAPRI13() {
return RAPRI13;
}

public byte getRAPRI13C() {
return RAPRI13C;
}

public byte getRAPRI14() {
return RAPRI14;
}

public byte getRAPRI14C() {
return RAPRI14C;
}

public byte getRAPRI15() {
return RAPRI15;
}

public byte getRAPRI15C() {
return RAPRI15C;
}

public byte getRAPRI16() {
return RAPRI16;
}

public byte getRAPRI16C() {
return RAPRI16C;
}

public byte getRAPRI17() {
return RAPRI17;
}

public byte getRAPRI17C() {
return RAPRI17C;
}

public byte getRAPRI18() {
return RAPRI18;
}

public byte getRAPRI18C() {
return RAPRI18C;
}

public byte getRAPRI19() {
return RAPRI19;
}

public byte getRAPRI19C() {
return RAPRI19C;
}

public byte getRAPRI2() {
return RAPRI2;
}

public byte getRAPRI20() {
return RAPRI20;
}

public byte getRAPRI20C() {
return RAPRI20C;
}

public byte getRAPRI2C() {
return RAPRI2C;
}

public byte getRAPRI3() {
return RAPRI3;
}

public byte getRAPRI3C() {
return RAPRI3C;
}

public byte getRAPRI4() {
return RAPRI4;
}

public byte getRAPRI4C() {
return RAPRI4C;
}

public short getRAPRI5() {
return RAPRI5;
}

public byte getRAPRI5C() {
return RAPRI5C;
}

public byte getRAPRI6() {
return RAPRI6;
}

public byte getRAPRI6C() {
return RAPRI6C;
}

public byte getRAPRI7() {
return RAPRI7;
}

public byte getRAPRI7C() {
return RAPRI7C;
}

public byte getRAPRI8() {
return RAPRI8;
}

public byte getRAPRI8C() {
return RAPRI8C;
}

public byte getRAPRI9() {
return RAPRI9;
}

public byte getRAPRI9C() {
return RAPRI9C;
}

public byte getRAPRIC() {
return RAPRIC;
}

public byte getRAREL1() {
return RAREL1;
}

public byte getRAREL2() {
return RAREL2;
}

public byte getRAREL3() {
return RAREL3;
}

public byte getRAREL4() {
return RAREL4;
}

public byte getRAREL5() {
return RAREL5;
}

public byte getRAREL6() {
return RAREL6;
}

public byte getRAREL7() {
return RAREL7;
}

public byte getRAREL8() {
return RAREL8;
}

public byte getRAREL9() {
return RAREL9;
}

public byte getRAROO() {
return RAROO;
}

public short getRASTB() {
return RASTB;
}

public short getRASTB10() {
return RASTB10;
}

public short getRASTB11() {
return RASTB11;
}

public short getRASTB12() {
return RASTB12;
}

public short getRASTB13() {
return RASTB13;
}

public short getRASTB14() {
return RASTB14;
}

public short getRASTB15() {
return RASTB15;
}

public short getRASTB16() {
return RASTB16;
}

public short getRASTB17() {
return RASTB17;
}

public short getRASTB18() {
return RASTB18;
}

public short getRASTB19() {
return RASTB19;
}

public short getRASTB2() {
return RASTB2;
}

public short getRASTB20() {
return RASTB20;
}

public short getRASTB3() {
return RASTB3;
}

public short getRASTB4() {
return RASTB4;
}

public short getRASTB5() {
return RASTB5;
}

public short getRASTB6() {
return RASTB6;
}

public short getRASTB7() {
return RASTB7;
}

public short getRASTB8() {
return RASTB8;
}

public short getRASTB9() {
return RASTB9;
}

public short getRASTLY10() {
return RASTLY10;
}

public short getRASTLY11() {
return RASTLY11;
}

public short getRASTLY12() {
return RASTLY12;
}

public short getRASTLY13() {
return RASTLY13;
}

public short getRASTLY14() {
return RASTLY14;
}

public short getRASTLY15() {
return RASTLY15;
}

public short getRASTLY16() {
return RASTLY16;
}

public short getRASTLY17() {
return RASTLY17;
}

public short getRASTLY18() {
return RASTLY18;
}

public short getRASTLY19() {
return RASTLY19;
}

public short getRASTLY20() {
return RASTLY20;
}

public short getRASTLYR() {
return RASTLYR;
}

public short getRASTLYR2() {
return RASTLYR2;
}

public short getRASTLYR3() {
return RASTLYR3;
}

public short getRASTLYR4() {
return RASTLYR4;
}

public short getRASTLYR5() {
return RASTLYR5;
}

public short getRASTLYR6() {
return RASTLYR6;
}

public short getRASTLYR7() {
return RASTLYR7;
}

public short getRASTLYR8() {
return RASTLYR8;
}

public short getRASTLYR9() {
return RASTLYR9;
}

public short getRASTP() {
return RASTP;
}

public short getRASTP10() {
return RASTP10;
}

public short getRASTP11() {
return RASTP11;
}

public short getRASTP12() {
return RASTP12;
}

public short getRASTP13() {
return RASTP13;
}

public short getRASTP14() {
return RASTP14;
}

public short getRASTP15() {
return RASTP15;
}

public short getRASTP16() {
return RASTP16;
}

public short getRASTP17() {
return RASTP17;
}

public short getRASTP18() {
return RASTP18;
}

public short getRASTP19() {
return RASTP19;
}

public short getRASTP2() {
return RASTP2;
}

public short getRASTP20() {
return RASTP20;
}

public short getRASTP3() {
return RASTP3;
}

public short getRASTP4() {
return RASTP4;
}

public short getRASTP5() {
return RASTP5;
}

public short getRASTP6() {
return RASTP6;
}

public short getRASTP7() {
return RASTP7;
}

public short getRASTP8() {
return RASTP8;
}

public short getRASTP9() {
return RASTP9;
}

public byte getRASTT10() {
return RASTT10;
}

public byte getRASTT11() {
return RASTT11;
}

public byte getRASTT12() {
return RASTT12;
}

public byte getRASTT13() {
return RASTT13;
}

public byte getRASTT14() {
return RASTT14;
}

public byte getRASTT15() {
return RASTT15;
}

public byte getRASTT16() {
return RASTT16;
}

public byte getRASTT17() {
return RASTT17;
}

public byte getRASTT18() {
return RASTT18;
}

public byte getRASTT19() {
return RASTT19;
}

public byte getRASTT2() {
return RASTT2;
}

public byte getRASTT20() {
return RASTT20;
}

public byte getRASTT3() {
return RASTT3;
}

public byte getRASTT4() {
return RASTT4;
}

public byte getRASTT5() {
return RASTT5;
}

public byte getRASTT6() {
return RASTT6;
}

public byte getRASTT7() {
return RASTT7;
}

public byte getRASTT8() {
return RASTT8;
}

public byte getRASTT9() {
return RASTT9;
}

public short getRASTY() {
return RASTY;
}

public short getRASTY10() {
return RASTY10;
}

public short getRASTY11() {
return RASTY11;
}

public short getRASTY12() {
return RASTY12;
}

public short getRASTY13() {
return RASTY13;
}

public short getRASTY14() {
return RASTY14;
}

public short getRASTY15() {
return RASTY15;
}

public short getRASTY16() {
return RASTY16;
}

public short getRASTY17() {
return RASTY17;
}

public short getRASTY18() {
return RASTY18;
}

public short getRASTY19() {
return RASTY19;
}

public short getRASTY2() {
return RASTY2;
}

public short getRASTY20() {
return RASTY20;
}

public short getRASTY3() {
return RASTY3;
}

public short getRASTY4() {
return RASTY4;
}

public short getRASTY5() {
return RASTY5;
}

public short getRASTY6() {
return RASTY6;
}

public short getRASTY7() {
return RASTY7;
}

public short getRASTY8() {
return RASTY8;
}

public short getRASTY9() {
return RASTY9;
}

public byte getRCAAL() {
return RCAAL;
}

public byte getRCAAL2() {
return RCAAL2;
}

public byte getRCABT() {
return RCABT;
}

public short getRCADD() {
return RCADD;
}

public short getRCADD2() {
return RCADD2;
}

public byte getRCADP() {
return RCADP;
}

public short getRCADT() {
return RCADT;
}

public short getRCADT2() {
return RCADT2;
}

public short getRCADY() {
return RCADY;
}

public boolean getRCADY10() {
return RCADY10;
}

public boolean getRCADY11() {
return RCADY11;
}

public boolean getRCADY12() {
return RCADY12;
}

public boolean getRCADY13() {
return RCADY13;
}

public short getRCADY2() {
return RCADY2;
}

public short getRCADY3() {
return RCADY3;
}

public short getRCADY4() {
return RCADY4;
}

public short getRCADY5() {
return RCADY5;
}

public short getRCADY6() {
return RCADY6;
}

public boolean getRCADY7() {
return RCADY7;
}

public short getRCADY8() {
return RCADY8;
}

public boolean getRCADY9() {
return RCADY9;
}

public byte getRCALI() {
return RCALI;
}

public byte getRCALI2() {
return RCALI2;
}

public byte getRCALI3() {
return RCALI3;
}

public byte getRCALI4() {
return RCALI4;
}

public byte getRCALI5() {
return RCALI5;
}

public byte getRCALI6() {
return RCALI6;
}

public byte getRCALO() {
return RCALO;
}

public byte getRCALV() {
return RCALV;
}

public boolean getRCALV10() {
return RCALV10;
}

public boolean getRCALV11() {
return RCALV11;
}

public boolean getRCALV12() {
return RCALV12;
}

public boolean getRCALV13() {
return RCALV13;
}

public byte getRCALV2() {
return RCALV2;
}

public byte getRCALV21() {
return RCALV21;
}

public byte getRCALV22() {
return RCALV22;
}

public byte getRCALV3() {
return RCALV3;
}

public byte getRCALV4() {
return RCALV4;
}

public boolean getRCALV5() {
return RCALV5;
}

public boolean getRCALV6() {
return RCALV6;
}

public byte getRCALV7() {
return RCALV7;
}

public boolean getRCALV8() {
return RCALV8;
}

public boolean getRCALV9() {
return RCALV9;
}

public byte getRCANO() {
return RCANO;
}

public byte getRCASX() {
return RCASX;
}

public byte getRCASX2() {
return RCASX2;
}

public short getRCAYR() {
return RCAYR;
}

public short getRCAYR2() {
return RCAYR2;
}

public byte getRCBNO() {
return RCBNO;
}

public byte getRCBTH() {
return RCBTH;
}

public byte getRCCHC() {
return RCCHC;
}

public byte getRCCHC10() {
return RCCHC10;
}

public byte getRCCHC11() {
return RCCHC11;
}

public boolean getRCCHC12() {
return RCCHC12;
}

public boolean getRCCHC13() {
return RCCHC13;
}

public byte getRCCHC2() {
return RCCHC2;
}

public byte getRCCHC3() {
return RCCHC3;
}

public byte getRCCHC4() {
return RCCHC4;
}

public byte getRCCHC5() {
return RCCHC5;
}

public byte getRCCHC6() {
return RCCHC6;
}

public byte getRCCHC7() {
return RCCHC7;
}

public byte getRCCHC8() {
return RCCHC8;
}

public byte getRCCHC9() {
return RCCHC9;
}

public short getRCCHDY10() {
return RCCHDY10;
}

public short getRCCHDY11() {
return RCCHDY11;
}

public short getRCCHDY12() {
return RCCHDY12;
}

public short getRCCHDY13() {
return RCCHDY13;
}

public short getRCCHDYR() {
return RCCHDYR;
}

public short getRCCHDYR2() {
return RCCHDYR2;
}

public short getRCCHDYR3() {
return RCCHDYR3;
}

public short getRCCHDYR4() {
return RCCHDYR4;
}

public short getRCCHDYR5() {
return RCCHDYR5;
}

public short getRCCHDYR6() {
return RCCHDYR6;
}

public short getRCCHDYR7() {
return RCCHDYR7;
}

public short getRCCHDYR8() {
return RCCHDYR8;
}

public short getRCCHDYR9() {
return RCCHDYR9;
}

public byte getRCCHSEX() {
return RCCHSEX;
}

public byte getRCCHSEX2() {
return RCCHSEX2;
}

public byte getRCCHSEX3() {
return RCCHSEX3;
}

public byte getRCCHSEX4() {
return RCCHSEX4;
}

public byte getRCCHSEX5() {
return RCCHSEX5;
}

public byte getRCCHSEX6() {
return RCCHSEX6;
}

public byte getRCCHSEX7() {
return RCCHSEX7;
}

public byte getRCCHSEX8() {
return RCCHSEX8;
}

public byte getRCCHSEX9() {
return RCCHSEX9;
}

public byte getRCCHSX10() {
return RCCHSX10;
}

public byte getRCCHSX11() {
return RCCHSX11;
}

public boolean getRCCHSX12() {
return RCCHSX12;
}

public boolean getRCCHSX13() {
return RCCHSX13;
}

public byte getRCDBC() {
return RCDBC;
}

public boolean getRCDBC10() {
return RCDBC10;
}

public boolean getRCDBC11() {
return RCDBC11;
}

public boolean getRCDBC12() {
return RCDBC12;
}

public boolean getRCDBC13() {
return RCDBC13;
}

public byte getRCDBC2() {
return RCDBC2;
}

public byte getRCDBC3() {
return RCDBC3;
}

public byte getRCDBC4() {
return RCDBC4;
}

public byte getRCDBC5() {
return RCDBC5;
}

public byte getRCDBC6() {
return RCDBC6;
}

public byte getRCDBC7() {
return RCDBC7;
}

public byte getRCDBC8() {
return RCDBC8;
}

public byte getRCDBC9() {
return RCDBC9;
}

public byte getRCDNO() {
return RCDNO;
}

public short getRCDYY() {
return RCDYY;
}

public boolean getRCDYY10() {
return RCDYY10;
}

public boolean getRCDYY11() {
return RCDYY11;
}

public boolean getRCDYY12() {
return RCDYY12;
}

public boolean getRCDYY13() {
return RCDYY13;
}

public short getRCDYY2() {
return RCDYY2;
}

public short getRCDYY3() {
return RCDYY3;
}

public short getRCDYY4() {
return RCDYY4;
}

public boolean getRCDYY5() {
return RCDYY5;
}

public boolean getRCDYY6() {
return RCDYY6;
}

public boolean getRCDYY7() {
return RCDYY7;
}

public boolean getRCDYY8() {
return RCDYY8;
}

public boolean getRCDYY9() {
return RCDYY9;
}

public byte getRCEND() {
return RCEND;
}

public boolean getRCEND10() {
return RCEND10;
}

public boolean getRCEND11() {
return RCEND11;
}

public boolean getRCEND12() {
return RCEND12;
}

public boolean getRCEND13() {
return RCEND13;
}

public byte getRCEND2() {
return RCEND2;
}

public byte getRCEND3() {
return RCEND3;
}

public byte getRCEND4() {
return RCEND4;
}

public byte getRCEND5() {
return RCEND5;
}

public boolean getRCEND6() {
return RCEND6;
}

public boolean getRCEND7() {
return RCEND7;
}

public boolean getRCEND8() {
return RCEND8;
}

public boolean getRCEND9() {
return RCEND9;
}

public byte getRCFAT() {
return RCFAT;
}

public byte getRCFNO() {
return RCFNO;
}

public byte getRCFOST() {
return RCFOST;
}

public byte getRCFOYR() {
return RCFOYR;
}

public byte getRCLIV() {
return RCLIV;
}

public byte getRCLIV2() {
return RCLIV2;
}

public byte getRCLIV3() {
return RCLIV3;
}

public byte getRCLIV4() {
return RCLIV4;
}

public byte getRCLIV5() {
return RCLIV5;
}

public boolean getRCLIV6() {
return RCLIV6;
}

public byte getRCLVF() {
return RCLVF;
}

public byte getRCLVF10() {
return RCLVF10;
}

public byte getRCLVF11() {
return RCLVF11;
}

public boolean getRCLVF12() {
return RCLVF12;
}

public boolean getRCLVF13() {
return RCLVF13;
}

public byte getRCLVF2() {
return RCLVF2;
}

public byte getRCLVF3() {
return RCLVF3;
}

public byte getRCLVF4() {
return RCLVF4;
}

public byte getRCLVF5() {
return RCLVF5;
}

public byte getRCLVF6() {
return RCLVF6;
}

public byte getRCLVF7() {
return RCLVF7;
}

public byte getRCLVF8() {
return RCLVF8;
}

public byte getRCLVF9() {
return RCLVF9;
}

public short getRCMDT() {
return RCMDT;
}

public short getRCMDT10() {
return RCMDT10;
}

public short getRCMDT11() {
return RCMDT11;
}

public short getRCMDT12() {
return RCMDT12;
}

public boolean getRCMDT13() {
return RCMDT13;
}

public short getRCMDT2() {
return RCMDT2;
}

public short getRCMDT3() {
return RCMDT3;
}

public short getRCMDT4() {
return RCMDT4;
}

public short getRCMDT5() {
return RCMDT5;
}

public short getRCMDT6() {
return RCMDT6;
}

public short getRCMDT7() {
return RCMDT7;
}

public short getRCMDT8() {
return RCMDT8;
}

public short getRCMDT9() {
return RCMDT9;
}

public short getRCNDY() {
return RCNDY;
}

public short getRCNDY2() {
return RCNDY2;
}

public short getRCNDY3() {
return RCNDY3;
}

public short getRCNDY4() {
return RCNDY4;
}

public short getRCNDY5() {
return RCNDY5;
}

public short getRCNDY6() {
return RCNDY6;
}

public byte getRCREL() {
return RCREL;
}

public boolean getRCREL10() {
return RCREL10;
}

public boolean getRCREL11() {
return RCREL11;
}

public boolean getRCREL12() {
return RCREL12;
}

public boolean getRCREL13() {
return RCREL13;
}

public byte getRCREL2() {
return RCREL2;
}

public byte getRCREL3() {
return RCREL3;
}

public byte getRCREL4() {
return RCREL4;
}

public byte getRCREL5() {
return RCREL5;
}

public byte getRCREL6() {
return RCREL6;
}

public byte getRCREL7() {
return RCREL7;
}

public byte getRCREL8() {
return RCREL8;
}

public byte getRCREL9() {
return RCREL9;
}

public byte getRCRELC10() {
return RCRELC10;
}

public boolean getRCRELC11() {
return RCRELC11;
}

public boolean getRCRELC12() {
return RCRELC12;
}

public boolean getRCRELC13() {
return RCRELC13;
}

public byte getRCRELCH() {
return RCRELCH;
}

public byte getRCRELCH2() {
return RCRELCH2;
}

public byte getRCRELCH3() {
return RCRELCH3;
}

public byte getRCRELCH4() {
return RCRELCH4;
}

public byte getRCRELCH5() {
return RCRELCH5;
}

public byte getRCRELCH6() {
return RCRELCH6;
}

public byte getRCRELCH7() {
return RCRELCH7;
}

public byte getRCRELCH8() {
return RCRELCH8;
}

public byte getRCRELCH9() {
return RCRELCH9;
}

public byte getRCRLC() {
return RCRLC;
}

public boolean getRCRLC10() {
return RCRLC10;
}

public boolean getRCRLC11() {
return RCRLC11;
}

public boolean getRCRLC12() {
return RCRLC12;
}

public boolean getRCRLC13() {
return RCRLC13;
}

public byte getRCRLC2() {
return RCRLC2;
}

public byte getRCRLC3() {
return RCRLC3;
}

public byte getRCRLC4() {
return RCRLC4;
}

public byte getRCRLC5() {
return RCRLC5;
}

public byte getRCRLC6() {
return RCRLC6;
}

public byte getRCRLC7() {
return RCRLC7;
}

public byte getRCRLC8() {
return RCRLC8;
}

public byte getRCRLC9() {
return RCRLC9;
}

public byte getRCSEX() {
return RCSEX;
}

public byte getRCSEX2() {
return RCSEX2;
}

public byte getRCSEX3() {
return RCSEX3;
}

public byte getRCSEX4() {
return RCSEX4;
}

public byte getRCSEX5() {
return RCSEX5;
}

public boolean getRCSEX6() {
return RCSEX6;
}

public byte getRCSXC() {
return RCSXC;
}

public boolean getRCSXC10() {
return RCSXC10;
}

public boolean getRCSXC11() {
return RCSXC11;
}

public boolean getRCSXC12() {
return RCSXC12;
}

public boolean getRCSXC13() {
return RCSXC13;
}

public byte getRCSXC2() {
return RCSXC2;
}

public byte getRCSXC3() {
return RCSXC3;
}

public byte getRCSXC4() {
return RCSXC4;
}

public byte getRCSXC5() {
return RCSXC5;
}

public byte getRCSXC6() {
return RCSXC6;
}

public boolean getRCSXC7() {
return RCSXC7;
}

public boolean getRCSXC8() {
return RCSXC8;
}

public boolean getRCSXC9() {
return RCSXC9;
}

public byte getRCSXN() {
return RCSXN;
}

public boolean getRCSXN10() {
return RCSXN10;
}

public boolean getRCSXN11() {
return RCSXN11;
}

public boolean getRCSXN12() {
return RCSXN12;
}

public boolean getRCSXN13() {
return RCSXN13;
}

public boolean getRCSXN2() {
return RCSXN2;
}

public byte getRCSXN3() {
return RCSXN3;
}

public byte getRCSXN4() {
return RCSXN4;
}

public boolean getRCSXN5() {
return RCSXN5;
}

public boolean getRCSXN6() {
return RCSXN6;
}

public boolean getRCSXN7() {
return RCSXN7;
}

public boolean getRCSXN8() {
return RCSXN8;
}

public boolean getRCSXN9() {
return RCSXN9;
}

public byte getRCTIM() {
return RCTIM;
}

public byte getRCTIM10() {
return RCTIM10;
}

public byte getRCTIM11() {
return RCTIM11;
}

public byte getRCTIM12() {
return RCTIM12;
}

public boolean getRCTIM13() {
return RCTIM13;
}

public byte getRCTIM2() {
return RCTIM2;
}

public byte getRCTIM3() {
return RCTIM3;
}

public byte getRCTIM4() {
return RCTIM4;
}

public byte getRCTIM5() {
return RCTIM5;
}

public byte getRCTIM6() {
return RCTIM6;
}

public byte getRCTIM7() {
return RCTIM7;
}

public byte getRCTIM8() {
return RCTIM8;
}

public byte getRCTIM9() {
return RCTIM9;
}

public short getRCYRS() {
return RCYRS;
}

public short getRCYRS2() {
return RCYRS2;
}

public short getRCYRS3() {
return RCYRS3;
}

public short getRCYRS4() {
return RCYRS4;
}

public short getRCYRS5() {
return RCYRS5;
}

public short getRCYRS6() {
return RCYRS6;
}

public double getRETAINEDDB_06() {
return RETAINEDDB_06;
}

public double getRETAINEDDB_SPA() {
return RETAINEDDB_SPA;
}

public double getRETAINEDDC_06() {
return RETAINEDDC_06;
}

public double getRETAINEDDC_SPA() {
return RETAINEDDC_SPA;
}

public double getRETROWGT() {
return RETROWGT;
}

public byte getRHCCLC() {
return RHCCLC;
}

public byte getRHCCLD() {
return RHCCLD;
}

public byte getRHCCLE() {
return RHCCLE;
}

public byte getRHCCLF() {
return RHCCLF;
}

public byte getRHCCLG() {
return RHCCLG;
}

public byte getRHCCLH() {
return RHCCLH;
}

public byte getRHCCLJ() {
return RHCCLJ;
}

public short getRHCCYA() {
return RHCCYA;
}

public short getRHCCYB() {
return RHCCYB;
}

public short getRHCCYC() {
return RHCCYC;
}

public short getRHCCYD() {
return RHCCYD;
}

public short getRHCCYE() {
return RHCCYE;
}

public short getRHCCYF() {
return RHCCYF;
}

public short getRHCCYG() {
return RHCCYG;
}

public short getRHCCYH() {
return RHCCYH;
}

public short getRHCCYJ() {
return RHCCYJ;
}

public short getRHCCYK() {
return RHCCYK;
}

public short getRHCCYL() {
return RHCCYL;
}

public short getRHCCYM() {
return RHCCYM;
}

public boolean getRHCCYN() {
return RHCCYN;
}

public short getRHCCYP() {
return RHCCYP;
}

public short getRHCCYQ() {
return RHCCYQ;
}

public byte getRHCIA() {
return RHCIA;
}

public byte getRHCIB() {
return RHCIB;
}

public byte getRHCIC() {
return RHCIC;
}

public byte getRHCID() {
return RHCID;
}

public byte getRHCIE() {
return RHCIE;
}

public byte getRHCIF() {
return RHCIF;
}

public byte getRHCIG1() {
return RHCIG1;
}

public byte getRHCIG10() {
return RHCIG10;
}

public byte getRHCIG10M() {
return RHCIG10M;
}

public byte getRHCIG11() {
return RHCIG11;
}

public byte getRHCIG11M() {
return RHCIG11M;
}

public byte getRHCIG12() {
return RHCIG12;
}

public byte getRHCIG12M() {
return RHCIG12M;
}

public byte getRHCIG13() {
return RHCIG13;
}

public byte getRHCIG13M() {
return RHCIG13M;
}

public byte getRHCIG14() {
return RHCIG14;
}

public byte getRHCIG14M() {
return RHCIG14M;
}

public byte getRHCIG1M() {
return RHCIG1M;
}

public byte getRHCIG2() {
return RHCIG2;
}

public byte getRHCIG2M() {
return RHCIG2M;
}

public byte getRHCIG3() {
return RHCIG3;
}

public byte getRHCIG3M() {
return RHCIG3M;
}

public byte getRHCIG4() {
return RHCIG4;
}

public byte getRHCIG4M() {
return RHCIG4M;
}

public byte getRHCIG5() {
return RHCIG5;
}

public byte getRHCIG51M() {
return RHCIG51M;
}

public byte getRHCIG52M() {
return RHCIG52M;
}

public byte getRHCIG53M() {
return RHCIG53M;
}

public byte getRHCIG54M() {
return RHCIG54M;
}

public byte getRHCIG55M() {
return RHCIG55M;
}

public byte getRHCIG56M() {
return RHCIG56M;
}

public byte getRHCIG57M() {
return RHCIG57M;
}

public byte getRHCIG5M() {
return RHCIG5M;
}

public byte getRHCIG6() {
return RHCIG6;
}

public byte getRHCIG6M() {
return RHCIG6M;
}

public byte getRHCIG7() {
return RHCIG7;
}

public byte getRHCIG7M() {
return RHCIG7M;
}

public byte getRHCIG8() {
return RHCIG8;
}

public byte getRHCIG85M() {
return RHCIG85M;
}

public byte getRHCIG86M() {
return RHCIG86M;
}

public byte getRHCIG8M() {
return RHCIG8M;
}

public byte getRHCIG9() {
return RHCIG9;
}

public byte getRHCIG95() {
return RHCIG95;
}

public byte getRHCIG96() {
return RHCIG96;
}

public byte getRHCIG9M() {
return RHCIG9M;
}

public short getRHHFY() {
return RHHFY;
}

public byte getRHHNO() {
return RHHNO;
}

public byte getRHHPS() {
return RHHPS;
}

public byte getRHHPY() {
return RHHPY;
}

public byte getRHHRT() {
return RHHRT;
}

public short getRHHST() {
return RHHST;
}

public byte getRHHYE() {
return RHHYE;
}

public short getRHHYY() {
return RHHYY;
}

public short getRHINA() {
return RHINA;
}

public byte getRHINJ() {
return RHINJ;
}

public byte getRHMEB() {
return RHMEB;
}

public byte getRHMEN() {
return RHMEN;
}

public byte getRHOVE() {
return RHOVE;
}

public short getRHOVY() {
return RHOVY;
}

public byte getRHPBB() {
return RHPBB;
}

public byte getRHPBC1() {
return RHPBC1;
}

public byte getRHPBC10() {
return RHPBC10;
}

public byte getRHPBC2() {
return RHPBC2;
}

public byte getRHPBC3() {
return RHPBC3;
}

public byte getRHPBC4() {
return RHPBC4;
}

public byte getRHPBC5() {
return RHPBC5;
}

public byte getRHPBC6() {
return RHPBC6;
}

public byte getRHPBC7() {
return RHPBC7;
}

public byte getRHPBC8() {
return RHPBC8;
}

public byte getRHPBC9() {
return RHPBC9;
}

public byte getRHPBC96() {
return RHPBC96;
}

public byte getRHPBD1() {
return RHPBD1;
}

public byte getRHPBD2() {
return RHPBD2;
}

public byte getRHPBD3() {
return RHPBD3;
}

public byte getRHPBD4() {
return RHPBD4;
}

public byte getRHPBD5() {
return RHPBD5;
}

public byte getRHPBD6() {
return RHPBD6;
}

public byte getRHPBD7() {
return RHPBD7;
}

public byte getRHPBD8() {
return RHPBD8;
}

public byte getRHPBD9() {
return RHPBD9;
}

public byte getRHPBE1() {
return RHPBE1;
}

public byte getRHPBE1M() {
return RHPBE1M;
}

public byte getRHPBE2() {
return RHPBE2;
}

public byte getRHPBE2M() {
return RHPBE2M;
}

public byte getRHPBE3() {
return RHPBE3;
}

public byte getRHPBE3M() {
return RHPBE3M;
}

public byte getRHPBE4() {
return RHPBE4;
}

public byte getRHPBE4M() {
return RHPBE4M;
}

public byte getRHPBE5() {
return RHPBE5;
}

public byte getRHPBE51M() {
return RHPBE51M;
}

public byte getRHPBE52M() {
return RHPBE52M;
}

public byte getRHPBE5M() {
return RHPBE5M;
}

public byte getRHPBE6() {
return RHPBE6;
}

public byte getRHPBE6M() {
return RHPBE6M;
}

public byte getRHPBE7() {
return RHPBE7;
}

public byte getRHPBE7M() {
return RHPBE7M;
}

public byte getRHPBE85M() {
return RHPBE85M;
}

public byte getRHPBE86M() {
return RHPBE86M;
}

public byte getRHPBE95() {
return RHPBE95;
}

public byte getRHPBE96() {
return RHPBE96;
}

public byte getRHPBX1() {
return RHPBX1;
}

public byte getRHPBX1M() {
return RHPBX1M;
}

public byte getRHPBX2() {
return RHPBX2;
}

public byte getRHPBX2M() {
return RHPBX2M;
}

public byte getRHPBX3() {
return RHPBX3;
}

public byte getRHPBX3M() {
return RHPBX3M;
}

public byte getRHPBX4() {
return RHPBX4;
}

public byte getRHPBX4M() {
return RHPBX4M;
}

public byte getRHPBX5() {
return RHPBX5;
}

public byte getRHPBX51M() {
return RHPBX51M;
}

public byte getRHPBX52M() {
return RHPBX52M;
}

public byte getRHPBX53M() {
return RHPBX53M;
}

public byte getRHPBX54M() {
return RHPBX54M;
}

public byte getRHPBX55M() {
return RHPBX55M;
}

public byte getRHPBX56M() {
return RHPBX56M;
}

public byte getRHPBX57M() {
return RHPBX57M;
}

public byte getRHPBX5M() {
return RHPBX5M;
}

public byte getRHPBX6() {
return RHPBX6;
}

public byte getRHPBX6M() {
return RHPBX6M;
}

public byte getRHPBX7() {
return RHPBX7;
}

public byte getRHPBX7M() {
return RHPBX7M;
}

public byte getRHPBX8() {
return RHPBX8;
}

public byte getRHPBX85M() {
return RHPBX85M;
}

public byte getRHPBX86M() {
return RHPBX86M;
}

public byte getRHPBX8M() {
return RHPBX8M;
}

public byte getRHPBX95() {
return RHPBX95;
}

public byte getRHPBX96() {
return RHPBX96;
}

public byte getRHPEE() {
return RHPEE;
}

public byte getRHPER() {
return RHPER;
}

public byte getRHPERC() {
return RHPERC;
}

public short getRHPEY() {
return RHPEY;
}

public byte getRHSKA() {
return RHSKA;
}

public byte getRHSMA() {
return RHSMA;
}

public byte getRHSMB() {
return RHSMB;
}

public short getRHSMF() {
return RHSMF;
}

public byte getRHSMK() {
return RHSMK;
}

public short getRHSML() {
return RHSML;
}

public byte getRHSMS() {
return RHSMS;
}

public byte getRHSMT1() {
return RHSMT1;
}

public byte getRHSMT2() {
return RHSMT2;
}

public byte getRHSMT3() {
return RHSMT3;
}

public byte getRHSMT4() {
return RHSMT4;
}

public byte getRHSMT5() {
return RHSMT5;
}

public byte getRHSMT6() {
return RHSMT6;
}

public byte getRHSMT7() {
return RHSMT7;
}

public byte getRHSMT8() {
return RHSMT8;
}

public byte getRHSMT96() {
return RHSMT96;
}

public byte getRHSMX() {
return RHSMX;
}

public byte getRHSMY() {
return RHSMY;
}

public byte getROIMP() {
return ROIMP;
}

public byte getROIMP2() {
return ROIMP2;
}

public byte getROIMP3() {
return ROIMP3;
}

public short getROOTY() {
return ROOTY;
}

public short getROOTY2() {
return ROOTY2;
}

public short getROOTY3() {
return ROOTY3;
}

public byte getROSC() {
return ROSC;
}

public byte getRPCHK() {
return RPCHK;
}

public byte getRPCHK2() {
return RPCHK2;
}

public byte getRPCHK3() {
return RPCHK3;
}

public byte getRPCHK4() {
return RPCHK4;
}

public boolean getRPCHK5() {
return RPCHK5;
}

public boolean getRPCHK6() {
return RPCHK6;
}

public boolean getRPCHK7() {
return RPCHK7;
}

public byte getRPDIV() {
return RPDIV;
}

public byte getRPDIV2() {
return RPDIV2;
}

public byte getRPDIV3() {
return RPDIV3;
}

public byte getRPDIV4() {
return RPDIV4;
}

public boolean getRPDIV5() {
return RPDIV5;
}

public boolean getRPDIV6() {
return RPDIV6;
}

public boolean getRPDIV7() {
return RPDIV7;
}

public short getRPDIY() {
return RPDIY;
}

public short getRPDIY2() {
return RPDIY2;
}

public short getRPDIY3() {
return RPDIY3;
}

public short getRPDIY4() {
return RPDIY4;
}

public boolean getRPDIY5() {
return RPDIY5;
}

public boolean getRPDIY6() {
return RPDIY6;
}

public boolean getRPDIY7() {
return RPDIY7;
}

public short getRPDYR() {
return RPDYR;
}

public short getRPDYR2() {
return RPDYR2;
}

public short getRPDYR3() {
return RPDYR3;
}

public short getRPDYR4() {
return RPDYR4;
}

public short getRPDYR5() {
return RPDYR5;
}

public boolean getRPDYR6() {
return RPDYR6;
}

public short getRPDYR7() {
return RPDYR7;
}

public short getRPEYR() {
return RPEYR;
}

public short getRPEYR2() {
return RPEYR2;
}

public short getRPEYR3() {
return RPEYR3;
}

public short getRPEYR4() {
return RPEYR4;
}

public short getRPEYR5() {
return RPEYR5;
}

public short getRPEYR6() {
return RPEYR6;
}

public short getRPEYR7() {
return RPEYR7;
}

public byte getRPFIN() {
return RPFIN;
}

public byte getRPFIN1C() {
return RPFIN1C;
}

public byte getRPFIN2() {
return RPFIN2;
}

public byte getRPFIN2C() {
return RPFIN2C;
}

public byte getRPFIN3() {
return RPFIN3;
}

public byte getRPFIN3C() {
return RPFIN3C;
}

public byte getRPFIN4() {
return RPFIN4;
}

public boolean getRPFIN5() {
return RPFIN5;
}

public boolean getRPFIN6() {
return RPFIN6;
}

public boolean getRPFIN7() {
return RPFIN7;
}

public byte getRPINB() {
return RPINB;
}

public short getRPLIV() {
return RPLIV;
}

public short getRPLIV2() {
return RPLIV2;
}

public short getRPLIV3() {
return RPLIV3;
}

public short getRPLIV4() {
return RPLIV4;
}

public short getRPLIV5() {
return RPLIV5;
}

public short getRPLIV6() {
return RPLIV6;
}

public short getRPLIV7() {
return RPLIV7;
}

public byte getRPLTR() {
return RPLTR;
}

public byte getRPLTR2() {
return RPLTR2;
}

public byte getRPLTR3() {
return RPLTR3;
}

public byte getRPLTR4() {
return RPLTR4;
}

public byte getRPLTR5() {
return RPLTR5;
}

public boolean getRPLTR6() {
return RPLTR6;
}

public boolean getRPLTR7() {
return RPLTR7;
}

public byte getRPMAR() {
return RPMAR;
}

public byte getRPMAR2() {
return RPMAR2;
}

public byte getRPMAR3() {
return RPMAR3;
}

public byte getRPMAR4() {
return RPMAR4;
}

public byte getRPMAR5() {
return RPMAR5;
}

public byte getRPMAR6() {
return RPMAR6;
}

public byte getRPMAR7() {
return RPMAR7;
}

public byte getRPMARST() {
return RPMARST;
}

public byte getRPMARST2() {
return RPMARST2;
}

public byte getRPMARST3() {
return RPMARST3;
}

public byte getRPMARST4() {
return RPMARST4;
}

public byte getRPMARST5() {
return RPMARST5;
}

public byte getRPMARST6() {
return RPMARST6;
}

public byte getRPMARST7() {
return RPMARST7;
}

public byte getRPMOR() {
return RPMOR;
}

public byte getRPMOR2() {
return RPMOR2;
}

public byte getRPMOR3() {
return RPMOR3;
}

public byte getRPMOR4() {
return RPMOR4;
}

public byte getRPMOR5() {
return RPMOR5;
}

public byte getRPMOR6() {
return RPMOR6;
}

public boolean getRPMOR7() {
return RPMOR7;
}

public short getRPMYR() {
return RPMYR;
}

public short getRPMYR2() {
return RPMYR2;
}

public short getRPMYR3() {
return RPMYR3;
}

public short getRPMYR4() {
return RPMYR4;
}

public short getRPMYR5() {
return RPMYR5;
}

public boolean getRPMYR6() {
return RPMYR6;
}

public boolean getRPMYR7() {
return RPMYR7;
}

public byte getRPNCA() {
return RPNCA;
}

public short getRPNCB() {
return RPNCB;
}

public short getRPNCB2() {
return RPNCB2;
}

public short getRPNCB3() {
return RPNCB3;
}

public short getRPNCB4() {
return RPNCB4;
}

public short getRPNCB5() {
return RPNCB5;
}

public short getRPNCB6() {
return RPNCB6;
}

public short getRPNCB7() {
return RPNCB7;
}

public short getRPNCB8() {
return RPNCB8;
}

public short getRPNCB9() {
return RPNCB9;
}

public byte getRPNCE() {
return RPNCE;
}

public byte getRPNCE2() {
return RPNCE2;
}

public byte getRPNCE3() {
return RPNCE3;
}

public byte getRPNCE4() {
return RPNCE4;
}

public boolean getRPNCE5() {
return RPNCE5;
}

public boolean getRPNCE6() {
return RPNCE6;
}

public boolean getRPNCE7() {
return RPNCE7;
}

public boolean getRPNCE8() {
return RPNCE8;
}

public boolean getRPNCE9() {
return RPNCE9;
}

public short getRPNCF() {
return RPNCF;
}

public short getRPNCF2() {
return RPNCF2;
}

public short getRPNCF3() {
return RPNCF3;
}

public short getRPNCF4() {
return RPNCF4;
}

public short getRPNCF5() {
return RPNCF5;
}

public short getRPNCF6() {
return RPNCF6;
}

public short getRPNCF7() {
return RPNCF7;
}

public boolean getRPNCF8() {
return RPNCF8;
}

public short getRPNCF9() {
return RPNCF9;
}

public byte getRPNCH() {
return RPNCH;
}

public byte getRPNCH2() {
return RPNCH2;
}

public byte getRPNCH3() {
return RPNCH3;
}

public byte getRPNCH4() {
return RPNCH4;
}

public byte getRPNCH5() {
return RPNCH5;
}

public byte getRPNCH6() {
return RPNCH6;
}

public boolean getRPNCH7() {
return RPNCH7;
}

public boolean getRPNCH8() {
return RPNCH8;
}

public boolean getRPNCH9() {
return RPNCH9;
}

public byte getRPREL() {
return RPREL;
}

public byte getRPREL2() {
return RPREL2;
}

public byte getRPREL3() {
return RPREL3;
}

public byte getRPREL4() {
return RPREL4;
}

public byte getRPREL5() {
return RPREL5;
}

public boolean getRPREL6() {
return RPREL6;
}

public boolean getRPREL7() {
return RPREL7;
}

public byte getRPSTL() {
return RPSTL;
}

public byte getRPSTL2() {
return RPSTL2;
}

public byte getRPSTL3() {
return RPSTL3;
}

public byte getRPSTL4() {
return RPSTL4;
}

public byte getRPSTL5() {
return RPSTL5;
}

public byte getRPSTL6() {
return RPSTL6;
}

public byte getRPSTL7() {
return RPSTL7;
}

public short getRPYRMA() {
return RPYRMA;
}

public short getRPYRMA2() {
return RPYRMA2;
}

public short getRPYRMA3() {
return RPYRMA3;
}

public short getRPYRMA4() {
return RPYRMA4;
}

public short getRPYRMA5() {
return RPYRMA5;
}

public short getRPYRMA6() {
return RPYRMA6;
}

public short getRPYRMA7() {
return RPYRMA7;
}

public byte getRSABUSE() {
return RSABUSE;
}

public byte getRSABUSEY() {
return RSABUSEY;
}

public byte getRSADDIC() {
return RSADDIC;
}

public byte getRSADDICY() {
return RSADDICY;
}

public byte getRSARGUE() {
return RSARGUE;
}

public byte getRSARGUEY() {
return RSARGUEY;
}

public byte getRSATTAC() {
return RSATTAC;
}

public byte getRSATTACY() {
return RSATTACY;
}

public byte getRSCARE() {
return RSCARE;
}

public byte getRSCAREY() {
return RSCAREY;
}

public byte getRSDISAS() {
return RSDISAS;
}

public byte getRSDISASY() {
return RSDISASY;
}

public byte getRSDRINK() {
return RSDRINK;
}

public byte getRSDRINKY() {
return RSDRINKY;
}

public byte getRSFCOLD() {
return RSFCOLD;
}

public byte getRSFDECID() {
return RSFDECID;
}

public byte getRSFDEPEN() {
return RSFDEPEN;
}

public byte getRSFINAN() {
return RSFINAN;
}

public byte getRSFINANY() {
return RSFINANY;
}

public byte getRSFIRED() {
return RSFIRED;
}

public byte getRSFIREDY() {
return RSFIREDY;
}

public byte getRSFLET() {
return RSFLET;
}

public byte getRSFNATUR() {
return RSFNATUR;
}

public byte getRSFNOTWA() {
return RSFNOTWA;
}

public byte getRSFOVERP() {
return RSFOVERP;
}

public byte getRSFUNDER() {
return RSFUNDER;
}

public byte getRSILL() {
return RSILL;
}

public byte getRSILLY() {
return RSILLY;
}

public byte getRSLOSWR() {
return RSLOSWR;
}

public byte getRSLOSWRY() {
return RSLOSWRY;
}

public byte getRSMCOLD() {
return RSMCOLD;
}

public byte getRSMDEPEN() {
return RSMDEPEN;
}

public byte getRSMDICDE() {
return RSMDICDE;
}

public byte getRSMLET() {
return RSMLET;
}

public byte getRSMNATUR() {
return RSMNATUR;
}

public byte getRSMNOTWA() {
return RSMNOTWA;
}

public byte getRSMOVERP() {
return RSMOVERP;
}

public byte getRSMUNDER() {
return RSMUNDER;
}

public byte getRSRISKF() {
return RSRISKF;
}

public byte getRSRISKFY() {
return RSRISKFY;
}

public byte getRSSEXAS() {
return RSSEXAS;
}

public byte getRSSEXASY() {
return RSSEXASY;
}

public byte getRSUNEMP() {
return RSUNEMP;
}

public byte getRSUNEMPY() {
return RSUNEMPY;
}

public byte getRSWITKL() {
return RSWITKL;
}

public byte getRSWITKLY() {
return RSWITKLY;
}

public byte getRSWITRY() {
return RSWITRY;
}

public byte getRSWITWR() {
return RSWITWR;
}

public byte getRWAGELE() {
return RWAGELE;
}

public byte getRWANO() {
return RWANO;
}

public byte getRWANO10() {
return RWANO10;
}

public byte getRWANO11() {
return RWANO11;
}

public boolean getRWANO12() {
return RWANO12;
}

public boolean getRWANO13() {
return RWANO13;
}

public byte getRWANO14() {
return RWANO14;
}

public byte getRWANO15() {
return RWANO15;
}

public byte getRWANO16() {
return RWANO16;
}

public boolean getRWANO17() {
return RWANO17;
}

public byte getRWANO18() {
return RWANO18;
}

public boolean getRWANO19() {
return RWANO19;
}

public byte getRWANO2() {
return RWANO2;
}

public boolean getRWANO20() {
return RWANO20;
}

public byte getRWANO3() {
return RWANO3;
}

public byte getRWANO4() {
return RWANO4;
}

public byte getRWANO5() {
return RWANO5;
}

public byte getRWANO6() {
return RWANO6;
}

public byte getRWANO7() {
return RWANO7;
}

public byte getRWANO8() {
return RWANO8;
}

public byte getRWANO9() {
return RWANO9;
}

public byte getRWBUS() {
return RWBUS;
}

public byte getRWBUX1() {
return RWBUX1;
}

public byte getRWBUX10() {
return RWBUX10;
}

public byte getRWBUX11() {
return RWBUX11;
}

public byte getRWBUX12() {
return RWBUX12;
}

public byte getRWBUX13() {
return RWBUX13;
}

public byte getRWBUX14() {
return RWBUX14;
}

public byte getRWBUX15() {
return RWBUX15;
}

public byte getRWBUX16() {
return RWBUX16;
}

public byte getRWBUX17() {
return RWBUX17;
}

public byte getRWBUX18() {
return RWBUX18;
}

public byte getRWBUX19() {
return RWBUX19;
}

public byte getRWBUX2() {
return RWBUX2;
}

public byte getRWBUX20() {
return RWBUX20;
}

public byte getRWBUX3() {
return RWBUX3;
}

public byte getRWBUX4() {
return RWBUX4;
}

public byte getRWBUX5() {
return RWBUX5;
}

public byte getRWBUX6() {
return RWBUX6;
}

public byte getRWBUX7() {
return RWBUX7;
}

public byte getRWBUX8() {
return RWBUX8;
}

public byte getRWBUX9() {
return RWBUX9;
}

public short getRWEDY() {
return RWEDY;
}

public short getRWEDY10() {
return RWEDY10;
}

public short getRWEDY11() {
return RWEDY11;
}

public short getRWEDY12() {
return RWEDY12;
}

public short getRWEDY13() {
return RWEDY13;
}

public short getRWEDY14() {
return RWEDY14;
}

public short getRWEDY15() {
return RWEDY15;
}

public short getRWEDY16() {
return RWEDY16;
}

public short getRWEDY17() {
return RWEDY17;
}

public short getRWEDY18() {
return RWEDY18;
}

public short getRWEDY19() {
return RWEDY19;
}

public short getRWEDY2() {
return RWEDY2;
}

public short getRWEDY20() {
return RWEDY20;
}

public short getRWEDY3() {
return RWEDY3;
}

public short getRWEDY4() {
return RWEDY4;
}

public short getRWEDY5() {
return RWEDY5;
}

public short getRWEDY6() {
return RWEDY6;
}

public short getRWEDY7() {
return RWEDY7;
}

public short getRWEDY8() {
return RWEDY8;
}

public short getRWEDY9() {
return RWEDY9;
}

public byte getRWEVW() {
return RWEVW;
}

public byte getRWFT() {
return RWFT;
}

public byte getRWFT10() {
return RWFT10;
}

public byte getRWFT11() {
return RWFT11;
}

public byte getRWFT12() {
return RWFT12;
}

public byte getRWFT13() {
return RWFT13;
}

public byte getRWFT14() {
return RWFT14;
}

public byte getRWFT15() {
return RWFT15;
}

public byte getRWFT16() {
return RWFT16;
}

public byte getRWFT17() {
return RWFT17;
}

public byte getRWFT18() {
return RWFT18;
}

public byte getRWFT19() {
return RWFT19;
}

public byte getRWFT2() {
return RWFT2;
}

public byte getRWFT20() {
return RWFT20;
}

public byte getRWFT3() {
return RWFT3;
}

public byte getRWFT4() {
return RWFT4;
}

public byte getRWFT5() {
return RWFT5;
}

public byte getRWFT6() {
return RWFT6;
}

public byte getRWFT7() {
return RWFT7;
}

public byte getRWFT8() {
return RWFT8;
}

public byte getRWFT9() {
return RWFT9;
}

public byte getRWFTC() {
return RWFTC;
}

public byte getRWFTE() {
return RWFTE;
}

public byte getRWFTN() {
return RWFTN;
}

public short getRWFTP() {
return RWFTP;
}

public short getRWFTP10() {
return RWFTP10;
}

public short getRWFTP11() {
return RWFTP11;
}

public short getRWFTP12() {
return RWFTP12;
}

public short getRWFTP13() {
return RWFTP13;
}

public short getRWFTP14() {
return RWFTP14;
}

public short getRWFTP15() {
return RWFTP15;
}

public boolean getRWFTP16() {
return RWFTP16;
}

public boolean getRWFTP17() {
return RWFTP17;
}

public short getRWFTP18() {
return RWFTP18;
}

public boolean getRWFTP19() {
return RWFTP19;
}

public short getRWFTP2() {
return RWFTP2;
}

public boolean getRWFTP20() {
return RWFTP20;
}

public short getRWFTP3() {
return RWFTP3;
}

public short getRWFTP4() {
return RWFTP4;
}

public short getRWFTP5() {
return RWFTP5;
}

public short getRWFTP6() {
return RWFTP6;
}

public short getRWFTP7() {
return RWFTP7;
}

public short getRWFTP8() {
return RWFTP8;
}

public short getRWFTP9() {
return RWFTP9;
}

public byte getRWILL() {
return RWILL;
}

public byte getRWILX1() {
return RWILX1;
}

public byte getRWILX10() {
return RWILX10;
}

public byte getRWILX11() {
return RWILX11;
}

public byte getRWILX12() {
return RWILX12;
}

public byte getRWILX13() {
return RWILX13;
}

public byte getRWILX14() {
return RWILX14;
}

public byte getRWILX15() {
return RWILX15;
}

public byte getRWILX16() {
return RWILX16;
}

public byte getRWILX17() {
return RWILX17;
}

public byte getRWILX18() {
return RWILX18;
}

public byte getRWILX19() {
return RWILX19;
}

public byte getRWILX2() {
return RWILX2;
}

public byte getRWILX20() {
return RWILX20;
}

public byte getRWILX3() {
return RWILX3;
}

public byte getRWILX4() {
return RWILX4;
}

public byte getRWILX5() {
return RWILX5;
}

public byte getRWILX6() {
return RWILX6;
}

public byte getRWILX7() {
return RWILX7;
}

public byte getRWILX8() {
return RWILX8;
}

public byte getRWILX9() {
return RWILX9;
}

public byte getRWJSA() {
return RWJSA;
}

public short getRWJSTY10() {
return RWJSTY10;
}

public short getRWJSTY11() {
return RWJSTY11;
}

public short getRWJSTY12() {
return RWJSTY12;
}

public short getRWJSTY13() {
return RWJSTY13;
}

public short getRWJSTY14() {
return RWJSTY14;
}

public short getRWJSTY15() {
return RWJSTY15;
}

public short getRWJSTY16() {
return RWJSTY16;
}

public short getRWJSTY17() {
return RWJSTY17;
}

public short getRWJSTY18() {
return RWJSTY18;
}

public short getRWJSTY19() {
return RWJSTY19;
}

public short getRWJSTY20() {
return RWJSTY20;
}

public short getRWJSTYR() {
return RWJSTYR;
}

public short getRWJSTYR2() {
return RWJSTYR2;
}

public short getRWJSTYR3() {
return RWJSTYR3;
}

public short getRWJSTYR4() {
return RWJSTYR4;
}

public short getRWJSTYR5() {
return RWJSTYR5;
}

public short getRWJSTYR6() {
return RWJSTYR6;
}

public short getRWJSTYR7() {
return RWJSTYR7;
}

public short getRWJSTYR8() {
return RWJSTYR8;
}

public short getRWJSTYR9() {
return RWJSTYR9;
}

public short getRWJSY() {
return RWJSY;
}

public short getRWJSY10() {
return RWJSY10;
}

public short getRWJSY11() {
return RWJSY11;
}

public short getRWJSY12() {
return RWJSY12;
}

public short getRWJSY13() {
return RWJSY13;
}

public short getRWJSY14() {
return RWJSY14;
}

public short getRWJSY15() {
return RWJSY15;
}

public short getRWJSY16() {
return RWJSY16;
}

public short getRWJSY17() {
return RWJSY17;
}

public short getRWJSY18() {
return RWJSY18;
}

public boolean getRWJSY19() {
return RWJSY19;
}

public short getRWJSY2() {
return RWJSY2;
}

public boolean getRWJSY20() {
return RWJSY20;
}

public short getRWJSY3() {
return RWJSY3;
}

public short getRWJSY4() {
return RWJSY4;
}

public short getRWJSY5() {
return RWJSY5;
}

public short getRWJSY6() {
return RWJSY6;
}

public short getRWJSY7() {
return RWJSY7;
}

public short getRWJSY8() {
return RWJSY8;
}

public short getRWJSY9() {
return RWJSY9;
}

public byte getRWLJO() {
return RWLJO;
}

public byte getRWNED() {
return RWNED;
}

public byte getRWNWA() {
return RWNWA;
}

public byte getRWNWA2() {
return RWNWA2;
}

public byte getRWNWA3() {
return RWNWA3;
}

public boolean getRWNWA4() {
return RWNWA4;
}

public boolean getRWNWA5() {
return RWNWA5;
}

public boolean getRWNWA6() {
return RWNWA6;
}

public boolean getRWNWA7() {
return RWNWA7;
}

public boolean getRWNWA8() {
return RWNWA8;
}

public boolean getRWNWA9() {
return RWNWA9;
}

public short getRWNWB() {
return RWNWB;
}

public short getRWNWB2() {
return RWNWB2;
}

public short getRWNWB3() {
return RWNWB3;
}

public short getRWNWB4() {
return RWNWB4;
}

public short getRWNWB5() {
return RWNWB5;
}

public short getRWNWB6() {
return RWNWB6;
}

public short getRWNWB7() {
return RWNWB7;
}

public short getRWNWB8() {
return RWNWB8;
}

public boolean getRWNWB9() {
return RWNWB9;
}

public boolean getRWNWC1() {
return RWNWC1;
}

public boolean getRWNWC10() {
return RWNWC10;
}

public boolean getRWNWC100() {
return RWNWC100;
}

public boolean getRWNWC101() {
return RWNWC101;
}

public boolean getRWNWC102() {
return RWNWC102;
}

public boolean getRWNWC103() {
return RWNWC103;
}

public boolean getRWNWC11() {
return RWNWC11;
}

public boolean getRWNWC12() {
return RWNWC12;
}

public byte getRWNWC13() {
return RWNWC13;
}

public boolean getRWNWC14() {
return RWNWC14;
}

public boolean getRWNWC15() {
return RWNWC15;
}

public byte getRWNWC16() {
return RWNWC16;
}

public boolean getRWNWC17() {
return RWNWC17;
}

public byte getRWNWC18() {
return RWNWC18;
}

public boolean getRWNWC19() {
return RWNWC19;
}

public boolean getRWNWC2() {
return RWNWC2;
}

public boolean getRWNWC20() {
return RWNWC20;
}

public boolean getRWNWC21() {
return RWNWC21;
}

public boolean getRWNWC22() {
return RWNWC22;
}

public boolean getRWNWC23() {
return RWNWC23;
}

public boolean getRWNWC24() {
return RWNWC24;
}

public boolean getRWNWC25() {
return RWNWC25;
}

public boolean getRWNWC26() {
return RWNWC26;
}

public boolean getRWNWC27() {
return RWNWC27;
}

public boolean getRWNWC28() {
return RWNWC28;
}

public boolean getRWNWC29() {
return RWNWC29;
}

public boolean getRWNWC3() {
return RWNWC3;
}

public boolean getRWNWC30() {
return RWNWC30;
}

public boolean getRWNWC31() {
return RWNWC31;
}

public boolean getRWNWC32() {
return RWNWC32;
}

public boolean getRWNWC33() {
return RWNWC33;
}

public boolean getRWNWC34() {
return RWNWC34;
}

public boolean getRWNWC35() {
return RWNWC35;
}

public boolean getRWNWC36() {
return RWNWC36;
}

public boolean getRWNWC37() {
return RWNWC37;
}

public boolean getRWNWC38() {
return RWNWC38;
}

public boolean getRWNWC39() {
return RWNWC39;
}

public byte getRWNWC4() {
return RWNWC4;
}

public boolean getRWNWC40() {
return RWNWC40;
}

public boolean getRWNWC41() {
return RWNWC41;
}

public boolean getRWNWC42() {
return RWNWC42;
}

public boolean getRWNWC43() {
return RWNWC43;
}

public boolean getRWNWC44() {
return RWNWC44;
}

public boolean getRWNWC45() {
return RWNWC45;
}

public boolean getRWNWC46() {
return RWNWC46;
}

public boolean getRWNWC47() {
return RWNWC47;
}

public boolean getRWNWC48() {
return RWNWC48;
}

public boolean getRWNWC49() {
return RWNWC49;
}

public byte getRWNWC5() {
return RWNWC5;
}

public boolean getRWNWC50() {
return RWNWC50;
}

public boolean getRWNWC51() {
return RWNWC51;
}

public boolean getRWNWC52() {
return RWNWC52;
}

public boolean getRWNWC53() {
return RWNWC53;
}

public boolean getRWNWC54() {
return RWNWC54;
}

public boolean getRWNWC55() {
return RWNWC55;
}

public boolean getRWNWC56() {
return RWNWC56;
}

public boolean getRWNWC57() {
return RWNWC57;
}

public boolean getRWNWC58() {
return RWNWC58;
}

public boolean getRWNWC59() {
return RWNWC59;
}

public boolean getRWNWC6() {
return RWNWC6;
}

public boolean getRWNWC60() {
return RWNWC60;
}

public boolean getRWNWC61() {
return RWNWC61;
}

public boolean getRWNWC62() {
return RWNWC62;
}

public boolean getRWNWC63() {
return RWNWC63;
}

public boolean getRWNWC64() {
return RWNWC64;
}

public boolean getRWNWC65() {
return RWNWC65;
}

public boolean getRWNWC66() {
return RWNWC66;
}

public boolean getRWNWC67() {
return RWNWC67;
}

public boolean getRWNWC68() {
return RWNWC68;
}

public boolean getRWNWC69() {
return RWNWC69;
}

public boolean getRWNWC7() {
return RWNWC7;
}

public boolean getRWNWC70() {
return RWNWC70;
}

public boolean getRWNWC71() {
return RWNWC71;
}

public boolean getRWNWC72() {
return RWNWC72;
}

public boolean getRWNWC73() {
return RWNWC73;
}

public boolean getRWNWC74() {
return RWNWC74;
}

public boolean getRWNWC75() {
return RWNWC75;
}

public boolean getRWNWC76() {
return RWNWC76;
}

public boolean getRWNWC77() {
return RWNWC77;
}

public boolean getRWNWC78() {
return RWNWC78;
}

public boolean getRWNWC79() {
return RWNWC79;
}

public byte getRWNWC8() {
return RWNWC8;
}

public boolean getRWNWC80() {
return RWNWC80;
}

public boolean getRWNWC81() {
return RWNWC81;
}

public byte getRWNWC9() {
return RWNWC9;
}

public byte getRWNWC95() {
return RWNWC95;
}

public byte getRWNWC96() {
return RWNWC96;
}

public boolean getRWNWC97() {
return RWNWC97;
}

public boolean getRWNWC98() {
return RWNWC98;
}

public boolean getRWNWC99() {
return RWNWC99;
}

public byte getRWNX() {
return RWNX;
}

public byte getRWNX10() {
return RWNX10;
}

public byte getRWNX11() {
return RWNX11;
}

public byte getRWNX12() {
return RWNX12;
}

public byte getRWNX13() {
return RWNX13;
}

public byte getRWNX14() {
return RWNX14;
}

public byte getRWNX15() {
return RWNX15;
}

public byte getRWNX16() {
return RWNX16;
}

public byte getRWNX17() {
return RWNX17;
}

public boolean getRWNX18() {
return RWNX18;
}

public byte getRWNX19() {
return RWNX19;
}

public byte getRWNX2() {
return RWNX2;
}

public boolean getRWNX20() {
return RWNX20;
}

public byte getRWNX3() {
return RWNX3;
}

public byte getRWNX4() {
return RWNX4;
}

public byte getRWNX5() {
return RWNX5;
}

public byte getRWNX6() {
return RWNX6;
}

public byte getRWNX7() {
return RWNX7;
}

public byte getRWNX8() {
return RWNX8;
}

public byte getRWNX9() {
return RWNX9;
}

public short getRWPTF() {
return RWPTF;
}

public short getRWPTF10() {
return RWPTF10;
}

public boolean getRWPTF11() {
return RWPTF11;
}

public short getRWPTF12() {
return RWPTF12;
}

public short getRWPTF13() {
return RWPTF13;
}

public short getRWPTF14() {
return RWPTF14;
}

public boolean getRWPTF15() {
return RWPTF15;
}

public boolean getRWPTF16() {
return RWPTF16;
}

public short getRWPTF17() {
return RWPTF17;
}

public boolean getRWPTF18() {
return RWPTF18;
}

public boolean getRWPTF19() {
return RWPTF19;
}

public short getRWPTF2() {
return RWPTF2;
}

public boolean getRWPTF20() {
return RWPTF20;
}

public short getRWPTF3() {
return RWPTF3;
}

public short getRWPTF4() {
return RWPTF4;
}

public short getRWPTF5() {
return RWPTF5;
}

public short getRWPTF6() {
return RWPTF6;
}

public short getRWPTF7() {
return RWPTF7;
}

public short getRWPTF8() {
return RWPTF8;
}

public short getRWPTF9() {
return RWPTF9;
}

public byte getRWS() {
return RWS;
}

public byte getRWS10() {
return RWS10;
}

public byte getRWS11() {
return RWS11;
}

public byte getRWS12() {
return RWS12;
}

public byte getRWS13() {
return RWS13;
}

public byte getRWS14() {
return RWS14;
}

public byte getRWS15() {
return RWS15;
}

public byte getRWS16() {
return RWS16;
}

public byte getRWS17() {
return RWS17;
}

public byte getRWS18() {
return RWS18;
}

public byte getRWS19() {
return RWS19;
}

public byte getRWS2() {
return RWS2;
}

public byte getRWS20() {
return RWS20;
}

public byte getRWS3() {
return RWS3;
}

public byte getRWS4() {
return RWS4;
}

public byte getRWS5() {
return RWS5;
}

public byte getRWS6() {
return RWS6;
}

public byte getRWS7() {
return RWS7;
}

public byte getRWS8() {
return RWS8;
}

public byte getRWS9() {
return RWS9;
}

public byte getRWSAD() {
return RWSAD;
}

public byte getRWSAD10() {
return RWSAD10;
}

public byte getRWSAD11() {
return RWSAD11;
}

public byte getRWSAD12() {
return RWSAD12;
}

public boolean getRWSAD13() {
return RWSAD13;
}

public boolean getRWSAD14() {
return RWSAD14;
}

public boolean getRWSAD15() {
return RWSAD15;
}

public boolean getRWSAD16() {
return RWSAD16;
}

public boolean getRWSAD17() {
return RWSAD17;
}

public boolean getRWSAD18() {
return RWSAD18;
}

public boolean getRWSAD19() {
return RWSAD19;
}

public byte getRWSAD2() {
return RWSAD2;
}

public boolean getRWSAD20() {
return RWSAD20;
}

public short getRWSAD3() {
return RWSAD3;
}

public byte getRWSAD4() {
return RWSAD4;
}

public short getRWSAD5() {
return RWSAD5;
}

public byte getRWSAD6() {
return RWSAD6;
}

public byte getRWSAD7() {
return RWSAD7;
}

public byte getRWSAD8() {
return RWSAD8;
}

public byte getRWSAD9() {
return RWSAD9;
}

public short getRWSAN() {
return RWSAN;
}

public int getRWSAN10() {
return RWSAN10;
}

public int getRWSAN11() {
return RWSAN11;
}

public int getRWSAN12() {
return RWSAN12;
}

public int getRWSAN13() {
return RWSAN13;
}

public int getRWSAN14() {
return RWSAN14;
}

public short getRWSAN15() {
return RWSAN15;
}

public int getRWSAN16() {
return RWSAN16;
}

public short getRWSAN17() {
return RWSAN17;
}

public short getRWSAN18() {
return RWSAN18;
}

public short getRWSAN19() {
return RWSAN19;
}

public int getRWSAN2() {
return RWSAN2;
}

public short getRWSAN20() {
return RWSAN20;
}

public int getRWSAN3() {
return RWSAN3;
}

public int getRWSAN4() {
return RWSAN4;
}

public int getRWSAN5() {
return RWSAN5;
}

public int getRWSAN6() {
return RWSAN6;
}

public int getRWSAN7() {
return RWSAN7;
}

public int getRWSAN8() {
return RWSAN8;
}

public int getRWSAN9() {
return RWSAN9;
}

public short getRWSAP() {
return RWSAP;
}

public short getRWSAP10() {
return RWSAP10;
}

public short getRWSAP11() {
return RWSAP11;
}

public byte getRWSAP12() {
return RWSAP12;
}

public short getRWSAP13() {
return RWSAP13;
}

public boolean getRWSAP14() {
return RWSAP14;
}

public boolean getRWSAP15() {
return RWSAP15;
}

public boolean getRWSAP16() {
return RWSAP16;
}

public boolean getRWSAP17() {
return RWSAP17;
}

public boolean getRWSAP18() {
return RWSAP18;
}

public boolean getRWSAP19() {
return RWSAP19;
}

public short getRWSAP2() {
return RWSAP2;
}

public boolean getRWSAP20() {
return RWSAP20;
}

public int getRWSAP3() {
return RWSAP3;
}

public short getRWSAP4() {
return RWSAP4;
}

public short getRWSAP5() {
return RWSAP5;
}

public short getRWSAP6() {
return RWSAP6;
}

public short getRWSAP7() {
return RWSAP7;
}

public short getRWSAP8() {
return RWSAP8;
}

public short getRWSAP9() {
return RWSAP9;
}

public short getRWSAS() {
return RWSAS;
}

public byte getRWSAS10() {
return RWSAS10;
}

public byte getRWSAS11() {
return RWSAS11;
}

public byte getRWSAS12() {
return RWSAS12;
}

public boolean getRWSAS13() {
return RWSAS13;
}

public boolean getRWSAS14() {
return RWSAS14;
}

public boolean getRWSAS15() {
return RWSAS15;
}

public boolean getRWSAS16() {
return RWSAS16;
}

public boolean getRWSAS17() {
return RWSAS17;
}

public boolean getRWSAS18() {
return RWSAS18;
}

public boolean getRWSAS19() {
return RWSAS19;
}

public byte getRWSAS2() {
return RWSAS2;
}

public boolean getRWSAS20() {
return RWSAS20;
}

public short getRWSAS3() {
return RWSAS3;
}

public short getRWSAS4() {
return RWSAS4;
}

public short getRWSAS5() {
return RWSAS5;
}

public byte getRWSAS6() {
return RWSAS6;
}

public byte getRWSAS7() {
return RWSAS7;
}

public byte getRWSAS8() {
return RWSAS8;
}

public byte getRWSAS9() {
return RWSAS9;
}

public byte getRWSE() {
return RWSE;
}

public byte getRWSE10() {
return RWSE10;
}

public byte getRWSE11() {
return RWSE11;
}

public byte getRWSE12() {
return RWSE12;
}

public byte getRWSE13() {
return RWSE13;
}

public byte getRWSE14() {
return RWSE14;
}

public byte getRWSE15() {
return RWSE15;
}

public byte getRWSE16() {
return RWSE16;
}

public byte getRWSE17() {
return RWSE17;
}

public byte getRWSE18() {
return RWSE18;
}

public byte getRWSE19() {
return RWSE19;
}

public byte getRWSE2() {
return RWSE2;
}

public byte getRWSE20() {
return RWSE20;
}

public byte getRWSE3() {
return RWSE3;
}

public byte getRWSE4() {
return RWSE4;
}

public byte getRWSE5() {
return RWSE5;
}

public byte getRWSE6() {
return RWSE6;
}

public byte getRWSE7() {
return RWSE7;
}

public byte getRWSE8() {
return RWSE8;
}

public byte getRWSE9() {
return RWSE9;
}

public byte getRWSF() {
return RWSF;
}

public byte getRWSFD() {
return RWSFD;
}

public byte getRWSFF1() {
return RWSFF1;
}

public byte getRWSFF10() {
return RWSFF10;
}

public byte getRWSFF100() {
return RWSFF100;
}

public byte getRWSFF101() {
return RWSFF101;
}

public byte getRWSFF102() {
return RWSFF102;
}

public byte getRWSFF103() {
return RWSFF103;
}

public boolean getRWSFF104() {
return RWSFF104;
}

public byte getRWSFF105() {
return RWSFF105;
}

public boolean getRWSFF106() {
return RWSFF106;
}

public byte getRWSFF107() {
return RWSFF107;
}

public boolean getRWSFF108() {
return RWSFF108;
}

public byte getRWSFF109() {
return RWSFF109;
}

public byte getRWSFF11() {
return RWSFF11;
}

public byte getRWSFF110() {
return RWSFF110;
}

public byte getRWSFF111() {
return RWSFF111;
}

public byte getRWSFF112() {
return RWSFF112;
}

public byte getRWSFF113() {
return RWSFF113;
}

public byte getRWSFF114() {
return RWSFF114;
}

public byte getRWSFF115() {
return RWSFF115;
}

public byte getRWSFF116() {
return RWSFF116;
}

public byte getRWSFF117() {
return RWSFF117;
}

public byte getRWSFF118() {
return RWSFF118;
}

public byte getRWSFF119() {
return RWSFF119;
}

public byte getRWSFF12() {
return RWSFF12;
}

public byte getRWSFF120() {
return RWSFF120;
}

public boolean getRWSFF121() {
return RWSFF121;
}

public byte getRWSFF122() {
return RWSFF122;
}

public byte getRWSFF123() {
return RWSFF123;
}

public byte getRWSFF124() {
return RWSFF124;
}

public byte getRWSFF125() {
return RWSFF125;
}

public byte getRWSFF126() {
return RWSFF126;
}

public byte getRWSFF127() {
return RWSFF127;
}

public byte getRWSFF128() {
return RWSFF128;
}

public byte getRWSFF129() {
return RWSFF129;
}

public byte getRWSFF13() {
return RWSFF13;
}

public boolean getRWSFF130() {
return RWSFF130;
}

public boolean getRWSFF131() {
return RWSFF131;
}

public byte getRWSFF132() {
return RWSFF132;
}

public boolean getRWSFF133() {
return RWSFF133;
}

public byte getRWSFF134() {
return RWSFF134;
}

public byte getRWSFF135() {
return RWSFF135;
}

public byte getRWSFF136() {
return RWSFF136;
}

public byte getRWSFF137() {
return RWSFF137;
}

public boolean getRWSFF138() {
return RWSFF138;
}

public byte getRWSFF139() {
return RWSFF139;
}

public byte getRWSFF14() {
return RWSFF14;
}

public boolean getRWSFF140() {
return RWSFF140;
}

public boolean getRWSFF141() {
return RWSFF141;
}

public boolean getRWSFF142() {
return RWSFF142;
}

public boolean getRWSFF143() {
return RWSFF143;
}

public boolean getRWSFF144() {
return RWSFF144;
}

public boolean getRWSFF145() {
return RWSFF145;
}

public byte getRWSFF146() {
return RWSFF146;
}

public byte getRWSFF147() {
return RWSFF147;
}

public boolean getRWSFF148() {
return RWSFF148;
}

public boolean getRWSFF149() {
return RWSFF149;
}

public byte getRWSFF15() {
return RWSFF15;
}

public boolean getRWSFF150() {
return RWSFF150;
}

public boolean getRWSFF151() {
return RWSFF151;
}

public boolean getRWSFF152() {
return RWSFF152;
}

public boolean getRWSFF153() {
return RWSFF153;
}

public byte getRWSFF154() {
return RWSFF154;
}

public boolean getRWSFF155() {
return RWSFF155;
}

public boolean getRWSFF156() {
return RWSFF156;
}

public byte getRWSFF157() {
return RWSFF157;
}

public boolean getRWSFF158() {
return RWSFF158;
}

public boolean getRWSFF159() {
return RWSFF159;
}

public byte getRWSFF16() {
return RWSFF16;
}

public boolean getRWSFF160() {
return RWSFF160;
}

public boolean getRWSFF161() {
return RWSFF161;
}

public boolean getRWSFF162() {
return RWSFF162;
}

public boolean getRWSFF163() {
return RWSFF163;
}

public byte getRWSFF164() {
return RWSFF164;
}

public byte getRWSFF165() {
return RWSFF165;
}

public byte getRWSFF166() {
return RWSFF166;
}

public byte getRWSFF167() {
return RWSFF167;
}

public boolean getRWSFF168() {
return RWSFF168;
}

public boolean getRWSFF169() {
return RWSFF169;
}

public byte getRWSFF17() {
return RWSFF17;
}

public boolean getRWSFF170() {
return RWSFF170;
}

public boolean getRWSFF171() {
return RWSFF171;
}

public boolean getRWSFF172() {
return RWSFF172;
}

public boolean getRWSFF173() {
return RWSFF173;
}

public boolean getRWSFF174() {
return RWSFF174;
}

public boolean getRWSFF175() {
return RWSFF175;
}

public boolean getRWSFF176() {
return RWSFF176;
}

public boolean getRWSFF177() {
return RWSFF177;
}

public boolean getRWSFF178() {
return RWSFF178;
}

public boolean getRWSFF179() {
return RWSFF179;
}

public byte getRWSFF18() {
return RWSFF18;
}

public boolean getRWSFF180() {
return RWSFF180;
}

public boolean getRWSFF181() {
return RWSFF181;
}

public boolean getRWSFF182() {
return RWSFF182;
}

public boolean getRWSFF183() {
return RWSFF183;
}

public boolean getRWSFF184() {
return RWSFF184;
}

public boolean getRWSFF185() {
return RWSFF185;
}

public boolean getRWSFF186() {
return RWSFF186;
}

public boolean getRWSFF187() {
return RWSFF187;
}

public boolean getRWSFF188() {
return RWSFF188;
}

public boolean getRWSFF189() {
return RWSFF189;
}

public byte getRWSFF19() {
return RWSFF19;
}

public boolean getRWSFF190() {
return RWSFF190;
}

public boolean getRWSFF191() {
return RWSFF191;
}

public boolean getRWSFF192() {
return RWSFF192;
}

public boolean getRWSFF193() {
return RWSFF193;
}

public boolean getRWSFF194() {
return RWSFF194;
}

public boolean getRWSFF195() {
return RWSFF195;
}

public boolean getRWSFF196() {
return RWSFF196;
}

public boolean getRWSFF197() {
return RWSFF197;
}

public boolean getRWSFF198() {
return RWSFF198;
}

public boolean getRWSFF199() {
return RWSFF199;
}

public byte getRWSFF2() {
return RWSFF2;
}

public byte getRWSFF20() {
return RWSFF20;
}

public boolean getRWSFF200() {
return RWSFF200;
}

public byte getRWSFF21() {
return RWSFF21;
}

public byte getRWSFF22() {
return RWSFF22;
}

public byte getRWSFF23() {
return RWSFF23;
}

public byte getRWSFF24() {
return RWSFF24;
}

public byte getRWSFF25() {
return RWSFF25;
}

public byte getRWSFF26() {
return RWSFF26;
}

public byte getRWSFF27() {
return RWSFF27;
}

public byte getRWSFF28() {
return RWSFF28;
}

public byte getRWSFF29() {
return RWSFF29;
}

public byte getRWSFF3() {
return RWSFF3;
}

public byte getRWSFF30() {
return RWSFF30;
}

public byte getRWSFF31() {
return RWSFF31;
}

public byte getRWSFF32() {
return RWSFF32;
}

public byte getRWSFF33() {
return RWSFF33;
}

public byte getRWSFF34() {
return RWSFF34;
}

public byte getRWSFF35() {
return RWSFF35;
}

public byte getRWSFF36() {
return RWSFF36;
}

public byte getRWSFF37() {
return RWSFF37;
}

public byte getRWSFF38() {
return RWSFF38;
}

public byte getRWSFF39() {
return RWSFF39;
}

public byte getRWSFF4() {
return RWSFF4;
}

public byte getRWSFF40() {
return RWSFF40;
}

public byte getRWSFF41() {
return RWSFF41;
}

public byte getRWSFF42() {
return RWSFF42;
}

public byte getRWSFF43() {
return RWSFF43;
}

public byte getRWSFF44() {
return RWSFF44;
}

public byte getRWSFF45() {
return RWSFF45;
}

public byte getRWSFF46() {
return RWSFF46;
}

public byte getRWSFF47() {
return RWSFF47;
}

public byte getRWSFF48() {
return RWSFF48;
}

public byte getRWSFF49() {
return RWSFF49;
}

public byte getRWSFF5() {
return RWSFF5;
}

public byte getRWSFF50() {
return RWSFF50;
}

public byte getRWSFF51() {
return RWSFF51;
}

public byte getRWSFF52() {
return RWSFF52;
}

public byte getRWSFF53() {
return RWSFF53;
}

public byte getRWSFF54() {
return RWSFF54;
}

public byte getRWSFF55() {
return RWSFF55;
}

public byte getRWSFF56() {
return RWSFF56;
}

public byte getRWSFF57() {
return RWSFF57;
}

public byte getRWSFF58() {
return RWSFF58;
}

public byte getRWSFF59() {
return RWSFF59;
}

public byte getRWSFF6() {
return RWSFF6;
}

public byte getRWSFF60() {
return RWSFF60;
}

public byte getRWSFF61() {
return RWSFF61;
}

public byte getRWSFF62() {
return RWSFF62;
}

public byte getRWSFF63() {
return RWSFF63;
}

public byte getRWSFF64() {
return RWSFF64;
}

public byte getRWSFF65() {
return RWSFF65;
}

public byte getRWSFF66() {
return RWSFF66;
}

public byte getRWSFF67() {
return RWSFF67;
}

public byte getRWSFF68() {
return RWSFF68;
}

public byte getRWSFF69() {
return RWSFF69;
}

public byte getRWSFF7() {
return RWSFF7;
}

public byte getRWSFF70() {
return RWSFF70;
}

public byte getRWSFF71() {
return RWSFF71;
}

public byte getRWSFF72() {
return RWSFF72;
}

public byte getRWSFF73() {
return RWSFF73;
}

public byte getRWSFF74() {
return RWSFF74;
}

public byte getRWSFF75() {
return RWSFF75;
}

public byte getRWSFF76() {
return RWSFF76;
}

public byte getRWSFF77() {
return RWSFF77;
}

public byte getRWSFF78() {
return RWSFF78;
}

public byte getRWSFF79() {
return RWSFF79;
}

public byte getRWSFF8() {
return RWSFF8;
}

public boolean getRWSFF80() {
return RWSFF80;
}

public byte getRWSFF81() {
return RWSFF81;
}

public byte getRWSFF82() {
return RWSFF82;
}

public boolean getRWSFF83() {
return RWSFF83;
}

public byte getRWSFF84() {
return RWSFF84;
}

public byte getRWSFF85() {
return RWSFF85;
}

public byte getRWSFF86() {
return RWSFF86;
}

public byte getRWSFF87() {
return RWSFF87;
}

public byte getRWSFF88() {
return RWSFF88;
}

public boolean getRWSFF89() {
return RWSFF89;
}

public byte getRWSFF9() {
return RWSFF9;
}

public byte getRWSFF90() {
return RWSFF90;
}

public byte getRWSFF91() {
return RWSFF91;
}

public byte getRWSFF92() {
return RWSFF92;
}

public boolean getRWSFF93() {
return RWSFF93;
}

public byte getRWSFF94() {
return RWSFF94;
}

public byte getRWSFF95() {
return RWSFF95;
}

public byte getRWSFF96() {
return RWSFF96;
}

public byte getRWSFF97() {
return RWSFF97;
}

public byte getRWSFF98() {
return RWSFF98;
}

public byte getRWSFF99() {
return RWSFF99;
}

public byte getRWSFG() {
return RWSFG;
}

public byte getRWSFM() {
return RWSFM;
}

public int getRWSFN() {
return RWSFN;
}

public int getRWSFP() {
return RWSFP;
}

public byte getRWSFS() {
return RWSFS;
}

public byte getRWSGN() {
return RWSGN;
}

public byte getRWSGN10() {
return RWSGN10;
}

public byte getRWSGN11() {
return RWSGN11;
}

public byte getRWSGN12() {
return RWSGN12;
}

public byte getRWSGN13() {
return RWSGN13;
}

public byte getRWSGN14() {
return RWSGN14;
}

public byte getRWSGN15() {
return RWSGN15;
}

public byte getRWSGN16() {
return RWSGN16;
}

public byte getRWSGN17() {
return RWSGN17;
}

public boolean getRWSGN18() {
return RWSGN18;
}

public boolean getRWSGN19() {
return RWSGN19;
}

public byte getRWSGN2() {
return RWSGN2;
}

public boolean getRWSGN20() {
return RWSGN20;
}

public byte getRWSGN3() {
return RWSGN3;
}

public byte getRWSGN4() {
return RWSGN4;
}

public byte getRWSGN5() {
return RWSGN5;
}

public byte getRWSGN6() {
return RWSGN6;
}

public byte getRWSGN7() {
return RWSGN7;
}

public byte getRWSGN8() {
return RWSGN8;
}

public byte getRWSGN9() {
return RWSGN9;
}

public byte getRWSM() {
return RWSM;
}

public byte getRWSM10() {
return RWSM10;
}

public byte getRWSM11() {
return RWSM11;
}

public byte getRWSM12() {
return RWSM12;
}

public byte getRWSM13() {
return RWSM13;
}

public byte getRWSM14() {
return RWSM14;
}

public boolean getRWSM15() {
return RWSM15;
}

public boolean getRWSM16() {
return RWSM16;
}

public boolean getRWSM17() {
return RWSM17;
}

public boolean getRWSM18() {
return RWSM18;
}

public boolean getRWSM19() {
return RWSM19;
}

public byte getRWSM2() {
return RWSM2;
}

public boolean getRWSM20() {
return RWSM20;
}

public byte getRWSM3() {
return RWSM3;
}

public byte getRWSM4() {
return RWSM4;
}

public byte getRWSM5() {
return RWSM5;
}

public byte getRWSM6() {
return RWSM6;
}

public byte getRWSM7() {
return RWSM7;
}

public byte getRWSM8() {
return RWSM8;
}

public byte getRWSM9() {
return RWSM9;
}

public byte getRWST1A() {
return RWST1A;
}

public byte getRWST1AM() {
return RWST1AM;
}

public byte getRWST1B() {
return RWST1B;
}

public byte getRWST1BM() {
return RWST1BM;
}

public byte getRWST1C() {
return RWST1C;
}

public byte getRWST1CM() {
return RWST1CM;
}

public byte getRWST1D() {
return RWST1D;
}

public byte getRWST1DM() {
return RWST1DM;
}

public byte getRWST1E() {
return RWST1E;
}

public byte getRWST1EM() {
return RWST1EM;
}

public byte getRWST1F() {
return RWST1F;
}

public byte getRWST1FM() {
return RWST1FM;
}

public byte getRWST1G() {
return RWST1G;
}

public byte getRWST1GM() {
return RWST1GM;
}

public byte getRWST1H() {
return RWST1H;
}

public byte getRWST1HM() {
return RWST1HM;
}

public byte getRWST1I() {
return RWST1I;
}

public byte getRWST1IM() {
return RWST1IM;
}

public byte getRWST1J() {
return RWST1J;
}

public byte getRWST1JM() {
return RWST1JM;
}

public byte getRWST1K() {
return RWST1K;
}

public byte getRWST1KM() {
return RWST1KM;
}

public byte getRWST1L() {
return RWST1L;
}

public byte getRWST1M() {
return RWST1M;
}

public boolean getRWST1N() {
return RWST1N;
}

public boolean getRWST1O() {
return RWST1O;
}

public byte getRWST1P() {
return RWST1P;
}

public boolean getRWST1Q() {
return RWST1Q;
}

public boolean getRWST1R() {
return RWST1R;
}

public boolean getRWST1S() {
return RWST1S;
}

public boolean getRWST1T() {
return RWST1T;
}

public byte getRWST2A() {
return RWST2A;
}

public byte getRWST2AM() {
return RWST2AM;
}

public byte getRWST2B() {
return RWST2B;
}

public byte getRWST2BM() {
return RWST2BM;
}

public byte getRWST2C() {
return RWST2C;
}

public byte getRWST2CM() {
return RWST2CM;
}

public byte getRWST2D() {
return RWST2D;
}

public byte getRWST2DM() {
return RWST2DM;
}

public byte getRWST2E() {
return RWST2E;
}

public byte getRWST2EM() {
return RWST2EM;
}

public byte getRWST2F() {
return RWST2F;
}

public byte getRWST2FM() {
return RWST2FM;
}

public byte getRWST2G() {
return RWST2G;
}

public byte getRWST2GM() {
return RWST2GM;
}

public byte getRWST2H() {
return RWST2H;
}

public byte getRWST2HM() {
return RWST2HM;
}

public byte getRWST2I() {
return RWST2I;
}

public byte getRWST2IM() {
return RWST2IM;
}

public byte getRWST2J() {
return RWST2J;
}

public byte getRWST2JM() {
return RWST2JM;
}

public byte getRWST2K() {
return RWST2K;
}

public byte getRWST2KM() {
return RWST2KM;
}

public byte getRWST2L() {
return RWST2L;
}

public boolean getRWST2M() {
return RWST2M;
}

public byte getRWST2N() {
return RWST2N;
}

public boolean getRWST2O() {
return RWST2O;
}

public boolean getRWST2P() {
return RWST2P;
}

public byte getRWST2Q() {
return RWST2Q;
}

public boolean getRWST2R() {
return RWST2R;
}

public boolean getRWST2S() {
return RWST2S;
}

public boolean getRWST2T() {
return RWST2T;
}

public byte getRWST3A() {
return RWST3A;
}

public byte getRWST3AM() {
return RWST3AM;
}

public byte getRWST3B() {
return RWST3B;
}

public byte getRWST3BM() {
return RWST3BM;
}

public byte getRWST3C() {
return RWST3C;
}

public byte getRWST3CM() {
return RWST3CM;
}

public byte getRWST3D() {
return RWST3D;
}

public byte getRWST3DM() {
return RWST3DM;
}

public byte getRWST3E() {
return RWST3E;
}

public byte getRWST3EM() {
return RWST3EM;
}

public byte getRWST3F() {
return RWST3F;
}

public byte getRWST3FM() {
return RWST3FM;
}

public byte getRWST3G() {
return RWST3G;
}

public byte getRWST3GM() {
return RWST3GM;
}

public byte getRWST3H() {
return RWST3H;
}

public byte getRWST3HM() {
return RWST3HM;
}

public byte getRWST3I() {
return RWST3I;
}

public byte getRWST3IM() {
return RWST3IM;
}

public byte getRWST3J() {
return RWST3J;
}

public byte getRWST3JM() {
return RWST3JM;
}

public byte getRWST3K() {
return RWST3K;
}

public byte getRWST3KM() {
return RWST3KM;
}

public byte getRWST3L() {
return RWST3L;
}

public byte getRWST3M() {
return RWST3M;
}

public boolean getRWST3N() {
return RWST3N;
}

public boolean getRWST3O() {
return RWST3O;
}

public byte getRWST3P() {
return RWST3P;
}

public boolean getRWST3Q() {
return RWST3Q;
}

public boolean getRWST3R() {
return RWST3R;
}

public boolean getRWST3S() {
return RWST3S;
}

public boolean getRWST3T() {
return RWST3T;
}

public byte getRWST4A() {
return RWST4A;
}

public byte getRWST4AM() {
return RWST4AM;
}

public byte getRWST4B() {
return RWST4B;
}

public byte getRWST4BM() {
return RWST4BM;
}

public byte getRWST4C() {
return RWST4C;
}

public byte getRWST4CM() {
return RWST4CM;
}

public byte getRWST4D() {
return RWST4D;
}

public byte getRWST4DM() {
return RWST4DM;
}

public byte getRWST4E() {
return RWST4E;
}

public byte getRWST4EM() {
return RWST4EM;
}

public byte getRWST4F() {
return RWST4F;
}

public byte getRWST4FM() {
return RWST4FM;
}

public byte getRWST4G() {
return RWST4G;
}

public byte getRWST4GM() {
return RWST4GM;
}

public byte getRWST4H() {
return RWST4H;
}

public byte getRWST4HM() {
return RWST4HM;
}

public byte getRWST4I() {
return RWST4I;
}

public byte getRWST4IM() {
return RWST4IM;
}

public byte getRWST4J() {
return RWST4J;
}

public byte getRWST4JM() {
return RWST4JM;
}

public byte getRWST4K() {
return RWST4K;
}

public byte getRWST4KM() {
return RWST4KM;
}

public byte getRWST4L() {
return RWST4L;
}

public boolean getRWST4M() {
return RWST4M;
}

public boolean getRWST4N() {
return RWST4N;
}

public boolean getRWST4O() {
return RWST4O;
}

public boolean getRWST4P() {
return RWST4P;
}

public boolean getRWST4Q() {
return RWST4Q;
}

public boolean getRWST4R() {
return RWST4R;
}

public boolean getRWST4S() {
return RWST4S;
}

public boolean getRWST4T() {
return RWST4T;
}

public byte getRWST51AM() {
return RWST51AM;
}

public byte getRWST51BM() {
return RWST51BM;
}

public byte getRWST51CM() {
return RWST51CM;
}

public byte getRWST51DM() {
return RWST51DM;
}

public byte getRWST52AM() {
return RWST52AM;
}

public byte getRWST52BM() {
return RWST52BM;
}

public byte getRWST52CM() {
return RWST52CM;
}

public byte getRWST52DM() {
return RWST52DM;
}

public byte getRWST52EM() {
return RWST52EM;
}

public byte getRWST52FM() {
return RWST52FM;
}

public byte getRWST52GM() {
return RWST52GM;
}

public byte getRWST52HM() {
return RWST52HM;
}

public byte getRWST52JM() {
return RWST52JM;
}

public byte getRWST52KM() {
return RWST52KM;
}

public byte getRWST53AM() {
return RWST53AM;
}

public byte getRWST53DM() {
return RWST53DM;
}

public byte getRWST53EM() {
return RWST53EM;
}

public byte getRWST53FM() {
return RWST53FM;
}

public byte getRWST53GM() {
return RWST53GM;
}

public byte getRWST54AM() {
return RWST54AM;
}

public byte getRWST54CM() {
return RWST54CM;
}

public byte getRWST54DM() {
return RWST54DM;
}

public byte getRWST54FM() {
return RWST54FM;
}

public byte getRWST55AM() {
return RWST55AM;
}

public byte getRWST55BM() {
return RWST55BM;
}

public byte getRWST55CM() {
return RWST55CM;
}

public byte getRWST55DM() {
return RWST55DM;
}

public byte getRWST55EM() {
return RWST55EM;
}

public byte getRWST55GM() {
return RWST55GM;
}

public byte getRWST56AM() {
return RWST56AM;
}

public byte getRWST56BM() {
return RWST56BM;
}

public byte getRWST56CM() {
return RWST56CM;
}

public byte getRWST56DM() {
return RWST56DM;
}

public byte getRWST56EM() {
return RWST56EM;
}

public byte getRWST56FM() {
return RWST56FM;
}

public byte getRWST56GM() {
return RWST56GM;
}

public byte getRWST56IM() {
return RWST56IM;
}

public byte getRWST5A() {
return RWST5A;
}

public byte getRWST5AM() {
return RWST5AM;
}

public byte getRWST5B() {
return RWST5B;
}

public byte getRWST5BM() {
return RWST5BM;
}

public byte getRWST5C() {
return RWST5C;
}

public byte getRWST5CM() {
return RWST5CM;
}

public byte getRWST5D() {
return RWST5D;
}

public byte getRWST5DM() {
return RWST5DM;
}

public byte getRWST5E() {
return RWST5E;
}

public byte getRWST5EM() {
return RWST5EM;
}

public byte getRWST5F() {
return RWST5F;
}

public byte getRWST5FM() {
return RWST5FM;
}

public byte getRWST5G() {
return RWST5G;
}

public byte getRWST5GM() {
return RWST5GM;
}

public byte getRWST5H() {
return RWST5H;
}

public byte getRWST5HM() {
return RWST5HM;
}

public byte getRWST5I() {
return RWST5I;
}

public byte getRWST5IM() {
return RWST5IM;
}

public byte getRWST5J() {
return RWST5J;
}

public byte getRWST5JM() {
return RWST5JM;
}

public byte getRWST5K() {
return RWST5K;
}

public byte getRWST5KM() {
return RWST5KM;
}

public byte getRWST5L() {
return RWST5L;
}

public byte getRWST5M() {
return RWST5M;
}

public byte getRWST5N() {
return RWST5N;
}

public boolean getRWST5O() {
return RWST5O;
}

public boolean getRWST5P() {
return RWST5P;
}

public boolean getRWST5Q() {
return RWST5Q;
}

public boolean getRWST5R() {
return RWST5R;
}

public boolean getRWST5S() {
return RWST5S;
}

public boolean getRWST5T() {
return RWST5T;
}

public byte getRWST6A() {
return RWST6A;
}

public byte getRWST6AM() {
return RWST6AM;
}

public byte getRWST6B() {
return RWST6B;
}

public byte getRWST6BM() {
return RWST6BM;
}

public byte getRWST6C() {
return RWST6C;
}

public byte getRWST6CM() {
return RWST6CM;
}

public byte getRWST6D() {
return RWST6D;
}

public byte getRWST6DM() {
return RWST6DM;
}

public byte getRWST6E() {
return RWST6E;
}

public byte getRWST6EM() {
return RWST6EM;
}

public byte getRWST6F() {
return RWST6F;
}

public byte getRWST6FM() {
return RWST6FM;
}

public byte getRWST6G() {
return RWST6G;
}

public byte getRWST6GM() {
return RWST6GM;
}

public byte getRWST6H() {
return RWST6H;
}

public byte getRWST6HM() {
return RWST6HM;
}

public byte getRWST6I() {
return RWST6I;
}

public byte getRWST6IM() {
return RWST6IM;
}

public byte getRWST6J() {
return RWST6J;
}

public byte getRWST6JM() {
return RWST6JM;
}

public boolean getRWST6K() {
return RWST6K;
}

public boolean getRWST6KM() {
return RWST6KM;
}

public byte getRWST6L() {
return RWST6L;
}

public boolean getRWST6M() {
return RWST6M;
}

public boolean getRWST6N() {
return RWST6N;
}

public boolean getRWST6O() {
return RWST6O;
}

public boolean getRWST6P() {
return RWST6P;
}

public boolean getRWST6Q() {
return RWST6Q;
}

public boolean getRWST6R() {
return RWST6R;
}

public boolean getRWST6S() {
return RWST6S;
}

public boolean getRWST6T() {
return RWST6T;
}

public byte getRWST7A() {
return RWST7A;
}

public byte getRWST7AM() {
return RWST7AM;
}

public byte getRWST7B() {
return RWST7B;
}

public byte getRWST7BM() {
return RWST7BM;
}

public byte getRWST7C() {
return RWST7C;
}

public byte getRWST7CM() {
return RWST7CM;
}

public byte getRWST7D() {
return RWST7D;
}

public byte getRWST7DM() {
return RWST7DM;
}

public byte getRWST7E() {
return RWST7E;
}

public byte getRWST7EM() {
return RWST7EM;
}

public byte getRWST7F() {
return RWST7F;
}

public byte getRWST7FM() {
return RWST7FM;
}

public byte getRWST7G() {
return RWST7G;
}

public byte getRWST7GM() {
return RWST7GM;
}

public byte getRWST7H() {
return RWST7H;
}

public byte getRWST7HM() {
return RWST7HM;
}

public byte getRWST7I() {
return RWST7I;
}

public byte getRWST7IM() {
return RWST7IM;
}

public byte getRWST7J() {
return RWST7J;
}

public byte getRWST7JM() {
return RWST7JM;
}

public byte getRWST7K() {
return RWST7K;
}

public byte getRWST7KM() {
return RWST7KM;
}

public byte getRWST7L() {
return RWST7L;
}

public byte getRWST7M() {
return RWST7M;
}

public boolean getRWST7N() {
return RWST7N;
}

public boolean getRWST7O() {
return RWST7O;
}

public boolean getRWST7P() {
return RWST7P;
}

public boolean getRWST7Q() {
return RWST7Q;
}

public boolean getRWST7R() {
return RWST7R;
}

public boolean getRWST7S() {
return RWST7S;
}

public boolean getRWST7T() {
return RWST7T;
}

public byte getRWST85AM() {
return RWST85AM;
}

public byte getRWST85BM() {
return RWST85BM;
}

public byte getRWST85CM() {
return RWST85CM;
}

public byte getRWST85DM() {
return RWST85DM;
}

public byte getRWST85EM() {
return RWST85EM;
}

public byte getRWST85FM() {
return RWST85FM;
}

public byte getRWST85GM() {
return RWST85GM;
}

public byte getRWST85HM() {
return RWST85HM;
}

public byte getRWST85IM() {
return RWST85IM;
}

public byte getRWST85JM() {
return RWST85JM;
}

public byte getRWST8A() {
return RWST8A;
}

public byte getRWST8AM() {
return RWST8AM;
}

public byte getRWST8B() {
return RWST8B;
}

public byte getRWST8BM() {
return RWST8BM;
}

public byte getRWST8C() {
return RWST8C;
}

public byte getRWST8CM() {
return RWST8CM;
}

public byte getRWST8D() {
return RWST8D;
}

public byte getRWST8DM() {
return RWST8DM;
}

public byte getRWST8E() {
return RWST8E;
}

public byte getRWST8EM() {
return RWST8EM;
}

public byte getRWST8F() {
return RWST8F;
}

public byte getRWST8FM() {
return RWST8FM;
}

public byte getRWST8G() {
return RWST8G;
}

public byte getRWST8GM() {
return RWST8GM;
}

public byte getRWST8H() {
return RWST8H;
}

public byte getRWST8HM() {
return RWST8HM;
}

public byte getRWST8I() {
return RWST8I;
}

public byte getRWST8IM() {
return RWST8IM;
}

public byte getRWST8J() {
return RWST8J;
}

public byte getRWST8JM() {
return RWST8JM;
}

public byte getRWST8K() {
return RWST8K;
}

public byte getRWST8KM() {
return RWST8KM;
}

public byte getRWST8L() {
return RWST8L;
}

public boolean getRWST8M() {
return RWST8M;
}

public boolean getRWST8N() {
return RWST8N;
}

public boolean getRWST8O() {
return RWST8O;
}

public boolean getRWST8P() {
return RWST8P;
}

public byte getRWST8Q() {
return RWST8Q;
}

public boolean getRWST8R() {
return RWST8R;
}

public boolean getRWST8S() {
return RWST8S;
}

public boolean getRWST8T() {
return RWST8T;
}

public byte getRWST95A() {
return RWST95A;
}

public byte getRWST95B() {
return RWST95B;
}

public byte getRWST95C() {
return RWST95C;
}

public byte getRWST95D() {
return RWST95D;
}

public byte getRWST95E() {
return RWST95E;
}

public byte getRWST95F() {
return RWST95F;
}

public byte getRWST95G() {
return RWST95G;
}

public byte getRWST95H() {
return RWST95H;
}

public byte getRWST95I() {
return RWST95I;
}

public byte getRWST95J() {
return RWST95J;
}

public byte getRWST95K() {
return RWST95K;
}

public boolean getRWST95L() {
return RWST95L;
}

public boolean getRWST95M() {
return RWST95M;
}

public boolean getRWST95N() {
return RWST95N;
}

public boolean getRWST95O() {
return RWST95O;
}

public boolean getRWST95P() {
return RWST95P;
}

public boolean getRWST95Q() {
return RWST95Q;
}

public boolean getRWST95R() {
return RWST95R;
}

public boolean getRWST95S() {
return RWST95S;
}

public boolean getRWST95T() {
return RWST95T;
}

public byte getRWST9A() {
return RWST9A;
}

public byte getRWST9AM() {
return RWST9AM;
}

public byte getRWST9B() {
return RWST9B;
}

public byte getRWST9BM() {
return RWST9BM;
}

public byte getRWST9C() {
return RWST9C;
}

public byte getRWST9CM() {
return RWST9CM;
}

public byte getRWST9D() {
return RWST9D;
}

public byte getRWST9DM() {
return RWST9DM;
}

public byte getRWST9E() {
return RWST9E;
}

public byte getRWST9EM() {
return RWST9EM;
}

public byte getRWST9F() {
return RWST9F;
}

public byte getRWST9FM() {
return RWST9FM;
}

public byte getRWST9G() {
return RWST9G;
}

public byte getRWST9GM() {
return RWST9GM;
}

public boolean getRWST9H() {
return RWST9H;
}

public boolean getRWST9HM() {
return RWST9HM;
}

public byte getRWST9I() {
return RWST9I;
}

public byte getRWST9IM() {
return RWST9IM;
}

public boolean getRWST9J() {
return RWST9J;
}

public boolean getRWST9JM() {
return RWST9JM;
}

public byte getRWST9K() {
return RWST9K;
}

public byte getRWST9KM() {
return RWST9KM;
}

public boolean getRWST9L() {
return RWST9L;
}

public boolean getRWST9M() {
return RWST9M;
}

public boolean getRWST9N() {
return RWST9N;
}

public boolean getRWST9O() {
return RWST9O;
}

public boolean getRWST9P() {
return RWST9P;
}

public boolean getRWST9Q() {
return RWST9Q;
}

public boolean getRWST9R() {
return RWST9R;
}

public boolean getRWST9S() {
return RWST9S;
}

public boolean getRWST9T() {
return RWST9T;
}

public byte getRWSTF1() {
return RWSTF1;
}

public byte getRWSTF1M() {
return RWSTF1M;
}

public byte getRWSTF2() {
return RWSTF2;
}

public byte getRWSTF2M() {
return RWSTF2M;
}

public byte getRWSTF3() {
return RWSTF3;
}

public byte getRWSTF3M() {
return RWSTF3M;
}

public byte getRWSTF4() {
return RWSTF4;
}

public byte getRWSTF4M() {
return RWSTF4M;
}

public byte getRWSTF5() {
return RWSTF5;
}

public byte getRWSTF51M() {
return RWSTF51M;
}

public byte getRWSTF52M() {
return RWSTF52M;
}

public byte getRWSTF53M() {
return RWSTF53M;
}

public byte getRWSTF54M() {
return RWSTF54M;
}

public byte getRWSTF56M() {
return RWSTF56M;
}

public byte getRWSTF5M() {
return RWSTF5M;
}

public byte getRWSTF6() {
return RWSTF6;
}

public byte getRWSTF6M() {
return RWSTF6M;
}

public byte getRWSTF7() {
return RWSTF7;
}

public byte getRWSTF7M() {
return RWSTF7M;
}

public byte getRWSTF8() {
return RWSTF8;
}

public byte getRWSTF85M() {
return RWSTF85M;
}

public byte getRWSTF8M() {
return RWSTF8M;
}

public byte getRWSTF9() {
return RWSTF9;
}

public byte getRWSTF95() {
return RWSTF95;
}

public byte getRWSTF9M() {
return RWSTF9M;
}

public boolean getRWSTI() {
return RWSTI;
}

public boolean getRWSTI10() {
return RWSTI10;
}

public boolean getRWSTI11() {
return RWSTI11;
}

public boolean getRWSTI12() {
return RWSTI12;
}

public boolean getRWSTI13() {
return RWSTI13;
}

public boolean getRWSTI14() {
return RWSTI14;
}

public boolean getRWSTI15() {
return RWSTI15;
}

public boolean getRWSTI16() {
return RWSTI16;
}

public boolean getRWSTI17() {
return RWSTI17;
}

public boolean getRWSTI18() {
return RWSTI18;
}

public boolean getRWSTI19() {
return RWSTI19;
}

public boolean getRWSTI2() {
return RWSTI2;
}

public boolean getRWSTI20() {
return RWSTI20;
}

public boolean getRWSTI3() {
return RWSTI3;
}

public boolean getRWSTI4() {
return RWSTI4;
}

public boolean getRWSTI5() {
return RWSTI5;
}

public boolean getRWSTI6() {
return RWSTI6;
}

public boolean getRWSTI7() {
return RWSTI7;
}

public boolean getRWSTI8() {
return RWSTI8;
}

public boolean getRWSTI9() {
return RWSTI9;
}

public byte getSAMPSTA() {
return SAMPSTA;
}

public byte getSCABNLC() {
return SCABNLC;
}

public double getSCABNP() {
return SCABNP;
}

public byte getSCABNSC() {
return SCABNSC;
}

public byte getSCABSLC() {
return SCABSLC;
}

public double getSCABSP() {
return SCABSP;
}

public byte getSCABSSC() {
return SCABSSC;
}

public byte getSCACTA() {
return SCACTA;
}

public byte getSCACTB() {
return SCACTB;
}

public byte getSCACTC() {
return SCACTC;
}

public byte getSCACTD() {
return SCACTD;
}

public byte getSCAKO() {
return SCAKO;
}

public byte getSCAL7A() {
return SCAL7A;
}

public byte getSCAL7B() {
return SCAL7B;
}

public byte getSCAPOPG() {
return SCAPOPG;
}

public byte getSCASHER() {
return SCASHER;
}

public byte getSCASPIR() {
return SCASPIR;
}

public byte getSCAWIN() {
return SCAWIN;
}

public byte getSCDCA() {
return SCDCA;
}

public byte getSCDCC() {
return SCDCC;
}

public byte getSCDCD() {
return SCDCD;
}

public byte getSCDCE() {
return SCDCE;
}

public byte getSCDCG() {
return SCDCG;
}

public byte getSCDRI01() {
return SCDRI01;
}

public byte getSCDRI02() {
return SCDRI02;
}

public byte getSCDRI03() {
return SCDRI03;
}

public byte getSCDRI04() {
return SCDRI04;
}

public byte getSCDRI05() {
return SCDRI05;
}

public byte getSCDRI06() {
return SCDRI06;
}

public byte getSCDRI07() {
return SCDRI07;
}

public byte getSCEMPL() {
return SCEMPL;
}

public byte getSCFAMH() {
return SCFAMH;
}

public byte getSCFAMM() {
return SCFAMM;
}

public byte getSCFEELA() {
return SCFEELA;
}

public byte getSCFEELB() {
return SCFEELB;
}

public byte getSCFEELC() {
return SCFEELC;
}

public byte getSCFEELD() {
return SCFEELD;
}

public byte getSCFEELE() {
return SCFEELE;
}

public byte getSCFRDM() {
return SCFRDM;
}

public byte getSCFRUIA() {
return SCFRUIA;
}

public byte getSCFRUIB() {
return SCFRUIB;
}

public byte getSCFRUIC() {
return SCFRUIC;
}

public byte getSCFRUID() {
return SCFRUID;
}

public byte getSCFRUIE() {
return SCFRUIE;
}

public byte getSCFRUIF() {
return SCFRUIF;
}

public byte getSCFRUIG() {
return SCFRUIG;
}

public byte getSCFRUIH() {
return SCFRUIH;
}

public byte getSCFRUII() {
return SCFRUII;
}

public byte getSCGHQA() {
return SCGHQA;
}

public byte getSCGHQB() {
return SCGHQB;
}

public byte getSCGHQC() {
return SCGHQC;
}

public byte getSCGHQD() {
return SCGHQD;
}

public byte getSCGHQE() {
return SCGHQE;
}

public byte getSCGHQF() {
return SCGHQF;
}

public byte getSCGHQG() {
return SCGHQG;
}

public byte getSCGHQH() {
return SCGHQH;
}

public byte getSCGHQI() {
return SCGHQI;
}

public byte getSCGHQJ() {
return SCGHQJ;
}

public byte getSCGHQK() {
return SCGHQK;
}

public byte getSCGHQL() {
return SCGHQL;
}

public byte getSCLADDC() {
return SCLADDC;
}

public byte getSCLIFEA() {
return SCLIFEA;
}

public byte getSCLIFEB() {
return SCLIFEB;
}

public byte getSCLIFEC() {
return SCLIFEC;
}

public byte getSCLIFED() {
return SCLIFED;
}

public byte getSCLIFEE() {
return SCLIFEE;
}

public byte getSCMOREA() {
return SCMOREA;
}

public byte getSCMOREB() {
return SCMOREB;
}

public byte getSCMOREC() {
return SCMOREC;
}

public byte getSCMORED() {
return SCMORED;
}

public byte getSCORG01() {
return SCORG01;
}

public byte getSCORG02() {
return SCORG02;
}

public byte getSCORG03() {
return SCORG03;
}

public byte getSCORG04() {
return SCORG04;
}

public byte getSCORG05() {
return SCORG05;
}

public byte getSCORG06() {
return SCORG06;
}

public byte getSCORG07() {
return SCORG07;
}

public byte getSCORG08() {
return SCORG08;
}

public byte getSCORG09() {
return SCORG09;
}

public byte getSCPT01() {
return SCPT01;
}

public byte getSCPT02() {
return SCPT02;
}

public byte getSCPT03() {
return SCPT03;
}

public byte getSCPT04() {
return SCPT04;
}

public byte getSCPT05() {
return SCPT05;
}

public byte getSCPT06() {
return SCPT06;
}

public byte getSCPT07() {
return SCPT07;
}

public byte getSCPT08() {
return SCPT08;
}

public byte getSCPT09() {
return SCPT09;
}

public byte getSCPTR() {
return SCPTR;
}

public byte getSCPTRA() {
return SCPTRA;
}

public byte getSCPTRB() {
return SCPTRB;
}

public byte getSCPTRC() {
return SCPTRC;
}

public byte getSCPTRD() {
return SCPTRD;
}

public byte getSCPTRE() {
return SCPTRE;
}

public byte getSCPTRF() {
return SCPTRF;
}

public byte getSCPTRG() {
return SCPTRG;
}

public byte getSCREC() {
return SCREC;
}

public short getSCRTAGE() {
return SCRTAGE;
}

public byte getSCSCA() {
return SCSCA;
}

public byte getSCSCB() {
return SCSCB;
}

public byte getSCSCC() {
return SCSCC;
}

public byte getSCSCD() {
return SCSCD;
}

public byte getSCSCE() {
return SCSCE;
}

public byte getSCSCF() {
return SCSCF;
}

public byte getSCSCG() {
return SCSCG;
}

public byte getSCSCH() {
return SCSCH;
}

public byte getSCSCI() {
return SCSCI;
}

public byte getSCVEGA() {
return SCVEGA;
}

public byte getSCVEGB() {
return SCVEGB;
}

public byte getSCVEGC() {
return SCVEGC;
}

public byte getSCVEGD() {
return SCVEGD;
}

public byte getSCWORKA() {
return SCWORKA;
}

public byte getSCWORKB() {
return SCWORKB;
}

public byte getSCWORKC() {
return SCWORKC;
}

public byte getSCWORKD() {
return SCWORKD;
}

public byte getSCWORKE() {
return SCWORKE;
}

public byte getSCWORKF() {
return SCWORKF;
}

public byte getSCWORKG() {
return SCWORKG;
}

public byte getSCWORKH() {
return SCWORKH;
}

public byte getSCWORKI() {
return SCWORKI;
}

public byte getSCWORKJ() {
return SCWORKJ;
}

public byte getSCWORKK() {
return SCWORKK;
}

public byte getSCWORKL() {
return SCWORKL;
}

public byte getSHACHE1() {
return SHACHE1;
}

public byte getSHACHE2() {
return SHACHE2;
}

public byte getSHACHE3() {
return SHACHE3;
}

public byte getSHACHE4() {
return SHACHE4;
}

public byte getSHMEM1() {
return SHMEM1;
}

public byte getSHMEM2() {
return SHMEM2;
}

public byte getSHMEM3() {
return SHMEM3;
}

public byte getSHMEM4() {
return SHMEM4;
}

public byte getSHMOB1() {
return SHMOB1;
}

public byte getSHMOB2() {
return SHMOB2;
}

public byte getSHMOB3() {
return SHMOB3;
}

public byte getSHMOB4() {
return SHMOB4;
}

public byte getSHRESP1() {
return SHRESP1;
}

public byte getSHRESP2() {
return SHRESP2;
}

public byte getSHRESP3() {
return SHRESP3;
}

public byte getSHRESP4() {
return SHRESP4;
}

public byte getSHSAD1() {
return SHSAD1;
}

public byte getSHSAD2() {
return SHSAD2;
}

public byte getSHSAD3() {
return SHSAD3;
}

public byte getSHSAD4() {
return SHSAD4;
}

public byte getSHWAKE1() {
return SHWAKE1;
}

public byte getSHWAKE2() {
return SHWAKE2;
}

public byte getSHWAKE3() {
return SHWAKE3;
}

public byte getSHWAKE4() {
return SHWAKE4;
}

public byte getSHWORK1() {
return SHWORK1;
}

public byte getSPCARA() {
return SPCARA;
}

public byte getSPCARB() {
return SPCARB;
}

public byte getSPDTDT() {
return SPDTDT;
}

public byte getSPHOSP() {
return SPHOSP;
}

public byte getSPLIFT() {
return SPLIFT;
}

public byte getSPTAXI() {
return SPTAXI;
}

public byte getSPTR96() {
return SPTR96;
}

public byte getSPTRB95() {
return SPTRB95;
}

public byte getSPTRBCON() {
return SPTRBCON;
}

public byte getSPTRBDES() {
return SPTRBDES;
}

public byte getSPTRBDIR() {
return SPTRBDIR;
}

public byte getSPTRBEXP() {
return SPTRBEXP;
}

public byte getSPTRBFEA() {
return SPTRBFEA;
}

public byte getSPTRBFRE() {
return SPTRBFRE;
}

public byte getSPTRBHEA() {
return SPTRBHEA;
}

public byte getSPTRBNEE() {
return SPTRBNEE;
}

public byte getSPTRBUNA() {
return SPTRBUNA;
}

public byte getSPTRBUNR() {
return SPTRBUNR;
}

public byte getSPTRBWAL() {
return SPTRBWAL;
}

public byte getSPTRCOM() {
return SPTRCOM;
}

public byte getSPTRFAM() {
return SPTRFAM;
}

public byte getSPTRHOS() {
return SPTRHOS;
}

public byte getSPTRM85() {
return SPTRM85;
}

public byte getSPTRM86() {
return SPTRM86;
}

public byte getSPTRMCON() {
return SPTRMCON;
}

public byte getSPTRMDES() {
return SPTRMDES;
}

public byte getSPTRMDIR() {
return SPTRMDIR;
}

public byte getSPTRMEXP() {
return SPTRMEXP;
}

public byte getSPTRMFEA() {
return SPTRMFEA;
}

public byte getSPTRMFRE() {
return SPTRMFRE;
}

public byte getSPTRMHEA() {
return SPTRMHEA;
}

public byte getSPTRMNEE() {
return SPTRMNEE;
}

public byte getSPTRMUNA() {
return SPTRMUNA;
}

public byte getSPTRMUNR() {
return SPTRMUNR;
}

public byte getSPTRMWAL() {
return SPTRMWAL;
}

public byte getSPTRTAX() {
return SPTRTAX;
}

public double getSTPENW_06() {
return STPENW_06;
}

public double getSTPENW_SPA() {
return STPENW_SPA;
}

public byte getSWACHE1() {
return SWACHE1;
}

public byte getSWACHE2() {
return SWACHE2;
}

public byte getSWACHE3() {
return SWACHE3;
}

public byte getSWACHE4() {
return SWACHE4;
}

public byte getSWMEM1() {
return SWMEM1;
}

public byte getSWMOB1() {
return SWMOB1;
}

public byte getSWMOB2() {
return SWMOB2;
}

public byte getSWMOB3() {
return SWMOB3;
}

public byte getSWMOB4() {
return SWMOB4;
}

public byte getSWRESP1() {
return SWRESP1;
}

public byte getSWSAD1() {
return SWSAD1;
}

public byte getSWSAD2() {
return SWSAD2;
}

public byte getSWSAD3() {
return SWSAD3;
}

public byte getSWSAD4() {
return SWSAD4;
}

public byte getSWWAKE1() {
return SWWAKE1;
}

public byte getSWWORK1() {
return SWWORK1;
}

public byte getTOTALPSC() {
return TOTALPSC;
}

public double getTOTPENW_06() {
return TOTPENW_06;
}

public double getTOTPENW_SPA() {
return TOTPENW_SPA;
}

public String getVERSION() {
return VERSION;
}

public byte getW3EDQUAL() {
return W3EDQUAL;
}

public short getW3HHOUT() {
return W3HHOUT;
}

public byte getW3INDOUT() {
return W3INDOUT;
}

public double getW3LWGT() {
return W3LWGT;
}

public double getW3NSSEC() {
return W3NSSEC;
}

public double getW3NSSEC13() {
return W3NSSEC13;
}

public byte getW3NSSEC3() {
return W3NSSEC3;
}

public byte getW3NSSEC5() {
return W3NSSEC5;
}

public byte getW3NSSEC8() {
return W3NSSEC8;
}

public byte getW3NSSECMIS() {
return W3NSSECMIS;
}

public byte getW3OTHERQ() {
return W3OTHERQ;
}

public short getW3RINDOUT() {
return W3RINDOUT;
}

public boolean getW3SEC() {
return W3SEC;
}

public boolean getW3SIC() {
return W3SIC;
}

public byte getW3SIC92() {
return W3SIC92;
}

public byte getW3SIC92MIS() {
return W3SIC92MIS;
}

public boolean getW3SOC() {
return W3SOC;
}

public byte getW3SOC2000() {
return W3SOC2000;
}

public byte getW3SOC2000MIS() {
return W3SOC2000MIS;
}

public double getW3XWGT() {
return W3XWGT;
}

public byte getWHOSO4() {
return WHOSO4;
}

public byte getWHOSO5() {
return WHOSO5;
}

public double getWIDPEN_06() {
return WIDPEN_06;
}

public double getWIDPEN_SPA() {
return WIDPEN_SPA;
}

public int getWP1Q() {
return WP1Q;
}

public int getWP1SQ() {
return WP1SQ;
}

public int getWP2Q() {
return WP2Q;
}

public int getWP2SQ() {
return WP2SQ;
}

public int getWP3Q() {
return WP3Q;
}

public int getWP3SQ() {
return WP3SQ;
}

public byte getWPACHG() {
return WPACHG;
}

public byte getWPACT96() {
return WPACT96;
}

public byte getWPACTCA() {
return WPACTCA;
}

public byte getWPACTED() {
return WPACTED;
}

public byte getWPACTLO() {
return WPACTLO;
}

public byte getWPACTPW() {
return WPACTPW;
}

public byte getWPACTSE() {
return WPACTSE;
}

public byte getWPACTVW() {
return WPACTVW;
}

public byte getWPADDP() {
return WPADDP;
}

public short getWPAECP() {
return WPAECP;
}

public byte getWPANYP() {
return WPANYP;
}

public byte getWPAOTFE() {
return WPAOTFE;
}

public short getWPAOTFL() {
return WPAOTFL;
}

public byte getWPAOTFR() {
return WPAOTFR;
}

public short getWPAOTFU() {
return WPAOTFU;
}

public byte getWPAOTME() {
return WPAOTME;
}

public short getWPAOTML() {
return WPAOTML;
}

public byte getWPAOTMR() {
return WPAOTMR;
}

public short getWPAOTMU() {
return WPAOTMU;
}

public byte getWPAOTOE() {
return WPAOTOE;
}

public short getWPAOTOL() {
return WPAOTOL;
}

public byte getWPAOTOR() {
return WPAOTOR;
}

public short getWPAOTOU() {
return WPAOTOU;
}

public byte getWPAOTWE() {
return WPAOTWE;
}

public short getWPAOTWL() {
return WPAOTWL;
}

public byte getWPAOTWR() {
return WPAOTWR;
}

public short getWPAOTWU() {
return WPAOTWU;
}

public byte getWPAOTYE() {
return WPAOTYE;
}

public int getWPAOTYL() {
return WPAOTYL;
}

public byte getWPAOTYR() {
return WPAOTYR;
}

public int getWPAOTYU() {
return WPAOTYU;
}

public byte getWPAPFE() {
return WPAPFE;
}

public double getWPAPFL() {
return WPAPFL;
}

public byte getWPAPFR() {
return WPAPFR;
}

public double getWPAPFU() {
return WPAPFU;
}

public double getWPAPS() {
return WPAPS;
}

public byte getWPASE() {
return WPASE;
}

public byte getWPASKD() {
return WPASKD;
}

public byte getWPASKE() {
return WPASKE;
}

public byte getWPASKF() {
return WPASKF;
}

public int getWPASL() {
return WPASL;
}

public byte getWPASR() {
return WPASR;
}

public int getWPASU() {
return WPASU;
}

public byte getWPBCH95() {
return WPBCH95;
}

public byte getWPBCHAD() {
return WPBCHAD;
}

public byte getWPBCHFL() {
return WPBCHFL;
}

public byte getWPBCHHO() {
return WPBCHHO;
}

public byte getWPBCHHR() {
return WPBCHHR;
}

public byte getWPBCHME() {
return WPBCHME;
}

public byte getWPBCHPH() {
return WPBCHPH;
}

public byte getWPBIMAE() {
return WPBIMAE;
}

public short getWPBIMAL() {
return WPBIMAL;
}

public byte getWPBIMAR() {
return WPBIMAR;
}

public short getWPBIMAU() {
return WPBIMAU;
}

public byte getWPBIWAE() {
return WPBIWAE;
}

public short getWPBIWAL() {
return WPBIWAL;
}

public byte getWPBIWAR() {
return WPBIWAR;
}

public short getWPBIWAU() {
return WPBIWAU;
}

public double getWPBPPS() {
return WPBPPS;
}

public byte getWPBPS() {
return WPBPS;
}

public byte getWPBPSP() {
return WPBPSP;
}

public byte getWPBUSVE() {
return WPBUSVE;
}

public int getWPBUSVL() {
return WPBUSVL;
}

public byte getWPBUSVR() {
return WPBUSVR;
}

public int getWPBUSVU() {
return WPBUSVU;
}

public byte getWPCH96() {
return WPCH96;
}

public byte getWPCHAD() {
return WPCHAD;
}

public byte getWPCHB95() {
return WPCHB95;
}

public byte getWPCHBAD() {
return WPCHBAD;
}

public byte getWPCHBFL() {
return WPCHBFL;
}

public byte getWPCHBHO() {
return WPCHBHO;
}

public byte getWPCHBHR() {
return WPCHBHR;
}

public byte getWPCHBME() {
return WPCHBME;
}

public byte getWPCHBPH() {
return WPCHBPH;
}

public byte getWPCHD96() {
return WPCHD96;
}

public byte getWPCHDAD() {
return WPCHDAD;
}

public byte getWPCHDFL() {
return WPCHDFL;
}

public byte getWPCHDHO() {
return WPCHDHO;
}

public byte getWPCHDHR() {
return WPCHDHR;
}

public byte getWPCHDM85() {
return WPCHDM85;
}

public byte getWPCHDM86() {
return WPCHDM86;
}

public byte getWPCHDM96() {
return WPCHDM96;
}

public byte getWPCHDMAD() {
return WPCHDMAD;
}

public byte getWPCHDMCO() {
return WPCHDMCO;
}

public byte getWPCHDME() {
return WPCHDME;
}

public byte getWPCHDMFL() {
return WPCHDMFL;
}

public byte getWPCHDMHO() {
return WPCHDMHO;
}

public byte getWPCHDMHR() {
return WPCHDMHR;
}

public byte getWPCHDMME() {
return WPCHDMME;
}

public byte getWPCHDMPH() {
return WPCHDMPH;
}

public byte getWPCHDPH() {
return WPCHDPH;
}

public byte getWPCHFL() {
return WPCHFL;
}

public byte getWPCHGA() {
return WPCHGA;
}

public byte getWPCHGDN() {
return WPCHGDN;
}

public byte getWPCHGNO() {
return WPCHGNO;
}

public byte getWPCHGO() {
return WPCHGO;
}

public byte getWPCHHO() {
return WPCHHO;
}

public byte getWPCHHR() {
return WPCHHR;
}

public byte getWPCHL95() {
return WPCHL95;
}

public byte getWPCHL96() {
return WPCHL96;
}

public byte getWPCHLAD() {
return WPCHLAD;
}

public byte getWPCHLFL() {
return WPCHLFL;
}

public byte getWPCHLHO() {
return WPCHLHO;
}

public byte getWPCHLHR() {
return WPCHLHR;
}

public byte getWPCHLM85() {
return WPCHLM85;
}

public boolean getWPCHLM86() {
return WPCHLM86;
}

public byte getWPCHLM96() {
return WPCHLM96;
}

public byte getWPCHLMAD() {
return WPCHLMAD;
}

public byte getWPCHLME() {
return WPCHLME;
}

public byte getWPCHLMFL() {
return WPCHLMFL;
}

public byte getWPCHLMHO() {
return WPCHLMHO;
}

public byte getWPCHLMHR() {
return WPCHLMHR;
}

public byte getWPCHLMME() {
return WPCHLMME;
}

public byte getWPCHLMPH() {
return WPCHLMPH;
}

public byte getWPCHLPH() {
return WPCHLPH;
}

public byte getWPCHM85() {
return WPCHM85;
}

public byte getWPCHM86() {
return WPCHM86;
}

public byte getWPCHM96() {
return WPCHM96;
}

public byte getWPCHMAD() {
return WPCHMAD;
}

public byte getWPCHMBO() {
return WPCHMBO;
}

public byte getWPCHME() {
return WPCHME;
}

public byte getWPCHMFL() {
return WPCHMFL;
}

public byte getWPCHMHO() {
return WPCHMHO;
}

public byte getWPCHMHR() {
return WPCHMHR;
}

public byte getWPCHMME() {
return WPCHMME;
}

public byte getWPCHMPH() {
return WPCHMPH;
}

public byte getWPCHMSA() {
return WPCHMSA;
}

public byte getWPCHPH() {
return WPCHPH;
}

public byte getWPCJ96() {
return WPCJ96;
}

public byte getWPCJAG() {
return WPCJAG;
}

public byte getWPCJBU() {
return WPCJBU;
}

public byte getWPCJDI() {
return WPCJDI;
}

public byte getWPCJFR() {
return WPCJFR;
}

public byte getWPCJPA() {
return WPCJPA;
}

public byte getWPCJSC() {
return WPCJSC;
}

public byte getWPCJSE() {
return WPCJSE;
}

public byte getWPCONS() {
return WPCONS;
}

public byte getWPCOS() {
return WPCOS;
}

public byte getWPCRAGE() {
return WPCRAGE;
}

public byte getWPCRET() {
return WPCRET;
}

public byte getWPCRETL() {
return WPCRETL;
}

public byte getWPCURP() {
return WPCURP;
}

public byte getWPCURR() {
return WPCURR;
}

public byte getWPDCDB() {
return WPDCDB;
}

public byte getWPDESC() {
return WPDESC;
}

public byte getWPDESP() {
return WPDESP;
}

public byte getWPDPSP() {
return WPDPSP;
}

public byte getWPEARLY() {
return WPEARLY;
}

public byte getWPEC() {
return WPEC;
}

public byte getWPECA() {
return WPECA;
}

public byte getWPECPP() {
return WPECPP;
}

public byte getWPERCP() {
return WPERCP;
}

public byte getWPESJME() {
return WPESJME;
}

public short getWPESJML() {
return WPESJML;
}

public byte getWPESJMR() {
return WPESJMR;
}

public short getWPESJMU() {
return WPESJMU;
}

public byte getWPEXW() {
return WPEXW;
}

public byte getWPFFCONS() {
return WPFFCONS;
}

public byte getWPFFCURP() {
return WPFFCURP;
}

public byte getWPFFDCDB() {
return WPFFDCDB;
}

public byte getWPFFPENT() {
return WPFFPENT;
}

public byte getWPFFRECP() {
return WPFFRECP;
}

public byte getWPFFYBS() {
return WPFFYBS;
}

public byte getWPFINFO() {
return WPFINFO;
}

public byte getWPFPN() {
return WPFPN;
}

public byte getWPFPR() {
return WPFPR;
}

public byte getWPFSC() {
return WPFSC;
}

public byte getWPFSEC() {
return WPFSEC;
}

public byte getWPHLWZ() {
return WPHLWZ;
}

public byte getWPIFS95() {
return WPIFS95;
}

public byte getWPIFSAC() {
return WPIFSAC;
}

public byte getWPIFSCO() {
return WPIFSCO;
}

public byte getWPIFSEM() {
return WPIFSEM;
}

public byte getWPIFSFA() {
return WPIFSFA;
}

public byte getWPIFSNO() {
return WPIFSNO;
}

public byte getWPIFSPR() {
return WPIFSPR;
}

public byte getWPIFSRE() {
return WPIFSRE;
}

public byte getWPIFSRP() {
return WPIFSRP;
}

public double getWPINCD() {
return WPINCD;
}

public byte getWPINCE() {
return WPINCE;
}

public int getWPINCL() {
return WPINCL;
}

public byte getWPINCR() {
return WPINCR;
}

public short getWPINCU() {
return WPINCU;
}

public byte getWPLCH95() {
return WPLCH95;
}

public byte getWPLCH96() {
return WPLCH96;
}

public byte getWPLCHAD() {
return WPLCHAD;
}

public byte getWPLCHFL() {
return WPLCHFL;
}

public byte getWPLCHHO() {
return WPLCHHO;
}

public byte getWPLCHHR() {
return WPLCHHR;
}

public byte getWPLCHM85() {
return WPLCHM85;
}

public byte getWPLCHM86() {
return WPLCHM86;
}

public byte getWPLCHMAD() {
return WPLCHMAD;
}

public byte getWPLCHMBO() {
return WPLCHMBO;
}

public byte getWPLCHMCO() {
return WPLCHMCO;
}

public byte getWPLCHMDE() {
return WPLCHMDE;
}

public byte getWPLCHME() {
return WPLCHME;
}

public byte getWPLCHMFL() {
return WPLCHMFL;
}

public byte getWPLCHMHO() {
return WPLCHMHO;
}

public byte getWPLCHMHR() {
return WPLCHMHR;
}

public byte getWPLCHMLH() {
return WPLCHMLH;
}

public byte getWPLCHMLO() {
return WPLCHMLO;
}

public byte getWPLCHMME() {
return WPLCHMME;
}

public byte getWPLCHMPH() {
return WPLCHMPH;
}

public byte getWPLCHMRT() {
return WPLCHMRT;
}

public byte getWPLCHMSA() {
return WPLCHMSA;
}

public byte getWPLCHPH() {
return WPLCHPH;
}

public byte getWPLFTP95() {
return WPLFTP95;
}

public byte getWPLFTPAF() {
return WPLFTPAF;
}

public byte getWPLFTPCH() {
return WPLFTPCH;
}

public byte getWPLFTPEL() {
return WPLFTPEL;
}

public byte getWPLFTPOF() {
return WPLFTPOF;
}

public byte getWPLFTPRE() {
return WPLFTPRE;
}

public byte getWPLFTPRT() {
return WPLFTPRT;
}

public byte getWPLIMWK() {
return WPLIMWK;
}

public byte getWPLJO95() {
return WPLJO95;
}

public byte getWPLJOBM() {
return WPLJOBM;
}

public byte getWPLJOCA() {
return WPLJOCA;
}

public byte getWPLJOCL() {
return WPLJOCL;
}

public byte getWPLJODI() {
return WPLJODI;
}

public byte getWPLJOFE() {
return WPLJOFE;
}

public byte getWPLJOIL() {
return WPLJOIL;
}

public byte getWPLJOM85() {
return WPLJOM85;
}

public byte getWPLJOM86() {
return WPLJOM86;
}

public byte getWPLJOMBE() {
return WPLJOMBE;
}

public byte getWPLJOMCA() {
return WPLJOMCA;
}

public byte getWPLJOMCF() {
return WPLJOMCF;
}

public byte getWPLJOMCL() {
return WPLJOMCL;
}

public byte getWPLJOMDI() {
return WPLJOMDI;
}

public byte getWPLJOMER() {
return WPLJOMER;
}

public byte getWPLJOMFE() {
return WPLJOMFE;
}

public byte getWPLJOMIL() {
return WPLJOMIL;
}

public byte getWPLJOMME() {
return WPLJOMME;
}

public byte getWPLJOMMO() {
return WPLJOMMO;
}

public byte getWPLJOMO() {
return WPLJOMO;
}

public byte getWPLJOMPR() {
return WPLJOMPR;
}

public byte getWPLJOMRE() {
return WPLJOMRE;
}

public byte getWPLJOMSA() {
return WPLJOMSA;
}

public byte getWPLJOMSE() {
return WPLJOMSE;
}

public byte getWPLJOMSP() {
return WPLJOMSP;
}

public byte getWPLJOMTI() {
return WPLJOMTI;
}

public byte getWPLJOMVO() {
return WPLJOMVO;
}

public byte getWPLJORE() {
return WPLJORE;
}

public byte getWPLJOSP() {
return WPLJOSP;
}

public byte getWPLJOTI() {
return WPLJOTI;
}

public byte getWPLJOVO() {
return WPLJOVO;
}

public byte getWPLLJM() {
return WPLLJM;
}

public short getWPLLJY() {
return WPLLJY;
}

public byte getWPLLSM() {
return WPLLSM;
}

public short getWPLLSY() {
return WPLLSY;
}

public byte getWPLPEM() {
return WPLPEM;
}

public byte getWPLPEM2() {
return WPLPEM2;
}

public byte getWPLPEM3() {
return WPLPEM3;
}

public byte getWPLPEM4() {
return WPLPEM4;
}

public byte getWPLPEM5() {
return WPLPEM5;
}

public short getWPLPEY() {
return WPLPEY;
}

public short getWPLPEY2() {
return WPLPEY2;
}

public short getWPLPEY3() {
return WPLPEY3;
}

public short getWPLPEY4() {
return WPLPEY4;
}

public short getWPLPEY5() {
return WPLPEY5;
}

public byte getWPLPSM() {
return WPLPSM;
}

public byte getWPLPSM2() {
return WPLPSM2;
}

public byte getWPLPSM3() {
return WPLPSM3;
}

public byte getWPLPSM4() {
return WPLPSM4;
}

public byte getWPLPSM5() {
return WPLPSM5;
}

public short getWPLPSY() {
return WPLPSY;
}

public short getWPLPSY2() {
return WPLPSY2;
}

public short getWPLPSY3() {
return WPLPSY3;
}

public short getWPLPSY4() {
return WPLPSY4;
}

public short getWPLPSY5() {
return WPLPSY5;
}

public byte getWPLUAE() {
return WPLUAE;
}

public double getWPLUAL() {
return WPLUAL;
}

public byte getWPLUAR() {
return WPLUAR;
}

public double getWPLUAU() {
return WPLUAU;
}

public byte getWPLUME() {
return WPLUME;
}

public int getWPLUML() {
return WPLUML;
}

public byte getWPLUMR() {
return WPLUMR;
}

public int getWPLUMU() {
return WPLUMU;
}

public double getWPLUPA() {
return WPLUPA;
}

public byte getWPLUPS() {
return WPLUPS;
}

public int getWPMALA() {
return WPMALA;
}

public byte getWPMANPP() {
return WPMANPP;
}

public byte getWPMANSP() {
return WPMANSP;
}

public byte getWPMFQ() {
return WPMFQ;
}

public byte getWPMFRC() {
return WPMFRC;
}

public byte getWPMHIE() {
return WPMHIE;
}

public short getWPMHIL() {
return WPMHIL;
}

public byte getWPMHIR() {
return WPMHIR;
}

public short getWPMHIU() {
return WPMHIU;
}

public byte getWPMORE() {
return WPMORE;
}

public byte getWPMORP() {
return WPMORP;
}

public int getWPMPAH() {
return WPMPAH;
}

public int getWPMSAH() {
return WPMSAH;
}

public byte getWPMSFQ() {
return WPMSFQ;
}

public int getWPMSH() {
return WPMSH;
}

public byte getWPMSQ() {
return WPMSQ;
}

public byte getWPMSSQ() {
return WPMSSQ;
}

public byte getWPMSTQ() {
return WPMSTQ;
}

public byte getWPMTQ() {
return WPMTQ;
}

public byte getWPMYNJ() {
return WPMYNJ;
}

public byte getWPNCBM85() {
return WPNCBM85;
}

public byte getWPNCBM86() {
return WPNCBM86;
}

public byte getWPNCBMAD() {
return WPNCBMAD;
}

public byte getWPNCBMCO() {
return WPNCBMCO;
}

public byte getWPNCBMFL() {
return WPNCBMFL;
}

public byte getWPNCBMHO() {
return WPNCBMHO;
}

public byte getWPNCBMHR() {
return WPNCBMHR;
}

public byte getWPNCBMME() {
return WPNCBMME;
}

public byte getWPNCBMPH() {
return WPNCBMPH;
}

public byte getWPNCH96() {
return WPNCH96;
}

public byte getWPNCHAD() {
return WPNCHAD;
}

public byte getWPNCHB85() {
return WPNCHB85;
}

public byte getWPNCHBAD() {
return WPNCHBAD;
}

public byte getWPNCHBFL() {
return WPNCHBFL;
}

public byte getWPNCHBHO() {
return WPNCHBHO;
}

public byte getWPNCHBHR() {
return WPNCHBHR;
}

public byte getWPNCHBME() {
return WPNCHBME;
}

public byte getWPNCHBPH() {
return WPNCHBPH;
}

public byte getWPNCHFL() {
return WPNCHFL;
}

public byte getWPNCHGA() {
return WPNCHGA;
}

public byte getWPNCHGN() {
return WPNCHGN;
}

public byte getWPNCHGO() {
return WPNCHGO;
}

public byte getWPNCHHO() {
return WPNCHHO;
}

public byte getWPNCHHR() {
return WPNCHHR;
}

public byte getWPNCHM85() {
return WPNCHM85;
}

public byte getWPNCHM86() {
return WPNCHM86;
}

public byte getWPNCHM96() {
return WPNCHM96;
}

public byte getWPNCHMAD() {
return WPNCHMAD;
}

public byte getWPNCHMCO() {
return WPNCHMCO;
}

public byte getWPNCHME() {
return WPNCHME;
}

public byte getWPNCHMFL() {
return WPNCHMFL;
}

public byte getWPNCHMHO() {
return WPNCHMHO;
}

public byte getWPNCHMHR() {
return WPNCHMHR;
}

public byte getWPNCHMME() {
return WPNCHMME;
}

public byte getWPNCHMPH() {
return WPNCHMPH;
}

public byte getWPNCHPH() {
return WPNCHPH;
}

public byte getWPNEW() {
return WPNEW;
}

public boolean getWPNEWP() {
return WPNEWP;
}

public byte getWPNLK95() {
return WPNLK95;
}

public byte getWPNLKDI() {
return WPNLKDI;
}

public byte getWPNLKLO() {
return WPNLKLO;
}

public boolean getWPNLKM85() {
return WPNLKM85;
}

public boolean getWPNLKM86() {
return WPNLKM86;
}

public byte getWPNLKMAC() {
return WPNLKMAC;
}

public byte getWPNLKMCM() {
return WPNLKMCM;
}

public byte getWPNLKMCN() {
return WPNLKMCN;
}

public byte getWPNLKMCO() {
return WPNLKMCO;
}

public byte getWPNLKMDE() {
return WPNLKMDE;
}

public byte getWPNLKMDI() {
return WPNLKMDI;
}

public byte getWPNLKMEN() {
return WPNLKMEN;
}

public byte getWPNLKMFI() {
return WPNLKMFI;
}

public byte getWPNLKMFR() {
return WPNLKMFR;
}

public byte getWPNLKMHR() {
return WPNLKMHR;
}

public byte getWPNLKMLO() {
return WPNLKMLO;
}

public byte getWPNLKMNO() {
return WPNLKMNO;
}

public byte getWPNLKMPA() {
return WPNLKMPA;
}

public byte getWPNLKMPE() {
return WPNLKMPE;
}

public byte getWPNLKMRT() {
return WPNLKMRT;
}

public byte getWPNLKMSE() {
return WPNLKMSE;
}

public byte getWPNLKMSU() {
return WPNLKMSU;
}

public byte getWPNLKPA() {
return WPNLKPA;
}

public byte getWPNLKPE() {
return WPNLKPE;
}

public byte getWPNLKRT() {
return WPNLKRT;
}

public byte getWPNLKSU() {
return WPNLKSU;
}

public byte getWPNPENS() {
return WPNPENS;
}

public byte getWPOCHG() {
return WPOCHG;
}

public byte getWPOJ() {
return WPOJ;
}

public byte getWPOJ2() {
return WPOJ2;
}

public byte getWPOJ3() {
return WPOJ3;
}

public byte getWPOJ4() {
return WPOJ4;
}

public byte getWPOJ5() {
return WPOJ5;
}

public byte getWPOWB() {
return WPOWB;
}

public byte getWPOWB2() {
return WPOWB2;
}

public byte getWPOWB3() {
return WPOWB3;
}

public byte getWPOWB4() {
return WPOWB4;
}

public byte getWPOWB5() {
return WPOWB5;
}

public byte getWPPEAE() {
return WPPEAE;
}

public int getWPPEAL() {
return WPPEAL;
}

public byte getWPPEAR() {
return WPPEAR;
}

public int getWPPEAU() {
return WPPEAU;
}

public byte getWPPENN() {
return WPPENN;
}

public byte getWPPENT() {
return WPPENT;
}

public byte getWPPETE() {
return WPPETE;
}

public int getWPPETL() {
return WPPETL;
}

public byte getWPPETR() {
return WPPETR;
}

public int getWPPETU() {
return WPPETU;
}

public byte getWPPFDM() {
return WPPFDM;
}

public short getWPPFDY() {
return WPPFDY;
}

public byte getWPPFEX() {
return WPPFEX;
}

public byte getWPPFVE() {
return WPPFVE;
}

public double getWPPFVL() {
return WPPFVL;
}

public byte getWPPFVR() {
return WPPFVR;
}

public double getWPPFVU() {
return WPPFVU;
}

public byte getWPPREV() {
return WPPREV;
}

public byte getWPPROFE() {
return WPPROFE;
}

public int getWPPROFL() {
return WPPROFL;
}

public byte getWPPROFR() {
return WPPROFR;
}

public int getWPPROFU() {
return WPPROFU;
}

public byte getWPPS() {
return WPPS;
}

public byte getWPPS95() {
return WPPS95;
}

public byte getWPPSAF() {
return WPPSAF;
}

public byte getWPPSEL() {
return WPPSEL;
}

public byte getWPPSEX() {
return WPPSEX;
}

public byte getWPPSM85() {
return WPPSM85;
}

public byte getWPPSM86() {
return WPPSM86;
}

public boolean getWPPSM96() {
return WPPSM96;
}

public byte getWPPSMAF() {
return WPPSMAF;
}

public byte getWPPSMAG() {
return WPPSMAG;
}

public byte getWPPSMAL() {
return WPPSMAL;
}

public byte getWPPSMDL() {
return WPPSMDL;
}

public byte getWPPSMEL() {
return WPPSMEL;
}

public byte getWPPSMEX() {
return WPPSMEX;
}

public byte getWPPSMHR() {
return WPPSMHR;
}

public byte getWPPSMOT() {
return WPPSMOT;
}

public byte getWPPSOT() {
return WPPSOT;
}

public byte getWPPSPC() {
return WPPSPC;
}

public boolean getWPPYFE() {
return WPPYFE;
}

public boolean getWPPYFL() {
return WPPYFL;
}

public boolean getWPPYFR() {
return WPPYFR;
}

public boolean getWPPYFU() {
return WPPYFU;
}

public byte getWPPYME() {
return WPPYME;
}

public short getWPPYML() {
return WPPYML;
}

public byte getWPPYMR() {
return WPPYMR;
}

public short getWPPYMU() {
return WPPYMU;
}

public byte getWPPYOE() {
return WPPYOE;
}

public short getWPPYOL() {
return WPPYOL;
}

public byte getWPPYOR() {
return WPPYOR;
}

public short getWPPYOU() {
return WPPYOU;
}

public byte getWPPYWE() {
return WPPYWE;
}

public byte getWPPYWL() {
return WPPYWL;
}

public byte getWPPYWR() {
return WPPYWR;
}

public short getWPPYWU() {
return WPPYWU;
}

public byte getWPPYYE() {
return WPPYYE;
}

public short getWPPYYL() {
return WPPYYL;
}

public byte getWPPYYR() {
return WPPYYR;
}

public short getWPPYYU() {
return WPPYYU;
}

public byte getWPQN() {
return WPQN;
}

public byte getWPRC95() {
return WPRC95;
}

public byte getWPRCM85() {
return WPRCM85;
}

public byte getWPRCM86() {
return WPRCM86;
}

public byte getWPRCMAF() {
return WPRCMAF;
}

public byte getWPRCMMO() {
return WPRCMMO;
}

public byte getWPRCMNK() {
return WPRCMNK;
}

public byte getWPRCMO() {
return WPRCMO;
}

public byte getWPRCMOH() {
return WPRCMOH;
}

public byte getWPRCMPU() {
return WPRCMPU;
}

public byte getWPRCMRE() {
return WPRCMRE;
}

public byte getWPRCMRI() {
return WPRCMRI;
}

public byte getWPRCMST() {
return WPRCMST;
}

public byte getWPRCMUN() {
return WPRCMUN;
}

public byte getWPRCPU() {
return WPRCPU;
}

public byte getWPRCRE() {
return WPRCRE;
}

public byte getWPRCRI() {
return WPRCRI;
}

public byte getWPRCST() {
return WPRCST;
}

public byte getWPREA95() {
return WPREA95;
}

public byte getWPREA96() {
return WPREA96;
}

public byte getWPREACH() {
return WPREACH;
}

public byte getWPREADT() {
return WPREADT;
}

public byte getWPREAEN() {
return WPREAEN;
}

public byte getWPREAFA() {
return WPREAFA;
}

public byte getWPREAFI() {
return WPREAFI;
}

public byte getWPREAM85() {
return WPREAM85;
}

public byte getWPREAM86() {
return WPREAM86;
}

public byte getWPREAM96() {
return WPREAM96;
}

public byte getWPREAMCH() {
return WPREAMCH;
}

public byte getWPREAMDT() {
return WPREAMDT;
}

public byte getWPREAMEN() {
return WPREAMEN;
}

public byte getWPREAMFA() {
return WPREAMFA;
}

public byte getWPREAMFI() {
return WPREAMFI;
}

public byte getWPREAMNO() {
return WPREAMNO;
}

public byte getWPREAMOH() {
return WPREAMOH;
}

public byte getWPREAMRE() {
return WPREAMRE;
}

public byte getWPREAMRH() {
return WPREAMRH;
}

public byte getWPREAMST() {
return WPREAMST;
}

public byte getWPREAMVR() {
return WPREAMVR;
}

public byte getWPREAMYO() {
return WPREAMYO;
}

public byte getWPREANO() {
return WPREANO;
}

public byte getWPREAOH() {
return WPREAOH;
}

public byte getWPREARE() {
return WPREARE;
}

public byte getWPREARH() {
return WPREARH;
}

public byte getWPREAST() {
return WPREAST;
}

public byte getWPREAVR() {
return WPREAVR;
}

public byte getWPREAYO() {
return WPREAYO;
}

public byte getWPRGHX() {
return WPRGHX;
}

public byte getWPRPENS() {
return WPRPENS;
}

public byte getWPRR95() {
return WPRR95;
}

public byte getWPRR96() {
return WPRR96;
}

public byte getWPRRAG() {
return WPRRAG;
}

public byte getWPRRCH() {
return WPRRCH;
}

public byte getWPRRDT() {
return WPRRDT;
}

public byte getWPRREN() {
return WPRREN;
}

public byte getWPRRFA() {
return WPRRFA;
}

public byte getWPRRFI() {
return WPRRFI;
}

public byte getWPRRM85() {
return WPRRM85;
}

public byte getWPRRM86() {
return WPRRM86;
}

public byte getWPRRM96() {
return WPRRM96;
}

public byte getWPRRMAF() {
return WPRRMAF;
}

public byte getWPRRMAG() {
return WPRRMAG;
}

public byte getWPRRMCH() {
return WPRRMCH;
}

public byte getWPRRMDT() {
return WPRRMDT;
}

public byte getWPRRMEN() {
return WPRRMEN;
}

public byte getWPRRMFA() {
return WPRRMFA;
}

public byte getWPRRMFI() {
return WPRRMFI;
}

public byte getWPRRMLI() {
return WPRRMLI;
}

public byte getWPRRMOH() {
return WPRRMOH;
}

public byte getWPRRMRE() {
return WPRRMRE;
}

public byte getWPRRMRH() {
return WPRRMRH;
}

public byte getWPRRMST() {
return WPRRMST;
}

public byte getWPRRMYO() {
return WPRRMYO;
}

public byte getWPRROH() {
return WPRROH;
}

public byte getWPRRRE() {
return WPRRRE;
}

public byte getWPRRRH() {
return WPRRRH;
}

public byte getWPRRST() {
return WPRRST;
}

public byte getWPRRYO() {
return WPRRYO;
}

public byte getWPSFOR() {
return WPSFOR;
}

public byte getWPSJOBM() {
return WPSJOBM;
}

public short getWPSJOBY() {
return WPSJOBY;
}

public byte getWPSN() {
return WPSN;
}

public byte getWPSPAM() {
return WPSPAM;
}

public byte getWPSPAW() {
return WPSPAW;
}

public byte getWPSPFU() {
return WPSPFU;
}

public int getWPSPOU() {
return WPSPOU;
}

public byte getWPSPOUP() {
return WPSPOUP;
}

public byte getWPSPY() {
return WPSPY;
}

public byte getWPSRUL() {
return WPSRUL;
}

public byte getWPTAKP() {
return WPTAKP;
}

public byte getWPTAWC() {
return WPTAWC;
}

public byte getWPTHPFE() {
return WPTHPFE;
}

public short getWPTHPFL() {
return WPTHPFL;
}

public byte getWPTHPFR() {
return WPTHPFR;
}

public short getWPTHPFU() {
return WPTHPFU;
}

public byte getWPTHPME() {
return WPTHPME;
}

public short getWPTHPML() {
return WPTHPML;
}

public byte getWPTHPMR() {
return WPTHPMR;
}

public short getWPTHPMU() {
return WPTHPMU;
}

public byte getWPTHPOE() {
return WPTHPOE;
}

public short getWPTHPOL() {
return WPTHPOL;
}

public byte getWPTHPOR() {
return WPTHPOR;
}

public short getWPTHPOU() {
return WPTHPOU;
}

public byte getWPTHPWE() {
return WPTHPWE;
}

public short getWPTHPWL() {
return WPTHPWL;
}

public byte getWPTHPWR() {
return WPTHPWR;
}

public short getWPTHPWU() {
return WPTHPWU;
}

public byte getWPTHPYE() {
return WPTHPYE;
}

public int getWPTHPYL() {
return WPTHPYL;
}

public byte getWPTHPYR() {
return WPTHPYR;
}

public int getWPTHPYU() {
return WPTHPYU;
}

public byte getWPUPAFE() {
return WPUPAFE;
}

public short getWPUPAFL() {
return WPUPAFL;
}

public byte getWPUPAFR() {
return WPUPAFR;
}

public short getWPUPAFU() {
return WPUPAFU;
}

public byte getWPUPAME() {
return WPUPAME;
}

public short getWPUPAML() {
return WPUPAML;
}

public byte getWPUPAMR() {
return WPUPAMR;
}

public short getWPUPAMU() {
return WPUPAMU;
}

public int getWPUPAOE() {
return WPUPAOE;
}

public short getWPUPAOL() {
return WPUPAOL;
}

public byte getWPUPAOR() {
return WPUPAOR;
}

public short getWPUPAOU() {
return WPUPAOU;
}

public byte getWPUPAWE() {
return WPUPAWE;
}

public short getWPUPAWL() {
return WPUPAWL;
}

public byte getWPUPAWR() {
return WPUPAWR;
}

public short getWPUPAWU() {
return WPUPAWU;
}

public byte getWPUPAYE() {
return WPUPAYE;
}

public byte getWPUPAYL() {
return WPUPAYL;
}

public byte getWPUPAYR() {
return WPUPAYR;
}

public short getWPUPAYU() {
return WPUPAYU;
}

public byte getWPVBUSE() {
return WPVBUSE;
}

public int getWPVBUSL() {
return WPVBUSL;
}

public byte getWPVBUSR() {
return WPVBUSR;
}

public int getWPVBUSU() {
return WPVBUSU;
}

public byte getWPWLYYE() {
return WPWLYYE;
}

public int getWPWLYYL() {
return WPWLYYL;
}

public byte getWPWLYYR() {
return WPWLYYR;
}

public int getWPWLYYU() {
return WPWLYYU;
}

public byte getWPWYJ95() {
return WPWYJ95;
}

public byte getWPWYJBU() {
return WPWYJBU;
}

public byte getWPWYJCA() {
return WPWYJCA;
}

public byte getWPWYJCO() {
return WPWYJCO;
}

public byte getWPWYJFB() {
return WPWYJFB;
}

public byte getWPWYJFI() {
return WPWYJFI;
}

public byte getWPWYJHO() {
return WPWYJHO;
}

public byte getWPWYJM85() {
return WPWYJM85;
}

public byte getWPWYJM86() {
return WPWYJM86;
}

public byte getWPWYJMBC() {
return WPWYJMBC;
}

public byte getWPWYJMBU() {
return WPWYJMBU;
}

public byte getWPWYJMCA() {
return WPWYJMCA;
}

public byte getWPWYJMCH() {
return WPWYJMCH;
}

public byte getWPWYJMCO() {
return WPWYJMCO;
}

public byte getWPWYJMFB() {
return WPWYJMFB;
}

public byte getWPWYJMFI() {
return WPWYJMFI;
}

public byte getWPWYJMHF() {
return WPWYJMHF;
}

public byte getWPWYJMHH() {
return WPWYJMHH;
}

public byte getWPWYJMHO() {
return WPWYJMHO;
}

public byte getWPWYJMLO() {
return WPWYJMLO;
}

public byte getWPWYJMMO() {
return WPWYJMMO;
}

public byte getWPWYJMON() {
return WPWYJMON;
}

public byte getWPWYJMPA() {
return WPWYJMPA;
}

public byte getWPWYJMPH() {
return WPWYJMPH;
}

public byte getWPWYJMTI() {
return WPWYJMTI;
}

public byte getWPWYJMTO() {
return WPWYJMTO;
}

public byte getWPWYJON() {
return WPWYJON;
}

public byte getWPWYJPA() {
return WPWYJPA;
}

public byte getWPWYJREA() {
return WPWYJREA;
}

public byte getWPWYJTI() {
return WPWYJTI;
}

public byte getWPWYN85() {
return WPWYN85;
}

public byte getWPWYNCA() {
return WPWYNCA;
}

public byte getWPWYNCH() {
return WPWYNCH;
}

public byte getWPWYNEA() {
return WPWYNEA;
}

public byte getWPWYNEM() {
return WPWYNEM;
}

public byte getWPWYNFA() {
return WPWYNFA;
}

public byte getWPWYNM85() {
return WPWYNM85;
}

public byte getWPWYNM86() {
return WPWYNM86;
}

public boolean getWPWYNMAB() {
return WPWYNMAB;
}

public byte getWPWYNMCA() {
return WPWYNMCA;
}

public byte getWPWYNMCH() {
return WPWYNMCH;
}

public byte getWPWYNMCO() {
return WPWYNMCO;
}

public byte getWPWYNMDE() {
return WPWYNMDE;
}

public byte getWPWYNMEA() {
return WPWYNMEA;
}

public byte getWPWYNMEM() {
return WPWYNMEM;
}

public byte getWPWYNMFA() {
return WPWYNMFA;
}

public byte getWPWYNMLH() {
return WPWYNMLH;
}

public byte getWPWYNMLO() {
return WPWYNMLO;
}

public byte getWPWYNMMO() {
return WPWYNMMO;
}

public byte getWPWYNMO() {
return WPWYNMO;
}

public byte getWPWYNMOH() {
return WPWYNMOH;
}

public byte getWPWYNMOR() {
return WPWYNMOR;
}

public byte getWPWYNMOU() {
return WPWYNMOU;
}

public byte getWPWYNMRE() {
return WPWYNMRE;
}

public byte getWPWYNMRH() {
return WPWYNMRH;
}

public byte getWPWYNMTI() {
return WPWYNMTI;
}

public byte getWPWYNMVR() {
return WPWYNMVR;
}

public byte getWPWYNOH() {
return WPWYNOH;
}

public byte getWPWYNOU() {
return WPWYNOU;
}

public byte getWPWYNRE() {
return WPWYNRE;
}

public byte getWPWYNRH() {
return WPWYNRH;
}

public byte getWPWYNTI() {
return WPWYNTI;
}

public byte getWPWYNVR() {
return WPWYNVR;
}

public byte getWPWYW95() {
return WPWYW95;
}

public byte getWPWYWEN() {
return WPWYWEN;
}

public byte getWPWYWM85() {
return WPWYWM85;
}

public byte getWPWYWM86() {
return WPWYWM86;
}

public byte getWPWYWMCH() {
return WPWYWMCH;
}

public byte getWPWYWMEN() {
return WPWYWMEN;
}

public byte getWPWYWMFI() {
return WPWYWMFI;
}

public byte getWPWYWMHE() {
return WPWYWMHE;
}

public byte getWPWYWMHH() {
return WPWYWMHH;
}

public byte getWPWYWMMO() {
return WPWYWMMO;
}

public byte getWPWYWMO() {
return WPWYWMO;
}

public byte getWPWYWMOH() {
return WPWYWMOH;
}

public byte getWPWYWMRH() {
return WPWYWMRH;
}

public byte getWPWYWMSU() {
return WPWYWMSU;
}

public byte getWPWYWOH() {
return WPWYWOH;
}

public byte getWPWYWRH() {
return WPWYWRH;
}

public byte getWPWYWSU() {
return WPWYWSU;
}

public byte getWPYFRAC() {
return WPYFRAC;
}

public byte getWPYST95() {
return WPYST95;
}

public byte getWPYSTAF() {
return WPYSTAF;
}

public byte getWPYSTCH() {
return WPYSTCH;
}

public byte getWPYSTEN() {
return WPYSTEN;
}

public byte getWPYSTFA() {
return WPYSTFA;
}

public byte getWPYSTFI() {
return WPYSTFI;
}

public byte getWPYSTM85() {
return WPYSTM85;
}

public byte getWPYSTM86() {
return WPYSTM86;
}

public byte getWPYSTMAF() {
return WPYSTMAF;
}

public byte getWPYSTMAG() {
return WPYSTMAG;
}

public byte getWPYSTMCH() {
return WPYSTMCH;
}

public byte getWPYSTMCO() {
return WPYSTMCO;
}

public byte getWPYSTMEN() {
return WPYSTMEN;
}

public byte getWPYSTMFA() {
return WPYSTMFA;
}

public byte getWPYSTMFI() {
return WPYSTMFI;
}

public byte getWPYSTMMO() {
return WPYSTMMO;
}

public byte getWPYSTMOH() {
return WPYSTMOH;
}

public byte getWPYSTMOU() {
return WPYSTMOU;
}

public byte getWPYSTMPA() {
return WPYSTMPA;
}

public byte getWPYSTMRE() {
return WPYSTMRE;
}

public byte getWPYSTMRH() {
return WPYSTMRH;
}

public byte getWPYSTMST() {
return WPYSTMST;
}

public byte getWPYSTMTI() {
return WPYSTMTI;
}

public byte getWPYSTMVR() {
return WPYSTMVR;
}

public byte getWPYSTMYO() {
return WPYSTMYO;
}

public byte getWPYSTOH() {
return WPYSTOH;
}

public byte getWPYSTOMO() {
return WPYSTOMO;
}

public byte getWPYSTOU() {
return WPYSTOU;
}

public byte getWPYSTPA() {
return WPYSTPA;
}

public byte getWPYSTPM() {
return WPYSTPM;
}

public byte getWPYSTRE() {
return WPYSTRE;
}

public byte getWPYSTRH() {
return WPYSTRH;
}

public byte getWPYSTTI() {
return WPYSTTI;
}

public byte getWPYSTVR() {
return WPYSTVR;
}

public byte getWPYSTYO() {
return WPYSTYO;
}

public byte getWTC_P_F() {
return WTC_P_F;
}

public double getWTC_P_I() {
return WTC_P_I;
}

public short getWTC_P_O() {
return WTC_P_O;
}

public short getWTC_P_T() {
return WTC_P_T;
}

public byte getWTC_R_F() {
return WTC_R_F;
}

public double getWTC_R_I() {
return WTC_R_I;
}

public short getWTC_R_O() {
return WTC_R_O;
}

public short getWTC_R_T() {
return WTC_R_T;
}

public short getYRBIRTH() {
return YRBIRTH;
}

public ELSA_Wave3_Record(String line) {
init_0_999(line);
init_1000_1999(line);
init_2000_2999(line);
init_3000_3999(line);
init_4000_4999(line);
init_5000_5999(line);
init_6000_6999(line);
init_7000_7999(line);
init_8000_8999(line);
init_9000_9435(line);
}
public void init_0_999(String line) {
initIDAUNIQ(s[0]);
initIDAHH(s[1]);
initPERID(s[2]);
initSAMPSTA(s[3]);
initFINSTAT(s[4]);
initW3INDOUT(s[5]);
initW3HHOUT(s[6]);
initW3LWGT(s[7]);
initW3XWGT(s[8]);
initCOUPLE(s[9]);
initCPID(s[10]);
initCHINHH(s[11]);
initCHOUTHH(s[12]);
initGCINHH(s[13]);
initMAINHH(s[14]);
initPAINHH(s[15]);
initHHTOT(s[16]);
initWHOSO1(s[17]);
initWHOSO2(s[18]);
initWHOSO3(s[19]);
initWHOSO4(s[20]);
initWHOSO5(s[21]);
initCONCUR(s[22]);
initORDCON(s[23]);
initDHSAMEH(s[24]);
initDHSEX(s[25]);
initDHDOBC(s[26]);
initDHDOBYR(s[27]);
initDHAGER(s[28]);
initDHWORK(s[29]);
initDHR(s[30]);
initDHR2(s[31]);
initDHR3(s[32]);
initDHR4(s[33]);
initDHR5(s[34]);
initDHR6(s[35]);
initDHR7(s[36]);
initDHR8(s[37]);
initDHR9(s[38]);
initDHR10(s[39]);
initDHR11(s[40]);
initDHR12(s[41]);
initHHRESP(s[42]);
initDHPA(s[43]);
initDHPB(s[44]);
initDHC(s[45]);
initDHCS(s[46]);
initDHCDBY1(s[47]);
initDHCAG(s[48]);
initDHCR01(s[49]);
initDHCR02(s[50]);
initDHCR03(s[51]);
initDHCR04(s[52]);
initDHCR05(s[53]);
initDHCR06(s[54]);
initDHCR07(s[55]);
initDHCR08(s[56]);
initDHCR09(s[57]);
initDHCR10(s[58]);
initDHPA2(s[59]);
initDHPB2(s[60]);
initDHC2(s[61]);
initDHCS2(s[62]);
initDHCDBY2(s[63]);
initDHCAG2(s[64]);
initDHCR17(s[65]);
initDHCR18(s[66]);
initDHCR19(s[67]);
initDHCR20(s[68]);
initDHCR21(s[69]);
initDHCR22(s[70]);
initDHCR23(s[71]);
initDHCR24(s[72]);
initDHCR25(s[73]);
initDHCR26(s[74]);
initDHPA3(s[75]);
initDHPB3(s[76]);
initDHC3(s[77]);
initDHCS3(s[78]);
initDHCDBY3(s[79]);
initDHCAG3(s[80]);
initDHCR33(s[81]);
initDHCR34(s[82]);
initDHCR35(s[83]);
initDHCR36(s[84]);
initDHCR37(s[85]);
initDHCR38(s[86]);
initDHCR39(s[87]);
initDHCR40(s[88]);
initDHCR41(s[89]);
initDHCR42(s[90]);
initDHPA4(s[91]);
initDHPB4(s[92]);
initDHC4(s[93]);
initDHCS4(s[94]);
initDHCDBY4(s[95]);
initDHCAG4(s[96]);
initDHCR49(s[97]);
initDHCR50(s[98]);
initDHCR51(s[99]);
initDHCR52(s[100]);
initDHCR53(s[101]);
initDHCR54(s[102]);
initDHCR55(s[103]);
initDHCR56(s[104]);
initDHCR57(s[105]);
initDHCR58(s[106]);
initDHPA5(s[107]);
initDHPB5(s[108]);
initDHC5(s[109]);
initDHCS5(s[110]);
initDHCDBY5(s[111]);
initDHCAG5(s[112]);
initDHCR65(s[113]);
initDHCR66(s[114]);
initDHCR67(s[115]);
initDHCR68(s[116]);
initDHCR69(s[117]);
initDHCR70(s[118]);
initDHCR71(s[119]);
initDHCR72(s[120]);
initDHCR73(s[121]);
initDHCR74(s[122]);
initDHPA6(s[123]);
initDHPB6(s[124]);
initDHC6(s[125]);
initDHCS6(s[126]);
initDHCDBY6(s[127]);
initDHCAG6(s[128]);
initDHCR81(s[129]);
initDHCR82(s[130]);
initDHCR83(s[131]);
initDHCR84(s[132]);
initDHCR85(s[133]);
initDHCR86(s[134]);
initDHCR87(s[135]);
initDHCR88(s[136]);
initDHCR89(s[137]);
initDHCR90(s[138]);
initDHPA7(s[139]);
initDHPB7(s[140]);
initDHC7(s[141]);
initDHCS7(s[142]);
initDHCDBY7(s[143]);
initDHCAG7(s[144]);
initDHCR97(s[145]);
initDHCR98(s[146]);
initDHCR99(s[147]);
initDHCR100(s[148]);
initDHCR101(s[149]);
initDHCR102(s[150]);
initDHCR103(s[151]);
initDHCR104(s[152]);
initDHCR105(s[153]);
initDHCR106(s[154]);
initDHPA8(s[155]);
initDHPB8(s[156]);
initDHC8(s[157]);
initDHCS8(s[158]);
initDHCDBY8(s[159]);
initDHCAG8(s[160]);
initDHCR113(s[161]);
initDHCR114(s[162]);
initDHCR115(s[163]);
initDHCR116(s[164]);
initDHCR117(s[165]);
initDHCR118(s[166]);
initDHCR119(s[167]);
initDHCR120(s[168]);
initDHCR121(s[169]);
initDHCR122(s[170]);
initDHPA9(s[171]);
initDHPB9(s[172]);
initDHC9(s[173]);
initDHCS9(s[174]);
initDHCDBY9(s[175]);
initDHCAG9(s[176]);
initDHCR129(s[177]);
initDHCR130(s[178]);
initDHCR131(s[179]);
initDHCR132(s[180]);
initDHCR133(s[181]);
initDHCR134(s[182]);
initDHCR135(s[183]);
initDHCR136(s[184]);
initDHCR137(s[185]);
initDHCR138(s[186]);
initDHPA10(s[187]);
initDHPB10(s[188]);
initDHC10(s[189]);
initDHCS10(s[190]);
initDHCDBY10(s[191]);
initDHCAG10(s[192]);
initDHCR145(s[193]);
initDHCR146(s[194]);
initDHCR147(s[195]);
initDHCR148(s[196]);
initDHCR149(s[197]);
initDHCR150(s[198]);
initDHCR151(s[199]);
initDHCR152(s[200]);
initDHCR153(s[201]);
initDHCR154(s[202]);
initDHPA11(s[203]);
initDHPB11(s[204]);
initDHC11(s[205]);
initDHCS11(s[206]);
initDHCDBY11(s[207]);
initDHCAG11(s[208]);
initDHCR161(s[209]);
initDHCR162(s[210]);
initDHCR163(s[211]);
initDHCR164(s[212]);
initDHCR165(s[213]);
initDHCR166(s[214]);
initDHCR167(s[215]);
initDHCR168(s[216]);
initDHCR169(s[217]);
initDHCR170(s[218]);
initDHPA12(s[219]);
initDHPB12(s[220]);
initDHC12(s[221]);
initDHCS12(s[222]);
initDHCDBY12(s[223]);
initDHCAG12(s[224]);
initDHCR177(s[225]);
initDHCR178(s[226]);
initDHCR179(s[227]);
initDHCR180(s[228]);
initDHCR181(s[229]);
initDHCR182(s[230]);
initDHCR183(s[231]);
initDHCR184(s[232]);
initDHCR185(s[233]);
initDHCR186(s[234]);
initDHPA13(s[235]);
initDHPB13(s[236]);
initDHC13(s[237]);
initDHCS13(s[238]);
initDHCDBY13(s[239]);
initDHCAG13(s[240]);
initDHCR193(s[241]);
initDHCR194(s[242]);
initDHCR195(s[243]);
initDHCR196(s[244]);
initDHCR197(s[245]);
initDHCR198(s[246]);
initDHCR199(s[247]);
initDHCR200(s[248]);
initDHCR201(s[249]);
initDHCR202(s[250]);
initDHPA14(s[251]);
initDHPB14(s[252]);
initDHC14(s[253]);
initDHCS14(s[254]);
initDHCDBY14(s[255]);
initDHCAG14(s[256]);
initDHCR209(s[257]);
initDHCR210(s[258]);
initDHCR211(s[259]);
initDHCR212(s[260]);
initDHCR213(s[261]);
initDHCR214(s[262]);
initDHCR215(s[263]);
initDHCR216(s[264]);
initDHCR217(s[265]);
initDHCR218(s[266]);
initDHPA15(s[267]);
initDHPB15(s[268]);
initDHC15(s[269]);
initDHCS15(s[270]);
initDHCDBY15(s[271]);
initDHCAG15(s[272]);
initDHCR225(s[273]);
initDHCR226(s[274]);
initDHCR227(s[275]);
initDHCR228(s[276]);
initDHCR229(s[277]);
initDHCR230(s[278]);
initDHCR231(s[279]);
initDHCR232(s[280]);
initDHCR233(s[281]);
initDHCR234(s[282]);
initDIDOB(s[283]);
initDIDBNY(s[284]);
initDIAGR(s[285]);
initDIINT(s[286]);
initDIPRE(s[287]);
initDISEXC(s[288]);
initDISEX(s[289]);
initDIMAR(s[290]);
initDIGRAN(s[291]);
initDIGNMYC(s[292]);
initDIGNMY(s[293]);
initDISIBC(s[294]);
initDISIB(s[295]);
initDINMA(s[296]);
initDIANM(s[297]);
initDIMAD(s[298]);
initDICDNM(s[299]);
initDINFA(s[300]);
initDIANF(s[301]);
initDIFAD(s[302]);
initDICDNF(s[303]);
initDIKLIV(s[304]);
initDIKLIVC(s[305]);
initDIFJOB(s[306]);
initHEGENH(s[307]);
initHEILL(s[308]);
initHELIM(s[309]);
initHELWK(s[310]);
initHETEMP(s[311]);
initHEFUNC(s[312]);
initHEEYE(s[313]);
initHEFRND(s[314]);
initHEPAP(s[315]);
initHEOPCGL(s[316]);
initHEOPCDI(s[317]);
initHEOPCMD(s[318]);
initHEOPCCA(s[319]);
initHEOPFGL(s[320]);
initHEOPFDI(s[321]);
initHEOPFMD(s[322]);
initHEOPFCA(s[323]);
initHEOPNGL(s[324]);
initHEOPNDI(s[325]);
initHEOPNMD(s[326]);
initHEOPNCA(s[327]);
initHEOPSGL(s[328]);
initHEOPSDI(s[329]);
initHEOPSMD(s[330]);
initHEOPSCA(s[331]);
initDHEOPTGL(s[332]);
initDHEOPTDI(s[333]);
initDHEOPTMD(s[334]);
initDHEOPTCA(s[335]);
initHEOPT96(s[336]);
initHECAT(s[337]);
initHEHEAR(s[338]);
initHEHRA(s[339]);
initHEDENT(s[340]);
initHEDNTA(s[341]);
initHEDNTB1(s[342]);
initHEDNTB2(s[343]);
initHEDNTB3(s[344]);
initHEDNTB4(s[345]);
initHEDNTB5(s[346]);
initHEDNTB0(s[347]);
initHEBPCHK(s[348]);
initHEDAWBP(s[349]);
initHEDAWAN(s[350]);
initHEDAWMI(s[351]);
initHEDAWHF(s[352]);
initHEDAWHM(s[353]);
initHEDAWAR(s[354]);
initHEDAWDI(s[355]);
initHEDAWST(s[356]);
initHEDAWCH(s[357]);
initHEDAWOT(s[358]);
initHEDACBP(s[359]);
initHEDACAN(s[360]);
initHEDACMI(s[361]);
initHEDACHF(s[362]);
initHEDACHM(s[363]);
initHEDACAR(s[364]);
initHEDACDI(s[365]);
initHEDACST(s[366]);
initHEDACCH(s[367]);
initHEDACOT(s[368]);
initHEDANBP(s[369]);
initHEDANAN(s[370]);
initHEDANMI(s[371]);
initHEDANHF(s[372]);
initHEDANHM(s[373]);
initHEDANAR(s[374]);
initHEDANDI(s[375]);
initHEDANST(s[376]);
initHEDANCH(s[377]);
initHEDANOT(s[378]);
initHEDASBP(s[379]);
initHEDASAN(s[380]);
initHEDASHF(s[381]);
initHEDASHM(s[382]);
initHEDASAR(s[383]);
initHEDASCH(s[384]);
initHEDASOT(s[385]);
initHEDIABP(s[386]);
initHEDIAAN(s[387]);
initHEDIAMI(s[388]);
initHEDIAHF(s[389]);
initHEDIAHM(s[390]);
initHEDIAAR(s[391]);
initHEDIADI(s[392]);
initHEDIAST(s[393]);
initHEDIACH(s[394]);
initHEDIA95(s[395]);
initHEDIA96(s[396]);
initDHEDIMBP(s[397]);
initDHEDIMAN(s[398]);
initDHEDIMMI(s[399]);
initDHEDIMHF(s[400]);
initDHEDIMHM(s[401]);
initDHEDIMAR(s[402]);
initDHEDIMDI(s[403]);
initDHEDIMST(s[404]);
initDHEDIMCH(s[405]);
initHEDIM85(s[406]);
initHEDIM86(s[407]);
initHEDIM96(s[408]);
initHEHBP(s[409]);
initHEHBPA(s[410]);
initHEHBPB(s[411]);
initHEMDA(s[412]);
initHEMDAB(s[413]);
initHEAGA(s[414]);
initHEAGAR(s[415]);
initHEAGARY(s[416]);
initHEYRA(s[417]);
initHEAGB(s[418]);
initHEAGBR(s[419]);
initHEAGBRY(s[420]);
initHENMMI(s[421]);
initHEAGC(s[422]);
initHEAGCR(s[423]);
initHEAGCRY(s[424]);
initHEAGD(s[425]);
initHEAGDR(s[426]);
initHEAGDRY(s[427]);
initDHEACD(s[428]);
initHEINS(s[429]);
initHEMDB(s[430]);
initHEACE(s[431]);
initHEACEA(s[432]);
initHEWEE(s[433]);
initHEWEEA(s[434]);
initHEKIDN(s[435]);
initHESUG(s[436]);
initHESUGA(s[437]);
initHEFTCHK(s[438]);
initHESLFCR(s[439]);
initHESLFCM(s[440]);
initHESLFCY(s[441]);
initHESLFCB(s[442]);
initHEAGE(s[443]);
initHEAGER(s[444]);
initHEAGERY(s[445]);
initHENMST(s[446]);
initHEHBPB1(s[447]);
initHEPBS(s[448]);
initHEWKS(s[449]);
initHESPK(s[450]);
initHEVSI(s[451]);
initHETHK(s[452]);
initHEHRTMD(s[453]);
initHECHMD(s[454]);
initHECHME(s[455]);
initHEDBWLU(s[456]);
initHEDBWAS(s[457]);
initHEDBWAR(s[458]);
initHEDBWOS(s[459]);
initHEDBWCA(s[460]);
initHEDBWPD(s[461]);
initHEDBWPS(s[462]);
initHEDBWAD(s[463]);
initHEDBWDE(s[464]);
initHEDBMLU(s[465]);
initHEDBMAS(s[466]);
initHEDBMAR(s[467]);
initHEDBMOS(s[468]);
initHEDBMCA(s[469]);
initHEDBMPD(s[470]);
initHEDBMPS(s[471]);
initHEDBMAD(s[472]);
initHEDBMDE(s[473]);
initHEDBDLU(s[474]);
initHEDBDAS(s[475]);
initHEDBDAR(s[476]);
initHEDBDOS(s[477]);
initHEDBDCA(s[478]);
initHEDBDPD(s[479]);
initHEDBDPS(s[480]);
initHEDBDAD(s[481]);
initHEDBDDE(s[482]);
initHEDBLU(s[483]);
initHEDBSAS(s[484]);
initHEDBSAR(s[485]);
initHEDBSOS(s[486]);
initHEDBSCA(s[487]);
initHEDBSPD(s[488]);
initHEDBSDE(s[489]);
initDHEDIBLU(s[490]);
initDHEDIBAS(s[491]);
initDHEDIBAR(s[492]);
initDHEDIBOS(s[493]);
initDHEDIBCA(s[494]);
initDHEDIBPD(s[495]);
initDHEDIBPS(s[496]);
initDHEDIBAD(s[497]);
initDHEDIBDE(s[498]);
initHEDIBBL(s[499]);
initHEDIB96(s[500]);
initHELNG(s[501]);
initHELNGB(s[502]);
initHEAMA(s[503]);
initHEAMB(s[504]);
initHEARTOA(s[505]);
initHEARTRA(s[506]);
initHEARTOT(s[507]);
initHEAGF(s[508]);
initHEAGFR(s[509]);
initHEAGFRY(s[510]);
initHEARTA(s[511]);
initHEARTB(s[512]);
initHEARTC(s[513]);
initHEARTD(s[514]);
initHEARTE(s[515]);
initHELEUK(s[516]);
initHEAGG(s[517]);
initHEAGGR(s[518]);
initHEAGGRY(s[519]);
initHEAGK(s[520]);
initHEAGKR(s[521]);
initHEAGKRY(s[522]);
initHECANAA(s[523]);
initHECANB(s[524]);
initHECANBB(s[525]);
initHEPRK(s[526]);
initHEPRKR(s[527]);
initHEPRKRY(s[528]);
initHEAGH(s[529]);
initHEAGHR(s[530]);
initHEAGHRY(s[531]);
initHEPSYHA(s[532]);
initHEPSYAN(s[533]);
initHEPSYDE(s[534]);
initHEPSYEM(s[535]);
initHEPSYSC(s[536]);
initHEPSYPS(s[537]);
initHEPSYMO(s[538]);
initHEPSYMA(s[539]);
initHEPSY95(s[540]);
initHEYRC(s[541]);
initHEAGI(s[542]);
initHEAGIR(s[543]);
initHEAGIRY(s[544]);
initHEAGJ(s[545]);
initHEAGJR(s[546]);
initHEAGJRY(s[547]);
initHEFLA(s[548]);
initHEFLB(s[549]);
initHEFLC(s[550]);
initHEFRAC(s[551]);
initHEJI(s[552]);
initHEJIAA1(s[553]);
initHEJIAA2(s[554]);
initHEJIAA3(s[555]);
initHEJIAA4(s[556]);
initHEJIAA5(s[557]);
initHEJIBRH(s[558]);
initHEJIBLH(s[559]);
initHEJIBRK(s[560]);
initHEJIBLK(s[561]);
initHEIQA(s[562]);
initHEIQB(s[563]);
initHEIQC(s[564]);
initHEIQD(s[565]);
initHEIQE(s[566]);
initHEIQF(s[567]);
initHEIQG(s[568]);
initHEIQH(s[569]);
initHEIQI(s[570]);
initHEIQJ(s[571]);
initHEIQK(s[572]);
initHEIQL(s[573]);
initHEIQM(s[574]);
initHEIQN(s[575]);
initHEIQO(s[576]);
initHEIQP(s[577]);
initHEIQQ(s[578]);
initHEPAIN(s[579]);
initHEPAA(s[580]);
initHEPAWBA(s[581]);
initHEPAWHI(s[582]);
initHEPAWKN(s[583]);
initHEPAWFE(s[584]);
initHEPAWMO(s[585]);
initHEPAWOT(s[586]);
initHEPAWAL(s[587]);
initHEPAB(s[588]);
initHEPAB1(s[589]);
initHEBCK(s[590]);
initHEHIP(s[591]);
initHEKNE(s[592]);
initHEFET(s[593]);
initHEPAC(s[594]);
initHEPAD(s[595]);
initHEPAE(s[596]);
initHEPAF(s[597]);
initHEPAF1(s[598]);
initHEKNEA(s[599]);
initHEKNEB(s[600]);
initHEKNEC(s[601]);
initHEPAK1(s[602]);
initHEANA(s[603]);
initHEANB(s[604]);
initHEANC(s[605]);
initHEAND(s[606]);
initHEAND1(s[607]);
initHEANE(s[608]);
initHEANF(s[609]);
initHEANG(s[610]);
initHEANH(s[611]);
initHEANIUS(s[612]);
initHEANILS(s[613]);
initHEANSLC(s[614]);
initHEANSLA(s[615]);
initHEANSRC(s[616]);
initHEANSRA(s[617]);
initHEANS95(s[618]);
initHEANMUS(s[619]);
initHEANMLS(s[620]);
initHEANMLC(s[621]);
initHEANMLA(s[622]);
initHEANMRC(s[623]);
initHEANMRA(s[624]);
initHEANM85(s[625]);
initHEANIM86(s[626]);
initHEANK(s[627]);
initHEROSMD(s[628]);
initHERPA(s[629]);
initHERPB(s[630]);
initHERPC(s[631]);
initHERPD(s[632]);
initHERPE(s[633]);
initHERPE1(s[634]);
initHERPF(s[635]);
initHERPG(s[636]);
initHERPH(s[637]);
initHERPI(s[638]);
initHERPJ(s[639]);
initHECDA(s[640]);
initHECDB(s[641]);
initHECDC(s[642]);
initHECDD(s[643]);
initHECDD1(s[644]);
initHECDE(s[645]);
initHECDFCA(s[646]);
initHECDFTH(s[647]);
initHECDFOT(s[648]);
initHEMOBWA(s[649]);
initHEMOBSI(s[650]);
initHEMOBCH(s[651]);
initHEMOBCS(s[652]);
initHEMOBCL(s[653]);
initHEMOBST(s[654]);
initHEMOBRE(s[655]);
initHEMOBPU(s[656]);
initHEMOBLI(s[657]);
initHEMOBPI(s[658]);
initHEMOB96(s[659]);
initHEADLDR(s[660]);
initHEADLWA(s[661]);
initHEADLBA(s[662]);
initHEADLEA(s[663]);
initHEADLBE(s[664]);
initHEADLWC(s[665]);
initHEADLMA(s[666]);
initHEADLPR(s[667]);
initHEADLSH(s[668]);
initHEADLPH(s[669]);
initHEADLME(s[670]);
initHEADLHO(s[671]);
initHEADLMO(s[672]);
initHEADL96(s[673]);
initHEHPA(s[674]);
initHEHPHSP(s[675]);
initHEHPHPA(s[676]);
initHEHPHSO(s[677]);
initHEHPHSL(s[678]);
initHEHPHDA(s[679]);
initHEHPHDL(s[680]);
initHEHPHSI(s[681]);
initHEHPHBR(s[682]);
initHEHPHGS(s[683]);
initHEHPHGD(s[684]);
initHEHPHOR(s[685]);
initHEHPHSS(s[686]);
initHEHPHPR(s[687]);
initHEHPHNU(s[688]);
initHEHPHOS(s[689]);
initHEHPHVO(s[690]);
initHEHPHFR(s[691]);
initHEHPHOT(s[692]);
initHEHPH96(s[693]);
initHEHPWSP(s[694]);
initHEHPWPA(s[695]);
initHEHPWSO(s[696]);
initHEHPWSL(s[697]);
initHEHPWDA(s[698]);
initHEHPWDL(s[699]);
initHEHPWSI(s[700]);
initHEHPWBR(s[701]);
initHEHPWGS(s[702]);
initHEHPWGD(s[703]);
initHEHPWOR(s[704]);
initHEHPWSS(s[705]);
initHEHPWPR(s[706]);
initHEHPWNU(s[707]);
initHEHPWOS(s[708]);
initHEHPWVO(s[709]);
initHEHPWFR(s[710]);
initHEHPWOT(s[711]);
initHEHPW96(s[712]);
initHEHPDSP(s[713]);
initHEHPDPA(s[714]);
initHEHPDSO(s[715]);
initHEHPDSL(s[716]);
initHEHPDDA(s[717]);
initHEHPDDL(s[718]);
initHEHPDSI(s[719]);
initHEHPDBR(s[720]);
initHEHPDGS(s[721]);
initHEHPDGD(s[722]);
initHEHPDOR(s[723]);
initHEHPDSS(s[724]);
initHEHPDPR(s[725]);
initHEHPDNU(s[726]);
initHEHPDOS(s[727]);
initHEHPDVO(s[728]);
initHEHPDFR(s[729]);
initHEHPDOT(s[730]);
initHEHPD96(s[731]);
initHEHPPSP(s[732]);
initHEHPPPA(s[733]);
initHEHPPSO(s[734]);
initHEHPPSL(s[735]);
initHEHPPDA(s[736]);
initHEHPPDL(s[737]);
initHEHPPSI(s[738]);
initHEHPPBR(s[739]);
initHEHPPGS(s[740]);
initHEHPPGD(s[741]);
initHEHPPOR(s[742]);
initHEHPPSS(s[743]);
initHEHPPPR(s[744]);
initHEHPPNU(s[745]);
initHEHPPOS(s[746]);
initHEHPPVO(s[747]);
initHEHPPFR(s[748]);
initHEHPPOT(s[749]);
initHEHPP96(s[750]);
initHEHPTSP(s[751]);
initHEHPTPA(s[752]);
initHEHPTSO(s[753]);
initHEHPTSL(s[754]);
initHEHPTDA(s[755]);
initHEHPTDL(s[756]);
initHEHPTSI(s[757]);
initHEHPTBR(s[758]);
initHEHPTGS(s[759]);
initHEHPTGD(s[760]);
initHEHPTOR(s[761]);
initHEHPTSS(s[762]);
initHEHPTPR(s[763]);
initHEHPTNU(s[764]);
initHEHPTOS(s[765]);
initHEHPTVO(s[766]);
initHEHPTFR(s[767]);
initHEHPTOT(s[768]);
initHEHPT96(s[769]);
initHEHPMSP(s[770]);
initHEHPMPA(s[771]);
initHEHPMSO(s[772]);
initHEHPMSL(s[773]);
initHEHPMDA(s[774]);
initHEHPMDL(s[775]);
initHEHPMSI(s[776]);
initHEHPMBR(s[777]);
initHEHPMGS(s[778]);
initHEHPMGD(s[779]);
initHEHPMOR(s[780]);
initHEHPMSS(s[781]);
initHEHPMPR(s[782]);
initHEHPMNU(s[783]);
initHEHPMOS(s[784]);
initHEHPMVO(s[785]);
initHEHPMFR(s[786]);
initHEHPMOT(s[787]);
initHEHPM96(s[788]);
initHEHPSOT(s[789]);
initHEHPSCH(s[790]);
initHEHPSLE(s[791]);
initHEHPSVE(s[792]);
initHEHPS95(s[793]);
initHEHPS96(s[794]);
initHEHSMOT(s[795]);
initHEHSMCH(s[796]);
initHEHSMLE(s[797]);
initHEHSMVE(s[798]);
initHEHSMOS(s[799]);
initHEHSMCR(s[800]);
initHEHSMMA(s[801]);
initHEHSMAC(s[802]);
initHEHSMTH(s[803]);
initHEHSMGY(s[804]);
initHEHSMAQ(s[805]);
initHEHSMHY(s[806]);
initHEHSMPE(s[807]);
initHEHSM85(s[808]);
initHEHSM86(s[809]);
initHEHSM96(s[810]);
initHECLUB1(s[811]);
initHECLUB2(s[812]);
initHECLUB3(s[813]);
initHECLUB96(s[814]);
initHELC(s[815]);
initHEDCC(s[816]);
initHEMW(s[817]);
initHEHPC(s[818]);
initHEAIDCA(s[819]);
initHEAIDZI(s[820]);
initHEAIDMW(s[821]);
initHEAIDEW(s[822]);
initHEAIDBU(s[823]);
initHEAIDEA(s[824]);
initHEAIDAL(s[825]);
initHEAIDCR(s[826]);
initHEAID96(s[827]);
initHEINCT(s[828]);
initHEINCTA(s[829]);
initHESMK(s[830]);
initHESKA(s[831]);
initHESKD(s[832]);
initHESKE(s[833]);
initHESKF(s[834]);
initHESTOP(s[835]);
initHESTOPC(s[836]);
initHECIG(s[837]);
initHESKB(s[838]);
initHETBA(s[839]);
initHETBB(s[840]);
initHESKC(s[841]);
initHETBC(s[842]);
initHETBD(s[843]);
initHEACTA(s[844]);
initHEACTB(s[845]);
initHEACTC(s[846]);
initSPCAR(s[847]);
initSPCARA(s[848]);
initSPCARB(s[849]);
initSPTRAA(s[850]);
initSPTRBUNA(s[851]);
initSPTRBDES(s[852]);
initSPTRBEXP(s[853]);
initSPTRBUNR(s[854]);
initSPTRBFRE(s[855]);
initSPTRBHEA(s[856]);
initSPTRBNEE(s[857]);
initSPTRBFEA(s[858]);
initSPTRBDIR(s[859]);
initSPTRBCON(s[860]);
initSPTRBWAL(s[861]);
initSPTRB95(s[862]);
initSPTRMUNA(s[863]);
initSPTRMDES(s[864]);
initSPTRMEXP(s[865]);
initSPTRMUNR(s[866]);
initSPTRMFRE(s[867]);
initSPTRMHEA(s[868]);
initSPTRMNEE(s[869]);
initSPTRMFEA(s[870]);
initSPTRMDIR(s[871]);
initSPTRMCON(s[872]);
initSPTRMWAL(s[873]);
initSPTRM85(s[874]);
initSPTRM86(s[875]);
initSPTRFAM(s[876]);
initSPTRTAX(s[877]);
initSPTRCOM(s[878]);
initSPTRHOS(s[879]);
initSPTR96(s[880]);
initSPLIFT(s[881]);
initSPTAXI(s[882]);
initSPDTDT(s[883]);
initSPHOSP(s[884]);
initWPACTPW(s[885]);
initWPACTSE(s[886]);
initWPACTVW(s[887]);
initWPACTCA(s[888]);
initWPACTLO(s[889]);
initWPACTED(s[890]);
initWPACT96(s[891]);
initWPAWAY(s[892]);
initWPACTW(s[893]);
initWPTAW(s[894]);
initWPTAWC(s[895]);
initWPDES(s[896]);
initWPDESC(s[897]);
initWPEDC(s[898]);
initWPVW(s[899]);
initWPES(s[900]);
initWPJOB(s[901]);
initWPJOBL(s[902]);
initWPSTJ(s[903]);
initWPEMP(s[904]);
initWPEVER(s[905]);
initWPLJOIL(s[906]);
initWPLJOTI(s[907]);
initWPLJODI(s[908]);
initWPLJOCL(s[909]);
initWPLJORE(s[910]);
initWPLJOVO(s[911]);
initWPLJOSP(s[912]);
initWPLJOCA(s[913]);
initWPLJOFE(s[914]);
initWPLJOMO(s[915]);
initWPLJO95(s[916]);
initWPLJOMIL(s[917]);
initWPLJOMTI(s[918]);
initWPLJOMDI(s[919]);
initWPLJOMCL(s[920]);
initWPLJOMRE(s[921]);
initWPLJOMVO(s[922]);
initWPLJOMSP(s[923]);
initWPLJOMCA(s[924]);
initWPLJOMFE(s[925]);
initWPLJOMMO(s[926]);
initWPLJOMBE(s[927]);
initWPLJOMCF(s[928]);
initWPLJOMPR(s[929]);
initWPLJOMER(s[930]);
initWPLJOMSE(s[931]);
initWPLJOMSA(s[932]);
initWPLJOMME(s[933]);
initWPLJOM85(s[934]);
initWPLJOM86(s[935]);
initWPLJOBM(s[936]);
initWPCHPH(s[937]);
initWPCHME(s[938]);
initWPCHHR(s[939]);
initWPCHFL(s[940]);
initWPCHHO(s[941]);
initWPCHAD(s[942]);
initWPCH96(s[943]);
initWPCHGNO(s[944]);
initWPCHMPH(s[945]);
initWPCHMME(s[946]);
initWPCHMHR(s[947]);
initWPCHMFL(s[948]);
initWPCHMHO(s[949]);
initWPCHMAD(s[950]);
initWPCHMSA(s[951]);
initWPCHMBO(s[952]);
initWPCHM85(s[953]);
initWPCHM86(s[954]);
initWPCHM96(s[955]);
initWPCHGO(s[956]);
initWPCHGA(s[957]);
initWPCHBPH(s[958]);
initWPCHBME(s[959]);
initWPCHBHR(s[960]);
initWPCHBFL(s[961]);
initWPCHBHO(s[962]);
initWPCHBAD(s[963]);
initWPCHB95(s[964]);
initWPESP(s[965]);
initWPASKD(s[966]);
initWPASKE(s[967]);
initWPASKF(s[968]);
initWPSUP(s[969]);
initWPEST(s[970]);
initWPSAL(s[971]);
initWPCJAG(s[972]);
initWPCJDI(s[973]);
initWPCJBU(s[974]);
initWPCJPA(s[975]);
initWPCJSE(s[976]);
initWPCJSC(s[977]);
initWPCJFR(s[978]);
initWPCJ96(s[979]);
initWPNEMP(s[980]);
initWPEMPL(s[981]);
initWPNOE(s[982]);
initWPJACT(s[983]);
initWPSJOBY(s[984]);
initWPSJOBM(s[985]);
initWPWYWMO(s[986]);
initWPWYWOH(s[987]);
initWPWYWRH(s[988]);
initWPWYWEN(s[989]);
initWPWYWSU(s[990]);
initWPWYW95(s[991]);
initWPWYWMMO(s[992]);
initWPWYWMOH(s[993]);
initWPWYWMRH(s[994]);
initWPWYWMEN(s[995]);
initWPWYWMSU(s[996]);
initWPWYWMHH(s[997]);
initWPWYWMCH(s[998]);
initWPWYWMFI(s[999]);
}
public void init_1000_1999(String line) {
initWPWYWMHE(s[1000]);
initWPWYWM85(s[1001]);
initWPWYWM86(s[1002]);
initWPWYJPA(s[1003]);
initWPWYJHO(s[1004]);
initWPWYJTI(s[1005]);
initWPWYJCA(s[1006]);
initWPWYJCO(s[1007]);
initWPWYJBU(s[1008]);
initWPWYJFB(s[1009]);
initWPWYJON(s[1010]);
initWPWYJFI(s[1011]);
initWPWYJ95(s[1012]);
initWPWYJMPA(s[1013]);
initWPWYJMHO(s[1014]);
initWPWYJMTI(s[1015]);
initWPWYJMCA(s[1016]);
initWPWYJMCO(s[1017]);
initWPWYJMBU(s[1018]);
initWPWYJMFB(s[1019]);
initWPWYJMON(s[1020]);
initWPWYJMFI(s[1021]);
initWPWYJMLO(s[1022]);
initWPWYJMBC(s[1023]);
initWPWYJMTO(s[1024]);
initWPWYJMCH(s[1025]);
initWPWYJMMO(s[1026]);
initWPWYJMHH(s[1027]);
initWPWYJMPH(s[1028]);
initWPWYJMHF(s[1029]);
initWPWYJM85(s[1030]);
initWPWYJM86(s[1031]);
initWPWYJREA(s[1032]);
initWPCJOB(s[1033]);
initWPHJOB(s[1034]);
initWPHWRK(s[1035]);
initWPWLY(s[1036]);
initWPWLYM(s[1037]);
initWPHLY(s[1038]);
initWPWLYY(s[1039]);
initWPWLYYL(s[1040]);
initWPWLYYU(s[1041]);
initWPWLYYE(s[1042]);
initWPWLYYR(s[1043]);
initWPLLSY(s[1044]);
initWPLLSM(s[1045]);
initWPLLJY(s[1046]);
initWPLLJM(s[1047]);
initWPYSTOH(s[1048]);
initWPYSTTI(s[1049]);
initWPYSTRH(s[1050]);
initWPYSTOU(s[1051]);
initWPYSTRE(s[1052]);
initWPYSTVR(s[1053]);
initWPYSTFI(s[1054]);
initWPYSTAF(s[1055]);
initWPYSTFA(s[1056]);
initWPYSTEN(s[1057]);
initWPYSTCH(s[1058]);
initWPYSTPA(s[1059]);
initWPYSTYO(s[1060]);
initWPYSTOMO(s[1061]);
initWPYST95(s[1062]);
initWPYSTMOH(s[1063]);
initWPYSTMTI(s[1064]);
initWPYSTMRH(s[1065]);
initWPYSTMOU(s[1066]);
initWPYSTMRE(s[1067]);
initWPYSTMVR(s[1068]);
initWPYSTMFI(s[1069]);
initWPYSTMAF(s[1070]);
initWPYSTMFA(s[1071]);
initWPYSTMEN(s[1072]);
initWPYSTMCH(s[1073]);
initWPYSTMPA(s[1074]);
initWPYSTMYO(s[1075]);
initWPYSTMMO(s[1076]);
initWPYSTMCO(s[1077]);
initWPYSTMAG(s[1078]);
initWPYSTMST(s[1079]);
initWPYSTM85(s[1080]);
initWPYSTM86(s[1081]);
initWPYSTPM(s[1082]);
initWPNCHPH(s[1083]);
initWPNCHME(s[1084]);
initWPNCHHR(s[1085]);
initWPNCHFL(s[1086]);
initWPNCHHO(s[1087]);
initWPNCHAD(s[1088]);
initWPNCH96(s[1089]);
initWPNCHGN(s[1090]);
initWPNCHMPH(s[1091]);
initWPNCHMME(s[1092]);
initWPNCHMHR(s[1093]);
initWPNCHMFL(s[1094]);
initWPNCHMHO(s[1095]);
initWPNCHMAD(s[1096]);
initWPNCHMCO(s[1097]);
initWPNCHM85(s[1098]);
initWPNCHM86(s[1099]);
initWPNCHM96(s[1100]);
initWPNCHGO(s[1101]);
initWPNCHGA(s[1102]);
initWPNCHBPH(s[1103]);
initWPNCHBME(s[1104]);
initWPNCHBHR(s[1105]);
initWPNCHBFL(s[1106]);
initWPNCHBHO(s[1107]);
initWPNCHBAD(s[1108]);
initWPNCHB85(s[1109]);
initWPNCBMPH(s[1110]);
initWPNCBMME(s[1111]);
initWPNCBMHR(s[1112]);
initWPNCBMFL(s[1113]);
initWPNCBMHO(s[1114]);
initWPNCBMAD(s[1115]);
initWPNCBMCO(s[1116]);
initWPNCBM85(s[1117]);
initWPNCBM86(s[1118]);
initWPOJ(s[1119]);
initWPOWB(s[1120]);
initWPLPSY(s[1121]);
initWPLPSM(s[1122]);
initWPLPEY(s[1123]);
initWPLPEM(s[1124]);
initWPOJ2(s[1125]);
initWPOWB2(s[1126]);
initWPLPSY2(s[1127]);
initWPLPSM2(s[1128]);
initWPLPEY2(s[1129]);
initWPLPEM2(s[1130]);
initWPOJ3(s[1131]);
initWPOWB3(s[1132]);
initWPLPSY3(s[1133]);
initWPLPSM3(s[1134]);
initWPLPEY3(s[1135]);
initWPLPEM3(s[1136]);
initWPOJ4(s[1137]);
initWPOWB4(s[1138]);
initWPLPSY4(s[1139]);
initWPLPSM4(s[1140]);
initWPLPEY4(s[1141]);
initWPLPEM4(s[1142]);
initWPOJ5(s[1143]);
initWPOWB5(s[1144]);
initWPLPSY5(s[1145]);
initWPLPSM5(s[1146]);
initWPLPEY5(s[1147]);
initWPLPEM5(s[1148]);
initWPNIC(s[1149]);
initWPNICE(s[1150]);
initWPNIMW(s[1151]);
initWPLIMWK(s[1152]);
initWPCHDPH(s[1153]);
initWPCHDME(s[1154]);
initWPCHDHR(s[1155]);
initWPCHDFL(s[1156]);
initWPCHDHO(s[1157]);
initWPCHDAD(s[1158]);
initWPCHD96(s[1159]);
initWPCHGDN(s[1160]);
initWPCHDMPH(s[1161]);
initWPCHDMME(s[1162]);
initWPCHDMHR(s[1163]);
initWPCHDMFL(s[1164]);
initWPCHDMHO(s[1165]);
initWPCHDMAD(s[1166]);
initWPCHDMCO(s[1167]);
initWPCHDM85(s[1168]);
initWPCHDM86(s[1169]);
initWPCHDM96(s[1170]);
initWPCHLPH(s[1171]);
initWPCHLME(s[1172]);
initWPCHLHR(s[1173]);
initWPCHLFL(s[1174]);
initWPCHLHO(s[1175]);
initWPCHLAD(s[1176]);
initWPCHL95(s[1177]);
initWPCHL96(s[1178]);
initWPCHLMPH(s[1179]);
initWPCHLMME(s[1180]);
initWPCHLMHR(s[1181]);
initWPCHLMFL(s[1182]);
initWPCHLMHO(s[1183]);
initWPCHLMAD(s[1184]);
initWPCHLM85(s[1185]);
initWPCHLM86(s[1186]);
initWPCHLM96(s[1187]);
initWPOCHG(s[1188]);
initWPACHG(s[1189]);
initWPBCHPH(s[1190]);
initWPBCHME(s[1191]);
initWPBCHHR(s[1192]);
initWPBCHFL(s[1193]);
initWPBCHHO(s[1194]);
initWPBCHAD(s[1195]);
initWPBCH95(s[1196]);
initWPLNJ(s[1197]);
initWPWYNOH(s[1198]);
initWPWYNTI(s[1199]);
initWPWYNRH(s[1200]);
initWPWYNOU(s[1201]);
initWPWYNRE(s[1202]);
initWPWYNVR(s[1203]);
initWPWYNFA(s[1204]);
initWPWYNCH(s[1205]);
initWPWYNEM(s[1206]);
initWPWYNCA(s[1207]);
initWPWYNEA(s[1208]);
initWPWYNMO(s[1209]);
initWPWYN85(s[1210]);
initWPWYNMOH(s[1211]);
initWPWYNMTI(s[1212]);
initWPWYNMRH(s[1213]);
initWPWYNMOU(s[1214]);
initWPWYNMRE(s[1215]);
initWPWYNMVR(s[1216]);
initWPWYNMFA(s[1217]);
initWPWYNMCH(s[1218]);
initWPWYNMEM(s[1219]);
initWPWYNMCA(s[1220]);
initWPWYNMEA(s[1221]);
initWPWYNMMO(s[1222]);
initWPWYNMCO(s[1223]);
initWPWYNMOR(s[1224]);
initWPWYNMDE(s[1225]);
initWPWYNMLH(s[1226]);
initWPWYNMLO(s[1227]);
initWPWYNMAB(s[1228]);
initWPWYNM85(s[1229]);
initWPWYNM86(s[1230]);
initWPMYNJ(s[1231]);
initWPLCHPH(s[1232]);
initWPLCHME(s[1233]);
initWPLCHHR(s[1234]);
initWPLCHFL(s[1235]);
initWPLCHHO(s[1236]);
initWPLCHAD(s[1237]);
initWPLCH95(s[1238]);
initWPLCH96(s[1239]);
initWPLCHMPH(s[1240]);
initWPLCHMME(s[1241]);
initWPLCHMHR(s[1242]);
initWPLCHMFL(s[1243]);
initWPLCHMHO(s[1244]);
initWPLCHMAD(s[1245]);
initWPLCHMLO(s[1246]);
initWPLCHMSA(s[1247]);
initWPLCHMBO(s[1248]);
initWPLCHMCO(s[1249]);
initWPLCHMDE(s[1250]);
initWPLCHMLH(s[1251]);
initWPLCHMRT(s[1252]);
initWPLCHM85(s[1253]);
initWPLCHM86(s[1254]);
initWPNLKSU(s[1255]);
initWPNLKDI(s[1256]);
initWPNLKPA(s[1257]);
initWPNLKRT(s[1258]);
initWPNLKPE(s[1259]);
initWPNLKLO(s[1260]);
initWPNLK95(s[1261]);
initWPNLKMSU(s[1262]);
initWPNLKMDI(s[1263]);
initWPNLKMPA(s[1264]);
initWPNLKMRT(s[1265]);
initWPNLKMPE(s[1266]);
initWPNLKMLO(s[1267]);
initWPNLKMEN(s[1268]);
initWPNLKMCM(s[1269]);
initWPNLKMAC(s[1270]);
initWPNLKMDE(s[1271]);
initWPNLKMCO(s[1272]);
initWPNLKMFI(s[1273]);
initWPNLKMCN(s[1274]);
initWPNLKMHR(s[1275]);
initWPNLKMSE(s[1276]);
initWPNLKMFR(s[1277]);
initWPNLKMNO(s[1278]);
initWPNLKM85(s[1279]);
initWPNLKM86(s[1280]);
initWPSPAY(s[1281]);
initWPOTP(s[1282]);
initWPAOTP(s[1283]);
initWPAOTWL(s[1284]);
initWPAOTWU(s[1285]);
initWPAOTWE(s[1286]);
initWPAOTWR(s[1287]);
initWPAOTFL(s[1288]);
initWPAOTFU(s[1289]);
initWPAOTFE(s[1290]);
initWPAOTFR(s[1291]);
initWPAOTML(s[1292]);
initWPAOTMU(s[1293]);
initWPAOTME(s[1294]);
initWPAOTMR(s[1295]);
initWPAOTYL(s[1296]);
initWPAOTYU(s[1297]);
initWPAOTYE(s[1298]);
initWPAOTYR(s[1299]);
initWPAOTOL(s[1300]);
initWPAOTOU(s[1301]);
initWPAOTOE(s[1302]);
initWPAOTOR(s[1303]);
initWPPERI(s[1304]);
initWPSLIP(s[1305]);
initWPTHP(s[1306]);
initWPTHPWL(s[1307]);
initWPTHPWU(s[1308]);
initWPTHPWE(s[1309]);
initWPTHPWR(s[1310]);
initWPTHPFL(s[1311]);
initWPTHPFU(s[1312]);
initWPTHPFE(s[1313]);
initWPTHPFR(s[1314]);
initWPTHPML(s[1315]);
initWPTHPMU(s[1316]);
initWPTHPME(s[1317]);
initWPTHPMR(s[1318]);
initWPTHPYL(s[1319]);
initWPTHPYU(s[1320]);
initWPTHPYE(s[1321]);
initWPTHPYR(s[1322]);
initWPTHPOL(s[1323]);
initWPTHPOU(s[1324]);
initWPTHPOE(s[1325]);
initWPTHPOR(s[1326]);
initWPTHL(s[1327]);
initWPUP(s[1328]);
initWPUPA(s[1329]);
initWPUPAWL(s[1330]);
initWPUPAWU(s[1331]);
initWPUPAWE(s[1332]);
initWPUPAWR(s[1333]);
initWPUPAFL(s[1334]);
initWPUPAFU(s[1335]);
initWPUPAFE(s[1336]);
initWPUPAFR(s[1337]);
initWPUPAML(s[1338]);
initWPUPAMU(s[1339]);
initWPUPAME(s[1340]);
initWPUPAMR(s[1341]);
initWPUPAYL(s[1342]);
initWPUPAYU(s[1343]);
initWPUPAYE(s[1344]);
initWPUPAYR(s[1345]);
initWPUPAOL(s[1346]);
initWPUPAOU(s[1347]);
initWPUPAOE(s[1348]);
initWPUPAOR(s[1349]);
initWPPAYA(s[1350]);
initWPCRET(s[1351]);
initWPCRAGE(s[1352]);
initWPCRETL(s[1353]);
initWPIR(s[1354]);
initWPAP(s[1355]);
initWPRAIR(s[1356]);
initWPRAIM(s[1357]);
initWPRAEY(s[1358]);
initWPRAEM(s[1359]);
initWPPROF(s[1360]);
initWPPROFL(s[1361]);
initWPPROFU(s[1362]);
initWPPROFE(s[1363]);
initWPPROFR(s[1364]);
initWPPL(s[1365]);
initWPBDT(s[1366]);
initWPBDNI(s[1367]);
initWPBI(s[1368]);
initWPBIWA(s[1369]);
initWPBIWAL(s[1370]);
initWPBIWAU(s[1371]);
initWPBIWAE(s[1372]);
initWPBIWAR(s[1373]);
initWPBIMA(s[1374]);
initWPBIMAL(s[1375]);
initWPBIMAU(s[1376]);
initWPBIMAE(s[1377]);
initWPBIMAR(s[1378]);
initWPBUSV(s[1379]);
initWPBUSVL(s[1380]);
initWPBUSVU(s[1381]);
initWPBUSVE(s[1382]);
initWPBUSVR(s[1383]);
initWPMOJ(s[1384]);
initWPHMSJ(s[1385]);
initWPESJ(s[1386]);
initWPESJL(s[1387]);
initWPESJU(s[1388]);
initWPESJE(s[1389]);
initWPESJR(s[1390]);
initWPESJM(s[1391]);
initWPESJML(s[1392]);
initWPESJMU(s[1393]);
initWPESJME(s[1394]);
initWPESJMR(s[1395]);
initWPBUS(s[1396]);
initWPVBUS(s[1397]);
initWPVBUSL(s[1398]);
initWPVBUSU(s[1399]);
initWPVBUSE(s[1400]);
initWPVBUSR(s[1401]);
initWPBPS(s[1402]);
initWPPS(s[1403]);
initWPMORE(s[1404]);
initWPNPENS(s[1405]);
initWPRPENS(s[1406]);
initWPANYP(s[1407]);
initWPPSOT(s[1408]);
initWPPSEX(s[1409]);
initWPPSAF(s[1410]);
initWPPSEL(s[1411]);
initWPPS95(s[1412]);
initWPPSMOT(s[1413]);
initWPPSMEX(s[1414]);
initWPPSMAF(s[1415]);
initWPPSMEL(s[1416]);
initWPPSMAL(s[1417]);
initWPPSMAG(s[1418]);
initWPPSMHR(s[1419]);
initWPPSMDL(s[1420]);
initWPPSM85(s[1421]);
initWPPSM86(s[1422]);
initWPPSM96(s[1423]);
initWPEC(s[1424]);
initWPECA(s[1425]);
initWPEXW(s[1426]);
initWPSPOUP(s[1427]);
initWPSPOU(s[1428]);
initWPMANPP(s[1429]);
initWPMPAH(s[1430]);
initWPMALA(s[1431]);
initWPQN(s[1432]);
initWP1Q(s[1433]);
initWP2Q(s[1434]);
initWP3Q(s[1435]);
initWPMFQ(s[1436]);
initWPMSQ(s[1437]);
initWPMTQ(s[1438]);
initWPMANSP(s[1439]);
initWPMSAH(s[1440]);
initWPMSH(s[1441]);
initWPSN(s[1442]);
initWP1SQ(s[1443]);
initWP2SQ(s[1444]);
initWP3SQ(s[1445]);
initWPMSFQ(s[1446]);
initWPMSSQ(s[1447]);
initWPMSTQ(s[1448]);
initWPSFOR(s[1449]);
initWPPFDM(s[1450]);
initWPPFDY(s[1451]);
initWPFPR(s[1452]);
initWPFPN(s[1453]);
initWPSPFU(s[1454]);
initWPBPPS(s[1455]);
initWPADDP(s[1456]);
initWPAPS(s[1457]);
initWPPFEX(s[1458]);
initWPSPY(s[1459]);
initWPSPAM(s[1460]);
initWPSPAW(s[1461]);
initWPRAGE(s[1462]);
initWPEARLY(s[1463]);
initWPERAG(s[1464]);
initWPERET(s[1465]);
initWPERP(s[1466]);
initWPREAOH(s[1467]);
initWPREARH(s[1468]);
initWPREARE(s[1469]);
initWPREAVR(s[1470]);
initWPREAFI(s[1471]);
initWPREAFA(s[1472]);
initWPREAEN(s[1473]);
initWPREACH(s[1474]);
initWPREAST(s[1475]);
initWPREADT(s[1476]);
initWPREAYO(s[1477]);
initWPREA95(s[1478]);
initWPREA96(s[1479]);
initWPREANO(s[1480]);
initWPREAMOH(s[1481]);
initWPREAMRH(s[1482]);
initWPREAMRE(s[1483]);
initWPREAMVR(s[1484]);
initWPREAMFI(s[1485]);
initWPREAMFA(s[1486]);
initWPREAMEN(s[1487]);
initWPREAMCH(s[1488]);
initWPREAMST(s[1489]);
initWPREAMDT(s[1490]);
initWPREAMYO(s[1491]);
initWPREAM85(s[1492]);
initWPREAM86(s[1493]);
initWPREAM96(s[1494]);
initWPREAMNO(s[1495]);
initWPMREA(s[1496]);
initWPRRAG(s[1497]);
initWPRROH(s[1498]);
initWPRRRH(s[1499]);
initWPRRRE(s[1500]);
initWPRRFI(s[1501]);
initWPRRFA(s[1502]);
initWPRREN(s[1503]);
initWPRRCH(s[1504]);
initWPRRST(s[1505]);
initWPRRDT(s[1506]);
initWPRRYO(s[1507]);
initWPRR95(s[1508]);
initWPRR96(s[1509]);
initWPRRMAG(s[1510]);
initWPRRMOH(s[1511]);
initWPRRMRH(s[1512]);
initWPRRMRE(s[1513]);
initWPRRMFI(s[1514]);
initWPRRMFA(s[1515]);
initWPRRMEN(s[1516]);
initWPRRMCH(s[1517]);
initWPRRMST(s[1518]);
initWPRRMDT(s[1519]);
initWPRRMYO(s[1520]);
initWPRRMLI(s[1521]);
initWPRRMAF(s[1522]);
initWPRRM85(s[1523]);
initWPRRM86(s[1524]);
initWPRRM96(s[1525]);
initWPMRRE(s[1526]);
initWPWKR(s[1527]);
initWPPHI(s[1528]);
initWPHOWU(s[1529]);
initWPHLWZ(s[1530]);
initWPHOWE(s[1531]);
initWPMHI(s[1532]);
initWPMHIL(s[1533]);
initWPMHIU(s[1534]);
initWPMHIE(s[1535]);
initWPMHIR(s[1536]);
initIAASK(s[1537]);
initIAWORK(s[1538]);
initIASINC(s[1539]);
initIASINCL(s[1540]);
initIASINCU(s[1541]);
initIASINCE(s[1542]);
initIASINCR(s[1543]);
initIASPEN(s[1544]);
initIASPW(s[1545]);
initIASPA(s[1546]);
initIAPAM(s[1547]);
initIAPAMWL(s[1548]);
initIAPAMWU(s[1549]);
initIAPAMWE(s[1550]);
initIAPAMWR(s[1551]);
initIAPAMFL(s[1552]);
initIAPAMFU(s[1553]);
initIAPAMFE(s[1554]);
initIAPAMFR(s[1555]);
initIAPAMML(s[1556]);
initIAPAMMU(s[1557]);
initIAPAMME(s[1558]);
initIAPAMMR(s[1559]);
initIAPAMYL(s[1560]);
initIAPAMYU(s[1561]);
initIAPAMYE(s[1562]);
initIAPAMYR(s[1563]);
initIAPAMOL(s[1564]);
initIAPAMOU(s[1565]);
initIAPAMOE(s[1566]);
initIAPAMOR(s[1567]);
initIAPLY(s[1568]);
initIAPLYW(s[1569]);
initIASPP(s[1570]);
initIAPPAM(s[1571]);
initIAPPAWL(s[1572]);
initIAPPAWU(s[1573]);
initIAPPAWE(s[1574]);
initIAPPAWR(s[1575]);
initIAPPAFL(s[1576]);
initIAPPAFU(s[1577]);
initIAPPAFE(s[1578]);
initIAPPAFR(s[1579]);
initIAPPAML(s[1580]);
initIAPPAMU(s[1581]);
initIAPPAME(s[1582]);
initIAPPAMR(s[1583]);
initIAPPAYL(s[1584]);
initIAPPAYU(s[1585]);
initIAPPAYE(s[1586]);
initIAPPAYR(s[1587]);
initIAPPAOL(s[1588]);
initIAPPAOU(s[1589]);
initIAPPAOE(s[1590]);
initIAPPAOR(s[1591]);
initIAPLYP(s[1592]);
initIAPLW(s[1593]);
initIAPPEN(s[1594]);
initIAPPEI(s[1595]);
initIAPPEIL(s[1596]);
initIAPPEIU(s[1597]);
initIAPPEIE(s[1598]);
initIAPPEIR(s[1599]);
initIAANIN(s[1600]);
initIAAILY(s[1601]);
initIAAIM(s[1602]);
initIAAIML(s[1603]);
initIAAIMU(s[1604]);
initIAAIME(s[1605]);
initIAAIMR(s[1606]);
initIAAIP(s[1607]);
initIAAIPL(s[1608]);
initIAAIPU(s[1609]);
initIAAIPE(s[1610]);
initIAAIPR(s[1611]);
initIAHDB(s[1612]);
initIAHDRIB(s[1613]);
initIAHDRSD(s[1614]);
initIAHDRSP(s[1615]);
initIAHDRAA(s[1616]);
initIAHDRDL(s[1617]);
initIAHDRII(s[1618]);
initIAHDRWD(s[1619]);
initIAHDRCA(s[1620]);
initIAHDR95(s[1621]);
initIAHDR96(s[1622]);
initIAHDRMIB(s[1623]);
initIAHDRMSD(s[1624]);
initIAHDRMSP(s[1625]);
initIAHDRMAA(s[1626]);
initIAHDRMDL(s[1627]);
initIAHDRMII(s[1628]);
initIAHDRMWD(s[1629]);
initIAHDRMCA(s[1630]);
initIAHDRM85(s[1631]);
initIAHDRM86(s[1632]);
initIAHDRM96(s[1633]);
initIAHDNIB(s[1634]);
initIAHDNSD(s[1635]);
initIAHDNSP(s[1636]);
initIAHDNAA(s[1637]);
initIAHDNDL(s[1638]);
initIAHDNII(s[1639]);
initIAHDNWD(s[1640]);
initIAHDNCA(s[1641]);
initIAHDN95(s[1642]);
initIAHDN96(s[1643]);
initIAT(s[1644]);
initIAP(s[1645]);
initIAA(s[1646]);
initIAA1WL(s[1647]);
initIAA1WU(s[1648]);
initIAA1WE(s[1649]);
initIAA1WR(s[1650]);
initIAA1FL(s[1651]);
initIAA1FU(s[1652]);
initIAA1FE(s[1653]);
initIAA1FR(s[1654]);
initIAA1ML(s[1655]);
initIAA1MU(s[1656]);
initIAA1ME(s[1657]);
initIAA1MR(s[1658]);
initIAA1YL(s[1659]);
initIAA1YU(s[1660]);
initIAA1YE(s[1661]);
initIAA1YR(s[1662]);
initIAA1OL(s[1663]);
initIAA1OU(s[1664]);
initIAA1OE(s[1665]);
initIAA1OR(s[1666]);
initIAT2(s[1667]);
initIAP2(s[1668]);
initIAA2(s[1669]);
initIAA2WL(s[1670]);
initIAA2WU(s[1671]);
initIAA2WE(s[1672]);
initIAA2WR(s[1673]);
initIAA2FL(s[1674]);
initIAA2FU(s[1675]);
initIAA2FE(s[1676]);
initIAA2FR(s[1677]);
initIAA2ML(s[1678]);
initIAA2MU(s[1679]);
initIAA2ME(s[1680]);
initIAA2MR(s[1681]);
initIAA2YL(s[1682]);
initIAA2YU(s[1683]);
initIAA2YE(s[1684]);
initIAA2YR(s[1685]);
initIAA2OL(s[1686]);
initIAA2OU(s[1687]);
initIAA2OE(s[1688]);
initIAA2OR(s[1689]);
initIAT3(s[1690]);
initIAP3(s[1691]);
initIAA3(s[1692]);
initIAA3WL(s[1693]);
initIAA3WU(s[1694]);
initIAA3WE(s[1695]);
initIAA3WR(s[1696]);
initIAA3FL(s[1697]);
initIAA3FU(s[1698]);
initIAA3FE(s[1699]);
initIAA3FR(s[1700]);
initIAA3ML(s[1701]);
initIAA3MU(s[1702]);
initIAA3ME(s[1703]);
initIAA3MR(s[1704]);
initIAA3YL(s[1705]);
initIAA3YU(s[1706]);
initIAA3YE(s[1707]);
initIAA3YR(s[1708]);
initIAA3OL(s[1709]);
initIAA3OU(s[1710]);
initIAA3OE(s[1711]);
initIAA3OR(s[1712]);
initIAT4(s[1713]);
initIAP4(s[1714]);
initIAA4(s[1715]);
initIAA4WL(s[1716]);
initIAA4WU(s[1717]);
initIAA4WE(s[1718]);
initIAA4WR(s[1719]);
initIAA4FL(s[1720]);
initIAA4FU(s[1721]);
initIAA4FE(s[1722]);
initIAA4FR(s[1723]);
initIAA4ML(s[1724]);
initIAA4MU(s[1725]);
initIAA4ME(s[1726]);
initIAA4MR(s[1727]);
initIAA4YL(s[1728]);
initIAA4YU(s[1729]);
initIAA4YE(s[1730]);
initIAA4YR(s[1731]);
initIAA4OL(s[1732]);
initIAA4OU(s[1733]);
initIAA4OE(s[1734]);
initIAA4OR(s[1735]);
initIAT5(s[1736]);
initIAP5(s[1737]);
initIAA5(s[1738]);
initIAA5WL(s[1739]);
initIAA5WU(s[1740]);
initIAA5WE(s[1741]);
initIAA5WR(s[1742]);
initIAA5FL(s[1743]);
initIAA5FU(s[1744]);
initIAA5FE(s[1745]);
initIAA5FR(s[1746]);
initIAA5ML(s[1747]);
initIAA5MU(s[1748]);
initIAA5ME(s[1749]);
initIAA5MR(s[1750]);
initIAA5YL(s[1751]);
initIAA5YU(s[1752]);
initIAA5YE(s[1753]);
initIAA5YR(s[1754]);
initIAA5OL(s[1755]);
initIAA5OU(s[1756]);
initIAA5OE(s[1757]);
initIAA5OR(s[1758]);
initIAT6(s[1759]);
initIAP6(s[1760]);
initIAA6(s[1761]);
initIAA6WL(s[1762]);
initIAA6WU(s[1763]);
initIAA6WE(s[1764]);
initIAA6WR(s[1765]);
initIAA6FL(s[1766]);
initIAA6FU(s[1767]);
initIAA6FE(s[1768]);
initIAA6FR(s[1769]);
initIAA6ML(s[1770]);
initIAA6MU(s[1771]);
initIAA6ME(s[1772]);
initIAA6MR(s[1773]);
initIAA6YL(s[1774]);
initIAA6YU(s[1775]);
initIAA6YE(s[1776]);
initIAA6YR(s[1777]);
initIAA6OL(s[1778]);
initIAA6OU(s[1779]);
initIAA6OE(s[1780]);
initIAA6OR(s[1781]);
initIAT7(s[1782]);
initIAP7(s[1783]);
initIAA7(s[1784]);
initIAA7WL(s[1785]);
initIAA7WU(s[1786]);
initIAA7WE(s[1787]);
initIAA7WR(s[1788]);
initIAA7FL(s[1789]);
initIAA7FU(s[1790]);
initIAA7FE(s[1791]);
initIAA7FR(s[1792]);
initIAA7ML(s[1793]);
initIAA7MU(s[1794]);
initIAA7ME(s[1795]);
initIAA7MR(s[1796]);
initIAA7YL(s[1797]);
initIAA7YU(s[1798]);
initIAA7YE(s[1799]);
initIAA7YR(s[1800]);
initIAA7OL(s[1801]);
initIAA7OU(s[1802]);
initIAA7OE(s[1803]);
initIAA7OR(s[1804]);
initIAT8(s[1805]);
initIAP8(s[1806]);
initIAA8(s[1807]);
initIAA8WL(s[1808]);
initIAA8WU(s[1809]);
initIAA8WE(s[1810]);
initIAA8WR(s[1811]);
initIAA8FL(s[1812]);
initIAA8FU(s[1813]);
initIAA8FE(s[1814]);
initIAA8FR(s[1815]);
initIAA8ML(s[1816]);
initIAA8MU(s[1817]);
initIAA8ME(s[1818]);
initIAA8MR(s[1819]);
initIAA8YL(s[1820]);
initIAA8YU(s[1821]);
initIAA8YE(s[1822]);
initIAA8YR(s[1823]);
initIAA8OL(s[1824]);
initIAA8OU(s[1825]);
initIAA8OE(s[1826]);
initIAA8OR(s[1827]);
initIAT9(s[1828]);
initIAP9(s[1829]);
initIAA9(s[1830]);
initIAA9WL(s[1831]);
initIAA9WU(s[1832]);
initIAA9WE(s[1833]);
initIAA9WR(s[1834]);
initIAA9FL(s[1835]);
initIAA9FU(s[1836]);
initIAA9FE(s[1837]);
initIAA9FR(s[1838]);
initIAA9ML(s[1839]);
initIAA9MU(s[1840]);
initIAA9ME(s[1841]);
initIAA9MR(s[1842]);
initIAA9YL(s[1843]);
initIAA9YU(s[1844]);
initIAA9YE(s[1845]);
initIAA9YR(s[1846]);
initIAA9OL(s[1847]);
initIAA9OU(s[1848]);
initIAA9OE(s[1849]);
initIAA9OR(s[1850]);
initIAT10(s[1851]);
initIAP10(s[1852]);
initIAA10(s[1853]);
initIAA10WL(s[1854]);
initIAA10WU(s[1855]);
initIAA10WE(s[1856]);
initIAA10WR(s[1857]);
initIAA10FL(s[1858]);
initIAA10FU(s[1859]);
initIAA10FE(s[1860]);
initIAA10FR(s[1861]);
initIAA10ML(s[1862]);
initIAA10MU(s[1863]);
initIAA10ME(s[1864]);
initIAA10MR(s[1865]);
initIAA10YL(s[1866]);
initIAA10YU(s[1867]);
initIAA10YE(s[1868]);
initIAA10YR(s[1869]);
initIAA10OL(s[1870]);
initIAA10OU(s[1871]);
initIAA10OE(s[1872]);
initIAA10OR(s[1873]);
initIAB10(s[1874]);
initIABW10(s[1875]);
initIABM10(s[1876]);
initIAT11(s[1877]);
initIAP11(s[1878]);
initIAA11(s[1879]);
initIAA11WL(s[1880]);
initIAA11WU(s[1881]);
initIAA11WE(s[1882]);
initIAA11WR(s[1883]);
initIAA11FL(s[1884]);
initIAA11FU(s[1885]);
initIAA11FE(s[1886]);
initIAA11FR(s[1887]);
initIAA11ML(s[1888]);
initIAA11MU(s[1889]);
initIAA11ME(s[1890]);
initIAA11MR(s[1891]);
initIAA11YL(s[1892]);
initIAA11YU(s[1893]);
initIAA11YE(s[1894]);
initIAA11YR(s[1895]);
initIAA11OL(s[1896]);
initIAA11OU(s[1897]);
initIAA11OE(s[1898]);
initIAA11OR(s[1899]);
initIAB11(s[1900]);
initIABW11(s[1901]);
initIABM11(s[1902]);
initIAT12(s[1903]);
initIAP12(s[1904]);
initIAA12(s[1905]);
initIAA12WL(s[1906]);
initIAA12WU(s[1907]);
initIAA12WE(s[1908]);
initIAA12WR(s[1909]);
initIAA12FL(s[1910]);
initIAA12FU(s[1911]);
initIAA12FE(s[1912]);
initIAA12FR(s[1913]);
initIAA12ML(s[1914]);
initIAA12MU(s[1915]);
initIAA12ME(s[1916]);
initIAA12MR(s[1917]);
initIAA12YL(s[1918]);
initIAA12YU(s[1919]);
initIAA12YE(s[1920]);
initIAA12YR(s[1921]);
initIAA12OL(s[1922]);
initIAA12OU(s[1923]);
initIAA12OE(s[1924]);
initIAA12OR(s[1925]);
initIAB12(s[1926]);
initIABW12(s[1927]);
initIABM12(s[1928]);
initIAT13(s[1929]);
initIAP13(s[1930]);
initIAA13(s[1931]);
initIAA13WL(s[1932]);
initIAA13WU(s[1933]);
initIAA13WE(s[1934]);
initIAA13WR(s[1935]);
initIAA13FL(s[1936]);
initIAA13FU(s[1937]);
initIAA13FE(s[1938]);
initIAA13FR(s[1939]);
initIAA13ML(s[1940]);
initIAA13MU(s[1941]);
initIAA13ME(s[1942]);
initIAA13MR(s[1943]);
initIAA13YL(s[1944]);
initIAA13YU(s[1945]);
initIAA13YE(s[1946]);
initIAA13YR(s[1947]);
initIAA13OL(s[1948]);
initIAA13OU(s[1949]);
initIAA13OE(s[1950]);
initIAA13OR(s[1951]);
initIAB13(s[1952]);
initIABW13(s[1953]);
initIABM13(s[1954]);
initIAT14(s[1955]);
initIAP14(s[1956]);
initIAA14(s[1957]);
initIAA14WL(s[1958]);
initIAA14WU(s[1959]);
initIAA14WE(s[1960]);
initIAA14WR(s[1961]);
initIAA14FL(s[1962]);
initIAA14FU(s[1963]);
initIAA14FE(s[1964]);
initIAA14FR(s[1965]);
initIAA14ML(s[1966]);
initIAA14MU(s[1967]);
initIAA14ME(s[1968]);
initIAA14MR(s[1969]);
initIAA14YL(s[1970]);
initIAA14YU(s[1971]);
initIAA14YE(s[1972]);
initIAA14YR(s[1973]);
initIAA14OL(s[1974]);
initIAA14OU(s[1975]);
initIAA14OE(s[1976]);
initIAA14OR(s[1977]);
initIAB14(s[1978]);
initIABW14(s[1979]);
initIABM14(s[1980]);
initIAT15(s[1981]);
initIAP15(s[1982]);
initIAA15(s[1983]);
initIAA15WL(s[1984]);
initIAA15WU(s[1985]);
initIAA15WE(s[1986]);
initIAA15WR(s[1987]);
initIAA15FL(s[1988]);
initIAA15FU(s[1989]);
initIAA15FE(s[1990]);
initIAA15FR(s[1991]);
initIAA15ML(s[1992]);
initIAA15MU(s[1993]);
initIAA15ME(s[1994]);
initIAA15MR(s[1995]);
initIAA15YL(s[1996]);
initIAA15YU(s[1997]);
initIAA15YE(s[1998]);
initIAA15YR(s[1999]);
}
public void init_2000_2999(String line) {
initIAA15OL(s[2000]);
initIAA15OU(s[2001]);
initIAA15OE(s[2002]);
initIAA15OR(s[2003]);
initIAB15(s[2004]);
initIABW15(s[2005]);
initIABM15(s[2006]);
initIAT16(s[2007]);
initIAP16(s[2008]);
initIAA16(s[2009]);
initIAA16WL(s[2010]);
initIAA16WU(s[2011]);
initIAA16WE(s[2012]);
initIAA16WR(s[2013]);
initIAA16FL(s[2014]);
initIAA16FU(s[2015]);
initIAA16FE(s[2016]);
initIAA16FR(s[2017]);
initIAA16ML(s[2018]);
initIAA16MU(s[2019]);
initIAA16ME(s[2020]);
initIAA16MR(s[2021]);
initIAA16YL(s[2022]);
initIAA16YU(s[2023]);
initIAA16YE(s[2024]);
initIAA16YR(s[2025]);
initIAA16OL(s[2026]);
initIAA16OU(s[2027]);
initIAA16OE(s[2028]);
initIAA16OR(s[2029]);
initIAB16(s[2030]);
initIABW16(s[2031]);
initIABM16(s[2032]);
initIAT17(s[2033]);
initIAP17(s[2034]);
initIAA17(s[2035]);
initIAA17WL(s[2036]);
initIAA17WU(s[2037]);
initIAA17WE(s[2038]);
initIAA17WR(s[2039]);
initIAA17FL(s[2040]);
initIAA17FU(s[2041]);
initIAA17FE(s[2042]);
initIAA17FR(s[2043]);
initIAA17ML(s[2044]);
initIAA17MU(s[2045]);
initIAA17ME(s[2046]);
initIAA17MR(s[2047]);
initIAA17YL(s[2048]);
initIAA17YU(s[2049]);
initIAA17YE(s[2050]);
initIAA17YR(s[2051]);
initIAA17OL(s[2052]);
initIAA17OU(s[2053]);
initIAA17OE(s[2054]);
initIAA17OR(s[2055]);
initIAB17(s[2056]);
initIABW17(s[2057]);
initIABM17(s[2058]);
initIAT18(s[2059]);
initIAP18(s[2060]);
initIAA18(s[2061]);
initIAA18WL(s[2062]);
initIAA18WU(s[2063]);
initIAA18WE(s[2064]);
initIAA18WR(s[2065]);
initIAA18FL(s[2066]);
initIAA18FU(s[2067]);
initIAA18FE(s[2068]);
initIAA18FR(s[2069]);
initIAA18ML(s[2070]);
initIAA18MU(s[2071]);
initIAA18ME(s[2072]);
initIAA18MR(s[2073]);
initIAA18YL(s[2074]);
initIAA18YU(s[2075]);
initIAA18YE(s[2076]);
initIAA18YR(s[2077]);
initIAA18OL(s[2078]);
initIAA18OU(s[2079]);
initIAA18OE(s[2080]);
initIAA18OR(s[2081]);
initIAB18(s[2082]);
initIABW18(s[2083]);
initIABM18(s[2084]);
initIAHDPIB(s[2085]);
initIAHDPSD(s[2086]);
initIAHDPSP(s[2087]);
initIAHDPAA(s[2088]);
initIAHDPDL(s[2089]);
initIAHDPII(s[2090]);
initIAHDPWD(s[2091]);
initIAHDPCA(s[2092]);
initIAHDP95(s[2093]);
initIAHDP96(s[2094]);
initIAHDPMIB(s[2095]);
initIAHDPMSD(s[2096]);
initIAHDPMSP(s[2097]);
initIAHDPMAA(s[2098]);
initIAHDPMDL(s[2099]);
initIAHDPMII(s[2100]);
initIAHDPMWD(s[2101]);
initIAHDPMCA(s[2102]);
initIAHDPM85(s[2103]);
initIAHDPM86(s[2104]);
initIAHDPM96(s[2105]);
initIAHDPNIB(s[2106]);
initIAHDPNSD(s[2107]);
initIAHDPNSP(s[2108]);
initIAHDPNAA(s[2109]);
initIAHDPNDL(s[2110]);
initIAHDPNII(s[2111]);
initIAHDPNWD(s[2112]);
initIAHDPNCA(s[2113]);
initIAHDPN85(s[2114]);
initIAHDPN96(s[2115]);
initIAT19(s[2116]);
initIAP19(s[2117]);
initIAA19(s[2118]);
initIAA19WL(s[2119]);
initIAA19WU(s[2120]);
initIAA19WE(s[2121]);
initIAA19WR(s[2122]);
initIAA19FL(s[2123]);
initIAA19FU(s[2124]);
initIAA19FE(s[2125]);
initIAA19FR(s[2126]);
initIAA19ML(s[2127]);
initIAA19MU(s[2128]);
initIAA19ME(s[2129]);
initIAA19MR(s[2130]);
initIAA19YL(s[2131]);
initIAA19YU(s[2132]);
initIAA19YE(s[2133]);
initIAA19YR(s[2134]);
initIAA19OL(s[2135]);
initIAA19OU(s[2136]);
initIAA19OE(s[2137]);
initIAA19OR(s[2138]);
initIALY19(s[2139]);
initIALM19(s[2140]);
initIAT20(s[2141]);
initIAP20(s[2142]);
initIAA20(s[2143]);
initIAA20WL(s[2144]);
initIAA20WU(s[2145]);
initIAA20WE(s[2146]);
initIAA20WR(s[2147]);
initIAA20FL(s[2148]);
initIAA20FU(s[2149]);
initIAA20FE(s[2150]);
initIAA20FR(s[2151]);
initIAA20ML(s[2152]);
initIAA20MU(s[2153]);
initIAA20ME(s[2154]);
initIAA20MR(s[2155]);
initIAA20YL(s[2156]);
initIAA20YU(s[2157]);
initIAA20YE(s[2158]);
initIAA20YR(s[2159]);
initIAA20OL(s[2160]);
initIAA20OU(s[2161]);
initIAA20OE(s[2162]);
initIAA20OR(s[2163]);
initIALY20(s[2164]);
initIALM20(s[2165]);
initIAT21(s[2166]);
initIAP21(s[2167]);
initIAA21(s[2168]);
initIAA21WL(s[2169]);
initIAA21WU(s[2170]);
initIAA21WE(s[2171]);
initIAA21WR(s[2172]);
initIAA21FL(s[2173]);
initIAA21FU(s[2174]);
initIAA21FE(s[2175]);
initIAA21FR(s[2176]);
initIAA21ML(s[2177]);
initIAA21MU(s[2178]);
initIAA21ME(s[2179]);
initIAA21MR(s[2180]);
initIAA21YL(s[2181]);
initIAA21YU(s[2182]);
initIAA21YE(s[2183]);
initIAA21YR(s[2184]);
initIAA21OL(s[2185]);
initIAA21OU(s[2186]);
initIAA21OE(s[2187]);
initIAA21OR(s[2188]);
initIALY21(s[2189]);
initIALM21(s[2190]);
initIAT22(s[2191]);
initIAP22(s[2192]);
initIAA22(s[2193]);
initIAA22WL(s[2194]);
initIAA22WU(s[2195]);
initIAA22WE(s[2196]);
initIAA22WR(s[2197]);
initIAA22FL(s[2198]);
initIAA22FU(s[2199]);
initIAA22FE(s[2200]);
initIAA22FR(s[2201]);
initIAA22ML(s[2202]);
initIAA22MU(s[2203]);
initIAA22ME(s[2204]);
initIAA22MR(s[2205]);
initIAA22YL(s[2206]);
initIAA22YU(s[2207]);
initIAA22YE(s[2208]);
initIAA22YR(s[2209]);
initIAA22OL(s[2210]);
initIAA22OU(s[2211]);
initIAA22OE(s[2212]);
initIAA22OR(s[2213]);
initIALY22(s[2214]);
initIALM22(s[2215]);
initIAT23(s[2216]);
initIAP23(s[2217]);
initIAA23(s[2218]);
initIAA23WL(s[2219]);
initIAA23WU(s[2220]);
initIAA23WE(s[2221]);
initIAA23WR(s[2222]);
initIAA23FL(s[2223]);
initIAA23FU(s[2224]);
initIAA23FE(s[2225]);
initIAA23FR(s[2226]);
initIAA23ML(s[2227]);
initIAA23MU(s[2228]);
initIAA23ME(s[2229]);
initIAA23MR(s[2230]);
initIAA23YL(s[2231]);
initIAA23YU(s[2232]);
initIAA23YE(s[2233]);
initIAA23YR(s[2234]);
initIAA23OL(s[2235]);
initIAA23OU(s[2236]);
initIAA23OE(s[2237]);
initIAA23OR(s[2238]);
initIALY23(s[2239]);
initIALM23(s[2240]);
initIAT24(s[2241]);
initIAP24(s[2242]);
initIAA24(s[2243]);
initIAA24WL(s[2244]);
initIAA24WU(s[2245]);
initIAA24WE(s[2246]);
initIAA24WR(s[2247]);
initIAA24FL(s[2248]);
initIAA24FU(s[2249]);
initIAA24FE(s[2250]);
initIAA24FR(s[2251]);
initIAA24ML(s[2252]);
initIAA24MU(s[2253]);
initIAA24ME(s[2254]);
initIAA24MR(s[2255]);
initIAA24YL(s[2256]);
initIAA24YU(s[2257]);
initIAA24YE(s[2258]);
initIAA24YR(s[2259]);
initIAA24OL(s[2260]);
initIAA24OU(s[2261]);
initIAA24OE(s[2262]);
initIAA24OR(s[2263]);
initIALY24(s[2264]);
initIALM24(s[2265]);
initIAT25(s[2266]);
initIAP25(s[2267]);
initIAA25(s[2268]);
initIAA25WL(s[2269]);
initIAA25WU(s[2270]);
initIAA25WE(s[2271]);
initIAA25WR(s[2272]);
initIAA25FL(s[2273]);
initIAA25FU(s[2274]);
initIAA25FE(s[2275]);
initIAA25FR(s[2276]);
initIAA25ML(s[2277]);
initIAA25MU(s[2278]);
initIAA25ME(s[2279]);
initIAA25MR(s[2280]);
initIAA25YL(s[2281]);
initIAA25YU(s[2282]);
initIAA25YE(s[2283]);
initIAA25YR(s[2284]);
initIAA25OL(s[2285]);
initIAA25OU(s[2286]);
initIAA25OE(s[2287]);
initIAA25OR(s[2288]);
initIALY25(s[2289]);
initIALM25(s[2290]);
initIAT26(s[2291]);
initIAP26(s[2292]);
initIAA26(s[2293]);
initIAA26WL(s[2294]);
initIAA26WU(s[2295]);
initIAA26WE(s[2296]);
initIAA26WR(s[2297]);
initIAA26FL(s[2298]);
initIAA26FU(s[2299]);
initIAA26FE(s[2300]);
initIAA26FR(s[2301]);
initIAA26ML(s[2302]);
initIAA26MU(s[2303]);
initIAA26ME(s[2304]);
initIAA26MR(s[2305]);
initIAA26YL(s[2306]);
initIAA26YU(s[2307]);
initIAA26YE(s[2308]);
initIAA26YR(s[2309]);
initIAA26OL(s[2310]);
initIAA26OU(s[2311]);
initIAA26OE(s[2312]);
initIAA26OR(s[2313]);
initIALY26(s[2314]);
initIALM26(s[2315]);
initIAT27(s[2316]);
initIAP27(s[2317]);
initIAA27(s[2318]);
initIAA27WL(s[2319]);
initIAA27WU(s[2320]);
initIAA27WE(s[2321]);
initIAA27WR(s[2322]);
initIAA27FL(s[2323]);
initIAA27FU(s[2324]);
initIAA27FE(s[2325]);
initIAA27FR(s[2326]);
initIAA27ML(s[2327]);
initIAA27MU(s[2328]);
initIAA27ME(s[2329]);
initIAA27MR(s[2330]);
initIAA27YL(s[2331]);
initIAA27YU(s[2332]);
initIAA27YE(s[2333]);
initIAA27YR(s[2334]);
initIAA27OL(s[2335]);
initIAA27OU(s[2336]);
initIAA27OE(s[2337]);
initIAA27OR(s[2338]);
initIALY27(s[2339]);
initIALM27(s[2340]);
initIAT28(s[2341]);
initIAP28(s[2342]);
initIAA28(s[2343]);
initIAA28WL(s[2344]);
initIAA28WU(s[2345]);
initIAA28WE(s[2346]);
initIAA28WR(s[2347]);
initIAA28FL(s[2348]);
initIAA28FU(s[2349]);
initIAA28FE(s[2350]);
initIAA28FR(s[2351]);
initIAA28ML(s[2352]);
initIAA28MU(s[2353]);
initIAA28ME(s[2354]);
initIAA28MR(s[2355]);
initIAA28YL(s[2356]);
initIAA28YU(s[2357]);
initIAA28YE(s[2358]);
initIAA28YR(s[2359]);
initIAA28OL(s[2360]);
initIAA28OU(s[2361]);
initIAA28OE(s[2362]);
initIAA28OR(s[2363]);
initIAB28(s[2364]);
initIABW28(s[2365]);
initIABM28(s[2366]);
initIAT29(s[2367]);
initIAP29(s[2368]);
initIAA29(s[2369]);
initIAA29WL(s[2370]);
initIAA29WU(s[2371]);
initIAA29WE(s[2372]);
initIAA29WR(s[2373]);
initIAA29FL(s[2374]);
initIAA29FU(s[2375]);
initIAA29FE(s[2376]);
initIAA29FR(s[2377]);
initIAA29ML(s[2378]);
initIAA29MU(s[2379]);
initIAA29ME(s[2380]);
initIAA29MR(s[2381]);
initIAA29YL(s[2382]);
initIAA29YU(s[2383]);
initIAA29YE(s[2384]);
initIAA29YR(s[2385]);
initIAA29OL(s[2386]);
initIAA29OU(s[2387]);
initIAA29OE(s[2388]);
initIAA29OR(s[2389]);
initIAB29(s[2390]);
initIABW29(s[2391]);
initIABM29(s[2392]);
initIAT30(s[2393]);
initIAP30(s[2394]);
initIAA30(s[2395]);
initIAA30WL(s[2396]);
initIAA30WU(s[2397]);
initIAA30WE(s[2398]);
initIAA30WR(s[2399]);
initIAA30FL(s[2400]);
initIAA30FU(s[2401]);
initIAA30FE(s[2402]);
initIAA30FR(s[2403]);
initIAA30ML(s[2404]);
initIAA30MU(s[2405]);
initIAA30ME(s[2406]);
initIAA30MR(s[2407]);
initIAA30YL(s[2408]);
initIAA30YU(s[2409]);
initIAA30YE(s[2410]);
initIAA30YR(s[2411]);
initIAA30OL(s[2412]);
initIAA30OU(s[2413]);
initIAA30OE(s[2414]);
initIAA30OR(s[2415]);
initIAB30(s[2416]);
initIABW30(s[2417]);
initIABM30(s[2418]);
initIAT31(s[2419]);
initIAP31(s[2420]);
initIAA31(s[2421]);
initIAA31WL(s[2422]);
initIAA31WU(s[2423]);
initIAA31WE(s[2424]);
initIAA31WR(s[2425]);
initIAA31FL(s[2426]);
initIAA31FU(s[2427]);
initIAA31FE(s[2428]);
initIAA31FR(s[2429]);
initIAA31ML(s[2430]);
initIAA31MU(s[2431]);
initIAA31ME(s[2432]);
initIAA31MR(s[2433]);
initIAA31YL(s[2434]);
initIAA31YU(s[2435]);
initIAA31YE(s[2436]);
initIAA31YR(s[2437]);
initIAA31OL(s[2438]);
initIAA31OU(s[2439]);
initIAA31OE(s[2440]);
initIAA31OR(s[2441]);
initIAB31(s[2442]);
initIABW31(s[2443]);
initIABM31(s[2444]);
initIAT32(s[2445]);
initIAP32(s[2446]);
initIAA32(s[2447]);
initIAA32WL(s[2448]);
initIAA32WU(s[2449]);
initIAA32WE(s[2450]);
initIAA32WR(s[2451]);
initIAA32FL(s[2452]);
initIAA32FU(s[2453]);
initIAA32FE(s[2454]);
initIAA32FR(s[2455]);
initIAA32ML(s[2456]);
initIAA32MU(s[2457]);
initIAA32ME(s[2458]);
initIAA32MR(s[2459]);
initIAA32YL(s[2460]);
initIAA32YU(s[2461]);
initIAA32YE(s[2462]);
initIAA32YR(s[2463]);
initIAA32OL(s[2464]);
initIAA32OU(s[2465]);
initIAA32OE(s[2466]);
initIAA32OR(s[2467]);
initIAB32(s[2468]);
initIABW32(s[2469]);
initIABM32(s[2470]);
initIAT33(s[2471]);
initIAP33(s[2472]);
initIAA33(s[2473]);
initIAA33WL(s[2474]);
initIAA33WU(s[2475]);
initIAA33WE(s[2476]);
initIAA33WR(s[2477]);
initIAA33FL(s[2478]);
initIAA33FU(s[2479]);
initIAA33FE(s[2480]);
initIAA33FR(s[2481]);
initIAA33ML(s[2482]);
initIAA33MU(s[2483]);
initIAA33ME(s[2484]);
initIAA33MR(s[2485]);
initIAA33YL(s[2486]);
initIAA33YU(s[2487]);
initIAA33YE(s[2488]);
initIAA33YR(s[2489]);
initIAA33OL(s[2490]);
initIAA33OU(s[2491]);
initIAA33OE(s[2492]);
initIAA33OR(s[2493]);
initIAB33(s[2494]);
initIABW33(s[2495]);
initIABM33(s[2496]);
initIAT34(s[2497]);
initIAP34(s[2498]);
initIAA34(s[2499]);
initIAA34WL(s[2500]);
initIAA34WU(s[2501]);
initIAA34WE(s[2502]);
initIAA34WR(s[2503]);
initIAA34FL(s[2504]);
initIAA34FU(s[2505]);
initIAA34FE(s[2506]);
initIAA34FR(s[2507]);
initIAA34ML(s[2508]);
initIAA34MU(s[2509]);
initIAA34ME(s[2510]);
initIAA34MR(s[2511]);
initIAA34YL(s[2512]);
initIAA34YU(s[2513]);
initIAA34YE(s[2514]);
initIAA34YR(s[2515]);
initIAA34OL(s[2516]);
initIAA34OU(s[2517]);
initIAA34OE(s[2518]);
initIAA34OR(s[2519]);
initIAB34(s[2520]);
initIABW34(s[2521]);
initIABM34(s[2522]);
initIAT35(s[2523]);
initIAP35(s[2524]);
initIAA35(s[2525]);
initIAA35WL(s[2526]);
initIAA35WU(s[2527]);
initIAA35WE(s[2528]);
initIAA35WR(s[2529]);
initIAA35FL(s[2530]);
initIAA35FU(s[2531]);
initIAA35FE(s[2532]);
initIAA35FR(s[2533]);
initIAA35ML(s[2534]);
initIAA35MU(s[2535]);
initIAA35ME(s[2536]);
initIAA35MR(s[2537]);
initIAA35YL(s[2538]);
initIAA35YU(s[2539]);
initIAA35YE(s[2540]);
initIAA35YR(s[2541]);
initIAA35OL(s[2542]);
initIAA35OU(s[2543]);
initIAA35OE(s[2544]);
initIAA35OR(s[2545]);
initIAB35(s[2546]);
initIABW35(s[2547]);
initIABM35(s[2548]);
initIAT36(s[2549]);
initIAP36(s[2550]);
initIAA36(s[2551]);
initIAA36WL(s[2552]);
initIAA36WU(s[2553]);
initIAA36WE(s[2554]);
initIAA36WR(s[2555]);
initIAA36FL(s[2556]);
initIAA36FU(s[2557]);
initIAA36FE(s[2558]);
initIAA36FR(s[2559]);
initIAA36ML(s[2560]);
initIAA36MU(s[2561]);
initIAA36ME(s[2562]);
initIAA36MR(s[2563]);
initIAA36YL(s[2564]);
initIAA36YU(s[2565]);
initIAA36YE(s[2566]);
initIAA36YR(s[2567]);
initIAA36OL(s[2568]);
initIAA36OU(s[2569]);
initIAA36OE(s[2570]);
initIAA36OR(s[2571]);
initIAB36(s[2572]);
initIABW36(s[2573]);
initIABM36(s[2574]);
initIABEB(s[2575]);
initIABERIS(s[2576]);
initIABERPC(s[2577]);
initIABERTC(s[2578]);
initIABERJA(s[2579]);
initIABERGA(s[2580]);
initIABERWP(s[2581]);
initIABERCB(s[2582]);
initIABERCC(s[2583]);
initIABER95(s[2584]);
initIABER96(s[2585]);
initIABERMIS(s[2586]);
initIABERMPC(s[2587]);
initIABERMTC(s[2588]);
initIABERMJA(s[2589]);
initIABERMGA(s[2590]);
initIABERMWP(s[2591]);
initIABERMCB(s[2592]);
initIABERMCC(s[2593]);
initIABERMFP(s[2594]);
initIABERM85(s[2595]);
initIABERM86(s[2596]);
initIABERM96(s[2597]);
initIABENIS(s[2598]);
initIABENPC(s[2599]);
initIABENTC(s[2600]);
initIABENJA(s[2601]);
initIABENGA(s[2602]);
initIABENWP(s[2603]);
initIABENCB(s[2604]);
initIABENCC(s[2605]);
initIABEN95(s[2606]);
initIABEN96(s[2607]);
initIAT37(s[2608]);
initIAP37(s[2609]);
initIAA37(s[2610]);
initIAA37WL(s[2611]);
initIAA37WU(s[2612]);
initIAA37WE(s[2613]);
initIAA37WR(s[2614]);
initIAA37FL(s[2615]);
initIAA37FU(s[2616]);
initIAA37FE(s[2617]);
initIAA37FR(s[2618]);
initIAA37ML(s[2619]);
initIAA37MU(s[2620]);
initIAA37ME(s[2621]);
initIAA37MR(s[2622]);
initIAA37YL(s[2623]);
initIAA37YU(s[2624]);
initIAA37YE(s[2625]);
initIAA37YR(s[2626]);
initIAA37OL(s[2627]);
initIAA37OU(s[2628]);
initIAA37OE(s[2629]);
initIAA37OR(s[2630]);
initIALY37(s[2631]);
initIALM37(s[2632]);
initIAT38(s[2633]);
initIAP38(s[2634]);
initIAA38(s[2635]);
initIAA38WL(s[2636]);
initIAA38WU(s[2637]);
initIAA38WE(s[2638]);
initIAA38WR(s[2639]);
initIAA38FL(s[2640]);
initIAA38FU(s[2641]);
initIAA38FE(s[2642]);
initIAA38FR(s[2643]);
initIAA38ML(s[2644]);
initIAA38MU(s[2645]);
initIAA38ME(s[2646]);
initIAA38MR(s[2647]);
initIAA38YL(s[2648]);
initIAA38YU(s[2649]);
initIAA38YE(s[2650]);
initIAA38YR(s[2651]);
initIAA38OL(s[2652]);
initIAA38OU(s[2653]);
initIAA38OE(s[2654]);
initIAA38OR(s[2655]);
initIALY38(s[2656]);
initIALM38(s[2657]);
initIAT39(s[2658]);
initIAP39(s[2659]);
initIAA39(s[2660]);
initIAA39WL(s[2661]);
initIAA39WU(s[2662]);
initIAA39WE(s[2663]);
initIAA39WR(s[2664]);
initIAA39FL(s[2665]);
initIAA39FU(s[2666]);
initIAA39FE(s[2667]);
initIAA39FR(s[2668]);
initIAA39ML(s[2669]);
initIAA39MU(s[2670]);
initIAA39ME(s[2671]);
initIAA39MR(s[2672]);
initIAA39YL(s[2673]);
initIAA39YU(s[2674]);
initIAA39YE(s[2675]);
initIAA39YR(s[2676]);
initIAA39OL(s[2677]);
initIAA39OU(s[2678]);
initIAA39OE(s[2679]);
initIAA39OR(s[2680]);
initIALY39(s[2681]);
initIALM39(s[2682]);
initIAWHMT39(s[2683]);
initIAT40(s[2684]);
initIAP40(s[2685]);
initIAA40(s[2686]);
initIAA40WL(s[2687]);
initIAA40WU(s[2688]);
initIAA40WE(s[2689]);
initIAA40WR(s[2690]);
initIAA40FL(s[2691]);
initIAA40FU(s[2692]);
initIAA40FE(s[2693]);
initIAA40FR(s[2694]);
initIAA40ML(s[2695]);
initIAA40MU(s[2696]);
initIAA40ME(s[2697]);
initIAA40MR(s[2698]);
initIAA40YL(s[2699]);
initIAA40YU(s[2700]);
initIAA40YE(s[2701]);
initIAA40YR(s[2702]);
initIAA40OL(s[2703]);
initIAA40OU(s[2704]);
initIAA40OE(s[2705]);
initIAA40OR(s[2706]);
initIALY40(s[2707]);
initIALM40(s[2708]);
initIAT41(s[2709]);
initIAP41(s[2710]);
initIAA41(s[2711]);
initIAA41WL(s[2712]);
initIAA41WU(s[2713]);
initIAA41WE(s[2714]);
initIAA41WR(s[2715]);
initIAA41FL(s[2716]);
initIAA41FU(s[2717]);
initIAA41FE(s[2718]);
initIAA41FR(s[2719]);
initIAA41ML(s[2720]);
initIAA41MU(s[2721]);
initIAA41ME(s[2722]);
initIAA41MR(s[2723]);
initIAA41YL(s[2724]);
initIAA41YU(s[2725]);
initIAA41YE(s[2726]);
initIAA41YR(s[2727]);
initIAA41OL(s[2728]);
initIAA41OU(s[2729]);
initIAA41OE(s[2730]);
initIAA41OR(s[2731]);
initIALY41(s[2732]);
initIALM41(s[2733]);
initIAT42(s[2734]);
initIAP42(s[2735]);
initIAA42(s[2736]);
initIAA42WL(s[2737]);
initIAA42WU(s[2738]);
initIAA42WE(s[2739]);
initIAA42WR(s[2740]);
initIAA42FL(s[2741]);
initIAA42FU(s[2742]);
initIAA42FE(s[2743]);
initIAA42FR(s[2744]);
initIAA42ML(s[2745]);
initIAA42MU(s[2746]);
initIAA42ME(s[2747]);
initIAA42MR(s[2748]);
initIAA42YL(s[2749]);
initIAA42YU(s[2750]);
initIAA42YE(s[2751]);
initIAA42YR(s[2752]);
initIAA42OL(s[2753]);
initIAA42OU(s[2754]);
initIAA42OE(s[2755]);
initIAA42OR(s[2756]);
initIALY42(s[2757]);
initIALM42(s[2758]);
initIAT43(s[2759]);
initIAP43(s[2760]);
initIAA43(s[2761]);
initIAA43WL(s[2762]);
initIAA43WU(s[2763]);
initIAA43WE(s[2764]);
initIAA43WR(s[2765]);
initIAA43FL(s[2766]);
initIAA43FU(s[2767]);
initIAA43FE(s[2768]);
initIAA43FR(s[2769]);
initIAA43ML(s[2770]);
initIAA43MU(s[2771]);
initIAA43ME(s[2772]);
initIAA43MR(s[2773]);
initIAA43YL(s[2774]);
initIAA43YU(s[2775]);
initIAA43YE(s[2776]);
initIAA43YR(s[2777]);
initIAA43OL(s[2778]);
initIAA43OU(s[2779]);
initIAA43OE(s[2780]);
initIAA43OR(s[2781]);
initIALY43(s[2782]);
initIALM43(s[2783]);
initIAT44(s[2784]);
initIAP44(s[2785]);
initIAA44(s[2786]);
initIAA44WL(s[2787]);
initIAA44WU(s[2788]);
initIAA44WE(s[2789]);
initIAA44WR(s[2790]);
initIAA44FL(s[2791]);
initIAA44FU(s[2792]);
initIAA44FE(s[2793]);
initIAA44FR(s[2794]);
initIAA44ML(s[2795]);
initIAA44MU(s[2796]);
initIAA44ME(s[2797]);
initIAA44MR(s[2798]);
initIAA44YL(s[2799]);
initIAA44YU(s[2800]);
initIAA44YE(s[2801]);
initIAA44YR(s[2802]);
initIAA44OL(s[2803]);
initIAA44OU(s[2804]);
initIAA44OE(s[2805]);
initIAA44OR(s[2806]);
initIALY44(s[2807]);
initIALM44(s[2808]);
initIAT45(s[2809]);
initIAP45(s[2810]);
initIAA45(s[2811]);
initIAA45WL(s[2812]);
initIAA45WU(s[2813]);
initIAA45WE(s[2814]);
initIAA45WR(s[2815]);
initIAA45FL(s[2816]);
initIAA45FU(s[2817]);
initIAA45FE(s[2818]);
initIAA45FR(s[2819]);
initIAA45ML(s[2820]);
initIAA45MU(s[2821]);
initIAA45ME(s[2822]);
initIAA45MR(s[2823]);
initIAA45YL(s[2824]);
initIAA45YU(s[2825]);
initIAA45YE(s[2826]);
initIAA45YR(s[2827]);
initIAA45OL(s[2828]);
initIAA45OU(s[2829]);
initIAA45OE(s[2830]);
initIAA45OR(s[2831]);
initIALY45(s[2832]);
initIALM45(s[2833]);
initIAT46(s[2834]);
initIAP46(s[2835]);
initIAA46(s[2836]);
initIAA46WL(s[2837]);
initIAA46WU(s[2838]);
initIAA46WE(s[2839]);
initIAA46WR(s[2840]);
initIAA46FL(s[2841]);
initIAA46FU(s[2842]);
initIAA46FE(s[2843]);
initIAA46FR(s[2844]);
initIAA46ML(s[2845]);
initIAA46MU(s[2846]);
initIAA46ME(s[2847]);
initIAA46MR(s[2848]);
initIAA46YL(s[2849]);
initIAA46YU(s[2850]);
initIAA46YE(s[2851]);
initIAA46YR(s[2852]);
initIAA46OL(s[2853]);
initIAA46OU(s[2854]);
initIAA46OE(s[2855]);
initIAA46OR(s[2856]);
initIAB46(s[2857]);
initIABW46(s[2858]);
initIABM46(s[2859]);
initIAT47(s[2860]);
initIAP47(s[2861]);
initIAA47(s[2862]);
initIAA47WL(s[2863]);
initIAA47WU(s[2864]);
initIAA47WE(s[2865]);
initIAA47WR(s[2866]);
initIAA47FL(s[2867]);
initIAA47FU(s[2868]);
initIAA47FE(s[2869]);
initIAA47FR(s[2870]);
initIAA47ML(s[2871]);
initIAA47MU(s[2872]);
initIAA47ME(s[2873]);
initIAA47MR(s[2874]);
initIAA47YL(s[2875]);
initIAA47YU(s[2876]);
initIAA47YE(s[2877]);
initIAA47YR(s[2878]);
initIAA47OL(s[2879]);
initIAA47OU(s[2880]);
initIAA47OE(s[2881]);
initIAA47OR(s[2882]);
initIAB47(s[2883]);
initIABW47(s[2884]);
initIABM47(s[2885]);
initIAT48(s[2886]);
initIAP48(s[2887]);
initIAA48(s[2888]);
initIAA48WL(s[2889]);
initIAA48WU(s[2890]);
initIAA48WE(s[2891]);
initIAA48WR(s[2892]);
initIAA48FL(s[2893]);
initIAA48FU(s[2894]);
initIAA48FE(s[2895]);
initIAA48FR(s[2896]);
initIAA48ML(s[2897]);
initIAA48MU(s[2898]);
initIAA48ME(s[2899]);
initIAA48MR(s[2900]);
initIAA48YL(s[2901]);
initIAA48YU(s[2902]);
initIAA48YE(s[2903]);
initIAA48YR(s[2904]);
initIAA48OL(s[2905]);
initIAA48OU(s[2906]);
initIAA48OE(s[2907]);
initIAA48OR(s[2908]);
initIAB48(s[2909]);
initIABW48(s[2910]);
initIABM48(s[2911]);
initIAT49(s[2912]);
initIAP49(s[2913]);
initIAA49(s[2914]);
initIAA49WL(s[2915]);
initIAA49WU(s[2916]);
initIAA49WE(s[2917]);
initIAA49WR(s[2918]);
initIAA49FL(s[2919]);
initIAA49FU(s[2920]);
initIAA49FE(s[2921]);
initIAA49FR(s[2922]);
initIAA49ML(s[2923]);
initIAA49MU(s[2924]);
initIAA49ME(s[2925]);
initIAA49MR(s[2926]);
initIAA49YL(s[2927]);
initIAA49YU(s[2928]);
initIAA49YE(s[2929]);
initIAA49YR(s[2930]);
initIAA49OL(s[2931]);
initIAA49OU(s[2932]);
initIAA49OE(s[2933]);
initIAA49OR(s[2934]);
initIAB49(s[2935]);
initIABW49(s[2936]);
initIABM49(s[2937]);
initIAT50(s[2938]);
initIAP50(s[2939]);
initIAA50(s[2940]);
initIAA50WL(s[2941]);
initIAA50WU(s[2942]);
initIAA50WE(s[2943]);
initIAA50WR(s[2944]);
initIAA50FL(s[2945]);
initIAA50FU(s[2946]);
initIAA50FE(s[2947]);
initIAA50FR(s[2948]);
initIAA50ML(s[2949]);
initIAA50MU(s[2950]);
initIAA50ME(s[2951]);
initIAA50MR(s[2952]);
initIAA50YL(s[2953]);
initIAA50YU(s[2954]);
initIAA50YE(s[2955]);
initIAA50YR(s[2956]);
initIAA50OL(s[2957]);
initIAA50OU(s[2958]);
initIAA50OE(s[2959]);
initIAA50OR(s[2960]);
initIAB50(s[2961]);
initIABW50(s[2962]);
initIABM50(s[2963]);
initIAT51(s[2964]);
initIAP51(s[2965]);
initIAA51(s[2966]);
initIAA51WL(s[2967]);
initIAA51WU(s[2968]);
initIAA51WE(s[2969]);
initIAA51WR(s[2970]);
initIAA51FL(s[2971]);
initIAA51FU(s[2972]);
initIAA51FE(s[2973]);
initIAA51FR(s[2974]);
initIAA51ML(s[2975]);
initIAA51MU(s[2976]);
initIAA51ME(s[2977]);
initIAA51MR(s[2978]);
initIAA51YL(s[2979]);
initIAA51YU(s[2980]);
initIAA51YE(s[2981]);
initIAA51YR(s[2982]);
initIAA51OL(s[2983]);
initIAA51OU(s[2984]);
initIAA51OE(s[2985]);
initIAA51OR(s[2986]);
initIAB51(s[2987]);
initIABW51(s[2988]);
initIABM51(s[2989]);
initIAT52(s[2990]);
initIAP52(s[2991]);
initIAA52(s[2992]);
initIAA52WL(s[2993]);
initIAA52WU(s[2994]);
initIAA52WE(s[2995]);
initIAA52WR(s[2996]);
initIAA52FL(s[2997]);
initIAA52FU(s[2998]);
initIAA52FE(s[2999]);
}
public void init_3000_3999(String line) {
initIAA52FR(s[3000]);
initIAA52ML(s[3001]);
initIAA52MU(s[3002]);
initIAA52ME(s[3003]);
initIAA52MR(s[3004]);
initIAA52YL(s[3005]);
initIAA52YU(s[3006]);
initIAA52YE(s[3007]);
initIAA52YR(s[3008]);
initIAA52OL(s[3009]);
initIAA52OU(s[3010]);
initIAA52OE(s[3011]);
initIAA52OR(s[3012]);
initIAB52(s[3013]);
initIABW52(s[3014]);
initIABM52(s[3015]);
initIAT53(s[3016]);
initIAP53(s[3017]);
initIAA53(s[3018]);
initIAA53WL(s[3019]);
initIAA53WU(s[3020]);
initIAA53WE(s[3021]);
initIAA53WR(s[3022]);
initIAA53FL(s[3023]);
initIAA53FU(s[3024]);
initIAA53FE(s[3025]);
initIAA53FR(s[3026]);
initIAA53ML(s[3027]);
initIAA53MU(s[3028]);
initIAA53ME(s[3029]);
initIAA53MR(s[3030]);
initIAA53YL(s[3031]);
initIAA53YU(s[3032]);
initIAA53YE(s[3033]);
initIAA53YR(s[3034]);
initIAA53OL(s[3035]);
initIAA53OU(s[3036]);
initIAA53OE(s[3037]);
initIAA53OR(s[3038]);
initIAB53(s[3039]);
initIABW53(s[3040]);
initIABM53(s[3041]);
initIAT54(s[3042]);
initIAP54(s[3043]);
initIAA54(s[3044]);
initIAA54WL(s[3045]);
initIAA54WU(s[3046]);
initIAA54WE(s[3047]);
initIAA54WR(s[3048]);
initIAA54FL(s[3049]);
initIAA54FU(s[3050]);
initIAA54FE(s[3051]);
initIAA54FR(s[3052]);
initIAA54ML(s[3053]);
initIAA54MU(s[3054]);
initIAA54ME(s[3055]);
initIAA54MR(s[3056]);
initIAA54YL(s[3057]);
initIAA54YU(s[3058]);
initIAA54YE(s[3059]);
initIAA54YR(s[3060]);
initIAA54OL(s[3061]);
initIAA54OU(s[3062]);
initIAA54OE(s[3063]);
initIAA54OR(s[3064]);
initIAB54(s[3065]);
initIABW54(s[3066]);
initIABM54(s[3067]);
initIABEPIS(s[3068]);
initIABEPPC(s[3069]);
initIABEPTC(s[3070]);
initIABEPJA(s[3071]);
initIABEPGA(s[3072]);
initIABEPWP(s[3073]);
initIABEPCB(s[3074]);
initIABEPCC(s[3075]);
initIABEP95(s[3076]);
initIABEP96(s[3077]);
initIABEPMIS(s[3078]);
initIABEPMPC(s[3079]);
initIABEPMTC(s[3080]);
initIABEPMJA(s[3081]);
initIABEPMGA(s[3082]);
initIABEPMWP(s[3083]);
initIABEPMCB(s[3084]);
initIABEPMCC(s[3085]);
initIABEPMFP(s[3086]);
initIABEPM85(s[3087]);
initIABEPM86(s[3088]);
initIABEPM96(s[3089]);
initIABEPNIS(s[3090]);
initIABEPNPC(s[3091]);
initIABEPNWC(s[3092]);
initIABEPNJA(s[3093]);
initIABEPNGA(s[3094]);
initIABEPNWP(s[3095]);
initIABEPNCB(s[3096]);
initIABEPNCC(s[3097]);
initIABEPN95(s[3098]);
initIABEPN96(s[3099]);
initIAT55(s[3100]);
initIAP55(s[3101]);
initIAA55(s[3102]);
initIAA55WL(s[3103]);
initIAA55WU(s[3104]);
initIAA55WE(s[3105]);
initIAA55WR(s[3106]);
initIAA55FL(s[3107]);
initIAA55FU(s[3108]);
initIAA55FE(s[3109]);
initIAA55FR(s[3110]);
initIAA55ML(s[3111]);
initIAA55MU(s[3112]);
initIAA55ME(s[3113]);
initIAA55MR(s[3114]);
initIAA55YL(s[3115]);
initIAA55YU(s[3116]);
initIAA55YE(s[3117]);
initIAA55YR(s[3118]);
initIAA55OL(s[3119]);
initIAA55OU(s[3120]);
initIAA55OE(s[3121]);
initIAA55OR(s[3122]);
initIALY55(s[3123]);
initIALM55(s[3124]);
initIAT56(s[3125]);
initIAP56(s[3126]);
initIAA56(s[3127]);
initIAA56WL(s[3128]);
initIAA56WU(s[3129]);
initIAA56WE(s[3130]);
initIAA56WR(s[3131]);
initIAA56FL(s[3132]);
initIAA56FU(s[3133]);
initIAA56FE(s[3134]);
initIAA56FR(s[3135]);
initIAA56ML(s[3136]);
initIAA56MU(s[3137]);
initIAA56ME(s[3138]);
initIAA56MR(s[3139]);
initIAA56YL(s[3140]);
initIAA56YU(s[3141]);
initIAA56YE(s[3142]);
initIAA56YR(s[3143]);
initIAA56OL(s[3144]);
initIAA56OU(s[3145]);
initIAA56OE(s[3146]);
initIAA56OR(s[3147]);
initIALY56(s[3148]);
initIALM56(s[3149]);
initIAT57(s[3150]);
initIAP57(s[3151]);
initIAA57(s[3152]);
initIAA57WL(s[3153]);
initIAA57WU(s[3154]);
initIAA57WE(s[3155]);
initIAA57WR(s[3156]);
initIAA57FL(s[3157]);
initIAA57FU(s[3158]);
initIAA57FE(s[3159]);
initIAA57FR(s[3160]);
initIAA57ML(s[3161]);
initIAA57MU(s[3162]);
initIAA57ME(s[3163]);
initIAA57MR(s[3164]);
initIAA57YL(s[3165]);
initIAA57YU(s[3166]);
initIAA57YE(s[3167]);
initIAA57YR(s[3168]);
initIAA57OL(s[3169]);
initIAA57OU(s[3170]);
initIAA57OE(s[3171]);
initIAA57OR(s[3172]);
initIALY57(s[3173]);
initIALM57(s[3174]);
initIAT58(s[3175]);
initIAP58(s[3176]);
initIAA58(s[3177]);
initIAA58WL(s[3178]);
initIAA58WU(s[3179]);
initIAA58WE(s[3180]);
initIAA58WR(s[3181]);
initIAA58FL(s[3182]);
initIAA58FU(s[3183]);
initIAA58FE(s[3184]);
initIAA58FR(s[3185]);
initIAA58ML(s[3186]);
initIAA58MU(s[3187]);
initIAA58ME(s[3188]);
initIAA58MR(s[3189]);
initIAA58YL(s[3190]);
initIAA58YU(s[3191]);
initIAA58YE(s[3192]);
initIAA58YR(s[3193]);
initIAA58OL(s[3194]);
initIAA58OU(s[3195]);
initIAA58OE(s[3196]);
initIAA58OR(s[3197]);
initIALY58(s[3198]);
initIALM58(s[3199]);
initIAT59(s[3200]);
initIAP59(s[3201]);
initIAA59(s[3202]);
initIAA59WL(s[3203]);
initIAA59WU(s[3204]);
initIAA59WE(s[3205]);
initIAA59WR(s[3206]);
initIAA59FL(s[3207]);
initIAA59FU(s[3208]);
initIAA59FE(s[3209]);
initIAA59FR(s[3210]);
initIAA59ML(s[3211]);
initIAA59MU(s[3212]);
initIAA59ME(s[3213]);
initIAA59MR(s[3214]);
initIAA59YL(s[3215]);
initIAA59YU(s[3216]);
initIAA59YE(s[3217]);
initIAA59YR(s[3218]);
initIAA59OL(s[3219]);
initIAA59OU(s[3220]);
initIAA59OE(s[3221]);
initIAA59OR(s[3222]);
initIALY59(s[3223]);
initIALM59(s[3224]);
initIAT60(s[3225]);
initIAP60(s[3226]);
initIAA60(s[3227]);
initIAA60WL(s[3228]);
initIAA60WU(s[3229]);
initIAA60WE(s[3230]);
initIAA60WR(s[3231]);
initIAA60FL(s[3232]);
initIAA60FU(s[3233]);
initIAA60FE(s[3234]);
initIAA60FR(s[3235]);
initIAA60ML(s[3236]);
initIAA60MU(s[3237]);
initIAA60ME(s[3238]);
initIAA60MR(s[3239]);
initIAA60YL(s[3240]);
initIAA60YU(s[3241]);
initIAA60YE(s[3242]);
initIAA60YR(s[3243]);
initIAA60OL(s[3244]);
initIAA60OU(s[3245]);
initIAA60OE(s[3246]);
initIAA60OR(s[3247]);
initIALY60(s[3248]);
initIALM60(s[3249]);
initIAT61(s[3250]);
initIAP61(s[3251]);
initIAA61(s[3252]);
initIAA61WL(s[3253]);
initIAA61WU(s[3254]);
initIAA61WE(s[3255]);
initIAA61WR(s[3256]);
initIAA61FL(s[3257]);
initIAA61FU(s[3258]);
initIAA61FE(s[3259]);
initIAA61FR(s[3260]);
initIAA61ML(s[3261]);
initIAA61MU(s[3262]);
initIAA61ME(s[3263]);
initIAA61MR(s[3264]);
initIAA61YL(s[3265]);
initIAA61YU(s[3266]);
initIAA61YE(s[3267]);
initIAA61YR(s[3268]);
initIAA61OL(s[3269]);
initIAA61OU(s[3270]);
initIAA61OE(s[3271]);
initIAA61OR(s[3272]);
initIALY61(s[3273]);
initIALM61(s[3274]);
initIAT62(s[3275]);
initIAP62(s[3276]);
initIAA62(s[3277]);
initIAA62WL(s[3278]);
initIAA62WU(s[3279]);
initIAA62WE(s[3280]);
initIAA62WR(s[3281]);
initIAA62FL(s[3282]);
initIAA62FU(s[3283]);
initIAA62FE(s[3284]);
initIAA62FR(s[3285]);
initIAA62ML(s[3286]);
initIAA62MU(s[3287]);
initIAA62ME(s[3288]);
initIAA62MR(s[3289]);
initIAA62YL(s[3290]);
initIAA62YU(s[3291]);
initIAA62YE(s[3292]);
initIAA62YR(s[3293]);
initIAA62OL(s[3294]);
initIAA62OU(s[3295]);
initIAA62OE(s[3296]);
initIAA62OR(s[3297]);
initIALY62(s[3298]);
initIALM62(s[3299]);
initIAT63(s[3300]);
initIAP63(s[3301]);
initIAA63(s[3302]);
initIAA63WL(s[3303]);
initIAA63WU(s[3304]);
initIAA63WE(s[3305]);
initIAA63WR(s[3306]);
initIAA63FL(s[3307]);
initIAA63FU(s[3308]);
initIAA63FE(s[3309]);
initIAA63FR(s[3310]);
initIAA63ML(s[3311]);
initIAA63MU(s[3312]);
initIAA63ME(s[3313]);
initIAA63MR(s[3314]);
initIAA63YL(s[3315]);
initIAA63YU(s[3316]);
initIAA63YE(s[3317]);
initIAA63YR(s[3318]);
initIAA63OL(s[3319]);
initIAA63OU(s[3320]);
initIAA63OE(s[3321]);
initIAA63OR(s[3322]);
initIALY63(s[3323]);
initIALM63(s[3324]);
initIAT64(s[3325]);
initIAP64(s[3326]);
initIAA64(s[3327]);
initIAA64WL(s[3328]);
initIAA64WU(s[3329]);
initIAA64WE(s[3330]);
initIAA64WR(s[3331]);
initIAA64FL(s[3332]);
initIAA64FU(s[3333]);
initIAA64FE(s[3334]);
initIAA64FR(s[3335]);
initIAA64ML(s[3336]);
initIAA64MU(s[3337]);
initIAA64ME(s[3338]);
initIAA64MR(s[3339]);
initIAA64YL(s[3340]);
initIAA64YU(s[3341]);
initIAA64YE(s[3342]);
initIAA64YR(s[3343]);
initIAA64OL(s[3344]);
initIAA64OU(s[3345]);
initIAA64OE(s[3346]);
initIAA64OR(s[3347]);
initIAB64(s[3348]);
initIABW64(s[3349]);
initIABM64(s[3350]);
initIAT65(s[3351]);
initIAP65(s[3352]);
initIAA65(s[3353]);
initIAA65WL(s[3354]);
initIAA65WU(s[3355]);
initIAA65WE(s[3356]);
initIAA65WR(s[3357]);
initIAA65FL(s[3358]);
initIAA65FU(s[3359]);
initIAA65FE(s[3360]);
initIAA65FR(s[3361]);
initIAA65ML(s[3362]);
initIAA65MU(s[3363]);
initIAA65ME(s[3364]);
initIAA65MR(s[3365]);
initIAA65YL(s[3366]);
initIAA65YU(s[3367]);
initIAA65YE(s[3368]);
initIAA65YR(s[3369]);
initIAA65OL(s[3370]);
initIAA65OU(s[3371]);
initIAA65OE(s[3372]);
initIAA65OR(s[3373]);
initIAB65(s[3374]);
initIABW65(s[3375]);
initIABM65(s[3376]);
initIAT66(s[3377]);
initIAP66(s[3378]);
initIAA66(s[3379]);
initIAA66WL(s[3380]);
initIAA66WU(s[3381]);
initIAA66WE(s[3382]);
initIAA66WR(s[3383]);
initIAA66FL(s[3384]);
initIAA66FU(s[3385]);
initIAA66FE(s[3386]);
initIAA66FR(s[3387]);
initIAA66ML(s[3388]);
initIAA66MU(s[3389]);
initIAA66ME(s[3390]);
initIAA66MR(s[3391]);
initIAA66YL(s[3392]);
initIAA66YU(s[3393]);
initIAA66YE(s[3394]);
initIAA66YR(s[3395]);
initIAA66OL(s[3396]);
initIAA66OU(s[3397]);
initIAA66OE(s[3398]);
initIAA66OR(s[3399]);
initIAB66(s[3400]);
initIABW66(s[3401]);
initIABM66(s[3402]);
initIAT67(s[3403]);
initIAP67(s[3404]);
initIAA67(s[3405]);
initIAA67WL(s[3406]);
initIAA67WU(s[3407]);
initIAA67WE(s[3408]);
initIAA67WR(s[3409]);
initIAA67FL(s[3410]);
initIAA67FU(s[3411]);
initIAA67FE(s[3412]);
initIAA67FR(s[3413]);
initIAA67ML(s[3414]);
initIAA67MU(s[3415]);
initIAA67ME(s[3416]);
initIAA67MR(s[3417]);
initIAA67YL(s[3418]);
initIAA67YU(s[3419]);
initIAA67YE(s[3420]);
initIAA67YR(s[3421]);
initIAA67OL(s[3422]);
initIAA67OU(s[3423]);
initIAA67OE(s[3424]);
initIAA67OR(s[3425]);
initIAB67(s[3426]);
initIABW67(s[3427]);
initIABM67(s[3428]);
initIAT68(s[3429]);
initIAP68(s[3430]);
initIAA68(s[3431]);
initIAA68WL(s[3432]);
initIAA68WU(s[3433]);
initIAA68WE(s[3434]);
initIAA68WR(s[3435]);
initIAA68FL(s[3436]);
initIAA68FU(s[3437]);
initIAA68FE(s[3438]);
initIAA68FR(s[3439]);
initIAA68ML(s[3440]);
initIAA68MU(s[3441]);
initIAA68ME(s[3442]);
initIAA68MR(s[3443]);
initIAA68YL(s[3444]);
initIAA68YU(s[3445]);
initIAA68YE(s[3446]);
initIAA68YR(s[3447]);
initIAA68OL(s[3448]);
initIAA68OU(s[3449]);
initIAA68OE(s[3450]);
initIAA68OR(s[3451]);
initIAB68(s[3452]);
initIABW68(s[3453]);
initIABM68(s[3454]);
initIAT69(s[3455]);
initIAP69(s[3456]);
initIAA69(s[3457]);
initIAA69WL(s[3458]);
initIAA69WU(s[3459]);
initIAA69WE(s[3460]);
initIAA69WR(s[3461]);
initIAA69FL(s[3462]);
initIAA69FU(s[3463]);
initIAA69FE(s[3464]);
initIAA69FR(s[3465]);
initIAA69ML(s[3466]);
initIAA69MU(s[3467]);
initIAA69ME(s[3468]);
initIAA69MR(s[3469]);
initIAA69YL(s[3470]);
initIAA69YU(s[3471]);
initIAA69YE(s[3472]);
initIAA69YR(s[3473]);
initIAA69OL(s[3474]);
initIAA69OU(s[3475]);
initIAA69OE(s[3476]);
initIAA69OR(s[3477]);
initIAB69(s[3478]);
initIABW69(s[3479]);
initIABM69(s[3480]);
initIAT70(s[3481]);
initIAP70(s[3482]);
initIAA70(s[3483]);
initIAA70WL(s[3484]);
initIAA70WU(s[3485]);
initIAA70WE(s[3486]);
initIAA70WR(s[3487]);
initIAA70FL(s[3488]);
initIAA70FU(s[3489]);
initIAA70FE(s[3490]);
initIAA70FR(s[3491]);
initIAA70ML(s[3492]);
initIAA70MU(s[3493]);
initIAA70ME(s[3494]);
initIAA70MR(s[3495]);
initIAA70YL(s[3496]);
initIAA70YU(s[3497]);
initIAA70YE(s[3498]);
initIAA70YR(s[3499]);
initIAA70OL(s[3500]);
initIAA70OU(s[3501]);
initIAA70OE(s[3502]);
initIAA70OR(s[3503]);
initIAB70(s[3504]);
initIABW70(s[3505]);
initIABM70(s[3506]);
initIAT71(s[3507]);
initIAP71(s[3508]);
initIAA71(s[3509]);
initIAA71WL(s[3510]);
initIAA71WU(s[3511]);
initIAA71WE(s[3512]);
initIAA71WR(s[3513]);
initIAA71FL(s[3514]);
initIAA71FU(s[3515]);
initIAA71FE(s[3516]);
initIAA71FR(s[3517]);
initIAA71ML(s[3518]);
initIAA71MU(s[3519]);
initIAA71ME(s[3520]);
initIAA71MR(s[3521]);
initIAA71YL(s[3522]);
initIAA71YU(s[3523]);
initIAA71YE(s[3524]);
initIAA71YR(s[3525]);
initIAA71OL(s[3526]);
initIAA71OU(s[3527]);
initIAA71OE(s[3528]);
initIAA71OR(s[3529]);
initIAB71(s[3530]);
initIABW71(s[3531]);
initIABM71(s[3532]);
initIAT72(s[3533]);
initIAP72(s[3534]);
initIAA72(s[3535]);
initIAA72WL(s[3536]);
initIAA72WU(s[3537]);
initIAA72WE(s[3538]);
initIAA72WR(s[3539]);
initIAA72FL(s[3540]);
initIAA72FU(s[3541]);
initIAA72FE(s[3542]);
initIAA72FR(s[3543]);
initIAA72ML(s[3544]);
initIAA72MU(s[3545]);
initIAA72ME(s[3546]);
initIAA72MR(s[3547]);
initIAA72YL(s[3548]);
initIAA72YU(s[3549]);
initIAA72YE(s[3550]);
initIAA72YR(s[3551]);
initIAA72OL(s[3552]);
initIAA72OU(s[3553]);
initIAA72OE(s[3554]);
initIAA72OR(s[3555]);
initIAB72(s[3556]);
initIABW72(s[3557]);
initIABM72(s[3558]);
initIAFUEL(s[3559]);
initIASICA(s[3560]);
initIASISAV(s[3561]);
initIASITESS(s[3562]);
initIASIISA(s[3563]);
initIASIPB(s[3564]);
initIASINS(s[3565]);
initIASIPEP(s[3566]);
initIASISHA(s[3567]);
initIASIOPT(s[3568]);
initIASISC(s[3569]);
initIASIUIT(s[3570]);
initIASIBG(s[3571]);
initIASI95(s[3572]);
initIASI96(s[3573]);
initIASAVA(s[3574]);
initIASAVAL(s[3575]);
initIASAVAU(s[3576]);
initIASAVAE(s[3577]);
initIASAVAR(s[3578]);
initIASINT(s[3579]);
initIASINTL(s[3580]);
initIASINTU(s[3581]);
initIASINTE(s[3582]);
initIASINTR(s[3583]);
initIANS(s[3584]);
initIANSL(s[3585]);
initIANSU(s[3586]);
initIANSE(s[3587]);
initIANSR(s[3588]);
initIANSI(s[3589]);
initIANSIL(s[3590]);
initIANSIU(s[3591]);
initIANSIE(s[3592]);
initIANSIR(s[3593]);
initIANPB(s[3594]);
initIANPBL(s[3595]);
initIANPBU(s[3596]);
initIANPBE(s[3597]);
initIANPBR(s[3598]);
initIANPBP(s[3599]);
initIANPBPL(s[3600]);
initIANPBPU(s[3601]);
initIANPBPE(s[3602]);
initIANPBPR(s[3603]);
initIATI(s[3604]);
initIATIL(s[3605]);
initIATIU(s[3606]);
initIATIE(s[3607]);
initIATIR(s[3608]);
initIATII(s[3609]);
initIATIIL(s[3610]);
initIATIIU(s[3611]);
initIATIIE(s[3612]);
initIATIIR(s[3613]);
initIAISACAS(s[3614]);
initIAISALI(s[3615]);
initIAISASHA(s[3616]);
initIACISA(s[3617]);
initIACISAL(s[3618]);
initIACISAU(s[3619]);
initIACISAE(s[3620]);
initIACISAR(s[3621]);
initIALISA(s[3622]);
initIALISAL(s[3623]);
initIALISAU(s[3624]);
initIALISAE(s[3625]);
initIALISAR(s[3626]);
initIASISA(s[3627]);
initIASISAL(s[3628]);
initIASISAU(s[3629]);
initIASISAE(s[3630]);
initIASISAR(s[3631]);
initIAISAD(s[3632]);
initIAISADL(s[3633]);
initIAISADU(s[3634]);
initIAISADE(s[3635]);
initIAISADR(s[3636]);
initIAIP(s[3637]);
initIAIPL(s[3638]);
initIAIPU(s[3639]);
initIAIPE(s[3640]);
initIAIPR(s[3641]);
initIAIPI(s[3642]);
initIAIPIL(s[3643]);
initIAIPIU(s[3644]);
initIAIPIE(s[3645]);
initIAIPIR(s[3646]);
initIASSS(s[3647]);
initIASSSL(s[3648]);
initIASSSU(s[3649]);
initIASSSE(s[3650]);
initIASSSR(s[3651]);
initIASSSI(s[3652]);
initIASSSIL(s[3653]);
initIASSSIU(s[3654]);
initIASSSIE(s[3655]);
initIASSSIR(s[3656]);
initIASHTPRI(s[3657]);
initIASHTMUT(s[3658]);
initIASHTUKL(s[3659]);
initIASHTFOL(s[3660]);
initIADENAT(s[3661]);
initIADEMUT(s[3662]);
initIAUIT(s[3663]);
initIAUITL(s[3664]);
initIAUITU(s[3665]);
initIAUITE(s[3666]);
initIAUITR(s[3667]);
initIAUITI(s[3668]);
initIAUITIL(s[3669]);
initIAUITIU(s[3670]);
initIAUITIE(s[3671]);
initIAUITIR(s[3672]);
initIABG(s[3673]);
initIABGL(s[3674]);
initIABGU(s[3675]);
initIABGE(s[3676]);
initIABGR(s[3677]);
initIABGI(s[3678]);
initIABGIL(s[3679]);
initIABGIU(s[3680]);
initIABGIE(s[3681]);
initIABGIR(s[3682]);
initIASIO(s[3683]);
initIASIOL(s[3684]);
initIASIOU(s[3685]);
initIASIOE(s[3686]);
initIASIOR(s[3687]);
initIASIOI(s[3688]);
initIASIOIL(s[3689]);
initIASIOIU(s[3690]);
initIASIOIE(s[3691]);
initIASIOIR(s[3692]);
initIALI(s[3693]);
initIALIW(s[3694]);
initIALIYA(s[3695]);
initIALIYAL(s[3696]);
initIALIYAU(s[3697]);
initIALIYAE(s[3698]);
initIALIYAR(s[3699]);
initIALIPA(s[3700]);
initIALIPAL(s[3701]);
initIALIPAU(s[3702]);
initIALIPAE(s[3703]);
initIALIPAR(s[3704]);
initIASC(s[3705]);
initIASCA(s[3706]);
initIASCAL(s[3707]);
initIASCAU(s[3708]);
initIASCAE(s[3709]);
initIASCAR(s[3710]);
initIADOC(s[3711]);
initIAINTA(s[3712]);
initIAPROPHO(s[3713]);
initIAPROPFA(s[3714]);
initIAPROPOL(s[3715]);
initIAPROPOW(s[3716]);
initIAPROPTR(s[3717]);
initIAPROPIN(s[3718]);
initIAPROP95(s[3719]);
initIAPROP96(s[3720]);
initIAHOME(s[3721]);
initIAHOMEL(s[3722]);
initIAHOMEU(s[3723]);
initIAHOMEE(s[3724]);
initIAHOMER(s[3725]);
initIAIR(s[3726]);
initIAIRA(s[3727]);
initIAIRAL(s[3728]);
initIAIRAU(s[3729]);
initIAIRAE(s[3730]);
initIAIRAR(s[3731]);
initIAFBPS(s[3732]);
initIAFBPSL(s[3733]);
initIAFBPSU(s[3734]);
initIAFBPSE(s[3735]);
initIAFBPSR(s[3736]);
initIAFBPR(s[3737]);
initIAFBA(s[3738]);
initIAFBAL(s[3739]);
initIAFBAU(s[3740]);
initIAFBAE(s[3741]);
initIAFBAR(s[3742]);
initIAOASA(s[3743]);
initIAOASAL(s[3744]);
initIAOASAU(s[3745]);
initIAOASAE(s[3746]);
initIAOASAR(s[3747]);
initIAREGP(s[3748]);
initIAPAY(s[3749]);
initIAPAYR(s[3750]);
initIAREGO(s[3751]);
initIAREGM(s[3752]);
initIARGWL(s[3753]);
initIARGWU(s[3754]);
initIARGWE(s[3755]);
initIARGWR(s[3756]);
initIARGFL(s[3757]);
initIARGFU(s[3758]);
initIARGFE(s[3759]);
initIARGFR(s[3760]);
initIARGML(s[3761]);
initIARGMU(s[3762]);
initIARGME(s[3763]);
initIARGMR(s[3764]);
initIARGYL(s[3765]);
initIARGYU(s[3766]);
initIARGYE(s[3767]);
initIARGYR(s[3768]);
initIARGOL(s[3769]);
initIARGOU(s[3770]);
initIARGOE(s[3771]);
initIARGOR(s[3772]);
initIARGYR1(s[3773]);
initIARGMW(s[3774]);
initIARMWA(s[3775]);
initIAOTHP(s[3776]);
initIAPAY2(s[3777]);
initIAPAYR2(s[3778]);
initIAREGO2(s[3779]);
initIAREGM2(s[3780]);
initIARG2WL(s[3781]);
initIARG2WU(s[3782]);
initIARG2WE(s[3783]);
initIARG2WR(s[3784]);
initIARG2FL(s[3785]);
initIARG2FU(s[3786]);
initIARG2FE(s[3787]);
initIARG2FR(s[3788]);
initIARG2ML(s[3789]);
initIARG2MU(s[3790]);
initIARG2ME(s[3791]);
initIARG2MR(s[3792]);
initIARG2YL(s[3793]);
initIARG2YU(s[3794]);
initIARG2YE(s[3795]);
initIARG2YR(s[3796]);
initIARG2OL(s[3797]);
initIARG2OU(s[3798]);
initIARG2OE(s[3799]);
initIARG2OR(s[3800]);
initIARGYR2(s[3801]);
initIARGMW2(s[3802]);
initIARMWA2(s[3803]);
initIAOTHP2(s[3804]);
initIAPAY3(s[3805]);
initIAPAYR3(s[3806]);
initIAREGO3(s[3807]);
initIAREGM3(s[3808]);
initIARG3WL(s[3809]);
initIARG3WU(s[3810]);
initIARG3WE(s[3811]);
initIARG3WR(s[3812]);
initIARG3FL(s[3813]);
initIARG3FU(s[3814]);
initIARG3FE(s[3815]);
initIARG3FR(s[3816]);
initIARG3ML(s[3817]);
initIARG3MU(s[3818]);
initIARG3ME(s[3819]);
initIARG3MR(s[3820]);
initIARG3YL(s[3821]);
initIARG3YU(s[3822]);
initIARG3YE(s[3823]);
initIARG3YR(s[3824]);
initIARG3OL(s[3825]);
initIARG3OU(s[3826]);
initIARG3OE(s[3827]);
initIARG3OR(s[3828]);
initIARGYR3(s[3829]);
initIARGM(s[3830]);
initIARMWA3(s[3831]);
initIAOTHP3(s[3832]);
initIAPAR(s[3833]);
initIAPS(s[3834]);
initIAPR(s[3835]);
initIAPF(s[3836]);
initIAPAM2(s[3837]);
initIAPA2WL(s[3838]);
initIAPA2WU(s[3839]);
initIAPA2WE(s[3840]);
initIAPA2WR(s[3841]);
initIAPA2FL(s[3842]);
initIAPA2FU(s[3843]);
initIAPA2FE(s[3844]);
initIAPA2FR(s[3845]);
initIAPA2ML(s[3846]);
initIAPA2MU(s[3847]);
initIAPA2ME(s[3848]);
initIAPA2MR(s[3849]);
initIAPA2YL(s[3850]);
initIAPA2YU(s[3851]);
initIAPA2YE(s[3852]);
initIAPA2YR(s[3853]);
initIAPA2OL(s[3854]);
initIAPA2OU(s[3855]);
initIAPA2OE(s[3856]);
initIAPA2OR(s[3857]);
initIARGYRP(s[3858]);
initIARGMWP(s[3859]);
initIARMWPA(s[3860]);
initIAMRP(s[3861]);
initIAPKLI(s[3862]);
initIAPKPP(s[3863]);
initIAPKPAP(s[3864]);
initIAPKOIP(s[3865]);
initIAPKRP(s[3866]);
initIAPKIOB(s[3867]);
initIAPKGW(s[3868]);
initIAPK95(s[3869]);
initIAPK96(s[3870]);
initIAPKMLI(s[3871]);
initIAPKMPP(s[3872]);
initIAPKMPAP(s[3873]);
initIAPKMOIP(s[3874]);
initIAPKMRP(s[3875]);
initIAPKMIOB(s[3876]);
initIAPKMGW(s[3877]);
initIAPKM85(s[3878]);
initIAPKM86(s[3879]);
initIAPKM96(s[3880]);
initIAPKM1(s[3881]);
initIAPKM2(s[3882]);
initIAPKM3(s[3883]);
initIAPKM4(s[3884]);
initIAPKM5(s[3885]);
initIAPKM6(s[3886]);
initIAPKM7(s[3887]);
initIAPKM8(s[3888]);
initIAPKM1L(s[3889]);
initIAPKM1U(s[3890]);
initIAPKM1E(s[3891]);
initIAPKM1R(s[3892]);
initIAPKM2L(s[3893]);
initIAPKM2U(s[3894]);
initIAPKM2E(s[3895]);
initIAPKM2R(s[3896]);
initIAPKM3L(s[3897]);
initIAPKM3U(s[3898]);
initIAPKM3E(s[3899]);
initIAPKM3R(s[3900]);
initIAPKM4L(s[3901]);
initIAPKM4U(s[3902]);
initIAPKM4E(s[3903]);
initIAPKM4R(s[3904]);
initIAPKM5L(s[3905]);
initIAPKM5U(s[3906]);
initIAPKM5E(s[3907]);
initIAPKM5R(s[3908]);
initIAPKM6L(s[3909]);
initIAPKM6U(s[3910]);
initIAPKM6E(s[3911]);
initIAPKM6R(s[3912]);
initIAPKM7L(s[3913]);
initIAPKM7U(s[3914]);
initIAPKM7E(s[3915]);
initIAPKM7R(s[3916]);
initIAPKM8L(s[3917]);
initIAPKM8U(s[3918]);
initIAPKM8E(s[3919]);
initIAPKM8R(s[3920]);
initIADEBT(s[3921]);
initIADEBM(s[3922]);
initIADEBML(s[3923]);
initIADEBMU(s[3924]);
initIADEBME(s[3925]);
initIADEBMR(s[3926]);
initIAOWE(s[3927]);
initIAOWEM(s[3928]);
initIAOWEML(s[3929]);
initIAOWEMU(s[3930]);
initIAOWEME(s[3931]);
initIAOWEMR(s[3932]);
initIAREGR(s[3933]);
initIAREGRP(s[3934]);
initIAREP(s[3935]);
initIAREPWL(s[3936]);
initIAREPWU(s[3937]);
initIAREPWE(s[3938]);
initIAREPWR(s[3939]);
initIAREPFL(s[3940]);
initIAREPFU(s[3941]);
initIAREPFE(s[3942]);
initIAREPFR(s[3943]);
initIAREPML(s[3944]);
initIAREPMU(s[3945]);
initIAREPME(s[3946]);
initIAREPMR(s[3947]);
initIAREPYL(s[3948]);
initIAREPYU(s[3949]);
initIAREPYE(s[3950]);
initIAREPYR(s[3951]);
initIAREPOL(s[3952]);
initIAREPOU(s[3953]);
initIAREPOE(s[3954]);
initIAREPOR(s[3955]);
initIALOANHP(s[3956]);
initIALOANPL(s[3957]);
initIALOANOD(s[3958]);
initIALOANMO(s[3959]);
initIALOANSF(s[3960]);
initIALOANML(s[3961]);
initIALOAN96(s[3962]);
initIALOAM(s[3963]);
initIALOAML(s[3964]);
initIALOAMU(s[3965]);
initIALOAME(s[3966]);
initIALOAMR(s[3967]);
initIALREP(s[3968]);
initIALRE(s[3969]);
initIALREWL(s[3970]);
initIALREWU(s[3971]);
initIALREWE(s[3972]);
initIALREWR(s[3973]);
initIALREFL(s[3974]);
initIALREFU(s[3975]);
initIALREFE(s[3976]);
initIALREFR(s[3977]);
initIALREML(s[3978]);
initIALREMU(s[3979]);
initIALREME(s[3980]);
initIALREMR(s[3981]);
initIALREYL(s[3982]);
initIALREYU(s[3983]);
initIALREYE(s[3984]);
initIALREYR(s[3985]);
initIALREOL(s[3986]);
initIALREOU(s[3987]);
initIALREOE(s[3988]);
initIALREOR(s[3989]);
initIAJNT(s[3990]);
initIAAM(s[3991]);
initIAAML(s[3992]);
initIAAMU(s[3993]);
initIAAME(s[3994]);
initIAAMR(s[3995]);
initIAFCON(s[3996]);
initIAORGF(s[3997]);
initIAFIND(s[3998]);
initIAPYW(s[3999]);
}
public void init_4000_4999(String line) {
initIAERN(s[4000]);
initIAEARL(s[4001]);
initIAEARU(s[4002]);
initIAEARE(s[4003]);
initIAEARR(s[4004]);
initIAPYW2(s[4005]);
initIAERN2(s[4006]);
initIAEAR2L(s[4007]);
initIAEAR2U(s[4008]);
initIAEAR2E(s[4009]);
initIAEAR2R(s[4010]);
initIAPY(s[4011]);
initIAERN3(s[4012]);
initIAEAR3L(s[4013]);
initIAEAR3U(s[4014]);
initIAEAR3E(s[4015]);
initIAEAR3R(s[4016]);
initIAPYW4(s[4017]);
initIAERN4(s[4018]);
initIAEAR4L(s[4019]);
initIAEAR4U(s[4020]);
initIAEAR4E(s[4021]);
initIAEAR4R(s[4022]);
initIAPYW5(s[4023]);
initIAERN5(s[4024]);
initIAEAR5L(s[4025]);
initIAEAR5U(s[4026]);
initIAEAR5E(s[4027]);
initIAEAR5R(s[4028]);
initIAPYW6(s[4029]);
initIAERN6(s[4030]);
initIAEAR6L(s[4031]);
initIAEAR6U(s[4032]);
initIAEAR6E(s[4033]);
initIAEAR6R(s[4034]);
initIAPYW7(s[4035]);
initIAERN7(s[4036]);
initIAEAR7L(s[4037]);
initIAEAR7U(s[4038]);
initIAEAR7E(s[4039]);
initIAEAR7R(s[4040]);
initIAPYW8(s[4041]);
initIAERN8(s[4042]);
initIAEAR8L(s[4043]);
initIAEAR8U(s[4044]);
initIAEAR8E(s[4045]);
initIAEAR8R(s[4046]);
initIAPYW9(s[4047]);
initIAERN9(s[4048]);
initIAEAR9L(s[4049]);
initIAEAR9U(s[4050]);
initIAEAR9E(s[4051]);
initIAEAR9R(s[4052]);
initIAPYW10(s[4053]);
initIAERN10(s[4054]);
initIAEA10L(s[4055]);
initIAEA10U(s[4056]);
initIAEA10E(s[4057]);
initIAEA10R(s[4058]);
initIAPAYW11(s[4059]);
initIAEARN11(s[4060]);
initIAEA11L(s[4061]);
initIAEA11U(s[4062]);
initIAEA11E(s[4063]);
initIAEA11R(s[4064]);
initIAREC(s[4065]);
initIARECL(s[4066]);
initIARECU(s[4067]);
initIARECE(s[4068]);
initIARECR(s[4069]);
initIAOM(s[4070]);
initIAOMM(s[4071]);
initIAOMML(s[4072]);
initIAOMMU(s[4073]);
initIAOMME(s[4074]);
initIAOMMR(s[4075]);
initHOASK(s[4076]);
initHOELI(s[4077]);
initHOWHO(s[4078]);
initHOWH1(s[4079]);
initHOWH2(s[4080]);
initHOWH3(s[4081]);
initHOWH4(s[4082]);
initHOWH5(s[4083]);
initHOWH6(s[4084]);
initHOWH7(s[4085]);
initHOWH8(s[4086]);
initHOWH9(s[4087]);
initHOWH10(s[4088]);
initHOWH11(s[4089]);
initHOWH12(s[4090]);
initHOWH97(s[4091]);
initHOBAS(s[4092]);
initHOBP(s[4093]);
initHOBA(s[4094]);
initHOBAWL(s[4095]);
initHOBAWU(s[4096]);
initHOBAWE(s[4097]);
initHOBAWR(s[4098]);
initHOBAFL(s[4099]);
initHOBAFU(s[4100]);
initHOBAFE(s[4101]);
initHOBAFR(s[4102]);
initHOBAML(s[4103]);
initHOBAMU(s[4104]);
initHOBAME(s[4105]);
initHOBAMR(s[4106]);
initHOBAYL(s[4107]);
initHOBAYU(s[4108]);
initHOBAYE(s[4109]);
initHOBAYR(s[4110]);
initHOBAOL(s[4111]);
initHOBAOU(s[4112]);
initHOBAOE(s[4113]);
initHOBAOR(s[4114]);
initHOBAS2(s[4115]);
initHOBP2(s[4116]);
initHOBA2(s[4117]);
initHOBA2WL(s[4118]);
initHOBA2WU(s[4119]);
initHOBA2WE(s[4120]);
initHOBA2WR(s[4121]);
initHOBA2FL(s[4122]);
initHOBA2FU(s[4123]);
initHOBA2FE(s[4124]);
initHOBA2FR(s[4125]);
initHOBA2ML(s[4126]);
initHOBA2MU(s[4127]);
initHOBA2ME(s[4128]);
initHOBA2MR(s[4129]);
initHOBA2YL(s[4130]);
initHOBA2YU(s[4131]);
initHOBA2YE(s[4132]);
initHOBA2YR(s[4133]);
initHOBA2OL(s[4134]);
initHOBA2OU(s[4135]);
initHOBA2OE(s[4136]);
initHOBA2OR(s[4137]);
initHOBAS3(s[4138]);
initHOBP3(s[4139]);
initHOBA3(s[4140]);
initHOBA3WL(s[4141]);
initHOBA3WU(s[4142]);
initHOBA3WE(s[4143]);
initHOBA3WR(s[4144]);
initHOBA3FL(s[4145]);
initHOBA3FU(s[4146]);
initHOBA3FE(s[4147]);
initHOBA3FR(s[4148]);
initHOBA3ML(s[4149]);
initHOBA3MU(s[4150]);
initHOBA3ME(s[4151]);
initHOBA3MR(s[4152]);
initHOBA3YL(s[4153]);
initHOBA3YU(s[4154]);
initHOBA3YE(s[4155]);
initHOBA3YR(s[4156]);
initHOBA3OL(s[4157]);
initHOBA3OU(s[4158]);
initHOBA3OE(s[4159]);
initHOBA3OR(s[4160]);
initHOBAS4(s[4161]);
initHOBP4(s[4162]);
initHOBA4(s[4163]);
initHOBA4WL(s[4164]);
initHOBA4WU(s[4165]);
initHOBA4WE(s[4166]);
initHOBA4WR(s[4167]);
initHOBA4FL(s[4168]);
initHOBA4FU(s[4169]);
initHOBA4FE(s[4170]);
initHOBA4FR(s[4171]);
initHOBA4ML(s[4172]);
initHOBA4MU(s[4173]);
initHOBA4ME(s[4174]);
initHOBA4MR(s[4175]);
initHOBA4YL(s[4176]);
initHOBA4YU(s[4177]);
initHOBA4YE(s[4178]);
initHOBA4YR(s[4179]);
initHOBA4OL(s[4180]);
initHOBA4OU(s[4181]);
initHOBA4OE(s[4182]);
initHOBA4OR(s[4183]);
initHOBAS5(s[4184]);
initHOBP5(s[4185]);
initHOBA5(s[4186]);
initHOBA5WL(s[4187]);
initHOBA5WU(s[4188]);
initHOBA5WE(s[4189]);
initHOBA5WR(s[4190]);
initHOBA5FL(s[4191]);
initHOBA5FU(s[4192]);
initHOBA5FE(s[4193]);
initHOBA5FR(s[4194]);
initHOBA5ML(s[4195]);
initHOBA5MU(s[4196]);
initHOBA5ME(s[4197]);
initHOBA5MR(s[4198]);
initHOBA5YL(s[4199]);
initHOBA5YU(s[4200]);
initHOBA5YE(s[4201]);
initHOBA5YR(s[4202]);
initHOBA5OL(s[4203]);
initHOBA5OU(s[4204]);
initHOBA5OE(s[4205]);
initHOBA5OR(s[4206]);
initHOBAS6(s[4207]);
initHOBP6(s[4208]);
initHOBA6(s[4209]);
initHOBA6WL(s[4210]);
initHOBA6WU(s[4211]);
initHOBA6WE(s[4212]);
initHOBA6WR(s[4213]);
initHOBA6FL(s[4214]);
initHOBA6FU(s[4215]);
initHOBA6FE(s[4216]);
initHOBA6FR(s[4217]);
initHOBA6ML(s[4218]);
initHOBA6MU(s[4219]);
initHOBA6ME(s[4220]);
initHOBA6MR(s[4221]);
initHOBA6YL(s[4222]);
initHOBA6YU(s[4223]);
initHOBA6YE(s[4224]);
initHOBA6YR(s[4225]);
initHOBA6OL(s[4226]);
initHOBA6OU(s[4227]);
initHOBA6OE(s[4228]);
initHOBA6OR(s[4229]);
initHOBAS7(s[4230]);
initHOBP7(s[4231]);
initHOBA7(s[4232]);
initHOBA7WL(s[4233]);
initHOBA7WU(s[4234]);
initHOBA7WE(s[4235]);
initHOBA7WR(s[4236]);
initHOBA7FL(s[4237]);
initHOBA7FU(s[4238]);
initHOBA7FE(s[4239]);
initHOBA7FR(s[4240]);
initHOBA7ML(s[4241]);
initHOBA7MU(s[4242]);
initHOBA7ME(s[4243]);
initHOBA7MR(s[4244]);
initHOBA7YL(s[4245]);
initHOBA7YU(s[4246]);
initHOBA7YE(s[4247]);
initHOBA7YR(s[4248]);
initHOBA7OL(s[4249]);
initHOBA7OU(s[4250]);
initHOBA7OE(s[4251]);
initHOBA7OR(s[4252]);
initHOBAS8(s[4253]);
initHOBP8(s[4254]);
initHOBA8(s[4255]);
initHOBA8WL(s[4256]);
initHOBA8WU(s[4257]);
initHOBA8WE(s[4258]);
initHOBA8WR(s[4259]);
initHOBA8FL(s[4260]);
initHOBA8FU(s[4261]);
initHOBA8FE(s[4262]);
initHOBA8FR(s[4263]);
initHOBA8ML(s[4264]);
initHOBA8MU(s[4265]);
initHOBA8ME(s[4266]);
initHOBA8MR(s[4267]);
initHOBA8YL(s[4268]);
initHOBA8YU(s[4269]);
initHOBA8YE(s[4270]);
initHOBA8YR(s[4271]);
initHOBA8OL(s[4272]);
initHOBA8OU(s[4273]);
initHOBA8OE(s[4274]);
initHOBA8OR(s[4275]);
initHOBAS9(s[4276]);
initHOBP9(s[4277]);
initHOBA9(s[4278]);
initHOBA9WL(s[4279]);
initHOBA9WU(s[4280]);
initHOBA9WE(s[4281]);
initHOBA9WR(s[4282]);
initHOBA9FL(s[4283]);
initHOBA9FU(s[4284]);
initHOBA9FE(s[4285]);
initHOBA9FR(s[4286]);
initHOBA9ML(s[4287]);
initHOBA9MU(s[4288]);
initHOBA9ME(s[4289]);
initHOBA9MR(s[4290]);
initHOBA9YL(s[4291]);
initHOBA9YU(s[4292]);
initHOBA9YE(s[4293]);
initHOBA9YR(s[4294]);
initHOBA9OL(s[4295]);
initHOBA9OU(s[4296]);
initHOBA9OE(s[4297]);
initHOBA9OR(s[4298]);
initHOTENUN(s[4299]);
initHOTENST(s[4300]);
initHOTENU(s[4301]);
initHOJOB(s[4302]);
initHOLAND(s[4303]);
initHOFURN(s[4304]);
initHOPART(s[4305]);
initHPOPR(s[4306]);
initHOPERI(s[4307]);
initHORENT(s[4308]);
initHORENWL(s[4309]);
initHORENWU(s[4310]);
initHORENWE(s[4311]);
initHORENWR(s[4312]);
initHORENFL(s[4313]);
initHORENFU(s[4314]);
initHORENFE(s[4315]);
initHORENFR(s[4316]);
initHORENML(s[4317]);
initHORENMU(s[4318]);
initHORENME(s[4319]);
initHORENMR(s[4320]);
initHORENYL(s[4321]);
initHORENYU(s[4322]);
initHORENYE(s[4323]);
initHORENYR(s[4324]);
initHORENOL(s[4325]);
initHORENOU(s[4326]);
initHORENOE(s[4327]);
initHORENOR(s[4328]);
initHOINCLWA(s[4329]);
initHOINCLSE(s[4330]);
initHOINCLLA(s[4331]);
initHOINCLGA(s[4332]);
initHOINCLHE(s[4333]);
initHOINCLCO(s[4334]);
initHOINCL96(s[4335]);
initHOINAME(s[4336]);
initHOINAGD(s[4337]);
initHOINACL(s[4338]);
initHOINAWP(s[4339]);
initHOINASG(s[4340]);
initHOINA95(s[4341]);
initHOINA96(s[4342]);
initHOINAMME(s[4343]);
initHOINAMGD(s[4344]);
initHOINAMCL(s[4345]);
initHOINAMWP(s[4346]);
initHOINAMSG(s[4347]);
initHOINAM85(s[4348]);
initHOINAM86(s[4349]);
initHOINAM96(s[4350]);
initHOHBEN(s[4351]);
initHORHB(s[4352]);
initHOHBCK(s[4353]);
initHOREBA(s[4354]);
initHOREBP(s[4355]);
initHOREBWL(s[4356]);
initHOREBWU(s[4357]);
initHOREBWE(s[4358]);
initHOREBWR(s[4359]);
initHOREBFL(s[4360]);
initHOREBFU(s[4361]);
initHOREBFE(s[4362]);
initHOREBFR(s[4363]);
initHOREBML(s[4364]);
initHOREBMU(s[4365]);
initHOREBME(s[4366]);
initHOREBMR(s[4367]);
initHOREBYL(s[4368]);
initHOREBYU(s[4369]);
initHOREBYE(s[4370]);
initHOREBYR(s[4371]);
initHOREBOL(s[4372]);
initHOREBOU(s[4373]);
initHOREBOE(s[4374]);
initHOREBOR(s[4375]);
initHOHBP(s[4376]);
initHOHBA(s[4377]);
initHOHBAWL(s[4378]);
initHOHBAWU(s[4379]);
initHOHBAWE(s[4380]);
initHOHBAWR(s[4381]);
initHOHBAFL(s[4382]);
initHOHBAFU(s[4383]);
initHOHBAFE(s[4384]);
initHOHBAFR(s[4385]);
initHOHBAML(s[4386]);
initHOHBAMU(s[4387]);
initHOHBAME(s[4388]);
initHOHBAMR(s[4389]);
initHOHBAYL(s[4390]);
initHOHBAYU(s[4391]);
initHOHBAYE(s[4392]);
initHOHBAYR(s[4393]);
initHOHBAOL(s[4394]);
initHOHBAOU(s[4395]);
initHOHBAOE(s[4396]);
initHOHBAOR(s[4397]);
initHOHBME(s[4398]);
initHOHBGA(s[4399]);
initHOHBCL(s[4400]);
initHOHBWP(s[4401]);
initHOHBSG(s[4402]);
initHOHB95(s[4403]);
initHOHB96(s[4404]);
initHOHBMME(s[4405]);
initHOHBMGA(s[4406]);
initHOHBMCL(s[4407]);
initHOHBMWP(s[4408]);
initHOHBMSG(s[4409]);
initHOHBM85(s[4410]);
initHOHBM86(s[4411]);
initHOHBM96(s[4412]);
initHOYEAR(s[4413]);
initHOPAY(s[4414]);
initHOPAYL(s[4415]);
initHOPAYU(s[4416]);
initHOPAYE(s[4417]);
initHOPAYR(s[4418]);
initHORTB(s[4419]);
initHORTBE(s[4420]);
initHOEVM(s[4421]);
initHOORM(s[4422]);
initHOSELLP(s[4423]);
initHOSELLL(s[4424]);
initHOSELLU(s[4425]);
initHOSELLE(s[4426]);
initHOSELLR(s[4427]);
initHOOUTM(s[4428]);
initHOMNEWN(s[4429]);
initHOMMISN(s[4430]);
initHOMREP(s[4431]);
initHOMREPL(s[4432]);
initHOMREPU(s[4433]);
initHOMREPE(s[4434]);
initHOMREPR(s[4435]);
initHOINCPP(s[4436]);
initHOINCBI(s[4437]);
initHOINCPI(s[4438]);
initHOINCOT(s[4439]);
initHOINC96(s[4440]);
initHOINCMPP(s[4441]);
initHOINCMBI(s[4442]);
initHOINCMPI(s[4443]);
initHOINCMOT(s[4444]);
initHOINCM85(s[4445]);
initHOINCM86(s[4446]);
initHOINCM96(s[4447]);
initHOINCC(s[4448]);
initHOEVRE(s[4449]);
initHORINHI(s[4450]);
initHORINHR(s[4451]);
initHORINPA(s[4452]);
initHORINOT(s[4453]);
initHORIN96(s[4454]);
initHORIN97(s[4455]);
initHORINMHI(s[4456]);
initHORINMHR(s[4457]);
initHORINMPA(s[4458]);
initHORINMOT(s[4459]);
initHORINM85(s[4460]);
initHORINM86(s[4461]);
initHORINM96(s[4462]);
initHORINM97(s[4463]);
initHORMOL(s[4464]);
initHORMOLL(s[4465]);
initHORMOLU(s[4466]);
initHORMOLE(s[4467]);
initHORMOLR(s[4468]);
initHORINM(s[4469]);
initHORINML(s[4470]);
initHORINMU(s[4471]);
initHORINME(s[4472]);
initHORINMR(s[4473]);
initHORPAY(s[4474]);
initHORPM(s[4475]);
initHORPML(s[4476]);
initHORPMU(s[4477]);
initHORPME(s[4478]);
initHORPMR(s[4479]);
initHOMINC(s[4480]);
initHOMINCL(s[4481]);
initHOMINCU(s[4482]);
initHOMINCE(s[4483]);
initHOMINCR(s[4484]);
initHORMS(s[4485]);
initHORRML(s[4486]);
initHORRMU(s[4487]);
initHORRME(s[4488]);
initHORRMR(s[4489]);
initHORFEE1(s[4490]);
initHORFEE2(s[4491]);
initHORFEP1(s[4492]);
initHORFEP2(s[4493]);
initHOALF1(s[4494]);
initHOALF2(s[4495]);
initHOALFM1(s[4496]);
initHOALFM2(s[4497]);
initHOALF1L(s[4498]);
initHOALF1U(s[4499]);
initHOALF1R(s[4500]);
initHOALF1T(s[4501]);
initHOALF2L(s[4502]);
initHOALF2U(s[4503]);
initHOALF2R(s[4504]);
initHOALF2T(s[4505]);
initHOALI1(s[4506]);
initHOALI2(s[4507]);
initHORPOS(s[4508]);
initHORMUWL(s[4509]);
initHORMUWU(s[4510]);
initHORMUWE(s[4511]);
initHORMUWR(s[4512]);
initHORMUFL(s[4513]);
initHORMUFU(s[4514]);
initHORMUFE(s[4515]);
initHORMUFR(s[4516]);
initHORMUML(s[4517]);
initHORMUMU(s[4518]);
initHORMUME(s[4519]);
initHORMUMR(s[4520]);
initHORMUYL(s[4521]);
initHORMUYU(s[4522]);
initHORMUYE(s[4523]);
initHORMUYR(s[4524]);
initHORMUOL(s[4525]);
initHORMUOU(s[4526]);
initHORMUOE(s[4527]);
initHORMUOR(s[4528]);
initHORPC(s[4529]);
initHORPCM(s[4530]);
initHORPCML(s[4531]);
initHORPCMU(s[4532]);
initHORPCME(s[4533]);
initHORPCMR(s[4534]);
initHORPOSO(s[4535]);
initHORPOFO(s[4536]);
initHORMUO(s[4537]);
initHORMOWL(s[4538]);
initHORMOWU(s[4539]);
initHORMOWE(s[4540]);
initHORMOWR(s[4541]);
initHORMOFL(s[4542]);
initHORMOFU(s[4543]);
initHORMOFE(s[4544]);
initHORMOFR(s[4545]);
initHORMOML(s[4546]);
initHORMOMU(s[4547]);
initHORMOME(s[4548]);
initHORMOMR(s[4549]);
initHORMOYL(s[4550]);
initHORMOYU(s[4551]);
initHORMOYE(s[4552]);
initHORMOYR(s[4553]);
initHORMOOL(s[4554]);
initHORMOOU(s[4555]);
initHORMOOE(s[4556]);
initHORMOOR(s[4557]);
initHOOLD(s[4558]);
initHODIFF(s[4559]);
initHODIFFT(s[4560]);
initHODOC(s[4561]);
initHOINTA(s[4562]);
initHORET(s[4563]);
initHOMOVE(s[4564]);
initHORMVJR(s[4565]);
initHORMVNJ(s[4566]);
initHORMVBA(s[4567]);
initHORMVMS(s[4568]);
initHORMVBO(s[4569]);
initHORMVER(s[4570]);
initHORMVHR(s[4571]);
initHORMVPN(s[4572]);
initHORMVSP(s[4573]);
initHORMVIF(s[4574]);
initHORMVNF(s[4575]);
initHORMVOF(s[4576]);
initHORMV95(s[4577]);
initHORMVMJR(s[4578]);
initHORMVMNJ(s[4579]);
initHORMVMBA(s[4580]);
initHORMVMMS(s[4581]);
initHORMVMBO(s[4582]);
initHORMVMER(s[4583]);
initHORMVMHR(s[4584]);
initHORMVMPN(s[4585]);
initHORMVMSP(s[4586]);
initHORMVMIF(s[4587]);
initHORMVMNF(s[4588]);
initHORMVMOF(s[4589]);
initHORMVMPC(s[4590]);
initHORMVMNH(s[4591]);
initHORMVMAB(s[4592]);
initHORMVM85(s[4593]);
initHORMVM86(s[4594]);
initHORMAIN(s[4595]);
initHORMOSM(s[4596]);
initHORMOLA(s[4597]);
initHORMOFP(s[4598]);
initHORMOSH(s[4599]);
initHORMOOT(s[4600]);
initHORMOMSM(s[4601]);
initHORMOMLA(s[4602]);
initHORMOMFP(s[4603]);
initHORMOMSH(s[4604]);
initHORMOMNS(s[4605]);
initHORMOMBQ(s[4606]);
initHORMOMBA(s[4607]);
initHORMOM85(s[4608]);
initHORMOM86(s[4609]);
initHOROOM(s[4610]);
initHOADPWD(s[4611]);
initHOADPRS(s[4612]);
initHOADPHR(s[4613]);
initHOADPAD(s[4614]);
initHOADPAP(s[4615]);
initHOADPBM(s[4616]);
initHOADPKM(s[4617]);
initHOADPLI(s[4618]);
initHOADPCL(s[4619]);
initHOADPAL(s[4620]);
initHOADP95(s[4621]);
initHOADP96(s[4622]);
initHOPROSP(s[4623]);
initHOPRONZ(s[4624]);
initHOPROSN(s[4625]);
initHOPRODK(s[4626]);
initHOPROPO(s[4627]);
initHOPRORD(s[4628]);
initHOPROWA(s[4629]);
initHOPROCP(s[4630]);
initHOPROEP(s[4631]);
initHOPRORO(s[4632]);
initHOPROIN(s[4633]);
initHOPROCO(s[4634]);
initHOPRO95(s[4635]);
initHOPRO96(s[4636]);
initHOPROMSP(s[4637]);
initHOPROMNZ(s[4638]);
initHOPROMSN(s[4639]);
initHOPROMDK(s[4640]);
initHOPROMPO(s[4641]);
initHOPROMRD(s[4642]);
initHOPROMWA(s[4643]);
initHOPROMCP(s[4644]);
initHOPROMEP(s[4645]);
initHOPROMRO(s[4646]);
initHOPROMIN(s[4647]);
initHOPROMCO(s[4648]);
initHOPROMVA(s[4649]);
initHOPROMST(s[4650]);
initHOPROM85(s[4651]);
initHOPROM86(s[4652]);
initHOPROM96(s[4653]);
initHOHAVTV(s[4654]);
initHOHAVVR(s[4655]);
initHOHAVCD(s[4656]);
initHOHAVFF(s[4657]);
initHOHAVWM(s[4658]);
initHOHAVWD(s[4659]);
initHOHAVDW(s[4660]);
initHOHAVMO(s[4661]);
initHOHAVPC(s[4662]);
initHOHAVDT(s[4663]);
initHOHAVPH(s[4664]);
initHOHAVDV(s[4665]);
initHOHAV95(s[4666]);
initHOHAV96(s[4667]);
initHOHAVBTV(s[4668]);
initHOHAVBVR(s[4669]);
initHOHAVBCD(s[4670]);
initHOHAVBFF(s[4671]);
initHOHAVBWM(s[4672]);
initHOHAVBWD(s[4673]);
initHOHAVBDW(s[4674]);
initHOHAVBMO(s[4675]);
initHOHAVBPC(s[4676]);
initHOHAVBDT(s[4677]);
initHOHAVBPH(s[4678]);
initHOHAVBDV(s[4679]);
initHOHAVB95(s[4680]);
initHOHAVB96(s[4681]);
initHOHV01(s[4682]);
initHOHV02(s[4683]);
initHOHV03(s[4684]);
initHOHV04(s[4685]);
initHOHV05(s[4686]);
initHOHV06(s[4687]);
initHOHV07(s[4688]);
initHOHV08(s[4689]);
initHOHV09(s[4690]);
initHOHV10(s[4691]);
initHOHV11(s[4692]);
initHOHV12(s[4693]);
initHOHV01L(s[4694]);
initHOHV01U(s[4695]);
initHOHV01E(s[4696]);
initHOHV01R(s[4697]);
initHOHV02L(s[4698]);
initHOHV02U(s[4699]);
initHOHV02E(s[4700]);
initHOHV02R(s[4701]);
initHOHV03L(s[4702]);
initHOHV03U(s[4703]);
initHOHV03E(s[4704]);
initHOHV03R(s[4705]);
initHOHV04L(s[4706]);
initHOHV04U(s[4707]);
initHOHV04E(s[4708]);
initHOHV04R(s[4709]);
initHOHV05L(s[4710]);
initHOHV05U(s[4711]);
initHOHV05E(s[4712]);
initHOHV05R(s[4713]);
initHOHV06L(s[4714]);
initHOHV06U(s[4715]);
initHOHV06E(s[4716]);
initHOHV06R(s[4717]);
initHOHV07L(s[4718]);
initHOHV07U(s[4719]);
initHOHV07E(s[4720]);
initHOHV07R(s[4721]);
initHOHV08L(s[4722]);
initHOHV08U(s[4723]);
initHOHV08E(s[4724]);
initHOHV08R(s[4725]);
initHOHV09L(s[4726]);
initHOHV09U(s[4727]);
initHOHV09E(s[4728]);
initHOHV09R(s[4729]);
initHOHV10L(s[4730]);
initHOHV10U(s[4731]);
initHOHV10E(s[4732]);
initHOHV10R(s[4733]);
initHOHV11L(s[4734]);
initHOHV11U(s[4735]);
initHOHV11E(s[4736]);
initHOHV11R(s[4737]);
initHOHV12L(s[4738]);
initHOHV12U(s[4739]);
initHOHV12E(s[4740]);
initHOHV12R(s[4741]);
initHOFOOD(s[4742]);
initHOFOODL(s[4743]);
initHOFOODU(s[4744]);
initHOFOODE(s[4745]);
initHOFOODR(s[4746]);
initHOOUTF(s[4747]);
initHOOUTFL(s[4748]);
initHOOUTFU(s[4749]);
initHOOUTFE(s[4750]);
initHOOUTFR(s[4751]);
initHOMEAL(s[4752]);
initHOMOFT(s[4753]);
initHOCL(s[4754]);
initHOCLL(s[4755]);
initHOCLU(s[4756]);
initHOCLE(s[4757]);
initHOCLR(s[4758]);
initHOCENH(s[4759]);
initHOCENP(s[4760]);
initHOHEAGF(s[4761]);
initHOHEAEF(s[4762]);
initHOHEAPH(s[4763]);
initHOHEAOF(s[4764]);
initHOHEA95(s[4765]);
initHOHEA96(s[4766]);
initHOHEAMGF(s[4767]);
initHOHEAMEF(s[4768]);
initHOHEAMPH(s[4769]);
initHOHEAMOF(s[4770]);
initHOHEAM85(s[4771]);
initHOHEAM86(s[4772]);
initHOHEAM96(s[4773]);
initHOFUELGA(s[4774]);
initHOFUELEL(s[4775]);
initHOFUELCO(s[4776]);
initHOFUELPA(s[4777]);
initHOFUELOI(s[4778]);
initHOFUELWO(s[4779]);
initHOFUEL95(s[4780]);
initHOFSUP(s[4781]);
initHOFTOG(s[4782]);
initHOFPAY(s[4783]);
initHOFD(s[4784]);
initHOFDM(s[4785]);
initHOFDML(s[4786]);
initHOFDMU(s[4787]);
initHOFDME(s[4788]);
initHOFDMR(s[4789]);
initHOFDQ(s[4790]);
initHOFDQL(s[4791]);
initHOFDQU(s[4792]);
initHOFDQE(s[4793]);
initHOFDQR(s[4794]);
initHOFB(s[4795]);
initHOFBMW(s[4796]);
initHOFBMWL(s[4797]);
initHOFBMWU(s[4798]);
initHOFBMWE(s[4799]);
initHOFBMWR(s[4800]);
initHOFBMS(s[4801]);
initHOFBMSL(s[4802]);
initHOFBMSU(s[4803]);
initHOFBMSE(s[4804]);
initHOFBMSR(s[4805]);
initHOFBQW(s[4806]);
initHOFBQWL(s[4807]);
initHOFBQWU(s[4808]);
initHOFBQWE(s[4809]);
initHOFBQWR(s[4810]);
initHOFBQS(s[4811]);
initHOFBQSL(s[4812]);
initHOFBQSU(s[4813]);
initHOFBQSE(s[4814]);
initHOFBQSR(s[4815]);
initHOFPW(s[4816]);
initHOFPWL(s[4817]);
initHOFPWU(s[4818]);
initHOFPWE(s[4819]);
initHOFPWR(s[4820]);
initHOFPS(s[4821]);
initHOFPSL(s[4822]);
initHOFPSU(s[4823]);
initHOFPSE(s[4824]);
initHOFPSR(s[4825]);
initHOFOW(s[4826]);
initHOFOWL(s[4827]);
initHOFOWU(s[4828]);
initHOFOWE(s[4829]);
initHOFOWR(s[4830]);
initHOFOS(s[4831]);
initHOFOSL(s[4832]);
initHOFOSU(s[4833]);
initHOFOSE(s[4834]);
initHOFOSR(s[4835]);
initHOFSP(s[4836]);
initHOFSW(s[4837]);
initHOFSWL(s[4838]);
initHOFSWU(s[4839]);
initHOFSWE(s[4840]);
initHOFSWR(s[4841]);
initHOFSM(s[4842]);
initHOFSML(s[4843]);
initHOFSMU(s[4844]);
initHOFSME(s[4845]);
initHOFSMR(s[4846]);
initHOFSQ(s[4847]);
initHOFSQL(s[4848]);
initHOFSQU(s[4849]);
initHOFSQE(s[4850]);
initHOFSQR(s[4851]);
initHOGPAY(s[4852]);
initHOGD(s[4853]);
initHOGDM(s[4854]);
initHOGDML(s[4855]);
initHOGDMU(s[4856]);
initHOGDME(s[4857]);
initHOGDMR(s[4858]);
initHOGDQ(s[4859]);
initHOGDQL(s[4860]);
initHOGDQU(s[4861]);
initHOGDQE(s[4862]);
initHOGDQR(s[4863]);
initHOGBP(s[4864]);
initHOGBMW(s[4865]);
initHOGBMWL(s[4866]);
initHOGBMWU(s[4867]);
initHOGBMWE(s[4868]);
initHOGBMWR(s[4869]);
initHOGBMS(s[4870]);
initHOGBMSL(s[4871]);
initHOGBMSU(s[4872]);
initHOGBMSE(s[4873]);
initHOGBMSR(s[4874]);
initHOGBQW(s[4875]);
initHOGBQWL(s[4876]);
initHOGBQWU(s[4877]);
initHOGBQWE(s[4878]);
initHOGBQWR(s[4879]);
initHOGBQS(s[4880]);
initHOGBQSL(s[4881]);
initHOGBQSU(s[4882]);
initHOGBQSE(s[4883]);
initHOGBQSR(s[4884]);
initHOGPW(s[4885]);
initHOGPWL(s[4886]);
initHOGPWU(s[4887]);
initHOGPWE(s[4888]);
initHOGPWR(s[4889]);
initHOGPS(s[4890]);
initHOGPSL(s[4891]);
initHOGPSU(s[4892]);
initHOGPSE(s[4893]);
initHOGPSR(s[4894]);
initHOGOW(s[4895]);
initHOGOWL(s[4896]);
initHOGOWU(s[4897]);
initHOGOWE(s[4898]);
initHOGOWR(s[4899]);
initHOGOS(s[4900]);
initHOGOSL(s[4901]);
initHOGOSU(s[4902]);
initHOGOSE(s[4903]);
initHOGOSR(s[4904]);
initHOEPAY(s[4905]);
initHOED(s[4906]);
initHOEDM(s[4907]);
initHOEDML(s[4908]);
initHOEDMU(s[4909]);
initHOEDME(s[4910]);
initHOEDMR(s[4911]);
initHOEDQ(s[4912]);
initHOEDQL(s[4913]);
initHOEDQU(s[4914]);
initHOEDQE(s[4915]);
initHOEDQR(s[4916]);
initHOEB(s[4917]);
initHOEBMW(s[4918]);
initHOEBMWL(s[4919]);
initHOEBMWU(s[4920]);
initHOEBMWE(s[4921]);
initHOEBMWR(s[4922]);
initHOEBMS(s[4923]);
initHOEBMSL(s[4924]);
initHOEBMSU(s[4925]);
initHOEBMSE(s[4926]);
initHOEBMSR(s[4927]);
initHOEBQW(s[4928]);
initHOEBQWL(s[4929]);
initHOEBQWU(s[4930]);
initHOEBQWE(s[4931]);
initHOEBQWR(s[4932]);
initHOEBQS(s[4933]);
initHOEBQSL(s[4934]);
initHOEBQSU(s[4935]);
initHOEBQSE(s[4936]);
initHOEBQSR(s[4937]);
initHOEPW(s[4938]);
initHOEPWL(s[4939]);
initHOEPWU(s[4940]);
initHOEPWE(s[4941]);
initHOEPWR(s[4942]);
initHOEPS(s[4943]);
initHOEPSL(s[4944]);
initHOEPSU(s[4945]);
initHOEPSE(s[4946]);
initHOEPSR(s[4947]);
initHOEOW(s[4948]);
initHOEOWL(s[4949]);
initHOEOWU(s[4950]);
initHOEOWE(s[4951]);
initHOEOWR(s[4952]);
initHOEOS(s[4953]);
initHOEOSL(s[4954]);
initHOEOSU(s[4955]);
initHOEOSE(s[4956]);
initHOEOSR(s[4957]);
initHOFCW(s[4958]);
initHOFCWL(s[4959]);
initHOFCWU(s[4960]);
initHOFCWE(s[4961]);
initHOFCWR(s[4962]);
initHOFCS(s[4963]);
initHOFCSL(s[4964]);
initHOFCSU(s[4965]);
initHOFCSE(s[4966]);
initHOFCSR(s[4967]);
initHOFPGW(s[4968]);
initHOFPGWL(s[4969]);
initHOFPGWU(s[4970]);
initHOFPGWE(s[4971]);
initHOFPGWR(s[4972]);
initHOFPGS(s[4973]);
initHOFPGSL(s[4974]);
initHOFPGSU(s[4975]);
initHOFPGSE(s[4976]);
initHOFPGSR(s[4977]);
initHOFOIW(s[4978]);
initHOFOIWL(s[4979]);
initHOFOIWU(s[4980]);
initHOFOIWE(s[4981]);
initHOFOIWR(s[4982]);
initHOFOIS(s[4983]);
initHOFOISL(s[4984]);
initHOFOISU(s[4985]);
initHOFOISE(s[4986]);
initHOFOISR(s[4987]);
initHOFWW(s[4988]);
initHOFWWL(s[4989]);
initHOFWWU(s[4990]);
initHOFWWE(s[4991]);
initHOFWWR(s[4992]);
initHOFWS(s[4993]);
initHOFWSL(s[4994]);
initHOFWSU(s[4995]);
initHOFWSE(s[4996]);
initHOFWSR(s[4997]);
initHOFUEMGA(s[4998]);
initHOFUEMEL(s[4999]);
}
public void init_5000_5999(String line) {
initHOFUEMCO(s[5000]);
initHOFUEMPA(s[5001]);
initHOFUEMOI(s[5002]);
initHOFUEMWO(s[5003]);
initHOFUEM85(s[5004]);
initHOFUEM86(s[5005]);
initHOFXW(s[5006]);
initHOFXWL(s[5007]);
initHOFXWU(s[5008]);
initHOFXWE(s[5009]);
initHOFXWR(s[5010]);
initHOFXS(s[5011]);
initHOFXSL(s[5012]);
initHOFXSU(s[5013]);
initHOFXSE(s[5014]);
initHOFXSR(s[5015]);
initHOVEH(s[5016]);
initHOCC01(s[5017]);
initHOCC02(s[5018]);
initHOCC03(s[5019]);
initHOCC04(s[5020]);
initHOCC05(s[5021]);
initHOCC06(s[5022]);
initHOCC07(s[5023]);
initHOCC08(s[5024]);
initHOCC09(s[5025]);
initHOCC10(s[5026]);
initHOCC11(s[5027]);
initHOCC12(s[5028]);
initHOCC13(s[5029]);
initHOCC14(s[5030]);
initHOCC15(s[5031]);
initHOCC16(s[5032]);
initHOCC17(s[5033]);
initHOCC18(s[5034]);
initHOCC19(s[5035]);
initHOCC20(s[5036]);
initHOVST(s[5037]);
initHOVW(s[5038]);
initHOVAG(s[5039]);
initHOVYR(s[5040]);
initHOVLR(s[5041]);
initHOVER(s[5042]);
initHOVNR(s[5043]);
initHOVNO(s[5044]);
initHOVW101(s[5045]);
initHOVW102(s[5046]);
initHOVW103(s[5047]);
initHOVW104(s[5048]);
initHOVW105(s[5049]);
initHOVW106(s[5050]);
initHOVW107(s[5051]);
initHOVW108(s[5052]);
initHOVW109(s[5053]);
initHOVW110(s[5054]);
initHOVW111(s[5055]);
initHOVW112(s[5056]);
initHOVW113(s[5057]);
initHOVW114(s[5058]);
initHOVW115(s[5059]);
initHOVW116(s[5060]);
initHOVW117(s[5061]);
initHOVW118(s[5062]);
initHOVW119(s[5063]);
initHOVNW(s[5064]);
initHOVST2(s[5065]);
initHOVW2(s[5066]);
initHOVAG2(s[5067]);
initHOVYR2(s[5068]);
initHOVLR2(s[5069]);
initHOVER2(s[5070]);
initHOVNR2(s[5071]);
initHOVNO2(s[5072]);
initHOVW201(s[5073]);
initHOVW202(s[5074]);
initHOVW203(s[5075]);
initHOVW204(s[5076]);
initHOVW205(s[5077]);
initHOVW206(s[5078]);
initHOVW207(s[5079]);
initHOVW208(s[5080]);
initHOVW209(s[5081]);
initHOVW210(s[5082]);
initHOVW211(s[5083]);
initHOVW212(s[5084]);
initHOVW213(s[5085]);
initHOVW214(s[5086]);
initHOVW215(s[5087]);
initHOVW216(s[5088]);
initHOVW217(s[5089]);
initHOVW218(s[5090]);
initHOVW219(s[5091]);
initHOVNW2(s[5092]);
initHOVST3(s[5093]);
initHOV(s[5094]);
initHOVAG3(s[5095]);
initHOVYR3(s[5096]);
initHOVLR3(s[5097]);
initHOVER3(s[5098]);
initHOVNR3(s[5099]);
initHOVNO3(s[5100]);
initHOVW301(s[5101]);
initHOVW302(s[5102]);
initHOVW303(s[5103]);
initHOVW304(s[5104]);
initHOVW305(s[5105]);
initHOVW306(s[5106]);
initHOVW307(s[5107]);
initHOVW308(s[5108]);
initHOVW309(s[5109]);
initHOVW310(s[5110]);
initHOVW311(s[5111]);
initHOVW312(s[5112]);
initHOVW313(s[5113]);
initHOVW314(s[5114]);
initHOVW315(s[5115]);
initHOVW316(s[5116]);
initHOVW317(s[5117]);
initHOVW318(s[5118]);
initHOVW319(s[5119]);
initHOVN(s[5120]);
initHOVST4(s[5121]);
initHOVW4(s[5122]);
initHOVAG4(s[5123]);
initHOVYR4(s[5124]);
initHOVLR4(s[5125]);
initHOVER4(s[5126]);
initHOVNR4(s[5127]);
initHOVNO4(s[5128]);
initHOVW401(s[5129]);
initHOVW402(s[5130]);
initHOVW403(s[5131]);
initHOVW404(s[5132]);
initHOVW405(s[5133]);
initHOVW406(s[5134]);
initHOVW407(s[5135]);
initHOVW408(s[5136]);
initHOVW409(s[5137]);
initHOVW410(s[5138]);
initHOVW411(s[5139]);
initHOVW412(s[5140]);
initHOVW413(s[5141]);
initHOVW414(s[5142]);
initHOVW415(s[5143]);
initHOVW416(s[5144]);
initHOVW417(s[5145]);
initHOVW418(s[5146]);
initHOVW419(s[5147]);
initHOVNW4(s[5148]);
initHOVST5(s[5149]);
initHOVW5(s[5150]);
initHOVAG5(s[5151]);
initHOVYR5(s[5152]);
initHOVLR5(s[5153]);
initHOVER5(s[5154]);
initHOVNR5(s[5155]);
initHOVNO5(s[5156]);
initHOVW501(s[5157]);
initHOVW502(s[5158]);
initHOVW503(s[5159]);
initHOVW504(s[5160]);
initHOVW505(s[5161]);
initHOVW506(s[5162]);
initHOVW507(s[5163]);
initHOVW508(s[5164]);
initHOVW509(s[5165]);
initHOVW510(s[5166]);
initHOVW511(s[5167]);
initHOVW512(s[5168]);
initHOVW513(s[5169]);
initHOVW514(s[5170]);
initHOVW515(s[5171]);
initHOVW516(s[5172]);
initHOVW517(s[5173]);
initHOVW518(s[5174]);
initHOVW519(s[5175]);
initHOVNW5(s[5176]);
initHOVST6(s[5177]);
initHOVW6(s[5178]);
initHOVAG6(s[5179]);
initHOVYR6(s[5180]);
initHOVLR6(s[5181]);
initHOVER6(s[5182]);
initHOVNR6(s[5183]);
initHOVNO6(s[5184]);
initHOVW601(s[5185]);
initHOVW602(s[5186]);
initHOVW603(s[5187]);
initHOVW604(s[5188]);
initHOVW605(s[5189]);
initHOVW606(s[5190]);
initHOVW607(s[5191]);
initHOVW608(s[5192]);
initHOVW609(s[5193]);
initHOVW610(s[5194]);
initHOVW611(s[5195]);
initHOVW612(s[5196]);
initHOVW613(s[5197]);
initHOVW614(s[5198]);
initHOVW615(s[5199]);
initHOVW616(s[5200]);
initHOVW617(s[5201]);
initHOVW618(s[5202]);
initHOVW619(s[5203]);
initHOVNW6(s[5204]);
initHOVST7(s[5205]);
initHOVW7(s[5206]);
initHOVAG7(s[5207]);
initHOVYR7(s[5208]);
initHOVLR7(s[5209]);
initHOVER7(s[5210]);
initHOVNR7(s[5211]);
initHOVNO7(s[5212]);
initHOVW701(s[5213]);
initHOVW702(s[5214]);
initHOVW703(s[5215]);
initHOVW704(s[5216]);
initHOVW705(s[5217]);
initHOVW706(s[5218]);
initHOVW707(s[5219]);
initHOVW708(s[5220]);
initHOVW709(s[5221]);
initHOVW710(s[5222]);
initHOVW711(s[5223]);
initHOVW712(s[5224]);
initHOVW713(s[5225]);
initHOVW714(s[5226]);
initHOVW715(s[5227]);
initHOVW716(s[5228]);
initHOVW717(s[5229]);
initHOVW718(s[5230]);
initHOVW719(s[5231]);
initHOVNW7(s[5232]);
initHOVST8(s[5233]);
initHOVW8(s[5234]);
initHOVAG8(s[5235]);
initHOVYR8(s[5236]);
initHOVLR8(s[5237]);
initHOVER8(s[5238]);
initHOVNR8(s[5239]);
initHOVNO8(s[5240]);
initHOVW801(s[5241]);
initHOVW802(s[5242]);
initHOVW803(s[5243]);
initHOVW804(s[5244]);
initHOVW805(s[5245]);
initHOVW806(s[5246]);
initHOVW807(s[5247]);
initHOVW808(s[5248]);
initHOVW809(s[5249]);
initHOVW810(s[5250]);
initHOVW811(s[5251]);
initHOVW812(s[5252]);
initHOVW813(s[5253]);
initHOVW814(s[5254]);
initHOVW815(s[5255]);
initHOVW816(s[5256]);
initHOVW817(s[5257]);
initHOVW818(s[5258]);
initHOVW819(s[5259]);
initHOVNW8(s[5260]);
initHOVST9(s[5261]);
initHOVW9(s[5262]);
initHOVAG9(s[5263]);
initHOVYR9(s[5264]);
initHOVLR9(s[5265]);
initHOVER9(s[5266]);
initHOVNR9(s[5267]);
initHOVNO9(s[5268]);
initHOVW901(s[5269]);
initHOVW902(s[5270]);
initHOVW903(s[5271]);
initHOVW904(s[5272]);
initHOVW905(s[5273]);
initHOVW906(s[5274]);
initHOVW907(s[5275]);
initHOVW908(s[5276]);
initHOVW909(s[5277]);
initHOVW910(s[5278]);
initHOVW911(s[5279]);
initHOVW912(s[5280]);
initHOVW913(s[5281]);
initHOVW914(s[5282]);
initHOVW915(s[5283]);
initHOVW916(s[5284]);
initHOVW917(s[5285]);
initHOVW918(s[5286]);
initHOVW919(s[5287]);
initHOVNW9(s[5288]);
initHOVST10(s[5289]);
initHOVW10(s[5290]);
initHOVAG10(s[5291]);
initHOVYR10(s[5292]);
initHOVLR10(s[5293]);
initHOVER10(s[5294]);
initHOVNR10(s[5295]);
initHOVNO10(s[5296]);
initHOVW1001(s[5297]);
initHOVW1002(s[5298]);
initHOVW1003(s[5299]);
initHOVW1004(s[5300]);
initHOVW1005(s[5301]);
initHOVW1006(s[5302]);
initHOVW1007(s[5303]);
initHOVW1008(s[5304]);
initHOVW1009(s[5305]);
initHOVW1010(s[5306]);
initHOVW1011(s[5307]);
initHOVW1012(s[5308]);
initHOVW1013(s[5309]);
initHOVW1014(s[5310]);
initHOVW1015(s[5311]);
initHOVW1016(s[5312]);
initHOVW1017(s[5313]);
initHOVW1018(s[5314]);
initHOVW1019(s[5315]);
initHOVNW10(s[5316]);
initHOVST11(s[5317]);
initHOVW11(s[5318]);
initHOVAG11(s[5319]);
initHOVYR11(s[5320]);
initHOVLR11(s[5321]);
initHOVER11(s[5322]);
initHOVNR11(s[5323]);
initHOVNO11(s[5324]);
initHOVW1101(s[5325]);
initHOVW1102(s[5326]);
initHOVW1103(s[5327]);
initHOVW1104(s[5328]);
initHOVW1105(s[5329]);
initHOVW1106(s[5330]);
initHOVW1107(s[5331]);
initHOVW1108(s[5332]);
initHOVW1109(s[5333]);
initHOVW1110(s[5334]);
initHOVW1111(s[5335]);
initHOVW1112(s[5336]);
initHOVW1113(s[5337]);
initHOVW1114(s[5338]);
initHOVW1115(s[5339]);
initHOVW1116(s[5340]);
initHOVW1117(s[5341]);
initHOVW1118(s[5342]);
initHOVW1119(s[5343]);
initHOVNW11(s[5344]);
initHOVST12(s[5345]);
initHOVW12(s[5346]);
initHOVAG12(s[5347]);
initHOVYR12(s[5348]);
initHOVLR12(s[5349]);
initHOVER12(s[5350]);
initHOVNR12(s[5351]);
initHOVNO12(s[5352]);
initHOVW1201(s[5353]);
initHOVW1202(s[5354]);
initHOVW1203(s[5355]);
initHOVW1204(s[5356]);
initHOVW1205(s[5357]);
initHOVW1206(s[5358]);
initHOVW1207(s[5359]);
initHOVW1208(s[5360]);
initHOVW1209(s[5361]);
initHOVW1210(s[5362]);
initHOVW1211(s[5363]);
initHOVW1212(s[5364]);
initHOVW1213(s[5365]);
initHOVW1214(s[5366]);
initHOVW1215(s[5367]);
initHOVW1216(s[5368]);
initHOVW1217(s[5369]);
initHOVW1218(s[5370]);
initHOVW1219(s[5371]);
initHOVNW12(s[5372]);
initHOVST13(s[5373]);
initHOVW13(s[5374]);
initHOVAG13(s[5375]);
initHOVYR13(s[5376]);
initHOVLR13(s[5377]);
initHOVER13(s[5378]);
initHOVNR13(s[5379]);
initHOVNO13(s[5380]);
initHOVW1301(s[5381]);
initHOVW1302(s[5382]);
initHOVW1303(s[5383]);
initHOVW1304(s[5384]);
initHOVW1305(s[5385]);
initHOVW1306(s[5386]);
initHOVW1307(s[5387]);
initHOVW1308(s[5388]);
initHOVW1309(s[5389]);
initHOVW1310(s[5390]);
initHOVW1311(s[5391]);
initHOVW1312(s[5392]);
initHOVW1313(s[5393]);
initHOVW1314(s[5394]);
initHOVW1315(s[5395]);
initHOVW1316(s[5396]);
initHOVW1317(s[5397]);
initHOVW1318(s[5398]);
initHOVW1319(s[5399]);
initHOVNW13(s[5400]);
initHOVST14(s[5401]);
initHOVW14(s[5402]);
initHOVAG14(s[5403]);
initHOVYR14(s[5404]);
initHOVLR14(s[5405]);
initHOVER14(s[5406]);
initHOVNR14(s[5407]);
initHOVNO14(s[5408]);
initHOVW1401(s[5409]);
initHOVW1402(s[5410]);
initHOVW1403(s[5411]);
initHOVW1404(s[5412]);
initHOVW1405(s[5413]);
initHOVW1406(s[5414]);
initHOVW1407(s[5415]);
initHOVW1408(s[5416]);
initHOVW1409(s[5417]);
initHOVW1410(s[5418]);
initHOVW1411(s[5419]);
initHOVW1412(s[5420]);
initHOVW1413(s[5421]);
initHOVW1414(s[5422]);
initHOVW1415(s[5423]);
initHOVW1416(s[5424]);
initHOVW1417(s[5425]);
initHOVW1418(s[5426]);
initHOVW1419(s[5427]);
initHOVNW14(s[5428]);
initHOVST15(s[5429]);
initHOVW15(s[5430]);
initHOVAG15(s[5431]);
initHOVYR15(s[5432]);
initHOVLR15(s[5433]);
initHOVER15(s[5434]);
initHOVNR15(s[5435]);
initHOVNO15(s[5436]);
initHOVW1501(s[5437]);
initHOVW1502(s[5438]);
initHOVW1503(s[5439]);
initHOVW1504(s[5440]);
initHOVW1505(s[5441]);
initHOVW1506(s[5442]);
initHOVW1507(s[5443]);
initHOVW1508(s[5444]);
initHOVW1509(s[5445]);
initHOVW1510(s[5446]);
initHOVW1511(s[5447]);
initHOVW1512(s[5448]);
initHOVW1513(s[5449]);
initHOVW1514(s[5450]);
initHOVW1515(s[5451]);
initHOVW1516(s[5452]);
initHOVW1517(s[5453]);
initHOVW1518(s[5454]);
initHOVW1519(s[5455]);
initHOVNW15(s[5456]);
initHOVST16(s[5457]);
initHOVW16(s[5458]);
initHOVAG16(s[5459]);
initHOVYR16(s[5460]);
initHOVLR16(s[5461]);
initHOVER16(s[5462]);
initHOVNR16(s[5463]);
initHOVNO16(s[5464]);
initHOVW1601(s[5465]);
initHOVW1602(s[5466]);
initHOVW1603(s[5467]);
initHOVW1604(s[5468]);
initHOVW1605(s[5469]);
initHOVW1606(s[5470]);
initHOVW1607(s[5471]);
initHOVW1608(s[5472]);
initHOVW1609(s[5473]);
initHOVW1610(s[5474]);
initHOVW1611(s[5475]);
initHOVW1612(s[5476]);
initHOVW1613(s[5477]);
initHOVW1614(s[5478]);
initHOVW1615(s[5479]);
initHOVW1616(s[5480]);
initHOVW1617(s[5481]);
initHOVW1618(s[5482]);
initHOVW1619(s[5483]);
initHOVNW16(s[5484]);
initHOVEHX(s[5485]);
initCFPROM(s[5486]);
initCFMETM(s[5487]);
initCFMETMT(s[5488]);
initCFDATD(s[5489]);
initCFDATM(s[5490]);
initCFDATY(s[5491]);
initCFDAY(s[5492]);
initCFDSCR(s[5493]);
initCFTEST(s[5494]);
initCFWRDS(s[5495]);
initCFLISEN(s[5496]);
initCFANI(s[5497]);
initCFMEM(s[5498]);
initCFLETEN(s[5499]);
initCFMEMS(s[5500]);
initCFPASCR(s[5501]);
initCFLISD(s[5502]);
initCFWHONON(s[5503]);
initCFWHOPAR(s[5504]);
initCFWHOAD(s[5505]);
initCFWHOCHI(s[5506]);
initCFWHOOTH(s[5507]);
initCFIMP(s[5508]);
initCFWHTEYE(s[5509]);
initCFWHTHEA(s[5510]);
initCFWHTTIR(s[5511]);
initCFWHTILL(s[5512]);
initCFWHTCON(s[5513]);
initCFWHTNER(s[5514]);
initCFWHTMEN(s[5515]);
initCFWHTDIS(s[5516]);
initCFWHTNOI(s[5517]);
initCFWHTLAP(s[5518]);
initCFWHTENG(s[5519]);
initCFWHT95(s[5520]);
initCFWHMEYE(s[5521]);
initCFWHMHEA(s[5522]);
initCFWHMTIR(s[5523]);
initCFWHMILL(s[5524]);
initCFWHMCON(s[5525]);
initCFWHMNER(s[5526]);
initCFWHMMEN(s[5527]);
initCFWHMUP(s[5528]);
initCFWHMNOI(s[5529]);
initCFWHMLAP(s[5530]);
initCFWHMENG(s[5531]);
initCFWHMREF(s[5532]);
initCFWHMDIS(s[5533]);
initCFWHMMEM(s[5534]);
initCFWHMALC(s[5535]);
initCFWHM85(s[5536]);
initCFWHM86(s[5537]);
initNROW(s[5538]);
initNCLM(s[5539]);
initNCORRECT(s[5540]);
initNMISSED(s[5541]);
initNROWCLM(s[5542]);
initEXRAIN(s[5543]);
initEXLO80(s[5544]);
initEXLO90(s[5545]);
initEXPW(s[5546]);
initEXPWF(s[5547]);
initEXHLIM(s[5548]);
initEXRSLF(s[5549]);
initEXAINH(s[5550]);
initEXCINH(s[5551]);
initEXINHE(s[5552]);
initEXCIN(s[5553]);
initEXCAIN(s[5554]);
initEXCPIN(s[5555]);
initEXHVR(s[5556]);
initEXHVA(s[5557]);
initEXRELA(s[5558]);
initEXRELB(s[5559]);
initEXRELC(s[5560]);
initEXRELD(s[5561]);
initEXRELEFO(s[5562]);
initEXRELEME(s[5563]);
initEXRELEOU(s[5564]);
initEXRELEDE(s[5565]);
initEXRELEEL(s[5566]);
initEXRELEFA(s[5567]);
initEXRELEPR(s[5568]);
initEXRELEHO(s[5569]);
initEXRELETR(s[5570]);
initEXREL96(s[5571]);
initERCAA(s[5572]);
initERCABSP(s[5573]);
initERCABCH(s[5574]);
initERCABGC(s[5575]);
initERCABPA(s[5576]);
initERCABPL(s[5577]);
initERCABOR(s[5578]);
initERCABFR(s[5579]);
initERCABOT(s[5580]);
initERCAMSP(s[5581]);
initERCAMCH(s[5582]);
initERCAMGC(s[5583]);
initERCAMPA(s[5584]);
initERCAMPL(s[5585]);
initERCAMOR(s[5586]);
initERCAMFR(s[5587]);
initERCAM85(s[5588]);
initERCAM86(s[5589]);
initERCAMOT(s[5590]);
initERCANSP(s[5591]);
initERCANCH(s[5592]);
initERCANGC(s[5593]);
initERCANPA(s[5594]);
initERCANPL(s[5595]);
initERCANOR(s[5596]);
initERCANFR(s[5597]);
initERCANOT(s[5598]);
initERCANTT(s[5599]);
initERCALIVE(s[5600]);
initERCADP1(s[5601]);
initERCADP2(s[5602]);
initERCADP3(s[5603]);
initERCADP4(s[5604]);
initERCADP5(s[5605]);
initERCADP6(s[5606]);
initERCADP7(s[5607]);
initERCADP8(s[5608]);
initERCADP9(s[5609]);
initERCADP10(s[5610]);
initERCADP11(s[5611]);
initERCADP12(s[5612]);
initERCAC(s[5613]);
initERMOCSO(s[5614]);
initERMOCUS(s[5615]);
initERMOCAC(s[5616]);
initERMOCNE(s[5617]);
initERMOCMO(s[5618]);
initERMOCNJ(s[5619]);
initERMOCSK(s[5620]);
initERMOCFI(s[5621]);
initERMOCOB(s[5622]);
initERMOCOT(s[5623]);
initERMOVSO(s[5624]);
initERMOVUS(s[5625]);
initERMOVAC(s[5626]);
initERMOVNE(s[5627]);
initERMOVMO(s[5628]);
initERMOVNJ(s[5629]);
initERMOVSK(s[5630]);
initERMOVFI(s[5631]);
initERMOVOB(s[5632]);
initERMOVOT(s[5633]);
initERVOLA(s[5634]);
initERVOLB(s[5635]);
initERCARA(s[5636]);
initERCARB(s[5637]);
initPSCEDA(s[5638]);
initPSCEDB(s[5639]);
initPSCEDC(s[5640]);
initPSCEDD(s[5641]);
initPSCEDE(s[5642]);
initPSCEDF(s[5643]);
initPSCEDG(s[5644]);
initPSCEDH(s[5645]);
initTOTALPSC(s[5646]);
initPSOLD(s[5647]);
initPSMID(s[5648]);
initFQETHNR(s[5649]);
initFQCBTHR(s[5650]);
initFQCENG(s[5651]);
initFQMQUA(s[5652]);
initFQAQUA(s[5653]);
initFQQUADEG(s[5654]);
initFQQUATEA(s[5655]);
initFQQUANUR(s[5656]);
initFQQUAHNC(s[5657]);
initFQQUAONC(s[5658]);
initFQQUACGF(s[5659]);
initFQQUACGA(s[5660]);
initFQQUACGO(s[5661]);
initFQQUAALE(s[5662]);
initFQQUAASL(s[5663]);
initFQQUASLC(s[5664]);
initFQQUAOLP(s[5665]);
initFQQUAOLA(s[5666]);
initFQQUAOLD(s[5667]);
initFQQUAGCA(s[5668]);
initFQQUAGCD(s[5669]);
initFQQUACS1(s[5670]);
initFQQUACS2(s[5671]);
initFQQUACSU(s[5672]);
initFQQUASLL(s[5673]);
initFQQUASUP(s[5674]);
initFQQUAMAT(s[5675]);
initFQQUANV5(s[5676]);
initFQQUANV4(s[5677]);
initFQQUANV3(s[5678]);
initFQQUANV2(s[5679]);
initFQQUANV1(s[5680]);
initFQQUATRA(s[5681]);
initFQQUACLE(s[5682]);
initFQQUA95(s[5683]);
initFQQUMDEG(s[5684]);
initFQQUMTEA(s[5685]);
initFQQUMNUR(s[5686]);
initFQQUMHNC(s[5687]);
initFQQUMONC(s[5688]);
initFQQUMCGF(s[5689]);
initFQQUMCGA(s[5690]);
initFQQUMCGO(s[5691]);
initFQQUMALE(s[5692]);
initFQQUMASL(s[5693]);
initFQQUMSLC(s[5694]);
initFQQUMOLP(s[5695]);
initFQQUMOLA(s[5696]);
initFQQUMOLD(s[5697]);
initFQQUMGCA(s[5698]);
initFQQUMGCD(s[5699]);
initFQQUMCS1(s[5700]);
initFQQUMCS2(s[5701]);
initFQQUMCSU(s[5702]);
initFQQUMSLL(s[5703]);
initFQQUMSUP(s[5704]);
initFQQUMMAT(s[5705]);
initFQQUMNV5(s[5706]);
initFQQUMNV4(s[5707]);
initFQQUMNV3(s[5708]);
initFQQUMNV2(s[5709]);
initFQQUMNV1(s[5710]);
initFQQUMTRA(s[5711]);
initFQQUMCLE(s[5712]);
initFQQUMFOR(s[5713]);
initFQQUMOVO(s[5714]);
initFQQUMNVZ(s[5715]);
initFQQUMNNE(s[5716]);
initFQQUMMIL(s[5717]);
initFQQUMDIP(s[5718]);
initFQQUMOAC(s[5719]);
initFQQUMOPR(s[5720]);
initFQQUM85(s[5721]);
initFQQUM86(s[5722]);
initFQEND(s[5723]);
initFQHELP(s[5724]);
initMMSCHS(s[5725]);
initMMALONE(s[5726]);
initMMHSS(s[5727]);
initMMWILL(s[5728]);
initMMSAF(s[5729]);
initMMAVSP(s[5730]);
initMMWALA(s[5731]);
initMMTRYA(s[5732]);
initMMWLKA(s[5733]);
initMMTRYB(s[5734]);
initMMWLKB(s[5735]);
initMMPAIN(s[5736]);
initMMRECR(s[5737]);
initMMRECRC(s[5738]);
initMMAID(s[5739]);
initMMAIDC(s[5740]);
initMMCOMUN(s[5741]);
initMMCOMSP(s[5742]);
initMMCOMRF(s[5743]);
initMMCOMNI(s[5744]);
initMMCOMPA(s[5745]);
initMMCOM85(s[5746]);
initMMCOM86(s[5747]);
initSCPT01(s[5748]);
initSCPT02(s[5749]);
initSCPT03(s[5750]);
initSCPT04(s[5751]);
initSCPT05(s[5752]);
initSCPT06(s[5753]);
initSCPT07(s[5754]);
initSCPT08(s[5755]);
initSCPT09(s[5756]);
initSCORG01(s[5757]);
initSCORG02(s[5758]);
initSCORG03(s[5759]);
initSCORG04(s[5760]);
initSCORG05(s[5761]);
initSCORG06(s[5762]);
initSCORG07(s[5763]);
initSCORG08(s[5764]);
initSCORG09(s[5765]);
initSCORGN(s[5766]);
initSCACTA(s[5767]);
initSCACTB(s[5768]);
initSCACTC(s[5769]);
initSCACTD(s[5770]);
initSCMOREA(s[5771]);
initSCMOREB(s[5772]);
initSCMOREC(s[5773]);
initSCMORED(s[5774]);
initSCGHQA(s[5775]);
initSCGHQB(s[5776]);
initSCGHQC(s[5777]);
initSCGHQD(s[5778]);
initSCGHQE(s[5779]);
initSCGHQF(s[5780]);
initSCGHQG(s[5781]);
initSCGHQH(s[5782]);
initSCGHQI(s[5783]);
initSCGHQJ(s[5784]);
initSCGHQK(s[5785]);
initSCGHQL(s[5786]);
initSCLIFEA(s[5787]);
initSCLIFEB(s[5788]);
initSCLIFEC(s[5789]);
initSCLIFED(s[5790]);
initSCLIFEE(s[5791]);
initSCDCA(s[5792]);
initSCDCC(s[5793]);
initSCDCD(s[5794]);
initSCDCE(s[5795]);
initSCDCG(s[5796]);
initSCQOLA(s[5797]);
initSCQOLB(s[5798]);
initSCQOLC(s[5799]);
initSCQOLD(s[5800]);
initSCQOLE(s[5801]);
initSCQOLF(s[5802]);
initSCQOLG(s[5803]);
initSCQOLH(s[5804]);
initSCQOLI(s[5805]);
initSCQOLJ(s[5806]);
initSCQOLK(s[5807]);
initSCQOLL(s[5808]);
initSCQOLM(s[5809]);
initSCQOLN(s[5810]);
initSCQOLO(s[5811]);
initSCQOLP(s[5812]);
initSCQOLQ(s[5813]);
initSCQOLR(s[5814]);
initSCQOLS(s[5815]);
initSCFEELA(s[5816]);
initSCFEELB(s[5817]);
initSCFEELC(s[5818]);
initSCFEELD(s[5819]);
initSCFEELE(s[5820]);
initSCSCA(s[5821]);
initSCSCB(s[5822]);
initSCSCC(s[5823]);
initSCSCD(s[5824]);
initSCSCE(s[5825]);
initSCSCF(s[5826]);
initSCSCG(s[5827]);
initSCSCH(s[5828]);
initSCSCI(s[5829]);
initSCPTR(s[5830]);
initSCPTRA(s[5831]);
initSCPTRB(s[5832]);
initSCPTRC(s[5833]);
initSCPTRD(s[5834]);
initSCPTRE(s[5835]);
initSCPTRF(s[5836]);
initSCPTRG(s[5837]);
initSCCHD(s[5838]);
initSCCHDA(s[5839]);
initSCCHDB(s[5840]);
initSCCHDC(s[5841]);
initSCCHDD(s[5842]);
initSCCHDE(s[5843]);
initSCCHDF(s[5844]);
initSCCHDG(s[5845]);
initSCCHDH(s[5846]);
initSCCHDI(s[5847]);
initSCCHDM(s[5848]);
initSCFAM(s[5849]);
initSCFAMA(s[5850]);
initSCFAMB(s[5851]);
initSCFAMC(s[5852]);
initSCFAMD(s[5853]);
initSCFAME(s[5854]);
initSCFAMF(s[5855]);
initSCFAMG(s[5856]);
initSCFAMH(s[5857]);
initSCFAMI(s[5858]);
initSCFAMM(s[5859]);
initSCFRD(s[5860]);
initSCFRDA(s[5861]);
initSCFRDB(s[5862]);
initSCFRDC(s[5863]);
initSCFRDD(s[5864]);
initSCFRDE(s[5865]);
initSCFRDF(s[5866]);
initSCFRDG(s[5867]);
initSCFRDH(s[5868]);
initSCFRDI(s[5869]);
initSCFRDM(s[5870]);
initSCEMPL(s[5871]);
initSCWORKA(s[5872]);
initSCWORKB(s[5873]);
initSCWORKC(s[5874]);
initSCWORKD(s[5875]);
initSCWORKE(s[5876]);
initSCWORKF(s[5877]);
initSCWORKG(s[5878]);
initSCWORKH(s[5879]);
initSCWORKI(s[5880]);
initSCWORKJ(s[5881]);
initSCWORKK(s[5882]);
initSCWORKL(s[5883]);
initSCRTAGE(s[5884]);
initSCLDDR(s[5885]);
initSCLADDC(s[5886]);
initSCAKO(s[5887]);
initSCAL7A(s[5888]);
initSCAL7B(s[5889]);
initSCDRI01(s[5890]);
initSCDRI02(s[5891]);
initSCDRI03(s[5892]);
initSCDRI04(s[5893]);
initSCDRI05(s[5894]);
initSCDRI06(s[5895]);
initSCDRI07(s[5896]);
initSCABNP(s[5897]);
initSCABNLC(s[5898]);
initSCABNSC(s[5899]);
initSCABSP(s[5900]);
initSCABSLC(s[5901]);
initSCABSSC(s[5902]);
initSCASPIR(s[5903]);
initSCASHER(s[5904]);
initSCAWIN(s[5905]);
initSCAPOPG(s[5906]);
initSCVEGA(s[5907]);
initSCVEGB(s[5908]);
initSCVEGC(s[5909]);
initSCVEGD(s[5910]);
initSCFRUIA(s[5911]);
initSCFRUIB(s[5912]);
initSCFRUIC(s[5913]);
initSCFRUID(s[5914]);
initSCFRUIE(s[5915]);
initSCFRUIF(s[5916]);
initSCFRUIG(s[5917]);
initSCFRUIH(s[5918]);
initSCFRUII(s[5919]);
initSHACHE1(s[5920]);
initSHWAKE1(s[5921]);
initSHMOB1(s[5922]);
initSHMEM1(s[5923]);
initSHRESP1(s[5924]);
initSHSAD1(s[5925]);
initSHWORK1(s[5926]);
initSHACHE2(s[5927]);
initSHWAKE2(s[5928]);
initSHACHE3(s[5929]);
initSHWAKE3(s[5930]);
initSHACHE4(s[5931]);
initSHWAKE4(s[5932]);
initSHMOB2(s[5933]);
initSHMEM2(s[5934]);
initSHMOB3(s[5935]);
initSHMEM3(s[5936]);
initSHMOB4(s[5937]);
initSHMEM4(s[5938]);
initSHRESP2(s[5939]);
initSHSAD2(s[5940]);
initSHRESP3(s[5941]);
initSHSAD3(s[5942]);
initSHRESP4(s[5943]);
initSHSAD4(s[5944]);
initSWACHE1(s[5945]);
initSWWAKE1(s[5946]);
initSWMOB1(s[5947]);
initSWMEM1(s[5948]);
initSWRESP1(s[5949]);
initSWSAD1(s[5950]);
initSWWORK1(s[5951]);
initSWMOB2(s[5952]);
initSWACHE2(s[5953]);
initSWMOB3(s[5954]);
initSWSAD2(s[5955]);
initSWSAD3(s[5956]);
initSWSAD4(s[5957]);
initSWACHE3(s[5958]);
initSWMOB4(s[5959]);
initSWACHE4(s[5960]);
initOUTSC(s[5961]);
initOUTSH(s[5962]);
initOUTSW(s[5963]);
initASKPX(s[5964]);
initASKINST(s[5965]);
initFUTYPE(s[5966]);
initIAPID(s[5967]);
initHOPID(s[5968]);
initINTDATM(s[5969]);
initINTDATY(s[5970]);
initIINTDATM(s[5971]);
initIINTDATY(s[5972]);
initINDSEX(s[5973]);
initINDOBYR(s[5974]);
initINDAGER(s[5975]);
initQVER(s[5976]);
initCHEFLA(s[5977]);
initCHEFRAC(s[5978]);
initCHEJI(s[5979]);
initCHESMK(s[5980]);
initCHESKA(s[5981]);
initCHEACD(s[5982]);
initHSEYR(s[5983]);
initCHONAT(s[5984]);
initCHOADP(s[5985]);
initCHOFST(s[5986]);
initCHOSTP(s[5987]);
initCHOTOT(s[5988]);
initCHINAT(s[5989]);
initCHIADP(s[5990]);
initCHIFST(s[5991]);
initCHISTP(s[5992]);
initCHITOT(s[5993]);
initALLTOTCH(s[5994]);
initALLNATCH(s[5995]);
initALLADCH(s[5996]);
initALLFSCH(s[5997]);
initALLSPCH(s[5998]);
initMOTHER(s[5999]);
}
public void init_6000_6999(String line) {
initMTHAGD(s[6000]);
initFATHER(s[6001]);
initFTHAGD(s[6002]);
initPALEVEL(s[6003]);
initMAXALC(s[6004]);
initCLAUD(s[6005]);
initPHLEGM(s[6006]);
initBRETHS(s[6007]);
initCFMERSP(s[6008]);
initCFPRMEM(s[6009]);
initNNMISRC(s[6010]);
initCFSPEED(s[6011]);
initCFANIG(s[6012]);
initCFEXIND(s[6013]);
initCFACCUR(s[6014]);
initCFRECAL(s[6015]);
initGTSPD_AV(s[6016]);
initGTSPD_ID(s[6017]);
initFST_TM(s[6018]);
initGTSPD_AG(s[6019]);
initCASP19(s[6020]);
initCASPCTL(s[6021]);
initCASPAUT(s[6022]);
initCASPPLE(s[6023]);
initCASPSR(s[6024]);
initORGANIS(s[6025]);
initORGNO(s[6026]);
initW3SEC(s[6027]);
initW3SIC(s[6028]);
initW3SOC(s[6029]);
initW3NSSEC(s[6030]);
initW3NSSECMIS(s[6031]);
initW3NSSEC13(s[6032]);
initW3NSSEC8(s[6033]);
initW3NSSEC5(s[6034]);
initW3NSSEC3(s[6035]);
initW3SOC2000(s[6036]);
initW3SOC2000MIS(s[6037]);
initW3SIC92(s[6038]);
initW3SIC92MIS(s[6039]);
initW3EDQUAL(s[6040]);
initEDQUAMIS(s[6041]);
initW3OTHERQ(s[6042]);
initHEDIMBP(s[6043]);
initHEDIMAN(s[6044]);
initHEDIMMI(s[6045]);
initHEDIMHF(s[6046]);
initHEDIMHM(s[6047]);
initHEDIMAR(s[6048]);
initHEDIMDI(s[6049]);
initHEDBTS(s[6050]);
initHEDIMST(s[6051]);
initHEDIMCH(s[6052]);
initCVD7DIHB(s[6053]);
initCVD7DBTS(s[6054]);
initHEDIBLU(s[6055]);
initHEDIBAS(s[6056]);
initHEDIBAR(s[6057]);
initHEDIBOS(s[6058]);
initHEDIBCA(s[6059]);
initHEDIBPD(s[6060]);
initHEDIBPS(s[6061]);
initHEDIBAD(s[6062]);
initHEDIBDE(s[6063]);
initHEOPTGL(s[6064]);
initHEOPTDI(s[6065]);
initHEOPTMD(s[6066]);
initHEOPTCA(s[6067]);
initGOR(s[6068]);
initCFMEIND(s[6069]);
initCFIND(s[6070]);
initIDAUNIQ(s[6071]);
initIDAHH(s[6072]);
initPERID(s[6073]);
initCOUPID(s[6074]);
initFUTYPE(s[6075]);
initFUID(s[6076]);
initBUEQ(s[6077]);
initSINC_BU_I(s[6078]);
initSINC_BU_F(s[6079]);
initSINC_BU_T(s[6080]);
initSINC_BU_O(s[6081]);
initPPEN_BU_I(s[6082]);
initPPEN_BU_F(s[6083]);
initPPEN_BU_T(s[6084]);
initPPEN_BU_O(s[6085]);
initSPEN_R_I(s[6086]);
initSPEN_R_F(s[6087]);
initSPEN_R_T(s[6088]);
initSPEN_R_O(s[6089]);
initSPEN_P_I(s[6090]);
initSPEN_P_F(s[6091]);
initSPEN_P_T(s[6092]);
initSPEN_P_O(s[6093]);
initANIN_R_I(s[6094]);
initANIN_R_F(s[6095]);
initANIN_R_T(s[6096]);
initANIN_R_O(s[6097]);
initANIN_P_I(s[6098]);
initANIN_P_F(s[6099]);
initANIN_P_T(s[6100]);
initANIN_P_O(s[6101]);
initICB_R_I(s[6102]);
initICB_R_F(s[6103]);
initICB_R_T(s[6104]);
initICB_R_O(s[6105]);
initICB_P_I(s[6106]);
initICB_P_F(s[6107]);
initICB_P_T(s[6108]);
initICB_P_O(s[6109]);
initSDA_R_I(s[6110]);
initSDA_R_F(s[6111]);
initSDA_R_T(s[6112]);
initSDA_R_O(s[6113]);
initSDA_P_I(s[6114]);
initSDA_P_F(s[6115]);
initSDA_P_T(s[6116]);
initSDA_P_O(s[6117]);
initSSP_R_I(s[6118]);
initSSP_R_F(s[6119]);
initSSP_R_T(s[6120]);
initSSP_R_O(s[6121]);
initSSP_P_I(s[6122]);
initSSP_P_F(s[6123]);
initSSP_P_T(s[6124]);
initSSP_P_O(s[6125]);
initATTALL_R_I(s[6126]);
initATTALL_R_F(s[6127]);
initATTALL_R_T(s[6128]);
initATTALL_R_O(s[6129]);
initATTALL_P_I(s[6130]);
initATTALL_P_F(s[6131]);
initATTALL_P_T(s[6132]);
initATTALL_P_O(s[6133]);
initDLA_R_I(s[6134]);
initDLA_R_F(s[6135]);
initDLA_R_T(s[6136]);
initDLA_R_O(s[6137]);
initDLA_P_I(s[6138]);
initDLA_P_F(s[6139]);
initDLA_P_T(s[6140]);
initDLA_P_O(s[6141]);
initINDINJ_R_I(s[6142]);
initINDINJ_R_F(s[6143]);
initINDINJ_R_T(s[6144]);
initINDINJ_R_O(s[6145]);
initINDINJ_P_I(s[6146]);
initINDINJ_P_F(s[6147]);
initINDINJ_P_T(s[6148]);
initINDINJ_P_O(s[6149]);
initWAR_R_I(s[6150]);
initWAR_R_F(s[6151]);
initWAR_R_T(s[6152]);
initWAR_R_O(s[6153]);
initWAR_P_I(s[6154]);
initWAR_P_F(s[6155]);
initWAR_P_T(s[6156]);
initWAR_P_O(s[6157]);
initCARERS_R_I(s[6158]);
initCARERS_R_F(s[6159]);
initCARERS_R_T(s[6160]);
initCARERS_R_O(s[6161]);
initCARERS_P_I(s[6162]);
initCARERS_P_F(s[6163]);
initCARERS_P_T(s[6164]);
initCARERS_P_O(s[6165]);
initOTH1_R_I(s[6166]);
initOTH1_R_F(s[6167]);
initOTH1_R_T(s[6168]);
initOTH1_R_O(s[6169]);
initOTH1_P_I(s[6170]);
initOTH1_P_F(s[6171]);
initOTH1_P_T(s[6172]);
initOTH1_P_O(s[6173]);
initIS_R_I(s[6174]);
initIS_R_F(s[6175]);
initIS_R_T(s[6176]);
initIS_R_O(s[6177]);
initIS_P_I(s[6178]);
initIS_P_F(s[6179]);
initIS_P_T(s[6180]);
initIS_P_O(s[6181]);
initPC_R_I(s[6182]);
initPC_R_F(s[6183]);
initPC_R_T(s[6184]);
initPC_R_O(s[6185]);
initPC_P_I(s[6186]);
initPC_P_F(s[6187]);
initPC_P_T(s[6188]);
initPC_P_O(s[6189]);
initWTC_R_I(s[6190]);
initWTC_R_F(s[6191]);
initWTC_R_T(s[6192]);
initWTC_R_O(s[6193]);
initWTC_P_I(s[6194]);
initWTC_P_F(s[6195]);
initWTC_P_T(s[6196]);
initWTC_P_O(s[6197]);
initJSA_R_I(s[6198]);
initJSA_R_F(s[6199]);
initJSA_R_T(s[6200]);
initJSA_R_O(s[6201]);
initJSA_P_I(s[6202]);
initJSA_P_F(s[6203]);
initJSA_P_T(s[6204]);
initJSA_P_O(s[6205]);
initGALL_R_I(s[6206]);
initGALL_R_F(s[6207]);
initGALL_R_T(s[6208]);
initGALL_R_O(s[6209]);
initGALL_P_I(s[6210]);
initGALL_P_F(s[6211]);
initGALL_P_T(s[6212]);
initGALL_P_O(s[6213]);
initWIDPEN_R_I(s[6214]);
initWIDPEN_R_F(s[6215]);
initWIDPEN_R_T(s[6216]);
initWIDPEN_R_O(s[6217]);
initWIDPEN_P_I(s[6218]);
initWIDPEN_P_F(s[6219]);
initWIDPEN_P_T(s[6220]);
initWIDPEN_P_O(s[6221]);
initCB_R_I(s[6222]);
initCB_R_F(s[6223]);
initCB_R_T(s[6224]);
initCB_R_O(s[6225]);
initCB_P_I(s[6226]);
initCB_P_F(s[6227]);
initCB_P_T(s[6228]);
initCB_P_O(s[6229]);
initCTC_R_I(s[6230]);
initCTC_R_F(s[6231]);
initCTC_R_T(s[6232]);
initCTC_R_O(s[6233]);
initCTC_P_I(s[6234]);
initCTC_P_F(s[6235]);
initCTC_P_T(s[6236]);
initCTC_P_O(s[6237]);
initOTH2_R_I(s[6238]);
initOTH2_R_F(s[6239]);
initOTH2_R_T(s[6240]);
initOTH2_R_O(s[6241]);
initOTH2_P_I(s[6242]);
initOTH2_P_F(s[6243]);
initOTH2_P_T(s[6244]);
initOTH2_P_O(s[6245]);
initOTHPAY_R_I(s[6246]);
initOTHPAY_R_F(s[6247]);
initOTHPAY_R_T(s[6248]);
initOTHPAY_R_O(s[6249]);
initOTHPAY_P_I(s[6250]);
initOTHPAY_P_F(s[6251]);
initOTHPAY_P_T(s[6252]);
initOTHPAY_P_O(s[6253]);
initSAVE_BU_I(s[6254]);
initSAVE_BU_F(s[6255]);
initSAVE_BU_T(s[6256]);
initSAVE_BU_O(s[6257]);
initSAVEI_BU_I(s[6258]);
initSAVEI_BU_F(s[6259]);
initSAVEI_BU_T(s[6260]);
initSAVEI_BU_O(s[6261]);
initTESSA_BU_I(s[6262]);
initTESSA_BU_F(s[6263]);
initTESSA_BU_T(s[6264]);
initTESSA_BU_O(s[6265]);
initTESSAI_BU_I(s[6266]);
initTESSAI_BU_F(s[6267]);
initTESSAI_BU_T(s[6268]);
initTESSAI_BU_O(s[6269]);
initCASHISA_BU_I(s[6270]);
initCASHISA_BU_F(s[6271]);
initCASHISA_BU_T(s[6272]);
initCASHISA_BU_O(s[6273]);
initLISA_BU_I(s[6274]);
initLISA_BU_F(s[6275]);
initLISA_BU_T(s[6276]);
initLISA_BU_O(s[6277]);
initSHISA_BU_I(s[6278]);
initSHISA_BU_F(s[6279]);
initSHISA_BU_T(s[6280]);
initSHISA_BU_O(s[6281]);
initISAI_BU_I(s[6282]);
initISAI_BU_F(s[6283]);
initISAI_BU_T(s[6284]);
initISAI_BU_O(s[6285]);
initPRBONDS_BU_I(s[6286]);
initPRBONDS_BU_F(s[6287]);
initPRBONDS_BU_T(s[6288]);
initPRBONDS_BU_O(s[6289]);
initPRBONDSI_BU_I(s[6290]);
initPRBONDSI_BU_F(s[6291]);
initPRBONDSI_BU_T(s[6292]);
initPRBONDSI_BU_O(s[6293]);
initNSAV_BU_I(s[6294]);
initNSAV_BU_F(s[6295]);
initNSAV_BU_T(s[6296]);
initNSAV_BU_O(s[6297]);
initNSAVI_BU_I(s[6298]);
initNSAVI_BU_F(s[6299]);
initNSAVI_BU_T(s[6300]);
initNSAVI_BU_O(s[6301]);
initPEP_BU_I(s[6302]);
initPEP_BU_F(s[6303]);
initPEP_BU_T(s[6304]);
initPEP_BU_O(s[6305]);
initPEPI_BU_I(s[6306]);
initPEPI_BU_F(s[6307]);
initPEPI_BU_T(s[6308]);
initPEPI_BU_O(s[6309]);
initSHARES_BU_I(s[6310]);
initSHARES_BU_F(s[6311]);
initSHARES_BU_T(s[6312]);
initSHARES_BU_O(s[6313]);
initSHARESI_BU_I(s[6314]);
initSHARESI_BU_F(s[6315]);
initSHARESI_BU_T(s[6316]);
initSHARESI_BU_O(s[6317]);
initTRUSTS_BU_I(s[6318]);
initTRUSTS_BU_F(s[6319]);
initTRUSTS_BU_T(s[6320]);
initTRUSTS_BU_O(s[6321]);
initTRUSTSI_BU_I(s[6322]);
initTRUSTSI_BU_F(s[6323]);
initTRUSTSI_BU_T(s[6324]);
initTRUSTSI_BU_O(s[6325]);
initBONDS_BU_I(s[6326]);
initBONDS_BU_F(s[6327]);
initBONDS_BU_T(s[6328]);
initBONDS_BU_O(s[6329]);
initBONDSI_BU_I(s[6330]);
initBONDSI_BU_F(s[6331]);
initBONDSI_BU_T(s[6332]);
initBONDSI_BU_O(s[6333]);
initOTHSAV_BU_I(s[6334]);
initOTHSAV_BU_F(s[6335]);
initOTHSAV_BU_T(s[6336]);
initOTHSAV_BU_O(s[6337]);
initOTHSAVI_BU_I(s[6338]);
initOTHSAVI_BU_F(s[6339]);
initOTHSAVI_BU_T(s[6340]);
initOTHSAVI_BU_O(s[6341]);
initLISAVE_BU_I(s[6342]);
initLISAVE_BU_F(s[6343]);
initLISAVE_BU_T(s[6344]);
initLISAVE_BU_O(s[6345]);
initHOME_BU_I(s[6346]);
initHOME_BU_F(s[6347]);
initHOME_BU_T(s[6348]);
initHOME_BU_O(s[6349]);
initHOMEI_BU_I(s[6350]);
initHOMEI_BU_F(s[6351]);
initHOMEI_BU_T(s[6352]);
initHOMEI_BU_O(s[6353]);
initFARM_BU_I(s[6354]);
initFARM_BU_F(s[6355]);
initFARM_BU_T(s[6356]);
initFARM_BU_O(s[6357]);
initFARMI_BU_I(s[6358]);
initFARMI_BU_F(s[6359]);
initFARMI_BU_T(s[6360]);
initFARMI_BU_O(s[6361]);
initTOTHASS_BU_I(s[6362]);
initTOTHASS_BU_F(s[6363]);
initTOTHASS_BU_T(s[6364]);
initTOTHASS_BU_O(s[6365]);
initCCARD_BU_I(s[6366]);
initCCARD_BU_F(s[6367]);
initCCARD_BU_T(s[6368]);
initCCARD_BU_O(s[6369]);
initPRDEBT_BU_I(s[6370]);
initPRDEBT_BU_F(s[6371]);
initPRDEBT_BU_T(s[6372]);
initPRDEBT_BU_O(s[6373]);
initODEBT_BU_I(s[6374]);
initODEBT_BU_F(s[6375]);
initODEBT_BU_T(s[6376]);
initODEBT_BU_O(s[6377]);
initJNTASS_BU_I(s[6378]);
initJNTASS_BU_F(s[6379]);
initJNTASS_BU_T(s[6380]);
initJNTASS_BU_O(s[6381]);
initWPPP_BU_I(s[6382]);
initWPPP_BU_F(s[6383]);
initWPPP_BU_T(s[6384]);
initWPPP_BU_O(s[6385]);
initWPPP_R_I(s[6386]);
initWPPP_R_F(s[6387]);
initWPPP_R_T(s[6388]);
initWPPP_R_O(s[6389]);
initWPPP_P_I(s[6390]);
initWPPP_P_F(s[6391]);
initWPPP_P_T(s[6392]);
initWPPP_P_O(s[6393]);
initTHP_BU_I(s[6394]);
initTHP_BU_F(s[6395]);
initTHP_BU_T(s[6396]);
initTHP_BU_O(s[6397]);
initTHP_R_I(s[6398]);
initTHP_R_F(s[6399]);
initTHP_R_T(s[6400]);
initTHP_R_O(s[6401]);
initTHP_P_I(s[6402]);
initTHP_P_F(s[6403]);
initTHP_P_T(s[6404]);
initTHP_P_O(s[6405]);
initNETPROF_BU_I(s[6406]);
initNETPROF_BU_F(s[6407]);
initNETPROF_BU_T(s[6408]);
initNETPROF_BU_O(s[6409]);
initNETPROF_R_I(s[6410]);
initNETPROF_R_F(s[6411]);
initNETPROF_R_T(s[6412]);
initNETPROF_R_O(s[6413]);
initNETPROF_P_I(s[6414]);
initNETPROF_P_F(s[6415]);
initNETPROF_P_T(s[6416]);
initNETPROF_P_O(s[6417]);
initSEDRAW_BU_I(s[6418]);
initSEDRAW_BU_F(s[6419]);
initSEDRAW_BU_T(s[6420]);
initSEDRAW_BU_O(s[6421]);
initSEDRAW_R_I(s[6422]);
initSEDRAW_R_F(s[6423]);
initSEDRAW_R_T(s[6424]);
initSEDRAW_R_O(s[6425]);
initSEDRAW_P_I(s[6426]);
initSEDRAW_P_F(s[6427]);
initSEDRAW_P_T(s[6428]);
initSEDRAW_P_O(s[6429]);
initBUSV_BU_I(s[6430]);
initBUSV_BU_F(s[6431]);
initBUSV_BU_T(s[6432]);
initBUSV_BU_O(s[6433]);
initBUSV_R_I(s[6434]);
initBUSV_R_F(s[6435]);
initBUSV_R_T(s[6436]);
initBUSV_R_O(s[6437]);
initBUSV_P_I(s[6438]);
initBUSV_P_F(s[6439]);
initBUSV_P_T(s[6440]);
initBUSV_P_O(s[6441]);
initOJ_BU_I(s[6442]);
initOJ_BU_F(s[6443]);
initOJ_BU_T(s[6444]);
initOJ_BU_O(s[6445]);
initOJ_R_I(s[6446]);
initOJ_R_F(s[6447]);
initOJ_R_T(s[6448]);
initOJ_R_O(s[6449]);
initOJ_P_I(s[6450]);
initOJ_P_F(s[6451]);
initOJ_P_T(s[6452]);
initOJ_P_O(s[6453]);
initOTHBUSV_BU_I(s[6454]);
initOTHBUSV_BU_F(s[6455]);
initOTHBUSV_BU_T(s[6456]);
initOTHBUSV_BU_O(s[6457]);
initOTHBUSV_R_I(s[6458]);
initOTHBUSV_R_F(s[6459]);
initOTHBUSV_R_T(s[6460]);
initOTHBUSV_R_O(s[6461]);
initOTHBUSV_P_I(s[6462]);
initOTHBUSV_P_F(s[6463]);
initOTHBUSV_P_T(s[6464]);
initOTHBUSV_P_O(s[6465]);
initHSVAL_HH_I(s[6466]);
initHSVAL_HH_F(s[6467]);
initHSVAL_HH_T(s[6468]);
initHSVAL_HH_O(s[6469]);
initHDEBT_HH_I(s[6470]);
initHDEBT_HH_F(s[6471]);
initHDEBT_HH_T(s[6472]);
initHDEBT_HH_O(s[6473]);
initTOTINC_BU_S(s[6474]);
initTOTINC_BU_F(s[6475]);
initTOTINC_BU_T(s[6476]);
initTOTINC_BU_NI2(s[6477]);
initTOTINC_BU_NI3(s[6478]);
initTOTINC_BU_NI4(s[6479]);
initEQTOTINC_BU_S(s[6480]);
initEQTOTINC_BU_F(s[6481]);
initEQTOTINC_BU_T(s[6482]);
initEQTOTINC_BU_NI2(s[6483]);
initEQTOTINC_BU_NI3(s[6484]);
initEQTOTINC_BU_NI4(s[6485]);
initEMPINC_BU_S(s[6486]);
initEMPINC_BU_F(s[6487]);
initEMPINC_BU_T(s[6488]);
initEMPINC_BU_NI2(s[6489]);
initEMPINC_BU_NI3(s[6490]);
initEMPINC_BU_NI4(s[6491]);
initEQEMPINC_BU_S(s[6492]);
initEQEMPINC_BU_F(s[6493]);
initEQEMPINC_BU_T(s[6494]);
initEQEMPINC_BU_NI2(s[6495]);
initEQEMPINC_BU_NI3(s[6496]);
initEQEMPINC_BU_NI4(s[6497]);
initEMPINC_R_S(s[6498]);
initEMPINC_R_F(s[6499]);
initEMPINC_R_T(s[6500]);
initEMPINC_R_NI2(s[6501]);
initEMPINC_R_NI3(s[6502]);
initEMPINC_R_NI4(s[6503]);
initEMPINC_P_S(s[6504]);
initEMPINC_P_F(s[6505]);
initEMPINC_P_T(s[6506]);
initEMPINC_P_NI2(s[6507]);
initEMPINC_P_NI3(s[6508]);
initEMPINC_P_NI4(s[6509]);
initSEINC_BU_S(s[6510]);
initSEINC_BU_F(s[6511]);
initSEINC_BU_T(s[6512]);
initSEINC_BU_NI2(s[6513]);
initSEINC_BU_NI3(s[6514]);
initSEINC_BU_NI4(s[6515]);
initEQSEINC_BU_S(s[6516]);
initEQSEINC_BU_F(s[6517]);
initEQSEINC_BU_T(s[6518]);
initEQSEINC_BU_NI2(s[6519]);
initEQSEINC_BU_NI3(s[6520]);
initEQSEINC_BU_NI4(s[6521]);
initSEINC_R_S(s[6522]);
initSEINC_R_F(s[6523]);
initSEINC_R_T(s[6524]);
initSEINC_R_NI2(s[6525]);
initSEINC_R_NI3(s[6526]);
initSEINC_R_NI4(s[6527]);
initSEINC_P_S(s[6528]);
initSEINC_P_F(s[6529]);
initSEINC_P_T(s[6530]);
initSEINC_P_NI2(s[6531]);
initSEINC_P_NI3(s[6532]);
initSEINC_P_NI4(s[6533]);
initPPINC_BU_S(s[6534]);
initPPINC_BU_F(s[6535]);
initPPINC_BU_T(s[6536]);
initPPINC_BU_NI2(s[6537]);
initPPINC_BU_NI3(s[6538]);
initPPINC_BU_NI4(s[6539]);
initEQPPINC_BU_S(s[6540]);
initEQPPINC_BU_F(s[6541]);
initEQPPINC_BU_T(s[6542]);
initEQPPINC_BU_NI2(s[6543]);
initEQPPINC_BU_NI3(s[6544]);
initEQPPINC_BU_NI4(s[6545]);
initPPINC_R_S(s[6546]);
initPPINC_R_F(s[6547]);
initPPINC_R_T(s[6548]);
initPPINC_R_NI2(s[6549]);
initPPINC_R_NI3(s[6550]);
initPPINC_R_NI4(s[6551]);
initPPINC_P_S(s[6552]);
initPPINC_P_F(s[6553]);
initPPINC_P_T(s[6554]);
initPPINC_P_NI2(s[6555]);
initPPINC_P_NI3(s[6556]);
initPPINC_P_NI4(s[6557]);
initSPINC_BU_S(s[6558]);
initSPINC_BU_F(s[6559]);
initSPINC_BU_T(s[6560]);
initSPINC_BU_NI2(s[6561]);
initSPINC_BU_NI3(s[6562]);
initSPINC_BU_NI4(s[6563]);
initEQSPINC_BU_S(s[6564]);
initEQSPINC_BU_F(s[6565]);
initEQSPINC_BU_T(s[6566]);
initEQSPINC_BU_NI2(s[6567]);
initEQSPINC_BU_NI3(s[6568]);
initEQSPINC_BU_NI4(s[6569]);
initSPINC_R_S(s[6570]);
initSPINC_R_F(s[6571]);
initSPINC_R_T(s[6572]);
initSPINC_R_NI2(s[6573]);
initSPINC_R_NI3(s[6574]);
initSPINC_R_NI4(s[6575]);
initSPINC_P_S(s[6576]);
initSPINC_P_F(s[6577]);
initSPINC_P_T(s[6578]);
initSPINC_P_NI2(s[6579]);
initSPINC_P_NI3(s[6580]);
initSPINC_P_NI4(s[6581]);
initBENINC_BU_S(s[6582]);
initBENINC_BU_F(s[6583]);
initBENINC_BU_T(s[6584]);
initBENINC_BU_NI2(s[6585]);
initBENINC_BU_NI3(s[6586]);
initBENINC_BU_NI4(s[6587]);
initEQBENINC_BU_S(s[6588]);
initEQBENINC_BU_F(s[6589]);
initEQBENINC_BU_T(s[6590]);
initEQBENINC_BU_NI2(s[6591]);
initEQBENINC_BU_NI3(s[6592]);
initEQBENINC_BU_NI4(s[6593]);
initBENINC_R_S(s[6594]);
initBENINC_R_F(s[6595]);
initBENINC_R_T(s[6596]);
initBENINC_R_NI2(s[6597]);
initBENINC_R_NI3(s[6598]);
initBENINC_R_NI4(s[6599]);
initBENINC_P_S(s[6600]);
initBENINC_P_F(s[6601]);
initBENINC_P_T(s[6602]);
initBENINC_P_NI2(s[6603]);
initBENINC_P_NI3(s[6604]);
initBENINC_P_NI4(s[6605]);
initASSINC_BU_S(s[6606]);
initASSINC_BU_F(s[6607]);
initASSINC_BU_T(s[6608]);
initASSINC_BU_NI2(s[6609]);
initASSINC_BU_NI3(s[6610]);
initASSINC_BU_NI4(s[6611]);
initEQASSINC_BU_S(s[6612]);
initEQASSINC_BU_F(s[6613]);
initEQASSINC_BU_T(s[6614]);
initEQASSINC_BU_NI2(s[6615]);
initEQASSINC_BU_NI3(s[6616]);
initEQASSINC_BU_NI4(s[6617]);
initOTHINC_BU_S(s[6618]);
initOTHINC_BU_F(s[6619]);
initOTHINC_BU_T(s[6620]);
initOTHINC_BU_NI2(s[6621]);
initOTHINC_BU_NI3(s[6622]);
initOTHINC_BU_NI4(s[6623]);
initEQOTHINC_BU_S(s[6624]);
initEQOTHINC_BU_F(s[6625]);
initEQOTHINC_BU_T(s[6626]);
initEQOTHINC_BU_NI2(s[6627]);
initEQOTHINC_BU_NI3(s[6628]);
initEQOTHINC_BU_NI4(s[6629]);
initOTHINC_R_S(s[6630]);
initOTHINC_R_F(s[6631]);
initOTHINC_R_T(s[6632]);
initOTHINC_R_NI2(s[6633]);
initOTHINC_R_NI3(s[6634]);
initOTHINC_R_NI4(s[6635]);
initOTHINC_P_S(s[6636]);
initOTHINC_P_F(s[6637]);
initOTHINC_P_T(s[6638]);
initOTHINC_P_NI2(s[6639]);
initOTHINC_P_NI3(s[6640]);
initOTHINC_P_NI4(s[6641]);
initSAVINGS_BU_S(s[6642]);
initSAVINGS_BU_F(s[6643]);
initSAVINGS_BU_T(s[6644]);
initSAVINGS_BU_NI2(s[6645]);
initSAVINGS_BU_NI3(s[6646]);
initSAVINGS_BU_NI4(s[6647]);
initINVESTS_BU_S(s[6648]);
initINVESTS_BU_F(s[6649]);
initINVESTS_BU_T(s[6650]);
initINVESTS_BU_NI2(s[6651]);
initINVESTS_BU_NI3(s[6652]);
initINVESTS_BU_NI4(s[6653]);
initGROSSFW_BU_S(s[6654]);
initGROSSFW_BU_F(s[6655]);
initGROSSFW_BU_T(s[6656]);
initGROSSFW_BU_NI2(s[6657]);
initGROSSFW_BU_NI3(s[6658]);
initGROSSFW_BU_NI4(s[6659]);
initDEBT_BU_S(s[6660]);
initDEBT_BU_F(s[6661]);
initDEBT_BU_T(s[6662]);
initDEBT_BU_NI2(s[6663]);
initDEBT_BU_NI3(s[6664]);
initDEBT_BU_NI4(s[6665]);
initNETFW_BU_S(s[6666]);
initNETFW_BU_F(s[6667]);
initNETFW_BU_T(s[6668]);
initNETFW_BU_NI2(s[6669]);
initNETFW_BU_NI3(s[6670]);
initNETFW_BU_NI4(s[6671]);
initNETPW_BU_S(s[6672]);
initNETPW_BU_F(s[6673]);
initNETPW_BU_T(s[6674]);
initNETPW_BU_NI2(s[6675]);
initNETPW_BU_NI3(s[6676]);
initNETPW_BU_NI4(s[6677]);
initGROSSTOTNHW_BU_S(s[6678]);
initGROSSTOTNHW_BU_F(s[6679]);
initGROSSTOTNHW_BU_T(s[6680]);
initGROSSTOTNHW_BU_NI2(s[6681]);
initGROSSTOTNHW_BU_NI3(s[6682]);
initGROSSTOTNHW_BU_NI4(s[6683]);
initNETTOTNHW_BU_S(s[6684]);
initNETTOTNHW_BU_F(s[6685]);
initNETTOTNHW_BU_T(s[6686]);
initNETTOTNHW_BU_NI2(s[6687]);
initNETTOTNHW_BU_NI3(s[6688]);
initNETTOTNHW_BU_NI4(s[6689]);
initGROSSHW_BU_S(s[6690]);
initGROSSHW_BU_F(s[6691]);
initGROSSHW_BU_T(s[6692]);
initGROSSHW_BU_NI2(s[6693]);
initGROSSHW_BU_NI3(s[6694]);
initGROSSHW_BU_NI4(s[6695]);
initNETHW_BU_S(s[6696]);
initNETHW_BU_F(s[6697]);
initNETHW_BU_T(s[6698]);
initNETHW_BU_NI2(s[6699]);
initNETHW_BU_NI3(s[6700]);
initNETHW_BU_NI4(s[6701]);
initMGDEBT_BU_S(s[6702]);
initMGDEBT_BU_F(s[6703]);
initMGDEBT_BU_T(s[6704]);
initMGDEBT_BU_NI2(s[6705]);
initMGDEBT_BU_NI3(s[6706]);
initMGDEBT_BU_NI4(s[6707]);
initNETTOTW_BU_S(s[6708]);
initNETTOTW_BU_F(s[6709]);
initNETTOTW_BU_T(s[6710]);
initNETTOTW_BU_NI2(s[6711]);
initNETTOTW_BU_NI3(s[6712]);
initNETTOTW_BU_NI4(s[6713]);
initYQ5_BU_S(s[6714]);
initYQ5_BU_F(s[6715]);
initYQ10_BU_S(s[6716]);
initYQ10_BU_F(s[6717]);
initTNHWQ5_BU_S(s[6718]);
initTNHWQ5_BU_F(s[6719]);
initTNHWQ10_BU_S(s[6720]);
initTNHWQ10_BU_F(s[6721]);
initNFWQ5_BU_S(s[6722]);
initNFWQ5_BU_F(s[6723]);
initNFWQ10_BU_S(s[6724]);
initNFWQ10_BU_F(s[6725]);
initTOTWQ5_BU_S(s[6726]);
initTOTWQ5_BU_F(s[6727]);
initTOTWQ10_BU_S(s[6728]);
initTOTWQ10_BU_F(s[6729]);
initIDAUNIQ(s[6730]);
initIDAHH(s[6731]);
initHHID(s[6732]);
initWGT(s[6733]);
initLWGT(s[6734]);
initWAVE(s[6735]);
initPERID(s[6736]);
initPERSNO(s[6737]);
initCOUPID(s[6738]);
initCOUPID_INST(s[6739]);
initXCOUPID(s[6740]);
initXCOUPID_INST(s[6741]);
initFUTYPE(s[6742]);
initFUID(s[6743]);
initFUID_INST(s[6744]);
initBUNO(s[6745]);
initCPID(s[6746]);
initIDAUNIQ_P(s[6747]);
initINTDATM(s[6748]);
initINTDATY(s[6749]);
initIINTDATM(s[6750]);
initIINTDATY(s[6751]);
initAGE(s[6752]);
initAGE_P(s[6753]);
initINDOBYR(s[6754]);
initINDOBYR_P(s[6755]);
initSEX(s[6756]);
initSEX_P(s[6757]);
initELSA(s[6758]);
initELSA_P(s[6759]);
initINST(s[6760]);
initINST_P(s[6761]);
initRESPONDED_P(s[6762]);
initDIED_P(s[6763]);
initCOUPLE(s[6764]);
initHHANSHO(s[6765]);
initIANSHO(s[6766]);
initIANSIA(s[6767]);
initNUMANSIA(s[6768]);
initNUMANSIAFU(s[6769]);
initPROXY(s[6770]);
initNONWHITE(s[6771]);
initREFRESHTYPE(s[6772]);
initNUMBUS(s[6773]);
initNUMINELIG(s[6774]);
initNSAMPMEM(s[6775]);
initHOH(s[6776]);
initRELTOHOH(s[6777]);
initHOHSP(s[6778]);
initBUHEAD(s[6779]);
initFIRSTBU(s[6780]);
initNPEOPLE(s[6781]);
initNUMHHAD(s[6782]);
initNUMBUAD(s[6783]);
initNUMBUKID(s[6784]);
initNUMHHKID(s[6785]);
initAGEBUHEAD(s[6786]);
initAGEBUSP(s[6787]);
initSEXBUHEAD(s[6788]);
initAGEHOH(s[6789]);
initSEXHOH(s[6790]);
initNUMMALE(s[6791]);
initNUMFEMALE(s[6792]);
initNUMMALEAD(s[6793]);
initNUMFEMALEAD(s[6794]);
initAGEHHCH1(s[6795]);
initAGEHHCH2(s[6796]);
initAGEHHCH3(s[6797]);
initAGEHHCH4(s[6798]);
initAGEHHCH5(s[6799]);
initAGEHHCH6(s[6800]);
initAGEHHCH7(s[6801]);
initAGEHHCH8(s[6802]);
initAGEBUCH1(s[6803]);
initAGEBUCH2(s[6804]);
initAGEBUCH3(s[6805]);
initAGEBUCH4(s[6806]);
initAGEBUCH5(s[6807]);
initAGEBUCH6(s[6808]);
initAGEBUCH7(s[6809]);
initAGEBUCH8(s[6810]);
initCHAGE1(s[6811]);
initCHSEX1(s[6812]);
initCHTYPE1(s[6813]);
initCHSTAT1(s[6814]);
initCHAGE2(s[6815]);
initCHSEX2(s[6816]);
initCHTYPE2(s[6817]);
initCHSTAT2(s[6818]);
initCHAGE3(s[6819]);
initCHSEX3(s[6820]);
initCHTYPE3(s[6821]);
initCHSTAT3(s[6822]);
initCHAGE4(s[6823]);
initCHSEX4(s[6824]);
initCHTYPE4(s[6825]);
initCHSTAT4(s[6826]);
initCHAGE5(s[6827]);
initCHSEX5(s[6828]);
initCHTYPE5(s[6829]);
initCHSTAT5(s[6830]);
initCHAGE6(s[6831]);
initCHSEX6(s[6832]);
initCHTYPE6(s[6833]);
initCHSTAT6(s[6834]);
initCHAGE7(s[6835]);
initCHSEX7(s[6836]);
initCHTYPE7(s[6837]);
initCHSTAT7(s[6838]);
initCHAGE8(s[6839]);
initCHSEX8(s[6840]);
initCHTYPE8(s[6841]);
initCHSTAT8(s[6842]);
initCHAGE9(s[6843]);
initCHSEX9(s[6844]);
initCHTYPE9(s[6845]);
initCHSTAT9(s[6846]);
initCHAGE10(s[6847]);
initCHSEX10(s[6848]);
initCHTYPE10(s[6849]);
initCHSTAT10(s[6850]);
initCHAGE11(s[6851]);
initCHSEX11(s[6852]);
initCHTYPE11(s[6853]);
initCHSTAT11(s[6854]);
initCHAGE12(s[6855]);
initCHSEX12(s[6856]);
initCHTYPE12(s[6857]);
initCHSTAT12(s[6858]);
initCHAGE13(s[6859]);
initCHSEX13(s[6860]);
initCHTYPE13(s[6861]);
initCHSTAT13(s[6862]);
initCHAGE14(s[6863]);
initCHSEX14(s[6864]);
initCHTYPE14(s[6865]);
initCHSTAT14(s[6866]);
initCHAGE15(s[6867]);
initCHSEX15(s[6868]);
initCHTYPE15(s[6869]);
initCHSTAT15(s[6870]);
initCHAGE16(s[6871]);
initCHSEX16(s[6872]);
initCHTYPE16(s[6873]);
initCHSTAT16(s[6874]);
initNGRANDCH(s[6875]);
initNGRANDCHINHH(s[6876]);
initNSIBS(s[6877]);
initFAMTYPE(s[6878]);
initBUTYPE(s[6879]);
initAGEG5(s[6880]);
initAGEG5_BU(s[6881]);
initAGEG7(s[6882]);
initAGEG7_BU(s[6883]);
initAGEG10(s[6884]);
initAGEG10_BU(s[6885]);
initAGEG3(s[6886]);
initAGEG3_BU(s[6887]);
initSPAGE(s[6888]);
initSPAGE_BU(s[6889]);
initNUMBUK013(s[6890]);
initNUMBUK1418(s[6891]);
initNUMHHK013(s[6892]);
initNUMHHK1418(s[6893]);
initBUEQ(s[6894]);
initHHEQ(s[6895]);
initTENURE(s[6896]);
initSOCRENT(s[6897]);
initNUMHHLDRSINHH(s[6898]);
initAGEHHLDR1(s[6899]);
initAGEHHLDR2(s[6900]);
initAGEHHLDR3(s[6901]);
initAGEHHLDR4(s[6902]);
initNAMEONPROP(s[6903]);
initSPNAMEONPROP(s[6904]);
initMARSTAT(s[6905]);
initHHGRIDDHWORK(s[6906]);
initHHGRIDDHWORK_P(s[6907]);
initWPACTIVE(s[6908]);
initWPACTIVE_P(s[6909]);
initWSELFD(s[6910]);
initWSELFD_P(s[6911]);
initECPOS(s[6912]);
initWORKTIME(s[6913]);
initHOURS(s[6914]);
initHOURS_AJ(s[6915]);
initEVERWORK(s[6916]);
initPP_MEM(s[6917]);
initPP_CONT(s[6918]);
initPP_NCONT(s[6919]);
initPP_OCC(s[6920]);
initPP_NOCC(s[6921]);
initPP_OCCDB(s[6922]);
initPP_NOCCDB(s[6923]);
initPP_OCCDC(s[6924]);
initPP_NOCCDC(s[6925]);
initPP_OCCNK(s[6926]);
initPP_NOCCNK(s[6927]);
initPP_PER(s[6928]);
initPP_NPER(s[6929]);
initPP_NK(s[6930]);
initPP_NNK(s[6931]);
initPP_REC(s[6932]);
initPP_NREC(s[6933]);
initPP_RR(s[6934]);
initPP_NRR(s[6935]);
initPP_MAXYRS(s[6936]);
initEDEND(s[6937]);
initEDQUAL(s[6938]);
initQUAL2(s[6939]);
initQUAL3(s[6940]);
initSCHLEAVE(s[6941]);
initQUAL2_P(s[6942]);
initQUAL3_P(s[6943]);
initSCHLEAVE_P(s[6944]);
initLACKRES(s[6945]);
initLACKRESB(s[6946]);
initINHERGT0(s[6947]);
initINHERGT0B(s[6948]);
initINHERGT10(s[6949]);
initINHERGT10B(s[6950]);
initINHERGT100(s[6951]);
initINHERGT100B(s[6952]);
initBEQUESTGT50(s[6953]);
initBEQUESTGT50B(s[6954]);
initBEQUESTGT0(s[6955]);
initBEQUESTGT0B(s[6956]);
initBEQUESTGT150(s[6957]);
initBEQUESTGT150B(s[6958]);
initEXPLIVE(s[6959]);
initEXPLIVEB(s[6960]);
initEXPLIVE75(s[6961]);
initEXPLIVE80(s[6962]);
initEXPLIVE85(s[6963]);
initEXPLIVE90(s[6964]);
initEXPLIVE95(s[6965]);
initEXPLIVE100(s[6966]);
initEXPLIVE75B(s[6967]);
initEXPLIVE80B(s[6968]);
initEXPLIVE85B(s[6969]);
initEXPLIVE90B(s[6970]);
initEXPLIVE95B(s[6971]);
initEXPLIVE100B(s[6972]);
initEXWORK(s[6973]);
initEXWORKB(s[6974]);
initEXWORK55(s[6975]);
initEXWORK55B(s[6976]);
initEXWORK60(s[6977]);
initEXWORK60B(s[6978]);
initEXWORK65(s[6979]);
initEXWORK65B(s[6980]);
initEXHLIMW(s[6981]);
initEXHLIMWB(s[6982]);
initFINDIFF(s[6983]);
initNDEPRIV(s[6984]);
initSRH_HRS(s[6985]);
initSRH_HSE(s[6986]);
initHRSFIRST(s[6987]);
initSRH3_HRS(s[6988]);
initSRH3_HSE(s[6989]);
initSRH3_HRS_P(s[6990]);
initSRH3_HSE_P(s[6991]);
initLLSILL(s[6992]);
initHLIMWRK(s[6993]);
initHLIMWRKC(s[6994]);
initHEMOBWA(s[6995]);
initHEMOBSI(s[6996]);
initHEMOBCH(s[6997]);
initHEMOBCS(s[6998]);
initHEMOBCL(s[6999]);
}
public void init_7000_7999(String line) {
initHEMOBST(s[7000]);
initHEMOBRE(s[7001]);
initHEMOBPU(s[7002]);
initHEMOBLI(s[7003]);
initHEMOBPI(s[7004]);
initHEMOB96(s[7005]);
initHEADLDR(s[7006]);
initHEADLWA(s[7007]);
initHEADLBA(s[7008]);
initHEADLEA(s[7009]);
initHEADLBE(s[7010]);
initHEADLWC(s[7011]);
initHEADLMA(s[7012]);
initHEADLDA(s[7013]);
initHEADLPR(s[7014]);
initHEADLSH(s[7015]);
initHEADLPH(s[7016]);
initHEADLCO(s[7017]);
initHEADLME(s[7018]);
initHEADLHO(s[7019]);
initHEADLMO(s[7020]);
initHEADL96(s[7021]);
initSMOKER(s[7022]);
initSMOKERSTAT(s[7023]);
initMALIVE(s[7024]);
initMOTHAGE(s[7025]);
initMAGEDIED(s[7026]);
initFALIVE(s[7027]);
initFATHAGE(s[7028]);
initFAGEDIED(s[7029]);
initDIKLIVM(s[7030]);
initDIFJOBM(s[7031]);
initNRIGHT(s[7032]);
initNUMTYPE5(s[7033]);
initNUMTYPE4(s[7034]);
initNUMTYPE2(s[7035]);
initEXECNN(s[7036]);
initMEMTOT(s[7037]);
initMEMTOTB(s[7038]);
initMAXNUMTYPE5(s[7039]);
initMAXNUMTYPE4(s[7040]);
initMAXNUMTYPE2(s[7041]);
initMAXEXECNN(s[7042]);
initMAXMEMTOTB(s[7043]);
initCESD_SC(s[7044]);
initCESD_NA(s[7045]);
initNROOMS(s[7046]);
initHOOLDM(s[7047]);
initHOMOVEM(s[7048]);
initHOYEARM(s[7049]);
initHOPAYM(s[7050]);
initRPI(s[7051]);
initFOODINL(s[7052]);
initFOODINU(s[7053]);
initFOODINT(s[7054]);
initFOODOUTL(s[7055]);
initFOODOUTU(s[7056]);
initFOODOUTT(s[7057]);
initCLOTHESL(s[7058]);
initCLOTHESU(s[7059]);
initCLOTHEST(s[7060]);
initLEISUREL(s[7061]);
initLEISUREU(s[7062]);
initLEISURET(s[7063]);
initTRANSFERSL(s[7064]);
initTRANSFERSU(s[7065]);
initTRANSFERST(s[7066]);
initUSESGAS(s[7067]);
initUSESELEC(s[7068]);
initUSESCOAL(s[7069]);
initUSESPARA(s[7070]);
initUSESOIL(s[7071]);
initUSESWOOD(s[7072]);
initUSESOTHERF(s[7073]);
initGASELECT(s[7074]);
initGASELECL(s[7075]);
initGASELECU(s[7076]);
initGASELECMETH(s[7077]);
initGAST(s[7078]);
initGASL(s[7079]);
initGASU(s[7080]);
initGASMETH(s[7081]);
initELECT(s[7082]);
initELECL(s[7083]);
initELECU(s[7084]);
initELECMETH(s[7085]);
initCOALL(s[7086]);
initCOALU(s[7087]);
initCOALT(s[7088]);
initPARAL(s[7089]);
initPARAU(s[7090]);
initPARAT(s[7091]);
initOILL(s[7092]);
initOILU(s[7093]);
initOILT(s[7094]);
initWOODL(s[7095]);
initWOODU(s[7096]);
initWOODT(s[7097]);
initOTHERFL(s[7098]);
initOTHERFU(s[7099]);
initOTHERFT(s[7100]);
initGROSSRENTL(s[7101]);
initGROSSRENTU(s[7102]);
initGROSSRENTT(s[7103]);
initGETSHB(s[7104]);
initNETRENTL(s[7105]);
initNETRENTU(s[7106]);
initNETRENTT(s[7107]);
initRENTINCWA(s[7108]);
initRENTINCSE(s[7109]);
initRENTINCLA(s[7110]);
initRENTINCGA(s[7111]);
initRENTINCHE(s[7112]);
initRENTINCCO(s[7113]);
initRENTINCME(s[7114]);
initRENTINCGD(s[7115]);
initRENTINCCL(s[7116]);
initRENTINCWP(s[7117]);
initRENTINCSG(s[7118]);
initRENTINC85(s[7119]);
initMORTPAYL(s[7120]);
initMORTPAYU(s[7121]);
initMORTPAYT(s[7122]);
initMORTPAYXL(s[7123]);
initMORTPAYXU(s[7124]);
initMORTPAYXT(s[7125]);
initMORTINCPP(s[7126]);
initMORTINCBI(s[7127]);
initMORTINCPI(s[7128]);
initMORTINC85(s[7129]);
initIDAUNIQ(s[7130]);
initIDAHH(s[7131]);
initPENID(s[7132]);
initPENSNO(s[7133]);
initWPPENN(s[7134]);
initWPFFPENT(s[7135]);
initWPFFDCDB(s[7136]);
initWPFFCURP(s[7137]);
initWPFFRECP(s[7138]);
initWPFFYBS(s[7139]);
initWPFFCONS(s[7140]);
initWPPENT(s[7141]);
initWPNEWP(s[7142]);
initWPPREV(s[7143]);
initWPCURR(s[7144]);
initWPLFTPCH(s[7145]);
initWPLFTPOF(s[7146]);
initWPLFTPEL(s[7147]);
initWPLFTPAF(s[7148]);
initWPLFTPRT(s[7149]);
initWPLFTPRE(s[7150]);
initWPLFTP95(s[7151]);
initWPREC(s[7152]);
initWPRGHX(s[7153]);
initWPCURP(s[7154]);
initWPSRUL(s[7155]);
initWPDPS(s[7156]);
initWPDCDB(s[7157]);
initWPCOS(s[7158]);
initWPNRA(s[7159]);
initWPBTHA(s[7160]);
initWPBTHP(s[7161]);
initWPERA(s[7162]);
initWPYAER(s[7163]);
initWPDESP(s[7164]);
initWPFSAP(s[7165]);
initWPPLP(s[7166]);
initWPPLPH(s[7167]);
initWPLUMP(s[7168]);
initWPLUML(s[7169]);
initWPLUMU(s[7170]);
initWPLUME(s[7171]);
initWPLUMR(s[7172]);
initWPPTP(s[7173]);
initWPPSAL(s[7174]);
initWPASAL(s[7175]);
initWPASL(s[7176]);
initWPASU(s[7177]);
initWPASE(s[7178]);
initWPASR(s[7179]);
initWPYBS(s[7180]);
initWPERC(s[7181]);
initWPMC(s[7182]);
initWPMCA(s[7183]);
initWPPERC(s[7184]);
initWPMFRC(s[7185]);
initWPACON(s[7186]);
initWPADY(s[7187]);
initWPMMIN(s[7188]);
initWPACOA(s[7189]);
initWPACOB(s[7190]);
initWPACOC(s[7191]);
initWPFRAS(s[7192]);
initWPCONY(s[7193]);
initWPPCON(s[7194]);
initWPYCAT(s[7195]);
initWPYCA(s[7196]);
initWPMCAF(s[7197]);
initWPYFRAC(s[7198]);
initWPLCOY(s[7199]);
initWPLCOM(s[7200]);
initWPNIRR(s[7201]);
initWPMCON(s[7202]);
initWPAC(s[7203]);
initWPFSC(s[7204]);
initWPRCON(s[7205]);
initWPRCMO(s[7206]);
initWPRCRE(s[7207]);
initWPRCST(s[7208]);
initWPRCRI(s[7209]);
initWPRCPU(s[7210]);
initWPRC95(s[7211]);
initWPRCMMO(s[7212]);
initWPRCMRE(s[7213]);
initWPRCMST(s[7214]);
initWPRCMRI(s[7215]);
initWPRCMPU(s[7216]);
initWPRCMOH(s[7217]);
initWPRCMUN(s[7218]);
initWPRCMAF(s[7219]);
initWPRCMNK(s[7220]);
initWPRCM85(s[7221]);
initWPRCM86(s[7222]);
initWPCEMP(s[7223]);
initWPECPP(s[7224]);
initWPAECP(s[7225]);
initWPEPER(s[7226]);
initWPFSEC(s[7227]);
initWPMEC(s[7228]);
initWPAMEC(s[7229]);
initWPFSCP(s[7230]);
initWPFSCO(s[7231]);
initWPFSAV(s[7232]);
initWPPFVA(s[7233]);
initWPPFVL(s[7234]);
initWPPFVU(s[7235]);
initWPPFVE(s[7236]);
initWPPFVR(s[7237]);
initWPAPF(s[7238]);
initWPAPFL(s[7239]);
initWPAPFU(s[7240]);
initWPAPFE(s[7241]);
initWPAPFR(s[7242]);
initWPPTOP(s[7243]);
initWPPENB(s[7244]);
initWPPETL(s[7245]);
initWPPETU(s[7246]);
initWPPETE(s[7247]);
initWPPETR(s[7248]);
initWPPEAL(s[7249]);
initWPPEAU(s[7250]);
initWPPEAE(s[7251]);
initWPPEAR(s[7252]);
initWPCONS(s[7253]);
initWPDPSP(s[7254]);
initWPERCP(s[7255]);
initWPDS(s[7256]);
initWPDE(s[7257]);
initWPINF(s[7258]);
initWPPAY(s[7259]);
initWPPYR(s[7260]);
initWPPYWL(s[7261]);
initWPPYWU(s[7262]);
initWPPYWE(s[7263]);
initWPPYWR(s[7264]);
initWPPYFL(s[7265]);
initWPPYFU(s[7266]);
initWPPYFE(s[7267]);
initWPPYFR(s[7268]);
initWPPYML(s[7269]);
initWPPYMU(s[7270]);
initWPPYME(s[7271]);
initWPPYMR(s[7272]);
initWPPYYL(s[7273]);
initWPPYYU(s[7274]);
initWPPYYE(s[7275]);
initWPPYYR(s[7276]);
initWPPYOL(s[7277]);
initWPPYOU(s[7278]);
initWPPYOE(s[7279]);
initWPPYOR(s[7280]);
initWPTAX(s[7281]);
initWPNEW(s[7282]);
initWPLUPS(s[7283]);
initWPLUPA(s[7284]);
initWPLUAL(s[7285]);
initWPLUAU(s[7286]);
initWPLUAE(s[7287]);
initWPLUAR(s[7288]);
initWPTAKP(s[7289]);
initWPINCD(s[7290]);
initWPINCL(s[7291]);
initWPINCU(s[7292]);
initWPINCE(s[7293]);
initWPINCR(s[7294]);
initWPIFSNO(s[7295]);
initWPIFSEM(s[7296]);
initWPIFSRE(s[7297]);
initWPIFSCO(s[7298]);
initWPIFSPR(s[7299]);
initWPIFSAC(s[7300]);
initWPIFSFA(s[7301]);
initWPIFSRP(s[7302]);
initWPIFS95(s[7303]);
initWPFINFO(s[7304]);
initWPBPSP(s[7305]);
initWPPSPC(s[7306]);
initWPMORP(s[7307]);
initDEMPPEN(s[7308]);
initDDBDC(s[7309]);
initDCURPEN(s[7310]);
initIDAUNIQ(s[7311]);
initTOTPENW_06(s[7312]);
initSTPENW_06(s[7313]);
initBSP_06(s[7314]);
initADDPEN_06(s[7315]);
initPRIPENW_06(s[7316]);
initCURRENTDC_06(s[7317]);
initCURRENTDB_06(s[7318]);
initRETAINEDDC_06(s[7319]);
initRETAINEDDB_06(s[7320]);
initINRECEIPT_06(s[7321]);
initWIDPEN_06(s[7322]);
initTOTPENW_SPA(s[7323]);
initSTPENW_SPA(s[7324]);
initBSP_SPA(s[7325]);
initADDPEN_SPA(s[7326]);
initPRIPENW_SPA(s[7327]);
initCURRENTDC_SPA(s[7328]);
initCURRENTDB_SPA(s[7329]);
initRETAINEDDC_SPA(s[7330]);
initRETAINEDDB_SPA(s[7331]);
initINRECEIPT_SPA(s[7332]);
initWIDPEN_SPA(s[7333]);
initIFLAG_EARN(s[7334]);
initIFLAG_DCFUND(s[7335]);
initIFLAG_DBSR1(s[7336]);
initIFLAG_DBSR2(s[7337]);
initIFLAG_DCCONT(s[7338]);
initIFLAG_RTEN(s[7339]);
initIFLAG_REC(s[7340]);
initIDAUNIQ(s[7341]);
initW3RINDOUT(s[7342]);
initSCREC(s[7343]);
initRETROWGT(s[7344]);
initVERSION(s[7345]);
initAGE(s[7346]);
initINTMTH(s[7347]);
initINTYEAR(s[7348]);
initYRBIRTH(s[7349]);
initSEX(s[7350]);
initFFFTEAG(s[7351]);
initFFCHVAR(s[7352]);
initFFCHAG1(s[7353]);
initFFCHSX1(s[7354]);
initFFRELTX(s[7355]);
initFFCHAG2(s[7356]);
initFFCHSX2(s[7357]);
initFFRELTX2(s[7358]);
initFFCHAG3(s[7359]);
initFFCHSX3(s[7360]);
initFFRELTX3(s[7361]);
initFFCHAG4(s[7362]);
initFFCHSX4(s[7363]);
initFFRELTX4(s[7364]);
initFFCHAG5(s[7365]);
initFFCHSX5(s[7366]);
initFFRELTX5(s[7367]);
initFFCHAG6(s[7368]);
initFFCHSX6(s[7369]);
initFFRELTX6(s[7370]);
initFFCHAG7(s[7371]);
initFFCHSX7(s[7372]);
initFFRELTX7(s[7373]);
initFFCHAG8(s[7374]);
initFFCHSX8(s[7375]);
initFFRELTX8(s[7376]);
initFFCHAG9(s[7377]);
initFFCHSX9(s[7378]);
initFFRELTX9(s[7379]);
initFFCHAG10(s[7380]);
initFFCHSX10(s[7381]);
initFFRELT10(s[7382]);
initFFCHAG11(s[7383]);
initFFCHSX11(s[7384]);
initFFRELT11(s[7385]);
initFFCHAG12(s[7386]);
initFFCHSX12(s[7387]);
initFFRELT12(s[7388]);
initFFCHAG13(s[7389]);
initFFCHSX13(s[7390]);
initFFRELT13(s[7391]);
initDOBCHK(s[7392]);
initRCCHC(s[7393]);
initRCALV(s[7394]);
initRCSXC(s[7395]);
initRCSXN(s[7396]);
initRCDBC(s[7397]);
initRCRLC(s[7398]);
initRCREL(s[7399]);
initRCADY(s[7400]);
initRCLVF(s[7401]);
initRCDYY(s[7402]);
initRCCHC2(s[7403]);
initRCALV2(s[7404]);
initRCSXC2(s[7405]);
initRCSXN2(s[7406]);
initRCDBC2(s[7407]);
initRCRLC2(s[7408]);
initRCREL2(s[7409]);
initRCADY2(s[7410]);
initRCLVF2(s[7411]);
initRCDYY2(s[7412]);
initRCCHC3(s[7413]);
initRCALV3(s[7414]);
initRCSXC3(s[7415]);
initRCSXN3(s[7416]);
initRCDBC3(s[7417]);
initRCRLC3(s[7418]);
initRCREL3(s[7419]);
initRCADY3(s[7420]);
initRCLVF3(s[7421]);
initRCDYY3(s[7422]);
initRCCHC4(s[7423]);
initRCALV4(s[7424]);
initRCSXC4(s[7425]);
initRCSXN4(s[7426]);
initRCDBC4(s[7427]);
initRCRLC4(s[7428]);
initRCREL4(s[7429]);
initRCADY4(s[7430]);
initRCLVF4(s[7431]);
initRCDYY4(s[7432]);
initRCCHC5(s[7433]);
initRCALV5(s[7434]);
initRCSXC5(s[7435]);
initRCSXN5(s[7436]);
initRCDBC5(s[7437]);
initRCRLC5(s[7438]);
initRCREL5(s[7439]);
initRCADY5(s[7440]);
initRCLVF5(s[7441]);
initRCDYY5(s[7442]);
initRCCHC6(s[7443]);
initRCALV6(s[7444]);
initRCSXC6(s[7445]);
initRCSXN6(s[7446]);
initRCDBC6(s[7447]);
initRCRLC6(s[7448]);
initRCREL6(s[7449]);
initRCADY6(s[7450]);
initRCLVF6(s[7451]);
initRCDYY6(s[7452]);
initRCCHC7(s[7453]);
initRCALV7(s[7454]);
initRCSXC7(s[7455]);
initRCSXN7(s[7456]);
initRCDBC7(s[7457]);
initRCRLC7(s[7458]);
initRCREL7(s[7459]);
initRCADY7(s[7460]);
initRCLVF7(s[7461]);
initRCDYY7(s[7462]);
initRCCHC8(s[7463]);
initRCALV8(s[7464]);
initRCSXC8(s[7465]);
initRCSXN8(s[7466]);
initRCDBC8(s[7467]);
initRCRLC8(s[7468]);
initRCREL8(s[7469]);
initRCADY8(s[7470]);
initRCLVF8(s[7471]);
initRCDYY8(s[7472]);
initRCCHC9(s[7473]);
initRCALV9(s[7474]);
initRCSXC9(s[7475]);
initRCSXN9(s[7476]);
initRCDBC9(s[7477]);
initRCRLC9(s[7478]);
initRCREL9(s[7479]);
initRCADY9(s[7480]);
initRCLVF9(s[7481]);
initRCDYY9(s[7482]);
initRCCHC10(s[7483]);
initRCALV10(s[7484]);
initRCSXC10(s[7485]);
initRCSXN10(s[7486]);
initRCDBC10(s[7487]);
initRCRLC10(s[7488]);
initRCREL10(s[7489]);
initRCADY10(s[7490]);
initRCLVF10(s[7491]);
initRCDYY10(s[7492]);
initRCCHC11(s[7493]);
initRCALV11(s[7494]);
initRCSXC11(s[7495]);
initRCSXN11(s[7496]);
initRCDBC11(s[7497]);
initRCRLC11(s[7498]);
initRCREL11(s[7499]);
initRCADY11(s[7500]);
initRCLVF11(s[7501]);
initRCDYY11(s[7502]);
initRCCHC12(s[7503]);
initRCALV12(s[7504]);
initRCSXC12(s[7505]);
initRCSXN12(s[7506]);
initRCDBC12(s[7507]);
initRCRLC12(s[7508]);
initRCREL12(s[7509]);
initRCADY12(s[7510]);
initRCLVF12(s[7511]);
initRCDYY12(s[7512]);
initRCCHC13(s[7513]);
initRCALV13(s[7514]);
initRCSXC13(s[7515]);
initRCSXN13(s[7516]);
initRCDBC13(s[7517]);
initRCRLC13(s[7518]);
initRCREL13(s[7519]);
initRCADY13(s[7520]);
initRCLVF13(s[7521]);
initRCDYY13(s[7522]);
initRCBTH(s[7523]);
initRCBNO(s[7524]);
initRCFAT(s[7525]);
initRCFNO(s[7526]);
initRCYRS(s[7527]);
initRCSEX(s[7528]);
initRCALI(s[7529]);
initRCNDY(s[7530]);
initRCLIV(s[7531]);
initRCYRS2(s[7532]);
initRCSEX2(s[7533]);
initRCALI2(s[7534]);
initRCNDY2(s[7535]);
initRCLIV2(s[7536]);
initRCYRS3(s[7537]);
initRCSEX3(s[7538]);
initRCALI3(s[7539]);
initRCNDY3(s[7540]);
initRCLIV3(s[7541]);
initRCYRS4(s[7542]);
initRCSEX4(s[7543]);
initRCALI4(s[7544]);
initRCNDY4(s[7545]);
initRCLIV4(s[7546]);
initRCYRS5(s[7547]);
initRCSEX5(s[7548]);
initRCALI5(s[7549]);
initRCNDY5(s[7550]);
initRCLIV5(s[7551]);
initRCYRS6(s[7552]);
initRCSEX6(s[7553]);
initRCALI6(s[7554]);
initRCNDY6(s[7555]);
initRCLIV6(s[7556]);
initRCADP(s[7557]);
initRCANO(s[7558]);
initRCADT(s[7559]);
initRCASX(s[7560]);
initRCAYR(s[7561]);
initRCAAL(s[7562]);
initRCADD(s[7563]);
initRCALV21(s[7564]);
initRCADT2(s[7565]);
initRCASX2(s[7566]);
initRCAYR2(s[7567]);
initRCAAL2(s[7568]);
initRCADD2(s[7569]);
initRCALV22(s[7570]);
initRCFOST(s[7571]);
initRCFOYR(s[7572]);
initRCABT(s[7573]);
initRCDNO(s[7574]);
initRCMDT(s[7575]);
initRCTIM(s[7576]);
initRCEND(s[7577]);
initRCMDT2(s[7578]);
initRCTIM2(s[7579]);
initRCEND2(s[7580]);
initRCMDT3(s[7581]);
initRCTIM3(s[7582]);
initRCEND3(s[7583]);
initRCMDT4(s[7584]);
initRCTIM4(s[7585]);
initRCEND4(s[7586]);
initRCMDT5(s[7587]);
initRCTIM5(s[7588]);
initRCEND5(s[7589]);
initRCMDT6(s[7590]);
initRCTIM6(s[7591]);
initRCEND6(s[7592]);
initRCMDT7(s[7593]);
initRCTIM7(s[7594]);
initRCEND7(s[7595]);
initRCMDT8(s[7596]);
initRCTIM8(s[7597]);
initRCEND8(s[7598]);
initRCMDT9(s[7599]);
initRCTIM9(s[7600]);
initRCEND9(s[7601]);
initRCMDT10(s[7602]);
initRCTIM10(s[7603]);
initRCEND10(s[7604]);
initRCMDT11(s[7605]);
initRCTIM11(s[7606]);
initRCEND11(s[7607]);
initRCMDT12(s[7608]);
initRCTIM12(s[7609]);
initRCEND12(s[7610]);
initRCMDT13(s[7611]);
initRCTIM13(s[7612]);
initRCEND13(s[7613]);
initRCALO(s[7614]);
initRPINB(s[7615]);
initRPLIV(s[7616]);
initRPMAR(s[7617]);
initRPCHK(s[7618]);
initRPLTR(s[7619]);
initRPMYR(s[7620]);
initRPREL(s[7621]);
initRPSTL(s[7622]);
initRPFIN(s[7623]);
initRPFIN1C(s[7624]);
initRPDIY(s[7625]);
initRPEYR(s[7626]);
initRPDIV(s[7627]);
initRPDYR(s[7628]);
initRPMOR(s[7629]);
initRPLIV2(s[7630]);
initRPMAR2(s[7631]);
initRPCHK2(s[7632]);
initRPLTR2(s[7633]);
initRPMYR2(s[7634]);
initRPREL2(s[7635]);
initRPSTL2(s[7636]);
initRPFIN2(s[7637]);
initRPFIN2C(s[7638]);
initRPDIY2(s[7639]);
initRPEYR2(s[7640]);
initRPDIV2(s[7641]);
initRPDYR2(s[7642]);
initRPMOR2(s[7643]);
initRPLIV3(s[7644]);
initRPMAR3(s[7645]);
initRPCHK3(s[7646]);
initRPLTR3(s[7647]);
initRPMYR3(s[7648]);
initRPREL3(s[7649]);
initRPSTL3(s[7650]);
initRPFIN3(s[7651]);
initRPFIN3C(s[7652]);
initRPDIY3(s[7653]);
initRPEYR3(s[7654]);
initRPDIV3(s[7655]);
initRPDYR3(s[7656]);
initRPMOR3(s[7657]);
initRPLIV4(s[7658]);
initRPMAR4(s[7659]);
initRPCHK4(s[7660]);
initRPLTR4(s[7661]);
initRPMYR4(s[7662]);
initRPREL4(s[7663]);
initRPSTL4(s[7664]);
initRPFIN4(s[7665]);
initRPDIY4(s[7666]);
initRPEYR4(s[7667]);
initRPDIV4(s[7668]);
initRPDYR4(s[7669]);
initRPMOR4(s[7670]);
initRPLIV5(s[7671]);
initRPMAR5(s[7672]);
initRPCHK5(s[7673]);
initRPLTR5(s[7674]);
initRPMYR5(s[7675]);
initRPREL5(s[7676]);
initRPSTL5(s[7677]);
initRPFIN5(s[7678]);
initRPDIY5(s[7679]);
initRPEYR5(s[7680]);
initRPDIV5(s[7681]);
initRPDYR5(s[7682]);
initRPMOR5(s[7683]);
initRPLIV6(s[7684]);
initRPMAR6(s[7685]);
initRPCHK6(s[7686]);
initRPLTR6(s[7687]);
initRPMYR6(s[7688]);
initRPREL6(s[7689]);
initRPSTL6(s[7690]);
initRPFIN6(s[7691]);
initRPDIY6(s[7692]);
initRPEYR6(s[7693]);
initRPDIV6(s[7694]);
initRPDYR6(s[7695]);
initRPMOR6(s[7696]);
initRPLIV7(s[7697]);
initRPMAR7(s[7698]);
initRPCHK7(s[7699]);
initRPLTR7(s[7700]);
initRPMYR7(s[7701]);
initRPREL7(s[7702]);
initRPSTL7(s[7703]);
initRPFIN7(s[7704]);
initRPDIY7(s[7705]);
initRPEYR7(s[7706]);
initRPDIV7(s[7707]);
initRPDYR7(s[7708]);
initRPMOR7(s[7709]);
initRPNCA(s[7710]);
initRPNCB(s[7711]);
initRPNCE(s[7712]);
initRPNCF(s[7713]);
initRPNCH(s[7714]);
initRPNCB2(s[7715]);
initRPNCE2(s[7716]);
initRPNCF2(s[7717]);
initRPNCH2(s[7718]);
initRPNCB3(s[7719]);
initRPNCE3(s[7720]);
initRPNCF3(s[7721]);
initRPNCH3(s[7722]);
initRPNCB4(s[7723]);
initRPNCE4(s[7724]);
initRPNCF4(s[7725]);
initRPNCH4(s[7726]);
initRPNCB5(s[7727]);
initRPNCE5(s[7728]);
initRPNCF5(s[7729]);
initRPNCH5(s[7730]);
initRPNCB6(s[7731]);
initRPNCE6(s[7732]);
initRPNCF6(s[7733]);
initRPNCH6(s[7734]);
initRPNCB7(s[7735]);
initRPNCE7(s[7736]);
initRPNCF7(s[7737]);
initRPNCH7(s[7738]);
initRPNCB8(s[7739]);
initRPNCE8(s[7740]);
initRPNCF8(s[7741]);
initRPNCH8(s[7742]);
initRPNCB9(s[7743]);
initRPNCE9(s[7744]);
initRPNCF9(s[7745]);
initRPNCH9(s[7746]);
initRALIS1(s[7747]);
initRALIS2(s[7748]);
initRALIS3(s[7749]);
initRALIS4(s[7750]);
initRALIS5(s[7751]);
initRALIS6(s[7752]);
initRALIS7(s[7753]);
initRALIS8(s[7754]);
initRALIS96(s[7755]);
initRAAUK(s[7756]);
initRABOR(s[7757]);
initRASTB(s[7758]);
initRAESS(s[7759]);
initRAGAP(s[7760]);
initRASTY(s[7761]);
initRABUK(s[7762]);
initRAOWN(s[7763]);
initRAPRI(s[7764]);
initRAPRIC(s[7765]);
initRASTP(s[7766]);
initRAEST(s[7767]);
initRASTT2(s[7768]);
initRASTB2(s[7769]);
initRAESS2(s[7770]);
initRAGAP2(s[7771]);
initRASTY2(s[7772]);
initRABUK2(s[7773]);
initRAOWN2(s[7774]);
initRAPRI2(s[7775]);
initRAPRI2C(s[7776]);
initRASTP2(s[7777]);
initRAEST2(s[7778]);
initRASTT3(s[7779]);
initRASTB3(s[7780]);
initRAESS3(s[7781]);
initRAGAP3(s[7782]);
initRASTY3(s[7783]);
initRABUK3(s[7784]);
initRAOWN3(s[7785]);
initRAPRI3(s[7786]);
initRAPRI3C(s[7787]);
initRASTP3(s[7788]);
initRAEST3(s[7789]);
initRASTT4(s[7790]);
initRASTB4(s[7791]);
initRAESS4(s[7792]);
initRAGAP4(s[7793]);
initRASTY4(s[7794]);
initRABUK4(s[7795]);
initRAOWN4(s[7796]);
initRAPRI4(s[7797]);
initRAPRI4C(s[7798]);
initRASTP4(s[7799]);
initRAEST4(s[7800]);
initRASTT5(s[7801]);
initRASTB5(s[7802]);
initRAESS5(s[7803]);
initRAGAP5(s[7804]);
initRASTY5(s[7805]);
initRABUK5(s[7806]);
initRAOWN5(s[7807]);
initRAPRI5(s[7808]);
initRAPRI5C(s[7809]);
initRASTP5(s[7810]);
initRAEST5(s[7811]);
initRASTT6(s[7812]);
initRASTB6(s[7813]);
initRAESS6(s[7814]);
initRAGAP6(s[7815]);
initRASTY6(s[7816]);
initRABUK6(s[7817]);
initRAOWN6(s[7818]);
initRAPRI6(s[7819]);
initRAPRI6C(s[7820]);
initRASTP6(s[7821]);
initRAEST6(s[7822]);
initRASTT7(s[7823]);
initRASTB7(s[7824]);
initRAESS7(s[7825]);
initRAGAP7(s[7826]);
initRASTY7(s[7827]);
initRABUK7(s[7828]);
initRAOWN7(s[7829]);
initRAPRI7(s[7830]);
initRAPRI7C(s[7831]);
initRASTP7(s[7832]);
initRAEST7(s[7833]);
initRASTT8(s[7834]);
initRASTB8(s[7835]);
initRAESS8(s[7836]);
initRAGAP8(s[7837]);
initRASTY8(s[7838]);
initRABUK8(s[7839]);
initRAOWN8(s[7840]);
initRAPRI8(s[7841]);
initRAPRI8C(s[7842]);
initRASTP8(s[7843]);
initRAEST8(s[7844]);
initRASTT9(s[7845]);
initRASTB9(s[7846]);
initRAESS9(s[7847]);
initRAGAP9(s[7848]);
initRASTY9(s[7849]);
initRABUK9(s[7850]);
initRAOWN9(s[7851]);
initRAPRI9(s[7852]);
initRAPRI9C(s[7853]);
initRASTP9(s[7854]);
initRAEST9(s[7855]);
initRASTT10(s[7856]);
initRASTB10(s[7857]);
initRAESS10(s[7858]);
initRAGAP10(s[7859]);
initRASTY10(s[7860]);
initRABUK10(s[7861]);
initRAOWN10(s[7862]);
initRAPRI10(s[7863]);
initRAPRI10C(s[7864]);
initRASTP10(s[7865]);
initRAEST10(s[7866]);
initRASTT11(s[7867]);
initRASTB11(s[7868]);
initRAESS11(s[7869]);
initRAGAP11(s[7870]);
initRASTY11(s[7871]);
initRABUK11(s[7872]);
initRAOWN11(s[7873]);
initRAPRI11(s[7874]);
initRAPRI11C(s[7875]);
initRASTP11(s[7876]);
initRAEST11(s[7877]);
initRASTT12(s[7878]);
initRASTB12(s[7879]);
initRAESS12(s[7880]);
initRAGAP12(s[7881]);
initRASTY12(s[7882]);
initRABUK12(s[7883]);
initRAOWN12(s[7884]);
initRAPRI12(s[7885]);
initRAPRI12C(s[7886]);
initRASTP12(s[7887]);
initRAEST12(s[7888]);
initRASTT13(s[7889]);
initRASTB13(s[7890]);
initRAESS13(s[7891]);
initRAGAP13(s[7892]);
initRASTY13(s[7893]);
initRABUK13(s[7894]);
initRAOWN13(s[7895]);
initRAPRI13(s[7896]);
initRAPRI13C(s[7897]);
initRASTP13(s[7898]);
initRAEST13(s[7899]);
initRASTT14(s[7900]);
initRASTB14(s[7901]);
initRAESS14(s[7902]);
initRAGAP14(s[7903]);
initRASTY14(s[7904]);
initRABUK14(s[7905]);
initRAOWN14(s[7906]);
initRAPRI14(s[7907]);
initRAPRI14C(s[7908]);
initRASTP14(s[7909]);
initRAEST14(s[7910]);
initRASTT15(s[7911]);
initRASTB15(s[7912]);
initRAESS15(s[7913]);
initRAGAP15(s[7914]);
initRASTY15(s[7915]);
initRABUK15(s[7916]);
initRAOWN15(s[7917]);
initRAPRI15(s[7918]);
initRAPRI15C(s[7919]);
initRASTP15(s[7920]);
initRAEST15(s[7921]);
initRASTT16(s[7922]);
initRASTB16(s[7923]);
initRAESS16(s[7924]);
initRAGAP16(s[7925]);
initRASTY16(s[7926]);
initRABUK16(s[7927]);
initRAOWN16(s[7928]);
initRAPRI16(s[7929]);
initRAPRI16C(s[7930]);
initRASTP16(s[7931]);
initRAEST16(s[7932]);
initRASTT17(s[7933]);
initRASTB17(s[7934]);
initRAESS17(s[7935]);
initRAGAP17(s[7936]);
initRASTY17(s[7937]);
initRABUK17(s[7938]);
initRAOWN17(s[7939]);
initRAPRI17(s[7940]);
initRAPRI17C(s[7941]);
initRASTP17(s[7942]);
initRAEST17(s[7943]);
initRASTT18(s[7944]);
initRASTB18(s[7945]);
initRAESS18(s[7946]);
initRAGAP18(s[7947]);
initRASTY18(s[7948]);
initRABUK18(s[7949]);
initRAOWN18(s[7950]);
initRAPRI18(s[7951]);
initRAPRI18C(s[7952]);
initRASTP18(s[7953]);
initRAEST18(s[7954]);
initRASTT19(s[7955]);
initRASTB19(s[7956]);
initRAESS19(s[7957]);
initRAGAP19(s[7958]);
initRASTY19(s[7959]);
initRABUK19(s[7960]);
initRAOWN19(s[7961]);
initRAPRI19(s[7962]);
initRAPRI19C(s[7963]);
initRASTP19(s[7964]);
initRAEST19(s[7965]);
initRASTT20(s[7966]);
initRASTB20(s[7967]);
initRAESS20(s[7968]);
initRAGAP20(s[7969]);
initRASTY20(s[7970]);
initRABUK20(s[7971]);
initRAOWN20(s[7972]);
initRAPRI20(s[7973]);
initRAPRI20C(s[7974]);
initRASTP20(s[7975]);
initRAEST20(s[7976]);
initRAROO(s[7977]);
initRAPEO(s[7978]);
initRAREL1(s[7979]);
initRAREL2(s[7980]);
initRAREL3(s[7981]);
initRAREL4(s[7982]);
initRAREL5(s[7983]);
initRAREL6(s[7984]);
initRAREL7(s[7985]);
initRAREL8(s[7986]);
initRAREL9(s[7987]);
initRAFAC1(s[7988]);
initRAFAC2(s[7989]);
initRAFAC3(s[7990]);
initRAFAC4(s[7991]);
initRAFAC5(s[7992]);
initRAFAC6(s[7993]);
initRAFAC96(s[7994]);
initRABKS(s[7995]);
initRADIV(s[7996]);
initRADIY(s[7997]);
initRAMOT(s[7998]);
initRAMOA(s[7999]);
}
public void init_8000_8999(String line) {
initRAMOY(s[8000]);
initRAMOYC(s[8001]);
initRAPAR(s[8002]);
initRWFTC(s[8003]);
initRWFTN(s[8004]);
initRWFTE(s[8005]);
initRWNED(s[8006]);
initRWEVW(s[8007]);
initRWJSA(s[8008]);
initRWSTF1(s[8009]);
initRWSTF2(s[8010]);
initRWSTF3(s[8011]);
initRWSTF4(s[8012]);
initRWSTF5(s[8013]);
initRWSTF6(s[8014]);
initRWSTF7(s[8015]);
initRWSTF8(s[8016]);
initRWSTF9(s[8017]);
initRWSTF95(s[8018]);
initRWSTF1M(s[8019]);
initRWSTF2M(s[8020]);
initRWSTF3M(s[8021]);
initRWSTF4M(s[8022]);
initRWSTF5M(s[8023]);
initRWSTF6M(s[8024]);
initRWSTF7M(s[8025]);
initRWSTF8M(s[8026]);
initRWSTF9M(s[8027]);
initRWSTF51M(s[8028]);
initRWSTF52M(s[8029]);
initRWSTF53M(s[8030]);
initRWSTF54M(s[8031]);
initRWSTF56M(s[8032]);
initRWSTF85M(s[8033]);
initRWNWA(s[8034]);
initRWNWB(s[8035]);
initRWNWC1(s[8036]);
initRWNWC2(s[8037]);
initRWNWC3(s[8038]);
initRWNWC4(s[8039]);
initRWNWC5(s[8040]);
initRWNWC6(s[8041]);
initRWNWC7(s[8042]);
initRWNWC8(s[8043]);
initRWNWC9(s[8044]);
initRWNWC95(s[8045]);
initRWNWA2(s[8046]);
initRWNWB2(s[8047]);
initRWNWC10(s[8048]);
initRWNWC11(s[8049]);
initRWNWC12(s[8050]);
initRWNWC13(s[8051]);
initRWNWC14(s[8052]);
initRWNWC15(s[8053]);
initRWNWC16(s[8054]);
initRWNWC17(s[8055]);
initRWNWC18(s[8056]);
initRWNWC96(s[8057]);
initRWNWA3(s[8058]);
initRWNWB3(s[8059]);
initRWNWC19(s[8060]);
initRWNWC20(s[8061]);
initRWNWC21(s[8062]);
initRWNWC22(s[8063]);
initRWNWC23(s[8064]);
initRWNWC24(s[8065]);
initRWNWC25(s[8066]);
initRWNWC26(s[8067]);
initRWNWC27(s[8068]);
initRWNWC97(s[8069]);
initRWNWA4(s[8070]);
initRWNWB4(s[8071]);
initRWNWC28(s[8072]);
initRWNWC29(s[8073]);
initRWNWC30(s[8074]);
initRWNWC31(s[8075]);
initRWNWC32(s[8076]);
initRWNWC33(s[8077]);
initRWNWC34(s[8078]);
initRWNWC35(s[8079]);
initRWNWC36(s[8080]);
initRWNWC98(s[8081]);
initRWNWA5(s[8082]);
initRWNWB5(s[8083]);
initRWNWC37(s[8084]);
initRWNWC38(s[8085]);
initRWNWC39(s[8086]);
initRWNWC40(s[8087]);
initRWNWC41(s[8088]);
initRWNWC42(s[8089]);
initRWNWC43(s[8090]);
initRWNWC44(s[8091]);
initRWNWC45(s[8092]);
initRWNWC99(s[8093]);
initRWNWA6(s[8094]);
initRWNWB6(s[8095]);
initRWNWC46(s[8096]);
initRWNWC47(s[8097]);
initRWNWC48(s[8098]);
initRWNWC49(s[8099]);
initRWNWC50(s[8100]);
initRWNWC51(s[8101]);
initRWNWC52(s[8102]);
initRWNWC53(s[8103]);
initRWNWC54(s[8104]);
initRWNWC100(s[8105]);
initRWNWA7(s[8106]);
initRWNWB7(s[8107]);
initRWNWC55(s[8108]);
initRWNWC56(s[8109]);
initRWNWC57(s[8110]);
initRWNWC58(s[8111]);
initRWNWC59(s[8112]);
initRWNWC60(s[8113]);
initRWNWC61(s[8114]);
initRWNWC62(s[8115]);
initRWNWC63(s[8116]);
initRWNWC101(s[8117]);
initRWNWA8(s[8118]);
initRWNWB8(s[8119]);
initRWNWC64(s[8120]);
initRWNWC65(s[8121]);
initRWNWC66(s[8122]);
initRWNWC67(s[8123]);
initRWNWC68(s[8124]);
initRWNWC69(s[8125]);
initRWNWC70(s[8126]);
initRWNWC71(s[8127]);
initRWNWC72(s[8128]);
initRWNWC102(s[8129]);
initRWNWA9(s[8130]);
initRWNWB9(s[8131]);
initRWNWC73(s[8132]);
initRWNWC74(s[8133]);
initRWNWC75(s[8134]);
initRWNWC76(s[8135]);
initRWNWC77(s[8136]);
initRWNWC78(s[8137]);
initRWNWC79(s[8138]);
initRWNWC80(s[8139]);
initRWNWC81(s[8140]);
initRWNWC103(s[8141]);
initRWJSY(s[8142]);
initRWSE(s[8143]);
initRWFT(s[8144]);
initRWFTP(s[8145]);
initRWPTF(s[8146]);
initRWS(s[8147]);
initRWSM(s[8148]);
initRWSAN(s[8149]);
initRWSAP(s[8150]);
initRWSAS(s[8151]);
initRWSAD(s[8152]);
initRWSGN(s[8153]);
initRWSTI(s[8154]);
initRWEDY(s[8155]);
initRWNX(s[8156]);
initRWST1A(s[8157]);
initRWST2A(s[8158]);
initRWST3A(s[8159]);
initRWST4A(s[8160]);
initRWST5A(s[8161]);
initRWST6A(s[8162]);
initRWST7A(s[8163]);
initRWST8A(s[8164]);
initRWST9A(s[8165]);
initRWST95A(s[8166]);
initRWST1AM(s[8167]);
initRWST2AM(s[8168]);
initRWST3AM(s[8169]);
initRWST4AM(s[8170]);
initRWST5AM(s[8171]);
initRWST6AM(s[8172]);
initRWST7AM(s[8173]);
initRWST8AM(s[8174]);
initRWST9AM(s[8175]);
initRWST51AM(s[8176]);
initRWST52AM(s[8177]);
initRWST53AM(s[8178]);
initRWST54AM(s[8179]);
initRWST55AM(s[8180]);
initRWST56AM(s[8181]);
initRWST85AM(s[8182]);
initRWSFF1(s[8183]);
initRWSFF2(s[8184]);
initRWSFF3(s[8185]);
initRWSFF4(s[8186]);
initRWSFF5(s[8187]);
initRWSFF6(s[8188]);
initRWSFF7(s[8189]);
initRWSFF8(s[8190]);
initRWSFF9(s[8191]);
initRWSFF95(s[8192]);
initRWANO(s[8193]);
initRWJSY2(s[8194]);
initRWSE2(s[8195]);
initRWFT2(s[8196]);
initRWFTP2(s[8197]);
initRWPTF2(s[8198]);
initRWS2(s[8199]);
initRWSM2(s[8200]);
initRWSAN2(s[8201]);
initRWSAP2(s[8202]);
initRWSAS2(s[8203]);
initRWSAD2(s[8204]);
initRWSGN2(s[8205]);
initRWSTI2(s[8206]);
initRWEDY2(s[8207]);
initRWNX2(s[8208]);
initRWST1B(s[8209]);
initRWST2B(s[8210]);
initRWST3B(s[8211]);
initRWST4B(s[8212]);
initRWST5B(s[8213]);
initRWST6B(s[8214]);
initRWST7B(s[8215]);
initRWST8B(s[8216]);
initRWST9B(s[8217]);
initRWST95B(s[8218]);
initRWST1BM(s[8219]);
initRWST2BM(s[8220]);
initRWST3BM(s[8221]);
initRWST4BM(s[8222]);
initRWST5BM(s[8223]);
initRWST6BM(s[8224]);
initRWST7BM(s[8225]);
initRWST8BM(s[8226]);
initRWST9BM(s[8227]);
initRWST51BM(s[8228]);
initRWST52BM(s[8229]);
initRWST55BM(s[8230]);
initRWST56BM(s[8231]);
initRWST85BM(s[8232]);
initRWSFF10(s[8233]);
initRWSFF11(s[8234]);
initRWSFF12(s[8235]);
initRWSFF13(s[8236]);
initRWSFF14(s[8237]);
initRWSFF15(s[8238]);
initRWSFF16(s[8239]);
initRWSFF17(s[8240]);
initRWSFF18(s[8241]);
initRWSFF96(s[8242]);
initRWANO2(s[8243]);
initRWJSY3(s[8244]);
initRWSE3(s[8245]);
initRWFT3(s[8246]);
initRWFTP3(s[8247]);
initRWPTF3(s[8248]);
initRWS3(s[8249]);
initRWSM3(s[8250]);
initRWSAN3(s[8251]);
initRWSAP3(s[8252]);
initRWSAS3(s[8253]);
initRWSAD3(s[8254]);
initRWSGN3(s[8255]);
initRWSTI3(s[8256]);
initRWEDY3(s[8257]);
initRWNX3(s[8258]);
initRWST1C(s[8259]);
initRWST2C(s[8260]);
initRWST3C(s[8261]);
initRWST4C(s[8262]);
initRWST5C(s[8263]);
initRWST6C(s[8264]);
initRWST7C(s[8265]);
initRWST8C(s[8266]);
initRWST9C(s[8267]);
initRWST95C(s[8268]);
initRWST1CM(s[8269]);
initRWST2CM(s[8270]);
initRWST3CM(s[8271]);
initRWST4CM(s[8272]);
initRWST5CM(s[8273]);
initRWST6CM(s[8274]);
initRWST7CM(s[8275]);
initRWST8CM(s[8276]);
initRWST9CM(s[8277]);
initRWST51CM(s[8278]);
initRWST52CM(s[8279]);
initRWST54CM(s[8280]);
initRWST55CM(s[8281]);
initRWST56CM(s[8282]);
initRWST85CM(s[8283]);
initRWSFF19(s[8284]);
initRWSFF20(s[8285]);
initRWSFF21(s[8286]);
initRWSFF22(s[8287]);
initRWSFF23(s[8288]);
initRWSFF24(s[8289]);
initRWSFF25(s[8290]);
initRWSFF26(s[8291]);
initRWSFF27(s[8292]);
initRWSFF97(s[8293]);
initRWANO3(s[8294]);
initRWJSY4(s[8295]);
initRWSE4(s[8296]);
initRWFT4(s[8297]);
initRWFTP4(s[8298]);
initRWPTF4(s[8299]);
initRWS4(s[8300]);
initRWSM4(s[8301]);
initRWSAN4(s[8302]);
initRWSAP4(s[8303]);
initRWSAS4(s[8304]);
initRWSAD4(s[8305]);
initRWSGN4(s[8306]);
initRWSTI4(s[8307]);
initRWEDY4(s[8308]);
initRWNX4(s[8309]);
initRWST1D(s[8310]);
initRWST2D(s[8311]);
initRWST3D(s[8312]);
initRWST4D(s[8313]);
initRWST5D(s[8314]);
initRWST6D(s[8315]);
initRWST7D(s[8316]);
initRWST8D(s[8317]);
initRWST9D(s[8318]);
initRWST95D(s[8319]);
initRWST1DM(s[8320]);
initRWST2DM(s[8321]);
initRWST3DM(s[8322]);
initRWST4DM(s[8323]);
initRWST5DM(s[8324]);
initRWST6DM(s[8325]);
initRWST7DM(s[8326]);
initRWST8DM(s[8327]);
initRWST9DM(s[8328]);
initRWST51DM(s[8329]);
initRWST52DM(s[8330]);
initRWST53DM(s[8331]);
initRWST54DM(s[8332]);
initRWST55DM(s[8333]);
initRWST56DM(s[8334]);
initRWST85DM(s[8335]);
initRWSFF28(s[8336]);
initRWSFF29(s[8337]);
initRWSFF30(s[8338]);
initRWSFF31(s[8339]);
initRWSFF32(s[8340]);
initRWSFF33(s[8341]);
initRWSFF34(s[8342]);
initRWSFF35(s[8343]);
initRWSFF36(s[8344]);
initRWSFF98(s[8345]);
initRWANO4(s[8346]);
initRWJSY5(s[8347]);
initRWSE5(s[8348]);
initRWFT5(s[8349]);
initRWFTP5(s[8350]);
initRWPTF5(s[8351]);
initRWS5(s[8352]);
initRWSM5(s[8353]);
initRWSAN5(s[8354]);
initRWSAP5(s[8355]);
initRWSAS5(s[8356]);
initRWSAD5(s[8357]);
initRWSGN5(s[8358]);
initRWSTI5(s[8359]);
initRWEDY5(s[8360]);
initRWNX5(s[8361]);
initRWST1E(s[8362]);
initRWST2E(s[8363]);
initRWST3E(s[8364]);
initRWST4E(s[8365]);
initRWST5E(s[8366]);
initRWST6E(s[8367]);
initRWST7E(s[8368]);
initRWST8E(s[8369]);
initRWST9E(s[8370]);
initRWST95E(s[8371]);
initRWST1EM(s[8372]);
initRWST2EM(s[8373]);
initRWST3EM(s[8374]);
initRWST4EM(s[8375]);
initRWST5EM(s[8376]);
initRWST6EM(s[8377]);
initRWST7EM(s[8378]);
initRWST8EM(s[8379]);
initRWST9EM(s[8380]);
initRWST52EM(s[8381]);
initRWST53EM(s[8382]);
initRWST55EM(s[8383]);
initRWST56EM(s[8384]);
initRWST85EM(s[8385]);
initRWSFF37(s[8386]);
initRWSFF38(s[8387]);
initRWSFF39(s[8388]);
initRWSFF40(s[8389]);
initRWSFF41(s[8390]);
initRWSFF42(s[8391]);
initRWSFF43(s[8392]);
initRWSFF44(s[8393]);
initRWSFF45(s[8394]);
initRWSFF99(s[8395]);
initRWANO5(s[8396]);
initRWJSY6(s[8397]);
initRWSE6(s[8398]);
initRWFT6(s[8399]);
initRWFTP6(s[8400]);
initRWPTF6(s[8401]);
initRWS6(s[8402]);
initRWSM6(s[8403]);
initRWSAN6(s[8404]);
initRWSAP6(s[8405]);
initRWSAS6(s[8406]);
initRWSAD6(s[8407]);
initRWSGN6(s[8408]);
initRWSTI6(s[8409]);
initRWEDY6(s[8410]);
initRWNX6(s[8411]);
initRWST1F(s[8412]);
initRWST2F(s[8413]);
initRWST3F(s[8414]);
initRWST4F(s[8415]);
initRWST5F(s[8416]);
initRWST6F(s[8417]);
initRWST7F(s[8418]);
initRWST8F(s[8419]);
initRWST9F(s[8420]);
initRWST95F(s[8421]);
initRWST1FM(s[8422]);
initRWST2FM(s[8423]);
initRWST3FM(s[8424]);
initRWST4FM(s[8425]);
initRWST5FM(s[8426]);
initRWST6FM(s[8427]);
initRWST7FM(s[8428]);
initRWST8FM(s[8429]);
initRWST9FM(s[8430]);
initRWST52FM(s[8431]);
initRWST53FM(s[8432]);
initRWST54FM(s[8433]);
initRWST56FM(s[8434]);
initRWST85FM(s[8435]);
initRWSFF46(s[8436]);
initRWSFF47(s[8437]);
initRWSFF48(s[8438]);
initRWSFF49(s[8439]);
initRWSFF50(s[8440]);
initRWSFF51(s[8441]);
initRWSFF52(s[8442]);
initRWSFF53(s[8443]);
initRWSFF54(s[8444]);
initRWSFF100(s[8445]);
initRWANO6(s[8446]);
initRWJSY7(s[8447]);
initRWSE7(s[8448]);
initRWFT7(s[8449]);
initRWFTP7(s[8450]);
initRWPTF7(s[8451]);
initRWS7(s[8452]);
initRWSM7(s[8453]);
initRWSAN7(s[8454]);
initRWSAP7(s[8455]);
initRWSAS7(s[8456]);
initRWSAD7(s[8457]);
initRWSGN7(s[8458]);
initRWSTI7(s[8459]);
initRWEDY7(s[8460]);
initRWNX7(s[8461]);
initRWST1G(s[8462]);
initRWST2G(s[8463]);
initRWST3G(s[8464]);
initRWST4G(s[8465]);
initRWST5G(s[8466]);
initRWST6G(s[8467]);
initRWST7G(s[8468]);
initRWST8G(s[8469]);
initRWST9G(s[8470]);
initRWST95G(s[8471]);
initRWST1GM(s[8472]);
initRWST2GM(s[8473]);
initRWST3GM(s[8474]);
initRWST4GM(s[8475]);
initRWST5GM(s[8476]);
initRWST6GM(s[8477]);
initRWST7GM(s[8478]);
initRWST8GM(s[8479]);
initRWST9GM(s[8480]);
initRWST52GM(s[8481]);
initRWST53GM(s[8482]);
initRWST55GM(s[8483]);
initRWST56GM(s[8484]);
initRWST85GM(s[8485]);
initRWSFF55(s[8486]);
initRWSFF56(s[8487]);
initRWSFF57(s[8488]);
initRWSFF58(s[8489]);
initRWSFF59(s[8490]);
initRWSFF60(s[8491]);
initRWSFF61(s[8492]);
initRWSFF62(s[8493]);
initRWSFF63(s[8494]);
initRWSFF101(s[8495]);
initRWANO7(s[8496]);
initRWJSY8(s[8497]);
initRWSE8(s[8498]);
initRWFT8(s[8499]);
initRWFTP8(s[8500]);
initRWPTF8(s[8501]);
initRWS8(s[8502]);
initRWSM8(s[8503]);
initRWSAN8(s[8504]);
initRWSAP8(s[8505]);
initRWSAS8(s[8506]);
initRWSAD8(s[8507]);
initRWSGN8(s[8508]);
initRWSTI8(s[8509]);
initRWEDY8(s[8510]);
initRWNX8(s[8511]);
initRWST1H(s[8512]);
initRWST2H(s[8513]);
initRWST3H(s[8514]);
initRWST4H(s[8515]);
initRWST5H(s[8516]);
initRWST6H(s[8517]);
initRWST7H(s[8518]);
initRWST8H(s[8519]);
initRWST9H(s[8520]);
initRWST95H(s[8521]);
initRWST1HM(s[8522]);
initRWST2HM(s[8523]);
initRWST3HM(s[8524]);
initRWST4HM(s[8525]);
initRWST5HM(s[8526]);
initRWST6HM(s[8527]);
initRWST7HM(s[8528]);
initRWST8HM(s[8529]);
initRWST9HM(s[8530]);
initRWST52HM(s[8531]);
initRWST85HM(s[8532]);
initRWSFF64(s[8533]);
initRWSFF65(s[8534]);
initRWSFF66(s[8535]);
initRWSFF67(s[8536]);
initRWSFF68(s[8537]);
initRWSFF69(s[8538]);
initRWSFF70(s[8539]);
initRWSFF71(s[8540]);
initRWSFF72(s[8541]);
initRWSFF102(s[8542]);
initRWANO8(s[8543]);
initRWJSY9(s[8544]);
initRWSE9(s[8545]);
initRWFT9(s[8546]);
initRWFTP9(s[8547]);
initRWPTF9(s[8548]);
initRWS9(s[8549]);
initRWSM9(s[8550]);
initRWSAN9(s[8551]);
initRWSAP9(s[8552]);
initRWSAS9(s[8553]);
initRWSAD9(s[8554]);
initRWSGN9(s[8555]);
initRWSTI9(s[8556]);
initRWEDY9(s[8557]);
initRWNX9(s[8558]);
initRWST1I(s[8559]);
initRWST2I(s[8560]);
initRWST3I(s[8561]);
initRWST4I(s[8562]);
initRWST5I(s[8563]);
initRWST6I(s[8564]);
initRWST7I(s[8565]);
initRWST8I(s[8566]);
initRWST9I(s[8567]);
initRWST95I(s[8568]);
initRWST1IM(s[8569]);
initRWST2IM(s[8570]);
initRWST3IM(s[8571]);
initRWST4IM(s[8572]);
initRWST5IM(s[8573]);
initRWST6IM(s[8574]);
initRWST7IM(s[8575]);
initRWST8IM(s[8576]);
initRWST9IM(s[8577]);
initRWST56IM(s[8578]);
initRWST85IM(s[8579]);
initRWSFF73(s[8580]);
initRWSFF74(s[8581]);
initRWSFF75(s[8582]);
initRWSFF76(s[8583]);
initRWSFF77(s[8584]);
initRWSFF78(s[8585]);
initRWSFF79(s[8586]);
initRWSFF80(s[8587]);
initRWSFF81(s[8588]);
initRWSFF103(s[8589]);
initRWANO9(s[8590]);
initRWJSY10(s[8591]);
initRWSE10(s[8592]);
initRWFT10(s[8593]);
initRWFTP10(s[8594]);
initRWPTF10(s[8595]);
initRWS10(s[8596]);
initRWSM10(s[8597]);
initRWSAN10(s[8598]);
initRWSAP10(s[8599]);
initRWSAS10(s[8600]);
initRWSAD10(s[8601]);
initRWSGN10(s[8602]);
initRWSTI10(s[8603]);
initRWEDY10(s[8604]);
initRWNX10(s[8605]);
initRWST1J(s[8606]);
initRWST2J(s[8607]);
initRWST3J(s[8608]);
initRWST4J(s[8609]);
initRWST5J(s[8610]);
initRWST6J(s[8611]);
initRWST7J(s[8612]);
initRWST8J(s[8613]);
initRWST9J(s[8614]);
initRWST95J(s[8615]);
initRWST1JM(s[8616]);
initRWST2JM(s[8617]);
initRWST3JM(s[8618]);
initRWST4JM(s[8619]);
initRWST5JM(s[8620]);
initRWST6JM(s[8621]);
initRWST7JM(s[8622]);
initRWST8JM(s[8623]);
initRWST9JM(s[8624]);
initRWST52JM(s[8625]);
initRWST85JM(s[8626]);
initRWSFF82(s[8627]);
initRWSFF83(s[8628]);
initRWSFF84(s[8629]);
initRWSFF85(s[8630]);
initRWSFF86(s[8631]);
initRWSFF87(s[8632]);
initRWSFF88(s[8633]);
initRWSFF89(s[8634]);
initRWSFF90(s[8635]);
initRWSFF104(s[8636]);
initRWANO10(s[8637]);
initRWJSY11(s[8638]);
initRWSE11(s[8639]);
initRWFT11(s[8640]);
initRWFTP11(s[8641]);
initRWPTF11(s[8642]);
initRWS11(s[8643]);
initRWSM11(s[8644]);
initRWSAN11(s[8645]);
initRWSAP11(s[8646]);
initRWSAS11(s[8647]);
initRWSAD11(s[8648]);
initRWSGN11(s[8649]);
initRWSTI11(s[8650]);
initRWEDY11(s[8651]);
initRWNX11(s[8652]);
initRWST1K(s[8653]);
initRWST2K(s[8654]);
initRWST3K(s[8655]);
initRWST4K(s[8656]);
initRWST5K(s[8657]);
initRWST6K(s[8658]);
initRWST7K(s[8659]);
initRWST8K(s[8660]);
initRWST9K(s[8661]);
initRWST95K(s[8662]);
initRWST1KM(s[8663]);
initRWST2KM(s[8664]);
initRWST3KM(s[8665]);
initRWST4KM(s[8666]);
initRWST5KM(s[8667]);
initRWST6KM(s[8668]);
initRWST7KM(s[8669]);
initRWST8KM(s[8670]);
initRWST9KM(s[8671]);
initRWST52KM(s[8672]);
initRWSFF91(s[8673]);
initRWSFF92(s[8674]);
initRWSFF93(s[8675]);
initRWSFF94(s[8676]);
initRWSFF105(s[8677]);
initRWSFF106(s[8678]);
initRWSFF107(s[8679]);
initRWSFF108(s[8680]);
initRWSFF109(s[8681]);
initRWSFF110(s[8682]);
initRWANO11(s[8683]);
initRWJSY12(s[8684]);
initRWSE12(s[8685]);
initRWFT12(s[8686]);
initRWFTP12(s[8687]);
initRWPTF12(s[8688]);
initRWS12(s[8689]);
initRWSM12(s[8690]);
initRWSAN12(s[8691]);
initRWSAP12(s[8692]);
initRWSAS12(s[8693]);
initRWSAD12(s[8694]);
initRWSGN12(s[8695]);
initRWSTI12(s[8696]);
initRWEDY12(s[8697]);
initRWNX12(s[8698]);
initRWST1L(s[8699]);
initRWST2L(s[8700]);
initRWST3L(s[8701]);
initRWST4L(s[8702]);
initRWST5L(s[8703]);
initRWST6L(s[8704]);
initRWST7L(s[8705]);
initRWST8L(s[8706]);
initRWST9L(s[8707]);
initRWST95L(s[8708]);
initRWSFF111(s[8709]);
initRWSFF112(s[8710]);
initRWSFF113(s[8711]);
initRWSFF114(s[8712]);
initRWSFF115(s[8713]);
initRWSFF116(s[8714]);
initRWSFF117(s[8715]);
initRWSFF118(s[8716]);
initRWSFF119(s[8717]);
initRWSFF120(s[8718]);
initRWANO12(s[8719]);
initRWJSY13(s[8720]);
initRWSE13(s[8721]);
initRWFT13(s[8722]);
initRWFTP13(s[8723]);
initRWPTF13(s[8724]);
initRWS13(s[8725]);
initRWSM13(s[8726]);
initRWSAN13(s[8727]);
initRWSAP13(s[8728]);
initRWSAS13(s[8729]);
initRWSAD13(s[8730]);
initRWSGN13(s[8731]);
initRWSTI13(s[8732]);
initRWEDY13(s[8733]);
initRWNX13(s[8734]);
initRWST1M(s[8735]);
initRWST2M(s[8736]);
initRWST3M(s[8737]);
initRWST4M(s[8738]);
initRWST5M(s[8739]);
initRWST6M(s[8740]);
initRWST7M(s[8741]);
initRWST8M(s[8742]);
initRWST9M(s[8743]);
initRWST95M(s[8744]);
initRWSFF121(s[8745]);
initRWSFF122(s[8746]);
initRWSFF123(s[8747]);
initRWSFF124(s[8748]);
initRWSFF125(s[8749]);
initRWSFF126(s[8750]);
initRWSFF127(s[8751]);
initRWSFF128(s[8752]);
initRWSFF129(s[8753]);
initRWSFF130(s[8754]);
initRWANO13(s[8755]);
initRWJSY14(s[8756]);
initRWSE14(s[8757]);
initRWFT14(s[8758]);
initRWFTP14(s[8759]);
initRWPTF14(s[8760]);
initRWS14(s[8761]);
initRWSM14(s[8762]);
initRWSAN14(s[8763]);
initRWSAP14(s[8764]);
initRWSAS14(s[8765]);
initRWSAD14(s[8766]);
initRWSGN14(s[8767]);
initRWSTI14(s[8768]);
initRWEDY14(s[8769]);
initRWNX14(s[8770]);
initRWST1N(s[8771]);
initRWST2N(s[8772]);
initRWST3N(s[8773]);
initRWST4N(s[8774]);
initRWST5N(s[8775]);
initRWST6N(s[8776]);
initRWST7N(s[8777]);
initRWST8N(s[8778]);
initRWST9N(s[8779]);
initRWST95N(s[8780]);
initRWSFF131(s[8781]);
initRWSFF132(s[8782]);
initRWSFF133(s[8783]);
initRWSFF134(s[8784]);
initRWSFF135(s[8785]);
initRWSFF136(s[8786]);
initRWSFF137(s[8787]);
initRWSFF138(s[8788]);
initRWSFF139(s[8789]);
initRWSFF140(s[8790]);
initRWANO14(s[8791]);
initRWJSY15(s[8792]);
initRWSE15(s[8793]);
initRWFT15(s[8794]);
initRWFTP15(s[8795]);
initRWPTF15(s[8796]);
initRWS15(s[8797]);
initRWSM15(s[8798]);
initRWSAN15(s[8799]);
initRWSAP15(s[8800]);
initRWSAS15(s[8801]);
initRWSAD15(s[8802]);
initRWSGN15(s[8803]);
initRWSTI15(s[8804]);
initRWEDY15(s[8805]);
initRWNX15(s[8806]);
initRWST1O(s[8807]);
initRWST2O(s[8808]);
initRWST3O(s[8809]);
initRWST4O(s[8810]);
initRWST5O(s[8811]);
initRWST6O(s[8812]);
initRWST7O(s[8813]);
initRWST8O(s[8814]);
initRWST9O(s[8815]);
initRWST95O(s[8816]);
initRWSFF141(s[8817]);
initRWSFF142(s[8818]);
initRWSFF143(s[8819]);
initRWSFF144(s[8820]);
initRWSFF145(s[8821]);
initRWSFF146(s[8822]);
initRWSFF147(s[8823]);
initRWSFF148(s[8824]);
initRWSFF149(s[8825]);
initRWSFF150(s[8826]);
initRWANO15(s[8827]);
initRWJSY16(s[8828]);
initRWSE16(s[8829]);
initRWFT16(s[8830]);
initRWFTP16(s[8831]);
initRWPTF16(s[8832]);
initRWS16(s[8833]);
initRWSM16(s[8834]);
initRWSAN16(s[8835]);
initRWSAP16(s[8836]);
initRWSAS16(s[8837]);
initRWSAD16(s[8838]);
initRWSGN16(s[8839]);
initRWSTI16(s[8840]);
initRWEDY16(s[8841]);
initRWNX16(s[8842]);
initRWST1P(s[8843]);
initRWST2P(s[8844]);
initRWST3P(s[8845]);
initRWST4P(s[8846]);
initRWST5P(s[8847]);
initRWST6P(s[8848]);
initRWST7P(s[8849]);
initRWST8P(s[8850]);
initRWST9P(s[8851]);
initRWST95P(s[8852]);
initRWSFF151(s[8853]);
initRWSFF152(s[8854]);
initRWSFF153(s[8855]);
initRWSFF154(s[8856]);
initRWSFF155(s[8857]);
initRWSFF156(s[8858]);
initRWSFF157(s[8859]);
initRWSFF158(s[8860]);
initRWSFF159(s[8861]);
initRWSFF160(s[8862]);
initRWANO16(s[8863]);
initRWJSY17(s[8864]);
initRWSE17(s[8865]);
initRWFT17(s[8866]);
initRWFTP17(s[8867]);
initRWPTF17(s[8868]);
initRWS17(s[8869]);
initRWSM17(s[8870]);
initRWSAN17(s[8871]);
initRWSAP17(s[8872]);
initRWSAS17(s[8873]);
initRWSAD17(s[8874]);
initRWSGN17(s[8875]);
initRWSTI17(s[8876]);
initRWEDY17(s[8877]);
initRWNX17(s[8878]);
initRWST1Q(s[8879]);
initRWST2Q(s[8880]);
initRWST3Q(s[8881]);
initRWST4Q(s[8882]);
initRWST5Q(s[8883]);
initRWST6Q(s[8884]);
initRWST7Q(s[8885]);
initRWST8Q(s[8886]);
initRWST9Q(s[8887]);
initRWST95Q(s[8888]);
initRWSFF161(s[8889]);
initRWSFF162(s[8890]);
initRWSFF163(s[8891]);
initRWSFF164(s[8892]);
initRWSFF165(s[8893]);
initRWSFF166(s[8894]);
initRWSFF167(s[8895]);
initRWSFF168(s[8896]);
initRWSFF169(s[8897]);
initRWSFF170(s[8898]);
initRWANO17(s[8899]);
initRWJSY18(s[8900]);
initRWSE18(s[8901]);
initRWFT18(s[8902]);
initRWFTP18(s[8903]);
initRWPTF18(s[8904]);
initRWS18(s[8905]);
initRWSM18(s[8906]);
initRWSAN18(s[8907]);
initRWSAP18(s[8908]);
initRWSAS18(s[8909]);
initRWSAD18(s[8910]);
initRWSGN18(s[8911]);
initRWSTI18(s[8912]);
initRWEDY18(s[8913]);
initRWNX18(s[8914]);
initRWST1R(s[8915]);
initRWST2R(s[8916]);
initRWST3R(s[8917]);
initRWST4R(s[8918]);
initRWST5R(s[8919]);
initRWST6R(s[8920]);
initRWST7R(s[8921]);
initRWST8R(s[8922]);
initRWST9R(s[8923]);
initRWST95R(s[8924]);
initRWSFF171(s[8925]);
initRWSFF172(s[8926]);
initRWSFF173(s[8927]);
initRWSFF174(s[8928]);
initRWSFF175(s[8929]);
initRWSFF176(s[8930]);
initRWSFF177(s[8931]);
initRWSFF178(s[8932]);
initRWSFF179(s[8933]);
initRWSFF180(s[8934]);
initRWANO18(s[8935]);
initRWJSY19(s[8936]);
initRWSE19(s[8937]);
initRWFT19(s[8938]);
initRWFTP19(s[8939]);
initRWPTF19(s[8940]);
initRWS19(s[8941]);
initRWSM19(s[8942]);
initRWSAN19(s[8943]);
initRWSAP19(s[8944]);
initRWSAS19(s[8945]);
initRWSAD19(s[8946]);
initRWSGN19(s[8947]);
initRWSTI19(s[8948]);
initRWEDY19(s[8949]);
initRWNX19(s[8950]);
initRWST1S(s[8951]);
initRWST2S(s[8952]);
initRWST3S(s[8953]);
initRWST4S(s[8954]);
initRWST5S(s[8955]);
initRWST6S(s[8956]);
initRWST7S(s[8957]);
initRWST8S(s[8958]);
initRWST9S(s[8959]);
initRWST95S(s[8960]);
initRWSFF181(s[8961]);
initRWSFF182(s[8962]);
initRWSFF183(s[8963]);
initRWSFF184(s[8964]);
initRWSFF185(s[8965]);
initRWSFF186(s[8966]);
initRWSFF187(s[8967]);
initRWSFF188(s[8968]);
initRWSFF189(s[8969]);
initRWSFF190(s[8970]);
initRWANO19(s[8971]);
initRWJSY20(s[8972]);
initRWSE20(s[8973]);
initRWFT20(s[8974]);
initRWFTP20(s[8975]);
initRWPTF20(s[8976]);
initRWS20(s[8977]);
initRWSM20(s[8978]);
initRWSAN20(s[8979]);
initRWSAP20(s[8980]);
initRWSAS20(s[8981]);
initRWSAD20(s[8982]);
initRWSGN20(s[8983]);
initRWSTI20(s[8984]);
initRWEDY20(s[8985]);
initRWNX20(s[8986]);
initRWST1T(s[8987]);
initRWST2T(s[8988]);
initRWST3T(s[8989]);
initRWST4T(s[8990]);
initRWST5T(s[8991]);
initRWST6T(s[8992]);
initRWST7T(s[8993]);
initRWST8T(s[8994]);
initRWST9T(s[8995]);
initRWST95T(s[8996]);
initRWSFF191(s[8997]);
initRWSFF192(s[8998]);
initRWSFF193(s[8999]);
}
public void init_9000_9435(String line) {
initRWSFF194(s[9000]);
initRWSFF195(s[9001]);
initRWSFF196(s[9002]);
initRWSFF197(s[9003]);
initRWSFF198(s[9004]);
initRWSFF199(s[9005]);
initRWSFF200(s[9006]);
initRWANO20(s[9007]);
initRWLJO(s[9008]);
initRWSF(s[9009]);
initRWSFM(s[9010]);
initRWSFN(s[9011]);
initRWSFP(s[9012]);
initRWSFS(s[9013]);
initRWSFD(s[9014]);
initRWSFG(s[9015]);
initRWILL(s[9016]);
initRWILX1(s[9017]);
initRWILX2(s[9018]);
initRWILX3(s[9019]);
initRWILX4(s[9020]);
initRWILX5(s[9021]);
initRWILX6(s[9022]);
initRWILX7(s[9023]);
initRWILX8(s[9024]);
initRWILX9(s[9025]);
initRWILX10(s[9026]);
initRWILX11(s[9027]);
initRWILX12(s[9028]);
initRWILX13(s[9029]);
initRWILX14(s[9030]);
initRWILX15(s[9031]);
initRWILX16(s[9032]);
initRWILX17(s[9033]);
initRWILX18(s[9034]);
initRWILX19(s[9035]);
initRWILX20(s[9036]);
initRWBUS(s[9037]);
initRWBUX1(s[9038]);
initRWBUX2(s[9039]);
initRWBUX3(s[9040]);
initRWBUX4(s[9041]);
initRWBUX5(s[9042]);
initRWBUX6(s[9043]);
initRWBUX7(s[9044]);
initRWBUX8(s[9045]);
initRWBUX9(s[9046]);
initRWBUX10(s[9047]);
initRWBUX11(s[9048]);
initRWBUX12(s[9049]);
initRWBUX13(s[9050]);
initRWBUX14(s[9051]);
initRWBUX15(s[9052]);
initRWBUX16(s[9053]);
initRWBUX17(s[9054]);
initRWBUX18(s[9055]);
initRWBUX19(s[9056]);
initRWBUX20(s[9057]);
initRHINJ(s[9058]);
initRHINA(s[9059]);
initRHCIA(s[9060]);
initRHCIB(s[9061]);
initRHCIC(s[9062]);
initRHCID(s[9063]);
initRHCIE(s[9064]);
initRHCIF(s[9065]);
initRHCIG1(s[9066]);
initRHCIG2(s[9067]);
initRHCIG3(s[9068]);
initRHCIG4(s[9069]);
initRHCIG5(s[9070]);
initRHCIG6(s[9071]);
initRHCIG7(s[9072]);
initRHCIG8(s[9073]);
initRHCIG9(s[9074]);
initRHCIG10(s[9075]);
initRHCIG11(s[9076]);
initRHCIG12(s[9077]);
initRHCIG13(s[9078]);
initRHCIG14(s[9079]);
initRHCIG95(s[9080]);
initRHCIG96(s[9081]);
initRHCIG1M(s[9082]);
initRHCIG2M(s[9083]);
initRHCIG3M(s[9084]);
initRHCIG4M(s[9085]);
initRHCIG5M(s[9086]);
initRHCIG6M(s[9087]);
initRHCIG7M(s[9088]);
initRHCIG8M(s[9089]);
initRHCIG9M(s[9090]);
initRHCIG10M(s[9091]);
initRHCIG11M(s[9092]);
initRHCIG12M(s[9093]);
initRHCIG13M(s[9094]);
initRHCIG14M(s[9095]);
initRHCIG51M(s[9096]);
initRHCIG52M(s[9097]);
initRHCIG53M(s[9098]);
initRHCIG54M(s[9099]);
initRHCIG55M(s[9100]);
initRHCIG56M(s[9101]);
initRHCIG57M(s[9102]);
initRHCIG85M(s[9103]);
initRHCIG86M(s[9104]);
initRHCCYA(s[9105]);
initRHCCYB(s[9106]);
initRHCCYC(s[9107]);
initRHCCLC(s[9108]);
initRHCCYD(s[9109]);
initRHCCLD(s[9110]);
initRHCCYE(s[9111]);
initRHCCLE(s[9112]);
initRHCCYF(s[9113]);
initRHCCLF(s[9114]);
initRHCCYG(s[9115]);
initRHCCLG(s[9116]);
initRHCCYH(s[9117]);
initRHCCLH(s[9118]);
initRHCCYJ(s[9119]);
initRHCCLJ(s[9120]);
initRHCCYK(s[9121]);
initRHCCYL(s[9122]);
initRHCCYM(s[9123]);
initRHCCYN(s[9124]);
initRHCCYP(s[9125]);
initRHCCYQ(s[9126]);
initRHPBB(s[9127]);
initRHPBC1(s[9128]);
initRHPBC2(s[9129]);
initRHPBC3(s[9130]);
initRHPBC4(s[9131]);
initRHPBC5(s[9132]);
initRHPBC6(s[9133]);
initRHPBC7(s[9134]);
initRHPBC8(s[9135]);
initRHPBC9(s[9136]);
initRHPBC10(s[9137]);
initRHPBC96(s[9138]);
initRHPBX1(s[9139]);
initRHPBX2(s[9140]);
initRHPBX3(s[9141]);
initRHPBX4(s[9142]);
initRHPBX5(s[9143]);
initRHPBX6(s[9144]);
initRHPBX7(s[9145]);
initRHPBX8(s[9146]);
initRHPBX95(s[9147]);
initRHPBX96(s[9148]);
initRHPBX1M(s[9149]);
initRHPBX2M(s[9150]);
initRHPBX3M(s[9151]);
initRHPBX4M(s[9152]);
initRHPBX5M(s[9153]);
initRHPBX6M(s[9154]);
initRHPBX7M(s[9155]);
initRHPBX8M(s[9156]);
initRHPBX51M(s[9157]);
initRHPBX52M(s[9158]);
initRHPBX53M(s[9159]);
initRHPBX54M(s[9160]);
initRHPBX55M(s[9161]);
initRHPBX56M(s[9162]);
initRHPBX57M(s[9163]);
initRHPBX85M(s[9164]);
initRHPBX86M(s[9165]);
initRHPBD1(s[9166]);
initRHPBD2(s[9167]);
initRHPBD3(s[9168]);
initRHPBD4(s[9169]);
initRHPBD5(s[9170]);
initRHPBD6(s[9171]);
initRHPBD7(s[9172]);
initRHPBD8(s[9173]);
initRHPBD9(s[9174]);
initRHPBE1(s[9175]);
initRHPBE2(s[9176]);
initRHPBE3(s[9177]);
initRHPBE4(s[9178]);
initRHPBE5(s[9179]);
initRHPBE6(s[9180]);
initRHPBE7(s[9181]);
initRHPBE95(s[9182]);
initRHPBE96(s[9183]);
initRHPBE1M(s[9184]);
initRHPBE2M(s[9185]);
initRHPBE3M(s[9186]);
initRHPBE4M(s[9187]);
initRHPBE5M(s[9188]);
initRHPBE6M(s[9189]);
initRHPBE7M(s[9190]);
initRHPBE51M(s[9191]);
initRHPBE52M(s[9192]);
initRHPBE85M(s[9193]);
initRHPBE86M(s[9194]);
initRHSMK(s[9195]);
initRHSMF(s[9196]);
initRHSMA(s[9197]);
initRHSKA(s[9198]);
initRHSML(s[9199]);
initRHSMB(s[9200]);
initRHSMS(s[9201]);
initRHSMX(s[9202]);
initRHSMY(s[9203]);
initRHSMT1(s[9204]);
initRHSMT2(s[9205]);
initRHSMT3(s[9206]);
initRHSMT4(s[9207]);
initRHSMT5(s[9208]);
initRHSMT6(s[9209]);
initRHSMT7(s[9210]);
initRHSMT8(s[9211]);
initRHSMT96(s[9212]);
initRHMEN(s[9213]);
initRHMEB(s[9214]);
initRHHYE(s[9215]);
initRHHYY(s[9216]);
initRHOVE(s[9217]);
initRHOVY(s[9218]);
initRHPEY(s[9219]);
initRHPEE(s[9220]);
initRHPER(s[9221]);
initRHPERC(s[9222]);
initRHHRT(s[9223]);
initRHHFY(s[9224]);
initRHHPS(s[9225]);
initRHHPY(s[9226]);
initRHHNO(s[9227]);
initRHHST(s[9228]);
initROIMP(s[9229]);
initROOTY(s[9230]);
initROIMP2(s[9231]);
initROOTY2(s[9232]);
initROIMP3(s[9233]);
initROOTY3(s[9234]);
initROSC(s[9235]);
initRSMLET(s[9236]);
initRSMCOLD(s[9237]);
initRSMUNDER(s[9238]);
initRSMDICDE(s[9239]);
initRSMNOTWA(s[9240]);
initRSMDEPEN(s[9241]);
initRSMOVERP(s[9242]);
initRSMNATUR(s[9243]);
initRSFLET(s[9244]);
initRSFCOLD(s[9245]);
initRSFUNDER(s[9246]);
initRSFDECID(s[9247]);
initRSFNOTWA(s[9248]);
initRSFDEPEN(s[9249]);
initRSFOVERP(s[9250]);
initRSFNATUR(s[9251]);
initRSDISAS(s[9252]);
initRSDISASY(s[9253]);
initRSILL(s[9254]);
initRSILLY(s[9255]);
initRSATTAC(s[9256]);
initRSATTACY(s[9257]);
initRSSEXAS(s[9258]);
initRSSEXASY(s[9259]);
initRSUNEMP(s[9260]);
initRSUNEMPY(s[9261]);
initRSARGUE(s[9262]);
initRSARGUEY(s[9263]);
initRSDRINK(s[9264]);
initRSDRINKY(s[9265]);
initRSABUSE(s[9266]);
initRSABUSEY(s[9267]);
initRSADDIC(s[9268]);
initRSADDICY(s[9269]);
initRSFIRED(s[9270]);
initRSFIREDY(s[9271]);
initRSWITWR(s[9272]);
initRSWITRY(s[9273]);
initRSWITKL(s[9274]);
initRSWITKLY(s[9275]);
initRSLOSWR(s[9276]);
initRSLOSWRY(s[9277]);
initRSRISKF(s[9278]);
initRSRISKFY(s[9279]);
initRSCARE(s[9280]);
initRSCAREY(s[9281]);
initRSFINAN(s[9282]);
initRSFINANY(s[9283]);
initACCUR(s[9284]);
initALONE(s[9285]);
initRCRELCH(s[9286]);
initRCRELCH2(s[9287]);
initRCRELCH3(s[9288]);
initRCRELCH4(s[9289]);
initRCRELCH5(s[9290]);
initRCRELCH6(s[9291]);
initRCRELCH7(s[9292]);
initRCRELCH8(s[9293]);
initRCRELCH9(s[9294]);
initRCRELC10(s[9295]);
initRCRELC11(s[9296]);
initRCRELC12(s[9297]);
initRCRELC13(s[9298]);
initRCCHSEX(s[9299]);
initRCCHSEX2(s[9300]);
initRCCHSEX3(s[9301]);
initRCCHSEX4(s[9302]);
initRCCHSEX5(s[9303]);
initRCCHSEX6(s[9304]);
initRCCHSEX7(s[9305]);
initRCCHSEX8(s[9306]);
initRCCHSEX9(s[9307]);
initRCCHSX10(s[9308]);
initRCCHSX11(s[9309]);
initRCCHSX12(s[9310]);
initRCCHSX13(s[9311]);
initRCCHDYR(s[9312]);
initRCCHDYR2(s[9313]);
initRCCHDYR3(s[9314]);
initRCCHDYR4(s[9315]);
initRCCHDYR5(s[9316]);
initRCCHDYR6(s[9317]);
initRCCHDYR7(s[9318]);
initRCCHDYR8(s[9319]);
initRCCHDYR9(s[9320]);
initRCCHDY10(s[9321]);
initRCCHDY11(s[9322]);
initRCCHDY12(s[9323]);
initRCCHDY13(s[9324]);
initRPMARST(s[9325]);
initRPMARST2(s[9326]);
initRPMARST3(s[9327]);
initRPMARST4(s[9328]);
initRPMARST5(s[9329]);
initRPMARST6(s[9330]);
initRPMARST7(s[9331]);
initRPYRMA(s[9332]);
initRPYRMA2(s[9333]);
initRPYRMA3(s[9334]);
initRPYRMA4(s[9335]);
initRPYRMA5(s[9336]);
initRPYRMA6(s[9337]);
initRPYRMA7(s[9338]);
initRALOOP10(s[9339]);
initRASTLYR(s[9340]);
initRASTLYR2(s[9341]);
initRASTLYR3(s[9342]);
initRASTLYR4(s[9343]);
initRASTLYR5(s[9344]);
initRASTLYR6(s[9345]);
initRASTLYR7(s[9346]);
initRASTLYR8(s[9347]);
initRASTLYR9(s[9348]);
initRASTLY10(s[9349]);
initRASTLY11(s[9350]);
initRASTLY12(s[9351]);
initRASTLY13(s[9352]);
initRASTLY14(s[9353]);
initRASTLY15(s[9354]);
initRASTLY16(s[9355]);
initRASTLY17(s[9356]);
initRASTLY18(s[9357]);
initRASTLY19(s[9358]);
initRASTLY20(s[9359]);
initRWAGELE(s[9360]);
initRWJSTYR(s[9361]);
initRWJSTYR2(s[9362]);
initRWJSTYR3(s[9363]);
initRWJSTYR4(s[9364]);
initRWJSTYR5(s[9365]);
initRWJSTYR6(s[9366]);
initRWJSTYR7(s[9367]);
initRWJSTYR8(s[9368]);
initRWJSTYR9(s[9369]);
initRWJSTY10(s[9370]);
initRWJSTY11(s[9371]);
initRWJSTY12(s[9372]);
initRWJSTY13(s[9373]);
initRWJSTY14(s[9374]);
initRWJSTY15(s[9375]);
initRWJSTY16(s[9376]);
initRWJSTY17(s[9377]);
initRWJSTY18(s[9378]);
initRWJSTY19(s[9379]);
initRWJSTY20(s[9380]);
initIDAHH(s[9381]);
initMSTAT(s[9382]);
initMID(s[9383]);
initHOMSAM(s[9384]);
initHOMEXT(s[9385]);
initHOMEXTA(s[9386]);
initHOMEXTL(s[9387]);
initHOMEXTU(s[9388]);
initHOMEXTE(s[9389]);
initHOMEXTR(s[9390]);
initHOMUSEHE(s[9391]);
initHOMUSEHI(s[9392]);
initHOMUSECP(s[9393]);
initHOMUSEOC(s[9394]);
initHOMUSEOT(s[9395]);
initHOMUMHE(s[9396]);
initHOMUMHI(s[9397]);
initHOMUMCP(s[9398]);
initHOMUMOC(s[9399]);
initHOMUM85(s[9400]);
initHOMUM86(s[9401]);
initHOMREA(s[9402]);
initHOMTY(s[9403]);
initHORMO(s[9404]);
initHOMFV(s[9405]);
initHOVML(s[9406]);
initHOVMLL(s[9407]);
initHOVMLU(s[9408]);
initHOVMLE(s[9409]);
initHOVMLR(s[9410]);
initHOVE(s[9411]);
initHOVEL(s[9412]);
initHOVEU(s[9413]);
initHOVEE(s[9414]);
initHOVER(s[9415]);
initHOYML(s[9416]);
initHOMNUSHE(s[9417]);
initHOMNUSHI(s[9418]);
initHOMNUSCP(s[9419]);
initHOMNUSOC(s[9420]);
initHOMNUS95(s[9421]);
initHOMNUS96(s[9422]);
initHOMNUMHE(s[9423]);
initHOMNUMHI(s[9424]);
initHOMNUMCP(s[9425]);
initHOMNUMOC(s[9426]);
initHOMNUM85(s[9427]);
initHOMNUM86(s[9428]);
initHOMNUM96(s[9429]);
initHOMNREA(s[9430]);
initHOMNEWA(s[9431]);
initHOMNEWL(s[9432]);
initHOMNEWU(s[9433]);
initHOMNEWE(s[9434]);
initHOMNEWR(s[9435]);
}
}
