/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.elsa.process.ELSA_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.elsa.data.generated;
public class ELSA_Wave4_Record extends ELSA_Waves1To8_Record {
protected double ADDPEN_08;
protected double ADDPEN_SPA;
protected double AIRTEMP;
protected byte ALLADCH;
protected byte ALLFSCH;
protected byte ALLNATCH;
protected byte ALLSPCH;
protected byte ALLTOTCH;
protected byte ANYREMOR;
protected byte ASKINST;
protected boolean ASKPX;
protected byte BLOODR;
protected double BMI;
protected byte BMIOBE;
protected byte BMIOK;
protected double BMIVAL;
protected byte BPCONST;
protected byte BPRESPC;
protected byte BRETHS;
protected byte BSOUTC;
protected double BSP_08;
protected double BSP_SPA;
protected byte BSWILL;
protected byte CARERS_P_F;
protected double CARERS_P_I;
protected short CARERS_P_O;
protected short CARERS_P_T;
protected byte CARERS_R_F;
protected double CARERS_R_I;
protected short CARERS_R_O;
protected short CARERS_R_T;
protected byte CASP19;
protected byte CASPAUT;
protected byte CASPCTL;
protected byte CASPPLE;
protected byte CASPSR;
protected byte CFANI;
protected byte CFANIG;
protected double CFIB;
protected byte CFLETEN;
protected byte CFMEM;
protected byte CFMEMS;
protected byte CFMERSP;
protected byte CFMETM;
protected byte CFMETMT;
protected byte CFMSCR;
protected byte CFPASCR;
protected byte CFPRMEM;
protected byte CFPROM;
protected double CFRECAL;
protected byte CFSUMA;
protected byte CFSUMB;
protected byte CFSUMC;
protected byte CFSUMD;
protected byte CFSUME;
protected byte CFSUMF;
protected byte CFWHM85;
protected byte CFWHM86;
protected byte CFWHMALC;
protected byte CFWHMCON;
protected byte CFWHMDIS;
protected byte CFWHMENG;
protected byte CFWHMEYE;
protected byte CFWHMHEA;
protected byte CFWHMILL;
protected byte CFWHMLAP;
protected byte CFWHMMEM;
protected byte CFWHMMEN;
protected byte CFWHMNER;
protected byte CFWHMNOI;
protected byte CFWHMREF;
protected byte CFWHMTIR;
protected byte CFWHMUPS;
protected byte CFWHOAD;
protected byte CFWHOCHI;
protected byte CFWHONON;
protected byte CFWHOOTH;
protected byte CFWHOPAR;
protected byte CFWHT95;
protected byte CFWHTALC;
protected byte CFWHTCON;
protected byte CFWHTDIS;
protected byte CFWHTENG;
protected byte CFWHTEYE;
protected byte CFWHTHEA;
protected byte CFWHTILL;
protected byte CFWHTLAP;
protected byte CFWHTMEM;
protected byte CFWHTMEN;
protected byte CFWHTNER;
protected byte CFWHTNOI;
protected byte CFWHTREF;
protected byte CFWHTTIR;
protected byte CFWHTUPS;
protected byte CHESTINF;
protected byte CHIADP;
protected byte CHIFST;
protected byte CHINAT;
protected byte CHINHH;
protected byte CHISTP;
protected byte CHITOT;
protected byte CHOADP;
protected byte CHOFST;
protected double CHOL;
protected byte CHONAT;
protected byte CHOSTP;
protected byte CHOTOT;
protected byte CLOTB;
protected boolean CONCUR;
protected byte CONFAGE;
protected byte CONSUBDR;
protected byte CONSUBEA;
protected byte CONSUBEX;
protected byte CONSUBNO;
protected byte CONSUBSM;
protected byte CTC_P_F;
protected double CTC_P_I;
protected short CTC_P_O;
protected short CTC_P_T;
protected byte CTC_R_F;
protected double CTC_R_I;
protected short CTC_R_O;
protected short CTC_R_T;
protected byte CUFFSIZE;
protected double CURRENTDB_08;
protected double CURRENTDB_SPA;
protected double CURRENTDC_08;
protected double CURRENTDC_SPA;
protected byte CVD7DIBT;
protected byte CVD7DIEBP;
protected byte DCURPEN;
protected byte DDBDC;
protected byte DEMPPEN;
protected byte DHC14;
protected byte DHC15;
protected byte DHC16;
protected byte DHCAG14;
protected byte DHCAG15;
protected byte DHCAG16;
protected byte DHCR08;
protected byte DHCR09;
protected byte DHCR10;
protected boolean DHCR104;
protected boolean DHCR105;
protected boolean DHCR106;
protected boolean DHCR107;
protected boolean DHCR108;
protected boolean DHCR109;
protected byte DHCR11;
protected boolean DHCR110;
protected boolean DHCR111;
protected boolean DHCR112;
protected byte DHCR118;
protected boolean DHCR119;
protected boolean DHCR12;
protected boolean DHCR120;
protected boolean DHCR121;
protected boolean DHCR122;
protected boolean DHCR123;
protected boolean DHCR124;
protected boolean DHCR125;
protected boolean DHCR126;
protected boolean DHCR127;
protected boolean DHCR128;
protected boolean DHCR13;
protected byte DHCR134;
protected boolean DHCR135;
protected boolean DHCR136;
protected boolean DHCR137;
protected boolean DHCR138;
protected boolean DHCR139;
protected boolean DHCR14;
protected boolean DHCR140;
protected boolean DHCR141;
protected boolean DHCR142;
protected boolean DHCR143;
protected boolean DHCR144;
protected byte DHCR147;
protected boolean DHCR148;
protected boolean DHCR149;
protected boolean DHCR15;
protected byte DHCR150;
protected boolean DHCR151;
protected boolean DHCR152;
protected boolean DHCR153;
protected boolean DHCR154;
protected boolean DHCR155;
protected boolean DHCR156;
protected boolean DHCR157;
protected boolean DHCR158;
protected boolean DHCR159;
protected boolean DHCR16;
protected boolean DHCR160;
protected boolean DHCR163;
protected boolean DHCR164;
protected boolean DHCR165;
protected byte DHCR166;
protected boolean DHCR167;
protected boolean DHCR168;
protected boolean DHCR169;
protected boolean DHCR170;
protected boolean DHCR171;
protected boolean DHCR172;
protected boolean DHCR173;
protected boolean DHCR174;
protected boolean DHCR175;
protected boolean DHCR176;
protected byte DHCR178;
protected boolean DHCR179;
protected boolean DHCR180;
protected boolean DHCR181;
protected boolean DHCR182;
protected boolean DHCR183;
protected boolean DHCR184;
protected boolean DHCR185;
protected boolean DHCR186;
protected boolean DHCR187;
protected boolean DHCR188;
protected boolean DHCR189;
protected boolean DHCR190;
protected boolean DHCR191;
protected boolean DHCR192;
protected byte DHCR194;
protected boolean DHCR195;
protected boolean DHCR196;
protected boolean DHCR197;
protected boolean DHCR198;
protected boolean DHCR199;
protected boolean DHCR200;
protected boolean DHCR201;
protected boolean DHCR202;
protected boolean DHCR203;
protected boolean DHCR204;
protected boolean DHCR205;
protected boolean DHCR206;
protected boolean DHCR207;
protected boolean DHCR208;
protected byte DHCR209;
protected byte DHCR210;
protected boolean DHCR211;
protected boolean DHCR212;
protected boolean DHCR213;
protected boolean DHCR214;
protected boolean DHCR215;
protected boolean DHCR216;
protected boolean DHCR217;
protected boolean DHCR218;
protected boolean DHCR219;
protected boolean DHCR220;
protected boolean DHCR221;
protected boolean DHCR222;
protected boolean DHCR223;
protected boolean DHCR224;
protected byte DHCR225;
protected boolean DHCR226;
protected boolean DHCR227;
protected boolean DHCR228;
protected boolean DHCR229;
protected boolean DHCR230;
protected boolean DHCR231;
protected boolean DHCR232;
protected boolean DHCR233;
protected boolean DHCR234;
protected boolean DHCR235;
protected boolean DHCR236;
protected boolean DHCR237;
protected boolean DHCR238;
protected boolean DHCR239;
protected byte DHCR24;
protected boolean DHCR240;
protected byte DHCR241;
protected boolean DHCR242;
protected boolean DHCR243;
protected boolean DHCR244;
protected boolean DHCR245;
protected boolean DHCR246;
protected boolean DHCR247;
protected boolean DHCR248;
protected boolean DHCR249;
protected byte DHCR25;
protected boolean DHCR250;
protected boolean DHCR251;
protected boolean DHCR252;
protected boolean DHCR253;
protected boolean DHCR254;
protected boolean DHCR255;
protected boolean DHCR256;
protected byte DHCR26;
protected byte DHCR27;
protected boolean DHCR28;
protected boolean DHCR29;
protected boolean DHCR30;
protected boolean DHCR31;
protected boolean DHCR32;
protected byte DHCR40;
protected byte DHCR41;
protected byte DHCR42;
protected byte DHCR43;
protected boolean DHCR44;
protected boolean DHCR45;
protected boolean DHCR46;
protected boolean DHCR47;
protected boolean DHCR48;
protected byte DHCR56;
protected byte DHCR57;
protected byte DHCR58;
protected boolean DHCR59;
protected boolean DHCR60;
protected boolean DHCR61;
protected boolean DHCR62;
protected boolean DHCR63;
protected boolean DHCR64;
protected byte DHCR72;
protected byte DHCR73;
protected byte DHCR74;
protected boolean DHCR75;
protected boolean DHCR76;
protected boolean DHCR77;
protected boolean DHCR78;
protected boolean DHCR79;
protected boolean DHCR80;
protected boolean DHCR88;
protected boolean DHCR89;
protected boolean DHCR90;
protected boolean DHCR91;
protected boolean DHCR92;
protected boolean DHCR93;
protected boolean DHCR94;
protected boolean DHCR95;
protected boolean DHCR96;
protected byte DHCS14;
protected byte DHCS15;
protected byte DHCS16;
protected byte DHDOBC;
protected byte DHDOBC10;
protected boolean DHDOBC11;
protected boolean DHDOBC12;
protected boolean DHDOBC13;
protected boolean DHDOBC14;
protected boolean DHDOBC15;
protected byte DHDOBC16;
protected byte DHDOBC2;
protected byte DHDOBC3;
protected byte DHDOBC4;
protected byte DHDOBC5;
protected byte DHDOBC6;
protected byte DHDOBC7;
protected byte DHDOBC8;
protected byte DHDOBC9;
protected byte DHEACD;
protected double DHEAS;
protected boolean DHEHNO;
protected boolean DHEMEB;
protected byte DHEMEN;
protected boolean DHEPEE;
protected byte DHESKA;
protected byte DHESMK;
protected byte DHIASEP;
protected byte DHPA10;
protected byte DHPA11;
protected byte DHPA12;
protected byte DHPA13;
protected byte DHPA14;
protected byte DHPA15;
protected byte DHPA16;
protected byte DHPA2;
protected byte DHPA3;
protected byte DHPA4;
protected byte DHPA5;
protected byte DHPA6;
protected byte DHPA7;
protected byte DHPA8;
protected byte DHPA9;
protected byte DHPB10;
protected byte DHPB11;
protected byte DHPB12;
protected byte DHPB13;
protected byte DHPB14;
protected byte DHPB15;
protected byte DHPB16;
protected byte DHPB2;
protected byte DHPB3;
protected byte DHPB4;
protected byte DHPB5;
protected byte DHPB6;
protected byte DHPB7;
protected byte DHPB8;
protected byte DHPB9;
protected byte DHR13;
protected byte DHR14;
protected byte DHR15;
protected boolean DHR16;
protected boolean DHSEX;
protected byte DHWORK;
protected byte DIAGR;
protected short DIAS1;
protected short DIAS2;
protected short DIAS3;
protected double DIAVAL;
protected byte DIBPCOT;
protected short DIDBNY;
protected byte DIDOB;
protected byte DIFBPCCU;
protected byte DIFBPCEQ;
protected byte DIFBPCER;
protected byte DIFBPCLE;
protected byte DIFBPCNO;
protected byte DIFBPCUP;
protected byte DIFJOBD;
protected byte DIGNMYC;
protected byte DIGNMYD;
protected byte DIKLIVC;
protected byte DIKLIVD;
protected byte DIMAR;
protected byte DISEX;
protected byte DISEXC;
protected byte DISIBC;
protected byte DISIBD;
protected short DOBYEAR;
protected byte EHTCH;
protected byte EHTFT;
protected byte EHTIN;
protected double EHTM;
protected byte ERCAA;
protected byte ERCABCH;
protected byte ERCABFR;
protected byte ERCABGC;
protected byte ERCABOR;
protected byte ERCABOT;
protected byte ERCABPA;
protected byte ERCABPL;
protected byte ERCABSP;
protected short ERCAC;
protected byte ERCADP1;
protected byte ERCADP10;
protected byte ERCADP11;
protected byte ERCADP12;
protected byte ERCADP13;
protected byte ERCADP14;
protected byte ERCADP15;
protected byte ERCADP16;
protected byte ERCADP2;
protected byte ERCADP3;
protected byte ERCADP4;
protected byte ERCADP5;
protected byte ERCADP6;
protected byte ERCADP7;
protected byte ERCADP8;
protected byte ERCADP9;
protected byte ERCALIVE;
protected byte ERCAM85;
protected byte ERCAM86;
protected byte ERCAMCH;
protected byte ERCAMFR;
protected byte ERCAMGC;
protected byte ERCAMOR;
protected byte ERCAMOT;
protected byte ERCAMPA;
protected byte ERCAMPL;
protected byte ERCAMSP;
protected byte ERCANCH;
protected byte ERCANFR;
protected byte ERCANGC;
protected byte ERCANOR;
protected byte ERCANOT;
protected byte ERCANPA;
protected byte ERCANPL;
protected boolean ERCANSP;
protected byte ERCANTT;
protected byte ERCARA;
protected byte ERCARB;
protected byte ERFVOFT;
protected byte ERFVOL;
protected byte ERFVOL96;
protected byte ERFVOLBE;
protected byte ERFVOLCA;
protected byte ERFVOLED;
protected byte ERFVOLIN;
protected byte ERFVOLLE;
protected byte ERFVOLMO;
protected byte ERFVOLOR;
protected byte ERFVOLPR;
protected byte ERFVOLRE;
protected byte ERFVOLSE;
protected byte ERFVOLTR;
protected byte ERFVOLVI;
protected byte ERIVOFT;
protected byte ERIVOL1;
protected byte ERIVOL96;
protected byte ERLVOLBA;
protected byte ERLVOLCO;
protected byte ERLVOLDE;
protected byte ERLVOLPE;
protected byte ERLVOLPR;
protected byte ERLVOLRE;
protected byte ERLVOLSH;
protected byte ERLVOLTR;
protected byte ERLVOLWR;
protected byte ERMOCAC;
protected byte ERMOCFI;
protected byte ERMOCMO;
protected byte ERMOCNE;
protected byte ERMOCNJ;
protected byte ERMOCOB;
protected byte ERMOCOT;
protected byte ERMOCSK;
protected byte ERMOCSO;
protected byte ERMOCUS;
protected byte ERMOV96;
protected byte ERMOVAC;
protected byte ERMOVFI;
protected byte ERMOVNE;
protected byte ERMOVNJ;
protected byte ERMOVOB;
protected byte ERMOVSK;
protected byte ERMOVSO;
protected byte ERMOVUS;
protected byte ERRESBK;
protected byte ERRESCK;
protected byte ERRESER9;
protected byte ERRESERB;
protected byte ERRESERD;
protected byte ERRESERH;
protected byte ERRESERI;
protected byte ERRESERO;
protected byte ERRESERS;
protected byte ERRESOF;
protected byte ERRESON;
protected byte ERRESRY;
protected byte ERVOLA;
protected byte ERVOLB;
protected double ESTHT;
protected double ESTWT;
protected byte EWTCH;
protected double EWTKG;
protected byte EWTL;
protected byte EWTST;
protected byte EXLO90;
protected byte EXPWF;
protected byte EXREL96;
protected byte EXRELA;
protected byte EXRELB;
protected byte EXRELC;
protected byte EXRELD;
protected byte EXRELEDE;
protected byte EXRELEEL;
protected byte EXRELEFA;
protected byte EXRELEFO;
protected byte EXRELEHO;
protected byte EXRELEME;
protected byte EXRELEOU;
protected byte EXRELEPR;
protected byte EXRELETR;
protected byte EYESURG;
protected byte FASTASK;
protected byte FASTELIG;
protected byte FATHER;
protected double FEV1;
protected double FEV2;
protected double FEV3;
protected double FGLU;
protected String FINSTAT4;
protected byte FIT;
protected byte FLOORC;
protected byte FQAQUA;
protected byte FQCBTHR;
protected short FQCENG;
protected byte FQEND;
protected byte FQETHNR;
protected byte FQQUA95;
protected byte FQQUAALE;
protected byte FQQUAASL;
protected byte FQQUACGA;
protected byte FQQUACGF;
protected byte FQQUACGO;
protected byte FQQUACLE;
protected byte FQQUACS1;
protected byte FQQUACS2;
protected byte FQQUACSU;
protected byte FQQUADEG;
protected byte FQQUAGCA;
protected byte FQQUAGCD;
protected byte FQQUAHNC;
protected byte FQQUAMAT;
protected byte FQQUANUR;
protected byte FQQUANV1;
protected byte FQQUANV2;
protected byte FQQUANV3;
protected byte FQQUANV4;
protected byte FQQUANV5;
protected byte FQQUAOLA;
protected byte FQQUAOLD;
protected byte FQQUAOLP;
protected byte FQQUAONC;
protected byte FQQUASLC;
protected byte FQQUASLL;
protected byte FQQUASUP;
protected byte FQQUATEA;
protected byte FQQUATRA;
protected byte FQQUM85;
protected byte FQQUM86;
protected byte FQQUMALE;
protected byte FQQUMASL;
protected byte FQQUMCGA;
protected byte FQQUMCGF;
protected byte FQQUMCGO;
protected byte FQQUMCLE;
protected byte FQQUMCS1;
protected byte FQQUMCS2;
protected byte FQQUMCSU;
protected byte FQQUMDEG;
protected byte FQQUMDIP;
protected byte FQQUMFOR;
protected byte FQQUMGCA;
protected byte FQQUMGCD;
protected byte FQQUMHNC;
protected byte FQQUMMAT;
protected byte FQQUMMIL;
protected byte FQQUMNNE;
protected byte FQQUMNUR;
protected byte FQQUMNV1;
protected byte FQQUMNV2;
protected byte FQQUMNV3;
protected byte FQQUMNV4;
protected byte FQQUMNV5;
protected byte FQQUMNVZ;
protected byte FQQUMOAC;
protected byte FQQUMOLA;
protected byte FQQUMOLD;
protected byte FQQUMOLP;
protected byte FQQUMONC;
protected byte FQQUMOPR;
protected byte FQQUMOVO;
protected byte FQQUMSLC;
protected byte FQQUMSLL;
protected byte FQQUMSUP;
protected byte FQQUMTEA;
protected byte FQQUMTRA;
protected double FSTGS_TM;
protected byte FTHAGD;
protected byte FULL1;
protected byte FULL2;
protected byte FULL3;
protected double FVC1;
protected double FVC2;
protected double FVC3;
protected byte GCINHH;
protected double GTSPD_MN;
protected byte GTSPD_MNG;
protected byte GTSPD_WK;
protected byte HASTRO;
protected byte HASURG;
protected double HBA1C;
protected double HDL;
protected byte HEACD;
protected byte HEACE;
protected byte HEACEA;
protected byte HEADLTE;
protected byte HEAGAR;
protected short HEAGARY;
protected byte HEAGBR;
protected short HEAGBRY;
protected byte HEAGCR;
protected short HEAGCRY;
protected byte HEAGDR;
protected short HEAGDRY;
protected byte HEAGER;
protected short HEAGERY;
protected byte HEAGFR;
protected short HEAGFRY;
protected byte HEAGG;
protected byte HEAGGR;
protected short HEAGGRY;
protected byte HEAGH;
protected byte HEAGHR;
protected short HEAGHRY;
protected byte HEAGIR;
protected short HEAGIRY;
protected byte HEAGJR;
protected short HEAGJRY;
protected byte HEAGK;
protected byte HEAGKR;
protected short HEAGKRY;
protected byte HEAID96;
protected byte HEAIDAL;
protected byte HEAIDBU;
protected byte HEAIDCA;
protected byte HEAIDCR;
protected byte HEAIDEA;
protected byte HEAIDEW;
protected byte HEAIDMW;
protected byte HEAIDZI;
protected byte HEALCOV;
protected byte HEALM85;
protected byte HEALM86;
protected byte HEALM95;
protected byte HEALMCH;
protected byte HEALMFA;
protected byte HEALMFR;
protected byte HEALMLL;
protected byte HEALMNHS;
protected byte HEALMSE;
protected byte HEALMSS;
protected byte HEALNHS;
protected byte HEALOT;
protected byte HEALSE;
protected byte HEALSS;
protected byte HEAMB;
protected byte HEANA;
protected byte HEANB;
protected byte HEANC;
protected byte HEAND;
protected byte HEAND1;
protected byte HEANE;
protected byte HEANF;
protected byte HEANG;
protected byte HEANH;
protected byte HEANILS;
protected byte HEANIM86;
protected byte HEANIUS;
protected byte HEANK;
protected byte HEANM85;
protected byte HEANMLA;
protected byte HEANMLC;
protected byte HEANMLS;
protected byte HEANMRA;
protected byte HEANMRC;
protected byte HEANMUS;
protected byte HEANS95;
protected byte HEANSLA;
protected byte HEANSLC;
protected byte HEANSRA;
protected byte HEANSRC;
protected byte HEARTA;
protected byte HEARTB;
protected byte HEARTC;
protected byte HEARTD;
protected byte HEARTE;
protected byte HEARTOA;
protected byte HEARTOT;
protected byte HEARTRA;
protected byte HEATA;
protected byte HEATT1;
protected byte HEATT13;
protected byte HEATT14;
protected byte HEATT15;
protected byte HEATT16;
protected byte HEATT2;
protected byte HEATT3;
protected byte HEATT5;
protected byte HEATT6;
protected byte HEATT7;
protected byte HEATT8;
protected byte HEATT9;
protected byte HEATT95;
protected byte HEATTM1;
protected byte HEATTM13;
protected byte HEATTM14;
protected byte HEATTM15;
protected byte HEATTM16;
protected byte HEATTM2;
protected byte HEATTM3;
protected byte HEATTM5;
protected byte HEATTM51;
protected byte HEATTM52;
protected byte HEATTM6;
protected byte HEATTM7;
protected byte HEATTM8;
protected byte HEATTM85;
protected byte HEATTM86;
protected byte HEATTM9;
protected byte HEBAL;
protected byte HEBDIAAD;
protected byte HEBDIAAR;
protected byte HEBDIAAS;
protected byte HEBDIACA;
protected byte HEBDIADE;
protected byte HEBDIALU;
protected byte HEBDIAOS;
protected byte HEBDIAPD;
protected byte HEBDIAPS;
protected byte HEBPCHK;
protected boolean HEBUCOV;
protected byte HEBUM85;
protected byte HEBUM86;
protected boolean HEBUM95;
protected byte HEBUMCH;
protected byte HEBUMFA;
protected byte HEBUMFR;
protected byte HEBUMLL;
protected byte HEBUMNHS;
protected byte HEBUMSE;
protected byte HEBUMSS;
protected byte HEBUNHS;
protected byte HEBUOT;
protected byte HEBUSE;
protected byte HEBUSS;
protected byte HECACOV;
protected byte HECAM85;
protected byte HECAM86;
protected byte HECAM95;
protected byte HECAMCH;
protected byte HECAMFA;
protected byte HECAMFR;
protected byte HECAMLL;
protected byte HECAMNHS;
protected byte HECAMSE;
protected byte HECAMSS;
protected byte HECANAA;
protected byte HECANBB;
protected byte HECANHS;
protected byte HECAOT;
protected byte HECASE;
protected byte HECASS;
protected byte HECATN;
protected byte HECHMD;
protected byte HECHME;
protected byte HECLUB1;
protected byte HECLUB2;
protected byte HECLUB3;
protected byte HECLUB96;
protected boolean HECRCOV;
protected byte HECRM85;
protected byte HECRM86;
protected boolean HECRM95;
protected byte HECRMCH;
protected byte HECRMFA;
protected byte HECRMFR;
protected byte HECRMLL;
protected byte HECRMNHS;
protected byte HECRMSE;
protected byte HECRMSS;
protected byte HECRNHS;
protected byte HECROT;
protected byte HECRSE;
protected byte HECRSS;
protected byte HEDACAN;
protected byte HEDACAR;
protected byte HEDACBP;
protected byte HEDACCH;
protected byte HEDACDI;
protected byte HEDACHF;
protected byte HEDACHM;
protected byte HEDACMI;
protected byte HEDACOT;
protected byte HEDACST;
protected byte HEDANAN;
protected byte HEDANAR;
protected byte HEDANBP;
protected byte HEDANCH;
protected byte HEDANDI;
protected byte HEDANHF;
protected byte HEDANHM;
protected byte HEDANMI;
protected byte HEDANOT;
protected byte HEDANST;
protected byte HEDASAN;
protected byte HEDASAR;
protected byte HEDASBP;
protected byte HEDASCH;
protected byte HEDASHF;
protected byte HEDASHM;
protected byte HEDASOT;
protected byte HEDAWAN;
protected byte HEDAWAR;
protected byte HEDAWBP;
protected byte HEDAWCH;
protected byte HEDAWDI;
protected byte HEDAWHF;
protected byte HEDAWHM;
protected byte HEDAWMI;
protected byte HEDAWOT;
protected byte HEDAWST;
protected byte HEDBDAD;
protected byte HEDBDAR;
protected byte HEDBDAS;
protected byte HEDBDCA;
protected byte HEDBDDE;
protected byte HEDBDLU;
protected byte HEDBDOS;
protected byte HEDBDPD;
protected byte HEDBDPS;
protected byte HEDBMAD;
protected byte HEDBMAR;
protected byte HEDBMAS;
protected byte HEDBMCA;
protected byte HEDBMDE;
protected byte HEDBMLU;
protected byte HEDBMOS;
protected byte HEDBMPD;
protected byte HEDBMPS;
protected byte HEDBSAR;
protected byte HEDBSAS;
protected byte HEDBSCA;
protected byte HEDBSDE;
protected byte HEDBSLU;
protected byte HEDBSOS;
protected byte HEDBSPD;
protected byte HEDBWAD;
protected byte HEDBWAR;
protected byte HEDBWAS;
protected byte HEDBWCA;
protected byte HEDBWDE;
protected byte HEDBWLU;
protected byte HEDBWOS;
protected byte HEDBWPD;
protected byte HEDBWPS;
protected byte HEDCC;
protected byte HEDIA95;
protected byte HEDIA96;
protected byte HEDIAAN;
protected byte HEDIAAR;
protected byte HEDIABP;
protected byte HEDIACH;
protected byte HEDIADI;
protected byte HEDIAGAN;
protected byte HEDIAGAR;
protected byte HEDIAGBP;
protected byte HEDIAGDH;
protected byte HEDIAGDI;
protected byte HEDIAGHC;
protected byte HEDIAGHF;
protected byte HEDIAGHM;
protected byte HEDIAGMI;
protected byte HEDIAGST;
protected byte HEDIAHF;
protected byte HEDIAHM;
protected byte HEDIAMI;
protected byte HEDIAST;
protected byte HEDIB96;
protected byte HEDIBAD;
protected byte HEDIBAR;
protected byte HEDIBAS;
protected byte HEDIBBL;
protected byte HEDIBCA;
protected byte HEDIBDE;
protected byte HEDIBLU;
protected byte HEDIBOS;
protected byte HEDIBPD;
protected byte HEDIBPS;
protected byte HEDIM85;
protected byte HEDIM86;
protected byte HEDIM96;
protected byte HEDIMAN;
protected byte HEDIMAR;
protected byte HEDIMBP;
protected byte HEDIMCH;
protected byte HEDIMDI;
protected byte HEDIMHF;
protected byte HEDIMHM;
protected byte HEDIMMI;
protected byte HEDIMST;
protected byte HEDIZ;
protected byte HEDIZM51;
protected byte HEDIZM52;
protected boolean HEEACOV;
protected byte HEEAM85;
protected boolean HEEAM86;
protected boolean HEEAM95;
protected byte HEEAMCH;
protected byte HEEAMFA;
protected boolean HEEAMFR;
protected byte HEEAMLL;
protected byte HEEAMNHS;
protected byte HEEAMSE;
protected byte HEEAMSS;
protected byte HEEANHS;
protected byte HEEAOT;
protected byte HEEASE;
protected byte HEEASS;
protected boolean HEEWCOV;
protected byte HEEWM85;
protected boolean HEEWM86;
protected boolean HEEWM95;
protected byte HEEWMCH;
protected byte HEEWMFA;
protected byte HEEWMFR;
protected byte HEEWMLL;
protected byte HEEWMNHS;
protected byte HEEWMSE;
protected byte HEEWMSS;
protected byte HEEWNHS;
protected byte HEEWOT;
protected byte HEEWSE;
protected byte HEEWSS;
protected byte HEFLD;
protected byte HEFLE;
protected byte HEFLF;
protected byte HEFTCHK;
protected byte HEHBP;
protected byte HEHBPA;
protected byte HEHBPB;
protected byte HEHBPB1;
protected byte HEHELF;
protected byte HEHFA;
protected byte HEHFM;
protected short HEHFY;
protected byte HEHIPA;
protected byte HEHIPB;
protected byte HEHIPC;
protected byte HEHNO;
protected byte HEHPA;
protected byte HEHPB96;
protected byte HEHPBBR;
protected byte HEHPBDA;
protected byte HEHPBDL;
protected byte HEHPBGD;
protected byte HEHPBGS;
protected byte HEHPBOR;
protected byte HEHPBOT;
protected byte HEHPBPA;
protected byte HEHPBSI;
protected byte HEHPBSL;
protected byte HEHPBSO;
protected byte HEHPBSP;
protected byte HEHPC;
protected byte HEHPD96;
protected byte HEHPDBR;
protected byte HEHPDDA;
protected byte HEHPDFR;
protected byte HEHPDLA;
protected byte HEHPDNU;
protected byte HEHPDOR;
protected byte HEHPDOT;
protected byte HEHPDPP;
protected byte HEHPDSI;
protected byte HEHPDSO;
protected byte HEHPDSP;
protected byte HEHPDST;
protected byte HEHPH96;
protected byte HEHPHBR;
protected byte HEHPHDA;
protected byte HEHPHFR;
protected byte HEHPHLA;
protected byte HEHPHNU;
protected byte HEHPHOR;
protected byte HEHPHOT;
protected byte HEHPHPP;
protected byte HEHPHSI;
protected byte HEHPHSO;
protected byte HEHPHSP;
protected byte HEHPHST;
protected byte HEHPLA;
protected byte HEHPM96;
protected byte HEHPMBR;
protected byte HEHPMDA;
protected byte HEHPMFR;
protected byte HEHPMLA;
protected byte HEHPMNU;
protected byte HEHPMOR;
protected byte HEHPMOT;
protected byte HEHPMPP;
protected byte HEHPMSI;
protected byte HEHPMSO;
protected byte HEHPMSP;
protected byte HEHPMST;
protected byte HEHPP96;
protected byte HEHPPBR;
protected byte HEHPPD;
protected byte HEHPPDA;
protected byte HEHPPFR;
protected byte HEHPPLA;
protected byte HEHPPNU;
protected byte HEHPPOR;
protected byte HEHPPOT;
protected byte HEHPPPP;
protected byte HEHPPSI;
protected byte HEHPPSO;
protected byte HEHPPSP;
protected byte HEHPPST;
protected byte HEHPS;
protected byte HEHPS95;
protected byte HEHPS96;
protected byte HEHPSCH;
protected byte HEHPSEX;
protected byte HEHPSOT;
protected byte HEHPT96;
protected byte HEHPTBR;
protected byte HEHPTDA;
protected byte HEHPTFR;
protected byte HEHPTLA;
protected byte HEHPTNU;
protected byte HEHPTOR;
protected byte HEHPTOT;
protected byte HEHPTPP;
protected byte HEHPTSI;
protected byte HEHPTSO;
protected byte HEHPTSP;
protected byte HEHPTST;
protected byte HEHPW96;
protected byte HEHPWBR;
protected byte HEHPWDA;
protected byte HEHPWFR;
protected byte HEHPWLA;
protected byte HEHPWNU;
protected byte HEHPWOR;
protected byte HEHPWOT;
protected byte HEHPWPP;
protected byte HEHPWSI;
protected byte HEHPWSO;
protected byte HEHPWSP;
protected byte HEHPWST;
protected byte HEHPY;
protected byte HEHRT;
protected byte HEHRTMD;
protected byte HEHSM85;
protected byte HEHSM86;
protected byte HEHSM96;
protected byte HEHSMAC;
protected byte HEHSMCH;
protected byte HEHSMCR;
protected byte HEHSMEX;
protected byte HEHSMHY;
protected byte HEHSMMA;
protected byte HEHSMOS;
protected byte HEHSMOT;
protected byte HEHSMTH;
protected short HEHST;
protected byte HEHSTA;
protected byte HEHYE;
protected short HEHYY;
protected byte HEHYYA;
protected double HEIGHT;
protected byte HEINCT;
protected byte HEINCTA;
protected byte HEJIAA1;
protected byte HEJIAA2;
protected byte HEJIAA3;
protected byte HEJIAA4;
protected byte HEJIAA5;
protected byte HEJIBLH;
protected byte HEJIBLK;
protected byte HEJIBRH;
protected byte HEJIBRK;
protected byte HEJION;
protected byte HEKIDN;
protected byte HEKNEA;
protected byte HEKNEB;
protected byte HEKNEC;
protected byte HEKNED;
protected byte HEKNEF;
protected byte HELC;
protected byte HELEUK;
protected byte HELNGB;
protected byte HELWK;
protected byte HEMDA1;
protected byte HEMDAB;
protected byte HEMEB;
protected byte HEMEN;
protected byte HEMW;
protected byte HEMWCOV;
protected byte HEMWM85;
protected byte HEMWM86;
protected byte HEMWM95;
protected byte HEMWMCH;
protected byte HEMWMFA;
protected byte HEMWMFR;
protected byte HEMWMLL;
protected byte HEMWMNHS;
protected byte HEMWMSE;
protected byte HEMWMSS;
protected byte HEMWNHS;
protected byte HEMWOT;
protected byte HEMWSE;
protected byte HEMWSS;
protected byte HENMMI;
protected byte HENMST;
protected byte HEOPCCA;
protected byte HEOPCDI;
protected byte HEOPCGL;
protected byte HEOPCMD;
protected byte HEOPFCA;
protected byte HEOPFDI;
protected byte HEOPFGL;
protected byte HEOPFMD;
protected byte HEOPNCA;
protected byte HEOPNDI;
protected byte HEOPNGL;
protected byte HEOPNMD;
protected byte HEOPSCA;
protected byte HEOPSDI;
protected byte HEOPSGL;
protected byte HEOPSMD;
protected byte HEOPT96;
protected byte HEOPTCA;
protected byte HEOPTDI;
protected byte HEOPTGL;
protected byte HEOPTMD;
protected byte HEOVE;
protected short HEOVY;
protected byte HEOVYA;
protected byte HEPAB;
protected byte HEPAB1;
protected byte HEPAG;
protected byte HEPAH;
protected byte HEPAI;
protected byte HEPAJ;
protected byte HEPAK3;
protected byte HEPAWAL;
protected byte HEPAWBA;
protected byte HEPAWFE;
protected byte HEPAWHI;
protected byte HEPAWKN;
protected byte HEPAWMO;
protected byte HEPAWOT;
protected byte HEPDIACA;
protected byte HEPDIADI;
protected byte HEPDIAGL;
protected byte HEPDIAMD;
protected byte HEPEA;
protected byte HEPEE;
protected byte HEPER;
protected short HEPEY;
protected byte HEPMED;
protected byte HEPORTH;
protected byte HEPRKR;
protected short HEPRKRY;
protected byte HEPSUR;
protected byte HEPSY95;
protected byte HEPSYA;
protected byte HEPSYAN;
protected byte HEPSYB;
protected byte HEPSYDE;
protected byte HEPSYE;
protected byte HEPSYEM;
protected byte HEPSYHA;
protected byte HEPSYMA;
protected byte HEPSYMO;
protected byte HEPSYPS;
protected byte HEPSYSC;
protected byte HEROSMD;
protected byte HERPA;
protected byte HERPB;
protected byte HERPC;
protected byte HERPD;
protected byte HERPE;
protected byte HERPE1;
protected byte HERPF;
protected byte HERPG;
protected byte HERPH;
protected byte HERPI;
protected byte HERPJ;
protected byte HESKD;
protected byte HESKE;
protected byte HESKF;
protected byte HESLFCB;
protected byte HESLFCM;
protected byte HESLFCR;
protected short HESLFCY;
protected byte HESLPA;
protected byte HESLPB;
protected byte HESLPD;
protected double HESLPE;
protected byte HESLPF;
protected byte HESTOP;
protected byte HESUG;
protected byte HESUGA;
protected byte HETEMP;
protected byte HEWEE;
protected byte HEWEEA;
protected boolean HEZICOV;
protected byte HEZIM85;
protected byte HEZIM86;
protected byte HEZIMCH;
protected byte HEZIMFA;
protected byte HEZIMFR;
protected byte HEZIMLL;
protected byte HEZIMNHS;
protected byte HEZIMOT;
protected byte HEZIMSE;
protected byte HEZIMSS;
protected byte HEZINHS;
protected byte HEZIOT;
protected byte HEZISE;
protected byte HEZISS;
protected double HGB;
protected byte HHAGE;
protected byte HINREL;
protected double HIP1;
protected double HIP2;
protected double HIP3;
protected byte HIPOKB;
protected double HIPVAL;
protected byte HJREL;
protected byte HOADP95;
protected byte HOADP96;
protected byte HOADPAD;
protected byte HOADPAL;
protected byte HOADPAP;
protected byte HOADPBM;
protected byte HOADPCL;
protected byte HOADPHR;
protected byte HOADPKM;
protected byte HOADPLI;
protected byte HOADPRS;
protected byte HOADPWD;
protected byte HOAIADHS;
protected byte HOAIADOT;
protected byte HOAIADSS;
protected byte HOAIADYS;
protected byte HOAIALHS;
protected byte HOAIALOT;
protected byte HOAIALSS;
protected byte HOAIALYS;
protected byte HOAIAPHS;
protected byte HOAIAPOT;
protected byte HOAIAPSS;
protected byte HOAIAPYS;
protected byte HOAIBMHS;
protected byte HOAIBMOT;
protected byte HOAIBMSS;
protected byte HOAIBMYS;
protected byte HOAICLHS;
protected byte HOAICLOT;
protected byte HOAICLSS;
protected byte HOAICLYS;
protected byte HOAIHRHS;
protected byte HOAIHROT;
protected byte HOAIHRSS;
protected byte HOAIHRYS;
protected byte HOAIKMHS;
protected byte HOAIKMOT;
protected byte HOAIKMSS;
protected byte HOAIKMYS;
protected byte HOAILIHS;
protected byte HOAILIOT;
protected byte HOAILISS;
protected byte HOAILIYS;
protected byte HOAIRSHS;
protected byte HOAIRSOT;
protected byte HOAIRSSS;
protected byte HOAIRSYS;
protected byte HOAIWDHS;
protected byte HOAIWDOT;
protected byte HOAIWDSS;
protected byte HOAIWDYS;
protected byte HOALF1;
protected short HOALF1L;
protected byte HOALF1R;
protected byte HOALF1T;
protected short HOALF1U;
protected byte HOALF2;
protected short HOALF2L;
protected byte HOALF2R;
protected byte HOALF2T;
protected short HOALF2U;
protected short HOALFM1;
protected short HOALFM2;
protected byte HOALI1;
protected byte HOALI2;
protected byte HOBA2FE;
protected byte HOBA2FL;
protected byte HOBA2FR;
protected byte HOBA2FU;
protected byte HOBA2ME;
protected byte HOBA2ML;
protected byte HOBA2MR;
protected byte HOBA2MU;
protected byte HOBA2OE;
protected short HOBA2OL;
protected byte HOBA2OR;
protected short HOBA2OU;
protected byte HOBA2WE;
protected byte HOBA2WL;
protected byte HOBA2WR;
protected byte HOBA2WU;
protected byte HOBA2YE;
protected byte HOBA2YL;
protected byte HOBA2YR;
protected byte HOBA2YU;
protected byte HOBA3FE;
protected byte HOBA3FL;
protected byte HOBA3FR;
protected byte HOBA3FU;
protected byte HOBA3ME;
protected short HOBA3ML;
protected byte HOBA3MR;
protected short HOBA3MU;
protected byte HOBA3OE;
protected short HOBA3OL;
protected byte HOBA3OR;
protected short HOBA3OU;
protected byte HOBA3WE;
protected byte HOBA3WL;
protected byte HOBA3WR;
protected short HOBA3WU;
protected byte HOBA3YE;
protected byte HOBA3YL;
protected byte HOBA3YR;
protected byte HOBA3YU;
protected byte HOBA4FE;
protected byte HOBA4FL;
protected byte HOBA4FR;
protected byte HOBA4FU;
protected byte HOBA4ME;
protected short HOBA4ML;
protected byte HOBA4MR;
protected short HOBA4MU;
protected byte HOBA4OE;
protected short HOBA4OL;
protected byte HOBA4OR;
protected short HOBA4OU;
protected byte HOBA4WE;
protected short HOBA4WL;
protected byte HOBA4WR;
protected short HOBA4WU;
protected byte HOBA4YE;
protected byte HOBA4YL;
protected byte HOBA4YR;
protected byte HOBA4YU;
protected byte HOBA5FE;
protected byte HOBA5FL;
protected byte HOBA5FR;
protected byte HOBA5FU;
protected byte HOBA5ME;
protected short HOBA5ML;
protected byte HOBA5MR;
protected short HOBA5MU;
protected byte HOBA5OE;
protected byte HOBA5OL;
protected byte HOBA5OR;
protected byte HOBA5OU;
protected byte HOBA5WE;
protected byte HOBA5WL;
protected byte HOBA5WR;
protected byte HOBA5WU;
protected byte HOBA5YE;
protected byte HOBA5YL;
protected byte HOBA5YR;
protected byte HOBA5YU;
protected byte HOBA6FE;
protected byte HOBA6FL;
protected byte HOBA6FR;
protected byte HOBA6FU;
protected byte HOBA6ME;
protected byte HOBA6ML;
protected byte HOBA6MR;
protected byte HOBA6MU;
protected byte HOBA6OE;
protected byte HOBA6OL;
protected byte HOBA6OR;
protected byte HOBA6OU;
protected byte HOBA6WE;
protected byte HOBA6WL;
protected byte HOBA6WR;
protected byte HOBA6WU;
protected byte HOBA6YE;
protected byte HOBA6YL;
protected byte HOBA6YR;
protected byte HOBA6YU;
protected byte HOBA7FE;
protected byte HOBA7FL;
protected byte HOBA7FR;
protected byte HOBA7FU;
protected byte HOBA7ME;
protected byte HOBA7ML;
protected byte HOBA7MR;
protected byte HOBA7MU;
protected byte HOBA7OE;
protected byte HOBA7OL;
protected byte HOBA7OR;
protected byte HOBA7OU;
protected byte HOBA7WE;
protected byte HOBA7WL;
protected byte HOBA7WR;
protected byte HOBA7WU;
protected byte HOBA7YE;
protected byte HOBA7YL;
protected byte HOBA7YR;
protected byte HOBA7YU;
protected byte HOBA8FE;
protected byte HOBA8FL;
protected byte HOBA8FR;
protected byte HOBA8FU;
protected byte HOBA8ME;
protected byte HOBA8ML;
protected byte HOBA8MR;
protected byte HOBA8MU;
protected byte HOBA8OE;
protected byte HOBA8OL;
protected byte HOBA8OR;
protected byte HOBA8OU;
protected byte HOBA8WE;
protected byte HOBA8WL;
protected byte HOBA8WR;
protected byte HOBA8WU;
protected byte HOBA8YE;
protected byte HOBA8YL;
protected byte HOBA8YR;
protected byte HOBA8YU;
protected byte HOBA9FE;
protected byte HOBA9FL;
protected byte HOBA9FR;
protected byte HOBA9FU;
protected byte HOBA9ME;
protected byte HOBA9ML;
protected byte HOBA9MR;
protected byte HOBA9MU;
protected byte HOBA9OE;
protected byte HOBA9OL;
protected byte HOBA9OR;
protected byte HOBA9OU;
protected byte HOBA9WE;
protected byte HOBA9WL;
protected byte HOBA9WR;
protected byte HOBA9WU;
protected byte HOBA9YE;
protected byte HOBA9YL;
protected byte HOBA9YR;
protected byte HOBA9YU;
protected byte HOBAFE;
protected byte HOBAFL;
protected byte HOBAFR;
protected byte HOBAFU;
protected byte HOBAME;
protected short HOBAML;
protected byte HOBAMR;
protected short HOBAMU;
protected byte HOBAOE;
protected short HOBAOL;
protected byte HOBAOR;
protected short HOBAOU;
protected byte HOBAWE;
protected short HOBAWL;
protected byte HOBAWR;
protected byte HOBAWU;
protected byte HOBAYE;
protected byte HOBAYL;
protected byte HOBAYR;
protected short HOBAYU;
protected byte HOCC01;
protected byte HOCC02;
protected byte HOCC03;
protected byte HOCC04;
protected byte HOCC05;
protected byte HOCC06;
protected byte HOCC07;
protected byte HOCC08;
protected byte HOCC09;
protected byte HOCC10;
protected byte HOCC11;
protected byte HOCC12;
protected byte HOCC13;
protected byte HOCC14;
protected byte HOCC15;
protected byte HOCC16;
protected byte HOCC17;
protected byte HOCC18;
protected byte HOCC19;
protected byte HOCC20;
protected byte HOCENP;
protected short HOCL;
protected byte HOCLE;
protected short HOCLL;
protected byte HOCLR;
protected short HOCLU;
protected byte HOCO;
protected byte HOCTA;
protected byte HOCTF;
protected int HOCTFA;
protected byte HOCTFAE;
protected short HOCTFAL;
protected byte HOCTFAR;
protected short HOCTFAU;
protected byte HOCTFW;
protected byte HODISC;
protected byte HOEB;
protected short HOEBMS;
protected byte HOEBMSE;
protected byte HOEBMSL;
protected byte HOEBMSR;
protected byte HOEBMSU;
protected short HOEBMW;
protected byte HOEBMWE;
protected byte HOEBMWL;
protected byte HOEBMWR;
protected byte HOEBMWU;
protected short HOEBQS;
protected byte HOEBQSE;
protected short HOEBQSL;
protected byte HOEBQSR;
protected short HOEBQSU;
protected short HOEBQW;
protected byte HOEBQWE;
protected short HOEBQWL;
protected byte HOEBQWR;
protected short HOEBQWU;
protected byte HOED;
protected short HOEDM;
protected byte HOEDME;
protected byte HOEDML;
protected byte HOEDMR;
protected byte HOEDMU;
protected short HOEDQ;
protected byte HOEDQE;
protected short HOEDQL;
protected byte HOEDQR;
protected short HOEDQU;
protected byte HOEOS;
protected byte HOEOSE;
protected byte HOEOSL;
protected byte HOEOSR;
protected byte HOEOSU;
protected byte HOEOW;
protected byte HOEOWE;
protected byte HOEOWL;
protected byte HOEOWR;
protected byte HOEOWU;
protected byte HOEPAY;
protected byte HOEPS;
protected byte HOEPSE;
protected byte HOEPSL;
protected byte HOEPSR;
protected byte HOEPSU;
protected byte HOEPW;
protected byte HOEPWE;
protected byte HOEPWL;
protected byte HOEPWR;
protected byte HOEPWU;
protected byte HOFB;
protected short HOFBMS;
protected byte HOFBMSE;
protected byte HOFBMSL;
protected byte HOFBMSR;
protected byte HOFBMSU;
protected short HOFBMW;
protected byte HOFBMWE;
protected byte HOFBMWL;
protected byte HOFBMWR;
protected byte HOFBMWU;
protected short HOFBQS;
protected byte HOFBQSE;
protected short HOFBQSL;
protected byte HOFBQSR;
protected short HOFBQSU;
protected short HOFBQW;
protected byte HOFBQWE;
protected short HOFBQWL;
protected byte HOFBQWR;
protected short HOFBQWU;
protected byte HOFCS;
protected byte HOFCSE;
protected byte HOFCSL;
protected byte HOFCSR;
protected byte HOFCSU;
protected byte HOFCW;
protected byte HOFCWE;
protected byte HOFCWL;
protected byte HOFCWR;
protected byte HOFCWU;
protected byte HOFD;
protected short HOFDM;
protected byte HOFDME;
protected byte HOFDML;
protected byte HOFDMR;
protected byte HOFDMU;
protected short HOFDQ;
protected byte HOFDQE;
protected short HOFDQL;
protected byte HOFDQR;
protected short HOFDQU;
protected byte HOFOIS;
protected byte HOFOISE;
protected byte HOFOISL;
protected byte HOFOISR;
protected byte HOFOISU;
protected byte HOFOIW;
protected byte HOFOIWE;
protected byte HOFOIWL;
protected byte HOFOIWR;
protected byte HOFOIWU;
protected byte HOFOODE;
protected short HOFOODL;
protected byte HOFOODR;
protected short HOFOODU;
protected byte HOFOS;
protected byte HOFOSE;
protected byte HOFOSL;
protected byte HOFOSR;
protected byte HOFOSU;
protected byte HOFOW;
protected byte HOFOWE;
protected byte HOFOWL;
protected byte HOFOWR;
protected byte HOFOWU;
protected byte HOFPAY;
protected byte HOFPGS;
protected byte HOFPGSE;
protected byte HOFPGSL;
protected byte HOFPGSR;
protected byte HOFPGSU;
protected byte HOFPGW;
protected byte HOFPGWE;
protected byte HOFPGWL;
protected byte HOFPGWR;
protected byte HOFPGWU;
protected byte HOFPS;
protected byte HOFPSE;
protected byte HOFPSL;
protected byte HOFPSR;
protected byte HOFPSU;
protected byte HOFPW;
protected byte HOFPWE;
protected byte HOFPWL;
protected byte HOFPWR;
protected byte HOFPWU;
protected short HOFSM;
protected byte HOFSME;
protected byte HOFSML;
protected byte HOFSMR;
protected byte HOFSMU;
protected byte HOFSP;
protected byte HOFSQ;
protected byte HOFSQE;
protected byte HOFSQL;
protected byte HOFSQR;
protected byte HOFSQU;
protected byte HOFSUP;
protected short HOFSW;
protected byte HOFSWE;
protected byte HOFSWL;
protected byte HOFSWR;
protected byte HOFSWU;
protected byte HOFTOG;
protected byte HOFUEL95;
protected byte HOFUELCO;
protected byte HOFUELEL;
protected byte HOFUELGA;
protected byte HOFUELM1;
protected byte HOFUELM2;
protected byte HOFUELM3;
protected byte HOFUELM4;
protected byte HOFUELM5;
protected byte HOFUELM6;
protected byte HOFUELM8;
protected boolean HOFUELM9;
protected byte HOFUELOI;
protected byte HOFUELPA;
protected byte HOFUELWO;
protected byte HOFWS;
protected byte HOFWSE;
protected byte HOFWSL;
protected byte HOFWSR;
protected byte HOFWSU;
protected byte HOFWW;
protected byte HOFWWE;
protected byte HOFWWL;
protected byte HOFWWR;
protected byte HOFWWU;
protected byte HOFXS;
protected byte HOFXSE;
protected byte HOFXSL;
protected byte HOFXSR;
protected byte HOFXSU;
protected byte HOFXW;
protected byte HOFXWE;
protected byte HOFXWL;
protected byte HOFXWR;
protected byte HOFXWU;
protected short HOGBMS;
protected byte HOGBMSE;
protected byte HOGBMSL;
protected byte HOGBMSR;
protected byte HOGBMSU;
protected short HOGBMW;
protected byte HOGBMWE;
protected byte HOGBMWL;
protected byte HOGBMWR;
protected byte HOGBMWU;
protected byte HOGBP;
protected short HOGBQS;
protected byte HOGBQSE;
protected short HOGBQSL;
protected byte HOGBQSR;
protected short HOGBQSU;
protected short HOGBQW;
protected byte HOGBQWE;
protected short HOGBQWL;
protected byte HOGBQWR;
protected short HOGBQWU;
protected byte HOGD;
protected short HOGDM;
protected byte HOGDME;
protected byte HOGDML;
protected byte HOGDMR;
protected byte HOGDMU;
protected short HOGDQ;
protected byte HOGDQE;
protected short HOGDQL;
protected byte HOGDQR;
protected short HOGDQU;
protected byte HOGOS;
protected byte HOGOSE;
protected byte HOGOSL;
protected byte HOGOSR;
protected byte HOGOSU;
protected byte HOGOW;
protected byte HOGOWE;
protected byte HOGOWL;
protected byte HOGOWR;
protected byte HOGOWU;
protected byte HOGPAY;
protected byte HOGPS;
protected byte HOGPSE;
protected byte HOGPSL;
protected byte HOGPSR;
protected byte HOGPSU;
protected byte HOGPW;
protected byte HOGPWE;
protected byte HOGPWL;
protected byte HOGPWR;
protected byte HOGPWU;
protected byte HOHAV95;
protected byte HOHAV96;
protected byte HOHAVB95;
protected byte HOHAVB96;
protected byte HOHAVBCD;
protected byte HOHAVBDT;
protected byte HOHAVBDV;
protected byte HOHAVBDW;
protected byte HOHAVBFF;
protected byte HOHAVBMO;
protected byte HOHAVBPC;
protected byte HOHAVBPH;
protected byte HOHAVBTV;
protected byte HOHAVBVR;
protected byte HOHAVBWD;
protected byte HOHAVBWM;
protected byte HOHAVCD;
protected byte HOHAVDT;
protected byte HOHAVDV;
protected byte HOHAVDW;
protected byte HOHAVFF;
protected byte HOHAVMO;
protected byte HOHAVPC;
protected byte HOHAVPH;
protected byte HOHAVTV;
protected byte HOHAVVR;
protected byte HOHAVWD;
protected byte HOHAVWM;
protected byte HOHB95;
protected byte HOHB96;
protected short HOHBA;
protected byte HOHBAFE;
protected byte HOHBAFL;
protected byte HOHBAFR;
protected byte HOHBAFU;
protected byte HOHBAME;
protected short HOHBAML;
protected byte HOHBAMR;
protected short HOHBAMU;
protected byte HOHBAOE;
protected byte HOHBAOL;
protected byte HOHBAOR;
protected short HOHBAOU;
protected byte HOHBAWE;
protected byte HOHBAWL;
protected byte HOHBAWR;
protected byte HOHBAWU;
protected byte HOHBAYE;
protected byte HOHBAYL;
protected byte HOHBAYR;
protected byte HOHBAYU;
protected byte HOHBCK;
protected byte HOHBCL;
protected byte HOHBEN;
protected byte HOHBGA;
protected byte HOHBM85;
protected byte HOHBM86;
protected boolean HOHBM95;
protected byte HOHBM96;
protected byte HOHBMCL;
protected byte HOHBME;
protected byte HOHBMGA;
protected byte HOHBMME;
protected byte HOHBMSG;
protected byte HOHBMWP;
protected byte HOHBP;
protected byte HOHBSG;
protected byte HOHBWP;
protected byte HOHEA95;
protected byte HOHEA96;
protected byte HOHEAEF;
protected byte HOHEAGF;
protected byte HOHEAM85;
protected byte HOHEAM86;
protected byte HOHEAM96;
protected byte HOHEAMEF;
protected byte HOHEAMGF;
protected byte HOHEAMOF;
protected byte HOHEAMPH;
protected byte HOHEAOF;
protected byte HOHEAPH;
protected short HOHV01;
protected byte HOHV01E;
protected short HOHV01L;
protected byte HOHV01R;
protected short HOHV01U;
protected short HOHV02;
protected byte HOHV02E;
protected short HOHV02L;
protected byte HOHV02R;
protected short HOHV02U;
protected short HOHV03;
protected byte HOHV03E;
protected short HOHV03L;
protected byte HOHV03R;
protected short HOHV03U;
protected short HOHV04;
protected byte HOHV04E;
protected short HOHV04L;
protected byte HOHV04R;
protected short HOHV04U;
protected short HOHV05;
protected byte HOHV05E;
protected short HOHV05L;
protected byte HOHV05R;
protected short HOHV05U;
protected short HOHV06;
protected byte HOHV06E;
protected short HOHV06L;
protected byte HOHV06R;
protected short HOHV06U;
protected short HOHV07;
protected byte HOHV07E;
protected short HOHV07L;
protected byte HOHV07R;
protected short HOHV07U;
protected short HOHV08;
protected byte HOHV08E;
protected short HOHV08L;
protected byte HOHV08R;
protected short HOHV08U;
protected short HOHV09;
protected byte HOHV09E;
protected short HOHV09L;
protected byte HOHV09R;
protected short HOHV09U;
protected short HOHV10;
protected byte HOHV10E;
protected short HOHV10L;
protected byte HOHV10R;
protected short HOHV10U;
protected short HOHV11;
protected byte HOHV11E;
protected short HOHV11L;
protected byte HOHV11R;
protected short HOHV11U;
protected short HOHV12;
protected byte HOHV12E;
protected short HOHV12L;
protected byte HOHV12R;
protected short HOHV12U;
protected byte HOINA95;
protected byte HOINA96;
protected byte HOINACL;
protected byte HOINAGD;
protected byte HOINAM85;
protected byte HOINAM86;
protected byte HOINAM95;
protected byte HOINAM96;
protected byte HOINAMCL;
protected byte HOINAME;
protected byte HOINAMGD;
protected byte HOINAMME;
protected byte HOINAMSG;
protected byte HOINAMWP;
protected byte HOINASG;
protected byte HOINAWP;
protected byte HOINC96;
protected byte HOINCBI;
protected byte HOINCL96;
protected byte HOINCLCO;
protected byte HOINCLGA;
protected byte HOINCLHE;
protected byte HOINCLLA;
protected byte HOINCLSE;
protected byte HOINCLWA;
protected byte HOINCM85;
protected byte HOINCM86;
protected byte HOINCM96;
protected byte HOINCMBI;
protected byte HOINCMOT;
protected byte HOINCMPI;
protected byte HOINCMPP;
protected byte HOINCOT;
protected byte HOINCPI;
protected byte HOINCPP;
protected short HOLEIS;
protected byte HOLEISE;
protected short HOLEISL;
protected byte HOLEISR;
protected short HOLEISU;
protected int HOMEXA1E;
protected short HOMEXA2E;
protected boolean HOMEXA3E;
protected boolean HOMEXA4E;
protected boolean HOMEXA5E;
protected boolean HOMEXE1E;
protected boolean HOMEXE2E;
protected boolean HOMEXE3E;
protected boolean HOMEXE4E;
protected boolean HOMEXE5E;
protected int HOMEXL1E;
protected boolean HOMEXL2E;
protected boolean HOMEXL3E;
protected boolean HOMEXL4E;
protected boolean HOMEXL5E;
protected byte HOMEXR1E;
protected boolean HOMEXR2E;
protected boolean HOMEXR3E;
protected boolean HOMEXR4E;
protected boolean HOMEXR5E;
protected byte HOMEXT1E;
protected byte HOMEXT2E;
protected boolean HOMEXT3E;
protected boolean HOMEXT4E;
protected boolean HOMEXT5E;
protected boolean HOMEXU1E;
protected boolean HOMEXU2E;
protected boolean HOMEXU3E;
protected boolean HOMEXU4E;
protected boolean HOMEXU5E;
protected byte HOMFV1A;
protected byte HOMFV1E;
protected byte HOMFV1M;
protected byte HOMFV1N;
protected boolean HOMFV2A;
protected byte HOMFV2E;
protected boolean HOMFV2M;
protected byte HOMFV2N;
protected boolean HOMFV3E;
protected byte HOMFV3N;
protected boolean HOMFV4E;
protected boolean HOMFV4N;
protected boolean HOMFV5E;
protected boolean HOMFV5N;
protected short HOMINC;
protected boolean HOMINCE;
protected boolean HOMINCL;
protected boolean HOMINCR;
protected boolean HOMINCU;
protected byte HOMM851E;
protected boolean HOMM852E;
protected boolean HOMM853E;
protected boolean HOMM854E;
protected boolean HOMM855E;
protected byte HOMM861E;
protected boolean HOMM862E;
protected boolean HOMM863E;
protected boolean HOMM864E;
protected boolean HOMM865E;
protected byte HOMMCP1E;
protected byte HOMMCP2E;
protected boolean HOMMCP3E;
protected boolean HOMMCP4E;
protected boolean HOMMCP5E;
protected byte HOMMHE1E;
protected boolean HOMMHE2E;
protected boolean HOMMHE3E;
protected boolean HOMMHE4E;
protected boolean HOMMHE5E;
protected byte HOMMHI1E;
protected boolean HOMMHI2E;
protected boolean HOMMHI3E;
protected boolean HOMMHI4E;
protected boolean HOMMHI5E;
protected byte HOMMIS;
protected byte HOMMISN;
protected byte HOMMOC1E;
protected boolean HOMMOC2E;
protected boolean HOMMOC3E;
protected boolean HOMMOC4E;
protected boolean HOMMOC5E;
protected byte HOMMOT1E;
protected boolean HOMMOT2E;
protected boolean HOMMOT3E;
protected boolean HOMMOT4E;
protected boolean HOMMOT5E;
protected byte HOMN961A;
protected boolean HOMNCP1A;
protected int HOMNEA1A;
protected byte HOMNEE1A;
protected int HOMNEL1A;
protected byte HOMNER1A;
protected short HOMNEU1A;
protected byte HOMNEW;
protected byte HOMNEWN;
protected byte HOMNHE1A;
protected byte HOMNHI1A;
protected byte HOMNOC1A;
protected byte HOMNOT1A;
protected byte HOMNRE1A;
protected byte HOMNUM;
protected byte HOMREA1E;
protected boolean HOMREA2E;
protected boolean HOMREA3E;
protected boolean HOMREA4E;
protected boolean HOMREA5E;
protected byte HOMREPE;
protected short HOMREPL;
protected byte HOMREPR;
protected short HOMREPU;
protected byte HOMSAM1E;
protected byte HOMSAM2E;
protected byte HOMSAM3E;
protected byte HOMSAM4E;
protected boolean HOMSAM5E;
protected byte HOMTY1A;
protected byte HOMTY1M;
protected byte HOMTY1N;
protected boolean HOMTY2A;
protected boolean HOMTY2M;
protected byte HOMTY2N;
protected byte HOMTY3N;
protected boolean HOMTY4N;
protected boolean HOMTY5N;
protected byte HOMUCP1E;
protected byte HOMUCP2E;
protected boolean HOMUCP3E;
protected boolean HOMUCP4E;
protected boolean HOMUCP5E;
protected byte HOMUHE1E;
protected boolean HOMUHE2E;
protected boolean HOMUHE3E;
protected boolean HOMUHE4E;
protected boolean HOMUHE5E;
protected byte HOMUHI1E;
protected boolean HOMUHI2E;
protected boolean HOMUHI3E;
protected boolean HOMUHI4E;
protected boolean HOMUHI5E;
protected byte HOMUOC1E;
protected boolean HOMUOC2E;
protected boolean HOMUOC3E;
protected boolean HOMUOC4E;
protected boolean HOMUOC5E;
protected byte HOMUOT1E;
protected boolean HOMUOT2E;
protected boolean HOMUOT3E;
protected boolean HOMUOT4E;
protected boolean HOMUOT5E;
protected byte HOOHEM95;
protected byte HOOUTFE;
protected short HOOUTFL;
protected byte HOOUTFR;
protected short HOOUTFU;
protected byte HOPAYE;
protected int HOPAYL;
protected byte HOPAYR;
protected int HOPAYU;
protected byte HOPRO95;
protected byte HOPRO96;
protected byte HOPROCO;
protected byte HOPROCP;
protected byte HOPRODK;
protected byte HOPROEP;
protected byte HOPROIN;
protected byte HOPROM85;
protected byte HOPROM86;
protected byte HOPROM95;
protected byte HOPROM96;
protected byte HOPROMCO;
protected byte HOPROMCP;
protected byte HOPROMDK;
protected byte HOPROMEP;
protected byte HOPROMIN;
protected byte HOPROMNZ;
protected byte HOPROMPO;
protected byte HOPROMRD;
protected byte HOPROMRO;
protected byte HOPROMSN;
protected byte HOPROMSP;
protected byte HOPROMST;
protected byte HOPROMVA;
protected byte HOPROMWA;
protected byte HOPRONZ;
protected byte HOPROPO;
protected byte HOPRORD;
protected byte HOPRORO;
protected byte HOPROSN;
protected byte HOPROSP;
protected byte HOPROWA;
protected byte HOREBFE;
protected short HOREBFL;
protected byte HOREBFR;
protected short HOREBFU;
protected byte HOREBME;
protected short HOREBML;
protected byte HOREBMR;
protected short HOREBMU;
protected byte HOREBOE;
protected short HOREBOL;
protected byte HOREBOR;
protected short HOREBOU;
protected byte HOREBWE;
protected short HOREBWL;
protected byte HOREBWR;
protected short HOREBWU;
protected byte HOREBYE;
protected short HOREBYL;
protected byte HOREBYR;
protected byte HOREBYU;
protected byte HORET;
protected byte HORFEE1;
protected byte HORFEE2;
protected byte HORFEP1;
protected boolean HORFEP2;
protected byte HORHB;
protected byte HORIN96;
protected byte HORIN97;
protected byte HORINHI;
protected byte HORINHR;
protected short HORINM;
protected byte HORINM85;
protected byte HORINM86;
protected byte HORINM96;
protected byte HORINM97;
protected byte HORINME;
protected byte HORINMHI;
protected byte HORINMHR;
protected short HORINML;
protected boolean HORINMOT;
protected byte HORINMPA;
protected byte HORINMR;
protected short HORINMU;
protected byte HORINOT;
protected byte HORINPA;
protected byte HORMAIN;
protected byte HORMO1A;
protected byte HORMO1M;
protected byte HORMO1N;
protected boolean HORMO2A;
protected boolean HORMO2M;
protected byte HORMO2N;
protected byte HORMO3N;
protected boolean HORMO4N;
protected boolean HORMO5N;
protected byte HORMO85;
protected byte HORMO86;
protected boolean HORMOFE;
protected boolean HORMOFL;
protected byte HORMOFP;
protected boolean HORMOFR;
protected boolean HORMOFU;
protected int HORMOL;
protected byte HORMOLA;
protected byte HORMOLE;
protected int HORMOLL;
protected byte HORMOLR;
protected int HORMOLU;
protected byte HORMOM85;
protected byte HORMOM86;
protected byte HORMOMBA;
protected byte HORMOMBQ;
protected boolean HORMOME;
protected byte HORMOMFP;
protected boolean HORMOML;
protected byte HORMOMLA;
protected byte HORMOMNS;
protected boolean HORMOMR;
protected byte HORMOMSH;
protected byte HORMOMSM;
protected boolean HORMOMU;
protected boolean HORMOOE;
protected boolean HORMOOL;
protected boolean HORMOOR;
protected byte HORMOOT;
protected boolean HORMOOU;
protected byte HORMOSH;
protected byte HORMOSM;
protected boolean HORMOWE;
protected boolean HORMOWL;
protected boolean HORMOWR;
protected boolean HORMOWU;
protected boolean HORMOYE;
protected boolean HORMOYL;
protected boolean HORMOYR;
protected boolean HORMOYU;
protected byte HORMS;
protected short HORMU;
protected boolean HORMUFE;
protected boolean HORMUFL;
protected boolean HORMUFR;
protected boolean HORMUFU;
protected boolean HORMUME;
protected boolean HORMUML;
protected boolean HORMUMR;
protected boolean HORMUMU;
protected boolean HORMUO;
protected boolean HORMUOE;
protected boolean HORMUOL;
protected boolean HORMUOR;
protected boolean HORMUOU;
protected boolean HORMUWE;
protected boolean HORMUWL;
protected boolean HORMUWR;
protected boolean HORMUWU;
protected boolean HORMUYE;
protected boolean HORMUYL;
protected boolean HORMUYR;
protected boolean HORMUYU;
protected byte HORMV95;
protected byte HORMVBA;
protected byte HORMVBO;
protected byte HORMVER;
protected byte HORMVHR;
protected byte HORMVIF;
protected byte HORMVJR;
protected byte HORMVMAB;
protected byte HORMVMBA;
protected byte HORMVMBO;
protected byte HORMVMER;
protected byte HORMVMHR;
protected byte HORMVMIF;
protected byte HORMVMJR;
protected byte HORMVMMS;
protected byte HORMVMNF;
protected byte HORMVMNH;
protected byte HORMVMNJ;
protected byte HORMVMOF;
protected byte HORMVMPC;
protected byte HORMVMPN;
protected byte HORMVMS;
protected byte HORMVMSP;
protected byte HORMVNF;
protected byte HORMVNJ;
protected byte HORMVOF;
protected byte HORMVPN;
protected byte HORMVSP;
protected byte HORPAY;
protected byte HORPC;
protected int HORPCM;
protected boolean HORPCME;
protected boolean HORPCML;
protected boolean HORPCMR;
protected boolean HORPCMU;
protected int HORPM;
protected byte HORPME;
protected short HORPML;
protected byte HORPMR;
protected int HORPMU;
protected boolean HORPOF;
protected boolean HORPOFO;
protected byte HORPOS;
protected boolean HORPOSO;
protected boolean HORRM;
protected boolean HORRME;
protected boolean HORRML;
protected boolean HORRMR;
protected boolean HORRMU;
protected byte HOSELL;
protected byte HOSELLE;
protected int HOSELLL;
protected byte HOSELLR;
protected int HOSELLU;
protected double HOSOLD;
protected byte HOSOLDE;
protected int HOSOLDL;
protected byte HOSOLDR;
protected int HOSOLDU;
protected byte HOTENST;
protected short HOTRABCH;
protected int HOTRABGC;
protected short HOTRABNR;
protected int HOTRABOC;
protected int HOTRABOR;
protected int HOTRAN;
protected byte HOTRANCH;
protected byte HOTRANE;
protected byte HOTRANGC;
protected short HOTRANL;
protected byte HOTRANNR;
protected byte HOTRANOC;
protected byte HOTRANOR;
protected byte HOTRANR;
protected short HOTRANU;
protected byte HOTRAPCH;
protected byte HOTRAPGC;
protected byte HOTRAPNR;
protected byte HOTRAPOC;
protected byte HOTRAPOR;
protected byte HOTRPA;
protected byte HOV;
protected byte HOVAG11;
protected byte HOVAG12;
protected byte HOVAG13;
protected byte HOVAG14;
protected byte HOVAG15;
protected byte HOVAG16;
protected int HOVE1A;
protected int HOVE1E;
protected boolean HOVE1M;
protected int HOVE1N;
protected boolean HOVE2A;
protected short HOVE2E;
protected boolean HOVE2M;
protected int HOVE2N;
protected short HOVE3E;
protected short HOVE3N;
protected byte HOVE4E;
protected boolean HOVE4N;
protected byte HOVE5E;
protected boolean HOVE5N;
protected byte HOVEE1A;
protected byte HOVEE1E;
protected boolean HOVEE1M;
protected byte HOVEE1N;
protected boolean HOVEE2A;
protected byte HOVEE2E;
protected boolean HOVEE2M;
protected boolean HOVEE2N;
protected boolean HOVEE3E;
protected boolean HOVEE3N;
protected boolean HOVEE4E;
protected boolean HOVEE4N;
protected boolean HOVEE5E;
protected boolean HOVEE5N;
protected byte HOVEHX;
protected byte HOVEL1A;
protected int HOVEL1E;
protected boolean HOVEL1M;
protected int HOVEL1N;
protected boolean HOVEL2A;
protected boolean HOVEL2E;
protected boolean HOVEL2M;
protected boolean HOVEL2N;
protected boolean HOVEL3E;
protected boolean HOVEL3N;
protected boolean HOVEL4E;
protected boolean HOVEL4N;
protected boolean HOVEL5E;
protected boolean HOVEL5N;
protected String HOVER;
protected String HOVER10;
protected boolean HOVER11;
protected String HOVER12;
protected String HOVER13;
protected boolean HOVER14;
protected boolean HOVER15;
protected String HOVER16;
protected byte HOVER1A;
protected byte HOVER1E;
protected boolean HOVER1M;
protected byte HOVER1N;
protected String HOVER2;
protected boolean HOVER2A;
protected byte HOVER2E;
protected boolean HOVER2M;
protected byte HOVER2N;
protected String HOVER3;
protected boolean HOVER3E;
protected boolean HOVER3N;
protected String HOVER4;
protected boolean HOVER4E;
protected boolean HOVER4N;
protected String HOVER5;
protected boolean HOVER5E;
protected boolean HOVER5N;
protected String HOVER6;
protected String HOVER7;
protected boolean HOVER8;
protected String HOVER9;
protected short HOVEU1A;
protected int HOVEU1E;
protected boolean HOVEU1M;
protected int HOVEU1N;
protected boolean HOVEU2A;
protected short HOVEU2E;
protected boolean HOVEU2M;
protected short HOVEU2N;
protected boolean HOVEU3E;
protected boolean HOVEU3N;
protected boolean HOVEU4E;
protected boolean HOVEU4N;
protected boolean HOVEU5E;
protected boolean HOVEU5N;
protected String HOVLR;
protected String HOVLR10;
protected boolean HOVLR11;
protected boolean HOVLR12;
protected boolean HOVLR13;
protected boolean HOVLR14;
protected String HOVLR15;
protected boolean HOVLR16;
protected String HOVLR2;
protected String HOVLR3;
protected String HOVLR4;
protected String HOVLR5;
protected String HOVLR6;
protected String HOVLR7;
protected String HOVLR8;
protected String HOVLR9;
protected int HOVML1A;
protected int HOVML1E;
protected int HOVML1M;
protected int HOVML1N;
protected short HOVML2A;
protected int HOVML2E;
protected short HOVML2M;
protected int HOVML2N;
protected int HOVML3E;
protected int HOVML3N;
protected int HOVML4E;
protected short HOVML4N;
protected byte HOVML5E;
protected boolean HOVML5N;
protected byte HOVMLE1A;
protected byte HOVMLE1E;
protected boolean HOVMLE1M;
protected byte HOVMLE1N;
protected boolean HOVMLE2A;
protected byte HOVMLE2E;
protected boolean HOVMLE2M;
protected byte HOVMLE2N;
protected boolean HOVMLE3E;
protected byte HOVMLE3N;
protected boolean HOVMLE4E;
protected boolean HOVMLE4N;
protected boolean HOVMLE5E;
protected boolean HOVMLE5N;
protected int HOVMLL1A;
protected int HOVMLL1E;
protected short HOVMLL1M;
protected int HOVMLL1N;
protected boolean HOVMLL2A;
protected int HOVMLL2E;
protected boolean HOVMLL2M;
protected short HOVMLL2N;
protected boolean HOVMLL3E;
protected short HOVMLL3N;
protected boolean HOVMLL4E;
protected short HOVMLL4N;
protected boolean HOVMLL5E;
protected boolean HOVMLL5N;
protected byte HOVMLR1A;
protected byte HOVMLR1E;
protected boolean HOVMLR1M;
protected byte HOVMLR1N;
protected boolean HOVMLR2A;
protected byte HOVMLR2E;
protected boolean HOVMLR2M;
protected byte HOVMLR2N;
protected boolean HOVMLR3E;
protected byte HOVMLR3N;
protected boolean HOVMLR4E;
protected boolean HOVMLR4N;
protected boolean HOVMLR5E;
protected boolean HOVMLR5N;
protected int HOVMLU1A;
protected int HOVMLU1E;
protected short HOVMLU1M;
protected int HOVMLU1N;
protected boolean HOVMLU2A;
protected int HOVMLU2E;
protected boolean HOVMLU2M;
protected int HOVMLU2N;
protected boolean HOVMLU3E;
protected short HOVMLU3N;
protected boolean HOVMLU4E;
protected int HOVMLU4N;
protected boolean HOVMLU5E;
protected boolean HOVMLU5N;
protected byte HOVN;
protected byte HOVNO;
protected byte HOVNO10;
protected byte HOVNO11;
protected byte HOVNO12;
protected byte HOVNO13;
protected byte HOVNO14;
protected byte HOVNO15;
protected byte HOVNO16;
protected byte HOVNO2;
protected byte HOVNO3;
protected byte HOVNO4;
protected byte HOVNO5;
protected byte HOVNO6;
protected byte HOVNO7;
protected byte HOVNO8;
protected byte HOVNO9;
protected byte HOVNR;
protected boolean HOVNR10;
protected byte HOVNR11;
protected boolean HOVNR12;
protected boolean HOVNR13;
protected byte HOVNR14;
protected boolean HOVNR15;
protected boolean HOVNR16;
protected byte HOVNR2;
protected String HOVNR3;
protected byte HOVNR4;
protected byte HOVNR5;
protected byte HOVNR6;
protected byte HOVNR7;
protected byte HOVNR8;
protected byte HOVNR9;
protected byte HOVNW;
protected byte HOVNW10;
protected byte HOVNW11;
protected byte HOVNW12;
protected byte HOVNW13;
protected byte HOVNW14;
protected byte HOVNW15;
protected byte HOVNW16;
protected byte HOVNW2;
protected byte HOVNW3;
protected byte HOVNW5;
protected byte HOVNW6;
protected byte HOVNW7;
protected byte HOVNW8;
protected byte HOVNW9;
protected byte HOVST;
protected byte HOVST10;
protected byte HOVST11;
protected byte HOVST12;
protected byte HOVST13;
protected byte HOVST14;
protected byte HOVST15;
protected byte HOVST16;
protected byte HOVST2;
protected byte HOVST3;
protected byte HOVST4;
protected byte HOVST5;
protected byte HOVST6;
protected byte HOVST7;
protected byte HOVST8;
protected byte HOVST9;
protected byte HOVW1001;
protected byte HOVW1002;
protected byte HOVW1003;
protected byte HOVW1004;
protected byte HOVW1005;
protected byte HOVW1006;
protected byte HOVW1007;
protected byte HOVW1008;
protected byte HOVW1009;
protected byte HOVW101;
protected byte HOVW1010;
protected byte HOVW1011;
protected byte HOVW1012;
protected byte HOVW1013;
protected byte HOVW1014;
protected byte HOVW1015;
protected byte HOVW1016;
protected byte HOVW1017;
protected byte HOVW1018;
protected byte HOVW1019;
protected byte HOVW102;
protected byte HOVW103;
protected byte HOVW104;
protected byte HOVW105;
protected byte HOVW106;
protected byte HOVW107;
protected byte HOVW108;
protected byte HOVW109;
protected byte HOVW11;
protected byte HOVW110;
protected byte HOVW1101;
protected byte HOVW1102;
protected byte HOVW1103;
protected byte HOVW1104;
protected byte HOVW1105;
protected byte HOVW1106;
protected byte HOVW1107;
protected byte HOVW1108;
protected byte HOVW1109;
protected byte HOVW111;
protected byte HOVW1110;
protected byte HOVW1111;
protected byte HOVW1112;
protected byte HOVW1113;
protected byte HOVW1114;
protected byte HOVW1115;
protected byte HOVW1116;
protected byte HOVW1117;
protected byte HOVW1118;
protected byte HOVW1119;
protected byte HOVW112;
protected byte HOVW113;
protected byte HOVW114;
protected byte HOVW115;
protected byte HOVW116;
protected byte HOVW117;
protected byte HOVW118;
protected byte HOVW119;
protected byte HOVW12;
protected byte HOVW1201;
protected byte HOVW1202;
protected byte HOVW1203;
protected byte HOVW1204;
protected byte HOVW1205;
protected byte HOVW1206;
protected byte HOVW1207;
protected byte HOVW1208;
protected byte HOVW1209;
protected byte HOVW1210;
protected byte HOVW1211;
protected byte HOVW1212;
protected byte HOVW1213;
protected byte HOVW1214;
protected byte HOVW1215;
protected byte HOVW1216;
protected byte HOVW1217;
protected byte HOVW1218;
protected byte HOVW1219;
protected byte HOVW13;
protected byte HOVW1301;
protected byte HOVW1302;
protected byte HOVW1303;
protected byte HOVW1304;
protected byte HOVW1305;
protected byte HOVW1306;
protected byte HOVW1307;
protected byte HOVW1308;
protected byte HOVW1309;
protected byte HOVW1310;
protected byte HOVW1311;
protected byte HOVW1312;
protected byte HOVW1313;
protected byte HOVW1314;
protected byte HOVW1315;
protected byte HOVW1316;
protected byte HOVW1317;
protected byte HOVW1318;
protected byte HOVW1319;
protected byte HOVW14;
protected byte HOVW1401;
protected byte HOVW1402;
protected byte HOVW1403;
protected byte HOVW1404;
protected byte HOVW1405;
protected byte HOVW1406;
protected byte HOVW1407;
protected byte HOVW1408;
protected byte HOVW1409;
protected byte HOVW1410;
protected byte HOVW1411;
protected byte HOVW1412;
protected byte HOVW1413;
protected byte HOVW1414;
protected byte HOVW1415;
protected byte HOVW1416;
protected byte HOVW1417;
protected byte HOVW1418;
protected byte HOVW1419;
protected byte HOVW15;
protected byte HOVW1501;
protected byte HOVW1502;
protected byte HOVW1503;
protected byte HOVW1504;
protected byte HOVW1505;
protected byte HOVW1506;
protected byte HOVW1507;
protected byte HOVW1508;
protected byte HOVW1509;
protected byte HOVW1510;
protected byte HOVW1511;
protected byte HOVW1512;
protected byte HOVW1513;
protected byte HOVW1514;
protected byte HOVW1515;
protected byte HOVW1516;
protected byte HOVW1517;
protected byte HOVW1518;
protected byte HOVW1519;
protected byte HOVW16;
protected byte HOVW1601;
protected byte HOVW1602;
protected byte HOVW1603;
protected byte HOVW1604;
protected byte HOVW1605;
protected byte HOVW1606;
protected byte HOVW1607;
protected byte HOVW1608;
protected byte HOVW1609;
protected byte HOVW1610;
protected byte HOVW1611;
protected byte HOVW1612;
protected byte HOVW1613;
protected byte HOVW1614;
protected byte HOVW1615;
protected byte HOVW1616;
protected byte HOVW1617;
protected byte HOVW1618;
protected byte HOVW1619;
protected byte HOVW2;
protected byte HOVW201;
protected byte HOVW202;
protected byte HOVW203;
protected byte HOVW204;
protected byte HOVW205;
protected byte HOVW206;
protected byte HOVW207;
protected byte HOVW208;
protected byte HOVW209;
protected byte HOVW210;
protected byte HOVW211;
protected byte HOVW212;
protected byte HOVW213;
protected byte HOVW214;
protected byte HOVW215;
protected byte HOVW216;
protected byte HOVW217;
protected byte HOVW218;
protected byte HOVW219;
protected byte HOVW3;
protected byte HOVW301;
protected byte HOVW302;
protected byte HOVW303;
protected byte HOVW304;
protected byte HOVW305;
protected byte HOVW306;
protected byte HOVW307;
protected byte HOVW308;
protected byte HOVW309;
protected byte HOVW310;
protected byte HOVW311;
protected byte HOVW312;
protected byte HOVW313;
protected byte HOVW314;
protected byte HOVW315;
protected byte HOVW316;
protected byte HOVW317;
protected byte HOVW318;
protected byte HOVW319;
protected byte HOVW401;
protected byte HOVW402;
protected byte HOVW403;
protected byte HOVW404;
protected byte HOVW405;
protected byte HOVW406;
protected byte HOVW407;
protected byte HOVW408;
protected byte HOVW409;
protected byte HOVW410;
protected byte HOVW411;
protected byte HOVW412;
protected byte HOVW413;
protected byte HOVW414;
protected byte HOVW415;
protected byte HOVW416;
protected byte HOVW417;
protected byte HOVW418;
protected byte HOVW419;
protected byte HOVW5;
protected byte HOVW501;
protected byte HOVW502;
protected byte HOVW503;
protected byte HOVW504;
protected byte HOVW505;
protected byte HOVW506;
protected byte HOVW507;
protected byte HOVW508;
protected byte HOVW509;
protected byte HOVW510;
protected byte HOVW511;
protected byte HOVW512;
protected byte HOVW513;
protected byte HOVW514;
protected byte HOVW515;
protected byte HOVW516;
protected byte HOVW517;
protected byte HOVW518;
protected byte HOVW519;
protected byte HOVW6;
protected byte HOVW601;
protected byte HOVW602;
protected byte HOVW603;
protected byte HOVW604;
protected byte HOVW605;
protected byte HOVW606;
protected byte HOVW607;
protected byte HOVW608;
protected byte HOVW609;
protected byte HOVW610;
protected byte HOVW611;
protected byte HOVW612;
protected byte HOVW613;
protected byte HOVW614;
protected byte HOVW615;
protected byte HOVW616;
protected byte HOVW617;
protected byte HOVW618;
protected byte HOVW619;
protected byte HOVW7;
protected byte HOVW701;
protected byte HOVW702;
protected byte HOVW703;
protected byte HOVW704;
protected byte HOVW705;
protected byte HOVW706;
protected byte HOVW707;
protected byte HOVW708;
protected byte HOVW709;
protected byte HOVW710;
protected byte HOVW711;
protected byte HOVW712;
protected byte HOVW713;
protected byte HOVW714;
protected byte HOVW715;
protected byte HOVW716;
protected byte HOVW717;
protected byte HOVW718;
protected byte HOVW719;
protected byte HOVW8;
protected byte HOVW801;
protected byte HOVW802;
protected byte HOVW803;
protected byte HOVW804;
protected byte HOVW805;
protected byte HOVW806;
protected byte HOVW807;
protected byte HOVW808;
protected byte HOVW809;
protected byte HOVW810;
protected byte HOVW811;
protected byte HOVW812;
protected byte HOVW813;
protected byte HOVW814;
protected byte HOVW815;
protected byte HOVW816;
protected byte HOVW817;
protected byte HOVW818;
protected byte HOVW819;
protected byte HOVW901;
protected byte HOVW902;
protected byte HOVW903;
protected byte HOVW904;
protected byte HOVW905;
protected byte HOVW906;
protected byte HOVW907;
protected byte HOVW908;
protected byte HOVW909;
protected byte HOVW910;
protected byte HOVW911;
protected byte HOVW912;
protected byte HOVW913;
protected byte HOVW914;
protected byte HOVW915;
protected byte HOVW916;
protected byte HOVW917;
protected byte HOVW918;
protected byte HOVW919;
protected short HOVYR;
protected short HOVYR10;
protected short HOVYR11;
protected short HOVYR12;
protected short HOVYR13;
protected short HOVYR14;
protected short HOVYR15;
protected short HOVYR16;
protected short HOVYR2;
protected short HOVYR3;
protected short HOVYR4;
protected short HOVYR5;
protected short HOVYR6;
protected short HOVYR7;
protected short HOVYR8;
protected short HOVYR9;
protected byte HOWH1;
protected byte HOWH10;
protected byte HOWH11;
protected byte HOWH12;
protected byte HOWH2;
protected byte HOWH3;
protected byte HOWH4;
protected byte HOWH5;
protected byte HOWH6;
protected byte HOWH7;
protected byte HOWH8;
protected byte HOWH9;
protected byte HOWH97;
protected boolean HOX;
protected byte HOYML1A;
protected byte HOYML1E;
protected byte HOYML1M;
protected byte HOYML1N;
protected boolean HOYML2A;
protected byte HOYML2E;
protected boolean HOYML2M;
protected byte HOYML2N;
protected byte HOYML3E;
protected byte HOYML3N;
protected boolean HOYML4E;
protected boolean HOYML4N;
protected boolean HOYML5E;
protected boolean HOYML5N;
protected double HSCRP;
protected double HTFEV;
protected double HTFVC;
protected byte HTOK;
protected short HTPF;
protected double HTVAL;
protected short IAA39;
protected boolean IAA39FE;
protected boolean IAA39FL;
protected boolean IAA39FR;
protected boolean IAA39FU;
protected byte IAA39ME;
protected short IAA39ML;
protected boolean IAA39MR;
protected short IAA39MU;
protected byte IAA39OE;
protected boolean IAA39OL;
protected byte IAA39OR;
protected short IAA39OU;
protected byte IAA39WE;
protected boolean IAA39WL;
protected boolean IAA39WR;
protected boolean IAA39WU;
protected boolean IAA39YE;
protected boolean IAA39YL;
protected boolean IAA39YR;
protected boolean IAA39YU;
protected short IAA40;
protected boolean IAA40FE;
protected boolean IAA40FL;
protected boolean IAA40FR;
protected boolean IAA40FU;
protected byte IAA40ME;
protected short IAA40ML;
protected boolean IAA40MR;
protected short IAA40MU;
protected byte IAA40OE;
protected short IAA40OL;
protected byte IAA40OR;
protected short IAA40OU;
protected boolean IAA40WE;
protected boolean IAA40WL;
protected boolean IAA40WR;
protected boolean IAA40WU;
protected boolean IAA40YE;
protected boolean IAA40YL;
protected boolean IAA40YR;
protected boolean IAA40YU;
protected short IAA41;
protected byte IAA41FE;
protected short IAA41FL;
protected byte IAA41FR;
protected short IAA41FU;
protected boolean IAA41ME;
protected boolean IAA41ML;
protected boolean IAA41MR;
protected short IAA41MU;
protected byte IAA41OE;
protected short IAA41OL;
protected byte IAA41OR;
protected short IAA41OU;
protected byte IAA41WE;
protected byte IAA41WL;
protected byte IAA41WR;
protected byte IAA41WU;
protected boolean IAA41YE;
protected boolean IAA41YL;
protected boolean IAA41YR;
protected boolean IAA41YU;
protected short IAA42;
protected boolean IAA42FE;
protected boolean IAA42FL;
protected boolean IAA42FR;
protected boolean IAA42FU;
protected byte IAA42ME;
protected short IAA42ML;
protected byte IAA42MR;
protected short IAA42MU;
protected byte IAA42OE;
protected short IAA42OL;
protected byte IAA42OR;
protected short IAA42OU;
protected byte IAA42WE;
protected short IAA42WL;
protected byte IAA42WR;
protected short IAA42WU;
protected boolean IAA42YE;
protected boolean IAA42YL;
protected boolean IAA42YR;
protected short IAA42YU;
protected short IAA43;
protected boolean IAA43FE;
protected boolean IAA43FL;
protected boolean IAA43FR;
protected boolean IAA43FU;
protected byte IAA43ME;
protected short IAA43ML;
protected byte IAA43MR;
protected short IAA43MU;
protected byte IAA43OE;
protected byte IAA43OL;
protected byte IAA43OR;
protected short IAA43OU;
protected byte IAA43WE;
protected boolean IAA43WL;
protected boolean IAA43WR;
protected boolean IAA43WU;
protected boolean IAA43YE;
protected boolean IAA43YL;
protected boolean IAA43YR;
protected boolean IAA43YU;
protected short IAA44;
protected boolean IAA44FE;
protected boolean IAA44FL;
protected boolean IAA44FR;
protected boolean IAA44FU;
protected byte IAA44ME;
protected short IAA44ML;
protected boolean IAA44MR;
protected short IAA44MU;
protected byte IAA44OE;
protected short IAA44OL;
protected byte IAA44OR;
protected short IAA44OU;
protected byte IAA44WE;
protected boolean IAA44WL;
protected byte IAA44WR;
protected byte IAA44WU;
protected boolean IAA44YE;
protected boolean IAA44YL;
protected boolean IAA44YR;
protected boolean IAA44YU;
protected short IAA45;
protected boolean IAA45FE;
protected boolean IAA45FL;
protected boolean IAA45FR;
protected boolean IAA45FU;
protected byte IAA45ME;
protected short IAA45ML;
protected byte IAA45MR;
protected short IAA45MU;
protected byte IAA45OE;
protected short IAA45OL;
protected byte IAA45OR;
protected short IAA45OU;
protected byte IAA45WE;
protected byte IAA45WL;
protected byte IAA45WR;
protected short IAA45WU;
protected boolean IAA45YE;
protected boolean IAA45YL;
protected boolean IAA45YR;
protected boolean IAA45YU;
protected short IAA46;
protected boolean IAA46FE;
protected short IAA46FL;
protected boolean IAA46FR;
protected short IAA46FU;
protected byte IAA46ME;
protected short IAA46ML;
protected byte IAA46MR;
protected short IAA46MU;
protected byte IAA46OE;
protected short IAA46OL;
protected byte IAA46OR;
protected short IAA46OU;
protected byte IAA46WE;
protected byte IAA46WL;
protected boolean IAA46WR;
protected byte IAA46WU;
protected boolean IAA46YE;
protected boolean IAA46YL;
protected boolean IAA46YR;
protected boolean IAA46YU;
protected short IAA47;
protected boolean IAA47FE;
protected boolean IAA47FL;
protected boolean IAA47FR;
protected boolean IAA47FU;
protected byte IAA47ME;
protected short IAA47ML;
protected boolean IAA47MR;
protected short IAA47MU;
protected byte IAA47OE;
protected short IAA47OL;
protected byte IAA47OR;
protected short IAA47OU;
protected byte IAA47WE;
protected byte IAA47WL;
protected byte IAA47WR;
protected byte IAA47WU;
protected boolean IAA47YE;
protected boolean IAA47YL;
protected boolean IAA47YR;
protected short IAA47YU;
protected short IAA48;
protected boolean IAA48FE;
protected boolean IAA48FL;
protected boolean IAA48FR;
protected boolean IAA48FU;
protected boolean IAA48ME;
protected boolean IAA48ML;
protected boolean IAA48MR;
protected short IAA48MU;
protected byte IAA48OE;
protected short IAA48OL;
protected byte IAA48OR;
protected short IAA48OU;
protected byte IAA48WE;
protected byte IAA48WL;
protected boolean IAA48WR;
protected short IAA48WU;
protected boolean IAA48YE;
protected boolean IAA48YL;
protected boolean IAA48YR;
protected boolean IAA48YU;
protected short IAA49;
protected boolean IAA49FE;
protected boolean IAA49FL;
protected boolean IAA49FR;
protected boolean IAA49FU;
protected boolean IAA49ME;
protected boolean IAA49ML;
protected boolean IAA49MR;
protected short IAA49MU;
protected boolean IAA49OE;
protected boolean IAA49OL;
protected boolean IAA49OR;
protected short IAA49OU;
protected boolean IAA49WE;
protected boolean IAA49WL;
protected boolean IAA49WR;
protected boolean IAA49WU;
protected boolean IAA49YE;
protected boolean IAA49YL;
protected boolean IAA49YR;
protected boolean IAA49YU;
protected short IAA50;
protected boolean IAA50FE;
protected boolean IAA50FL;
protected boolean IAA50FR;
protected boolean IAA50FU;
protected boolean IAA50ME;
protected boolean IAA50ML;
protected boolean IAA50MR;
protected boolean IAA50MU;
protected boolean IAA50OE;
protected boolean IAA50OL;
protected boolean IAA50OR;
protected boolean IAA50OU;
protected byte IAA50WE;
protected byte IAA50WL;
protected byte IAA50WR;
protected byte IAA50WU;
protected boolean IAA50YE;
protected boolean IAA50YL;
protected boolean IAA50YR;
protected boolean IAA50YU;
protected short IAA51;
protected boolean IAA51FE;
protected boolean IAA51FL;
protected boolean IAA51FR;
protected boolean IAA51FU;
protected boolean IAA51ME;
protected boolean IAA51ML;
protected boolean IAA51MR;
protected boolean IAA51MU;
protected byte IAA51OE;
protected short IAA51OL;
protected byte IAA51OR;
protected short IAA51OU;
protected boolean IAA51WE;
protected boolean IAA51WL;
protected boolean IAA51WR;
protected boolean IAA51WU;
protected boolean IAA51YE;
protected boolean IAA51YL;
protected boolean IAA51YR;
protected boolean IAA51YU;
protected short IAA52;
protected boolean IAA52FE;
protected boolean IAA52FL;
protected boolean IAA52FR;
protected boolean IAA52FU;
protected boolean IAA52ME;
protected boolean IAA52ML;
protected boolean IAA52MR;
protected short IAA52MU;
protected byte IAA52OE;
protected boolean IAA52OL;
protected byte IAA52OR;
protected short IAA52OU;
protected boolean IAA52WE;
protected boolean IAA52WL;
protected boolean IAA52WR;
protected boolean IAA52WU;
protected boolean IAA52YE;
protected boolean IAA52YL;
protected boolean IAA52YR;
protected boolean IAA52YU;
protected short IAA53;
protected boolean IAA53FE;
protected boolean IAA53FL;
protected boolean IAA53FR;
protected boolean IAA53FU;
protected boolean IAA53ME;
protected boolean IAA53ML;
protected boolean IAA53MR;
protected short IAA53MU;
protected byte IAA53OE;
protected boolean IAA53OL;
protected byte IAA53OR;
protected short IAA53OU;
protected byte IAA53WE;
protected boolean IAA53WL;
protected byte IAA53WR;
protected byte IAA53WU;
protected boolean IAA53YE;
protected boolean IAA53YL;
protected boolean IAA53YR;
protected boolean IAA53YU;
protected short IAA54;
protected boolean IAA54FE;
protected boolean IAA54FL;
protected boolean IAA54FR;
protected boolean IAA54FU;
protected boolean IAA54ME;
protected short IAA54ML;
protected boolean IAA54MR;
protected short IAA54MU;
protected byte IAA54OE;
protected short IAA54OL;
protected byte IAA54OR;
protected short IAA54OU;
protected boolean IAA54WE;
protected boolean IAA54WL;
protected boolean IAA54WR;
protected boolean IAA54WU;
protected boolean IAA54YE;
protected boolean IAA54YL;
protected boolean IAA54YR;
protected short IAA54YU;
protected short IAA55;
protected byte IAA55FE;
protected byte IAA55FL;
protected boolean IAA55FR;
protected byte IAA55FU;
protected boolean IAA55ME;
protected short IAA55ML;
protected boolean IAA55MR;
protected short IAA55MU;
protected byte IAA55OE;
protected short IAA55OL;
protected byte IAA55OR;
protected short IAA55OU;
protected byte IAA55WE;
protected short IAA55WL;
protected byte IAA55WR;
protected short IAA55WU;
protected boolean IAA55YE;
protected boolean IAA55YL;
protected boolean IAA55YR;
protected boolean IAA55YU;
protected short IAA56;
protected boolean IAA56FE;
protected boolean IAA56FL;
protected boolean IAA56FR;
protected boolean IAA56FU;
protected boolean IAA56ME;
protected short IAA56ML;
protected boolean IAA56MR;
protected short IAA56MU;
protected byte IAA56OE;
protected byte IAA56OL;
protected byte IAA56OR;
protected short IAA56OU;
protected byte IAA56WE;
protected byte IAA56WL;
protected byte IAA56WR;
protected byte IAA56WU;
protected boolean IAA56YE;
protected boolean IAA56YL;
protected boolean IAA56YR;
protected boolean IAA56YU;
protected short IAA57;
protected boolean IAA57FE;
protected boolean IAA57FL;
protected boolean IAA57FR;
protected boolean IAA57FU;
protected boolean IAA57ME;
protected boolean IAA57ML;
protected boolean IAA57MR;
protected boolean IAA57MU;
protected boolean IAA57OE;
protected boolean IAA57OL;
protected boolean IAA57OR;
protected short IAA57OU;
protected boolean IAA57WE;
protected boolean IAA57WL;
protected boolean IAA57WR;
protected boolean IAA57WU;
protected boolean IAA57YE;
protected boolean IAA57YL;
protected boolean IAA57YR;
protected boolean IAA57YU;
protected short IAA58;
protected boolean IAA58FE;
protected boolean IAA58FL;
protected boolean IAA58FR;
protected boolean IAA58FU;
protected boolean IAA58ME;
protected boolean IAA58ML;
protected boolean IAA58MR;
protected boolean IAA58MU;
protected boolean IAA58OE;
protected boolean IAA58OL;
protected boolean IAA58OR;
protected boolean IAA58OU;
protected boolean IAA58WE;
protected boolean IAA58WL;
protected boolean IAA58WR;
protected boolean IAA58WU;
protected boolean IAA58YE;
protected boolean IAA58YL;
protected boolean IAA58YR;
protected boolean IAA58YU;
protected short IAA59;
protected boolean IAA59FE;
protected boolean IAA59FL;
protected boolean IAA59FR;
protected boolean IAA59FU;
protected boolean IAA59ME;
protected boolean IAA59ML;
protected boolean IAA59MR;
protected boolean IAA59MU;
protected boolean IAA59OE;
protected boolean IAA59OL;
protected boolean IAA59OR;
protected boolean IAA59OU;
protected boolean IAA59WE;
protected boolean IAA59WL;
protected boolean IAA59WR;
protected boolean IAA59WU;
protected boolean IAA59YE;
protected boolean IAA59YL;
protected boolean IAA59YR;
protected boolean IAA59YU;
protected short IAA60;
protected boolean IAA60FE;
protected boolean IAA60FL;
protected boolean IAA60FR;
protected boolean IAA60FU;
protected byte IAA60ME;
protected boolean IAA60ML;
protected boolean IAA60MR;
protected short IAA60MU;
protected byte IAA60OE;
protected short IAA60OL;
protected boolean IAA60OR;
protected short IAA60OU;
protected boolean IAA60WE;
protected boolean IAA60WL;
protected boolean IAA60WR;
protected boolean IAA60WU;
protected boolean IAA60YE;
protected boolean IAA60YL;
protected boolean IAA60YR;
protected boolean IAA60YU;
protected short IAA61;
protected boolean IAA61FE;
protected boolean IAA61FL;
protected boolean IAA61FR;
protected boolean IAA61FU;
protected byte IAA61ME;
protected short IAA61ML;
protected boolean IAA61MR;
protected short IAA61MU;
protected byte IAA61OE;
protected boolean IAA61OL;
protected byte IAA61OR;
protected short IAA61OU;
protected boolean IAA61WE;
protected boolean IAA61WL;
protected boolean IAA61WR;
protected boolean IAA61WU;
protected boolean IAA61YE;
protected boolean IAA61YL;
protected boolean IAA61YR;
protected boolean IAA61YU;
protected short IAA62;
protected boolean IAA62FE;
protected boolean IAA62FL;
protected boolean IAA62FR;
protected boolean IAA62FU;
protected boolean IAA62ME;
protected boolean IAA62ML;
protected boolean IAA62MR;
protected short IAA62MU;
protected byte IAA62OE;
protected short IAA62OL;
protected byte IAA62OR;
protected short IAA62OU;
protected boolean IAA62WE;
protected boolean IAA62WL;
protected boolean IAA62WR;
protected boolean IAA62WU;
protected boolean IAA62YE;
protected boolean IAA62YL;
protected boolean IAA62YR;
protected boolean IAA62YU;
protected short IAA63;
protected boolean IAA63FE;
protected boolean IAA63FL;
protected boolean IAA63FR;
protected boolean IAA63FU;
protected boolean IAA63ME;
protected boolean IAA63ML;
protected boolean IAA63MR;
protected boolean IAA63MU;
protected boolean IAA63OE;
protected boolean IAA63OL;
protected boolean IAA63OR;
protected boolean IAA63OU;
protected boolean IAA63WE;
protected boolean IAA63WL;
protected boolean IAA63WR;
protected boolean IAA63WU;
protected boolean IAA63YE;
protected boolean IAA63YL;
protected boolean IAA63YR;
protected boolean IAA63YU;
protected short IAA64;
protected boolean IAA64FE;
protected boolean IAA64FL;
protected boolean IAA64FR;
protected boolean IAA64FU;
protected boolean IAA64ME;
protected boolean IAA64ML;
protected boolean IAA64MR;
protected short IAA64MU;
protected boolean IAA64OE;
protected boolean IAA64OL;
protected byte IAA64OR;
protected short IAA64OU;
protected boolean IAA64WE;
protected boolean IAA64WL;
protected boolean IAA64WR;
protected boolean IAA64WU;
protected boolean IAA64YE;
protected boolean IAA64YL;
protected boolean IAA64YR;
protected boolean IAA64YU;
protected short IAA65;
protected boolean IAA65FE;
protected boolean IAA65FL;
protected boolean IAA65FR;
protected boolean IAA65FU;
protected byte IAA65ME;
protected short IAA65ML;
protected byte IAA65MR;
protected short IAA65MU;
protected boolean IAA65OE;
protected boolean IAA65OL;
protected boolean IAA65OR;
protected short IAA65OU;
protected byte IAA65WE;
protected boolean IAA65WL;
protected byte IAA65WR;
protected byte IAA65WU;
protected boolean IAA65YE;
protected boolean IAA65YL;
protected boolean IAA65YR;
protected boolean IAA65YU;
protected short IAA66;
protected boolean IAA66FE;
protected boolean IAA66FL;
protected boolean IAA66FR;
protected boolean IAA66FU;
protected boolean IAA66ME;
protected boolean IAA66ML;
protected boolean IAA66MR;
protected boolean IAA66MU;
protected boolean IAA66OE;
protected boolean IAA66OL;
protected boolean IAA66OR;
protected short IAA66OU;
protected boolean IAA66WE;
protected boolean IAA66WL;
protected boolean IAA66WR;
protected boolean IAA66WU;
protected boolean IAA66YE;
protected boolean IAA66YL;
protected boolean IAA66YR;
protected boolean IAA66YU;
protected byte IAA67;
protected boolean IAA67FE;
protected boolean IAA67FL;
protected boolean IAA67FR;
protected short IAA67FU;
protected boolean IAA67ME;
protected boolean IAA67ML;
protected boolean IAA67MR;
protected boolean IAA67MU;
protected boolean IAA67OE;
protected boolean IAA67OL;
protected boolean IAA67OR;
protected boolean IAA67OU;
protected boolean IAA67WE;
protected boolean IAA67WL;
protected boolean IAA67WR;
protected boolean IAA67WU;
protected boolean IAA67YE;
protected boolean IAA67YL;
protected boolean IAA67YR;
protected boolean IAA67YU;
protected short IAA68;
protected boolean IAA68FE;
protected boolean IAA68FL;
protected boolean IAA68FR;
protected boolean IAA68FU;
protected boolean IAA68ME;
protected boolean IAA68ML;
protected boolean IAA68MR;
protected boolean IAA68MU;
protected boolean IAA68OE;
protected boolean IAA68OL;
protected boolean IAA68OR;
protected boolean IAA68OU;
protected boolean IAA68WE;
protected boolean IAA68WL;
protected boolean IAA68WR;
protected boolean IAA68WU;
protected boolean IAA68YE;
protected boolean IAA68YL;
protected boolean IAA68YR;
protected boolean IAA68YU;
protected short IAA69;
protected boolean IAA69FE;
protected boolean IAA69FL;
protected boolean IAA69FR;
protected boolean IAA69FU;
protected boolean IAA69ME;
protected boolean IAA69ML;
protected boolean IAA69MR;
protected boolean IAA69MU;
protected boolean IAA69OE;
protected boolean IAA69OL;
protected boolean IAA69OR;
protected boolean IAA69OU;
protected boolean IAA69WE;
protected boolean IAA69WL;
protected boolean IAA69WR;
protected boolean IAA69WU;
protected boolean IAA69YE;
protected boolean IAA69YL;
protected boolean IAA69YR;
protected boolean IAA69YU;
protected short IAA70;
protected boolean IAA70FE;
protected boolean IAA70FL;
protected boolean IAA70FR;
protected boolean IAA70FU;
protected boolean IAA70ME;
protected boolean IAA70ML;
protected boolean IAA70MR;
protected boolean IAA70MU;
protected boolean IAA70OE;
protected boolean IAA70OL;
protected boolean IAA70OR;
protected boolean IAA70OU;
protected boolean IAA70WE;
protected boolean IAA70WL;
protected boolean IAA70WR;
protected boolean IAA70WU;
protected boolean IAA70YE;
protected boolean IAA70YL;
protected boolean IAA70YR;
protected boolean IAA70YU;
protected short IAA71;
protected boolean IAA71FE;
protected boolean IAA71FL;
protected boolean IAA71FR;
protected boolean IAA71FU;
protected boolean IAA71ME;
protected boolean IAA71ML;
protected boolean IAA71MR;
protected short IAA71MU;
protected boolean IAA71OE;
protected boolean IAA71OL;
protected boolean IAA71OR;
protected boolean IAA71OU;
protected boolean IAA71WE;
protected boolean IAA71WL;
protected boolean IAA71WR;
protected boolean IAA71WU;
protected boolean IAA71YE;
protected boolean IAA71YL;
protected boolean IAA71YR;
protected boolean IAA71YU;
protected byte IAA72;
protected boolean IAA72FE;
protected boolean IAA72FL;
protected boolean IAA72FR;
protected boolean IAA72FU;
protected boolean IAA72ME;
protected boolean IAA72ML;
protected boolean IAA72MR;
protected boolean IAA72MU;
protected boolean IAA72OE;
protected boolean IAA72OL;
protected boolean IAA72OR;
protected short IAA72OU;
protected boolean IAA72WE;
protected boolean IAA72WL;
protected boolean IAA72WR;
protected boolean IAA72WU;
protected boolean IAA72YE;
protected boolean IAA72YL;
protected boolean IAA72YR;
protected boolean IAA72YU;
protected byte IAAIPE;
protected short IAAIPL;
protected byte IAAIPR;
protected short IAAIPU;
protected byte IAB10;
protected byte IAB11;
protected byte IAB12;
protected byte IAB13;
protected byte IAB14;
protected byte IAB15;
protected byte IAB16;
protected byte IAB17;
protected byte IAB18;
protected byte IAB28;
protected byte IAB29;
protected byte IAB30;
protected byte IAB31;
protected byte IAB32;
protected byte IAB33;
protected byte IAB34;
protected byte IAB35;
protected byte IAB36;
protected byte IAB46;
protected byte IAB47;
protected byte IAB48;
protected byte IAB49;
protected byte IAB50;
protected byte IAB51;
protected byte IAB52;
protected byte IAB53;
protected byte IAB54;
protected byte IAB64;
protected byte IAB65;
protected byte IAB66;
protected byte IAB67;
protected byte IAB68;
protected boolean IAB69;
protected byte IAB70;
protected byte IAB71;
protected byte IAB72;
protected byte IABEB;
protected byte IABEN95;
protected byte IABEN96;
protected byte IABENCB;
protected byte IABENCC;
protected byte IABENGA;
protected byte IABENIS;
protected byte IABENJA;
protected byte IABENPC;
protected byte IABENTC;
protected byte IABENWP;
protected byte IABEP95;
protected byte IABEP96;
protected byte IABEPCB;
protected byte IABEPCC;
protected byte IABEPGA;
protected byte IABEPIS;
protected byte IABEPJA;
protected byte IABEPM85;
protected byte IABEPM86;
protected byte IABEPM96;
protected byte IABEPMCB;
protected byte IABEPMCC;
protected byte IABEPMFP;
protected byte IABEPMGA;
protected byte IABEPMIS;
protected byte IABEPMJA;
protected byte IABEPMPC;
protected byte IABEPMTC;
protected byte IABEPMWP;
protected byte IABEPN95;
protected byte IABEPN96;
protected byte IABEPNCB;
protected byte IABEPNCC;
protected byte IABEPNGA;
protected byte IABEPNIS;
protected byte IABEPNJA;
protected byte IABEPNPC;
protected byte IABEPNWC;
protected byte IABEPNWP;
protected byte IABEPPC;
protected byte IABEPTC;
protected byte IABEPWP;
protected byte IABER95;
protected byte IABER96;
protected byte IABERCB;
protected byte IABERCC;
protected byte IABERGA;
protected byte IABERIS;
protected byte IABERJA;
protected byte IABERM85;
protected byte IABERM86;
protected byte IABERM96;
protected byte IABERMCB;
protected byte IABERMCC;
protected byte IABERMFP;
protected byte IABERMGA;
protected byte IABERMIS;
protected byte IABERMJA;
protected byte IABERMPC;
protected byte IABERMTC;
protected byte IABERMWP;
protected byte IABERPC;
protected byte IABERTC;
protected byte IABERWP;
protected byte IABM10;
protected byte IABM11;
protected byte IABM12;
protected byte IABM13;
protected byte IABM14;
protected byte IABM15;
protected boolean IABM16;
protected byte IABM17;
protected byte IABM18;
protected byte IABM28;
protected byte IABM29;
protected byte IABM30;
protected byte IABM31;
protected byte IABM32;
protected byte IABM33;
protected boolean IABM34;
protected byte IABM35;
protected byte IABM36;
protected byte IABM46;
protected byte IABM47;
protected byte IABM48;
protected byte IABM49;
protected byte IABM50;
protected byte IABM51;
protected byte IABM52;
protected byte IABM53;
protected byte IABM54;
protected byte IABM64;
protected byte IABM65;
protected byte IABM66;
protected byte IABM67;
protected byte IABM68;
protected boolean IABM69;
protected byte IABM70;
protected byte IABM71;
protected boolean IABM72;
protected byte IABW10;
protected byte IABW11;
protected byte IABW12;
protected byte IABW13;
protected byte IABW14;
protected byte IABW15;
protected byte IABW16;
protected byte IABW17;
protected byte IABW18;
protected byte IABW28;
protected boolean IABW29;
protected byte IABW30;
protected byte IABW31;
protected byte IABW32;
protected byte IABW33;
protected byte IABW34;
protected byte IABW35;
protected boolean IABW36;
protected byte IABW46;
protected byte IABW47;
protected byte IABW48;
protected byte IABW49;
protected byte IABW50;
protected byte IABW51;
protected byte IABW52;
protected byte IABW53;
protected byte IABW54;
protected byte IABW64;
protected byte IABW65;
protected boolean IABW66;
protected byte IABW67;
protected boolean IABW68;
protected boolean IABW69;
protected byte IABW70;
protected byte IABW71;
protected byte IABW72;
protected byte IACISAE;
protected short IACISAL;
protected byte IACISAR;
protected short IACISAU;
protected byte IADATM;
protected short IADATY;
protected byte IADEBME;
protected short IADEBML;
protected byte IADEBMR;
protected short IADEBMU;
protected byte IAEA10E;
protected short IAEA10L;
protected byte IAEA10R;
protected short IAEA10U;
protected boolean IAEA11E;
protected byte IAEA11L;
protected boolean IAEA11R;
protected short IAEA11U;
protected byte IAEAR2E;
protected int IAEAR2L;
protected byte IAEAR2R;
protected int IAEAR2U;
protected byte IAEAR3E;
protected int IAEAR3L;
protected byte IAEAR3R;
protected int IAEAR3U;
protected byte IAEAR4E;
protected int IAEAR4L;
protected byte IAEAR4R;
protected int IAEAR4U;
protected byte IAEAR5E;
protected int IAEAR5L;
protected byte IAEAR5R;
protected int IAEAR5U;
protected byte IAEAR6E;
protected int IAEAR6L;
protected byte IAEAR6R;
protected int IAEAR6U;
protected byte IAEAR7E;
protected int IAEAR7L;
protected byte IAEAR7R;
protected int IAEAR7U;
protected byte IAEAR8E;
protected int IAEAR8L;
protected byte IAEAR8R;
protected int IAEAR8U;
protected byte IAEAR9E;
protected short IAEAR9L;
protected byte IAEAR9R;
protected short IAEAR9U;
protected byte IAEARE;
protected int IAEARL;
protected boolean IAEARN11;
protected byte IAEARR;
protected int IAEARU;
protected short IAERN;
protected byte IAERN10;
protected int IAERN2;
protected int IAERN3;
protected int IAERN4;
protected int IAERN5;
protected short IAERN6;
protected short IAERN7;
protected short IAERN8;
protected byte IAERN9;
protected byte IAFBAE;
protected int IAFBAL;
protected byte IAFBAR;
protected int IAFBAU;
protected byte IAFUEL;
protected byte IAHDB;
protected byte IAHDN95;
protected byte IAHDN96;
protected byte IAHDNAA;
protected byte IAHDNCA;
protected byte IAHDNDL;
protected byte IAHDNIB;
protected byte IAHDNII;
protected byte IAHDNSD;
protected byte IAHDNSP;
protected byte IAHDNWD;
protected byte IAHDP95;
protected byte IAHDP96;
protected byte IAHDPAA;
protected byte IAHDPCA;
protected byte IAHDPDL;
protected byte IAHDPIB;
protected byte IAHDPII;
protected byte IAHDPM85;
protected byte IAHDPM86;
protected byte IAHDPM96;
protected byte IAHDPMAA;
protected byte IAHDPMCA;
protected byte IAHDPMDL;
protected byte IAHDPMIB;
protected byte IAHDPMII;
protected byte IAHDPMSD;
protected byte IAHDPMSP;
protected byte IAHDPMWD;
protected byte IAHDPN85;
protected byte IAHDPN96;
protected byte IAHDPNAA;
protected byte IAHDPNCA;
protected byte IAHDPNDL;
protected byte IAHDPNIB;
protected byte IAHDPNII;
protected byte IAHDPNSD;
protected byte IAHDPNSP;
protected byte IAHDPNWD;
protected byte IAHDPSD;
protected byte IAHDPSP;
protected byte IAHDPWD;
protected byte IAHDR95;
protected byte IAHDR96;
protected byte IAHDRAA;
protected byte IAHDRCA;
protected byte IAHDRDL;
protected byte IAHDRIB;
protected byte IAHDRII;
protected byte IAHDRM85;
protected byte IAHDRM86;
protected byte IAHDRM96;
protected byte IAHDRMAA;
protected byte IAHDRMCA;
protected byte IAHDRMDL;
protected byte IAHDRMIB;
protected byte IAHDRMII;
protected byte IAHDRMOT;
protected byte IAHDRMSD;
protected byte IAHDRMSP;
protected byte IAHDRMWD;
protected byte IAHDRSD;
protected byte IAHDRSP;
protected byte IAHDRWD;
protected byte IAHOMEE;
protected int IAHOMEL;
protected byte IAHOMER;
protected int IAHOMEU;
protected byte IAIRAE;
protected int IAIRAL;
protected byte IAIRAR;
protected int IAIRAU;
protected byte IAISACAS;
protected byte IAISADE;
protected short IAISADL;
protected byte IAISADR;
protected short IAISADU;
protected byte IAISALI;
protected byte IAISASHA;
protected byte IALIPAE;
protected int IALIPAL;
protected byte IALIPAR;
protected int IALIPAU;
protected byte IALISAE;
protected short IALISAL;
protected byte IALISAR;
protected short IALISAU;
protected byte IALIYAE;
protected int IALIYAL;
protected byte IALIYAR;
protected int IALIYAU;
protected byte IALM19;
protected boolean IALM20;
protected byte IALM21;
protected byte IALM22;
protected byte IALM23;
protected byte IALM24;
protected byte IALM25;
protected byte IALM26;
protected byte IALM27;
protected byte IALM37;
protected byte IALM38;
protected byte IALM39;
protected byte IALM40;
protected byte IALM41;
protected byte IALM42;
protected byte IALM43;
protected byte IALM44;
protected byte IALM45;
protected byte IALM55;
protected byte IALM56;
protected byte IALM57;
protected byte IALM58;
protected boolean IALM59;
protected byte IALM60;
protected byte IALM61;
protected byte IALM62;
protected byte IALM63;
protected byte IALOAME;
protected short IALOAML;
protected byte IALOAMR;
protected short IALOAMU;
protected byte IALOAN96;
protected byte IALOANHP;
protected byte IALOANML;
protected byte IALOANMO;
protected byte IALOANOD;
protected byte IALOANPL;
protected byte IALOANSF;
protected byte IALREFE;
protected byte IALREFL;
protected byte IALREFR;
protected byte IALREFU;
protected byte IALREME;
protected short IALREML;
protected byte IALREMR;
protected short IALREMU;
protected byte IALREOE;
protected short IALREOL;
protected byte IALREOR;
protected short IALREOU;
protected byte IALREWE;
protected short IALREWL;
protected byte IALREWR;
protected byte IALREWU;
protected byte IALREYE;
protected short IALREYL;
protected byte IALREYR;
protected short IALREYU;
protected byte IALY;
protected byte IALY10;
protected boolean IALY11;
protected boolean IALY12;
protected boolean IALY13;
protected boolean IALY14;
protected boolean IALY15;
protected boolean IALY16;
protected boolean IALY17;
protected boolean IALY18;
protected byte IALY19;
protected byte IALY2;
protected byte IALY20;
protected byte IALY21;
protected byte IALY22;
protected byte IALY23;
protected byte IALY24;
protected byte IALY25;
protected byte IALY26;
protected byte IALY27;
protected byte IALY28;
protected boolean IALY29;
protected byte IALY3;
protected boolean IALY30;
protected boolean IALY31;
protected boolean IALY32;
protected boolean IALY33;
protected boolean IALY34;
protected boolean IALY35;
protected boolean IALY36;
protected byte IALY37;
protected byte IALY38;
protected byte IALY39;
protected byte IALY4;
protected byte IALY40;
protected byte IALY41;
protected byte IALY42;
protected byte IALY43;
protected byte IALY44;
protected byte IALY45;
protected byte IALY46;
protected byte IALY47;
protected boolean IALY48;
protected boolean IALY49;
protected byte IALY5;
protected boolean IALY50;
protected boolean IALY51;
protected boolean IALY52;
protected boolean IALY53;
protected boolean IALY54;
protected byte IALY55;
protected byte IALY56;
protected byte IALY57;
protected byte IALY58;
protected boolean IALY59;
protected byte IALY6;
protected byte IALY60;
protected byte IALY61;
protected byte IALY62;
protected byte IALY63;
protected byte IALY7;
protected byte IALY8;
protected boolean IALY9;
protected byte IANPBPE;
protected short IANPBPL;
protected byte IANPBPR;
protected short IANPBPU;
protected byte IAOASAE;
protected int IAOASAL;
protected byte IAOASAR;
protected int IAOASAU;
protected byte IAOMME;
protected int IAOMML;
protected byte IAOMMR;
protected int IAOMMU;
protected byte IAOTHP3;
protected byte IAOWEME;
protected short IAOWEML;
protected byte IAOWEMR;
protected short IAOWEMU;
protected byte IAP39;
protected byte IAP40;
protected byte IAP41;
protected byte IAP42;
protected byte IAP43;
protected byte IAP44;
protected byte IAP45;
protected byte IAP46;
protected byte IAP47;
protected byte IAP48;
protected byte IAP49;
protected byte IAP50;
protected byte IAP51;
protected byte IAP52;
protected byte IAP53;
protected byte IAP54;
protected byte IAP55;
protected byte IAP56;
protected byte IAP57;
protected byte IAP58;
protected byte IAP59;
protected byte IAP60;
protected byte IAP61;
protected byte IAP62;
protected byte IAP63;
protected byte IAP64;
protected byte IAP65;
protected byte IAP66;
protected byte IAP67;
protected byte IAP68;
protected boolean IAP69;
protected byte IAP70;
protected byte IAP71;
protected byte IAP72;
protected byte IAPAY;
protected byte IAPAY2;
protected byte IAPAY3;
protected byte IAPAYR;
protected byte IAPAYR2;
protected byte IAPAYR3;
protected byte IAPAYW11;
protected byte IAPK95;
protected byte IAPK96;
protected byte IAPKGW;
protected byte IAPKIOB;
protected byte IAPKLI;
protected byte IAPKM1E;
protected int IAPKM1L;
protected byte IAPKM1R;
protected int IAPKM1U;
protected byte IAPKM2E;
protected int IAPKM2L;
protected byte IAPKM2R;
protected int IAPKM2U;
protected byte IAPKM3E;
protected boolean IAPKM3L;
protected byte IAPKM3R;
protected short IAPKM3U;
protected byte IAPKM4E;
protected short IAPKM4L;
protected byte IAPKM4R;
protected short IAPKM4U;
protected byte IAPKM5E;
protected int IAPKM5L;
protected byte IAPKM5R;
protected int IAPKM5U;
protected byte IAPKM6E;
protected int IAPKM6L;
protected byte IAPKM6R;
protected int IAPKM6U;
protected byte IAPKM7E;
protected short IAPKM7L;
protected byte IAPKM7R;
protected short IAPKM7U;
protected byte IAPKM85;
protected byte IAPKM86;
protected byte IAPKM8E;
protected int IAPKM8L;
protected byte IAPKM8R;
protected int IAPKM8U;
protected byte IAPKM96;
protected byte IAPKMGW;
protected byte IAPKMIOB;
protected byte IAPKMLI;
protected byte IAPKMOIP;
protected byte IAPKMPAP;
protected byte IAPKMPP;
protected byte IAPKMRP;
protected byte IAPKOIP;
protected byte IAPKPAP;
protected byte IAPKPP;
protected byte IAPKRP;
protected byte IAPLW;
protected byte IAPLY;
protected byte IAPLYP;
protected byte IAPLYW;
protected byte IAPPAFE;
protected boolean IAPPAFL;
protected byte IAPPAFR;
protected short IAPPAFU;
protected byte IAPPAME;
protected short IAPPAML;
protected byte IAPPAMR;
protected short IAPPAMU;
protected byte IAPPAOE;
protected short IAPPAOL;
protected byte IAPPAOR;
protected short IAPPAOU;
protected byte IAPPAWE;
protected short IAPPAWL;
protected byte IAPPAWR;
protected short IAPPAWU;
protected byte IAPPAYE;
protected short IAPPAYL;
protected byte IAPPAYR;
protected short IAPPAYU;
protected byte IAPPEIE;
protected short IAPPEIL;
protected byte IAPPEIR;
protected short IAPPEIU;
protected int IAPPMO;
protected byte IAPROP95;
protected byte IAPROP96;
protected byte IAPROPFA;
protected byte IAPROPHO;
protected byte IAPROPIN;
protected byte IAPROPOL;
protected byte IAPROPOW;
protected byte IAPROPTR;
protected byte IAPYW2;
protected byte IAPYW3;
protected byte IAPYW5;
protected byte IAPYW6;
protected byte IAPYW7;
protected byte IAPYW8;
protected byte IAPYW9;
protected byte IARECE;
protected short IARECL;
protected byte IARECR;
protected short IARECU;
protected short IAREGM3;
protected byte IAREGO3;
protected boolean IAREPFE;
protected boolean IAREPFL;
protected boolean IAREPFR;
protected boolean IAREPFU;
protected byte IAREPME;
protected byte IAREPML;
protected byte IAREPMR;
protected short IAREPMU;
protected byte IAREPOE;
protected short IAREPOL;
protected byte IAREPOR;
protected short IAREPOU;
protected byte IAREPWE;
protected byte IAREPWL;
protected byte IAREPWR;
protected byte IAREPWU;
protected byte IAREPYE;
protected byte IAREPYL;
protected byte IAREPYR;
protected short IAREPYU;
protected boolean IARG2FE;
protected boolean IARG2FL;
protected boolean IARG2FR;
protected boolean IARG2FU;
protected byte IARG2ME;
protected short IARG2ML;
protected byte IARG2MR;
protected short IARG2MU;
protected byte IARG2OE;
protected byte IARG2OL;
protected byte IARG2OR;
protected byte IARG2OU;
protected boolean IARG2WE;
protected boolean IARG2WL;
protected boolean IARG2WR;
protected boolean IARG2WU;
protected boolean IARG2YE;
protected boolean IARG2YL;
protected boolean IARG2YR;
protected boolean IARG2YU;
protected boolean IARG3FE;
protected boolean IARG3FL;
protected boolean IARG3FR;
protected boolean IARG3FU;
protected boolean IARG3ME;
protected boolean IARG3ML;
protected boolean IARG3MR;
protected boolean IARG3MU;
protected boolean IARG3OE;
protected boolean IARG3OL;
protected boolean IARG3OR;
protected boolean IARG3OU;
protected boolean IARG3WE;
protected boolean IARG3WL;
protected boolean IARG3WR;
protected boolean IARG3WU;
protected boolean IARG3YE;
protected boolean IARG3YL;
protected boolean IARG3YR;
protected boolean IARG3YU;
protected boolean IARGFE;
protected boolean IARGFL;
protected boolean IARGFR;
protected boolean IARGFU;
protected byte IARGME;
protected short IARGML;
protected byte IARGMR;
protected short IARGMU;
protected byte IARGMW;
protected boolean IARGMW2;
protected boolean IARGMW3;
protected byte IARGMWP;
protected byte IARGOE;
protected short IARGOL;
protected byte IARGOR;
protected short IARGOU;
protected byte IARGWE;
protected byte IARGWL;
protected byte IARGWR;
protected byte IARGWU;
protected byte IARGYE;
protected byte IARGYL;
protected byte IARGYR;
protected byte IARGYR1;
protected byte IARGYR2;
protected boolean IARGYR3;
protected byte IARGYRP;
protected byte IARGYU;
protected byte IARMWA;
protected boolean IARMWA2;
protected boolean IARMWA3;
protected boolean IARMWPA;
protected byte IASAVAE;
protected int IASAVAL;
protected byte IASAVAR;
protected int IASAVAU;
protected byte IASCAE;
protected int IASCAL;
protected byte IASCAR;
protected int IASCAU;
protected byte IASHTFOL;
protected byte IASHTMUT;
protected byte IASHTPRI;
protected byte IASHTUKL;
protected byte IASI95;
protected byte IASI96;
protected byte IASIBG;
protected byte IASICA;
protected byte IASIISA;
protected byte IASINS;
protected byte IASIOIE;
protected short IASIOIL;
protected byte IASIOIR;
protected short IASIOIU;
protected byte IASIOPT;
protected byte IASIPB;
protected byte IASIPEP;
protected byte IASISAE;
protected int IASISAL;
protected byte IASISAR;
protected int IASISAU;
protected byte IASISAV;
protected byte IASISC;
protected byte IASISHA;
protected byte IASITESS;
protected byte IASIUIT;
protected byte IASSSE;
protected byte IASSSIE;
protected short IASSSIL;
protected byte IASSSIR;
protected short IASSSIU;
protected int IASSSL;
protected byte IASSSR;
protected int IASSSU;
protected boolean IAT39;
protected boolean IAT40;
protected boolean IAT41;
protected boolean IAT42;
protected boolean IAT43;
protected boolean IAT44;
protected boolean IAT45;
protected boolean IAT46;
protected boolean IAT47;
protected boolean IAT48;
protected boolean IAT49;
protected boolean IAT50;
protected boolean IAT51;
protected boolean IAT52;
protected boolean IAT53;
protected boolean IAT54;
protected boolean IAT55;
protected boolean IAT56;
protected boolean IAT57;
protected boolean IAT58;
protected boolean IAT59;
protected boolean IAT60;
protected boolean IAT61;
protected boolean IAT62;
protected boolean IAT63;
protected boolean IAT64;
protected boolean IAT65;
protected boolean IAT66;
protected boolean IAT67;
protected boolean IAT68;
protected boolean IAT69;
protected boolean IAT70;
protected boolean IAT71;
protected boolean IAT72;
protected byte IAUITE;
protected byte IAUITIE;
protected short IAUITIL;
protected byte IAUITIR;
protected short IAUITIU;
protected int IAUITL;
protected byte IAUITR;
protected int IAUITU;
protected byte IAW1R;
protected byte IFLAG_DBSR1;
protected byte IFLAG_DBSR2;
protected byte IFLAG_DCCONT;
protected byte IFLAG_DCFUND;
protected boolean IFLAG_EARN;
protected byte IFLAG_REC;
protected byte IFLAG_RTEN;
protected byte IGF1;
protected byte INHALER;
protected byte INHALHRS;
protected double INRECEIPT_08;
protected double INRECEIPT_SPA;
protected double LDL;
protected byte LFNOMEA;
protected byte LFRESP;
protected byte LFSTAND;
protected double LFTEMP;
protected byte LFWILL;
protected byte LIGHTEAT;
protected byte MAINHH;
protected short MAP1;
protected short MAP2;
protected short MAP3;
protected double MAPVAL;
protected double MCH;
protected byte MMAIDC;
protected byte MMBCSC;
protected byte MMCOM85;
protected byte MMCOM86;
protected byte MMCOMNI;
protected byte MMCOMPA;
protected byte MMCOMRF;
protected byte MMCOMSP;
protected byte MMCOMUN;
protected byte MMCRAV;
protected byte MMCRNA;
protected byte MMCRRE;
protected byte MMCRSC;
protected byte MMFTNA;
protected byte MMFTRE2;
protected byte MMFTSC;
protected double MMFTTI;
protected byte MMGSD1;
protected byte MMGSD2;
protected byte MMGSD3;
protected byte MMGSDOM;
protected byte MMGSN1;
protected byte MMGSN2;
protected byte MMGSN3;
protected byte MMGSPREQ;
protected byte MMGSPROT;
protected byte MMGSPRPA;
protected byte MMGSPRRE;
protected byte MMGSRES;
protected byte MMGSSTA;
protected byte MMGSTP;
protected byte MMGSWIL;
protected byte MMLONA;
protected byte MMLORE;
protected byte MMLOSC;
protected double MMLOTI;
protected byte MMLSNA;
protected byte MMLSRE;
protected byte MMLSSC;
protected double MMLSTI;
protected byte MMRECRC;
protected double MMRRFTI;
protected byte MMRRNA;
protected byte MMRROC;
protected byte MMRRRE;
protected byte MMRRSC;
protected double MMRRTTI;
protected byte MMSSNA;
protected byte MMSSRE;
protected byte MMSSSC;
protected double MMSSTI;
protected byte MMSTNA;
protected byte MMSTRE;
protected byte MMSTSC;
protected double MMSTTI;
protected byte MOTHER;
protected byte MTHAGD;
protected byte NATTBPCO;
protected byte NATTBPCU;
protected byte NATTBPEQ;
protected byte NATTBPER;
protected byte NATTBPOT;
protected byte NATTBPUP;
protected byte NCLM;
protected byte NCORRECT;
protected byte NLSATLF;
protected byte NMISSED;
protected byte NOATTLF;
protected byte NOBSMFA;
protected byte NOBSMOT;
protected byte NOBSMSV;
protected byte NOBSMUP;
protected byte NOHTBCBE;
protected byte NOHTBCCH;
protected byte NOHTBCEQ;
protected byte NOHTBCOT;
protected byte NOHTBCPA;
protected byte NOHTBCSH;
protected byte NOHTBCST;
protected byte NOHTBCUN;
protected byte NOREAD;
protected byte NOWTBCBE;
protected byte NOWTBCCH;
protected byte NOWTBCHE;
protected byte NOWTBCOT;
protected byte NOWTBCPA;
protected byte NOWTBCSC;
protected byte NOWTBCSH;
protected byte NOWTBCST;
protected byte NOWTBCUN;
protected byte NPFFW;
protected String NQVER;
protected byte NROW;
protected short NROWCLM;
protected double NSSEC;
protected byte ORDCON;
protected byte ORGANIS;
protected byte ORGNO;
protected short OUTHH;
protected byte OUTIND;
protected byte OUTSC;
protected byte PAINHH;
protected byte PALEVEL;
protected byte PC_P_F;
protected double PC_P_I;
protected short PC_P_O;
protected short PC_P_T;
protected byte PC_R_F;
protected double PC_R_I;
protected short PC_R_O;
protected short PC_R_T;
protected byte PENSION;
protected short PF1;
protected short PF2;
protected short PF3;
protected byte PHLEGM;
protected double PRIPENW_08;
protected double PRIPENW_SPA;
protected byte PROBHJ;
protected byte PROBLFBR;
protected byte PROBLFCO;
protected byte PROBLFEQ;
protected byte PROBLFOT;
protected byte PROBLFRE;
protected byte PROBWJ;
protected short PSAGF;
protected short PSAGL;
protected short PULSE1;
protected short PULSE2;
protected short PULSE3;
protected double PULVAL;
protected String QVER;
protected byte REFBSCDI;
protected byte REFBSCHI;
protected byte REFBSCIL;
protected byte REFBSCNE;
protected byte REFBSCOT;
protected byte REFBSCTE;
protected byte RELHITE;
protected byte RELWAIT;
protected byte RESNHI;
protected byte RESNWT;
protected byte RESPBPS;
protected byte RESPHTS;
protected byte RESPWH;
protected byte RESPWTS;
protected double RETAINEDDB_08;
protected double RETAINEDDB_SPA;
protected double RETAINEDDC_08;
protected double RETAINEDDC_SPA;
protected short RTIN;
protected byte SAMDIFFA;
protected byte SAMDIFIN;
protected byte SAMDIFNO;
protected byte SAMDIFOT;
protected byte SAMDIFSE;
protected byte SAMDIFTO;
protected byte SAMDIFVE;
protected byte SAMPTAK;
protected String SAMPTYP;
protected byte SCACTA;
protected byte SCACTB;
protected byte SCACTC;
protected byte SCACTD;
protected byte SCAKO;
protected byte SCAL7A;
protected byte SCAL7B;
protected byte SCDCA;
protected byte SCDCC;
protected byte SCDCD;
protected byte SCDCE;
protected byte SCDCG;
protected byte SCDRPIN;
protected byte SCDRSPI;
protected byte SCDRWIN;
protected byte SCEDCH;
protected byte SCEDCP;
protected byte SCEDCS;
protected byte SCEDDE;
protected byte SCEDGP;
protected byte SCEDHO;
protected byte SCEDOP;
protected byte SCEDPO;
protected byte SCEDSC;
protected byte SCEDSU;
protected byte SCEMPL;
protected byte SCFAFIN;
protected byte SCFAHAR;
protected byte SCFAMM;
protected byte SCFARES;
protected byte SCFASAC;
protected byte SCFEELA;
protected byte SCFEELB;
protected byte SCFEELC;
protected byte SCFEELD;
protected byte SCFEELE;
protected byte SCFMH;
protected byte SCFRDM;
protected byte SCFRFIN;
protected byte SCFRHAR;
protected byte SCFRRES;
protected byte SCFRSAC;
protected byte SCFRSHA;
protected byte SCFRUIA;
protected byte SCFRUIB;
protected byte SCFRUIC;
protected byte SCFRUID;
protected byte SCFRUIE;
protected byte SCFRUIF;
protected byte SCFRUIG;
protected byte SCFRUIH;
protected byte SCFRUII;
protected byte SCLIFEA;
protected byte SCLIFEB;
protected byte SCLIFEC;
protected byte SCLIFED;
protected byte SCLIFEE;
protected byte SCMOREA;
protected byte SCMOREB;
protected byte SCMOREC;
protected byte SCMORED;
protected byte SCORG01;
protected byte SCORG02;
protected byte SCORG03;
protected byte SCORG04;
protected byte SCORG05;
protected byte SCORG06;
protected byte SCORG07;
protected byte SCORG08;
protected byte SCORG09;
protected byte SCPT01;
protected byte SCPT02;
protected byte SCPT03;
protected byte SCPT04;
protected byte SCPT05;
protected byte SCPT06;
protected byte SCPT07;
protected byte SCPT08;
protected byte SCPTR;
protected byte SCPTRA;
protected byte SCPTRB;
protected byte SCPTRC;
protected byte SCPTRD;
protected byte SCPTRE;
protected byte SCPTRF;
protected byte SCPTRG;
protected short SCRTAGE;
protected byte SCTVART;
protected byte SCTVCHA;
protected byte SCTVCOM;
protected byte SCTVDET;
protected byte SCTVDRA;
protected byte SCTVFIL;
protected byte SCTVGAR;
protected byte SCTVNAT;
protected byte SCTVNEW;
protected byte SCTVQUI;
protected byte SCTVRTV;
protected byte SCTVSOA;
protected byte SCTVSPO;
protected byte SCTVWKD;
protected byte SCTVWKE;
protected byte SCVEGA;
protected byte SCVEGB;
protected byte SCVEGC;
protected byte SCVEGD;
protected byte SCWILHE;
protected byte SCWILLE;
protected byte SCWILMI;
protected byte SCWILPA;
protected byte SCWILRU;
protected byte SCWORKA;
protected byte SCWORKB;
protected byte SCWORKC;
protected byte SCWORKD;
protected byte SCWORKE;
protected byte SCWORKF;
protected byte SCWORKG;
protected byte SCWORKH;
protected byte SCWORKI;
protected byte SCWORKJ;
protected byte SCWORKK;
protected byte SCWORKL;
protected byte SIC2003;
protected byte SIC2007;
protected double SITHGT;
protected byte SITHTRS;
protected byte SPCARA;
protected byte SPCARB;
protected byte SPDTDT;
protected byte SPHOSP;
protected byte SPLIFT;
protected byte SPTAXI;
protected byte SPTR96;
protected boolean SPTRAM95;
protected byte SPTRB95;
protected byte SPTRBCON;
protected byte SPTRBDES;
protected byte SPTRBDIR;
protected byte SPTRBEXP;
protected byte SPTRBFEA;
protected byte SPTRBFRE;
protected byte SPTRBHEA;
protected byte SPTRBNEE;
protected byte SPTRBUNA;
protected byte SPTRBUNR;
protected byte SPTRBWAL;
protected byte SPTRCARE;
protected byte SPTRCOM;
protected byte SPTRFAM;
protected byte SPTRHOS;
protected byte SPTRM85;
protected byte SPTRM86;
protected byte SPTRMCON;
protected byte SPTRMDES;
protected byte SPTRMDIR;
protected byte SPTRMEXP;
protected byte SPTRMFEA;
protected byte SPTRMFRE;
protected byte SPTRMHEA;
protected byte SPTRMNEE;
protected byte SPTRMUNA;
protected byte SPTRMUNR;
protected byte SPTRMWAL;
protected byte SPTRTAX;
protected double STPENW_08;
protected double STPENW_SPA;
protected short SYS1;
protected short SYS2;
protected short SYS3;
protected double SYSVAL;
protected byte TECHNI1;
protected byte TECHNI2;
protected byte TECHNI3;
protected double TOTPENW_08;
protected double TOTPENW_SPA;
protected double TRIG;
protected byte VISMON;
protected short VISYEAR;
protected double W4BLDWT;
protected byte W4EDQUAL;
protected double W4LWGT;
protected double W4NSSEC;
protected double W4NSSEC13;
protected byte W4NSSEC3;
protected byte W4NSSEC5;
protected byte W4NSSEC8;
protected double W4NURWT;
protected double W4SCWT;
protected boolean W4SEC;
protected boolean W4SIC;
protected byte W4SIC2003;
protected boolean W4SOC;
protected byte W4SOC2000;
protected double W4XWGT;
protected double WAIST1;
protected double WAIST2;
protected double WAIST3;
protected double WBC;
protected double WEIGHT;
protected byte WHATEAT;
protected byte WHOKB;
protected byte WHOSO4;
protected byte WHOSO5;
protected byte WHPNABBE;
protected byte WHPNABBU;
protected byte WHPNABCH;
protected byte WHPNABEM;
protected byte WHPNABOT;
protected byte WHPNABPR;
protected byte WHPNABST;
protected double WHVAL;
protected byte WHWILL;
protected byte WHYNOBP;
protected double WIDPEN_08;
protected double WIDPEN_SPA;
protected byte WJREL;
protected int WP1Q;
protected int WP1SQ;
protected int WP2Q;
protected int WP2SQ;
protected int WP3Q;
protected int WP3SQ;
protected int WPAC2;
protected short WPAC3;
protected int WPAC4;
protected boolean WPAC5;
protected boolean WPAC6;
protected boolean WPAC7;
protected byte WPACHG;
protected byte WPACOA2;
protected byte WPACOA3;
protected byte WPACOA4;
protected byte WPACOA5;
protected boolean WPACOA6;
protected boolean WPACOA7;
protected short WPACOB2;
protected short WPACOB3;
protected short WPACOB4;
protected short WPACOB5;
protected boolean WPACOB6;
protected boolean WPACOB7;
protected byte WPACOC2;
protected boolean WPACOC3;
protected byte WPACOC4;
protected boolean WPACOC5;
protected boolean WPACOC6;
protected boolean WPACOC7;
protected byte WPACON2;
protected byte WPACON3;
protected byte WPACON4;
protected byte WPACON5;
protected boolean WPACON6;
protected boolean WPACON7;
protected byte WPACT96;
protected byte WPACTCA;
protected byte WPACTED;
protected byte WPACTLO;
protected byte WPACTPW;
protected byte WPACTSE;
protected byte WPACTVW;
protected byte WPADY2;
protected boolean WPADY3;
protected boolean WPADY4;
protected boolean WPADY5;
protected boolean WPADY6;
protected boolean WPADY7;
protected short WPAECP;
protected boolean WPAECP2;
protected boolean WPAECP3;
protected boolean WPAECP4;
protected boolean WPAECP5;
protected boolean WPAECP6;
protected boolean WPAECP7;
protected short WPAMEC2;
protected short WPAMEC3;
protected short WPAMEC4;
protected boolean WPAMEC5;
protected boolean WPAMEC6;
protected boolean WPAMEC7;
protected byte WPANYP;
protected byte WPAOTFE;
protected short WPAOTFL;
protected byte WPAOTFR;
protected short WPAOTFU;
protected byte WPAOTME;
protected short WPAOTML;
protected byte WPAOTMR;
protected short WPAOTMU;
protected byte WPAOTOE;
protected short WPAOTOL;
protected byte WPAOTOR;
protected short WPAOTOU;
protected byte WPAOTWE;
protected short WPAOTWL;
protected byte WPAOTWR;
protected short WPAOTWU;
protected byte WPAOTYE;
protected int WPAOTYL;
protected byte WPAOTYR;
protected int WPAOTYU;
protected int WPAPF2;
protected byte WPAPF2E;
protected int WPAPF2L;
protected byte WPAPF2R;
protected int WPAPF2U;
protected int WPAPF3;
protected byte WPAPF3E;
protected int WPAPF3L;
protected byte WPAPF3R;
protected int WPAPF3U;
protected int WPAPF4;
protected byte WPAPF4E;
protected int WPAPF4L;
protected byte WPAPF4R;
protected int WPAPF4U;
protected int WPAPF5;
protected byte WPAPF5E;
protected int WPAPF5L;
protected byte WPAPF5R;
protected int WPAPF5U;
protected int WPAPF6;
protected byte WPAPF6E;
protected short WPAPF6L;
protected byte WPAPF6R;
protected int WPAPF6U;
protected boolean WPAPF7;
protected byte WPAPF7E;
protected short WPAPF7L;
protected boolean WPAPF7R;
protected short WPAPF7U;
protected byte WPAPFE;
protected double WPAPFL;
protected byte WPAPFR;
protected double WPAPFU;
protected byte WPASA2E;
protected short WPASA2L;
protected byte WPASA2R;
protected short WPASA2U;
protected byte WPASA3E;
protected short WPASA3L;
protected byte WPASA3R;
protected short WPASA3U;
protected byte WPASA4E;
protected short WPASA4L;
protected byte WPASA4R;
protected int WPASA4U;
protected byte WPASA5E;
protected short WPASA5L;
protected byte WPASA5R;
protected short WPASA5U;
protected boolean WPASA6E;
protected boolean WPASA6L;
protected boolean WPASA6R;
protected boolean WPASA6U;
protected boolean WPASA7E;
protected boolean WPASA7L;
protected boolean WPASA7R;
protected boolean WPASA7U;
protected short WPASAL2;
protected short WPASAL3;
protected int WPASAL4;
protected int WPASAL5;
protected short WPASAL6;
protected boolean WPASAL7;
protected byte WPASALE;
protected double WPASALL;
protected byte WPASALR;
protected double WPASALU;
protected byte WPASKD;
protected byte WPASKE;
protected byte WPASKF;
protected byte WPBCH95;
protected byte WPBCHAD;
protected byte WPBCHFL;
protected byte WPBCHHO;
protected byte WPBCHHR;
protected byte WPBCHME;
protected byte WPBCHPH;
protected byte WPBIMAE;
protected short WPBIMAL;
protected byte WPBIMAR;
protected short WPBIMAU;
protected byte WPBIWAE;
protected short WPBIWAL;
protected byte WPBIWAR;
protected short WPBIWAU;
protected byte WPBPS;
protected byte WPBPSP;
protected byte WPBPSP2;
protected byte WPBPSP3;
protected byte WPBPSP4;
protected byte WPBPSP5;
protected byte WPBPSP6;
protected boolean WPBPSP7;
protected byte WPBTHA2;
protected byte WPBTHA3;
protected byte WPBTHA4;
protected byte WPBTHA5;
protected byte WPBTHA6;
protected boolean WPBTHA7;
protected byte WPBTHP2;
protected boolean WPBTHP3;
protected byte WPBTHP4;
protected byte WPBTHP5;
protected boolean WPBTHP6;
protected boolean WPBTHP7;
protected byte WPBUSVE;
protected int WPBUSVL;
protected byte WPBUSVR;
protected int WPBUSVU;
protected byte WPCEMP2;
protected byte WPCEMP3;
protected byte WPCEMP4;
protected byte WPCEMP5;
protected byte WPCEMP6;
protected boolean WPCEMP7;
protected byte WPCH96;
protected byte WPCHAD;
protected byte WPCHB95;
protected byte WPCHBAD;
protected byte WPCHBFL;
protected byte WPCHBHO;
protected byte WPCHBHR;
protected byte WPCHBME;
protected byte WPCHBPH;
protected byte WPCHD96;
protected byte WPCHDAD;
protected byte WPCHDFL;
protected byte WPCHDHO;
protected byte WPCHDHR;
protected byte WPCHDM85;
protected byte WPCHDM86;
protected byte WPCHDM96;
protected byte WPCHDMAD;
protected byte WPCHDMCO;
protected byte WPCHDME;
protected byte WPCHDMFL;
protected byte WPCHDMHO;
protected byte WPCHDMHR;
protected byte WPCHDMME;
protected byte WPCHDMPH;
protected byte WPCHDPH;
protected byte WPCHFL;
protected byte WPCHGA;
protected byte WPCHGDN;
protected byte WPCHGNO;
protected byte WPCHGO;
protected byte WPCHHO;
protected byte WPCHHR;
protected byte WPCHL95;
protected byte WPCHL96;
protected byte WPCHLAD;
protected byte WPCHLFL;
protected byte WPCHLHO;
protected byte WPCHLHR;
protected byte WPCHLM85;
protected boolean WPCHLM86;
protected byte WPCHLM96;
protected byte WPCHLMAD;
protected byte WPCHLME;
protected byte WPCHLMFL;
protected byte WPCHLMHO;
protected byte WPCHLMHR;
protected byte WPCHLMME;
protected byte WPCHLMPH;
protected byte WPCHLPH;
protected byte WPCHM85;
protected byte WPCHM86;
protected byte WPCHM96;
protected byte WPCHMAD;
protected byte WPCHMBO;
protected byte WPCHME;
protected byte WPCHMFL;
protected byte WPCHMHO;
protected byte WPCHMHR;
protected byte WPCHMME;
protected byte WPCHMPH;
protected byte WPCHMSA;
protected byte WPCHPH;
protected byte WPCJ96;
protected byte WPCJAG;
protected byte WPCJBU;
protected byte WPCJDI;
protected byte WPCJFR;
protected byte WPCJPA;
protected byte WPCJSC;
protected byte WPCJSE;
protected boolean WPCONY2;
protected boolean WPCONY3;
protected short WPCONY4;
protected boolean WPCONY5;
protected boolean WPCONY6;
protected boolean WPCONY7;
protected byte WPCOS;
protected byte WPCOS2;
protected byte WPCOS3;
protected byte WPCOS4;
protected byte WPCOS5;
protected byte WPCOS6;
protected byte WPCOS7;
protected byte WPCRAGE;
protected byte WPCRET;
protected byte WPCRETL;
protected byte WPCURP;
protected byte WPCURP2;
protected byte WPCURP3;
protected byte WPCURP4;
protected byte WPCURP5;
protected byte WPCURP6;
protected byte WPCURP7;
protected byte WPCURR;
protected byte WPCURR2;
protected byte WPCURR3;
protected byte WPCURR4;
protected byte WPCURR5;
protected byte WPCURR6;
protected byte WPCURR7;
protected byte WPDCDB;
protected byte WPDCDB2;
protected byte WPDCDB3;
protected byte WPDCDB4;
protected byte WPDCDB5;
protected byte WPDCDB6;
protected byte WPDCDB7;
protected short WPDE2;
protected short WPDE3;
protected short WPDE4;
protected short WPDE5;
protected short WPDE6;
protected short WPDE7;
protected byte WPDESP;
protected byte WPDESP2;
protected byte WPDESP3;
protected byte WPDESP4;
protected byte WPDESP5;
protected boolean WPDESP6;
protected boolean WPDESP7;
protected byte WPDPS2;
protected byte WPDPS3;
protected byte WPDPS4;
protected byte WPDPS5;
protected boolean WPDPS6;
protected boolean WPDPS7;
protected byte WPDPSP;
protected byte WPDPSP2;
protected byte WPDPSP3;
protected byte WPDPSP4;
protected byte WPDPSP5;
protected byte WPDPSP6;
protected boolean WPDPSP7;
protected short WPDS2;
protected short WPDS3;
protected short WPDS4;
protected short WPDS5;
protected short WPDS6;
protected short WPDS7;
protected byte WPEARLY;
protected byte WPEC;
protected byte WPECA;
protected byte WPECPP;
protected byte WPECPP2;
protected byte WPECPP3;
protected boolean WPECPP4;
protected boolean WPECPP5;
protected boolean WPECPP6;
protected boolean WPECPP7;
protected boolean WPEPER2;
protected boolean WPEPER3;
protected byte WPEPER4;
protected boolean WPEPER5;
protected boolean WPEPER6;
protected boolean WPEPER7;
protected byte WPERA2;
protected byte WPERA3;
protected byte WPERA4;
protected byte WPERA5;
protected byte WPERA6;
protected boolean WPERA7;
protected byte WPERC2;
protected byte WPERC3;
protected byte WPERC4;
protected byte WPERC5;
protected byte WPERC6;
protected boolean WPERC7;
protected byte WPERCP;
protected byte WPERCP2;
protected byte WPERCP3;
protected byte WPERCP4;
protected byte WPERCP5;
protected boolean WPERCP6;
protected boolean WPERCP7;
protected byte WPESJME;
protected short WPESJML;
protected byte WPESJMR;
protected short WPESJMU;
protected byte WPEXW;
protected byte WPFFCONS;
protected byte WPFFCUR2;
protected byte WPFFCUR3;
protected byte WPFFCUR4;
protected byte WPFFCUR5;
protected byte WPFFCUR6;
protected byte WPFFCUR7;
protected byte WPFFCURP;
protected byte WPFFDCD4;
protected byte WPFFDCD5;
protected boolean WPFFDCD6;
protected boolean WPFFDCD7;
protected byte WPFFDCDB;
protected byte WPFFDCDB2;
protected byte WPFFDCDB3;
protected byte WPFFPENN;
protected byte WPFFPENT;
protected byte WPFFPENT2;
protected byte WPFFPENT3;
protected byte WPFFPENT4;
protected byte WPFFPENT5;
protected byte WPFFPENT6;
protected byte WPFFPENT7;
protected byte WPFFREC2;
protected byte WPFFREC3;
protected byte WPFFREC4;
protected byte WPFFREC5;
protected boolean WPFFREC6;
protected boolean WPFFREC7;
protected byte WPFFRECP;
protected byte WPFFYBS;
protected byte WPFFYBS2;
protected byte WPFFYBS3;
protected byte WPFFYBS4;
protected byte WPFFYBS5;
protected boolean WPFFYBS6;
protected boolean WPFFYBS7;
protected byte WPFINF;
protected byte WPFINF2;
protected byte WPFINF3;
protected byte WPFINF4;
protected byte WPFINF5;
protected byte WPFINF6;
protected boolean WPFINF7;
protected byte WPFRAS2;
protected byte WPFRAS3;
protected byte WPFRAS4;
protected boolean WPFRAS5;
protected boolean WPFRAS6;
protected boolean WPFRAS7;
protected byte WPFSAP2;
protected byte WPFSAP3;
protected byte WPFSAP4;
protected byte WPFSAP5;
protected byte WPFSAP6;
protected boolean WPFSAP7;
protected byte WPFSAV2;
protected boolean WPFSAV3;
protected byte WPFSAV4;
protected byte WPFSAV5;
protected boolean WPFSAV6;
protected boolean WPFSAV7;
protected byte WPFSC;
protected boolean WPFSC2;
protected boolean WPFSC3;
protected boolean WPFSC4;
protected boolean WPFSC5;
protected boolean WPFSC6;
protected boolean WPFSC7;
protected byte WPFSCO2;
protected byte WPFSCO3;
protected byte WPFSCO4;
protected byte WPFSCO5;
protected boolean WPFSCO6;
protected boolean WPFSCO7;
protected byte WPFSCP2;
protected byte WPFSCP3;
protected byte WPFSCP4;
protected boolean WPFSCP5;
protected boolean WPFSCP6;
protected boolean WPFSCP7;
protected byte WPFSEC;
protected boolean WPFSEC2;
protected boolean WPFSEC3;
protected boolean WPFSEC4;
protected boolean WPFSEC5;
protected boolean WPFSEC6;
protected boolean WPFSEC7;
protected byte WPHLWZ;
protected byte WPIFS295;
protected byte WPIFS2AC;
protected byte WPIFS2CO;
protected byte WPIFS2EM;
protected byte WPIFS2FA;
protected byte WPIFS2NO;
protected byte WPIFS2PR;
protected byte WPIFS2RE;
protected byte WPIFS2RP;
protected byte WPIFS395;
protected byte WPIFS3AC;
protected byte WPIFS3CO;
protected byte WPIFS3EM;
protected byte WPIFS3FA;
protected byte WPIFS3NO;
protected byte WPIFS3PR;
protected byte WPIFS3RE;
protected byte WPIFS3RP;
protected byte WPIFS495;
protected boolean WPIFS4AC;
protected boolean WPIFS4CO;
protected byte WPIFS4EM;
protected byte WPIFS4FA;
protected byte WPIFS4NO;
protected byte WPIFS4PR;
protected byte WPIFS4RE;
protected byte WPIFS4RP;
protected byte WPIFS595;
protected boolean WPIFS5AC;
protected boolean WPIFS5CO;
protected byte WPIFS5EM;
protected byte WPIFS5FA;
protected byte WPIFS5NO;
protected boolean WPIFS5PR;
protected byte WPIFS5RE;
protected byte WPIFS5RP;
protected boolean WPIFS695;
protected boolean WPIFS6AC;
protected boolean WPIFS6CO;
protected byte WPIFS6EM;
protected byte WPIFS6FA;
protected byte WPIFS6NO;
protected boolean WPIFS6PR;
protected byte WPIFS6RE;
protected boolean WPIFS6RP;
protected boolean WPIFS795;
protected boolean WPIFS7AC;
protected boolean WPIFS7CO;
protected boolean WPIFS7EM;
protected boolean WPIFS7FA;
protected byte WPIFS7NO;
protected boolean WPIFS7PR;
protected byte WPIFS7RE;
protected boolean WPIFS7RP;
protected byte WPIFS95;
protected byte WPIFSAC;
protected byte WPIFSCO;
protected byte WPIFSEM;
protected byte WPIFSFA;
protected byte WPIFSNO;
protected byte WPIFSPR;
protected byte WPIFSRE;
protected byte WPIFSRP;
protected byte WPINC2E;
protected boolean WPINC2L;
protected byte WPINC2R;
protected short WPINC2U;
protected boolean WPINC3E;
protected boolean WPINC3L;
protected boolean WPINC3R;
protected boolean WPINC3U;
protected boolean WPINC4E;
protected boolean WPINC4L;
protected boolean WPINC4R;
protected boolean WPINC4U;
protected boolean WPINC5E;
protected boolean WPINC5L;
protected boolean WPINC5R;
protected boolean WPINC5U;
protected boolean WPINC6E;
protected boolean WPINC6L;
protected boolean WPINC6R;
protected boolean WPINC6U;
protected boolean WPINC7E;
protected boolean WPINC7L;
protected boolean WPINC7R;
protected boolean WPINC7U;
protected double WPINCD;
protected short WPINCD2;
protected short WPINCD3;
protected byte WPINCD4;
protected boolean WPINCD5;
protected boolean WPINCD6;
protected boolean WPINCD7;
protected byte WPINCDE;
protected double WPINCDL;
protected byte WPINCDR;
protected double WPINCDU;
protected byte WPINF2;
protected byte WPINF3;
protected byte WPINF4;
protected byte WPINF5;
protected byte WPINF6;
protected byte WPINF7;
protected byte WPLCH95;
protected byte WPLCH96;
protected byte WPLCHAD;
protected byte WPLCHFL;
protected byte WPLCHHO;
protected byte WPLCHHR;
protected byte WPLCHM85;
protected byte WPLCHM86;
protected byte WPLCHMAD;
protected byte WPLCHMBO;
protected byte WPLCHMCO;
protected byte WPLCHMDE;
protected byte WPLCHME;
protected byte WPLCHMFL;
protected byte WPLCHMHO;
protected byte WPLCHMHR;
protected byte WPLCHMLH;
protected byte WPLCHMLO;
protected byte WPLCHMME;
protected byte WPLCHMPH;
protected byte WPLCHMRT;
protected byte WPLCHMSA;
protected byte WPLCHPH;
protected byte WPLCOM2;
protected byte WPLCOM3;
protected byte WPLCOM4;
protected boolean WPLCOM5;
protected boolean WPLCOM6;
protected boolean WPLCOM7;
protected short WPLCOY2;
protected short WPLCOY3;
protected short WPLCOY4;
protected short WPLCOY5;
protected short WPLCOY6;
protected boolean WPLCOY7;
protected byte WPLFTP295;
protected byte WPLFTP2AF;
protected byte WPLFTP2CH;
protected byte WPLFTP2EL;
protected byte WPLFTP2OF;
protected byte WPLFTP2RE;
protected byte WPLFTP2RT;
protected byte WPLFTP395;
protected byte WPLFTP3AF;
protected byte WPLFTP3CH;
protected byte WPLFTP3EL;
protected byte WPLFTP3OF;
protected byte WPLFTP3RE;
protected byte WPLFTP3RT;
protected byte WPLFTP495;
protected boolean WPLFTP4AF;
protected byte WPLFTP4CH;
protected boolean WPLFTP4EL;
protected byte WPLFTP4OF;
protected byte WPLFTP4RE;
protected boolean WPLFTP4RT;
protected boolean WPLFTP595;
protected boolean WPLFTP5AF;
protected byte WPLFTP5CH;
protected boolean WPLFTP5EL;
protected boolean WPLFTP5OF;
protected byte WPLFTP5RE;
protected boolean WPLFTP5RT;
protected boolean WPLFTP695;
protected boolean WPLFTP6AF;
protected boolean WPLFTP6CH;
protected boolean WPLFTP6EL;
protected boolean WPLFTP6OF;
protected boolean WPLFTP6RE;
protected boolean WPLFTP6RT;
protected boolean WPLFTP795;
protected boolean WPLFTP7AF;
protected boolean WPLFTP7CH;
protected boolean WPLFTP7EL;
protected boolean WPLFTP7OF;
protected boolean WPLFTP7RE;
protected boolean WPLFTP7RT;
protected byte WPLFTP95;
protected byte WPLFTPAF;
protected byte WPLFTPCH;
protected byte WPLFTPEL;
protected byte WPLFTPOF;
protected byte WPLFTPRE;
protected byte WPLFTPRT;
protected byte WPLIMWK;
protected byte WPLJO95;
protected byte WPLJOBM;
protected byte WPLJOCA;
protected byte WPLJOCL;
protected byte WPLJODI;
protected byte WPLJOFE;
protected byte WPLJOIL;
protected byte WPLJOM85;
protected byte WPLJOM86;
protected byte WPLJOMBE;
protected byte WPLJOMCA;
protected byte WPLJOMCF;
protected byte WPLJOMCL;
protected byte WPLJOMDI;
protected byte WPLJOMER;
protected byte WPLJOMFE;
protected byte WPLJOMIL;
protected byte WPLJOMME;
protected byte WPLJOMMO;
protected byte WPLJOMO;
protected byte WPLJOMPR;
protected byte WPLJOMRE;
protected byte WPLJOMSA;
protected byte WPLJOMSE;
protected byte WPLJOMSP;
protected byte WPLJOMTI;
protected byte WPLJOMVO;
protected byte WPLJORE;
protected byte WPLJOSP;
protected byte WPLJOTI;
protected byte WPLJOVO;
protected byte WPLLJM;
protected short WPLLJY;
protected byte WPLLSM;
protected short WPLLSY;
protected byte WPLPEM;
protected byte WPLPEM2;
protected byte WPLPEM3;
protected short WPLPEY;
protected short WPLPEY2;
protected short WPLPEY3;
protected byte WPLPSM;
protected byte WPLPSM2;
protected byte WPLPSM3;
protected short WPLPSY;
protected short WPLPSY2;
protected short WPLPSY3;
protected byte WPLUA2E;
protected int WPLUA2L;
protected byte WPLUA2R;
protected int WPLUA2U;
protected byte WPLUA3E;
protected short WPLUA3L;
protected byte WPLUA3R;
protected int WPLUA3U;
protected byte WPLUA4E;
protected short WPLUA4L;
protected boolean WPLUA4R;
protected short WPLUA4U;
protected boolean WPLUA5E;
protected boolean WPLUA5L;
protected boolean WPLUA5R;
protected boolean WPLUA5U;
protected boolean WPLUA6E;
protected boolean WPLUA6L;
protected boolean WPLUA6R;
protected boolean WPLUA6U;
protected boolean WPLUA7E;
protected boolean WPLUA7L;
protected boolean WPLUA7R;
protected boolean WPLUA7U;
protected byte WPLUAE;
protected double WPLUAL;
protected byte WPLUAR;
protected double WPLUAU;
protected byte WPLUM2E;
protected int WPLUM2L;
protected byte WPLUM2R;
protected int WPLUM2U;
protected byte WPLUM3E;
protected short WPLUM3L;
protected byte WPLUM3R;
protected short WPLUM3U;
protected byte WPLUM4E;
protected short WPLUM4L;
protected boolean WPLUM4R;
protected int WPLUM4U;
protected boolean WPLUM5E;
protected boolean WPLUM5L;
protected boolean WPLUM5R;
protected boolean WPLUM5U;
protected boolean WPLUM6E;
protected boolean WPLUM6L;
protected boolean WPLUM6R;
protected boolean WPLUM6U;
protected boolean WPLUM7E;
protected boolean WPLUM7L;
protected boolean WPLUM7R;
protected boolean WPLUM7U;
protected int WPLUMP2;
protected int WPLUMP3;
protected int WPLUMP4;
protected int WPLUMP5;
protected short WPLUMP6;
protected boolean WPLUMP7;
protected byte WPLUMPE;
protected double WPLUMPL;
protected byte WPLUMPR;
protected double WPLUMPU;
protected double WPLUPA;
protected int WPLUPA2;
protected int WPLUPA3;
protected int WPLUPA4;
protected short WPLUPA5;
protected short WPLUPA6;
protected boolean WPLUPA7;
protected byte WPLUPS;
protected byte WPLUPS2;
protected byte WPLUPS3;
protected byte WPLUPS4;
protected byte WPLUPS5;
protected boolean WPLUPS6;
protected boolean WPLUPS7;
protected int WPMALA;
protected byte WPMANPP;
protected byte WPMANSP;
protected byte WPMC2;
protected byte WPMC3;
protected byte WPMC4;
protected byte WPMC5;
protected byte WPMC6;
protected boolean WPMC7;
protected short WPMCA2;
protected short WPMCA3;
protected short WPMCA4;
protected byte WPMCA5;
protected boolean WPMCA6;
protected boolean WPMCA7;
protected byte WPMCAF2;
protected byte WPMCAF3;
protected byte WPMCAF4;
protected byte WPMCAF5;
protected boolean WPMCAF6;
protected boolean WPMCAF7;
protected byte WPMCON2;
protected byte WPMCON3;
protected byte WPMCON4;
protected byte WPMCON5;
protected boolean WPMCON6;
protected boolean WPMCON7;
protected byte WPMEC2;
protected byte WPMEC3;
protected byte WPMEC4;
protected byte WPMEC5;
protected boolean WPMEC6;
protected boolean WPMEC7;
protected byte WPMFQ;
protected byte WPMFRC;
protected byte WPMFRC2;
protected byte WPMFRC3;
protected byte WPMFRC4;
protected byte WPMFRC5;
protected byte WPMFRC6;
protected boolean WPMFRC7;
protected byte WPMHIE;
protected short WPMHIL;
protected byte WPMHIR;
protected short WPMHIU;
protected byte WPMMIN2;
protected byte WPMMIN3;
protected byte WPMMIN4;
protected byte WPMMIN5;
protected boolean WPMMIN6;
protected boolean WPMMIN7;
protected byte WPMORE;
protected byte WPMORP;
protected byte WPMORP2;
protected byte WPMORP3;
protected byte WPMORP4;
protected byte WPMORP5;
protected byte WPMORP6;
protected boolean WPMORP7;
protected int WPMPAH;
protected int WPMSAH;
protected byte WPMSFQ;
protected int WPMSH;
protected byte WPMSQ;
protected byte WPMSSQ;
protected byte WPMSTQ;
protected byte WPMTQ;
protected byte WPMYNJ;
protected byte WPNCBM85;
protected byte WPNCBM86;
protected byte WPNCBMAD;
protected byte WPNCBMCO;
protected byte WPNCBMFL;
protected byte WPNCBMHO;
protected byte WPNCBMHR;
protected byte WPNCBMME;
protected byte WPNCBMPH;
protected byte WPNCH96;
protected byte WPNCHAD;
protected byte WPNCHB85;
protected byte WPNCHBAD;
protected byte WPNCHBFL;
protected byte WPNCHBHO;
protected byte WPNCHBHR;
protected byte WPNCHBME;
protected byte WPNCHBPH;
protected byte WPNCHFL;
protected byte WPNCHGA;
protected byte WPNCHGN;
protected byte WPNCHGO;
protected byte WPNCHHO;
protected byte WPNCHHR;
protected byte WPNCHM85;
protected byte WPNCHM86;
protected byte WPNCHM96;
protected byte WPNCHMAD;
protected byte WPNCHMCO;
protected byte WPNCHME;
protected byte WPNCHMFL;
protected byte WPNCHMHO;
protected byte WPNCHMHR;
protected byte WPNCHMME;
protected byte WPNCHMPH;
protected byte WPNCHPH;
protected boolean WPNE;
protected byte WPNEW;
protected byte WPNEW2;
protected byte WPNEW3;
protected boolean WPNEW5;
protected boolean WPNEW6;
protected boolean WPNEW7;
protected boolean WPNEWP;
protected byte WPNEWP2;
protected byte WPNEWP3;
protected byte WPNEWP4;
protected byte WPNEWP5;
protected byte WPNEWP6;
protected byte WPNEWP7;
protected byte WPNIRR2;
protected byte WPNIRR3;
protected byte WPNIRR4;
protected boolean WPNIRR5;
protected boolean WPNIRR6;
protected boolean WPNIRR7;
protected byte WPNLK95;
protected byte WPNLKDI;
protected byte WPNLKLO;
protected boolean WPNLKM85;
protected boolean WPNLKM86;
protected byte WPNLKMAC;
protected byte WPNLKMCM;
protected byte WPNLKMCN;
protected byte WPNLKMCO;
protected byte WPNLKMDE;
protected byte WPNLKMDI;
protected byte WPNLKMEN;
protected byte WPNLKMFI;
protected byte WPNLKMFR;
protected byte WPNLKMHR;
protected byte WPNLKMLO;
protected byte WPNLKMNO;
protected byte WPNLKMPA;
protected byte WPNLKMPE;
protected byte WPNLKMRT;
protected byte WPNLKMSE;
protected byte WPNLKMSU;
protected byte WPNLKPA;
protected byte WPNLKPE;
protected byte WPNLKRT;
protected byte WPNLKSU;
protected byte WPNPENS;
protected byte WPNRA2;
protected byte WPNRA3;
protected byte WPNRA4;
protected byte WPNRA5;
protected byte WPNRA6;
protected boolean WPNRA7;
protected byte WPOCHG;
protected byte WPOJ;
protected byte WPOJ2;
protected byte WPOJ3;
protected byte WPOWB;
protected byte WPOWB2;
protected byte WPOWB3;
protected byte WPOWK;
protected byte WPPAY2;
protected byte WPPAY3;
protected byte WPPAY4;
protected byte WPPAY5;
protected byte WPPAY6;
protected byte WPPAY7;
protected byte WPPCON2;
protected byte WPPCON3;
protected byte WPPCON5;
protected byte WPPCON6;
protected boolean WPPCON7;
protected byte WPPCONT4;
protected byte WPPE2AE;
protected short WPPE2AL;
protected byte WPPE2AR;
protected int WPPE2AU;
protected boolean WPPE2TE;
protected boolean WPPE2TL;
protected boolean WPPE2TR;
protected short WPPE2TU;
protected byte WPPE3AE;
protected short WPPE3AL;
protected byte WPPE3AR;
protected short WPPE3AU;
protected boolean WPPE3TE;
protected boolean WPPE3TL;
protected boolean WPPE3TR;
protected boolean WPPE3TU;
protected byte WPPE4AE;
protected int WPPE4AL;
protected byte WPPE4AR;
protected int WPPE4AU;
protected boolean WPPE4TE;
protected int WPPE4TL;
protected boolean WPPE4TR;
protected boolean WPPE4TU;
protected byte WPPE5AE;
protected int WPPE5AL;
protected byte WPPE5AR;
protected int WPPE5AU;
protected boolean WPPE5TE;
protected boolean WPPE5TL;
protected boolean WPPE5TR;
protected boolean WPPE5TU;
protected byte WPPE6AE;
protected int WPPE6AL;
protected byte WPPE6AR;
protected short WPPE6AU;
protected boolean WPPE6TE;
protected boolean WPPE6TL;
protected boolean WPPE6TR;
protected boolean WPPE6TU;
protected boolean WPPE7AE;
protected boolean WPPE7AL;
protected boolean WPPE7AR;
protected boolean WPPE7AU;
protected boolean WPPE7TE;
protected boolean WPPE7TL;
protected boolean WPPE7TR;
protected boolean WPPE7TU;
protected byte WPPENAE;
protected double WPPENAL;
protected byte WPPENAR;
protected double WPPENAU;
protected int WPPENB2;
protected int WPPENB3;
protected int WPPENB4;
protected int WPPENB5;
protected short WPPENB6;
protected short WPPENB7;
protected byte WPPENN;
protected byte WPPENT;
protected byte WPPENT2;
protected byte WPPENT3;
protected byte WPPENT4;
protected byte WPPENT5;
protected byte WPPENT6;
protected byte WPPENT7;
protected byte WPPENTE;
protected double WPPENTL;
protected byte WPPENTR;
protected double WPPENTU;
protected byte WPPERC2;
protected byte WPPERC3;
protected byte WPPERC4;
protected byte WPPERC5;
protected boolean WPPERC6;
protected boolean WPPERC7;
protected boolean WPPFV2E;
protected short WPPFV2L;
protected boolean WPPFV2R;
protected boolean WPPFV2U;
protected boolean WPPFV3E;
protected boolean WPPFV3L;
protected boolean WPPFV3R;
protected boolean WPPFV3U;
protected byte WPPFV4E;
protected short WPPFV4L;
protected byte WPPFV4R;
protected short WPPFV4U;
protected byte WPPFV5E;
protected short WPPFV5L;
protected byte WPPFV5R;
protected int WPPFV5U;
protected boolean WPPFV6E;
protected boolean WPPFV6L;
protected boolean WPPFV6R;
protected boolean WPPFV6U;
protected boolean WPPFV7E;
protected boolean WPPFV7L;
protected boolean WPPFV7R;
protected boolean WPPFV7U;
protected short WPPFVA2;
protected boolean WPPFVA3;
protected short WPPFVA4;
protected byte WPPFVA5;
protected boolean WPPFVA6;
protected boolean WPPFVA7;
protected byte WPPFVE;
protected double WPPFVL;
protected byte WPPFVR;
protected double WPPFVU;
protected byte WPPLP2;
protected byte WPPLP3;
protected byte WPPLP4;
protected byte WPPLP5;
protected byte WPPLP6;
protected boolean WPPLP7;
protected byte WPPLPH2;
protected byte WPPLPH3;
protected byte WPPLPH4;
protected boolean WPPLPH5;
protected boolean WPPLPH6;
protected boolean WPPLPH7;
protected byte WPPREV;
protected byte WPPREV2;
protected byte WPPREV3;
protected byte WPPREV4;
protected byte WPPREV5;
protected byte WPPREV6;
protected boolean WPPREV7;
protected byte WPPROFE;
protected int WPPROFL;
protected byte WPPROFR;
protected int WPPROFU;
protected byte WPPS;
protected byte WPPS95;
protected byte WPPSAF;
protected byte WPPSAL2;
protected boolean WPPSAL3;
protected byte WPPSAL4;
protected byte WPPSAL5;
protected boolean WPPSAL6;
protected boolean WPPSAL7;
protected byte WPPSEL;
protected byte WPPSEX;
protected byte WPPSM85;
protected byte WPPSM86;
protected byte WPPSMAF;
protected byte WPPSMAG;
protected byte WPPSMAL;
protected byte WPPSMDL;
protected byte WPPSMEL;
protected byte WPPSMEX;
protected byte WPPSMHR;
protected byte WPPSMOT;
protected byte WPPSOT;
protected byte WPPSPC;
protected byte WPPSPC2;
protected byte WPPSPC3;
protected byte WPPSPC4;
protected boolean WPPSPC5;
protected boolean WPPSPC6;
protected boolean WPPSPC7;
protected byte WPPTOP2;
protected byte WPPTOP3;
protected byte WPPTOP4;
protected byte WPPTOP5;
protected byte WPPTOP6;
protected byte WPPTOP7;
protected byte WPPTP2;
protected byte WPPTP3;
protected byte WPPTP4;
protected byte WPPTP5;
protected boolean WPPTP6;
protected boolean WPPTP7;
protected boolean WPPY2FE;
protected boolean WPPY2FL;
protected boolean WPPY2FR;
protected boolean WPPY2FU;
protected byte WPPY2ME;
protected short WPPY2ML;
protected byte WPPY2MR;
protected short WPPY2MU;
protected byte WPPY2OE;
protected short WPPY2OL;
protected byte WPPY2OR;
protected byte WPPY2OU;
protected byte WPPY2WE;
protected byte WPPY2WL;
protected byte WPPY2WR;
protected byte WPPY2WU;
protected byte WPPY2YE;
protected short WPPY2YL;
protected byte WPPY2YR;
protected short WPPY2YU;
protected boolean WPPY3FE;
protected boolean WPPY3FL;
protected boolean WPPY3FR;
protected boolean WPPY3FU;
protected byte WPPY3ME;
protected short WPPY3ML;
protected byte WPPY3MR;
protected short WPPY3MU;
protected byte WPPY3OE;
protected byte WPPY3OL;
protected byte WPPY3OR;
protected byte WPPY3OU;
protected boolean WPPY3WE;
protected boolean WPPY3WL;
protected boolean WPPY3WR;
protected boolean WPPY3WU;
protected byte WPPY3YE;
protected short WPPY3YL;
protected byte WPPY3YR;
protected short WPPY3YU;
protected boolean WPPY4FE;
protected boolean WPPY4FL;
protected boolean WPPY4FR;
protected boolean WPPY4FU;
protected byte WPPY4ME;
protected byte WPPY4ML;
protected byte WPPY4MR;
protected short WPPY4MU;
protected boolean WPPY4OE;
protected boolean WPPY4OL;
protected boolean WPPY4OR;
protected boolean WPPY4OU;
protected boolean WPPY4WE;
protected boolean WPPY4WL;
protected boolean WPPY4WR;
protected boolean WPPY4WU;
protected boolean WPPY4YE;
protected byte WPPY4YL;
protected byte WPPY4YR;
protected short WPPY4YU;
protected boolean WPPY5FE;
protected boolean WPPY5FL;
protected boolean WPPY5FR;
protected boolean WPPY5FU;
protected boolean WPPY5ME;
protected boolean WPPY5ML;
protected boolean WPPY5MR;
protected boolean WPPY5MU;
protected boolean WPPY5OE;
protected boolean WPPY5OL;
protected boolean WPPY5OR;
protected boolean WPPY5OU;
protected boolean WPPY5WE;
protected boolean WPPY5WL;
protected boolean WPPY5WR;
protected boolean WPPY5WU;
protected boolean WPPY5YE;
protected boolean WPPY5YL;
protected boolean WPPY5YR;
protected boolean WPPY5YU;
protected boolean WPPY6FE;
protected boolean WPPY6FL;
protected boolean WPPY6FR;
protected boolean WPPY6FU;
protected boolean WPPY6ME;
protected boolean WPPY6ML;
protected boolean WPPY6MR;
protected boolean WPPY6MU;
protected boolean WPPY6OE;
protected boolean WPPY6OL;
protected boolean WPPY6OR;
protected boolean WPPY6OU;
protected boolean WPPY6WE;
protected boolean WPPY6WL;
protected boolean WPPY6WR;
protected boolean WPPY6WU;
protected boolean WPPY6YE;
protected boolean WPPY6YL;
protected boolean WPPY6YR;
protected boolean WPPY6YU;
protected boolean WPPY7FE;
protected boolean WPPY7FL;
protected boolean WPPY7FR;
protected boolean WPPY7FU;
protected boolean WPPY7ME;
protected boolean WPPY7ML;
protected boolean WPPY7MR;
protected boolean WPPY7MU;
protected boolean WPPY7OE;
protected boolean WPPY7OL;
protected boolean WPPY7OR;
protected boolean WPPY7OU;
protected boolean WPPY7WE;
protected boolean WPPY7WL;
protected boolean WPPY7WR;
protected boolean WPPY7WU;
protected boolean WPPY7YE;
protected boolean WPPY7YL;
protected boolean WPPY7YR;
protected boolean WPPY7YU;
protected int WPPYR2;
protected int WPPYR3;
protected int WPPYR4;
protected short WPPYR5;
protected short WPPYR6;
protected short WPPYR7;
protected boolean WPPYRFE;
protected short WPPYRFL;
protected boolean WPPYRFR;
protected boolean WPPYRFU;
protected byte WPPYRME;
protected double WPPYRML;
protected byte WPPYRMR;
protected double WPPYRMU;
protected byte WPPYROE;
protected short WPPYROL;
protected byte WPPYROR;
protected short WPPYROU;
protected byte WPPYRWE;
protected short WPPYRWL;
protected byte WPPYRWR;
protected short WPPYRWU;
protected byte WPPYRYE;
protected double WPPYRYL;
protected byte WPPYRYR;
protected double WPPYRYU;
protected byte WPQN;
protected byte WPRC295;
protected byte WPRC2MO;
protected boolean WPRC2PU;
protected byte WPRC2RE;
protected byte WPRC2RI;
protected byte WPRC2ST;
protected byte WPRC395;
protected boolean WPRC3MO;
protected boolean WPRC3PU;
protected boolean WPRC3RE;
protected byte WPRC3RI;
protected boolean WPRC3ST;
protected byte WPRC495;
protected boolean WPRC4MO;
protected boolean WPRC4PU;
protected boolean WPRC4RE;
protected byte WPRC4RI;
protected boolean WPRC4ST;
protected boolean WPRC595;
protected boolean WPRC5MO;
protected boolean WPRC5PU;
protected boolean WPRC5RE;
protected boolean WPRC5RI;
protected boolean WPRC5ST;
protected boolean WPRC695;
protected boolean WPRC6MO;
protected boolean WPRC6PU;
protected boolean WPRC6RE;
protected boolean WPRC6RI;
protected boolean WPRC6ST;
protected boolean WPRC795;
protected boolean WPRC7MO;
protected boolean WPRC7PU;
protected boolean WPRC7RE;
protected boolean WPRC7RI;
protected boolean WPRC7ST;
protected byte WPRC95;
protected byte WPRCM285;
protected byte WPRCM286;
protected byte WPRCM2AF;
protected byte WPRCM2MO;
protected boolean WPRCM2NK;
protected boolean WPRCM2OH;
protected boolean WPRCM2PU;
protected byte WPRCM2RE;
protected byte WPRCM2RI;
protected byte WPRCM2ST;
protected byte WPRCM2UN;
protected byte WPRCM385;
protected byte WPRCM386;
protected byte WPRCM3AF;
protected boolean WPRCM3MO;
protected boolean WPRCM3NK;
protected boolean WPRCM3OH;
protected boolean WPRCM3PU;
protected boolean WPRCM3RE;
protected byte WPRCM3RI;
protected boolean WPRCM3ST;
protected boolean WPRCM3UN;
protected boolean WPRCM485;
protected byte WPRCM486;
protected boolean WPRCM4AF;
protected boolean WPRCM4MO;
protected boolean WPRCM4NK;
protected boolean WPRCM4OH;
protected boolean WPRCM4PU;
protected boolean WPRCM4RE;
protected byte WPRCM4RI;
protected boolean WPRCM4ST;
protected byte WPRCM4UN;
protected boolean WPRCM585;
protected boolean WPRCM586;
protected boolean WPRCM5AF;
protected boolean WPRCM5MO;
protected boolean WPRCM5NK;
protected boolean WPRCM5OH;
protected boolean WPRCM5PU;
protected boolean WPRCM5RE;
protected boolean WPRCM5RI;
protected boolean WPRCM5ST;
protected boolean WPRCM5UN;
protected boolean WPRCM685;
protected boolean WPRCM686;
protected boolean WPRCM6AF;
protected boolean WPRCM6MO;
protected boolean WPRCM6NK;
protected boolean WPRCM6OH;
protected boolean WPRCM6PU;
protected boolean WPRCM6RE;
protected boolean WPRCM6RI;
protected boolean WPRCM6ST;
protected boolean WPRCM6UN;
protected boolean WPRCM785;
protected boolean WPRCM786;
protected boolean WPRCM7AF;
protected boolean WPRCM7MO;
protected boolean WPRCM7NK;
protected boolean WPRCM7OH;
protected boolean WPRCM7PU;
protected boolean WPRCM7RE;
protected boolean WPRCM7RI;
protected boolean WPRCM7ST;
protected boolean WPRCM7UN;
protected byte WPRCM85;
protected byte WPRCM86;
protected byte WPRCMAF;
protected byte WPRCMMO;
protected byte WPRCMNK;
protected byte WPRCMO;
protected byte WPRCMOH;
protected byte WPRCMPU;
protected byte WPRCMRE;
protected byte WPRCMRI;
protected byte WPRCMST;
protected byte WPRCMUN;
protected byte WPRCON2;
protected byte WPRCON3;
protected byte WPRCON4;
protected byte WPRCON5;
protected boolean WPRCON6;
protected boolean WPRCON7;
protected byte WPRCPU;
protected byte WPRCRE;
protected byte WPRCRI;
protected byte WPRCST;
protected byte WPREA95;
protected byte WPREA96;
protected byte WPREACH;
protected byte WPREADT;
protected byte WPREAEN;
protected byte WPREAFA;
protected byte WPREAFI;
protected byte WPREAM85;
protected byte WPREAM86;
protected byte WPREAM96;
protected byte WPREAMCH;
protected byte WPREAMDT;
protected byte WPREAMEN;
protected byte WPREAMFA;
protected byte WPREAMFI;
protected byte WPREAMNO;
protected byte WPREAMOH;
protected byte WPREAMRE;
protected byte WPREAMRH;
protected byte WPREAMST;
protected byte WPREAMVR;
protected byte WPREAMYO;
protected byte WPREANO;
protected byte WPREAOH;
protected byte WPREARE;
protected byte WPREARH;
protected byte WPREAST;
protected byte WPREAVR;
protected byte WPREAYO;
protected byte WPREC2;
protected byte WPREC3;
protected byte WPREC4;
protected byte WPREC5;
protected byte WPREC6;
protected boolean WPREC7;
protected byte WPRGHX;
protected byte WPRGHX2;
protected byte WPRGHX3;
protected byte WPRGHX4;
protected byte WPRGHX5;
protected byte WPRGHX6;
protected boolean WPRGHX7;
protected byte WPRPENS;
protected byte WPRR95;
protected byte WPRR96;
protected byte WPRRAG;
protected byte WPRRCH;
protected byte WPRRDT;
protected byte WPRREN;
protected byte WPRRFA;
protected byte WPRRFI;
protected byte WPRRM85;
protected byte WPRRM86;
protected byte WPRRM96;
protected byte WPRRMAF;
protected byte WPRRMAG;
protected byte WPRRMCH;
protected byte WPRRMDT;
protected byte WPRRMEN;
protected byte WPRRMFA;
protected byte WPRRMFI;
protected byte WPRRMLI;
protected byte WPRRMOH;
protected byte WPRRMRE;
protected byte WPRRMRH;
protected byte WPRRMST;
protected byte WPRRMYO;
protected byte WPRROH;
protected byte WPRRRE;
protected byte WPRRRH;
protected byte WPRRST;
protected byte WPRRYO;
protected boolean WPRSCM95;
protected byte WPSJOBM;
protected short WPSJOBY;
protected byte WPSN;
protected byte WPSPAM;
protected byte WPSPAW;
protected byte WPSPD;
protected byte WPSPD1A;
protected byte WPSPD1B;
protected byte WPSPD2;
protected byte WPSPD3;
protected byte WPSPD3A;
protected byte WPSPD3M;
protected short WPSPD3Y;
protected byte WPSPD4;
protected byte WPSPD5M;
protected byte WPSPD5Y;
protected byte WPSPD6;
protected int WPSPOU;
protected byte WPSPOUP;
protected byte WPSPY;
protected byte WPSRUL;
protected byte WPSRUL2;
protected byte WPSRUL3;
protected boolean WPSRUL4;
protected boolean WPSRUL5;
protected boolean WPSRUL6;
protected boolean WPSRUL7;
protected byte WPTAKP;
protected byte WPTAKP2;
protected byte WPTAKP3;
protected byte WPTAKP4;
protected byte WPTAKP5;
protected boolean WPTAKP6;
protected boolean WPTAKP7;
protected byte WPTAX2;
protected byte WPTAX3;
protected byte WPTAX4;
protected byte WPTAX5;
protected byte WPTAX6;
protected byte WPTAX7;
protected byte WPTHPFE;
protected short WPTHPFL;
protected byte WPTHPFR;
protected short WPTHPFU;
protected byte WPTHPME;
protected short WPTHPML;
protected byte WPTHPMR;
protected short WPTHPMU;
protected byte WPTHPOE;
protected short WPTHPOL;
protected byte WPTHPOR;
protected short WPTHPOU;
protected byte WPTHPWE;
protected short WPTHPWL;
protected byte WPTHPWR;
protected short WPTHPWU;
protected byte WPTHPYE;
protected int WPTHPYL;
protected byte WPTHPYR;
protected int WPTHPYU;
protected byte WPUPAFE;
protected short WPUPAFL;
protected byte WPUPAFR;
protected short WPUPAFU;
protected byte WPUPAME;
protected short WPUPAML;
protected byte WPUPAMR;
protected short WPUPAMU;
protected int WPUPAOE;
protected short WPUPAOL;
protected byte WPUPAOR;
protected short WPUPAOU;
protected byte WPUPAWE;
protected short WPUPAWL;
protected byte WPUPAWR;
protected short WPUPAWU;
protected byte WPUPAYE;
protected byte WPUPAYL;
protected byte WPUPAYR;
protected short WPUPAYU;
protected byte WPVBUSE;
protected int WPVBUSL;
protected byte WPVBUSR;
protected int WPVBUSU;
protected byte WPWLYYE;
protected int WPWLYYL;
protected byte WPWLYYR;
protected int WPWLYYU;
protected byte WPWYJ95;
protected byte WPWYJBU;
protected byte WPWYJCA;
protected byte WPWYJCO;
protected byte WPWYJFB;
protected byte WPWYJFI;
protected byte WPWYJHO;
protected byte WPWYJM85;
protected byte WPWYJM86;
protected byte WPWYJMBC;
protected byte WPWYJMBU;
protected byte WPWYJMCA;
protected byte WPWYJMCH;
protected byte WPWYJMCO;
protected byte WPWYJMFB;
protected byte WPWYJMFI;
protected byte WPWYJMHF;
protected byte WPWYJMHH;
protected byte WPWYJMHO;
protected byte WPWYJMLO;
protected byte WPWYJMMO;
protected byte WPWYJMON;
protected byte WPWYJMPA;
protected byte WPWYJMPH;
protected byte WPWYJMTI;
protected byte WPWYJMTO;
protected byte WPWYJON;
protected byte WPWYJPA;
protected byte WPWYJREA;
protected byte WPWYJTI;
protected byte WPWYN95;
protected byte WPWYNCA;
protected byte WPWYNCH;
protected byte WPWYNEA;
protected byte WPWYNEM;
protected byte WPWYNFA;
protected byte WPWYNMO;
protected byte WPWYNOH;
protected byte WPWYNOU;
protected byte WPWYNRE;
protected byte WPWYNRH;
protected byte WPWYNTI;
protected byte WPWYNVR;
protected byte WPWYW95;
protected byte WPWYWEN;
protected byte WPWYWM85;
protected byte WPWYWM86;
protected byte WPWYWMCH;
protected byte WPWYWMEN;
protected byte WPWYWMFI;
protected byte WPWYWMHE;
protected byte WPWYWMHH;
protected byte WPWYWMMO;
protected byte WPWYWMO;
protected byte WPWYWMOH;
protected byte WPWYWMRH;
protected byte WPWYWMSU;
protected byte WPWYWOH;
protected byte WPWYWRH;
protected byte WPWYWSU;
protected byte WPYAER2;
protected byte WPYAER3;
protected byte WPYAER4;
protected byte WPYAER5;
protected byte WPYAER6;
protected boolean WPYAER7;
protected byte WPYBS2;
protected byte WPYBS3;
protected byte WPYBS4;
protected byte WPYBS5;
protected byte WPYBS6;
protected boolean WPYBS7;
protected int WPYCA2;
protected short WPYCA3;
protected short WPYCA4;
protected short WPYCA5;
protected short WPYCA6;
protected short WPYCA7;
protected byte WPYCAT2;
protected byte WPYCAT3;
protected byte WPYCAT4;
protected byte WPYCAT5;
protected byte WPYCAT6;
protected boolean WPYCAT7;
protected byte WPYFRA;
protected byte WPYFRA2;
protected boolean WPYFRA3;
protected byte WPYFRA4;
protected boolean WPYFRA5;
protected boolean WPYFRA6;
protected boolean WPYFRA7;
protected byte WPYJM11;
protected byte WPYST95;
protected byte WPYSTAF;
protected byte WPYSTCH;
protected byte WPYSTEN;
protected byte WPYSTFA;
protected byte WPYSTFI;
protected byte WPYSTM85;
protected byte WPYSTM86;
protected byte WPYSTMAF;
protected byte WPYSTMAG;
protected byte WPYSTMCH;
protected byte WPYSTMCO;
protected byte WPYSTMEN;
protected byte WPYSTMFA;
protected byte WPYSTMFI;
protected byte WPYSTMMO;
protected byte WPYSTMO;
protected byte WPYSTMOH;
protected byte WPYSTMOU;
protected byte WPYSTMPA;
protected byte WPYSTMRE;
protected byte WPYSTMRH;
protected byte WPYSTMST;
protected byte WPYSTMTI;
protected byte WPYSTMVR;
protected byte WPYSTMYO;
protected byte WPYSTOH;
protected byte WPYSTOU;
protected byte WPYSTPA;
protected byte WPYSTPM;
protected byte WPYSTRE;
protected byte WPYSTRH;
protected byte WPYSTTI;
protected byte WPYSTVR;
protected byte WPYSTYO;
protected byte WSTOKB;
protected double WSTVAL;
protected byte WTC_P_F;
protected double WTC_P_I;
protected short WTC_P_O;
protected short WTC_P_T;
protected byte WTC_R_F;
protected double WTC_R_I;
protected short WTC_R_O;
protected short WTC_R_T;
protected byte WTOK;
protected double WTVAL;
protected byte YNOLF;
protected byte YNOWH;
protected final void initADDPEN_08(String s) {
if (!s.trim().isEmpty()) {
ADDPEN_08 = Double.parseDouble(s);
} else {
ADDPEN_08 = Double.NaN;
}
}

protected final void initADDPEN_SPA(String s) {
if (!s.trim().isEmpty()) {
ADDPEN_SPA = Double.parseDouble(s);
} else {
ADDPEN_SPA = Double.NaN;
}
}

protected final void initAIRTEMP(String s) {
if (!s.trim().isEmpty()) {
AIRTEMP = Double.parseDouble(s);
} else {
AIRTEMP = Double.NaN;
}
}

protected final void initALLADCH(String s) {
if (!s.trim().isEmpty()) {
ALLADCH = Byte.parseByte(s);
} else {
ALLADCH = Byte.MIN_VALUE;
}
}

protected final void initALLFSCH(String s) {
if (!s.trim().isEmpty()) {
ALLFSCH = Byte.parseByte(s);
} else {
ALLFSCH = Byte.MIN_VALUE;
}
}

protected final void initALLNATCH(String s) {
if (!s.trim().isEmpty()) {
ALLNATCH = Byte.parseByte(s);
} else {
ALLNATCH = Byte.MIN_VALUE;
}
}

protected final void initALLSPCH(String s) {
if (!s.trim().isEmpty()) {
ALLSPCH = Byte.parseByte(s);
} else {
ALLSPCH = Byte.MIN_VALUE;
}
}

protected final void initALLTOTCH(String s) {
if (!s.trim().isEmpty()) {
ALLTOTCH = Byte.parseByte(s);
} else {
ALLTOTCH = Byte.MIN_VALUE;
}
}

protected final void initANYREMOR(String s) {
if (!s.trim().isEmpty()) {
ANYREMOR = Byte.parseByte(s);
} else {
ANYREMOR = Byte.MIN_VALUE;
}
}

protected final void initASKINST(String s) {
if (!s.trim().isEmpty()) {
ASKINST = Byte.parseByte(s);
} else {
ASKINST = Byte.MIN_VALUE;
}
}

protected final void initASKPX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ASKPX = false;
} else {
ASKPX = true;
}
}
}

protected final void initBLOODR(String s) {
if (!s.trim().isEmpty()) {
BLOODR = Byte.parseByte(s);
} else {
BLOODR = Byte.MIN_VALUE;
}
}

protected final void initBMI(String s) {
if (!s.trim().isEmpty()) {
BMI = Double.parseDouble(s);
} else {
BMI = Double.NaN;
}
}

protected final void initBMIOBE(String s) {
if (!s.trim().isEmpty()) {
BMIOBE = Byte.parseByte(s);
} else {
BMIOBE = Byte.MIN_VALUE;
}
}

protected final void initBMIOK(String s) {
if (!s.trim().isEmpty()) {
BMIOK = Byte.parseByte(s);
} else {
BMIOK = Byte.MIN_VALUE;
}
}

protected final void initBMIVAL(String s) {
if (!s.trim().isEmpty()) {
BMIVAL = Double.parseDouble(s);
} else {
BMIVAL = Double.NaN;
}
}

protected final void initBPCONST(String s) {
if (!s.trim().isEmpty()) {
BPCONST = Byte.parseByte(s);
} else {
BPCONST = Byte.MIN_VALUE;
}
}

protected final void initBPRESPC(String s) {
if (!s.trim().isEmpty()) {
BPRESPC = Byte.parseByte(s);
} else {
BPRESPC = Byte.MIN_VALUE;
}
}

protected final void initBRETHS(String s) {
if (!s.trim().isEmpty()) {
BRETHS = Byte.parseByte(s);
} else {
BRETHS = Byte.MIN_VALUE;
}
}

protected final void initBSOUTC(String s) {
if (!s.trim().isEmpty()) {
BSOUTC = Byte.parseByte(s);
} else {
BSOUTC = Byte.MIN_VALUE;
}
}

protected final void initBSP_08(String s) {
if (!s.trim().isEmpty()) {
BSP_08 = Double.parseDouble(s);
} else {
BSP_08 = Double.NaN;
}
}

protected final void initBSP_SPA(String s) {
if (!s.trim().isEmpty()) {
BSP_SPA = Double.parseDouble(s);
} else {
BSP_SPA = Double.NaN;
}
}

protected final void initBSWILL(String s) {
if (!s.trim().isEmpty()) {
BSWILL = Byte.parseByte(s);
} else {
BSWILL = Byte.MIN_VALUE;
}
}

protected final void initCARERS_P_F(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_F = Byte.parseByte(s);
} else {
CARERS_P_F = Byte.MIN_VALUE;
}
}

protected final void initCARERS_P_I(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_I = Double.parseDouble(s);
} else {
CARERS_P_I = Double.NaN;
}
}

protected final void initCARERS_P_O(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_O = Short.parseShort(s);
} else {
CARERS_P_O = Short.MIN_VALUE;
}
}

protected final void initCARERS_P_T(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_T = Short.parseShort(s);
} else {
CARERS_P_T = Short.MIN_VALUE;
}
}

protected final void initCARERS_R_F(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_F = Byte.parseByte(s);
} else {
CARERS_R_F = Byte.MIN_VALUE;
}
}

protected final void initCARERS_R_I(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_I = Double.parseDouble(s);
} else {
CARERS_R_I = Double.NaN;
}
}

protected final void initCARERS_R_O(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_O = Short.parseShort(s);
} else {
CARERS_R_O = Short.MIN_VALUE;
}
}

protected final void initCARERS_R_T(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_T = Short.parseShort(s);
} else {
CARERS_R_T = Short.MIN_VALUE;
}
}

protected final void initCASP19(String s) {
if (!s.trim().isEmpty()) {
CASP19 = Byte.parseByte(s);
} else {
CASP19 = Byte.MIN_VALUE;
}
}

protected final void initCASPAUT(String s) {
if (!s.trim().isEmpty()) {
CASPAUT = Byte.parseByte(s);
} else {
CASPAUT = Byte.MIN_VALUE;
}
}

protected final void initCASPCTL(String s) {
if (!s.trim().isEmpty()) {
CASPCTL = Byte.parseByte(s);
} else {
CASPCTL = Byte.MIN_VALUE;
}
}

protected final void initCASPPLE(String s) {
if (!s.trim().isEmpty()) {
CASPPLE = Byte.parseByte(s);
} else {
CASPPLE = Byte.MIN_VALUE;
}
}

protected final void initCASPSR(String s) {
if (!s.trim().isEmpty()) {
CASPSR = Byte.parseByte(s);
} else {
CASPSR = Byte.MIN_VALUE;
}
}

protected final void initCFANI(String s) {
if (!s.trim().isEmpty()) {
CFANI = Byte.parseByte(s);
} else {
CFANI = Byte.MIN_VALUE;
}
}

protected final void initCFANIG(String s) {
if (!s.trim().isEmpty()) {
CFANIG = Byte.parseByte(s);
} else {
CFANIG = Byte.MIN_VALUE;
}
}

protected final void initCFIB(String s) {
if (!s.trim().isEmpty()) {
CFIB = Double.parseDouble(s);
} else {
CFIB = Double.NaN;
}
}

protected final void initCFLETEN(String s) {
if (!s.trim().isEmpty()) {
CFLETEN = Byte.parseByte(s);
} else {
CFLETEN = Byte.MIN_VALUE;
}
}

protected final void initCFMEM(String s) {
if (!s.trim().isEmpty()) {
CFMEM = Byte.parseByte(s);
} else {
CFMEM = Byte.MIN_VALUE;
}
}

protected final void initCFMEMS(String s) {
if (!s.trim().isEmpty()) {
CFMEMS = Byte.parseByte(s);
} else {
CFMEMS = Byte.MIN_VALUE;
}
}

protected final void initCFMERSP(String s) {
if (!s.trim().isEmpty()) {
CFMERSP = Byte.parseByte(s);
} else {
CFMERSP = Byte.MIN_VALUE;
}
}

protected final void initCFMETM(String s) {
if (!s.trim().isEmpty()) {
CFMETM = Byte.parseByte(s);
} else {
CFMETM = Byte.MIN_VALUE;
}
}

protected final void initCFMETMT(String s) {
if (!s.trim().isEmpty()) {
CFMETMT = Byte.parseByte(s);
} else {
CFMETMT = Byte.MIN_VALUE;
}
}

protected final void initCFMSCR(String s) {
if (!s.trim().isEmpty()) {
CFMSCR = Byte.parseByte(s);
} else {
CFMSCR = Byte.MIN_VALUE;
}
}

protected final void initCFPASCR(String s) {
if (!s.trim().isEmpty()) {
CFPASCR = Byte.parseByte(s);
} else {
CFPASCR = Byte.MIN_VALUE;
}
}

protected final void initCFPRMEM(String s) {
if (!s.trim().isEmpty()) {
CFPRMEM = Byte.parseByte(s);
} else {
CFPRMEM = Byte.MIN_VALUE;
}
}

protected final void initCFPROM(String s) {
if (!s.trim().isEmpty()) {
CFPROM = Byte.parseByte(s);
} else {
CFPROM = Byte.MIN_VALUE;
}
}

protected final void initCFRECAL(String s) {
if (!s.trim().isEmpty()) {
CFRECAL = Double.parseDouble(s);
} else {
CFRECAL = Double.NaN;
}
}

protected final void initCFSUMA(String s) {
if (!s.trim().isEmpty()) {
CFSUMA = Byte.parseByte(s);
} else {
CFSUMA = Byte.MIN_VALUE;
}
}

protected final void initCFSUMB(String s) {
if (!s.trim().isEmpty()) {
CFSUMB = Byte.parseByte(s);
} else {
CFSUMB = Byte.MIN_VALUE;
}
}

protected final void initCFSUMC(String s) {
if (!s.trim().isEmpty()) {
CFSUMC = Byte.parseByte(s);
} else {
CFSUMC = Byte.MIN_VALUE;
}
}

protected final void initCFSUMD(String s) {
if (!s.trim().isEmpty()) {
CFSUMD = Byte.parseByte(s);
} else {
CFSUMD = Byte.MIN_VALUE;
}
}

protected final void initCFSUME(String s) {
if (!s.trim().isEmpty()) {
CFSUME = Byte.parseByte(s);
} else {
CFSUME = Byte.MIN_VALUE;
}
}

protected final void initCFSUMF(String s) {
if (!s.trim().isEmpty()) {
CFSUMF = Byte.parseByte(s);
} else {
CFSUMF = Byte.MIN_VALUE;
}
}

protected final void initCFWHM85(String s) {
if (!s.trim().isEmpty()) {
CFWHM85 = Byte.parseByte(s);
} else {
CFWHM85 = Byte.MIN_VALUE;
}
}

protected final void initCFWHM86(String s) {
if (!s.trim().isEmpty()) {
CFWHM86 = Byte.parseByte(s);
} else {
CFWHM86 = Byte.MIN_VALUE;
}
}

protected final void initCFWHMALC(String s) {
if (!s.trim().isEmpty()) {
CFWHMALC = Byte.parseByte(s);
} else {
CFWHMALC = Byte.MIN_VALUE;
}
}

protected final void initCFWHMCON(String s) {
if (!s.trim().isEmpty()) {
CFWHMCON = Byte.parseByte(s);
} else {
CFWHMCON = Byte.MIN_VALUE;
}
}

protected final void initCFWHMDIS(String s) {
if (!s.trim().isEmpty()) {
CFWHMDIS = Byte.parseByte(s);
} else {
CFWHMDIS = Byte.MIN_VALUE;
}
}

protected final void initCFWHMENG(String s) {
if (!s.trim().isEmpty()) {
CFWHMENG = Byte.parseByte(s);
} else {
CFWHMENG = Byte.MIN_VALUE;
}
}

protected final void initCFWHMEYE(String s) {
if (!s.trim().isEmpty()) {
CFWHMEYE = Byte.parseByte(s);
} else {
CFWHMEYE = Byte.MIN_VALUE;
}
}

protected final void initCFWHMHEA(String s) {
if (!s.trim().isEmpty()) {
CFWHMHEA = Byte.parseByte(s);
} else {
CFWHMHEA = Byte.MIN_VALUE;
}
}

protected final void initCFWHMILL(String s) {
if (!s.trim().isEmpty()) {
CFWHMILL = Byte.parseByte(s);
} else {
CFWHMILL = Byte.MIN_VALUE;
}
}

protected final void initCFWHMLAP(String s) {
if (!s.trim().isEmpty()) {
CFWHMLAP = Byte.parseByte(s);
} else {
CFWHMLAP = Byte.MIN_VALUE;
}
}

protected final void initCFWHMMEM(String s) {
if (!s.trim().isEmpty()) {
CFWHMMEM = Byte.parseByte(s);
} else {
CFWHMMEM = Byte.MIN_VALUE;
}
}

protected final void initCFWHMMEN(String s) {
if (!s.trim().isEmpty()) {
CFWHMMEN = Byte.parseByte(s);
} else {
CFWHMMEN = Byte.MIN_VALUE;
}
}

protected final void initCFWHMNER(String s) {
if (!s.trim().isEmpty()) {
CFWHMNER = Byte.parseByte(s);
} else {
CFWHMNER = Byte.MIN_VALUE;
}
}

protected final void initCFWHMNOI(String s) {
if (!s.trim().isEmpty()) {
CFWHMNOI = Byte.parseByte(s);
} else {
CFWHMNOI = Byte.MIN_VALUE;
}
}

protected final void initCFWHMREF(String s) {
if (!s.trim().isEmpty()) {
CFWHMREF = Byte.parseByte(s);
} else {
CFWHMREF = Byte.MIN_VALUE;
}
}

protected final void initCFWHMTIR(String s) {
if (!s.trim().isEmpty()) {
CFWHMTIR = Byte.parseByte(s);
} else {
CFWHMTIR = Byte.MIN_VALUE;
}
}

protected final void initCFWHMUPS(String s) {
if (!s.trim().isEmpty()) {
CFWHMUPS = Byte.parseByte(s);
} else {
CFWHMUPS = Byte.MIN_VALUE;
}
}

protected final void initCFWHOAD(String s) {
if (!s.trim().isEmpty()) {
CFWHOAD = Byte.parseByte(s);
} else {
CFWHOAD = Byte.MIN_VALUE;
}
}

protected final void initCFWHOCHI(String s) {
if (!s.trim().isEmpty()) {
CFWHOCHI = Byte.parseByte(s);
} else {
CFWHOCHI = Byte.MIN_VALUE;
}
}

protected final void initCFWHONON(String s) {
if (!s.trim().isEmpty()) {
CFWHONON = Byte.parseByte(s);
} else {
CFWHONON = Byte.MIN_VALUE;
}
}

protected final void initCFWHOOTH(String s) {
if (!s.trim().isEmpty()) {
CFWHOOTH = Byte.parseByte(s);
} else {
CFWHOOTH = Byte.MIN_VALUE;
}
}

protected final void initCFWHOPAR(String s) {
if (!s.trim().isEmpty()) {
CFWHOPAR = Byte.parseByte(s);
} else {
CFWHOPAR = Byte.MIN_VALUE;
}
}

protected final void initCFWHT95(String s) {
if (!s.trim().isEmpty()) {
CFWHT95 = Byte.parseByte(s);
} else {
CFWHT95 = Byte.MIN_VALUE;
}
}

protected final void initCFWHTALC(String s) {
if (!s.trim().isEmpty()) {
CFWHTALC = Byte.parseByte(s);
} else {
CFWHTALC = Byte.MIN_VALUE;
}
}

protected final void initCFWHTCON(String s) {
if (!s.trim().isEmpty()) {
CFWHTCON = Byte.parseByte(s);
} else {
CFWHTCON = Byte.MIN_VALUE;
}
}

protected final void initCFWHTDIS(String s) {
if (!s.trim().isEmpty()) {
CFWHTDIS = Byte.parseByte(s);
} else {
CFWHTDIS = Byte.MIN_VALUE;
}
}

protected final void initCFWHTENG(String s) {
if (!s.trim().isEmpty()) {
CFWHTENG = Byte.parseByte(s);
} else {
CFWHTENG = Byte.MIN_VALUE;
}
}

protected final void initCFWHTEYE(String s) {
if (!s.trim().isEmpty()) {
CFWHTEYE = Byte.parseByte(s);
} else {
CFWHTEYE = Byte.MIN_VALUE;
}
}

protected final void initCFWHTHEA(String s) {
if (!s.trim().isEmpty()) {
CFWHTHEA = Byte.parseByte(s);
} else {
CFWHTHEA = Byte.MIN_VALUE;
}
}

protected final void initCFWHTILL(String s) {
if (!s.trim().isEmpty()) {
CFWHTILL = Byte.parseByte(s);
} else {
CFWHTILL = Byte.MIN_VALUE;
}
}

protected final void initCFWHTLAP(String s) {
if (!s.trim().isEmpty()) {
CFWHTLAP = Byte.parseByte(s);
} else {
CFWHTLAP = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMEM(String s) {
if (!s.trim().isEmpty()) {
CFWHTMEM = Byte.parseByte(s);
} else {
CFWHTMEM = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMEN(String s) {
if (!s.trim().isEmpty()) {
CFWHTMEN = Byte.parseByte(s);
} else {
CFWHTMEN = Byte.MIN_VALUE;
}
}

protected final void initCFWHTNER(String s) {
if (!s.trim().isEmpty()) {
CFWHTNER = Byte.parseByte(s);
} else {
CFWHTNER = Byte.MIN_VALUE;
}
}

protected final void initCFWHTNOI(String s) {
if (!s.trim().isEmpty()) {
CFWHTNOI = Byte.parseByte(s);
} else {
CFWHTNOI = Byte.MIN_VALUE;
}
}

protected final void initCFWHTREF(String s) {
if (!s.trim().isEmpty()) {
CFWHTREF = Byte.parseByte(s);
} else {
CFWHTREF = Byte.MIN_VALUE;
}
}

protected final void initCFWHTTIR(String s) {
if (!s.trim().isEmpty()) {
CFWHTTIR = Byte.parseByte(s);
} else {
CFWHTTIR = Byte.MIN_VALUE;
}
}

protected final void initCFWHTUPS(String s) {
if (!s.trim().isEmpty()) {
CFWHTUPS = Byte.parseByte(s);
} else {
CFWHTUPS = Byte.MIN_VALUE;
}
}

protected final void initCHESTINF(String s) {
if (!s.trim().isEmpty()) {
CHESTINF = Byte.parseByte(s);
} else {
CHESTINF = Byte.MIN_VALUE;
}
}

protected final void initCHIADP(String s) {
if (!s.trim().isEmpty()) {
CHIADP = Byte.parseByte(s);
} else {
CHIADP = Byte.MIN_VALUE;
}
}

protected final void initCHIFST(String s) {
if (!s.trim().isEmpty()) {
CHIFST = Byte.parseByte(s);
} else {
CHIFST = Byte.MIN_VALUE;
}
}

protected final void initCHINAT(String s) {
if (!s.trim().isEmpty()) {
CHINAT = Byte.parseByte(s);
} else {
CHINAT = Byte.MIN_VALUE;
}
}

protected final void initCHINHH(String s) {
if (!s.trim().isEmpty()) {
CHINHH = Byte.parseByte(s);
} else {
CHINHH = Byte.MIN_VALUE;
}
}

protected final void initCHISTP(String s) {
if (!s.trim().isEmpty()) {
CHISTP = Byte.parseByte(s);
} else {
CHISTP = Byte.MIN_VALUE;
}
}

protected final void initCHITOT(String s) {
if (!s.trim().isEmpty()) {
CHITOT = Byte.parseByte(s);
} else {
CHITOT = Byte.MIN_VALUE;
}
}

protected final void initCHOADP(String s) {
if (!s.trim().isEmpty()) {
CHOADP = Byte.parseByte(s);
} else {
CHOADP = Byte.MIN_VALUE;
}
}

protected final void initCHOFST(String s) {
if (!s.trim().isEmpty()) {
CHOFST = Byte.parseByte(s);
} else {
CHOFST = Byte.MIN_VALUE;
}
}

protected final void initCHOL(String s) {
if (!s.trim().isEmpty()) {
CHOL = Double.parseDouble(s);
} else {
CHOL = Double.NaN;
}
}

protected final void initCHONAT(String s) {
if (!s.trim().isEmpty()) {
CHONAT = Byte.parseByte(s);
} else {
CHONAT = Byte.MIN_VALUE;
}
}

protected final void initCHOSTP(String s) {
if (!s.trim().isEmpty()) {
CHOSTP = Byte.parseByte(s);
} else {
CHOSTP = Byte.MIN_VALUE;
}
}

protected final void initCHOTOT(String s) {
if (!s.trim().isEmpty()) {
CHOTOT = Byte.parseByte(s);
} else {
CHOTOT = Byte.MIN_VALUE;
}
}

protected final void initCLOTB(String s) {
if (!s.trim().isEmpty()) {
CLOTB = Byte.parseByte(s);
} else {
CLOTB = Byte.MIN_VALUE;
}
}

protected final void initCONCUR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
CONCUR = false;
} else {
CONCUR = true;
}
}
}

protected final void initCONFAGE(String s) {
if (!s.trim().isEmpty()) {
CONFAGE = Byte.parseByte(s);
} else {
CONFAGE = Byte.MIN_VALUE;
}
}

protected final void initCONSUBDR(String s) {
if (!s.trim().isEmpty()) {
CONSUBDR = Byte.parseByte(s);
} else {
CONSUBDR = Byte.MIN_VALUE;
}
}

protected final void initCONSUBEA(String s) {
if (!s.trim().isEmpty()) {
CONSUBEA = Byte.parseByte(s);
} else {
CONSUBEA = Byte.MIN_VALUE;
}
}

protected final void initCONSUBEX(String s) {
if (!s.trim().isEmpty()) {
CONSUBEX = Byte.parseByte(s);
} else {
CONSUBEX = Byte.MIN_VALUE;
}
}

protected final void initCONSUBNO(String s) {
if (!s.trim().isEmpty()) {
CONSUBNO = Byte.parseByte(s);
} else {
CONSUBNO = Byte.MIN_VALUE;
}
}

protected final void initCONSUBSM(String s) {
if (!s.trim().isEmpty()) {
CONSUBSM = Byte.parseByte(s);
} else {
CONSUBSM = Byte.MIN_VALUE;
}
}

protected final void initCTC_P_F(String s) {
if (!s.trim().isEmpty()) {
CTC_P_F = Byte.parseByte(s);
} else {
CTC_P_F = Byte.MIN_VALUE;
}
}

protected final void initCTC_P_I(String s) {
if (!s.trim().isEmpty()) {
CTC_P_I = Double.parseDouble(s);
} else {
CTC_P_I = Double.NaN;
}
}

protected final void initCTC_P_O(String s) {
if (!s.trim().isEmpty()) {
CTC_P_O = Short.parseShort(s);
} else {
CTC_P_O = Short.MIN_VALUE;
}
}

protected final void initCTC_P_T(String s) {
if (!s.trim().isEmpty()) {
CTC_P_T = Short.parseShort(s);
} else {
CTC_P_T = Short.MIN_VALUE;
}
}

protected final void initCTC_R_F(String s) {
if (!s.trim().isEmpty()) {
CTC_R_F = Byte.parseByte(s);
} else {
CTC_R_F = Byte.MIN_VALUE;
}
}

protected final void initCTC_R_I(String s) {
if (!s.trim().isEmpty()) {
CTC_R_I = Double.parseDouble(s);
} else {
CTC_R_I = Double.NaN;
}
}

protected final void initCTC_R_O(String s) {
if (!s.trim().isEmpty()) {
CTC_R_O = Short.parseShort(s);
} else {
CTC_R_O = Short.MIN_VALUE;
}
}

protected final void initCTC_R_T(String s) {
if (!s.trim().isEmpty()) {
CTC_R_T = Short.parseShort(s);
} else {
CTC_R_T = Short.MIN_VALUE;
}
}

protected final void initCUFFSIZE(String s) {
if (!s.trim().isEmpty()) {
CUFFSIZE = Byte.parseByte(s);
} else {
CUFFSIZE = Byte.MIN_VALUE;
}
}

protected final void initCURRENTDB_08(String s) {
if (!s.trim().isEmpty()) {
CURRENTDB_08 = Double.parseDouble(s);
} else {
CURRENTDB_08 = Double.NaN;
}
}

protected final void initCURRENTDB_SPA(String s) {
if (!s.trim().isEmpty()) {
CURRENTDB_SPA = Double.parseDouble(s);
} else {
CURRENTDB_SPA = Double.NaN;
}
}

protected final void initCURRENTDC_08(String s) {
if (!s.trim().isEmpty()) {
CURRENTDC_08 = Double.parseDouble(s);
} else {
CURRENTDC_08 = Double.NaN;
}
}

protected final void initCURRENTDC_SPA(String s) {
if (!s.trim().isEmpty()) {
CURRENTDC_SPA = Double.parseDouble(s);
} else {
CURRENTDC_SPA = Double.NaN;
}
}

protected final void initCVD7DIBT(String s) {
if (!s.trim().isEmpty()) {
CVD7DIBT = Byte.parseByte(s);
} else {
CVD7DIBT = Byte.MIN_VALUE;
}
}

protected final void initCVD7DIEBP(String s) {
if (!s.trim().isEmpty()) {
CVD7DIEBP = Byte.parseByte(s);
} else {
CVD7DIEBP = Byte.MIN_VALUE;
}
}

protected final void initDCURPEN(String s) {
if (!s.trim().isEmpty()) {
DCURPEN = Byte.parseByte(s);
} else {
DCURPEN = Byte.MIN_VALUE;
}
}

protected final void initDDBDC(String s) {
if (!s.trim().isEmpty()) {
DDBDC = Byte.parseByte(s);
} else {
DDBDC = Byte.MIN_VALUE;
}
}

protected final void initDEMPPEN(String s) {
if (!s.trim().isEmpty()) {
DEMPPEN = Byte.parseByte(s);
} else {
DEMPPEN = Byte.MIN_VALUE;
}
}

protected final void initDHC14(String s) {
if (!s.trim().isEmpty()) {
DHC14 = Byte.parseByte(s);
} else {
DHC14 = Byte.MIN_VALUE;
}
}

protected final void initDHC15(String s) {
if (!s.trim().isEmpty()) {
DHC15 = Byte.parseByte(s);
} else {
DHC15 = Byte.MIN_VALUE;
}
}

protected final void initDHC16(String s) {
if (!s.trim().isEmpty()) {
DHC16 = Byte.parseByte(s);
} else {
DHC16 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG14(String s) {
if (!s.trim().isEmpty()) {
DHCAG14 = Byte.parseByte(s);
} else {
DHCAG14 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG15(String s) {
if (!s.trim().isEmpty()) {
DHCAG15 = Byte.parseByte(s);
} else {
DHCAG15 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG16(String s) {
if (!s.trim().isEmpty()) {
DHCAG16 = Byte.parseByte(s);
} else {
DHCAG16 = Byte.MIN_VALUE;
}
}

protected final void initDHCR08(String s) {
if (!s.trim().isEmpty()) {
DHCR08 = Byte.parseByte(s);
} else {
DHCR08 = Byte.MIN_VALUE;
}
}

protected final void initDHCR09(String s) {
if (!s.trim().isEmpty()) {
DHCR09 = Byte.parseByte(s);
} else {
DHCR09 = Byte.MIN_VALUE;
}
}

protected final void initDHCR10(String s) {
if (!s.trim().isEmpty()) {
DHCR10 = Byte.parseByte(s);
} else {
DHCR10 = Byte.MIN_VALUE;
}
}

protected final void initDHCR104(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR104 = false;
} else {
DHCR104 = true;
}
}
}

protected final void initDHCR105(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR105 = false;
} else {
DHCR105 = true;
}
}
}

protected final void initDHCR106(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR106 = false;
} else {
DHCR106 = true;
}
}
}

protected final void initDHCR107(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR107 = false;
} else {
DHCR107 = true;
}
}
}

protected final void initDHCR108(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR108 = false;
} else {
DHCR108 = true;
}
}
}

protected final void initDHCR109(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR109 = false;
} else {
DHCR109 = true;
}
}
}

protected final void initDHCR11(String s) {
if (!s.trim().isEmpty()) {
DHCR11 = Byte.parseByte(s);
} else {
DHCR11 = Byte.MIN_VALUE;
}
}

protected final void initDHCR110(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR110 = false;
} else {
DHCR110 = true;
}
}
}

protected final void initDHCR111(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR111 = false;
} else {
DHCR111 = true;
}
}
}

protected final void initDHCR112(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR112 = false;
} else {
DHCR112 = true;
}
}
}

protected final void initDHCR118(String s) {
if (!s.trim().isEmpty()) {
DHCR118 = Byte.parseByte(s);
} else {
DHCR118 = Byte.MIN_VALUE;
}
}

protected final void initDHCR119(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR119 = false;
} else {
DHCR119 = true;
}
}
}

protected final void initDHCR12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR12 = false;
} else {
DHCR12 = true;
}
}
}

protected final void initDHCR120(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR120 = false;
} else {
DHCR120 = true;
}
}
}

protected final void initDHCR121(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR121 = false;
} else {
DHCR121 = true;
}
}
}

protected final void initDHCR122(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR122 = false;
} else {
DHCR122 = true;
}
}
}

protected final void initDHCR123(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR123 = false;
} else {
DHCR123 = true;
}
}
}

protected final void initDHCR124(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR124 = false;
} else {
DHCR124 = true;
}
}
}

protected final void initDHCR125(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR125 = false;
} else {
DHCR125 = true;
}
}
}

protected final void initDHCR126(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR126 = false;
} else {
DHCR126 = true;
}
}
}

protected final void initDHCR127(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR127 = false;
} else {
DHCR127 = true;
}
}
}

protected final void initDHCR128(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR128 = false;
} else {
DHCR128 = true;
}
}
}

protected final void initDHCR13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR13 = false;
} else {
DHCR13 = true;
}
}
}

protected final void initDHCR134(String s) {
if (!s.trim().isEmpty()) {
DHCR134 = Byte.parseByte(s);
} else {
DHCR134 = Byte.MIN_VALUE;
}
}

protected final void initDHCR135(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR135 = false;
} else {
DHCR135 = true;
}
}
}

protected final void initDHCR136(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR136 = false;
} else {
DHCR136 = true;
}
}
}

protected final void initDHCR137(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR137 = false;
} else {
DHCR137 = true;
}
}
}

protected final void initDHCR138(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR138 = false;
} else {
DHCR138 = true;
}
}
}

protected final void initDHCR139(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR139 = false;
} else {
DHCR139 = true;
}
}
}

protected final void initDHCR14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR14 = false;
} else {
DHCR14 = true;
}
}
}

protected final void initDHCR140(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR140 = false;
} else {
DHCR140 = true;
}
}
}

protected final void initDHCR141(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR141 = false;
} else {
DHCR141 = true;
}
}
}

protected final void initDHCR142(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR142 = false;
} else {
DHCR142 = true;
}
}
}

protected final void initDHCR143(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR143 = false;
} else {
DHCR143 = true;
}
}
}

protected final void initDHCR144(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR144 = false;
} else {
DHCR144 = true;
}
}
}

protected final void initDHCR147(String s) {
if (!s.trim().isEmpty()) {
DHCR147 = Byte.parseByte(s);
} else {
DHCR147 = Byte.MIN_VALUE;
}
}

protected final void initDHCR148(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR148 = false;
} else {
DHCR148 = true;
}
}
}

protected final void initDHCR149(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR149 = false;
} else {
DHCR149 = true;
}
}
}

protected final void initDHCR15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR15 = false;
} else {
DHCR15 = true;
}
}
}

protected final void initDHCR150(String s) {
if (!s.trim().isEmpty()) {
DHCR150 = Byte.parseByte(s);
} else {
DHCR150 = Byte.MIN_VALUE;
}
}

protected final void initDHCR151(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR151 = false;
} else {
DHCR151 = true;
}
}
}

protected final void initDHCR152(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR152 = false;
} else {
DHCR152 = true;
}
}
}

protected final void initDHCR153(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR153 = false;
} else {
DHCR153 = true;
}
}
}

protected final void initDHCR154(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR154 = false;
} else {
DHCR154 = true;
}
}
}

protected final void initDHCR155(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR155 = false;
} else {
DHCR155 = true;
}
}
}

protected final void initDHCR156(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR156 = false;
} else {
DHCR156 = true;
}
}
}

protected final void initDHCR157(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR157 = false;
} else {
DHCR157 = true;
}
}
}

protected final void initDHCR158(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR158 = false;
} else {
DHCR158 = true;
}
}
}

protected final void initDHCR159(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR159 = false;
} else {
DHCR159 = true;
}
}
}

protected final void initDHCR16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR16 = false;
} else {
DHCR16 = true;
}
}
}

protected final void initDHCR160(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR160 = false;
} else {
DHCR160 = true;
}
}
}

protected final void initDHCR163(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR163 = false;
} else {
DHCR163 = true;
}
}
}

protected final void initDHCR164(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR164 = false;
} else {
DHCR164 = true;
}
}
}

protected final void initDHCR165(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR165 = false;
} else {
DHCR165 = true;
}
}
}

protected final void initDHCR166(String s) {
if (!s.trim().isEmpty()) {
DHCR166 = Byte.parseByte(s);
} else {
DHCR166 = Byte.MIN_VALUE;
}
}

protected final void initDHCR167(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR167 = false;
} else {
DHCR167 = true;
}
}
}

protected final void initDHCR168(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR168 = false;
} else {
DHCR168 = true;
}
}
}

protected final void initDHCR169(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR169 = false;
} else {
DHCR169 = true;
}
}
}

protected final void initDHCR170(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR170 = false;
} else {
DHCR170 = true;
}
}
}

protected final void initDHCR171(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR171 = false;
} else {
DHCR171 = true;
}
}
}

protected final void initDHCR172(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR172 = false;
} else {
DHCR172 = true;
}
}
}

protected final void initDHCR173(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR173 = false;
} else {
DHCR173 = true;
}
}
}

protected final void initDHCR174(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR174 = false;
} else {
DHCR174 = true;
}
}
}

protected final void initDHCR175(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR175 = false;
} else {
DHCR175 = true;
}
}
}

protected final void initDHCR176(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR176 = false;
} else {
DHCR176 = true;
}
}
}

protected final void initDHCR178(String s) {
if (!s.trim().isEmpty()) {
DHCR178 = Byte.parseByte(s);
} else {
DHCR178 = Byte.MIN_VALUE;
}
}

protected final void initDHCR179(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR179 = false;
} else {
DHCR179 = true;
}
}
}

protected final void initDHCR180(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR180 = false;
} else {
DHCR180 = true;
}
}
}

protected final void initDHCR181(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR181 = false;
} else {
DHCR181 = true;
}
}
}

protected final void initDHCR182(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR182 = false;
} else {
DHCR182 = true;
}
}
}

protected final void initDHCR183(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR183 = false;
} else {
DHCR183 = true;
}
}
}

protected final void initDHCR184(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR184 = false;
} else {
DHCR184 = true;
}
}
}

protected final void initDHCR185(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR185 = false;
} else {
DHCR185 = true;
}
}
}

protected final void initDHCR186(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR186 = false;
} else {
DHCR186 = true;
}
}
}

protected final void initDHCR187(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR187 = false;
} else {
DHCR187 = true;
}
}
}

protected final void initDHCR188(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR188 = false;
} else {
DHCR188 = true;
}
}
}

protected final void initDHCR189(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR189 = false;
} else {
DHCR189 = true;
}
}
}

protected final void initDHCR190(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR190 = false;
} else {
DHCR190 = true;
}
}
}

protected final void initDHCR191(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR191 = false;
} else {
DHCR191 = true;
}
}
}

protected final void initDHCR192(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR192 = false;
} else {
DHCR192 = true;
}
}
}

protected final void initDHCR194(String s) {
if (!s.trim().isEmpty()) {
DHCR194 = Byte.parseByte(s);
} else {
DHCR194 = Byte.MIN_VALUE;
}
}

protected final void initDHCR195(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR195 = false;
} else {
DHCR195 = true;
}
}
}

protected final void initDHCR196(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR196 = false;
} else {
DHCR196 = true;
}
}
}

protected final void initDHCR197(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR197 = false;
} else {
DHCR197 = true;
}
}
}

protected final void initDHCR198(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR198 = false;
} else {
DHCR198 = true;
}
}
}

protected final void initDHCR199(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR199 = false;
} else {
DHCR199 = true;
}
}
}

protected final void initDHCR200(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR200 = false;
} else {
DHCR200 = true;
}
}
}

protected final void initDHCR201(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR201 = false;
} else {
DHCR201 = true;
}
}
}

protected final void initDHCR202(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR202 = false;
} else {
DHCR202 = true;
}
}
}

protected final void initDHCR203(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR203 = false;
} else {
DHCR203 = true;
}
}
}

protected final void initDHCR204(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR204 = false;
} else {
DHCR204 = true;
}
}
}

protected final void initDHCR205(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR205 = false;
} else {
DHCR205 = true;
}
}
}

protected final void initDHCR206(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR206 = false;
} else {
DHCR206 = true;
}
}
}

protected final void initDHCR207(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR207 = false;
} else {
DHCR207 = true;
}
}
}

protected final void initDHCR208(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR208 = false;
} else {
DHCR208 = true;
}
}
}

protected final void initDHCR209(String s) {
if (!s.trim().isEmpty()) {
DHCR209 = Byte.parseByte(s);
} else {
DHCR209 = Byte.MIN_VALUE;
}
}

protected final void initDHCR210(String s) {
if (!s.trim().isEmpty()) {
DHCR210 = Byte.parseByte(s);
} else {
DHCR210 = Byte.MIN_VALUE;
}
}

protected final void initDHCR211(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR211 = false;
} else {
DHCR211 = true;
}
}
}

protected final void initDHCR212(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR212 = false;
} else {
DHCR212 = true;
}
}
}

protected final void initDHCR213(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR213 = false;
} else {
DHCR213 = true;
}
}
}

protected final void initDHCR214(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR214 = false;
} else {
DHCR214 = true;
}
}
}

protected final void initDHCR215(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR215 = false;
} else {
DHCR215 = true;
}
}
}

protected final void initDHCR216(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR216 = false;
} else {
DHCR216 = true;
}
}
}

protected final void initDHCR217(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR217 = false;
} else {
DHCR217 = true;
}
}
}

protected final void initDHCR218(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR218 = false;
} else {
DHCR218 = true;
}
}
}

protected final void initDHCR219(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR219 = false;
} else {
DHCR219 = true;
}
}
}

protected final void initDHCR220(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR220 = false;
} else {
DHCR220 = true;
}
}
}

protected final void initDHCR221(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR221 = false;
} else {
DHCR221 = true;
}
}
}

protected final void initDHCR222(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR222 = false;
} else {
DHCR222 = true;
}
}
}

protected final void initDHCR223(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR223 = false;
} else {
DHCR223 = true;
}
}
}

protected final void initDHCR224(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR224 = false;
} else {
DHCR224 = true;
}
}
}

protected final void initDHCR225(String s) {
if (!s.trim().isEmpty()) {
DHCR225 = Byte.parseByte(s);
} else {
DHCR225 = Byte.MIN_VALUE;
}
}

protected final void initDHCR226(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR226 = false;
} else {
DHCR226 = true;
}
}
}

protected final void initDHCR227(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR227 = false;
} else {
DHCR227 = true;
}
}
}

protected final void initDHCR228(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR228 = false;
} else {
DHCR228 = true;
}
}
}

protected final void initDHCR229(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR229 = false;
} else {
DHCR229 = true;
}
}
}

protected final void initDHCR230(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR230 = false;
} else {
DHCR230 = true;
}
}
}

protected final void initDHCR231(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR231 = false;
} else {
DHCR231 = true;
}
}
}

protected final void initDHCR232(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR232 = false;
} else {
DHCR232 = true;
}
}
}

protected final void initDHCR233(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR233 = false;
} else {
DHCR233 = true;
}
}
}

protected final void initDHCR234(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR234 = false;
} else {
DHCR234 = true;
}
}
}

protected final void initDHCR235(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR235 = false;
} else {
DHCR235 = true;
}
}
}

protected final void initDHCR236(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR236 = false;
} else {
DHCR236 = true;
}
}
}

protected final void initDHCR237(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR237 = false;
} else {
DHCR237 = true;
}
}
}

protected final void initDHCR238(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR238 = false;
} else {
DHCR238 = true;
}
}
}

protected final void initDHCR239(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR239 = false;
} else {
DHCR239 = true;
}
}
}

protected final void initDHCR24(String s) {
if (!s.trim().isEmpty()) {
DHCR24 = Byte.parseByte(s);
} else {
DHCR24 = Byte.MIN_VALUE;
}
}

protected final void initDHCR240(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR240 = false;
} else {
DHCR240 = true;
}
}
}

protected final void initDHCR241(String s) {
if (!s.trim().isEmpty()) {
DHCR241 = Byte.parseByte(s);
} else {
DHCR241 = Byte.MIN_VALUE;
}
}

protected final void initDHCR242(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR242 = false;
} else {
DHCR242 = true;
}
}
}

protected final void initDHCR243(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR243 = false;
} else {
DHCR243 = true;
}
}
}

protected final void initDHCR244(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR244 = false;
} else {
DHCR244 = true;
}
}
}

protected final void initDHCR245(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR245 = false;
} else {
DHCR245 = true;
}
}
}

protected final void initDHCR246(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR246 = false;
} else {
DHCR246 = true;
}
}
}

protected final void initDHCR247(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR247 = false;
} else {
DHCR247 = true;
}
}
}

protected final void initDHCR248(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR248 = false;
} else {
DHCR248 = true;
}
}
}

protected final void initDHCR249(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR249 = false;
} else {
DHCR249 = true;
}
}
}

protected final void initDHCR25(String s) {
if (!s.trim().isEmpty()) {
DHCR25 = Byte.parseByte(s);
} else {
DHCR25 = Byte.MIN_VALUE;
}
}

protected final void initDHCR250(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR250 = false;
} else {
DHCR250 = true;
}
}
}

protected final void initDHCR251(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR251 = false;
} else {
DHCR251 = true;
}
}
}

protected final void initDHCR252(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR252 = false;
} else {
DHCR252 = true;
}
}
}

protected final void initDHCR253(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR253 = false;
} else {
DHCR253 = true;
}
}
}

protected final void initDHCR254(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR254 = false;
} else {
DHCR254 = true;
}
}
}

protected final void initDHCR255(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR255 = false;
} else {
DHCR255 = true;
}
}
}

protected final void initDHCR256(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR256 = false;
} else {
DHCR256 = true;
}
}
}

protected final void initDHCR26(String s) {
if (!s.trim().isEmpty()) {
DHCR26 = Byte.parseByte(s);
} else {
DHCR26 = Byte.MIN_VALUE;
}
}

protected final void initDHCR27(String s) {
if (!s.trim().isEmpty()) {
DHCR27 = Byte.parseByte(s);
} else {
DHCR27 = Byte.MIN_VALUE;
}
}

protected final void initDHCR28(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR28 = false;
} else {
DHCR28 = true;
}
}
}

protected final void initDHCR29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR29 = false;
} else {
DHCR29 = true;
}
}
}

protected final void initDHCR30(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR30 = false;
} else {
DHCR30 = true;
}
}
}

protected final void initDHCR31(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR31 = false;
} else {
DHCR31 = true;
}
}
}

protected final void initDHCR32(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR32 = false;
} else {
DHCR32 = true;
}
}
}

protected final void initDHCR40(String s) {
if (!s.trim().isEmpty()) {
DHCR40 = Byte.parseByte(s);
} else {
DHCR40 = Byte.MIN_VALUE;
}
}

protected final void initDHCR41(String s) {
if (!s.trim().isEmpty()) {
DHCR41 = Byte.parseByte(s);
} else {
DHCR41 = Byte.MIN_VALUE;
}
}

protected final void initDHCR42(String s) {
if (!s.trim().isEmpty()) {
DHCR42 = Byte.parseByte(s);
} else {
DHCR42 = Byte.MIN_VALUE;
}
}

protected final void initDHCR43(String s) {
if (!s.trim().isEmpty()) {
DHCR43 = Byte.parseByte(s);
} else {
DHCR43 = Byte.MIN_VALUE;
}
}

protected final void initDHCR44(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR44 = false;
} else {
DHCR44 = true;
}
}
}

protected final void initDHCR45(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR45 = false;
} else {
DHCR45 = true;
}
}
}

protected final void initDHCR46(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR46 = false;
} else {
DHCR46 = true;
}
}
}

protected final void initDHCR47(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR47 = false;
} else {
DHCR47 = true;
}
}
}

protected final void initDHCR48(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR48 = false;
} else {
DHCR48 = true;
}
}
}

protected final void initDHCR56(String s) {
if (!s.trim().isEmpty()) {
DHCR56 = Byte.parseByte(s);
} else {
DHCR56 = Byte.MIN_VALUE;
}
}

protected final void initDHCR57(String s) {
if (!s.trim().isEmpty()) {
DHCR57 = Byte.parseByte(s);
} else {
DHCR57 = Byte.MIN_VALUE;
}
}

protected final void initDHCR58(String s) {
if (!s.trim().isEmpty()) {
DHCR58 = Byte.parseByte(s);
} else {
DHCR58 = Byte.MIN_VALUE;
}
}

protected final void initDHCR59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR59 = false;
} else {
DHCR59 = true;
}
}
}

protected final void initDHCR60(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR60 = false;
} else {
DHCR60 = true;
}
}
}

protected final void initDHCR61(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR61 = false;
} else {
DHCR61 = true;
}
}
}

protected final void initDHCR62(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR62 = false;
} else {
DHCR62 = true;
}
}
}

protected final void initDHCR63(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR63 = false;
} else {
DHCR63 = true;
}
}
}

protected final void initDHCR64(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR64 = false;
} else {
DHCR64 = true;
}
}
}

protected final void initDHCR72(String s) {
if (!s.trim().isEmpty()) {
DHCR72 = Byte.parseByte(s);
} else {
DHCR72 = Byte.MIN_VALUE;
}
}

protected final void initDHCR73(String s) {
if (!s.trim().isEmpty()) {
DHCR73 = Byte.parseByte(s);
} else {
DHCR73 = Byte.MIN_VALUE;
}
}

protected final void initDHCR74(String s) {
if (!s.trim().isEmpty()) {
DHCR74 = Byte.parseByte(s);
} else {
DHCR74 = Byte.MIN_VALUE;
}
}

protected final void initDHCR75(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR75 = false;
} else {
DHCR75 = true;
}
}
}

protected final void initDHCR76(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR76 = false;
} else {
DHCR76 = true;
}
}
}

protected final void initDHCR77(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR77 = false;
} else {
DHCR77 = true;
}
}
}

protected final void initDHCR78(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR78 = false;
} else {
DHCR78 = true;
}
}
}

protected final void initDHCR79(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR79 = false;
} else {
DHCR79 = true;
}
}
}

protected final void initDHCR80(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR80 = false;
} else {
DHCR80 = true;
}
}
}

protected final void initDHCR88(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR88 = false;
} else {
DHCR88 = true;
}
}
}

protected final void initDHCR89(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR89 = false;
} else {
DHCR89 = true;
}
}
}

protected final void initDHCR90(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR90 = false;
} else {
DHCR90 = true;
}
}
}

protected final void initDHCR91(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR91 = false;
} else {
DHCR91 = true;
}
}
}

protected final void initDHCR92(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR92 = false;
} else {
DHCR92 = true;
}
}
}

protected final void initDHCR93(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR93 = false;
} else {
DHCR93 = true;
}
}
}

protected final void initDHCR94(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR94 = false;
} else {
DHCR94 = true;
}
}
}

protected final void initDHCR95(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR95 = false;
} else {
DHCR95 = true;
}
}
}

protected final void initDHCR96(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR96 = false;
} else {
DHCR96 = true;
}
}
}

protected final void initDHCS14(String s) {
if (!s.trim().isEmpty()) {
DHCS14 = Byte.parseByte(s);
} else {
DHCS14 = Byte.MIN_VALUE;
}
}

protected final void initDHCS15(String s) {
if (!s.trim().isEmpty()) {
DHCS15 = Byte.parseByte(s);
} else {
DHCS15 = Byte.MIN_VALUE;
}
}

protected final void initDHCS16(String s) {
if (!s.trim().isEmpty()) {
DHCS16 = Byte.parseByte(s);
} else {
DHCS16 = Byte.MIN_VALUE;
}
}

protected final void initDHDOBC(String s) {
if (!s.trim().isEmpty()) {
DHDOBC = Byte.parseByte(s);
} else {
DHDOBC = Byte.MIN_VALUE;
}
}

protected final void initDHDOBC10(String s) {
if (!s.trim().isEmpty()) {
DHDOBC10 = Byte.parseByte(s);
} else {
DHDOBC10 = Byte.MIN_VALUE;
}
}

protected final void initDHDOBC11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHDOBC11 = false;
} else {
DHDOBC11 = true;
}
}
}

protected final void initDHDOBC12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHDOBC12 = false;
} else {
DHDOBC12 = true;
}
}
}

protected final void initDHDOBC13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHDOBC13 = false;
} else {
DHDOBC13 = true;
}
}
}

protected final void initDHDOBC14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHDOBC14 = false;
} else {
DHDOBC14 = true;
}
}
}

protected final void initDHDOBC15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHDOBC15 = false;
} else {
DHDOBC15 = true;
}
}
}

protected final void initDHDOBC16(String s) {
if (!s.trim().isEmpty()) {
DHDOBC16 = Byte.parseByte(s);
} else {
DHDOBC16 = Byte.MIN_VALUE;
}
}

protected final void initDHDOBC2(String s) {
if (!s.trim().isEmpty()) {
DHDOBC2 = Byte.parseByte(s);
} else {
DHDOBC2 = Byte.MIN_VALUE;
}
}

protected final void initDHDOBC3(String s) {
if (!s.trim().isEmpty()) {
DHDOBC3 = Byte.parseByte(s);
} else {
DHDOBC3 = Byte.MIN_VALUE;
}
}

protected final void initDHDOBC4(String s) {
if (!s.trim().isEmpty()) {
DHDOBC4 = Byte.parseByte(s);
} else {
DHDOBC4 = Byte.MIN_VALUE;
}
}

protected final void initDHDOBC5(String s) {
if (!s.trim().isEmpty()) {
DHDOBC5 = Byte.parseByte(s);
} else {
DHDOBC5 = Byte.MIN_VALUE;
}
}

protected final void initDHDOBC6(String s) {
if (!s.trim().isEmpty()) {
DHDOBC6 = Byte.parseByte(s);
} else {
DHDOBC6 = Byte.MIN_VALUE;
}
}

protected final void initDHDOBC7(String s) {
if (!s.trim().isEmpty()) {
DHDOBC7 = Byte.parseByte(s);
} else {
DHDOBC7 = Byte.MIN_VALUE;
}
}

protected final void initDHDOBC8(String s) {
if (!s.trim().isEmpty()) {
DHDOBC8 = Byte.parseByte(s);
} else {
DHDOBC8 = Byte.MIN_VALUE;
}
}

protected final void initDHDOBC9(String s) {
if (!s.trim().isEmpty()) {
DHDOBC9 = Byte.parseByte(s);
} else {
DHDOBC9 = Byte.MIN_VALUE;
}
}

protected final void initDHEACD(String s) {
if (!s.trim().isEmpty()) {
DHEACD = Byte.parseByte(s);
} else {
DHEACD = Byte.MIN_VALUE;
}
}

protected final void initDHEAS(String s) {
if (!s.trim().isEmpty()) {
DHEAS = Double.parseDouble(s);
} else {
DHEAS = Double.NaN;
}
}

protected final void initDHEHNO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHEHNO = false;
} else {
DHEHNO = true;
}
}
}

protected final void initDHEMEB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHEMEB = false;
} else {
DHEMEB = true;
}
}
}

protected final void initDHEMEN(String s) {
if (!s.trim().isEmpty()) {
DHEMEN = Byte.parseByte(s);
} else {
DHEMEN = Byte.MIN_VALUE;
}
}

protected final void initDHEPEE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHEPEE = false;
} else {
DHEPEE = true;
}
}
}

protected final void initDHESKA(String s) {
if (!s.trim().isEmpty()) {
DHESKA = Byte.parseByte(s);
} else {
DHESKA = Byte.MIN_VALUE;
}
}

protected final void initDHESMK(String s) {
if (!s.trim().isEmpty()) {
DHESMK = Byte.parseByte(s);
} else {
DHESMK = Byte.MIN_VALUE;
}
}

protected final void initDHIASEP(String s) {
if (!s.trim().isEmpty()) {
DHIASEP = Byte.parseByte(s);
} else {
DHIASEP = Byte.MIN_VALUE;
}
}

protected final void initDHPA10(String s) {
if (!s.trim().isEmpty()) {
DHPA10 = Byte.parseByte(s);
} else {
DHPA10 = Byte.MIN_VALUE;
}
}

protected final void initDHPA11(String s) {
if (!s.trim().isEmpty()) {
DHPA11 = Byte.parseByte(s);
} else {
DHPA11 = Byte.MIN_VALUE;
}
}

protected final void initDHPA12(String s) {
if (!s.trim().isEmpty()) {
DHPA12 = Byte.parseByte(s);
} else {
DHPA12 = Byte.MIN_VALUE;
}
}

protected final void initDHPA13(String s) {
if (!s.trim().isEmpty()) {
DHPA13 = Byte.parseByte(s);
} else {
DHPA13 = Byte.MIN_VALUE;
}
}

protected final void initDHPA14(String s) {
if (!s.trim().isEmpty()) {
DHPA14 = Byte.parseByte(s);
} else {
DHPA14 = Byte.MIN_VALUE;
}
}

protected final void initDHPA15(String s) {
if (!s.trim().isEmpty()) {
DHPA15 = Byte.parseByte(s);
} else {
DHPA15 = Byte.MIN_VALUE;
}
}

protected final void initDHPA16(String s) {
if (!s.trim().isEmpty()) {
DHPA16 = Byte.parseByte(s);
} else {
DHPA16 = Byte.MIN_VALUE;
}
}

protected final void initDHPA2(String s) {
if (!s.trim().isEmpty()) {
DHPA2 = Byte.parseByte(s);
} else {
DHPA2 = Byte.MIN_VALUE;
}
}

protected final void initDHPA3(String s) {
if (!s.trim().isEmpty()) {
DHPA3 = Byte.parseByte(s);
} else {
DHPA3 = Byte.MIN_VALUE;
}
}

protected final void initDHPA4(String s) {
if (!s.trim().isEmpty()) {
DHPA4 = Byte.parseByte(s);
} else {
DHPA4 = Byte.MIN_VALUE;
}
}

protected final void initDHPA5(String s) {
if (!s.trim().isEmpty()) {
DHPA5 = Byte.parseByte(s);
} else {
DHPA5 = Byte.MIN_VALUE;
}
}

protected final void initDHPA6(String s) {
if (!s.trim().isEmpty()) {
DHPA6 = Byte.parseByte(s);
} else {
DHPA6 = Byte.MIN_VALUE;
}
}

protected final void initDHPA7(String s) {
if (!s.trim().isEmpty()) {
DHPA7 = Byte.parseByte(s);
} else {
DHPA7 = Byte.MIN_VALUE;
}
}

protected final void initDHPA8(String s) {
if (!s.trim().isEmpty()) {
DHPA8 = Byte.parseByte(s);
} else {
DHPA8 = Byte.MIN_VALUE;
}
}

protected final void initDHPA9(String s) {
if (!s.trim().isEmpty()) {
DHPA9 = Byte.parseByte(s);
} else {
DHPA9 = Byte.MIN_VALUE;
}
}

protected final void initDHPB10(String s) {
if (!s.trim().isEmpty()) {
DHPB10 = Byte.parseByte(s);
} else {
DHPB10 = Byte.MIN_VALUE;
}
}

protected final void initDHPB11(String s) {
if (!s.trim().isEmpty()) {
DHPB11 = Byte.parseByte(s);
} else {
DHPB11 = Byte.MIN_VALUE;
}
}

protected final void initDHPB12(String s) {
if (!s.trim().isEmpty()) {
DHPB12 = Byte.parseByte(s);
} else {
DHPB12 = Byte.MIN_VALUE;
}
}

protected final void initDHPB13(String s) {
if (!s.trim().isEmpty()) {
DHPB13 = Byte.parseByte(s);
} else {
DHPB13 = Byte.MIN_VALUE;
}
}

protected final void initDHPB14(String s) {
if (!s.trim().isEmpty()) {
DHPB14 = Byte.parseByte(s);
} else {
DHPB14 = Byte.MIN_VALUE;
}
}

protected final void initDHPB15(String s) {
if (!s.trim().isEmpty()) {
DHPB15 = Byte.parseByte(s);
} else {
DHPB15 = Byte.MIN_VALUE;
}
}

protected final void initDHPB16(String s) {
if (!s.trim().isEmpty()) {
DHPB16 = Byte.parseByte(s);
} else {
DHPB16 = Byte.MIN_VALUE;
}
}

protected final void initDHPB2(String s) {
if (!s.trim().isEmpty()) {
DHPB2 = Byte.parseByte(s);
} else {
DHPB2 = Byte.MIN_VALUE;
}
}

protected final void initDHPB3(String s) {
if (!s.trim().isEmpty()) {
DHPB3 = Byte.parseByte(s);
} else {
DHPB3 = Byte.MIN_VALUE;
}
}

protected final void initDHPB4(String s) {
if (!s.trim().isEmpty()) {
DHPB4 = Byte.parseByte(s);
} else {
DHPB4 = Byte.MIN_VALUE;
}
}

protected final void initDHPB5(String s) {
if (!s.trim().isEmpty()) {
DHPB5 = Byte.parseByte(s);
} else {
DHPB5 = Byte.MIN_VALUE;
}
}

protected final void initDHPB6(String s) {
if (!s.trim().isEmpty()) {
DHPB6 = Byte.parseByte(s);
} else {
DHPB6 = Byte.MIN_VALUE;
}
}

protected final void initDHPB7(String s) {
if (!s.trim().isEmpty()) {
DHPB7 = Byte.parseByte(s);
} else {
DHPB7 = Byte.MIN_VALUE;
}
}

protected final void initDHPB8(String s) {
if (!s.trim().isEmpty()) {
DHPB8 = Byte.parseByte(s);
} else {
DHPB8 = Byte.MIN_VALUE;
}
}

protected final void initDHPB9(String s) {
if (!s.trim().isEmpty()) {
DHPB9 = Byte.parseByte(s);
} else {
DHPB9 = Byte.MIN_VALUE;
}
}

protected final void initDHR13(String s) {
if (!s.trim().isEmpty()) {
DHR13 = Byte.parseByte(s);
} else {
DHR13 = Byte.MIN_VALUE;
}
}

protected final void initDHR14(String s) {
if (!s.trim().isEmpty()) {
DHR14 = Byte.parseByte(s);
} else {
DHR14 = Byte.MIN_VALUE;
}
}

protected final void initDHR15(String s) {
if (!s.trim().isEmpty()) {
DHR15 = Byte.parseByte(s);
} else {
DHR15 = Byte.MIN_VALUE;
}
}

protected final void initDHR16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHR16 = false;
} else {
DHR16 = true;
}
}
}

protected final void initDHSEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
DHSEX = false;
} else {
DHSEX = true;
}
}
}

protected final void initDHWORK(String s) {
if (!s.trim().isEmpty()) {
DHWORK = Byte.parseByte(s);
} else {
DHWORK = Byte.MIN_VALUE;
}
}

protected final void initDIAGR(String s) {
if (!s.trim().isEmpty()) {
DIAGR = Byte.parseByte(s);
} else {
DIAGR = Byte.MIN_VALUE;
}
}

protected final void initDIAS1(String s) {
if (!s.trim().isEmpty()) {
DIAS1 = Short.parseShort(s);
} else {
DIAS1 = Short.MIN_VALUE;
}
}

protected final void initDIAS2(String s) {
if (!s.trim().isEmpty()) {
DIAS2 = Short.parseShort(s);
} else {
DIAS2 = Short.MIN_VALUE;
}
}

protected final void initDIAS3(String s) {
if (!s.trim().isEmpty()) {
DIAS3 = Short.parseShort(s);
} else {
DIAS3 = Short.MIN_VALUE;
}
}

protected final void initDIAVAL(String s) {
if (!s.trim().isEmpty()) {
DIAVAL = Double.parseDouble(s);
} else {
DIAVAL = Double.NaN;
}
}

protected final void initDIBPCOT(String s) {
if (!s.trim().isEmpty()) {
DIBPCOT = Byte.parseByte(s);
} else {
DIBPCOT = Byte.MIN_VALUE;
}
}

protected final void initDIDBNY(String s) {
if (!s.trim().isEmpty()) {
DIDBNY = Short.parseShort(s);
} else {
DIDBNY = Short.MIN_VALUE;
}
}

protected final void initDIDOB(String s) {
if (!s.trim().isEmpty()) {
DIDOB = Byte.parseByte(s);
} else {
DIDOB = Byte.MIN_VALUE;
}
}

protected final void initDIFBPCCU(String s) {
if (!s.trim().isEmpty()) {
DIFBPCCU = Byte.parseByte(s);
} else {
DIFBPCCU = Byte.MIN_VALUE;
}
}

protected final void initDIFBPCEQ(String s) {
if (!s.trim().isEmpty()) {
DIFBPCEQ = Byte.parseByte(s);
} else {
DIFBPCEQ = Byte.MIN_VALUE;
}
}

protected final void initDIFBPCER(String s) {
if (!s.trim().isEmpty()) {
DIFBPCER = Byte.parseByte(s);
} else {
DIFBPCER = Byte.MIN_VALUE;
}
}

protected final void initDIFBPCLE(String s) {
if (!s.trim().isEmpty()) {
DIFBPCLE = Byte.parseByte(s);
} else {
DIFBPCLE = Byte.MIN_VALUE;
}
}

protected final void initDIFBPCNO(String s) {
if (!s.trim().isEmpty()) {
DIFBPCNO = Byte.parseByte(s);
} else {
DIFBPCNO = Byte.MIN_VALUE;
}
}

protected final void initDIFBPCUP(String s) {
if (!s.trim().isEmpty()) {
DIFBPCUP = Byte.parseByte(s);
} else {
DIFBPCUP = Byte.MIN_VALUE;
}
}

protected final void initDIFJOBD(String s) {
if (!s.trim().isEmpty()) {
DIFJOBD = Byte.parseByte(s);
} else {
DIFJOBD = Byte.MIN_VALUE;
}
}

protected final void initDIGNMYC(String s) {
if (!s.trim().isEmpty()) {
DIGNMYC = Byte.parseByte(s);
} else {
DIGNMYC = Byte.MIN_VALUE;
}
}

protected final void initDIGNMYD(String s) {
if (!s.trim().isEmpty()) {
DIGNMYD = Byte.parseByte(s);
} else {
DIGNMYD = Byte.MIN_VALUE;
}
}

protected final void initDIKLIVC(String s) {
if (!s.trim().isEmpty()) {
DIKLIVC = Byte.parseByte(s);
} else {
DIKLIVC = Byte.MIN_VALUE;
}
}

protected final void initDIKLIVD(String s) {
if (!s.trim().isEmpty()) {
DIKLIVD = Byte.parseByte(s);
} else {
DIKLIVD = Byte.MIN_VALUE;
}
}

protected final void initDIMAR(String s) {
if (!s.trim().isEmpty()) {
DIMAR = Byte.parseByte(s);
} else {
DIMAR = Byte.MIN_VALUE;
}
}

protected final void initDISEX(String s) {
if (!s.trim().isEmpty()) {
DISEX = Byte.parseByte(s);
} else {
DISEX = Byte.MIN_VALUE;
}
}

protected final void initDISEXC(String s) {
if (!s.trim().isEmpty()) {
DISEXC = Byte.parseByte(s);
} else {
DISEXC = Byte.MIN_VALUE;
}
}

protected final void initDISIBC(String s) {
if (!s.trim().isEmpty()) {
DISIBC = Byte.parseByte(s);
} else {
DISIBC = Byte.MIN_VALUE;
}
}

protected final void initDISIBD(String s) {
if (!s.trim().isEmpty()) {
DISIBD = Byte.parseByte(s);
} else {
DISIBD = Byte.MIN_VALUE;
}
}

protected final void initDOBYEAR(String s) {
if (!s.trim().isEmpty()) {
DOBYEAR = Short.parseShort(s);
} else {
DOBYEAR = Short.MIN_VALUE;
}
}

protected final void initEHTCH(String s) {
if (!s.trim().isEmpty()) {
EHTCH = Byte.parseByte(s);
} else {
EHTCH = Byte.MIN_VALUE;
}
}

protected final void initEHTFT(String s) {
if (!s.trim().isEmpty()) {
EHTFT = Byte.parseByte(s);
} else {
EHTFT = Byte.MIN_VALUE;
}
}

protected final void initEHTIN(String s) {
if (!s.trim().isEmpty()) {
EHTIN = Byte.parseByte(s);
} else {
EHTIN = Byte.MIN_VALUE;
}
}

protected final void initEHTM(String s) {
if (!s.trim().isEmpty()) {
EHTM = Double.parseDouble(s);
} else {
EHTM = Double.NaN;
}
}

protected final void initERCAA(String s) {
if (!s.trim().isEmpty()) {
ERCAA = Byte.parseByte(s);
} else {
ERCAA = Byte.MIN_VALUE;
}
}

protected final void initERCABCH(String s) {
if (!s.trim().isEmpty()) {
ERCABCH = Byte.parseByte(s);
} else {
ERCABCH = Byte.MIN_VALUE;
}
}

protected final void initERCABFR(String s) {
if (!s.trim().isEmpty()) {
ERCABFR = Byte.parseByte(s);
} else {
ERCABFR = Byte.MIN_VALUE;
}
}

protected final void initERCABGC(String s) {
if (!s.trim().isEmpty()) {
ERCABGC = Byte.parseByte(s);
} else {
ERCABGC = Byte.MIN_VALUE;
}
}

protected final void initERCABOR(String s) {
if (!s.trim().isEmpty()) {
ERCABOR = Byte.parseByte(s);
} else {
ERCABOR = Byte.MIN_VALUE;
}
}

protected final void initERCABOT(String s) {
if (!s.trim().isEmpty()) {
ERCABOT = Byte.parseByte(s);
} else {
ERCABOT = Byte.MIN_VALUE;
}
}

protected final void initERCABPA(String s) {
if (!s.trim().isEmpty()) {
ERCABPA = Byte.parseByte(s);
} else {
ERCABPA = Byte.MIN_VALUE;
}
}

protected final void initERCABPL(String s) {
if (!s.trim().isEmpty()) {
ERCABPL = Byte.parseByte(s);
} else {
ERCABPL = Byte.MIN_VALUE;
}
}

protected final void initERCABSP(String s) {
if (!s.trim().isEmpty()) {
ERCABSP = Byte.parseByte(s);
} else {
ERCABSP = Byte.MIN_VALUE;
}
}

protected final void initERCAC(String s) {
if (!s.trim().isEmpty()) {
ERCAC = Short.parseShort(s);
} else {
ERCAC = Short.MIN_VALUE;
}
}

protected final void initERCADP1(String s) {
if (!s.trim().isEmpty()) {
ERCADP1 = Byte.parseByte(s);
} else {
ERCADP1 = Byte.MIN_VALUE;
}
}

protected final void initERCADP10(String s) {
if (!s.trim().isEmpty()) {
ERCADP10 = Byte.parseByte(s);
} else {
ERCADP10 = Byte.MIN_VALUE;
}
}

protected final void initERCADP11(String s) {
if (!s.trim().isEmpty()) {
ERCADP11 = Byte.parseByte(s);
} else {
ERCADP11 = Byte.MIN_VALUE;
}
}

protected final void initERCADP12(String s) {
if (!s.trim().isEmpty()) {
ERCADP12 = Byte.parseByte(s);
} else {
ERCADP12 = Byte.MIN_VALUE;
}
}

protected final void initERCADP13(String s) {
if (!s.trim().isEmpty()) {
ERCADP13 = Byte.parseByte(s);
} else {
ERCADP13 = Byte.MIN_VALUE;
}
}

protected final void initERCADP14(String s) {
if (!s.trim().isEmpty()) {
ERCADP14 = Byte.parseByte(s);
} else {
ERCADP14 = Byte.MIN_VALUE;
}
}

protected final void initERCADP15(String s) {
if (!s.trim().isEmpty()) {
ERCADP15 = Byte.parseByte(s);
} else {
ERCADP15 = Byte.MIN_VALUE;
}
}

protected final void initERCADP16(String s) {
if (!s.trim().isEmpty()) {
ERCADP16 = Byte.parseByte(s);
} else {
ERCADP16 = Byte.MIN_VALUE;
}
}

protected final void initERCADP2(String s) {
if (!s.trim().isEmpty()) {
ERCADP2 = Byte.parseByte(s);
} else {
ERCADP2 = Byte.MIN_VALUE;
}
}

protected final void initERCADP3(String s) {
if (!s.trim().isEmpty()) {
ERCADP3 = Byte.parseByte(s);
} else {
ERCADP3 = Byte.MIN_VALUE;
}
}

protected final void initERCADP4(String s) {
if (!s.trim().isEmpty()) {
ERCADP4 = Byte.parseByte(s);
} else {
ERCADP4 = Byte.MIN_VALUE;
}
}

protected final void initERCADP5(String s) {
if (!s.trim().isEmpty()) {
ERCADP5 = Byte.parseByte(s);
} else {
ERCADP5 = Byte.MIN_VALUE;
}
}

protected final void initERCADP6(String s) {
if (!s.trim().isEmpty()) {
ERCADP6 = Byte.parseByte(s);
} else {
ERCADP6 = Byte.MIN_VALUE;
}
}

protected final void initERCADP7(String s) {
if (!s.trim().isEmpty()) {
ERCADP7 = Byte.parseByte(s);
} else {
ERCADP7 = Byte.MIN_VALUE;
}
}

protected final void initERCADP8(String s) {
if (!s.trim().isEmpty()) {
ERCADP8 = Byte.parseByte(s);
} else {
ERCADP8 = Byte.MIN_VALUE;
}
}

protected final void initERCADP9(String s) {
if (!s.trim().isEmpty()) {
ERCADP9 = Byte.parseByte(s);
} else {
ERCADP9 = Byte.MIN_VALUE;
}
}

protected final void initERCALIVE(String s) {
if (!s.trim().isEmpty()) {
ERCALIVE = Byte.parseByte(s);
} else {
ERCALIVE = Byte.MIN_VALUE;
}
}

protected final void initERCAM85(String s) {
if (!s.trim().isEmpty()) {
ERCAM85 = Byte.parseByte(s);
} else {
ERCAM85 = Byte.MIN_VALUE;
}
}

protected final void initERCAM86(String s) {
if (!s.trim().isEmpty()) {
ERCAM86 = Byte.parseByte(s);
} else {
ERCAM86 = Byte.MIN_VALUE;
}
}

protected final void initERCAMCH(String s) {
if (!s.trim().isEmpty()) {
ERCAMCH = Byte.parseByte(s);
} else {
ERCAMCH = Byte.MIN_VALUE;
}
}

protected final void initERCAMFR(String s) {
if (!s.trim().isEmpty()) {
ERCAMFR = Byte.parseByte(s);
} else {
ERCAMFR = Byte.MIN_VALUE;
}
}

protected final void initERCAMGC(String s) {
if (!s.trim().isEmpty()) {
ERCAMGC = Byte.parseByte(s);
} else {
ERCAMGC = Byte.MIN_VALUE;
}
}

protected final void initERCAMOR(String s) {
if (!s.trim().isEmpty()) {
ERCAMOR = Byte.parseByte(s);
} else {
ERCAMOR = Byte.MIN_VALUE;
}
}

protected final void initERCAMOT(String s) {
if (!s.trim().isEmpty()) {
ERCAMOT = Byte.parseByte(s);
} else {
ERCAMOT = Byte.MIN_VALUE;
}
}

protected final void initERCAMPA(String s) {
if (!s.trim().isEmpty()) {
ERCAMPA = Byte.parseByte(s);
} else {
ERCAMPA = Byte.MIN_VALUE;
}
}

protected final void initERCAMPL(String s) {
if (!s.trim().isEmpty()) {
ERCAMPL = Byte.parseByte(s);
} else {
ERCAMPL = Byte.MIN_VALUE;
}
}

protected final void initERCAMSP(String s) {
if (!s.trim().isEmpty()) {
ERCAMSP = Byte.parseByte(s);
} else {
ERCAMSP = Byte.MIN_VALUE;
}
}

protected final void initERCANCH(String s) {
if (!s.trim().isEmpty()) {
ERCANCH = Byte.parseByte(s);
} else {
ERCANCH = Byte.MIN_VALUE;
}
}

protected final void initERCANFR(String s) {
if (!s.trim().isEmpty()) {
ERCANFR = Byte.parseByte(s);
} else {
ERCANFR = Byte.MIN_VALUE;
}
}

protected final void initERCANGC(String s) {
if (!s.trim().isEmpty()) {
ERCANGC = Byte.parseByte(s);
} else {
ERCANGC = Byte.MIN_VALUE;
}
}

protected final void initERCANOR(String s) {
if (!s.trim().isEmpty()) {
ERCANOR = Byte.parseByte(s);
} else {
ERCANOR = Byte.MIN_VALUE;
}
}

protected final void initERCANOT(String s) {
if (!s.trim().isEmpty()) {
ERCANOT = Byte.parseByte(s);
} else {
ERCANOT = Byte.MIN_VALUE;
}
}

protected final void initERCANPA(String s) {
if (!s.trim().isEmpty()) {
ERCANPA = Byte.parseByte(s);
} else {
ERCANPA = Byte.MIN_VALUE;
}
}

protected final void initERCANPL(String s) {
if (!s.trim().isEmpty()) {
ERCANPL = Byte.parseByte(s);
} else {
ERCANPL = Byte.MIN_VALUE;
}
}

protected final void initERCANSP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
ERCANSP = false;
} else {
ERCANSP = true;
}
}
}

protected final void initERCANTT(String s) {
if (!s.trim().isEmpty()) {
ERCANTT = Byte.parseByte(s);
} else {
ERCANTT = Byte.MIN_VALUE;
}
}

protected final void initERCARA(String s) {
if (!s.trim().isEmpty()) {
ERCARA = Byte.parseByte(s);
} else {
ERCARA = Byte.MIN_VALUE;
}
}

protected final void initERCARB(String s) {
if (!s.trim().isEmpty()) {
ERCARB = Byte.parseByte(s);
} else {
ERCARB = Byte.MIN_VALUE;
}
}

protected final void initERFVOFT(String s) {
if (!s.trim().isEmpty()) {
ERFVOFT = Byte.parseByte(s);
} else {
ERFVOFT = Byte.MIN_VALUE;
}
}

protected final void initERFVOL(String s) {
if (!s.trim().isEmpty()) {
ERFVOL = Byte.parseByte(s);
} else {
ERFVOL = Byte.MIN_VALUE;
}
}

protected final void initERFVOL96(String s) {
if (!s.trim().isEmpty()) {
ERFVOL96 = Byte.parseByte(s);
} else {
ERFVOL96 = Byte.MIN_VALUE;
}
}

protected final void initERFVOLBE(String s) {
if (!s.trim().isEmpty()) {
ERFVOLBE = Byte.parseByte(s);
} else {
ERFVOLBE = Byte.MIN_VALUE;
}
}

protected final void initERFVOLCA(String s) {
if (!s.trim().isEmpty()) {
ERFVOLCA = Byte.parseByte(s);
} else {
ERFVOLCA = Byte.MIN_VALUE;
}
}

protected final void initERFVOLED(String s) {
if (!s.trim().isEmpty()) {
ERFVOLED = Byte.parseByte(s);
} else {
ERFVOLED = Byte.MIN_VALUE;
}
}

protected final void initERFVOLIN(String s) {
if (!s.trim().isEmpty()) {
ERFVOLIN = Byte.parseByte(s);
} else {
ERFVOLIN = Byte.MIN_VALUE;
}
}

protected final void initERFVOLLE(String s) {
if (!s.trim().isEmpty()) {
ERFVOLLE = Byte.parseByte(s);
} else {
ERFVOLLE = Byte.MIN_VALUE;
}
}

protected final void initERFVOLMO(String s) {
if (!s.trim().isEmpty()) {
ERFVOLMO = Byte.parseByte(s);
} else {
ERFVOLMO = Byte.MIN_VALUE;
}
}

protected final void initERFVOLOR(String s) {
if (!s.trim().isEmpty()) {
ERFVOLOR = Byte.parseByte(s);
} else {
ERFVOLOR = Byte.MIN_VALUE;
}
}

protected final void initERFVOLPR(String s) {
if (!s.trim().isEmpty()) {
ERFVOLPR = Byte.parseByte(s);
} else {
ERFVOLPR = Byte.MIN_VALUE;
}
}

protected final void initERFVOLRE(String s) {
if (!s.trim().isEmpty()) {
ERFVOLRE = Byte.parseByte(s);
} else {
ERFVOLRE = Byte.MIN_VALUE;
}
}

protected final void initERFVOLSE(String s) {
if (!s.trim().isEmpty()) {
ERFVOLSE = Byte.parseByte(s);
} else {
ERFVOLSE = Byte.MIN_VALUE;
}
}

protected final void initERFVOLTR(String s) {
if (!s.trim().isEmpty()) {
ERFVOLTR = Byte.parseByte(s);
} else {
ERFVOLTR = Byte.MIN_VALUE;
}
}

protected final void initERFVOLVI(String s) {
if (!s.trim().isEmpty()) {
ERFVOLVI = Byte.parseByte(s);
} else {
ERFVOLVI = Byte.MIN_VALUE;
}
}

protected final void initERIVOFT(String s) {
if (!s.trim().isEmpty()) {
ERIVOFT = Byte.parseByte(s);
} else {
ERIVOFT = Byte.MIN_VALUE;
}
}

protected final void initERIVOL1(String s) {
if (!s.trim().isEmpty()) {
ERIVOL1 = Byte.parseByte(s);
} else {
ERIVOL1 = Byte.MIN_VALUE;
}
}

protected final void initERIVOL96(String s) {
if (!s.trim().isEmpty()) {
ERIVOL96 = Byte.parseByte(s);
} else {
ERIVOL96 = Byte.MIN_VALUE;
}
}

protected final void initERLVOLBA(String s) {
if (!s.trim().isEmpty()) {
ERLVOLBA = Byte.parseByte(s);
} else {
ERLVOLBA = Byte.MIN_VALUE;
}
}

protected final void initERLVOLCO(String s) {
if (!s.trim().isEmpty()) {
ERLVOLCO = Byte.parseByte(s);
} else {
ERLVOLCO = Byte.MIN_VALUE;
}
}

protected final void initERLVOLDE(String s) {
if (!s.trim().isEmpty()) {
ERLVOLDE = Byte.parseByte(s);
} else {
ERLVOLDE = Byte.MIN_VALUE;
}
}

protected final void initERLVOLPE(String s) {
if (!s.trim().isEmpty()) {
ERLVOLPE = Byte.parseByte(s);
} else {
ERLVOLPE = Byte.MIN_VALUE;
}
}

protected final void initERLVOLPR(String s) {
if (!s.trim().isEmpty()) {
ERLVOLPR = Byte.parseByte(s);
} else {
ERLVOLPR = Byte.MIN_VALUE;
}
}

protected final void initERLVOLRE(String s) {
if (!s.trim().isEmpty()) {
ERLVOLRE = Byte.parseByte(s);
} else {
ERLVOLRE = Byte.MIN_VALUE;
}
}

protected final void initERLVOLSH(String s) {
if (!s.trim().isEmpty()) {
ERLVOLSH = Byte.parseByte(s);
} else {
ERLVOLSH = Byte.MIN_VALUE;
}
}

protected final void initERLVOLTR(String s) {
if (!s.trim().isEmpty()) {
ERLVOLTR = Byte.parseByte(s);
} else {
ERLVOLTR = Byte.MIN_VALUE;
}
}

protected final void initERLVOLWR(String s) {
if (!s.trim().isEmpty()) {
ERLVOLWR = Byte.parseByte(s);
} else {
ERLVOLWR = Byte.MIN_VALUE;
}
}

protected final void initERMOCAC(String s) {
if (!s.trim().isEmpty()) {
ERMOCAC = Byte.parseByte(s);
} else {
ERMOCAC = Byte.MIN_VALUE;
}
}

protected final void initERMOCFI(String s) {
if (!s.trim().isEmpty()) {
ERMOCFI = Byte.parseByte(s);
} else {
ERMOCFI = Byte.MIN_VALUE;
}
}

protected final void initERMOCMO(String s) {
if (!s.trim().isEmpty()) {
ERMOCMO = Byte.parseByte(s);
} else {
ERMOCMO = Byte.MIN_VALUE;
}
}

protected final void initERMOCNE(String s) {
if (!s.trim().isEmpty()) {
ERMOCNE = Byte.parseByte(s);
} else {
ERMOCNE = Byte.MIN_VALUE;
}
}

protected final void initERMOCNJ(String s) {
if (!s.trim().isEmpty()) {
ERMOCNJ = Byte.parseByte(s);
} else {
ERMOCNJ = Byte.MIN_VALUE;
}
}

protected final void initERMOCOB(String s) {
if (!s.trim().isEmpty()) {
ERMOCOB = Byte.parseByte(s);
} else {
ERMOCOB = Byte.MIN_VALUE;
}
}

protected final void initERMOCOT(String s) {
if (!s.trim().isEmpty()) {
ERMOCOT = Byte.parseByte(s);
} else {
ERMOCOT = Byte.MIN_VALUE;
}
}

protected final void initERMOCSK(String s) {
if (!s.trim().isEmpty()) {
ERMOCSK = Byte.parseByte(s);
} else {
ERMOCSK = Byte.MIN_VALUE;
}
}

protected final void initERMOCSO(String s) {
if (!s.trim().isEmpty()) {
ERMOCSO = Byte.parseByte(s);
} else {
ERMOCSO = Byte.MIN_VALUE;
}
}

protected final void initERMOCUS(String s) {
if (!s.trim().isEmpty()) {
ERMOCUS = Byte.parseByte(s);
} else {
ERMOCUS = Byte.MIN_VALUE;
}
}

protected final void initERMOV96(String s) {
if (!s.trim().isEmpty()) {
ERMOV96 = Byte.parseByte(s);
} else {
ERMOV96 = Byte.MIN_VALUE;
}
}

protected final void initERMOVAC(String s) {
if (!s.trim().isEmpty()) {
ERMOVAC = Byte.parseByte(s);
} else {
ERMOVAC = Byte.MIN_VALUE;
}
}

protected final void initERMOVFI(String s) {
if (!s.trim().isEmpty()) {
ERMOVFI = Byte.parseByte(s);
} else {
ERMOVFI = Byte.MIN_VALUE;
}
}

protected final void initERMOVNE(String s) {
if (!s.trim().isEmpty()) {
ERMOVNE = Byte.parseByte(s);
} else {
ERMOVNE = Byte.MIN_VALUE;
}
}

protected final void initERMOVNJ(String s) {
if (!s.trim().isEmpty()) {
ERMOVNJ = Byte.parseByte(s);
} else {
ERMOVNJ = Byte.MIN_VALUE;
}
}

protected final void initERMOVOB(String s) {
if (!s.trim().isEmpty()) {
ERMOVOB = Byte.parseByte(s);
} else {
ERMOVOB = Byte.MIN_VALUE;
}
}

protected final void initERMOVSK(String s) {
if (!s.trim().isEmpty()) {
ERMOVSK = Byte.parseByte(s);
} else {
ERMOVSK = Byte.MIN_VALUE;
}
}

protected final void initERMOVSO(String s) {
if (!s.trim().isEmpty()) {
ERMOVSO = Byte.parseByte(s);
} else {
ERMOVSO = Byte.MIN_VALUE;
}
}

protected final void initERMOVUS(String s) {
if (!s.trim().isEmpty()) {
ERMOVUS = Byte.parseByte(s);
} else {
ERMOVUS = Byte.MIN_VALUE;
}
}

protected final void initERRESBK(String s) {
if (!s.trim().isEmpty()) {
ERRESBK = Byte.parseByte(s);
} else {
ERRESBK = Byte.MIN_VALUE;
}
}

protected final void initERRESCK(String s) {
if (!s.trim().isEmpty()) {
ERRESCK = Byte.parseByte(s);
} else {
ERRESCK = Byte.MIN_VALUE;
}
}

protected final void initERRESER9(String s) {
if (!s.trim().isEmpty()) {
ERRESER9 = Byte.parseByte(s);
} else {
ERRESER9 = Byte.MIN_VALUE;
}
}

protected final void initERRESERB(String s) {
if (!s.trim().isEmpty()) {
ERRESERB = Byte.parseByte(s);
} else {
ERRESERB = Byte.MIN_VALUE;
}
}

protected final void initERRESERD(String s) {
if (!s.trim().isEmpty()) {
ERRESERD = Byte.parseByte(s);
} else {
ERRESERD = Byte.MIN_VALUE;
}
}

protected final void initERRESERH(String s) {
if (!s.trim().isEmpty()) {
ERRESERH = Byte.parseByte(s);
} else {
ERRESERH = Byte.MIN_VALUE;
}
}

protected final void initERRESERI(String s) {
if (!s.trim().isEmpty()) {
ERRESERI = Byte.parseByte(s);
} else {
ERRESERI = Byte.MIN_VALUE;
}
}

protected final void initERRESERO(String s) {
if (!s.trim().isEmpty()) {
ERRESERO = Byte.parseByte(s);
} else {
ERRESERO = Byte.MIN_VALUE;
}
}

protected final void initERRESERS(String s) {
if (!s.trim().isEmpty()) {
ERRESERS = Byte.parseByte(s);
} else {
ERRESERS = Byte.MIN_VALUE;
}
}

protected final void initERRESOF(String s) {
if (!s.trim().isEmpty()) {
ERRESOF = Byte.parseByte(s);
} else {
ERRESOF = Byte.MIN_VALUE;
}
}

protected final void initERRESON(String s) {
if (!s.trim().isEmpty()) {
ERRESON = Byte.parseByte(s);
} else {
ERRESON = Byte.MIN_VALUE;
}
}

protected final void initERRESRY(String s) {
if (!s.trim().isEmpty()) {
ERRESRY = Byte.parseByte(s);
} else {
ERRESRY = Byte.MIN_VALUE;
}
}

protected final void initERVOLA(String s) {
if (!s.trim().isEmpty()) {
ERVOLA = Byte.parseByte(s);
} else {
ERVOLA = Byte.MIN_VALUE;
}
}

protected final void initERVOLB(String s) {
if (!s.trim().isEmpty()) {
ERVOLB = Byte.parseByte(s);
} else {
ERVOLB = Byte.MIN_VALUE;
}
}

protected final void initESTHT(String s) {
if (!s.trim().isEmpty()) {
ESTHT = Double.parseDouble(s);
} else {
ESTHT = Double.NaN;
}
}

protected final void initESTWT(String s) {
if (!s.trim().isEmpty()) {
ESTWT = Double.parseDouble(s);
} else {
ESTWT = Double.NaN;
}
}

protected final void initEWTCH(String s) {
if (!s.trim().isEmpty()) {
EWTCH = Byte.parseByte(s);
} else {
EWTCH = Byte.MIN_VALUE;
}
}

protected final void initEWTKG(String s) {
if (!s.trim().isEmpty()) {
EWTKG = Double.parseDouble(s);
} else {
EWTKG = Double.NaN;
}
}

protected final void initEWTL(String s) {
if (!s.trim().isEmpty()) {
EWTL = Byte.parseByte(s);
} else {
EWTL = Byte.MIN_VALUE;
}
}

protected final void initEWTST(String s) {
if (!s.trim().isEmpty()) {
EWTST = Byte.parseByte(s);
} else {
EWTST = Byte.MIN_VALUE;
}
}

protected final void initEXLO90(String s) {
if (!s.trim().isEmpty()) {
EXLO90 = Byte.parseByte(s);
} else {
EXLO90 = Byte.MIN_VALUE;
}
}

protected final void initEXPWF(String s) {
if (!s.trim().isEmpty()) {
EXPWF = Byte.parseByte(s);
} else {
EXPWF = Byte.MIN_VALUE;
}
}

protected final void initEXREL96(String s) {
if (!s.trim().isEmpty()) {
EXREL96 = Byte.parseByte(s);
} else {
EXREL96 = Byte.MIN_VALUE;
}
}

protected final void initEXRELA(String s) {
if (!s.trim().isEmpty()) {
EXRELA = Byte.parseByte(s);
} else {
EXRELA = Byte.MIN_VALUE;
}
}

protected final void initEXRELB(String s) {
if (!s.trim().isEmpty()) {
EXRELB = Byte.parseByte(s);
} else {
EXRELB = Byte.MIN_VALUE;
}
}

protected final void initEXRELC(String s) {
if (!s.trim().isEmpty()) {
EXRELC = Byte.parseByte(s);
} else {
EXRELC = Byte.MIN_VALUE;
}
}

protected final void initEXRELD(String s) {
if (!s.trim().isEmpty()) {
EXRELD = Byte.parseByte(s);
} else {
EXRELD = Byte.MIN_VALUE;
}
}

protected final void initEXRELEDE(String s) {
if (!s.trim().isEmpty()) {
EXRELEDE = Byte.parseByte(s);
} else {
EXRELEDE = Byte.MIN_VALUE;
}
}

protected final void initEXRELEEL(String s) {
if (!s.trim().isEmpty()) {
EXRELEEL = Byte.parseByte(s);
} else {
EXRELEEL = Byte.MIN_VALUE;
}
}

protected final void initEXRELEFA(String s) {
if (!s.trim().isEmpty()) {
EXRELEFA = Byte.parseByte(s);
} else {
EXRELEFA = Byte.MIN_VALUE;
}
}

protected final void initEXRELEFO(String s) {
if (!s.trim().isEmpty()) {
EXRELEFO = Byte.parseByte(s);
} else {
EXRELEFO = Byte.MIN_VALUE;
}
}

protected final void initEXRELEHO(String s) {
if (!s.trim().isEmpty()) {
EXRELEHO = Byte.parseByte(s);
} else {
EXRELEHO = Byte.MIN_VALUE;
}
}

protected final void initEXRELEME(String s) {
if (!s.trim().isEmpty()) {
EXRELEME = Byte.parseByte(s);
} else {
EXRELEME = Byte.MIN_VALUE;
}
}

protected final void initEXRELEOU(String s) {
if (!s.trim().isEmpty()) {
EXRELEOU = Byte.parseByte(s);
} else {
EXRELEOU = Byte.MIN_VALUE;
}
}

protected final void initEXRELEPR(String s) {
if (!s.trim().isEmpty()) {
EXRELEPR = Byte.parseByte(s);
} else {
EXRELEPR = Byte.MIN_VALUE;
}
}

protected final void initEXRELETR(String s) {
if (!s.trim().isEmpty()) {
EXRELETR = Byte.parseByte(s);
} else {
EXRELETR = Byte.MIN_VALUE;
}
}

protected final void initEYESURG(String s) {
if (!s.trim().isEmpty()) {
EYESURG = Byte.parseByte(s);
} else {
EYESURG = Byte.MIN_VALUE;
}
}

protected final void initFASTASK(String s) {
if (!s.trim().isEmpty()) {
FASTASK = Byte.parseByte(s);
} else {
FASTASK = Byte.MIN_VALUE;
}
}

protected final void initFASTELIG(String s) {
if (!s.trim().isEmpty()) {
FASTELIG = Byte.parseByte(s);
} else {
FASTELIG = Byte.MIN_VALUE;
}
}

protected final void initFATHER(String s) {
if (!s.trim().isEmpty()) {
FATHER = Byte.parseByte(s);
} else {
FATHER = Byte.MIN_VALUE;
}
}

protected final void initFEV1(String s) {
if (!s.trim().isEmpty()) {
FEV1 = Double.parseDouble(s);
} else {
FEV1 = Double.NaN;
}
}

protected final void initFEV2(String s) {
if (!s.trim().isEmpty()) {
FEV2 = Double.parseDouble(s);
} else {
FEV2 = Double.NaN;
}
}

protected final void initFEV3(String s) {
if (!s.trim().isEmpty()) {
FEV3 = Double.parseDouble(s);
} else {
FEV3 = Double.NaN;
}
}

protected final void initFGLU(String s) {
if (!s.trim().isEmpty()) {
FGLU = Double.parseDouble(s);
} else {
FGLU = Double.NaN;
}
}

protected final void initFINSTAT4(String s) {
if (!s.trim().isEmpty()) {
FINSTAT4 = s;
}
}

protected final void initFIT(String s) {
if (!s.trim().isEmpty()) {
FIT = Byte.parseByte(s);
} else {
FIT = Byte.MIN_VALUE;
}
}

protected final void initFLOORC(String s) {
if (!s.trim().isEmpty()) {
FLOORC = Byte.parseByte(s);
} else {
FLOORC = Byte.MIN_VALUE;
}
}

protected final void initFQAQUA(String s) {
if (!s.trim().isEmpty()) {
FQAQUA = Byte.parseByte(s);
} else {
FQAQUA = Byte.MIN_VALUE;
}
}

protected final void initFQCBTHR(String s) {
if (!s.trim().isEmpty()) {
FQCBTHR = Byte.parseByte(s);
} else {
FQCBTHR = Byte.MIN_VALUE;
}
}

protected final void initFQCENG(String s) {
if (!s.trim().isEmpty()) {
FQCENG = Short.parseShort(s);
} else {
FQCENG = Short.MIN_VALUE;
}
}

protected final void initFQEND(String s) {
if (!s.trim().isEmpty()) {
FQEND = Byte.parseByte(s);
} else {
FQEND = Byte.MIN_VALUE;
}
}

protected final void initFQETHNR(String s) {
if (!s.trim().isEmpty()) {
FQETHNR = Byte.parseByte(s);
} else {
FQETHNR = Byte.MIN_VALUE;
}
}

protected final void initFQQUA95(String s) {
if (!s.trim().isEmpty()) {
FQQUA95 = Byte.parseByte(s);
} else {
FQQUA95 = Byte.MIN_VALUE;
}
}

protected final void initFQQUAALE(String s) {
if (!s.trim().isEmpty()) {
FQQUAALE = Byte.parseByte(s);
} else {
FQQUAALE = Byte.MIN_VALUE;
}
}

protected final void initFQQUAASL(String s) {
if (!s.trim().isEmpty()) {
FQQUAASL = Byte.parseByte(s);
} else {
FQQUAASL = Byte.MIN_VALUE;
}
}

protected final void initFQQUACGA(String s) {
if (!s.trim().isEmpty()) {
FQQUACGA = Byte.parseByte(s);
} else {
FQQUACGA = Byte.MIN_VALUE;
}
}

protected final void initFQQUACGF(String s) {
if (!s.trim().isEmpty()) {
FQQUACGF = Byte.parseByte(s);
} else {
FQQUACGF = Byte.MIN_VALUE;
}
}

protected final void initFQQUACGO(String s) {
if (!s.trim().isEmpty()) {
FQQUACGO = Byte.parseByte(s);
} else {
FQQUACGO = Byte.MIN_VALUE;
}
}

protected final void initFQQUACLE(String s) {
if (!s.trim().isEmpty()) {
FQQUACLE = Byte.parseByte(s);
} else {
FQQUACLE = Byte.MIN_VALUE;
}
}

protected final void initFQQUACS1(String s) {
if (!s.trim().isEmpty()) {
FQQUACS1 = Byte.parseByte(s);
} else {
FQQUACS1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUACS2(String s) {
if (!s.trim().isEmpty()) {
FQQUACS2 = Byte.parseByte(s);
} else {
FQQUACS2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUACSU(String s) {
if (!s.trim().isEmpty()) {
FQQUACSU = Byte.parseByte(s);
} else {
FQQUACSU = Byte.MIN_VALUE;
}
}

protected final void initFQQUADEG(String s) {
if (!s.trim().isEmpty()) {
FQQUADEG = Byte.parseByte(s);
} else {
FQQUADEG = Byte.MIN_VALUE;
}
}

protected final void initFQQUAGCA(String s) {
if (!s.trim().isEmpty()) {
FQQUAGCA = Byte.parseByte(s);
} else {
FQQUAGCA = Byte.MIN_VALUE;
}
}

protected final void initFQQUAGCD(String s) {
if (!s.trim().isEmpty()) {
FQQUAGCD = Byte.parseByte(s);
} else {
FQQUAGCD = Byte.MIN_VALUE;
}
}

protected final void initFQQUAHNC(String s) {
if (!s.trim().isEmpty()) {
FQQUAHNC = Byte.parseByte(s);
} else {
FQQUAHNC = Byte.MIN_VALUE;
}
}

protected final void initFQQUAMAT(String s) {
if (!s.trim().isEmpty()) {
FQQUAMAT = Byte.parseByte(s);
} else {
FQQUAMAT = Byte.MIN_VALUE;
}
}

protected final void initFQQUANUR(String s) {
if (!s.trim().isEmpty()) {
FQQUANUR = Byte.parseByte(s);
} else {
FQQUANUR = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV1(String s) {
if (!s.trim().isEmpty()) {
FQQUANV1 = Byte.parseByte(s);
} else {
FQQUANV1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV2(String s) {
if (!s.trim().isEmpty()) {
FQQUANV2 = Byte.parseByte(s);
} else {
FQQUANV2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV3(String s) {
if (!s.trim().isEmpty()) {
FQQUANV3 = Byte.parseByte(s);
} else {
FQQUANV3 = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV4(String s) {
if (!s.trim().isEmpty()) {
FQQUANV4 = Byte.parseByte(s);
} else {
FQQUANV4 = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV5(String s) {
if (!s.trim().isEmpty()) {
FQQUANV5 = Byte.parseByte(s);
} else {
FQQUANV5 = Byte.MIN_VALUE;
}
}

protected final void initFQQUAOLA(String s) {
if (!s.trim().isEmpty()) {
FQQUAOLA = Byte.parseByte(s);
} else {
FQQUAOLA = Byte.MIN_VALUE;
}
}

protected final void initFQQUAOLD(String s) {
if (!s.trim().isEmpty()) {
FQQUAOLD = Byte.parseByte(s);
} else {
FQQUAOLD = Byte.MIN_VALUE;
}
}

protected final void initFQQUAOLP(String s) {
if (!s.trim().isEmpty()) {
FQQUAOLP = Byte.parseByte(s);
} else {
FQQUAOLP = Byte.MIN_VALUE;
}
}

protected final void initFQQUAONC(String s) {
if (!s.trim().isEmpty()) {
FQQUAONC = Byte.parseByte(s);
} else {
FQQUAONC = Byte.MIN_VALUE;
}
}

protected final void initFQQUASLC(String s) {
if (!s.trim().isEmpty()) {
FQQUASLC = Byte.parseByte(s);
} else {
FQQUASLC = Byte.MIN_VALUE;
}
}

protected final void initFQQUASLL(String s) {
if (!s.trim().isEmpty()) {
FQQUASLL = Byte.parseByte(s);
} else {
FQQUASLL = Byte.MIN_VALUE;
}
}

protected final void initFQQUASUP(String s) {
if (!s.trim().isEmpty()) {
FQQUASUP = Byte.parseByte(s);
} else {
FQQUASUP = Byte.MIN_VALUE;
}
}

protected final void initFQQUATEA(String s) {
if (!s.trim().isEmpty()) {
FQQUATEA = Byte.parseByte(s);
} else {
FQQUATEA = Byte.MIN_VALUE;
}
}

protected final void initFQQUATRA(String s) {
if (!s.trim().isEmpty()) {
FQQUATRA = Byte.parseByte(s);
} else {
FQQUATRA = Byte.MIN_VALUE;
}
}

protected final void initFQQUM85(String s) {
if (!s.trim().isEmpty()) {
FQQUM85 = Byte.parseByte(s);
} else {
FQQUM85 = Byte.MIN_VALUE;
}
}

protected final void initFQQUM86(String s) {
if (!s.trim().isEmpty()) {
FQQUM86 = Byte.parseByte(s);
} else {
FQQUM86 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMALE(String s) {
if (!s.trim().isEmpty()) {
FQQUMALE = Byte.parseByte(s);
} else {
FQQUMALE = Byte.MIN_VALUE;
}
}

protected final void initFQQUMASL(String s) {
if (!s.trim().isEmpty()) {
FQQUMASL = Byte.parseByte(s);
} else {
FQQUMASL = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCGA(String s) {
if (!s.trim().isEmpty()) {
FQQUMCGA = Byte.parseByte(s);
} else {
FQQUMCGA = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCGF(String s) {
if (!s.trim().isEmpty()) {
FQQUMCGF = Byte.parseByte(s);
} else {
FQQUMCGF = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCGO(String s) {
if (!s.trim().isEmpty()) {
FQQUMCGO = Byte.parseByte(s);
} else {
FQQUMCGO = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCLE(String s) {
if (!s.trim().isEmpty()) {
FQQUMCLE = Byte.parseByte(s);
} else {
FQQUMCLE = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCS1(String s) {
if (!s.trim().isEmpty()) {
FQQUMCS1 = Byte.parseByte(s);
} else {
FQQUMCS1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCS2(String s) {
if (!s.trim().isEmpty()) {
FQQUMCS2 = Byte.parseByte(s);
} else {
FQQUMCS2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCSU(String s) {
if (!s.trim().isEmpty()) {
FQQUMCSU = Byte.parseByte(s);
} else {
FQQUMCSU = Byte.MIN_VALUE;
}
}

protected final void initFQQUMDEG(String s) {
if (!s.trim().isEmpty()) {
FQQUMDEG = Byte.parseByte(s);
} else {
FQQUMDEG = Byte.MIN_VALUE;
}
}

protected final void initFQQUMDIP(String s) {
if (!s.trim().isEmpty()) {
FQQUMDIP = Byte.parseByte(s);
} else {
FQQUMDIP = Byte.MIN_VALUE;
}
}

protected final void initFQQUMFOR(String s) {
if (!s.trim().isEmpty()) {
FQQUMFOR = Byte.parseByte(s);
} else {
FQQUMFOR = Byte.MIN_VALUE;
}
}

protected final void initFQQUMGCA(String s) {
if (!s.trim().isEmpty()) {
FQQUMGCA = Byte.parseByte(s);
} else {
FQQUMGCA = Byte.MIN_VALUE;
}
}

protected final void initFQQUMGCD(String s) {
if (!s.trim().isEmpty()) {
FQQUMGCD = Byte.parseByte(s);
} else {
FQQUMGCD = Byte.MIN_VALUE;
}
}

protected final void initFQQUMHNC(String s) {
if (!s.trim().isEmpty()) {
FQQUMHNC = Byte.parseByte(s);
} else {
FQQUMHNC = Byte.MIN_VALUE;
}
}

protected final void initFQQUMMAT(String s) {
if (!s.trim().isEmpty()) {
FQQUMMAT = Byte.parseByte(s);
} else {
FQQUMMAT = Byte.MIN_VALUE;
}
}

protected final void initFQQUMMIL(String s) {
if (!s.trim().isEmpty()) {
FQQUMMIL = Byte.parseByte(s);
} else {
FQQUMMIL = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNNE(String s) {
if (!s.trim().isEmpty()) {
FQQUMNNE = Byte.parseByte(s);
} else {
FQQUMNNE = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNUR(String s) {
if (!s.trim().isEmpty()) {
FQQUMNUR = Byte.parseByte(s);
} else {
FQQUMNUR = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV1(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV1 = Byte.parseByte(s);
} else {
FQQUMNV1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV2(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV2 = Byte.parseByte(s);
} else {
FQQUMNV2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV3(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV3 = Byte.parseByte(s);
} else {
FQQUMNV3 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV4(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV4 = Byte.parseByte(s);
} else {
FQQUMNV4 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV5(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV5 = Byte.parseByte(s);
} else {
FQQUMNV5 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNVZ(String s) {
if (!s.trim().isEmpty()) {
FQQUMNVZ = Byte.parseByte(s);
} else {
FQQUMNVZ = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOAC(String s) {
if (!s.trim().isEmpty()) {
FQQUMOAC = Byte.parseByte(s);
} else {
FQQUMOAC = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOLA(String s) {
if (!s.trim().isEmpty()) {
FQQUMOLA = Byte.parseByte(s);
} else {
FQQUMOLA = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOLD(String s) {
if (!s.trim().isEmpty()) {
FQQUMOLD = Byte.parseByte(s);
} else {
FQQUMOLD = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOLP(String s) {
if (!s.trim().isEmpty()) {
FQQUMOLP = Byte.parseByte(s);
} else {
FQQUMOLP = Byte.MIN_VALUE;
}
}

protected final void initFQQUMONC(String s) {
if (!s.trim().isEmpty()) {
FQQUMONC = Byte.parseByte(s);
} else {
FQQUMONC = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOPR(String s) {
if (!s.trim().isEmpty()) {
FQQUMOPR = Byte.parseByte(s);
} else {
FQQUMOPR = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOVO(String s) {
if (!s.trim().isEmpty()) {
FQQUMOVO = Byte.parseByte(s);
} else {
FQQUMOVO = Byte.MIN_VALUE;
}
}

protected final void initFQQUMSLC(String s) {
if (!s.trim().isEmpty()) {
FQQUMSLC = Byte.parseByte(s);
} else {
FQQUMSLC = Byte.MIN_VALUE;
}
}

protected final void initFQQUMSLL(String s) {
if (!s.trim().isEmpty()) {
FQQUMSLL = Byte.parseByte(s);
} else {
FQQUMSLL = Byte.MIN_VALUE;
}
}

protected final void initFQQUMSUP(String s) {
if (!s.trim().isEmpty()) {
FQQUMSUP = Byte.parseByte(s);
} else {
FQQUMSUP = Byte.MIN_VALUE;
}
}

protected final void initFQQUMTEA(String s) {
if (!s.trim().isEmpty()) {
FQQUMTEA = Byte.parseByte(s);
} else {
FQQUMTEA = Byte.MIN_VALUE;
}
}

protected final void initFQQUMTRA(String s) {
if (!s.trim().isEmpty()) {
FQQUMTRA = Byte.parseByte(s);
} else {
FQQUMTRA = Byte.MIN_VALUE;
}
}

protected final void initFSTGS_TM(String s) {
if (!s.trim().isEmpty()) {
FSTGS_TM = Double.parseDouble(s);
} else {
FSTGS_TM = Double.NaN;
}
}

protected final void initFTHAGD(String s) {
if (!s.trim().isEmpty()) {
FTHAGD = Byte.parseByte(s);
} else {
FTHAGD = Byte.MIN_VALUE;
}
}

protected final void initFULL1(String s) {
if (!s.trim().isEmpty()) {
FULL1 = Byte.parseByte(s);
} else {
FULL1 = Byte.MIN_VALUE;
}
}

protected final void initFULL2(String s) {
if (!s.trim().isEmpty()) {
FULL2 = Byte.parseByte(s);
} else {
FULL2 = Byte.MIN_VALUE;
}
}

protected final void initFULL3(String s) {
if (!s.trim().isEmpty()) {
FULL3 = Byte.parseByte(s);
} else {
FULL3 = Byte.MIN_VALUE;
}
}

protected final void initFVC1(String s) {
if (!s.trim().isEmpty()) {
FVC1 = Double.parseDouble(s);
} else {
FVC1 = Double.NaN;
}
}

protected final void initFVC2(String s) {
if (!s.trim().isEmpty()) {
FVC2 = Double.parseDouble(s);
} else {
FVC2 = Double.NaN;
}
}

protected final void initFVC3(String s) {
if (!s.trim().isEmpty()) {
FVC3 = Double.parseDouble(s);
} else {
FVC3 = Double.NaN;
}
}

protected final void initGCINHH(String s) {
if (!s.trim().isEmpty()) {
GCINHH = Byte.parseByte(s);
} else {
GCINHH = Byte.MIN_VALUE;
}
}

protected final void initGTSPD_MN(String s) {
if (!s.trim().isEmpty()) {
GTSPD_MN = Double.parseDouble(s);
} else {
GTSPD_MN = Double.NaN;
}
}

protected final void initGTSPD_MNG(String s) {
if (!s.trim().isEmpty()) {
GTSPD_MNG = Byte.parseByte(s);
} else {
GTSPD_MNG = Byte.MIN_VALUE;
}
}

protected final void initGTSPD_WK(String s) {
if (!s.trim().isEmpty()) {
GTSPD_WK = Byte.parseByte(s);
} else {
GTSPD_WK = Byte.MIN_VALUE;
}
}

protected final void initHASTRO(String s) {
if (!s.trim().isEmpty()) {
HASTRO = Byte.parseByte(s);
} else {
HASTRO = Byte.MIN_VALUE;
}
}

protected final void initHASURG(String s) {
if (!s.trim().isEmpty()) {
HASURG = Byte.parseByte(s);
} else {
HASURG = Byte.MIN_VALUE;
}
}

protected final void initHBA1C(String s) {
if (!s.trim().isEmpty()) {
HBA1C = Double.parseDouble(s);
} else {
HBA1C = Double.NaN;
}
}

protected final void initHDL(String s) {
if (!s.trim().isEmpty()) {
HDL = Double.parseDouble(s);
} else {
HDL = Double.NaN;
}
}

protected final void initHEACD(String s) {
if (!s.trim().isEmpty()) {
HEACD = Byte.parseByte(s);
} else {
HEACD = Byte.MIN_VALUE;
}
}

protected final void initHEACE(String s) {
if (!s.trim().isEmpty()) {
HEACE = Byte.parseByte(s);
} else {
HEACE = Byte.MIN_VALUE;
}
}

protected final void initHEACEA(String s) {
if (!s.trim().isEmpty()) {
HEACEA = Byte.parseByte(s);
} else {
HEACEA = Byte.MIN_VALUE;
}
}

protected final void initHEADLTE(String s) {
if (!s.trim().isEmpty()) {
HEADLTE = Byte.parseByte(s);
} else {
HEADLTE = Byte.MIN_VALUE;
}
}

protected final void initHEAGAR(String s) {
if (!s.trim().isEmpty()) {
HEAGAR = Byte.parseByte(s);
} else {
HEAGAR = Byte.MIN_VALUE;
}
}

protected final void initHEAGARY(String s) {
if (!s.trim().isEmpty()) {
HEAGARY = Short.parseShort(s);
} else {
HEAGARY = Short.MIN_VALUE;
}
}

protected final void initHEAGBR(String s) {
if (!s.trim().isEmpty()) {
HEAGBR = Byte.parseByte(s);
} else {
HEAGBR = Byte.MIN_VALUE;
}
}

protected final void initHEAGBRY(String s) {
if (!s.trim().isEmpty()) {
HEAGBRY = Short.parseShort(s);
} else {
HEAGBRY = Short.MIN_VALUE;
}
}

protected final void initHEAGCR(String s) {
if (!s.trim().isEmpty()) {
HEAGCR = Byte.parseByte(s);
} else {
HEAGCR = Byte.MIN_VALUE;
}
}

protected final void initHEAGCRY(String s) {
if (!s.trim().isEmpty()) {
HEAGCRY = Short.parseShort(s);
} else {
HEAGCRY = Short.MIN_VALUE;
}
}

protected final void initHEAGDR(String s) {
if (!s.trim().isEmpty()) {
HEAGDR = Byte.parseByte(s);
} else {
HEAGDR = Byte.MIN_VALUE;
}
}

protected final void initHEAGDRY(String s) {
if (!s.trim().isEmpty()) {
HEAGDRY = Short.parseShort(s);
} else {
HEAGDRY = Short.MIN_VALUE;
}
}

protected final void initHEAGER(String s) {
if (!s.trim().isEmpty()) {
HEAGER = Byte.parseByte(s);
} else {
HEAGER = Byte.MIN_VALUE;
}
}

protected final void initHEAGERY(String s) {
if (!s.trim().isEmpty()) {
HEAGERY = Short.parseShort(s);
} else {
HEAGERY = Short.MIN_VALUE;
}
}

protected final void initHEAGFR(String s) {
if (!s.trim().isEmpty()) {
HEAGFR = Byte.parseByte(s);
} else {
HEAGFR = Byte.MIN_VALUE;
}
}

protected final void initHEAGFRY(String s) {
if (!s.trim().isEmpty()) {
HEAGFRY = Short.parseShort(s);
} else {
HEAGFRY = Short.MIN_VALUE;
}
}

protected final void initHEAGG(String s) {
if (!s.trim().isEmpty()) {
HEAGG = Byte.parseByte(s);
} else {
HEAGG = Byte.MIN_VALUE;
}
}

protected final void initHEAGGR(String s) {
if (!s.trim().isEmpty()) {
HEAGGR = Byte.parseByte(s);
} else {
HEAGGR = Byte.MIN_VALUE;
}
}

protected final void initHEAGGRY(String s) {
if (!s.trim().isEmpty()) {
HEAGGRY = Short.parseShort(s);
} else {
HEAGGRY = Short.MIN_VALUE;
}
}

protected final void initHEAGH(String s) {
if (!s.trim().isEmpty()) {
HEAGH = Byte.parseByte(s);
} else {
HEAGH = Byte.MIN_VALUE;
}
}

protected final void initHEAGHR(String s) {
if (!s.trim().isEmpty()) {
HEAGHR = Byte.parseByte(s);
} else {
HEAGHR = Byte.MIN_VALUE;
}
}

protected final void initHEAGHRY(String s) {
if (!s.trim().isEmpty()) {
HEAGHRY = Short.parseShort(s);
} else {
HEAGHRY = Short.MIN_VALUE;
}
}

protected final void initHEAGIR(String s) {
if (!s.trim().isEmpty()) {
HEAGIR = Byte.parseByte(s);
} else {
HEAGIR = Byte.MIN_VALUE;
}
}

protected final void initHEAGIRY(String s) {
if (!s.trim().isEmpty()) {
HEAGIRY = Short.parseShort(s);
} else {
HEAGIRY = Short.MIN_VALUE;
}
}

protected final void initHEAGJR(String s) {
if (!s.trim().isEmpty()) {
HEAGJR = Byte.parseByte(s);
} else {
HEAGJR = Byte.MIN_VALUE;
}
}

protected final void initHEAGJRY(String s) {
if (!s.trim().isEmpty()) {
HEAGJRY = Short.parseShort(s);
} else {
HEAGJRY = Short.MIN_VALUE;
}
}

protected final void initHEAGK(String s) {
if (!s.trim().isEmpty()) {
HEAGK = Byte.parseByte(s);
} else {
HEAGK = Byte.MIN_VALUE;
}
}

protected final void initHEAGKR(String s) {
if (!s.trim().isEmpty()) {
HEAGKR = Byte.parseByte(s);
} else {
HEAGKR = Byte.MIN_VALUE;
}
}

protected final void initHEAGKRY(String s) {
if (!s.trim().isEmpty()) {
HEAGKRY = Short.parseShort(s);
} else {
HEAGKRY = Short.MIN_VALUE;
}
}

protected final void initHEAID96(String s) {
if (!s.trim().isEmpty()) {
HEAID96 = Byte.parseByte(s);
} else {
HEAID96 = Byte.MIN_VALUE;
}
}

protected final void initHEAIDAL(String s) {
if (!s.trim().isEmpty()) {
HEAIDAL = Byte.parseByte(s);
} else {
HEAIDAL = Byte.MIN_VALUE;
}
}

protected final void initHEAIDBU(String s) {
if (!s.trim().isEmpty()) {
HEAIDBU = Byte.parseByte(s);
} else {
HEAIDBU = Byte.MIN_VALUE;
}
}

protected final void initHEAIDCA(String s) {
if (!s.trim().isEmpty()) {
HEAIDCA = Byte.parseByte(s);
} else {
HEAIDCA = Byte.MIN_VALUE;
}
}

protected final void initHEAIDCR(String s) {
if (!s.trim().isEmpty()) {
HEAIDCR = Byte.parseByte(s);
} else {
HEAIDCR = Byte.MIN_VALUE;
}
}

protected final void initHEAIDEA(String s) {
if (!s.trim().isEmpty()) {
HEAIDEA = Byte.parseByte(s);
} else {
HEAIDEA = Byte.MIN_VALUE;
}
}

protected final void initHEAIDEW(String s) {
if (!s.trim().isEmpty()) {
HEAIDEW = Byte.parseByte(s);
} else {
HEAIDEW = Byte.MIN_VALUE;
}
}

protected final void initHEAIDMW(String s) {
if (!s.trim().isEmpty()) {
HEAIDMW = Byte.parseByte(s);
} else {
HEAIDMW = Byte.MIN_VALUE;
}
}

protected final void initHEAIDZI(String s) {
if (!s.trim().isEmpty()) {
HEAIDZI = Byte.parseByte(s);
} else {
HEAIDZI = Byte.MIN_VALUE;
}
}

protected final void initHEALCOV(String s) {
if (!s.trim().isEmpty()) {
HEALCOV = Byte.parseByte(s);
} else {
HEALCOV = Byte.MIN_VALUE;
}
}

protected final void initHEALM85(String s) {
if (!s.trim().isEmpty()) {
HEALM85 = Byte.parseByte(s);
} else {
HEALM85 = Byte.MIN_VALUE;
}
}

protected final void initHEALM86(String s) {
if (!s.trim().isEmpty()) {
HEALM86 = Byte.parseByte(s);
} else {
HEALM86 = Byte.MIN_VALUE;
}
}

protected final void initHEALM95(String s) {
if (!s.trim().isEmpty()) {
HEALM95 = Byte.parseByte(s);
} else {
HEALM95 = Byte.MIN_VALUE;
}
}

protected final void initHEALMCH(String s) {
if (!s.trim().isEmpty()) {
HEALMCH = Byte.parseByte(s);
} else {
HEALMCH = Byte.MIN_VALUE;
}
}

protected final void initHEALMFA(String s) {
if (!s.trim().isEmpty()) {
HEALMFA = Byte.parseByte(s);
} else {
HEALMFA = Byte.MIN_VALUE;
}
}

protected final void initHEALMFR(String s) {
if (!s.trim().isEmpty()) {
HEALMFR = Byte.parseByte(s);
} else {
HEALMFR = Byte.MIN_VALUE;
}
}

protected final void initHEALMLL(String s) {
if (!s.trim().isEmpty()) {
HEALMLL = Byte.parseByte(s);
} else {
HEALMLL = Byte.MIN_VALUE;
}
}

protected final void initHEALMNHS(String s) {
if (!s.trim().isEmpty()) {
HEALMNHS = Byte.parseByte(s);
} else {
HEALMNHS = Byte.MIN_VALUE;
}
}

protected final void initHEALMSE(String s) {
if (!s.trim().isEmpty()) {
HEALMSE = Byte.parseByte(s);
} else {
HEALMSE = Byte.MIN_VALUE;
}
}

protected final void initHEALMSS(String s) {
if (!s.trim().isEmpty()) {
HEALMSS = Byte.parseByte(s);
} else {
HEALMSS = Byte.MIN_VALUE;
}
}

protected final void initHEALNHS(String s) {
if (!s.trim().isEmpty()) {
HEALNHS = Byte.parseByte(s);
} else {
HEALNHS = Byte.MIN_VALUE;
}
}

protected final void initHEALOT(String s) {
if (!s.trim().isEmpty()) {
HEALOT = Byte.parseByte(s);
} else {
HEALOT = Byte.MIN_VALUE;
}
}

protected final void initHEALSE(String s) {
if (!s.trim().isEmpty()) {
HEALSE = Byte.parseByte(s);
} else {
HEALSE = Byte.MIN_VALUE;
}
}

protected final void initHEALSS(String s) {
if (!s.trim().isEmpty()) {
HEALSS = Byte.parseByte(s);
} else {
HEALSS = Byte.MIN_VALUE;
}
}

protected final void initHEAMB(String s) {
if (!s.trim().isEmpty()) {
HEAMB = Byte.parseByte(s);
} else {
HEAMB = Byte.MIN_VALUE;
}
}

protected final void initHEANA(String s) {
if (!s.trim().isEmpty()) {
HEANA = Byte.parseByte(s);
} else {
HEANA = Byte.MIN_VALUE;
}
}

protected final void initHEANB(String s) {
if (!s.trim().isEmpty()) {
HEANB = Byte.parseByte(s);
} else {
HEANB = Byte.MIN_VALUE;
}
}

protected final void initHEANC(String s) {
if (!s.trim().isEmpty()) {
HEANC = Byte.parseByte(s);
} else {
HEANC = Byte.MIN_VALUE;
}
}

protected final void initHEAND(String s) {
if (!s.trim().isEmpty()) {
HEAND = Byte.parseByte(s);
} else {
HEAND = Byte.MIN_VALUE;
}
}

protected final void initHEAND1(String s) {
if (!s.trim().isEmpty()) {
HEAND1 = Byte.parseByte(s);
} else {
HEAND1 = Byte.MIN_VALUE;
}
}

protected final void initHEANE(String s) {
if (!s.trim().isEmpty()) {
HEANE = Byte.parseByte(s);
} else {
HEANE = Byte.MIN_VALUE;
}
}

protected final void initHEANF(String s) {
if (!s.trim().isEmpty()) {
HEANF = Byte.parseByte(s);
} else {
HEANF = Byte.MIN_VALUE;
}
}

protected final void initHEANG(String s) {
if (!s.trim().isEmpty()) {
HEANG = Byte.parseByte(s);
} else {
HEANG = Byte.MIN_VALUE;
}
}

protected final void initHEANH(String s) {
if (!s.trim().isEmpty()) {
HEANH = Byte.parseByte(s);
} else {
HEANH = Byte.MIN_VALUE;
}
}

protected final void initHEANILS(String s) {
if (!s.trim().isEmpty()) {
HEANILS = Byte.parseByte(s);
} else {
HEANILS = Byte.MIN_VALUE;
}
}

protected final void initHEANIM86(String s) {
if (!s.trim().isEmpty()) {
HEANIM86 = Byte.parseByte(s);
} else {
HEANIM86 = Byte.MIN_VALUE;
}
}

protected final void initHEANIUS(String s) {
if (!s.trim().isEmpty()) {
HEANIUS = Byte.parseByte(s);
} else {
HEANIUS = Byte.MIN_VALUE;
}
}

protected final void initHEANK(String s) {
if (!s.trim().isEmpty()) {
HEANK = Byte.parseByte(s);
} else {
HEANK = Byte.MIN_VALUE;
}
}

protected final void initHEANM85(String s) {
if (!s.trim().isEmpty()) {
HEANM85 = Byte.parseByte(s);
} else {
HEANM85 = Byte.MIN_VALUE;
}
}

protected final void initHEANMLA(String s) {
if (!s.trim().isEmpty()) {
HEANMLA = Byte.parseByte(s);
} else {
HEANMLA = Byte.MIN_VALUE;
}
}

protected final void initHEANMLC(String s) {
if (!s.trim().isEmpty()) {
HEANMLC = Byte.parseByte(s);
} else {
HEANMLC = Byte.MIN_VALUE;
}
}

protected final void initHEANMLS(String s) {
if (!s.trim().isEmpty()) {
HEANMLS = Byte.parseByte(s);
} else {
HEANMLS = Byte.MIN_VALUE;
}
}

protected final void initHEANMRA(String s) {
if (!s.trim().isEmpty()) {
HEANMRA = Byte.parseByte(s);
} else {
HEANMRA = Byte.MIN_VALUE;
}
}

protected final void initHEANMRC(String s) {
if (!s.trim().isEmpty()) {
HEANMRC = Byte.parseByte(s);
} else {
HEANMRC = Byte.MIN_VALUE;
}
}

protected final void initHEANMUS(String s) {
if (!s.trim().isEmpty()) {
HEANMUS = Byte.parseByte(s);
} else {
HEANMUS = Byte.MIN_VALUE;
}
}

protected final void initHEANS95(String s) {
if (!s.trim().isEmpty()) {
HEANS95 = Byte.parseByte(s);
} else {
HEANS95 = Byte.MIN_VALUE;
}
}

protected final void initHEANSLA(String s) {
if (!s.trim().isEmpty()) {
HEANSLA = Byte.parseByte(s);
} else {
HEANSLA = Byte.MIN_VALUE;
}
}

protected final void initHEANSLC(String s) {
if (!s.trim().isEmpty()) {
HEANSLC = Byte.parseByte(s);
} else {
HEANSLC = Byte.MIN_VALUE;
}
}

protected final void initHEANSRA(String s) {
if (!s.trim().isEmpty()) {
HEANSRA = Byte.parseByte(s);
} else {
HEANSRA = Byte.MIN_VALUE;
}
}

protected final void initHEANSRC(String s) {
if (!s.trim().isEmpty()) {
HEANSRC = Byte.parseByte(s);
} else {
HEANSRC = Byte.MIN_VALUE;
}
}

protected final void initHEARTA(String s) {
if (!s.trim().isEmpty()) {
HEARTA = Byte.parseByte(s);
} else {
HEARTA = Byte.MIN_VALUE;
}
}

protected final void initHEARTB(String s) {
if (!s.trim().isEmpty()) {
HEARTB = Byte.parseByte(s);
} else {
HEARTB = Byte.MIN_VALUE;
}
}

protected final void initHEARTC(String s) {
if (!s.trim().isEmpty()) {
HEARTC = Byte.parseByte(s);
} else {
HEARTC = Byte.MIN_VALUE;
}
}

protected final void initHEARTD(String s) {
if (!s.trim().isEmpty()) {
HEARTD = Byte.parseByte(s);
} else {
HEARTD = Byte.MIN_VALUE;
}
}

protected final void initHEARTE(String s) {
if (!s.trim().isEmpty()) {
HEARTE = Byte.parseByte(s);
} else {
HEARTE = Byte.MIN_VALUE;
}
}

protected final void initHEARTOA(String s) {
if (!s.trim().isEmpty()) {
HEARTOA = Byte.parseByte(s);
} else {
HEARTOA = Byte.MIN_VALUE;
}
}

protected final void initHEARTOT(String s) {
if (!s.trim().isEmpty()) {
HEARTOT = Byte.parseByte(s);
} else {
HEARTOT = Byte.MIN_VALUE;
}
}

protected final void initHEARTRA(String s) {
if (!s.trim().isEmpty()) {
HEARTRA = Byte.parseByte(s);
} else {
HEARTRA = Byte.MIN_VALUE;
}
}

protected final void initHEATA(String s) {
if (!s.trim().isEmpty()) {
HEATA = Byte.parseByte(s);
} else {
HEATA = Byte.MIN_VALUE;
}
}

protected final void initHEATT1(String s) {
if (!s.trim().isEmpty()) {
HEATT1 = Byte.parseByte(s);
} else {
HEATT1 = Byte.MIN_VALUE;
}
}

protected final void initHEATT13(String s) {
if (!s.trim().isEmpty()) {
HEATT13 = Byte.parseByte(s);
} else {
HEATT13 = Byte.MIN_VALUE;
}
}

protected final void initHEATT14(String s) {
if (!s.trim().isEmpty()) {
HEATT14 = Byte.parseByte(s);
} else {
HEATT14 = Byte.MIN_VALUE;
}
}

protected final void initHEATT15(String s) {
if (!s.trim().isEmpty()) {
HEATT15 = Byte.parseByte(s);
} else {
HEATT15 = Byte.MIN_VALUE;
}
}

protected final void initHEATT16(String s) {
if (!s.trim().isEmpty()) {
HEATT16 = Byte.parseByte(s);
} else {
HEATT16 = Byte.MIN_VALUE;
}
}

protected final void initHEATT2(String s) {
if (!s.trim().isEmpty()) {
HEATT2 = Byte.parseByte(s);
} else {
HEATT2 = Byte.MIN_VALUE;
}
}

protected final void initHEATT3(String s) {
if (!s.trim().isEmpty()) {
HEATT3 = Byte.parseByte(s);
} else {
HEATT3 = Byte.MIN_VALUE;
}
}

protected final void initHEATT5(String s) {
if (!s.trim().isEmpty()) {
HEATT5 = Byte.parseByte(s);
} else {
HEATT5 = Byte.MIN_VALUE;
}
}

protected final void initHEATT6(String s) {
if (!s.trim().isEmpty()) {
HEATT6 = Byte.parseByte(s);
} else {
HEATT6 = Byte.MIN_VALUE;
}
}

protected final void initHEATT7(String s) {
if (!s.trim().isEmpty()) {
HEATT7 = Byte.parseByte(s);
} else {
HEATT7 = Byte.MIN_VALUE;
}
}

protected final void initHEATT8(String s) {
if (!s.trim().isEmpty()) {
HEATT8 = Byte.parseByte(s);
} else {
HEATT8 = Byte.MIN_VALUE;
}
}

protected final void initHEATT9(String s) {
if (!s.trim().isEmpty()) {
HEATT9 = Byte.parseByte(s);
} else {
HEATT9 = Byte.MIN_VALUE;
}
}

protected final void initHEATT95(String s) {
if (!s.trim().isEmpty()) {
HEATT95 = Byte.parseByte(s);
} else {
HEATT95 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM1(String s) {
if (!s.trim().isEmpty()) {
HEATTM1 = Byte.parseByte(s);
} else {
HEATTM1 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM13(String s) {
if (!s.trim().isEmpty()) {
HEATTM13 = Byte.parseByte(s);
} else {
HEATTM13 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM14(String s) {
if (!s.trim().isEmpty()) {
HEATTM14 = Byte.parseByte(s);
} else {
HEATTM14 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM15(String s) {
if (!s.trim().isEmpty()) {
HEATTM15 = Byte.parseByte(s);
} else {
HEATTM15 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM16(String s) {
if (!s.trim().isEmpty()) {
HEATTM16 = Byte.parseByte(s);
} else {
HEATTM16 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM2(String s) {
if (!s.trim().isEmpty()) {
HEATTM2 = Byte.parseByte(s);
} else {
HEATTM2 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM3(String s) {
if (!s.trim().isEmpty()) {
HEATTM3 = Byte.parseByte(s);
} else {
HEATTM3 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM5(String s) {
if (!s.trim().isEmpty()) {
HEATTM5 = Byte.parseByte(s);
} else {
HEATTM5 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM51(String s) {
if (!s.trim().isEmpty()) {
HEATTM51 = Byte.parseByte(s);
} else {
HEATTM51 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM52(String s) {
if (!s.trim().isEmpty()) {
HEATTM52 = Byte.parseByte(s);
} else {
HEATTM52 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM6(String s) {
if (!s.trim().isEmpty()) {
HEATTM6 = Byte.parseByte(s);
} else {
HEATTM6 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM7(String s) {
if (!s.trim().isEmpty()) {
HEATTM7 = Byte.parseByte(s);
} else {
HEATTM7 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM8(String s) {
if (!s.trim().isEmpty()) {
HEATTM8 = Byte.parseByte(s);
} else {
HEATTM8 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM85(String s) {
if (!s.trim().isEmpty()) {
HEATTM85 = Byte.parseByte(s);
} else {
HEATTM85 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM86(String s) {
if (!s.trim().isEmpty()) {
HEATTM86 = Byte.parseByte(s);
} else {
HEATTM86 = Byte.MIN_VALUE;
}
}

protected final void initHEATTM9(String s) {
if (!s.trim().isEmpty()) {
HEATTM9 = Byte.parseByte(s);
} else {
HEATTM9 = Byte.MIN_VALUE;
}
}

protected final void initHEBAL(String s) {
if (!s.trim().isEmpty()) {
HEBAL = Byte.parseByte(s);
} else {
HEBAL = Byte.MIN_VALUE;
}
}

protected final void initHEBDIAAD(String s) {
if (!s.trim().isEmpty()) {
HEBDIAAD = Byte.parseByte(s);
} else {
HEBDIAAD = Byte.MIN_VALUE;
}
}

protected final void initHEBDIAAR(String s) {
if (!s.trim().isEmpty()) {
HEBDIAAR = Byte.parseByte(s);
} else {
HEBDIAAR = Byte.MIN_VALUE;
}
}

protected final void initHEBDIAAS(String s) {
if (!s.trim().isEmpty()) {
HEBDIAAS = Byte.parseByte(s);
} else {
HEBDIAAS = Byte.MIN_VALUE;
}
}

protected final void initHEBDIACA(String s) {
if (!s.trim().isEmpty()) {
HEBDIACA = Byte.parseByte(s);
} else {
HEBDIACA = Byte.MIN_VALUE;
}
}

protected final void initHEBDIADE(String s) {
if (!s.trim().isEmpty()) {
HEBDIADE = Byte.parseByte(s);
} else {
HEBDIADE = Byte.MIN_VALUE;
}
}

protected final void initHEBDIALU(String s) {
if (!s.trim().isEmpty()) {
HEBDIALU = Byte.parseByte(s);
} else {
HEBDIALU = Byte.MIN_VALUE;
}
}

protected final void initHEBDIAOS(String s) {
if (!s.trim().isEmpty()) {
HEBDIAOS = Byte.parseByte(s);
} else {
HEBDIAOS = Byte.MIN_VALUE;
}
}

protected final void initHEBDIAPD(String s) {
if (!s.trim().isEmpty()) {
HEBDIAPD = Byte.parseByte(s);
} else {
HEBDIAPD = Byte.MIN_VALUE;
}
}

protected final void initHEBDIAPS(String s) {
if (!s.trim().isEmpty()) {
HEBDIAPS = Byte.parseByte(s);
} else {
HEBDIAPS = Byte.MIN_VALUE;
}
}

protected final void initHEBPCHK(String s) {
if (!s.trim().isEmpty()) {
HEBPCHK = Byte.parseByte(s);
} else {
HEBPCHK = Byte.MIN_VALUE;
}
}

protected final void initHEBUCOV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEBUCOV = false;
} else {
HEBUCOV = true;
}
}
}

protected final void initHEBUM85(String s) {
if (!s.trim().isEmpty()) {
HEBUM85 = Byte.parseByte(s);
} else {
HEBUM85 = Byte.MIN_VALUE;
}
}

protected final void initHEBUM86(String s) {
if (!s.trim().isEmpty()) {
HEBUM86 = Byte.parseByte(s);
} else {
HEBUM86 = Byte.MIN_VALUE;
}
}

protected final void initHEBUM95(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEBUM95 = false;
} else {
HEBUM95 = true;
}
}
}

protected final void initHEBUMCH(String s) {
if (!s.trim().isEmpty()) {
HEBUMCH = Byte.parseByte(s);
} else {
HEBUMCH = Byte.MIN_VALUE;
}
}

protected final void initHEBUMFA(String s) {
if (!s.trim().isEmpty()) {
HEBUMFA = Byte.parseByte(s);
} else {
HEBUMFA = Byte.MIN_VALUE;
}
}

protected final void initHEBUMFR(String s) {
if (!s.trim().isEmpty()) {
HEBUMFR = Byte.parseByte(s);
} else {
HEBUMFR = Byte.MIN_VALUE;
}
}

protected final void initHEBUMLL(String s) {
if (!s.trim().isEmpty()) {
HEBUMLL = Byte.parseByte(s);
} else {
HEBUMLL = Byte.MIN_VALUE;
}
}

protected final void initHEBUMNHS(String s) {
if (!s.trim().isEmpty()) {
HEBUMNHS = Byte.parseByte(s);
} else {
HEBUMNHS = Byte.MIN_VALUE;
}
}

protected final void initHEBUMSE(String s) {
if (!s.trim().isEmpty()) {
HEBUMSE = Byte.parseByte(s);
} else {
HEBUMSE = Byte.MIN_VALUE;
}
}

protected final void initHEBUMSS(String s) {
if (!s.trim().isEmpty()) {
HEBUMSS = Byte.parseByte(s);
} else {
HEBUMSS = Byte.MIN_VALUE;
}
}

protected final void initHEBUNHS(String s) {
if (!s.trim().isEmpty()) {
HEBUNHS = Byte.parseByte(s);
} else {
HEBUNHS = Byte.MIN_VALUE;
}
}

protected final void initHEBUOT(String s) {
if (!s.trim().isEmpty()) {
HEBUOT = Byte.parseByte(s);
} else {
HEBUOT = Byte.MIN_VALUE;
}
}

protected final void initHEBUSE(String s) {
if (!s.trim().isEmpty()) {
HEBUSE = Byte.parseByte(s);
} else {
HEBUSE = Byte.MIN_VALUE;
}
}

protected final void initHEBUSS(String s) {
if (!s.trim().isEmpty()) {
HEBUSS = Byte.parseByte(s);
} else {
HEBUSS = Byte.MIN_VALUE;
}
}

protected final void initHECACOV(String s) {
if (!s.trim().isEmpty()) {
HECACOV = Byte.parseByte(s);
} else {
HECACOV = Byte.MIN_VALUE;
}
}

protected final void initHECAM85(String s) {
if (!s.trim().isEmpty()) {
HECAM85 = Byte.parseByte(s);
} else {
HECAM85 = Byte.MIN_VALUE;
}
}

protected final void initHECAM86(String s) {
if (!s.trim().isEmpty()) {
HECAM86 = Byte.parseByte(s);
} else {
HECAM86 = Byte.MIN_VALUE;
}
}

protected final void initHECAM95(String s) {
if (!s.trim().isEmpty()) {
HECAM95 = Byte.parseByte(s);
} else {
HECAM95 = Byte.MIN_VALUE;
}
}

protected final void initHECAMCH(String s) {
if (!s.trim().isEmpty()) {
HECAMCH = Byte.parseByte(s);
} else {
HECAMCH = Byte.MIN_VALUE;
}
}

protected final void initHECAMFA(String s) {
if (!s.trim().isEmpty()) {
HECAMFA = Byte.parseByte(s);
} else {
HECAMFA = Byte.MIN_VALUE;
}
}

protected final void initHECAMFR(String s) {
if (!s.trim().isEmpty()) {
HECAMFR = Byte.parseByte(s);
} else {
HECAMFR = Byte.MIN_VALUE;
}
}

protected final void initHECAMLL(String s) {
if (!s.trim().isEmpty()) {
HECAMLL = Byte.parseByte(s);
} else {
HECAMLL = Byte.MIN_VALUE;
}
}

protected final void initHECAMNHS(String s) {
if (!s.trim().isEmpty()) {
HECAMNHS = Byte.parseByte(s);
} else {
HECAMNHS = Byte.MIN_VALUE;
}
}

protected final void initHECAMSE(String s) {
if (!s.trim().isEmpty()) {
HECAMSE = Byte.parseByte(s);
} else {
HECAMSE = Byte.MIN_VALUE;
}
}

protected final void initHECAMSS(String s) {
if (!s.trim().isEmpty()) {
HECAMSS = Byte.parseByte(s);
} else {
HECAMSS = Byte.MIN_VALUE;
}
}

protected final void initHECANAA(String s) {
if (!s.trim().isEmpty()) {
HECANAA = Byte.parseByte(s);
} else {
HECANAA = Byte.MIN_VALUE;
}
}

protected final void initHECANBB(String s) {
if (!s.trim().isEmpty()) {
HECANBB = Byte.parseByte(s);
} else {
HECANBB = Byte.MIN_VALUE;
}
}

protected final void initHECANHS(String s) {
if (!s.trim().isEmpty()) {
HECANHS = Byte.parseByte(s);
} else {
HECANHS = Byte.MIN_VALUE;
}
}

protected final void initHECAOT(String s) {
if (!s.trim().isEmpty()) {
HECAOT = Byte.parseByte(s);
} else {
HECAOT = Byte.MIN_VALUE;
}
}

protected final void initHECASE(String s) {
if (!s.trim().isEmpty()) {
HECASE = Byte.parseByte(s);
} else {
HECASE = Byte.MIN_VALUE;
}
}

protected final void initHECASS(String s) {
if (!s.trim().isEmpty()) {
HECASS = Byte.parseByte(s);
} else {
HECASS = Byte.MIN_VALUE;
}
}

protected final void initHECATN(String s) {
if (!s.trim().isEmpty()) {
HECATN = Byte.parseByte(s);
} else {
HECATN = Byte.MIN_VALUE;
}
}

protected final void initHECHMD(String s) {
if (!s.trim().isEmpty()) {
HECHMD = Byte.parseByte(s);
} else {
HECHMD = Byte.MIN_VALUE;
}
}

protected final void initHECHME(String s) {
if (!s.trim().isEmpty()) {
HECHME = Byte.parseByte(s);
} else {
HECHME = Byte.MIN_VALUE;
}
}

protected final void initHECLUB1(String s) {
if (!s.trim().isEmpty()) {
HECLUB1 = Byte.parseByte(s);
} else {
HECLUB1 = Byte.MIN_VALUE;
}
}

protected final void initHECLUB2(String s) {
if (!s.trim().isEmpty()) {
HECLUB2 = Byte.parseByte(s);
} else {
HECLUB2 = Byte.MIN_VALUE;
}
}

protected final void initHECLUB3(String s) {
if (!s.trim().isEmpty()) {
HECLUB3 = Byte.parseByte(s);
} else {
HECLUB3 = Byte.MIN_VALUE;
}
}

protected final void initHECLUB96(String s) {
if (!s.trim().isEmpty()) {
HECLUB96 = Byte.parseByte(s);
} else {
HECLUB96 = Byte.MIN_VALUE;
}
}

protected final void initHECRCOV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HECRCOV = false;
} else {
HECRCOV = true;
}
}
}

protected final void initHECRM85(String s) {
if (!s.trim().isEmpty()) {
HECRM85 = Byte.parseByte(s);
} else {
HECRM85 = Byte.MIN_VALUE;
}
}

protected final void initHECRM86(String s) {
if (!s.trim().isEmpty()) {
HECRM86 = Byte.parseByte(s);
} else {
HECRM86 = Byte.MIN_VALUE;
}
}

protected final void initHECRM95(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HECRM95 = false;
} else {
HECRM95 = true;
}
}
}

protected final void initHECRMCH(String s) {
if (!s.trim().isEmpty()) {
HECRMCH = Byte.parseByte(s);
} else {
HECRMCH = Byte.MIN_VALUE;
}
}

protected final void initHECRMFA(String s) {
if (!s.trim().isEmpty()) {
HECRMFA = Byte.parseByte(s);
} else {
HECRMFA = Byte.MIN_VALUE;
}
}

protected final void initHECRMFR(String s) {
if (!s.trim().isEmpty()) {
HECRMFR = Byte.parseByte(s);
} else {
HECRMFR = Byte.MIN_VALUE;
}
}

protected final void initHECRMLL(String s) {
if (!s.trim().isEmpty()) {
HECRMLL = Byte.parseByte(s);
} else {
HECRMLL = Byte.MIN_VALUE;
}
}

protected final void initHECRMNHS(String s) {
if (!s.trim().isEmpty()) {
HECRMNHS = Byte.parseByte(s);
} else {
HECRMNHS = Byte.MIN_VALUE;
}
}

protected final void initHECRMSE(String s) {
if (!s.trim().isEmpty()) {
HECRMSE = Byte.parseByte(s);
} else {
HECRMSE = Byte.MIN_VALUE;
}
}

protected final void initHECRMSS(String s) {
if (!s.trim().isEmpty()) {
HECRMSS = Byte.parseByte(s);
} else {
HECRMSS = Byte.MIN_VALUE;
}
}

protected final void initHECRNHS(String s) {
if (!s.trim().isEmpty()) {
HECRNHS = Byte.parseByte(s);
} else {
HECRNHS = Byte.MIN_VALUE;
}
}

protected final void initHECROT(String s) {
if (!s.trim().isEmpty()) {
HECROT = Byte.parseByte(s);
} else {
HECROT = Byte.MIN_VALUE;
}
}

protected final void initHECRSE(String s) {
if (!s.trim().isEmpty()) {
HECRSE = Byte.parseByte(s);
} else {
HECRSE = Byte.MIN_VALUE;
}
}

protected final void initHECRSS(String s) {
if (!s.trim().isEmpty()) {
HECRSS = Byte.parseByte(s);
} else {
HECRSS = Byte.MIN_VALUE;
}
}

protected final void initHEDACAN(String s) {
if (!s.trim().isEmpty()) {
HEDACAN = Byte.parseByte(s);
} else {
HEDACAN = Byte.MIN_VALUE;
}
}

protected final void initHEDACAR(String s) {
if (!s.trim().isEmpty()) {
HEDACAR = Byte.parseByte(s);
} else {
HEDACAR = Byte.MIN_VALUE;
}
}

protected final void initHEDACBP(String s) {
if (!s.trim().isEmpty()) {
HEDACBP = Byte.parseByte(s);
} else {
HEDACBP = Byte.MIN_VALUE;
}
}

protected final void initHEDACCH(String s) {
if (!s.trim().isEmpty()) {
HEDACCH = Byte.parseByte(s);
} else {
HEDACCH = Byte.MIN_VALUE;
}
}

protected final void initHEDACDI(String s) {
if (!s.trim().isEmpty()) {
HEDACDI = Byte.parseByte(s);
} else {
HEDACDI = Byte.MIN_VALUE;
}
}

protected final void initHEDACHF(String s) {
if (!s.trim().isEmpty()) {
HEDACHF = Byte.parseByte(s);
} else {
HEDACHF = Byte.MIN_VALUE;
}
}

protected final void initHEDACHM(String s) {
if (!s.trim().isEmpty()) {
HEDACHM = Byte.parseByte(s);
} else {
HEDACHM = Byte.MIN_VALUE;
}
}

protected final void initHEDACMI(String s) {
if (!s.trim().isEmpty()) {
HEDACMI = Byte.parseByte(s);
} else {
HEDACMI = Byte.MIN_VALUE;
}
}

protected final void initHEDACOT(String s) {
if (!s.trim().isEmpty()) {
HEDACOT = Byte.parseByte(s);
} else {
HEDACOT = Byte.MIN_VALUE;
}
}

protected final void initHEDACST(String s) {
if (!s.trim().isEmpty()) {
HEDACST = Byte.parseByte(s);
} else {
HEDACST = Byte.MIN_VALUE;
}
}

protected final void initHEDANAN(String s) {
if (!s.trim().isEmpty()) {
HEDANAN = Byte.parseByte(s);
} else {
HEDANAN = Byte.MIN_VALUE;
}
}

protected final void initHEDANAR(String s) {
if (!s.trim().isEmpty()) {
HEDANAR = Byte.parseByte(s);
} else {
HEDANAR = Byte.MIN_VALUE;
}
}

protected final void initHEDANBP(String s) {
if (!s.trim().isEmpty()) {
HEDANBP = Byte.parseByte(s);
} else {
HEDANBP = Byte.MIN_VALUE;
}
}

protected final void initHEDANCH(String s) {
if (!s.trim().isEmpty()) {
HEDANCH = Byte.parseByte(s);
} else {
HEDANCH = Byte.MIN_VALUE;
}
}

protected final void initHEDANDI(String s) {
if (!s.trim().isEmpty()) {
HEDANDI = Byte.parseByte(s);
} else {
HEDANDI = Byte.MIN_VALUE;
}
}

protected final void initHEDANHF(String s) {
if (!s.trim().isEmpty()) {
HEDANHF = Byte.parseByte(s);
} else {
HEDANHF = Byte.MIN_VALUE;
}
}

protected final void initHEDANHM(String s) {
if (!s.trim().isEmpty()) {
HEDANHM = Byte.parseByte(s);
} else {
HEDANHM = Byte.MIN_VALUE;
}
}

protected final void initHEDANMI(String s) {
if (!s.trim().isEmpty()) {
HEDANMI = Byte.parseByte(s);
} else {
HEDANMI = Byte.MIN_VALUE;
}
}

protected final void initHEDANOT(String s) {
if (!s.trim().isEmpty()) {
HEDANOT = Byte.parseByte(s);
} else {
HEDANOT = Byte.MIN_VALUE;
}
}

protected final void initHEDANST(String s) {
if (!s.trim().isEmpty()) {
HEDANST = Byte.parseByte(s);
} else {
HEDANST = Byte.MIN_VALUE;
}
}

protected final void initHEDASAN(String s) {
if (!s.trim().isEmpty()) {
HEDASAN = Byte.parseByte(s);
} else {
HEDASAN = Byte.MIN_VALUE;
}
}

protected final void initHEDASAR(String s) {
if (!s.trim().isEmpty()) {
HEDASAR = Byte.parseByte(s);
} else {
HEDASAR = Byte.MIN_VALUE;
}
}

protected final void initHEDASBP(String s) {
if (!s.trim().isEmpty()) {
HEDASBP = Byte.parseByte(s);
} else {
HEDASBP = Byte.MIN_VALUE;
}
}

protected final void initHEDASCH(String s) {
if (!s.trim().isEmpty()) {
HEDASCH = Byte.parseByte(s);
} else {
HEDASCH = Byte.MIN_VALUE;
}
}

protected final void initHEDASHF(String s) {
if (!s.trim().isEmpty()) {
HEDASHF = Byte.parseByte(s);
} else {
HEDASHF = Byte.MIN_VALUE;
}
}

protected final void initHEDASHM(String s) {
if (!s.trim().isEmpty()) {
HEDASHM = Byte.parseByte(s);
} else {
HEDASHM = Byte.MIN_VALUE;
}
}

protected final void initHEDASOT(String s) {
if (!s.trim().isEmpty()) {
HEDASOT = Byte.parseByte(s);
} else {
HEDASOT = Byte.MIN_VALUE;
}
}

protected final void initHEDAWAN(String s) {
if (!s.trim().isEmpty()) {
HEDAWAN = Byte.parseByte(s);
} else {
HEDAWAN = Byte.MIN_VALUE;
}
}

protected final void initHEDAWAR(String s) {
if (!s.trim().isEmpty()) {
HEDAWAR = Byte.parseByte(s);
} else {
HEDAWAR = Byte.MIN_VALUE;
}
}

protected final void initHEDAWBP(String s) {
if (!s.trim().isEmpty()) {
HEDAWBP = Byte.parseByte(s);
} else {
HEDAWBP = Byte.MIN_VALUE;
}
}

protected final void initHEDAWCH(String s) {
if (!s.trim().isEmpty()) {
HEDAWCH = Byte.parseByte(s);
} else {
HEDAWCH = Byte.MIN_VALUE;
}
}

protected final void initHEDAWDI(String s) {
if (!s.trim().isEmpty()) {
HEDAWDI = Byte.parseByte(s);
} else {
HEDAWDI = Byte.MIN_VALUE;
}
}

protected final void initHEDAWHF(String s) {
if (!s.trim().isEmpty()) {
HEDAWHF = Byte.parseByte(s);
} else {
HEDAWHF = Byte.MIN_VALUE;
}
}

protected final void initHEDAWHM(String s) {
if (!s.trim().isEmpty()) {
HEDAWHM = Byte.parseByte(s);
} else {
HEDAWHM = Byte.MIN_VALUE;
}
}

protected final void initHEDAWMI(String s) {
if (!s.trim().isEmpty()) {
HEDAWMI = Byte.parseByte(s);
} else {
HEDAWMI = Byte.MIN_VALUE;
}
}

protected final void initHEDAWOT(String s) {
if (!s.trim().isEmpty()) {
HEDAWOT = Byte.parseByte(s);
} else {
HEDAWOT = Byte.MIN_VALUE;
}
}

protected final void initHEDAWST(String s) {
if (!s.trim().isEmpty()) {
HEDAWST = Byte.parseByte(s);
} else {
HEDAWST = Byte.MIN_VALUE;
}
}

protected final void initHEDBDAD(String s) {
if (!s.trim().isEmpty()) {
HEDBDAD = Byte.parseByte(s);
} else {
HEDBDAD = Byte.MIN_VALUE;
}
}

protected final void initHEDBDAR(String s) {
if (!s.trim().isEmpty()) {
HEDBDAR = Byte.parseByte(s);
} else {
HEDBDAR = Byte.MIN_VALUE;
}
}

protected final void initHEDBDAS(String s) {
if (!s.trim().isEmpty()) {
HEDBDAS = Byte.parseByte(s);
} else {
HEDBDAS = Byte.MIN_VALUE;
}
}

protected final void initHEDBDCA(String s) {
if (!s.trim().isEmpty()) {
HEDBDCA = Byte.parseByte(s);
} else {
HEDBDCA = Byte.MIN_VALUE;
}
}

protected final void initHEDBDDE(String s) {
if (!s.trim().isEmpty()) {
HEDBDDE = Byte.parseByte(s);
} else {
HEDBDDE = Byte.MIN_VALUE;
}
}

protected final void initHEDBDLU(String s) {
if (!s.trim().isEmpty()) {
HEDBDLU = Byte.parseByte(s);
} else {
HEDBDLU = Byte.MIN_VALUE;
}
}

protected final void initHEDBDOS(String s) {
if (!s.trim().isEmpty()) {
HEDBDOS = Byte.parseByte(s);
} else {
HEDBDOS = Byte.MIN_VALUE;
}
}

protected final void initHEDBDPD(String s) {
if (!s.trim().isEmpty()) {
HEDBDPD = Byte.parseByte(s);
} else {
HEDBDPD = Byte.MIN_VALUE;
}
}

protected final void initHEDBDPS(String s) {
if (!s.trim().isEmpty()) {
HEDBDPS = Byte.parseByte(s);
} else {
HEDBDPS = Byte.MIN_VALUE;
}
}

protected final void initHEDBMAD(String s) {
if (!s.trim().isEmpty()) {
HEDBMAD = Byte.parseByte(s);
} else {
HEDBMAD = Byte.MIN_VALUE;
}
}

protected final void initHEDBMAR(String s) {
if (!s.trim().isEmpty()) {
HEDBMAR = Byte.parseByte(s);
} else {
HEDBMAR = Byte.MIN_VALUE;
}
}

protected final void initHEDBMAS(String s) {
if (!s.trim().isEmpty()) {
HEDBMAS = Byte.parseByte(s);
} else {
HEDBMAS = Byte.MIN_VALUE;
}
}

protected final void initHEDBMCA(String s) {
if (!s.trim().isEmpty()) {
HEDBMCA = Byte.parseByte(s);
} else {
HEDBMCA = Byte.MIN_VALUE;
}
}

protected final void initHEDBMDE(String s) {
if (!s.trim().isEmpty()) {
HEDBMDE = Byte.parseByte(s);
} else {
HEDBMDE = Byte.MIN_VALUE;
}
}

protected final void initHEDBMLU(String s) {
if (!s.trim().isEmpty()) {
HEDBMLU = Byte.parseByte(s);
} else {
HEDBMLU = Byte.MIN_VALUE;
}
}

protected final void initHEDBMOS(String s) {
if (!s.trim().isEmpty()) {
HEDBMOS = Byte.parseByte(s);
} else {
HEDBMOS = Byte.MIN_VALUE;
}
}

protected final void initHEDBMPD(String s) {
if (!s.trim().isEmpty()) {
HEDBMPD = Byte.parseByte(s);
} else {
HEDBMPD = Byte.MIN_VALUE;
}
}

protected final void initHEDBMPS(String s) {
if (!s.trim().isEmpty()) {
HEDBMPS = Byte.parseByte(s);
} else {
HEDBMPS = Byte.MIN_VALUE;
}
}

protected final void initHEDBSAR(String s) {
if (!s.trim().isEmpty()) {
HEDBSAR = Byte.parseByte(s);
} else {
HEDBSAR = Byte.MIN_VALUE;
}
}

protected final void initHEDBSAS(String s) {
if (!s.trim().isEmpty()) {
HEDBSAS = Byte.parseByte(s);
} else {
HEDBSAS = Byte.MIN_VALUE;
}
}

protected final void initHEDBSCA(String s) {
if (!s.trim().isEmpty()) {
HEDBSCA = Byte.parseByte(s);
} else {
HEDBSCA = Byte.MIN_VALUE;
}
}

protected final void initHEDBSDE(String s) {
if (!s.trim().isEmpty()) {
HEDBSDE = Byte.parseByte(s);
} else {
HEDBSDE = Byte.MIN_VALUE;
}
}

protected final void initHEDBSLU(String s) {
if (!s.trim().isEmpty()) {
HEDBSLU = Byte.parseByte(s);
} else {
HEDBSLU = Byte.MIN_VALUE;
}
}

protected final void initHEDBSOS(String s) {
if (!s.trim().isEmpty()) {
HEDBSOS = Byte.parseByte(s);
} else {
HEDBSOS = Byte.MIN_VALUE;
}
}

protected final void initHEDBSPD(String s) {
if (!s.trim().isEmpty()) {
HEDBSPD = Byte.parseByte(s);
} else {
HEDBSPD = Byte.MIN_VALUE;
}
}

protected final void initHEDBWAD(String s) {
if (!s.trim().isEmpty()) {
HEDBWAD = Byte.parseByte(s);
} else {
HEDBWAD = Byte.MIN_VALUE;
}
}

protected final void initHEDBWAR(String s) {
if (!s.trim().isEmpty()) {
HEDBWAR = Byte.parseByte(s);
} else {
HEDBWAR = Byte.MIN_VALUE;
}
}

protected final void initHEDBWAS(String s) {
if (!s.trim().isEmpty()) {
HEDBWAS = Byte.parseByte(s);
} else {
HEDBWAS = Byte.MIN_VALUE;
}
}

protected final void initHEDBWCA(String s) {
if (!s.trim().isEmpty()) {
HEDBWCA = Byte.parseByte(s);
} else {
HEDBWCA = Byte.MIN_VALUE;
}
}

protected final void initHEDBWDE(String s) {
if (!s.trim().isEmpty()) {
HEDBWDE = Byte.parseByte(s);
} else {
HEDBWDE = Byte.MIN_VALUE;
}
}

protected final void initHEDBWLU(String s) {
if (!s.trim().isEmpty()) {
HEDBWLU = Byte.parseByte(s);
} else {
HEDBWLU = Byte.MIN_VALUE;
}
}

protected final void initHEDBWOS(String s) {
if (!s.trim().isEmpty()) {
HEDBWOS = Byte.parseByte(s);
} else {
HEDBWOS = Byte.MIN_VALUE;
}
}

protected final void initHEDBWPD(String s) {
if (!s.trim().isEmpty()) {
HEDBWPD = Byte.parseByte(s);
} else {
HEDBWPD = Byte.MIN_VALUE;
}
}

protected final void initHEDBWPS(String s) {
if (!s.trim().isEmpty()) {
HEDBWPS = Byte.parseByte(s);
} else {
HEDBWPS = Byte.MIN_VALUE;
}
}

protected final void initHEDCC(String s) {
if (!s.trim().isEmpty()) {
HEDCC = Byte.parseByte(s);
} else {
HEDCC = Byte.MIN_VALUE;
}
}

protected final void initHEDIA95(String s) {
if (!s.trim().isEmpty()) {
HEDIA95 = Byte.parseByte(s);
} else {
HEDIA95 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA96(String s) {
if (!s.trim().isEmpty()) {
HEDIA96 = Byte.parseByte(s);
} else {
HEDIA96 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAAN(String s) {
if (!s.trim().isEmpty()) {
HEDIAAN = Byte.parseByte(s);
} else {
HEDIAAN = Byte.MIN_VALUE;
}
}

protected final void initHEDIAAR(String s) {
if (!s.trim().isEmpty()) {
HEDIAAR = Byte.parseByte(s);
} else {
HEDIAAR = Byte.MIN_VALUE;
}
}

protected final void initHEDIABP(String s) {
if (!s.trim().isEmpty()) {
HEDIABP = Byte.parseByte(s);
} else {
HEDIABP = Byte.MIN_VALUE;
}
}

protected final void initHEDIACH(String s) {
if (!s.trim().isEmpty()) {
HEDIACH = Byte.parseByte(s);
} else {
HEDIACH = Byte.MIN_VALUE;
}
}

protected final void initHEDIADI(String s) {
if (!s.trim().isEmpty()) {
HEDIADI = Byte.parseByte(s);
} else {
HEDIADI = Byte.MIN_VALUE;
}
}

protected final void initHEDIAGAN(String s) {
if (!s.trim().isEmpty()) {
HEDIAGAN = Byte.parseByte(s);
} else {
HEDIAGAN = Byte.MIN_VALUE;
}
}

protected final void initHEDIAGAR(String s) {
if (!s.trim().isEmpty()) {
HEDIAGAR = Byte.parseByte(s);
} else {
HEDIAGAR = Byte.MIN_VALUE;
}
}

protected final void initHEDIAGBP(String s) {
if (!s.trim().isEmpty()) {
HEDIAGBP = Byte.parseByte(s);
} else {
HEDIAGBP = Byte.MIN_VALUE;
}
}

protected final void initHEDIAGDH(String s) {
if (!s.trim().isEmpty()) {
HEDIAGDH = Byte.parseByte(s);
} else {
HEDIAGDH = Byte.MIN_VALUE;
}
}

protected final void initHEDIAGDI(String s) {
if (!s.trim().isEmpty()) {
HEDIAGDI = Byte.parseByte(s);
} else {
HEDIAGDI = Byte.MIN_VALUE;
}
}

protected final void initHEDIAGHC(String s) {
if (!s.trim().isEmpty()) {
HEDIAGHC = Byte.parseByte(s);
} else {
HEDIAGHC = Byte.MIN_VALUE;
}
}

protected final void initHEDIAGHF(String s) {
if (!s.trim().isEmpty()) {
HEDIAGHF = Byte.parseByte(s);
} else {
HEDIAGHF = Byte.MIN_VALUE;
}
}

protected final void initHEDIAGHM(String s) {
if (!s.trim().isEmpty()) {
HEDIAGHM = Byte.parseByte(s);
} else {
HEDIAGHM = Byte.MIN_VALUE;
}
}

protected final void initHEDIAGMI(String s) {
if (!s.trim().isEmpty()) {
HEDIAGMI = Byte.parseByte(s);
} else {
HEDIAGMI = Byte.MIN_VALUE;
}
}

protected final void initHEDIAGST(String s) {
if (!s.trim().isEmpty()) {
HEDIAGST = Byte.parseByte(s);
} else {
HEDIAGST = Byte.MIN_VALUE;
}
}

protected final void initHEDIAHF(String s) {
if (!s.trim().isEmpty()) {
HEDIAHF = Byte.parseByte(s);
} else {
HEDIAHF = Byte.MIN_VALUE;
}
}

protected final void initHEDIAHM(String s) {
if (!s.trim().isEmpty()) {
HEDIAHM = Byte.parseByte(s);
} else {
HEDIAHM = Byte.MIN_VALUE;
}
}

protected final void initHEDIAMI(String s) {
if (!s.trim().isEmpty()) {
HEDIAMI = Byte.parseByte(s);
} else {
HEDIAMI = Byte.MIN_VALUE;
}
}

protected final void initHEDIAST(String s) {
if (!s.trim().isEmpty()) {
HEDIAST = Byte.parseByte(s);
} else {
HEDIAST = Byte.MIN_VALUE;
}
}

protected final void initHEDIB96(String s) {
if (!s.trim().isEmpty()) {
HEDIB96 = Byte.parseByte(s);
} else {
HEDIB96 = Byte.MIN_VALUE;
}
}

protected final void initHEDIBAD(String s) {
if (!s.trim().isEmpty()) {
HEDIBAD = Byte.parseByte(s);
} else {
HEDIBAD = Byte.MIN_VALUE;
}
}

protected final void initHEDIBAR(String s) {
if (!s.trim().isEmpty()) {
HEDIBAR = Byte.parseByte(s);
} else {
HEDIBAR = Byte.MIN_VALUE;
}
}

protected final void initHEDIBAS(String s) {
if (!s.trim().isEmpty()) {
HEDIBAS = Byte.parseByte(s);
} else {
HEDIBAS = Byte.MIN_VALUE;
}
}

protected final void initHEDIBBL(String s) {
if (!s.trim().isEmpty()) {
HEDIBBL = Byte.parseByte(s);
} else {
HEDIBBL = Byte.MIN_VALUE;
}
}

protected final void initHEDIBCA(String s) {
if (!s.trim().isEmpty()) {
HEDIBCA = Byte.parseByte(s);
} else {
HEDIBCA = Byte.MIN_VALUE;
}
}

protected final void initHEDIBDE(String s) {
if (!s.trim().isEmpty()) {
HEDIBDE = Byte.parseByte(s);
} else {
HEDIBDE = Byte.MIN_VALUE;
}
}

protected final void initHEDIBLU(String s) {
if (!s.trim().isEmpty()) {
HEDIBLU = Byte.parseByte(s);
} else {
HEDIBLU = Byte.MIN_VALUE;
}
}

protected final void initHEDIBOS(String s) {
if (!s.trim().isEmpty()) {
HEDIBOS = Byte.parseByte(s);
} else {
HEDIBOS = Byte.MIN_VALUE;
}
}

protected final void initHEDIBPD(String s) {
if (!s.trim().isEmpty()) {
HEDIBPD = Byte.parseByte(s);
} else {
HEDIBPD = Byte.MIN_VALUE;
}
}

protected final void initHEDIBPS(String s) {
if (!s.trim().isEmpty()) {
HEDIBPS = Byte.parseByte(s);
} else {
HEDIBPS = Byte.MIN_VALUE;
}
}

protected final void initHEDIM85(String s) {
if (!s.trim().isEmpty()) {
HEDIM85 = Byte.parseByte(s);
} else {
HEDIM85 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM86(String s) {
if (!s.trim().isEmpty()) {
HEDIM86 = Byte.parseByte(s);
} else {
HEDIM86 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM96(String s) {
if (!s.trim().isEmpty()) {
HEDIM96 = Byte.parseByte(s);
} else {
HEDIM96 = Byte.MIN_VALUE;
}
}

protected final void initHEDIMAN(String s) {
if (!s.trim().isEmpty()) {
HEDIMAN = Byte.parseByte(s);
} else {
HEDIMAN = Byte.MIN_VALUE;
}
}

protected final void initHEDIMAR(String s) {
if (!s.trim().isEmpty()) {
HEDIMAR = Byte.parseByte(s);
} else {
HEDIMAR = Byte.MIN_VALUE;
}
}

protected final void initHEDIMBP(String s) {
if (!s.trim().isEmpty()) {
HEDIMBP = Byte.parseByte(s);
} else {
HEDIMBP = Byte.MIN_VALUE;
}
}

protected final void initHEDIMCH(String s) {
if (!s.trim().isEmpty()) {
HEDIMCH = Byte.parseByte(s);
} else {
HEDIMCH = Byte.MIN_VALUE;
}
}

protected final void initHEDIMDI(String s) {
if (!s.trim().isEmpty()) {
HEDIMDI = Byte.parseByte(s);
} else {
HEDIMDI = Byte.MIN_VALUE;
}
}

protected final void initHEDIMHF(String s) {
if (!s.trim().isEmpty()) {
HEDIMHF = Byte.parseByte(s);
} else {
HEDIMHF = Byte.MIN_VALUE;
}
}

protected final void initHEDIMHM(String s) {
if (!s.trim().isEmpty()) {
HEDIMHM = Byte.parseByte(s);
} else {
HEDIMHM = Byte.MIN_VALUE;
}
}

protected final void initHEDIMMI(String s) {
if (!s.trim().isEmpty()) {
HEDIMMI = Byte.parseByte(s);
} else {
HEDIMMI = Byte.MIN_VALUE;
}
}

protected final void initHEDIMST(String s) {
if (!s.trim().isEmpty()) {
HEDIMST = Byte.parseByte(s);
} else {
HEDIMST = Byte.MIN_VALUE;
}
}

protected final void initHEDIZ(String s) {
if (!s.trim().isEmpty()) {
HEDIZ = Byte.parseByte(s);
} else {
HEDIZ = Byte.MIN_VALUE;
}
}

protected final void initHEDIZM51(String s) {
if (!s.trim().isEmpty()) {
HEDIZM51 = Byte.parseByte(s);
} else {
HEDIZM51 = Byte.MIN_VALUE;
}
}

protected final void initHEDIZM52(String s) {
if (!s.trim().isEmpty()) {
HEDIZM52 = Byte.parseByte(s);
} else {
HEDIZM52 = Byte.MIN_VALUE;
}
}

protected final void initHEEACOV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEEACOV = false;
} else {
HEEACOV = true;
}
}
}

protected final void initHEEAM85(String s) {
if (!s.trim().isEmpty()) {
HEEAM85 = Byte.parseByte(s);
} else {
HEEAM85 = Byte.MIN_VALUE;
}
}

protected final void initHEEAM86(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEEAM86 = false;
} else {
HEEAM86 = true;
}
}
}

protected final void initHEEAM95(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEEAM95 = false;
} else {
HEEAM95 = true;
}
}
}

protected final void initHEEAMCH(String s) {
if (!s.trim().isEmpty()) {
HEEAMCH = Byte.parseByte(s);
} else {
HEEAMCH = Byte.MIN_VALUE;
}
}

protected final void initHEEAMFA(String s) {
if (!s.trim().isEmpty()) {
HEEAMFA = Byte.parseByte(s);
} else {
HEEAMFA = Byte.MIN_VALUE;
}
}

protected final void initHEEAMFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEEAMFR = false;
} else {
HEEAMFR = true;
}
}
}

protected final void initHEEAMLL(String s) {
if (!s.trim().isEmpty()) {
HEEAMLL = Byte.parseByte(s);
} else {
HEEAMLL = Byte.MIN_VALUE;
}
}

protected final void initHEEAMNHS(String s) {
if (!s.trim().isEmpty()) {
HEEAMNHS = Byte.parseByte(s);
} else {
HEEAMNHS = Byte.MIN_VALUE;
}
}

protected final void initHEEAMSE(String s) {
if (!s.trim().isEmpty()) {
HEEAMSE = Byte.parseByte(s);
} else {
HEEAMSE = Byte.MIN_VALUE;
}
}

protected final void initHEEAMSS(String s) {
if (!s.trim().isEmpty()) {
HEEAMSS = Byte.parseByte(s);
} else {
HEEAMSS = Byte.MIN_VALUE;
}
}

protected final void initHEEANHS(String s) {
if (!s.trim().isEmpty()) {
HEEANHS = Byte.parseByte(s);
} else {
HEEANHS = Byte.MIN_VALUE;
}
}

protected final void initHEEAOT(String s) {
if (!s.trim().isEmpty()) {
HEEAOT = Byte.parseByte(s);
} else {
HEEAOT = Byte.MIN_VALUE;
}
}

protected final void initHEEASE(String s) {
if (!s.trim().isEmpty()) {
HEEASE = Byte.parseByte(s);
} else {
HEEASE = Byte.MIN_VALUE;
}
}

protected final void initHEEASS(String s) {
if (!s.trim().isEmpty()) {
HEEASS = Byte.parseByte(s);
} else {
HEEASS = Byte.MIN_VALUE;
}
}

protected final void initHEEWCOV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEEWCOV = false;
} else {
HEEWCOV = true;
}
}
}

protected final void initHEEWM85(String s) {
if (!s.trim().isEmpty()) {
HEEWM85 = Byte.parseByte(s);
} else {
HEEWM85 = Byte.MIN_VALUE;
}
}

protected final void initHEEWM86(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEEWM86 = false;
} else {
HEEWM86 = true;
}
}
}

protected final void initHEEWM95(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEEWM95 = false;
} else {
HEEWM95 = true;
}
}
}

protected final void initHEEWMCH(String s) {
if (!s.trim().isEmpty()) {
HEEWMCH = Byte.parseByte(s);
} else {
HEEWMCH = Byte.MIN_VALUE;
}
}

protected final void initHEEWMFA(String s) {
if (!s.trim().isEmpty()) {
HEEWMFA = Byte.parseByte(s);
} else {
HEEWMFA = Byte.MIN_VALUE;
}
}

protected final void initHEEWMFR(String s) {
if (!s.trim().isEmpty()) {
HEEWMFR = Byte.parseByte(s);
} else {
HEEWMFR = Byte.MIN_VALUE;
}
}

protected final void initHEEWMLL(String s) {
if (!s.trim().isEmpty()) {
HEEWMLL = Byte.parseByte(s);
} else {
HEEWMLL = Byte.MIN_VALUE;
}
}

protected final void initHEEWMNHS(String s) {
if (!s.trim().isEmpty()) {
HEEWMNHS = Byte.parseByte(s);
} else {
HEEWMNHS = Byte.MIN_VALUE;
}
}

protected final void initHEEWMSE(String s) {
if (!s.trim().isEmpty()) {
HEEWMSE = Byte.parseByte(s);
} else {
HEEWMSE = Byte.MIN_VALUE;
}
}

protected final void initHEEWMSS(String s) {
if (!s.trim().isEmpty()) {
HEEWMSS = Byte.parseByte(s);
} else {
HEEWMSS = Byte.MIN_VALUE;
}
}

protected final void initHEEWNHS(String s) {
if (!s.trim().isEmpty()) {
HEEWNHS = Byte.parseByte(s);
} else {
HEEWNHS = Byte.MIN_VALUE;
}
}

protected final void initHEEWOT(String s) {
if (!s.trim().isEmpty()) {
HEEWOT = Byte.parseByte(s);
} else {
HEEWOT = Byte.MIN_VALUE;
}
}

protected final void initHEEWSE(String s) {
if (!s.trim().isEmpty()) {
HEEWSE = Byte.parseByte(s);
} else {
HEEWSE = Byte.MIN_VALUE;
}
}

protected final void initHEEWSS(String s) {
if (!s.trim().isEmpty()) {
HEEWSS = Byte.parseByte(s);
} else {
HEEWSS = Byte.MIN_VALUE;
}
}

protected final void initHEFLD(String s) {
if (!s.trim().isEmpty()) {
HEFLD = Byte.parseByte(s);
} else {
HEFLD = Byte.MIN_VALUE;
}
}

protected final void initHEFLE(String s) {
if (!s.trim().isEmpty()) {
HEFLE = Byte.parseByte(s);
} else {
HEFLE = Byte.MIN_VALUE;
}
}

protected final void initHEFLF(String s) {
if (!s.trim().isEmpty()) {
HEFLF = Byte.parseByte(s);
} else {
HEFLF = Byte.MIN_VALUE;
}
}

protected final void initHEFTCHK(String s) {
if (!s.trim().isEmpty()) {
HEFTCHK = Byte.parseByte(s);
} else {
HEFTCHK = Byte.MIN_VALUE;
}
}

protected final void initHEHBP(String s) {
if (!s.trim().isEmpty()) {
HEHBP = Byte.parseByte(s);
} else {
HEHBP = Byte.MIN_VALUE;
}
}

protected final void initHEHBPA(String s) {
if (!s.trim().isEmpty()) {
HEHBPA = Byte.parseByte(s);
} else {
HEHBPA = Byte.MIN_VALUE;
}
}

protected final void initHEHBPB(String s) {
if (!s.trim().isEmpty()) {
HEHBPB = Byte.parseByte(s);
} else {
HEHBPB = Byte.MIN_VALUE;
}
}

protected final void initHEHBPB1(String s) {
if (!s.trim().isEmpty()) {
HEHBPB1 = Byte.parseByte(s);
} else {
HEHBPB1 = Byte.MIN_VALUE;
}
}

protected final void initHEHELF(String s) {
if (!s.trim().isEmpty()) {
HEHELF = Byte.parseByte(s);
} else {
HEHELF = Byte.MIN_VALUE;
}
}

protected final void initHEHFA(String s) {
if (!s.trim().isEmpty()) {
HEHFA = Byte.parseByte(s);
} else {
HEHFA = Byte.MIN_VALUE;
}
}

protected final void initHEHFM(String s) {
if (!s.trim().isEmpty()) {
HEHFM = Byte.parseByte(s);
} else {
HEHFM = Byte.MIN_VALUE;
}
}

protected final void initHEHFY(String s) {
if (!s.trim().isEmpty()) {
HEHFY = Short.parseShort(s);
} else {
HEHFY = Short.MIN_VALUE;
}
}

protected final void initHEHIPA(String s) {
if (!s.trim().isEmpty()) {
HEHIPA = Byte.parseByte(s);
} else {
HEHIPA = Byte.MIN_VALUE;
}
}

protected final void initHEHIPB(String s) {
if (!s.trim().isEmpty()) {
HEHIPB = Byte.parseByte(s);
} else {
HEHIPB = Byte.MIN_VALUE;
}
}

protected final void initHEHIPC(String s) {
if (!s.trim().isEmpty()) {
HEHIPC = Byte.parseByte(s);
} else {
HEHIPC = Byte.MIN_VALUE;
}
}

protected final void initHEHNO(String s) {
if (!s.trim().isEmpty()) {
HEHNO = Byte.parseByte(s);
} else {
HEHNO = Byte.MIN_VALUE;
}
}

protected final void initHEHPA(String s) {
if (!s.trim().isEmpty()) {
HEHPA = Byte.parseByte(s);
} else {
HEHPA = Byte.MIN_VALUE;
}
}

protected final void initHEHPB96(String s) {
if (!s.trim().isEmpty()) {
HEHPB96 = Byte.parseByte(s);
} else {
HEHPB96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPBBR(String s) {
if (!s.trim().isEmpty()) {
HEHPBBR = Byte.parseByte(s);
} else {
HEHPBBR = Byte.MIN_VALUE;
}
}

protected final void initHEHPBDA(String s) {
if (!s.trim().isEmpty()) {
HEHPBDA = Byte.parseByte(s);
} else {
HEHPBDA = Byte.MIN_VALUE;
}
}

protected final void initHEHPBDL(String s) {
if (!s.trim().isEmpty()) {
HEHPBDL = Byte.parseByte(s);
} else {
HEHPBDL = Byte.MIN_VALUE;
}
}

protected final void initHEHPBGD(String s) {
if (!s.trim().isEmpty()) {
HEHPBGD = Byte.parseByte(s);
} else {
HEHPBGD = Byte.MIN_VALUE;
}
}

protected final void initHEHPBGS(String s) {
if (!s.trim().isEmpty()) {
HEHPBGS = Byte.parseByte(s);
} else {
HEHPBGS = Byte.MIN_VALUE;
}
}

protected final void initHEHPBOR(String s) {
if (!s.trim().isEmpty()) {
HEHPBOR = Byte.parseByte(s);
} else {
HEHPBOR = Byte.MIN_VALUE;
}
}

protected final void initHEHPBOT(String s) {
if (!s.trim().isEmpty()) {
HEHPBOT = Byte.parseByte(s);
} else {
HEHPBOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPBPA(String s) {
if (!s.trim().isEmpty()) {
HEHPBPA = Byte.parseByte(s);
} else {
HEHPBPA = Byte.MIN_VALUE;
}
}

protected final void initHEHPBSI(String s) {
if (!s.trim().isEmpty()) {
HEHPBSI = Byte.parseByte(s);
} else {
HEHPBSI = Byte.MIN_VALUE;
}
}

protected final void initHEHPBSL(String s) {
if (!s.trim().isEmpty()) {
HEHPBSL = Byte.parseByte(s);
} else {
HEHPBSL = Byte.MIN_VALUE;
}
}

protected final void initHEHPBSO(String s) {
if (!s.trim().isEmpty()) {
HEHPBSO = Byte.parseByte(s);
} else {
HEHPBSO = Byte.MIN_VALUE;
}
}

protected final void initHEHPBSP(String s) {
if (!s.trim().isEmpty()) {
HEHPBSP = Byte.parseByte(s);
} else {
HEHPBSP = Byte.MIN_VALUE;
}
}

protected final void initHEHPC(String s) {
if (!s.trim().isEmpty()) {
HEHPC = Byte.parseByte(s);
} else {
HEHPC = Byte.MIN_VALUE;
}
}

protected final void initHEHPD96(String s) {
if (!s.trim().isEmpty()) {
HEHPD96 = Byte.parseByte(s);
} else {
HEHPD96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPDBR(String s) {
if (!s.trim().isEmpty()) {
HEHPDBR = Byte.parseByte(s);
} else {
HEHPDBR = Byte.MIN_VALUE;
}
}

protected final void initHEHPDDA(String s) {
if (!s.trim().isEmpty()) {
HEHPDDA = Byte.parseByte(s);
} else {
HEHPDDA = Byte.MIN_VALUE;
}
}

protected final void initHEHPDFR(String s) {
if (!s.trim().isEmpty()) {
HEHPDFR = Byte.parseByte(s);
} else {
HEHPDFR = Byte.MIN_VALUE;
}
}

protected final void initHEHPDLA(String s) {
if (!s.trim().isEmpty()) {
HEHPDLA = Byte.parseByte(s);
} else {
HEHPDLA = Byte.MIN_VALUE;
}
}

protected final void initHEHPDNU(String s) {
if (!s.trim().isEmpty()) {
HEHPDNU = Byte.parseByte(s);
} else {
HEHPDNU = Byte.MIN_VALUE;
}
}

protected final void initHEHPDOR(String s) {
if (!s.trim().isEmpty()) {
HEHPDOR = Byte.parseByte(s);
} else {
HEHPDOR = Byte.MIN_VALUE;
}
}

protected final void initHEHPDOT(String s) {
if (!s.trim().isEmpty()) {
HEHPDOT = Byte.parseByte(s);
} else {
HEHPDOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPDPP(String s) {
if (!s.trim().isEmpty()) {
HEHPDPP = Byte.parseByte(s);
} else {
HEHPDPP = Byte.MIN_VALUE;
}
}

protected final void initHEHPDSI(String s) {
if (!s.trim().isEmpty()) {
HEHPDSI = Byte.parseByte(s);
} else {
HEHPDSI = Byte.MIN_VALUE;
}
}

protected final void initHEHPDSO(String s) {
if (!s.trim().isEmpty()) {
HEHPDSO = Byte.parseByte(s);
} else {
HEHPDSO = Byte.MIN_VALUE;
}
}

protected final void initHEHPDSP(String s) {
if (!s.trim().isEmpty()) {
HEHPDSP = Byte.parseByte(s);
} else {
HEHPDSP = Byte.MIN_VALUE;
}
}

protected final void initHEHPDST(String s) {
if (!s.trim().isEmpty()) {
HEHPDST = Byte.parseByte(s);
} else {
HEHPDST = Byte.MIN_VALUE;
}
}

protected final void initHEHPH96(String s) {
if (!s.trim().isEmpty()) {
HEHPH96 = Byte.parseByte(s);
} else {
HEHPH96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPHBR(String s) {
if (!s.trim().isEmpty()) {
HEHPHBR = Byte.parseByte(s);
} else {
HEHPHBR = Byte.MIN_VALUE;
}
}

protected final void initHEHPHDA(String s) {
if (!s.trim().isEmpty()) {
HEHPHDA = Byte.parseByte(s);
} else {
HEHPHDA = Byte.MIN_VALUE;
}
}

protected final void initHEHPHFR(String s) {
if (!s.trim().isEmpty()) {
HEHPHFR = Byte.parseByte(s);
} else {
HEHPHFR = Byte.MIN_VALUE;
}
}

protected final void initHEHPHLA(String s) {
if (!s.trim().isEmpty()) {
HEHPHLA = Byte.parseByte(s);
} else {
HEHPHLA = Byte.MIN_VALUE;
}
}

protected final void initHEHPHNU(String s) {
if (!s.trim().isEmpty()) {
HEHPHNU = Byte.parseByte(s);
} else {
HEHPHNU = Byte.MIN_VALUE;
}
}

protected final void initHEHPHOR(String s) {
if (!s.trim().isEmpty()) {
HEHPHOR = Byte.parseByte(s);
} else {
HEHPHOR = Byte.MIN_VALUE;
}
}

protected final void initHEHPHOT(String s) {
if (!s.trim().isEmpty()) {
HEHPHOT = Byte.parseByte(s);
} else {
HEHPHOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPHPP(String s) {
if (!s.trim().isEmpty()) {
HEHPHPP = Byte.parseByte(s);
} else {
HEHPHPP = Byte.MIN_VALUE;
}
}

protected final void initHEHPHSI(String s) {
if (!s.trim().isEmpty()) {
HEHPHSI = Byte.parseByte(s);
} else {
HEHPHSI = Byte.MIN_VALUE;
}
}

protected final void initHEHPHSO(String s) {
if (!s.trim().isEmpty()) {
HEHPHSO = Byte.parseByte(s);
} else {
HEHPHSO = Byte.MIN_VALUE;
}
}

protected final void initHEHPHSP(String s) {
if (!s.trim().isEmpty()) {
HEHPHSP = Byte.parseByte(s);
} else {
HEHPHSP = Byte.MIN_VALUE;
}
}

protected final void initHEHPHST(String s) {
if (!s.trim().isEmpty()) {
HEHPHST = Byte.parseByte(s);
} else {
HEHPHST = Byte.MIN_VALUE;
}
}

protected final void initHEHPLA(String s) {
if (!s.trim().isEmpty()) {
HEHPLA = Byte.parseByte(s);
} else {
HEHPLA = Byte.MIN_VALUE;
}
}

protected final void initHEHPM96(String s) {
if (!s.trim().isEmpty()) {
HEHPM96 = Byte.parseByte(s);
} else {
HEHPM96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPMBR(String s) {
if (!s.trim().isEmpty()) {
HEHPMBR = Byte.parseByte(s);
} else {
HEHPMBR = Byte.MIN_VALUE;
}
}

protected final void initHEHPMDA(String s) {
if (!s.trim().isEmpty()) {
HEHPMDA = Byte.parseByte(s);
} else {
HEHPMDA = Byte.MIN_VALUE;
}
}

protected final void initHEHPMFR(String s) {
if (!s.trim().isEmpty()) {
HEHPMFR = Byte.parseByte(s);
} else {
HEHPMFR = Byte.MIN_VALUE;
}
}

protected final void initHEHPMLA(String s) {
if (!s.trim().isEmpty()) {
HEHPMLA = Byte.parseByte(s);
} else {
HEHPMLA = Byte.MIN_VALUE;
}
}

protected final void initHEHPMNU(String s) {
if (!s.trim().isEmpty()) {
HEHPMNU = Byte.parseByte(s);
} else {
HEHPMNU = Byte.MIN_VALUE;
}
}

protected final void initHEHPMOR(String s) {
if (!s.trim().isEmpty()) {
HEHPMOR = Byte.parseByte(s);
} else {
HEHPMOR = Byte.MIN_VALUE;
}
}

protected final void initHEHPMOT(String s) {
if (!s.trim().isEmpty()) {
HEHPMOT = Byte.parseByte(s);
} else {
HEHPMOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPMPP(String s) {
if (!s.trim().isEmpty()) {
HEHPMPP = Byte.parseByte(s);
} else {
HEHPMPP = Byte.MIN_VALUE;
}
}

protected final void initHEHPMSI(String s) {
if (!s.trim().isEmpty()) {
HEHPMSI = Byte.parseByte(s);
} else {
HEHPMSI = Byte.MIN_VALUE;
}
}

protected final void initHEHPMSO(String s) {
if (!s.trim().isEmpty()) {
HEHPMSO = Byte.parseByte(s);
} else {
HEHPMSO = Byte.MIN_VALUE;
}
}

protected final void initHEHPMSP(String s) {
if (!s.trim().isEmpty()) {
HEHPMSP = Byte.parseByte(s);
} else {
HEHPMSP = Byte.MIN_VALUE;
}
}

protected final void initHEHPMST(String s) {
if (!s.trim().isEmpty()) {
HEHPMST = Byte.parseByte(s);
} else {
HEHPMST = Byte.MIN_VALUE;
}
}

protected final void initHEHPP96(String s) {
if (!s.trim().isEmpty()) {
HEHPP96 = Byte.parseByte(s);
} else {
HEHPP96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPPBR(String s) {
if (!s.trim().isEmpty()) {
HEHPPBR = Byte.parseByte(s);
} else {
HEHPPBR = Byte.MIN_VALUE;
}
}

protected final void initHEHPPD(String s) {
if (!s.trim().isEmpty()) {
HEHPPD = Byte.parseByte(s);
} else {
HEHPPD = Byte.MIN_VALUE;
}
}

protected final void initHEHPPDA(String s) {
if (!s.trim().isEmpty()) {
HEHPPDA = Byte.parseByte(s);
} else {
HEHPPDA = Byte.MIN_VALUE;
}
}

protected final void initHEHPPFR(String s) {
if (!s.trim().isEmpty()) {
HEHPPFR = Byte.parseByte(s);
} else {
HEHPPFR = Byte.MIN_VALUE;
}
}

protected final void initHEHPPLA(String s) {
if (!s.trim().isEmpty()) {
HEHPPLA = Byte.parseByte(s);
} else {
HEHPPLA = Byte.MIN_VALUE;
}
}

protected final void initHEHPPNU(String s) {
if (!s.trim().isEmpty()) {
HEHPPNU = Byte.parseByte(s);
} else {
HEHPPNU = Byte.MIN_VALUE;
}
}

protected final void initHEHPPOR(String s) {
if (!s.trim().isEmpty()) {
HEHPPOR = Byte.parseByte(s);
} else {
HEHPPOR = Byte.MIN_VALUE;
}
}

protected final void initHEHPPOT(String s) {
if (!s.trim().isEmpty()) {
HEHPPOT = Byte.parseByte(s);
} else {
HEHPPOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPPPP(String s) {
if (!s.trim().isEmpty()) {
HEHPPPP = Byte.parseByte(s);
} else {
HEHPPPP = Byte.MIN_VALUE;
}
}

protected final void initHEHPPSI(String s) {
if (!s.trim().isEmpty()) {
HEHPPSI = Byte.parseByte(s);
} else {
HEHPPSI = Byte.MIN_VALUE;
}
}

protected final void initHEHPPSO(String s) {
if (!s.trim().isEmpty()) {
HEHPPSO = Byte.parseByte(s);
} else {
HEHPPSO = Byte.MIN_VALUE;
}
}

protected final void initHEHPPSP(String s) {
if (!s.trim().isEmpty()) {
HEHPPSP = Byte.parseByte(s);
} else {
HEHPPSP = Byte.MIN_VALUE;
}
}

protected final void initHEHPPST(String s) {
if (!s.trim().isEmpty()) {
HEHPPST = Byte.parseByte(s);
} else {
HEHPPST = Byte.MIN_VALUE;
}
}

protected final void initHEHPS(String s) {
if (!s.trim().isEmpty()) {
HEHPS = Byte.parseByte(s);
} else {
HEHPS = Byte.MIN_VALUE;
}
}

protected final void initHEHPS95(String s) {
if (!s.trim().isEmpty()) {
HEHPS95 = Byte.parseByte(s);
} else {
HEHPS95 = Byte.MIN_VALUE;
}
}

protected final void initHEHPS96(String s) {
if (!s.trim().isEmpty()) {
HEHPS96 = Byte.parseByte(s);
} else {
HEHPS96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPSCH(String s) {
if (!s.trim().isEmpty()) {
HEHPSCH = Byte.parseByte(s);
} else {
HEHPSCH = Byte.MIN_VALUE;
}
}

protected final void initHEHPSEX(String s) {
if (!s.trim().isEmpty()) {
HEHPSEX = Byte.parseByte(s);
} else {
HEHPSEX = Byte.MIN_VALUE;
}
}

protected final void initHEHPSOT(String s) {
if (!s.trim().isEmpty()) {
HEHPSOT = Byte.parseByte(s);
} else {
HEHPSOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPT96(String s) {
if (!s.trim().isEmpty()) {
HEHPT96 = Byte.parseByte(s);
} else {
HEHPT96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPTBR(String s) {
if (!s.trim().isEmpty()) {
HEHPTBR = Byte.parseByte(s);
} else {
HEHPTBR = Byte.MIN_VALUE;
}
}

protected final void initHEHPTDA(String s) {
if (!s.trim().isEmpty()) {
HEHPTDA = Byte.parseByte(s);
} else {
HEHPTDA = Byte.MIN_VALUE;
}
}

protected final void initHEHPTFR(String s) {
if (!s.trim().isEmpty()) {
HEHPTFR = Byte.parseByte(s);
} else {
HEHPTFR = Byte.MIN_VALUE;
}
}

protected final void initHEHPTLA(String s) {
if (!s.trim().isEmpty()) {
HEHPTLA = Byte.parseByte(s);
} else {
HEHPTLA = Byte.MIN_VALUE;
}
}

protected final void initHEHPTNU(String s) {
if (!s.trim().isEmpty()) {
HEHPTNU = Byte.parseByte(s);
} else {
HEHPTNU = Byte.MIN_VALUE;
}
}

protected final void initHEHPTOR(String s) {
if (!s.trim().isEmpty()) {
HEHPTOR = Byte.parseByte(s);
} else {
HEHPTOR = Byte.MIN_VALUE;
}
}

protected final void initHEHPTOT(String s) {
if (!s.trim().isEmpty()) {
HEHPTOT = Byte.parseByte(s);
} else {
HEHPTOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPTPP(String s) {
if (!s.trim().isEmpty()) {
HEHPTPP = Byte.parseByte(s);
} else {
HEHPTPP = Byte.MIN_VALUE;
}
}

protected final void initHEHPTSI(String s) {
if (!s.trim().isEmpty()) {
HEHPTSI = Byte.parseByte(s);
} else {
HEHPTSI = Byte.MIN_VALUE;
}
}

protected final void initHEHPTSO(String s) {
if (!s.trim().isEmpty()) {
HEHPTSO = Byte.parseByte(s);
} else {
HEHPTSO = Byte.MIN_VALUE;
}
}

protected final void initHEHPTSP(String s) {
if (!s.trim().isEmpty()) {
HEHPTSP = Byte.parseByte(s);
} else {
HEHPTSP = Byte.MIN_VALUE;
}
}

protected final void initHEHPTST(String s) {
if (!s.trim().isEmpty()) {
HEHPTST = Byte.parseByte(s);
} else {
HEHPTST = Byte.MIN_VALUE;
}
}

protected final void initHEHPW96(String s) {
if (!s.trim().isEmpty()) {
HEHPW96 = Byte.parseByte(s);
} else {
HEHPW96 = Byte.MIN_VALUE;
}
}

protected final void initHEHPWBR(String s) {
if (!s.trim().isEmpty()) {
HEHPWBR = Byte.parseByte(s);
} else {
HEHPWBR = Byte.MIN_VALUE;
}
}

protected final void initHEHPWDA(String s) {
if (!s.trim().isEmpty()) {
HEHPWDA = Byte.parseByte(s);
} else {
HEHPWDA = Byte.MIN_VALUE;
}
}

protected final void initHEHPWFR(String s) {
if (!s.trim().isEmpty()) {
HEHPWFR = Byte.parseByte(s);
} else {
HEHPWFR = Byte.MIN_VALUE;
}
}

protected final void initHEHPWLA(String s) {
if (!s.trim().isEmpty()) {
HEHPWLA = Byte.parseByte(s);
} else {
HEHPWLA = Byte.MIN_VALUE;
}
}

protected final void initHEHPWNU(String s) {
if (!s.trim().isEmpty()) {
HEHPWNU = Byte.parseByte(s);
} else {
HEHPWNU = Byte.MIN_VALUE;
}
}

protected final void initHEHPWOR(String s) {
if (!s.trim().isEmpty()) {
HEHPWOR = Byte.parseByte(s);
} else {
HEHPWOR = Byte.MIN_VALUE;
}
}

protected final void initHEHPWOT(String s) {
if (!s.trim().isEmpty()) {
HEHPWOT = Byte.parseByte(s);
} else {
HEHPWOT = Byte.MIN_VALUE;
}
}

protected final void initHEHPWPP(String s) {
if (!s.trim().isEmpty()) {
HEHPWPP = Byte.parseByte(s);
} else {
HEHPWPP = Byte.MIN_VALUE;
}
}

protected final void initHEHPWSI(String s) {
if (!s.trim().isEmpty()) {
HEHPWSI = Byte.parseByte(s);
} else {
HEHPWSI = Byte.MIN_VALUE;
}
}

protected final void initHEHPWSO(String s) {
if (!s.trim().isEmpty()) {
HEHPWSO = Byte.parseByte(s);
} else {
HEHPWSO = Byte.MIN_VALUE;
}
}

protected final void initHEHPWSP(String s) {
if (!s.trim().isEmpty()) {
HEHPWSP = Byte.parseByte(s);
} else {
HEHPWSP = Byte.MIN_VALUE;
}
}

protected final void initHEHPWST(String s) {
if (!s.trim().isEmpty()) {
HEHPWST = Byte.parseByte(s);
} else {
HEHPWST = Byte.MIN_VALUE;
}
}

protected final void initHEHPY(String s) {
if (!s.trim().isEmpty()) {
HEHPY = Byte.parseByte(s);
} else {
HEHPY = Byte.MIN_VALUE;
}
}

protected final void initHEHRT(String s) {
if (!s.trim().isEmpty()) {
HEHRT = Byte.parseByte(s);
} else {
HEHRT = Byte.MIN_VALUE;
}
}

protected final void initHEHRTMD(String s) {
if (!s.trim().isEmpty()) {
HEHRTMD = Byte.parseByte(s);
} else {
HEHRTMD = Byte.MIN_VALUE;
}
}

protected final void initHEHSM85(String s) {
if (!s.trim().isEmpty()) {
HEHSM85 = Byte.parseByte(s);
} else {
HEHSM85 = Byte.MIN_VALUE;
}
}

protected final void initHEHSM86(String s) {
if (!s.trim().isEmpty()) {
HEHSM86 = Byte.parseByte(s);
} else {
HEHSM86 = Byte.MIN_VALUE;
}
}

protected final void initHEHSM96(String s) {
if (!s.trim().isEmpty()) {
HEHSM96 = Byte.parseByte(s);
} else {
HEHSM96 = Byte.MIN_VALUE;
}
}

protected final void initHEHSMAC(String s) {
if (!s.trim().isEmpty()) {
HEHSMAC = Byte.parseByte(s);
} else {
HEHSMAC = Byte.MIN_VALUE;
}
}

protected final void initHEHSMCH(String s) {
if (!s.trim().isEmpty()) {
HEHSMCH = Byte.parseByte(s);
} else {
HEHSMCH = Byte.MIN_VALUE;
}
}

protected final void initHEHSMCR(String s) {
if (!s.trim().isEmpty()) {
HEHSMCR = Byte.parseByte(s);
} else {
HEHSMCR = Byte.MIN_VALUE;
}
}

protected final void initHEHSMEX(String s) {
if (!s.trim().isEmpty()) {
HEHSMEX = Byte.parseByte(s);
} else {
HEHSMEX = Byte.MIN_VALUE;
}
}

protected final void initHEHSMHY(String s) {
if (!s.trim().isEmpty()) {
HEHSMHY = Byte.parseByte(s);
} else {
HEHSMHY = Byte.MIN_VALUE;
}
}

protected final void initHEHSMMA(String s) {
if (!s.trim().isEmpty()) {
HEHSMMA = Byte.parseByte(s);
} else {
HEHSMMA = Byte.MIN_VALUE;
}
}

protected final void initHEHSMOS(String s) {
if (!s.trim().isEmpty()) {
HEHSMOS = Byte.parseByte(s);
} else {
HEHSMOS = Byte.MIN_VALUE;
}
}

protected final void initHEHSMOT(String s) {
if (!s.trim().isEmpty()) {
HEHSMOT = Byte.parseByte(s);
} else {
HEHSMOT = Byte.MIN_VALUE;
}
}

protected final void initHEHSMTH(String s) {
if (!s.trim().isEmpty()) {
HEHSMTH = Byte.parseByte(s);
} else {
HEHSMTH = Byte.MIN_VALUE;
}
}

protected final void initHEHST(String s) {
if (!s.trim().isEmpty()) {
HEHST = Short.parseShort(s);
} else {
HEHST = Short.MIN_VALUE;
}
}

protected final void initHEHSTA(String s) {
if (!s.trim().isEmpty()) {
HEHSTA = Byte.parseByte(s);
} else {
HEHSTA = Byte.MIN_VALUE;
}
}

protected final void initHEHYE(String s) {
if (!s.trim().isEmpty()) {
HEHYE = Byte.parseByte(s);
} else {
HEHYE = Byte.MIN_VALUE;
}
}

protected final void initHEHYY(String s) {
if (!s.trim().isEmpty()) {
HEHYY = Short.parseShort(s);
} else {
HEHYY = Short.MIN_VALUE;
}
}

protected final void initHEHYYA(String s) {
if (!s.trim().isEmpty()) {
HEHYYA = Byte.parseByte(s);
} else {
HEHYYA = Byte.MIN_VALUE;
}
}

protected final void initHEIGHT(String s) {
if (!s.trim().isEmpty()) {
HEIGHT = Double.parseDouble(s);
} else {
HEIGHT = Double.NaN;
}
}

protected final void initHEINCT(String s) {
if (!s.trim().isEmpty()) {
HEINCT = Byte.parseByte(s);
} else {
HEINCT = Byte.MIN_VALUE;
}
}

protected final void initHEINCTA(String s) {
if (!s.trim().isEmpty()) {
HEINCTA = Byte.parseByte(s);
} else {
HEINCTA = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA1(String s) {
if (!s.trim().isEmpty()) {
HEJIAA1 = Byte.parseByte(s);
} else {
HEJIAA1 = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA2(String s) {
if (!s.trim().isEmpty()) {
HEJIAA2 = Byte.parseByte(s);
} else {
HEJIAA2 = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA3(String s) {
if (!s.trim().isEmpty()) {
HEJIAA3 = Byte.parseByte(s);
} else {
HEJIAA3 = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA4(String s) {
if (!s.trim().isEmpty()) {
HEJIAA4 = Byte.parseByte(s);
} else {
HEJIAA4 = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA5(String s) {
if (!s.trim().isEmpty()) {
HEJIAA5 = Byte.parseByte(s);
} else {
HEJIAA5 = Byte.MIN_VALUE;
}
}

protected final void initHEJIBLH(String s) {
if (!s.trim().isEmpty()) {
HEJIBLH = Byte.parseByte(s);
} else {
HEJIBLH = Byte.MIN_VALUE;
}
}

protected final void initHEJIBLK(String s) {
if (!s.trim().isEmpty()) {
HEJIBLK = Byte.parseByte(s);
} else {
HEJIBLK = Byte.MIN_VALUE;
}
}

protected final void initHEJIBRH(String s) {
if (!s.trim().isEmpty()) {
HEJIBRH = Byte.parseByte(s);
} else {
HEJIBRH = Byte.MIN_VALUE;
}
}

protected final void initHEJIBRK(String s) {
if (!s.trim().isEmpty()) {
HEJIBRK = Byte.parseByte(s);
} else {
HEJIBRK = Byte.MIN_VALUE;
}
}

protected final void initHEJION(String s) {
if (!s.trim().isEmpty()) {
HEJION = Byte.parseByte(s);
} else {
HEJION = Byte.MIN_VALUE;
}
}

protected final void initHEKIDN(String s) {
if (!s.trim().isEmpty()) {
HEKIDN = Byte.parseByte(s);
} else {
HEKIDN = Byte.MIN_VALUE;
}
}

protected final void initHEKNEA(String s) {
if (!s.trim().isEmpty()) {
HEKNEA = Byte.parseByte(s);
} else {
HEKNEA = Byte.MIN_VALUE;
}
}

protected final void initHEKNEB(String s) {
if (!s.trim().isEmpty()) {
HEKNEB = Byte.parseByte(s);
} else {
HEKNEB = Byte.MIN_VALUE;
}
}

protected final void initHEKNEC(String s) {
if (!s.trim().isEmpty()) {
HEKNEC = Byte.parseByte(s);
} else {
HEKNEC = Byte.MIN_VALUE;
}
}

protected final void initHEKNED(String s) {
if (!s.trim().isEmpty()) {
HEKNED = Byte.parseByte(s);
} else {
HEKNED = Byte.MIN_VALUE;
}
}

protected final void initHEKNEF(String s) {
if (!s.trim().isEmpty()) {
HEKNEF = Byte.parseByte(s);
} else {
HEKNEF = Byte.MIN_VALUE;
}
}

protected final void initHELC(String s) {
if (!s.trim().isEmpty()) {
HELC = Byte.parseByte(s);
} else {
HELC = Byte.MIN_VALUE;
}
}

protected final void initHELEUK(String s) {
if (!s.trim().isEmpty()) {
HELEUK = Byte.parseByte(s);
} else {
HELEUK = Byte.MIN_VALUE;
}
}

protected final void initHELNGB(String s) {
if (!s.trim().isEmpty()) {
HELNGB = Byte.parseByte(s);
} else {
HELNGB = Byte.MIN_VALUE;
}
}

protected final void initHELWK(String s) {
if (!s.trim().isEmpty()) {
HELWK = Byte.parseByte(s);
} else {
HELWK = Byte.MIN_VALUE;
}
}

protected final void initHEMDA1(String s) {
if (!s.trim().isEmpty()) {
HEMDA1 = Byte.parseByte(s);
} else {
HEMDA1 = Byte.MIN_VALUE;
}
}

protected final void initHEMDAB(String s) {
if (!s.trim().isEmpty()) {
HEMDAB = Byte.parseByte(s);
} else {
HEMDAB = Byte.MIN_VALUE;
}
}

protected final void initHEMEB(String s) {
if (!s.trim().isEmpty()) {
HEMEB = Byte.parseByte(s);
} else {
HEMEB = Byte.MIN_VALUE;
}
}

protected final void initHEMEN(String s) {
if (!s.trim().isEmpty()) {
HEMEN = Byte.parseByte(s);
} else {
HEMEN = Byte.MIN_VALUE;
}
}

protected final void initHEMW(String s) {
if (!s.trim().isEmpty()) {
HEMW = Byte.parseByte(s);
} else {
HEMW = Byte.MIN_VALUE;
}
}

protected final void initHEMWCOV(String s) {
if (!s.trim().isEmpty()) {
HEMWCOV = Byte.parseByte(s);
} else {
HEMWCOV = Byte.MIN_VALUE;
}
}

protected final void initHEMWM85(String s) {
if (!s.trim().isEmpty()) {
HEMWM85 = Byte.parseByte(s);
} else {
HEMWM85 = Byte.MIN_VALUE;
}
}

protected final void initHEMWM86(String s) {
if (!s.trim().isEmpty()) {
HEMWM86 = Byte.parseByte(s);
} else {
HEMWM86 = Byte.MIN_VALUE;
}
}

protected final void initHEMWM95(String s) {
if (!s.trim().isEmpty()) {
HEMWM95 = Byte.parseByte(s);
} else {
HEMWM95 = Byte.MIN_VALUE;
}
}

protected final void initHEMWMCH(String s) {
if (!s.trim().isEmpty()) {
HEMWMCH = Byte.parseByte(s);
} else {
HEMWMCH = Byte.MIN_VALUE;
}
}

protected final void initHEMWMFA(String s) {
if (!s.trim().isEmpty()) {
HEMWMFA = Byte.parseByte(s);
} else {
HEMWMFA = Byte.MIN_VALUE;
}
}

protected final void initHEMWMFR(String s) {
if (!s.trim().isEmpty()) {
HEMWMFR = Byte.parseByte(s);
} else {
HEMWMFR = Byte.MIN_VALUE;
}
}

protected final void initHEMWMLL(String s) {
if (!s.trim().isEmpty()) {
HEMWMLL = Byte.parseByte(s);
} else {
HEMWMLL = Byte.MIN_VALUE;
}
}

protected final void initHEMWMNHS(String s) {
if (!s.trim().isEmpty()) {
HEMWMNHS = Byte.parseByte(s);
} else {
HEMWMNHS = Byte.MIN_VALUE;
}
}

protected final void initHEMWMSE(String s) {
if (!s.trim().isEmpty()) {
HEMWMSE = Byte.parseByte(s);
} else {
HEMWMSE = Byte.MIN_VALUE;
}
}

protected final void initHEMWMSS(String s) {
if (!s.trim().isEmpty()) {
HEMWMSS = Byte.parseByte(s);
} else {
HEMWMSS = Byte.MIN_VALUE;
}
}

protected final void initHEMWNHS(String s) {
if (!s.trim().isEmpty()) {
HEMWNHS = Byte.parseByte(s);
} else {
HEMWNHS = Byte.MIN_VALUE;
}
}

protected final void initHEMWOT(String s) {
if (!s.trim().isEmpty()) {
HEMWOT = Byte.parseByte(s);
} else {
HEMWOT = Byte.MIN_VALUE;
}
}

protected final void initHEMWSE(String s) {
if (!s.trim().isEmpty()) {
HEMWSE = Byte.parseByte(s);
} else {
HEMWSE = Byte.MIN_VALUE;
}
}

protected final void initHEMWSS(String s) {
if (!s.trim().isEmpty()) {
HEMWSS = Byte.parseByte(s);
} else {
HEMWSS = Byte.MIN_VALUE;
}
}

protected final void initHENMMI(String s) {
if (!s.trim().isEmpty()) {
HENMMI = Byte.parseByte(s);
} else {
HENMMI = Byte.MIN_VALUE;
}
}

protected final void initHENMST(String s) {
if (!s.trim().isEmpty()) {
HENMST = Byte.parseByte(s);
} else {
HENMST = Byte.MIN_VALUE;
}
}

protected final void initHEOPCCA(String s) {
if (!s.trim().isEmpty()) {
HEOPCCA = Byte.parseByte(s);
} else {
HEOPCCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPCDI(String s) {
if (!s.trim().isEmpty()) {
HEOPCDI = Byte.parseByte(s);
} else {
HEOPCDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPCGL(String s) {
if (!s.trim().isEmpty()) {
HEOPCGL = Byte.parseByte(s);
} else {
HEOPCGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPCMD(String s) {
if (!s.trim().isEmpty()) {
HEOPCMD = Byte.parseByte(s);
} else {
HEOPCMD = Byte.MIN_VALUE;
}
}

protected final void initHEOPFCA(String s) {
if (!s.trim().isEmpty()) {
HEOPFCA = Byte.parseByte(s);
} else {
HEOPFCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPFDI(String s) {
if (!s.trim().isEmpty()) {
HEOPFDI = Byte.parseByte(s);
} else {
HEOPFDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPFGL(String s) {
if (!s.trim().isEmpty()) {
HEOPFGL = Byte.parseByte(s);
} else {
HEOPFGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPFMD(String s) {
if (!s.trim().isEmpty()) {
HEOPFMD = Byte.parseByte(s);
} else {
HEOPFMD = Byte.MIN_VALUE;
}
}

protected final void initHEOPNCA(String s) {
if (!s.trim().isEmpty()) {
HEOPNCA = Byte.parseByte(s);
} else {
HEOPNCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPNDI(String s) {
if (!s.trim().isEmpty()) {
HEOPNDI = Byte.parseByte(s);
} else {
HEOPNDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPNGL(String s) {
if (!s.trim().isEmpty()) {
HEOPNGL = Byte.parseByte(s);
} else {
HEOPNGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPNMD(String s) {
if (!s.trim().isEmpty()) {
HEOPNMD = Byte.parseByte(s);
} else {
HEOPNMD = Byte.MIN_VALUE;
}
}

protected final void initHEOPSCA(String s) {
if (!s.trim().isEmpty()) {
HEOPSCA = Byte.parseByte(s);
} else {
HEOPSCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPSDI(String s) {
if (!s.trim().isEmpty()) {
HEOPSDI = Byte.parseByte(s);
} else {
HEOPSDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPSGL(String s) {
if (!s.trim().isEmpty()) {
HEOPSGL = Byte.parseByte(s);
} else {
HEOPSGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPSMD(String s) {
if (!s.trim().isEmpty()) {
HEOPSMD = Byte.parseByte(s);
} else {
HEOPSMD = Byte.MIN_VALUE;
}
}

protected final void initHEOPT96(String s) {
if (!s.trim().isEmpty()) {
HEOPT96 = Byte.parseByte(s);
} else {
HEOPT96 = Byte.MIN_VALUE;
}
}

protected final void initHEOPTCA(String s) {
if (!s.trim().isEmpty()) {
HEOPTCA = Byte.parseByte(s);
} else {
HEOPTCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPTDI(String s) {
if (!s.trim().isEmpty()) {
HEOPTDI = Byte.parseByte(s);
} else {
HEOPTDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPTGL(String s) {
if (!s.trim().isEmpty()) {
HEOPTGL = Byte.parseByte(s);
} else {
HEOPTGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPTMD(String s) {
if (!s.trim().isEmpty()) {
HEOPTMD = Byte.parseByte(s);
} else {
HEOPTMD = Byte.MIN_VALUE;
}
}

protected final void initHEOVE(String s) {
if (!s.trim().isEmpty()) {
HEOVE = Byte.parseByte(s);
} else {
HEOVE = Byte.MIN_VALUE;
}
}

protected final void initHEOVY(String s) {
if (!s.trim().isEmpty()) {
HEOVY = Short.parseShort(s);
} else {
HEOVY = Short.MIN_VALUE;
}
}

protected final void initHEOVYA(String s) {
if (!s.trim().isEmpty()) {
HEOVYA = Byte.parseByte(s);
} else {
HEOVYA = Byte.MIN_VALUE;
}
}

protected final void initHEPAB(String s) {
if (!s.trim().isEmpty()) {
HEPAB = Byte.parseByte(s);
} else {
HEPAB = Byte.MIN_VALUE;
}
}

protected final void initHEPAB1(String s) {
if (!s.trim().isEmpty()) {
HEPAB1 = Byte.parseByte(s);
} else {
HEPAB1 = Byte.MIN_VALUE;
}
}

protected final void initHEPAG(String s) {
if (!s.trim().isEmpty()) {
HEPAG = Byte.parseByte(s);
} else {
HEPAG = Byte.MIN_VALUE;
}
}

protected final void initHEPAH(String s) {
if (!s.trim().isEmpty()) {
HEPAH = Byte.parseByte(s);
} else {
HEPAH = Byte.MIN_VALUE;
}
}

protected final void initHEPAI(String s) {
if (!s.trim().isEmpty()) {
HEPAI = Byte.parseByte(s);
} else {
HEPAI = Byte.MIN_VALUE;
}
}

protected final void initHEPAJ(String s) {
if (!s.trim().isEmpty()) {
HEPAJ = Byte.parseByte(s);
} else {
HEPAJ = Byte.MIN_VALUE;
}
}

protected final void initHEPAK3(String s) {
if (!s.trim().isEmpty()) {
HEPAK3 = Byte.parseByte(s);
} else {
HEPAK3 = Byte.MIN_VALUE;
}
}

protected final void initHEPAWAL(String s) {
if (!s.trim().isEmpty()) {
HEPAWAL = Byte.parseByte(s);
} else {
HEPAWAL = Byte.MIN_VALUE;
}
}

protected final void initHEPAWBA(String s) {
if (!s.trim().isEmpty()) {
HEPAWBA = Byte.parseByte(s);
} else {
HEPAWBA = Byte.MIN_VALUE;
}
}

protected final void initHEPAWFE(String s) {
if (!s.trim().isEmpty()) {
HEPAWFE = Byte.parseByte(s);
} else {
HEPAWFE = Byte.MIN_VALUE;
}
}

protected final void initHEPAWHI(String s) {
if (!s.trim().isEmpty()) {
HEPAWHI = Byte.parseByte(s);
} else {
HEPAWHI = Byte.MIN_VALUE;
}
}

protected final void initHEPAWKN(String s) {
if (!s.trim().isEmpty()) {
HEPAWKN = Byte.parseByte(s);
} else {
HEPAWKN = Byte.MIN_VALUE;
}
}

protected final void initHEPAWMO(String s) {
if (!s.trim().isEmpty()) {
HEPAWMO = Byte.parseByte(s);
} else {
HEPAWMO = Byte.MIN_VALUE;
}
}

protected final void initHEPAWOT(String s) {
if (!s.trim().isEmpty()) {
HEPAWOT = Byte.parseByte(s);
} else {
HEPAWOT = Byte.MIN_VALUE;
}
}

protected final void initHEPDIACA(String s) {
if (!s.trim().isEmpty()) {
HEPDIACA = Byte.parseByte(s);
} else {
HEPDIACA = Byte.MIN_VALUE;
}
}

protected final void initHEPDIADI(String s) {
if (!s.trim().isEmpty()) {
HEPDIADI = Byte.parseByte(s);
} else {
HEPDIADI = Byte.MIN_VALUE;
}
}

protected final void initHEPDIAGL(String s) {
if (!s.trim().isEmpty()) {
HEPDIAGL = Byte.parseByte(s);
} else {
HEPDIAGL = Byte.MIN_VALUE;
}
}

protected final void initHEPDIAMD(String s) {
if (!s.trim().isEmpty()) {
HEPDIAMD = Byte.parseByte(s);
} else {
HEPDIAMD = Byte.MIN_VALUE;
}
}

protected final void initHEPEA(String s) {
if (!s.trim().isEmpty()) {
HEPEA = Byte.parseByte(s);
} else {
HEPEA = Byte.MIN_VALUE;
}
}

protected final void initHEPEE(String s) {
if (!s.trim().isEmpty()) {
HEPEE = Byte.parseByte(s);
} else {
HEPEE = Byte.MIN_VALUE;
}
}

protected final void initHEPER(String s) {
if (!s.trim().isEmpty()) {
HEPER = Byte.parseByte(s);
} else {
HEPER = Byte.MIN_VALUE;
}
}

protected final void initHEPEY(String s) {
if (!s.trim().isEmpty()) {
HEPEY = Short.parseShort(s);
} else {
HEPEY = Short.MIN_VALUE;
}
}

protected final void initHEPMED(String s) {
if (!s.trim().isEmpty()) {
HEPMED = Byte.parseByte(s);
} else {
HEPMED = Byte.MIN_VALUE;
}
}

protected final void initHEPORTH(String s) {
if (!s.trim().isEmpty()) {
HEPORTH = Byte.parseByte(s);
} else {
HEPORTH = Byte.MIN_VALUE;
}
}

protected final void initHEPRKR(String s) {
if (!s.trim().isEmpty()) {
HEPRKR = Byte.parseByte(s);
} else {
HEPRKR = Byte.MIN_VALUE;
}
}

protected final void initHEPRKRY(String s) {
if (!s.trim().isEmpty()) {
HEPRKRY = Short.parseShort(s);
} else {
HEPRKRY = Short.MIN_VALUE;
}
}

protected final void initHEPSUR(String s) {
if (!s.trim().isEmpty()) {
HEPSUR = Byte.parseByte(s);
} else {
HEPSUR = Byte.MIN_VALUE;
}
}

protected final void initHEPSY95(String s) {
if (!s.trim().isEmpty()) {
HEPSY95 = Byte.parseByte(s);
} else {
HEPSY95 = Byte.MIN_VALUE;
}
}

protected final void initHEPSYA(String s) {
if (!s.trim().isEmpty()) {
HEPSYA = Byte.parseByte(s);
} else {
HEPSYA = Byte.MIN_VALUE;
}
}

protected final void initHEPSYAN(String s) {
if (!s.trim().isEmpty()) {
HEPSYAN = Byte.parseByte(s);
} else {
HEPSYAN = Byte.MIN_VALUE;
}
}

protected final void initHEPSYB(String s) {
if (!s.trim().isEmpty()) {
HEPSYB = Byte.parseByte(s);
} else {
HEPSYB = Byte.MIN_VALUE;
}
}

protected final void initHEPSYDE(String s) {
if (!s.trim().isEmpty()) {
HEPSYDE = Byte.parseByte(s);
} else {
HEPSYDE = Byte.MIN_VALUE;
}
}

protected final void initHEPSYE(String s) {
if (!s.trim().isEmpty()) {
HEPSYE = Byte.parseByte(s);
} else {
HEPSYE = Byte.MIN_VALUE;
}
}

protected final void initHEPSYEM(String s) {
if (!s.trim().isEmpty()) {
HEPSYEM = Byte.parseByte(s);
} else {
HEPSYEM = Byte.MIN_VALUE;
}
}

protected final void initHEPSYHA(String s) {
if (!s.trim().isEmpty()) {
HEPSYHA = Byte.parseByte(s);
} else {
HEPSYHA = Byte.MIN_VALUE;
}
}

protected final void initHEPSYMA(String s) {
if (!s.trim().isEmpty()) {
HEPSYMA = Byte.parseByte(s);
} else {
HEPSYMA = Byte.MIN_VALUE;
}
}

protected final void initHEPSYMO(String s) {
if (!s.trim().isEmpty()) {
HEPSYMO = Byte.parseByte(s);
} else {
HEPSYMO = Byte.MIN_VALUE;
}
}

protected final void initHEPSYPS(String s) {
if (!s.trim().isEmpty()) {
HEPSYPS = Byte.parseByte(s);
} else {
HEPSYPS = Byte.MIN_VALUE;
}
}

protected final void initHEPSYSC(String s) {
if (!s.trim().isEmpty()) {
HEPSYSC = Byte.parseByte(s);
} else {
HEPSYSC = Byte.MIN_VALUE;
}
}

protected final void initHEROSMD(String s) {
if (!s.trim().isEmpty()) {
HEROSMD = Byte.parseByte(s);
} else {
HEROSMD = Byte.MIN_VALUE;
}
}

protected final void initHERPA(String s) {
if (!s.trim().isEmpty()) {
HERPA = Byte.parseByte(s);
} else {
HERPA = Byte.MIN_VALUE;
}
}

protected final void initHERPB(String s) {
if (!s.trim().isEmpty()) {
HERPB = Byte.parseByte(s);
} else {
HERPB = Byte.MIN_VALUE;
}
}

protected final void initHERPC(String s) {
if (!s.trim().isEmpty()) {
HERPC = Byte.parseByte(s);
} else {
HERPC = Byte.MIN_VALUE;
}
}

protected final void initHERPD(String s) {
if (!s.trim().isEmpty()) {
HERPD = Byte.parseByte(s);
} else {
HERPD = Byte.MIN_VALUE;
}
}

protected final void initHERPE(String s) {
if (!s.trim().isEmpty()) {
HERPE = Byte.parseByte(s);
} else {
HERPE = Byte.MIN_VALUE;
}
}

protected final void initHERPE1(String s) {
if (!s.trim().isEmpty()) {
HERPE1 = Byte.parseByte(s);
} else {
HERPE1 = Byte.MIN_VALUE;
}
}

protected final void initHERPF(String s) {
if (!s.trim().isEmpty()) {
HERPF = Byte.parseByte(s);
} else {
HERPF = Byte.MIN_VALUE;
}
}

protected final void initHERPG(String s) {
if (!s.trim().isEmpty()) {
HERPG = Byte.parseByte(s);
} else {
HERPG = Byte.MIN_VALUE;
}
}

protected final void initHERPH(String s) {
if (!s.trim().isEmpty()) {
HERPH = Byte.parseByte(s);
} else {
HERPH = Byte.MIN_VALUE;
}
}

protected final void initHERPI(String s) {
if (!s.trim().isEmpty()) {
HERPI = Byte.parseByte(s);
} else {
HERPI = Byte.MIN_VALUE;
}
}

protected final void initHERPJ(String s) {
if (!s.trim().isEmpty()) {
HERPJ = Byte.parseByte(s);
} else {
HERPJ = Byte.MIN_VALUE;
}
}

protected final void initHESKD(String s) {
if (!s.trim().isEmpty()) {
HESKD = Byte.parseByte(s);
} else {
HESKD = Byte.MIN_VALUE;
}
}

protected final void initHESKE(String s) {
if (!s.trim().isEmpty()) {
HESKE = Byte.parseByte(s);
} else {
HESKE = Byte.MIN_VALUE;
}
}

protected final void initHESKF(String s) {
if (!s.trim().isEmpty()) {
HESKF = Byte.parseByte(s);
} else {
HESKF = Byte.MIN_VALUE;
}
}

protected final void initHESLFCB(String s) {
if (!s.trim().isEmpty()) {
HESLFCB = Byte.parseByte(s);
} else {
HESLFCB = Byte.MIN_VALUE;
}
}

protected final void initHESLFCM(String s) {
if (!s.trim().isEmpty()) {
HESLFCM = Byte.parseByte(s);
} else {
HESLFCM = Byte.MIN_VALUE;
}
}

protected final void initHESLFCR(String s) {
if (!s.trim().isEmpty()) {
HESLFCR = Byte.parseByte(s);
} else {
HESLFCR = Byte.MIN_VALUE;
}
}

protected final void initHESLFCY(String s) {
if (!s.trim().isEmpty()) {
HESLFCY = Short.parseShort(s);
} else {
HESLFCY = Short.MIN_VALUE;
}
}

protected final void initHESLPA(String s) {
if (!s.trim().isEmpty()) {
HESLPA = Byte.parseByte(s);
} else {
HESLPA = Byte.MIN_VALUE;
}
}

protected final void initHESLPB(String s) {
if (!s.trim().isEmpty()) {
HESLPB = Byte.parseByte(s);
} else {
HESLPB = Byte.MIN_VALUE;
}
}

protected final void initHESLPD(String s) {
if (!s.trim().isEmpty()) {
HESLPD = Byte.parseByte(s);
} else {
HESLPD = Byte.MIN_VALUE;
}
}

protected final void initHESLPE(String s) {
if (!s.trim().isEmpty()) {
HESLPE = Double.parseDouble(s);
} else {
HESLPE = Double.NaN;
}
}

protected final void initHESLPF(String s) {
if (!s.trim().isEmpty()) {
HESLPF = Byte.parseByte(s);
} else {
HESLPF = Byte.MIN_VALUE;
}
}

protected final void initHESTOP(String s) {
if (!s.trim().isEmpty()) {
HESTOP = Byte.parseByte(s);
} else {
HESTOP = Byte.MIN_VALUE;
}
}

protected final void initHESUG(String s) {
if (!s.trim().isEmpty()) {
HESUG = Byte.parseByte(s);
} else {
HESUG = Byte.MIN_VALUE;
}
}

protected final void initHESUGA(String s) {
if (!s.trim().isEmpty()) {
HESUGA = Byte.parseByte(s);
} else {
HESUGA = Byte.MIN_VALUE;
}
}

protected final void initHETEMP(String s) {
if (!s.trim().isEmpty()) {
HETEMP = Byte.parseByte(s);
} else {
HETEMP = Byte.MIN_VALUE;
}
}

protected final void initHEWEE(String s) {
if (!s.trim().isEmpty()) {
HEWEE = Byte.parseByte(s);
} else {
HEWEE = Byte.MIN_VALUE;
}
}

protected final void initHEWEEA(String s) {
if (!s.trim().isEmpty()) {
HEWEEA = Byte.parseByte(s);
} else {
HEWEEA = Byte.MIN_VALUE;
}
}

protected final void initHEZICOV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEZICOV = false;
} else {
HEZICOV = true;
}
}
}

protected final void initHEZIM85(String s) {
if (!s.trim().isEmpty()) {
HEZIM85 = Byte.parseByte(s);
} else {
HEZIM85 = Byte.MIN_VALUE;
}
}

protected final void initHEZIM86(String s) {
if (!s.trim().isEmpty()) {
HEZIM86 = Byte.parseByte(s);
} else {
HEZIM86 = Byte.MIN_VALUE;
}
}

protected final void initHEZIMCH(String s) {
if (!s.trim().isEmpty()) {
HEZIMCH = Byte.parseByte(s);
} else {
HEZIMCH = Byte.MIN_VALUE;
}
}

protected final void initHEZIMFA(String s) {
if (!s.trim().isEmpty()) {
HEZIMFA = Byte.parseByte(s);
} else {
HEZIMFA = Byte.MIN_VALUE;
}
}

protected final void initHEZIMFR(String s) {
if (!s.trim().isEmpty()) {
HEZIMFR = Byte.parseByte(s);
} else {
HEZIMFR = Byte.MIN_VALUE;
}
}

protected final void initHEZIMLL(String s) {
if (!s.trim().isEmpty()) {
HEZIMLL = Byte.parseByte(s);
} else {
HEZIMLL = Byte.MIN_VALUE;
}
}

protected final void initHEZIMNHS(String s) {
if (!s.trim().isEmpty()) {
HEZIMNHS = Byte.parseByte(s);
} else {
HEZIMNHS = Byte.MIN_VALUE;
}
}

protected final void initHEZIMOT(String s) {
if (!s.trim().isEmpty()) {
HEZIMOT = Byte.parseByte(s);
} else {
HEZIMOT = Byte.MIN_VALUE;
}
}

protected final void initHEZIMSE(String s) {
if (!s.trim().isEmpty()) {
HEZIMSE = Byte.parseByte(s);
} else {
HEZIMSE = Byte.MIN_VALUE;
}
}

protected final void initHEZIMSS(String s) {
if (!s.trim().isEmpty()) {
HEZIMSS = Byte.parseByte(s);
} else {
HEZIMSS = Byte.MIN_VALUE;
}
}

protected final void initHEZINHS(String s) {
if (!s.trim().isEmpty()) {
HEZINHS = Byte.parseByte(s);
} else {
HEZINHS = Byte.MIN_VALUE;
}
}

protected final void initHEZIOT(String s) {
if (!s.trim().isEmpty()) {
HEZIOT = Byte.parseByte(s);
} else {
HEZIOT = Byte.MIN_VALUE;
}
}

protected final void initHEZISE(String s) {
if (!s.trim().isEmpty()) {
HEZISE = Byte.parseByte(s);
} else {
HEZISE = Byte.MIN_VALUE;
}
}

protected final void initHEZISS(String s) {
if (!s.trim().isEmpty()) {
HEZISS = Byte.parseByte(s);
} else {
HEZISS = Byte.MIN_VALUE;
}
}

protected final void initHGB(String s) {
if (!s.trim().isEmpty()) {
HGB = Double.parseDouble(s);
} else {
HGB = Double.NaN;
}
}

protected final void initHHAGE(String s) {
if (!s.trim().isEmpty()) {
HHAGE = Byte.parseByte(s);
} else {
HHAGE = Byte.MIN_VALUE;
}
}

protected final void initHINREL(String s) {
if (!s.trim().isEmpty()) {
HINREL = Byte.parseByte(s);
} else {
HINREL = Byte.MIN_VALUE;
}
}

protected final void initHIP1(String s) {
if (!s.trim().isEmpty()) {
HIP1 = Double.parseDouble(s);
} else {
HIP1 = Double.NaN;
}
}

protected final void initHIP2(String s) {
if (!s.trim().isEmpty()) {
HIP2 = Double.parseDouble(s);
} else {
HIP2 = Double.NaN;
}
}

protected final void initHIP3(String s) {
if (!s.trim().isEmpty()) {
HIP3 = Double.parseDouble(s);
} else {
HIP3 = Double.NaN;
}
}

protected final void initHIPOKB(String s) {
if (!s.trim().isEmpty()) {
HIPOKB = Byte.parseByte(s);
} else {
HIPOKB = Byte.MIN_VALUE;
}
}

protected final void initHIPVAL(String s) {
if (!s.trim().isEmpty()) {
HIPVAL = Double.parseDouble(s);
} else {
HIPVAL = Double.NaN;
}
}

protected final void initHJREL(String s) {
if (!s.trim().isEmpty()) {
HJREL = Byte.parseByte(s);
} else {
HJREL = Byte.MIN_VALUE;
}
}

protected final void initHOADP95(String s) {
if (!s.trim().isEmpty()) {
HOADP95 = Byte.parseByte(s);
} else {
HOADP95 = Byte.MIN_VALUE;
}
}

protected final void initHOADP96(String s) {
if (!s.trim().isEmpty()) {
HOADP96 = Byte.parseByte(s);
} else {
HOADP96 = Byte.MIN_VALUE;
}
}

protected final void initHOADPAD(String s) {
if (!s.trim().isEmpty()) {
HOADPAD = Byte.parseByte(s);
} else {
HOADPAD = Byte.MIN_VALUE;
}
}

protected final void initHOADPAL(String s) {
if (!s.trim().isEmpty()) {
HOADPAL = Byte.parseByte(s);
} else {
HOADPAL = Byte.MIN_VALUE;
}
}

protected final void initHOADPAP(String s) {
if (!s.trim().isEmpty()) {
HOADPAP = Byte.parseByte(s);
} else {
HOADPAP = Byte.MIN_VALUE;
}
}

protected final void initHOADPBM(String s) {
if (!s.trim().isEmpty()) {
HOADPBM = Byte.parseByte(s);
} else {
HOADPBM = Byte.MIN_VALUE;
}
}

protected final void initHOADPCL(String s) {
if (!s.trim().isEmpty()) {
HOADPCL = Byte.parseByte(s);
} else {
HOADPCL = Byte.MIN_VALUE;
}
}

protected final void initHOADPHR(String s) {
if (!s.trim().isEmpty()) {
HOADPHR = Byte.parseByte(s);
} else {
HOADPHR = Byte.MIN_VALUE;
}
}

protected final void initHOADPKM(String s) {
if (!s.trim().isEmpty()) {
HOADPKM = Byte.parseByte(s);
} else {
HOADPKM = Byte.MIN_VALUE;
}
}

protected final void initHOADPLI(String s) {
if (!s.trim().isEmpty()) {
HOADPLI = Byte.parseByte(s);
} else {
HOADPLI = Byte.MIN_VALUE;
}
}

protected final void initHOADPRS(String s) {
if (!s.trim().isEmpty()) {
HOADPRS = Byte.parseByte(s);
} else {
HOADPRS = Byte.MIN_VALUE;
}
}

protected final void initHOADPWD(String s) {
if (!s.trim().isEmpty()) {
HOADPWD = Byte.parseByte(s);
} else {
HOADPWD = Byte.MIN_VALUE;
}
}

protected final void initHOAIADHS(String s) {
if (!s.trim().isEmpty()) {
HOAIADHS = Byte.parseByte(s);
} else {
HOAIADHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIADOT(String s) {
if (!s.trim().isEmpty()) {
HOAIADOT = Byte.parseByte(s);
} else {
HOAIADOT = Byte.MIN_VALUE;
}
}

protected final void initHOAIADSS(String s) {
if (!s.trim().isEmpty()) {
HOAIADSS = Byte.parseByte(s);
} else {
HOAIADSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIADYS(String s) {
if (!s.trim().isEmpty()) {
HOAIADYS = Byte.parseByte(s);
} else {
HOAIADYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIALHS(String s) {
if (!s.trim().isEmpty()) {
HOAIALHS = Byte.parseByte(s);
} else {
HOAIALHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIALOT(String s) {
if (!s.trim().isEmpty()) {
HOAIALOT = Byte.parseByte(s);
} else {
HOAIALOT = Byte.MIN_VALUE;
}
}

protected final void initHOAIALSS(String s) {
if (!s.trim().isEmpty()) {
HOAIALSS = Byte.parseByte(s);
} else {
HOAIALSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIALYS(String s) {
if (!s.trim().isEmpty()) {
HOAIALYS = Byte.parseByte(s);
} else {
HOAIALYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIAPHS(String s) {
if (!s.trim().isEmpty()) {
HOAIAPHS = Byte.parseByte(s);
} else {
HOAIAPHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIAPOT(String s) {
if (!s.trim().isEmpty()) {
HOAIAPOT = Byte.parseByte(s);
} else {
HOAIAPOT = Byte.MIN_VALUE;
}
}

protected final void initHOAIAPSS(String s) {
if (!s.trim().isEmpty()) {
HOAIAPSS = Byte.parseByte(s);
} else {
HOAIAPSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIAPYS(String s) {
if (!s.trim().isEmpty()) {
HOAIAPYS = Byte.parseByte(s);
} else {
HOAIAPYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIBMHS(String s) {
if (!s.trim().isEmpty()) {
HOAIBMHS = Byte.parseByte(s);
} else {
HOAIBMHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIBMOT(String s) {
if (!s.trim().isEmpty()) {
HOAIBMOT = Byte.parseByte(s);
} else {
HOAIBMOT = Byte.MIN_VALUE;
}
}

protected final void initHOAIBMSS(String s) {
if (!s.trim().isEmpty()) {
HOAIBMSS = Byte.parseByte(s);
} else {
HOAIBMSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIBMYS(String s) {
if (!s.trim().isEmpty()) {
HOAIBMYS = Byte.parseByte(s);
} else {
HOAIBMYS = Byte.MIN_VALUE;
}
}

protected final void initHOAICLHS(String s) {
if (!s.trim().isEmpty()) {
HOAICLHS = Byte.parseByte(s);
} else {
HOAICLHS = Byte.MIN_VALUE;
}
}

protected final void initHOAICLOT(String s) {
if (!s.trim().isEmpty()) {
HOAICLOT = Byte.parseByte(s);
} else {
HOAICLOT = Byte.MIN_VALUE;
}
}

protected final void initHOAICLSS(String s) {
if (!s.trim().isEmpty()) {
HOAICLSS = Byte.parseByte(s);
} else {
HOAICLSS = Byte.MIN_VALUE;
}
}

protected final void initHOAICLYS(String s) {
if (!s.trim().isEmpty()) {
HOAICLYS = Byte.parseByte(s);
} else {
HOAICLYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIHRHS(String s) {
if (!s.trim().isEmpty()) {
HOAIHRHS = Byte.parseByte(s);
} else {
HOAIHRHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIHROT(String s) {
if (!s.trim().isEmpty()) {
HOAIHROT = Byte.parseByte(s);
} else {
HOAIHROT = Byte.MIN_VALUE;
}
}

protected final void initHOAIHRSS(String s) {
if (!s.trim().isEmpty()) {
HOAIHRSS = Byte.parseByte(s);
} else {
HOAIHRSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIHRYS(String s) {
if (!s.trim().isEmpty()) {
HOAIHRYS = Byte.parseByte(s);
} else {
HOAIHRYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIKMHS(String s) {
if (!s.trim().isEmpty()) {
HOAIKMHS = Byte.parseByte(s);
} else {
HOAIKMHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIKMOT(String s) {
if (!s.trim().isEmpty()) {
HOAIKMOT = Byte.parseByte(s);
} else {
HOAIKMOT = Byte.MIN_VALUE;
}
}

protected final void initHOAIKMSS(String s) {
if (!s.trim().isEmpty()) {
HOAIKMSS = Byte.parseByte(s);
} else {
HOAIKMSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIKMYS(String s) {
if (!s.trim().isEmpty()) {
HOAIKMYS = Byte.parseByte(s);
} else {
HOAIKMYS = Byte.MIN_VALUE;
}
}

protected final void initHOAILIHS(String s) {
if (!s.trim().isEmpty()) {
HOAILIHS = Byte.parseByte(s);
} else {
HOAILIHS = Byte.MIN_VALUE;
}
}

protected final void initHOAILIOT(String s) {
if (!s.trim().isEmpty()) {
HOAILIOT = Byte.parseByte(s);
} else {
HOAILIOT = Byte.MIN_VALUE;
}
}

protected final void initHOAILISS(String s) {
if (!s.trim().isEmpty()) {
HOAILISS = Byte.parseByte(s);
} else {
HOAILISS = Byte.MIN_VALUE;
}
}

protected final void initHOAILIYS(String s) {
if (!s.trim().isEmpty()) {
HOAILIYS = Byte.parseByte(s);
} else {
HOAILIYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIRSHS(String s) {
if (!s.trim().isEmpty()) {
HOAIRSHS = Byte.parseByte(s);
} else {
HOAIRSHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIRSOT(String s) {
if (!s.trim().isEmpty()) {
HOAIRSOT = Byte.parseByte(s);
} else {
HOAIRSOT = Byte.MIN_VALUE;
}
}

protected final void initHOAIRSSS(String s) {
if (!s.trim().isEmpty()) {
HOAIRSSS = Byte.parseByte(s);
} else {
HOAIRSSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIRSYS(String s) {
if (!s.trim().isEmpty()) {
HOAIRSYS = Byte.parseByte(s);
} else {
HOAIRSYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIWDHS(String s) {
if (!s.trim().isEmpty()) {
HOAIWDHS = Byte.parseByte(s);
} else {
HOAIWDHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIWDOT(String s) {
if (!s.trim().isEmpty()) {
HOAIWDOT = Byte.parseByte(s);
} else {
HOAIWDOT = Byte.MIN_VALUE;
}
}

protected final void initHOAIWDSS(String s) {
if (!s.trim().isEmpty()) {
HOAIWDSS = Byte.parseByte(s);
} else {
HOAIWDSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIWDYS(String s) {
if (!s.trim().isEmpty()) {
HOAIWDYS = Byte.parseByte(s);
} else {
HOAIWDYS = Byte.MIN_VALUE;
}
}

protected final void initHOALF1(String s) {
if (!s.trim().isEmpty()) {
HOALF1 = Byte.parseByte(s);
} else {
HOALF1 = Byte.MIN_VALUE;
}
}

protected final void initHOALF1L(String s) {
if (!s.trim().isEmpty()) {
HOALF1L = Short.parseShort(s);
} else {
HOALF1L = Short.MIN_VALUE;
}
}

protected final void initHOALF1R(String s) {
if (!s.trim().isEmpty()) {
HOALF1R = Byte.parseByte(s);
} else {
HOALF1R = Byte.MIN_VALUE;
}
}

protected final void initHOALF1T(String s) {
if (!s.trim().isEmpty()) {
HOALF1T = Byte.parseByte(s);
} else {
HOALF1T = Byte.MIN_VALUE;
}
}

protected final void initHOALF1U(String s) {
if (!s.trim().isEmpty()) {
HOALF1U = Short.parseShort(s);
} else {
HOALF1U = Short.MIN_VALUE;
}
}

protected final void initHOALF2(String s) {
if (!s.trim().isEmpty()) {
HOALF2 = Byte.parseByte(s);
} else {
HOALF2 = Byte.MIN_VALUE;
}
}

protected final void initHOALF2L(String s) {
if (!s.trim().isEmpty()) {
HOALF2L = Short.parseShort(s);
} else {
HOALF2L = Short.MIN_VALUE;
}
}

protected final void initHOALF2R(String s) {
if (!s.trim().isEmpty()) {
HOALF2R = Byte.parseByte(s);
} else {
HOALF2R = Byte.MIN_VALUE;
}
}

protected final void initHOALF2T(String s) {
if (!s.trim().isEmpty()) {
HOALF2T = Byte.parseByte(s);
} else {
HOALF2T = Byte.MIN_VALUE;
}
}

protected final void initHOALF2U(String s) {
if (!s.trim().isEmpty()) {
HOALF2U = Short.parseShort(s);
} else {
HOALF2U = Short.MIN_VALUE;
}
}

protected final void initHOALFM1(String s) {
if (!s.trim().isEmpty()) {
HOALFM1 = Short.parseShort(s);
} else {
HOALFM1 = Short.MIN_VALUE;
}
}

protected final void initHOALFM2(String s) {
if (!s.trim().isEmpty()) {
HOALFM2 = Short.parseShort(s);
} else {
HOALFM2 = Short.MIN_VALUE;
}
}

protected final void initHOALI1(String s) {
if (!s.trim().isEmpty()) {
HOALI1 = Byte.parseByte(s);
} else {
HOALI1 = Byte.MIN_VALUE;
}
}

protected final void initHOALI2(String s) {
if (!s.trim().isEmpty()) {
HOALI2 = Byte.parseByte(s);
} else {
HOALI2 = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FE(String s) {
if (!s.trim().isEmpty()) {
HOBA2FE = Byte.parseByte(s);
} else {
HOBA2FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FL(String s) {
if (!s.trim().isEmpty()) {
HOBA2FL = Byte.parseByte(s);
} else {
HOBA2FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FR(String s) {
if (!s.trim().isEmpty()) {
HOBA2FR = Byte.parseByte(s);
} else {
HOBA2FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FU(String s) {
if (!s.trim().isEmpty()) {
HOBA2FU = Byte.parseByte(s);
} else {
HOBA2FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA2ME(String s) {
if (!s.trim().isEmpty()) {
HOBA2ME = Byte.parseByte(s);
} else {
HOBA2ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA2ML(String s) {
if (!s.trim().isEmpty()) {
HOBA2ML = Byte.parseByte(s);
} else {
HOBA2ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA2MR(String s) {
if (!s.trim().isEmpty()) {
HOBA2MR = Byte.parseByte(s);
} else {
HOBA2MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2MU(String s) {
if (!s.trim().isEmpty()) {
HOBA2MU = Byte.parseByte(s);
} else {
HOBA2MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA2OE(String s) {
if (!s.trim().isEmpty()) {
HOBA2OE = Byte.parseByte(s);
} else {
HOBA2OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2OL(String s) {
if (!s.trim().isEmpty()) {
HOBA2OL = Short.parseShort(s);
} else {
HOBA2OL = Short.MIN_VALUE;
}
}

protected final void initHOBA2OR(String s) {
if (!s.trim().isEmpty()) {
HOBA2OR = Byte.parseByte(s);
} else {
HOBA2OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2OU(String s) {
if (!s.trim().isEmpty()) {
HOBA2OU = Short.parseShort(s);
} else {
HOBA2OU = Short.MIN_VALUE;
}
}

protected final void initHOBA2WE(String s) {
if (!s.trim().isEmpty()) {
HOBA2WE = Byte.parseByte(s);
} else {
HOBA2WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2WL(String s) {
if (!s.trim().isEmpty()) {
HOBA2WL = Byte.parseByte(s);
} else {
HOBA2WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA2WR(String s) {
if (!s.trim().isEmpty()) {
HOBA2WR = Byte.parseByte(s);
} else {
HOBA2WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2WU(String s) {
if (!s.trim().isEmpty()) {
HOBA2WU = Byte.parseByte(s);
} else {
HOBA2WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YE(String s) {
if (!s.trim().isEmpty()) {
HOBA2YE = Byte.parseByte(s);
} else {
HOBA2YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YL(String s) {
if (!s.trim().isEmpty()) {
HOBA2YL = Byte.parseByte(s);
} else {
HOBA2YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YR(String s) {
if (!s.trim().isEmpty()) {
HOBA2YR = Byte.parseByte(s);
} else {
HOBA2YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YU(String s) {
if (!s.trim().isEmpty()) {
HOBA2YU = Byte.parseByte(s);
} else {
HOBA2YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FE(String s) {
if (!s.trim().isEmpty()) {
HOBA3FE = Byte.parseByte(s);
} else {
HOBA3FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FL(String s) {
if (!s.trim().isEmpty()) {
HOBA3FL = Byte.parseByte(s);
} else {
HOBA3FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FR(String s) {
if (!s.trim().isEmpty()) {
HOBA3FR = Byte.parseByte(s);
} else {
HOBA3FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FU(String s) {
if (!s.trim().isEmpty()) {
HOBA3FU = Byte.parseByte(s);
} else {
HOBA3FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA3ME(String s) {
if (!s.trim().isEmpty()) {
HOBA3ME = Byte.parseByte(s);
} else {
HOBA3ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA3ML(String s) {
if (!s.trim().isEmpty()) {
HOBA3ML = Short.parseShort(s);
} else {
HOBA3ML = Short.MIN_VALUE;
}
}

protected final void initHOBA3MR(String s) {
if (!s.trim().isEmpty()) {
HOBA3MR = Byte.parseByte(s);
} else {
HOBA3MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3MU(String s) {
if (!s.trim().isEmpty()) {
HOBA3MU = Short.parseShort(s);
} else {
HOBA3MU = Short.MIN_VALUE;
}
}

protected final void initHOBA3OE(String s) {
if (!s.trim().isEmpty()) {
HOBA3OE = Byte.parseByte(s);
} else {
HOBA3OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3OL(String s) {
if (!s.trim().isEmpty()) {
HOBA3OL = Short.parseShort(s);
} else {
HOBA3OL = Short.MIN_VALUE;
}
}

protected final void initHOBA3OR(String s) {
if (!s.trim().isEmpty()) {
HOBA3OR = Byte.parseByte(s);
} else {
HOBA3OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3OU(String s) {
if (!s.trim().isEmpty()) {
HOBA3OU = Short.parseShort(s);
} else {
HOBA3OU = Short.MIN_VALUE;
}
}

protected final void initHOBA3WE(String s) {
if (!s.trim().isEmpty()) {
HOBA3WE = Byte.parseByte(s);
} else {
HOBA3WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3WL(String s) {
if (!s.trim().isEmpty()) {
HOBA3WL = Byte.parseByte(s);
} else {
HOBA3WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA3WR(String s) {
if (!s.trim().isEmpty()) {
HOBA3WR = Byte.parseByte(s);
} else {
HOBA3WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3WU(String s) {
if (!s.trim().isEmpty()) {
HOBA3WU = Short.parseShort(s);
} else {
HOBA3WU = Short.MIN_VALUE;
}
}

protected final void initHOBA3YE(String s) {
if (!s.trim().isEmpty()) {
HOBA3YE = Byte.parseByte(s);
} else {
HOBA3YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3YL(String s) {
if (!s.trim().isEmpty()) {
HOBA3YL = Byte.parseByte(s);
} else {
HOBA3YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA3YR(String s) {
if (!s.trim().isEmpty()) {
HOBA3YR = Byte.parseByte(s);
} else {
HOBA3YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3YU(String s) {
if (!s.trim().isEmpty()) {
HOBA3YU = Byte.parseByte(s);
} else {
HOBA3YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FE(String s) {
if (!s.trim().isEmpty()) {
HOBA4FE = Byte.parseByte(s);
} else {
HOBA4FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FL(String s) {
if (!s.trim().isEmpty()) {
HOBA4FL = Byte.parseByte(s);
} else {
HOBA4FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FR(String s) {
if (!s.trim().isEmpty()) {
HOBA4FR = Byte.parseByte(s);
} else {
HOBA4FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FU(String s) {
if (!s.trim().isEmpty()) {
HOBA4FU = Byte.parseByte(s);
} else {
HOBA4FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA4ME(String s) {
if (!s.trim().isEmpty()) {
HOBA4ME = Byte.parseByte(s);
} else {
HOBA4ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA4ML(String s) {
if (!s.trim().isEmpty()) {
HOBA4ML = Short.parseShort(s);
} else {
HOBA4ML = Short.MIN_VALUE;
}
}

protected final void initHOBA4MR(String s) {
if (!s.trim().isEmpty()) {
HOBA4MR = Byte.parseByte(s);
} else {
HOBA4MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4MU(String s) {
if (!s.trim().isEmpty()) {
HOBA4MU = Short.parseShort(s);
} else {
HOBA4MU = Short.MIN_VALUE;
}
}

protected final void initHOBA4OE(String s) {
if (!s.trim().isEmpty()) {
HOBA4OE = Byte.parseByte(s);
} else {
HOBA4OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4OL(String s) {
if (!s.trim().isEmpty()) {
HOBA4OL = Short.parseShort(s);
} else {
HOBA4OL = Short.MIN_VALUE;
}
}

protected final void initHOBA4OR(String s) {
if (!s.trim().isEmpty()) {
HOBA4OR = Byte.parseByte(s);
} else {
HOBA4OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4OU(String s) {
if (!s.trim().isEmpty()) {
HOBA4OU = Short.parseShort(s);
} else {
HOBA4OU = Short.MIN_VALUE;
}
}

protected final void initHOBA4WE(String s) {
if (!s.trim().isEmpty()) {
HOBA4WE = Byte.parseByte(s);
} else {
HOBA4WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4WL(String s) {
if (!s.trim().isEmpty()) {
HOBA4WL = Short.parseShort(s);
} else {
HOBA4WL = Short.MIN_VALUE;
}
}

protected final void initHOBA4WR(String s) {
if (!s.trim().isEmpty()) {
HOBA4WR = Byte.parseByte(s);
} else {
HOBA4WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4WU(String s) {
if (!s.trim().isEmpty()) {
HOBA4WU = Short.parseShort(s);
} else {
HOBA4WU = Short.MIN_VALUE;
}
}

protected final void initHOBA4YE(String s) {
if (!s.trim().isEmpty()) {
HOBA4YE = Byte.parseByte(s);
} else {
HOBA4YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4YL(String s) {
if (!s.trim().isEmpty()) {
HOBA4YL = Byte.parseByte(s);
} else {
HOBA4YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA4YR(String s) {
if (!s.trim().isEmpty()) {
HOBA4YR = Byte.parseByte(s);
} else {
HOBA4YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4YU(String s) {
if (!s.trim().isEmpty()) {
HOBA4YU = Byte.parseByte(s);
} else {
HOBA4YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FE(String s) {
if (!s.trim().isEmpty()) {
HOBA5FE = Byte.parseByte(s);
} else {
HOBA5FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FL(String s) {
if (!s.trim().isEmpty()) {
HOBA5FL = Byte.parseByte(s);
} else {
HOBA5FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FR(String s) {
if (!s.trim().isEmpty()) {
HOBA5FR = Byte.parseByte(s);
} else {
HOBA5FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FU(String s) {
if (!s.trim().isEmpty()) {
HOBA5FU = Byte.parseByte(s);
} else {
HOBA5FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5ME(String s) {
if (!s.trim().isEmpty()) {
HOBA5ME = Byte.parseByte(s);
} else {
HOBA5ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA5ML(String s) {
if (!s.trim().isEmpty()) {
HOBA5ML = Short.parseShort(s);
} else {
HOBA5ML = Short.MIN_VALUE;
}
}

protected final void initHOBA5MR(String s) {
if (!s.trim().isEmpty()) {
HOBA5MR = Byte.parseByte(s);
} else {
HOBA5MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5MU(String s) {
if (!s.trim().isEmpty()) {
HOBA5MU = Short.parseShort(s);
} else {
HOBA5MU = Short.MIN_VALUE;
}
}

protected final void initHOBA5OE(String s) {
if (!s.trim().isEmpty()) {
HOBA5OE = Byte.parseByte(s);
} else {
HOBA5OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5OL(String s) {
if (!s.trim().isEmpty()) {
HOBA5OL = Byte.parseByte(s);
} else {
HOBA5OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5OR(String s) {
if (!s.trim().isEmpty()) {
HOBA5OR = Byte.parseByte(s);
} else {
HOBA5OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5OU(String s) {
if (!s.trim().isEmpty()) {
HOBA5OU = Byte.parseByte(s);
} else {
HOBA5OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WE(String s) {
if (!s.trim().isEmpty()) {
HOBA5WE = Byte.parseByte(s);
} else {
HOBA5WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WL(String s) {
if (!s.trim().isEmpty()) {
HOBA5WL = Byte.parseByte(s);
} else {
HOBA5WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WR(String s) {
if (!s.trim().isEmpty()) {
HOBA5WR = Byte.parseByte(s);
} else {
HOBA5WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WU(String s) {
if (!s.trim().isEmpty()) {
HOBA5WU = Byte.parseByte(s);
} else {
HOBA5WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YE(String s) {
if (!s.trim().isEmpty()) {
HOBA5YE = Byte.parseByte(s);
} else {
HOBA5YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YL(String s) {
if (!s.trim().isEmpty()) {
HOBA5YL = Byte.parseByte(s);
} else {
HOBA5YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YR(String s) {
if (!s.trim().isEmpty()) {
HOBA5YR = Byte.parseByte(s);
} else {
HOBA5YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YU(String s) {
if (!s.trim().isEmpty()) {
HOBA5YU = Byte.parseByte(s);
} else {
HOBA5YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FE(String s) {
if (!s.trim().isEmpty()) {
HOBA6FE = Byte.parseByte(s);
} else {
HOBA6FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FL(String s) {
if (!s.trim().isEmpty()) {
HOBA6FL = Byte.parseByte(s);
} else {
HOBA6FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FR(String s) {
if (!s.trim().isEmpty()) {
HOBA6FR = Byte.parseByte(s);
} else {
HOBA6FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FU(String s) {
if (!s.trim().isEmpty()) {
HOBA6FU = Byte.parseByte(s);
} else {
HOBA6FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6ME(String s) {
if (!s.trim().isEmpty()) {
HOBA6ME = Byte.parseByte(s);
} else {
HOBA6ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA6ML(String s) {
if (!s.trim().isEmpty()) {
HOBA6ML = Byte.parseByte(s);
} else {
HOBA6ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA6MR(String s) {
if (!s.trim().isEmpty()) {
HOBA6MR = Byte.parseByte(s);
} else {
HOBA6MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6MU(String s) {
if (!s.trim().isEmpty()) {
HOBA6MU = Byte.parseByte(s);
} else {
HOBA6MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OE(String s) {
if (!s.trim().isEmpty()) {
HOBA6OE = Byte.parseByte(s);
} else {
HOBA6OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OL(String s) {
if (!s.trim().isEmpty()) {
HOBA6OL = Byte.parseByte(s);
} else {
HOBA6OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OR(String s) {
if (!s.trim().isEmpty()) {
HOBA6OR = Byte.parseByte(s);
} else {
HOBA6OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OU(String s) {
if (!s.trim().isEmpty()) {
HOBA6OU = Byte.parseByte(s);
} else {
HOBA6OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WE(String s) {
if (!s.trim().isEmpty()) {
HOBA6WE = Byte.parseByte(s);
} else {
HOBA6WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WL(String s) {
if (!s.trim().isEmpty()) {
HOBA6WL = Byte.parseByte(s);
} else {
HOBA6WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WR(String s) {
if (!s.trim().isEmpty()) {
HOBA6WR = Byte.parseByte(s);
} else {
HOBA6WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WU(String s) {
if (!s.trim().isEmpty()) {
HOBA6WU = Byte.parseByte(s);
} else {
HOBA6WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YE(String s) {
if (!s.trim().isEmpty()) {
HOBA6YE = Byte.parseByte(s);
} else {
HOBA6YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YL(String s) {
if (!s.trim().isEmpty()) {
HOBA6YL = Byte.parseByte(s);
} else {
HOBA6YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YR(String s) {
if (!s.trim().isEmpty()) {
HOBA6YR = Byte.parseByte(s);
} else {
HOBA6YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YU(String s) {
if (!s.trim().isEmpty()) {
HOBA6YU = Byte.parseByte(s);
} else {
HOBA6YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FE(String s) {
if (!s.trim().isEmpty()) {
HOBA7FE = Byte.parseByte(s);
} else {
HOBA7FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FL(String s) {
if (!s.trim().isEmpty()) {
HOBA7FL = Byte.parseByte(s);
} else {
HOBA7FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FR(String s) {
if (!s.trim().isEmpty()) {
HOBA7FR = Byte.parseByte(s);
} else {
HOBA7FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FU(String s) {
if (!s.trim().isEmpty()) {
HOBA7FU = Byte.parseByte(s);
} else {
HOBA7FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7ME(String s) {
if (!s.trim().isEmpty()) {
HOBA7ME = Byte.parseByte(s);
} else {
HOBA7ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA7ML(String s) {
if (!s.trim().isEmpty()) {
HOBA7ML = Byte.parseByte(s);
} else {
HOBA7ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA7MR(String s) {
if (!s.trim().isEmpty()) {
HOBA7MR = Byte.parseByte(s);
} else {
HOBA7MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7MU(String s) {
if (!s.trim().isEmpty()) {
HOBA7MU = Byte.parseByte(s);
} else {
HOBA7MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OE(String s) {
if (!s.trim().isEmpty()) {
HOBA7OE = Byte.parseByte(s);
} else {
HOBA7OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OL(String s) {
if (!s.trim().isEmpty()) {
HOBA7OL = Byte.parseByte(s);
} else {
HOBA7OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OR(String s) {
if (!s.trim().isEmpty()) {
HOBA7OR = Byte.parseByte(s);
} else {
HOBA7OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OU(String s) {
if (!s.trim().isEmpty()) {
HOBA7OU = Byte.parseByte(s);
} else {
HOBA7OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WE(String s) {
if (!s.trim().isEmpty()) {
HOBA7WE = Byte.parseByte(s);
} else {
HOBA7WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WL(String s) {
if (!s.trim().isEmpty()) {
HOBA7WL = Byte.parseByte(s);
} else {
HOBA7WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WR(String s) {
if (!s.trim().isEmpty()) {
HOBA7WR = Byte.parseByte(s);
} else {
HOBA7WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WU(String s) {
if (!s.trim().isEmpty()) {
HOBA7WU = Byte.parseByte(s);
} else {
HOBA7WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YE(String s) {
if (!s.trim().isEmpty()) {
HOBA7YE = Byte.parseByte(s);
} else {
HOBA7YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YL(String s) {
if (!s.trim().isEmpty()) {
HOBA7YL = Byte.parseByte(s);
} else {
HOBA7YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YR(String s) {
if (!s.trim().isEmpty()) {
HOBA7YR = Byte.parseByte(s);
} else {
HOBA7YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YU(String s) {
if (!s.trim().isEmpty()) {
HOBA7YU = Byte.parseByte(s);
} else {
HOBA7YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FE(String s) {
if (!s.trim().isEmpty()) {
HOBA8FE = Byte.parseByte(s);
} else {
HOBA8FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FL(String s) {
if (!s.trim().isEmpty()) {
HOBA8FL = Byte.parseByte(s);
} else {
HOBA8FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FR(String s) {
if (!s.trim().isEmpty()) {
HOBA8FR = Byte.parseByte(s);
} else {
HOBA8FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FU(String s) {
if (!s.trim().isEmpty()) {
HOBA8FU = Byte.parseByte(s);
} else {
HOBA8FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8ME(String s) {
if (!s.trim().isEmpty()) {
HOBA8ME = Byte.parseByte(s);
} else {
HOBA8ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA8ML(String s) {
if (!s.trim().isEmpty()) {
HOBA8ML = Byte.parseByte(s);
} else {
HOBA8ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA8MR(String s) {
if (!s.trim().isEmpty()) {
HOBA8MR = Byte.parseByte(s);
} else {
HOBA8MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8MU(String s) {
if (!s.trim().isEmpty()) {
HOBA8MU = Byte.parseByte(s);
} else {
HOBA8MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OE(String s) {
if (!s.trim().isEmpty()) {
HOBA8OE = Byte.parseByte(s);
} else {
HOBA8OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OL(String s) {
if (!s.trim().isEmpty()) {
HOBA8OL = Byte.parseByte(s);
} else {
HOBA8OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OR(String s) {
if (!s.trim().isEmpty()) {
HOBA8OR = Byte.parseByte(s);
} else {
HOBA8OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OU(String s) {
if (!s.trim().isEmpty()) {
HOBA8OU = Byte.parseByte(s);
} else {
HOBA8OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WE(String s) {
if (!s.trim().isEmpty()) {
HOBA8WE = Byte.parseByte(s);
} else {
HOBA8WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WL(String s) {
if (!s.trim().isEmpty()) {
HOBA8WL = Byte.parseByte(s);
} else {
HOBA8WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WR(String s) {
if (!s.trim().isEmpty()) {
HOBA8WR = Byte.parseByte(s);
} else {
HOBA8WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WU(String s) {
if (!s.trim().isEmpty()) {
HOBA8WU = Byte.parseByte(s);
} else {
HOBA8WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YE(String s) {
if (!s.trim().isEmpty()) {
HOBA8YE = Byte.parseByte(s);
} else {
HOBA8YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YL(String s) {
if (!s.trim().isEmpty()) {
HOBA8YL = Byte.parseByte(s);
} else {
HOBA8YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YR(String s) {
if (!s.trim().isEmpty()) {
HOBA8YR = Byte.parseByte(s);
} else {
HOBA8YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YU(String s) {
if (!s.trim().isEmpty()) {
HOBA8YU = Byte.parseByte(s);
} else {
HOBA8YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FE(String s) {
if (!s.trim().isEmpty()) {
HOBA9FE = Byte.parseByte(s);
} else {
HOBA9FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FL(String s) {
if (!s.trim().isEmpty()) {
HOBA9FL = Byte.parseByte(s);
} else {
HOBA9FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FR(String s) {
if (!s.trim().isEmpty()) {
HOBA9FR = Byte.parseByte(s);
} else {
HOBA9FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FU(String s) {
if (!s.trim().isEmpty()) {
HOBA9FU = Byte.parseByte(s);
} else {
HOBA9FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9ME(String s) {
if (!s.trim().isEmpty()) {
HOBA9ME = Byte.parseByte(s);
} else {
HOBA9ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA9ML(String s) {
if (!s.trim().isEmpty()) {
HOBA9ML = Byte.parseByte(s);
} else {
HOBA9ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA9MR(String s) {
if (!s.trim().isEmpty()) {
HOBA9MR = Byte.parseByte(s);
} else {
HOBA9MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9MU(String s) {
if (!s.trim().isEmpty()) {
HOBA9MU = Byte.parseByte(s);
} else {
HOBA9MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OE(String s) {
if (!s.trim().isEmpty()) {
HOBA9OE = Byte.parseByte(s);
} else {
HOBA9OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OL(String s) {
if (!s.trim().isEmpty()) {
HOBA9OL = Byte.parseByte(s);
} else {
HOBA9OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OR(String s) {
if (!s.trim().isEmpty()) {
HOBA9OR = Byte.parseByte(s);
} else {
HOBA9OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OU(String s) {
if (!s.trim().isEmpty()) {
HOBA9OU = Byte.parseByte(s);
} else {
HOBA9OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WE(String s) {
if (!s.trim().isEmpty()) {
HOBA9WE = Byte.parseByte(s);
} else {
HOBA9WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WL(String s) {
if (!s.trim().isEmpty()) {
HOBA9WL = Byte.parseByte(s);
} else {
HOBA9WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WR(String s) {
if (!s.trim().isEmpty()) {
HOBA9WR = Byte.parseByte(s);
} else {
HOBA9WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WU(String s) {
if (!s.trim().isEmpty()) {
HOBA9WU = Byte.parseByte(s);
} else {
HOBA9WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YE(String s) {
if (!s.trim().isEmpty()) {
HOBA9YE = Byte.parseByte(s);
} else {
HOBA9YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YL(String s) {
if (!s.trim().isEmpty()) {
HOBA9YL = Byte.parseByte(s);
} else {
HOBA9YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YR(String s) {
if (!s.trim().isEmpty()) {
HOBA9YR = Byte.parseByte(s);
} else {
HOBA9YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YU(String s) {
if (!s.trim().isEmpty()) {
HOBA9YU = Byte.parseByte(s);
} else {
HOBA9YU = Byte.MIN_VALUE;
}
}

protected final void initHOBAFE(String s) {
if (!s.trim().isEmpty()) {
HOBAFE = Byte.parseByte(s);
} else {
HOBAFE = Byte.MIN_VALUE;
}
}

protected final void initHOBAFL(String s) {
if (!s.trim().isEmpty()) {
HOBAFL = Byte.parseByte(s);
} else {
HOBAFL = Byte.MIN_VALUE;
}
}

protected final void initHOBAFR(String s) {
if (!s.trim().isEmpty()) {
HOBAFR = Byte.parseByte(s);
} else {
HOBAFR = Byte.MIN_VALUE;
}
}

protected final void initHOBAFU(String s) {
if (!s.trim().isEmpty()) {
HOBAFU = Byte.parseByte(s);
} else {
HOBAFU = Byte.MIN_VALUE;
}
}

protected final void initHOBAME(String s) {
if (!s.trim().isEmpty()) {
HOBAME = Byte.parseByte(s);
} else {
HOBAME = Byte.MIN_VALUE;
}
}

protected final void initHOBAML(String s) {
if (!s.trim().isEmpty()) {
HOBAML = Short.parseShort(s);
} else {
HOBAML = Short.MIN_VALUE;
}
}

protected final void initHOBAMR(String s) {
if (!s.trim().isEmpty()) {
HOBAMR = Byte.parseByte(s);
} else {
HOBAMR = Byte.MIN_VALUE;
}
}

protected final void initHOBAMU(String s) {
if (!s.trim().isEmpty()) {
HOBAMU = Short.parseShort(s);
} else {
HOBAMU = Short.MIN_VALUE;
}
}

protected final void initHOBAOE(String s) {
if (!s.trim().isEmpty()) {
HOBAOE = Byte.parseByte(s);
} else {
HOBAOE = Byte.MIN_VALUE;
}
}

protected final void initHOBAOL(String s) {
if (!s.trim().isEmpty()) {
HOBAOL = Short.parseShort(s);
} else {
HOBAOL = Short.MIN_VALUE;
}
}

protected final void initHOBAOR(String s) {
if (!s.trim().isEmpty()) {
HOBAOR = Byte.parseByte(s);
} else {
HOBAOR = Byte.MIN_VALUE;
}
}

protected final void initHOBAOU(String s) {
if (!s.trim().isEmpty()) {
HOBAOU = Short.parseShort(s);
} else {
HOBAOU = Short.MIN_VALUE;
}
}

protected final void initHOBAWE(String s) {
if (!s.trim().isEmpty()) {
HOBAWE = Byte.parseByte(s);
} else {
HOBAWE = Byte.MIN_VALUE;
}
}

protected final void initHOBAWL(String s) {
if (!s.trim().isEmpty()) {
HOBAWL = Short.parseShort(s);
} else {
HOBAWL = Short.MIN_VALUE;
}
}

protected final void initHOBAWR(String s) {
if (!s.trim().isEmpty()) {
HOBAWR = Byte.parseByte(s);
} else {
HOBAWR = Byte.MIN_VALUE;
}
}

protected final void initHOBAWU(String s) {
if (!s.trim().isEmpty()) {
HOBAWU = Byte.parseByte(s);
} else {
HOBAWU = Byte.MIN_VALUE;
}
}

protected final void initHOBAYE(String s) {
if (!s.trim().isEmpty()) {
HOBAYE = Byte.parseByte(s);
} else {
HOBAYE = Byte.MIN_VALUE;
}
}

protected final void initHOBAYL(String s) {
if (!s.trim().isEmpty()) {
HOBAYL = Byte.parseByte(s);
} else {
HOBAYL = Byte.MIN_VALUE;
}
}

protected final void initHOBAYR(String s) {
if (!s.trim().isEmpty()) {
HOBAYR = Byte.parseByte(s);
} else {
HOBAYR = Byte.MIN_VALUE;
}
}

protected final void initHOBAYU(String s) {
if (!s.trim().isEmpty()) {
HOBAYU = Short.parseShort(s);
} else {
HOBAYU = Short.MIN_VALUE;
}
}

protected final void initHOCC01(String s) {
if (!s.trim().isEmpty()) {
HOCC01 = Byte.parseByte(s);
} else {
HOCC01 = Byte.MIN_VALUE;
}
}

protected final void initHOCC02(String s) {
if (!s.trim().isEmpty()) {
HOCC02 = Byte.parseByte(s);
} else {
HOCC02 = Byte.MIN_VALUE;
}
}

protected final void initHOCC03(String s) {
if (!s.trim().isEmpty()) {
HOCC03 = Byte.parseByte(s);
} else {
HOCC03 = Byte.MIN_VALUE;
}
}

protected final void initHOCC04(String s) {
if (!s.trim().isEmpty()) {
HOCC04 = Byte.parseByte(s);
} else {
HOCC04 = Byte.MIN_VALUE;
}
}

protected final void initHOCC05(String s) {
if (!s.trim().isEmpty()) {
HOCC05 = Byte.parseByte(s);
} else {
HOCC05 = Byte.MIN_VALUE;
}
}

protected final void initHOCC06(String s) {
if (!s.trim().isEmpty()) {
HOCC06 = Byte.parseByte(s);
} else {
HOCC06 = Byte.MIN_VALUE;
}
}

protected final void initHOCC07(String s) {
if (!s.trim().isEmpty()) {
HOCC07 = Byte.parseByte(s);
} else {
HOCC07 = Byte.MIN_VALUE;
}
}

protected final void initHOCC08(String s) {
if (!s.trim().isEmpty()) {
HOCC08 = Byte.parseByte(s);
} else {
HOCC08 = Byte.MIN_VALUE;
}
}

protected final void initHOCC09(String s) {
if (!s.trim().isEmpty()) {
HOCC09 = Byte.parseByte(s);
} else {
HOCC09 = Byte.MIN_VALUE;
}
}

protected final void initHOCC10(String s) {
if (!s.trim().isEmpty()) {
HOCC10 = Byte.parseByte(s);
} else {
HOCC10 = Byte.MIN_VALUE;
}
}

protected final void initHOCC11(String s) {
if (!s.trim().isEmpty()) {
HOCC11 = Byte.parseByte(s);
} else {
HOCC11 = Byte.MIN_VALUE;
}
}

protected final void initHOCC12(String s) {
if (!s.trim().isEmpty()) {
HOCC12 = Byte.parseByte(s);
} else {
HOCC12 = Byte.MIN_VALUE;
}
}

protected final void initHOCC13(String s) {
if (!s.trim().isEmpty()) {
HOCC13 = Byte.parseByte(s);
} else {
HOCC13 = Byte.MIN_VALUE;
}
}

protected final void initHOCC14(String s) {
if (!s.trim().isEmpty()) {
HOCC14 = Byte.parseByte(s);
} else {
HOCC14 = Byte.MIN_VALUE;
}
}

protected final void initHOCC15(String s) {
if (!s.trim().isEmpty()) {
HOCC15 = Byte.parseByte(s);
} else {
HOCC15 = Byte.MIN_VALUE;
}
}

protected final void initHOCC16(String s) {
if (!s.trim().isEmpty()) {
HOCC16 = Byte.parseByte(s);
} else {
HOCC16 = Byte.MIN_VALUE;
}
}

protected final void initHOCC17(String s) {
if (!s.trim().isEmpty()) {
HOCC17 = Byte.parseByte(s);
} else {
HOCC17 = Byte.MIN_VALUE;
}
}

protected final void initHOCC18(String s) {
if (!s.trim().isEmpty()) {
HOCC18 = Byte.parseByte(s);
} else {
HOCC18 = Byte.MIN_VALUE;
}
}

protected final void initHOCC19(String s) {
if (!s.trim().isEmpty()) {
HOCC19 = Byte.parseByte(s);
} else {
HOCC19 = Byte.MIN_VALUE;
}
}

protected final void initHOCC20(String s) {
if (!s.trim().isEmpty()) {
HOCC20 = Byte.parseByte(s);
} else {
HOCC20 = Byte.MIN_VALUE;
}
}

protected final void initHOCENP(String s) {
if (!s.trim().isEmpty()) {
HOCENP = Byte.parseByte(s);
} else {
HOCENP = Byte.MIN_VALUE;
}
}

protected final void initHOCL(String s) {
if (!s.trim().isEmpty()) {
HOCL = Short.parseShort(s);
} else {
HOCL = Short.MIN_VALUE;
}
}

protected final void initHOCLE(String s) {
if (!s.trim().isEmpty()) {
HOCLE = Byte.parseByte(s);
} else {
HOCLE = Byte.MIN_VALUE;
}
}

protected final void initHOCLL(String s) {
if (!s.trim().isEmpty()) {
HOCLL = Short.parseShort(s);
} else {
HOCLL = Short.MIN_VALUE;
}
}

protected final void initHOCLR(String s) {
if (!s.trim().isEmpty()) {
HOCLR = Byte.parseByte(s);
} else {
HOCLR = Byte.MIN_VALUE;
}
}

protected final void initHOCLU(String s) {
if (!s.trim().isEmpty()) {
HOCLU = Short.parseShort(s);
} else {
HOCLU = Short.MIN_VALUE;
}
}

protected final void initHOCO(String s) {
if (!s.trim().isEmpty()) {
HOCO = Byte.parseByte(s);
} else {
HOCO = Byte.MIN_VALUE;
}
}

protected final void initHOCTA(String s) {
if (!s.trim().isEmpty()) {
HOCTA = Byte.parseByte(s);
} else {
HOCTA = Byte.MIN_VALUE;
}
}

protected final void initHOCTF(String s) {
if (!s.trim().isEmpty()) {
HOCTF = Byte.parseByte(s);
} else {
HOCTF = Byte.MIN_VALUE;
}
}

protected final void initHOCTFA(String s) {
if (!s.trim().isEmpty()) {
HOCTFA = Integer.parseInt(s);
} else {
HOCTFA = Integer.MIN_VALUE;
}
}

protected final void initHOCTFAE(String s) {
if (!s.trim().isEmpty()) {
HOCTFAE = Byte.parseByte(s);
} else {
HOCTFAE = Byte.MIN_VALUE;
}
}

protected final void initHOCTFAL(String s) {
if (!s.trim().isEmpty()) {
HOCTFAL = Short.parseShort(s);
} else {
HOCTFAL = Short.MIN_VALUE;
}
}

protected final void initHOCTFAR(String s) {
if (!s.trim().isEmpty()) {
HOCTFAR = Byte.parseByte(s);
} else {
HOCTFAR = Byte.MIN_VALUE;
}
}

protected final void initHOCTFAU(String s) {
if (!s.trim().isEmpty()) {
HOCTFAU = Short.parseShort(s);
} else {
HOCTFAU = Short.MIN_VALUE;
}
}

protected final void initHOCTFW(String s) {
if (!s.trim().isEmpty()) {
HOCTFW = Byte.parseByte(s);
} else {
HOCTFW = Byte.MIN_VALUE;
}
}

protected final void initHODISC(String s) {
if (!s.trim().isEmpty()) {
HODISC = Byte.parseByte(s);
} else {
HODISC = Byte.MIN_VALUE;
}
}

protected final void initHOEB(String s) {
if (!s.trim().isEmpty()) {
HOEB = Byte.parseByte(s);
} else {
HOEB = Byte.MIN_VALUE;
}
}

protected final void initHOEBMS(String s) {
if (!s.trim().isEmpty()) {
HOEBMS = Short.parseShort(s);
} else {
HOEBMS = Short.MIN_VALUE;
}
}

protected final void initHOEBMSE(String s) {
if (!s.trim().isEmpty()) {
HOEBMSE = Byte.parseByte(s);
} else {
HOEBMSE = Byte.MIN_VALUE;
}
}

protected final void initHOEBMSL(String s) {
if (!s.trim().isEmpty()) {
HOEBMSL = Byte.parseByte(s);
} else {
HOEBMSL = Byte.MIN_VALUE;
}
}

protected final void initHOEBMSR(String s) {
if (!s.trim().isEmpty()) {
HOEBMSR = Byte.parseByte(s);
} else {
HOEBMSR = Byte.MIN_VALUE;
}
}

protected final void initHOEBMSU(String s) {
if (!s.trim().isEmpty()) {
HOEBMSU = Byte.parseByte(s);
} else {
HOEBMSU = Byte.MIN_VALUE;
}
}

protected final void initHOEBMW(String s) {
if (!s.trim().isEmpty()) {
HOEBMW = Short.parseShort(s);
} else {
HOEBMW = Short.MIN_VALUE;
}
}

protected final void initHOEBMWE(String s) {
if (!s.trim().isEmpty()) {
HOEBMWE = Byte.parseByte(s);
} else {
HOEBMWE = Byte.MIN_VALUE;
}
}

protected final void initHOEBMWL(String s) {
if (!s.trim().isEmpty()) {
HOEBMWL = Byte.parseByte(s);
} else {
HOEBMWL = Byte.MIN_VALUE;
}
}

protected final void initHOEBMWR(String s) {
if (!s.trim().isEmpty()) {
HOEBMWR = Byte.parseByte(s);
} else {
HOEBMWR = Byte.MIN_VALUE;
}
}

protected final void initHOEBMWU(String s) {
if (!s.trim().isEmpty()) {
HOEBMWU = Byte.parseByte(s);
} else {
HOEBMWU = Byte.MIN_VALUE;
}
}

protected final void initHOEBQS(String s) {
if (!s.trim().isEmpty()) {
HOEBQS = Short.parseShort(s);
} else {
HOEBQS = Short.MIN_VALUE;
}
}

protected final void initHOEBQSE(String s) {
if (!s.trim().isEmpty()) {
HOEBQSE = Byte.parseByte(s);
} else {
HOEBQSE = Byte.MIN_VALUE;
}
}

protected final void initHOEBQSL(String s) {
if (!s.trim().isEmpty()) {
HOEBQSL = Short.parseShort(s);
} else {
HOEBQSL = Short.MIN_VALUE;
}
}

protected final void initHOEBQSR(String s) {
if (!s.trim().isEmpty()) {
HOEBQSR = Byte.parseByte(s);
} else {
HOEBQSR = Byte.MIN_VALUE;
}
}

protected final void initHOEBQSU(String s) {
if (!s.trim().isEmpty()) {
HOEBQSU = Short.parseShort(s);
} else {
HOEBQSU = Short.MIN_VALUE;
}
}

protected final void initHOEBQW(String s) {
if (!s.trim().isEmpty()) {
HOEBQW = Short.parseShort(s);
} else {
HOEBQW = Short.MIN_VALUE;
}
}

protected final void initHOEBQWE(String s) {
if (!s.trim().isEmpty()) {
HOEBQWE = Byte.parseByte(s);
} else {
HOEBQWE = Byte.MIN_VALUE;
}
}

protected final void initHOEBQWL(String s) {
if (!s.trim().isEmpty()) {
HOEBQWL = Short.parseShort(s);
} else {
HOEBQWL = Short.MIN_VALUE;
}
}

protected final void initHOEBQWR(String s) {
if (!s.trim().isEmpty()) {
HOEBQWR = Byte.parseByte(s);
} else {
HOEBQWR = Byte.MIN_VALUE;
}
}

protected final void initHOEBQWU(String s) {
if (!s.trim().isEmpty()) {
HOEBQWU = Short.parseShort(s);
} else {
HOEBQWU = Short.MIN_VALUE;
}
}

protected final void initHOED(String s) {
if (!s.trim().isEmpty()) {
HOED = Byte.parseByte(s);
} else {
HOED = Byte.MIN_VALUE;
}
}

protected final void initHOEDM(String s) {
if (!s.trim().isEmpty()) {
HOEDM = Short.parseShort(s);
} else {
HOEDM = Short.MIN_VALUE;
}
}

protected final void initHOEDME(String s) {
if (!s.trim().isEmpty()) {
HOEDME = Byte.parseByte(s);
} else {
HOEDME = Byte.MIN_VALUE;
}
}

protected final void initHOEDML(String s) {
if (!s.trim().isEmpty()) {
HOEDML = Byte.parseByte(s);
} else {
HOEDML = Byte.MIN_VALUE;
}
}

protected final void initHOEDMR(String s) {
if (!s.trim().isEmpty()) {
HOEDMR = Byte.parseByte(s);
} else {
HOEDMR = Byte.MIN_VALUE;
}
}

protected final void initHOEDMU(String s) {
if (!s.trim().isEmpty()) {
HOEDMU = Byte.parseByte(s);
} else {
HOEDMU = Byte.MIN_VALUE;
}
}

protected final void initHOEDQ(String s) {
if (!s.trim().isEmpty()) {
HOEDQ = Short.parseShort(s);
} else {
HOEDQ = Short.MIN_VALUE;
}
}

protected final void initHOEDQE(String s) {
if (!s.trim().isEmpty()) {
HOEDQE = Byte.parseByte(s);
} else {
HOEDQE = Byte.MIN_VALUE;
}
}

protected final void initHOEDQL(String s) {
if (!s.trim().isEmpty()) {
HOEDQL = Short.parseShort(s);
} else {
HOEDQL = Short.MIN_VALUE;
}
}

protected final void initHOEDQR(String s) {
if (!s.trim().isEmpty()) {
HOEDQR = Byte.parseByte(s);
} else {
HOEDQR = Byte.MIN_VALUE;
}
}

protected final void initHOEDQU(String s) {
if (!s.trim().isEmpty()) {
HOEDQU = Short.parseShort(s);
} else {
HOEDQU = Short.MIN_VALUE;
}
}

protected final void initHOEOS(String s) {
if (!s.trim().isEmpty()) {
HOEOS = Byte.parseByte(s);
} else {
HOEOS = Byte.MIN_VALUE;
}
}

protected final void initHOEOSE(String s) {
if (!s.trim().isEmpty()) {
HOEOSE = Byte.parseByte(s);
} else {
HOEOSE = Byte.MIN_VALUE;
}
}

protected final void initHOEOSL(String s) {
if (!s.trim().isEmpty()) {
HOEOSL = Byte.parseByte(s);
} else {
HOEOSL = Byte.MIN_VALUE;
}
}

protected final void initHOEOSR(String s) {
if (!s.trim().isEmpty()) {
HOEOSR = Byte.parseByte(s);
} else {
HOEOSR = Byte.MIN_VALUE;
}
}

protected final void initHOEOSU(String s) {
if (!s.trim().isEmpty()) {
HOEOSU = Byte.parseByte(s);
} else {
HOEOSU = Byte.MIN_VALUE;
}
}

protected final void initHOEOW(String s) {
if (!s.trim().isEmpty()) {
HOEOW = Byte.parseByte(s);
} else {
HOEOW = Byte.MIN_VALUE;
}
}

protected final void initHOEOWE(String s) {
if (!s.trim().isEmpty()) {
HOEOWE = Byte.parseByte(s);
} else {
HOEOWE = Byte.MIN_VALUE;
}
}

protected final void initHOEOWL(String s) {
if (!s.trim().isEmpty()) {
HOEOWL = Byte.parseByte(s);
} else {
HOEOWL = Byte.MIN_VALUE;
}
}

protected final void initHOEOWR(String s) {
if (!s.trim().isEmpty()) {
HOEOWR = Byte.parseByte(s);
} else {
HOEOWR = Byte.MIN_VALUE;
}
}

protected final void initHOEOWU(String s) {
if (!s.trim().isEmpty()) {
HOEOWU = Byte.parseByte(s);
} else {
HOEOWU = Byte.MIN_VALUE;
}
}

protected final void initHOEPAY(String s) {
if (!s.trim().isEmpty()) {
HOEPAY = Byte.parseByte(s);
} else {
HOEPAY = Byte.MIN_VALUE;
}
}

protected final void initHOEPS(String s) {
if (!s.trim().isEmpty()) {
HOEPS = Byte.parseByte(s);
} else {
HOEPS = Byte.MIN_VALUE;
}
}

protected final void initHOEPSE(String s) {
if (!s.trim().isEmpty()) {
HOEPSE = Byte.parseByte(s);
} else {
HOEPSE = Byte.MIN_VALUE;
}
}

protected final void initHOEPSL(String s) {
if (!s.trim().isEmpty()) {
HOEPSL = Byte.parseByte(s);
} else {
HOEPSL = Byte.MIN_VALUE;
}
}

protected final void initHOEPSR(String s) {
if (!s.trim().isEmpty()) {
HOEPSR = Byte.parseByte(s);
} else {
HOEPSR = Byte.MIN_VALUE;
}
}

protected final void initHOEPSU(String s) {
if (!s.trim().isEmpty()) {
HOEPSU = Byte.parseByte(s);
} else {
HOEPSU = Byte.MIN_VALUE;
}
}

protected final void initHOEPW(String s) {
if (!s.trim().isEmpty()) {
HOEPW = Byte.parseByte(s);
} else {
HOEPW = Byte.MIN_VALUE;
}
}

protected final void initHOEPWE(String s) {
if (!s.trim().isEmpty()) {
HOEPWE = Byte.parseByte(s);
} else {
HOEPWE = Byte.MIN_VALUE;
}
}

protected final void initHOEPWL(String s) {
if (!s.trim().isEmpty()) {
HOEPWL = Byte.parseByte(s);
} else {
HOEPWL = Byte.MIN_VALUE;
}
}

protected final void initHOEPWR(String s) {
if (!s.trim().isEmpty()) {
HOEPWR = Byte.parseByte(s);
} else {
HOEPWR = Byte.MIN_VALUE;
}
}

protected final void initHOEPWU(String s) {
if (!s.trim().isEmpty()) {
HOEPWU = Byte.parseByte(s);
} else {
HOEPWU = Byte.MIN_VALUE;
}
}

protected final void initHOFB(String s) {
if (!s.trim().isEmpty()) {
HOFB = Byte.parseByte(s);
} else {
HOFB = Byte.MIN_VALUE;
}
}

protected final void initHOFBMS(String s) {
if (!s.trim().isEmpty()) {
HOFBMS = Short.parseShort(s);
} else {
HOFBMS = Short.MIN_VALUE;
}
}

protected final void initHOFBMSE(String s) {
if (!s.trim().isEmpty()) {
HOFBMSE = Byte.parseByte(s);
} else {
HOFBMSE = Byte.MIN_VALUE;
}
}

protected final void initHOFBMSL(String s) {
if (!s.trim().isEmpty()) {
HOFBMSL = Byte.parseByte(s);
} else {
HOFBMSL = Byte.MIN_VALUE;
}
}

protected final void initHOFBMSR(String s) {
if (!s.trim().isEmpty()) {
HOFBMSR = Byte.parseByte(s);
} else {
HOFBMSR = Byte.MIN_VALUE;
}
}

protected final void initHOFBMSU(String s) {
if (!s.trim().isEmpty()) {
HOFBMSU = Byte.parseByte(s);
} else {
HOFBMSU = Byte.MIN_VALUE;
}
}

protected final void initHOFBMW(String s) {
if (!s.trim().isEmpty()) {
HOFBMW = Short.parseShort(s);
} else {
HOFBMW = Short.MIN_VALUE;
}
}

protected final void initHOFBMWE(String s) {
if (!s.trim().isEmpty()) {
HOFBMWE = Byte.parseByte(s);
} else {
HOFBMWE = Byte.MIN_VALUE;
}
}

protected final void initHOFBMWL(String s) {
if (!s.trim().isEmpty()) {
HOFBMWL = Byte.parseByte(s);
} else {
HOFBMWL = Byte.MIN_VALUE;
}
}

protected final void initHOFBMWR(String s) {
if (!s.trim().isEmpty()) {
HOFBMWR = Byte.parseByte(s);
} else {
HOFBMWR = Byte.MIN_VALUE;
}
}

protected final void initHOFBMWU(String s) {
if (!s.trim().isEmpty()) {
HOFBMWU = Byte.parseByte(s);
} else {
HOFBMWU = Byte.MIN_VALUE;
}
}

protected final void initHOFBQS(String s) {
if (!s.trim().isEmpty()) {
HOFBQS = Short.parseShort(s);
} else {
HOFBQS = Short.MIN_VALUE;
}
}

protected final void initHOFBQSE(String s) {
if (!s.trim().isEmpty()) {
HOFBQSE = Byte.parseByte(s);
} else {
HOFBQSE = Byte.MIN_VALUE;
}
}

protected final void initHOFBQSL(String s) {
if (!s.trim().isEmpty()) {
HOFBQSL = Short.parseShort(s);
} else {
HOFBQSL = Short.MIN_VALUE;
}
}

protected final void initHOFBQSR(String s) {
if (!s.trim().isEmpty()) {
HOFBQSR = Byte.parseByte(s);
} else {
HOFBQSR = Byte.MIN_VALUE;
}
}

protected final void initHOFBQSU(String s) {
if (!s.trim().isEmpty()) {
HOFBQSU = Short.parseShort(s);
} else {
HOFBQSU = Short.MIN_VALUE;
}
}

protected final void initHOFBQW(String s) {
if (!s.trim().isEmpty()) {
HOFBQW = Short.parseShort(s);
} else {
HOFBQW = Short.MIN_VALUE;
}
}

protected final void initHOFBQWE(String s) {
if (!s.trim().isEmpty()) {
HOFBQWE = Byte.parseByte(s);
} else {
HOFBQWE = Byte.MIN_VALUE;
}
}

protected final void initHOFBQWL(String s) {
if (!s.trim().isEmpty()) {
HOFBQWL = Short.parseShort(s);
} else {
HOFBQWL = Short.MIN_VALUE;
}
}

protected final void initHOFBQWR(String s) {
if (!s.trim().isEmpty()) {
HOFBQWR = Byte.parseByte(s);
} else {
HOFBQWR = Byte.MIN_VALUE;
}
}

protected final void initHOFBQWU(String s) {
if (!s.trim().isEmpty()) {
HOFBQWU = Short.parseShort(s);
} else {
HOFBQWU = Short.MIN_VALUE;
}
}

protected final void initHOFCS(String s) {
if (!s.trim().isEmpty()) {
HOFCS = Byte.parseByte(s);
} else {
HOFCS = Byte.MIN_VALUE;
}
}

protected final void initHOFCSE(String s) {
if (!s.trim().isEmpty()) {
HOFCSE = Byte.parseByte(s);
} else {
HOFCSE = Byte.MIN_VALUE;
}
}

protected final void initHOFCSL(String s) {
if (!s.trim().isEmpty()) {
HOFCSL = Byte.parseByte(s);
} else {
HOFCSL = Byte.MIN_VALUE;
}
}

protected final void initHOFCSR(String s) {
if (!s.trim().isEmpty()) {
HOFCSR = Byte.parseByte(s);
} else {
HOFCSR = Byte.MIN_VALUE;
}
}

protected final void initHOFCSU(String s) {
if (!s.trim().isEmpty()) {
HOFCSU = Byte.parseByte(s);
} else {
HOFCSU = Byte.MIN_VALUE;
}
}

protected final void initHOFCW(String s) {
if (!s.trim().isEmpty()) {
HOFCW = Byte.parseByte(s);
} else {
HOFCW = Byte.MIN_VALUE;
}
}

protected final void initHOFCWE(String s) {
if (!s.trim().isEmpty()) {
HOFCWE = Byte.parseByte(s);
} else {
HOFCWE = Byte.MIN_VALUE;
}
}

protected final void initHOFCWL(String s) {
if (!s.trim().isEmpty()) {
HOFCWL = Byte.parseByte(s);
} else {
HOFCWL = Byte.MIN_VALUE;
}
}

protected final void initHOFCWR(String s) {
if (!s.trim().isEmpty()) {
HOFCWR = Byte.parseByte(s);
} else {
HOFCWR = Byte.MIN_VALUE;
}
}

protected final void initHOFCWU(String s) {
if (!s.trim().isEmpty()) {
HOFCWU = Byte.parseByte(s);
} else {
HOFCWU = Byte.MIN_VALUE;
}
}

protected final void initHOFD(String s) {
if (!s.trim().isEmpty()) {
HOFD = Byte.parseByte(s);
} else {
HOFD = Byte.MIN_VALUE;
}
}

protected final void initHOFDM(String s) {
if (!s.trim().isEmpty()) {
HOFDM = Short.parseShort(s);
} else {
HOFDM = Short.MIN_VALUE;
}
}

protected final void initHOFDME(String s) {
if (!s.trim().isEmpty()) {
HOFDME = Byte.parseByte(s);
} else {
HOFDME = Byte.MIN_VALUE;
}
}

protected final void initHOFDML(String s) {
if (!s.trim().isEmpty()) {
HOFDML = Byte.parseByte(s);
} else {
HOFDML = Byte.MIN_VALUE;
}
}

protected final void initHOFDMR(String s) {
if (!s.trim().isEmpty()) {
HOFDMR = Byte.parseByte(s);
} else {
HOFDMR = Byte.MIN_VALUE;
}
}

protected final void initHOFDMU(String s) {
if (!s.trim().isEmpty()) {
HOFDMU = Byte.parseByte(s);
} else {
HOFDMU = Byte.MIN_VALUE;
}
}

protected final void initHOFDQ(String s) {
if (!s.trim().isEmpty()) {
HOFDQ = Short.parseShort(s);
} else {
HOFDQ = Short.MIN_VALUE;
}
}

protected final void initHOFDQE(String s) {
if (!s.trim().isEmpty()) {
HOFDQE = Byte.parseByte(s);
} else {
HOFDQE = Byte.MIN_VALUE;
}
}

protected final void initHOFDQL(String s) {
if (!s.trim().isEmpty()) {
HOFDQL = Short.parseShort(s);
} else {
HOFDQL = Short.MIN_VALUE;
}
}

protected final void initHOFDQR(String s) {
if (!s.trim().isEmpty()) {
HOFDQR = Byte.parseByte(s);
} else {
HOFDQR = Byte.MIN_VALUE;
}
}

protected final void initHOFDQU(String s) {
if (!s.trim().isEmpty()) {
HOFDQU = Short.parseShort(s);
} else {
HOFDQU = Short.MIN_VALUE;
}
}

protected final void initHOFOIS(String s) {
if (!s.trim().isEmpty()) {
HOFOIS = Byte.parseByte(s);
} else {
HOFOIS = Byte.MIN_VALUE;
}
}

protected final void initHOFOISE(String s) {
if (!s.trim().isEmpty()) {
HOFOISE = Byte.parseByte(s);
} else {
HOFOISE = Byte.MIN_VALUE;
}
}

protected final void initHOFOISL(String s) {
if (!s.trim().isEmpty()) {
HOFOISL = Byte.parseByte(s);
} else {
HOFOISL = Byte.MIN_VALUE;
}
}

protected final void initHOFOISR(String s) {
if (!s.trim().isEmpty()) {
HOFOISR = Byte.parseByte(s);
} else {
HOFOISR = Byte.MIN_VALUE;
}
}

protected final void initHOFOISU(String s) {
if (!s.trim().isEmpty()) {
HOFOISU = Byte.parseByte(s);
} else {
HOFOISU = Byte.MIN_VALUE;
}
}

protected final void initHOFOIW(String s) {
if (!s.trim().isEmpty()) {
HOFOIW = Byte.parseByte(s);
} else {
HOFOIW = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWE(String s) {
if (!s.trim().isEmpty()) {
HOFOIWE = Byte.parseByte(s);
} else {
HOFOIWE = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWL(String s) {
if (!s.trim().isEmpty()) {
HOFOIWL = Byte.parseByte(s);
} else {
HOFOIWL = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWR(String s) {
if (!s.trim().isEmpty()) {
HOFOIWR = Byte.parseByte(s);
} else {
HOFOIWR = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWU(String s) {
if (!s.trim().isEmpty()) {
HOFOIWU = Byte.parseByte(s);
} else {
HOFOIWU = Byte.MIN_VALUE;
}
}

protected final void initHOFOODE(String s) {
if (!s.trim().isEmpty()) {
HOFOODE = Byte.parseByte(s);
} else {
HOFOODE = Byte.MIN_VALUE;
}
}

protected final void initHOFOODL(String s) {
if (!s.trim().isEmpty()) {
HOFOODL = Short.parseShort(s);
} else {
HOFOODL = Short.MIN_VALUE;
}
}

protected final void initHOFOODR(String s) {
if (!s.trim().isEmpty()) {
HOFOODR = Byte.parseByte(s);
} else {
HOFOODR = Byte.MIN_VALUE;
}
}

protected final void initHOFOODU(String s) {
if (!s.trim().isEmpty()) {
HOFOODU = Short.parseShort(s);
} else {
HOFOODU = Short.MIN_VALUE;
}
}

protected final void initHOFOS(String s) {
if (!s.trim().isEmpty()) {
HOFOS = Byte.parseByte(s);
} else {
HOFOS = Byte.MIN_VALUE;
}
}

protected final void initHOFOSE(String s) {
if (!s.trim().isEmpty()) {
HOFOSE = Byte.parseByte(s);
} else {
HOFOSE = Byte.MIN_VALUE;
}
}

protected final void initHOFOSL(String s) {
if (!s.trim().isEmpty()) {
HOFOSL = Byte.parseByte(s);
} else {
HOFOSL = Byte.MIN_VALUE;
}
}

protected final void initHOFOSR(String s) {
if (!s.trim().isEmpty()) {
HOFOSR = Byte.parseByte(s);
} else {
HOFOSR = Byte.MIN_VALUE;
}
}

protected final void initHOFOSU(String s) {
if (!s.trim().isEmpty()) {
HOFOSU = Byte.parseByte(s);
} else {
HOFOSU = Byte.MIN_VALUE;
}
}

protected final void initHOFOW(String s) {
if (!s.trim().isEmpty()) {
HOFOW = Byte.parseByte(s);
} else {
HOFOW = Byte.MIN_VALUE;
}
}

protected final void initHOFOWE(String s) {
if (!s.trim().isEmpty()) {
HOFOWE = Byte.parseByte(s);
} else {
HOFOWE = Byte.MIN_VALUE;
}
}

protected final void initHOFOWL(String s) {
if (!s.trim().isEmpty()) {
HOFOWL = Byte.parseByte(s);
} else {
HOFOWL = Byte.MIN_VALUE;
}
}

protected final void initHOFOWR(String s) {
if (!s.trim().isEmpty()) {
HOFOWR = Byte.parseByte(s);
} else {
HOFOWR = Byte.MIN_VALUE;
}
}

protected final void initHOFOWU(String s) {
if (!s.trim().isEmpty()) {
HOFOWU = Byte.parseByte(s);
} else {
HOFOWU = Byte.MIN_VALUE;
}
}

protected final void initHOFPAY(String s) {
if (!s.trim().isEmpty()) {
HOFPAY = Byte.parseByte(s);
} else {
HOFPAY = Byte.MIN_VALUE;
}
}

protected final void initHOFPGS(String s) {
if (!s.trim().isEmpty()) {
HOFPGS = Byte.parseByte(s);
} else {
HOFPGS = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSE(String s) {
if (!s.trim().isEmpty()) {
HOFPGSE = Byte.parseByte(s);
} else {
HOFPGSE = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSL(String s) {
if (!s.trim().isEmpty()) {
HOFPGSL = Byte.parseByte(s);
} else {
HOFPGSL = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSR(String s) {
if (!s.trim().isEmpty()) {
HOFPGSR = Byte.parseByte(s);
} else {
HOFPGSR = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSU(String s) {
if (!s.trim().isEmpty()) {
HOFPGSU = Byte.parseByte(s);
} else {
HOFPGSU = Byte.MIN_VALUE;
}
}

protected final void initHOFPGW(String s) {
if (!s.trim().isEmpty()) {
HOFPGW = Byte.parseByte(s);
} else {
HOFPGW = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWE(String s) {
if (!s.trim().isEmpty()) {
HOFPGWE = Byte.parseByte(s);
} else {
HOFPGWE = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWL(String s) {
if (!s.trim().isEmpty()) {
HOFPGWL = Byte.parseByte(s);
} else {
HOFPGWL = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWR(String s) {
if (!s.trim().isEmpty()) {
HOFPGWR = Byte.parseByte(s);
} else {
HOFPGWR = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWU(String s) {
if (!s.trim().isEmpty()) {
HOFPGWU = Byte.parseByte(s);
} else {
HOFPGWU = Byte.MIN_VALUE;
}
}

protected final void initHOFPS(String s) {
if (!s.trim().isEmpty()) {
HOFPS = Byte.parseByte(s);
} else {
HOFPS = Byte.MIN_VALUE;
}
}

protected final void initHOFPSE(String s) {
if (!s.trim().isEmpty()) {
HOFPSE = Byte.parseByte(s);
} else {
HOFPSE = Byte.MIN_VALUE;
}
}

protected final void initHOFPSL(String s) {
if (!s.trim().isEmpty()) {
HOFPSL = Byte.parseByte(s);
} else {
HOFPSL = Byte.MIN_VALUE;
}
}

protected final void initHOFPSR(String s) {
if (!s.trim().isEmpty()) {
HOFPSR = Byte.parseByte(s);
} else {
HOFPSR = Byte.MIN_VALUE;
}
}

protected final void initHOFPSU(String s) {
if (!s.trim().isEmpty()) {
HOFPSU = Byte.parseByte(s);
} else {
HOFPSU = Byte.MIN_VALUE;
}
}

protected final void initHOFPW(String s) {
if (!s.trim().isEmpty()) {
HOFPW = Byte.parseByte(s);
} else {
HOFPW = Byte.MIN_VALUE;
}
}

protected final void initHOFPWE(String s) {
if (!s.trim().isEmpty()) {
HOFPWE = Byte.parseByte(s);
} else {
HOFPWE = Byte.MIN_VALUE;
}
}

protected final void initHOFPWL(String s) {
if (!s.trim().isEmpty()) {
HOFPWL = Byte.parseByte(s);
} else {
HOFPWL = Byte.MIN_VALUE;
}
}

protected final void initHOFPWR(String s) {
if (!s.trim().isEmpty()) {
HOFPWR = Byte.parseByte(s);
} else {
HOFPWR = Byte.MIN_VALUE;
}
}

protected final void initHOFPWU(String s) {
if (!s.trim().isEmpty()) {
HOFPWU = Byte.parseByte(s);
} else {
HOFPWU = Byte.MIN_VALUE;
}
}

protected final void initHOFSM(String s) {
if (!s.trim().isEmpty()) {
HOFSM = Short.parseShort(s);
} else {
HOFSM = Short.MIN_VALUE;
}
}

protected final void initHOFSME(String s) {
if (!s.trim().isEmpty()) {
HOFSME = Byte.parseByte(s);
} else {
HOFSME = Byte.MIN_VALUE;
}
}

protected final void initHOFSML(String s) {
if (!s.trim().isEmpty()) {
HOFSML = Byte.parseByte(s);
} else {
HOFSML = Byte.MIN_VALUE;
}
}

protected final void initHOFSMR(String s) {
if (!s.trim().isEmpty()) {
HOFSMR = Byte.parseByte(s);
} else {
HOFSMR = Byte.MIN_VALUE;
}
}

protected final void initHOFSMU(String s) {
if (!s.trim().isEmpty()) {
HOFSMU = Byte.parseByte(s);
} else {
HOFSMU = Byte.MIN_VALUE;
}
}

protected final void initHOFSP(String s) {
if (!s.trim().isEmpty()) {
HOFSP = Byte.parseByte(s);
} else {
HOFSP = Byte.MIN_VALUE;
}
}

protected final void initHOFSQ(String s) {
if (!s.trim().isEmpty()) {
HOFSQ = Byte.parseByte(s);
} else {
HOFSQ = Byte.MIN_VALUE;
}
}

protected final void initHOFSQE(String s) {
if (!s.trim().isEmpty()) {
HOFSQE = Byte.parseByte(s);
} else {
HOFSQE = Byte.MIN_VALUE;
}
}

protected final void initHOFSQL(String s) {
if (!s.trim().isEmpty()) {
HOFSQL = Byte.parseByte(s);
} else {
HOFSQL = Byte.MIN_VALUE;
}
}

protected final void initHOFSQR(String s) {
if (!s.trim().isEmpty()) {
HOFSQR = Byte.parseByte(s);
} else {
HOFSQR = Byte.MIN_VALUE;
}
}

protected final void initHOFSQU(String s) {
if (!s.trim().isEmpty()) {
HOFSQU = Byte.parseByte(s);
} else {
HOFSQU = Byte.MIN_VALUE;
}
}

protected final void initHOFSUP(String s) {
if (!s.trim().isEmpty()) {
HOFSUP = Byte.parseByte(s);
} else {
HOFSUP = Byte.MIN_VALUE;
}
}

protected final void initHOFSW(String s) {
if (!s.trim().isEmpty()) {
HOFSW = Short.parseShort(s);
} else {
HOFSW = Short.MIN_VALUE;
}
}

protected final void initHOFSWE(String s) {
if (!s.trim().isEmpty()) {
HOFSWE = Byte.parseByte(s);
} else {
HOFSWE = Byte.MIN_VALUE;
}
}

protected final void initHOFSWL(String s) {
if (!s.trim().isEmpty()) {
HOFSWL = Byte.parseByte(s);
} else {
HOFSWL = Byte.MIN_VALUE;
}
}

protected final void initHOFSWR(String s) {
if (!s.trim().isEmpty()) {
HOFSWR = Byte.parseByte(s);
} else {
HOFSWR = Byte.MIN_VALUE;
}
}

protected final void initHOFSWU(String s) {
if (!s.trim().isEmpty()) {
HOFSWU = Byte.parseByte(s);
} else {
HOFSWU = Byte.MIN_VALUE;
}
}

protected final void initHOFTOG(String s) {
if (!s.trim().isEmpty()) {
HOFTOG = Byte.parseByte(s);
} else {
HOFTOG = Byte.MIN_VALUE;
}
}

protected final void initHOFUEL95(String s) {
if (!s.trim().isEmpty()) {
HOFUEL95 = Byte.parseByte(s);
} else {
HOFUEL95 = Byte.MIN_VALUE;
}
}

protected final void initHOFUELCO(String s) {
if (!s.trim().isEmpty()) {
HOFUELCO = Byte.parseByte(s);
} else {
HOFUELCO = Byte.MIN_VALUE;
}
}

protected final void initHOFUELEL(String s) {
if (!s.trim().isEmpty()) {
HOFUELEL = Byte.parseByte(s);
} else {
HOFUELEL = Byte.MIN_VALUE;
}
}

protected final void initHOFUELGA(String s) {
if (!s.trim().isEmpty()) {
HOFUELGA = Byte.parseByte(s);
} else {
HOFUELGA = Byte.MIN_VALUE;
}
}

protected final void initHOFUELM1(String s) {
if (!s.trim().isEmpty()) {
HOFUELM1 = Byte.parseByte(s);
} else {
HOFUELM1 = Byte.MIN_VALUE;
}
}

protected final void initHOFUELM2(String s) {
if (!s.trim().isEmpty()) {
HOFUELM2 = Byte.parseByte(s);
} else {
HOFUELM2 = Byte.MIN_VALUE;
}
}

protected final void initHOFUELM3(String s) {
if (!s.trim().isEmpty()) {
HOFUELM3 = Byte.parseByte(s);
} else {
HOFUELM3 = Byte.MIN_VALUE;
}
}

protected final void initHOFUELM4(String s) {
if (!s.trim().isEmpty()) {
HOFUELM4 = Byte.parseByte(s);
} else {
HOFUELM4 = Byte.MIN_VALUE;
}
}

protected final void initHOFUELM5(String s) {
if (!s.trim().isEmpty()) {
HOFUELM5 = Byte.parseByte(s);
} else {
HOFUELM5 = Byte.MIN_VALUE;
}
}

protected final void initHOFUELM6(String s) {
if (!s.trim().isEmpty()) {
HOFUELM6 = Byte.parseByte(s);
} else {
HOFUELM6 = Byte.MIN_VALUE;
}
}

protected final void initHOFUELM8(String s) {
if (!s.trim().isEmpty()) {
HOFUELM8 = Byte.parseByte(s);
} else {
HOFUELM8 = Byte.MIN_VALUE;
}
}

protected final void initHOFUELM9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOFUELM9 = false;
} else {
HOFUELM9 = true;
}
}
}

protected final void initHOFUELOI(String s) {
if (!s.trim().isEmpty()) {
HOFUELOI = Byte.parseByte(s);
} else {
HOFUELOI = Byte.MIN_VALUE;
}
}

protected final void initHOFUELPA(String s) {
if (!s.trim().isEmpty()) {
HOFUELPA = Byte.parseByte(s);
} else {
HOFUELPA = Byte.MIN_VALUE;
}
}

protected final void initHOFUELWO(String s) {
if (!s.trim().isEmpty()) {
HOFUELWO = Byte.parseByte(s);
} else {
HOFUELWO = Byte.MIN_VALUE;
}
}

protected final void initHOFWS(String s) {
if (!s.trim().isEmpty()) {
HOFWS = Byte.parseByte(s);
} else {
HOFWS = Byte.MIN_VALUE;
}
}

protected final void initHOFWSE(String s) {
if (!s.trim().isEmpty()) {
HOFWSE = Byte.parseByte(s);
} else {
HOFWSE = Byte.MIN_VALUE;
}
}

protected final void initHOFWSL(String s) {
if (!s.trim().isEmpty()) {
HOFWSL = Byte.parseByte(s);
} else {
HOFWSL = Byte.MIN_VALUE;
}
}

protected final void initHOFWSR(String s) {
if (!s.trim().isEmpty()) {
HOFWSR = Byte.parseByte(s);
} else {
HOFWSR = Byte.MIN_VALUE;
}
}

protected final void initHOFWSU(String s) {
if (!s.trim().isEmpty()) {
HOFWSU = Byte.parseByte(s);
} else {
HOFWSU = Byte.MIN_VALUE;
}
}

protected final void initHOFWW(String s) {
if (!s.trim().isEmpty()) {
HOFWW = Byte.parseByte(s);
} else {
HOFWW = Byte.MIN_VALUE;
}
}

protected final void initHOFWWE(String s) {
if (!s.trim().isEmpty()) {
HOFWWE = Byte.parseByte(s);
} else {
HOFWWE = Byte.MIN_VALUE;
}
}

protected final void initHOFWWL(String s) {
if (!s.trim().isEmpty()) {
HOFWWL = Byte.parseByte(s);
} else {
HOFWWL = Byte.MIN_VALUE;
}
}

protected final void initHOFWWR(String s) {
if (!s.trim().isEmpty()) {
HOFWWR = Byte.parseByte(s);
} else {
HOFWWR = Byte.MIN_VALUE;
}
}

protected final void initHOFWWU(String s) {
if (!s.trim().isEmpty()) {
HOFWWU = Byte.parseByte(s);
} else {
HOFWWU = Byte.MIN_VALUE;
}
}

protected final void initHOFXS(String s) {
if (!s.trim().isEmpty()) {
HOFXS = Byte.parseByte(s);
} else {
HOFXS = Byte.MIN_VALUE;
}
}

protected final void initHOFXSE(String s) {
if (!s.trim().isEmpty()) {
HOFXSE = Byte.parseByte(s);
} else {
HOFXSE = Byte.MIN_VALUE;
}
}

protected final void initHOFXSL(String s) {
if (!s.trim().isEmpty()) {
HOFXSL = Byte.parseByte(s);
} else {
HOFXSL = Byte.MIN_VALUE;
}
}

protected final void initHOFXSR(String s) {
if (!s.trim().isEmpty()) {
HOFXSR = Byte.parseByte(s);
} else {
HOFXSR = Byte.MIN_VALUE;
}
}

protected final void initHOFXSU(String s) {
if (!s.trim().isEmpty()) {
HOFXSU = Byte.parseByte(s);
} else {
HOFXSU = Byte.MIN_VALUE;
}
}

protected final void initHOFXW(String s) {
if (!s.trim().isEmpty()) {
HOFXW = Byte.parseByte(s);
} else {
HOFXW = Byte.MIN_VALUE;
}
}

protected final void initHOFXWE(String s) {
if (!s.trim().isEmpty()) {
HOFXWE = Byte.parseByte(s);
} else {
HOFXWE = Byte.MIN_VALUE;
}
}

protected final void initHOFXWL(String s) {
if (!s.trim().isEmpty()) {
HOFXWL = Byte.parseByte(s);
} else {
HOFXWL = Byte.MIN_VALUE;
}
}

protected final void initHOFXWR(String s) {
if (!s.trim().isEmpty()) {
HOFXWR = Byte.parseByte(s);
} else {
HOFXWR = Byte.MIN_VALUE;
}
}

protected final void initHOFXWU(String s) {
if (!s.trim().isEmpty()) {
HOFXWU = Byte.parseByte(s);
} else {
HOFXWU = Byte.MIN_VALUE;
}
}

protected final void initHOGBMS(String s) {
if (!s.trim().isEmpty()) {
HOGBMS = Short.parseShort(s);
} else {
HOGBMS = Short.MIN_VALUE;
}
}

protected final void initHOGBMSE(String s) {
if (!s.trim().isEmpty()) {
HOGBMSE = Byte.parseByte(s);
} else {
HOGBMSE = Byte.MIN_VALUE;
}
}

protected final void initHOGBMSL(String s) {
if (!s.trim().isEmpty()) {
HOGBMSL = Byte.parseByte(s);
} else {
HOGBMSL = Byte.MIN_VALUE;
}
}

protected final void initHOGBMSR(String s) {
if (!s.trim().isEmpty()) {
HOGBMSR = Byte.parseByte(s);
} else {
HOGBMSR = Byte.MIN_VALUE;
}
}

protected final void initHOGBMSU(String s) {
if (!s.trim().isEmpty()) {
HOGBMSU = Byte.parseByte(s);
} else {
HOGBMSU = Byte.MIN_VALUE;
}
}

protected final void initHOGBMW(String s) {
if (!s.trim().isEmpty()) {
HOGBMW = Short.parseShort(s);
} else {
HOGBMW = Short.MIN_VALUE;
}
}

protected final void initHOGBMWE(String s) {
if (!s.trim().isEmpty()) {
HOGBMWE = Byte.parseByte(s);
} else {
HOGBMWE = Byte.MIN_VALUE;
}
}

protected final void initHOGBMWL(String s) {
if (!s.trim().isEmpty()) {
HOGBMWL = Byte.parseByte(s);
} else {
HOGBMWL = Byte.MIN_VALUE;
}
}

protected final void initHOGBMWR(String s) {
if (!s.trim().isEmpty()) {
HOGBMWR = Byte.parseByte(s);
} else {
HOGBMWR = Byte.MIN_VALUE;
}
}

protected final void initHOGBMWU(String s) {
if (!s.trim().isEmpty()) {
HOGBMWU = Byte.parseByte(s);
} else {
HOGBMWU = Byte.MIN_VALUE;
}
}

protected final void initHOGBP(String s) {
if (!s.trim().isEmpty()) {
HOGBP = Byte.parseByte(s);
} else {
HOGBP = Byte.MIN_VALUE;
}
}

protected final void initHOGBQS(String s) {
if (!s.trim().isEmpty()) {
HOGBQS = Short.parseShort(s);
} else {
HOGBQS = Short.MIN_VALUE;
}
}

protected final void initHOGBQSE(String s) {
if (!s.trim().isEmpty()) {
HOGBQSE = Byte.parseByte(s);
} else {
HOGBQSE = Byte.MIN_VALUE;
}
}

protected final void initHOGBQSL(String s) {
if (!s.trim().isEmpty()) {
HOGBQSL = Short.parseShort(s);
} else {
HOGBQSL = Short.MIN_VALUE;
}
}

protected final void initHOGBQSR(String s) {
if (!s.trim().isEmpty()) {
HOGBQSR = Byte.parseByte(s);
} else {
HOGBQSR = Byte.MIN_VALUE;
}
}

protected final void initHOGBQSU(String s) {
if (!s.trim().isEmpty()) {
HOGBQSU = Short.parseShort(s);
} else {
HOGBQSU = Short.MIN_VALUE;
}
}

protected final void initHOGBQW(String s) {
if (!s.trim().isEmpty()) {
HOGBQW = Short.parseShort(s);
} else {
HOGBQW = Short.MIN_VALUE;
}
}

protected final void initHOGBQWE(String s) {
if (!s.trim().isEmpty()) {
HOGBQWE = Byte.parseByte(s);
} else {
HOGBQWE = Byte.MIN_VALUE;
}
}

protected final void initHOGBQWL(String s) {
if (!s.trim().isEmpty()) {
HOGBQWL = Short.parseShort(s);
} else {
HOGBQWL = Short.MIN_VALUE;
}
}

protected final void initHOGBQWR(String s) {
if (!s.trim().isEmpty()) {
HOGBQWR = Byte.parseByte(s);
} else {
HOGBQWR = Byte.MIN_VALUE;
}
}

protected final void initHOGBQWU(String s) {
if (!s.trim().isEmpty()) {
HOGBQWU = Short.parseShort(s);
} else {
HOGBQWU = Short.MIN_VALUE;
}
}

protected final void initHOGD(String s) {
if (!s.trim().isEmpty()) {
HOGD = Byte.parseByte(s);
} else {
HOGD = Byte.MIN_VALUE;
}
}

protected final void initHOGDM(String s) {
if (!s.trim().isEmpty()) {
HOGDM = Short.parseShort(s);
} else {
HOGDM = Short.MIN_VALUE;
}
}

protected final void initHOGDME(String s) {
if (!s.trim().isEmpty()) {
HOGDME = Byte.parseByte(s);
} else {
HOGDME = Byte.MIN_VALUE;
}
}

protected final void initHOGDML(String s) {
if (!s.trim().isEmpty()) {
HOGDML = Byte.parseByte(s);
} else {
HOGDML = Byte.MIN_VALUE;
}
}

protected final void initHOGDMR(String s) {
if (!s.trim().isEmpty()) {
HOGDMR = Byte.parseByte(s);
} else {
HOGDMR = Byte.MIN_VALUE;
}
}

protected final void initHOGDMU(String s) {
if (!s.trim().isEmpty()) {
HOGDMU = Byte.parseByte(s);
} else {
HOGDMU = Byte.MIN_VALUE;
}
}

protected final void initHOGDQ(String s) {
if (!s.trim().isEmpty()) {
HOGDQ = Short.parseShort(s);
} else {
HOGDQ = Short.MIN_VALUE;
}
}

protected final void initHOGDQE(String s) {
if (!s.trim().isEmpty()) {
HOGDQE = Byte.parseByte(s);
} else {
HOGDQE = Byte.MIN_VALUE;
}
}

protected final void initHOGDQL(String s) {
if (!s.trim().isEmpty()) {
HOGDQL = Short.parseShort(s);
} else {
HOGDQL = Short.MIN_VALUE;
}
}

protected final void initHOGDQR(String s) {
if (!s.trim().isEmpty()) {
HOGDQR = Byte.parseByte(s);
} else {
HOGDQR = Byte.MIN_VALUE;
}
}

protected final void initHOGDQU(String s) {
if (!s.trim().isEmpty()) {
HOGDQU = Short.parseShort(s);
} else {
HOGDQU = Short.MIN_VALUE;
}
}

protected final void initHOGOS(String s) {
if (!s.trim().isEmpty()) {
HOGOS = Byte.parseByte(s);
} else {
HOGOS = Byte.MIN_VALUE;
}
}

protected final void initHOGOSE(String s) {
if (!s.trim().isEmpty()) {
HOGOSE = Byte.parseByte(s);
} else {
HOGOSE = Byte.MIN_VALUE;
}
}

protected final void initHOGOSL(String s) {
if (!s.trim().isEmpty()) {
HOGOSL = Byte.parseByte(s);
} else {
HOGOSL = Byte.MIN_VALUE;
}
}

protected final void initHOGOSR(String s) {
if (!s.trim().isEmpty()) {
HOGOSR = Byte.parseByte(s);
} else {
HOGOSR = Byte.MIN_VALUE;
}
}

protected final void initHOGOSU(String s) {
if (!s.trim().isEmpty()) {
HOGOSU = Byte.parseByte(s);
} else {
HOGOSU = Byte.MIN_VALUE;
}
}

protected final void initHOGOW(String s) {
if (!s.trim().isEmpty()) {
HOGOW = Byte.parseByte(s);
} else {
HOGOW = Byte.MIN_VALUE;
}
}

protected final void initHOGOWE(String s) {
if (!s.trim().isEmpty()) {
HOGOWE = Byte.parseByte(s);
} else {
HOGOWE = Byte.MIN_VALUE;
}
}

protected final void initHOGOWL(String s) {
if (!s.trim().isEmpty()) {
HOGOWL = Byte.parseByte(s);
} else {
HOGOWL = Byte.MIN_VALUE;
}
}

protected final void initHOGOWR(String s) {
if (!s.trim().isEmpty()) {
HOGOWR = Byte.parseByte(s);
} else {
HOGOWR = Byte.MIN_VALUE;
}
}

protected final void initHOGOWU(String s) {
if (!s.trim().isEmpty()) {
HOGOWU = Byte.parseByte(s);
} else {
HOGOWU = Byte.MIN_VALUE;
}
}

protected final void initHOGPAY(String s) {
if (!s.trim().isEmpty()) {
HOGPAY = Byte.parseByte(s);
} else {
HOGPAY = Byte.MIN_VALUE;
}
}

protected final void initHOGPS(String s) {
if (!s.trim().isEmpty()) {
HOGPS = Byte.parseByte(s);
} else {
HOGPS = Byte.MIN_VALUE;
}
}

protected final void initHOGPSE(String s) {
if (!s.trim().isEmpty()) {
HOGPSE = Byte.parseByte(s);
} else {
HOGPSE = Byte.MIN_VALUE;
}
}

protected final void initHOGPSL(String s) {
if (!s.trim().isEmpty()) {
HOGPSL = Byte.parseByte(s);
} else {
HOGPSL = Byte.MIN_VALUE;
}
}

protected final void initHOGPSR(String s) {
if (!s.trim().isEmpty()) {
HOGPSR = Byte.parseByte(s);
} else {
HOGPSR = Byte.MIN_VALUE;
}
}

protected final void initHOGPSU(String s) {
if (!s.trim().isEmpty()) {
HOGPSU = Byte.parseByte(s);
} else {
HOGPSU = Byte.MIN_VALUE;
}
}

protected final void initHOGPW(String s) {
if (!s.trim().isEmpty()) {
HOGPW = Byte.parseByte(s);
} else {
HOGPW = Byte.MIN_VALUE;
}
}

protected final void initHOGPWE(String s) {
if (!s.trim().isEmpty()) {
HOGPWE = Byte.parseByte(s);
} else {
HOGPWE = Byte.MIN_VALUE;
}
}

protected final void initHOGPWL(String s) {
if (!s.trim().isEmpty()) {
HOGPWL = Byte.parseByte(s);
} else {
HOGPWL = Byte.MIN_VALUE;
}
}

protected final void initHOGPWR(String s) {
if (!s.trim().isEmpty()) {
HOGPWR = Byte.parseByte(s);
} else {
HOGPWR = Byte.MIN_VALUE;
}
}

protected final void initHOGPWU(String s) {
if (!s.trim().isEmpty()) {
HOGPWU = Byte.parseByte(s);
} else {
HOGPWU = Byte.MIN_VALUE;
}
}

protected final void initHOHAV95(String s) {
if (!s.trim().isEmpty()) {
HOHAV95 = Byte.parseByte(s);
} else {
HOHAV95 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV96(String s) {
if (!s.trim().isEmpty()) {
HOHAV96 = Byte.parseByte(s);
} else {
HOHAV96 = Byte.MIN_VALUE;
}
}

protected final void initHOHAVB95(String s) {
if (!s.trim().isEmpty()) {
HOHAVB95 = Byte.parseByte(s);
} else {
HOHAVB95 = Byte.MIN_VALUE;
}
}

protected final void initHOHAVB96(String s) {
if (!s.trim().isEmpty()) {
HOHAVB96 = Byte.parseByte(s);
} else {
HOHAVB96 = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBCD(String s) {
if (!s.trim().isEmpty()) {
HOHAVBCD = Byte.parseByte(s);
} else {
HOHAVBCD = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBDT(String s) {
if (!s.trim().isEmpty()) {
HOHAVBDT = Byte.parseByte(s);
} else {
HOHAVBDT = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBDV(String s) {
if (!s.trim().isEmpty()) {
HOHAVBDV = Byte.parseByte(s);
} else {
HOHAVBDV = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBDW(String s) {
if (!s.trim().isEmpty()) {
HOHAVBDW = Byte.parseByte(s);
} else {
HOHAVBDW = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBFF(String s) {
if (!s.trim().isEmpty()) {
HOHAVBFF = Byte.parseByte(s);
} else {
HOHAVBFF = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBMO(String s) {
if (!s.trim().isEmpty()) {
HOHAVBMO = Byte.parseByte(s);
} else {
HOHAVBMO = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBPC(String s) {
if (!s.trim().isEmpty()) {
HOHAVBPC = Byte.parseByte(s);
} else {
HOHAVBPC = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBPH(String s) {
if (!s.trim().isEmpty()) {
HOHAVBPH = Byte.parseByte(s);
} else {
HOHAVBPH = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBTV(String s) {
if (!s.trim().isEmpty()) {
HOHAVBTV = Byte.parseByte(s);
} else {
HOHAVBTV = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBVR(String s) {
if (!s.trim().isEmpty()) {
HOHAVBVR = Byte.parseByte(s);
} else {
HOHAVBVR = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBWD(String s) {
if (!s.trim().isEmpty()) {
HOHAVBWD = Byte.parseByte(s);
} else {
HOHAVBWD = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBWM(String s) {
if (!s.trim().isEmpty()) {
HOHAVBWM = Byte.parseByte(s);
} else {
HOHAVBWM = Byte.MIN_VALUE;
}
}

protected final void initHOHAVCD(String s) {
if (!s.trim().isEmpty()) {
HOHAVCD = Byte.parseByte(s);
} else {
HOHAVCD = Byte.MIN_VALUE;
}
}

protected final void initHOHAVDT(String s) {
if (!s.trim().isEmpty()) {
HOHAVDT = Byte.parseByte(s);
} else {
HOHAVDT = Byte.MIN_VALUE;
}
}

protected final void initHOHAVDV(String s) {
if (!s.trim().isEmpty()) {
HOHAVDV = Byte.parseByte(s);
} else {
HOHAVDV = Byte.MIN_VALUE;
}
}

protected final void initHOHAVDW(String s) {
if (!s.trim().isEmpty()) {
HOHAVDW = Byte.parseByte(s);
} else {
HOHAVDW = Byte.MIN_VALUE;
}
}

protected final void initHOHAVFF(String s) {
if (!s.trim().isEmpty()) {
HOHAVFF = Byte.parseByte(s);
} else {
HOHAVFF = Byte.MIN_VALUE;
}
}

protected final void initHOHAVMO(String s) {
if (!s.trim().isEmpty()) {
HOHAVMO = Byte.parseByte(s);
} else {
HOHAVMO = Byte.MIN_VALUE;
}
}

protected final void initHOHAVPC(String s) {
if (!s.trim().isEmpty()) {
HOHAVPC = Byte.parseByte(s);
} else {
HOHAVPC = Byte.MIN_VALUE;
}
}

protected final void initHOHAVPH(String s) {
if (!s.trim().isEmpty()) {
HOHAVPH = Byte.parseByte(s);
} else {
HOHAVPH = Byte.MIN_VALUE;
}
}

protected final void initHOHAVTV(String s) {
if (!s.trim().isEmpty()) {
HOHAVTV = Byte.parseByte(s);
} else {
HOHAVTV = Byte.MIN_VALUE;
}
}

protected final void initHOHAVVR(String s) {
if (!s.trim().isEmpty()) {
HOHAVVR = Byte.parseByte(s);
} else {
HOHAVVR = Byte.MIN_VALUE;
}
}

protected final void initHOHAVWD(String s) {
if (!s.trim().isEmpty()) {
HOHAVWD = Byte.parseByte(s);
} else {
HOHAVWD = Byte.MIN_VALUE;
}
}

protected final void initHOHAVWM(String s) {
if (!s.trim().isEmpty()) {
HOHAVWM = Byte.parseByte(s);
} else {
HOHAVWM = Byte.MIN_VALUE;
}
}

protected final void initHOHB95(String s) {
if (!s.trim().isEmpty()) {
HOHB95 = Byte.parseByte(s);
} else {
HOHB95 = Byte.MIN_VALUE;
}
}

protected final void initHOHB96(String s) {
if (!s.trim().isEmpty()) {
HOHB96 = Byte.parseByte(s);
} else {
HOHB96 = Byte.MIN_VALUE;
}
}

protected final void initHOHBA(String s) {
if (!s.trim().isEmpty()) {
HOHBA = Short.parseShort(s);
} else {
HOHBA = Short.MIN_VALUE;
}
}

protected final void initHOHBAFE(String s) {
if (!s.trim().isEmpty()) {
HOHBAFE = Byte.parseByte(s);
} else {
HOHBAFE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAFL(String s) {
if (!s.trim().isEmpty()) {
HOHBAFL = Byte.parseByte(s);
} else {
HOHBAFL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAFR(String s) {
if (!s.trim().isEmpty()) {
HOHBAFR = Byte.parseByte(s);
} else {
HOHBAFR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAFU(String s) {
if (!s.trim().isEmpty()) {
HOHBAFU = Byte.parseByte(s);
} else {
HOHBAFU = Byte.MIN_VALUE;
}
}

protected final void initHOHBAME(String s) {
if (!s.trim().isEmpty()) {
HOHBAME = Byte.parseByte(s);
} else {
HOHBAME = Byte.MIN_VALUE;
}
}

protected final void initHOHBAML(String s) {
if (!s.trim().isEmpty()) {
HOHBAML = Short.parseShort(s);
} else {
HOHBAML = Short.MIN_VALUE;
}
}

protected final void initHOHBAMR(String s) {
if (!s.trim().isEmpty()) {
HOHBAMR = Byte.parseByte(s);
} else {
HOHBAMR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAMU(String s) {
if (!s.trim().isEmpty()) {
HOHBAMU = Short.parseShort(s);
} else {
HOHBAMU = Short.MIN_VALUE;
}
}

protected final void initHOHBAOE(String s) {
if (!s.trim().isEmpty()) {
HOHBAOE = Byte.parseByte(s);
} else {
HOHBAOE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAOL(String s) {
if (!s.trim().isEmpty()) {
HOHBAOL = Byte.parseByte(s);
} else {
HOHBAOL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAOR(String s) {
if (!s.trim().isEmpty()) {
HOHBAOR = Byte.parseByte(s);
} else {
HOHBAOR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAOU(String s) {
if (!s.trim().isEmpty()) {
HOHBAOU = Short.parseShort(s);
} else {
HOHBAOU = Short.MIN_VALUE;
}
}

protected final void initHOHBAWE(String s) {
if (!s.trim().isEmpty()) {
HOHBAWE = Byte.parseByte(s);
} else {
HOHBAWE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAWL(String s) {
if (!s.trim().isEmpty()) {
HOHBAWL = Byte.parseByte(s);
} else {
HOHBAWL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAWR(String s) {
if (!s.trim().isEmpty()) {
HOHBAWR = Byte.parseByte(s);
} else {
HOHBAWR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAWU(String s) {
if (!s.trim().isEmpty()) {
HOHBAWU = Byte.parseByte(s);
} else {
HOHBAWU = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYE(String s) {
if (!s.trim().isEmpty()) {
HOHBAYE = Byte.parseByte(s);
} else {
HOHBAYE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYL(String s) {
if (!s.trim().isEmpty()) {
HOHBAYL = Byte.parseByte(s);
} else {
HOHBAYL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYR(String s) {
if (!s.trim().isEmpty()) {
HOHBAYR = Byte.parseByte(s);
} else {
HOHBAYR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYU(String s) {
if (!s.trim().isEmpty()) {
HOHBAYU = Byte.parseByte(s);
} else {
HOHBAYU = Byte.MIN_VALUE;
}
}

protected final void initHOHBCK(String s) {
if (!s.trim().isEmpty()) {
HOHBCK = Byte.parseByte(s);
} else {
HOHBCK = Byte.MIN_VALUE;
}
}

protected final void initHOHBCL(String s) {
if (!s.trim().isEmpty()) {
HOHBCL = Byte.parseByte(s);
} else {
HOHBCL = Byte.MIN_VALUE;
}
}

protected final void initHOHBEN(String s) {
if (!s.trim().isEmpty()) {
HOHBEN = Byte.parseByte(s);
} else {
HOHBEN = Byte.MIN_VALUE;
}
}

protected final void initHOHBGA(String s) {
if (!s.trim().isEmpty()) {
HOHBGA = Byte.parseByte(s);
} else {
HOHBGA = Byte.MIN_VALUE;
}
}

protected final void initHOHBM85(String s) {
if (!s.trim().isEmpty()) {
HOHBM85 = Byte.parseByte(s);
} else {
HOHBM85 = Byte.MIN_VALUE;
}
}

protected final void initHOHBM86(String s) {
if (!s.trim().isEmpty()) {
HOHBM86 = Byte.parseByte(s);
} else {
HOHBM86 = Byte.MIN_VALUE;
}
}

protected final void initHOHBM95(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOHBM95 = false;
} else {
HOHBM95 = true;
}
}
}

protected final void initHOHBM96(String s) {
if (!s.trim().isEmpty()) {
HOHBM96 = Byte.parseByte(s);
} else {
HOHBM96 = Byte.MIN_VALUE;
}
}

protected final void initHOHBMCL(String s) {
if (!s.trim().isEmpty()) {
HOHBMCL = Byte.parseByte(s);
} else {
HOHBMCL = Byte.MIN_VALUE;
}
}

protected final void initHOHBME(String s) {
if (!s.trim().isEmpty()) {
HOHBME = Byte.parseByte(s);
} else {
HOHBME = Byte.MIN_VALUE;
}
}

protected final void initHOHBMGA(String s) {
if (!s.trim().isEmpty()) {
HOHBMGA = Byte.parseByte(s);
} else {
HOHBMGA = Byte.MIN_VALUE;
}
}

protected final void initHOHBMME(String s) {
if (!s.trim().isEmpty()) {
HOHBMME = Byte.parseByte(s);
} else {
HOHBMME = Byte.MIN_VALUE;
}
}

protected final void initHOHBMSG(String s) {
if (!s.trim().isEmpty()) {
HOHBMSG = Byte.parseByte(s);
} else {
HOHBMSG = Byte.MIN_VALUE;
}
}

protected final void initHOHBMWP(String s) {
if (!s.trim().isEmpty()) {
HOHBMWP = Byte.parseByte(s);
} else {
HOHBMWP = Byte.MIN_VALUE;
}
}

protected final void initHOHBP(String s) {
if (!s.trim().isEmpty()) {
HOHBP = Byte.parseByte(s);
} else {
HOHBP = Byte.MIN_VALUE;
}
}

protected final void initHOHBSG(String s) {
if (!s.trim().isEmpty()) {
HOHBSG = Byte.parseByte(s);
} else {
HOHBSG = Byte.MIN_VALUE;
}
}

protected final void initHOHBWP(String s) {
if (!s.trim().isEmpty()) {
HOHBWP = Byte.parseByte(s);
} else {
HOHBWP = Byte.MIN_VALUE;
}
}

protected final void initHOHEA95(String s) {
if (!s.trim().isEmpty()) {
HOHEA95 = Byte.parseByte(s);
} else {
HOHEA95 = Byte.MIN_VALUE;
}
}

protected final void initHOHEA96(String s) {
if (!s.trim().isEmpty()) {
HOHEA96 = Byte.parseByte(s);
} else {
HOHEA96 = Byte.MIN_VALUE;
}
}

protected final void initHOHEAEF(String s) {
if (!s.trim().isEmpty()) {
HOHEAEF = Byte.parseByte(s);
} else {
HOHEAEF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAGF(String s) {
if (!s.trim().isEmpty()) {
HOHEAGF = Byte.parseByte(s);
} else {
HOHEAGF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAM85(String s) {
if (!s.trim().isEmpty()) {
HOHEAM85 = Byte.parseByte(s);
} else {
HOHEAM85 = Byte.MIN_VALUE;
}
}

protected final void initHOHEAM86(String s) {
if (!s.trim().isEmpty()) {
HOHEAM86 = Byte.parseByte(s);
} else {
HOHEAM86 = Byte.MIN_VALUE;
}
}

protected final void initHOHEAM96(String s) {
if (!s.trim().isEmpty()) {
HOHEAM96 = Byte.parseByte(s);
} else {
HOHEAM96 = Byte.MIN_VALUE;
}
}

protected final void initHOHEAMEF(String s) {
if (!s.trim().isEmpty()) {
HOHEAMEF = Byte.parseByte(s);
} else {
HOHEAMEF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAMGF(String s) {
if (!s.trim().isEmpty()) {
HOHEAMGF = Byte.parseByte(s);
} else {
HOHEAMGF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAMOF(String s) {
if (!s.trim().isEmpty()) {
HOHEAMOF = Byte.parseByte(s);
} else {
HOHEAMOF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAMPH(String s) {
if (!s.trim().isEmpty()) {
HOHEAMPH = Byte.parseByte(s);
} else {
HOHEAMPH = Byte.MIN_VALUE;
}
}

protected final void initHOHEAOF(String s) {
if (!s.trim().isEmpty()) {
HOHEAOF = Byte.parseByte(s);
} else {
HOHEAOF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAPH(String s) {
if (!s.trim().isEmpty()) {
HOHEAPH = Byte.parseByte(s);
} else {
HOHEAPH = Byte.MIN_VALUE;
}
}

protected final void initHOHV01(String s) {
if (!s.trim().isEmpty()) {
HOHV01 = Short.parseShort(s);
} else {
HOHV01 = Short.MIN_VALUE;
}
}

protected final void initHOHV01E(String s) {
if (!s.trim().isEmpty()) {
HOHV01E = Byte.parseByte(s);
} else {
HOHV01E = Byte.MIN_VALUE;
}
}

protected final void initHOHV01L(String s) {
if (!s.trim().isEmpty()) {
HOHV01L = Short.parseShort(s);
} else {
HOHV01L = Short.MIN_VALUE;
}
}

protected final void initHOHV01R(String s) {
if (!s.trim().isEmpty()) {
HOHV01R = Byte.parseByte(s);
} else {
HOHV01R = Byte.MIN_VALUE;
}
}

protected final void initHOHV01U(String s) {
if (!s.trim().isEmpty()) {
HOHV01U = Short.parseShort(s);
} else {
HOHV01U = Short.MIN_VALUE;
}
}

protected final void initHOHV02(String s) {
if (!s.trim().isEmpty()) {
HOHV02 = Short.parseShort(s);
} else {
HOHV02 = Short.MIN_VALUE;
}
}

protected final void initHOHV02E(String s) {
if (!s.trim().isEmpty()) {
HOHV02E = Byte.parseByte(s);
} else {
HOHV02E = Byte.MIN_VALUE;
}
}

protected final void initHOHV02L(String s) {
if (!s.trim().isEmpty()) {
HOHV02L = Short.parseShort(s);
} else {
HOHV02L = Short.MIN_VALUE;
}
}

protected final void initHOHV02R(String s) {
if (!s.trim().isEmpty()) {
HOHV02R = Byte.parseByte(s);
} else {
HOHV02R = Byte.MIN_VALUE;
}
}

protected final void initHOHV02U(String s) {
if (!s.trim().isEmpty()) {
HOHV02U = Short.parseShort(s);
} else {
HOHV02U = Short.MIN_VALUE;
}
}

protected final void initHOHV03(String s) {
if (!s.trim().isEmpty()) {
HOHV03 = Short.parseShort(s);
} else {
HOHV03 = Short.MIN_VALUE;
}
}

protected final void initHOHV03E(String s) {
if (!s.trim().isEmpty()) {
HOHV03E = Byte.parseByte(s);
} else {
HOHV03E = Byte.MIN_VALUE;
}
}

protected final void initHOHV03L(String s) {
if (!s.trim().isEmpty()) {
HOHV03L = Short.parseShort(s);
} else {
HOHV03L = Short.MIN_VALUE;
}
}

protected final void initHOHV03R(String s) {
if (!s.trim().isEmpty()) {
HOHV03R = Byte.parseByte(s);
} else {
HOHV03R = Byte.MIN_VALUE;
}
}

protected final void initHOHV03U(String s) {
if (!s.trim().isEmpty()) {
HOHV03U = Short.parseShort(s);
} else {
HOHV03U = Short.MIN_VALUE;
}
}

protected final void initHOHV04(String s) {
if (!s.trim().isEmpty()) {
HOHV04 = Short.parseShort(s);
} else {
HOHV04 = Short.MIN_VALUE;
}
}

protected final void initHOHV04E(String s) {
if (!s.trim().isEmpty()) {
HOHV04E = Byte.parseByte(s);
} else {
HOHV04E = Byte.MIN_VALUE;
}
}

protected final void initHOHV04L(String s) {
if (!s.trim().isEmpty()) {
HOHV04L = Short.parseShort(s);
} else {
HOHV04L = Short.MIN_VALUE;
}
}

protected final void initHOHV04R(String s) {
if (!s.trim().isEmpty()) {
HOHV04R = Byte.parseByte(s);
} else {
HOHV04R = Byte.MIN_VALUE;
}
}

protected final void initHOHV04U(String s) {
if (!s.trim().isEmpty()) {
HOHV04U = Short.parseShort(s);
} else {
HOHV04U = Short.MIN_VALUE;
}
}

protected final void initHOHV05(String s) {
if (!s.trim().isEmpty()) {
HOHV05 = Short.parseShort(s);
} else {
HOHV05 = Short.MIN_VALUE;
}
}

protected final void initHOHV05E(String s) {
if (!s.trim().isEmpty()) {
HOHV05E = Byte.parseByte(s);
} else {
HOHV05E = Byte.MIN_VALUE;
}
}

protected final void initHOHV05L(String s) {
if (!s.trim().isEmpty()) {
HOHV05L = Short.parseShort(s);
} else {
HOHV05L = Short.MIN_VALUE;
}
}

protected final void initHOHV05R(String s) {
if (!s.trim().isEmpty()) {
HOHV05R = Byte.parseByte(s);
} else {
HOHV05R = Byte.MIN_VALUE;
}
}

protected final void initHOHV05U(String s) {
if (!s.trim().isEmpty()) {
HOHV05U = Short.parseShort(s);
} else {
HOHV05U = Short.MIN_VALUE;
}
}

protected final void initHOHV06(String s) {
if (!s.trim().isEmpty()) {
HOHV06 = Short.parseShort(s);
} else {
HOHV06 = Short.MIN_VALUE;
}
}

protected final void initHOHV06E(String s) {
if (!s.trim().isEmpty()) {
HOHV06E = Byte.parseByte(s);
} else {
HOHV06E = Byte.MIN_VALUE;
}
}

protected final void initHOHV06L(String s) {
if (!s.trim().isEmpty()) {
HOHV06L = Short.parseShort(s);
} else {
HOHV06L = Short.MIN_VALUE;
}
}

protected final void initHOHV06R(String s) {
if (!s.trim().isEmpty()) {
HOHV06R = Byte.parseByte(s);
} else {
HOHV06R = Byte.MIN_VALUE;
}
}

protected final void initHOHV06U(String s) {
if (!s.trim().isEmpty()) {
HOHV06U = Short.parseShort(s);
} else {
HOHV06U = Short.MIN_VALUE;
}
}

protected final void initHOHV07(String s) {
if (!s.trim().isEmpty()) {
HOHV07 = Short.parseShort(s);
} else {
HOHV07 = Short.MIN_VALUE;
}
}

protected final void initHOHV07E(String s) {
if (!s.trim().isEmpty()) {
HOHV07E = Byte.parseByte(s);
} else {
HOHV07E = Byte.MIN_VALUE;
}
}

protected final void initHOHV07L(String s) {
if (!s.trim().isEmpty()) {
HOHV07L = Short.parseShort(s);
} else {
HOHV07L = Short.MIN_VALUE;
}
}

protected final void initHOHV07R(String s) {
if (!s.trim().isEmpty()) {
HOHV07R = Byte.parseByte(s);
} else {
HOHV07R = Byte.MIN_VALUE;
}
}

protected final void initHOHV07U(String s) {
if (!s.trim().isEmpty()) {
HOHV07U = Short.parseShort(s);
} else {
HOHV07U = Short.MIN_VALUE;
}
}

protected final void initHOHV08(String s) {
if (!s.trim().isEmpty()) {
HOHV08 = Short.parseShort(s);
} else {
HOHV08 = Short.MIN_VALUE;
}
}

protected final void initHOHV08E(String s) {
if (!s.trim().isEmpty()) {
HOHV08E = Byte.parseByte(s);
} else {
HOHV08E = Byte.MIN_VALUE;
}
}

protected final void initHOHV08L(String s) {
if (!s.trim().isEmpty()) {
HOHV08L = Short.parseShort(s);
} else {
HOHV08L = Short.MIN_VALUE;
}
}

protected final void initHOHV08R(String s) {
if (!s.trim().isEmpty()) {
HOHV08R = Byte.parseByte(s);
} else {
HOHV08R = Byte.MIN_VALUE;
}
}

protected final void initHOHV08U(String s) {
if (!s.trim().isEmpty()) {
HOHV08U = Short.parseShort(s);
} else {
HOHV08U = Short.MIN_VALUE;
}
}

protected final void initHOHV09(String s) {
if (!s.trim().isEmpty()) {
HOHV09 = Short.parseShort(s);
} else {
HOHV09 = Short.MIN_VALUE;
}
}

protected final void initHOHV09E(String s) {
if (!s.trim().isEmpty()) {
HOHV09E = Byte.parseByte(s);
} else {
HOHV09E = Byte.MIN_VALUE;
}
}

protected final void initHOHV09L(String s) {
if (!s.trim().isEmpty()) {
HOHV09L = Short.parseShort(s);
} else {
HOHV09L = Short.MIN_VALUE;
}
}

protected final void initHOHV09R(String s) {
if (!s.trim().isEmpty()) {
HOHV09R = Byte.parseByte(s);
} else {
HOHV09R = Byte.MIN_VALUE;
}
}

protected final void initHOHV09U(String s) {
if (!s.trim().isEmpty()) {
HOHV09U = Short.parseShort(s);
} else {
HOHV09U = Short.MIN_VALUE;
}
}

protected final void initHOHV10(String s) {
if (!s.trim().isEmpty()) {
HOHV10 = Short.parseShort(s);
} else {
HOHV10 = Short.MIN_VALUE;
}
}

protected final void initHOHV10E(String s) {
if (!s.trim().isEmpty()) {
HOHV10E = Byte.parseByte(s);
} else {
HOHV10E = Byte.MIN_VALUE;
}
}

protected final void initHOHV10L(String s) {
if (!s.trim().isEmpty()) {
HOHV10L = Short.parseShort(s);
} else {
HOHV10L = Short.MIN_VALUE;
}
}

protected final void initHOHV10R(String s) {
if (!s.trim().isEmpty()) {
HOHV10R = Byte.parseByte(s);
} else {
HOHV10R = Byte.MIN_VALUE;
}
}

protected final void initHOHV10U(String s) {
if (!s.trim().isEmpty()) {
HOHV10U = Short.parseShort(s);
} else {
HOHV10U = Short.MIN_VALUE;
}
}

protected final void initHOHV11(String s) {
if (!s.trim().isEmpty()) {
HOHV11 = Short.parseShort(s);
} else {
HOHV11 = Short.MIN_VALUE;
}
}

protected final void initHOHV11E(String s) {
if (!s.trim().isEmpty()) {
HOHV11E = Byte.parseByte(s);
} else {
HOHV11E = Byte.MIN_VALUE;
}
}

protected final void initHOHV11L(String s) {
if (!s.trim().isEmpty()) {
HOHV11L = Short.parseShort(s);
} else {
HOHV11L = Short.MIN_VALUE;
}
}

protected final void initHOHV11R(String s) {
if (!s.trim().isEmpty()) {
HOHV11R = Byte.parseByte(s);
} else {
HOHV11R = Byte.MIN_VALUE;
}
}

protected final void initHOHV11U(String s) {
if (!s.trim().isEmpty()) {
HOHV11U = Short.parseShort(s);
} else {
HOHV11U = Short.MIN_VALUE;
}
}

protected final void initHOHV12(String s) {
if (!s.trim().isEmpty()) {
HOHV12 = Short.parseShort(s);
} else {
HOHV12 = Short.MIN_VALUE;
}
}

protected final void initHOHV12E(String s) {
if (!s.trim().isEmpty()) {
HOHV12E = Byte.parseByte(s);
} else {
HOHV12E = Byte.MIN_VALUE;
}
}

protected final void initHOHV12L(String s) {
if (!s.trim().isEmpty()) {
HOHV12L = Short.parseShort(s);
} else {
HOHV12L = Short.MIN_VALUE;
}
}

protected final void initHOHV12R(String s) {
if (!s.trim().isEmpty()) {
HOHV12R = Byte.parseByte(s);
} else {
HOHV12R = Byte.MIN_VALUE;
}
}

protected final void initHOHV12U(String s) {
if (!s.trim().isEmpty()) {
HOHV12U = Short.parseShort(s);
} else {
HOHV12U = Short.MIN_VALUE;
}
}

protected final void initHOINA95(String s) {
if (!s.trim().isEmpty()) {
HOINA95 = Byte.parseByte(s);
} else {
HOINA95 = Byte.MIN_VALUE;
}
}

protected final void initHOINA96(String s) {
if (!s.trim().isEmpty()) {
HOINA96 = Byte.parseByte(s);
} else {
HOINA96 = Byte.MIN_VALUE;
}
}

protected final void initHOINACL(String s) {
if (!s.trim().isEmpty()) {
HOINACL = Byte.parseByte(s);
} else {
HOINACL = Byte.MIN_VALUE;
}
}

protected final void initHOINAGD(String s) {
if (!s.trim().isEmpty()) {
HOINAGD = Byte.parseByte(s);
} else {
HOINAGD = Byte.MIN_VALUE;
}
}

protected final void initHOINAM85(String s) {
if (!s.trim().isEmpty()) {
HOINAM85 = Byte.parseByte(s);
} else {
HOINAM85 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM86(String s) {
if (!s.trim().isEmpty()) {
HOINAM86 = Byte.parseByte(s);
} else {
HOINAM86 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM95(String s) {
if (!s.trim().isEmpty()) {
HOINAM95 = Byte.parseByte(s);
} else {
HOINAM95 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM96(String s) {
if (!s.trim().isEmpty()) {
HOINAM96 = Byte.parseByte(s);
} else {
HOINAM96 = Byte.MIN_VALUE;
}
}

protected final void initHOINAMCL(String s) {
if (!s.trim().isEmpty()) {
HOINAMCL = Byte.parseByte(s);
} else {
HOINAMCL = Byte.MIN_VALUE;
}
}

protected final void initHOINAME(String s) {
if (!s.trim().isEmpty()) {
HOINAME = Byte.parseByte(s);
} else {
HOINAME = Byte.MIN_VALUE;
}
}

protected final void initHOINAMGD(String s) {
if (!s.trim().isEmpty()) {
HOINAMGD = Byte.parseByte(s);
} else {
HOINAMGD = Byte.MIN_VALUE;
}
}

protected final void initHOINAMME(String s) {
if (!s.trim().isEmpty()) {
HOINAMME = Byte.parseByte(s);
} else {
HOINAMME = Byte.MIN_VALUE;
}
}

protected final void initHOINAMSG(String s) {
if (!s.trim().isEmpty()) {
HOINAMSG = Byte.parseByte(s);
} else {
HOINAMSG = Byte.MIN_VALUE;
}
}

protected final void initHOINAMWP(String s) {
if (!s.trim().isEmpty()) {
HOINAMWP = Byte.parseByte(s);
} else {
HOINAMWP = Byte.MIN_VALUE;
}
}

protected final void initHOINASG(String s) {
if (!s.trim().isEmpty()) {
HOINASG = Byte.parseByte(s);
} else {
HOINASG = Byte.MIN_VALUE;
}
}

protected final void initHOINAWP(String s) {
if (!s.trim().isEmpty()) {
HOINAWP = Byte.parseByte(s);
} else {
HOINAWP = Byte.MIN_VALUE;
}
}

protected final void initHOINC96(String s) {
if (!s.trim().isEmpty()) {
HOINC96 = Byte.parseByte(s);
} else {
HOINC96 = Byte.MIN_VALUE;
}
}

protected final void initHOINCBI(String s) {
if (!s.trim().isEmpty()) {
HOINCBI = Byte.parseByte(s);
} else {
HOINCBI = Byte.MIN_VALUE;
}
}

protected final void initHOINCL96(String s) {
if (!s.trim().isEmpty()) {
HOINCL96 = Byte.parseByte(s);
} else {
HOINCL96 = Byte.MIN_VALUE;
}
}

protected final void initHOINCLCO(String s) {
if (!s.trim().isEmpty()) {
HOINCLCO = Byte.parseByte(s);
} else {
HOINCLCO = Byte.MIN_VALUE;
}
}

protected final void initHOINCLGA(String s) {
if (!s.trim().isEmpty()) {
HOINCLGA = Byte.parseByte(s);
} else {
HOINCLGA = Byte.MIN_VALUE;
}
}

protected final void initHOINCLHE(String s) {
if (!s.trim().isEmpty()) {
HOINCLHE = Byte.parseByte(s);
} else {
HOINCLHE = Byte.MIN_VALUE;
}
}

protected final void initHOINCLLA(String s) {
if (!s.trim().isEmpty()) {
HOINCLLA = Byte.parseByte(s);
} else {
HOINCLLA = Byte.MIN_VALUE;
}
}

protected final void initHOINCLSE(String s) {
if (!s.trim().isEmpty()) {
HOINCLSE = Byte.parseByte(s);
} else {
HOINCLSE = Byte.MIN_VALUE;
}
}

protected final void initHOINCLWA(String s) {
if (!s.trim().isEmpty()) {
HOINCLWA = Byte.parseByte(s);
} else {
HOINCLWA = Byte.MIN_VALUE;
}
}

protected final void initHOINCM85(String s) {
if (!s.trim().isEmpty()) {
HOINCM85 = Byte.parseByte(s);
} else {
HOINCM85 = Byte.MIN_VALUE;
}
}

protected final void initHOINCM86(String s) {
if (!s.trim().isEmpty()) {
HOINCM86 = Byte.parseByte(s);
} else {
HOINCM86 = Byte.MIN_VALUE;
}
}

protected final void initHOINCM96(String s) {
if (!s.trim().isEmpty()) {
HOINCM96 = Byte.parseByte(s);
} else {
HOINCM96 = Byte.MIN_VALUE;
}
}

protected final void initHOINCMBI(String s) {
if (!s.trim().isEmpty()) {
HOINCMBI = Byte.parseByte(s);
} else {
HOINCMBI = Byte.MIN_VALUE;
}
}

protected final void initHOINCMOT(String s) {
if (!s.trim().isEmpty()) {
HOINCMOT = Byte.parseByte(s);
} else {
HOINCMOT = Byte.MIN_VALUE;
}
}

protected final void initHOINCMPI(String s) {
if (!s.trim().isEmpty()) {
HOINCMPI = Byte.parseByte(s);
} else {
HOINCMPI = Byte.MIN_VALUE;
}
}

protected final void initHOINCMPP(String s) {
if (!s.trim().isEmpty()) {
HOINCMPP = Byte.parseByte(s);
} else {
HOINCMPP = Byte.MIN_VALUE;
}
}

protected final void initHOINCOT(String s) {
if (!s.trim().isEmpty()) {
HOINCOT = Byte.parseByte(s);
} else {
HOINCOT = Byte.MIN_VALUE;
}
}

protected final void initHOINCPI(String s) {
if (!s.trim().isEmpty()) {
HOINCPI = Byte.parseByte(s);
} else {
HOINCPI = Byte.MIN_VALUE;
}
}

protected final void initHOINCPP(String s) {
if (!s.trim().isEmpty()) {
HOINCPP = Byte.parseByte(s);
} else {
HOINCPP = Byte.MIN_VALUE;
}
}

protected final void initHOLEIS(String s) {
if (!s.trim().isEmpty()) {
HOLEIS = Short.parseShort(s);
} else {
HOLEIS = Short.MIN_VALUE;
}
}

protected final void initHOLEISE(String s) {
if (!s.trim().isEmpty()) {
HOLEISE = Byte.parseByte(s);
} else {
HOLEISE = Byte.MIN_VALUE;
}
}

protected final void initHOLEISL(String s) {
if (!s.trim().isEmpty()) {
HOLEISL = Short.parseShort(s);
} else {
HOLEISL = Short.MIN_VALUE;
}
}

protected final void initHOLEISR(String s) {
if (!s.trim().isEmpty()) {
HOLEISR = Byte.parseByte(s);
} else {
HOLEISR = Byte.MIN_VALUE;
}
}

protected final void initHOLEISU(String s) {
if (!s.trim().isEmpty()) {
HOLEISU = Short.parseShort(s);
} else {
HOLEISU = Short.MIN_VALUE;
}
}

protected final void initHOMEXA1E(String s) {
if (!s.trim().isEmpty()) {
HOMEXA1E = Integer.parseInt(s);
} else {
HOMEXA1E = Integer.MIN_VALUE;
}
}

protected final void initHOMEXA2E(String s) {
if (!s.trim().isEmpty()) {
HOMEXA2E = Short.parseShort(s);
} else {
HOMEXA2E = Short.MIN_VALUE;
}
}

protected final void initHOMEXA3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXA3E = false;
} else {
HOMEXA3E = true;
}
}
}

protected final void initHOMEXA4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXA4E = false;
} else {
HOMEXA4E = true;
}
}
}

protected final void initHOMEXA5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXA5E = false;
} else {
HOMEXA5E = true;
}
}
}

protected final void initHOMEXE1E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXE1E = false;
} else {
HOMEXE1E = true;
}
}
}

protected final void initHOMEXE2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXE2E = false;
} else {
HOMEXE2E = true;
}
}
}

protected final void initHOMEXE3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXE3E = false;
} else {
HOMEXE3E = true;
}
}
}

protected final void initHOMEXE4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXE4E = false;
} else {
HOMEXE4E = true;
}
}
}

protected final void initHOMEXE5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXE5E = false;
} else {
HOMEXE5E = true;
}
}
}

protected final void initHOMEXL1E(String s) {
if (!s.trim().isEmpty()) {
HOMEXL1E = Integer.parseInt(s);
} else {
HOMEXL1E = Integer.MIN_VALUE;
}
}

protected final void initHOMEXL2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXL2E = false;
} else {
HOMEXL2E = true;
}
}
}

protected final void initHOMEXL3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXL3E = false;
} else {
HOMEXL3E = true;
}
}
}

protected final void initHOMEXL4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXL4E = false;
} else {
HOMEXL4E = true;
}
}
}

protected final void initHOMEXL5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXL5E = false;
} else {
HOMEXL5E = true;
}
}
}

protected final void initHOMEXR1E(String s) {
if (!s.trim().isEmpty()) {
HOMEXR1E = Byte.parseByte(s);
} else {
HOMEXR1E = Byte.MIN_VALUE;
}
}

protected final void initHOMEXR2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXR2E = false;
} else {
HOMEXR2E = true;
}
}
}

protected final void initHOMEXR3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXR3E = false;
} else {
HOMEXR3E = true;
}
}
}

protected final void initHOMEXR4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXR4E = false;
} else {
HOMEXR4E = true;
}
}
}

protected final void initHOMEXR5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXR5E = false;
} else {
HOMEXR5E = true;
}
}
}

protected final void initHOMEXT1E(String s) {
if (!s.trim().isEmpty()) {
HOMEXT1E = Byte.parseByte(s);
} else {
HOMEXT1E = Byte.MIN_VALUE;
}
}

protected final void initHOMEXT2E(String s) {
if (!s.trim().isEmpty()) {
HOMEXT2E = Byte.parseByte(s);
} else {
HOMEXT2E = Byte.MIN_VALUE;
}
}

protected final void initHOMEXT3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXT3E = false;
} else {
HOMEXT3E = true;
}
}
}

protected final void initHOMEXT4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXT4E = false;
} else {
HOMEXT4E = true;
}
}
}

protected final void initHOMEXT5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXT5E = false;
} else {
HOMEXT5E = true;
}
}
}

protected final void initHOMEXU1E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HOMEXU1E = false;
} else {
HOMEXU1E = true;
}
}
}

protected final void initHOMEXU2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXU2E = false;
} else {
HOMEXU2E = true;
}
}
}

protected final void initHOMEXU3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXU3E = false;
} else {
HOMEXU3E = true;
}
}
}

protected final void initHOMEXU4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXU4E = false;
} else {
HOMEXU4E = true;
}
}
}

protected final void initHOMEXU5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMEXU5E = false;
} else {
HOMEXU5E = true;
}
}
}

protected final void initHOMFV1A(String s) {
if (!s.trim().isEmpty()) {
HOMFV1A = Byte.parseByte(s);
} else {
HOMFV1A = Byte.MIN_VALUE;
}
}

protected final void initHOMFV1E(String s) {
if (!s.trim().isEmpty()) {
HOMFV1E = Byte.parseByte(s);
} else {
HOMFV1E = Byte.MIN_VALUE;
}
}

protected final void initHOMFV1M(String s) {
if (!s.trim().isEmpty()) {
HOMFV1M = Byte.parseByte(s);
} else {
HOMFV1M = Byte.MIN_VALUE;
}
}

protected final void initHOMFV1N(String s) {
if (!s.trim().isEmpty()) {
HOMFV1N = Byte.parseByte(s);
} else {
HOMFV1N = Byte.MIN_VALUE;
}
}

protected final void initHOMFV2A(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMFV2A = false;
} else {
HOMFV2A = true;
}
}
}

protected final void initHOMFV2E(String s) {
if (!s.trim().isEmpty()) {
HOMFV2E = Byte.parseByte(s);
} else {
HOMFV2E = Byte.MIN_VALUE;
}
}

protected final void initHOMFV2M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMFV2M = false;
} else {
HOMFV2M = true;
}
}
}

protected final void initHOMFV2N(String s) {
if (!s.trim().isEmpty()) {
HOMFV2N = Byte.parseByte(s);
} else {
HOMFV2N = Byte.MIN_VALUE;
}
}

protected final void initHOMFV3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMFV3E = false;
} else {
HOMFV3E = true;
}
}
}

protected final void initHOMFV3N(String s) {
if (!s.trim().isEmpty()) {
HOMFV3N = Byte.parseByte(s);
} else {
HOMFV3N = Byte.MIN_VALUE;
}
}

protected final void initHOMFV4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMFV4E = false;
} else {
HOMFV4E = true;
}
}
}

protected final void initHOMFV4N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMFV4N = false;
} else {
HOMFV4N = true;
}
}
}

protected final void initHOMFV5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMFV5E = false;
} else {
HOMFV5E = true;
}
}
}

protected final void initHOMFV5N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMFV5N = false;
} else {
HOMFV5N = true;
}
}
}

protected final void initHOMINC(String s) {
if (!s.trim().isEmpty()) {
HOMINC = Short.parseShort(s);
} else {
HOMINC = Short.MIN_VALUE;
}
}

protected final void initHOMINCE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMINCE = false;
} else {
HOMINCE = true;
}
}
}

protected final void initHOMINCL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMINCL = false;
} else {
HOMINCL = true;
}
}
}

protected final void initHOMINCR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMINCR = false;
} else {
HOMINCR = true;
}
}
}

protected final void initHOMINCU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMINCU = false;
} else {
HOMINCU = true;
}
}
}

protected final void initHOMM851E(String s) {
if (!s.trim().isEmpty()) {
HOMM851E = Byte.parseByte(s);
} else {
HOMM851E = Byte.MIN_VALUE;
}
}

protected final void initHOMM852E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMM852E = false;
} else {
HOMM852E = true;
}
}
}

protected final void initHOMM853E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMM853E = false;
} else {
HOMM853E = true;
}
}
}

protected final void initHOMM854E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMM854E = false;
} else {
HOMM854E = true;
}
}
}

protected final void initHOMM855E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMM855E = false;
} else {
HOMM855E = true;
}
}
}

protected final void initHOMM861E(String s) {
if (!s.trim().isEmpty()) {
HOMM861E = Byte.parseByte(s);
} else {
HOMM861E = Byte.MIN_VALUE;
}
}

protected final void initHOMM862E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMM862E = false;
} else {
HOMM862E = true;
}
}
}

protected final void initHOMM863E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMM863E = false;
} else {
HOMM863E = true;
}
}
}

protected final void initHOMM864E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMM864E = false;
} else {
HOMM864E = true;
}
}
}

protected final void initHOMM865E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMM865E = false;
} else {
HOMM865E = true;
}
}
}

protected final void initHOMMCP1E(String s) {
if (!s.trim().isEmpty()) {
HOMMCP1E = Byte.parseByte(s);
} else {
HOMMCP1E = Byte.MIN_VALUE;
}
}

protected final void initHOMMCP2E(String s) {
if (!s.trim().isEmpty()) {
HOMMCP2E = Byte.parseByte(s);
} else {
HOMMCP2E = Byte.MIN_VALUE;
}
}

protected final void initHOMMCP3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMCP3E = false;
} else {
HOMMCP3E = true;
}
}
}

protected final void initHOMMCP4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMCP4E = false;
} else {
HOMMCP4E = true;
}
}
}

protected final void initHOMMCP5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMCP5E = false;
} else {
HOMMCP5E = true;
}
}
}

protected final void initHOMMHE1E(String s) {
if (!s.trim().isEmpty()) {
HOMMHE1E = Byte.parseByte(s);
} else {
HOMMHE1E = Byte.MIN_VALUE;
}
}

protected final void initHOMMHE2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMHE2E = false;
} else {
HOMMHE2E = true;
}
}
}

protected final void initHOMMHE3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMHE3E = false;
} else {
HOMMHE3E = true;
}
}
}

protected final void initHOMMHE4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMHE4E = false;
} else {
HOMMHE4E = true;
}
}
}

protected final void initHOMMHE5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMHE5E = false;
} else {
HOMMHE5E = true;
}
}
}

protected final void initHOMMHI1E(String s) {
if (!s.trim().isEmpty()) {
HOMMHI1E = Byte.parseByte(s);
} else {
HOMMHI1E = Byte.MIN_VALUE;
}
}

protected final void initHOMMHI2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMHI2E = false;
} else {
HOMMHI2E = true;
}
}
}

protected final void initHOMMHI3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMHI3E = false;
} else {
HOMMHI3E = true;
}
}
}

protected final void initHOMMHI4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMHI4E = false;
} else {
HOMMHI4E = true;
}
}
}

protected final void initHOMMHI5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMHI5E = false;
} else {
HOMMHI5E = true;
}
}
}

protected final void initHOMMIS(String s) {
if (!s.trim().isEmpty()) {
HOMMIS = Byte.parseByte(s);
} else {
HOMMIS = Byte.MIN_VALUE;
}
}

protected final void initHOMMISN(String s) {
if (!s.trim().isEmpty()) {
HOMMISN = Byte.parseByte(s);
} else {
HOMMISN = Byte.MIN_VALUE;
}
}

protected final void initHOMMOC1E(String s) {
if (!s.trim().isEmpty()) {
HOMMOC1E = Byte.parseByte(s);
} else {
HOMMOC1E = Byte.MIN_VALUE;
}
}

protected final void initHOMMOC2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMOC2E = false;
} else {
HOMMOC2E = true;
}
}
}

protected final void initHOMMOC3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMOC3E = false;
} else {
HOMMOC3E = true;
}
}
}

protected final void initHOMMOC4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMOC4E = false;
} else {
HOMMOC4E = true;
}
}
}

protected final void initHOMMOC5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMOC5E = false;
} else {
HOMMOC5E = true;
}
}
}

protected final void initHOMMOT1E(String s) {
if (!s.trim().isEmpty()) {
HOMMOT1E = Byte.parseByte(s);
} else {
HOMMOT1E = Byte.MIN_VALUE;
}
}

protected final void initHOMMOT2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMOT2E = false;
} else {
HOMMOT2E = true;
}
}
}

protected final void initHOMMOT3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMOT3E = false;
} else {
HOMMOT3E = true;
}
}
}

protected final void initHOMMOT4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMOT4E = false;
} else {
HOMMOT4E = true;
}
}
}

protected final void initHOMMOT5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMMOT5E = false;
} else {
HOMMOT5E = true;
}
}
}

protected final void initHOMN961A(String s) {
if (!s.trim().isEmpty()) {
HOMN961A = Byte.parseByte(s);
} else {
HOMN961A = Byte.MIN_VALUE;
}
}

protected final void initHOMNCP1A(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMNCP1A = false;
} else {
HOMNCP1A = true;
}
}
}

protected final void initHOMNEA1A(String s) {
if (!s.trim().isEmpty()) {
HOMNEA1A = Integer.parseInt(s);
} else {
HOMNEA1A = Integer.MIN_VALUE;
}
}

protected final void initHOMNEE1A(String s) {
if (!s.trim().isEmpty()) {
HOMNEE1A = Byte.parseByte(s);
} else {
HOMNEE1A = Byte.MIN_VALUE;
}
}

protected final void initHOMNEL1A(String s) {
if (!s.trim().isEmpty()) {
HOMNEL1A = Integer.parseInt(s);
} else {
HOMNEL1A = Integer.MIN_VALUE;
}
}

protected final void initHOMNER1A(String s) {
if (!s.trim().isEmpty()) {
HOMNER1A = Byte.parseByte(s);
} else {
HOMNER1A = Byte.MIN_VALUE;
}
}

protected final void initHOMNEU1A(String s) {
if (!s.trim().isEmpty()) {
HOMNEU1A = Short.parseShort(s);
} else {
HOMNEU1A = Short.MIN_VALUE;
}
}

protected final void initHOMNEW(String s) {
if (!s.trim().isEmpty()) {
HOMNEW = Byte.parseByte(s);
} else {
HOMNEW = Byte.MIN_VALUE;
}
}

protected final void initHOMNEWN(String s) {
if (!s.trim().isEmpty()) {
HOMNEWN = Byte.parseByte(s);
} else {
HOMNEWN = Byte.MIN_VALUE;
}
}

protected final void initHOMNHE1A(String s) {
if (!s.trim().isEmpty()) {
HOMNHE1A = Byte.parseByte(s);
} else {
HOMNHE1A = Byte.MIN_VALUE;
}
}

protected final void initHOMNHI1A(String s) {
if (!s.trim().isEmpty()) {
HOMNHI1A = Byte.parseByte(s);
} else {
HOMNHI1A = Byte.MIN_VALUE;
}
}

protected final void initHOMNOC1A(String s) {
if (!s.trim().isEmpty()) {
HOMNOC1A = Byte.parseByte(s);
} else {
HOMNOC1A = Byte.MIN_VALUE;
}
}

protected final void initHOMNOT1A(String s) {
if (!s.trim().isEmpty()) {
HOMNOT1A = Byte.parseByte(s);
} else {
HOMNOT1A = Byte.MIN_VALUE;
}
}

protected final void initHOMNRE1A(String s) {
if (!s.trim().isEmpty()) {
HOMNRE1A = Byte.parseByte(s);
} else {
HOMNRE1A = Byte.MIN_VALUE;
}
}

protected final void initHOMNUM(String s) {
if (!s.trim().isEmpty()) {
HOMNUM = Byte.parseByte(s);
} else {
HOMNUM = Byte.MIN_VALUE;
}
}

protected final void initHOMREA1E(String s) {
if (!s.trim().isEmpty()) {
HOMREA1E = Byte.parseByte(s);
} else {
HOMREA1E = Byte.MIN_VALUE;
}
}

protected final void initHOMREA2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMREA2E = false;
} else {
HOMREA2E = true;
}
}
}

protected final void initHOMREA3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMREA3E = false;
} else {
HOMREA3E = true;
}
}
}

protected final void initHOMREA4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMREA4E = false;
} else {
HOMREA4E = true;
}
}
}

protected final void initHOMREA5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMREA5E = false;
} else {
HOMREA5E = true;
}
}
}

protected final void initHOMREPE(String s) {
if (!s.trim().isEmpty()) {
HOMREPE = Byte.parseByte(s);
} else {
HOMREPE = Byte.MIN_VALUE;
}
}

protected final void initHOMREPL(String s) {
if (!s.trim().isEmpty()) {
HOMREPL = Short.parseShort(s);
} else {
HOMREPL = Short.MIN_VALUE;
}
}

protected final void initHOMREPR(String s) {
if (!s.trim().isEmpty()) {
HOMREPR = Byte.parseByte(s);
} else {
HOMREPR = Byte.MIN_VALUE;
}
}

protected final void initHOMREPU(String s) {
if (!s.trim().isEmpty()) {
HOMREPU = Short.parseShort(s);
} else {
HOMREPU = Short.MIN_VALUE;
}
}

protected final void initHOMSAM1E(String s) {
if (!s.trim().isEmpty()) {
HOMSAM1E = Byte.parseByte(s);
} else {
HOMSAM1E = Byte.MIN_VALUE;
}
}

protected final void initHOMSAM2E(String s) {
if (!s.trim().isEmpty()) {
HOMSAM2E = Byte.parseByte(s);
} else {
HOMSAM2E = Byte.MIN_VALUE;
}
}

protected final void initHOMSAM3E(String s) {
if (!s.trim().isEmpty()) {
HOMSAM3E = Byte.parseByte(s);
} else {
HOMSAM3E = Byte.MIN_VALUE;
}
}

protected final void initHOMSAM4E(String s) {
if (!s.trim().isEmpty()) {
HOMSAM4E = Byte.parseByte(s);
} else {
HOMSAM4E = Byte.MIN_VALUE;
}
}

protected final void initHOMSAM5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMSAM5E = false;
} else {
HOMSAM5E = true;
}
}
}

protected final void initHOMTY1A(String s) {
if (!s.trim().isEmpty()) {
HOMTY1A = Byte.parseByte(s);
} else {
HOMTY1A = Byte.MIN_VALUE;
}
}

protected final void initHOMTY1M(String s) {
if (!s.trim().isEmpty()) {
HOMTY1M = Byte.parseByte(s);
} else {
HOMTY1M = Byte.MIN_VALUE;
}
}

protected final void initHOMTY1N(String s) {
if (!s.trim().isEmpty()) {
HOMTY1N = Byte.parseByte(s);
} else {
HOMTY1N = Byte.MIN_VALUE;
}
}

protected final void initHOMTY2A(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMTY2A = false;
} else {
HOMTY2A = true;
}
}
}

protected final void initHOMTY2M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMTY2M = false;
} else {
HOMTY2M = true;
}
}
}

protected final void initHOMTY2N(String s) {
if (!s.trim().isEmpty()) {
HOMTY2N = Byte.parseByte(s);
} else {
HOMTY2N = Byte.MIN_VALUE;
}
}

protected final void initHOMTY3N(String s) {
if (!s.trim().isEmpty()) {
HOMTY3N = Byte.parseByte(s);
} else {
HOMTY3N = Byte.MIN_VALUE;
}
}

protected final void initHOMTY4N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMTY4N = false;
} else {
HOMTY4N = true;
}
}
}

protected final void initHOMTY5N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMTY5N = false;
} else {
HOMTY5N = true;
}
}
}

protected final void initHOMUCP1E(String s) {
if (!s.trim().isEmpty()) {
HOMUCP1E = Byte.parseByte(s);
} else {
HOMUCP1E = Byte.MIN_VALUE;
}
}

protected final void initHOMUCP2E(String s) {
if (!s.trim().isEmpty()) {
HOMUCP2E = Byte.parseByte(s);
} else {
HOMUCP2E = Byte.MIN_VALUE;
}
}

protected final void initHOMUCP3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUCP3E = false;
} else {
HOMUCP3E = true;
}
}
}

protected final void initHOMUCP4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUCP4E = false;
} else {
HOMUCP4E = true;
}
}
}

protected final void initHOMUCP5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUCP5E = false;
} else {
HOMUCP5E = true;
}
}
}

protected final void initHOMUHE1E(String s) {
if (!s.trim().isEmpty()) {
HOMUHE1E = Byte.parseByte(s);
} else {
HOMUHE1E = Byte.MIN_VALUE;
}
}

protected final void initHOMUHE2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUHE2E = false;
} else {
HOMUHE2E = true;
}
}
}

protected final void initHOMUHE3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUHE3E = false;
} else {
HOMUHE3E = true;
}
}
}

protected final void initHOMUHE4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUHE4E = false;
} else {
HOMUHE4E = true;
}
}
}

protected final void initHOMUHE5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUHE5E = false;
} else {
HOMUHE5E = true;
}
}
}

protected final void initHOMUHI1E(String s) {
if (!s.trim().isEmpty()) {
HOMUHI1E = Byte.parseByte(s);
} else {
HOMUHI1E = Byte.MIN_VALUE;
}
}

protected final void initHOMUHI2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUHI2E = false;
} else {
HOMUHI2E = true;
}
}
}

protected final void initHOMUHI3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUHI3E = false;
} else {
HOMUHI3E = true;
}
}
}

protected final void initHOMUHI4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUHI4E = false;
} else {
HOMUHI4E = true;
}
}
}

protected final void initHOMUHI5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUHI5E = false;
} else {
HOMUHI5E = true;
}
}
}

protected final void initHOMUOC1E(String s) {
if (!s.trim().isEmpty()) {
HOMUOC1E = Byte.parseByte(s);
} else {
HOMUOC1E = Byte.MIN_VALUE;
}
}

protected final void initHOMUOC2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUOC2E = false;
} else {
HOMUOC2E = true;
}
}
}

protected final void initHOMUOC3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUOC3E = false;
} else {
HOMUOC3E = true;
}
}
}

protected final void initHOMUOC4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUOC4E = false;
} else {
HOMUOC4E = true;
}
}
}

protected final void initHOMUOC5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUOC5E = false;
} else {
HOMUOC5E = true;
}
}
}

protected final void initHOMUOT1E(String s) {
if (!s.trim().isEmpty()) {
HOMUOT1E = Byte.parseByte(s);
} else {
HOMUOT1E = Byte.MIN_VALUE;
}
}

protected final void initHOMUOT2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUOT2E = false;
} else {
HOMUOT2E = true;
}
}
}

protected final void initHOMUOT3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUOT3E = false;
} else {
HOMUOT3E = true;
}
}
}

protected final void initHOMUOT4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUOT4E = false;
} else {
HOMUOT4E = true;
}
}
}

protected final void initHOMUOT5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOMUOT5E = false;
} else {
HOMUOT5E = true;
}
}
}

protected final void initHOOHEM95(String s) {
if (!s.trim().isEmpty()) {
HOOHEM95 = Byte.parseByte(s);
} else {
HOOHEM95 = Byte.MIN_VALUE;
}
}

protected final void initHOOUTFE(String s) {
if (!s.trim().isEmpty()) {
HOOUTFE = Byte.parseByte(s);
} else {
HOOUTFE = Byte.MIN_VALUE;
}
}

protected final void initHOOUTFL(String s) {
if (!s.trim().isEmpty()) {
HOOUTFL = Short.parseShort(s);
} else {
HOOUTFL = Short.MIN_VALUE;
}
}

protected final void initHOOUTFR(String s) {
if (!s.trim().isEmpty()) {
HOOUTFR = Byte.parseByte(s);
} else {
HOOUTFR = Byte.MIN_VALUE;
}
}

protected final void initHOOUTFU(String s) {
if (!s.trim().isEmpty()) {
HOOUTFU = Short.parseShort(s);
} else {
HOOUTFU = Short.MIN_VALUE;
}
}

protected final void initHOPAYE(String s) {
if (!s.trim().isEmpty()) {
HOPAYE = Byte.parseByte(s);
} else {
HOPAYE = Byte.MIN_VALUE;
}
}

protected final void initHOPAYL(String s) {
if (!s.trim().isEmpty()) {
HOPAYL = Integer.parseInt(s);
} else {
HOPAYL = Integer.MIN_VALUE;
}
}

protected final void initHOPAYR(String s) {
if (!s.trim().isEmpty()) {
HOPAYR = Byte.parseByte(s);
} else {
HOPAYR = Byte.MIN_VALUE;
}
}

protected final void initHOPAYU(String s) {
if (!s.trim().isEmpty()) {
HOPAYU = Integer.parseInt(s);
} else {
HOPAYU = Integer.MIN_VALUE;
}
}

protected final void initHOPRO95(String s) {
if (!s.trim().isEmpty()) {
HOPRO95 = Byte.parseByte(s);
} else {
HOPRO95 = Byte.MIN_VALUE;
}
}

protected final void initHOPRO96(String s) {
if (!s.trim().isEmpty()) {
HOPRO96 = Byte.parseByte(s);
} else {
HOPRO96 = Byte.MIN_VALUE;
}
}

protected final void initHOPROCO(String s) {
if (!s.trim().isEmpty()) {
HOPROCO = Byte.parseByte(s);
} else {
HOPROCO = Byte.MIN_VALUE;
}
}

protected final void initHOPROCP(String s) {
if (!s.trim().isEmpty()) {
HOPROCP = Byte.parseByte(s);
} else {
HOPROCP = Byte.MIN_VALUE;
}
}

protected final void initHOPRODK(String s) {
if (!s.trim().isEmpty()) {
HOPRODK = Byte.parseByte(s);
} else {
HOPRODK = Byte.MIN_VALUE;
}
}

protected final void initHOPROEP(String s) {
if (!s.trim().isEmpty()) {
HOPROEP = Byte.parseByte(s);
} else {
HOPROEP = Byte.MIN_VALUE;
}
}

protected final void initHOPROIN(String s) {
if (!s.trim().isEmpty()) {
HOPROIN = Byte.parseByte(s);
} else {
HOPROIN = Byte.MIN_VALUE;
}
}

protected final void initHOPROM85(String s) {
if (!s.trim().isEmpty()) {
HOPROM85 = Byte.parseByte(s);
} else {
HOPROM85 = Byte.MIN_VALUE;
}
}

protected final void initHOPROM86(String s) {
if (!s.trim().isEmpty()) {
HOPROM86 = Byte.parseByte(s);
} else {
HOPROM86 = Byte.MIN_VALUE;
}
}

protected final void initHOPROM95(String s) {
if (!s.trim().isEmpty()) {
HOPROM95 = Byte.parseByte(s);
} else {
HOPROM95 = Byte.MIN_VALUE;
}
}

protected final void initHOPROM96(String s) {
if (!s.trim().isEmpty()) {
HOPROM96 = Byte.parseByte(s);
} else {
HOPROM96 = Byte.MIN_VALUE;
}
}

protected final void initHOPROMCO(String s) {
if (!s.trim().isEmpty()) {
HOPROMCO = Byte.parseByte(s);
} else {
HOPROMCO = Byte.MIN_VALUE;
}
}

protected final void initHOPROMCP(String s) {
if (!s.trim().isEmpty()) {
HOPROMCP = Byte.parseByte(s);
} else {
HOPROMCP = Byte.MIN_VALUE;
}
}

protected final void initHOPROMDK(String s) {
if (!s.trim().isEmpty()) {
HOPROMDK = Byte.parseByte(s);
} else {
HOPROMDK = Byte.MIN_VALUE;
}
}

protected final void initHOPROMEP(String s) {
if (!s.trim().isEmpty()) {
HOPROMEP = Byte.parseByte(s);
} else {
HOPROMEP = Byte.MIN_VALUE;
}
}

protected final void initHOPROMIN(String s) {
if (!s.trim().isEmpty()) {
HOPROMIN = Byte.parseByte(s);
} else {
HOPROMIN = Byte.MIN_VALUE;
}
}

protected final void initHOPROMNZ(String s) {
if (!s.trim().isEmpty()) {
HOPROMNZ = Byte.parseByte(s);
} else {
HOPROMNZ = Byte.MIN_VALUE;
}
}

protected final void initHOPROMPO(String s) {
if (!s.trim().isEmpty()) {
HOPROMPO = Byte.parseByte(s);
} else {
HOPROMPO = Byte.MIN_VALUE;
}
}

protected final void initHOPROMRD(String s) {
if (!s.trim().isEmpty()) {
HOPROMRD = Byte.parseByte(s);
} else {
HOPROMRD = Byte.MIN_VALUE;
}
}

protected final void initHOPROMRO(String s) {
if (!s.trim().isEmpty()) {
HOPROMRO = Byte.parseByte(s);
} else {
HOPROMRO = Byte.MIN_VALUE;
}
}

protected final void initHOPROMSN(String s) {
if (!s.trim().isEmpty()) {
HOPROMSN = Byte.parseByte(s);
} else {
HOPROMSN = Byte.MIN_VALUE;
}
}

protected final void initHOPROMSP(String s) {
if (!s.trim().isEmpty()) {
HOPROMSP = Byte.parseByte(s);
} else {
HOPROMSP = Byte.MIN_VALUE;
}
}

protected final void initHOPROMST(String s) {
if (!s.trim().isEmpty()) {
HOPROMST = Byte.parseByte(s);
} else {
HOPROMST = Byte.MIN_VALUE;
}
}

protected final void initHOPROMVA(String s) {
if (!s.trim().isEmpty()) {
HOPROMVA = Byte.parseByte(s);
} else {
HOPROMVA = Byte.MIN_VALUE;
}
}

protected final void initHOPROMWA(String s) {
if (!s.trim().isEmpty()) {
HOPROMWA = Byte.parseByte(s);
} else {
HOPROMWA = Byte.MIN_VALUE;
}
}

protected final void initHOPRONZ(String s) {
if (!s.trim().isEmpty()) {
HOPRONZ = Byte.parseByte(s);
} else {
HOPRONZ = Byte.MIN_VALUE;
}
}

protected final void initHOPROPO(String s) {
if (!s.trim().isEmpty()) {
HOPROPO = Byte.parseByte(s);
} else {
HOPROPO = Byte.MIN_VALUE;
}
}

protected final void initHOPRORD(String s) {
if (!s.trim().isEmpty()) {
HOPRORD = Byte.parseByte(s);
} else {
HOPRORD = Byte.MIN_VALUE;
}
}

protected final void initHOPRORO(String s) {
if (!s.trim().isEmpty()) {
HOPRORO = Byte.parseByte(s);
} else {
HOPRORO = Byte.MIN_VALUE;
}
}

protected final void initHOPROSN(String s) {
if (!s.trim().isEmpty()) {
HOPROSN = Byte.parseByte(s);
} else {
HOPROSN = Byte.MIN_VALUE;
}
}

protected final void initHOPROSP(String s) {
if (!s.trim().isEmpty()) {
HOPROSP = Byte.parseByte(s);
} else {
HOPROSP = Byte.MIN_VALUE;
}
}

protected final void initHOPROWA(String s) {
if (!s.trim().isEmpty()) {
HOPROWA = Byte.parseByte(s);
} else {
HOPROWA = Byte.MIN_VALUE;
}
}

protected final void initHOREBFE(String s) {
if (!s.trim().isEmpty()) {
HOREBFE = Byte.parseByte(s);
} else {
HOREBFE = Byte.MIN_VALUE;
}
}

protected final void initHOREBFL(String s) {
if (!s.trim().isEmpty()) {
HOREBFL = Short.parseShort(s);
} else {
HOREBFL = Short.MIN_VALUE;
}
}

protected final void initHOREBFR(String s) {
if (!s.trim().isEmpty()) {
HOREBFR = Byte.parseByte(s);
} else {
HOREBFR = Byte.MIN_VALUE;
}
}

protected final void initHOREBFU(String s) {
if (!s.trim().isEmpty()) {
HOREBFU = Short.parseShort(s);
} else {
HOREBFU = Short.MIN_VALUE;
}
}

protected final void initHOREBME(String s) {
if (!s.trim().isEmpty()) {
HOREBME = Byte.parseByte(s);
} else {
HOREBME = Byte.MIN_VALUE;
}
}

protected final void initHOREBML(String s) {
if (!s.trim().isEmpty()) {
HOREBML = Short.parseShort(s);
} else {
HOREBML = Short.MIN_VALUE;
}
}

protected final void initHOREBMR(String s) {
if (!s.trim().isEmpty()) {
HOREBMR = Byte.parseByte(s);
} else {
HOREBMR = Byte.MIN_VALUE;
}
}

protected final void initHOREBMU(String s) {
if (!s.trim().isEmpty()) {
HOREBMU = Short.parseShort(s);
} else {
HOREBMU = Short.MIN_VALUE;
}
}

protected final void initHOREBOE(String s) {
if (!s.trim().isEmpty()) {
HOREBOE = Byte.parseByte(s);
} else {
HOREBOE = Byte.MIN_VALUE;
}
}

protected final void initHOREBOL(String s) {
if (!s.trim().isEmpty()) {
HOREBOL = Short.parseShort(s);
} else {
HOREBOL = Short.MIN_VALUE;
}
}

protected final void initHOREBOR(String s) {
if (!s.trim().isEmpty()) {
HOREBOR = Byte.parseByte(s);
} else {
HOREBOR = Byte.MIN_VALUE;
}
}

protected final void initHOREBOU(String s) {
if (!s.trim().isEmpty()) {
HOREBOU = Short.parseShort(s);
} else {
HOREBOU = Short.MIN_VALUE;
}
}

protected final void initHOREBWE(String s) {
if (!s.trim().isEmpty()) {
HOREBWE = Byte.parseByte(s);
} else {
HOREBWE = Byte.MIN_VALUE;
}
}

protected final void initHOREBWL(String s) {
if (!s.trim().isEmpty()) {
HOREBWL = Short.parseShort(s);
} else {
HOREBWL = Short.MIN_VALUE;
}
}

protected final void initHOREBWR(String s) {
if (!s.trim().isEmpty()) {
HOREBWR = Byte.parseByte(s);
} else {
HOREBWR = Byte.MIN_VALUE;
}
}

protected final void initHOREBWU(String s) {
if (!s.trim().isEmpty()) {
HOREBWU = Short.parseShort(s);
} else {
HOREBWU = Short.MIN_VALUE;
}
}

protected final void initHOREBYE(String s) {
if (!s.trim().isEmpty()) {
HOREBYE = Byte.parseByte(s);
} else {
HOREBYE = Byte.MIN_VALUE;
}
}

protected final void initHOREBYL(String s) {
if (!s.trim().isEmpty()) {
HOREBYL = Short.parseShort(s);
} else {
HOREBYL = Short.MIN_VALUE;
}
}

protected final void initHOREBYR(String s) {
if (!s.trim().isEmpty()) {
HOREBYR = Byte.parseByte(s);
} else {
HOREBYR = Byte.MIN_VALUE;
}
}

protected final void initHOREBYU(String s) {
if (!s.trim().isEmpty()) {
HOREBYU = Byte.parseByte(s);
} else {
HOREBYU = Byte.MIN_VALUE;
}
}

protected final void initHORET(String s) {
if (!s.trim().isEmpty()) {
HORET = Byte.parseByte(s);
} else {
HORET = Byte.MIN_VALUE;
}
}

protected final void initHORFEE1(String s) {
if (!s.trim().isEmpty()) {
HORFEE1 = Byte.parseByte(s);
} else {
HORFEE1 = Byte.MIN_VALUE;
}
}

protected final void initHORFEE2(String s) {
if (!s.trim().isEmpty()) {
HORFEE2 = Byte.parseByte(s);
} else {
HORFEE2 = Byte.MIN_VALUE;
}
}

protected final void initHORFEP1(String s) {
if (!s.trim().isEmpty()) {
HORFEP1 = Byte.parseByte(s);
} else {
HORFEP1 = Byte.MIN_VALUE;
}
}

protected final void initHORFEP2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HORFEP2 = false;
} else {
HORFEP2 = true;
}
}
}

protected final void initHORHB(String s) {
if (!s.trim().isEmpty()) {
HORHB = Byte.parseByte(s);
} else {
HORHB = Byte.MIN_VALUE;
}
}

protected final void initHORIN96(String s) {
if (!s.trim().isEmpty()) {
HORIN96 = Byte.parseByte(s);
} else {
HORIN96 = Byte.MIN_VALUE;
}
}

protected final void initHORIN97(String s) {
if (!s.trim().isEmpty()) {
HORIN97 = Byte.parseByte(s);
} else {
HORIN97 = Byte.MIN_VALUE;
}
}

protected final void initHORINHI(String s) {
if (!s.trim().isEmpty()) {
HORINHI = Byte.parseByte(s);
} else {
HORINHI = Byte.MIN_VALUE;
}
}

protected final void initHORINHR(String s) {
if (!s.trim().isEmpty()) {
HORINHR = Byte.parseByte(s);
} else {
HORINHR = Byte.MIN_VALUE;
}
}

protected final void initHORINM(String s) {
if (!s.trim().isEmpty()) {
HORINM = Short.parseShort(s);
} else {
HORINM = Short.MIN_VALUE;
}
}

protected final void initHORINM85(String s) {
if (!s.trim().isEmpty()) {
HORINM85 = Byte.parseByte(s);
} else {
HORINM85 = Byte.MIN_VALUE;
}
}

protected final void initHORINM86(String s) {
if (!s.trim().isEmpty()) {
HORINM86 = Byte.parseByte(s);
} else {
HORINM86 = Byte.MIN_VALUE;
}
}

protected final void initHORINM96(String s) {
if (!s.trim().isEmpty()) {
HORINM96 = Byte.parseByte(s);
} else {
HORINM96 = Byte.MIN_VALUE;
}
}

protected final void initHORINM97(String s) {
if (!s.trim().isEmpty()) {
HORINM97 = Byte.parseByte(s);
} else {
HORINM97 = Byte.MIN_VALUE;
}
}

protected final void initHORINME(String s) {
if (!s.trim().isEmpty()) {
HORINME = Byte.parseByte(s);
} else {
HORINME = Byte.MIN_VALUE;
}
}

protected final void initHORINMHI(String s) {
if (!s.trim().isEmpty()) {
HORINMHI = Byte.parseByte(s);
} else {
HORINMHI = Byte.MIN_VALUE;
}
}

protected final void initHORINMHR(String s) {
if (!s.trim().isEmpty()) {
HORINMHR = Byte.parseByte(s);
} else {
HORINMHR = Byte.MIN_VALUE;
}
}

protected final void initHORINML(String s) {
if (!s.trim().isEmpty()) {
HORINML = Short.parseShort(s);
} else {
HORINML = Short.MIN_VALUE;
}
}

protected final void initHORINMOT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORINMOT = false;
} else {
HORINMOT = true;
}
}
}

protected final void initHORINMPA(String s) {
if (!s.trim().isEmpty()) {
HORINMPA = Byte.parseByte(s);
} else {
HORINMPA = Byte.MIN_VALUE;
}
}

protected final void initHORINMR(String s) {
if (!s.trim().isEmpty()) {
HORINMR = Byte.parseByte(s);
} else {
HORINMR = Byte.MIN_VALUE;
}
}

protected final void initHORINMU(String s) {
if (!s.trim().isEmpty()) {
HORINMU = Short.parseShort(s);
} else {
HORINMU = Short.MIN_VALUE;
}
}

protected final void initHORINOT(String s) {
if (!s.trim().isEmpty()) {
HORINOT = Byte.parseByte(s);
} else {
HORINOT = Byte.MIN_VALUE;
}
}

protected final void initHORINPA(String s) {
if (!s.trim().isEmpty()) {
HORINPA = Byte.parseByte(s);
} else {
HORINPA = Byte.MIN_VALUE;
}
}

protected final void initHORMAIN(String s) {
if (!s.trim().isEmpty()) {
HORMAIN = Byte.parseByte(s);
} else {
HORMAIN = Byte.MIN_VALUE;
}
}

protected final void initHORMO1A(String s) {
if (!s.trim().isEmpty()) {
HORMO1A = Byte.parseByte(s);
} else {
HORMO1A = Byte.MIN_VALUE;
}
}

protected final void initHORMO1M(String s) {
if (!s.trim().isEmpty()) {
HORMO1M = Byte.parseByte(s);
} else {
HORMO1M = Byte.MIN_VALUE;
}
}

protected final void initHORMO1N(String s) {
if (!s.trim().isEmpty()) {
HORMO1N = Byte.parseByte(s);
} else {
HORMO1N = Byte.MIN_VALUE;
}
}

protected final void initHORMO2A(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMO2A = false;
} else {
HORMO2A = true;
}
}
}

protected final void initHORMO2M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMO2M = false;
} else {
HORMO2M = true;
}
}
}

protected final void initHORMO2N(String s) {
if (!s.trim().isEmpty()) {
HORMO2N = Byte.parseByte(s);
} else {
HORMO2N = Byte.MIN_VALUE;
}
}

protected final void initHORMO3N(String s) {
if (!s.trim().isEmpty()) {
HORMO3N = Byte.parseByte(s);
} else {
HORMO3N = Byte.MIN_VALUE;
}
}

protected final void initHORMO4N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMO4N = false;
} else {
HORMO4N = true;
}
}
}

protected final void initHORMO5N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMO5N = false;
} else {
HORMO5N = true;
}
}
}

protected final void initHORMO85(String s) {
if (!s.trim().isEmpty()) {
HORMO85 = Byte.parseByte(s);
} else {
HORMO85 = Byte.MIN_VALUE;
}
}

protected final void initHORMO86(String s) {
if (!s.trim().isEmpty()) {
HORMO86 = Byte.parseByte(s);
} else {
HORMO86 = Byte.MIN_VALUE;
}
}

protected final void initHORMOFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOFE = false;
} else {
HORMOFE = true;
}
}
}

protected final void initHORMOFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOFL = false;
} else {
HORMOFL = true;
}
}
}

protected final void initHORMOFP(String s) {
if (!s.trim().isEmpty()) {
HORMOFP = Byte.parseByte(s);
} else {
HORMOFP = Byte.MIN_VALUE;
}
}

protected final void initHORMOFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOFR = false;
} else {
HORMOFR = true;
}
}
}

protected final void initHORMOFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOFU = false;
} else {
HORMOFU = true;
}
}
}

protected final void initHORMOL(String s) {
if (!s.trim().isEmpty()) {
HORMOL = Integer.parseInt(s);
} else {
HORMOL = Integer.MIN_VALUE;
}
}

protected final void initHORMOLA(String s) {
if (!s.trim().isEmpty()) {
HORMOLA = Byte.parseByte(s);
} else {
HORMOLA = Byte.MIN_VALUE;
}
}

protected final void initHORMOLE(String s) {
if (!s.trim().isEmpty()) {
HORMOLE = Byte.parseByte(s);
} else {
HORMOLE = Byte.MIN_VALUE;
}
}

protected final void initHORMOLL(String s) {
if (!s.trim().isEmpty()) {
HORMOLL = Integer.parseInt(s);
} else {
HORMOLL = Integer.MIN_VALUE;
}
}

protected final void initHORMOLR(String s) {
if (!s.trim().isEmpty()) {
HORMOLR = Byte.parseByte(s);
} else {
HORMOLR = Byte.MIN_VALUE;
}
}

protected final void initHORMOLU(String s) {
if (!s.trim().isEmpty()) {
HORMOLU = Integer.parseInt(s);
} else {
HORMOLU = Integer.MIN_VALUE;
}
}

protected final void initHORMOM85(String s) {
if (!s.trim().isEmpty()) {
HORMOM85 = Byte.parseByte(s);
} else {
HORMOM85 = Byte.MIN_VALUE;
}
}

protected final void initHORMOM86(String s) {
if (!s.trim().isEmpty()) {
HORMOM86 = Byte.parseByte(s);
} else {
HORMOM86 = Byte.MIN_VALUE;
}
}

protected final void initHORMOMBA(String s) {
if (!s.trim().isEmpty()) {
HORMOMBA = Byte.parseByte(s);
} else {
HORMOMBA = Byte.MIN_VALUE;
}
}

protected final void initHORMOMBQ(String s) {
if (!s.trim().isEmpty()) {
HORMOMBQ = Byte.parseByte(s);
} else {
HORMOMBQ = Byte.MIN_VALUE;
}
}

protected final void initHORMOME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOME = false;
} else {
HORMOME = true;
}
}
}

protected final void initHORMOMFP(String s) {
if (!s.trim().isEmpty()) {
HORMOMFP = Byte.parseByte(s);
} else {
HORMOMFP = Byte.MIN_VALUE;
}
}

protected final void initHORMOML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOML = false;
} else {
HORMOML = true;
}
}
}

protected final void initHORMOMLA(String s) {
if (!s.trim().isEmpty()) {
HORMOMLA = Byte.parseByte(s);
} else {
HORMOMLA = Byte.MIN_VALUE;
}
}

protected final void initHORMOMNS(String s) {
if (!s.trim().isEmpty()) {
HORMOMNS = Byte.parseByte(s);
} else {
HORMOMNS = Byte.MIN_VALUE;
}
}

protected final void initHORMOMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOMR = false;
} else {
HORMOMR = true;
}
}
}

protected final void initHORMOMSH(String s) {
if (!s.trim().isEmpty()) {
HORMOMSH = Byte.parseByte(s);
} else {
HORMOMSH = Byte.MIN_VALUE;
}
}

protected final void initHORMOMSM(String s) {
if (!s.trim().isEmpty()) {
HORMOMSM = Byte.parseByte(s);
} else {
HORMOMSM = Byte.MIN_VALUE;
}
}

protected final void initHORMOMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOMU = false;
} else {
HORMOMU = true;
}
}
}

protected final void initHORMOOE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOOE = false;
} else {
HORMOOE = true;
}
}
}

protected final void initHORMOOL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOOL = false;
} else {
HORMOOL = true;
}
}
}

protected final void initHORMOOR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOOR = false;
} else {
HORMOOR = true;
}
}
}

protected final void initHORMOOT(String s) {
if (!s.trim().isEmpty()) {
HORMOOT = Byte.parseByte(s);
} else {
HORMOOT = Byte.MIN_VALUE;
}
}

protected final void initHORMOOU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOOU = false;
} else {
HORMOOU = true;
}
}
}

protected final void initHORMOSH(String s) {
if (!s.trim().isEmpty()) {
HORMOSH = Byte.parseByte(s);
} else {
HORMOSH = Byte.MIN_VALUE;
}
}

protected final void initHORMOSM(String s) {
if (!s.trim().isEmpty()) {
HORMOSM = Byte.parseByte(s);
} else {
HORMOSM = Byte.MIN_VALUE;
}
}

protected final void initHORMOWE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOWE = false;
} else {
HORMOWE = true;
}
}
}

protected final void initHORMOWL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOWL = false;
} else {
HORMOWL = true;
}
}
}

protected final void initHORMOWR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOWR = false;
} else {
HORMOWR = true;
}
}
}

protected final void initHORMOWU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOWU = false;
} else {
HORMOWU = true;
}
}
}

protected final void initHORMOYE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOYE = false;
} else {
HORMOYE = true;
}
}
}

protected final void initHORMOYL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOYL = false;
} else {
HORMOYL = true;
}
}
}

protected final void initHORMOYR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOYR = false;
} else {
HORMOYR = true;
}
}
}

protected final void initHORMOYU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMOYU = false;
} else {
HORMOYU = true;
}
}
}

protected final void initHORMS(String s) {
if (!s.trim().isEmpty()) {
HORMS = Byte.parseByte(s);
} else {
HORMS = Byte.MIN_VALUE;
}
}

protected final void initHORMU(String s) {
if (!s.trim().isEmpty()) {
HORMU = Short.parseShort(s);
} else {
HORMU = Short.MIN_VALUE;
}
}

protected final void initHORMUFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFE = false;
} else {
HORMUFE = true;
}
}
}

protected final void initHORMUFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFL = false;
} else {
HORMUFL = true;
}
}
}

protected final void initHORMUFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFR = false;
} else {
HORMUFR = true;
}
}
}

protected final void initHORMUFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUFU = false;
} else {
HORMUFU = true;
}
}
}

protected final void initHORMUME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUME = false;
} else {
HORMUME = true;
}
}
}

protected final void initHORMUML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUML = false;
} else {
HORMUML = true;
}
}
}

protected final void initHORMUMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUMR = false;
} else {
HORMUMR = true;
}
}
}

protected final void initHORMUMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUMU = false;
} else {
HORMUMU = true;
}
}
}

protected final void initHORMUO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUO = false;
} else {
HORMUO = true;
}
}
}

protected final void initHORMUOE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOE = false;
} else {
HORMUOE = true;
}
}
}

protected final void initHORMUOL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOL = false;
} else {
HORMUOL = true;
}
}
}

protected final void initHORMUOR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOR = false;
} else {
HORMUOR = true;
}
}
}

protected final void initHORMUOU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUOU = false;
} else {
HORMUOU = true;
}
}
}

protected final void initHORMUWE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWE = false;
} else {
HORMUWE = true;
}
}
}

protected final void initHORMUWL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWL = false;
} else {
HORMUWL = true;
}
}
}

protected final void initHORMUWR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWR = false;
} else {
HORMUWR = true;
}
}
}

protected final void initHORMUWU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUWU = false;
} else {
HORMUWU = true;
}
}
}

protected final void initHORMUYE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYE = false;
} else {
HORMUYE = true;
}
}
}

protected final void initHORMUYL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYL = false;
} else {
HORMUYL = true;
}
}
}

protected final void initHORMUYR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYR = false;
} else {
HORMUYR = true;
}
}
}

protected final void initHORMUYU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORMUYU = false;
} else {
HORMUYU = true;
}
}
}

protected final void initHORMV95(String s) {
if (!s.trim().isEmpty()) {
HORMV95 = Byte.parseByte(s);
} else {
HORMV95 = Byte.MIN_VALUE;
}
}

protected final void initHORMVBA(String s) {
if (!s.trim().isEmpty()) {
HORMVBA = Byte.parseByte(s);
} else {
HORMVBA = Byte.MIN_VALUE;
}
}

protected final void initHORMVBO(String s) {
if (!s.trim().isEmpty()) {
HORMVBO = Byte.parseByte(s);
} else {
HORMVBO = Byte.MIN_VALUE;
}
}

protected final void initHORMVER(String s) {
if (!s.trim().isEmpty()) {
HORMVER = Byte.parseByte(s);
} else {
HORMVER = Byte.MIN_VALUE;
}
}

protected final void initHORMVHR(String s) {
if (!s.trim().isEmpty()) {
HORMVHR = Byte.parseByte(s);
} else {
HORMVHR = Byte.MIN_VALUE;
}
}

protected final void initHORMVIF(String s) {
if (!s.trim().isEmpty()) {
HORMVIF = Byte.parseByte(s);
} else {
HORMVIF = Byte.MIN_VALUE;
}
}

protected final void initHORMVJR(String s) {
if (!s.trim().isEmpty()) {
HORMVJR = Byte.parseByte(s);
} else {
HORMVJR = Byte.MIN_VALUE;
}
}

protected final void initHORMVMAB(String s) {
if (!s.trim().isEmpty()) {
HORMVMAB = Byte.parseByte(s);
} else {
HORMVMAB = Byte.MIN_VALUE;
}
}

protected final void initHORMVMBA(String s) {
if (!s.trim().isEmpty()) {
HORMVMBA = Byte.parseByte(s);
} else {
HORMVMBA = Byte.MIN_VALUE;
}
}

protected final void initHORMVMBO(String s) {
if (!s.trim().isEmpty()) {
HORMVMBO = Byte.parseByte(s);
} else {
HORMVMBO = Byte.MIN_VALUE;
}
}

protected final void initHORMVMER(String s) {
if (!s.trim().isEmpty()) {
HORMVMER = Byte.parseByte(s);
} else {
HORMVMER = Byte.MIN_VALUE;
}
}

protected final void initHORMVMHR(String s) {
if (!s.trim().isEmpty()) {
HORMVMHR = Byte.parseByte(s);
} else {
HORMVMHR = Byte.MIN_VALUE;
}
}

protected final void initHORMVMIF(String s) {
if (!s.trim().isEmpty()) {
HORMVMIF = Byte.parseByte(s);
} else {
HORMVMIF = Byte.MIN_VALUE;
}
}

protected final void initHORMVMJR(String s) {
if (!s.trim().isEmpty()) {
HORMVMJR = Byte.parseByte(s);
} else {
HORMVMJR = Byte.MIN_VALUE;
}
}

protected final void initHORMVMMS(String s) {
if (!s.trim().isEmpty()) {
HORMVMMS = Byte.parseByte(s);
} else {
HORMVMMS = Byte.MIN_VALUE;
}
}

protected final void initHORMVMNF(String s) {
if (!s.trim().isEmpty()) {
HORMVMNF = Byte.parseByte(s);
} else {
HORMVMNF = Byte.MIN_VALUE;
}
}

protected final void initHORMVMNH(String s) {
if (!s.trim().isEmpty()) {
HORMVMNH = Byte.parseByte(s);
} else {
HORMVMNH = Byte.MIN_VALUE;
}
}

protected final void initHORMVMNJ(String s) {
if (!s.trim().isEmpty()) {
HORMVMNJ = Byte.parseByte(s);
} else {
HORMVMNJ = Byte.MIN_VALUE;
}
}

protected final void initHORMVMOF(String s) {
if (!s.trim().isEmpty()) {
HORMVMOF = Byte.parseByte(s);
} else {
HORMVMOF = Byte.MIN_VALUE;
}
}

protected final void initHORMVMPC(String s) {
if (!s.trim().isEmpty()) {
HORMVMPC = Byte.parseByte(s);
} else {
HORMVMPC = Byte.MIN_VALUE;
}
}

protected final void initHORMVMPN(String s) {
if (!s.trim().isEmpty()) {
HORMVMPN = Byte.parseByte(s);
} else {
HORMVMPN = Byte.MIN_VALUE;
}
}

protected final void initHORMVMS(String s) {
if (!s.trim().isEmpty()) {
HORMVMS = Byte.parseByte(s);
} else {
HORMVMS = Byte.MIN_VALUE;
}
}

protected final void initHORMVMSP(String s) {
if (!s.trim().isEmpty()) {
HORMVMSP = Byte.parseByte(s);
} else {
HORMVMSP = Byte.MIN_VALUE;
}
}

protected final void initHORMVNF(String s) {
if (!s.trim().isEmpty()) {
HORMVNF = Byte.parseByte(s);
} else {
HORMVNF = Byte.MIN_VALUE;
}
}

protected final void initHORMVNJ(String s) {
if (!s.trim().isEmpty()) {
HORMVNJ = Byte.parseByte(s);
} else {
HORMVNJ = Byte.MIN_VALUE;
}
}

protected final void initHORMVOF(String s) {
if (!s.trim().isEmpty()) {
HORMVOF = Byte.parseByte(s);
} else {
HORMVOF = Byte.MIN_VALUE;
}
}

protected final void initHORMVPN(String s) {
if (!s.trim().isEmpty()) {
HORMVPN = Byte.parseByte(s);
} else {
HORMVPN = Byte.MIN_VALUE;
}
}

protected final void initHORMVSP(String s) {
if (!s.trim().isEmpty()) {
HORMVSP = Byte.parseByte(s);
} else {
HORMVSP = Byte.MIN_VALUE;
}
}

protected final void initHORPAY(String s) {
if (!s.trim().isEmpty()) {
HORPAY = Byte.parseByte(s);
} else {
HORPAY = Byte.MIN_VALUE;
}
}

protected final void initHORPC(String s) {
if (!s.trim().isEmpty()) {
HORPC = Byte.parseByte(s);
} else {
HORPC = Byte.MIN_VALUE;
}
}

protected final void initHORPCM(String s) {
if (!s.trim().isEmpty()) {
HORPCM = Integer.parseInt(s);
} else {
HORPCM = Integer.MIN_VALUE;
}
}

protected final void initHORPCME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPCME = false;
} else {
HORPCME = true;
}
}
}

protected final void initHORPCML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
HORPCML = false;
} else {
HORPCML = true;
}
}
}

protected final void initHORPCMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPCMR = false;
} else {
HORPCMR = true;
}
}
}

protected final void initHORPCMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
HORPCMU = false;
} else {
HORPCMU = true;
}
}
}

protected final void initHORPM(String s) {
if (!s.trim().isEmpty()) {
HORPM = Integer.parseInt(s);
} else {
HORPM = Integer.MIN_VALUE;
}
}

protected final void initHORPME(String s) {
if (!s.trim().isEmpty()) {
HORPME = Byte.parseByte(s);
} else {
HORPME = Byte.MIN_VALUE;
}
}

protected final void initHORPML(String s) {
if (!s.trim().isEmpty()) {
HORPML = Short.parseShort(s);
} else {
HORPML = Short.MIN_VALUE;
}
}

protected final void initHORPMR(String s) {
if (!s.trim().isEmpty()) {
HORPMR = Byte.parseByte(s);
} else {
HORPMR = Byte.MIN_VALUE;
}
}

protected final void initHORPMU(String s) {
if (!s.trim().isEmpty()) {
HORPMU = Integer.parseInt(s);
} else {
HORPMU = Integer.MIN_VALUE;
}
}

protected final void initHORPOF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPOF = false;
} else {
HORPOF = true;
}
}
}

protected final void initHORPOFO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPOFO = false;
} else {
HORPOFO = true;
}
}
}

protected final void initHORPOS(String s) {
if (!s.trim().isEmpty()) {
HORPOS = Byte.parseByte(s);
} else {
HORPOS = Byte.MIN_VALUE;
}
}

protected final void initHORPOSO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORPOSO = false;
} else {
HORPOSO = true;
}
}
}

protected final void initHORRM(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRM = false;
} else {
HORRM = true;
}
}
}

protected final void initHORRME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRME = false;
} else {
HORRME = true;
}
}
}

protected final void initHORRML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRML = false;
} else {
HORRML = true;
}
}
}

protected final void initHORRMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRMR = false;
} else {
HORRMR = true;
}
}
}

protected final void initHORRMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HORRMU = false;
} else {
HORRMU = true;
}
}
}

protected final void initHOSELL(String s) {
if (!s.trim().isEmpty()) {
HOSELL = Byte.parseByte(s);
} else {
HOSELL = Byte.MIN_VALUE;
}
}

protected final void initHOSELLE(String s) {
if (!s.trim().isEmpty()) {
HOSELLE = Byte.parseByte(s);
} else {
HOSELLE = Byte.MIN_VALUE;
}
}

protected final void initHOSELLL(String s) {
if (!s.trim().isEmpty()) {
HOSELLL = Integer.parseInt(s);
} else {
HOSELLL = Integer.MIN_VALUE;
}
}

protected final void initHOSELLR(String s) {
if (!s.trim().isEmpty()) {
HOSELLR = Byte.parseByte(s);
} else {
HOSELLR = Byte.MIN_VALUE;
}
}

protected final void initHOSELLU(String s) {
if (!s.trim().isEmpty()) {
HOSELLU = Integer.parseInt(s);
} else {
HOSELLU = Integer.MIN_VALUE;
}
}

protected final void initHOSOLD(String s) {
if (!s.trim().isEmpty()) {
HOSOLD = Double.parseDouble(s);
} else {
HOSOLD = Double.NaN;
}
}

protected final void initHOSOLDE(String s) {
if (!s.trim().isEmpty()) {
HOSOLDE = Byte.parseByte(s);
} else {
HOSOLDE = Byte.MIN_VALUE;
}
}

protected final void initHOSOLDL(String s) {
if (!s.trim().isEmpty()) {
HOSOLDL = Integer.parseInt(s);
} else {
HOSOLDL = Integer.MIN_VALUE;
}
}

protected final void initHOSOLDR(String s) {
if (!s.trim().isEmpty()) {
HOSOLDR = Byte.parseByte(s);
} else {
HOSOLDR = Byte.MIN_VALUE;
}
}

protected final void initHOSOLDU(String s) {
if (!s.trim().isEmpty()) {
HOSOLDU = Integer.parseInt(s);
} else {
HOSOLDU = Integer.MIN_VALUE;
}
}

protected final void initHOTENST(String s) {
if (!s.trim().isEmpty()) {
HOTENST = Byte.parseByte(s);
} else {
HOTENST = Byte.MIN_VALUE;
}
}

protected final void initHOTRABCH(String s) {
if (!s.trim().isEmpty()) {
HOTRABCH = Short.parseShort(s);
} else {
HOTRABCH = Short.MIN_VALUE;
}
}

protected final void initHOTRABGC(String s) {
if (!s.trim().isEmpty()) {
HOTRABGC = Integer.parseInt(s);
} else {
HOTRABGC = Integer.MIN_VALUE;
}
}

protected final void initHOTRABNR(String s) {
if (!s.trim().isEmpty()) {
HOTRABNR = Short.parseShort(s);
} else {
HOTRABNR = Short.MIN_VALUE;
}
}

protected final void initHOTRABOC(String s) {
if (!s.trim().isEmpty()) {
HOTRABOC = Integer.parseInt(s);
} else {
HOTRABOC = Integer.MIN_VALUE;
}
}

protected final void initHOTRABOR(String s) {
if (!s.trim().isEmpty()) {
HOTRABOR = Integer.parseInt(s);
} else {
HOTRABOR = Integer.MIN_VALUE;
}
}

protected final void initHOTRAN(String s) {
if (!s.trim().isEmpty()) {
HOTRAN = Integer.parseInt(s);
} else {
HOTRAN = Integer.MIN_VALUE;
}
}

protected final void initHOTRANCH(String s) {
if (!s.trim().isEmpty()) {
HOTRANCH = Byte.parseByte(s);
} else {
HOTRANCH = Byte.MIN_VALUE;
}
}

protected final void initHOTRANE(String s) {
if (!s.trim().isEmpty()) {
HOTRANE = Byte.parseByte(s);
} else {
HOTRANE = Byte.MIN_VALUE;
}
}

protected final void initHOTRANGC(String s) {
if (!s.trim().isEmpty()) {
HOTRANGC = Byte.parseByte(s);
} else {
HOTRANGC = Byte.MIN_VALUE;
}
}

protected final void initHOTRANL(String s) {
if (!s.trim().isEmpty()) {
HOTRANL = Short.parseShort(s);
} else {
HOTRANL = Short.MIN_VALUE;
}
}

protected final void initHOTRANNR(String s) {
if (!s.trim().isEmpty()) {
HOTRANNR = Byte.parseByte(s);
} else {
HOTRANNR = Byte.MIN_VALUE;
}
}

protected final void initHOTRANOC(String s) {
if (!s.trim().isEmpty()) {
HOTRANOC = Byte.parseByte(s);
} else {
HOTRANOC = Byte.MIN_VALUE;
}
}

protected final void initHOTRANOR(String s) {
if (!s.trim().isEmpty()) {
HOTRANOR = Byte.parseByte(s);
} else {
HOTRANOR = Byte.MIN_VALUE;
}
}

protected final void initHOTRANR(String s) {
if (!s.trim().isEmpty()) {
HOTRANR = Byte.parseByte(s);
} else {
HOTRANR = Byte.MIN_VALUE;
}
}

protected final void initHOTRANU(String s) {
if (!s.trim().isEmpty()) {
HOTRANU = Short.parseShort(s);
} else {
HOTRANU = Short.MIN_VALUE;
}
}

protected final void initHOTRAPCH(String s) {
if (!s.trim().isEmpty()) {
HOTRAPCH = Byte.parseByte(s);
} else {
HOTRAPCH = Byte.MIN_VALUE;
}
}

protected final void initHOTRAPGC(String s) {
if (!s.trim().isEmpty()) {
HOTRAPGC = Byte.parseByte(s);
} else {
HOTRAPGC = Byte.MIN_VALUE;
}
}

protected final void initHOTRAPNR(String s) {
if (!s.trim().isEmpty()) {
HOTRAPNR = Byte.parseByte(s);
} else {
HOTRAPNR = Byte.MIN_VALUE;
}
}

protected final void initHOTRAPOC(String s) {
if (!s.trim().isEmpty()) {
HOTRAPOC = Byte.parseByte(s);
} else {
HOTRAPOC = Byte.MIN_VALUE;
}
}

protected final void initHOTRAPOR(String s) {
if (!s.trim().isEmpty()) {
HOTRAPOR = Byte.parseByte(s);
} else {
HOTRAPOR = Byte.MIN_VALUE;
}
}

protected final void initHOTRPA(String s) {
if (!s.trim().isEmpty()) {
HOTRPA = Byte.parseByte(s);
} else {
HOTRPA = Byte.MIN_VALUE;
}
}

protected final void initHOV(String s) {
if (!s.trim().isEmpty()) {
HOV = Byte.parseByte(s);
} else {
HOV = Byte.MIN_VALUE;
}
}

protected final void initHOVAG11(String s) {
if (!s.trim().isEmpty()) {
HOVAG11 = Byte.parseByte(s);
} else {
HOVAG11 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG12(String s) {
if (!s.trim().isEmpty()) {
HOVAG12 = Byte.parseByte(s);
} else {
HOVAG12 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG13(String s) {
if (!s.trim().isEmpty()) {
HOVAG13 = Byte.parseByte(s);
} else {
HOVAG13 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG14(String s) {
if (!s.trim().isEmpty()) {
HOVAG14 = Byte.parseByte(s);
} else {
HOVAG14 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG15(String s) {
if (!s.trim().isEmpty()) {
HOVAG15 = Byte.parseByte(s);
} else {
HOVAG15 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG16(String s) {
if (!s.trim().isEmpty()) {
HOVAG16 = Byte.parseByte(s);
} else {
HOVAG16 = Byte.MIN_VALUE;
}
}

protected final void initHOVE1A(String s) {
if (!s.trim().isEmpty()) {
HOVE1A = Integer.parseInt(s);
} else {
HOVE1A = Integer.MIN_VALUE;
}
}

protected final void initHOVE1E(String s) {
if (!s.trim().isEmpty()) {
HOVE1E = Integer.parseInt(s);
} else {
HOVE1E = Integer.MIN_VALUE;
}
}

protected final void initHOVE1M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE1M = false;
} else {
HOVE1M = true;
}
}
}

protected final void initHOVE1N(String s) {
if (!s.trim().isEmpty()) {
HOVE1N = Integer.parseInt(s);
} else {
HOVE1N = Integer.MIN_VALUE;
}
}

protected final void initHOVE2A(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE2A = false;
} else {
HOVE2A = true;
}
}
}

protected final void initHOVE2E(String s) {
if (!s.trim().isEmpty()) {
HOVE2E = Short.parseShort(s);
} else {
HOVE2E = Short.MIN_VALUE;
}
}

protected final void initHOVE2M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE2M = false;
} else {
HOVE2M = true;
}
}
}

protected final void initHOVE2N(String s) {
if (!s.trim().isEmpty()) {
HOVE2N = Integer.parseInt(s);
} else {
HOVE2N = Integer.MIN_VALUE;
}
}

protected final void initHOVE3E(String s) {
if (!s.trim().isEmpty()) {
HOVE3E = Short.parseShort(s);
} else {
HOVE3E = Short.MIN_VALUE;
}
}

protected final void initHOVE3N(String s) {
if (!s.trim().isEmpty()) {
HOVE3N = Short.parseShort(s);
} else {
HOVE3N = Short.MIN_VALUE;
}
}

protected final void initHOVE4E(String s) {
if (!s.trim().isEmpty()) {
HOVE4E = Byte.parseByte(s);
} else {
HOVE4E = Byte.MIN_VALUE;
}
}

protected final void initHOVE4N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE4N = false;
} else {
HOVE4N = true;
}
}
}

protected final void initHOVE5E(String s) {
if (!s.trim().isEmpty()) {
HOVE5E = Byte.parseByte(s);
} else {
HOVE5E = Byte.MIN_VALUE;
}
}

protected final void initHOVE5N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVE5N = false;
} else {
HOVE5N = true;
}
}
}

protected final void initHOVEE1A(String s) {
if (!s.trim().isEmpty()) {
HOVEE1A = Byte.parseByte(s);
} else {
HOVEE1A = Byte.MIN_VALUE;
}
}

protected final void initHOVEE1E(String s) {
if (!s.trim().isEmpty()) {
HOVEE1E = Byte.parseByte(s);
} else {
HOVEE1E = Byte.MIN_VALUE;
}
}

protected final void initHOVEE1M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEE1M = false;
} else {
HOVEE1M = true;
}
}
}

protected final void initHOVEE1N(String s) {
if (!s.trim().isEmpty()) {
HOVEE1N = Byte.parseByte(s);
} else {
HOVEE1N = Byte.MIN_VALUE;
}
}

protected final void initHOVEE2A(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEE2A = false;
} else {
HOVEE2A = true;
}
}
}

protected final void initHOVEE2E(String s) {
if (!s.trim().isEmpty()) {
HOVEE2E = Byte.parseByte(s);
} else {
HOVEE2E = Byte.MIN_VALUE;
}
}

protected final void initHOVEE2M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEE2M = false;
} else {
HOVEE2M = true;
}
}
}

protected final void initHOVEE2N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEE2N = false;
} else {
HOVEE2N = true;
}
}
}

protected final void initHOVEE3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEE3E = false;
} else {
HOVEE3E = true;
}
}
}

protected final void initHOVEE3N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEE3N = false;
} else {
HOVEE3N = true;
}
}
}

protected final void initHOVEE4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEE4E = false;
} else {
HOVEE4E = true;
}
}
}

protected final void initHOVEE4N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEE4N = false;
} else {
HOVEE4N = true;
}
}
}

protected final void initHOVEE5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEE5E = false;
} else {
HOVEE5E = true;
}
}
}

protected final void initHOVEE5N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEE5N = false;
} else {
HOVEE5N = true;
}
}
}

protected final void initHOVEHX(String s) {
if (!s.trim().isEmpty()) {
HOVEHX = Byte.parseByte(s);
} else {
HOVEHX = Byte.MIN_VALUE;
}
}

protected final void initHOVEL1A(String s) {
if (!s.trim().isEmpty()) {
HOVEL1A = Byte.parseByte(s);
} else {
HOVEL1A = Byte.MIN_VALUE;
}
}

protected final void initHOVEL1E(String s) {
if (!s.trim().isEmpty()) {
HOVEL1E = Integer.parseInt(s);
} else {
HOVEL1E = Integer.MIN_VALUE;
}
}

protected final void initHOVEL1M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEL1M = false;
} else {
HOVEL1M = true;
}
}
}

protected final void initHOVEL1N(String s) {
if (!s.trim().isEmpty()) {
HOVEL1N = Integer.parseInt(s);
} else {
HOVEL1N = Integer.MIN_VALUE;
}
}

protected final void initHOVEL2A(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEL2A = false;
} else {
HOVEL2A = true;
}
}
}

protected final void initHOVEL2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HOVEL2E = false;
} else {
HOVEL2E = true;
}
}
}

protected final void initHOVEL2M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEL2M = false;
} else {
HOVEL2M = true;
}
}
}

protected final void initHOVEL2N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
HOVEL2N = false;
} else {
HOVEL2N = true;
}
}
}

protected final void initHOVEL3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HOVEL3E = false;
} else {
HOVEL3E = true;
}
}
}

protected final void initHOVEL3N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEL3N = false;
} else {
HOVEL3N = true;
}
}
}

protected final void initHOVEL4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEL4E = false;
} else {
HOVEL4E = true;
}
}
}

protected final void initHOVEL4N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEL4N = false;
} else {
HOVEL4N = true;
}
}
}

protected final void initHOVEL5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEL5E = false;
} else {
HOVEL5E = true;
}
}
}

protected final void initHOVEL5N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEL5N = false;
} else {
HOVEL5N = true;
}
}
}

protected final void initHOVER(String s) {
if (!s.trim().isEmpty()) {
HOVER = s;
}
}

protected final void initHOVER10(String s) {
if (!s.trim().isEmpty()) {
HOVER10 = s;
}
}

protected final void initHOVER11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER11 = false;
} else {
HOVER11 = true;
}
}
}

protected final void initHOVER12(String s) {
if (!s.trim().isEmpty()) {
HOVER12 = s;
}
}

protected final void initHOVER13(String s) {
if (!s.trim().isEmpty()) {
HOVER13 = s;
}
}

protected final void initHOVER14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER14 = false;
} else {
HOVER14 = true;
}
}
}

protected final void initHOVER15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER15 = false;
} else {
HOVER15 = true;
}
}
}

protected final void initHOVER16(String s) {
if (!s.trim().isEmpty()) {
HOVER16 = s;
}
}

protected final void initHOVER1A(String s) {
if (!s.trim().isEmpty()) {
HOVER1A = Byte.parseByte(s);
} else {
HOVER1A = Byte.MIN_VALUE;
}
}

protected final void initHOVER1E(String s) {
if (!s.trim().isEmpty()) {
HOVER1E = Byte.parseByte(s);
} else {
HOVER1E = Byte.MIN_VALUE;
}
}

protected final void initHOVER1M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER1M = false;
} else {
HOVER1M = true;
}
}
}

protected final void initHOVER1N(String s) {
if (!s.trim().isEmpty()) {
HOVER1N = Byte.parseByte(s);
} else {
HOVER1N = Byte.MIN_VALUE;
}
}

protected final void initHOVER2(String s) {
if (!s.trim().isEmpty()) {
HOVER2 = s;
}
}

protected final void initHOVER2A(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER2A = false;
} else {
HOVER2A = true;
}
}
}

protected final void initHOVER2E(String s) {
if (!s.trim().isEmpty()) {
HOVER2E = Byte.parseByte(s);
} else {
HOVER2E = Byte.MIN_VALUE;
}
}

protected final void initHOVER2M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER2M = false;
} else {
HOVER2M = true;
}
}
}

protected final void initHOVER2N(String s) {
if (!s.trim().isEmpty()) {
HOVER2N = Byte.parseByte(s);
} else {
HOVER2N = Byte.MIN_VALUE;
}
}

protected final void initHOVER3(String s) {
if (!s.trim().isEmpty()) {
HOVER3 = s;
}
}

protected final void initHOVER3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER3E = false;
} else {
HOVER3E = true;
}
}
}

protected final void initHOVER3N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER3N = false;
} else {
HOVER3N = true;
}
}
}

protected final void initHOVER4(String s) {
if (!s.trim().isEmpty()) {
HOVER4 = s;
}
}

protected final void initHOVER4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER4E = false;
} else {
HOVER4E = true;
}
}
}

protected final void initHOVER4N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER4N = false;
} else {
HOVER4N = true;
}
}
}

protected final void initHOVER5(String s) {
if (!s.trim().isEmpty()) {
HOVER5 = s;
}
}

protected final void initHOVER5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER5E = false;
} else {
HOVER5E = true;
}
}
}

protected final void initHOVER5N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER5N = false;
} else {
HOVER5N = true;
}
}
}

protected final void initHOVER6(String s) {
if (!s.trim().isEmpty()) {
HOVER6 = s;
}
}

protected final void initHOVER7(String s) {
if (!s.trim().isEmpty()) {
HOVER7 = s;
}
}

protected final void initHOVER8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVER8 = false;
} else {
HOVER8 = true;
}
}
}

protected final void initHOVER9(String s) {
if (!s.trim().isEmpty()) {
HOVER9 = s;
}
}

protected final void initHOVEU1A(String s) {
if (!s.trim().isEmpty()) {
HOVEU1A = Short.parseShort(s);
} else {
HOVEU1A = Short.MIN_VALUE;
}
}

protected final void initHOVEU1E(String s) {
if (!s.trim().isEmpty()) {
HOVEU1E = Integer.parseInt(s);
} else {
HOVEU1E = Integer.MIN_VALUE;
}
}

protected final void initHOVEU1M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEU1M = false;
} else {
HOVEU1M = true;
}
}
}

protected final void initHOVEU1N(String s) {
if (!s.trim().isEmpty()) {
HOVEU1N = Integer.parseInt(s);
} else {
HOVEU1N = Integer.MIN_VALUE;
}
}

protected final void initHOVEU2A(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEU2A = false;
} else {
HOVEU2A = true;
}
}
}

protected final void initHOVEU2E(String s) {
if (!s.trim().isEmpty()) {
HOVEU2E = Short.parseShort(s);
} else {
HOVEU2E = Short.MIN_VALUE;
}
}

protected final void initHOVEU2M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEU2M = false;
} else {
HOVEU2M = true;
}
}
}

protected final void initHOVEU2N(String s) {
if (!s.trim().isEmpty()) {
HOVEU2N = Short.parseShort(s);
} else {
HOVEU2N = Short.MIN_VALUE;
}
}

protected final void initHOVEU3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HOVEU3E = false;
} else {
HOVEU3E = true;
}
}
}

protected final void initHOVEU3N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEU3N = false;
} else {
HOVEU3N = true;
}
}
}

protected final void initHOVEU4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEU4E = false;
} else {
HOVEU4E = true;
}
}
}

protected final void initHOVEU4N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEU4N = false;
} else {
HOVEU4N = true;
}
}
}

protected final void initHOVEU5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEU5E = false;
} else {
HOVEU5E = true;
}
}
}

protected final void initHOVEU5N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVEU5N = false;
} else {
HOVEU5N = true;
}
}
}

protected final void initHOVLR(String s) {
if (!s.trim().isEmpty()) {
HOVLR = s;
}
}

protected final void initHOVLR10(String s) {
if (!s.trim().isEmpty()) {
HOVLR10 = s;
}
}

protected final void initHOVLR11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVLR11 = false;
} else {
HOVLR11 = true;
}
}
}

protected final void initHOVLR12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVLR12 = false;
} else {
HOVLR12 = true;
}
}
}

protected final void initHOVLR13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVLR13 = false;
} else {
HOVLR13 = true;
}
}
}

protected final void initHOVLR14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVLR14 = false;
} else {
HOVLR14 = true;
}
}
}

protected final void initHOVLR15(String s) {
if (!s.trim().isEmpty()) {
HOVLR15 = s;
}
}

protected final void initHOVLR16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVLR16 = false;
} else {
HOVLR16 = true;
}
}
}

protected final void initHOVLR2(String s) {
if (!s.trim().isEmpty()) {
HOVLR2 = s;
}
}

protected final void initHOVLR3(String s) {
if (!s.trim().isEmpty()) {
HOVLR3 = s;
}
}

protected final void initHOVLR4(String s) {
if (!s.trim().isEmpty()) {
HOVLR4 = s;
}
}

protected final void initHOVLR5(String s) {
if (!s.trim().isEmpty()) {
HOVLR5 = s;
}
}

protected final void initHOVLR6(String s) {
if (!s.trim().isEmpty()) {
HOVLR6 = s;
}
}

protected final void initHOVLR7(String s) {
if (!s.trim().isEmpty()) {
HOVLR7 = s;
}
}

protected final void initHOVLR8(String s) {
if (!s.trim().isEmpty()) {
HOVLR8 = s;
}
}

protected final void initHOVLR9(String s) {
if (!s.trim().isEmpty()) {
HOVLR9 = s;
}
}

protected final void initHOVML1A(String s) {
if (!s.trim().isEmpty()) {
HOVML1A = Integer.parseInt(s);
} else {
HOVML1A = Integer.MIN_VALUE;
}
}

protected final void initHOVML1E(String s) {
if (!s.trim().isEmpty()) {
HOVML1E = Integer.parseInt(s);
} else {
HOVML1E = Integer.MIN_VALUE;
}
}

protected final void initHOVML1M(String s) {
if (!s.trim().isEmpty()) {
HOVML1M = Integer.parseInt(s);
} else {
HOVML1M = Integer.MIN_VALUE;
}
}

protected final void initHOVML1N(String s) {
if (!s.trim().isEmpty()) {
HOVML1N = Integer.parseInt(s);
} else {
HOVML1N = Integer.MIN_VALUE;
}
}

protected final void initHOVML2A(String s) {
if (!s.trim().isEmpty()) {
HOVML2A = Short.parseShort(s);
} else {
HOVML2A = Short.MIN_VALUE;
}
}

protected final void initHOVML2E(String s) {
if (!s.trim().isEmpty()) {
HOVML2E = Integer.parseInt(s);
} else {
HOVML2E = Integer.MIN_VALUE;
}
}

protected final void initHOVML2M(String s) {
if (!s.trim().isEmpty()) {
HOVML2M = Short.parseShort(s);
} else {
HOVML2M = Short.MIN_VALUE;
}
}

protected final void initHOVML2N(String s) {
if (!s.trim().isEmpty()) {
HOVML2N = Integer.parseInt(s);
} else {
HOVML2N = Integer.MIN_VALUE;
}
}

protected final void initHOVML3E(String s) {
if (!s.trim().isEmpty()) {
HOVML3E = Integer.parseInt(s);
} else {
HOVML3E = Integer.MIN_VALUE;
}
}

protected final void initHOVML3N(String s) {
if (!s.trim().isEmpty()) {
HOVML3N = Integer.parseInt(s);
} else {
HOVML3N = Integer.MIN_VALUE;
}
}

protected final void initHOVML4E(String s) {
if (!s.trim().isEmpty()) {
HOVML4E = Integer.parseInt(s);
} else {
HOVML4E = Integer.MIN_VALUE;
}
}

protected final void initHOVML4N(String s) {
if (!s.trim().isEmpty()) {
HOVML4N = Short.parseShort(s);
} else {
HOVML4N = Short.MIN_VALUE;
}
}

protected final void initHOVML5E(String s) {
if (!s.trim().isEmpty()) {
HOVML5E = Byte.parseByte(s);
} else {
HOVML5E = Byte.MIN_VALUE;
}
}

protected final void initHOVML5N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVML5N = false;
} else {
HOVML5N = true;
}
}
}

protected final void initHOVMLE1A(String s) {
if (!s.trim().isEmpty()) {
HOVMLE1A = Byte.parseByte(s);
} else {
HOVMLE1A = Byte.MIN_VALUE;
}
}

protected final void initHOVMLE1E(String s) {
if (!s.trim().isEmpty()) {
HOVMLE1E = Byte.parseByte(s);
} else {
HOVMLE1E = Byte.MIN_VALUE;
}
}

protected final void initHOVMLE1M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLE1M = false;
} else {
HOVMLE1M = true;
}
}
}

protected final void initHOVMLE1N(String s) {
if (!s.trim().isEmpty()) {
HOVMLE1N = Byte.parseByte(s);
} else {
HOVMLE1N = Byte.MIN_VALUE;
}
}

protected final void initHOVMLE2A(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLE2A = false;
} else {
HOVMLE2A = true;
}
}
}

protected final void initHOVMLE2E(String s) {
if (!s.trim().isEmpty()) {
HOVMLE2E = Byte.parseByte(s);
} else {
HOVMLE2E = Byte.MIN_VALUE;
}
}

protected final void initHOVMLE2M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLE2M = false;
} else {
HOVMLE2M = true;
}
}
}

protected final void initHOVMLE2N(String s) {
if (!s.trim().isEmpty()) {
HOVMLE2N = Byte.parseByte(s);
} else {
HOVMLE2N = Byte.MIN_VALUE;
}
}

protected final void initHOVMLE3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLE3E = false;
} else {
HOVMLE3E = true;
}
}
}

protected final void initHOVMLE3N(String s) {
if (!s.trim().isEmpty()) {
HOVMLE3N = Byte.parseByte(s);
} else {
HOVMLE3N = Byte.MIN_VALUE;
}
}

protected final void initHOVMLE4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLE4E = false;
} else {
HOVMLE4E = true;
}
}
}

protected final void initHOVMLE4N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLE4N = false;
} else {
HOVMLE4N = true;
}
}
}

protected final void initHOVMLE5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLE5E = false;
} else {
HOVMLE5E = true;
}
}
}

protected final void initHOVMLE5N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLE5N = false;
} else {
HOVMLE5N = true;
}
}
}

protected final void initHOVMLL1A(String s) {
if (!s.trim().isEmpty()) {
HOVMLL1A = Integer.parseInt(s);
} else {
HOVMLL1A = Integer.MIN_VALUE;
}
}

protected final void initHOVMLL1E(String s) {
if (!s.trim().isEmpty()) {
HOVMLL1E = Integer.parseInt(s);
} else {
HOVMLL1E = Integer.MIN_VALUE;
}
}

protected final void initHOVMLL1M(String s) {
if (!s.trim().isEmpty()) {
HOVMLL1M = Short.parseShort(s);
} else {
HOVMLL1M = Short.MIN_VALUE;
}
}

protected final void initHOVMLL1N(String s) {
if (!s.trim().isEmpty()) {
HOVMLL1N = Integer.parseInt(s);
} else {
HOVMLL1N = Integer.MIN_VALUE;
}
}

protected final void initHOVMLL2A(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLL2A = false;
} else {
HOVMLL2A = true;
}
}
}

protected final void initHOVMLL2E(String s) {
if (!s.trim().isEmpty()) {
HOVMLL2E = Integer.parseInt(s);
} else {
HOVMLL2E = Integer.MIN_VALUE;
}
}

protected final void initHOVMLL2M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLL2M = false;
} else {
HOVMLL2M = true;
}
}
}

protected final void initHOVMLL2N(String s) {
if (!s.trim().isEmpty()) {
HOVMLL2N = Short.parseShort(s);
} else {
HOVMLL2N = Short.MIN_VALUE;
}
}

protected final void initHOVMLL3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HOVMLL3E = false;
} else {
HOVMLL3E = true;
}
}
}

protected final void initHOVMLL3N(String s) {
if (!s.trim().isEmpty()) {
HOVMLL3N = Short.parseShort(s);
} else {
HOVMLL3N = Short.MIN_VALUE;
}
}

protected final void initHOVMLL4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLL4E = false;
} else {
HOVMLL4E = true;
}
}
}

protected final void initHOVMLL4N(String s) {
if (!s.trim().isEmpty()) {
HOVMLL4N = Short.parseShort(s);
} else {
HOVMLL4N = Short.MIN_VALUE;
}
}

protected final void initHOVMLL5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLL5E = false;
} else {
HOVMLL5E = true;
}
}
}

protected final void initHOVMLL5N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLL5N = false;
} else {
HOVMLL5N = true;
}
}
}

protected final void initHOVMLR1A(String s) {
if (!s.trim().isEmpty()) {
HOVMLR1A = Byte.parseByte(s);
} else {
HOVMLR1A = Byte.MIN_VALUE;
}
}

protected final void initHOVMLR1E(String s) {
if (!s.trim().isEmpty()) {
HOVMLR1E = Byte.parseByte(s);
} else {
HOVMLR1E = Byte.MIN_VALUE;
}
}

protected final void initHOVMLR1M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLR1M = false;
} else {
HOVMLR1M = true;
}
}
}

protected final void initHOVMLR1N(String s) {
if (!s.trim().isEmpty()) {
HOVMLR1N = Byte.parseByte(s);
} else {
HOVMLR1N = Byte.MIN_VALUE;
}
}

protected final void initHOVMLR2A(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLR2A = false;
} else {
HOVMLR2A = true;
}
}
}

protected final void initHOVMLR2E(String s) {
if (!s.trim().isEmpty()) {
HOVMLR2E = Byte.parseByte(s);
} else {
HOVMLR2E = Byte.MIN_VALUE;
}
}

protected final void initHOVMLR2M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLR2M = false;
} else {
HOVMLR2M = true;
}
}
}

protected final void initHOVMLR2N(String s) {
if (!s.trim().isEmpty()) {
HOVMLR2N = Byte.parseByte(s);
} else {
HOVMLR2N = Byte.MIN_VALUE;
}
}

protected final void initHOVMLR3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLR3E = false;
} else {
HOVMLR3E = true;
}
}
}

protected final void initHOVMLR3N(String s) {
if (!s.trim().isEmpty()) {
HOVMLR3N = Byte.parseByte(s);
} else {
HOVMLR3N = Byte.MIN_VALUE;
}
}

protected final void initHOVMLR4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLR4E = false;
} else {
HOVMLR4E = true;
}
}
}

protected final void initHOVMLR4N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLR4N = false;
} else {
HOVMLR4N = true;
}
}
}

protected final void initHOVMLR5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLR5E = false;
} else {
HOVMLR5E = true;
}
}
}

protected final void initHOVMLR5N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLR5N = false;
} else {
HOVMLR5N = true;
}
}
}

protected final void initHOVMLU1A(String s) {
if (!s.trim().isEmpty()) {
HOVMLU1A = Integer.parseInt(s);
} else {
HOVMLU1A = Integer.MIN_VALUE;
}
}

protected final void initHOVMLU1E(String s) {
if (!s.trim().isEmpty()) {
HOVMLU1E = Integer.parseInt(s);
} else {
HOVMLU1E = Integer.MIN_VALUE;
}
}

protected final void initHOVMLU1M(String s) {
if (!s.trim().isEmpty()) {
HOVMLU1M = Short.parseShort(s);
} else {
HOVMLU1M = Short.MIN_VALUE;
}
}

protected final void initHOVMLU1N(String s) {
if (!s.trim().isEmpty()) {
HOVMLU1N = Integer.parseInt(s);
} else {
HOVMLU1N = Integer.MIN_VALUE;
}
}

protected final void initHOVMLU2A(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLU2A = false;
} else {
HOVMLU2A = true;
}
}
}

protected final void initHOVMLU2E(String s) {
if (!s.trim().isEmpty()) {
HOVMLU2E = Integer.parseInt(s);
} else {
HOVMLU2E = Integer.MIN_VALUE;
}
}

protected final void initHOVMLU2M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLU2M = false;
} else {
HOVMLU2M = true;
}
}
}

protected final void initHOVMLU2N(String s) {
if (!s.trim().isEmpty()) {
HOVMLU2N = Integer.parseInt(s);
} else {
HOVMLU2N = Integer.MIN_VALUE;
}
}

protected final void initHOVMLU3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
HOVMLU3E = false;
} else {
HOVMLU3E = true;
}
}
}

protected final void initHOVMLU3N(String s) {
if (!s.trim().isEmpty()) {
HOVMLU3N = Short.parseShort(s);
} else {
HOVMLU3N = Short.MIN_VALUE;
}
}

protected final void initHOVMLU4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLU4E = false;
} else {
HOVMLU4E = true;
}
}
}

protected final void initHOVMLU4N(String s) {
if (!s.trim().isEmpty()) {
HOVMLU4N = Integer.parseInt(s);
} else {
HOVMLU4N = Integer.MIN_VALUE;
}
}

protected final void initHOVMLU5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLU5E = false;
} else {
HOVMLU5E = true;
}
}
}

protected final void initHOVMLU5N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVMLU5N = false;
} else {
HOVMLU5N = true;
}
}
}

protected final void initHOVN(String s) {
if (!s.trim().isEmpty()) {
HOVN = Byte.parseByte(s);
} else {
HOVN = Byte.MIN_VALUE;
}
}

protected final void initHOVNO(String s) {
if (!s.trim().isEmpty()) {
HOVNO = Byte.parseByte(s);
} else {
HOVNO = Byte.MIN_VALUE;
}
}

protected final void initHOVNO10(String s) {
if (!s.trim().isEmpty()) {
HOVNO10 = Byte.parseByte(s);
} else {
HOVNO10 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO11(String s) {
if (!s.trim().isEmpty()) {
HOVNO11 = Byte.parseByte(s);
} else {
HOVNO11 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO12(String s) {
if (!s.trim().isEmpty()) {
HOVNO12 = Byte.parseByte(s);
} else {
HOVNO12 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO13(String s) {
if (!s.trim().isEmpty()) {
HOVNO13 = Byte.parseByte(s);
} else {
HOVNO13 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO14(String s) {
if (!s.trim().isEmpty()) {
HOVNO14 = Byte.parseByte(s);
} else {
HOVNO14 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO15(String s) {
if (!s.trim().isEmpty()) {
HOVNO15 = Byte.parseByte(s);
} else {
HOVNO15 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO16(String s) {
if (!s.trim().isEmpty()) {
HOVNO16 = Byte.parseByte(s);
} else {
HOVNO16 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO2(String s) {
if (!s.trim().isEmpty()) {
HOVNO2 = Byte.parseByte(s);
} else {
HOVNO2 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO3(String s) {
if (!s.trim().isEmpty()) {
HOVNO3 = Byte.parseByte(s);
} else {
HOVNO3 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO4(String s) {
if (!s.trim().isEmpty()) {
HOVNO4 = Byte.parseByte(s);
} else {
HOVNO4 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO5(String s) {
if (!s.trim().isEmpty()) {
HOVNO5 = Byte.parseByte(s);
} else {
HOVNO5 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO6(String s) {
if (!s.trim().isEmpty()) {
HOVNO6 = Byte.parseByte(s);
} else {
HOVNO6 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO7(String s) {
if (!s.trim().isEmpty()) {
HOVNO7 = Byte.parseByte(s);
} else {
HOVNO7 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO8(String s) {
if (!s.trim().isEmpty()) {
HOVNO8 = Byte.parseByte(s);
} else {
HOVNO8 = Byte.MIN_VALUE;
}
}

protected final void initHOVNO9(String s) {
if (!s.trim().isEmpty()) {
HOVNO9 = Byte.parseByte(s);
} else {
HOVNO9 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR(String s) {
if (!s.trim().isEmpty()) {
HOVNR = Byte.parseByte(s);
} else {
HOVNR = Byte.MIN_VALUE;
}
}

protected final void initHOVNR10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR10 = false;
} else {
HOVNR10 = true;
}
}
}

protected final void initHOVNR11(String s) {
if (!s.trim().isEmpty()) {
HOVNR11 = Byte.parseByte(s);
} else {
HOVNR11 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR12 = false;
} else {
HOVNR12 = true;
}
}
}

protected final void initHOVNR13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR13 = false;
} else {
HOVNR13 = true;
}
}
}

protected final void initHOVNR14(String s) {
if (!s.trim().isEmpty()) {
HOVNR14 = Byte.parseByte(s);
} else {
HOVNR14 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR15 = false;
} else {
HOVNR15 = true;
}
}
}

protected final void initHOVNR16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOVNR16 = false;
} else {
HOVNR16 = true;
}
}
}

protected final void initHOVNR2(String s) {
if (!s.trim().isEmpty()) {
HOVNR2 = Byte.parseByte(s);
} else {
HOVNR2 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR3(String s) {
if (!s.trim().isEmpty()) {
HOVNR3 = s;
}
}

protected final void initHOVNR4(String s) {
if (!s.trim().isEmpty()) {
HOVNR4 = Byte.parseByte(s);
} else {
HOVNR4 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR5(String s) {
if (!s.trim().isEmpty()) {
HOVNR5 = Byte.parseByte(s);
} else {
HOVNR5 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR6(String s) {
if (!s.trim().isEmpty()) {
HOVNR6 = Byte.parseByte(s);
} else {
HOVNR6 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR7(String s) {
if (!s.trim().isEmpty()) {
HOVNR7 = Byte.parseByte(s);
} else {
HOVNR7 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR8(String s) {
if (!s.trim().isEmpty()) {
HOVNR8 = Byte.parseByte(s);
} else {
HOVNR8 = Byte.MIN_VALUE;
}
}

protected final void initHOVNR9(String s) {
if (!s.trim().isEmpty()) {
HOVNR9 = Byte.parseByte(s);
} else {
HOVNR9 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW(String s) {
if (!s.trim().isEmpty()) {
HOVNW = Byte.parseByte(s);
} else {
HOVNW = Byte.MIN_VALUE;
}
}

protected final void initHOVNW10(String s) {
if (!s.trim().isEmpty()) {
HOVNW10 = Byte.parseByte(s);
} else {
HOVNW10 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW11(String s) {
if (!s.trim().isEmpty()) {
HOVNW11 = Byte.parseByte(s);
} else {
HOVNW11 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW12(String s) {
if (!s.trim().isEmpty()) {
HOVNW12 = Byte.parseByte(s);
} else {
HOVNW12 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW13(String s) {
if (!s.trim().isEmpty()) {
HOVNW13 = Byte.parseByte(s);
} else {
HOVNW13 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW14(String s) {
if (!s.trim().isEmpty()) {
HOVNW14 = Byte.parseByte(s);
} else {
HOVNW14 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW15(String s) {
if (!s.trim().isEmpty()) {
HOVNW15 = Byte.parseByte(s);
} else {
HOVNW15 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW16(String s) {
if (!s.trim().isEmpty()) {
HOVNW16 = Byte.parseByte(s);
} else {
HOVNW16 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW2(String s) {
if (!s.trim().isEmpty()) {
HOVNW2 = Byte.parseByte(s);
} else {
HOVNW2 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW3(String s) {
if (!s.trim().isEmpty()) {
HOVNW3 = Byte.parseByte(s);
} else {
HOVNW3 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW5(String s) {
if (!s.trim().isEmpty()) {
HOVNW5 = Byte.parseByte(s);
} else {
HOVNW5 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW6(String s) {
if (!s.trim().isEmpty()) {
HOVNW6 = Byte.parseByte(s);
} else {
HOVNW6 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW7(String s) {
if (!s.trim().isEmpty()) {
HOVNW7 = Byte.parseByte(s);
} else {
HOVNW7 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW8(String s) {
if (!s.trim().isEmpty()) {
HOVNW8 = Byte.parseByte(s);
} else {
HOVNW8 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW9(String s) {
if (!s.trim().isEmpty()) {
HOVNW9 = Byte.parseByte(s);
} else {
HOVNW9 = Byte.MIN_VALUE;
}
}

protected final void initHOVST(String s) {
if (!s.trim().isEmpty()) {
HOVST = Byte.parseByte(s);
} else {
HOVST = Byte.MIN_VALUE;
}
}

protected final void initHOVST10(String s) {
if (!s.trim().isEmpty()) {
HOVST10 = Byte.parseByte(s);
} else {
HOVST10 = Byte.MIN_VALUE;
}
}

protected final void initHOVST11(String s) {
if (!s.trim().isEmpty()) {
HOVST11 = Byte.parseByte(s);
} else {
HOVST11 = Byte.MIN_VALUE;
}
}

protected final void initHOVST12(String s) {
if (!s.trim().isEmpty()) {
HOVST12 = Byte.parseByte(s);
} else {
HOVST12 = Byte.MIN_VALUE;
}
}

protected final void initHOVST13(String s) {
if (!s.trim().isEmpty()) {
HOVST13 = Byte.parseByte(s);
} else {
HOVST13 = Byte.MIN_VALUE;
}
}

protected final void initHOVST14(String s) {
if (!s.trim().isEmpty()) {
HOVST14 = Byte.parseByte(s);
} else {
HOVST14 = Byte.MIN_VALUE;
}
}

protected final void initHOVST15(String s) {
if (!s.trim().isEmpty()) {
HOVST15 = Byte.parseByte(s);
} else {
HOVST15 = Byte.MIN_VALUE;
}
}

protected final void initHOVST16(String s) {
if (!s.trim().isEmpty()) {
HOVST16 = Byte.parseByte(s);
} else {
HOVST16 = Byte.MIN_VALUE;
}
}

protected final void initHOVST2(String s) {
if (!s.trim().isEmpty()) {
HOVST2 = Byte.parseByte(s);
} else {
HOVST2 = Byte.MIN_VALUE;
}
}

protected final void initHOVST3(String s) {
if (!s.trim().isEmpty()) {
HOVST3 = Byte.parseByte(s);
} else {
HOVST3 = Byte.MIN_VALUE;
}
}

protected final void initHOVST4(String s) {
if (!s.trim().isEmpty()) {
HOVST4 = Byte.parseByte(s);
} else {
HOVST4 = Byte.MIN_VALUE;
}
}

protected final void initHOVST5(String s) {
if (!s.trim().isEmpty()) {
HOVST5 = Byte.parseByte(s);
} else {
HOVST5 = Byte.MIN_VALUE;
}
}

protected final void initHOVST6(String s) {
if (!s.trim().isEmpty()) {
HOVST6 = Byte.parseByte(s);
} else {
HOVST6 = Byte.MIN_VALUE;
}
}

protected final void initHOVST7(String s) {
if (!s.trim().isEmpty()) {
HOVST7 = Byte.parseByte(s);
} else {
HOVST7 = Byte.MIN_VALUE;
}
}

protected final void initHOVST8(String s) {
if (!s.trim().isEmpty()) {
HOVST8 = Byte.parseByte(s);
} else {
HOVST8 = Byte.MIN_VALUE;
}
}

protected final void initHOVST9(String s) {
if (!s.trim().isEmpty()) {
HOVST9 = Byte.parseByte(s);
} else {
HOVST9 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1001(String s) {
if (!s.trim().isEmpty()) {
HOVW1001 = Byte.parseByte(s);
} else {
HOVW1001 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1002(String s) {
if (!s.trim().isEmpty()) {
HOVW1002 = Byte.parseByte(s);
} else {
HOVW1002 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1003(String s) {
if (!s.trim().isEmpty()) {
HOVW1003 = Byte.parseByte(s);
} else {
HOVW1003 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1004(String s) {
if (!s.trim().isEmpty()) {
HOVW1004 = Byte.parseByte(s);
} else {
HOVW1004 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1005(String s) {
if (!s.trim().isEmpty()) {
HOVW1005 = Byte.parseByte(s);
} else {
HOVW1005 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1006(String s) {
if (!s.trim().isEmpty()) {
HOVW1006 = Byte.parseByte(s);
} else {
HOVW1006 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1007(String s) {
if (!s.trim().isEmpty()) {
HOVW1007 = Byte.parseByte(s);
} else {
HOVW1007 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1008(String s) {
if (!s.trim().isEmpty()) {
HOVW1008 = Byte.parseByte(s);
} else {
HOVW1008 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1009(String s) {
if (!s.trim().isEmpty()) {
HOVW1009 = Byte.parseByte(s);
} else {
HOVW1009 = Byte.MIN_VALUE;
}
}

protected final void initHOVW101(String s) {
if (!s.trim().isEmpty()) {
HOVW101 = Byte.parseByte(s);
} else {
HOVW101 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1010(String s) {
if (!s.trim().isEmpty()) {
HOVW1010 = Byte.parseByte(s);
} else {
HOVW1010 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1011(String s) {
if (!s.trim().isEmpty()) {
HOVW1011 = Byte.parseByte(s);
} else {
HOVW1011 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1012(String s) {
if (!s.trim().isEmpty()) {
HOVW1012 = Byte.parseByte(s);
} else {
HOVW1012 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1013(String s) {
if (!s.trim().isEmpty()) {
HOVW1013 = Byte.parseByte(s);
} else {
HOVW1013 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1014(String s) {
if (!s.trim().isEmpty()) {
HOVW1014 = Byte.parseByte(s);
} else {
HOVW1014 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1015(String s) {
if (!s.trim().isEmpty()) {
HOVW1015 = Byte.parseByte(s);
} else {
HOVW1015 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1016(String s) {
if (!s.trim().isEmpty()) {
HOVW1016 = Byte.parseByte(s);
} else {
HOVW1016 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1017(String s) {
if (!s.trim().isEmpty()) {
HOVW1017 = Byte.parseByte(s);
} else {
HOVW1017 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1018(String s) {
if (!s.trim().isEmpty()) {
HOVW1018 = Byte.parseByte(s);
} else {
HOVW1018 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1019(String s) {
if (!s.trim().isEmpty()) {
HOVW1019 = Byte.parseByte(s);
} else {
HOVW1019 = Byte.MIN_VALUE;
}
}

protected final void initHOVW102(String s) {
if (!s.trim().isEmpty()) {
HOVW102 = Byte.parseByte(s);
} else {
HOVW102 = Byte.MIN_VALUE;
}
}

protected final void initHOVW103(String s) {
if (!s.trim().isEmpty()) {
HOVW103 = Byte.parseByte(s);
} else {
HOVW103 = Byte.MIN_VALUE;
}
}

protected final void initHOVW104(String s) {
if (!s.trim().isEmpty()) {
HOVW104 = Byte.parseByte(s);
} else {
HOVW104 = Byte.MIN_VALUE;
}
}

protected final void initHOVW105(String s) {
if (!s.trim().isEmpty()) {
HOVW105 = Byte.parseByte(s);
} else {
HOVW105 = Byte.MIN_VALUE;
}
}

protected final void initHOVW106(String s) {
if (!s.trim().isEmpty()) {
HOVW106 = Byte.parseByte(s);
} else {
HOVW106 = Byte.MIN_VALUE;
}
}

protected final void initHOVW107(String s) {
if (!s.trim().isEmpty()) {
HOVW107 = Byte.parseByte(s);
} else {
HOVW107 = Byte.MIN_VALUE;
}
}

protected final void initHOVW108(String s) {
if (!s.trim().isEmpty()) {
HOVW108 = Byte.parseByte(s);
} else {
HOVW108 = Byte.MIN_VALUE;
}
}

protected final void initHOVW109(String s) {
if (!s.trim().isEmpty()) {
HOVW109 = Byte.parseByte(s);
} else {
HOVW109 = Byte.MIN_VALUE;
}
}

protected final void initHOVW11(String s) {
if (!s.trim().isEmpty()) {
HOVW11 = Byte.parseByte(s);
} else {
HOVW11 = Byte.MIN_VALUE;
}
}

protected final void initHOVW110(String s) {
if (!s.trim().isEmpty()) {
HOVW110 = Byte.parseByte(s);
} else {
HOVW110 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1101(String s) {
if (!s.trim().isEmpty()) {
HOVW1101 = Byte.parseByte(s);
} else {
HOVW1101 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1102(String s) {
if (!s.trim().isEmpty()) {
HOVW1102 = Byte.parseByte(s);
} else {
HOVW1102 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1103(String s) {
if (!s.trim().isEmpty()) {
HOVW1103 = Byte.parseByte(s);
} else {
HOVW1103 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1104(String s) {
if (!s.trim().isEmpty()) {
HOVW1104 = Byte.parseByte(s);
} else {
HOVW1104 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1105(String s) {
if (!s.trim().isEmpty()) {
HOVW1105 = Byte.parseByte(s);
} else {
HOVW1105 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1106(String s) {
if (!s.trim().isEmpty()) {
HOVW1106 = Byte.parseByte(s);
} else {
HOVW1106 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1107(String s) {
if (!s.trim().isEmpty()) {
HOVW1107 = Byte.parseByte(s);
} else {
HOVW1107 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1108(String s) {
if (!s.trim().isEmpty()) {
HOVW1108 = Byte.parseByte(s);
} else {
HOVW1108 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1109(String s) {
if (!s.trim().isEmpty()) {
HOVW1109 = Byte.parseByte(s);
} else {
HOVW1109 = Byte.MIN_VALUE;
}
}

protected final void initHOVW111(String s) {
if (!s.trim().isEmpty()) {
HOVW111 = Byte.parseByte(s);
} else {
HOVW111 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1110(String s) {
if (!s.trim().isEmpty()) {
HOVW1110 = Byte.parseByte(s);
} else {
HOVW1110 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1111(String s) {
if (!s.trim().isEmpty()) {
HOVW1111 = Byte.parseByte(s);
} else {
HOVW1111 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1112(String s) {
if (!s.trim().isEmpty()) {
HOVW1112 = Byte.parseByte(s);
} else {
HOVW1112 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1113(String s) {
if (!s.trim().isEmpty()) {
HOVW1113 = Byte.parseByte(s);
} else {
HOVW1113 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1114(String s) {
if (!s.trim().isEmpty()) {
HOVW1114 = Byte.parseByte(s);
} else {
HOVW1114 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1115(String s) {
if (!s.trim().isEmpty()) {
HOVW1115 = Byte.parseByte(s);
} else {
HOVW1115 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1116(String s) {
if (!s.trim().isEmpty()) {
HOVW1116 = Byte.parseByte(s);
} else {
HOVW1116 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1117(String s) {
if (!s.trim().isEmpty()) {
HOVW1117 = Byte.parseByte(s);
} else {
HOVW1117 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1118(String s) {
if (!s.trim().isEmpty()) {
HOVW1118 = Byte.parseByte(s);
} else {
HOVW1118 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1119(String s) {
if (!s.trim().isEmpty()) {
HOVW1119 = Byte.parseByte(s);
} else {
HOVW1119 = Byte.MIN_VALUE;
}
}

protected final void initHOVW112(String s) {
if (!s.trim().isEmpty()) {
HOVW112 = Byte.parseByte(s);
} else {
HOVW112 = Byte.MIN_VALUE;
}
}

protected final void initHOVW113(String s) {
if (!s.trim().isEmpty()) {
HOVW113 = Byte.parseByte(s);
} else {
HOVW113 = Byte.MIN_VALUE;
}
}

protected final void initHOVW114(String s) {
if (!s.trim().isEmpty()) {
HOVW114 = Byte.parseByte(s);
} else {
HOVW114 = Byte.MIN_VALUE;
}
}

protected final void initHOVW115(String s) {
if (!s.trim().isEmpty()) {
HOVW115 = Byte.parseByte(s);
} else {
HOVW115 = Byte.MIN_VALUE;
}
}

protected final void initHOVW116(String s) {
if (!s.trim().isEmpty()) {
HOVW116 = Byte.parseByte(s);
} else {
HOVW116 = Byte.MIN_VALUE;
}
}

protected final void initHOVW117(String s) {
if (!s.trim().isEmpty()) {
HOVW117 = Byte.parseByte(s);
} else {
HOVW117 = Byte.MIN_VALUE;
}
}

protected final void initHOVW118(String s) {
if (!s.trim().isEmpty()) {
HOVW118 = Byte.parseByte(s);
} else {
HOVW118 = Byte.MIN_VALUE;
}
}

protected final void initHOVW119(String s) {
if (!s.trim().isEmpty()) {
HOVW119 = Byte.parseByte(s);
} else {
HOVW119 = Byte.MIN_VALUE;
}
}

protected final void initHOVW12(String s) {
if (!s.trim().isEmpty()) {
HOVW12 = Byte.parseByte(s);
} else {
HOVW12 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1201(String s) {
if (!s.trim().isEmpty()) {
HOVW1201 = Byte.parseByte(s);
} else {
HOVW1201 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1202(String s) {
if (!s.trim().isEmpty()) {
HOVW1202 = Byte.parseByte(s);
} else {
HOVW1202 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1203(String s) {
if (!s.trim().isEmpty()) {
HOVW1203 = Byte.parseByte(s);
} else {
HOVW1203 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1204(String s) {
if (!s.trim().isEmpty()) {
HOVW1204 = Byte.parseByte(s);
} else {
HOVW1204 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1205(String s) {
if (!s.trim().isEmpty()) {
HOVW1205 = Byte.parseByte(s);
} else {
HOVW1205 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1206(String s) {
if (!s.trim().isEmpty()) {
HOVW1206 = Byte.parseByte(s);
} else {
HOVW1206 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1207(String s) {
if (!s.trim().isEmpty()) {
HOVW1207 = Byte.parseByte(s);
} else {
HOVW1207 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1208(String s) {
if (!s.trim().isEmpty()) {
HOVW1208 = Byte.parseByte(s);
} else {
HOVW1208 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1209(String s) {
if (!s.trim().isEmpty()) {
HOVW1209 = Byte.parseByte(s);
} else {
HOVW1209 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1210(String s) {
if (!s.trim().isEmpty()) {
HOVW1210 = Byte.parseByte(s);
} else {
HOVW1210 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1211(String s) {
if (!s.trim().isEmpty()) {
HOVW1211 = Byte.parseByte(s);
} else {
HOVW1211 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1212(String s) {
if (!s.trim().isEmpty()) {
HOVW1212 = Byte.parseByte(s);
} else {
HOVW1212 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1213(String s) {
if (!s.trim().isEmpty()) {
HOVW1213 = Byte.parseByte(s);
} else {
HOVW1213 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1214(String s) {
if (!s.trim().isEmpty()) {
HOVW1214 = Byte.parseByte(s);
} else {
HOVW1214 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1215(String s) {
if (!s.trim().isEmpty()) {
HOVW1215 = Byte.parseByte(s);
} else {
HOVW1215 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1216(String s) {
if (!s.trim().isEmpty()) {
HOVW1216 = Byte.parseByte(s);
} else {
HOVW1216 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1217(String s) {
if (!s.trim().isEmpty()) {
HOVW1217 = Byte.parseByte(s);
} else {
HOVW1217 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1218(String s) {
if (!s.trim().isEmpty()) {
HOVW1218 = Byte.parseByte(s);
} else {
HOVW1218 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1219(String s) {
if (!s.trim().isEmpty()) {
HOVW1219 = Byte.parseByte(s);
} else {
HOVW1219 = Byte.MIN_VALUE;
}
}

protected final void initHOVW13(String s) {
if (!s.trim().isEmpty()) {
HOVW13 = Byte.parseByte(s);
} else {
HOVW13 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1301(String s) {
if (!s.trim().isEmpty()) {
HOVW1301 = Byte.parseByte(s);
} else {
HOVW1301 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1302(String s) {
if (!s.trim().isEmpty()) {
HOVW1302 = Byte.parseByte(s);
} else {
HOVW1302 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1303(String s) {
if (!s.trim().isEmpty()) {
HOVW1303 = Byte.parseByte(s);
} else {
HOVW1303 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1304(String s) {
if (!s.trim().isEmpty()) {
HOVW1304 = Byte.parseByte(s);
} else {
HOVW1304 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1305(String s) {
if (!s.trim().isEmpty()) {
HOVW1305 = Byte.parseByte(s);
} else {
HOVW1305 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1306(String s) {
if (!s.trim().isEmpty()) {
HOVW1306 = Byte.parseByte(s);
} else {
HOVW1306 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1307(String s) {
if (!s.trim().isEmpty()) {
HOVW1307 = Byte.parseByte(s);
} else {
HOVW1307 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1308(String s) {
if (!s.trim().isEmpty()) {
HOVW1308 = Byte.parseByte(s);
} else {
HOVW1308 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1309(String s) {
if (!s.trim().isEmpty()) {
HOVW1309 = Byte.parseByte(s);
} else {
HOVW1309 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1310(String s) {
if (!s.trim().isEmpty()) {
HOVW1310 = Byte.parseByte(s);
} else {
HOVW1310 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1311(String s) {
if (!s.trim().isEmpty()) {
HOVW1311 = Byte.parseByte(s);
} else {
HOVW1311 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1312(String s) {
if (!s.trim().isEmpty()) {
HOVW1312 = Byte.parseByte(s);
} else {
HOVW1312 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1313(String s) {
if (!s.trim().isEmpty()) {
HOVW1313 = Byte.parseByte(s);
} else {
HOVW1313 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1314(String s) {
if (!s.trim().isEmpty()) {
HOVW1314 = Byte.parseByte(s);
} else {
HOVW1314 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1315(String s) {
if (!s.trim().isEmpty()) {
HOVW1315 = Byte.parseByte(s);
} else {
HOVW1315 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1316(String s) {
if (!s.trim().isEmpty()) {
HOVW1316 = Byte.parseByte(s);
} else {
HOVW1316 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1317(String s) {
if (!s.trim().isEmpty()) {
HOVW1317 = Byte.parseByte(s);
} else {
HOVW1317 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1318(String s) {
if (!s.trim().isEmpty()) {
HOVW1318 = Byte.parseByte(s);
} else {
HOVW1318 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1319(String s) {
if (!s.trim().isEmpty()) {
HOVW1319 = Byte.parseByte(s);
} else {
HOVW1319 = Byte.MIN_VALUE;
}
}

protected final void initHOVW14(String s) {
if (!s.trim().isEmpty()) {
HOVW14 = Byte.parseByte(s);
} else {
HOVW14 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1401(String s) {
if (!s.trim().isEmpty()) {
HOVW1401 = Byte.parseByte(s);
} else {
HOVW1401 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1402(String s) {
if (!s.trim().isEmpty()) {
HOVW1402 = Byte.parseByte(s);
} else {
HOVW1402 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1403(String s) {
if (!s.trim().isEmpty()) {
HOVW1403 = Byte.parseByte(s);
} else {
HOVW1403 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1404(String s) {
if (!s.trim().isEmpty()) {
HOVW1404 = Byte.parseByte(s);
} else {
HOVW1404 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1405(String s) {
if (!s.trim().isEmpty()) {
HOVW1405 = Byte.parseByte(s);
} else {
HOVW1405 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1406(String s) {
if (!s.trim().isEmpty()) {
HOVW1406 = Byte.parseByte(s);
} else {
HOVW1406 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1407(String s) {
if (!s.trim().isEmpty()) {
HOVW1407 = Byte.parseByte(s);
} else {
HOVW1407 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1408(String s) {
if (!s.trim().isEmpty()) {
HOVW1408 = Byte.parseByte(s);
} else {
HOVW1408 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1409(String s) {
if (!s.trim().isEmpty()) {
HOVW1409 = Byte.parseByte(s);
} else {
HOVW1409 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1410(String s) {
if (!s.trim().isEmpty()) {
HOVW1410 = Byte.parseByte(s);
} else {
HOVW1410 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1411(String s) {
if (!s.trim().isEmpty()) {
HOVW1411 = Byte.parseByte(s);
} else {
HOVW1411 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1412(String s) {
if (!s.trim().isEmpty()) {
HOVW1412 = Byte.parseByte(s);
} else {
HOVW1412 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1413(String s) {
if (!s.trim().isEmpty()) {
HOVW1413 = Byte.parseByte(s);
} else {
HOVW1413 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1414(String s) {
if (!s.trim().isEmpty()) {
HOVW1414 = Byte.parseByte(s);
} else {
HOVW1414 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1415(String s) {
if (!s.trim().isEmpty()) {
HOVW1415 = Byte.parseByte(s);
} else {
HOVW1415 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1416(String s) {
if (!s.trim().isEmpty()) {
HOVW1416 = Byte.parseByte(s);
} else {
HOVW1416 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1417(String s) {
if (!s.trim().isEmpty()) {
HOVW1417 = Byte.parseByte(s);
} else {
HOVW1417 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1418(String s) {
if (!s.trim().isEmpty()) {
HOVW1418 = Byte.parseByte(s);
} else {
HOVW1418 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1419(String s) {
if (!s.trim().isEmpty()) {
HOVW1419 = Byte.parseByte(s);
} else {
HOVW1419 = Byte.MIN_VALUE;
}
}

protected final void initHOVW15(String s) {
if (!s.trim().isEmpty()) {
HOVW15 = Byte.parseByte(s);
} else {
HOVW15 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1501(String s) {
if (!s.trim().isEmpty()) {
HOVW1501 = Byte.parseByte(s);
} else {
HOVW1501 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1502(String s) {
if (!s.trim().isEmpty()) {
HOVW1502 = Byte.parseByte(s);
} else {
HOVW1502 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1503(String s) {
if (!s.trim().isEmpty()) {
HOVW1503 = Byte.parseByte(s);
} else {
HOVW1503 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1504(String s) {
if (!s.trim().isEmpty()) {
HOVW1504 = Byte.parseByte(s);
} else {
HOVW1504 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1505(String s) {
if (!s.trim().isEmpty()) {
HOVW1505 = Byte.parseByte(s);
} else {
HOVW1505 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1506(String s) {
if (!s.trim().isEmpty()) {
HOVW1506 = Byte.parseByte(s);
} else {
HOVW1506 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1507(String s) {
if (!s.trim().isEmpty()) {
HOVW1507 = Byte.parseByte(s);
} else {
HOVW1507 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1508(String s) {
if (!s.trim().isEmpty()) {
HOVW1508 = Byte.parseByte(s);
} else {
HOVW1508 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1509(String s) {
if (!s.trim().isEmpty()) {
HOVW1509 = Byte.parseByte(s);
} else {
HOVW1509 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1510(String s) {
if (!s.trim().isEmpty()) {
HOVW1510 = Byte.parseByte(s);
} else {
HOVW1510 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1511(String s) {
if (!s.trim().isEmpty()) {
HOVW1511 = Byte.parseByte(s);
} else {
HOVW1511 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1512(String s) {
if (!s.trim().isEmpty()) {
HOVW1512 = Byte.parseByte(s);
} else {
HOVW1512 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1513(String s) {
if (!s.trim().isEmpty()) {
HOVW1513 = Byte.parseByte(s);
} else {
HOVW1513 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1514(String s) {
if (!s.trim().isEmpty()) {
HOVW1514 = Byte.parseByte(s);
} else {
HOVW1514 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1515(String s) {
if (!s.trim().isEmpty()) {
HOVW1515 = Byte.parseByte(s);
} else {
HOVW1515 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1516(String s) {
if (!s.trim().isEmpty()) {
HOVW1516 = Byte.parseByte(s);
} else {
HOVW1516 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1517(String s) {
if (!s.trim().isEmpty()) {
HOVW1517 = Byte.parseByte(s);
} else {
HOVW1517 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1518(String s) {
if (!s.trim().isEmpty()) {
HOVW1518 = Byte.parseByte(s);
} else {
HOVW1518 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1519(String s) {
if (!s.trim().isEmpty()) {
HOVW1519 = Byte.parseByte(s);
} else {
HOVW1519 = Byte.MIN_VALUE;
}
}

protected final void initHOVW16(String s) {
if (!s.trim().isEmpty()) {
HOVW16 = Byte.parseByte(s);
} else {
HOVW16 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1601(String s) {
if (!s.trim().isEmpty()) {
HOVW1601 = Byte.parseByte(s);
} else {
HOVW1601 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1602(String s) {
if (!s.trim().isEmpty()) {
HOVW1602 = Byte.parseByte(s);
} else {
HOVW1602 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1603(String s) {
if (!s.trim().isEmpty()) {
HOVW1603 = Byte.parseByte(s);
} else {
HOVW1603 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1604(String s) {
if (!s.trim().isEmpty()) {
HOVW1604 = Byte.parseByte(s);
} else {
HOVW1604 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1605(String s) {
if (!s.trim().isEmpty()) {
HOVW1605 = Byte.parseByte(s);
} else {
HOVW1605 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1606(String s) {
if (!s.trim().isEmpty()) {
HOVW1606 = Byte.parseByte(s);
} else {
HOVW1606 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1607(String s) {
if (!s.trim().isEmpty()) {
HOVW1607 = Byte.parseByte(s);
} else {
HOVW1607 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1608(String s) {
if (!s.trim().isEmpty()) {
HOVW1608 = Byte.parseByte(s);
} else {
HOVW1608 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1609(String s) {
if (!s.trim().isEmpty()) {
HOVW1609 = Byte.parseByte(s);
} else {
HOVW1609 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1610(String s) {
if (!s.trim().isEmpty()) {
HOVW1610 = Byte.parseByte(s);
} else {
HOVW1610 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1611(String s) {
if (!s.trim().isEmpty()) {
HOVW1611 = Byte.parseByte(s);
} else {
HOVW1611 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1612(String s) {
if (!s.trim().isEmpty()) {
HOVW1612 = Byte.parseByte(s);
} else {
HOVW1612 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1613(String s) {
if (!s.trim().isEmpty()) {
HOVW1613 = Byte.parseByte(s);
} else {
HOVW1613 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1614(String s) {
if (!s.trim().isEmpty()) {
HOVW1614 = Byte.parseByte(s);
} else {
HOVW1614 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1615(String s) {
if (!s.trim().isEmpty()) {
HOVW1615 = Byte.parseByte(s);
} else {
HOVW1615 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1616(String s) {
if (!s.trim().isEmpty()) {
HOVW1616 = Byte.parseByte(s);
} else {
HOVW1616 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1617(String s) {
if (!s.trim().isEmpty()) {
HOVW1617 = Byte.parseByte(s);
} else {
HOVW1617 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1618(String s) {
if (!s.trim().isEmpty()) {
HOVW1618 = Byte.parseByte(s);
} else {
HOVW1618 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1619(String s) {
if (!s.trim().isEmpty()) {
HOVW1619 = Byte.parseByte(s);
} else {
HOVW1619 = Byte.MIN_VALUE;
}
}

protected final void initHOVW2(String s) {
if (!s.trim().isEmpty()) {
HOVW2 = Byte.parseByte(s);
} else {
HOVW2 = Byte.MIN_VALUE;
}
}

protected final void initHOVW201(String s) {
if (!s.trim().isEmpty()) {
HOVW201 = Byte.parseByte(s);
} else {
HOVW201 = Byte.MIN_VALUE;
}
}

protected final void initHOVW202(String s) {
if (!s.trim().isEmpty()) {
HOVW202 = Byte.parseByte(s);
} else {
HOVW202 = Byte.MIN_VALUE;
}
}

protected final void initHOVW203(String s) {
if (!s.trim().isEmpty()) {
HOVW203 = Byte.parseByte(s);
} else {
HOVW203 = Byte.MIN_VALUE;
}
}

protected final void initHOVW204(String s) {
if (!s.trim().isEmpty()) {
HOVW204 = Byte.parseByte(s);
} else {
HOVW204 = Byte.MIN_VALUE;
}
}

protected final void initHOVW205(String s) {
if (!s.trim().isEmpty()) {
HOVW205 = Byte.parseByte(s);
} else {
HOVW205 = Byte.MIN_VALUE;
}
}

protected final void initHOVW206(String s) {
if (!s.trim().isEmpty()) {
HOVW206 = Byte.parseByte(s);
} else {
HOVW206 = Byte.MIN_VALUE;
}
}

protected final void initHOVW207(String s) {
if (!s.trim().isEmpty()) {
HOVW207 = Byte.parseByte(s);
} else {
HOVW207 = Byte.MIN_VALUE;
}
}

protected final void initHOVW208(String s) {
if (!s.trim().isEmpty()) {
HOVW208 = Byte.parseByte(s);
} else {
HOVW208 = Byte.MIN_VALUE;
}
}

protected final void initHOVW209(String s) {
if (!s.trim().isEmpty()) {
HOVW209 = Byte.parseByte(s);
} else {
HOVW209 = Byte.MIN_VALUE;
}
}

protected final void initHOVW210(String s) {
if (!s.trim().isEmpty()) {
HOVW210 = Byte.parseByte(s);
} else {
HOVW210 = Byte.MIN_VALUE;
}
}

protected final void initHOVW211(String s) {
if (!s.trim().isEmpty()) {
HOVW211 = Byte.parseByte(s);
} else {
HOVW211 = Byte.MIN_VALUE;
}
}

protected final void initHOVW212(String s) {
if (!s.trim().isEmpty()) {
HOVW212 = Byte.parseByte(s);
} else {
HOVW212 = Byte.MIN_VALUE;
}
}

protected final void initHOVW213(String s) {
if (!s.trim().isEmpty()) {
HOVW213 = Byte.parseByte(s);
} else {
HOVW213 = Byte.MIN_VALUE;
}
}

protected final void initHOVW214(String s) {
if (!s.trim().isEmpty()) {
HOVW214 = Byte.parseByte(s);
} else {
HOVW214 = Byte.MIN_VALUE;
}
}

protected final void initHOVW215(String s) {
if (!s.trim().isEmpty()) {
HOVW215 = Byte.parseByte(s);
} else {
HOVW215 = Byte.MIN_VALUE;
}
}

protected final void initHOVW216(String s) {
if (!s.trim().isEmpty()) {
HOVW216 = Byte.parseByte(s);
} else {
HOVW216 = Byte.MIN_VALUE;
}
}

protected final void initHOVW217(String s) {
if (!s.trim().isEmpty()) {
HOVW217 = Byte.parseByte(s);
} else {
HOVW217 = Byte.MIN_VALUE;
}
}

protected final void initHOVW218(String s) {
if (!s.trim().isEmpty()) {
HOVW218 = Byte.parseByte(s);
} else {
HOVW218 = Byte.MIN_VALUE;
}
}

protected final void initHOVW219(String s) {
if (!s.trim().isEmpty()) {
HOVW219 = Byte.parseByte(s);
} else {
HOVW219 = Byte.MIN_VALUE;
}
}

protected final void initHOVW3(String s) {
if (!s.trim().isEmpty()) {
HOVW3 = Byte.parseByte(s);
} else {
HOVW3 = Byte.MIN_VALUE;
}
}

protected final void initHOVW301(String s) {
if (!s.trim().isEmpty()) {
HOVW301 = Byte.parseByte(s);
} else {
HOVW301 = Byte.MIN_VALUE;
}
}

protected final void initHOVW302(String s) {
if (!s.trim().isEmpty()) {
HOVW302 = Byte.parseByte(s);
} else {
HOVW302 = Byte.MIN_VALUE;
}
}

protected final void initHOVW303(String s) {
if (!s.trim().isEmpty()) {
HOVW303 = Byte.parseByte(s);
} else {
HOVW303 = Byte.MIN_VALUE;
}
}

protected final void initHOVW304(String s) {
if (!s.trim().isEmpty()) {
HOVW304 = Byte.parseByte(s);
} else {
HOVW304 = Byte.MIN_VALUE;
}
}

protected final void initHOVW305(String s) {
if (!s.trim().isEmpty()) {
HOVW305 = Byte.parseByte(s);
} else {
HOVW305 = Byte.MIN_VALUE;
}
}

protected final void initHOVW306(String s) {
if (!s.trim().isEmpty()) {
HOVW306 = Byte.parseByte(s);
} else {
HOVW306 = Byte.MIN_VALUE;
}
}

protected final void initHOVW307(String s) {
if (!s.trim().isEmpty()) {
HOVW307 = Byte.parseByte(s);
} else {
HOVW307 = Byte.MIN_VALUE;
}
}

protected final void initHOVW308(String s) {
if (!s.trim().isEmpty()) {
HOVW308 = Byte.parseByte(s);
} else {
HOVW308 = Byte.MIN_VALUE;
}
}

protected final void initHOVW309(String s) {
if (!s.trim().isEmpty()) {
HOVW309 = Byte.parseByte(s);
} else {
HOVW309 = Byte.MIN_VALUE;
}
}

protected final void initHOVW310(String s) {
if (!s.trim().isEmpty()) {
HOVW310 = Byte.parseByte(s);
} else {
HOVW310 = Byte.MIN_VALUE;
}
}

protected final void initHOVW311(String s) {
if (!s.trim().isEmpty()) {
HOVW311 = Byte.parseByte(s);
} else {
HOVW311 = Byte.MIN_VALUE;
}
}

protected final void initHOVW312(String s) {
if (!s.trim().isEmpty()) {
HOVW312 = Byte.parseByte(s);
} else {
HOVW312 = Byte.MIN_VALUE;
}
}

protected final void initHOVW313(String s) {
if (!s.trim().isEmpty()) {
HOVW313 = Byte.parseByte(s);
} else {
HOVW313 = Byte.MIN_VALUE;
}
}

protected final void initHOVW314(String s) {
if (!s.trim().isEmpty()) {
HOVW314 = Byte.parseByte(s);
} else {
HOVW314 = Byte.MIN_VALUE;
}
}

protected final void initHOVW315(String s) {
if (!s.trim().isEmpty()) {
HOVW315 = Byte.parseByte(s);
} else {
HOVW315 = Byte.MIN_VALUE;
}
}

protected final void initHOVW316(String s) {
if (!s.trim().isEmpty()) {
HOVW316 = Byte.parseByte(s);
} else {
HOVW316 = Byte.MIN_VALUE;
}
}

protected final void initHOVW317(String s) {
if (!s.trim().isEmpty()) {
HOVW317 = Byte.parseByte(s);
} else {
HOVW317 = Byte.MIN_VALUE;
}
}

protected final void initHOVW318(String s) {
if (!s.trim().isEmpty()) {
HOVW318 = Byte.parseByte(s);
} else {
HOVW318 = Byte.MIN_VALUE;
}
}

protected final void initHOVW319(String s) {
if (!s.trim().isEmpty()) {
HOVW319 = Byte.parseByte(s);
} else {
HOVW319 = Byte.MIN_VALUE;
}
}

protected final void initHOVW401(String s) {
if (!s.trim().isEmpty()) {
HOVW401 = Byte.parseByte(s);
} else {
HOVW401 = Byte.MIN_VALUE;
}
}

protected final void initHOVW402(String s) {
if (!s.trim().isEmpty()) {
HOVW402 = Byte.parseByte(s);
} else {
HOVW402 = Byte.MIN_VALUE;
}
}

protected final void initHOVW403(String s) {
if (!s.trim().isEmpty()) {
HOVW403 = Byte.parseByte(s);
} else {
HOVW403 = Byte.MIN_VALUE;
}
}

protected final void initHOVW404(String s) {
if (!s.trim().isEmpty()) {
HOVW404 = Byte.parseByte(s);
} else {
HOVW404 = Byte.MIN_VALUE;
}
}

protected final void initHOVW405(String s) {
if (!s.trim().isEmpty()) {
HOVW405 = Byte.parseByte(s);
} else {
HOVW405 = Byte.MIN_VALUE;
}
}

protected final void initHOVW406(String s) {
if (!s.trim().isEmpty()) {
HOVW406 = Byte.parseByte(s);
} else {
HOVW406 = Byte.MIN_VALUE;
}
}

protected final void initHOVW407(String s) {
if (!s.trim().isEmpty()) {
HOVW407 = Byte.parseByte(s);
} else {
HOVW407 = Byte.MIN_VALUE;
}
}

protected final void initHOVW408(String s) {
if (!s.trim().isEmpty()) {
HOVW408 = Byte.parseByte(s);
} else {
HOVW408 = Byte.MIN_VALUE;
}
}

protected final void initHOVW409(String s) {
if (!s.trim().isEmpty()) {
HOVW409 = Byte.parseByte(s);
} else {
HOVW409 = Byte.MIN_VALUE;
}
}

protected final void initHOVW410(String s) {
if (!s.trim().isEmpty()) {
HOVW410 = Byte.parseByte(s);
} else {
HOVW410 = Byte.MIN_VALUE;
}
}

protected final void initHOVW411(String s) {
if (!s.trim().isEmpty()) {
HOVW411 = Byte.parseByte(s);
} else {
HOVW411 = Byte.MIN_VALUE;
}
}

protected final void initHOVW412(String s) {
if (!s.trim().isEmpty()) {
HOVW412 = Byte.parseByte(s);
} else {
HOVW412 = Byte.MIN_VALUE;
}
}

protected final void initHOVW413(String s) {
if (!s.trim().isEmpty()) {
HOVW413 = Byte.parseByte(s);
} else {
HOVW413 = Byte.MIN_VALUE;
}
}

protected final void initHOVW414(String s) {
if (!s.trim().isEmpty()) {
HOVW414 = Byte.parseByte(s);
} else {
HOVW414 = Byte.MIN_VALUE;
}
}

protected final void initHOVW415(String s) {
if (!s.trim().isEmpty()) {
HOVW415 = Byte.parseByte(s);
} else {
HOVW415 = Byte.MIN_VALUE;
}
}

protected final void initHOVW416(String s) {
if (!s.trim().isEmpty()) {
HOVW416 = Byte.parseByte(s);
} else {
HOVW416 = Byte.MIN_VALUE;
}
}

protected final void initHOVW417(String s) {
if (!s.trim().isEmpty()) {
HOVW417 = Byte.parseByte(s);
} else {
HOVW417 = Byte.MIN_VALUE;
}
}

protected final void initHOVW418(String s) {
if (!s.trim().isEmpty()) {
HOVW418 = Byte.parseByte(s);
} else {
HOVW418 = Byte.MIN_VALUE;
}
}

protected final void initHOVW419(String s) {
if (!s.trim().isEmpty()) {
HOVW419 = Byte.parseByte(s);
} else {
HOVW419 = Byte.MIN_VALUE;
}
}

protected final void initHOVW5(String s) {
if (!s.trim().isEmpty()) {
HOVW5 = Byte.parseByte(s);
} else {
HOVW5 = Byte.MIN_VALUE;
}
}

protected final void initHOVW501(String s) {
if (!s.trim().isEmpty()) {
HOVW501 = Byte.parseByte(s);
} else {
HOVW501 = Byte.MIN_VALUE;
}
}

protected final void initHOVW502(String s) {
if (!s.trim().isEmpty()) {
HOVW502 = Byte.parseByte(s);
} else {
HOVW502 = Byte.MIN_VALUE;
}
}

protected final void initHOVW503(String s) {
if (!s.trim().isEmpty()) {
HOVW503 = Byte.parseByte(s);
} else {
HOVW503 = Byte.MIN_VALUE;
}
}

protected final void initHOVW504(String s) {
if (!s.trim().isEmpty()) {
HOVW504 = Byte.parseByte(s);
} else {
HOVW504 = Byte.MIN_VALUE;
}
}

protected final void initHOVW505(String s) {
if (!s.trim().isEmpty()) {
HOVW505 = Byte.parseByte(s);
} else {
HOVW505 = Byte.MIN_VALUE;
}
}

protected final void initHOVW506(String s) {
if (!s.trim().isEmpty()) {
HOVW506 = Byte.parseByte(s);
} else {
HOVW506 = Byte.MIN_VALUE;
}
}

protected final void initHOVW507(String s) {
if (!s.trim().isEmpty()) {
HOVW507 = Byte.parseByte(s);
} else {
HOVW507 = Byte.MIN_VALUE;
}
}

protected final void initHOVW508(String s) {
if (!s.trim().isEmpty()) {
HOVW508 = Byte.parseByte(s);
} else {
HOVW508 = Byte.MIN_VALUE;
}
}

protected final void initHOVW509(String s) {
if (!s.trim().isEmpty()) {
HOVW509 = Byte.parseByte(s);
} else {
HOVW509 = Byte.MIN_VALUE;
}
}

protected final void initHOVW510(String s) {
if (!s.trim().isEmpty()) {
HOVW510 = Byte.parseByte(s);
} else {
HOVW510 = Byte.MIN_VALUE;
}
}

protected final void initHOVW511(String s) {
if (!s.trim().isEmpty()) {
HOVW511 = Byte.parseByte(s);
} else {
HOVW511 = Byte.MIN_VALUE;
}
}

protected final void initHOVW512(String s) {
if (!s.trim().isEmpty()) {
HOVW512 = Byte.parseByte(s);
} else {
HOVW512 = Byte.MIN_VALUE;
}
}

protected final void initHOVW513(String s) {
if (!s.trim().isEmpty()) {
HOVW513 = Byte.parseByte(s);
} else {
HOVW513 = Byte.MIN_VALUE;
}
}

protected final void initHOVW514(String s) {
if (!s.trim().isEmpty()) {
HOVW514 = Byte.parseByte(s);
} else {
HOVW514 = Byte.MIN_VALUE;
}
}

protected final void initHOVW515(String s) {
if (!s.trim().isEmpty()) {
HOVW515 = Byte.parseByte(s);
} else {
HOVW515 = Byte.MIN_VALUE;
}
}

protected final void initHOVW516(String s) {
if (!s.trim().isEmpty()) {
HOVW516 = Byte.parseByte(s);
} else {
HOVW516 = Byte.MIN_VALUE;
}
}

protected final void initHOVW517(String s) {
if (!s.trim().isEmpty()) {
HOVW517 = Byte.parseByte(s);
} else {
HOVW517 = Byte.MIN_VALUE;
}
}

protected final void initHOVW518(String s) {
if (!s.trim().isEmpty()) {
HOVW518 = Byte.parseByte(s);
} else {
HOVW518 = Byte.MIN_VALUE;
}
}

protected final void initHOVW519(String s) {
if (!s.trim().isEmpty()) {
HOVW519 = Byte.parseByte(s);
} else {
HOVW519 = Byte.MIN_VALUE;
}
}

protected final void initHOVW6(String s) {
if (!s.trim().isEmpty()) {
HOVW6 = Byte.parseByte(s);
} else {
HOVW6 = Byte.MIN_VALUE;
}
}

protected final void initHOVW601(String s) {
if (!s.trim().isEmpty()) {
HOVW601 = Byte.parseByte(s);
} else {
HOVW601 = Byte.MIN_VALUE;
}
}

protected final void initHOVW602(String s) {
if (!s.trim().isEmpty()) {
HOVW602 = Byte.parseByte(s);
} else {
HOVW602 = Byte.MIN_VALUE;
}
}

protected final void initHOVW603(String s) {
if (!s.trim().isEmpty()) {
HOVW603 = Byte.parseByte(s);
} else {
HOVW603 = Byte.MIN_VALUE;
}
}

protected final void initHOVW604(String s) {
if (!s.trim().isEmpty()) {
HOVW604 = Byte.parseByte(s);
} else {
HOVW604 = Byte.MIN_VALUE;
}
}

protected final void initHOVW605(String s) {
if (!s.trim().isEmpty()) {
HOVW605 = Byte.parseByte(s);
} else {
HOVW605 = Byte.MIN_VALUE;
}
}

protected final void initHOVW606(String s) {
if (!s.trim().isEmpty()) {
HOVW606 = Byte.parseByte(s);
} else {
HOVW606 = Byte.MIN_VALUE;
}
}

protected final void initHOVW607(String s) {
if (!s.trim().isEmpty()) {
HOVW607 = Byte.parseByte(s);
} else {
HOVW607 = Byte.MIN_VALUE;
}
}

protected final void initHOVW608(String s) {
if (!s.trim().isEmpty()) {
HOVW608 = Byte.parseByte(s);
} else {
HOVW608 = Byte.MIN_VALUE;
}
}

protected final void initHOVW609(String s) {
if (!s.trim().isEmpty()) {
HOVW609 = Byte.parseByte(s);
} else {
HOVW609 = Byte.MIN_VALUE;
}
}

protected final void initHOVW610(String s) {
if (!s.trim().isEmpty()) {
HOVW610 = Byte.parseByte(s);
} else {
HOVW610 = Byte.MIN_VALUE;
}
}

protected final void initHOVW611(String s) {
if (!s.trim().isEmpty()) {
HOVW611 = Byte.parseByte(s);
} else {
HOVW611 = Byte.MIN_VALUE;
}
}

protected final void initHOVW612(String s) {
if (!s.trim().isEmpty()) {
HOVW612 = Byte.parseByte(s);
} else {
HOVW612 = Byte.MIN_VALUE;
}
}

protected final void initHOVW613(String s) {
if (!s.trim().isEmpty()) {
HOVW613 = Byte.parseByte(s);
} else {
HOVW613 = Byte.MIN_VALUE;
}
}

protected final void initHOVW614(String s) {
if (!s.trim().isEmpty()) {
HOVW614 = Byte.parseByte(s);
} else {
HOVW614 = Byte.MIN_VALUE;
}
}

protected final void initHOVW615(String s) {
if (!s.trim().isEmpty()) {
HOVW615 = Byte.parseByte(s);
} else {
HOVW615 = Byte.MIN_VALUE;
}
}

protected final void initHOVW616(String s) {
if (!s.trim().isEmpty()) {
HOVW616 = Byte.parseByte(s);
} else {
HOVW616 = Byte.MIN_VALUE;
}
}

protected final void initHOVW617(String s) {
if (!s.trim().isEmpty()) {
HOVW617 = Byte.parseByte(s);
} else {
HOVW617 = Byte.MIN_VALUE;
}
}

protected final void initHOVW618(String s) {
if (!s.trim().isEmpty()) {
HOVW618 = Byte.parseByte(s);
} else {
HOVW618 = Byte.MIN_VALUE;
}
}

protected final void initHOVW619(String s) {
if (!s.trim().isEmpty()) {
HOVW619 = Byte.parseByte(s);
} else {
HOVW619 = Byte.MIN_VALUE;
}
}

protected final void initHOVW7(String s) {
if (!s.trim().isEmpty()) {
HOVW7 = Byte.parseByte(s);
} else {
HOVW7 = Byte.MIN_VALUE;
}
}

protected final void initHOVW701(String s) {
if (!s.trim().isEmpty()) {
HOVW701 = Byte.parseByte(s);
} else {
HOVW701 = Byte.MIN_VALUE;
}
}

protected final void initHOVW702(String s) {
if (!s.trim().isEmpty()) {
HOVW702 = Byte.parseByte(s);
} else {
HOVW702 = Byte.MIN_VALUE;
}
}

protected final void initHOVW703(String s) {
if (!s.trim().isEmpty()) {
HOVW703 = Byte.parseByte(s);
} else {
HOVW703 = Byte.MIN_VALUE;
}
}

protected final void initHOVW704(String s) {
if (!s.trim().isEmpty()) {
HOVW704 = Byte.parseByte(s);
} else {
HOVW704 = Byte.MIN_VALUE;
}
}

protected final void initHOVW705(String s) {
if (!s.trim().isEmpty()) {
HOVW705 = Byte.parseByte(s);
} else {
HOVW705 = Byte.MIN_VALUE;
}
}

protected final void initHOVW706(String s) {
if (!s.trim().isEmpty()) {
HOVW706 = Byte.parseByte(s);
} else {
HOVW706 = Byte.MIN_VALUE;
}
}

protected final void initHOVW707(String s) {
if (!s.trim().isEmpty()) {
HOVW707 = Byte.parseByte(s);
} else {
HOVW707 = Byte.MIN_VALUE;
}
}

protected final void initHOVW708(String s) {
if (!s.trim().isEmpty()) {
HOVW708 = Byte.parseByte(s);
} else {
HOVW708 = Byte.MIN_VALUE;
}
}

protected final void initHOVW709(String s) {
if (!s.trim().isEmpty()) {
HOVW709 = Byte.parseByte(s);
} else {
HOVW709 = Byte.MIN_VALUE;
}
}

protected final void initHOVW710(String s) {
if (!s.trim().isEmpty()) {
HOVW710 = Byte.parseByte(s);
} else {
HOVW710 = Byte.MIN_VALUE;
}
}

protected final void initHOVW711(String s) {
if (!s.trim().isEmpty()) {
HOVW711 = Byte.parseByte(s);
} else {
HOVW711 = Byte.MIN_VALUE;
}
}

protected final void initHOVW712(String s) {
if (!s.trim().isEmpty()) {
HOVW712 = Byte.parseByte(s);
} else {
HOVW712 = Byte.MIN_VALUE;
}
}

protected final void initHOVW713(String s) {
if (!s.trim().isEmpty()) {
HOVW713 = Byte.parseByte(s);
} else {
HOVW713 = Byte.MIN_VALUE;
}
}

protected final void initHOVW714(String s) {
if (!s.trim().isEmpty()) {
HOVW714 = Byte.parseByte(s);
} else {
HOVW714 = Byte.MIN_VALUE;
}
}

protected final void initHOVW715(String s) {
if (!s.trim().isEmpty()) {
HOVW715 = Byte.parseByte(s);
} else {
HOVW715 = Byte.MIN_VALUE;
}
}

protected final void initHOVW716(String s) {
if (!s.trim().isEmpty()) {
HOVW716 = Byte.parseByte(s);
} else {
HOVW716 = Byte.MIN_VALUE;
}
}

protected final void initHOVW717(String s) {
if (!s.trim().isEmpty()) {
HOVW717 = Byte.parseByte(s);
} else {
HOVW717 = Byte.MIN_VALUE;
}
}

protected final void initHOVW718(String s) {
if (!s.trim().isEmpty()) {
HOVW718 = Byte.parseByte(s);
} else {
HOVW718 = Byte.MIN_VALUE;
}
}

protected final void initHOVW719(String s) {
if (!s.trim().isEmpty()) {
HOVW719 = Byte.parseByte(s);
} else {
HOVW719 = Byte.MIN_VALUE;
}
}

protected final void initHOVW8(String s) {
if (!s.trim().isEmpty()) {
HOVW8 = Byte.parseByte(s);
} else {
HOVW8 = Byte.MIN_VALUE;
}
}

protected final void initHOVW801(String s) {
if (!s.trim().isEmpty()) {
HOVW801 = Byte.parseByte(s);
} else {
HOVW801 = Byte.MIN_VALUE;
}
}

protected final void initHOVW802(String s) {
if (!s.trim().isEmpty()) {
HOVW802 = Byte.parseByte(s);
} else {
HOVW802 = Byte.MIN_VALUE;
}
}

protected final void initHOVW803(String s) {
if (!s.trim().isEmpty()) {
HOVW803 = Byte.parseByte(s);
} else {
HOVW803 = Byte.MIN_VALUE;
}
}

protected final void initHOVW804(String s) {
if (!s.trim().isEmpty()) {
HOVW804 = Byte.parseByte(s);
} else {
HOVW804 = Byte.MIN_VALUE;
}
}

protected final void initHOVW805(String s) {
if (!s.trim().isEmpty()) {
HOVW805 = Byte.parseByte(s);
} else {
HOVW805 = Byte.MIN_VALUE;
}
}

protected final void initHOVW806(String s) {
if (!s.trim().isEmpty()) {
HOVW806 = Byte.parseByte(s);
} else {
HOVW806 = Byte.MIN_VALUE;
}
}

protected final void initHOVW807(String s) {
if (!s.trim().isEmpty()) {
HOVW807 = Byte.parseByte(s);
} else {
HOVW807 = Byte.MIN_VALUE;
}
}

protected final void initHOVW808(String s) {
if (!s.trim().isEmpty()) {
HOVW808 = Byte.parseByte(s);
} else {
HOVW808 = Byte.MIN_VALUE;
}
}

protected final void initHOVW809(String s) {
if (!s.trim().isEmpty()) {
HOVW809 = Byte.parseByte(s);
} else {
HOVW809 = Byte.MIN_VALUE;
}
}

protected final void initHOVW810(String s) {
if (!s.trim().isEmpty()) {
HOVW810 = Byte.parseByte(s);
} else {
HOVW810 = Byte.MIN_VALUE;
}
}

protected final void initHOVW811(String s) {
if (!s.trim().isEmpty()) {
HOVW811 = Byte.parseByte(s);
} else {
HOVW811 = Byte.MIN_VALUE;
}
}

protected final void initHOVW812(String s) {
if (!s.trim().isEmpty()) {
HOVW812 = Byte.parseByte(s);
} else {
HOVW812 = Byte.MIN_VALUE;
}
}

protected final void initHOVW813(String s) {
if (!s.trim().isEmpty()) {
HOVW813 = Byte.parseByte(s);
} else {
HOVW813 = Byte.MIN_VALUE;
}
}

protected final void initHOVW814(String s) {
if (!s.trim().isEmpty()) {
HOVW814 = Byte.parseByte(s);
} else {
HOVW814 = Byte.MIN_VALUE;
}
}

protected final void initHOVW815(String s) {
if (!s.trim().isEmpty()) {
HOVW815 = Byte.parseByte(s);
} else {
HOVW815 = Byte.MIN_VALUE;
}
}

protected final void initHOVW816(String s) {
if (!s.trim().isEmpty()) {
HOVW816 = Byte.parseByte(s);
} else {
HOVW816 = Byte.MIN_VALUE;
}
}

protected final void initHOVW817(String s) {
if (!s.trim().isEmpty()) {
HOVW817 = Byte.parseByte(s);
} else {
HOVW817 = Byte.MIN_VALUE;
}
}

protected final void initHOVW818(String s) {
if (!s.trim().isEmpty()) {
HOVW818 = Byte.parseByte(s);
} else {
HOVW818 = Byte.MIN_VALUE;
}
}

protected final void initHOVW819(String s) {
if (!s.trim().isEmpty()) {
HOVW819 = Byte.parseByte(s);
} else {
HOVW819 = Byte.MIN_VALUE;
}
}

protected final void initHOVW901(String s) {
if (!s.trim().isEmpty()) {
HOVW901 = Byte.parseByte(s);
} else {
HOVW901 = Byte.MIN_VALUE;
}
}

protected final void initHOVW902(String s) {
if (!s.trim().isEmpty()) {
HOVW902 = Byte.parseByte(s);
} else {
HOVW902 = Byte.MIN_VALUE;
}
}

protected final void initHOVW903(String s) {
if (!s.trim().isEmpty()) {
HOVW903 = Byte.parseByte(s);
} else {
HOVW903 = Byte.MIN_VALUE;
}
}

protected final void initHOVW904(String s) {
if (!s.trim().isEmpty()) {
HOVW904 = Byte.parseByte(s);
} else {
HOVW904 = Byte.MIN_VALUE;
}
}

protected final void initHOVW905(String s) {
if (!s.trim().isEmpty()) {
HOVW905 = Byte.parseByte(s);
} else {
HOVW905 = Byte.MIN_VALUE;
}
}

protected final void initHOVW906(String s) {
if (!s.trim().isEmpty()) {
HOVW906 = Byte.parseByte(s);
} else {
HOVW906 = Byte.MIN_VALUE;
}
}

protected final void initHOVW907(String s) {
if (!s.trim().isEmpty()) {
HOVW907 = Byte.parseByte(s);
} else {
HOVW907 = Byte.MIN_VALUE;
}
}

protected final void initHOVW908(String s) {
if (!s.trim().isEmpty()) {
HOVW908 = Byte.parseByte(s);
} else {
HOVW908 = Byte.MIN_VALUE;
}
}

protected final void initHOVW909(String s) {
if (!s.trim().isEmpty()) {
HOVW909 = Byte.parseByte(s);
} else {
HOVW909 = Byte.MIN_VALUE;
}
}

protected final void initHOVW910(String s) {
if (!s.trim().isEmpty()) {
HOVW910 = Byte.parseByte(s);
} else {
HOVW910 = Byte.MIN_VALUE;
}
}

protected final void initHOVW911(String s) {
if (!s.trim().isEmpty()) {
HOVW911 = Byte.parseByte(s);
} else {
HOVW911 = Byte.MIN_VALUE;
}
}

protected final void initHOVW912(String s) {
if (!s.trim().isEmpty()) {
HOVW912 = Byte.parseByte(s);
} else {
HOVW912 = Byte.MIN_VALUE;
}
}

protected final void initHOVW913(String s) {
if (!s.trim().isEmpty()) {
HOVW913 = Byte.parseByte(s);
} else {
HOVW913 = Byte.MIN_VALUE;
}
}

protected final void initHOVW914(String s) {
if (!s.trim().isEmpty()) {
HOVW914 = Byte.parseByte(s);
} else {
HOVW914 = Byte.MIN_VALUE;
}
}

protected final void initHOVW915(String s) {
if (!s.trim().isEmpty()) {
HOVW915 = Byte.parseByte(s);
} else {
HOVW915 = Byte.MIN_VALUE;
}
}

protected final void initHOVW916(String s) {
if (!s.trim().isEmpty()) {
HOVW916 = Byte.parseByte(s);
} else {
HOVW916 = Byte.MIN_VALUE;
}
}

protected final void initHOVW917(String s) {
if (!s.trim().isEmpty()) {
HOVW917 = Byte.parseByte(s);
} else {
HOVW917 = Byte.MIN_VALUE;
}
}

protected final void initHOVW918(String s) {
if (!s.trim().isEmpty()) {
HOVW918 = Byte.parseByte(s);
} else {
HOVW918 = Byte.MIN_VALUE;
}
}

protected final void initHOVW919(String s) {
if (!s.trim().isEmpty()) {
HOVW919 = Byte.parseByte(s);
} else {
HOVW919 = Byte.MIN_VALUE;
}
}

protected final void initHOVYR(String s) {
if (!s.trim().isEmpty()) {
HOVYR = Short.parseShort(s);
} else {
HOVYR = Short.MIN_VALUE;
}
}

protected final void initHOVYR10(String s) {
if (!s.trim().isEmpty()) {
HOVYR10 = Short.parseShort(s);
} else {
HOVYR10 = Short.MIN_VALUE;
}
}

protected final void initHOVYR11(String s) {
if (!s.trim().isEmpty()) {
HOVYR11 = Short.parseShort(s);
} else {
HOVYR11 = Short.MIN_VALUE;
}
}

protected final void initHOVYR12(String s) {
if (!s.trim().isEmpty()) {
HOVYR12 = Short.parseShort(s);
} else {
HOVYR12 = Short.MIN_VALUE;
}
}

protected final void initHOVYR13(String s) {
if (!s.trim().isEmpty()) {
HOVYR13 = Short.parseShort(s);
} else {
HOVYR13 = Short.MIN_VALUE;
}
}

protected final void initHOVYR14(String s) {
if (!s.trim().isEmpty()) {
HOVYR14 = Short.parseShort(s);
} else {
HOVYR14 = Short.MIN_VALUE;
}
}

protected final void initHOVYR15(String s) {
if (!s.trim().isEmpty()) {
HOVYR15 = Short.parseShort(s);
} else {
HOVYR15 = Short.MIN_VALUE;
}
}

protected final void initHOVYR16(String s) {
if (!s.trim().isEmpty()) {
HOVYR16 = Short.parseShort(s);
} else {
HOVYR16 = Short.MIN_VALUE;
}
}

protected final void initHOVYR2(String s) {
if (!s.trim().isEmpty()) {
HOVYR2 = Short.parseShort(s);
} else {
HOVYR2 = Short.MIN_VALUE;
}
}

protected final void initHOVYR3(String s) {
if (!s.trim().isEmpty()) {
HOVYR3 = Short.parseShort(s);
} else {
HOVYR3 = Short.MIN_VALUE;
}
}

protected final void initHOVYR4(String s) {
if (!s.trim().isEmpty()) {
HOVYR4 = Short.parseShort(s);
} else {
HOVYR4 = Short.MIN_VALUE;
}
}

protected final void initHOVYR5(String s) {
if (!s.trim().isEmpty()) {
HOVYR5 = Short.parseShort(s);
} else {
HOVYR5 = Short.MIN_VALUE;
}
}

protected final void initHOVYR6(String s) {
if (!s.trim().isEmpty()) {
HOVYR6 = Short.parseShort(s);
} else {
HOVYR6 = Short.MIN_VALUE;
}
}

protected final void initHOVYR7(String s) {
if (!s.trim().isEmpty()) {
HOVYR7 = Short.parseShort(s);
} else {
HOVYR7 = Short.MIN_VALUE;
}
}

protected final void initHOVYR8(String s) {
if (!s.trim().isEmpty()) {
HOVYR8 = Short.parseShort(s);
} else {
HOVYR8 = Short.MIN_VALUE;
}
}

protected final void initHOVYR9(String s) {
if (!s.trim().isEmpty()) {
HOVYR9 = Short.parseShort(s);
} else {
HOVYR9 = Short.MIN_VALUE;
}
}

protected final void initHOWH1(String s) {
if (!s.trim().isEmpty()) {
HOWH1 = Byte.parseByte(s);
} else {
HOWH1 = Byte.MIN_VALUE;
}
}

protected final void initHOWH10(String s) {
if (!s.trim().isEmpty()) {
HOWH10 = Byte.parseByte(s);
} else {
HOWH10 = Byte.MIN_VALUE;
}
}

protected final void initHOWH11(String s) {
if (!s.trim().isEmpty()) {
HOWH11 = Byte.parseByte(s);
} else {
HOWH11 = Byte.MIN_VALUE;
}
}

protected final void initHOWH12(String s) {
if (!s.trim().isEmpty()) {
HOWH12 = Byte.parseByte(s);
} else {
HOWH12 = Byte.MIN_VALUE;
}
}

protected final void initHOWH2(String s) {
if (!s.trim().isEmpty()) {
HOWH2 = Byte.parseByte(s);
} else {
HOWH2 = Byte.MIN_VALUE;
}
}

protected final void initHOWH3(String s) {
if (!s.trim().isEmpty()) {
HOWH3 = Byte.parseByte(s);
} else {
HOWH3 = Byte.MIN_VALUE;
}
}

protected final void initHOWH4(String s) {
if (!s.trim().isEmpty()) {
HOWH4 = Byte.parseByte(s);
} else {
HOWH4 = Byte.MIN_VALUE;
}
}

protected final void initHOWH5(String s) {
if (!s.trim().isEmpty()) {
HOWH5 = Byte.parseByte(s);
} else {
HOWH5 = Byte.MIN_VALUE;
}
}

protected final void initHOWH6(String s) {
if (!s.trim().isEmpty()) {
HOWH6 = Byte.parseByte(s);
} else {
HOWH6 = Byte.MIN_VALUE;
}
}

protected final void initHOWH7(String s) {
if (!s.trim().isEmpty()) {
HOWH7 = Byte.parseByte(s);
} else {
HOWH7 = Byte.MIN_VALUE;
}
}

protected final void initHOWH8(String s) {
if (!s.trim().isEmpty()) {
HOWH8 = Byte.parseByte(s);
} else {
HOWH8 = Byte.MIN_VALUE;
}
}

protected final void initHOWH9(String s) {
if (!s.trim().isEmpty()) {
HOWH9 = Byte.parseByte(s);
} else {
HOWH9 = Byte.MIN_VALUE;
}
}

protected final void initHOWH97(String s) {
if (!s.trim().isEmpty()) {
HOWH97 = Byte.parseByte(s);
} else {
HOWH97 = Byte.MIN_VALUE;
}
}

protected final void initHOX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOX = false;
} else {
HOX = true;
}
}
}

protected final void initHOYML1A(String s) {
if (!s.trim().isEmpty()) {
HOYML1A = Byte.parseByte(s);
} else {
HOYML1A = Byte.MIN_VALUE;
}
}

protected final void initHOYML1E(String s) {
if (!s.trim().isEmpty()) {
HOYML1E = Byte.parseByte(s);
} else {
HOYML1E = Byte.MIN_VALUE;
}
}

protected final void initHOYML1M(String s) {
if (!s.trim().isEmpty()) {
HOYML1M = Byte.parseByte(s);
} else {
HOYML1M = Byte.MIN_VALUE;
}
}

protected final void initHOYML1N(String s) {
if (!s.trim().isEmpty()) {
HOYML1N = Byte.parseByte(s);
} else {
HOYML1N = Byte.MIN_VALUE;
}
}

protected final void initHOYML2A(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOYML2A = false;
} else {
HOYML2A = true;
}
}
}

protected final void initHOYML2E(String s) {
if (!s.trim().isEmpty()) {
HOYML2E = Byte.parseByte(s);
} else {
HOYML2E = Byte.MIN_VALUE;
}
}

protected final void initHOYML2M(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOYML2M = false;
} else {
HOYML2M = true;
}
}
}

protected final void initHOYML2N(String s) {
if (!s.trim().isEmpty()) {
HOYML2N = Byte.parseByte(s);
} else {
HOYML2N = Byte.MIN_VALUE;
}
}

protected final void initHOYML3E(String s) {
if (!s.trim().isEmpty()) {
HOYML3E = Byte.parseByte(s);
} else {
HOYML3E = Byte.MIN_VALUE;
}
}

protected final void initHOYML3N(String s) {
if (!s.trim().isEmpty()) {
HOYML3N = Byte.parseByte(s);
} else {
HOYML3N = Byte.MIN_VALUE;
}
}

protected final void initHOYML4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOYML4E = false;
} else {
HOYML4E = true;
}
}
}

protected final void initHOYML4N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOYML4N = false;
} else {
HOYML4N = true;
}
}
}

protected final void initHOYML5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOYML5E = false;
} else {
HOYML5E = true;
}
}
}

protected final void initHOYML5N(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOYML5N = false;
} else {
HOYML5N = true;
}
}
}

protected final void initHSCRP(String s) {
if (!s.trim().isEmpty()) {
HSCRP = Double.parseDouble(s);
} else {
HSCRP = Double.NaN;
}
}

protected final void initHTFEV(String s) {
if (!s.trim().isEmpty()) {
HTFEV = Double.parseDouble(s);
} else {
HTFEV = Double.NaN;
}
}

protected final void initHTFVC(String s) {
if (!s.trim().isEmpty()) {
HTFVC = Double.parseDouble(s);
} else {
HTFVC = Double.NaN;
}
}

protected final void initHTOK(String s) {
if (!s.trim().isEmpty()) {
HTOK = Byte.parseByte(s);
} else {
HTOK = Byte.MIN_VALUE;
}
}

protected final void initHTPF(String s) {
if (!s.trim().isEmpty()) {
HTPF = Short.parseShort(s);
} else {
HTPF = Short.MIN_VALUE;
}
}

protected final void initHTVAL(String s) {
if (!s.trim().isEmpty()) {
HTVAL = Double.parseDouble(s);
} else {
HTVAL = Double.NaN;
}
}

protected final void initIAA39(String s) {
if (!s.trim().isEmpty()) {
IAA39 = Short.parseShort(s);
} else {
IAA39 = Short.MIN_VALUE;
}
}

protected final void initIAA39FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FE = false;
} else {
IAA39FE = true;
}
}
}

protected final void initIAA39FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FL = false;
} else {
IAA39FL = true;
}
}
}

protected final void initIAA39FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FR = false;
} else {
IAA39FR = true;
}
}
}

protected final void initIAA39FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FU = false;
} else {
IAA39FU = true;
}
}
}

protected final void initIAA39ME(String s) {
if (!s.trim().isEmpty()) {
IAA39ME = Byte.parseByte(s);
} else {
IAA39ME = Byte.MIN_VALUE;
}
}

protected final void initIAA39ML(String s) {
if (!s.trim().isEmpty()) {
IAA39ML = Short.parseShort(s);
} else {
IAA39ML = Short.MIN_VALUE;
}
}

protected final void initIAA39MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39MR = false;
} else {
IAA39MR = true;
}
}
}

protected final void initIAA39MU(String s) {
if (!s.trim().isEmpty()) {
IAA39MU = Short.parseShort(s);
} else {
IAA39MU = Short.MIN_VALUE;
}
}

protected final void initIAA39OE(String s) {
if (!s.trim().isEmpty()) {
IAA39OE = Byte.parseByte(s);
} else {
IAA39OE = Byte.MIN_VALUE;
}
}

protected final void initIAA39OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA39OL = false;
} else {
IAA39OL = true;
}
}
}

protected final void initIAA39OR(String s) {
if (!s.trim().isEmpty()) {
IAA39OR = Byte.parseByte(s);
} else {
IAA39OR = Byte.MIN_VALUE;
}
}

protected final void initIAA39OU(String s) {
if (!s.trim().isEmpty()) {
IAA39OU = Short.parseShort(s);
} else {
IAA39OU = Short.MIN_VALUE;
}
}

protected final void initIAA39WE(String s) {
if (!s.trim().isEmpty()) {
IAA39WE = Byte.parseByte(s);
} else {
IAA39WE = Byte.MIN_VALUE;
}
}

protected final void initIAA39WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WL = false;
} else {
IAA39WL = true;
}
}
}

protected final void initIAA39WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WR = false;
} else {
IAA39WR = true;
}
}
}

protected final void initIAA39WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WU = false;
} else {
IAA39WU = true;
}
}
}

protected final void initIAA39YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YE = false;
} else {
IAA39YE = true;
}
}
}

protected final void initIAA39YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YL = false;
} else {
IAA39YL = true;
}
}
}

protected final void initIAA39YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YR = false;
} else {
IAA39YR = true;
}
}
}

protected final void initIAA39YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YU = false;
} else {
IAA39YU = true;
}
}
}

protected final void initIAA40(String s) {
if (!s.trim().isEmpty()) {
IAA40 = Short.parseShort(s);
} else {
IAA40 = Short.MIN_VALUE;
}
}

protected final void initIAA40FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FE = false;
} else {
IAA40FE = true;
}
}
}

protected final void initIAA40FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FL = false;
} else {
IAA40FL = true;
}
}
}

protected final void initIAA40FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FR = false;
} else {
IAA40FR = true;
}
}
}

protected final void initIAA40FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FU = false;
} else {
IAA40FU = true;
}
}
}

protected final void initIAA40ME(String s) {
if (!s.trim().isEmpty()) {
IAA40ME = Byte.parseByte(s);
} else {
IAA40ME = Byte.MIN_VALUE;
}
}

protected final void initIAA40ML(String s) {
if (!s.trim().isEmpty()) {
IAA40ML = Short.parseShort(s);
} else {
IAA40ML = Short.MIN_VALUE;
}
}

protected final void initIAA40MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40MR = false;
} else {
IAA40MR = true;
}
}
}

protected final void initIAA40MU(String s) {
if (!s.trim().isEmpty()) {
IAA40MU = Short.parseShort(s);
} else {
IAA40MU = Short.MIN_VALUE;
}
}

protected final void initIAA40OE(String s) {
if (!s.trim().isEmpty()) {
IAA40OE = Byte.parseByte(s);
} else {
IAA40OE = Byte.MIN_VALUE;
}
}

protected final void initIAA40OL(String s) {
if (!s.trim().isEmpty()) {
IAA40OL = Short.parseShort(s);
} else {
IAA40OL = Short.MIN_VALUE;
}
}

protected final void initIAA40OR(String s) {
if (!s.trim().isEmpty()) {
IAA40OR = Byte.parseByte(s);
} else {
IAA40OR = Byte.MIN_VALUE;
}
}

protected final void initIAA40OU(String s) {
if (!s.trim().isEmpty()) {
IAA40OU = Short.parseShort(s);
} else {
IAA40OU = Short.MIN_VALUE;
}
}

protected final void initIAA40WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WE = false;
} else {
IAA40WE = true;
}
}
}

protected final void initIAA40WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WL = false;
} else {
IAA40WL = true;
}
}
}

protected final void initIAA40WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WR = false;
} else {
IAA40WR = true;
}
}
}

protected final void initIAA40WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WU = false;
} else {
IAA40WU = true;
}
}
}

protected final void initIAA40YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YE = false;
} else {
IAA40YE = true;
}
}
}

protected final void initIAA40YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YL = false;
} else {
IAA40YL = true;
}
}
}

protected final void initIAA40YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YR = false;
} else {
IAA40YR = true;
}
}
}

protected final void initIAA40YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YU = false;
} else {
IAA40YU = true;
}
}
}

protected final void initIAA41(String s) {
if (!s.trim().isEmpty()) {
IAA41 = Short.parseShort(s);
} else {
IAA41 = Short.MIN_VALUE;
}
}

protected final void initIAA41FE(String s) {
if (!s.trim().isEmpty()) {
IAA41FE = Byte.parseByte(s);
} else {
IAA41FE = Byte.MIN_VALUE;
}
}

protected final void initIAA41FL(String s) {
if (!s.trim().isEmpty()) {
IAA41FL = Short.parseShort(s);
} else {
IAA41FL = Short.MIN_VALUE;
}
}

protected final void initIAA41FR(String s) {
if (!s.trim().isEmpty()) {
IAA41FR = Byte.parseByte(s);
} else {
IAA41FR = Byte.MIN_VALUE;
}
}

protected final void initIAA41FU(String s) {
if (!s.trim().isEmpty()) {
IAA41FU = Short.parseShort(s);
} else {
IAA41FU = Short.MIN_VALUE;
}
}

protected final void initIAA41ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41ME = false;
} else {
IAA41ME = true;
}
}
}

protected final void initIAA41ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41ML = false;
} else {
IAA41ML = true;
}
}
}

protected final void initIAA41MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41MR = false;
} else {
IAA41MR = true;
}
}
}

protected final void initIAA41MU(String s) {
if (!s.trim().isEmpty()) {
IAA41MU = Short.parseShort(s);
} else {
IAA41MU = Short.MIN_VALUE;
}
}

protected final void initIAA41OE(String s) {
if (!s.trim().isEmpty()) {
IAA41OE = Byte.parseByte(s);
} else {
IAA41OE = Byte.MIN_VALUE;
}
}

protected final void initIAA41OL(String s) {
if (!s.trim().isEmpty()) {
IAA41OL = Short.parseShort(s);
} else {
IAA41OL = Short.MIN_VALUE;
}
}

protected final void initIAA41OR(String s) {
if (!s.trim().isEmpty()) {
IAA41OR = Byte.parseByte(s);
} else {
IAA41OR = Byte.MIN_VALUE;
}
}

protected final void initIAA41OU(String s) {
if (!s.trim().isEmpty()) {
IAA41OU = Short.parseShort(s);
} else {
IAA41OU = Short.MIN_VALUE;
}
}

protected final void initIAA41WE(String s) {
if (!s.trim().isEmpty()) {
IAA41WE = Byte.parseByte(s);
} else {
IAA41WE = Byte.MIN_VALUE;
}
}

protected final void initIAA41WL(String s) {
if (!s.trim().isEmpty()) {
IAA41WL = Byte.parseByte(s);
} else {
IAA41WL = Byte.MIN_VALUE;
}
}

protected final void initIAA41WR(String s) {
if (!s.trim().isEmpty()) {
IAA41WR = Byte.parseByte(s);
} else {
IAA41WR = Byte.MIN_VALUE;
}
}

protected final void initIAA41WU(String s) {
if (!s.trim().isEmpty()) {
IAA41WU = Byte.parseByte(s);
} else {
IAA41WU = Byte.MIN_VALUE;
}
}

protected final void initIAA41YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YE = false;
} else {
IAA41YE = true;
}
}
}

protected final void initIAA41YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YL = false;
} else {
IAA41YL = true;
}
}
}

protected final void initIAA41YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YR = false;
} else {
IAA41YR = true;
}
}
}

protected final void initIAA41YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YU = false;
} else {
IAA41YU = true;
}
}
}

protected final void initIAA42(String s) {
if (!s.trim().isEmpty()) {
IAA42 = Short.parseShort(s);
} else {
IAA42 = Short.MIN_VALUE;
}
}

protected final void initIAA42FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FE = false;
} else {
IAA42FE = true;
}
}
}

protected final void initIAA42FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FL = false;
} else {
IAA42FL = true;
}
}
}

protected final void initIAA42FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FR = false;
} else {
IAA42FR = true;
}
}
}

protected final void initIAA42FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FU = false;
} else {
IAA42FU = true;
}
}
}

protected final void initIAA42ME(String s) {
if (!s.trim().isEmpty()) {
IAA42ME = Byte.parseByte(s);
} else {
IAA42ME = Byte.MIN_VALUE;
}
}

protected final void initIAA42ML(String s) {
if (!s.trim().isEmpty()) {
IAA42ML = Short.parseShort(s);
} else {
IAA42ML = Short.MIN_VALUE;
}
}

protected final void initIAA42MR(String s) {
if (!s.trim().isEmpty()) {
IAA42MR = Byte.parseByte(s);
} else {
IAA42MR = Byte.MIN_VALUE;
}
}

protected final void initIAA42MU(String s) {
if (!s.trim().isEmpty()) {
IAA42MU = Short.parseShort(s);
} else {
IAA42MU = Short.MIN_VALUE;
}
}

protected final void initIAA42OE(String s) {
if (!s.trim().isEmpty()) {
IAA42OE = Byte.parseByte(s);
} else {
IAA42OE = Byte.MIN_VALUE;
}
}

protected final void initIAA42OL(String s) {
if (!s.trim().isEmpty()) {
IAA42OL = Short.parseShort(s);
} else {
IAA42OL = Short.MIN_VALUE;
}
}

protected final void initIAA42OR(String s) {
if (!s.trim().isEmpty()) {
IAA42OR = Byte.parseByte(s);
} else {
IAA42OR = Byte.MIN_VALUE;
}
}

protected final void initIAA42OU(String s) {
if (!s.trim().isEmpty()) {
IAA42OU = Short.parseShort(s);
} else {
IAA42OU = Short.MIN_VALUE;
}
}

protected final void initIAA42WE(String s) {
if (!s.trim().isEmpty()) {
IAA42WE = Byte.parseByte(s);
} else {
IAA42WE = Byte.MIN_VALUE;
}
}

protected final void initIAA42WL(String s) {
if (!s.trim().isEmpty()) {
IAA42WL = Short.parseShort(s);
} else {
IAA42WL = Short.MIN_VALUE;
}
}

protected final void initIAA42WR(String s) {
if (!s.trim().isEmpty()) {
IAA42WR = Byte.parseByte(s);
} else {
IAA42WR = Byte.MIN_VALUE;
}
}

protected final void initIAA42WU(String s) {
if (!s.trim().isEmpty()) {
IAA42WU = Short.parseShort(s);
} else {
IAA42WU = Short.MIN_VALUE;
}
}

protected final void initIAA42YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42YE = false;
} else {
IAA42YE = true;
}
}
}

protected final void initIAA42YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42YL = false;
} else {
IAA42YL = true;
}
}
}

protected final void initIAA42YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42YR = false;
} else {
IAA42YR = true;
}
}
}

protected final void initIAA42YU(String s) {
if (!s.trim().isEmpty()) {
IAA42YU = Short.parseShort(s);
} else {
IAA42YU = Short.MIN_VALUE;
}
}

protected final void initIAA43(String s) {
if (!s.trim().isEmpty()) {
IAA43 = Short.parseShort(s);
} else {
IAA43 = Short.MIN_VALUE;
}
}

protected final void initIAA43FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FE = false;
} else {
IAA43FE = true;
}
}
}

protected final void initIAA43FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FL = false;
} else {
IAA43FL = true;
}
}
}

protected final void initIAA43FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FR = false;
} else {
IAA43FR = true;
}
}
}

protected final void initIAA43FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43FU = false;
} else {
IAA43FU = true;
}
}
}

protected final void initIAA43ME(String s) {
if (!s.trim().isEmpty()) {
IAA43ME = Byte.parseByte(s);
} else {
IAA43ME = Byte.MIN_VALUE;
}
}

protected final void initIAA43ML(String s) {
if (!s.trim().isEmpty()) {
IAA43ML = Short.parseShort(s);
} else {
IAA43ML = Short.MIN_VALUE;
}
}

protected final void initIAA43MR(String s) {
if (!s.trim().isEmpty()) {
IAA43MR = Byte.parseByte(s);
} else {
IAA43MR = Byte.MIN_VALUE;
}
}

protected final void initIAA43MU(String s) {
if (!s.trim().isEmpty()) {
IAA43MU = Short.parseShort(s);
} else {
IAA43MU = Short.MIN_VALUE;
}
}

protected final void initIAA43OE(String s) {
if (!s.trim().isEmpty()) {
IAA43OE = Byte.parseByte(s);
} else {
IAA43OE = Byte.MIN_VALUE;
}
}

protected final void initIAA43OL(String s) {
if (!s.trim().isEmpty()) {
IAA43OL = Byte.parseByte(s);
} else {
IAA43OL = Byte.MIN_VALUE;
}
}

protected final void initIAA43OR(String s) {
if (!s.trim().isEmpty()) {
IAA43OR = Byte.parseByte(s);
} else {
IAA43OR = Byte.MIN_VALUE;
}
}

protected final void initIAA43OU(String s) {
if (!s.trim().isEmpty()) {
IAA43OU = Short.parseShort(s);
} else {
IAA43OU = Short.MIN_VALUE;
}
}

protected final void initIAA43WE(String s) {
if (!s.trim().isEmpty()) {
IAA43WE = Byte.parseByte(s);
} else {
IAA43WE = Byte.MIN_VALUE;
}
}

protected final void initIAA43WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA43WL = false;
} else {
IAA43WL = true;
}
}
}

protected final void initIAA43WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43WR = false;
} else {
IAA43WR = true;
}
}
}

protected final void initIAA43WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43WU = false;
} else {
IAA43WU = true;
}
}
}

protected final void initIAA43YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YE = false;
} else {
IAA43YE = true;
}
}
}

protected final void initIAA43YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YL = false;
} else {
IAA43YL = true;
}
}
}

protected final void initIAA43YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YR = false;
} else {
IAA43YR = true;
}
}
}

protected final void initIAA43YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA43YU = false;
} else {
IAA43YU = true;
}
}
}

protected final void initIAA44(String s) {
if (!s.trim().isEmpty()) {
IAA44 = Short.parseShort(s);
} else {
IAA44 = Short.MIN_VALUE;
}
}

protected final void initIAA44FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FE = false;
} else {
IAA44FE = true;
}
}
}

protected final void initIAA44FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FL = false;
} else {
IAA44FL = true;
}
}
}

protected final void initIAA44FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FR = false;
} else {
IAA44FR = true;
}
}
}

protected final void initIAA44FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44FU = false;
} else {
IAA44FU = true;
}
}
}

protected final void initIAA44ME(String s) {
if (!s.trim().isEmpty()) {
IAA44ME = Byte.parseByte(s);
} else {
IAA44ME = Byte.MIN_VALUE;
}
}

protected final void initIAA44ML(String s) {
if (!s.trim().isEmpty()) {
IAA44ML = Short.parseShort(s);
} else {
IAA44ML = Short.MIN_VALUE;
}
}

protected final void initIAA44MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44MR = false;
} else {
IAA44MR = true;
}
}
}

protected final void initIAA44MU(String s) {
if (!s.trim().isEmpty()) {
IAA44MU = Short.parseShort(s);
} else {
IAA44MU = Short.MIN_VALUE;
}
}

protected final void initIAA44OE(String s) {
if (!s.trim().isEmpty()) {
IAA44OE = Byte.parseByte(s);
} else {
IAA44OE = Byte.MIN_VALUE;
}
}

protected final void initIAA44OL(String s) {
if (!s.trim().isEmpty()) {
IAA44OL = Short.parseShort(s);
} else {
IAA44OL = Short.MIN_VALUE;
}
}

protected final void initIAA44OR(String s) {
if (!s.trim().isEmpty()) {
IAA44OR = Byte.parseByte(s);
} else {
IAA44OR = Byte.MIN_VALUE;
}
}

protected final void initIAA44OU(String s) {
if (!s.trim().isEmpty()) {
IAA44OU = Short.parseShort(s);
} else {
IAA44OU = Short.MIN_VALUE;
}
}

protected final void initIAA44WE(String s) {
if (!s.trim().isEmpty()) {
IAA44WE = Byte.parseByte(s);
} else {
IAA44WE = Byte.MIN_VALUE;
}
}

protected final void initIAA44WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA44WL = false;
} else {
IAA44WL = true;
}
}
}

protected final void initIAA44WR(String s) {
if (!s.trim().isEmpty()) {
IAA44WR = Byte.parseByte(s);
} else {
IAA44WR = Byte.MIN_VALUE;
}
}

protected final void initIAA44WU(String s) {
if (!s.trim().isEmpty()) {
IAA44WU = Byte.parseByte(s);
} else {
IAA44WU = Byte.MIN_VALUE;
}
}

protected final void initIAA44YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44YE = false;
} else {
IAA44YE = true;
}
}
}

protected final void initIAA44YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44YL = false;
} else {
IAA44YL = true;
}
}
}

protected final void initIAA44YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44YR = false;
} else {
IAA44YR = true;
}
}
}

protected final void initIAA44YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA44YU = false;
} else {
IAA44YU = true;
}
}
}

protected final void initIAA45(String s) {
if (!s.trim().isEmpty()) {
IAA45 = Short.parseShort(s);
} else {
IAA45 = Short.MIN_VALUE;
}
}

protected final void initIAA45FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45FE = false;
} else {
IAA45FE = true;
}
}
}

protected final void initIAA45FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA45FL = false;
} else {
IAA45FL = true;
}
}
}

protected final void initIAA45FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45FR = false;
} else {
IAA45FR = true;
}
}
}

protected final void initIAA45FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA45FU = false;
} else {
IAA45FU = true;
}
}
}

protected final void initIAA45ME(String s) {
if (!s.trim().isEmpty()) {
IAA45ME = Byte.parseByte(s);
} else {
IAA45ME = Byte.MIN_VALUE;
}
}

protected final void initIAA45ML(String s) {
if (!s.trim().isEmpty()) {
IAA45ML = Short.parseShort(s);
} else {
IAA45ML = Short.MIN_VALUE;
}
}

protected final void initIAA45MR(String s) {
if (!s.trim().isEmpty()) {
IAA45MR = Byte.parseByte(s);
} else {
IAA45MR = Byte.MIN_VALUE;
}
}

protected final void initIAA45MU(String s) {
if (!s.trim().isEmpty()) {
IAA45MU = Short.parseShort(s);
} else {
IAA45MU = Short.MIN_VALUE;
}
}

protected final void initIAA45OE(String s) {
if (!s.trim().isEmpty()) {
IAA45OE = Byte.parseByte(s);
} else {
IAA45OE = Byte.MIN_VALUE;
}
}

protected final void initIAA45OL(String s) {
if (!s.trim().isEmpty()) {
IAA45OL = Short.parseShort(s);
} else {
IAA45OL = Short.MIN_VALUE;
}
}

protected final void initIAA45OR(String s) {
if (!s.trim().isEmpty()) {
IAA45OR = Byte.parseByte(s);
} else {
IAA45OR = Byte.MIN_VALUE;
}
}

protected final void initIAA45OU(String s) {
if (!s.trim().isEmpty()) {
IAA45OU = Short.parseShort(s);
} else {
IAA45OU = Short.MIN_VALUE;
}
}

protected final void initIAA45WE(String s) {
if (!s.trim().isEmpty()) {
IAA45WE = Byte.parseByte(s);
} else {
IAA45WE = Byte.MIN_VALUE;
}
}

protected final void initIAA45WL(String s) {
if (!s.trim().isEmpty()) {
IAA45WL = Byte.parseByte(s);
} else {
IAA45WL = Byte.MIN_VALUE;
}
}

protected final void initIAA45WR(String s) {
if (!s.trim().isEmpty()) {
IAA45WR = Byte.parseByte(s);
} else {
IAA45WR = Byte.MIN_VALUE;
}
}

protected final void initIAA45WU(String s) {
if (!s.trim().isEmpty()) {
IAA45WU = Short.parseShort(s);
} else {
IAA45WU = Short.MIN_VALUE;
}
}

protected final void initIAA45YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YE = false;
} else {
IAA45YE = true;
}
}
}

protected final void initIAA45YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YL = false;
} else {
IAA45YL = true;
}
}
}

protected final void initIAA45YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YR = false;
} else {
IAA45YR = true;
}
}
}

protected final void initIAA45YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA45YU = false;
} else {
IAA45YU = true;
}
}
}

protected final void initIAA46(String s) {
if (!s.trim().isEmpty()) {
IAA46 = Short.parseShort(s);
} else {
IAA46 = Short.MIN_VALUE;
}
}

protected final void initIAA46FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46FE = false;
} else {
IAA46FE = true;
}
}
}

protected final void initIAA46FL(String s) {
if (!s.trim().isEmpty()) {
IAA46FL = Short.parseShort(s);
} else {
IAA46FL = Short.MIN_VALUE;
}
}

protected final void initIAA46FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46FR = false;
} else {
IAA46FR = true;
}
}
}

protected final void initIAA46FU(String s) {
if (!s.trim().isEmpty()) {
IAA46FU = Short.parseShort(s);
} else {
IAA46FU = Short.MIN_VALUE;
}
}

protected final void initIAA46ME(String s) {
if (!s.trim().isEmpty()) {
IAA46ME = Byte.parseByte(s);
} else {
IAA46ME = Byte.MIN_VALUE;
}
}

protected final void initIAA46ML(String s) {
if (!s.trim().isEmpty()) {
IAA46ML = Short.parseShort(s);
} else {
IAA46ML = Short.MIN_VALUE;
}
}

protected final void initIAA46MR(String s) {
if (!s.trim().isEmpty()) {
IAA46MR = Byte.parseByte(s);
} else {
IAA46MR = Byte.MIN_VALUE;
}
}

protected final void initIAA46MU(String s) {
if (!s.trim().isEmpty()) {
IAA46MU = Short.parseShort(s);
} else {
IAA46MU = Short.MIN_VALUE;
}
}

protected final void initIAA46OE(String s) {
if (!s.trim().isEmpty()) {
IAA46OE = Byte.parseByte(s);
} else {
IAA46OE = Byte.MIN_VALUE;
}
}

protected final void initIAA46OL(String s) {
if (!s.trim().isEmpty()) {
IAA46OL = Short.parseShort(s);
} else {
IAA46OL = Short.MIN_VALUE;
}
}

protected final void initIAA46OR(String s) {
if (!s.trim().isEmpty()) {
IAA46OR = Byte.parseByte(s);
} else {
IAA46OR = Byte.MIN_VALUE;
}
}

protected final void initIAA46OU(String s) {
if (!s.trim().isEmpty()) {
IAA46OU = Short.parseShort(s);
} else {
IAA46OU = Short.MIN_VALUE;
}
}

protected final void initIAA46WE(String s) {
if (!s.trim().isEmpty()) {
IAA46WE = Byte.parseByte(s);
} else {
IAA46WE = Byte.MIN_VALUE;
}
}

protected final void initIAA46WL(String s) {
if (!s.trim().isEmpty()) {
IAA46WL = Byte.parseByte(s);
} else {
IAA46WL = Byte.MIN_VALUE;
}
}

protected final void initIAA46WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46WR = false;
} else {
IAA46WR = true;
}
}
}

protected final void initIAA46WU(String s) {
if (!s.trim().isEmpty()) {
IAA46WU = Byte.parseByte(s);
} else {
IAA46WU = Byte.MIN_VALUE;
}
}

protected final void initIAA46YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YE = false;
} else {
IAA46YE = true;
}
}
}

protected final void initIAA46YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YL = false;
} else {
IAA46YL = true;
}
}
}

protected final void initIAA46YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YR = false;
} else {
IAA46YR = true;
}
}
}

protected final void initIAA46YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA46YU = false;
} else {
IAA46YU = true;
}
}
}

protected final void initIAA47(String s) {
if (!s.trim().isEmpty()) {
IAA47 = Short.parseShort(s);
} else {
IAA47 = Short.MIN_VALUE;
}
}

protected final void initIAA47FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FE = false;
} else {
IAA47FE = true;
}
}
}

protected final void initIAA47FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FL = false;
} else {
IAA47FL = true;
}
}
}

protected final void initIAA47FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FR = false;
} else {
IAA47FR = true;
}
}
}

protected final void initIAA47FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47FU = false;
} else {
IAA47FU = true;
}
}
}

protected final void initIAA47ME(String s) {
if (!s.trim().isEmpty()) {
IAA47ME = Byte.parseByte(s);
} else {
IAA47ME = Byte.MIN_VALUE;
}
}

protected final void initIAA47ML(String s) {
if (!s.trim().isEmpty()) {
IAA47ML = Short.parseShort(s);
} else {
IAA47ML = Short.MIN_VALUE;
}
}

protected final void initIAA47MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47MR = false;
} else {
IAA47MR = true;
}
}
}

protected final void initIAA47MU(String s) {
if (!s.trim().isEmpty()) {
IAA47MU = Short.parseShort(s);
} else {
IAA47MU = Short.MIN_VALUE;
}
}

protected final void initIAA47OE(String s) {
if (!s.trim().isEmpty()) {
IAA47OE = Byte.parseByte(s);
} else {
IAA47OE = Byte.MIN_VALUE;
}
}

protected final void initIAA47OL(String s) {
if (!s.trim().isEmpty()) {
IAA47OL = Short.parseShort(s);
} else {
IAA47OL = Short.MIN_VALUE;
}
}

protected final void initIAA47OR(String s) {
if (!s.trim().isEmpty()) {
IAA47OR = Byte.parseByte(s);
} else {
IAA47OR = Byte.MIN_VALUE;
}
}

protected final void initIAA47OU(String s) {
if (!s.trim().isEmpty()) {
IAA47OU = Short.parseShort(s);
} else {
IAA47OU = Short.MIN_VALUE;
}
}

protected final void initIAA47WE(String s) {
if (!s.trim().isEmpty()) {
IAA47WE = Byte.parseByte(s);
} else {
IAA47WE = Byte.MIN_VALUE;
}
}

protected final void initIAA47WL(String s) {
if (!s.trim().isEmpty()) {
IAA47WL = Byte.parseByte(s);
} else {
IAA47WL = Byte.MIN_VALUE;
}
}

protected final void initIAA47WR(String s) {
if (!s.trim().isEmpty()) {
IAA47WR = Byte.parseByte(s);
} else {
IAA47WR = Byte.MIN_VALUE;
}
}

protected final void initIAA47WU(String s) {
if (!s.trim().isEmpty()) {
IAA47WU = Byte.parseByte(s);
} else {
IAA47WU = Byte.MIN_VALUE;
}
}

protected final void initIAA47YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47YE = false;
} else {
IAA47YE = true;
}
}
}

protected final void initIAA47YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47YL = false;
} else {
IAA47YL = true;
}
}
}

protected final void initIAA47YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA47YR = false;
} else {
IAA47YR = true;
}
}
}

protected final void initIAA47YU(String s) {
if (!s.trim().isEmpty()) {
IAA47YU = Short.parseShort(s);
} else {
IAA47YU = Short.MIN_VALUE;
}
}

protected final void initIAA48(String s) {
if (!s.trim().isEmpty()) {
IAA48 = Short.parseShort(s);
} else {
IAA48 = Short.MIN_VALUE;
}
}

protected final void initIAA48FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FE = false;
} else {
IAA48FE = true;
}
}
}

protected final void initIAA48FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FL = false;
} else {
IAA48FL = true;
}
}
}

protected final void initIAA48FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FR = false;
} else {
IAA48FR = true;
}
}
}

protected final void initIAA48FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48FU = false;
} else {
IAA48FU = true;
}
}
}

protected final void initIAA48ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48ME = false;
} else {
IAA48ME = true;
}
}
}

protected final void initIAA48ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA48ML = false;
} else {
IAA48ML = true;
}
}
}

protected final void initIAA48MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48MR = false;
} else {
IAA48MR = true;
}
}
}

protected final void initIAA48MU(String s) {
if (!s.trim().isEmpty()) {
IAA48MU = Short.parseShort(s);
} else {
IAA48MU = Short.MIN_VALUE;
}
}

protected final void initIAA48OE(String s) {
if (!s.trim().isEmpty()) {
IAA48OE = Byte.parseByte(s);
} else {
IAA48OE = Byte.MIN_VALUE;
}
}

protected final void initIAA48OL(String s) {
if (!s.trim().isEmpty()) {
IAA48OL = Short.parseShort(s);
} else {
IAA48OL = Short.MIN_VALUE;
}
}

protected final void initIAA48OR(String s) {
if (!s.trim().isEmpty()) {
IAA48OR = Byte.parseByte(s);
} else {
IAA48OR = Byte.MIN_VALUE;
}
}

protected final void initIAA48OU(String s) {
if (!s.trim().isEmpty()) {
IAA48OU = Short.parseShort(s);
} else {
IAA48OU = Short.MIN_VALUE;
}
}

protected final void initIAA48WE(String s) {
if (!s.trim().isEmpty()) {
IAA48WE = Byte.parseByte(s);
} else {
IAA48WE = Byte.MIN_VALUE;
}
}

protected final void initIAA48WL(String s) {
if (!s.trim().isEmpty()) {
IAA48WL = Byte.parseByte(s);
} else {
IAA48WL = Byte.MIN_VALUE;
}
}

protected final void initIAA48WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48WR = false;
} else {
IAA48WR = true;
}
}
}

protected final void initIAA48WU(String s) {
if (!s.trim().isEmpty()) {
IAA48WU = Short.parseShort(s);
} else {
IAA48WU = Short.MIN_VALUE;
}
}

protected final void initIAA48YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YE = false;
} else {
IAA48YE = true;
}
}
}

protected final void initIAA48YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YL = false;
} else {
IAA48YL = true;
}
}
}

protected final void initIAA48YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YR = false;
} else {
IAA48YR = true;
}
}
}

protected final void initIAA48YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA48YU = false;
} else {
IAA48YU = true;
}
}
}

protected final void initIAA49(String s) {
if (!s.trim().isEmpty()) {
IAA49 = Short.parseShort(s);
} else {
IAA49 = Short.MIN_VALUE;
}
}

protected final void initIAA49FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FE = false;
} else {
IAA49FE = true;
}
}
}

protected final void initIAA49FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FL = false;
} else {
IAA49FL = true;
}
}
}

protected final void initIAA49FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FR = false;
} else {
IAA49FR = true;
}
}
}

protected final void initIAA49FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49FU = false;
} else {
IAA49FU = true;
}
}
}

protected final void initIAA49ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49ME = false;
} else {
IAA49ME = true;
}
}
}

protected final void initIAA49ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA49ML = false;
} else {
IAA49ML = true;
}
}
}

protected final void initIAA49MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49MR = false;
} else {
IAA49MR = true;
}
}
}

protected final void initIAA49MU(String s) {
if (!s.trim().isEmpty()) {
IAA49MU = Short.parseShort(s);
} else {
IAA49MU = Short.MIN_VALUE;
}
}

protected final void initIAA49OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49OE = false;
} else {
IAA49OE = true;
}
}
}

protected final void initIAA49OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA49OL = false;
} else {
IAA49OL = true;
}
}
}

protected final void initIAA49OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49OR = false;
} else {
IAA49OR = true;
}
}
}

protected final void initIAA49OU(String s) {
if (!s.trim().isEmpty()) {
IAA49OU = Short.parseShort(s);
} else {
IAA49OU = Short.MIN_VALUE;
}
}

protected final void initIAA49WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WE = false;
} else {
IAA49WE = true;
}
}
}

protected final void initIAA49WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WL = false;
} else {
IAA49WL = true;
}
}
}

protected final void initIAA49WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WR = false;
} else {
IAA49WR = true;
}
}
}

protected final void initIAA49WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49WU = false;
} else {
IAA49WU = true;
}
}
}

protected final void initIAA49YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YE = false;
} else {
IAA49YE = true;
}
}
}

protected final void initIAA49YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YL = false;
} else {
IAA49YL = true;
}
}
}

protected final void initIAA49YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YR = false;
} else {
IAA49YR = true;
}
}
}

protected final void initIAA49YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA49YU = false;
} else {
IAA49YU = true;
}
}
}

protected final void initIAA50(String s) {
if (!s.trim().isEmpty()) {
IAA50 = Short.parseShort(s);
} else {
IAA50 = Short.MIN_VALUE;
}
}

protected final void initIAA50FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FE = false;
} else {
IAA50FE = true;
}
}
}

protected final void initIAA50FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FL = false;
} else {
IAA50FL = true;
}
}
}

protected final void initIAA50FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FR = false;
} else {
IAA50FR = true;
}
}
}

protected final void initIAA50FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50FU = false;
} else {
IAA50FU = true;
}
}
}

protected final void initIAA50ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50ME = false;
} else {
IAA50ME = true;
}
}
}

protected final void initIAA50ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50ML = false;
} else {
IAA50ML = true;
}
}
}

protected final void initIAA50MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50MR = false;
} else {
IAA50MR = true;
}
}
}

protected final void initIAA50MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50MU = false;
} else {
IAA50MU = true;
}
}
}

protected final void initIAA50OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50OE = false;
} else {
IAA50OE = true;
}
}
}

protected final void initIAA50OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50OL = false;
} else {
IAA50OL = true;
}
}
}

protected final void initIAA50OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50OR = false;
} else {
IAA50OR = true;
}
}
}

protected final void initIAA50OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50OU = false;
} else {
IAA50OU = true;
}
}
}

protected final void initIAA50WE(String s) {
if (!s.trim().isEmpty()) {
IAA50WE = Byte.parseByte(s);
} else {
IAA50WE = Byte.MIN_VALUE;
}
}

protected final void initIAA50WL(String s) {
if (!s.trim().isEmpty()) {
IAA50WL = Byte.parseByte(s);
} else {
IAA50WL = Byte.MIN_VALUE;
}
}

protected final void initIAA50WR(String s) {
if (!s.trim().isEmpty()) {
IAA50WR = Byte.parseByte(s);
} else {
IAA50WR = Byte.MIN_VALUE;
}
}

protected final void initIAA50WU(String s) {
if (!s.trim().isEmpty()) {
IAA50WU = Byte.parseByte(s);
} else {
IAA50WU = Byte.MIN_VALUE;
}
}

protected final void initIAA50YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YE = false;
} else {
IAA50YE = true;
}
}
}

protected final void initIAA50YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YL = false;
} else {
IAA50YL = true;
}
}
}

protected final void initIAA50YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YR = false;
} else {
IAA50YR = true;
}
}
}

protected final void initIAA50YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA50YU = false;
} else {
IAA50YU = true;
}
}
}

protected final void initIAA51(String s) {
if (!s.trim().isEmpty()) {
IAA51 = Short.parseShort(s);
} else {
IAA51 = Short.MIN_VALUE;
}
}

protected final void initIAA51FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FE = false;
} else {
IAA51FE = true;
}
}
}

protected final void initIAA51FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FL = false;
} else {
IAA51FL = true;
}
}
}

protected final void initIAA51FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FR = false;
} else {
IAA51FR = true;
}
}
}

protected final void initIAA51FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51FU = false;
} else {
IAA51FU = true;
}
}
}

protected final void initIAA51ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51ME = false;
} else {
IAA51ME = true;
}
}
}

protected final void initIAA51ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51ML = false;
} else {
IAA51ML = true;
}
}
}

protected final void initIAA51MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51MR = false;
} else {
IAA51MR = true;
}
}
}

protected final void initIAA51MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51MU = false;
} else {
IAA51MU = true;
}
}
}

protected final void initIAA51OE(String s) {
if (!s.trim().isEmpty()) {
IAA51OE = Byte.parseByte(s);
} else {
IAA51OE = Byte.MIN_VALUE;
}
}

protected final void initIAA51OL(String s) {
if (!s.trim().isEmpty()) {
IAA51OL = Short.parseShort(s);
} else {
IAA51OL = Short.MIN_VALUE;
}
}

protected final void initIAA51OR(String s) {
if (!s.trim().isEmpty()) {
IAA51OR = Byte.parseByte(s);
} else {
IAA51OR = Byte.MIN_VALUE;
}
}

protected final void initIAA51OU(String s) {
if (!s.trim().isEmpty()) {
IAA51OU = Short.parseShort(s);
} else {
IAA51OU = Short.MIN_VALUE;
}
}

protected final void initIAA51WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WE = false;
} else {
IAA51WE = true;
}
}
}

protected final void initIAA51WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WL = false;
} else {
IAA51WL = true;
}
}
}

protected final void initIAA51WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WR = false;
} else {
IAA51WR = true;
}
}
}

protected final void initIAA51WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51WU = false;
} else {
IAA51WU = true;
}
}
}

protected final void initIAA51YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51YE = false;
} else {
IAA51YE = true;
}
}
}

protected final void initIAA51YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51YL = false;
} else {
IAA51YL = true;
}
}
}

protected final void initIAA51YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51YR = false;
} else {
IAA51YR = true;
}
}
}

protected final void initIAA51YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA51YU = false;
} else {
IAA51YU = true;
}
}
}

protected final void initIAA52(String s) {
if (!s.trim().isEmpty()) {
IAA52 = Short.parseShort(s);
} else {
IAA52 = Short.MIN_VALUE;
}
}

protected final void initIAA52FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FE = false;
} else {
IAA52FE = true;
}
}
}

protected final void initIAA52FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FL = false;
} else {
IAA52FL = true;
}
}
}

protected final void initIAA52FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FR = false;
} else {
IAA52FR = true;
}
}
}

protected final void initIAA52FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52FU = false;
} else {
IAA52FU = true;
}
}
}

protected final void initIAA52ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52ME = false;
} else {
IAA52ME = true;
}
}
}

protected final void initIAA52ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52ML = false;
} else {
IAA52ML = true;
}
}
}

protected final void initIAA52MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52MR = false;
} else {
IAA52MR = true;
}
}
}

protected final void initIAA52MU(String s) {
if (!s.trim().isEmpty()) {
IAA52MU = Short.parseShort(s);
} else {
IAA52MU = Short.MIN_VALUE;
}
}

protected final void initIAA52OE(String s) {
if (!s.trim().isEmpty()) {
IAA52OE = Byte.parseByte(s);
} else {
IAA52OE = Byte.MIN_VALUE;
}
}

protected final void initIAA52OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA52OL = false;
} else {
IAA52OL = true;
}
}
}

protected final void initIAA52OR(String s) {
if (!s.trim().isEmpty()) {
IAA52OR = Byte.parseByte(s);
} else {
IAA52OR = Byte.MIN_VALUE;
}
}

protected final void initIAA52OU(String s) {
if (!s.trim().isEmpty()) {
IAA52OU = Short.parseShort(s);
} else {
IAA52OU = Short.MIN_VALUE;
}
}

protected final void initIAA52WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WE = false;
} else {
IAA52WE = true;
}
}
}

protected final void initIAA52WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WL = false;
} else {
IAA52WL = true;
}
}
}

protected final void initIAA52WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WR = false;
} else {
IAA52WR = true;
}
}
}

protected final void initIAA52WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52WU = false;
} else {
IAA52WU = true;
}
}
}

protected final void initIAA52YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YE = false;
} else {
IAA52YE = true;
}
}
}

protected final void initIAA52YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YL = false;
} else {
IAA52YL = true;
}
}
}

protected final void initIAA52YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YR = false;
} else {
IAA52YR = true;
}
}
}

protected final void initIAA52YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA52YU = false;
} else {
IAA52YU = true;
}
}
}

protected final void initIAA53(String s) {
if (!s.trim().isEmpty()) {
IAA53 = Short.parseShort(s);
} else {
IAA53 = Short.MIN_VALUE;
}
}

protected final void initIAA53FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FE = false;
} else {
IAA53FE = true;
}
}
}

protected final void initIAA53FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FL = false;
} else {
IAA53FL = true;
}
}
}

protected final void initIAA53FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FR = false;
} else {
IAA53FR = true;
}
}
}

protected final void initIAA53FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53FU = false;
} else {
IAA53FU = true;
}
}
}

protected final void initIAA53ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53ME = false;
} else {
IAA53ME = true;
}
}
}

protected final void initIAA53ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA53ML = false;
} else {
IAA53ML = true;
}
}
}

protected final void initIAA53MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53MR = false;
} else {
IAA53MR = true;
}
}
}

protected final void initIAA53MU(String s) {
if (!s.trim().isEmpty()) {
IAA53MU = Short.parseShort(s);
} else {
IAA53MU = Short.MIN_VALUE;
}
}

protected final void initIAA53OE(String s) {
if (!s.trim().isEmpty()) {
IAA53OE = Byte.parseByte(s);
} else {
IAA53OE = Byte.MIN_VALUE;
}
}

protected final void initIAA53OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA53OL = false;
} else {
IAA53OL = true;
}
}
}

protected final void initIAA53OR(String s) {
if (!s.trim().isEmpty()) {
IAA53OR = Byte.parseByte(s);
} else {
IAA53OR = Byte.MIN_VALUE;
}
}

protected final void initIAA53OU(String s) {
if (!s.trim().isEmpty()) {
IAA53OU = Short.parseShort(s);
} else {
IAA53OU = Short.MIN_VALUE;
}
}

protected final void initIAA53WE(String s) {
if (!s.trim().isEmpty()) {
IAA53WE = Byte.parseByte(s);
} else {
IAA53WE = Byte.MIN_VALUE;
}
}

protected final void initIAA53WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA53WL = false;
} else {
IAA53WL = true;
}
}
}

protected final void initIAA53WR(String s) {
if (!s.trim().isEmpty()) {
IAA53WR = Byte.parseByte(s);
} else {
IAA53WR = Byte.MIN_VALUE;
}
}

protected final void initIAA53WU(String s) {
if (!s.trim().isEmpty()) {
IAA53WU = Byte.parseByte(s);
} else {
IAA53WU = Byte.MIN_VALUE;
}
}

protected final void initIAA53YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YE = false;
} else {
IAA53YE = true;
}
}
}

protected final void initIAA53YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YL = false;
} else {
IAA53YL = true;
}
}
}

protected final void initIAA53YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YR = false;
} else {
IAA53YR = true;
}
}
}

protected final void initIAA53YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA53YU = false;
} else {
IAA53YU = true;
}
}
}

protected final void initIAA54(String s) {
if (!s.trim().isEmpty()) {
IAA54 = Short.parseShort(s);
} else {
IAA54 = Short.MIN_VALUE;
}
}

protected final void initIAA54FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FE = false;
} else {
IAA54FE = true;
}
}
}

protected final void initIAA54FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FL = false;
} else {
IAA54FL = true;
}
}
}

protected final void initIAA54FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FR = false;
} else {
IAA54FR = true;
}
}
}

protected final void initIAA54FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54FU = false;
} else {
IAA54FU = true;
}
}
}

protected final void initIAA54ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54ME = false;
} else {
IAA54ME = true;
}
}
}

protected final void initIAA54ML(String s) {
if (!s.trim().isEmpty()) {
IAA54ML = Short.parseShort(s);
} else {
IAA54ML = Short.MIN_VALUE;
}
}

protected final void initIAA54MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54MR = false;
} else {
IAA54MR = true;
}
}
}

protected final void initIAA54MU(String s) {
if (!s.trim().isEmpty()) {
IAA54MU = Short.parseShort(s);
} else {
IAA54MU = Short.MIN_VALUE;
}
}

protected final void initIAA54OE(String s) {
if (!s.trim().isEmpty()) {
IAA54OE = Byte.parseByte(s);
} else {
IAA54OE = Byte.MIN_VALUE;
}
}

protected final void initIAA54OL(String s) {
if (!s.trim().isEmpty()) {
IAA54OL = Short.parseShort(s);
} else {
IAA54OL = Short.MIN_VALUE;
}
}

protected final void initIAA54OR(String s) {
if (!s.trim().isEmpty()) {
IAA54OR = Byte.parseByte(s);
} else {
IAA54OR = Byte.MIN_VALUE;
}
}

protected final void initIAA54OU(String s) {
if (!s.trim().isEmpty()) {
IAA54OU = Short.parseShort(s);
} else {
IAA54OU = Short.MIN_VALUE;
}
}

protected final void initIAA54WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WE = false;
} else {
IAA54WE = true;
}
}
}

protected final void initIAA54WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WL = false;
} else {
IAA54WL = true;
}
}
}

protected final void initIAA54WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WR = false;
} else {
IAA54WR = true;
}
}
}

protected final void initIAA54WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54WU = false;
} else {
IAA54WU = true;
}
}
}

protected final void initIAA54YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54YE = false;
} else {
IAA54YE = true;
}
}
}

protected final void initIAA54YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54YL = false;
} else {
IAA54YL = true;
}
}
}

protected final void initIAA54YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA54YR = false;
} else {
IAA54YR = true;
}
}
}

protected final void initIAA54YU(String s) {
if (!s.trim().isEmpty()) {
IAA54YU = Short.parseShort(s);
} else {
IAA54YU = Short.MIN_VALUE;
}
}

protected final void initIAA55(String s) {
if (!s.trim().isEmpty()) {
IAA55 = Short.parseShort(s);
} else {
IAA55 = Short.MIN_VALUE;
}
}

protected final void initIAA55FE(String s) {
if (!s.trim().isEmpty()) {
IAA55FE = Byte.parseByte(s);
} else {
IAA55FE = Byte.MIN_VALUE;
}
}

protected final void initIAA55FL(String s) {
if (!s.trim().isEmpty()) {
IAA55FL = Byte.parseByte(s);
} else {
IAA55FL = Byte.MIN_VALUE;
}
}

protected final void initIAA55FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55FR = false;
} else {
IAA55FR = true;
}
}
}

protected final void initIAA55FU(String s) {
if (!s.trim().isEmpty()) {
IAA55FU = Byte.parseByte(s);
} else {
IAA55FU = Byte.MIN_VALUE;
}
}

protected final void initIAA55ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55ME = false;
} else {
IAA55ME = true;
}
}
}

protected final void initIAA55ML(String s) {
if (!s.trim().isEmpty()) {
IAA55ML = Short.parseShort(s);
} else {
IAA55ML = Short.MIN_VALUE;
}
}

protected final void initIAA55MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55MR = false;
} else {
IAA55MR = true;
}
}
}

protected final void initIAA55MU(String s) {
if (!s.trim().isEmpty()) {
IAA55MU = Short.parseShort(s);
} else {
IAA55MU = Short.MIN_VALUE;
}
}

protected final void initIAA55OE(String s) {
if (!s.trim().isEmpty()) {
IAA55OE = Byte.parseByte(s);
} else {
IAA55OE = Byte.MIN_VALUE;
}
}

protected final void initIAA55OL(String s) {
if (!s.trim().isEmpty()) {
IAA55OL = Short.parseShort(s);
} else {
IAA55OL = Short.MIN_VALUE;
}
}

protected final void initIAA55OR(String s) {
if (!s.trim().isEmpty()) {
IAA55OR = Byte.parseByte(s);
} else {
IAA55OR = Byte.MIN_VALUE;
}
}

protected final void initIAA55OU(String s) {
if (!s.trim().isEmpty()) {
IAA55OU = Short.parseShort(s);
} else {
IAA55OU = Short.MIN_VALUE;
}
}

protected final void initIAA55WE(String s) {
if (!s.trim().isEmpty()) {
IAA55WE = Byte.parseByte(s);
} else {
IAA55WE = Byte.MIN_VALUE;
}
}

protected final void initIAA55WL(String s) {
if (!s.trim().isEmpty()) {
IAA55WL = Short.parseShort(s);
} else {
IAA55WL = Short.MIN_VALUE;
}
}

protected final void initIAA55WR(String s) {
if (!s.trim().isEmpty()) {
IAA55WR = Byte.parseByte(s);
} else {
IAA55WR = Byte.MIN_VALUE;
}
}

protected final void initIAA55WU(String s) {
if (!s.trim().isEmpty()) {
IAA55WU = Short.parseShort(s);
} else {
IAA55WU = Short.MIN_VALUE;
}
}

protected final void initIAA55YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YE = false;
} else {
IAA55YE = true;
}
}
}

protected final void initIAA55YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YL = false;
} else {
IAA55YL = true;
}
}
}

protected final void initIAA55YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YR = false;
} else {
IAA55YR = true;
}
}
}

protected final void initIAA55YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA55YU = false;
} else {
IAA55YU = true;
}
}
}

protected final void initIAA56(String s) {
if (!s.trim().isEmpty()) {
IAA56 = Short.parseShort(s);
} else {
IAA56 = Short.MIN_VALUE;
}
}

protected final void initIAA56FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FE = false;
} else {
IAA56FE = true;
}
}
}

protected final void initIAA56FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FL = false;
} else {
IAA56FL = true;
}
}
}

protected final void initIAA56FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FR = false;
} else {
IAA56FR = true;
}
}
}

protected final void initIAA56FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56FU = false;
} else {
IAA56FU = true;
}
}
}

protected final void initIAA56ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56ME = false;
} else {
IAA56ME = true;
}
}
}

protected final void initIAA56ML(String s) {
if (!s.trim().isEmpty()) {
IAA56ML = Short.parseShort(s);
} else {
IAA56ML = Short.MIN_VALUE;
}
}

protected final void initIAA56MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56MR = false;
} else {
IAA56MR = true;
}
}
}

protected final void initIAA56MU(String s) {
if (!s.trim().isEmpty()) {
IAA56MU = Short.parseShort(s);
} else {
IAA56MU = Short.MIN_VALUE;
}
}

protected final void initIAA56OE(String s) {
if (!s.trim().isEmpty()) {
IAA56OE = Byte.parseByte(s);
} else {
IAA56OE = Byte.MIN_VALUE;
}
}

protected final void initIAA56OL(String s) {
if (!s.trim().isEmpty()) {
IAA56OL = Byte.parseByte(s);
} else {
IAA56OL = Byte.MIN_VALUE;
}
}

protected final void initIAA56OR(String s) {
if (!s.trim().isEmpty()) {
IAA56OR = Byte.parseByte(s);
} else {
IAA56OR = Byte.MIN_VALUE;
}
}

protected final void initIAA56OU(String s) {
if (!s.trim().isEmpty()) {
IAA56OU = Short.parseShort(s);
} else {
IAA56OU = Short.MIN_VALUE;
}
}

protected final void initIAA56WE(String s) {
if (!s.trim().isEmpty()) {
IAA56WE = Byte.parseByte(s);
} else {
IAA56WE = Byte.MIN_VALUE;
}
}

protected final void initIAA56WL(String s) {
if (!s.trim().isEmpty()) {
IAA56WL = Byte.parseByte(s);
} else {
IAA56WL = Byte.MIN_VALUE;
}
}

protected final void initIAA56WR(String s) {
if (!s.trim().isEmpty()) {
IAA56WR = Byte.parseByte(s);
} else {
IAA56WR = Byte.MIN_VALUE;
}
}

protected final void initIAA56WU(String s) {
if (!s.trim().isEmpty()) {
IAA56WU = Byte.parseByte(s);
} else {
IAA56WU = Byte.MIN_VALUE;
}
}

protected final void initIAA56YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YE = false;
} else {
IAA56YE = true;
}
}
}

protected final void initIAA56YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YL = false;
} else {
IAA56YL = true;
}
}
}

protected final void initIAA56YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YR = false;
} else {
IAA56YR = true;
}
}
}

protected final void initIAA56YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA56YU = false;
} else {
IAA56YU = true;
}
}
}

protected final void initIAA57(String s) {
if (!s.trim().isEmpty()) {
IAA57 = Short.parseShort(s);
} else {
IAA57 = Short.MIN_VALUE;
}
}

protected final void initIAA57FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FE = false;
} else {
IAA57FE = true;
}
}
}

protected final void initIAA57FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FL = false;
} else {
IAA57FL = true;
}
}
}

protected final void initIAA57FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FR = false;
} else {
IAA57FR = true;
}
}
}

protected final void initIAA57FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57FU = false;
} else {
IAA57FU = true;
}
}
}

protected final void initIAA57ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57ME = false;
} else {
IAA57ME = true;
}
}
}

protected final void initIAA57ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57ML = false;
} else {
IAA57ML = true;
}
}
}

protected final void initIAA57MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57MR = false;
} else {
IAA57MR = true;
}
}
}

protected final void initIAA57MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57MU = false;
} else {
IAA57MU = true;
}
}
}

protected final void initIAA57OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57OE = false;
} else {
IAA57OE = true;
}
}
}

protected final void initIAA57OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA57OL = false;
} else {
IAA57OL = true;
}
}
}

protected final void initIAA57OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57OR = false;
} else {
IAA57OR = true;
}
}
}

protected final void initIAA57OU(String s) {
if (!s.trim().isEmpty()) {
IAA57OU = Short.parseShort(s);
} else {
IAA57OU = Short.MIN_VALUE;
}
}

protected final void initIAA57WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WE = false;
} else {
IAA57WE = true;
}
}
}

protected final void initIAA57WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WL = false;
} else {
IAA57WL = true;
}
}
}

protected final void initIAA57WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WR = false;
} else {
IAA57WR = true;
}
}
}

protected final void initIAA57WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57WU = false;
} else {
IAA57WU = true;
}
}
}

protected final void initIAA57YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YE = false;
} else {
IAA57YE = true;
}
}
}

protected final void initIAA57YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YL = false;
} else {
IAA57YL = true;
}
}
}

protected final void initIAA57YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YR = false;
} else {
IAA57YR = true;
}
}
}

protected final void initIAA57YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA57YU = false;
} else {
IAA57YU = true;
}
}
}

protected final void initIAA58(String s) {
if (!s.trim().isEmpty()) {
IAA58 = Short.parseShort(s);
} else {
IAA58 = Short.MIN_VALUE;
}
}

protected final void initIAA58FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FE = false;
} else {
IAA58FE = true;
}
}
}

protected final void initIAA58FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FL = false;
} else {
IAA58FL = true;
}
}
}

protected final void initIAA58FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FR = false;
} else {
IAA58FR = true;
}
}
}

protected final void initIAA58FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58FU = false;
} else {
IAA58FU = true;
}
}
}

protected final void initIAA58ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58ME = false;
} else {
IAA58ME = true;
}
}
}

protected final void initIAA58ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58ML = false;
} else {
IAA58ML = true;
}
}
}

protected final void initIAA58MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58MR = false;
} else {
IAA58MR = true;
}
}
}

protected final void initIAA58MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58MU = false;
} else {
IAA58MU = true;
}
}
}

protected final void initIAA58OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OE = false;
} else {
IAA58OE = true;
}
}
}

protected final void initIAA58OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OL = false;
} else {
IAA58OL = true;
}
}
}

protected final void initIAA58OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OR = false;
} else {
IAA58OR = true;
}
}
}

protected final void initIAA58OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58OU = false;
} else {
IAA58OU = true;
}
}
}

protected final void initIAA58WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WE = false;
} else {
IAA58WE = true;
}
}
}

protected final void initIAA58WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WL = false;
} else {
IAA58WL = true;
}
}
}

protected final void initIAA58WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WR = false;
} else {
IAA58WR = true;
}
}
}

protected final void initIAA58WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58WU = false;
} else {
IAA58WU = true;
}
}
}

protected final void initIAA58YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YE = false;
} else {
IAA58YE = true;
}
}
}

protected final void initIAA58YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YL = false;
} else {
IAA58YL = true;
}
}
}

protected final void initIAA58YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YR = false;
} else {
IAA58YR = true;
}
}
}

protected final void initIAA58YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA58YU = false;
} else {
IAA58YU = true;
}
}
}

protected final void initIAA59(String s) {
if (!s.trim().isEmpty()) {
IAA59 = Short.parseShort(s);
} else {
IAA59 = Short.MIN_VALUE;
}
}

protected final void initIAA59FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FE = false;
} else {
IAA59FE = true;
}
}
}

protected final void initIAA59FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FL = false;
} else {
IAA59FL = true;
}
}
}

protected final void initIAA59FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FR = false;
} else {
IAA59FR = true;
}
}
}

protected final void initIAA59FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59FU = false;
} else {
IAA59FU = true;
}
}
}

protected final void initIAA59ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59ME = false;
} else {
IAA59ME = true;
}
}
}

protected final void initIAA59ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59ML = false;
} else {
IAA59ML = true;
}
}
}

protected final void initIAA59MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59MR = false;
} else {
IAA59MR = true;
}
}
}

protected final void initIAA59MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59MU = false;
} else {
IAA59MU = true;
}
}
}

protected final void initIAA59OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OE = false;
} else {
IAA59OE = true;
}
}
}

protected final void initIAA59OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OL = false;
} else {
IAA59OL = true;
}
}
}

protected final void initIAA59OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OR = false;
} else {
IAA59OR = true;
}
}
}

protected final void initIAA59OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59OU = false;
} else {
IAA59OU = true;
}
}
}

protected final void initIAA59WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WE = false;
} else {
IAA59WE = true;
}
}
}

protected final void initIAA59WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WL = false;
} else {
IAA59WL = true;
}
}
}

protected final void initIAA59WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WR = false;
} else {
IAA59WR = true;
}
}
}

protected final void initIAA59WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59WU = false;
} else {
IAA59WU = true;
}
}
}

protected final void initIAA59YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YE = false;
} else {
IAA59YE = true;
}
}
}

protected final void initIAA59YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YL = false;
} else {
IAA59YL = true;
}
}
}

protected final void initIAA59YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YR = false;
} else {
IAA59YR = true;
}
}
}

protected final void initIAA59YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA59YU = false;
} else {
IAA59YU = true;
}
}
}

protected final void initIAA60(String s) {
if (!s.trim().isEmpty()) {
IAA60 = Short.parseShort(s);
} else {
IAA60 = Short.MIN_VALUE;
}
}

protected final void initIAA60FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FE = false;
} else {
IAA60FE = true;
}
}
}

protected final void initIAA60FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FL = false;
} else {
IAA60FL = true;
}
}
}

protected final void initIAA60FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FR = false;
} else {
IAA60FR = true;
}
}
}

protected final void initIAA60FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60FU = false;
} else {
IAA60FU = true;
}
}
}

protected final void initIAA60ME(String s) {
if (!s.trim().isEmpty()) {
IAA60ME = Byte.parseByte(s);
} else {
IAA60ME = Byte.MIN_VALUE;
}
}

protected final void initIAA60ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60ML = false;
} else {
IAA60ML = true;
}
}
}

protected final void initIAA60MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60MR = false;
} else {
IAA60MR = true;
}
}
}

protected final void initIAA60MU(String s) {
if (!s.trim().isEmpty()) {
IAA60MU = Short.parseShort(s);
} else {
IAA60MU = Short.MIN_VALUE;
}
}

protected final void initIAA60OE(String s) {
if (!s.trim().isEmpty()) {
IAA60OE = Byte.parseByte(s);
} else {
IAA60OE = Byte.MIN_VALUE;
}
}

protected final void initIAA60OL(String s) {
if (!s.trim().isEmpty()) {
IAA60OL = Short.parseShort(s);
} else {
IAA60OL = Short.MIN_VALUE;
}
}

protected final void initIAA60OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60OR = false;
} else {
IAA60OR = true;
}
}
}

protected final void initIAA60OU(String s) {
if (!s.trim().isEmpty()) {
IAA60OU = Short.parseShort(s);
} else {
IAA60OU = Short.MIN_VALUE;
}
}

protected final void initIAA60WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WE = false;
} else {
IAA60WE = true;
}
}
}

protected final void initIAA60WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WL = false;
} else {
IAA60WL = true;
}
}
}

protected final void initIAA60WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WR = false;
} else {
IAA60WR = true;
}
}
}

protected final void initIAA60WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60WU = false;
} else {
IAA60WU = true;
}
}
}

protected final void initIAA60YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YE = false;
} else {
IAA60YE = true;
}
}
}

protected final void initIAA60YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YL = false;
} else {
IAA60YL = true;
}
}
}

protected final void initIAA60YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YR = false;
} else {
IAA60YR = true;
}
}
}

protected final void initIAA60YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA60YU = false;
} else {
IAA60YU = true;
}
}
}

protected final void initIAA61(String s) {
if (!s.trim().isEmpty()) {
IAA61 = Short.parseShort(s);
} else {
IAA61 = Short.MIN_VALUE;
}
}

protected final void initIAA61FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FE = false;
} else {
IAA61FE = true;
}
}
}

protected final void initIAA61FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FL = false;
} else {
IAA61FL = true;
}
}
}

protected final void initIAA61FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FR = false;
} else {
IAA61FR = true;
}
}
}

protected final void initIAA61FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61FU = false;
} else {
IAA61FU = true;
}
}
}

protected final void initIAA61ME(String s) {
if (!s.trim().isEmpty()) {
IAA61ME = Byte.parseByte(s);
} else {
IAA61ME = Byte.MIN_VALUE;
}
}

protected final void initIAA61ML(String s) {
if (!s.trim().isEmpty()) {
IAA61ML = Short.parseShort(s);
} else {
IAA61ML = Short.MIN_VALUE;
}
}

protected final void initIAA61MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61MR = false;
} else {
IAA61MR = true;
}
}
}

protected final void initIAA61MU(String s) {
if (!s.trim().isEmpty()) {
IAA61MU = Short.parseShort(s);
} else {
IAA61MU = Short.MIN_VALUE;
}
}

protected final void initIAA61OE(String s) {
if (!s.trim().isEmpty()) {
IAA61OE = Byte.parseByte(s);
} else {
IAA61OE = Byte.MIN_VALUE;
}
}

protected final void initIAA61OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA61OL = false;
} else {
IAA61OL = true;
}
}
}

protected final void initIAA61OR(String s) {
if (!s.trim().isEmpty()) {
IAA61OR = Byte.parseByte(s);
} else {
IAA61OR = Byte.MIN_VALUE;
}
}

protected final void initIAA61OU(String s) {
if (!s.trim().isEmpty()) {
IAA61OU = Short.parseShort(s);
} else {
IAA61OU = Short.MIN_VALUE;
}
}

protected final void initIAA61WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WE = false;
} else {
IAA61WE = true;
}
}
}

protected final void initIAA61WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WL = false;
} else {
IAA61WL = true;
}
}
}

protected final void initIAA61WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WR = false;
} else {
IAA61WR = true;
}
}
}

protected final void initIAA61WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61WU = false;
} else {
IAA61WU = true;
}
}
}

protected final void initIAA61YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YE = false;
} else {
IAA61YE = true;
}
}
}

protected final void initIAA61YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YL = false;
} else {
IAA61YL = true;
}
}
}

protected final void initIAA61YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YR = false;
} else {
IAA61YR = true;
}
}
}

protected final void initIAA61YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA61YU = false;
} else {
IAA61YU = true;
}
}
}

protected final void initIAA62(String s) {
if (!s.trim().isEmpty()) {
IAA62 = Short.parseShort(s);
} else {
IAA62 = Short.MIN_VALUE;
}
}

protected final void initIAA62FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FE = false;
} else {
IAA62FE = true;
}
}
}

protected final void initIAA62FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FL = false;
} else {
IAA62FL = true;
}
}
}

protected final void initIAA62FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FR = false;
} else {
IAA62FR = true;
}
}
}

protected final void initIAA62FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62FU = false;
} else {
IAA62FU = true;
}
}
}

protected final void initIAA62ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62ME = false;
} else {
IAA62ME = true;
}
}
}

protected final void initIAA62ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA62ML = false;
} else {
IAA62ML = true;
}
}
}

protected final void initIAA62MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62MR = false;
} else {
IAA62MR = true;
}
}
}

protected final void initIAA62MU(String s) {
if (!s.trim().isEmpty()) {
IAA62MU = Short.parseShort(s);
} else {
IAA62MU = Short.MIN_VALUE;
}
}

protected final void initIAA62OE(String s) {
if (!s.trim().isEmpty()) {
IAA62OE = Byte.parseByte(s);
} else {
IAA62OE = Byte.MIN_VALUE;
}
}

protected final void initIAA62OL(String s) {
if (!s.trim().isEmpty()) {
IAA62OL = Short.parseShort(s);
} else {
IAA62OL = Short.MIN_VALUE;
}
}

protected final void initIAA62OR(String s) {
if (!s.trim().isEmpty()) {
IAA62OR = Byte.parseByte(s);
} else {
IAA62OR = Byte.MIN_VALUE;
}
}

protected final void initIAA62OU(String s) {
if (!s.trim().isEmpty()) {
IAA62OU = Short.parseShort(s);
} else {
IAA62OU = Short.MIN_VALUE;
}
}

protected final void initIAA62WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WE = false;
} else {
IAA62WE = true;
}
}
}

protected final void initIAA62WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA62WL = false;
} else {
IAA62WL = true;
}
}
}

protected final void initIAA62WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WR = false;
} else {
IAA62WR = true;
}
}
}

protected final void initIAA62WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62WU = false;
} else {
IAA62WU = true;
}
}
}

protected final void initIAA62YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YE = false;
} else {
IAA62YE = true;
}
}
}

protected final void initIAA62YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YL = false;
} else {
IAA62YL = true;
}
}
}

protected final void initIAA62YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YR = false;
} else {
IAA62YR = true;
}
}
}

protected final void initIAA62YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA62YU = false;
} else {
IAA62YU = true;
}
}
}

protected final void initIAA63(String s) {
if (!s.trim().isEmpty()) {
IAA63 = Short.parseShort(s);
} else {
IAA63 = Short.MIN_VALUE;
}
}

protected final void initIAA63FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FE = false;
} else {
IAA63FE = true;
}
}
}

protected final void initIAA63FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FL = false;
} else {
IAA63FL = true;
}
}
}

protected final void initIAA63FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FR = false;
} else {
IAA63FR = true;
}
}
}

protected final void initIAA63FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63FU = false;
} else {
IAA63FU = true;
}
}
}

protected final void initIAA63ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63ME = false;
} else {
IAA63ME = true;
}
}
}

protected final void initIAA63ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63ML = false;
} else {
IAA63ML = true;
}
}
}

protected final void initIAA63MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63MR = false;
} else {
IAA63MR = true;
}
}
}

protected final void initIAA63MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63MU = false;
} else {
IAA63MU = true;
}
}
}

protected final void initIAA63OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OE = false;
} else {
IAA63OE = true;
}
}
}

protected final void initIAA63OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OL = false;
} else {
IAA63OL = true;
}
}
}

protected final void initIAA63OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OR = false;
} else {
IAA63OR = true;
}
}
}

protected final void initIAA63OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63OU = false;
} else {
IAA63OU = true;
}
}
}

protected final void initIAA63WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WE = false;
} else {
IAA63WE = true;
}
}
}

protected final void initIAA63WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WL = false;
} else {
IAA63WL = true;
}
}
}

protected final void initIAA63WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WR = false;
} else {
IAA63WR = true;
}
}
}

protected final void initIAA63WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63WU = false;
} else {
IAA63WU = true;
}
}
}

protected final void initIAA63YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YE = false;
} else {
IAA63YE = true;
}
}
}

protected final void initIAA63YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YL = false;
} else {
IAA63YL = true;
}
}
}

protected final void initIAA63YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YR = false;
} else {
IAA63YR = true;
}
}
}

protected final void initIAA63YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA63YU = false;
} else {
IAA63YU = true;
}
}
}

protected final void initIAA64(String s) {
if (!s.trim().isEmpty()) {
IAA64 = Short.parseShort(s);
} else {
IAA64 = Short.MIN_VALUE;
}
}

protected final void initIAA64FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FE = false;
} else {
IAA64FE = true;
}
}
}

protected final void initIAA64FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FL = false;
} else {
IAA64FL = true;
}
}
}

protected final void initIAA64FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FR = false;
} else {
IAA64FR = true;
}
}
}

protected final void initIAA64FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64FU = false;
} else {
IAA64FU = true;
}
}
}

protected final void initIAA64ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64ME = false;
} else {
IAA64ME = true;
}
}
}

protected final void initIAA64ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA64ML = false;
} else {
IAA64ML = true;
}
}
}

protected final void initIAA64MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64MR = false;
} else {
IAA64MR = true;
}
}
}

protected final void initIAA64MU(String s) {
if (!s.trim().isEmpty()) {
IAA64MU = Short.parseShort(s);
} else {
IAA64MU = Short.MIN_VALUE;
}
}

protected final void initIAA64OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64OE = false;
} else {
IAA64OE = true;
}
}
}

protected final void initIAA64OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64OL = false;
} else {
IAA64OL = true;
}
}
}

protected final void initIAA64OR(String s) {
if (!s.trim().isEmpty()) {
IAA64OR = Byte.parseByte(s);
} else {
IAA64OR = Byte.MIN_VALUE;
}
}

protected final void initIAA64OU(String s) {
if (!s.trim().isEmpty()) {
IAA64OU = Short.parseShort(s);
} else {
IAA64OU = Short.MIN_VALUE;
}
}

protected final void initIAA64WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64WE = false;
} else {
IAA64WE = true;
}
}
}

protected final void initIAA64WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64WL = false;
} else {
IAA64WL = true;
}
}
}

protected final void initIAA64WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64WR = false;
} else {
IAA64WR = true;
}
}
}

protected final void initIAA64WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64WU = false;
} else {
IAA64WU = true;
}
}
}

protected final void initIAA64YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YE = false;
} else {
IAA64YE = true;
}
}
}

protected final void initIAA64YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YL = false;
} else {
IAA64YL = true;
}
}
}

protected final void initIAA64YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YR = false;
} else {
IAA64YR = true;
}
}
}

protected final void initIAA64YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA64YU = false;
} else {
IAA64YU = true;
}
}
}

protected final void initIAA65(String s) {
if (!s.trim().isEmpty()) {
IAA65 = Short.parseShort(s);
} else {
IAA65 = Short.MIN_VALUE;
}
}

protected final void initIAA65FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FE = false;
} else {
IAA65FE = true;
}
}
}

protected final void initIAA65FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FL = false;
} else {
IAA65FL = true;
}
}
}

protected final void initIAA65FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FR = false;
} else {
IAA65FR = true;
}
}
}

protected final void initIAA65FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65FU = false;
} else {
IAA65FU = true;
}
}
}

protected final void initIAA65ME(String s) {
if (!s.trim().isEmpty()) {
IAA65ME = Byte.parseByte(s);
} else {
IAA65ME = Byte.MIN_VALUE;
}
}

protected final void initIAA65ML(String s) {
if (!s.trim().isEmpty()) {
IAA65ML = Short.parseShort(s);
} else {
IAA65ML = Short.MIN_VALUE;
}
}

protected final void initIAA65MR(String s) {
if (!s.trim().isEmpty()) {
IAA65MR = Byte.parseByte(s);
} else {
IAA65MR = Byte.MIN_VALUE;
}
}

protected final void initIAA65MU(String s) {
if (!s.trim().isEmpty()) {
IAA65MU = Short.parseShort(s);
} else {
IAA65MU = Short.MIN_VALUE;
}
}

protected final void initIAA65OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65OE = false;
} else {
IAA65OE = true;
}
}
}

protected final void initIAA65OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA65OL = false;
} else {
IAA65OL = true;
}
}
}

protected final void initIAA65OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65OR = false;
} else {
IAA65OR = true;
}
}
}

protected final void initIAA65OU(String s) {
if (!s.trim().isEmpty()) {
IAA65OU = Short.parseShort(s);
} else {
IAA65OU = Short.MIN_VALUE;
}
}

protected final void initIAA65WE(String s) {
if (!s.trim().isEmpty()) {
IAA65WE = Byte.parseByte(s);
} else {
IAA65WE = Byte.MIN_VALUE;
}
}

protected final void initIAA65WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65WL = false;
} else {
IAA65WL = true;
}
}
}

protected final void initIAA65WR(String s) {
if (!s.trim().isEmpty()) {
IAA65WR = Byte.parseByte(s);
} else {
IAA65WR = Byte.MIN_VALUE;
}
}

protected final void initIAA65WU(String s) {
if (!s.trim().isEmpty()) {
IAA65WU = Byte.parseByte(s);
} else {
IAA65WU = Byte.MIN_VALUE;
}
}

protected final void initIAA65YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YE = false;
} else {
IAA65YE = true;
}
}
}

protected final void initIAA65YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YL = false;
} else {
IAA65YL = true;
}
}
}

protected final void initIAA65YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YR = false;
} else {
IAA65YR = true;
}
}
}

protected final void initIAA65YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA65YU = false;
} else {
IAA65YU = true;
}
}
}

protected final void initIAA66(String s) {
if (!s.trim().isEmpty()) {
IAA66 = Short.parseShort(s);
} else {
IAA66 = Short.MIN_VALUE;
}
}

protected final void initIAA66FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FE = false;
} else {
IAA66FE = true;
}
}
}

protected final void initIAA66FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FL = false;
} else {
IAA66FL = true;
}
}
}

protected final void initIAA66FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FR = false;
} else {
IAA66FR = true;
}
}
}

protected final void initIAA66FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66FU = false;
} else {
IAA66FU = true;
}
}
}

protected final void initIAA66ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66ME = false;
} else {
IAA66ME = true;
}
}
}

protected final void initIAA66ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66ML = false;
} else {
IAA66ML = true;
}
}
}

protected final void initIAA66MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66MR = false;
} else {
IAA66MR = true;
}
}
}

protected final void initIAA66MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66MU = false;
} else {
IAA66MU = true;
}
}
}

protected final void initIAA66OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66OE = false;
} else {
IAA66OE = true;
}
}
}

protected final void initIAA66OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66OL = false;
} else {
IAA66OL = true;
}
}
}

protected final void initIAA66OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66OR = false;
} else {
IAA66OR = true;
}
}
}

protected final void initIAA66OU(String s) {
if (!s.trim().isEmpty()) {
IAA66OU = Short.parseShort(s);
} else {
IAA66OU = Short.MIN_VALUE;
}
}

protected final void initIAA66WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WE = false;
} else {
IAA66WE = true;
}
}
}

protected final void initIAA66WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WL = false;
} else {
IAA66WL = true;
}
}
}

protected final void initIAA66WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WR = false;
} else {
IAA66WR = true;
}
}
}

protected final void initIAA66WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66WU = false;
} else {
IAA66WU = true;
}
}
}

protected final void initIAA66YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YE = false;
} else {
IAA66YE = true;
}
}
}

protected final void initIAA66YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YL = false;
} else {
IAA66YL = true;
}
}
}

protected final void initIAA66YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YR = false;
} else {
IAA66YR = true;
}
}
}

protected final void initIAA66YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA66YU = false;
} else {
IAA66YU = true;
}
}
}

protected final void initIAA67(String s) {
if (!s.trim().isEmpty()) {
IAA67 = Byte.parseByte(s);
} else {
IAA67 = Byte.MIN_VALUE;
}
}

protected final void initIAA67FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67FE = false;
} else {
IAA67FE = true;
}
}
}

protected final void initIAA67FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67FL = false;
} else {
IAA67FL = true;
}
}
}

protected final void initIAA67FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67FR = false;
} else {
IAA67FR = true;
}
}
}

protected final void initIAA67FU(String s) {
if (!s.trim().isEmpty()) {
IAA67FU = Short.parseShort(s);
} else {
IAA67FU = Short.MIN_VALUE;
}
}

protected final void initIAA67ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67ME = false;
} else {
IAA67ME = true;
}
}
}

protected final void initIAA67ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67ML = false;
} else {
IAA67ML = true;
}
}
}

protected final void initIAA67MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67MR = false;
} else {
IAA67MR = true;
}
}
}

protected final void initIAA67MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67MU = false;
} else {
IAA67MU = true;
}
}
}

protected final void initIAA67OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67OE = false;
} else {
IAA67OE = true;
}
}
}

protected final void initIAA67OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA67OL = false;
} else {
IAA67OL = true;
}
}
}

protected final void initIAA67OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67OR = false;
} else {
IAA67OR = true;
}
}
}

protected final void initIAA67OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA67OU = false;
} else {
IAA67OU = true;
}
}
}

protected final void initIAA67WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67WE = false;
} else {
IAA67WE = true;
}
}
}

protected final void initIAA67WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67WL = false;
} else {
IAA67WL = true;
}
}
}

protected final void initIAA67WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67WR = false;
} else {
IAA67WR = true;
}
}
}

protected final void initIAA67WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67WU = false;
} else {
IAA67WU = true;
}
}
}

protected final void initIAA67YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YE = false;
} else {
IAA67YE = true;
}
}
}

protected final void initIAA67YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YL = false;
} else {
IAA67YL = true;
}
}
}

protected final void initIAA67YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YR = false;
} else {
IAA67YR = true;
}
}
}

protected final void initIAA67YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA67YU = false;
} else {
IAA67YU = true;
}
}
}

protected final void initIAA68(String s) {
if (!s.trim().isEmpty()) {
IAA68 = Short.parseShort(s);
} else {
IAA68 = Short.MIN_VALUE;
}
}

protected final void initIAA68FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FE = false;
} else {
IAA68FE = true;
}
}
}

protected final void initIAA68FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FL = false;
} else {
IAA68FL = true;
}
}
}

protected final void initIAA68FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FR = false;
} else {
IAA68FR = true;
}
}
}

protected final void initIAA68FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68FU = false;
} else {
IAA68FU = true;
}
}
}

protected final void initIAA68ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68ME = false;
} else {
IAA68ME = true;
}
}
}

protected final void initIAA68ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68ML = false;
} else {
IAA68ML = true;
}
}
}

protected final void initIAA68MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68MR = false;
} else {
IAA68MR = true;
}
}
}

protected final void initIAA68MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68MU = false;
} else {
IAA68MU = true;
}
}
}

protected final void initIAA68OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OE = false;
} else {
IAA68OE = true;
}
}
}

protected final void initIAA68OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OL = false;
} else {
IAA68OL = true;
}
}
}

protected final void initIAA68OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OR = false;
} else {
IAA68OR = true;
}
}
}

protected final void initIAA68OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68OU = false;
} else {
IAA68OU = true;
}
}
}

protected final void initIAA68WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WE = false;
} else {
IAA68WE = true;
}
}
}

protected final void initIAA68WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WL = false;
} else {
IAA68WL = true;
}
}
}

protected final void initIAA68WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WR = false;
} else {
IAA68WR = true;
}
}
}

protected final void initIAA68WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68WU = false;
} else {
IAA68WU = true;
}
}
}

protected final void initIAA68YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YE = false;
} else {
IAA68YE = true;
}
}
}

protected final void initIAA68YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YL = false;
} else {
IAA68YL = true;
}
}
}

protected final void initIAA68YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YR = false;
} else {
IAA68YR = true;
}
}
}

protected final void initIAA68YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA68YU = false;
} else {
IAA68YU = true;
}
}
}

protected final void initIAA69(String s) {
if (!s.trim().isEmpty()) {
IAA69 = Short.parseShort(s);
} else {
IAA69 = Short.MIN_VALUE;
}
}

protected final void initIAA69FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69FE = false;
} else {
IAA69FE = true;
}
}
}

protected final void initIAA69FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69FL = false;
} else {
IAA69FL = true;
}
}
}

protected final void initIAA69FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69FR = false;
} else {
IAA69FR = true;
}
}
}

protected final void initIAA69FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69FU = false;
} else {
IAA69FU = true;
}
}
}

protected final void initIAA69ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69ME = false;
} else {
IAA69ME = true;
}
}
}

protected final void initIAA69ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69ML = false;
} else {
IAA69ML = true;
}
}
}

protected final void initIAA69MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69MR = false;
} else {
IAA69MR = true;
}
}
}

protected final void initIAA69MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69MU = false;
} else {
IAA69MU = true;
}
}
}

protected final void initIAA69OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69OE = false;
} else {
IAA69OE = true;
}
}
}

protected final void initIAA69OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69OL = false;
} else {
IAA69OL = true;
}
}
}

protected final void initIAA69OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69OR = false;
} else {
IAA69OR = true;
}
}
}

protected final void initIAA69OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69OU = false;
} else {
IAA69OU = true;
}
}
}

protected final void initIAA69WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69WE = false;
} else {
IAA69WE = true;
}
}
}

protected final void initIAA69WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69WL = false;
} else {
IAA69WL = true;
}
}
}

protected final void initIAA69WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69WR = false;
} else {
IAA69WR = true;
}
}
}

protected final void initIAA69WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69WU = false;
} else {
IAA69WU = true;
}
}
}

protected final void initIAA69YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69YE = false;
} else {
IAA69YE = true;
}
}
}

protected final void initIAA69YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69YL = false;
} else {
IAA69YL = true;
}
}
}

protected final void initIAA69YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69YR = false;
} else {
IAA69YR = true;
}
}
}

protected final void initIAA69YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA69YU = false;
} else {
IAA69YU = true;
}
}
}

protected final void initIAA70(String s) {
if (!s.trim().isEmpty()) {
IAA70 = Short.parseShort(s);
} else {
IAA70 = Short.MIN_VALUE;
}
}

protected final void initIAA70FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70FE = false;
} else {
IAA70FE = true;
}
}
}

protected final void initIAA70FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70FL = false;
} else {
IAA70FL = true;
}
}
}

protected final void initIAA70FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70FR = false;
} else {
IAA70FR = true;
}
}
}

protected final void initIAA70FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70FU = false;
} else {
IAA70FU = true;
}
}
}

protected final void initIAA70ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70ME = false;
} else {
IAA70ME = true;
}
}
}

protected final void initIAA70ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70ML = false;
} else {
IAA70ML = true;
}
}
}

protected final void initIAA70MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70MR = false;
} else {
IAA70MR = true;
}
}
}

protected final void initIAA70MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70MU = false;
} else {
IAA70MU = true;
}
}
}

protected final void initIAA70OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70OE = false;
} else {
IAA70OE = true;
}
}
}

protected final void initIAA70OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70OL = false;
} else {
IAA70OL = true;
}
}
}

protected final void initIAA70OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70OR = false;
} else {
IAA70OR = true;
}
}
}

protected final void initIAA70OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70OU = false;
} else {
IAA70OU = true;
}
}
}

protected final void initIAA70WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70WE = false;
} else {
IAA70WE = true;
}
}
}

protected final void initIAA70WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70WL = false;
} else {
IAA70WL = true;
}
}
}

protected final void initIAA70WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70WR = false;
} else {
IAA70WR = true;
}
}
}

protected final void initIAA70WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70WU = false;
} else {
IAA70WU = true;
}
}
}

protected final void initIAA70YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70YE = false;
} else {
IAA70YE = true;
}
}
}

protected final void initIAA70YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70YL = false;
} else {
IAA70YL = true;
}
}
}

protected final void initIAA70YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70YR = false;
} else {
IAA70YR = true;
}
}
}

protected final void initIAA70YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA70YU = false;
} else {
IAA70YU = true;
}
}
}

protected final void initIAA71(String s) {
if (!s.trim().isEmpty()) {
IAA71 = Short.parseShort(s);
} else {
IAA71 = Short.MIN_VALUE;
}
}

protected final void initIAA71FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71FE = false;
} else {
IAA71FE = true;
}
}
}

protected final void initIAA71FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71FL = false;
} else {
IAA71FL = true;
}
}
}

protected final void initIAA71FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71FR = false;
} else {
IAA71FR = true;
}
}
}

protected final void initIAA71FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71FU = false;
} else {
IAA71FU = true;
}
}
}

protected final void initIAA71ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71ME = false;
} else {
IAA71ME = true;
}
}
}

protected final void initIAA71ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71ML = false;
} else {
IAA71ML = true;
}
}
}

protected final void initIAA71MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71MR = false;
} else {
IAA71MR = true;
}
}
}

protected final void initIAA71MU(String s) {
if (!s.trim().isEmpty()) {
IAA71MU = Short.parseShort(s);
} else {
IAA71MU = Short.MIN_VALUE;
}
}

protected final void initIAA71OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71OE = false;
} else {
IAA71OE = true;
}
}
}

protected final void initIAA71OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71OL = false;
} else {
IAA71OL = true;
}
}
}

protected final void initIAA71OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71OR = false;
} else {
IAA71OR = true;
}
}
}

protected final void initIAA71OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71OU = false;
} else {
IAA71OU = true;
}
}
}

protected final void initIAA71WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71WE = false;
} else {
IAA71WE = true;
}
}
}

protected final void initIAA71WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71WL = false;
} else {
IAA71WL = true;
}
}
}

protected final void initIAA71WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71WR = false;
} else {
IAA71WR = true;
}
}
}

protected final void initIAA71WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71WU = false;
} else {
IAA71WU = true;
}
}
}

protected final void initIAA71YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71YE = false;
} else {
IAA71YE = true;
}
}
}

protected final void initIAA71YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71YL = false;
} else {
IAA71YL = true;
}
}
}

protected final void initIAA71YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71YR = false;
} else {
IAA71YR = true;
}
}
}

protected final void initIAA71YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA71YU = false;
} else {
IAA71YU = true;
}
}
}

protected final void initIAA72(String s) {
if (!s.trim().isEmpty()) {
IAA72 = Byte.parseByte(s);
} else {
IAA72 = Byte.MIN_VALUE;
}
}

protected final void initIAA72FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72FE = false;
} else {
IAA72FE = true;
}
}
}

protected final void initIAA72FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72FL = false;
} else {
IAA72FL = true;
}
}
}

protected final void initIAA72FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72FR = false;
} else {
IAA72FR = true;
}
}
}

protected final void initIAA72FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72FU = false;
} else {
IAA72FU = true;
}
}
}

protected final void initIAA72ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72ME = false;
} else {
IAA72ME = true;
}
}
}

protected final void initIAA72ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72ML = false;
} else {
IAA72ML = true;
}
}
}

protected final void initIAA72MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72MR = false;
} else {
IAA72MR = true;
}
}
}

protected final void initIAA72MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72MU = false;
} else {
IAA72MU = true;
}
}
}

protected final void initIAA72OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72OE = false;
} else {
IAA72OE = true;
}
}
}

protected final void initIAA72OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
IAA72OL = false;
} else {
IAA72OL = true;
}
}
}

protected final void initIAA72OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72OR = false;
} else {
IAA72OR = true;
}
}
}

protected final void initIAA72OU(String s) {
if (!s.trim().isEmpty()) {
IAA72OU = Short.parseShort(s);
} else {
IAA72OU = Short.MIN_VALUE;
}
}

protected final void initIAA72WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72WE = false;
} else {
IAA72WE = true;
}
}
}

protected final void initIAA72WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72WL = false;
} else {
IAA72WL = true;
}
}
}

protected final void initIAA72WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72WR = false;
} else {
IAA72WR = true;
}
}
}

protected final void initIAA72WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72WU = false;
} else {
IAA72WU = true;
}
}
}

protected final void initIAA72YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72YE = false;
} else {
IAA72YE = true;
}
}
}

protected final void initIAA72YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72YL = false;
} else {
IAA72YL = true;
}
}
}

protected final void initIAA72YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72YR = false;
} else {
IAA72YR = true;
}
}
}

protected final void initIAA72YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA72YU = false;
} else {
IAA72YU = true;
}
}
}

protected final void initIAAIPE(String s) {
if (!s.trim().isEmpty()) {
IAAIPE = Byte.parseByte(s);
} else {
IAAIPE = Byte.MIN_VALUE;
}
}

protected final void initIAAIPL(String s) {
if (!s.trim().isEmpty()) {
IAAIPL = Short.parseShort(s);
} else {
IAAIPL = Short.MIN_VALUE;
}
}

protected final void initIAAIPR(String s) {
if (!s.trim().isEmpty()) {
IAAIPR = Byte.parseByte(s);
} else {
IAAIPR = Byte.MIN_VALUE;
}
}

protected final void initIAAIPU(String s) {
if (!s.trim().isEmpty()) {
IAAIPU = Short.parseShort(s);
} else {
IAAIPU = Short.MIN_VALUE;
}
}

protected final void initIAB10(String s) {
if (!s.trim().isEmpty()) {
IAB10 = Byte.parseByte(s);
} else {
IAB10 = Byte.MIN_VALUE;
}
}

protected final void initIAB11(String s) {
if (!s.trim().isEmpty()) {
IAB11 = Byte.parseByte(s);
} else {
IAB11 = Byte.MIN_VALUE;
}
}

protected final void initIAB12(String s) {
if (!s.trim().isEmpty()) {
IAB12 = Byte.parseByte(s);
} else {
IAB12 = Byte.MIN_VALUE;
}
}

protected final void initIAB13(String s) {
if (!s.trim().isEmpty()) {
IAB13 = Byte.parseByte(s);
} else {
IAB13 = Byte.MIN_VALUE;
}
}

protected final void initIAB14(String s) {
if (!s.trim().isEmpty()) {
IAB14 = Byte.parseByte(s);
} else {
IAB14 = Byte.MIN_VALUE;
}
}

protected final void initIAB15(String s) {
if (!s.trim().isEmpty()) {
IAB15 = Byte.parseByte(s);
} else {
IAB15 = Byte.MIN_VALUE;
}
}

protected final void initIAB16(String s) {
if (!s.trim().isEmpty()) {
IAB16 = Byte.parseByte(s);
} else {
IAB16 = Byte.MIN_VALUE;
}
}

protected final void initIAB17(String s) {
if (!s.trim().isEmpty()) {
IAB17 = Byte.parseByte(s);
} else {
IAB17 = Byte.MIN_VALUE;
}
}

protected final void initIAB18(String s) {
if (!s.trim().isEmpty()) {
IAB18 = Byte.parseByte(s);
} else {
IAB18 = Byte.MIN_VALUE;
}
}

protected final void initIAB28(String s) {
if (!s.trim().isEmpty()) {
IAB28 = Byte.parseByte(s);
} else {
IAB28 = Byte.MIN_VALUE;
}
}

protected final void initIAB29(String s) {
if (!s.trim().isEmpty()) {
IAB29 = Byte.parseByte(s);
} else {
IAB29 = Byte.MIN_VALUE;
}
}

protected final void initIAB30(String s) {
if (!s.trim().isEmpty()) {
IAB30 = Byte.parseByte(s);
} else {
IAB30 = Byte.MIN_VALUE;
}
}

protected final void initIAB31(String s) {
if (!s.trim().isEmpty()) {
IAB31 = Byte.parseByte(s);
} else {
IAB31 = Byte.MIN_VALUE;
}
}

protected final void initIAB32(String s) {
if (!s.trim().isEmpty()) {
IAB32 = Byte.parseByte(s);
} else {
IAB32 = Byte.MIN_VALUE;
}
}

protected final void initIAB33(String s) {
if (!s.trim().isEmpty()) {
IAB33 = Byte.parseByte(s);
} else {
IAB33 = Byte.MIN_VALUE;
}
}

protected final void initIAB34(String s) {
if (!s.trim().isEmpty()) {
IAB34 = Byte.parseByte(s);
} else {
IAB34 = Byte.MIN_VALUE;
}
}

protected final void initIAB35(String s) {
if (!s.trim().isEmpty()) {
IAB35 = Byte.parseByte(s);
} else {
IAB35 = Byte.MIN_VALUE;
}
}

protected final void initIAB36(String s) {
if (!s.trim().isEmpty()) {
IAB36 = Byte.parseByte(s);
} else {
IAB36 = Byte.MIN_VALUE;
}
}

protected final void initIAB46(String s) {
if (!s.trim().isEmpty()) {
IAB46 = Byte.parseByte(s);
} else {
IAB46 = Byte.MIN_VALUE;
}
}

protected final void initIAB47(String s) {
if (!s.trim().isEmpty()) {
IAB47 = Byte.parseByte(s);
} else {
IAB47 = Byte.MIN_VALUE;
}
}

protected final void initIAB48(String s) {
if (!s.trim().isEmpty()) {
IAB48 = Byte.parseByte(s);
} else {
IAB48 = Byte.MIN_VALUE;
}
}

protected final void initIAB49(String s) {
if (!s.trim().isEmpty()) {
IAB49 = Byte.parseByte(s);
} else {
IAB49 = Byte.MIN_VALUE;
}
}

protected final void initIAB50(String s) {
if (!s.trim().isEmpty()) {
IAB50 = Byte.parseByte(s);
} else {
IAB50 = Byte.MIN_VALUE;
}
}

protected final void initIAB51(String s) {
if (!s.trim().isEmpty()) {
IAB51 = Byte.parseByte(s);
} else {
IAB51 = Byte.MIN_VALUE;
}
}

protected final void initIAB52(String s) {
if (!s.trim().isEmpty()) {
IAB52 = Byte.parseByte(s);
} else {
IAB52 = Byte.MIN_VALUE;
}
}

protected final void initIAB53(String s) {
if (!s.trim().isEmpty()) {
IAB53 = Byte.parseByte(s);
} else {
IAB53 = Byte.MIN_VALUE;
}
}

protected final void initIAB54(String s) {
if (!s.trim().isEmpty()) {
IAB54 = Byte.parseByte(s);
} else {
IAB54 = Byte.MIN_VALUE;
}
}

protected final void initIAB64(String s) {
if (!s.trim().isEmpty()) {
IAB64 = Byte.parseByte(s);
} else {
IAB64 = Byte.MIN_VALUE;
}
}

protected final void initIAB65(String s) {
if (!s.trim().isEmpty()) {
IAB65 = Byte.parseByte(s);
} else {
IAB65 = Byte.MIN_VALUE;
}
}

protected final void initIAB66(String s) {
if (!s.trim().isEmpty()) {
IAB66 = Byte.parseByte(s);
} else {
IAB66 = Byte.MIN_VALUE;
}
}

protected final void initIAB67(String s) {
if (!s.trim().isEmpty()) {
IAB67 = Byte.parseByte(s);
} else {
IAB67 = Byte.MIN_VALUE;
}
}

protected final void initIAB68(String s) {
if (!s.trim().isEmpty()) {
IAB68 = Byte.parseByte(s);
} else {
IAB68 = Byte.MIN_VALUE;
}
}

protected final void initIAB69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAB69 = false;
} else {
IAB69 = true;
}
}
}

protected final void initIAB70(String s) {
if (!s.trim().isEmpty()) {
IAB70 = Byte.parseByte(s);
} else {
IAB70 = Byte.MIN_VALUE;
}
}

protected final void initIAB71(String s) {
if (!s.trim().isEmpty()) {
IAB71 = Byte.parseByte(s);
} else {
IAB71 = Byte.MIN_VALUE;
}
}

protected final void initIAB72(String s) {
if (!s.trim().isEmpty()) {
IAB72 = Byte.parseByte(s);
} else {
IAB72 = Byte.MIN_VALUE;
}
}

protected final void initIABEB(String s) {
if (!s.trim().isEmpty()) {
IABEB = Byte.parseByte(s);
} else {
IABEB = Byte.MIN_VALUE;
}
}

protected final void initIABEN95(String s) {
if (!s.trim().isEmpty()) {
IABEN95 = Byte.parseByte(s);
} else {
IABEN95 = Byte.MIN_VALUE;
}
}

protected final void initIABEN96(String s) {
if (!s.trim().isEmpty()) {
IABEN96 = Byte.parseByte(s);
} else {
IABEN96 = Byte.MIN_VALUE;
}
}

protected final void initIABENCB(String s) {
if (!s.trim().isEmpty()) {
IABENCB = Byte.parseByte(s);
} else {
IABENCB = Byte.MIN_VALUE;
}
}

protected final void initIABENCC(String s) {
if (!s.trim().isEmpty()) {
IABENCC = Byte.parseByte(s);
} else {
IABENCC = Byte.MIN_VALUE;
}
}

protected final void initIABENGA(String s) {
if (!s.trim().isEmpty()) {
IABENGA = Byte.parseByte(s);
} else {
IABENGA = Byte.MIN_VALUE;
}
}

protected final void initIABENIS(String s) {
if (!s.trim().isEmpty()) {
IABENIS = Byte.parseByte(s);
} else {
IABENIS = Byte.MIN_VALUE;
}
}

protected final void initIABENJA(String s) {
if (!s.trim().isEmpty()) {
IABENJA = Byte.parseByte(s);
} else {
IABENJA = Byte.MIN_VALUE;
}
}

protected final void initIABENPC(String s) {
if (!s.trim().isEmpty()) {
IABENPC = Byte.parseByte(s);
} else {
IABENPC = Byte.MIN_VALUE;
}
}

protected final void initIABENTC(String s) {
if (!s.trim().isEmpty()) {
IABENTC = Byte.parseByte(s);
} else {
IABENTC = Byte.MIN_VALUE;
}
}

protected final void initIABENWP(String s) {
if (!s.trim().isEmpty()) {
IABENWP = Byte.parseByte(s);
} else {
IABENWP = Byte.MIN_VALUE;
}
}

protected final void initIABEP95(String s) {
if (!s.trim().isEmpty()) {
IABEP95 = Byte.parseByte(s);
} else {
IABEP95 = Byte.MIN_VALUE;
}
}

protected final void initIABEP96(String s) {
if (!s.trim().isEmpty()) {
IABEP96 = Byte.parseByte(s);
} else {
IABEP96 = Byte.MIN_VALUE;
}
}

protected final void initIABEPCB(String s) {
if (!s.trim().isEmpty()) {
IABEPCB = Byte.parseByte(s);
} else {
IABEPCB = Byte.MIN_VALUE;
}
}

protected final void initIABEPCC(String s) {
if (!s.trim().isEmpty()) {
IABEPCC = Byte.parseByte(s);
} else {
IABEPCC = Byte.MIN_VALUE;
}
}

protected final void initIABEPGA(String s) {
if (!s.trim().isEmpty()) {
IABEPGA = Byte.parseByte(s);
} else {
IABEPGA = Byte.MIN_VALUE;
}
}

protected final void initIABEPIS(String s) {
if (!s.trim().isEmpty()) {
IABEPIS = Byte.parseByte(s);
} else {
IABEPIS = Byte.MIN_VALUE;
}
}

protected final void initIABEPJA(String s) {
if (!s.trim().isEmpty()) {
IABEPJA = Byte.parseByte(s);
} else {
IABEPJA = Byte.MIN_VALUE;
}
}

protected final void initIABEPM85(String s) {
if (!s.trim().isEmpty()) {
IABEPM85 = Byte.parseByte(s);
} else {
IABEPM85 = Byte.MIN_VALUE;
}
}

protected final void initIABEPM86(String s) {
if (!s.trim().isEmpty()) {
IABEPM86 = Byte.parseByte(s);
} else {
IABEPM86 = Byte.MIN_VALUE;
}
}

protected final void initIABEPM96(String s) {
if (!s.trim().isEmpty()) {
IABEPM96 = Byte.parseByte(s);
} else {
IABEPM96 = Byte.MIN_VALUE;
}
}

protected final void initIABEPMCB(String s) {
if (!s.trim().isEmpty()) {
IABEPMCB = Byte.parseByte(s);
} else {
IABEPMCB = Byte.MIN_VALUE;
}
}

protected final void initIABEPMCC(String s) {
if (!s.trim().isEmpty()) {
IABEPMCC = Byte.parseByte(s);
} else {
IABEPMCC = Byte.MIN_VALUE;
}
}

protected final void initIABEPMFP(String s) {
if (!s.trim().isEmpty()) {
IABEPMFP = Byte.parseByte(s);
} else {
IABEPMFP = Byte.MIN_VALUE;
}
}

protected final void initIABEPMGA(String s) {
if (!s.trim().isEmpty()) {
IABEPMGA = Byte.parseByte(s);
} else {
IABEPMGA = Byte.MIN_VALUE;
}
}

protected final void initIABEPMIS(String s) {
if (!s.trim().isEmpty()) {
IABEPMIS = Byte.parseByte(s);
} else {
IABEPMIS = Byte.MIN_VALUE;
}
}

protected final void initIABEPMJA(String s) {
if (!s.trim().isEmpty()) {
IABEPMJA = Byte.parseByte(s);
} else {
IABEPMJA = Byte.MIN_VALUE;
}
}

protected final void initIABEPMPC(String s) {
if (!s.trim().isEmpty()) {
IABEPMPC = Byte.parseByte(s);
} else {
IABEPMPC = Byte.MIN_VALUE;
}
}

protected final void initIABEPMTC(String s) {
if (!s.trim().isEmpty()) {
IABEPMTC = Byte.parseByte(s);
} else {
IABEPMTC = Byte.MIN_VALUE;
}
}

protected final void initIABEPMWP(String s) {
if (!s.trim().isEmpty()) {
IABEPMWP = Byte.parseByte(s);
} else {
IABEPMWP = Byte.MIN_VALUE;
}
}

protected final void initIABEPN95(String s) {
if (!s.trim().isEmpty()) {
IABEPN95 = Byte.parseByte(s);
} else {
IABEPN95 = Byte.MIN_VALUE;
}
}

protected final void initIABEPN96(String s) {
if (!s.trim().isEmpty()) {
IABEPN96 = Byte.parseByte(s);
} else {
IABEPN96 = Byte.MIN_VALUE;
}
}

protected final void initIABEPNCB(String s) {
if (!s.trim().isEmpty()) {
IABEPNCB = Byte.parseByte(s);
} else {
IABEPNCB = Byte.MIN_VALUE;
}
}

protected final void initIABEPNCC(String s) {
if (!s.trim().isEmpty()) {
IABEPNCC = Byte.parseByte(s);
} else {
IABEPNCC = Byte.MIN_VALUE;
}
}

protected final void initIABEPNGA(String s) {
if (!s.trim().isEmpty()) {
IABEPNGA = Byte.parseByte(s);
} else {
IABEPNGA = Byte.MIN_VALUE;
}
}

protected final void initIABEPNIS(String s) {
if (!s.trim().isEmpty()) {
IABEPNIS = Byte.parseByte(s);
} else {
IABEPNIS = Byte.MIN_VALUE;
}
}

protected final void initIABEPNJA(String s) {
if (!s.trim().isEmpty()) {
IABEPNJA = Byte.parseByte(s);
} else {
IABEPNJA = Byte.MIN_VALUE;
}
}

protected final void initIABEPNPC(String s) {
if (!s.trim().isEmpty()) {
IABEPNPC = Byte.parseByte(s);
} else {
IABEPNPC = Byte.MIN_VALUE;
}
}

protected final void initIABEPNWC(String s) {
if (!s.trim().isEmpty()) {
IABEPNWC = Byte.parseByte(s);
} else {
IABEPNWC = Byte.MIN_VALUE;
}
}

protected final void initIABEPNWP(String s) {
if (!s.trim().isEmpty()) {
IABEPNWP = Byte.parseByte(s);
} else {
IABEPNWP = Byte.MIN_VALUE;
}
}

protected final void initIABEPPC(String s) {
if (!s.trim().isEmpty()) {
IABEPPC = Byte.parseByte(s);
} else {
IABEPPC = Byte.MIN_VALUE;
}
}

protected final void initIABEPTC(String s) {
if (!s.trim().isEmpty()) {
IABEPTC = Byte.parseByte(s);
} else {
IABEPTC = Byte.MIN_VALUE;
}
}

protected final void initIABEPWP(String s) {
if (!s.trim().isEmpty()) {
IABEPWP = Byte.parseByte(s);
} else {
IABEPWP = Byte.MIN_VALUE;
}
}

protected final void initIABER95(String s) {
if (!s.trim().isEmpty()) {
IABER95 = Byte.parseByte(s);
} else {
IABER95 = Byte.MIN_VALUE;
}
}

protected final void initIABER96(String s) {
if (!s.trim().isEmpty()) {
IABER96 = Byte.parseByte(s);
} else {
IABER96 = Byte.MIN_VALUE;
}
}

protected final void initIABERCB(String s) {
if (!s.trim().isEmpty()) {
IABERCB = Byte.parseByte(s);
} else {
IABERCB = Byte.MIN_VALUE;
}
}

protected final void initIABERCC(String s) {
if (!s.trim().isEmpty()) {
IABERCC = Byte.parseByte(s);
} else {
IABERCC = Byte.MIN_VALUE;
}
}

protected final void initIABERGA(String s) {
if (!s.trim().isEmpty()) {
IABERGA = Byte.parseByte(s);
} else {
IABERGA = Byte.MIN_VALUE;
}
}

protected final void initIABERIS(String s) {
if (!s.trim().isEmpty()) {
IABERIS = Byte.parseByte(s);
} else {
IABERIS = Byte.MIN_VALUE;
}
}

protected final void initIABERJA(String s) {
if (!s.trim().isEmpty()) {
IABERJA = Byte.parseByte(s);
} else {
IABERJA = Byte.MIN_VALUE;
}
}

protected final void initIABERM85(String s) {
if (!s.trim().isEmpty()) {
IABERM85 = Byte.parseByte(s);
} else {
IABERM85 = Byte.MIN_VALUE;
}
}

protected final void initIABERM86(String s) {
if (!s.trim().isEmpty()) {
IABERM86 = Byte.parseByte(s);
} else {
IABERM86 = Byte.MIN_VALUE;
}
}

protected final void initIABERM96(String s) {
if (!s.trim().isEmpty()) {
IABERM96 = Byte.parseByte(s);
} else {
IABERM96 = Byte.MIN_VALUE;
}
}

protected final void initIABERMCB(String s) {
if (!s.trim().isEmpty()) {
IABERMCB = Byte.parseByte(s);
} else {
IABERMCB = Byte.MIN_VALUE;
}
}

protected final void initIABERMCC(String s) {
if (!s.trim().isEmpty()) {
IABERMCC = Byte.parseByte(s);
} else {
IABERMCC = Byte.MIN_VALUE;
}
}

protected final void initIABERMFP(String s) {
if (!s.trim().isEmpty()) {
IABERMFP = Byte.parseByte(s);
} else {
IABERMFP = Byte.MIN_VALUE;
}
}

protected final void initIABERMGA(String s) {
if (!s.trim().isEmpty()) {
IABERMGA = Byte.parseByte(s);
} else {
IABERMGA = Byte.MIN_VALUE;
}
}

protected final void initIABERMIS(String s) {
if (!s.trim().isEmpty()) {
IABERMIS = Byte.parseByte(s);
} else {
IABERMIS = Byte.MIN_VALUE;
}
}

protected final void initIABERMJA(String s) {
if (!s.trim().isEmpty()) {
IABERMJA = Byte.parseByte(s);
} else {
IABERMJA = Byte.MIN_VALUE;
}
}

protected final void initIABERMPC(String s) {
if (!s.trim().isEmpty()) {
IABERMPC = Byte.parseByte(s);
} else {
IABERMPC = Byte.MIN_VALUE;
}
}

protected final void initIABERMTC(String s) {
if (!s.trim().isEmpty()) {
IABERMTC = Byte.parseByte(s);
} else {
IABERMTC = Byte.MIN_VALUE;
}
}

protected final void initIABERMWP(String s) {
if (!s.trim().isEmpty()) {
IABERMWP = Byte.parseByte(s);
} else {
IABERMWP = Byte.MIN_VALUE;
}
}

protected final void initIABERPC(String s) {
if (!s.trim().isEmpty()) {
IABERPC = Byte.parseByte(s);
} else {
IABERPC = Byte.MIN_VALUE;
}
}

protected final void initIABERTC(String s) {
if (!s.trim().isEmpty()) {
IABERTC = Byte.parseByte(s);
} else {
IABERTC = Byte.MIN_VALUE;
}
}

protected final void initIABERWP(String s) {
if (!s.trim().isEmpty()) {
IABERWP = Byte.parseByte(s);
} else {
IABERWP = Byte.MIN_VALUE;
}
}

protected final void initIABM10(String s) {
if (!s.trim().isEmpty()) {
IABM10 = Byte.parseByte(s);
} else {
IABM10 = Byte.MIN_VALUE;
}
}

protected final void initIABM11(String s) {
if (!s.trim().isEmpty()) {
IABM11 = Byte.parseByte(s);
} else {
IABM11 = Byte.MIN_VALUE;
}
}

protected final void initIABM12(String s) {
if (!s.trim().isEmpty()) {
IABM12 = Byte.parseByte(s);
} else {
IABM12 = Byte.MIN_VALUE;
}
}

protected final void initIABM13(String s) {
if (!s.trim().isEmpty()) {
IABM13 = Byte.parseByte(s);
} else {
IABM13 = Byte.MIN_VALUE;
}
}

protected final void initIABM14(String s) {
if (!s.trim().isEmpty()) {
IABM14 = Byte.parseByte(s);
} else {
IABM14 = Byte.MIN_VALUE;
}
}

protected final void initIABM15(String s) {
if (!s.trim().isEmpty()) {
IABM15 = Byte.parseByte(s);
} else {
IABM15 = Byte.MIN_VALUE;
}
}

protected final void initIABM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM16 = false;
} else {
IABM16 = true;
}
}
}

protected final void initIABM17(String s) {
if (!s.trim().isEmpty()) {
IABM17 = Byte.parseByte(s);
} else {
IABM17 = Byte.MIN_VALUE;
}
}

protected final void initIABM18(String s) {
if (!s.trim().isEmpty()) {
IABM18 = Byte.parseByte(s);
} else {
IABM18 = Byte.MIN_VALUE;
}
}

protected final void initIABM28(String s) {
if (!s.trim().isEmpty()) {
IABM28 = Byte.parseByte(s);
} else {
IABM28 = Byte.MIN_VALUE;
}
}

protected final void initIABM29(String s) {
if (!s.trim().isEmpty()) {
IABM29 = Byte.parseByte(s);
} else {
IABM29 = Byte.MIN_VALUE;
}
}

protected final void initIABM30(String s) {
if (!s.trim().isEmpty()) {
IABM30 = Byte.parseByte(s);
} else {
IABM30 = Byte.MIN_VALUE;
}
}

protected final void initIABM31(String s) {
if (!s.trim().isEmpty()) {
IABM31 = Byte.parseByte(s);
} else {
IABM31 = Byte.MIN_VALUE;
}
}

protected final void initIABM32(String s) {
if (!s.trim().isEmpty()) {
IABM32 = Byte.parseByte(s);
} else {
IABM32 = Byte.MIN_VALUE;
}
}

protected final void initIABM33(String s) {
if (!s.trim().isEmpty()) {
IABM33 = Byte.parseByte(s);
} else {
IABM33 = Byte.MIN_VALUE;
}
}

protected final void initIABM34(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM34 = false;
} else {
IABM34 = true;
}
}
}

protected final void initIABM35(String s) {
if (!s.trim().isEmpty()) {
IABM35 = Byte.parseByte(s);
} else {
IABM35 = Byte.MIN_VALUE;
}
}

protected final void initIABM36(String s) {
if (!s.trim().isEmpty()) {
IABM36 = Byte.parseByte(s);
} else {
IABM36 = Byte.MIN_VALUE;
}
}

protected final void initIABM46(String s) {
if (!s.trim().isEmpty()) {
IABM46 = Byte.parseByte(s);
} else {
IABM46 = Byte.MIN_VALUE;
}
}

protected final void initIABM47(String s) {
if (!s.trim().isEmpty()) {
IABM47 = Byte.parseByte(s);
} else {
IABM47 = Byte.MIN_VALUE;
}
}

protected final void initIABM48(String s) {
if (!s.trim().isEmpty()) {
IABM48 = Byte.parseByte(s);
} else {
IABM48 = Byte.MIN_VALUE;
}
}

protected final void initIABM49(String s) {
if (!s.trim().isEmpty()) {
IABM49 = Byte.parseByte(s);
} else {
IABM49 = Byte.MIN_VALUE;
}
}

protected final void initIABM50(String s) {
if (!s.trim().isEmpty()) {
IABM50 = Byte.parseByte(s);
} else {
IABM50 = Byte.MIN_VALUE;
}
}

protected final void initIABM51(String s) {
if (!s.trim().isEmpty()) {
IABM51 = Byte.parseByte(s);
} else {
IABM51 = Byte.MIN_VALUE;
}
}

protected final void initIABM52(String s) {
if (!s.trim().isEmpty()) {
IABM52 = Byte.parseByte(s);
} else {
IABM52 = Byte.MIN_VALUE;
}
}

protected final void initIABM53(String s) {
if (!s.trim().isEmpty()) {
IABM53 = Byte.parseByte(s);
} else {
IABM53 = Byte.MIN_VALUE;
}
}

protected final void initIABM54(String s) {
if (!s.trim().isEmpty()) {
IABM54 = Byte.parseByte(s);
} else {
IABM54 = Byte.MIN_VALUE;
}
}

protected final void initIABM64(String s) {
if (!s.trim().isEmpty()) {
IABM64 = Byte.parseByte(s);
} else {
IABM64 = Byte.MIN_VALUE;
}
}

protected final void initIABM65(String s) {
if (!s.trim().isEmpty()) {
IABM65 = Byte.parseByte(s);
} else {
IABM65 = Byte.MIN_VALUE;
}
}

protected final void initIABM66(String s) {
if (!s.trim().isEmpty()) {
IABM66 = Byte.parseByte(s);
} else {
IABM66 = Byte.MIN_VALUE;
}
}

protected final void initIABM67(String s) {
if (!s.trim().isEmpty()) {
IABM67 = Byte.parseByte(s);
} else {
IABM67 = Byte.MIN_VALUE;
}
}

protected final void initIABM68(String s) {
if (!s.trim().isEmpty()) {
IABM68 = Byte.parseByte(s);
} else {
IABM68 = Byte.MIN_VALUE;
}
}

protected final void initIABM69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM69 = false;
} else {
IABM69 = true;
}
}
}

protected final void initIABM70(String s) {
if (!s.trim().isEmpty()) {
IABM70 = Byte.parseByte(s);
} else {
IABM70 = Byte.MIN_VALUE;
}
}

protected final void initIABM71(String s) {
if (!s.trim().isEmpty()) {
IABM71 = Byte.parseByte(s);
} else {
IABM71 = Byte.MIN_VALUE;
}
}

protected final void initIABM72(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABM72 = false;
} else {
IABM72 = true;
}
}
}

protected final void initIABW10(String s) {
if (!s.trim().isEmpty()) {
IABW10 = Byte.parseByte(s);
} else {
IABW10 = Byte.MIN_VALUE;
}
}

protected final void initIABW11(String s) {
if (!s.trim().isEmpty()) {
IABW11 = Byte.parseByte(s);
} else {
IABW11 = Byte.MIN_VALUE;
}
}

protected final void initIABW12(String s) {
if (!s.trim().isEmpty()) {
IABW12 = Byte.parseByte(s);
} else {
IABW12 = Byte.MIN_VALUE;
}
}

protected final void initIABW13(String s) {
if (!s.trim().isEmpty()) {
IABW13 = Byte.parseByte(s);
} else {
IABW13 = Byte.MIN_VALUE;
}
}

protected final void initIABW14(String s) {
if (!s.trim().isEmpty()) {
IABW14 = Byte.parseByte(s);
} else {
IABW14 = Byte.MIN_VALUE;
}
}

protected final void initIABW15(String s) {
if (!s.trim().isEmpty()) {
IABW15 = Byte.parseByte(s);
} else {
IABW15 = Byte.MIN_VALUE;
}
}

protected final void initIABW16(String s) {
if (!s.trim().isEmpty()) {
IABW16 = Byte.parseByte(s);
} else {
IABW16 = Byte.MIN_VALUE;
}
}

protected final void initIABW17(String s) {
if (!s.trim().isEmpty()) {
IABW17 = Byte.parseByte(s);
} else {
IABW17 = Byte.MIN_VALUE;
}
}

protected final void initIABW18(String s) {
if (!s.trim().isEmpty()) {
IABW18 = Byte.parseByte(s);
} else {
IABW18 = Byte.MIN_VALUE;
}
}

protected final void initIABW28(String s) {
if (!s.trim().isEmpty()) {
IABW28 = Byte.parseByte(s);
} else {
IABW28 = Byte.MIN_VALUE;
}
}

protected final void initIABW29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW29 = false;
} else {
IABW29 = true;
}
}
}

protected final void initIABW30(String s) {
if (!s.trim().isEmpty()) {
IABW30 = Byte.parseByte(s);
} else {
IABW30 = Byte.MIN_VALUE;
}
}

protected final void initIABW31(String s) {
if (!s.trim().isEmpty()) {
IABW31 = Byte.parseByte(s);
} else {
IABW31 = Byte.MIN_VALUE;
}
}

protected final void initIABW32(String s) {
if (!s.trim().isEmpty()) {
IABW32 = Byte.parseByte(s);
} else {
IABW32 = Byte.MIN_VALUE;
}
}

protected final void initIABW33(String s) {
if (!s.trim().isEmpty()) {
IABW33 = Byte.parseByte(s);
} else {
IABW33 = Byte.MIN_VALUE;
}
}

protected final void initIABW34(String s) {
if (!s.trim().isEmpty()) {
IABW34 = Byte.parseByte(s);
} else {
IABW34 = Byte.MIN_VALUE;
}
}

protected final void initIABW35(String s) {
if (!s.trim().isEmpty()) {
IABW35 = Byte.parseByte(s);
} else {
IABW35 = Byte.MIN_VALUE;
}
}

protected final void initIABW36(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW36 = false;
} else {
IABW36 = true;
}
}
}

protected final void initIABW46(String s) {
if (!s.trim().isEmpty()) {
IABW46 = Byte.parseByte(s);
} else {
IABW46 = Byte.MIN_VALUE;
}
}

protected final void initIABW47(String s) {
if (!s.trim().isEmpty()) {
IABW47 = Byte.parseByte(s);
} else {
IABW47 = Byte.MIN_VALUE;
}
}

protected final void initIABW48(String s) {
if (!s.trim().isEmpty()) {
IABW48 = Byte.parseByte(s);
} else {
IABW48 = Byte.MIN_VALUE;
}
}

protected final void initIABW49(String s) {
if (!s.trim().isEmpty()) {
IABW49 = Byte.parseByte(s);
} else {
IABW49 = Byte.MIN_VALUE;
}
}

protected final void initIABW50(String s) {
if (!s.trim().isEmpty()) {
IABW50 = Byte.parseByte(s);
} else {
IABW50 = Byte.MIN_VALUE;
}
}

protected final void initIABW51(String s) {
if (!s.trim().isEmpty()) {
IABW51 = Byte.parseByte(s);
} else {
IABW51 = Byte.MIN_VALUE;
}
}

protected final void initIABW52(String s) {
if (!s.trim().isEmpty()) {
IABW52 = Byte.parseByte(s);
} else {
IABW52 = Byte.MIN_VALUE;
}
}

protected final void initIABW53(String s) {
if (!s.trim().isEmpty()) {
IABW53 = Byte.parseByte(s);
} else {
IABW53 = Byte.MIN_VALUE;
}
}

protected final void initIABW54(String s) {
if (!s.trim().isEmpty()) {
IABW54 = Byte.parseByte(s);
} else {
IABW54 = Byte.MIN_VALUE;
}
}

protected final void initIABW64(String s) {
if (!s.trim().isEmpty()) {
IABW64 = Byte.parseByte(s);
} else {
IABW64 = Byte.MIN_VALUE;
}
}

protected final void initIABW65(String s) {
if (!s.trim().isEmpty()) {
IABW65 = Byte.parseByte(s);
} else {
IABW65 = Byte.MIN_VALUE;
}
}

protected final void initIABW66(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW66 = false;
} else {
IABW66 = true;
}
}
}

protected final void initIABW67(String s) {
if (!s.trim().isEmpty()) {
IABW67 = Byte.parseByte(s);
} else {
IABW67 = Byte.MIN_VALUE;
}
}

protected final void initIABW68(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW68 = false;
} else {
IABW68 = true;
}
}
}

protected final void initIABW69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IABW69 = false;
} else {
IABW69 = true;
}
}
}

protected final void initIABW70(String s) {
if (!s.trim().isEmpty()) {
IABW70 = Byte.parseByte(s);
} else {
IABW70 = Byte.MIN_VALUE;
}
}

protected final void initIABW71(String s) {
if (!s.trim().isEmpty()) {
IABW71 = Byte.parseByte(s);
} else {
IABW71 = Byte.MIN_VALUE;
}
}

protected final void initIABW72(String s) {
if (!s.trim().isEmpty()) {
IABW72 = Byte.parseByte(s);
} else {
IABW72 = Byte.MIN_VALUE;
}
}

protected final void initIACISAE(String s) {
if (!s.trim().isEmpty()) {
IACISAE = Byte.parseByte(s);
} else {
IACISAE = Byte.MIN_VALUE;
}
}

protected final void initIACISAL(String s) {
if (!s.trim().isEmpty()) {
IACISAL = Short.parseShort(s);
} else {
IACISAL = Short.MIN_VALUE;
}
}

protected final void initIACISAR(String s) {
if (!s.trim().isEmpty()) {
IACISAR = Byte.parseByte(s);
} else {
IACISAR = Byte.MIN_VALUE;
}
}

protected final void initIACISAU(String s) {
if (!s.trim().isEmpty()) {
IACISAU = Short.parseShort(s);
} else {
IACISAU = Short.MIN_VALUE;
}
}

protected final void initIADATM(String s) {
if (!s.trim().isEmpty()) {
IADATM = Byte.parseByte(s);
} else {
IADATM = Byte.MIN_VALUE;
}
}

protected final void initIADATY(String s) {
if (!s.trim().isEmpty()) {
IADATY = Short.parseShort(s);
} else {
IADATY = Short.MIN_VALUE;
}
}

protected final void initIADEBME(String s) {
if (!s.trim().isEmpty()) {
IADEBME = Byte.parseByte(s);
} else {
IADEBME = Byte.MIN_VALUE;
}
}

protected final void initIADEBML(String s) {
if (!s.trim().isEmpty()) {
IADEBML = Short.parseShort(s);
} else {
IADEBML = Short.MIN_VALUE;
}
}

protected final void initIADEBMR(String s) {
if (!s.trim().isEmpty()) {
IADEBMR = Byte.parseByte(s);
} else {
IADEBMR = Byte.MIN_VALUE;
}
}

protected final void initIADEBMU(String s) {
if (!s.trim().isEmpty()) {
IADEBMU = Short.parseShort(s);
} else {
IADEBMU = Short.MIN_VALUE;
}
}

protected final void initIAEA10E(String s) {
if (!s.trim().isEmpty()) {
IAEA10E = Byte.parseByte(s);
} else {
IAEA10E = Byte.MIN_VALUE;
}
}

protected final void initIAEA10L(String s) {
if (!s.trim().isEmpty()) {
IAEA10L = Short.parseShort(s);
} else {
IAEA10L = Short.MIN_VALUE;
}
}

protected final void initIAEA10R(String s) {
if (!s.trim().isEmpty()) {
IAEA10R = Byte.parseByte(s);
} else {
IAEA10R = Byte.MIN_VALUE;
}
}

protected final void initIAEA10U(String s) {
if (!s.trim().isEmpty()) {
IAEA10U = Short.parseShort(s);
} else {
IAEA10U = Short.MIN_VALUE;
}
}

protected final void initIAEA11E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA11E = false;
} else {
IAEA11E = true;
}
}
}

protected final void initIAEA11L(String s) {
if (!s.trim().isEmpty()) {
IAEA11L = Byte.parseByte(s);
} else {
IAEA11L = Byte.MIN_VALUE;
}
}

protected final void initIAEA11R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA11R = false;
} else {
IAEA11R = true;
}
}
}

protected final void initIAEA11U(String s) {
if (!s.trim().isEmpty()) {
IAEA11U = Short.parseShort(s);
} else {
IAEA11U = Short.MIN_VALUE;
}
}

protected final void initIAEAR2E(String s) {
if (!s.trim().isEmpty()) {
IAEAR2E = Byte.parseByte(s);
} else {
IAEAR2E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR2L(String s) {
if (!s.trim().isEmpty()) {
IAEAR2L = Integer.parseInt(s);
} else {
IAEAR2L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR2R(String s) {
if (!s.trim().isEmpty()) {
IAEAR2R = Byte.parseByte(s);
} else {
IAEAR2R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR2U(String s) {
if (!s.trim().isEmpty()) {
IAEAR2U = Integer.parseInt(s);
} else {
IAEAR2U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR3E(String s) {
if (!s.trim().isEmpty()) {
IAEAR3E = Byte.parseByte(s);
} else {
IAEAR3E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR3L(String s) {
if (!s.trim().isEmpty()) {
IAEAR3L = Integer.parseInt(s);
} else {
IAEAR3L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR3R(String s) {
if (!s.trim().isEmpty()) {
IAEAR3R = Byte.parseByte(s);
} else {
IAEAR3R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR3U(String s) {
if (!s.trim().isEmpty()) {
IAEAR3U = Integer.parseInt(s);
} else {
IAEAR3U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR4E(String s) {
if (!s.trim().isEmpty()) {
IAEAR4E = Byte.parseByte(s);
} else {
IAEAR4E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR4L(String s) {
if (!s.trim().isEmpty()) {
IAEAR4L = Integer.parseInt(s);
} else {
IAEAR4L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR4R(String s) {
if (!s.trim().isEmpty()) {
IAEAR4R = Byte.parseByte(s);
} else {
IAEAR4R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR4U(String s) {
if (!s.trim().isEmpty()) {
IAEAR4U = Integer.parseInt(s);
} else {
IAEAR4U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR5E(String s) {
if (!s.trim().isEmpty()) {
IAEAR5E = Byte.parseByte(s);
} else {
IAEAR5E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR5L(String s) {
if (!s.trim().isEmpty()) {
IAEAR5L = Integer.parseInt(s);
} else {
IAEAR5L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR5R(String s) {
if (!s.trim().isEmpty()) {
IAEAR5R = Byte.parseByte(s);
} else {
IAEAR5R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR5U(String s) {
if (!s.trim().isEmpty()) {
IAEAR5U = Integer.parseInt(s);
} else {
IAEAR5U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR6E(String s) {
if (!s.trim().isEmpty()) {
IAEAR6E = Byte.parseByte(s);
} else {
IAEAR6E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR6L(String s) {
if (!s.trim().isEmpty()) {
IAEAR6L = Integer.parseInt(s);
} else {
IAEAR6L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR6R(String s) {
if (!s.trim().isEmpty()) {
IAEAR6R = Byte.parseByte(s);
} else {
IAEAR6R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR6U(String s) {
if (!s.trim().isEmpty()) {
IAEAR6U = Integer.parseInt(s);
} else {
IAEAR6U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR7E(String s) {
if (!s.trim().isEmpty()) {
IAEAR7E = Byte.parseByte(s);
} else {
IAEAR7E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR7L(String s) {
if (!s.trim().isEmpty()) {
IAEAR7L = Integer.parseInt(s);
} else {
IAEAR7L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR7R(String s) {
if (!s.trim().isEmpty()) {
IAEAR7R = Byte.parseByte(s);
} else {
IAEAR7R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR7U(String s) {
if (!s.trim().isEmpty()) {
IAEAR7U = Integer.parseInt(s);
} else {
IAEAR7U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR8E(String s) {
if (!s.trim().isEmpty()) {
IAEAR8E = Byte.parseByte(s);
} else {
IAEAR8E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR8L(String s) {
if (!s.trim().isEmpty()) {
IAEAR8L = Integer.parseInt(s);
} else {
IAEAR8L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR8R(String s) {
if (!s.trim().isEmpty()) {
IAEAR8R = Byte.parseByte(s);
} else {
IAEAR8R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR8U(String s) {
if (!s.trim().isEmpty()) {
IAEAR8U = Integer.parseInt(s);
} else {
IAEAR8U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR9E(String s) {
if (!s.trim().isEmpty()) {
IAEAR9E = Byte.parseByte(s);
} else {
IAEAR9E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR9L(String s) {
if (!s.trim().isEmpty()) {
IAEAR9L = Short.parseShort(s);
} else {
IAEAR9L = Short.MIN_VALUE;
}
}

protected final void initIAEAR9R(String s) {
if (!s.trim().isEmpty()) {
IAEAR9R = Byte.parseByte(s);
} else {
IAEAR9R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR9U(String s) {
if (!s.trim().isEmpty()) {
IAEAR9U = Short.parseShort(s);
} else {
IAEAR9U = Short.MIN_VALUE;
}
}

protected final void initIAEARE(String s) {
if (!s.trim().isEmpty()) {
IAEARE = Byte.parseByte(s);
} else {
IAEARE = Byte.MIN_VALUE;
}
}

protected final void initIAEARL(String s) {
if (!s.trim().isEmpty()) {
IAEARL = Integer.parseInt(s);
} else {
IAEARL = Integer.MIN_VALUE;
}
}

protected final void initIAEARN11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEARN11 = false;
} else {
IAEARN11 = true;
}
}
}

protected final void initIAEARR(String s) {
if (!s.trim().isEmpty()) {
IAEARR = Byte.parseByte(s);
} else {
IAEARR = Byte.MIN_VALUE;
}
}

protected final void initIAEARU(String s) {
if (!s.trim().isEmpty()) {
IAEARU = Integer.parseInt(s);
} else {
IAEARU = Integer.MIN_VALUE;
}
}

protected final void initIAERN(String s) {
if (!s.trim().isEmpty()) {
IAERN = Short.parseShort(s);
} else {
IAERN = Short.MIN_VALUE;
}
}

protected final void initIAERN10(String s) {
if (!s.trim().isEmpty()) {
IAERN10 = Byte.parseByte(s);
} else {
IAERN10 = Byte.MIN_VALUE;
}
}

protected final void initIAERN2(String s) {
if (!s.trim().isEmpty()) {
IAERN2 = Integer.parseInt(s);
} else {
IAERN2 = Integer.MIN_VALUE;
}
}

protected final void initIAERN3(String s) {
if (!s.trim().isEmpty()) {
IAERN3 = Integer.parseInt(s);
} else {
IAERN3 = Integer.MIN_VALUE;
}
}

protected final void initIAERN4(String s) {
if (!s.trim().isEmpty()) {
IAERN4 = Integer.parseInt(s);
} else {
IAERN4 = Integer.MIN_VALUE;
}
}

protected final void initIAERN5(String s) {
if (!s.trim().isEmpty()) {
IAERN5 = Integer.parseInt(s);
} else {
IAERN5 = Integer.MIN_VALUE;
}
}

protected final void initIAERN6(String s) {
if (!s.trim().isEmpty()) {
IAERN6 = Short.parseShort(s);
} else {
IAERN6 = Short.MIN_VALUE;
}
}

protected final void initIAERN7(String s) {
if (!s.trim().isEmpty()) {
IAERN7 = Short.parseShort(s);
} else {
IAERN7 = Short.MIN_VALUE;
}
}

protected final void initIAERN8(String s) {
if (!s.trim().isEmpty()) {
IAERN8 = Short.parseShort(s);
} else {
IAERN8 = Short.MIN_VALUE;
}
}

protected final void initIAERN9(String s) {
if (!s.trim().isEmpty()) {
IAERN9 = Byte.parseByte(s);
} else {
IAERN9 = Byte.MIN_VALUE;
}
}

protected final void initIAFBAE(String s) {
if (!s.trim().isEmpty()) {
IAFBAE = Byte.parseByte(s);
} else {
IAFBAE = Byte.MIN_VALUE;
}
}

protected final void initIAFBAL(String s) {
if (!s.trim().isEmpty()) {
IAFBAL = Integer.parseInt(s);
} else {
IAFBAL = Integer.MIN_VALUE;
}
}

protected final void initIAFBAR(String s) {
if (!s.trim().isEmpty()) {
IAFBAR = Byte.parseByte(s);
} else {
IAFBAR = Byte.MIN_VALUE;
}
}

protected final void initIAFBAU(String s) {
if (!s.trim().isEmpty()) {
IAFBAU = Integer.parseInt(s);
} else {
IAFBAU = Integer.MIN_VALUE;
}
}

protected final void initIAFUEL(String s) {
if (!s.trim().isEmpty()) {
IAFUEL = Byte.parseByte(s);
} else {
IAFUEL = Byte.MIN_VALUE;
}
}

protected final void initIAHDB(String s) {
if (!s.trim().isEmpty()) {
IAHDB = Byte.parseByte(s);
} else {
IAHDB = Byte.MIN_VALUE;
}
}

protected final void initIAHDN95(String s) {
if (!s.trim().isEmpty()) {
IAHDN95 = Byte.parseByte(s);
} else {
IAHDN95 = Byte.MIN_VALUE;
}
}

protected final void initIAHDN96(String s) {
if (!s.trim().isEmpty()) {
IAHDN96 = Byte.parseByte(s);
} else {
IAHDN96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDNAA(String s) {
if (!s.trim().isEmpty()) {
IAHDNAA = Byte.parseByte(s);
} else {
IAHDNAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDNCA(String s) {
if (!s.trim().isEmpty()) {
IAHDNCA = Byte.parseByte(s);
} else {
IAHDNCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDNDL(String s) {
if (!s.trim().isEmpty()) {
IAHDNDL = Byte.parseByte(s);
} else {
IAHDNDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDNIB(String s) {
if (!s.trim().isEmpty()) {
IAHDNIB = Byte.parseByte(s);
} else {
IAHDNIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDNII(String s) {
if (!s.trim().isEmpty()) {
IAHDNII = Byte.parseByte(s);
} else {
IAHDNII = Byte.MIN_VALUE;
}
}

protected final void initIAHDNSD(String s) {
if (!s.trim().isEmpty()) {
IAHDNSD = Byte.parseByte(s);
} else {
IAHDNSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDNSP(String s) {
if (!s.trim().isEmpty()) {
IAHDNSP = Byte.parseByte(s);
} else {
IAHDNSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDNWD(String s) {
if (!s.trim().isEmpty()) {
IAHDNWD = Byte.parseByte(s);
} else {
IAHDNWD = Byte.MIN_VALUE;
}
}

protected final void initIAHDP95(String s) {
if (!s.trim().isEmpty()) {
IAHDP95 = Byte.parseByte(s);
} else {
IAHDP95 = Byte.MIN_VALUE;
}
}

protected final void initIAHDP96(String s) {
if (!s.trim().isEmpty()) {
IAHDP96 = Byte.parseByte(s);
} else {
IAHDP96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPAA(String s) {
if (!s.trim().isEmpty()) {
IAHDPAA = Byte.parseByte(s);
} else {
IAHDPAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPCA(String s) {
if (!s.trim().isEmpty()) {
IAHDPCA = Byte.parseByte(s);
} else {
IAHDPCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPDL(String s) {
if (!s.trim().isEmpty()) {
IAHDPDL = Byte.parseByte(s);
} else {
IAHDPDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDPIB(String s) {
if (!s.trim().isEmpty()) {
IAHDPIB = Byte.parseByte(s);
} else {
IAHDPIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDPII(String s) {
if (!s.trim().isEmpty()) {
IAHDPII = Byte.parseByte(s);
} else {
IAHDPII = Byte.MIN_VALUE;
}
}

protected final void initIAHDPM85(String s) {
if (!s.trim().isEmpty()) {
IAHDPM85 = Byte.parseByte(s);
} else {
IAHDPM85 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPM86(String s) {
if (!s.trim().isEmpty()) {
IAHDPM86 = Byte.parseByte(s);
} else {
IAHDPM86 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPM96(String s) {
if (!s.trim().isEmpty()) {
IAHDPM96 = Byte.parseByte(s);
} else {
IAHDPM96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMAA(String s) {
if (!s.trim().isEmpty()) {
IAHDPMAA = Byte.parseByte(s);
} else {
IAHDPMAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMCA(String s) {
if (!s.trim().isEmpty()) {
IAHDPMCA = Byte.parseByte(s);
} else {
IAHDPMCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMDL(String s) {
if (!s.trim().isEmpty()) {
IAHDPMDL = Byte.parseByte(s);
} else {
IAHDPMDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMIB(String s) {
if (!s.trim().isEmpty()) {
IAHDPMIB = Byte.parseByte(s);
} else {
IAHDPMIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMII(String s) {
if (!s.trim().isEmpty()) {
IAHDPMII = Byte.parseByte(s);
} else {
IAHDPMII = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMSD(String s) {
if (!s.trim().isEmpty()) {
IAHDPMSD = Byte.parseByte(s);
} else {
IAHDPMSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMSP(String s) {
if (!s.trim().isEmpty()) {
IAHDPMSP = Byte.parseByte(s);
} else {
IAHDPMSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDPMWD(String s) {
if (!s.trim().isEmpty()) {
IAHDPMWD = Byte.parseByte(s);
} else {
IAHDPMWD = Byte.MIN_VALUE;
}
}

protected final void initIAHDPN85(String s) {
if (!s.trim().isEmpty()) {
IAHDPN85 = Byte.parseByte(s);
} else {
IAHDPN85 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPN96(String s) {
if (!s.trim().isEmpty()) {
IAHDPN96 = Byte.parseByte(s);
} else {
IAHDPN96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNAA(String s) {
if (!s.trim().isEmpty()) {
IAHDPNAA = Byte.parseByte(s);
} else {
IAHDPNAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNCA(String s) {
if (!s.trim().isEmpty()) {
IAHDPNCA = Byte.parseByte(s);
} else {
IAHDPNCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNDL(String s) {
if (!s.trim().isEmpty()) {
IAHDPNDL = Byte.parseByte(s);
} else {
IAHDPNDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNIB(String s) {
if (!s.trim().isEmpty()) {
IAHDPNIB = Byte.parseByte(s);
} else {
IAHDPNIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNII(String s) {
if (!s.trim().isEmpty()) {
IAHDPNII = Byte.parseByte(s);
} else {
IAHDPNII = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNSD(String s) {
if (!s.trim().isEmpty()) {
IAHDPNSD = Byte.parseByte(s);
} else {
IAHDPNSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNSP(String s) {
if (!s.trim().isEmpty()) {
IAHDPNSP = Byte.parseByte(s);
} else {
IAHDPNSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNWD(String s) {
if (!s.trim().isEmpty()) {
IAHDPNWD = Byte.parseByte(s);
} else {
IAHDPNWD = Byte.MIN_VALUE;
}
}

protected final void initIAHDPSD(String s) {
if (!s.trim().isEmpty()) {
IAHDPSD = Byte.parseByte(s);
} else {
IAHDPSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDPSP(String s) {
if (!s.trim().isEmpty()) {
IAHDPSP = Byte.parseByte(s);
} else {
IAHDPSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDPWD(String s) {
if (!s.trim().isEmpty()) {
IAHDPWD = Byte.parseByte(s);
} else {
IAHDPWD = Byte.MIN_VALUE;
}
}

protected final void initIAHDR95(String s) {
if (!s.trim().isEmpty()) {
IAHDR95 = Byte.parseByte(s);
} else {
IAHDR95 = Byte.MIN_VALUE;
}
}

protected final void initIAHDR96(String s) {
if (!s.trim().isEmpty()) {
IAHDR96 = Byte.parseByte(s);
} else {
IAHDR96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDRAA(String s) {
if (!s.trim().isEmpty()) {
IAHDRAA = Byte.parseByte(s);
} else {
IAHDRAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDRCA(String s) {
if (!s.trim().isEmpty()) {
IAHDRCA = Byte.parseByte(s);
} else {
IAHDRCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDRDL(String s) {
if (!s.trim().isEmpty()) {
IAHDRDL = Byte.parseByte(s);
} else {
IAHDRDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDRIB(String s) {
if (!s.trim().isEmpty()) {
IAHDRIB = Byte.parseByte(s);
} else {
IAHDRIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDRII(String s) {
if (!s.trim().isEmpty()) {
IAHDRII = Byte.parseByte(s);
} else {
IAHDRII = Byte.MIN_VALUE;
}
}

protected final void initIAHDRM85(String s) {
if (!s.trim().isEmpty()) {
IAHDRM85 = Byte.parseByte(s);
} else {
IAHDRM85 = Byte.MIN_VALUE;
}
}

protected final void initIAHDRM86(String s) {
if (!s.trim().isEmpty()) {
IAHDRM86 = Byte.parseByte(s);
} else {
IAHDRM86 = Byte.MIN_VALUE;
}
}

protected final void initIAHDRM96(String s) {
if (!s.trim().isEmpty()) {
IAHDRM96 = Byte.parseByte(s);
} else {
IAHDRM96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMAA(String s) {
if (!s.trim().isEmpty()) {
IAHDRMAA = Byte.parseByte(s);
} else {
IAHDRMAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMCA(String s) {
if (!s.trim().isEmpty()) {
IAHDRMCA = Byte.parseByte(s);
} else {
IAHDRMCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMDL(String s) {
if (!s.trim().isEmpty()) {
IAHDRMDL = Byte.parseByte(s);
} else {
IAHDRMDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMIB(String s) {
if (!s.trim().isEmpty()) {
IAHDRMIB = Byte.parseByte(s);
} else {
IAHDRMIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMII(String s) {
if (!s.trim().isEmpty()) {
IAHDRMII = Byte.parseByte(s);
} else {
IAHDRMII = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMOT(String s) {
if (!s.trim().isEmpty()) {
IAHDRMOT = Byte.parseByte(s);
} else {
IAHDRMOT = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMSD(String s) {
if (!s.trim().isEmpty()) {
IAHDRMSD = Byte.parseByte(s);
} else {
IAHDRMSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMSP(String s) {
if (!s.trim().isEmpty()) {
IAHDRMSP = Byte.parseByte(s);
} else {
IAHDRMSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDRMWD(String s) {
if (!s.trim().isEmpty()) {
IAHDRMWD = Byte.parseByte(s);
} else {
IAHDRMWD = Byte.MIN_VALUE;
}
}

protected final void initIAHDRSD(String s) {
if (!s.trim().isEmpty()) {
IAHDRSD = Byte.parseByte(s);
} else {
IAHDRSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDRSP(String s) {
if (!s.trim().isEmpty()) {
IAHDRSP = Byte.parseByte(s);
} else {
IAHDRSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDRWD(String s) {
if (!s.trim().isEmpty()) {
IAHDRWD = Byte.parseByte(s);
} else {
IAHDRWD = Byte.MIN_VALUE;
}
}

protected final void initIAHOMEE(String s) {
if (!s.trim().isEmpty()) {
IAHOMEE = Byte.parseByte(s);
} else {
IAHOMEE = Byte.MIN_VALUE;
}
}

protected final void initIAHOMEL(String s) {
if (!s.trim().isEmpty()) {
IAHOMEL = Integer.parseInt(s);
} else {
IAHOMEL = Integer.MIN_VALUE;
}
}

protected final void initIAHOMER(String s) {
if (!s.trim().isEmpty()) {
IAHOMER = Byte.parseByte(s);
} else {
IAHOMER = Byte.MIN_VALUE;
}
}

protected final void initIAHOMEU(String s) {
if (!s.trim().isEmpty()) {
IAHOMEU = Integer.parseInt(s);
} else {
IAHOMEU = Integer.MIN_VALUE;
}
}

protected final void initIAIRAE(String s) {
if (!s.trim().isEmpty()) {
IAIRAE = Byte.parseByte(s);
} else {
IAIRAE = Byte.MIN_VALUE;
}
}

protected final void initIAIRAL(String s) {
if (!s.trim().isEmpty()) {
IAIRAL = Integer.parseInt(s);
} else {
IAIRAL = Integer.MIN_VALUE;
}
}

protected final void initIAIRAR(String s) {
if (!s.trim().isEmpty()) {
IAIRAR = Byte.parseByte(s);
} else {
IAIRAR = Byte.MIN_VALUE;
}
}

protected final void initIAIRAU(String s) {
if (!s.trim().isEmpty()) {
IAIRAU = Integer.parseInt(s);
} else {
IAIRAU = Integer.MIN_VALUE;
}
}

protected final void initIAISACAS(String s) {
if (!s.trim().isEmpty()) {
IAISACAS = Byte.parseByte(s);
} else {
IAISACAS = Byte.MIN_VALUE;
}
}

protected final void initIAISADE(String s) {
if (!s.trim().isEmpty()) {
IAISADE = Byte.parseByte(s);
} else {
IAISADE = Byte.MIN_VALUE;
}
}

protected final void initIAISADL(String s) {
if (!s.trim().isEmpty()) {
IAISADL = Short.parseShort(s);
} else {
IAISADL = Short.MIN_VALUE;
}
}

protected final void initIAISADR(String s) {
if (!s.trim().isEmpty()) {
IAISADR = Byte.parseByte(s);
} else {
IAISADR = Byte.MIN_VALUE;
}
}

protected final void initIAISADU(String s) {
if (!s.trim().isEmpty()) {
IAISADU = Short.parseShort(s);
} else {
IAISADU = Short.MIN_VALUE;
}
}

protected final void initIAISALI(String s) {
if (!s.trim().isEmpty()) {
IAISALI = Byte.parseByte(s);
} else {
IAISALI = Byte.MIN_VALUE;
}
}

protected final void initIAISASHA(String s) {
if (!s.trim().isEmpty()) {
IAISASHA = Byte.parseByte(s);
} else {
IAISASHA = Byte.MIN_VALUE;
}
}

protected final void initIALIPAE(String s) {
if (!s.trim().isEmpty()) {
IALIPAE = Byte.parseByte(s);
} else {
IALIPAE = Byte.MIN_VALUE;
}
}

protected final void initIALIPAL(String s) {
if (!s.trim().isEmpty()) {
IALIPAL = Integer.parseInt(s);
} else {
IALIPAL = Integer.MIN_VALUE;
}
}

protected final void initIALIPAR(String s) {
if (!s.trim().isEmpty()) {
IALIPAR = Byte.parseByte(s);
} else {
IALIPAR = Byte.MIN_VALUE;
}
}

protected final void initIALIPAU(String s) {
if (!s.trim().isEmpty()) {
IALIPAU = Integer.parseInt(s);
} else {
IALIPAU = Integer.MIN_VALUE;
}
}

protected final void initIALISAE(String s) {
if (!s.trim().isEmpty()) {
IALISAE = Byte.parseByte(s);
} else {
IALISAE = Byte.MIN_VALUE;
}
}

protected final void initIALISAL(String s) {
if (!s.trim().isEmpty()) {
IALISAL = Short.parseShort(s);
} else {
IALISAL = Short.MIN_VALUE;
}
}

protected final void initIALISAR(String s) {
if (!s.trim().isEmpty()) {
IALISAR = Byte.parseByte(s);
} else {
IALISAR = Byte.MIN_VALUE;
}
}

protected final void initIALISAU(String s) {
if (!s.trim().isEmpty()) {
IALISAU = Short.parseShort(s);
} else {
IALISAU = Short.MIN_VALUE;
}
}

protected final void initIALIYAE(String s) {
if (!s.trim().isEmpty()) {
IALIYAE = Byte.parseByte(s);
} else {
IALIYAE = Byte.MIN_VALUE;
}
}

protected final void initIALIYAL(String s) {
if (!s.trim().isEmpty()) {
IALIYAL = Integer.parseInt(s);
} else {
IALIYAL = Integer.MIN_VALUE;
}
}

protected final void initIALIYAR(String s) {
if (!s.trim().isEmpty()) {
IALIYAR = Byte.parseByte(s);
} else {
IALIYAR = Byte.MIN_VALUE;
}
}

protected final void initIALIYAU(String s) {
if (!s.trim().isEmpty()) {
IALIYAU = Integer.parseInt(s);
} else {
IALIYAU = Integer.MIN_VALUE;
}
}

protected final void initIALM19(String s) {
if (!s.trim().isEmpty()) {
IALM19 = Byte.parseByte(s);
} else {
IALM19 = Byte.MIN_VALUE;
}
}

protected final void initIALM20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALM20 = false;
} else {
IALM20 = true;
}
}
}

protected final void initIALM21(String s) {
if (!s.trim().isEmpty()) {
IALM21 = Byte.parseByte(s);
} else {
IALM21 = Byte.MIN_VALUE;
}
}

protected final void initIALM22(String s) {
if (!s.trim().isEmpty()) {
IALM22 = Byte.parseByte(s);
} else {
IALM22 = Byte.MIN_VALUE;
}
}

protected final void initIALM23(String s) {
if (!s.trim().isEmpty()) {
IALM23 = Byte.parseByte(s);
} else {
IALM23 = Byte.MIN_VALUE;
}
}

protected final void initIALM24(String s) {
if (!s.trim().isEmpty()) {
IALM24 = Byte.parseByte(s);
} else {
IALM24 = Byte.MIN_VALUE;
}
}

protected final void initIALM25(String s) {
if (!s.trim().isEmpty()) {
IALM25 = Byte.parseByte(s);
} else {
IALM25 = Byte.MIN_VALUE;
}
}

protected final void initIALM26(String s) {
if (!s.trim().isEmpty()) {
IALM26 = Byte.parseByte(s);
} else {
IALM26 = Byte.MIN_VALUE;
}
}

protected final void initIALM27(String s) {
if (!s.trim().isEmpty()) {
IALM27 = Byte.parseByte(s);
} else {
IALM27 = Byte.MIN_VALUE;
}
}

protected final void initIALM37(String s) {
if (!s.trim().isEmpty()) {
IALM37 = Byte.parseByte(s);
} else {
IALM37 = Byte.MIN_VALUE;
}
}

protected final void initIALM38(String s) {
if (!s.trim().isEmpty()) {
IALM38 = Byte.parseByte(s);
} else {
IALM38 = Byte.MIN_VALUE;
}
}

protected final void initIALM39(String s) {
if (!s.trim().isEmpty()) {
IALM39 = Byte.parseByte(s);
} else {
IALM39 = Byte.MIN_VALUE;
}
}

protected final void initIALM40(String s) {
if (!s.trim().isEmpty()) {
IALM40 = Byte.parseByte(s);
} else {
IALM40 = Byte.MIN_VALUE;
}
}

protected final void initIALM41(String s) {
if (!s.trim().isEmpty()) {
IALM41 = Byte.parseByte(s);
} else {
IALM41 = Byte.MIN_VALUE;
}
}

protected final void initIALM42(String s) {
if (!s.trim().isEmpty()) {
IALM42 = Byte.parseByte(s);
} else {
IALM42 = Byte.MIN_VALUE;
}
}

protected final void initIALM43(String s) {
if (!s.trim().isEmpty()) {
IALM43 = Byte.parseByte(s);
} else {
IALM43 = Byte.MIN_VALUE;
}
}

protected final void initIALM44(String s) {
if (!s.trim().isEmpty()) {
IALM44 = Byte.parseByte(s);
} else {
IALM44 = Byte.MIN_VALUE;
}
}

protected final void initIALM45(String s) {
if (!s.trim().isEmpty()) {
IALM45 = Byte.parseByte(s);
} else {
IALM45 = Byte.MIN_VALUE;
}
}

protected final void initIALM55(String s) {
if (!s.trim().isEmpty()) {
IALM55 = Byte.parseByte(s);
} else {
IALM55 = Byte.MIN_VALUE;
}
}

protected final void initIALM56(String s) {
if (!s.trim().isEmpty()) {
IALM56 = Byte.parseByte(s);
} else {
IALM56 = Byte.MIN_VALUE;
}
}

protected final void initIALM57(String s) {
if (!s.trim().isEmpty()) {
IALM57 = Byte.parseByte(s);
} else {
IALM57 = Byte.MIN_VALUE;
}
}

protected final void initIALM58(String s) {
if (!s.trim().isEmpty()) {
IALM58 = Byte.parseByte(s);
} else {
IALM58 = Byte.MIN_VALUE;
}
}

protected final void initIALM59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IALM59 = false;
} else {
IALM59 = true;
}
}
}

protected final void initIALM60(String s) {
if (!s.trim().isEmpty()) {
IALM60 = Byte.parseByte(s);
} else {
IALM60 = Byte.MIN_VALUE;
}
}

protected final void initIALM61(String s) {
if (!s.trim().isEmpty()) {
IALM61 = Byte.parseByte(s);
} else {
IALM61 = Byte.MIN_VALUE;
}
}

protected final void initIALM62(String s) {
if (!s.trim().isEmpty()) {
IALM62 = Byte.parseByte(s);
} else {
IALM62 = Byte.MIN_VALUE;
}
}

protected final void initIALM63(String s) {
if (!s.trim().isEmpty()) {
IALM63 = Byte.parseByte(s);
} else {
IALM63 = Byte.MIN_VALUE;
}
}

protected final void initIALOAME(String s) {
if (!s.trim().isEmpty()) {
IALOAME = Byte.parseByte(s);
} else {
IALOAME = Byte.MIN_VALUE;
}
}

protected final void initIALOAML(String s) {
if (!s.trim().isEmpty()) {
IALOAML = Short.parseShort(s);
} else {
IALOAML = Short.MIN_VALUE;
}
}

protected final void initIALOAMR(String s) {
if (!s.trim().isEmpty()) {
IALOAMR = Byte.parseByte(s);
} else {
IALOAMR = Byte.MIN_VALUE;
}
}

protected final void initIALOAMU(String s) {
if (!s.trim().isEmpty()) {
IALOAMU = Short.parseShort(s);
} else {
IALOAMU = Short.MIN_VALUE;
}
}

protected final void initIALOAN96(String s) {
if (!s.trim().isEmpty()) {
IALOAN96 = Byte.parseByte(s);
} else {
IALOAN96 = Byte.MIN_VALUE;
}
}

protected final void initIALOANHP(String s) {
if (!s.trim().isEmpty()) {
IALOANHP = Byte.parseByte(s);
} else {
IALOANHP = Byte.MIN_VALUE;
}
}

protected final void initIALOANML(String s) {
if (!s.trim().isEmpty()) {
IALOANML = Byte.parseByte(s);
} else {
IALOANML = Byte.MIN_VALUE;
}
}

protected final void initIALOANMO(String s) {
if (!s.trim().isEmpty()) {
IALOANMO = Byte.parseByte(s);
} else {
IALOANMO = Byte.MIN_VALUE;
}
}

protected final void initIALOANOD(String s) {
if (!s.trim().isEmpty()) {
IALOANOD = Byte.parseByte(s);
} else {
IALOANOD = Byte.MIN_VALUE;
}
}

protected final void initIALOANPL(String s) {
if (!s.trim().isEmpty()) {
IALOANPL = Byte.parseByte(s);
} else {
IALOANPL = Byte.MIN_VALUE;
}
}

protected final void initIALOANSF(String s) {
if (!s.trim().isEmpty()) {
IALOANSF = Byte.parseByte(s);
} else {
IALOANSF = Byte.MIN_VALUE;
}
}

protected final void initIALREFE(String s) {
if (!s.trim().isEmpty()) {
IALREFE = Byte.parseByte(s);
} else {
IALREFE = Byte.MIN_VALUE;
}
}

protected final void initIALREFL(String s) {
if (!s.trim().isEmpty()) {
IALREFL = Byte.parseByte(s);
} else {
IALREFL = Byte.MIN_VALUE;
}
}

protected final void initIALREFR(String s) {
if (!s.trim().isEmpty()) {
IALREFR = Byte.parseByte(s);
} else {
IALREFR = Byte.MIN_VALUE;
}
}

protected final void initIALREFU(String s) {
if (!s.trim().isEmpty()) {
IALREFU = Byte.parseByte(s);
} else {
IALREFU = Byte.MIN_VALUE;
}
}

protected final void initIALREME(String s) {
if (!s.trim().isEmpty()) {
IALREME = Byte.parseByte(s);
} else {
IALREME = Byte.MIN_VALUE;
}
}

protected final void initIALREML(String s) {
if (!s.trim().isEmpty()) {
IALREML = Short.parseShort(s);
} else {
IALREML = Short.MIN_VALUE;
}
}

protected final void initIALREMR(String s) {
if (!s.trim().isEmpty()) {
IALREMR = Byte.parseByte(s);
} else {
IALREMR = Byte.MIN_VALUE;
}
}

protected final void initIALREMU(String s) {
if (!s.trim().isEmpty()) {
IALREMU = Short.parseShort(s);
} else {
IALREMU = Short.MIN_VALUE;
}
}

protected final void initIALREOE(String s) {
if (!s.trim().isEmpty()) {
IALREOE = Byte.parseByte(s);
} else {
IALREOE = Byte.MIN_VALUE;
}
}

protected final void initIALREOL(String s) {
if (!s.trim().isEmpty()) {
IALREOL = Short.parseShort(s);
} else {
IALREOL = Short.MIN_VALUE;
}
}

protected final void initIALREOR(String s) {
if (!s.trim().isEmpty()) {
IALREOR = Byte.parseByte(s);
} else {
IALREOR = Byte.MIN_VALUE;
}
}

protected final void initIALREOU(String s) {
if (!s.trim().isEmpty()) {
IALREOU = Short.parseShort(s);
} else {
IALREOU = Short.MIN_VALUE;
}
}

protected final void initIALREWE(String s) {
if (!s.trim().isEmpty()) {
IALREWE = Byte.parseByte(s);
} else {
IALREWE = Byte.MIN_VALUE;
}
}

protected final void initIALREWL(String s) {
if (!s.trim().isEmpty()) {
IALREWL = Short.parseShort(s);
} else {
IALREWL = Short.MIN_VALUE;
}
}

protected final void initIALREWR(String s) {
if (!s.trim().isEmpty()) {
IALREWR = Byte.parseByte(s);
} else {
IALREWR = Byte.MIN_VALUE;
}
}

protected final void initIALREWU(String s) {
if (!s.trim().isEmpty()) {
IALREWU = Byte.parseByte(s);
} else {
IALREWU = Byte.MIN_VALUE;
}
}

protected final void initIALREYE(String s) {
if (!s.trim().isEmpty()) {
IALREYE = Byte.parseByte(s);
} else {
IALREYE = Byte.MIN_VALUE;
}
}

protected final void initIALREYL(String s) {
if (!s.trim().isEmpty()) {
IALREYL = Short.parseShort(s);
} else {
IALREYL = Short.MIN_VALUE;
}
}

protected final void initIALREYR(String s) {
if (!s.trim().isEmpty()) {
IALREYR = Byte.parseByte(s);
} else {
IALREYR = Byte.MIN_VALUE;
}
}

protected final void initIALREYU(String s) {
if (!s.trim().isEmpty()) {
IALREYU = Short.parseShort(s);
} else {
IALREYU = Short.MIN_VALUE;
}
}

protected final void initIALY(String s) {
if (!s.trim().isEmpty()) {
IALY = Byte.parseByte(s);
} else {
IALY = Byte.MIN_VALUE;
}
}

protected final void initIALY10(String s) {
if (!s.trim().isEmpty()) {
IALY10 = Byte.parseByte(s);
} else {
IALY10 = Byte.MIN_VALUE;
}
}

protected final void initIALY11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY11 = false;
} else {
IALY11 = true;
}
}
}

protected final void initIALY12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY12 = false;
} else {
IALY12 = true;
}
}
}

protected final void initIALY13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY13 = false;
} else {
IALY13 = true;
}
}
}

protected final void initIALY14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY14 = false;
} else {
IALY14 = true;
}
}
}

protected final void initIALY15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY15 = false;
} else {
IALY15 = true;
}
}
}

protected final void initIALY16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY16 = false;
} else {
IALY16 = true;
}
}
}

protected final void initIALY17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY17 = false;
} else {
IALY17 = true;
}
}
}

protected final void initIALY18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY18 = false;
} else {
IALY18 = true;
}
}
}

protected final void initIALY19(String s) {
if (!s.trim().isEmpty()) {
IALY19 = Byte.parseByte(s);
} else {
IALY19 = Byte.MIN_VALUE;
}
}

protected final void initIALY2(String s) {
if (!s.trim().isEmpty()) {
IALY2 = Byte.parseByte(s);
} else {
IALY2 = Byte.MIN_VALUE;
}
}

protected final void initIALY20(String s) {
if (!s.trim().isEmpty()) {
IALY20 = Byte.parseByte(s);
} else {
IALY20 = Byte.MIN_VALUE;
}
}

protected final void initIALY21(String s) {
if (!s.trim().isEmpty()) {
IALY21 = Byte.parseByte(s);
} else {
IALY21 = Byte.MIN_VALUE;
}
}

protected final void initIALY22(String s) {
if (!s.trim().isEmpty()) {
IALY22 = Byte.parseByte(s);
} else {
IALY22 = Byte.MIN_VALUE;
}
}

protected final void initIALY23(String s) {
if (!s.trim().isEmpty()) {
IALY23 = Byte.parseByte(s);
} else {
IALY23 = Byte.MIN_VALUE;
}
}

protected final void initIALY24(String s) {
if (!s.trim().isEmpty()) {
IALY24 = Byte.parseByte(s);
} else {
IALY24 = Byte.MIN_VALUE;
}
}

protected final void initIALY25(String s) {
if (!s.trim().isEmpty()) {
IALY25 = Byte.parseByte(s);
} else {
IALY25 = Byte.MIN_VALUE;
}
}

protected final void initIALY26(String s) {
if (!s.trim().isEmpty()) {
IALY26 = Byte.parseByte(s);
} else {
IALY26 = Byte.MIN_VALUE;
}
}

protected final void initIALY27(String s) {
if (!s.trim().isEmpty()) {
IALY27 = Byte.parseByte(s);
} else {
IALY27 = Byte.MIN_VALUE;
}
}

protected final void initIALY28(String s) {
if (!s.trim().isEmpty()) {
IALY28 = Byte.parseByte(s);
} else {
IALY28 = Byte.MIN_VALUE;
}
}

protected final void initIALY29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY29 = false;
} else {
IALY29 = true;
}
}
}

protected final void initIALY3(String s) {
if (!s.trim().isEmpty()) {
IALY3 = Byte.parseByte(s);
} else {
IALY3 = Byte.MIN_VALUE;
}
}

protected final void initIALY30(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY30 = false;
} else {
IALY30 = true;
}
}
}

protected final void initIALY31(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY31 = false;
} else {
IALY31 = true;
}
}
}

protected final void initIALY32(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY32 = false;
} else {
IALY32 = true;
}
}
}

protected final void initIALY33(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY33 = false;
} else {
IALY33 = true;
}
}
}

protected final void initIALY34(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY34 = false;
} else {
IALY34 = true;
}
}
}

protected final void initIALY35(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY35 = false;
} else {
IALY35 = true;
}
}
}

protected final void initIALY36(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY36 = false;
} else {
IALY36 = true;
}
}
}

protected final void initIALY37(String s) {
if (!s.trim().isEmpty()) {
IALY37 = Byte.parseByte(s);
} else {
IALY37 = Byte.MIN_VALUE;
}
}

protected final void initIALY38(String s) {
if (!s.trim().isEmpty()) {
IALY38 = Byte.parseByte(s);
} else {
IALY38 = Byte.MIN_VALUE;
}
}

protected final void initIALY39(String s) {
if (!s.trim().isEmpty()) {
IALY39 = Byte.parseByte(s);
} else {
IALY39 = Byte.MIN_VALUE;
}
}

protected final void initIALY4(String s) {
if (!s.trim().isEmpty()) {
IALY4 = Byte.parseByte(s);
} else {
IALY4 = Byte.MIN_VALUE;
}
}

protected final void initIALY40(String s) {
if (!s.trim().isEmpty()) {
IALY40 = Byte.parseByte(s);
} else {
IALY40 = Byte.MIN_VALUE;
}
}

protected final void initIALY41(String s) {
if (!s.trim().isEmpty()) {
IALY41 = Byte.parseByte(s);
} else {
IALY41 = Byte.MIN_VALUE;
}
}

protected final void initIALY42(String s) {
if (!s.trim().isEmpty()) {
IALY42 = Byte.parseByte(s);
} else {
IALY42 = Byte.MIN_VALUE;
}
}

protected final void initIALY43(String s) {
if (!s.trim().isEmpty()) {
IALY43 = Byte.parseByte(s);
} else {
IALY43 = Byte.MIN_VALUE;
}
}

protected final void initIALY44(String s) {
if (!s.trim().isEmpty()) {
IALY44 = Byte.parseByte(s);
} else {
IALY44 = Byte.MIN_VALUE;
}
}

protected final void initIALY45(String s) {
if (!s.trim().isEmpty()) {
IALY45 = Byte.parseByte(s);
} else {
IALY45 = Byte.MIN_VALUE;
}
}

protected final void initIALY46(String s) {
if (!s.trim().isEmpty()) {
IALY46 = Byte.parseByte(s);
} else {
IALY46 = Byte.MIN_VALUE;
}
}

protected final void initIALY47(String s) {
if (!s.trim().isEmpty()) {
IALY47 = Byte.parseByte(s);
} else {
IALY47 = Byte.MIN_VALUE;
}
}

protected final void initIALY48(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY48 = false;
} else {
IALY48 = true;
}
}
}

protected final void initIALY49(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY49 = false;
} else {
IALY49 = true;
}
}
}

protected final void initIALY5(String s) {
if (!s.trim().isEmpty()) {
IALY5 = Byte.parseByte(s);
} else {
IALY5 = Byte.MIN_VALUE;
}
}

protected final void initIALY50(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY50 = false;
} else {
IALY50 = true;
}
}
}

protected final void initIALY51(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY51 = false;
} else {
IALY51 = true;
}
}
}

protected final void initIALY52(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY52 = false;
} else {
IALY52 = true;
}
}
}

protected final void initIALY53(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY53 = false;
} else {
IALY53 = true;
}
}
}

protected final void initIALY54(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY54 = false;
} else {
IALY54 = true;
}
}
}

protected final void initIALY55(String s) {
if (!s.trim().isEmpty()) {
IALY55 = Byte.parseByte(s);
} else {
IALY55 = Byte.MIN_VALUE;
}
}

protected final void initIALY56(String s) {
if (!s.trim().isEmpty()) {
IALY56 = Byte.parseByte(s);
} else {
IALY56 = Byte.MIN_VALUE;
}
}

protected final void initIALY57(String s) {
if (!s.trim().isEmpty()) {
IALY57 = Byte.parseByte(s);
} else {
IALY57 = Byte.MIN_VALUE;
}
}

protected final void initIALY58(String s) {
if (!s.trim().isEmpty()) {
IALY58 = Byte.parseByte(s);
} else {
IALY58 = Byte.MIN_VALUE;
}
}

protected final void initIALY59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY59 = false;
} else {
IALY59 = true;
}
}
}

protected final void initIALY6(String s) {
if (!s.trim().isEmpty()) {
IALY6 = Byte.parseByte(s);
} else {
IALY6 = Byte.MIN_VALUE;
}
}

protected final void initIALY60(String s) {
if (!s.trim().isEmpty()) {
IALY60 = Byte.parseByte(s);
} else {
IALY60 = Byte.MIN_VALUE;
}
}

protected final void initIALY61(String s) {
if (!s.trim().isEmpty()) {
IALY61 = Byte.parseByte(s);
} else {
IALY61 = Byte.MIN_VALUE;
}
}

protected final void initIALY62(String s) {
if (!s.trim().isEmpty()) {
IALY62 = Byte.parseByte(s);
} else {
IALY62 = Byte.MIN_VALUE;
}
}

protected final void initIALY63(String s) {
if (!s.trim().isEmpty()) {
IALY63 = Byte.parseByte(s);
} else {
IALY63 = Byte.MIN_VALUE;
}
}

protected final void initIALY7(String s) {
if (!s.trim().isEmpty()) {
IALY7 = Byte.parseByte(s);
} else {
IALY7 = Byte.MIN_VALUE;
}
}

protected final void initIALY8(String s) {
if (!s.trim().isEmpty()) {
IALY8 = Byte.parseByte(s);
} else {
IALY8 = Byte.MIN_VALUE;
}
}

protected final void initIALY9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -2) {
IALY9 = false;
} else {
IALY9 = true;
}
}
}

protected final void initIANPBPE(String s) {
if (!s.trim().isEmpty()) {
IANPBPE = Byte.parseByte(s);
} else {
IANPBPE = Byte.MIN_VALUE;
}
}

protected final void initIANPBPL(String s) {
if (!s.trim().isEmpty()) {
IANPBPL = Short.parseShort(s);
} else {
IANPBPL = Short.MIN_VALUE;
}
}

protected final void initIANPBPR(String s) {
if (!s.trim().isEmpty()) {
IANPBPR = Byte.parseByte(s);
} else {
IANPBPR = Byte.MIN_VALUE;
}
}

protected final void initIANPBPU(String s) {
if (!s.trim().isEmpty()) {
IANPBPU = Short.parseShort(s);
} else {
IANPBPU = Short.MIN_VALUE;
}
}

protected final void initIAOASAE(String s) {
if (!s.trim().isEmpty()) {
IAOASAE = Byte.parseByte(s);
} else {
IAOASAE = Byte.MIN_VALUE;
}
}

protected final void initIAOASAL(String s) {
if (!s.trim().isEmpty()) {
IAOASAL = Integer.parseInt(s);
} else {
IAOASAL = Integer.MIN_VALUE;
}
}

protected final void initIAOASAR(String s) {
if (!s.trim().isEmpty()) {
IAOASAR = Byte.parseByte(s);
} else {
IAOASAR = Byte.MIN_VALUE;
}
}

protected final void initIAOASAU(String s) {
if (!s.trim().isEmpty()) {
IAOASAU = Integer.parseInt(s);
} else {
IAOASAU = Integer.MIN_VALUE;
}
}

protected final void initIAOMME(String s) {
if (!s.trim().isEmpty()) {
IAOMME = Byte.parseByte(s);
} else {
IAOMME = Byte.MIN_VALUE;
}
}

protected final void initIAOMML(String s) {
if (!s.trim().isEmpty()) {
IAOMML = Integer.parseInt(s);
} else {
IAOMML = Integer.MIN_VALUE;
}
}

protected final void initIAOMMR(String s) {
if (!s.trim().isEmpty()) {
IAOMMR = Byte.parseByte(s);
} else {
IAOMMR = Byte.MIN_VALUE;
}
}

protected final void initIAOMMU(String s) {
if (!s.trim().isEmpty()) {
IAOMMU = Integer.parseInt(s);
} else {
IAOMMU = Integer.MIN_VALUE;
}
}

protected final void initIAOTHP3(String s) {
if (!s.trim().isEmpty()) {
IAOTHP3 = Byte.parseByte(s);
} else {
IAOTHP3 = Byte.MIN_VALUE;
}
}

protected final void initIAOWEME(String s) {
if (!s.trim().isEmpty()) {
IAOWEME = Byte.parseByte(s);
} else {
IAOWEME = Byte.MIN_VALUE;
}
}

protected final void initIAOWEML(String s) {
if (!s.trim().isEmpty()) {
IAOWEML = Short.parseShort(s);
} else {
IAOWEML = Short.MIN_VALUE;
}
}

protected final void initIAOWEMR(String s) {
if (!s.trim().isEmpty()) {
IAOWEMR = Byte.parseByte(s);
} else {
IAOWEMR = Byte.MIN_VALUE;
}
}

protected final void initIAOWEMU(String s) {
if (!s.trim().isEmpty()) {
IAOWEMU = Short.parseShort(s);
} else {
IAOWEMU = Short.MIN_VALUE;
}
}

protected final void initIAP39(String s) {
if (!s.trim().isEmpty()) {
IAP39 = Byte.parseByte(s);
} else {
IAP39 = Byte.MIN_VALUE;
}
}

protected final void initIAP40(String s) {
if (!s.trim().isEmpty()) {
IAP40 = Byte.parseByte(s);
} else {
IAP40 = Byte.MIN_VALUE;
}
}

protected final void initIAP41(String s) {
if (!s.trim().isEmpty()) {
IAP41 = Byte.parseByte(s);
} else {
IAP41 = Byte.MIN_VALUE;
}
}

protected final void initIAP42(String s) {
if (!s.trim().isEmpty()) {
IAP42 = Byte.parseByte(s);
} else {
IAP42 = Byte.MIN_VALUE;
}
}

protected final void initIAP43(String s) {
if (!s.trim().isEmpty()) {
IAP43 = Byte.parseByte(s);
} else {
IAP43 = Byte.MIN_VALUE;
}
}

protected final void initIAP44(String s) {
if (!s.trim().isEmpty()) {
IAP44 = Byte.parseByte(s);
} else {
IAP44 = Byte.MIN_VALUE;
}
}

protected final void initIAP45(String s) {
if (!s.trim().isEmpty()) {
IAP45 = Byte.parseByte(s);
} else {
IAP45 = Byte.MIN_VALUE;
}
}

protected final void initIAP46(String s) {
if (!s.trim().isEmpty()) {
IAP46 = Byte.parseByte(s);
} else {
IAP46 = Byte.MIN_VALUE;
}
}

protected final void initIAP47(String s) {
if (!s.trim().isEmpty()) {
IAP47 = Byte.parseByte(s);
} else {
IAP47 = Byte.MIN_VALUE;
}
}

protected final void initIAP48(String s) {
if (!s.trim().isEmpty()) {
IAP48 = Byte.parseByte(s);
} else {
IAP48 = Byte.MIN_VALUE;
}
}

protected final void initIAP49(String s) {
if (!s.trim().isEmpty()) {
IAP49 = Byte.parseByte(s);
} else {
IAP49 = Byte.MIN_VALUE;
}
}

protected final void initIAP50(String s) {
if (!s.trim().isEmpty()) {
IAP50 = Byte.parseByte(s);
} else {
IAP50 = Byte.MIN_VALUE;
}
}

protected final void initIAP51(String s) {
if (!s.trim().isEmpty()) {
IAP51 = Byte.parseByte(s);
} else {
IAP51 = Byte.MIN_VALUE;
}
}

protected final void initIAP52(String s) {
if (!s.trim().isEmpty()) {
IAP52 = Byte.parseByte(s);
} else {
IAP52 = Byte.MIN_VALUE;
}
}

protected final void initIAP53(String s) {
if (!s.trim().isEmpty()) {
IAP53 = Byte.parseByte(s);
} else {
IAP53 = Byte.MIN_VALUE;
}
}

protected final void initIAP54(String s) {
if (!s.trim().isEmpty()) {
IAP54 = Byte.parseByte(s);
} else {
IAP54 = Byte.MIN_VALUE;
}
}

protected final void initIAP55(String s) {
if (!s.trim().isEmpty()) {
IAP55 = Byte.parseByte(s);
} else {
IAP55 = Byte.MIN_VALUE;
}
}

protected final void initIAP56(String s) {
if (!s.trim().isEmpty()) {
IAP56 = Byte.parseByte(s);
} else {
IAP56 = Byte.MIN_VALUE;
}
}

protected final void initIAP57(String s) {
if (!s.trim().isEmpty()) {
IAP57 = Byte.parseByte(s);
} else {
IAP57 = Byte.MIN_VALUE;
}
}

protected final void initIAP58(String s) {
if (!s.trim().isEmpty()) {
IAP58 = Byte.parseByte(s);
} else {
IAP58 = Byte.MIN_VALUE;
}
}

protected final void initIAP59(String s) {
if (!s.trim().isEmpty()) {
IAP59 = Byte.parseByte(s);
} else {
IAP59 = Byte.MIN_VALUE;
}
}

protected final void initIAP60(String s) {
if (!s.trim().isEmpty()) {
IAP60 = Byte.parseByte(s);
} else {
IAP60 = Byte.MIN_VALUE;
}
}

protected final void initIAP61(String s) {
if (!s.trim().isEmpty()) {
IAP61 = Byte.parseByte(s);
} else {
IAP61 = Byte.MIN_VALUE;
}
}

protected final void initIAP62(String s) {
if (!s.trim().isEmpty()) {
IAP62 = Byte.parseByte(s);
} else {
IAP62 = Byte.MIN_VALUE;
}
}

protected final void initIAP63(String s) {
if (!s.trim().isEmpty()) {
IAP63 = Byte.parseByte(s);
} else {
IAP63 = Byte.MIN_VALUE;
}
}

protected final void initIAP64(String s) {
if (!s.trim().isEmpty()) {
IAP64 = Byte.parseByte(s);
} else {
IAP64 = Byte.MIN_VALUE;
}
}

protected final void initIAP65(String s) {
if (!s.trim().isEmpty()) {
IAP65 = Byte.parseByte(s);
} else {
IAP65 = Byte.MIN_VALUE;
}
}

protected final void initIAP66(String s) {
if (!s.trim().isEmpty()) {
IAP66 = Byte.parseByte(s);
} else {
IAP66 = Byte.MIN_VALUE;
}
}

protected final void initIAP67(String s) {
if (!s.trim().isEmpty()) {
IAP67 = Byte.parseByte(s);
} else {
IAP67 = Byte.MIN_VALUE;
}
}

protected final void initIAP68(String s) {
if (!s.trim().isEmpty()) {
IAP68 = Byte.parseByte(s);
} else {
IAP68 = Byte.MIN_VALUE;
}
}

protected final void initIAP69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAP69 = false;
} else {
IAP69 = true;
}
}
}

protected final void initIAP70(String s) {
if (!s.trim().isEmpty()) {
IAP70 = Byte.parseByte(s);
} else {
IAP70 = Byte.MIN_VALUE;
}
}

protected final void initIAP71(String s) {
if (!s.trim().isEmpty()) {
IAP71 = Byte.parseByte(s);
} else {
IAP71 = Byte.MIN_VALUE;
}
}

protected final void initIAP72(String s) {
if (!s.trim().isEmpty()) {
IAP72 = Byte.parseByte(s);
} else {
IAP72 = Byte.MIN_VALUE;
}
}

protected final void initIAPAY(String s) {
if (!s.trim().isEmpty()) {
IAPAY = Byte.parseByte(s);
} else {
IAPAY = Byte.MIN_VALUE;
}
}

protected final void initIAPAY2(String s) {
if (!s.trim().isEmpty()) {
IAPAY2 = Byte.parseByte(s);
} else {
IAPAY2 = Byte.MIN_VALUE;
}
}

protected final void initIAPAY3(String s) {
if (!s.trim().isEmpty()) {
IAPAY3 = Byte.parseByte(s);
} else {
IAPAY3 = Byte.MIN_VALUE;
}
}

protected final void initIAPAYR(String s) {
if (!s.trim().isEmpty()) {
IAPAYR = Byte.parseByte(s);
} else {
IAPAYR = Byte.MIN_VALUE;
}
}

protected final void initIAPAYR2(String s) {
if (!s.trim().isEmpty()) {
IAPAYR2 = Byte.parseByte(s);
} else {
IAPAYR2 = Byte.MIN_VALUE;
}
}

protected final void initIAPAYR3(String s) {
if (!s.trim().isEmpty()) {
IAPAYR3 = Byte.parseByte(s);
} else {
IAPAYR3 = Byte.MIN_VALUE;
}
}

protected final void initIAPAYW11(String s) {
if (!s.trim().isEmpty()) {
IAPAYW11 = Byte.parseByte(s);
} else {
IAPAYW11 = Byte.MIN_VALUE;
}
}

protected final void initIAPK95(String s) {
if (!s.trim().isEmpty()) {
IAPK95 = Byte.parseByte(s);
} else {
IAPK95 = Byte.MIN_VALUE;
}
}

protected final void initIAPK96(String s) {
if (!s.trim().isEmpty()) {
IAPK96 = Byte.parseByte(s);
} else {
IAPK96 = Byte.MIN_VALUE;
}
}

protected final void initIAPKGW(String s) {
if (!s.trim().isEmpty()) {
IAPKGW = Byte.parseByte(s);
} else {
IAPKGW = Byte.MIN_VALUE;
}
}

protected final void initIAPKIOB(String s) {
if (!s.trim().isEmpty()) {
IAPKIOB = Byte.parseByte(s);
} else {
IAPKIOB = Byte.MIN_VALUE;
}
}

protected final void initIAPKLI(String s) {
if (!s.trim().isEmpty()) {
IAPKLI = Byte.parseByte(s);
} else {
IAPKLI = Byte.MIN_VALUE;
}
}

protected final void initIAPKM1E(String s) {
if (!s.trim().isEmpty()) {
IAPKM1E = Byte.parseByte(s);
} else {
IAPKM1E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM1L(String s) {
if (!s.trim().isEmpty()) {
IAPKM1L = Integer.parseInt(s);
} else {
IAPKM1L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM1R(String s) {
if (!s.trim().isEmpty()) {
IAPKM1R = Byte.parseByte(s);
} else {
IAPKM1R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM1U(String s) {
if (!s.trim().isEmpty()) {
IAPKM1U = Integer.parseInt(s);
} else {
IAPKM1U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM2E(String s) {
if (!s.trim().isEmpty()) {
IAPKM2E = Byte.parseByte(s);
} else {
IAPKM2E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM2L(String s) {
if (!s.trim().isEmpty()) {
IAPKM2L = Integer.parseInt(s);
} else {
IAPKM2L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM2R(String s) {
if (!s.trim().isEmpty()) {
IAPKM2R = Byte.parseByte(s);
} else {
IAPKM2R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM2U(String s) {
if (!s.trim().isEmpty()) {
IAPKM2U = Integer.parseInt(s);
} else {
IAPKM2U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM3E(String s) {
if (!s.trim().isEmpty()) {
IAPKM3E = Byte.parseByte(s);
} else {
IAPKM3E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM3L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPKM3L = false;
} else {
IAPKM3L = true;
}
}
}

protected final void initIAPKM3R(String s) {
if (!s.trim().isEmpty()) {
IAPKM3R = Byte.parseByte(s);
} else {
IAPKM3R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM3U(String s) {
if (!s.trim().isEmpty()) {
IAPKM3U = Short.parseShort(s);
} else {
IAPKM3U = Short.MIN_VALUE;
}
}

protected final void initIAPKM4E(String s) {
if (!s.trim().isEmpty()) {
IAPKM4E = Byte.parseByte(s);
} else {
IAPKM4E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM4L(String s) {
if (!s.trim().isEmpty()) {
IAPKM4L = Short.parseShort(s);
} else {
IAPKM4L = Short.MIN_VALUE;
}
}

protected final void initIAPKM4R(String s) {
if (!s.trim().isEmpty()) {
IAPKM4R = Byte.parseByte(s);
} else {
IAPKM4R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM4U(String s) {
if (!s.trim().isEmpty()) {
IAPKM4U = Short.parseShort(s);
} else {
IAPKM4U = Short.MIN_VALUE;
}
}

protected final void initIAPKM5E(String s) {
if (!s.trim().isEmpty()) {
IAPKM5E = Byte.parseByte(s);
} else {
IAPKM5E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM5L(String s) {
if (!s.trim().isEmpty()) {
IAPKM5L = Integer.parseInt(s);
} else {
IAPKM5L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM5R(String s) {
if (!s.trim().isEmpty()) {
IAPKM5R = Byte.parseByte(s);
} else {
IAPKM5R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM5U(String s) {
if (!s.trim().isEmpty()) {
IAPKM5U = Integer.parseInt(s);
} else {
IAPKM5U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM6E(String s) {
if (!s.trim().isEmpty()) {
IAPKM6E = Byte.parseByte(s);
} else {
IAPKM6E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM6L(String s) {
if (!s.trim().isEmpty()) {
IAPKM6L = Integer.parseInt(s);
} else {
IAPKM6L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM6R(String s) {
if (!s.trim().isEmpty()) {
IAPKM6R = Byte.parseByte(s);
} else {
IAPKM6R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM6U(String s) {
if (!s.trim().isEmpty()) {
IAPKM6U = Integer.parseInt(s);
} else {
IAPKM6U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM7E(String s) {
if (!s.trim().isEmpty()) {
IAPKM7E = Byte.parseByte(s);
} else {
IAPKM7E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM7L(String s) {
if (!s.trim().isEmpty()) {
IAPKM7L = Short.parseShort(s);
} else {
IAPKM7L = Short.MIN_VALUE;
}
}

protected final void initIAPKM7R(String s) {
if (!s.trim().isEmpty()) {
IAPKM7R = Byte.parseByte(s);
} else {
IAPKM7R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM7U(String s) {
if (!s.trim().isEmpty()) {
IAPKM7U = Short.parseShort(s);
} else {
IAPKM7U = Short.MIN_VALUE;
}
}

protected final void initIAPKM85(String s) {
if (!s.trim().isEmpty()) {
IAPKM85 = Byte.parseByte(s);
} else {
IAPKM85 = Byte.MIN_VALUE;
}
}

protected final void initIAPKM86(String s) {
if (!s.trim().isEmpty()) {
IAPKM86 = Byte.parseByte(s);
} else {
IAPKM86 = Byte.MIN_VALUE;
}
}

protected final void initIAPKM8E(String s) {
if (!s.trim().isEmpty()) {
IAPKM8E = Byte.parseByte(s);
} else {
IAPKM8E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM8L(String s) {
if (!s.trim().isEmpty()) {
IAPKM8L = Integer.parseInt(s);
} else {
IAPKM8L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM8R(String s) {
if (!s.trim().isEmpty()) {
IAPKM8R = Byte.parseByte(s);
} else {
IAPKM8R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM8U(String s) {
if (!s.trim().isEmpty()) {
IAPKM8U = Integer.parseInt(s);
} else {
IAPKM8U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM96(String s) {
if (!s.trim().isEmpty()) {
IAPKM96 = Byte.parseByte(s);
} else {
IAPKM96 = Byte.MIN_VALUE;
}
}

protected final void initIAPKMGW(String s) {
if (!s.trim().isEmpty()) {
IAPKMGW = Byte.parseByte(s);
} else {
IAPKMGW = Byte.MIN_VALUE;
}
}

protected final void initIAPKMIOB(String s) {
if (!s.trim().isEmpty()) {
IAPKMIOB = Byte.parseByte(s);
} else {
IAPKMIOB = Byte.MIN_VALUE;
}
}

protected final void initIAPKMLI(String s) {
if (!s.trim().isEmpty()) {
IAPKMLI = Byte.parseByte(s);
} else {
IAPKMLI = Byte.MIN_VALUE;
}
}

protected final void initIAPKMOIP(String s) {
if (!s.trim().isEmpty()) {
IAPKMOIP = Byte.parseByte(s);
} else {
IAPKMOIP = Byte.MIN_VALUE;
}
}

protected final void initIAPKMPAP(String s) {
if (!s.trim().isEmpty()) {
IAPKMPAP = Byte.parseByte(s);
} else {
IAPKMPAP = Byte.MIN_VALUE;
}
}

protected final void initIAPKMPP(String s) {
if (!s.trim().isEmpty()) {
IAPKMPP = Byte.parseByte(s);
} else {
IAPKMPP = Byte.MIN_VALUE;
}
}

protected final void initIAPKMRP(String s) {
if (!s.trim().isEmpty()) {
IAPKMRP = Byte.parseByte(s);
} else {
IAPKMRP = Byte.MIN_VALUE;
}
}

protected final void initIAPKOIP(String s) {
if (!s.trim().isEmpty()) {
IAPKOIP = Byte.parseByte(s);
} else {
IAPKOIP = Byte.MIN_VALUE;
}
}

protected final void initIAPKPAP(String s) {
if (!s.trim().isEmpty()) {
IAPKPAP = Byte.parseByte(s);
} else {
IAPKPAP = Byte.MIN_VALUE;
}
}

protected final void initIAPKPP(String s) {
if (!s.trim().isEmpty()) {
IAPKPP = Byte.parseByte(s);
} else {
IAPKPP = Byte.MIN_VALUE;
}
}

protected final void initIAPKRP(String s) {
if (!s.trim().isEmpty()) {
IAPKRP = Byte.parseByte(s);
} else {
IAPKRP = Byte.MIN_VALUE;
}
}

protected final void initIAPLW(String s) {
if (!s.trim().isEmpty()) {
IAPLW = Byte.parseByte(s);
} else {
IAPLW = Byte.MIN_VALUE;
}
}

protected final void initIAPLY(String s) {
if (!s.trim().isEmpty()) {
IAPLY = Byte.parseByte(s);
} else {
IAPLY = Byte.MIN_VALUE;
}
}

protected final void initIAPLYP(String s) {
if (!s.trim().isEmpty()) {
IAPLYP = Byte.parseByte(s);
} else {
IAPLYP = Byte.MIN_VALUE;
}
}

protected final void initIAPLYW(String s) {
if (!s.trim().isEmpty()) {
IAPLYW = Byte.parseByte(s);
} else {
IAPLYW = Byte.MIN_VALUE;
}
}

protected final void initIAPPAFE(String s) {
if (!s.trim().isEmpty()) {
IAPPAFE = Byte.parseByte(s);
} else {
IAPPAFE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPPAFL = false;
} else {
IAPPAFL = true;
}
}
}

protected final void initIAPPAFR(String s) {
if (!s.trim().isEmpty()) {
IAPPAFR = Byte.parseByte(s);
} else {
IAPPAFR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAFU(String s) {
if (!s.trim().isEmpty()) {
IAPPAFU = Short.parseShort(s);
} else {
IAPPAFU = Short.MIN_VALUE;
}
}

protected final void initIAPPAME(String s) {
if (!s.trim().isEmpty()) {
IAPPAME = Byte.parseByte(s);
} else {
IAPPAME = Byte.MIN_VALUE;
}
}

protected final void initIAPPAML(String s) {
if (!s.trim().isEmpty()) {
IAPPAML = Short.parseShort(s);
} else {
IAPPAML = Short.MIN_VALUE;
}
}

protected final void initIAPPAMR(String s) {
if (!s.trim().isEmpty()) {
IAPPAMR = Byte.parseByte(s);
} else {
IAPPAMR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAMU(String s) {
if (!s.trim().isEmpty()) {
IAPPAMU = Short.parseShort(s);
} else {
IAPPAMU = Short.MIN_VALUE;
}
}

protected final void initIAPPAOE(String s) {
if (!s.trim().isEmpty()) {
IAPPAOE = Byte.parseByte(s);
} else {
IAPPAOE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAOL(String s) {
if (!s.trim().isEmpty()) {
IAPPAOL = Short.parseShort(s);
} else {
IAPPAOL = Short.MIN_VALUE;
}
}

protected final void initIAPPAOR(String s) {
if (!s.trim().isEmpty()) {
IAPPAOR = Byte.parseByte(s);
} else {
IAPPAOR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAOU(String s) {
if (!s.trim().isEmpty()) {
IAPPAOU = Short.parseShort(s);
} else {
IAPPAOU = Short.MIN_VALUE;
}
}

protected final void initIAPPAWE(String s) {
if (!s.trim().isEmpty()) {
IAPPAWE = Byte.parseByte(s);
} else {
IAPPAWE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAWL(String s) {
if (!s.trim().isEmpty()) {
IAPPAWL = Short.parseShort(s);
} else {
IAPPAWL = Short.MIN_VALUE;
}
}

protected final void initIAPPAWR(String s) {
if (!s.trim().isEmpty()) {
IAPPAWR = Byte.parseByte(s);
} else {
IAPPAWR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAWU(String s) {
if (!s.trim().isEmpty()) {
IAPPAWU = Short.parseShort(s);
} else {
IAPPAWU = Short.MIN_VALUE;
}
}

protected final void initIAPPAYE(String s) {
if (!s.trim().isEmpty()) {
IAPPAYE = Byte.parseByte(s);
} else {
IAPPAYE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAYL(String s) {
if (!s.trim().isEmpty()) {
IAPPAYL = Short.parseShort(s);
} else {
IAPPAYL = Short.MIN_VALUE;
}
}

protected final void initIAPPAYR(String s) {
if (!s.trim().isEmpty()) {
IAPPAYR = Byte.parseByte(s);
} else {
IAPPAYR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAYU(String s) {
if (!s.trim().isEmpty()) {
IAPPAYU = Short.parseShort(s);
} else {
IAPPAYU = Short.MIN_VALUE;
}
}

protected final void initIAPPEIE(String s) {
if (!s.trim().isEmpty()) {
IAPPEIE = Byte.parseByte(s);
} else {
IAPPEIE = Byte.MIN_VALUE;
}
}

protected final void initIAPPEIL(String s) {
if (!s.trim().isEmpty()) {
IAPPEIL = Short.parseShort(s);
} else {
IAPPEIL = Short.MIN_VALUE;
}
}

protected final void initIAPPEIR(String s) {
if (!s.trim().isEmpty()) {
IAPPEIR = Byte.parseByte(s);
} else {
IAPPEIR = Byte.MIN_VALUE;
}
}

protected final void initIAPPEIU(String s) {
if (!s.trim().isEmpty()) {
IAPPEIU = Short.parseShort(s);
} else {
IAPPEIU = Short.MIN_VALUE;
}
}

protected final void initIAPPMO(String s) {
if (!s.trim().isEmpty()) {
IAPPMO = Integer.parseInt(s);
} else {
IAPPMO = Integer.MIN_VALUE;
}
}

protected final void initIAPROP95(String s) {
if (!s.trim().isEmpty()) {
IAPROP95 = Byte.parseByte(s);
} else {
IAPROP95 = Byte.MIN_VALUE;
}
}

protected final void initIAPROP96(String s) {
if (!s.trim().isEmpty()) {
IAPROP96 = Byte.parseByte(s);
} else {
IAPROP96 = Byte.MIN_VALUE;
}
}

protected final void initIAPROPFA(String s) {
if (!s.trim().isEmpty()) {
IAPROPFA = Byte.parseByte(s);
} else {
IAPROPFA = Byte.MIN_VALUE;
}
}

protected final void initIAPROPHO(String s) {
if (!s.trim().isEmpty()) {
IAPROPHO = Byte.parseByte(s);
} else {
IAPROPHO = Byte.MIN_VALUE;
}
}

protected final void initIAPROPIN(String s) {
if (!s.trim().isEmpty()) {
IAPROPIN = Byte.parseByte(s);
} else {
IAPROPIN = Byte.MIN_VALUE;
}
}

protected final void initIAPROPOL(String s) {
if (!s.trim().isEmpty()) {
IAPROPOL = Byte.parseByte(s);
} else {
IAPROPOL = Byte.MIN_VALUE;
}
}

protected final void initIAPROPOW(String s) {
if (!s.trim().isEmpty()) {
IAPROPOW = Byte.parseByte(s);
} else {
IAPROPOW = Byte.MIN_VALUE;
}
}

protected final void initIAPROPTR(String s) {
if (!s.trim().isEmpty()) {
IAPROPTR = Byte.parseByte(s);
} else {
IAPROPTR = Byte.MIN_VALUE;
}
}

protected final void initIAPYW2(String s) {
if (!s.trim().isEmpty()) {
IAPYW2 = Byte.parseByte(s);
} else {
IAPYW2 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW3(String s) {
if (!s.trim().isEmpty()) {
IAPYW3 = Byte.parseByte(s);
} else {
IAPYW3 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW5(String s) {
if (!s.trim().isEmpty()) {
IAPYW5 = Byte.parseByte(s);
} else {
IAPYW5 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW6(String s) {
if (!s.trim().isEmpty()) {
IAPYW6 = Byte.parseByte(s);
} else {
IAPYW6 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW7(String s) {
if (!s.trim().isEmpty()) {
IAPYW7 = Byte.parseByte(s);
} else {
IAPYW7 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW8(String s) {
if (!s.trim().isEmpty()) {
IAPYW8 = Byte.parseByte(s);
} else {
IAPYW8 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW9(String s) {
if (!s.trim().isEmpty()) {
IAPYW9 = Byte.parseByte(s);
} else {
IAPYW9 = Byte.MIN_VALUE;
}
}

protected final void initIARECE(String s) {
if (!s.trim().isEmpty()) {
IARECE = Byte.parseByte(s);
} else {
IARECE = Byte.MIN_VALUE;
}
}

protected final void initIARECL(String s) {
if (!s.trim().isEmpty()) {
IARECL = Short.parseShort(s);
} else {
IARECL = Short.MIN_VALUE;
}
}

protected final void initIARECR(String s) {
if (!s.trim().isEmpty()) {
IARECR = Byte.parseByte(s);
} else {
IARECR = Byte.MIN_VALUE;
}
}

protected final void initIARECU(String s) {
if (!s.trim().isEmpty()) {
IARECU = Short.parseShort(s);
} else {
IARECU = Short.MIN_VALUE;
}
}

protected final void initIAREGM3(String s) {
if (!s.trim().isEmpty()) {
IAREGM3 = Short.parseShort(s);
} else {
IAREGM3 = Short.MIN_VALUE;
}
}

protected final void initIAREGO3(String s) {
if (!s.trim().isEmpty()) {
IAREGO3 = Byte.parseByte(s);
} else {
IAREGO3 = Byte.MIN_VALUE;
}
}

protected final void initIAREPFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFE = false;
} else {
IAREPFE = true;
}
}
}

protected final void initIAREPFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFL = false;
} else {
IAREPFL = true;
}
}
}

protected final void initIAREPFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFR = false;
} else {
IAREPFR = true;
}
}
}

protected final void initIAREPFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFU = false;
} else {
IAREPFU = true;
}
}
}

protected final void initIAREPME(String s) {
if (!s.trim().isEmpty()) {
IAREPME = Byte.parseByte(s);
} else {
IAREPME = Byte.MIN_VALUE;
}
}

protected final void initIAREPML(String s) {
if (!s.trim().isEmpty()) {
IAREPML = Byte.parseByte(s);
} else {
IAREPML = Byte.MIN_VALUE;
}
}

protected final void initIAREPMR(String s) {
if (!s.trim().isEmpty()) {
IAREPMR = Byte.parseByte(s);
} else {
IAREPMR = Byte.MIN_VALUE;
}
}

protected final void initIAREPMU(String s) {
if (!s.trim().isEmpty()) {
IAREPMU = Short.parseShort(s);
} else {
IAREPMU = Short.MIN_VALUE;
}
}

protected final void initIAREPOE(String s) {
if (!s.trim().isEmpty()) {
IAREPOE = Byte.parseByte(s);
} else {
IAREPOE = Byte.MIN_VALUE;
}
}

protected final void initIAREPOL(String s) {
if (!s.trim().isEmpty()) {
IAREPOL = Short.parseShort(s);
} else {
IAREPOL = Short.MIN_VALUE;
}
}

protected final void initIAREPOR(String s) {
if (!s.trim().isEmpty()) {
IAREPOR = Byte.parseByte(s);
} else {
IAREPOR = Byte.MIN_VALUE;
}
}

protected final void initIAREPOU(String s) {
if (!s.trim().isEmpty()) {
IAREPOU = Short.parseShort(s);
} else {
IAREPOU = Short.MIN_VALUE;
}
}

protected final void initIAREPWE(String s) {
if (!s.trim().isEmpty()) {
IAREPWE = Byte.parseByte(s);
} else {
IAREPWE = Byte.MIN_VALUE;
}
}

protected final void initIAREPWL(String s) {
if (!s.trim().isEmpty()) {
IAREPWL = Byte.parseByte(s);
} else {
IAREPWL = Byte.MIN_VALUE;
}
}

protected final void initIAREPWR(String s) {
if (!s.trim().isEmpty()) {
IAREPWR = Byte.parseByte(s);
} else {
IAREPWR = Byte.MIN_VALUE;
}
}

protected final void initIAREPWU(String s) {
if (!s.trim().isEmpty()) {
IAREPWU = Byte.parseByte(s);
} else {
IAREPWU = Byte.MIN_VALUE;
}
}

protected final void initIAREPYE(String s) {
if (!s.trim().isEmpty()) {
IAREPYE = Byte.parseByte(s);
} else {
IAREPYE = Byte.MIN_VALUE;
}
}

protected final void initIAREPYL(String s) {
if (!s.trim().isEmpty()) {
IAREPYL = Byte.parseByte(s);
} else {
IAREPYL = Byte.MIN_VALUE;
}
}

protected final void initIAREPYR(String s) {
if (!s.trim().isEmpty()) {
IAREPYR = Byte.parseByte(s);
} else {
IAREPYR = Byte.MIN_VALUE;
}
}

protected final void initIAREPYU(String s) {
if (!s.trim().isEmpty()) {
IAREPYU = Short.parseShort(s);
} else {
IAREPYU = Short.MIN_VALUE;
}
}

protected final void initIARG2FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FE = false;
} else {
IARG2FE = true;
}
}
}

protected final void initIARG2FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FL = false;
} else {
IARG2FL = true;
}
}
}

protected final void initIARG2FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FR = false;
} else {
IARG2FR = true;
}
}
}

protected final void initIARG2FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FU = false;
} else {
IARG2FU = true;
}
}
}

protected final void initIARG2ME(String s) {
if (!s.trim().isEmpty()) {
IARG2ME = Byte.parseByte(s);
} else {
IARG2ME = Byte.MIN_VALUE;
}
}

protected final void initIARG2ML(String s) {
if (!s.trim().isEmpty()) {
IARG2ML = Short.parseShort(s);
} else {
IARG2ML = Short.MIN_VALUE;
}
}

protected final void initIARG2MR(String s) {
if (!s.trim().isEmpty()) {
IARG2MR = Byte.parseByte(s);
} else {
IARG2MR = Byte.MIN_VALUE;
}
}

protected final void initIARG2MU(String s) {
if (!s.trim().isEmpty()) {
IARG2MU = Short.parseShort(s);
} else {
IARG2MU = Short.MIN_VALUE;
}
}

protected final void initIARG2OE(String s) {
if (!s.trim().isEmpty()) {
IARG2OE = Byte.parseByte(s);
} else {
IARG2OE = Byte.MIN_VALUE;
}
}

protected final void initIARG2OL(String s) {
if (!s.trim().isEmpty()) {
IARG2OL = Byte.parseByte(s);
} else {
IARG2OL = Byte.MIN_VALUE;
}
}

protected final void initIARG2OR(String s) {
if (!s.trim().isEmpty()) {
IARG2OR = Byte.parseByte(s);
} else {
IARG2OR = Byte.MIN_VALUE;
}
}

protected final void initIARG2OU(String s) {
if (!s.trim().isEmpty()) {
IARG2OU = Byte.parseByte(s);
} else {
IARG2OU = Byte.MIN_VALUE;
}
}

protected final void initIARG2WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WE = false;
} else {
IARG2WE = true;
}
}
}

protected final void initIARG2WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WL = false;
} else {
IARG2WL = true;
}
}
}

protected final void initIARG2WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WR = false;
} else {
IARG2WR = true;
}
}
}

protected final void initIARG2WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WU = false;
} else {
IARG2WU = true;
}
}
}

protected final void initIARG2YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YE = false;
} else {
IARG2YE = true;
}
}
}

protected final void initIARG2YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YL = false;
} else {
IARG2YL = true;
}
}
}

protected final void initIARG2YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YR = false;
} else {
IARG2YR = true;
}
}
}

protected final void initIARG2YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YU = false;
} else {
IARG2YU = true;
}
}
}

protected final void initIARG3FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3FE = false;
} else {
IARG3FE = true;
}
}
}

protected final void initIARG3FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3FL = false;
} else {
IARG3FL = true;
}
}
}

protected final void initIARG3FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3FR = false;
} else {
IARG3FR = true;
}
}
}

protected final void initIARG3FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3FU = false;
} else {
IARG3FU = true;
}
}
}

protected final void initIARG3ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3ME = false;
} else {
IARG3ME = true;
}
}
}

protected final void initIARG3ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3ML = false;
} else {
IARG3ML = true;
}
}
}

protected final void initIARG3MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3MR = false;
} else {
IARG3MR = true;
}
}
}

protected final void initIARG3MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3MU = false;
} else {
IARG3MU = true;
}
}
}

protected final void initIARG3OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3OE = false;
} else {
IARG3OE = true;
}
}
}

protected final void initIARG3OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3OL = false;
} else {
IARG3OL = true;
}
}
}

protected final void initIARG3OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3OR = false;
} else {
IARG3OR = true;
}
}
}

protected final void initIARG3OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3OU = false;
} else {
IARG3OU = true;
}
}
}

protected final void initIARG3WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3WE = false;
} else {
IARG3WE = true;
}
}
}

protected final void initIARG3WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3WL = false;
} else {
IARG3WL = true;
}
}
}

protected final void initIARG3WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3WR = false;
} else {
IARG3WR = true;
}
}
}

protected final void initIARG3WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3WU = false;
} else {
IARG3WU = true;
}
}
}

protected final void initIARG3YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3YE = false;
} else {
IARG3YE = true;
}
}
}

protected final void initIARG3YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3YL = false;
} else {
IARG3YL = true;
}
}
}

protected final void initIARG3YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3YR = false;
} else {
IARG3YR = true;
}
}
}

protected final void initIARG3YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3YU = false;
} else {
IARG3YU = true;
}
}
}

protected final void initIARGFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFE = false;
} else {
IARGFE = true;
}
}
}

protected final void initIARGFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFL = false;
} else {
IARGFL = true;
}
}
}

protected final void initIARGFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFR = false;
} else {
IARGFR = true;
}
}
}

protected final void initIARGFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFU = false;
} else {
IARGFU = true;
}
}
}

protected final void initIARGME(String s) {
if (!s.trim().isEmpty()) {
IARGME = Byte.parseByte(s);
} else {
IARGME = Byte.MIN_VALUE;
}
}

protected final void initIARGML(String s) {
if (!s.trim().isEmpty()) {
IARGML = Short.parseShort(s);
} else {
IARGML = Short.MIN_VALUE;
}
}

protected final void initIARGMR(String s) {
if (!s.trim().isEmpty()) {
IARGMR = Byte.parseByte(s);
} else {
IARGMR = Byte.MIN_VALUE;
}
}

protected final void initIARGMU(String s) {
if (!s.trim().isEmpty()) {
IARGMU = Short.parseShort(s);
} else {
IARGMU = Short.MIN_VALUE;
}
}

protected final void initIARGMW(String s) {
if (!s.trim().isEmpty()) {
IARGMW = Byte.parseByte(s);
} else {
IARGMW = Byte.MIN_VALUE;
}
}

protected final void initIARGMW2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGMW2 = false;
} else {
IARGMW2 = true;
}
}
}

protected final void initIARGMW3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGMW3 = false;
} else {
IARGMW3 = true;
}
}
}

protected final void initIARGMWP(String s) {
if (!s.trim().isEmpty()) {
IARGMWP = Byte.parseByte(s);
} else {
IARGMWP = Byte.MIN_VALUE;
}
}

protected final void initIARGOE(String s) {
if (!s.trim().isEmpty()) {
IARGOE = Byte.parseByte(s);
} else {
IARGOE = Byte.MIN_VALUE;
}
}

protected final void initIARGOL(String s) {
if (!s.trim().isEmpty()) {
IARGOL = Short.parseShort(s);
} else {
IARGOL = Short.MIN_VALUE;
}
}

protected final void initIARGOR(String s) {
if (!s.trim().isEmpty()) {
IARGOR = Byte.parseByte(s);
} else {
IARGOR = Byte.MIN_VALUE;
}
}

protected final void initIARGOU(String s) {
if (!s.trim().isEmpty()) {
IARGOU = Short.parseShort(s);
} else {
IARGOU = Short.MIN_VALUE;
}
}

protected final void initIARGWE(String s) {
if (!s.trim().isEmpty()) {
IARGWE = Byte.parseByte(s);
} else {
IARGWE = Byte.MIN_VALUE;
}
}

protected final void initIARGWL(String s) {
if (!s.trim().isEmpty()) {
IARGWL = Byte.parseByte(s);
} else {
IARGWL = Byte.MIN_VALUE;
}
}

protected final void initIARGWR(String s) {
if (!s.trim().isEmpty()) {
IARGWR = Byte.parseByte(s);
} else {
IARGWR = Byte.MIN_VALUE;
}
}

protected final void initIARGWU(String s) {
if (!s.trim().isEmpty()) {
IARGWU = Byte.parseByte(s);
} else {
IARGWU = Byte.MIN_VALUE;
}
}

protected final void initIARGYE(String s) {
if (!s.trim().isEmpty()) {
IARGYE = Byte.parseByte(s);
} else {
IARGYE = Byte.MIN_VALUE;
}
}

protected final void initIARGYL(String s) {
if (!s.trim().isEmpty()) {
IARGYL = Byte.parseByte(s);
} else {
IARGYL = Byte.MIN_VALUE;
}
}

protected final void initIARGYR(String s) {
if (!s.trim().isEmpty()) {
IARGYR = Byte.parseByte(s);
} else {
IARGYR = Byte.MIN_VALUE;
}
}

protected final void initIARGYR1(String s) {
if (!s.trim().isEmpty()) {
IARGYR1 = Byte.parseByte(s);
} else {
IARGYR1 = Byte.MIN_VALUE;
}
}

protected final void initIARGYR2(String s) {
if (!s.trim().isEmpty()) {
IARGYR2 = Byte.parseByte(s);
} else {
IARGYR2 = Byte.MIN_VALUE;
}
}

protected final void initIARGYR3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGYR3 = false;
} else {
IARGYR3 = true;
}
}
}

protected final void initIARGYRP(String s) {
if (!s.trim().isEmpty()) {
IARGYRP = Byte.parseByte(s);
} else {
IARGYRP = Byte.MIN_VALUE;
}
}

protected final void initIARGYU(String s) {
if (!s.trim().isEmpty()) {
IARGYU = Byte.parseByte(s);
} else {
IARGYU = Byte.MIN_VALUE;
}
}

protected final void initIARMWA(String s) {
if (!s.trim().isEmpty()) {
IARMWA = Byte.parseByte(s);
} else {
IARMWA = Byte.MIN_VALUE;
}
}

protected final void initIARMWA2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARMWA2 = false;
} else {
IARMWA2 = true;
}
}
}

protected final void initIARMWA3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARMWA3 = false;
} else {
IARMWA3 = true;
}
}
}

protected final void initIARMWPA(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARMWPA = false;
} else {
IARMWPA = true;
}
}
}

protected final void initIASAVAE(String s) {
if (!s.trim().isEmpty()) {
IASAVAE = Byte.parseByte(s);
} else {
IASAVAE = Byte.MIN_VALUE;
}
}

protected final void initIASAVAL(String s) {
if (!s.trim().isEmpty()) {
IASAVAL = Integer.parseInt(s);
} else {
IASAVAL = Integer.MIN_VALUE;
}
}

protected final void initIASAVAR(String s) {
if (!s.trim().isEmpty()) {
IASAVAR = Byte.parseByte(s);
} else {
IASAVAR = Byte.MIN_VALUE;
}
}

protected final void initIASAVAU(String s) {
if (!s.trim().isEmpty()) {
IASAVAU = Integer.parseInt(s);
} else {
IASAVAU = Integer.MIN_VALUE;
}
}

protected final void initIASCAE(String s) {
if (!s.trim().isEmpty()) {
IASCAE = Byte.parseByte(s);
} else {
IASCAE = Byte.MIN_VALUE;
}
}

protected final void initIASCAL(String s) {
if (!s.trim().isEmpty()) {
IASCAL = Integer.parseInt(s);
} else {
IASCAL = Integer.MIN_VALUE;
}
}

protected final void initIASCAR(String s) {
if (!s.trim().isEmpty()) {
IASCAR = Byte.parseByte(s);
} else {
IASCAR = Byte.MIN_VALUE;
}
}

protected final void initIASCAU(String s) {
if (!s.trim().isEmpty()) {
IASCAU = Integer.parseInt(s);
} else {
IASCAU = Integer.MIN_VALUE;
}
}

protected final void initIASHTFOL(String s) {
if (!s.trim().isEmpty()) {
IASHTFOL = Byte.parseByte(s);
} else {
IASHTFOL = Byte.MIN_VALUE;
}
}

protected final void initIASHTMUT(String s) {
if (!s.trim().isEmpty()) {
IASHTMUT = Byte.parseByte(s);
} else {
IASHTMUT = Byte.MIN_VALUE;
}
}

protected final void initIASHTPRI(String s) {
if (!s.trim().isEmpty()) {
IASHTPRI = Byte.parseByte(s);
} else {
IASHTPRI = Byte.MIN_VALUE;
}
}

protected final void initIASHTUKL(String s) {
if (!s.trim().isEmpty()) {
IASHTUKL = Byte.parseByte(s);
} else {
IASHTUKL = Byte.MIN_VALUE;
}
}

protected final void initIASI95(String s) {
if (!s.trim().isEmpty()) {
IASI95 = Byte.parseByte(s);
} else {
IASI95 = Byte.MIN_VALUE;
}
}

protected final void initIASI96(String s) {
if (!s.trim().isEmpty()) {
IASI96 = Byte.parseByte(s);
} else {
IASI96 = Byte.MIN_VALUE;
}
}

protected final void initIASIBG(String s) {
if (!s.trim().isEmpty()) {
IASIBG = Byte.parseByte(s);
} else {
IASIBG = Byte.MIN_VALUE;
}
}

protected final void initIASICA(String s) {
if (!s.trim().isEmpty()) {
IASICA = Byte.parseByte(s);
} else {
IASICA = Byte.MIN_VALUE;
}
}

protected final void initIASIISA(String s) {
if (!s.trim().isEmpty()) {
IASIISA = Byte.parseByte(s);
} else {
IASIISA = Byte.MIN_VALUE;
}
}

protected final void initIASINS(String s) {
if (!s.trim().isEmpty()) {
IASINS = Byte.parseByte(s);
} else {
IASINS = Byte.MIN_VALUE;
}
}

protected final void initIASIOIE(String s) {
if (!s.trim().isEmpty()) {
IASIOIE = Byte.parseByte(s);
} else {
IASIOIE = Byte.MIN_VALUE;
}
}

protected final void initIASIOIL(String s) {
if (!s.trim().isEmpty()) {
IASIOIL = Short.parseShort(s);
} else {
IASIOIL = Short.MIN_VALUE;
}
}

protected final void initIASIOIR(String s) {
if (!s.trim().isEmpty()) {
IASIOIR = Byte.parseByte(s);
} else {
IASIOIR = Byte.MIN_VALUE;
}
}

protected final void initIASIOIU(String s) {
if (!s.trim().isEmpty()) {
IASIOIU = Short.parseShort(s);
} else {
IASIOIU = Short.MIN_VALUE;
}
}

protected final void initIASIOPT(String s) {
if (!s.trim().isEmpty()) {
IASIOPT = Byte.parseByte(s);
} else {
IASIOPT = Byte.MIN_VALUE;
}
}

protected final void initIASIPB(String s) {
if (!s.trim().isEmpty()) {
IASIPB = Byte.parseByte(s);
} else {
IASIPB = Byte.MIN_VALUE;
}
}

protected final void initIASIPEP(String s) {
if (!s.trim().isEmpty()) {
IASIPEP = Byte.parseByte(s);
} else {
IASIPEP = Byte.MIN_VALUE;
}
}

protected final void initIASISAE(String s) {
if (!s.trim().isEmpty()) {
IASISAE = Byte.parseByte(s);
} else {
IASISAE = Byte.MIN_VALUE;
}
}

protected final void initIASISAL(String s) {
if (!s.trim().isEmpty()) {
IASISAL = Integer.parseInt(s);
} else {
IASISAL = Integer.MIN_VALUE;
}
}

protected final void initIASISAR(String s) {
if (!s.trim().isEmpty()) {
IASISAR = Byte.parseByte(s);
} else {
IASISAR = Byte.MIN_VALUE;
}
}

protected final void initIASISAU(String s) {
if (!s.trim().isEmpty()) {
IASISAU = Integer.parseInt(s);
} else {
IASISAU = Integer.MIN_VALUE;
}
}

protected final void initIASISAV(String s) {
if (!s.trim().isEmpty()) {
IASISAV = Byte.parseByte(s);
} else {
IASISAV = Byte.MIN_VALUE;
}
}

protected final void initIASISC(String s) {
if (!s.trim().isEmpty()) {
IASISC = Byte.parseByte(s);
} else {
IASISC = Byte.MIN_VALUE;
}
}

protected final void initIASISHA(String s) {
if (!s.trim().isEmpty()) {
IASISHA = Byte.parseByte(s);
} else {
IASISHA = Byte.MIN_VALUE;
}
}

protected final void initIASITESS(String s) {
if (!s.trim().isEmpty()) {
IASITESS = Byte.parseByte(s);
} else {
IASITESS = Byte.MIN_VALUE;
}
}

protected final void initIASIUIT(String s) {
if (!s.trim().isEmpty()) {
IASIUIT = Byte.parseByte(s);
} else {
IASIUIT = Byte.MIN_VALUE;
}
}

protected final void initIASSSE(String s) {
if (!s.trim().isEmpty()) {
IASSSE = Byte.parseByte(s);
} else {
IASSSE = Byte.MIN_VALUE;
}
}

protected final void initIASSSIE(String s) {
if (!s.trim().isEmpty()) {
IASSSIE = Byte.parseByte(s);
} else {
IASSSIE = Byte.MIN_VALUE;
}
}

protected final void initIASSSIL(String s) {
if (!s.trim().isEmpty()) {
IASSSIL = Short.parseShort(s);
} else {
IASSSIL = Short.MIN_VALUE;
}
}

protected final void initIASSSIR(String s) {
if (!s.trim().isEmpty()) {
IASSSIR = Byte.parseByte(s);
} else {
IASSSIR = Byte.MIN_VALUE;
}
}

protected final void initIASSSIU(String s) {
if (!s.trim().isEmpty()) {
IASSSIU = Short.parseShort(s);
} else {
IASSSIU = Short.MIN_VALUE;
}
}

protected final void initIASSSL(String s) {
if (!s.trim().isEmpty()) {
IASSSL = Integer.parseInt(s);
} else {
IASSSL = Integer.MIN_VALUE;
}
}

protected final void initIASSSR(String s) {
if (!s.trim().isEmpty()) {
IASSSR = Byte.parseByte(s);
} else {
IASSSR = Byte.MIN_VALUE;
}
}

protected final void initIASSSU(String s) {
if (!s.trim().isEmpty()) {
IASSSU = Integer.parseInt(s);
} else {
IASSSU = Integer.MIN_VALUE;
}
}

protected final void initIAT39(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT39 = false;
} else {
IAT39 = true;
}
}
}

protected final void initIAT40(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT40 = false;
} else {
IAT40 = true;
}
}
}

protected final void initIAT41(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT41 = false;
} else {
IAT41 = true;
}
}
}

protected final void initIAT42(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT42 = false;
} else {
IAT42 = true;
}
}
}

protected final void initIAT43(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT43 = false;
} else {
IAT43 = true;
}
}
}

protected final void initIAT44(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT44 = false;
} else {
IAT44 = true;
}
}
}

protected final void initIAT45(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT45 = false;
} else {
IAT45 = true;
}
}
}

protected final void initIAT46(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT46 = false;
} else {
IAT46 = true;
}
}
}

protected final void initIAT47(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT47 = false;
} else {
IAT47 = true;
}
}
}

protected final void initIAT48(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT48 = false;
} else {
IAT48 = true;
}
}
}

protected final void initIAT49(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT49 = false;
} else {
IAT49 = true;
}
}
}

protected final void initIAT50(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT50 = false;
} else {
IAT50 = true;
}
}
}

protected final void initIAT51(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT51 = false;
} else {
IAT51 = true;
}
}
}

protected final void initIAT52(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT52 = false;
} else {
IAT52 = true;
}
}
}

protected final void initIAT53(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT53 = false;
} else {
IAT53 = true;
}
}
}

protected final void initIAT54(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT54 = false;
} else {
IAT54 = true;
}
}
}

protected final void initIAT55(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT55 = false;
} else {
IAT55 = true;
}
}
}

protected final void initIAT56(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT56 = false;
} else {
IAT56 = true;
}
}
}

protected final void initIAT57(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT57 = false;
} else {
IAT57 = true;
}
}
}

protected final void initIAT58(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT58 = false;
} else {
IAT58 = true;
}
}
}

protected final void initIAT59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT59 = false;
} else {
IAT59 = true;
}
}
}

protected final void initIAT60(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT60 = false;
} else {
IAT60 = true;
}
}
}

protected final void initIAT61(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT61 = false;
} else {
IAT61 = true;
}
}
}

protected final void initIAT62(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT62 = false;
} else {
IAT62 = true;
}
}
}

protected final void initIAT63(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT63 = false;
} else {
IAT63 = true;
}
}
}

protected final void initIAT64(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT64 = false;
} else {
IAT64 = true;
}
}
}

protected final void initIAT65(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT65 = false;
} else {
IAT65 = true;
}
}
}

protected final void initIAT66(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT66 = false;
} else {
IAT66 = true;
}
}
}

protected final void initIAT67(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT67 = false;
} else {
IAT67 = true;
}
}
}

protected final void initIAT68(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT68 = false;
} else {
IAT68 = true;
}
}
}

protected final void initIAT69(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT69 = false;
} else {
IAT69 = true;
}
}
}

protected final void initIAT70(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT70 = false;
} else {
IAT70 = true;
}
}
}

protected final void initIAT71(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT71 = false;
} else {
IAT71 = true;
}
}
}

protected final void initIAT72(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT72 = false;
} else {
IAT72 = true;
}
}
}

protected final void initIAUITE(String s) {
if (!s.trim().isEmpty()) {
IAUITE = Byte.parseByte(s);
} else {
IAUITE = Byte.MIN_VALUE;
}
}

protected final void initIAUITIE(String s) {
if (!s.trim().isEmpty()) {
IAUITIE = Byte.parseByte(s);
} else {
IAUITIE = Byte.MIN_VALUE;
}
}

protected final void initIAUITIL(String s) {
if (!s.trim().isEmpty()) {
IAUITIL = Short.parseShort(s);
} else {
IAUITIL = Short.MIN_VALUE;
}
}

protected final void initIAUITIR(String s) {
if (!s.trim().isEmpty()) {
IAUITIR = Byte.parseByte(s);
} else {
IAUITIR = Byte.MIN_VALUE;
}
}

protected final void initIAUITIU(String s) {
if (!s.trim().isEmpty()) {
IAUITIU = Short.parseShort(s);
} else {
IAUITIU = Short.MIN_VALUE;
}
}

protected final void initIAUITL(String s) {
if (!s.trim().isEmpty()) {
IAUITL = Integer.parseInt(s);
} else {
IAUITL = Integer.MIN_VALUE;
}
}

protected final void initIAUITR(String s) {
if (!s.trim().isEmpty()) {
IAUITR = Byte.parseByte(s);
} else {
IAUITR = Byte.MIN_VALUE;
}
}

protected final void initIAUITU(String s) {
if (!s.trim().isEmpty()) {
IAUITU = Integer.parseInt(s);
} else {
IAUITU = Integer.MIN_VALUE;
}
}

protected final void initIAW1R(String s) {
if (!s.trim().isEmpty()) {
IAW1R = Byte.parseByte(s);
} else {
IAW1R = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_DBSR1(String s) {
if (!s.trim().isEmpty()) {
IFLAG_DBSR1 = Byte.parseByte(s);
} else {
IFLAG_DBSR1 = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_DBSR2(String s) {
if (!s.trim().isEmpty()) {
IFLAG_DBSR2 = Byte.parseByte(s);
} else {
IFLAG_DBSR2 = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_DCCONT(String s) {
if (!s.trim().isEmpty()) {
IFLAG_DCCONT = Byte.parseByte(s);
} else {
IFLAG_DCCONT = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_DCFUND(String s) {
if (!s.trim().isEmpty()) {
IFLAG_DCFUND = Byte.parseByte(s);
} else {
IFLAG_DCFUND = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_EARN(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
IFLAG_EARN = false;
} else {
IFLAG_EARN = true;
}
}
}

protected final void initIFLAG_REC(String s) {
if (!s.trim().isEmpty()) {
IFLAG_REC = Byte.parseByte(s);
} else {
IFLAG_REC = Byte.MIN_VALUE;
}
}

protected final void initIFLAG_RTEN(String s) {
if (!s.trim().isEmpty()) {
IFLAG_RTEN = Byte.parseByte(s);
} else {
IFLAG_RTEN = Byte.MIN_VALUE;
}
}

protected final void initIGF1(String s) {
if (!s.trim().isEmpty()) {
IGF1 = Byte.parseByte(s);
} else {
IGF1 = Byte.MIN_VALUE;
}
}

protected final void initINHALER(String s) {
if (!s.trim().isEmpty()) {
INHALER = Byte.parseByte(s);
} else {
INHALER = Byte.MIN_VALUE;
}
}

protected final void initINHALHRS(String s) {
if (!s.trim().isEmpty()) {
INHALHRS = Byte.parseByte(s);
} else {
INHALHRS = Byte.MIN_VALUE;
}
}

protected final void initINRECEIPT_08(String s) {
if (!s.trim().isEmpty()) {
INRECEIPT_08 = Double.parseDouble(s);
} else {
INRECEIPT_08 = Double.NaN;
}
}

protected final void initINRECEIPT_SPA(String s) {
if (!s.trim().isEmpty()) {
INRECEIPT_SPA = Double.parseDouble(s);
} else {
INRECEIPT_SPA = Double.NaN;
}
}

protected final void initLDL(String s) {
if (!s.trim().isEmpty()) {
LDL = Double.parseDouble(s);
} else {
LDL = Double.NaN;
}
}

protected final void initLFNOMEA(String s) {
if (!s.trim().isEmpty()) {
LFNOMEA = Byte.parseByte(s);
} else {
LFNOMEA = Byte.MIN_VALUE;
}
}

protected final void initLFRESP(String s) {
if (!s.trim().isEmpty()) {
LFRESP = Byte.parseByte(s);
} else {
LFRESP = Byte.MIN_VALUE;
}
}

protected final void initLFSTAND(String s) {
if (!s.trim().isEmpty()) {
LFSTAND = Byte.parseByte(s);
} else {
LFSTAND = Byte.MIN_VALUE;
}
}

protected final void initLFTEMP(String s) {
if (!s.trim().isEmpty()) {
LFTEMP = Double.parseDouble(s);
} else {
LFTEMP = Double.NaN;
}
}

protected final void initLFWILL(String s) {
if (!s.trim().isEmpty()) {
LFWILL = Byte.parseByte(s);
} else {
LFWILL = Byte.MIN_VALUE;
}
}

protected final void initLIGHTEAT(String s) {
if (!s.trim().isEmpty()) {
LIGHTEAT = Byte.parseByte(s);
} else {
LIGHTEAT = Byte.MIN_VALUE;
}
}

protected final void initMAINHH(String s) {
if (!s.trim().isEmpty()) {
MAINHH = Byte.parseByte(s);
} else {
MAINHH = Byte.MIN_VALUE;
}
}

protected final void initMAP1(String s) {
if (!s.trim().isEmpty()) {
MAP1 = Short.parseShort(s);
} else {
MAP1 = Short.MIN_VALUE;
}
}

protected final void initMAP2(String s) {
if (!s.trim().isEmpty()) {
MAP2 = Short.parseShort(s);
} else {
MAP2 = Short.MIN_VALUE;
}
}

protected final void initMAP3(String s) {
if (!s.trim().isEmpty()) {
MAP3 = Short.parseShort(s);
} else {
MAP3 = Short.MIN_VALUE;
}
}

protected final void initMAPVAL(String s) {
if (!s.trim().isEmpty()) {
MAPVAL = Double.parseDouble(s);
} else {
MAPVAL = Double.NaN;
}
}

protected final void initMCH(String s) {
if (!s.trim().isEmpty()) {
MCH = Double.parseDouble(s);
} else {
MCH = Double.NaN;
}
}

protected final void initMMAIDC(String s) {
if (!s.trim().isEmpty()) {
MMAIDC = Byte.parseByte(s);
} else {
MMAIDC = Byte.MIN_VALUE;
}
}

protected final void initMMBCSC(String s) {
if (!s.trim().isEmpty()) {
MMBCSC = Byte.parseByte(s);
} else {
MMBCSC = Byte.MIN_VALUE;
}
}

protected final void initMMCOM85(String s) {
if (!s.trim().isEmpty()) {
MMCOM85 = Byte.parseByte(s);
} else {
MMCOM85 = Byte.MIN_VALUE;
}
}

protected final void initMMCOM86(String s) {
if (!s.trim().isEmpty()) {
MMCOM86 = Byte.parseByte(s);
} else {
MMCOM86 = Byte.MIN_VALUE;
}
}

protected final void initMMCOMNI(String s) {
if (!s.trim().isEmpty()) {
MMCOMNI = Byte.parseByte(s);
} else {
MMCOMNI = Byte.MIN_VALUE;
}
}

protected final void initMMCOMPA(String s) {
if (!s.trim().isEmpty()) {
MMCOMPA = Byte.parseByte(s);
} else {
MMCOMPA = Byte.MIN_VALUE;
}
}

protected final void initMMCOMRF(String s) {
if (!s.trim().isEmpty()) {
MMCOMRF = Byte.parseByte(s);
} else {
MMCOMRF = Byte.MIN_VALUE;
}
}

protected final void initMMCOMSP(String s) {
if (!s.trim().isEmpty()) {
MMCOMSP = Byte.parseByte(s);
} else {
MMCOMSP = Byte.MIN_VALUE;
}
}

protected final void initMMCOMUN(String s) {
if (!s.trim().isEmpty()) {
MMCOMUN = Byte.parseByte(s);
} else {
MMCOMUN = Byte.MIN_VALUE;
}
}

protected final void initMMCRAV(String s) {
if (!s.trim().isEmpty()) {
MMCRAV = Byte.parseByte(s);
} else {
MMCRAV = Byte.MIN_VALUE;
}
}

protected final void initMMCRNA(String s) {
if (!s.trim().isEmpty()) {
MMCRNA = Byte.parseByte(s);
} else {
MMCRNA = Byte.MIN_VALUE;
}
}

protected final void initMMCRRE(String s) {
if (!s.trim().isEmpty()) {
MMCRRE = Byte.parseByte(s);
} else {
MMCRRE = Byte.MIN_VALUE;
}
}

protected final void initMMCRSC(String s) {
if (!s.trim().isEmpty()) {
MMCRSC = Byte.parseByte(s);
} else {
MMCRSC = Byte.MIN_VALUE;
}
}

protected final void initMMFTNA(String s) {
if (!s.trim().isEmpty()) {
MMFTNA = Byte.parseByte(s);
} else {
MMFTNA = Byte.MIN_VALUE;
}
}

protected final void initMMFTRE2(String s) {
if (!s.trim().isEmpty()) {
MMFTRE2 = Byte.parseByte(s);
} else {
MMFTRE2 = Byte.MIN_VALUE;
}
}

protected final void initMMFTSC(String s) {
if (!s.trim().isEmpty()) {
MMFTSC = Byte.parseByte(s);
} else {
MMFTSC = Byte.MIN_VALUE;
}
}

protected final void initMMFTTI(String s) {
if (!s.trim().isEmpty()) {
MMFTTI = Double.parseDouble(s);
} else {
MMFTTI = Double.NaN;
}
}

protected final void initMMGSD1(String s) {
if (!s.trim().isEmpty()) {
MMGSD1 = Byte.parseByte(s);
} else {
MMGSD1 = Byte.MIN_VALUE;
}
}

protected final void initMMGSD2(String s) {
if (!s.trim().isEmpty()) {
MMGSD2 = Byte.parseByte(s);
} else {
MMGSD2 = Byte.MIN_VALUE;
}
}

protected final void initMMGSD3(String s) {
if (!s.trim().isEmpty()) {
MMGSD3 = Byte.parseByte(s);
} else {
MMGSD3 = Byte.MIN_VALUE;
}
}

protected final void initMMGSDOM(String s) {
if (!s.trim().isEmpty()) {
MMGSDOM = Byte.parseByte(s);
} else {
MMGSDOM = Byte.MIN_VALUE;
}
}

protected final void initMMGSN1(String s) {
if (!s.trim().isEmpty()) {
MMGSN1 = Byte.parseByte(s);
} else {
MMGSN1 = Byte.MIN_VALUE;
}
}

protected final void initMMGSN2(String s) {
if (!s.trim().isEmpty()) {
MMGSN2 = Byte.parseByte(s);
} else {
MMGSN2 = Byte.MIN_VALUE;
}
}

protected final void initMMGSN3(String s) {
if (!s.trim().isEmpty()) {
MMGSN3 = Byte.parseByte(s);
} else {
MMGSN3 = Byte.MIN_VALUE;
}
}

protected final void initMMGSPREQ(String s) {
if (!s.trim().isEmpty()) {
MMGSPREQ = Byte.parseByte(s);
} else {
MMGSPREQ = Byte.MIN_VALUE;
}
}

protected final void initMMGSPROT(String s) {
if (!s.trim().isEmpty()) {
MMGSPROT = Byte.parseByte(s);
} else {
MMGSPROT = Byte.MIN_VALUE;
}
}

protected final void initMMGSPRPA(String s) {
if (!s.trim().isEmpty()) {
MMGSPRPA = Byte.parseByte(s);
} else {
MMGSPRPA = Byte.MIN_VALUE;
}
}

protected final void initMMGSPRRE(String s) {
if (!s.trim().isEmpty()) {
MMGSPRRE = Byte.parseByte(s);
} else {
MMGSPRRE = Byte.MIN_VALUE;
}
}

protected final void initMMGSRES(String s) {
if (!s.trim().isEmpty()) {
MMGSRES = Byte.parseByte(s);
} else {
MMGSRES = Byte.MIN_VALUE;
}
}

protected final void initMMGSSTA(String s) {
if (!s.trim().isEmpty()) {
MMGSSTA = Byte.parseByte(s);
} else {
MMGSSTA = Byte.MIN_VALUE;
}
}

protected final void initMMGSTP(String s) {
if (!s.trim().isEmpty()) {
MMGSTP = Byte.parseByte(s);
} else {
MMGSTP = Byte.MIN_VALUE;
}
}

protected final void initMMGSWIL(String s) {
if (!s.trim().isEmpty()) {
MMGSWIL = Byte.parseByte(s);
} else {
MMGSWIL = Byte.MIN_VALUE;
}
}

protected final void initMMLONA(String s) {
if (!s.trim().isEmpty()) {
MMLONA = Byte.parseByte(s);
} else {
MMLONA = Byte.MIN_VALUE;
}
}

protected final void initMMLORE(String s) {
if (!s.trim().isEmpty()) {
MMLORE = Byte.parseByte(s);
} else {
MMLORE = Byte.MIN_VALUE;
}
}

protected final void initMMLOSC(String s) {
if (!s.trim().isEmpty()) {
MMLOSC = Byte.parseByte(s);
} else {
MMLOSC = Byte.MIN_VALUE;
}
}

protected final void initMMLOTI(String s) {
if (!s.trim().isEmpty()) {
MMLOTI = Double.parseDouble(s);
} else {
MMLOTI = Double.NaN;
}
}

protected final void initMMLSNA(String s) {
if (!s.trim().isEmpty()) {
MMLSNA = Byte.parseByte(s);
} else {
MMLSNA = Byte.MIN_VALUE;
}
}

protected final void initMMLSRE(String s) {
if (!s.trim().isEmpty()) {
MMLSRE = Byte.parseByte(s);
} else {
MMLSRE = Byte.MIN_VALUE;
}
}

protected final void initMMLSSC(String s) {
if (!s.trim().isEmpty()) {
MMLSSC = Byte.parseByte(s);
} else {
MMLSSC = Byte.MIN_VALUE;
}
}

protected final void initMMLSTI(String s) {
if (!s.trim().isEmpty()) {
MMLSTI = Double.parseDouble(s);
} else {
MMLSTI = Double.NaN;
}
}

protected final void initMMRECRC(String s) {
if (!s.trim().isEmpty()) {
MMRECRC = Byte.parseByte(s);
} else {
MMRECRC = Byte.MIN_VALUE;
}
}

protected final void initMMRRFTI(String s) {
if (!s.trim().isEmpty()) {
MMRRFTI = Double.parseDouble(s);
} else {
MMRRFTI = Double.NaN;
}
}

protected final void initMMRRNA(String s) {
if (!s.trim().isEmpty()) {
MMRRNA = Byte.parseByte(s);
} else {
MMRRNA = Byte.MIN_VALUE;
}
}

protected final void initMMRROC(String s) {
if (!s.trim().isEmpty()) {
MMRROC = Byte.parseByte(s);
} else {
MMRROC = Byte.MIN_VALUE;
}
}

protected final void initMMRRRE(String s) {
if (!s.trim().isEmpty()) {
MMRRRE = Byte.parseByte(s);
} else {
MMRRRE = Byte.MIN_VALUE;
}
}

protected final void initMMRRSC(String s) {
if (!s.trim().isEmpty()) {
MMRRSC = Byte.parseByte(s);
} else {
MMRRSC = Byte.MIN_VALUE;
}
}

protected final void initMMRRTTI(String s) {
if (!s.trim().isEmpty()) {
MMRRTTI = Double.parseDouble(s);
} else {
MMRRTTI = Double.NaN;
}
}

protected final void initMMSSNA(String s) {
if (!s.trim().isEmpty()) {
MMSSNA = Byte.parseByte(s);
} else {
MMSSNA = Byte.MIN_VALUE;
}
}

protected final void initMMSSRE(String s) {
if (!s.trim().isEmpty()) {
MMSSRE = Byte.parseByte(s);
} else {
MMSSRE = Byte.MIN_VALUE;
}
}

protected final void initMMSSSC(String s) {
if (!s.trim().isEmpty()) {
MMSSSC = Byte.parseByte(s);
} else {
MMSSSC = Byte.MIN_VALUE;
}
}

protected final void initMMSSTI(String s) {
if (!s.trim().isEmpty()) {
MMSSTI = Double.parseDouble(s);
} else {
MMSSTI = Double.NaN;
}
}

protected final void initMMSTNA(String s) {
if (!s.trim().isEmpty()) {
MMSTNA = Byte.parseByte(s);
} else {
MMSTNA = Byte.MIN_VALUE;
}
}

protected final void initMMSTRE(String s) {
if (!s.trim().isEmpty()) {
MMSTRE = Byte.parseByte(s);
} else {
MMSTRE = Byte.MIN_VALUE;
}
}

protected final void initMMSTSC(String s) {
if (!s.trim().isEmpty()) {
MMSTSC = Byte.parseByte(s);
} else {
MMSTSC = Byte.MIN_VALUE;
}
}

protected final void initMMSTTI(String s) {
if (!s.trim().isEmpty()) {
MMSTTI = Double.parseDouble(s);
} else {
MMSTTI = Double.NaN;
}
}

protected final void initMOTHER(String s) {
if (!s.trim().isEmpty()) {
MOTHER = Byte.parseByte(s);
} else {
MOTHER = Byte.MIN_VALUE;
}
}

protected final void initMTHAGD(String s) {
if (!s.trim().isEmpty()) {
MTHAGD = Byte.parseByte(s);
} else {
MTHAGD = Byte.MIN_VALUE;
}
}

protected final void initNATTBPCO(String s) {
if (!s.trim().isEmpty()) {
NATTBPCO = Byte.parseByte(s);
} else {
NATTBPCO = Byte.MIN_VALUE;
}
}

protected final void initNATTBPCU(String s) {
if (!s.trim().isEmpty()) {
NATTBPCU = Byte.parseByte(s);
} else {
NATTBPCU = Byte.MIN_VALUE;
}
}

protected final void initNATTBPEQ(String s) {
if (!s.trim().isEmpty()) {
NATTBPEQ = Byte.parseByte(s);
} else {
NATTBPEQ = Byte.MIN_VALUE;
}
}

protected final void initNATTBPER(String s) {
if (!s.trim().isEmpty()) {
NATTBPER = Byte.parseByte(s);
} else {
NATTBPER = Byte.MIN_VALUE;
}
}

protected final void initNATTBPOT(String s) {
if (!s.trim().isEmpty()) {
NATTBPOT = Byte.parseByte(s);
} else {
NATTBPOT = Byte.MIN_VALUE;
}
}

protected final void initNATTBPUP(String s) {
if (!s.trim().isEmpty()) {
NATTBPUP = Byte.parseByte(s);
} else {
NATTBPUP = Byte.MIN_VALUE;
}
}

protected final void initNCLM(String s) {
if (!s.trim().isEmpty()) {
NCLM = Byte.parseByte(s);
} else {
NCLM = Byte.MIN_VALUE;
}
}

protected final void initNCORRECT(String s) {
if (!s.trim().isEmpty()) {
NCORRECT = Byte.parseByte(s);
} else {
NCORRECT = Byte.MIN_VALUE;
}
}

protected final void initNLSATLF(String s) {
if (!s.trim().isEmpty()) {
NLSATLF = Byte.parseByte(s);
} else {
NLSATLF = Byte.MIN_VALUE;
}
}

protected final void initNMISSED(String s) {
if (!s.trim().isEmpty()) {
NMISSED = Byte.parseByte(s);
} else {
NMISSED = Byte.MIN_VALUE;
}
}

protected final void initNOATTLF(String s) {
if (!s.trim().isEmpty()) {
NOATTLF = Byte.parseByte(s);
} else {
NOATTLF = Byte.MIN_VALUE;
}
}

protected final void initNOBSMFA(String s) {
if (!s.trim().isEmpty()) {
NOBSMFA = Byte.parseByte(s);
} else {
NOBSMFA = Byte.MIN_VALUE;
}
}

protected final void initNOBSMOT(String s) {
if (!s.trim().isEmpty()) {
NOBSMOT = Byte.parseByte(s);
} else {
NOBSMOT = Byte.MIN_VALUE;
}
}

protected final void initNOBSMSV(String s) {
if (!s.trim().isEmpty()) {
NOBSMSV = Byte.parseByte(s);
} else {
NOBSMSV = Byte.MIN_VALUE;
}
}

protected final void initNOBSMUP(String s) {
if (!s.trim().isEmpty()) {
NOBSMUP = Byte.parseByte(s);
} else {
NOBSMUP = Byte.MIN_VALUE;
}
}

protected final void initNOHTBCBE(String s) {
if (!s.trim().isEmpty()) {
NOHTBCBE = Byte.parseByte(s);
} else {
NOHTBCBE = Byte.MIN_VALUE;
}
}

protected final void initNOHTBCCH(String s) {
if (!s.trim().isEmpty()) {
NOHTBCCH = Byte.parseByte(s);
} else {
NOHTBCCH = Byte.MIN_VALUE;
}
}

protected final void initNOHTBCEQ(String s) {
if (!s.trim().isEmpty()) {
NOHTBCEQ = Byte.parseByte(s);
} else {
NOHTBCEQ = Byte.MIN_VALUE;
}
}

protected final void initNOHTBCOT(String s) {
if (!s.trim().isEmpty()) {
NOHTBCOT = Byte.parseByte(s);
} else {
NOHTBCOT = Byte.MIN_VALUE;
}
}

protected final void initNOHTBCPA(String s) {
if (!s.trim().isEmpty()) {
NOHTBCPA = Byte.parseByte(s);
} else {
NOHTBCPA = Byte.MIN_VALUE;
}
}

protected final void initNOHTBCSH(String s) {
if (!s.trim().isEmpty()) {
NOHTBCSH = Byte.parseByte(s);
} else {
NOHTBCSH = Byte.MIN_VALUE;
}
}

protected final void initNOHTBCST(String s) {
if (!s.trim().isEmpty()) {
NOHTBCST = Byte.parseByte(s);
} else {
NOHTBCST = Byte.MIN_VALUE;
}
}

protected final void initNOHTBCUN(String s) {
if (!s.trim().isEmpty()) {
NOHTBCUN = Byte.parseByte(s);
} else {
NOHTBCUN = Byte.MIN_VALUE;
}
}

protected final void initNOREAD(String s) {
if (!s.trim().isEmpty()) {
NOREAD = Byte.parseByte(s);
} else {
NOREAD = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCBE(String s) {
if (!s.trim().isEmpty()) {
NOWTBCBE = Byte.parseByte(s);
} else {
NOWTBCBE = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCCH(String s) {
if (!s.trim().isEmpty()) {
NOWTBCCH = Byte.parseByte(s);
} else {
NOWTBCCH = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCHE(String s) {
if (!s.trim().isEmpty()) {
NOWTBCHE = Byte.parseByte(s);
} else {
NOWTBCHE = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCOT(String s) {
if (!s.trim().isEmpty()) {
NOWTBCOT = Byte.parseByte(s);
} else {
NOWTBCOT = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCPA(String s) {
if (!s.trim().isEmpty()) {
NOWTBCPA = Byte.parseByte(s);
} else {
NOWTBCPA = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCSC(String s) {
if (!s.trim().isEmpty()) {
NOWTBCSC = Byte.parseByte(s);
} else {
NOWTBCSC = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCSH(String s) {
if (!s.trim().isEmpty()) {
NOWTBCSH = Byte.parseByte(s);
} else {
NOWTBCSH = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCST(String s) {
if (!s.trim().isEmpty()) {
NOWTBCST = Byte.parseByte(s);
} else {
NOWTBCST = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCUN(String s) {
if (!s.trim().isEmpty()) {
NOWTBCUN = Byte.parseByte(s);
} else {
NOWTBCUN = Byte.MIN_VALUE;
}
}

protected final void initNPFFW(String s) {
if (!s.trim().isEmpty()) {
NPFFW = Byte.parseByte(s);
} else {
NPFFW = Byte.MIN_VALUE;
}
}

protected final void initNQVER(String s) {
if (!s.trim().isEmpty()) {
NQVER = s;
}
}

protected final void initNROW(String s) {
if (!s.trim().isEmpty()) {
NROW = Byte.parseByte(s);
} else {
NROW = Byte.MIN_VALUE;
}
}

protected final void initNROWCLM(String s) {
if (!s.trim().isEmpty()) {
NROWCLM = Short.parseShort(s);
} else {
NROWCLM = Short.MIN_VALUE;
}
}

protected final void initNSSEC(String s) {
if (!s.trim().isEmpty()) {
NSSEC = Double.parseDouble(s);
} else {
NSSEC = Double.NaN;
}
}

protected final void initORDCON(String s) {
if (!s.trim().isEmpty()) {
ORDCON = Byte.parseByte(s);
} else {
ORDCON = Byte.MIN_VALUE;
}
}

protected final void initORGANIS(String s) {
if (!s.trim().isEmpty()) {
ORGANIS = Byte.parseByte(s);
} else {
ORGANIS = Byte.MIN_VALUE;
}
}

protected final void initORGNO(String s) {
if (!s.trim().isEmpty()) {
ORGNO = Byte.parseByte(s);
} else {
ORGNO = Byte.MIN_VALUE;
}
}

protected final void initOUTHH(String s) {
if (!s.trim().isEmpty()) {
OUTHH = Short.parseShort(s);
} else {
OUTHH = Short.MIN_VALUE;
}
}

protected final void initOUTIND(String s) {
if (!s.trim().isEmpty()) {
OUTIND = Byte.parseByte(s);
} else {
OUTIND = Byte.MIN_VALUE;
}
}

protected final void initOUTSC(String s) {
if (!s.trim().isEmpty()) {
OUTSC = Byte.parseByte(s);
} else {
OUTSC = Byte.MIN_VALUE;
}
}

protected final void initPAINHH(String s) {
if (!s.trim().isEmpty()) {
PAINHH = Byte.parseByte(s);
} else {
PAINHH = Byte.MIN_VALUE;
}
}

protected final void initPALEVEL(String s) {
if (!s.trim().isEmpty()) {
PALEVEL = Byte.parseByte(s);
} else {
PALEVEL = Byte.MIN_VALUE;
}
}

protected final void initPC_P_F(String s) {
if (!s.trim().isEmpty()) {
PC_P_F = Byte.parseByte(s);
} else {
PC_P_F = Byte.MIN_VALUE;
}
}

protected final void initPC_P_I(String s) {
if (!s.trim().isEmpty()) {
PC_P_I = Double.parseDouble(s);
} else {
PC_P_I = Double.NaN;
}
}

protected final void initPC_P_O(String s) {
if (!s.trim().isEmpty()) {
PC_P_O = Short.parseShort(s);
} else {
PC_P_O = Short.MIN_VALUE;
}
}

protected final void initPC_P_T(String s) {
if (!s.trim().isEmpty()) {
PC_P_T = Short.parseShort(s);
} else {
PC_P_T = Short.MIN_VALUE;
}
}

protected final void initPC_R_F(String s) {
if (!s.trim().isEmpty()) {
PC_R_F = Byte.parseByte(s);
} else {
PC_R_F = Byte.MIN_VALUE;
}
}

protected final void initPC_R_I(String s) {
if (!s.trim().isEmpty()) {
PC_R_I = Double.parseDouble(s);
} else {
PC_R_I = Double.NaN;
}
}

protected final void initPC_R_O(String s) {
if (!s.trim().isEmpty()) {
PC_R_O = Short.parseShort(s);
} else {
PC_R_O = Short.MIN_VALUE;
}
}

protected final void initPC_R_T(String s) {
if (!s.trim().isEmpty()) {
PC_R_T = Short.parseShort(s);
} else {
PC_R_T = Short.MIN_VALUE;
}
}

protected final void initPENSION(String s) {
if (!s.trim().isEmpty()) {
PENSION = Byte.parseByte(s);
} else {
PENSION = Byte.MIN_VALUE;
}
}

protected final void initPF1(String s) {
if (!s.trim().isEmpty()) {
PF1 = Short.parseShort(s);
} else {
PF1 = Short.MIN_VALUE;
}
}

protected final void initPF2(String s) {
if (!s.trim().isEmpty()) {
PF2 = Short.parseShort(s);
} else {
PF2 = Short.MIN_VALUE;
}
}

protected final void initPF3(String s) {
if (!s.trim().isEmpty()) {
PF3 = Short.parseShort(s);
} else {
PF3 = Short.MIN_VALUE;
}
}

protected final void initPHLEGM(String s) {
if (!s.trim().isEmpty()) {
PHLEGM = Byte.parseByte(s);
} else {
PHLEGM = Byte.MIN_VALUE;
}
}

protected final void initPRIPENW_08(String s) {
if (!s.trim().isEmpty()) {
PRIPENW_08 = Double.parseDouble(s);
} else {
PRIPENW_08 = Double.NaN;
}
}

protected final void initPRIPENW_SPA(String s) {
if (!s.trim().isEmpty()) {
PRIPENW_SPA = Double.parseDouble(s);
} else {
PRIPENW_SPA = Double.NaN;
}
}

protected final void initPROBHJ(String s) {
if (!s.trim().isEmpty()) {
PROBHJ = Byte.parseByte(s);
} else {
PROBHJ = Byte.MIN_VALUE;
}
}

protected final void initPROBLFBR(String s) {
if (!s.trim().isEmpty()) {
PROBLFBR = Byte.parseByte(s);
} else {
PROBLFBR = Byte.MIN_VALUE;
}
}

protected final void initPROBLFCO(String s) {
if (!s.trim().isEmpty()) {
PROBLFCO = Byte.parseByte(s);
} else {
PROBLFCO = Byte.MIN_VALUE;
}
}

protected final void initPROBLFEQ(String s) {
if (!s.trim().isEmpty()) {
PROBLFEQ = Byte.parseByte(s);
} else {
PROBLFEQ = Byte.MIN_VALUE;
}
}

protected final void initPROBLFOT(String s) {
if (!s.trim().isEmpty()) {
PROBLFOT = Byte.parseByte(s);
} else {
PROBLFOT = Byte.MIN_VALUE;
}
}

protected final void initPROBLFRE(String s) {
if (!s.trim().isEmpty()) {
PROBLFRE = Byte.parseByte(s);
} else {
PROBLFRE = Byte.MIN_VALUE;
}
}

protected final void initPROBWJ(String s) {
if (!s.trim().isEmpty()) {
PROBWJ = Byte.parseByte(s);
} else {
PROBWJ = Byte.MIN_VALUE;
}
}

protected final void initPSAGF(String s) {
if (!s.trim().isEmpty()) {
PSAGF = Short.parseShort(s);
} else {
PSAGF = Short.MIN_VALUE;
}
}

protected final void initPSAGL(String s) {
if (!s.trim().isEmpty()) {
PSAGL = Short.parseShort(s);
} else {
PSAGL = Short.MIN_VALUE;
}
}

protected final void initPULSE1(String s) {
if (!s.trim().isEmpty()) {
PULSE1 = Short.parseShort(s);
} else {
PULSE1 = Short.MIN_VALUE;
}
}

protected final void initPULSE2(String s) {
if (!s.trim().isEmpty()) {
PULSE2 = Short.parseShort(s);
} else {
PULSE2 = Short.MIN_VALUE;
}
}

protected final void initPULSE3(String s) {
if (!s.trim().isEmpty()) {
PULSE3 = Short.parseShort(s);
} else {
PULSE3 = Short.MIN_VALUE;
}
}

protected final void initPULVAL(String s) {
if (!s.trim().isEmpty()) {
PULVAL = Double.parseDouble(s);
} else {
PULVAL = Double.NaN;
}
}

protected final void initQVER(String s) {
if (!s.trim().isEmpty()) {
QVER = s;
}
}

protected final void initREFBSCDI(String s) {
if (!s.trim().isEmpty()) {
REFBSCDI = Byte.parseByte(s);
} else {
REFBSCDI = Byte.MIN_VALUE;
}
}

protected final void initREFBSCHI(String s) {
if (!s.trim().isEmpty()) {
REFBSCHI = Byte.parseByte(s);
} else {
REFBSCHI = Byte.MIN_VALUE;
}
}

protected final void initREFBSCIL(String s) {
if (!s.trim().isEmpty()) {
REFBSCIL = Byte.parseByte(s);
} else {
REFBSCIL = Byte.MIN_VALUE;
}
}

protected final void initREFBSCNE(String s) {
if (!s.trim().isEmpty()) {
REFBSCNE = Byte.parseByte(s);
} else {
REFBSCNE = Byte.MIN_VALUE;
}
}

protected final void initREFBSCOT(String s) {
if (!s.trim().isEmpty()) {
REFBSCOT = Byte.parseByte(s);
} else {
REFBSCOT = Byte.MIN_VALUE;
}
}

protected final void initREFBSCTE(String s) {
if (!s.trim().isEmpty()) {
REFBSCTE = Byte.parseByte(s);
} else {
REFBSCTE = Byte.MIN_VALUE;
}
}

protected final void initRELHITE(String s) {
if (!s.trim().isEmpty()) {
RELHITE = Byte.parseByte(s);
} else {
RELHITE = Byte.MIN_VALUE;
}
}

protected final void initRELWAIT(String s) {
if (!s.trim().isEmpty()) {
RELWAIT = Byte.parseByte(s);
} else {
RELWAIT = Byte.MIN_VALUE;
}
}

protected final void initRESNHI(String s) {
if (!s.trim().isEmpty()) {
RESNHI = Byte.parseByte(s);
} else {
RESNHI = Byte.MIN_VALUE;
}
}

protected final void initRESNWT(String s) {
if (!s.trim().isEmpty()) {
RESNWT = Byte.parseByte(s);
} else {
RESNWT = Byte.MIN_VALUE;
}
}

protected final void initRESPBPS(String s) {
if (!s.trim().isEmpty()) {
RESPBPS = Byte.parseByte(s);
} else {
RESPBPS = Byte.MIN_VALUE;
}
}

protected final void initRESPHTS(String s) {
if (!s.trim().isEmpty()) {
RESPHTS = Byte.parseByte(s);
} else {
RESPHTS = Byte.MIN_VALUE;
}
}

protected final void initRESPWH(String s) {
if (!s.trim().isEmpty()) {
RESPWH = Byte.parseByte(s);
} else {
RESPWH = Byte.MIN_VALUE;
}
}

protected final void initRESPWTS(String s) {
if (!s.trim().isEmpty()) {
RESPWTS = Byte.parseByte(s);
} else {
RESPWTS = Byte.MIN_VALUE;
}
}

protected final void initRETAINEDDB_08(String s) {
if (!s.trim().isEmpty()) {
RETAINEDDB_08 = Double.parseDouble(s);
} else {
RETAINEDDB_08 = Double.NaN;
}
}

protected final void initRETAINEDDB_SPA(String s) {
if (!s.trim().isEmpty()) {
RETAINEDDB_SPA = Double.parseDouble(s);
} else {
RETAINEDDB_SPA = Double.NaN;
}
}

protected final void initRETAINEDDC_08(String s) {
if (!s.trim().isEmpty()) {
RETAINEDDC_08 = Double.parseDouble(s);
} else {
RETAINEDDC_08 = Double.NaN;
}
}

protected final void initRETAINEDDC_SPA(String s) {
if (!s.trim().isEmpty()) {
RETAINEDDC_SPA = Double.parseDouble(s);
} else {
RETAINEDDC_SPA = Double.NaN;
}
}

protected final void initRTIN(String s) {
if (!s.trim().isEmpty()) {
RTIN = Short.parseShort(s);
} else {
RTIN = Short.MIN_VALUE;
}
}

protected final void initSAMDIFFA(String s) {
if (!s.trim().isEmpty()) {
SAMDIFFA = Byte.parseByte(s);
} else {
SAMDIFFA = Byte.MIN_VALUE;
}
}

protected final void initSAMDIFIN(String s) {
if (!s.trim().isEmpty()) {
SAMDIFIN = Byte.parseByte(s);
} else {
SAMDIFIN = Byte.MIN_VALUE;
}
}

protected final void initSAMDIFNO(String s) {
if (!s.trim().isEmpty()) {
SAMDIFNO = Byte.parseByte(s);
} else {
SAMDIFNO = Byte.MIN_VALUE;
}
}

protected final void initSAMDIFOT(String s) {
if (!s.trim().isEmpty()) {
SAMDIFOT = Byte.parseByte(s);
} else {
SAMDIFOT = Byte.MIN_VALUE;
}
}

protected final void initSAMDIFSE(String s) {
if (!s.trim().isEmpty()) {
SAMDIFSE = Byte.parseByte(s);
} else {
SAMDIFSE = Byte.MIN_VALUE;
}
}

protected final void initSAMDIFTO(String s) {
if (!s.trim().isEmpty()) {
SAMDIFTO = Byte.parseByte(s);
} else {
SAMDIFTO = Byte.MIN_VALUE;
}
}

protected final void initSAMDIFVE(String s) {
if (!s.trim().isEmpty()) {
SAMDIFVE = Byte.parseByte(s);
} else {
SAMDIFVE = Byte.MIN_VALUE;
}
}

protected final void initSAMPTAK(String s) {
if (!s.trim().isEmpty()) {
SAMPTAK = Byte.parseByte(s);
} else {
SAMPTAK = Byte.MIN_VALUE;
}
}

protected final void initSAMPTYP(String s) {
if (!s.trim().isEmpty()) {
SAMPTYP = s;
}
}

protected final void initSCACTA(String s) {
if (!s.trim().isEmpty()) {
SCACTA = Byte.parseByte(s);
} else {
SCACTA = Byte.MIN_VALUE;
}
}

protected final void initSCACTB(String s) {
if (!s.trim().isEmpty()) {
SCACTB = Byte.parseByte(s);
} else {
SCACTB = Byte.MIN_VALUE;
}
}

protected final void initSCACTC(String s) {
if (!s.trim().isEmpty()) {
SCACTC = Byte.parseByte(s);
} else {
SCACTC = Byte.MIN_VALUE;
}
}

protected final void initSCACTD(String s) {
if (!s.trim().isEmpty()) {
SCACTD = Byte.parseByte(s);
} else {
SCACTD = Byte.MIN_VALUE;
}
}

protected final void initSCAKO(String s) {
if (!s.trim().isEmpty()) {
SCAKO = Byte.parseByte(s);
} else {
SCAKO = Byte.MIN_VALUE;
}
}

protected final void initSCAL7A(String s) {
if (!s.trim().isEmpty()) {
SCAL7A = Byte.parseByte(s);
} else {
SCAL7A = Byte.MIN_VALUE;
}
}

protected final void initSCAL7B(String s) {
if (!s.trim().isEmpty()) {
SCAL7B = Byte.parseByte(s);
} else {
SCAL7B = Byte.MIN_VALUE;
}
}

protected final void initSCDCA(String s) {
if (!s.trim().isEmpty()) {
SCDCA = Byte.parseByte(s);
} else {
SCDCA = Byte.MIN_VALUE;
}
}

protected final void initSCDCC(String s) {
if (!s.trim().isEmpty()) {
SCDCC = Byte.parseByte(s);
} else {
SCDCC = Byte.MIN_VALUE;
}
}

protected final void initSCDCD(String s) {
if (!s.trim().isEmpty()) {
SCDCD = Byte.parseByte(s);
} else {
SCDCD = Byte.MIN_VALUE;
}
}

protected final void initSCDCE(String s) {
if (!s.trim().isEmpty()) {
SCDCE = Byte.parseByte(s);
} else {
SCDCE = Byte.MIN_VALUE;
}
}

protected final void initSCDCG(String s) {
if (!s.trim().isEmpty()) {
SCDCG = Byte.parseByte(s);
} else {
SCDCG = Byte.MIN_VALUE;
}
}

protected final void initSCDRPIN(String s) {
if (!s.trim().isEmpty()) {
SCDRPIN = Byte.parseByte(s);
} else {
SCDRPIN = Byte.MIN_VALUE;
}
}

protected final void initSCDRSPI(String s) {
if (!s.trim().isEmpty()) {
SCDRSPI = Byte.parseByte(s);
} else {
SCDRSPI = Byte.MIN_VALUE;
}
}

protected final void initSCDRWIN(String s) {
if (!s.trim().isEmpty()) {
SCDRWIN = Byte.parseByte(s);
} else {
SCDRWIN = Byte.MIN_VALUE;
}
}

protected final void initSCEDCH(String s) {
if (!s.trim().isEmpty()) {
SCEDCH = Byte.parseByte(s);
} else {
SCEDCH = Byte.MIN_VALUE;
}
}

protected final void initSCEDCP(String s) {
if (!s.trim().isEmpty()) {
SCEDCP = Byte.parseByte(s);
} else {
SCEDCP = Byte.MIN_VALUE;
}
}

protected final void initSCEDCS(String s) {
if (!s.trim().isEmpty()) {
SCEDCS = Byte.parseByte(s);
} else {
SCEDCS = Byte.MIN_VALUE;
}
}

protected final void initSCEDDE(String s) {
if (!s.trim().isEmpty()) {
SCEDDE = Byte.parseByte(s);
} else {
SCEDDE = Byte.MIN_VALUE;
}
}

protected final void initSCEDGP(String s) {
if (!s.trim().isEmpty()) {
SCEDGP = Byte.parseByte(s);
} else {
SCEDGP = Byte.MIN_VALUE;
}
}

protected final void initSCEDHO(String s) {
if (!s.trim().isEmpty()) {
SCEDHO = Byte.parseByte(s);
} else {
SCEDHO = Byte.MIN_VALUE;
}
}

protected final void initSCEDOP(String s) {
if (!s.trim().isEmpty()) {
SCEDOP = Byte.parseByte(s);
} else {
SCEDOP = Byte.MIN_VALUE;
}
}

protected final void initSCEDPO(String s) {
if (!s.trim().isEmpty()) {
SCEDPO = Byte.parseByte(s);
} else {
SCEDPO = Byte.MIN_VALUE;
}
}

protected final void initSCEDSC(String s) {
if (!s.trim().isEmpty()) {
SCEDSC = Byte.parseByte(s);
} else {
SCEDSC = Byte.MIN_VALUE;
}
}

protected final void initSCEDSU(String s) {
if (!s.trim().isEmpty()) {
SCEDSU = Byte.parseByte(s);
} else {
SCEDSU = Byte.MIN_VALUE;
}
}

protected final void initSCEMPL(String s) {
if (!s.trim().isEmpty()) {
SCEMPL = Byte.parseByte(s);
} else {
SCEMPL = Byte.MIN_VALUE;
}
}

protected final void initSCFAFIN(String s) {
if (!s.trim().isEmpty()) {
SCFAFIN = Byte.parseByte(s);
} else {
SCFAFIN = Byte.MIN_VALUE;
}
}

protected final void initSCFAHAR(String s) {
if (!s.trim().isEmpty()) {
SCFAHAR = Byte.parseByte(s);
} else {
SCFAHAR = Byte.MIN_VALUE;
}
}

protected final void initSCFAMM(String s) {
if (!s.trim().isEmpty()) {
SCFAMM = Byte.parseByte(s);
} else {
SCFAMM = Byte.MIN_VALUE;
}
}

protected final void initSCFARES(String s) {
if (!s.trim().isEmpty()) {
SCFARES = Byte.parseByte(s);
} else {
SCFARES = Byte.MIN_VALUE;
}
}

protected final void initSCFASAC(String s) {
if (!s.trim().isEmpty()) {
SCFASAC = Byte.parseByte(s);
} else {
SCFASAC = Byte.MIN_VALUE;
}
}

protected final void initSCFEELA(String s) {
if (!s.trim().isEmpty()) {
SCFEELA = Byte.parseByte(s);
} else {
SCFEELA = Byte.MIN_VALUE;
}
}

protected final void initSCFEELB(String s) {
if (!s.trim().isEmpty()) {
SCFEELB = Byte.parseByte(s);
} else {
SCFEELB = Byte.MIN_VALUE;
}
}

protected final void initSCFEELC(String s) {
if (!s.trim().isEmpty()) {
SCFEELC = Byte.parseByte(s);
} else {
SCFEELC = Byte.MIN_VALUE;
}
}

protected final void initSCFEELD(String s) {
if (!s.trim().isEmpty()) {
SCFEELD = Byte.parseByte(s);
} else {
SCFEELD = Byte.MIN_VALUE;
}
}

protected final void initSCFEELE(String s) {
if (!s.trim().isEmpty()) {
SCFEELE = Byte.parseByte(s);
} else {
SCFEELE = Byte.MIN_VALUE;
}
}

protected final void initSCFMH(String s) {
if (!s.trim().isEmpty()) {
SCFMH = Byte.parseByte(s);
} else {
SCFMH = Byte.MIN_VALUE;
}
}

protected final void initSCFRDM(String s) {
if (!s.trim().isEmpty()) {
SCFRDM = Byte.parseByte(s);
} else {
SCFRDM = Byte.MIN_VALUE;
}
}

protected final void initSCFRFIN(String s) {
if (!s.trim().isEmpty()) {
SCFRFIN = Byte.parseByte(s);
} else {
SCFRFIN = Byte.MIN_VALUE;
}
}

protected final void initSCFRHAR(String s) {
if (!s.trim().isEmpty()) {
SCFRHAR = Byte.parseByte(s);
} else {
SCFRHAR = Byte.MIN_VALUE;
}
}

protected final void initSCFRRES(String s) {
if (!s.trim().isEmpty()) {
SCFRRES = Byte.parseByte(s);
} else {
SCFRRES = Byte.MIN_VALUE;
}
}

protected final void initSCFRSAC(String s) {
if (!s.trim().isEmpty()) {
SCFRSAC = Byte.parseByte(s);
} else {
SCFRSAC = Byte.MIN_VALUE;
}
}

protected final void initSCFRSHA(String s) {
if (!s.trim().isEmpty()) {
SCFRSHA = Byte.parseByte(s);
} else {
SCFRSHA = Byte.MIN_VALUE;
}
}

protected final void initSCFRUIA(String s) {
if (!s.trim().isEmpty()) {
SCFRUIA = Byte.parseByte(s);
} else {
SCFRUIA = Byte.MIN_VALUE;
}
}

protected final void initSCFRUIB(String s) {
if (!s.trim().isEmpty()) {
SCFRUIB = Byte.parseByte(s);
} else {
SCFRUIB = Byte.MIN_VALUE;
}
}

protected final void initSCFRUIC(String s) {
if (!s.trim().isEmpty()) {
SCFRUIC = Byte.parseByte(s);
} else {
SCFRUIC = Byte.MIN_VALUE;
}
}

protected final void initSCFRUID(String s) {
if (!s.trim().isEmpty()) {
SCFRUID = Byte.parseByte(s);
} else {
SCFRUID = Byte.MIN_VALUE;
}
}

protected final void initSCFRUIE(String s) {
if (!s.trim().isEmpty()) {
SCFRUIE = Byte.parseByte(s);
} else {
SCFRUIE = Byte.MIN_VALUE;
}
}

protected final void initSCFRUIF(String s) {
if (!s.trim().isEmpty()) {
SCFRUIF = Byte.parseByte(s);
} else {
SCFRUIF = Byte.MIN_VALUE;
}
}

protected final void initSCFRUIG(String s) {
if (!s.trim().isEmpty()) {
SCFRUIG = Byte.parseByte(s);
} else {
SCFRUIG = Byte.MIN_VALUE;
}
}

protected final void initSCFRUIH(String s) {
if (!s.trim().isEmpty()) {
SCFRUIH = Byte.parseByte(s);
} else {
SCFRUIH = Byte.MIN_VALUE;
}
}

protected final void initSCFRUII(String s) {
if (!s.trim().isEmpty()) {
SCFRUII = Byte.parseByte(s);
} else {
SCFRUII = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEA(String s) {
if (!s.trim().isEmpty()) {
SCLIFEA = Byte.parseByte(s);
} else {
SCLIFEA = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEB(String s) {
if (!s.trim().isEmpty()) {
SCLIFEB = Byte.parseByte(s);
} else {
SCLIFEB = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEC(String s) {
if (!s.trim().isEmpty()) {
SCLIFEC = Byte.parseByte(s);
} else {
SCLIFEC = Byte.MIN_VALUE;
}
}

protected final void initSCLIFED(String s) {
if (!s.trim().isEmpty()) {
SCLIFED = Byte.parseByte(s);
} else {
SCLIFED = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEE(String s) {
if (!s.trim().isEmpty()) {
SCLIFEE = Byte.parseByte(s);
} else {
SCLIFEE = Byte.MIN_VALUE;
}
}

protected final void initSCMOREA(String s) {
if (!s.trim().isEmpty()) {
SCMOREA = Byte.parseByte(s);
} else {
SCMOREA = Byte.MIN_VALUE;
}
}

protected final void initSCMOREB(String s) {
if (!s.trim().isEmpty()) {
SCMOREB = Byte.parseByte(s);
} else {
SCMOREB = Byte.MIN_VALUE;
}
}

protected final void initSCMOREC(String s) {
if (!s.trim().isEmpty()) {
SCMOREC = Byte.parseByte(s);
} else {
SCMOREC = Byte.MIN_VALUE;
}
}

protected final void initSCMORED(String s) {
if (!s.trim().isEmpty()) {
SCMORED = Byte.parseByte(s);
} else {
SCMORED = Byte.MIN_VALUE;
}
}

protected final void initSCORG01(String s) {
if (!s.trim().isEmpty()) {
SCORG01 = Byte.parseByte(s);
} else {
SCORG01 = Byte.MIN_VALUE;
}
}

protected final void initSCORG02(String s) {
if (!s.trim().isEmpty()) {
SCORG02 = Byte.parseByte(s);
} else {
SCORG02 = Byte.MIN_VALUE;
}
}

protected final void initSCORG03(String s) {
if (!s.trim().isEmpty()) {
SCORG03 = Byte.parseByte(s);
} else {
SCORG03 = Byte.MIN_VALUE;
}
}

protected final void initSCORG04(String s) {
if (!s.trim().isEmpty()) {
SCORG04 = Byte.parseByte(s);
} else {
SCORG04 = Byte.MIN_VALUE;
}
}

protected final void initSCORG05(String s) {
if (!s.trim().isEmpty()) {
SCORG05 = Byte.parseByte(s);
} else {
SCORG05 = Byte.MIN_VALUE;
}
}

protected final void initSCORG06(String s) {
if (!s.trim().isEmpty()) {
SCORG06 = Byte.parseByte(s);
} else {
SCORG06 = Byte.MIN_VALUE;
}
}

protected final void initSCORG07(String s) {
if (!s.trim().isEmpty()) {
SCORG07 = Byte.parseByte(s);
} else {
SCORG07 = Byte.MIN_VALUE;
}
}

protected final void initSCORG08(String s) {
if (!s.trim().isEmpty()) {
SCORG08 = Byte.parseByte(s);
} else {
SCORG08 = Byte.MIN_VALUE;
}
}

protected final void initSCORG09(String s) {
if (!s.trim().isEmpty()) {
SCORG09 = Byte.parseByte(s);
} else {
SCORG09 = Byte.MIN_VALUE;
}
}

protected final void initSCPT01(String s) {
if (!s.trim().isEmpty()) {
SCPT01 = Byte.parseByte(s);
} else {
SCPT01 = Byte.MIN_VALUE;
}
}

protected final void initSCPT02(String s) {
if (!s.trim().isEmpty()) {
SCPT02 = Byte.parseByte(s);
} else {
SCPT02 = Byte.MIN_VALUE;
}
}

protected final void initSCPT03(String s) {
if (!s.trim().isEmpty()) {
SCPT03 = Byte.parseByte(s);
} else {
SCPT03 = Byte.MIN_VALUE;
}
}

protected final void initSCPT04(String s) {
if (!s.trim().isEmpty()) {
SCPT04 = Byte.parseByte(s);
} else {
SCPT04 = Byte.MIN_VALUE;
}
}

protected final void initSCPT05(String s) {
if (!s.trim().isEmpty()) {
SCPT05 = Byte.parseByte(s);
} else {
SCPT05 = Byte.MIN_VALUE;
}
}

protected final void initSCPT06(String s) {
if (!s.trim().isEmpty()) {
SCPT06 = Byte.parseByte(s);
} else {
SCPT06 = Byte.MIN_VALUE;
}
}

protected final void initSCPT07(String s) {
if (!s.trim().isEmpty()) {
SCPT07 = Byte.parseByte(s);
} else {
SCPT07 = Byte.MIN_VALUE;
}
}

protected final void initSCPT08(String s) {
if (!s.trim().isEmpty()) {
SCPT08 = Byte.parseByte(s);
} else {
SCPT08 = Byte.MIN_VALUE;
}
}

protected final void initSCPTR(String s) {
if (!s.trim().isEmpty()) {
SCPTR = Byte.parseByte(s);
} else {
SCPTR = Byte.MIN_VALUE;
}
}

protected final void initSCPTRA(String s) {
if (!s.trim().isEmpty()) {
SCPTRA = Byte.parseByte(s);
} else {
SCPTRA = Byte.MIN_VALUE;
}
}

protected final void initSCPTRB(String s) {
if (!s.trim().isEmpty()) {
SCPTRB = Byte.parseByte(s);
} else {
SCPTRB = Byte.MIN_VALUE;
}
}

protected final void initSCPTRC(String s) {
if (!s.trim().isEmpty()) {
SCPTRC = Byte.parseByte(s);
} else {
SCPTRC = Byte.MIN_VALUE;
}
}

protected final void initSCPTRD(String s) {
if (!s.trim().isEmpty()) {
SCPTRD = Byte.parseByte(s);
} else {
SCPTRD = Byte.MIN_VALUE;
}
}

protected final void initSCPTRE(String s) {
if (!s.trim().isEmpty()) {
SCPTRE = Byte.parseByte(s);
} else {
SCPTRE = Byte.MIN_VALUE;
}
}

protected final void initSCPTRF(String s) {
if (!s.trim().isEmpty()) {
SCPTRF = Byte.parseByte(s);
} else {
SCPTRF = Byte.MIN_VALUE;
}
}

protected final void initSCPTRG(String s) {
if (!s.trim().isEmpty()) {
SCPTRG = Byte.parseByte(s);
} else {
SCPTRG = Byte.MIN_VALUE;
}
}

protected final void initSCRTAGE(String s) {
if (!s.trim().isEmpty()) {
SCRTAGE = Short.parseShort(s);
} else {
SCRTAGE = Short.MIN_VALUE;
}
}

protected final void initSCTVART(String s) {
if (!s.trim().isEmpty()) {
SCTVART = Byte.parseByte(s);
} else {
SCTVART = Byte.MIN_VALUE;
}
}

protected final void initSCTVCHA(String s) {
if (!s.trim().isEmpty()) {
SCTVCHA = Byte.parseByte(s);
} else {
SCTVCHA = Byte.MIN_VALUE;
}
}

protected final void initSCTVCOM(String s) {
if (!s.trim().isEmpty()) {
SCTVCOM = Byte.parseByte(s);
} else {
SCTVCOM = Byte.MIN_VALUE;
}
}

protected final void initSCTVDET(String s) {
if (!s.trim().isEmpty()) {
SCTVDET = Byte.parseByte(s);
} else {
SCTVDET = Byte.MIN_VALUE;
}
}

protected final void initSCTVDRA(String s) {
if (!s.trim().isEmpty()) {
SCTVDRA = Byte.parseByte(s);
} else {
SCTVDRA = Byte.MIN_VALUE;
}
}

protected final void initSCTVFIL(String s) {
if (!s.trim().isEmpty()) {
SCTVFIL = Byte.parseByte(s);
} else {
SCTVFIL = Byte.MIN_VALUE;
}
}

protected final void initSCTVGAR(String s) {
if (!s.trim().isEmpty()) {
SCTVGAR = Byte.parseByte(s);
} else {
SCTVGAR = Byte.MIN_VALUE;
}
}

protected final void initSCTVNAT(String s) {
if (!s.trim().isEmpty()) {
SCTVNAT = Byte.parseByte(s);
} else {
SCTVNAT = Byte.MIN_VALUE;
}
}

protected final void initSCTVNEW(String s) {
if (!s.trim().isEmpty()) {
SCTVNEW = Byte.parseByte(s);
} else {
SCTVNEW = Byte.MIN_VALUE;
}
}

protected final void initSCTVQUI(String s) {
if (!s.trim().isEmpty()) {
SCTVQUI = Byte.parseByte(s);
} else {
SCTVQUI = Byte.MIN_VALUE;
}
}

protected final void initSCTVRTV(String s) {
if (!s.trim().isEmpty()) {
SCTVRTV = Byte.parseByte(s);
} else {
SCTVRTV = Byte.MIN_VALUE;
}
}

protected final void initSCTVSOA(String s) {
if (!s.trim().isEmpty()) {
SCTVSOA = Byte.parseByte(s);
} else {
SCTVSOA = Byte.MIN_VALUE;
}
}

protected final void initSCTVSPO(String s) {
if (!s.trim().isEmpty()) {
SCTVSPO = Byte.parseByte(s);
} else {
SCTVSPO = Byte.MIN_VALUE;
}
}

protected final void initSCTVWKD(String s) {
if (!s.trim().isEmpty()) {
SCTVWKD = Byte.parseByte(s);
} else {
SCTVWKD = Byte.MIN_VALUE;
}
}

protected final void initSCTVWKE(String s) {
if (!s.trim().isEmpty()) {
SCTVWKE = Byte.parseByte(s);
} else {
SCTVWKE = Byte.MIN_VALUE;
}
}

protected final void initSCVEGA(String s) {
if (!s.trim().isEmpty()) {
SCVEGA = Byte.parseByte(s);
} else {
SCVEGA = Byte.MIN_VALUE;
}
}

protected final void initSCVEGB(String s) {
if (!s.trim().isEmpty()) {
SCVEGB = Byte.parseByte(s);
} else {
SCVEGB = Byte.MIN_VALUE;
}
}

protected final void initSCVEGC(String s) {
if (!s.trim().isEmpty()) {
SCVEGC = Byte.parseByte(s);
} else {
SCVEGC = Byte.MIN_VALUE;
}
}

protected final void initSCVEGD(String s) {
if (!s.trim().isEmpty()) {
SCVEGD = Byte.parseByte(s);
} else {
SCVEGD = Byte.MIN_VALUE;
}
}

protected final void initSCWILHE(String s) {
if (!s.trim().isEmpty()) {
SCWILHE = Byte.parseByte(s);
} else {
SCWILHE = Byte.MIN_VALUE;
}
}

protected final void initSCWILLE(String s) {
if (!s.trim().isEmpty()) {
SCWILLE = Byte.parseByte(s);
} else {
SCWILLE = Byte.MIN_VALUE;
}
}

protected final void initSCWILMI(String s) {
if (!s.trim().isEmpty()) {
SCWILMI = Byte.parseByte(s);
} else {
SCWILMI = Byte.MIN_VALUE;
}
}

protected final void initSCWILPA(String s) {
if (!s.trim().isEmpty()) {
SCWILPA = Byte.parseByte(s);
} else {
SCWILPA = Byte.MIN_VALUE;
}
}

protected final void initSCWILRU(String s) {
if (!s.trim().isEmpty()) {
SCWILRU = Byte.parseByte(s);
} else {
SCWILRU = Byte.MIN_VALUE;
}
}

protected final void initSCWORKA(String s) {
if (!s.trim().isEmpty()) {
SCWORKA = Byte.parseByte(s);
} else {
SCWORKA = Byte.MIN_VALUE;
}
}

protected final void initSCWORKB(String s) {
if (!s.trim().isEmpty()) {
SCWORKB = Byte.parseByte(s);
} else {
SCWORKB = Byte.MIN_VALUE;
}
}

protected final void initSCWORKC(String s) {
if (!s.trim().isEmpty()) {
SCWORKC = Byte.parseByte(s);
} else {
SCWORKC = Byte.MIN_VALUE;
}
}

protected final void initSCWORKD(String s) {
if (!s.trim().isEmpty()) {
SCWORKD = Byte.parseByte(s);
} else {
SCWORKD = Byte.MIN_VALUE;
}
}

protected final void initSCWORKE(String s) {
if (!s.trim().isEmpty()) {
SCWORKE = Byte.parseByte(s);
} else {
SCWORKE = Byte.MIN_VALUE;
}
}

protected final void initSCWORKF(String s) {
if (!s.trim().isEmpty()) {
SCWORKF = Byte.parseByte(s);
} else {
SCWORKF = Byte.MIN_VALUE;
}
}

protected final void initSCWORKG(String s) {
if (!s.trim().isEmpty()) {
SCWORKG = Byte.parseByte(s);
} else {
SCWORKG = Byte.MIN_VALUE;
}
}

protected final void initSCWORKH(String s) {
if (!s.trim().isEmpty()) {
SCWORKH = Byte.parseByte(s);
} else {
SCWORKH = Byte.MIN_VALUE;
}
}

protected final void initSCWORKI(String s) {
if (!s.trim().isEmpty()) {
SCWORKI = Byte.parseByte(s);
} else {
SCWORKI = Byte.MIN_VALUE;
}
}

protected final void initSCWORKJ(String s) {
if (!s.trim().isEmpty()) {
SCWORKJ = Byte.parseByte(s);
} else {
SCWORKJ = Byte.MIN_VALUE;
}
}

protected final void initSCWORKK(String s) {
if (!s.trim().isEmpty()) {
SCWORKK = Byte.parseByte(s);
} else {
SCWORKK = Byte.MIN_VALUE;
}
}

protected final void initSCWORKL(String s) {
if (!s.trim().isEmpty()) {
SCWORKL = Byte.parseByte(s);
} else {
SCWORKL = Byte.MIN_VALUE;
}
}

protected final void initSIC2003(String s) {
if (!s.trim().isEmpty()) {
SIC2003 = Byte.parseByte(s);
} else {
SIC2003 = Byte.MIN_VALUE;
}
}

protected final void initSIC2007(String s) {
if (!s.trim().isEmpty()) {
SIC2007 = Byte.parseByte(s);
} else {
SIC2007 = Byte.MIN_VALUE;
}
}

protected final void initSITHGT(String s) {
if (!s.trim().isEmpty()) {
SITHGT = Double.parseDouble(s);
} else {
SITHGT = Double.NaN;
}
}

protected final void initSITHTRS(String s) {
if (!s.trim().isEmpty()) {
SITHTRS = Byte.parseByte(s);
} else {
SITHTRS = Byte.MIN_VALUE;
}
}

protected final void initSPCARA(String s) {
if (!s.trim().isEmpty()) {
SPCARA = Byte.parseByte(s);
} else {
SPCARA = Byte.MIN_VALUE;
}
}

protected final void initSPCARB(String s) {
if (!s.trim().isEmpty()) {
SPCARB = Byte.parseByte(s);
} else {
SPCARB = Byte.MIN_VALUE;
}
}

protected final void initSPDTDT(String s) {
if (!s.trim().isEmpty()) {
SPDTDT = Byte.parseByte(s);
} else {
SPDTDT = Byte.MIN_VALUE;
}
}

protected final void initSPHOSP(String s) {
if (!s.trim().isEmpty()) {
SPHOSP = Byte.parseByte(s);
} else {
SPHOSP = Byte.MIN_VALUE;
}
}

protected final void initSPLIFT(String s) {
if (!s.trim().isEmpty()) {
SPLIFT = Byte.parseByte(s);
} else {
SPLIFT = Byte.MIN_VALUE;
}
}

protected final void initSPTAXI(String s) {
if (!s.trim().isEmpty()) {
SPTAXI = Byte.parseByte(s);
} else {
SPTAXI = Byte.MIN_VALUE;
}
}

protected final void initSPTR96(String s) {
if (!s.trim().isEmpty()) {
SPTR96 = Byte.parseByte(s);
} else {
SPTR96 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM95(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
SPTRAM95 = false;
} else {
SPTRAM95 = true;
}
}
}

protected final void initSPTRB95(String s) {
if (!s.trim().isEmpty()) {
SPTRB95 = Byte.parseByte(s);
} else {
SPTRB95 = Byte.MIN_VALUE;
}
}

protected final void initSPTRBCON(String s) {
if (!s.trim().isEmpty()) {
SPTRBCON = Byte.parseByte(s);
} else {
SPTRBCON = Byte.MIN_VALUE;
}
}

protected final void initSPTRBDES(String s) {
if (!s.trim().isEmpty()) {
SPTRBDES = Byte.parseByte(s);
} else {
SPTRBDES = Byte.MIN_VALUE;
}
}

protected final void initSPTRBDIR(String s) {
if (!s.trim().isEmpty()) {
SPTRBDIR = Byte.parseByte(s);
} else {
SPTRBDIR = Byte.MIN_VALUE;
}
}

protected final void initSPTRBEXP(String s) {
if (!s.trim().isEmpty()) {
SPTRBEXP = Byte.parseByte(s);
} else {
SPTRBEXP = Byte.MIN_VALUE;
}
}

protected final void initSPTRBFEA(String s) {
if (!s.trim().isEmpty()) {
SPTRBFEA = Byte.parseByte(s);
} else {
SPTRBFEA = Byte.MIN_VALUE;
}
}

protected final void initSPTRBFRE(String s) {
if (!s.trim().isEmpty()) {
SPTRBFRE = Byte.parseByte(s);
} else {
SPTRBFRE = Byte.MIN_VALUE;
}
}

protected final void initSPTRBHEA(String s) {
if (!s.trim().isEmpty()) {
SPTRBHEA = Byte.parseByte(s);
} else {
SPTRBHEA = Byte.MIN_VALUE;
}
}

protected final void initSPTRBNEE(String s) {
if (!s.trim().isEmpty()) {
SPTRBNEE = Byte.parseByte(s);
} else {
SPTRBNEE = Byte.MIN_VALUE;
}
}

protected final void initSPTRBUNA(String s) {
if (!s.trim().isEmpty()) {
SPTRBUNA = Byte.parseByte(s);
} else {
SPTRBUNA = Byte.MIN_VALUE;
}
}

protected final void initSPTRBUNR(String s) {
if (!s.trim().isEmpty()) {
SPTRBUNR = Byte.parseByte(s);
} else {
SPTRBUNR = Byte.MIN_VALUE;
}
}

protected final void initSPTRBWAL(String s) {
if (!s.trim().isEmpty()) {
SPTRBWAL = Byte.parseByte(s);
} else {
SPTRBWAL = Byte.MIN_VALUE;
}
}

protected final void initSPTRCARE(String s) {
if (!s.trim().isEmpty()) {
SPTRCARE = Byte.parseByte(s);
} else {
SPTRCARE = Byte.MIN_VALUE;
}
}

protected final void initSPTRCOM(String s) {
if (!s.trim().isEmpty()) {
SPTRCOM = Byte.parseByte(s);
} else {
SPTRCOM = Byte.MIN_VALUE;
}
}

protected final void initSPTRFAM(String s) {
if (!s.trim().isEmpty()) {
SPTRFAM = Byte.parseByte(s);
} else {
SPTRFAM = Byte.MIN_VALUE;
}
}

protected final void initSPTRHOS(String s) {
if (!s.trim().isEmpty()) {
SPTRHOS = Byte.parseByte(s);
} else {
SPTRHOS = Byte.MIN_VALUE;
}
}

protected final void initSPTRM85(String s) {
if (!s.trim().isEmpty()) {
SPTRM85 = Byte.parseByte(s);
} else {
SPTRM85 = Byte.MIN_VALUE;
}
}

protected final void initSPTRM86(String s) {
if (!s.trim().isEmpty()) {
SPTRM86 = Byte.parseByte(s);
} else {
SPTRM86 = Byte.MIN_VALUE;
}
}

protected final void initSPTRMCON(String s) {
if (!s.trim().isEmpty()) {
SPTRMCON = Byte.parseByte(s);
} else {
SPTRMCON = Byte.MIN_VALUE;
}
}

protected final void initSPTRMDES(String s) {
if (!s.trim().isEmpty()) {
SPTRMDES = Byte.parseByte(s);
} else {
SPTRMDES = Byte.MIN_VALUE;
}
}

protected final void initSPTRMDIR(String s) {
if (!s.trim().isEmpty()) {
SPTRMDIR = Byte.parseByte(s);
} else {
SPTRMDIR = Byte.MIN_VALUE;
}
}

protected final void initSPTRMEXP(String s) {
if (!s.trim().isEmpty()) {
SPTRMEXP = Byte.parseByte(s);
} else {
SPTRMEXP = Byte.MIN_VALUE;
}
}

protected final void initSPTRMFEA(String s) {
if (!s.trim().isEmpty()) {
SPTRMFEA = Byte.parseByte(s);
} else {
SPTRMFEA = Byte.MIN_VALUE;
}
}

protected final void initSPTRMFRE(String s) {
if (!s.trim().isEmpty()) {
SPTRMFRE = Byte.parseByte(s);
} else {
SPTRMFRE = Byte.MIN_VALUE;
}
}

protected final void initSPTRMHEA(String s) {
if (!s.trim().isEmpty()) {
SPTRMHEA = Byte.parseByte(s);
} else {
SPTRMHEA = Byte.MIN_VALUE;
}
}

protected final void initSPTRMNEE(String s) {
if (!s.trim().isEmpty()) {
SPTRMNEE = Byte.parseByte(s);
} else {
SPTRMNEE = Byte.MIN_VALUE;
}
}

protected final void initSPTRMUNA(String s) {
if (!s.trim().isEmpty()) {
SPTRMUNA = Byte.parseByte(s);
} else {
SPTRMUNA = Byte.MIN_VALUE;
}
}

protected final void initSPTRMUNR(String s) {
if (!s.trim().isEmpty()) {
SPTRMUNR = Byte.parseByte(s);
} else {
SPTRMUNR = Byte.MIN_VALUE;
}
}

protected final void initSPTRMWAL(String s) {
if (!s.trim().isEmpty()) {
SPTRMWAL = Byte.parseByte(s);
} else {
SPTRMWAL = Byte.MIN_VALUE;
}
}

protected final void initSPTRTAX(String s) {
if (!s.trim().isEmpty()) {
SPTRTAX = Byte.parseByte(s);
} else {
SPTRTAX = Byte.MIN_VALUE;
}
}

protected final void initSTPENW_08(String s) {
if (!s.trim().isEmpty()) {
STPENW_08 = Double.parseDouble(s);
} else {
STPENW_08 = Double.NaN;
}
}

protected final void initSTPENW_SPA(String s) {
if (!s.trim().isEmpty()) {
STPENW_SPA = Double.parseDouble(s);
} else {
STPENW_SPA = Double.NaN;
}
}

protected final void initSYS1(String s) {
if (!s.trim().isEmpty()) {
SYS1 = Short.parseShort(s);
} else {
SYS1 = Short.MIN_VALUE;
}
}

protected final void initSYS2(String s) {
if (!s.trim().isEmpty()) {
SYS2 = Short.parseShort(s);
} else {
SYS2 = Short.MIN_VALUE;
}
}

protected final void initSYS3(String s) {
if (!s.trim().isEmpty()) {
SYS3 = Short.parseShort(s);
} else {
SYS3 = Short.MIN_VALUE;
}
}

protected final void initSYSVAL(String s) {
if (!s.trim().isEmpty()) {
SYSVAL = Double.parseDouble(s);
} else {
SYSVAL = Double.NaN;
}
}

protected final void initTECHNI1(String s) {
if (!s.trim().isEmpty()) {
TECHNI1 = Byte.parseByte(s);
} else {
TECHNI1 = Byte.MIN_VALUE;
}
}

protected final void initTECHNI2(String s) {
if (!s.trim().isEmpty()) {
TECHNI2 = Byte.parseByte(s);
} else {
TECHNI2 = Byte.MIN_VALUE;
}
}

protected final void initTECHNI3(String s) {
if (!s.trim().isEmpty()) {
TECHNI3 = Byte.parseByte(s);
} else {
TECHNI3 = Byte.MIN_VALUE;
}
}

protected final void initTOTPENW_08(String s) {
if (!s.trim().isEmpty()) {
TOTPENW_08 = Double.parseDouble(s);
} else {
TOTPENW_08 = Double.NaN;
}
}

protected final void initTOTPENW_SPA(String s) {
if (!s.trim().isEmpty()) {
TOTPENW_SPA = Double.parseDouble(s);
} else {
TOTPENW_SPA = Double.NaN;
}
}

protected final void initTRIG(String s) {
if (!s.trim().isEmpty()) {
TRIG = Double.parseDouble(s);
} else {
TRIG = Double.NaN;
}
}

protected final void initVISMON(String s) {
if (!s.trim().isEmpty()) {
VISMON = Byte.parseByte(s);
} else {
VISMON = Byte.MIN_VALUE;
}
}

protected final void initVISYEAR(String s) {
if (!s.trim().isEmpty()) {
VISYEAR = Short.parseShort(s);
} else {
VISYEAR = Short.MIN_VALUE;
}
}

protected final void initW4BLDWT(String s) {
if (!s.trim().isEmpty()) {
W4BLDWT = Double.parseDouble(s);
} else {
W4BLDWT = Double.NaN;
}
}

protected final void initW4EDQUAL(String s) {
if (!s.trim().isEmpty()) {
W4EDQUAL = Byte.parseByte(s);
} else {
W4EDQUAL = Byte.MIN_VALUE;
}
}

protected final void initW4LWGT(String s) {
if (!s.trim().isEmpty()) {
W4LWGT = Double.parseDouble(s);
} else {
W4LWGT = Double.NaN;
}
}

protected final void initW4NSSEC(String s) {
if (!s.trim().isEmpty()) {
W4NSSEC = Double.parseDouble(s);
} else {
W4NSSEC = Double.NaN;
}
}

protected final void initW4NSSEC13(String s) {
if (!s.trim().isEmpty()) {
W4NSSEC13 = Double.parseDouble(s);
} else {
W4NSSEC13 = Double.NaN;
}
}

protected final void initW4NSSEC3(String s) {
if (!s.trim().isEmpty()) {
W4NSSEC3 = Byte.parseByte(s);
} else {
W4NSSEC3 = Byte.MIN_VALUE;
}
}

protected final void initW4NSSEC5(String s) {
if (!s.trim().isEmpty()) {
W4NSSEC5 = Byte.parseByte(s);
} else {
W4NSSEC5 = Byte.MIN_VALUE;
}
}

protected final void initW4NSSEC8(String s) {
if (!s.trim().isEmpty()) {
W4NSSEC8 = Byte.parseByte(s);
} else {
W4NSSEC8 = Byte.MIN_VALUE;
}
}

protected final void initW4NURWT(String s) {
if (!s.trim().isEmpty()) {
W4NURWT = Double.parseDouble(s);
} else {
W4NURWT = Double.NaN;
}
}

protected final void initW4SCWT(String s) {
if (!s.trim().isEmpty()) {
W4SCWT = Double.parseDouble(s);
} else {
W4SCWT = Double.NaN;
}
}

protected final void initW4SEC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
W4SEC = false;
} else {
W4SEC = true;
}
}
}

protected final void initW4SIC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
W4SIC = false;
} else {
W4SIC = true;
}
}
}

protected final void initW4SIC2003(String s) {
if (!s.trim().isEmpty()) {
W4SIC2003 = Byte.parseByte(s);
} else {
W4SIC2003 = Byte.MIN_VALUE;
}
}

protected final void initW4SOC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
W4SOC = false;
} else {
W4SOC = true;
}
}
}

protected final void initW4SOC2000(String s) {
if (!s.trim().isEmpty()) {
W4SOC2000 = Byte.parseByte(s);
} else {
W4SOC2000 = Byte.MIN_VALUE;
}
}

protected final void initW4XWGT(String s) {
if (!s.trim().isEmpty()) {
W4XWGT = Double.parseDouble(s);
} else {
W4XWGT = Double.NaN;
}
}

protected final void initWAIST1(String s) {
if (!s.trim().isEmpty()) {
WAIST1 = Double.parseDouble(s);
} else {
WAIST1 = Double.NaN;
}
}

protected final void initWAIST2(String s) {
if (!s.trim().isEmpty()) {
WAIST2 = Double.parseDouble(s);
} else {
WAIST2 = Double.NaN;
}
}

protected final void initWAIST3(String s) {
if (!s.trim().isEmpty()) {
WAIST3 = Double.parseDouble(s);
} else {
WAIST3 = Double.NaN;
}
}

protected final void initWBC(String s) {
if (!s.trim().isEmpty()) {
WBC = Double.parseDouble(s);
} else {
WBC = Double.NaN;
}
}

protected final void initWEIGHT(String s) {
if (!s.trim().isEmpty()) {
WEIGHT = Double.parseDouble(s);
} else {
WEIGHT = Double.NaN;
}
}

protected final void initWHATEAT(String s) {
if (!s.trim().isEmpty()) {
WHATEAT = Byte.parseByte(s);
} else {
WHATEAT = Byte.MIN_VALUE;
}
}

protected final void initWHOKB(String s) {
if (!s.trim().isEmpty()) {
WHOKB = Byte.parseByte(s);
} else {
WHOKB = Byte.MIN_VALUE;
}
}

protected final void initWHOSO4(String s) {
if (!s.trim().isEmpty()) {
WHOSO4 = Byte.parseByte(s);
} else {
WHOSO4 = Byte.MIN_VALUE;
}
}

protected final void initWHOSO5(String s) {
if (!s.trim().isEmpty()) {
WHOSO5 = Byte.parseByte(s);
} else {
WHOSO5 = Byte.MIN_VALUE;
}
}

protected final void initWHPNABBE(String s) {
if (!s.trim().isEmpty()) {
WHPNABBE = Byte.parseByte(s);
} else {
WHPNABBE = Byte.MIN_VALUE;
}
}

protected final void initWHPNABBU(String s) {
if (!s.trim().isEmpty()) {
WHPNABBU = Byte.parseByte(s);
} else {
WHPNABBU = Byte.MIN_VALUE;
}
}

protected final void initWHPNABCH(String s) {
if (!s.trim().isEmpty()) {
WHPNABCH = Byte.parseByte(s);
} else {
WHPNABCH = Byte.MIN_VALUE;
}
}

protected final void initWHPNABEM(String s) {
if (!s.trim().isEmpty()) {
WHPNABEM = Byte.parseByte(s);
} else {
WHPNABEM = Byte.MIN_VALUE;
}
}

protected final void initWHPNABOT(String s) {
if (!s.trim().isEmpty()) {
WHPNABOT = Byte.parseByte(s);
} else {
WHPNABOT = Byte.MIN_VALUE;
}
}

protected final void initWHPNABPR(String s) {
if (!s.trim().isEmpty()) {
WHPNABPR = Byte.parseByte(s);
} else {
WHPNABPR = Byte.MIN_VALUE;
}
}

protected final void initWHPNABST(String s) {
if (!s.trim().isEmpty()) {
WHPNABST = Byte.parseByte(s);
} else {
WHPNABST = Byte.MIN_VALUE;
}
}

protected final void initWHVAL(String s) {
if (!s.trim().isEmpty()) {
WHVAL = Double.parseDouble(s);
} else {
WHVAL = Double.NaN;
}
}

protected final void initWHWILL(String s) {
if (!s.trim().isEmpty()) {
WHWILL = Byte.parseByte(s);
} else {
WHWILL = Byte.MIN_VALUE;
}
}

protected final void initWHYNOBP(String s) {
if (!s.trim().isEmpty()) {
WHYNOBP = Byte.parseByte(s);
} else {
WHYNOBP = Byte.MIN_VALUE;
}
}

protected final void initWIDPEN_08(String s) {
if (!s.trim().isEmpty()) {
WIDPEN_08 = Double.parseDouble(s);
} else {
WIDPEN_08 = Double.NaN;
}
}

protected final void initWIDPEN_SPA(String s) {
if (!s.trim().isEmpty()) {
WIDPEN_SPA = Double.parseDouble(s);
} else {
WIDPEN_SPA = Double.NaN;
}
}

protected final void initWJREL(String s) {
if (!s.trim().isEmpty()) {
WJREL = Byte.parseByte(s);
} else {
WJREL = Byte.MIN_VALUE;
}
}

protected final void initWP1Q(String s) {
if (!s.trim().isEmpty()) {
WP1Q = Integer.parseInt(s);
} else {
WP1Q = Integer.MIN_VALUE;
}
}

protected final void initWP1SQ(String s) {
if (!s.trim().isEmpty()) {
WP1SQ = Integer.parseInt(s);
} else {
WP1SQ = Integer.MIN_VALUE;
}
}

protected final void initWP2Q(String s) {
if (!s.trim().isEmpty()) {
WP2Q = Integer.parseInt(s);
} else {
WP2Q = Integer.MIN_VALUE;
}
}

protected final void initWP2SQ(String s) {
if (!s.trim().isEmpty()) {
WP2SQ = Integer.parseInt(s);
} else {
WP2SQ = Integer.MIN_VALUE;
}
}

protected final void initWP3Q(String s) {
if (!s.trim().isEmpty()) {
WP3Q = Integer.parseInt(s);
} else {
WP3Q = Integer.MIN_VALUE;
}
}

protected final void initWP3SQ(String s) {
if (!s.trim().isEmpty()) {
WP3SQ = Integer.parseInt(s);
} else {
WP3SQ = Integer.MIN_VALUE;
}
}

protected final void initWPAC2(String s) {
if (!s.trim().isEmpty()) {
WPAC2 = Integer.parseInt(s);
} else {
WPAC2 = Integer.MIN_VALUE;
}
}

protected final void initWPAC3(String s) {
if (!s.trim().isEmpty()) {
WPAC3 = Short.parseShort(s);
} else {
WPAC3 = Short.MIN_VALUE;
}
}

protected final void initWPAC4(String s) {
if (!s.trim().isEmpty()) {
WPAC4 = Integer.parseInt(s);
} else {
WPAC4 = Integer.MIN_VALUE;
}
}

protected final void initWPAC5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAC5 = false;
} else {
WPAC5 = true;
}
}
}

protected final void initWPAC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAC6 = false;
} else {
WPAC6 = true;
}
}
}

protected final void initWPAC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAC7 = false;
} else {
WPAC7 = true;
}
}
}

protected final void initWPACHG(String s) {
if (!s.trim().isEmpty()) {
WPACHG = Byte.parseByte(s);
} else {
WPACHG = Byte.MIN_VALUE;
}
}

protected final void initWPACOA2(String s) {
if (!s.trim().isEmpty()) {
WPACOA2 = Byte.parseByte(s);
} else {
WPACOA2 = Byte.MIN_VALUE;
}
}

protected final void initWPACOA3(String s) {
if (!s.trim().isEmpty()) {
WPACOA3 = Byte.parseByte(s);
} else {
WPACOA3 = Byte.MIN_VALUE;
}
}

protected final void initWPACOA4(String s) {
if (!s.trim().isEmpty()) {
WPACOA4 = Byte.parseByte(s);
} else {
WPACOA4 = Byte.MIN_VALUE;
}
}

protected final void initWPACOA5(String s) {
if (!s.trim().isEmpty()) {
WPACOA5 = Byte.parseByte(s);
} else {
WPACOA5 = Byte.MIN_VALUE;
}
}

protected final void initWPACOA6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACOA6 = false;
} else {
WPACOA6 = true;
}
}
}

protected final void initWPACOA7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACOA7 = false;
} else {
WPACOA7 = true;
}
}
}

protected final void initWPACOB2(String s) {
if (!s.trim().isEmpty()) {
WPACOB2 = Short.parseShort(s);
} else {
WPACOB2 = Short.MIN_VALUE;
}
}

protected final void initWPACOB3(String s) {
if (!s.trim().isEmpty()) {
WPACOB3 = Short.parseShort(s);
} else {
WPACOB3 = Short.MIN_VALUE;
}
}

protected final void initWPACOB4(String s) {
if (!s.trim().isEmpty()) {
WPACOB4 = Short.parseShort(s);
} else {
WPACOB4 = Short.MIN_VALUE;
}
}

protected final void initWPACOB5(String s) {
if (!s.trim().isEmpty()) {
WPACOB5 = Short.parseShort(s);
} else {
WPACOB5 = Short.MIN_VALUE;
}
}

protected final void initWPACOB6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACOB6 = false;
} else {
WPACOB6 = true;
}
}
}

protected final void initWPACOB7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACOB7 = false;
} else {
WPACOB7 = true;
}
}
}

protected final void initWPACOC2(String s) {
if (!s.trim().isEmpty()) {
WPACOC2 = Byte.parseByte(s);
} else {
WPACOC2 = Byte.MIN_VALUE;
}
}

protected final void initWPACOC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACOC3 = false;
} else {
WPACOC3 = true;
}
}
}

protected final void initWPACOC4(String s) {
if (!s.trim().isEmpty()) {
WPACOC4 = Byte.parseByte(s);
} else {
WPACOC4 = Byte.MIN_VALUE;
}
}

protected final void initWPACOC5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACOC5 = false;
} else {
WPACOC5 = true;
}
}
}

protected final void initWPACOC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACOC6 = false;
} else {
WPACOC6 = true;
}
}
}

protected final void initWPACOC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACOC7 = false;
} else {
WPACOC7 = true;
}
}
}

protected final void initWPACON2(String s) {
if (!s.trim().isEmpty()) {
WPACON2 = Byte.parseByte(s);
} else {
WPACON2 = Byte.MIN_VALUE;
}
}

protected final void initWPACON3(String s) {
if (!s.trim().isEmpty()) {
WPACON3 = Byte.parseByte(s);
} else {
WPACON3 = Byte.MIN_VALUE;
}
}

protected final void initWPACON4(String s) {
if (!s.trim().isEmpty()) {
WPACON4 = Byte.parseByte(s);
} else {
WPACON4 = Byte.MIN_VALUE;
}
}

protected final void initWPACON5(String s) {
if (!s.trim().isEmpty()) {
WPACON5 = Byte.parseByte(s);
} else {
WPACON5 = Byte.MIN_VALUE;
}
}

protected final void initWPACON6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACON6 = false;
} else {
WPACON6 = true;
}
}
}

protected final void initWPACON7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPACON7 = false;
} else {
WPACON7 = true;
}
}
}

protected final void initWPACT96(String s) {
if (!s.trim().isEmpty()) {
WPACT96 = Byte.parseByte(s);
} else {
WPACT96 = Byte.MIN_VALUE;
}
}

protected final void initWPACTCA(String s) {
if (!s.trim().isEmpty()) {
WPACTCA = Byte.parseByte(s);
} else {
WPACTCA = Byte.MIN_VALUE;
}
}

protected final void initWPACTED(String s) {
if (!s.trim().isEmpty()) {
WPACTED = Byte.parseByte(s);
} else {
WPACTED = Byte.MIN_VALUE;
}
}

protected final void initWPACTLO(String s) {
if (!s.trim().isEmpty()) {
WPACTLO = Byte.parseByte(s);
} else {
WPACTLO = Byte.MIN_VALUE;
}
}

protected final void initWPACTPW(String s) {
if (!s.trim().isEmpty()) {
WPACTPW = Byte.parseByte(s);
} else {
WPACTPW = Byte.MIN_VALUE;
}
}

protected final void initWPACTSE(String s) {
if (!s.trim().isEmpty()) {
WPACTSE = Byte.parseByte(s);
} else {
WPACTSE = Byte.MIN_VALUE;
}
}

protected final void initWPACTVW(String s) {
if (!s.trim().isEmpty()) {
WPACTVW = Byte.parseByte(s);
} else {
WPACTVW = Byte.MIN_VALUE;
}
}

protected final void initWPADY2(String s) {
if (!s.trim().isEmpty()) {
WPADY2 = Byte.parseByte(s);
} else {
WPADY2 = Byte.MIN_VALUE;
}
}

protected final void initWPADY3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPADY3 = false;
} else {
WPADY3 = true;
}
}
}

protected final void initWPADY4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPADY4 = false;
} else {
WPADY4 = true;
}
}
}

protected final void initWPADY5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPADY5 = false;
} else {
WPADY5 = true;
}
}
}

protected final void initWPADY6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPADY6 = false;
} else {
WPADY6 = true;
}
}
}

protected final void initWPADY7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPADY7 = false;
} else {
WPADY7 = true;
}
}
}

protected final void initWPAECP(String s) {
if (!s.trim().isEmpty()) {
WPAECP = Short.parseShort(s);
} else {
WPAECP = Short.MIN_VALUE;
}
}

protected final void initWPAECP2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAECP2 = false;
} else {
WPAECP2 = true;
}
}
}

protected final void initWPAECP3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAECP3 = false;
} else {
WPAECP3 = true;
}
}
}

protected final void initWPAECP4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAECP4 = false;
} else {
WPAECP4 = true;
}
}
}

protected final void initWPAECP5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAECP5 = false;
} else {
WPAECP5 = true;
}
}
}

protected final void initWPAECP6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAECP6 = false;
} else {
WPAECP6 = true;
}
}
}

protected final void initWPAECP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAECP7 = false;
} else {
WPAECP7 = true;
}
}
}

protected final void initWPAMEC2(String s) {
if (!s.trim().isEmpty()) {
WPAMEC2 = Short.parseShort(s);
} else {
WPAMEC2 = Short.MIN_VALUE;
}
}

protected final void initWPAMEC3(String s) {
if (!s.trim().isEmpty()) {
WPAMEC3 = Short.parseShort(s);
} else {
WPAMEC3 = Short.MIN_VALUE;
}
}

protected final void initWPAMEC4(String s) {
if (!s.trim().isEmpty()) {
WPAMEC4 = Short.parseShort(s);
} else {
WPAMEC4 = Short.MIN_VALUE;
}
}

protected final void initWPAMEC5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAMEC5 = false;
} else {
WPAMEC5 = true;
}
}
}

protected final void initWPAMEC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAMEC6 = false;
} else {
WPAMEC6 = true;
}
}
}

protected final void initWPAMEC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAMEC7 = false;
} else {
WPAMEC7 = true;
}
}
}

protected final void initWPANYP(String s) {
if (!s.trim().isEmpty()) {
WPANYP = Byte.parseByte(s);
} else {
WPANYP = Byte.MIN_VALUE;
}
}

protected final void initWPAOTFE(String s) {
if (!s.trim().isEmpty()) {
WPAOTFE = Byte.parseByte(s);
} else {
WPAOTFE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTFL(String s) {
if (!s.trim().isEmpty()) {
WPAOTFL = Short.parseShort(s);
} else {
WPAOTFL = Short.MIN_VALUE;
}
}

protected final void initWPAOTFR(String s) {
if (!s.trim().isEmpty()) {
WPAOTFR = Byte.parseByte(s);
} else {
WPAOTFR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTFU(String s) {
if (!s.trim().isEmpty()) {
WPAOTFU = Short.parseShort(s);
} else {
WPAOTFU = Short.MIN_VALUE;
}
}

protected final void initWPAOTME(String s) {
if (!s.trim().isEmpty()) {
WPAOTME = Byte.parseByte(s);
} else {
WPAOTME = Byte.MIN_VALUE;
}
}

protected final void initWPAOTML(String s) {
if (!s.trim().isEmpty()) {
WPAOTML = Short.parseShort(s);
} else {
WPAOTML = Short.MIN_VALUE;
}
}

protected final void initWPAOTMR(String s) {
if (!s.trim().isEmpty()) {
WPAOTMR = Byte.parseByte(s);
} else {
WPAOTMR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTMU(String s) {
if (!s.trim().isEmpty()) {
WPAOTMU = Short.parseShort(s);
} else {
WPAOTMU = Short.MIN_VALUE;
}
}

protected final void initWPAOTOE(String s) {
if (!s.trim().isEmpty()) {
WPAOTOE = Byte.parseByte(s);
} else {
WPAOTOE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTOL(String s) {
if (!s.trim().isEmpty()) {
WPAOTOL = Short.parseShort(s);
} else {
WPAOTOL = Short.MIN_VALUE;
}
}

protected final void initWPAOTOR(String s) {
if (!s.trim().isEmpty()) {
WPAOTOR = Byte.parseByte(s);
} else {
WPAOTOR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTOU(String s) {
if (!s.trim().isEmpty()) {
WPAOTOU = Short.parseShort(s);
} else {
WPAOTOU = Short.MIN_VALUE;
}
}

protected final void initWPAOTWE(String s) {
if (!s.trim().isEmpty()) {
WPAOTWE = Byte.parseByte(s);
} else {
WPAOTWE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTWL(String s) {
if (!s.trim().isEmpty()) {
WPAOTWL = Short.parseShort(s);
} else {
WPAOTWL = Short.MIN_VALUE;
}
}

protected final void initWPAOTWR(String s) {
if (!s.trim().isEmpty()) {
WPAOTWR = Byte.parseByte(s);
} else {
WPAOTWR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTWU(String s) {
if (!s.trim().isEmpty()) {
WPAOTWU = Short.parseShort(s);
} else {
WPAOTWU = Short.MIN_VALUE;
}
}

protected final void initWPAOTYE(String s) {
if (!s.trim().isEmpty()) {
WPAOTYE = Byte.parseByte(s);
} else {
WPAOTYE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTYL(String s) {
if (!s.trim().isEmpty()) {
WPAOTYL = Integer.parseInt(s);
} else {
WPAOTYL = Integer.MIN_VALUE;
}
}

protected final void initWPAOTYR(String s) {
if (!s.trim().isEmpty()) {
WPAOTYR = Byte.parseByte(s);
} else {
WPAOTYR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTYU(String s) {
if (!s.trim().isEmpty()) {
WPAOTYU = Integer.parseInt(s);
} else {
WPAOTYU = Integer.MIN_VALUE;
}
}

protected final void initWPAPF2(String s) {
if (!s.trim().isEmpty()) {
WPAPF2 = Integer.parseInt(s);
} else {
WPAPF2 = Integer.MIN_VALUE;
}
}

protected final void initWPAPF2E(String s) {
if (!s.trim().isEmpty()) {
WPAPF2E = Byte.parseByte(s);
} else {
WPAPF2E = Byte.MIN_VALUE;
}
}

protected final void initWPAPF2L(String s) {
if (!s.trim().isEmpty()) {
WPAPF2L = Integer.parseInt(s);
} else {
WPAPF2L = Integer.MIN_VALUE;
}
}

protected final void initWPAPF2R(String s) {
if (!s.trim().isEmpty()) {
WPAPF2R = Byte.parseByte(s);
} else {
WPAPF2R = Byte.MIN_VALUE;
}
}

protected final void initWPAPF2U(String s) {
if (!s.trim().isEmpty()) {
WPAPF2U = Integer.parseInt(s);
} else {
WPAPF2U = Integer.MIN_VALUE;
}
}

protected final void initWPAPF3(String s) {
if (!s.trim().isEmpty()) {
WPAPF3 = Integer.parseInt(s);
} else {
WPAPF3 = Integer.MIN_VALUE;
}
}

protected final void initWPAPF3E(String s) {
if (!s.trim().isEmpty()) {
WPAPF3E = Byte.parseByte(s);
} else {
WPAPF3E = Byte.MIN_VALUE;
}
}

protected final void initWPAPF3L(String s) {
if (!s.trim().isEmpty()) {
WPAPF3L = Integer.parseInt(s);
} else {
WPAPF3L = Integer.MIN_VALUE;
}
}

protected final void initWPAPF3R(String s) {
if (!s.trim().isEmpty()) {
WPAPF3R = Byte.parseByte(s);
} else {
WPAPF3R = Byte.MIN_VALUE;
}
}

protected final void initWPAPF3U(String s) {
if (!s.trim().isEmpty()) {
WPAPF3U = Integer.parseInt(s);
} else {
WPAPF3U = Integer.MIN_VALUE;
}
}

protected final void initWPAPF4(String s) {
if (!s.trim().isEmpty()) {
WPAPF4 = Integer.parseInt(s);
} else {
WPAPF4 = Integer.MIN_VALUE;
}
}

protected final void initWPAPF4E(String s) {
if (!s.trim().isEmpty()) {
WPAPF4E = Byte.parseByte(s);
} else {
WPAPF4E = Byte.MIN_VALUE;
}
}

protected final void initWPAPF4L(String s) {
if (!s.trim().isEmpty()) {
WPAPF4L = Integer.parseInt(s);
} else {
WPAPF4L = Integer.MIN_VALUE;
}
}

protected final void initWPAPF4R(String s) {
if (!s.trim().isEmpty()) {
WPAPF4R = Byte.parseByte(s);
} else {
WPAPF4R = Byte.MIN_VALUE;
}
}

protected final void initWPAPF4U(String s) {
if (!s.trim().isEmpty()) {
WPAPF4U = Integer.parseInt(s);
} else {
WPAPF4U = Integer.MIN_VALUE;
}
}

protected final void initWPAPF5(String s) {
if (!s.trim().isEmpty()) {
WPAPF5 = Integer.parseInt(s);
} else {
WPAPF5 = Integer.MIN_VALUE;
}
}

protected final void initWPAPF5E(String s) {
if (!s.trim().isEmpty()) {
WPAPF5E = Byte.parseByte(s);
} else {
WPAPF5E = Byte.MIN_VALUE;
}
}

protected final void initWPAPF5L(String s) {
if (!s.trim().isEmpty()) {
WPAPF5L = Integer.parseInt(s);
} else {
WPAPF5L = Integer.MIN_VALUE;
}
}

protected final void initWPAPF5R(String s) {
if (!s.trim().isEmpty()) {
WPAPF5R = Byte.parseByte(s);
} else {
WPAPF5R = Byte.MIN_VALUE;
}
}

protected final void initWPAPF5U(String s) {
if (!s.trim().isEmpty()) {
WPAPF5U = Integer.parseInt(s);
} else {
WPAPF5U = Integer.MIN_VALUE;
}
}

protected final void initWPAPF6(String s) {
if (!s.trim().isEmpty()) {
WPAPF6 = Integer.parseInt(s);
} else {
WPAPF6 = Integer.MIN_VALUE;
}
}

protected final void initWPAPF6E(String s) {
if (!s.trim().isEmpty()) {
WPAPF6E = Byte.parseByte(s);
} else {
WPAPF6E = Byte.MIN_VALUE;
}
}

protected final void initWPAPF6L(String s) {
if (!s.trim().isEmpty()) {
WPAPF6L = Short.parseShort(s);
} else {
WPAPF6L = Short.MIN_VALUE;
}
}

protected final void initWPAPF6R(String s) {
if (!s.trim().isEmpty()) {
WPAPF6R = Byte.parseByte(s);
} else {
WPAPF6R = Byte.MIN_VALUE;
}
}

protected final void initWPAPF6U(String s) {
if (!s.trim().isEmpty()) {
WPAPF6U = Integer.parseInt(s);
} else {
WPAPF6U = Integer.MIN_VALUE;
}
}

protected final void initWPAPF7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPAPF7 = false;
} else {
WPAPF7 = true;
}
}
}

protected final void initWPAPF7E(String s) {
if (!s.trim().isEmpty()) {
WPAPF7E = Byte.parseByte(s);
} else {
WPAPF7E = Byte.MIN_VALUE;
}
}

protected final void initWPAPF7L(String s) {
if (!s.trim().isEmpty()) {
WPAPF7L = Short.parseShort(s);
} else {
WPAPF7L = Short.MIN_VALUE;
}
}

protected final void initWPAPF7R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPAPF7R = false;
} else {
WPAPF7R = true;
}
}
}

protected final void initWPAPF7U(String s) {
if (!s.trim().isEmpty()) {
WPAPF7U = Short.parseShort(s);
} else {
WPAPF7U = Short.MIN_VALUE;
}
}

protected final void initWPAPFE(String s) {
if (!s.trim().isEmpty()) {
WPAPFE = Byte.parseByte(s);
} else {
WPAPFE = Byte.MIN_VALUE;
}
}

protected final void initWPAPFL(String s) {
if (!s.trim().isEmpty()) {
WPAPFL = Double.parseDouble(s);
} else {
WPAPFL = Double.NaN;
}
}

protected final void initWPAPFR(String s) {
if (!s.trim().isEmpty()) {
WPAPFR = Byte.parseByte(s);
} else {
WPAPFR = Byte.MIN_VALUE;
}
}

protected final void initWPAPFU(String s) {
if (!s.trim().isEmpty()) {
WPAPFU = Double.parseDouble(s);
} else {
WPAPFU = Double.NaN;
}
}

protected final void initWPASA2E(String s) {
if (!s.trim().isEmpty()) {
WPASA2E = Byte.parseByte(s);
} else {
WPASA2E = Byte.MIN_VALUE;
}
}

protected final void initWPASA2L(String s) {
if (!s.trim().isEmpty()) {
WPASA2L = Short.parseShort(s);
} else {
WPASA2L = Short.MIN_VALUE;
}
}

protected final void initWPASA2R(String s) {
if (!s.trim().isEmpty()) {
WPASA2R = Byte.parseByte(s);
} else {
WPASA2R = Byte.MIN_VALUE;
}
}

protected final void initWPASA2U(String s) {
if (!s.trim().isEmpty()) {
WPASA2U = Short.parseShort(s);
} else {
WPASA2U = Short.MIN_VALUE;
}
}

protected final void initWPASA3E(String s) {
if (!s.trim().isEmpty()) {
WPASA3E = Byte.parseByte(s);
} else {
WPASA3E = Byte.MIN_VALUE;
}
}

protected final void initWPASA3L(String s) {
if (!s.trim().isEmpty()) {
WPASA3L = Short.parseShort(s);
} else {
WPASA3L = Short.MIN_VALUE;
}
}

protected final void initWPASA3R(String s) {
if (!s.trim().isEmpty()) {
WPASA3R = Byte.parseByte(s);
} else {
WPASA3R = Byte.MIN_VALUE;
}
}

protected final void initWPASA3U(String s) {
if (!s.trim().isEmpty()) {
WPASA3U = Short.parseShort(s);
} else {
WPASA3U = Short.MIN_VALUE;
}
}

protected final void initWPASA4E(String s) {
if (!s.trim().isEmpty()) {
WPASA4E = Byte.parseByte(s);
} else {
WPASA4E = Byte.MIN_VALUE;
}
}

protected final void initWPASA4L(String s) {
if (!s.trim().isEmpty()) {
WPASA4L = Short.parseShort(s);
} else {
WPASA4L = Short.MIN_VALUE;
}
}

protected final void initWPASA4R(String s) {
if (!s.trim().isEmpty()) {
WPASA4R = Byte.parseByte(s);
} else {
WPASA4R = Byte.MIN_VALUE;
}
}

protected final void initWPASA4U(String s) {
if (!s.trim().isEmpty()) {
WPASA4U = Integer.parseInt(s);
} else {
WPASA4U = Integer.MIN_VALUE;
}
}

protected final void initWPASA5E(String s) {
if (!s.trim().isEmpty()) {
WPASA5E = Byte.parseByte(s);
} else {
WPASA5E = Byte.MIN_VALUE;
}
}

protected final void initWPASA5L(String s) {
if (!s.trim().isEmpty()) {
WPASA5L = Short.parseShort(s);
} else {
WPASA5L = Short.MIN_VALUE;
}
}

protected final void initWPASA5R(String s) {
if (!s.trim().isEmpty()) {
WPASA5R = Byte.parseByte(s);
} else {
WPASA5R = Byte.MIN_VALUE;
}
}

protected final void initWPASA5U(String s) {
if (!s.trim().isEmpty()) {
WPASA5U = Short.parseShort(s);
} else {
WPASA5U = Short.MIN_VALUE;
}
}

protected final void initWPASA6E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPASA6E = false;
} else {
WPASA6E = true;
}
}
}

protected final void initWPASA6L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPASA6L = false;
} else {
WPASA6L = true;
}
}
}

protected final void initWPASA6R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPASA6R = false;
} else {
WPASA6R = true;
}
}
}

protected final void initWPASA6U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPASA6U = false;
} else {
WPASA6U = true;
}
}
}

protected final void initWPASA7E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPASA7E = false;
} else {
WPASA7E = true;
}
}
}

protected final void initWPASA7L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPASA7L = false;
} else {
WPASA7L = true;
}
}
}

protected final void initWPASA7R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPASA7R = false;
} else {
WPASA7R = true;
}
}
}

protected final void initWPASA7U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPASA7U = false;
} else {
WPASA7U = true;
}
}
}

protected final void initWPASAL2(String s) {
if (!s.trim().isEmpty()) {
WPASAL2 = Short.parseShort(s);
} else {
WPASAL2 = Short.MIN_VALUE;
}
}

protected final void initWPASAL3(String s) {
if (!s.trim().isEmpty()) {
WPASAL3 = Short.parseShort(s);
} else {
WPASAL3 = Short.MIN_VALUE;
}
}

protected final void initWPASAL4(String s) {
if (!s.trim().isEmpty()) {
WPASAL4 = Integer.parseInt(s);
} else {
WPASAL4 = Integer.MIN_VALUE;
}
}

protected final void initWPASAL5(String s) {
if (!s.trim().isEmpty()) {
WPASAL5 = Integer.parseInt(s);
} else {
WPASAL5 = Integer.MIN_VALUE;
}
}

protected final void initWPASAL6(String s) {
if (!s.trim().isEmpty()) {
WPASAL6 = Short.parseShort(s);
} else {
WPASAL6 = Short.MIN_VALUE;
}
}

protected final void initWPASAL7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPASAL7 = false;
} else {
WPASAL7 = true;
}
}
}

protected final void initWPASALE(String s) {
if (!s.trim().isEmpty()) {
WPASALE = Byte.parseByte(s);
} else {
WPASALE = Byte.MIN_VALUE;
}
}

protected final void initWPASALL(String s) {
if (!s.trim().isEmpty()) {
WPASALL = Double.parseDouble(s);
} else {
WPASALL = Double.NaN;
}
}

protected final void initWPASALR(String s) {
if (!s.trim().isEmpty()) {
WPASALR = Byte.parseByte(s);
} else {
WPASALR = Byte.MIN_VALUE;
}
}

protected final void initWPASALU(String s) {
if (!s.trim().isEmpty()) {
WPASALU = Double.parseDouble(s);
} else {
WPASALU = Double.NaN;
}
}

protected final void initWPASKD(String s) {
if (!s.trim().isEmpty()) {
WPASKD = Byte.parseByte(s);
} else {
WPASKD = Byte.MIN_VALUE;
}
}

protected final void initWPASKE(String s) {
if (!s.trim().isEmpty()) {
WPASKE = Byte.parseByte(s);
} else {
WPASKE = Byte.MIN_VALUE;
}
}

protected final void initWPASKF(String s) {
if (!s.trim().isEmpty()) {
WPASKF = Byte.parseByte(s);
} else {
WPASKF = Byte.MIN_VALUE;
}
}

protected final void initWPBCH95(String s) {
if (!s.trim().isEmpty()) {
WPBCH95 = Byte.parseByte(s);
} else {
WPBCH95 = Byte.MIN_VALUE;
}
}

protected final void initWPBCHAD(String s) {
if (!s.trim().isEmpty()) {
WPBCHAD = Byte.parseByte(s);
} else {
WPBCHAD = Byte.MIN_VALUE;
}
}

protected final void initWPBCHFL(String s) {
if (!s.trim().isEmpty()) {
WPBCHFL = Byte.parseByte(s);
} else {
WPBCHFL = Byte.MIN_VALUE;
}
}

protected final void initWPBCHHO(String s) {
if (!s.trim().isEmpty()) {
WPBCHHO = Byte.parseByte(s);
} else {
WPBCHHO = Byte.MIN_VALUE;
}
}

protected final void initWPBCHHR(String s) {
if (!s.trim().isEmpty()) {
WPBCHHR = Byte.parseByte(s);
} else {
WPBCHHR = Byte.MIN_VALUE;
}
}

protected final void initWPBCHME(String s) {
if (!s.trim().isEmpty()) {
WPBCHME = Byte.parseByte(s);
} else {
WPBCHME = Byte.MIN_VALUE;
}
}

protected final void initWPBCHPH(String s) {
if (!s.trim().isEmpty()) {
WPBCHPH = Byte.parseByte(s);
} else {
WPBCHPH = Byte.MIN_VALUE;
}
}

protected final void initWPBIMAE(String s) {
if (!s.trim().isEmpty()) {
WPBIMAE = Byte.parseByte(s);
} else {
WPBIMAE = Byte.MIN_VALUE;
}
}

protected final void initWPBIMAL(String s) {
if (!s.trim().isEmpty()) {
WPBIMAL = Short.parseShort(s);
} else {
WPBIMAL = Short.MIN_VALUE;
}
}

protected final void initWPBIMAR(String s) {
if (!s.trim().isEmpty()) {
WPBIMAR = Byte.parseByte(s);
} else {
WPBIMAR = Byte.MIN_VALUE;
}
}

protected final void initWPBIMAU(String s) {
if (!s.trim().isEmpty()) {
WPBIMAU = Short.parseShort(s);
} else {
WPBIMAU = Short.MIN_VALUE;
}
}

protected final void initWPBIWAE(String s) {
if (!s.trim().isEmpty()) {
WPBIWAE = Byte.parseByte(s);
} else {
WPBIWAE = Byte.MIN_VALUE;
}
}

protected final void initWPBIWAL(String s) {
if (!s.trim().isEmpty()) {
WPBIWAL = Short.parseShort(s);
} else {
WPBIWAL = Short.MIN_VALUE;
}
}

protected final void initWPBIWAR(String s) {
if (!s.trim().isEmpty()) {
WPBIWAR = Byte.parseByte(s);
} else {
WPBIWAR = Byte.MIN_VALUE;
}
}

protected final void initWPBIWAU(String s) {
if (!s.trim().isEmpty()) {
WPBIWAU = Short.parseShort(s);
} else {
WPBIWAU = Short.MIN_VALUE;
}
}

protected final void initWPBPS(String s) {
if (!s.trim().isEmpty()) {
WPBPS = Byte.parseByte(s);
} else {
WPBPS = Byte.MIN_VALUE;
}
}

protected final void initWPBPSP(String s) {
if (!s.trim().isEmpty()) {
WPBPSP = Byte.parseByte(s);
} else {
WPBPSP = Byte.MIN_VALUE;
}
}

protected final void initWPBPSP2(String s) {
if (!s.trim().isEmpty()) {
WPBPSP2 = Byte.parseByte(s);
} else {
WPBPSP2 = Byte.MIN_VALUE;
}
}

protected final void initWPBPSP3(String s) {
if (!s.trim().isEmpty()) {
WPBPSP3 = Byte.parseByte(s);
} else {
WPBPSP3 = Byte.MIN_VALUE;
}
}

protected final void initWPBPSP4(String s) {
if (!s.trim().isEmpty()) {
WPBPSP4 = Byte.parseByte(s);
} else {
WPBPSP4 = Byte.MIN_VALUE;
}
}

protected final void initWPBPSP5(String s) {
if (!s.trim().isEmpty()) {
WPBPSP5 = Byte.parseByte(s);
} else {
WPBPSP5 = Byte.MIN_VALUE;
}
}

protected final void initWPBPSP6(String s) {
if (!s.trim().isEmpty()) {
WPBPSP6 = Byte.parseByte(s);
} else {
WPBPSP6 = Byte.MIN_VALUE;
}
}

protected final void initWPBPSP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPBPSP7 = false;
} else {
WPBPSP7 = true;
}
}
}

protected final void initWPBTHA2(String s) {
if (!s.trim().isEmpty()) {
WPBTHA2 = Byte.parseByte(s);
} else {
WPBTHA2 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHA3(String s) {
if (!s.trim().isEmpty()) {
WPBTHA3 = Byte.parseByte(s);
} else {
WPBTHA3 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHA4(String s) {
if (!s.trim().isEmpty()) {
WPBTHA4 = Byte.parseByte(s);
} else {
WPBTHA4 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHA5(String s) {
if (!s.trim().isEmpty()) {
WPBTHA5 = Byte.parseByte(s);
} else {
WPBTHA5 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHA6(String s) {
if (!s.trim().isEmpty()) {
WPBTHA6 = Byte.parseByte(s);
} else {
WPBTHA6 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHA7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPBTHA7 = false;
} else {
WPBTHA7 = true;
}
}
}

protected final void initWPBTHP2(String s) {
if (!s.trim().isEmpty()) {
WPBTHP2 = Byte.parseByte(s);
} else {
WPBTHP2 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHP3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPBTHP3 = false;
} else {
WPBTHP3 = true;
}
}
}

protected final void initWPBTHP4(String s) {
if (!s.trim().isEmpty()) {
WPBTHP4 = Byte.parseByte(s);
} else {
WPBTHP4 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHP5(String s) {
if (!s.trim().isEmpty()) {
WPBTHP5 = Byte.parseByte(s);
} else {
WPBTHP5 = Byte.MIN_VALUE;
}
}

protected final void initWPBTHP6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPBTHP6 = false;
} else {
WPBTHP6 = true;
}
}
}

protected final void initWPBTHP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPBTHP7 = false;
} else {
WPBTHP7 = true;
}
}
}

protected final void initWPBUSVE(String s) {
if (!s.trim().isEmpty()) {
WPBUSVE = Byte.parseByte(s);
} else {
WPBUSVE = Byte.MIN_VALUE;
}
}

protected final void initWPBUSVL(String s) {
if (!s.trim().isEmpty()) {
WPBUSVL = Integer.parseInt(s);
} else {
WPBUSVL = Integer.MIN_VALUE;
}
}

protected final void initWPBUSVR(String s) {
if (!s.trim().isEmpty()) {
WPBUSVR = Byte.parseByte(s);
} else {
WPBUSVR = Byte.MIN_VALUE;
}
}

protected final void initWPBUSVU(String s) {
if (!s.trim().isEmpty()) {
WPBUSVU = Integer.parseInt(s);
} else {
WPBUSVU = Integer.MIN_VALUE;
}
}

protected final void initWPCEMP2(String s) {
if (!s.trim().isEmpty()) {
WPCEMP2 = Byte.parseByte(s);
} else {
WPCEMP2 = Byte.MIN_VALUE;
}
}

protected final void initWPCEMP3(String s) {
if (!s.trim().isEmpty()) {
WPCEMP3 = Byte.parseByte(s);
} else {
WPCEMP3 = Byte.MIN_VALUE;
}
}

protected final void initWPCEMP4(String s) {
if (!s.trim().isEmpty()) {
WPCEMP4 = Byte.parseByte(s);
} else {
WPCEMP4 = Byte.MIN_VALUE;
}
}

protected final void initWPCEMP5(String s) {
if (!s.trim().isEmpty()) {
WPCEMP5 = Byte.parseByte(s);
} else {
WPCEMP5 = Byte.MIN_VALUE;
}
}

protected final void initWPCEMP6(String s) {
if (!s.trim().isEmpty()) {
WPCEMP6 = Byte.parseByte(s);
} else {
WPCEMP6 = Byte.MIN_VALUE;
}
}

protected final void initWPCEMP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCEMP7 = false;
} else {
WPCEMP7 = true;
}
}
}

protected final void initWPCH96(String s) {
if (!s.trim().isEmpty()) {
WPCH96 = Byte.parseByte(s);
} else {
WPCH96 = Byte.MIN_VALUE;
}
}

protected final void initWPCHAD(String s) {
if (!s.trim().isEmpty()) {
WPCHAD = Byte.parseByte(s);
} else {
WPCHAD = Byte.MIN_VALUE;
}
}

protected final void initWPCHB95(String s) {
if (!s.trim().isEmpty()) {
WPCHB95 = Byte.parseByte(s);
} else {
WPCHB95 = Byte.MIN_VALUE;
}
}

protected final void initWPCHBAD(String s) {
if (!s.trim().isEmpty()) {
WPCHBAD = Byte.parseByte(s);
} else {
WPCHBAD = Byte.MIN_VALUE;
}
}

protected final void initWPCHBFL(String s) {
if (!s.trim().isEmpty()) {
WPCHBFL = Byte.parseByte(s);
} else {
WPCHBFL = Byte.MIN_VALUE;
}
}

protected final void initWPCHBHO(String s) {
if (!s.trim().isEmpty()) {
WPCHBHO = Byte.parseByte(s);
} else {
WPCHBHO = Byte.MIN_VALUE;
}
}

protected final void initWPCHBHR(String s) {
if (!s.trim().isEmpty()) {
WPCHBHR = Byte.parseByte(s);
} else {
WPCHBHR = Byte.MIN_VALUE;
}
}

protected final void initWPCHBME(String s) {
if (!s.trim().isEmpty()) {
WPCHBME = Byte.parseByte(s);
} else {
WPCHBME = Byte.MIN_VALUE;
}
}

protected final void initWPCHBPH(String s) {
if (!s.trim().isEmpty()) {
WPCHBPH = Byte.parseByte(s);
} else {
WPCHBPH = Byte.MIN_VALUE;
}
}

protected final void initWPCHD96(String s) {
if (!s.trim().isEmpty()) {
WPCHD96 = Byte.parseByte(s);
} else {
WPCHD96 = Byte.MIN_VALUE;
}
}

protected final void initWPCHDAD(String s) {
if (!s.trim().isEmpty()) {
WPCHDAD = Byte.parseByte(s);
} else {
WPCHDAD = Byte.MIN_VALUE;
}
}

protected final void initWPCHDFL(String s) {
if (!s.trim().isEmpty()) {
WPCHDFL = Byte.parseByte(s);
} else {
WPCHDFL = Byte.MIN_VALUE;
}
}

protected final void initWPCHDHO(String s) {
if (!s.trim().isEmpty()) {
WPCHDHO = Byte.parseByte(s);
} else {
WPCHDHO = Byte.MIN_VALUE;
}
}

protected final void initWPCHDHR(String s) {
if (!s.trim().isEmpty()) {
WPCHDHR = Byte.parseByte(s);
} else {
WPCHDHR = Byte.MIN_VALUE;
}
}

protected final void initWPCHDM85(String s) {
if (!s.trim().isEmpty()) {
WPCHDM85 = Byte.parseByte(s);
} else {
WPCHDM85 = Byte.MIN_VALUE;
}
}

protected final void initWPCHDM86(String s) {
if (!s.trim().isEmpty()) {
WPCHDM86 = Byte.parseByte(s);
} else {
WPCHDM86 = Byte.MIN_VALUE;
}
}

protected final void initWPCHDM96(String s) {
if (!s.trim().isEmpty()) {
WPCHDM96 = Byte.parseByte(s);
} else {
WPCHDM96 = Byte.MIN_VALUE;
}
}

protected final void initWPCHDMAD(String s) {
if (!s.trim().isEmpty()) {
WPCHDMAD = Byte.parseByte(s);
} else {
WPCHDMAD = Byte.MIN_VALUE;
}
}

protected final void initWPCHDMCO(String s) {
if (!s.trim().isEmpty()) {
WPCHDMCO = Byte.parseByte(s);
} else {
WPCHDMCO = Byte.MIN_VALUE;
}
}

protected final void initWPCHDME(String s) {
if (!s.trim().isEmpty()) {
WPCHDME = Byte.parseByte(s);
} else {
WPCHDME = Byte.MIN_VALUE;
}
}

protected final void initWPCHDMFL(String s) {
if (!s.trim().isEmpty()) {
WPCHDMFL = Byte.parseByte(s);
} else {
WPCHDMFL = Byte.MIN_VALUE;
}
}

protected final void initWPCHDMHO(String s) {
if (!s.trim().isEmpty()) {
WPCHDMHO = Byte.parseByte(s);
} else {
WPCHDMHO = Byte.MIN_VALUE;
}
}

protected final void initWPCHDMHR(String s) {
if (!s.trim().isEmpty()) {
WPCHDMHR = Byte.parseByte(s);
} else {
WPCHDMHR = Byte.MIN_VALUE;
}
}

protected final void initWPCHDMME(String s) {
if (!s.trim().isEmpty()) {
WPCHDMME = Byte.parseByte(s);
} else {
WPCHDMME = Byte.MIN_VALUE;
}
}

protected final void initWPCHDMPH(String s) {
if (!s.trim().isEmpty()) {
WPCHDMPH = Byte.parseByte(s);
} else {
WPCHDMPH = Byte.MIN_VALUE;
}
}

protected final void initWPCHDPH(String s) {
if (!s.trim().isEmpty()) {
WPCHDPH = Byte.parseByte(s);
} else {
WPCHDPH = Byte.MIN_VALUE;
}
}

protected final void initWPCHFL(String s) {
if (!s.trim().isEmpty()) {
WPCHFL = Byte.parseByte(s);
} else {
WPCHFL = Byte.MIN_VALUE;
}
}

protected final void initWPCHGA(String s) {
if (!s.trim().isEmpty()) {
WPCHGA = Byte.parseByte(s);
} else {
WPCHGA = Byte.MIN_VALUE;
}
}

protected final void initWPCHGDN(String s) {
if (!s.trim().isEmpty()) {
WPCHGDN = Byte.parseByte(s);
} else {
WPCHGDN = Byte.MIN_VALUE;
}
}

protected final void initWPCHGNO(String s) {
if (!s.trim().isEmpty()) {
WPCHGNO = Byte.parseByte(s);
} else {
WPCHGNO = Byte.MIN_VALUE;
}
}

protected final void initWPCHGO(String s) {
if (!s.trim().isEmpty()) {
WPCHGO = Byte.parseByte(s);
} else {
WPCHGO = Byte.MIN_VALUE;
}
}

protected final void initWPCHHO(String s) {
if (!s.trim().isEmpty()) {
WPCHHO = Byte.parseByte(s);
} else {
WPCHHO = Byte.MIN_VALUE;
}
}

protected final void initWPCHHR(String s) {
if (!s.trim().isEmpty()) {
WPCHHR = Byte.parseByte(s);
} else {
WPCHHR = Byte.MIN_VALUE;
}
}

protected final void initWPCHL95(String s) {
if (!s.trim().isEmpty()) {
WPCHL95 = Byte.parseByte(s);
} else {
WPCHL95 = Byte.MIN_VALUE;
}
}

protected final void initWPCHL96(String s) {
if (!s.trim().isEmpty()) {
WPCHL96 = Byte.parseByte(s);
} else {
WPCHL96 = Byte.MIN_VALUE;
}
}

protected final void initWPCHLAD(String s) {
if (!s.trim().isEmpty()) {
WPCHLAD = Byte.parseByte(s);
} else {
WPCHLAD = Byte.MIN_VALUE;
}
}

protected final void initWPCHLFL(String s) {
if (!s.trim().isEmpty()) {
WPCHLFL = Byte.parseByte(s);
} else {
WPCHLFL = Byte.MIN_VALUE;
}
}

protected final void initWPCHLHO(String s) {
if (!s.trim().isEmpty()) {
WPCHLHO = Byte.parseByte(s);
} else {
WPCHLHO = Byte.MIN_VALUE;
}
}

protected final void initWPCHLHR(String s) {
if (!s.trim().isEmpty()) {
WPCHLHR = Byte.parseByte(s);
} else {
WPCHLHR = Byte.MIN_VALUE;
}
}

protected final void initWPCHLM85(String s) {
if (!s.trim().isEmpty()) {
WPCHLM85 = Byte.parseByte(s);
} else {
WPCHLM85 = Byte.MIN_VALUE;
}
}

protected final void initWPCHLM86(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCHLM86 = false;
} else {
WPCHLM86 = true;
}
}
}

protected final void initWPCHLM96(String s) {
if (!s.trim().isEmpty()) {
WPCHLM96 = Byte.parseByte(s);
} else {
WPCHLM96 = Byte.MIN_VALUE;
}
}

protected final void initWPCHLMAD(String s) {
if (!s.trim().isEmpty()) {
WPCHLMAD = Byte.parseByte(s);
} else {
WPCHLMAD = Byte.MIN_VALUE;
}
}

protected final void initWPCHLME(String s) {
if (!s.trim().isEmpty()) {
WPCHLME = Byte.parseByte(s);
} else {
WPCHLME = Byte.MIN_VALUE;
}
}

protected final void initWPCHLMFL(String s) {
if (!s.trim().isEmpty()) {
WPCHLMFL = Byte.parseByte(s);
} else {
WPCHLMFL = Byte.MIN_VALUE;
}
}

protected final void initWPCHLMHO(String s) {
if (!s.trim().isEmpty()) {
WPCHLMHO = Byte.parseByte(s);
} else {
WPCHLMHO = Byte.MIN_VALUE;
}
}

protected final void initWPCHLMHR(String s) {
if (!s.trim().isEmpty()) {
WPCHLMHR = Byte.parseByte(s);
} else {
WPCHLMHR = Byte.MIN_VALUE;
}
}

protected final void initWPCHLMME(String s) {
if (!s.trim().isEmpty()) {
WPCHLMME = Byte.parseByte(s);
} else {
WPCHLMME = Byte.MIN_VALUE;
}
}

protected final void initWPCHLMPH(String s) {
if (!s.trim().isEmpty()) {
WPCHLMPH = Byte.parseByte(s);
} else {
WPCHLMPH = Byte.MIN_VALUE;
}
}

protected final void initWPCHLPH(String s) {
if (!s.trim().isEmpty()) {
WPCHLPH = Byte.parseByte(s);
} else {
WPCHLPH = Byte.MIN_VALUE;
}
}

protected final void initWPCHM85(String s) {
if (!s.trim().isEmpty()) {
WPCHM85 = Byte.parseByte(s);
} else {
WPCHM85 = Byte.MIN_VALUE;
}
}

protected final void initWPCHM86(String s) {
if (!s.trim().isEmpty()) {
WPCHM86 = Byte.parseByte(s);
} else {
WPCHM86 = Byte.MIN_VALUE;
}
}

protected final void initWPCHM96(String s) {
if (!s.trim().isEmpty()) {
WPCHM96 = Byte.parseByte(s);
} else {
WPCHM96 = Byte.MIN_VALUE;
}
}

protected final void initWPCHMAD(String s) {
if (!s.trim().isEmpty()) {
WPCHMAD = Byte.parseByte(s);
} else {
WPCHMAD = Byte.MIN_VALUE;
}
}

protected final void initWPCHMBO(String s) {
if (!s.trim().isEmpty()) {
WPCHMBO = Byte.parseByte(s);
} else {
WPCHMBO = Byte.MIN_VALUE;
}
}

protected final void initWPCHME(String s) {
if (!s.trim().isEmpty()) {
WPCHME = Byte.parseByte(s);
} else {
WPCHME = Byte.MIN_VALUE;
}
}

protected final void initWPCHMFL(String s) {
if (!s.trim().isEmpty()) {
WPCHMFL = Byte.parseByte(s);
} else {
WPCHMFL = Byte.MIN_VALUE;
}
}

protected final void initWPCHMHO(String s) {
if (!s.trim().isEmpty()) {
WPCHMHO = Byte.parseByte(s);
} else {
WPCHMHO = Byte.MIN_VALUE;
}
}

protected final void initWPCHMHR(String s) {
if (!s.trim().isEmpty()) {
WPCHMHR = Byte.parseByte(s);
} else {
WPCHMHR = Byte.MIN_VALUE;
}
}

protected final void initWPCHMME(String s) {
if (!s.trim().isEmpty()) {
WPCHMME = Byte.parseByte(s);
} else {
WPCHMME = Byte.MIN_VALUE;
}
}

protected final void initWPCHMPH(String s) {
if (!s.trim().isEmpty()) {
WPCHMPH = Byte.parseByte(s);
} else {
WPCHMPH = Byte.MIN_VALUE;
}
}

protected final void initWPCHMSA(String s) {
if (!s.trim().isEmpty()) {
WPCHMSA = Byte.parseByte(s);
} else {
WPCHMSA = Byte.MIN_VALUE;
}
}

protected final void initWPCHPH(String s) {
if (!s.trim().isEmpty()) {
WPCHPH = Byte.parseByte(s);
} else {
WPCHPH = Byte.MIN_VALUE;
}
}

protected final void initWPCJ96(String s) {
if (!s.trim().isEmpty()) {
WPCJ96 = Byte.parseByte(s);
} else {
WPCJ96 = Byte.MIN_VALUE;
}
}

protected final void initWPCJAG(String s) {
if (!s.trim().isEmpty()) {
WPCJAG = Byte.parseByte(s);
} else {
WPCJAG = Byte.MIN_VALUE;
}
}

protected final void initWPCJBU(String s) {
if (!s.trim().isEmpty()) {
WPCJBU = Byte.parseByte(s);
} else {
WPCJBU = Byte.MIN_VALUE;
}
}

protected final void initWPCJDI(String s) {
if (!s.trim().isEmpty()) {
WPCJDI = Byte.parseByte(s);
} else {
WPCJDI = Byte.MIN_VALUE;
}
}

protected final void initWPCJFR(String s) {
if (!s.trim().isEmpty()) {
WPCJFR = Byte.parseByte(s);
} else {
WPCJFR = Byte.MIN_VALUE;
}
}

protected final void initWPCJPA(String s) {
if (!s.trim().isEmpty()) {
WPCJPA = Byte.parseByte(s);
} else {
WPCJPA = Byte.MIN_VALUE;
}
}

protected final void initWPCJSC(String s) {
if (!s.trim().isEmpty()) {
WPCJSC = Byte.parseByte(s);
} else {
WPCJSC = Byte.MIN_VALUE;
}
}

protected final void initWPCJSE(String s) {
if (!s.trim().isEmpty()) {
WPCJSE = Byte.parseByte(s);
} else {
WPCJSE = Byte.MIN_VALUE;
}
}

protected final void initWPCONY2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
WPCONY2 = false;
} else {
WPCONY2 = true;
}
}
}

protected final void initWPCONY3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCONY3 = false;
} else {
WPCONY3 = true;
}
}
}

protected final void initWPCONY4(String s) {
if (!s.trim().isEmpty()) {
WPCONY4 = Short.parseShort(s);
} else {
WPCONY4 = Short.MIN_VALUE;
}
}

protected final void initWPCONY5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCONY5 = false;
} else {
WPCONY5 = true;
}
}
}

protected final void initWPCONY6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCONY6 = false;
} else {
WPCONY6 = true;
}
}
}

protected final void initWPCONY7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPCONY7 = false;
} else {
WPCONY7 = true;
}
}
}

protected final void initWPCOS(String s) {
if (!s.trim().isEmpty()) {
WPCOS = Byte.parseByte(s);
} else {
WPCOS = Byte.MIN_VALUE;
}
}

protected final void initWPCOS2(String s) {
if (!s.trim().isEmpty()) {
WPCOS2 = Byte.parseByte(s);
} else {
WPCOS2 = Byte.MIN_VALUE;
}
}

protected final void initWPCOS3(String s) {
if (!s.trim().isEmpty()) {
WPCOS3 = Byte.parseByte(s);
} else {
WPCOS3 = Byte.MIN_VALUE;
}
}

protected final void initWPCOS4(String s) {
if (!s.trim().isEmpty()) {
WPCOS4 = Byte.parseByte(s);
} else {
WPCOS4 = Byte.MIN_VALUE;
}
}

protected final void initWPCOS5(String s) {
if (!s.trim().isEmpty()) {
WPCOS5 = Byte.parseByte(s);
} else {
WPCOS5 = Byte.MIN_VALUE;
}
}

protected final void initWPCOS6(String s) {
if (!s.trim().isEmpty()) {
WPCOS6 = Byte.parseByte(s);
} else {
WPCOS6 = Byte.MIN_VALUE;
}
}

protected final void initWPCOS7(String s) {
if (!s.trim().isEmpty()) {
WPCOS7 = Byte.parseByte(s);
} else {
WPCOS7 = Byte.MIN_VALUE;
}
}

protected final void initWPCRAGE(String s) {
if (!s.trim().isEmpty()) {
WPCRAGE = Byte.parseByte(s);
} else {
WPCRAGE = Byte.MIN_VALUE;
}
}

protected final void initWPCRET(String s) {
if (!s.trim().isEmpty()) {
WPCRET = Byte.parseByte(s);
} else {
WPCRET = Byte.MIN_VALUE;
}
}

protected final void initWPCRETL(String s) {
if (!s.trim().isEmpty()) {
WPCRETL = Byte.parseByte(s);
} else {
WPCRETL = Byte.MIN_VALUE;
}
}

protected final void initWPCURP(String s) {
if (!s.trim().isEmpty()) {
WPCURP = Byte.parseByte(s);
} else {
WPCURP = Byte.MIN_VALUE;
}
}

protected final void initWPCURP2(String s) {
if (!s.trim().isEmpty()) {
WPCURP2 = Byte.parseByte(s);
} else {
WPCURP2 = Byte.MIN_VALUE;
}
}

protected final void initWPCURP3(String s) {
if (!s.trim().isEmpty()) {
WPCURP3 = Byte.parseByte(s);
} else {
WPCURP3 = Byte.MIN_VALUE;
}
}

protected final void initWPCURP4(String s) {
if (!s.trim().isEmpty()) {
WPCURP4 = Byte.parseByte(s);
} else {
WPCURP4 = Byte.MIN_VALUE;
}
}

protected final void initWPCURP5(String s) {
if (!s.trim().isEmpty()) {
WPCURP5 = Byte.parseByte(s);
} else {
WPCURP5 = Byte.MIN_VALUE;
}
}

protected final void initWPCURP6(String s) {
if (!s.trim().isEmpty()) {
WPCURP6 = Byte.parseByte(s);
} else {
WPCURP6 = Byte.MIN_VALUE;
}
}

protected final void initWPCURP7(String s) {
if (!s.trim().isEmpty()) {
WPCURP7 = Byte.parseByte(s);
} else {
WPCURP7 = Byte.MIN_VALUE;
}
}

protected final void initWPCURR(String s) {
if (!s.trim().isEmpty()) {
WPCURR = Byte.parseByte(s);
} else {
WPCURR = Byte.MIN_VALUE;
}
}

protected final void initWPCURR2(String s) {
if (!s.trim().isEmpty()) {
WPCURR2 = Byte.parseByte(s);
} else {
WPCURR2 = Byte.MIN_VALUE;
}
}

protected final void initWPCURR3(String s) {
if (!s.trim().isEmpty()) {
WPCURR3 = Byte.parseByte(s);
} else {
WPCURR3 = Byte.MIN_VALUE;
}
}

protected final void initWPCURR4(String s) {
if (!s.trim().isEmpty()) {
WPCURR4 = Byte.parseByte(s);
} else {
WPCURR4 = Byte.MIN_VALUE;
}
}

protected final void initWPCURR5(String s) {
if (!s.trim().isEmpty()) {
WPCURR5 = Byte.parseByte(s);
} else {
WPCURR5 = Byte.MIN_VALUE;
}
}

protected final void initWPCURR6(String s) {
if (!s.trim().isEmpty()) {
WPCURR6 = Byte.parseByte(s);
} else {
WPCURR6 = Byte.MIN_VALUE;
}
}

protected final void initWPCURR7(String s) {
if (!s.trim().isEmpty()) {
WPCURR7 = Byte.parseByte(s);
} else {
WPCURR7 = Byte.MIN_VALUE;
}
}

protected final void initWPDCDB(String s) {
if (!s.trim().isEmpty()) {
WPDCDB = Byte.parseByte(s);
} else {
WPDCDB = Byte.MIN_VALUE;
}
}

protected final void initWPDCDB2(String s) {
if (!s.trim().isEmpty()) {
WPDCDB2 = Byte.parseByte(s);
} else {
WPDCDB2 = Byte.MIN_VALUE;
}
}

protected final void initWPDCDB3(String s) {
if (!s.trim().isEmpty()) {
WPDCDB3 = Byte.parseByte(s);
} else {
WPDCDB3 = Byte.MIN_VALUE;
}
}

protected final void initWPDCDB4(String s) {
if (!s.trim().isEmpty()) {
WPDCDB4 = Byte.parseByte(s);
} else {
WPDCDB4 = Byte.MIN_VALUE;
}
}

protected final void initWPDCDB5(String s) {
if (!s.trim().isEmpty()) {
WPDCDB5 = Byte.parseByte(s);
} else {
WPDCDB5 = Byte.MIN_VALUE;
}
}

protected final void initWPDCDB6(String s) {
if (!s.trim().isEmpty()) {
WPDCDB6 = Byte.parseByte(s);
} else {
WPDCDB6 = Byte.MIN_VALUE;
}
}

protected final void initWPDCDB7(String s) {
if (!s.trim().isEmpty()) {
WPDCDB7 = Byte.parseByte(s);
} else {
WPDCDB7 = Byte.MIN_VALUE;
}
}

protected final void initWPDE2(String s) {
if (!s.trim().isEmpty()) {
WPDE2 = Short.parseShort(s);
} else {
WPDE2 = Short.MIN_VALUE;
}
}

protected final void initWPDE3(String s) {
if (!s.trim().isEmpty()) {
WPDE3 = Short.parseShort(s);
} else {
WPDE3 = Short.MIN_VALUE;
}
}

protected final void initWPDE4(String s) {
if (!s.trim().isEmpty()) {
WPDE4 = Short.parseShort(s);
} else {
WPDE4 = Short.MIN_VALUE;
}
}

protected final void initWPDE5(String s) {
if (!s.trim().isEmpty()) {
WPDE5 = Short.parseShort(s);
} else {
WPDE5 = Short.MIN_VALUE;
}
}

protected final void initWPDE6(String s) {
if (!s.trim().isEmpty()) {
WPDE6 = Short.parseShort(s);
} else {
WPDE6 = Short.MIN_VALUE;
}
}

protected final void initWPDE7(String s) {
if (!s.trim().isEmpty()) {
WPDE7 = Short.parseShort(s);
} else {
WPDE7 = Short.MIN_VALUE;
}
}

protected final void initWPDESP(String s) {
if (!s.trim().isEmpty()) {
WPDESP = Byte.parseByte(s);
} else {
WPDESP = Byte.MIN_VALUE;
}
}

protected final void initWPDESP2(String s) {
if (!s.trim().isEmpty()) {
WPDESP2 = Byte.parseByte(s);
} else {
WPDESP2 = Byte.MIN_VALUE;
}
}

protected final void initWPDESP3(String s) {
if (!s.trim().isEmpty()) {
WPDESP3 = Byte.parseByte(s);
} else {
WPDESP3 = Byte.MIN_VALUE;
}
}

protected final void initWPDESP4(String s) {
if (!s.trim().isEmpty()) {
WPDESP4 = Byte.parseByte(s);
} else {
WPDESP4 = Byte.MIN_VALUE;
}
}

protected final void initWPDESP5(String s) {
if (!s.trim().isEmpty()) {
WPDESP5 = Byte.parseByte(s);
} else {
WPDESP5 = Byte.MIN_VALUE;
}
}

protected final void initWPDESP6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPDESP6 = false;
} else {
WPDESP6 = true;
}
}
}

protected final void initWPDESP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPDESP7 = false;
} else {
WPDESP7 = true;
}
}
}

protected final void initWPDPS2(String s) {
if (!s.trim().isEmpty()) {
WPDPS2 = Byte.parseByte(s);
} else {
WPDPS2 = Byte.MIN_VALUE;
}
}

protected final void initWPDPS3(String s) {
if (!s.trim().isEmpty()) {
WPDPS3 = Byte.parseByte(s);
} else {
WPDPS3 = Byte.MIN_VALUE;
}
}

protected final void initWPDPS4(String s) {
if (!s.trim().isEmpty()) {
WPDPS4 = Byte.parseByte(s);
} else {
WPDPS4 = Byte.MIN_VALUE;
}
}

protected final void initWPDPS5(String s) {
if (!s.trim().isEmpty()) {
WPDPS5 = Byte.parseByte(s);
} else {
WPDPS5 = Byte.MIN_VALUE;
}
}

protected final void initWPDPS6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPDPS6 = false;
} else {
WPDPS6 = true;
}
}
}

protected final void initWPDPS7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPDPS7 = false;
} else {
WPDPS7 = true;
}
}
}

protected final void initWPDPSP(String s) {
if (!s.trim().isEmpty()) {
WPDPSP = Byte.parseByte(s);
} else {
WPDPSP = Byte.MIN_VALUE;
}
}

protected final void initWPDPSP2(String s) {
if (!s.trim().isEmpty()) {
WPDPSP2 = Byte.parseByte(s);
} else {
WPDPSP2 = Byte.MIN_VALUE;
}
}

protected final void initWPDPSP3(String s) {
if (!s.trim().isEmpty()) {
WPDPSP3 = Byte.parseByte(s);
} else {
WPDPSP3 = Byte.MIN_VALUE;
}
}

protected final void initWPDPSP4(String s) {
if (!s.trim().isEmpty()) {
WPDPSP4 = Byte.parseByte(s);
} else {
WPDPSP4 = Byte.MIN_VALUE;
}
}

protected final void initWPDPSP5(String s) {
if (!s.trim().isEmpty()) {
WPDPSP5 = Byte.parseByte(s);
} else {
WPDPSP5 = Byte.MIN_VALUE;
}
}

protected final void initWPDPSP6(String s) {
if (!s.trim().isEmpty()) {
WPDPSP6 = Byte.parseByte(s);
} else {
WPDPSP6 = Byte.MIN_VALUE;
}
}

protected final void initWPDPSP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPDPSP7 = false;
} else {
WPDPSP7 = true;
}
}
}

protected final void initWPDS2(String s) {
if (!s.trim().isEmpty()) {
WPDS2 = Short.parseShort(s);
} else {
WPDS2 = Short.MIN_VALUE;
}
}

protected final void initWPDS3(String s) {
if (!s.trim().isEmpty()) {
WPDS3 = Short.parseShort(s);
} else {
WPDS3 = Short.MIN_VALUE;
}
}

protected final void initWPDS4(String s) {
if (!s.trim().isEmpty()) {
WPDS4 = Short.parseShort(s);
} else {
WPDS4 = Short.MIN_VALUE;
}
}

protected final void initWPDS5(String s) {
if (!s.trim().isEmpty()) {
WPDS5 = Short.parseShort(s);
} else {
WPDS5 = Short.MIN_VALUE;
}
}

protected final void initWPDS6(String s) {
if (!s.trim().isEmpty()) {
WPDS6 = Short.parseShort(s);
} else {
WPDS6 = Short.MIN_VALUE;
}
}

protected final void initWPDS7(String s) {
if (!s.trim().isEmpty()) {
WPDS7 = Short.parseShort(s);
} else {
WPDS7 = Short.MIN_VALUE;
}
}

protected final void initWPEARLY(String s) {
if (!s.trim().isEmpty()) {
WPEARLY = Byte.parseByte(s);
} else {
WPEARLY = Byte.MIN_VALUE;
}
}

protected final void initWPEC(String s) {
if (!s.trim().isEmpty()) {
WPEC = Byte.parseByte(s);
} else {
WPEC = Byte.MIN_VALUE;
}
}

protected final void initWPECA(String s) {
if (!s.trim().isEmpty()) {
WPECA = Byte.parseByte(s);
} else {
WPECA = Byte.MIN_VALUE;
}
}

protected final void initWPECPP(String s) {
if (!s.trim().isEmpty()) {
WPECPP = Byte.parseByte(s);
} else {
WPECPP = Byte.MIN_VALUE;
}
}

protected final void initWPECPP2(String s) {
if (!s.trim().isEmpty()) {
WPECPP2 = Byte.parseByte(s);
} else {
WPECPP2 = Byte.MIN_VALUE;
}
}

protected final void initWPECPP3(String s) {
if (!s.trim().isEmpty()) {
WPECPP3 = Byte.parseByte(s);
} else {
WPECPP3 = Byte.MIN_VALUE;
}
}

protected final void initWPECPP4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPECPP4 = false;
} else {
WPECPP4 = true;
}
}
}

protected final void initWPECPP5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPECPP5 = false;
} else {
WPECPP5 = true;
}
}
}

protected final void initWPECPP6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPECPP6 = false;
} else {
WPECPP6 = true;
}
}
}

protected final void initWPECPP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPECPP7 = false;
} else {
WPECPP7 = true;
}
}
}

protected final void initWPEPER2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPEPER2 = false;
} else {
WPEPER2 = true;
}
}
}

protected final void initWPEPER3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPEPER3 = false;
} else {
WPEPER3 = true;
}
}
}

protected final void initWPEPER4(String s) {
if (!s.trim().isEmpty()) {
WPEPER4 = Byte.parseByte(s);
} else {
WPEPER4 = Byte.MIN_VALUE;
}
}

protected final void initWPEPER5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPEPER5 = false;
} else {
WPEPER5 = true;
}
}
}

protected final void initWPEPER6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPEPER6 = false;
} else {
WPEPER6 = true;
}
}
}

protected final void initWPEPER7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPEPER7 = false;
} else {
WPEPER7 = true;
}
}
}

protected final void initWPERA2(String s) {
if (!s.trim().isEmpty()) {
WPERA2 = Byte.parseByte(s);
} else {
WPERA2 = Byte.MIN_VALUE;
}
}

protected final void initWPERA3(String s) {
if (!s.trim().isEmpty()) {
WPERA3 = Byte.parseByte(s);
} else {
WPERA3 = Byte.MIN_VALUE;
}
}

protected final void initWPERA4(String s) {
if (!s.trim().isEmpty()) {
WPERA4 = Byte.parseByte(s);
} else {
WPERA4 = Byte.MIN_VALUE;
}
}

protected final void initWPERA5(String s) {
if (!s.trim().isEmpty()) {
WPERA5 = Byte.parseByte(s);
} else {
WPERA5 = Byte.MIN_VALUE;
}
}

protected final void initWPERA6(String s) {
if (!s.trim().isEmpty()) {
WPERA6 = Byte.parseByte(s);
} else {
WPERA6 = Byte.MIN_VALUE;
}
}

protected final void initWPERA7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPERA7 = false;
} else {
WPERA7 = true;
}
}
}

protected final void initWPERC2(String s) {
if (!s.trim().isEmpty()) {
WPERC2 = Byte.parseByte(s);
} else {
WPERC2 = Byte.MIN_VALUE;
}
}

protected final void initWPERC3(String s) {
if (!s.trim().isEmpty()) {
WPERC3 = Byte.parseByte(s);
} else {
WPERC3 = Byte.MIN_VALUE;
}
}

protected final void initWPERC4(String s) {
if (!s.trim().isEmpty()) {
WPERC4 = Byte.parseByte(s);
} else {
WPERC4 = Byte.MIN_VALUE;
}
}

protected final void initWPERC5(String s) {
if (!s.trim().isEmpty()) {
WPERC5 = Byte.parseByte(s);
} else {
WPERC5 = Byte.MIN_VALUE;
}
}

protected final void initWPERC6(String s) {
if (!s.trim().isEmpty()) {
WPERC6 = Byte.parseByte(s);
} else {
WPERC6 = Byte.MIN_VALUE;
}
}

protected final void initWPERC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPERC7 = false;
} else {
WPERC7 = true;
}
}
}

protected final void initWPERCP(String s) {
if (!s.trim().isEmpty()) {
WPERCP = Byte.parseByte(s);
} else {
WPERCP = Byte.MIN_VALUE;
}
}

protected final void initWPERCP2(String s) {
if (!s.trim().isEmpty()) {
WPERCP2 = Byte.parseByte(s);
} else {
WPERCP2 = Byte.MIN_VALUE;
}
}

protected final void initWPERCP3(String s) {
if (!s.trim().isEmpty()) {
WPERCP3 = Byte.parseByte(s);
} else {
WPERCP3 = Byte.MIN_VALUE;
}
}

protected final void initWPERCP4(String s) {
if (!s.trim().isEmpty()) {
WPERCP4 = Byte.parseByte(s);
} else {
WPERCP4 = Byte.MIN_VALUE;
}
}

protected final void initWPERCP5(String s) {
if (!s.trim().isEmpty()) {
WPERCP5 = Byte.parseByte(s);
} else {
WPERCP5 = Byte.MIN_VALUE;
}
}

protected final void initWPERCP6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPERCP6 = false;
} else {
WPERCP6 = true;
}
}
}

protected final void initWPERCP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPERCP7 = false;
} else {
WPERCP7 = true;
}
}
}

protected final void initWPESJME(String s) {
if (!s.trim().isEmpty()) {
WPESJME = Byte.parseByte(s);
} else {
WPESJME = Byte.MIN_VALUE;
}
}

protected final void initWPESJML(String s) {
if (!s.trim().isEmpty()) {
WPESJML = Short.parseShort(s);
} else {
WPESJML = Short.MIN_VALUE;
}
}

protected final void initWPESJMR(String s) {
if (!s.trim().isEmpty()) {
WPESJMR = Byte.parseByte(s);
} else {
WPESJMR = Byte.MIN_VALUE;
}
}

protected final void initWPESJMU(String s) {
if (!s.trim().isEmpty()) {
WPESJMU = Short.parseShort(s);
} else {
WPESJMU = Short.MIN_VALUE;
}
}

protected final void initWPEXW(String s) {
if (!s.trim().isEmpty()) {
WPEXW = Byte.parseByte(s);
} else {
WPEXW = Byte.MIN_VALUE;
}
}

protected final void initWPFFCONS(String s) {
if (!s.trim().isEmpty()) {
WPFFCONS = Byte.parseByte(s);
} else {
WPFFCONS = Byte.MIN_VALUE;
}
}

protected final void initWPFFCUR2(String s) {
if (!s.trim().isEmpty()) {
WPFFCUR2 = Byte.parseByte(s);
} else {
WPFFCUR2 = Byte.MIN_VALUE;
}
}

protected final void initWPFFCUR3(String s) {
if (!s.trim().isEmpty()) {
WPFFCUR3 = Byte.parseByte(s);
} else {
WPFFCUR3 = Byte.MIN_VALUE;
}
}

protected final void initWPFFCUR4(String s) {
if (!s.trim().isEmpty()) {
WPFFCUR4 = Byte.parseByte(s);
} else {
WPFFCUR4 = Byte.MIN_VALUE;
}
}

protected final void initWPFFCUR5(String s) {
if (!s.trim().isEmpty()) {
WPFFCUR5 = Byte.parseByte(s);
} else {
WPFFCUR5 = Byte.MIN_VALUE;
}
}

protected final void initWPFFCUR6(String s) {
if (!s.trim().isEmpty()) {
WPFFCUR6 = Byte.parseByte(s);
} else {
WPFFCUR6 = Byte.MIN_VALUE;
}
}

protected final void initWPFFCUR7(String s) {
if (!s.trim().isEmpty()) {
WPFFCUR7 = Byte.parseByte(s);
} else {
WPFFCUR7 = Byte.MIN_VALUE;
}
}

protected final void initWPFFCURP(String s) {
if (!s.trim().isEmpty()) {
WPFFCURP = Byte.parseByte(s);
} else {
WPFFCURP = Byte.MIN_VALUE;
}
}

protected final void initWPFFDCD4(String s) {
if (!s.trim().isEmpty()) {
WPFFDCD4 = Byte.parseByte(s);
} else {
WPFFDCD4 = Byte.MIN_VALUE;
}
}

protected final void initWPFFDCD5(String s) {
if (!s.trim().isEmpty()) {
WPFFDCD5 = Byte.parseByte(s);
} else {
WPFFDCD5 = Byte.MIN_VALUE;
}
}

protected final void initWPFFDCD6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFFDCD6 = false;
} else {
WPFFDCD6 = true;
}
}
}

protected final void initWPFFDCD7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFFDCD7 = false;
} else {
WPFFDCD7 = true;
}
}
}

protected final void initWPFFDCDB(String s) {
if (!s.trim().isEmpty()) {
WPFFDCDB = Byte.parseByte(s);
} else {
WPFFDCDB = Byte.MIN_VALUE;
}
}

protected final void initWPFFDCDB2(String s) {
if (!s.trim().isEmpty()) {
WPFFDCDB2 = Byte.parseByte(s);
} else {
WPFFDCDB2 = Byte.MIN_VALUE;
}
}

protected final void initWPFFDCDB3(String s) {
if (!s.trim().isEmpty()) {
WPFFDCDB3 = Byte.parseByte(s);
} else {
WPFFDCDB3 = Byte.MIN_VALUE;
}
}

protected final void initWPFFPENN(String s) {
if (!s.trim().isEmpty()) {
WPFFPENN = Byte.parseByte(s);
} else {
WPFFPENN = Byte.MIN_VALUE;
}
}

protected final void initWPFFPENT(String s) {
if (!s.trim().isEmpty()) {
WPFFPENT = Byte.parseByte(s);
} else {
WPFFPENT = Byte.MIN_VALUE;
}
}

protected final void initWPFFPENT2(String s) {
if (!s.trim().isEmpty()) {
WPFFPENT2 = Byte.parseByte(s);
} else {
WPFFPENT2 = Byte.MIN_VALUE;
}
}

protected final void initWPFFPENT3(String s) {
if (!s.trim().isEmpty()) {
WPFFPENT3 = Byte.parseByte(s);
} else {
WPFFPENT3 = Byte.MIN_VALUE;
}
}

protected final void initWPFFPENT4(String s) {
if (!s.trim().isEmpty()) {
WPFFPENT4 = Byte.parseByte(s);
} else {
WPFFPENT4 = Byte.MIN_VALUE;
}
}

protected final void initWPFFPENT5(String s) {
if (!s.trim().isEmpty()) {
WPFFPENT5 = Byte.parseByte(s);
} else {
WPFFPENT5 = Byte.MIN_VALUE;
}
}

protected final void initWPFFPENT6(String s) {
if (!s.trim().isEmpty()) {
WPFFPENT6 = Byte.parseByte(s);
} else {
WPFFPENT6 = Byte.MIN_VALUE;
}
}

protected final void initWPFFPENT7(String s) {
if (!s.trim().isEmpty()) {
WPFFPENT7 = Byte.parseByte(s);
} else {
WPFFPENT7 = Byte.MIN_VALUE;
}
}

protected final void initWPFFREC2(String s) {
if (!s.trim().isEmpty()) {
WPFFREC2 = Byte.parseByte(s);
} else {
WPFFREC2 = Byte.MIN_VALUE;
}
}

protected final void initWPFFREC3(String s) {
if (!s.trim().isEmpty()) {
WPFFREC3 = Byte.parseByte(s);
} else {
WPFFREC3 = Byte.MIN_VALUE;
}
}

protected final void initWPFFREC4(String s) {
if (!s.trim().isEmpty()) {
WPFFREC4 = Byte.parseByte(s);
} else {
WPFFREC4 = Byte.MIN_VALUE;
}
}

protected final void initWPFFREC5(String s) {
if (!s.trim().isEmpty()) {
WPFFREC5 = Byte.parseByte(s);
} else {
WPFFREC5 = Byte.MIN_VALUE;
}
}

protected final void initWPFFREC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFFREC6 = false;
} else {
WPFFREC6 = true;
}
}
}

protected final void initWPFFREC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFFREC7 = false;
} else {
WPFFREC7 = true;
}
}
}

protected final void initWPFFRECP(String s) {
if (!s.trim().isEmpty()) {
WPFFRECP = Byte.parseByte(s);
} else {
WPFFRECP = Byte.MIN_VALUE;
}
}

protected final void initWPFFYBS(String s) {
if (!s.trim().isEmpty()) {
WPFFYBS = Byte.parseByte(s);
} else {
WPFFYBS = Byte.MIN_VALUE;
}
}

protected final void initWPFFYBS2(String s) {
if (!s.trim().isEmpty()) {
WPFFYBS2 = Byte.parseByte(s);
} else {
WPFFYBS2 = Byte.MIN_VALUE;
}
}

protected final void initWPFFYBS3(String s) {
if (!s.trim().isEmpty()) {
WPFFYBS3 = Byte.parseByte(s);
} else {
WPFFYBS3 = Byte.MIN_VALUE;
}
}

protected final void initWPFFYBS4(String s) {
if (!s.trim().isEmpty()) {
WPFFYBS4 = Byte.parseByte(s);
} else {
WPFFYBS4 = Byte.MIN_VALUE;
}
}

protected final void initWPFFYBS5(String s) {
if (!s.trim().isEmpty()) {
WPFFYBS5 = Byte.parseByte(s);
} else {
WPFFYBS5 = Byte.MIN_VALUE;
}
}

protected final void initWPFFYBS6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFFYBS6 = false;
} else {
WPFFYBS6 = true;
}
}
}

protected final void initWPFFYBS7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFFYBS7 = false;
} else {
WPFFYBS7 = true;
}
}
}

protected final void initWPFINF(String s) {
if (!s.trim().isEmpty()) {
WPFINF = Byte.parseByte(s);
} else {
WPFINF = Byte.MIN_VALUE;
}
}

protected final void initWPFINF2(String s) {
if (!s.trim().isEmpty()) {
WPFINF2 = Byte.parseByte(s);
} else {
WPFINF2 = Byte.MIN_VALUE;
}
}

protected final void initWPFINF3(String s) {
if (!s.trim().isEmpty()) {
WPFINF3 = Byte.parseByte(s);
} else {
WPFINF3 = Byte.MIN_VALUE;
}
}

protected final void initWPFINF4(String s) {
if (!s.trim().isEmpty()) {
WPFINF4 = Byte.parseByte(s);
} else {
WPFINF4 = Byte.MIN_VALUE;
}
}

protected final void initWPFINF5(String s) {
if (!s.trim().isEmpty()) {
WPFINF5 = Byte.parseByte(s);
} else {
WPFINF5 = Byte.MIN_VALUE;
}
}

protected final void initWPFINF6(String s) {
if (!s.trim().isEmpty()) {
WPFINF6 = Byte.parseByte(s);
} else {
WPFINF6 = Byte.MIN_VALUE;
}
}

protected final void initWPFINF7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFINF7 = false;
} else {
WPFINF7 = true;
}
}
}

protected final void initWPFRAS2(String s) {
if (!s.trim().isEmpty()) {
WPFRAS2 = Byte.parseByte(s);
} else {
WPFRAS2 = Byte.MIN_VALUE;
}
}

protected final void initWPFRAS3(String s) {
if (!s.trim().isEmpty()) {
WPFRAS3 = Byte.parseByte(s);
} else {
WPFRAS3 = Byte.MIN_VALUE;
}
}

protected final void initWPFRAS4(String s) {
if (!s.trim().isEmpty()) {
WPFRAS4 = Byte.parseByte(s);
} else {
WPFRAS4 = Byte.MIN_VALUE;
}
}

protected final void initWPFRAS5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFRAS5 = false;
} else {
WPFRAS5 = true;
}
}
}

protected final void initWPFRAS6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFRAS6 = false;
} else {
WPFRAS6 = true;
}
}
}

protected final void initWPFRAS7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFRAS7 = false;
} else {
WPFRAS7 = true;
}
}
}

protected final void initWPFSAP2(String s) {
if (!s.trim().isEmpty()) {
WPFSAP2 = Byte.parseByte(s);
} else {
WPFSAP2 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAP3(String s) {
if (!s.trim().isEmpty()) {
WPFSAP3 = Byte.parseByte(s);
} else {
WPFSAP3 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAP4(String s) {
if (!s.trim().isEmpty()) {
WPFSAP4 = Byte.parseByte(s);
} else {
WPFSAP4 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAP5(String s) {
if (!s.trim().isEmpty()) {
WPFSAP5 = Byte.parseByte(s);
} else {
WPFSAP5 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAP6(String s) {
if (!s.trim().isEmpty()) {
WPFSAP6 = Byte.parseByte(s);
} else {
WPFSAP6 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSAP7 = false;
} else {
WPFSAP7 = true;
}
}
}

protected final void initWPFSAV2(String s) {
if (!s.trim().isEmpty()) {
WPFSAV2 = Byte.parseByte(s);
} else {
WPFSAV2 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAV3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSAV3 = false;
} else {
WPFSAV3 = true;
}
}
}

protected final void initWPFSAV4(String s) {
if (!s.trim().isEmpty()) {
WPFSAV4 = Byte.parseByte(s);
} else {
WPFSAV4 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAV5(String s) {
if (!s.trim().isEmpty()) {
WPFSAV5 = Byte.parseByte(s);
} else {
WPFSAV5 = Byte.MIN_VALUE;
}
}

protected final void initWPFSAV6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSAV6 = false;
} else {
WPFSAV6 = true;
}
}
}

protected final void initWPFSAV7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSAV7 = false;
} else {
WPFSAV7 = true;
}
}
}

protected final void initWPFSC(String s) {
if (!s.trim().isEmpty()) {
WPFSC = Byte.parseByte(s);
} else {
WPFSC = Byte.MIN_VALUE;
}
}

protected final void initWPFSC2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSC2 = false;
} else {
WPFSC2 = true;
}
}
}

protected final void initWPFSC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSC3 = false;
} else {
WPFSC3 = true;
}
}
}

protected final void initWPFSC4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSC4 = false;
} else {
WPFSC4 = true;
}
}
}

protected final void initWPFSC5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSC5 = false;
} else {
WPFSC5 = true;
}
}
}

protected final void initWPFSC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSC6 = false;
} else {
WPFSC6 = true;
}
}
}

protected final void initWPFSC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSC7 = false;
} else {
WPFSC7 = true;
}
}
}

protected final void initWPFSCO2(String s) {
if (!s.trim().isEmpty()) {
WPFSCO2 = Byte.parseByte(s);
} else {
WPFSCO2 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCO3(String s) {
if (!s.trim().isEmpty()) {
WPFSCO3 = Byte.parseByte(s);
} else {
WPFSCO3 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCO4(String s) {
if (!s.trim().isEmpty()) {
WPFSCO4 = Byte.parseByte(s);
} else {
WPFSCO4 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCO5(String s) {
if (!s.trim().isEmpty()) {
WPFSCO5 = Byte.parseByte(s);
} else {
WPFSCO5 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCO6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSCO6 = false;
} else {
WPFSCO6 = true;
}
}
}

protected final void initWPFSCO7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSCO7 = false;
} else {
WPFSCO7 = true;
}
}
}

protected final void initWPFSCP2(String s) {
if (!s.trim().isEmpty()) {
WPFSCP2 = Byte.parseByte(s);
} else {
WPFSCP2 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCP3(String s) {
if (!s.trim().isEmpty()) {
WPFSCP3 = Byte.parseByte(s);
} else {
WPFSCP3 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCP4(String s) {
if (!s.trim().isEmpty()) {
WPFSCP4 = Byte.parseByte(s);
} else {
WPFSCP4 = Byte.MIN_VALUE;
}
}

protected final void initWPFSCP5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSCP5 = false;
} else {
WPFSCP5 = true;
}
}
}

protected final void initWPFSCP6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSCP6 = false;
} else {
WPFSCP6 = true;
}
}
}

protected final void initWPFSCP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSCP7 = false;
} else {
WPFSCP7 = true;
}
}
}

protected final void initWPFSEC(String s) {
if (!s.trim().isEmpty()) {
WPFSEC = Byte.parseByte(s);
} else {
WPFSEC = Byte.MIN_VALUE;
}
}

protected final void initWPFSEC2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPFSEC2 = false;
} else {
WPFSEC2 = true;
}
}
}

protected final void initWPFSEC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSEC3 = false;
} else {
WPFSEC3 = true;
}
}
}

protected final void initWPFSEC4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSEC4 = false;
} else {
WPFSEC4 = true;
}
}
}

protected final void initWPFSEC5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSEC5 = false;
} else {
WPFSEC5 = true;
}
}
}

protected final void initWPFSEC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSEC6 = false;
} else {
WPFSEC6 = true;
}
}
}

protected final void initWPFSEC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPFSEC7 = false;
} else {
WPFSEC7 = true;
}
}
}

protected final void initWPHLWZ(String s) {
if (!s.trim().isEmpty()) {
WPHLWZ = Byte.parseByte(s);
} else {
WPHLWZ = Byte.MIN_VALUE;
}
}

protected final void initWPIFS295(String s) {
if (!s.trim().isEmpty()) {
WPIFS295 = Byte.parseByte(s);
} else {
WPIFS295 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS2AC(String s) {
if (!s.trim().isEmpty()) {
WPIFS2AC = Byte.parseByte(s);
} else {
WPIFS2AC = Byte.MIN_VALUE;
}
}

protected final void initWPIFS2CO(String s) {
if (!s.trim().isEmpty()) {
WPIFS2CO = Byte.parseByte(s);
} else {
WPIFS2CO = Byte.MIN_VALUE;
}
}

protected final void initWPIFS2EM(String s) {
if (!s.trim().isEmpty()) {
WPIFS2EM = Byte.parseByte(s);
} else {
WPIFS2EM = Byte.MIN_VALUE;
}
}

protected final void initWPIFS2FA(String s) {
if (!s.trim().isEmpty()) {
WPIFS2FA = Byte.parseByte(s);
} else {
WPIFS2FA = Byte.MIN_VALUE;
}
}

protected final void initWPIFS2NO(String s) {
if (!s.trim().isEmpty()) {
WPIFS2NO = Byte.parseByte(s);
} else {
WPIFS2NO = Byte.MIN_VALUE;
}
}

protected final void initWPIFS2PR(String s) {
if (!s.trim().isEmpty()) {
WPIFS2PR = Byte.parseByte(s);
} else {
WPIFS2PR = Byte.MIN_VALUE;
}
}

protected final void initWPIFS2RE(String s) {
if (!s.trim().isEmpty()) {
WPIFS2RE = Byte.parseByte(s);
} else {
WPIFS2RE = Byte.MIN_VALUE;
}
}

protected final void initWPIFS2RP(String s) {
if (!s.trim().isEmpty()) {
WPIFS2RP = Byte.parseByte(s);
} else {
WPIFS2RP = Byte.MIN_VALUE;
}
}

protected final void initWPIFS395(String s) {
if (!s.trim().isEmpty()) {
WPIFS395 = Byte.parseByte(s);
} else {
WPIFS395 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS3AC(String s) {
if (!s.trim().isEmpty()) {
WPIFS3AC = Byte.parseByte(s);
} else {
WPIFS3AC = Byte.MIN_VALUE;
}
}

protected final void initWPIFS3CO(String s) {
if (!s.trim().isEmpty()) {
WPIFS3CO = Byte.parseByte(s);
} else {
WPIFS3CO = Byte.MIN_VALUE;
}
}

protected final void initWPIFS3EM(String s) {
if (!s.trim().isEmpty()) {
WPIFS3EM = Byte.parseByte(s);
} else {
WPIFS3EM = Byte.MIN_VALUE;
}
}

protected final void initWPIFS3FA(String s) {
if (!s.trim().isEmpty()) {
WPIFS3FA = Byte.parseByte(s);
} else {
WPIFS3FA = Byte.MIN_VALUE;
}
}

protected final void initWPIFS3NO(String s) {
if (!s.trim().isEmpty()) {
WPIFS3NO = Byte.parseByte(s);
} else {
WPIFS3NO = Byte.MIN_VALUE;
}
}

protected final void initWPIFS3PR(String s) {
if (!s.trim().isEmpty()) {
WPIFS3PR = Byte.parseByte(s);
} else {
WPIFS3PR = Byte.MIN_VALUE;
}
}

protected final void initWPIFS3RE(String s) {
if (!s.trim().isEmpty()) {
WPIFS3RE = Byte.parseByte(s);
} else {
WPIFS3RE = Byte.MIN_VALUE;
}
}

protected final void initWPIFS3RP(String s) {
if (!s.trim().isEmpty()) {
WPIFS3RP = Byte.parseByte(s);
} else {
WPIFS3RP = Byte.MIN_VALUE;
}
}

protected final void initWPIFS495(String s) {
if (!s.trim().isEmpty()) {
WPIFS495 = Byte.parseByte(s);
} else {
WPIFS495 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS4AC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS4AC = false;
} else {
WPIFS4AC = true;
}
}
}

protected final void initWPIFS4CO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS4CO = false;
} else {
WPIFS4CO = true;
}
}
}

protected final void initWPIFS4EM(String s) {
if (!s.trim().isEmpty()) {
WPIFS4EM = Byte.parseByte(s);
} else {
WPIFS4EM = Byte.MIN_VALUE;
}
}

protected final void initWPIFS4FA(String s) {
if (!s.trim().isEmpty()) {
WPIFS4FA = Byte.parseByte(s);
} else {
WPIFS4FA = Byte.MIN_VALUE;
}
}

protected final void initWPIFS4NO(String s) {
if (!s.trim().isEmpty()) {
WPIFS4NO = Byte.parseByte(s);
} else {
WPIFS4NO = Byte.MIN_VALUE;
}
}

protected final void initWPIFS4PR(String s) {
if (!s.trim().isEmpty()) {
WPIFS4PR = Byte.parseByte(s);
} else {
WPIFS4PR = Byte.MIN_VALUE;
}
}

protected final void initWPIFS4RE(String s) {
if (!s.trim().isEmpty()) {
WPIFS4RE = Byte.parseByte(s);
} else {
WPIFS4RE = Byte.MIN_VALUE;
}
}

protected final void initWPIFS4RP(String s) {
if (!s.trim().isEmpty()) {
WPIFS4RP = Byte.parseByte(s);
} else {
WPIFS4RP = Byte.MIN_VALUE;
}
}

protected final void initWPIFS595(String s) {
if (!s.trim().isEmpty()) {
WPIFS595 = Byte.parseByte(s);
} else {
WPIFS595 = Byte.MIN_VALUE;
}
}

protected final void initWPIFS5AC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS5AC = false;
} else {
WPIFS5AC = true;
}
}
}

protected final void initWPIFS5CO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS5CO = false;
} else {
WPIFS5CO = true;
}
}
}

protected final void initWPIFS5EM(String s) {
if (!s.trim().isEmpty()) {
WPIFS5EM = Byte.parseByte(s);
} else {
WPIFS5EM = Byte.MIN_VALUE;
}
}

protected final void initWPIFS5FA(String s) {
if (!s.trim().isEmpty()) {
WPIFS5FA = Byte.parseByte(s);
} else {
WPIFS5FA = Byte.MIN_VALUE;
}
}

protected final void initWPIFS5NO(String s) {
if (!s.trim().isEmpty()) {
WPIFS5NO = Byte.parseByte(s);
} else {
WPIFS5NO = Byte.MIN_VALUE;
}
}

protected final void initWPIFS5PR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS5PR = false;
} else {
WPIFS5PR = true;
}
}
}

protected final void initWPIFS5RE(String s) {
if (!s.trim().isEmpty()) {
WPIFS5RE = Byte.parseByte(s);
} else {
WPIFS5RE = Byte.MIN_VALUE;
}
}

protected final void initWPIFS5RP(String s) {
if (!s.trim().isEmpty()) {
WPIFS5RP = Byte.parseByte(s);
} else {
WPIFS5RP = Byte.MIN_VALUE;
}
}

protected final void initWPIFS695(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS695 = false;
} else {
WPIFS695 = true;
}
}
}

protected final void initWPIFS6AC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS6AC = false;
} else {
WPIFS6AC = true;
}
}
}

protected final void initWPIFS6CO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS6CO = false;
} else {
WPIFS6CO = true;
}
}
}

protected final void initWPIFS6EM(String s) {
if (!s.trim().isEmpty()) {
WPIFS6EM = Byte.parseByte(s);
} else {
WPIFS6EM = Byte.MIN_VALUE;
}
}

protected final void initWPIFS6FA(String s) {
if (!s.trim().isEmpty()) {
WPIFS6FA = Byte.parseByte(s);
} else {
WPIFS6FA = Byte.MIN_VALUE;
}
}

protected final void initWPIFS6NO(String s) {
if (!s.trim().isEmpty()) {
WPIFS6NO = Byte.parseByte(s);
} else {
WPIFS6NO = Byte.MIN_VALUE;
}
}

protected final void initWPIFS6PR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS6PR = false;
} else {
WPIFS6PR = true;
}
}
}

protected final void initWPIFS6RE(String s) {
if (!s.trim().isEmpty()) {
WPIFS6RE = Byte.parseByte(s);
} else {
WPIFS6RE = Byte.MIN_VALUE;
}
}

protected final void initWPIFS6RP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS6RP = false;
} else {
WPIFS6RP = true;
}
}
}

protected final void initWPIFS795(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS795 = false;
} else {
WPIFS795 = true;
}
}
}

protected final void initWPIFS7AC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS7AC = false;
} else {
WPIFS7AC = true;
}
}
}

protected final void initWPIFS7CO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS7CO = false;
} else {
WPIFS7CO = true;
}
}
}

protected final void initWPIFS7EM(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS7EM = false;
} else {
WPIFS7EM = true;
}
}
}

protected final void initWPIFS7FA(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS7FA = false;
} else {
WPIFS7FA = true;
}
}
}

protected final void initWPIFS7NO(String s) {
if (!s.trim().isEmpty()) {
WPIFS7NO = Byte.parseByte(s);
} else {
WPIFS7NO = Byte.MIN_VALUE;
}
}

protected final void initWPIFS7PR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS7PR = false;
} else {
WPIFS7PR = true;
}
}
}

protected final void initWPIFS7RE(String s) {
if (!s.trim().isEmpty()) {
WPIFS7RE = Byte.parseByte(s);
} else {
WPIFS7RE = Byte.MIN_VALUE;
}
}

protected final void initWPIFS7RP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPIFS7RP = false;
} else {
WPIFS7RP = true;
}
}
}

protected final void initWPIFS95(String s) {
if (!s.trim().isEmpty()) {
WPIFS95 = Byte.parseByte(s);
} else {
WPIFS95 = Byte.MIN_VALUE;
}
}

protected final void initWPIFSAC(String s) {
if (!s.trim().isEmpty()) {
WPIFSAC = Byte.parseByte(s);
} else {
WPIFSAC = Byte.MIN_VALUE;
}
}

protected final void initWPIFSCO(String s) {
if (!s.trim().isEmpty()) {
WPIFSCO = Byte.parseByte(s);
} else {
WPIFSCO = Byte.MIN_VALUE;
}
}

protected final void initWPIFSEM(String s) {
if (!s.trim().isEmpty()) {
WPIFSEM = Byte.parseByte(s);
} else {
WPIFSEM = Byte.MIN_VALUE;
}
}

protected final void initWPIFSFA(String s) {
if (!s.trim().isEmpty()) {
WPIFSFA = Byte.parseByte(s);
} else {
WPIFSFA = Byte.MIN_VALUE;
}
}

protected final void initWPIFSNO(String s) {
if (!s.trim().isEmpty()) {
WPIFSNO = Byte.parseByte(s);
} else {
WPIFSNO = Byte.MIN_VALUE;
}
}

protected final void initWPIFSPR(String s) {
if (!s.trim().isEmpty()) {
WPIFSPR = Byte.parseByte(s);
} else {
WPIFSPR = Byte.MIN_VALUE;
}
}

protected final void initWPIFSRE(String s) {
if (!s.trim().isEmpty()) {
WPIFSRE = Byte.parseByte(s);
} else {
WPIFSRE = Byte.MIN_VALUE;
}
}

protected final void initWPIFSRP(String s) {
if (!s.trim().isEmpty()) {
WPIFSRP = Byte.parseByte(s);
} else {
WPIFSRP = Byte.MIN_VALUE;
}
}

protected final void initWPINC2E(String s) {
if (!s.trim().isEmpty()) {
WPINC2E = Byte.parseByte(s);
} else {
WPINC2E = Byte.MIN_VALUE;
}
}

protected final void initWPINC2L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPINC2L = false;
} else {
WPINC2L = true;
}
}
}

protected final void initWPINC2R(String s) {
if (!s.trim().isEmpty()) {
WPINC2R = Byte.parseByte(s);
} else {
WPINC2R = Byte.MIN_VALUE;
}
}

protected final void initWPINC2U(String s) {
if (!s.trim().isEmpty()) {
WPINC2U = Short.parseShort(s);
} else {
WPINC2U = Short.MIN_VALUE;
}
}

protected final void initWPINC3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC3E = false;
} else {
WPINC3E = true;
}
}
}

protected final void initWPINC3L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC3L = false;
} else {
WPINC3L = true;
}
}
}

protected final void initWPINC3R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC3R = false;
} else {
WPINC3R = true;
}
}
}

protected final void initWPINC3U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC3U = false;
} else {
WPINC3U = true;
}
}
}

protected final void initWPINC4E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC4E = false;
} else {
WPINC4E = true;
}
}
}

protected final void initWPINC4L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
WPINC4L = false;
} else {
WPINC4L = true;
}
}
}

protected final void initWPINC4R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC4R = false;
} else {
WPINC4R = true;
}
}
}

protected final void initWPINC4U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -9) {
WPINC4U = false;
} else {
WPINC4U = true;
}
}
}

protected final void initWPINC5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC5E = false;
} else {
WPINC5E = true;
}
}
}

protected final void initWPINC5L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC5L = false;
} else {
WPINC5L = true;
}
}
}

protected final void initWPINC5R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC5R = false;
} else {
WPINC5R = true;
}
}
}

protected final void initWPINC5U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC5U = false;
} else {
WPINC5U = true;
}
}
}

protected final void initWPINC6E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC6E = false;
} else {
WPINC6E = true;
}
}
}

protected final void initWPINC6L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC6L = false;
} else {
WPINC6L = true;
}
}
}

protected final void initWPINC6R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC6R = false;
} else {
WPINC6R = true;
}
}
}

protected final void initWPINC6U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC6U = false;
} else {
WPINC6U = true;
}
}
}

protected final void initWPINC7E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC7E = false;
} else {
WPINC7E = true;
}
}
}

protected final void initWPINC7L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC7L = false;
} else {
WPINC7L = true;
}
}
}

protected final void initWPINC7R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC7R = false;
} else {
WPINC7R = true;
}
}
}

protected final void initWPINC7U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINC7U = false;
} else {
WPINC7U = true;
}
}
}

protected final void initWPINCD(String s) {
if (!s.trim().isEmpty()) {
WPINCD = Double.parseDouble(s);
} else {
WPINCD = Double.NaN;
}
}

protected final void initWPINCD2(String s) {
if (!s.trim().isEmpty()) {
WPINCD2 = Short.parseShort(s);
} else {
WPINCD2 = Short.MIN_VALUE;
}
}

protected final void initWPINCD3(String s) {
if (!s.trim().isEmpty()) {
WPINCD3 = Short.parseShort(s);
} else {
WPINCD3 = Short.MIN_VALUE;
}
}

protected final void initWPINCD4(String s) {
if (!s.trim().isEmpty()) {
WPINCD4 = Byte.parseByte(s);
} else {
WPINCD4 = Byte.MIN_VALUE;
}
}

protected final void initWPINCD5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINCD5 = false;
} else {
WPINCD5 = true;
}
}
}

protected final void initWPINCD6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINCD6 = false;
} else {
WPINCD6 = true;
}
}
}

protected final void initWPINCD7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPINCD7 = false;
} else {
WPINCD7 = true;
}
}
}

protected final void initWPINCDE(String s) {
if (!s.trim().isEmpty()) {
WPINCDE = Byte.parseByte(s);
} else {
WPINCDE = Byte.MIN_VALUE;
}
}

protected final void initWPINCDL(String s) {
if (!s.trim().isEmpty()) {
WPINCDL = Double.parseDouble(s);
} else {
WPINCDL = Double.NaN;
}
}

protected final void initWPINCDR(String s) {
if (!s.trim().isEmpty()) {
WPINCDR = Byte.parseByte(s);
} else {
WPINCDR = Byte.MIN_VALUE;
}
}

protected final void initWPINCDU(String s) {
if (!s.trim().isEmpty()) {
WPINCDU = Double.parseDouble(s);
} else {
WPINCDU = Double.NaN;
}
}

protected final void initWPINF2(String s) {
if (!s.trim().isEmpty()) {
WPINF2 = Byte.parseByte(s);
} else {
WPINF2 = Byte.MIN_VALUE;
}
}

protected final void initWPINF3(String s) {
if (!s.trim().isEmpty()) {
WPINF3 = Byte.parseByte(s);
} else {
WPINF3 = Byte.MIN_VALUE;
}
}

protected final void initWPINF4(String s) {
if (!s.trim().isEmpty()) {
WPINF4 = Byte.parseByte(s);
} else {
WPINF4 = Byte.MIN_VALUE;
}
}

protected final void initWPINF5(String s) {
if (!s.trim().isEmpty()) {
WPINF5 = Byte.parseByte(s);
} else {
WPINF5 = Byte.MIN_VALUE;
}
}

protected final void initWPINF6(String s) {
if (!s.trim().isEmpty()) {
WPINF6 = Byte.parseByte(s);
} else {
WPINF6 = Byte.MIN_VALUE;
}
}

protected final void initWPINF7(String s) {
if (!s.trim().isEmpty()) {
WPINF7 = Byte.parseByte(s);
} else {
WPINF7 = Byte.MIN_VALUE;
}
}

protected final void initWPLCH95(String s) {
if (!s.trim().isEmpty()) {
WPLCH95 = Byte.parseByte(s);
} else {
WPLCH95 = Byte.MIN_VALUE;
}
}

protected final void initWPLCH96(String s) {
if (!s.trim().isEmpty()) {
WPLCH96 = Byte.parseByte(s);
} else {
WPLCH96 = Byte.MIN_VALUE;
}
}

protected final void initWPLCHAD(String s) {
if (!s.trim().isEmpty()) {
WPLCHAD = Byte.parseByte(s);
} else {
WPLCHAD = Byte.MIN_VALUE;
}
}

protected final void initWPLCHFL(String s) {
if (!s.trim().isEmpty()) {
WPLCHFL = Byte.parseByte(s);
} else {
WPLCHFL = Byte.MIN_VALUE;
}
}

protected final void initWPLCHHO(String s) {
if (!s.trim().isEmpty()) {
WPLCHHO = Byte.parseByte(s);
} else {
WPLCHHO = Byte.MIN_VALUE;
}
}

protected final void initWPLCHHR(String s) {
if (!s.trim().isEmpty()) {
WPLCHHR = Byte.parseByte(s);
} else {
WPLCHHR = Byte.MIN_VALUE;
}
}

protected final void initWPLCHM85(String s) {
if (!s.trim().isEmpty()) {
WPLCHM85 = Byte.parseByte(s);
} else {
WPLCHM85 = Byte.MIN_VALUE;
}
}

protected final void initWPLCHM86(String s) {
if (!s.trim().isEmpty()) {
WPLCHM86 = Byte.parseByte(s);
} else {
WPLCHM86 = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMAD(String s) {
if (!s.trim().isEmpty()) {
WPLCHMAD = Byte.parseByte(s);
} else {
WPLCHMAD = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMBO(String s) {
if (!s.trim().isEmpty()) {
WPLCHMBO = Byte.parseByte(s);
} else {
WPLCHMBO = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMCO(String s) {
if (!s.trim().isEmpty()) {
WPLCHMCO = Byte.parseByte(s);
} else {
WPLCHMCO = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMDE(String s) {
if (!s.trim().isEmpty()) {
WPLCHMDE = Byte.parseByte(s);
} else {
WPLCHMDE = Byte.MIN_VALUE;
}
}

protected final void initWPLCHME(String s) {
if (!s.trim().isEmpty()) {
WPLCHME = Byte.parseByte(s);
} else {
WPLCHME = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMFL(String s) {
if (!s.trim().isEmpty()) {
WPLCHMFL = Byte.parseByte(s);
} else {
WPLCHMFL = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMHO(String s) {
if (!s.trim().isEmpty()) {
WPLCHMHO = Byte.parseByte(s);
} else {
WPLCHMHO = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMHR(String s) {
if (!s.trim().isEmpty()) {
WPLCHMHR = Byte.parseByte(s);
} else {
WPLCHMHR = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMLH(String s) {
if (!s.trim().isEmpty()) {
WPLCHMLH = Byte.parseByte(s);
} else {
WPLCHMLH = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMLO(String s) {
if (!s.trim().isEmpty()) {
WPLCHMLO = Byte.parseByte(s);
} else {
WPLCHMLO = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMME(String s) {
if (!s.trim().isEmpty()) {
WPLCHMME = Byte.parseByte(s);
} else {
WPLCHMME = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMPH(String s) {
if (!s.trim().isEmpty()) {
WPLCHMPH = Byte.parseByte(s);
} else {
WPLCHMPH = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMRT(String s) {
if (!s.trim().isEmpty()) {
WPLCHMRT = Byte.parseByte(s);
} else {
WPLCHMRT = Byte.MIN_VALUE;
}
}

protected final void initWPLCHMSA(String s) {
if (!s.trim().isEmpty()) {
WPLCHMSA = Byte.parseByte(s);
} else {
WPLCHMSA = Byte.MIN_VALUE;
}
}

protected final void initWPLCHPH(String s) {
if (!s.trim().isEmpty()) {
WPLCHPH = Byte.parseByte(s);
} else {
WPLCHPH = Byte.MIN_VALUE;
}
}

protected final void initWPLCOM2(String s) {
if (!s.trim().isEmpty()) {
WPLCOM2 = Byte.parseByte(s);
} else {
WPLCOM2 = Byte.MIN_VALUE;
}
}

protected final void initWPLCOM3(String s) {
if (!s.trim().isEmpty()) {
WPLCOM3 = Byte.parseByte(s);
} else {
WPLCOM3 = Byte.MIN_VALUE;
}
}

protected final void initWPLCOM4(String s) {
if (!s.trim().isEmpty()) {
WPLCOM4 = Byte.parseByte(s);
} else {
WPLCOM4 = Byte.MIN_VALUE;
}
}

protected final void initWPLCOM5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLCOM5 = false;
} else {
WPLCOM5 = true;
}
}
}

protected final void initWPLCOM6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLCOM6 = false;
} else {
WPLCOM6 = true;
}
}
}

protected final void initWPLCOM7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLCOM7 = false;
} else {
WPLCOM7 = true;
}
}
}

protected final void initWPLCOY2(String s) {
if (!s.trim().isEmpty()) {
WPLCOY2 = Short.parseShort(s);
} else {
WPLCOY2 = Short.MIN_VALUE;
}
}

protected final void initWPLCOY3(String s) {
if (!s.trim().isEmpty()) {
WPLCOY3 = Short.parseShort(s);
} else {
WPLCOY3 = Short.MIN_VALUE;
}
}

protected final void initWPLCOY4(String s) {
if (!s.trim().isEmpty()) {
WPLCOY4 = Short.parseShort(s);
} else {
WPLCOY4 = Short.MIN_VALUE;
}
}

protected final void initWPLCOY5(String s) {
if (!s.trim().isEmpty()) {
WPLCOY5 = Short.parseShort(s);
} else {
WPLCOY5 = Short.MIN_VALUE;
}
}

protected final void initWPLCOY6(String s) {
if (!s.trim().isEmpty()) {
WPLCOY6 = Short.parseShort(s);
} else {
WPLCOY6 = Short.MIN_VALUE;
}
}

protected final void initWPLCOY7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLCOY7 = false;
} else {
WPLCOY7 = true;
}
}
}

protected final void initWPLFTP295(String s) {
if (!s.trim().isEmpty()) {
WPLFTP295 = Byte.parseByte(s);
} else {
WPLFTP295 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP2AF(String s) {
if (!s.trim().isEmpty()) {
WPLFTP2AF = Byte.parseByte(s);
} else {
WPLFTP2AF = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP2CH(String s) {
if (!s.trim().isEmpty()) {
WPLFTP2CH = Byte.parseByte(s);
} else {
WPLFTP2CH = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP2EL(String s) {
if (!s.trim().isEmpty()) {
WPLFTP2EL = Byte.parseByte(s);
} else {
WPLFTP2EL = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP2OF(String s) {
if (!s.trim().isEmpty()) {
WPLFTP2OF = Byte.parseByte(s);
} else {
WPLFTP2OF = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP2RE(String s) {
if (!s.trim().isEmpty()) {
WPLFTP2RE = Byte.parseByte(s);
} else {
WPLFTP2RE = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP2RT(String s) {
if (!s.trim().isEmpty()) {
WPLFTP2RT = Byte.parseByte(s);
} else {
WPLFTP2RT = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP395(String s) {
if (!s.trim().isEmpty()) {
WPLFTP395 = Byte.parseByte(s);
} else {
WPLFTP395 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP3AF(String s) {
if (!s.trim().isEmpty()) {
WPLFTP3AF = Byte.parseByte(s);
} else {
WPLFTP3AF = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP3CH(String s) {
if (!s.trim().isEmpty()) {
WPLFTP3CH = Byte.parseByte(s);
} else {
WPLFTP3CH = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP3EL(String s) {
if (!s.trim().isEmpty()) {
WPLFTP3EL = Byte.parseByte(s);
} else {
WPLFTP3EL = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP3OF(String s) {
if (!s.trim().isEmpty()) {
WPLFTP3OF = Byte.parseByte(s);
} else {
WPLFTP3OF = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP3RE(String s) {
if (!s.trim().isEmpty()) {
WPLFTP3RE = Byte.parseByte(s);
} else {
WPLFTP3RE = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP3RT(String s) {
if (!s.trim().isEmpty()) {
WPLFTP3RT = Byte.parseByte(s);
} else {
WPLFTP3RT = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP495(String s) {
if (!s.trim().isEmpty()) {
WPLFTP495 = Byte.parseByte(s);
} else {
WPLFTP495 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP4AF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP4AF = false;
} else {
WPLFTP4AF = true;
}
}
}

protected final void initWPLFTP4CH(String s) {
if (!s.trim().isEmpty()) {
WPLFTP4CH = Byte.parseByte(s);
} else {
WPLFTP4CH = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP4EL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP4EL = false;
} else {
WPLFTP4EL = true;
}
}
}

protected final void initWPLFTP4OF(String s) {
if (!s.trim().isEmpty()) {
WPLFTP4OF = Byte.parseByte(s);
} else {
WPLFTP4OF = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP4RE(String s) {
if (!s.trim().isEmpty()) {
WPLFTP4RE = Byte.parseByte(s);
} else {
WPLFTP4RE = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP4RT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP4RT = false;
} else {
WPLFTP4RT = true;
}
}
}

protected final void initWPLFTP595(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP595 = false;
} else {
WPLFTP595 = true;
}
}
}

protected final void initWPLFTP5AF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP5AF = false;
} else {
WPLFTP5AF = true;
}
}
}

protected final void initWPLFTP5CH(String s) {
if (!s.trim().isEmpty()) {
WPLFTP5CH = Byte.parseByte(s);
} else {
WPLFTP5CH = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP5EL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP5EL = false;
} else {
WPLFTP5EL = true;
}
}
}

protected final void initWPLFTP5OF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP5OF = false;
} else {
WPLFTP5OF = true;
}
}
}

protected final void initWPLFTP5RE(String s) {
if (!s.trim().isEmpty()) {
WPLFTP5RE = Byte.parseByte(s);
} else {
WPLFTP5RE = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP5RT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP5RT = false;
} else {
WPLFTP5RT = true;
}
}
}

protected final void initWPLFTP695(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP695 = false;
} else {
WPLFTP695 = true;
}
}
}

protected final void initWPLFTP6AF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP6AF = false;
} else {
WPLFTP6AF = true;
}
}
}

protected final void initWPLFTP6CH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP6CH = false;
} else {
WPLFTP6CH = true;
}
}
}

protected final void initWPLFTP6EL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP6EL = false;
} else {
WPLFTP6EL = true;
}
}
}

protected final void initWPLFTP6OF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP6OF = false;
} else {
WPLFTP6OF = true;
}
}
}

protected final void initWPLFTP6RE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP6RE = false;
} else {
WPLFTP6RE = true;
}
}
}

protected final void initWPLFTP6RT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP6RT = false;
} else {
WPLFTP6RT = true;
}
}
}

protected final void initWPLFTP795(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP795 = false;
} else {
WPLFTP795 = true;
}
}
}

protected final void initWPLFTP7AF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP7AF = false;
} else {
WPLFTP7AF = true;
}
}
}

protected final void initWPLFTP7CH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP7CH = false;
} else {
WPLFTP7CH = true;
}
}
}

protected final void initWPLFTP7EL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP7EL = false;
} else {
WPLFTP7EL = true;
}
}
}

protected final void initWPLFTP7OF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP7OF = false;
} else {
WPLFTP7OF = true;
}
}
}

protected final void initWPLFTP7RE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP7RE = false;
} else {
WPLFTP7RE = true;
}
}
}

protected final void initWPLFTP7RT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLFTP7RT = false;
} else {
WPLFTP7RT = true;
}
}
}

protected final void initWPLFTP95(String s) {
if (!s.trim().isEmpty()) {
WPLFTP95 = Byte.parseByte(s);
} else {
WPLFTP95 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPAF(String s) {
if (!s.trim().isEmpty()) {
WPLFTPAF = Byte.parseByte(s);
} else {
WPLFTPAF = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPCH(String s) {
if (!s.trim().isEmpty()) {
WPLFTPCH = Byte.parseByte(s);
} else {
WPLFTPCH = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPEL(String s) {
if (!s.trim().isEmpty()) {
WPLFTPEL = Byte.parseByte(s);
} else {
WPLFTPEL = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPOF(String s) {
if (!s.trim().isEmpty()) {
WPLFTPOF = Byte.parseByte(s);
} else {
WPLFTPOF = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPRE(String s) {
if (!s.trim().isEmpty()) {
WPLFTPRE = Byte.parseByte(s);
} else {
WPLFTPRE = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPRT(String s) {
if (!s.trim().isEmpty()) {
WPLFTPRT = Byte.parseByte(s);
} else {
WPLFTPRT = Byte.MIN_VALUE;
}
}

protected final void initWPLIMWK(String s) {
if (!s.trim().isEmpty()) {
WPLIMWK = Byte.parseByte(s);
} else {
WPLIMWK = Byte.MIN_VALUE;
}
}

protected final void initWPLJO95(String s) {
if (!s.trim().isEmpty()) {
WPLJO95 = Byte.parseByte(s);
} else {
WPLJO95 = Byte.MIN_VALUE;
}
}

protected final void initWPLJOBM(String s) {
if (!s.trim().isEmpty()) {
WPLJOBM = Byte.parseByte(s);
} else {
WPLJOBM = Byte.MIN_VALUE;
}
}

protected final void initWPLJOCA(String s) {
if (!s.trim().isEmpty()) {
WPLJOCA = Byte.parseByte(s);
} else {
WPLJOCA = Byte.MIN_VALUE;
}
}

protected final void initWPLJOCL(String s) {
if (!s.trim().isEmpty()) {
WPLJOCL = Byte.parseByte(s);
} else {
WPLJOCL = Byte.MIN_VALUE;
}
}

protected final void initWPLJODI(String s) {
if (!s.trim().isEmpty()) {
WPLJODI = Byte.parseByte(s);
} else {
WPLJODI = Byte.MIN_VALUE;
}
}

protected final void initWPLJOFE(String s) {
if (!s.trim().isEmpty()) {
WPLJOFE = Byte.parseByte(s);
} else {
WPLJOFE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOIL(String s) {
if (!s.trim().isEmpty()) {
WPLJOIL = Byte.parseByte(s);
} else {
WPLJOIL = Byte.MIN_VALUE;
}
}

protected final void initWPLJOM85(String s) {
if (!s.trim().isEmpty()) {
WPLJOM85 = Byte.parseByte(s);
} else {
WPLJOM85 = Byte.MIN_VALUE;
}
}

protected final void initWPLJOM86(String s) {
if (!s.trim().isEmpty()) {
WPLJOM86 = Byte.parseByte(s);
} else {
WPLJOM86 = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMBE(String s) {
if (!s.trim().isEmpty()) {
WPLJOMBE = Byte.parseByte(s);
} else {
WPLJOMBE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMCA(String s) {
if (!s.trim().isEmpty()) {
WPLJOMCA = Byte.parseByte(s);
} else {
WPLJOMCA = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMCF(String s) {
if (!s.trim().isEmpty()) {
WPLJOMCF = Byte.parseByte(s);
} else {
WPLJOMCF = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMCL(String s) {
if (!s.trim().isEmpty()) {
WPLJOMCL = Byte.parseByte(s);
} else {
WPLJOMCL = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMDI(String s) {
if (!s.trim().isEmpty()) {
WPLJOMDI = Byte.parseByte(s);
} else {
WPLJOMDI = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMER(String s) {
if (!s.trim().isEmpty()) {
WPLJOMER = Byte.parseByte(s);
} else {
WPLJOMER = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMFE(String s) {
if (!s.trim().isEmpty()) {
WPLJOMFE = Byte.parseByte(s);
} else {
WPLJOMFE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMIL(String s) {
if (!s.trim().isEmpty()) {
WPLJOMIL = Byte.parseByte(s);
} else {
WPLJOMIL = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMME(String s) {
if (!s.trim().isEmpty()) {
WPLJOMME = Byte.parseByte(s);
} else {
WPLJOMME = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMMO(String s) {
if (!s.trim().isEmpty()) {
WPLJOMMO = Byte.parseByte(s);
} else {
WPLJOMMO = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMO(String s) {
if (!s.trim().isEmpty()) {
WPLJOMO = Byte.parseByte(s);
} else {
WPLJOMO = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMPR(String s) {
if (!s.trim().isEmpty()) {
WPLJOMPR = Byte.parseByte(s);
} else {
WPLJOMPR = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMRE(String s) {
if (!s.trim().isEmpty()) {
WPLJOMRE = Byte.parseByte(s);
} else {
WPLJOMRE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMSA(String s) {
if (!s.trim().isEmpty()) {
WPLJOMSA = Byte.parseByte(s);
} else {
WPLJOMSA = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMSE(String s) {
if (!s.trim().isEmpty()) {
WPLJOMSE = Byte.parseByte(s);
} else {
WPLJOMSE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMSP(String s) {
if (!s.trim().isEmpty()) {
WPLJOMSP = Byte.parseByte(s);
} else {
WPLJOMSP = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMTI(String s) {
if (!s.trim().isEmpty()) {
WPLJOMTI = Byte.parseByte(s);
} else {
WPLJOMTI = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMVO(String s) {
if (!s.trim().isEmpty()) {
WPLJOMVO = Byte.parseByte(s);
} else {
WPLJOMVO = Byte.MIN_VALUE;
}
}

protected final void initWPLJORE(String s) {
if (!s.trim().isEmpty()) {
WPLJORE = Byte.parseByte(s);
} else {
WPLJORE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOSP(String s) {
if (!s.trim().isEmpty()) {
WPLJOSP = Byte.parseByte(s);
} else {
WPLJOSP = Byte.MIN_VALUE;
}
}

protected final void initWPLJOTI(String s) {
if (!s.trim().isEmpty()) {
WPLJOTI = Byte.parseByte(s);
} else {
WPLJOTI = Byte.MIN_VALUE;
}
}

protected final void initWPLJOVO(String s) {
if (!s.trim().isEmpty()) {
WPLJOVO = Byte.parseByte(s);
} else {
WPLJOVO = Byte.MIN_VALUE;
}
}

protected final void initWPLLJM(String s) {
if (!s.trim().isEmpty()) {
WPLLJM = Byte.parseByte(s);
} else {
WPLLJM = Byte.MIN_VALUE;
}
}

protected final void initWPLLJY(String s) {
if (!s.trim().isEmpty()) {
WPLLJY = Short.parseShort(s);
} else {
WPLLJY = Short.MIN_VALUE;
}
}

protected final void initWPLLSM(String s) {
if (!s.trim().isEmpty()) {
WPLLSM = Byte.parseByte(s);
} else {
WPLLSM = Byte.MIN_VALUE;
}
}

protected final void initWPLLSY(String s) {
if (!s.trim().isEmpty()) {
WPLLSY = Short.parseShort(s);
} else {
WPLLSY = Short.MIN_VALUE;
}
}

protected final void initWPLPEM(String s) {
if (!s.trim().isEmpty()) {
WPLPEM = Byte.parseByte(s);
} else {
WPLPEM = Byte.MIN_VALUE;
}
}

protected final void initWPLPEM2(String s) {
if (!s.trim().isEmpty()) {
WPLPEM2 = Byte.parseByte(s);
} else {
WPLPEM2 = Byte.MIN_VALUE;
}
}

protected final void initWPLPEM3(String s) {
if (!s.trim().isEmpty()) {
WPLPEM3 = Byte.parseByte(s);
} else {
WPLPEM3 = Byte.MIN_VALUE;
}
}

protected final void initWPLPEY(String s) {
if (!s.trim().isEmpty()) {
WPLPEY = Short.parseShort(s);
} else {
WPLPEY = Short.MIN_VALUE;
}
}

protected final void initWPLPEY2(String s) {
if (!s.trim().isEmpty()) {
WPLPEY2 = Short.parseShort(s);
} else {
WPLPEY2 = Short.MIN_VALUE;
}
}

protected final void initWPLPEY3(String s) {
if (!s.trim().isEmpty()) {
WPLPEY3 = Short.parseShort(s);
} else {
WPLPEY3 = Short.MIN_VALUE;
}
}

protected final void initWPLPSM(String s) {
if (!s.trim().isEmpty()) {
WPLPSM = Byte.parseByte(s);
} else {
WPLPSM = Byte.MIN_VALUE;
}
}

protected final void initWPLPSM2(String s) {
if (!s.trim().isEmpty()) {
WPLPSM2 = Byte.parseByte(s);
} else {
WPLPSM2 = Byte.MIN_VALUE;
}
}

protected final void initWPLPSM3(String s) {
if (!s.trim().isEmpty()) {
WPLPSM3 = Byte.parseByte(s);
} else {
WPLPSM3 = Byte.MIN_VALUE;
}
}

protected final void initWPLPSY(String s) {
if (!s.trim().isEmpty()) {
WPLPSY = Short.parseShort(s);
} else {
WPLPSY = Short.MIN_VALUE;
}
}

protected final void initWPLPSY2(String s) {
if (!s.trim().isEmpty()) {
WPLPSY2 = Short.parseShort(s);
} else {
WPLPSY2 = Short.MIN_VALUE;
}
}

protected final void initWPLPSY3(String s) {
if (!s.trim().isEmpty()) {
WPLPSY3 = Short.parseShort(s);
} else {
WPLPSY3 = Short.MIN_VALUE;
}
}

protected final void initWPLUA2E(String s) {
if (!s.trim().isEmpty()) {
WPLUA2E = Byte.parseByte(s);
} else {
WPLUA2E = Byte.MIN_VALUE;
}
}

protected final void initWPLUA2L(String s) {
if (!s.trim().isEmpty()) {
WPLUA2L = Integer.parseInt(s);
} else {
WPLUA2L = Integer.MIN_VALUE;
}
}

protected final void initWPLUA2R(String s) {
if (!s.trim().isEmpty()) {
WPLUA2R = Byte.parseByte(s);
} else {
WPLUA2R = Byte.MIN_VALUE;
}
}

protected final void initWPLUA2U(String s) {
if (!s.trim().isEmpty()) {
WPLUA2U = Integer.parseInt(s);
} else {
WPLUA2U = Integer.MIN_VALUE;
}
}

protected final void initWPLUA3E(String s) {
if (!s.trim().isEmpty()) {
WPLUA3E = Byte.parseByte(s);
} else {
WPLUA3E = Byte.MIN_VALUE;
}
}

protected final void initWPLUA3L(String s) {
if (!s.trim().isEmpty()) {
WPLUA3L = Short.parseShort(s);
} else {
WPLUA3L = Short.MIN_VALUE;
}
}

protected final void initWPLUA3R(String s) {
if (!s.trim().isEmpty()) {
WPLUA3R = Byte.parseByte(s);
} else {
WPLUA3R = Byte.MIN_VALUE;
}
}

protected final void initWPLUA3U(String s) {
if (!s.trim().isEmpty()) {
WPLUA3U = Integer.parseInt(s);
} else {
WPLUA3U = Integer.MIN_VALUE;
}
}

protected final void initWPLUA4E(String s) {
if (!s.trim().isEmpty()) {
WPLUA4E = Byte.parseByte(s);
} else {
WPLUA4E = Byte.MIN_VALUE;
}
}

protected final void initWPLUA4L(String s) {
if (!s.trim().isEmpty()) {
WPLUA4L = Short.parseShort(s);
} else {
WPLUA4L = Short.MIN_VALUE;
}
}

protected final void initWPLUA4R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUA4R = false;
} else {
WPLUA4R = true;
}
}
}

protected final void initWPLUA4U(String s) {
if (!s.trim().isEmpty()) {
WPLUA4U = Short.parseShort(s);
} else {
WPLUA4U = Short.MIN_VALUE;
}
}

protected final void initWPLUA5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUA5E = false;
} else {
WPLUA5E = true;
}
}
}

protected final void initWPLUA5L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPLUA5L = false;
} else {
WPLUA5L = true;
}
}
}

protected final void initWPLUA5R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUA5R = false;
} else {
WPLUA5R = true;
}
}
}

protected final void initWPLUA5U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPLUA5U = false;
} else {
WPLUA5U = true;
}
}
}

protected final void initWPLUA6E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUA6E = false;
} else {
WPLUA6E = true;
}
}
}

protected final void initWPLUA6L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUA6L = false;
} else {
WPLUA6L = true;
}
}
}

protected final void initWPLUA6R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUA6R = false;
} else {
WPLUA6R = true;
}
}
}

protected final void initWPLUA6U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUA6U = false;
} else {
WPLUA6U = true;
}
}
}

protected final void initWPLUA7E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUA7E = false;
} else {
WPLUA7E = true;
}
}
}

protected final void initWPLUA7L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUA7L = false;
} else {
WPLUA7L = true;
}
}
}

protected final void initWPLUA7R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUA7R = false;
} else {
WPLUA7R = true;
}
}
}

protected final void initWPLUA7U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUA7U = false;
} else {
WPLUA7U = true;
}
}
}

protected final void initWPLUAE(String s) {
if (!s.trim().isEmpty()) {
WPLUAE = Byte.parseByte(s);
} else {
WPLUAE = Byte.MIN_VALUE;
}
}

protected final void initWPLUAL(String s) {
if (!s.trim().isEmpty()) {
WPLUAL = Double.parseDouble(s);
} else {
WPLUAL = Double.NaN;
}
}

protected final void initWPLUAR(String s) {
if (!s.trim().isEmpty()) {
WPLUAR = Byte.parseByte(s);
} else {
WPLUAR = Byte.MIN_VALUE;
}
}

protected final void initWPLUAU(String s) {
if (!s.trim().isEmpty()) {
WPLUAU = Double.parseDouble(s);
} else {
WPLUAU = Double.NaN;
}
}

protected final void initWPLUM2E(String s) {
if (!s.trim().isEmpty()) {
WPLUM2E = Byte.parseByte(s);
} else {
WPLUM2E = Byte.MIN_VALUE;
}
}

protected final void initWPLUM2L(String s) {
if (!s.trim().isEmpty()) {
WPLUM2L = Integer.parseInt(s);
} else {
WPLUM2L = Integer.MIN_VALUE;
}
}

protected final void initWPLUM2R(String s) {
if (!s.trim().isEmpty()) {
WPLUM2R = Byte.parseByte(s);
} else {
WPLUM2R = Byte.MIN_VALUE;
}
}

protected final void initWPLUM2U(String s) {
if (!s.trim().isEmpty()) {
WPLUM2U = Integer.parseInt(s);
} else {
WPLUM2U = Integer.MIN_VALUE;
}
}

protected final void initWPLUM3E(String s) {
if (!s.trim().isEmpty()) {
WPLUM3E = Byte.parseByte(s);
} else {
WPLUM3E = Byte.MIN_VALUE;
}
}

protected final void initWPLUM3L(String s) {
if (!s.trim().isEmpty()) {
WPLUM3L = Short.parseShort(s);
} else {
WPLUM3L = Short.MIN_VALUE;
}
}

protected final void initWPLUM3R(String s) {
if (!s.trim().isEmpty()) {
WPLUM3R = Byte.parseByte(s);
} else {
WPLUM3R = Byte.MIN_VALUE;
}
}

protected final void initWPLUM3U(String s) {
if (!s.trim().isEmpty()) {
WPLUM3U = Short.parseShort(s);
} else {
WPLUM3U = Short.MIN_VALUE;
}
}

protected final void initWPLUM4E(String s) {
if (!s.trim().isEmpty()) {
WPLUM4E = Byte.parseByte(s);
} else {
WPLUM4E = Byte.MIN_VALUE;
}
}

protected final void initWPLUM4L(String s) {
if (!s.trim().isEmpty()) {
WPLUM4L = Short.parseShort(s);
} else {
WPLUM4L = Short.MIN_VALUE;
}
}

protected final void initWPLUM4R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUM4R = false;
} else {
WPLUM4R = true;
}
}
}

protected final void initWPLUM4U(String s) {
if (!s.trim().isEmpty()) {
WPLUM4U = Integer.parseInt(s);
} else {
WPLUM4U = Integer.MIN_VALUE;
}
}

protected final void initWPLUM5E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUM5E = false;
} else {
WPLUM5E = true;
}
}
}

protected final void initWPLUM5L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUM5L = false;
} else {
WPLUM5L = true;
}
}
}

protected final void initWPLUM5R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUM5R = false;
} else {
WPLUM5R = true;
}
}
}

protected final void initWPLUM5U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUM5U = false;
} else {
WPLUM5U = true;
}
}
}

protected final void initWPLUM6E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUM6E = false;
} else {
WPLUM6E = true;
}
}
}

protected final void initWPLUM6L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUM6L = false;
} else {
WPLUM6L = true;
}
}
}

protected final void initWPLUM6R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUM6R = false;
} else {
WPLUM6R = true;
}
}
}

protected final void initWPLUM6U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUM6U = false;
} else {
WPLUM6U = true;
}
}
}

protected final void initWPLUM7E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUM7E = false;
} else {
WPLUM7E = true;
}
}
}

protected final void initWPLUM7L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUM7L = false;
} else {
WPLUM7L = true;
}
}
}

protected final void initWPLUM7R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUM7R = false;
} else {
WPLUM7R = true;
}
}
}

protected final void initWPLUM7U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUM7U = false;
} else {
WPLUM7U = true;
}
}
}

protected final void initWPLUMP2(String s) {
if (!s.trim().isEmpty()) {
WPLUMP2 = Integer.parseInt(s);
} else {
WPLUMP2 = Integer.MIN_VALUE;
}
}

protected final void initWPLUMP3(String s) {
if (!s.trim().isEmpty()) {
WPLUMP3 = Integer.parseInt(s);
} else {
WPLUMP3 = Integer.MIN_VALUE;
}
}

protected final void initWPLUMP4(String s) {
if (!s.trim().isEmpty()) {
WPLUMP4 = Integer.parseInt(s);
} else {
WPLUMP4 = Integer.MIN_VALUE;
}
}

protected final void initWPLUMP5(String s) {
if (!s.trim().isEmpty()) {
WPLUMP5 = Integer.parseInt(s);
} else {
WPLUMP5 = Integer.MIN_VALUE;
}
}

protected final void initWPLUMP6(String s) {
if (!s.trim().isEmpty()) {
WPLUMP6 = Short.parseShort(s);
} else {
WPLUMP6 = Short.MIN_VALUE;
}
}

protected final void initWPLUMP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUMP7 = false;
} else {
WPLUMP7 = true;
}
}
}

protected final void initWPLUMPE(String s) {
if (!s.trim().isEmpty()) {
WPLUMPE = Byte.parseByte(s);
} else {
WPLUMPE = Byte.MIN_VALUE;
}
}

protected final void initWPLUMPL(String s) {
if (!s.trim().isEmpty()) {
WPLUMPL = Double.parseDouble(s);
} else {
WPLUMPL = Double.NaN;
}
}

protected final void initWPLUMPR(String s) {
if (!s.trim().isEmpty()) {
WPLUMPR = Byte.parseByte(s);
} else {
WPLUMPR = Byte.MIN_VALUE;
}
}

protected final void initWPLUMPU(String s) {
if (!s.trim().isEmpty()) {
WPLUMPU = Double.parseDouble(s);
} else {
WPLUMPU = Double.NaN;
}
}

protected final void initWPLUPA(String s) {
if (!s.trim().isEmpty()) {
WPLUPA = Double.parseDouble(s);
} else {
WPLUPA = Double.NaN;
}
}

protected final void initWPLUPA2(String s) {
if (!s.trim().isEmpty()) {
WPLUPA2 = Integer.parseInt(s);
} else {
WPLUPA2 = Integer.MIN_VALUE;
}
}

protected final void initWPLUPA3(String s) {
if (!s.trim().isEmpty()) {
WPLUPA3 = Integer.parseInt(s);
} else {
WPLUPA3 = Integer.MIN_VALUE;
}
}

protected final void initWPLUPA4(String s) {
if (!s.trim().isEmpty()) {
WPLUPA4 = Integer.parseInt(s);
} else {
WPLUPA4 = Integer.MIN_VALUE;
}
}

protected final void initWPLUPA5(String s) {
if (!s.trim().isEmpty()) {
WPLUPA5 = Short.parseShort(s);
} else {
WPLUPA5 = Short.MIN_VALUE;
}
}

protected final void initWPLUPA6(String s) {
if (!s.trim().isEmpty()) {
WPLUPA6 = Short.parseShort(s);
} else {
WPLUPA6 = Short.MIN_VALUE;
}
}

protected final void initWPLUPA7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUPA7 = false;
} else {
WPLUPA7 = true;
}
}
}

protected final void initWPLUPS(String s) {
if (!s.trim().isEmpty()) {
WPLUPS = Byte.parseByte(s);
} else {
WPLUPS = Byte.MIN_VALUE;
}
}

protected final void initWPLUPS2(String s) {
if (!s.trim().isEmpty()) {
WPLUPS2 = Byte.parseByte(s);
} else {
WPLUPS2 = Byte.MIN_VALUE;
}
}

protected final void initWPLUPS3(String s) {
if (!s.trim().isEmpty()) {
WPLUPS3 = Byte.parseByte(s);
} else {
WPLUPS3 = Byte.MIN_VALUE;
}
}

protected final void initWPLUPS4(String s) {
if (!s.trim().isEmpty()) {
WPLUPS4 = Byte.parseByte(s);
} else {
WPLUPS4 = Byte.MIN_VALUE;
}
}

protected final void initWPLUPS5(String s) {
if (!s.trim().isEmpty()) {
WPLUPS5 = Byte.parseByte(s);
} else {
WPLUPS5 = Byte.MIN_VALUE;
}
}

protected final void initWPLUPS6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUPS6 = false;
} else {
WPLUPS6 = true;
}
}
}

protected final void initWPLUPS7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPLUPS7 = false;
} else {
WPLUPS7 = true;
}
}
}

protected final void initWPMALA(String s) {
if (!s.trim().isEmpty()) {
WPMALA = Integer.parseInt(s);
} else {
WPMALA = Integer.MIN_VALUE;
}
}

protected final void initWPMANPP(String s) {
if (!s.trim().isEmpty()) {
WPMANPP = Byte.parseByte(s);
} else {
WPMANPP = Byte.MIN_VALUE;
}
}

protected final void initWPMANSP(String s) {
if (!s.trim().isEmpty()) {
WPMANSP = Byte.parseByte(s);
} else {
WPMANSP = Byte.MIN_VALUE;
}
}

protected final void initWPMC2(String s) {
if (!s.trim().isEmpty()) {
WPMC2 = Byte.parseByte(s);
} else {
WPMC2 = Byte.MIN_VALUE;
}
}

protected final void initWPMC3(String s) {
if (!s.trim().isEmpty()) {
WPMC3 = Byte.parseByte(s);
} else {
WPMC3 = Byte.MIN_VALUE;
}
}

protected final void initWPMC4(String s) {
if (!s.trim().isEmpty()) {
WPMC4 = Byte.parseByte(s);
} else {
WPMC4 = Byte.MIN_VALUE;
}
}

protected final void initWPMC5(String s) {
if (!s.trim().isEmpty()) {
WPMC5 = Byte.parseByte(s);
} else {
WPMC5 = Byte.MIN_VALUE;
}
}

protected final void initWPMC6(String s) {
if (!s.trim().isEmpty()) {
WPMC6 = Byte.parseByte(s);
} else {
WPMC6 = Byte.MIN_VALUE;
}
}

protected final void initWPMC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMC7 = false;
} else {
WPMC7 = true;
}
}
}

protected final void initWPMCA2(String s) {
if (!s.trim().isEmpty()) {
WPMCA2 = Short.parseShort(s);
} else {
WPMCA2 = Short.MIN_VALUE;
}
}

protected final void initWPMCA3(String s) {
if (!s.trim().isEmpty()) {
WPMCA3 = Short.parseShort(s);
} else {
WPMCA3 = Short.MIN_VALUE;
}
}

protected final void initWPMCA4(String s) {
if (!s.trim().isEmpty()) {
WPMCA4 = Short.parseShort(s);
} else {
WPMCA4 = Short.MIN_VALUE;
}
}

protected final void initWPMCA5(String s) {
if (!s.trim().isEmpty()) {
WPMCA5 = Byte.parseByte(s);
} else {
WPMCA5 = Byte.MIN_VALUE;
}
}

protected final void initWPMCA6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMCA6 = false;
} else {
WPMCA6 = true;
}
}
}

protected final void initWPMCA7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMCA7 = false;
} else {
WPMCA7 = true;
}
}
}

protected final void initWPMCAF2(String s) {
if (!s.trim().isEmpty()) {
WPMCAF2 = Byte.parseByte(s);
} else {
WPMCAF2 = Byte.MIN_VALUE;
}
}

protected final void initWPMCAF3(String s) {
if (!s.trim().isEmpty()) {
WPMCAF3 = Byte.parseByte(s);
} else {
WPMCAF3 = Byte.MIN_VALUE;
}
}

protected final void initWPMCAF4(String s) {
if (!s.trim().isEmpty()) {
WPMCAF4 = Byte.parseByte(s);
} else {
WPMCAF4 = Byte.MIN_VALUE;
}
}

protected final void initWPMCAF5(String s) {
if (!s.trim().isEmpty()) {
WPMCAF5 = Byte.parseByte(s);
} else {
WPMCAF5 = Byte.MIN_VALUE;
}
}

protected final void initWPMCAF6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMCAF6 = false;
} else {
WPMCAF6 = true;
}
}
}

protected final void initWPMCAF7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMCAF7 = false;
} else {
WPMCAF7 = true;
}
}
}

protected final void initWPMCON2(String s) {
if (!s.trim().isEmpty()) {
WPMCON2 = Byte.parseByte(s);
} else {
WPMCON2 = Byte.MIN_VALUE;
}
}

protected final void initWPMCON3(String s) {
if (!s.trim().isEmpty()) {
WPMCON3 = Byte.parseByte(s);
} else {
WPMCON3 = Byte.MIN_VALUE;
}
}

protected final void initWPMCON4(String s) {
if (!s.trim().isEmpty()) {
WPMCON4 = Byte.parseByte(s);
} else {
WPMCON4 = Byte.MIN_VALUE;
}
}

protected final void initWPMCON5(String s) {
if (!s.trim().isEmpty()) {
WPMCON5 = Byte.parseByte(s);
} else {
WPMCON5 = Byte.MIN_VALUE;
}
}

protected final void initWPMCON6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMCON6 = false;
} else {
WPMCON6 = true;
}
}
}

protected final void initWPMCON7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMCON7 = false;
} else {
WPMCON7 = true;
}
}
}

protected final void initWPMEC2(String s) {
if (!s.trim().isEmpty()) {
WPMEC2 = Byte.parseByte(s);
} else {
WPMEC2 = Byte.MIN_VALUE;
}
}

protected final void initWPMEC3(String s) {
if (!s.trim().isEmpty()) {
WPMEC3 = Byte.parseByte(s);
} else {
WPMEC3 = Byte.MIN_VALUE;
}
}

protected final void initWPMEC4(String s) {
if (!s.trim().isEmpty()) {
WPMEC4 = Byte.parseByte(s);
} else {
WPMEC4 = Byte.MIN_VALUE;
}
}

protected final void initWPMEC5(String s) {
if (!s.trim().isEmpty()) {
WPMEC5 = Byte.parseByte(s);
} else {
WPMEC5 = Byte.MIN_VALUE;
}
}

protected final void initWPMEC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMEC6 = false;
} else {
WPMEC6 = true;
}
}
}

protected final void initWPMEC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMEC7 = false;
} else {
WPMEC7 = true;
}
}
}

protected final void initWPMFQ(String s) {
if (!s.trim().isEmpty()) {
WPMFQ = Byte.parseByte(s);
} else {
WPMFQ = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC(String s) {
if (!s.trim().isEmpty()) {
WPMFRC = Byte.parseByte(s);
} else {
WPMFRC = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC2(String s) {
if (!s.trim().isEmpty()) {
WPMFRC2 = Byte.parseByte(s);
} else {
WPMFRC2 = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC3(String s) {
if (!s.trim().isEmpty()) {
WPMFRC3 = Byte.parseByte(s);
} else {
WPMFRC3 = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC4(String s) {
if (!s.trim().isEmpty()) {
WPMFRC4 = Byte.parseByte(s);
} else {
WPMFRC4 = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC5(String s) {
if (!s.trim().isEmpty()) {
WPMFRC5 = Byte.parseByte(s);
} else {
WPMFRC5 = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC6(String s) {
if (!s.trim().isEmpty()) {
WPMFRC6 = Byte.parseByte(s);
} else {
WPMFRC6 = Byte.MIN_VALUE;
}
}

protected final void initWPMFRC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMFRC7 = false;
} else {
WPMFRC7 = true;
}
}
}

protected final void initWPMHIE(String s) {
if (!s.trim().isEmpty()) {
WPMHIE = Byte.parseByte(s);
} else {
WPMHIE = Byte.MIN_VALUE;
}
}

protected final void initWPMHIL(String s) {
if (!s.trim().isEmpty()) {
WPMHIL = Short.parseShort(s);
} else {
WPMHIL = Short.MIN_VALUE;
}
}

protected final void initWPMHIR(String s) {
if (!s.trim().isEmpty()) {
WPMHIR = Byte.parseByte(s);
} else {
WPMHIR = Byte.MIN_VALUE;
}
}

protected final void initWPMHIU(String s) {
if (!s.trim().isEmpty()) {
WPMHIU = Short.parseShort(s);
} else {
WPMHIU = Short.MIN_VALUE;
}
}

protected final void initWPMMIN2(String s) {
if (!s.trim().isEmpty()) {
WPMMIN2 = Byte.parseByte(s);
} else {
WPMMIN2 = Byte.MIN_VALUE;
}
}

protected final void initWPMMIN3(String s) {
if (!s.trim().isEmpty()) {
WPMMIN3 = Byte.parseByte(s);
} else {
WPMMIN3 = Byte.MIN_VALUE;
}
}

protected final void initWPMMIN4(String s) {
if (!s.trim().isEmpty()) {
WPMMIN4 = Byte.parseByte(s);
} else {
WPMMIN4 = Byte.MIN_VALUE;
}
}

protected final void initWPMMIN5(String s) {
if (!s.trim().isEmpty()) {
WPMMIN5 = Byte.parseByte(s);
} else {
WPMMIN5 = Byte.MIN_VALUE;
}
}

protected final void initWPMMIN6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMMIN6 = false;
} else {
WPMMIN6 = true;
}
}
}

protected final void initWPMMIN7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMMIN7 = false;
} else {
WPMMIN7 = true;
}
}
}

protected final void initWPMORE(String s) {
if (!s.trim().isEmpty()) {
WPMORE = Byte.parseByte(s);
} else {
WPMORE = Byte.MIN_VALUE;
}
}

protected final void initWPMORP(String s) {
if (!s.trim().isEmpty()) {
WPMORP = Byte.parseByte(s);
} else {
WPMORP = Byte.MIN_VALUE;
}
}

protected final void initWPMORP2(String s) {
if (!s.trim().isEmpty()) {
WPMORP2 = Byte.parseByte(s);
} else {
WPMORP2 = Byte.MIN_VALUE;
}
}

protected final void initWPMORP3(String s) {
if (!s.trim().isEmpty()) {
WPMORP3 = Byte.parseByte(s);
} else {
WPMORP3 = Byte.MIN_VALUE;
}
}

protected final void initWPMORP4(String s) {
if (!s.trim().isEmpty()) {
WPMORP4 = Byte.parseByte(s);
} else {
WPMORP4 = Byte.MIN_VALUE;
}
}

protected final void initWPMORP5(String s) {
if (!s.trim().isEmpty()) {
WPMORP5 = Byte.parseByte(s);
} else {
WPMORP5 = Byte.MIN_VALUE;
}
}

protected final void initWPMORP6(String s) {
if (!s.trim().isEmpty()) {
WPMORP6 = Byte.parseByte(s);
} else {
WPMORP6 = Byte.MIN_VALUE;
}
}

protected final void initWPMORP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPMORP7 = false;
} else {
WPMORP7 = true;
}
}
}

protected final void initWPMPAH(String s) {
if (!s.trim().isEmpty()) {
WPMPAH = Integer.parseInt(s);
} else {
WPMPAH = Integer.MIN_VALUE;
}
}

protected final void initWPMSAH(String s) {
if (!s.trim().isEmpty()) {
WPMSAH = Integer.parseInt(s);
} else {
WPMSAH = Integer.MIN_VALUE;
}
}

protected final void initWPMSFQ(String s) {
if (!s.trim().isEmpty()) {
WPMSFQ = Byte.parseByte(s);
} else {
WPMSFQ = Byte.MIN_VALUE;
}
}

protected final void initWPMSH(String s) {
if (!s.trim().isEmpty()) {
WPMSH = Integer.parseInt(s);
} else {
WPMSH = Integer.MIN_VALUE;
}
}

protected final void initWPMSQ(String s) {
if (!s.trim().isEmpty()) {
WPMSQ = Byte.parseByte(s);
} else {
WPMSQ = Byte.MIN_VALUE;
}
}

protected final void initWPMSSQ(String s) {
if (!s.trim().isEmpty()) {
WPMSSQ = Byte.parseByte(s);
} else {
WPMSSQ = Byte.MIN_VALUE;
}
}

protected final void initWPMSTQ(String s) {
if (!s.trim().isEmpty()) {
WPMSTQ = Byte.parseByte(s);
} else {
WPMSTQ = Byte.MIN_VALUE;
}
}

protected final void initWPMTQ(String s) {
if (!s.trim().isEmpty()) {
WPMTQ = Byte.parseByte(s);
} else {
WPMTQ = Byte.MIN_VALUE;
}
}

protected final void initWPMYNJ(String s) {
if (!s.trim().isEmpty()) {
WPMYNJ = Byte.parseByte(s);
} else {
WPMYNJ = Byte.MIN_VALUE;
}
}

protected final void initWPNCBM85(String s) {
if (!s.trim().isEmpty()) {
WPNCBM85 = Byte.parseByte(s);
} else {
WPNCBM85 = Byte.MIN_VALUE;
}
}

protected final void initWPNCBM86(String s) {
if (!s.trim().isEmpty()) {
WPNCBM86 = Byte.parseByte(s);
} else {
WPNCBM86 = Byte.MIN_VALUE;
}
}

protected final void initWPNCBMAD(String s) {
if (!s.trim().isEmpty()) {
WPNCBMAD = Byte.parseByte(s);
} else {
WPNCBMAD = Byte.MIN_VALUE;
}
}

protected final void initWPNCBMCO(String s) {
if (!s.trim().isEmpty()) {
WPNCBMCO = Byte.parseByte(s);
} else {
WPNCBMCO = Byte.MIN_VALUE;
}
}

protected final void initWPNCBMFL(String s) {
if (!s.trim().isEmpty()) {
WPNCBMFL = Byte.parseByte(s);
} else {
WPNCBMFL = Byte.MIN_VALUE;
}
}

protected final void initWPNCBMHO(String s) {
if (!s.trim().isEmpty()) {
WPNCBMHO = Byte.parseByte(s);
} else {
WPNCBMHO = Byte.MIN_VALUE;
}
}

protected final void initWPNCBMHR(String s) {
if (!s.trim().isEmpty()) {
WPNCBMHR = Byte.parseByte(s);
} else {
WPNCBMHR = Byte.MIN_VALUE;
}
}

protected final void initWPNCBMME(String s) {
if (!s.trim().isEmpty()) {
WPNCBMME = Byte.parseByte(s);
} else {
WPNCBMME = Byte.MIN_VALUE;
}
}

protected final void initWPNCBMPH(String s) {
if (!s.trim().isEmpty()) {
WPNCBMPH = Byte.parseByte(s);
} else {
WPNCBMPH = Byte.MIN_VALUE;
}
}

protected final void initWPNCH96(String s) {
if (!s.trim().isEmpty()) {
WPNCH96 = Byte.parseByte(s);
} else {
WPNCH96 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHAD(String s) {
if (!s.trim().isEmpty()) {
WPNCHAD = Byte.parseByte(s);
} else {
WPNCHAD = Byte.MIN_VALUE;
}
}

protected final void initWPNCHB85(String s) {
if (!s.trim().isEmpty()) {
WPNCHB85 = Byte.parseByte(s);
} else {
WPNCHB85 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHBAD(String s) {
if (!s.trim().isEmpty()) {
WPNCHBAD = Byte.parseByte(s);
} else {
WPNCHBAD = Byte.MIN_VALUE;
}
}

protected final void initWPNCHBFL(String s) {
if (!s.trim().isEmpty()) {
WPNCHBFL = Byte.parseByte(s);
} else {
WPNCHBFL = Byte.MIN_VALUE;
}
}

protected final void initWPNCHBHO(String s) {
if (!s.trim().isEmpty()) {
WPNCHBHO = Byte.parseByte(s);
} else {
WPNCHBHO = Byte.MIN_VALUE;
}
}

protected final void initWPNCHBHR(String s) {
if (!s.trim().isEmpty()) {
WPNCHBHR = Byte.parseByte(s);
} else {
WPNCHBHR = Byte.MIN_VALUE;
}
}

protected final void initWPNCHBME(String s) {
if (!s.trim().isEmpty()) {
WPNCHBME = Byte.parseByte(s);
} else {
WPNCHBME = Byte.MIN_VALUE;
}
}

protected final void initWPNCHBPH(String s) {
if (!s.trim().isEmpty()) {
WPNCHBPH = Byte.parseByte(s);
} else {
WPNCHBPH = Byte.MIN_VALUE;
}
}

protected final void initWPNCHFL(String s) {
if (!s.trim().isEmpty()) {
WPNCHFL = Byte.parseByte(s);
} else {
WPNCHFL = Byte.MIN_VALUE;
}
}

protected final void initWPNCHGA(String s) {
if (!s.trim().isEmpty()) {
WPNCHGA = Byte.parseByte(s);
} else {
WPNCHGA = Byte.MIN_VALUE;
}
}

protected final void initWPNCHGN(String s) {
if (!s.trim().isEmpty()) {
WPNCHGN = Byte.parseByte(s);
} else {
WPNCHGN = Byte.MIN_VALUE;
}
}

protected final void initWPNCHGO(String s) {
if (!s.trim().isEmpty()) {
WPNCHGO = Byte.parseByte(s);
} else {
WPNCHGO = Byte.MIN_VALUE;
}
}

protected final void initWPNCHHO(String s) {
if (!s.trim().isEmpty()) {
WPNCHHO = Byte.parseByte(s);
} else {
WPNCHHO = Byte.MIN_VALUE;
}
}

protected final void initWPNCHHR(String s) {
if (!s.trim().isEmpty()) {
WPNCHHR = Byte.parseByte(s);
} else {
WPNCHHR = Byte.MIN_VALUE;
}
}

protected final void initWPNCHM85(String s) {
if (!s.trim().isEmpty()) {
WPNCHM85 = Byte.parseByte(s);
} else {
WPNCHM85 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHM86(String s) {
if (!s.trim().isEmpty()) {
WPNCHM86 = Byte.parseByte(s);
} else {
WPNCHM86 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHM96(String s) {
if (!s.trim().isEmpty()) {
WPNCHM96 = Byte.parseByte(s);
} else {
WPNCHM96 = Byte.MIN_VALUE;
}
}

protected final void initWPNCHMAD(String s) {
if (!s.trim().isEmpty()) {
WPNCHMAD = Byte.parseByte(s);
} else {
WPNCHMAD = Byte.MIN_VALUE;
}
}

protected final void initWPNCHMCO(String s) {
if (!s.trim().isEmpty()) {
WPNCHMCO = Byte.parseByte(s);
} else {
WPNCHMCO = Byte.MIN_VALUE;
}
}

protected final void initWPNCHME(String s) {
if (!s.trim().isEmpty()) {
WPNCHME = Byte.parseByte(s);
} else {
WPNCHME = Byte.MIN_VALUE;
}
}

protected final void initWPNCHMFL(String s) {
if (!s.trim().isEmpty()) {
WPNCHMFL = Byte.parseByte(s);
} else {
WPNCHMFL = Byte.MIN_VALUE;
}
}

protected final void initWPNCHMHO(String s) {
if (!s.trim().isEmpty()) {
WPNCHMHO = Byte.parseByte(s);
} else {
WPNCHMHO = Byte.MIN_VALUE;
}
}

protected final void initWPNCHMHR(String s) {
if (!s.trim().isEmpty()) {
WPNCHMHR = Byte.parseByte(s);
} else {
WPNCHMHR = Byte.MIN_VALUE;
}
}

protected final void initWPNCHMME(String s) {
if (!s.trim().isEmpty()) {
WPNCHMME = Byte.parseByte(s);
} else {
WPNCHMME = Byte.MIN_VALUE;
}
}

protected final void initWPNCHMPH(String s) {
if (!s.trim().isEmpty()) {
WPNCHMPH = Byte.parseByte(s);
} else {
WPNCHMPH = Byte.MIN_VALUE;
}
}

protected final void initWPNCHPH(String s) {
if (!s.trim().isEmpty()) {
WPNCHPH = Byte.parseByte(s);
} else {
WPNCHPH = Byte.MIN_VALUE;
}
}

protected final void initWPNE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNE = false;
} else {
WPNE = true;
}
}
}

protected final void initWPNEW(String s) {
if (!s.trim().isEmpty()) {
WPNEW = Byte.parseByte(s);
} else {
WPNEW = Byte.MIN_VALUE;
}
}

protected final void initWPNEW2(String s) {
if (!s.trim().isEmpty()) {
WPNEW2 = Byte.parseByte(s);
} else {
WPNEW2 = Byte.MIN_VALUE;
}
}

protected final void initWPNEW3(String s) {
if (!s.trim().isEmpty()) {
WPNEW3 = Byte.parseByte(s);
} else {
WPNEW3 = Byte.MIN_VALUE;
}
}

protected final void initWPNEW5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNEW5 = false;
} else {
WPNEW5 = true;
}
}
}

protected final void initWPNEW6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNEW6 = false;
} else {
WPNEW6 = true;
}
}
}

protected final void initWPNEW7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNEW7 = false;
} else {
WPNEW7 = true;
}
}
}

protected final void initWPNEWP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
WPNEWP = false;
} else {
WPNEWP = true;
}
}
}

protected final void initWPNEWP2(String s) {
if (!s.trim().isEmpty()) {
WPNEWP2 = Byte.parseByte(s);
} else {
WPNEWP2 = Byte.MIN_VALUE;
}
}

protected final void initWPNEWP3(String s) {
if (!s.trim().isEmpty()) {
WPNEWP3 = Byte.parseByte(s);
} else {
WPNEWP3 = Byte.MIN_VALUE;
}
}

protected final void initWPNEWP4(String s) {
if (!s.trim().isEmpty()) {
WPNEWP4 = Byte.parseByte(s);
} else {
WPNEWP4 = Byte.MIN_VALUE;
}
}

protected final void initWPNEWP5(String s) {
if (!s.trim().isEmpty()) {
WPNEWP5 = Byte.parseByte(s);
} else {
WPNEWP5 = Byte.MIN_VALUE;
}
}

protected final void initWPNEWP6(String s) {
if (!s.trim().isEmpty()) {
WPNEWP6 = Byte.parseByte(s);
} else {
WPNEWP6 = Byte.MIN_VALUE;
}
}

protected final void initWPNEWP7(String s) {
if (!s.trim().isEmpty()) {
WPNEWP7 = Byte.parseByte(s);
} else {
WPNEWP7 = Byte.MIN_VALUE;
}
}

protected final void initWPNIRR2(String s) {
if (!s.trim().isEmpty()) {
WPNIRR2 = Byte.parseByte(s);
} else {
WPNIRR2 = Byte.MIN_VALUE;
}
}

protected final void initWPNIRR3(String s) {
if (!s.trim().isEmpty()) {
WPNIRR3 = Byte.parseByte(s);
} else {
WPNIRR3 = Byte.MIN_VALUE;
}
}

protected final void initWPNIRR4(String s) {
if (!s.trim().isEmpty()) {
WPNIRR4 = Byte.parseByte(s);
} else {
WPNIRR4 = Byte.MIN_VALUE;
}
}

protected final void initWPNIRR5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNIRR5 = false;
} else {
WPNIRR5 = true;
}
}
}

protected final void initWPNIRR6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNIRR6 = false;
} else {
WPNIRR6 = true;
}
}
}

protected final void initWPNIRR7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNIRR7 = false;
} else {
WPNIRR7 = true;
}
}
}

protected final void initWPNLK95(String s) {
if (!s.trim().isEmpty()) {
WPNLK95 = Byte.parseByte(s);
} else {
WPNLK95 = Byte.MIN_VALUE;
}
}

protected final void initWPNLKDI(String s) {
if (!s.trim().isEmpty()) {
WPNLKDI = Byte.parseByte(s);
} else {
WPNLKDI = Byte.MIN_VALUE;
}
}

protected final void initWPNLKLO(String s) {
if (!s.trim().isEmpty()) {
WPNLKLO = Byte.parseByte(s);
} else {
WPNLKLO = Byte.MIN_VALUE;
}
}

protected final void initWPNLKM85(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNLKM85 = false;
} else {
WPNLKM85 = true;
}
}
}

protected final void initWPNLKM86(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNLKM86 = false;
} else {
WPNLKM86 = true;
}
}
}

protected final void initWPNLKMAC(String s) {
if (!s.trim().isEmpty()) {
WPNLKMAC = Byte.parseByte(s);
} else {
WPNLKMAC = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMCM(String s) {
if (!s.trim().isEmpty()) {
WPNLKMCM = Byte.parseByte(s);
} else {
WPNLKMCM = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMCN(String s) {
if (!s.trim().isEmpty()) {
WPNLKMCN = Byte.parseByte(s);
} else {
WPNLKMCN = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMCO(String s) {
if (!s.trim().isEmpty()) {
WPNLKMCO = Byte.parseByte(s);
} else {
WPNLKMCO = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMDE(String s) {
if (!s.trim().isEmpty()) {
WPNLKMDE = Byte.parseByte(s);
} else {
WPNLKMDE = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMDI(String s) {
if (!s.trim().isEmpty()) {
WPNLKMDI = Byte.parseByte(s);
} else {
WPNLKMDI = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMEN(String s) {
if (!s.trim().isEmpty()) {
WPNLKMEN = Byte.parseByte(s);
} else {
WPNLKMEN = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMFI(String s) {
if (!s.trim().isEmpty()) {
WPNLKMFI = Byte.parseByte(s);
} else {
WPNLKMFI = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMFR(String s) {
if (!s.trim().isEmpty()) {
WPNLKMFR = Byte.parseByte(s);
} else {
WPNLKMFR = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMHR(String s) {
if (!s.trim().isEmpty()) {
WPNLKMHR = Byte.parseByte(s);
} else {
WPNLKMHR = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMLO(String s) {
if (!s.trim().isEmpty()) {
WPNLKMLO = Byte.parseByte(s);
} else {
WPNLKMLO = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMNO(String s) {
if (!s.trim().isEmpty()) {
WPNLKMNO = Byte.parseByte(s);
} else {
WPNLKMNO = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMPA(String s) {
if (!s.trim().isEmpty()) {
WPNLKMPA = Byte.parseByte(s);
} else {
WPNLKMPA = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMPE(String s) {
if (!s.trim().isEmpty()) {
WPNLKMPE = Byte.parseByte(s);
} else {
WPNLKMPE = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMRT(String s) {
if (!s.trim().isEmpty()) {
WPNLKMRT = Byte.parseByte(s);
} else {
WPNLKMRT = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMSE(String s) {
if (!s.trim().isEmpty()) {
WPNLKMSE = Byte.parseByte(s);
} else {
WPNLKMSE = Byte.MIN_VALUE;
}
}

protected final void initWPNLKMSU(String s) {
if (!s.trim().isEmpty()) {
WPNLKMSU = Byte.parseByte(s);
} else {
WPNLKMSU = Byte.MIN_VALUE;
}
}

protected final void initWPNLKPA(String s) {
if (!s.trim().isEmpty()) {
WPNLKPA = Byte.parseByte(s);
} else {
WPNLKPA = Byte.MIN_VALUE;
}
}

protected final void initWPNLKPE(String s) {
if (!s.trim().isEmpty()) {
WPNLKPE = Byte.parseByte(s);
} else {
WPNLKPE = Byte.MIN_VALUE;
}
}

protected final void initWPNLKRT(String s) {
if (!s.trim().isEmpty()) {
WPNLKRT = Byte.parseByte(s);
} else {
WPNLKRT = Byte.MIN_VALUE;
}
}

protected final void initWPNLKSU(String s) {
if (!s.trim().isEmpty()) {
WPNLKSU = Byte.parseByte(s);
} else {
WPNLKSU = Byte.MIN_VALUE;
}
}

protected final void initWPNPENS(String s) {
if (!s.trim().isEmpty()) {
WPNPENS = Byte.parseByte(s);
} else {
WPNPENS = Byte.MIN_VALUE;
}
}

protected final void initWPNRA2(String s) {
if (!s.trim().isEmpty()) {
WPNRA2 = Byte.parseByte(s);
} else {
WPNRA2 = Byte.MIN_VALUE;
}
}

protected final void initWPNRA3(String s) {
if (!s.trim().isEmpty()) {
WPNRA3 = Byte.parseByte(s);
} else {
WPNRA3 = Byte.MIN_VALUE;
}
}

protected final void initWPNRA4(String s) {
if (!s.trim().isEmpty()) {
WPNRA4 = Byte.parseByte(s);
} else {
WPNRA4 = Byte.MIN_VALUE;
}
}

protected final void initWPNRA5(String s) {
if (!s.trim().isEmpty()) {
WPNRA5 = Byte.parseByte(s);
} else {
WPNRA5 = Byte.MIN_VALUE;
}
}

protected final void initWPNRA6(String s) {
if (!s.trim().isEmpty()) {
WPNRA6 = Byte.parseByte(s);
} else {
WPNRA6 = Byte.MIN_VALUE;
}
}

protected final void initWPNRA7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPNRA7 = false;
} else {
WPNRA7 = true;
}
}
}

protected final void initWPOCHG(String s) {
if (!s.trim().isEmpty()) {
WPOCHG = Byte.parseByte(s);
} else {
WPOCHG = Byte.MIN_VALUE;
}
}

protected final void initWPOJ(String s) {
if (!s.trim().isEmpty()) {
WPOJ = Byte.parseByte(s);
} else {
WPOJ = Byte.MIN_VALUE;
}
}

protected final void initWPOJ2(String s) {
if (!s.trim().isEmpty()) {
WPOJ2 = Byte.parseByte(s);
} else {
WPOJ2 = Byte.MIN_VALUE;
}
}

protected final void initWPOJ3(String s) {
if (!s.trim().isEmpty()) {
WPOJ3 = Byte.parseByte(s);
} else {
WPOJ3 = Byte.MIN_VALUE;
}
}

protected final void initWPOWB(String s) {
if (!s.trim().isEmpty()) {
WPOWB = Byte.parseByte(s);
} else {
WPOWB = Byte.MIN_VALUE;
}
}

protected final void initWPOWB2(String s) {
if (!s.trim().isEmpty()) {
WPOWB2 = Byte.parseByte(s);
} else {
WPOWB2 = Byte.MIN_VALUE;
}
}

protected final void initWPOWB3(String s) {
if (!s.trim().isEmpty()) {
WPOWB3 = Byte.parseByte(s);
} else {
WPOWB3 = Byte.MIN_VALUE;
}
}

protected final void initWPOWK(String s) {
if (!s.trim().isEmpty()) {
WPOWK = Byte.parseByte(s);
} else {
WPOWK = Byte.MIN_VALUE;
}
}

protected final void initWPPAY2(String s) {
if (!s.trim().isEmpty()) {
WPPAY2 = Byte.parseByte(s);
} else {
WPPAY2 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY3(String s) {
if (!s.trim().isEmpty()) {
WPPAY3 = Byte.parseByte(s);
} else {
WPPAY3 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY4(String s) {
if (!s.trim().isEmpty()) {
WPPAY4 = Byte.parseByte(s);
} else {
WPPAY4 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY5(String s) {
if (!s.trim().isEmpty()) {
WPPAY5 = Byte.parseByte(s);
} else {
WPPAY5 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY6(String s) {
if (!s.trim().isEmpty()) {
WPPAY6 = Byte.parseByte(s);
} else {
WPPAY6 = Byte.MIN_VALUE;
}
}

protected final void initWPPAY7(String s) {
if (!s.trim().isEmpty()) {
WPPAY7 = Byte.parseByte(s);
} else {
WPPAY7 = Byte.MIN_VALUE;
}
}

protected final void initWPPCON2(String s) {
if (!s.trim().isEmpty()) {
WPPCON2 = Byte.parseByte(s);
} else {
WPPCON2 = Byte.MIN_VALUE;
}
}

protected final void initWPPCON3(String s) {
if (!s.trim().isEmpty()) {
WPPCON3 = Byte.parseByte(s);
} else {
WPPCON3 = Byte.MIN_VALUE;
}
}

protected final void initWPPCON5(String s) {
if (!s.trim().isEmpty()) {
WPPCON5 = Byte.parseByte(s);
} else {
WPPCON5 = Byte.MIN_VALUE;
}
}

protected final void initWPPCON6(String s) {
if (!s.trim().isEmpty()) {
WPPCON6 = Byte.parseByte(s);
} else {
WPPCON6 = Byte.MIN_VALUE;
}
}

protected final void initWPPCON7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPCON7 = false;
} else {
WPPCON7 = true;
}
}
}

protected final void initWPPCONT4(String s) {
if (!s.trim().isEmpty()) {
WPPCONT4 = Byte.parseByte(s);
} else {
WPPCONT4 = Byte.MIN_VALUE;
}
}

protected final void initWPPE2AE(String s) {
if (!s.trim().isEmpty()) {
WPPE2AE = Byte.parseByte(s);
} else {
WPPE2AE = Byte.MIN_VALUE;
}
}

protected final void initWPPE2AL(String s) {
if (!s.trim().isEmpty()) {
WPPE2AL = Short.parseShort(s);
} else {
WPPE2AL = Short.MIN_VALUE;
}
}

protected final void initWPPE2AR(String s) {
if (!s.trim().isEmpty()) {
WPPE2AR = Byte.parseByte(s);
} else {
WPPE2AR = Byte.MIN_VALUE;
}
}

protected final void initWPPE2AU(String s) {
if (!s.trim().isEmpty()) {
WPPE2AU = Integer.parseInt(s);
} else {
WPPE2AU = Integer.MIN_VALUE;
}
}

protected final void initWPPE2TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE2TE = false;
} else {
WPPE2TE = true;
}
}
}

protected final void initWPPE2TL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPPE2TL = false;
} else {
WPPE2TL = true;
}
}
}

protected final void initWPPE2TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE2TR = false;
} else {
WPPE2TR = true;
}
}
}

protected final void initWPPE2TU(String s) {
if (!s.trim().isEmpty()) {
WPPE2TU = Short.parseShort(s);
} else {
WPPE2TU = Short.MIN_VALUE;
}
}

protected final void initWPPE3AE(String s) {
if (!s.trim().isEmpty()) {
WPPE3AE = Byte.parseByte(s);
} else {
WPPE3AE = Byte.MIN_VALUE;
}
}

protected final void initWPPE3AL(String s) {
if (!s.trim().isEmpty()) {
WPPE3AL = Short.parseShort(s);
} else {
WPPE3AL = Short.MIN_VALUE;
}
}

protected final void initWPPE3AR(String s) {
if (!s.trim().isEmpty()) {
WPPE3AR = Byte.parseByte(s);
} else {
WPPE3AR = Byte.MIN_VALUE;
}
}

protected final void initWPPE3AU(String s) {
if (!s.trim().isEmpty()) {
WPPE3AU = Short.parseShort(s);
} else {
WPPE3AU = Short.MIN_VALUE;
}
}

protected final void initWPPE3TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE3TE = false;
} else {
WPPE3TE = true;
}
}
}

protected final void initWPPE3TL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE3TL = false;
} else {
WPPE3TL = true;
}
}
}

protected final void initWPPE3TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE3TR = false;
} else {
WPPE3TR = true;
}
}
}

protected final void initWPPE3TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE3TU = false;
} else {
WPPE3TU = true;
}
}
}

protected final void initWPPE4AE(String s) {
if (!s.trim().isEmpty()) {
WPPE4AE = Byte.parseByte(s);
} else {
WPPE4AE = Byte.MIN_VALUE;
}
}

protected final void initWPPE4AL(String s) {
if (!s.trim().isEmpty()) {
WPPE4AL = Integer.parseInt(s);
} else {
WPPE4AL = Integer.MIN_VALUE;
}
}

protected final void initWPPE4AR(String s) {
if (!s.trim().isEmpty()) {
WPPE4AR = Byte.parseByte(s);
} else {
WPPE4AR = Byte.MIN_VALUE;
}
}

protected final void initWPPE4AU(String s) {
if (!s.trim().isEmpty()) {
WPPE4AU = Integer.parseInt(s);
} else {
WPPE4AU = Integer.MIN_VALUE;
}
}

protected final void initWPPE4TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE4TE = false;
} else {
WPPE4TE = true;
}
}
}

protected final void initWPPE4TL(String s) {
if (!s.trim().isEmpty()) {
WPPE4TL = Integer.parseInt(s);
} else {
WPPE4TL = Integer.MIN_VALUE;
}
}

protected final void initWPPE4TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE4TR = false;
} else {
WPPE4TR = true;
}
}
}

protected final void initWPPE4TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE4TU = false;
} else {
WPPE4TU = true;
}
}
}

protected final void initWPPE5AE(String s) {
if (!s.trim().isEmpty()) {
WPPE5AE = Byte.parseByte(s);
} else {
WPPE5AE = Byte.MIN_VALUE;
}
}

protected final void initWPPE5AL(String s) {
if (!s.trim().isEmpty()) {
WPPE5AL = Integer.parseInt(s);
} else {
WPPE5AL = Integer.MIN_VALUE;
}
}

protected final void initWPPE5AR(String s) {
if (!s.trim().isEmpty()) {
WPPE5AR = Byte.parseByte(s);
} else {
WPPE5AR = Byte.MIN_VALUE;
}
}

protected final void initWPPE5AU(String s) {
if (!s.trim().isEmpty()) {
WPPE5AU = Integer.parseInt(s);
} else {
WPPE5AU = Integer.MIN_VALUE;
}
}

protected final void initWPPE5TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE5TE = false;
} else {
WPPE5TE = true;
}
}
}

protected final void initWPPE5TL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE5TL = false;
} else {
WPPE5TL = true;
}
}
}

protected final void initWPPE5TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE5TR = false;
} else {
WPPE5TR = true;
}
}
}

protected final void initWPPE5TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE5TU = false;
} else {
WPPE5TU = true;
}
}
}

protected final void initWPPE6AE(String s) {
if (!s.trim().isEmpty()) {
WPPE6AE = Byte.parseByte(s);
} else {
WPPE6AE = Byte.MIN_VALUE;
}
}

protected final void initWPPE6AL(String s) {
if (!s.trim().isEmpty()) {
WPPE6AL = Integer.parseInt(s);
} else {
WPPE6AL = Integer.MIN_VALUE;
}
}

protected final void initWPPE6AR(String s) {
if (!s.trim().isEmpty()) {
WPPE6AR = Byte.parseByte(s);
} else {
WPPE6AR = Byte.MIN_VALUE;
}
}

protected final void initWPPE6AU(String s) {
if (!s.trim().isEmpty()) {
WPPE6AU = Short.parseShort(s);
} else {
WPPE6AU = Short.MIN_VALUE;
}
}

protected final void initWPPE6TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE6TE = false;
} else {
WPPE6TE = true;
}
}
}

protected final void initWPPE6TL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE6TL = false;
} else {
WPPE6TL = true;
}
}
}

protected final void initWPPE6TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE6TR = false;
} else {
WPPE6TR = true;
}
}
}

protected final void initWPPE6TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE6TU = false;
} else {
WPPE6TU = true;
}
}
}

protected final void initWPPE7AE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE7AE = false;
} else {
WPPE7AE = true;
}
}
}

protected final void initWPPE7AL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE7AL = false;
} else {
WPPE7AL = true;
}
}
}

protected final void initWPPE7AR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE7AR = false;
} else {
WPPE7AR = true;
}
}
}

protected final void initWPPE7AU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE7AU = false;
} else {
WPPE7AU = true;
}
}
}

protected final void initWPPE7TE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE7TE = false;
} else {
WPPE7TE = true;
}
}
}

protected final void initWPPE7TL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE7TL = false;
} else {
WPPE7TL = true;
}
}
}

protected final void initWPPE7TR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE7TR = false;
} else {
WPPE7TR = true;
}
}
}

protected final void initWPPE7TU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPE7TU = false;
} else {
WPPE7TU = true;
}
}
}

protected final void initWPPENAE(String s) {
if (!s.trim().isEmpty()) {
WPPENAE = Byte.parseByte(s);
} else {
WPPENAE = Byte.MIN_VALUE;
}
}

protected final void initWPPENAL(String s) {
if (!s.trim().isEmpty()) {
WPPENAL = Double.parseDouble(s);
} else {
WPPENAL = Double.NaN;
}
}

protected final void initWPPENAR(String s) {
if (!s.trim().isEmpty()) {
WPPENAR = Byte.parseByte(s);
} else {
WPPENAR = Byte.MIN_VALUE;
}
}

protected final void initWPPENAU(String s) {
if (!s.trim().isEmpty()) {
WPPENAU = Double.parseDouble(s);
} else {
WPPENAU = Double.NaN;
}
}

protected final void initWPPENB2(String s) {
if (!s.trim().isEmpty()) {
WPPENB2 = Integer.parseInt(s);
} else {
WPPENB2 = Integer.MIN_VALUE;
}
}

protected final void initWPPENB3(String s) {
if (!s.trim().isEmpty()) {
WPPENB3 = Integer.parseInt(s);
} else {
WPPENB3 = Integer.MIN_VALUE;
}
}

protected final void initWPPENB4(String s) {
if (!s.trim().isEmpty()) {
WPPENB4 = Integer.parseInt(s);
} else {
WPPENB4 = Integer.MIN_VALUE;
}
}

protected final void initWPPENB5(String s) {
if (!s.trim().isEmpty()) {
WPPENB5 = Integer.parseInt(s);
} else {
WPPENB5 = Integer.MIN_VALUE;
}
}

protected final void initWPPENB6(String s) {
if (!s.trim().isEmpty()) {
WPPENB6 = Short.parseShort(s);
} else {
WPPENB6 = Short.MIN_VALUE;
}
}

protected final void initWPPENB7(String s) {
if (!s.trim().isEmpty()) {
WPPENB7 = Short.parseShort(s);
} else {
WPPENB7 = Short.MIN_VALUE;
}
}

protected final void initWPPENN(String s) {
if (!s.trim().isEmpty()) {
WPPENN = Byte.parseByte(s);
} else {
WPPENN = Byte.MIN_VALUE;
}
}

protected final void initWPPENT(String s) {
if (!s.trim().isEmpty()) {
WPPENT = Byte.parseByte(s);
} else {
WPPENT = Byte.MIN_VALUE;
}
}

protected final void initWPPENT2(String s) {
if (!s.trim().isEmpty()) {
WPPENT2 = Byte.parseByte(s);
} else {
WPPENT2 = Byte.MIN_VALUE;
}
}

protected final void initWPPENT3(String s) {
if (!s.trim().isEmpty()) {
WPPENT3 = Byte.parseByte(s);
} else {
WPPENT3 = Byte.MIN_VALUE;
}
}

protected final void initWPPENT4(String s) {
if (!s.trim().isEmpty()) {
WPPENT4 = Byte.parseByte(s);
} else {
WPPENT4 = Byte.MIN_VALUE;
}
}

protected final void initWPPENT5(String s) {
if (!s.trim().isEmpty()) {
WPPENT5 = Byte.parseByte(s);
} else {
WPPENT5 = Byte.MIN_VALUE;
}
}

protected final void initWPPENT6(String s) {
if (!s.trim().isEmpty()) {
WPPENT6 = Byte.parseByte(s);
} else {
WPPENT6 = Byte.MIN_VALUE;
}
}

protected final void initWPPENT7(String s) {
if (!s.trim().isEmpty()) {
WPPENT7 = Byte.parseByte(s);
} else {
WPPENT7 = Byte.MIN_VALUE;
}
}

protected final void initWPPENTE(String s) {
if (!s.trim().isEmpty()) {
WPPENTE = Byte.parseByte(s);
} else {
WPPENTE = Byte.MIN_VALUE;
}
}

protected final void initWPPENTL(String s) {
if (!s.trim().isEmpty()) {
WPPENTL = Double.parseDouble(s);
} else {
WPPENTL = Double.NaN;
}
}

protected final void initWPPENTR(String s) {
if (!s.trim().isEmpty()) {
WPPENTR = Byte.parseByte(s);
} else {
WPPENTR = Byte.MIN_VALUE;
}
}

protected final void initWPPENTU(String s) {
if (!s.trim().isEmpty()) {
WPPENTU = Double.parseDouble(s);
} else {
WPPENTU = Double.NaN;
}
}

protected final void initWPPERC2(String s) {
if (!s.trim().isEmpty()) {
WPPERC2 = Byte.parseByte(s);
} else {
WPPERC2 = Byte.MIN_VALUE;
}
}

protected final void initWPPERC3(String s) {
if (!s.trim().isEmpty()) {
WPPERC3 = Byte.parseByte(s);
} else {
WPPERC3 = Byte.MIN_VALUE;
}
}

protected final void initWPPERC4(String s) {
if (!s.trim().isEmpty()) {
WPPERC4 = Byte.parseByte(s);
} else {
WPPERC4 = Byte.MIN_VALUE;
}
}

protected final void initWPPERC5(String s) {
if (!s.trim().isEmpty()) {
WPPERC5 = Byte.parseByte(s);
} else {
WPPERC5 = Byte.MIN_VALUE;
}
}

protected final void initWPPERC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPERC6 = false;
} else {
WPPERC6 = true;
}
}
}

protected final void initWPPERC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPERC7 = false;
} else {
WPPERC7 = true;
}
}
}

protected final void initWPPFV2E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV2E = false;
} else {
WPPFV2E = true;
}
}
}

protected final void initWPPFV2L(String s) {
if (!s.trim().isEmpty()) {
WPPFV2L = Short.parseShort(s);
} else {
WPPFV2L = Short.MIN_VALUE;
}
}

protected final void initWPPFV2R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV2R = false;
} else {
WPPFV2R = true;
}
}
}

protected final void initWPPFV2U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPPFV2U = false;
} else {
WPPFV2U = true;
}
}
}

protected final void initWPPFV3E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV3E = false;
} else {
WPPFV3E = true;
}
}
}

protected final void initWPPFV3L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV3L = false;
} else {
WPPFV3L = true;
}
}
}

protected final void initWPPFV3R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV3R = false;
} else {
WPPFV3R = true;
}
}
}

protected final void initWPPFV3U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV3U = false;
} else {
WPPFV3U = true;
}
}
}

protected final void initWPPFV4E(String s) {
if (!s.trim().isEmpty()) {
WPPFV4E = Byte.parseByte(s);
} else {
WPPFV4E = Byte.MIN_VALUE;
}
}

protected final void initWPPFV4L(String s) {
if (!s.trim().isEmpty()) {
WPPFV4L = Short.parseShort(s);
} else {
WPPFV4L = Short.MIN_VALUE;
}
}

protected final void initWPPFV4R(String s) {
if (!s.trim().isEmpty()) {
WPPFV4R = Byte.parseByte(s);
} else {
WPPFV4R = Byte.MIN_VALUE;
}
}

protected final void initWPPFV4U(String s) {
if (!s.trim().isEmpty()) {
WPPFV4U = Short.parseShort(s);
} else {
WPPFV4U = Short.MIN_VALUE;
}
}

protected final void initWPPFV5E(String s) {
if (!s.trim().isEmpty()) {
WPPFV5E = Byte.parseByte(s);
} else {
WPPFV5E = Byte.MIN_VALUE;
}
}

protected final void initWPPFV5L(String s) {
if (!s.trim().isEmpty()) {
WPPFV5L = Short.parseShort(s);
} else {
WPPFV5L = Short.MIN_VALUE;
}
}

protected final void initWPPFV5R(String s) {
if (!s.trim().isEmpty()) {
WPPFV5R = Byte.parseByte(s);
} else {
WPPFV5R = Byte.MIN_VALUE;
}
}

protected final void initWPPFV5U(String s) {
if (!s.trim().isEmpty()) {
WPPFV5U = Integer.parseInt(s);
} else {
WPPFV5U = Integer.MIN_VALUE;
}
}

protected final void initWPPFV6E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV6E = false;
} else {
WPPFV6E = true;
}
}
}

protected final void initWPPFV6L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV6L = false;
} else {
WPPFV6L = true;
}
}
}

protected final void initWPPFV6R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV6R = false;
} else {
WPPFV6R = true;
}
}
}

protected final void initWPPFV6U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV6U = false;
} else {
WPPFV6U = true;
}
}
}

protected final void initWPPFV7E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV7E = false;
} else {
WPPFV7E = true;
}
}
}

protected final void initWPPFV7L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV7L = false;
} else {
WPPFV7L = true;
}
}
}

protected final void initWPPFV7R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV7R = false;
} else {
WPPFV7R = true;
}
}
}

protected final void initWPPFV7U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFV7U = false;
} else {
WPPFV7U = true;
}
}
}

protected final void initWPPFVA2(String s) {
if (!s.trim().isEmpty()) {
WPPFVA2 = Short.parseShort(s);
} else {
WPPFVA2 = Short.MIN_VALUE;
}
}

protected final void initWPPFVA3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFVA3 = false;
} else {
WPPFVA3 = true;
}
}
}

protected final void initWPPFVA4(String s) {
if (!s.trim().isEmpty()) {
WPPFVA4 = Short.parseShort(s);
} else {
WPPFVA4 = Short.MIN_VALUE;
}
}

protected final void initWPPFVA5(String s) {
if (!s.trim().isEmpty()) {
WPPFVA5 = Byte.parseByte(s);
} else {
WPPFVA5 = Byte.MIN_VALUE;
}
}

protected final void initWPPFVA6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFVA6 = false;
} else {
WPPFVA6 = true;
}
}
}

protected final void initWPPFVA7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPFVA7 = false;
} else {
WPPFVA7 = true;
}
}
}

protected final void initWPPFVE(String s) {
if (!s.trim().isEmpty()) {
WPPFVE = Byte.parseByte(s);
} else {
WPPFVE = Byte.MIN_VALUE;
}
}

protected final void initWPPFVL(String s) {
if (!s.trim().isEmpty()) {
WPPFVL = Double.parseDouble(s);
} else {
WPPFVL = Double.NaN;
}
}

protected final void initWPPFVR(String s) {
if (!s.trim().isEmpty()) {
WPPFVR = Byte.parseByte(s);
} else {
WPPFVR = Byte.MIN_VALUE;
}
}

protected final void initWPPFVU(String s) {
if (!s.trim().isEmpty()) {
WPPFVU = Double.parseDouble(s);
} else {
WPPFVU = Double.NaN;
}
}

protected final void initWPPLP2(String s) {
if (!s.trim().isEmpty()) {
WPPLP2 = Byte.parseByte(s);
} else {
WPPLP2 = Byte.MIN_VALUE;
}
}

protected final void initWPPLP3(String s) {
if (!s.trim().isEmpty()) {
WPPLP3 = Byte.parseByte(s);
} else {
WPPLP3 = Byte.MIN_VALUE;
}
}

protected final void initWPPLP4(String s) {
if (!s.trim().isEmpty()) {
WPPLP4 = Byte.parseByte(s);
} else {
WPPLP4 = Byte.MIN_VALUE;
}
}

protected final void initWPPLP5(String s) {
if (!s.trim().isEmpty()) {
WPPLP5 = Byte.parseByte(s);
} else {
WPPLP5 = Byte.MIN_VALUE;
}
}

protected final void initWPPLP6(String s) {
if (!s.trim().isEmpty()) {
WPPLP6 = Byte.parseByte(s);
} else {
WPPLP6 = Byte.MIN_VALUE;
}
}

protected final void initWPPLP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPLP7 = false;
} else {
WPPLP7 = true;
}
}
}

protected final void initWPPLPH2(String s) {
if (!s.trim().isEmpty()) {
WPPLPH2 = Byte.parseByte(s);
} else {
WPPLPH2 = Byte.MIN_VALUE;
}
}

protected final void initWPPLPH3(String s) {
if (!s.trim().isEmpty()) {
WPPLPH3 = Byte.parseByte(s);
} else {
WPPLPH3 = Byte.MIN_VALUE;
}
}

protected final void initWPPLPH4(String s) {
if (!s.trim().isEmpty()) {
WPPLPH4 = Byte.parseByte(s);
} else {
WPPLPH4 = Byte.MIN_VALUE;
}
}

protected final void initWPPLPH5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPLPH5 = false;
} else {
WPPLPH5 = true;
}
}
}

protected final void initWPPLPH6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPLPH6 = false;
} else {
WPPLPH6 = true;
}
}
}

protected final void initWPPLPH7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPLPH7 = false;
} else {
WPPLPH7 = true;
}
}
}

protected final void initWPPREV(String s) {
if (!s.trim().isEmpty()) {
WPPREV = Byte.parseByte(s);
} else {
WPPREV = Byte.MIN_VALUE;
}
}

protected final void initWPPREV2(String s) {
if (!s.trim().isEmpty()) {
WPPREV2 = Byte.parseByte(s);
} else {
WPPREV2 = Byte.MIN_VALUE;
}
}

protected final void initWPPREV3(String s) {
if (!s.trim().isEmpty()) {
WPPREV3 = Byte.parseByte(s);
} else {
WPPREV3 = Byte.MIN_VALUE;
}
}

protected final void initWPPREV4(String s) {
if (!s.trim().isEmpty()) {
WPPREV4 = Byte.parseByte(s);
} else {
WPPREV4 = Byte.MIN_VALUE;
}
}

protected final void initWPPREV5(String s) {
if (!s.trim().isEmpty()) {
WPPREV5 = Byte.parseByte(s);
} else {
WPPREV5 = Byte.MIN_VALUE;
}
}

protected final void initWPPREV6(String s) {
if (!s.trim().isEmpty()) {
WPPREV6 = Byte.parseByte(s);
} else {
WPPREV6 = Byte.MIN_VALUE;
}
}

protected final void initWPPREV7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPREV7 = false;
} else {
WPPREV7 = true;
}
}
}

protected final void initWPPROFE(String s) {
if (!s.trim().isEmpty()) {
WPPROFE = Byte.parseByte(s);
} else {
WPPROFE = Byte.MIN_VALUE;
}
}

protected final void initWPPROFL(String s) {
if (!s.trim().isEmpty()) {
WPPROFL = Integer.parseInt(s);
} else {
WPPROFL = Integer.MIN_VALUE;
}
}

protected final void initWPPROFR(String s) {
if (!s.trim().isEmpty()) {
WPPROFR = Byte.parseByte(s);
} else {
WPPROFR = Byte.MIN_VALUE;
}
}

protected final void initWPPROFU(String s) {
if (!s.trim().isEmpty()) {
WPPROFU = Integer.parseInt(s);
} else {
WPPROFU = Integer.MIN_VALUE;
}
}

protected final void initWPPS(String s) {
if (!s.trim().isEmpty()) {
WPPS = Byte.parseByte(s);
} else {
WPPS = Byte.MIN_VALUE;
}
}

protected final void initWPPS95(String s) {
if (!s.trim().isEmpty()) {
WPPS95 = Byte.parseByte(s);
} else {
WPPS95 = Byte.MIN_VALUE;
}
}

protected final void initWPPSAF(String s) {
if (!s.trim().isEmpty()) {
WPPSAF = Byte.parseByte(s);
} else {
WPPSAF = Byte.MIN_VALUE;
}
}

protected final void initWPPSAL2(String s) {
if (!s.trim().isEmpty()) {
WPPSAL2 = Byte.parseByte(s);
} else {
WPPSAL2 = Byte.MIN_VALUE;
}
}

protected final void initWPPSAL3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPPSAL3 = false;
} else {
WPPSAL3 = true;
}
}
}

protected final void initWPPSAL4(String s) {
if (!s.trim().isEmpty()) {
WPPSAL4 = Byte.parseByte(s);
} else {
WPPSAL4 = Byte.MIN_VALUE;
}
}

protected final void initWPPSAL5(String s) {
if (!s.trim().isEmpty()) {
WPPSAL5 = Byte.parseByte(s);
} else {
WPPSAL5 = Byte.MIN_VALUE;
}
}

protected final void initWPPSAL6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPSAL6 = false;
} else {
WPPSAL6 = true;
}
}
}

protected final void initWPPSAL7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPSAL7 = false;
} else {
WPPSAL7 = true;
}
}
}

protected final void initWPPSEL(String s) {
if (!s.trim().isEmpty()) {
WPPSEL = Byte.parseByte(s);
} else {
WPPSEL = Byte.MIN_VALUE;
}
}

protected final void initWPPSEX(String s) {
if (!s.trim().isEmpty()) {
WPPSEX = Byte.parseByte(s);
} else {
WPPSEX = Byte.MIN_VALUE;
}
}

protected final void initWPPSM85(String s) {
if (!s.trim().isEmpty()) {
WPPSM85 = Byte.parseByte(s);
} else {
WPPSM85 = Byte.MIN_VALUE;
}
}

protected final void initWPPSM86(String s) {
if (!s.trim().isEmpty()) {
WPPSM86 = Byte.parseByte(s);
} else {
WPPSM86 = Byte.MIN_VALUE;
}
}

protected final void initWPPSMAF(String s) {
if (!s.trim().isEmpty()) {
WPPSMAF = Byte.parseByte(s);
} else {
WPPSMAF = Byte.MIN_VALUE;
}
}

protected final void initWPPSMAG(String s) {
if (!s.trim().isEmpty()) {
WPPSMAG = Byte.parseByte(s);
} else {
WPPSMAG = Byte.MIN_VALUE;
}
}

protected final void initWPPSMAL(String s) {
if (!s.trim().isEmpty()) {
WPPSMAL = Byte.parseByte(s);
} else {
WPPSMAL = Byte.MIN_VALUE;
}
}

protected final void initWPPSMDL(String s) {
if (!s.trim().isEmpty()) {
WPPSMDL = Byte.parseByte(s);
} else {
WPPSMDL = Byte.MIN_VALUE;
}
}

protected final void initWPPSMEL(String s) {
if (!s.trim().isEmpty()) {
WPPSMEL = Byte.parseByte(s);
} else {
WPPSMEL = Byte.MIN_VALUE;
}
}

protected final void initWPPSMEX(String s) {
if (!s.trim().isEmpty()) {
WPPSMEX = Byte.parseByte(s);
} else {
WPPSMEX = Byte.MIN_VALUE;
}
}

protected final void initWPPSMHR(String s) {
if (!s.trim().isEmpty()) {
WPPSMHR = Byte.parseByte(s);
} else {
WPPSMHR = Byte.MIN_VALUE;
}
}

protected final void initWPPSMOT(String s) {
if (!s.trim().isEmpty()) {
WPPSMOT = Byte.parseByte(s);
} else {
WPPSMOT = Byte.MIN_VALUE;
}
}

protected final void initWPPSOT(String s) {
if (!s.trim().isEmpty()) {
WPPSOT = Byte.parseByte(s);
} else {
WPPSOT = Byte.MIN_VALUE;
}
}

protected final void initWPPSPC(String s) {
if (!s.trim().isEmpty()) {
WPPSPC = Byte.parseByte(s);
} else {
WPPSPC = Byte.MIN_VALUE;
}
}

protected final void initWPPSPC2(String s) {
if (!s.trim().isEmpty()) {
WPPSPC2 = Byte.parseByte(s);
} else {
WPPSPC2 = Byte.MIN_VALUE;
}
}

protected final void initWPPSPC3(String s) {
if (!s.trim().isEmpty()) {
WPPSPC3 = Byte.parseByte(s);
} else {
WPPSPC3 = Byte.MIN_VALUE;
}
}

protected final void initWPPSPC4(String s) {
if (!s.trim().isEmpty()) {
WPPSPC4 = Byte.parseByte(s);
} else {
WPPSPC4 = Byte.MIN_VALUE;
}
}

protected final void initWPPSPC5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPSPC5 = false;
} else {
WPPSPC5 = true;
}
}
}

protected final void initWPPSPC6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPSPC6 = false;
} else {
WPPSPC6 = true;
}
}
}

protected final void initWPPSPC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPSPC7 = false;
} else {
WPPSPC7 = true;
}
}
}

protected final void initWPPTOP2(String s) {
if (!s.trim().isEmpty()) {
WPPTOP2 = Byte.parseByte(s);
} else {
WPPTOP2 = Byte.MIN_VALUE;
}
}

protected final void initWPPTOP3(String s) {
if (!s.trim().isEmpty()) {
WPPTOP3 = Byte.parseByte(s);
} else {
WPPTOP3 = Byte.MIN_VALUE;
}
}

protected final void initWPPTOP4(String s) {
if (!s.trim().isEmpty()) {
WPPTOP4 = Byte.parseByte(s);
} else {
WPPTOP4 = Byte.MIN_VALUE;
}
}

protected final void initWPPTOP5(String s) {
if (!s.trim().isEmpty()) {
WPPTOP5 = Byte.parseByte(s);
} else {
WPPTOP5 = Byte.MIN_VALUE;
}
}

protected final void initWPPTOP6(String s) {
if (!s.trim().isEmpty()) {
WPPTOP6 = Byte.parseByte(s);
} else {
WPPTOP6 = Byte.MIN_VALUE;
}
}

protected final void initWPPTOP7(String s) {
if (!s.trim().isEmpty()) {
WPPTOP7 = Byte.parseByte(s);
} else {
WPPTOP7 = Byte.MIN_VALUE;
}
}

protected final void initWPPTP2(String s) {
if (!s.trim().isEmpty()) {
WPPTP2 = Byte.parseByte(s);
} else {
WPPTP2 = Byte.MIN_VALUE;
}
}

protected final void initWPPTP3(String s) {
if (!s.trim().isEmpty()) {
WPPTP3 = Byte.parseByte(s);
} else {
WPPTP3 = Byte.MIN_VALUE;
}
}

protected final void initWPPTP4(String s) {
if (!s.trim().isEmpty()) {
WPPTP4 = Byte.parseByte(s);
} else {
WPPTP4 = Byte.MIN_VALUE;
}
}

protected final void initWPPTP5(String s) {
if (!s.trim().isEmpty()) {
WPPTP5 = Byte.parseByte(s);
} else {
WPPTP5 = Byte.MIN_VALUE;
}
}

protected final void initWPPTP6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPTP6 = false;
} else {
WPPTP6 = true;
}
}
}

protected final void initWPPTP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPTP7 = false;
} else {
WPPTP7 = true;
}
}
}

protected final void initWPPY2FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY2FE = false;
} else {
WPPY2FE = true;
}
}
}

protected final void initWPPY2FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY2FL = false;
} else {
WPPY2FL = true;
}
}
}

protected final void initWPPY2FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY2FR = false;
} else {
WPPY2FR = true;
}
}
}

protected final void initWPPY2FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY2FU = false;
} else {
WPPY2FU = true;
}
}
}

protected final void initWPPY2ME(String s) {
if (!s.trim().isEmpty()) {
WPPY2ME = Byte.parseByte(s);
} else {
WPPY2ME = Byte.MIN_VALUE;
}
}

protected final void initWPPY2ML(String s) {
if (!s.trim().isEmpty()) {
WPPY2ML = Short.parseShort(s);
} else {
WPPY2ML = Short.MIN_VALUE;
}
}

protected final void initWPPY2MR(String s) {
if (!s.trim().isEmpty()) {
WPPY2MR = Byte.parseByte(s);
} else {
WPPY2MR = Byte.MIN_VALUE;
}
}

protected final void initWPPY2MU(String s) {
if (!s.trim().isEmpty()) {
WPPY2MU = Short.parseShort(s);
} else {
WPPY2MU = Short.MIN_VALUE;
}
}

protected final void initWPPY2OE(String s) {
if (!s.trim().isEmpty()) {
WPPY2OE = Byte.parseByte(s);
} else {
WPPY2OE = Byte.MIN_VALUE;
}
}

protected final void initWPPY2OL(String s) {
if (!s.trim().isEmpty()) {
WPPY2OL = Short.parseShort(s);
} else {
WPPY2OL = Short.MIN_VALUE;
}
}

protected final void initWPPY2OR(String s) {
if (!s.trim().isEmpty()) {
WPPY2OR = Byte.parseByte(s);
} else {
WPPY2OR = Byte.MIN_VALUE;
}
}

protected final void initWPPY2OU(String s) {
if (!s.trim().isEmpty()) {
WPPY2OU = Byte.parseByte(s);
} else {
WPPY2OU = Byte.MIN_VALUE;
}
}

protected final void initWPPY2WE(String s) {
if (!s.trim().isEmpty()) {
WPPY2WE = Byte.parseByte(s);
} else {
WPPY2WE = Byte.MIN_VALUE;
}
}

protected final void initWPPY2WL(String s) {
if (!s.trim().isEmpty()) {
WPPY2WL = Byte.parseByte(s);
} else {
WPPY2WL = Byte.MIN_VALUE;
}
}

protected final void initWPPY2WR(String s) {
if (!s.trim().isEmpty()) {
WPPY2WR = Byte.parseByte(s);
} else {
WPPY2WR = Byte.MIN_VALUE;
}
}

protected final void initWPPY2WU(String s) {
if (!s.trim().isEmpty()) {
WPPY2WU = Byte.parseByte(s);
} else {
WPPY2WU = Byte.MIN_VALUE;
}
}

protected final void initWPPY2YE(String s) {
if (!s.trim().isEmpty()) {
WPPY2YE = Byte.parseByte(s);
} else {
WPPY2YE = Byte.MIN_VALUE;
}
}

protected final void initWPPY2YL(String s) {
if (!s.trim().isEmpty()) {
WPPY2YL = Short.parseShort(s);
} else {
WPPY2YL = Short.MIN_VALUE;
}
}

protected final void initWPPY2YR(String s) {
if (!s.trim().isEmpty()) {
WPPY2YR = Byte.parseByte(s);
} else {
WPPY2YR = Byte.MIN_VALUE;
}
}

protected final void initWPPY2YU(String s) {
if (!s.trim().isEmpty()) {
WPPY2YU = Short.parseShort(s);
} else {
WPPY2YU = Short.MIN_VALUE;
}
}

protected final void initWPPY3FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY3FE = false;
} else {
WPPY3FE = true;
}
}
}

protected final void initWPPY3FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY3FL = false;
} else {
WPPY3FL = true;
}
}
}

protected final void initWPPY3FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY3FR = false;
} else {
WPPY3FR = true;
}
}
}

protected final void initWPPY3FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY3FU = false;
} else {
WPPY3FU = true;
}
}
}

protected final void initWPPY3ME(String s) {
if (!s.trim().isEmpty()) {
WPPY3ME = Byte.parseByte(s);
} else {
WPPY3ME = Byte.MIN_VALUE;
}
}

protected final void initWPPY3ML(String s) {
if (!s.trim().isEmpty()) {
WPPY3ML = Short.parseShort(s);
} else {
WPPY3ML = Short.MIN_VALUE;
}
}

protected final void initWPPY3MR(String s) {
if (!s.trim().isEmpty()) {
WPPY3MR = Byte.parseByte(s);
} else {
WPPY3MR = Byte.MIN_VALUE;
}
}

protected final void initWPPY3MU(String s) {
if (!s.trim().isEmpty()) {
WPPY3MU = Short.parseShort(s);
} else {
WPPY3MU = Short.MIN_VALUE;
}
}

protected final void initWPPY3OE(String s) {
if (!s.trim().isEmpty()) {
WPPY3OE = Byte.parseByte(s);
} else {
WPPY3OE = Byte.MIN_VALUE;
}
}

protected final void initWPPY3OL(String s) {
if (!s.trim().isEmpty()) {
WPPY3OL = Byte.parseByte(s);
} else {
WPPY3OL = Byte.MIN_VALUE;
}
}

protected final void initWPPY3OR(String s) {
if (!s.trim().isEmpty()) {
WPPY3OR = Byte.parseByte(s);
} else {
WPPY3OR = Byte.MIN_VALUE;
}
}

protected final void initWPPY3OU(String s) {
if (!s.trim().isEmpty()) {
WPPY3OU = Byte.parseByte(s);
} else {
WPPY3OU = Byte.MIN_VALUE;
}
}

protected final void initWPPY3WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY3WE = false;
} else {
WPPY3WE = true;
}
}
}

protected final void initWPPY3WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY3WL = false;
} else {
WPPY3WL = true;
}
}
}

protected final void initWPPY3WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY3WR = false;
} else {
WPPY3WR = true;
}
}
}

protected final void initWPPY3WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY3WU = false;
} else {
WPPY3WU = true;
}
}
}

protected final void initWPPY3YE(String s) {
if (!s.trim().isEmpty()) {
WPPY3YE = Byte.parseByte(s);
} else {
WPPY3YE = Byte.MIN_VALUE;
}
}

protected final void initWPPY3YL(String s) {
if (!s.trim().isEmpty()) {
WPPY3YL = Short.parseShort(s);
} else {
WPPY3YL = Short.MIN_VALUE;
}
}

protected final void initWPPY3YR(String s) {
if (!s.trim().isEmpty()) {
WPPY3YR = Byte.parseByte(s);
} else {
WPPY3YR = Byte.MIN_VALUE;
}
}

protected final void initWPPY3YU(String s) {
if (!s.trim().isEmpty()) {
WPPY3YU = Short.parseShort(s);
} else {
WPPY3YU = Short.MIN_VALUE;
}
}

protected final void initWPPY4FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY4FE = false;
} else {
WPPY4FE = true;
}
}
}

protected final void initWPPY4FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY4FL = false;
} else {
WPPY4FL = true;
}
}
}

protected final void initWPPY4FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY4FR = false;
} else {
WPPY4FR = true;
}
}
}

protected final void initWPPY4FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY4FU = false;
} else {
WPPY4FU = true;
}
}
}

protected final void initWPPY4ME(String s) {
if (!s.trim().isEmpty()) {
WPPY4ME = Byte.parseByte(s);
} else {
WPPY4ME = Byte.MIN_VALUE;
}
}

protected final void initWPPY4ML(String s) {
if (!s.trim().isEmpty()) {
WPPY4ML = Byte.parseByte(s);
} else {
WPPY4ML = Byte.MIN_VALUE;
}
}

protected final void initWPPY4MR(String s) {
if (!s.trim().isEmpty()) {
WPPY4MR = Byte.parseByte(s);
} else {
WPPY4MR = Byte.MIN_VALUE;
}
}

protected final void initWPPY4MU(String s) {
if (!s.trim().isEmpty()) {
WPPY4MU = Short.parseShort(s);
} else {
WPPY4MU = Short.MIN_VALUE;
}
}

protected final void initWPPY4OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY4OE = false;
} else {
WPPY4OE = true;
}
}
}

protected final void initWPPY4OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY4OL = false;
} else {
WPPY4OL = true;
}
}
}

protected final void initWPPY4OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY4OR = false;
} else {
WPPY4OR = true;
}
}
}

protected final void initWPPY4OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY4OU = false;
} else {
WPPY4OU = true;
}
}
}

protected final void initWPPY4WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY4WE = false;
} else {
WPPY4WE = true;
}
}
}

protected final void initWPPY4WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY4WL = false;
} else {
WPPY4WL = true;
}
}
}

protected final void initWPPY4WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY4WR = false;
} else {
WPPY4WR = true;
}
}
}

protected final void initWPPY4WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY4WU = false;
} else {
WPPY4WU = true;
}
}
}

protected final void initWPPY4YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY4YE = false;
} else {
WPPY4YE = true;
}
}
}

protected final void initWPPY4YL(String s) {
if (!s.trim().isEmpty()) {
WPPY4YL = Byte.parseByte(s);
} else {
WPPY4YL = Byte.MIN_VALUE;
}
}

protected final void initWPPY4YR(String s) {
if (!s.trim().isEmpty()) {
WPPY4YR = Byte.parseByte(s);
} else {
WPPY4YR = Byte.MIN_VALUE;
}
}

protected final void initWPPY4YU(String s) {
if (!s.trim().isEmpty()) {
WPPY4YU = Short.parseShort(s);
} else {
WPPY4YU = Short.MIN_VALUE;
}
}

protected final void initWPPY5FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5FE = false;
} else {
WPPY5FE = true;
}
}
}

protected final void initWPPY5FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5FL = false;
} else {
WPPY5FL = true;
}
}
}

protected final void initWPPY5FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5FR = false;
} else {
WPPY5FR = true;
}
}
}

protected final void initWPPY5FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5FU = false;
} else {
WPPY5FU = true;
}
}
}

protected final void initWPPY5ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5ME = false;
} else {
WPPY5ME = true;
}
}
}

protected final void initWPPY5ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5ML = false;
} else {
WPPY5ML = true;
}
}
}

protected final void initWPPY5MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5MR = false;
} else {
WPPY5MR = true;
}
}
}

protected final void initWPPY5MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5MU = false;
} else {
WPPY5MU = true;
}
}
}

protected final void initWPPY5OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5OE = false;
} else {
WPPY5OE = true;
}
}
}

protected final void initWPPY5OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5OL = false;
} else {
WPPY5OL = true;
}
}
}

protected final void initWPPY5OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5OR = false;
} else {
WPPY5OR = true;
}
}
}

protected final void initWPPY5OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5OU = false;
} else {
WPPY5OU = true;
}
}
}

protected final void initWPPY5WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5WE = false;
} else {
WPPY5WE = true;
}
}
}

protected final void initWPPY5WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5WL = false;
} else {
WPPY5WL = true;
}
}
}

protected final void initWPPY5WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5WR = false;
} else {
WPPY5WR = true;
}
}
}

protected final void initWPPY5WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5WU = false;
} else {
WPPY5WU = true;
}
}
}

protected final void initWPPY5YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5YE = false;
} else {
WPPY5YE = true;
}
}
}

protected final void initWPPY5YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5YL = false;
} else {
WPPY5YL = true;
}
}
}

protected final void initWPPY5YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5YR = false;
} else {
WPPY5YR = true;
}
}
}

protected final void initWPPY5YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY5YU = false;
} else {
WPPY5YU = true;
}
}
}

protected final void initWPPY6FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6FE = false;
} else {
WPPY6FE = true;
}
}
}

protected final void initWPPY6FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6FL = false;
} else {
WPPY6FL = true;
}
}
}

protected final void initWPPY6FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6FR = false;
} else {
WPPY6FR = true;
}
}
}

protected final void initWPPY6FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6FU = false;
} else {
WPPY6FU = true;
}
}
}

protected final void initWPPY6ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6ME = false;
} else {
WPPY6ME = true;
}
}
}

protected final void initWPPY6ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6ML = false;
} else {
WPPY6ML = true;
}
}
}

protected final void initWPPY6MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6MR = false;
} else {
WPPY6MR = true;
}
}
}

protected final void initWPPY6MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6MU = false;
} else {
WPPY6MU = true;
}
}
}

protected final void initWPPY6OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6OE = false;
} else {
WPPY6OE = true;
}
}
}

protected final void initWPPY6OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6OL = false;
} else {
WPPY6OL = true;
}
}
}

protected final void initWPPY6OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6OR = false;
} else {
WPPY6OR = true;
}
}
}

protected final void initWPPY6OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6OU = false;
} else {
WPPY6OU = true;
}
}
}

protected final void initWPPY6WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6WE = false;
} else {
WPPY6WE = true;
}
}
}

protected final void initWPPY6WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6WL = false;
} else {
WPPY6WL = true;
}
}
}

protected final void initWPPY6WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6WR = false;
} else {
WPPY6WR = true;
}
}
}

protected final void initWPPY6WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6WU = false;
} else {
WPPY6WU = true;
}
}
}

protected final void initWPPY6YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6YE = false;
} else {
WPPY6YE = true;
}
}
}

protected final void initWPPY6YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6YL = false;
} else {
WPPY6YL = true;
}
}
}

protected final void initWPPY6YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6YR = false;
} else {
WPPY6YR = true;
}
}
}

protected final void initWPPY6YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY6YU = false;
} else {
WPPY6YU = true;
}
}
}

protected final void initWPPY7FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7FE = false;
} else {
WPPY7FE = true;
}
}
}

protected final void initWPPY7FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7FL = false;
} else {
WPPY7FL = true;
}
}
}

protected final void initWPPY7FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7FR = false;
} else {
WPPY7FR = true;
}
}
}

protected final void initWPPY7FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7FU = false;
} else {
WPPY7FU = true;
}
}
}

protected final void initWPPY7ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7ME = false;
} else {
WPPY7ME = true;
}
}
}

protected final void initWPPY7ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7ML = false;
} else {
WPPY7ML = true;
}
}
}

protected final void initWPPY7MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7MR = false;
} else {
WPPY7MR = true;
}
}
}

protected final void initWPPY7MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7MU = false;
} else {
WPPY7MU = true;
}
}
}

protected final void initWPPY7OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7OE = false;
} else {
WPPY7OE = true;
}
}
}

protected final void initWPPY7OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7OL = false;
} else {
WPPY7OL = true;
}
}
}

protected final void initWPPY7OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7OR = false;
} else {
WPPY7OR = true;
}
}
}

protected final void initWPPY7OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7OU = false;
} else {
WPPY7OU = true;
}
}
}

protected final void initWPPY7WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7WE = false;
} else {
WPPY7WE = true;
}
}
}

protected final void initWPPY7WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7WL = false;
} else {
WPPY7WL = true;
}
}
}

protected final void initWPPY7WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7WR = false;
} else {
WPPY7WR = true;
}
}
}

protected final void initWPPY7WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7WU = false;
} else {
WPPY7WU = true;
}
}
}

protected final void initWPPY7YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7YE = false;
} else {
WPPY7YE = true;
}
}
}

protected final void initWPPY7YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7YL = false;
} else {
WPPY7YL = true;
}
}
}

protected final void initWPPY7YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7YR = false;
} else {
WPPY7YR = true;
}
}
}

protected final void initWPPY7YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPY7YU = false;
} else {
WPPY7YU = true;
}
}
}

protected final void initWPPYR2(String s) {
if (!s.trim().isEmpty()) {
WPPYR2 = Integer.parseInt(s);
} else {
WPPYR2 = Integer.MIN_VALUE;
}
}

protected final void initWPPYR3(String s) {
if (!s.trim().isEmpty()) {
WPPYR3 = Integer.parseInt(s);
} else {
WPPYR3 = Integer.MIN_VALUE;
}
}

protected final void initWPPYR4(String s) {
if (!s.trim().isEmpty()) {
WPPYR4 = Integer.parseInt(s);
} else {
WPPYR4 = Integer.MIN_VALUE;
}
}

protected final void initWPPYR5(String s) {
if (!s.trim().isEmpty()) {
WPPYR5 = Short.parseShort(s);
} else {
WPPYR5 = Short.MIN_VALUE;
}
}

protected final void initWPPYR6(String s) {
if (!s.trim().isEmpty()) {
WPPYR6 = Short.parseShort(s);
} else {
WPPYR6 = Short.MIN_VALUE;
}
}

protected final void initWPPYR7(String s) {
if (!s.trim().isEmpty()) {
WPPYR7 = Short.parseShort(s);
} else {
WPPYR7 = Short.MIN_VALUE;
}
}

protected final void initWPPYRFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPYRFE = false;
} else {
WPPYRFE = true;
}
}
}

protected final void initWPPYRFL(String s) {
if (!s.trim().isEmpty()) {
WPPYRFL = Short.parseShort(s);
} else {
WPPYRFL = Short.MIN_VALUE;
}
}

protected final void initWPPYRFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPYRFR = false;
} else {
WPPYRFR = true;
}
}
}

protected final void initWPPYRFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPYRFU = false;
} else {
WPPYRFU = true;
}
}
}

protected final void initWPPYRME(String s) {
if (!s.trim().isEmpty()) {
WPPYRME = Byte.parseByte(s);
} else {
WPPYRME = Byte.MIN_VALUE;
}
}

protected final void initWPPYRML(String s) {
if (!s.trim().isEmpty()) {
WPPYRML = Double.parseDouble(s);
} else {
WPPYRML = Double.NaN;
}
}

protected final void initWPPYRMR(String s) {
if (!s.trim().isEmpty()) {
WPPYRMR = Byte.parseByte(s);
} else {
WPPYRMR = Byte.MIN_VALUE;
}
}

protected final void initWPPYRMU(String s) {
if (!s.trim().isEmpty()) {
WPPYRMU = Double.parseDouble(s);
} else {
WPPYRMU = Double.NaN;
}
}

protected final void initWPPYROE(String s) {
if (!s.trim().isEmpty()) {
WPPYROE = Byte.parseByte(s);
} else {
WPPYROE = Byte.MIN_VALUE;
}
}

protected final void initWPPYROL(String s) {
if (!s.trim().isEmpty()) {
WPPYROL = Short.parseShort(s);
} else {
WPPYROL = Short.MIN_VALUE;
}
}

protected final void initWPPYROR(String s) {
if (!s.trim().isEmpty()) {
WPPYROR = Byte.parseByte(s);
} else {
WPPYROR = Byte.MIN_VALUE;
}
}

protected final void initWPPYROU(String s) {
if (!s.trim().isEmpty()) {
WPPYROU = Short.parseShort(s);
} else {
WPPYROU = Short.MIN_VALUE;
}
}

protected final void initWPPYRWE(String s) {
if (!s.trim().isEmpty()) {
WPPYRWE = Byte.parseByte(s);
} else {
WPPYRWE = Byte.MIN_VALUE;
}
}

protected final void initWPPYRWL(String s) {
if (!s.trim().isEmpty()) {
WPPYRWL = Short.parseShort(s);
} else {
WPPYRWL = Short.MIN_VALUE;
}
}

protected final void initWPPYRWR(String s) {
if (!s.trim().isEmpty()) {
WPPYRWR = Byte.parseByte(s);
} else {
WPPYRWR = Byte.MIN_VALUE;
}
}

protected final void initWPPYRWU(String s) {
if (!s.trim().isEmpty()) {
WPPYRWU = Short.parseShort(s);
} else {
WPPYRWU = Short.MIN_VALUE;
}
}

protected final void initWPPYRYE(String s) {
if (!s.trim().isEmpty()) {
WPPYRYE = Byte.parseByte(s);
} else {
WPPYRYE = Byte.MIN_VALUE;
}
}

protected final void initWPPYRYL(String s) {
if (!s.trim().isEmpty()) {
WPPYRYL = Double.parseDouble(s);
} else {
WPPYRYL = Double.NaN;
}
}

protected final void initWPPYRYR(String s) {
if (!s.trim().isEmpty()) {
WPPYRYR = Byte.parseByte(s);
} else {
WPPYRYR = Byte.MIN_VALUE;
}
}

protected final void initWPPYRYU(String s) {
if (!s.trim().isEmpty()) {
WPPYRYU = Double.parseDouble(s);
} else {
WPPYRYU = Double.NaN;
}
}

protected final void initWPQN(String s) {
if (!s.trim().isEmpty()) {
WPQN = Byte.parseByte(s);
} else {
WPQN = Byte.MIN_VALUE;
}
}

protected final void initWPRC295(String s) {
if (!s.trim().isEmpty()) {
WPRC295 = Byte.parseByte(s);
} else {
WPRC295 = Byte.MIN_VALUE;
}
}

protected final void initWPRC2MO(String s) {
if (!s.trim().isEmpty()) {
WPRC2MO = Byte.parseByte(s);
} else {
WPRC2MO = Byte.MIN_VALUE;
}
}

protected final void initWPRC2PU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC2PU = false;
} else {
WPRC2PU = true;
}
}
}

protected final void initWPRC2RE(String s) {
if (!s.trim().isEmpty()) {
WPRC2RE = Byte.parseByte(s);
} else {
WPRC2RE = Byte.MIN_VALUE;
}
}

protected final void initWPRC2RI(String s) {
if (!s.trim().isEmpty()) {
WPRC2RI = Byte.parseByte(s);
} else {
WPRC2RI = Byte.MIN_VALUE;
}
}

protected final void initWPRC2ST(String s) {
if (!s.trim().isEmpty()) {
WPRC2ST = Byte.parseByte(s);
} else {
WPRC2ST = Byte.MIN_VALUE;
}
}

protected final void initWPRC395(String s) {
if (!s.trim().isEmpty()) {
WPRC395 = Byte.parseByte(s);
} else {
WPRC395 = Byte.MIN_VALUE;
}
}

protected final void initWPRC3MO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC3MO = false;
} else {
WPRC3MO = true;
}
}
}

protected final void initWPRC3PU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC3PU = false;
} else {
WPRC3PU = true;
}
}
}

protected final void initWPRC3RE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC3RE = false;
} else {
WPRC3RE = true;
}
}
}

protected final void initWPRC3RI(String s) {
if (!s.trim().isEmpty()) {
WPRC3RI = Byte.parseByte(s);
} else {
WPRC3RI = Byte.MIN_VALUE;
}
}

protected final void initWPRC3ST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC3ST = false;
} else {
WPRC3ST = true;
}
}
}

protected final void initWPRC495(String s) {
if (!s.trim().isEmpty()) {
WPRC495 = Byte.parseByte(s);
} else {
WPRC495 = Byte.MIN_VALUE;
}
}

protected final void initWPRC4MO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC4MO = false;
} else {
WPRC4MO = true;
}
}
}

protected final void initWPRC4PU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC4PU = false;
} else {
WPRC4PU = true;
}
}
}

protected final void initWPRC4RE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC4RE = false;
} else {
WPRC4RE = true;
}
}
}

protected final void initWPRC4RI(String s) {
if (!s.trim().isEmpty()) {
WPRC4RI = Byte.parseByte(s);
} else {
WPRC4RI = Byte.MIN_VALUE;
}
}

protected final void initWPRC4ST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC4ST = false;
} else {
WPRC4ST = true;
}
}
}

protected final void initWPRC595(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC595 = false;
} else {
WPRC595 = true;
}
}
}

protected final void initWPRC5MO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC5MO = false;
} else {
WPRC5MO = true;
}
}
}

protected final void initWPRC5PU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC5PU = false;
} else {
WPRC5PU = true;
}
}
}

protected final void initWPRC5RE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC5RE = false;
} else {
WPRC5RE = true;
}
}
}

protected final void initWPRC5RI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC5RI = false;
} else {
WPRC5RI = true;
}
}
}

protected final void initWPRC5ST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC5ST = false;
} else {
WPRC5ST = true;
}
}
}

protected final void initWPRC695(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC695 = false;
} else {
WPRC695 = true;
}
}
}

protected final void initWPRC6MO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC6MO = false;
} else {
WPRC6MO = true;
}
}
}

protected final void initWPRC6PU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC6PU = false;
} else {
WPRC6PU = true;
}
}
}

protected final void initWPRC6RE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC6RE = false;
} else {
WPRC6RE = true;
}
}
}

protected final void initWPRC6RI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC6RI = false;
} else {
WPRC6RI = true;
}
}
}

protected final void initWPRC6ST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC6ST = false;
} else {
WPRC6ST = true;
}
}
}

protected final void initWPRC795(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC795 = false;
} else {
WPRC795 = true;
}
}
}

protected final void initWPRC7MO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC7MO = false;
} else {
WPRC7MO = true;
}
}
}

protected final void initWPRC7PU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC7PU = false;
} else {
WPRC7PU = true;
}
}
}

protected final void initWPRC7RE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC7RE = false;
} else {
WPRC7RE = true;
}
}
}

protected final void initWPRC7RI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC7RI = false;
} else {
WPRC7RI = true;
}
}
}

protected final void initWPRC7ST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRC7ST = false;
} else {
WPRC7ST = true;
}
}
}

protected final void initWPRC95(String s) {
if (!s.trim().isEmpty()) {
WPRC95 = Byte.parseByte(s);
} else {
WPRC95 = Byte.MIN_VALUE;
}
}

protected final void initWPRCM285(String s) {
if (!s.trim().isEmpty()) {
WPRCM285 = Byte.parseByte(s);
} else {
WPRCM285 = Byte.MIN_VALUE;
}
}

protected final void initWPRCM286(String s) {
if (!s.trim().isEmpty()) {
WPRCM286 = Byte.parseByte(s);
} else {
WPRCM286 = Byte.MIN_VALUE;
}
}

protected final void initWPRCM2AF(String s) {
if (!s.trim().isEmpty()) {
WPRCM2AF = Byte.parseByte(s);
} else {
WPRCM2AF = Byte.MIN_VALUE;
}
}

protected final void initWPRCM2MO(String s) {
if (!s.trim().isEmpty()) {
WPRCM2MO = Byte.parseByte(s);
} else {
WPRCM2MO = Byte.MIN_VALUE;
}
}

protected final void initWPRCM2NK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM2NK = false;
} else {
WPRCM2NK = true;
}
}
}

protected final void initWPRCM2OH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM2OH = false;
} else {
WPRCM2OH = true;
}
}
}

protected final void initWPRCM2PU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM2PU = false;
} else {
WPRCM2PU = true;
}
}
}

protected final void initWPRCM2RE(String s) {
if (!s.trim().isEmpty()) {
WPRCM2RE = Byte.parseByte(s);
} else {
WPRCM2RE = Byte.MIN_VALUE;
}
}

protected final void initWPRCM2RI(String s) {
if (!s.trim().isEmpty()) {
WPRCM2RI = Byte.parseByte(s);
} else {
WPRCM2RI = Byte.MIN_VALUE;
}
}

protected final void initWPRCM2ST(String s) {
if (!s.trim().isEmpty()) {
WPRCM2ST = Byte.parseByte(s);
} else {
WPRCM2ST = Byte.MIN_VALUE;
}
}

protected final void initWPRCM2UN(String s) {
if (!s.trim().isEmpty()) {
WPRCM2UN = Byte.parseByte(s);
} else {
WPRCM2UN = Byte.MIN_VALUE;
}
}

protected final void initWPRCM385(String s) {
if (!s.trim().isEmpty()) {
WPRCM385 = Byte.parseByte(s);
} else {
WPRCM385 = Byte.MIN_VALUE;
}
}

protected final void initWPRCM386(String s) {
if (!s.trim().isEmpty()) {
WPRCM386 = Byte.parseByte(s);
} else {
WPRCM386 = Byte.MIN_VALUE;
}
}

protected final void initWPRCM3AF(String s) {
if (!s.trim().isEmpty()) {
WPRCM3AF = Byte.parseByte(s);
} else {
WPRCM3AF = Byte.MIN_VALUE;
}
}

protected final void initWPRCM3MO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM3MO = false;
} else {
WPRCM3MO = true;
}
}
}

protected final void initWPRCM3NK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM3NK = false;
} else {
WPRCM3NK = true;
}
}
}

protected final void initWPRCM3OH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM3OH = false;
} else {
WPRCM3OH = true;
}
}
}

protected final void initWPRCM3PU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM3PU = false;
} else {
WPRCM3PU = true;
}
}
}

protected final void initWPRCM3RE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM3RE = false;
} else {
WPRCM3RE = true;
}
}
}

protected final void initWPRCM3RI(String s) {
if (!s.trim().isEmpty()) {
WPRCM3RI = Byte.parseByte(s);
} else {
WPRCM3RI = Byte.MIN_VALUE;
}
}

protected final void initWPRCM3ST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM3ST = false;
} else {
WPRCM3ST = true;
}
}
}

protected final void initWPRCM3UN(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM3UN = false;
} else {
WPRCM3UN = true;
}
}
}

protected final void initWPRCM485(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM485 = false;
} else {
WPRCM485 = true;
}
}
}

protected final void initWPRCM486(String s) {
if (!s.trim().isEmpty()) {
WPRCM486 = Byte.parseByte(s);
} else {
WPRCM486 = Byte.MIN_VALUE;
}
}

protected final void initWPRCM4AF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM4AF = false;
} else {
WPRCM4AF = true;
}
}
}

protected final void initWPRCM4MO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM4MO = false;
} else {
WPRCM4MO = true;
}
}
}

protected final void initWPRCM4NK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM4NK = false;
} else {
WPRCM4NK = true;
}
}
}

protected final void initWPRCM4OH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM4OH = false;
} else {
WPRCM4OH = true;
}
}
}

protected final void initWPRCM4PU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM4PU = false;
} else {
WPRCM4PU = true;
}
}
}

protected final void initWPRCM4RE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM4RE = false;
} else {
WPRCM4RE = true;
}
}
}

protected final void initWPRCM4RI(String s) {
if (!s.trim().isEmpty()) {
WPRCM4RI = Byte.parseByte(s);
} else {
WPRCM4RI = Byte.MIN_VALUE;
}
}

protected final void initWPRCM4ST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM4ST = false;
} else {
WPRCM4ST = true;
}
}
}

protected final void initWPRCM4UN(String s) {
if (!s.trim().isEmpty()) {
WPRCM4UN = Byte.parseByte(s);
} else {
WPRCM4UN = Byte.MIN_VALUE;
}
}

protected final void initWPRCM585(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM585 = false;
} else {
WPRCM585 = true;
}
}
}

protected final void initWPRCM586(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM586 = false;
} else {
WPRCM586 = true;
}
}
}

protected final void initWPRCM5AF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM5AF = false;
} else {
WPRCM5AF = true;
}
}
}

protected final void initWPRCM5MO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM5MO = false;
} else {
WPRCM5MO = true;
}
}
}

protected final void initWPRCM5NK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM5NK = false;
} else {
WPRCM5NK = true;
}
}
}

protected final void initWPRCM5OH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM5OH = false;
} else {
WPRCM5OH = true;
}
}
}

protected final void initWPRCM5PU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM5PU = false;
} else {
WPRCM5PU = true;
}
}
}

protected final void initWPRCM5RE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM5RE = false;
} else {
WPRCM5RE = true;
}
}
}

protected final void initWPRCM5RI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM5RI = false;
} else {
WPRCM5RI = true;
}
}
}

protected final void initWPRCM5ST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM5ST = false;
} else {
WPRCM5ST = true;
}
}
}

protected final void initWPRCM5UN(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM5UN = false;
} else {
WPRCM5UN = true;
}
}
}

protected final void initWPRCM685(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM685 = false;
} else {
WPRCM685 = true;
}
}
}

protected final void initWPRCM686(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM686 = false;
} else {
WPRCM686 = true;
}
}
}

protected final void initWPRCM6AF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM6AF = false;
} else {
WPRCM6AF = true;
}
}
}

protected final void initWPRCM6MO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM6MO = false;
} else {
WPRCM6MO = true;
}
}
}

protected final void initWPRCM6NK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM6NK = false;
} else {
WPRCM6NK = true;
}
}
}

protected final void initWPRCM6OH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM6OH = false;
} else {
WPRCM6OH = true;
}
}
}

protected final void initWPRCM6PU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM6PU = false;
} else {
WPRCM6PU = true;
}
}
}

protected final void initWPRCM6RE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM6RE = false;
} else {
WPRCM6RE = true;
}
}
}

protected final void initWPRCM6RI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM6RI = false;
} else {
WPRCM6RI = true;
}
}
}

protected final void initWPRCM6ST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM6ST = false;
} else {
WPRCM6ST = true;
}
}
}

protected final void initWPRCM6UN(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM6UN = false;
} else {
WPRCM6UN = true;
}
}
}

protected final void initWPRCM785(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM785 = false;
} else {
WPRCM785 = true;
}
}
}

protected final void initWPRCM786(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM786 = false;
} else {
WPRCM786 = true;
}
}
}

protected final void initWPRCM7AF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM7AF = false;
} else {
WPRCM7AF = true;
}
}
}

protected final void initWPRCM7MO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM7MO = false;
} else {
WPRCM7MO = true;
}
}
}

protected final void initWPRCM7NK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM7NK = false;
} else {
WPRCM7NK = true;
}
}
}

protected final void initWPRCM7OH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM7OH = false;
} else {
WPRCM7OH = true;
}
}
}

protected final void initWPRCM7PU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM7PU = false;
} else {
WPRCM7PU = true;
}
}
}

protected final void initWPRCM7RE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM7RE = false;
} else {
WPRCM7RE = true;
}
}
}

protected final void initWPRCM7RI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM7RI = false;
} else {
WPRCM7RI = true;
}
}
}

protected final void initWPRCM7ST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM7ST = false;
} else {
WPRCM7ST = true;
}
}
}

protected final void initWPRCM7UN(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCM7UN = false;
} else {
WPRCM7UN = true;
}
}
}

protected final void initWPRCM85(String s) {
if (!s.trim().isEmpty()) {
WPRCM85 = Byte.parseByte(s);
} else {
WPRCM85 = Byte.MIN_VALUE;
}
}

protected final void initWPRCM86(String s) {
if (!s.trim().isEmpty()) {
WPRCM86 = Byte.parseByte(s);
} else {
WPRCM86 = Byte.MIN_VALUE;
}
}

protected final void initWPRCMAF(String s) {
if (!s.trim().isEmpty()) {
WPRCMAF = Byte.parseByte(s);
} else {
WPRCMAF = Byte.MIN_VALUE;
}
}

protected final void initWPRCMMO(String s) {
if (!s.trim().isEmpty()) {
WPRCMMO = Byte.parseByte(s);
} else {
WPRCMMO = Byte.MIN_VALUE;
}
}

protected final void initWPRCMNK(String s) {
if (!s.trim().isEmpty()) {
WPRCMNK = Byte.parseByte(s);
} else {
WPRCMNK = Byte.MIN_VALUE;
}
}

protected final void initWPRCMO(String s) {
if (!s.trim().isEmpty()) {
WPRCMO = Byte.parseByte(s);
} else {
WPRCMO = Byte.MIN_VALUE;
}
}

protected final void initWPRCMOH(String s) {
if (!s.trim().isEmpty()) {
WPRCMOH = Byte.parseByte(s);
} else {
WPRCMOH = Byte.MIN_VALUE;
}
}

protected final void initWPRCMPU(String s) {
if (!s.trim().isEmpty()) {
WPRCMPU = Byte.parseByte(s);
} else {
WPRCMPU = Byte.MIN_VALUE;
}
}

protected final void initWPRCMRE(String s) {
if (!s.trim().isEmpty()) {
WPRCMRE = Byte.parseByte(s);
} else {
WPRCMRE = Byte.MIN_VALUE;
}
}

protected final void initWPRCMRI(String s) {
if (!s.trim().isEmpty()) {
WPRCMRI = Byte.parseByte(s);
} else {
WPRCMRI = Byte.MIN_VALUE;
}
}

protected final void initWPRCMST(String s) {
if (!s.trim().isEmpty()) {
WPRCMST = Byte.parseByte(s);
} else {
WPRCMST = Byte.MIN_VALUE;
}
}

protected final void initWPRCMUN(String s) {
if (!s.trim().isEmpty()) {
WPRCMUN = Byte.parseByte(s);
} else {
WPRCMUN = Byte.MIN_VALUE;
}
}

protected final void initWPRCON2(String s) {
if (!s.trim().isEmpty()) {
WPRCON2 = Byte.parseByte(s);
} else {
WPRCON2 = Byte.MIN_VALUE;
}
}

protected final void initWPRCON3(String s) {
if (!s.trim().isEmpty()) {
WPRCON3 = Byte.parseByte(s);
} else {
WPRCON3 = Byte.MIN_VALUE;
}
}

protected final void initWPRCON4(String s) {
if (!s.trim().isEmpty()) {
WPRCON4 = Byte.parseByte(s);
} else {
WPRCON4 = Byte.MIN_VALUE;
}
}

protected final void initWPRCON5(String s) {
if (!s.trim().isEmpty()) {
WPRCON5 = Byte.parseByte(s);
} else {
WPRCON5 = Byte.MIN_VALUE;
}
}

protected final void initWPRCON6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCON6 = false;
} else {
WPRCON6 = true;
}
}
}

protected final void initWPRCON7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRCON7 = false;
} else {
WPRCON7 = true;
}
}
}

protected final void initWPRCPU(String s) {
if (!s.trim().isEmpty()) {
WPRCPU = Byte.parseByte(s);
} else {
WPRCPU = Byte.MIN_VALUE;
}
}

protected final void initWPRCRE(String s) {
if (!s.trim().isEmpty()) {
WPRCRE = Byte.parseByte(s);
} else {
WPRCRE = Byte.MIN_VALUE;
}
}

protected final void initWPRCRI(String s) {
if (!s.trim().isEmpty()) {
WPRCRI = Byte.parseByte(s);
} else {
WPRCRI = Byte.MIN_VALUE;
}
}

protected final void initWPRCST(String s) {
if (!s.trim().isEmpty()) {
WPRCST = Byte.parseByte(s);
} else {
WPRCST = Byte.MIN_VALUE;
}
}

protected final void initWPREA95(String s) {
if (!s.trim().isEmpty()) {
WPREA95 = Byte.parseByte(s);
} else {
WPREA95 = Byte.MIN_VALUE;
}
}

protected final void initWPREA96(String s) {
if (!s.trim().isEmpty()) {
WPREA96 = Byte.parseByte(s);
} else {
WPREA96 = Byte.MIN_VALUE;
}
}

protected final void initWPREACH(String s) {
if (!s.trim().isEmpty()) {
WPREACH = Byte.parseByte(s);
} else {
WPREACH = Byte.MIN_VALUE;
}
}

protected final void initWPREADT(String s) {
if (!s.trim().isEmpty()) {
WPREADT = Byte.parseByte(s);
} else {
WPREADT = Byte.MIN_VALUE;
}
}

protected final void initWPREAEN(String s) {
if (!s.trim().isEmpty()) {
WPREAEN = Byte.parseByte(s);
} else {
WPREAEN = Byte.MIN_VALUE;
}
}

protected final void initWPREAFA(String s) {
if (!s.trim().isEmpty()) {
WPREAFA = Byte.parseByte(s);
} else {
WPREAFA = Byte.MIN_VALUE;
}
}

protected final void initWPREAFI(String s) {
if (!s.trim().isEmpty()) {
WPREAFI = Byte.parseByte(s);
} else {
WPREAFI = Byte.MIN_VALUE;
}
}

protected final void initWPREAM85(String s) {
if (!s.trim().isEmpty()) {
WPREAM85 = Byte.parseByte(s);
} else {
WPREAM85 = Byte.MIN_VALUE;
}
}

protected final void initWPREAM86(String s) {
if (!s.trim().isEmpty()) {
WPREAM86 = Byte.parseByte(s);
} else {
WPREAM86 = Byte.MIN_VALUE;
}
}

protected final void initWPREAM96(String s) {
if (!s.trim().isEmpty()) {
WPREAM96 = Byte.parseByte(s);
} else {
WPREAM96 = Byte.MIN_VALUE;
}
}

protected final void initWPREAMCH(String s) {
if (!s.trim().isEmpty()) {
WPREAMCH = Byte.parseByte(s);
} else {
WPREAMCH = Byte.MIN_VALUE;
}
}

protected final void initWPREAMDT(String s) {
if (!s.trim().isEmpty()) {
WPREAMDT = Byte.parseByte(s);
} else {
WPREAMDT = Byte.MIN_VALUE;
}
}

protected final void initWPREAMEN(String s) {
if (!s.trim().isEmpty()) {
WPREAMEN = Byte.parseByte(s);
} else {
WPREAMEN = Byte.MIN_VALUE;
}
}

protected final void initWPREAMFA(String s) {
if (!s.trim().isEmpty()) {
WPREAMFA = Byte.parseByte(s);
} else {
WPREAMFA = Byte.MIN_VALUE;
}
}

protected final void initWPREAMFI(String s) {
if (!s.trim().isEmpty()) {
WPREAMFI = Byte.parseByte(s);
} else {
WPREAMFI = Byte.MIN_VALUE;
}
}

protected final void initWPREAMNO(String s) {
if (!s.trim().isEmpty()) {
WPREAMNO = Byte.parseByte(s);
} else {
WPREAMNO = Byte.MIN_VALUE;
}
}

protected final void initWPREAMOH(String s) {
if (!s.trim().isEmpty()) {
WPREAMOH = Byte.parseByte(s);
} else {
WPREAMOH = Byte.MIN_VALUE;
}
}

protected final void initWPREAMRE(String s) {
if (!s.trim().isEmpty()) {
WPREAMRE = Byte.parseByte(s);
} else {
WPREAMRE = Byte.MIN_VALUE;
}
}

protected final void initWPREAMRH(String s) {
if (!s.trim().isEmpty()) {
WPREAMRH = Byte.parseByte(s);
} else {
WPREAMRH = Byte.MIN_VALUE;
}
}

protected final void initWPREAMST(String s) {
if (!s.trim().isEmpty()) {
WPREAMST = Byte.parseByte(s);
} else {
WPREAMST = Byte.MIN_VALUE;
}
}

protected final void initWPREAMVR(String s) {
if (!s.trim().isEmpty()) {
WPREAMVR = Byte.parseByte(s);
} else {
WPREAMVR = Byte.MIN_VALUE;
}
}

protected final void initWPREAMYO(String s) {
if (!s.trim().isEmpty()) {
WPREAMYO = Byte.parseByte(s);
} else {
WPREAMYO = Byte.MIN_VALUE;
}
}

protected final void initWPREANO(String s) {
if (!s.trim().isEmpty()) {
WPREANO = Byte.parseByte(s);
} else {
WPREANO = Byte.MIN_VALUE;
}
}

protected final void initWPREAOH(String s) {
if (!s.trim().isEmpty()) {
WPREAOH = Byte.parseByte(s);
} else {
WPREAOH = Byte.MIN_VALUE;
}
}

protected final void initWPREARE(String s) {
if (!s.trim().isEmpty()) {
WPREARE = Byte.parseByte(s);
} else {
WPREARE = Byte.MIN_VALUE;
}
}

protected final void initWPREARH(String s) {
if (!s.trim().isEmpty()) {
WPREARH = Byte.parseByte(s);
} else {
WPREARH = Byte.MIN_VALUE;
}
}

protected final void initWPREAST(String s) {
if (!s.trim().isEmpty()) {
WPREAST = Byte.parseByte(s);
} else {
WPREAST = Byte.MIN_VALUE;
}
}

protected final void initWPREAVR(String s) {
if (!s.trim().isEmpty()) {
WPREAVR = Byte.parseByte(s);
} else {
WPREAVR = Byte.MIN_VALUE;
}
}

protected final void initWPREAYO(String s) {
if (!s.trim().isEmpty()) {
WPREAYO = Byte.parseByte(s);
} else {
WPREAYO = Byte.MIN_VALUE;
}
}

protected final void initWPREC2(String s) {
if (!s.trim().isEmpty()) {
WPREC2 = Byte.parseByte(s);
} else {
WPREC2 = Byte.MIN_VALUE;
}
}

protected final void initWPREC3(String s) {
if (!s.trim().isEmpty()) {
WPREC3 = Byte.parseByte(s);
} else {
WPREC3 = Byte.MIN_VALUE;
}
}

protected final void initWPREC4(String s) {
if (!s.trim().isEmpty()) {
WPREC4 = Byte.parseByte(s);
} else {
WPREC4 = Byte.MIN_VALUE;
}
}

protected final void initWPREC5(String s) {
if (!s.trim().isEmpty()) {
WPREC5 = Byte.parseByte(s);
} else {
WPREC5 = Byte.MIN_VALUE;
}
}

protected final void initWPREC6(String s) {
if (!s.trim().isEmpty()) {
WPREC6 = Byte.parseByte(s);
} else {
WPREC6 = Byte.MIN_VALUE;
}
}

protected final void initWPREC7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPREC7 = false;
} else {
WPREC7 = true;
}
}
}

protected final void initWPRGHX(String s) {
if (!s.trim().isEmpty()) {
WPRGHX = Byte.parseByte(s);
} else {
WPRGHX = Byte.MIN_VALUE;
}
}

protected final void initWPRGHX2(String s) {
if (!s.trim().isEmpty()) {
WPRGHX2 = Byte.parseByte(s);
} else {
WPRGHX2 = Byte.MIN_VALUE;
}
}

protected final void initWPRGHX3(String s) {
if (!s.trim().isEmpty()) {
WPRGHX3 = Byte.parseByte(s);
} else {
WPRGHX3 = Byte.MIN_VALUE;
}
}

protected final void initWPRGHX4(String s) {
if (!s.trim().isEmpty()) {
WPRGHX4 = Byte.parseByte(s);
} else {
WPRGHX4 = Byte.MIN_VALUE;
}
}

protected final void initWPRGHX5(String s) {
if (!s.trim().isEmpty()) {
WPRGHX5 = Byte.parseByte(s);
} else {
WPRGHX5 = Byte.MIN_VALUE;
}
}

protected final void initWPRGHX6(String s) {
if (!s.trim().isEmpty()) {
WPRGHX6 = Byte.parseByte(s);
} else {
WPRGHX6 = Byte.MIN_VALUE;
}
}

protected final void initWPRGHX7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRGHX7 = false;
} else {
WPRGHX7 = true;
}
}
}

protected final void initWPRPENS(String s) {
if (!s.trim().isEmpty()) {
WPRPENS = Byte.parseByte(s);
} else {
WPRPENS = Byte.MIN_VALUE;
}
}

protected final void initWPRR95(String s) {
if (!s.trim().isEmpty()) {
WPRR95 = Byte.parseByte(s);
} else {
WPRR95 = Byte.MIN_VALUE;
}
}

protected final void initWPRR96(String s) {
if (!s.trim().isEmpty()) {
WPRR96 = Byte.parseByte(s);
} else {
WPRR96 = Byte.MIN_VALUE;
}
}

protected final void initWPRRAG(String s) {
if (!s.trim().isEmpty()) {
WPRRAG = Byte.parseByte(s);
} else {
WPRRAG = Byte.MIN_VALUE;
}
}

protected final void initWPRRCH(String s) {
if (!s.trim().isEmpty()) {
WPRRCH = Byte.parseByte(s);
} else {
WPRRCH = Byte.MIN_VALUE;
}
}

protected final void initWPRRDT(String s) {
if (!s.trim().isEmpty()) {
WPRRDT = Byte.parseByte(s);
} else {
WPRRDT = Byte.MIN_VALUE;
}
}

protected final void initWPRREN(String s) {
if (!s.trim().isEmpty()) {
WPRREN = Byte.parseByte(s);
} else {
WPRREN = Byte.MIN_VALUE;
}
}

protected final void initWPRRFA(String s) {
if (!s.trim().isEmpty()) {
WPRRFA = Byte.parseByte(s);
} else {
WPRRFA = Byte.MIN_VALUE;
}
}

protected final void initWPRRFI(String s) {
if (!s.trim().isEmpty()) {
WPRRFI = Byte.parseByte(s);
} else {
WPRRFI = Byte.MIN_VALUE;
}
}

protected final void initWPRRM85(String s) {
if (!s.trim().isEmpty()) {
WPRRM85 = Byte.parseByte(s);
} else {
WPRRM85 = Byte.MIN_VALUE;
}
}

protected final void initWPRRM86(String s) {
if (!s.trim().isEmpty()) {
WPRRM86 = Byte.parseByte(s);
} else {
WPRRM86 = Byte.MIN_VALUE;
}
}

protected final void initWPRRM96(String s) {
if (!s.trim().isEmpty()) {
WPRRM96 = Byte.parseByte(s);
} else {
WPRRM96 = Byte.MIN_VALUE;
}
}

protected final void initWPRRMAF(String s) {
if (!s.trim().isEmpty()) {
WPRRMAF = Byte.parseByte(s);
} else {
WPRRMAF = Byte.MIN_VALUE;
}
}

protected final void initWPRRMAG(String s) {
if (!s.trim().isEmpty()) {
WPRRMAG = Byte.parseByte(s);
} else {
WPRRMAG = Byte.MIN_VALUE;
}
}

protected final void initWPRRMCH(String s) {
if (!s.trim().isEmpty()) {
WPRRMCH = Byte.parseByte(s);
} else {
WPRRMCH = Byte.MIN_VALUE;
}
}

protected final void initWPRRMDT(String s) {
if (!s.trim().isEmpty()) {
WPRRMDT = Byte.parseByte(s);
} else {
WPRRMDT = Byte.MIN_VALUE;
}
}

protected final void initWPRRMEN(String s) {
if (!s.trim().isEmpty()) {
WPRRMEN = Byte.parseByte(s);
} else {
WPRRMEN = Byte.MIN_VALUE;
}
}

protected final void initWPRRMFA(String s) {
if (!s.trim().isEmpty()) {
WPRRMFA = Byte.parseByte(s);
} else {
WPRRMFA = Byte.MIN_VALUE;
}
}

protected final void initWPRRMFI(String s) {
if (!s.trim().isEmpty()) {
WPRRMFI = Byte.parseByte(s);
} else {
WPRRMFI = Byte.MIN_VALUE;
}
}

protected final void initWPRRMLI(String s) {
if (!s.trim().isEmpty()) {
WPRRMLI = Byte.parseByte(s);
} else {
WPRRMLI = Byte.MIN_VALUE;
}
}

protected final void initWPRRMOH(String s) {
if (!s.trim().isEmpty()) {
WPRRMOH = Byte.parseByte(s);
} else {
WPRRMOH = Byte.MIN_VALUE;
}
}

protected final void initWPRRMRE(String s) {
if (!s.trim().isEmpty()) {
WPRRMRE = Byte.parseByte(s);
} else {
WPRRMRE = Byte.MIN_VALUE;
}
}

protected final void initWPRRMRH(String s) {
if (!s.trim().isEmpty()) {
WPRRMRH = Byte.parseByte(s);
} else {
WPRRMRH = Byte.MIN_VALUE;
}
}

protected final void initWPRRMST(String s) {
if (!s.trim().isEmpty()) {
WPRRMST = Byte.parseByte(s);
} else {
WPRRMST = Byte.MIN_VALUE;
}
}

protected final void initWPRRMYO(String s) {
if (!s.trim().isEmpty()) {
WPRRMYO = Byte.parseByte(s);
} else {
WPRRMYO = Byte.MIN_VALUE;
}
}

protected final void initWPRROH(String s) {
if (!s.trim().isEmpty()) {
WPRROH = Byte.parseByte(s);
} else {
WPRROH = Byte.MIN_VALUE;
}
}

protected final void initWPRRRE(String s) {
if (!s.trim().isEmpty()) {
WPRRRE = Byte.parseByte(s);
} else {
WPRRRE = Byte.MIN_VALUE;
}
}

protected final void initWPRRRH(String s) {
if (!s.trim().isEmpty()) {
WPRRRH = Byte.parseByte(s);
} else {
WPRRRH = Byte.MIN_VALUE;
}
}

protected final void initWPRRST(String s) {
if (!s.trim().isEmpty()) {
WPRRST = Byte.parseByte(s);
} else {
WPRRST = Byte.MIN_VALUE;
}
}

protected final void initWPRRYO(String s) {
if (!s.trim().isEmpty()) {
WPRRYO = Byte.parseByte(s);
} else {
WPRRYO = Byte.MIN_VALUE;
}
}

protected final void initWPRSCM95(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPRSCM95 = false;
} else {
WPRSCM95 = true;
}
}
}

protected final void initWPSJOBM(String s) {
if (!s.trim().isEmpty()) {
WPSJOBM = Byte.parseByte(s);
} else {
WPSJOBM = Byte.MIN_VALUE;
}
}

protected final void initWPSJOBY(String s) {
if (!s.trim().isEmpty()) {
WPSJOBY = Short.parseShort(s);
} else {
WPSJOBY = Short.MIN_VALUE;
}
}

protected final void initWPSN(String s) {
if (!s.trim().isEmpty()) {
WPSN = Byte.parseByte(s);
} else {
WPSN = Byte.MIN_VALUE;
}
}

protected final void initWPSPAM(String s) {
if (!s.trim().isEmpty()) {
WPSPAM = Byte.parseByte(s);
} else {
WPSPAM = Byte.MIN_VALUE;
}
}

protected final void initWPSPAW(String s) {
if (!s.trim().isEmpty()) {
WPSPAW = Byte.parseByte(s);
} else {
WPSPAW = Byte.MIN_VALUE;
}
}

protected final void initWPSPD(String s) {
if (!s.trim().isEmpty()) {
WPSPD = Byte.parseByte(s);
} else {
WPSPD = Byte.MIN_VALUE;
}
}

protected final void initWPSPD1A(String s) {
if (!s.trim().isEmpty()) {
WPSPD1A = Byte.parseByte(s);
} else {
WPSPD1A = Byte.MIN_VALUE;
}
}

protected final void initWPSPD1B(String s) {
if (!s.trim().isEmpty()) {
WPSPD1B = Byte.parseByte(s);
} else {
WPSPD1B = Byte.MIN_VALUE;
}
}

protected final void initWPSPD2(String s) {
if (!s.trim().isEmpty()) {
WPSPD2 = Byte.parseByte(s);
} else {
WPSPD2 = Byte.MIN_VALUE;
}
}

protected final void initWPSPD3(String s) {
if (!s.trim().isEmpty()) {
WPSPD3 = Byte.parseByte(s);
} else {
WPSPD3 = Byte.MIN_VALUE;
}
}

protected final void initWPSPD3A(String s) {
if (!s.trim().isEmpty()) {
WPSPD3A = Byte.parseByte(s);
} else {
WPSPD3A = Byte.MIN_VALUE;
}
}

protected final void initWPSPD3M(String s) {
if (!s.trim().isEmpty()) {
WPSPD3M = Byte.parseByte(s);
} else {
WPSPD3M = Byte.MIN_VALUE;
}
}

protected final void initWPSPD3Y(String s) {
if (!s.trim().isEmpty()) {
WPSPD3Y = Short.parseShort(s);
} else {
WPSPD3Y = Short.MIN_VALUE;
}
}

protected final void initWPSPD4(String s) {
if (!s.trim().isEmpty()) {
WPSPD4 = Byte.parseByte(s);
} else {
WPSPD4 = Byte.MIN_VALUE;
}
}

protected final void initWPSPD5M(String s) {
if (!s.trim().isEmpty()) {
WPSPD5M = Byte.parseByte(s);
} else {
WPSPD5M = Byte.MIN_VALUE;
}
}

protected final void initWPSPD5Y(String s) {
if (!s.trim().isEmpty()) {
WPSPD5Y = Byte.parseByte(s);
} else {
WPSPD5Y = Byte.MIN_VALUE;
}
}

protected final void initWPSPD6(String s) {
if (!s.trim().isEmpty()) {
WPSPD6 = Byte.parseByte(s);
} else {
WPSPD6 = Byte.MIN_VALUE;
}
}

protected final void initWPSPOU(String s) {
if (!s.trim().isEmpty()) {
WPSPOU = Integer.parseInt(s);
} else {
WPSPOU = Integer.MIN_VALUE;
}
}

protected final void initWPSPOUP(String s) {
if (!s.trim().isEmpty()) {
WPSPOUP = Byte.parseByte(s);
} else {
WPSPOUP = Byte.MIN_VALUE;
}
}

protected final void initWPSPY(String s) {
if (!s.trim().isEmpty()) {
WPSPY = Byte.parseByte(s);
} else {
WPSPY = Byte.MIN_VALUE;
}
}

protected final void initWPSRUL(String s) {
if (!s.trim().isEmpty()) {
WPSRUL = Byte.parseByte(s);
} else {
WPSRUL = Byte.MIN_VALUE;
}
}

protected final void initWPSRUL2(String s) {
if (!s.trim().isEmpty()) {
WPSRUL2 = Byte.parseByte(s);
} else {
WPSRUL2 = Byte.MIN_VALUE;
}
}

protected final void initWPSRUL3(String s) {
if (!s.trim().isEmpty()) {
WPSRUL3 = Byte.parseByte(s);
} else {
WPSRUL3 = Byte.MIN_VALUE;
}
}

protected final void initWPSRUL4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPSRUL4 = false;
} else {
WPSRUL4 = true;
}
}
}

protected final void initWPSRUL5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPSRUL5 = false;
} else {
WPSRUL5 = true;
}
}
}

protected final void initWPSRUL6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPSRUL6 = false;
} else {
WPSRUL6 = true;
}
}
}

protected final void initWPSRUL7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPSRUL7 = false;
} else {
WPSRUL7 = true;
}
}
}

protected final void initWPTAKP(String s) {
if (!s.trim().isEmpty()) {
WPTAKP = Byte.parseByte(s);
} else {
WPTAKP = Byte.MIN_VALUE;
}
}

protected final void initWPTAKP2(String s) {
if (!s.trim().isEmpty()) {
WPTAKP2 = Byte.parseByte(s);
} else {
WPTAKP2 = Byte.MIN_VALUE;
}
}

protected final void initWPTAKP3(String s) {
if (!s.trim().isEmpty()) {
WPTAKP3 = Byte.parseByte(s);
} else {
WPTAKP3 = Byte.MIN_VALUE;
}
}

protected final void initWPTAKP4(String s) {
if (!s.trim().isEmpty()) {
WPTAKP4 = Byte.parseByte(s);
} else {
WPTAKP4 = Byte.MIN_VALUE;
}
}

protected final void initWPTAKP5(String s) {
if (!s.trim().isEmpty()) {
WPTAKP5 = Byte.parseByte(s);
} else {
WPTAKP5 = Byte.MIN_VALUE;
}
}

protected final void initWPTAKP6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPTAKP6 = false;
} else {
WPTAKP6 = true;
}
}
}

protected final void initWPTAKP7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPTAKP7 = false;
} else {
WPTAKP7 = true;
}
}
}

protected final void initWPTAX2(String s) {
if (!s.trim().isEmpty()) {
WPTAX2 = Byte.parseByte(s);
} else {
WPTAX2 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX3(String s) {
if (!s.trim().isEmpty()) {
WPTAX3 = Byte.parseByte(s);
} else {
WPTAX3 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX4(String s) {
if (!s.trim().isEmpty()) {
WPTAX4 = Byte.parseByte(s);
} else {
WPTAX4 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX5(String s) {
if (!s.trim().isEmpty()) {
WPTAX5 = Byte.parseByte(s);
} else {
WPTAX5 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX6(String s) {
if (!s.trim().isEmpty()) {
WPTAX6 = Byte.parseByte(s);
} else {
WPTAX6 = Byte.MIN_VALUE;
}
}

protected final void initWPTAX7(String s) {
if (!s.trim().isEmpty()) {
WPTAX7 = Byte.parseByte(s);
} else {
WPTAX7 = Byte.MIN_VALUE;
}
}

protected final void initWPTHPFE(String s) {
if (!s.trim().isEmpty()) {
WPTHPFE = Byte.parseByte(s);
} else {
WPTHPFE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPFL(String s) {
if (!s.trim().isEmpty()) {
WPTHPFL = Short.parseShort(s);
} else {
WPTHPFL = Short.MIN_VALUE;
}
}

protected final void initWPTHPFR(String s) {
if (!s.trim().isEmpty()) {
WPTHPFR = Byte.parseByte(s);
} else {
WPTHPFR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPFU(String s) {
if (!s.trim().isEmpty()) {
WPTHPFU = Short.parseShort(s);
} else {
WPTHPFU = Short.MIN_VALUE;
}
}

protected final void initWPTHPME(String s) {
if (!s.trim().isEmpty()) {
WPTHPME = Byte.parseByte(s);
} else {
WPTHPME = Byte.MIN_VALUE;
}
}

protected final void initWPTHPML(String s) {
if (!s.trim().isEmpty()) {
WPTHPML = Short.parseShort(s);
} else {
WPTHPML = Short.MIN_VALUE;
}
}

protected final void initWPTHPMR(String s) {
if (!s.trim().isEmpty()) {
WPTHPMR = Byte.parseByte(s);
} else {
WPTHPMR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPMU(String s) {
if (!s.trim().isEmpty()) {
WPTHPMU = Short.parseShort(s);
} else {
WPTHPMU = Short.MIN_VALUE;
}
}

protected final void initWPTHPOE(String s) {
if (!s.trim().isEmpty()) {
WPTHPOE = Byte.parseByte(s);
} else {
WPTHPOE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPOL(String s) {
if (!s.trim().isEmpty()) {
WPTHPOL = Short.parseShort(s);
} else {
WPTHPOL = Short.MIN_VALUE;
}
}

protected final void initWPTHPOR(String s) {
if (!s.trim().isEmpty()) {
WPTHPOR = Byte.parseByte(s);
} else {
WPTHPOR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPOU(String s) {
if (!s.trim().isEmpty()) {
WPTHPOU = Short.parseShort(s);
} else {
WPTHPOU = Short.MIN_VALUE;
}
}

protected final void initWPTHPWE(String s) {
if (!s.trim().isEmpty()) {
WPTHPWE = Byte.parseByte(s);
} else {
WPTHPWE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPWL(String s) {
if (!s.trim().isEmpty()) {
WPTHPWL = Short.parseShort(s);
} else {
WPTHPWL = Short.MIN_VALUE;
}
}

protected final void initWPTHPWR(String s) {
if (!s.trim().isEmpty()) {
WPTHPWR = Byte.parseByte(s);
} else {
WPTHPWR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPWU(String s) {
if (!s.trim().isEmpty()) {
WPTHPWU = Short.parseShort(s);
} else {
WPTHPWU = Short.MIN_VALUE;
}
}

protected final void initWPTHPYE(String s) {
if (!s.trim().isEmpty()) {
WPTHPYE = Byte.parseByte(s);
} else {
WPTHPYE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPYL(String s) {
if (!s.trim().isEmpty()) {
WPTHPYL = Integer.parseInt(s);
} else {
WPTHPYL = Integer.MIN_VALUE;
}
}

protected final void initWPTHPYR(String s) {
if (!s.trim().isEmpty()) {
WPTHPYR = Byte.parseByte(s);
} else {
WPTHPYR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPYU(String s) {
if (!s.trim().isEmpty()) {
WPTHPYU = Integer.parseInt(s);
} else {
WPTHPYU = Integer.MIN_VALUE;
}
}

protected final void initWPUPAFE(String s) {
if (!s.trim().isEmpty()) {
WPUPAFE = Byte.parseByte(s);
} else {
WPUPAFE = Byte.MIN_VALUE;
}
}

protected final void initWPUPAFL(String s) {
if (!s.trim().isEmpty()) {
WPUPAFL = Short.parseShort(s);
} else {
WPUPAFL = Short.MIN_VALUE;
}
}

protected final void initWPUPAFR(String s) {
if (!s.trim().isEmpty()) {
WPUPAFR = Byte.parseByte(s);
} else {
WPUPAFR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAFU(String s) {
if (!s.trim().isEmpty()) {
WPUPAFU = Short.parseShort(s);
} else {
WPUPAFU = Short.MIN_VALUE;
}
}

protected final void initWPUPAME(String s) {
if (!s.trim().isEmpty()) {
WPUPAME = Byte.parseByte(s);
} else {
WPUPAME = Byte.MIN_VALUE;
}
}

protected final void initWPUPAML(String s) {
if (!s.trim().isEmpty()) {
WPUPAML = Short.parseShort(s);
} else {
WPUPAML = Short.MIN_VALUE;
}
}

protected final void initWPUPAMR(String s) {
if (!s.trim().isEmpty()) {
WPUPAMR = Byte.parseByte(s);
} else {
WPUPAMR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAMU(String s) {
if (!s.trim().isEmpty()) {
WPUPAMU = Short.parseShort(s);
} else {
WPUPAMU = Short.MIN_VALUE;
}
}

protected final void initWPUPAOE(String s) {
if (!s.trim().isEmpty()) {
WPUPAOE = Integer.parseInt(s);
} else {
WPUPAOE = Integer.MIN_VALUE;
}
}

protected final void initWPUPAOL(String s) {
if (!s.trim().isEmpty()) {
WPUPAOL = Short.parseShort(s);
} else {
WPUPAOL = Short.MIN_VALUE;
}
}

protected final void initWPUPAOR(String s) {
if (!s.trim().isEmpty()) {
WPUPAOR = Byte.parseByte(s);
} else {
WPUPAOR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAOU(String s) {
if (!s.trim().isEmpty()) {
WPUPAOU = Short.parseShort(s);
} else {
WPUPAOU = Short.MIN_VALUE;
}
}

protected final void initWPUPAWE(String s) {
if (!s.trim().isEmpty()) {
WPUPAWE = Byte.parseByte(s);
} else {
WPUPAWE = Byte.MIN_VALUE;
}
}

protected final void initWPUPAWL(String s) {
if (!s.trim().isEmpty()) {
WPUPAWL = Short.parseShort(s);
} else {
WPUPAWL = Short.MIN_VALUE;
}
}

protected final void initWPUPAWR(String s) {
if (!s.trim().isEmpty()) {
WPUPAWR = Byte.parseByte(s);
} else {
WPUPAWR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAWU(String s) {
if (!s.trim().isEmpty()) {
WPUPAWU = Short.parseShort(s);
} else {
WPUPAWU = Short.MIN_VALUE;
}
}

protected final void initWPUPAYE(String s) {
if (!s.trim().isEmpty()) {
WPUPAYE = Byte.parseByte(s);
} else {
WPUPAYE = Byte.MIN_VALUE;
}
}

protected final void initWPUPAYL(String s) {
if (!s.trim().isEmpty()) {
WPUPAYL = Byte.parseByte(s);
} else {
WPUPAYL = Byte.MIN_VALUE;
}
}

protected final void initWPUPAYR(String s) {
if (!s.trim().isEmpty()) {
WPUPAYR = Byte.parseByte(s);
} else {
WPUPAYR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAYU(String s) {
if (!s.trim().isEmpty()) {
WPUPAYU = Short.parseShort(s);
} else {
WPUPAYU = Short.MIN_VALUE;
}
}

protected final void initWPVBUSE(String s) {
if (!s.trim().isEmpty()) {
WPVBUSE = Byte.parseByte(s);
} else {
WPVBUSE = Byte.MIN_VALUE;
}
}

protected final void initWPVBUSL(String s) {
if (!s.trim().isEmpty()) {
WPVBUSL = Integer.parseInt(s);
} else {
WPVBUSL = Integer.MIN_VALUE;
}
}

protected final void initWPVBUSR(String s) {
if (!s.trim().isEmpty()) {
WPVBUSR = Byte.parseByte(s);
} else {
WPVBUSR = Byte.MIN_VALUE;
}
}

protected final void initWPVBUSU(String s) {
if (!s.trim().isEmpty()) {
WPVBUSU = Integer.parseInt(s);
} else {
WPVBUSU = Integer.MIN_VALUE;
}
}

protected final void initWPWLYYE(String s) {
if (!s.trim().isEmpty()) {
WPWLYYE = Byte.parseByte(s);
} else {
WPWLYYE = Byte.MIN_VALUE;
}
}

protected final void initWPWLYYL(String s) {
if (!s.trim().isEmpty()) {
WPWLYYL = Integer.parseInt(s);
} else {
WPWLYYL = Integer.MIN_VALUE;
}
}

protected final void initWPWLYYR(String s) {
if (!s.trim().isEmpty()) {
WPWLYYR = Byte.parseByte(s);
} else {
WPWLYYR = Byte.MIN_VALUE;
}
}

protected final void initWPWLYYU(String s) {
if (!s.trim().isEmpty()) {
WPWLYYU = Integer.parseInt(s);
} else {
WPWLYYU = Integer.MIN_VALUE;
}
}

protected final void initWPWYJ95(String s) {
if (!s.trim().isEmpty()) {
WPWYJ95 = Byte.parseByte(s);
} else {
WPWYJ95 = Byte.MIN_VALUE;
}
}

protected final void initWPWYJBU(String s) {
if (!s.trim().isEmpty()) {
WPWYJBU = Byte.parseByte(s);
} else {
WPWYJBU = Byte.MIN_VALUE;
}
}

protected final void initWPWYJCA(String s) {
if (!s.trim().isEmpty()) {
WPWYJCA = Byte.parseByte(s);
} else {
WPWYJCA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJCO(String s) {
if (!s.trim().isEmpty()) {
WPWYJCO = Byte.parseByte(s);
} else {
WPWYJCO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJFB(String s) {
if (!s.trim().isEmpty()) {
WPWYJFB = Byte.parseByte(s);
} else {
WPWYJFB = Byte.MIN_VALUE;
}
}

protected final void initWPWYJFI(String s) {
if (!s.trim().isEmpty()) {
WPWYJFI = Byte.parseByte(s);
} else {
WPWYJFI = Byte.MIN_VALUE;
}
}

protected final void initWPWYJHO(String s) {
if (!s.trim().isEmpty()) {
WPWYJHO = Byte.parseByte(s);
} else {
WPWYJHO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJM85(String s) {
if (!s.trim().isEmpty()) {
WPWYJM85 = Byte.parseByte(s);
} else {
WPWYJM85 = Byte.MIN_VALUE;
}
}

protected final void initWPWYJM86(String s) {
if (!s.trim().isEmpty()) {
WPWYJM86 = Byte.parseByte(s);
} else {
WPWYJM86 = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMBC(String s) {
if (!s.trim().isEmpty()) {
WPWYJMBC = Byte.parseByte(s);
} else {
WPWYJMBC = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMBU(String s) {
if (!s.trim().isEmpty()) {
WPWYJMBU = Byte.parseByte(s);
} else {
WPWYJMBU = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMCA(String s) {
if (!s.trim().isEmpty()) {
WPWYJMCA = Byte.parseByte(s);
} else {
WPWYJMCA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMCH(String s) {
if (!s.trim().isEmpty()) {
WPWYJMCH = Byte.parseByte(s);
} else {
WPWYJMCH = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMCO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMCO = Byte.parseByte(s);
} else {
WPWYJMCO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMFB(String s) {
if (!s.trim().isEmpty()) {
WPWYJMFB = Byte.parseByte(s);
} else {
WPWYJMFB = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMFI(String s) {
if (!s.trim().isEmpty()) {
WPWYJMFI = Byte.parseByte(s);
} else {
WPWYJMFI = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMHF(String s) {
if (!s.trim().isEmpty()) {
WPWYJMHF = Byte.parseByte(s);
} else {
WPWYJMHF = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMHH(String s) {
if (!s.trim().isEmpty()) {
WPWYJMHH = Byte.parseByte(s);
} else {
WPWYJMHH = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMHO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMHO = Byte.parseByte(s);
} else {
WPWYJMHO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMLO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMLO = Byte.parseByte(s);
} else {
WPWYJMLO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMMO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMMO = Byte.parseByte(s);
} else {
WPWYJMMO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMON(String s) {
if (!s.trim().isEmpty()) {
WPWYJMON = Byte.parseByte(s);
} else {
WPWYJMON = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMPA(String s) {
if (!s.trim().isEmpty()) {
WPWYJMPA = Byte.parseByte(s);
} else {
WPWYJMPA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMPH(String s) {
if (!s.trim().isEmpty()) {
WPWYJMPH = Byte.parseByte(s);
} else {
WPWYJMPH = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMTI(String s) {
if (!s.trim().isEmpty()) {
WPWYJMTI = Byte.parseByte(s);
} else {
WPWYJMTI = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMTO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMTO = Byte.parseByte(s);
} else {
WPWYJMTO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJON(String s) {
if (!s.trim().isEmpty()) {
WPWYJON = Byte.parseByte(s);
} else {
WPWYJON = Byte.MIN_VALUE;
}
}

protected final void initWPWYJPA(String s) {
if (!s.trim().isEmpty()) {
WPWYJPA = Byte.parseByte(s);
} else {
WPWYJPA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJREA(String s) {
if (!s.trim().isEmpty()) {
WPWYJREA = Byte.parseByte(s);
} else {
WPWYJREA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJTI(String s) {
if (!s.trim().isEmpty()) {
WPWYJTI = Byte.parseByte(s);
} else {
WPWYJTI = Byte.MIN_VALUE;
}
}

protected final void initWPWYN95(String s) {
if (!s.trim().isEmpty()) {
WPWYN95 = Byte.parseByte(s);
} else {
WPWYN95 = Byte.MIN_VALUE;
}
}

protected final void initWPWYNCA(String s) {
if (!s.trim().isEmpty()) {
WPWYNCA = Byte.parseByte(s);
} else {
WPWYNCA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNCH(String s) {
if (!s.trim().isEmpty()) {
WPWYNCH = Byte.parseByte(s);
} else {
WPWYNCH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNEA(String s) {
if (!s.trim().isEmpty()) {
WPWYNEA = Byte.parseByte(s);
} else {
WPWYNEA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNEM(String s) {
if (!s.trim().isEmpty()) {
WPWYNEM = Byte.parseByte(s);
} else {
WPWYNEM = Byte.MIN_VALUE;
}
}

protected final void initWPWYNFA(String s) {
if (!s.trim().isEmpty()) {
WPWYNFA = Byte.parseByte(s);
} else {
WPWYNFA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMO(String s) {
if (!s.trim().isEmpty()) {
WPWYNMO = Byte.parseByte(s);
} else {
WPWYNMO = Byte.MIN_VALUE;
}
}

protected final void initWPWYNOH(String s) {
if (!s.trim().isEmpty()) {
WPWYNOH = Byte.parseByte(s);
} else {
WPWYNOH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNOU(String s) {
if (!s.trim().isEmpty()) {
WPWYNOU = Byte.parseByte(s);
} else {
WPWYNOU = Byte.MIN_VALUE;
}
}

protected final void initWPWYNRE(String s) {
if (!s.trim().isEmpty()) {
WPWYNRE = Byte.parseByte(s);
} else {
WPWYNRE = Byte.MIN_VALUE;
}
}

protected final void initWPWYNRH(String s) {
if (!s.trim().isEmpty()) {
WPWYNRH = Byte.parseByte(s);
} else {
WPWYNRH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNTI(String s) {
if (!s.trim().isEmpty()) {
WPWYNTI = Byte.parseByte(s);
} else {
WPWYNTI = Byte.MIN_VALUE;
}
}

protected final void initWPWYNVR(String s) {
if (!s.trim().isEmpty()) {
WPWYNVR = Byte.parseByte(s);
} else {
WPWYNVR = Byte.MIN_VALUE;
}
}

protected final void initWPWYW95(String s) {
if (!s.trim().isEmpty()) {
WPWYW95 = Byte.parseByte(s);
} else {
WPWYW95 = Byte.MIN_VALUE;
}
}

protected final void initWPWYWEN(String s) {
if (!s.trim().isEmpty()) {
WPWYWEN = Byte.parseByte(s);
} else {
WPWYWEN = Byte.MIN_VALUE;
}
}

protected final void initWPWYWM85(String s) {
if (!s.trim().isEmpty()) {
WPWYWM85 = Byte.parseByte(s);
} else {
WPWYWM85 = Byte.MIN_VALUE;
}
}

protected final void initWPWYWM86(String s) {
if (!s.trim().isEmpty()) {
WPWYWM86 = Byte.parseByte(s);
} else {
WPWYWM86 = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMCH(String s) {
if (!s.trim().isEmpty()) {
WPWYWMCH = Byte.parseByte(s);
} else {
WPWYWMCH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMEN(String s) {
if (!s.trim().isEmpty()) {
WPWYWMEN = Byte.parseByte(s);
} else {
WPWYWMEN = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMFI(String s) {
if (!s.trim().isEmpty()) {
WPWYWMFI = Byte.parseByte(s);
} else {
WPWYWMFI = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMHE(String s) {
if (!s.trim().isEmpty()) {
WPWYWMHE = Byte.parseByte(s);
} else {
WPWYWMHE = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMHH(String s) {
if (!s.trim().isEmpty()) {
WPWYWMHH = Byte.parseByte(s);
} else {
WPWYWMHH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMMO(String s) {
if (!s.trim().isEmpty()) {
WPWYWMMO = Byte.parseByte(s);
} else {
WPWYWMMO = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMO(String s) {
if (!s.trim().isEmpty()) {
WPWYWMO = Byte.parseByte(s);
} else {
WPWYWMO = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMOH(String s) {
if (!s.trim().isEmpty()) {
WPWYWMOH = Byte.parseByte(s);
} else {
WPWYWMOH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMRH(String s) {
if (!s.trim().isEmpty()) {
WPWYWMRH = Byte.parseByte(s);
} else {
WPWYWMRH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMSU(String s) {
if (!s.trim().isEmpty()) {
WPWYWMSU = Byte.parseByte(s);
} else {
WPWYWMSU = Byte.MIN_VALUE;
}
}

protected final void initWPWYWOH(String s) {
if (!s.trim().isEmpty()) {
WPWYWOH = Byte.parseByte(s);
} else {
WPWYWOH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWRH(String s) {
if (!s.trim().isEmpty()) {
WPWYWRH = Byte.parseByte(s);
} else {
WPWYWRH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWSU(String s) {
if (!s.trim().isEmpty()) {
WPWYWSU = Byte.parseByte(s);
} else {
WPWYWSU = Byte.MIN_VALUE;
}
}

protected final void initWPYAER2(String s) {
if (!s.trim().isEmpty()) {
WPYAER2 = Byte.parseByte(s);
} else {
WPYAER2 = Byte.MIN_VALUE;
}
}

protected final void initWPYAER3(String s) {
if (!s.trim().isEmpty()) {
WPYAER3 = Byte.parseByte(s);
} else {
WPYAER3 = Byte.MIN_VALUE;
}
}

protected final void initWPYAER4(String s) {
if (!s.trim().isEmpty()) {
WPYAER4 = Byte.parseByte(s);
} else {
WPYAER4 = Byte.MIN_VALUE;
}
}

protected final void initWPYAER5(String s) {
if (!s.trim().isEmpty()) {
WPYAER5 = Byte.parseByte(s);
} else {
WPYAER5 = Byte.MIN_VALUE;
}
}

protected final void initWPYAER6(String s) {
if (!s.trim().isEmpty()) {
WPYAER6 = Byte.parseByte(s);
} else {
WPYAER6 = Byte.MIN_VALUE;
}
}

protected final void initWPYAER7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPYAER7 = false;
} else {
WPYAER7 = true;
}
}
}

protected final void initWPYBS2(String s) {
if (!s.trim().isEmpty()) {
WPYBS2 = Byte.parseByte(s);
} else {
WPYBS2 = Byte.MIN_VALUE;
}
}

protected final void initWPYBS3(String s) {
if (!s.trim().isEmpty()) {
WPYBS3 = Byte.parseByte(s);
} else {
WPYBS3 = Byte.MIN_VALUE;
}
}

protected final void initWPYBS4(String s) {
if (!s.trim().isEmpty()) {
WPYBS4 = Byte.parseByte(s);
} else {
WPYBS4 = Byte.MIN_VALUE;
}
}

protected final void initWPYBS5(String s) {
if (!s.trim().isEmpty()) {
WPYBS5 = Byte.parseByte(s);
} else {
WPYBS5 = Byte.MIN_VALUE;
}
}

protected final void initWPYBS6(String s) {
if (!s.trim().isEmpty()) {
WPYBS6 = Byte.parseByte(s);
} else {
WPYBS6 = Byte.MIN_VALUE;
}
}

protected final void initWPYBS7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -8) {
WPYBS7 = false;
} else {
WPYBS7 = true;
}
}
}

protected final void initWPYCA2(String s) {
if (!s.trim().isEmpty()) {
WPYCA2 = Integer.parseInt(s);
} else {
WPYCA2 = Integer.MIN_VALUE;
}
}

protected final void initWPYCA3(String s) {
if (!s.trim().isEmpty()) {
WPYCA3 = Short.parseShort(s);
} else {
WPYCA3 = Short.MIN_VALUE;
}
}

protected final void initWPYCA4(String s) {
if (!s.trim().isEmpty()) {
WPYCA4 = Short.parseShort(s);
} else {
WPYCA4 = Short.MIN_VALUE;
}
}

protected final void initWPYCA5(String s) {
if (!s.trim().isEmpty()) {
WPYCA5 = Short.parseShort(s);
} else {
WPYCA5 = Short.MIN_VALUE;
}
}

protected final void initWPYCA6(String s) {
if (!s.trim().isEmpty()) {
WPYCA6 = Short.parseShort(s);
} else {
WPYCA6 = Short.MIN_VALUE;
}
}

protected final void initWPYCA7(String s) {
if (!s.trim().isEmpty()) {
WPYCA7 = Short.parseShort(s);
} else {
WPYCA7 = Short.MIN_VALUE;
}
}

protected final void initWPYCAT2(String s) {
if (!s.trim().isEmpty()) {
WPYCAT2 = Byte.parseByte(s);
} else {
WPYCAT2 = Byte.MIN_VALUE;
}
}

protected final void initWPYCAT3(String s) {
if (!s.trim().isEmpty()) {
WPYCAT3 = Byte.parseByte(s);
} else {
WPYCAT3 = Byte.MIN_VALUE;
}
}

protected final void initWPYCAT4(String s) {
if (!s.trim().isEmpty()) {
WPYCAT4 = Byte.parseByte(s);
} else {
WPYCAT4 = Byte.MIN_VALUE;
}
}

protected final void initWPYCAT5(String s) {
if (!s.trim().isEmpty()) {
WPYCAT5 = Byte.parseByte(s);
} else {
WPYCAT5 = Byte.MIN_VALUE;
}
}

protected final void initWPYCAT6(String s) {
if (!s.trim().isEmpty()) {
WPYCAT6 = Byte.parseByte(s);
} else {
WPYCAT6 = Byte.MIN_VALUE;
}
}

protected final void initWPYCAT7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPYCAT7 = false;
} else {
WPYCAT7 = true;
}
}
}

protected final void initWPYFRA(String s) {
if (!s.trim().isEmpty()) {
WPYFRA = Byte.parseByte(s);
} else {
WPYFRA = Byte.MIN_VALUE;
}
}

protected final void initWPYFRA2(String s) {
if (!s.trim().isEmpty()) {
WPYFRA2 = Byte.parseByte(s);
} else {
WPYFRA2 = Byte.MIN_VALUE;
}
}

protected final void initWPYFRA3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPYFRA3 = false;
} else {
WPYFRA3 = true;
}
}
}

protected final void initWPYFRA4(String s) {
if (!s.trim().isEmpty()) {
WPYFRA4 = Byte.parseByte(s);
} else {
WPYFRA4 = Byte.MIN_VALUE;
}
}

protected final void initWPYFRA5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPYFRA5 = false;
} else {
WPYFRA5 = true;
}
}
}

protected final void initWPYFRA6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPYFRA6 = false;
} else {
WPYFRA6 = true;
}
}
}

protected final void initWPYFRA7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPYFRA7 = false;
} else {
WPYFRA7 = true;
}
}
}

protected final void initWPYJM11(String s) {
if (!s.trim().isEmpty()) {
WPYJM11 = Byte.parseByte(s);
} else {
WPYJM11 = Byte.MIN_VALUE;
}
}

protected final void initWPYST95(String s) {
if (!s.trim().isEmpty()) {
WPYST95 = Byte.parseByte(s);
} else {
WPYST95 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTAF(String s) {
if (!s.trim().isEmpty()) {
WPYSTAF = Byte.parseByte(s);
} else {
WPYSTAF = Byte.MIN_VALUE;
}
}

protected final void initWPYSTCH(String s) {
if (!s.trim().isEmpty()) {
WPYSTCH = Byte.parseByte(s);
} else {
WPYSTCH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTEN(String s) {
if (!s.trim().isEmpty()) {
WPYSTEN = Byte.parseByte(s);
} else {
WPYSTEN = Byte.MIN_VALUE;
}
}

protected final void initWPYSTFA(String s) {
if (!s.trim().isEmpty()) {
WPYSTFA = Byte.parseByte(s);
} else {
WPYSTFA = Byte.MIN_VALUE;
}
}

protected final void initWPYSTFI(String s) {
if (!s.trim().isEmpty()) {
WPYSTFI = Byte.parseByte(s);
} else {
WPYSTFI = Byte.MIN_VALUE;
}
}

protected final void initWPYSTM85(String s) {
if (!s.trim().isEmpty()) {
WPYSTM85 = Byte.parseByte(s);
} else {
WPYSTM85 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTM86(String s) {
if (!s.trim().isEmpty()) {
WPYSTM86 = Byte.parseByte(s);
} else {
WPYSTM86 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMAF(String s) {
if (!s.trim().isEmpty()) {
WPYSTMAF = Byte.parseByte(s);
} else {
WPYSTMAF = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMAG(String s) {
if (!s.trim().isEmpty()) {
WPYSTMAG = Byte.parseByte(s);
} else {
WPYSTMAG = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMCH(String s) {
if (!s.trim().isEmpty()) {
WPYSTMCH = Byte.parseByte(s);
} else {
WPYSTMCH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMCO(String s) {
if (!s.trim().isEmpty()) {
WPYSTMCO = Byte.parseByte(s);
} else {
WPYSTMCO = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMEN(String s) {
if (!s.trim().isEmpty()) {
WPYSTMEN = Byte.parseByte(s);
} else {
WPYSTMEN = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMFA(String s) {
if (!s.trim().isEmpty()) {
WPYSTMFA = Byte.parseByte(s);
} else {
WPYSTMFA = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMFI(String s) {
if (!s.trim().isEmpty()) {
WPYSTMFI = Byte.parseByte(s);
} else {
WPYSTMFI = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMMO(String s) {
if (!s.trim().isEmpty()) {
WPYSTMMO = Byte.parseByte(s);
} else {
WPYSTMMO = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMO(String s) {
if (!s.trim().isEmpty()) {
WPYSTMO = Byte.parseByte(s);
} else {
WPYSTMO = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMOH(String s) {
if (!s.trim().isEmpty()) {
WPYSTMOH = Byte.parseByte(s);
} else {
WPYSTMOH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMOU(String s) {
if (!s.trim().isEmpty()) {
WPYSTMOU = Byte.parseByte(s);
} else {
WPYSTMOU = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMPA(String s) {
if (!s.trim().isEmpty()) {
WPYSTMPA = Byte.parseByte(s);
} else {
WPYSTMPA = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMRE(String s) {
if (!s.trim().isEmpty()) {
WPYSTMRE = Byte.parseByte(s);
} else {
WPYSTMRE = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMRH(String s) {
if (!s.trim().isEmpty()) {
WPYSTMRH = Byte.parseByte(s);
} else {
WPYSTMRH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMST(String s) {
if (!s.trim().isEmpty()) {
WPYSTMST = Byte.parseByte(s);
} else {
WPYSTMST = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMTI(String s) {
if (!s.trim().isEmpty()) {
WPYSTMTI = Byte.parseByte(s);
} else {
WPYSTMTI = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMVR(String s) {
if (!s.trim().isEmpty()) {
WPYSTMVR = Byte.parseByte(s);
} else {
WPYSTMVR = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMYO(String s) {
if (!s.trim().isEmpty()) {
WPYSTMYO = Byte.parseByte(s);
} else {
WPYSTMYO = Byte.MIN_VALUE;
}
}

protected final void initWPYSTOH(String s) {
if (!s.trim().isEmpty()) {
WPYSTOH = Byte.parseByte(s);
} else {
WPYSTOH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTOU(String s) {
if (!s.trim().isEmpty()) {
WPYSTOU = Byte.parseByte(s);
} else {
WPYSTOU = Byte.MIN_VALUE;
}
}

protected final void initWPYSTPA(String s) {
if (!s.trim().isEmpty()) {
WPYSTPA = Byte.parseByte(s);
} else {
WPYSTPA = Byte.MIN_VALUE;
}
}

protected final void initWPYSTPM(String s) {
if (!s.trim().isEmpty()) {
WPYSTPM = Byte.parseByte(s);
} else {
WPYSTPM = Byte.MIN_VALUE;
}
}

protected final void initWPYSTRE(String s) {
if (!s.trim().isEmpty()) {
WPYSTRE = Byte.parseByte(s);
} else {
WPYSTRE = Byte.MIN_VALUE;
}
}

protected final void initWPYSTRH(String s) {
if (!s.trim().isEmpty()) {
WPYSTRH = Byte.parseByte(s);
} else {
WPYSTRH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTTI(String s) {
if (!s.trim().isEmpty()) {
WPYSTTI = Byte.parseByte(s);
} else {
WPYSTTI = Byte.MIN_VALUE;
}
}

protected final void initWPYSTVR(String s) {
if (!s.trim().isEmpty()) {
WPYSTVR = Byte.parseByte(s);
} else {
WPYSTVR = Byte.MIN_VALUE;
}
}

protected final void initWPYSTYO(String s) {
if (!s.trim().isEmpty()) {
WPYSTYO = Byte.parseByte(s);
} else {
WPYSTYO = Byte.MIN_VALUE;
}
}

protected final void initWSTOKB(String s) {
if (!s.trim().isEmpty()) {
WSTOKB = Byte.parseByte(s);
} else {
WSTOKB = Byte.MIN_VALUE;
}
}

protected final void initWSTVAL(String s) {
if (!s.trim().isEmpty()) {
WSTVAL = Double.parseDouble(s);
} else {
WSTVAL = Double.NaN;
}
}

protected final void initWTC_P_F(String s) {
if (!s.trim().isEmpty()) {
WTC_P_F = Byte.parseByte(s);
} else {
WTC_P_F = Byte.MIN_VALUE;
}
}

protected final void initWTC_P_I(String s) {
if (!s.trim().isEmpty()) {
WTC_P_I = Double.parseDouble(s);
} else {
WTC_P_I = Double.NaN;
}
}

protected final void initWTC_P_O(String s) {
if (!s.trim().isEmpty()) {
WTC_P_O = Short.parseShort(s);
} else {
WTC_P_O = Short.MIN_VALUE;
}
}

protected final void initWTC_P_T(String s) {
if (!s.trim().isEmpty()) {
WTC_P_T = Short.parseShort(s);
} else {
WTC_P_T = Short.MIN_VALUE;
}
}

protected final void initWTC_R_F(String s) {
if (!s.trim().isEmpty()) {
WTC_R_F = Byte.parseByte(s);
} else {
WTC_R_F = Byte.MIN_VALUE;
}
}

protected final void initWTC_R_I(String s) {
if (!s.trim().isEmpty()) {
WTC_R_I = Double.parseDouble(s);
} else {
WTC_R_I = Double.NaN;
}
}

protected final void initWTC_R_O(String s) {
if (!s.trim().isEmpty()) {
WTC_R_O = Short.parseShort(s);
} else {
WTC_R_O = Short.MIN_VALUE;
}
}

protected final void initWTC_R_T(String s) {
if (!s.trim().isEmpty()) {
WTC_R_T = Short.parseShort(s);
} else {
WTC_R_T = Short.MIN_VALUE;
}
}

protected final void initWTOK(String s) {
if (!s.trim().isEmpty()) {
WTOK = Byte.parseByte(s);
} else {
WTOK = Byte.MIN_VALUE;
}
}

protected final void initWTVAL(String s) {
if (!s.trim().isEmpty()) {
WTVAL = Double.parseDouble(s);
} else {
WTVAL = Double.NaN;
}
}

protected final void initYNOLF(String s) {
if (!s.trim().isEmpty()) {
YNOLF = Byte.parseByte(s);
} else {
YNOLF = Byte.MIN_VALUE;
}
}

protected final void initYNOWH(String s) {
if (!s.trim().isEmpty()) {
YNOWH = Byte.parseByte(s);
} else {
YNOWH = Byte.MIN_VALUE;
}
}

public double getADDPEN_08() {
return ADDPEN_08;
}

public double getADDPEN_SPA() {
return ADDPEN_SPA;
}

public double getAIRTEMP() {
return AIRTEMP;
}

public byte getALLADCH() {
return ALLADCH;
}

public byte getALLFSCH() {
return ALLFSCH;
}

public byte getALLNATCH() {
return ALLNATCH;
}

public byte getALLSPCH() {
return ALLSPCH;
}

public byte getALLTOTCH() {
return ALLTOTCH;
}

public byte getANYREMOR() {
return ANYREMOR;
}

public byte getASKINST() {
return ASKINST;
}

public boolean getASKPX() {
return ASKPX;
}

public byte getBLOODR() {
return BLOODR;
}

public double getBMI() {
return BMI;
}

public byte getBMIOBE() {
return BMIOBE;
}

public byte getBMIOK() {
return BMIOK;
}

public double getBMIVAL() {
return BMIVAL;
}

public byte getBPCONST() {
return BPCONST;
}

public byte getBPRESPC() {
return BPRESPC;
}

public byte getBRETHS() {
return BRETHS;
}

public byte getBSOUTC() {
return BSOUTC;
}

public double getBSP_08() {
return BSP_08;
}

public double getBSP_SPA() {
return BSP_SPA;
}

public byte getBSWILL() {
return BSWILL;
}

public byte getCARERS_P_F() {
return CARERS_P_F;
}

public double getCARERS_P_I() {
return CARERS_P_I;
}

public short getCARERS_P_O() {
return CARERS_P_O;
}

public short getCARERS_P_T() {
return CARERS_P_T;
}

public byte getCARERS_R_F() {
return CARERS_R_F;
}

public double getCARERS_R_I() {
return CARERS_R_I;
}

public short getCARERS_R_O() {
return CARERS_R_O;
}

public short getCARERS_R_T() {
return CARERS_R_T;
}

public byte getCASP19() {
return CASP19;
}

public byte getCASPAUT() {
return CASPAUT;
}

public byte getCASPCTL() {
return CASPCTL;
}

public byte getCASPPLE() {
return CASPPLE;
}

public byte getCASPSR() {
return CASPSR;
}

public byte getCFANI() {
return CFANI;
}

public byte getCFANIG() {
return CFANIG;
}

public double getCFIB() {
return CFIB;
}

public byte getCFLETEN() {
return CFLETEN;
}

public byte getCFMEM() {
return CFMEM;
}

public byte getCFMEMS() {
return CFMEMS;
}

public byte getCFMERSP() {
return CFMERSP;
}

public byte getCFMETM() {
return CFMETM;
}

public byte getCFMETMT() {
return CFMETMT;
}

public byte getCFMSCR() {
return CFMSCR;
}

public byte getCFPASCR() {
return CFPASCR;
}

public byte getCFPRMEM() {
return CFPRMEM;
}

public byte getCFPROM() {
return CFPROM;
}

public double getCFRECAL() {
return CFRECAL;
}

public byte getCFSUMA() {
return CFSUMA;
}

public byte getCFSUMB() {
return CFSUMB;
}

public byte getCFSUMC() {
return CFSUMC;
}

public byte getCFSUMD() {
return CFSUMD;
}

public byte getCFSUME() {
return CFSUME;
}

public byte getCFSUMF() {
return CFSUMF;
}

public byte getCFWHM85() {
return CFWHM85;
}

public byte getCFWHM86() {
return CFWHM86;
}

public byte getCFWHMALC() {
return CFWHMALC;
}

public byte getCFWHMCON() {
return CFWHMCON;
}

public byte getCFWHMDIS() {
return CFWHMDIS;
}

public byte getCFWHMENG() {
return CFWHMENG;
}

public byte getCFWHMEYE() {
return CFWHMEYE;
}

public byte getCFWHMHEA() {
return CFWHMHEA;
}

public byte getCFWHMILL() {
return CFWHMILL;
}

public byte getCFWHMLAP() {
return CFWHMLAP;
}

public byte getCFWHMMEM() {
return CFWHMMEM;
}

public byte getCFWHMMEN() {
return CFWHMMEN;
}

public byte getCFWHMNER() {
return CFWHMNER;
}

public byte getCFWHMNOI() {
return CFWHMNOI;
}

public byte getCFWHMREF() {
return CFWHMREF;
}

public byte getCFWHMTIR() {
return CFWHMTIR;
}

public byte getCFWHMUPS() {
return CFWHMUPS;
}

public byte getCFWHOAD() {
return CFWHOAD;
}

public byte getCFWHOCHI() {
return CFWHOCHI;
}

public byte getCFWHONON() {
return CFWHONON;
}

public byte getCFWHOOTH() {
return CFWHOOTH;
}

public byte getCFWHOPAR() {
return CFWHOPAR;
}

public byte getCFWHT95() {
return CFWHT95;
}

public byte getCFWHTALC() {
return CFWHTALC;
}

public byte getCFWHTCON() {
return CFWHTCON;
}

public byte getCFWHTDIS() {
return CFWHTDIS;
}

public byte getCFWHTENG() {
return CFWHTENG;
}

public byte getCFWHTEYE() {
return CFWHTEYE;
}

public byte getCFWHTHEA() {
return CFWHTHEA;
}

public byte getCFWHTILL() {
return CFWHTILL;
}

public byte getCFWHTLAP() {
return CFWHTLAP;
}

public byte getCFWHTMEM() {
return CFWHTMEM;
}

public byte getCFWHTMEN() {
return CFWHTMEN;
}

public byte getCFWHTNER() {
return CFWHTNER;
}

public byte getCFWHTNOI() {
return CFWHTNOI;
}

public byte getCFWHTREF() {
return CFWHTREF;
}

public byte getCFWHTTIR() {
return CFWHTTIR;
}

public byte getCFWHTUPS() {
return CFWHTUPS;
}

public byte getCHESTINF() {
return CHESTINF;
}

public byte getCHIADP() {
return CHIADP;
}

public byte getCHIFST() {
return CHIFST;
}

public byte getCHINAT() {
return CHINAT;
}

public byte getCHINHH() {
return CHINHH;
}

public byte getCHISTP() {
return CHISTP;
}

public byte getCHITOT() {
return CHITOT;
}

public byte getCHOADP() {
return CHOADP;
}

public byte getCHOFST() {
return CHOFST;
}

public double getCHOL() {
return CHOL;
}

public byte getCHONAT() {
return CHONAT;
}

public byte getCHOSTP() {
return CHOSTP;
}

public byte getCHOTOT() {
return CHOTOT;
}

public byte getCLOTB() {
return CLOTB;
}

public boolean getCONCUR() {
return CONCUR;
}

public byte getCONFAGE() {
return CONFAGE;
}

public byte getCONSUBDR() {
return CONSUBDR;
}

public byte getCONSUBEA() {
return CONSUBEA;
}

public byte getCONSUBEX() {
return CONSUBEX;
}

public byte getCONSUBNO() {
return CONSUBNO;
}

public byte getCONSUBSM() {
return CONSUBSM;
}

public byte getCTC_P_F() {
return CTC_P_F;
}

public double getCTC_P_I() {
return CTC_P_I;
}

public short getCTC_P_O() {
return CTC_P_O;
}

public short getCTC_P_T() {
return CTC_P_T;
}

public byte getCTC_R_F() {
return CTC_R_F;
}

public double getCTC_R_I() {
return CTC_R_I;
}

public short getCTC_R_O() {
return CTC_R_O;
}

public short getCTC_R_T() {
return CTC_R_T;
}

public byte getCUFFSIZE() {
return CUFFSIZE;
}

public double getCURRENTDB_08() {
return CURRENTDB_08;
}

public double getCURRENTDB_SPA() {
return CURRENTDB_SPA;
}

public double getCURRENTDC_08() {
return CURRENTDC_08;
}

public double getCURRENTDC_SPA() {
return CURRENTDC_SPA;
}

public byte getCVD7DIBT() {
return CVD7DIBT;
}

public byte getCVD7DIEBP() {
return CVD7DIEBP;
}

public byte getDCURPEN() {
return DCURPEN;
}

public byte getDDBDC() {
return DDBDC;
}

public byte getDEMPPEN() {
return DEMPPEN;
}

public byte getDHC14() {
return DHC14;
}

public byte getDHC15() {
return DHC15;
}

public byte getDHC16() {
return DHC16;
}

public byte getDHCAG14() {
return DHCAG14;
}

public byte getDHCAG15() {
return DHCAG15;
}

public byte getDHCAG16() {
return DHCAG16;
}

public byte getDHCR08() {
return DHCR08;
}

public byte getDHCR09() {
return DHCR09;
}

public byte getDHCR10() {
return DHCR10;
}

public boolean getDHCR104() {
return DHCR104;
}

public boolean getDHCR105() {
return DHCR105;
}

public boolean getDHCR106() {
return DHCR106;
}

public boolean getDHCR107() {
return DHCR107;
}

public boolean getDHCR108() {
return DHCR108;
}

public boolean getDHCR109() {
return DHCR109;
}

public byte getDHCR11() {
return DHCR11;
}

public boolean getDHCR110() {
return DHCR110;
}

public boolean getDHCR111() {
return DHCR111;
}

public boolean getDHCR112() {
return DHCR112;
}

public byte getDHCR118() {
return DHCR118;
}

public boolean getDHCR119() {
return DHCR119;
}

public boolean getDHCR12() {
return DHCR12;
}

public boolean getDHCR120() {
return DHCR120;
}

public boolean getDHCR121() {
return DHCR121;
}

public boolean getDHCR122() {
return DHCR122;
}

public boolean getDHCR123() {
return DHCR123;
}

public boolean getDHCR124() {
return DHCR124;
}

public boolean getDHCR125() {
return DHCR125;
}

public boolean getDHCR126() {
return DHCR126;
}

public boolean getDHCR127() {
return DHCR127;
}

public boolean getDHCR128() {
return DHCR128;
}

public boolean getDHCR13() {
return DHCR13;
}

public byte getDHCR134() {
return DHCR134;
}

public boolean getDHCR135() {
return DHCR135;
}

public boolean getDHCR136() {
return DHCR136;
}

public boolean getDHCR137() {
return DHCR137;
}

public boolean getDHCR138() {
return DHCR138;
}

public boolean getDHCR139() {
return DHCR139;
}

public boolean getDHCR14() {
return DHCR14;
}

public boolean getDHCR140() {
return DHCR140;
}

public boolean getDHCR141() {
return DHCR141;
}

public boolean getDHCR142() {
return DHCR142;
}

public boolean getDHCR143() {
return DHCR143;
}

public boolean getDHCR144() {
return DHCR144;
}

public byte getDHCR147() {
return DHCR147;
}

public boolean getDHCR148() {
return DHCR148;
}

public boolean getDHCR149() {
return DHCR149;
}

public boolean getDHCR15() {
return DHCR15;
}

public byte getDHCR150() {
return DHCR150;
}

public boolean getDHCR151() {
return DHCR151;
}

public boolean getDHCR152() {
return DHCR152;
}

public boolean getDHCR153() {
return DHCR153;
}

public boolean getDHCR154() {
return DHCR154;
}

public boolean getDHCR155() {
return DHCR155;
}

public boolean getDHCR156() {
return DHCR156;
}

public boolean getDHCR157() {
return DHCR157;
}

public boolean getDHCR158() {
return DHCR158;
}

public boolean getDHCR159() {
return DHCR159;
}

public boolean getDHCR16() {
return DHCR16;
}

public boolean getDHCR160() {
return DHCR160;
}

public boolean getDHCR163() {
return DHCR163;
}

public boolean getDHCR164() {
return DHCR164;
}

public boolean getDHCR165() {
return DHCR165;
}

public byte getDHCR166() {
return DHCR166;
}

public boolean getDHCR167() {
return DHCR167;
}

public boolean getDHCR168() {
return DHCR168;
}

public boolean getDHCR169() {
return DHCR169;
}

public boolean getDHCR170() {
return DHCR170;
}

public boolean getDHCR171() {
return DHCR171;
}

public boolean getDHCR172() {
return DHCR172;
}

public boolean getDHCR173() {
return DHCR173;
}

public boolean getDHCR174() {
return DHCR174;
}

public boolean getDHCR175() {
return DHCR175;
}

public boolean getDHCR176() {
return DHCR176;
}

public byte getDHCR178() {
return DHCR178;
}

public boolean getDHCR179() {
return DHCR179;
}

public boolean getDHCR180() {
return DHCR180;
}

public boolean getDHCR181() {
return DHCR181;
}

public boolean getDHCR182() {
return DHCR182;
}

public boolean getDHCR183() {
return DHCR183;
}

public boolean getDHCR184() {
return DHCR184;
}

public boolean getDHCR185() {
return DHCR185;
}

public boolean getDHCR186() {
return DHCR186;
}

public boolean getDHCR187() {
return DHCR187;
}

public boolean getDHCR188() {
return DHCR188;
}

public boolean getDHCR189() {
return DHCR189;
}

public boolean getDHCR190() {
return DHCR190;
}

public boolean getDHCR191() {
return DHCR191;
}

public boolean getDHCR192() {
return DHCR192;
}

public byte getDHCR194() {
return DHCR194;
}

public boolean getDHCR195() {
return DHCR195;
}

public boolean getDHCR196() {
return DHCR196;
}

public boolean getDHCR197() {
return DHCR197;
}

public boolean getDHCR198() {
return DHCR198;
}

public boolean getDHCR199() {
return DHCR199;
}

public boolean getDHCR200() {
return DHCR200;
}

public boolean getDHCR201() {
return DHCR201;
}

public boolean getDHCR202() {
return DHCR202;
}

public boolean getDHCR203() {
return DHCR203;
}

public boolean getDHCR204() {
return DHCR204;
}

public boolean getDHCR205() {
return DHCR205;
}

public boolean getDHCR206() {
return DHCR206;
}

public boolean getDHCR207() {
return DHCR207;
}

public boolean getDHCR208() {
return DHCR208;
}

public byte getDHCR209() {
return DHCR209;
}

public byte getDHCR210() {
return DHCR210;
}

public boolean getDHCR211() {
return DHCR211;
}

public boolean getDHCR212() {
return DHCR212;
}

public boolean getDHCR213() {
return DHCR213;
}

public boolean getDHCR214() {
return DHCR214;
}

public boolean getDHCR215() {
return DHCR215;
}

public boolean getDHCR216() {
return DHCR216;
}

public boolean getDHCR217() {
return DHCR217;
}

public boolean getDHCR218() {
return DHCR218;
}

public boolean getDHCR219() {
return DHCR219;
}

public boolean getDHCR220() {
return DHCR220;
}

public boolean getDHCR221() {
return DHCR221;
}

public boolean getDHCR222() {
return DHCR222;
}

public boolean getDHCR223() {
return DHCR223;
}

public boolean getDHCR224() {
return DHCR224;
}

public byte getDHCR225() {
return DHCR225;
}

public boolean getDHCR226() {
return DHCR226;
}

public boolean getDHCR227() {
return DHCR227;
}

public boolean getDHCR228() {
return DHCR228;
}

public boolean getDHCR229() {
return DHCR229;
}

public boolean getDHCR230() {
return DHCR230;
}

public boolean getDHCR231() {
return DHCR231;
}

public boolean getDHCR232() {
return DHCR232;
}

public boolean getDHCR233() {
return DHCR233;
}

public boolean getDHCR234() {
return DHCR234;
}

public boolean getDHCR235() {
return DHCR235;
}

public boolean getDHCR236() {
return DHCR236;
}

public boolean getDHCR237() {
return DHCR237;
}

public boolean getDHCR238() {
return DHCR238;
}

public boolean getDHCR239() {
return DHCR239;
}

public byte getDHCR24() {
return DHCR24;
}

public boolean getDHCR240() {
return DHCR240;
}

public byte getDHCR241() {
return DHCR241;
}

public boolean getDHCR242() {
return DHCR242;
}

public boolean getDHCR243() {
return DHCR243;
}

public boolean getDHCR244() {
return DHCR244;
}

public boolean getDHCR245() {
return DHCR245;
}

public boolean getDHCR246() {
return DHCR246;
}

public boolean getDHCR247() {
return DHCR247;
}

public boolean getDHCR248() {
return DHCR248;
}

public boolean getDHCR249() {
return DHCR249;
}

public byte getDHCR25() {
return DHCR25;
}

public boolean getDHCR250() {
return DHCR250;
}

public boolean getDHCR251() {
return DHCR251;
}

public boolean getDHCR252() {
return DHCR252;
}

public boolean getDHCR253() {
return DHCR253;
}

public boolean getDHCR254() {
return DHCR254;
}

public boolean getDHCR255() {
return DHCR255;
}

public boolean getDHCR256() {
return DHCR256;
}

public byte getDHCR26() {
return DHCR26;
}

public byte getDHCR27() {
return DHCR27;
}

public boolean getDHCR28() {
return DHCR28;
}

public boolean getDHCR29() {
return DHCR29;
}

public boolean getDHCR30() {
return DHCR30;
}

public boolean getDHCR31() {
return DHCR31;
}

public boolean getDHCR32() {
return DHCR32;
}

public byte getDHCR40() {
return DHCR40;
}

public byte getDHCR41() {
return DHCR41;
}

public byte getDHCR42() {
return DHCR42;
}

public byte getDHCR43() {
return DHCR43;
}

public boolean getDHCR44() {
return DHCR44;
}

public boolean getDHCR45() {
return DHCR45;
}

public boolean getDHCR46() {
return DHCR46;
}

public boolean getDHCR47() {
return DHCR47;
}

public boolean getDHCR48() {
return DHCR48;
}

public byte getDHCR56() {
return DHCR56;
}

public byte getDHCR57() {
return DHCR57;
}

public byte getDHCR58() {
return DHCR58;
}

public boolean getDHCR59() {
return DHCR59;
}

public boolean getDHCR60() {
return DHCR60;
}

public boolean getDHCR61() {
return DHCR61;
}

public boolean getDHCR62() {
return DHCR62;
}

public boolean getDHCR63() {
return DHCR63;
}

public boolean getDHCR64() {
return DHCR64;
}

public byte getDHCR72() {
return DHCR72;
}

public byte getDHCR73() {
return DHCR73;
}

public byte getDHCR74() {
return DHCR74;
}

public boolean getDHCR75() {
return DHCR75;
}

public boolean getDHCR76() {
return DHCR76;
}

public boolean getDHCR77() {
return DHCR77;
}

public boolean getDHCR78() {
return DHCR78;
}

public boolean getDHCR79() {
return DHCR79;
}

public boolean getDHCR80() {
return DHCR80;
}

public boolean getDHCR88() {
return DHCR88;
}

public boolean getDHCR89() {
return DHCR89;
}

public boolean getDHCR90() {
return DHCR90;
}

public boolean getDHCR91() {
return DHCR91;
}

public boolean getDHCR92() {
return DHCR92;
}

public boolean getDHCR93() {
return DHCR93;
}

public boolean getDHCR94() {
return DHCR94;
}

public boolean getDHCR95() {
return DHCR95;
}

public boolean getDHCR96() {
return DHCR96;
}

public byte getDHCS14() {
return DHCS14;
}

public byte getDHCS15() {
return DHCS15;
}

public byte getDHCS16() {
return DHCS16;
}

public byte getDHDOBC() {
return DHDOBC;
}

public byte getDHDOBC10() {
return DHDOBC10;
}

public boolean getDHDOBC11() {
return DHDOBC11;
}

public boolean getDHDOBC12() {
return DHDOBC12;
}

public boolean getDHDOBC13() {
return DHDOBC13;
}

public boolean getDHDOBC14() {
return DHDOBC14;
}

public boolean getDHDOBC15() {
return DHDOBC15;
}

public byte getDHDOBC16() {
return DHDOBC16;
}

public byte getDHDOBC2() {
return DHDOBC2;
}

public byte getDHDOBC3() {
return DHDOBC3;
}

public byte getDHDOBC4() {
return DHDOBC4;
}

public byte getDHDOBC5() {
return DHDOBC5;
}

public byte getDHDOBC6() {
return DHDOBC6;
}

public byte getDHDOBC7() {
return DHDOBC7;
}

public byte getDHDOBC8() {
return DHDOBC8;
}

public byte getDHDOBC9() {
return DHDOBC9;
}

public byte getDHEACD() {
return DHEACD;
}

public double getDHEAS() {
return DHEAS;
}

public boolean getDHEHNO() {
return DHEHNO;
}

public boolean getDHEMEB() {
return DHEMEB;
}

public byte getDHEMEN() {
return DHEMEN;
}

public boolean getDHEPEE() {
return DHEPEE;
}

public byte getDHESKA() {
return DHESKA;
}

public byte getDHESMK() {
return DHESMK;
}

public byte getDHIASEP() {
return DHIASEP;
}

public byte getDHPA10() {
return DHPA10;
}

public byte getDHPA11() {
return DHPA11;
}

public byte getDHPA12() {
return DHPA12;
}

public byte getDHPA13() {
return DHPA13;
}

public byte getDHPA14() {
return DHPA14;
}

public byte getDHPA15() {
return DHPA15;
}

public byte getDHPA16() {
return DHPA16;
}

public byte getDHPA2() {
return DHPA2;
}

public byte getDHPA3() {
return DHPA3;
}

public byte getDHPA4() {
return DHPA4;
}

public byte getDHPA5() {
return DHPA5;
}

public byte getDHPA6() {
return DHPA6;
}

public byte getDHPA7() {
return DHPA7;
}

public byte getDHPA8() {
return DHPA8;
}

public byte getDHPA9() {
return DHPA9;
}

public byte getDHPB10() {
return DHPB10;
}

public byte getDHPB11() {
return DHPB11;
}

public byte getDHPB12() {
return DHPB12;
}

public byte getDHPB13() {
return DHPB13;
}

public byte getDHPB14() {
return DHPB14;
}

public byte getDHPB15() {
return DHPB15;
}

public byte getDHPB16() {
return DHPB16;
}

public byte getDHPB2() {
return DHPB2;
}

public byte getDHPB3() {
return DHPB3;
}

public byte getDHPB4() {
return DHPB4;
}

public byte getDHPB5() {
return DHPB5;
}

public byte getDHPB6() {
return DHPB6;
}

public byte getDHPB7() {
return DHPB7;
}

public byte getDHPB8() {
return DHPB8;
}

public byte getDHPB9() {
return DHPB9;
}

public byte getDHR13() {
return DHR13;
}

public byte getDHR14() {
return DHR14;
}

public byte getDHR15() {
return DHR15;
}

public boolean getDHR16() {
return DHR16;
}

public boolean getDHSEX() {
return DHSEX;
}

public byte getDHWORK() {
return DHWORK;
}

public byte getDIAGR() {
return DIAGR;
}

public short getDIAS1() {
return DIAS1;
}

public short getDIAS2() {
return DIAS2;
}

public short getDIAS3() {
return DIAS3;
}

public double getDIAVAL() {
return DIAVAL;
}

public byte getDIBPCOT() {
return DIBPCOT;
}

public short getDIDBNY() {
return DIDBNY;
}

public byte getDIDOB() {
return DIDOB;
}

public byte getDIFBPCCU() {
return DIFBPCCU;
}

public byte getDIFBPCEQ() {
return DIFBPCEQ;
}

public byte getDIFBPCER() {
return DIFBPCER;
}

public byte getDIFBPCLE() {
return DIFBPCLE;
}

public byte getDIFBPCNO() {
return DIFBPCNO;
}

public byte getDIFBPCUP() {
return DIFBPCUP;
}

public byte getDIFJOBD() {
return DIFJOBD;
}

public byte getDIGNMYC() {
return DIGNMYC;
}

public byte getDIGNMYD() {
return DIGNMYD;
}

public byte getDIKLIVC() {
return DIKLIVC;
}

public byte getDIKLIVD() {
return DIKLIVD;
}

public byte getDIMAR() {
return DIMAR;
}

public byte getDISEX() {
return DISEX;
}

public byte getDISEXC() {
return DISEXC;
}

public byte getDISIBC() {
return DISIBC;
}

public byte getDISIBD() {
return DISIBD;
}

public short getDOBYEAR() {
return DOBYEAR;
}

public byte getEHTCH() {
return EHTCH;
}

public byte getEHTFT() {
return EHTFT;
}

public byte getEHTIN() {
return EHTIN;
}

public double getEHTM() {
return EHTM;
}

public byte getERCAA() {
return ERCAA;
}

public byte getERCABCH() {
return ERCABCH;
}

public byte getERCABFR() {
return ERCABFR;
}

public byte getERCABGC() {
return ERCABGC;
}

public byte getERCABOR() {
return ERCABOR;
}

public byte getERCABOT() {
return ERCABOT;
}

public byte getERCABPA() {
return ERCABPA;
}

public byte getERCABPL() {
return ERCABPL;
}

public byte getERCABSP() {
return ERCABSP;
}

public short getERCAC() {
return ERCAC;
}

public byte getERCADP1() {
return ERCADP1;
}

public byte getERCADP10() {
return ERCADP10;
}

public byte getERCADP11() {
return ERCADP11;
}

public byte getERCADP12() {
return ERCADP12;
}

public byte getERCADP13() {
return ERCADP13;
}

public byte getERCADP14() {
return ERCADP14;
}

public byte getERCADP15() {
return ERCADP15;
}

public byte getERCADP16() {
return ERCADP16;
}

public byte getERCADP2() {
return ERCADP2;
}

public byte getERCADP3() {
return ERCADP3;
}

public byte getERCADP4() {
return ERCADP4;
}

public byte getERCADP5() {
return ERCADP5;
}

public byte getERCADP6() {
return ERCADP6;
}

public byte getERCADP7() {
return ERCADP7;
}

public byte getERCADP8() {
return ERCADP8;
}

public byte getERCADP9() {
return ERCADP9;
}

public byte getERCALIVE() {
return ERCALIVE;
}

public byte getERCAM85() {
return ERCAM85;
}

public byte getERCAM86() {
return ERCAM86;
}

public byte getERCAMCH() {
return ERCAMCH;
}

public byte getERCAMFR() {
return ERCAMFR;
}

public byte getERCAMGC() {
return ERCAMGC;
}

public byte getERCAMOR() {
return ERCAMOR;
}

public byte getERCAMOT() {
return ERCAMOT;
}

public byte getERCAMPA() {
return ERCAMPA;
}

public byte getERCAMPL() {
return ERCAMPL;
}

public byte getERCAMSP() {
return ERCAMSP;
}

public byte getERCANCH() {
return ERCANCH;
}

public byte getERCANFR() {
return ERCANFR;
}

public byte getERCANGC() {
return ERCANGC;
}

public byte getERCANOR() {
return ERCANOR;
}

public byte getERCANOT() {
return ERCANOT;
}

public byte getERCANPA() {
return ERCANPA;
}

public byte getERCANPL() {
return ERCANPL;
}

public boolean getERCANSP() {
return ERCANSP;
}

public byte getERCANTT() {
return ERCANTT;
}

public byte getERCARA() {
return ERCARA;
}

public byte getERCARB() {
return ERCARB;
}

public byte getERFVOFT() {
return ERFVOFT;
}

public byte getERFVOL() {
return ERFVOL;
}

public byte getERFVOL96() {
return ERFVOL96;
}

public byte getERFVOLBE() {
return ERFVOLBE;
}

public byte getERFVOLCA() {
return ERFVOLCA;
}

public byte getERFVOLED() {
return ERFVOLED;
}

public byte getERFVOLIN() {
return ERFVOLIN;
}

public byte getERFVOLLE() {
return ERFVOLLE;
}

public byte getERFVOLMO() {
return ERFVOLMO;
}

public byte getERFVOLOR() {
return ERFVOLOR;
}

public byte getERFVOLPR() {
return ERFVOLPR;
}

public byte getERFVOLRE() {
return ERFVOLRE;
}

public byte getERFVOLSE() {
return ERFVOLSE;
}

public byte getERFVOLTR() {
return ERFVOLTR;
}

public byte getERFVOLVI() {
return ERFVOLVI;
}

public byte getERIVOFT() {
return ERIVOFT;
}

public byte getERIVOL1() {
return ERIVOL1;
}

public byte getERIVOL96() {
return ERIVOL96;
}

public byte getERLVOLBA() {
return ERLVOLBA;
}

public byte getERLVOLCO() {
return ERLVOLCO;
}

public byte getERLVOLDE() {
return ERLVOLDE;
}

public byte getERLVOLPE() {
return ERLVOLPE;
}

public byte getERLVOLPR() {
return ERLVOLPR;
}

public byte getERLVOLRE() {
return ERLVOLRE;
}

public byte getERLVOLSH() {
return ERLVOLSH;
}

public byte getERLVOLTR() {
return ERLVOLTR;
}

public byte getERLVOLWR() {
return ERLVOLWR;
}

public byte getERMOCAC() {
return ERMOCAC;
}

public byte getERMOCFI() {
return ERMOCFI;
}

public byte getERMOCMO() {
return ERMOCMO;
}

public byte getERMOCNE() {
return ERMOCNE;
}

public byte getERMOCNJ() {
return ERMOCNJ;
}

public byte getERMOCOB() {
return ERMOCOB;
}

public byte getERMOCOT() {
return ERMOCOT;
}

public byte getERMOCSK() {
return ERMOCSK;
}

public byte getERMOCSO() {
return ERMOCSO;
}

public byte getERMOCUS() {
return ERMOCUS;
}

public byte getERMOV96() {
return ERMOV96;
}

public byte getERMOVAC() {
return ERMOVAC;
}

public byte getERMOVFI() {
return ERMOVFI;
}

public byte getERMOVNE() {
return ERMOVNE;
}

public byte getERMOVNJ() {
return ERMOVNJ;
}

public byte getERMOVOB() {
return ERMOVOB;
}

public byte getERMOVSK() {
return ERMOVSK;
}

public byte getERMOVSO() {
return ERMOVSO;
}

public byte getERMOVUS() {
return ERMOVUS;
}

public byte getERRESBK() {
return ERRESBK;
}

public byte getERRESCK() {
return ERRESCK;
}

public byte getERRESER9() {
return ERRESER9;
}

public byte getERRESERB() {
return ERRESERB;
}

public byte getERRESERD() {
return ERRESERD;
}

public byte getERRESERH() {
return ERRESERH;
}

public byte getERRESERI() {
return ERRESERI;
}

public byte getERRESERO() {
return ERRESERO;
}

public byte getERRESERS() {
return ERRESERS;
}

public byte getERRESOF() {
return ERRESOF;
}

public byte getERRESON() {
return ERRESON;
}

public byte getERRESRY() {
return ERRESRY;
}

public byte getERVOLA() {
return ERVOLA;
}

public byte getERVOLB() {
return ERVOLB;
}

public double getESTHT() {
return ESTHT;
}

public double getESTWT() {
return ESTWT;
}

public byte getEWTCH() {
return EWTCH;
}

public double getEWTKG() {
return EWTKG;
}

public byte getEWTL() {
return EWTL;
}

public byte getEWTST() {
return EWTST;
}

public byte getEXLO90() {
return EXLO90;
}

public byte getEXPWF() {
return EXPWF;
}

public byte getEXREL96() {
return EXREL96;
}

public byte getEXRELA() {
return EXRELA;
}

public byte getEXRELB() {
return EXRELB;
}

public byte getEXRELC() {
return EXRELC;
}

public byte getEXRELD() {
return EXRELD;
}

public byte getEXRELEDE() {
return EXRELEDE;
}

public byte getEXRELEEL() {
return EXRELEEL;
}

public byte getEXRELEFA() {
return EXRELEFA;
}

public byte getEXRELEFO() {
return EXRELEFO;
}

public byte getEXRELEHO() {
return EXRELEHO;
}

public byte getEXRELEME() {
return EXRELEME;
}

public byte getEXRELEOU() {
return EXRELEOU;
}

public byte getEXRELEPR() {
return EXRELEPR;
}

public byte getEXRELETR() {
return EXRELETR;
}

public byte getEYESURG() {
return EYESURG;
}

public byte getFASTASK() {
return FASTASK;
}

public byte getFASTELIG() {
return FASTELIG;
}

public byte getFATHER() {
return FATHER;
}

public double getFEV1() {
return FEV1;
}

public double getFEV2() {
return FEV2;
}

public double getFEV3() {
return FEV3;
}

public double getFGLU() {
return FGLU;
}

public String getFINSTAT4() {
return FINSTAT4;
}

public byte getFIT() {
return FIT;
}

public byte getFLOORC() {
return FLOORC;
}

public byte getFQAQUA() {
return FQAQUA;
}

public byte getFQCBTHR() {
return FQCBTHR;
}

public short getFQCENG() {
return FQCENG;
}

public byte getFQEND() {
return FQEND;
}

public byte getFQETHNR() {
return FQETHNR;
}

public byte getFQQUA95() {
return FQQUA95;
}

public byte getFQQUAALE() {
return FQQUAALE;
}

public byte getFQQUAASL() {
return FQQUAASL;
}

public byte getFQQUACGA() {
return FQQUACGA;
}

public byte getFQQUACGF() {
return FQQUACGF;
}

public byte getFQQUACGO() {
return FQQUACGO;
}

public byte getFQQUACLE() {
return FQQUACLE;
}

public byte getFQQUACS1() {
return FQQUACS1;
}

public byte getFQQUACS2() {
return FQQUACS2;
}

public byte getFQQUACSU() {
return FQQUACSU;
}

public byte getFQQUADEG() {
return FQQUADEG;
}

public byte getFQQUAGCA() {
return FQQUAGCA;
}

public byte getFQQUAGCD() {
return FQQUAGCD;
}

public byte getFQQUAHNC() {
return FQQUAHNC;
}

public byte getFQQUAMAT() {
return FQQUAMAT;
}

public byte getFQQUANUR() {
return FQQUANUR;
}

public byte getFQQUANV1() {
return FQQUANV1;
}

public byte getFQQUANV2() {
return FQQUANV2;
}

public byte getFQQUANV3() {
return FQQUANV3;
}

public byte getFQQUANV4() {
return FQQUANV4;
}

public byte getFQQUANV5() {
return FQQUANV5;
}

public byte getFQQUAOLA() {
return FQQUAOLA;
}

public byte getFQQUAOLD() {
return FQQUAOLD;
}

public byte getFQQUAOLP() {
return FQQUAOLP;
}

public byte getFQQUAONC() {
return FQQUAONC;
}

public byte getFQQUASLC() {
return FQQUASLC;
}

public byte getFQQUASLL() {
return FQQUASLL;
}

public byte getFQQUASUP() {
return FQQUASUP;
}

public byte getFQQUATEA() {
return FQQUATEA;
}

public byte getFQQUATRA() {
return FQQUATRA;
}

public byte getFQQUM85() {
return FQQUM85;
}

public byte getFQQUM86() {
return FQQUM86;
}

public byte getFQQUMALE() {
return FQQUMALE;
}

public byte getFQQUMASL() {
return FQQUMASL;
}

public byte getFQQUMCGA() {
return FQQUMCGA;
}

public byte getFQQUMCGF() {
return FQQUMCGF;
}

public byte getFQQUMCGO() {
return FQQUMCGO;
}

public byte getFQQUMCLE() {
return FQQUMCLE;
}

public byte getFQQUMCS1() {
return FQQUMCS1;
}

public byte getFQQUMCS2() {
return FQQUMCS2;
}

public byte getFQQUMCSU() {
return FQQUMCSU;
}

public byte getFQQUMDEG() {
return FQQUMDEG;
}

public byte getFQQUMDIP() {
return FQQUMDIP;
}

public byte getFQQUMFOR() {
return FQQUMFOR;
}

public byte getFQQUMGCA() {
return FQQUMGCA;
}

public byte getFQQUMGCD() {
return FQQUMGCD;
}

public byte getFQQUMHNC() {
return FQQUMHNC;
}

public byte getFQQUMMAT() {
return FQQUMMAT;
}

public byte getFQQUMMIL() {
return FQQUMMIL;
}

public byte getFQQUMNNE() {
return FQQUMNNE;
}

public byte getFQQUMNUR() {
return FQQUMNUR;
}

public byte getFQQUMNV1() {
return FQQUMNV1;
}

public byte getFQQUMNV2() {
return FQQUMNV2;
}

public byte getFQQUMNV3() {
return FQQUMNV3;
}

public byte getFQQUMNV4() {
return FQQUMNV4;
}

public byte getFQQUMNV5() {
return FQQUMNV5;
}

public byte getFQQUMNVZ() {
return FQQUMNVZ;
}

public byte getFQQUMOAC() {
return FQQUMOAC;
}

public byte getFQQUMOLA() {
return FQQUMOLA;
}

public byte getFQQUMOLD() {
return FQQUMOLD;
}

public byte getFQQUMOLP() {
return FQQUMOLP;
}

public byte getFQQUMONC() {
return FQQUMONC;
}

public byte getFQQUMOPR() {
return FQQUMOPR;
}

public byte getFQQUMOVO() {
return FQQUMOVO;
}

public byte getFQQUMSLC() {
return FQQUMSLC;
}

public byte getFQQUMSLL() {
return FQQUMSLL;
}

public byte getFQQUMSUP() {
return FQQUMSUP;
}

public byte getFQQUMTEA() {
return FQQUMTEA;
}

public byte getFQQUMTRA() {
return FQQUMTRA;
}

public double getFSTGS_TM() {
return FSTGS_TM;
}

public byte getFTHAGD() {
return FTHAGD;
}

public byte getFULL1() {
return FULL1;
}

public byte getFULL2() {
return FULL2;
}

public byte getFULL3() {
return FULL3;
}

public double getFVC1() {
return FVC1;
}

public double getFVC2() {
return FVC2;
}

public double getFVC3() {
return FVC3;
}

public byte getGCINHH() {
return GCINHH;
}

public double getGTSPD_MN() {
return GTSPD_MN;
}

public byte getGTSPD_MNG() {
return GTSPD_MNG;
}

public byte getGTSPD_WK() {
return GTSPD_WK;
}

public byte getHASTRO() {
return HASTRO;
}

public byte getHASURG() {
return HASURG;
}

public double getHBA1C() {
return HBA1C;
}

public double getHDL() {
return HDL;
}

public byte getHEACD() {
return HEACD;
}

public byte getHEACE() {
return HEACE;
}

public byte getHEACEA() {
return HEACEA;
}

public byte getHEADLTE() {
return HEADLTE;
}

public byte getHEAGAR() {
return HEAGAR;
}

public short getHEAGARY() {
return HEAGARY;
}

public byte getHEAGBR() {
return HEAGBR;
}

public short getHEAGBRY() {
return HEAGBRY;
}

public byte getHEAGCR() {
return HEAGCR;
}

public short getHEAGCRY() {
return HEAGCRY;
}

public byte getHEAGDR() {
return HEAGDR;
}

public short getHEAGDRY() {
return HEAGDRY;
}

public byte getHEAGER() {
return HEAGER;
}

public short getHEAGERY() {
return HEAGERY;
}

public byte getHEAGFR() {
return HEAGFR;
}

public short getHEAGFRY() {
return HEAGFRY;
}

public byte getHEAGG() {
return HEAGG;
}

public byte getHEAGGR() {
return HEAGGR;
}

public short getHEAGGRY() {
return HEAGGRY;
}

public byte getHEAGH() {
return HEAGH;
}

public byte getHEAGHR() {
return HEAGHR;
}

public short getHEAGHRY() {
return HEAGHRY;
}

public byte getHEAGIR() {
return HEAGIR;
}

public short getHEAGIRY() {
return HEAGIRY;
}

public byte getHEAGJR() {
return HEAGJR;
}

public short getHEAGJRY() {
return HEAGJRY;
}

public byte getHEAGK() {
return HEAGK;
}

public byte getHEAGKR() {
return HEAGKR;
}

public short getHEAGKRY() {
return HEAGKRY;
}

public byte getHEAID96() {
return HEAID96;
}

public byte getHEAIDAL() {
return HEAIDAL;
}

public byte getHEAIDBU() {
return HEAIDBU;
}

public byte getHEAIDCA() {
return HEAIDCA;
}

public byte getHEAIDCR() {
return HEAIDCR;
}

public byte getHEAIDEA() {
return HEAIDEA;
}

public byte getHEAIDEW() {
return HEAIDEW;
}

public byte getHEAIDMW() {
return HEAIDMW;
}

public byte getHEAIDZI() {
return HEAIDZI;
}

public byte getHEALCOV() {
return HEALCOV;
}

public byte getHEALM85() {
return HEALM85;
}

public byte getHEALM86() {
return HEALM86;
}

public byte getHEALM95() {
return HEALM95;
}

public byte getHEALMCH() {
return HEALMCH;
}

public byte getHEALMFA() {
return HEALMFA;
}

public byte getHEALMFR() {
return HEALMFR;
}

public byte getHEALMLL() {
return HEALMLL;
}

public byte getHEALMNHS() {
return HEALMNHS;
}

public byte getHEALMSE() {
return HEALMSE;
}

public byte getHEALMSS() {
return HEALMSS;
}

public byte getHEALNHS() {
return HEALNHS;
}

public byte getHEALOT() {
return HEALOT;
}

public byte getHEALSE() {
return HEALSE;
}

public byte getHEALSS() {
return HEALSS;
}

public byte getHEAMB() {
return HEAMB;
}

public byte getHEANA() {
return HEANA;
}

public byte getHEANB() {
return HEANB;
}

public byte getHEANC() {
return HEANC;
}

public byte getHEAND() {
return HEAND;
}

public byte getHEAND1() {
return HEAND1;
}

public byte getHEANE() {
return HEANE;
}

public byte getHEANF() {
return HEANF;
}

public byte getHEANG() {
return HEANG;
}

public byte getHEANH() {
return HEANH;
}

public byte getHEANILS() {
return HEANILS;
}

public byte getHEANIM86() {
return HEANIM86;
}

public byte getHEANIUS() {
return HEANIUS;
}

public byte getHEANK() {
return HEANK;
}

public byte getHEANM85() {
return HEANM85;
}

public byte getHEANMLA() {
return HEANMLA;
}

public byte getHEANMLC() {
return HEANMLC;
}

public byte getHEANMLS() {
return HEANMLS;
}

public byte getHEANMRA() {
return HEANMRA;
}

public byte getHEANMRC() {
return HEANMRC;
}

public byte getHEANMUS() {
return HEANMUS;
}

public byte getHEANS95() {
return HEANS95;
}

public byte getHEANSLA() {
return HEANSLA;
}

public byte getHEANSLC() {
return HEANSLC;
}

public byte getHEANSRA() {
return HEANSRA;
}

public byte getHEANSRC() {
return HEANSRC;
}

public byte getHEARTA() {
return HEARTA;
}

public byte getHEARTB() {
return HEARTB;
}

public byte getHEARTC() {
return HEARTC;
}

public byte getHEARTD() {
return HEARTD;
}

public byte getHEARTE() {
return HEARTE;
}

public byte getHEARTOA() {
return HEARTOA;
}

public byte getHEARTOT() {
return HEARTOT;
}

public byte getHEARTRA() {
return HEARTRA;
}

public byte getHEATA() {
return HEATA;
}

public byte getHEATT1() {
return HEATT1;
}

public byte getHEATT13() {
return HEATT13;
}

public byte getHEATT14() {
return HEATT14;
}

public byte getHEATT15() {
return HEATT15;
}

public byte getHEATT16() {
return HEATT16;
}

public byte getHEATT2() {
return HEATT2;
}

public byte getHEATT3() {
return HEATT3;
}

public byte getHEATT5() {
return HEATT5;
}

public byte getHEATT6() {
return HEATT6;
}

public byte getHEATT7() {
return HEATT7;
}

public byte getHEATT8() {
return HEATT8;
}

public byte getHEATT9() {
return HEATT9;
}

public byte getHEATT95() {
return HEATT95;
}

public byte getHEATTM1() {
return HEATTM1;
}

public byte getHEATTM13() {
return HEATTM13;
}

public byte getHEATTM14() {
return HEATTM14;
}

public byte getHEATTM15() {
return HEATTM15;
}

public byte getHEATTM16() {
return HEATTM16;
}

public byte getHEATTM2() {
return HEATTM2;
}

public byte getHEATTM3() {
return HEATTM3;
}

public byte getHEATTM5() {
return HEATTM5;
}

public byte getHEATTM51() {
return HEATTM51;
}

public byte getHEATTM52() {
return HEATTM52;
}

public byte getHEATTM6() {
return HEATTM6;
}

public byte getHEATTM7() {
return HEATTM7;
}

public byte getHEATTM8() {
return HEATTM8;
}

public byte getHEATTM85() {
return HEATTM85;
}

public byte getHEATTM86() {
return HEATTM86;
}

public byte getHEATTM9() {
return HEATTM9;
}

public byte getHEBAL() {
return HEBAL;
}

public byte getHEBDIAAD() {
return HEBDIAAD;
}

public byte getHEBDIAAR() {
return HEBDIAAR;
}

public byte getHEBDIAAS() {
return HEBDIAAS;
}

public byte getHEBDIACA() {
return HEBDIACA;
}

public byte getHEBDIADE() {
return HEBDIADE;
}

public byte getHEBDIALU() {
return HEBDIALU;
}

public byte getHEBDIAOS() {
return HEBDIAOS;
}

public byte getHEBDIAPD() {
return HEBDIAPD;
}

public byte getHEBDIAPS() {
return HEBDIAPS;
}

public byte getHEBPCHK() {
return HEBPCHK;
}

public boolean getHEBUCOV() {
return HEBUCOV;
}

public byte getHEBUM85() {
return HEBUM85;
}

public byte getHEBUM86() {
return HEBUM86;
}

public boolean getHEBUM95() {
return HEBUM95;
}

public byte getHEBUMCH() {
return HEBUMCH;
}

public byte getHEBUMFA() {
return HEBUMFA;
}

public byte getHEBUMFR() {
return HEBUMFR;
}

public byte getHEBUMLL() {
return HEBUMLL;
}

public byte getHEBUMNHS() {
return HEBUMNHS;
}

public byte getHEBUMSE() {
return HEBUMSE;
}

public byte getHEBUMSS() {
return HEBUMSS;
}

public byte getHEBUNHS() {
return HEBUNHS;
}

public byte getHEBUOT() {
return HEBUOT;
}

public byte getHEBUSE() {
return HEBUSE;
}

public byte getHEBUSS() {
return HEBUSS;
}

public byte getHECACOV() {
return HECACOV;
}

public byte getHECAM85() {
return HECAM85;
}

public byte getHECAM86() {
return HECAM86;
}

public byte getHECAM95() {
return HECAM95;
}

public byte getHECAMCH() {
return HECAMCH;
}

public byte getHECAMFA() {
return HECAMFA;
}

public byte getHECAMFR() {
return HECAMFR;
}

public byte getHECAMLL() {
return HECAMLL;
}

public byte getHECAMNHS() {
return HECAMNHS;
}

public byte getHECAMSE() {
return HECAMSE;
}

public byte getHECAMSS() {
return HECAMSS;
}

public byte getHECANAA() {
return HECANAA;
}

public byte getHECANBB() {
return HECANBB;
}

public byte getHECANHS() {
return HECANHS;
}

public byte getHECAOT() {
return HECAOT;
}

public byte getHECASE() {
return HECASE;
}

public byte getHECASS() {
return HECASS;
}

public byte getHECATN() {
return HECATN;
}

public byte getHECHMD() {
return HECHMD;
}

public byte getHECHME() {
return HECHME;
}

public byte getHECLUB1() {
return HECLUB1;
}

public byte getHECLUB2() {
return HECLUB2;
}

public byte getHECLUB3() {
return HECLUB3;
}

public byte getHECLUB96() {
return HECLUB96;
}

public boolean getHECRCOV() {
return HECRCOV;
}

public byte getHECRM85() {
return HECRM85;
}

public byte getHECRM86() {
return HECRM86;
}

public boolean getHECRM95() {
return HECRM95;
}

public byte getHECRMCH() {
return HECRMCH;
}

public byte getHECRMFA() {
return HECRMFA;
}

public byte getHECRMFR() {
return HECRMFR;
}

public byte getHECRMLL() {
return HECRMLL;
}

public byte getHECRMNHS() {
return HECRMNHS;
}

public byte getHECRMSE() {
return HECRMSE;
}

public byte getHECRMSS() {
return HECRMSS;
}

public byte getHECRNHS() {
return HECRNHS;
}

public byte getHECROT() {
return HECROT;
}

public byte getHECRSE() {
return HECRSE;
}

public byte getHECRSS() {
return HECRSS;
}

public byte getHEDACAN() {
return HEDACAN;
}

public byte getHEDACAR() {
return HEDACAR;
}

public byte getHEDACBP() {
return HEDACBP;
}

public byte getHEDACCH() {
return HEDACCH;
}

public byte getHEDACDI() {
return HEDACDI;
}

public byte getHEDACHF() {
return HEDACHF;
}

public byte getHEDACHM() {
return HEDACHM;
}

public byte getHEDACMI() {
return HEDACMI;
}

public byte getHEDACOT() {
return HEDACOT;
}

public byte getHEDACST() {
return HEDACST;
}

public byte getHEDANAN() {
return HEDANAN;
}

public byte getHEDANAR() {
return HEDANAR;
}

public byte getHEDANBP() {
return HEDANBP;
}

public byte getHEDANCH() {
return HEDANCH;
}

public byte getHEDANDI() {
return HEDANDI;
}

public byte getHEDANHF() {
return HEDANHF;
}

public byte getHEDANHM() {
return HEDANHM;
}

public byte getHEDANMI() {
return HEDANMI;
}

public byte getHEDANOT() {
return HEDANOT;
}

public byte getHEDANST() {
return HEDANST;
}

public byte getHEDASAN() {
return HEDASAN;
}

public byte getHEDASAR() {
return HEDASAR;
}

public byte getHEDASBP() {
return HEDASBP;
}

public byte getHEDASCH() {
return HEDASCH;
}

public byte getHEDASHF() {
return HEDASHF;
}

public byte getHEDASHM() {
return HEDASHM;
}

public byte getHEDASOT() {
return HEDASOT;
}

public byte getHEDAWAN() {
return HEDAWAN;
}

public byte getHEDAWAR() {
return HEDAWAR;
}

public byte getHEDAWBP() {
return HEDAWBP;
}

public byte getHEDAWCH() {
return HEDAWCH;
}

public byte getHEDAWDI() {
return HEDAWDI;
}

public byte getHEDAWHF() {
return HEDAWHF;
}

public byte getHEDAWHM() {
return HEDAWHM;
}

public byte getHEDAWMI() {
return HEDAWMI;
}

public byte getHEDAWOT() {
return HEDAWOT;
}

public byte getHEDAWST() {
return HEDAWST;
}

public byte getHEDBDAD() {
return HEDBDAD;
}

public byte getHEDBDAR() {
return HEDBDAR;
}

public byte getHEDBDAS() {
return HEDBDAS;
}

public byte getHEDBDCA() {
return HEDBDCA;
}

public byte getHEDBDDE() {
return HEDBDDE;
}

public byte getHEDBDLU() {
return HEDBDLU;
}

public byte getHEDBDOS() {
return HEDBDOS;
}

public byte getHEDBDPD() {
return HEDBDPD;
}

public byte getHEDBDPS() {
return HEDBDPS;
}

public byte getHEDBMAD() {
return HEDBMAD;
}

public byte getHEDBMAR() {
return HEDBMAR;
}

public byte getHEDBMAS() {
return HEDBMAS;
}

public byte getHEDBMCA() {
return HEDBMCA;
}

public byte getHEDBMDE() {
return HEDBMDE;
}

public byte getHEDBMLU() {
return HEDBMLU;
}

public byte getHEDBMOS() {
return HEDBMOS;
}

public byte getHEDBMPD() {
return HEDBMPD;
}

public byte getHEDBMPS() {
return HEDBMPS;
}

public byte getHEDBSAR() {
return HEDBSAR;
}

public byte getHEDBSAS() {
return HEDBSAS;
}

public byte getHEDBSCA() {
return HEDBSCA;
}

public byte getHEDBSDE() {
return HEDBSDE;
}

public byte getHEDBSLU() {
return HEDBSLU;
}

public byte getHEDBSOS() {
return HEDBSOS;
}

public byte getHEDBSPD() {
return HEDBSPD;
}

public byte getHEDBWAD() {
return HEDBWAD;
}

public byte getHEDBWAR() {
return HEDBWAR;
}

public byte getHEDBWAS() {
return HEDBWAS;
}

public byte getHEDBWCA() {
return HEDBWCA;
}

public byte getHEDBWDE() {
return HEDBWDE;
}

public byte getHEDBWLU() {
return HEDBWLU;
}

public byte getHEDBWOS() {
return HEDBWOS;
}

public byte getHEDBWPD() {
return HEDBWPD;
}

public byte getHEDBWPS() {
return HEDBWPS;
}

public byte getHEDCC() {
return HEDCC;
}

public byte getHEDIA95() {
return HEDIA95;
}

public byte getHEDIA96() {
return HEDIA96;
}

public byte getHEDIAAN() {
return HEDIAAN;
}

public byte getHEDIAAR() {
return HEDIAAR;
}

public byte getHEDIABP() {
return HEDIABP;
}

public byte getHEDIACH() {
return HEDIACH;
}

public byte getHEDIADI() {
return HEDIADI;
}

public byte getHEDIAGAN() {
return HEDIAGAN;
}

public byte getHEDIAGAR() {
return HEDIAGAR;
}

public byte getHEDIAGBP() {
return HEDIAGBP;
}

public byte getHEDIAGDH() {
return HEDIAGDH;
}

public byte getHEDIAGDI() {
return HEDIAGDI;
}

public byte getHEDIAGHC() {
return HEDIAGHC;
}

public byte getHEDIAGHF() {
return HEDIAGHF;
}

public byte getHEDIAGHM() {
return HEDIAGHM;
}

public byte getHEDIAGMI() {
return HEDIAGMI;
}

public byte getHEDIAGST() {
return HEDIAGST;
}

public byte getHEDIAHF() {
return HEDIAHF;
}

public byte getHEDIAHM() {
return HEDIAHM;
}

public byte getHEDIAMI() {
return HEDIAMI;
}

public byte getHEDIAST() {
return HEDIAST;
}

public byte getHEDIB96() {
return HEDIB96;
}

public byte getHEDIBAD() {
return HEDIBAD;
}

public byte getHEDIBAR() {
return HEDIBAR;
}

public byte getHEDIBAS() {
return HEDIBAS;
}

public byte getHEDIBBL() {
return HEDIBBL;
}

public byte getHEDIBCA() {
return HEDIBCA;
}

public byte getHEDIBDE() {
return HEDIBDE;
}

public byte getHEDIBLU() {
return HEDIBLU;
}

public byte getHEDIBOS() {
return HEDIBOS;
}

public byte getHEDIBPD() {
return HEDIBPD;
}

public byte getHEDIBPS() {
return HEDIBPS;
}

public byte getHEDIM85() {
return HEDIM85;
}

public byte getHEDIM86() {
return HEDIM86;
}

public byte getHEDIM96() {
return HEDIM96;
}

public byte getHEDIMAN() {
return HEDIMAN;
}

public byte getHEDIMAR() {
return HEDIMAR;
}

public byte getHEDIMBP() {
return HEDIMBP;
}

public byte getHEDIMCH() {
return HEDIMCH;
}

public byte getHEDIMDI() {
return HEDIMDI;
}

public byte getHEDIMHF() {
return HEDIMHF;
}

public byte getHEDIMHM() {
return HEDIMHM;
}

public byte getHEDIMMI() {
return HEDIMMI;
}

public byte getHEDIMST() {
return HEDIMST;
}

public byte getHEDIZ() {
return HEDIZ;
}

public byte getHEDIZM51() {
return HEDIZM51;
}

public byte getHEDIZM52() {
return HEDIZM52;
}

public boolean getHEEACOV() {
return HEEACOV;
}

public byte getHEEAM85() {
return HEEAM85;
}

public boolean getHEEAM86() {
return HEEAM86;
}

public boolean getHEEAM95() {
return HEEAM95;
}

public byte getHEEAMCH() {
return HEEAMCH;
}

public byte getHEEAMFA() {
return HEEAMFA;
}

public boolean getHEEAMFR() {
return HEEAMFR;
}

public byte getHEEAMLL() {
return HEEAMLL;
}

public byte getHEEAMNHS() {
return HEEAMNHS;
}

public byte getHEEAMSE() {
return HEEAMSE;
}

public byte getHEEAMSS() {
return HEEAMSS;
}

public byte getHEEANHS() {
return HEEANHS;
}

public byte getHEEAOT() {
return HEEAOT;
}

public byte getHEEASE() {
return HEEASE;
}

public byte getHEEASS() {
return HEEASS;
}

public boolean getHEEWCOV() {
return HEEWCOV;
}

public byte getHEEWM85() {
return HEEWM85;
}

public boolean getHEEWM86() {
return HEEWM86;
}

public boolean getHEEWM95() {
return HEEWM95;
}

public byte getHEEWMCH() {
return HEEWMCH;
}

public byte getHEEWMFA() {
return HEEWMFA;
}

public byte getHEEWMFR() {
return HEEWMFR;
}

public byte getHEEWMLL() {
return HEEWMLL;
}

public byte getHEEWMNHS() {
return HEEWMNHS;
}

public byte getHEEWMSE() {
return HEEWMSE;
}

public byte getHEEWMSS() {
return HEEWMSS;
}

public byte getHEEWNHS() {
return HEEWNHS;
}

public byte getHEEWOT() {
return HEEWOT;
}

public byte getHEEWSE() {
return HEEWSE;
}

public byte getHEEWSS() {
return HEEWSS;
}

public byte getHEFLD() {
return HEFLD;
}

public byte getHEFLE() {
return HEFLE;
}

public byte getHEFLF() {
return HEFLF;
}

public byte getHEFTCHK() {
return HEFTCHK;
}

public byte getHEHBP() {
return HEHBP;
}

public byte getHEHBPA() {
return HEHBPA;
}

public byte getHEHBPB() {
return HEHBPB;
}

public byte getHEHBPB1() {
return HEHBPB1;
}

public byte getHEHELF() {
return HEHELF;
}

public byte getHEHFA() {
return HEHFA;
}

public byte getHEHFM() {
return HEHFM;
}

public short getHEHFY() {
return HEHFY;
}

public byte getHEHIPA() {
return HEHIPA;
}

public byte getHEHIPB() {
return HEHIPB;
}

public byte getHEHIPC() {
return HEHIPC;
}

public byte getHEHNO() {
return HEHNO;
}

public byte getHEHPA() {
return HEHPA;
}

public byte getHEHPB96() {
return HEHPB96;
}

public byte getHEHPBBR() {
return HEHPBBR;
}

public byte getHEHPBDA() {
return HEHPBDA;
}

public byte getHEHPBDL() {
return HEHPBDL;
}

public byte getHEHPBGD() {
return HEHPBGD;
}

public byte getHEHPBGS() {
return HEHPBGS;
}

public byte getHEHPBOR() {
return HEHPBOR;
}

public byte getHEHPBOT() {
return HEHPBOT;
}

public byte getHEHPBPA() {
return HEHPBPA;
}

public byte getHEHPBSI() {
return HEHPBSI;
}

public byte getHEHPBSL() {
return HEHPBSL;
}

public byte getHEHPBSO() {
return HEHPBSO;
}

public byte getHEHPBSP() {
return HEHPBSP;
}

public byte getHEHPC() {
return HEHPC;
}

public byte getHEHPD96() {
return HEHPD96;
}

public byte getHEHPDBR() {
return HEHPDBR;
}

public byte getHEHPDDA() {
return HEHPDDA;
}

public byte getHEHPDFR() {
return HEHPDFR;
}

public byte getHEHPDLA() {
return HEHPDLA;
}

public byte getHEHPDNU() {
return HEHPDNU;
}

public byte getHEHPDOR() {
return HEHPDOR;
}

public byte getHEHPDOT() {
return HEHPDOT;
}

public byte getHEHPDPP() {
return HEHPDPP;
}

public byte getHEHPDSI() {
return HEHPDSI;
}

public byte getHEHPDSO() {
return HEHPDSO;
}

public byte getHEHPDSP() {
return HEHPDSP;
}

public byte getHEHPDST() {
return HEHPDST;
}

public byte getHEHPH96() {
return HEHPH96;
}

public byte getHEHPHBR() {
return HEHPHBR;
}

public byte getHEHPHDA() {
return HEHPHDA;
}

public byte getHEHPHFR() {
return HEHPHFR;
}

public byte getHEHPHLA() {
return HEHPHLA;
}

public byte getHEHPHNU() {
return HEHPHNU;
}

public byte getHEHPHOR() {
return HEHPHOR;
}

public byte getHEHPHOT() {
return HEHPHOT;
}

public byte getHEHPHPP() {
return HEHPHPP;
}

public byte getHEHPHSI() {
return HEHPHSI;
}

public byte getHEHPHSO() {
return HEHPHSO;
}

public byte getHEHPHSP() {
return HEHPHSP;
}

public byte getHEHPHST() {
return HEHPHST;
}

public byte getHEHPLA() {
return HEHPLA;
}

public byte getHEHPM96() {
return HEHPM96;
}

public byte getHEHPMBR() {
return HEHPMBR;
}

public byte getHEHPMDA() {
return HEHPMDA;
}

public byte getHEHPMFR() {
return HEHPMFR;
}

public byte getHEHPMLA() {
return HEHPMLA;
}

public byte getHEHPMNU() {
return HEHPMNU;
}

public byte getHEHPMOR() {
return HEHPMOR;
}

public byte getHEHPMOT() {
return HEHPMOT;
}

public byte getHEHPMPP() {
return HEHPMPP;
}

public byte getHEHPMSI() {
return HEHPMSI;
}

public byte getHEHPMSO() {
return HEHPMSO;
}

public byte getHEHPMSP() {
return HEHPMSP;
}

public byte getHEHPMST() {
return HEHPMST;
}

public byte getHEHPP96() {
return HEHPP96;
}

public byte getHEHPPBR() {
return HEHPPBR;
}

public byte getHEHPPD() {
return HEHPPD;
}

public byte getHEHPPDA() {
return HEHPPDA;
}

public byte getHEHPPFR() {
return HEHPPFR;
}

public byte getHEHPPLA() {
return HEHPPLA;
}

public byte getHEHPPNU() {
return HEHPPNU;
}

public byte getHEHPPOR() {
return HEHPPOR;
}

public byte getHEHPPOT() {
return HEHPPOT;
}

public byte getHEHPPPP() {
return HEHPPPP;
}

public byte getHEHPPSI() {
return HEHPPSI;
}

public byte getHEHPPSO() {
return HEHPPSO;
}

public byte getHEHPPSP() {
return HEHPPSP;
}

public byte getHEHPPST() {
return HEHPPST;
}

public byte getHEHPS() {
return HEHPS;
}

public byte getHEHPS95() {
return HEHPS95;
}

public byte getHEHPS96() {
return HEHPS96;
}

public byte getHEHPSCH() {
return HEHPSCH;
}

public byte getHEHPSEX() {
return HEHPSEX;
}

public byte getHEHPSOT() {
return HEHPSOT;
}

public byte getHEHPT96() {
return HEHPT96;
}

public byte getHEHPTBR() {
return HEHPTBR;
}

public byte getHEHPTDA() {
return HEHPTDA;
}

public byte getHEHPTFR() {
return HEHPTFR;
}

public byte getHEHPTLA() {
return HEHPTLA;
}

public byte getHEHPTNU() {
return HEHPTNU;
}

public byte getHEHPTOR() {
return HEHPTOR;
}

public byte getHEHPTOT() {
return HEHPTOT;
}

public byte getHEHPTPP() {
return HEHPTPP;
}

public byte getHEHPTSI() {
return HEHPTSI;
}

public byte getHEHPTSO() {
return HEHPTSO;
}

public byte getHEHPTSP() {
return HEHPTSP;
}

public byte getHEHPTST() {
return HEHPTST;
}

public byte getHEHPW96() {
return HEHPW96;
}

public byte getHEHPWBR() {
return HEHPWBR;
}

public byte getHEHPWDA() {
return HEHPWDA;
}

public byte getHEHPWFR() {
return HEHPWFR;
}

public byte getHEHPWLA() {
return HEHPWLA;
}

public byte getHEHPWNU() {
return HEHPWNU;
}

public byte getHEHPWOR() {
return HEHPWOR;
}

public byte getHEHPWOT() {
return HEHPWOT;
}

public byte getHEHPWPP() {
return HEHPWPP;
}

public byte getHEHPWSI() {
return HEHPWSI;
}

public byte getHEHPWSO() {
return HEHPWSO;
}

public byte getHEHPWSP() {
return HEHPWSP;
}

public byte getHEHPWST() {
return HEHPWST;
}

public byte getHEHPY() {
return HEHPY;
}

public byte getHEHRT() {
return HEHRT;
}

public byte getHEHRTMD() {
return HEHRTMD;
}

public byte getHEHSM85() {
return HEHSM85;
}

public byte getHEHSM86() {
return HEHSM86;
}

public byte getHEHSM96() {
return HEHSM96;
}

public byte getHEHSMAC() {
return HEHSMAC;
}

public byte getHEHSMCH() {
return HEHSMCH;
}

public byte getHEHSMCR() {
return HEHSMCR;
}

public byte getHEHSMEX() {
return HEHSMEX;
}

public byte getHEHSMHY() {
return HEHSMHY;
}

public byte getHEHSMMA() {
return HEHSMMA;
}

public byte getHEHSMOS() {
return HEHSMOS;
}

public byte getHEHSMOT() {
return HEHSMOT;
}

public byte getHEHSMTH() {
return HEHSMTH;
}

public short getHEHST() {
return HEHST;
}

public byte getHEHSTA() {
return HEHSTA;
}

public byte getHEHYE() {
return HEHYE;
}

public short getHEHYY() {
return HEHYY;
}

public byte getHEHYYA() {
return HEHYYA;
}

public double getHEIGHT() {
return HEIGHT;
}

public byte getHEINCT() {
return HEINCT;
}

public byte getHEINCTA() {
return HEINCTA;
}

public byte getHEJIAA1() {
return HEJIAA1;
}

public byte getHEJIAA2() {
return HEJIAA2;
}

public byte getHEJIAA3() {
return HEJIAA3;
}

public byte getHEJIAA4() {
return HEJIAA4;
}

public byte getHEJIAA5() {
return HEJIAA5;
}

public byte getHEJIBLH() {
return HEJIBLH;
}

public byte getHEJIBLK() {
return HEJIBLK;
}

public byte getHEJIBRH() {
return HEJIBRH;
}

public byte getHEJIBRK() {
return HEJIBRK;
}

public byte getHEJION() {
return HEJION;
}

public byte getHEKIDN() {
return HEKIDN;
}

public byte getHEKNEA() {
return HEKNEA;
}

public byte getHEKNEB() {
return HEKNEB;
}

public byte getHEKNEC() {
return HEKNEC;
}

public byte getHEKNED() {
return HEKNED;
}

public byte getHEKNEF() {
return HEKNEF;
}

public byte getHELC() {
return HELC;
}

public byte getHELEUK() {
return HELEUK;
}

public byte getHELNGB() {
return HELNGB;
}

public byte getHELWK() {
return HELWK;
}

public byte getHEMDA1() {
return HEMDA1;
}

public byte getHEMDAB() {
return HEMDAB;
}

public byte getHEMEB() {
return HEMEB;
}

public byte getHEMEN() {
return HEMEN;
}

public byte getHEMW() {
return HEMW;
}

public byte getHEMWCOV() {
return HEMWCOV;
}

public byte getHEMWM85() {
return HEMWM85;
}

public byte getHEMWM86() {
return HEMWM86;
}

public byte getHEMWM95() {
return HEMWM95;
}

public byte getHEMWMCH() {
return HEMWMCH;
}

public byte getHEMWMFA() {
return HEMWMFA;
}

public byte getHEMWMFR() {
return HEMWMFR;
}

public byte getHEMWMLL() {
return HEMWMLL;
}

public byte getHEMWMNHS() {
return HEMWMNHS;
}

public byte getHEMWMSE() {
return HEMWMSE;
}

public byte getHEMWMSS() {
return HEMWMSS;
}

public byte getHEMWNHS() {
return HEMWNHS;
}

public byte getHEMWOT() {
return HEMWOT;
}

public byte getHEMWSE() {
return HEMWSE;
}

public byte getHEMWSS() {
return HEMWSS;
}

public byte getHENMMI() {
return HENMMI;
}

public byte getHENMST() {
return HENMST;
}

public byte getHEOPCCA() {
return HEOPCCA;
}

public byte getHEOPCDI() {
return HEOPCDI;
}

public byte getHEOPCGL() {
return HEOPCGL;
}

public byte getHEOPCMD() {
return HEOPCMD;
}

public byte getHEOPFCA() {
return HEOPFCA;
}

public byte getHEOPFDI() {
return HEOPFDI;
}

public byte getHEOPFGL() {
return HEOPFGL;
}

public byte getHEOPFMD() {
return HEOPFMD;
}

public byte getHEOPNCA() {
return HEOPNCA;
}

public byte getHEOPNDI() {
return HEOPNDI;
}

public byte getHEOPNGL() {
return HEOPNGL;
}

public byte getHEOPNMD() {
return HEOPNMD;
}

public byte getHEOPSCA() {
return HEOPSCA;
}

public byte getHEOPSDI() {
return HEOPSDI;
}

public byte getHEOPSGL() {
return HEOPSGL;
}

public byte getHEOPSMD() {
return HEOPSMD;
}

public byte getHEOPT96() {
return HEOPT96;
}

public byte getHEOPTCA() {
return HEOPTCA;
}

public byte getHEOPTDI() {
return HEOPTDI;
}

public byte getHEOPTGL() {
return HEOPTGL;
}

public byte getHEOPTMD() {
return HEOPTMD;
}

public byte getHEOVE() {
return HEOVE;
}

public short getHEOVY() {
return HEOVY;
}

public byte getHEOVYA() {
return HEOVYA;
}

public byte getHEPAB() {
return HEPAB;
}

public byte getHEPAB1() {
return HEPAB1;
}

public byte getHEPAG() {
return HEPAG;
}

public byte getHEPAH() {
return HEPAH;
}

public byte getHEPAI() {
return HEPAI;
}

public byte getHEPAJ() {
return HEPAJ;
}

public byte getHEPAK3() {
return HEPAK3;
}

public byte getHEPAWAL() {
return HEPAWAL;
}

public byte getHEPAWBA() {
return HEPAWBA;
}

public byte getHEPAWFE() {
return HEPAWFE;
}

public byte getHEPAWHI() {
return HEPAWHI;
}

public byte getHEPAWKN() {
return HEPAWKN;
}

public byte getHEPAWMO() {
return HEPAWMO;
}

public byte getHEPAWOT() {
return HEPAWOT;
}

public byte getHEPDIACA() {
return HEPDIACA;
}

public byte getHEPDIADI() {
return HEPDIADI;
}

public byte getHEPDIAGL() {
return HEPDIAGL;
}

public byte getHEPDIAMD() {
return HEPDIAMD;
}

public byte getHEPEA() {
return HEPEA;
}

public byte getHEPEE() {
return HEPEE;
}

public byte getHEPER() {
return HEPER;
}

public short getHEPEY() {
return HEPEY;
}

public byte getHEPMED() {
return HEPMED;
}

public byte getHEPORTH() {
return HEPORTH;
}

public byte getHEPRKR() {
return HEPRKR;
}

public short getHEPRKRY() {
return HEPRKRY;
}

public byte getHEPSUR() {
return HEPSUR;
}

public byte getHEPSY95() {
return HEPSY95;
}

public byte getHEPSYA() {
return HEPSYA;
}

public byte getHEPSYAN() {
return HEPSYAN;
}

public byte getHEPSYB() {
return HEPSYB;
}

public byte getHEPSYDE() {
return HEPSYDE;
}

public byte getHEPSYE() {
return HEPSYE;
}

public byte getHEPSYEM() {
return HEPSYEM;
}

public byte getHEPSYHA() {
return HEPSYHA;
}

public byte getHEPSYMA() {
return HEPSYMA;
}

public byte getHEPSYMO() {
return HEPSYMO;
}

public byte getHEPSYPS() {
return HEPSYPS;
}

public byte getHEPSYSC() {
return HEPSYSC;
}

public byte getHEROSMD() {
return HEROSMD;
}

public byte getHERPA() {
return HERPA;
}

public byte getHERPB() {
return HERPB;
}

public byte getHERPC() {
return HERPC;
}

public byte getHERPD() {
return HERPD;
}

public byte getHERPE() {
return HERPE;
}

public byte getHERPE1() {
return HERPE1;
}

public byte getHERPF() {
return HERPF;
}

public byte getHERPG() {
return HERPG;
}

public byte getHERPH() {
return HERPH;
}

public byte getHERPI() {
return HERPI;
}

public byte getHERPJ() {
return HERPJ;
}

public byte getHESKD() {
return HESKD;
}

public byte getHESKE() {
return HESKE;
}

public byte getHESKF() {
return HESKF;
}

public byte getHESLFCB() {
return HESLFCB;
}

public byte getHESLFCM() {
return HESLFCM;
}

public byte getHESLFCR() {
return HESLFCR;
}

public short getHESLFCY() {
return HESLFCY;
}

public byte getHESLPA() {
return HESLPA;
}

public byte getHESLPB() {
return HESLPB;
}

public byte getHESLPD() {
return HESLPD;
}

public double getHESLPE() {
return HESLPE;
}

public byte getHESLPF() {
return HESLPF;
}

public byte getHESTOP() {
return HESTOP;
}

public byte getHESUG() {
return HESUG;
}

public byte getHESUGA() {
return HESUGA;
}

public byte getHETEMP() {
return HETEMP;
}

public byte getHEWEE() {
return HEWEE;
}

public byte getHEWEEA() {
return HEWEEA;
}

public boolean getHEZICOV() {
return HEZICOV;
}

public byte getHEZIM85() {
return HEZIM85;
}

public byte getHEZIM86() {
return HEZIM86;
}

public byte getHEZIMCH() {
return HEZIMCH;
}

public byte getHEZIMFA() {
return HEZIMFA;
}

public byte getHEZIMFR() {
return HEZIMFR;
}

public byte getHEZIMLL() {
return HEZIMLL;
}

public byte getHEZIMNHS() {
return HEZIMNHS;
}

public byte getHEZIMOT() {
return HEZIMOT;
}

public byte getHEZIMSE() {
return HEZIMSE;
}

public byte getHEZIMSS() {
return HEZIMSS;
}

public byte getHEZINHS() {
return HEZINHS;
}

public byte getHEZIOT() {
return HEZIOT;
}

public byte getHEZISE() {
return HEZISE;
}

public byte getHEZISS() {
return HEZISS;
}

public double getHGB() {
return HGB;
}

public byte getHHAGE() {
return HHAGE;
}

public byte getHINREL() {
return HINREL;
}

public double getHIP1() {
return HIP1;
}

public double getHIP2() {
return HIP2;
}

public double getHIP3() {
return HIP3;
}

public byte getHIPOKB() {
return HIPOKB;
}

public double getHIPVAL() {
return HIPVAL;
}

public byte getHJREL() {
return HJREL;
}

public byte getHOADP95() {
return HOADP95;
}

public byte getHOADP96() {
return HOADP96;
}

public byte getHOADPAD() {
return HOADPAD;
}

public byte getHOADPAL() {
return HOADPAL;
}

public byte getHOADPAP() {
return HOADPAP;
}

public byte getHOADPBM() {
return HOADPBM;
}

public byte getHOADPCL() {
return HOADPCL;
}

public byte getHOADPHR() {
return HOADPHR;
}

public byte getHOADPKM() {
return HOADPKM;
}

public byte getHOADPLI() {
return HOADPLI;
}

public byte getHOADPRS() {
return HOADPRS;
}

public byte getHOADPWD() {
return HOADPWD;
}

public byte getHOAIADHS() {
return HOAIADHS;
}

public byte getHOAIADOT() {
return HOAIADOT;
}

public byte getHOAIADSS() {
return HOAIADSS;
}

public byte getHOAIADYS() {
return HOAIADYS;
}

public byte getHOAIALHS() {
return HOAIALHS;
}

public byte getHOAIALOT() {
return HOAIALOT;
}

public byte getHOAIALSS() {
return HOAIALSS;
}

public byte getHOAIALYS() {
return HOAIALYS;
}

public byte getHOAIAPHS() {
return HOAIAPHS;
}

public byte getHOAIAPOT() {
return HOAIAPOT;
}

public byte getHOAIAPSS() {
return HOAIAPSS;
}

public byte getHOAIAPYS() {
return HOAIAPYS;
}

public byte getHOAIBMHS() {
return HOAIBMHS;
}

public byte getHOAIBMOT() {
return HOAIBMOT;
}

public byte getHOAIBMSS() {
return HOAIBMSS;
}

public byte getHOAIBMYS() {
return HOAIBMYS;
}

public byte getHOAICLHS() {
return HOAICLHS;
}

public byte getHOAICLOT() {
return HOAICLOT;
}

public byte getHOAICLSS() {
return HOAICLSS;
}

public byte getHOAICLYS() {
return HOAICLYS;
}

public byte getHOAIHRHS() {
return HOAIHRHS;
}

public byte getHOAIHROT() {
return HOAIHROT;
}

public byte getHOAIHRSS() {
return HOAIHRSS;
}

public byte getHOAIHRYS() {
return HOAIHRYS;
}

public byte getHOAIKMHS() {
return HOAIKMHS;
}

public byte getHOAIKMOT() {
return HOAIKMOT;
}

public byte getHOAIKMSS() {
return HOAIKMSS;
}

public byte getHOAIKMYS() {
return HOAIKMYS;
}

public byte getHOAILIHS() {
return HOAILIHS;
}

public byte getHOAILIOT() {
return HOAILIOT;
}

public byte getHOAILISS() {
return HOAILISS;
}

public byte getHOAILIYS() {
return HOAILIYS;
}

public byte getHOAIRSHS() {
return HOAIRSHS;
}

public byte getHOAIRSOT() {
return HOAIRSOT;
}

public byte getHOAIRSSS() {
return HOAIRSSS;
}

public byte getHOAIRSYS() {
return HOAIRSYS;
}

public byte getHOAIWDHS() {
return HOAIWDHS;
}

public byte getHOAIWDOT() {
return HOAIWDOT;
}

public byte getHOAIWDSS() {
return HOAIWDSS;
}

public byte getHOAIWDYS() {
return HOAIWDYS;
}

public byte getHOALF1() {
return HOALF1;
}

public short getHOALF1L() {
return HOALF1L;
}

public byte getHOALF1R() {
return HOALF1R;
}

public byte getHOALF1T() {
return HOALF1T;
}

public short getHOALF1U() {
return HOALF1U;
}

public byte getHOALF2() {
return HOALF2;
}

public short getHOALF2L() {
return HOALF2L;
}

public byte getHOALF2R() {
return HOALF2R;
}

public byte getHOALF2T() {
return HOALF2T;
}

public short getHOALF2U() {
return HOALF2U;
}

public short getHOALFM1() {
return HOALFM1;
}

public short getHOALFM2() {
return HOALFM2;
}

public byte getHOALI1() {
return HOALI1;
}

public byte getHOALI2() {
return HOALI2;
}

public byte getHOBA2FE() {
return HOBA2FE;
}

public byte getHOBA2FL() {
return HOBA2FL;
}

public byte getHOBA2FR() {
return HOBA2FR;
}

public byte getHOBA2FU() {
return HOBA2FU;
}

public byte getHOBA2ME() {
return HOBA2ME;
}

public byte getHOBA2ML() {
return HOBA2ML;
}

public byte getHOBA2MR() {
return HOBA2MR;
}

public byte getHOBA2MU() {
return HOBA2MU;
}

public byte getHOBA2OE() {
return HOBA2OE;
}

public short getHOBA2OL() {
return HOBA2OL;
}

public byte getHOBA2OR() {
return HOBA2OR;
}

public short getHOBA2OU() {
return HOBA2OU;
}

public byte getHOBA2WE() {
return HOBA2WE;
}

public byte getHOBA2WL() {
return HOBA2WL;
}

public byte getHOBA2WR() {
return HOBA2WR;
}

public byte getHOBA2WU() {
return HOBA2WU;
}

public byte getHOBA2YE() {
return HOBA2YE;
}

public byte getHOBA2YL() {
return HOBA2YL;
}

public byte getHOBA2YR() {
return HOBA2YR;
}

public byte getHOBA2YU() {
return HOBA2YU;
}

public byte getHOBA3FE() {
return HOBA3FE;
}

public byte getHOBA3FL() {
return HOBA3FL;
}

public byte getHOBA3FR() {
return HOBA3FR;
}

public byte getHOBA3FU() {
return HOBA3FU;
}

public byte getHOBA3ME() {
return HOBA3ME;
}

public short getHOBA3ML() {
return HOBA3ML;
}

public byte getHOBA3MR() {
return HOBA3MR;
}

public short getHOBA3MU() {
return HOBA3MU;
}

public byte getHOBA3OE() {
return HOBA3OE;
}

public short getHOBA3OL() {
return HOBA3OL;
}

public byte getHOBA3OR() {
return HOBA3OR;
}

public short getHOBA3OU() {
return HOBA3OU;
}

public byte getHOBA3WE() {
return HOBA3WE;
}

public byte getHOBA3WL() {
return HOBA3WL;
}

public byte getHOBA3WR() {
return HOBA3WR;
}

public short getHOBA3WU() {
return HOBA3WU;
}

public byte getHOBA3YE() {
return HOBA3YE;
}

public byte getHOBA3YL() {
return HOBA3YL;
}

public byte getHOBA3YR() {
return HOBA3YR;
}

public byte getHOBA3YU() {
return HOBA3YU;
}

public byte getHOBA4FE() {
return HOBA4FE;
}

public byte getHOBA4FL() {
return HOBA4FL;
}

public byte getHOBA4FR() {
return HOBA4FR;
}

public byte getHOBA4FU() {
return HOBA4FU;
}

public byte getHOBA4ME() {
return HOBA4ME;
}

public short getHOBA4ML() {
return HOBA4ML;
}

public byte getHOBA4MR() {
return HOBA4MR;
}

public short getHOBA4MU() {
return HOBA4MU;
}

public byte getHOBA4OE() {
return HOBA4OE;
}

public short getHOBA4OL() {
return HOBA4OL;
}

public byte getHOBA4OR() {
return HOBA4OR;
}

public short getHOBA4OU() {
return HOBA4OU;
}

public byte getHOBA4WE() {
return HOBA4WE;
}

public short getHOBA4WL() {
return HOBA4WL;
}

public byte getHOBA4WR() {
return HOBA4WR;
}

public short getHOBA4WU() {
return HOBA4WU;
}

public byte getHOBA4YE() {
return HOBA4YE;
}

public byte getHOBA4YL() {
return HOBA4YL;
}

public byte getHOBA4YR() {
return HOBA4YR;
}

public byte getHOBA4YU() {
return HOBA4YU;
}

public byte getHOBA5FE() {
return HOBA5FE;
}

public byte getHOBA5FL() {
return HOBA5FL;
}

public byte getHOBA5FR() {
return HOBA5FR;
}

public byte getHOBA5FU() {
return HOBA5FU;
}

public byte getHOBA5ME() {
return HOBA5ME;
}

public short getHOBA5ML() {
return HOBA5ML;
}

public byte getHOBA5MR() {
return HOBA5MR;
}

public short getHOBA5MU() {
return HOBA5MU;
}

public byte getHOBA5OE() {
return HOBA5OE;
}

public byte getHOBA5OL() {
return HOBA5OL;
}

public byte getHOBA5OR() {
return HOBA5OR;
}

public byte getHOBA5OU() {
return HOBA5OU;
}

public byte getHOBA5WE() {
return HOBA5WE;
}

public byte getHOBA5WL() {
return HOBA5WL;
}

public byte getHOBA5WR() {
return HOBA5WR;
}

public byte getHOBA5WU() {
return HOBA5WU;
}

public byte getHOBA5YE() {
return HOBA5YE;
}

public byte getHOBA5YL() {
return HOBA5YL;
}

public byte getHOBA5YR() {
return HOBA5YR;
}

public byte getHOBA5YU() {
return HOBA5YU;
}

public byte getHOBA6FE() {
return HOBA6FE;
}

public byte getHOBA6FL() {
return HOBA6FL;
}

public byte getHOBA6FR() {
return HOBA6FR;
}

public byte getHOBA6FU() {
return HOBA6FU;
}

public byte getHOBA6ME() {
return HOBA6ME;
}

public byte getHOBA6ML() {
return HOBA6ML;
}

public byte getHOBA6MR() {
return HOBA6MR;
}

public byte getHOBA6MU() {
return HOBA6MU;
}

public byte getHOBA6OE() {
return HOBA6OE;
}

public byte getHOBA6OL() {
return HOBA6OL;
}

public byte getHOBA6OR() {
return HOBA6OR;
}

public byte getHOBA6OU() {
return HOBA6OU;
}

public byte getHOBA6WE() {
return HOBA6WE;
}

public byte getHOBA6WL() {
return HOBA6WL;
}

public byte getHOBA6WR() {
return HOBA6WR;
}

public byte getHOBA6WU() {
return HOBA6WU;
}

public byte getHOBA6YE() {
return HOBA6YE;
}

public byte getHOBA6YL() {
return HOBA6YL;
}

public byte getHOBA6YR() {
return HOBA6YR;
}

public byte getHOBA6YU() {
return HOBA6YU;
}

public byte getHOBA7FE() {
return HOBA7FE;
}

public byte getHOBA7FL() {
return HOBA7FL;
}

public byte getHOBA7FR() {
return HOBA7FR;
}

public byte getHOBA7FU() {
return HOBA7FU;
}

public byte getHOBA7ME() {
return HOBA7ME;
}

public byte getHOBA7ML() {
return HOBA7ML;
}

public byte getHOBA7MR() {
return HOBA7MR;
}

public byte getHOBA7MU() {
return HOBA7MU;
}

public byte getHOBA7OE() {
return HOBA7OE;
}

public byte getHOBA7OL() {
return HOBA7OL;
}

public byte getHOBA7OR() {
return HOBA7OR;
}

public byte getHOBA7OU() {
return HOBA7OU;
}

public byte getHOBA7WE() {
return HOBA7WE;
}

public byte getHOBA7WL() {
return HOBA7WL;
}

public byte getHOBA7WR() {
return HOBA7WR;
}

public byte getHOBA7WU() {
return HOBA7WU;
}

public byte getHOBA7YE() {
return HOBA7YE;
}

public byte getHOBA7YL() {
return HOBA7YL;
}

public byte getHOBA7YR() {
return HOBA7YR;
}

public byte getHOBA7YU() {
return HOBA7YU;
}

public byte getHOBA8FE() {
return HOBA8FE;
}

public byte getHOBA8FL() {
return HOBA8FL;
}

public byte getHOBA8FR() {
return HOBA8FR;
}

public byte getHOBA8FU() {
return HOBA8FU;
}

public byte getHOBA8ME() {
return HOBA8ME;
}

public byte getHOBA8ML() {
return HOBA8ML;
}

public byte getHOBA8MR() {
return HOBA8MR;
}

public byte getHOBA8MU() {
return HOBA8MU;
}

public byte getHOBA8OE() {
return HOBA8OE;
}

public byte getHOBA8OL() {
return HOBA8OL;
}

public byte getHOBA8OR() {
return HOBA8OR;
}

public byte getHOBA8OU() {
return HOBA8OU;
}

public byte getHOBA8WE() {
return HOBA8WE;
}

public byte getHOBA8WL() {
return HOBA8WL;
}

public byte getHOBA8WR() {
return HOBA8WR;
}

public byte getHOBA8WU() {
return HOBA8WU;
}

public byte getHOBA8YE() {
return HOBA8YE;
}

public byte getHOBA8YL() {
return HOBA8YL;
}

public byte getHOBA8YR() {
return HOBA8YR;
}

public byte getHOBA8YU() {
return HOBA8YU;
}

public byte getHOBA9FE() {
return HOBA9FE;
}

public byte getHOBA9FL() {
return HOBA9FL;
}

public byte getHOBA9FR() {
return HOBA9FR;
}

public byte getHOBA9FU() {
return HOBA9FU;
}

public byte getHOBA9ME() {
return HOBA9ME;
}

public byte getHOBA9ML() {
return HOBA9ML;
}

public byte getHOBA9MR() {
return HOBA9MR;
}

public byte getHOBA9MU() {
return HOBA9MU;
}

public byte getHOBA9OE() {
return HOBA9OE;
}

public byte getHOBA9OL() {
return HOBA9OL;
}

public byte getHOBA9OR() {
return HOBA9OR;
}

public byte getHOBA9OU() {
return HOBA9OU;
}

public byte getHOBA9WE() {
return HOBA9WE;
}

public byte getHOBA9WL() {
return HOBA9WL;
}

public byte getHOBA9WR() {
return HOBA9WR;
}

public byte getHOBA9WU() {
return HOBA9WU;
}

public byte getHOBA9YE() {
return HOBA9YE;
}

public byte getHOBA9YL() {
return HOBA9YL;
}

public byte getHOBA9YR() {
return HOBA9YR;
}

public byte getHOBA9YU() {
return HOBA9YU;
}

public byte getHOBAFE() {
return HOBAFE;
}

public byte getHOBAFL() {
return HOBAFL;
}

public byte getHOBAFR() {
return HOBAFR;
}

public byte getHOBAFU() {
return HOBAFU;
}

public byte getHOBAME() {
return HOBAME;
}

public short getHOBAML() {
return HOBAML;
}

public byte getHOBAMR() {
return HOBAMR;
}

public short getHOBAMU() {
return HOBAMU;
}

public byte getHOBAOE() {
return HOBAOE;
}

public short getHOBAOL() {
return HOBAOL;
}

public byte getHOBAOR() {
return HOBAOR;
}

public short getHOBAOU() {
return HOBAOU;
}

public byte getHOBAWE() {
return HOBAWE;
}

public short getHOBAWL() {
return HOBAWL;
}

public byte getHOBAWR() {
return HOBAWR;
}

public byte getHOBAWU() {
return HOBAWU;
}

public byte getHOBAYE() {
return HOBAYE;
}

public byte getHOBAYL() {
return HOBAYL;
}

public byte getHOBAYR() {
return HOBAYR;
}

public short getHOBAYU() {
return HOBAYU;
}

public byte getHOCC01() {
return HOCC01;
}

public byte getHOCC02() {
return HOCC02;
}

public byte getHOCC03() {
return HOCC03;
}

public byte getHOCC04() {
return HOCC04;
}

public byte getHOCC05() {
return HOCC05;
}

public byte getHOCC06() {
return HOCC06;
}

public byte getHOCC07() {
return HOCC07;
}

public byte getHOCC08() {
return HOCC08;
}

public byte getHOCC09() {
return HOCC09;
}

public byte getHOCC10() {
return HOCC10;
}

public byte getHOCC11() {
return HOCC11;
}

public byte getHOCC12() {
return HOCC12;
}

public byte getHOCC13() {
return HOCC13;
}

public byte getHOCC14() {
return HOCC14;
}

public byte getHOCC15() {
return HOCC15;
}

public byte getHOCC16() {
return HOCC16;
}

public byte getHOCC17() {
return HOCC17;
}

public byte getHOCC18() {
return HOCC18;
}

public byte getHOCC19() {
return HOCC19;
}

public byte getHOCC20() {
return HOCC20;
}

public byte getHOCENP() {
return HOCENP;
}

public short getHOCL() {
return HOCL;
}

public byte getHOCLE() {
return HOCLE;
}

public short getHOCLL() {
return HOCLL;
}

public byte getHOCLR() {
return HOCLR;
}

public short getHOCLU() {
return HOCLU;
}

public byte getHOCO() {
return HOCO;
}

public byte getHOCTA() {
return HOCTA;
}

public byte getHOCTF() {
return HOCTF;
}

public int getHOCTFA() {
return HOCTFA;
}

public byte getHOCTFAE() {
return HOCTFAE;
}

public short getHOCTFAL() {
return HOCTFAL;
}

public byte getHOCTFAR() {
return HOCTFAR;
}

public short getHOCTFAU() {
return HOCTFAU;
}

public byte getHOCTFW() {
return HOCTFW;
}

public byte getHODISC() {
return HODISC;
}

public byte getHOEB() {
return HOEB;
}

public short getHOEBMS() {
return HOEBMS;
}

public byte getHOEBMSE() {
return HOEBMSE;
}

public byte getHOEBMSL() {
return HOEBMSL;
}

public byte getHOEBMSR() {
return HOEBMSR;
}

public byte getHOEBMSU() {
return HOEBMSU;
}

public short getHOEBMW() {
return HOEBMW;
}

public byte getHOEBMWE() {
return HOEBMWE;
}

public byte getHOEBMWL() {
return HOEBMWL;
}

public byte getHOEBMWR() {
return HOEBMWR;
}

public byte getHOEBMWU() {
return HOEBMWU;
}

public short getHOEBQS() {
return HOEBQS;
}

public byte getHOEBQSE() {
return HOEBQSE;
}

public short getHOEBQSL() {
return HOEBQSL;
}

public byte getHOEBQSR() {
return HOEBQSR;
}

public short getHOEBQSU() {
return HOEBQSU;
}

public short getHOEBQW() {
return HOEBQW;
}

public byte getHOEBQWE() {
return HOEBQWE;
}

public short getHOEBQWL() {
return HOEBQWL;
}

public byte getHOEBQWR() {
return HOEBQWR;
}

public short getHOEBQWU() {
return HOEBQWU;
}

public byte getHOED() {
return HOED;
}

public short getHOEDM() {
return HOEDM;
}

public byte getHOEDME() {
return HOEDME;
}

public byte getHOEDML() {
return HOEDML;
}

public byte getHOEDMR() {
return HOEDMR;
}

public byte getHOEDMU() {
return HOEDMU;
}

public short getHOEDQ() {
return HOEDQ;
}

public byte getHOEDQE() {
return HOEDQE;
}

public short getHOEDQL() {
return HOEDQL;
}

public byte getHOEDQR() {
return HOEDQR;
}

public short getHOEDQU() {
return HOEDQU;
}

public byte getHOEOS() {
return HOEOS;
}

public byte getHOEOSE() {
return HOEOSE;
}

public byte getHOEOSL() {
return HOEOSL;
}

public byte getHOEOSR() {
return HOEOSR;
}

public byte getHOEOSU() {
return HOEOSU;
}

public byte getHOEOW() {
return HOEOW;
}

public byte getHOEOWE() {
return HOEOWE;
}

public byte getHOEOWL() {
return HOEOWL;
}

public byte getHOEOWR() {
return HOEOWR;
}

public byte getHOEOWU() {
return HOEOWU;
}

public byte getHOEPAY() {
return HOEPAY;
}

public byte getHOEPS() {
return HOEPS;
}

public byte getHOEPSE() {
return HOEPSE;
}

public byte getHOEPSL() {
return HOEPSL;
}

public byte getHOEPSR() {
return HOEPSR;
}

public byte getHOEPSU() {
return HOEPSU;
}

public byte getHOEPW() {
return HOEPW;
}

public byte getHOEPWE() {
return HOEPWE;
}

public byte getHOEPWL() {
return HOEPWL;
}

public byte getHOEPWR() {
return HOEPWR;
}

public byte getHOEPWU() {
return HOEPWU;
}

public byte getHOFB() {
return HOFB;
}

public short getHOFBMS() {
return HOFBMS;
}

public byte getHOFBMSE() {
return HOFBMSE;
}

public byte getHOFBMSL() {
return HOFBMSL;
}

public byte getHOFBMSR() {
return HOFBMSR;
}

public byte getHOFBMSU() {
return HOFBMSU;
}

public short getHOFBMW() {
return HOFBMW;
}

public byte getHOFBMWE() {
return HOFBMWE;
}

public byte getHOFBMWL() {
return HOFBMWL;
}

public byte getHOFBMWR() {
return HOFBMWR;
}

public byte getHOFBMWU() {
return HOFBMWU;
}

public short getHOFBQS() {
return HOFBQS;
}

public byte getHOFBQSE() {
return HOFBQSE;
}

public short getHOFBQSL() {
return HOFBQSL;
}

public byte getHOFBQSR() {
return HOFBQSR;
}

public short getHOFBQSU() {
return HOFBQSU;
}

public short getHOFBQW() {
return HOFBQW;
}

public byte getHOFBQWE() {
return HOFBQWE;
}

public short getHOFBQWL() {
return HOFBQWL;
}

public byte getHOFBQWR() {
return HOFBQWR;
}

public short getHOFBQWU() {
return HOFBQWU;
}

public byte getHOFCS() {
return HOFCS;
}

public byte getHOFCSE() {
return HOFCSE;
}

public byte getHOFCSL() {
return HOFCSL;
}

public byte getHOFCSR() {
return HOFCSR;
}

public byte getHOFCSU() {
return HOFCSU;
}

public byte getHOFCW() {
return HOFCW;
}

public byte getHOFCWE() {
return HOFCWE;
}

public byte getHOFCWL() {
return HOFCWL;
}

public byte getHOFCWR() {
return HOFCWR;
}

public byte getHOFCWU() {
return HOFCWU;
}

public byte getHOFD() {
return HOFD;
}

public short getHOFDM() {
return HOFDM;
}

public byte getHOFDME() {
return HOFDME;
}

public byte getHOFDML() {
return HOFDML;
}

public byte getHOFDMR() {
return HOFDMR;
}

public byte getHOFDMU() {
return HOFDMU;
}

public short getHOFDQ() {
return HOFDQ;
}

public byte getHOFDQE() {
return HOFDQE;
}

public short getHOFDQL() {
return HOFDQL;
}

public byte getHOFDQR() {
return HOFDQR;
}

public short getHOFDQU() {
return HOFDQU;
}

public byte getHOFOIS() {
return HOFOIS;
}

public byte getHOFOISE() {
return HOFOISE;
}

public byte getHOFOISL() {
return HOFOISL;
}

public byte getHOFOISR() {
return HOFOISR;
}

public byte getHOFOISU() {
return HOFOISU;
}

public byte getHOFOIW() {
return HOFOIW;
}

public byte getHOFOIWE() {
return HOFOIWE;
}

public byte getHOFOIWL() {
return HOFOIWL;
}

public byte getHOFOIWR() {
return HOFOIWR;
}

public byte getHOFOIWU() {
return HOFOIWU;
}

public byte getHOFOODE() {
return HOFOODE;
}

public short getHOFOODL() {
return HOFOODL;
}

public byte getHOFOODR() {
return HOFOODR;
}

public short getHOFOODU() {
return HOFOODU;
}

public byte getHOFOS() {
return HOFOS;
}

public byte getHOFOSE() {
return HOFOSE;
}

public byte getHOFOSL() {
return HOFOSL;
}

public byte getHOFOSR() {
return HOFOSR;
}

public byte getHOFOSU() {
return HOFOSU;
}

public byte getHOFOW() {
return HOFOW;
}

public byte getHOFOWE() {
return HOFOWE;
}

public byte getHOFOWL() {
return HOFOWL;
}

public byte getHOFOWR() {
return HOFOWR;
}

public byte getHOFOWU() {
return HOFOWU;
}

public byte getHOFPAY() {
return HOFPAY;
}

public byte getHOFPGS() {
return HOFPGS;
}

public byte getHOFPGSE() {
return HOFPGSE;
}

public byte getHOFPGSL() {
return HOFPGSL;
}

public byte getHOFPGSR() {
return HOFPGSR;
}

public byte getHOFPGSU() {
return HOFPGSU;
}

public byte getHOFPGW() {
return HOFPGW;
}

public byte getHOFPGWE() {
return HOFPGWE;
}

public byte getHOFPGWL() {
return HOFPGWL;
}

public byte getHOFPGWR() {
return HOFPGWR;
}

public byte getHOFPGWU() {
return HOFPGWU;
}

public byte getHOFPS() {
return HOFPS;
}

public byte getHOFPSE() {
return HOFPSE;
}

public byte getHOFPSL() {
return HOFPSL;
}

public byte getHOFPSR() {
return HOFPSR;
}

public byte getHOFPSU() {
return HOFPSU;
}

public byte getHOFPW() {
return HOFPW;
}

public byte getHOFPWE() {
return HOFPWE;
}

public byte getHOFPWL() {
return HOFPWL;
}

public byte getHOFPWR() {
return HOFPWR;
}

public byte getHOFPWU() {
return HOFPWU;
}

public short getHOFSM() {
return HOFSM;
}

public byte getHOFSME() {
return HOFSME;
}

public byte getHOFSML() {
return HOFSML;
}

public byte getHOFSMR() {
return HOFSMR;
}

public byte getHOFSMU() {
return HOFSMU;
}

public byte getHOFSP() {
return HOFSP;
}

public byte getHOFSQ() {
return HOFSQ;
}

public byte getHOFSQE() {
return HOFSQE;
}

public byte getHOFSQL() {
return HOFSQL;
}

public byte getHOFSQR() {
return HOFSQR;
}

public byte getHOFSQU() {
return HOFSQU;
}

public byte getHOFSUP() {
return HOFSUP;
}

public short getHOFSW() {
return HOFSW;
}

public byte getHOFSWE() {
return HOFSWE;
}

public byte getHOFSWL() {
return HOFSWL;
}

public byte getHOFSWR() {
return HOFSWR;
}

public byte getHOFSWU() {
return HOFSWU;
}

public byte getHOFTOG() {
return HOFTOG;
}

public byte getHOFUEL95() {
return HOFUEL95;
}

public byte getHOFUELCO() {
return HOFUELCO;
}

public byte getHOFUELEL() {
return HOFUELEL;
}

public byte getHOFUELGA() {
return HOFUELGA;
}

public byte getHOFUELM1() {
return HOFUELM1;
}

public byte getHOFUELM2() {
return HOFUELM2;
}

public byte getHOFUELM3() {
return HOFUELM3;
}

public byte getHOFUELM4() {
return HOFUELM4;
}

public byte getHOFUELM5() {
return HOFUELM5;
}

public byte getHOFUELM6() {
return HOFUELM6;
}

public byte getHOFUELM8() {
return HOFUELM8;
}

public boolean getHOFUELM9() {
return HOFUELM9;
}

public byte getHOFUELOI() {
return HOFUELOI;
}

public byte getHOFUELPA() {
return HOFUELPA;
}

public byte getHOFUELWO() {
return HOFUELWO;
}

public byte getHOFWS() {
return HOFWS;
}

public byte getHOFWSE() {
return HOFWSE;
}

public byte getHOFWSL() {
return HOFWSL;
}

public byte getHOFWSR() {
return HOFWSR;
}

public byte getHOFWSU() {
return HOFWSU;
}

public byte getHOFWW() {
return HOFWW;
}

public byte getHOFWWE() {
return HOFWWE;
}

public byte getHOFWWL() {
return HOFWWL;
}

public byte getHOFWWR() {
return HOFWWR;
}

public byte getHOFWWU() {
return HOFWWU;
}

public byte getHOFXS() {
return HOFXS;
}

public byte getHOFXSE() {
return HOFXSE;
}

public byte getHOFXSL() {
return HOFXSL;
}

public byte getHOFXSR() {
return HOFXSR;
}

public byte getHOFXSU() {
return HOFXSU;
}

public byte getHOFXW() {
return HOFXW;
}

public byte getHOFXWE() {
return HOFXWE;
}

public byte getHOFXWL() {
return HOFXWL;
}

public byte getHOFXWR() {
return HOFXWR;
}

public byte getHOFXWU() {
return HOFXWU;
}

public short getHOGBMS() {
return HOGBMS;
}

public byte getHOGBMSE() {
return HOGBMSE;
}

public byte getHOGBMSL() {
return HOGBMSL;
}

public byte getHOGBMSR() {
return HOGBMSR;
}

public byte getHOGBMSU() {
return HOGBMSU;
}

public short getHOGBMW() {
return HOGBMW;
}

public byte getHOGBMWE() {
return HOGBMWE;
}

public byte getHOGBMWL() {
return HOGBMWL;
}

public byte getHOGBMWR() {
return HOGBMWR;
}

public byte getHOGBMWU() {
return HOGBMWU;
}

public byte getHOGBP() {
return HOGBP;
}

public short getHOGBQS() {
return HOGBQS;
}

public byte getHOGBQSE() {
return HOGBQSE;
}

public short getHOGBQSL() {
return HOGBQSL;
}

public byte getHOGBQSR() {
return HOGBQSR;
}

public short getHOGBQSU() {
return HOGBQSU;
}

public short getHOGBQW() {
return HOGBQW;
}

public byte getHOGBQWE() {
return HOGBQWE;
}

public short getHOGBQWL() {
return HOGBQWL;
}

public byte getHOGBQWR() {
return HOGBQWR;
}

public short getHOGBQWU() {
return HOGBQWU;
}

public byte getHOGD() {
return HOGD;
}

public short getHOGDM() {
return HOGDM;
}

public byte getHOGDME() {
return HOGDME;
}

public byte getHOGDML() {
return HOGDML;
}

public byte getHOGDMR() {
return HOGDMR;
}

public byte getHOGDMU() {
return HOGDMU;
}

public short getHOGDQ() {
return HOGDQ;
}

public byte getHOGDQE() {
return HOGDQE;
}

public short getHOGDQL() {
return HOGDQL;
}

public byte getHOGDQR() {
return HOGDQR;
}

public short getHOGDQU() {
return HOGDQU;
}

public byte getHOGOS() {
return HOGOS;
}

public byte getHOGOSE() {
return HOGOSE;
}

public byte getHOGOSL() {
return HOGOSL;
}

public byte getHOGOSR() {
return HOGOSR;
}

public byte getHOGOSU() {
return HOGOSU;
}

public byte getHOGOW() {
return HOGOW;
}

public byte getHOGOWE() {
return HOGOWE;
}

public byte getHOGOWL() {
return HOGOWL;
}

public byte getHOGOWR() {
return HOGOWR;
}

public byte getHOGOWU() {
return HOGOWU;
}

public byte getHOGPAY() {
return HOGPAY;
}

public byte getHOGPS() {
return HOGPS;
}

public byte getHOGPSE() {
return HOGPSE;
}

public byte getHOGPSL() {
return HOGPSL;
}

public byte getHOGPSR() {
return HOGPSR;
}

public byte getHOGPSU() {
return HOGPSU;
}

public byte getHOGPW() {
return HOGPW;
}

public byte getHOGPWE() {
return HOGPWE;
}

public byte getHOGPWL() {
return HOGPWL;
}

public byte getHOGPWR() {
return HOGPWR;
}

public byte getHOGPWU() {
return HOGPWU;
}

public byte getHOHAV95() {
return HOHAV95;
}

public byte getHOHAV96() {
return HOHAV96;
}

public byte getHOHAVB95() {
return HOHAVB95;
}

public byte getHOHAVB96() {
return HOHAVB96;
}

public byte getHOHAVBCD() {
return HOHAVBCD;
}

public byte getHOHAVBDT() {
return HOHAVBDT;
}

public byte getHOHAVBDV() {
return HOHAVBDV;
}

public byte getHOHAVBDW() {
return HOHAVBDW;
}

public byte getHOHAVBFF() {
return HOHAVBFF;
}

public byte getHOHAVBMO() {
return HOHAVBMO;
}

public byte getHOHAVBPC() {
return HOHAVBPC;
}

public byte getHOHAVBPH() {
return HOHAVBPH;
}

public byte getHOHAVBTV() {
return HOHAVBTV;
}

public byte getHOHAVBVR() {
return HOHAVBVR;
}

public byte getHOHAVBWD() {
return HOHAVBWD;
}

public byte getHOHAVBWM() {
return HOHAVBWM;
}

public byte getHOHAVCD() {
return HOHAVCD;
}

public byte getHOHAVDT() {
return HOHAVDT;
}

public byte getHOHAVDV() {
return HOHAVDV;
}

public byte getHOHAVDW() {
return HOHAVDW;
}

public byte getHOHAVFF() {
return HOHAVFF;
}

public byte getHOHAVMO() {
return HOHAVMO;
}

public byte getHOHAVPC() {
return HOHAVPC;
}

public byte getHOHAVPH() {
return HOHAVPH;
}

public byte getHOHAVTV() {
return HOHAVTV;
}

public byte getHOHAVVR() {
return HOHAVVR;
}

public byte getHOHAVWD() {
return HOHAVWD;
}

public byte getHOHAVWM() {
return HOHAVWM;
}

public byte getHOHB95() {
return HOHB95;
}

public byte getHOHB96() {
return HOHB96;
}

public short getHOHBA() {
return HOHBA;
}

public byte getHOHBAFE() {
return HOHBAFE;
}

public byte getHOHBAFL() {
return HOHBAFL;
}

public byte getHOHBAFR() {
return HOHBAFR;
}

public byte getHOHBAFU() {
return HOHBAFU;
}

public byte getHOHBAME() {
return HOHBAME;
}

public short getHOHBAML() {
return HOHBAML;
}

public byte getHOHBAMR() {
return HOHBAMR;
}

public short getHOHBAMU() {
return HOHBAMU;
}

public byte getHOHBAOE() {
return HOHBAOE;
}

public byte getHOHBAOL() {
return HOHBAOL;
}

public byte getHOHBAOR() {
return HOHBAOR;
}

public short getHOHBAOU() {
return HOHBAOU;
}

public byte getHOHBAWE() {
return HOHBAWE;
}

public byte getHOHBAWL() {
return HOHBAWL;
}

public byte getHOHBAWR() {
return HOHBAWR;
}

public byte getHOHBAWU() {
return HOHBAWU;
}

public byte getHOHBAYE() {
return HOHBAYE;
}

public byte getHOHBAYL() {
return HOHBAYL;
}

public byte getHOHBAYR() {
return HOHBAYR;
}

public byte getHOHBAYU() {
return HOHBAYU;
}

public byte getHOHBCK() {
return HOHBCK;
}

public byte getHOHBCL() {
return HOHBCL;
}

public byte getHOHBEN() {
return HOHBEN;
}

public byte getHOHBGA() {
return HOHBGA;
}

public byte getHOHBM85() {
return HOHBM85;
}

public byte getHOHBM86() {
return HOHBM86;
}

public boolean getHOHBM95() {
return HOHBM95;
}

public byte getHOHBM96() {
return HOHBM96;
}

public byte getHOHBMCL() {
return HOHBMCL;
}

public byte getHOHBME() {
return HOHBME;
}

public byte getHOHBMGA() {
return HOHBMGA;
}

public byte getHOHBMME() {
return HOHBMME;
}

public byte getHOHBMSG() {
return HOHBMSG;
}

public byte getHOHBMWP() {
return HOHBMWP;
}

public byte getHOHBP() {
return HOHBP;
}

public byte getHOHBSG() {
return HOHBSG;
}

public byte getHOHBWP() {
return HOHBWP;
}

public byte getHOHEA95() {
return HOHEA95;
}

public byte getHOHEA96() {
return HOHEA96;
}

public byte getHOHEAEF() {
return HOHEAEF;
}

public byte getHOHEAGF() {
return HOHEAGF;
}

public byte getHOHEAM85() {
return HOHEAM85;
}

public byte getHOHEAM86() {
return HOHEAM86;
}

public byte getHOHEAM96() {
return HOHEAM96;
}

public byte getHOHEAMEF() {
return HOHEAMEF;
}

public byte getHOHEAMGF() {
return HOHEAMGF;
}

public byte getHOHEAMOF() {
return HOHEAMOF;
}

public byte getHOHEAMPH() {
return HOHEAMPH;
}

public byte getHOHEAOF() {
return HOHEAOF;
}

public byte getHOHEAPH() {
return HOHEAPH;
}

public short getHOHV01() {
return HOHV01;
}

public byte getHOHV01E() {
return HOHV01E;
}

public short getHOHV01L() {
return HOHV01L;
}

public byte getHOHV01R() {
return HOHV01R;
}

public short getHOHV01U() {
return HOHV01U;
}

public short getHOHV02() {
return HOHV02;
}

public byte getHOHV02E() {
return HOHV02E;
}

public short getHOHV02L() {
return HOHV02L;
}

public byte getHOHV02R() {
return HOHV02R;
}

public short getHOHV02U() {
return HOHV02U;
}

public short getHOHV03() {
return HOHV03;
}

public byte getHOHV03E() {
return HOHV03E;
}

public short getHOHV03L() {
return HOHV03L;
}

public byte getHOHV03R() {
return HOHV03R;
}

public short getHOHV03U() {
return HOHV03U;
}

public short getHOHV04() {
return HOHV04;
}

public byte getHOHV04E() {
return HOHV04E;
}

public short getHOHV04L() {
return HOHV04L;
}

public byte getHOHV04R() {
return HOHV04R;
}

public short getHOHV04U() {
return HOHV04U;
}

public short getHOHV05() {
return HOHV05;
}

public byte getHOHV05E() {
return HOHV05E;
}

public short getHOHV05L() {
return HOHV05L;
}

public byte getHOHV05R() {
return HOHV05R;
}

public short getHOHV05U() {
return HOHV05U;
}

public short getHOHV06() {
return HOHV06;
}

public byte getHOHV06E() {
return HOHV06E;
}

public short getHOHV06L() {
return HOHV06L;
}

public byte getHOHV06R() {
return HOHV06R;
}

public short getHOHV06U() {
return HOHV06U;
}

public short getHOHV07() {
return HOHV07;
}

public byte getHOHV07E() {
return HOHV07E;
}

public short getHOHV07L() {
return HOHV07L;
}

public byte getHOHV07R() {
return HOHV07R;
}

public short getHOHV07U() {
return HOHV07U;
}

public short getHOHV08() {
return HOHV08;
}

public byte getHOHV08E() {
return HOHV08E;
}

public short getHOHV08L() {
return HOHV08L;
}

public byte getHOHV08R() {
return HOHV08R;
}

public short getHOHV08U() {
return HOHV08U;
}

public short getHOHV09() {
return HOHV09;
}

public byte getHOHV09E() {
return HOHV09E;
}

public short getHOHV09L() {
return HOHV09L;
}

public byte getHOHV09R() {
return HOHV09R;
}

public short getHOHV09U() {
return HOHV09U;
}

public short getHOHV10() {
return HOHV10;
}

public byte getHOHV10E() {
return HOHV10E;
}

public short getHOHV10L() {
return HOHV10L;
}

public byte getHOHV10R() {
return HOHV10R;
}

public short getHOHV10U() {
return HOHV10U;
}

public short getHOHV11() {
return HOHV11;
}

public byte getHOHV11E() {
return HOHV11E;
}

public short getHOHV11L() {
return HOHV11L;
}

public byte getHOHV11R() {
return HOHV11R;
}

public short getHOHV11U() {
return HOHV11U;
}

public short getHOHV12() {
return HOHV12;
}

public byte getHOHV12E() {
return HOHV12E;
}

public short getHOHV12L() {
return HOHV12L;
}

public byte getHOHV12R() {
return HOHV12R;
}

public short getHOHV12U() {
return HOHV12U;
}

public byte getHOINA95() {
return HOINA95;
}

public byte getHOINA96() {
return HOINA96;
}

public byte getHOINACL() {
return HOINACL;
}

public byte getHOINAGD() {
return HOINAGD;
}

public byte getHOINAM85() {
return HOINAM85;
}

public byte getHOINAM86() {
return HOINAM86;
}

public byte getHOINAM95() {
return HOINAM95;
}

public byte getHOINAM96() {
return HOINAM96;
}

public byte getHOINAMCL() {
return HOINAMCL;
}

public byte getHOINAME() {
return HOINAME;
}

public byte getHOINAMGD() {
return HOINAMGD;
}

public byte getHOINAMME() {
return HOINAMME;
}

public byte getHOINAMSG() {
return HOINAMSG;
}

public byte getHOINAMWP() {
return HOINAMWP;
}

public byte getHOINASG() {
return HOINASG;
}

public byte getHOINAWP() {
return HOINAWP;
}

public byte getHOINC96() {
return HOINC96;
}

public byte getHOINCBI() {
return HOINCBI;
}

public byte getHOINCL96() {
return HOINCL96;
}

public byte getHOINCLCO() {
return HOINCLCO;
}

public byte getHOINCLGA() {
return HOINCLGA;
}

public byte getHOINCLHE() {
return HOINCLHE;
}

public byte getHOINCLLA() {
return HOINCLLA;
}

public byte getHOINCLSE() {
return HOINCLSE;
}

public byte getHOINCLWA() {
return HOINCLWA;
}

public byte getHOINCM85() {
return HOINCM85;
}

public byte getHOINCM86() {
return HOINCM86;
}

public byte getHOINCM96() {
return HOINCM96;
}

public byte getHOINCMBI() {
return HOINCMBI;
}

public byte getHOINCMOT() {
return HOINCMOT;
}

public byte getHOINCMPI() {
return HOINCMPI;
}

public byte getHOINCMPP() {
return HOINCMPP;
}

public byte getHOINCOT() {
return HOINCOT;
}

public byte getHOINCPI() {
return HOINCPI;
}

public byte getHOINCPP() {
return HOINCPP;
}

public short getHOLEIS() {
return HOLEIS;
}

public byte getHOLEISE() {
return HOLEISE;
}

public short getHOLEISL() {
return HOLEISL;
}

public byte getHOLEISR() {
return HOLEISR;
}

public short getHOLEISU() {
return HOLEISU;
}

public int getHOMEXA1E() {
return HOMEXA1E;
}

public short getHOMEXA2E() {
return HOMEXA2E;
}

public boolean getHOMEXA3E() {
return HOMEXA3E;
}

public boolean getHOMEXA4E() {
return HOMEXA4E;
}

public boolean getHOMEXA5E() {
return HOMEXA5E;
}

public boolean getHOMEXE1E() {
return HOMEXE1E;
}

public boolean getHOMEXE2E() {
return HOMEXE2E;
}

public boolean getHOMEXE3E() {
return HOMEXE3E;
}

public boolean getHOMEXE4E() {
return HOMEXE4E;
}

public boolean getHOMEXE5E() {
return HOMEXE5E;
}

public int getHOMEXL1E() {
return HOMEXL1E;
}

public boolean getHOMEXL2E() {
return HOMEXL2E;
}

public boolean getHOMEXL3E() {
return HOMEXL3E;
}

public boolean getHOMEXL4E() {
return HOMEXL4E;
}

public boolean getHOMEXL5E() {
return HOMEXL5E;
}

public byte getHOMEXR1E() {
return HOMEXR1E;
}

public boolean getHOMEXR2E() {
return HOMEXR2E;
}

public boolean getHOMEXR3E() {
return HOMEXR3E;
}

public boolean getHOMEXR4E() {
return HOMEXR4E;
}

public boolean getHOMEXR5E() {
return HOMEXR5E;
}

public byte getHOMEXT1E() {
return HOMEXT1E;
}

public byte getHOMEXT2E() {
return HOMEXT2E;
}

public boolean getHOMEXT3E() {
return HOMEXT3E;
}

public boolean getHOMEXT4E() {
return HOMEXT4E;
}

public boolean getHOMEXT5E() {
return HOMEXT5E;
}

public boolean getHOMEXU1E() {
return HOMEXU1E;
}

public boolean getHOMEXU2E() {
return HOMEXU2E;
}

public boolean getHOMEXU3E() {
return HOMEXU3E;
}

public boolean getHOMEXU4E() {
return HOMEXU4E;
}

public boolean getHOMEXU5E() {
return HOMEXU5E;
}

public byte getHOMFV1A() {
return HOMFV1A;
}

public byte getHOMFV1E() {
return HOMFV1E;
}

public byte getHOMFV1M() {
return HOMFV1M;
}

public byte getHOMFV1N() {
return HOMFV1N;
}

public boolean getHOMFV2A() {
return HOMFV2A;
}

public byte getHOMFV2E() {
return HOMFV2E;
}

public boolean getHOMFV2M() {
return HOMFV2M;
}

public byte getHOMFV2N() {
return HOMFV2N;
}

public boolean getHOMFV3E() {
return HOMFV3E;
}

public byte getHOMFV3N() {
return HOMFV3N;
}

public boolean getHOMFV4E() {
return HOMFV4E;
}

public boolean getHOMFV4N() {
return HOMFV4N;
}

public boolean getHOMFV5E() {
return HOMFV5E;
}

public boolean getHOMFV5N() {
return HOMFV5N;
}

public short getHOMINC() {
return HOMINC;
}

public boolean getHOMINCE() {
return HOMINCE;
}

public boolean getHOMINCL() {
return HOMINCL;
}

public boolean getHOMINCR() {
return HOMINCR;
}

public boolean getHOMINCU() {
return HOMINCU;
}

public byte getHOMM851E() {
return HOMM851E;
}

public boolean getHOMM852E() {
return HOMM852E;
}

public boolean getHOMM853E() {
return HOMM853E;
}

public boolean getHOMM854E() {
return HOMM854E;
}

public boolean getHOMM855E() {
return HOMM855E;
}

public byte getHOMM861E() {
return HOMM861E;
}

public boolean getHOMM862E() {
return HOMM862E;
}

public boolean getHOMM863E() {
return HOMM863E;
}

public boolean getHOMM864E() {
return HOMM864E;
}

public boolean getHOMM865E() {
return HOMM865E;
}

public byte getHOMMCP1E() {
return HOMMCP1E;
}

public byte getHOMMCP2E() {
return HOMMCP2E;
}

public boolean getHOMMCP3E() {
return HOMMCP3E;
}

public boolean getHOMMCP4E() {
return HOMMCP4E;
}

public boolean getHOMMCP5E() {
return HOMMCP5E;
}

public byte getHOMMHE1E() {
return HOMMHE1E;
}

public boolean getHOMMHE2E() {
return HOMMHE2E;
}

public boolean getHOMMHE3E() {
return HOMMHE3E;
}

public boolean getHOMMHE4E() {
return HOMMHE4E;
}

public boolean getHOMMHE5E() {
return HOMMHE5E;
}

public byte getHOMMHI1E() {
return HOMMHI1E;
}

public boolean getHOMMHI2E() {
return HOMMHI2E;
}

public boolean getHOMMHI3E() {
return HOMMHI3E;
}

public boolean getHOMMHI4E() {
return HOMMHI4E;
}

public boolean getHOMMHI5E() {
return HOMMHI5E;
}

public byte getHOMMIS() {
return HOMMIS;
}

public byte getHOMMISN() {
return HOMMISN;
}

public byte getHOMMOC1E() {
return HOMMOC1E;
}

public boolean getHOMMOC2E() {
return HOMMOC2E;
}

public boolean getHOMMOC3E() {
return HOMMOC3E;
}

public boolean getHOMMOC4E() {
return HOMMOC4E;
}

public boolean getHOMMOC5E() {
return HOMMOC5E;
}

public byte getHOMMOT1E() {
return HOMMOT1E;
}

public boolean getHOMMOT2E() {
return HOMMOT2E;
}

public boolean getHOMMOT3E() {
return HOMMOT3E;
}

public boolean getHOMMOT4E() {
return HOMMOT4E;
}

public boolean getHOMMOT5E() {
return HOMMOT5E;
}

public byte getHOMN961A() {
return HOMN961A;
}

public boolean getHOMNCP1A() {
return HOMNCP1A;
}

public int getHOMNEA1A() {
return HOMNEA1A;
}

public byte getHOMNEE1A() {
return HOMNEE1A;
}

public int getHOMNEL1A() {
return HOMNEL1A;
}

public byte getHOMNER1A() {
return HOMNER1A;
}

public short getHOMNEU1A() {
return HOMNEU1A;
}

public byte getHOMNEW() {
return HOMNEW;
}

public byte getHOMNEWN() {
return HOMNEWN;
}

public byte getHOMNHE1A() {
return HOMNHE1A;
}

public byte getHOMNHI1A() {
return HOMNHI1A;
}

public byte getHOMNOC1A() {
return HOMNOC1A;
}

public byte getHOMNOT1A() {
return HOMNOT1A;
}

public byte getHOMNRE1A() {
return HOMNRE1A;
}

public byte getHOMNUM() {
return HOMNUM;
}

public byte getHOMREA1E() {
return HOMREA1E;
}

public boolean getHOMREA2E() {
return HOMREA2E;
}

public boolean getHOMREA3E() {
return HOMREA3E;
}

public boolean getHOMREA4E() {
return HOMREA4E;
}

public boolean getHOMREA5E() {
return HOMREA5E;
}

public byte getHOMREPE() {
return HOMREPE;
}

public short getHOMREPL() {
return HOMREPL;
}

public byte getHOMREPR() {
return HOMREPR;
}

public short getHOMREPU() {
return HOMREPU;
}

public byte getHOMSAM1E() {
return HOMSAM1E;
}

public byte getHOMSAM2E() {
return HOMSAM2E;
}

public byte getHOMSAM3E() {
return HOMSAM3E;
}

public byte getHOMSAM4E() {
return HOMSAM4E;
}

public boolean getHOMSAM5E() {
return HOMSAM5E;
}

public byte getHOMTY1A() {
return HOMTY1A;
}

public byte getHOMTY1M() {
return HOMTY1M;
}

public byte getHOMTY1N() {
return HOMTY1N;
}

public boolean getHOMTY2A() {
return HOMTY2A;
}

public boolean getHOMTY2M() {
return HOMTY2M;
}

public byte getHOMTY2N() {
return HOMTY2N;
}

public byte getHOMTY3N() {
return HOMTY3N;
}

public boolean getHOMTY4N() {
return HOMTY4N;
}

public boolean getHOMTY5N() {
return HOMTY5N;
}

public byte getHOMUCP1E() {
return HOMUCP1E;
}

public byte getHOMUCP2E() {
return HOMUCP2E;
}

public boolean getHOMUCP3E() {
return HOMUCP3E;
}

public boolean getHOMUCP4E() {
return HOMUCP4E;
}

public boolean getHOMUCP5E() {
return HOMUCP5E;
}

public byte getHOMUHE1E() {
return HOMUHE1E;
}

public boolean getHOMUHE2E() {
return HOMUHE2E;
}

public boolean getHOMUHE3E() {
return HOMUHE3E;
}

public boolean getHOMUHE4E() {
return HOMUHE4E;
}

public boolean getHOMUHE5E() {
return HOMUHE5E;
}

public byte getHOMUHI1E() {
return HOMUHI1E;
}

public boolean getHOMUHI2E() {
return HOMUHI2E;
}

public boolean getHOMUHI3E() {
return HOMUHI3E;
}

public boolean getHOMUHI4E() {
return HOMUHI4E;
}

public boolean getHOMUHI5E() {
return HOMUHI5E;
}

public byte getHOMUOC1E() {
return HOMUOC1E;
}

public boolean getHOMUOC2E() {
return HOMUOC2E;
}

public boolean getHOMUOC3E() {
return HOMUOC3E;
}

public boolean getHOMUOC4E() {
return HOMUOC4E;
}

public boolean getHOMUOC5E() {
return HOMUOC5E;
}

public byte getHOMUOT1E() {
return HOMUOT1E;
}

public boolean getHOMUOT2E() {
return HOMUOT2E;
}

public boolean getHOMUOT3E() {
return HOMUOT3E;
}

public boolean getHOMUOT4E() {
return HOMUOT4E;
}

public boolean getHOMUOT5E() {
return HOMUOT5E;
}

public byte getHOOHEM95() {
return HOOHEM95;
}

public byte getHOOUTFE() {
return HOOUTFE;
}

public short getHOOUTFL() {
return HOOUTFL;
}

public byte getHOOUTFR() {
return HOOUTFR;
}

public short getHOOUTFU() {
return HOOUTFU;
}

public byte getHOPAYE() {
return HOPAYE;
}

public int getHOPAYL() {
return HOPAYL;
}

public byte getHOPAYR() {
return HOPAYR;
}

public int getHOPAYU() {
return HOPAYU;
}

public byte getHOPRO95() {
return HOPRO95;
}

public byte getHOPRO96() {
return HOPRO96;
}

public byte getHOPROCO() {
return HOPROCO;
}

public byte getHOPROCP() {
return HOPROCP;
}

public byte getHOPRODK() {
return HOPRODK;
}

public byte getHOPROEP() {
return HOPROEP;
}

public byte getHOPROIN() {
return HOPROIN;
}

public byte getHOPROM85() {
return HOPROM85;
}

public byte getHOPROM86() {
return HOPROM86;
}

public byte getHOPROM95() {
return HOPROM95;
}

public byte getHOPROM96() {
return HOPROM96;
}

public byte getHOPROMCO() {
return HOPROMCO;
}

public byte getHOPROMCP() {
return HOPROMCP;
}

public byte getHOPROMDK() {
return HOPROMDK;
}

public byte getHOPROMEP() {
return HOPROMEP;
}

public byte getHOPROMIN() {
return HOPROMIN;
}

public byte getHOPROMNZ() {
return HOPROMNZ;
}

public byte getHOPROMPO() {
return HOPROMPO;
}

public byte getHOPROMRD() {
return HOPROMRD;
}

public byte getHOPROMRO() {
return HOPROMRO;
}

public byte getHOPROMSN() {
return HOPROMSN;
}

public byte getHOPROMSP() {
return HOPROMSP;
}

public byte getHOPROMST() {
return HOPROMST;
}

public byte getHOPROMVA() {
return HOPROMVA;
}

public byte getHOPROMWA() {
return HOPROMWA;
}

public byte getHOPRONZ() {
return HOPRONZ;
}

public byte getHOPROPO() {
return HOPROPO;
}

public byte getHOPRORD() {
return HOPRORD;
}

public byte getHOPRORO() {
return HOPRORO;
}

public byte getHOPROSN() {
return HOPROSN;
}

public byte getHOPROSP() {
return HOPROSP;
}

public byte getHOPROWA() {
return HOPROWA;
}

public byte getHOREBFE() {
return HOREBFE;
}

public short getHOREBFL() {
return HOREBFL;
}

public byte getHOREBFR() {
return HOREBFR;
}

public short getHOREBFU() {
return HOREBFU;
}

public byte getHOREBME() {
return HOREBME;
}

public short getHOREBML() {
return HOREBML;
}

public byte getHOREBMR() {
return HOREBMR;
}

public short getHOREBMU() {
return HOREBMU;
}

public byte getHOREBOE() {
return HOREBOE;
}

public short getHOREBOL() {
return HOREBOL;
}

public byte getHOREBOR() {
return HOREBOR;
}

public short getHOREBOU() {
return HOREBOU;
}

public byte getHOREBWE() {
return HOREBWE;
}

public short getHOREBWL() {
return HOREBWL;
}

public byte getHOREBWR() {
return HOREBWR;
}

public short getHOREBWU() {
return HOREBWU;
}

public byte getHOREBYE() {
return HOREBYE;
}

public short getHOREBYL() {
return HOREBYL;
}

public byte getHOREBYR() {
return HOREBYR;
}

public byte getHOREBYU() {
return HOREBYU;
}

public byte getHORET() {
return HORET;
}

public byte getHORFEE1() {
return HORFEE1;
}

public byte getHORFEE2() {
return HORFEE2;
}

public byte getHORFEP1() {
return HORFEP1;
}

public boolean getHORFEP2() {
return HORFEP2;
}

public byte getHORHB() {
return HORHB;
}

public byte getHORIN96() {
return HORIN96;
}

public byte getHORIN97() {
return HORIN97;
}

public byte getHORINHI() {
return HORINHI;
}

public byte getHORINHR() {
return HORINHR;
}

public short getHORINM() {
return HORINM;
}

public byte getHORINM85() {
return HORINM85;
}

public byte getHORINM86() {
return HORINM86;
}

public byte getHORINM96() {
return HORINM96;
}

public byte getHORINM97() {
return HORINM97;
}

public byte getHORINME() {
return HORINME;
}

public byte getHORINMHI() {
return HORINMHI;
}

public byte getHORINMHR() {
return HORINMHR;
}

public short getHORINML() {
return HORINML;
}

public boolean getHORINMOT() {
return HORINMOT;
}

public byte getHORINMPA() {
return HORINMPA;
}

public byte getHORINMR() {
return HORINMR;
}

public short getHORINMU() {
return HORINMU;
}

public byte getHORINOT() {
return HORINOT;
}

public byte getHORINPA() {
return HORINPA;
}

public byte getHORMAIN() {
return HORMAIN;
}

public byte getHORMO1A() {
return HORMO1A;
}

public byte getHORMO1M() {
return HORMO1M;
}

public byte getHORMO1N() {
return HORMO1N;
}

public boolean getHORMO2A() {
return HORMO2A;
}

public boolean getHORMO2M() {
return HORMO2M;
}

public byte getHORMO2N() {
return HORMO2N;
}

public byte getHORMO3N() {
return HORMO3N;
}

public boolean getHORMO4N() {
return HORMO4N;
}

public boolean getHORMO5N() {
return HORMO5N;
}

public byte getHORMO85() {
return HORMO85;
}

public byte getHORMO86() {
return HORMO86;
}

public boolean getHORMOFE() {
return HORMOFE;
}

public boolean getHORMOFL() {
return HORMOFL;
}

public byte getHORMOFP() {
return HORMOFP;
}

public boolean getHORMOFR() {
return HORMOFR;
}

public boolean getHORMOFU() {
return HORMOFU;
}

public int getHORMOL() {
return HORMOL;
}

public byte getHORMOLA() {
return HORMOLA;
}

public byte getHORMOLE() {
return HORMOLE;
}

public int getHORMOLL() {
return HORMOLL;
}

public byte getHORMOLR() {
return HORMOLR;
}

public int getHORMOLU() {
return HORMOLU;
}

public byte getHORMOM85() {
return HORMOM85;
}

public byte getHORMOM86() {
return HORMOM86;
}

public byte getHORMOMBA() {
return HORMOMBA;
}

public byte getHORMOMBQ() {
return HORMOMBQ;
}

public boolean getHORMOME() {
return HORMOME;
}

public byte getHORMOMFP() {
return HORMOMFP;
}

public boolean getHORMOML() {
return HORMOML;
}

public byte getHORMOMLA() {
return HORMOMLA;
}

public byte getHORMOMNS() {
return HORMOMNS;
}

public boolean getHORMOMR() {
return HORMOMR;
}

public byte getHORMOMSH() {
return HORMOMSH;
}

public byte getHORMOMSM() {
return HORMOMSM;
}

public boolean getHORMOMU() {
return HORMOMU;
}

public boolean getHORMOOE() {
return HORMOOE;
}

public boolean getHORMOOL() {
return HORMOOL;
}

public boolean getHORMOOR() {
return HORMOOR;
}

public byte getHORMOOT() {
return HORMOOT;
}

public boolean getHORMOOU() {
return HORMOOU;
}

public byte getHORMOSH() {
return HORMOSH;
}

public byte getHORMOSM() {
return HORMOSM;
}

public boolean getHORMOWE() {
return HORMOWE;
}

public boolean getHORMOWL() {
return HORMOWL;
}

public boolean getHORMOWR() {
return HORMOWR;
}

public boolean getHORMOWU() {
return HORMOWU;
}

public boolean getHORMOYE() {
return HORMOYE;
}

public boolean getHORMOYL() {
return HORMOYL;
}

public boolean getHORMOYR() {
return HORMOYR;
}

public boolean getHORMOYU() {
return HORMOYU;
}

public byte getHORMS() {
return HORMS;
}

public short getHORMU() {
return HORMU;
}

public boolean getHORMUFE() {
return HORMUFE;
}

public boolean getHORMUFL() {
return HORMUFL;
}

public boolean getHORMUFR() {
return HORMUFR;
}

public boolean getHORMUFU() {
return HORMUFU;
}

public boolean getHORMUME() {
return HORMUME;
}

public boolean getHORMUML() {
return HORMUML;
}

public boolean getHORMUMR() {
return HORMUMR;
}

public boolean getHORMUMU() {
return HORMUMU;
}

public boolean getHORMUO() {
return HORMUO;
}

public boolean getHORMUOE() {
return HORMUOE;
}

public boolean getHORMUOL() {
return HORMUOL;
}

public boolean getHORMUOR() {
return HORMUOR;
}

public boolean getHORMUOU() {
return HORMUOU;
}

public boolean getHORMUWE() {
return HORMUWE;
}

public boolean getHORMUWL() {
return HORMUWL;
}

public boolean getHORMUWR() {
return HORMUWR;
}

public boolean getHORMUWU() {
return HORMUWU;
}

public boolean getHORMUYE() {
return HORMUYE;
}

public boolean getHORMUYL() {
return HORMUYL;
}

public boolean getHORMUYR() {
return HORMUYR;
}

public boolean getHORMUYU() {
return HORMUYU;
}

public byte getHORMV95() {
return HORMV95;
}

public byte getHORMVBA() {
return HORMVBA;
}

public byte getHORMVBO() {
return HORMVBO;
}

public byte getHORMVER() {
return HORMVER;
}

public byte getHORMVHR() {
return HORMVHR;
}

public byte getHORMVIF() {
return HORMVIF;
}

public byte getHORMVJR() {
return HORMVJR;
}

public byte getHORMVMAB() {
return HORMVMAB;
}

public byte getHORMVMBA() {
return HORMVMBA;
}

public byte getHORMVMBO() {
return HORMVMBO;
}

public byte getHORMVMER() {
return HORMVMER;
}

public byte getHORMVMHR() {
return HORMVMHR;
}

public byte getHORMVMIF() {
return HORMVMIF;
}

public byte getHORMVMJR() {
return HORMVMJR;
}

public byte getHORMVMMS() {
return HORMVMMS;
}

public byte getHORMVMNF() {
return HORMVMNF;
}

public byte getHORMVMNH() {
return HORMVMNH;
}

public byte getHORMVMNJ() {
return HORMVMNJ;
}

public byte getHORMVMOF() {
return HORMVMOF;
}

public byte getHORMVMPC() {
return HORMVMPC;
}

public byte getHORMVMPN() {
return HORMVMPN;
}

public byte getHORMVMS() {
return HORMVMS;
}

public byte getHORMVMSP() {
return HORMVMSP;
}

public byte getHORMVNF() {
return HORMVNF;
}

public byte getHORMVNJ() {
return HORMVNJ;
}

public byte getHORMVOF() {
return HORMVOF;
}

public byte getHORMVPN() {
return HORMVPN;
}

public byte getHORMVSP() {
return HORMVSP;
}

public byte getHORPAY() {
return HORPAY;
}

public byte getHORPC() {
return HORPC;
}

public int getHORPCM() {
return HORPCM;
}

public boolean getHORPCME() {
return HORPCME;
}

public boolean getHORPCML() {
return HORPCML;
}

public boolean getHORPCMR() {
return HORPCMR;
}

public boolean getHORPCMU() {
return HORPCMU;
}

public int getHORPM() {
return HORPM;
}

public byte getHORPME() {
return HORPME;
}

public short getHORPML() {
return HORPML;
}

public byte getHORPMR() {
return HORPMR;
}

public int getHORPMU() {
return HORPMU;
}

public boolean getHORPOF() {
return HORPOF;
}

public boolean getHORPOFO() {
return HORPOFO;
}

public byte getHORPOS() {
return HORPOS;
}

public boolean getHORPOSO() {
return HORPOSO;
}

public boolean getHORRM() {
return HORRM;
}

public boolean getHORRME() {
return HORRME;
}

public boolean getHORRML() {
return HORRML;
}

public boolean getHORRMR() {
return HORRMR;
}

public boolean getHORRMU() {
return HORRMU;
}

public byte getHOSELL() {
return HOSELL;
}

public byte getHOSELLE() {
return HOSELLE;
}

public int getHOSELLL() {
return HOSELLL;
}

public byte getHOSELLR() {
return HOSELLR;
}

public int getHOSELLU() {
return HOSELLU;
}

public double getHOSOLD() {
return HOSOLD;
}

public byte getHOSOLDE() {
return HOSOLDE;
}

public int getHOSOLDL() {
return HOSOLDL;
}

public byte getHOSOLDR() {
return HOSOLDR;
}

public int getHOSOLDU() {
return HOSOLDU;
}

public byte getHOTENST() {
return HOTENST;
}

public short getHOTRABCH() {
return HOTRABCH;
}

public int getHOTRABGC() {
return HOTRABGC;
}

public short getHOTRABNR() {
return HOTRABNR;
}

public int getHOTRABOC() {
return HOTRABOC;
}

public int getHOTRABOR() {
return HOTRABOR;
}

public int getHOTRAN() {
return HOTRAN;
}

public byte getHOTRANCH() {
return HOTRANCH;
}

public byte getHOTRANE() {
return HOTRANE;
}

public byte getHOTRANGC() {
return HOTRANGC;
}

public short getHOTRANL() {
return HOTRANL;
}

public byte getHOTRANNR() {
return HOTRANNR;
}

public byte getHOTRANOC() {
return HOTRANOC;
}

public byte getHOTRANOR() {
return HOTRANOR;
}

public byte getHOTRANR() {
return HOTRANR;
}

public short getHOTRANU() {
return HOTRANU;
}

public byte getHOTRAPCH() {
return HOTRAPCH;
}

public byte getHOTRAPGC() {
return HOTRAPGC;
}

public byte getHOTRAPNR() {
return HOTRAPNR;
}

public byte getHOTRAPOC() {
return HOTRAPOC;
}

public byte getHOTRAPOR() {
return HOTRAPOR;
}

public byte getHOTRPA() {
return HOTRPA;
}

public byte getHOV() {
return HOV;
}

public byte getHOVAG11() {
return HOVAG11;
}

public byte getHOVAG12() {
return HOVAG12;
}

public byte getHOVAG13() {
return HOVAG13;
}

public byte getHOVAG14() {
return HOVAG14;
}

public byte getHOVAG15() {
return HOVAG15;
}

public byte getHOVAG16() {
return HOVAG16;
}

public int getHOVE1A() {
return HOVE1A;
}

public int getHOVE1E() {
return HOVE1E;
}

public boolean getHOVE1M() {
return HOVE1M;
}

public int getHOVE1N() {
return HOVE1N;
}

public boolean getHOVE2A() {
return HOVE2A;
}

public short getHOVE2E() {
return HOVE2E;
}

public boolean getHOVE2M() {
return HOVE2M;
}

public int getHOVE2N() {
return HOVE2N;
}

public short getHOVE3E() {
return HOVE3E;
}

public short getHOVE3N() {
return HOVE3N;
}

public byte getHOVE4E() {
return HOVE4E;
}

public boolean getHOVE4N() {
return HOVE4N;
}

public byte getHOVE5E() {
return HOVE5E;
}

public boolean getHOVE5N() {
return HOVE5N;
}

public byte getHOVEE1A() {
return HOVEE1A;
}

public byte getHOVEE1E() {
return HOVEE1E;
}

public boolean getHOVEE1M() {
return HOVEE1M;
}

public byte getHOVEE1N() {
return HOVEE1N;
}

public boolean getHOVEE2A() {
return HOVEE2A;
}

public byte getHOVEE2E() {
return HOVEE2E;
}

public boolean getHOVEE2M() {
return HOVEE2M;
}

public boolean getHOVEE2N() {
return HOVEE2N;
}

public boolean getHOVEE3E() {
return HOVEE3E;
}

public boolean getHOVEE3N() {
return HOVEE3N;
}

public boolean getHOVEE4E() {
return HOVEE4E;
}

public boolean getHOVEE4N() {
return HOVEE4N;
}

public boolean getHOVEE5E() {
return HOVEE5E;
}

public boolean getHOVEE5N() {
return HOVEE5N;
}

public byte getHOVEHX() {
return HOVEHX;
}

public byte getHOVEL1A() {
return HOVEL1A;
}

public int getHOVEL1E() {
return HOVEL1E;
}

public boolean getHOVEL1M() {
return HOVEL1M;
}

public int getHOVEL1N() {
return HOVEL1N;
}

public boolean getHOVEL2A() {
return HOVEL2A;
}

public boolean getHOVEL2E() {
return HOVEL2E;
}

public boolean getHOVEL2M() {
return HOVEL2M;
}

public boolean getHOVEL2N() {
return HOVEL2N;
}

public boolean getHOVEL3E() {
return HOVEL3E;
}

public boolean getHOVEL3N() {
return HOVEL3N;
}

public boolean getHOVEL4E() {
return HOVEL4E;
}

public boolean getHOVEL4N() {
return HOVEL4N;
}

public boolean getHOVEL5E() {
return HOVEL5E;
}

public boolean getHOVEL5N() {
return HOVEL5N;
}

public String getHOVER() {
return HOVER;
}

public String getHOVER10() {
return HOVER10;
}

public boolean getHOVER11() {
return HOVER11;
}

public String getHOVER12() {
return HOVER12;
}

public String getHOVER13() {
return HOVER13;
}

public boolean getHOVER14() {
return HOVER14;
}

public boolean getHOVER15() {
return HOVER15;
}

public String getHOVER16() {
return HOVER16;
}

public byte getHOVER1A() {
return HOVER1A;
}

public byte getHOVER1E() {
return HOVER1E;
}

public boolean getHOVER1M() {
return HOVER1M;
}

public byte getHOVER1N() {
return HOVER1N;
}

public String getHOVER2() {
return HOVER2;
}

public boolean getHOVER2A() {
return HOVER2A;
}

public byte getHOVER2E() {
return HOVER2E;
}

public boolean getHOVER2M() {
return HOVER2M;
}

public byte getHOVER2N() {
return HOVER2N;
}

public String getHOVER3() {
return HOVER3;
}

public boolean getHOVER3E() {
return HOVER3E;
}

public boolean getHOVER3N() {
return HOVER3N;
}

public String getHOVER4() {
return HOVER4;
}

public boolean getHOVER4E() {
return HOVER4E;
}

public boolean getHOVER4N() {
return HOVER4N;
}

public String getHOVER5() {
return HOVER5;
}

public boolean getHOVER5E() {
return HOVER5E;
}

public boolean getHOVER5N() {
return HOVER5N;
}

public String getHOVER6() {
return HOVER6;
}

public String getHOVER7() {
return HOVER7;
}

public boolean getHOVER8() {
return HOVER8;
}

public String getHOVER9() {
return HOVER9;
}

public short getHOVEU1A() {
return HOVEU1A;
}

public int getHOVEU1E() {
return HOVEU1E;
}

public boolean getHOVEU1M() {
return HOVEU1M;
}

public int getHOVEU1N() {
return HOVEU1N;
}

public boolean getHOVEU2A() {
return HOVEU2A;
}

public short getHOVEU2E() {
return HOVEU2E;
}

public boolean getHOVEU2M() {
return HOVEU2M;
}

public short getHOVEU2N() {
return HOVEU2N;
}

public boolean getHOVEU3E() {
return HOVEU3E;
}

public boolean getHOVEU3N() {
return HOVEU3N;
}

public boolean getHOVEU4E() {
return HOVEU4E;
}

public boolean getHOVEU4N() {
return HOVEU4N;
}

public boolean getHOVEU5E() {
return HOVEU5E;
}

public boolean getHOVEU5N() {
return HOVEU5N;
}

public String getHOVLR() {
return HOVLR;
}

public String getHOVLR10() {
return HOVLR10;
}

public boolean getHOVLR11() {
return HOVLR11;
}

public boolean getHOVLR12() {
return HOVLR12;
}

public boolean getHOVLR13() {
return HOVLR13;
}

public boolean getHOVLR14() {
return HOVLR14;
}

public String getHOVLR15() {
return HOVLR15;
}

public boolean getHOVLR16() {
return HOVLR16;
}

public String getHOVLR2() {
return HOVLR2;
}

public String getHOVLR3() {
return HOVLR3;
}

public String getHOVLR4() {
return HOVLR4;
}

public String getHOVLR5() {
return HOVLR5;
}

public String getHOVLR6() {
return HOVLR6;
}

public String getHOVLR7() {
return HOVLR7;
}

public String getHOVLR8() {
return HOVLR8;
}

public String getHOVLR9() {
return HOVLR9;
}

public int getHOVML1A() {
return HOVML1A;
}

public int getHOVML1E() {
return HOVML1E;
}

public int getHOVML1M() {
return HOVML1M;
}

public int getHOVML1N() {
return HOVML1N;
}

public short getHOVML2A() {
return HOVML2A;
}

public int getHOVML2E() {
return HOVML2E;
}

public short getHOVML2M() {
return HOVML2M;
}

public int getHOVML2N() {
return HOVML2N;
}

public int getHOVML3E() {
return HOVML3E;
}

public int getHOVML3N() {
return HOVML3N;
}

public int getHOVML4E() {
return HOVML4E;
}

public short getHOVML4N() {
return HOVML4N;
}

public byte getHOVML5E() {
return HOVML5E;
}

public boolean getHOVML5N() {
return HOVML5N;
}

public byte getHOVMLE1A() {
return HOVMLE1A;
}

public byte getHOVMLE1E() {
return HOVMLE1E;
}

public boolean getHOVMLE1M() {
return HOVMLE1M;
}

public byte getHOVMLE1N() {
return HOVMLE1N;
}

public boolean getHOVMLE2A() {
return HOVMLE2A;
}

public byte getHOVMLE2E() {
return HOVMLE2E;
}

public boolean getHOVMLE2M() {
return HOVMLE2M;
}

public byte getHOVMLE2N() {
return HOVMLE2N;
}

public boolean getHOVMLE3E() {
return HOVMLE3E;
}

public byte getHOVMLE3N() {
return HOVMLE3N;
}

public boolean getHOVMLE4E() {
return HOVMLE4E;
}

public boolean getHOVMLE4N() {
return HOVMLE4N;
}

public boolean getHOVMLE5E() {
return HOVMLE5E;
}

public boolean getHOVMLE5N() {
return HOVMLE5N;
}

public int getHOVMLL1A() {
return HOVMLL1A;
}

public int getHOVMLL1E() {
return HOVMLL1E;
}

public short getHOVMLL1M() {
return HOVMLL1M;
}

public int getHOVMLL1N() {
return HOVMLL1N;
}

public boolean getHOVMLL2A() {
return HOVMLL2A;
}

public int getHOVMLL2E() {
return HOVMLL2E;
}

public boolean getHOVMLL2M() {
return HOVMLL2M;
}

public short getHOVMLL2N() {
return HOVMLL2N;
}

public boolean getHOVMLL3E() {
return HOVMLL3E;
}

public short getHOVMLL3N() {
return HOVMLL3N;
}

public boolean getHOVMLL4E() {
return HOVMLL4E;
}

public short getHOVMLL4N() {
return HOVMLL4N;
}

public boolean getHOVMLL5E() {
return HOVMLL5E;
}

public boolean getHOVMLL5N() {
return HOVMLL5N;
}

public byte getHOVMLR1A() {
return HOVMLR1A;
}

public byte getHOVMLR1E() {
return HOVMLR1E;
}

public boolean getHOVMLR1M() {
return HOVMLR1M;
}

public byte getHOVMLR1N() {
return HOVMLR1N;
}

public boolean getHOVMLR2A() {
return HOVMLR2A;
}

public byte getHOVMLR2E() {
return HOVMLR2E;
}

public boolean getHOVMLR2M() {
return HOVMLR2M;
}

public byte getHOVMLR2N() {
return HOVMLR2N;
}

public boolean getHOVMLR3E() {
return HOVMLR3E;
}

public byte getHOVMLR3N() {
return HOVMLR3N;
}

public boolean getHOVMLR4E() {
return HOVMLR4E;
}

public boolean getHOVMLR4N() {
return HOVMLR4N;
}

public boolean getHOVMLR5E() {
return HOVMLR5E;
}

public boolean getHOVMLR5N() {
return HOVMLR5N;
}

public int getHOVMLU1A() {
return HOVMLU1A;
}

public int getHOVMLU1E() {
return HOVMLU1E;
}

public short getHOVMLU1M() {
return HOVMLU1M;
}

public int getHOVMLU1N() {
return HOVMLU1N;
}

public boolean getHOVMLU2A() {
return HOVMLU2A;
}

public int getHOVMLU2E() {
return HOVMLU2E;
}

public boolean getHOVMLU2M() {
return HOVMLU2M;
}

public int getHOVMLU2N() {
return HOVMLU2N;
}

public boolean getHOVMLU3E() {
return HOVMLU3E;
}

public short getHOVMLU3N() {
return HOVMLU3N;
}

public boolean getHOVMLU4E() {
return HOVMLU4E;
}

public int getHOVMLU4N() {
return HOVMLU4N;
}

public boolean getHOVMLU5E() {
return HOVMLU5E;
}

public boolean getHOVMLU5N() {
return HOVMLU5N;
}

public byte getHOVN() {
return HOVN;
}

public byte getHOVNO() {
return HOVNO;
}

public byte getHOVNO10() {
return HOVNO10;
}

public byte getHOVNO11() {
return HOVNO11;
}

public byte getHOVNO12() {
return HOVNO12;
}

public byte getHOVNO13() {
return HOVNO13;
}

public byte getHOVNO14() {
return HOVNO14;
}

public byte getHOVNO15() {
return HOVNO15;
}

public byte getHOVNO16() {
return HOVNO16;
}

public byte getHOVNO2() {
return HOVNO2;
}

public byte getHOVNO3() {
return HOVNO3;
}

public byte getHOVNO4() {
return HOVNO4;
}

public byte getHOVNO5() {
return HOVNO5;
}

public byte getHOVNO6() {
return HOVNO6;
}

public byte getHOVNO7() {
return HOVNO7;
}

public byte getHOVNO8() {
return HOVNO8;
}

public byte getHOVNO9() {
return HOVNO9;
}

public byte getHOVNR() {
return HOVNR;
}

public boolean getHOVNR10() {
return HOVNR10;
}

public byte getHOVNR11() {
return HOVNR11;
}

public boolean getHOVNR12() {
return HOVNR12;
}

public boolean getHOVNR13() {
return HOVNR13;
}

public byte getHOVNR14() {
return HOVNR14;
}

public boolean getHOVNR15() {
return HOVNR15;
}

public boolean getHOVNR16() {
return HOVNR16;
}

public byte getHOVNR2() {
return HOVNR2;
}

public String getHOVNR3() {
return HOVNR3;
}

public byte getHOVNR4() {
return HOVNR4;
}

public byte getHOVNR5() {
return HOVNR5;
}

public byte getHOVNR6() {
return HOVNR6;
}

public byte getHOVNR7() {
return HOVNR7;
}

public byte getHOVNR8() {
return HOVNR8;
}

public byte getHOVNR9() {
return HOVNR9;
}

public byte getHOVNW() {
return HOVNW;
}

public byte getHOVNW10() {
return HOVNW10;
}

public byte getHOVNW11() {
return HOVNW11;
}

public byte getHOVNW12() {
return HOVNW12;
}

public byte getHOVNW13() {
return HOVNW13;
}

public byte getHOVNW14() {
return HOVNW14;
}

public byte getHOVNW15() {
return HOVNW15;
}

public byte getHOVNW16() {
return HOVNW16;
}

public byte getHOVNW2() {
return HOVNW2;
}

public byte getHOVNW3() {
return HOVNW3;
}

public byte getHOVNW5() {
return HOVNW5;
}

public byte getHOVNW6() {
return HOVNW6;
}

public byte getHOVNW7() {
return HOVNW7;
}

public byte getHOVNW8() {
return HOVNW8;
}

public byte getHOVNW9() {
return HOVNW9;
}

public byte getHOVST() {
return HOVST;
}

public byte getHOVST10() {
return HOVST10;
}

public byte getHOVST11() {
return HOVST11;
}

public byte getHOVST12() {
return HOVST12;
}

public byte getHOVST13() {
return HOVST13;
}

public byte getHOVST14() {
return HOVST14;
}

public byte getHOVST15() {
return HOVST15;
}

public byte getHOVST16() {
return HOVST16;
}

public byte getHOVST2() {
return HOVST2;
}

public byte getHOVST3() {
return HOVST3;
}

public byte getHOVST4() {
return HOVST4;
}

public byte getHOVST5() {
return HOVST5;
}

public byte getHOVST6() {
return HOVST6;
}

public byte getHOVST7() {
return HOVST7;
}

public byte getHOVST8() {
return HOVST8;
}

public byte getHOVST9() {
return HOVST9;
}

public byte getHOVW1001() {
return HOVW1001;
}

public byte getHOVW1002() {
return HOVW1002;
}

public byte getHOVW1003() {
return HOVW1003;
}

public byte getHOVW1004() {
return HOVW1004;
}

public byte getHOVW1005() {
return HOVW1005;
}

public byte getHOVW1006() {
return HOVW1006;
}

public byte getHOVW1007() {
return HOVW1007;
}

public byte getHOVW1008() {
return HOVW1008;
}

public byte getHOVW1009() {
return HOVW1009;
}

public byte getHOVW101() {
return HOVW101;
}

public byte getHOVW1010() {
return HOVW1010;
}

public byte getHOVW1011() {
return HOVW1011;
}

public byte getHOVW1012() {
return HOVW1012;
}

public byte getHOVW1013() {
return HOVW1013;
}

public byte getHOVW1014() {
return HOVW1014;
}

public byte getHOVW1015() {
return HOVW1015;
}

public byte getHOVW1016() {
return HOVW1016;
}

public byte getHOVW1017() {
return HOVW1017;
}

public byte getHOVW1018() {
return HOVW1018;
}

public byte getHOVW1019() {
return HOVW1019;
}

public byte getHOVW102() {
return HOVW102;
}

public byte getHOVW103() {
return HOVW103;
}

public byte getHOVW104() {
return HOVW104;
}

public byte getHOVW105() {
return HOVW105;
}

public byte getHOVW106() {
return HOVW106;
}

public byte getHOVW107() {
return HOVW107;
}

public byte getHOVW108() {
return HOVW108;
}

public byte getHOVW109() {
return HOVW109;
}

public byte getHOVW11() {
return HOVW11;
}

public byte getHOVW110() {
return HOVW110;
}

public byte getHOVW1101() {
return HOVW1101;
}

public byte getHOVW1102() {
return HOVW1102;
}

public byte getHOVW1103() {
return HOVW1103;
}

public byte getHOVW1104() {
return HOVW1104;
}

public byte getHOVW1105() {
return HOVW1105;
}

public byte getHOVW1106() {
return HOVW1106;
}

public byte getHOVW1107() {
return HOVW1107;
}

public byte getHOVW1108() {
return HOVW1108;
}

public byte getHOVW1109() {
return HOVW1109;
}

public byte getHOVW111() {
return HOVW111;
}

public byte getHOVW1110() {
return HOVW1110;
}

public byte getHOVW1111() {
return HOVW1111;
}

public byte getHOVW1112() {
return HOVW1112;
}

public byte getHOVW1113() {
return HOVW1113;
}

public byte getHOVW1114() {
return HOVW1114;
}

public byte getHOVW1115() {
return HOVW1115;
}

public byte getHOVW1116() {
return HOVW1116;
}

public byte getHOVW1117() {
return HOVW1117;
}

public byte getHOVW1118() {
return HOVW1118;
}

public byte getHOVW1119() {
return HOVW1119;
}

public byte getHOVW112() {
return HOVW112;
}

public byte getHOVW113() {
return HOVW113;
}

public byte getHOVW114() {
return HOVW114;
}

public byte getHOVW115() {
return HOVW115;
}

public byte getHOVW116() {
return HOVW116;
}

public byte getHOVW117() {
return HOVW117;
}

public byte getHOVW118() {
return HOVW118;
}

public byte getHOVW119() {
return HOVW119;
}

public byte getHOVW12() {
return HOVW12;
}

public byte getHOVW1201() {
return HOVW1201;
}

public byte getHOVW1202() {
return HOVW1202;
}

public byte getHOVW1203() {
return HOVW1203;
}

public byte getHOVW1204() {
return HOVW1204;
}

public byte getHOVW1205() {
return HOVW1205;
}

public byte getHOVW1206() {
return HOVW1206;
}

public byte getHOVW1207() {
return HOVW1207;
}

public byte getHOVW1208() {
return HOVW1208;
}

public byte getHOVW1209() {
return HOVW1209;
}

public byte getHOVW1210() {
return HOVW1210;
}

public byte getHOVW1211() {
return HOVW1211;
}

public byte getHOVW1212() {
return HOVW1212;
}

public byte getHOVW1213() {
return HOVW1213;
}

public byte getHOVW1214() {
return HOVW1214;
}

public byte getHOVW1215() {
return HOVW1215;
}

public byte getHOVW1216() {
return HOVW1216;
}

public byte getHOVW1217() {
return HOVW1217;
}

public byte getHOVW1218() {
return HOVW1218;
}

public byte getHOVW1219() {
return HOVW1219;
}

public byte getHOVW13() {
return HOVW13;
}

public byte getHOVW1301() {
return HOVW1301;
}

public byte getHOVW1302() {
return HOVW1302;
}

public byte getHOVW1303() {
return HOVW1303;
}

public byte getHOVW1304() {
return HOVW1304;
}

public byte getHOVW1305() {
return HOVW1305;
}

public byte getHOVW1306() {
return HOVW1306;
}

public byte getHOVW1307() {
return HOVW1307;
}

public byte getHOVW1308() {
return HOVW1308;
}

public byte getHOVW1309() {
return HOVW1309;
}

public byte getHOVW1310() {
return HOVW1310;
}

public byte getHOVW1311() {
return HOVW1311;
}

public byte getHOVW1312() {
return HOVW1312;
}

public byte getHOVW1313() {
return HOVW1313;
}

public byte getHOVW1314() {
return HOVW1314;
}

public byte getHOVW1315() {
return HOVW1315;
}

public byte getHOVW1316() {
return HOVW1316;
}

public byte getHOVW1317() {
return HOVW1317;
}

public byte getHOVW1318() {
return HOVW1318;
}

public byte getHOVW1319() {
return HOVW1319;
}

public byte getHOVW14() {
return HOVW14;
}

public byte getHOVW1401() {
return HOVW1401;
}

public byte getHOVW1402() {
return HOVW1402;
}

public byte getHOVW1403() {
return HOVW1403;
}

public byte getHOVW1404() {
return HOVW1404;
}

public byte getHOVW1405() {
return HOVW1405;
}

public byte getHOVW1406() {
return HOVW1406;
}

public byte getHOVW1407() {
return HOVW1407;
}

public byte getHOVW1408() {
return HOVW1408;
}

public byte getHOVW1409() {
return HOVW1409;
}

public byte getHOVW1410() {
return HOVW1410;
}

public byte getHOVW1411() {
return HOVW1411;
}

public byte getHOVW1412() {
return HOVW1412;
}

public byte getHOVW1413() {
return HOVW1413;
}

public byte getHOVW1414() {
return HOVW1414;
}

public byte getHOVW1415() {
return HOVW1415;
}

public byte getHOVW1416() {
return HOVW1416;
}

public byte getHOVW1417() {
return HOVW1417;
}

public byte getHOVW1418() {
return HOVW1418;
}

public byte getHOVW1419() {
return HOVW1419;
}

public byte getHOVW15() {
return HOVW15;
}

public byte getHOVW1501() {
return HOVW1501;
}

public byte getHOVW1502() {
return HOVW1502;
}

public byte getHOVW1503() {
return HOVW1503;
}

public byte getHOVW1504() {
return HOVW1504;
}

public byte getHOVW1505() {
return HOVW1505;
}

public byte getHOVW1506() {
return HOVW1506;
}

public byte getHOVW1507() {
return HOVW1507;
}

public byte getHOVW1508() {
return HOVW1508;
}

public byte getHOVW1509() {
return HOVW1509;
}

public byte getHOVW1510() {
return HOVW1510;
}

public byte getHOVW1511() {
return HOVW1511;
}

public byte getHOVW1512() {
return HOVW1512;
}

public byte getHOVW1513() {
return HOVW1513;
}

public byte getHOVW1514() {
return HOVW1514;
}

public byte getHOVW1515() {
return HOVW1515;
}

public byte getHOVW1516() {
return HOVW1516;
}

public byte getHOVW1517() {
return HOVW1517;
}

public byte getHOVW1518() {
return HOVW1518;
}

public byte getHOVW1519() {
return HOVW1519;
}

public byte getHOVW16() {
return HOVW16;
}

public byte getHOVW1601() {
return HOVW1601;
}

public byte getHOVW1602() {
return HOVW1602;
}

public byte getHOVW1603() {
return HOVW1603;
}

public byte getHOVW1604() {
return HOVW1604;
}

public byte getHOVW1605() {
return HOVW1605;
}

public byte getHOVW1606() {
return HOVW1606;
}

public byte getHOVW1607() {
return HOVW1607;
}

public byte getHOVW1608() {
return HOVW1608;
}

public byte getHOVW1609() {
return HOVW1609;
}

public byte getHOVW1610() {
return HOVW1610;
}

public byte getHOVW1611() {
return HOVW1611;
}

public byte getHOVW1612() {
return HOVW1612;
}

public byte getHOVW1613() {
return HOVW1613;
}

public byte getHOVW1614() {
return HOVW1614;
}

public byte getHOVW1615() {
return HOVW1615;
}

public byte getHOVW1616() {
return HOVW1616;
}

public byte getHOVW1617() {
return HOVW1617;
}

public byte getHOVW1618() {
return HOVW1618;
}

public byte getHOVW1619() {
return HOVW1619;
}

public byte getHOVW2() {
return HOVW2;
}

public byte getHOVW201() {
return HOVW201;
}

public byte getHOVW202() {
return HOVW202;
}

public byte getHOVW203() {
return HOVW203;
}

public byte getHOVW204() {
return HOVW204;
}

public byte getHOVW205() {
return HOVW205;
}

public byte getHOVW206() {
return HOVW206;
}

public byte getHOVW207() {
return HOVW207;
}

public byte getHOVW208() {
return HOVW208;
}

public byte getHOVW209() {
return HOVW209;
}

public byte getHOVW210() {
return HOVW210;
}

public byte getHOVW211() {
return HOVW211;
}

public byte getHOVW212() {
return HOVW212;
}

public byte getHOVW213() {
return HOVW213;
}

public byte getHOVW214() {
return HOVW214;
}

public byte getHOVW215() {
return HOVW215;
}

public byte getHOVW216() {
return HOVW216;
}

public byte getHOVW217() {
return HOVW217;
}

public byte getHOVW218() {
return HOVW218;
}

public byte getHOVW219() {
return HOVW219;
}

public byte getHOVW3() {
return HOVW3;
}

public byte getHOVW301() {
return HOVW301;
}

public byte getHOVW302() {
return HOVW302;
}

public byte getHOVW303() {
return HOVW303;
}

public byte getHOVW304() {
return HOVW304;
}

public byte getHOVW305() {
return HOVW305;
}

public byte getHOVW306() {
return HOVW306;
}

public byte getHOVW307() {
return HOVW307;
}

public byte getHOVW308() {
return HOVW308;
}

public byte getHOVW309() {
return HOVW309;
}

public byte getHOVW310() {
return HOVW310;
}

public byte getHOVW311() {
return HOVW311;
}

public byte getHOVW312() {
return HOVW312;
}

public byte getHOVW313() {
return HOVW313;
}

public byte getHOVW314() {
return HOVW314;
}

public byte getHOVW315() {
return HOVW315;
}

public byte getHOVW316() {
return HOVW316;
}

public byte getHOVW317() {
return HOVW317;
}

public byte getHOVW318() {
return HOVW318;
}

public byte getHOVW319() {
return HOVW319;
}

public byte getHOVW401() {
return HOVW401;
}

public byte getHOVW402() {
return HOVW402;
}

public byte getHOVW403() {
return HOVW403;
}

public byte getHOVW404() {
return HOVW404;
}

public byte getHOVW405() {
return HOVW405;
}

public byte getHOVW406() {
return HOVW406;
}

public byte getHOVW407() {
return HOVW407;
}

public byte getHOVW408() {
return HOVW408;
}

public byte getHOVW409() {
return HOVW409;
}

public byte getHOVW410() {
return HOVW410;
}

public byte getHOVW411() {
return HOVW411;
}

public byte getHOVW412() {
return HOVW412;
}

public byte getHOVW413() {
return HOVW413;
}

public byte getHOVW414() {
return HOVW414;
}

public byte getHOVW415() {
return HOVW415;
}

public byte getHOVW416() {
return HOVW416;
}

public byte getHOVW417() {
return HOVW417;
}

public byte getHOVW418() {
return HOVW418;
}

public byte getHOVW419() {
return HOVW419;
}

public byte getHOVW5() {
return HOVW5;
}

public byte getHOVW501() {
return HOVW501;
}

public byte getHOVW502() {
return HOVW502;
}

public byte getHOVW503() {
return HOVW503;
}

public byte getHOVW504() {
return HOVW504;
}

public byte getHOVW505() {
return HOVW505;
}

public byte getHOVW506() {
return HOVW506;
}

public byte getHOVW507() {
return HOVW507;
}

public byte getHOVW508() {
return HOVW508;
}

public byte getHOVW509() {
return HOVW509;
}

public byte getHOVW510() {
return HOVW510;
}

public byte getHOVW511() {
return HOVW511;
}

public byte getHOVW512() {
return HOVW512;
}

public byte getHOVW513() {
return HOVW513;
}

public byte getHOVW514() {
return HOVW514;
}

public byte getHOVW515() {
return HOVW515;
}

public byte getHOVW516() {
return HOVW516;
}

public byte getHOVW517() {
return HOVW517;
}

public byte getHOVW518() {
return HOVW518;
}

public byte getHOVW519() {
return HOVW519;
}

public byte getHOVW6() {
return HOVW6;
}

public byte getHOVW601() {
return HOVW601;
}

public byte getHOVW602() {
return HOVW602;
}

public byte getHOVW603() {
return HOVW603;
}

public byte getHOVW604() {
return HOVW604;
}

public byte getHOVW605() {
return HOVW605;
}

public byte getHOVW606() {
return HOVW606;
}

public byte getHOVW607() {
return HOVW607;
}

public byte getHOVW608() {
return HOVW608;
}

public byte getHOVW609() {
return HOVW609;
}

public byte getHOVW610() {
return HOVW610;
}

public byte getHOVW611() {
return HOVW611;
}

public byte getHOVW612() {
return HOVW612;
}

public byte getHOVW613() {
return HOVW613;
}

public byte getHOVW614() {
return HOVW614;
}

public byte getHOVW615() {
return HOVW615;
}

public byte getHOVW616() {
return HOVW616;
}

public byte getHOVW617() {
return HOVW617;
}

public byte getHOVW618() {
return HOVW618;
}

public byte getHOVW619() {
return HOVW619;
}

public byte getHOVW7() {
return HOVW7;
}

public byte getHOVW701() {
return HOVW701;
}

public byte getHOVW702() {
return HOVW702;
}

public byte getHOVW703() {
return HOVW703;
}

public byte getHOVW704() {
return HOVW704;
}

public byte getHOVW705() {
return HOVW705;
}

public byte getHOVW706() {
return HOVW706;
}

public byte getHOVW707() {
return HOVW707;
}

public byte getHOVW708() {
return HOVW708;
}

public byte getHOVW709() {
return HOVW709;
}

public byte getHOVW710() {
return HOVW710;
}

public byte getHOVW711() {
return HOVW711;
}

public byte getHOVW712() {
return HOVW712;
}

public byte getHOVW713() {
return HOVW713;
}

public byte getHOVW714() {
return HOVW714;
}

public byte getHOVW715() {
return HOVW715;
}

public byte getHOVW716() {
return HOVW716;
}

public byte getHOVW717() {
return HOVW717;
}

public byte getHOVW718() {
return HOVW718;
}

public byte getHOVW719() {
return HOVW719;
}

public byte getHOVW8() {
return HOVW8;
}

public byte getHOVW801() {
return HOVW801;
}

public byte getHOVW802() {
return HOVW802;
}

public byte getHOVW803() {
return HOVW803;
}

public byte getHOVW804() {
return HOVW804;
}

public byte getHOVW805() {
return HOVW805;
}

public byte getHOVW806() {
return HOVW806;
}

public byte getHOVW807() {
return HOVW807;
}

public byte getHOVW808() {
return HOVW808;
}

public byte getHOVW809() {
return HOVW809;
}

public byte getHOVW810() {
return HOVW810;
}

public byte getHOVW811() {
return HOVW811;
}

public byte getHOVW812() {
return HOVW812;
}

public byte getHOVW813() {
return HOVW813;
}

public byte getHOVW814() {
return HOVW814;
}

public byte getHOVW815() {
return HOVW815;
}

public byte getHOVW816() {
return HOVW816;
}

public byte getHOVW817() {
return HOVW817;
}

public byte getHOVW818() {
return HOVW818;
}

public byte getHOVW819() {
return HOVW819;
}

public byte getHOVW901() {
return HOVW901;
}

public byte getHOVW902() {
return HOVW902;
}

public byte getHOVW903() {
return HOVW903;
}

public byte getHOVW904() {
return HOVW904;
}

public byte getHOVW905() {
return HOVW905;
}

public byte getHOVW906() {
return HOVW906;
}

public byte getHOVW907() {
return HOVW907;
}

public byte getHOVW908() {
return HOVW908;
}

public byte getHOVW909() {
return HOVW909;
}

public byte getHOVW910() {
return HOVW910;
}

public byte getHOVW911() {
return HOVW911;
}

public byte getHOVW912() {
return HOVW912;
}

public byte getHOVW913() {
return HOVW913;
}

public byte getHOVW914() {
return HOVW914;
}

public byte getHOVW915() {
return HOVW915;
}

public byte getHOVW916() {
return HOVW916;
}

public byte getHOVW917() {
return HOVW917;
}

public byte getHOVW918() {
return HOVW918;
}

public byte getHOVW919() {
return HOVW919;
}

public short getHOVYR() {
return HOVYR;
}

public short getHOVYR10() {
return HOVYR10;
}

public short getHOVYR11() {
return HOVYR11;
}

public short getHOVYR12() {
return HOVYR12;
}

public short getHOVYR13() {
return HOVYR13;
}

public short getHOVYR14() {
return HOVYR14;
}

public short getHOVYR15() {
return HOVYR15;
}

public short getHOVYR16() {
return HOVYR16;
}

public short getHOVYR2() {
return HOVYR2;
}

public short getHOVYR3() {
return HOVYR3;
}

public short getHOVYR4() {
return HOVYR4;
}

public short getHOVYR5() {
return HOVYR5;
}

public short getHOVYR6() {
return HOVYR6;
}

public short getHOVYR7() {
return HOVYR7;
}

public short getHOVYR8() {
return HOVYR8;
}

public short getHOVYR9() {
return HOVYR9;
}

public byte getHOWH1() {
return HOWH1;
}

public byte getHOWH10() {
return HOWH10;
}

public byte getHOWH11() {
return HOWH11;
}

public byte getHOWH12() {
return HOWH12;
}

public byte getHOWH2() {
return HOWH2;
}

public byte getHOWH3() {
return HOWH3;
}

public byte getHOWH4() {
return HOWH4;
}

public byte getHOWH5() {
return HOWH5;
}

public byte getHOWH6() {
return HOWH6;
}

public byte getHOWH7() {
return HOWH7;
}

public byte getHOWH8() {
return HOWH8;
}

public byte getHOWH9() {
return HOWH9;
}

public byte getHOWH97() {
return HOWH97;
}

public boolean getHOX() {
return HOX;
}

public byte getHOYML1A() {
return HOYML1A;
}

public byte getHOYML1E() {
return HOYML1E;
}

public byte getHOYML1M() {
return HOYML1M;
}

public byte getHOYML1N() {
return HOYML1N;
}

public boolean getHOYML2A() {
return HOYML2A;
}

public byte getHOYML2E() {
return HOYML2E;
}

public boolean getHOYML2M() {
return HOYML2M;
}

public byte getHOYML2N() {
return HOYML2N;
}

public byte getHOYML3E() {
return HOYML3E;
}

public byte getHOYML3N() {
return HOYML3N;
}

public boolean getHOYML4E() {
return HOYML4E;
}

public boolean getHOYML4N() {
return HOYML4N;
}

public boolean getHOYML5E() {
return HOYML5E;
}

public boolean getHOYML5N() {
return HOYML5N;
}

public double getHSCRP() {
return HSCRP;
}

public double getHTFEV() {
return HTFEV;
}

public double getHTFVC() {
return HTFVC;
}

public byte getHTOK() {
return HTOK;
}

public short getHTPF() {
return HTPF;
}

public double getHTVAL() {
return HTVAL;
}

public short getIAA39() {
return IAA39;
}

public boolean getIAA39FE() {
return IAA39FE;
}

public boolean getIAA39FL() {
return IAA39FL;
}

public boolean getIAA39FR() {
return IAA39FR;
}

public boolean getIAA39FU() {
return IAA39FU;
}

public byte getIAA39ME() {
return IAA39ME;
}

public short getIAA39ML() {
return IAA39ML;
}

public boolean getIAA39MR() {
return IAA39MR;
}

public short getIAA39MU() {
return IAA39MU;
}

public byte getIAA39OE() {
return IAA39OE;
}

public boolean getIAA39OL() {
return IAA39OL;
}

public byte getIAA39OR() {
return IAA39OR;
}

public short getIAA39OU() {
return IAA39OU;
}

public byte getIAA39WE() {
return IAA39WE;
}

public boolean getIAA39WL() {
return IAA39WL;
}

public boolean getIAA39WR() {
return IAA39WR;
}

public boolean getIAA39WU() {
return IAA39WU;
}

public boolean getIAA39YE() {
return IAA39YE;
}

public boolean getIAA39YL() {
return IAA39YL;
}

public boolean getIAA39YR() {
return IAA39YR;
}

public boolean getIAA39YU() {
return IAA39YU;
}

public short getIAA40() {
return IAA40;
}

public boolean getIAA40FE() {
return IAA40FE;
}

public boolean getIAA40FL() {
return IAA40FL;
}

public boolean getIAA40FR() {
return IAA40FR;
}

public boolean getIAA40FU() {
return IAA40FU;
}

public byte getIAA40ME() {
return IAA40ME;
}

public short getIAA40ML() {
return IAA40ML;
}

public boolean getIAA40MR() {
return IAA40MR;
}

public short getIAA40MU() {
return IAA40MU;
}

public byte getIAA40OE() {
return IAA40OE;
}

public short getIAA40OL() {
return IAA40OL;
}

public byte getIAA40OR() {
return IAA40OR;
}

public short getIAA40OU() {
return IAA40OU;
}

public boolean getIAA40WE() {
return IAA40WE;
}

public boolean getIAA40WL() {
return IAA40WL;
}

public boolean getIAA40WR() {
return IAA40WR;
}

public boolean getIAA40WU() {
return IAA40WU;
}

public boolean getIAA40YE() {
return IAA40YE;
}

public boolean getIAA40YL() {
return IAA40YL;
}

public boolean getIAA40YR() {
return IAA40YR;
}

public boolean getIAA40YU() {
return IAA40YU;
}

public short getIAA41() {
return IAA41;
}

public byte getIAA41FE() {
return IAA41FE;
}

public short getIAA41FL() {
return IAA41FL;
}

public byte getIAA41FR() {
return IAA41FR;
}

public short getIAA41FU() {
return IAA41FU;
}

public boolean getIAA41ME() {
return IAA41ME;
}

public boolean getIAA41ML() {
return IAA41ML;
}

public boolean getIAA41MR() {
return IAA41MR;
}

public short getIAA41MU() {
return IAA41MU;
}

public byte getIAA41OE() {
return IAA41OE;
}

public short getIAA41OL() {
return IAA41OL;
}

public byte getIAA41OR() {
return IAA41OR;
}

public short getIAA41OU() {
return IAA41OU;
}

public byte getIAA41WE() {
return IAA41WE;
}

public byte getIAA41WL() {
return IAA41WL;
}

public byte getIAA41WR() {
return IAA41WR;
}

public byte getIAA41WU() {
return IAA41WU;
}

public boolean getIAA41YE() {
return IAA41YE;
}

public boolean getIAA41YL() {
return IAA41YL;
}

public boolean getIAA41YR() {
return IAA41YR;
}

public boolean getIAA41YU() {
return IAA41YU;
}

public short getIAA42() {
return IAA42;
}

public boolean getIAA42FE() {
return IAA42FE;
}

public boolean getIAA42FL() {
return IAA42FL;
}

public boolean getIAA42FR() {
return IAA42FR;
}

public boolean getIAA42FU() {
return IAA42FU;
}

public byte getIAA42ME() {
return IAA42ME;
}

public short getIAA42ML() {
return IAA42ML;
}

public byte getIAA42MR() {
return IAA42MR;
}

public short getIAA42MU() {
return IAA42MU;
}

public byte getIAA42OE() {
return IAA42OE;
}

public short getIAA42OL() {
return IAA42OL;
}

public byte getIAA42OR() {
return IAA42OR;
}

public short getIAA42OU() {
return IAA42OU;
}

public byte getIAA42WE() {
return IAA42WE;
}

public short getIAA42WL() {
return IAA42WL;
}

public byte getIAA42WR() {
return IAA42WR;
}

public short getIAA42WU() {
return IAA42WU;
}

public boolean getIAA42YE() {
return IAA42YE;
}

public boolean getIAA42YL() {
return IAA42YL;
}

public boolean getIAA42YR() {
return IAA42YR;
}

public short getIAA42YU() {
return IAA42YU;
}

public short getIAA43() {
return IAA43;
}

public boolean getIAA43FE() {
return IAA43FE;
}

public boolean getIAA43FL() {
return IAA43FL;
}

public boolean getIAA43FR() {
return IAA43FR;
}

public boolean getIAA43FU() {
return IAA43FU;
}

public byte getIAA43ME() {
return IAA43ME;
}

public short getIAA43ML() {
return IAA43ML;
}

public byte getIAA43MR() {
return IAA43MR;
}

public short getIAA43MU() {
return IAA43MU;
}

public byte getIAA43OE() {
return IAA43OE;
}

public byte getIAA43OL() {
return IAA43OL;
}

public byte getIAA43OR() {
return IAA43OR;
}

public short getIAA43OU() {
return IAA43OU;
}

public byte getIAA43WE() {
return IAA43WE;
}

public boolean getIAA43WL() {
return IAA43WL;
}

public boolean getIAA43WR() {
return IAA43WR;
}

public boolean getIAA43WU() {
return IAA43WU;
}

public boolean getIAA43YE() {
return IAA43YE;
}

public boolean getIAA43YL() {
return IAA43YL;
}

public boolean getIAA43YR() {
return IAA43YR;
}

public boolean getIAA43YU() {
return IAA43YU;
}

public short getIAA44() {
return IAA44;
}

public boolean getIAA44FE() {
return IAA44FE;
}

public boolean getIAA44FL() {
return IAA44FL;
}

public boolean getIAA44FR() {
return IAA44FR;
}

public boolean getIAA44FU() {
return IAA44FU;
}

public byte getIAA44ME() {
return IAA44ME;
}

public short getIAA44ML() {
return IAA44ML;
}

public boolean getIAA44MR() {
return IAA44MR;
}

public short getIAA44MU() {
return IAA44MU;
}

public byte getIAA44OE() {
return IAA44OE;
}

public short getIAA44OL() {
return IAA44OL;
}

public byte getIAA44OR() {
return IAA44OR;
}

public short getIAA44OU() {
return IAA44OU;
}

public byte getIAA44WE() {
return IAA44WE;
}

public boolean getIAA44WL() {
return IAA44WL;
}

public byte getIAA44WR() {
return IAA44WR;
}

public byte getIAA44WU() {
return IAA44WU;
}

public boolean getIAA44YE() {
return IAA44YE;
}

public boolean getIAA44YL() {
return IAA44YL;
}

public boolean getIAA44YR() {
return IAA44YR;
}

public boolean getIAA44YU() {
return IAA44YU;
}

public short getIAA45() {
return IAA45;
}

public boolean getIAA45FE() {
return IAA45FE;
}

public boolean getIAA45FL() {
return IAA45FL;
}

public boolean getIAA45FR() {
return IAA45FR;
}

public boolean getIAA45FU() {
return IAA45FU;
}

public byte getIAA45ME() {
return IAA45ME;
}

public short getIAA45ML() {
return IAA45ML;
}

public byte getIAA45MR() {
return IAA45MR;
}

public short getIAA45MU() {
return IAA45MU;
}

public byte getIAA45OE() {
return IAA45OE;
}

public short getIAA45OL() {
return IAA45OL;
}

public byte getIAA45OR() {
return IAA45OR;
}

public short getIAA45OU() {
return IAA45OU;
}

public byte getIAA45WE() {
return IAA45WE;
}

public byte getIAA45WL() {
return IAA45WL;
}

public byte getIAA45WR() {
return IAA45WR;
}

public short getIAA45WU() {
return IAA45WU;
}

public boolean getIAA45YE() {
return IAA45YE;
}

public boolean getIAA45YL() {
return IAA45YL;
}

public boolean getIAA45YR() {
return IAA45YR;
}

public boolean getIAA45YU() {
return IAA45YU;
}

public short getIAA46() {
return IAA46;
}

public boolean getIAA46FE() {
return IAA46FE;
}

public short getIAA46FL() {
return IAA46FL;
}

public boolean getIAA46FR() {
return IAA46FR;
}

public short getIAA46FU() {
return IAA46FU;
}

public byte getIAA46ME() {
return IAA46ME;
}

public short getIAA46ML() {
return IAA46ML;
}

public byte getIAA46MR() {
return IAA46MR;
}

public short getIAA46MU() {
return IAA46MU;
}

public byte getIAA46OE() {
return IAA46OE;
}

public short getIAA46OL() {
return IAA46OL;
}

public byte getIAA46OR() {
return IAA46OR;
}

public short getIAA46OU() {
return IAA46OU;
}

public byte getIAA46WE() {
return IAA46WE;
}

public byte getIAA46WL() {
return IAA46WL;
}

public boolean getIAA46WR() {
return IAA46WR;
}

public byte getIAA46WU() {
return IAA46WU;
}

public boolean getIAA46YE() {
return IAA46YE;
}

public boolean getIAA46YL() {
return IAA46YL;
}

public boolean getIAA46YR() {
return IAA46YR;
}

public boolean getIAA46YU() {
return IAA46YU;
}

public short getIAA47() {
return IAA47;
}

public boolean getIAA47FE() {
return IAA47FE;
}

public boolean getIAA47FL() {
return IAA47FL;
}

public boolean getIAA47FR() {
return IAA47FR;
}

public boolean getIAA47FU() {
return IAA47FU;
}

public byte getIAA47ME() {
return IAA47ME;
}

public short getIAA47ML() {
return IAA47ML;
}

public boolean getIAA47MR() {
return IAA47MR;
}

public short getIAA47MU() {
return IAA47MU;
}

public byte getIAA47OE() {
return IAA47OE;
}

public short getIAA47OL() {
return IAA47OL;
}

public byte getIAA47OR() {
return IAA47OR;
}

public short getIAA47OU() {
return IAA47OU;
}

public byte getIAA47WE() {
return IAA47WE;
}

public byte getIAA47WL() {
return IAA47WL;
}

public byte getIAA47WR() {
return IAA47WR;
}

public byte getIAA47WU() {
return IAA47WU;
}

public boolean getIAA47YE() {
return IAA47YE;
}

public boolean getIAA47YL() {
return IAA47YL;
}

public boolean getIAA47YR() {
return IAA47YR;
}

public short getIAA47YU() {
return IAA47YU;
}

public short getIAA48() {
return IAA48;
}

public boolean getIAA48FE() {
return IAA48FE;
}

public boolean getIAA48FL() {
return IAA48FL;
}

public boolean getIAA48FR() {
return IAA48FR;
}

public boolean getIAA48FU() {
return IAA48FU;
}

public boolean getIAA48ME() {
return IAA48ME;
}

public boolean getIAA48ML() {
return IAA48ML;
}

public boolean getIAA48MR() {
return IAA48MR;
}

public short getIAA48MU() {
return IAA48MU;
}

public byte getIAA48OE() {
return IAA48OE;
}

public short getIAA48OL() {
return IAA48OL;
}

public byte getIAA48OR() {
return IAA48OR;
}

public short getIAA48OU() {
return IAA48OU;
}

public byte getIAA48WE() {
return IAA48WE;
}

public byte getIAA48WL() {
return IAA48WL;
}

public boolean getIAA48WR() {
return IAA48WR;
}

public short getIAA48WU() {
return IAA48WU;
}

public boolean getIAA48YE() {
return IAA48YE;
}

public boolean getIAA48YL() {
return IAA48YL;
}

public boolean getIAA48YR() {
return IAA48YR;
}

public boolean getIAA48YU() {
return IAA48YU;
}

public short getIAA49() {
return IAA49;
}

public boolean getIAA49FE() {
return IAA49FE;
}

public boolean getIAA49FL() {
return IAA49FL;
}

public boolean getIAA49FR() {
return IAA49FR;
}

public boolean getIAA49FU() {
return IAA49FU;
}

public boolean getIAA49ME() {
return IAA49ME;
}

public boolean getIAA49ML() {
return IAA49ML;
}

public boolean getIAA49MR() {
return IAA49MR;
}

public short getIAA49MU() {
return IAA49MU;
}

public boolean getIAA49OE() {
return IAA49OE;
}

public boolean getIAA49OL() {
return IAA49OL;
}

public boolean getIAA49OR() {
return IAA49OR;
}

public short getIAA49OU() {
return IAA49OU;
}

public boolean getIAA49WE() {
return IAA49WE;
}

public boolean getIAA49WL() {
return IAA49WL;
}

public boolean getIAA49WR() {
return IAA49WR;
}

public boolean getIAA49WU() {
return IAA49WU;
}

public boolean getIAA49YE() {
return IAA49YE;
}

public boolean getIAA49YL() {
return IAA49YL;
}

public boolean getIAA49YR() {
return IAA49YR;
}

public boolean getIAA49YU() {
return IAA49YU;
}

public short getIAA50() {
return IAA50;
}

public boolean getIAA50FE() {
return IAA50FE;
}

public boolean getIAA50FL() {
return IAA50FL;
}

public boolean getIAA50FR() {
return IAA50FR;
}

public boolean getIAA50FU() {
return IAA50FU;
}

public boolean getIAA50ME() {
return IAA50ME;
}

public boolean getIAA50ML() {
return IAA50ML;
}

public boolean getIAA50MR() {
return IAA50MR;
}

public boolean getIAA50MU() {
return IAA50MU;
}

public boolean getIAA50OE() {
return IAA50OE;
}

public boolean getIAA50OL() {
return IAA50OL;
}

public boolean getIAA50OR() {
return IAA50OR;
}

public boolean getIAA50OU() {
return IAA50OU;
}

public byte getIAA50WE() {
return IAA50WE;
}

public byte getIAA50WL() {
return IAA50WL;
}

public byte getIAA50WR() {
return IAA50WR;
}

public byte getIAA50WU() {
return IAA50WU;
}

public boolean getIAA50YE() {
return IAA50YE;
}

public boolean getIAA50YL() {
return IAA50YL;
}

public boolean getIAA50YR() {
return IAA50YR;
}

public boolean getIAA50YU() {
return IAA50YU;
}

public short getIAA51() {
return IAA51;
}

public boolean getIAA51FE() {
return IAA51FE;
}

public boolean getIAA51FL() {
return IAA51FL;
}

public boolean getIAA51FR() {
return IAA51FR;
}

public boolean getIAA51FU() {
return IAA51FU;
}

public boolean getIAA51ME() {
return IAA51ME;
}

public boolean getIAA51ML() {
return IAA51ML;
}

public boolean getIAA51MR() {
return IAA51MR;
}

public boolean getIAA51MU() {
return IAA51MU;
}

public byte getIAA51OE() {
return IAA51OE;
}

public short getIAA51OL() {
return IAA51OL;
}

public byte getIAA51OR() {
return IAA51OR;
}

public short getIAA51OU() {
return IAA51OU;
}

public boolean getIAA51WE() {
return IAA51WE;
}

public boolean getIAA51WL() {
return IAA51WL;
}

public boolean getIAA51WR() {
return IAA51WR;
}

public boolean getIAA51WU() {
return IAA51WU;
}

public boolean getIAA51YE() {
return IAA51YE;
}

public boolean getIAA51YL() {
return IAA51YL;
}

public boolean getIAA51YR() {
return IAA51YR;
}

public boolean getIAA51YU() {
return IAA51YU;
}

public short getIAA52() {
return IAA52;
}

public boolean getIAA52FE() {
return IAA52FE;
}

public boolean getIAA52FL() {
return IAA52FL;
}

public boolean getIAA52FR() {
return IAA52FR;
}

public boolean getIAA52FU() {
return IAA52FU;
}

public boolean getIAA52ME() {
return IAA52ME;
}

public boolean getIAA52ML() {
return IAA52ML;
}

public boolean getIAA52MR() {
return IAA52MR;
}

public short getIAA52MU() {
return IAA52MU;
}

public byte getIAA52OE() {
return IAA52OE;
}

public boolean getIAA52OL() {
return IAA52OL;
}

public byte getIAA52OR() {
return IAA52OR;
}

public short getIAA52OU() {
return IAA52OU;
}

public boolean getIAA52WE() {
return IAA52WE;
}

public boolean getIAA52WL() {
return IAA52WL;
}

public boolean getIAA52WR() {
return IAA52WR;
}

public boolean getIAA52WU() {
return IAA52WU;
}

public boolean getIAA52YE() {
return IAA52YE;
}

public boolean getIAA52YL() {
return IAA52YL;
}

public boolean getIAA52YR() {
return IAA52YR;
}

public boolean getIAA52YU() {
return IAA52YU;
}

public short getIAA53() {
return IAA53;
}

public boolean getIAA53FE() {
return IAA53FE;
}

public boolean getIAA53FL() {
return IAA53FL;
}

public boolean getIAA53FR() {
return IAA53FR;
}

public boolean getIAA53FU() {
return IAA53FU;
}

public boolean getIAA53ME() {
return IAA53ME;
}

public boolean getIAA53ML() {
return IAA53ML;
}

public boolean getIAA53MR() {
return IAA53MR;
}

public short getIAA53MU() {
return IAA53MU;
}

public byte getIAA53OE() {
return IAA53OE;
}

public boolean getIAA53OL() {
return IAA53OL;
}

public byte getIAA53OR() {
return IAA53OR;
}

public short getIAA53OU() {
return IAA53OU;
}

public byte getIAA53WE() {
return IAA53WE;
}

public boolean getIAA53WL() {
return IAA53WL;
}

public byte getIAA53WR() {
return IAA53WR;
}

public byte getIAA53WU() {
return IAA53WU;
}

public boolean getIAA53YE() {
return IAA53YE;
}

public boolean getIAA53YL() {
return IAA53YL;
}

public boolean getIAA53YR() {
return IAA53YR;
}

public boolean getIAA53YU() {
return IAA53YU;
}

public short getIAA54() {
return IAA54;
}

public boolean getIAA54FE() {
return IAA54FE;
}

public boolean getIAA54FL() {
return IAA54FL;
}

public boolean getIAA54FR() {
return IAA54FR;
}

public boolean getIAA54FU() {
return IAA54FU;
}

public boolean getIAA54ME() {
return IAA54ME;
}

public short getIAA54ML() {
return IAA54ML;
}

public boolean getIAA54MR() {
return IAA54MR;
}

public short getIAA54MU() {
return IAA54MU;
}

public byte getIAA54OE() {
return IAA54OE;
}

public short getIAA54OL() {
return IAA54OL;
}

public byte getIAA54OR() {
return IAA54OR;
}

public short getIAA54OU() {
return IAA54OU;
}

public boolean getIAA54WE() {
return IAA54WE;
}

public boolean getIAA54WL() {
return IAA54WL;
}

public boolean getIAA54WR() {
return IAA54WR;
}

public boolean getIAA54WU() {
return IAA54WU;
}

public boolean getIAA54YE() {
return IAA54YE;
}

public boolean getIAA54YL() {
return IAA54YL;
}

public boolean getIAA54YR() {
return IAA54YR;
}

public short getIAA54YU() {
return IAA54YU;
}

public short getIAA55() {
return IAA55;
}

public byte getIAA55FE() {
return IAA55FE;
}

public byte getIAA55FL() {
return IAA55FL;
}

public boolean getIAA55FR() {
return IAA55FR;
}

public byte getIAA55FU() {
return IAA55FU;
}

public boolean getIAA55ME() {
return IAA55ME;
}

public short getIAA55ML() {
return IAA55ML;
}

public boolean getIAA55MR() {
return IAA55MR;
}

public short getIAA55MU() {
return IAA55MU;
}

public byte getIAA55OE() {
return IAA55OE;
}

public short getIAA55OL() {
return IAA55OL;
}

public byte getIAA55OR() {
return IAA55OR;
}

public short getIAA55OU() {
return IAA55OU;
}

public byte getIAA55WE() {
return IAA55WE;
}

public short getIAA55WL() {
return IAA55WL;
}

public byte getIAA55WR() {
return IAA55WR;
}

public short getIAA55WU() {
return IAA55WU;
}

public boolean getIAA55YE() {
return IAA55YE;
}

public boolean getIAA55YL() {
return IAA55YL;
}

public boolean getIAA55YR() {
return IAA55YR;
}

public boolean getIAA55YU() {
return IAA55YU;
}

public short getIAA56() {
return IAA56;
}

public boolean getIAA56FE() {
return IAA56FE;
}

public boolean getIAA56FL() {
return IAA56FL;
}

public boolean getIAA56FR() {
return IAA56FR;
}

public boolean getIAA56FU() {
return IAA56FU;
}

public boolean getIAA56ME() {
return IAA56ME;
}

public short getIAA56ML() {
return IAA56ML;
}

public boolean getIAA56MR() {
return IAA56MR;
}

public short getIAA56MU() {
return IAA56MU;
}

public byte getIAA56OE() {
return IAA56OE;
}

public byte getIAA56OL() {
return IAA56OL;
}

public byte getIAA56OR() {
return IAA56OR;
}

public short getIAA56OU() {
return IAA56OU;
}

public byte getIAA56WE() {
return IAA56WE;
}

public byte getIAA56WL() {
return IAA56WL;
}

public byte getIAA56WR() {
return IAA56WR;
}

public byte getIAA56WU() {
return IAA56WU;
}

public boolean getIAA56YE() {
return IAA56YE;
}

public boolean getIAA56YL() {
return IAA56YL;
}

public boolean getIAA56YR() {
return IAA56YR;
}

public boolean getIAA56YU() {
return IAA56YU;
}

public short getIAA57() {
return IAA57;
}

public boolean getIAA57FE() {
return IAA57FE;
}

public boolean getIAA57FL() {
return IAA57FL;
}

public boolean getIAA57FR() {
return IAA57FR;
}

public boolean getIAA57FU() {
return IAA57FU;
}

public boolean getIAA57ME() {
return IAA57ME;
}

public boolean getIAA57ML() {
return IAA57ML;
}

public boolean getIAA57MR() {
return IAA57MR;
}

public boolean getIAA57MU() {
return IAA57MU;
}

public boolean getIAA57OE() {
return IAA57OE;
}

public boolean getIAA57OL() {
return IAA57OL;
}

public boolean getIAA57OR() {
return IAA57OR;
}

public short getIAA57OU() {
return IAA57OU;
}

public boolean getIAA57WE() {
return IAA57WE;
}

public boolean getIAA57WL() {
return IAA57WL;
}

public boolean getIAA57WR() {
return IAA57WR;
}

public boolean getIAA57WU() {
return IAA57WU;
}

public boolean getIAA57YE() {
return IAA57YE;
}

public boolean getIAA57YL() {
return IAA57YL;
}

public boolean getIAA57YR() {
return IAA57YR;
}

public boolean getIAA57YU() {
return IAA57YU;
}

public short getIAA58() {
return IAA58;
}

public boolean getIAA58FE() {
return IAA58FE;
}

public boolean getIAA58FL() {
return IAA58FL;
}

public boolean getIAA58FR() {
return IAA58FR;
}

public boolean getIAA58FU() {
return IAA58FU;
}

public boolean getIAA58ME() {
return IAA58ME;
}

public boolean getIAA58ML() {
return IAA58ML;
}

public boolean getIAA58MR() {
return IAA58MR;
}

public boolean getIAA58MU() {
return IAA58MU;
}

public boolean getIAA58OE() {
return IAA58OE;
}

public boolean getIAA58OL() {
return IAA58OL;
}

public boolean getIAA58OR() {
return IAA58OR;
}

public boolean getIAA58OU() {
return IAA58OU;
}

public boolean getIAA58WE() {
return IAA58WE;
}

public boolean getIAA58WL() {
return IAA58WL;
}

public boolean getIAA58WR() {
return IAA58WR;
}

public boolean getIAA58WU() {
return IAA58WU;
}

public boolean getIAA58YE() {
return IAA58YE;
}

public boolean getIAA58YL() {
return IAA58YL;
}

public boolean getIAA58YR() {
return IAA58YR;
}

public boolean getIAA58YU() {
return IAA58YU;
}

public short getIAA59() {
return IAA59;
}

public boolean getIAA59FE() {
return IAA59FE;
}

public boolean getIAA59FL() {
return IAA59FL;
}

public boolean getIAA59FR() {
return IAA59FR;
}

public boolean getIAA59FU() {
return IAA59FU;
}

public boolean getIAA59ME() {
return IAA59ME;
}

public boolean getIAA59ML() {
return IAA59ML;
}

public boolean getIAA59MR() {
return IAA59MR;
}

public boolean getIAA59MU() {
return IAA59MU;
}

public boolean getIAA59OE() {
return IAA59OE;
}

public boolean getIAA59OL() {
return IAA59OL;
}

public boolean getIAA59OR() {
return IAA59OR;
}

public boolean getIAA59OU() {
return IAA59OU;
}

public boolean getIAA59WE() {
return IAA59WE;
}

public boolean getIAA59WL() {
return IAA59WL;
}

public boolean getIAA59WR() {
return IAA59WR;
}

public boolean getIAA59WU() {
return IAA59WU;
}

public boolean getIAA59YE() {
return IAA59YE;
}

public boolean getIAA59YL() {
return IAA59YL;
}

public boolean getIAA59YR() {
return IAA59YR;
}

public boolean getIAA59YU() {
return IAA59YU;
}

public short getIAA60() {
return IAA60;
}

public boolean getIAA60FE() {
return IAA60FE;
}

public boolean getIAA60FL() {
return IAA60FL;
}

public boolean getIAA60FR() {
return IAA60FR;
}

public boolean getIAA60FU() {
return IAA60FU;
}

public byte getIAA60ME() {
return IAA60ME;
}

public boolean getIAA60ML() {
return IAA60ML;
}

public boolean getIAA60MR() {
return IAA60MR;
}

public short getIAA60MU() {
return IAA60MU;
}

public byte getIAA60OE() {
return IAA60OE;
}

public short getIAA60OL() {
return IAA60OL;
}

public boolean getIAA60OR() {
return IAA60OR;
}

public short getIAA60OU() {
return IAA60OU;
}

public boolean getIAA60WE() {
return IAA60WE;
}

public boolean getIAA60WL() {
return IAA60WL;
}

public boolean getIAA60WR() {
return IAA60WR;
}

public boolean getIAA60WU() {
return IAA60WU;
}

public boolean getIAA60YE() {
return IAA60YE;
}

public boolean getIAA60YL() {
return IAA60YL;
}

public boolean getIAA60YR() {
return IAA60YR;
}

public boolean getIAA60YU() {
return IAA60YU;
}

public short getIAA61() {
return IAA61;
}

public boolean getIAA61FE() {
return IAA61FE;
}

public boolean getIAA61FL() {
return IAA61FL;
}

public boolean getIAA61FR() {
return IAA61FR;
}

public boolean getIAA61FU() {
return IAA61FU;
}

public byte getIAA61ME() {
return IAA61ME;
}

public short getIAA61ML() {
return IAA61ML;
}

public boolean getIAA61MR() {
return IAA61MR;
}

public short getIAA61MU() {
return IAA61MU;
}

public byte getIAA61OE() {
return IAA61OE;
}

public boolean getIAA61OL() {
return IAA61OL;
}

public byte getIAA61OR() {
return IAA61OR;
}

public short getIAA61OU() {
return IAA61OU;
}

public boolean getIAA61WE() {
return IAA61WE;
}

public boolean getIAA61WL() {
return IAA61WL;
}

public boolean getIAA61WR() {
return IAA61WR;
}

public boolean getIAA61WU() {
return IAA61WU;
}

public boolean getIAA61YE() {
return IAA61YE;
}

public boolean getIAA61YL() {
return IAA61YL;
}

public boolean getIAA61YR() {
return IAA61YR;
}

public boolean getIAA61YU() {
return IAA61YU;
}

public short getIAA62() {
return IAA62;
}

public boolean getIAA62FE() {
return IAA62FE;
}

public boolean getIAA62FL() {
return IAA62FL;
}

public boolean getIAA62FR() {
return IAA62FR;
}

public boolean getIAA62FU() {
return IAA62FU;
}

public boolean getIAA62ME() {
return IAA62ME;
}

public boolean getIAA62ML() {
return IAA62ML;
}

public boolean getIAA62MR() {
return IAA62MR;
}

public short getIAA62MU() {
return IAA62MU;
}

public byte getIAA62OE() {
return IAA62OE;
}

public short getIAA62OL() {
return IAA62OL;
}

public byte getIAA62OR() {
return IAA62OR;
}

public short getIAA62OU() {
return IAA62OU;
}

public boolean getIAA62WE() {
return IAA62WE;
}

public boolean getIAA62WL() {
return IAA62WL;
}

public boolean getIAA62WR() {
return IAA62WR;
}

public boolean getIAA62WU() {
return IAA62WU;
}

public boolean getIAA62YE() {
return IAA62YE;
}

public boolean getIAA62YL() {
return IAA62YL;
}

public boolean getIAA62YR() {
return IAA62YR;
}

public boolean getIAA62YU() {
return IAA62YU;
}

public short getIAA63() {
return IAA63;
}

public boolean getIAA63FE() {
return IAA63FE;
}

public boolean getIAA63FL() {
return IAA63FL;
}

public boolean getIAA63FR() {
return IAA63FR;
}

public boolean getIAA63FU() {
return IAA63FU;
}

public boolean getIAA63ME() {
return IAA63ME;
}

public boolean getIAA63ML() {
return IAA63ML;
}

public boolean getIAA63MR() {
return IAA63MR;
}

public boolean getIAA63MU() {
return IAA63MU;
}

public boolean getIAA63OE() {
return IAA63OE;
}

public boolean getIAA63OL() {
return IAA63OL;
}

public boolean getIAA63OR() {
return IAA63OR;
}

public boolean getIAA63OU() {
return IAA63OU;
}

public boolean getIAA63WE() {
return IAA63WE;
}

public boolean getIAA63WL() {
return IAA63WL;
}

public boolean getIAA63WR() {
return IAA63WR;
}

public boolean getIAA63WU() {
return IAA63WU;
}

public boolean getIAA63YE() {
return IAA63YE;
}

public boolean getIAA63YL() {
return IAA63YL;
}

public boolean getIAA63YR() {
return IAA63YR;
}

public boolean getIAA63YU() {
return IAA63YU;
}

public short getIAA64() {
return IAA64;
}

public boolean getIAA64FE() {
return IAA64FE;
}

public boolean getIAA64FL() {
return IAA64FL;
}

public boolean getIAA64FR() {
return IAA64FR;
}

public boolean getIAA64FU() {
return IAA64FU;
}

public boolean getIAA64ME() {
return IAA64ME;
}

public boolean getIAA64ML() {
return IAA64ML;
}

public boolean getIAA64MR() {
return IAA64MR;
}

public short getIAA64MU() {
return IAA64MU;
}

public boolean getIAA64OE() {
return IAA64OE;
}

public boolean getIAA64OL() {
return IAA64OL;
}

public byte getIAA64OR() {
return IAA64OR;
}

public short getIAA64OU() {
return IAA64OU;
}

public boolean getIAA64WE() {
return IAA64WE;
}

public boolean getIAA64WL() {
return IAA64WL;
}

public boolean getIAA64WR() {
return IAA64WR;
}

public boolean getIAA64WU() {
return IAA64WU;
}

public boolean getIAA64YE() {
return IAA64YE;
}

public boolean getIAA64YL() {
return IAA64YL;
}

public boolean getIAA64YR() {
return IAA64YR;
}

public boolean getIAA64YU() {
return IAA64YU;
}

public short getIAA65() {
return IAA65;
}

public boolean getIAA65FE() {
return IAA65FE;
}

public boolean getIAA65FL() {
return IAA65FL;
}

public boolean getIAA65FR() {
return IAA65FR;
}

public boolean getIAA65FU() {
return IAA65FU;
}

public byte getIAA65ME() {
return IAA65ME;
}

public short getIAA65ML() {
return IAA65ML;
}

public byte getIAA65MR() {
return IAA65MR;
}

public short getIAA65MU() {
return IAA65MU;
}

public boolean getIAA65OE() {
return IAA65OE;
}

public boolean getIAA65OL() {
return IAA65OL;
}

public boolean getIAA65OR() {
return IAA65OR;
}

public short getIAA65OU() {
return IAA65OU;
}

public byte getIAA65WE() {
return IAA65WE;
}

public boolean getIAA65WL() {
return IAA65WL;
}

public byte getIAA65WR() {
return IAA65WR;
}

public byte getIAA65WU() {
return IAA65WU;
}

public boolean getIAA65YE() {
return IAA65YE;
}

public boolean getIAA65YL() {
return IAA65YL;
}

public boolean getIAA65YR() {
return IAA65YR;
}

public boolean getIAA65YU() {
return IAA65YU;
}

public short getIAA66() {
return IAA66;
}

public boolean getIAA66FE() {
return IAA66FE;
}

public boolean getIAA66FL() {
return IAA66FL;
}

public boolean getIAA66FR() {
return IAA66FR;
}

public boolean getIAA66FU() {
return IAA66FU;
}

public boolean getIAA66ME() {
return IAA66ME;
}

public boolean getIAA66ML() {
return IAA66ML;
}

public boolean getIAA66MR() {
return IAA66MR;
}

public boolean getIAA66MU() {
return IAA66MU;
}

public boolean getIAA66OE() {
return IAA66OE;
}

public boolean getIAA66OL() {
return IAA66OL;
}

public boolean getIAA66OR() {
return IAA66OR;
}

public short getIAA66OU() {
return IAA66OU;
}

public boolean getIAA66WE() {
return IAA66WE;
}

public boolean getIAA66WL() {
return IAA66WL;
}

public boolean getIAA66WR() {
return IAA66WR;
}

public boolean getIAA66WU() {
return IAA66WU;
}

public boolean getIAA66YE() {
return IAA66YE;
}

public boolean getIAA66YL() {
return IAA66YL;
}

public boolean getIAA66YR() {
return IAA66YR;
}

public boolean getIAA66YU() {
return IAA66YU;
}

public byte getIAA67() {
return IAA67;
}

public boolean getIAA67FE() {
return IAA67FE;
}

public boolean getIAA67FL() {
return IAA67FL;
}

public boolean getIAA67FR() {
return IAA67FR;
}

public short getIAA67FU() {
return IAA67FU;
}

public boolean getIAA67ME() {
return IAA67ME;
}

public boolean getIAA67ML() {
return IAA67ML;
}

public boolean getIAA67MR() {
return IAA67MR;
}

public boolean getIAA67MU() {
return IAA67MU;
}

public boolean getIAA67OE() {
return IAA67OE;
}

public boolean getIAA67OL() {
return IAA67OL;
}

public boolean getIAA67OR() {
return IAA67OR;
}

public boolean getIAA67OU() {
return IAA67OU;
}

public boolean getIAA67WE() {
return IAA67WE;
}

public boolean getIAA67WL() {
return IAA67WL;
}

public boolean getIAA67WR() {
return IAA67WR;
}

public boolean getIAA67WU() {
return IAA67WU;
}

public boolean getIAA67YE() {
return IAA67YE;
}

public boolean getIAA67YL() {
return IAA67YL;
}

public boolean getIAA67YR() {
return IAA67YR;
}

public boolean getIAA67YU() {
return IAA67YU;
}

public short getIAA68() {
return IAA68;
}

public boolean getIAA68FE() {
return IAA68FE;
}

public boolean getIAA68FL() {
return IAA68FL;
}

public boolean getIAA68FR() {
return IAA68FR;
}

public boolean getIAA68FU() {
return IAA68FU;
}

public boolean getIAA68ME() {
return IAA68ME;
}

public boolean getIAA68ML() {
return IAA68ML;
}

public boolean getIAA68MR() {
return IAA68MR;
}

public boolean getIAA68MU() {
return IAA68MU;
}

public boolean getIAA68OE() {
return IAA68OE;
}

public boolean getIAA68OL() {
return IAA68OL;
}

public boolean getIAA68OR() {
return IAA68OR;
}

public boolean getIAA68OU() {
return IAA68OU;
}

public boolean getIAA68WE() {
return IAA68WE;
}

public boolean getIAA68WL() {
return IAA68WL;
}

public boolean getIAA68WR() {
return IAA68WR;
}

public boolean getIAA68WU() {
return IAA68WU;
}

public boolean getIAA68YE() {
return IAA68YE;
}

public boolean getIAA68YL() {
return IAA68YL;
}

public boolean getIAA68YR() {
return IAA68YR;
}

public boolean getIAA68YU() {
return IAA68YU;
}

public short getIAA69() {
return IAA69;
}

public boolean getIAA69FE() {
return IAA69FE;
}

public boolean getIAA69FL() {
return IAA69FL;
}

public boolean getIAA69FR() {
return IAA69FR;
}

public boolean getIAA69FU() {
return IAA69FU;
}

public boolean getIAA69ME() {
return IAA69ME;
}

public boolean getIAA69ML() {
return IAA69ML;
}

public boolean getIAA69MR() {
return IAA69MR;
}

public boolean getIAA69MU() {
return IAA69MU;
}

public boolean getIAA69OE() {
return IAA69OE;
}

public boolean getIAA69OL() {
return IAA69OL;
}

public boolean getIAA69OR() {
return IAA69OR;
}

public boolean getIAA69OU() {
return IAA69OU;
}

public boolean getIAA69WE() {
return IAA69WE;
}

public boolean getIAA69WL() {
return IAA69WL;
}

public boolean getIAA69WR() {
return IAA69WR;
}

public boolean getIAA69WU() {
return IAA69WU;
}

public boolean getIAA69YE() {
return IAA69YE;
}

public boolean getIAA69YL() {
return IAA69YL;
}

public boolean getIAA69YR() {
return IAA69YR;
}

public boolean getIAA69YU() {
return IAA69YU;
}

public short getIAA70() {
return IAA70;
}

public boolean getIAA70FE() {
return IAA70FE;
}

public boolean getIAA70FL() {
return IAA70FL;
}

public boolean getIAA70FR() {
return IAA70FR;
}

public boolean getIAA70FU() {
return IAA70FU;
}

public boolean getIAA70ME() {
return IAA70ME;
}

public boolean getIAA70ML() {
return IAA70ML;
}

public boolean getIAA70MR() {
return IAA70MR;
}

public boolean getIAA70MU() {
return IAA70MU;
}

public boolean getIAA70OE() {
return IAA70OE;
}

public boolean getIAA70OL() {
return IAA70OL;
}

public boolean getIAA70OR() {
return IAA70OR;
}

public boolean getIAA70OU() {
return IAA70OU;
}

public boolean getIAA70WE() {
return IAA70WE;
}

public boolean getIAA70WL() {
return IAA70WL;
}

public boolean getIAA70WR() {
return IAA70WR;
}

public boolean getIAA70WU() {
return IAA70WU;
}

public boolean getIAA70YE() {
return IAA70YE;
}

public boolean getIAA70YL() {
return IAA70YL;
}

public boolean getIAA70YR() {
return IAA70YR;
}

public boolean getIAA70YU() {
return IAA70YU;
}

public short getIAA71() {
return IAA71;
}

public boolean getIAA71FE() {
return IAA71FE;
}

public boolean getIAA71FL() {
return IAA71FL;
}

public boolean getIAA71FR() {
return IAA71FR;
}

public boolean getIAA71FU() {
return IAA71FU;
}

public boolean getIAA71ME() {
return IAA71ME;
}

public boolean getIAA71ML() {
return IAA71ML;
}

public boolean getIAA71MR() {
return IAA71MR;
}

public short getIAA71MU() {
return IAA71MU;
}

public boolean getIAA71OE() {
return IAA71OE;
}

public boolean getIAA71OL() {
return IAA71OL;
}

public boolean getIAA71OR() {
return IAA71OR;
}

public boolean getIAA71OU() {
return IAA71OU;
}

public boolean getIAA71WE() {
return IAA71WE;
}

public boolean getIAA71WL() {
return IAA71WL;
}

public boolean getIAA71WR() {
return IAA71WR;
}

public boolean getIAA71WU() {
return IAA71WU;
}

public boolean getIAA71YE() {
return IAA71YE;
}

public boolean getIAA71YL() {
return IAA71YL;
}

public boolean getIAA71YR() {
return IAA71YR;
}

public boolean getIAA71YU() {
return IAA71YU;
}

public byte getIAA72() {
return IAA72;
}

public boolean getIAA72FE() {
return IAA72FE;
}

public boolean getIAA72FL() {
return IAA72FL;
}

public boolean getIAA72FR() {
return IAA72FR;
}

public boolean getIAA72FU() {
return IAA72FU;
}

public boolean getIAA72ME() {
return IAA72ME;
}

public boolean getIAA72ML() {
return IAA72ML;
}

public boolean getIAA72MR() {
return IAA72MR;
}

public boolean getIAA72MU() {
return IAA72MU;
}

public boolean getIAA72OE() {
return IAA72OE;
}

public boolean getIAA72OL() {
return IAA72OL;
}

public boolean getIAA72OR() {
return IAA72OR;
}

public short getIAA72OU() {
return IAA72OU;
}

public boolean getIAA72WE() {
return IAA72WE;
}

public boolean getIAA72WL() {
return IAA72WL;
}

public boolean getIAA72WR() {
return IAA72WR;
}

public boolean getIAA72WU() {
return IAA72WU;
}

public boolean getIAA72YE() {
return IAA72YE;
}

public boolean getIAA72YL() {
return IAA72YL;
}

public boolean getIAA72YR() {
return IAA72YR;
}

public boolean getIAA72YU() {
return IAA72YU;
}

public byte getIAAIPE() {
return IAAIPE;
}

public short getIAAIPL() {
return IAAIPL;
}

public byte getIAAIPR() {
return IAAIPR;
}

public short getIAAIPU() {
return IAAIPU;
}

public byte getIAB10() {
return IAB10;
}

public byte getIAB11() {
return IAB11;
}

public byte getIAB12() {
return IAB12;
}

public byte getIAB13() {
return IAB13;
}

public byte getIAB14() {
return IAB14;
}

public byte getIAB15() {
return IAB15;
}

public byte getIAB16() {
return IAB16;
}

public byte getIAB17() {
return IAB17;
}

public byte getIAB18() {
return IAB18;
}

public byte getIAB28() {
return IAB28;
}

public byte getIAB29() {
return IAB29;
}

public byte getIAB30() {
return IAB30;
}

public byte getIAB31() {
return IAB31;
}

public byte getIAB32() {
return IAB32;
}

public byte getIAB33() {
return IAB33;
}

public byte getIAB34() {
return IAB34;
}

public byte getIAB35() {
return IAB35;
}

public byte getIAB36() {
return IAB36;
}

public byte getIAB46() {
return IAB46;
}

public byte getIAB47() {
return IAB47;
}

public byte getIAB48() {
return IAB48;
}

public byte getIAB49() {
return IAB49;
}

public byte getIAB50() {
return IAB50;
}

public byte getIAB51() {
return IAB51;
}

public byte getIAB52() {
return IAB52;
}

public byte getIAB53() {
return IAB53;
}

public byte getIAB54() {
return IAB54;
}

public byte getIAB64() {
return IAB64;
}

public byte getIAB65() {
return IAB65;
}

public byte getIAB66() {
return IAB66;
}

public byte getIAB67() {
return IAB67;
}

public byte getIAB68() {
return IAB68;
}

public boolean getIAB69() {
return IAB69;
}

public byte getIAB70() {
return IAB70;
}

public byte getIAB71() {
return IAB71;
}

public byte getIAB72() {
return IAB72;
}

public byte getIABEB() {
return IABEB;
}

public byte getIABEN95() {
return IABEN95;
}

public byte getIABEN96() {
return IABEN96;
}

public byte getIABENCB() {
return IABENCB;
}

public byte getIABENCC() {
return IABENCC;
}

public byte getIABENGA() {
return IABENGA;
}

public byte getIABENIS() {
return IABENIS;
}

public byte getIABENJA() {
return IABENJA;
}

public byte getIABENPC() {
return IABENPC;
}

public byte getIABENTC() {
return IABENTC;
}

public byte getIABENWP() {
return IABENWP;
}

public byte getIABEP95() {
return IABEP95;
}

public byte getIABEP96() {
return IABEP96;
}

public byte getIABEPCB() {
return IABEPCB;
}

public byte getIABEPCC() {
return IABEPCC;
}

public byte getIABEPGA() {
return IABEPGA;
}

public byte getIABEPIS() {
return IABEPIS;
}

public byte getIABEPJA() {
return IABEPJA;
}

public byte getIABEPM85() {
return IABEPM85;
}

public byte getIABEPM86() {
return IABEPM86;
}

public byte getIABEPM96() {
return IABEPM96;
}

public byte getIABEPMCB() {
return IABEPMCB;
}

public byte getIABEPMCC() {
return IABEPMCC;
}

public byte getIABEPMFP() {
return IABEPMFP;
}

public byte getIABEPMGA() {
return IABEPMGA;
}

public byte getIABEPMIS() {
return IABEPMIS;
}

public byte getIABEPMJA() {
return IABEPMJA;
}

public byte getIABEPMPC() {
return IABEPMPC;
}

public byte getIABEPMTC() {
return IABEPMTC;
}

public byte getIABEPMWP() {
return IABEPMWP;
}

public byte getIABEPN95() {
return IABEPN95;
}

public byte getIABEPN96() {
return IABEPN96;
}

public byte getIABEPNCB() {
return IABEPNCB;
}

public byte getIABEPNCC() {
return IABEPNCC;
}

public byte getIABEPNGA() {
return IABEPNGA;
}

public byte getIABEPNIS() {
return IABEPNIS;
}

public byte getIABEPNJA() {
return IABEPNJA;
}

public byte getIABEPNPC() {
return IABEPNPC;
}

public byte getIABEPNWC() {
return IABEPNWC;
}

public byte getIABEPNWP() {
return IABEPNWP;
}

public byte getIABEPPC() {
return IABEPPC;
}

public byte getIABEPTC() {
return IABEPTC;
}

public byte getIABEPWP() {
return IABEPWP;
}

public byte getIABER95() {
return IABER95;
}

public byte getIABER96() {
return IABER96;
}

public byte getIABERCB() {
return IABERCB;
}

public byte getIABERCC() {
return IABERCC;
}

public byte getIABERGA() {
return IABERGA;
}

public byte getIABERIS() {
return IABERIS;
}

public byte getIABERJA() {
return IABERJA;
}

public byte getIABERM85() {
return IABERM85;
}

public byte getIABERM86() {
return IABERM86;
}

public byte getIABERM96() {
return IABERM96;
}

public byte getIABERMCB() {
return IABERMCB;
}

public byte getIABERMCC() {
return IABERMCC;
}

public byte getIABERMFP() {
return IABERMFP;
}

public byte getIABERMGA() {
return IABERMGA;
}

public byte getIABERMIS() {
return IABERMIS;
}

public byte getIABERMJA() {
return IABERMJA;
}

public byte getIABERMPC() {
return IABERMPC;
}

public byte getIABERMTC() {
return IABERMTC;
}

public byte getIABERMWP() {
return IABERMWP;
}

public byte getIABERPC() {
return IABERPC;
}

public byte getIABERTC() {
return IABERTC;
}

public byte getIABERWP() {
return IABERWP;
}

public byte getIABM10() {
return IABM10;
}

public byte getIABM11() {
return IABM11;
}

public byte getIABM12() {
return IABM12;
}

public byte getIABM13() {
return IABM13;
}

public byte getIABM14() {
return IABM14;
}

public byte getIABM15() {
return IABM15;
}

public boolean getIABM16() {
return IABM16;
}

public byte getIABM17() {
return IABM17;
}

public byte getIABM18() {
return IABM18;
}

public byte getIABM28() {
return IABM28;
}

public byte getIABM29() {
return IABM29;
}

public byte getIABM30() {
return IABM30;
}

public byte getIABM31() {
return IABM31;
}

public byte getIABM32() {
return IABM32;
}

public byte getIABM33() {
return IABM33;
}

public boolean getIABM34() {
return IABM34;
}

public byte getIABM35() {
return IABM35;
}

public byte getIABM36() {
return IABM36;
}

public byte getIABM46() {
return IABM46;
}

public byte getIABM47() {
return IABM47;
}

public byte getIABM48() {
return IABM48;
}

public byte getIABM49() {
return IABM49;
}

public byte getIABM50() {
return IABM50;
}

public byte getIABM51() {
return IABM51;
}

public byte getIABM52() {
return IABM52;
}

public byte getIABM53() {
return IABM53;
}

public byte getIABM54() {
return IABM54;
}

public byte getIABM64() {
return IABM64;
}

public byte getIABM65() {
return IABM65;
}

public byte getIABM66() {
return IABM66;
}

public byte getIABM67() {
return IABM67;
}

public byte getIABM68() {
return IABM68;
}

public boolean getIABM69() {
return IABM69;
}

public byte getIABM70() {
return IABM70;
}

public byte getIABM71() {
return IABM71;
}

public boolean getIABM72() {
return IABM72;
}

public byte getIABW10() {
return IABW10;
}

public byte getIABW11() {
return IABW11;
}

public byte getIABW12() {
return IABW12;
}

public byte getIABW13() {
return IABW13;
}

public byte getIABW14() {
return IABW14;
}

public byte getIABW15() {
return IABW15;
}

public byte getIABW16() {
return IABW16;
}

public byte getIABW17() {
return IABW17;
}

public byte getIABW18() {
return IABW18;
}

public byte getIABW28() {
return IABW28;
}

public boolean getIABW29() {
return IABW29;
}

public byte getIABW30() {
return IABW30;
}

public byte getIABW31() {
return IABW31;
}

public byte getIABW32() {
return IABW32;
}

public byte getIABW33() {
return IABW33;
}

public byte getIABW34() {
return IABW34;
}

public byte getIABW35() {
return IABW35;
}

public boolean getIABW36() {
return IABW36;
}

public byte getIABW46() {
return IABW46;
}

public byte getIABW47() {
return IABW47;
}

public byte getIABW48() {
return IABW48;
}

public byte getIABW49() {
return IABW49;
}

public byte getIABW50() {
return IABW50;
}

public byte getIABW51() {
return IABW51;
}

public byte getIABW52() {
return IABW52;
}

public byte getIABW53() {
return IABW53;
}

public byte getIABW54() {
return IABW54;
}

public byte getIABW64() {
return IABW64;
}

public byte getIABW65() {
return IABW65;
}

public boolean getIABW66() {
return IABW66;
}

public byte getIABW67() {
return IABW67;
}

public boolean getIABW68() {
return IABW68;
}

public boolean getIABW69() {
return IABW69;
}

public byte getIABW70() {
return IABW70;
}

public byte getIABW71() {
return IABW71;
}

public byte getIABW72() {
return IABW72;
}

public byte getIACISAE() {
return IACISAE;
}

public short getIACISAL() {
return IACISAL;
}

public byte getIACISAR() {
return IACISAR;
}

public short getIACISAU() {
return IACISAU;
}

public byte getIADATM() {
return IADATM;
}

public short getIADATY() {
return IADATY;
}

public byte getIADEBME() {
return IADEBME;
}

public short getIADEBML() {
return IADEBML;
}

public byte getIADEBMR() {
return IADEBMR;
}

public short getIADEBMU() {
return IADEBMU;
}

public byte getIAEA10E() {
return IAEA10E;
}

public short getIAEA10L() {
return IAEA10L;
}

public byte getIAEA10R() {
return IAEA10R;
}

public short getIAEA10U() {
return IAEA10U;
}

public boolean getIAEA11E() {
return IAEA11E;
}

public byte getIAEA11L() {
return IAEA11L;
}

public boolean getIAEA11R() {
return IAEA11R;
}

public short getIAEA11U() {
return IAEA11U;
}

public byte getIAEAR2E() {
return IAEAR2E;
}

public int getIAEAR2L() {
return IAEAR2L;
}

public byte getIAEAR2R() {
return IAEAR2R;
}

public int getIAEAR2U() {
return IAEAR2U;
}

public byte getIAEAR3E() {
return IAEAR3E;
}

public int getIAEAR3L() {
return IAEAR3L;
}

public byte getIAEAR3R() {
return IAEAR3R;
}

public int getIAEAR3U() {
return IAEAR3U;
}

public byte getIAEAR4E() {
return IAEAR4E;
}

public int getIAEAR4L() {
return IAEAR4L;
}

public byte getIAEAR4R() {
return IAEAR4R;
}

public int getIAEAR4U() {
return IAEAR4U;
}

public byte getIAEAR5E() {
return IAEAR5E;
}

public int getIAEAR5L() {
return IAEAR5L;
}

public byte getIAEAR5R() {
return IAEAR5R;
}

public int getIAEAR5U() {
return IAEAR5U;
}

public byte getIAEAR6E() {
return IAEAR6E;
}

public int getIAEAR6L() {
return IAEAR6L;
}

public byte getIAEAR6R() {
return IAEAR6R;
}

public int getIAEAR6U() {
return IAEAR6U;
}

public byte getIAEAR7E() {
return IAEAR7E;
}

public int getIAEAR7L() {
return IAEAR7L;
}

public byte getIAEAR7R() {
return IAEAR7R;
}

public int getIAEAR7U() {
return IAEAR7U;
}

public byte getIAEAR8E() {
return IAEAR8E;
}

public int getIAEAR8L() {
return IAEAR8L;
}

public byte getIAEAR8R() {
return IAEAR8R;
}

public int getIAEAR8U() {
return IAEAR8U;
}

public byte getIAEAR9E() {
return IAEAR9E;
}

public short getIAEAR9L() {
return IAEAR9L;
}

public byte getIAEAR9R() {
return IAEAR9R;
}

public short getIAEAR9U() {
return IAEAR9U;
}

public byte getIAEARE() {
return IAEARE;
}

public int getIAEARL() {
return IAEARL;
}

public boolean getIAEARN11() {
return IAEARN11;
}

public byte getIAEARR() {
return IAEARR;
}

public int getIAEARU() {
return IAEARU;
}

public short getIAERN() {
return IAERN;
}

public byte getIAERN10() {
return IAERN10;
}

public int getIAERN2() {
return IAERN2;
}

public int getIAERN3() {
return IAERN3;
}

public int getIAERN4() {
return IAERN4;
}

public int getIAERN5() {
return IAERN5;
}

public short getIAERN6() {
return IAERN6;
}

public short getIAERN7() {
return IAERN7;
}

public short getIAERN8() {
return IAERN8;
}

public byte getIAERN9() {
return IAERN9;
}

public byte getIAFBAE() {
return IAFBAE;
}

public int getIAFBAL() {
return IAFBAL;
}

public byte getIAFBAR() {
return IAFBAR;
}

public int getIAFBAU() {
return IAFBAU;
}

public byte getIAFUEL() {
return IAFUEL;
}

public byte getIAHDB() {
return IAHDB;
}

public byte getIAHDN95() {
return IAHDN95;
}

public byte getIAHDN96() {
return IAHDN96;
}

public byte getIAHDNAA() {
return IAHDNAA;
}

public byte getIAHDNCA() {
return IAHDNCA;
}

public byte getIAHDNDL() {
return IAHDNDL;
}

public byte getIAHDNIB() {
return IAHDNIB;
}

public byte getIAHDNII() {
return IAHDNII;
}

public byte getIAHDNSD() {
return IAHDNSD;
}

public byte getIAHDNSP() {
return IAHDNSP;
}

public byte getIAHDNWD() {
return IAHDNWD;
}

public byte getIAHDP95() {
return IAHDP95;
}

public byte getIAHDP96() {
return IAHDP96;
}

public byte getIAHDPAA() {
return IAHDPAA;
}

public byte getIAHDPCA() {
return IAHDPCA;
}

public byte getIAHDPDL() {
return IAHDPDL;
}

public byte getIAHDPIB() {
return IAHDPIB;
}

public byte getIAHDPII() {
return IAHDPII;
}

public byte getIAHDPM85() {
return IAHDPM85;
}

public byte getIAHDPM86() {
return IAHDPM86;
}

public byte getIAHDPM96() {
return IAHDPM96;
}

public byte getIAHDPMAA() {
return IAHDPMAA;
}

public byte getIAHDPMCA() {
return IAHDPMCA;
}

public byte getIAHDPMDL() {
return IAHDPMDL;
}

public byte getIAHDPMIB() {
return IAHDPMIB;
}

public byte getIAHDPMII() {
return IAHDPMII;
}

public byte getIAHDPMSD() {
return IAHDPMSD;
}

public byte getIAHDPMSP() {
return IAHDPMSP;
}

public byte getIAHDPMWD() {
return IAHDPMWD;
}

public byte getIAHDPN85() {
return IAHDPN85;
}

public byte getIAHDPN96() {
return IAHDPN96;
}

public byte getIAHDPNAA() {
return IAHDPNAA;
}

public byte getIAHDPNCA() {
return IAHDPNCA;
}

public byte getIAHDPNDL() {
return IAHDPNDL;
}

public byte getIAHDPNIB() {
return IAHDPNIB;
}

public byte getIAHDPNII() {
return IAHDPNII;
}

public byte getIAHDPNSD() {
return IAHDPNSD;
}

public byte getIAHDPNSP() {
return IAHDPNSP;
}

public byte getIAHDPNWD() {
return IAHDPNWD;
}

public byte getIAHDPSD() {
return IAHDPSD;
}

public byte getIAHDPSP() {
return IAHDPSP;
}

public byte getIAHDPWD() {
return IAHDPWD;
}

public byte getIAHDR95() {
return IAHDR95;
}

public byte getIAHDR96() {
return IAHDR96;
}

public byte getIAHDRAA() {
return IAHDRAA;
}

public byte getIAHDRCA() {
return IAHDRCA;
}

public byte getIAHDRDL() {
return IAHDRDL;
}

public byte getIAHDRIB() {
return IAHDRIB;
}

public byte getIAHDRII() {
return IAHDRII;
}

public byte getIAHDRM85() {
return IAHDRM85;
}

public byte getIAHDRM86() {
return IAHDRM86;
}

public byte getIAHDRM96() {
return IAHDRM96;
}

public byte getIAHDRMAA() {
return IAHDRMAA;
}

public byte getIAHDRMCA() {
return IAHDRMCA;
}

public byte getIAHDRMDL() {
return IAHDRMDL;
}

public byte getIAHDRMIB() {
return IAHDRMIB;
}

public byte getIAHDRMII() {
return IAHDRMII;
}

public byte getIAHDRMOT() {
return IAHDRMOT;
}

public byte getIAHDRMSD() {
return IAHDRMSD;
}

public byte getIAHDRMSP() {
return IAHDRMSP;
}

public byte getIAHDRMWD() {
return IAHDRMWD;
}

public byte getIAHDRSD() {
return IAHDRSD;
}

public byte getIAHDRSP() {
return IAHDRSP;
}

public byte getIAHDRWD() {
return IAHDRWD;
}

public byte getIAHOMEE() {
return IAHOMEE;
}

public int getIAHOMEL() {
return IAHOMEL;
}

public byte getIAHOMER() {
return IAHOMER;
}

public int getIAHOMEU() {
return IAHOMEU;
}

public byte getIAIRAE() {
return IAIRAE;
}

public int getIAIRAL() {
return IAIRAL;
}

public byte getIAIRAR() {
return IAIRAR;
}

public int getIAIRAU() {
return IAIRAU;
}

public byte getIAISACAS() {
return IAISACAS;
}

public byte getIAISADE() {
return IAISADE;
}

public short getIAISADL() {
return IAISADL;
}

public byte getIAISADR() {
return IAISADR;
}

public short getIAISADU() {
return IAISADU;
}

public byte getIAISALI() {
return IAISALI;
}

public byte getIAISASHA() {
return IAISASHA;
}

public byte getIALIPAE() {
return IALIPAE;
}

public int getIALIPAL() {
return IALIPAL;
}

public byte getIALIPAR() {
return IALIPAR;
}

public int getIALIPAU() {
return IALIPAU;
}

public byte getIALISAE() {
return IALISAE;
}

public short getIALISAL() {
return IALISAL;
}

public byte getIALISAR() {
return IALISAR;
}

public short getIALISAU() {
return IALISAU;
}

public byte getIALIYAE() {
return IALIYAE;
}

public int getIALIYAL() {
return IALIYAL;
}

public byte getIALIYAR() {
return IALIYAR;
}

public int getIALIYAU() {
return IALIYAU;
}

public byte getIALM19() {
return IALM19;
}

public boolean getIALM20() {
return IALM20;
}

public byte getIALM21() {
return IALM21;
}

public byte getIALM22() {
return IALM22;
}

public byte getIALM23() {
return IALM23;
}

public byte getIALM24() {
return IALM24;
}

public byte getIALM25() {
return IALM25;
}

public byte getIALM26() {
return IALM26;
}

public byte getIALM27() {
return IALM27;
}

public byte getIALM37() {
return IALM37;
}

public byte getIALM38() {
return IALM38;
}

public byte getIALM39() {
return IALM39;
}

public byte getIALM40() {
return IALM40;
}

public byte getIALM41() {
return IALM41;
}

public byte getIALM42() {
return IALM42;
}

public byte getIALM43() {
return IALM43;
}

public byte getIALM44() {
return IALM44;
}

public byte getIALM45() {
return IALM45;
}

public byte getIALM55() {
return IALM55;
}

public byte getIALM56() {
return IALM56;
}

public byte getIALM57() {
return IALM57;
}

public byte getIALM58() {
return IALM58;
}

public boolean getIALM59() {
return IALM59;
}

public byte getIALM60() {
return IALM60;
}

public byte getIALM61() {
return IALM61;
}

public byte getIALM62() {
return IALM62;
}

public byte getIALM63() {
return IALM63;
}

public byte getIALOAME() {
return IALOAME;
}

public short getIALOAML() {
return IALOAML;
}

public byte getIALOAMR() {
return IALOAMR;
}

public short getIALOAMU() {
return IALOAMU;
}

public byte getIALOAN96() {
return IALOAN96;
}

public byte getIALOANHP() {
return IALOANHP;
}

public byte getIALOANML() {
return IALOANML;
}

public byte getIALOANMO() {
return IALOANMO;
}

public byte getIALOANOD() {
return IALOANOD;
}

public byte getIALOANPL() {
return IALOANPL;
}

public byte getIALOANSF() {
return IALOANSF;
}

public byte getIALREFE() {
return IALREFE;
}

public byte getIALREFL() {
return IALREFL;
}

public byte getIALREFR() {
return IALREFR;
}

public byte getIALREFU() {
return IALREFU;
}

public byte getIALREME() {
return IALREME;
}

public short getIALREML() {
return IALREML;
}

public byte getIALREMR() {
return IALREMR;
}

public short getIALREMU() {
return IALREMU;
}

public byte getIALREOE() {
return IALREOE;
}

public short getIALREOL() {
return IALREOL;
}

public byte getIALREOR() {
return IALREOR;
}

public short getIALREOU() {
return IALREOU;
}

public byte getIALREWE() {
return IALREWE;
}

public short getIALREWL() {
return IALREWL;
}

public byte getIALREWR() {
return IALREWR;
}

public byte getIALREWU() {
return IALREWU;
}

public byte getIALREYE() {
return IALREYE;
}

public short getIALREYL() {
return IALREYL;
}

public byte getIALREYR() {
return IALREYR;
}

public short getIALREYU() {
return IALREYU;
}

public byte getIALY() {
return IALY;
}

public byte getIALY10() {
return IALY10;
}

public boolean getIALY11() {
return IALY11;
}

public boolean getIALY12() {
return IALY12;
}

public boolean getIALY13() {
return IALY13;
}

public boolean getIALY14() {
return IALY14;
}

public boolean getIALY15() {
return IALY15;
}

public boolean getIALY16() {
return IALY16;
}

public boolean getIALY17() {
return IALY17;
}

public boolean getIALY18() {
return IALY18;
}

public byte getIALY19() {
return IALY19;
}

public byte getIALY2() {
return IALY2;
}

public byte getIALY20() {
return IALY20;
}

public byte getIALY21() {
return IALY21;
}

public byte getIALY22() {
return IALY22;
}

public byte getIALY23() {
return IALY23;
}

public byte getIALY24() {
return IALY24;
}

public byte getIALY25() {
return IALY25;
}

public byte getIALY26() {
return IALY26;
}

public byte getIALY27() {
return IALY27;
}

public byte getIALY28() {
return IALY28;
}

public boolean getIALY29() {
return IALY29;
}

public byte getIALY3() {
return IALY3;
}

public boolean getIALY30() {
return IALY30;
}

public boolean getIALY31() {
return IALY31;
}

public boolean getIALY32() {
return IALY32;
}

public boolean getIALY33() {
return IALY33;
}

public boolean getIALY34() {
return IALY34;
}

public boolean getIALY35() {
return IALY35;
}

public boolean getIALY36() {
return IALY36;
}

public byte getIALY37() {
return IALY37;
}

public byte getIALY38() {
return IALY38;
}

public byte getIALY39() {
return IALY39;
}

public byte getIALY4() {
return IALY4;
}

public byte getIALY40() {
return IALY40;
}

public byte getIALY41() {
return IALY41;
}

public byte getIALY42() {
return IALY42;
}

public byte getIALY43() {
return IALY43;
}

public byte getIALY44() {
return IALY44;
}

public byte getIALY45() {
return IALY45;
}

public byte getIALY46() {
return IALY46;
}

public byte getIALY47() {
return IALY47;
}

public boolean getIALY48() {
return IALY48;
}

public boolean getIALY49() {
return IALY49;
}

public byte getIALY5() {
return IALY5;
}

public boolean getIALY50() {
return IALY50;
}

public boolean getIALY51() {
return IALY51;
}

public boolean getIALY52() {
return IALY52;
}

public boolean getIALY53() {
return IALY53;
}

public boolean getIALY54() {
return IALY54;
}

public byte getIALY55() {
return IALY55;
}

public byte getIALY56() {
return IALY56;
}

public byte getIALY57() {
return IALY57;
}

public byte getIALY58() {
return IALY58;
}

public boolean getIALY59() {
return IALY59;
}

public byte getIALY6() {
return IALY6;
}

public byte getIALY60() {
return IALY60;
}

public byte getIALY61() {
return IALY61;
}

public byte getIALY62() {
return IALY62;
}

public byte getIALY63() {
return IALY63;
}

public byte getIALY7() {
return IALY7;
}

public byte getIALY8() {
return IALY8;
}

public boolean getIALY9() {
return IALY9;
}

public byte getIANPBPE() {
return IANPBPE;
}

public short getIANPBPL() {
return IANPBPL;
}

public byte getIANPBPR() {
return IANPBPR;
}

public short getIANPBPU() {
return IANPBPU;
}

public byte getIAOASAE() {
return IAOASAE;
}

public int getIAOASAL() {
return IAOASAL;
}

public byte getIAOASAR() {
return IAOASAR;
}

public int getIAOASAU() {
return IAOASAU;
}

public byte getIAOMME() {
return IAOMME;
}

public int getIAOMML() {
return IAOMML;
}

public byte getIAOMMR() {
return IAOMMR;
}

public int getIAOMMU() {
return IAOMMU;
}

public byte getIAOTHP3() {
return IAOTHP3;
}

public byte getIAOWEME() {
return IAOWEME;
}

public short getIAOWEML() {
return IAOWEML;
}

public byte getIAOWEMR() {
return IAOWEMR;
}

public short getIAOWEMU() {
return IAOWEMU;
}

public byte getIAP39() {
return IAP39;
}

public byte getIAP40() {
return IAP40;
}

public byte getIAP41() {
return IAP41;
}

public byte getIAP42() {
return IAP42;
}

public byte getIAP43() {
return IAP43;
}

public byte getIAP44() {
return IAP44;
}

public byte getIAP45() {
return IAP45;
}

public byte getIAP46() {
return IAP46;
}

public byte getIAP47() {
return IAP47;
}

public byte getIAP48() {
return IAP48;
}

public byte getIAP49() {
return IAP49;
}

public byte getIAP50() {
return IAP50;
}

public byte getIAP51() {
return IAP51;
}

public byte getIAP52() {
return IAP52;
}

public byte getIAP53() {
return IAP53;
}

public byte getIAP54() {
return IAP54;
}

public byte getIAP55() {
return IAP55;
}

public byte getIAP56() {
return IAP56;
}

public byte getIAP57() {
return IAP57;
}

public byte getIAP58() {
return IAP58;
}

public byte getIAP59() {
return IAP59;
}

public byte getIAP60() {
return IAP60;
}

public byte getIAP61() {
return IAP61;
}

public byte getIAP62() {
return IAP62;
}

public byte getIAP63() {
return IAP63;
}

public byte getIAP64() {
return IAP64;
}

public byte getIAP65() {
return IAP65;
}

public byte getIAP66() {
return IAP66;
}

public byte getIAP67() {
return IAP67;
}

public byte getIAP68() {
return IAP68;
}

public boolean getIAP69() {
return IAP69;
}

public byte getIAP70() {
return IAP70;
}

public byte getIAP71() {
return IAP71;
}

public byte getIAP72() {
return IAP72;
}

public byte getIAPAY() {
return IAPAY;
}

public byte getIAPAY2() {
return IAPAY2;
}

public byte getIAPAY3() {
return IAPAY3;
}

public byte getIAPAYR() {
return IAPAYR;
}

public byte getIAPAYR2() {
return IAPAYR2;
}

public byte getIAPAYR3() {
return IAPAYR3;
}

public byte getIAPAYW11() {
return IAPAYW11;
}

public byte getIAPK95() {
return IAPK95;
}

public byte getIAPK96() {
return IAPK96;
}

public byte getIAPKGW() {
return IAPKGW;
}

public byte getIAPKIOB() {
return IAPKIOB;
}

public byte getIAPKLI() {
return IAPKLI;
}

public byte getIAPKM1E() {
return IAPKM1E;
}

public int getIAPKM1L() {
return IAPKM1L;
}

public byte getIAPKM1R() {
return IAPKM1R;
}

public int getIAPKM1U() {
return IAPKM1U;
}

public byte getIAPKM2E() {
return IAPKM2E;
}

public int getIAPKM2L() {
return IAPKM2L;
}

public byte getIAPKM2R() {
return IAPKM2R;
}

public int getIAPKM2U() {
return IAPKM2U;
}

public byte getIAPKM3E() {
return IAPKM3E;
}

public boolean getIAPKM3L() {
return IAPKM3L;
}

public byte getIAPKM3R() {
return IAPKM3R;
}

public short getIAPKM3U() {
return IAPKM3U;
}

public byte getIAPKM4E() {
return IAPKM4E;
}

public short getIAPKM4L() {
return IAPKM4L;
}

public byte getIAPKM4R() {
return IAPKM4R;
}

public short getIAPKM4U() {
return IAPKM4U;
}

public byte getIAPKM5E() {
return IAPKM5E;
}

public int getIAPKM5L() {
return IAPKM5L;
}

public byte getIAPKM5R() {
return IAPKM5R;
}

public int getIAPKM5U() {
return IAPKM5U;
}

public byte getIAPKM6E() {
return IAPKM6E;
}

public int getIAPKM6L() {
return IAPKM6L;
}

public byte getIAPKM6R() {
return IAPKM6R;
}

public int getIAPKM6U() {
return IAPKM6U;
}

public byte getIAPKM7E() {
return IAPKM7E;
}

public short getIAPKM7L() {
return IAPKM7L;
}

public byte getIAPKM7R() {
return IAPKM7R;
}

public short getIAPKM7U() {
return IAPKM7U;
}

public byte getIAPKM85() {
return IAPKM85;
}

public byte getIAPKM86() {
return IAPKM86;
}

public byte getIAPKM8E() {
return IAPKM8E;
}

public int getIAPKM8L() {
return IAPKM8L;
}

public byte getIAPKM8R() {
return IAPKM8R;
}

public int getIAPKM8U() {
return IAPKM8U;
}

public byte getIAPKM96() {
return IAPKM96;
}

public byte getIAPKMGW() {
return IAPKMGW;
}

public byte getIAPKMIOB() {
return IAPKMIOB;
}

public byte getIAPKMLI() {
return IAPKMLI;
}

public byte getIAPKMOIP() {
return IAPKMOIP;
}

public byte getIAPKMPAP() {
return IAPKMPAP;
}

public byte getIAPKMPP() {
return IAPKMPP;
}

public byte getIAPKMRP() {
return IAPKMRP;
}

public byte getIAPKOIP() {
return IAPKOIP;
}

public byte getIAPKPAP() {
return IAPKPAP;
}

public byte getIAPKPP() {
return IAPKPP;
}

public byte getIAPKRP() {
return IAPKRP;
}

public byte getIAPLW() {
return IAPLW;
}

public byte getIAPLY() {
return IAPLY;
}

public byte getIAPLYP() {
return IAPLYP;
}

public byte getIAPLYW() {
return IAPLYW;
}

public byte getIAPPAFE() {
return IAPPAFE;
}

public boolean getIAPPAFL() {
return IAPPAFL;
}

public byte getIAPPAFR() {
return IAPPAFR;
}

public short getIAPPAFU() {
return IAPPAFU;
}

public byte getIAPPAME() {
return IAPPAME;
}

public short getIAPPAML() {
return IAPPAML;
}

public byte getIAPPAMR() {
return IAPPAMR;
}

public short getIAPPAMU() {
return IAPPAMU;
}

public byte getIAPPAOE() {
return IAPPAOE;
}

public short getIAPPAOL() {
return IAPPAOL;
}

public byte getIAPPAOR() {
return IAPPAOR;
}

public short getIAPPAOU() {
return IAPPAOU;
}

public byte getIAPPAWE() {
return IAPPAWE;
}

public short getIAPPAWL() {
return IAPPAWL;
}

public byte getIAPPAWR() {
return IAPPAWR;
}

public short getIAPPAWU() {
return IAPPAWU;
}

public byte getIAPPAYE() {
return IAPPAYE;
}

public short getIAPPAYL() {
return IAPPAYL;
}

public byte getIAPPAYR() {
return IAPPAYR;
}

public short getIAPPAYU() {
return IAPPAYU;
}

public byte getIAPPEIE() {
return IAPPEIE;
}

public short getIAPPEIL() {
return IAPPEIL;
}

public byte getIAPPEIR() {
return IAPPEIR;
}

public short getIAPPEIU() {
return IAPPEIU;
}

public int getIAPPMO() {
return IAPPMO;
}

public byte getIAPROP95() {
return IAPROP95;
}

public byte getIAPROP96() {
return IAPROP96;
}

public byte getIAPROPFA() {
return IAPROPFA;
}

public byte getIAPROPHO() {
return IAPROPHO;
}

public byte getIAPROPIN() {
return IAPROPIN;
}

public byte getIAPROPOL() {
return IAPROPOL;
}

public byte getIAPROPOW() {
return IAPROPOW;
}

public byte getIAPROPTR() {
return IAPROPTR;
}

public byte getIAPYW2() {
return IAPYW2;
}

public byte getIAPYW3() {
return IAPYW3;
}

public byte getIAPYW5() {
return IAPYW5;
}

public byte getIAPYW6() {
return IAPYW6;
}

public byte getIAPYW7() {
return IAPYW7;
}

public byte getIAPYW8() {
return IAPYW8;
}

public byte getIAPYW9() {
return IAPYW9;
}

public byte getIARECE() {
return IARECE;
}

public short getIARECL() {
return IARECL;
}

public byte getIARECR() {
return IARECR;
}

public short getIARECU() {
return IARECU;
}

public short getIAREGM3() {
return IAREGM3;
}

public byte getIAREGO3() {
return IAREGO3;
}

public boolean getIAREPFE() {
return IAREPFE;
}

public boolean getIAREPFL() {
return IAREPFL;
}

public boolean getIAREPFR() {
return IAREPFR;
}

public boolean getIAREPFU() {
return IAREPFU;
}

public byte getIAREPME() {
return IAREPME;
}

public byte getIAREPML() {
return IAREPML;
}

public byte getIAREPMR() {
return IAREPMR;
}

public short getIAREPMU() {
return IAREPMU;
}

public byte getIAREPOE() {
return IAREPOE;
}

public short getIAREPOL() {
return IAREPOL;
}

public byte getIAREPOR() {
return IAREPOR;
}

public short getIAREPOU() {
return IAREPOU;
}

public byte getIAREPWE() {
return IAREPWE;
}

public byte getIAREPWL() {
return IAREPWL;
}

public byte getIAREPWR() {
return IAREPWR;
}

public byte getIAREPWU() {
return IAREPWU;
}

public byte getIAREPYE() {
return IAREPYE;
}

public byte getIAREPYL() {
return IAREPYL;
}

public byte getIAREPYR() {
return IAREPYR;
}

public short getIAREPYU() {
return IAREPYU;
}

public boolean getIARG2FE() {
return IARG2FE;
}

public boolean getIARG2FL() {
return IARG2FL;
}

public boolean getIARG2FR() {
return IARG2FR;
}

public boolean getIARG2FU() {
return IARG2FU;
}

public byte getIARG2ME() {
return IARG2ME;
}

public short getIARG2ML() {
return IARG2ML;
}

public byte getIARG2MR() {
return IARG2MR;
}

public short getIARG2MU() {
return IARG2MU;
}

public byte getIARG2OE() {
return IARG2OE;
}

public byte getIARG2OL() {
return IARG2OL;
}

public byte getIARG2OR() {
return IARG2OR;
}

public byte getIARG2OU() {
return IARG2OU;
}

public boolean getIARG2WE() {
return IARG2WE;
}

public boolean getIARG2WL() {
return IARG2WL;
}

public boolean getIARG2WR() {
return IARG2WR;
}

public boolean getIARG2WU() {
return IARG2WU;
}

public boolean getIARG2YE() {
return IARG2YE;
}

public boolean getIARG2YL() {
return IARG2YL;
}

public boolean getIARG2YR() {
return IARG2YR;
}

public boolean getIARG2YU() {
return IARG2YU;
}

public boolean getIARG3FE() {
return IARG3FE;
}

public boolean getIARG3FL() {
return IARG3FL;
}

public boolean getIARG3FR() {
return IARG3FR;
}

public boolean getIARG3FU() {
return IARG3FU;
}

public boolean getIARG3ME() {
return IARG3ME;
}

public boolean getIARG3ML() {
return IARG3ML;
}

public boolean getIARG3MR() {
return IARG3MR;
}

public boolean getIARG3MU() {
return IARG3MU;
}

public boolean getIARG3OE() {
return IARG3OE;
}

public boolean getIARG3OL() {
return IARG3OL;
}

public boolean getIARG3OR() {
return IARG3OR;
}

public boolean getIARG3OU() {
return IARG3OU;
}

public boolean getIARG3WE() {
return IARG3WE;
}

public boolean getIARG3WL() {
return IARG3WL;
}

public boolean getIARG3WR() {
return IARG3WR;
}

public boolean getIARG3WU() {
return IARG3WU;
}

public boolean getIARG3YE() {
return IARG3YE;
}

public boolean getIARG3YL() {
return IARG3YL;
}

public boolean getIARG3YR() {
return IARG3YR;
}

public boolean getIARG3YU() {
return IARG3YU;
}

public boolean getIARGFE() {
return IARGFE;
}

public boolean getIARGFL() {
return IARGFL;
}

public boolean getIARGFR() {
return IARGFR;
}

public boolean getIARGFU() {
return IARGFU;
}

public byte getIARGME() {
return IARGME;
}

public short getIARGML() {
return IARGML;
}

public byte getIARGMR() {
return IARGMR;
}

public short getIARGMU() {
return IARGMU;
}

public byte getIARGMW() {
return IARGMW;
}

public boolean getIARGMW2() {
return IARGMW2;
}

public boolean getIARGMW3() {
return IARGMW3;
}

public byte getIARGMWP() {
return IARGMWP;
}

public byte getIARGOE() {
return IARGOE;
}

public short getIARGOL() {
return IARGOL;
}

public byte getIARGOR() {
return IARGOR;
}

public short getIARGOU() {
return IARGOU;
}

public byte getIARGWE() {
return IARGWE;
}

public byte getIARGWL() {
return IARGWL;
}

public byte getIARGWR() {
return IARGWR;
}

public byte getIARGWU() {
return IARGWU;
}

public byte getIARGYE() {
return IARGYE;
}

public byte getIARGYL() {
return IARGYL;
}

public byte getIARGYR() {
return IARGYR;
}

public byte getIARGYR1() {
return IARGYR1;
}

public byte getIARGYR2() {
return IARGYR2;
}

public boolean getIARGYR3() {
return IARGYR3;
}

public byte getIARGYRP() {
return IARGYRP;
}

public byte getIARGYU() {
return IARGYU;
}

public byte getIARMWA() {
return IARMWA;
}

public boolean getIARMWA2() {
return IARMWA2;
}

public boolean getIARMWA3() {
return IARMWA3;
}

public boolean getIARMWPA() {
return IARMWPA;
}

public byte getIASAVAE() {
return IASAVAE;
}

public int getIASAVAL() {
return IASAVAL;
}

public byte getIASAVAR() {
return IASAVAR;
}

public int getIASAVAU() {
return IASAVAU;
}

public byte getIASCAE() {
return IASCAE;
}

public int getIASCAL() {
return IASCAL;
}

public byte getIASCAR() {
return IASCAR;
}

public int getIASCAU() {
return IASCAU;
}

public byte getIASHTFOL() {
return IASHTFOL;
}

public byte getIASHTMUT() {
return IASHTMUT;
}

public byte getIASHTPRI() {
return IASHTPRI;
}

public byte getIASHTUKL() {
return IASHTUKL;
}

public byte getIASI95() {
return IASI95;
}

public byte getIASI96() {
return IASI96;
}

public byte getIASIBG() {
return IASIBG;
}

public byte getIASICA() {
return IASICA;
}

public byte getIASIISA() {
return IASIISA;
}

public byte getIASINS() {
return IASINS;
}

public byte getIASIOIE() {
return IASIOIE;
}

public short getIASIOIL() {
return IASIOIL;
}

public byte getIASIOIR() {
return IASIOIR;
}

public short getIASIOIU() {
return IASIOIU;
}

public byte getIASIOPT() {
return IASIOPT;
}

public byte getIASIPB() {
return IASIPB;
}

public byte getIASIPEP() {
return IASIPEP;
}

public byte getIASISAE() {
return IASISAE;
}

public int getIASISAL() {
return IASISAL;
}

public byte getIASISAR() {
return IASISAR;
}

public int getIASISAU() {
return IASISAU;
}

public byte getIASISAV() {
return IASISAV;
}

public byte getIASISC() {
return IASISC;
}

public byte getIASISHA() {
return IASISHA;
}

public byte getIASITESS() {
return IASITESS;
}

public byte getIASIUIT() {
return IASIUIT;
}

public byte getIASSSE() {
return IASSSE;
}

public byte getIASSSIE() {
return IASSSIE;
}

public short getIASSSIL() {
return IASSSIL;
}

public byte getIASSSIR() {
return IASSSIR;
}

public short getIASSSIU() {
return IASSSIU;
}

public int getIASSSL() {
return IASSSL;
}

public byte getIASSSR() {
return IASSSR;
}

public int getIASSSU() {
return IASSSU;
}

public boolean getIAT39() {
return IAT39;
}

public boolean getIAT40() {
return IAT40;
}

public boolean getIAT41() {
return IAT41;
}

public boolean getIAT42() {
return IAT42;
}

public boolean getIAT43() {
return IAT43;
}

public boolean getIAT44() {
return IAT44;
}

public boolean getIAT45() {
return IAT45;
}

public boolean getIAT46() {
return IAT46;
}

public boolean getIAT47() {
return IAT47;
}

public boolean getIAT48() {
return IAT48;
}

public boolean getIAT49() {
return IAT49;
}

public boolean getIAT50() {
return IAT50;
}

public boolean getIAT51() {
return IAT51;
}

public boolean getIAT52() {
return IAT52;
}

public boolean getIAT53() {
return IAT53;
}

public boolean getIAT54() {
return IAT54;
}

public boolean getIAT55() {
return IAT55;
}

public boolean getIAT56() {
return IAT56;
}

public boolean getIAT57() {
return IAT57;
}

public boolean getIAT58() {
return IAT58;
}

public boolean getIAT59() {
return IAT59;
}

public boolean getIAT60() {
return IAT60;
}

public boolean getIAT61() {
return IAT61;
}

public boolean getIAT62() {
return IAT62;
}

public boolean getIAT63() {
return IAT63;
}

public boolean getIAT64() {
return IAT64;
}

public boolean getIAT65() {
return IAT65;
}

public boolean getIAT66() {
return IAT66;
}

public boolean getIAT67() {
return IAT67;
}

public boolean getIAT68() {
return IAT68;
}

public boolean getIAT69() {
return IAT69;
}

public boolean getIAT70() {
return IAT70;
}

public boolean getIAT71() {
return IAT71;
}

public boolean getIAT72() {
return IAT72;
}

public byte getIAUITE() {
return IAUITE;
}

public byte getIAUITIE() {
return IAUITIE;
}

public short getIAUITIL() {
return IAUITIL;
}

public byte getIAUITIR() {
return IAUITIR;
}

public short getIAUITIU() {
return IAUITIU;
}

public int getIAUITL() {
return IAUITL;
}

public byte getIAUITR() {
return IAUITR;
}

public int getIAUITU() {
return IAUITU;
}

public byte getIAW1R() {
return IAW1R;
}

public byte getIFLAG_DBSR1() {
return IFLAG_DBSR1;
}

public byte getIFLAG_DBSR2() {
return IFLAG_DBSR2;
}

public byte getIFLAG_DCCONT() {
return IFLAG_DCCONT;
}

public byte getIFLAG_DCFUND() {
return IFLAG_DCFUND;
}

public boolean getIFLAG_EARN() {
return IFLAG_EARN;
}

public byte getIFLAG_REC() {
return IFLAG_REC;
}

public byte getIFLAG_RTEN() {
return IFLAG_RTEN;
}

public byte getIGF1() {
return IGF1;
}

public byte getINHALER() {
return INHALER;
}

public byte getINHALHRS() {
return INHALHRS;
}

public double getINRECEIPT_08() {
return INRECEIPT_08;
}

public double getINRECEIPT_SPA() {
return INRECEIPT_SPA;
}

public double getLDL() {
return LDL;
}

public byte getLFNOMEA() {
return LFNOMEA;
}

public byte getLFRESP() {
return LFRESP;
}

public byte getLFSTAND() {
return LFSTAND;
}

public double getLFTEMP() {
return LFTEMP;
}

public byte getLFWILL() {
return LFWILL;
}

public byte getLIGHTEAT() {
return LIGHTEAT;
}

public byte getMAINHH() {
return MAINHH;
}

public short getMAP1() {
return MAP1;
}

public short getMAP2() {
return MAP2;
}

public short getMAP3() {
return MAP3;
}

public double getMAPVAL() {
return MAPVAL;
}

public double getMCH() {
return MCH;
}

public byte getMMAIDC() {
return MMAIDC;
}

public byte getMMBCSC() {
return MMBCSC;
}

public byte getMMCOM85() {
return MMCOM85;
}

public byte getMMCOM86() {
return MMCOM86;
}

public byte getMMCOMNI() {
return MMCOMNI;
}

public byte getMMCOMPA() {
return MMCOMPA;
}

public byte getMMCOMRF() {
return MMCOMRF;
}

public byte getMMCOMSP() {
return MMCOMSP;
}

public byte getMMCOMUN() {
return MMCOMUN;
}

public byte getMMCRAV() {
return MMCRAV;
}

public byte getMMCRNA() {
return MMCRNA;
}

public byte getMMCRRE() {
return MMCRRE;
}

public byte getMMCRSC() {
return MMCRSC;
}

public byte getMMFTNA() {
return MMFTNA;
}

public byte getMMFTRE2() {
return MMFTRE2;
}

public byte getMMFTSC() {
return MMFTSC;
}

public double getMMFTTI() {
return MMFTTI;
}

public byte getMMGSD1() {
return MMGSD1;
}

public byte getMMGSD2() {
return MMGSD2;
}

public byte getMMGSD3() {
return MMGSD3;
}

public byte getMMGSDOM() {
return MMGSDOM;
}

public byte getMMGSN1() {
return MMGSN1;
}

public byte getMMGSN2() {
return MMGSN2;
}

public byte getMMGSN3() {
return MMGSN3;
}

public byte getMMGSPREQ() {
return MMGSPREQ;
}

public byte getMMGSPROT() {
return MMGSPROT;
}

public byte getMMGSPRPA() {
return MMGSPRPA;
}

public byte getMMGSPRRE() {
return MMGSPRRE;
}

public byte getMMGSRES() {
return MMGSRES;
}

public byte getMMGSSTA() {
return MMGSSTA;
}

public byte getMMGSTP() {
return MMGSTP;
}

public byte getMMGSWIL() {
return MMGSWIL;
}

public byte getMMLONA() {
return MMLONA;
}

public byte getMMLORE() {
return MMLORE;
}

public byte getMMLOSC() {
return MMLOSC;
}

public double getMMLOTI() {
return MMLOTI;
}

public byte getMMLSNA() {
return MMLSNA;
}

public byte getMMLSRE() {
return MMLSRE;
}

public byte getMMLSSC() {
return MMLSSC;
}

public double getMMLSTI() {
return MMLSTI;
}

public byte getMMRECRC() {
return MMRECRC;
}

public double getMMRRFTI() {
return MMRRFTI;
}

public byte getMMRRNA() {
return MMRRNA;
}

public byte getMMRROC() {
return MMRROC;
}

public byte getMMRRRE() {
return MMRRRE;
}

public byte getMMRRSC() {
return MMRRSC;
}

public double getMMRRTTI() {
return MMRRTTI;
}

public byte getMMSSNA() {
return MMSSNA;
}

public byte getMMSSRE() {
return MMSSRE;
}

public byte getMMSSSC() {
return MMSSSC;
}

public double getMMSSTI() {
return MMSSTI;
}

public byte getMMSTNA() {
return MMSTNA;
}

public byte getMMSTRE() {
return MMSTRE;
}

public byte getMMSTSC() {
return MMSTSC;
}

public double getMMSTTI() {
return MMSTTI;
}

public byte getMOTHER() {
return MOTHER;
}

public byte getMTHAGD() {
return MTHAGD;
}

public byte getNATTBPCO() {
return NATTBPCO;
}

public byte getNATTBPCU() {
return NATTBPCU;
}

public byte getNATTBPEQ() {
return NATTBPEQ;
}

public byte getNATTBPER() {
return NATTBPER;
}

public byte getNATTBPOT() {
return NATTBPOT;
}

public byte getNATTBPUP() {
return NATTBPUP;
}

public byte getNCLM() {
return NCLM;
}

public byte getNCORRECT() {
return NCORRECT;
}

public byte getNLSATLF() {
return NLSATLF;
}

public byte getNMISSED() {
return NMISSED;
}

public byte getNOATTLF() {
return NOATTLF;
}

public byte getNOBSMFA() {
return NOBSMFA;
}

public byte getNOBSMOT() {
return NOBSMOT;
}

public byte getNOBSMSV() {
return NOBSMSV;
}

public byte getNOBSMUP() {
return NOBSMUP;
}

public byte getNOHTBCBE() {
return NOHTBCBE;
}

public byte getNOHTBCCH() {
return NOHTBCCH;
}

public byte getNOHTBCEQ() {
return NOHTBCEQ;
}

public byte getNOHTBCOT() {
return NOHTBCOT;
}

public byte getNOHTBCPA() {
return NOHTBCPA;
}

public byte getNOHTBCSH() {
return NOHTBCSH;
}

public byte getNOHTBCST() {
return NOHTBCST;
}

public byte getNOHTBCUN() {
return NOHTBCUN;
}

public byte getNOREAD() {
return NOREAD;
}

public byte getNOWTBCBE() {
return NOWTBCBE;
}

public byte getNOWTBCCH() {
return NOWTBCCH;
}

public byte getNOWTBCHE() {
return NOWTBCHE;
}

public byte getNOWTBCOT() {
return NOWTBCOT;
}

public byte getNOWTBCPA() {
return NOWTBCPA;
}

public byte getNOWTBCSC() {
return NOWTBCSC;
}

public byte getNOWTBCSH() {
return NOWTBCSH;
}

public byte getNOWTBCST() {
return NOWTBCST;
}

public byte getNOWTBCUN() {
return NOWTBCUN;
}

public byte getNPFFW() {
return NPFFW;
}

public String getNQVER() {
return NQVER;
}

public byte getNROW() {
return NROW;
}

public short getNROWCLM() {
return NROWCLM;
}

public double getNSSEC() {
return NSSEC;
}

public byte getORDCON() {
return ORDCON;
}

public byte getORGANIS() {
return ORGANIS;
}

public byte getORGNO() {
return ORGNO;
}

public short getOUTHH() {
return OUTHH;
}

public byte getOUTIND() {
return OUTIND;
}

public byte getOUTSC() {
return OUTSC;
}

public byte getPAINHH() {
return PAINHH;
}

public byte getPALEVEL() {
return PALEVEL;
}

public byte getPC_P_F() {
return PC_P_F;
}

public double getPC_P_I() {
return PC_P_I;
}

public short getPC_P_O() {
return PC_P_O;
}

public short getPC_P_T() {
return PC_P_T;
}

public byte getPC_R_F() {
return PC_R_F;
}

public double getPC_R_I() {
return PC_R_I;
}

public short getPC_R_O() {
return PC_R_O;
}

public short getPC_R_T() {
return PC_R_T;
}

public byte getPENSION() {
return PENSION;
}

public short getPF1() {
return PF1;
}

public short getPF2() {
return PF2;
}

public short getPF3() {
return PF3;
}

public byte getPHLEGM() {
return PHLEGM;
}

public double getPRIPENW_08() {
return PRIPENW_08;
}

public double getPRIPENW_SPA() {
return PRIPENW_SPA;
}

public byte getPROBHJ() {
return PROBHJ;
}

public byte getPROBLFBR() {
return PROBLFBR;
}

public byte getPROBLFCO() {
return PROBLFCO;
}

public byte getPROBLFEQ() {
return PROBLFEQ;
}

public byte getPROBLFOT() {
return PROBLFOT;
}

public byte getPROBLFRE() {
return PROBLFRE;
}

public byte getPROBWJ() {
return PROBWJ;
}

public short getPSAGF() {
return PSAGF;
}

public short getPSAGL() {
return PSAGL;
}

public short getPULSE1() {
return PULSE1;
}

public short getPULSE2() {
return PULSE2;
}

public short getPULSE3() {
return PULSE3;
}

public double getPULVAL() {
return PULVAL;
}

public String getQVER() {
return QVER;
}

public byte getREFBSCDI() {
return REFBSCDI;
}

public byte getREFBSCHI() {
return REFBSCHI;
}

public byte getREFBSCIL() {
return REFBSCIL;
}

public byte getREFBSCNE() {
return REFBSCNE;
}

public byte getREFBSCOT() {
return REFBSCOT;
}

public byte getREFBSCTE() {
return REFBSCTE;
}

public byte getRELHITE() {
return RELHITE;
}

public byte getRELWAIT() {
return RELWAIT;
}

public byte getRESNHI() {
return RESNHI;
}

public byte getRESNWT() {
return RESNWT;
}

public byte getRESPBPS() {
return RESPBPS;
}

public byte getRESPHTS() {
return RESPHTS;
}

public byte getRESPWH() {
return RESPWH;
}

public byte getRESPWTS() {
return RESPWTS;
}

public double getRETAINEDDB_08() {
return RETAINEDDB_08;
}

public double getRETAINEDDB_SPA() {
return RETAINEDDB_SPA;
}

public double getRETAINEDDC_08() {
return RETAINEDDC_08;
}

public double getRETAINEDDC_SPA() {
return RETAINEDDC_SPA;
}

public short getRTIN() {
return RTIN;
}

public byte getSAMDIFFA() {
return SAMDIFFA;
}

public byte getSAMDIFIN() {
return SAMDIFIN;
}

public byte getSAMDIFNO() {
return SAMDIFNO;
}

public byte getSAMDIFOT() {
return SAMDIFOT;
}

public byte getSAMDIFSE() {
return SAMDIFSE;
}

public byte getSAMDIFTO() {
return SAMDIFTO;
}

public byte getSAMDIFVE() {
return SAMDIFVE;
}

public byte getSAMPTAK() {
return SAMPTAK;
}

public String getSAMPTYP() {
return SAMPTYP;
}

public byte getSCACTA() {
return SCACTA;
}

public byte getSCACTB() {
return SCACTB;
}

public byte getSCACTC() {
return SCACTC;
}

public byte getSCACTD() {
return SCACTD;
}

public byte getSCAKO() {
return SCAKO;
}

public byte getSCAL7A() {
return SCAL7A;
}

public byte getSCAL7B() {
return SCAL7B;
}

public byte getSCDCA() {
return SCDCA;
}

public byte getSCDCC() {
return SCDCC;
}

public byte getSCDCD() {
return SCDCD;
}

public byte getSCDCE() {
return SCDCE;
}

public byte getSCDCG() {
return SCDCG;
}

public byte getSCDRPIN() {
return SCDRPIN;
}

public byte getSCDRSPI() {
return SCDRSPI;
}

public byte getSCDRWIN() {
return SCDRWIN;
}

public byte getSCEDCH() {
return SCEDCH;
}

public byte getSCEDCP() {
return SCEDCP;
}

public byte getSCEDCS() {
return SCEDCS;
}

public byte getSCEDDE() {
return SCEDDE;
}

public byte getSCEDGP() {
return SCEDGP;
}

public byte getSCEDHO() {
return SCEDHO;
}

public byte getSCEDOP() {
return SCEDOP;
}

public byte getSCEDPO() {
return SCEDPO;
}

public byte getSCEDSC() {
return SCEDSC;
}

public byte getSCEDSU() {
return SCEDSU;
}

public byte getSCEMPL() {
return SCEMPL;
}

public byte getSCFAFIN() {
return SCFAFIN;
}

public byte getSCFAHAR() {
return SCFAHAR;
}

public byte getSCFAMM() {
return SCFAMM;
}

public byte getSCFARES() {
return SCFARES;
}

public byte getSCFASAC() {
return SCFASAC;
}

public byte getSCFEELA() {
return SCFEELA;
}

public byte getSCFEELB() {
return SCFEELB;
}

public byte getSCFEELC() {
return SCFEELC;
}

public byte getSCFEELD() {
return SCFEELD;
}

public byte getSCFEELE() {
return SCFEELE;
}

public byte getSCFMH() {
return SCFMH;
}

public byte getSCFRDM() {
return SCFRDM;
}

public byte getSCFRFIN() {
return SCFRFIN;
}

public byte getSCFRHAR() {
return SCFRHAR;
}

public byte getSCFRRES() {
return SCFRRES;
}

public byte getSCFRSAC() {
return SCFRSAC;
}

public byte getSCFRSHA() {
return SCFRSHA;
}

public byte getSCFRUIA() {
return SCFRUIA;
}

public byte getSCFRUIB() {
return SCFRUIB;
}

public byte getSCFRUIC() {
return SCFRUIC;
}

public byte getSCFRUID() {
return SCFRUID;
}

public byte getSCFRUIE() {
return SCFRUIE;
}

public byte getSCFRUIF() {
return SCFRUIF;
}

public byte getSCFRUIG() {
return SCFRUIG;
}

public byte getSCFRUIH() {
return SCFRUIH;
}

public byte getSCFRUII() {
return SCFRUII;
}

public byte getSCLIFEA() {
return SCLIFEA;
}

public byte getSCLIFEB() {
return SCLIFEB;
}

public byte getSCLIFEC() {
return SCLIFEC;
}

public byte getSCLIFED() {
return SCLIFED;
}

public byte getSCLIFEE() {
return SCLIFEE;
}

public byte getSCMOREA() {
return SCMOREA;
}

public byte getSCMOREB() {
return SCMOREB;
}

public byte getSCMOREC() {
return SCMOREC;
}

public byte getSCMORED() {
return SCMORED;
}

public byte getSCORG01() {
return SCORG01;
}

public byte getSCORG02() {
return SCORG02;
}

public byte getSCORG03() {
return SCORG03;
}

public byte getSCORG04() {
return SCORG04;
}

public byte getSCORG05() {
return SCORG05;
}

public byte getSCORG06() {
return SCORG06;
}

public byte getSCORG07() {
return SCORG07;
}

public byte getSCORG08() {
return SCORG08;
}

public byte getSCORG09() {
return SCORG09;
}

public byte getSCPT01() {
return SCPT01;
}

public byte getSCPT02() {
return SCPT02;
}

public byte getSCPT03() {
return SCPT03;
}

public byte getSCPT04() {
return SCPT04;
}

public byte getSCPT05() {
return SCPT05;
}

public byte getSCPT06() {
return SCPT06;
}

public byte getSCPT07() {
return SCPT07;
}

public byte getSCPT08() {
return SCPT08;
}

public byte getSCPTR() {
return SCPTR;
}

public byte getSCPTRA() {
return SCPTRA;
}

public byte getSCPTRB() {
return SCPTRB;
}

public byte getSCPTRC() {
return SCPTRC;
}

public byte getSCPTRD() {
return SCPTRD;
}

public byte getSCPTRE() {
return SCPTRE;
}

public byte getSCPTRF() {
return SCPTRF;
}

public byte getSCPTRG() {
return SCPTRG;
}

public short getSCRTAGE() {
return SCRTAGE;
}

public byte getSCTVART() {
return SCTVART;
}

public byte getSCTVCHA() {
return SCTVCHA;
}

public byte getSCTVCOM() {
return SCTVCOM;
}

public byte getSCTVDET() {
return SCTVDET;
}

public byte getSCTVDRA() {
return SCTVDRA;
}

public byte getSCTVFIL() {
return SCTVFIL;
}

public byte getSCTVGAR() {
return SCTVGAR;
}

public byte getSCTVNAT() {
return SCTVNAT;
}

public byte getSCTVNEW() {
return SCTVNEW;
}

public byte getSCTVQUI() {
return SCTVQUI;
}

public byte getSCTVRTV() {
return SCTVRTV;
}

public byte getSCTVSOA() {
return SCTVSOA;
}

public byte getSCTVSPO() {
return SCTVSPO;
}

public byte getSCTVWKD() {
return SCTVWKD;
}

public byte getSCTVWKE() {
return SCTVWKE;
}

public byte getSCVEGA() {
return SCVEGA;
}

public byte getSCVEGB() {
return SCVEGB;
}

public byte getSCVEGC() {
return SCVEGC;
}

public byte getSCVEGD() {
return SCVEGD;
}

public byte getSCWILHE() {
return SCWILHE;
}

public byte getSCWILLE() {
return SCWILLE;
}

public byte getSCWILMI() {
return SCWILMI;
}

public byte getSCWILPA() {
return SCWILPA;
}

public byte getSCWILRU() {
return SCWILRU;
}

public byte getSCWORKA() {
return SCWORKA;
}

public byte getSCWORKB() {
return SCWORKB;
}

public byte getSCWORKC() {
return SCWORKC;
}

public byte getSCWORKD() {
return SCWORKD;
}

public byte getSCWORKE() {
return SCWORKE;
}

public byte getSCWORKF() {
return SCWORKF;
}

public byte getSCWORKG() {
return SCWORKG;
}

public byte getSCWORKH() {
return SCWORKH;
}

public byte getSCWORKI() {
return SCWORKI;
}

public byte getSCWORKJ() {
return SCWORKJ;
}

public byte getSCWORKK() {
return SCWORKK;
}

public byte getSCWORKL() {
return SCWORKL;
}

public byte getSIC2003() {
return SIC2003;
}

public byte getSIC2007() {
return SIC2007;
}

public double getSITHGT() {
return SITHGT;
}

public byte getSITHTRS() {
return SITHTRS;
}

public byte getSPCARA() {
return SPCARA;
}

public byte getSPCARB() {
return SPCARB;
}

public byte getSPDTDT() {
return SPDTDT;
}

public byte getSPHOSP() {
return SPHOSP;
}

public byte getSPLIFT() {
return SPLIFT;
}

public byte getSPTAXI() {
return SPTAXI;
}

public byte getSPTR96() {
return SPTR96;
}

public boolean getSPTRAM95() {
return SPTRAM95;
}

public byte getSPTRB95() {
return SPTRB95;
}

public byte getSPTRBCON() {
return SPTRBCON;
}

public byte getSPTRBDES() {
return SPTRBDES;
}

public byte getSPTRBDIR() {
return SPTRBDIR;
}

public byte getSPTRBEXP() {
return SPTRBEXP;
}

public byte getSPTRBFEA() {
return SPTRBFEA;
}

public byte getSPTRBFRE() {
return SPTRBFRE;
}

public byte getSPTRBHEA() {
return SPTRBHEA;
}

public byte getSPTRBNEE() {
return SPTRBNEE;
}

public byte getSPTRBUNA() {
return SPTRBUNA;
}

public byte getSPTRBUNR() {
return SPTRBUNR;
}

public byte getSPTRBWAL() {
return SPTRBWAL;
}

public byte getSPTRCARE() {
return SPTRCARE;
}

public byte getSPTRCOM() {
return SPTRCOM;
}

public byte getSPTRFAM() {
return SPTRFAM;
}

public byte getSPTRHOS() {
return SPTRHOS;
}

public byte getSPTRM85() {
return SPTRM85;
}

public byte getSPTRM86() {
return SPTRM86;
}

public byte getSPTRMCON() {
return SPTRMCON;
}

public byte getSPTRMDES() {
return SPTRMDES;
}

public byte getSPTRMDIR() {
return SPTRMDIR;
}

public byte getSPTRMEXP() {
return SPTRMEXP;
}

public byte getSPTRMFEA() {
return SPTRMFEA;
}

public byte getSPTRMFRE() {
return SPTRMFRE;
}

public byte getSPTRMHEA() {
return SPTRMHEA;
}

public byte getSPTRMNEE() {
return SPTRMNEE;
}

public byte getSPTRMUNA() {
return SPTRMUNA;
}

public byte getSPTRMUNR() {
return SPTRMUNR;
}

public byte getSPTRMWAL() {
return SPTRMWAL;
}

public byte getSPTRTAX() {
return SPTRTAX;
}

public double getSTPENW_08() {
return STPENW_08;
}

public double getSTPENW_SPA() {
return STPENW_SPA;
}

public short getSYS1() {
return SYS1;
}

public short getSYS2() {
return SYS2;
}

public short getSYS3() {
return SYS3;
}

public double getSYSVAL() {
return SYSVAL;
}

public byte getTECHNI1() {
return TECHNI1;
}

public byte getTECHNI2() {
return TECHNI2;
}

public byte getTECHNI3() {
return TECHNI3;
}

public double getTOTPENW_08() {
return TOTPENW_08;
}

public double getTOTPENW_SPA() {
return TOTPENW_SPA;
}

public double getTRIG() {
return TRIG;
}

public byte getVISMON() {
return VISMON;
}

public short getVISYEAR() {
return VISYEAR;
}

public double getW4BLDWT() {
return W4BLDWT;
}

public byte getW4EDQUAL() {
return W4EDQUAL;
}

public double getW4LWGT() {
return W4LWGT;
}

public double getW4NSSEC() {
return W4NSSEC;
}

public double getW4NSSEC13() {
return W4NSSEC13;
}

public byte getW4NSSEC3() {
return W4NSSEC3;
}

public byte getW4NSSEC5() {
return W4NSSEC5;
}

public byte getW4NSSEC8() {
return W4NSSEC8;
}

public double getW4NURWT() {
return W4NURWT;
}

public double getW4SCWT() {
return W4SCWT;
}

public boolean getW4SEC() {
return W4SEC;
}

public boolean getW4SIC() {
return W4SIC;
}

public byte getW4SIC2003() {
return W4SIC2003;
}

public boolean getW4SOC() {
return W4SOC;
}

public byte getW4SOC2000() {
return W4SOC2000;
}

public double getW4XWGT() {
return W4XWGT;
}

public double getWAIST1() {
return WAIST1;
}

public double getWAIST2() {
return WAIST2;
}

public double getWAIST3() {
return WAIST3;
}

public double getWBC() {
return WBC;
}

public double getWEIGHT() {
return WEIGHT;
}

public byte getWHATEAT() {
return WHATEAT;
}

public byte getWHOKB() {
return WHOKB;
}

public byte getWHOSO4() {
return WHOSO4;
}

public byte getWHOSO5() {
return WHOSO5;
}

public byte getWHPNABBE() {
return WHPNABBE;
}

public byte getWHPNABBU() {
return WHPNABBU;
}

public byte getWHPNABCH() {
return WHPNABCH;
}

public byte getWHPNABEM() {
return WHPNABEM;
}

public byte getWHPNABOT() {
return WHPNABOT;
}

public byte getWHPNABPR() {
return WHPNABPR;
}

public byte getWHPNABST() {
return WHPNABST;
}

public double getWHVAL() {
return WHVAL;
}

public byte getWHWILL() {
return WHWILL;
}

public byte getWHYNOBP() {
return WHYNOBP;
}

public double getWIDPEN_08() {
return WIDPEN_08;
}

public double getWIDPEN_SPA() {
return WIDPEN_SPA;
}

public byte getWJREL() {
return WJREL;
}

public int getWP1Q() {
return WP1Q;
}

public int getWP1SQ() {
return WP1SQ;
}

public int getWP2Q() {
return WP2Q;
}

public int getWP2SQ() {
return WP2SQ;
}

public int getWP3Q() {
return WP3Q;
}

public int getWP3SQ() {
return WP3SQ;
}

public int getWPAC2() {
return WPAC2;
}

public short getWPAC3() {
return WPAC3;
}

public int getWPAC4() {
return WPAC4;
}

public boolean getWPAC5() {
return WPAC5;
}

public boolean getWPAC6() {
return WPAC6;
}

public boolean getWPAC7() {
return WPAC7;
}

public byte getWPACHG() {
return WPACHG;
}

public byte getWPACOA2() {
return WPACOA2;
}

public byte getWPACOA3() {
return WPACOA3;
}

public byte getWPACOA4() {
return WPACOA4;
}

public byte getWPACOA5() {
return WPACOA5;
}

public boolean getWPACOA6() {
return WPACOA6;
}

public boolean getWPACOA7() {
return WPACOA7;
}

public short getWPACOB2() {
return WPACOB2;
}

public short getWPACOB3() {
return WPACOB3;
}

public short getWPACOB4() {
return WPACOB4;
}

public short getWPACOB5() {
return WPACOB5;
}

public boolean getWPACOB6() {
return WPACOB6;
}

public boolean getWPACOB7() {
return WPACOB7;
}

public byte getWPACOC2() {
return WPACOC2;
}

public boolean getWPACOC3() {
return WPACOC3;
}

public byte getWPACOC4() {
return WPACOC4;
}

public boolean getWPACOC5() {
return WPACOC5;
}

public boolean getWPACOC6() {
return WPACOC6;
}

public boolean getWPACOC7() {
return WPACOC7;
}

public byte getWPACON2() {
return WPACON2;
}

public byte getWPACON3() {
return WPACON3;
}

public byte getWPACON4() {
return WPACON4;
}

public byte getWPACON5() {
return WPACON5;
}

public boolean getWPACON6() {
return WPACON6;
}

public boolean getWPACON7() {
return WPACON7;
}

public byte getWPACT96() {
return WPACT96;
}

public byte getWPACTCA() {
return WPACTCA;
}

public byte getWPACTED() {
return WPACTED;
}

public byte getWPACTLO() {
return WPACTLO;
}

public byte getWPACTPW() {
return WPACTPW;
}

public byte getWPACTSE() {
return WPACTSE;
}

public byte getWPACTVW() {
return WPACTVW;
}

public byte getWPADY2() {
return WPADY2;
}

public boolean getWPADY3() {
return WPADY3;
}

public boolean getWPADY4() {
return WPADY4;
}

public boolean getWPADY5() {
return WPADY5;
}

public boolean getWPADY6() {
return WPADY6;
}

public boolean getWPADY7() {
return WPADY7;
}

public short getWPAECP() {
return WPAECP;
}

public boolean getWPAECP2() {
return WPAECP2;
}

public boolean getWPAECP3() {
return WPAECP3;
}

public boolean getWPAECP4() {
return WPAECP4;
}

public boolean getWPAECP5() {
return WPAECP5;
}

public boolean getWPAECP6() {
return WPAECP6;
}

public boolean getWPAECP7() {
return WPAECP7;
}

public short getWPAMEC2() {
return WPAMEC2;
}

public short getWPAMEC3() {
return WPAMEC3;
}

public short getWPAMEC4() {
return WPAMEC4;
}

public boolean getWPAMEC5() {
return WPAMEC5;
}

public boolean getWPAMEC6() {
return WPAMEC6;
}

public boolean getWPAMEC7() {
return WPAMEC7;
}

public byte getWPANYP() {
return WPANYP;
}

public byte getWPAOTFE() {
return WPAOTFE;
}

public short getWPAOTFL() {
return WPAOTFL;
}

public byte getWPAOTFR() {
return WPAOTFR;
}

public short getWPAOTFU() {
return WPAOTFU;
}

public byte getWPAOTME() {
return WPAOTME;
}

public short getWPAOTML() {
return WPAOTML;
}

public byte getWPAOTMR() {
return WPAOTMR;
}

public short getWPAOTMU() {
return WPAOTMU;
}

public byte getWPAOTOE() {
return WPAOTOE;
}

public short getWPAOTOL() {
return WPAOTOL;
}

public byte getWPAOTOR() {
return WPAOTOR;
}

public short getWPAOTOU() {
return WPAOTOU;
}

public byte getWPAOTWE() {
return WPAOTWE;
}

public short getWPAOTWL() {
return WPAOTWL;
}

public byte getWPAOTWR() {
return WPAOTWR;
}

public short getWPAOTWU() {
return WPAOTWU;
}

public byte getWPAOTYE() {
return WPAOTYE;
}

public int getWPAOTYL() {
return WPAOTYL;
}

public byte getWPAOTYR() {
return WPAOTYR;
}

public int getWPAOTYU() {
return WPAOTYU;
}

public int getWPAPF2() {
return WPAPF2;
}

public byte getWPAPF2E() {
return WPAPF2E;
}

public int getWPAPF2L() {
return WPAPF2L;
}

public byte getWPAPF2R() {
return WPAPF2R;
}

public int getWPAPF2U() {
return WPAPF2U;
}

public int getWPAPF3() {
return WPAPF3;
}

public byte getWPAPF3E() {
return WPAPF3E;
}

public int getWPAPF3L() {
return WPAPF3L;
}

public byte getWPAPF3R() {
return WPAPF3R;
}

public int getWPAPF3U() {
return WPAPF3U;
}

public int getWPAPF4() {
return WPAPF4;
}

public byte getWPAPF4E() {
return WPAPF4E;
}

public int getWPAPF4L() {
return WPAPF4L;
}

public byte getWPAPF4R() {
return WPAPF4R;
}

public int getWPAPF4U() {
return WPAPF4U;
}

public int getWPAPF5() {
return WPAPF5;
}

public byte getWPAPF5E() {
return WPAPF5E;
}

public int getWPAPF5L() {
return WPAPF5L;
}

public byte getWPAPF5R() {
return WPAPF5R;
}

public int getWPAPF5U() {
return WPAPF5U;
}

public int getWPAPF6() {
return WPAPF6;
}

public byte getWPAPF6E() {
return WPAPF6E;
}

public short getWPAPF6L() {
return WPAPF6L;
}

public byte getWPAPF6R() {
return WPAPF6R;
}

public int getWPAPF6U() {
return WPAPF6U;
}

public boolean getWPAPF7() {
return WPAPF7;
}

public byte getWPAPF7E() {
return WPAPF7E;
}

public short getWPAPF7L() {
return WPAPF7L;
}

public boolean getWPAPF7R() {
return WPAPF7R;
}

public short getWPAPF7U() {
return WPAPF7U;
}

public byte getWPAPFE() {
return WPAPFE;
}

public double getWPAPFL() {
return WPAPFL;
}

public byte getWPAPFR() {
return WPAPFR;
}

public double getWPAPFU() {
return WPAPFU;
}

public byte getWPASA2E() {
return WPASA2E;
}

public short getWPASA2L() {
return WPASA2L;
}

public byte getWPASA2R() {
return WPASA2R;
}

public short getWPASA2U() {
return WPASA2U;
}

public byte getWPASA3E() {
return WPASA3E;
}

public short getWPASA3L() {
return WPASA3L;
}

public byte getWPASA3R() {
return WPASA3R;
}

public short getWPASA3U() {
return WPASA3U;
}

public byte getWPASA4E() {
return WPASA4E;
}

public short getWPASA4L() {
return WPASA4L;
}

public byte getWPASA4R() {
return WPASA4R;
}

public int getWPASA4U() {
return WPASA4U;
}

public byte getWPASA5E() {
return WPASA5E;
}

public short getWPASA5L() {
return WPASA5L;
}

public byte getWPASA5R() {
return WPASA5R;
}

public short getWPASA5U() {
return WPASA5U;
}

public boolean getWPASA6E() {
return WPASA6E;
}

public boolean getWPASA6L() {
return WPASA6L;
}

public boolean getWPASA6R() {
return WPASA6R;
}

public boolean getWPASA6U() {
return WPASA6U;
}

public boolean getWPASA7E() {
return WPASA7E;
}

public boolean getWPASA7L() {
return WPASA7L;
}

public boolean getWPASA7R() {
return WPASA7R;
}

public boolean getWPASA7U() {
return WPASA7U;
}

public short getWPASAL2() {
return WPASAL2;
}

public short getWPASAL3() {
return WPASAL3;
}

public int getWPASAL4() {
return WPASAL4;
}

public int getWPASAL5() {
return WPASAL5;
}

public short getWPASAL6() {
return WPASAL6;
}

public boolean getWPASAL7() {
return WPASAL7;
}

public byte getWPASALE() {
return WPASALE;
}

public double getWPASALL() {
return WPASALL;
}

public byte getWPASALR() {
return WPASALR;
}

public double getWPASALU() {
return WPASALU;
}

public byte getWPASKD() {
return WPASKD;
}

public byte getWPASKE() {
return WPASKE;
}

public byte getWPASKF() {
return WPASKF;
}

public byte getWPBCH95() {
return WPBCH95;
}

public byte getWPBCHAD() {
return WPBCHAD;
}

public byte getWPBCHFL() {
return WPBCHFL;
}

public byte getWPBCHHO() {
return WPBCHHO;
}

public byte getWPBCHHR() {
return WPBCHHR;
}

public byte getWPBCHME() {
return WPBCHME;
}

public byte getWPBCHPH() {
return WPBCHPH;
}

public byte getWPBIMAE() {
return WPBIMAE;
}

public short getWPBIMAL() {
return WPBIMAL;
}

public byte getWPBIMAR() {
return WPBIMAR;
}

public short getWPBIMAU() {
return WPBIMAU;
}

public byte getWPBIWAE() {
return WPBIWAE;
}

public short getWPBIWAL() {
return WPBIWAL;
}

public byte getWPBIWAR() {
return WPBIWAR;
}

public short getWPBIWAU() {
return WPBIWAU;
}

public byte getWPBPS() {
return WPBPS;
}

public byte getWPBPSP() {
return WPBPSP;
}

public byte getWPBPSP2() {
return WPBPSP2;
}

public byte getWPBPSP3() {
return WPBPSP3;
}

public byte getWPBPSP4() {
return WPBPSP4;
}

public byte getWPBPSP5() {
return WPBPSP5;
}

public byte getWPBPSP6() {
return WPBPSP6;
}

public boolean getWPBPSP7() {
return WPBPSP7;
}

public byte getWPBTHA2() {
return WPBTHA2;
}

public byte getWPBTHA3() {
return WPBTHA3;
}

public byte getWPBTHA4() {
return WPBTHA4;
}

public byte getWPBTHA5() {
return WPBTHA5;
}

public byte getWPBTHA6() {
return WPBTHA6;
}

public boolean getWPBTHA7() {
return WPBTHA7;
}

public byte getWPBTHP2() {
return WPBTHP2;
}

public boolean getWPBTHP3() {
return WPBTHP3;
}

public byte getWPBTHP4() {
return WPBTHP4;
}

public byte getWPBTHP5() {
return WPBTHP5;
}

public boolean getWPBTHP6() {
return WPBTHP6;
}

public boolean getWPBTHP7() {
return WPBTHP7;
}

public byte getWPBUSVE() {
return WPBUSVE;
}

public int getWPBUSVL() {
return WPBUSVL;
}

public byte getWPBUSVR() {
return WPBUSVR;
}

public int getWPBUSVU() {
return WPBUSVU;
}

public byte getWPCEMP2() {
return WPCEMP2;
}

public byte getWPCEMP3() {
return WPCEMP3;
}

public byte getWPCEMP4() {
return WPCEMP4;
}

public byte getWPCEMP5() {
return WPCEMP5;
}

public byte getWPCEMP6() {
return WPCEMP6;
}

public boolean getWPCEMP7() {
return WPCEMP7;
}

public byte getWPCH96() {
return WPCH96;
}

public byte getWPCHAD() {
return WPCHAD;
}

public byte getWPCHB95() {
return WPCHB95;
}

public byte getWPCHBAD() {
return WPCHBAD;
}

public byte getWPCHBFL() {
return WPCHBFL;
}

public byte getWPCHBHO() {
return WPCHBHO;
}

public byte getWPCHBHR() {
return WPCHBHR;
}

public byte getWPCHBME() {
return WPCHBME;
}

public byte getWPCHBPH() {
return WPCHBPH;
}

public byte getWPCHD96() {
return WPCHD96;
}

public byte getWPCHDAD() {
return WPCHDAD;
}

public byte getWPCHDFL() {
return WPCHDFL;
}

public byte getWPCHDHO() {
return WPCHDHO;
}

public byte getWPCHDHR() {
return WPCHDHR;
}

public byte getWPCHDM85() {
return WPCHDM85;
}

public byte getWPCHDM86() {
return WPCHDM86;
}

public byte getWPCHDM96() {
return WPCHDM96;
}

public byte getWPCHDMAD() {
return WPCHDMAD;
}

public byte getWPCHDMCO() {
return WPCHDMCO;
}

public byte getWPCHDME() {
return WPCHDME;
}

public byte getWPCHDMFL() {
return WPCHDMFL;
}

public byte getWPCHDMHO() {
return WPCHDMHO;
}

public byte getWPCHDMHR() {
return WPCHDMHR;
}

public byte getWPCHDMME() {
return WPCHDMME;
}

public byte getWPCHDMPH() {
return WPCHDMPH;
}

public byte getWPCHDPH() {
return WPCHDPH;
}

public byte getWPCHFL() {
return WPCHFL;
}

public byte getWPCHGA() {
return WPCHGA;
}

public byte getWPCHGDN() {
return WPCHGDN;
}

public byte getWPCHGNO() {
return WPCHGNO;
}

public byte getWPCHGO() {
return WPCHGO;
}

public byte getWPCHHO() {
return WPCHHO;
}

public byte getWPCHHR() {
return WPCHHR;
}

public byte getWPCHL95() {
return WPCHL95;
}

public byte getWPCHL96() {
return WPCHL96;
}

public byte getWPCHLAD() {
return WPCHLAD;
}

public byte getWPCHLFL() {
return WPCHLFL;
}

public byte getWPCHLHO() {
return WPCHLHO;
}

public byte getWPCHLHR() {
return WPCHLHR;
}

public byte getWPCHLM85() {
return WPCHLM85;
}

public boolean getWPCHLM86() {
return WPCHLM86;
}

public byte getWPCHLM96() {
return WPCHLM96;
}

public byte getWPCHLMAD() {
return WPCHLMAD;
}

public byte getWPCHLME() {
return WPCHLME;
}

public byte getWPCHLMFL() {
return WPCHLMFL;
}

public byte getWPCHLMHO() {
return WPCHLMHO;
}

public byte getWPCHLMHR() {
return WPCHLMHR;
}

public byte getWPCHLMME() {
return WPCHLMME;
}

public byte getWPCHLMPH() {
return WPCHLMPH;
}

public byte getWPCHLPH() {
return WPCHLPH;
}

public byte getWPCHM85() {
return WPCHM85;
}

public byte getWPCHM86() {
return WPCHM86;
}

public byte getWPCHM96() {
return WPCHM96;
}

public byte getWPCHMAD() {
return WPCHMAD;
}

public byte getWPCHMBO() {
return WPCHMBO;
}

public byte getWPCHME() {
return WPCHME;
}

public byte getWPCHMFL() {
return WPCHMFL;
}

public byte getWPCHMHO() {
return WPCHMHO;
}

public byte getWPCHMHR() {
return WPCHMHR;
}

public byte getWPCHMME() {
return WPCHMME;
}

public byte getWPCHMPH() {
return WPCHMPH;
}

public byte getWPCHMSA() {
return WPCHMSA;
}

public byte getWPCHPH() {
return WPCHPH;
}

public byte getWPCJ96() {
return WPCJ96;
}

public byte getWPCJAG() {
return WPCJAG;
}

public byte getWPCJBU() {
return WPCJBU;
}

public byte getWPCJDI() {
return WPCJDI;
}

public byte getWPCJFR() {
return WPCJFR;
}

public byte getWPCJPA() {
return WPCJPA;
}

public byte getWPCJSC() {
return WPCJSC;
}

public byte getWPCJSE() {
return WPCJSE;
}

public boolean getWPCONY2() {
return WPCONY2;
}

public boolean getWPCONY3() {
return WPCONY3;
}

public short getWPCONY4() {
return WPCONY4;
}

public boolean getWPCONY5() {
return WPCONY5;
}

public boolean getWPCONY6() {
return WPCONY6;
}

public boolean getWPCONY7() {
return WPCONY7;
}

public byte getWPCOS() {
return WPCOS;
}

public byte getWPCOS2() {
return WPCOS2;
}

public byte getWPCOS3() {
return WPCOS3;
}

public byte getWPCOS4() {
return WPCOS4;
}

public byte getWPCOS5() {
return WPCOS5;
}

public byte getWPCOS6() {
return WPCOS6;
}

public byte getWPCOS7() {
return WPCOS7;
}

public byte getWPCRAGE() {
return WPCRAGE;
}

public byte getWPCRET() {
return WPCRET;
}

public byte getWPCRETL() {
return WPCRETL;
}

public byte getWPCURP() {
return WPCURP;
}

public byte getWPCURP2() {
return WPCURP2;
}

public byte getWPCURP3() {
return WPCURP3;
}

public byte getWPCURP4() {
return WPCURP4;
}

public byte getWPCURP5() {
return WPCURP5;
}

public byte getWPCURP6() {
return WPCURP6;
}

public byte getWPCURP7() {
return WPCURP7;
}

public byte getWPCURR() {
return WPCURR;
}

public byte getWPCURR2() {
return WPCURR2;
}

public byte getWPCURR3() {
return WPCURR3;
}

public byte getWPCURR4() {
return WPCURR4;
}

public byte getWPCURR5() {
return WPCURR5;
}

public byte getWPCURR6() {
return WPCURR6;
}

public byte getWPCURR7() {
return WPCURR7;
}

public byte getWPDCDB() {
return WPDCDB;
}

public byte getWPDCDB2() {
return WPDCDB2;
}

public byte getWPDCDB3() {
return WPDCDB3;
}

public byte getWPDCDB4() {
return WPDCDB4;
}

public byte getWPDCDB5() {
return WPDCDB5;
}

public byte getWPDCDB6() {
return WPDCDB6;
}

public byte getWPDCDB7() {
return WPDCDB7;
}

public short getWPDE2() {
return WPDE2;
}

public short getWPDE3() {
return WPDE3;
}

public short getWPDE4() {
return WPDE4;
}

public short getWPDE5() {
return WPDE5;
}

public short getWPDE6() {
return WPDE6;
}

public short getWPDE7() {
return WPDE7;
}

public byte getWPDESP() {
return WPDESP;
}

public byte getWPDESP2() {
return WPDESP2;
}

public byte getWPDESP3() {
return WPDESP3;
}

public byte getWPDESP4() {
return WPDESP4;
}

public byte getWPDESP5() {
return WPDESP5;
}

public boolean getWPDESP6() {
return WPDESP6;
}

public boolean getWPDESP7() {
return WPDESP7;
}

public byte getWPDPS2() {
return WPDPS2;
}

public byte getWPDPS3() {
return WPDPS3;
}

public byte getWPDPS4() {
return WPDPS4;
}

public byte getWPDPS5() {
return WPDPS5;
}

public boolean getWPDPS6() {
return WPDPS6;
}

public boolean getWPDPS7() {
return WPDPS7;
}

public byte getWPDPSP() {
return WPDPSP;
}

public byte getWPDPSP2() {
return WPDPSP2;
}

public byte getWPDPSP3() {
return WPDPSP3;
}

public byte getWPDPSP4() {
return WPDPSP4;
}

public byte getWPDPSP5() {
return WPDPSP5;
}

public byte getWPDPSP6() {
return WPDPSP6;
}

public boolean getWPDPSP7() {
return WPDPSP7;
}

public short getWPDS2() {
return WPDS2;
}

public short getWPDS3() {
return WPDS3;
}

public short getWPDS4() {
return WPDS4;
}

public short getWPDS5() {
return WPDS5;
}

public short getWPDS6() {
return WPDS6;
}

public short getWPDS7() {
return WPDS7;
}

public byte getWPEARLY() {
return WPEARLY;
}

public byte getWPEC() {
return WPEC;
}

public byte getWPECA() {
return WPECA;
}

public byte getWPECPP() {
return WPECPP;
}

public byte getWPECPP2() {
return WPECPP2;
}

public byte getWPECPP3() {
return WPECPP3;
}

public boolean getWPECPP4() {
return WPECPP4;
}

public boolean getWPECPP5() {
return WPECPP5;
}

public boolean getWPECPP6() {
return WPECPP6;
}

public boolean getWPECPP7() {
return WPECPP7;
}

public boolean getWPEPER2() {
return WPEPER2;
}

public boolean getWPEPER3() {
return WPEPER3;
}

public byte getWPEPER4() {
return WPEPER4;
}

public boolean getWPEPER5() {
return WPEPER5;
}

public boolean getWPEPER6() {
return WPEPER6;
}

public boolean getWPEPER7() {
return WPEPER7;
}

public byte getWPERA2() {
return WPERA2;
}

public byte getWPERA3() {
return WPERA3;
}

public byte getWPERA4() {
return WPERA4;
}

public byte getWPERA5() {
return WPERA5;
}

public byte getWPERA6() {
return WPERA6;
}

public boolean getWPERA7() {
return WPERA7;
}

public byte getWPERC2() {
return WPERC2;
}

public byte getWPERC3() {
return WPERC3;
}

public byte getWPERC4() {
return WPERC4;
}

public byte getWPERC5() {
return WPERC5;
}

public byte getWPERC6() {
return WPERC6;
}

public boolean getWPERC7() {
return WPERC7;
}

public byte getWPERCP() {
return WPERCP;
}

public byte getWPERCP2() {
return WPERCP2;
}

public byte getWPERCP3() {
return WPERCP3;
}

public byte getWPERCP4() {
return WPERCP4;
}

public byte getWPERCP5() {
return WPERCP5;
}

public boolean getWPERCP6() {
return WPERCP6;
}

public boolean getWPERCP7() {
return WPERCP7;
}

public byte getWPESJME() {
return WPESJME;
}

public short getWPESJML() {
return WPESJML;
}

public byte getWPESJMR() {
return WPESJMR;
}

public short getWPESJMU() {
return WPESJMU;
}

public byte getWPEXW() {
return WPEXW;
}

public byte getWPFFCONS() {
return WPFFCONS;
}

public byte getWPFFCUR2() {
return WPFFCUR2;
}

public byte getWPFFCUR3() {
return WPFFCUR3;
}

public byte getWPFFCUR4() {
return WPFFCUR4;
}

public byte getWPFFCUR5() {
return WPFFCUR5;
}

public byte getWPFFCUR6() {
return WPFFCUR6;
}

public byte getWPFFCUR7() {
return WPFFCUR7;
}

public byte getWPFFCURP() {
return WPFFCURP;
}

public byte getWPFFDCD4() {
return WPFFDCD4;
}

public byte getWPFFDCD5() {
return WPFFDCD5;
}

public boolean getWPFFDCD6() {
return WPFFDCD6;
}

public boolean getWPFFDCD7() {
return WPFFDCD7;
}

public byte getWPFFDCDB() {
return WPFFDCDB;
}

public byte getWPFFDCDB2() {
return WPFFDCDB2;
}

public byte getWPFFDCDB3() {
return WPFFDCDB3;
}

public byte getWPFFPENN() {
return WPFFPENN;
}

public byte getWPFFPENT() {
return WPFFPENT;
}

public byte getWPFFPENT2() {
return WPFFPENT2;
}

public byte getWPFFPENT3() {
return WPFFPENT3;
}

public byte getWPFFPENT4() {
return WPFFPENT4;
}

public byte getWPFFPENT5() {
return WPFFPENT5;
}

public byte getWPFFPENT6() {
return WPFFPENT6;
}

public byte getWPFFPENT7() {
return WPFFPENT7;
}

public byte getWPFFREC2() {
return WPFFREC2;
}

public byte getWPFFREC3() {
return WPFFREC3;
}

public byte getWPFFREC4() {
return WPFFREC4;
}

public byte getWPFFREC5() {
return WPFFREC5;
}

public boolean getWPFFREC6() {
return WPFFREC6;
}

public boolean getWPFFREC7() {
return WPFFREC7;
}

public byte getWPFFRECP() {
return WPFFRECP;
}

public byte getWPFFYBS() {
return WPFFYBS;
}

public byte getWPFFYBS2() {
return WPFFYBS2;
}

public byte getWPFFYBS3() {
return WPFFYBS3;
}

public byte getWPFFYBS4() {
return WPFFYBS4;
}

public byte getWPFFYBS5() {
return WPFFYBS5;
}

public boolean getWPFFYBS6() {
return WPFFYBS6;
}

public boolean getWPFFYBS7() {
return WPFFYBS7;
}

public byte getWPFINF() {
return WPFINF;
}

public byte getWPFINF2() {
return WPFINF2;
}

public byte getWPFINF3() {
return WPFINF3;
}

public byte getWPFINF4() {
return WPFINF4;
}

public byte getWPFINF5() {
return WPFINF5;
}

public byte getWPFINF6() {
return WPFINF6;
}

public boolean getWPFINF7() {
return WPFINF7;
}

public byte getWPFRAS2() {
return WPFRAS2;
}

public byte getWPFRAS3() {
return WPFRAS3;
}

public byte getWPFRAS4() {
return WPFRAS4;
}

public boolean getWPFRAS5() {
return WPFRAS5;
}

public boolean getWPFRAS6() {
return WPFRAS6;
}

public boolean getWPFRAS7() {
return WPFRAS7;
}

public byte getWPFSAP2() {
return WPFSAP2;
}

public byte getWPFSAP3() {
return WPFSAP3;
}

public byte getWPFSAP4() {
return WPFSAP4;
}

public byte getWPFSAP5() {
return WPFSAP5;
}

public byte getWPFSAP6() {
return WPFSAP6;
}

public boolean getWPFSAP7() {
return WPFSAP7;
}

public byte getWPFSAV2() {
return WPFSAV2;
}

public boolean getWPFSAV3() {
return WPFSAV3;
}

public byte getWPFSAV4() {
return WPFSAV4;
}

public byte getWPFSAV5() {
return WPFSAV5;
}

public boolean getWPFSAV6() {
return WPFSAV6;
}

public boolean getWPFSAV7() {
return WPFSAV7;
}

public byte getWPFSC() {
return WPFSC;
}

public boolean getWPFSC2() {
return WPFSC2;
}

public boolean getWPFSC3() {
return WPFSC3;
}

public boolean getWPFSC4() {
return WPFSC4;
}

public boolean getWPFSC5() {
return WPFSC5;
}

public boolean getWPFSC6() {
return WPFSC6;
}

public boolean getWPFSC7() {
return WPFSC7;
}

public byte getWPFSCO2() {
return WPFSCO2;
}

public byte getWPFSCO3() {
return WPFSCO3;
}

public byte getWPFSCO4() {
return WPFSCO4;
}

public byte getWPFSCO5() {
return WPFSCO5;
}

public boolean getWPFSCO6() {
return WPFSCO6;
}

public boolean getWPFSCO7() {
return WPFSCO7;
}

public byte getWPFSCP2() {
return WPFSCP2;
}

public byte getWPFSCP3() {
return WPFSCP3;
}

public byte getWPFSCP4() {
return WPFSCP4;
}

public boolean getWPFSCP5() {
return WPFSCP5;
}

public boolean getWPFSCP6() {
return WPFSCP6;
}

public boolean getWPFSCP7() {
return WPFSCP7;
}

public byte getWPFSEC() {
return WPFSEC;
}

public boolean getWPFSEC2() {
return WPFSEC2;
}

public boolean getWPFSEC3() {
return WPFSEC3;
}

public boolean getWPFSEC4() {
return WPFSEC4;
}

public boolean getWPFSEC5() {
return WPFSEC5;
}

public boolean getWPFSEC6() {
return WPFSEC6;
}

public boolean getWPFSEC7() {
return WPFSEC7;
}

public byte getWPHLWZ() {
return WPHLWZ;
}

public byte getWPIFS295() {
return WPIFS295;
}

public byte getWPIFS2AC() {
return WPIFS2AC;
}

public byte getWPIFS2CO() {
return WPIFS2CO;
}

public byte getWPIFS2EM() {
return WPIFS2EM;
}

public byte getWPIFS2FA() {
return WPIFS2FA;
}

public byte getWPIFS2NO() {
return WPIFS2NO;
}

public byte getWPIFS2PR() {
return WPIFS2PR;
}

public byte getWPIFS2RE() {
return WPIFS2RE;
}

public byte getWPIFS2RP() {
return WPIFS2RP;
}

public byte getWPIFS395() {
return WPIFS395;
}

public byte getWPIFS3AC() {
return WPIFS3AC;
}

public byte getWPIFS3CO() {
return WPIFS3CO;
}

public byte getWPIFS3EM() {
return WPIFS3EM;
}

public byte getWPIFS3FA() {
return WPIFS3FA;
}

public byte getWPIFS3NO() {
return WPIFS3NO;
}

public byte getWPIFS3PR() {
return WPIFS3PR;
}

public byte getWPIFS3RE() {
return WPIFS3RE;
}

public byte getWPIFS3RP() {
return WPIFS3RP;
}

public byte getWPIFS495() {
return WPIFS495;
}

public boolean getWPIFS4AC() {
return WPIFS4AC;
}

public boolean getWPIFS4CO() {
return WPIFS4CO;
}

public byte getWPIFS4EM() {
return WPIFS4EM;
}

public byte getWPIFS4FA() {
return WPIFS4FA;
}

public byte getWPIFS4NO() {
return WPIFS4NO;
}

public byte getWPIFS4PR() {
return WPIFS4PR;
}

public byte getWPIFS4RE() {
return WPIFS4RE;
}

public byte getWPIFS4RP() {
return WPIFS4RP;
}

public byte getWPIFS595() {
return WPIFS595;
}

public boolean getWPIFS5AC() {
return WPIFS5AC;
}

public boolean getWPIFS5CO() {
return WPIFS5CO;
}

public byte getWPIFS5EM() {
return WPIFS5EM;
}

public byte getWPIFS5FA() {
return WPIFS5FA;
}

public byte getWPIFS5NO() {
return WPIFS5NO;
}

public boolean getWPIFS5PR() {
return WPIFS5PR;
}

public byte getWPIFS5RE() {
return WPIFS5RE;
}

public byte getWPIFS5RP() {
return WPIFS5RP;
}

public boolean getWPIFS695() {
return WPIFS695;
}

public boolean getWPIFS6AC() {
return WPIFS6AC;
}

public boolean getWPIFS6CO() {
return WPIFS6CO;
}

public byte getWPIFS6EM() {
return WPIFS6EM;
}

public byte getWPIFS6FA() {
return WPIFS6FA;
}

public byte getWPIFS6NO() {
return WPIFS6NO;
}

public boolean getWPIFS6PR() {
return WPIFS6PR;
}

public byte getWPIFS6RE() {
return WPIFS6RE;
}

public boolean getWPIFS6RP() {
return WPIFS6RP;
}

public boolean getWPIFS795() {
return WPIFS795;
}

public boolean getWPIFS7AC() {
return WPIFS7AC;
}

public boolean getWPIFS7CO() {
return WPIFS7CO;
}

public boolean getWPIFS7EM() {
return WPIFS7EM;
}

public boolean getWPIFS7FA() {
return WPIFS7FA;
}

public byte getWPIFS7NO() {
return WPIFS7NO;
}

public boolean getWPIFS7PR() {
return WPIFS7PR;
}

public byte getWPIFS7RE() {
return WPIFS7RE;
}

public boolean getWPIFS7RP() {
return WPIFS7RP;
}

public byte getWPIFS95() {
return WPIFS95;
}

public byte getWPIFSAC() {
return WPIFSAC;
}

public byte getWPIFSCO() {
return WPIFSCO;
}

public byte getWPIFSEM() {
return WPIFSEM;
}

public byte getWPIFSFA() {
return WPIFSFA;
}

public byte getWPIFSNO() {
return WPIFSNO;
}

public byte getWPIFSPR() {
return WPIFSPR;
}

public byte getWPIFSRE() {
return WPIFSRE;
}

public byte getWPIFSRP() {
return WPIFSRP;
}

public byte getWPINC2E() {
return WPINC2E;
}

public boolean getWPINC2L() {
return WPINC2L;
}

public byte getWPINC2R() {
return WPINC2R;
}

public short getWPINC2U() {
return WPINC2U;
}

public boolean getWPINC3E() {
return WPINC3E;
}

public boolean getWPINC3L() {
return WPINC3L;
}

public boolean getWPINC3R() {
return WPINC3R;
}

public boolean getWPINC3U() {
return WPINC3U;
}

public boolean getWPINC4E() {
return WPINC4E;
}

public boolean getWPINC4L() {
return WPINC4L;
}

public boolean getWPINC4R() {
return WPINC4R;
}

public boolean getWPINC4U() {
return WPINC4U;
}

public boolean getWPINC5E() {
return WPINC5E;
}

public boolean getWPINC5L() {
return WPINC5L;
}

public boolean getWPINC5R() {
return WPINC5R;
}

public boolean getWPINC5U() {
return WPINC5U;
}

public boolean getWPINC6E() {
return WPINC6E;
}

public boolean getWPINC6L() {
return WPINC6L;
}

public boolean getWPINC6R() {
return WPINC6R;
}

public boolean getWPINC6U() {
return WPINC6U;
}

public boolean getWPINC7E() {
return WPINC7E;
}

public boolean getWPINC7L() {
return WPINC7L;
}

public boolean getWPINC7R() {
return WPINC7R;
}

public boolean getWPINC7U() {
return WPINC7U;
}

public double getWPINCD() {
return WPINCD;
}

public short getWPINCD2() {
return WPINCD2;
}

public short getWPINCD3() {
return WPINCD3;
}

public byte getWPINCD4() {
return WPINCD4;
}

public boolean getWPINCD5() {
return WPINCD5;
}

public boolean getWPINCD6() {
return WPINCD6;
}

public boolean getWPINCD7() {
return WPINCD7;
}

public byte getWPINCDE() {
return WPINCDE;
}

public double getWPINCDL() {
return WPINCDL;
}

public byte getWPINCDR() {
return WPINCDR;
}

public double getWPINCDU() {
return WPINCDU;
}

public byte getWPINF2() {
return WPINF2;
}

public byte getWPINF3() {
return WPINF3;
}

public byte getWPINF4() {
return WPINF4;
}

public byte getWPINF5() {
return WPINF5;
}

public byte getWPINF6() {
return WPINF6;
}

public byte getWPINF7() {
return WPINF7;
}

public byte getWPLCH95() {
return WPLCH95;
}

public byte getWPLCH96() {
return WPLCH96;
}

public byte getWPLCHAD() {
return WPLCHAD;
}

public byte getWPLCHFL() {
return WPLCHFL;
}

public byte getWPLCHHO() {
return WPLCHHO;
}

public byte getWPLCHHR() {
return WPLCHHR;
}

public byte getWPLCHM85() {
return WPLCHM85;
}

public byte getWPLCHM86() {
return WPLCHM86;
}

public byte getWPLCHMAD() {
return WPLCHMAD;
}

public byte getWPLCHMBO() {
return WPLCHMBO;
}

public byte getWPLCHMCO() {
return WPLCHMCO;
}

public byte getWPLCHMDE() {
return WPLCHMDE;
}

public byte getWPLCHME() {
return WPLCHME;
}

public byte getWPLCHMFL() {
return WPLCHMFL;
}

public byte getWPLCHMHO() {
return WPLCHMHO;
}

public byte getWPLCHMHR() {
return WPLCHMHR;
}

public byte getWPLCHMLH() {
return WPLCHMLH;
}

public byte getWPLCHMLO() {
return WPLCHMLO;
}

public byte getWPLCHMME() {
return WPLCHMME;
}

public byte getWPLCHMPH() {
return WPLCHMPH;
}

public byte getWPLCHMRT() {
return WPLCHMRT;
}

public byte getWPLCHMSA() {
return WPLCHMSA;
}

public byte getWPLCHPH() {
return WPLCHPH;
}

public byte getWPLCOM2() {
return WPLCOM2;
}

public byte getWPLCOM3() {
return WPLCOM3;
}

public byte getWPLCOM4() {
return WPLCOM4;
}

public boolean getWPLCOM5() {
return WPLCOM5;
}

public boolean getWPLCOM6() {
return WPLCOM6;
}

public boolean getWPLCOM7() {
return WPLCOM7;
}

public short getWPLCOY2() {
return WPLCOY2;
}

public short getWPLCOY3() {
return WPLCOY3;
}

public short getWPLCOY4() {
return WPLCOY4;
}

public short getWPLCOY5() {
return WPLCOY5;
}

public short getWPLCOY6() {
return WPLCOY6;
}

public boolean getWPLCOY7() {
return WPLCOY7;
}

public byte getWPLFTP295() {
return WPLFTP295;
}

public byte getWPLFTP2AF() {
return WPLFTP2AF;
}

public byte getWPLFTP2CH() {
return WPLFTP2CH;
}

public byte getWPLFTP2EL() {
return WPLFTP2EL;
}

public byte getWPLFTP2OF() {
return WPLFTP2OF;
}

public byte getWPLFTP2RE() {
return WPLFTP2RE;
}

public byte getWPLFTP2RT() {
return WPLFTP2RT;
}

public byte getWPLFTP395() {
return WPLFTP395;
}

public byte getWPLFTP3AF() {
return WPLFTP3AF;
}

public byte getWPLFTP3CH() {
return WPLFTP3CH;
}

public byte getWPLFTP3EL() {
return WPLFTP3EL;
}

public byte getWPLFTP3OF() {
return WPLFTP3OF;
}

public byte getWPLFTP3RE() {
return WPLFTP3RE;
}

public byte getWPLFTP3RT() {
return WPLFTP3RT;
}

public byte getWPLFTP495() {
return WPLFTP495;
}

public boolean getWPLFTP4AF() {
return WPLFTP4AF;
}

public byte getWPLFTP4CH() {
return WPLFTP4CH;
}

public boolean getWPLFTP4EL() {
return WPLFTP4EL;
}

public byte getWPLFTP4OF() {
return WPLFTP4OF;
}

public byte getWPLFTP4RE() {
return WPLFTP4RE;
}

public boolean getWPLFTP4RT() {
return WPLFTP4RT;
}

public boolean getWPLFTP595() {
return WPLFTP595;
}

public boolean getWPLFTP5AF() {
return WPLFTP5AF;
}

public byte getWPLFTP5CH() {
return WPLFTP5CH;
}

public boolean getWPLFTP5EL() {
return WPLFTP5EL;
}

public boolean getWPLFTP5OF() {
return WPLFTP5OF;
}

public byte getWPLFTP5RE() {
return WPLFTP5RE;
}

public boolean getWPLFTP5RT() {
return WPLFTP5RT;
}

public boolean getWPLFTP695() {
return WPLFTP695;
}

public boolean getWPLFTP6AF() {
return WPLFTP6AF;
}

public boolean getWPLFTP6CH() {
return WPLFTP6CH;
}

public boolean getWPLFTP6EL() {
return WPLFTP6EL;
}

public boolean getWPLFTP6OF() {
return WPLFTP6OF;
}

public boolean getWPLFTP6RE() {
return WPLFTP6RE;
}

public boolean getWPLFTP6RT() {
return WPLFTP6RT;
}

public boolean getWPLFTP795() {
return WPLFTP795;
}

public boolean getWPLFTP7AF() {
return WPLFTP7AF;
}

public boolean getWPLFTP7CH() {
return WPLFTP7CH;
}

public boolean getWPLFTP7EL() {
return WPLFTP7EL;
}

public boolean getWPLFTP7OF() {
return WPLFTP7OF;
}

public boolean getWPLFTP7RE() {
return WPLFTP7RE;
}

public boolean getWPLFTP7RT() {
return WPLFTP7RT;
}

public byte getWPLFTP95() {
return WPLFTP95;
}

public byte getWPLFTPAF() {
return WPLFTPAF;
}

public byte getWPLFTPCH() {
return WPLFTPCH;
}

public byte getWPLFTPEL() {
return WPLFTPEL;
}

public byte getWPLFTPOF() {
return WPLFTPOF;
}

public byte getWPLFTPRE() {
return WPLFTPRE;
}

public byte getWPLFTPRT() {
return WPLFTPRT;
}

public byte getWPLIMWK() {
return WPLIMWK;
}

public byte getWPLJO95() {
return WPLJO95;
}

public byte getWPLJOBM() {
return WPLJOBM;
}

public byte getWPLJOCA() {
return WPLJOCA;
}

public byte getWPLJOCL() {
return WPLJOCL;
}

public byte getWPLJODI() {
return WPLJODI;
}

public byte getWPLJOFE() {
return WPLJOFE;
}

public byte getWPLJOIL() {
return WPLJOIL;
}

public byte getWPLJOM85() {
return WPLJOM85;
}

public byte getWPLJOM86() {
return WPLJOM86;
}

public byte getWPLJOMBE() {
return WPLJOMBE;
}

public byte getWPLJOMCA() {
return WPLJOMCA;
}

public byte getWPLJOMCF() {
return WPLJOMCF;
}

public byte getWPLJOMCL() {
return WPLJOMCL;
}

public byte getWPLJOMDI() {
return WPLJOMDI;
}

public byte getWPLJOMER() {
return WPLJOMER;
}

public byte getWPLJOMFE() {
return WPLJOMFE;
}

public byte getWPLJOMIL() {
return WPLJOMIL;
}

public byte getWPLJOMME() {
return WPLJOMME;
}

public byte getWPLJOMMO() {
return WPLJOMMO;
}

public byte getWPLJOMO() {
return WPLJOMO;
}

public byte getWPLJOMPR() {
return WPLJOMPR;
}

public byte getWPLJOMRE() {
return WPLJOMRE;
}

public byte getWPLJOMSA() {
return WPLJOMSA;
}

public byte getWPLJOMSE() {
return WPLJOMSE;
}

public byte getWPLJOMSP() {
return WPLJOMSP;
}

public byte getWPLJOMTI() {
return WPLJOMTI;
}

public byte getWPLJOMVO() {
return WPLJOMVO;
}

public byte getWPLJORE() {
return WPLJORE;
}

public byte getWPLJOSP() {
return WPLJOSP;
}

public byte getWPLJOTI() {
return WPLJOTI;
}

public byte getWPLJOVO() {
return WPLJOVO;
}

public byte getWPLLJM() {
return WPLLJM;
}

public short getWPLLJY() {
return WPLLJY;
}

public byte getWPLLSM() {
return WPLLSM;
}

public short getWPLLSY() {
return WPLLSY;
}

public byte getWPLPEM() {
return WPLPEM;
}

public byte getWPLPEM2() {
return WPLPEM2;
}

public byte getWPLPEM3() {
return WPLPEM3;
}

public short getWPLPEY() {
return WPLPEY;
}

public short getWPLPEY2() {
return WPLPEY2;
}

public short getWPLPEY3() {
return WPLPEY3;
}

public byte getWPLPSM() {
return WPLPSM;
}

public byte getWPLPSM2() {
return WPLPSM2;
}

public byte getWPLPSM3() {
return WPLPSM3;
}

public short getWPLPSY() {
return WPLPSY;
}

public short getWPLPSY2() {
return WPLPSY2;
}

public short getWPLPSY3() {
return WPLPSY3;
}

public byte getWPLUA2E() {
return WPLUA2E;
}

public int getWPLUA2L() {
return WPLUA2L;
}

public byte getWPLUA2R() {
return WPLUA2R;
}

public int getWPLUA2U() {
return WPLUA2U;
}

public byte getWPLUA3E() {
return WPLUA3E;
}

public short getWPLUA3L() {
return WPLUA3L;
}

public byte getWPLUA3R() {
return WPLUA3R;
}

public int getWPLUA3U() {
return WPLUA3U;
}

public byte getWPLUA4E() {
return WPLUA4E;
}

public short getWPLUA4L() {
return WPLUA4L;
}

public boolean getWPLUA4R() {
return WPLUA4R;
}

public short getWPLUA4U() {
return WPLUA4U;
}

public boolean getWPLUA5E() {
return WPLUA5E;
}

public boolean getWPLUA5L() {
return WPLUA5L;
}

public boolean getWPLUA5R() {
return WPLUA5R;
}

public boolean getWPLUA5U() {
return WPLUA5U;
}

public boolean getWPLUA6E() {
return WPLUA6E;
}

public boolean getWPLUA6L() {
return WPLUA6L;
}

public boolean getWPLUA6R() {
return WPLUA6R;
}

public boolean getWPLUA6U() {
return WPLUA6U;
}

public boolean getWPLUA7E() {
return WPLUA7E;
}

public boolean getWPLUA7L() {
return WPLUA7L;
}

public boolean getWPLUA7R() {
return WPLUA7R;
}

public boolean getWPLUA7U() {
return WPLUA7U;
}

public byte getWPLUAE() {
return WPLUAE;
}

public double getWPLUAL() {
return WPLUAL;
}

public byte getWPLUAR() {
return WPLUAR;
}

public double getWPLUAU() {
return WPLUAU;
}

public byte getWPLUM2E() {
return WPLUM2E;
}

public int getWPLUM2L() {
return WPLUM2L;
}

public byte getWPLUM2R() {
return WPLUM2R;
}

public int getWPLUM2U() {
return WPLUM2U;
}

public byte getWPLUM3E() {
return WPLUM3E;
}

public short getWPLUM3L() {
return WPLUM3L;
}

public byte getWPLUM3R() {
return WPLUM3R;
}

public short getWPLUM3U() {
return WPLUM3U;
}

public byte getWPLUM4E() {
return WPLUM4E;
}

public short getWPLUM4L() {
return WPLUM4L;
}

public boolean getWPLUM4R() {
return WPLUM4R;
}

public int getWPLUM4U() {
return WPLUM4U;
}

public boolean getWPLUM5E() {
return WPLUM5E;
}

public boolean getWPLUM5L() {
return WPLUM5L;
}

public boolean getWPLUM5R() {
return WPLUM5R;
}

public boolean getWPLUM5U() {
return WPLUM5U;
}

public boolean getWPLUM6E() {
return WPLUM6E;
}

public boolean getWPLUM6L() {
return WPLUM6L;
}

public boolean getWPLUM6R() {
return WPLUM6R;
}

public boolean getWPLUM6U() {
return WPLUM6U;
}

public boolean getWPLUM7E() {
return WPLUM7E;
}

public boolean getWPLUM7L() {
return WPLUM7L;
}

public boolean getWPLUM7R() {
return WPLUM7R;
}

public boolean getWPLUM7U() {
return WPLUM7U;
}

public int getWPLUMP2() {
return WPLUMP2;
}

public int getWPLUMP3() {
return WPLUMP3;
}

public int getWPLUMP4() {
return WPLUMP4;
}

public int getWPLUMP5() {
return WPLUMP5;
}

public short getWPLUMP6() {
return WPLUMP6;
}

public boolean getWPLUMP7() {
return WPLUMP7;
}

public byte getWPLUMPE() {
return WPLUMPE;
}

public double getWPLUMPL() {
return WPLUMPL;
}

public byte getWPLUMPR() {
return WPLUMPR;
}

public double getWPLUMPU() {
return WPLUMPU;
}

public double getWPLUPA() {
return WPLUPA;
}

public int getWPLUPA2() {
return WPLUPA2;
}

public int getWPLUPA3() {
return WPLUPA3;
}

public int getWPLUPA4() {
return WPLUPA4;
}

public short getWPLUPA5() {
return WPLUPA5;
}

public short getWPLUPA6() {
return WPLUPA6;
}

public boolean getWPLUPA7() {
return WPLUPA7;
}

public byte getWPLUPS() {
return WPLUPS;
}

public byte getWPLUPS2() {
return WPLUPS2;
}

public byte getWPLUPS3() {
return WPLUPS3;
}

public byte getWPLUPS4() {
return WPLUPS4;
}

public byte getWPLUPS5() {
return WPLUPS5;
}

public boolean getWPLUPS6() {
return WPLUPS6;
}

public boolean getWPLUPS7() {
return WPLUPS7;
}

public int getWPMALA() {
return WPMALA;
}

public byte getWPMANPP() {
return WPMANPP;
}

public byte getWPMANSP() {
return WPMANSP;
}

public byte getWPMC2() {
return WPMC2;
}

public byte getWPMC3() {
return WPMC3;
}

public byte getWPMC4() {
return WPMC4;
}

public byte getWPMC5() {
return WPMC5;
}

public byte getWPMC6() {
return WPMC6;
}

public boolean getWPMC7() {
return WPMC7;
}

public short getWPMCA2() {
return WPMCA2;
}

public short getWPMCA3() {
return WPMCA3;
}

public short getWPMCA4() {
return WPMCA4;
}

public byte getWPMCA5() {
return WPMCA5;
}

public boolean getWPMCA6() {
return WPMCA6;
}

public boolean getWPMCA7() {
return WPMCA7;
}

public byte getWPMCAF2() {
return WPMCAF2;
}

public byte getWPMCAF3() {
return WPMCAF3;
}

public byte getWPMCAF4() {
return WPMCAF4;
}

public byte getWPMCAF5() {
return WPMCAF5;
}

public boolean getWPMCAF6() {
return WPMCAF6;
}

public boolean getWPMCAF7() {
return WPMCAF7;
}

public byte getWPMCON2() {
return WPMCON2;
}

public byte getWPMCON3() {
return WPMCON3;
}

public byte getWPMCON4() {
return WPMCON4;
}

public byte getWPMCON5() {
return WPMCON5;
}

public boolean getWPMCON6() {
return WPMCON6;
}

public boolean getWPMCON7() {
return WPMCON7;
}

public byte getWPMEC2() {
return WPMEC2;
}

public byte getWPMEC3() {
return WPMEC3;
}

public byte getWPMEC4() {
return WPMEC4;
}

public byte getWPMEC5() {
return WPMEC5;
}

public boolean getWPMEC6() {
return WPMEC6;
}

public boolean getWPMEC7() {
return WPMEC7;
}

public byte getWPMFQ() {
return WPMFQ;
}

public byte getWPMFRC() {
return WPMFRC;
}

public byte getWPMFRC2() {
return WPMFRC2;
}

public byte getWPMFRC3() {
return WPMFRC3;
}

public byte getWPMFRC4() {
return WPMFRC4;
}

public byte getWPMFRC5() {
return WPMFRC5;
}

public byte getWPMFRC6() {
return WPMFRC6;
}

public boolean getWPMFRC7() {
return WPMFRC7;
}

public byte getWPMHIE() {
return WPMHIE;
}

public short getWPMHIL() {
return WPMHIL;
}

public byte getWPMHIR() {
return WPMHIR;
}

public short getWPMHIU() {
return WPMHIU;
}

public byte getWPMMIN2() {
return WPMMIN2;
}

public byte getWPMMIN3() {
return WPMMIN3;
}

public byte getWPMMIN4() {
return WPMMIN4;
}

public byte getWPMMIN5() {
return WPMMIN5;
}

public boolean getWPMMIN6() {
return WPMMIN6;
}

public boolean getWPMMIN7() {
return WPMMIN7;
}

public byte getWPMORE() {
return WPMORE;
}

public byte getWPMORP() {
return WPMORP;
}

public byte getWPMORP2() {
return WPMORP2;
}

public byte getWPMORP3() {
return WPMORP3;
}

public byte getWPMORP4() {
return WPMORP4;
}

public byte getWPMORP5() {
return WPMORP5;
}

public byte getWPMORP6() {
return WPMORP6;
}

public boolean getWPMORP7() {
return WPMORP7;
}

public int getWPMPAH() {
return WPMPAH;
}

public int getWPMSAH() {
return WPMSAH;
}

public byte getWPMSFQ() {
return WPMSFQ;
}

public int getWPMSH() {
return WPMSH;
}

public byte getWPMSQ() {
return WPMSQ;
}

public byte getWPMSSQ() {
return WPMSSQ;
}

public byte getWPMSTQ() {
return WPMSTQ;
}

public byte getWPMTQ() {
return WPMTQ;
}

public byte getWPMYNJ() {
return WPMYNJ;
}

public byte getWPNCBM85() {
return WPNCBM85;
}

public byte getWPNCBM86() {
return WPNCBM86;
}

public byte getWPNCBMAD() {
return WPNCBMAD;
}

public byte getWPNCBMCO() {
return WPNCBMCO;
}

public byte getWPNCBMFL() {
return WPNCBMFL;
}

public byte getWPNCBMHO() {
return WPNCBMHO;
}

public byte getWPNCBMHR() {
return WPNCBMHR;
}

public byte getWPNCBMME() {
return WPNCBMME;
}

public byte getWPNCBMPH() {
return WPNCBMPH;
}

public byte getWPNCH96() {
return WPNCH96;
}

public byte getWPNCHAD() {
return WPNCHAD;
}

public byte getWPNCHB85() {
return WPNCHB85;
}

public byte getWPNCHBAD() {
return WPNCHBAD;
}

public byte getWPNCHBFL() {
return WPNCHBFL;
}

public byte getWPNCHBHO() {
return WPNCHBHO;
}

public byte getWPNCHBHR() {
return WPNCHBHR;
}

public byte getWPNCHBME() {
return WPNCHBME;
}

public byte getWPNCHBPH() {
return WPNCHBPH;
}

public byte getWPNCHFL() {
return WPNCHFL;
}

public byte getWPNCHGA() {
return WPNCHGA;
}

public byte getWPNCHGN() {
return WPNCHGN;
}

public byte getWPNCHGO() {
return WPNCHGO;
}

public byte getWPNCHHO() {
return WPNCHHO;
}

public byte getWPNCHHR() {
return WPNCHHR;
}

public byte getWPNCHM85() {
return WPNCHM85;
}

public byte getWPNCHM86() {
return WPNCHM86;
}

public byte getWPNCHM96() {
return WPNCHM96;
}

public byte getWPNCHMAD() {
return WPNCHMAD;
}

public byte getWPNCHMCO() {
return WPNCHMCO;
}

public byte getWPNCHME() {
return WPNCHME;
}

public byte getWPNCHMFL() {
return WPNCHMFL;
}

public byte getWPNCHMHO() {
return WPNCHMHO;
}

public byte getWPNCHMHR() {
return WPNCHMHR;
}

public byte getWPNCHMME() {
return WPNCHMME;
}

public byte getWPNCHMPH() {
return WPNCHMPH;
}

public byte getWPNCHPH() {
return WPNCHPH;
}

public boolean getWPNE() {
return WPNE;
}

public byte getWPNEW() {
return WPNEW;
}

public byte getWPNEW2() {
return WPNEW2;
}

public byte getWPNEW3() {
return WPNEW3;
}

public boolean getWPNEW5() {
return WPNEW5;
}

public boolean getWPNEW6() {
return WPNEW6;
}

public boolean getWPNEW7() {
return WPNEW7;
}

public boolean getWPNEWP() {
return WPNEWP;
}

public byte getWPNEWP2() {
return WPNEWP2;
}

public byte getWPNEWP3() {
return WPNEWP3;
}

public byte getWPNEWP4() {
return WPNEWP4;
}

public byte getWPNEWP5() {
return WPNEWP5;
}

public byte getWPNEWP6() {
return WPNEWP6;
}

public byte getWPNEWP7() {
return WPNEWP7;
}

public byte getWPNIRR2() {
return WPNIRR2;
}

public byte getWPNIRR3() {
return WPNIRR3;
}

public byte getWPNIRR4() {
return WPNIRR4;
}

public boolean getWPNIRR5() {
return WPNIRR5;
}

public boolean getWPNIRR6() {
return WPNIRR6;
}

public boolean getWPNIRR7() {
return WPNIRR7;
}

public byte getWPNLK95() {
return WPNLK95;
}

public byte getWPNLKDI() {
return WPNLKDI;
}

public byte getWPNLKLO() {
return WPNLKLO;
}

public boolean getWPNLKM85() {
return WPNLKM85;
}

public boolean getWPNLKM86() {
return WPNLKM86;
}

public byte getWPNLKMAC() {
return WPNLKMAC;
}

public byte getWPNLKMCM() {
return WPNLKMCM;
}

public byte getWPNLKMCN() {
return WPNLKMCN;
}

public byte getWPNLKMCO() {
return WPNLKMCO;
}

public byte getWPNLKMDE() {
return WPNLKMDE;
}

public byte getWPNLKMDI() {
return WPNLKMDI;
}

public byte getWPNLKMEN() {
return WPNLKMEN;
}

public byte getWPNLKMFI() {
return WPNLKMFI;
}

public byte getWPNLKMFR() {
return WPNLKMFR;
}

public byte getWPNLKMHR() {
return WPNLKMHR;
}

public byte getWPNLKMLO() {
return WPNLKMLO;
}

public byte getWPNLKMNO() {
return WPNLKMNO;
}

public byte getWPNLKMPA() {
return WPNLKMPA;
}

public byte getWPNLKMPE() {
return WPNLKMPE;
}

public byte getWPNLKMRT() {
return WPNLKMRT;
}

public byte getWPNLKMSE() {
return WPNLKMSE;
}

public byte getWPNLKMSU() {
return WPNLKMSU;
}

public byte getWPNLKPA() {
return WPNLKPA;
}

public byte getWPNLKPE() {
return WPNLKPE;
}

public byte getWPNLKRT() {
return WPNLKRT;
}

public byte getWPNLKSU() {
return WPNLKSU;
}

public byte getWPNPENS() {
return WPNPENS;
}

public byte getWPNRA2() {
return WPNRA2;
}

public byte getWPNRA3() {
return WPNRA3;
}

public byte getWPNRA4() {
return WPNRA4;
}

public byte getWPNRA5() {
return WPNRA5;
}

public byte getWPNRA6() {
return WPNRA6;
}

public boolean getWPNRA7() {
return WPNRA7;
}

public byte getWPOCHG() {
return WPOCHG;
}

public byte getWPOJ() {
return WPOJ;
}

public byte getWPOJ2() {
return WPOJ2;
}

public byte getWPOJ3() {
return WPOJ3;
}

public byte getWPOWB() {
return WPOWB;
}

public byte getWPOWB2() {
return WPOWB2;
}

public byte getWPOWB3() {
return WPOWB3;
}

public byte getWPOWK() {
return WPOWK;
}

public byte getWPPAY2() {
return WPPAY2;
}

public byte getWPPAY3() {
return WPPAY3;
}

public byte getWPPAY4() {
return WPPAY4;
}

public byte getWPPAY5() {
return WPPAY5;
}

public byte getWPPAY6() {
return WPPAY6;
}

public byte getWPPAY7() {
return WPPAY7;
}

public byte getWPPCON2() {
return WPPCON2;
}

public byte getWPPCON3() {
return WPPCON3;
}

public byte getWPPCON5() {
return WPPCON5;
}

public byte getWPPCON6() {
return WPPCON6;
}

public boolean getWPPCON7() {
return WPPCON7;
}

public byte getWPPCONT4() {
return WPPCONT4;
}

public byte getWPPE2AE() {
return WPPE2AE;
}

public short getWPPE2AL() {
return WPPE2AL;
}

public byte getWPPE2AR() {
return WPPE2AR;
}

public int getWPPE2AU() {
return WPPE2AU;
}

public boolean getWPPE2TE() {
return WPPE2TE;
}

public boolean getWPPE2TL() {
return WPPE2TL;
}

public boolean getWPPE2TR() {
return WPPE2TR;
}

public short getWPPE2TU() {
return WPPE2TU;
}

public byte getWPPE3AE() {
return WPPE3AE;
}

public short getWPPE3AL() {
return WPPE3AL;
}

public byte getWPPE3AR() {
return WPPE3AR;
}

public short getWPPE3AU() {
return WPPE3AU;
}

public boolean getWPPE3TE() {
return WPPE3TE;
}

public boolean getWPPE3TL() {
return WPPE3TL;
}

public boolean getWPPE3TR() {
return WPPE3TR;
}

public boolean getWPPE3TU() {
return WPPE3TU;
}

public byte getWPPE4AE() {
return WPPE4AE;
}

public int getWPPE4AL() {
return WPPE4AL;
}

public byte getWPPE4AR() {
return WPPE4AR;
}

public int getWPPE4AU() {
return WPPE4AU;
}

public boolean getWPPE4TE() {
return WPPE4TE;
}

public int getWPPE4TL() {
return WPPE4TL;
}

public boolean getWPPE4TR() {
return WPPE4TR;
}

public boolean getWPPE4TU() {
return WPPE4TU;
}

public byte getWPPE5AE() {
return WPPE5AE;
}

public int getWPPE5AL() {
return WPPE5AL;
}

public byte getWPPE5AR() {
return WPPE5AR;
}

public int getWPPE5AU() {
return WPPE5AU;
}

public boolean getWPPE5TE() {
return WPPE5TE;
}

public boolean getWPPE5TL() {
return WPPE5TL;
}

public boolean getWPPE5TR() {
return WPPE5TR;
}

public boolean getWPPE5TU() {
return WPPE5TU;
}

public byte getWPPE6AE() {
return WPPE6AE;
}

public int getWPPE6AL() {
return WPPE6AL;
}

public byte getWPPE6AR() {
return WPPE6AR;
}

public short getWPPE6AU() {
return WPPE6AU;
}

public boolean getWPPE6TE() {
return WPPE6TE;
}

public boolean getWPPE6TL() {
return WPPE6TL;
}

public boolean getWPPE6TR() {
return WPPE6TR;
}

public boolean getWPPE6TU() {
return WPPE6TU;
}

public boolean getWPPE7AE() {
return WPPE7AE;
}

public boolean getWPPE7AL() {
return WPPE7AL;
}

public boolean getWPPE7AR() {
return WPPE7AR;
}

public boolean getWPPE7AU() {
return WPPE7AU;
}

public boolean getWPPE7TE() {
return WPPE7TE;
}

public boolean getWPPE7TL() {
return WPPE7TL;
}

public boolean getWPPE7TR() {
return WPPE7TR;
}

public boolean getWPPE7TU() {
return WPPE7TU;
}

public byte getWPPENAE() {
return WPPENAE;
}

public double getWPPENAL() {
return WPPENAL;
}

public byte getWPPENAR() {
return WPPENAR;
}

public double getWPPENAU() {
return WPPENAU;
}

public int getWPPENB2() {
return WPPENB2;
}

public int getWPPENB3() {
return WPPENB3;
}

public int getWPPENB4() {
return WPPENB4;
}

public int getWPPENB5() {
return WPPENB5;
}

public short getWPPENB6() {
return WPPENB6;
}

public short getWPPENB7() {
return WPPENB7;
}

public byte getWPPENN() {
return WPPENN;
}

public byte getWPPENT() {
return WPPENT;
}

public byte getWPPENT2() {
return WPPENT2;
}

public byte getWPPENT3() {
return WPPENT3;
}

public byte getWPPENT4() {
return WPPENT4;
}

public byte getWPPENT5() {
return WPPENT5;
}

public byte getWPPENT6() {
return WPPENT6;
}

public byte getWPPENT7() {
return WPPENT7;
}

public byte getWPPENTE() {
return WPPENTE;
}

public double getWPPENTL() {
return WPPENTL;
}

public byte getWPPENTR() {
return WPPENTR;
}

public double getWPPENTU() {
return WPPENTU;
}

public byte getWPPERC2() {
return WPPERC2;
}

public byte getWPPERC3() {
return WPPERC3;
}

public byte getWPPERC4() {
return WPPERC4;
}

public byte getWPPERC5() {
return WPPERC5;
}

public boolean getWPPERC6() {
return WPPERC6;
}

public boolean getWPPERC7() {
return WPPERC7;
}

public boolean getWPPFV2E() {
return WPPFV2E;
}

public short getWPPFV2L() {
return WPPFV2L;
}

public boolean getWPPFV2R() {
return WPPFV2R;
}

public boolean getWPPFV2U() {
return WPPFV2U;
}

public boolean getWPPFV3E() {
return WPPFV3E;
}

public boolean getWPPFV3L() {
return WPPFV3L;
}

public boolean getWPPFV3R() {
return WPPFV3R;
}

public boolean getWPPFV3U() {
return WPPFV3U;
}

public byte getWPPFV4E() {
return WPPFV4E;
}

public short getWPPFV4L() {
return WPPFV4L;
}

public byte getWPPFV4R() {
return WPPFV4R;
}

public short getWPPFV4U() {
return WPPFV4U;
}

public byte getWPPFV5E() {
return WPPFV5E;
}

public short getWPPFV5L() {
return WPPFV5L;
}

public byte getWPPFV5R() {
return WPPFV5R;
}

public int getWPPFV5U() {
return WPPFV5U;
}

public boolean getWPPFV6E() {
return WPPFV6E;
}

public boolean getWPPFV6L() {
return WPPFV6L;
}

public boolean getWPPFV6R() {
return WPPFV6R;
}

public boolean getWPPFV6U() {
return WPPFV6U;
}

public boolean getWPPFV7E() {
return WPPFV7E;
}

public boolean getWPPFV7L() {
return WPPFV7L;
}

public boolean getWPPFV7R() {
return WPPFV7R;
}

public boolean getWPPFV7U() {
return WPPFV7U;
}

public short getWPPFVA2() {
return WPPFVA2;
}

public boolean getWPPFVA3() {
return WPPFVA3;
}

public short getWPPFVA4() {
return WPPFVA4;
}

public byte getWPPFVA5() {
return WPPFVA5;
}

public boolean getWPPFVA6() {
return WPPFVA6;
}

public boolean getWPPFVA7() {
return WPPFVA7;
}

public byte getWPPFVE() {
return WPPFVE;
}

public double getWPPFVL() {
return WPPFVL;
}

public byte getWPPFVR() {
return WPPFVR;
}

public double getWPPFVU() {
return WPPFVU;
}

public byte getWPPLP2() {
return WPPLP2;
}

public byte getWPPLP3() {
return WPPLP3;
}

public byte getWPPLP4() {
return WPPLP4;
}

public byte getWPPLP5() {
return WPPLP5;
}

public byte getWPPLP6() {
return WPPLP6;
}

public boolean getWPPLP7() {
return WPPLP7;
}

public byte getWPPLPH2() {
return WPPLPH2;
}

public byte getWPPLPH3() {
return WPPLPH3;
}

public byte getWPPLPH4() {
return WPPLPH4;
}

public boolean getWPPLPH5() {
return WPPLPH5;
}

public boolean getWPPLPH6() {
return WPPLPH6;
}

public boolean getWPPLPH7() {
return WPPLPH7;
}

public byte getWPPREV() {
return WPPREV;
}

public byte getWPPREV2() {
return WPPREV2;
}

public byte getWPPREV3() {
return WPPREV3;
}

public byte getWPPREV4() {
return WPPREV4;
}

public byte getWPPREV5() {
return WPPREV5;
}

public byte getWPPREV6() {
return WPPREV6;
}

public boolean getWPPREV7() {
return WPPREV7;
}

public byte getWPPROFE() {
return WPPROFE;
}

public int getWPPROFL() {
return WPPROFL;
}

public byte getWPPROFR() {
return WPPROFR;
}

public int getWPPROFU() {
return WPPROFU;
}

public byte getWPPS() {
return WPPS;
}

public byte getWPPS95() {
return WPPS95;
}

public byte getWPPSAF() {
return WPPSAF;
}

public byte getWPPSAL2() {
return WPPSAL2;
}

public boolean getWPPSAL3() {
return WPPSAL3;
}

public byte getWPPSAL4() {
return WPPSAL4;
}

public byte getWPPSAL5() {
return WPPSAL5;
}

public boolean getWPPSAL6() {
return WPPSAL6;
}

public boolean getWPPSAL7() {
return WPPSAL7;
}

public byte getWPPSEL() {
return WPPSEL;
}

public byte getWPPSEX() {
return WPPSEX;
}

public byte getWPPSM85() {
return WPPSM85;
}

public byte getWPPSM86() {
return WPPSM86;
}

public byte getWPPSMAF() {
return WPPSMAF;
}

public byte getWPPSMAG() {
return WPPSMAG;
}

public byte getWPPSMAL() {
return WPPSMAL;
}

public byte getWPPSMDL() {
return WPPSMDL;
}

public byte getWPPSMEL() {
return WPPSMEL;
}

public byte getWPPSMEX() {
return WPPSMEX;
}

public byte getWPPSMHR() {
return WPPSMHR;
}

public byte getWPPSMOT() {
return WPPSMOT;
}

public byte getWPPSOT() {
return WPPSOT;
}

public byte getWPPSPC() {
return WPPSPC;
}

public byte getWPPSPC2() {
return WPPSPC2;
}

public byte getWPPSPC3() {
return WPPSPC3;
}

public byte getWPPSPC4() {
return WPPSPC4;
}

public boolean getWPPSPC5() {
return WPPSPC5;
}

public boolean getWPPSPC6() {
return WPPSPC6;
}

public boolean getWPPSPC7() {
return WPPSPC7;
}

public byte getWPPTOP2() {
return WPPTOP2;
}

public byte getWPPTOP3() {
return WPPTOP3;
}

public byte getWPPTOP4() {
return WPPTOP4;
}

public byte getWPPTOP5() {
return WPPTOP5;
}

public byte getWPPTOP6() {
return WPPTOP6;
}

public byte getWPPTOP7() {
return WPPTOP7;
}

public byte getWPPTP2() {
return WPPTP2;
}

public byte getWPPTP3() {
return WPPTP3;
}

public byte getWPPTP4() {
return WPPTP4;
}

public byte getWPPTP5() {
return WPPTP5;
}

public boolean getWPPTP6() {
return WPPTP6;
}

public boolean getWPPTP7() {
return WPPTP7;
}

public boolean getWPPY2FE() {
return WPPY2FE;
}

public boolean getWPPY2FL() {
return WPPY2FL;
}

public boolean getWPPY2FR() {
return WPPY2FR;
}

public boolean getWPPY2FU() {
return WPPY2FU;
}

public byte getWPPY2ME() {
return WPPY2ME;
}

public short getWPPY2ML() {
return WPPY2ML;
}

public byte getWPPY2MR() {
return WPPY2MR;
}

public short getWPPY2MU() {
return WPPY2MU;
}

public byte getWPPY2OE() {
return WPPY2OE;
}

public short getWPPY2OL() {
return WPPY2OL;
}

public byte getWPPY2OR() {
return WPPY2OR;
}

public byte getWPPY2OU() {
return WPPY2OU;
}

public byte getWPPY2WE() {
return WPPY2WE;
}

public byte getWPPY2WL() {
return WPPY2WL;
}

public byte getWPPY2WR() {
return WPPY2WR;
}

public byte getWPPY2WU() {
return WPPY2WU;
}

public byte getWPPY2YE() {
return WPPY2YE;
}

public short getWPPY2YL() {
return WPPY2YL;
}

public byte getWPPY2YR() {
return WPPY2YR;
}

public short getWPPY2YU() {
return WPPY2YU;
}

public boolean getWPPY3FE() {
return WPPY3FE;
}

public boolean getWPPY3FL() {
return WPPY3FL;
}

public boolean getWPPY3FR() {
return WPPY3FR;
}

public boolean getWPPY3FU() {
return WPPY3FU;
}

public byte getWPPY3ME() {
return WPPY3ME;
}

public short getWPPY3ML() {
return WPPY3ML;
}

public byte getWPPY3MR() {
return WPPY3MR;
}

public short getWPPY3MU() {
return WPPY3MU;
}

public byte getWPPY3OE() {
return WPPY3OE;
}

public byte getWPPY3OL() {
return WPPY3OL;
}

public byte getWPPY3OR() {
return WPPY3OR;
}

public byte getWPPY3OU() {
return WPPY3OU;
}

public boolean getWPPY3WE() {
return WPPY3WE;
}

public boolean getWPPY3WL() {
return WPPY3WL;
}

public boolean getWPPY3WR() {
return WPPY3WR;
}

public boolean getWPPY3WU() {
return WPPY3WU;
}

public byte getWPPY3YE() {
return WPPY3YE;
}

public short getWPPY3YL() {
return WPPY3YL;
}

public byte getWPPY3YR() {
return WPPY3YR;
}

public short getWPPY3YU() {
return WPPY3YU;
}

public boolean getWPPY4FE() {
return WPPY4FE;
}

public boolean getWPPY4FL() {
return WPPY4FL;
}

public boolean getWPPY4FR() {
return WPPY4FR;
}

public boolean getWPPY4FU() {
return WPPY4FU;
}

public byte getWPPY4ME() {
return WPPY4ME;
}

public byte getWPPY4ML() {
return WPPY4ML;
}

public byte getWPPY4MR() {
return WPPY4MR;
}

public short getWPPY4MU() {
return WPPY4MU;
}

public boolean getWPPY4OE() {
return WPPY4OE;
}

public boolean getWPPY4OL() {
return WPPY4OL;
}

public boolean getWPPY4OR() {
return WPPY4OR;
}

public boolean getWPPY4OU() {
return WPPY4OU;
}

public boolean getWPPY4WE() {
return WPPY4WE;
}

public boolean getWPPY4WL() {
return WPPY4WL;
}

public boolean getWPPY4WR() {
return WPPY4WR;
}

public boolean getWPPY4WU() {
return WPPY4WU;
}

public boolean getWPPY4YE() {
return WPPY4YE;
}

public byte getWPPY4YL() {
return WPPY4YL;
}

public byte getWPPY4YR() {
return WPPY4YR;
}

public short getWPPY4YU() {
return WPPY4YU;
}

public boolean getWPPY5FE() {
return WPPY5FE;
}

public boolean getWPPY5FL() {
return WPPY5FL;
}

public boolean getWPPY5FR() {
return WPPY5FR;
}

public boolean getWPPY5FU() {
return WPPY5FU;
}

public boolean getWPPY5ME() {
return WPPY5ME;
}

public boolean getWPPY5ML() {
return WPPY5ML;
}

public boolean getWPPY5MR() {
return WPPY5MR;
}

public boolean getWPPY5MU() {
return WPPY5MU;
}

public boolean getWPPY5OE() {
return WPPY5OE;
}

public boolean getWPPY5OL() {
return WPPY5OL;
}

public boolean getWPPY5OR() {
return WPPY5OR;
}

public boolean getWPPY5OU() {
return WPPY5OU;
}

public boolean getWPPY5WE() {
return WPPY5WE;
}

public boolean getWPPY5WL() {
return WPPY5WL;
}

public boolean getWPPY5WR() {
return WPPY5WR;
}

public boolean getWPPY5WU() {
return WPPY5WU;
}

public boolean getWPPY5YE() {
return WPPY5YE;
}

public boolean getWPPY5YL() {
return WPPY5YL;
}

public boolean getWPPY5YR() {
return WPPY5YR;
}

public boolean getWPPY5YU() {
return WPPY5YU;
}

public boolean getWPPY6FE() {
return WPPY6FE;
}

public boolean getWPPY6FL() {
return WPPY6FL;
}

public boolean getWPPY6FR() {
return WPPY6FR;
}

public boolean getWPPY6FU() {
return WPPY6FU;
}

public boolean getWPPY6ME() {
return WPPY6ME;
}

public boolean getWPPY6ML() {
return WPPY6ML;
}

public boolean getWPPY6MR() {
return WPPY6MR;
}

public boolean getWPPY6MU() {
return WPPY6MU;
}

public boolean getWPPY6OE() {
return WPPY6OE;
}

public boolean getWPPY6OL() {
return WPPY6OL;
}

public boolean getWPPY6OR() {
return WPPY6OR;
}

public boolean getWPPY6OU() {
return WPPY6OU;
}

public boolean getWPPY6WE() {
return WPPY6WE;
}

public boolean getWPPY6WL() {
return WPPY6WL;
}

public boolean getWPPY6WR() {
return WPPY6WR;
}

public boolean getWPPY6WU() {
return WPPY6WU;
}

public boolean getWPPY6YE() {
return WPPY6YE;
}

public boolean getWPPY6YL() {
return WPPY6YL;
}

public boolean getWPPY6YR() {
return WPPY6YR;
}

public boolean getWPPY6YU() {
return WPPY6YU;
}

public boolean getWPPY7FE() {
return WPPY7FE;
}

public boolean getWPPY7FL() {
return WPPY7FL;
}

public boolean getWPPY7FR() {
return WPPY7FR;
}

public boolean getWPPY7FU() {
return WPPY7FU;
}

public boolean getWPPY7ME() {
return WPPY7ME;
}

public boolean getWPPY7ML() {
return WPPY7ML;
}

public boolean getWPPY7MR() {
return WPPY7MR;
}

public boolean getWPPY7MU() {
return WPPY7MU;
}

public boolean getWPPY7OE() {
return WPPY7OE;
}

public boolean getWPPY7OL() {
return WPPY7OL;
}

public boolean getWPPY7OR() {
return WPPY7OR;
}

public boolean getWPPY7OU() {
return WPPY7OU;
}

public boolean getWPPY7WE() {
return WPPY7WE;
}

public boolean getWPPY7WL() {
return WPPY7WL;
}

public boolean getWPPY7WR() {
return WPPY7WR;
}

public boolean getWPPY7WU() {
return WPPY7WU;
}

public boolean getWPPY7YE() {
return WPPY7YE;
}

public boolean getWPPY7YL() {
return WPPY7YL;
}

public boolean getWPPY7YR() {
return WPPY7YR;
}

public boolean getWPPY7YU() {
return WPPY7YU;
}

public int getWPPYR2() {
return WPPYR2;
}

public int getWPPYR3() {
return WPPYR3;
}

public int getWPPYR4() {
return WPPYR4;
}

public short getWPPYR5() {
return WPPYR5;
}

public short getWPPYR6() {
return WPPYR6;
}

public short getWPPYR7() {
return WPPYR7;
}

public boolean getWPPYRFE() {
return WPPYRFE;
}

public short getWPPYRFL() {
return WPPYRFL;
}

public boolean getWPPYRFR() {
return WPPYRFR;
}

public boolean getWPPYRFU() {
return WPPYRFU;
}

public byte getWPPYRME() {
return WPPYRME;
}

public double getWPPYRML() {
return WPPYRML;
}

public byte getWPPYRMR() {
return WPPYRMR;
}

public double getWPPYRMU() {
return WPPYRMU;
}

public byte getWPPYROE() {
return WPPYROE;
}

public short getWPPYROL() {
return WPPYROL;
}

public byte getWPPYROR() {
return WPPYROR;
}

public short getWPPYROU() {
return WPPYROU;
}

public byte getWPPYRWE() {
return WPPYRWE;
}

public short getWPPYRWL() {
return WPPYRWL;
}

public byte getWPPYRWR() {
return WPPYRWR;
}

public short getWPPYRWU() {
return WPPYRWU;
}

public byte getWPPYRYE() {
return WPPYRYE;
}

public double getWPPYRYL() {
return WPPYRYL;
}

public byte getWPPYRYR() {
return WPPYRYR;
}

public double getWPPYRYU() {
return WPPYRYU;
}

public byte getWPQN() {
return WPQN;
}

public byte getWPRC295() {
return WPRC295;
}

public byte getWPRC2MO() {
return WPRC2MO;
}

public boolean getWPRC2PU() {
return WPRC2PU;
}

public byte getWPRC2RE() {
return WPRC2RE;
}

public byte getWPRC2RI() {
return WPRC2RI;
}

public byte getWPRC2ST() {
return WPRC2ST;
}

public byte getWPRC395() {
return WPRC395;
}

public boolean getWPRC3MO() {
return WPRC3MO;
}

public boolean getWPRC3PU() {
return WPRC3PU;
}

public boolean getWPRC3RE() {
return WPRC3RE;
}

public byte getWPRC3RI() {
return WPRC3RI;
}

public boolean getWPRC3ST() {
return WPRC3ST;
}

public byte getWPRC495() {
return WPRC495;
}

public boolean getWPRC4MO() {
return WPRC4MO;
}

public boolean getWPRC4PU() {
return WPRC4PU;
}

public boolean getWPRC4RE() {
return WPRC4RE;
}

public byte getWPRC4RI() {
return WPRC4RI;
}

public boolean getWPRC4ST() {
return WPRC4ST;
}

public boolean getWPRC595() {
return WPRC595;
}

public boolean getWPRC5MO() {
return WPRC5MO;
}

public boolean getWPRC5PU() {
return WPRC5PU;
}

public boolean getWPRC5RE() {
return WPRC5RE;
}

public boolean getWPRC5RI() {
return WPRC5RI;
}

public boolean getWPRC5ST() {
return WPRC5ST;
}

public boolean getWPRC695() {
return WPRC695;
}

public boolean getWPRC6MO() {
return WPRC6MO;
}

public boolean getWPRC6PU() {
return WPRC6PU;
}

public boolean getWPRC6RE() {
return WPRC6RE;
}

public boolean getWPRC6RI() {
return WPRC6RI;
}

public boolean getWPRC6ST() {
return WPRC6ST;
}

public boolean getWPRC795() {
return WPRC795;
}

public boolean getWPRC7MO() {
return WPRC7MO;
}

public boolean getWPRC7PU() {
return WPRC7PU;
}

public boolean getWPRC7RE() {
return WPRC7RE;
}

public boolean getWPRC7RI() {
return WPRC7RI;
}

public boolean getWPRC7ST() {
return WPRC7ST;
}

public byte getWPRC95() {
return WPRC95;
}

public byte getWPRCM285() {
return WPRCM285;
}

public byte getWPRCM286() {
return WPRCM286;
}

public byte getWPRCM2AF() {
return WPRCM2AF;
}

public byte getWPRCM2MO() {
return WPRCM2MO;
}

public boolean getWPRCM2NK() {
return WPRCM2NK;
}

public boolean getWPRCM2OH() {
return WPRCM2OH;
}

public boolean getWPRCM2PU() {
return WPRCM2PU;
}

public byte getWPRCM2RE() {
return WPRCM2RE;
}

public byte getWPRCM2RI() {
return WPRCM2RI;
}

public byte getWPRCM2ST() {
return WPRCM2ST;
}

public byte getWPRCM2UN() {
return WPRCM2UN;
}

public byte getWPRCM385() {
return WPRCM385;
}

public byte getWPRCM386() {
return WPRCM386;
}

public byte getWPRCM3AF() {
return WPRCM3AF;
}

public boolean getWPRCM3MO() {
return WPRCM3MO;
}

public boolean getWPRCM3NK() {
return WPRCM3NK;
}

public boolean getWPRCM3OH() {
return WPRCM3OH;
}

public boolean getWPRCM3PU() {
return WPRCM3PU;
}

public boolean getWPRCM3RE() {
return WPRCM3RE;
}

public byte getWPRCM3RI() {
return WPRCM3RI;
}

public boolean getWPRCM3ST() {
return WPRCM3ST;
}

public boolean getWPRCM3UN() {
return WPRCM3UN;
}

public boolean getWPRCM485() {
return WPRCM485;
}

public byte getWPRCM486() {
return WPRCM486;
}

public boolean getWPRCM4AF() {
return WPRCM4AF;
}

public boolean getWPRCM4MO() {
return WPRCM4MO;
}

public boolean getWPRCM4NK() {
return WPRCM4NK;
}

public boolean getWPRCM4OH() {
return WPRCM4OH;
}

public boolean getWPRCM4PU() {
return WPRCM4PU;
}

public boolean getWPRCM4RE() {
return WPRCM4RE;
}

public byte getWPRCM4RI() {
return WPRCM4RI;
}

public boolean getWPRCM4ST() {
return WPRCM4ST;
}

public byte getWPRCM4UN() {
return WPRCM4UN;
}

public boolean getWPRCM585() {
return WPRCM585;
}

public boolean getWPRCM586() {
return WPRCM586;
}

public boolean getWPRCM5AF() {
return WPRCM5AF;
}

public boolean getWPRCM5MO() {
return WPRCM5MO;
}

public boolean getWPRCM5NK() {
return WPRCM5NK;
}

public boolean getWPRCM5OH() {
return WPRCM5OH;
}

public boolean getWPRCM5PU() {
return WPRCM5PU;
}

public boolean getWPRCM5RE() {
return WPRCM5RE;
}

public boolean getWPRCM5RI() {
return WPRCM5RI;
}

public boolean getWPRCM5ST() {
return WPRCM5ST;
}

public boolean getWPRCM5UN() {
return WPRCM5UN;
}

public boolean getWPRCM685() {
return WPRCM685;
}

public boolean getWPRCM686() {
return WPRCM686;
}

public boolean getWPRCM6AF() {
return WPRCM6AF;
}

public boolean getWPRCM6MO() {
return WPRCM6MO;
}

public boolean getWPRCM6NK() {
return WPRCM6NK;
}

public boolean getWPRCM6OH() {
return WPRCM6OH;
}

public boolean getWPRCM6PU() {
return WPRCM6PU;
}

public boolean getWPRCM6RE() {
return WPRCM6RE;
}

public boolean getWPRCM6RI() {
return WPRCM6RI;
}

public boolean getWPRCM6ST() {
return WPRCM6ST;
}

public boolean getWPRCM6UN() {
return WPRCM6UN;
}

public boolean getWPRCM785() {
return WPRCM785;
}

public boolean getWPRCM786() {
return WPRCM786;
}

public boolean getWPRCM7AF() {
return WPRCM7AF;
}

public boolean getWPRCM7MO() {
return WPRCM7MO;
}

public boolean getWPRCM7NK() {
return WPRCM7NK;
}

public boolean getWPRCM7OH() {
return WPRCM7OH;
}

public boolean getWPRCM7PU() {
return WPRCM7PU;
}

public boolean getWPRCM7RE() {
return WPRCM7RE;
}

public boolean getWPRCM7RI() {
return WPRCM7RI;
}

public boolean getWPRCM7ST() {
return WPRCM7ST;
}

public boolean getWPRCM7UN() {
return WPRCM7UN;
}

public byte getWPRCM85() {
return WPRCM85;
}

public byte getWPRCM86() {
return WPRCM86;
}

public byte getWPRCMAF() {
return WPRCMAF;
}

public byte getWPRCMMO() {
return WPRCMMO;
}

public byte getWPRCMNK() {
return WPRCMNK;
}

public byte getWPRCMO() {
return WPRCMO;
}

public byte getWPRCMOH() {
return WPRCMOH;
}

public byte getWPRCMPU() {
return WPRCMPU;
}

public byte getWPRCMRE() {
return WPRCMRE;
}

public byte getWPRCMRI() {
return WPRCMRI;
}

public byte getWPRCMST() {
return WPRCMST;
}

public byte getWPRCMUN() {
return WPRCMUN;
}

public byte getWPRCON2() {
return WPRCON2;
}

public byte getWPRCON3() {
return WPRCON3;
}

public byte getWPRCON4() {
return WPRCON4;
}

public byte getWPRCON5() {
return WPRCON5;
}

public boolean getWPRCON6() {
return WPRCON6;
}

public boolean getWPRCON7() {
return WPRCON7;
}

public byte getWPRCPU() {
return WPRCPU;
}

public byte getWPRCRE() {
return WPRCRE;
}

public byte getWPRCRI() {
return WPRCRI;
}

public byte getWPRCST() {
return WPRCST;
}

public byte getWPREA95() {
return WPREA95;
}

public byte getWPREA96() {
return WPREA96;
}

public byte getWPREACH() {
return WPREACH;
}

public byte getWPREADT() {
return WPREADT;
}

public byte getWPREAEN() {
return WPREAEN;
}

public byte getWPREAFA() {
return WPREAFA;
}

public byte getWPREAFI() {
return WPREAFI;
}

public byte getWPREAM85() {
return WPREAM85;
}

public byte getWPREAM86() {
return WPREAM86;
}

public byte getWPREAM96() {
return WPREAM96;
}

public byte getWPREAMCH() {
return WPREAMCH;
}

public byte getWPREAMDT() {
return WPREAMDT;
}

public byte getWPREAMEN() {
return WPREAMEN;
}

public byte getWPREAMFA() {
return WPREAMFA;
}

public byte getWPREAMFI() {
return WPREAMFI;
}

public byte getWPREAMNO() {
return WPREAMNO;
}

public byte getWPREAMOH() {
return WPREAMOH;
}

public byte getWPREAMRE() {
return WPREAMRE;
}

public byte getWPREAMRH() {
return WPREAMRH;
}

public byte getWPREAMST() {
return WPREAMST;
}

public byte getWPREAMVR() {
return WPREAMVR;
}

public byte getWPREAMYO() {
return WPREAMYO;
}

public byte getWPREANO() {
return WPREANO;
}

public byte getWPREAOH() {
return WPREAOH;
}

public byte getWPREARE() {
return WPREARE;
}

public byte getWPREARH() {
return WPREARH;
}

public byte getWPREAST() {
return WPREAST;
}

public byte getWPREAVR() {
return WPREAVR;
}

public byte getWPREAYO() {
return WPREAYO;
}

public byte getWPREC2() {
return WPREC2;
}

public byte getWPREC3() {
return WPREC3;
}

public byte getWPREC4() {
return WPREC4;
}

public byte getWPREC5() {
return WPREC5;
}

public byte getWPREC6() {
return WPREC6;
}

public boolean getWPREC7() {
return WPREC7;
}

public byte getWPRGHX() {
return WPRGHX;
}

public byte getWPRGHX2() {
return WPRGHX2;
}

public byte getWPRGHX3() {
return WPRGHX3;
}

public byte getWPRGHX4() {
return WPRGHX4;
}

public byte getWPRGHX5() {
return WPRGHX5;
}

public byte getWPRGHX6() {
return WPRGHX6;
}

public boolean getWPRGHX7() {
return WPRGHX7;
}

public byte getWPRPENS() {
return WPRPENS;
}

public byte getWPRR95() {
return WPRR95;
}

public byte getWPRR96() {
return WPRR96;
}

public byte getWPRRAG() {
return WPRRAG;
}

public byte getWPRRCH() {
return WPRRCH;
}

public byte getWPRRDT() {
return WPRRDT;
}

public byte getWPRREN() {
return WPRREN;
}

public byte getWPRRFA() {
return WPRRFA;
}

public byte getWPRRFI() {
return WPRRFI;
}

public byte getWPRRM85() {
return WPRRM85;
}

public byte getWPRRM86() {
return WPRRM86;
}

public byte getWPRRM96() {
return WPRRM96;
}

public byte getWPRRMAF() {
return WPRRMAF;
}

public byte getWPRRMAG() {
return WPRRMAG;
}

public byte getWPRRMCH() {
return WPRRMCH;
}

public byte getWPRRMDT() {
return WPRRMDT;
}

public byte getWPRRMEN() {
return WPRRMEN;
}

public byte getWPRRMFA() {
return WPRRMFA;
}

public byte getWPRRMFI() {
return WPRRMFI;
}

public byte getWPRRMLI() {
return WPRRMLI;
}

public byte getWPRRMOH() {
return WPRRMOH;
}

public byte getWPRRMRE() {
return WPRRMRE;
}

public byte getWPRRMRH() {
return WPRRMRH;
}

public byte getWPRRMST() {
return WPRRMST;
}

public byte getWPRRMYO() {
return WPRRMYO;
}

public byte getWPRROH() {
return WPRROH;
}

public byte getWPRRRE() {
return WPRRRE;
}

public byte getWPRRRH() {
return WPRRRH;
}

public byte getWPRRST() {
return WPRRST;
}

public byte getWPRRYO() {
return WPRRYO;
}

public boolean getWPRSCM95() {
return WPRSCM95;
}

public byte getWPSJOBM() {
return WPSJOBM;
}

public short getWPSJOBY() {
return WPSJOBY;
}

public byte getWPSN() {
return WPSN;
}

public byte getWPSPAM() {
return WPSPAM;
}

public byte getWPSPAW() {
return WPSPAW;
}

public byte getWPSPD() {
return WPSPD;
}

public byte getWPSPD1A() {
return WPSPD1A;
}

public byte getWPSPD1B() {
return WPSPD1B;
}

public byte getWPSPD2() {
return WPSPD2;
}

public byte getWPSPD3() {
return WPSPD3;
}

public byte getWPSPD3A() {
return WPSPD3A;
}

public byte getWPSPD3M() {
return WPSPD3M;
}

public short getWPSPD3Y() {
return WPSPD3Y;
}

public byte getWPSPD4() {
return WPSPD4;
}

public byte getWPSPD5M() {
return WPSPD5M;
}

public byte getWPSPD5Y() {
return WPSPD5Y;
}

public byte getWPSPD6() {
return WPSPD6;
}

public int getWPSPOU() {
return WPSPOU;
}

public byte getWPSPOUP() {
return WPSPOUP;
}

public byte getWPSPY() {
return WPSPY;
}

public byte getWPSRUL() {
return WPSRUL;
}

public byte getWPSRUL2() {
return WPSRUL2;
}

public byte getWPSRUL3() {
return WPSRUL3;
}

public boolean getWPSRUL4() {
return WPSRUL4;
}

public boolean getWPSRUL5() {
return WPSRUL5;
}

public boolean getWPSRUL6() {
return WPSRUL6;
}

public boolean getWPSRUL7() {
return WPSRUL7;
}

public byte getWPTAKP() {
return WPTAKP;
}

public byte getWPTAKP2() {
return WPTAKP2;
}

public byte getWPTAKP3() {
return WPTAKP3;
}

public byte getWPTAKP4() {
return WPTAKP4;
}

public byte getWPTAKP5() {
return WPTAKP5;
}

public boolean getWPTAKP6() {
return WPTAKP6;
}

public boolean getWPTAKP7() {
return WPTAKP7;
}

public byte getWPTAX2() {
return WPTAX2;
}

public byte getWPTAX3() {
return WPTAX3;
}

public byte getWPTAX4() {
return WPTAX4;
}

public byte getWPTAX5() {
return WPTAX5;
}

public byte getWPTAX6() {
return WPTAX6;
}

public byte getWPTAX7() {
return WPTAX7;
}

public byte getWPTHPFE() {
return WPTHPFE;
}

public short getWPTHPFL() {
return WPTHPFL;
}

public byte getWPTHPFR() {
return WPTHPFR;
}

public short getWPTHPFU() {
return WPTHPFU;
}

public byte getWPTHPME() {
return WPTHPME;
}

public short getWPTHPML() {
return WPTHPML;
}

public byte getWPTHPMR() {
return WPTHPMR;
}

public short getWPTHPMU() {
return WPTHPMU;
}

public byte getWPTHPOE() {
return WPTHPOE;
}

public short getWPTHPOL() {
return WPTHPOL;
}

public byte getWPTHPOR() {
return WPTHPOR;
}

public short getWPTHPOU() {
return WPTHPOU;
}

public byte getWPTHPWE() {
return WPTHPWE;
}

public short getWPTHPWL() {
return WPTHPWL;
}

public byte getWPTHPWR() {
return WPTHPWR;
}

public short getWPTHPWU() {
return WPTHPWU;
}

public byte getWPTHPYE() {
return WPTHPYE;
}

public int getWPTHPYL() {
return WPTHPYL;
}

public byte getWPTHPYR() {
return WPTHPYR;
}

public int getWPTHPYU() {
return WPTHPYU;
}

public byte getWPUPAFE() {
return WPUPAFE;
}

public short getWPUPAFL() {
return WPUPAFL;
}

public byte getWPUPAFR() {
return WPUPAFR;
}

public short getWPUPAFU() {
return WPUPAFU;
}

public byte getWPUPAME() {
return WPUPAME;
}

public short getWPUPAML() {
return WPUPAML;
}

public byte getWPUPAMR() {
return WPUPAMR;
}

public short getWPUPAMU() {
return WPUPAMU;
}

public int getWPUPAOE() {
return WPUPAOE;
}

public short getWPUPAOL() {
return WPUPAOL;
}

public byte getWPUPAOR() {
return WPUPAOR;
}

public short getWPUPAOU() {
return WPUPAOU;
}

public byte getWPUPAWE() {
return WPUPAWE;
}

public short getWPUPAWL() {
return WPUPAWL;
}

public byte getWPUPAWR() {
return WPUPAWR;
}

public short getWPUPAWU() {
return WPUPAWU;
}

public byte getWPUPAYE() {
return WPUPAYE;
}

public byte getWPUPAYL() {
return WPUPAYL;
}

public byte getWPUPAYR() {
return WPUPAYR;
}

public short getWPUPAYU() {
return WPUPAYU;
}

public byte getWPVBUSE() {
return WPVBUSE;
}

public int getWPVBUSL() {
return WPVBUSL;
}

public byte getWPVBUSR() {
return WPVBUSR;
}

public int getWPVBUSU() {
return WPVBUSU;
}

public byte getWPWLYYE() {
return WPWLYYE;
}

public int getWPWLYYL() {
return WPWLYYL;
}

public byte getWPWLYYR() {
return WPWLYYR;
}

public int getWPWLYYU() {
return WPWLYYU;
}

public byte getWPWYJ95() {
return WPWYJ95;
}

public byte getWPWYJBU() {
return WPWYJBU;
}

public byte getWPWYJCA() {
return WPWYJCA;
}

public byte getWPWYJCO() {
return WPWYJCO;
}

public byte getWPWYJFB() {
return WPWYJFB;
}

public byte getWPWYJFI() {
return WPWYJFI;
}

public byte getWPWYJHO() {
return WPWYJHO;
}

public byte getWPWYJM85() {
return WPWYJM85;
}

public byte getWPWYJM86() {
return WPWYJM86;
}

public byte getWPWYJMBC() {
return WPWYJMBC;
}

public byte getWPWYJMBU() {
return WPWYJMBU;
}

public byte getWPWYJMCA() {
return WPWYJMCA;
}

public byte getWPWYJMCH() {
return WPWYJMCH;
}

public byte getWPWYJMCO() {
return WPWYJMCO;
}

public byte getWPWYJMFB() {
return WPWYJMFB;
}

public byte getWPWYJMFI() {
return WPWYJMFI;
}

public byte getWPWYJMHF() {
return WPWYJMHF;
}

public byte getWPWYJMHH() {
return WPWYJMHH;
}

public byte getWPWYJMHO() {
return WPWYJMHO;
}

public byte getWPWYJMLO() {
return WPWYJMLO;
}

public byte getWPWYJMMO() {
return WPWYJMMO;
}

public byte getWPWYJMON() {
return WPWYJMON;
}

public byte getWPWYJMPA() {
return WPWYJMPA;
}

public byte getWPWYJMPH() {
return WPWYJMPH;
}

public byte getWPWYJMTI() {
return WPWYJMTI;
}

public byte getWPWYJMTO() {
return WPWYJMTO;
}

public byte getWPWYJON() {
return WPWYJON;
}

public byte getWPWYJPA() {
return WPWYJPA;
}

public byte getWPWYJREA() {
return WPWYJREA;
}

public byte getWPWYJTI() {
return WPWYJTI;
}

public byte getWPWYN95() {
return WPWYN95;
}

public byte getWPWYNCA() {
return WPWYNCA;
}

public byte getWPWYNCH() {
return WPWYNCH;
}

public byte getWPWYNEA() {
return WPWYNEA;
}

public byte getWPWYNEM() {
return WPWYNEM;
}

public byte getWPWYNFA() {
return WPWYNFA;
}

public byte getWPWYNMO() {
return WPWYNMO;
}

public byte getWPWYNOH() {
return WPWYNOH;
}

public byte getWPWYNOU() {
return WPWYNOU;
}

public byte getWPWYNRE() {
return WPWYNRE;
}

public byte getWPWYNRH() {
return WPWYNRH;
}

public byte getWPWYNTI() {
return WPWYNTI;
}

public byte getWPWYNVR() {
return WPWYNVR;
}

public byte getWPWYW95() {
return WPWYW95;
}

public byte getWPWYWEN() {
return WPWYWEN;
}

public byte getWPWYWM85() {
return WPWYWM85;
}

public byte getWPWYWM86() {
return WPWYWM86;
}

public byte getWPWYWMCH() {
return WPWYWMCH;
}

public byte getWPWYWMEN() {
return WPWYWMEN;
}

public byte getWPWYWMFI() {
return WPWYWMFI;
}

public byte getWPWYWMHE() {
return WPWYWMHE;
}

public byte getWPWYWMHH() {
return WPWYWMHH;
}

public byte getWPWYWMMO() {
return WPWYWMMO;
}

public byte getWPWYWMO() {
return WPWYWMO;
}

public byte getWPWYWMOH() {
return WPWYWMOH;
}

public byte getWPWYWMRH() {
return WPWYWMRH;
}

public byte getWPWYWMSU() {
return WPWYWMSU;
}

public byte getWPWYWOH() {
return WPWYWOH;
}

public byte getWPWYWRH() {
return WPWYWRH;
}

public byte getWPWYWSU() {
return WPWYWSU;
}

public byte getWPYAER2() {
return WPYAER2;
}

public byte getWPYAER3() {
return WPYAER3;
}

public byte getWPYAER4() {
return WPYAER4;
}

public byte getWPYAER5() {
return WPYAER5;
}

public byte getWPYAER6() {
return WPYAER6;
}

public boolean getWPYAER7() {
return WPYAER7;
}

public byte getWPYBS2() {
return WPYBS2;
}

public byte getWPYBS3() {
return WPYBS3;
}

public byte getWPYBS4() {
return WPYBS4;
}

public byte getWPYBS5() {
return WPYBS5;
}

public byte getWPYBS6() {
return WPYBS6;
}

public boolean getWPYBS7() {
return WPYBS7;
}

public int getWPYCA2() {
return WPYCA2;
}

public short getWPYCA3() {
return WPYCA3;
}

public short getWPYCA4() {
return WPYCA4;
}

public short getWPYCA5() {
return WPYCA5;
}

public short getWPYCA6() {
return WPYCA6;
}

public short getWPYCA7() {
return WPYCA7;
}

public byte getWPYCAT2() {
return WPYCAT2;
}

public byte getWPYCAT3() {
return WPYCAT3;
}

public byte getWPYCAT4() {
return WPYCAT4;
}

public byte getWPYCAT5() {
return WPYCAT5;
}

public byte getWPYCAT6() {
return WPYCAT6;
}

public boolean getWPYCAT7() {
return WPYCAT7;
}

public byte getWPYFRA() {
return WPYFRA;
}

public byte getWPYFRA2() {
return WPYFRA2;
}

public boolean getWPYFRA3() {
return WPYFRA3;
}

public byte getWPYFRA4() {
return WPYFRA4;
}

public boolean getWPYFRA5() {
return WPYFRA5;
}

public boolean getWPYFRA6() {
return WPYFRA6;
}

public boolean getWPYFRA7() {
return WPYFRA7;
}

public byte getWPYJM11() {
return WPYJM11;
}

public byte getWPYST95() {
return WPYST95;
}

public byte getWPYSTAF() {
return WPYSTAF;
}

public byte getWPYSTCH() {
return WPYSTCH;
}

public byte getWPYSTEN() {
return WPYSTEN;
}

public byte getWPYSTFA() {
return WPYSTFA;
}

public byte getWPYSTFI() {
return WPYSTFI;
}

public byte getWPYSTM85() {
return WPYSTM85;
}

public byte getWPYSTM86() {
return WPYSTM86;
}

public byte getWPYSTMAF() {
return WPYSTMAF;
}

public byte getWPYSTMAG() {
return WPYSTMAG;
}

public byte getWPYSTMCH() {
return WPYSTMCH;
}

public byte getWPYSTMCO() {
return WPYSTMCO;
}

public byte getWPYSTMEN() {
return WPYSTMEN;
}

public byte getWPYSTMFA() {
return WPYSTMFA;
}

public byte getWPYSTMFI() {
return WPYSTMFI;
}

public byte getWPYSTMMO() {
return WPYSTMMO;
}

public byte getWPYSTMO() {
return WPYSTMO;
}

public byte getWPYSTMOH() {
return WPYSTMOH;
}

public byte getWPYSTMOU() {
return WPYSTMOU;
}

public byte getWPYSTMPA() {
return WPYSTMPA;
}

public byte getWPYSTMRE() {
return WPYSTMRE;
}

public byte getWPYSTMRH() {
return WPYSTMRH;
}

public byte getWPYSTMST() {
return WPYSTMST;
}

public byte getWPYSTMTI() {
return WPYSTMTI;
}

public byte getWPYSTMVR() {
return WPYSTMVR;
}

public byte getWPYSTMYO() {
return WPYSTMYO;
}

public byte getWPYSTOH() {
return WPYSTOH;
}

public byte getWPYSTOU() {
return WPYSTOU;
}

public byte getWPYSTPA() {
return WPYSTPA;
}

public byte getWPYSTPM() {
return WPYSTPM;
}

public byte getWPYSTRE() {
return WPYSTRE;
}

public byte getWPYSTRH() {
return WPYSTRH;
}

public byte getWPYSTTI() {
return WPYSTTI;
}

public byte getWPYSTVR() {
return WPYSTVR;
}

public byte getWPYSTYO() {
return WPYSTYO;
}

public byte getWSTOKB() {
return WSTOKB;
}

public double getWSTVAL() {
return WSTVAL;
}

public byte getWTC_P_F() {
return WTC_P_F;
}

public double getWTC_P_I() {
return WTC_P_I;
}

public short getWTC_P_O() {
return WTC_P_O;
}

public short getWTC_P_T() {
return WTC_P_T;
}

public byte getWTC_R_F() {
return WTC_R_F;
}

public double getWTC_R_I() {
return WTC_R_I;
}

public short getWTC_R_O() {
return WTC_R_O;
}

public short getWTC_R_T() {
return WTC_R_T;
}

public byte getWTOK() {
return WTOK;
}

public double getWTVAL() {
return WTVAL;
}

public byte getYNOLF() {
return YNOLF;
}

public byte getYNOWH() {
return YNOWH;
}

public ELSA_Wave4_Record(String line) {
s = line.split("\t");
initIDAUNIQ(s[0]);
initIDAHH(s[1]);
initPERID(s[2]);
initSAMPTYP(s[3]);
initFINSTAT4(s[4]);
initOUTIND(s[5]);
initOUTHH(s[6]);
initCOUPLE(s[7]);
initCPID(s[8]);
initCHINHH(s[9]);
initCHOUTHH(s[10]);
initGCINHH(s[11]);
initMAINHH(s[12]);
initPAINHH(s[13]);
initHHTOT(s[14]);
initWHOSO1(s[15]);
initWHOSO2(s[16]);
initWHOSO3(s[17]);
initWHOSO4(s[18]);
initWHOSO5(s[19]);
initCONCUR(s[20]);
initORDCON(s[21]);
initDHSAMEH(s[22]);
initDHSEX(s[23]);
initDHDOBC(s[24]);
initDHWORK(s[25]);
initDHR(s[26]);
initDHR2(s[27]);
initDHR3(s[28]);
initDHR4(s[29]);
initDHR5(s[30]);
initDHR6(s[31]);
initDHR7(s[32]);
initDHR8(s[33]);
initDHR9(s[34]);
initDHR10(s[35]);
initDHR11(s[36]);
initDHR12(s[37]);
initDHR13(s[38]);
initDHR14(s[39]);
initDHR15(s[40]);
initDHR16(s[41]);
initHHRESP(s[42]);
initDHPA(s[43]);
initDHPB(s[44]);
initDHC(s[45]);
initDHCS(s[46]);
initDHCAG(s[47]);
initDHCR01(s[48]);
initDHCR02(s[49]);
initDHCR03(s[50]);
initDHCR04(s[51]);
initDHCR05(s[52]);
initDHCR06(s[53]);
initDHCR07(s[54]);
initDHCR08(s[55]);
initDHCR09(s[56]);
initDHCR10(s[57]);
initDHCR11(s[58]);
initDHCR12(s[59]);
initDHCR13(s[60]);
initDHCR14(s[61]);
initDHCR15(s[62]);
initDHCR16(s[63]);
initDHPA2(s[64]);
initDHPB2(s[65]);
initDHC2(s[66]);
initDHCS2(s[67]);
initDHDOBC2(s[68]);
initDHCAG2(s[69]);
initDHCR17(s[70]);
initDHCR18(s[71]);
initDHCR19(s[72]);
initDHCR20(s[73]);
initDHCR21(s[74]);
initDHCR22(s[75]);
initDHCR23(s[76]);
initDHCR24(s[77]);
initDHCR25(s[78]);
initDHCR26(s[79]);
initDHCR27(s[80]);
initDHCR28(s[81]);
initDHCR29(s[82]);
initDHCR30(s[83]);
initDHCR31(s[84]);
initDHCR32(s[85]);
initDHPA3(s[86]);
initDHPB3(s[87]);
initDHC3(s[88]);
initDHCS3(s[89]);
initDHDOBC3(s[90]);
initDHCAG3(s[91]);
initDHCR33(s[92]);
initDHCR34(s[93]);
initDHCR35(s[94]);
initDHCR36(s[95]);
initDHCR37(s[96]);
initDHCR38(s[97]);
initDHCR39(s[98]);
initDHCR40(s[99]);
initDHCR41(s[100]);
initDHCR42(s[101]);
initDHCR43(s[102]);
initDHCR44(s[103]);
initDHCR45(s[104]);
initDHCR46(s[105]);
initDHCR47(s[106]);
initDHCR48(s[107]);
initDHPA4(s[108]);
initDHPB4(s[109]);
initDHC4(s[110]);
initDHCS4(s[111]);
initDHDOBC4(s[112]);
initDHCAG4(s[113]);
initDHCR49(s[114]);
initDHCR50(s[115]);
initDHCR51(s[116]);
initDHCR52(s[117]);
initDHCR53(s[118]);
initDHCR54(s[119]);
initDHCR55(s[120]);
initDHCR56(s[121]);
initDHCR57(s[122]);
initDHCR58(s[123]);
initDHCR59(s[124]);
initDHCR60(s[125]);
initDHCR61(s[126]);
initDHCR62(s[127]);
initDHCR63(s[128]);
initDHCR64(s[129]);
initDHPA5(s[130]);
initDHPB5(s[131]);
initDHC5(s[132]);
initDHCS5(s[133]);
initDHDOBC5(s[134]);
initDHCAG5(s[135]);
initDHCR65(s[136]);
initDHCR66(s[137]);
initDHCR67(s[138]);
initDHCR68(s[139]);
initDHCR69(s[140]);
initDHCR70(s[141]);
initDHCR71(s[142]);
initDHCR72(s[143]);
initDHCR73(s[144]);
initDHCR74(s[145]);
initDHCR75(s[146]);
initDHCR76(s[147]);
initDHCR77(s[148]);
initDHCR78(s[149]);
initDHCR79(s[150]);
initDHCR80(s[151]);
initDHPA6(s[152]);
initDHPB6(s[153]);
initDHC6(s[154]);
initDHCS6(s[155]);
initDHDOBC6(s[156]);
initDHCAG6(s[157]);
initDHCR81(s[158]);
initDHCR82(s[159]);
initDHCR83(s[160]);
initDHCR84(s[161]);
initDHCR85(s[162]);
initDHCR86(s[163]);
initDHCR87(s[164]);
initDHCR88(s[165]);
initDHCR89(s[166]);
initDHCR90(s[167]);
initDHCR91(s[168]);
initDHCR92(s[169]);
initDHCR93(s[170]);
initDHCR94(s[171]);
initDHCR95(s[172]);
initDHCR96(s[173]);
initDHPA7(s[174]);
initDHPB7(s[175]);
initDHC7(s[176]);
initDHCS7(s[177]);
initDHDOBC7(s[178]);
initDHCAG7(s[179]);
initDHCR97(s[180]);
initDHCR98(s[181]);
initDHCR99(s[182]);
initDHCR100(s[183]);
initDHCR101(s[184]);
initDHCR102(s[185]);
initDHCR103(s[186]);
initDHCR104(s[187]);
initDHCR105(s[188]);
initDHCR106(s[189]);
initDHCR107(s[190]);
initDHCR108(s[191]);
initDHCR109(s[192]);
initDHCR110(s[193]);
initDHCR111(s[194]);
initDHCR112(s[195]);
initDHPA8(s[196]);
initDHPB8(s[197]);
initDHC8(s[198]);
initDHCS8(s[199]);
initDHDOBC8(s[200]);
initDHCAG8(s[201]);
initDHCR113(s[202]);
initDHCR114(s[203]);
initDHCR115(s[204]);
initDHCR116(s[205]);
initDHCR117(s[206]);
initDHCR118(s[207]);
initDHCR119(s[208]);
initDHCR120(s[209]);
initDHCR121(s[210]);
initDHCR122(s[211]);
initDHCR123(s[212]);
initDHCR124(s[213]);
initDHCR125(s[214]);
initDHCR126(s[215]);
initDHCR127(s[216]);
initDHCR128(s[217]);
initDHPA9(s[218]);
initDHPB9(s[219]);
initDHC9(s[220]);
initDHCS9(s[221]);
initDHDOBC9(s[222]);
initDHCAG9(s[223]);
initDHCR129(s[224]);
initDHCR130(s[225]);
initDHCR131(s[226]);
initDHCR132(s[227]);
initDHCR133(s[228]);
initDHCR134(s[229]);
initDHCR135(s[230]);
initDHCR136(s[231]);
initDHCR137(s[232]);
initDHCR138(s[233]);
initDHCR139(s[234]);
initDHCR140(s[235]);
initDHCR141(s[236]);
initDHCR142(s[237]);
initDHCR143(s[238]);
initDHCR144(s[239]);
initDHPA10(s[240]);
initDHPB10(s[241]);
initDHC10(s[242]);
initDHCS10(s[243]);
initDHDOBC10(s[244]);
initDHCAG10(s[245]);
initDHCR145(s[246]);
initDHCR146(s[247]);
initDHCR147(s[248]);
initDHCR148(s[249]);
initDHCR149(s[250]);
initDHCR150(s[251]);
initDHCR151(s[252]);
initDHCR152(s[253]);
initDHCR153(s[254]);
initDHCR154(s[255]);
initDHCR155(s[256]);
initDHCR156(s[257]);
initDHCR157(s[258]);
initDHCR158(s[259]);
initDHCR159(s[260]);
initDHCR160(s[261]);
initDHPA11(s[262]);
initDHPB11(s[263]);
initDHC11(s[264]);
initDHCS11(s[265]);
initDHDOBC11(s[266]);
initDHCAG11(s[267]);
initDHCR161(s[268]);
initDHCR162(s[269]);
initDHCR163(s[270]);
initDHCR164(s[271]);
initDHCR165(s[272]);
initDHCR166(s[273]);
initDHCR167(s[274]);
initDHCR168(s[275]);
initDHCR169(s[276]);
initDHCR170(s[277]);
initDHCR171(s[278]);
initDHCR172(s[279]);
initDHCR173(s[280]);
initDHCR174(s[281]);
initDHCR175(s[282]);
initDHCR176(s[283]);
initDHPA12(s[284]);
initDHPB12(s[285]);
initDHC12(s[286]);
initDHCS12(s[287]);
initDHDOBC12(s[288]);
initDHCAG12(s[289]);
initDHCR177(s[290]);
initDHCR178(s[291]);
initDHCR179(s[292]);
initDHCR180(s[293]);
initDHCR181(s[294]);
initDHCR182(s[295]);
initDHCR183(s[296]);
initDHCR184(s[297]);
initDHCR185(s[298]);
initDHCR186(s[299]);
initDHCR187(s[300]);
initDHCR188(s[301]);
initDHCR189(s[302]);
initDHCR190(s[303]);
initDHCR191(s[304]);
initDHCR192(s[305]);
initDHPA13(s[306]);
initDHPB13(s[307]);
initDHC13(s[308]);
initDHCS13(s[309]);
initDHDOBC13(s[310]);
initDHCAG13(s[311]);
initDHCR193(s[312]);
initDHCR194(s[313]);
initDHCR195(s[314]);
initDHCR196(s[315]);
initDHCR197(s[316]);
initDHCR198(s[317]);
initDHCR199(s[318]);
initDHCR200(s[319]);
initDHCR201(s[320]);
initDHCR202(s[321]);
initDHCR203(s[322]);
initDHCR204(s[323]);
initDHCR205(s[324]);
initDHCR206(s[325]);
initDHCR207(s[326]);
initDHCR208(s[327]);
initDHPA14(s[328]);
initDHPB14(s[329]);
initDHC14(s[330]);
initDHCS14(s[331]);
initDHDOBC14(s[332]);
initDHCAG14(s[333]);
initDHCR209(s[334]);
initDHCR210(s[335]);
initDHCR211(s[336]);
initDHCR212(s[337]);
initDHCR213(s[338]);
initDHCR214(s[339]);
initDHCR215(s[340]);
initDHCR216(s[341]);
initDHCR217(s[342]);
initDHCR218(s[343]);
initDHCR219(s[344]);
initDHCR220(s[345]);
initDHCR221(s[346]);
initDHCR222(s[347]);
initDHCR223(s[348]);
initDHCR224(s[349]);
initDHPA15(s[350]);
initDHPB15(s[351]);
initDHC15(s[352]);
initDHCS15(s[353]);
initDHDOBC15(s[354]);
initDHCAG15(s[355]);
initDHCR225(s[356]);
initDHCR226(s[357]);
initDHCR227(s[358]);
initDHCR228(s[359]);
initDHCR229(s[360]);
initDHCR230(s[361]);
initDHCR231(s[362]);
initDHCR232(s[363]);
initDHCR233(s[364]);
initDHCR234(s[365]);
initDHCR235(s[366]);
initDHCR236(s[367]);
initDHCR237(s[368]);
initDHCR238(s[369]);
initDHCR239(s[370]);
initDHCR240(s[371]);
initDHPA16(s[372]);
initDHPB16(s[373]);
initDHC16(s[374]);
initDHCS16(s[375]);
initDHDOBC16(s[376]);
initDHCAG16(s[377]);
initDHCR241(s[378]);
initDHCR242(s[379]);
initDHCR243(s[380]);
initDHCR244(s[381]);
initDHCR245(s[382]);
initDHCR246(s[383]);
initDHCR247(s[384]);
initDHCR248(s[385]);
initDHCR249(s[386]);
initDHCR250(s[387]);
initDHCR251(s[388]);
initDHCR252(s[389]);
initDHCR253(s[390]);
initDHCR254(s[391]);
initDHCR255(s[392]);
initDHCR256(s[393]);
initDIDOB(s[394]);
initDIDBNY(s[395]);
initDIAGR(s[396]);
initDIINT(s[397]);
initDIPRE(s[398]);
initDISEXC(s[399]);
initDISEX(s[400]);
initDIMAR(s[401]);
initDIGRAN(s[402]);
initDIGNMYC(s[403]);
initDIGNMY(s[404]);
initDISIBC(s[405]);
initDISIB(s[406]);
initDINMA(s[407]);
initDIANM(s[408]);
initDIMAD(s[409]);
initDICDNM(s[410]);
initDINFA(s[411]);
initDIANF(s[412]);
initDIFAD(s[413]);
initDICDNF(s[414]);
initDIKLIV(s[415]);
initDIKLIVC(s[416]);
initDIFJOB(s[417]);
initHEHELF(s[418]);
initHEILL(s[419]);
initHELIM(s[420]);
initHELWK(s[421]);
initHETEMP(s[422]);
initHEFUNC(s[423]);
initHEATT1(s[424]);
initHEATT2(s[425]);
initHEATT3(s[426]);
initHEATT5(s[427]);
initHEATT6(s[428]);
initHEATT7(s[429]);
initHEATT8(s[430]);
initHEATT9(s[431]);
initHEATT13(s[432]);
initHEATT14(s[433]);
initHEATT15(s[434]);
initHEATT16(s[435]);
initHEATT95(s[436]);
initHEATTM1(s[437]);
initHEATTM2(s[438]);
initHEATTM3(s[439]);
initHEATTM5(s[440]);
initHEATTM6(s[441]);
initHEATTM7(s[442]);
initHEATTM8(s[443]);
initHEATTM9(s[444]);
initHEATTM13(s[445]);
initHEATTM14(s[446]);
initHEATTM15(s[447]);
initHEATTM16(s[448]);
initHEATTM51(s[449]);
initHEATTM52(s[450]);
initHEATTM85(s[451]);
initHEATTM86(s[452]);
initHEATA(s[453]);
initHEEYE(s[454]);
initHEFRND(s[455]);
initHEPAP(s[456]);
initHEOPCGL(s[457]);
initHEOPCDI(s[458]);
initHEOPCMD(s[459]);
initHEOPCCA(s[460]);
initHEOPFGL(s[461]);
initHEOPFDI(s[462]);
initHEOPFMD(s[463]);
initHEOPFCA(s[464]);
initHEOPNGL(s[465]);
initHEOPNDI(s[466]);
initHEOPNMD(s[467]);
initHEOPNCA(s[468]);
initHEOPSGL(s[469]);
initHEOPSDI(s[470]);
initHEOPSMD(s[471]);
initHEOPSCA(s[472]);
initHEOPTGL(s[473]);
initHEOPTDI(s[474]);
initHEOPTMD(s[475]);
initHEOPTCA(s[476]);
initHEOPT96(s[477]);
initHECAT(s[478]);
initHECATN(s[479]);
initHEHEAR(s[480]);
initHEHRA(s[481]);
initHESLPA(s[482]);
initHESLPB(s[483]);
initHESLPD(s[484]);
initHESLPE(s[485]);
initHESLPF(s[486]);
initHEBPCHK(s[487]);
initHEDAWBP(s[488]);
initHEDACBP(s[489]);
initHEDANBP(s[490]);
initHEDASBP(s[491]);
initHEDAWAN(s[492]);
initHEDACAN(s[493]);
initHEDANAN(s[494]);
initHEDASAN(s[495]);
initHEDAWMI(s[496]);
initHEDACMI(s[497]);
initHEDANMI(s[498]);
initHEDAWHF(s[499]);
initHEDACHF(s[500]);
initHEDANHF(s[501]);
initHEDASHF(s[502]);
initHEDAWHM(s[503]);
initHEDACHM(s[504]);
initHEDANHM(s[505]);
initHEDASHM(s[506]);
initHEDAWAR(s[507]);
initHEDACAR(s[508]);
initHEDANAR(s[509]);
initHEDASAR(s[510]);
initHEDAWDI(s[511]);
initHEDACDI(s[512]);
initHEDANDI(s[513]);
initHEDAWST(s[514]);
initHEDACST(s[515]);
initHEDANST(s[516]);
initHEDAWCH(s[517]);
initHEDACCH(s[518]);
initHEDANCH(s[519]);
initHEDASCH(s[520]);
initHEDAWOT(s[521]);
initHEDACOT(s[522]);
initHEDANOT(s[523]);
initHEDASOT(s[524]);
initHEDIABP(s[525]);
initHEDIAAN(s[526]);
initHEDIAMI(s[527]);
initHEDIAHF(s[528]);
initHEDIAHM(s[529]);
initHEDIAAR(s[530]);
initHEDIADI(s[531]);
initHEDIAST(s[532]);
initHEDIACH(s[533]);
initHEDIA95(s[534]);
initHEDIA96(s[535]);
initHEDIMBP(s[536]);
initHEDIMAN(s[537]);
initHEDIMMI(s[538]);
initHEDIMHF(s[539]);
initHEDIMHM(s[540]);
initHEDIMAR(s[541]);
initHEDIMDI(s[542]);
initHEDIMST(s[543]);
initHEDIMCH(s[544]);
initHEDIZM51(s[545]);
initHEDIZM52(s[546]);
initHEDIM85(s[547]);
initHEDIM86(s[548]);
initHEDIM96(s[549]);
initHEHBP(s[550]);
initHEHBPA(s[551]);
initHEHBPB(s[552]);
initHEMDA(s[553]);
initHEMDAB(s[554]);
initHEAGA(s[555]);
initHEAGAR(s[556]);
initHEAGARY(s[557]);
initHEYRA(s[558]);
initHEAGB(s[559]);
initHEAGBR(s[560]);
initHEAGBRY(s[561]);
initHENMMI(s[562]);
initHEAGC(s[563]);
initHEAGCR(s[564]);
initHEAGCRY(s[565]);
initHEAGD(s[566]);
initHEAGDR(s[567]);
initHEAGDRY(s[568]);
initHEACD(s[569]);
initHEINS(s[570]);
initHEMDB(s[571]);
initHEACE(s[572]);
initHEACEA(s[573]);
initHEWEE(s[574]);
initHEWEEA(s[575]);
initHEKIDN(s[576]);
initHESUG(s[577]);
initHESUGA(s[578]);
initHEFTCHK(s[579]);
initHESLFCR(s[580]);
initHESLFCM(s[581]);
initHESLFCY(s[582]);
initHESLFCB(s[583]);
initHEAGE(s[584]);
initHEAGER(s[585]);
initHEAGERY(s[586]);
initHENMST(s[587]);
initHEHBPB1(s[588]);
initHEMDA1(s[589]);
initHEPBS(s[590]);
initHEWKS(s[591]);
initHESPK(s[592]);
initHEVSI(s[593]);
initHETHK(s[594]);
initHEHRTMD(s[595]);
initHECHMD(s[596]);
initHECHME(s[597]);
initHEDBWLU(s[598]);
initHEDBDLU(s[599]);
initHEDBMLU(s[600]);
initHEDBSLU(s[601]);
initHEDBWAS(s[602]);
initHEDBDAS(s[603]);
initHEDBMAS(s[604]);
initHEDBSAS(s[605]);
initHEDBWAR(s[606]);
initHEDBDAR(s[607]);
initHEDBMAR(s[608]);
initHEDBSAR(s[609]);
initHEDBWOS(s[610]);
initHEDBDOS(s[611]);
initHEDBMOS(s[612]);
initHEDBSOS(s[613]);
initHEDBWCA(s[614]);
initHEDBDCA(s[615]);
initHEDBMCA(s[616]);
initHEDBSCA(s[617]);
initHEDBWPD(s[618]);
initHEDBDPD(s[619]);
initHEDBMPD(s[620]);
initHEDBSPD(s[621]);
initHEDBWPS(s[622]);
initHEDBDPS(s[623]);
initHEDBMPS(s[624]);
initHEDBWAD(s[625]);
initHEDBDAD(s[626]);
initHEDBMAD(s[627]);
initHEDBWDE(s[628]);
initHEDBDDE(s[629]);
initHEDBMDE(s[630]);
initHEDBSDE(s[631]);
initHEDIBLU(s[632]);
initHEDIBAS(s[633]);
initHEDIBAR(s[634]);
initHEDIBOS(s[635]);
initHEDIBCA(s[636]);
initHEDIBPD(s[637]);
initHEDIBPS(s[638]);
initHEDIBAD(s[639]);
initHEDIBDE(s[640]);
initHEDIBBL(s[641]);
initHEDIB96(s[642]);
initHELNG(s[643]);
initHELNGB(s[644]);
initHEAMA(s[645]);
initHEAMB(s[646]);
initHEARTOA(s[647]);
initHEARTRA(s[648]);
initHEARTOT(s[649]);
initHEAGF(s[650]);
initHEAGFR(s[651]);
initHEAGFRY(s[652]);
initHEARTA(s[653]);
initHEARTB(s[654]);
initHEARTC(s[655]);
initHEARTD(s[656]);
initHEARTE(s[657]);
initHELEUK(s[658]);
initHEAGG(s[659]);
initHEAGGR(s[660]);
initHEAGGRY(s[661]);
initHEAGK(s[662]);
initHEAGKR(s[663]);
initHEAGKRY(s[664]);
initHECANAA(s[665]);
initHECANB(s[666]);
initHECANBB(s[667]);
initHEPRK(s[668]);
initHEPRKR(s[669]);
initHEPRKRY(s[670]);
initHEAGH(s[671]);
initHEAGHR(s[672]);
initHEAGHRY(s[673]);
initHEPSYHA(s[674]);
initHEPSYAN(s[675]);
initHEPSYDE(s[676]);
initHEPSYEM(s[677]);
initHEPSYSC(s[678]);
initHEPSYPS(s[679]);
initHEPSYMO(s[680]);
initHEPSYMA(s[681]);
initHEPSY95(s[682]);
initHEYRC(s[683]);
initHEPSYA(s[684]);
initHEPSYB(s[685]);
initHEPSYE(s[686]);
initHEAGI(s[687]);
initHEAGIR(s[688]);
initHEAGIRY(s[689]);
initHEAGJ(s[690]);
initHEAGJR(s[691]);
initHEAGJRY(s[692]);
initHEFLA(s[693]);
initHEFLB(s[694]);
initHEFLC(s[695]);
initHEFLD(s[696]);
initHEFLE(s[697]);
initHEFLF(s[698]);
initHEFRAC(s[699]);
initHEJI(s[700]);
initHEJIAA1(s[701]);
initHEJIAA2(s[702]);
initHEJIAA3(s[703]);
initHEJIAA4(s[704]);
initHEJIAA5(s[705]);
initHEJIBRH(s[706]);
initHEJIBLH(s[707]);
initHEJIBRK(s[708]);
initHEJIBLK(s[709]);
initHEJION(s[710]);
initHEIQA(s[711]);
initHEIQB(s[712]);
initHEIQC(s[713]);
initHEIQD(s[714]);
initHEIQE(s[715]);
initHEIQF(s[716]);
initHEIQG(s[717]);
initHEIQH(s[718]);
initHEIQI(s[719]);
initHEIQJ(s[720]);
initHEIQK(s[721]);
initHEIQL(s[722]);
initHEIQM(s[723]);
initHEIQN(s[724]);
initHEIQO(s[725]);
initHEIQP(s[726]);
initHEIQQ(s[727]);
initHEPAIN(s[728]);
initHEPAA(s[729]);
initHEPAWBA(s[730]);
initHEPAWHI(s[731]);
initHEPAWKN(s[732]);
initHEPAWFE(s[733]);
initHEPAWMO(s[734]);
initHEPAWOT(s[735]);
initHEPAWAL(s[736]);
initHEPAB(s[737]);
initHEPAB1(s[738]);
initHEBCK(s[739]);
initHEHIP(s[740]);
initHEKNE(s[741]);
initHEFET(s[742]);
initHEKNEA(s[743]);
initHEKNEB(s[744]);
initHEKNEC(s[745]);
initHEKNED(s[746]);
initHEHIPA(s[747]);
initHEHIPB(s[748]);
initHEPMED(s[749]);
initHEKNEF(s[750]);
initHEHIPC(s[751]);
initHEPSUR(s[752]);
initHEPORTH(s[753]);
initHEPAG(s[754]);
initHEPAH(s[755]);
initHEPAI(s[756]);
initHEPAJ(s[757]);
initHEPAK3(s[758]);
initHEBAL(s[759]);
initHEDIZ(s[760]);
initHEANK(s[761]);
initHEANA(s[762]);
initHEANB(s[763]);
initHEANC(s[764]);
initHEAND(s[765]);
initHEAND1(s[766]);
initHEANE(s[767]);
initHEANF(s[768]);
initHEANG(s[769]);
initHEANH(s[770]);
initHEANIUS(s[771]);
initHEANILS(s[772]);
initHEANSLC(s[773]);
initHEANSLA(s[774]);
initHEANSRC(s[775]);
initHEANSRA(s[776]);
initHEANS95(s[777]);
initHEANMUS(s[778]);
initHEANMLS(s[779]);
initHEANMLC(s[780]);
initHEANMLA(s[781]);
initHEANMRC(s[782]);
initHEANMRA(s[783]);
initHEANM85(s[784]);
initHEANIM86(s[785]);
initHEROSMD(s[786]);
initHERPA(s[787]);
initHERPB(s[788]);
initHERPC(s[789]);
initHERPD(s[790]);
initHERPE(s[791]);
initHERPE1(s[792]);
initHERPF(s[793]);
initHERPG(s[794]);
initHERPH(s[795]);
initHERPI(s[796]);
initHERPJ(s[797]);
initHEMOBWA(s[798]);
initHEMOBSI(s[799]);
initHEMOBCH(s[800]);
initHEMOBCS(s[801]);
initHEMOBCL(s[802]);
initHEMOBST(s[803]);
initHEMOBRE(s[804]);
initHEMOBPU(s[805]);
initHEMOBLI(s[806]);
initHEMOBPI(s[807]);
initHEMOB96(s[808]);
initHEADLDR(s[809]);
initHEADLWA(s[810]);
initHEADLBA(s[811]);
initHEADLEA(s[812]);
initHEADLBE(s[813]);
initHEADLWC(s[814]);
initHEADLMA(s[815]);
initHEADLDA(s[816]);
initHEADLPR(s[817]);
initHEADLSH(s[818]);
initHEADLTE(s[819]);
initHEADLCO(s[820]);
initHEADLME(s[821]);
initHEADLHO(s[822]);
initHEADLMO(s[823]);
initHEADL96(s[824]);
initHEHPA(s[825]);
initHEHPHSP(s[826]);
initHEHPHSO(s[827]);
initHEHPHDA(s[828]);
initHEHPHSI(s[829]);
initHEHPHBR(s[830]);
initHEHPHOR(s[831]);
initHEHPHPP(s[832]);
initHEHPHLA(s[833]);
initHEHPHNU(s[834]);
initHEHPHST(s[835]);
initHEHPHFR(s[836]);
initHEHPHOT(s[837]);
initHEHPH96(s[838]);
initHEHPWSP(s[839]);
initHEHPWSO(s[840]);
initHEHPWDA(s[841]);
initHEHPWSI(s[842]);
initHEHPWBR(s[843]);
initHEHPWOR(s[844]);
initHEHPWPP(s[845]);
initHEHPWLA(s[846]);
initHEHPWNU(s[847]);
initHEHPWST(s[848]);
initHEHPWFR(s[849]);
initHEHPWOT(s[850]);
initHEHPW96(s[851]);
initHEHPDSP(s[852]);
initHEHPDSO(s[853]);
initHEHPDDA(s[854]);
initHEHPDSI(s[855]);
initHEHPDBR(s[856]);
initHEHPDOR(s[857]);
initHEHPDPP(s[858]);
initHEHPDLA(s[859]);
initHEHPDNU(s[860]);
initHEHPDST(s[861]);
initHEHPDFR(s[862]);
initHEHPDOT(s[863]);
initHEHPD96(s[864]);
initHEHPPSP(s[865]);
initHEHPPSO(s[866]);
initHEHPPDA(s[867]);
initHEHPPSI(s[868]);
initHEHPPBR(s[869]);
initHEHPPOR(s[870]);
initHEHPPPP(s[871]);
initHEHPPLA(s[872]);
initHEHPPNU(s[873]);
initHEHPPST(s[874]);
initHEHPPFR(s[875]);
initHEHPPOT(s[876]);
initHEHPP96(s[877]);
initHEHPTSP(s[878]);
initHEHPTSO(s[879]);
initHEHPTDA(s[880]);
initHEHPTSI(s[881]);
initHEHPTBR(s[882]);
initHEHPTOR(s[883]);
initHEHPTPP(s[884]);
initHEHPTLA(s[885]);
initHEHPTNU(s[886]);
initHEHPTST(s[887]);
initHEHPTFR(s[888]);
initHEHPTOT(s[889]);
initHEHPT96(s[890]);
initHEHPMSP(s[891]);
initHEHPMSO(s[892]);
initHEHPMDA(s[893]);
initHEHPMSI(s[894]);
initHEHPMBR(s[895]);
initHEHPMOR(s[896]);
initHEHPMPP(s[897]);
initHEHPMLA(s[898]);
initHEHPMNU(s[899]);
initHEHPMST(s[900]);
initHEHPMFR(s[901]);
initHEHPMOT(s[902]);
initHEHPM96(s[903]);
initHEHPBSP(s[904]);
initHEHPBPA(s[905]);
initHEHPBSO(s[906]);
initHEHPBSL(s[907]);
initHEHPBDA(s[908]);
initHEHPBDL(s[909]);
initHEHPBSI(s[910]);
initHEHPBBR(s[911]);
initHEHPBGS(s[912]);
initHEHPBGD(s[913]);
initHEHPBOR(s[914]);
initHEHPBOT(s[915]);
initHEHPB96(s[916]);
initHEHPSOT(s[917]);
initHEHPSCH(s[918]);
initHEHPSEX(s[919]);
initHEHPS95(s[920]);
initHEHPS96(s[921]);
initHEHSMOT(s[922]);
initHEHSMCH(s[923]);
initHEHSMEX(s[924]);
initHEHSMOS(s[925]);
initHEHSMCR(s[926]);
initHEHSMMA(s[927]);
initHEHSMAC(s[928]);
initHEHSMTH(s[929]);
initHEHSMHY(s[930]);
initHEHSM85(s[931]);
initHEHSM86(s[932]);
initHEHSM96(s[933]);
initHECLUB1(s[934]);
initHECLUB2(s[935]);
initHECLUB3(s[936]);
initHECLUB96(s[937]);
initHELC(s[938]);
initHEDCC(s[939]);
initHEMW(s[940]);
initHEHPC(s[941]);
initHEHPLA(s[942]);
initHEHPPD(s[943]);
initHEAIDCA(s[944]);
initHEAIDZI(s[945]);
initHEAIDMW(s[946]);
initHEAIDEW(s[947]);
initHEAIDBU(s[948]);
initHEAIDEA(s[949]);
initHEAIDAL(s[950]);
initHEAIDCR(s[951]);
initHEAID96(s[952]);
initHECANHS(s[953]);
initHECASS(s[954]);
initHECASE(s[955]);
initHECAOT(s[956]);
initHECAMNHS(s[957]);
initHECAMSS(s[958]);
initHECAMSE(s[959]);
initHECAMFA(s[960]);
initHECAMLL(s[961]);
initHECAMCH(s[962]);
initHECAMFR(s[963]);
initHECAM85(s[964]);
initHECAM86(s[965]);
initHECAM95(s[966]);
initHECACOV(s[967]);
initHEZINHS(s[968]);
initHEZISS(s[969]);
initHEZISE(s[970]);
initHEZIOT(s[971]);
initHEZIMNHS(s[972]);
initHEZIMSS(s[973]);
initHEZIMSE(s[974]);
initHEZIMFA(s[975]);
initHEZIMLL(s[976]);
initHEZIMCH(s[977]);
initHEZIMFR(s[978]);
initHEZIM85(s[979]);
initHEZIM86(s[980]);
initHEZIMOT(s[981]);
initHEZICOV(s[982]);
initHEMWNHS(s[983]);
initHEMWSS(s[984]);
initHEMWSE(s[985]);
initHEMWOT(s[986]);
initHEMWMNHS(s[987]);
initHEMWMSS(s[988]);
initHEMWMSE(s[989]);
initHEMWMFA(s[990]);
initHEMWMLL(s[991]);
initHEMWMCH(s[992]);
initHEMWMFR(s[993]);
initHEMWM85(s[994]);
initHEMWM86(s[995]);
initHEMWM95(s[996]);
initHEMWCOV(s[997]);
initHEEWNHS(s[998]);
initHEEWSS(s[999]);
initHEEWSE(s[1000]);
initHEEWOT(s[1001]);
initHEEWMNHS(s[1002]);
initHEEWMSS(s[1003]);
initHEEWMSE(s[1004]);
initHEEWMFA(s[1005]);
initHEEWMLL(s[1006]);
initHEEWMCH(s[1007]);
initHEEWMFR(s[1008]);
initHEEWM85(s[1009]);
initHEEWM86(s[1010]);
initHEEWM95(s[1011]);
initHEEWCOV(s[1012]);
initHEBUNHS(s[1013]);
initHEBUSS(s[1014]);
initHEBUSE(s[1015]);
initHEBUOT(s[1016]);
initHEBUMNHS(s[1017]);
initHEBUMSS(s[1018]);
initHEBUMSE(s[1019]);
initHEBUMFA(s[1020]);
initHEBUMLL(s[1021]);
initHEBUMCH(s[1022]);
initHEBUMFR(s[1023]);
initHEBUM85(s[1024]);
initHEBUM86(s[1025]);
initHEBUM95(s[1026]);
initHEBUCOV(s[1027]);
initHEEANHS(s[1028]);
initHEEASS(s[1029]);
initHEEASE(s[1030]);
initHEEAOT(s[1031]);
initHEEAMNHS(s[1032]);
initHEEAMSS(s[1033]);
initHEEAMSE(s[1034]);
initHEEAMFA(s[1035]);
initHEEAMLL(s[1036]);
initHEEAMCH(s[1037]);
initHEEAMFR(s[1038]);
initHEEAM85(s[1039]);
initHEEAM86(s[1040]);
initHEEAM95(s[1041]);
initHEEACOV(s[1042]);
initHEALNHS(s[1043]);
initHEALSS(s[1044]);
initHEALSE(s[1045]);
initHEALOT(s[1046]);
initHEALMNHS(s[1047]);
initHEALMSS(s[1048]);
initHEALMSE(s[1049]);
initHEALMFA(s[1050]);
initHEALMLL(s[1051]);
initHEALMCH(s[1052]);
initHEALMFR(s[1053]);
initHEALM85(s[1054]);
initHEALM86(s[1055]);
initHEALM95(s[1056]);
initHEALCOV(s[1057]);
initHECRNHS(s[1058]);
initHECRSS(s[1059]);
initHECRSE(s[1060]);
initHECROT(s[1061]);
initHECRMNHS(s[1062]);
initHECRMSS(s[1063]);
initHECRMSE(s[1064]);
initHECRMFA(s[1065]);
initHECRMLL(s[1066]);
initHECRMCH(s[1067]);
initHECRMFR(s[1068]);
initHECRM85(s[1069]);
initHECRM86(s[1070]);
initHECRM95(s[1071]);
initHECRCOV(s[1072]);
initHEINCT(s[1073]);
initHEINCTA(s[1074]);
initHESMK(s[1075]);
initHESKA(s[1076]);
initHESKD(s[1077]);
initHESKE(s[1078]);
initHESKF(s[1079]);
initHESTOP(s[1080]);
initHECIG(s[1081]);
initHESKB(s[1082]);
initHETBA(s[1083]);
initHETBB(s[1084]);
initHESKC(s[1085]);
initHETBC(s[1086]);
initHETBD(s[1087]);
initHEACTA(s[1088]);
initHEACTB(s[1089]);
initHEACTC(s[1090]);
initHEMEN(s[1091]);
initHEMEB(s[1092]);
initHEHYE(s[1093]);
initHEHYY(s[1094]);
initHEHYYA(s[1095]);
initHEOVE(s[1096]);
initHEOVY(s[1097]);
initHEOVYA(s[1098]);
initHEPEE(s[1099]);
initHEPEY(s[1100]);
initHEPEA(s[1101]);
initHEPER(s[1102]);
initHEHRT(s[1103]);
initHEHFY(s[1104]);
initHEHFM(s[1105]);
initHEHFA(s[1106]);
initHEHPS(s[1107]);
initHEHPY(s[1108]);
initHEHNO(s[1109]);
initHEHST(s[1110]);
initHEHSTA(s[1111]);
initSPCAR(s[1112]);
initSPCARA(s[1113]);
initSPCARB(s[1114]);
initSPTRAA(s[1115]);
initSPTRBUNA(s[1116]);
initSPTRBDES(s[1117]);
initSPTRBEXP(s[1118]);
initSPTRBUNR(s[1119]);
initSPTRBFRE(s[1120]);
initSPTRBHEA(s[1121]);
initSPTRBNEE(s[1122]);
initSPTRBFEA(s[1123]);
initSPTRBDIR(s[1124]);
initSPTRBCON(s[1125]);
initSPTRBWAL(s[1126]);
initSPTRB95(s[1127]);
initSPTRMUNA(s[1128]);
initSPTRMDES(s[1129]);
initSPTRMEXP(s[1130]);
initSPTRMUNR(s[1131]);
initSPTRMFRE(s[1132]);
initSPTRMHEA(s[1133]);
initSPTRMNEE(s[1134]);
initSPTRMFEA(s[1135]);
initSPTRMDIR(s[1136]);
initSPTRMCON(s[1137]);
initSPTRMWAL(s[1138]);
initSPTRM85(s[1139]);
initSPTRM86(s[1140]);
initSPTRAM95(s[1141]);
initSPTRFAM(s[1142]);
initSPTRTAX(s[1143]);
initSPTRCOM(s[1144]);
initSPTRHOS(s[1145]);
initSPTRCARE(s[1146]);
initSPTR96(s[1147]);
initSPLIFT(s[1148]);
initSPTAXI(s[1149]);
initSPDTDT(s[1150]);
initSPHOSP(s[1151]);
initWPACTPW(s[1152]);
initWPACTSE(s[1153]);
initWPACTVW(s[1154]);
initWPACTCA(s[1155]);
initWPACTLO(s[1156]);
initWPACTED(s[1157]);
initWPACT96(s[1158]);
initWPAWAY(s[1159]);
initWPACTW(s[1160]);
initWPTAW(s[1161]);
initWPDES(s[1162]);
initWPEDC(s[1163]);
initWPVW(s[1164]);
initWPES(s[1165]);
initWPJOB(s[1166]);
initWPJOBL(s[1167]);
initWPSTJ(s[1168]);
initWPEMP(s[1169]);
initWPEVER(s[1170]);
initWPLJOIL(s[1171]);
initWPLJOTI(s[1172]);
initWPLJODI(s[1173]);
initWPLJOCL(s[1174]);
initWPLJORE(s[1175]);
initWPLJOVO(s[1176]);
initWPLJOSP(s[1177]);
initWPLJOCA(s[1178]);
initWPLJOFE(s[1179]);
initWPLJOMO(s[1180]);
initWPLJO95(s[1181]);
initWPLJOMIL(s[1182]);
initWPLJOMTI(s[1183]);
initWPLJOMDI(s[1184]);
initWPLJOMCL(s[1185]);
initWPLJOMRE(s[1186]);
initWPLJOMVO(s[1187]);
initWPLJOMSP(s[1188]);
initWPLJOMCA(s[1189]);
initWPLJOMFE(s[1190]);
initWPLJOMMO(s[1191]);
initWPLJOMBE(s[1192]);
initWPLJOMCF(s[1193]);
initWPLJOMPR(s[1194]);
initWPLJOMER(s[1195]);
initWPLJOMSE(s[1196]);
initWPLJOMSA(s[1197]);
initWPLJOMME(s[1198]);
initWPLJOM85(s[1199]);
initWPLJOM86(s[1200]);
initWPLJOBM(s[1201]);
initWPCHPH(s[1202]);
initWPCHME(s[1203]);
initWPCHHR(s[1204]);
initWPCHFL(s[1205]);
initWPCHHO(s[1206]);
initWPCHAD(s[1207]);
initWPCH96(s[1208]);
initWPCHGNO(s[1209]);
initWPCHMPH(s[1210]);
initWPCHMME(s[1211]);
initWPCHMHR(s[1212]);
initWPCHMFL(s[1213]);
initWPCHMHO(s[1214]);
initWPCHMAD(s[1215]);
initWPCHMSA(s[1216]);
initWPCHMBO(s[1217]);
initWPCHM85(s[1218]);
initWPCHM86(s[1219]);
initWPCHM96(s[1220]);
initWPCHGO(s[1221]);
initWPCHGA(s[1222]);
initWPCHBPH(s[1223]);
initWPCHBME(s[1224]);
initWPCHBHR(s[1225]);
initWPCHBFL(s[1226]);
initWPCHBHO(s[1227]);
initWPCHBAD(s[1228]);
initWPCHB95(s[1229]);
initWPESP(s[1230]);
initWPASKD(s[1231]);
initWPASKE(s[1232]);
initWPASKF(s[1233]);
initWPSUP(s[1234]);
initWPEST(s[1235]);
initWPSAL(s[1236]);
initWPCJAG(s[1237]);
initWPCJDI(s[1238]);
initWPCJBU(s[1239]);
initWPCJPA(s[1240]);
initWPCJSE(s[1241]);
initWPCJSC(s[1242]);
initWPCJFR(s[1243]);
initWPCJ96(s[1244]);
initWPNEMP(s[1245]);
initWPEMPL(s[1246]);
initWPNOE(s[1247]);
initNSSEC(s[1248]);
initSIC2003(s[1249]);
initSIC2007(s[1250]);
initWPJACT(s[1251]);
initWPSJOBY(s[1252]);
initWPSJOBM(s[1253]);
initWPWYWMO(s[1254]);
initWPWYWOH(s[1255]);
initWPWYWRH(s[1256]);
initWPWYWEN(s[1257]);
initWPWYWSU(s[1258]);
initWPWYW95(s[1259]);
initWPWYWMMO(s[1260]);
initWPWYWMOH(s[1261]);
initWPWYWMRH(s[1262]);
initWPWYWMEN(s[1263]);
initWPWYWMSU(s[1264]);
initWPWYWMHH(s[1265]);
initWPWYWMCH(s[1266]);
initWPWYWMFI(s[1267]);
initWPWYWMHE(s[1268]);
initWPWYWM85(s[1269]);
initWPWYWM86(s[1270]);
initWPWYJPA(s[1271]);
initWPWYJHO(s[1272]);
initWPWYJTI(s[1273]);
initWPWYJCA(s[1274]);
initWPWYJCO(s[1275]);
initWPWYJBU(s[1276]);
initWPWYJFB(s[1277]);
initWPWYJON(s[1278]);
initWPWYJFI(s[1279]);
initWPWYJ95(s[1280]);
initWPWYJMPA(s[1281]);
initWPWYJMHO(s[1282]);
initWPWYJMTI(s[1283]);
initWPWYJMCA(s[1284]);
initWPWYJMCO(s[1285]);
initWPWYJMBU(s[1286]);
initWPWYJMFB(s[1287]);
initWPWYJMON(s[1288]);
initWPWYJMFI(s[1289]);
initWPWYJMLO(s[1290]);
initWPYJM11(s[1291]);
initWPWYJMBC(s[1292]);
initWPWYJMTO(s[1293]);
initWPWYJMCH(s[1294]);
initWPWYJMMO(s[1295]);
initWPWYJMHH(s[1296]);
initWPWYJMPH(s[1297]);
initWPWYJMHF(s[1298]);
initWPWYJM85(s[1299]);
initWPWYJM86(s[1300]);
initWPWYJREA(s[1301]);
initWPCJOB(s[1302]);
initWPHJOB(s[1303]);
initWPHWRK(s[1304]);
initWPWLY(s[1305]);
initWPWLYM(s[1306]);
initWPHLY(s[1307]);
initWPWLYY(s[1308]);
initWPWLYYL(s[1309]);
initWPWLYYU(s[1310]);
initWPWLYYE(s[1311]);
initWPWLYYR(s[1312]);
initWPLLSY(s[1313]);
initWPLLSM(s[1314]);
initWPLLJY(s[1315]);
initWPLLJM(s[1316]);
initWPYSTOH(s[1317]);
initWPYSTTI(s[1318]);
initWPYSTRH(s[1319]);
initWPYSTOU(s[1320]);
initWPYSTRE(s[1321]);
initWPYSTVR(s[1322]);
initWPYSTFI(s[1323]);
initWPYSTAF(s[1324]);
initWPYSTFA(s[1325]);
initWPYSTEN(s[1326]);
initWPYSTCH(s[1327]);
initWPYSTPA(s[1328]);
initWPYSTYO(s[1329]);
initWPYSTMO(s[1330]);
initWPYST95(s[1331]);
initWPYSTMOH(s[1332]);
initWPYSTMTI(s[1333]);
initWPYSTMRH(s[1334]);
initWPYSTMOU(s[1335]);
initWPYSTMRE(s[1336]);
initWPYSTMVR(s[1337]);
initWPYSTMFI(s[1338]);
initWPYSTMAF(s[1339]);
initWPYSTMFA(s[1340]);
initWPYSTMEN(s[1341]);
initWPYSTMCH(s[1342]);
initWPYSTMPA(s[1343]);
initWPYSTMYO(s[1344]);
initWPYSTMMO(s[1345]);
initWPYSTMCO(s[1346]);
initWPYSTMAG(s[1347]);
initWPYSTMST(s[1348]);
initWPYSTM85(s[1349]);
initWPYSTM86(s[1350]);
initWPYSTPM(s[1351]);
initWPNCHPH(s[1352]);
initWPNCHME(s[1353]);
initWPNCHHR(s[1354]);
initWPNCHFL(s[1355]);
initWPNCHHO(s[1356]);
initWPNCHAD(s[1357]);
initWPNCH96(s[1358]);
initWPNCHGN(s[1359]);
initWPNCHMPH(s[1360]);
initWPNCHMME(s[1361]);
initWPNCHMHR(s[1362]);
initWPNCHMFL(s[1363]);
initWPNCHMHO(s[1364]);
initWPNCHMAD(s[1365]);
initWPNCHMCO(s[1366]);
initWPNCHM85(s[1367]);
initWPNCHM86(s[1368]);
initWPNCHM96(s[1369]);
initWPNCHGO(s[1370]);
initWPNCHGA(s[1371]);
initWPNCHBPH(s[1372]);
initWPNCHBME(s[1373]);
initWPNCHBHR(s[1374]);
initWPNCHBFL(s[1375]);
initWPNCHBHO(s[1376]);
initWPNCHBAD(s[1377]);
initWPNCHB85(s[1378]);
initWPNCBMPH(s[1379]);
initWPNCBMME(s[1380]);
initWPNCBMHR(s[1381]);
initWPNCBMFL(s[1382]);
initWPNCBMHO(s[1383]);
initWPNCBMAD(s[1384]);
initWPNCBMCO(s[1385]);
initWPNCBM85(s[1386]);
initWPNCBM86(s[1387]);
initWPOJ(s[1388]);
initWPOWB(s[1389]);
initWPLPSY(s[1390]);
initWPLPSM(s[1391]);
initWPLPEY(s[1392]);
initWPLPEM(s[1393]);
initWPOJ2(s[1394]);
initWPOWB2(s[1395]);
initWPLPSY2(s[1396]);
initWPLPSM2(s[1397]);
initWPLPEY2(s[1398]);
initWPLPEM2(s[1399]);
initWPOJ3(s[1400]);
initWPOWB3(s[1401]);
initWPLPSY3(s[1402]);
initWPLPSM3(s[1403]);
initWPLPEY3(s[1404]);
initWPLPEM3(s[1405]);
initWPNIC(s[1406]);
initWPNICE(s[1407]);
initWPNIMW(s[1408]);
initWPLIMWK(s[1409]);
initWPCHDPH(s[1410]);
initWPCHDME(s[1411]);
initWPCHDHR(s[1412]);
initWPCHDFL(s[1413]);
initWPCHDHO(s[1414]);
initWPCHDAD(s[1415]);
initWPCHD96(s[1416]);
initWPCHGDN(s[1417]);
initWPCHDMPH(s[1418]);
initWPCHDMME(s[1419]);
initWPCHDMHR(s[1420]);
initWPCHDMFL(s[1421]);
initWPCHDMHO(s[1422]);
initWPCHDMAD(s[1423]);
initWPCHDMCO(s[1424]);
initWPCHDM85(s[1425]);
initWPCHDM86(s[1426]);
initWPCHDM96(s[1427]);
initWPCHLPH(s[1428]);
initWPCHLME(s[1429]);
initWPCHLHR(s[1430]);
initWPCHLFL(s[1431]);
initWPCHLHO(s[1432]);
initWPCHLAD(s[1433]);
initWPCHL95(s[1434]);
initWPCHL96(s[1435]);
initWPCHLMPH(s[1436]);
initWPCHLMME(s[1437]);
initWPCHLMHR(s[1438]);
initWPCHLMFL(s[1439]);
initWPCHLMHO(s[1440]);
initWPCHLMAD(s[1441]);
initWPCHLM85(s[1442]);
initWPCHLM86(s[1443]);
initWPCHLM96(s[1444]);
initWPOCHG(s[1445]);
initWPACHG(s[1446]);
initWPBCHPH(s[1447]);
initWPBCHME(s[1448]);
initWPBCHHR(s[1449]);
initWPBCHFL(s[1450]);
initWPBCHHO(s[1451]);
initWPBCHAD(s[1452]);
initWPBCH95(s[1453]);
initWPLNJ(s[1454]);
initWPWYNOH(s[1455]);
initWPWYNTI(s[1456]);
initWPWYNRH(s[1457]);
initWPWYNOU(s[1458]);
initWPWYNRE(s[1459]);
initWPWYNVR(s[1460]);
initWPWYNFA(s[1461]);
initWPWYNCH(s[1462]);
initWPWYNEM(s[1463]);
initWPWYNCA(s[1464]);
initWPWYNEA(s[1465]);
initWPWYNMO(s[1466]);
initWPWYN95(s[1467]);
initWPMYNJ(s[1468]);
initWPLCHPH(s[1469]);
initWPLCHME(s[1470]);
initWPLCHHR(s[1471]);
initWPLCHFL(s[1472]);
initWPLCHHO(s[1473]);
initWPLCHAD(s[1474]);
initWPLCH95(s[1475]);
initWPLCH96(s[1476]);
initWPLCHMPH(s[1477]);
initWPLCHMME(s[1478]);
initWPLCHMHR(s[1479]);
initWPLCHMFL(s[1480]);
initWPLCHMHO(s[1481]);
initWPLCHMAD(s[1482]);
initWPLCHMLO(s[1483]);
initWPLCHMSA(s[1484]);
initWPLCHMBO(s[1485]);
initWPLCHMCO(s[1486]);
initWPLCHMDE(s[1487]);
initWPLCHMLH(s[1488]);
initWPLCHMRT(s[1489]);
initWPLCHM85(s[1490]);
initWPLCHM86(s[1491]);
initWPNLKSU(s[1492]);
initWPNLKDI(s[1493]);
initWPNLKPA(s[1494]);
initWPNLKRT(s[1495]);
initWPNLKPE(s[1496]);
initWPNLKLO(s[1497]);
initWPNLK95(s[1498]);
initWPNLKMSU(s[1499]);
initWPNLKMDI(s[1500]);
initWPNLKMPA(s[1501]);
initWPNLKMRT(s[1502]);
initWPNLKMPE(s[1503]);
initWPNLKMLO(s[1504]);
initWPNLKMEN(s[1505]);
initWPNLKMCM(s[1506]);
initWPNLKMAC(s[1507]);
initWPNLKMDE(s[1508]);
initWPNLKMCO(s[1509]);
initWPNLKMFI(s[1510]);
initWPNLKMCN(s[1511]);
initWPNLKMHR(s[1512]);
initWPNLKMSE(s[1513]);
initWPNLKMFR(s[1514]);
initWPNLKMNO(s[1515]);
initWPNLKM85(s[1516]);
initWPNLKM86(s[1517]);
initWPSPAY(s[1518]);
initWPOTP(s[1519]);
initWPAOTP(s[1520]);
initWPAOTWL(s[1521]);
initWPAOTWU(s[1522]);
initWPAOTWE(s[1523]);
initWPAOTWR(s[1524]);
initWPAOTFL(s[1525]);
initWPAOTFU(s[1526]);
initWPAOTFE(s[1527]);
initWPAOTFR(s[1528]);
initWPAOTML(s[1529]);
initWPAOTMU(s[1530]);
initWPAOTME(s[1531]);
initWPAOTMR(s[1532]);
initWPAOTYL(s[1533]);
initWPAOTYU(s[1534]);
initWPAOTYE(s[1535]);
initWPAOTYR(s[1536]);
initWPAOTOL(s[1537]);
initWPAOTOU(s[1538]);
initWPAOTOE(s[1539]);
initWPAOTOR(s[1540]);
initWPPERI(s[1541]);
initWPSLIP(s[1542]);
initWPTHP(s[1543]);
initWPTHPWL(s[1544]);
initWPTHPWU(s[1545]);
initWPTHPWE(s[1546]);
initWPTHPWR(s[1547]);
initWPTHPFL(s[1548]);
initWPTHPFU(s[1549]);
initWPTHPFE(s[1550]);
initWPTHPFR(s[1551]);
initWPTHPML(s[1552]);
initWPTHPMU(s[1553]);
initWPTHPME(s[1554]);
initWPTHPMR(s[1555]);
initWPTHPYL(s[1556]);
initWPTHPYU(s[1557]);
initWPTHPYE(s[1558]);
initWPTHPYR(s[1559]);
initWPTHPOL(s[1560]);
initWPTHPOU(s[1561]);
initWPTHPOE(s[1562]);
initWPTHPOR(s[1563]);
initWPTHL(s[1564]);
initWPUP(s[1565]);
initWPUPA(s[1566]);
initWPUPAWL(s[1567]);
initWPUPAWU(s[1568]);
initWPUPAWE(s[1569]);
initWPUPAWR(s[1570]);
initWPUPAFL(s[1571]);
initWPUPAFU(s[1572]);
initWPUPAFE(s[1573]);
initWPUPAFR(s[1574]);
initWPUPAML(s[1575]);
initWPUPAMU(s[1576]);
initWPUPAME(s[1577]);
initWPUPAMR(s[1578]);
initWPUPAYL(s[1579]);
initWPUPAYU(s[1580]);
initWPUPAYE(s[1581]);
initWPUPAYR(s[1582]);
initWPUPAOL(s[1583]);
initWPUPAOU(s[1584]);
initWPUPAOE(s[1585]);
initWPUPAOR(s[1586]);
initWPPAYA(s[1587]);
initWPCRET(s[1588]);
initWPCRAGE(s[1589]);
initWPCRETL(s[1590]);
initWPIR(s[1591]);
initWPAP(s[1592]);
initWPRAIR(s[1593]);
initWPRAIM(s[1594]);
initWPRAEY(s[1595]);
initWPRAEM(s[1596]);
initWPPROF(s[1597]);
initWPPROFL(s[1598]);
initWPPROFU(s[1599]);
initWPPROFE(s[1600]);
initWPPROFR(s[1601]);
initWPPL(s[1602]);
initWPBDT(s[1603]);
initWPBDNI(s[1604]);
initWPBI(s[1605]);
initWPBIWA(s[1606]);
initWPBIWAL(s[1607]);
initWPBIWAU(s[1608]);
initWPBIWAE(s[1609]);
initWPBIWAR(s[1610]);
initWPBIMA(s[1611]);
initWPBIMAL(s[1612]);
initWPBIMAU(s[1613]);
initWPBIMAE(s[1614]);
initWPBIMAR(s[1615]);
initWPBUSV(s[1616]);
initWPBUSVL(s[1617]);
initWPBUSVU(s[1618]);
initWPBUSVE(s[1619]);
initWPBUSVR(s[1620]);
initWPMOJ(s[1621]);
initWPHMSJ(s[1622]);
initWPESJ(s[1623]);
initWPESJL(s[1624]);
initWPESJU(s[1625]);
initWPESJE(s[1626]);
initWPESJR(s[1627]);
initWPESJM(s[1628]);
initWPESJML(s[1629]);
initWPESJMU(s[1630]);
initWPESJME(s[1631]);
initWPESJMR(s[1632]);
initWPBUS(s[1633]);
initWPVBUS(s[1634]);
initWPVBUSL(s[1635]);
initWPVBUSU(s[1636]);
initWPVBUSE(s[1637]);
initWPVBUSR(s[1638]);
initWPOWK(s[1639]);
initWPMANPP(s[1640]);
initWPMPAH(s[1641]);
initWPMALA(s[1642]);
initWPQN(s[1643]);
initWP1Q(s[1644]);
initWP2Q(s[1645]);
initWP3Q(s[1646]);
initWPMFQ(s[1647]);
initWPMSQ(s[1648]);
initWPMTQ(s[1649]);
initWPMANSP(s[1650]);
initWPMSAH(s[1651]);
initWPMSH(s[1652]);
initWPSN(s[1653]);
initWP1SQ(s[1654]);
initWP2SQ(s[1655]);
initWP3SQ(s[1656]);
initWPMSFQ(s[1657]);
initWPMSSQ(s[1658]);
initWPMSTQ(s[1659]);
initWPSPD(s[1660]);
initWPSPD1A(s[1661]);
initWPSPD1B(s[1662]);
initWPSPD2(s[1663]);
initWPSPD3(s[1664]);
initWPSPD3A(s[1665]);
initWPSPD3M(s[1666]);
initWPSPD3Y(s[1667]);
initWPSPD4(s[1668]);
initWPSPD5Y(s[1669]);
initWPSPD5M(s[1670]);
initWPSPD6(s[1671]);
initWPSPY(s[1672]);
initWPSPAM(s[1673]);
initWPSPAW(s[1674]);
initWPRAGE(s[1675]);
initWPEARLY(s[1676]);
initWPERAG(s[1677]);
initWPERET(s[1678]);
initWPERP(s[1679]);
initWPREAOH(s[1680]);
initWPREARH(s[1681]);
initWPREARE(s[1682]);
initWPREAVR(s[1683]);
initWPREAFI(s[1684]);
initWPREAFA(s[1685]);
initWPREAEN(s[1686]);
initWPREACH(s[1687]);
initWPREAST(s[1688]);
initWPREADT(s[1689]);
initWPREAYO(s[1690]);
initWPREA95(s[1691]);
initWPREA96(s[1692]);
initWPREANO(s[1693]);
initWPREAMOH(s[1694]);
initWPREAMRH(s[1695]);
initWPREAMRE(s[1696]);
initWPREAMVR(s[1697]);
initWPREAMFI(s[1698]);
initWPREAMFA(s[1699]);
initWPREAMEN(s[1700]);
initWPREAMCH(s[1701]);
initWPREAMST(s[1702]);
initWPREAMDT(s[1703]);
initWPREAMYO(s[1704]);
initWPREAM85(s[1705]);
initWPREAM86(s[1706]);
initWPREAM96(s[1707]);
initWPREAMNO(s[1708]);
initWPMREA(s[1709]);
initWPRRAG(s[1710]);
initWPRROH(s[1711]);
initWPRRRH(s[1712]);
initWPRRRE(s[1713]);
initWPRRFI(s[1714]);
initWPRRFA(s[1715]);
initWPRREN(s[1716]);
initWPRRCH(s[1717]);
initWPRRST(s[1718]);
initWPRRDT(s[1719]);
initWPRRYO(s[1720]);
initWPRR95(s[1721]);
initWPRR96(s[1722]);
initWPRRMAG(s[1723]);
initWPRRMOH(s[1724]);
initWPRRMRH(s[1725]);
initWPRRMRE(s[1726]);
initWPRRMFI(s[1727]);
initWPRRMFA(s[1728]);
initWPRRMEN(s[1729]);
initWPRRMCH(s[1730]);
initWPRRMST(s[1731]);
initWPRRMDT(s[1732]);
initWPRRMYO(s[1733]);
initWPRRMLI(s[1734]);
initWPRRMAF(s[1735]);
initWPRRM85(s[1736]);
initWPRRM86(s[1737]);
initWPRRM96(s[1738]);
initWPMRRE(s[1739]);
initWPWKR(s[1740]);
initWPPHI(s[1741]);
initWPHOWU(s[1742]);
initWPHLWZ(s[1743]);
initWPHOWE(s[1744]);
initWPMHI(s[1745]);
initWPMHIL(s[1746]);
initWPMHIU(s[1747]);
initWPMHIE(s[1748]);
initWPMHIR(s[1749]);
initNPFFW(s[1750]);
initWPBPS(s[1751]);
initWPPS(s[1752]);
initWPMORE(s[1753]);
initWPNPENS(s[1754]);
initWPRPENS(s[1755]);
initWPFFPENT(s[1756]);
initWPFFDCDB(s[1757]);
initWPFFCURP(s[1758]);
initWPFFRECP(s[1759]);
initWPFFYBS(s[1760]);
initWPPENT(s[1761]);
initWPNEWP(s[1762]);
initWPPREV(s[1763]);
initWPCURR(s[1764]);
initWPLFTPCH(s[1765]);
initWPLFTPOF(s[1766]);
initWPLFTPEL(s[1767]);
initWPLFTPAF(s[1768]);
initWPLFTPRT(s[1769]);
initWPLFTPRE(s[1770]);
initWPLFTP95(s[1771]);
initWPREC(s[1772]);
initWPRGHX(s[1773]);
initWPCURP(s[1774]);
initWPSRUL(s[1775]);
initWPDPS(s[1776]);
initWPDCDB(s[1777]);
initWPCOS(s[1778]);
initWPNRA(s[1779]);
initWPBTHA(s[1780]);
initWPBTHP(s[1781]);
initWPERA(s[1782]);
initWPYAER(s[1783]);
initWPDESP(s[1784]);
initWPFSAP(s[1785]);
initWPPLP(s[1786]);
initWPPLPH(s[1787]);
initWPLUMP(s[1788]);
initWPLUMPL(s[1789]);
initWPLUMPU(s[1790]);
initWPLUMPE(s[1791]);
initWPLUMPR(s[1792]);
initWPPTP(s[1793]);
initWPPSAL(s[1794]);
initWPASAL(s[1795]);
initWPASALL(s[1796]);
initWPASALU(s[1797]);
initWPASALE(s[1798]);
initWPASALR(s[1799]);
initWPYBS(s[1800]);
initWPERC(s[1801]);
initWPMC(s[1802]);
initWPMCA(s[1803]);
initWPPERC(s[1804]);
initWPMFRC(s[1805]);
initWPACON(s[1806]);
initWPADY(s[1807]);
initWPMMIN(s[1808]);
initWPACOA(s[1809]);
initWPACOB(s[1810]);
initWPACOC(s[1811]);
initWPFRAS(s[1812]);
initWPCONY(s[1813]);
initWPPCON(s[1814]);
initWPYCAT(s[1815]);
initWPYCA(s[1816]);
initWPMCAF(s[1817]);
initWPYFRA(s[1818]);
initWPLCOY(s[1819]);
initWPLCOM(s[1820]);
initWPNIRR(s[1821]);
initWPMCON(s[1822]);
initWPAC(s[1823]);
initWPFSC(s[1824]);
initWPRCON(s[1825]);
initWPRCMO(s[1826]);
initWPRCRE(s[1827]);
initWPRCST(s[1828]);
initWPRCRI(s[1829]);
initWPRCPU(s[1830]);
initWPRC95(s[1831]);
initWPRCMMO(s[1832]);
initWPRCMRE(s[1833]);
initWPRCMST(s[1834]);
initWPRCMRI(s[1835]);
initWPRCMPU(s[1836]);
initWPRCMOH(s[1837]);
initWPRCMUN(s[1838]);
initWPRCMAF(s[1839]);
initWPRCMNK(s[1840]);
initWPRCM85(s[1841]);
initWPRCM86(s[1842]);
initWPCEMP(s[1843]);
initWPECPP(s[1844]);
initWPAECP(s[1845]);
initWPEPER(s[1846]);
initWPFSEC(s[1847]);
initWPMEC(s[1848]);
initWPAMEC(s[1849]);
initWPFSCP(s[1850]);
initWPFSCO(s[1851]);
initWPFSAV(s[1852]);
initWPPFVA(s[1853]);
initWPPFVL(s[1854]);
initWPPFVU(s[1855]);
initWPPFVE(s[1856]);
initWPPFVR(s[1857]);
initWPAPF(s[1858]);
initWPAPFL(s[1859]);
initWPAPFU(s[1860]);
initWPAPFE(s[1861]);
initWPAPFR(s[1862]);
initWPPTOP(s[1863]);
initWPPENB(s[1864]);
initWPPENTL(s[1865]);
initWPPENTU(s[1866]);
initWPPENTE(s[1867]);
initWPPENTR(s[1868]);
initWPPENAL(s[1869]);
initWPPENAU(s[1870]);
initWPPENAE(s[1871]);
initWPPENAR(s[1872]);
initWPDPSP(s[1873]);
initWPERCP(s[1874]);
initWPDS(s[1875]);
initWPDE(s[1876]);
initWPINF(s[1877]);
initWPPAY(s[1878]);
initWPPYR(s[1879]);
initWPPYRWL(s[1880]);
initWPPYRWU(s[1881]);
initWPPYRWE(s[1882]);
initWPPYRWR(s[1883]);
initWPPYRFL(s[1884]);
initWPPYRFU(s[1885]);
initWPPYRFE(s[1886]);
initWPPYRFR(s[1887]);
initWPPYRML(s[1888]);
initWPPYRMU(s[1889]);
initWPPYRME(s[1890]);
initWPPYRMR(s[1891]);
initWPPYRYL(s[1892]);
initWPPYRYU(s[1893]);
initWPPYRYE(s[1894]);
initWPPYRYR(s[1895]);
initWPPYROL(s[1896]);
initWPPYROU(s[1897]);
initWPPYROE(s[1898]);
initWPPYROR(s[1899]);
initWPTAX(s[1900]);
initWPNEW(s[1901]);
initWPLUPS(s[1902]);
initWPLUPA(s[1903]);
initWPLUAL(s[1904]);
initWPLUAU(s[1905]);
initWPLUAE(s[1906]);
initWPLUAR(s[1907]);
initWPTAKP(s[1908]);
initWPINCD(s[1909]);
initWPINCDL(s[1910]);
initWPINCDU(s[1911]);
initWPINCDE(s[1912]);
initWPINCDR(s[1913]);
initWPIFSNO(s[1914]);
initWPIFSEM(s[1915]);
initWPIFSRE(s[1916]);
initWPIFSCO(s[1917]);
initWPIFSPR(s[1918]);
initWPIFSAC(s[1919]);
initWPIFSFA(s[1920]);
initWPIFSRP(s[1921]);
initWPIFS95(s[1922]);
initWPFINF(s[1923]);
initWPBPSP(s[1924]);
initWPPSPC(s[1925]);
initWPMORP(s[1926]);
initWPFFPENT2(s[1927]);
initWPFFDCDB2(s[1928]);
initWPFFCUR2(s[1929]);
initWPFFREC2(s[1930]);
initWPFFYBS2(s[1931]);
initWPPENT2(s[1932]);
initWPNEWP2(s[1933]);
initWPPREV2(s[1934]);
initWPCURR2(s[1935]);
initWPLFTP2CH(s[1936]);
initWPLFTP2OF(s[1937]);
initWPLFTP2EL(s[1938]);
initWPLFTP2AF(s[1939]);
initWPLFTP2RT(s[1940]);
initWPLFTP2RE(s[1941]);
initWPLFTP295(s[1942]);
initWPREC2(s[1943]);
initWPRGHX2(s[1944]);
initWPCURP2(s[1945]);
initWPSRUL2(s[1946]);
initWPDPS2(s[1947]);
initWPDCDB2(s[1948]);
initWPCOS2(s[1949]);
initWPNRA2(s[1950]);
initWPBTHA2(s[1951]);
initWPBTHP2(s[1952]);
initWPERA2(s[1953]);
initWPYAER2(s[1954]);
initWPDESP2(s[1955]);
initWPFSAP2(s[1956]);
initWPPLP2(s[1957]);
initWPPLPH2(s[1958]);
initWPLUMP2(s[1959]);
initWPLUM2L(s[1960]);
initWPLUM2U(s[1961]);
initWPLUM2E(s[1962]);
initWPLUM2R(s[1963]);
initWPPTP2(s[1964]);
initWPPSAL2(s[1965]);
initWPASAL2(s[1966]);
initWPASA2L(s[1967]);
initWPASA2U(s[1968]);
initWPASA2E(s[1969]);
initWPASA2R(s[1970]);
initWPYBS2(s[1971]);
initWPERC2(s[1972]);
initWPMC2(s[1973]);
initWPMCA2(s[1974]);
initWPPERC2(s[1975]);
initWPMFRC2(s[1976]);
initWPACON2(s[1977]);
initWPADY2(s[1978]);
initWPMMIN2(s[1979]);
initWPACOA2(s[1980]);
initWPACOB2(s[1981]);
initWPACOC2(s[1982]);
initWPFRAS2(s[1983]);
initWPCONY2(s[1984]);
initWPPCON2(s[1985]);
initWPYCAT2(s[1986]);
initWPYCA2(s[1987]);
initWPMCAF2(s[1988]);
initWPYFRA2(s[1989]);
initWPLCOY2(s[1990]);
initWPLCOM2(s[1991]);
initWPNIRR2(s[1992]);
initWPMCON2(s[1993]);
initWPAC2(s[1994]);
initWPFSC2(s[1995]);
initWPRCON2(s[1996]);
initWPRC2MO(s[1997]);
initWPRC2RE(s[1998]);
initWPRC2ST(s[1999]);
initWPRC2RI(s[2000]);
initWPRC2PU(s[2001]);
initWPRC295(s[2002]);
initWPRCM2MO(s[2003]);
initWPRCM2RE(s[2004]);
initWPRCM2ST(s[2005]);
initWPRCM2RI(s[2006]);
initWPRCM2PU(s[2007]);
initWPRCM2OH(s[2008]);
initWPRCM2UN(s[2009]);
initWPRCM2AF(s[2010]);
initWPRCM2NK(s[2011]);
initWPRCM285(s[2012]);
initWPRCM286(s[2013]);
initWPCEMP2(s[2014]);
initWPECPP2(s[2015]);
initWPAECP2(s[2016]);
initWPEPER2(s[2017]);
initWPFSEC2(s[2018]);
initWPMEC2(s[2019]);
initWPAMEC2(s[2020]);
initWPFSCP2(s[2021]);
initWPFSCO2(s[2022]);
initWPFSAV2(s[2023]);
initWPPFVA2(s[2024]);
initWPPFV2L(s[2025]);
initWPPFV2U(s[2026]);
initWPPFV2E(s[2027]);
initWPPFV2R(s[2028]);
initWPAPF2(s[2029]);
initWPAPF2L(s[2030]);
initWPAPF2U(s[2031]);
initWPAPF2E(s[2032]);
initWPAPF2R(s[2033]);
initWPPTOP2(s[2034]);
initWPPENB2(s[2035]);
initWPPE2TL(s[2036]);
initWPPE2TU(s[2037]);
initWPPE2TE(s[2038]);
initWPPE2TR(s[2039]);
initWPPE2AL(s[2040]);
initWPPE2AU(s[2041]);
initWPPE2AE(s[2042]);
initWPPE2AR(s[2043]);
initWPDPSP2(s[2044]);
initWPERCP2(s[2045]);
initWPDS2(s[2046]);
initWPDE2(s[2047]);
initWPINF2(s[2048]);
initWPPAY2(s[2049]);
initWPPYR2(s[2050]);
initWPPY2WL(s[2051]);
initWPPY2WU(s[2052]);
initWPPY2WE(s[2053]);
initWPPY2WR(s[2054]);
initWPPY2FL(s[2055]);
initWPPY2FU(s[2056]);
initWPPY2FE(s[2057]);
initWPPY2FR(s[2058]);
initWPPY2ML(s[2059]);
initWPPY2MU(s[2060]);
initWPPY2ME(s[2061]);
initWPPY2MR(s[2062]);
initWPPY2YL(s[2063]);
initWPPY2YU(s[2064]);
initWPPY2YE(s[2065]);
initWPPY2YR(s[2066]);
initWPPY2OL(s[2067]);
initWPPY2OU(s[2068]);
initWPPY2OE(s[2069]);
initWPPY2OR(s[2070]);
initWPTAX2(s[2071]);
initWPNEW2(s[2072]);
initWPLUPS2(s[2073]);
initWPLUPA2(s[2074]);
initWPLUA2L(s[2075]);
initWPLUA2U(s[2076]);
initWPLUA2E(s[2077]);
initWPLUA2R(s[2078]);
initWPTAKP2(s[2079]);
initWPINCD2(s[2080]);
initWPINC2L(s[2081]);
initWPINC2U(s[2082]);
initWPINC2E(s[2083]);
initWPINC2R(s[2084]);
initWPIFS2NO(s[2085]);
initWPIFS2EM(s[2086]);
initWPIFS2RE(s[2087]);
initWPIFS2CO(s[2088]);
initWPIFS2PR(s[2089]);
initWPIFS2AC(s[2090]);
initWPIFS2FA(s[2091]);
initWPIFS2RP(s[2092]);
initWPIFS295(s[2093]);
initWPFINF2(s[2094]);
initWPBPSP2(s[2095]);
initWPPSPC2(s[2096]);
initWPMORP2(s[2097]);
initWPFFPENT3(s[2098]);
initWPFFDCDB3(s[2099]);
initWPFFCUR3(s[2100]);
initWPFFREC3(s[2101]);
initWPFFYBS3(s[2102]);
initWPPENT3(s[2103]);
initWPNEWP3(s[2104]);
initWPPREV3(s[2105]);
initWPCURR3(s[2106]);
initWPLFTP3CH(s[2107]);
initWPLFTP3OF(s[2108]);
initWPLFTP3EL(s[2109]);
initWPLFTP3AF(s[2110]);
initWPLFTP3RT(s[2111]);
initWPLFTP3RE(s[2112]);
initWPLFTP395(s[2113]);
initWPREC3(s[2114]);
initWPRGHX3(s[2115]);
initWPCURP3(s[2116]);
initWPSRUL3(s[2117]);
initWPDPS3(s[2118]);
initWPDCDB3(s[2119]);
initWPCOS3(s[2120]);
initWPNRA3(s[2121]);
initWPBTHA3(s[2122]);
initWPBTHP3(s[2123]);
initWPERA3(s[2124]);
initWPYAER3(s[2125]);
initWPDESP3(s[2126]);
initWPFSAP3(s[2127]);
initWPPLP3(s[2128]);
initWPPLPH3(s[2129]);
initWPLUMP3(s[2130]);
initWPLUM3L(s[2131]);
initWPLUM3U(s[2132]);
initWPLUM3E(s[2133]);
initWPLUM3R(s[2134]);
initWPPTP3(s[2135]);
initWPPSAL3(s[2136]);
initWPASAL3(s[2137]);
initWPASA3L(s[2138]);
initWPASA3U(s[2139]);
initWPASA3E(s[2140]);
initWPASA3R(s[2141]);
initWPYBS3(s[2142]);
initWPERC3(s[2143]);
initWPMC3(s[2144]);
initWPMCA3(s[2145]);
initWPPERC3(s[2146]);
initWPMFRC3(s[2147]);
initWPACON3(s[2148]);
initWPADY3(s[2149]);
initWPMMIN3(s[2150]);
initWPACOA3(s[2151]);
initWPACOB3(s[2152]);
initWPACOC3(s[2153]);
initWPFRAS3(s[2154]);
initWPCONY3(s[2155]);
initWPPCON3(s[2156]);
initWPYCAT3(s[2157]);
initWPYCA3(s[2158]);
initWPMCAF3(s[2159]);
initWPYFRA3(s[2160]);
initWPLCOY3(s[2161]);
initWPLCOM3(s[2162]);
initWPNIRR3(s[2163]);
initWPMCON3(s[2164]);
initWPAC3(s[2165]);
initWPFSC3(s[2166]);
initWPRCON3(s[2167]);
initWPRC3MO(s[2168]);
initWPRC3RE(s[2169]);
initWPRC3ST(s[2170]);
initWPRC3RI(s[2171]);
initWPRC3PU(s[2172]);
initWPRC395(s[2173]);
initWPRCM3MO(s[2174]);
initWPRCM3RE(s[2175]);
initWPRCM3ST(s[2176]);
initWPRCM3RI(s[2177]);
initWPRCM3PU(s[2178]);
initWPRCM3OH(s[2179]);
initWPRCM3UN(s[2180]);
initWPRCM3AF(s[2181]);
initWPRCM3NK(s[2182]);
initWPRCM385(s[2183]);
initWPRCM386(s[2184]);
initWPCEMP3(s[2185]);
initWPECPP3(s[2186]);
initWPAECP3(s[2187]);
initWPEPER3(s[2188]);
initWPFSEC3(s[2189]);
initWPMEC3(s[2190]);
initWPAMEC3(s[2191]);
initWPFSCP3(s[2192]);
initWPFSCO3(s[2193]);
initWPFSAV3(s[2194]);
initWPPFVA3(s[2195]);
initWPPFV3L(s[2196]);
initWPPFV3U(s[2197]);
initWPPFV3E(s[2198]);
initWPPFV3R(s[2199]);
initWPAPF3(s[2200]);
initWPAPF3L(s[2201]);
initWPAPF3U(s[2202]);
initWPAPF3E(s[2203]);
initWPAPF3R(s[2204]);
initWPPTOP3(s[2205]);
initWPPENB3(s[2206]);
initWPPE3TL(s[2207]);
initWPPE3TU(s[2208]);
initWPPE3TE(s[2209]);
initWPPE3TR(s[2210]);
initWPPE3AL(s[2211]);
initWPPE3AU(s[2212]);
initWPPE3AE(s[2213]);
initWPPE3AR(s[2214]);
initWPDPSP3(s[2215]);
initWPERCP3(s[2216]);
initWPDS3(s[2217]);
initWPDE3(s[2218]);
initWPINF3(s[2219]);
initWPPAY3(s[2220]);
initWPPYR3(s[2221]);
initWPPY3WL(s[2222]);
initWPPY3WU(s[2223]);
initWPPY3WE(s[2224]);
initWPPY3WR(s[2225]);
initWPPY3FL(s[2226]);
initWPPY3FU(s[2227]);
initWPPY3FE(s[2228]);
initWPPY3FR(s[2229]);
initWPPY3ML(s[2230]);
initWPPY3MU(s[2231]);
initWPPY3ME(s[2232]);
initWPPY3MR(s[2233]);
initWPPY3YL(s[2234]);
initWPPY3YU(s[2235]);
initWPPY3YE(s[2236]);
initWPPY3YR(s[2237]);
initWPPY3OL(s[2238]);
initWPPY3OU(s[2239]);
initWPPY3OE(s[2240]);
initWPPY3OR(s[2241]);
initWPTAX3(s[2242]);
initWPNEW3(s[2243]);
initWPLUPS3(s[2244]);
initWPLUPA3(s[2245]);
initWPLUA3L(s[2246]);
initWPLUA3U(s[2247]);
initWPLUA3E(s[2248]);
initWPLUA3R(s[2249]);
initWPTAKP3(s[2250]);
initWPINCD3(s[2251]);
initWPINC3L(s[2252]);
initWPINC3U(s[2253]);
initWPINC3E(s[2254]);
initWPINC3R(s[2255]);
initWPIFS3NO(s[2256]);
initWPIFS3EM(s[2257]);
initWPIFS3RE(s[2258]);
initWPIFS3CO(s[2259]);
initWPIFS3PR(s[2260]);
initWPIFS3AC(s[2261]);
initWPIFS3FA(s[2262]);
initWPIFS3RP(s[2263]);
initWPIFS395(s[2264]);
initWPFINF3(s[2265]);
initWPBPSP3(s[2266]);
initWPPSPC3(s[2267]);
initWPMORP3(s[2268]);
initWPFFPENT4(s[2269]);
initWPFFDCD4(s[2270]);
initWPFFCUR4(s[2271]);
initWPFFREC4(s[2272]);
initWPFFYBS4(s[2273]);
initWPPENT4(s[2274]);
initWPNEWP4(s[2275]);
initWPPREV4(s[2276]);
initWPCURR4(s[2277]);
initWPLFTP4CH(s[2278]);
initWPLFTP4OF(s[2279]);
initWPLFTP4EL(s[2280]);
initWPLFTP4AF(s[2281]);
initWPLFTP4RT(s[2282]);
initWPLFTP4RE(s[2283]);
initWPLFTP495(s[2284]);
initWPREC4(s[2285]);
initWPRGHX4(s[2286]);
initWPCURP4(s[2287]);
initWPSRUL4(s[2288]);
initWPDPS4(s[2289]);
initWPDCDB4(s[2290]);
initWPCOS4(s[2291]);
initWPNRA4(s[2292]);
initWPBTHA4(s[2293]);
initWPBTHP4(s[2294]);
initWPERA4(s[2295]);
initWPYAER4(s[2296]);
initWPDESP4(s[2297]);
initWPFSAP4(s[2298]);
initWPPLP4(s[2299]);
initWPPLPH4(s[2300]);
initWPLUMP4(s[2301]);
initWPLUM4L(s[2302]);
initWPLUM4U(s[2303]);
initWPLUM4E(s[2304]);
initWPLUM4R(s[2305]);
initWPPTP4(s[2306]);
initWPPSAL4(s[2307]);
initWPASAL4(s[2308]);
initWPASA4L(s[2309]);
initWPASA4U(s[2310]);
initWPASA4E(s[2311]);
initWPASA4R(s[2312]);
initWPYBS4(s[2313]);
initWPERC4(s[2314]);
initWPMC4(s[2315]);
initWPMCA4(s[2316]);
initWPPERC4(s[2317]);
initWPMFRC4(s[2318]);
initWPACON4(s[2319]);
initWPADY4(s[2320]);
initWPMMIN4(s[2321]);
initWPACOA4(s[2322]);
initWPACOB4(s[2323]);
initWPACOC4(s[2324]);
initWPFRAS4(s[2325]);
initWPCONY4(s[2326]);
initWPPCONT4(s[2327]);
initWPYCAT4(s[2328]);
initWPYCA4(s[2329]);
initWPMCAF4(s[2330]);
initWPYFRA4(s[2331]);
initWPLCOY4(s[2332]);
initWPLCOM4(s[2333]);
initWPNIRR4(s[2334]);
initWPMCON4(s[2335]);
initWPAC4(s[2336]);
initWPFSC4(s[2337]);
initWPRCON4(s[2338]);
initWPRC4MO(s[2339]);
initWPRC4RE(s[2340]);
initWPRC4ST(s[2341]);
initWPRC4RI(s[2342]);
initWPRC4PU(s[2343]);
initWPRC495(s[2344]);
initWPRCM4MO(s[2345]);
initWPRCM4RE(s[2346]);
initWPRCM4ST(s[2347]);
initWPRCM4RI(s[2348]);
initWPRCM4PU(s[2349]);
initWPRCM4OH(s[2350]);
initWPRCM4UN(s[2351]);
initWPRCM4AF(s[2352]);
initWPRCM4NK(s[2353]);
initWPRCM485(s[2354]);
initWPRCM486(s[2355]);
initWPCEMP4(s[2356]);
initWPECPP4(s[2357]);
initWPAECP4(s[2358]);
initWPEPER4(s[2359]);
initWPFSEC4(s[2360]);
initWPMEC4(s[2361]);
initWPAMEC4(s[2362]);
initWPFSCP4(s[2363]);
initWPFSCO4(s[2364]);
initWPFSAV4(s[2365]);
initWPPFVA4(s[2366]);
initWPPFV4L(s[2367]);
initWPPFV4U(s[2368]);
initWPPFV4E(s[2369]);
initWPPFV4R(s[2370]);
initWPAPF4(s[2371]);
initWPAPF4L(s[2372]);
initWPAPF4U(s[2373]);
initWPAPF4E(s[2374]);
initWPAPF4R(s[2375]);
initWPPTOP4(s[2376]);
initWPPENB4(s[2377]);
initWPPE4TL(s[2378]);
initWPPE4TU(s[2379]);
initWPPE4TE(s[2380]);
initWPPE4TR(s[2381]);
initWPPE4AL(s[2382]);
initWPPE4AU(s[2383]);
initWPPE4AE(s[2384]);
initWPPE4AR(s[2385]);
initWPDPSP4(s[2386]);
initWPERCP4(s[2387]);
initWPDS4(s[2388]);
initWPDE4(s[2389]);
initWPINF4(s[2390]);
initWPPAY4(s[2391]);
initWPPYR4(s[2392]);
initWPPY4WL(s[2393]);
initWPPY4WU(s[2394]);
initWPPY4WE(s[2395]);
initWPPY4WR(s[2396]);
initWPPY4FL(s[2397]);
initWPPY4FU(s[2398]);
initWPPY4FE(s[2399]);
initWPPY4FR(s[2400]);
initWPPY4ML(s[2401]);
initWPPY4MU(s[2402]);
initWPPY4ME(s[2403]);
initWPPY4MR(s[2404]);
initWPPY4YL(s[2405]);
initWPPY4YU(s[2406]);
initWPPY4YE(s[2407]);
initWPPY4YR(s[2408]);
initWPPY4OL(s[2409]);
initWPPY4OU(s[2410]);
initWPPY4OE(s[2411]);
initWPPY4OR(s[2412]);
initWPTAX4(s[2413]);
initWPNE(s[2414]);
initWPLUPS4(s[2415]);
initWPLUPA4(s[2416]);
initWPLUA4L(s[2417]);
initWPLUA4U(s[2418]);
initWPLUA4E(s[2419]);
initWPLUA4R(s[2420]);
initWPTAKP4(s[2421]);
initWPINCD4(s[2422]);
initWPINC4L(s[2423]);
initWPINC4U(s[2424]);
initWPINC4E(s[2425]);
initWPINC4R(s[2426]);
initWPIFS4NO(s[2427]);
initWPIFS4EM(s[2428]);
initWPIFS4RE(s[2429]);
initWPIFS4CO(s[2430]);
initWPIFS4PR(s[2431]);
initWPIFS4AC(s[2432]);
initWPIFS4FA(s[2433]);
initWPIFS4RP(s[2434]);
initWPIFS495(s[2435]);
initWPFINF4(s[2436]);
initWPBPSP4(s[2437]);
initWPPSPC4(s[2438]);
initWPMORP4(s[2439]);
initWPFFPENT5(s[2440]);
initWPFFDCD5(s[2441]);
initWPFFCUR5(s[2442]);
initWPFFREC5(s[2443]);
initWPFFYBS5(s[2444]);
initWPPENT5(s[2445]);
initWPNEWP5(s[2446]);
initWPPREV5(s[2447]);
initWPCURR5(s[2448]);
initWPLFTP5CH(s[2449]);
initWPLFTP5OF(s[2450]);
initWPLFTP5EL(s[2451]);
initWPLFTP5AF(s[2452]);
initWPLFTP5RT(s[2453]);
initWPLFTP5RE(s[2454]);
initWPLFTP595(s[2455]);
initWPREC5(s[2456]);
initWPRGHX5(s[2457]);
initWPCURP5(s[2458]);
initWPSRUL5(s[2459]);
initWPDPS5(s[2460]);
initWPDCDB5(s[2461]);
initWPCOS5(s[2462]);
initWPNRA5(s[2463]);
initWPBTHA5(s[2464]);
initWPBTHP5(s[2465]);
initWPERA5(s[2466]);
initWPYAER5(s[2467]);
initWPDESP5(s[2468]);
initWPFSAP5(s[2469]);
initWPPLP5(s[2470]);
initWPPLPH5(s[2471]);
initWPLUMP5(s[2472]);
initWPLUM5L(s[2473]);
initWPLUM5U(s[2474]);
initWPLUM5E(s[2475]);
initWPLUM5R(s[2476]);
initWPPTP5(s[2477]);
initWPPSAL5(s[2478]);
initWPASAL5(s[2479]);
initWPASA5L(s[2480]);
initWPASA5U(s[2481]);
initWPASA5E(s[2482]);
initWPASA5R(s[2483]);
initWPYBS5(s[2484]);
initWPERC5(s[2485]);
initWPMC5(s[2486]);
initWPMCA5(s[2487]);
initWPPERC5(s[2488]);
initWPMFRC5(s[2489]);
initWPACON5(s[2490]);
initWPADY5(s[2491]);
initWPMMIN5(s[2492]);
initWPACOA5(s[2493]);
initWPACOB5(s[2494]);
initWPACOC5(s[2495]);
initWPFRAS5(s[2496]);
initWPCONY5(s[2497]);
initWPPCON5(s[2498]);
initWPYCAT5(s[2499]);
initWPYCA5(s[2500]);
initWPMCAF5(s[2501]);
initWPYFRA5(s[2502]);
initWPLCOY5(s[2503]);
initWPLCOM5(s[2504]);
initWPNIRR5(s[2505]);
initWPMCON5(s[2506]);
initWPAC5(s[2507]);
initWPFSC5(s[2508]);
initWPRCON5(s[2509]);
initWPRC5MO(s[2510]);
initWPRC5RE(s[2511]);
initWPRC5ST(s[2512]);
initWPRC5RI(s[2513]);
initWPRC5PU(s[2514]);
initWPRC595(s[2515]);
initWPRCM5MO(s[2516]);
initWPRCM5RE(s[2517]);
initWPRCM5ST(s[2518]);
initWPRCM5RI(s[2519]);
initWPRCM5PU(s[2520]);
initWPRCM5OH(s[2521]);
initWPRCM5UN(s[2522]);
initWPRCM5AF(s[2523]);
initWPRCM5NK(s[2524]);
initWPRCM585(s[2525]);
initWPRCM586(s[2526]);
initWPCEMP5(s[2527]);
initWPECPP5(s[2528]);
initWPAECP5(s[2529]);
initWPEPER5(s[2530]);
initWPFSEC5(s[2531]);
initWPMEC5(s[2532]);
initWPAMEC5(s[2533]);
initWPFSCP5(s[2534]);
initWPFSCO5(s[2535]);
initWPFSAV5(s[2536]);
initWPPFVA5(s[2537]);
initWPPFV5L(s[2538]);
initWPPFV5U(s[2539]);
initWPPFV5E(s[2540]);
initWPPFV5R(s[2541]);
initWPAPF5(s[2542]);
initWPAPF5L(s[2543]);
initWPAPF5U(s[2544]);
initWPAPF5E(s[2545]);
initWPAPF5R(s[2546]);
initWPPTOP5(s[2547]);
initWPPENB5(s[2548]);
initWPPE5TL(s[2549]);
initWPPE5TU(s[2550]);
initWPPE5TE(s[2551]);
initWPPE5TR(s[2552]);
initWPPE5AL(s[2553]);
initWPPE5AU(s[2554]);
initWPPE5AE(s[2555]);
initWPPE5AR(s[2556]);
initWPDPSP5(s[2557]);
initWPERCP5(s[2558]);
initWPDS5(s[2559]);
initWPDE5(s[2560]);
initWPINF5(s[2561]);
initWPPAY5(s[2562]);
initWPPYR5(s[2563]);
initWPPY5WL(s[2564]);
initWPPY5WU(s[2565]);
initWPPY5WE(s[2566]);
initWPPY5WR(s[2567]);
initWPPY5FL(s[2568]);
initWPPY5FU(s[2569]);
initWPPY5FE(s[2570]);
initWPPY5FR(s[2571]);
initWPPY5ML(s[2572]);
initWPPY5MU(s[2573]);
initWPPY5ME(s[2574]);
initWPPY5MR(s[2575]);
initWPPY5YL(s[2576]);
initWPPY5YU(s[2577]);
initWPPY5YE(s[2578]);
initWPPY5YR(s[2579]);
initWPPY5OL(s[2580]);
initWPPY5OU(s[2581]);
initWPPY5OE(s[2582]);
initWPPY5OR(s[2583]);
initWPTAX5(s[2584]);
initWPNEW5(s[2585]);
initWPLUPS5(s[2586]);
initWPLUPA5(s[2587]);
initWPLUA5L(s[2588]);
initWPLUA5U(s[2589]);
initWPLUA5E(s[2590]);
initWPLUA5R(s[2591]);
initWPTAKP5(s[2592]);
initWPINCD5(s[2593]);
initWPINC5L(s[2594]);
initWPINC5U(s[2595]);
initWPINC5E(s[2596]);
initWPINC5R(s[2597]);
initWPIFS5NO(s[2598]);
initWPIFS5EM(s[2599]);
initWPIFS5RE(s[2600]);
initWPIFS5CO(s[2601]);
initWPIFS5PR(s[2602]);
initWPIFS5AC(s[2603]);
initWPIFS5FA(s[2604]);
initWPIFS5RP(s[2605]);
initWPIFS595(s[2606]);
initWPFINF5(s[2607]);
initWPBPSP5(s[2608]);
initWPPSPC5(s[2609]);
initWPMORP5(s[2610]);
initWPFFPENT6(s[2611]);
initWPFFDCD6(s[2612]);
initWPFFCUR6(s[2613]);
initWPFFREC6(s[2614]);
initWPFFYBS6(s[2615]);
initWPPENT6(s[2616]);
initWPNEWP6(s[2617]);
initWPPREV6(s[2618]);
initWPCURR6(s[2619]);
initWPLFTP6CH(s[2620]);
initWPLFTP6OF(s[2621]);
initWPLFTP6EL(s[2622]);
initWPLFTP6AF(s[2623]);
initWPLFTP6RT(s[2624]);
initWPLFTP6RE(s[2625]);
initWPLFTP695(s[2626]);
initWPREC6(s[2627]);
initWPRGHX6(s[2628]);
initWPCURP6(s[2629]);
initWPSRUL6(s[2630]);
initWPDPS6(s[2631]);
initWPDCDB6(s[2632]);
initWPCOS6(s[2633]);
initWPNRA6(s[2634]);
initWPBTHA6(s[2635]);
initWPBTHP6(s[2636]);
initWPERA6(s[2637]);
initWPYAER6(s[2638]);
initWPDESP6(s[2639]);
initWPFSAP6(s[2640]);
initWPPLP6(s[2641]);
initWPPLPH6(s[2642]);
initWPLUMP6(s[2643]);
initWPLUM6L(s[2644]);
initWPLUM6U(s[2645]);
initWPLUM6E(s[2646]);
initWPLUM6R(s[2647]);
initWPPTP6(s[2648]);
initWPPSAL6(s[2649]);
initWPASAL6(s[2650]);
initWPASA6L(s[2651]);
initWPASA6U(s[2652]);
initWPASA6E(s[2653]);
initWPASA6R(s[2654]);
initWPYBS6(s[2655]);
initWPERC6(s[2656]);
initWPMC6(s[2657]);
initWPMCA6(s[2658]);
initWPPERC6(s[2659]);
initWPMFRC6(s[2660]);
initWPACON6(s[2661]);
initWPADY6(s[2662]);
initWPMMIN6(s[2663]);
initWPACOA6(s[2664]);
initWPACOB6(s[2665]);
initWPACOC6(s[2666]);
initWPFRAS6(s[2667]);
initWPCONY6(s[2668]);
initWPPCON6(s[2669]);
initWPYCAT6(s[2670]);
initWPYCA6(s[2671]);
initWPMCAF6(s[2672]);
initWPYFRA6(s[2673]);
initWPLCOY6(s[2674]);
initWPLCOM6(s[2675]);
initWPNIRR6(s[2676]);
initWPMCON6(s[2677]);
initWPAC6(s[2678]);
initWPFSC6(s[2679]);
initWPRCON6(s[2680]);
initWPRC6MO(s[2681]);
initWPRC6RE(s[2682]);
initWPRC6ST(s[2683]);
initWPRC6RI(s[2684]);
initWPRC6PU(s[2685]);
initWPRC695(s[2686]);
initWPRCM6MO(s[2687]);
initWPRCM6RE(s[2688]);
initWPRCM6ST(s[2689]);
initWPRCM6RI(s[2690]);
initWPRCM6PU(s[2691]);
initWPRCM6OH(s[2692]);
initWPRCM6UN(s[2693]);
initWPRCM6AF(s[2694]);
initWPRCM6NK(s[2695]);
initWPRCM685(s[2696]);
initWPRCM686(s[2697]);
initWPCEMP6(s[2698]);
initWPECPP6(s[2699]);
initWPAECP6(s[2700]);
initWPEPER6(s[2701]);
initWPFSEC6(s[2702]);
initWPMEC6(s[2703]);
initWPAMEC6(s[2704]);
initWPFSCP6(s[2705]);
initWPFSCO6(s[2706]);
initWPFSAV6(s[2707]);
initWPPFVA6(s[2708]);
initWPPFV6L(s[2709]);
initWPPFV6U(s[2710]);
initWPPFV6E(s[2711]);
initWPPFV6R(s[2712]);
initWPAPF6(s[2713]);
initWPAPF6L(s[2714]);
initWPAPF6U(s[2715]);
initWPAPF6E(s[2716]);
initWPAPF6R(s[2717]);
initWPPTOP6(s[2718]);
initWPPENB6(s[2719]);
initWPPE6TL(s[2720]);
initWPPE6TU(s[2721]);
initWPPE6TE(s[2722]);
initWPPE6TR(s[2723]);
initWPPE6AL(s[2724]);
initWPPE6AU(s[2725]);
initWPPE6AE(s[2726]);
initWPPE6AR(s[2727]);
initWPDPSP6(s[2728]);
initWPERCP6(s[2729]);
initWPDS6(s[2730]);
initWPDE6(s[2731]);
initWPINF6(s[2732]);
initWPPAY6(s[2733]);
initWPPYR6(s[2734]);
initWPPY6WL(s[2735]);
initWPPY6WU(s[2736]);
initWPPY6WE(s[2737]);
initWPPY6WR(s[2738]);
initWPPY6FL(s[2739]);
initWPPY6FU(s[2740]);
initWPPY6FE(s[2741]);
initWPPY6FR(s[2742]);
initWPPY6ML(s[2743]);
initWPPY6MU(s[2744]);
initWPPY6ME(s[2745]);
initWPPY6MR(s[2746]);
initWPPY6YL(s[2747]);
initWPPY6YU(s[2748]);
initWPPY6YE(s[2749]);
initWPPY6YR(s[2750]);
initWPPY6OL(s[2751]);
initWPPY6OU(s[2752]);
initWPPY6OE(s[2753]);
initWPPY6OR(s[2754]);
initWPTAX6(s[2755]);
initWPNEW6(s[2756]);
initWPLUPS6(s[2757]);
initWPLUPA6(s[2758]);
initWPLUA6L(s[2759]);
initWPLUA6U(s[2760]);
initWPLUA6E(s[2761]);
initWPLUA6R(s[2762]);
initWPTAKP6(s[2763]);
initWPINCD6(s[2764]);
initWPINC6L(s[2765]);
initWPINC6U(s[2766]);
initWPINC6E(s[2767]);
initWPINC6R(s[2768]);
initWPIFS6NO(s[2769]);
initWPIFS6EM(s[2770]);
initWPIFS6RE(s[2771]);
initWPIFS6CO(s[2772]);
initWPIFS6PR(s[2773]);
initWPIFS6AC(s[2774]);
initWPIFS6FA(s[2775]);
initWPIFS6RP(s[2776]);
initWPIFS695(s[2777]);
initWPFINF6(s[2778]);
initWPBPSP6(s[2779]);
initWPPSPC6(s[2780]);
initWPMORP6(s[2781]);
initWPFFPENT7(s[2782]);
initWPFFDCD7(s[2783]);
initWPFFCUR7(s[2784]);
initWPFFREC7(s[2785]);
initWPFFYBS7(s[2786]);
initWPPENT7(s[2787]);
initWPNEWP7(s[2788]);
initWPPREV7(s[2789]);
initWPCURR7(s[2790]);
initWPLFTP7CH(s[2791]);
initWPLFTP7OF(s[2792]);
initWPLFTP7EL(s[2793]);
initWPLFTP7AF(s[2794]);
initWPLFTP7RT(s[2795]);
initWPLFTP7RE(s[2796]);
initWPLFTP795(s[2797]);
initWPREC7(s[2798]);
initWPRGHX7(s[2799]);
initWPCURP7(s[2800]);
initWPSRUL7(s[2801]);
initWPDPS7(s[2802]);
initWPDCDB7(s[2803]);
initWPCOS7(s[2804]);
initWPNRA7(s[2805]);
initWPBTHA7(s[2806]);
initWPBTHP7(s[2807]);
initWPERA7(s[2808]);
initWPYAER7(s[2809]);
initWPDESP7(s[2810]);
initWPFSAP7(s[2811]);
initWPPLP7(s[2812]);
initWPPLPH7(s[2813]);
initWPLUMP7(s[2814]);
initWPLUM7L(s[2815]);
initWPLUM7U(s[2816]);
initWPLUM7E(s[2817]);
initWPLUM7R(s[2818]);
initWPPTP7(s[2819]);
initWPPSAL7(s[2820]);
initWPASAL7(s[2821]);
initWPASA7L(s[2822]);
initWPASA7U(s[2823]);
initWPASA7E(s[2824]);
initWPASA7R(s[2825]);
initWPYBS7(s[2826]);
initWPERC7(s[2827]);
initWPMC7(s[2828]);
initWPMCA7(s[2829]);
initWPPERC7(s[2830]);
initWPMFRC7(s[2831]);
initWPACON7(s[2832]);
initWPADY7(s[2833]);
initWPMMIN7(s[2834]);
initWPACOA7(s[2835]);
initWPACOB7(s[2836]);
initWPACOC7(s[2837]);
initWPFRAS7(s[2838]);
initWPCONY7(s[2839]);
initWPPCON7(s[2840]);
initWPYCAT7(s[2841]);
initWPYCA7(s[2842]);
initWPMCAF7(s[2843]);
initWPYFRA7(s[2844]);
initWPLCOY7(s[2845]);
initWPLCOM7(s[2846]);
initWPNIRR7(s[2847]);
initWPMCON7(s[2848]);
initWPAC7(s[2849]);
initWPFSC7(s[2850]);
initWPRCON7(s[2851]);
initWPRC7MO(s[2852]);
initWPRC7RE(s[2853]);
initWPRC7ST(s[2854]);
initWPRC7RI(s[2855]);
initWPRC7PU(s[2856]);
initWPRC795(s[2857]);
initWPRCM7MO(s[2858]);
initWPRCM7RE(s[2859]);
initWPRCM7ST(s[2860]);
initWPRCM7RI(s[2861]);
initWPRCM7PU(s[2862]);
initWPRCM7OH(s[2863]);
initWPRCM7UN(s[2864]);
initWPRCM7AF(s[2865]);
initWPRCM7NK(s[2866]);
initWPRCM785(s[2867]);
initWPRCM786(s[2868]);
initWPCEMP7(s[2869]);
initWPECPP7(s[2870]);
initWPAECP7(s[2871]);
initWPEPER7(s[2872]);
initWPFSEC7(s[2873]);
initWPMEC7(s[2874]);
initWPAMEC7(s[2875]);
initWPFSCP7(s[2876]);
initWPFSCO7(s[2877]);
initWPFSAV7(s[2878]);
initWPPFVA7(s[2879]);
initWPPFV7L(s[2880]);
initWPPFV7U(s[2881]);
initWPPFV7E(s[2882]);
initWPPFV7R(s[2883]);
initWPAPF7(s[2884]);
initWPAPF7L(s[2885]);
initWPAPF7U(s[2886]);
initWPAPF7E(s[2887]);
initWPAPF7R(s[2888]);
initWPPTOP7(s[2889]);
initWPPENB7(s[2890]);
initWPPE7TL(s[2891]);
initWPPE7TU(s[2892]);
initWPPE7TE(s[2893]);
initWPPE7TR(s[2894]);
initWPPE7AL(s[2895]);
initWPPE7AU(s[2896]);
initWPPE7AE(s[2897]);
initWPPE7AR(s[2898]);
initWPDPSP7(s[2899]);
initWPERCP7(s[2900]);
initWPDS7(s[2901]);
initWPDE7(s[2902]);
initWPINF7(s[2903]);
initWPPAY7(s[2904]);
initWPPYR7(s[2905]);
initWPPY7WL(s[2906]);
initWPPY7WU(s[2907]);
initWPPY7WE(s[2908]);
initWPPY7WR(s[2909]);
initWPPY7FL(s[2910]);
initWPPY7FU(s[2911]);
initWPPY7FE(s[2912]);
initWPPY7FR(s[2913]);
initWPPY7ML(s[2914]);
initWPPY7MU(s[2915]);
initWPPY7ME(s[2916]);
initWPPY7MR(s[2917]);
initWPPY7YL(s[2918]);
initWPPY7YU(s[2919]);
initWPPY7YE(s[2920]);
initWPPY7YR(s[2921]);
initWPPY7OL(s[2922]);
initWPPY7OU(s[2923]);
initWPPY7OE(s[2924]);
initWPPY7OR(s[2925]);
initWPTAX7(s[2926]);
initWPNEW7(s[2927]);
initWPLUPS7(s[2928]);
initWPLUPA7(s[2929]);
initWPLUA7L(s[2930]);
initWPLUA7U(s[2931]);
initWPLUA7E(s[2932]);
initWPLUA7R(s[2933]);
initWPTAKP7(s[2934]);
initWPINCD7(s[2935]);
initWPINC7L(s[2936]);
initWPINC7U(s[2937]);
initWPINC7E(s[2938]);
initWPINC7R(s[2939]);
initWPIFS7NO(s[2940]);
initWPIFS7EM(s[2941]);
initWPIFS7RE(s[2942]);
initWPIFS7CO(s[2943]);
initWPIFS7PR(s[2944]);
initWPIFS7AC(s[2945]);
initWPIFS7FA(s[2946]);
initWPIFS7RP(s[2947]);
initWPIFS795(s[2948]);
initWPFINF7(s[2949]);
initWPBPSP7(s[2950]);
initWPPSPC7(s[2951]);
initWPMORP7(s[2952]);
initWPANYP(s[2953]);
initWPPSOT(s[2954]);
initWPPSEX(s[2955]);
initWPPSAF(s[2956]);
initWPPSEL(s[2957]);
initWPPS95(s[2958]);
initWPPSMOT(s[2959]);
initWPPSMEX(s[2960]);
initWPPSMAF(s[2961]);
initWPPSMEL(s[2962]);
initWPPSMAL(s[2963]);
initWPPSMAG(s[2964]);
initWPPSMHR(s[2965]);
initWPPSMDL(s[2966]);
initWPPSM85(s[2967]);
initWPPSM86(s[2968]);
initWPEC(s[2969]);
initWPECA(s[2970]);
initWPEXW(s[2971]);
initWPSPOUP(s[2972]);
initWPSPOU(s[2973]);
initIAW1R(s[2974]);
initIAASK(s[2975]);
initIAWORK(s[2976]);
initIASINC(s[2977]);
initIASINCL(s[2978]);
initIASINCU(s[2979]);
initIASINCE(s[2980]);
initIASINCR(s[2981]);
initIASPEN(s[2982]);
initIASPW(s[2983]);
initIASPA(s[2984]);
initIAPAM(s[2985]);
initIAPAMWL(s[2986]);
initIAPAMWU(s[2987]);
initIAPAMWE(s[2988]);
initIAPAMWR(s[2989]);
initIAPAMFL(s[2990]);
initIAPAMFU(s[2991]);
initIAPAMFE(s[2992]);
initIAPAMFR(s[2993]);
initIAPAMML(s[2994]);
initIAPAMMU(s[2995]);
initIAPAMME(s[2996]);
initIAPAMMR(s[2997]);
initIAPAMYL(s[2998]);
initIAPAMYU(s[2999]);
initIAPAMYE(s[3000]);
initIAPAMYR(s[3001]);
initIAPAMOL(s[3002]);
initIAPAMOU(s[3003]);
initIAPAMOE(s[3004]);
initIAPAMOR(s[3005]);
initIAPLY(s[3006]);
initIAPLYW(s[3007]);
initIASPP(s[3008]);
initIAPPAM(s[3009]);
initIAPPAWL(s[3010]);
initIAPPAWU(s[3011]);
initIAPPAWE(s[3012]);
initIAPPAWR(s[3013]);
initIAPPAFL(s[3014]);
initIAPPAFU(s[3015]);
initIAPPAFE(s[3016]);
initIAPPAFR(s[3017]);
initIAPPAML(s[3018]);
initIAPPAMU(s[3019]);
initIAPPAME(s[3020]);
initIAPPAMR(s[3021]);
initIAPPAYL(s[3022]);
initIAPPAYU(s[3023]);
initIAPPAYE(s[3024]);
initIAPPAYR(s[3025]);
initIAPPAOL(s[3026]);
initIAPPAOU(s[3027]);
initIAPPAOE(s[3028]);
initIAPPAOR(s[3029]);
initIAPLYP(s[3030]);
initIAPLW(s[3031]);
initIAPPEN(s[3032]);
initIAPPEI(s[3033]);
initIAPPMO(s[3034]);
initIAPPEIL(s[3035]);
initIAPPEIU(s[3036]);
initIAPPEIE(s[3037]);
initIAPPEIR(s[3038]);
initIAANIN(s[3039]);
initIAAILY(s[3040]);
initIAAIM(s[3041]);
initIAAIML(s[3042]);
initIAAIMU(s[3043]);
initIAAIME(s[3044]);
initIAAIMR(s[3045]);
initIAAIP(s[3046]);
initIAAIPL(s[3047]);
initIAAIPU(s[3048]);
initIAAIPE(s[3049]);
initIAAIPR(s[3050]);
initIAHDB(s[3051]);
initIAHDRIB(s[3052]);
initIAHDRSD(s[3053]);
initIAHDRSP(s[3054]);
initIAHDRAA(s[3055]);
initIAHDRDL(s[3056]);
initIAHDRII(s[3057]);
initIAHDRWD(s[3058]);
initIAHDRCA(s[3059]);
initIAHDR95(s[3060]);
initIAHDR96(s[3061]);
initIAHDRMIB(s[3062]);
initIAHDRMSD(s[3063]);
initIAHDRMSP(s[3064]);
initIAHDRMAA(s[3065]);
initIAHDRMDL(s[3066]);
initIAHDRMII(s[3067]);
initIAHDRMWD(s[3068]);
initIAHDRMCA(s[3069]);
initIAHDRM85(s[3070]);
initIAHDRM86(s[3071]);
initIAHDRMOT(s[3072]);
initIAHDRM96(s[3073]);
initIAHDNIB(s[3074]);
initIAHDNSD(s[3075]);
initIAHDNSP(s[3076]);
initIAHDNAA(s[3077]);
initIAHDNDL(s[3078]);
initIAHDNII(s[3079]);
initIAHDNWD(s[3080]);
initIAHDNCA(s[3081]);
initIAHDN95(s[3082]);
initIAHDN96(s[3083]);
initIAT(s[3084]);
initIAP(s[3085]);
initIAA(s[3086]);
initIAA1WL(s[3087]);
initIAA1WU(s[3088]);
initIAA1WE(s[3089]);
initIAA1WR(s[3090]);
initIAA1FL(s[3091]);
initIAA1FU(s[3092]);
initIAA1FE(s[3093]);
initIAA1FR(s[3094]);
initIAA1ML(s[3095]);
initIAA1MU(s[3096]);
initIAA1ME(s[3097]);
initIAA1MR(s[3098]);
initIAA1YL(s[3099]);
initIAA1YU(s[3100]);
initIAA1YE(s[3101]);
initIAA1YR(s[3102]);
initIAA1OL(s[3103]);
initIAA1OU(s[3104]);
initIAA1OE(s[3105]);
initIAA1OR(s[3106]);
initIALY(s[3107]);
initIAT2(s[3108]);
initIAP2(s[3109]);
initIAA2(s[3110]);
initIAA2WL(s[3111]);
initIAA2WU(s[3112]);
initIAA2WE(s[3113]);
initIAA2WR(s[3114]);
initIAA2FL(s[3115]);
initIAA2FU(s[3116]);
initIAA2FE(s[3117]);
initIAA2FR(s[3118]);
initIAA2ML(s[3119]);
initIAA2MU(s[3120]);
initIAA2ME(s[3121]);
initIAA2MR(s[3122]);
initIAA2YL(s[3123]);
initIAA2YU(s[3124]);
initIAA2YE(s[3125]);
initIAA2YR(s[3126]);
initIAA2OL(s[3127]);
initIAA2OU(s[3128]);
initIAA2OE(s[3129]);
initIAA2OR(s[3130]);
initIALY2(s[3131]);
initIAT3(s[3132]);
initIAP3(s[3133]);
initIAA3(s[3134]);
initIAA3WL(s[3135]);
initIAA3WU(s[3136]);
initIAA3WE(s[3137]);
initIAA3WR(s[3138]);
initIAA3FL(s[3139]);
initIAA3FU(s[3140]);
initIAA3FE(s[3141]);
initIAA3FR(s[3142]);
initIAA3ML(s[3143]);
initIAA3MU(s[3144]);
initIAA3ME(s[3145]);
initIAA3MR(s[3146]);
initIAA3YL(s[3147]);
initIAA3YU(s[3148]);
initIAA3YE(s[3149]);
initIAA3YR(s[3150]);
initIAA3OL(s[3151]);
initIAA3OU(s[3152]);
initIAA3OE(s[3153]);
initIAA3OR(s[3154]);
initIALY3(s[3155]);
initIAT4(s[3156]);
initIAP4(s[3157]);
initIAA4(s[3158]);
initIAA4WL(s[3159]);
initIAA4WU(s[3160]);
initIAA4WE(s[3161]);
initIAA4WR(s[3162]);
initIAA4FL(s[3163]);
initIAA4FU(s[3164]);
initIAA4FE(s[3165]);
initIAA4FR(s[3166]);
initIAA4ML(s[3167]);
initIAA4MU(s[3168]);
initIAA4ME(s[3169]);
initIAA4MR(s[3170]);
initIAA4YL(s[3171]);
initIAA4YU(s[3172]);
initIAA4YE(s[3173]);
initIAA4YR(s[3174]);
initIAA4OL(s[3175]);
initIAA4OU(s[3176]);
initIAA4OE(s[3177]);
initIAA4OR(s[3178]);
initIALY4(s[3179]);
initIAT5(s[3180]);
initIAP5(s[3181]);
initIAA5(s[3182]);
initIAA5WL(s[3183]);
initIAA5WU(s[3184]);
initIAA5WE(s[3185]);
initIAA5WR(s[3186]);
initIAA5FL(s[3187]);
initIAA5FU(s[3188]);
initIAA5FE(s[3189]);
initIAA5FR(s[3190]);
initIAA5ML(s[3191]);
initIAA5MU(s[3192]);
initIAA5ME(s[3193]);
initIAA5MR(s[3194]);
initIAA5YL(s[3195]);
initIAA5YU(s[3196]);
initIAA5YE(s[3197]);
initIAA5YR(s[3198]);
initIAA5OL(s[3199]);
initIAA5OU(s[3200]);
initIAA5OE(s[3201]);
initIAA5OR(s[3202]);
initIALY5(s[3203]);
initIAT6(s[3204]);
initIAP6(s[3205]);
initIAA6(s[3206]);
initIAA6WL(s[3207]);
initIAA6WU(s[3208]);
initIAA6WE(s[3209]);
initIAA6WR(s[3210]);
initIAA6FL(s[3211]);
initIAA6FU(s[3212]);
initIAA6FE(s[3213]);
initIAA6FR(s[3214]);
initIAA6ML(s[3215]);
initIAA6MU(s[3216]);
initIAA6ME(s[3217]);
initIAA6MR(s[3218]);
initIAA6YL(s[3219]);
initIAA6YU(s[3220]);
initIAA6YE(s[3221]);
initIAA6YR(s[3222]);
initIAA6OL(s[3223]);
initIAA6OU(s[3224]);
initIAA6OE(s[3225]);
initIAA6OR(s[3226]);
initIALY6(s[3227]);
initIAT7(s[3228]);
initIAP7(s[3229]);
initIAA7(s[3230]);
initIAA7WL(s[3231]);
initIAA7WU(s[3232]);
initIAA7WE(s[3233]);
initIAA7WR(s[3234]);
initIAA7FL(s[3235]);
initIAA7FU(s[3236]);
initIAA7FE(s[3237]);
initIAA7FR(s[3238]);
initIAA7ML(s[3239]);
initIAA7MU(s[3240]);
initIAA7ME(s[3241]);
initIAA7MR(s[3242]);
initIAA7YL(s[3243]);
initIAA7YU(s[3244]);
initIAA7YE(s[3245]);
initIAA7YR(s[3246]);
initIAA7OL(s[3247]);
initIAA7OU(s[3248]);
initIAA7OE(s[3249]);
initIAA7OR(s[3250]);
initIALY7(s[3251]);
initIAT8(s[3252]);
initIAP8(s[3253]);
initIAA8(s[3254]);
initIAA8WL(s[3255]);
initIAA8WU(s[3256]);
initIAA8WE(s[3257]);
initIAA8WR(s[3258]);
initIAA8FL(s[3259]);
initIAA8FU(s[3260]);
initIAA8FE(s[3261]);
initIAA8FR(s[3262]);
initIAA8ML(s[3263]);
initIAA8MU(s[3264]);
initIAA8ME(s[3265]);
initIAA8MR(s[3266]);
initIAA8YL(s[3267]);
initIAA8YU(s[3268]);
initIAA8YE(s[3269]);
initIAA8YR(s[3270]);
initIAA8OL(s[3271]);
initIAA8OU(s[3272]);
initIAA8OE(s[3273]);
initIAA8OR(s[3274]);
initIALY8(s[3275]);
initIAT9(s[3276]);
initIAP9(s[3277]);
initIAA9(s[3278]);
initIAA9WL(s[3279]);
initIAA9WU(s[3280]);
initIAA9WE(s[3281]);
initIAA9WR(s[3282]);
initIAA9FL(s[3283]);
initIAA9FU(s[3284]);
initIAA9FE(s[3285]);
initIAA9FR(s[3286]);
initIAA9ML(s[3287]);
initIAA9MU(s[3288]);
initIAA9ME(s[3289]);
initIAA9MR(s[3290]);
initIAA9YL(s[3291]);
initIAA9YU(s[3292]);
initIAA9YE(s[3293]);
initIAA9YR(s[3294]);
initIAA9OL(s[3295]);
initIAA9OU(s[3296]);
initIAA9OE(s[3297]);
initIAA9OR(s[3298]);
initIALY9(s[3299]);
initIAT10(s[3300]);
initIAP10(s[3301]);
initIAA10(s[3302]);
initIAA10WL(s[3303]);
initIAA10WU(s[3304]);
initIAA10WE(s[3305]);
initIAA10WR(s[3306]);
initIAA10FL(s[3307]);
initIAA10FU(s[3308]);
initIAA10FE(s[3309]);
initIAA10FR(s[3310]);
initIAA10ML(s[3311]);
initIAA10MU(s[3312]);
initIAA10ME(s[3313]);
initIAA10MR(s[3314]);
initIAA10YL(s[3315]);
initIAA10YU(s[3316]);
initIAA10YE(s[3317]);
initIAA10YR(s[3318]);
initIAA10OL(s[3319]);
initIAA10OU(s[3320]);
initIAA10OE(s[3321]);
initIAA10OR(s[3322]);
initIALY10(s[3323]);
initIAB10(s[3324]);
initIABW10(s[3325]);
initIABM10(s[3326]);
initIAT11(s[3327]);
initIAP11(s[3328]);
initIAA11(s[3329]);
initIAA11WL(s[3330]);
initIAA11WU(s[3331]);
initIAA11WE(s[3332]);
initIAA11WR(s[3333]);
initIAA11FL(s[3334]);
initIAA11FU(s[3335]);
initIAA11FE(s[3336]);
initIAA11FR(s[3337]);
initIAA11ML(s[3338]);
initIAA11MU(s[3339]);
initIAA11ME(s[3340]);
initIAA11MR(s[3341]);
initIAA11YL(s[3342]);
initIAA11YU(s[3343]);
initIAA11YE(s[3344]);
initIAA11YR(s[3345]);
initIAA11OL(s[3346]);
initIAA11OU(s[3347]);
initIAA11OE(s[3348]);
initIAA11OR(s[3349]);
initIALY11(s[3350]);
initIAB11(s[3351]);
initIABW11(s[3352]);
initIABM11(s[3353]);
initIAT12(s[3354]);
initIAP12(s[3355]);
initIAA12(s[3356]);
initIAA12WL(s[3357]);
initIAA12WU(s[3358]);
initIAA12WE(s[3359]);
initIAA12WR(s[3360]);
initIAA12FL(s[3361]);
initIAA12FU(s[3362]);
initIAA12FE(s[3363]);
initIAA12FR(s[3364]);
initIAA12ML(s[3365]);
initIAA12MU(s[3366]);
initIAA12ME(s[3367]);
initIAA12MR(s[3368]);
initIAA12YL(s[3369]);
initIAA12YU(s[3370]);
initIAA12YE(s[3371]);
initIAA12YR(s[3372]);
initIAA12OL(s[3373]);
initIAA12OU(s[3374]);
initIAA12OE(s[3375]);
initIAA12OR(s[3376]);
initIALY12(s[3377]);
initIAB12(s[3378]);
initIABW12(s[3379]);
initIABM12(s[3380]);
initIAT13(s[3381]);
initIAP13(s[3382]);
initIAA13(s[3383]);
initIAA13WL(s[3384]);
initIAA13WU(s[3385]);
initIAA13WE(s[3386]);
initIAA13WR(s[3387]);
initIAA13FL(s[3388]);
initIAA13FU(s[3389]);
initIAA13FE(s[3390]);
initIAA13FR(s[3391]);
initIAA13ML(s[3392]);
initIAA13MU(s[3393]);
initIAA13ME(s[3394]);
initIAA13MR(s[3395]);
initIAA13YL(s[3396]);
initIAA13YU(s[3397]);
initIAA13YE(s[3398]);
initIAA13YR(s[3399]);
initIAA13OL(s[3400]);
initIAA13OU(s[3401]);
initIAA13OE(s[3402]);
initIAA13OR(s[3403]);
initIALY13(s[3404]);
initIAB13(s[3405]);
initIABW13(s[3406]);
initIABM13(s[3407]);
initIAT14(s[3408]);
initIAP14(s[3409]);
initIAA14(s[3410]);
initIAA14WL(s[3411]);
initIAA14WU(s[3412]);
initIAA14WE(s[3413]);
initIAA14WR(s[3414]);
initIAA14FL(s[3415]);
initIAA14FU(s[3416]);
initIAA14FE(s[3417]);
initIAA14FR(s[3418]);
initIAA14ML(s[3419]);
initIAA14MU(s[3420]);
initIAA14ME(s[3421]);
initIAA14MR(s[3422]);
initIAA14YL(s[3423]);
initIAA14YU(s[3424]);
initIAA14YE(s[3425]);
initIAA14YR(s[3426]);
initIAA14OL(s[3427]);
initIAA14OU(s[3428]);
initIAA14OE(s[3429]);
initIAA14OR(s[3430]);
initIALY14(s[3431]);
initIAB14(s[3432]);
initIABW14(s[3433]);
initIABM14(s[3434]);
initIAT15(s[3435]);
initIAP15(s[3436]);
initIAA15(s[3437]);
initIAA15WL(s[3438]);
initIAA15WU(s[3439]);
initIAA15WE(s[3440]);
initIAA15WR(s[3441]);
initIAA15FL(s[3442]);
initIAA15FU(s[3443]);
initIAA15FE(s[3444]);
initIAA15FR(s[3445]);
initIAA15ML(s[3446]);
initIAA15MU(s[3447]);
initIAA15ME(s[3448]);
initIAA15MR(s[3449]);
initIAA15YL(s[3450]);
initIAA15YU(s[3451]);
initIAA15YE(s[3452]);
initIAA15YR(s[3453]);
initIAA15OL(s[3454]);
initIAA15OU(s[3455]);
initIAA15OE(s[3456]);
initIAA15OR(s[3457]);
initIALY15(s[3458]);
initIAB15(s[3459]);
initIABW15(s[3460]);
initIABM15(s[3461]);
initIAT16(s[3462]);
initIAP16(s[3463]);
initIAA16(s[3464]);
initIAA16WL(s[3465]);
initIAA16WU(s[3466]);
initIAA16WE(s[3467]);
initIAA16WR(s[3468]);
initIAA16FL(s[3469]);
initIAA16FU(s[3470]);
initIAA16FE(s[3471]);
initIAA16FR(s[3472]);
initIAA16ML(s[3473]);
initIAA16MU(s[3474]);
initIAA16ME(s[3475]);
initIAA16MR(s[3476]);
initIAA16YL(s[3477]);
initIAA16YU(s[3478]);
initIAA16YE(s[3479]);
initIAA16YR(s[3480]);
initIAA16OL(s[3481]);
initIAA16OU(s[3482]);
initIAA16OE(s[3483]);
initIAA16OR(s[3484]);
initIALY16(s[3485]);
initIAB16(s[3486]);
initIABW16(s[3487]);
initIABM16(s[3488]);
initIAT17(s[3489]);
initIAP17(s[3490]);
initIAA17(s[3491]);
initIAA17WL(s[3492]);
initIAA17WU(s[3493]);
initIAA17WE(s[3494]);
initIAA17WR(s[3495]);
initIAA17FL(s[3496]);
initIAA17FU(s[3497]);
initIAA17FE(s[3498]);
initIAA17FR(s[3499]);
initIAA17ML(s[3500]);
initIAA17MU(s[3501]);
initIAA17ME(s[3502]);
initIAA17MR(s[3503]);
initIAA17YL(s[3504]);
initIAA17YU(s[3505]);
initIAA17YE(s[3506]);
initIAA17YR(s[3507]);
initIAA17OL(s[3508]);
initIAA17OU(s[3509]);
initIAA17OE(s[3510]);
initIAA17OR(s[3511]);
initIALY17(s[3512]);
initIAB17(s[3513]);
initIABW17(s[3514]);
initIABM17(s[3515]);
initIAT18(s[3516]);
initIAP18(s[3517]);
initIAA18(s[3518]);
initIAA18WL(s[3519]);
initIAA18WU(s[3520]);
initIAA18WE(s[3521]);
initIAA18WR(s[3522]);
initIAA18FL(s[3523]);
initIAA18FU(s[3524]);
initIAA18FE(s[3525]);
initIAA18FR(s[3526]);
initIAA18ML(s[3527]);
initIAA18MU(s[3528]);
initIAA18ME(s[3529]);
initIAA18MR(s[3530]);
initIAA18YL(s[3531]);
initIAA18YU(s[3532]);
initIAA18YE(s[3533]);
initIAA18YR(s[3534]);
initIAA18OL(s[3535]);
initIAA18OU(s[3536]);
initIAA18OE(s[3537]);
initIAA18OR(s[3538]);
initIALY18(s[3539]);
initIAB18(s[3540]);
initIABW18(s[3541]);
initIABM18(s[3542]);
initIAHDPIB(s[3543]);
initIAHDPSD(s[3544]);
initIAHDPSP(s[3545]);
initIAHDPAA(s[3546]);
initIAHDPDL(s[3547]);
initIAHDPII(s[3548]);
initIAHDPWD(s[3549]);
initIAHDPCA(s[3550]);
initIAHDP95(s[3551]);
initIAHDP96(s[3552]);
initIAHDPMIB(s[3553]);
initIAHDPMSD(s[3554]);
initIAHDPMSP(s[3555]);
initIAHDPMAA(s[3556]);
initIAHDPMDL(s[3557]);
initIAHDPMII(s[3558]);
initIAHDPMWD(s[3559]);
initIAHDPMCA(s[3560]);
initIAHDPM85(s[3561]);
initIAHDPM86(s[3562]);
initIAHDPM96(s[3563]);
initIAHDPNIB(s[3564]);
initIAHDPNSD(s[3565]);
initIAHDPNSP(s[3566]);
initIAHDPNAA(s[3567]);
initIAHDPNDL(s[3568]);
initIAHDPNII(s[3569]);
initIAHDPNWD(s[3570]);
initIAHDPNCA(s[3571]);
initIAHDPN85(s[3572]);
initIAHDPN96(s[3573]);
initIAT19(s[3574]);
initIAP19(s[3575]);
initIAA19(s[3576]);
initIAA19WL(s[3577]);
initIAA19WU(s[3578]);
initIAA19WE(s[3579]);
initIAA19WR(s[3580]);
initIAA19FL(s[3581]);
initIAA19FU(s[3582]);
initIAA19FE(s[3583]);
initIAA19FR(s[3584]);
initIAA19ML(s[3585]);
initIAA19MU(s[3586]);
initIAA19ME(s[3587]);
initIAA19MR(s[3588]);
initIAA19YL(s[3589]);
initIAA19YU(s[3590]);
initIAA19YE(s[3591]);
initIAA19YR(s[3592]);
initIAA19OL(s[3593]);
initIAA19OU(s[3594]);
initIAA19OE(s[3595]);
initIAA19OR(s[3596]);
initIALY19(s[3597]);
initIALM19(s[3598]);
initIAT20(s[3599]);
initIAP20(s[3600]);
initIAA20(s[3601]);
initIAA20WL(s[3602]);
initIAA20WU(s[3603]);
initIAA20WE(s[3604]);
initIAA20WR(s[3605]);
initIAA20FL(s[3606]);
initIAA20FU(s[3607]);
initIAA20FE(s[3608]);
initIAA20FR(s[3609]);
initIAA20ML(s[3610]);
initIAA20MU(s[3611]);
initIAA20ME(s[3612]);
initIAA20MR(s[3613]);
initIAA20YL(s[3614]);
initIAA20YU(s[3615]);
initIAA20YE(s[3616]);
initIAA20YR(s[3617]);
initIAA20OL(s[3618]);
initIAA20OU(s[3619]);
initIAA20OE(s[3620]);
initIAA20OR(s[3621]);
initIALY20(s[3622]);
initIALM20(s[3623]);
initIAT21(s[3624]);
initIAP21(s[3625]);
initIAA21(s[3626]);
initIAA21WL(s[3627]);
initIAA21WU(s[3628]);
initIAA21WE(s[3629]);
initIAA21WR(s[3630]);
initIAA21FL(s[3631]);
initIAA21FU(s[3632]);
initIAA21FE(s[3633]);
initIAA21FR(s[3634]);
initIAA21ML(s[3635]);
initIAA21MU(s[3636]);
initIAA21ME(s[3637]);
initIAA21MR(s[3638]);
initIAA21YL(s[3639]);
initIAA21YU(s[3640]);
initIAA21YE(s[3641]);
initIAA21YR(s[3642]);
initIAA21OL(s[3643]);
initIAA21OU(s[3644]);
initIAA21OE(s[3645]);
initIAA21OR(s[3646]);
initIALY21(s[3647]);
initIALM21(s[3648]);
initIAT22(s[3649]);
initIAP22(s[3650]);
initIAA22(s[3651]);
initIAA22WL(s[3652]);
initIAA22WU(s[3653]);
initIAA22WE(s[3654]);
initIAA22WR(s[3655]);
initIAA22FL(s[3656]);
initIAA22FU(s[3657]);
initIAA22FE(s[3658]);
initIAA22FR(s[3659]);
initIAA22ML(s[3660]);
initIAA22MU(s[3661]);
initIAA22ME(s[3662]);
initIAA22MR(s[3663]);
initIAA22YL(s[3664]);
initIAA22YU(s[3665]);
initIAA22YE(s[3666]);
initIAA22YR(s[3667]);
initIAA22OL(s[3668]);
initIAA22OU(s[3669]);
initIAA22OE(s[3670]);
initIAA22OR(s[3671]);
initIALY22(s[3672]);
initIALM22(s[3673]);
initIAT23(s[3674]);
initIAP23(s[3675]);
initIAA23(s[3676]);
initIAA23WL(s[3677]);
initIAA23WU(s[3678]);
initIAA23WE(s[3679]);
initIAA23WR(s[3680]);
initIAA23FL(s[3681]);
initIAA23FU(s[3682]);
initIAA23FE(s[3683]);
initIAA23FR(s[3684]);
initIAA23ML(s[3685]);
initIAA23MU(s[3686]);
initIAA23ME(s[3687]);
initIAA23MR(s[3688]);
initIAA23YL(s[3689]);
initIAA23YU(s[3690]);
initIAA23YE(s[3691]);
initIAA23YR(s[3692]);
initIAA23OL(s[3693]);
initIAA23OU(s[3694]);
initIAA23OE(s[3695]);
initIAA23OR(s[3696]);
initIALY23(s[3697]);
initIALM23(s[3698]);
initIAT24(s[3699]);
initIAP24(s[3700]);
initIAA24(s[3701]);
initIAA24WL(s[3702]);
initIAA24WU(s[3703]);
initIAA24WE(s[3704]);
initIAA24WR(s[3705]);
initIAA24FL(s[3706]);
initIAA24FU(s[3707]);
initIAA24FE(s[3708]);
initIAA24FR(s[3709]);
initIAA24ML(s[3710]);
initIAA24MU(s[3711]);
initIAA24ME(s[3712]);
initIAA24MR(s[3713]);
initIAA24YL(s[3714]);
initIAA24YU(s[3715]);
initIAA24YE(s[3716]);
initIAA24YR(s[3717]);
initIAA24OL(s[3718]);
initIAA24OU(s[3719]);
initIAA24OE(s[3720]);
initIAA24OR(s[3721]);
initIALY24(s[3722]);
initIALM24(s[3723]);
initIAT25(s[3724]);
initIAP25(s[3725]);
initIAA25(s[3726]);
initIAA25WL(s[3727]);
initIAA25WU(s[3728]);
initIAA25WE(s[3729]);
initIAA25WR(s[3730]);
initIAA25FL(s[3731]);
initIAA25FU(s[3732]);
initIAA25FE(s[3733]);
initIAA25FR(s[3734]);
initIAA25ML(s[3735]);
initIAA25MU(s[3736]);
initIAA25ME(s[3737]);
initIAA25MR(s[3738]);
initIAA25YL(s[3739]);
initIAA25YU(s[3740]);
initIAA25YE(s[3741]);
initIAA25YR(s[3742]);
initIAA25OL(s[3743]);
initIAA25OU(s[3744]);
initIAA25OE(s[3745]);
initIAA25OR(s[3746]);
initIALY25(s[3747]);
initIALM25(s[3748]);
initIAT26(s[3749]);
initIAP26(s[3750]);
initIAA26(s[3751]);
initIAA26WL(s[3752]);
initIAA26WU(s[3753]);
initIAA26WE(s[3754]);
initIAA26WR(s[3755]);
initIAA26FL(s[3756]);
initIAA26FU(s[3757]);
initIAA26FE(s[3758]);
initIAA26FR(s[3759]);
initIAA26ML(s[3760]);
initIAA26MU(s[3761]);
initIAA26ME(s[3762]);
initIAA26MR(s[3763]);
initIAA26YL(s[3764]);
initIAA26YU(s[3765]);
initIAA26YE(s[3766]);
initIAA26YR(s[3767]);
initIAA26OL(s[3768]);
initIAA26OU(s[3769]);
initIAA26OE(s[3770]);
initIAA26OR(s[3771]);
initIALY26(s[3772]);
initIALM26(s[3773]);
initIAT27(s[3774]);
initIAP27(s[3775]);
initIAA27(s[3776]);
initIAA27WL(s[3777]);
initIAA27WU(s[3778]);
initIAA27WE(s[3779]);
initIAA27WR(s[3780]);
initIAA27FL(s[3781]);
initIAA27FU(s[3782]);
initIAA27FE(s[3783]);
initIAA27FR(s[3784]);
initIAA27ML(s[3785]);
initIAA27MU(s[3786]);
initIAA27ME(s[3787]);
initIAA27MR(s[3788]);
initIAA27YL(s[3789]);
initIAA27YU(s[3790]);
initIAA27YE(s[3791]);
initIAA27YR(s[3792]);
initIAA27OL(s[3793]);
initIAA27OU(s[3794]);
initIAA27OE(s[3795]);
initIAA27OR(s[3796]);
initIALY27(s[3797]);
initIALM27(s[3798]);
initIAT28(s[3799]);
initIAP28(s[3800]);
initIAA28(s[3801]);
initIAA28WL(s[3802]);
initIAA28WU(s[3803]);
initIAA28WE(s[3804]);
initIAA28WR(s[3805]);
initIAA28FL(s[3806]);
initIAA28FU(s[3807]);
initIAA28FE(s[3808]);
initIAA28FR(s[3809]);
initIAA28ML(s[3810]);
initIAA28MU(s[3811]);
initIAA28ME(s[3812]);
initIAA28MR(s[3813]);
initIAA28YL(s[3814]);
initIAA28YU(s[3815]);
initIAA28YE(s[3816]);
initIAA28YR(s[3817]);
initIAA28OL(s[3818]);
initIAA28OU(s[3819]);
initIAA28OE(s[3820]);
initIAA28OR(s[3821]);
initIALY28(s[3822]);
initIAB28(s[3823]);
initIABW28(s[3824]);
initIABM28(s[3825]);
initIAT29(s[3826]);
initIAP29(s[3827]);
initIAA29(s[3828]);
initIAA29WL(s[3829]);
initIAA29WU(s[3830]);
initIAA29WE(s[3831]);
initIAA29WR(s[3832]);
initIAA29FL(s[3833]);
initIAA29FU(s[3834]);
initIAA29FE(s[3835]);
initIAA29FR(s[3836]);
initIAA29ML(s[3837]);
initIAA29MU(s[3838]);
initIAA29ME(s[3839]);
initIAA29MR(s[3840]);
initIAA29YL(s[3841]);
initIAA29YU(s[3842]);
initIAA29YE(s[3843]);
initIAA29YR(s[3844]);
initIAA29OL(s[3845]);
initIAA29OU(s[3846]);
initIAA29OE(s[3847]);
initIAA29OR(s[3848]);
initIALY29(s[3849]);
initIAB29(s[3850]);
initIABW29(s[3851]);
initIABM29(s[3852]);
initIAT30(s[3853]);
initIAP30(s[3854]);
initIAA30(s[3855]);
initIAA30WL(s[3856]);
initIAA30WU(s[3857]);
initIAA30WE(s[3858]);
initIAA30WR(s[3859]);
initIAA30FL(s[3860]);
initIAA30FU(s[3861]);
initIAA30FE(s[3862]);
initIAA30FR(s[3863]);
initIAA30ML(s[3864]);
initIAA30MU(s[3865]);
initIAA30ME(s[3866]);
initIAA30MR(s[3867]);
initIAA30YL(s[3868]);
initIAA30YU(s[3869]);
initIAA30YE(s[3870]);
initIAA30YR(s[3871]);
initIAA30OL(s[3872]);
initIAA30OU(s[3873]);
initIAA30OE(s[3874]);
initIAA30OR(s[3875]);
initIALY30(s[3876]);
initIAB30(s[3877]);
initIABW30(s[3878]);
initIABM30(s[3879]);
initIAT31(s[3880]);
initIAP31(s[3881]);
initIAA31(s[3882]);
initIAA31WL(s[3883]);
initIAA31WU(s[3884]);
initIAA31WE(s[3885]);
initIAA31WR(s[3886]);
initIAA31FL(s[3887]);
initIAA31FU(s[3888]);
initIAA31FE(s[3889]);
initIAA31FR(s[3890]);
initIAA31ML(s[3891]);
initIAA31MU(s[3892]);
initIAA31ME(s[3893]);
initIAA31MR(s[3894]);
initIAA31YL(s[3895]);
initIAA31YU(s[3896]);
initIAA31YE(s[3897]);
initIAA31YR(s[3898]);
initIAA31OL(s[3899]);
initIAA31OU(s[3900]);
initIAA31OE(s[3901]);
initIAA31OR(s[3902]);
initIALY31(s[3903]);
initIAB31(s[3904]);
initIABW31(s[3905]);
initIABM31(s[3906]);
initIAT32(s[3907]);
initIAP32(s[3908]);
initIAA32(s[3909]);
initIAA32WL(s[3910]);
initIAA32WU(s[3911]);
initIAA32WE(s[3912]);
initIAA32WR(s[3913]);
initIAA32FL(s[3914]);
initIAA32FU(s[3915]);
initIAA32FE(s[3916]);
initIAA32FR(s[3917]);
initIAA32ML(s[3918]);
initIAA32MU(s[3919]);
initIAA32ME(s[3920]);
initIAA32MR(s[3921]);
initIAA32YL(s[3922]);
initIAA32YU(s[3923]);
initIAA32YE(s[3924]);
initIAA32YR(s[3925]);
initIAA32OL(s[3926]);
initIAA32OU(s[3927]);
initIAA32OE(s[3928]);
initIAA32OR(s[3929]);
initIALY32(s[3930]);
initIAB32(s[3931]);
initIABW32(s[3932]);
initIABM32(s[3933]);
initIAT33(s[3934]);
initIAP33(s[3935]);
initIAA33(s[3936]);
initIAA33WL(s[3937]);
initIAA33WU(s[3938]);
initIAA33WE(s[3939]);
initIAA33WR(s[3940]);
initIAA33FL(s[3941]);
initIAA33FU(s[3942]);
initIAA33FE(s[3943]);
initIAA33FR(s[3944]);
initIAA33ML(s[3945]);
initIAA33MU(s[3946]);
initIAA33ME(s[3947]);
initIAA33MR(s[3948]);
initIAA33YL(s[3949]);
initIAA33YU(s[3950]);
initIAA33YE(s[3951]);
initIAA33YR(s[3952]);
initIAA33OL(s[3953]);
initIAA33OU(s[3954]);
initIAA33OE(s[3955]);
initIAA33OR(s[3956]);
initIALY33(s[3957]);
initIAB33(s[3958]);
initIABW33(s[3959]);
initIABM33(s[3960]);
initIAT34(s[3961]);
initIAP34(s[3962]);
initIAA34(s[3963]);
initIAA34WL(s[3964]);
initIAA34WU(s[3965]);
initIAA34WE(s[3966]);
initIAA34WR(s[3967]);
initIAA34FL(s[3968]);
initIAA34FU(s[3969]);
initIAA34FE(s[3970]);
initIAA34FR(s[3971]);
initIAA34ML(s[3972]);
initIAA34MU(s[3973]);
initIAA34ME(s[3974]);
initIAA34MR(s[3975]);
initIAA34YL(s[3976]);
initIAA34YU(s[3977]);
initIAA34YE(s[3978]);
initIAA34YR(s[3979]);
initIAA34OL(s[3980]);
initIAA34OU(s[3981]);
initIAA34OE(s[3982]);
initIAA34OR(s[3983]);
initIALY34(s[3984]);
initIAB34(s[3985]);
initIABW34(s[3986]);
initIABM34(s[3987]);
initIAT35(s[3988]);
initIAP35(s[3989]);
initIAA35(s[3990]);
initIAA35WL(s[3991]);
initIAA35WU(s[3992]);
initIAA35WE(s[3993]);
initIAA35WR(s[3994]);
initIAA35FL(s[3995]);
initIAA35FU(s[3996]);
initIAA35FE(s[3997]);
initIAA35FR(s[3998]);
initIAA35ML(s[3999]);
initIAA35MU(s[4000]);
initIAA35ME(s[4001]);
initIAA35MR(s[4002]);
initIAA35YL(s[4003]);
initIAA35YU(s[4004]);
initIAA35YE(s[4005]);
initIAA35YR(s[4006]);
initIAA35OL(s[4007]);
initIAA35OU(s[4008]);
initIAA35OE(s[4009]);
initIAA35OR(s[4010]);
initIALY35(s[4011]);
initIAB35(s[4012]);
initIABW35(s[4013]);
initIABM35(s[4014]);
initIAT36(s[4015]);
initIAP36(s[4016]);
initIAA36(s[4017]);
initIAA36WL(s[4018]);
initIAA36WU(s[4019]);
initIAA36WE(s[4020]);
initIAA36WR(s[4021]);
initIAA36FL(s[4022]);
initIAA36FU(s[4023]);
initIAA36FE(s[4024]);
initIAA36FR(s[4025]);
initIAA36ML(s[4026]);
initIAA36MU(s[4027]);
initIAA36ME(s[4028]);
initIAA36MR(s[4029]);
initIAA36YL(s[4030]);
initIAA36YU(s[4031]);
initIAA36YE(s[4032]);
initIAA36YR(s[4033]);
initIAA36OL(s[4034]);
initIAA36OU(s[4035]);
initIAA36OE(s[4036]);
initIAA36OR(s[4037]);
initIALY36(s[4038]);
initIAB36(s[4039]);
initIABW36(s[4040]);
initIABM36(s[4041]);
initIABEB(s[4042]);
initIABERIS(s[4043]);
initIABERPC(s[4044]);
initIABERTC(s[4045]);
initIABERJA(s[4046]);
initIABERGA(s[4047]);
initIABERWP(s[4048]);
initIABERCB(s[4049]);
initIABERCC(s[4050]);
initIABER95(s[4051]);
initIABER96(s[4052]);
initIABERMIS(s[4053]);
initIABERMPC(s[4054]);
initIABERMTC(s[4055]);
initIABERMJA(s[4056]);
initIABERMGA(s[4057]);
initIABERMWP(s[4058]);
initIABERMCB(s[4059]);
initIABERMCC(s[4060]);
initIABERMFP(s[4061]);
initIABERM85(s[4062]);
initIABERM86(s[4063]);
initIABERM96(s[4064]);
initIABENIS(s[4065]);
initIABENPC(s[4066]);
initIABENTC(s[4067]);
initIABENJA(s[4068]);
initIABENGA(s[4069]);
initIABENWP(s[4070]);
initIABENCB(s[4071]);
initIABENCC(s[4072]);
initIABEN95(s[4073]);
initIABEN96(s[4074]);
initIAT37(s[4075]);
initIAP37(s[4076]);
initIAA37(s[4077]);
initIAA37WL(s[4078]);
initIAA37WU(s[4079]);
initIAA37WE(s[4080]);
initIAA37WR(s[4081]);
initIAA37FL(s[4082]);
initIAA37FU(s[4083]);
initIAA37FE(s[4084]);
initIAA37FR(s[4085]);
initIAA37ML(s[4086]);
initIAA37MU(s[4087]);
initIAA37ME(s[4088]);
initIAA37MR(s[4089]);
initIAA37YL(s[4090]);
initIAA37YU(s[4091]);
initIAA37YE(s[4092]);
initIAA37YR(s[4093]);
initIAA37OL(s[4094]);
initIAA37OU(s[4095]);
initIAA37OE(s[4096]);
initIAA37OR(s[4097]);
initIALY37(s[4098]);
initIALM37(s[4099]);
initIAT38(s[4100]);
initIAP38(s[4101]);
initIAA38(s[4102]);
initIAA38WL(s[4103]);
initIAA38WU(s[4104]);
initIAA38WE(s[4105]);
initIAA38WR(s[4106]);
initIAA38FL(s[4107]);
initIAA38FU(s[4108]);
initIAA38FE(s[4109]);
initIAA38FR(s[4110]);
initIAA38ML(s[4111]);
initIAA38MU(s[4112]);
initIAA38ME(s[4113]);
initIAA38MR(s[4114]);
initIAA38YL(s[4115]);
initIAA38YU(s[4116]);
initIAA38YE(s[4117]);
initIAA38YR(s[4118]);
initIAA38OL(s[4119]);
initIAA38OU(s[4120]);
initIAA38OE(s[4121]);
initIAA38OR(s[4122]);
initIALY38(s[4123]);
initIALM38(s[4124]);
initIAT39(s[4125]);
initIAP39(s[4126]);
initIAA39(s[4127]);
initIAA39WL(s[4128]);
initIAA39WU(s[4129]);
initIAA39WE(s[4130]);
initIAA39WR(s[4131]);
initIAA39FL(s[4132]);
initIAA39FU(s[4133]);
initIAA39FE(s[4134]);
initIAA39FR(s[4135]);
initIAA39ML(s[4136]);
initIAA39MU(s[4137]);
initIAA39ME(s[4138]);
initIAA39MR(s[4139]);
initIAA39YL(s[4140]);
initIAA39YU(s[4141]);
initIAA39YE(s[4142]);
initIAA39YR(s[4143]);
initIAA39OL(s[4144]);
initIAA39OU(s[4145]);
initIAA39OE(s[4146]);
initIAA39OR(s[4147]);
initIALY39(s[4148]);
initIALM39(s[4149]);
initIAT40(s[4150]);
initIAP40(s[4151]);
initIAA40(s[4152]);
initIAA40WL(s[4153]);
initIAA40WU(s[4154]);
initIAA40WE(s[4155]);
initIAA40WR(s[4156]);
initIAA40FL(s[4157]);
initIAA40FU(s[4158]);
initIAA40FE(s[4159]);
initIAA40FR(s[4160]);
initIAA40ML(s[4161]);
initIAA40MU(s[4162]);
initIAA40ME(s[4163]);
initIAA40MR(s[4164]);
initIAA40YL(s[4165]);
initIAA40YU(s[4166]);
initIAA40YE(s[4167]);
initIAA40YR(s[4168]);
initIAA40OL(s[4169]);
initIAA40OU(s[4170]);
initIAA40OE(s[4171]);
initIAA40OR(s[4172]);
initIALY40(s[4173]);
initIALM40(s[4174]);
initIAT41(s[4175]);
initIAP41(s[4176]);
initIAA41(s[4177]);
initIAA41WL(s[4178]);
initIAA41WU(s[4179]);
initIAA41WE(s[4180]);
initIAA41WR(s[4181]);
initIAA41FL(s[4182]);
initIAA41FU(s[4183]);
initIAA41FE(s[4184]);
initIAA41FR(s[4185]);
initIAA41ML(s[4186]);
initIAA41MU(s[4187]);
initIAA41ME(s[4188]);
initIAA41MR(s[4189]);
initIAA41YL(s[4190]);
initIAA41YU(s[4191]);
initIAA41YE(s[4192]);
initIAA41YR(s[4193]);
initIAA41OL(s[4194]);
initIAA41OU(s[4195]);
initIAA41OE(s[4196]);
initIAA41OR(s[4197]);
initIALY41(s[4198]);
initIALM41(s[4199]);
initIAT42(s[4200]);
initIAP42(s[4201]);
initIAA42(s[4202]);
initIAA42WL(s[4203]);
initIAA42WU(s[4204]);
initIAA42WE(s[4205]);
initIAA42WR(s[4206]);
initIAA42FL(s[4207]);
initIAA42FU(s[4208]);
initIAA42FE(s[4209]);
initIAA42FR(s[4210]);
initIAA42ML(s[4211]);
initIAA42MU(s[4212]);
initIAA42ME(s[4213]);
initIAA42MR(s[4214]);
initIAA42YL(s[4215]);
initIAA42YU(s[4216]);
initIAA42YE(s[4217]);
initIAA42YR(s[4218]);
initIAA42OL(s[4219]);
initIAA42OU(s[4220]);
initIAA42OE(s[4221]);
initIAA42OR(s[4222]);
initIALY42(s[4223]);
initIALM42(s[4224]);
initIAT43(s[4225]);
initIAP43(s[4226]);
initIAA43(s[4227]);
initIAA43WL(s[4228]);
initIAA43WU(s[4229]);
initIAA43WE(s[4230]);
initIAA43WR(s[4231]);
initIAA43FL(s[4232]);
initIAA43FU(s[4233]);
initIAA43FE(s[4234]);
initIAA43FR(s[4235]);
initIAA43ML(s[4236]);
initIAA43MU(s[4237]);
initIAA43ME(s[4238]);
initIAA43MR(s[4239]);
initIAA43YL(s[4240]);
initIAA43YU(s[4241]);
initIAA43YE(s[4242]);
initIAA43YR(s[4243]);
initIAA43OL(s[4244]);
initIAA43OU(s[4245]);
initIAA43OE(s[4246]);
initIAA43OR(s[4247]);
initIALY43(s[4248]);
initIALM43(s[4249]);
initIAT44(s[4250]);
initIAP44(s[4251]);
initIAA44(s[4252]);
initIAA44WL(s[4253]);
initIAA44WU(s[4254]);
initIAA44WE(s[4255]);
initIAA44WR(s[4256]);
initIAA44FL(s[4257]);
initIAA44FU(s[4258]);
initIAA44FE(s[4259]);
initIAA44FR(s[4260]);
initIAA44ML(s[4261]);
initIAA44MU(s[4262]);
initIAA44ME(s[4263]);
initIAA44MR(s[4264]);
initIAA44YL(s[4265]);
initIAA44YU(s[4266]);
initIAA44YE(s[4267]);
initIAA44YR(s[4268]);
initIAA44OL(s[4269]);
initIAA44OU(s[4270]);
initIAA44OE(s[4271]);
initIAA44OR(s[4272]);
initIALY44(s[4273]);
initIALM44(s[4274]);
initIAT45(s[4275]);
initIAP45(s[4276]);
initIAA45(s[4277]);
initIAA45WL(s[4278]);
initIAA45WU(s[4279]);
initIAA45WE(s[4280]);
initIAA45WR(s[4281]);
initIAA45FL(s[4282]);
initIAA45FU(s[4283]);
initIAA45FE(s[4284]);
initIAA45FR(s[4285]);
initIAA45ML(s[4286]);
initIAA45MU(s[4287]);
initIAA45ME(s[4288]);
initIAA45MR(s[4289]);
initIAA45YL(s[4290]);
initIAA45YU(s[4291]);
initIAA45YE(s[4292]);
initIAA45YR(s[4293]);
initIAA45OL(s[4294]);
initIAA45OU(s[4295]);
initIAA45OE(s[4296]);
initIAA45OR(s[4297]);
initIALY45(s[4298]);
initIALM45(s[4299]);
initIAT46(s[4300]);
initIAP46(s[4301]);
initIAA46(s[4302]);
initIAA46WL(s[4303]);
initIAA46WU(s[4304]);
initIAA46WE(s[4305]);
initIAA46WR(s[4306]);
initIAA46FL(s[4307]);
initIAA46FU(s[4308]);
initIAA46FE(s[4309]);
initIAA46FR(s[4310]);
initIAA46ML(s[4311]);
initIAA46MU(s[4312]);
initIAA46ME(s[4313]);
initIAA46MR(s[4314]);
initIAA46YL(s[4315]);
initIAA46YU(s[4316]);
initIAA46YE(s[4317]);
initIAA46YR(s[4318]);
initIAA46OL(s[4319]);
initIAA46OU(s[4320]);
initIAA46OE(s[4321]);
initIAA46OR(s[4322]);
initIALY46(s[4323]);
initIAB46(s[4324]);
initIABW46(s[4325]);
initIABM46(s[4326]);
initIAT47(s[4327]);
initIAP47(s[4328]);
initIAA47(s[4329]);
initIAA47WL(s[4330]);
initIAA47WU(s[4331]);
initIAA47WE(s[4332]);
initIAA47WR(s[4333]);
initIAA47FL(s[4334]);
initIAA47FU(s[4335]);
initIAA47FE(s[4336]);
initIAA47FR(s[4337]);
initIAA47ML(s[4338]);
initIAA47MU(s[4339]);
initIAA47ME(s[4340]);
initIAA47MR(s[4341]);
initIAA47YL(s[4342]);
initIAA47YU(s[4343]);
initIAA47YE(s[4344]);
initIAA47YR(s[4345]);
initIAA47OL(s[4346]);
initIAA47OU(s[4347]);
initIAA47OE(s[4348]);
initIAA47OR(s[4349]);
initIALY47(s[4350]);
initIAB47(s[4351]);
initIABW47(s[4352]);
initIABM47(s[4353]);
initIAT48(s[4354]);
initIAP48(s[4355]);
initIAA48(s[4356]);
initIAA48WL(s[4357]);
initIAA48WU(s[4358]);
initIAA48WE(s[4359]);
initIAA48WR(s[4360]);
initIAA48FL(s[4361]);
initIAA48FU(s[4362]);
initIAA48FE(s[4363]);
initIAA48FR(s[4364]);
initIAA48ML(s[4365]);
initIAA48MU(s[4366]);
initIAA48ME(s[4367]);
initIAA48MR(s[4368]);
initIAA48YL(s[4369]);
initIAA48YU(s[4370]);
initIAA48YE(s[4371]);
initIAA48YR(s[4372]);
initIAA48OL(s[4373]);
initIAA48OU(s[4374]);
initIAA48OE(s[4375]);
initIAA48OR(s[4376]);
initIALY48(s[4377]);
initIAB48(s[4378]);
initIABW48(s[4379]);
initIABM48(s[4380]);
initIAT49(s[4381]);
initIAP49(s[4382]);
initIAA49(s[4383]);
initIAA49WL(s[4384]);
initIAA49WU(s[4385]);
initIAA49WE(s[4386]);
initIAA49WR(s[4387]);
initIAA49FL(s[4388]);
initIAA49FU(s[4389]);
initIAA49FE(s[4390]);
initIAA49FR(s[4391]);
initIAA49ML(s[4392]);
initIAA49MU(s[4393]);
initIAA49ME(s[4394]);
initIAA49MR(s[4395]);
initIAA49YL(s[4396]);
initIAA49YU(s[4397]);
initIAA49YE(s[4398]);
initIAA49YR(s[4399]);
initIAA49OL(s[4400]);
initIAA49OU(s[4401]);
initIAA49OE(s[4402]);
initIAA49OR(s[4403]);
initIALY49(s[4404]);
initIAB49(s[4405]);
initIABW49(s[4406]);
initIABM49(s[4407]);
initIAT50(s[4408]);
initIAP50(s[4409]);
initIAA50(s[4410]);
initIAA50WL(s[4411]);
initIAA50WU(s[4412]);
initIAA50WE(s[4413]);
initIAA50WR(s[4414]);
initIAA50FL(s[4415]);
initIAA50FU(s[4416]);
initIAA50FE(s[4417]);
initIAA50FR(s[4418]);
initIAA50ML(s[4419]);
initIAA50MU(s[4420]);
initIAA50ME(s[4421]);
initIAA50MR(s[4422]);
initIAA50YL(s[4423]);
initIAA50YU(s[4424]);
initIAA50YE(s[4425]);
initIAA50YR(s[4426]);
initIAA50OL(s[4427]);
initIAA50OU(s[4428]);
initIAA50OE(s[4429]);
initIAA50OR(s[4430]);
initIALY50(s[4431]);
initIAB50(s[4432]);
initIABW50(s[4433]);
initIABM50(s[4434]);
initIAT51(s[4435]);
initIAP51(s[4436]);
initIAA51(s[4437]);
initIAA51WL(s[4438]);
initIAA51WU(s[4439]);
initIAA51WE(s[4440]);
initIAA51WR(s[4441]);
initIAA51FL(s[4442]);
initIAA51FU(s[4443]);
initIAA51FE(s[4444]);
initIAA51FR(s[4445]);
initIAA51ML(s[4446]);
initIAA51MU(s[4447]);
initIAA51ME(s[4448]);
initIAA51MR(s[4449]);
initIAA51YL(s[4450]);
initIAA51YU(s[4451]);
initIAA51YE(s[4452]);
initIAA51YR(s[4453]);
initIAA51OL(s[4454]);
initIAA51OU(s[4455]);
initIAA51OE(s[4456]);
initIAA51OR(s[4457]);
initIALY51(s[4458]);
initIAB51(s[4459]);
initIABW51(s[4460]);
initIABM51(s[4461]);
initIAT52(s[4462]);
initIAP52(s[4463]);
initIAA52(s[4464]);
initIAA52WL(s[4465]);
initIAA52WU(s[4466]);
initIAA52WE(s[4467]);
initIAA52WR(s[4468]);
initIAA52FL(s[4469]);
initIAA52FU(s[4470]);
initIAA52FE(s[4471]);
initIAA52FR(s[4472]);
initIAA52ML(s[4473]);
initIAA52MU(s[4474]);
initIAA52ME(s[4475]);
initIAA52MR(s[4476]);
initIAA52YL(s[4477]);
initIAA52YU(s[4478]);
initIAA52YE(s[4479]);
initIAA52YR(s[4480]);
initIAA52OL(s[4481]);
initIAA52OU(s[4482]);
initIAA52OE(s[4483]);
initIAA52OR(s[4484]);
initIALY52(s[4485]);
initIAB52(s[4486]);
initIABW52(s[4487]);
initIABM52(s[4488]);
initIAT53(s[4489]);
initIAP53(s[4490]);
initIAA53(s[4491]);
initIAA53WL(s[4492]);
initIAA53WU(s[4493]);
initIAA53WE(s[4494]);
initIAA53WR(s[4495]);
initIAA53FL(s[4496]);
initIAA53FU(s[4497]);
initIAA53FE(s[4498]);
initIAA53FR(s[4499]);
initIAA53ML(s[4500]);
initIAA53MU(s[4501]);
initIAA53ME(s[4502]);
initIAA53MR(s[4503]);
initIAA53YL(s[4504]);
initIAA53YU(s[4505]);
initIAA53YE(s[4506]);
initIAA53YR(s[4507]);
initIAA53OL(s[4508]);
initIAA53OU(s[4509]);
initIAA53OE(s[4510]);
initIAA53OR(s[4511]);
initIALY53(s[4512]);
initIAB53(s[4513]);
initIABW53(s[4514]);
initIABM53(s[4515]);
initIAT54(s[4516]);
initIAP54(s[4517]);
initIAA54(s[4518]);
initIAA54WL(s[4519]);
initIAA54WU(s[4520]);
initIAA54WE(s[4521]);
initIAA54WR(s[4522]);
initIAA54FL(s[4523]);
initIAA54FU(s[4524]);
initIAA54FE(s[4525]);
initIAA54FR(s[4526]);
initIAA54ML(s[4527]);
initIAA54MU(s[4528]);
initIAA54ME(s[4529]);
initIAA54MR(s[4530]);
initIAA54YL(s[4531]);
initIAA54YU(s[4532]);
initIAA54YE(s[4533]);
initIAA54YR(s[4534]);
initIAA54OL(s[4535]);
initIAA54OU(s[4536]);
initIAA54OE(s[4537]);
initIAA54OR(s[4538]);
initIALY54(s[4539]);
initIAB54(s[4540]);
initIABW54(s[4541]);
initIABM54(s[4542]);
initIABEPIS(s[4543]);
initIABEPPC(s[4544]);
initIABEPTC(s[4545]);
initIABEPJA(s[4546]);
initIABEPGA(s[4547]);
initIABEPWP(s[4548]);
initIABEPCB(s[4549]);
initIABEPCC(s[4550]);
initIABEP95(s[4551]);
initIABEP96(s[4552]);
initIABEPMIS(s[4553]);
initIABEPMPC(s[4554]);
initIABEPMTC(s[4555]);
initIABEPMJA(s[4556]);
initIABEPMGA(s[4557]);
initIABEPMWP(s[4558]);
initIABEPMCB(s[4559]);
initIABEPMCC(s[4560]);
initIABEPMFP(s[4561]);
initIABEPM85(s[4562]);
initIABEPM86(s[4563]);
initIABEPM96(s[4564]);
initIABEPNIS(s[4565]);
initIABEPNPC(s[4566]);
initIABEPNWC(s[4567]);
initIABEPNJA(s[4568]);
initIABEPNGA(s[4569]);
initIABEPNWP(s[4570]);
initIABEPNCB(s[4571]);
initIABEPNCC(s[4572]);
initIABEPN95(s[4573]);
initIABEPN96(s[4574]);
initIAT55(s[4575]);
initIAP55(s[4576]);
initIAA55(s[4577]);
initIAA55WL(s[4578]);
initIAA55WU(s[4579]);
initIAA55WE(s[4580]);
initIAA55WR(s[4581]);
initIAA55FL(s[4582]);
initIAA55FU(s[4583]);
initIAA55FE(s[4584]);
initIAA55FR(s[4585]);
initIAA55ML(s[4586]);
initIAA55MU(s[4587]);
initIAA55ME(s[4588]);
initIAA55MR(s[4589]);
initIAA55YL(s[4590]);
initIAA55YU(s[4591]);
initIAA55YE(s[4592]);
initIAA55YR(s[4593]);
initIAA55OL(s[4594]);
initIAA55OU(s[4595]);
initIAA55OE(s[4596]);
initIAA55OR(s[4597]);
initIALY55(s[4598]);
initIALM55(s[4599]);
initIAT56(s[4600]);
initIAP56(s[4601]);
initIAA56(s[4602]);
initIAA56WL(s[4603]);
initIAA56WU(s[4604]);
initIAA56WE(s[4605]);
initIAA56WR(s[4606]);
initIAA56FL(s[4607]);
initIAA56FU(s[4608]);
initIAA56FE(s[4609]);
initIAA56FR(s[4610]);
initIAA56ML(s[4611]);
initIAA56MU(s[4612]);
initIAA56ME(s[4613]);
initIAA56MR(s[4614]);
initIAA56YL(s[4615]);
initIAA56YU(s[4616]);
initIAA56YE(s[4617]);
initIAA56YR(s[4618]);
initIAA56OL(s[4619]);
initIAA56OU(s[4620]);
initIAA56OE(s[4621]);
initIAA56OR(s[4622]);
initIALY56(s[4623]);
initIALM56(s[4624]);
initIAT57(s[4625]);
initIAP57(s[4626]);
initIAA57(s[4627]);
initIAA57WL(s[4628]);
initIAA57WU(s[4629]);
initIAA57WE(s[4630]);
initIAA57WR(s[4631]);
initIAA57FL(s[4632]);
initIAA57FU(s[4633]);
initIAA57FE(s[4634]);
initIAA57FR(s[4635]);
initIAA57ML(s[4636]);
initIAA57MU(s[4637]);
initIAA57ME(s[4638]);
initIAA57MR(s[4639]);
initIAA57YL(s[4640]);
initIAA57YU(s[4641]);
initIAA57YE(s[4642]);
initIAA57YR(s[4643]);
initIAA57OL(s[4644]);
initIAA57OU(s[4645]);
initIAA57OE(s[4646]);
initIAA57OR(s[4647]);
initIALY57(s[4648]);
initIALM57(s[4649]);
initIAT58(s[4650]);
initIAP58(s[4651]);
initIAA58(s[4652]);
initIAA58WL(s[4653]);
initIAA58WU(s[4654]);
initIAA58WE(s[4655]);
initIAA58WR(s[4656]);
initIAA58FL(s[4657]);
initIAA58FU(s[4658]);
initIAA58FE(s[4659]);
initIAA58FR(s[4660]);
initIAA58ML(s[4661]);
initIAA58MU(s[4662]);
initIAA58ME(s[4663]);
initIAA58MR(s[4664]);
initIAA58YL(s[4665]);
initIAA58YU(s[4666]);
initIAA58YE(s[4667]);
initIAA58YR(s[4668]);
initIAA58OL(s[4669]);
initIAA58OU(s[4670]);
initIAA58OE(s[4671]);
initIAA58OR(s[4672]);
initIALY58(s[4673]);
initIALM58(s[4674]);
initIAT59(s[4675]);
initIAP59(s[4676]);
initIAA59(s[4677]);
initIAA59WL(s[4678]);
initIAA59WU(s[4679]);
initIAA59WE(s[4680]);
initIAA59WR(s[4681]);
initIAA59FL(s[4682]);
initIAA59FU(s[4683]);
initIAA59FE(s[4684]);
initIAA59FR(s[4685]);
initIAA59ML(s[4686]);
initIAA59MU(s[4687]);
initIAA59ME(s[4688]);
initIAA59MR(s[4689]);
initIAA59YL(s[4690]);
initIAA59YU(s[4691]);
initIAA59YE(s[4692]);
initIAA59YR(s[4693]);
initIAA59OL(s[4694]);
initIAA59OU(s[4695]);
initIAA59OE(s[4696]);
initIAA59OR(s[4697]);
initIALY59(s[4698]);
initIALM59(s[4699]);
initIAT60(s[4700]);
initIAP60(s[4701]);
initIAA60(s[4702]);
initIAA60WL(s[4703]);
initIAA60WU(s[4704]);
initIAA60WE(s[4705]);
initIAA60WR(s[4706]);
initIAA60FL(s[4707]);
initIAA60FU(s[4708]);
initIAA60FE(s[4709]);
initIAA60FR(s[4710]);
initIAA60ML(s[4711]);
initIAA60MU(s[4712]);
initIAA60ME(s[4713]);
initIAA60MR(s[4714]);
initIAA60YL(s[4715]);
initIAA60YU(s[4716]);
initIAA60YE(s[4717]);
initIAA60YR(s[4718]);
initIAA60OL(s[4719]);
initIAA60OU(s[4720]);
initIAA60OE(s[4721]);
initIAA60OR(s[4722]);
initIALY60(s[4723]);
initIALM60(s[4724]);
initIAT61(s[4725]);
initIAP61(s[4726]);
initIAA61(s[4727]);
initIAA61WL(s[4728]);
initIAA61WU(s[4729]);
initIAA61WE(s[4730]);
initIAA61WR(s[4731]);
initIAA61FL(s[4732]);
initIAA61FU(s[4733]);
initIAA61FE(s[4734]);
initIAA61FR(s[4735]);
initIAA61ML(s[4736]);
initIAA61MU(s[4737]);
initIAA61ME(s[4738]);
initIAA61MR(s[4739]);
initIAA61YL(s[4740]);
initIAA61YU(s[4741]);
initIAA61YE(s[4742]);
initIAA61YR(s[4743]);
initIAA61OL(s[4744]);
initIAA61OU(s[4745]);
initIAA61OE(s[4746]);
initIAA61OR(s[4747]);
initIALY61(s[4748]);
initIALM61(s[4749]);
initIAT62(s[4750]);
initIAP62(s[4751]);
initIAA62(s[4752]);
initIAA62WL(s[4753]);
initIAA62WU(s[4754]);
initIAA62WE(s[4755]);
initIAA62WR(s[4756]);
initIAA62FL(s[4757]);
initIAA62FU(s[4758]);
initIAA62FE(s[4759]);
initIAA62FR(s[4760]);
initIAA62ML(s[4761]);
initIAA62MU(s[4762]);
initIAA62ME(s[4763]);
initIAA62MR(s[4764]);
initIAA62YL(s[4765]);
initIAA62YU(s[4766]);
initIAA62YE(s[4767]);
initIAA62YR(s[4768]);
initIAA62OL(s[4769]);
initIAA62OU(s[4770]);
initIAA62OE(s[4771]);
initIAA62OR(s[4772]);
initIALY62(s[4773]);
initIALM62(s[4774]);
initIAT63(s[4775]);
initIAP63(s[4776]);
initIAA63(s[4777]);
initIAA63WL(s[4778]);
initIAA63WU(s[4779]);
initIAA63WE(s[4780]);
initIAA63WR(s[4781]);
initIAA63FL(s[4782]);
initIAA63FU(s[4783]);
initIAA63FE(s[4784]);
initIAA63FR(s[4785]);
initIAA63ML(s[4786]);
initIAA63MU(s[4787]);
initIAA63ME(s[4788]);
initIAA63MR(s[4789]);
initIAA63YL(s[4790]);
initIAA63YU(s[4791]);
initIAA63YE(s[4792]);
initIAA63YR(s[4793]);
initIAA63OL(s[4794]);
initIAA63OU(s[4795]);
initIAA63OE(s[4796]);
initIAA63OR(s[4797]);
initIALY63(s[4798]);
initIALM63(s[4799]);
initIAT64(s[4800]);
initIAP64(s[4801]);
initIAA64(s[4802]);
initIAA64WL(s[4803]);
initIAA64WU(s[4804]);
initIAA64WE(s[4805]);
initIAA64WR(s[4806]);
initIAA64FL(s[4807]);
initIAA64FU(s[4808]);
initIAA64FE(s[4809]);
initIAA64FR(s[4810]);
initIAA64ML(s[4811]);
initIAA64MU(s[4812]);
initIAA64ME(s[4813]);
initIAA64MR(s[4814]);
initIAA64YL(s[4815]);
initIAA64YU(s[4816]);
initIAA64YE(s[4817]);
initIAA64YR(s[4818]);
initIAA64OL(s[4819]);
initIAA64OU(s[4820]);
initIAA64OE(s[4821]);
initIAA64OR(s[4822]);
initIAB64(s[4823]);
initIABW64(s[4824]);
initIABM64(s[4825]);
initIAT65(s[4826]);
initIAP65(s[4827]);
initIAA65(s[4828]);
initIAA65WL(s[4829]);
initIAA65WU(s[4830]);
initIAA65WE(s[4831]);
initIAA65WR(s[4832]);
initIAA65FL(s[4833]);
initIAA65FU(s[4834]);
initIAA65FE(s[4835]);
initIAA65FR(s[4836]);
initIAA65ML(s[4837]);
initIAA65MU(s[4838]);
initIAA65ME(s[4839]);
initIAA65MR(s[4840]);
initIAA65YL(s[4841]);
initIAA65YU(s[4842]);
initIAA65YE(s[4843]);
initIAA65YR(s[4844]);
initIAA65OL(s[4845]);
initIAA65OU(s[4846]);
initIAA65OE(s[4847]);
initIAA65OR(s[4848]);
initIAB65(s[4849]);
initIABW65(s[4850]);
initIABM65(s[4851]);
initIAT66(s[4852]);
initIAP66(s[4853]);
initIAA66(s[4854]);
initIAA66WL(s[4855]);
initIAA66WU(s[4856]);
initIAA66WE(s[4857]);
initIAA66WR(s[4858]);
initIAA66FL(s[4859]);
initIAA66FU(s[4860]);
initIAA66FE(s[4861]);
initIAA66FR(s[4862]);
initIAA66ML(s[4863]);
initIAA66MU(s[4864]);
initIAA66ME(s[4865]);
initIAA66MR(s[4866]);
initIAA66YL(s[4867]);
initIAA66YU(s[4868]);
initIAA66YE(s[4869]);
initIAA66YR(s[4870]);
initIAA66OL(s[4871]);
initIAA66OU(s[4872]);
initIAA66OE(s[4873]);
initIAA66OR(s[4874]);
initIAB66(s[4875]);
initIABW66(s[4876]);
initIABM66(s[4877]);
initIAT67(s[4878]);
initIAP67(s[4879]);
initIAA67(s[4880]);
initIAA67WL(s[4881]);
initIAA67WU(s[4882]);
initIAA67WE(s[4883]);
initIAA67WR(s[4884]);
initIAA67FL(s[4885]);
initIAA67FU(s[4886]);
initIAA67FE(s[4887]);
initIAA67FR(s[4888]);
initIAA67ML(s[4889]);
initIAA67MU(s[4890]);
initIAA67ME(s[4891]);
initIAA67MR(s[4892]);
initIAA67YL(s[4893]);
initIAA67YU(s[4894]);
initIAA67YE(s[4895]);
initIAA67YR(s[4896]);
initIAA67OL(s[4897]);
initIAA67OU(s[4898]);
initIAA67OE(s[4899]);
initIAA67OR(s[4900]);
initIAB67(s[4901]);
initIABW67(s[4902]);
initIABM67(s[4903]);
initIAT68(s[4904]);
initIAP68(s[4905]);
initIAA68(s[4906]);
initIAA68WL(s[4907]);
initIAA68WU(s[4908]);
initIAA68WE(s[4909]);
initIAA68WR(s[4910]);
initIAA68FL(s[4911]);
initIAA68FU(s[4912]);
initIAA68FE(s[4913]);
initIAA68FR(s[4914]);
initIAA68ML(s[4915]);
initIAA68MU(s[4916]);
initIAA68ME(s[4917]);
initIAA68MR(s[4918]);
initIAA68YL(s[4919]);
initIAA68YU(s[4920]);
initIAA68YE(s[4921]);
initIAA68YR(s[4922]);
initIAA68OL(s[4923]);
initIAA68OU(s[4924]);
initIAA68OE(s[4925]);
initIAA68OR(s[4926]);
initIAB68(s[4927]);
initIABW68(s[4928]);
initIABM68(s[4929]);
initIAT69(s[4930]);
initIAP69(s[4931]);
initIAA69(s[4932]);
initIAA69WL(s[4933]);
initIAA69WU(s[4934]);
initIAA69WE(s[4935]);
initIAA69WR(s[4936]);
initIAA69FL(s[4937]);
initIAA69FU(s[4938]);
initIAA69FE(s[4939]);
initIAA69FR(s[4940]);
initIAA69ML(s[4941]);
initIAA69MU(s[4942]);
initIAA69ME(s[4943]);
initIAA69MR(s[4944]);
initIAA69YL(s[4945]);
initIAA69YU(s[4946]);
initIAA69YE(s[4947]);
initIAA69YR(s[4948]);
initIAA69OL(s[4949]);
initIAA69OU(s[4950]);
initIAA69OE(s[4951]);
initIAA69OR(s[4952]);
initIAB69(s[4953]);
initIABW69(s[4954]);
initIABM69(s[4955]);
initIAT70(s[4956]);
initIAP70(s[4957]);
initIAA70(s[4958]);
initIAA70WL(s[4959]);
initIAA70WU(s[4960]);
initIAA70WE(s[4961]);
initIAA70WR(s[4962]);
initIAA70FL(s[4963]);
initIAA70FU(s[4964]);
initIAA70FE(s[4965]);
initIAA70FR(s[4966]);
initIAA70ML(s[4967]);
initIAA70MU(s[4968]);
initIAA70ME(s[4969]);
initIAA70MR(s[4970]);
initIAA70YL(s[4971]);
initIAA70YU(s[4972]);
initIAA70YE(s[4973]);
initIAA70YR(s[4974]);
initIAA70OL(s[4975]);
initIAA70OU(s[4976]);
initIAA70OE(s[4977]);
initIAA70OR(s[4978]);
initIAB70(s[4979]);
initIABW70(s[4980]);
initIABM70(s[4981]);
initIAT71(s[4982]);
initIAP71(s[4983]);
initIAA71(s[4984]);
initIAA71WL(s[4985]);
initIAA71WU(s[4986]);
initIAA71WE(s[4987]);
initIAA71WR(s[4988]);
initIAA71FL(s[4989]);
initIAA71FU(s[4990]);
initIAA71FE(s[4991]);
initIAA71FR(s[4992]);
initIAA71ML(s[4993]);
initIAA71MU(s[4994]);
initIAA71ME(s[4995]);
initIAA71MR(s[4996]);
initIAA71YL(s[4997]);
initIAA71YU(s[4998]);
initIAA71YE(s[4999]);
initIAA71YR(s[5000]);
initIAA71OL(s[5001]);
initIAA71OU(s[5002]);
initIAA71OE(s[5003]);
initIAA71OR(s[5004]);
initIAB71(s[5005]);
initIABW71(s[5006]);
initIABM71(s[5007]);
initIAT72(s[5008]);
initIAP72(s[5009]);
initIAA72(s[5010]);
initIAA72WL(s[5011]);
initIAA72WU(s[5012]);
initIAA72WE(s[5013]);
initIAA72WR(s[5014]);
initIAA72FL(s[5015]);
initIAA72FU(s[5016]);
initIAA72FE(s[5017]);
initIAA72FR(s[5018]);
initIAA72ML(s[5019]);
initIAA72MU(s[5020]);
initIAA72ME(s[5021]);
initIAA72MR(s[5022]);
initIAA72YL(s[5023]);
initIAA72YU(s[5024]);
initIAA72YE(s[5025]);
initIAA72YR(s[5026]);
initIAA72OL(s[5027]);
initIAA72OU(s[5028]);
initIAA72OE(s[5029]);
initIAA72OR(s[5030]);
initIAB72(s[5031]);
initIABW72(s[5032]);
initIABM72(s[5033]);
initIAFUEL(s[5034]);
initIASICA(s[5035]);
initIASISAV(s[5036]);
initIASITESS(s[5037]);
initIASIISA(s[5038]);
initIASIPB(s[5039]);
initIASINS(s[5040]);
initIASIPEP(s[5041]);
initIASISHA(s[5042]);
initIASIOPT(s[5043]);
initIASISC(s[5044]);
initIASIUIT(s[5045]);
initIASIBG(s[5046]);
initIASI95(s[5047]);
initIASI96(s[5048]);
initIASAVA(s[5049]);
initIASAVAL(s[5050]);
initIASAVAU(s[5051]);
initIASAVAE(s[5052]);
initIASAVAR(s[5053]);
initIASINT(s[5054]);
initIASINTL(s[5055]);
initIASINTU(s[5056]);
initIASINTE(s[5057]);
initIASINTR(s[5058]);
initIANS(s[5059]);
initIANSL(s[5060]);
initIANSU(s[5061]);
initIANSE(s[5062]);
initIANSR(s[5063]);
initIANSI(s[5064]);
initIANSIL(s[5065]);
initIANSIU(s[5066]);
initIANSIE(s[5067]);
initIANSIR(s[5068]);
initIANPB(s[5069]);
initIANPBL(s[5070]);
initIANPBU(s[5071]);
initIANPBE(s[5072]);
initIANPBR(s[5073]);
initIANPBP(s[5074]);
initIANPBPL(s[5075]);
initIANPBPU(s[5076]);
initIANPBPE(s[5077]);
initIANPBPR(s[5078]);
initIATI(s[5079]);
initIATIL(s[5080]);
initIATIU(s[5081]);
initIATIE(s[5082]);
initIATIR(s[5083]);
initIATII(s[5084]);
initIATIIL(s[5085]);
initIATIIU(s[5086]);
initIATIIE(s[5087]);
initIATIIR(s[5088]);
initIAISACAS(s[5089]);
initIAISALI(s[5090]);
initIAISASHA(s[5091]);
initIACISA(s[5092]);
initIACISAL(s[5093]);
initIACISAU(s[5094]);
initIACISAE(s[5095]);
initIACISAR(s[5096]);
initIALISA(s[5097]);
initIALISAL(s[5098]);
initIALISAU(s[5099]);
initIALISAE(s[5100]);
initIALISAR(s[5101]);
initIASISA(s[5102]);
initIASISAL(s[5103]);
initIASISAU(s[5104]);
initIASISAE(s[5105]);
initIASISAR(s[5106]);
initIAISAD(s[5107]);
initIAISADL(s[5108]);
initIAISADU(s[5109]);
initIAISADE(s[5110]);
initIAISADR(s[5111]);
initIAIP(s[5112]);
initIAIPL(s[5113]);
initIAIPU(s[5114]);
initIAIPE(s[5115]);
initIAIPR(s[5116]);
initIAIPI(s[5117]);
initIAIPIL(s[5118]);
initIAIPIU(s[5119]);
initIAIPIE(s[5120]);
initIAIPIR(s[5121]);
initIASSS(s[5122]);
initIASSSL(s[5123]);
initIASSSU(s[5124]);
initIASSSE(s[5125]);
initIASSSR(s[5126]);
initIASSSI(s[5127]);
initIASSSIL(s[5128]);
initIASSSIU(s[5129]);
initIASSSIE(s[5130]);
initIASSSIR(s[5131]);
initIASHTPRI(s[5132]);
initIASHTMUT(s[5133]);
initIASHTUKL(s[5134]);
initIASHTFOL(s[5135]);
initIADENAT(s[5136]);
initIADEMUT(s[5137]);
initIAUIT(s[5138]);
initIAUITL(s[5139]);
initIAUITU(s[5140]);
initIAUITE(s[5141]);
initIAUITR(s[5142]);
initIAUITI(s[5143]);
initIAUITIL(s[5144]);
initIAUITIU(s[5145]);
initIAUITIE(s[5146]);
initIAUITIR(s[5147]);
initIABG(s[5148]);
initIABGL(s[5149]);
initIABGU(s[5150]);
initIABGE(s[5151]);
initIABGR(s[5152]);
initIABGI(s[5153]);
initIABGIL(s[5154]);
initIABGIU(s[5155]);
initIABGIE(s[5156]);
initIABGIR(s[5157]);
initIASIO(s[5158]);
initIASIOL(s[5159]);
initIASIOU(s[5160]);
initIASIOE(s[5161]);
initIASIOR(s[5162]);
initIASIOI(s[5163]);
initIASIOIL(s[5164]);
initIASIOIU(s[5165]);
initIASIOIE(s[5166]);
initIASIOIR(s[5167]);
initIALI(s[5168]);
initIALIW(s[5169]);
initIALIYA(s[5170]);
initIALIYAL(s[5171]);
initIALIYAU(s[5172]);
initIALIYAE(s[5173]);
initIALIYAR(s[5174]);
initIALIPA(s[5175]);
initIALIPAL(s[5176]);
initIALIPAU(s[5177]);
initIALIPAE(s[5178]);
initIALIPAR(s[5179]);
initIASC(s[5180]);
initIASCA(s[5181]);
initIASCAL(s[5182]);
initIASCAU(s[5183]);
initIASCAE(s[5184]);
initIASCAR(s[5185]);
initIADOC(s[5186]);
initIAINTA(s[5187]);
initIAPROPHO(s[5188]);
initIAPROPFA(s[5189]);
initIAPROPOL(s[5190]);
initIAPROPOW(s[5191]);
initIAPROPTR(s[5192]);
initIAPROPIN(s[5193]);
initIAPROP95(s[5194]);
initIAPROP96(s[5195]);
initIAHOME(s[5196]);
initIAHOMEL(s[5197]);
initIAHOMEU(s[5198]);
initIAHOMEE(s[5199]);
initIAHOMER(s[5200]);
initIAIR(s[5201]);
initIAIRA(s[5202]);
initIAIRAL(s[5203]);
initIAIRAU(s[5204]);
initIAIRAE(s[5205]);
initIAIRAR(s[5206]);
initIAFBPS(s[5207]);
initIAFBPSL(s[5208]);
initIAFBPSU(s[5209]);
initIAFBPSE(s[5210]);
initIAFBPSR(s[5211]);
initIAFBPR(s[5212]);
initIAFBA(s[5213]);
initIAFBAL(s[5214]);
initIAFBAU(s[5215]);
initIAFBAE(s[5216]);
initIAFBAR(s[5217]);
initIAOASA(s[5218]);
initIAOASAL(s[5219]);
initIAOASAU(s[5220]);
initIAOASAE(s[5221]);
initIAOASAR(s[5222]);
initIAREGP(s[5223]);
initIAPAY(s[5224]);
initIAPAYR(s[5225]);
initIAREGO(s[5226]);
initIAREGM(s[5227]);
initIARGWL(s[5228]);
initIARGWU(s[5229]);
initIARGWE(s[5230]);
initIARGWR(s[5231]);
initIARGFL(s[5232]);
initIARGFU(s[5233]);
initIARGFE(s[5234]);
initIARGFR(s[5235]);
initIARGML(s[5236]);
initIARGMU(s[5237]);
initIARGME(s[5238]);
initIARGMR(s[5239]);
initIARGYL(s[5240]);
initIARGYU(s[5241]);
initIARGYE(s[5242]);
initIARGYR(s[5243]);
initIARGOL(s[5244]);
initIARGOU(s[5245]);
initIARGOE(s[5246]);
initIARGOR(s[5247]);
initIARGYR1(s[5248]);
initIARGMW(s[5249]);
initIARMWA(s[5250]);
initIAOTHP(s[5251]);
initIAPAY2(s[5252]);
initIAPAYR2(s[5253]);
initIAREGO2(s[5254]);
initIAREGM2(s[5255]);
initIARG2WL(s[5256]);
initIARG2WU(s[5257]);
initIARG2WE(s[5258]);
initIARG2WR(s[5259]);
initIARG2FL(s[5260]);
initIARG2FU(s[5261]);
initIARG2FE(s[5262]);
initIARG2FR(s[5263]);
initIARG2ML(s[5264]);
initIARG2MU(s[5265]);
initIARG2ME(s[5266]);
initIARG2MR(s[5267]);
initIARG2YL(s[5268]);
initIARG2YU(s[5269]);
initIARG2YE(s[5270]);
initIARG2YR(s[5271]);
initIARG2OL(s[5272]);
initIARG2OU(s[5273]);
initIARG2OE(s[5274]);
initIARG2OR(s[5275]);
initIARGYR2(s[5276]);
initIARGMW2(s[5277]);
initIARMWA2(s[5278]);
initIAOTHP2(s[5279]);
initIAPAY3(s[5280]);
initIAPAYR3(s[5281]);
initIAREGO3(s[5282]);
initIAREGM3(s[5283]);
initIARG3WL(s[5284]);
initIARG3WU(s[5285]);
initIARG3WE(s[5286]);
initIARG3WR(s[5287]);
initIARG3FL(s[5288]);
initIARG3FU(s[5289]);
initIARG3FE(s[5290]);
initIARG3FR(s[5291]);
initIARG3ML(s[5292]);
initIARG3MU(s[5293]);
initIARG3ME(s[5294]);
initIARG3MR(s[5295]);
initIARG3YL(s[5296]);
initIARG3YU(s[5297]);
initIARG3YE(s[5298]);
initIARG3YR(s[5299]);
initIARG3OL(s[5300]);
initIARG3OU(s[5301]);
initIARG3OE(s[5302]);
initIARG3OR(s[5303]);
initIARGYR3(s[5304]);
initIARGMW3(s[5305]);
initIARMWA3(s[5306]);
initIAOTHP3(s[5307]);
initIAPAR(s[5308]);
initIAPS(s[5309]);
initIAPR(s[5310]);
initIAPF(s[5311]);
initIAPAM2(s[5312]);
initIAPA2WL(s[5313]);
initIAPA2WU(s[5314]);
initIAPA2WE(s[5315]);
initIAPA2WR(s[5316]);
initIAPA2FL(s[5317]);
initIAPA2FU(s[5318]);
initIAPA2FE(s[5319]);
initIAPA2FR(s[5320]);
initIAPA2ML(s[5321]);
initIAPA2MU(s[5322]);
initIAPA2ME(s[5323]);
initIAPA2MR(s[5324]);
initIAPA2YL(s[5325]);
initIAPA2YU(s[5326]);
initIAPA2YE(s[5327]);
initIAPA2YR(s[5328]);
initIAPA2OL(s[5329]);
initIAPA2OU(s[5330]);
initIAPA2OE(s[5331]);
initIAPA2OR(s[5332]);
initIARGYRP(s[5333]);
initIARGMWP(s[5334]);
initIARMWPA(s[5335]);
initIAMRP(s[5336]);
initIAPKLI(s[5337]);
initIAPKPP(s[5338]);
initIAPKPAP(s[5339]);
initIAPKOIP(s[5340]);
initIAPKRP(s[5341]);
initIAPKIOB(s[5342]);
initIAPKGW(s[5343]);
initIAPK95(s[5344]);
initIAPK96(s[5345]);
initIAPKMLI(s[5346]);
initIAPKMPP(s[5347]);
initIAPKMPAP(s[5348]);
initIAPKMOIP(s[5349]);
initIAPKMRP(s[5350]);
initIAPKMIOB(s[5351]);
initIAPKMGW(s[5352]);
initIAPKM85(s[5353]);
initIAPKM86(s[5354]);
initIAPKM96(s[5355]);
initIAPKM1(s[5356]);
initIAPKM2(s[5357]);
initIAPKM3(s[5358]);
initIAPKM4(s[5359]);
initIAPKM5(s[5360]);
initIAPKM6(s[5361]);
initIAPKM7(s[5362]);
initIAPKM8(s[5363]);
initIAPKM1L(s[5364]);
initIAPKM1U(s[5365]);
initIAPKM1E(s[5366]);
initIAPKM1R(s[5367]);
initIAPKM2L(s[5368]);
initIAPKM2U(s[5369]);
initIAPKM2E(s[5370]);
initIAPKM2R(s[5371]);
initIAPKM3L(s[5372]);
initIAPKM3U(s[5373]);
initIAPKM3E(s[5374]);
initIAPKM3R(s[5375]);
initIAPKM4L(s[5376]);
initIAPKM4U(s[5377]);
initIAPKM4E(s[5378]);
initIAPKM4R(s[5379]);
initIAPKM5L(s[5380]);
initIAPKM5U(s[5381]);
initIAPKM5E(s[5382]);
initIAPKM5R(s[5383]);
initIAPKM6L(s[5384]);
initIAPKM6U(s[5385]);
initIAPKM6E(s[5386]);
initIAPKM6R(s[5387]);
initIAPKM7L(s[5388]);
initIAPKM7U(s[5389]);
initIAPKM7E(s[5390]);
initIAPKM7R(s[5391]);
initIAPKM8L(s[5392]);
initIAPKM8U(s[5393]);
initIAPKM8E(s[5394]);
initIAPKM8R(s[5395]);
initIADEBT(s[5396]);
initIADEBM(s[5397]);
initIADEBML(s[5398]);
initIADEBMU(s[5399]);
initIADEBME(s[5400]);
initIADEBMR(s[5401]);
initIAOWE(s[5402]);
initIAOWEM(s[5403]);
initIAOWEML(s[5404]);
initIAOWEMU(s[5405]);
initIAOWEME(s[5406]);
initIAOWEMR(s[5407]);
initIAREGR(s[5408]);
initIAREGRP(s[5409]);
initIAREP(s[5410]);
initIAREPWL(s[5411]);
initIAREPWU(s[5412]);
initIAREPWE(s[5413]);
initIAREPWR(s[5414]);
initIAREPFL(s[5415]);
initIAREPFU(s[5416]);
initIAREPFE(s[5417]);
initIAREPFR(s[5418]);
initIAREPML(s[5419]);
initIAREPMU(s[5420]);
initIAREPME(s[5421]);
initIAREPMR(s[5422]);
initIAREPYL(s[5423]);
initIAREPYU(s[5424]);
initIAREPYE(s[5425]);
initIAREPYR(s[5426]);
initIAREPOL(s[5427]);
initIAREPOU(s[5428]);
initIAREPOE(s[5429]);
initIAREPOR(s[5430]);
initIALOANHP(s[5431]);
initIALOANPL(s[5432]);
initIALOANOD(s[5433]);
initIALOANMO(s[5434]);
initIALOANSF(s[5435]);
initIALOANML(s[5436]);
initIALOAN96(s[5437]);
initIALOAM(s[5438]);
initIALOAML(s[5439]);
initIALOAMU(s[5440]);
initIALOAME(s[5441]);
initIALOAMR(s[5442]);
initIALREP(s[5443]);
initIALRE(s[5444]);
initIALREWL(s[5445]);
initIALREWU(s[5446]);
initIALREWE(s[5447]);
initIALREWR(s[5448]);
initIALREFL(s[5449]);
initIALREFU(s[5450]);
initIALREFE(s[5451]);
initIALREFR(s[5452]);
initIALREML(s[5453]);
initIALREMU(s[5454]);
initIALREME(s[5455]);
initIALREMR(s[5456]);
initIALREYL(s[5457]);
initIALREYU(s[5458]);
initIALREYE(s[5459]);
initIALREYR(s[5460]);
initIALREOL(s[5461]);
initIALREOU(s[5462]);
initIALREOE(s[5463]);
initIALREOR(s[5464]);
initIAJNT(s[5465]);
initIAAM(s[5466]);
initIAAML(s[5467]);
initIAAMU(s[5468]);
initIAAME(s[5469]);
initIAAMR(s[5470]);
initIAFCON(s[5471]);
initIAORGF(s[5472]);
initIAFIND(s[5473]);
initIAPYW(s[5474]);
initIAERN(s[5475]);
initIAEARL(s[5476]);
initIAEARU(s[5477]);
initIAEARE(s[5478]);
initIAEARR(s[5479]);
initIAPYW2(s[5480]);
initIAERN2(s[5481]);
initIAEAR2L(s[5482]);
initIAEAR2U(s[5483]);
initIAEAR2E(s[5484]);
initIAEAR2R(s[5485]);
initIAPYW3(s[5486]);
initIAERN3(s[5487]);
initIAEAR3L(s[5488]);
initIAEAR3U(s[5489]);
initIAEAR3E(s[5490]);
initIAEAR3R(s[5491]);
initIAPY(s[5492]);
initIAERN4(s[5493]);
initIAEAR4L(s[5494]);
initIAEAR4U(s[5495]);
initIAEAR4E(s[5496]);
initIAEAR4R(s[5497]);
initIAPYW5(s[5498]);
initIAERN5(s[5499]);
initIAEAR5L(s[5500]);
initIAEAR5U(s[5501]);
initIAEAR5E(s[5502]);
initIAEAR5R(s[5503]);
initIAPYW6(s[5504]);
initIAERN6(s[5505]);
initIAEAR6L(s[5506]);
initIAEAR6U(s[5507]);
initIAEAR6E(s[5508]);
initIAEAR6R(s[5509]);
initIAPYW7(s[5510]);
initIAERN7(s[5511]);
initIAEAR7L(s[5512]);
initIAEAR7U(s[5513]);
initIAEAR7E(s[5514]);
initIAEAR7R(s[5515]);
initIAPYW8(s[5516]);
initIAERN8(s[5517]);
initIAEAR8L(s[5518]);
initIAEAR8U(s[5519]);
initIAEAR8E(s[5520]);
initIAEAR8R(s[5521]);
initIAPYW9(s[5522]);
initIAERN9(s[5523]);
initIAEAR9L(s[5524]);
initIAEAR9U(s[5525]);
initIAEAR9E(s[5526]);
initIAEAR9R(s[5527]);
initIAPYW10(s[5528]);
initIAERN10(s[5529]);
initIAEA10L(s[5530]);
initIAEA10U(s[5531]);
initIAEA10E(s[5532]);
initIAEA10R(s[5533]);
initIAPAYW11(s[5534]);
initIAEARN11(s[5535]);
initIAEA11L(s[5536]);
initIAEA11U(s[5537]);
initIAEA11E(s[5538]);
initIAEA11R(s[5539]);
initIAREC(s[5540]);
initIARECL(s[5541]);
initIARECU(s[5542]);
initIARECE(s[5543]);
initIARECR(s[5544]);
initIAOM(s[5545]);
initIAOMM(s[5546]);
initIAOMML(s[5547]);
initIAOMMU(s[5548]);
initIAOMME(s[5549]);
initIAOMMR(s[5550]);
initIAPID(s[5551]);
initIADATM(s[5552]);
initIADATY(s[5553]);
initHOWHO(s[5554]);
initHOWH1(s[5555]);
initHOWH2(s[5556]);
initHOWH3(s[5557]);
initHOWH4(s[5558]);
initHOWH5(s[5559]);
initHOWH6(s[5560]);
initHOWH7(s[5561]);
initHOWH8(s[5562]);
initHOWH9(s[5563]);
initHOWH10(s[5564]);
initHOWH11(s[5565]);
initHOWH12(s[5566]);
initHOWH97(s[5567]);
initHOELI(s[5568]);
initHOBAS(s[5569]);
initHOBP(s[5570]);
initHOBA(s[5571]);
initHOBAWU(s[5572]);
initHOBAWL(s[5573]);
initHOBAWE(s[5574]);
initHOBAWR(s[5575]);
initHOBAFL(s[5576]);
initHOBAFU(s[5577]);
initHOBAFE(s[5578]);
initHOBAFR(s[5579]);
initHOBAML(s[5580]);
initHOBAMU(s[5581]);
initHOBAME(s[5582]);
initHOBAMR(s[5583]);
initHOBAYL(s[5584]);
initHOBAYU(s[5585]);
initHOBAYE(s[5586]);
initHOBAYR(s[5587]);
initHOBAOL(s[5588]);
initHOBAOU(s[5589]);
initHOBAOE(s[5590]);
initHOBAOR(s[5591]);
initHOBAS2(s[5592]);
initHOBP2(s[5593]);
initHOBA2(s[5594]);
initHOBA2WL(s[5595]);
initHOBA2WU(s[5596]);
initHOBA2WE(s[5597]);
initHOBA2WR(s[5598]);
initHOBA2FL(s[5599]);
initHOBA2FU(s[5600]);
initHOBA2FE(s[5601]);
initHOBA2FR(s[5602]);
initHOBA2ML(s[5603]);
initHOBA2MU(s[5604]);
initHOBA2ME(s[5605]);
initHOBA2MR(s[5606]);
initHOBA2YL(s[5607]);
initHOBA2YU(s[5608]);
initHOBA2YE(s[5609]);
initHOBA2YR(s[5610]);
initHOBA2OL(s[5611]);
initHOBA2OU(s[5612]);
initHOBA2OE(s[5613]);
initHOBA2OR(s[5614]);
initHOBAS3(s[5615]);
initHOBP3(s[5616]);
initHOBA3(s[5617]);
initHOBA3WL(s[5618]);
initHOBA3WU(s[5619]);
initHOBA3WE(s[5620]);
initHOBA3WR(s[5621]);
initHOBA3FL(s[5622]);
initHOBA3FU(s[5623]);
initHOBA3FE(s[5624]);
initHOBA3FR(s[5625]);
initHOBA3ML(s[5626]);
initHOBA3MU(s[5627]);
initHOBA3ME(s[5628]);
initHOBA3MR(s[5629]);
initHOBA3YL(s[5630]);
initHOBA3YU(s[5631]);
initHOBA3YE(s[5632]);
initHOBA3YR(s[5633]);
initHOBA3OL(s[5634]);
initHOBA3OU(s[5635]);
initHOBA3OE(s[5636]);
initHOBA3OR(s[5637]);
initHOBAS4(s[5638]);
initHOBP4(s[5639]);
initHOBA4(s[5640]);
initHOBA4WL(s[5641]);
initHOBA4WU(s[5642]);
initHOBA4WE(s[5643]);
initHOBA4WR(s[5644]);
initHOBA4FL(s[5645]);
initHOBA4FU(s[5646]);
initHOBA4FE(s[5647]);
initHOBA4FR(s[5648]);
initHOBA4ML(s[5649]);
initHOBA4MU(s[5650]);
initHOBA4ME(s[5651]);
initHOBA4MR(s[5652]);
initHOBA4YL(s[5653]);
initHOBA4YU(s[5654]);
initHOBA4YE(s[5655]);
initHOBA4YR(s[5656]);
initHOBA4OL(s[5657]);
initHOBA4OU(s[5658]);
initHOBA4OE(s[5659]);
initHOBA4OR(s[5660]);
initHOBAS5(s[5661]);
initHOBP5(s[5662]);
initHOBA5(s[5663]);
initHOBA5WL(s[5664]);
initHOBA5WU(s[5665]);
initHOBA5WE(s[5666]);
initHOBA5WR(s[5667]);
initHOBA5FL(s[5668]);
initHOBA5FU(s[5669]);
initHOBA5FE(s[5670]);
initHOBA5FR(s[5671]);
initHOBA5ML(s[5672]);
initHOBA5MU(s[5673]);
initHOBA5ME(s[5674]);
initHOBA5MR(s[5675]);
initHOBA5YL(s[5676]);
initHOBA5YU(s[5677]);
initHOBA5YE(s[5678]);
initHOBA5YR(s[5679]);
initHOBA5OL(s[5680]);
initHOBA5OU(s[5681]);
initHOBA5OE(s[5682]);
initHOBA5OR(s[5683]);
initHOBAS6(s[5684]);
initHOBP6(s[5685]);
initHOBA6(s[5686]);
initHOBA6WL(s[5687]);
initHOBA6WU(s[5688]);
initHOBA6WE(s[5689]);
initHOBA6WR(s[5690]);
initHOBA6FL(s[5691]);
initHOBA6FU(s[5692]);
initHOBA6FE(s[5693]);
initHOBA6FR(s[5694]);
initHOBA6ML(s[5695]);
initHOBA6MU(s[5696]);
initHOBA6ME(s[5697]);
initHOBA6MR(s[5698]);
initHOBA6YL(s[5699]);
initHOBA6YU(s[5700]);
initHOBA6YE(s[5701]);
initHOBA6YR(s[5702]);
initHOBA6OL(s[5703]);
initHOBA6OU(s[5704]);
initHOBA6OE(s[5705]);
initHOBA6OR(s[5706]);
initHOBAS7(s[5707]);
initHOBP7(s[5708]);
initHOBA7(s[5709]);
initHOBA7WL(s[5710]);
initHOBA7WU(s[5711]);
initHOBA7WE(s[5712]);
initHOBA7WR(s[5713]);
initHOBA7FL(s[5714]);
initHOBA7FU(s[5715]);
initHOBA7FE(s[5716]);
initHOBA7FR(s[5717]);
initHOBA7ML(s[5718]);
initHOBA7MU(s[5719]);
initHOBA7ME(s[5720]);
initHOBA7MR(s[5721]);
initHOBA7YL(s[5722]);
initHOBA7YU(s[5723]);
initHOBA7YE(s[5724]);
initHOBA7YR(s[5725]);
initHOBA7OL(s[5726]);
initHOBA7OU(s[5727]);
initHOBA7OE(s[5728]);
initHOBA7OR(s[5729]);
initHOBAS8(s[5730]);
initHOBP8(s[5731]);
initHOBA8(s[5732]);
initHOBA8WL(s[5733]);
initHOBA8WU(s[5734]);
initHOBA8WE(s[5735]);
initHOBA8WR(s[5736]);
initHOBA8FL(s[5737]);
initHOBA8FU(s[5738]);
initHOBA8FE(s[5739]);
initHOBA8FR(s[5740]);
initHOBA8ML(s[5741]);
initHOBA8MU(s[5742]);
initHOBA8ME(s[5743]);
initHOBA8MR(s[5744]);
initHOBA8YL(s[5745]);
initHOBA8YU(s[5746]);
initHOBA8YE(s[5747]);
initHOBA8YR(s[5748]);
initHOBA8OL(s[5749]);
initHOBA8OU(s[5750]);
initHOBA8OE(s[5751]);
initHOBA8OR(s[5752]);
initHOBAS9(s[5753]);
initHOBP9(s[5754]);
initHOBA9(s[5755]);
initHOBA9WL(s[5756]);
initHOBA9WU(s[5757]);
initHOBA9WE(s[5758]);
initHOBA9WR(s[5759]);
initHOBA9FL(s[5760]);
initHOBA9FU(s[5761]);
initHOBA9FE(s[5762]);
initHOBA9FR(s[5763]);
initHOBA9ML(s[5764]);
initHOBA9MU(s[5765]);
initHOBA9ME(s[5766]);
initHOBA9MR(s[5767]);
initHOBA9YL(s[5768]);
initHOBA9YU(s[5769]);
initHOBA9YE(s[5770]);
initHOBA9YR(s[5771]);
initHOBA9OL(s[5772]);
initHOBA9OU(s[5773]);
initHOBA9OE(s[5774]);
initHOBA9OR(s[5775]);
initHOTENUN(s[5776]);
initHOTENST(s[5777]);
initHOTENU(s[5778]);
initHOJOB(s[5779]);
initHOLAND(s[5780]);
initHOFURN(s[5781]);
initHOPART(s[5782]);
initHPOPR(s[5783]);
initHOPERI(s[5784]);
initHORENT(s[5785]);
initHORENWL(s[5786]);
initHORENWU(s[5787]);
initHORENWE(s[5788]);
initHORENWR(s[5789]);
initHORENFL(s[5790]);
initHORENFU(s[5791]);
initHORENFE(s[5792]);
initHORENFR(s[5793]);
initHORENML(s[5794]);
initHORENMU(s[5795]);
initHORENME(s[5796]);
initHORENMR(s[5797]);
initHORENYL(s[5798]);
initHORENYU(s[5799]);
initHORENYE(s[5800]);
initHORENYR(s[5801]);
initHORENOL(s[5802]);
initHORENOU(s[5803]);
initHORENOE(s[5804]);
initHORENOR(s[5805]);
initHOINCLWA(s[5806]);
initHOINCLSE(s[5807]);
initHOINCLLA(s[5808]);
initHOINCLGA(s[5809]);
initHOINCLHE(s[5810]);
initHOINCLCO(s[5811]);
initHOINCL96(s[5812]);
initHOINAME(s[5813]);
initHOINAGD(s[5814]);
initHOINACL(s[5815]);
initHOINAWP(s[5816]);
initHOINASG(s[5817]);
initHOINA95(s[5818]);
initHOINA96(s[5819]);
initHOINAMME(s[5820]);
initHOINAMGD(s[5821]);
initHOINAMCL(s[5822]);
initHOINAMWP(s[5823]);
initHOINAMSG(s[5824]);
initHOINAM85(s[5825]);
initHOINAM86(s[5826]);
initHOINAM95(s[5827]);
initHOINAM96(s[5828]);
initHOHBEN(s[5829]);
initHORHB(s[5830]);
initHOHBCK(s[5831]);
initHOREBA(s[5832]);
initHOREBP(s[5833]);
initHOREBWL(s[5834]);
initHOREBWU(s[5835]);
initHOREBWE(s[5836]);
initHOREBWR(s[5837]);
initHOREBFL(s[5838]);
initHOREBFU(s[5839]);
initHOREBFE(s[5840]);
initHOREBFR(s[5841]);
initHOREBML(s[5842]);
initHOREBMU(s[5843]);
initHOREBME(s[5844]);
initHOREBMR(s[5845]);
initHOREBYL(s[5846]);
initHOREBYU(s[5847]);
initHOREBYE(s[5848]);
initHOREBYR(s[5849]);
initHOREBOL(s[5850]);
initHOREBOU(s[5851]);
initHOREBOE(s[5852]);
initHOREBOR(s[5853]);
initHOHBP(s[5854]);
initHOHBA(s[5855]);
initHOHBAWL(s[5856]);
initHOHBAWU(s[5857]);
initHOHBAWE(s[5858]);
initHOHBAWR(s[5859]);
initHOHBAFL(s[5860]);
initHOHBAFU(s[5861]);
initHOHBAFE(s[5862]);
initHOHBAFR(s[5863]);
initHOHBAML(s[5864]);
initHOHBAMU(s[5865]);
initHOHBAME(s[5866]);
initHOHBAMR(s[5867]);
initHOHBAYL(s[5868]);
initHOHBAYU(s[5869]);
initHOHBAYE(s[5870]);
initHOHBAYR(s[5871]);
initHOHBAOL(s[5872]);
initHOHBAOU(s[5873]);
initHOHBAOE(s[5874]);
initHOHBAOR(s[5875]);
initHOHBME(s[5876]);
initHOHBGA(s[5877]);
initHOHBCL(s[5878]);
initHOHBWP(s[5879]);
initHOHBSG(s[5880]);
initHOHB95(s[5881]);
initHOHB96(s[5882]);
initHOHBMME(s[5883]);
initHOHBMGA(s[5884]);
initHOHBMCL(s[5885]);
initHOHBMWP(s[5886]);
initHOHBMSG(s[5887]);
initHOHBM85(s[5888]);
initHOHBM86(s[5889]);
initHOHBM95(s[5890]);
initHOHBM96(s[5891]);
initHOYEAR(s[5892]);
initHOPAY(s[5893]);
initHOPAYL(s[5894]);
initHOPAYU(s[5895]);
initHOPAYE(s[5896]);
initHOPAYR(s[5897]);
initHOSELL(s[5898]);
initHOSOLD(s[5899]);
initHOSOLDL(s[5900]);
initHOSOLDU(s[5901]);
initHOSOLDE(s[5902]);
initHOSOLDR(s[5903]);
initHORTB(s[5904]);
initHORTBE(s[5905]);
initHOEVM(s[5906]);
initHOORM(s[5907]);
initHOSELLP(s[5908]);
initHOSELLL(s[5909]);
initHOSELLU(s[5910]);
initHOSELLE(s[5911]);
initHOSELLR(s[5912]);
initHOOUTM(s[5913]);
initHOMSAM1E(s[5914]);
initHOMFV1E(s[5915]);
initHOVML1E(s[5916]);
initHOVMLL1E(s[5917]);
initHOVMLU1E(s[5918]);
initHOVMLE1E(s[5919]);
initHOVMLR1E(s[5920]);
initHOVE1E(s[5921]);
initHOVEL1E(s[5922]);
initHOVEU1E(s[5923]);
initHOVEE1E(s[5924]);
initHOVER1E(s[5925]);
initHOYML1E(s[5926]);
initHOMEXT1E(s[5927]);
initHOMEXA1E(s[5928]);
initHOMEXL1E(s[5929]);
initHOMEXU1E(s[5930]);
initHOMEXE1E(s[5931]);
initHOMEXR1E(s[5932]);
initHOMUHE1E(s[5933]);
initHOMUHI1E(s[5934]);
initHOMUCP1E(s[5935]);
initHOMUOC1E(s[5936]);
initHOMUOT1E(s[5937]);
initHOMMHE1E(s[5938]);
initHOMMHI1E(s[5939]);
initHOMMCP1E(s[5940]);
initHOMMOC1E(s[5941]);
initHOMMOT1E(s[5942]);
initHOMM851E(s[5943]);
initHOMM861E(s[5944]);
initHOMREA1E(s[5945]);
initHOMTY1N(s[5946]);
initHORMO1N(s[5947]);
initHOMFV1N(s[5948]);
initHOVML1N(s[5949]);
initHOVMLL1N(s[5950]);
initHOVMLU1N(s[5951]);
initHOVMLE1N(s[5952]);
initHOVMLR1N(s[5953]);
initHOVE1N(s[5954]);
initHOVEL1N(s[5955]);
initHOVEU1N(s[5956]);
initHOVEE1N(s[5957]);
initHOVER1N(s[5958]);
initHOYML1N(s[5959]);
initHOMSAM2E(s[5960]);
initHOMFV2E(s[5961]);
initHOVML2E(s[5962]);
initHOVMLL2E(s[5963]);
initHOVMLU2E(s[5964]);
initHOVMLE2E(s[5965]);
initHOVMLR2E(s[5966]);
initHOVE2E(s[5967]);
initHOVEL2E(s[5968]);
initHOVEU2E(s[5969]);
initHOVEE2E(s[5970]);
initHOVER2E(s[5971]);
initHOYML2E(s[5972]);
initHOMEXT2E(s[5973]);
initHOMEXA2E(s[5974]);
initHOMEXL2E(s[5975]);
initHOMEXU2E(s[5976]);
initHOMEXE2E(s[5977]);
initHOMEXR2E(s[5978]);
initHOMUHE2E(s[5979]);
initHOMUHI2E(s[5980]);
initHOMUCP2E(s[5981]);
initHOMUOC2E(s[5982]);
initHOMUOT2E(s[5983]);
initHOMMHE2E(s[5984]);
initHOMMHI2E(s[5985]);
initHOMMCP2E(s[5986]);
initHOMMOC2E(s[5987]);
initHOMMOT2E(s[5988]);
initHOMM852E(s[5989]);
initHOMM862E(s[5990]);
initHOMREA2E(s[5991]);
initHOMTY2N(s[5992]);
initHORMO2N(s[5993]);
initHOMFV2N(s[5994]);
initHOVML2N(s[5995]);
initHOVMLL2N(s[5996]);
initHOVMLU2N(s[5997]);
initHOVMLE2N(s[5998]);
initHOVMLR2N(s[5999]);
initHOVE2N(s[6000]);
initHOVEL2N(s[6001]);
initHOVEU2N(s[6002]);
initHOVEE2N(s[6003]);
initHOVER2N(s[6004]);
initHOYML2N(s[6005]);
initHOMSAM3E(s[6006]);
initHOMFV3E(s[6007]);
initHOVML3E(s[6008]);
initHOVMLL3E(s[6009]);
initHOVMLU3E(s[6010]);
initHOVMLE3E(s[6011]);
initHOVMLR3E(s[6012]);
initHOVE3E(s[6013]);
initHOVEL3E(s[6014]);
initHOVEU3E(s[6015]);
initHOVEE3E(s[6016]);
initHOVER3E(s[6017]);
initHOYML3E(s[6018]);
initHOMEXT3E(s[6019]);
initHOMEXA3E(s[6020]);
initHOMEXL3E(s[6021]);
initHOMEXU3E(s[6022]);
initHOMEXE3E(s[6023]);
initHOMEXR3E(s[6024]);
initHOMUHE3E(s[6025]);
initHOMUHI3E(s[6026]);
initHOMUCP3E(s[6027]);
initHOMUOC3E(s[6028]);
initHOMUOT3E(s[6029]);
initHOMMHE3E(s[6030]);
initHOMMHI3E(s[6031]);
initHOMMCP3E(s[6032]);
initHOMMOC3E(s[6033]);
initHOMMOT3E(s[6034]);
initHOMM853E(s[6035]);
initHOMM863E(s[6036]);
initHOMREA3E(s[6037]);
initHOMTY3N(s[6038]);
initHORMO3N(s[6039]);
initHOMFV3N(s[6040]);
initHOVML3N(s[6041]);
initHOVMLL3N(s[6042]);
initHOVMLU3N(s[6043]);
initHOVMLE3N(s[6044]);
initHOVMLR3N(s[6045]);
initHOVE3N(s[6046]);
initHOVEL3N(s[6047]);
initHOVEU3N(s[6048]);
initHOVEE3N(s[6049]);
initHOVER3N(s[6050]);
initHOYML3N(s[6051]);
initHOMSAM4E(s[6052]);
initHOMFV4E(s[6053]);
initHOVML4E(s[6054]);
initHOVMLL4E(s[6055]);
initHOVMLU4E(s[6056]);
initHOVMLE4E(s[6057]);
initHOVMLR4E(s[6058]);
initHOVE4E(s[6059]);
initHOVEL4E(s[6060]);
initHOVEU4E(s[6061]);
initHOVEE4E(s[6062]);
initHOVER4E(s[6063]);
initHOYML4E(s[6064]);
initHOMEXT4E(s[6065]);
initHOMEXA4E(s[6066]);
initHOMEXL4E(s[6067]);
initHOMEXU4E(s[6068]);
initHOMEXE4E(s[6069]);
initHOMEXR4E(s[6070]);
initHOMUHE4E(s[6071]);
initHOMUHI4E(s[6072]);
initHOMUCP4E(s[6073]);
initHOMUOC4E(s[6074]);
initHOMUOT4E(s[6075]);
initHOMMHE4E(s[6076]);
initHOMMHI4E(s[6077]);
initHOMMCP4E(s[6078]);
initHOMMOC4E(s[6079]);
initHOMMOT4E(s[6080]);
initHOMM854E(s[6081]);
initHOMM864E(s[6082]);
initHOMREA4E(s[6083]);
initHOMTY4N(s[6084]);
initHORMO4N(s[6085]);
initHOMFV4N(s[6086]);
initHOVML4N(s[6087]);
initHOVMLL4N(s[6088]);
initHOVMLU4N(s[6089]);
initHOVMLE4N(s[6090]);
initHOVMLR4N(s[6091]);
initHOVE4N(s[6092]);
initHOVEL4N(s[6093]);
initHOVEU4N(s[6094]);
initHOVEE4N(s[6095]);
initHOVER4N(s[6096]);
initHOYML4N(s[6097]);
initHOMSAM5E(s[6098]);
initHOMFV5E(s[6099]);
initHOVML5E(s[6100]);
initHOVMLL5E(s[6101]);
initHOVMLU5E(s[6102]);
initHOVMLE5E(s[6103]);
initHOVMLR5E(s[6104]);
initHOVE5E(s[6105]);
initHOVEL5E(s[6106]);
initHOVEU5E(s[6107]);
initHOVEE5E(s[6108]);
initHOVER5E(s[6109]);
initHOYML5E(s[6110]);
initHOMEXT5E(s[6111]);
initHOMEXA5E(s[6112]);
initHOMEXL5E(s[6113]);
initHOMEXU5E(s[6114]);
initHOMEXE5E(s[6115]);
initHOMEXR5E(s[6116]);
initHOMUHE5E(s[6117]);
initHOMUHI5E(s[6118]);
initHOMUCP5E(s[6119]);
initHOMUOC5E(s[6120]);
initHOMUOT5E(s[6121]);
initHOMMHE5E(s[6122]);
initHOMMHI5E(s[6123]);
initHOMMCP5E(s[6124]);
initHOMMOC5E(s[6125]);
initHOMMOT5E(s[6126]);
initHOMM855E(s[6127]);
initHOMM865E(s[6128]);
initHOMREA5E(s[6129]);
initHOMTY5N(s[6130]);
initHORMO5N(s[6131]);
initHOMFV5N(s[6132]);
initHOVML5N(s[6133]);
initHOVMLL5N(s[6134]);
initHOVMLU5N(s[6135]);
initHOVMLE5N(s[6136]);
initHOVMLR5N(s[6137]);
initHOVE5N(s[6138]);
initHOVEL5N(s[6139]);
initHOVEU5N(s[6140]);
initHOVEE5N(s[6141]);
initHOVER5N(s[6142]);
initHOYML5N(s[6143]);
initHOMNEW(s[6144]);
initHOMNEWN(s[6145]);
initHOMNHE1A(s[6146]);
initHOMNHI1A(s[6147]);
initHOMNCP1A(s[6148]);
initHOMNOC1A(s[6149]);
initHOMNOT1A(s[6150]);
initHOMN961A(s[6151]);
initHOMNRE1A(s[6152]);
initHOMNEA1A(s[6153]);
initHOMNEL1A(s[6154]);
initHOMNEU1A(s[6155]);
initHOMNEE1A(s[6156]);
initHOMNER1A(s[6157]);
initHOMTY1A(s[6158]);
initHORMO1A(s[6159]);
initHOMFV1A(s[6160]);
initHOVML1A(s[6161]);
initHOVMLL1A(s[6162]);
initHOVMLU1A(s[6163]);
initHOVMLE1A(s[6164]);
initHOVMLR1A(s[6165]);
initHOVE1A(s[6166]);
initHOVEL1A(s[6167]);
initHOVEU1A(s[6168]);
initHOVEE1A(s[6169]);
initHOVER1A(s[6170]);
initHOYML1A(s[6171]);
initHOMTY2A(s[6172]);
initHORMO2A(s[6173]);
initHOMFV2A(s[6174]);
initHOVML2A(s[6175]);
initHOVMLL2A(s[6176]);
initHOVMLU2A(s[6177]);
initHOVMLE2A(s[6178]);
initHOVMLR2A(s[6179]);
initHOVE2A(s[6180]);
initHOVEL2A(s[6181]);
initHOVEU2A(s[6182]);
initHOVEE2A(s[6183]);
initHOVER2A(s[6184]);
initHOYML2A(s[6185]);
initHOMMIS(s[6186]);
initHOMMISN(s[6187]);
initHOMTY1M(s[6188]);
initHORMO1M(s[6189]);
initHOMFV1M(s[6190]);
initHOVML1M(s[6191]);
initHOVMLL1M(s[6192]);
initHOVMLU1M(s[6193]);
initHOVMLE1M(s[6194]);
initHOVMLR1M(s[6195]);
initHOVE1M(s[6196]);
initHOVEL1M(s[6197]);
initHOVEU1M(s[6198]);
initHOVEE1M(s[6199]);
initHOVER1M(s[6200]);
initHOYML1M(s[6201]);
initHOMTY2M(s[6202]);
initHORMO2M(s[6203]);
initHOMFV2M(s[6204]);
initHOVML2M(s[6205]);
initHOVMLL2M(s[6206]);
initHOVMLU2M(s[6207]);
initHOVMLE2M(s[6208]);
initHOVMLR2M(s[6209]);
initHOVE2M(s[6210]);
initHOVEL2M(s[6211]);
initHOVEU2M(s[6212]);
initHOVEE2M(s[6213]);
initHOVER2M(s[6214]);
initHOYML2M(s[6215]);
initHOMNUM(s[6216]);
initHOMREP(s[6217]);
initHOMREPL(s[6218]);
initHOMREPU(s[6219]);
initHOMREPE(s[6220]);
initHOMREPR(s[6221]);
initHOINCPP(s[6222]);
initHOINCBI(s[6223]);
initHOINCPI(s[6224]);
initHOINCOT(s[6225]);
initHOINC96(s[6226]);
initHOINCMPP(s[6227]);
initHOINCMBI(s[6228]);
initHOINCMPI(s[6229]);
initHOINCMOT(s[6230]);
initHOINCM85(s[6231]);
initHOINCM86(s[6232]);
initHOINCM96(s[6233]);
initHOINCC(s[6234]);
initANYREMOR(s[6235]);
initHOEVRE(s[6236]);
initHORINHI(s[6237]);
initHORINHR(s[6238]);
initHORINPA(s[6239]);
initHORINOT(s[6240]);
initHORIN96(s[6241]);
initHORIN97(s[6242]);
initHORINMHI(s[6243]);
initHORINMHR(s[6244]);
initHORINMPA(s[6245]);
initHORINMOT(s[6246]);
initHORINM85(s[6247]);
initHORINM86(s[6248]);
initHORINM96(s[6249]);
initHORINM97(s[6250]);
initHORMOL(s[6251]);
initHORMOLL(s[6252]);
initHORMOLU(s[6253]);
initHORMOLE(s[6254]);
initHORMOLR(s[6255]);
initHORINM(s[6256]);
initHORINML(s[6257]);
initHORINMU(s[6258]);
initHORINME(s[6259]);
initHORINMR(s[6260]);
initHORPAY(s[6261]);
initHORPM(s[6262]);
initHORPML(s[6263]);
initHORPMU(s[6264]);
initHORPME(s[6265]);
initHORPMR(s[6266]);
initHOMINC(s[6267]);
initHOMINCL(s[6268]);
initHOMINCU(s[6269]);
initHOMINCE(s[6270]);
initHOMINCR(s[6271]);
initHORMS(s[6272]);
initHORRM(s[6273]);
initHORRML(s[6274]);
initHORRMU(s[6275]);
initHORRME(s[6276]);
initHORRMR(s[6277]);
initHORFEE1(s[6278]);
initHORFEE2(s[6279]);
initHORFEP1(s[6280]);
initHORFEP2(s[6281]);
initHOALF1(s[6282]);
initHOALF2(s[6283]);
initHOALFM1(s[6284]);
initHOALFM2(s[6285]);
initHOALF1L(s[6286]);
initHOALF1U(s[6287]);
initHOALF1R(s[6288]);
initHOALF1T(s[6289]);
initHOALF2L(s[6290]);
initHOALF2U(s[6291]);
initHOALF2R(s[6292]);
initHOALF2T(s[6293]);
initHOALI1(s[6294]);
initHOALI2(s[6295]);
initHORPOS(s[6296]);
initHORPOF(s[6297]);
initHORMU(s[6298]);
initHORMUWL(s[6299]);
initHORMUWU(s[6300]);
initHORMUWE(s[6301]);
initHORMUWR(s[6302]);
initHORMUFL(s[6303]);
initHORMUFU(s[6304]);
initHORMUFE(s[6305]);
initHORMUFR(s[6306]);
initHORMUML(s[6307]);
initHORMUMU(s[6308]);
initHORMUME(s[6309]);
initHORMUMR(s[6310]);
initHORMUYL(s[6311]);
initHORMUYU(s[6312]);
initHORMUYE(s[6313]);
initHORMUYR(s[6314]);
initHORMUOL(s[6315]);
initHORMUOU(s[6316]);
initHORMUOE(s[6317]);
initHORMUOR(s[6318]);
initHORPC(s[6319]);
initHORPCM(s[6320]);
initHORPCML(s[6321]);
initHORPCMU(s[6322]);
initHORPCME(s[6323]);
initHORPCMR(s[6324]);
initHORPOSO(s[6325]);
initHORPOFO(s[6326]);
initHORMUO(s[6327]);
initHORMOWL(s[6328]);
initHORMOWU(s[6329]);
initHORMOWE(s[6330]);
initHORMOWR(s[6331]);
initHORMOFL(s[6332]);
initHORMOFU(s[6333]);
initHORMOFE(s[6334]);
initHORMOFR(s[6335]);
initHORMOML(s[6336]);
initHORMOMU(s[6337]);
initHORMOME(s[6338]);
initHORMOMR(s[6339]);
initHORMOYL(s[6340]);
initHORMOYU(s[6341]);
initHORMOYE(s[6342]);
initHORMOYR(s[6343]);
initHORMOOL(s[6344]);
initHORMOOU(s[6345]);
initHORMOOE(s[6346]);
initHORMOOR(s[6347]);
initHOOLD(s[6348]);
initHOCTA(s[6349]);
initHODISC(s[6350]);
initHODIFF(s[6351]);
initHODIFFT(s[6352]);
initHODOC(s[6353]);
initHOINTA(s[6354]);
initHORET(s[6355]);
initHOMOVE(s[6356]);
initHORMVJR(s[6357]);
initHORMVNJ(s[6358]);
initHORMVBA(s[6359]);
initHORMVMS(s[6360]);
initHORMVBO(s[6361]);
initHORMVER(s[6362]);
initHORMVHR(s[6363]);
initHORMVPN(s[6364]);
initHORMVSP(s[6365]);
initHORMVIF(s[6366]);
initHORMVNF(s[6367]);
initHORMVOF(s[6368]);
initHORMV95(s[6369]);
initHORMVMJR(s[6370]);
initHORMVMNJ(s[6371]);
initHORMVMBA(s[6372]);
initHORMVMMS(s[6373]);
initHORMVMBO(s[6374]);
initHORMVMER(s[6375]);
initHORMVMHR(s[6376]);
initHORMVMPN(s[6377]);
initHORMVMSP(s[6378]);
initHORMVMIF(s[6379]);
initHORMVMNF(s[6380]);
initHORMVMOF(s[6381]);
initHORMVMPC(s[6382]);
initHORMVMNH(s[6383]);
initHORMVMAB(s[6384]);
initHORMO85(s[6385]);
initHORMO86(s[6386]);
initHORMAIN(s[6387]);
initHORMOSM(s[6388]);
initHORMOLA(s[6389]);
initHORMOFP(s[6390]);
initHORMOSH(s[6391]);
initHORMOOT(s[6392]);
initHORMOMSM(s[6393]);
initHORMOMLA(s[6394]);
initHORMOMFP(s[6395]);
initHORMOMSH(s[6396]);
initHORMOMNS(s[6397]);
initHORMOMBQ(s[6398]);
initHORMOMBA(s[6399]);
initHORMOM85(s[6400]);
initHORMOM86(s[6401]);
initHOROOM(s[6402]);
initHOADPWD(s[6403]);
initHOADPRS(s[6404]);
initHOADPHR(s[6405]);
initHOADPAD(s[6406]);
initHOADPAP(s[6407]);
initHOADPBM(s[6408]);
initHOADPKM(s[6409]);
initHOADPLI(s[6410]);
initHOADPCL(s[6411]);
initHOADPAL(s[6412]);
initHOADP95(s[6413]);
initHOADP96(s[6414]);
initHOAIWDHS(s[6415]);
initHOAIWDSS(s[6416]);
initHOAIWDYS(s[6417]);
initHOAIWDOT(s[6418]);
initHOAIRSHS(s[6419]);
initHOAIRSSS(s[6420]);
initHOAIRSYS(s[6421]);
initHOAIRSOT(s[6422]);
initHOAIHRHS(s[6423]);
initHOAIHRSS(s[6424]);
initHOAIHRYS(s[6425]);
initHOAIHROT(s[6426]);
initHOAIADHS(s[6427]);
initHOAIADSS(s[6428]);
initHOAIADYS(s[6429]);
initHOAIADOT(s[6430]);
initHOAIAPHS(s[6431]);
initHOAIAPSS(s[6432]);
initHOAIAPYS(s[6433]);
initHOAIAPOT(s[6434]);
initHOAIBMHS(s[6435]);
initHOAIBMSS(s[6436]);
initHOAIBMYS(s[6437]);
initHOAIBMOT(s[6438]);
initHOAIKMHS(s[6439]);
initHOAIKMSS(s[6440]);
initHOAIKMYS(s[6441]);
initHOAIKMOT(s[6442]);
initHOAILIHS(s[6443]);
initHOAILISS(s[6444]);
initHOAILIYS(s[6445]);
initHOAILIOT(s[6446]);
initHOAICLHS(s[6447]);
initHOAICLSS(s[6448]);
initHOAICLYS(s[6449]);
initHOAICLOT(s[6450]);
initHOAIALHS(s[6451]);
initHOAIALSS(s[6452]);
initHOAIALYS(s[6453]);
initHOAIALOT(s[6454]);
initHOPROSP(s[6455]);
initHOPRONZ(s[6456]);
initHOPROSN(s[6457]);
initHOPRODK(s[6458]);
initHOPROPO(s[6459]);
initHOPRORD(s[6460]);
initHOPROWA(s[6461]);
initHOPROCP(s[6462]);
initHOPROEP(s[6463]);
initHOPRORO(s[6464]);
initHOPROIN(s[6465]);
initHOPROCO(s[6466]);
initHOPRO95(s[6467]);
initHOPRO96(s[6468]);
initHOPROMSP(s[6469]);
initHOPROMNZ(s[6470]);
initHOPROMSN(s[6471]);
initHOPROMDK(s[6472]);
initHOPROMPO(s[6473]);
initHOPROMRD(s[6474]);
initHOPROMWA(s[6475]);
initHOPROMCP(s[6476]);
initHOPROMEP(s[6477]);
initHOPROMRO(s[6478]);
initHOPROMIN(s[6479]);
initHOPROMCO(s[6480]);
initHOPROMVA(s[6481]);
initHOPROMST(s[6482]);
initHOPROM85(s[6483]);
initHOPROM86(s[6484]);
initHOPROM95(s[6485]);
initHOPROM96(s[6486]);
initHOHAVTV(s[6487]);
initHOHAVVR(s[6488]);
initHOHAVCD(s[6489]);
initHOHAVFF(s[6490]);
initHOHAVWM(s[6491]);
initHOHAVWD(s[6492]);
initHOHAVDW(s[6493]);
initHOHAVMO(s[6494]);
initHOHAVPC(s[6495]);
initHOHAVDT(s[6496]);
initHOHAVPH(s[6497]);
initHOHAVDV(s[6498]);
initHOHAV95(s[6499]);
initHOHAV96(s[6500]);
initHOHAVBTV(s[6501]);
initHOHAVBVR(s[6502]);
initHOHAVBCD(s[6503]);
initHOHAVBFF(s[6504]);
initHOHAVBWM(s[6505]);
initHOHAVBWD(s[6506]);
initHOHAVBDW(s[6507]);
initHOHAVBMO(s[6508]);
initHOHAVBPC(s[6509]);
initHOHAVBDT(s[6510]);
initHOHAVBPH(s[6511]);
initHOHAVBDV(s[6512]);
initHOHAVB95(s[6513]);
initHOHAVB96(s[6514]);
initHOHV01(s[6515]);
initHOHV02(s[6516]);
initHOHV03(s[6517]);
initHOHV04(s[6518]);
initHOHV05(s[6519]);
initHOHV06(s[6520]);
initHOHV07(s[6521]);
initHOHV08(s[6522]);
initHOHV09(s[6523]);
initHOHV10(s[6524]);
initHOHV11(s[6525]);
initHOHV12(s[6526]);
initHOHV01L(s[6527]);
initHOHV01U(s[6528]);
initHOHV01E(s[6529]);
initHOHV01R(s[6530]);
initHOHV02L(s[6531]);
initHOHV02U(s[6532]);
initHOHV02E(s[6533]);
initHOHV02R(s[6534]);
initHOHV03L(s[6535]);
initHOHV03U(s[6536]);
initHOHV03E(s[6537]);
initHOHV03R(s[6538]);
initHOHV04L(s[6539]);
initHOHV04U(s[6540]);
initHOHV04E(s[6541]);
initHOHV04R(s[6542]);
initHOHV05L(s[6543]);
initHOHV05U(s[6544]);
initHOHV05E(s[6545]);
initHOHV05R(s[6546]);
initHOHV06L(s[6547]);
initHOHV06U(s[6548]);
initHOHV06E(s[6549]);
initHOHV06R(s[6550]);
initHOHV07L(s[6551]);
initHOHV07U(s[6552]);
initHOHV07E(s[6553]);
initHOHV07R(s[6554]);
initHOHV08L(s[6555]);
initHOHV08U(s[6556]);
initHOHV08E(s[6557]);
initHOHV08R(s[6558]);
initHOHV09L(s[6559]);
initHOHV09U(s[6560]);
initHOHV09E(s[6561]);
initHOHV09R(s[6562]);
initHOHV10L(s[6563]);
initHOHV10U(s[6564]);
initHOHV10E(s[6565]);
initHOHV10R(s[6566]);
initHOHV11L(s[6567]);
initHOHV11U(s[6568]);
initHOHV11E(s[6569]);
initHOHV11R(s[6570]);
initHOHV12L(s[6571]);
initHOHV12U(s[6572]);
initHOHV12E(s[6573]);
initHOHV12R(s[6574]);
initHOCO(s[6575]);
initHOFOOD(s[6576]);
initHOFOODL(s[6577]);
initHOFOODU(s[6578]);
initHOFOODE(s[6579]);
initHOFOODR(s[6580]);
initHOOUTF(s[6581]);
initHOOUTFL(s[6582]);
initHOOUTFU(s[6583]);
initHOOUTFE(s[6584]);
initHOOUTFR(s[6585]);
initHOMEAL(s[6586]);
initHOMOFT(s[6587]);
initHOCL(s[6588]);
initHOCLL(s[6589]);
initHOCLU(s[6590]);
initHOCLE(s[6591]);
initHOCLR(s[6592]);
initHOLEIS(s[6593]);
initHOLEISL(s[6594]);
initHOLEISU(s[6595]);
initHOLEISE(s[6596]);
initHOLEISR(s[6597]);
initHOCTF(s[6598]);
initHOCTFW(s[6599]);
initHOCTFA(s[6600]);
initHOCTFAL(s[6601]);
initHOCTFAU(s[6602]);
initHOCTFAE(s[6603]);
initHOCTFAR(s[6604]);
initHOTRAN(s[6605]);
initHOTRANL(s[6606]);
initHOTRANU(s[6607]);
initHOTRANE(s[6608]);
initHOTRANR(s[6609]);
initHOTRANGC(s[6610]);
initHOTRANOC(s[6611]);
initHOTRANOR(s[6612]);
initHOTRANCH(s[6613]);
initHOTRANNR(s[6614]);
initHOTRPA(s[6615]);
initHOTRAPGC(s[6616]);
initHOTRAPOC(s[6617]);
initHOTRAPOR(s[6618]);
initHOTRAPCH(s[6619]);
initHOTRAPNR(s[6620]);
initHOTRABGC(s[6621]);
initHOTRABOC(s[6622]);
initHOTRABOR(s[6623]);
initHOTRABCH(s[6624]);
initHOTRABNR(s[6625]);
initHOCENH(s[6626]);
initHOCENP(s[6627]);
initHOHEAGF(s[6628]);
initHOHEAEF(s[6629]);
initHOHEAPH(s[6630]);
initHOHEAOF(s[6631]);
initHOHEA95(s[6632]);
initHOHEA96(s[6633]);
initHOHEAMGF(s[6634]);
initHOHEAMEF(s[6635]);
initHOHEAMPH(s[6636]);
initHOHEAMOF(s[6637]);
initHOHEAM85(s[6638]);
initHOHEAM86(s[6639]);
initHOOHEM95(s[6640]);
initHOHEAM96(s[6641]);
initHOFUELGA(s[6642]);
initHOFUELEL(s[6643]);
initHOFUELCO(s[6644]);
initHOFUELPA(s[6645]);
initHOFUELOI(s[6646]);
initHOFUELWO(s[6647]);
initHOFUELM1(s[6648]);
initHOFUELM2(s[6649]);
initHOFUELM3(s[6650]);
initHOFUELM4(s[6651]);
initHOFUELM5(s[6652]);
initHOFUELM6(s[6653]);
initHOFUELM8(s[6654]);
initHOFUELM9(s[6655]);
initHOFUEL95(s[6656]);
initHOFSUP(s[6657]);
initHOFTOG(s[6658]);
initHOFPAY(s[6659]);
initHOFD(s[6660]);
initHOFDM(s[6661]);
initHOFDML(s[6662]);
initHOFDMU(s[6663]);
initHOFDME(s[6664]);
initHOFDMR(s[6665]);
initHOFDQ(s[6666]);
initHOFDQL(s[6667]);
initHOFDQU(s[6668]);
initHOFDQE(s[6669]);
initHOFDQR(s[6670]);
initHOFB(s[6671]);
initHOFBMW(s[6672]);
initHOFBMWL(s[6673]);
initHOFBMWU(s[6674]);
initHOFBMWE(s[6675]);
initHOFBMWR(s[6676]);
initHOFBMS(s[6677]);
initHOFBMSL(s[6678]);
initHOFBMSU(s[6679]);
initHOFBMSE(s[6680]);
initHOFBMSR(s[6681]);
initHOFBQW(s[6682]);
initHOFBQWL(s[6683]);
initHOFBQWU(s[6684]);
initHOFBQWE(s[6685]);
initHOFBQWR(s[6686]);
initHOFBQS(s[6687]);
initHOFBQSL(s[6688]);
initHOFBQSU(s[6689]);
initHOFBQSE(s[6690]);
initHOFBQSR(s[6691]);
initHOFPW(s[6692]);
initHOFPWL(s[6693]);
initHOFPWU(s[6694]);
initHOFPWE(s[6695]);
initHOFPWR(s[6696]);
initHOFPS(s[6697]);
initHOFPSL(s[6698]);
initHOFPSU(s[6699]);
initHOFPSE(s[6700]);
initHOFPSR(s[6701]);
initHOFOW(s[6702]);
initHOFOWL(s[6703]);
initHOFOWU(s[6704]);
initHOFOWE(s[6705]);
initHOFOWR(s[6706]);
initHOFOS(s[6707]);
initHOFOSL(s[6708]);
initHOFOSU(s[6709]);
initHOFOSE(s[6710]);
initHOFOSR(s[6711]);
initHOFSP(s[6712]);
initHOFSW(s[6713]);
initHOFSWL(s[6714]);
initHOFSWU(s[6715]);
initHOFSWE(s[6716]);
initHOFSWR(s[6717]);
initHOFSM(s[6718]);
initHOFSML(s[6719]);
initHOFSMU(s[6720]);
initHOFSME(s[6721]);
initHOFSMR(s[6722]);
initHOFSQ(s[6723]);
initHOFSQL(s[6724]);
initHOFSQU(s[6725]);
initHOFSQE(s[6726]);
initHOFSQR(s[6727]);
initHOGPAY(s[6728]);
initHOGD(s[6729]);
initHOGDM(s[6730]);
initHOGDML(s[6731]);
initHOGDMU(s[6732]);
initHOGDME(s[6733]);
initHOGDMR(s[6734]);
initHOGDQ(s[6735]);
initHOGDQL(s[6736]);
initHOGDQU(s[6737]);
initHOGDQE(s[6738]);
initHOGDQR(s[6739]);
initHOGBP(s[6740]);
initHOGBMW(s[6741]);
initHOGBMWL(s[6742]);
initHOGBMWU(s[6743]);
initHOGBMWE(s[6744]);
initHOGBMWR(s[6745]);
initHOGBMS(s[6746]);
initHOGBMSL(s[6747]);
initHOGBMSU(s[6748]);
initHOGBMSE(s[6749]);
initHOGBMSR(s[6750]);
initHOGBQW(s[6751]);
initHOGBQWL(s[6752]);
initHOGBQWU(s[6753]);
initHOGBQWE(s[6754]);
initHOGBQWR(s[6755]);
initHOGBQS(s[6756]);
initHOGBQSL(s[6757]);
initHOGBQSU(s[6758]);
initHOGBQSE(s[6759]);
initHOGBQSR(s[6760]);
initHOGPW(s[6761]);
initHOGPWL(s[6762]);
initHOGPWU(s[6763]);
initHOGPWE(s[6764]);
initHOGPWR(s[6765]);
initHOGPS(s[6766]);
initHOGPSL(s[6767]);
initHOGPSU(s[6768]);
initHOGPSE(s[6769]);
initHOGPSR(s[6770]);
initHOGOW(s[6771]);
initHOGOWL(s[6772]);
initHOGOWU(s[6773]);
initHOGOWE(s[6774]);
initHOGOWR(s[6775]);
initHOGOS(s[6776]);
initHOGOSL(s[6777]);
initHOGOSU(s[6778]);
initHOGOSE(s[6779]);
initHOGOSR(s[6780]);
initHOEPAY(s[6781]);
initHOED(s[6782]);
initHOEDM(s[6783]);
initHOEDML(s[6784]);
initHOEDMU(s[6785]);
initHOEDME(s[6786]);
initHOEDMR(s[6787]);
initHOEDQ(s[6788]);
initHOEDQL(s[6789]);
initHOEDQU(s[6790]);
initHOEDQE(s[6791]);
initHOEDQR(s[6792]);
initHOEB(s[6793]);
initHOEBMW(s[6794]);
initHOEBMWL(s[6795]);
initHOEBMWU(s[6796]);
initHOEBMWE(s[6797]);
initHOEBMWR(s[6798]);
initHOEBMS(s[6799]);
initHOEBMSL(s[6800]);
initHOEBMSU(s[6801]);
initHOEBMSE(s[6802]);
initHOEBMSR(s[6803]);
initHOEBQW(s[6804]);
initHOEBQWL(s[6805]);
initHOEBQWU(s[6806]);
initHOEBQWE(s[6807]);
initHOEBQWR(s[6808]);
initHOEBQS(s[6809]);
initHOEBQSL(s[6810]);
initHOEBQSU(s[6811]);
initHOEBQSE(s[6812]);
initHOEBQSR(s[6813]);
initHOEPW(s[6814]);
initHOEPWL(s[6815]);
initHOEPWU(s[6816]);
initHOEPWE(s[6817]);
initHOEPWR(s[6818]);
initHOEPS(s[6819]);
initHOEPSL(s[6820]);
initHOEPSU(s[6821]);
initHOEPSE(s[6822]);
initHOEPSR(s[6823]);
initHOEOW(s[6824]);
initHOEOWL(s[6825]);
initHOEOWU(s[6826]);
initHOEOWE(s[6827]);
initHOEOWR(s[6828]);
initHOEOS(s[6829]);
initHOEOSL(s[6830]);
initHOEOSU(s[6831]);
initHOEOSE(s[6832]);
initHOEOSR(s[6833]);
initHOFCW(s[6834]);
initHOFCWL(s[6835]);
initHOFCWU(s[6836]);
initHOFCWE(s[6837]);
initHOFCWR(s[6838]);
initHOFCS(s[6839]);
initHOFCSL(s[6840]);
initHOFCSU(s[6841]);
initHOFCSE(s[6842]);
initHOFCSR(s[6843]);
initHOFPGW(s[6844]);
initHOFPGWL(s[6845]);
initHOFPGWU(s[6846]);
initHOFPGWE(s[6847]);
initHOFPGWR(s[6848]);
initHOFPGS(s[6849]);
initHOFPGSL(s[6850]);
initHOFPGSU(s[6851]);
initHOFPGSE(s[6852]);
initHOFPGSR(s[6853]);
initHOFOIW(s[6854]);
initHOFOIWL(s[6855]);
initHOFOIWU(s[6856]);
initHOFOIWE(s[6857]);
initHOFOIWR(s[6858]);
initHOFOIS(s[6859]);
initHOFOISL(s[6860]);
initHOFOISU(s[6861]);
initHOFOISE(s[6862]);
initHOFOISR(s[6863]);
initHOFWW(s[6864]);
initHOFWWL(s[6865]);
initHOFWWU(s[6866]);
initHOFWWE(s[6867]);
initHOFWWR(s[6868]);
initHOFWS(s[6869]);
initHOFWSL(s[6870]);
initHOFWSU(s[6871]);
initHOFWSE(s[6872]);
initHOFWSR(s[6873]);
initHOFXW(s[6874]);
initHOFXWL(s[6875]);
initHOFXWU(s[6876]);
initHOFXWE(s[6877]);
initHOFXWR(s[6878]);
initHOFXS(s[6879]);
initHOFXSL(s[6880]);
initHOFXSU(s[6881]);
initHOFXSE(s[6882]);
initHOFXSR(s[6883]);
initHOVEH(s[6884]);
initHOCC01(s[6885]);
initHOCC02(s[6886]);
initHOCC03(s[6887]);
initHOCC04(s[6888]);
initHOCC05(s[6889]);
initHOCC06(s[6890]);
initHOCC07(s[6891]);
initHOCC08(s[6892]);
initHOCC09(s[6893]);
initHOCC10(s[6894]);
initHOCC11(s[6895]);
initHOCC12(s[6896]);
initHOCC13(s[6897]);
initHOCC14(s[6898]);
initHOCC15(s[6899]);
initHOCC16(s[6900]);
initHOCC17(s[6901]);
initHOCC18(s[6902]);
initHOCC19(s[6903]);
initHOCC20(s[6904]);
initHOVST(s[6905]);
initHOVW(s[6906]);
initHOVAG(s[6907]);
initHOVYR(s[6908]);
initHOVLR(s[6909]);
initHOVER(s[6910]);
initHOVNR(s[6911]);
initHOVNO(s[6912]);
initHOVW101(s[6913]);
initHOVW102(s[6914]);
initHOVW103(s[6915]);
initHOVW104(s[6916]);
initHOVW105(s[6917]);
initHOVW106(s[6918]);
initHOVW107(s[6919]);
initHOVW108(s[6920]);
initHOVW109(s[6921]);
initHOVW110(s[6922]);
initHOVW111(s[6923]);
initHOVW112(s[6924]);
initHOVW113(s[6925]);
initHOVW114(s[6926]);
initHOVW115(s[6927]);
initHOVW116(s[6928]);
initHOVW117(s[6929]);
initHOVW118(s[6930]);
initHOVW119(s[6931]);
initHOVNW(s[6932]);
initHOVST2(s[6933]);
initHOVW2(s[6934]);
initHOVAG2(s[6935]);
initHOVYR2(s[6936]);
initHOVLR2(s[6937]);
initHOVER2(s[6938]);
initHOVNR2(s[6939]);
initHOVNO2(s[6940]);
initHOVW201(s[6941]);
initHOVW202(s[6942]);
initHOVW203(s[6943]);
initHOVW204(s[6944]);
initHOVW205(s[6945]);
initHOVW206(s[6946]);
initHOVW207(s[6947]);
initHOVW208(s[6948]);
initHOVW209(s[6949]);
initHOVW210(s[6950]);
initHOVW211(s[6951]);
initHOVW212(s[6952]);
initHOVW213(s[6953]);
initHOVW214(s[6954]);
initHOVW215(s[6955]);
initHOVW216(s[6956]);
initHOVW217(s[6957]);
initHOVW218(s[6958]);
initHOVW219(s[6959]);
initHOVNW2(s[6960]);
initHOVST3(s[6961]);
initHOVW3(s[6962]);
initHOVAG3(s[6963]);
initHOVYR3(s[6964]);
initHOVLR3(s[6965]);
initHOVER3(s[6966]);
initHOVNR3(s[6967]);
initHOVNO3(s[6968]);
initHOVW301(s[6969]);
initHOVW302(s[6970]);
initHOVW303(s[6971]);
initHOVW304(s[6972]);
initHOVW305(s[6973]);
initHOVW306(s[6974]);
initHOVW307(s[6975]);
initHOVW308(s[6976]);
initHOVW309(s[6977]);
initHOVW310(s[6978]);
initHOVW311(s[6979]);
initHOVW312(s[6980]);
initHOVW313(s[6981]);
initHOVW314(s[6982]);
initHOVW315(s[6983]);
initHOVW316(s[6984]);
initHOVW317(s[6985]);
initHOVW318(s[6986]);
initHOVW319(s[6987]);
initHOVNW3(s[6988]);
initHOVST4(s[6989]);
initHOV(s[6990]);
initHOVAG4(s[6991]);
initHOVYR4(s[6992]);
initHOVLR4(s[6993]);
initHOVER4(s[6994]);
initHOVNR4(s[6995]);
initHOVNO4(s[6996]);
initHOVW401(s[6997]);
initHOVW402(s[6998]);
initHOVW403(s[6999]);
initHOVW404(s[7000]);
initHOVW405(s[7001]);
initHOVW406(s[7002]);
initHOVW407(s[7003]);
initHOVW408(s[7004]);
initHOVW409(s[7005]);
initHOVW410(s[7006]);
initHOVW411(s[7007]);
initHOVW412(s[7008]);
initHOVW413(s[7009]);
initHOVW414(s[7010]);
initHOVW415(s[7011]);
initHOVW416(s[7012]);
initHOVW417(s[7013]);
initHOVW418(s[7014]);
initHOVW419(s[7015]);
initHOVN(s[7016]);
initHOVST5(s[7017]);
initHOVW5(s[7018]);
initHOVAG5(s[7019]);
initHOVYR5(s[7020]);
initHOVLR5(s[7021]);
initHOVER5(s[7022]);
initHOVNR5(s[7023]);
initHOVNO5(s[7024]);
initHOVW501(s[7025]);
initHOVW502(s[7026]);
initHOVW503(s[7027]);
initHOVW504(s[7028]);
initHOVW505(s[7029]);
initHOVW506(s[7030]);
initHOVW507(s[7031]);
initHOVW508(s[7032]);
initHOVW509(s[7033]);
initHOVW510(s[7034]);
initHOVW511(s[7035]);
initHOVW512(s[7036]);
initHOVW513(s[7037]);
initHOVW514(s[7038]);
initHOVW515(s[7039]);
initHOVW516(s[7040]);
initHOVW517(s[7041]);
initHOVW518(s[7042]);
initHOVW519(s[7043]);
initHOVNW5(s[7044]);
initHOVST6(s[7045]);
initHOVW6(s[7046]);
initHOVAG6(s[7047]);
initHOVYR6(s[7048]);
initHOVLR6(s[7049]);
initHOVER6(s[7050]);
initHOVNR6(s[7051]);
initHOVNO6(s[7052]);
initHOVW601(s[7053]);
initHOVW602(s[7054]);
initHOVW603(s[7055]);
initHOVW604(s[7056]);
initHOVW605(s[7057]);
initHOVW606(s[7058]);
initHOVW607(s[7059]);
initHOVW608(s[7060]);
initHOVW609(s[7061]);
initHOVW610(s[7062]);
initHOVW611(s[7063]);
initHOVW612(s[7064]);
initHOVW613(s[7065]);
initHOVW614(s[7066]);
initHOVW615(s[7067]);
initHOVW616(s[7068]);
initHOVW617(s[7069]);
initHOVW618(s[7070]);
initHOVW619(s[7071]);
initHOVNW6(s[7072]);
initHOVST7(s[7073]);
initHOVW7(s[7074]);
initHOVAG7(s[7075]);
initHOVYR7(s[7076]);
initHOVLR7(s[7077]);
initHOVER7(s[7078]);
initHOVNR7(s[7079]);
initHOVNO7(s[7080]);
initHOVW701(s[7081]);
initHOVW702(s[7082]);
initHOVW703(s[7083]);
initHOVW704(s[7084]);
initHOVW705(s[7085]);
initHOVW706(s[7086]);
initHOVW707(s[7087]);
initHOVW708(s[7088]);
initHOVW709(s[7089]);
initHOVW710(s[7090]);
initHOVW711(s[7091]);
initHOVW712(s[7092]);
initHOVW713(s[7093]);
initHOVW714(s[7094]);
initHOVW715(s[7095]);
initHOVW716(s[7096]);
initHOVW717(s[7097]);
initHOVW718(s[7098]);
initHOVW719(s[7099]);
initHOVNW7(s[7100]);
initHOVST8(s[7101]);
initHOVW8(s[7102]);
initHOVAG8(s[7103]);
initHOVYR8(s[7104]);
initHOVLR8(s[7105]);
initHOVER8(s[7106]);
initHOVNR8(s[7107]);
initHOVNO8(s[7108]);
initHOVW801(s[7109]);
initHOVW802(s[7110]);
initHOVW803(s[7111]);
initHOVW804(s[7112]);
initHOVW805(s[7113]);
initHOVW806(s[7114]);
initHOVW807(s[7115]);
initHOVW808(s[7116]);
initHOVW809(s[7117]);
initHOVW810(s[7118]);
initHOVW811(s[7119]);
initHOVW812(s[7120]);
initHOVW813(s[7121]);
initHOVW814(s[7122]);
initHOVW815(s[7123]);
initHOVW816(s[7124]);
initHOVW817(s[7125]);
initHOVW818(s[7126]);
initHOVW819(s[7127]);
initHOVNW8(s[7128]);
initHOVST9(s[7129]);
initHOVW9(s[7130]);
initHOVAG9(s[7131]);
initHOVYR9(s[7132]);
initHOVLR9(s[7133]);
initHOVER9(s[7134]);
initHOVNR9(s[7135]);
initHOVNO9(s[7136]);
initHOVW901(s[7137]);
initHOVW902(s[7138]);
initHOVW903(s[7139]);
initHOVW904(s[7140]);
initHOVW905(s[7141]);
initHOVW906(s[7142]);
initHOVW907(s[7143]);
initHOVW908(s[7144]);
initHOVW909(s[7145]);
initHOVW910(s[7146]);
initHOVW911(s[7147]);
initHOVW912(s[7148]);
initHOVW913(s[7149]);
initHOVW914(s[7150]);
initHOVW915(s[7151]);
initHOVW916(s[7152]);
initHOVW917(s[7153]);
initHOVW918(s[7154]);
initHOVW919(s[7155]);
initHOVNW9(s[7156]);
initHOVST10(s[7157]);
initHOVW10(s[7158]);
initHOVAG10(s[7159]);
initHOVYR10(s[7160]);
initHOVLR10(s[7161]);
initHOVER10(s[7162]);
initHOVNR10(s[7163]);
initHOVNO10(s[7164]);
initHOVW1001(s[7165]);
initHOVW1002(s[7166]);
initHOVW1003(s[7167]);
initHOVW1004(s[7168]);
initHOVW1005(s[7169]);
initHOVW1006(s[7170]);
initHOVW1007(s[7171]);
initHOVW1008(s[7172]);
initHOVW1009(s[7173]);
initHOVW1010(s[7174]);
initHOVW1011(s[7175]);
initHOVW1012(s[7176]);
initHOVW1013(s[7177]);
initHOVW1014(s[7178]);
initHOVW1015(s[7179]);
initHOVW1016(s[7180]);
initHOVW1017(s[7181]);
initHOVW1018(s[7182]);
initHOVW1019(s[7183]);
initHOVNW10(s[7184]);
initHOVST11(s[7185]);
initHOVW11(s[7186]);
initHOVAG11(s[7187]);
initHOVYR11(s[7188]);
initHOVLR11(s[7189]);
initHOVER11(s[7190]);
initHOVNR11(s[7191]);
initHOVNO11(s[7192]);
initHOVW1101(s[7193]);
initHOVW1102(s[7194]);
initHOVW1103(s[7195]);
initHOVW1104(s[7196]);
initHOVW1105(s[7197]);
initHOVW1106(s[7198]);
initHOVW1107(s[7199]);
initHOVW1108(s[7200]);
initHOVW1109(s[7201]);
initHOVW1110(s[7202]);
initHOVW1111(s[7203]);
initHOVW1112(s[7204]);
initHOVW1113(s[7205]);
initHOVW1114(s[7206]);
initHOVW1115(s[7207]);
initHOVW1116(s[7208]);
initHOVW1117(s[7209]);
initHOVW1118(s[7210]);
initHOVW1119(s[7211]);
initHOVNW11(s[7212]);
initHOVST12(s[7213]);
initHOVW12(s[7214]);
initHOVAG12(s[7215]);
initHOVYR12(s[7216]);
initHOVLR12(s[7217]);
initHOVER12(s[7218]);
initHOVNR12(s[7219]);
initHOVNO12(s[7220]);
initHOVW1201(s[7221]);
initHOVW1202(s[7222]);
initHOVW1203(s[7223]);
initHOVW1204(s[7224]);
initHOVW1205(s[7225]);
initHOVW1206(s[7226]);
initHOVW1207(s[7227]);
initHOVW1208(s[7228]);
initHOVW1209(s[7229]);
initHOVW1210(s[7230]);
initHOVW1211(s[7231]);
initHOVW1212(s[7232]);
initHOVW1213(s[7233]);
initHOVW1214(s[7234]);
initHOVW1215(s[7235]);
initHOVW1216(s[7236]);
initHOVW1217(s[7237]);
initHOVW1218(s[7238]);
initHOVW1219(s[7239]);
initHOVNW12(s[7240]);
initHOVST13(s[7241]);
initHOVW13(s[7242]);
initHOVAG13(s[7243]);
initHOVYR13(s[7244]);
initHOVLR13(s[7245]);
initHOVER13(s[7246]);
initHOVNR13(s[7247]);
initHOVNO13(s[7248]);
initHOVW1301(s[7249]);
initHOVW1302(s[7250]);
initHOVW1303(s[7251]);
initHOVW1304(s[7252]);
initHOVW1305(s[7253]);
initHOVW1306(s[7254]);
initHOVW1307(s[7255]);
initHOVW1308(s[7256]);
initHOVW1309(s[7257]);
initHOVW1310(s[7258]);
initHOVW1311(s[7259]);
initHOVW1312(s[7260]);
initHOVW1313(s[7261]);
initHOVW1314(s[7262]);
initHOVW1315(s[7263]);
initHOVW1316(s[7264]);
initHOVW1317(s[7265]);
initHOVW1318(s[7266]);
initHOVW1319(s[7267]);
initHOVNW13(s[7268]);
initHOVST14(s[7269]);
initHOVW14(s[7270]);
initHOVAG14(s[7271]);
initHOVYR14(s[7272]);
initHOVLR14(s[7273]);
initHOVER14(s[7274]);
initHOVNR14(s[7275]);
initHOVNO14(s[7276]);
initHOVW1401(s[7277]);
initHOVW1402(s[7278]);
initHOVW1403(s[7279]);
initHOVW1404(s[7280]);
initHOVW1405(s[7281]);
initHOVW1406(s[7282]);
initHOVW1407(s[7283]);
initHOVW1408(s[7284]);
initHOVW1409(s[7285]);
initHOVW1410(s[7286]);
initHOVW1411(s[7287]);
initHOVW1412(s[7288]);
initHOVW1413(s[7289]);
initHOVW1414(s[7290]);
initHOVW1415(s[7291]);
initHOVW1416(s[7292]);
initHOVW1417(s[7293]);
initHOVW1418(s[7294]);
initHOVW1419(s[7295]);
initHOVNW14(s[7296]);
initHOVST15(s[7297]);
initHOVW15(s[7298]);
initHOVAG15(s[7299]);
initHOVYR15(s[7300]);
initHOVLR15(s[7301]);
initHOVER15(s[7302]);
initHOVNR15(s[7303]);
initHOVNO15(s[7304]);
initHOVW1501(s[7305]);
initHOVW1502(s[7306]);
initHOVW1503(s[7307]);
initHOVW1504(s[7308]);
initHOVW1505(s[7309]);
initHOVW1506(s[7310]);
initHOVW1507(s[7311]);
initHOVW1508(s[7312]);
initHOVW1509(s[7313]);
initHOVW1510(s[7314]);
initHOVW1511(s[7315]);
initHOVW1512(s[7316]);
initHOVW1513(s[7317]);
initHOVW1514(s[7318]);
initHOVW1515(s[7319]);
initHOVW1516(s[7320]);
initHOVW1517(s[7321]);
initHOVW1518(s[7322]);
initHOVW1519(s[7323]);
initHOVNW15(s[7324]);
initHOVST16(s[7325]);
initHOVW16(s[7326]);
initHOVAG16(s[7327]);
initHOVYR16(s[7328]);
initHOVLR16(s[7329]);
initHOVER16(s[7330]);
initHOVNR16(s[7331]);
initHOVNO16(s[7332]);
initHOVW1601(s[7333]);
initHOVW1602(s[7334]);
initHOVW1603(s[7335]);
initHOVW1604(s[7336]);
initHOVW1605(s[7337]);
initHOVW1606(s[7338]);
initHOVW1607(s[7339]);
initHOVW1608(s[7340]);
initHOVW1609(s[7341]);
initHOVW1610(s[7342]);
initHOVW1611(s[7343]);
initHOVW1612(s[7344]);
initHOVW1613(s[7345]);
initHOVW1614(s[7346]);
initHOVW1615(s[7347]);
initHOVW1616(s[7348]);
initHOVW1617(s[7349]);
initHOVW1618(s[7350]);
initHOVW1619(s[7351]);
initHOVNW16(s[7352]);
initHOVEHX(s[7353]);
initHOX(s[7354]);
initCFMETM(s[7355]);
initCFMETMT(s[7356]);
initCFDATD(s[7357]);
initCFDATM(s[7358]);
initCFDATY(s[7359]);
initCFDAY(s[7360]);
initCFDSCR(s[7361]);
initCFPROM(s[7362]);
initCFTEST(s[7363]);
initCFWRDS(s[7364]);
initCFLISEN(s[7365]);
initCFANI(s[7366]);
initCFMEM(s[7367]);
initCFLETEN(s[7368]);
initNROW(s[7369]);
initNCLM(s[7370]);
initNCORRECT(s[7371]);
initNMISSED(s[7372]);
initNROWCLM(s[7373]);
initCFMEMS(s[7374]);
initCFPASCR(s[7375]);
initCFLISD(s[7376]);
initCFSUMB(s[7377]);
initCFSUMC(s[7378]);
initCFSUMD(s[7379]);
initCFSUMA(s[7380]);
initCFSUME(s[7381]);
initCFSUMF(s[7382]);
initCFMSCR(s[7383]);
initCFWHONON(s[7384]);
initCFWHOPAR(s[7385]);
initCFWHOAD(s[7386]);
initCFWHOCHI(s[7387]);
initCFWHOOTH(s[7388]);
initCFIMP(s[7389]);
initCFWHTEYE(s[7390]);
initCFWHTHEA(s[7391]);
initCFWHTTIR(s[7392]);
initCFWHTILL(s[7393]);
initCFWHTCON(s[7394]);
initCFWHTNER(s[7395]);
initCFWHTMEN(s[7396]);
initCFWHTDIS(s[7397]);
initCFWHTNOI(s[7398]);
initCFWHTLAP(s[7399]);
initCFWHTENG(s[7400]);
initCFWHTREF(s[7401]);
initCFWHTUPS(s[7402]);
initCFWHTMEM(s[7403]);
initCFWHTALC(s[7404]);
initCFWHT95(s[7405]);
initCFWHMEYE(s[7406]);
initCFWHMHEA(s[7407]);
initCFWHMTIR(s[7408]);
initCFWHMILL(s[7409]);
initCFWHMCON(s[7410]);
initCFWHMNER(s[7411]);
initCFWHMMEN(s[7412]);
initCFWHMDIS(s[7413]);
initCFWHMNOI(s[7414]);
initCFWHMLAP(s[7415]);
initCFWHMENG(s[7416]);
initCFWHMREF(s[7417]);
initCFWHMUPS(s[7418]);
initCFWHMMEM(s[7419]);
initCFWHMALC(s[7420]);
initCFWHM85(s[7421]);
initCFWHM86(s[7422]);
initEXRAIN(s[7423]);
initEXLO80(s[7424]);
initEXLO90(s[7425]);
initEXPW(s[7426]);
initEXPWF(s[7427]);
initEXHLIM(s[7428]);
initEXRSLF(s[7429]);
initEXAINH(s[7430]);
initEXCINH(s[7431]);
initEXINHE(s[7432]);
initEXCIN(s[7433]);
initEXCAIN(s[7434]);
initEXCPIN(s[7435]);
initEXHVR(s[7436]);
initEXHVA(s[7437]);
initEXRELA(s[7438]);
initEXRELB(s[7439]);
initEXRELC(s[7440]);
initEXRELD(s[7441]);
initEXRELEFO(s[7442]);
initEXRELEME(s[7443]);
initEXRELEOU(s[7444]);
initEXRELEDE(s[7445]);
initEXRELEEL(s[7446]);
initEXRELEFA(s[7447]);
initEXRELEPR(s[7448]);
initEXRELEHO(s[7449]);
initEXRELETR(s[7450]);
initEXREL96(s[7451]);
initERFVOLMO(s[7452]);
initERFVOLLE(s[7453]);
initERFVOLOR(s[7454]);
initERFVOLVI(s[7455]);
initERFVOLBE(s[7456]);
initERFVOLED(s[7457]);
initERFVOLIN(s[7458]);
initERFVOLSE(s[7459]);
initERFVOLTR(s[7460]);
initERFVOLRE(s[7461]);
initERFVOLCA(s[7462]);
initERFVOLPR(s[7463]);
initERFVOL(s[7464]);
initERFVOL96(s[7465]);
initERFVOFT(s[7466]);
initERMOVSO(s[7467]);
initERMOVUS(s[7468]);
initERMOVAC(s[7469]);
initERMOVNE(s[7470]);
initERMOVNJ(s[7471]);
initERMOVSK(s[7472]);
initERMOVFI(s[7473]);
initERMOVOB(s[7474]);
initERMOV96(s[7475]);
initERIVOL1(s[7476]);
initERLVOLSH(s[7477]);
initERLVOLCO(s[7478]);
initERLVOLDE(s[7479]);
initERLVOLBA(s[7480]);
initERLVOLPE(s[7481]);
initERLVOLPR(s[7482]);
initERLVOLWR(s[7483]);
initERLVOLRE(s[7484]);
initERLVOLTR(s[7485]);
initERIVOL96(s[7486]);
initERIVOFT(s[7487]);
initERVOLA(s[7488]);
initERVOLB(s[7489]);
initERCAA(s[7490]);
initERCABSP(s[7491]);
initERCABCH(s[7492]);
initERCABGC(s[7493]);
initERCABPA(s[7494]);
initERCABPL(s[7495]);
initERCABOR(s[7496]);
initERCABFR(s[7497]);
initERCABOT(s[7498]);
initERCAMSP(s[7499]);
initERCAMCH(s[7500]);
initERCAMGC(s[7501]);
initERCAMPA(s[7502]);
initERCAMPL(s[7503]);
initERCAMOR(s[7504]);
initERCAMFR(s[7505]);
initERCAM85(s[7506]);
initERCAM86(s[7507]);
initERCAMOT(s[7508]);
initERCANSP(s[7509]);
initERCANCH(s[7510]);
initERCANGC(s[7511]);
initERCANPA(s[7512]);
initERCANPL(s[7513]);
initERCANOR(s[7514]);
initERCANFR(s[7515]);
initERCANOT(s[7516]);
initERCANTT(s[7517]);
initERCALIVE(s[7518]);
initERCADP1(s[7519]);
initERCADP2(s[7520]);
initERCADP3(s[7521]);
initERCADP4(s[7522]);
initERCADP5(s[7523]);
initERCADP6(s[7524]);
initERCADP7(s[7525]);
initERCADP8(s[7526]);
initERCADP9(s[7527]);
initERCADP10(s[7528]);
initERCADP11(s[7529]);
initERCADP12(s[7530]);
initERCADP13(s[7531]);
initERCADP14(s[7532]);
initERCADP15(s[7533]);
initERCADP16(s[7534]);
initERCAC(s[7535]);
initERMOCSO(s[7536]);
initERMOCUS(s[7537]);
initERMOCAC(s[7538]);
initERMOCNE(s[7539]);
initERMOCMO(s[7540]);
initERMOCNJ(s[7541]);
initERMOCSK(s[7542]);
initERMOCFI(s[7543]);
initERMOCOB(s[7544]);
initERMOCOT(s[7545]);
initERRESCK(s[7546]);
initERRESBK(s[7547]);
initERRESRY(s[7548]);
initERRESERS(s[7549]);
initERRESERB(s[7550]);
initERRESERD(s[7551]);
initERRESERI(s[7552]);
initERRESERO(s[7553]);
initERRESERH(s[7554]);
initERRESER9(s[7555]);
initERRESOF(s[7556]);
initERRESON(s[7557]);
initERCARA(s[7558]);
initERCARB(s[7559]);
initPSCEDA(s[7560]);
initPSCEDB(s[7561]);
initPSCEDC(s[7562]);
initPSCEDD(s[7563]);
initPSCEDE(s[7564]);
initPSCEDF(s[7565]);
initPSCEDG(s[7566]);
initPSCEDH(s[7567]);
initPSAGF(s[7568]);
initPSAGL(s[7569]);
initFQETHNR(s[7570]);
initFQCBTHR(s[7571]);
initFQCENG(s[7572]);
initFQMQUA(s[7573]);
initFQAQUA(s[7574]);
initFQQUADEG(s[7575]);
initFQQUATEA(s[7576]);
initFQQUANUR(s[7577]);
initFQQUAHNC(s[7578]);
initFQQUAONC(s[7579]);
initFQQUACGF(s[7580]);
initFQQUACGA(s[7581]);
initFQQUACGO(s[7582]);
initFQQUAALE(s[7583]);
initFQQUAASL(s[7584]);
initFQQUASLC(s[7585]);
initFQQUAOLP(s[7586]);
initFQQUAOLA(s[7587]);
initFQQUAOLD(s[7588]);
initFQQUAGCA(s[7589]);
initFQQUAGCD(s[7590]);
initFQQUACS1(s[7591]);
initFQQUACS2(s[7592]);
initFQQUACSU(s[7593]);
initFQQUASLL(s[7594]);
initFQQUASUP(s[7595]);
initFQQUAMAT(s[7596]);
initFQQUANV5(s[7597]);
initFQQUANV4(s[7598]);
initFQQUANV3(s[7599]);
initFQQUANV2(s[7600]);
initFQQUANV1(s[7601]);
initFQQUATRA(s[7602]);
initFQQUACLE(s[7603]);
initFQQUA95(s[7604]);
initFQQUMDEG(s[7605]);
initFQQUMTEA(s[7606]);
initFQQUMNUR(s[7607]);
initFQQUMHNC(s[7608]);
initFQQUMONC(s[7609]);
initFQQUMCGF(s[7610]);
initFQQUMCGA(s[7611]);
initFQQUMCGO(s[7612]);
initFQQUMALE(s[7613]);
initFQQUMASL(s[7614]);
initFQQUMSLC(s[7615]);
initFQQUMOLP(s[7616]);
initFQQUMOLA(s[7617]);
initFQQUMOLD(s[7618]);
initFQQUMGCA(s[7619]);
initFQQUMGCD(s[7620]);
initFQQUMCS1(s[7621]);
initFQQUMCS2(s[7622]);
initFQQUMCSU(s[7623]);
initFQQUMSLL(s[7624]);
initFQQUMSUP(s[7625]);
initFQQUMMAT(s[7626]);
initFQQUMNV5(s[7627]);
initFQQUMNV4(s[7628]);
initFQQUMNV3(s[7629]);
initFQQUMNV2(s[7630]);
initFQQUMNV1(s[7631]);
initFQQUMTRA(s[7632]);
initFQQUMCLE(s[7633]);
initFQQUMFOR(s[7634]);
initFQQUMOVO(s[7635]);
initFQQUMNVZ(s[7636]);
initFQQUMNNE(s[7637]);
initFQQUMMIL(s[7638]);
initFQQUMDIP(s[7639]);
initFQQUMOAC(s[7640]);
initFQQUMOPR(s[7641]);
initFQQUM85(s[7642]);
initFQQUM86(s[7643]);
initFQEND(s[7644]);
initFQHELP(s[7645]);
initMMSCHS(s[7646]);
initMMALONE(s[7647]);
initMMHSS(s[7648]);
initMMWILL(s[7649]);
initMMSAF(s[7650]);
initMMAVSP(s[7651]);
initMMWALA(s[7652]);
initMMTRYA(s[7653]);
initMMWLKA(s[7654]);
initMMTRYB(s[7655]);
initMMWLKB(s[7656]);
initMMPAIN(s[7657]);
initMMRECR(s[7658]);
initMMRECRC(s[7659]);
initMMAID(s[7660]);
initMMAIDC(s[7661]);
initMMCOMUN(s[7662]);
initMMCOMSP(s[7663]);
initMMCOMRF(s[7664]);
initMMCOMNI(s[7665]);
initMMCOMPA(s[7666]);
initMMCOM85(s[7667]);
initMMCOM86(s[7668]);
initSCPT01(s[7669]);
initSCPT02(s[7670]);
initSCPT03(s[7671]);
initSCPT04(s[7672]);
initSCPT05(s[7673]);
initSCPT06(s[7674]);
initSCPT07(s[7675]);
initSCPT08(s[7676]);
initSCORG01(s[7677]);
initSCORG02(s[7678]);
initSCORG03(s[7679]);
initSCORG04(s[7680]);
initSCORG05(s[7681]);
initSCORG06(s[7682]);
initSCORG07(s[7683]);
initSCORG08(s[7684]);
initSCORG09(s[7685]);
initSCORGN(s[7686]);
initSCEDCP(s[7687]);
initSCEDPO(s[7688]);
initSCEDCS(s[7689]);
initSCEDSU(s[7690]);
initSCEDSC(s[7691]);
initSCEDGP(s[7692]);
initSCEDCH(s[7693]);
initSCEDDE(s[7694]);
initSCEDOP(s[7695]);
initSCEDHO(s[7696]);
initSCACTA(s[7697]);
initSCACTB(s[7698]);
initSCACTC(s[7699]);
initSCACTD(s[7700]);
initSCMOREA(s[7701]);
initSCMOREB(s[7702]);
initSCMOREC(s[7703]);
initSCMORED(s[7704]);
initSCTVWKD(s[7705]);
initSCTVWKE(s[7706]);
initSCTVNEW(s[7707]);
initSCTVCOM(s[7708]);
initSCTVDET(s[7709]);
initSCTVQUI(s[7710]);
initSCTVNAT(s[7711]);
initSCTVSPO(s[7712]);
initSCTVART(s[7713]);
initSCTVFIL(s[7714]);
initSCTVCHA(s[7715]);
initSCTVDRA(s[7716]);
initSCTVRTV(s[7717]);
initSCTVSOA(s[7718]);
initSCTVGAR(s[7719]);
initSCWILHE(s[7720]);
initSCWILLE(s[7721]);
initSCWILPA(s[7722]);
initSCWILMI(s[7723]);
initSCWILRU(s[7724]);
initSCLIFEA(s[7725]);
initSCLIFEB(s[7726]);
initSCLIFEC(s[7727]);
initSCLIFED(s[7728]);
initSCLIFEE(s[7729]);
initSCDCA(s[7730]);
initSCDCC(s[7731]);
initSCDCD(s[7732]);
initSCDCE(s[7733]);
initSCDCG(s[7734]);
initSCFEELA(s[7735]);
initSCFEELB(s[7736]);
initSCFEELC(s[7737]);
initSCFEELD(s[7738]);
initSCFEELE(s[7739]);
initSCQOLA(s[7740]);
initSCQOLB(s[7741]);
initSCQOLC(s[7742]);
initSCQOLD(s[7743]);
initSCQOLE(s[7744]);
initSCQOLF(s[7745]);
initSCQOLG(s[7746]);
initSCQOLH(s[7747]);
initSCQOLI(s[7748]);
initSCQOLJ(s[7749]);
initSCQOLK(s[7750]);
initSCQOLL(s[7751]);
initSCQOLM(s[7752]);
initSCQOLN(s[7753]);
initSCQOLO(s[7754]);
initSCQOLP(s[7755]);
initSCQOLQ(s[7756]);
initSCQOLR(s[7757]);
initSCQOLS(s[7758]);
initSCPTR(s[7759]);
initSCPTRA(s[7760]);
initSCPTRB(s[7761]);
initSCPTRC(s[7762]);
initSCPTRD(s[7763]);
initSCPTRE(s[7764]);
initSCPTRF(s[7765]);
initSCPTRG(s[7766]);
initSCCHD(s[7767]);
initSCCHDA(s[7768]);
initSCCHDB(s[7769]);
initSCCHDC(s[7770]);
initSCCHDD(s[7771]);
initSCCHDE(s[7772]);
initSCCHDF(s[7773]);
initSCCHDG(s[7774]);
initSCCHDH(s[7775]);
initSCCHDI(s[7776]);
initSCCHDM(s[7777]);
initSCFAM(s[7778]);
initSCFAMA(s[7779]);
initSCFAMB(s[7780]);
initSCFAMC(s[7781]);
initSCFAMD(s[7782]);
initSCFAME(s[7783]);
initSCFAMF(s[7784]);
initSCFAMG(s[7785]);
initSCFMH(s[7786]);
initSCFAMI(s[7787]);
initSCFAMM(s[7788]);
initSCFRD(s[7789]);
initSCFRDA(s[7790]);
initSCFRDB(s[7791]);
initSCFRDC(s[7792]);
initSCFRDD(s[7793]);
initSCFRDE(s[7794]);
initSCFRDF(s[7795]);
initSCFRDG(s[7796]);
initSCFRDH(s[7797]);
initSCFRDI(s[7798]);
initSCFRDM(s[7799]);
initSCFARES(s[7800]);
initSCFAFIN(s[7801]);
initSCFAHAR(s[7802]);
initSCFASAC(s[7803]);
initSCFRRES(s[7804]);
initSCFRFIN(s[7805]);
initSCFRHAR(s[7806]);
initSCFRSHA(s[7807]);
initSCFRSAC(s[7808]);
initSCEMPL(s[7809]);
initSCWORKA(s[7810]);
initSCWORKB(s[7811]);
initSCWORKC(s[7812]);
initSCWORKD(s[7813]);
initSCWORKE(s[7814]);
initSCWORKF(s[7815]);
initSCWORKG(s[7816]);
initSCWORKH(s[7817]);
initSCWORKI(s[7818]);
initSCWORKJ(s[7819]);
initSCWORKK(s[7820]);
initSCWORKL(s[7821]);
initSCRTAGE(s[7822]);
initSCLDDR(s[7823]);
initSCVEGA(s[7824]);
initSCVEGB(s[7825]);
initSCVEGC(s[7826]);
initSCVEGD(s[7827]);
initSCFRUIA(s[7828]);
initSCFRUIB(s[7829]);
initSCFRUIC(s[7830]);
initSCFRUID(s[7831]);
initSCFRUIE(s[7832]);
initSCFRUIF(s[7833]);
initSCFRUIG(s[7834]);
initSCFRUIH(s[7835]);
initSCFRUII(s[7836]);
initSCAKO(s[7837]);
initSCAL7A(s[7838]);
initSCAL7B(s[7839]);
initSCDRSPI(s[7840]);
initSCDRWIN(s[7841]);
initSCDRPIN(s[7842]);
initOUTSC(s[7843]);
initASKPX(s[7844]);
initASKINST(s[7845]);
initDHIASEP(s[7846]);
initFUTYPE(s[7847]);
initHOPID(s[7848]);
initINTDATM(s[7849]);
initINTDATY(s[7850]);
initIINTDATM(s[7851]);
initIINTDATY(s[7852]);
initINDSEX(s[7853]);
initINDOBYR(s[7854]);
initINDAGER(s[7855]);
initQVER(s[7856]);
initW4XWGT(s[7857]);
initW4LWGT(s[7858]);
initW4SCWT(s[7859]);
initDHESMK(s[7860]);
initDHESKA(s[7861]);
initDHEMEN(s[7862]);
initDHEMEB(s[7863]);
initDHEPEE(s[7864]);
initDHEHNO(s[7865]);
initDHEACD(s[7866]);
initCHONAT(s[7867]);
initCHOADP(s[7868]);
initCHOFST(s[7869]);
initCHOSTP(s[7870]);
initCHOTOT(s[7871]);
initCHINAT(s[7872]);
initCHIADP(s[7873]);
initCHIFST(s[7874]);
initCHISTP(s[7875]);
initCHITOT(s[7876]);
initALLTOTCH(s[7877]);
initALLNATCH(s[7878]);
initALLADCH(s[7879]);
initALLFSCH(s[7880]);
initALLSPCH(s[7881]);
initMOTHER(s[7882]);
initFATHER(s[7883]);
initMTHAGD(s[7884]);
initFTHAGD(s[7885]);
initDIGNMYD(s[7886]);
initDISIBD(s[7887]);
initDIKLIVD(s[7888]);
initDIFJOBD(s[7889]);
initHEDIAGBP(s[7890]);
initHEDIAGAN(s[7891]);
initHEDIAGMI(s[7892]);
initHEDIAGHF(s[7893]);
initHEDIAGHM(s[7894]);
initHEDIAGAR(s[7895]);
initHEDIAGDH(s[7896]);
initHEDIAGDI(s[7897]);
initHEDIAGST(s[7898]);
initHEDIAGHC(s[7899]);
initCVD7DIEBP(s[7900]);
initCVD7DIBT(s[7901]);
initHEBDIALU(s[7902]);
initHEBDIAAS(s[7903]);
initHEBDIAAR(s[7904]);
initHEBDIAOS(s[7905]);
initHEBDIACA(s[7906]);
initHEBDIAPD(s[7907]);
initHEBDIAPS(s[7908]);
initHEBDIAAD(s[7909]);
initHEBDIADE(s[7910]);
initHEPDIAGL(s[7911]);
initHEPDIADI(s[7912]);
initHEPDIAMD(s[7913]);
initHEPDIACA(s[7914]);
initPALEVEL(s[7915]);
initPHLEGM(s[7916]);
initBRETHS(s[7917]);
initCFMERSP(s[7918]);
initCFPRMEM(s[7919]);
initCFANIG(s[7920]);
initCFRECAL(s[7921]);
initFSTGS_TM(s[7922]);
initGTSPD_WK(s[7923]);
initGTSPD_MN(s[7924]);
initGTSPD_MNG(s[7925]);
initCASP19(s[7926]);
initCASPCTL(s[7927]);
initCASPAUT(s[7928]);
initCASPPLE(s[7929]);
initCASPSR(s[7930]);
initORGANIS(s[7931]);
initORGNO(s[7932]);
initW4NSSEC(s[7933]);
initW4NSSEC13(s[7934]);
initW4NSSEC8(s[7935]);
initW4NSSEC5(s[7936]);
initW4NSSEC3(s[7937]);
initW4SIC(s[7938]);
initW4SOC(s[7939]);
initW4SEC(s[7940]);
initW4SIC2003(s[7941]);
initW4SOC2000(s[7942]);
initW4EDQUAL(s[7943]);
initGOR(s[7944]);
initIDAUNIQ(s[7945]);
initIDAHH(s[7946]);
initPERID(s[7947]);
initCOUPID(s[7948]);
initFUTYPE(s[7949]);
initFUID(s[7950]);
initBUEQ(s[7951]);
initSINC_BU_I(s[7952]);
initSINC_BU_F(s[7953]);
initSINC_BU_T(s[7954]);
initSINC_BU_O(s[7955]);
initPPEN_BU_I(s[7956]);
initPPEN_BU_F(s[7957]);
initPPEN_BU_T(s[7958]);
initPPEN_BU_O(s[7959]);
initSPEN_R_I(s[7960]);
initSPEN_R_F(s[7961]);
initSPEN_R_T(s[7962]);
initSPEN_R_O(s[7963]);
initSPEN_P_I(s[7964]);
initSPEN_P_F(s[7965]);
initSPEN_P_T(s[7966]);
initSPEN_P_O(s[7967]);
initANIN_R_I(s[7968]);
initANIN_R_F(s[7969]);
initANIN_R_T(s[7970]);
initANIN_R_O(s[7971]);
initANIN_P_I(s[7972]);
initANIN_P_F(s[7973]);
initANIN_P_T(s[7974]);
initANIN_P_O(s[7975]);
initICB_R_I(s[7976]);
initICB_R_F(s[7977]);
initICB_R_T(s[7978]);
initICB_R_O(s[7979]);
initICB_P_I(s[7980]);
initICB_P_F(s[7981]);
initICB_P_T(s[7982]);
initICB_P_O(s[7983]);
initSDA_R_I(s[7984]);
initSDA_R_F(s[7985]);
initSDA_R_T(s[7986]);
initSDA_R_O(s[7987]);
initSDA_P_I(s[7988]);
initSDA_P_F(s[7989]);
initSDA_P_T(s[7990]);
initSDA_P_O(s[7991]);
initSSP_R_I(s[7992]);
initSSP_R_F(s[7993]);
initSSP_R_T(s[7994]);
initSSP_R_O(s[7995]);
initSSP_P_I(s[7996]);
initSSP_P_F(s[7997]);
initSSP_P_T(s[7998]);
initSSP_P_O(s[7999]);
initATTALL_R_I(s[8000]);
initATTALL_R_F(s[8001]);
initATTALL_R_T(s[8002]);
initATTALL_R_O(s[8003]);
initATTALL_P_I(s[8004]);
initATTALL_P_F(s[8005]);
initATTALL_P_T(s[8006]);
initATTALL_P_O(s[8007]);
initDLA_R_I(s[8008]);
initDLA_R_F(s[8009]);
initDLA_R_T(s[8010]);
initDLA_R_O(s[8011]);
initDLA_P_I(s[8012]);
initDLA_P_F(s[8013]);
initDLA_P_T(s[8014]);
initDLA_P_O(s[8015]);
initINDINJ_R_I(s[8016]);
initINDINJ_R_F(s[8017]);
initINDINJ_R_T(s[8018]);
initINDINJ_R_O(s[8019]);
initINDINJ_P_I(s[8020]);
initINDINJ_P_F(s[8021]);
initINDINJ_P_T(s[8022]);
initINDINJ_P_O(s[8023]);
initWAR_R_I(s[8024]);
initWAR_R_F(s[8025]);
initWAR_R_T(s[8026]);
initWAR_R_O(s[8027]);
initWAR_P_I(s[8028]);
initWAR_P_F(s[8029]);
initWAR_P_T(s[8030]);
initWAR_P_O(s[8031]);
initCARERS_R_I(s[8032]);
initCARERS_R_F(s[8033]);
initCARERS_R_T(s[8034]);
initCARERS_R_O(s[8035]);
initCARERS_P_I(s[8036]);
initCARERS_P_F(s[8037]);
initCARERS_P_T(s[8038]);
initCARERS_P_O(s[8039]);
initOTH1_R_I(s[8040]);
initOTH1_R_F(s[8041]);
initOTH1_R_T(s[8042]);
initOTH1_R_O(s[8043]);
initOTH1_P_I(s[8044]);
initOTH1_P_F(s[8045]);
initOTH1_P_T(s[8046]);
initOTH1_P_O(s[8047]);
initIS_R_I(s[8048]);
initIS_R_F(s[8049]);
initIS_R_T(s[8050]);
initIS_R_O(s[8051]);
initIS_P_I(s[8052]);
initIS_P_F(s[8053]);
initIS_P_T(s[8054]);
initIS_P_O(s[8055]);
initPC_R_I(s[8056]);
initPC_R_F(s[8057]);
initPC_R_T(s[8058]);
initPC_R_O(s[8059]);
initPC_P_I(s[8060]);
initPC_P_F(s[8061]);
initPC_P_T(s[8062]);
initPC_P_O(s[8063]);
initWTC_R_I(s[8064]);
initWTC_R_F(s[8065]);
initWTC_R_T(s[8066]);
initWTC_R_O(s[8067]);
initWTC_P_I(s[8068]);
initWTC_P_F(s[8069]);
initWTC_P_T(s[8070]);
initWTC_P_O(s[8071]);
initJSA_R_I(s[8072]);
initJSA_R_F(s[8073]);
initJSA_R_T(s[8074]);
initJSA_R_O(s[8075]);
initJSA_P_I(s[8076]);
initJSA_P_F(s[8077]);
initJSA_P_T(s[8078]);
initJSA_P_O(s[8079]);
initGALL_R_I(s[8080]);
initGALL_R_F(s[8081]);
initGALL_R_T(s[8082]);
initGALL_R_O(s[8083]);
initGALL_P_I(s[8084]);
initGALL_P_F(s[8085]);
initGALL_P_T(s[8086]);
initGALL_P_O(s[8087]);
initWIDPEN_R_I(s[8088]);
initWIDPEN_R_F(s[8089]);
initWIDPEN_R_T(s[8090]);
initWIDPEN_R_O(s[8091]);
initWIDPEN_P_I(s[8092]);
initWIDPEN_P_F(s[8093]);
initWIDPEN_P_T(s[8094]);
initWIDPEN_P_O(s[8095]);
initCB_R_I(s[8096]);
initCB_R_F(s[8097]);
initCB_R_T(s[8098]);
initCB_R_O(s[8099]);
initCB_P_I(s[8100]);
initCB_P_F(s[8101]);
initCB_P_T(s[8102]);
initCB_P_O(s[8103]);
initCTC_R_I(s[8104]);
initCTC_R_F(s[8105]);
initCTC_R_T(s[8106]);
initCTC_R_O(s[8107]);
initCTC_P_I(s[8108]);
initCTC_P_F(s[8109]);
initCTC_P_T(s[8110]);
initCTC_P_O(s[8111]);
initOTH2_R_I(s[8112]);
initOTH2_R_F(s[8113]);
initOTH2_R_T(s[8114]);
initOTH2_R_O(s[8115]);
initOTH2_P_I(s[8116]);
initOTH2_P_F(s[8117]);
initOTH2_P_T(s[8118]);
initOTH2_P_O(s[8119]);
initOTHPAY_R_I(s[8120]);
initOTHPAY_R_F(s[8121]);
initOTHPAY_R_T(s[8122]);
initOTHPAY_R_O(s[8123]);
initOTHPAY_P_I(s[8124]);
initOTHPAY_P_F(s[8125]);
initOTHPAY_P_T(s[8126]);
initOTHPAY_P_O(s[8127]);
initSAVE_BU_I(s[8128]);
initSAVE_BU_F(s[8129]);
initSAVE_BU_T(s[8130]);
initSAVE_BU_O(s[8131]);
initSAVEI_BU_I(s[8132]);
initSAVEI_BU_F(s[8133]);
initSAVEI_BU_T(s[8134]);
initSAVEI_BU_O(s[8135]);
initTESSA_BU_I(s[8136]);
initTESSA_BU_F(s[8137]);
initTESSA_BU_T(s[8138]);
initTESSA_BU_O(s[8139]);
initTESSAI_BU_I(s[8140]);
initTESSAI_BU_F(s[8141]);
initTESSAI_BU_T(s[8142]);
initTESSAI_BU_O(s[8143]);
initCASHISA_BU_I(s[8144]);
initCASHISA_BU_F(s[8145]);
initCASHISA_BU_T(s[8146]);
initCASHISA_BU_O(s[8147]);
initLISA_BU_I(s[8148]);
initLISA_BU_F(s[8149]);
initLISA_BU_T(s[8150]);
initLISA_BU_O(s[8151]);
initSHISA_BU_I(s[8152]);
initSHISA_BU_F(s[8153]);
initSHISA_BU_T(s[8154]);
initSHISA_BU_O(s[8155]);
initISAI_BU_I(s[8156]);
initISAI_BU_F(s[8157]);
initISAI_BU_T(s[8158]);
initISAI_BU_O(s[8159]);
initPRBONDS_BU_I(s[8160]);
initPRBONDS_BU_F(s[8161]);
initPRBONDS_BU_T(s[8162]);
initPRBONDS_BU_O(s[8163]);
initPRBONDSI_BU_I(s[8164]);
initPRBONDSI_BU_F(s[8165]);
initPRBONDSI_BU_T(s[8166]);
initPRBONDSI_BU_O(s[8167]);
initNSAV_BU_I(s[8168]);
initNSAV_BU_F(s[8169]);
initNSAV_BU_T(s[8170]);
initNSAV_BU_O(s[8171]);
initNSAVI_BU_I(s[8172]);
initNSAVI_BU_F(s[8173]);
initNSAVI_BU_T(s[8174]);
initNSAVI_BU_O(s[8175]);
initPEP_BU_I(s[8176]);
initPEP_BU_F(s[8177]);
initPEP_BU_T(s[8178]);
initPEP_BU_O(s[8179]);
initPEPI_BU_I(s[8180]);
initPEPI_BU_F(s[8181]);
initPEPI_BU_T(s[8182]);
initPEPI_BU_O(s[8183]);
initSHARES_BU_I(s[8184]);
initSHARES_BU_F(s[8185]);
initSHARES_BU_T(s[8186]);
initSHARES_BU_O(s[8187]);
initSHARESI_BU_I(s[8188]);
initSHARESI_BU_F(s[8189]);
initSHARESI_BU_T(s[8190]);
initSHARESI_BU_O(s[8191]);
initTRUSTS_BU_I(s[8192]);
initTRUSTS_BU_F(s[8193]);
initTRUSTS_BU_T(s[8194]);
initTRUSTS_BU_O(s[8195]);
initTRUSTSI_BU_I(s[8196]);
initTRUSTSI_BU_F(s[8197]);
initTRUSTSI_BU_T(s[8198]);
initTRUSTSI_BU_O(s[8199]);
initBONDS_BU_I(s[8200]);
initBONDS_BU_F(s[8201]);
initBONDS_BU_T(s[8202]);
initBONDS_BU_O(s[8203]);
initBONDSI_BU_I(s[8204]);
initBONDSI_BU_F(s[8205]);
initBONDSI_BU_T(s[8206]);
initBONDSI_BU_O(s[8207]);
initOTHSAV_BU_I(s[8208]);
initOTHSAV_BU_F(s[8209]);
initOTHSAV_BU_T(s[8210]);
initOTHSAV_BU_O(s[8211]);
initOTHSAVI_BU_I(s[8212]);
initOTHSAVI_BU_F(s[8213]);
initOTHSAVI_BU_T(s[8214]);
initOTHSAVI_BU_O(s[8215]);
initLISAVE_BU_I(s[8216]);
initLISAVE_BU_F(s[8217]);
initLISAVE_BU_T(s[8218]);
initLISAVE_BU_O(s[8219]);
initHOME_BU_I(s[8220]);
initHOME_BU_F(s[8221]);
initHOME_BU_T(s[8222]);
initHOME_BU_O(s[8223]);
initHOMEI_BU_I(s[8224]);
initHOMEI_BU_F(s[8225]);
initHOMEI_BU_T(s[8226]);
initHOMEI_BU_O(s[8227]);
initFARM_BU_I(s[8228]);
initFARM_BU_F(s[8229]);
initFARM_BU_T(s[8230]);
initFARM_BU_O(s[8231]);
initFARMI_BU_I(s[8232]);
initFARMI_BU_F(s[8233]);
initFARMI_BU_T(s[8234]);
initFARMI_BU_O(s[8235]);
initTOTHASS_BU_I(s[8236]);
initTOTHASS_BU_F(s[8237]);
initTOTHASS_BU_T(s[8238]);
initTOTHASS_BU_O(s[8239]);
initCCARD_BU_I(s[8240]);
initCCARD_BU_F(s[8241]);
initCCARD_BU_T(s[8242]);
initCCARD_BU_O(s[8243]);
initPRDEBT_BU_I(s[8244]);
initPRDEBT_BU_F(s[8245]);
initPRDEBT_BU_T(s[8246]);
initPRDEBT_BU_O(s[8247]);
initODEBT_BU_I(s[8248]);
initODEBT_BU_F(s[8249]);
initODEBT_BU_T(s[8250]);
initODEBT_BU_O(s[8251]);
initJNTASS_BU_I(s[8252]);
initJNTASS_BU_F(s[8253]);
initJNTASS_BU_T(s[8254]);
initJNTASS_BU_O(s[8255]);
initWPPP_BU_I(s[8256]);
initWPPP_BU_F(s[8257]);
initWPPP_BU_T(s[8258]);
initWPPP_BU_O(s[8259]);
initWPPP_R_I(s[8260]);
initWPPP_R_F(s[8261]);
initWPPP_R_T(s[8262]);
initWPPP_R_O(s[8263]);
initWPPP_P_I(s[8264]);
initWPPP_P_F(s[8265]);
initWPPP_P_T(s[8266]);
initWPPP_P_O(s[8267]);
initTHP_BU_I(s[8268]);
initTHP_BU_F(s[8269]);
initTHP_BU_T(s[8270]);
initTHP_BU_O(s[8271]);
initTHP_R_I(s[8272]);
initTHP_R_F(s[8273]);
initTHP_R_T(s[8274]);
initTHP_R_O(s[8275]);
initTHP_P_I(s[8276]);
initTHP_P_F(s[8277]);
initTHP_P_T(s[8278]);
initTHP_P_O(s[8279]);
initNETPROF_BU_I(s[8280]);
initNETPROF_BU_F(s[8281]);
initNETPROF_BU_T(s[8282]);
initNETPROF_BU_O(s[8283]);
initNETPROF_R_I(s[8284]);
initNETPROF_R_F(s[8285]);
initNETPROF_R_T(s[8286]);
initNETPROF_R_O(s[8287]);
initNETPROF_P_I(s[8288]);
initNETPROF_P_F(s[8289]);
initNETPROF_P_T(s[8290]);
initNETPROF_P_O(s[8291]);
initSEDRAW_BU_I(s[8292]);
initSEDRAW_BU_F(s[8293]);
initSEDRAW_BU_T(s[8294]);
initSEDRAW_BU_O(s[8295]);
initSEDRAW_R_I(s[8296]);
initSEDRAW_R_F(s[8297]);
initSEDRAW_R_T(s[8298]);
initSEDRAW_R_O(s[8299]);
initSEDRAW_P_I(s[8300]);
initSEDRAW_P_F(s[8301]);
initSEDRAW_P_T(s[8302]);
initSEDRAW_P_O(s[8303]);
initBUSV_BU_I(s[8304]);
initBUSV_BU_F(s[8305]);
initBUSV_BU_T(s[8306]);
initBUSV_BU_O(s[8307]);
initBUSV_R_I(s[8308]);
initBUSV_R_F(s[8309]);
initBUSV_R_T(s[8310]);
initBUSV_R_O(s[8311]);
initBUSV_P_I(s[8312]);
initBUSV_P_F(s[8313]);
initBUSV_P_T(s[8314]);
initBUSV_P_O(s[8315]);
initOJ_BU_I(s[8316]);
initOJ_BU_F(s[8317]);
initOJ_BU_T(s[8318]);
initOJ_BU_O(s[8319]);
initOJ_R_I(s[8320]);
initOJ_R_F(s[8321]);
initOJ_R_T(s[8322]);
initOJ_R_O(s[8323]);
initOJ_P_I(s[8324]);
initOJ_P_F(s[8325]);
initOJ_P_T(s[8326]);
initOJ_P_O(s[8327]);
initOTHBUSV_BU_I(s[8328]);
initOTHBUSV_BU_F(s[8329]);
initOTHBUSV_BU_T(s[8330]);
initOTHBUSV_BU_O(s[8331]);
initOTHBUSV_R_I(s[8332]);
initOTHBUSV_R_F(s[8333]);
initOTHBUSV_R_T(s[8334]);
initOTHBUSV_R_O(s[8335]);
initOTHBUSV_P_I(s[8336]);
initOTHBUSV_P_F(s[8337]);
initOTHBUSV_P_T(s[8338]);
initOTHBUSV_P_O(s[8339]);
initHSVAL_HH_I(s[8340]);
initHSVAL_HH_F(s[8341]);
initHSVAL_HH_T(s[8342]);
initHSVAL_HH_O(s[8343]);
initHDEBT_HH_I(s[8344]);
initHDEBT_HH_F(s[8345]);
initHDEBT_HH_T(s[8346]);
initHDEBT_HH_O(s[8347]);
initTOTINC_BU_S(s[8348]);
initTOTINC_BU_F(s[8349]);
initTOTINC_BU_T(s[8350]);
initTOTINC_BU_NI2(s[8351]);
initTOTINC_BU_NI3(s[8352]);
initTOTINC_BU_NI4(s[8353]);
initEQTOTINC_BU_S(s[8354]);
initEQTOTINC_BU_F(s[8355]);
initEQTOTINC_BU_T(s[8356]);
initEQTOTINC_BU_NI2(s[8357]);
initEQTOTINC_BU_NI3(s[8358]);
initEQTOTINC_BU_NI4(s[8359]);
initEMPINC_BU_S(s[8360]);
initEMPINC_BU_F(s[8361]);
initEMPINC_BU_T(s[8362]);
initEMPINC_BU_NI2(s[8363]);
initEMPINC_BU_NI3(s[8364]);
initEMPINC_BU_NI4(s[8365]);
initEQEMPINC_BU_S(s[8366]);
initEQEMPINC_BU_F(s[8367]);
initEQEMPINC_BU_T(s[8368]);
initEQEMPINC_BU_NI2(s[8369]);
initEQEMPINC_BU_NI3(s[8370]);
initEQEMPINC_BU_NI4(s[8371]);
initEMPINC_R_S(s[8372]);
initEMPINC_R_F(s[8373]);
initEMPINC_R_T(s[8374]);
initEMPINC_R_NI2(s[8375]);
initEMPINC_R_NI3(s[8376]);
initEMPINC_R_NI4(s[8377]);
initEMPINC_P_S(s[8378]);
initEMPINC_P_F(s[8379]);
initEMPINC_P_T(s[8380]);
initEMPINC_P_NI2(s[8381]);
initEMPINC_P_NI3(s[8382]);
initEMPINC_P_NI4(s[8383]);
initSEINC_BU_S(s[8384]);
initSEINC_BU_F(s[8385]);
initSEINC_BU_T(s[8386]);
initSEINC_BU_NI2(s[8387]);
initSEINC_BU_NI3(s[8388]);
initSEINC_BU_NI4(s[8389]);
initEQSEINC_BU_S(s[8390]);
initEQSEINC_BU_F(s[8391]);
initEQSEINC_BU_T(s[8392]);
initEQSEINC_BU_NI2(s[8393]);
initEQSEINC_BU_NI3(s[8394]);
initEQSEINC_BU_NI4(s[8395]);
initSEINC_R_S(s[8396]);
initSEINC_R_F(s[8397]);
initSEINC_R_T(s[8398]);
initSEINC_R_NI2(s[8399]);
initSEINC_R_NI3(s[8400]);
initSEINC_R_NI4(s[8401]);
initSEINC_P_S(s[8402]);
initSEINC_P_F(s[8403]);
initSEINC_P_T(s[8404]);
initSEINC_P_NI2(s[8405]);
initSEINC_P_NI3(s[8406]);
initSEINC_P_NI4(s[8407]);
initPPINC_BU_S(s[8408]);
initPPINC_BU_F(s[8409]);
initPPINC_BU_T(s[8410]);
initPPINC_BU_NI2(s[8411]);
initPPINC_BU_NI3(s[8412]);
initPPINC_BU_NI4(s[8413]);
initEQPPINC_BU_S(s[8414]);
initEQPPINC_BU_F(s[8415]);
initEQPPINC_BU_T(s[8416]);
initEQPPINC_BU_NI2(s[8417]);
initEQPPINC_BU_NI3(s[8418]);
initEQPPINC_BU_NI4(s[8419]);
initPPINC_R_S(s[8420]);
initPPINC_R_F(s[8421]);
initPPINC_R_T(s[8422]);
initPPINC_R_NI2(s[8423]);
initPPINC_R_NI3(s[8424]);
initPPINC_R_NI4(s[8425]);
initPPINC_P_S(s[8426]);
initPPINC_P_F(s[8427]);
initPPINC_P_T(s[8428]);
initPPINC_P_NI2(s[8429]);
initPPINC_P_NI3(s[8430]);
initPPINC_P_NI4(s[8431]);
initSPINC_BU_S(s[8432]);
initSPINC_BU_F(s[8433]);
initSPINC_BU_T(s[8434]);
initSPINC_BU_NI2(s[8435]);
initSPINC_BU_NI3(s[8436]);
initSPINC_BU_NI4(s[8437]);
initEQSPINC_BU_S(s[8438]);
initEQSPINC_BU_F(s[8439]);
initEQSPINC_BU_T(s[8440]);
initEQSPINC_BU_NI2(s[8441]);
initEQSPINC_BU_NI3(s[8442]);
initEQSPINC_BU_NI4(s[8443]);
initSPINC_R_S(s[8444]);
initSPINC_R_F(s[8445]);
initSPINC_R_T(s[8446]);
initSPINC_R_NI2(s[8447]);
initSPINC_R_NI3(s[8448]);
initSPINC_R_NI4(s[8449]);
initSPINC_P_S(s[8450]);
initSPINC_P_F(s[8451]);
initSPINC_P_T(s[8452]);
initSPINC_P_NI2(s[8453]);
initSPINC_P_NI3(s[8454]);
initSPINC_P_NI4(s[8455]);
initBENINC_BU_S(s[8456]);
initBENINC_BU_F(s[8457]);
initBENINC_BU_T(s[8458]);
initBENINC_BU_NI2(s[8459]);
initBENINC_BU_NI3(s[8460]);
initBENINC_BU_NI4(s[8461]);
initEQBENINC_BU_S(s[8462]);
initEQBENINC_BU_F(s[8463]);
initEQBENINC_BU_T(s[8464]);
initEQBENINC_BU_NI2(s[8465]);
initEQBENINC_BU_NI3(s[8466]);
initEQBENINC_BU_NI4(s[8467]);
initBENINC_R_S(s[8468]);
initBENINC_R_F(s[8469]);
initBENINC_R_T(s[8470]);
initBENINC_R_NI2(s[8471]);
initBENINC_R_NI3(s[8472]);
initBENINC_R_NI4(s[8473]);
initBENINC_P_S(s[8474]);
initBENINC_P_F(s[8475]);
initBENINC_P_T(s[8476]);
initBENINC_P_NI2(s[8477]);
initBENINC_P_NI3(s[8478]);
initBENINC_P_NI4(s[8479]);
initASSINC_BU_S(s[8480]);
initASSINC_BU_F(s[8481]);
initASSINC_BU_T(s[8482]);
initASSINC_BU_NI2(s[8483]);
initASSINC_BU_NI3(s[8484]);
initASSINC_BU_NI4(s[8485]);
initEQASSINC_BU_S(s[8486]);
initEQASSINC_BU_F(s[8487]);
initEQASSINC_BU_T(s[8488]);
initEQASSINC_BU_NI2(s[8489]);
initEQASSINC_BU_NI3(s[8490]);
initEQASSINC_BU_NI4(s[8491]);
initOTHINC_BU_S(s[8492]);
initOTHINC_BU_F(s[8493]);
initOTHINC_BU_T(s[8494]);
initOTHINC_BU_NI2(s[8495]);
initOTHINC_BU_NI3(s[8496]);
initOTHINC_BU_NI4(s[8497]);
initEQOTHINC_BU_S(s[8498]);
initEQOTHINC_BU_F(s[8499]);
initEQOTHINC_BU_T(s[8500]);
initEQOTHINC_BU_NI2(s[8501]);
initEQOTHINC_BU_NI3(s[8502]);
initEQOTHINC_BU_NI4(s[8503]);
initOTHINC_R_S(s[8504]);
initOTHINC_R_F(s[8505]);
initOTHINC_R_T(s[8506]);
initOTHINC_R_NI2(s[8507]);
initOTHINC_R_NI3(s[8508]);
initOTHINC_R_NI4(s[8509]);
initOTHINC_P_S(s[8510]);
initOTHINC_P_F(s[8511]);
initOTHINC_P_T(s[8512]);
initOTHINC_P_NI2(s[8513]);
initOTHINC_P_NI3(s[8514]);
initOTHINC_P_NI4(s[8515]);
initSAVINGS_BU_S(s[8516]);
initSAVINGS_BU_F(s[8517]);
initSAVINGS_BU_T(s[8518]);
initSAVINGS_BU_NI2(s[8519]);
initSAVINGS_BU_NI3(s[8520]);
initSAVINGS_BU_NI4(s[8521]);
initINVESTS_BU_S(s[8522]);
initINVESTS_BU_F(s[8523]);
initINVESTS_BU_T(s[8524]);
initINVESTS_BU_NI2(s[8525]);
initINVESTS_BU_NI3(s[8526]);
initINVESTS_BU_NI4(s[8527]);
initGROSSFW_BU_S(s[8528]);
initGROSSFW_BU_F(s[8529]);
initGROSSFW_BU_T(s[8530]);
initGROSSFW_BU_NI2(s[8531]);
initGROSSFW_BU_NI3(s[8532]);
initGROSSFW_BU_NI4(s[8533]);
initDEBT_BU_S(s[8534]);
initDEBT_BU_F(s[8535]);
initDEBT_BU_T(s[8536]);
initDEBT_BU_NI2(s[8537]);
initDEBT_BU_NI3(s[8538]);
initDEBT_BU_NI4(s[8539]);
initNETFW_BU_S(s[8540]);
initNETFW_BU_F(s[8541]);
initNETFW_BU_T(s[8542]);
initNETFW_BU_NI2(s[8543]);
initNETFW_BU_NI3(s[8544]);
initNETFW_BU_NI4(s[8545]);
initNETPW_BU_S(s[8546]);
initNETPW_BU_F(s[8547]);
initNETPW_BU_T(s[8548]);
initNETPW_BU_NI2(s[8549]);
initNETPW_BU_NI3(s[8550]);
initNETPW_BU_NI4(s[8551]);
initGROSSTOTNHW_BU_S(s[8552]);
initGROSSTOTNHW_BU_F(s[8553]);
initGROSSTOTNHW_BU_T(s[8554]);
initGROSSTOTNHW_BU_NI2(s[8555]);
initGROSSTOTNHW_BU_NI3(s[8556]);
initGROSSTOTNHW_BU_NI4(s[8557]);
initNETTOTNHW_BU_S(s[8558]);
initNETTOTNHW_BU_F(s[8559]);
initNETTOTNHW_BU_T(s[8560]);
initNETTOTNHW_BU_NI2(s[8561]);
initNETTOTNHW_BU_NI3(s[8562]);
initNETTOTNHW_BU_NI4(s[8563]);
initGROSSHW_BU_S(s[8564]);
initGROSSHW_BU_F(s[8565]);
initGROSSHW_BU_T(s[8566]);
initGROSSHW_BU_NI2(s[8567]);
initGROSSHW_BU_NI3(s[8568]);
initGROSSHW_BU_NI4(s[8569]);
initNETHW_BU_S(s[8570]);
initNETHW_BU_F(s[8571]);
initNETHW_BU_T(s[8572]);
initNETHW_BU_NI2(s[8573]);
initNETHW_BU_NI3(s[8574]);
initNETHW_BU_NI4(s[8575]);
initMGDEBT_BU_S(s[8576]);
initMGDEBT_BU_F(s[8577]);
initMGDEBT_BU_T(s[8578]);
initMGDEBT_BU_NI2(s[8579]);
initMGDEBT_BU_NI3(s[8580]);
initMGDEBT_BU_NI4(s[8581]);
initNETTOTW_BU_S(s[8582]);
initNETTOTW_BU_F(s[8583]);
initNETTOTW_BU_T(s[8584]);
initNETTOTW_BU_NI2(s[8585]);
initNETTOTW_BU_NI3(s[8586]);
initNETTOTW_BU_NI4(s[8587]);
initYQ5_BU_S(s[8588]);
initYQ5_BU_F(s[8589]);
initYQ10_BU_S(s[8590]);
initYQ10_BU_F(s[8591]);
initTNHWQ5_BU_S(s[8592]);
initTNHWQ5_BU_F(s[8593]);
initTNHWQ10_BU_S(s[8594]);
initTNHWQ10_BU_F(s[8595]);
initNFWQ5_BU_S(s[8596]);
initNFWQ5_BU_F(s[8597]);
initNFWQ10_BU_S(s[8598]);
initNFWQ10_BU_F(s[8599]);
initTOTWQ5_BU_S(s[8600]);
initTOTWQ5_BU_F(s[8601]);
initTOTWQ10_BU_S(s[8602]);
initTOTWQ10_BU_F(s[8603]);
initIDAUNIQ(s[8604]);
initIDAHH(s[8605]);
initHHID(s[8606]);
initWGT(s[8607]);
initLWGT(s[8608]);
initWAVE(s[8609]);
initPERID(s[8610]);
initPERSNO(s[8611]);
initCOUPID(s[8612]);
initCOUPID_INST(s[8613]);
initXCOUPID(s[8614]);
initXCOUPID_INST(s[8615]);
initFUTYPE(s[8616]);
initFUID(s[8617]);
initFUID_INST(s[8618]);
initBUNO(s[8619]);
initCPID(s[8620]);
initIDAUNIQ_P(s[8621]);
initINTDATM(s[8622]);
initINTDATY(s[8623]);
initIINTDATM(s[8624]);
initIINTDATY(s[8625]);
initAGE(s[8626]);
initAGE_P(s[8627]);
initINDOBYR(s[8628]);
initINDOBYR_P(s[8629]);
initSEX(s[8630]);
initSEX_P(s[8631]);
initELSA(s[8632]);
initELSA_P(s[8633]);
initINST(s[8634]);
initINST_P(s[8635]);
initRESPONDED_P(s[8636]);
initDIED_P(s[8637]);
initCOUPLE(s[8638]);
initHHANSHO(s[8639]);
initIANSHO(s[8640]);
initIANSIA(s[8641]);
initNUMANSIA(s[8642]);
initNUMANSIAFU(s[8643]);
initPROXY(s[8644]);
initNONWHITE(s[8645]);
initREFRESHTYPE(s[8646]);
initNUMBUS(s[8647]);
initNUMINELIG(s[8648]);
initNSAMPMEM(s[8649]);
initHOH(s[8650]);
initRELTOHOH(s[8651]);
initHOHSP(s[8652]);
initBUHEAD(s[8653]);
initFIRSTBU(s[8654]);
initNPEOPLE(s[8655]);
initNUMHHAD(s[8656]);
initNUMBUAD(s[8657]);
initNUMBUKID(s[8658]);
initNUMHHKID(s[8659]);
initAGEBUHEAD(s[8660]);
initAGEBUSP(s[8661]);
initSEXBUHEAD(s[8662]);
initAGEHOH(s[8663]);
initSEXHOH(s[8664]);
initNUMMALE(s[8665]);
initNUMFEMALE(s[8666]);
initNUMMALEAD(s[8667]);
initNUMFEMALEAD(s[8668]);
initAGEHHCH1(s[8669]);
initAGEHHCH2(s[8670]);
initAGEHHCH3(s[8671]);
initAGEHHCH4(s[8672]);
initAGEHHCH5(s[8673]);
initAGEHHCH6(s[8674]);
initAGEHHCH7(s[8675]);
initAGEHHCH8(s[8676]);
initAGEBUCH1(s[8677]);
initAGEBUCH2(s[8678]);
initAGEBUCH3(s[8679]);
initAGEBUCH4(s[8680]);
initAGEBUCH5(s[8681]);
initAGEBUCH6(s[8682]);
initAGEBUCH7(s[8683]);
initAGEBUCH8(s[8684]);
initCHAGE1(s[8685]);
initCHSEX1(s[8686]);
initCHTYPE1(s[8687]);
initCHSTAT1(s[8688]);
initCHAGE2(s[8689]);
initCHSEX2(s[8690]);
initCHTYPE2(s[8691]);
initCHSTAT2(s[8692]);
initCHAGE3(s[8693]);
initCHSEX3(s[8694]);
initCHTYPE3(s[8695]);
initCHSTAT3(s[8696]);
initCHAGE4(s[8697]);
initCHSEX4(s[8698]);
initCHTYPE4(s[8699]);
initCHSTAT4(s[8700]);
initCHAGE5(s[8701]);
initCHSEX5(s[8702]);
initCHTYPE5(s[8703]);
initCHSTAT5(s[8704]);
initCHAGE6(s[8705]);
initCHSEX6(s[8706]);
initCHTYPE6(s[8707]);
initCHSTAT6(s[8708]);
initCHAGE7(s[8709]);
initCHSEX7(s[8710]);
initCHTYPE7(s[8711]);
initCHSTAT7(s[8712]);
initCHAGE8(s[8713]);
initCHSEX8(s[8714]);
initCHTYPE8(s[8715]);
initCHSTAT8(s[8716]);
initCHAGE9(s[8717]);
initCHSEX9(s[8718]);
initCHTYPE9(s[8719]);
initCHSTAT9(s[8720]);
initCHAGE10(s[8721]);
initCHSEX10(s[8722]);
initCHTYPE10(s[8723]);
initCHSTAT10(s[8724]);
initCHAGE11(s[8725]);
initCHSEX11(s[8726]);
initCHTYPE11(s[8727]);
initCHSTAT11(s[8728]);
initCHAGE12(s[8729]);
initCHSEX12(s[8730]);
initCHTYPE12(s[8731]);
initCHSTAT12(s[8732]);
initCHAGE13(s[8733]);
initCHSEX13(s[8734]);
initCHTYPE13(s[8735]);
initCHSTAT13(s[8736]);
initCHAGE14(s[8737]);
initCHSEX14(s[8738]);
initCHTYPE14(s[8739]);
initCHSTAT14(s[8740]);
initCHAGE15(s[8741]);
initCHSEX15(s[8742]);
initCHTYPE15(s[8743]);
initCHSTAT15(s[8744]);
initCHAGE16(s[8745]);
initCHSEX16(s[8746]);
initCHTYPE16(s[8747]);
initCHSTAT16(s[8748]);
initNGRANDCH(s[8749]);
initNGRANDCHINHH(s[8750]);
initNSIBS(s[8751]);
initFAMTYPE(s[8752]);
initBUTYPE(s[8753]);
initAGEG5(s[8754]);
initAGEG5_BU(s[8755]);
initAGEG7(s[8756]);
initAGEG7_BU(s[8757]);
initAGEG10(s[8758]);
initAGEG10_BU(s[8759]);
initAGEG3(s[8760]);
initAGEG3_BU(s[8761]);
initSPAGE(s[8762]);
initSPAGE_BU(s[8763]);
initNUMBUK013(s[8764]);
initNUMBUK1418(s[8765]);
initNUMHHK013(s[8766]);
initNUMHHK1418(s[8767]);
initBUEQ(s[8768]);
initHHEQ(s[8769]);
initTENURE(s[8770]);
initSOCRENT(s[8771]);
initNUMHHLDRSINHH(s[8772]);
initAGEHHLDR1(s[8773]);
initAGEHHLDR2(s[8774]);
initAGEHHLDR3(s[8775]);
initAGEHHLDR4(s[8776]);
initNAMEONPROP(s[8777]);
initSPNAMEONPROP(s[8778]);
initMARSTAT(s[8779]);
initHHGRIDDHWORK(s[8780]);
initHHGRIDDHWORK_P(s[8781]);
initWPACTIVE(s[8782]);
initWPACTIVE_P(s[8783]);
initWSELFD(s[8784]);
initWSELFD_P(s[8785]);
initECPOS(s[8786]);
initWORKTIME(s[8787]);
initHOURS(s[8788]);
initHOURS_AJ(s[8789]);
initEVERWORK(s[8790]);
initPP_MEM(s[8791]);
initPP_CONT(s[8792]);
initPP_NCONT(s[8793]);
initPP_OCC(s[8794]);
initPP_NOCC(s[8795]);
initPP_OCCDB(s[8796]);
initPP_NOCCDB(s[8797]);
initPP_OCCDC(s[8798]);
initPP_NOCCDC(s[8799]);
initPP_OCCNK(s[8800]);
initPP_NOCCNK(s[8801]);
initPP_PER(s[8802]);
initPP_NPER(s[8803]);
initPP_NK(s[8804]);
initPP_NNK(s[8805]);
initPP_REC(s[8806]);
initPP_NREC(s[8807]);
initPP_RR(s[8808]);
initPP_NRR(s[8809]);
initPP_MAXYRS(s[8810]);
initEDEND(s[8811]);
initEDQUAL(s[8812]);
initQUAL2(s[8813]);
initQUAL3(s[8814]);
initSCHLEAVE(s[8815]);
initQUAL2_P(s[8816]);
initQUAL3_P(s[8817]);
initSCHLEAVE_P(s[8818]);
initLACKRES(s[8819]);
initLACKRESB(s[8820]);
initINHERGT0(s[8821]);
initINHERGT0B(s[8822]);
initINHERGT10(s[8823]);
initINHERGT10B(s[8824]);
initINHERGT100(s[8825]);
initINHERGT100B(s[8826]);
initBEQUESTGT50(s[8827]);
initBEQUESTGT50B(s[8828]);
initBEQUESTGT0(s[8829]);
initBEQUESTGT0B(s[8830]);
initBEQUESTGT150(s[8831]);
initBEQUESTGT150B(s[8832]);
initEXPLIVE(s[8833]);
initEXPLIVEB(s[8834]);
initEXPLIVE75(s[8835]);
initEXPLIVE80(s[8836]);
initEXPLIVE85(s[8837]);
initEXPLIVE90(s[8838]);
initEXPLIVE95(s[8839]);
initEXPLIVE100(s[8840]);
initEXPLIVE75B(s[8841]);
initEXPLIVE80B(s[8842]);
initEXPLIVE85B(s[8843]);
initEXPLIVE90B(s[8844]);
initEXPLIVE95B(s[8845]);
initEXPLIVE100B(s[8846]);
initEXWORK(s[8847]);
initEXWORKB(s[8848]);
initEXWORK55(s[8849]);
initEXWORK55B(s[8850]);
initEXWORK60(s[8851]);
initEXWORK60B(s[8852]);
initEXWORK65(s[8853]);
initEXWORK65B(s[8854]);
initEXHLIMW(s[8855]);
initEXHLIMWB(s[8856]);
initFINDIFF(s[8857]);
initNDEPRIV(s[8858]);
initSRH_HRS(s[8859]);
initSRH_HSE(s[8860]);
initHRSFIRST(s[8861]);
initSRH3_HRS(s[8862]);
initSRH3_HSE(s[8863]);
initSRH3_HRS_P(s[8864]);
initSRH3_HSE_P(s[8865]);
initLLSILL(s[8866]);
initHLIMWRK(s[8867]);
initHLIMWRKC(s[8868]);
initHEMOBWA(s[8869]);
initHEMOBSI(s[8870]);
initHEMOBCH(s[8871]);
initHEMOBCS(s[8872]);
initHEMOBCL(s[8873]);
initHEMOBST(s[8874]);
initHEMOBRE(s[8875]);
initHEMOBPU(s[8876]);
initHEMOBLI(s[8877]);
initHEMOBPI(s[8878]);
initHEMOB96(s[8879]);
initHEADLDR(s[8880]);
initHEADLWA(s[8881]);
initHEADLBA(s[8882]);
initHEADLEA(s[8883]);
initHEADLBE(s[8884]);
initHEADLWC(s[8885]);
initHEADLMA(s[8886]);
initHEADLDA(s[8887]);
initHEADLPR(s[8888]);
initHEADLSH(s[8889]);
initHEADLPH(s[8890]);
initHEADLCO(s[8891]);
initHEADLME(s[8892]);
initHEADLHO(s[8893]);
initHEADLMO(s[8894]);
initHEADL96(s[8895]);
initSMOKER(s[8896]);
initSMOKERSTAT(s[8897]);
initMALIVE(s[8898]);
initMOTHAGE(s[8899]);
initMAGEDIED(s[8900]);
initFALIVE(s[8901]);
initFATHAGE(s[8902]);
initFAGEDIED(s[8903]);
initDIKLIVM(s[8904]);
initDIFJOBM(s[8905]);
initNRIGHT(s[8906]);
initNUMTYPE5(s[8907]);
initNUMTYPE4(s[8908]);
initNUMTYPE2(s[8909]);
initEXECNN(s[8910]);
initMEMTOT(s[8911]);
initMEMTOTB(s[8912]);
initMAXNUMTYPE5(s[8913]);
initMAXNUMTYPE4(s[8914]);
initMAXNUMTYPE2(s[8915]);
initMAXEXECNN(s[8916]);
initMAXMEMTOTB(s[8917]);
initCESD_SC(s[8918]);
initCESD_NA(s[8919]);
initNROOMS(s[8920]);
initHOOLDM(s[8921]);
initHOMOVEM(s[8922]);
initHOYEARM(s[8923]);
initHOPAYM(s[8924]);
initRPI(s[8925]);
initFOODINL(s[8926]);
initFOODINU(s[8927]);
initFOODINT(s[8928]);
initFOODOUTL(s[8929]);
initFOODOUTU(s[8930]);
initFOODOUTT(s[8931]);
initCLOTHESL(s[8932]);
initCLOTHESU(s[8933]);
initCLOTHEST(s[8934]);
initLEISUREL(s[8935]);
initLEISUREU(s[8936]);
initLEISURET(s[8937]);
initTRANSFERSL(s[8938]);
initTRANSFERSU(s[8939]);
initTRANSFERST(s[8940]);
initUSESGAS(s[8941]);
initUSESELEC(s[8942]);
initUSESCOAL(s[8943]);
initUSESPARA(s[8944]);
initUSESOIL(s[8945]);
initUSESWOOD(s[8946]);
initUSESOTHERF(s[8947]);
initGASELECT(s[8948]);
initGASELECL(s[8949]);
initGASELECU(s[8950]);
initGASELECMETH(s[8951]);
initGAST(s[8952]);
initGASL(s[8953]);
initGASU(s[8954]);
initGASMETH(s[8955]);
initELECT(s[8956]);
initELECL(s[8957]);
initELECU(s[8958]);
initELECMETH(s[8959]);
initCOALL(s[8960]);
initCOALU(s[8961]);
initCOALT(s[8962]);
initPARAL(s[8963]);
initPARAU(s[8964]);
initPARAT(s[8965]);
initOILL(s[8966]);
initOILU(s[8967]);
initOILT(s[8968]);
initWOODL(s[8969]);
initWOODU(s[8970]);
initWOODT(s[8971]);
initOTHERFL(s[8972]);
initOTHERFU(s[8973]);
initOTHERFT(s[8974]);
initGROSSRENTL(s[8975]);
initGROSSRENTU(s[8976]);
initGROSSRENTT(s[8977]);
initGETSHB(s[8978]);
initNETRENTL(s[8979]);
initNETRENTU(s[8980]);
initNETRENTT(s[8981]);
initRENTINCWA(s[8982]);
initRENTINCSE(s[8983]);
initRENTINCLA(s[8984]);
initRENTINCGA(s[8985]);
initRENTINCHE(s[8986]);
initRENTINCCO(s[8987]);
initRENTINCME(s[8988]);
initRENTINCGD(s[8989]);
initRENTINCCL(s[8990]);
initRENTINCWP(s[8991]);
initRENTINCSG(s[8992]);
initRENTINC85(s[8993]);
initMORTPAYL(s[8994]);
initMORTPAYU(s[8995]);
initMORTPAYT(s[8996]);
initMORTPAYXL(s[8997]);
initMORTPAYXU(s[8998]);
initMORTPAYXT(s[8999]);
initMORTINCPP(s[9000]);
initMORTINCBI(s[9001]);
initMORTINCPI(s[9002]);
initMORTINC85(s[9003]);
initIDAUNIQ(s[9004]);
initPENID(s[9005]);
initPENSION(s[9006]);
initNPFFW(s[9007]);
initWPMORE(s[9008]);
initWPNPENS(s[9009]);
initWPRPENS(s[9010]);
initWPPENN(s[9011]);
initWPFFPENN(s[9012]);
initWPFFPENT(s[9013]);
initWPFFDCDB(s[9014]);
initWPFFCURP(s[9015]);
initWPFFRECP(s[9016]);
initWPFFYBS(s[9017]);
initWPFFCONS(s[9018]);
initWPPENT(s[9019]);
initWPNEWP(s[9020]);
initWPPREV(s[9021]);
initWPCURR(s[9022]);
initWPLFTPCH(s[9023]);
initWPLFTPOF(s[9024]);
initWPLFTPEL(s[9025]);
initWPLFTPAF(s[9026]);
initWPLFTPRT(s[9027]);
initWPLFTPRE(s[9028]);
initWPLFTP95(s[9029]);
initWPREC(s[9030]);
initWPRGHX(s[9031]);
initWPCURP(s[9032]);
initWPSRUL(s[9033]);
initWPDPS(s[9034]);
initWPDCDB(s[9035]);
initWPCOS(s[9036]);
initWPNRA(s[9037]);
initWPBTHA(s[9038]);
initWPBTHP(s[9039]);
initWPERA(s[9040]);
initWPYAER(s[9041]);
initWPDESP(s[9042]);
initWPFSAP(s[9043]);
initWPPLP(s[9044]);
initWPPLPH(s[9045]);
initWPLUMP(s[9046]);
initWPLUMPL(s[9047]);
initWPLUMPU(s[9048]);
initWPLUMPE(s[9049]);
initWPLUMPR(s[9050]);
initWPPTP(s[9051]);
initWPPSAL(s[9052]);
initWPASAL(s[9053]);
initWPASALL(s[9054]);
initWPASALU(s[9055]);
initWPASALE(s[9056]);
initWPASALR(s[9057]);
initWPYBS(s[9058]);
initWPERC(s[9059]);
initWPMC(s[9060]);
initWPMCA(s[9061]);
initWPPERC(s[9062]);
initWPMFRC(s[9063]);
initWPACON(s[9064]);
initWPADY(s[9065]);
initWPMMIN(s[9066]);
initWPACOA(s[9067]);
initWPACOB(s[9068]);
initWPACOC(s[9069]);
initWPFRAS(s[9070]);
initWPCONY(s[9071]);
initWPPCON(s[9072]);
initWPYCAT(s[9073]);
initWPYCA(s[9074]);
initWPMCAF(s[9075]);
initWPYFRA(s[9076]);
initWPLCOY(s[9077]);
initWPLCOM(s[9078]);
initWPNIRR(s[9079]);
initWPMCON(s[9080]);
initWPAC(s[9081]);
initWPFSC(s[9082]);
initWPRCON(s[9083]);
initWPRCMO(s[9084]);
initWPRCRE(s[9085]);
initWPRCST(s[9086]);
initWPRCRI(s[9087]);
initWPRCPU(s[9088]);
initWPRC95(s[9089]);
initWPRCMMO(s[9090]);
initWPRCMRE(s[9091]);
initWPRCMST(s[9092]);
initWPRCMRI(s[9093]);
initWPRCMPU(s[9094]);
initWPRCMOH(s[9095]);
initWPRCMUN(s[9096]);
initWPRCMAF(s[9097]);
initWPRCMNK(s[9098]);
initWPRCM85(s[9099]);
initWPRCM86(s[9100]);
initWPRSCM95(s[9101]);
initWPCEMP(s[9102]);
initWPECPP(s[9103]);
initWPAECP(s[9104]);
initWPEPER(s[9105]);
initWPFSEC(s[9106]);
initWPMEC(s[9107]);
initWPAMEC(s[9108]);
initWPFSCP(s[9109]);
initWPFSCO(s[9110]);
initWPFSAV(s[9111]);
initWPPFVA(s[9112]);
initWPPFVL(s[9113]);
initWPPFVU(s[9114]);
initWPPFVE(s[9115]);
initWPPFVR(s[9116]);
initWPAPF(s[9117]);
initWPAPFL(s[9118]);
initWPAPFU(s[9119]);
initWPAPFE(s[9120]);
initWPAPFR(s[9121]);
initWPPTOP(s[9122]);
initWPPENB(s[9123]);
initWPPENTL(s[9124]);
initWPPENTU(s[9125]);
initWPPENTE(s[9126]);
initWPPENTR(s[9127]);
initWPPENAL(s[9128]);
initWPPENAU(s[9129]);
initWPPENAE(s[9130]);
initWPPENAR(s[9131]);
initWPDPSP(s[9132]);
initWPERCP(s[9133]);
initWPDS(s[9134]);
initWPDE(s[9135]);
initWPINF(s[9136]);
initWPPAY(s[9137]);
initWPPYR(s[9138]);
initWPPYRWL(s[9139]);
initWPPYRWU(s[9140]);
initWPPYRWE(s[9141]);
initWPPYRWR(s[9142]);
initWPPYRFL(s[9143]);
initWPPYRFU(s[9144]);
initWPPYRFE(s[9145]);
initWPPYRFR(s[9146]);
initWPPYRML(s[9147]);
initWPPYRMU(s[9148]);
initWPPYRME(s[9149]);
initWPPYRMR(s[9150]);
initWPPYRYL(s[9151]);
initWPPYRYU(s[9152]);
initWPPYRYE(s[9153]);
initWPPYRYR(s[9154]);
initWPPYROL(s[9155]);
initWPPYROU(s[9156]);
initWPPYROE(s[9157]);
initWPPYROR(s[9158]);
initWPTAX(s[9159]);
initWPNEW(s[9160]);
initWPLUPS(s[9161]);
initWPLUPA(s[9162]);
initWPLUAL(s[9163]);
initWPLUAU(s[9164]);
initWPLUAE(s[9165]);
initWPLUAR(s[9166]);
initWPTAKP(s[9167]);
initWPINCD(s[9168]);
initWPINCDL(s[9169]);
initWPINCDU(s[9170]);
initWPINCDE(s[9171]);
initWPINCDR(s[9172]);
initWPIFSNO(s[9173]);
initWPIFSEM(s[9174]);
initWPIFSRE(s[9175]);
initWPIFSCO(s[9176]);
initWPIFSPR(s[9177]);
initWPIFSAC(s[9178]);
initWPIFSFA(s[9179]);
initWPIFSRP(s[9180]);
initWPIFS95(s[9181]);
initWPFINF(s[9182]);
initWPBPSP(s[9183]);
initWPPSPC(s[9184]);
initWPMORP(s[9185]);
initDEMPPEN(s[9186]);
initDDBDC(s[9187]);
initDCURPEN(s[9188]);
initIDAUNIQ(s[9189]);
initTOTPENW_08(s[9190]);
initSTPENW_08(s[9191]);
initBSP_08(s[9192]);
initADDPEN_08(s[9193]);
initPRIPENW_08(s[9194]);
initCURRENTDC_08(s[9195]);
initCURRENTDB_08(s[9196]);
initRETAINEDDC_08(s[9197]);
initRETAINEDDB_08(s[9198]);
initINRECEIPT_08(s[9199]);
initWIDPEN_08(s[9200]);
initTOTPENW_SPA(s[9201]);
initSTPENW_SPA(s[9202]);
initBSP_SPA(s[9203]);
initADDPEN_SPA(s[9204]);
initPRIPENW_SPA(s[9205]);
initCURRENTDC_SPA(s[9206]);
initCURRENTDB_SPA(s[9207]);
initRETAINEDDC_SPA(s[9208]);
initRETAINEDDB_SPA(s[9209]);
initINRECEIPT_SPA(s[9210]);
initWIDPEN_SPA(s[9211]);
initIFLAG_EARN(s[9212]);
initIFLAG_DCFUND(s[9213]);
initIFLAG_DBSR1(s[9214]);
initIFLAG_DBSR2(s[9215]);
initIFLAG_DCCONT(s[9216]);
initIFLAG_RTEN(s[9217]);
initIFLAG_REC(s[9218]);
initIDAUNIQ(s[9219]);
initFINSTAT4(s[9220]);
initHHAGE(s[9221]);
initCONFAGE(s[9222]);
initDOBYEAR(s[9223]);
initDHSEX(s[9224]);
initVISMON(s[9225]);
initVISYEAR(s[9226]);
initNQVER(s[9227]);
initBPCONST(s[9228]);
initCONSUBEA(s[9229]);
initCONSUBSM(s[9230]);
initCONSUBDR(s[9231]);
initCONSUBEX(s[9232]);
initCONSUBNO(s[9233]);
initCUFFSIZE(s[9234]);
initAIRTEMP(s[9235]);
initSYS1(s[9236]);
initDIAS1(s[9237]);
initPULSE1(s[9238]);
initMAP1(s[9239]);
initFULL1(s[9240]);
initSYS2(s[9241]);
initDIAS2(s[9242]);
initPULSE2(s[9243]);
initMAP2(s[9244]);
initFULL2(s[9245]);
initSYS3(s[9246]);
initDIAS3(s[9247]);
initPULSE3(s[9248]);
initMAP3(s[9249]);
initFULL3(s[9250]);
initWHYNOBP(s[9251]);
initBPRESPC(s[9252]);
initSYSVAL(s[9253]);
initDIAVAL(s[9254]);
initPULVAL(s[9255]);
initMAPVAL(s[9256]);
initRESPBPS(s[9257]);
initNATTBPCO(s[9258]);
initNATTBPUP(s[9259]);
initNATTBPER(s[9260]);
initNATTBPCU(s[9261]);
initNATTBPEQ(s[9262]);
initNATTBPOT(s[9263]);
initDIFBPCNO(s[9264]);
initDIFBPCLE(s[9265]);
initDIFBPCUP(s[9266]);
initDIFBPCCU(s[9267]);
initDIFBPCEQ(s[9268]);
initDIFBPCER(s[9269]);
initDIBPCOT(s[9270]);
initMMGSWIL(s[9271]);
initMMGSDOM(s[9272]);
initMMGSSTA(s[9273]);
initMMGSD1(s[9274]);
initMMGSN1(s[9275]);
initMMGSD2(s[9276]);
initMMGSN2(s[9277]);
initMMGSD3(s[9278]);
initMMGSN3(s[9279]);
initMMGSTP(s[9280]);
initMMGSRES(s[9281]);
initMMGSPRRE(s[9282]);
initMMGSPRPA(s[9283]);
initMMGSPREQ(s[9284]);
initMMGSPROT(s[9285]);
initCLOTB(s[9286]);
initFIT(s[9287]);
initBSWILL(s[9288]);
initFASTASK(s[9289]);
initFASTELIG(s[9290]);
initLIGHTEAT(s[9291]);
initWHATEAT(s[9292]);
initREFBSCDI(s[9293]);
initREFBSCNE(s[9294]);
initREFBSCTE(s[9295]);
initREFBSCIL(s[9296]);
initREFBSCHI(s[9297]);
initREFBSCOT(s[9298]);
initSAMPTAK(s[9299]);
initSAMDIFNO(s[9300]);
initSAMDIFIN(s[9301]);
initSAMDIFVE(s[9302]);
initSAMDIFSE(s[9303]);
initSAMDIFFA(s[9304]);
initSAMDIFTO(s[9305]);
initSAMDIFOT(s[9306]);
initNOBSMSV(s[9307]);
initNOBSMUP(s[9308]);
initNOBSMFA(s[9309]);
initNOBSMOT(s[9310]);
initBSOUTC(s[9311]);
initCFIB(s[9312]);
initCHOL(s[9313]);
initHDL(s[9314]);
initTRIG(s[9315]);
initLDL(s[9316]);
initRTIN(s[9317]);
initHSCRP(s[9318]);
initDHEAS(s[9319]);
initIGF1(s[9320]);
initFGLU(s[9321]);
initHGB(s[9322]);
initHBA1C(s[9323]);
initWBC(s[9324]);
initMCH(s[9325]);
initBLOODR(s[9326]);
initRESPHTS(s[9327]);
initHEIGHT(s[9328]);
initRESNHI(s[9329]);
initEHTCH(s[9330]);
initEHTM(s[9331]);
initEHTFT(s[9332]);
initEHTIN(s[9333]);
initESTHT(s[9334]);
initHTVAL(s[9335]);
initHTOK(s[9336]);
initNOHTBCUN(s[9337]);
initNOHTBCST(s[9338]);
initNOHTBCCH(s[9339]);
initNOHTBCBE(s[9340]);
initNOHTBCSH(s[9341]);
initNOHTBCPA(s[9342]);
initNOHTBCEQ(s[9343]);
initNOHTBCOT(s[9344]);
initRELHITE(s[9345]);
initHINREL(s[9346]);
initSITHTRS(s[9347]);
initSITHGT(s[9348]);
initRESPWTS(s[9349]);
initWEIGHT(s[9350]);
initRESNWT(s[9351]);
initEWTCH(s[9352]);
initEWTKG(s[9353]);
initEWTST(s[9354]);
initEWTL(s[9355]);
initESTWT(s[9356]);
initWTVAL(s[9357]);
initWTOK(s[9358]);
initNOWTBCUN(s[9359]);
initNOWTBCST(s[9360]);
initNOWTBCCH(s[9361]);
initNOWTBCBE(s[9362]);
initNOWTBCSH(s[9363]);
initNOWTBCHE(s[9364]);
initNOWTBCPA(s[9365]);
initNOWTBCSC(s[9366]);
initNOWTBCOT(s[9367]);
initFLOORC(s[9368]);
initRELWAIT(s[9369]);
initBMI(s[9370]);
initBMIVAL(s[9371]);
initBMIOK(s[9372]);
initBMIOBE(s[9373]);
initWHWILL(s[9374]);
initWAIST1(s[9375]);
initHIP1(s[9376]);
initWAIST2(s[9377]);
initHIP2(s[9378]);
initWAIST3(s[9379]);
initHIP3(s[9380]);
initWSTVAL(s[9381]);
initHIPVAL(s[9382]);
initWHVAL(s[9383]);
initWSTOKB(s[9384]);
initHIPOKB(s[9385]);
initWHOKB(s[9386]);
initYNOWH(s[9387]);
initRESPWH(s[9388]);
initWHPNABCH(s[9389]);
initWHPNABBE(s[9390]);
initWHPNABST(s[9391]);
initWHPNABPR(s[9392]);
initWHPNABEM(s[9393]);
initWHPNABBU(s[9394]);
initWHPNABOT(s[9395]);
initWJREL(s[9396]);
initPROBWJ(s[9397]);
initHJREL(s[9398]);
initPROBHJ(s[9399]);
initHASURG(s[9400]);
initEYESURG(s[9401]);
initHASTRO(s[9402]);
initCHESTINF(s[9403]);
initINHALER(s[9404]);
initINHALHRS(s[9405]);
initLFWILL(s[9406]);
initLFTEMP(s[9407]);
initFVC1(s[9408]);
initFEV1(s[9409]);
initPF1(s[9410]);
initTECHNI1(s[9411]);
initFVC2(s[9412]);
initFEV2(s[9413]);
initPF2(s[9414]);
initTECHNI2(s[9415]);
initFVC3(s[9416]);
initFEV3(s[9417]);
initPF3(s[9418]);
initTECHNI3(s[9419]);
initNLSATLF(s[9420]);
initHTFVC(s[9421]);
initHTFEV(s[9422]);
initHTPF(s[9423]);
initNOREAD(s[9424]);
initYNOLF(s[9425]);
initLFSTAND(s[9426]);
initLFRESP(s[9427]);
initPROBLFRE(s[9428]);
initPROBLFBR(s[9429]);
initPROBLFCO(s[9430]);
initPROBLFEQ(s[9431]);
initPROBLFOT(s[9432]);
initNOATTLF(s[9433]);
initLFNOMEA(s[9434]);
initMMBCSC(s[9435]);
initMMSSSC(s[9436]);
initMMSSRE(s[9437]);
initMMSSTI(s[9438]);
initMMSSNA(s[9439]);
initMMSTSC(s[9440]);
initMMSTRE(s[9441]);
initMMSTTI(s[9442]);
initMMSTNA(s[9443]);
initMMFTSC(s[9444]);
initMMFTTI(s[9445]);
initMMFTRE2(s[9446]);
initMMFTNA(s[9447]);
initMMLOSC(s[9448]);
initMMLORE(s[9449]);
initMMLOTI(s[9450]);
initMMLONA(s[9451]);
initMMLSSC(s[9452]);
initMMLSRE(s[9453]);
initMMLSTI(s[9454]);
initMMLSNA(s[9455]);
initMMCRAV(s[9456]);
initMMCRSC(s[9457]);
initMMCRRE(s[9458]);
initMMCRNA(s[9459]);
initMMRRSC(s[9460]);
initMMRRRE(s[9461]);
initMMRRFTI(s[9462]);
initMMRRTTI(s[9463]);
initMMRROC(s[9464]);
initMMRRNA(s[9465]);
initW4NURWT(s[9466]);
initW4BLDWT(s[9467]);
}
}
