/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.elsa.process.ELSA_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.elsa.data.generated;
import java.io.Serializable;
public class ELSA_Waves1To8_Record implements Serializable {
protected String[] s;
protected byte AGE;
protected byte AGEBUCH1;
protected byte AGEBUCH2;
protected byte AGEBUCH3;
protected byte AGEBUCH4;
protected byte AGEBUCH5;
protected boolean AGEBUCH6;
protected boolean AGEBUCH7;
protected boolean AGEBUCH8;
protected byte AGEBUHEAD;
protected byte AGEBUSP;
protected byte AGEG10;
protected byte AGEG10_BU;
protected byte AGEG3;
protected byte AGEG3_BU;
protected byte AGEG5;
protected byte AGEG5_BU;
protected byte AGEG7;
protected byte AGEG7_BU;
protected byte AGEHHCH1;
protected byte AGEHHCH2;
protected byte AGEHHCH3;
protected byte AGEHHCH4;
protected byte AGEHHCH5;
protected byte AGEHHCH6;
protected boolean AGEHHCH7;
protected boolean AGEHHCH8;
protected byte AGEHHLDR1;
protected byte AGEHHLDR2;
protected byte AGEHHLDR3;
protected byte AGEHHLDR4;
protected byte AGEHOH;
protected byte AGE_P;
protected byte ANIN_P_F;
protected double ANIN_P_I;
protected short ANIN_P_O;
protected short ANIN_P_T;
protected byte ANIN_R_F;
protected double ANIN_R_I;
protected short ANIN_R_O;
protected short ANIN_R_T;
protected byte ASSINC_BU_F;
protected short ASSINC_BU_NI2;
protected short ASSINC_BU_NI3;
protected short ASSINC_BU_NI4;
protected double ASSINC_BU_S;
protected short ASSINC_BU_T;
protected byte ATTALL_P_F;
protected double ATTALL_P_I;
protected short ATTALL_P_O;
protected short ATTALL_P_T;
protected byte ATTALL_R_F;
protected double ATTALL_R_I;
protected short ATTALL_R_O;
protected short ATTALL_R_T;
protected byte BENINC_BU_F;
protected short BENINC_BU_NI2;
protected short BENINC_BU_NI3;
protected short BENINC_BU_NI4;
protected double BENINC_BU_S;
protected short BENINC_BU_T;
protected byte BENINC_P_F;
protected short BENINC_P_NI2;
protected short BENINC_P_NI3;
protected short BENINC_P_NI4;
protected double BENINC_P_S;
protected short BENINC_P_T;
protected byte BENINC_R_F;
protected short BENINC_R_NI2;
protected short BENINC_R_NI3;
protected short BENINC_R_NI4;
protected double BENINC_R_S;
protected short BENINC_R_T;
protected byte BEQUESTGT0;
protected byte BEQUESTGT0B;
protected byte BEQUESTGT150;
protected byte BEQUESTGT150B;
protected byte BEQUESTGT50;
protected byte BEQUESTGT50B;
protected byte BONDSI_BU_F;
protected double BONDSI_BU_I;
protected short BONDSI_BU_O;
protected short BONDSI_BU_T;
protected byte BONDS_BU_F;
protected int BONDS_BU_I;
protected short BONDS_BU_O;
protected short BONDS_BU_T;
protected double BUEQ;
protected boolean BUHEAD;
protected byte BUNO;
protected byte BUSV_BU_F;
protected double BUSV_BU_I;
protected short BUSV_BU_O;
protected short BUSV_BU_T;
protected byte BUSV_P_F;
protected double BUSV_P_I;
protected short BUSV_P_O;
protected short BUSV_P_T;
protected boolean BUSV_R_F;
protected double BUSV_R_I;
protected short BUSV_R_O;
protected short BUSV_R_T;
protected byte BUTYPE;
protected byte CASHISA_BU_F;
protected int CASHISA_BU_I;
protected short CASHISA_BU_O;
protected short CASHISA_BU_T;
protected byte CB_P_F;
protected double CB_P_I;
protected short CB_P_O;
protected short CB_P_T;
protected byte CB_R_F;
protected double CB_R_I;
protected short CB_R_O;
protected short CB_R_T;
protected byte CCARD_BU_F;
protected int CCARD_BU_I;
protected short CCARD_BU_O;
protected short CCARD_BU_T;
protected byte CESD_NA;
protected byte CESD_SC;
protected byte CFDATD;
protected byte CFDATM;
protected byte CFDATY;
protected byte CFDAY;
protected byte CFDSCR;
protected byte CFIMP;
protected byte CFLISD;
protected byte CFLISEN;
protected byte CFTEST;
protected byte CFWRDS;
protected byte CHAGE1;
protected byte CHAGE10;
protected byte CHAGE11;
protected byte CHAGE12;
protected boolean CHAGE13;
protected boolean CHAGE14;
protected boolean CHAGE15;
protected boolean CHAGE16;
protected byte CHAGE2;
protected byte CHAGE3;
protected byte CHAGE4;
protected byte CHAGE5;
protected byte CHAGE6;
protected byte CHAGE7;
protected byte CHAGE8;
protected byte CHAGE9;
protected byte CHOUTHH;
protected byte CHSEX1;
protected byte CHSEX10;
protected byte CHSEX11;
protected boolean CHSEX12;
protected boolean CHSEX13;
protected boolean CHSEX14;
protected boolean CHSEX15;
protected boolean CHSEX16;
protected byte CHSEX2;
protected byte CHSEX3;
protected byte CHSEX4;
protected byte CHSEX5;
protected byte CHSEX6;
protected byte CHSEX7;
protected byte CHSEX8;
protected byte CHSEX9;
protected byte CHSTAT1;
protected byte CHSTAT10;
protected boolean CHSTAT11;
protected byte CHSTAT12;
protected boolean CHSTAT13;
protected boolean CHSTAT14;
protected boolean CHSTAT15;
protected boolean CHSTAT16;
protected byte CHSTAT2;
protected byte CHSTAT3;
protected byte CHSTAT4;
protected byte CHSTAT5;
protected byte CHSTAT6;
protected byte CHSTAT7;
protected byte CHSTAT8;
protected byte CHSTAT9;
protected byte CHTYPE1;
protected byte CHTYPE10;
protected byte CHTYPE11;
protected byte CHTYPE12;
protected byte CHTYPE13;
protected boolean CHTYPE14;
protected boolean CHTYPE15;
protected boolean CHTYPE16;
protected byte CHTYPE2;
protected byte CHTYPE3;
protected byte CHTYPE4;
protected byte CHTYPE5;
protected byte CHTYPE6;
protected byte CHTYPE7;
protected byte CHTYPE8;
protected byte CHTYPE9;
protected double CLOTHESL;
protected byte CLOTHEST;
protected double CLOTHESU;
protected double COALL;
protected byte COALT;
protected double COALU;
protected short COUPID;
protected short COUPID_INST;
protected boolean COUPLE;
protected byte CPID;
protected byte DEBT_BU_F;
protected short DEBT_BU_NI2;
protected short DEBT_BU_NI3;
protected short DEBT_BU_NI4;
protected int DEBT_BU_S;
protected short DEBT_BU_T;
protected byte DHC;
protected byte DHC10;
protected byte DHC11;
protected byte DHC12;
protected byte DHC13;
protected byte DHC2;
protected byte DHC3;
protected byte DHC4;
protected byte DHC5;
protected byte DHC6;
protected byte DHC7;
protected byte DHC8;
protected byte DHC9;
protected byte DHCAG;
protected byte DHCAG10;
protected byte DHCAG11;
protected byte DHCAG12;
protected byte DHCAG13;
protected byte DHCAG2;
protected byte DHCAG3;
protected byte DHCAG4;
protected byte DHCAG5;
protected byte DHCAG6;
protected byte DHCAG7;
protected byte DHCAG8;
protected byte DHCAG9;
protected byte DHCR01;
protected byte DHCR02;
protected byte DHCR03;
protected byte DHCR04;
protected byte DHCR05;
protected byte DHCR06;
protected byte DHCR07;
protected byte DHCR100;
protected byte DHCR101;
protected byte DHCR102;
protected boolean DHCR103;
protected byte DHCR113;
protected byte DHCR114;
protected byte DHCR115;
protected byte DHCR116;
protected boolean DHCR117;
protected byte DHCR129;
protected byte DHCR130;
protected byte DHCR131;
protected byte DHCR132;
protected boolean DHCR133;
protected byte DHCR145;
protected byte DHCR146;
protected byte DHCR161;
protected byte DHCR162;
protected byte DHCR17;
protected byte DHCR177;
protected byte DHCR18;
protected byte DHCR19;
protected byte DHCR193;
protected byte DHCR20;
protected byte DHCR21;
protected byte DHCR22;
protected byte DHCR23;
protected byte DHCR33;
protected byte DHCR34;
protected byte DHCR35;
protected byte DHCR36;
protected byte DHCR37;
protected byte DHCR38;
protected byte DHCR39;
protected byte DHCR49;
protected byte DHCR50;
protected byte DHCR51;
protected byte DHCR52;
protected byte DHCR53;
protected byte DHCR54;
protected byte DHCR55;
protected byte DHCR65;
protected byte DHCR66;
protected byte DHCR67;
protected byte DHCR68;
protected byte DHCR69;
protected byte DHCR70;
protected byte DHCR71;
protected byte DHCR81;
protected byte DHCR82;
protected byte DHCR83;
protected byte DHCR84;
protected byte DHCR85;
protected byte DHCR86;
protected byte DHCR87;
protected byte DHCR97;
protected byte DHCR98;
protected byte DHCR99;
protected byte DHCS;
protected byte DHCS10;
protected byte DHCS11;
protected byte DHCS12;
protected byte DHCS13;
protected byte DHCS2;
protected byte DHCS3;
protected byte DHCS4;
protected byte DHCS5;
protected byte DHCS6;
protected byte DHCS7;
protected byte DHCS8;
protected byte DHCS9;
protected byte DHPA;
protected byte DHPB;
protected byte DHR;
protected byte DHR10;
protected byte DHR11;
protected byte DHR12;
protected byte DHR2;
protected byte DHR3;
protected byte DHR4;
protected byte DHR5;
protected byte DHR6;
protected byte DHR7;
protected byte DHR8;
protected byte DHR9;
protected byte DHSAMEH;
protected byte DIANF;
protected byte DIANM;
protected byte DICDNF;
protected byte DICDNM;
protected boolean DIED_P;
protected byte DIFAD;
protected byte DIFJOB;
protected byte DIFJOBM;
protected byte DIGNMY;
protected byte DIGRAN;
protected byte DIINT;
protected byte DIKLIV;
protected byte DIKLIVM;
protected byte DIMAD;
protected byte DINFA;
protected byte DINMA;
protected byte DIPRE;
protected byte DISIB;
protected byte DLA_P_F;
protected double DLA_P_I;
protected short DLA_P_O;
protected short DLA_P_T;
protected byte DLA_R_F;
protected double DLA_R_I;
protected short DLA_R_O;
protected short DLA_R_T;
protected byte ECPOS;
protected byte EDEND;
protected byte EDQUAL;
protected double ELECL;
protected byte ELECMETH;
protected byte ELECT;
protected double ELECU;
protected byte ELSA;
protected byte ELSA_P;
protected byte EMPINC_BU_F;
protected short EMPINC_BU_NI2;
protected short EMPINC_BU_NI3;
protected short EMPINC_BU_NI4;
protected double EMPINC_BU_S;
protected short EMPINC_BU_T;
protected byte EMPINC_P_F;
protected short EMPINC_P_NI2;
protected short EMPINC_P_NI3;
protected short EMPINC_P_NI4;
protected double EMPINC_P_S;
protected short EMPINC_P_T;
protected boolean EMPINC_R_F;
protected short EMPINC_R_NI2;
protected short EMPINC_R_NI3;
protected short EMPINC_R_NI4;
protected double EMPINC_R_S;
protected short EMPINC_R_T;
protected byte EQASSINC_BU_F;
protected short EQASSINC_BU_NI2;
protected short EQASSINC_BU_NI3;
protected short EQASSINC_BU_NI4;
protected double EQASSINC_BU_S;
protected short EQASSINC_BU_T;
protected byte EQBENINC_BU_F;
protected short EQBENINC_BU_NI2;
protected short EQBENINC_BU_NI3;
protected short EQBENINC_BU_NI4;
protected double EQBENINC_BU_S;
protected short EQBENINC_BU_T;
protected byte EQEMPINC_BU_F;
protected short EQEMPINC_BU_NI2;
protected short EQEMPINC_BU_NI3;
protected short EQEMPINC_BU_NI4;
protected double EQEMPINC_BU_S;
protected short EQEMPINC_BU_T;
protected byte EQOTHINC_BU_F;
protected short EQOTHINC_BU_NI2;
protected short EQOTHINC_BU_NI3;
protected short EQOTHINC_BU_NI4;
protected double EQOTHINC_BU_S;
protected short EQOTHINC_BU_T;
protected byte EQPPINC_BU_F;
protected short EQPPINC_BU_NI2;
protected short EQPPINC_BU_NI3;
protected short EQPPINC_BU_NI4;
protected double EQPPINC_BU_S;
protected short EQPPINC_BU_T;
protected byte EQSEINC_BU_F;
protected short EQSEINC_BU_NI2;
protected short EQSEINC_BU_NI3;
protected short EQSEINC_BU_NI4;
protected double EQSEINC_BU_S;
protected short EQSEINC_BU_T;
protected byte EQSPINC_BU_F;
protected short EQSPINC_BU_NI2;
protected short EQSPINC_BU_NI3;
protected short EQSPINC_BU_NI4;
protected double EQSPINC_BU_S;
protected short EQSPINC_BU_T;
protected byte EQTOTINC_BU_F;
protected short EQTOTINC_BU_NI2;
protected short EQTOTINC_BU_NI3;
protected short EQTOTINC_BU_NI4;
protected double EQTOTINC_BU_S;
protected short EQTOTINC_BU_T;
protected byte EVERWORK;
protected byte EXAINH;
protected byte EXCAIN;
protected byte EXCIN;
protected byte EXCINH;
protected byte EXCPIN;
protected byte EXECNN;
protected byte EXHLIM;
protected byte EXHLIMW;
protected byte EXHLIMWB;
protected short EXHVA;
protected byte EXHVR;
protected byte EXINHE;
protected byte EXLO80;
protected byte EXPLIVE;
protected byte EXPLIVE100;
protected byte EXPLIVE100B;
protected byte EXPLIVE75;
protected byte EXPLIVE75B;
protected byte EXPLIVE80;
protected byte EXPLIVE80B;
protected byte EXPLIVE85;
protected byte EXPLIVE85B;
protected byte EXPLIVE90;
protected byte EXPLIVE90B;
protected byte EXPLIVE95;
protected byte EXPLIVE95B;
protected byte EXPLIVEB;
protected byte EXPW;
protected byte EXRAIN;
protected byte EXRSLF;
protected byte EXWORK;
protected byte EXWORK55;
protected byte EXWORK55B;
protected byte EXWORK60;
protected byte EXWORK60B;
protected byte EXWORK65;
protected byte EXWORK65B;
protected byte EXWORKB;
protected byte FAGEDIED;
protected byte FALIVE;
protected byte FAMTYPE;
protected byte FARMI_BU_F;
protected double FARMI_BU_I;
protected short FARMI_BU_O;
protected short FARMI_BU_T;
protected byte FARM_BU_F;
protected double FARM_BU_I;
protected short FARM_BU_O;
protected short FARM_BU_T;
protected byte FATHAGE;
protected byte FINDIFF;
protected boolean FIRSTBU;
protected double FOODINL;
protected byte FOODINT;
protected int FOODINU;
protected double FOODOUTL;
protected byte FOODOUTT;
protected double FOODOUTU;
protected byte FQHELP;
protected byte FQMQUA;
protected short FUID;
protected short FUID_INST;
protected byte FUTYPE;
protected byte GALL_P_F;
protected double GALL_P_I;
protected short GALL_P_O;
protected short GALL_P_T;
protected byte GALL_R_F;
protected double GALL_R_I;
protected short GALL_R_O;
protected short GALL_R_T;
protected double GASELECL;
protected byte GASELECMETH;
protected byte GASELECT;
protected double GASELECU;
protected double GASL;
protected byte GASMETH;
protected byte GAST;
protected double GASU;
protected byte GETSHB;
protected String GOR;
protected byte GROSSFW_BU_F;
protected short GROSSFW_BU_NI2;
protected short GROSSFW_BU_NI3;
protected short GROSSFW_BU_NI4;
protected double GROSSFW_BU_S;
protected short GROSSFW_BU_T;
protected boolean GROSSHW_BU_F;
protected short GROSSHW_BU_NI2;
protected short GROSSHW_BU_NI3;
protected short GROSSHW_BU_NI4;
protected double GROSSHW_BU_S;
protected short GROSSHW_BU_T;
protected double GROSSRENTL;
protected byte GROSSRENTT;
protected double GROSSRENTU;
protected byte GROSSTOTNHW_BU_F;
protected short GROSSTOTNHW_BU_NI2;
protected short GROSSTOTNHW_BU_NI3;
protected short GROSSTOTNHW_BU_NI4;
protected double GROSSTOTNHW_BU_S;
protected short GROSSTOTNHW_BU_T;
protected boolean HDEBT_HH_F;
protected double HDEBT_HH_I;
protected short HDEBT_HH_O;
protected short HDEBT_HH_T;
protected byte HEACTA;
protected byte HEACTB;
protected byte HEACTC;
protected byte HEADL96;
protected byte HEADLBA;
protected byte HEADLBE;
protected byte HEADLCO;
protected byte HEADLDA;
protected byte HEADLDR;
protected byte HEADLEA;
protected byte HEADLHO;
protected byte HEADLMA;
protected byte HEADLME;
protected byte HEADLMO;
protected byte HEADLPH;
protected byte HEADLPR;
protected byte HEADLSH;
protected byte HEADLWA;
protected byte HEADLWC;
protected byte HEAGA;
protected byte HEAGB;
protected byte HEAGC;
protected byte HEAGD;
protected byte HEAGE;
protected byte HEAGF;
protected byte HEAGI;
protected byte HEAGJ;
protected byte HEAMA;
protected byte HEBCK;
protected byte HECANB;
protected byte HECAT;
protected byte HECIG;
protected byte HEEYE;
protected byte HEFET;
protected byte HEFLA;
protected short HEFLB;
protected byte HEFLC;
protected byte HEFRAC;
protected byte HEFRND;
protected byte HEFUNC;
protected byte HEHEAR;
protected byte HEHIP;
protected byte HEHRA;
protected byte HEILL;
protected byte HEINS;
protected byte HEIQA;
protected byte HEIQB;
protected byte HEIQC;
protected byte HEIQD;
protected byte HEIQE;
protected byte HEIQF;
protected byte HEIQG;
protected byte HEIQH;
protected byte HEIQI;
protected byte HEIQJ;
protected byte HEIQK;
protected byte HEIQL;
protected byte HEIQM;
protected byte HEIQN;
protected byte HEIQO;
protected byte HEIQP;
protected byte HEIQQ;
protected byte HEJI;
protected byte HEKNE;
protected byte HELIM;
protected byte HELNG;
protected byte HEMDA;
protected byte HEMDB;
protected byte HEMOB96;
protected byte HEMOBCH;
protected byte HEMOBCL;
protected byte HEMOBCS;
protected byte HEMOBLI;
protected byte HEMOBPI;
protected byte HEMOBPU;
protected byte HEMOBRE;
protected byte HEMOBSI;
protected byte HEMOBST;
protected byte HEMOBWA;
protected byte HEPAA;
protected byte HEPAIN;
protected byte HEPAP;
protected byte HEPBS;
protected byte HEPRK;
protected byte HESKA;
protected short HESKB;
protected short HESKC;
protected byte HESMK;
protected byte HESPK;
protected byte HETBA;
protected short HETBB;
protected byte HETBC;
protected short HETBD;
protected byte HETHK;
protected byte HEVSI;
protected byte HEWKS;
protected byte HEYRA;
protected byte HEYRC;
protected boolean HHANSHO;
protected double HHEQ;
protected byte HHGRIDDHWORK;
protected byte HHGRIDDHWORK_P;
protected short HHID;
protected byte HHRESP;
protected byte HHTOT;
protected byte HLIMWRK;
protected byte HLIMWRKC;
protected short HOBA;
protected short HOBA2;
protected short HOBA3;
protected short HOBA4;
protected short HOBA5;
protected short HOBA6;
protected short HOBA7;
protected short HOBA8;
protected byte HOBA9;
protected byte HOBAS;
protected byte HOBAS2;
protected byte HOBAS3;
protected byte HOBAS4;
protected byte HOBAS5;
protected byte HOBAS6;
protected byte HOBAS7;
protected byte HOBAS8;
protected byte HOBAS9;
protected byte HOBP;
protected byte HOBP2;
protected byte HOBP3;
protected byte HOBP4;
protected byte HOBP5;
protected byte HOBP6;
protected byte HOBP7;
protected byte HOBP8;
protected boolean HOBP9;
protected byte HOCENH;
protected byte HODIFF;
protected byte HODIFFT;
protected byte HODOC;
protected byte HOELI;
protected byte HOEVM;
protected byte HOEVRE;
protected short HOFOOD;
protected byte HOFURN;
protected boolean HOH;
protected boolean HOHSP;
protected short HOINCC;
protected byte HOINTA;
protected byte HOJOB;
protected byte HOLAND;
protected byte HOMEAL;
protected byte HOMEI_BU_F;
protected double HOMEI_BU_I;
protected short HOMEI_BU_O;
protected short HOMEI_BU_T;
protected byte HOME_BU_F;
protected int HOME_BU_I;
protected short HOME_BU_O;
protected short HOME_BU_T;
protected byte HOMOFT;
protected short HOMOVE;
protected short HOMOVEM;
protected int HOMREP;
protected byte HOOLD;
protected byte HOOLDM;
protected byte HOORM;
protected short HOOUTF;
protected byte HOOUTM;
protected byte HOPART;
protected int HOPAY;
protected int HOPAYM;
protected byte HOPERI;
protected byte HOPID;
protected short HOREBA;
protected byte HOREBP;
protected byte HORENFE;
protected byte HORENFL;
protected byte HORENFR;
protected short HORENFU;
protected byte HORENME;
protected short HORENML;
protected byte HORENMR;
protected short HORENMU;
protected byte HORENOE;
protected short HORENOL;
protected byte HORENOR;
protected short HORENOU;
protected int HORENT;
protected byte HORENWE;
protected short HORENWL;
protected byte HORENWR;
protected short HORENWU;
protected boolean HORENYE;
protected boolean HORENYL;
protected boolean HORENYR;
protected boolean HORENYU;
protected byte HOROOM;
protected byte HORTB;
protected byte HORTBE;
protected int HOSELLP;
protected byte HOTENU;
protected byte HOTENUN;
protected short HOURS;
protected short HOURS_AJ;
protected byte HOVAG;
protected byte HOVAG10;
protected byte HOVAG2;
protected byte HOVAG3;
protected byte HOVAG4;
protected byte HOVAG5;
protected byte HOVAG6;
protected byte HOVAG7;
protected byte HOVAG8;
protected byte HOVAG9;
protected byte HOVEH;
protected byte HOVW;
protected byte HOVW10;
protected byte HOVW9;
protected byte HOWHO;
protected short HOYEAR;
protected short HOYEARM;
protected byte HPOPR;
protected byte HRSFIRST;
protected boolean HSVAL_HH_F;
protected double HSVAL_HH_I;
protected short HSVAL_HH_O;
protected short HSVAL_HH_T;
protected short IAA;
protected short IAA10;
protected boolean IAA10FE;
protected boolean IAA10FL;
protected boolean IAA10FR;
protected short IAA10FU;
protected byte IAA10ME;
protected short IAA10ML;
protected byte IAA10MR;
protected short IAA10MU;
protected byte IAA10OE;
protected short IAA10OL;
protected byte IAA10OR;
protected short IAA10OU;
protected byte IAA10WE;
protected short IAA10WL;
protected byte IAA10WR;
protected byte IAA10WU;
protected boolean IAA10YE;
protected short IAA10YL;
protected byte IAA10YR;
protected short IAA10YU;
protected short IAA11;
protected boolean IAA11FE;
protected short IAA11FL;
protected boolean IAA11FR;
protected short IAA11FU;
protected boolean IAA11ME;
protected short IAA11ML;
protected byte IAA11MR;
protected short IAA11MU;
protected byte IAA11OE;
protected short IAA11OL;
protected byte IAA11OR;
protected short IAA11OU;
protected byte IAA11WE;
protected short IAA11WL;
protected boolean IAA11WR;
protected boolean IAA11WU;
protected boolean IAA11YE;
protected boolean IAA11YL;
protected boolean IAA11YR;
protected boolean IAA11YU;
protected short IAA12;
protected byte IAA12FE;
protected short IAA12FL;
protected byte IAA12FR;
protected byte IAA12FU;
protected byte IAA12ME;
protected short IAA12ML;
protected byte IAA12MR;
protected short IAA12MU;
protected byte IAA12OE;
protected short IAA12OL;
protected byte IAA12OR;
protected short IAA12OU;
protected byte IAA12WE;
protected short IAA12WL;
protected byte IAA12WR;
protected short IAA12WU;
protected boolean IAA12YE;
protected boolean IAA12YL;
protected boolean IAA12YR;
protected boolean IAA12YU;
protected short IAA13;
protected byte IAA13FE;
protected boolean IAA13FL;
protected byte IAA13FR;
protected short IAA13FU;
protected byte IAA13ME;
protected short IAA13ML;
protected byte IAA13MR;
protected short IAA13MU;
protected byte IAA13OE;
protected short IAA13OL;
protected byte IAA13OR;
protected short IAA13OU;
protected byte IAA13WE;
protected short IAA13WL;
protected byte IAA13WR;
protected short IAA13WU;
protected boolean IAA13YE;
protected boolean IAA13YL;
protected boolean IAA13YR;
protected boolean IAA13YU;
protected short IAA14;
protected boolean IAA14FE;
protected boolean IAA14FL;
protected boolean IAA14FR;
protected boolean IAA14FU;
protected byte IAA14ME;
protected short IAA14ML;
protected byte IAA14MR;
protected short IAA14MU;
protected byte IAA14OE;
protected short IAA14OL;
protected byte IAA14OR;
protected short IAA14OU;
protected byte IAA14WE;
protected byte IAA14WL;
protected byte IAA14WR;
protected byte IAA14WU;
protected boolean IAA14YE;
protected boolean IAA14YL;
protected boolean IAA14YR;
protected boolean IAA14YU;
protected short IAA15;
protected boolean IAA15FE;
protected boolean IAA15FL;
protected boolean IAA15FR;
protected boolean IAA15FU;
protected byte IAA15ME;
protected short IAA15ML;
protected byte IAA15MR;
protected short IAA15MU;
protected boolean IAA15OE;
protected boolean IAA15OL;
protected boolean IAA15OR;
protected boolean IAA15OU;
protected byte IAA15WE;
protected byte IAA15WL;
protected byte IAA15WR;
protected byte IAA15WU;
protected boolean IAA15YE;
protected boolean IAA15YL;
protected boolean IAA15YR;
protected boolean IAA15YU;
protected short IAA16;
protected boolean IAA16FE;
protected boolean IAA16FL;
protected boolean IAA16FR;
protected boolean IAA16FU;
protected byte IAA16ME;
protected short IAA16ML;
protected byte IAA16MR;
protected short IAA16MU;
protected byte IAA16OE;
protected short IAA16OL;
protected byte IAA16OR;
protected short IAA16OU;
protected byte IAA16WE;
protected short IAA16WL;
protected byte IAA16WR;
protected short IAA16WU;
protected boolean IAA16YE;
protected boolean IAA16YL;
protected boolean IAA16YR;
protected boolean IAA16YU;
protected short IAA17;
protected boolean IAA17FE;
protected boolean IAA17FL;
protected boolean IAA17FR;
protected boolean IAA17FU;
protected byte IAA17ME;
protected short IAA17ML;
protected byte IAA17MR;
protected short IAA17MU;
protected byte IAA17OE;
protected short IAA17OL;
protected byte IAA17OR;
protected short IAA17OU;
protected byte IAA17WE;
protected byte IAA17WL;
protected boolean IAA17WR;
protected byte IAA17WU;
protected boolean IAA17YE;
protected boolean IAA17YL;
protected boolean IAA17YR;
protected boolean IAA17YU;
protected short IAA18;
protected boolean IAA18FE;
protected boolean IAA18FL;
protected boolean IAA18FR;
protected boolean IAA18FU;
protected byte IAA18ME;
protected short IAA18ML;
protected byte IAA18MR;
protected short IAA18MU;
protected byte IAA18OE;
protected short IAA18OL;
protected byte IAA18OR;
protected short IAA18OU;
protected byte IAA18WE;
protected boolean IAA18WL;
protected boolean IAA18WR;
protected byte IAA18WU;
protected boolean IAA18YE;
protected boolean IAA18YL;
protected boolean IAA18YR;
protected boolean IAA18YU;
protected short IAA19;
protected boolean IAA19FE;
protected boolean IAA19FL;
protected boolean IAA19FR;
protected boolean IAA19FU;
protected byte IAA19ME;
protected short IAA19ML;
protected byte IAA19MR;
protected short IAA19MU;
protected byte IAA19OE;
protected short IAA19OL;
protected byte IAA19OR;
protected short IAA19OU;
protected byte IAA19WE;
protected byte IAA19WL;
protected byte IAA19WR;
protected byte IAA19WU;
protected boolean IAA19YE;
protected boolean IAA19YL;
protected boolean IAA19YR;
protected boolean IAA19YU;
protected byte IAA1FE;
protected short IAA1FL;
protected byte IAA1FR;
protected short IAA1FU;
protected byte IAA1ME;
protected short IAA1ML;
protected byte IAA1MR;
protected short IAA1MU;
protected byte IAA1OE;
protected short IAA1OL;
protected byte IAA1OR;
protected short IAA1OU;
protected byte IAA1WE;
protected short IAA1WL;
protected byte IAA1WR;
protected short IAA1WU;
protected boolean IAA1YE;
protected boolean IAA1YL;
protected boolean IAA1YR;
protected boolean IAA1YU;
protected short IAA2;
protected short IAA20;
protected boolean IAA20FE;
protected boolean IAA20FL;
protected boolean IAA20FR;
protected boolean IAA20FU;
protected byte IAA20ME;
protected byte IAA20ML;
protected byte IAA20MR;
protected byte IAA20MU;
protected byte IAA20OE;
protected byte IAA20OL;
protected byte IAA20OR;
protected short IAA20OU;
protected byte IAA20WE;
protected boolean IAA20WL;
protected byte IAA20WR;
protected byte IAA20WU;
protected boolean IAA20YE;
protected boolean IAA20YL;
protected boolean IAA20YR;
protected boolean IAA20YU;
protected short IAA21;
protected byte IAA21FE;
protected short IAA21FL;
protected byte IAA21FR;
protected short IAA21FU;
protected byte IAA21ME;
protected short IAA21ML;
protected byte IAA21MR;
protected short IAA21MU;
protected byte IAA21OE;
protected short IAA21OL;
protected byte IAA21OR;
protected short IAA21OU;
protected byte IAA21WE;
protected short IAA21WL;
protected byte IAA21WR;
protected short IAA21WU;
protected boolean IAA21YE;
protected boolean IAA21YL;
protected boolean IAA21YR;
protected boolean IAA21YU;
protected short IAA22;
protected boolean IAA22FE;
protected short IAA22FL;
protected boolean IAA22FR;
protected short IAA22FU;
protected byte IAA22ME;
protected short IAA22ML;
protected byte IAA22MR;
protected short IAA22MU;
protected byte IAA22OE;
protected short IAA22OL;
protected byte IAA22OR;
protected short IAA22OU;
protected byte IAA22WE;
protected short IAA22WL;
protected byte IAA22WR;
protected short IAA22WU;
protected boolean IAA22YE;
protected boolean IAA22YL;
protected boolean IAA22YR;
protected boolean IAA22YU;
protected short IAA23;
protected boolean IAA23FE;
protected boolean IAA23FL;
protected boolean IAA23FR;
protected boolean IAA23FU;
protected byte IAA23ME;
protected short IAA23ML;
protected byte IAA23MR;
protected short IAA23MU;
protected byte IAA23OE;
protected short IAA23OL;
protected byte IAA23OR;
protected short IAA23OU;
protected byte IAA23WE;
protected short IAA23WL;
protected byte IAA23WR;
protected short IAA23WU;
protected boolean IAA23YE;
protected boolean IAA23YL;
protected boolean IAA23YR;
protected boolean IAA23YU;
protected short IAA24;
protected byte IAA24FE;
protected short IAA24FL;
protected byte IAA24FR;
protected byte IAA24FU;
protected byte IAA24ME;
protected short IAA24ML;
protected byte IAA24MR;
protected short IAA24MU;
protected byte IAA24OE;
protected short IAA24OL;
protected byte IAA24OR;
protected short IAA24OU;
protected byte IAA24WE;
protected byte IAA24WL;
protected byte IAA24WR;
protected byte IAA24WU;
protected boolean IAA24YE;
protected boolean IAA24YL;
protected boolean IAA24YR;
protected boolean IAA24YU;
protected short IAA25;
protected byte IAA25FE;
protected boolean IAA25FL;
protected byte IAA25FR;
protected boolean IAA25FU;
protected byte IAA25ME;
protected short IAA25ML;
protected byte IAA25MR;
protected short IAA25MU;
protected byte IAA25OE;
protected short IAA25OL;
protected byte IAA25OR;
protected short IAA25OU;
protected byte IAA25WE;
protected byte IAA25WL;
protected byte IAA25WR;
protected byte IAA25WU;
protected boolean IAA25YE;
protected boolean IAA25YL;
protected boolean IAA25YR;
protected boolean IAA25YU;
protected short IAA26;
protected boolean IAA26FE;
protected boolean IAA26FL;
protected boolean IAA26FR;
protected boolean IAA26FU;
protected byte IAA26ME;
protected short IAA26ML;
protected byte IAA26MR;
protected short IAA26MU;
protected byte IAA26OE;
protected short IAA26OL;
protected byte IAA26OR;
protected short IAA26OU;
protected byte IAA26WE;
protected byte IAA26WL;
protected byte IAA26WR;
protected byte IAA26WU;
protected boolean IAA26YE;
protected boolean IAA26YL;
protected boolean IAA26YR;
protected boolean IAA26YU;
protected short IAA27;
protected boolean IAA27FE;
protected boolean IAA27FL;
protected boolean IAA27FR;
protected boolean IAA27FU;
protected byte IAA27ME;
protected short IAA27ML;
protected boolean IAA27MR;
protected short IAA27MU;
protected byte IAA27OE;
protected short IAA27OL;
protected byte IAA27OR;
protected short IAA27OU;
protected boolean IAA27WE;
protected boolean IAA27WL;
protected boolean IAA27WR;
protected boolean IAA27WU;
protected boolean IAA27YE;
protected boolean IAA27YL;
protected boolean IAA27YR;
protected boolean IAA27YU;
protected short IAA28;
protected boolean IAA28FE;
protected boolean IAA28FL;
protected boolean IAA28FR;
protected boolean IAA28FU;
protected boolean IAA28ME;
protected short IAA28ML;
protected boolean IAA28MR;
protected short IAA28MU;
protected byte IAA28OE;
protected short IAA28OL;
protected byte IAA28OR;
protected short IAA28OU;
protected byte IAA28WE;
protected byte IAA28WL;
protected byte IAA28WR;
protected byte IAA28WU;
protected boolean IAA28YE;
protected boolean IAA28YL;
protected boolean IAA28YR;
protected short IAA28YU;
protected short IAA29;
protected boolean IAA29FE;
protected boolean IAA29FL;
protected boolean IAA29FR;
protected boolean IAA29FU;
protected byte IAA29ME;
protected short IAA29ML;
protected byte IAA29MR;
protected short IAA29MU;
protected byte IAA29OE;
protected short IAA29OL;
protected byte IAA29OR;
protected short IAA29OU;
protected byte IAA29WE;
protected byte IAA29WL;
protected byte IAA29WR;
protected byte IAA29WU;
protected boolean IAA29YE;
protected boolean IAA29YL;
protected boolean IAA29YR;
protected boolean IAA29YU;
protected boolean IAA2FE;
protected short IAA2FL;
protected boolean IAA2FR;
protected short IAA2FU;
protected byte IAA2ME;
protected short IAA2ML;
protected byte IAA2MR;
protected short IAA2MU;
protected byte IAA2OE;
protected short IAA2OL;
protected byte IAA2OR;
protected short IAA2OU;
protected byte IAA2WE;
protected byte IAA2WL;
protected byte IAA2WR;
protected byte IAA2WU;
protected boolean IAA2YE;
protected boolean IAA2YL;
protected boolean IAA2YR;
protected boolean IAA2YU;
protected short IAA3;
protected short IAA30;
protected boolean IAA30FE;
protected boolean IAA30FL;
protected boolean IAA30FR;
protected boolean IAA30FU;
protected byte IAA30ME;
protected short IAA30ML;
protected byte IAA30MR;
protected short IAA30MU;
protected byte IAA30OE;
protected short IAA30OL;
protected byte IAA30OR;
protected short IAA30OU;
protected byte IAA30WE;
protected short IAA30WL;
protected byte IAA30WR;
protected byte IAA30WU;
protected boolean IAA30YE;
protected boolean IAA30YL;
protected boolean IAA30YR;
protected boolean IAA30YU;
protected short IAA31;
protected boolean IAA31FE;
protected boolean IAA31FL;
protected boolean IAA31FR;
protected boolean IAA31FU;
protected boolean IAA31ME;
protected short IAA31ML;
protected boolean IAA31MR;
protected short IAA31MU;
protected byte IAA31OE;
protected short IAA31OL;
protected byte IAA31OR;
protected short IAA31OU;
protected byte IAA31WE;
protected boolean IAA31WL;
protected byte IAA31WR;
protected byte IAA31WU;
protected boolean IAA31YE;
protected boolean IAA31YL;
protected boolean IAA31YR;
protected boolean IAA31YU;
protected short IAA32;
protected boolean IAA32FE;
protected boolean IAA32FL;
protected boolean IAA32FR;
protected boolean IAA32FU;
protected byte IAA32ME;
protected short IAA32ML;
protected byte IAA32MR;
protected short IAA32MU;
protected byte IAA32OE;
protected short IAA32OL;
protected byte IAA32OR;
protected short IAA32OU;
protected byte IAA32WE;
protected byte IAA32WL;
protected byte IAA32WR;
protected byte IAA32WU;
protected boolean IAA32YE;
protected boolean IAA32YL;
protected boolean IAA32YR;
protected short IAA32YU;
protected short IAA33;
protected boolean IAA33FE;
protected boolean IAA33FL;
protected boolean IAA33FR;
protected boolean IAA33FU;
protected byte IAA33ME;
protected short IAA33ML;
protected byte IAA33MR;
protected short IAA33MU;
protected byte IAA33OE;
protected short IAA33OL;
protected byte IAA33OR;
protected short IAA33OU;
protected boolean IAA33WE;
protected boolean IAA33WL;
protected boolean IAA33WR;
protected boolean IAA33WU;
protected boolean IAA33YE;
protected boolean IAA33YL;
protected boolean IAA33YR;
protected boolean IAA33YU;
protected short IAA34;
protected boolean IAA34FE;
protected short IAA34FL;
protected boolean IAA34FR;
protected short IAA34FU;
protected boolean IAA34ME;
protected short IAA34ML;
protected boolean IAA34MR;
protected short IAA34MU;
protected boolean IAA34OE;
protected short IAA34OL;
protected boolean IAA34OR;
protected short IAA34OU;
protected boolean IAA34WE;
protected boolean IAA34WL;
protected boolean IAA34WR;
protected boolean IAA34WU;
protected boolean IAA34YE;
protected boolean IAA34YL;
protected boolean IAA34YR;
protected boolean IAA34YU;
protected short IAA35;
protected boolean IAA35FE;
protected boolean IAA35FL;
protected boolean IAA35FR;
protected boolean IAA35FU;
protected boolean IAA35ME;
protected short IAA35ML;
protected boolean IAA35MR;
protected short IAA35MU;
protected byte IAA35OE;
protected short IAA35OL;
protected byte IAA35OR;
protected short IAA35OU;
protected byte IAA35WE;
protected boolean IAA35WL;
protected byte IAA35WR;
protected boolean IAA35WU;
protected boolean IAA35YE;
protected boolean IAA35YL;
protected boolean IAA35YR;
protected boolean IAA35YU;
protected short IAA36;
protected boolean IAA36FE;
protected boolean IAA36FL;
protected boolean IAA36FR;
protected boolean IAA36FU;
protected boolean IAA36ME;
protected short IAA36ML;
protected boolean IAA36MR;
protected short IAA36MU;
protected byte IAA36OE;
protected boolean IAA36OL;
protected byte IAA36OR;
protected short IAA36OU;
protected boolean IAA36WE;
protected boolean IAA36WL;
protected boolean IAA36WR;
protected boolean IAA36WU;
protected boolean IAA36YE;
protected boolean IAA36YL;
protected boolean IAA36YR;
protected boolean IAA36YU;
protected short IAA37;
protected byte IAA37FE;
protected short IAA37FL;
protected byte IAA37FR;
protected short IAA37FU;
protected byte IAA37ME;
protected short IAA37ML;
protected byte IAA37MR;
protected short IAA37MU;
protected byte IAA37OE;
protected short IAA37OL;
protected byte IAA37OR;
protected short IAA37OU;
protected byte IAA37WE;
protected byte IAA37WL;
protected byte IAA37WR;
protected short IAA37WU;
protected boolean IAA37YE;
protected boolean IAA37YL;
protected boolean IAA37YR;
protected boolean IAA37YU;
protected short IAA38;
protected boolean IAA38FE;
protected boolean IAA38FL;
protected boolean IAA38FR;
protected boolean IAA38FU;
protected byte IAA38ME;
protected short IAA38ML;
protected byte IAA38MR;
protected short IAA38MU;
protected byte IAA38OE;
protected short IAA38OL;
protected byte IAA38OR;
protected short IAA38OU;
protected byte IAA38WE;
protected byte IAA38WL;
protected byte IAA38WR;
protected short IAA38WU;
protected boolean IAA38YE;
protected boolean IAA38YL;
protected boolean IAA38YR;
protected boolean IAA38YU;
protected byte IAA3FE;
protected byte IAA3FL;
protected byte IAA3FR;
protected short IAA3FU;
protected byte IAA3ME;
protected short IAA3ML;
protected byte IAA3MR;
protected short IAA3MU;
protected byte IAA3OE;
protected short IAA3OL;
protected byte IAA3OR;
protected short IAA3OU;
protected byte IAA3WE;
protected short IAA3WL;
protected byte IAA3WR;
protected byte IAA3WU;
protected boolean IAA3YE;
protected boolean IAA3YL;
protected boolean IAA3YR;
protected boolean IAA3YU;
protected short IAA4;
protected boolean IAA4FE;
protected boolean IAA4FL;
protected boolean IAA4FR;
protected boolean IAA4FU;
protected byte IAA4ME;
protected short IAA4ML;
protected byte IAA4MR;
protected short IAA4MU;
protected byte IAA4OE;
protected short IAA4OL;
protected byte IAA4OR;
protected short IAA4OU;
protected byte IAA4WE;
protected short IAA4WL;
protected byte IAA4WR;
protected byte IAA4WU;
protected boolean IAA4YE;
protected boolean IAA4YL;
protected boolean IAA4YR;
protected boolean IAA4YU;
protected short IAA5;
protected byte IAA5FE;
protected short IAA5FL;
protected byte IAA5FR;
protected short IAA5FU;
protected byte IAA5ME;
protected short IAA5ML;
protected byte IAA5MR;
protected short IAA5MU;
protected byte IAA5OE;
protected short IAA5OL;
protected byte IAA5OR;
protected short IAA5OU;
protected byte IAA5WE;
protected byte IAA5WL;
protected byte IAA5WR;
protected byte IAA5WU;
protected boolean IAA5YE;
protected boolean IAA5YL;
protected boolean IAA5YR;
protected boolean IAA5YU;
protected int IAA6;
protected byte IAA6FE;
protected short IAA6FL;
protected byte IAA6FR;
protected short IAA6FU;
protected byte IAA6ME;
protected short IAA6ML;
protected byte IAA6MR;
protected short IAA6MU;
protected byte IAA6OE;
protected short IAA6OL;
protected byte IAA6OR;
protected short IAA6OU;
protected byte IAA6WE;
protected byte IAA6WL;
protected byte IAA6WR;
protected short IAA6WU;
protected boolean IAA6YE;
protected short IAA6YL;
protected boolean IAA6YR;
protected short IAA6YU;
protected short IAA7;
protected byte IAA7FE;
protected boolean IAA7FL;
protected byte IAA7FR;
protected boolean IAA7FU;
protected byte IAA7ME;
protected short IAA7ML;
protected byte IAA7MR;
protected short IAA7MU;
protected byte IAA7OE;
protected short IAA7OL;
protected byte IAA7OR;
protected short IAA7OU;
protected byte IAA7WE;
protected short IAA7WL;
protected byte IAA7WR;
protected short IAA7WU;
protected boolean IAA7YE;
protected boolean IAA7YL;
protected boolean IAA7YR;
protected boolean IAA7YU;
protected short IAA8;
protected boolean IAA8FE;
protected short IAA8FL;
protected byte IAA8FR;
protected short IAA8FU;
protected byte IAA8ME;
protected short IAA8ML;
protected byte IAA8MR;
protected short IAA8MU;
protected byte IAA8OE;
protected short IAA8OL;
protected byte IAA8OR;
protected short IAA8OU;
protected byte IAA8WE;
protected byte IAA8WL;
protected byte IAA8WR;
protected byte IAA8WU;
protected boolean IAA8YE;
protected boolean IAA8YL;
protected boolean IAA8YR;
protected boolean IAA8YU;
protected short IAA9;
protected boolean IAA9FE;
protected boolean IAA9FL;
protected boolean IAA9FR;
protected boolean IAA9FU;
protected byte IAA9ME;
protected short IAA9ML;
protected byte IAA9MR;
protected short IAA9MU;
protected byte IAA9OE;
protected short IAA9OL;
protected byte IAA9OR;
protected short IAA9OU;
protected byte IAA9WE;
protected byte IAA9WL;
protected byte IAA9WR;
protected byte IAA9WU;
protected boolean IAA9YE;
protected boolean IAA9YL;
protected boolean IAA9YR;
protected boolean IAA9YU;
protected byte IAAILY;
protected int IAAIM;
protected byte IAAIME;
protected short IAAIML;
protected byte IAAIMR;
protected short IAAIMU;
protected int IAAIP;
protected int IAAM;
protected byte IAAME;
protected int IAAML;
protected byte IAAMR;
protected int IAAMU;
protected byte IAANIN;
protected byte IAASK;
protected int IABG;
protected byte IABGE;
protected int IABGI;
protected byte IABGIE;
protected int IABGIL;
protected byte IABGIR;
protected int IABGIU;
protected int IABGL;
protected byte IABGR;
protected int IABGU;
protected int IACISA;
protected int IADEBM;
protected byte IADEBT;
protected byte IADEMUT;
protected byte IADENAT;
protected byte IADOC;
protected int IAFBA;
protected byte IAFBPR;
protected int IAFBPS;
protected byte IAFBPSE;
protected int IAFBPSL;
protected byte IAFBPSR;
protected int IAFBPSU;
protected byte IAFCON;
protected byte IAFIND;
protected int IAHOME;
protected byte IAINTA;
protected int IAIP;
protected byte IAIPE;
protected int IAIPI;
protected byte IAIPIE;
protected short IAIPIL;
protected byte IAIPIR;
protected short IAIPIU;
protected int IAIPL;
protected byte IAIPR;
protected int IAIPU;
protected byte IAIR;
protected int IAIRA;
protected int IAISAD;
protected byte IAJNT;
protected byte IALI;
protected int IALIPA;
protected int IALISA;
protected byte IALIW;
protected int IALIYA;
protected int IALOAM;
protected short IALRE;
protected byte IALREP;
protected byte IAMRP;
protected int IANPB;
protected byte IANPBE;
protected short IANPBL;
protected int IANPBP;
protected byte IANPBR;
protected short IANPBU;
protected int IANS;
protected byte IANSE;
protected boolean IANSHO;
protected short IANSI;
protected boolean IANSIA;
protected byte IANSIE;
protected short IANSIL;
protected byte IANSIR;
protected short IANSIU;
protected int IANSL;
protected byte IANSR;
protected int IANSU;
protected int IAOASA;
protected byte IAOM;
protected int IAOMM;
protected byte IAORGF;
protected byte IAOTHP;
protected byte IAOTHP2;
protected byte IAOWE;
protected int IAOWEM;
protected byte IAP;
protected byte IAP10;
protected byte IAP11;
protected byte IAP12;
protected byte IAP13;
protected byte IAP14;
protected byte IAP15;
protected byte IAP16;
protected byte IAP17;
protected byte IAP18;
protected byte IAP19;
protected byte IAP2;
protected byte IAP20;
protected byte IAP21;
protected byte IAP22;
protected byte IAP23;
protected byte IAP24;
protected byte IAP25;
protected byte IAP26;
protected byte IAP27;
protected byte IAP28;
protected byte IAP29;
protected byte IAP3;
protected byte IAP30;
protected byte IAP31;
protected byte IAP32;
protected byte IAP33;
protected byte IAP34;
protected byte IAP35;
protected byte IAP36;
protected byte IAP37;
protected byte IAP38;
protected byte IAP4;
protected byte IAP5;
protected byte IAP6;
protected byte IAP7;
protected byte IAP8;
protected byte IAP9;
protected boolean IAPA2FE;
protected boolean IAPA2FL;
protected boolean IAPA2FR;
protected boolean IAPA2FU;
protected byte IAPA2ME;
protected short IAPA2ML;
protected byte IAPA2MR;
protected byte IAPA2MU;
protected boolean IAPA2OE;
protected boolean IAPA2OL;
protected boolean IAPA2OR;
protected boolean IAPA2OU;
protected boolean IAPA2WE;
protected boolean IAPA2WL;
protected boolean IAPA2WR;
protected boolean IAPA2WU;
protected boolean IAPA2YE;
protected boolean IAPA2YL;
protected boolean IAPA2YR;
protected short IAPA2YU;
protected int IAPAM;
protected short IAPAM2;
protected byte IAPAMFE;
protected short IAPAMFL;
protected byte IAPAMFR;
protected short IAPAMFU;
protected byte IAPAMME;
protected short IAPAMML;
protected byte IAPAMMR;
protected short IAPAMMU;
protected byte IAPAMOE;
protected short IAPAMOL;
protected byte IAPAMOR;
protected short IAPAMOU;
protected byte IAPAMWE;
protected short IAPAMWL;
protected byte IAPAMWR;
protected short IAPAMWU;
protected boolean IAPAMYE;
protected short IAPAMYL;
protected byte IAPAMYR;
protected short IAPAMYU;
protected byte IAPAR;
protected byte IAPF;
protected byte IAPID;
protected int IAPKM1;
protected int IAPKM2;
protected int IAPKM3;
protected int IAPKM4;
protected int IAPKM5;
protected int IAPKM6;
protected int IAPKM7;
protected int IAPKM8;
protected short IAPPAM;
protected int IAPPEI;
protected byte IAPPEN;
protected byte IAPR;
protected byte IAPS;
protected byte IAPY;
protected byte IAPYW;
protected byte IAPYW10;
protected int IAREC;
protected short IAREGM;
protected short IAREGM2;
protected byte IAREGO;
protected byte IAREGO2;
protected byte IAREGP;
protected byte IAREGR;
protected byte IAREGRP;
protected short IAREP;
protected int IASAVA;
protected byte IASC;
protected int IASCA;
protected int IASINC;
protected byte IASINCE;
protected int IASINCL;
protected byte IASINCR;
protected int IASINCU;
protected int IASINT;
protected byte IASINTE;
protected short IASINTL;
protected byte IASINTR;
protected short IASINTU;
protected int IASIO;
protected byte IASIOE;
protected int IASIOI;
protected int IASIOL;
protected byte IASIOR;
protected int IASIOU;
protected int IASISA;
protected byte IASPA;
protected byte IASPEN;
protected byte IASPP;
protected byte IASPW;
protected int IASSS;
protected int IASSSI;
protected boolean IAT;
protected boolean IAT10;
protected boolean IAT11;
protected boolean IAT12;
protected boolean IAT13;
protected boolean IAT14;
protected boolean IAT15;
protected boolean IAT16;
protected boolean IAT17;
protected boolean IAT18;
protected boolean IAT19;
protected boolean IAT2;
protected boolean IAT20;
protected boolean IAT21;
protected boolean IAT22;
protected boolean IAT23;
protected boolean IAT24;
protected boolean IAT25;
protected boolean IAT26;
protected boolean IAT27;
protected boolean IAT28;
protected boolean IAT29;
protected boolean IAT3;
protected boolean IAT30;
protected boolean IAT31;
protected boolean IAT32;
protected boolean IAT33;
protected boolean IAT34;
protected boolean IAT35;
protected boolean IAT36;
protected boolean IAT37;
protected boolean IAT38;
protected boolean IAT4;
protected boolean IAT5;
protected boolean IAT6;
protected boolean IAT7;
protected boolean IAT8;
protected boolean IAT9;
protected int IATI;
protected byte IATIE;
protected short IATII;
protected byte IATIIE;
protected short IATIIL;
protected byte IATIIR;
protected short IATIIU;
protected int IATIL;
protected byte IATIR;
protected int IATIU;
protected int IAUIT;
protected int IAUITI;
protected byte IAWORK;
protected byte ICB_P_F;
protected double ICB_P_I;
protected short ICB_P_O;
protected short ICB_P_T;
protected byte ICB_R_F;
protected double ICB_R_I;
protected short ICB_R_O;
protected short ICB_R_T;
protected short IDAHH;
protected int IDAUNIQ;
protected int IDAUNIQ_P;
protected byte IINTDATM;
protected short IINTDATY;
protected byte INDAGER;
protected byte INDINJ_P_F;
protected double INDINJ_P_I;
protected short INDINJ_P_O;
protected short INDINJ_P_T;
protected byte INDINJ_R_F;
protected double INDINJ_R_I;
protected short INDINJ_R_O;
protected short INDINJ_R_T;
protected short INDOBYR;
protected short INDOBYR_P;
protected boolean INDSEX;
protected byte INHERGT0;
protected byte INHERGT0B;
protected byte INHERGT10;
protected byte INHERGT100;
protected byte INHERGT100B;
protected byte INHERGT10B;
protected boolean INST;
protected boolean INST_P;
protected byte INTDATM;
protected short INTDATY;
protected byte INVESTS_BU_F;
protected short INVESTS_BU_NI2;
protected short INVESTS_BU_NI3;
protected short INVESTS_BU_NI4;
protected double INVESTS_BU_S;
protected short INVESTS_BU_T;
protected byte ISAI_BU_F;
protected double ISAI_BU_I;
protected short ISAI_BU_O;
protected short ISAI_BU_T;
protected byte IS_P_F;
protected double IS_P_I;
protected short IS_P_O;
protected short IS_P_T;
protected byte IS_R_F;
protected double IS_R_I;
protected short IS_R_O;
protected short IS_R_T;
protected byte JNTASS_BU_F;
protected double JNTASS_BU_I;
protected short JNTASS_BU_O;
protected short JNTASS_BU_T;
protected byte JSA_P_F;
protected double JSA_P_I;
protected short JSA_P_O;
protected short JSA_P_T;
protected byte JSA_R_F;
protected double JSA_R_I;
protected short JSA_R_O;
protected short JSA_R_T;
protected byte LACKRES;
protected byte LACKRESB;
protected double LEISUREL;
protected byte LEISURET;
protected double LEISUREU;
protected byte LISAVE_BU_F;
protected double LISAVE_BU_I;
protected short LISAVE_BU_O;
protected short LISAVE_BU_T;
protected byte LISA_BU_F;
protected double LISA_BU_I;
protected short LISA_BU_O;
protected short LISA_BU_T;
protected byte LLSILL;
protected double LWGT;
protected byte MAGEDIED;
protected byte MALIVE;
protected byte MARSTAT;
protected byte MAXEXECNN;
protected byte MAXMEMTOTB;
protected byte MAXNUMTYPE2;
protected byte MAXNUMTYPE4;
protected byte MAXNUMTYPE5;
protected byte MEMTOT;
protected byte MEMTOTB;
protected boolean MGDEBT_BU_F;
protected short MGDEBT_BU_NI2;
protected short MGDEBT_BU_NI3;
protected short MGDEBT_BU_NI4;
protected double MGDEBT_BU_S;
protected short MGDEBT_BU_T;
protected byte MMAID;
protected byte MMALONE;
protected byte MMAVSP;
protected byte MMHSS;
protected byte MMPAIN;
protected byte MMRECR;
protected byte MMSAF;
protected byte MMSCHS;
protected byte MMTRYA;
protected byte MMTRYB;
protected byte MMWALA;
protected byte MMWILL;
protected double MMWLKA;
protected double MMWLKB;
protected byte MORTINC85;
protected byte MORTINCBI;
protected byte MORTINCPI;
protected byte MORTINCPP;
protected double MORTPAYL;
protected byte MORTPAYT;
protected double MORTPAYU;
protected double MORTPAYXL;
protected byte MORTPAYXT;
protected double MORTPAYXU;
protected byte MOTHAGE;
protected boolean NAMEONPROP;
protected byte NDEPRIV;
protected byte NETFW_BU_F;
protected short NETFW_BU_NI2;
protected short NETFW_BU_NI3;
protected short NETFW_BU_NI4;
protected double NETFW_BU_S;
protected short NETFW_BU_T;
protected boolean NETHW_BU_F;
protected short NETHW_BU_NI2;
protected short NETHW_BU_NI3;
protected short NETHW_BU_NI4;
protected double NETHW_BU_S;
protected short NETHW_BU_T;
protected byte NETPROF_BU_F;
protected double NETPROF_BU_I;
protected short NETPROF_BU_O;
protected short NETPROF_BU_T;
protected byte NETPROF_P_F;
protected double NETPROF_P_I;
protected short NETPROF_P_O;
protected short NETPROF_P_T;
protected boolean NETPROF_R_F;
protected double NETPROF_R_I;
protected short NETPROF_R_O;
protected short NETPROF_R_T;
protected byte NETPW_BU_F;
protected short NETPW_BU_NI2;
protected short NETPW_BU_NI3;
protected short NETPW_BU_NI4;
protected double NETPW_BU_S;
protected short NETPW_BU_T;
protected double NETRENTL;
protected byte NETRENTT;
protected double NETRENTU;
protected byte NETTOTNHW_BU_F;
protected short NETTOTNHW_BU_NI2;
protected short NETTOTNHW_BU_NI3;
protected short NETTOTNHW_BU_NI4;
protected double NETTOTNHW_BU_S;
protected short NETTOTNHW_BU_T;
protected byte NETTOTW_BU_F;
protected short NETTOTW_BU_NI2;
protected short NETTOTW_BU_NI3;
protected short NETTOTW_BU_NI4;
protected double NETTOTW_BU_S;
protected short NETTOTW_BU_T;
protected byte NFWQ10_BU_F;
protected byte NFWQ10_BU_S;
protected byte NFWQ5_BU_F;
protected byte NFWQ5_BU_S;
protected byte NGRANDCH;
protected byte NGRANDCHINHH;
protected byte NONWHITE;
protected byte NPEOPLE;
protected byte NRIGHT;
protected byte NROOMS;
protected byte NSAMPMEM;
protected byte NSAVI_BU_F;
protected double NSAVI_BU_I;
protected short NSAVI_BU_O;
protected short NSAVI_BU_T;
protected byte NSAV_BU_F;
protected double NSAV_BU_I;
protected short NSAV_BU_O;
protected short NSAV_BU_T;
protected byte NSIBS;
protected byte NUMANSIA;
protected boolean NUMANSIAFU;
protected byte NUMBUAD;
protected byte NUMBUK013;
protected byte NUMBUK1418;
protected byte NUMBUKID;
protected byte NUMBUS;
protected byte NUMFEMALE;
protected byte NUMFEMALEAD;
protected byte NUMHHAD;
protected byte NUMHHK013;
protected byte NUMHHK1418;
protected byte NUMHHKID;
protected byte NUMHHLDRSINHH;
protected byte NUMINELIG;
protected byte NUMMALE;
protected byte NUMMALEAD;
protected byte NUMTYPE2;
protected byte NUMTYPE4;
protected byte NUMTYPE5;
protected byte ODEBT_BU_F;
protected int ODEBT_BU_I;
protected short ODEBT_BU_O;
protected short ODEBT_BU_T;
protected double OILL;
protected byte OILT;
protected double OILU;
protected byte OJ_BU_F;
protected double OJ_BU_I;
protected short OJ_BU_O;
protected short OJ_BU_T;
protected byte OJ_P_F;
protected double OJ_P_I;
protected short OJ_P_O;
protected short OJ_P_T;
protected boolean OJ_R_F;
protected double OJ_R_I;
protected short OJ_R_O;
protected short OJ_R_T;
protected byte OTH1_P_F;
protected double OTH1_P_I;
protected short OTH1_P_O;
protected short OTH1_P_T;
protected byte OTH1_R_F;
protected double OTH1_R_I;
protected short OTH1_R_O;
protected short OTH1_R_T;
protected byte OTH2_P_F;
protected double OTH2_P_I;
protected short OTH2_P_O;
protected short OTH2_P_T;
protected byte OTH2_R_F;
protected double OTH2_R_I;
protected short OTH2_R_O;
protected short OTH2_R_T;
protected byte OTHBUSV_BU_F;
protected double OTHBUSV_BU_I;
protected short OTHBUSV_BU_O;
protected short OTHBUSV_BU_T;
protected byte OTHBUSV_P_F;
protected double OTHBUSV_P_I;
protected short OTHBUSV_P_O;
protected short OTHBUSV_P_T;
protected boolean OTHBUSV_R_F;
protected double OTHBUSV_R_I;
protected short OTHBUSV_R_O;
protected short OTHBUSV_R_T;
protected double OTHERFL;
protected byte OTHERFT;
protected double OTHERFU;
protected byte OTHINC_BU_F;
protected short OTHINC_BU_NI2;
protected short OTHINC_BU_NI3;
protected short OTHINC_BU_NI4;
protected double OTHINC_BU_S;
protected short OTHINC_BU_T;
protected byte OTHINC_P_F;
protected short OTHINC_P_NI2;
protected short OTHINC_P_NI3;
protected short OTHINC_P_NI4;
protected double OTHINC_P_S;
protected short OTHINC_P_T;
protected byte OTHINC_R_F;
protected short OTHINC_R_NI2;
protected short OTHINC_R_NI3;
protected short OTHINC_R_NI4;
protected double OTHINC_R_S;
protected short OTHINC_R_T;
protected byte OTHPAY_P_F;
protected double OTHPAY_P_I;
protected short OTHPAY_P_O;
protected short OTHPAY_P_T;
protected byte OTHPAY_R_F;
protected double OTHPAY_R_I;
protected short OTHPAY_R_O;
protected short OTHPAY_R_T;
protected byte OTHSAVI_BU_F;
protected double OTHSAVI_BU_I;
protected short OTHSAVI_BU_O;
protected short OTHSAVI_BU_T;
protected byte OTHSAV_BU_F;
protected double OTHSAV_BU_I;
protected short OTHSAV_BU_O;
protected short OTHSAV_BU_T;
protected double PARAL;
protected byte PARAT;
protected double PARAU;
protected double PENID;
protected byte PEPI_BU_F;
protected double PEPI_BU_I;
protected short PEPI_BU_O;
protected short PEPI_BU_T;
protected byte PEP_BU_F;
protected double PEP_BU_I;
protected short PEP_BU_O;
protected short PEP_BU_T;
protected byte PERID;
protected byte PERSNO;
protected byte PPEN_BU_F;
protected double PPEN_BU_I;
protected short PPEN_BU_O;
protected short PPEN_BU_T;
protected byte PPINC_BU_F;
protected short PPINC_BU_NI2;
protected short PPINC_BU_NI3;
protected short PPINC_BU_NI4;
protected double PPINC_BU_S;
protected short PPINC_BU_T;
protected byte PPINC_P_F;
protected short PPINC_P_NI2;
protected short PPINC_P_NI3;
protected short PPINC_P_NI4;
protected double PPINC_P_S;
protected short PPINC_P_T;
protected byte PPINC_R_F;
protected short PPINC_R_NI2;
protected short PPINC_R_NI3;
protected short PPINC_R_NI4;
protected double PPINC_R_S;
protected short PPINC_R_T;
protected boolean PP_CONT;
protected byte PP_MAXYRS;
protected boolean PP_MEM;
protected byte PP_NCONT;
protected boolean PP_NK;
protected byte PP_NNK;
protected byte PP_NOCC;
protected byte PP_NOCCDB;
protected byte PP_NOCCDC;
protected byte PP_NOCCNK;
protected byte PP_NPER;
protected byte PP_NREC;
protected byte PP_NRR;
protected boolean PP_OCC;
protected boolean PP_OCCDB;
protected boolean PP_OCCDC;
protected boolean PP_OCCNK;
protected boolean PP_PER;
protected boolean PP_REC;
protected boolean PP_RR;
protected byte PRBONDSI_BU_F;
protected double PRBONDSI_BU_I;
protected short PRBONDSI_BU_O;
protected short PRBONDSI_BU_T;
protected byte PRBONDS_BU_F;
protected int PRBONDS_BU_I;
protected short PRBONDS_BU_O;
protected short PRBONDS_BU_T;
protected byte PRDEBT_BU_F;
protected int PRDEBT_BU_I;
protected short PRDEBT_BU_O;
protected short PRDEBT_BU_T;
protected boolean PROXY;
protected byte PSCEDA;
protected byte PSCEDB;
protected byte PSCEDC;
protected byte PSCEDD;
protected byte PSCEDE;
protected byte PSCEDF;
protected byte PSCEDG;
protected byte PSCEDH;
protected byte QUAL2;
protected byte QUAL2_P;
protected byte QUAL3;
protected byte QUAL3_P;
protected byte REFRESHTYPE;
protected byte RELTOHOH;
protected boolean RENTINC85;
protected boolean RENTINCCL;
protected byte RENTINCCO;
protected byte RENTINCGA;
protected boolean RENTINCGD;
protected byte RENTINCHE;
protected byte RENTINCLA;
protected boolean RENTINCME;
protected byte RENTINCSE;
protected boolean RENTINCSG;
protected byte RENTINCWA;
protected boolean RENTINCWP;
protected byte RESPONDED_P;
protected double RPI;
protected byte SAVEI_BU_F;
protected double SAVEI_BU_I;
protected short SAVEI_BU_O;
protected short SAVEI_BU_T;
protected byte SAVE_BU_F;
protected double SAVE_BU_I;
protected short SAVE_BU_O;
protected short SAVE_BU_T;
protected byte SAVINGS_BU_F;
protected short SAVINGS_BU_NI2;
protected short SAVINGS_BU_NI3;
protected short SAVINGS_BU_NI4;
protected double SAVINGS_BU_S;
protected short SAVINGS_BU_T;
protected byte SCCHD;
protected byte SCCHDA;
protected byte SCCHDB;
protected byte SCCHDC;
protected byte SCCHDD;
protected byte SCCHDE;
protected byte SCCHDF;
protected byte SCCHDG;
protected byte SCCHDH;
protected byte SCCHDI;
protected byte SCCHDM;
protected byte SCFAM;
protected byte SCFAMA;
protected byte SCFAMB;
protected byte SCFAMC;
protected byte SCFAMD;
protected byte SCFAME;
protected byte SCFAMF;
protected byte SCFAMG;
protected byte SCFAMI;
protected byte SCFRD;
protected byte SCFRDA;
protected byte SCFRDB;
protected byte SCFRDC;
protected byte SCFRDD;
protected byte SCFRDE;
protected byte SCFRDF;
protected byte SCFRDG;
protected byte SCFRDH;
protected byte SCFRDI;
protected byte SCHLEAVE;
protected byte SCHLEAVE_P;
protected byte SCLDDR;
protected short SCORGN;
protected byte SCQOLA;
protected byte SCQOLB;
protected byte SCQOLC;
protected byte SCQOLD;
protected byte SCQOLE;
protected byte SCQOLF;
protected byte SCQOLG;
protected byte SCQOLH;
protected byte SCQOLI;
protected byte SCQOLJ;
protected byte SCQOLK;
protected byte SCQOLL;
protected byte SCQOLM;
protected byte SCQOLN;
protected byte SCQOLO;
protected byte SCQOLP;
protected byte SCQOLQ;
protected byte SCQOLR;
protected byte SCQOLS;
protected byte SDA_P_F;
protected double SDA_P_I;
protected short SDA_P_O;
protected short SDA_P_T;
protected byte SDA_R_F;
protected double SDA_R_I;
protected short SDA_R_O;
protected short SDA_R_T;
protected byte SEDRAW_BU_F;
protected double SEDRAW_BU_I;
protected short SEDRAW_BU_O;
protected short SEDRAW_BU_T;
protected byte SEDRAW_P_F;
protected double SEDRAW_P_I;
protected short SEDRAW_P_O;
protected short SEDRAW_P_T;
protected boolean SEDRAW_R_F;
protected double SEDRAW_R_I;
protected short SEDRAW_R_O;
protected short SEDRAW_R_T;
protected byte SEINC_BU_F;
protected short SEINC_BU_NI2;
protected short SEINC_BU_NI3;
protected short SEINC_BU_NI4;
protected double SEINC_BU_S;
protected short SEINC_BU_T;
protected byte SEINC_P_F;
protected short SEINC_P_NI2;
protected short SEINC_P_NI3;
protected short SEINC_P_NI4;
protected double SEINC_P_S;
protected short SEINC_P_T;
protected boolean SEINC_R_F;
protected short SEINC_R_NI2;
protected short SEINC_R_NI3;
protected short SEINC_R_NI4;
protected double SEINC_R_S;
protected short SEINC_R_T;
protected boolean SEX;
protected boolean SEXBUHEAD;
protected boolean SEXHOH;
protected byte SEX_P;
protected byte SHARESI_BU_F;
protected double SHARESI_BU_I;
protected short SHARESI_BU_O;
protected short SHARESI_BU_T;
protected byte SHARES_BU_F;
protected double SHARES_BU_I;
protected short SHARES_BU_O;
protected short SHARES_BU_T;
protected byte SHISA_BU_F;
protected int SHISA_BU_I;
protected short SHISA_BU_O;
protected short SHISA_BU_T;
protected byte SINC_BU_F;
protected double SINC_BU_I;
protected short SINC_BU_O;
protected short SINC_BU_T;
protected byte SMOKER;
protected byte SMOKERSTAT;
protected byte SOCRENT;
protected byte SPAGE;
protected boolean SPAGE_BU;
protected byte SPCAR;
protected byte SPEN_P_F;
protected double SPEN_P_I;
protected short SPEN_P_O;
protected short SPEN_P_T;
protected byte SPEN_R_F;
protected double SPEN_R_I;
protected short SPEN_R_O;
protected short SPEN_R_T;
protected byte SPINC_BU_F;
protected short SPINC_BU_NI2;
protected short SPINC_BU_NI3;
protected short SPINC_BU_NI4;
protected double SPINC_BU_S;
protected short SPINC_BU_T;
protected byte SPINC_P_F;
protected short SPINC_P_NI2;
protected short SPINC_P_NI3;
protected short SPINC_P_NI4;
protected double SPINC_P_S;
protected short SPINC_P_T;
protected byte SPINC_R_F;
protected short SPINC_R_NI2;
protected short SPINC_R_NI3;
protected short SPINC_R_NI4;
protected double SPINC_R_S;
protected short SPINC_R_T;
protected boolean SPNAMEONPROP;
protected byte SPTRAA;
protected byte SRH3_HRS;
protected byte SRH3_HRS_P;
protected byte SRH3_HSE;
protected byte SRH3_HSE_P;
protected byte SRH_HRS;
protected byte SRH_HSE;
protected byte SSP_P_F;
protected double SSP_P_I;
protected short SSP_P_O;
protected short SSP_P_T;
protected byte SSP_R_F;
protected double SSP_R_I;
protected short SSP_R_O;
protected short SSP_R_T;
protected byte TENURE;
protected byte TESSAI_BU_F;
protected double TESSAI_BU_I;
protected short TESSAI_BU_O;
protected short TESSAI_BU_T;
protected byte TESSA_BU_F;
protected double TESSA_BU_I;
protected short TESSA_BU_O;
protected short TESSA_BU_T;
protected byte THP_BU_F;
protected double THP_BU_I;
protected short THP_BU_O;
protected short THP_BU_T;
protected byte THP_P_F;
protected double THP_P_I;
protected short THP_P_O;
protected short THP_P_T;
protected boolean THP_R_F;
protected double THP_R_I;
protected short THP_R_O;
protected short THP_R_T;
protected byte TNHWQ10_BU_F;
protected byte TNHWQ10_BU_S;
protected byte TNHWQ5_BU_F;
protected byte TNHWQ5_BU_S;
protected byte TOTHASS_BU_F;
protected int TOTHASS_BU_I;
protected short TOTHASS_BU_O;
protected short TOTHASS_BU_T;
protected byte TOTINC_BU_F;
protected short TOTINC_BU_NI2;
protected short TOTINC_BU_NI3;
protected short TOTINC_BU_NI4;
protected double TOTINC_BU_S;
protected short TOTINC_BU_T;
protected byte TOTWQ10_BU_F;
protected byte TOTWQ10_BU_S;
protected byte TOTWQ5_BU_F;
protected byte TOTWQ5_BU_S;
protected double TRANSFERSL;
protected byte TRANSFERST;
protected double TRANSFERSU;
protected byte TRUSTSI_BU_F;
protected double TRUSTSI_BU_I;
protected short TRUSTSI_BU_O;
protected short TRUSTSI_BU_T;
protected byte TRUSTS_BU_F;
protected double TRUSTS_BU_I;
protected short TRUSTS_BU_O;
protected short TRUSTS_BU_T;
protected boolean USESCOAL;
protected boolean USESELEC;
protected boolean USESGAS;
protected boolean USESOIL;
protected boolean USESOTHERF;
protected boolean USESPARA;
protected boolean USESWOOD;
protected byte WAR_P_F;
protected double WAR_P_I;
protected short WAR_P_O;
protected short WAR_P_T;
protected byte WAR_R_F;
protected double WAR_R_I;
protected short WAR_R_O;
protected short WAR_R_T;
protected boolean WAVE;
protected double WGT;
protected byte WHOSO1;
protected byte WHOSO2;
protected byte WHOSO3;
protected byte WIDPEN_P_F;
protected double WIDPEN_P_I;
protected short WIDPEN_P_O;
protected short WIDPEN_P_T;
protected byte WIDPEN_R_F;
protected double WIDPEN_R_I;
protected short WIDPEN_R_O;
protected short WIDPEN_R_T;
protected double WOODL;
protected byte WOODT;
protected double WOODU;
protected byte WORKTIME;
protected double WPAC;
protected byte WPACOA;
protected double WPACOB;
protected byte WPACOC;
protected byte WPACON;
protected boolean WPACTIVE;
protected byte WPACTIVE_P;
protected byte WPACTW;
protected byte WPADY;
protected double WPAMEC;
protected int WPAOTP;
protected byte WPAP;
protected double WPAPF;
protected double WPASAL;
protected byte WPAWAY;
protected byte WPBDNI;
protected byte WPBDT;
protected byte WPBI;
protected int WPBIMA;
protected short WPBIWA;
protected byte WPBTHA;
protected byte WPBTHP;
protected byte WPBUS;
protected int WPBUSV;
protected byte WPCEMP;
protected byte WPCJOB;
protected double WPCONY;
protected short WPDE;
protected byte WPDES;
protected byte WPDPS;
protected short WPDS;
protected byte WPEDC;
protected byte WPEMP;
protected byte WPEMPL;
protected byte WPEPER;
protected byte WPERA;
protected byte WPERAG;
protected byte WPERC;
protected byte WPERET;
protected byte WPERP;
protected byte WPES;
protected int WPESJ;
protected byte WPESJE;
protected short WPESJL;
protected short WPESJM;
protected byte WPESJR;
protected short WPESJU;
protected byte WPESP;
protected byte WPEST;
protected byte WPEVER;
protected byte WPFRAS;
protected byte WPFSAP;
protected byte WPFSAV;
protected byte WPFSCO;
protected byte WPFSCP;
protected short WPHJOB;
protected byte WPHLY;
protected short WPHMSJ;
protected byte WPHOWE;
protected byte WPHOWU;
protected short WPHWRK;
protected byte WPINF;
protected byte WPIR;
protected byte WPJACT;
protected byte WPJOB;
protected byte WPJOBL;
protected byte WPLCOM;
protected short WPLCOY;
protected byte WPLNJ;
protected double WPLUMP;
protected byte WPMC;
protected double WPMCA;
protected byte WPMCAF;
protected byte WPMCON;
protected byte WPMEC;
protected short WPMHI;
protected byte WPMMIN;
protected byte WPMOJ;
protected byte WPMREA;
protected byte WPMRRE;
protected byte WPNEMP;
protected byte WPNIC;
protected byte WPNICE;
protected byte WPNIMW;
protected byte WPNIRR;
protected byte WPNOE;
protected byte WPNRA;
protected byte WPOTP;
protected byte WPPAY;
protected byte WPPAYA;
protected byte WPPCON;
protected double WPPENB;
protected byte WPPERC;
protected byte WPPERI;
protected double WPPFVA;
protected byte WPPHI;
protected byte WPPL;
protected byte WPPLP;
protected byte WPPLPH;
protected byte WPPP_BU_F;
protected double WPPP_BU_I;
protected short WPPP_BU_O;
protected short WPPP_BU_T;
protected byte WPPP_P_F;
protected double WPPP_P_I;
protected short WPPP_P_O;
protected short WPPP_P_T;
protected boolean WPPP_R_F;
protected double WPPP_R_I;
protected short WPPP_R_O;
protected short WPPP_R_T;
protected int WPPROF;
protected byte WPPSAL;
protected byte WPPTOP;
protected byte WPPTP;
protected double WPPYR;
protected byte WPRAEM;
protected short WPRAEY;
protected byte WPRAGE;
protected byte WPRAIM;
protected short WPRAIR;
protected byte WPRCON;
protected byte WPREC;
protected byte WPSAL;
protected byte WPSLIP;
protected byte WPSPAY;
protected byte WPSTJ;
protected byte WPSUP;
protected byte WPTAW;
protected byte WPTAX;
protected byte WPTHL;
protected int WPTHP;
protected byte WPUP;
protected int WPUPA;
protected int WPVBUS;
protected byte WPVW;
protected byte WPWKR;
protected byte WPWLY;
protected byte WPWLYM;
protected int WPWLYY;
protected byte WPYAER;
protected byte WPYBS;
protected double WPYCA;
protected byte WPYCAT;
protected byte WSELFD;
protected byte WSELFD_P;
protected int XCOUPID;
protected int XCOUPID_INST;
protected byte YQ10_BU_F;
protected byte YQ10_BU_S;
protected byte YQ5_BU_F;
protected byte YQ5_BU_S;
protected final void initAGE(String s) {
if (!s.trim().isEmpty()) {
AGE = Byte.parseByte(s);
} else {
AGE = Byte.MIN_VALUE;
}
}

protected final void initAGEBUCH1(String s) {
if (!s.trim().isEmpty()) {
AGEBUCH1 = Byte.parseByte(s);
} else {
AGEBUCH1 = Byte.MIN_VALUE;
}
}

protected final void initAGEBUCH2(String s) {
if (!s.trim().isEmpty()) {
AGEBUCH2 = Byte.parseByte(s);
} else {
AGEBUCH2 = Byte.MIN_VALUE;
}
}

protected final void initAGEBUCH3(String s) {
if (!s.trim().isEmpty()) {
AGEBUCH3 = Byte.parseByte(s);
} else {
AGEBUCH3 = Byte.MIN_VALUE;
}
}

protected final void initAGEBUCH4(String s) {
if (!s.trim().isEmpty()) {
AGEBUCH4 = Byte.parseByte(s);
} else {
AGEBUCH4 = Byte.MIN_VALUE;
}
}

protected final void initAGEBUCH5(String s) {
if (!s.trim().isEmpty()) {
AGEBUCH5 = Byte.parseByte(s);
} else {
AGEBUCH5 = Byte.MIN_VALUE;
}
}

protected final void initAGEBUCH6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
AGEBUCH6 = false;
}
}

protected final void initAGEBUCH7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
AGEBUCH7 = false;
}
}

protected final void initAGEBUCH8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
AGEBUCH8 = false;
}
}

protected final void initAGEBUHEAD(String s) {
if (!s.trim().isEmpty()) {
AGEBUHEAD = Byte.parseByte(s);
} else {
AGEBUHEAD = Byte.MIN_VALUE;
}
}

protected final void initAGEBUSP(String s) {
if (!s.trim().isEmpty()) {
AGEBUSP = Byte.parseByte(s);
} else {
AGEBUSP = Byte.MIN_VALUE;
}
}

protected final void initAGEG10(String s) {
if (!s.trim().isEmpty()) {
AGEG10 = Byte.parseByte(s);
} else {
AGEG10 = Byte.MIN_VALUE;
}
}

protected final void initAGEG10_BU(String s) {
if (!s.trim().isEmpty()) {
AGEG10_BU = Byte.parseByte(s);
} else {
AGEG10_BU = Byte.MIN_VALUE;
}
}

protected final void initAGEG3(String s) {
if (!s.trim().isEmpty()) {
AGEG3 = Byte.parseByte(s);
} else {
AGEG3 = Byte.MIN_VALUE;
}
}

protected final void initAGEG3_BU(String s) {
if (!s.trim().isEmpty()) {
AGEG3_BU = Byte.parseByte(s);
} else {
AGEG3_BU = Byte.MIN_VALUE;
}
}

protected final void initAGEG5(String s) {
if (!s.trim().isEmpty()) {
AGEG5 = Byte.parseByte(s);
} else {
AGEG5 = Byte.MIN_VALUE;
}
}

protected final void initAGEG5_BU(String s) {
if (!s.trim().isEmpty()) {
AGEG5_BU = Byte.parseByte(s);
} else {
AGEG5_BU = Byte.MIN_VALUE;
}
}

protected final void initAGEG7(String s) {
if (!s.trim().isEmpty()) {
AGEG7 = Byte.parseByte(s);
} else {
AGEG7 = Byte.MIN_VALUE;
}
}

protected final void initAGEG7_BU(String s) {
if (!s.trim().isEmpty()) {
AGEG7_BU = Byte.parseByte(s);
} else {
AGEG7_BU = Byte.MIN_VALUE;
}
}

protected final void initAGEHHCH1(String s) {
if (!s.trim().isEmpty()) {
AGEHHCH1 = Byte.parseByte(s);
} else {
AGEHHCH1 = Byte.MIN_VALUE;
}
}

protected final void initAGEHHCH2(String s) {
if (!s.trim().isEmpty()) {
AGEHHCH2 = Byte.parseByte(s);
} else {
AGEHHCH2 = Byte.MIN_VALUE;
}
}

protected final void initAGEHHCH3(String s) {
if (!s.trim().isEmpty()) {
AGEHHCH3 = Byte.parseByte(s);
} else {
AGEHHCH3 = Byte.MIN_VALUE;
}
}

protected final void initAGEHHCH4(String s) {
if (!s.trim().isEmpty()) {
AGEHHCH4 = Byte.parseByte(s);
} else {
AGEHHCH4 = Byte.MIN_VALUE;
}
}

protected final void initAGEHHCH5(String s) {
if (!s.trim().isEmpty()) {
AGEHHCH5 = Byte.parseByte(s);
} else {
AGEHHCH5 = Byte.MIN_VALUE;
}
}

protected final void initAGEHHCH6(String s) {
if (!s.trim().isEmpty()) {
AGEHHCH6 = Byte.parseByte(s);
} else {
AGEHHCH6 = Byte.MIN_VALUE;
}
}

protected final void initAGEHHCH7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
AGEHHCH7 = false;
}
}

protected final void initAGEHHCH8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
AGEHHCH8 = false;
}
}

protected final void initAGEHHLDR1(String s) {
if (!s.trim().isEmpty()) {
AGEHHLDR1 = Byte.parseByte(s);
} else {
AGEHHLDR1 = Byte.MIN_VALUE;
}
}

protected final void initAGEHHLDR2(String s) {
if (!s.trim().isEmpty()) {
AGEHHLDR2 = Byte.parseByte(s);
} else {
AGEHHLDR2 = Byte.MIN_VALUE;
}
}

protected final void initAGEHHLDR3(String s) {
if (!s.trim().isEmpty()) {
AGEHHLDR3 = Byte.parseByte(s);
} else {
AGEHHLDR3 = Byte.MIN_VALUE;
}
}

protected final void initAGEHHLDR4(String s) {
if (!s.trim().isEmpty()) {
AGEHHLDR4 = Byte.parseByte(s);
} else {
AGEHHLDR4 = Byte.MIN_VALUE;
}
}

protected final void initAGEHOH(String s) {
if (!s.trim().isEmpty()) {
AGEHOH = Byte.parseByte(s);
} else {
AGEHOH = Byte.MIN_VALUE;
}
}

protected final void initAGE_P(String s) {
if (!s.trim().isEmpty()) {
AGE_P = Byte.parseByte(s);
} else {
AGE_P = Byte.MIN_VALUE;
}
}

protected final void initANIN_P_F(String s) {
if (!s.trim().isEmpty()) {
ANIN_P_F = Byte.parseByte(s);
} else {
ANIN_P_F = Byte.MIN_VALUE;
}
}

protected final void initANIN_P_I(String s) {
if (!s.trim().isEmpty()) {
ANIN_P_I = Double.parseDouble(s);
} else {
ANIN_P_I = Double.NaN;
}
}

protected final void initANIN_P_O(String s) {
if (!s.trim().isEmpty()) {
ANIN_P_O = Short.parseShort(s);
} else {
ANIN_P_O = Short.MIN_VALUE;
}
}

protected final void initANIN_P_T(String s) {
if (!s.trim().isEmpty()) {
ANIN_P_T = Short.parseShort(s);
} else {
ANIN_P_T = Short.MIN_VALUE;
}
}

protected final void initANIN_R_F(String s) {
if (!s.trim().isEmpty()) {
ANIN_R_F = Byte.parseByte(s);
} else {
ANIN_R_F = Byte.MIN_VALUE;
}
}

protected final void initANIN_R_I(String s) {
if (!s.trim().isEmpty()) {
ANIN_R_I = Double.parseDouble(s);
} else {
ANIN_R_I = Double.NaN;
}
}

protected final void initANIN_R_O(String s) {
if (!s.trim().isEmpty()) {
ANIN_R_O = Short.parseShort(s);
} else {
ANIN_R_O = Short.MIN_VALUE;
}
}

protected final void initANIN_R_T(String s) {
if (!s.trim().isEmpty()) {
ANIN_R_T = Short.parseShort(s);
} else {
ANIN_R_T = Short.MIN_VALUE;
}
}

protected final void initASSINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
ASSINC_BU_F = Byte.parseByte(s);
} else {
ASSINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initASSINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
ASSINC_BU_NI2 = Short.parseShort(s);
} else {
ASSINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initASSINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
ASSINC_BU_NI3 = Short.parseShort(s);
} else {
ASSINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initASSINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
ASSINC_BU_NI4 = Short.parseShort(s);
} else {
ASSINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initASSINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
ASSINC_BU_S = Double.parseDouble(s);
} else {
ASSINC_BU_S = Double.NaN;
}
}

protected final void initASSINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
ASSINC_BU_T = Short.parseShort(s);
} else {
ASSINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initATTALL_P_F(String s) {
if (!s.trim().isEmpty()) {
ATTALL_P_F = Byte.parseByte(s);
} else {
ATTALL_P_F = Byte.MIN_VALUE;
}
}

protected final void initATTALL_P_I(String s) {
if (!s.trim().isEmpty()) {
ATTALL_P_I = Double.parseDouble(s);
} else {
ATTALL_P_I = Double.NaN;
}
}

protected final void initATTALL_P_O(String s) {
if (!s.trim().isEmpty()) {
ATTALL_P_O = Short.parseShort(s);
} else {
ATTALL_P_O = Short.MIN_VALUE;
}
}

protected final void initATTALL_P_T(String s) {
if (!s.trim().isEmpty()) {
ATTALL_P_T = Short.parseShort(s);
} else {
ATTALL_P_T = Short.MIN_VALUE;
}
}

protected final void initATTALL_R_F(String s) {
if (!s.trim().isEmpty()) {
ATTALL_R_F = Byte.parseByte(s);
} else {
ATTALL_R_F = Byte.MIN_VALUE;
}
}

protected final void initATTALL_R_I(String s) {
if (!s.trim().isEmpty()) {
ATTALL_R_I = Double.parseDouble(s);
} else {
ATTALL_R_I = Double.NaN;
}
}

protected final void initATTALL_R_O(String s) {
if (!s.trim().isEmpty()) {
ATTALL_R_O = Short.parseShort(s);
} else {
ATTALL_R_O = Short.MIN_VALUE;
}
}

protected final void initATTALL_R_T(String s) {
if (!s.trim().isEmpty()) {
ATTALL_R_T = Short.parseShort(s);
} else {
ATTALL_R_T = Short.MIN_VALUE;
}
}

protected final void initBENINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
BENINC_BU_F = Byte.parseByte(s);
} else {
BENINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initBENINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
BENINC_BU_NI2 = Short.parseShort(s);
} else {
BENINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initBENINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
BENINC_BU_NI3 = Short.parseShort(s);
} else {
BENINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initBENINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
BENINC_BU_NI4 = Short.parseShort(s);
} else {
BENINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initBENINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
BENINC_BU_S = Double.parseDouble(s);
} else {
BENINC_BU_S = Double.NaN;
}
}

protected final void initBENINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
BENINC_BU_T = Short.parseShort(s);
} else {
BENINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initBENINC_P_F(String s) {
if (!s.trim().isEmpty()) {
BENINC_P_F = Byte.parseByte(s);
} else {
BENINC_P_F = Byte.MIN_VALUE;
}
}

protected final void initBENINC_P_NI2(String s) {
if (!s.trim().isEmpty()) {
BENINC_P_NI2 = Short.parseShort(s);
} else {
BENINC_P_NI2 = Short.MIN_VALUE;
}
}

protected final void initBENINC_P_NI3(String s) {
if (!s.trim().isEmpty()) {
BENINC_P_NI3 = Short.parseShort(s);
} else {
BENINC_P_NI3 = Short.MIN_VALUE;
}
}

protected final void initBENINC_P_NI4(String s) {
if (!s.trim().isEmpty()) {
BENINC_P_NI4 = Short.parseShort(s);
} else {
BENINC_P_NI4 = Short.MIN_VALUE;
}
}

protected final void initBENINC_P_S(String s) {
if (!s.trim().isEmpty()) {
BENINC_P_S = Double.parseDouble(s);
} else {
BENINC_P_S = Double.NaN;
}
}

protected final void initBENINC_P_T(String s) {
if (!s.trim().isEmpty()) {
BENINC_P_T = Short.parseShort(s);
} else {
BENINC_P_T = Short.MIN_VALUE;
}
}

protected final void initBENINC_R_F(String s) {
if (!s.trim().isEmpty()) {
BENINC_R_F = Byte.parseByte(s);
} else {
BENINC_R_F = Byte.MIN_VALUE;
}
}

protected final void initBENINC_R_NI2(String s) {
if (!s.trim().isEmpty()) {
BENINC_R_NI2 = Short.parseShort(s);
} else {
BENINC_R_NI2 = Short.MIN_VALUE;
}
}

protected final void initBENINC_R_NI3(String s) {
if (!s.trim().isEmpty()) {
BENINC_R_NI3 = Short.parseShort(s);
} else {
BENINC_R_NI3 = Short.MIN_VALUE;
}
}

protected final void initBENINC_R_NI4(String s) {
if (!s.trim().isEmpty()) {
BENINC_R_NI4 = Short.parseShort(s);
} else {
BENINC_R_NI4 = Short.MIN_VALUE;
}
}

protected final void initBENINC_R_S(String s) {
if (!s.trim().isEmpty()) {
BENINC_R_S = Double.parseDouble(s);
} else {
BENINC_R_S = Double.NaN;
}
}

protected final void initBENINC_R_T(String s) {
if (!s.trim().isEmpty()) {
BENINC_R_T = Short.parseShort(s);
} else {
BENINC_R_T = Short.MIN_VALUE;
}
}

protected final void initBEQUESTGT0(String s) {
if (!s.trim().isEmpty()) {
BEQUESTGT0 = Byte.parseByte(s);
} else {
BEQUESTGT0 = Byte.MIN_VALUE;
}
}

protected final void initBEQUESTGT0B(String s) {
if (!s.trim().isEmpty()) {
BEQUESTGT0B = Byte.parseByte(s);
} else {
BEQUESTGT0B = Byte.MIN_VALUE;
}
}

protected final void initBEQUESTGT150(String s) {
if (!s.trim().isEmpty()) {
BEQUESTGT150 = Byte.parseByte(s);
} else {
BEQUESTGT150 = Byte.MIN_VALUE;
}
}

protected final void initBEQUESTGT150B(String s) {
if (!s.trim().isEmpty()) {
BEQUESTGT150B = Byte.parseByte(s);
} else {
BEQUESTGT150B = Byte.MIN_VALUE;
}
}

protected final void initBEQUESTGT50(String s) {
if (!s.trim().isEmpty()) {
BEQUESTGT50 = Byte.parseByte(s);
} else {
BEQUESTGT50 = Byte.MIN_VALUE;
}
}

protected final void initBEQUESTGT50B(String s) {
if (!s.trim().isEmpty()) {
BEQUESTGT50B = Byte.parseByte(s);
} else {
BEQUESTGT50B = Byte.MIN_VALUE;
}
}

protected final void initBONDSI_BU_F(String s) {
if (!s.trim().isEmpty()) {
BONDSI_BU_F = Byte.parseByte(s);
} else {
BONDSI_BU_F = Byte.MIN_VALUE;
}
}

protected final void initBONDSI_BU_I(String s) {
if (!s.trim().isEmpty()) {
BONDSI_BU_I = Double.parseDouble(s);
} else {
BONDSI_BU_I = Double.NaN;
}
}

protected final void initBONDSI_BU_O(String s) {
if (!s.trim().isEmpty()) {
BONDSI_BU_O = Short.parseShort(s);
} else {
BONDSI_BU_O = Short.MIN_VALUE;
}
}

protected final void initBONDSI_BU_T(String s) {
if (!s.trim().isEmpty()) {
BONDSI_BU_T = Short.parseShort(s);
} else {
BONDSI_BU_T = Short.MIN_VALUE;
}
}

protected final void initBONDS_BU_F(String s) {
if (!s.trim().isEmpty()) {
BONDS_BU_F = Byte.parseByte(s);
} else {
BONDS_BU_F = Byte.MIN_VALUE;
}
}

protected final void initBONDS_BU_I(String s) {
if (!s.trim().isEmpty()) {
BONDS_BU_I = Integer.parseInt(s);
} else {
BONDS_BU_I = Integer.MIN_VALUE;
}
}

protected final void initBONDS_BU_O(String s) {
if (!s.trim().isEmpty()) {
BONDS_BU_O = Short.parseShort(s);
} else {
BONDS_BU_O = Short.MIN_VALUE;
}
}

protected final void initBONDS_BU_T(String s) {
if (!s.trim().isEmpty()) {
BONDS_BU_T = Short.parseShort(s);
} else {
BONDS_BU_T = Short.MIN_VALUE;
}
}

protected final void initBUEQ(String s) {
if (!s.trim().isEmpty()) {
BUEQ = Double.parseDouble(s);
} else {
BUEQ = Double.NaN;
}
}

protected final void initBUHEAD(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
BUHEAD = false;
}
}

protected final void initBUNO(String s) {
if (!s.trim().isEmpty()) {
BUNO = Byte.parseByte(s);
} else {
BUNO = Byte.MIN_VALUE;
}
}

protected final void initBUSV_BU_F(String s) {
if (!s.trim().isEmpty()) {
BUSV_BU_F = Byte.parseByte(s);
} else {
BUSV_BU_F = Byte.MIN_VALUE;
}
}

protected final void initBUSV_BU_I(String s) {
if (!s.trim().isEmpty()) {
BUSV_BU_I = Double.parseDouble(s);
} else {
BUSV_BU_I = Double.NaN;
}
}

protected final void initBUSV_BU_O(String s) {
if (!s.trim().isEmpty()) {
BUSV_BU_O = Short.parseShort(s);
} else {
BUSV_BU_O = Short.MIN_VALUE;
}
}

protected final void initBUSV_BU_T(String s) {
if (!s.trim().isEmpty()) {
BUSV_BU_T = Short.parseShort(s);
} else {
BUSV_BU_T = Short.MIN_VALUE;
}
}

protected final void initBUSV_P_F(String s) {
if (!s.trim().isEmpty()) {
BUSV_P_F = Byte.parseByte(s);
} else {
BUSV_P_F = Byte.MIN_VALUE;
}
}

protected final void initBUSV_P_I(String s) {
if (!s.trim().isEmpty()) {
BUSV_P_I = Double.parseDouble(s);
} else {
BUSV_P_I = Double.NaN;
}
}

protected final void initBUSV_P_O(String s) {
if (!s.trim().isEmpty()) {
BUSV_P_O = Short.parseShort(s);
} else {
BUSV_P_O = Short.MIN_VALUE;
}
}

protected final void initBUSV_P_T(String s) {
if (!s.trim().isEmpty()) {
BUSV_P_T = Short.parseShort(s);
} else {
BUSV_P_T = Short.MIN_VALUE;
}
}

protected final void initBUSV_R_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
BUSV_R_F = false;
}
}

protected final void initBUSV_R_I(String s) {
if (!s.trim().isEmpty()) {
BUSV_R_I = Double.parseDouble(s);
} else {
BUSV_R_I = Double.NaN;
}
}

protected final void initBUSV_R_O(String s) {
if (!s.trim().isEmpty()) {
BUSV_R_O = Short.parseShort(s);
} else {
BUSV_R_O = Short.MIN_VALUE;
}
}

protected final void initBUSV_R_T(String s) {
if (!s.trim().isEmpty()) {
BUSV_R_T = Short.parseShort(s);
} else {
BUSV_R_T = Short.MIN_VALUE;
}
}

protected final void initBUTYPE(String s) {
if (!s.trim().isEmpty()) {
BUTYPE = Byte.parseByte(s);
} else {
BUTYPE = Byte.MIN_VALUE;
}
}

protected final void initCASHISA_BU_F(String s) {
if (!s.trim().isEmpty()) {
CASHISA_BU_F = Byte.parseByte(s);
} else {
CASHISA_BU_F = Byte.MIN_VALUE;
}
}

protected final void initCASHISA_BU_I(String s) {
if (!s.trim().isEmpty()) {
CASHISA_BU_I = Integer.parseInt(s);
} else {
CASHISA_BU_I = Integer.MIN_VALUE;
}
}

protected final void initCASHISA_BU_O(String s) {
if (!s.trim().isEmpty()) {
CASHISA_BU_O = Short.parseShort(s);
} else {
CASHISA_BU_O = Short.MIN_VALUE;
}
}

protected final void initCASHISA_BU_T(String s) {
if (!s.trim().isEmpty()) {
CASHISA_BU_T = Short.parseShort(s);
} else {
CASHISA_BU_T = Short.MIN_VALUE;
}
}

protected final void initCB_P_F(String s) {
if (!s.trim().isEmpty()) {
CB_P_F = Byte.parseByte(s);
} else {
CB_P_F = Byte.MIN_VALUE;
}
}

protected final void initCB_P_I(String s) {
if (!s.trim().isEmpty()) {
CB_P_I = Double.parseDouble(s);
} else {
CB_P_I = Double.NaN;
}
}

protected final void initCB_P_O(String s) {
if (!s.trim().isEmpty()) {
CB_P_O = Short.parseShort(s);
} else {
CB_P_O = Short.MIN_VALUE;
}
}

protected final void initCB_P_T(String s) {
if (!s.trim().isEmpty()) {
CB_P_T = Short.parseShort(s);
} else {
CB_P_T = Short.MIN_VALUE;
}
}

protected final void initCB_R_F(String s) {
if (!s.trim().isEmpty()) {
CB_R_F = Byte.parseByte(s);
} else {
CB_R_F = Byte.MIN_VALUE;
}
}

protected final void initCB_R_I(String s) {
if (!s.trim().isEmpty()) {
CB_R_I = Double.parseDouble(s);
} else {
CB_R_I = Double.NaN;
}
}

protected final void initCB_R_O(String s) {
if (!s.trim().isEmpty()) {
CB_R_O = Short.parseShort(s);
} else {
CB_R_O = Short.MIN_VALUE;
}
}

protected final void initCB_R_T(String s) {
if (!s.trim().isEmpty()) {
CB_R_T = Short.parseShort(s);
} else {
CB_R_T = Short.MIN_VALUE;
}
}

protected final void initCCARD_BU_F(String s) {
if (!s.trim().isEmpty()) {
CCARD_BU_F = Byte.parseByte(s);
} else {
CCARD_BU_F = Byte.MIN_VALUE;
}
}

protected final void initCCARD_BU_I(String s) {
if (!s.trim().isEmpty()) {
CCARD_BU_I = Integer.parseInt(s);
} else {
CCARD_BU_I = Integer.MIN_VALUE;
}
}

protected final void initCCARD_BU_O(String s) {
if (!s.trim().isEmpty()) {
CCARD_BU_O = Short.parseShort(s);
} else {
CCARD_BU_O = Short.MIN_VALUE;
}
}

protected final void initCCARD_BU_T(String s) {
if (!s.trim().isEmpty()) {
CCARD_BU_T = Short.parseShort(s);
} else {
CCARD_BU_T = Short.MIN_VALUE;
}
}

protected final void initCESD_NA(String s) {
if (!s.trim().isEmpty()) {
CESD_NA = Byte.parseByte(s);
} else {
CESD_NA = Byte.MIN_VALUE;
}
}

protected final void initCESD_SC(String s) {
if (!s.trim().isEmpty()) {
CESD_SC = Byte.parseByte(s);
} else {
CESD_SC = Byte.MIN_VALUE;
}
}

protected final void initCFDATD(String s) {
if (!s.trim().isEmpty()) {
CFDATD = Byte.parseByte(s);
} else {
CFDATD = Byte.MIN_VALUE;
}
}

protected final void initCFDATM(String s) {
if (!s.trim().isEmpty()) {
CFDATM = Byte.parseByte(s);
} else {
CFDATM = Byte.MIN_VALUE;
}
}

protected final void initCFDATY(String s) {
if (!s.trim().isEmpty()) {
CFDATY = Byte.parseByte(s);
} else {
CFDATY = Byte.MIN_VALUE;
}
}

protected final void initCFDAY(String s) {
if (!s.trim().isEmpty()) {
CFDAY = Byte.parseByte(s);
} else {
CFDAY = Byte.MIN_VALUE;
}
}

protected final void initCFDSCR(String s) {
if (!s.trim().isEmpty()) {
CFDSCR = Byte.parseByte(s);
} else {
CFDSCR = Byte.MIN_VALUE;
}
}

protected final void initCFIMP(String s) {
if (!s.trim().isEmpty()) {
CFIMP = Byte.parseByte(s);
} else {
CFIMP = Byte.MIN_VALUE;
}
}

protected final void initCFLISD(String s) {
if (!s.trim().isEmpty()) {
CFLISD = Byte.parseByte(s);
} else {
CFLISD = Byte.MIN_VALUE;
}
}

protected final void initCFLISEN(String s) {
if (!s.trim().isEmpty()) {
CFLISEN = Byte.parseByte(s);
} else {
CFLISEN = Byte.MIN_VALUE;
}
}

protected final void initCFTEST(String s) {
if (!s.trim().isEmpty()) {
CFTEST = Byte.parseByte(s);
} else {
CFTEST = Byte.MIN_VALUE;
}
}

protected final void initCFWRDS(String s) {
if (!s.trim().isEmpty()) {
CFWRDS = Byte.parseByte(s);
} else {
CFWRDS = Byte.MIN_VALUE;
}
}

protected final void initCHAGE1(String s) {
if (!s.trim().isEmpty()) {
CHAGE1 = Byte.parseByte(s);
} else {
CHAGE1 = Byte.MIN_VALUE;
}
}

protected final void initCHAGE10(String s) {
if (!s.trim().isEmpty()) {
CHAGE10 = Byte.parseByte(s);
} else {
CHAGE10 = Byte.MIN_VALUE;
}
}

protected final void initCHAGE11(String s) {
if (!s.trim().isEmpty()) {
CHAGE11 = Byte.parseByte(s);
} else {
CHAGE11 = Byte.MIN_VALUE;
}
}

protected final void initCHAGE12(String s) {
if (!s.trim().isEmpty()) {
CHAGE12 = Byte.parseByte(s);
} else {
CHAGE12 = Byte.MIN_VALUE;
}
}

protected final void initCHAGE13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHAGE13 = false;
}
}

protected final void initCHAGE14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHAGE14 = false;
}
}

protected final void initCHAGE15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHAGE15 = false;
}
}

protected final void initCHAGE16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHAGE16 = false;
}
}

protected final void initCHAGE2(String s) {
if (!s.trim().isEmpty()) {
CHAGE2 = Byte.parseByte(s);
} else {
CHAGE2 = Byte.MIN_VALUE;
}
}

protected final void initCHAGE3(String s) {
if (!s.trim().isEmpty()) {
CHAGE3 = Byte.parseByte(s);
} else {
CHAGE3 = Byte.MIN_VALUE;
}
}

protected final void initCHAGE4(String s) {
if (!s.trim().isEmpty()) {
CHAGE4 = Byte.parseByte(s);
} else {
CHAGE4 = Byte.MIN_VALUE;
}
}

protected final void initCHAGE5(String s) {
if (!s.trim().isEmpty()) {
CHAGE5 = Byte.parseByte(s);
} else {
CHAGE5 = Byte.MIN_VALUE;
}
}

protected final void initCHAGE6(String s) {
if (!s.trim().isEmpty()) {
CHAGE6 = Byte.parseByte(s);
} else {
CHAGE6 = Byte.MIN_VALUE;
}
}

protected final void initCHAGE7(String s) {
if (!s.trim().isEmpty()) {
CHAGE7 = Byte.parseByte(s);
} else {
CHAGE7 = Byte.MIN_VALUE;
}
}

protected final void initCHAGE8(String s) {
if (!s.trim().isEmpty()) {
CHAGE8 = Byte.parseByte(s);
} else {
CHAGE8 = Byte.MIN_VALUE;
}
}

protected final void initCHAGE9(String s) {
if (!s.trim().isEmpty()) {
CHAGE9 = Byte.parseByte(s);
} else {
CHAGE9 = Byte.MIN_VALUE;
}
}

protected final void initCHOUTHH(String s) {
if (!s.trim().isEmpty()) {
CHOUTHH = Byte.parseByte(s);
} else {
CHOUTHH = Byte.MIN_VALUE;
}
}

protected final void initCHSEX1(String s) {
if (!s.trim().isEmpty()) {
CHSEX1 = Byte.parseByte(s);
} else {
CHSEX1 = Byte.MIN_VALUE;
}
}

protected final void initCHSEX10(String s) {
if (!s.trim().isEmpty()) {
CHSEX10 = Byte.parseByte(s);
} else {
CHSEX10 = Byte.MIN_VALUE;
}
}

protected final void initCHSEX11(String s) {
if (!s.trim().isEmpty()) {
CHSEX11 = Byte.parseByte(s);
} else {
CHSEX11 = Byte.MIN_VALUE;
}
}

protected final void initCHSEX12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHSEX12 = false;
}
}

protected final void initCHSEX13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHSEX13 = false;
}
}

protected final void initCHSEX14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHSEX14 = false;
}
}

protected final void initCHSEX15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHSEX15 = false;
}
}

protected final void initCHSEX16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHSEX16 = false;
}
}

protected final void initCHSEX2(String s) {
if (!s.trim().isEmpty()) {
CHSEX2 = Byte.parseByte(s);
} else {
CHSEX2 = Byte.MIN_VALUE;
}
}

protected final void initCHSEX3(String s) {
if (!s.trim().isEmpty()) {
CHSEX3 = Byte.parseByte(s);
} else {
CHSEX3 = Byte.MIN_VALUE;
}
}

protected final void initCHSEX4(String s) {
if (!s.trim().isEmpty()) {
CHSEX4 = Byte.parseByte(s);
} else {
CHSEX4 = Byte.MIN_VALUE;
}
}

protected final void initCHSEX5(String s) {
if (!s.trim().isEmpty()) {
CHSEX5 = Byte.parseByte(s);
} else {
CHSEX5 = Byte.MIN_VALUE;
}
}

protected final void initCHSEX6(String s) {
if (!s.trim().isEmpty()) {
CHSEX6 = Byte.parseByte(s);
} else {
CHSEX6 = Byte.MIN_VALUE;
}
}

protected final void initCHSEX7(String s) {
if (!s.trim().isEmpty()) {
CHSEX7 = Byte.parseByte(s);
} else {
CHSEX7 = Byte.MIN_VALUE;
}
}

protected final void initCHSEX8(String s) {
if (!s.trim().isEmpty()) {
CHSEX8 = Byte.parseByte(s);
} else {
CHSEX8 = Byte.MIN_VALUE;
}
}

protected final void initCHSEX9(String s) {
if (!s.trim().isEmpty()) {
CHSEX9 = Byte.parseByte(s);
} else {
CHSEX9 = Byte.MIN_VALUE;
}
}

protected final void initCHSTAT1(String s) {
if (!s.trim().isEmpty()) {
CHSTAT1 = Byte.parseByte(s);
} else {
CHSTAT1 = Byte.MIN_VALUE;
}
}

protected final void initCHSTAT10(String s) {
if (!s.trim().isEmpty()) {
CHSTAT10 = Byte.parseByte(s);
} else {
CHSTAT10 = Byte.MIN_VALUE;
}
}

protected final void initCHSTAT11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHSTAT11 = false;
}
}

protected final void initCHSTAT12(String s) {
if (!s.trim().isEmpty()) {
CHSTAT12 = Byte.parseByte(s);
} else {
CHSTAT12 = Byte.MIN_VALUE;
}
}

protected final void initCHSTAT13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHSTAT13 = false;
}
}

protected final void initCHSTAT14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHSTAT14 = false;
}
}

protected final void initCHSTAT15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHSTAT15 = false;
}
}

protected final void initCHSTAT16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHSTAT16 = false;
}
}

protected final void initCHSTAT2(String s) {
if (!s.trim().isEmpty()) {
CHSTAT2 = Byte.parseByte(s);
} else {
CHSTAT2 = Byte.MIN_VALUE;
}
}

protected final void initCHSTAT3(String s) {
if (!s.trim().isEmpty()) {
CHSTAT3 = Byte.parseByte(s);
} else {
CHSTAT3 = Byte.MIN_VALUE;
}
}

protected final void initCHSTAT4(String s) {
if (!s.trim().isEmpty()) {
CHSTAT4 = Byte.parseByte(s);
} else {
CHSTAT4 = Byte.MIN_VALUE;
}
}

protected final void initCHSTAT5(String s) {
if (!s.trim().isEmpty()) {
CHSTAT5 = Byte.parseByte(s);
} else {
CHSTAT5 = Byte.MIN_VALUE;
}
}

protected final void initCHSTAT6(String s) {
if (!s.trim().isEmpty()) {
CHSTAT6 = Byte.parseByte(s);
} else {
CHSTAT6 = Byte.MIN_VALUE;
}
}

protected final void initCHSTAT7(String s) {
if (!s.trim().isEmpty()) {
CHSTAT7 = Byte.parseByte(s);
} else {
CHSTAT7 = Byte.MIN_VALUE;
}
}

protected final void initCHSTAT8(String s) {
if (!s.trim().isEmpty()) {
CHSTAT8 = Byte.parseByte(s);
} else {
CHSTAT8 = Byte.MIN_VALUE;
}
}

protected final void initCHSTAT9(String s) {
if (!s.trim().isEmpty()) {
CHSTAT9 = Byte.parseByte(s);
} else {
CHSTAT9 = Byte.MIN_VALUE;
}
}

protected final void initCHTYPE1(String s) {
if (!s.trim().isEmpty()) {
CHTYPE1 = Byte.parseByte(s);
} else {
CHTYPE1 = Byte.MIN_VALUE;
}
}

protected final void initCHTYPE10(String s) {
if (!s.trim().isEmpty()) {
CHTYPE10 = Byte.parseByte(s);
} else {
CHTYPE10 = Byte.MIN_VALUE;
}
}

protected final void initCHTYPE11(String s) {
if (!s.trim().isEmpty()) {
CHTYPE11 = Byte.parseByte(s);
} else {
CHTYPE11 = Byte.MIN_VALUE;
}
}

protected final void initCHTYPE12(String s) {
if (!s.trim().isEmpty()) {
CHTYPE12 = Byte.parseByte(s);
} else {
CHTYPE12 = Byte.MIN_VALUE;
}
}

protected final void initCHTYPE13(String s) {
if (!s.trim().isEmpty()) {
CHTYPE13 = Byte.parseByte(s);
} else {
CHTYPE13 = Byte.MIN_VALUE;
}
}

protected final void initCHTYPE14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHTYPE14 = false;
}
}

protected final void initCHTYPE15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHTYPE15 = false;
}
}

protected final void initCHTYPE16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
CHTYPE16 = false;
}
}

protected final void initCHTYPE2(String s) {
if (!s.trim().isEmpty()) {
CHTYPE2 = Byte.parseByte(s);
} else {
CHTYPE2 = Byte.MIN_VALUE;
}
}

protected final void initCHTYPE3(String s) {
if (!s.trim().isEmpty()) {
CHTYPE3 = Byte.parseByte(s);
} else {
CHTYPE3 = Byte.MIN_VALUE;
}
}

protected final void initCHTYPE4(String s) {
if (!s.trim().isEmpty()) {
CHTYPE4 = Byte.parseByte(s);
} else {
CHTYPE4 = Byte.MIN_VALUE;
}
}

protected final void initCHTYPE5(String s) {
if (!s.trim().isEmpty()) {
CHTYPE5 = Byte.parseByte(s);
} else {
CHTYPE5 = Byte.MIN_VALUE;
}
}

protected final void initCHTYPE6(String s) {
if (!s.trim().isEmpty()) {
CHTYPE6 = Byte.parseByte(s);
} else {
CHTYPE6 = Byte.MIN_VALUE;
}
}

protected final void initCHTYPE7(String s) {
if (!s.trim().isEmpty()) {
CHTYPE7 = Byte.parseByte(s);
} else {
CHTYPE7 = Byte.MIN_VALUE;
}
}

protected final void initCHTYPE8(String s) {
if (!s.trim().isEmpty()) {
CHTYPE8 = Byte.parseByte(s);
} else {
CHTYPE8 = Byte.MIN_VALUE;
}
}

protected final void initCHTYPE9(String s) {
if (!s.trim().isEmpty()) {
CHTYPE9 = Byte.parseByte(s);
} else {
CHTYPE9 = Byte.MIN_VALUE;
}
}

protected final void initCLOTHESL(String s) {
if (!s.trim().isEmpty()) {
CLOTHESL = Double.parseDouble(s);
} else {
CLOTHESL = Double.NaN;
}
}

protected final void initCLOTHEST(String s) {
if (!s.trim().isEmpty()) {
CLOTHEST = Byte.parseByte(s);
} else {
CLOTHEST = Byte.MIN_VALUE;
}
}

protected final void initCLOTHESU(String s) {
if (!s.trim().isEmpty()) {
CLOTHESU = Double.parseDouble(s);
} else {
CLOTHESU = Double.NaN;
}
}

protected final void initCOALL(String s) {
if (!s.trim().isEmpty()) {
COALL = Double.parseDouble(s);
} else {
COALL = Double.NaN;
}
}

protected final void initCOALT(String s) {
if (!s.trim().isEmpty()) {
COALT = Byte.parseByte(s);
} else {
COALT = Byte.MIN_VALUE;
}
}

protected final void initCOALU(String s) {
if (!s.trim().isEmpty()) {
COALU = Double.parseDouble(s);
} else {
COALU = Double.NaN;
}
}

protected final void initCOUPID(String s) {
if (!s.trim().isEmpty()) {
COUPID = Short.parseShort(s);
} else {
COUPID = Short.MIN_VALUE;
}
}

protected final void initCOUPID_INST(String s) {
if (!s.trim().isEmpty()) {
COUPID_INST = Short.parseShort(s);
} else {
COUPID_INST = Short.MIN_VALUE;
}
}

protected final void initCOUPLE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
COUPLE = false;
}
}

protected final void initCPID(String s) {
if (!s.trim().isEmpty()) {
CPID = Byte.parseByte(s);
} else {
CPID = Byte.MIN_VALUE;
}
}

protected final void initDEBT_BU_F(String s) {
if (!s.trim().isEmpty()) {
DEBT_BU_F = Byte.parseByte(s);
} else {
DEBT_BU_F = Byte.MIN_VALUE;
}
}

protected final void initDEBT_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
DEBT_BU_NI2 = Short.parseShort(s);
} else {
DEBT_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initDEBT_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
DEBT_BU_NI3 = Short.parseShort(s);
} else {
DEBT_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initDEBT_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
DEBT_BU_NI4 = Short.parseShort(s);
} else {
DEBT_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initDEBT_BU_S(String s) {
if (!s.trim().isEmpty()) {
DEBT_BU_S = Integer.parseInt(s);
} else {
DEBT_BU_S = Integer.MIN_VALUE;
}
}

protected final void initDEBT_BU_T(String s) {
if (!s.trim().isEmpty()) {
DEBT_BU_T = Short.parseShort(s);
} else {
DEBT_BU_T = Short.MIN_VALUE;
}
}

protected final void initDHC(String s) {
if (!s.trim().isEmpty()) {
DHC = Byte.parseByte(s);
} else {
DHC = Byte.MIN_VALUE;
}
}

protected final void initDHC10(String s) {
if (!s.trim().isEmpty()) {
DHC10 = Byte.parseByte(s);
} else {
DHC10 = Byte.MIN_VALUE;
}
}

protected final void initDHC11(String s) {
if (!s.trim().isEmpty()) {
DHC11 = Byte.parseByte(s);
} else {
DHC11 = Byte.MIN_VALUE;
}
}

protected final void initDHC12(String s) {
if (!s.trim().isEmpty()) {
DHC12 = Byte.parseByte(s);
} else {
DHC12 = Byte.MIN_VALUE;
}
}

protected final void initDHC13(String s) {
if (!s.trim().isEmpty()) {
DHC13 = Byte.parseByte(s);
} else {
DHC13 = Byte.MIN_VALUE;
}
}

protected final void initDHC2(String s) {
if (!s.trim().isEmpty()) {
DHC2 = Byte.parseByte(s);
} else {
DHC2 = Byte.MIN_VALUE;
}
}

protected final void initDHC3(String s) {
if (!s.trim().isEmpty()) {
DHC3 = Byte.parseByte(s);
} else {
DHC3 = Byte.MIN_VALUE;
}
}

protected final void initDHC4(String s) {
if (!s.trim().isEmpty()) {
DHC4 = Byte.parseByte(s);
} else {
DHC4 = Byte.MIN_VALUE;
}
}

protected final void initDHC5(String s) {
if (!s.trim().isEmpty()) {
DHC5 = Byte.parseByte(s);
} else {
DHC5 = Byte.MIN_VALUE;
}
}

protected final void initDHC6(String s) {
if (!s.trim().isEmpty()) {
DHC6 = Byte.parseByte(s);
} else {
DHC6 = Byte.MIN_VALUE;
}
}

protected final void initDHC7(String s) {
if (!s.trim().isEmpty()) {
DHC7 = Byte.parseByte(s);
} else {
DHC7 = Byte.MIN_VALUE;
}
}

protected final void initDHC8(String s) {
if (!s.trim().isEmpty()) {
DHC8 = Byte.parseByte(s);
} else {
DHC8 = Byte.MIN_VALUE;
}
}

protected final void initDHC9(String s) {
if (!s.trim().isEmpty()) {
DHC9 = Byte.parseByte(s);
} else {
DHC9 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG(String s) {
if (!s.trim().isEmpty()) {
DHCAG = Byte.parseByte(s);
} else {
DHCAG = Byte.MIN_VALUE;
}
}

protected final void initDHCAG10(String s) {
if (!s.trim().isEmpty()) {
DHCAG10 = Byte.parseByte(s);
} else {
DHCAG10 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG11(String s) {
if (!s.trim().isEmpty()) {
DHCAG11 = Byte.parseByte(s);
} else {
DHCAG11 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG12(String s) {
if (!s.trim().isEmpty()) {
DHCAG12 = Byte.parseByte(s);
} else {
DHCAG12 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG13(String s) {
if (!s.trim().isEmpty()) {
DHCAG13 = Byte.parseByte(s);
} else {
DHCAG13 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG2(String s) {
if (!s.trim().isEmpty()) {
DHCAG2 = Byte.parseByte(s);
} else {
DHCAG2 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG3(String s) {
if (!s.trim().isEmpty()) {
DHCAG3 = Byte.parseByte(s);
} else {
DHCAG3 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG4(String s) {
if (!s.trim().isEmpty()) {
DHCAG4 = Byte.parseByte(s);
} else {
DHCAG4 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG5(String s) {
if (!s.trim().isEmpty()) {
DHCAG5 = Byte.parseByte(s);
} else {
DHCAG5 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG6(String s) {
if (!s.trim().isEmpty()) {
DHCAG6 = Byte.parseByte(s);
} else {
DHCAG6 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG7(String s) {
if (!s.trim().isEmpty()) {
DHCAG7 = Byte.parseByte(s);
} else {
DHCAG7 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG8(String s) {
if (!s.trim().isEmpty()) {
DHCAG8 = Byte.parseByte(s);
} else {
DHCAG8 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG9(String s) {
if (!s.trim().isEmpty()) {
DHCAG9 = Byte.parseByte(s);
} else {
DHCAG9 = Byte.MIN_VALUE;
}
}

protected final void initDHCR01(String s) {
if (!s.trim().isEmpty()) {
DHCR01 = Byte.parseByte(s);
} else {
DHCR01 = Byte.MIN_VALUE;
}
}

protected final void initDHCR02(String s) {
if (!s.trim().isEmpty()) {
DHCR02 = Byte.parseByte(s);
} else {
DHCR02 = Byte.MIN_VALUE;
}
}

protected final void initDHCR03(String s) {
if (!s.trim().isEmpty()) {
DHCR03 = Byte.parseByte(s);
} else {
DHCR03 = Byte.MIN_VALUE;
}
}

protected final void initDHCR04(String s) {
if (!s.trim().isEmpty()) {
DHCR04 = Byte.parseByte(s);
} else {
DHCR04 = Byte.MIN_VALUE;
}
}

protected final void initDHCR05(String s) {
if (!s.trim().isEmpty()) {
DHCR05 = Byte.parseByte(s);
} else {
DHCR05 = Byte.MIN_VALUE;
}
}

protected final void initDHCR06(String s) {
if (!s.trim().isEmpty()) {
DHCR06 = Byte.parseByte(s);
} else {
DHCR06 = Byte.MIN_VALUE;
}
}

protected final void initDHCR07(String s) {
if (!s.trim().isEmpty()) {
DHCR07 = Byte.parseByte(s);
} else {
DHCR07 = Byte.MIN_VALUE;
}
}

protected final void initDHCR100(String s) {
if (!s.trim().isEmpty()) {
DHCR100 = Byte.parseByte(s);
} else {
DHCR100 = Byte.MIN_VALUE;
}
}

protected final void initDHCR101(String s) {
if (!s.trim().isEmpty()) {
DHCR101 = Byte.parseByte(s);
} else {
DHCR101 = Byte.MIN_VALUE;
}
}

protected final void initDHCR102(String s) {
if (!s.trim().isEmpty()) {
DHCR102 = Byte.parseByte(s);
} else {
DHCR102 = Byte.MIN_VALUE;
}
}

protected final void initDHCR103(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DHCR103 = false;
}
}

protected final void initDHCR113(String s) {
if (!s.trim().isEmpty()) {
DHCR113 = Byte.parseByte(s);
} else {
DHCR113 = Byte.MIN_VALUE;
}
}

protected final void initDHCR114(String s) {
if (!s.trim().isEmpty()) {
DHCR114 = Byte.parseByte(s);
} else {
DHCR114 = Byte.MIN_VALUE;
}
}

protected final void initDHCR115(String s) {
if (!s.trim().isEmpty()) {
DHCR115 = Byte.parseByte(s);
} else {
DHCR115 = Byte.MIN_VALUE;
}
}

protected final void initDHCR116(String s) {
if (!s.trim().isEmpty()) {
DHCR116 = Byte.parseByte(s);
} else {
DHCR116 = Byte.MIN_VALUE;
}
}

protected final void initDHCR117(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DHCR117 = false;
}
}

protected final void initDHCR129(String s) {
if (!s.trim().isEmpty()) {
DHCR129 = Byte.parseByte(s);
} else {
DHCR129 = Byte.MIN_VALUE;
}
}

protected final void initDHCR130(String s) {
if (!s.trim().isEmpty()) {
DHCR130 = Byte.parseByte(s);
} else {
DHCR130 = Byte.MIN_VALUE;
}
}

protected final void initDHCR131(String s) {
if (!s.trim().isEmpty()) {
DHCR131 = Byte.parseByte(s);
} else {
DHCR131 = Byte.MIN_VALUE;
}
}

protected final void initDHCR132(String s) {
if (!s.trim().isEmpty()) {
DHCR132 = Byte.parseByte(s);
} else {
DHCR132 = Byte.MIN_VALUE;
}
}

protected final void initDHCR133(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DHCR133 = false;
}
}

protected final void initDHCR145(String s) {
if (!s.trim().isEmpty()) {
DHCR145 = Byte.parseByte(s);
} else {
DHCR145 = Byte.MIN_VALUE;
}
}

protected final void initDHCR146(String s) {
if (!s.trim().isEmpty()) {
DHCR146 = Byte.parseByte(s);
} else {
DHCR146 = Byte.MIN_VALUE;
}
}

protected final void initDHCR161(String s) {
if (!s.trim().isEmpty()) {
DHCR161 = Byte.parseByte(s);
} else {
DHCR161 = Byte.MIN_VALUE;
}
}

protected final void initDHCR162(String s) {
if (!s.trim().isEmpty()) {
DHCR162 = Byte.parseByte(s);
} else {
DHCR162 = Byte.MIN_VALUE;
}
}

protected final void initDHCR17(String s) {
if (!s.trim().isEmpty()) {
DHCR17 = Byte.parseByte(s);
} else {
DHCR17 = Byte.MIN_VALUE;
}
}

protected final void initDHCR177(String s) {
if (!s.trim().isEmpty()) {
DHCR177 = Byte.parseByte(s);
} else {
DHCR177 = Byte.MIN_VALUE;
}
}

protected final void initDHCR18(String s) {
if (!s.trim().isEmpty()) {
DHCR18 = Byte.parseByte(s);
} else {
DHCR18 = Byte.MIN_VALUE;
}
}

protected final void initDHCR19(String s) {
if (!s.trim().isEmpty()) {
DHCR19 = Byte.parseByte(s);
} else {
DHCR19 = Byte.MIN_VALUE;
}
}

protected final void initDHCR193(String s) {
if (!s.trim().isEmpty()) {
DHCR193 = Byte.parseByte(s);
} else {
DHCR193 = Byte.MIN_VALUE;
}
}

protected final void initDHCR20(String s) {
if (!s.trim().isEmpty()) {
DHCR20 = Byte.parseByte(s);
} else {
DHCR20 = Byte.MIN_VALUE;
}
}

protected final void initDHCR21(String s) {
if (!s.trim().isEmpty()) {
DHCR21 = Byte.parseByte(s);
} else {
DHCR21 = Byte.MIN_VALUE;
}
}

protected final void initDHCR22(String s) {
if (!s.trim().isEmpty()) {
DHCR22 = Byte.parseByte(s);
} else {
DHCR22 = Byte.MIN_VALUE;
}
}

protected final void initDHCR23(String s) {
if (!s.trim().isEmpty()) {
DHCR23 = Byte.parseByte(s);
} else {
DHCR23 = Byte.MIN_VALUE;
}
}

protected final void initDHCR33(String s) {
if (!s.trim().isEmpty()) {
DHCR33 = Byte.parseByte(s);
} else {
DHCR33 = Byte.MIN_VALUE;
}
}

protected final void initDHCR34(String s) {
if (!s.trim().isEmpty()) {
DHCR34 = Byte.parseByte(s);
} else {
DHCR34 = Byte.MIN_VALUE;
}
}

protected final void initDHCR35(String s) {
if (!s.trim().isEmpty()) {
DHCR35 = Byte.parseByte(s);
} else {
DHCR35 = Byte.MIN_VALUE;
}
}

protected final void initDHCR36(String s) {
if (!s.trim().isEmpty()) {
DHCR36 = Byte.parseByte(s);
} else {
DHCR36 = Byte.MIN_VALUE;
}
}

protected final void initDHCR37(String s) {
if (!s.trim().isEmpty()) {
DHCR37 = Byte.parseByte(s);
} else {
DHCR37 = Byte.MIN_VALUE;
}
}

protected final void initDHCR38(String s) {
if (!s.trim().isEmpty()) {
DHCR38 = Byte.parseByte(s);
} else {
DHCR38 = Byte.MIN_VALUE;
}
}

protected final void initDHCR39(String s) {
if (!s.trim().isEmpty()) {
DHCR39 = Byte.parseByte(s);
} else {
DHCR39 = Byte.MIN_VALUE;
}
}

protected final void initDHCR49(String s) {
if (!s.trim().isEmpty()) {
DHCR49 = Byte.parseByte(s);
} else {
DHCR49 = Byte.MIN_VALUE;
}
}

protected final void initDHCR50(String s) {
if (!s.trim().isEmpty()) {
DHCR50 = Byte.parseByte(s);
} else {
DHCR50 = Byte.MIN_VALUE;
}
}

protected final void initDHCR51(String s) {
if (!s.trim().isEmpty()) {
DHCR51 = Byte.parseByte(s);
} else {
DHCR51 = Byte.MIN_VALUE;
}
}

protected final void initDHCR52(String s) {
if (!s.trim().isEmpty()) {
DHCR52 = Byte.parseByte(s);
} else {
DHCR52 = Byte.MIN_VALUE;
}
}

protected final void initDHCR53(String s) {
if (!s.trim().isEmpty()) {
DHCR53 = Byte.parseByte(s);
} else {
DHCR53 = Byte.MIN_VALUE;
}
}

protected final void initDHCR54(String s) {
if (!s.trim().isEmpty()) {
DHCR54 = Byte.parseByte(s);
} else {
DHCR54 = Byte.MIN_VALUE;
}
}

protected final void initDHCR55(String s) {
if (!s.trim().isEmpty()) {
DHCR55 = Byte.parseByte(s);
} else {
DHCR55 = Byte.MIN_VALUE;
}
}

protected final void initDHCR65(String s) {
if (!s.trim().isEmpty()) {
DHCR65 = Byte.parseByte(s);
} else {
DHCR65 = Byte.MIN_VALUE;
}
}

protected final void initDHCR66(String s) {
if (!s.trim().isEmpty()) {
DHCR66 = Byte.parseByte(s);
} else {
DHCR66 = Byte.MIN_VALUE;
}
}

protected final void initDHCR67(String s) {
if (!s.trim().isEmpty()) {
DHCR67 = Byte.parseByte(s);
} else {
DHCR67 = Byte.MIN_VALUE;
}
}

protected final void initDHCR68(String s) {
if (!s.trim().isEmpty()) {
DHCR68 = Byte.parseByte(s);
} else {
DHCR68 = Byte.MIN_VALUE;
}
}

protected final void initDHCR69(String s) {
if (!s.trim().isEmpty()) {
DHCR69 = Byte.parseByte(s);
} else {
DHCR69 = Byte.MIN_VALUE;
}
}

protected final void initDHCR70(String s) {
if (!s.trim().isEmpty()) {
DHCR70 = Byte.parseByte(s);
} else {
DHCR70 = Byte.MIN_VALUE;
}
}

protected final void initDHCR71(String s) {
if (!s.trim().isEmpty()) {
DHCR71 = Byte.parseByte(s);
} else {
DHCR71 = Byte.MIN_VALUE;
}
}

protected final void initDHCR81(String s) {
if (!s.trim().isEmpty()) {
DHCR81 = Byte.parseByte(s);
} else {
DHCR81 = Byte.MIN_VALUE;
}
}

protected final void initDHCR82(String s) {
if (!s.trim().isEmpty()) {
DHCR82 = Byte.parseByte(s);
} else {
DHCR82 = Byte.MIN_VALUE;
}
}

protected final void initDHCR83(String s) {
if (!s.trim().isEmpty()) {
DHCR83 = Byte.parseByte(s);
} else {
DHCR83 = Byte.MIN_VALUE;
}
}

protected final void initDHCR84(String s) {
if (!s.trim().isEmpty()) {
DHCR84 = Byte.parseByte(s);
} else {
DHCR84 = Byte.MIN_VALUE;
}
}

protected final void initDHCR85(String s) {
if (!s.trim().isEmpty()) {
DHCR85 = Byte.parseByte(s);
} else {
DHCR85 = Byte.MIN_VALUE;
}
}

protected final void initDHCR86(String s) {
if (!s.trim().isEmpty()) {
DHCR86 = Byte.parseByte(s);
} else {
DHCR86 = Byte.MIN_VALUE;
}
}

protected final void initDHCR87(String s) {
if (!s.trim().isEmpty()) {
DHCR87 = Byte.parseByte(s);
} else {
DHCR87 = Byte.MIN_VALUE;
}
}

protected final void initDHCR97(String s) {
if (!s.trim().isEmpty()) {
DHCR97 = Byte.parseByte(s);
} else {
DHCR97 = Byte.MIN_VALUE;
}
}

protected final void initDHCR98(String s) {
if (!s.trim().isEmpty()) {
DHCR98 = Byte.parseByte(s);
} else {
DHCR98 = Byte.MIN_VALUE;
}
}

protected final void initDHCR99(String s) {
if (!s.trim().isEmpty()) {
DHCR99 = Byte.parseByte(s);
} else {
DHCR99 = Byte.MIN_VALUE;
}
}

protected final void initDHCS(String s) {
if (!s.trim().isEmpty()) {
DHCS = Byte.parseByte(s);
} else {
DHCS = Byte.MIN_VALUE;
}
}

protected final void initDHCS10(String s) {
if (!s.trim().isEmpty()) {
DHCS10 = Byte.parseByte(s);
} else {
DHCS10 = Byte.MIN_VALUE;
}
}

protected final void initDHCS11(String s) {
if (!s.trim().isEmpty()) {
DHCS11 = Byte.parseByte(s);
} else {
DHCS11 = Byte.MIN_VALUE;
}
}

protected final void initDHCS12(String s) {
if (!s.trim().isEmpty()) {
DHCS12 = Byte.parseByte(s);
} else {
DHCS12 = Byte.MIN_VALUE;
}
}

protected final void initDHCS13(String s) {
if (!s.trim().isEmpty()) {
DHCS13 = Byte.parseByte(s);
} else {
DHCS13 = Byte.MIN_VALUE;
}
}

protected final void initDHCS2(String s) {
if (!s.trim().isEmpty()) {
DHCS2 = Byte.parseByte(s);
} else {
DHCS2 = Byte.MIN_VALUE;
}
}

protected final void initDHCS3(String s) {
if (!s.trim().isEmpty()) {
DHCS3 = Byte.parseByte(s);
} else {
DHCS3 = Byte.MIN_VALUE;
}
}

protected final void initDHCS4(String s) {
if (!s.trim().isEmpty()) {
DHCS4 = Byte.parseByte(s);
} else {
DHCS4 = Byte.MIN_VALUE;
}
}

protected final void initDHCS5(String s) {
if (!s.trim().isEmpty()) {
DHCS5 = Byte.parseByte(s);
} else {
DHCS5 = Byte.MIN_VALUE;
}
}

protected final void initDHCS6(String s) {
if (!s.trim().isEmpty()) {
DHCS6 = Byte.parseByte(s);
} else {
DHCS6 = Byte.MIN_VALUE;
}
}

protected final void initDHCS7(String s) {
if (!s.trim().isEmpty()) {
DHCS7 = Byte.parseByte(s);
} else {
DHCS7 = Byte.MIN_VALUE;
}
}

protected final void initDHCS8(String s) {
if (!s.trim().isEmpty()) {
DHCS8 = Byte.parseByte(s);
} else {
DHCS8 = Byte.MIN_VALUE;
}
}

protected final void initDHCS9(String s) {
if (!s.trim().isEmpty()) {
DHCS9 = Byte.parseByte(s);
} else {
DHCS9 = Byte.MIN_VALUE;
}
}

protected final void initDHPA(String s) {
if (!s.trim().isEmpty()) {
DHPA = Byte.parseByte(s);
} else {
DHPA = Byte.MIN_VALUE;
}
}

protected final void initDHPB(String s) {
if (!s.trim().isEmpty()) {
DHPB = Byte.parseByte(s);
} else {
DHPB = Byte.MIN_VALUE;
}
}

protected final void initDHR(String s) {
if (!s.trim().isEmpty()) {
DHR = Byte.parseByte(s);
} else {
DHR = Byte.MIN_VALUE;
}
}

protected final void initDHR10(String s) {
if (!s.trim().isEmpty()) {
DHR10 = Byte.parseByte(s);
} else {
DHR10 = Byte.MIN_VALUE;
}
}

protected final void initDHR11(String s) {
if (!s.trim().isEmpty()) {
DHR11 = Byte.parseByte(s);
} else {
DHR11 = Byte.MIN_VALUE;
}
}

protected final void initDHR12(String s) {
if (!s.trim().isEmpty()) {
DHR12 = Byte.parseByte(s);
} else {
DHR12 = Byte.MIN_VALUE;
}
}

protected final void initDHR2(String s) {
if (!s.trim().isEmpty()) {
DHR2 = Byte.parseByte(s);
} else {
DHR2 = Byte.MIN_VALUE;
}
}

protected final void initDHR3(String s) {
if (!s.trim().isEmpty()) {
DHR3 = Byte.parseByte(s);
} else {
DHR3 = Byte.MIN_VALUE;
}
}

protected final void initDHR4(String s) {
if (!s.trim().isEmpty()) {
DHR4 = Byte.parseByte(s);
} else {
DHR4 = Byte.MIN_VALUE;
}
}

protected final void initDHR5(String s) {
if (!s.trim().isEmpty()) {
DHR5 = Byte.parseByte(s);
} else {
DHR5 = Byte.MIN_VALUE;
}
}

protected final void initDHR6(String s) {
if (!s.trim().isEmpty()) {
DHR6 = Byte.parseByte(s);
} else {
DHR6 = Byte.MIN_VALUE;
}
}

protected final void initDHR7(String s) {
if (!s.trim().isEmpty()) {
DHR7 = Byte.parseByte(s);
} else {
DHR7 = Byte.MIN_VALUE;
}
}

protected final void initDHR8(String s) {
if (!s.trim().isEmpty()) {
DHR8 = Byte.parseByte(s);
} else {
DHR8 = Byte.MIN_VALUE;
}
}

protected final void initDHR9(String s) {
if (!s.trim().isEmpty()) {
DHR9 = Byte.parseByte(s);
} else {
DHR9 = Byte.MIN_VALUE;
}
}

protected final void initDHSAMEH(String s) {
if (!s.trim().isEmpty()) {
DHSAMEH = Byte.parseByte(s);
} else {
DHSAMEH = Byte.MIN_VALUE;
}
}

protected final void initDIANF(String s) {
if (!s.trim().isEmpty()) {
DIANF = Byte.parseByte(s);
} else {
DIANF = Byte.MIN_VALUE;
}
}

protected final void initDIANM(String s) {
if (!s.trim().isEmpty()) {
DIANM = Byte.parseByte(s);
} else {
DIANM = Byte.MIN_VALUE;
}
}

protected final void initDICDNF(String s) {
if (!s.trim().isEmpty()) {
DICDNF = Byte.parseByte(s);
} else {
DICDNF = Byte.MIN_VALUE;
}
}

protected final void initDICDNM(String s) {
if (!s.trim().isEmpty()) {
DICDNM = Byte.parseByte(s);
} else {
DICDNM = Byte.MIN_VALUE;
}
}

protected final void initDIED_P(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
DIED_P = false;
}
}

protected final void initDIFAD(String s) {
if (!s.trim().isEmpty()) {
DIFAD = Byte.parseByte(s);
} else {
DIFAD = Byte.MIN_VALUE;
}
}

protected final void initDIFJOB(String s) {
if (!s.trim().isEmpty()) {
DIFJOB = Byte.parseByte(s);
} else {
DIFJOB = Byte.MIN_VALUE;
}
}

protected final void initDIFJOBM(String s) {
if (!s.trim().isEmpty()) {
DIFJOBM = Byte.parseByte(s);
} else {
DIFJOBM = Byte.MIN_VALUE;
}
}

protected final void initDIGNMY(String s) {
if (!s.trim().isEmpty()) {
DIGNMY = Byte.parseByte(s);
} else {
DIGNMY = Byte.MIN_VALUE;
}
}

protected final void initDIGRAN(String s) {
if (!s.trim().isEmpty()) {
DIGRAN = Byte.parseByte(s);
} else {
DIGRAN = Byte.MIN_VALUE;
}
}

protected final void initDIINT(String s) {
if (!s.trim().isEmpty()) {
DIINT = Byte.parseByte(s);
} else {
DIINT = Byte.MIN_VALUE;
}
}

protected final void initDIKLIV(String s) {
if (!s.trim().isEmpty()) {
DIKLIV = Byte.parseByte(s);
} else {
DIKLIV = Byte.MIN_VALUE;
}
}

protected final void initDIKLIVM(String s) {
if (!s.trim().isEmpty()) {
DIKLIVM = Byte.parseByte(s);
} else {
DIKLIVM = Byte.MIN_VALUE;
}
}

protected final void initDIMAD(String s) {
if (!s.trim().isEmpty()) {
DIMAD = Byte.parseByte(s);
} else {
DIMAD = Byte.MIN_VALUE;
}
}

protected final void initDINFA(String s) {
if (!s.trim().isEmpty()) {
DINFA = Byte.parseByte(s);
} else {
DINFA = Byte.MIN_VALUE;
}
}

protected final void initDINMA(String s) {
if (!s.trim().isEmpty()) {
DINMA = Byte.parseByte(s);
} else {
DINMA = Byte.MIN_VALUE;
}
}

protected final void initDIPRE(String s) {
if (!s.trim().isEmpty()) {
DIPRE = Byte.parseByte(s);
} else {
DIPRE = Byte.MIN_VALUE;
}
}

protected final void initDISIB(String s) {
if (!s.trim().isEmpty()) {
DISIB = Byte.parseByte(s);
} else {
DISIB = Byte.MIN_VALUE;
}
}

protected final void initDLA_P_F(String s) {
if (!s.trim().isEmpty()) {
DLA_P_F = Byte.parseByte(s);
} else {
DLA_P_F = Byte.MIN_VALUE;
}
}

protected final void initDLA_P_I(String s) {
if (!s.trim().isEmpty()) {
DLA_P_I = Double.parseDouble(s);
} else {
DLA_P_I = Double.NaN;
}
}

protected final void initDLA_P_O(String s) {
if (!s.trim().isEmpty()) {
DLA_P_O = Short.parseShort(s);
} else {
DLA_P_O = Short.MIN_VALUE;
}
}

protected final void initDLA_P_T(String s) {
if (!s.trim().isEmpty()) {
DLA_P_T = Short.parseShort(s);
} else {
DLA_P_T = Short.MIN_VALUE;
}
}

protected final void initDLA_R_F(String s) {
if (!s.trim().isEmpty()) {
DLA_R_F = Byte.parseByte(s);
} else {
DLA_R_F = Byte.MIN_VALUE;
}
}

protected final void initDLA_R_I(String s) {
if (!s.trim().isEmpty()) {
DLA_R_I = Double.parseDouble(s);
} else {
DLA_R_I = Double.NaN;
}
}

protected final void initDLA_R_O(String s) {
if (!s.trim().isEmpty()) {
DLA_R_O = Short.parseShort(s);
} else {
DLA_R_O = Short.MIN_VALUE;
}
}

protected final void initDLA_R_T(String s) {
if (!s.trim().isEmpty()) {
DLA_R_T = Short.parseShort(s);
} else {
DLA_R_T = Short.MIN_VALUE;
}
}

protected final void initECPOS(String s) {
if (!s.trim().isEmpty()) {
ECPOS = Byte.parseByte(s);
} else {
ECPOS = Byte.MIN_VALUE;
}
}

protected final void initEDEND(String s) {
if (!s.trim().isEmpty()) {
EDEND = Byte.parseByte(s);
} else {
EDEND = Byte.MIN_VALUE;
}
}

protected final void initEDQUAL(String s) {
if (!s.trim().isEmpty()) {
EDQUAL = Byte.parseByte(s);
} else {
EDQUAL = Byte.MIN_VALUE;
}
}

protected final void initELECL(String s) {
if (!s.trim().isEmpty()) {
ELECL = Double.parseDouble(s);
} else {
ELECL = Double.NaN;
}
}

protected final void initELECMETH(String s) {
if (!s.trim().isEmpty()) {
ELECMETH = Byte.parseByte(s);
} else {
ELECMETH = Byte.MIN_VALUE;
}
}

protected final void initELECT(String s) {
if (!s.trim().isEmpty()) {
ELECT = Byte.parseByte(s);
} else {
ELECT = Byte.MIN_VALUE;
}
}

protected final void initELECU(String s) {
if (!s.trim().isEmpty()) {
ELECU = Double.parseDouble(s);
} else {
ELECU = Double.NaN;
}
}

protected final void initELSA(String s) {
if (!s.trim().isEmpty()) {
ELSA = Byte.parseByte(s);
} else {
ELSA = Byte.MIN_VALUE;
}
}

protected final void initELSA_P(String s) {
if (!s.trim().isEmpty()) {
ELSA_P = Byte.parseByte(s);
} else {
ELSA_P = Byte.MIN_VALUE;
}
}

protected final void initEMPINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
EMPINC_BU_F = Byte.parseByte(s);
} else {
EMPINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initEMPINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
EMPINC_BU_NI2 = Short.parseShort(s);
} else {
EMPINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initEMPINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
EMPINC_BU_NI3 = Short.parseShort(s);
} else {
EMPINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initEMPINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
EMPINC_BU_NI4 = Short.parseShort(s);
} else {
EMPINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initEMPINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
EMPINC_BU_S = Double.parseDouble(s);
} else {
EMPINC_BU_S = Double.NaN;
}
}

protected final void initEMPINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
EMPINC_BU_T = Short.parseShort(s);
} else {
EMPINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initEMPINC_P_F(String s) {
if (!s.trim().isEmpty()) {
EMPINC_P_F = Byte.parseByte(s);
} else {
EMPINC_P_F = Byte.MIN_VALUE;
}
}

protected final void initEMPINC_P_NI2(String s) {
if (!s.trim().isEmpty()) {
EMPINC_P_NI2 = Short.parseShort(s);
} else {
EMPINC_P_NI2 = Short.MIN_VALUE;
}
}

protected final void initEMPINC_P_NI3(String s) {
if (!s.trim().isEmpty()) {
EMPINC_P_NI3 = Short.parseShort(s);
} else {
EMPINC_P_NI3 = Short.MIN_VALUE;
}
}

protected final void initEMPINC_P_NI4(String s) {
if (!s.trim().isEmpty()) {
EMPINC_P_NI4 = Short.parseShort(s);
} else {
EMPINC_P_NI4 = Short.MIN_VALUE;
}
}

protected final void initEMPINC_P_S(String s) {
if (!s.trim().isEmpty()) {
EMPINC_P_S = Double.parseDouble(s);
} else {
EMPINC_P_S = Double.NaN;
}
}

protected final void initEMPINC_P_T(String s) {
if (!s.trim().isEmpty()) {
EMPINC_P_T = Short.parseShort(s);
} else {
EMPINC_P_T = Short.MIN_VALUE;
}
}

protected final void initEMPINC_R_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
EMPINC_R_F = false;
}
}

protected final void initEMPINC_R_NI2(String s) {
if (!s.trim().isEmpty()) {
EMPINC_R_NI2 = Short.parseShort(s);
} else {
EMPINC_R_NI2 = Short.MIN_VALUE;
}
}

protected final void initEMPINC_R_NI3(String s) {
if (!s.trim().isEmpty()) {
EMPINC_R_NI3 = Short.parseShort(s);
} else {
EMPINC_R_NI3 = Short.MIN_VALUE;
}
}

protected final void initEMPINC_R_NI4(String s) {
if (!s.trim().isEmpty()) {
EMPINC_R_NI4 = Short.parseShort(s);
} else {
EMPINC_R_NI4 = Short.MIN_VALUE;
}
}

protected final void initEMPINC_R_S(String s) {
if (!s.trim().isEmpty()) {
EMPINC_R_S = Double.parseDouble(s);
} else {
EMPINC_R_S = Double.NaN;
}
}

protected final void initEMPINC_R_T(String s) {
if (!s.trim().isEmpty()) {
EMPINC_R_T = Short.parseShort(s);
} else {
EMPINC_R_T = Short.MIN_VALUE;
}
}

protected final void initEQASSINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
EQASSINC_BU_F = Byte.parseByte(s);
} else {
EQASSINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initEQASSINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
EQASSINC_BU_NI2 = Short.parseShort(s);
} else {
EQASSINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initEQASSINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
EQASSINC_BU_NI3 = Short.parseShort(s);
} else {
EQASSINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initEQASSINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
EQASSINC_BU_NI4 = Short.parseShort(s);
} else {
EQASSINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initEQASSINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
EQASSINC_BU_S = Double.parseDouble(s);
} else {
EQASSINC_BU_S = Double.NaN;
}
}

protected final void initEQASSINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
EQASSINC_BU_T = Short.parseShort(s);
} else {
EQASSINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initEQBENINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
EQBENINC_BU_F = Byte.parseByte(s);
} else {
EQBENINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initEQBENINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
EQBENINC_BU_NI2 = Short.parseShort(s);
} else {
EQBENINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initEQBENINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
EQBENINC_BU_NI3 = Short.parseShort(s);
} else {
EQBENINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initEQBENINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
EQBENINC_BU_NI4 = Short.parseShort(s);
} else {
EQBENINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initEQBENINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
EQBENINC_BU_S = Double.parseDouble(s);
} else {
EQBENINC_BU_S = Double.NaN;
}
}

protected final void initEQBENINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
EQBENINC_BU_T = Short.parseShort(s);
} else {
EQBENINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initEQEMPINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
EQEMPINC_BU_F = Byte.parseByte(s);
} else {
EQEMPINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initEQEMPINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
EQEMPINC_BU_NI2 = Short.parseShort(s);
} else {
EQEMPINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initEQEMPINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
EQEMPINC_BU_NI3 = Short.parseShort(s);
} else {
EQEMPINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initEQEMPINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
EQEMPINC_BU_NI4 = Short.parseShort(s);
} else {
EQEMPINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initEQEMPINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
EQEMPINC_BU_S = Double.parseDouble(s);
} else {
EQEMPINC_BU_S = Double.NaN;
}
}

protected final void initEQEMPINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
EQEMPINC_BU_T = Short.parseShort(s);
} else {
EQEMPINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initEQOTHINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
EQOTHINC_BU_F = Byte.parseByte(s);
} else {
EQOTHINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initEQOTHINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
EQOTHINC_BU_NI2 = Short.parseShort(s);
} else {
EQOTHINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initEQOTHINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
EQOTHINC_BU_NI3 = Short.parseShort(s);
} else {
EQOTHINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initEQOTHINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
EQOTHINC_BU_NI4 = Short.parseShort(s);
} else {
EQOTHINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initEQOTHINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
EQOTHINC_BU_S = Double.parseDouble(s);
} else {
EQOTHINC_BU_S = Double.NaN;
}
}

protected final void initEQOTHINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
EQOTHINC_BU_T = Short.parseShort(s);
} else {
EQOTHINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initEQPPINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
EQPPINC_BU_F = Byte.parseByte(s);
} else {
EQPPINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initEQPPINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
EQPPINC_BU_NI2 = Short.parseShort(s);
} else {
EQPPINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initEQPPINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
EQPPINC_BU_NI3 = Short.parseShort(s);
} else {
EQPPINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initEQPPINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
EQPPINC_BU_NI4 = Short.parseShort(s);
} else {
EQPPINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initEQPPINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
EQPPINC_BU_S = Double.parseDouble(s);
} else {
EQPPINC_BU_S = Double.NaN;
}
}

protected final void initEQPPINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
EQPPINC_BU_T = Short.parseShort(s);
} else {
EQPPINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initEQSEINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
EQSEINC_BU_F = Byte.parseByte(s);
} else {
EQSEINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initEQSEINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
EQSEINC_BU_NI2 = Short.parseShort(s);
} else {
EQSEINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initEQSEINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
EQSEINC_BU_NI3 = Short.parseShort(s);
} else {
EQSEINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initEQSEINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
EQSEINC_BU_NI4 = Short.parseShort(s);
} else {
EQSEINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initEQSEINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
EQSEINC_BU_S = Double.parseDouble(s);
} else {
EQSEINC_BU_S = Double.NaN;
}
}

protected final void initEQSEINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
EQSEINC_BU_T = Short.parseShort(s);
} else {
EQSEINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initEQSPINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
EQSPINC_BU_F = Byte.parseByte(s);
} else {
EQSPINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initEQSPINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
EQSPINC_BU_NI2 = Short.parseShort(s);
} else {
EQSPINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initEQSPINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
EQSPINC_BU_NI3 = Short.parseShort(s);
} else {
EQSPINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initEQSPINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
EQSPINC_BU_NI4 = Short.parseShort(s);
} else {
EQSPINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initEQSPINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
EQSPINC_BU_S = Double.parseDouble(s);
} else {
EQSPINC_BU_S = Double.NaN;
}
}

protected final void initEQSPINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
EQSPINC_BU_T = Short.parseShort(s);
} else {
EQSPINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initEQTOTINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
EQTOTINC_BU_F = Byte.parseByte(s);
} else {
EQTOTINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initEQTOTINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
EQTOTINC_BU_NI2 = Short.parseShort(s);
} else {
EQTOTINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initEQTOTINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
EQTOTINC_BU_NI3 = Short.parseShort(s);
} else {
EQTOTINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initEQTOTINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
EQTOTINC_BU_NI4 = Short.parseShort(s);
} else {
EQTOTINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initEQTOTINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
EQTOTINC_BU_S = Double.parseDouble(s);
} else {
EQTOTINC_BU_S = Double.NaN;
}
}

protected final void initEQTOTINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
EQTOTINC_BU_T = Short.parseShort(s);
} else {
EQTOTINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initEVERWORK(String s) {
if (!s.trim().isEmpty()) {
EVERWORK = Byte.parseByte(s);
} else {
EVERWORK = Byte.MIN_VALUE;
}
}

protected final void initEXAINH(String s) {
if (!s.trim().isEmpty()) {
EXAINH = Byte.parseByte(s);
} else {
EXAINH = Byte.MIN_VALUE;
}
}

protected final void initEXCAIN(String s) {
if (!s.trim().isEmpty()) {
EXCAIN = Byte.parseByte(s);
} else {
EXCAIN = Byte.MIN_VALUE;
}
}

protected final void initEXCIN(String s) {
if (!s.trim().isEmpty()) {
EXCIN = Byte.parseByte(s);
} else {
EXCIN = Byte.MIN_VALUE;
}
}

protected final void initEXCINH(String s) {
if (!s.trim().isEmpty()) {
EXCINH = Byte.parseByte(s);
} else {
EXCINH = Byte.MIN_VALUE;
}
}

protected final void initEXCPIN(String s) {
if (!s.trim().isEmpty()) {
EXCPIN = Byte.parseByte(s);
} else {
EXCPIN = Byte.MIN_VALUE;
}
}

protected final void initEXECNN(String s) {
if (!s.trim().isEmpty()) {
EXECNN = Byte.parseByte(s);
} else {
EXECNN = Byte.MIN_VALUE;
}
}

protected final void initEXHLIM(String s) {
if (!s.trim().isEmpty()) {
EXHLIM = Byte.parseByte(s);
} else {
EXHLIM = Byte.MIN_VALUE;
}
}

protected final void initEXHLIMW(String s) {
if (!s.trim().isEmpty()) {
EXHLIMW = Byte.parseByte(s);
} else {
EXHLIMW = Byte.MIN_VALUE;
}
}

protected final void initEXHLIMWB(String s) {
if (!s.trim().isEmpty()) {
EXHLIMWB = Byte.parseByte(s);
} else {
EXHLIMWB = Byte.MIN_VALUE;
}
}

protected final void initEXHVA(String s) {
if (!s.trim().isEmpty()) {
EXHVA = Short.parseShort(s);
} else {
EXHVA = Short.MIN_VALUE;
}
}

protected final void initEXHVR(String s) {
if (!s.trim().isEmpty()) {
EXHVR = Byte.parseByte(s);
} else {
EXHVR = Byte.MIN_VALUE;
}
}

protected final void initEXINHE(String s) {
if (!s.trim().isEmpty()) {
EXINHE = Byte.parseByte(s);
} else {
EXINHE = Byte.MIN_VALUE;
}
}

protected final void initEXLO80(String s) {
if (!s.trim().isEmpty()) {
EXLO80 = Byte.parseByte(s);
} else {
EXLO80 = Byte.MIN_VALUE;
}
}

protected final void initEXPLIVE(String s) {
if (!s.trim().isEmpty()) {
EXPLIVE = Byte.parseByte(s);
} else {
EXPLIVE = Byte.MIN_VALUE;
}
}

protected final void initEXPLIVE100(String s) {
if (!s.trim().isEmpty()) {
EXPLIVE100 = Byte.parseByte(s);
} else {
EXPLIVE100 = Byte.MIN_VALUE;
}
}

protected final void initEXPLIVE100B(String s) {
if (!s.trim().isEmpty()) {
EXPLIVE100B = Byte.parseByte(s);
} else {
EXPLIVE100B = Byte.MIN_VALUE;
}
}

protected final void initEXPLIVE75(String s) {
if (!s.trim().isEmpty()) {
EXPLIVE75 = Byte.parseByte(s);
} else {
EXPLIVE75 = Byte.MIN_VALUE;
}
}

protected final void initEXPLIVE75B(String s) {
if (!s.trim().isEmpty()) {
EXPLIVE75B = Byte.parseByte(s);
} else {
EXPLIVE75B = Byte.MIN_VALUE;
}
}

protected final void initEXPLIVE80(String s) {
if (!s.trim().isEmpty()) {
EXPLIVE80 = Byte.parseByte(s);
} else {
EXPLIVE80 = Byte.MIN_VALUE;
}
}

protected final void initEXPLIVE80B(String s) {
if (!s.trim().isEmpty()) {
EXPLIVE80B = Byte.parseByte(s);
} else {
EXPLIVE80B = Byte.MIN_VALUE;
}
}

protected final void initEXPLIVE85(String s) {
if (!s.trim().isEmpty()) {
EXPLIVE85 = Byte.parseByte(s);
} else {
EXPLIVE85 = Byte.MIN_VALUE;
}
}

protected final void initEXPLIVE85B(String s) {
if (!s.trim().isEmpty()) {
EXPLIVE85B = Byte.parseByte(s);
} else {
EXPLIVE85B = Byte.MIN_VALUE;
}
}

protected final void initEXPLIVE90(String s) {
if (!s.trim().isEmpty()) {
EXPLIVE90 = Byte.parseByte(s);
} else {
EXPLIVE90 = Byte.MIN_VALUE;
}
}

protected final void initEXPLIVE90B(String s) {
if (!s.trim().isEmpty()) {
EXPLIVE90B = Byte.parseByte(s);
} else {
EXPLIVE90B = Byte.MIN_VALUE;
}
}

protected final void initEXPLIVE95(String s) {
if (!s.trim().isEmpty()) {
EXPLIVE95 = Byte.parseByte(s);
} else {
EXPLIVE95 = Byte.MIN_VALUE;
}
}

protected final void initEXPLIVE95B(String s) {
if (!s.trim().isEmpty()) {
EXPLIVE95B = Byte.parseByte(s);
} else {
EXPLIVE95B = Byte.MIN_VALUE;
}
}

protected final void initEXPLIVEB(String s) {
if (!s.trim().isEmpty()) {
EXPLIVEB = Byte.parseByte(s);
} else {
EXPLIVEB = Byte.MIN_VALUE;
}
}

protected final void initEXPW(String s) {
if (!s.trim().isEmpty()) {
EXPW = Byte.parseByte(s);
} else {
EXPW = Byte.MIN_VALUE;
}
}

protected final void initEXRAIN(String s) {
if (!s.trim().isEmpty()) {
EXRAIN = Byte.parseByte(s);
} else {
EXRAIN = Byte.MIN_VALUE;
}
}

protected final void initEXRSLF(String s) {
if (!s.trim().isEmpty()) {
EXRSLF = Byte.parseByte(s);
} else {
EXRSLF = Byte.MIN_VALUE;
}
}

protected final void initEXWORK(String s) {
if (!s.trim().isEmpty()) {
EXWORK = Byte.parseByte(s);
} else {
EXWORK = Byte.MIN_VALUE;
}
}

protected final void initEXWORK55(String s) {
if (!s.trim().isEmpty()) {
EXWORK55 = Byte.parseByte(s);
} else {
EXWORK55 = Byte.MIN_VALUE;
}
}

protected final void initEXWORK55B(String s) {
if (!s.trim().isEmpty()) {
EXWORK55B = Byte.parseByte(s);
} else {
EXWORK55B = Byte.MIN_VALUE;
}
}

protected final void initEXWORK60(String s) {
if (!s.trim().isEmpty()) {
EXWORK60 = Byte.parseByte(s);
} else {
EXWORK60 = Byte.MIN_VALUE;
}
}

protected final void initEXWORK60B(String s) {
if (!s.trim().isEmpty()) {
EXWORK60B = Byte.parseByte(s);
} else {
EXWORK60B = Byte.MIN_VALUE;
}
}

protected final void initEXWORK65(String s) {
if (!s.trim().isEmpty()) {
EXWORK65 = Byte.parseByte(s);
} else {
EXWORK65 = Byte.MIN_VALUE;
}
}

protected final void initEXWORK65B(String s) {
if (!s.trim().isEmpty()) {
EXWORK65B = Byte.parseByte(s);
} else {
EXWORK65B = Byte.MIN_VALUE;
}
}

protected final void initEXWORKB(String s) {
if (!s.trim().isEmpty()) {
EXWORKB = Byte.parseByte(s);
} else {
EXWORKB = Byte.MIN_VALUE;
}
}

protected final void initFAGEDIED(String s) {
if (!s.trim().isEmpty()) {
FAGEDIED = Byte.parseByte(s);
} else {
FAGEDIED = Byte.MIN_VALUE;
}
}

protected final void initFALIVE(String s) {
if (!s.trim().isEmpty()) {
FALIVE = Byte.parseByte(s);
} else {
FALIVE = Byte.MIN_VALUE;
}
}

protected final void initFAMTYPE(String s) {
if (!s.trim().isEmpty()) {
FAMTYPE = Byte.parseByte(s);
} else {
FAMTYPE = Byte.MIN_VALUE;
}
}

protected final void initFARMI_BU_F(String s) {
if (!s.trim().isEmpty()) {
FARMI_BU_F = Byte.parseByte(s);
} else {
FARMI_BU_F = Byte.MIN_VALUE;
}
}

protected final void initFARMI_BU_I(String s) {
if (!s.trim().isEmpty()) {
FARMI_BU_I = Double.parseDouble(s);
} else {
FARMI_BU_I = Double.NaN;
}
}

protected final void initFARMI_BU_O(String s) {
if (!s.trim().isEmpty()) {
FARMI_BU_O = Short.parseShort(s);
} else {
FARMI_BU_O = Short.MIN_VALUE;
}
}

protected final void initFARMI_BU_T(String s) {
if (!s.trim().isEmpty()) {
FARMI_BU_T = Short.parseShort(s);
} else {
FARMI_BU_T = Short.MIN_VALUE;
}
}

protected final void initFARM_BU_F(String s) {
if (!s.trim().isEmpty()) {
FARM_BU_F = Byte.parseByte(s);
} else {
FARM_BU_F = Byte.MIN_VALUE;
}
}

protected final void initFARM_BU_I(String s) {
if (!s.trim().isEmpty()) {
FARM_BU_I = Double.parseDouble(s);
} else {
FARM_BU_I = Double.NaN;
}
}

protected final void initFARM_BU_O(String s) {
if (!s.trim().isEmpty()) {
FARM_BU_O = Short.parseShort(s);
} else {
FARM_BU_O = Short.MIN_VALUE;
}
}

protected final void initFARM_BU_T(String s) {
if (!s.trim().isEmpty()) {
FARM_BU_T = Short.parseShort(s);
} else {
FARM_BU_T = Short.MIN_VALUE;
}
}

protected final void initFATHAGE(String s) {
if (!s.trim().isEmpty()) {
FATHAGE = Byte.parseByte(s);
} else {
FATHAGE = Byte.MIN_VALUE;
}
}

protected final void initFINDIFF(String s) {
if (!s.trim().isEmpty()) {
FINDIFF = Byte.parseByte(s);
} else {
FINDIFF = Byte.MIN_VALUE;
}
}

protected final void initFIRSTBU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
FIRSTBU = false;
}
}

protected final void initFOODINL(String s) {
if (!s.trim().isEmpty()) {
FOODINL = Double.parseDouble(s);
} else {
FOODINL = Double.NaN;
}
}

protected final void initFOODINT(String s) {
if (!s.trim().isEmpty()) {
FOODINT = Byte.parseByte(s);
} else {
FOODINT = Byte.MIN_VALUE;
}
}

protected final void initFOODINU(String s) {
if (!s.trim().isEmpty()) {
FOODINU = Integer.parseInt(s);
} else {
FOODINU = Integer.MIN_VALUE;
}
}

protected final void initFOODOUTL(String s) {
if (!s.trim().isEmpty()) {
FOODOUTL = Double.parseDouble(s);
} else {
FOODOUTL = Double.NaN;
}
}

protected final void initFOODOUTT(String s) {
if (!s.trim().isEmpty()) {
FOODOUTT = Byte.parseByte(s);
} else {
FOODOUTT = Byte.MIN_VALUE;
}
}

protected final void initFOODOUTU(String s) {
if (!s.trim().isEmpty()) {
FOODOUTU = Double.parseDouble(s);
} else {
FOODOUTU = Double.NaN;
}
}

protected final void initFQHELP(String s) {
if (!s.trim().isEmpty()) {
FQHELP = Byte.parseByte(s);
} else {
FQHELP = Byte.MIN_VALUE;
}
}

protected final void initFQMQUA(String s) {
if (!s.trim().isEmpty()) {
FQMQUA = Byte.parseByte(s);
} else {
FQMQUA = Byte.MIN_VALUE;
}
}

protected final void initFUID(String s) {
if (!s.trim().isEmpty()) {
FUID = Short.parseShort(s);
} else {
FUID = Short.MIN_VALUE;
}
}

protected final void initFUID_INST(String s) {
if (!s.trim().isEmpty()) {
FUID_INST = Short.parseShort(s);
} else {
FUID_INST = Short.MIN_VALUE;
}
}

protected final void initFUTYPE(String s) {
if (!s.trim().isEmpty()) {
FUTYPE = Byte.parseByte(s);
} else {
FUTYPE = Byte.MIN_VALUE;
}
}

protected final void initGALL_P_F(String s) {
if (!s.trim().isEmpty()) {
GALL_P_F = Byte.parseByte(s);
} else {
GALL_P_F = Byte.MIN_VALUE;
}
}

protected final void initGALL_P_I(String s) {
if (!s.trim().isEmpty()) {
GALL_P_I = Double.parseDouble(s);
} else {
GALL_P_I = Double.NaN;
}
}

protected final void initGALL_P_O(String s) {
if (!s.trim().isEmpty()) {
GALL_P_O = Short.parseShort(s);
} else {
GALL_P_O = Short.MIN_VALUE;
}
}

protected final void initGALL_P_T(String s) {
if (!s.trim().isEmpty()) {
GALL_P_T = Short.parseShort(s);
} else {
GALL_P_T = Short.MIN_VALUE;
}
}

protected final void initGALL_R_F(String s) {
if (!s.trim().isEmpty()) {
GALL_R_F = Byte.parseByte(s);
} else {
GALL_R_F = Byte.MIN_VALUE;
}
}

protected final void initGALL_R_I(String s) {
if (!s.trim().isEmpty()) {
GALL_R_I = Double.parseDouble(s);
} else {
GALL_R_I = Double.NaN;
}
}

protected final void initGALL_R_O(String s) {
if (!s.trim().isEmpty()) {
GALL_R_O = Short.parseShort(s);
} else {
GALL_R_O = Short.MIN_VALUE;
}
}

protected final void initGALL_R_T(String s) {
if (!s.trim().isEmpty()) {
GALL_R_T = Short.parseShort(s);
} else {
GALL_R_T = Short.MIN_VALUE;
}
}

protected final void initGASELECL(String s) {
if (!s.trim().isEmpty()) {
GASELECL = Double.parseDouble(s);
} else {
GASELECL = Double.NaN;
}
}

protected final void initGASELECMETH(String s) {
if (!s.trim().isEmpty()) {
GASELECMETH = Byte.parseByte(s);
} else {
GASELECMETH = Byte.MIN_VALUE;
}
}

protected final void initGASELECT(String s) {
if (!s.trim().isEmpty()) {
GASELECT = Byte.parseByte(s);
} else {
GASELECT = Byte.MIN_VALUE;
}
}

protected final void initGASELECU(String s) {
if (!s.trim().isEmpty()) {
GASELECU = Double.parseDouble(s);
} else {
GASELECU = Double.NaN;
}
}

protected final void initGASL(String s) {
if (!s.trim().isEmpty()) {
GASL = Double.parseDouble(s);
} else {
GASL = Double.NaN;
}
}

protected final void initGASMETH(String s) {
if (!s.trim().isEmpty()) {
GASMETH = Byte.parseByte(s);
} else {
GASMETH = Byte.MIN_VALUE;
}
}

protected final void initGAST(String s) {
if (!s.trim().isEmpty()) {
GAST = Byte.parseByte(s);
} else {
GAST = Byte.MIN_VALUE;
}
}

protected final void initGASU(String s) {
if (!s.trim().isEmpty()) {
GASU = Double.parseDouble(s);
} else {
GASU = Double.NaN;
}
}

protected final void initGETSHB(String s) {
if (!s.trim().isEmpty()) {
GETSHB = Byte.parseByte(s);
} else {
GETSHB = Byte.MIN_VALUE;
}
}

protected final void initGOR(String s) {
if (!s.trim().isEmpty()) {
GOR = s;
}
}

protected final void initGROSSFW_BU_F(String s) {
if (!s.trim().isEmpty()) {
GROSSFW_BU_F = Byte.parseByte(s);
} else {
GROSSFW_BU_F = Byte.MIN_VALUE;
}
}

protected final void initGROSSFW_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
GROSSFW_BU_NI2 = Short.parseShort(s);
} else {
GROSSFW_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initGROSSFW_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
GROSSFW_BU_NI3 = Short.parseShort(s);
} else {
GROSSFW_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initGROSSFW_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
GROSSFW_BU_NI4 = Short.parseShort(s);
} else {
GROSSFW_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initGROSSFW_BU_S(String s) {
if (!s.trim().isEmpty()) {
GROSSFW_BU_S = Double.parseDouble(s);
} else {
GROSSFW_BU_S = Double.NaN;
}
}

protected final void initGROSSFW_BU_T(String s) {
if (!s.trim().isEmpty()) {
GROSSFW_BU_T = Short.parseShort(s);
} else {
GROSSFW_BU_T = Short.MIN_VALUE;
}
}

protected final void initGROSSHW_BU_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
GROSSHW_BU_F = false;
}
}

protected final void initGROSSHW_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
GROSSHW_BU_NI2 = Short.parseShort(s);
} else {
GROSSHW_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initGROSSHW_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
GROSSHW_BU_NI3 = Short.parseShort(s);
} else {
GROSSHW_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initGROSSHW_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
GROSSHW_BU_NI4 = Short.parseShort(s);
} else {
GROSSHW_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initGROSSHW_BU_S(String s) {
if (!s.trim().isEmpty()) {
GROSSHW_BU_S = Double.parseDouble(s);
} else {
GROSSHW_BU_S = Double.NaN;
}
}

protected final void initGROSSHW_BU_T(String s) {
if (!s.trim().isEmpty()) {
GROSSHW_BU_T = Short.parseShort(s);
} else {
GROSSHW_BU_T = Short.MIN_VALUE;
}
}

protected final void initGROSSRENTL(String s) {
if (!s.trim().isEmpty()) {
GROSSRENTL = Double.parseDouble(s);
} else {
GROSSRENTL = Double.NaN;
}
}

protected final void initGROSSRENTT(String s) {
if (!s.trim().isEmpty()) {
GROSSRENTT = Byte.parseByte(s);
} else {
GROSSRENTT = Byte.MIN_VALUE;
}
}

protected final void initGROSSRENTU(String s) {
if (!s.trim().isEmpty()) {
GROSSRENTU = Double.parseDouble(s);
} else {
GROSSRENTU = Double.NaN;
}
}

protected final void initGROSSTOTNHW_BU_F(String s) {
if (!s.trim().isEmpty()) {
GROSSTOTNHW_BU_F = Byte.parseByte(s);
} else {
GROSSTOTNHW_BU_F = Byte.MIN_VALUE;
}
}

protected final void initGROSSTOTNHW_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
GROSSTOTNHW_BU_NI2 = Short.parseShort(s);
} else {
GROSSTOTNHW_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initGROSSTOTNHW_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
GROSSTOTNHW_BU_NI3 = Short.parseShort(s);
} else {
GROSSTOTNHW_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initGROSSTOTNHW_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
GROSSTOTNHW_BU_NI4 = Short.parseShort(s);
} else {
GROSSTOTNHW_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initGROSSTOTNHW_BU_S(String s) {
if (!s.trim().isEmpty()) {
GROSSTOTNHW_BU_S = Double.parseDouble(s);
} else {
GROSSTOTNHW_BU_S = Double.NaN;
}
}

protected final void initGROSSTOTNHW_BU_T(String s) {
if (!s.trim().isEmpty()) {
GROSSTOTNHW_BU_T = Short.parseShort(s);
} else {
GROSSTOTNHW_BU_T = Short.MIN_VALUE;
}
}

protected final void initHDEBT_HH_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HDEBT_HH_F = false;
}
}

protected final void initHDEBT_HH_I(String s) {
if (!s.trim().isEmpty()) {
HDEBT_HH_I = Double.parseDouble(s);
} else {
HDEBT_HH_I = Double.NaN;
}
}

protected final void initHDEBT_HH_O(String s) {
if (!s.trim().isEmpty()) {
HDEBT_HH_O = Short.parseShort(s);
} else {
HDEBT_HH_O = Short.MIN_VALUE;
}
}

protected final void initHDEBT_HH_T(String s) {
if (!s.trim().isEmpty()) {
HDEBT_HH_T = Short.parseShort(s);
} else {
HDEBT_HH_T = Short.MIN_VALUE;
}
}

protected final void initHEACTA(String s) {
if (!s.trim().isEmpty()) {
HEACTA = Byte.parseByte(s);
} else {
HEACTA = Byte.MIN_VALUE;
}
}

protected final void initHEACTB(String s) {
if (!s.trim().isEmpty()) {
HEACTB = Byte.parseByte(s);
} else {
HEACTB = Byte.MIN_VALUE;
}
}

protected final void initHEACTC(String s) {
if (!s.trim().isEmpty()) {
HEACTC = Byte.parseByte(s);
} else {
HEACTC = Byte.MIN_VALUE;
}
}

protected final void initHEADL96(String s) {
if (!s.trim().isEmpty()) {
HEADL96 = Byte.parseByte(s);
} else {
HEADL96 = Byte.MIN_VALUE;
}
}

protected final void initHEADLBA(String s) {
if (!s.trim().isEmpty()) {
HEADLBA = Byte.parseByte(s);
} else {
HEADLBA = Byte.MIN_VALUE;
}
}

protected final void initHEADLBE(String s) {
if (!s.trim().isEmpty()) {
HEADLBE = Byte.parseByte(s);
} else {
HEADLBE = Byte.MIN_VALUE;
}
}

protected final void initHEADLCO(String s) {
if (!s.trim().isEmpty()) {
HEADLCO = Byte.parseByte(s);
} else {
HEADLCO = Byte.MIN_VALUE;
}
}

protected final void initHEADLDA(String s) {
if (!s.trim().isEmpty()) {
HEADLDA = Byte.parseByte(s);
} else {
HEADLDA = Byte.MIN_VALUE;
}
}

protected final void initHEADLDR(String s) {
if (!s.trim().isEmpty()) {
HEADLDR = Byte.parseByte(s);
} else {
HEADLDR = Byte.MIN_VALUE;
}
}

protected final void initHEADLEA(String s) {
if (!s.trim().isEmpty()) {
HEADLEA = Byte.parseByte(s);
} else {
HEADLEA = Byte.MIN_VALUE;
}
}

protected final void initHEADLHO(String s) {
if (!s.trim().isEmpty()) {
HEADLHO = Byte.parseByte(s);
} else {
HEADLHO = Byte.MIN_VALUE;
}
}

protected final void initHEADLMA(String s) {
if (!s.trim().isEmpty()) {
HEADLMA = Byte.parseByte(s);
} else {
HEADLMA = Byte.MIN_VALUE;
}
}

protected final void initHEADLME(String s) {
if (!s.trim().isEmpty()) {
HEADLME = Byte.parseByte(s);
} else {
HEADLME = Byte.MIN_VALUE;
}
}

protected final void initHEADLMO(String s) {
if (!s.trim().isEmpty()) {
HEADLMO = Byte.parseByte(s);
} else {
HEADLMO = Byte.MIN_VALUE;
}
}

protected final void initHEADLPH(String s) {
if (!s.trim().isEmpty()) {
HEADLPH = Byte.parseByte(s);
} else {
HEADLPH = Byte.MIN_VALUE;
}
}

protected final void initHEADLPR(String s) {
if (!s.trim().isEmpty()) {
HEADLPR = Byte.parseByte(s);
} else {
HEADLPR = Byte.MIN_VALUE;
}
}

protected final void initHEADLSH(String s) {
if (!s.trim().isEmpty()) {
HEADLSH = Byte.parseByte(s);
} else {
HEADLSH = Byte.MIN_VALUE;
}
}

protected final void initHEADLWA(String s) {
if (!s.trim().isEmpty()) {
HEADLWA = Byte.parseByte(s);
} else {
HEADLWA = Byte.MIN_VALUE;
}
}

protected final void initHEADLWC(String s) {
if (!s.trim().isEmpty()) {
HEADLWC = Byte.parseByte(s);
} else {
HEADLWC = Byte.MIN_VALUE;
}
}

protected final void initHEAGA(String s) {
if (!s.trim().isEmpty()) {
HEAGA = Byte.parseByte(s);
} else {
HEAGA = Byte.MIN_VALUE;
}
}

protected final void initHEAGB(String s) {
if (!s.trim().isEmpty()) {
HEAGB = Byte.parseByte(s);
} else {
HEAGB = Byte.MIN_VALUE;
}
}

protected final void initHEAGC(String s) {
if (!s.trim().isEmpty()) {
HEAGC = Byte.parseByte(s);
} else {
HEAGC = Byte.MIN_VALUE;
}
}

protected final void initHEAGD(String s) {
if (!s.trim().isEmpty()) {
HEAGD = Byte.parseByte(s);
} else {
HEAGD = Byte.MIN_VALUE;
}
}

protected final void initHEAGE(String s) {
if (!s.trim().isEmpty()) {
HEAGE = Byte.parseByte(s);
} else {
HEAGE = Byte.MIN_VALUE;
}
}

protected final void initHEAGF(String s) {
if (!s.trim().isEmpty()) {
HEAGF = Byte.parseByte(s);
} else {
HEAGF = Byte.MIN_VALUE;
}
}

protected final void initHEAGI(String s) {
if (!s.trim().isEmpty()) {
HEAGI = Byte.parseByte(s);
} else {
HEAGI = Byte.MIN_VALUE;
}
}

protected final void initHEAGJ(String s) {
if (!s.trim().isEmpty()) {
HEAGJ = Byte.parseByte(s);
} else {
HEAGJ = Byte.MIN_VALUE;
}
}

protected final void initHEAMA(String s) {
if (!s.trim().isEmpty()) {
HEAMA = Byte.parseByte(s);
} else {
HEAMA = Byte.MIN_VALUE;
}
}

protected final void initHEBCK(String s) {
if (!s.trim().isEmpty()) {
HEBCK = Byte.parseByte(s);
} else {
HEBCK = Byte.MIN_VALUE;
}
}

protected final void initHECANB(String s) {
if (!s.trim().isEmpty()) {
HECANB = Byte.parseByte(s);
} else {
HECANB = Byte.MIN_VALUE;
}
}

protected final void initHECAT(String s) {
if (!s.trim().isEmpty()) {
HECAT = Byte.parseByte(s);
} else {
HECAT = Byte.MIN_VALUE;
}
}

protected final void initHECIG(String s) {
if (!s.trim().isEmpty()) {
HECIG = Byte.parseByte(s);
} else {
HECIG = Byte.MIN_VALUE;
}
}

protected final void initHEEYE(String s) {
if (!s.trim().isEmpty()) {
HEEYE = Byte.parseByte(s);
} else {
HEEYE = Byte.MIN_VALUE;
}
}

protected final void initHEFET(String s) {
if (!s.trim().isEmpty()) {
HEFET = Byte.parseByte(s);
} else {
HEFET = Byte.MIN_VALUE;
}
}

protected final void initHEFLA(String s) {
if (!s.trim().isEmpty()) {
HEFLA = Byte.parseByte(s);
} else {
HEFLA = Byte.MIN_VALUE;
}
}

protected final void initHEFLB(String s) {
if (!s.trim().isEmpty()) {
HEFLB = Short.parseShort(s);
} else {
HEFLB = Short.MIN_VALUE;
}
}

protected final void initHEFLC(String s) {
if (!s.trim().isEmpty()) {
HEFLC = Byte.parseByte(s);
} else {
HEFLC = Byte.MIN_VALUE;
}
}

protected final void initHEFRAC(String s) {
if (!s.trim().isEmpty()) {
HEFRAC = Byte.parseByte(s);
} else {
HEFRAC = Byte.MIN_VALUE;
}
}

protected final void initHEFRND(String s) {
if (!s.trim().isEmpty()) {
HEFRND = Byte.parseByte(s);
} else {
HEFRND = Byte.MIN_VALUE;
}
}

protected final void initHEFUNC(String s) {
if (!s.trim().isEmpty()) {
HEFUNC = Byte.parseByte(s);
} else {
HEFUNC = Byte.MIN_VALUE;
}
}

protected final void initHEHEAR(String s) {
if (!s.trim().isEmpty()) {
HEHEAR = Byte.parseByte(s);
} else {
HEHEAR = Byte.MIN_VALUE;
}
}

protected final void initHEHIP(String s) {
if (!s.trim().isEmpty()) {
HEHIP = Byte.parseByte(s);
} else {
HEHIP = Byte.MIN_VALUE;
}
}

protected final void initHEHRA(String s) {
if (!s.trim().isEmpty()) {
HEHRA = Byte.parseByte(s);
} else {
HEHRA = Byte.MIN_VALUE;
}
}

protected final void initHEILL(String s) {
if (!s.trim().isEmpty()) {
HEILL = Byte.parseByte(s);
} else {
HEILL = Byte.MIN_VALUE;
}
}

protected final void initHEINS(String s) {
if (!s.trim().isEmpty()) {
HEINS = Byte.parseByte(s);
} else {
HEINS = Byte.MIN_VALUE;
}
}

protected final void initHEIQA(String s) {
if (!s.trim().isEmpty()) {
HEIQA = Byte.parseByte(s);
} else {
HEIQA = Byte.MIN_VALUE;
}
}

protected final void initHEIQB(String s) {
if (!s.trim().isEmpty()) {
HEIQB = Byte.parseByte(s);
} else {
HEIQB = Byte.MIN_VALUE;
}
}

protected final void initHEIQC(String s) {
if (!s.trim().isEmpty()) {
HEIQC = Byte.parseByte(s);
} else {
HEIQC = Byte.MIN_VALUE;
}
}

protected final void initHEIQD(String s) {
if (!s.trim().isEmpty()) {
HEIQD = Byte.parseByte(s);
} else {
HEIQD = Byte.MIN_VALUE;
}
}

protected final void initHEIQE(String s) {
if (!s.trim().isEmpty()) {
HEIQE = Byte.parseByte(s);
} else {
HEIQE = Byte.MIN_VALUE;
}
}

protected final void initHEIQF(String s) {
if (!s.trim().isEmpty()) {
HEIQF = Byte.parseByte(s);
} else {
HEIQF = Byte.MIN_VALUE;
}
}

protected final void initHEIQG(String s) {
if (!s.trim().isEmpty()) {
HEIQG = Byte.parseByte(s);
} else {
HEIQG = Byte.MIN_VALUE;
}
}

protected final void initHEIQH(String s) {
if (!s.trim().isEmpty()) {
HEIQH = Byte.parseByte(s);
} else {
HEIQH = Byte.MIN_VALUE;
}
}

protected final void initHEIQI(String s) {
if (!s.trim().isEmpty()) {
HEIQI = Byte.parseByte(s);
} else {
HEIQI = Byte.MIN_VALUE;
}
}

protected final void initHEIQJ(String s) {
if (!s.trim().isEmpty()) {
HEIQJ = Byte.parseByte(s);
} else {
HEIQJ = Byte.MIN_VALUE;
}
}

protected final void initHEIQK(String s) {
if (!s.trim().isEmpty()) {
HEIQK = Byte.parseByte(s);
} else {
HEIQK = Byte.MIN_VALUE;
}
}

protected final void initHEIQL(String s) {
if (!s.trim().isEmpty()) {
HEIQL = Byte.parseByte(s);
} else {
HEIQL = Byte.MIN_VALUE;
}
}

protected final void initHEIQM(String s) {
if (!s.trim().isEmpty()) {
HEIQM = Byte.parseByte(s);
} else {
HEIQM = Byte.MIN_VALUE;
}
}

protected final void initHEIQN(String s) {
if (!s.trim().isEmpty()) {
HEIQN = Byte.parseByte(s);
} else {
HEIQN = Byte.MIN_VALUE;
}
}

protected final void initHEIQO(String s) {
if (!s.trim().isEmpty()) {
HEIQO = Byte.parseByte(s);
} else {
HEIQO = Byte.MIN_VALUE;
}
}

protected final void initHEIQP(String s) {
if (!s.trim().isEmpty()) {
HEIQP = Byte.parseByte(s);
} else {
HEIQP = Byte.MIN_VALUE;
}
}

protected final void initHEIQQ(String s) {
if (!s.trim().isEmpty()) {
HEIQQ = Byte.parseByte(s);
} else {
HEIQQ = Byte.MIN_VALUE;
}
}

protected final void initHEJI(String s) {
if (!s.trim().isEmpty()) {
HEJI = Byte.parseByte(s);
} else {
HEJI = Byte.MIN_VALUE;
}
}

protected final void initHEKNE(String s) {
if (!s.trim().isEmpty()) {
HEKNE = Byte.parseByte(s);
} else {
HEKNE = Byte.MIN_VALUE;
}
}

protected final void initHELIM(String s) {
if (!s.trim().isEmpty()) {
HELIM = Byte.parseByte(s);
} else {
HELIM = Byte.MIN_VALUE;
}
}

protected final void initHELNG(String s) {
if (!s.trim().isEmpty()) {
HELNG = Byte.parseByte(s);
} else {
HELNG = Byte.MIN_VALUE;
}
}

protected final void initHEMDA(String s) {
if (!s.trim().isEmpty()) {
HEMDA = Byte.parseByte(s);
} else {
HEMDA = Byte.MIN_VALUE;
}
}

protected final void initHEMDB(String s) {
if (!s.trim().isEmpty()) {
HEMDB = Byte.parseByte(s);
} else {
HEMDB = Byte.MIN_VALUE;
}
}

protected final void initHEMOB96(String s) {
if (!s.trim().isEmpty()) {
HEMOB96 = Byte.parseByte(s);
} else {
HEMOB96 = Byte.MIN_VALUE;
}
}

protected final void initHEMOBCH(String s) {
if (!s.trim().isEmpty()) {
HEMOBCH = Byte.parseByte(s);
} else {
HEMOBCH = Byte.MIN_VALUE;
}
}

protected final void initHEMOBCL(String s) {
if (!s.trim().isEmpty()) {
HEMOBCL = Byte.parseByte(s);
} else {
HEMOBCL = Byte.MIN_VALUE;
}
}

protected final void initHEMOBCS(String s) {
if (!s.trim().isEmpty()) {
HEMOBCS = Byte.parseByte(s);
} else {
HEMOBCS = Byte.MIN_VALUE;
}
}

protected final void initHEMOBLI(String s) {
if (!s.trim().isEmpty()) {
HEMOBLI = Byte.parseByte(s);
} else {
HEMOBLI = Byte.MIN_VALUE;
}
}

protected final void initHEMOBPI(String s) {
if (!s.trim().isEmpty()) {
HEMOBPI = Byte.parseByte(s);
} else {
HEMOBPI = Byte.MIN_VALUE;
}
}

protected final void initHEMOBPU(String s) {
if (!s.trim().isEmpty()) {
HEMOBPU = Byte.parseByte(s);
} else {
HEMOBPU = Byte.MIN_VALUE;
}
}

protected final void initHEMOBRE(String s) {
if (!s.trim().isEmpty()) {
HEMOBRE = Byte.parseByte(s);
} else {
HEMOBRE = Byte.MIN_VALUE;
}
}

protected final void initHEMOBSI(String s) {
if (!s.trim().isEmpty()) {
HEMOBSI = Byte.parseByte(s);
} else {
HEMOBSI = Byte.MIN_VALUE;
}
}

protected final void initHEMOBST(String s) {
if (!s.trim().isEmpty()) {
HEMOBST = Byte.parseByte(s);
} else {
HEMOBST = Byte.MIN_VALUE;
}
}

protected final void initHEMOBWA(String s) {
if (!s.trim().isEmpty()) {
HEMOBWA = Byte.parseByte(s);
} else {
HEMOBWA = Byte.MIN_VALUE;
}
}

protected final void initHEPAA(String s) {
if (!s.trim().isEmpty()) {
HEPAA = Byte.parseByte(s);
} else {
HEPAA = Byte.MIN_VALUE;
}
}

protected final void initHEPAIN(String s) {
if (!s.trim().isEmpty()) {
HEPAIN = Byte.parseByte(s);
} else {
HEPAIN = Byte.MIN_VALUE;
}
}

protected final void initHEPAP(String s) {
if (!s.trim().isEmpty()) {
HEPAP = Byte.parseByte(s);
} else {
HEPAP = Byte.MIN_VALUE;
}
}

protected final void initHEPBS(String s) {
if (!s.trim().isEmpty()) {
HEPBS = Byte.parseByte(s);
} else {
HEPBS = Byte.MIN_VALUE;
}
}

protected final void initHEPRK(String s) {
if (!s.trim().isEmpty()) {
HEPRK = Byte.parseByte(s);
} else {
HEPRK = Byte.MIN_VALUE;
}
}

protected final void initHESKA(String s) {
if (!s.trim().isEmpty()) {
HESKA = Byte.parseByte(s);
} else {
HESKA = Byte.MIN_VALUE;
}
}

protected final void initHESKB(String s) {
if (!s.trim().isEmpty()) {
HESKB = Short.parseShort(s);
} else {
HESKB = Short.MIN_VALUE;
}
}

protected final void initHESKC(String s) {
if (!s.trim().isEmpty()) {
HESKC = Short.parseShort(s);
} else {
HESKC = Short.MIN_VALUE;
}
}

protected final void initHESMK(String s) {
if (!s.trim().isEmpty()) {
HESMK = Byte.parseByte(s);
} else {
HESMK = Byte.MIN_VALUE;
}
}

protected final void initHESPK(String s) {
if (!s.trim().isEmpty()) {
HESPK = Byte.parseByte(s);
} else {
HESPK = Byte.MIN_VALUE;
}
}

protected final void initHETBA(String s) {
if (!s.trim().isEmpty()) {
HETBA = Byte.parseByte(s);
} else {
HETBA = Byte.MIN_VALUE;
}
}

protected final void initHETBB(String s) {
if (!s.trim().isEmpty()) {
HETBB = Short.parseShort(s);
} else {
HETBB = Short.MIN_VALUE;
}
}

protected final void initHETBC(String s) {
if (!s.trim().isEmpty()) {
HETBC = Byte.parseByte(s);
} else {
HETBC = Byte.MIN_VALUE;
}
}

protected final void initHETBD(String s) {
if (!s.trim().isEmpty()) {
HETBD = Short.parseShort(s);
} else {
HETBD = Short.MIN_VALUE;
}
}

protected final void initHETHK(String s) {
if (!s.trim().isEmpty()) {
HETHK = Byte.parseByte(s);
} else {
HETHK = Byte.MIN_VALUE;
}
}

protected final void initHEVSI(String s) {
if (!s.trim().isEmpty()) {
HEVSI = Byte.parseByte(s);
} else {
HEVSI = Byte.MIN_VALUE;
}
}

protected final void initHEWKS(String s) {
if (!s.trim().isEmpty()) {
HEWKS = Byte.parseByte(s);
} else {
HEWKS = Byte.MIN_VALUE;
}
}

protected final void initHEYRA(String s) {
if (!s.trim().isEmpty()) {
HEYRA = Byte.parseByte(s);
} else {
HEYRA = Byte.MIN_VALUE;
}
}

protected final void initHEYRC(String s) {
if (!s.trim().isEmpty()) {
HEYRC = Byte.parseByte(s);
} else {
HEYRC = Byte.MIN_VALUE;
}
}

protected final void initHHANSHO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HHANSHO = false;
}
}

protected final void initHHEQ(String s) {
if (!s.trim().isEmpty()) {
HHEQ = Double.parseDouble(s);
} else {
HHEQ = Double.NaN;
}
}

protected final void initHHGRIDDHWORK(String s) {
if (!s.trim().isEmpty()) {
HHGRIDDHWORK = Byte.parseByte(s);
} else {
HHGRIDDHWORK = Byte.MIN_VALUE;
}
}

protected final void initHHGRIDDHWORK_P(String s) {
if (!s.trim().isEmpty()) {
HHGRIDDHWORK_P = Byte.parseByte(s);
} else {
HHGRIDDHWORK_P = Byte.MIN_VALUE;
}
}

protected final void initHHID(String s) {
if (!s.trim().isEmpty()) {
HHID = Short.parseShort(s);
} else {
HHID = Short.MIN_VALUE;
}
}

protected final void initHHRESP(String s) {
if (!s.trim().isEmpty()) {
HHRESP = Byte.parseByte(s);
} else {
HHRESP = Byte.MIN_VALUE;
}
}

protected final void initHHTOT(String s) {
if (!s.trim().isEmpty()) {
HHTOT = Byte.parseByte(s);
} else {
HHTOT = Byte.MIN_VALUE;
}
}

protected final void initHLIMWRK(String s) {
if (!s.trim().isEmpty()) {
HLIMWRK = Byte.parseByte(s);
} else {
HLIMWRK = Byte.MIN_VALUE;
}
}

protected final void initHLIMWRKC(String s) {
if (!s.trim().isEmpty()) {
HLIMWRKC = Byte.parseByte(s);
} else {
HLIMWRKC = Byte.MIN_VALUE;
}
}

protected final void initHOBA(String s) {
if (!s.trim().isEmpty()) {
HOBA = Short.parseShort(s);
} else {
HOBA = Short.MIN_VALUE;
}
}

protected final void initHOBA2(String s) {
if (!s.trim().isEmpty()) {
HOBA2 = Short.parseShort(s);
} else {
HOBA2 = Short.MIN_VALUE;
}
}

protected final void initHOBA3(String s) {
if (!s.trim().isEmpty()) {
HOBA3 = Short.parseShort(s);
} else {
HOBA3 = Short.MIN_VALUE;
}
}

protected final void initHOBA4(String s) {
if (!s.trim().isEmpty()) {
HOBA4 = Short.parseShort(s);
} else {
HOBA4 = Short.MIN_VALUE;
}
}

protected final void initHOBA5(String s) {
if (!s.trim().isEmpty()) {
HOBA5 = Short.parseShort(s);
} else {
HOBA5 = Short.MIN_VALUE;
}
}

protected final void initHOBA6(String s) {
if (!s.trim().isEmpty()) {
HOBA6 = Short.parseShort(s);
} else {
HOBA6 = Short.MIN_VALUE;
}
}

protected final void initHOBA7(String s) {
if (!s.trim().isEmpty()) {
HOBA7 = Short.parseShort(s);
} else {
HOBA7 = Short.MIN_VALUE;
}
}

protected final void initHOBA8(String s) {
if (!s.trim().isEmpty()) {
HOBA8 = Short.parseShort(s);
} else {
HOBA8 = Short.MIN_VALUE;
}
}

protected final void initHOBA9(String s) {
if (!s.trim().isEmpty()) {
HOBA9 = Byte.parseByte(s);
} else {
HOBA9 = Byte.MIN_VALUE;
}
}

protected final void initHOBAS(String s) {
if (!s.trim().isEmpty()) {
HOBAS = Byte.parseByte(s);
} else {
HOBAS = Byte.MIN_VALUE;
}
}

protected final void initHOBAS2(String s) {
if (!s.trim().isEmpty()) {
HOBAS2 = Byte.parseByte(s);
} else {
HOBAS2 = Byte.MIN_VALUE;
}
}

protected final void initHOBAS3(String s) {
if (!s.trim().isEmpty()) {
HOBAS3 = Byte.parseByte(s);
} else {
HOBAS3 = Byte.MIN_VALUE;
}
}

protected final void initHOBAS4(String s) {
if (!s.trim().isEmpty()) {
HOBAS4 = Byte.parseByte(s);
} else {
HOBAS4 = Byte.MIN_VALUE;
}
}

protected final void initHOBAS5(String s) {
if (!s.trim().isEmpty()) {
HOBAS5 = Byte.parseByte(s);
} else {
HOBAS5 = Byte.MIN_VALUE;
}
}

protected final void initHOBAS6(String s) {
if (!s.trim().isEmpty()) {
HOBAS6 = Byte.parseByte(s);
} else {
HOBAS6 = Byte.MIN_VALUE;
}
}

protected final void initHOBAS7(String s) {
if (!s.trim().isEmpty()) {
HOBAS7 = Byte.parseByte(s);
} else {
HOBAS7 = Byte.MIN_VALUE;
}
}

protected final void initHOBAS8(String s) {
if (!s.trim().isEmpty()) {
HOBAS8 = Byte.parseByte(s);
} else {
HOBAS8 = Byte.MIN_VALUE;
}
}

protected final void initHOBAS9(String s) {
if (!s.trim().isEmpty()) {
HOBAS9 = Byte.parseByte(s);
} else {
HOBAS9 = Byte.MIN_VALUE;
}
}

protected final void initHOBP(String s) {
if (!s.trim().isEmpty()) {
HOBP = Byte.parseByte(s);
} else {
HOBP = Byte.MIN_VALUE;
}
}

protected final void initHOBP2(String s) {
if (!s.trim().isEmpty()) {
HOBP2 = Byte.parseByte(s);
} else {
HOBP2 = Byte.MIN_VALUE;
}
}

protected final void initHOBP3(String s) {
if (!s.trim().isEmpty()) {
HOBP3 = Byte.parseByte(s);
} else {
HOBP3 = Byte.MIN_VALUE;
}
}

protected final void initHOBP4(String s) {
if (!s.trim().isEmpty()) {
HOBP4 = Byte.parseByte(s);
} else {
HOBP4 = Byte.MIN_VALUE;
}
}

protected final void initHOBP5(String s) {
if (!s.trim().isEmpty()) {
HOBP5 = Byte.parseByte(s);
} else {
HOBP5 = Byte.MIN_VALUE;
}
}

protected final void initHOBP6(String s) {
if (!s.trim().isEmpty()) {
HOBP6 = Byte.parseByte(s);
} else {
HOBP6 = Byte.MIN_VALUE;
}
}

protected final void initHOBP7(String s) {
if (!s.trim().isEmpty()) {
HOBP7 = Byte.parseByte(s);
} else {
HOBP7 = Byte.MIN_VALUE;
}
}

protected final void initHOBP8(String s) {
if (!s.trim().isEmpty()) {
HOBP8 = Byte.parseByte(s);
} else {
HOBP8 = Byte.MIN_VALUE;
}
}

protected final void initHOBP9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HOBP9 = false;
}
}

protected final void initHOCENH(String s) {
if (!s.trim().isEmpty()) {
HOCENH = Byte.parseByte(s);
} else {
HOCENH = Byte.MIN_VALUE;
}
}

protected final void initHODIFF(String s) {
if (!s.trim().isEmpty()) {
HODIFF = Byte.parseByte(s);
} else {
HODIFF = Byte.MIN_VALUE;
}
}

protected final void initHODIFFT(String s) {
if (!s.trim().isEmpty()) {
HODIFFT = Byte.parseByte(s);
} else {
HODIFFT = Byte.MIN_VALUE;
}
}

protected final void initHODOC(String s) {
if (!s.trim().isEmpty()) {
HODOC = Byte.parseByte(s);
} else {
HODOC = Byte.MIN_VALUE;
}
}

protected final void initHOELI(String s) {
if (!s.trim().isEmpty()) {
HOELI = Byte.parseByte(s);
} else {
HOELI = Byte.MIN_VALUE;
}
}

protected final void initHOEVM(String s) {
if (!s.trim().isEmpty()) {
HOEVM = Byte.parseByte(s);
} else {
HOEVM = Byte.MIN_VALUE;
}
}

protected final void initHOEVRE(String s) {
if (!s.trim().isEmpty()) {
HOEVRE = Byte.parseByte(s);
} else {
HOEVRE = Byte.MIN_VALUE;
}
}

protected final void initHOFOOD(String s) {
if (!s.trim().isEmpty()) {
HOFOOD = Short.parseShort(s);
} else {
HOFOOD = Short.MIN_VALUE;
}
}

protected final void initHOFURN(String s) {
if (!s.trim().isEmpty()) {
HOFURN = Byte.parseByte(s);
} else {
HOFURN = Byte.MIN_VALUE;
}
}

protected final void initHOH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HOH = false;
}
}

protected final void initHOHSP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HOHSP = false;
}
}

protected final void initHOINCC(String s) {
if (!s.trim().isEmpty()) {
HOINCC = Short.parseShort(s);
} else {
HOINCC = Short.MIN_VALUE;
}
}

protected final void initHOINTA(String s) {
if (!s.trim().isEmpty()) {
HOINTA = Byte.parseByte(s);
} else {
HOINTA = Byte.MIN_VALUE;
}
}

protected final void initHOJOB(String s) {
if (!s.trim().isEmpty()) {
HOJOB = Byte.parseByte(s);
} else {
HOJOB = Byte.MIN_VALUE;
}
}

protected final void initHOLAND(String s) {
if (!s.trim().isEmpty()) {
HOLAND = Byte.parseByte(s);
} else {
HOLAND = Byte.MIN_VALUE;
}
}

protected final void initHOMEAL(String s) {
if (!s.trim().isEmpty()) {
HOMEAL = Byte.parseByte(s);
} else {
HOMEAL = Byte.MIN_VALUE;
}
}

protected final void initHOMEI_BU_F(String s) {
if (!s.trim().isEmpty()) {
HOMEI_BU_F = Byte.parseByte(s);
} else {
HOMEI_BU_F = Byte.MIN_VALUE;
}
}

protected final void initHOMEI_BU_I(String s) {
if (!s.trim().isEmpty()) {
HOMEI_BU_I = Double.parseDouble(s);
} else {
HOMEI_BU_I = Double.NaN;
}
}

protected final void initHOMEI_BU_O(String s) {
if (!s.trim().isEmpty()) {
HOMEI_BU_O = Short.parseShort(s);
} else {
HOMEI_BU_O = Short.MIN_VALUE;
}
}

protected final void initHOMEI_BU_T(String s) {
if (!s.trim().isEmpty()) {
HOMEI_BU_T = Short.parseShort(s);
} else {
HOMEI_BU_T = Short.MIN_VALUE;
}
}

protected final void initHOME_BU_F(String s) {
if (!s.trim().isEmpty()) {
HOME_BU_F = Byte.parseByte(s);
} else {
HOME_BU_F = Byte.MIN_VALUE;
}
}

protected final void initHOME_BU_I(String s) {
if (!s.trim().isEmpty()) {
HOME_BU_I = Integer.parseInt(s);
} else {
HOME_BU_I = Integer.MIN_VALUE;
}
}

protected final void initHOME_BU_O(String s) {
if (!s.trim().isEmpty()) {
HOME_BU_O = Short.parseShort(s);
} else {
HOME_BU_O = Short.MIN_VALUE;
}
}

protected final void initHOME_BU_T(String s) {
if (!s.trim().isEmpty()) {
HOME_BU_T = Short.parseShort(s);
} else {
HOME_BU_T = Short.MIN_VALUE;
}
}

protected final void initHOMOFT(String s) {
if (!s.trim().isEmpty()) {
HOMOFT = Byte.parseByte(s);
} else {
HOMOFT = Byte.MIN_VALUE;
}
}

protected final void initHOMOVE(String s) {
if (!s.trim().isEmpty()) {
HOMOVE = Short.parseShort(s);
} else {
HOMOVE = Short.MIN_VALUE;
}
}

protected final void initHOMOVEM(String s) {
if (!s.trim().isEmpty()) {
HOMOVEM = Short.parseShort(s);
} else {
HOMOVEM = Short.MIN_VALUE;
}
}

protected final void initHOMREP(String s) {
if (!s.trim().isEmpty()) {
HOMREP = Integer.parseInt(s);
} else {
HOMREP = Integer.MIN_VALUE;
}
}

protected final void initHOOLD(String s) {
if (!s.trim().isEmpty()) {
HOOLD = Byte.parseByte(s);
} else {
HOOLD = Byte.MIN_VALUE;
}
}

protected final void initHOOLDM(String s) {
if (!s.trim().isEmpty()) {
HOOLDM = Byte.parseByte(s);
} else {
HOOLDM = Byte.MIN_VALUE;
}
}

protected final void initHOORM(String s) {
if (!s.trim().isEmpty()) {
HOORM = Byte.parseByte(s);
} else {
HOORM = Byte.MIN_VALUE;
}
}

protected final void initHOOUTF(String s) {
if (!s.trim().isEmpty()) {
HOOUTF = Short.parseShort(s);
} else {
HOOUTF = Short.MIN_VALUE;
}
}

protected final void initHOOUTM(String s) {
if (!s.trim().isEmpty()) {
HOOUTM = Byte.parseByte(s);
} else {
HOOUTM = Byte.MIN_VALUE;
}
}

protected final void initHOPART(String s) {
if (!s.trim().isEmpty()) {
HOPART = Byte.parseByte(s);
} else {
HOPART = Byte.MIN_VALUE;
}
}

protected final void initHOPAY(String s) {
if (!s.trim().isEmpty()) {
HOPAY = Integer.parseInt(s);
} else {
HOPAY = Integer.MIN_VALUE;
}
}

protected final void initHOPAYM(String s) {
if (!s.trim().isEmpty()) {
HOPAYM = Integer.parseInt(s);
} else {
HOPAYM = Integer.MIN_VALUE;
}
}

protected final void initHOPERI(String s) {
if (!s.trim().isEmpty()) {
HOPERI = Byte.parseByte(s);
} else {
HOPERI = Byte.MIN_VALUE;
}
}

protected final void initHOPID(String s) {
if (!s.trim().isEmpty()) {
HOPID = Byte.parseByte(s);
} else {
HOPID = Byte.MIN_VALUE;
}
}

protected final void initHOREBA(String s) {
if (!s.trim().isEmpty()) {
HOREBA = Short.parseShort(s);
} else {
HOREBA = Short.MIN_VALUE;
}
}

protected final void initHOREBP(String s) {
if (!s.trim().isEmpty()) {
HOREBP = Byte.parseByte(s);
} else {
HOREBP = Byte.MIN_VALUE;
}
}

protected final void initHORENFE(String s) {
if (!s.trim().isEmpty()) {
HORENFE = Byte.parseByte(s);
} else {
HORENFE = Byte.MIN_VALUE;
}
}

protected final void initHORENFL(String s) {
if (!s.trim().isEmpty()) {
HORENFL = Byte.parseByte(s);
} else {
HORENFL = Byte.MIN_VALUE;
}
}

protected final void initHORENFR(String s) {
if (!s.trim().isEmpty()) {
HORENFR = Byte.parseByte(s);
} else {
HORENFR = Byte.MIN_VALUE;
}
}

protected final void initHORENFU(String s) {
if (!s.trim().isEmpty()) {
HORENFU = Short.parseShort(s);
} else {
HORENFU = Short.MIN_VALUE;
}
}

protected final void initHORENME(String s) {
if (!s.trim().isEmpty()) {
HORENME = Byte.parseByte(s);
} else {
HORENME = Byte.MIN_VALUE;
}
}

protected final void initHORENML(String s) {
if (!s.trim().isEmpty()) {
HORENML = Short.parseShort(s);
} else {
HORENML = Short.MIN_VALUE;
}
}

protected final void initHORENMR(String s) {
if (!s.trim().isEmpty()) {
HORENMR = Byte.parseByte(s);
} else {
HORENMR = Byte.MIN_VALUE;
}
}

protected final void initHORENMU(String s) {
if (!s.trim().isEmpty()) {
HORENMU = Short.parseShort(s);
} else {
HORENMU = Short.MIN_VALUE;
}
}

protected final void initHORENOE(String s) {
if (!s.trim().isEmpty()) {
HORENOE = Byte.parseByte(s);
} else {
HORENOE = Byte.MIN_VALUE;
}
}

protected final void initHORENOL(String s) {
if (!s.trim().isEmpty()) {
HORENOL = Short.parseShort(s);
} else {
HORENOL = Short.MIN_VALUE;
}
}

protected final void initHORENOR(String s) {
if (!s.trim().isEmpty()) {
HORENOR = Byte.parseByte(s);
} else {
HORENOR = Byte.MIN_VALUE;
}
}

protected final void initHORENOU(String s) {
if (!s.trim().isEmpty()) {
HORENOU = Short.parseShort(s);
} else {
HORENOU = Short.MIN_VALUE;
}
}

protected final void initHORENT(String s) {
if (!s.trim().isEmpty()) {
HORENT = Integer.parseInt(s);
} else {
HORENT = Integer.MIN_VALUE;
}
}

protected final void initHORENWE(String s) {
if (!s.trim().isEmpty()) {
HORENWE = Byte.parseByte(s);
} else {
HORENWE = Byte.MIN_VALUE;
}
}

protected final void initHORENWL(String s) {
if (!s.trim().isEmpty()) {
HORENWL = Short.parseShort(s);
} else {
HORENWL = Short.MIN_VALUE;
}
}

protected final void initHORENWR(String s) {
if (!s.trim().isEmpty()) {
HORENWR = Byte.parseByte(s);
} else {
HORENWR = Byte.MIN_VALUE;
}
}

protected final void initHORENWU(String s) {
if (!s.trim().isEmpty()) {
HORENWU = Short.parseShort(s);
} else {
HORENWU = Short.MIN_VALUE;
}
}

protected final void initHORENYE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HORENYE = false;
}
}

protected final void initHORENYL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HORENYL = false;
}
}

protected final void initHORENYR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HORENYR = false;
}
}

protected final void initHORENYU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HORENYU = false;
}
}

protected final void initHOROOM(String s) {
if (!s.trim().isEmpty()) {
HOROOM = Byte.parseByte(s);
} else {
HOROOM = Byte.MIN_VALUE;
}
}

protected final void initHORTB(String s) {
if (!s.trim().isEmpty()) {
HORTB = Byte.parseByte(s);
} else {
HORTB = Byte.MIN_VALUE;
}
}

protected final void initHORTBE(String s) {
if (!s.trim().isEmpty()) {
HORTBE = Byte.parseByte(s);
} else {
HORTBE = Byte.MIN_VALUE;
}
}

protected final void initHOSELLP(String s) {
if (!s.trim().isEmpty()) {
HOSELLP = Integer.parseInt(s);
} else {
HOSELLP = Integer.MIN_VALUE;
}
}

protected final void initHOTENU(String s) {
if (!s.trim().isEmpty()) {
HOTENU = Byte.parseByte(s);
} else {
HOTENU = Byte.MIN_VALUE;
}
}

protected final void initHOTENUN(String s) {
if (!s.trim().isEmpty()) {
HOTENUN = Byte.parseByte(s);
} else {
HOTENUN = Byte.MIN_VALUE;
}
}

protected final void initHOURS(String s) {
if (!s.trim().isEmpty()) {
HOURS = Short.parseShort(s);
} else {
HOURS = Short.MIN_VALUE;
}
}

protected final void initHOURS_AJ(String s) {
if (!s.trim().isEmpty()) {
HOURS_AJ = Short.parseShort(s);
} else {
HOURS_AJ = Short.MIN_VALUE;
}
}

protected final void initHOVAG(String s) {
if (!s.trim().isEmpty()) {
HOVAG = Byte.parseByte(s);
} else {
HOVAG = Byte.MIN_VALUE;
}
}

protected final void initHOVAG10(String s) {
if (!s.trim().isEmpty()) {
HOVAG10 = Byte.parseByte(s);
} else {
HOVAG10 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG2(String s) {
if (!s.trim().isEmpty()) {
HOVAG2 = Byte.parseByte(s);
} else {
HOVAG2 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG3(String s) {
if (!s.trim().isEmpty()) {
HOVAG3 = Byte.parseByte(s);
} else {
HOVAG3 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG4(String s) {
if (!s.trim().isEmpty()) {
HOVAG4 = Byte.parseByte(s);
} else {
HOVAG4 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG5(String s) {
if (!s.trim().isEmpty()) {
HOVAG5 = Byte.parseByte(s);
} else {
HOVAG5 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG6(String s) {
if (!s.trim().isEmpty()) {
HOVAG6 = Byte.parseByte(s);
} else {
HOVAG6 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG7(String s) {
if (!s.trim().isEmpty()) {
HOVAG7 = Byte.parseByte(s);
} else {
HOVAG7 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG8(String s) {
if (!s.trim().isEmpty()) {
HOVAG8 = Byte.parseByte(s);
} else {
HOVAG8 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG9(String s) {
if (!s.trim().isEmpty()) {
HOVAG9 = Byte.parseByte(s);
} else {
HOVAG9 = Byte.MIN_VALUE;
}
}

protected final void initHOVEH(String s) {
if (!s.trim().isEmpty()) {
HOVEH = Byte.parseByte(s);
} else {
HOVEH = Byte.MIN_VALUE;
}
}

protected final void initHOVW(String s) {
if (!s.trim().isEmpty()) {
HOVW = Byte.parseByte(s);
} else {
HOVW = Byte.MIN_VALUE;
}
}

protected final void initHOVW10(String s) {
if (!s.trim().isEmpty()) {
HOVW10 = Byte.parseByte(s);
} else {
HOVW10 = Byte.MIN_VALUE;
}
}

protected final void initHOVW9(String s) {
if (!s.trim().isEmpty()) {
HOVW9 = Byte.parseByte(s);
} else {
HOVW9 = Byte.MIN_VALUE;
}
}

protected final void initHOWHO(String s) {
if (!s.trim().isEmpty()) {
HOWHO = Byte.parseByte(s);
} else {
HOWHO = Byte.MIN_VALUE;
}
}

protected final void initHOYEAR(String s) {
if (!s.trim().isEmpty()) {
HOYEAR = Short.parseShort(s);
} else {
HOYEAR = Short.MIN_VALUE;
}
}

protected final void initHOYEARM(String s) {
if (!s.trim().isEmpty()) {
HOYEARM = Short.parseShort(s);
} else {
HOYEARM = Short.MIN_VALUE;
}
}

protected final void initHPOPR(String s) {
if (!s.trim().isEmpty()) {
HPOPR = Byte.parseByte(s);
} else {
HPOPR = Byte.MIN_VALUE;
}
}

protected final void initHRSFIRST(String s) {
if (!s.trim().isEmpty()) {
HRSFIRST = Byte.parseByte(s);
} else {
HRSFIRST = Byte.MIN_VALUE;
}
}

protected final void initHSVAL_HH_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
HSVAL_HH_F = false;
}
}

protected final void initHSVAL_HH_I(String s) {
if (!s.trim().isEmpty()) {
HSVAL_HH_I = Double.parseDouble(s);
} else {
HSVAL_HH_I = Double.NaN;
}
}

protected final void initHSVAL_HH_O(String s) {
if (!s.trim().isEmpty()) {
HSVAL_HH_O = Short.parseShort(s);
} else {
HSVAL_HH_O = Short.MIN_VALUE;
}
}

protected final void initHSVAL_HH_T(String s) {
if (!s.trim().isEmpty()) {
HSVAL_HH_T = Short.parseShort(s);
} else {
HSVAL_HH_T = Short.MIN_VALUE;
}
}

protected final void initIAA(String s) {
if (!s.trim().isEmpty()) {
IAA = Short.parseShort(s);
} else {
IAA = Short.MIN_VALUE;
}
}

protected final void initIAA10(String s) {
if (!s.trim().isEmpty()) {
IAA10 = Short.parseShort(s);
} else {
IAA10 = Short.MIN_VALUE;
}
}

protected final void initIAA10FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA10FE = false;
}
}

protected final void initIAA10FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA10FL = false;
}
}

protected final void initIAA10FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA10FR = false;
}
}

protected final void initIAA10FU(String s) {
if (!s.trim().isEmpty()) {
IAA10FU = Short.parseShort(s);
} else {
IAA10FU = Short.MIN_VALUE;
}
}

protected final void initIAA10ME(String s) {
if (!s.trim().isEmpty()) {
IAA10ME = Byte.parseByte(s);
} else {
IAA10ME = Byte.MIN_VALUE;
}
}

protected final void initIAA10ML(String s) {
if (!s.trim().isEmpty()) {
IAA10ML = Short.parseShort(s);
} else {
IAA10ML = Short.MIN_VALUE;
}
}

protected final void initIAA10MR(String s) {
if (!s.trim().isEmpty()) {
IAA10MR = Byte.parseByte(s);
} else {
IAA10MR = Byte.MIN_VALUE;
}
}

protected final void initIAA10MU(String s) {
if (!s.trim().isEmpty()) {
IAA10MU = Short.parseShort(s);
} else {
IAA10MU = Short.MIN_VALUE;
}
}

protected final void initIAA10OE(String s) {
if (!s.trim().isEmpty()) {
IAA10OE = Byte.parseByte(s);
} else {
IAA10OE = Byte.MIN_VALUE;
}
}

protected final void initIAA10OL(String s) {
if (!s.trim().isEmpty()) {
IAA10OL = Short.parseShort(s);
} else {
IAA10OL = Short.MIN_VALUE;
}
}

protected final void initIAA10OR(String s) {
if (!s.trim().isEmpty()) {
IAA10OR = Byte.parseByte(s);
} else {
IAA10OR = Byte.MIN_VALUE;
}
}

protected final void initIAA10OU(String s) {
if (!s.trim().isEmpty()) {
IAA10OU = Short.parseShort(s);
} else {
IAA10OU = Short.MIN_VALUE;
}
}

protected final void initIAA10WE(String s) {
if (!s.trim().isEmpty()) {
IAA10WE = Byte.parseByte(s);
} else {
IAA10WE = Byte.MIN_VALUE;
}
}

protected final void initIAA10WL(String s) {
if (!s.trim().isEmpty()) {
IAA10WL = Short.parseShort(s);
} else {
IAA10WL = Short.MIN_VALUE;
}
}

protected final void initIAA10WR(String s) {
if (!s.trim().isEmpty()) {
IAA10WR = Byte.parseByte(s);
} else {
IAA10WR = Byte.MIN_VALUE;
}
}

protected final void initIAA10WU(String s) {
if (!s.trim().isEmpty()) {
IAA10WU = Byte.parseByte(s);
} else {
IAA10WU = Byte.MIN_VALUE;
}
}

protected final void initIAA10YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA10YE = false;
}
}

protected final void initIAA10YL(String s) {
if (!s.trim().isEmpty()) {
IAA10YL = Short.parseShort(s);
} else {
IAA10YL = Short.MIN_VALUE;
}
}

protected final void initIAA10YR(String s) {
if (!s.trim().isEmpty()) {
IAA10YR = Byte.parseByte(s);
} else {
IAA10YR = Byte.MIN_VALUE;
}
}

protected final void initIAA10YU(String s) {
if (!s.trim().isEmpty()) {
IAA10YU = Short.parseShort(s);
} else {
IAA10YU = Short.MIN_VALUE;
}
}

protected final void initIAA11(String s) {
if (!s.trim().isEmpty()) {
IAA11 = Short.parseShort(s);
} else {
IAA11 = Short.MIN_VALUE;
}
}

protected final void initIAA11FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA11FE = false;
}
}

protected final void initIAA11FL(String s) {
if (!s.trim().isEmpty()) {
IAA11FL = Short.parseShort(s);
} else {
IAA11FL = Short.MIN_VALUE;
}
}

protected final void initIAA11FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA11FR = false;
}
}

protected final void initIAA11FU(String s) {
if (!s.trim().isEmpty()) {
IAA11FU = Short.parseShort(s);
} else {
IAA11FU = Short.MIN_VALUE;
}
}

protected final void initIAA11ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA11ME = false;
}
}

protected final void initIAA11ML(String s) {
if (!s.trim().isEmpty()) {
IAA11ML = Short.parseShort(s);
} else {
IAA11ML = Short.MIN_VALUE;
}
}

protected final void initIAA11MR(String s) {
if (!s.trim().isEmpty()) {
IAA11MR = Byte.parseByte(s);
} else {
IAA11MR = Byte.MIN_VALUE;
}
}

protected final void initIAA11MU(String s) {
if (!s.trim().isEmpty()) {
IAA11MU = Short.parseShort(s);
} else {
IAA11MU = Short.MIN_VALUE;
}
}

protected final void initIAA11OE(String s) {
if (!s.trim().isEmpty()) {
IAA11OE = Byte.parseByte(s);
} else {
IAA11OE = Byte.MIN_VALUE;
}
}

protected final void initIAA11OL(String s) {
if (!s.trim().isEmpty()) {
IAA11OL = Short.parseShort(s);
} else {
IAA11OL = Short.MIN_VALUE;
}
}

protected final void initIAA11OR(String s) {
if (!s.trim().isEmpty()) {
IAA11OR = Byte.parseByte(s);
} else {
IAA11OR = Byte.MIN_VALUE;
}
}

protected final void initIAA11OU(String s) {
if (!s.trim().isEmpty()) {
IAA11OU = Short.parseShort(s);
} else {
IAA11OU = Short.MIN_VALUE;
}
}

protected final void initIAA11WE(String s) {
if (!s.trim().isEmpty()) {
IAA11WE = Byte.parseByte(s);
} else {
IAA11WE = Byte.MIN_VALUE;
}
}

protected final void initIAA11WL(String s) {
if (!s.trim().isEmpty()) {
IAA11WL = Short.parseShort(s);
} else {
IAA11WL = Short.MIN_VALUE;
}
}

protected final void initIAA11WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA11WR = false;
}
}

protected final void initIAA11WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA11WU = false;
}
}

protected final void initIAA11YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA11YE = false;
}
}

protected final void initIAA11YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA11YL = false;
}
}

protected final void initIAA11YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA11YR = false;
}
}

protected final void initIAA11YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA11YU = false;
}
}

protected final void initIAA12(String s) {
if (!s.trim().isEmpty()) {
IAA12 = Short.parseShort(s);
} else {
IAA12 = Short.MIN_VALUE;
}
}

protected final void initIAA12FE(String s) {
if (!s.trim().isEmpty()) {
IAA12FE = Byte.parseByte(s);
} else {
IAA12FE = Byte.MIN_VALUE;
}
}

protected final void initIAA12FL(String s) {
if (!s.trim().isEmpty()) {
IAA12FL = Short.parseShort(s);
} else {
IAA12FL = Short.MIN_VALUE;
}
}

protected final void initIAA12FR(String s) {
if (!s.trim().isEmpty()) {
IAA12FR = Byte.parseByte(s);
} else {
IAA12FR = Byte.MIN_VALUE;
}
}

protected final void initIAA12FU(String s) {
if (!s.trim().isEmpty()) {
IAA12FU = Byte.parseByte(s);
} else {
IAA12FU = Byte.MIN_VALUE;
}
}

protected final void initIAA12ME(String s) {
if (!s.trim().isEmpty()) {
IAA12ME = Byte.parseByte(s);
} else {
IAA12ME = Byte.MIN_VALUE;
}
}

protected final void initIAA12ML(String s) {
if (!s.trim().isEmpty()) {
IAA12ML = Short.parseShort(s);
} else {
IAA12ML = Short.MIN_VALUE;
}
}

protected final void initIAA12MR(String s) {
if (!s.trim().isEmpty()) {
IAA12MR = Byte.parseByte(s);
} else {
IAA12MR = Byte.MIN_VALUE;
}
}

protected final void initIAA12MU(String s) {
if (!s.trim().isEmpty()) {
IAA12MU = Short.parseShort(s);
} else {
IAA12MU = Short.MIN_VALUE;
}
}

protected final void initIAA12OE(String s) {
if (!s.trim().isEmpty()) {
IAA12OE = Byte.parseByte(s);
} else {
IAA12OE = Byte.MIN_VALUE;
}
}

protected final void initIAA12OL(String s) {
if (!s.trim().isEmpty()) {
IAA12OL = Short.parseShort(s);
} else {
IAA12OL = Short.MIN_VALUE;
}
}

protected final void initIAA12OR(String s) {
if (!s.trim().isEmpty()) {
IAA12OR = Byte.parseByte(s);
} else {
IAA12OR = Byte.MIN_VALUE;
}
}

protected final void initIAA12OU(String s) {
if (!s.trim().isEmpty()) {
IAA12OU = Short.parseShort(s);
} else {
IAA12OU = Short.MIN_VALUE;
}
}

protected final void initIAA12WE(String s) {
if (!s.trim().isEmpty()) {
IAA12WE = Byte.parseByte(s);
} else {
IAA12WE = Byte.MIN_VALUE;
}
}

protected final void initIAA12WL(String s) {
if (!s.trim().isEmpty()) {
IAA12WL = Short.parseShort(s);
} else {
IAA12WL = Short.MIN_VALUE;
}
}

protected final void initIAA12WR(String s) {
if (!s.trim().isEmpty()) {
IAA12WR = Byte.parseByte(s);
} else {
IAA12WR = Byte.MIN_VALUE;
}
}

protected final void initIAA12WU(String s) {
if (!s.trim().isEmpty()) {
IAA12WU = Short.parseShort(s);
} else {
IAA12WU = Short.MIN_VALUE;
}
}

protected final void initIAA12YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA12YE = false;
}
}

protected final void initIAA12YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA12YL = false;
}
}

protected final void initIAA12YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA12YR = false;
}
}

protected final void initIAA12YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA12YU = false;
}
}

protected final void initIAA13(String s) {
if (!s.trim().isEmpty()) {
IAA13 = Short.parseShort(s);
} else {
IAA13 = Short.MIN_VALUE;
}
}

protected final void initIAA13FE(String s) {
if (!s.trim().isEmpty()) {
IAA13FE = Byte.parseByte(s);
} else {
IAA13FE = Byte.MIN_VALUE;
}
}

protected final void initIAA13FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA13FL = false;
}
}

protected final void initIAA13FR(String s) {
if (!s.trim().isEmpty()) {
IAA13FR = Byte.parseByte(s);
} else {
IAA13FR = Byte.MIN_VALUE;
}
}

protected final void initIAA13FU(String s) {
if (!s.trim().isEmpty()) {
IAA13FU = Short.parseShort(s);
} else {
IAA13FU = Short.MIN_VALUE;
}
}

protected final void initIAA13ME(String s) {
if (!s.trim().isEmpty()) {
IAA13ME = Byte.parseByte(s);
} else {
IAA13ME = Byte.MIN_VALUE;
}
}

protected final void initIAA13ML(String s) {
if (!s.trim().isEmpty()) {
IAA13ML = Short.parseShort(s);
} else {
IAA13ML = Short.MIN_VALUE;
}
}

protected final void initIAA13MR(String s) {
if (!s.trim().isEmpty()) {
IAA13MR = Byte.parseByte(s);
} else {
IAA13MR = Byte.MIN_VALUE;
}
}

protected final void initIAA13MU(String s) {
if (!s.trim().isEmpty()) {
IAA13MU = Short.parseShort(s);
} else {
IAA13MU = Short.MIN_VALUE;
}
}

protected final void initIAA13OE(String s) {
if (!s.trim().isEmpty()) {
IAA13OE = Byte.parseByte(s);
} else {
IAA13OE = Byte.MIN_VALUE;
}
}

protected final void initIAA13OL(String s) {
if (!s.trim().isEmpty()) {
IAA13OL = Short.parseShort(s);
} else {
IAA13OL = Short.MIN_VALUE;
}
}

protected final void initIAA13OR(String s) {
if (!s.trim().isEmpty()) {
IAA13OR = Byte.parseByte(s);
} else {
IAA13OR = Byte.MIN_VALUE;
}
}

protected final void initIAA13OU(String s) {
if (!s.trim().isEmpty()) {
IAA13OU = Short.parseShort(s);
} else {
IAA13OU = Short.MIN_VALUE;
}
}

protected final void initIAA13WE(String s) {
if (!s.trim().isEmpty()) {
IAA13WE = Byte.parseByte(s);
} else {
IAA13WE = Byte.MIN_VALUE;
}
}

protected final void initIAA13WL(String s) {
if (!s.trim().isEmpty()) {
IAA13WL = Short.parseShort(s);
} else {
IAA13WL = Short.MIN_VALUE;
}
}

protected final void initIAA13WR(String s) {
if (!s.trim().isEmpty()) {
IAA13WR = Byte.parseByte(s);
} else {
IAA13WR = Byte.MIN_VALUE;
}
}

protected final void initIAA13WU(String s) {
if (!s.trim().isEmpty()) {
IAA13WU = Short.parseShort(s);
} else {
IAA13WU = Short.MIN_VALUE;
}
}

protected final void initIAA13YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA13YE = false;
}
}

protected final void initIAA13YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA13YL = false;
}
}

protected final void initIAA13YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA13YR = false;
}
}

protected final void initIAA13YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA13YU = false;
}
}

protected final void initIAA14(String s) {
if (!s.trim().isEmpty()) {
IAA14 = Short.parseShort(s);
} else {
IAA14 = Short.MIN_VALUE;
}
}

protected final void initIAA14FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA14FE = false;
}
}

protected final void initIAA14FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA14FL = false;
}
}

protected final void initIAA14FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA14FR = false;
}
}

protected final void initIAA14FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA14FU = false;
}
}

protected final void initIAA14ME(String s) {
if (!s.trim().isEmpty()) {
IAA14ME = Byte.parseByte(s);
} else {
IAA14ME = Byte.MIN_VALUE;
}
}

protected final void initIAA14ML(String s) {
if (!s.trim().isEmpty()) {
IAA14ML = Short.parseShort(s);
} else {
IAA14ML = Short.MIN_VALUE;
}
}

protected final void initIAA14MR(String s) {
if (!s.trim().isEmpty()) {
IAA14MR = Byte.parseByte(s);
} else {
IAA14MR = Byte.MIN_VALUE;
}
}

protected final void initIAA14MU(String s) {
if (!s.trim().isEmpty()) {
IAA14MU = Short.parseShort(s);
} else {
IAA14MU = Short.MIN_VALUE;
}
}

protected final void initIAA14OE(String s) {
if (!s.trim().isEmpty()) {
IAA14OE = Byte.parseByte(s);
} else {
IAA14OE = Byte.MIN_VALUE;
}
}

protected final void initIAA14OL(String s) {
if (!s.trim().isEmpty()) {
IAA14OL = Short.parseShort(s);
} else {
IAA14OL = Short.MIN_VALUE;
}
}

protected final void initIAA14OR(String s) {
if (!s.trim().isEmpty()) {
IAA14OR = Byte.parseByte(s);
} else {
IAA14OR = Byte.MIN_VALUE;
}
}

protected final void initIAA14OU(String s) {
if (!s.trim().isEmpty()) {
IAA14OU = Short.parseShort(s);
} else {
IAA14OU = Short.MIN_VALUE;
}
}

protected final void initIAA14WE(String s) {
if (!s.trim().isEmpty()) {
IAA14WE = Byte.parseByte(s);
} else {
IAA14WE = Byte.MIN_VALUE;
}
}

protected final void initIAA14WL(String s) {
if (!s.trim().isEmpty()) {
IAA14WL = Byte.parseByte(s);
} else {
IAA14WL = Byte.MIN_VALUE;
}
}

protected final void initIAA14WR(String s) {
if (!s.trim().isEmpty()) {
IAA14WR = Byte.parseByte(s);
} else {
IAA14WR = Byte.MIN_VALUE;
}
}

protected final void initIAA14WU(String s) {
if (!s.trim().isEmpty()) {
IAA14WU = Byte.parseByte(s);
} else {
IAA14WU = Byte.MIN_VALUE;
}
}

protected final void initIAA14YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA14YE = false;
}
}

protected final void initIAA14YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA14YL = false;
}
}

protected final void initIAA14YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA14YR = false;
}
}

protected final void initIAA14YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA14YU = false;
}
}

protected final void initIAA15(String s) {
if (!s.trim().isEmpty()) {
IAA15 = Short.parseShort(s);
} else {
IAA15 = Short.MIN_VALUE;
}
}

protected final void initIAA15FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA15FE = false;
}
}

protected final void initIAA15FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA15FL = false;
}
}

protected final void initIAA15FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA15FR = false;
}
}

protected final void initIAA15FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA15FU = false;
}
}

protected final void initIAA15ME(String s) {
if (!s.trim().isEmpty()) {
IAA15ME = Byte.parseByte(s);
} else {
IAA15ME = Byte.MIN_VALUE;
}
}

protected final void initIAA15ML(String s) {
if (!s.trim().isEmpty()) {
IAA15ML = Short.parseShort(s);
} else {
IAA15ML = Short.MIN_VALUE;
}
}

protected final void initIAA15MR(String s) {
if (!s.trim().isEmpty()) {
IAA15MR = Byte.parseByte(s);
} else {
IAA15MR = Byte.MIN_VALUE;
}
}

protected final void initIAA15MU(String s) {
if (!s.trim().isEmpty()) {
IAA15MU = Short.parseShort(s);
} else {
IAA15MU = Short.MIN_VALUE;
}
}

protected final void initIAA15OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA15OE = false;
}
}

protected final void initIAA15OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA15OL = false;
}
}

protected final void initIAA15OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA15OR = false;
}
}

protected final void initIAA15OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA15OU = false;
}
}

protected final void initIAA15WE(String s) {
if (!s.trim().isEmpty()) {
IAA15WE = Byte.parseByte(s);
} else {
IAA15WE = Byte.MIN_VALUE;
}
}

protected final void initIAA15WL(String s) {
if (!s.trim().isEmpty()) {
IAA15WL = Byte.parseByte(s);
} else {
IAA15WL = Byte.MIN_VALUE;
}
}

protected final void initIAA15WR(String s) {
if (!s.trim().isEmpty()) {
IAA15WR = Byte.parseByte(s);
} else {
IAA15WR = Byte.MIN_VALUE;
}
}

protected final void initIAA15WU(String s) {
if (!s.trim().isEmpty()) {
IAA15WU = Byte.parseByte(s);
} else {
IAA15WU = Byte.MIN_VALUE;
}
}

protected final void initIAA15YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA15YE = false;
}
}

protected final void initIAA15YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA15YL = false;
}
}

protected final void initIAA15YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA15YR = false;
}
}

protected final void initIAA15YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA15YU = false;
}
}

protected final void initIAA16(String s) {
if (!s.trim().isEmpty()) {
IAA16 = Short.parseShort(s);
} else {
IAA16 = Short.MIN_VALUE;
}
}

protected final void initIAA16FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA16FE = false;
}
}

protected final void initIAA16FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA16FL = false;
}
}

protected final void initIAA16FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA16FR = false;
}
}

protected final void initIAA16FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA16FU = false;
}
}

protected final void initIAA16ME(String s) {
if (!s.trim().isEmpty()) {
IAA16ME = Byte.parseByte(s);
} else {
IAA16ME = Byte.MIN_VALUE;
}
}

protected final void initIAA16ML(String s) {
if (!s.trim().isEmpty()) {
IAA16ML = Short.parseShort(s);
} else {
IAA16ML = Short.MIN_VALUE;
}
}

protected final void initIAA16MR(String s) {
if (!s.trim().isEmpty()) {
IAA16MR = Byte.parseByte(s);
} else {
IAA16MR = Byte.MIN_VALUE;
}
}

protected final void initIAA16MU(String s) {
if (!s.trim().isEmpty()) {
IAA16MU = Short.parseShort(s);
} else {
IAA16MU = Short.MIN_VALUE;
}
}

protected final void initIAA16OE(String s) {
if (!s.trim().isEmpty()) {
IAA16OE = Byte.parseByte(s);
} else {
IAA16OE = Byte.MIN_VALUE;
}
}

protected final void initIAA16OL(String s) {
if (!s.trim().isEmpty()) {
IAA16OL = Short.parseShort(s);
} else {
IAA16OL = Short.MIN_VALUE;
}
}

protected final void initIAA16OR(String s) {
if (!s.trim().isEmpty()) {
IAA16OR = Byte.parseByte(s);
} else {
IAA16OR = Byte.MIN_VALUE;
}
}

protected final void initIAA16OU(String s) {
if (!s.trim().isEmpty()) {
IAA16OU = Short.parseShort(s);
} else {
IAA16OU = Short.MIN_VALUE;
}
}

protected final void initIAA16WE(String s) {
if (!s.trim().isEmpty()) {
IAA16WE = Byte.parseByte(s);
} else {
IAA16WE = Byte.MIN_VALUE;
}
}

protected final void initIAA16WL(String s) {
if (!s.trim().isEmpty()) {
IAA16WL = Short.parseShort(s);
} else {
IAA16WL = Short.MIN_VALUE;
}
}

protected final void initIAA16WR(String s) {
if (!s.trim().isEmpty()) {
IAA16WR = Byte.parseByte(s);
} else {
IAA16WR = Byte.MIN_VALUE;
}
}

protected final void initIAA16WU(String s) {
if (!s.trim().isEmpty()) {
IAA16WU = Short.parseShort(s);
} else {
IAA16WU = Short.MIN_VALUE;
}
}

protected final void initIAA16YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA16YE = false;
}
}

protected final void initIAA16YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA16YL = false;
}
}

protected final void initIAA16YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA16YR = false;
}
}

protected final void initIAA16YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA16YU = false;
}
}

protected final void initIAA17(String s) {
if (!s.trim().isEmpty()) {
IAA17 = Short.parseShort(s);
} else {
IAA17 = Short.MIN_VALUE;
}
}

protected final void initIAA17FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA17FE = false;
}
}

protected final void initIAA17FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA17FL = false;
}
}

protected final void initIAA17FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA17FR = false;
}
}

protected final void initIAA17FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA17FU = false;
}
}

protected final void initIAA17ME(String s) {
if (!s.trim().isEmpty()) {
IAA17ME = Byte.parseByte(s);
} else {
IAA17ME = Byte.MIN_VALUE;
}
}

protected final void initIAA17ML(String s) {
if (!s.trim().isEmpty()) {
IAA17ML = Short.parseShort(s);
} else {
IAA17ML = Short.MIN_VALUE;
}
}

protected final void initIAA17MR(String s) {
if (!s.trim().isEmpty()) {
IAA17MR = Byte.parseByte(s);
} else {
IAA17MR = Byte.MIN_VALUE;
}
}

protected final void initIAA17MU(String s) {
if (!s.trim().isEmpty()) {
IAA17MU = Short.parseShort(s);
} else {
IAA17MU = Short.MIN_VALUE;
}
}

protected final void initIAA17OE(String s) {
if (!s.trim().isEmpty()) {
IAA17OE = Byte.parseByte(s);
} else {
IAA17OE = Byte.MIN_VALUE;
}
}

protected final void initIAA17OL(String s) {
if (!s.trim().isEmpty()) {
IAA17OL = Short.parseShort(s);
} else {
IAA17OL = Short.MIN_VALUE;
}
}

protected final void initIAA17OR(String s) {
if (!s.trim().isEmpty()) {
IAA17OR = Byte.parseByte(s);
} else {
IAA17OR = Byte.MIN_VALUE;
}
}

protected final void initIAA17OU(String s) {
if (!s.trim().isEmpty()) {
IAA17OU = Short.parseShort(s);
} else {
IAA17OU = Short.MIN_VALUE;
}
}

protected final void initIAA17WE(String s) {
if (!s.trim().isEmpty()) {
IAA17WE = Byte.parseByte(s);
} else {
IAA17WE = Byte.MIN_VALUE;
}
}

protected final void initIAA17WL(String s) {
if (!s.trim().isEmpty()) {
IAA17WL = Byte.parseByte(s);
} else {
IAA17WL = Byte.MIN_VALUE;
}
}

protected final void initIAA17WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA17WR = false;
}
}

protected final void initIAA17WU(String s) {
if (!s.trim().isEmpty()) {
IAA17WU = Byte.parseByte(s);
} else {
IAA17WU = Byte.MIN_VALUE;
}
}

protected final void initIAA17YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA17YE = false;
}
}

protected final void initIAA17YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA17YL = false;
}
}

protected final void initIAA17YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA17YR = false;
}
}

protected final void initIAA17YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA17YU = false;
}
}

protected final void initIAA18(String s) {
if (!s.trim().isEmpty()) {
IAA18 = Short.parseShort(s);
} else {
IAA18 = Short.MIN_VALUE;
}
}

protected final void initIAA18FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA18FE = false;
}
}

protected final void initIAA18FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA18FL = false;
}
}

protected final void initIAA18FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA18FR = false;
}
}

protected final void initIAA18FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA18FU = false;
}
}

protected final void initIAA18ME(String s) {
if (!s.trim().isEmpty()) {
IAA18ME = Byte.parseByte(s);
} else {
IAA18ME = Byte.MIN_VALUE;
}
}

protected final void initIAA18ML(String s) {
if (!s.trim().isEmpty()) {
IAA18ML = Short.parseShort(s);
} else {
IAA18ML = Short.MIN_VALUE;
}
}

protected final void initIAA18MR(String s) {
if (!s.trim().isEmpty()) {
IAA18MR = Byte.parseByte(s);
} else {
IAA18MR = Byte.MIN_VALUE;
}
}

protected final void initIAA18MU(String s) {
if (!s.trim().isEmpty()) {
IAA18MU = Short.parseShort(s);
} else {
IAA18MU = Short.MIN_VALUE;
}
}

protected final void initIAA18OE(String s) {
if (!s.trim().isEmpty()) {
IAA18OE = Byte.parseByte(s);
} else {
IAA18OE = Byte.MIN_VALUE;
}
}

protected final void initIAA18OL(String s) {
if (!s.trim().isEmpty()) {
IAA18OL = Short.parseShort(s);
} else {
IAA18OL = Short.MIN_VALUE;
}
}

protected final void initIAA18OR(String s) {
if (!s.trim().isEmpty()) {
IAA18OR = Byte.parseByte(s);
} else {
IAA18OR = Byte.MIN_VALUE;
}
}

protected final void initIAA18OU(String s) {
if (!s.trim().isEmpty()) {
IAA18OU = Short.parseShort(s);
} else {
IAA18OU = Short.MIN_VALUE;
}
}

protected final void initIAA18WE(String s) {
if (!s.trim().isEmpty()) {
IAA18WE = Byte.parseByte(s);
} else {
IAA18WE = Byte.MIN_VALUE;
}
}

protected final void initIAA18WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA18WL = false;
}
}

protected final void initIAA18WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA18WR = false;
}
}

protected final void initIAA18WU(String s) {
if (!s.trim().isEmpty()) {
IAA18WU = Byte.parseByte(s);
} else {
IAA18WU = Byte.MIN_VALUE;
}
}

protected final void initIAA18YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA18YE = false;
}
}

protected final void initIAA18YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA18YL = false;
}
}

protected final void initIAA18YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA18YR = false;
}
}

protected final void initIAA18YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA18YU = false;
}
}

protected final void initIAA19(String s) {
if (!s.trim().isEmpty()) {
IAA19 = Short.parseShort(s);
} else {
IAA19 = Short.MIN_VALUE;
}
}

protected final void initIAA19FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA19FE = false;
}
}

protected final void initIAA19FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA19FL = false;
}
}

protected final void initIAA19FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA19FR = false;
}
}

protected final void initIAA19FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA19FU = false;
}
}

protected final void initIAA19ME(String s) {
if (!s.trim().isEmpty()) {
IAA19ME = Byte.parseByte(s);
} else {
IAA19ME = Byte.MIN_VALUE;
}
}

protected final void initIAA19ML(String s) {
if (!s.trim().isEmpty()) {
IAA19ML = Short.parseShort(s);
} else {
IAA19ML = Short.MIN_VALUE;
}
}

protected final void initIAA19MR(String s) {
if (!s.trim().isEmpty()) {
IAA19MR = Byte.parseByte(s);
} else {
IAA19MR = Byte.MIN_VALUE;
}
}

protected final void initIAA19MU(String s) {
if (!s.trim().isEmpty()) {
IAA19MU = Short.parseShort(s);
} else {
IAA19MU = Short.MIN_VALUE;
}
}

protected final void initIAA19OE(String s) {
if (!s.trim().isEmpty()) {
IAA19OE = Byte.parseByte(s);
} else {
IAA19OE = Byte.MIN_VALUE;
}
}

protected final void initIAA19OL(String s) {
if (!s.trim().isEmpty()) {
IAA19OL = Short.parseShort(s);
} else {
IAA19OL = Short.MIN_VALUE;
}
}

protected final void initIAA19OR(String s) {
if (!s.trim().isEmpty()) {
IAA19OR = Byte.parseByte(s);
} else {
IAA19OR = Byte.MIN_VALUE;
}
}

protected final void initIAA19OU(String s) {
if (!s.trim().isEmpty()) {
IAA19OU = Short.parseShort(s);
} else {
IAA19OU = Short.MIN_VALUE;
}
}

protected final void initIAA19WE(String s) {
if (!s.trim().isEmpty()) {
IAA19WE = Byte.parseByte(s);
} else {
IAA19WE = Byte.MIN_VALUE;
}
}

protected final void initIAA19WL(String s) {
if (!s.trim().isEmpty()) {
IAA19WL = Byte.parseByte(s);
} else {
IAA19WL = Byte.MIN_VALUE;
}
}

protected final void initIAA19WR(String s) {
if (!s.trim().isEmpty()) {
IAA19WR = Byte.parseByte(s);
} else {
IAA19WR = Byte.MIN_VALUE;
}
}

protected final void initIAA19WU(String s) {
if (!s.trim().isEmpty()) {
IAA19WU = Byte.parseByte(s);
} else {
IAA19WU = Byte.MIN_VALUE;
}
}

protected final void initIAA19YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA19YE = false;
}
}

protected final void initIAA19YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA19YL = false;
}
}

protected final void initIAA19YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA19YR = false;
}
}

protected final void initIAA19YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA19YU = false;
}
}

protected final void initIAA1FE(String s) {
if (!s.trim().isEmpty()) {
IAA1FE = Byte.parseByte(s);
} else {
IAA1FE = Byte.MIN_VALUE;
}
}

protected final void initIAA1FL(String s) {
if (!s.trim().isEmpty()) {
IAA1FL = Short.parseShort(s);
} else {
IAA1FL = Short.MIN_VALUE;
}
}

protected final void initIAA1FR(String s) {
if (!s.trim().isEmpty()) {
IAA1FR = Byte.parseByte(s);
} else {
IAA1FR = Byte.MIN_VALUE;
}
}

protected final void initIAA1FU(String s) {
if (!s.trim().isEmpty()) {
IAA1FU = Short.parseShort(s);
} else {
IAA1FU = Short.MIN_VALUE;
}
}

protected final void initIAA1ME(String s) {
if (!s.trim().isEmpty()) {
IAA1ME = Byte.parseByte(s);
} else {
IAA1ME = Byte.MIN_VALUE;
}
}

protected final void initIAA1ML(String s) {
if (!s.trim().isEmpty()) {
IAA1ML = Short.parseShort(s);
} else {
IAA1ML = Short.MIN_VALUE;
}
}

protected final void initIAA1MR(String s) {
if (!s.trim().isEmpty()) {
IAA1MR = Byte.parseByte(s);
} else {
IAA1MR = Byte.MIN_VALUE;
}
}

protected final void initIAA1MU(String s) {
if (!s.trim().isEmpty()) {
IAA1MU = Short.parseShort(s);
} else {
IAA1MU = Short.MIN_VALUE;
}
}

protected final void initIAA1OE(String s) {
if (!s.trim().isEmpty()) {
IAA1OE = Byte.parseByte(s);
} else {
IAA1OE = Byte.MIN_VALUE;
}
}

protected final void initIAA1OL(String s) {
if (!s.trim().isEmpty()) {
IAA1OL = Short.parseShort(s);
} else {
IAA1OL = Short.MIN_VALUE;
}
}

protected final void initIAA1OR(String s) {
if (!s.trim().isEmpty()) {
IAA1OR = Byte.parseByte(s);
} else {
IAA1OR = Byte.MIN_VALUE;
}
}

protected final void initIAA1OU(String s) {
if (!s.trim().isEmpty()) {
IAA1OU = Short.parseShort(s);
} else {
IAA1OU = Short.MIN_VALUE;
}
}

protected final void initIAA1WE(String s) {
if (!s.trim().isEmpty()) {
IAA1WE = Byte.parseByte(s);
} else {
IAA1WE = Byte.MIN_VALUE;
}
}

protected final void initIAA1WL(String s) {
if (!s.trim().isEmpty()) {
IAA1WL = Short.parseShort(s);
} else {
IAA1WL = Short.MIN_VALUE;
}
}

protected final void initIAA1WR(String s) {
if (!s.trim().isEmpty()) {
IAA1WR = Byte.parseByte(s);
} else {
IAA1WR = Byte.MIN_VALUE;
}
}

protected final void initIAA1WU(String s) {
if (!s.trim().isEmpty()) {
IAA1WU = Short.parseShort(s);
} else {
IAA1WU = Short.MIN_VALUE;
}
}

protected final void initIAA1YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA1YE = false;
}
}

protected final void initIAA1YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA1YL = false;
}
}

protected final void initIAA1YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA1YR = false;
}
}

protected final void initIAA1YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA1YU = false;
}
}

protected final void initIAA2(String s) {
if (!s.trim().isEmpty()) {
IAA2 = Short.parseShort(s);
} else {
IAA2 = Short.MIN_VALUE;
}
}

protected final void initIAA20(String s) {
if (!s.trim().isEmpty()) {
IAA20 = Short.parseShort(s);
} else {
IAA20 = Short.MIN_VALUE;
}
}

protected final void initIAA20FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA20FE = false;
}
}

protected final void initIAA20FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA20FL = false;
}
}

protected final void initIAA20FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA20FR = false;
}
}

protected final void initIAA20FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA20FU = false;
}
}

protected final void initIAA20ME(String s) {
if (!s.trim().isEmpty()) {
IAA20ME = Byte.parseByte(s);
} else {
IAA20ME = Byte.MIN_VALUE;
}
}

protected final void initIAA20ML(String s) {
if (!s.trim().isEmpty()) {
IAA20ML = Byte.parseByte(s);
} else {
IAA20ML = Byte.MIN_VALUE;
}
}

protected final void initIAA20MR(String s) {
if (!s.trim().isEmpty()) {
IAA20MR = Byte.parseByte(s);
} else {
IAA20MR = Byte.MIN_VALUE;
}
}

protected final void initIAA20MU(String s) {
if (!s.trim().isEmpty()) {
IAA20MU = Byte.parseByte(s);
} else {
IAA20MU = Byte.MIN_VALUE;
}
}

protected final void initIAA20OE(String s) {
if (!s.trim().isEmpty()) {
IAA20OE = Byte.parseByte(s);
} else {
IAA20OE = Byte.MIN_VALUE;
}
}

protected final void initIAA20OL(String s) {
if (!s.trim().isEmpty()) {
IAA20OL = Byte.parseByte(s);
} else {
IAA20OL = Byte.MIN_VALUE;
}
}

protected final void initIAA20OR(String s) {
if (!s.trim().isEmpty()) {
IAA20OR = Byte.parseByte(s);
} else {
IAA20OR = Byte.MIN_VALUE;
}
}

protected final void initIAA20OU(String s) {
if (!s.trim().isEmpty()) {
IAA20OU = Short.parseShort(s);
} else {
IAA20OU = Short.MIN_VALUE;
}
}

protected final void initIAA20WE(String s) {
if (!s.trim().isEmpty()) {
IAA20WE = Byte.parseByte(s);
} else {
IAA20WE = Byte.MIN_VALUE;
}
}

protected final void initIAA20WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA20WL = false;
}
}

protected final void initIAA20WR(String s) {
if (!s.trim().isEmpty()) {
IAA20WR = Byte.parseByte(s);
} else {
IAA20WR = Byte.MIN_VALUE;
}
}

protected final void initIAA20WU(String s) {
if (!s.trim().isEmpty()) {
IAA20WU = Byte.parseByte(s);
} else {
IAA20WU = Byte.MIN_VALUE;
}
}

protected final void initIAA20YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA20YE = false;
}
}

protected final void initIAA20YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA20YL = false;
}
}

protected final void initIAA20YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA20YR = false;
}
}

protected final void initIAA20YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA20YU = false;
}
}

protected final void initIAA21(String s) {
if (!s.trim().isEmpty()) {
IAA21 = Short.parseShort(s);
} else {
IAA21 = Short.MIN_VALUE;
}
}

protected final void initIAA21FE(String s) {
if (!s.trim().isEmpty()) {
IAA21FE = Byte.parseByte(s);
} else {
IAA21FE = Byte.MIN_VALUE;
}
}

protected final void initIAA21FL(String s) {
if (!s.trim().isEmpty()) {
IAA21FL = Short.parseShort(s);
} else {
IAA21FL = Short.MIN_VALUE;
}
}

protected final void initIAA21FR(String s) {
if (!s.trim().isEmpty()) {
IAA21FR = Byte.parseByte(s);
} else {
IAA21FR = Byte.MIN_VALUE;
}
}

protected final void initIAA21FU(String s) {
if (!s.trim().isEmpty()) {
IAA21FU = Short.parseShort(s);
} else {
IAA21FU = Short.MIN_VALUE;
}
}

protected final void initIAA21ME(String s) {
if (!s.trim().isEmpty()) {
IAA21ME = Byte.parseByte(s);
} else {
IAA21ME = Byte.MIN_VALUE;
}
}

protected final void initIAA21ML(String s) {
if (!s.trim().isEmpty()) {
IAA21ML = Short.parseShort(s);
} else {
IAA21ML = Short.MIN_VALUE;
}
}

protected final void initIAA21MR(String s) {
if (!s.trim().isEmpty()) {
IAA21MR = Byte.parseByte(s);
} else {
IAA21MR = Byte.MIN_VALUE;
}
}

protected final void initIAA21MU(String s) {
if (!s.trim().isEmpty()) {
IAA21MU = Short.parseShort(s);
} else {
IAA21MU = Short.MIN_VALUE;
}
}

protected final void initIAA21OE(String s) {
if (!s.trim().isEmpty()) {
IAA21OE = Byte.parseByte(s);
} else {
IAA21OE = Byte.MIN_VALUE;
}
}

protected final void initIAA21OL(String s) {
if (!s.trim().isEmpty()) {
IAA21OL = Short.parseShort(s);
} else {
IAA21OL = Short.MIN_VALUE;
}
}

protected final void initIAA21OR(String s) {
if (!s.trim().isEmpty()) {
IAA21OR = Byte.parseByte(s);
} else {
IAA21OR = Byte.MIN_VALUE;
}
}

protected final void initIAA21OU(String s) {
if (!s.trim().isEmpty()) {
IAA21OU = Short.parseShort(s);
} else {
IAA21OU = Short.MIN_VALUE;
}
}

protected final void initIAA21WE(String s) {
if (!s.trim().isEmpty()) {
IAA21WE = Byte.parseByte(s);
} else {
IAA21WE = Byte.MIN_VALUE;
}
}

protected final void initIAA21WL(String s) {
if (!s.trim().isEmpty()) {
IAA21WL = Short.parseShort(s);
} else {
IAA21WL = Short.MIN_VALUE;
}
}

protected final void initIAA21WR(String s) {
if (!s.trim().isEmpty()) {
IAA21WR = Byte.parseByte(s);
} else {
IAA21WR = Byte.MIN_VALUE;
}
}

protected final void initIAA21WU(String s) {
if (!s.trim().isEmpty()) {
IAA21WU = Short.parseShort(s);
} else {
IAA21WU = Short.MIN_VALUE;
}
}

protected final void initIAA21YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA21YE = false;
}
}

protected final void initIAA21YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA21YL = false;
}
}

protected final void initIAA21YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA21YR = false;
}
}

protected final void initIAA21YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA21YU = false;
}
}

protected final void initIAA22(String s) {
if (!s.trim().isEmpty()) {
IAA22 = Short.parseShort(s);
} else {
IAA22 = Short.MIN_VALUE;
}
}

protected final void initIAA22FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA22FE = false;
}
}

protected final void initIAA22FL(String s) {
if (!s.trim().isEmpty()) {
IAA22FL = Short.parseShort(s);
} else {
IAA22FL = Short.MIN_VALUE;
}
}

protected final void initIAA22FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA22FR = false;
}
}

protected final void initIAA22FU(String s) {
if (!s.trim().isEmpty()) {
IAA22FU = Short.parseShort(s);
} else {
IAA22FU = Short.MIN_VALUE;
}
}

protected final void initIAA22ME(String s) {
if (!s.trim().isEmpty()) {
IAA22ME = Byte.parseByte(s);
} else {
IAA22ME = Byte.MIN_VALUE;
}
}

protected final void initIAA22ML(String s) {
if (!s.trim().isEmpty()) {
IAA22ML = Short.parseShort(s);
} else {
IAA22ML = Short.MIN_VALUE;
}
}

protected final void initIAA22MR(String s) {
if (!s.trim().isEmpty()) {
IAA22MR = Byte.parseByte(s);
} else {
IAA22MR = Byte.MIN_VALUE;
}
}

protected final void initIAA22MU(String s) {
if (!s.trim().isEmpty()) {
IAA22MU = Short.parseShort(s);
} else {
IAA22MU = Short.MIN_VALUE;
}
}

protected final void initIAA22OE(String s) {
if (!s.trim().isEmpty()) {
IAA22OE = Byte.parseByte(s);
} else {
IAA22OE = Byte.MIN_VALUE;
}
}

protected final void initIAA22OL(String s) {
if (!s.trim().isEmpty()) {
IAA22OL = Short.parseShort(s);
} else {
IAA22OL = Short.MIN_VALUE;
}
}

protected final void initIAA22OR(String s) {
if (!s.trim().isEmpty()) {
IAA22OR = Byte.parseByte(s);
} else {
IAA22OR = Byte.MIN_VALUE;
}
}

protected final void initIAA22OU(String s) {
if (!s.trim().isEmpty()) {
IAA22OU = Short.parseShort(s);
} else {
IAA22OU = Short.MIN_VALUE;
}
}

protected final void initIAA22WE(String s) {
if (!s.trim().isEmpty()) {
IAA22WE = Byte.parseByte(s);
} else {
IAA22WE = Byte.MIN_VALUE;
}
}

protected final void initIAA22WL(String s) {
if (!s.trim().isEmpty()) {
IAA22WL = Short.parseShort(s);
} else {
IAA22WL = Short.MIN_VALUE;
}
}

protected final void initIAA22WR(String s) {
if (!s.trim().isEmpty()) {
IAA22WR = Byte.parseByte(s);
} else {
IAA22WR = Byte.MIN_VALUE;
}
}

protected final void initIAA22WU(String s) {
if (!s.trim().isEmpty()) {
IAA22WU = Short.parseShort(s);
} else {
IAA22WU = Short.MIN_VALUE;
}
}

protected final void initIAA22YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA22YE = false;
}
}

protected final void initIAA22YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA22YL = false;
}
}

protected final void initIAA22YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA22YR = false;
}
}

protected final void initIAA22YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA22YU = false;
}
}

protected final void initIAA23(String s) {
if (!s.trim().isEmpty()) {
IAA23 = Short.parseShort(s);
} else {
IAA23 = Short.MIN_VALUE;
}
}

protected final void initIAA23FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA23FE = false;
}
}

protected final void initIAA23FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA23FL = false;
}
}

protected final void initIAA23FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA23FR = false;
}
}

protected final void initIAA23FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA23FU = false;
}
}

protected final void initIAA23ME(String s) {
if (!s.trim().isEmpty()) {
IAA23ME = Byte.parseByte(s);
} else {
IAA23ME = Byte.MIN_VALUE;
}
}

protected final void initIAA23ML(String s) {
if (!s.trim().isEmpty()) {
IAA23ML = Short.parseShort(s);
} else {
IAA23ML = Short.MIN_VALUE;
}
}

protected final void initIAA23MR(String s) {
if (!s.trim().isEmpty()) {
IAA23MR = Byte.parseByte(s);
} else {
IAA23MR = Byte.MIN_VALUE;
}
}

protected final void initIAA23MU(String s) {
if (!s.trim().isEmpty()) {
IAA23MU = Short.parseShort(s);
} else {
IAA23MU = Short.MIN_VALUE;
}
}

protected final void initIAA23OE(String s) {
if (!s.trim().isEmpty()) {
IAA23OE = Byte.parseByte(s);
} else {
IAA23OE = Byte.MIN_VALUE;
}
}

protected final void initIAA23OL(String s) {
if (!s.trim().isEmpty()) {
IAA23OL = Short.parseShort(s);
} else {
IAA23OL = Short.MIN_VALUE;
}
}

protected final void initIAA23OR(String s) {
if (!s.trim().isEmpty()) {
IAA23OR = Byte.parseByte(s);
} else {
IAA23OR = Byte.MIN_VALUE;
}
}

protected final void initIAA23OU(String s) {
if (!s.trim().isEmpty()) {
IAA23OU = Short.parseShort(s);
} else {
IAA23OU = Short.MIN_VALUE;
}
}

protected final void initIAA23WE(String s) {
if (!s.trim().isEmpty()) {
IAA23WE = Byte.parseByte(s);
} else {
IAA23WE = Byte.MIN_VALUE;
}
}

protected final void initIAA23WL(String s) {
if (!s.trim().isEmpty()) {
IAA23WL = Short.parseShort(s);
} else {
IAA23WL = Short.MIN_VALUE;
}
}

protected final void initIAA23WR(String s) {
if (!s.trim().isEmpty()) {
IAA23WR = Byte.parseByte(s);
} else {
IAA23WR = Byte.MIN_VALUE;
}
}

protected final void initIAA23WU(String s) {
if (!s.trim().isEmpty()) {
IAA23WU = Short.parseShort(s);
} else {
IAA23WU = Short.MIN_VALUE;
}
}

protected final void initIAA23YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA23YE = false;
}
}

protected final void initIAA23YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA23YL = false;
}
}

protected final void initIAA23YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA23YR = false;
}
}

protected final void initIAA23YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA23YU = false;
}
}

protected final void initIAA24(String s) {
if (!s.trim().isEmpty()) {
IAA24 = Short.parseShort(s);
} else {
IAA24 = Short.MIN_VALUE;
}
}

protected final void initIAA24FE(String s) {
if (!s.trim().isEmpty()) {
IAA24FE = Byte.parseByte(s);
} else {
IAA24FE = Byte.MIN_VALUE;
}
}

protected final void initIAA24FL(String s) {
if (!s.trim().isEmpty()) {
IAA24FL = Short.parseShort(s);
} else {
IAA24FL = Short.MIN_VALUE;
}
}

protected final void initIAA24FR(String s) {
if (!s.trim().isEmpty()) {
IAA24FR = Byte.parseByte(s);
} else {
IAA24FR = Byte.MIN_VALUE;
}
}

protected final void initIAA24FU(String s) {
if (!s.trim().isEmpty()) {
IAA24FU = Byte.parseByte(s);
} else {
IAA24FU = Byte.MIN_VALUE;
}
}

protected final void initIAA24ME(String s) {
if (!s.trim().isEmpty()) {
IAA24ME = Byte.parseByte(s);
} else {
IAA24ME = Byte.MIN_VALUE;
}
}

protected final void initIAA24ML(String s) {
if (!s.trim().isEmpty()) {
IAA24ML = Short.parseShort(s);
} else {
IAA24ML = Short.MIN_VALUE;
}
}

protected final void initIAA24MR(String s) {
if (!s.trim().isEmpty()) {
IAA24MR = Byte.parseByte(s);
} else {
IAA24MR = Byte.MIN_VALUE;
}
}

protected final void initIAA24MU(String s) {
if (!s.trim().isEmpty()) {
IAA24MU = Short.parseShort(s);
} else {
IAA24MU = Short.MIN_VALUE;
}
}

protected final void initIAA24OE(String s) {
if (!s.trim().isEmpty()) {
IAA24OE = Byte.parseByte(s);
} else {
IAA24OE = Byte.MIN_VALUE;
}
}

protected final void initIAA24OL(String s) {
if (!s.trim().isEmpty()) {
IAA24OL = Short.parseShort(s);
} else {
IAA24OL = Short.MIN_VALUE;
}
}

protected final void initIAA24OR(String s) {
if (!s.trim().isEmpty()) {
IAA24OR = Byte.parseByte(s);
} else {
IAA24OR = Byte.MIN_VALUE;
}
}

protected final void initIAA24OU(String s) {
if (!s.trim().isEmpty()) {
IAA24OU = Short.parseShort(s);
} else {
IAA24OU = Short.MIN_VALUE;
}
}

protected final void initIAA24WE(String s) {
if (!s.trim().isEmpty()) {
IAA24WE = Byte.parseByte(s);
} else {
IAA24WE = Byte.MIN_VALUE;
}
}

protected final void initIAA24WL(String s) {
if (!s.trim().isEmpty()) {
IAA24WL = Byte.parseByte(s);
} else {
IAA24WL = Byte.MIN_VALUE;
}
}

protected final void initIAA24WR(String s) {
if (!s.trim().isEmpty()) {
IAA24WR = Byte.parseByte(s);
} else {
IAA24WR = Byte.MIN_VALUE;
}
}

protected final void initIAA24WU(String s) {
if (!s.trim().isEmpty()) {
IAA24WU = Byte.parseByte(s);
} else {
IAA24WU = Byte.MIN_VALUE;
}
}

protected final void initIAA24YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA24YE = false;
}
}

protected final void initIAA24YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA24YL = false;
}
}

protected final void initIAA24YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA24YR = false;
}
}

protected final void initIAA24YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA24YU = false;
}
}

protected final void initIAA25(String s) {
if (!s.trim().isEmpty()) {
IAA25 = Short.parseShort(s);
} else {
IAA25 = Short.MIN_VALUE;
}
}

protected final void initIAA25FE(String s) {
if (!s.trim().isEmpty()) {
IAA25FE = Byte.parseByte(s);
} else {
IAA25FE = Byte.MIN_VALUE;
}
}

protected final void initIAA25FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA25FL = false;
}
}

protected final void initIAA25FR(String s) {
if (!s.trim().isEmpty()) {
IAA25FR = Byte.parseByte(s);
} else {
IAA25FR = Byte.MIN_VALUE;
}
}

protected final void initIAA25FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA25FU = false;
}
}

protected final void initIAA25ME(String s) {
if (!s.trim().isEmpty()) {
IAA25ME = Byte.parseByte(s);
} else {
IAA25ME = Byte.MIN_VALUE;
}
}

protected final void initIAA25ML(String s) {
if (!s.trim().isEmpty()) {
IAA25ML = Short.parseShort(s);
} else {
IAA25ML = Short.MIN_VALUE;
}
}

protected final void initIAA25MR(String s) {
if (!s.trim().isEmpty()) {
IAA25MR = Byte.parseByte(s);
} else {
IAA25MR = Byte.MIN_VALUE;
}
}

protected final void initIAA25MU(String s) {
if (!s.trim().isEmpty()) {
IAA25MU = Short.parseShort(s);
} else {
IAA25MU = Short.MIN_VALUE;
}
}

protected final void initIAA25OE(String s) {
if (!s.trim().isEmpty()) {
IAA25OE = Byte.parseByte(s);
} else {
IAA25OE = Byte.MIN_VALUE;
}
}

protected final void initIAA25OL(String s) {
if (!s.trim().isEmpty()) {
IAA25OL = Short.parseShort(s);
} else {
IAA25OL = Short.MIN_VALUE;
}
}

protected final void initIAA25OR(String s) {
if (!s.trim().isEmpty()) {
IAA25OR = Byte.parseByte(s);
} else {
IAA25OR = Byte.MIN_VALUE;
}
}

protected final void initIAA25OU(String s) {
if (!s.trim().isEmpty()) {
IAA25OU = Short.parseShort(s);
} else {
IAA25OU = Short.MIN_VALUE;
}
}

protected final void initIAA25WE(String s) {
if (!s.trim().isEmpty()) {
IAA25WE = Byte.parseByte(s);
} else {
IAA25WE = Byte.MIN_VALUE;
}
}

protected final void initIAA25WL(String s) {
if (!s.trim().isEmpty()) {
IAA25WL = Byte.parseByte(s);
} else {
IAA25WL = Byte.MIN_VALUE;
}
}

protected final void initIAA25WR(String s) {
if (!s.trim().isEmpty()) {
IAA25WR = Byte.parseByte(s);
} else {
IAA25WR = Byte.MIN_VALUE;
}
}

protected final void initIAA25WU(String s) {
if (!s.trim().isEmpty()) {
IAA25WU = Byte.parseByte(s);
} else {
IAA25WU = Byte.MIN_VALUE;
}
}

protected final void initIAA25YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA25YE = false;
}
}

protected final void initIAA25YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA25YL = false;
}
}

protected final void initIAA25YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA25YR = false;
}
}

protected final void initIAA25YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA25YU = false;
}
}

protected final void initIAA26(String s) {
if (!s.trim().isEmpty()) {
IAA26 = Short.parseShort(s);
} else {
IAA26 = Short.MIN_VALUE;
}
}

protected final void initIAA26FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA26FE = false;
}
}

protected final void initIAA26FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA26FL = false;
}
}

protected final void initIAA26FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA26FR = false;
}
}

protected final void initIAA26FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA26FU = false;
}
}

protected final void initIAA26ME(String s) {
if (!s.trim().isEmpty()) {
IAA26ME = Byte.parseByte(s);
} else {
IAA26ME = Byte.MIN_VALUE;
}
}

protected final void initIAA26ML(String s) {
if (!s.trim().isEmpty()) {
IAA26ML = Short.parseShort(s);
} else {
IAA26ML = Short.MIN_VALUE;
}
}

protected final void initIAA26MR(String s) {
if (!s.trim().isEmpty()) {
IAA26MR = Byte.parseByte(s);
} else {
IAA26MR = Byte.MIN_VALUE;
}
}

protected final void initIAA26MU(String s) {
if (!s.trim().isEmpty()) {
IAA26MU = Short.parseShort(s);
} else {
IAA26MU = Short.MIN_VALUE;
}
}

protected final void initIAA26OE(String s) {
if (!s.trim().isEmpty()) {
IAA26OE = Byte.parseByte(s);
} else {
IAA26OE = Byte.MIN_VALUE;
}
}

protected final void initIAA26OL(String s) {
if (!s.trim().isEmpty()) {
IAA26OL = Short.parseShort(s);
} else {
IAA26OL = Short.MIN_VALUE;
}
}

protected final void initIAA26OR(String s) {
if (!s.trim().isEmpty()) {
IAA26OR = Byte.parseByte(s);
} else {
IAA26OR = Byte.MIN_VALUE;
}
}

protected final void initIAA26OU(String s) {
if (!s.trim().isEmpty()) {
IAA26OU = Short.parseShort(s);
} else {
IAA26OU = Short.MIN_VALUE;
}
}

protected final void initIAA26WE(String s) {
if (!s.trim().isEmpty()) {
IAA26WE = Byte.parseByte(s);
} else {
IAA26WE = Byte.MIN_VALUE;
}
}

protected final void initIAA26WL(String s) {
if (!s.trim().isEmpty()) {
IAA26WL = Byte.parseByte(s);
} else {
IAA26WL = Byte.MIN_VALUE;
}
}

protected final void initIAA26WR(String s) {
if (!s.trim().isEmpty()) {
IAA26WR = Byte.parseByte(s);
} else {
IAA26WR = Byte.MIN_VALUE;
}
}

protected final void initIAA26WU(String s) {
if (!s.trim().isEmpty()) {
IAA26WU = Byte.parseByte(s);
} else {
IAA26WU = Byte.MIN_VALUE;
}
}

protected final void initIAA26YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA26YE = false;
}
}

protected final void initIAA26YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA26YL = false;
}
}

protected final void initIAA26YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA26YR = false;
}
}

protected final void initIAA26YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA26YU = false;
}
}

protected final void initIAA27(String s) {
if (!s.trim().isEmpty()) {
IAA27 = Short.parseShort(s);
} else {
IAA27 = Short.MIN_VALUE;
}
}

protected final void initIAA27FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA27FE = false;
}
}

protected final void initIAA27FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA27FL = false;
}
}

protected final void initIAA27FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA27FR = false;
}
}

protected final void initIAA27FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA27FU = false;
}
}

protected final void initIAA27ME(String s) {
if (!s.trim().isEmpty()) {
IAA27ME = Byte.parseByte(s);
} else {
IAA27ME = Byte.MIN_VALUE;
}
}

protected final void initIAA27ML(String s) {
if (!s.trim().isEmpty()) {
IAA27ML = Short.parseShort(s);
} else {
IAA27ML = Short.MIN_VALUE;
}
}

protected final void initIAA27MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA27MR = false;
}
}

protected final void initIAA27MU(String s) {
if (!s.trim().isEmpty()) {
IAA27MU = Short.parseShort(s);
} else {
IAA27MU = Short.MIN_VALUE;
}
}

protected final void initIAA27OE(String s) {
if (!s.trim().isEmpty()) {
IAA27OE = Byte.parseByte(s);
} else {
IAA27OE = Byte.MIN_VALUE;
}
}

protected final void initIAA27OL(String s) {
if (!s.trim().isEmpty()) {
IAA27OL = Short.parseShort(s);
} else {
IAA27OL = Short.MIN_VALUE;
}
}

protected final void initIAA27OR(String s) {
if (!s.trim().isEmpty()) {
IAA27OR = Byte.parseByte(s);
} else {
IAA27OR = Byte.MIN_VALUE;
}
}

protected final void initIAA27OU(String s) {
if (!s.trim().isEmpty()) {
IAA27OU = Short.parseShort(s);
} else {
IAA27OU = Short.MIN_VALUE;
}
}

protected final void initIAA27WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA27WE = false;
}
}

protected final void initIAA27WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA27WL = false;
}
}

protected final void initIAA27WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA27WR = false;
}
}

protected final void initIAA27WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA27WU = false;
}
}

protected final void initIAA27YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA27YE = false;
}
}

protected final void initIAA27YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA27YL = false;
}
}

protected final void initIAA27YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA27YR = false;
}
}

protected final void initIAA27YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA27YU = false;
}
}

protected final void initIAA28(String s) {
if (!s.trim().isEmpty()) {
IAA28 = Short.parseShort(s);
} else {
IAA28 = Short.MIN_VALUE;
}
}

protected final void initIAA28FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA28FE = false;
}
}

protected final void initIAA28FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA28FL = false;
}
}

protected final void initIAA28FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA28FR = false;
}
}

protected final void initIAA28FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA28FU = false;
}
}

protected final void initIAA28ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA28ME = false;
}
}

protected final void initIAA28ML(String s) {
if (!s.trim().isEmpty()) {
IAA28ML = Short.parseShort(s);
} else {
IAA28ML = Short.MIN_VALUE;
}
}

protected final void initIAA28MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA28MR = false;
}
}

protected final void initIAA28MU(String s) {
if (!s.trim().isEmpty()) {
IAA28MU = Short.parseShort(s);
} else {
IAA28MU = Short.MIN_VALUE;
}
}

protected final void initIAA28OE(String s) {
if (!s.trim().isEmpty()) {
IAA28OE = Byte.parseByte(s);
} else {
IAA28OE = Byte.MIN_VALUE;
}
}

protected final void initIAA28OL(String s) {
if (!s.trim().isEmpty()) {
IAA28OL = Short.parseShort(s);
} else {
IAA28OL = Short.MIN_VALUE;
}
}

protected final void initIAA28OR(String s) {
if (!s.trim().isEmpty()) {
IAA28OR = Byte.parseByte(s);
} else {
IAA28OR = Byte.MIN_VALUE;
}
}

protected final void initIAA28OU(String s) {
if (!s.trim().isEmpty()) {
IAA28OU = Short.parseShort(s);
} else {
IAA28OU = Short.MIN_VALUE;
}
}

protected final void initIAA28WE(String s) {
if (!s.trim().isEmpty()) {
IAA28WE = Byte.parseByte(s);
} else {
IAA28WE = Byte.MIN_VALUE;
}
}

protected final void initIAA28WL(String s) {
if (!s.trim().isEmpty()) {
IAA28WL = Byte.parseByte(s);
} else {
IAA28WL = Byte.MIN_VALUE;
}
}

protected final void initIAA28WR(String s) {
if (!s.trim().isEmpty()) {
IAA28WR = Byte.parseByte(s);
} else {
IAA28WR = Byte.MIN_VALUE;
}
}

protected final void initIAA28WU(String s) {
if (!s.trim().isEmpty()) {
IAA28WU = Byte.parseByte(s);
} else {
IAA28WU = Byte.MIN_VALUE;
}
}

protected final void initIAA28YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA28YE = false;
}
}

protected final void initIAA28YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA28YL = false;
}
}

protected final void initIAA28YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA28YR = false;
}
}

protected final void initIAA28YU(String s) {
if (!s.trim().isEmpty()) {
IAA28YU = Short.parseShort(s);
} else {
IAA28YU = Short.MIN_VALUE;
}
}

protected final void initIAA29(String s) {
if (!s.trim().isEmpty()) {
IAA29 = Short.parseShort(s);
} else {
IAA29 = Short.MIN_VALUE;
}
}

protected final void initIAA29FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA29FE = false;
}
}

protected final void initIAA29FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA29FL = false;
}
}

protected final void initIAA29FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA29FR = false;
}
}

protected final void initIAA29FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA29FU = false;
}
}

protected final void initIAA29ME(String s) {
if (!s.trim().isEmpty()) {
IAA29ME = Byte.parseByte(s);
} else {
IAA29ME = Byte.MIN_VALUE;
}
}

protected final void initIAA29ML(String s) {
if (!s.trim().isEmpty()) {
IAA29ML = Short.parseShort(s);
} else {
IAA29ML = Short.MIN_VALUE;
}
}

protected final void initIAA29MR(String s) {
if (!s.trim().isEmpty()) {
IAA29MR = Byte.parseByte(s);
} else {
IAA29MR = Byte.MIN_VALUE;
}
}

protected final void initIAA29MU(String s) {
if (!s.trim().isEmpty()) {
IAA29MU = Short.parseShort(s);
} else {
IAA29MU = Short.MIN_VALUE;
}
}

protected final void initIAA29OE(String s) {
if (!s.trim().isEmpty()) {
IAA29OE = Byte.parseByte(s);
} else {
IAA29OE = Byte.MIN_VALUE;
}
}

protected final void initIAA29OL(String s) {
if (!s.trim().isEmpty()) {
IAA29OL = Short.parseShort(s);
} else {
IAA29OL = Short.MIN_VALUE;
}
}

protected final void initIAA29OR(String s) {
if (!s.trim().isEmpty()) {
IAA29OR = Byte.parseByte(s);
} else {
IAA29OR = Byte.MIN_VALUE;
}
}

protected final void initIAA29OU(String s) {
if (!s.trim().isEmpty()) {
IAA29OU = Short.parseShort(s);
} else {
IAA29OU = Short.MIN_VALUE;
}
}

protected final void initIAA29WE(String s) {
if (!s.trim().isEmpty()) {
IAA29WE = Byte.parseByte(s);
} else {
IAA29WE = Byte.MIN_VALUE;
}
}

protected final void initIAA29WL(String s) {
if (!s.trim().isEmpty()) {
IAA29WL = Byte.parseByte(s);
} else {
IAA29WL = Byte.MIN_VALUE;
}
}

protected final void initIAA29WR(String s) {
if (!s.trim().isEmpty()) {
IAA29WR = Byte.parseByte(s);
} else {
IAA29WR = Byte.MIN_VALUE;
}
}

protected final void initIAA29WU(String s) {
if (!s.trim().isEmpty()) {
IAA29WU = Byte.parseByte(s);
} else {
IAA29WU = Byte.MIN_VALUE;
}
}

protected final void initIAA29YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA29YE = false;
}
}

protected final void initIAA29YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA29YL = false;
}
}

protected final void initIAA29YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA29YR = false;
}
}

protected final void initIAA29YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA29YU = false;
}
}

protected final void initIAA2FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA2FE = false;
}
}

protected final void initIAA2FL(String s) {
if (!s.trim().isEmpty()) {
IAA2FL = Short.parseShort(s);
} else {
IAA2FL = Short.MIN_VALUE;
}
}

protected final void initIAA2FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA2FR = false;
}
}

protected final void initIAA2FU(String s) {
if (!s.trim().isEmpty()) {
IAA2FU = Short.parseShort(s);
} else {
IAA2FU = Short.MIN_VALUE;
}
}

protected final void initIAA2ME(String s) {
if (!s.trim().isEmpty()) {
IAA2ME = Byte.parseByte(s);
} else {
IAA2ME = Byte.MIN_VALUE;
}
}

protected final void initIAA2ML(String s) {
if (!s.trim().isEmpty()) {
IAA2ML = Short.parseShort(s);
} else {
IAA2ML = Short.MIN_VALUE;
}
}

protected final void initIAA2MR(String s) {
if (!s.trim().isEmpty()) {
IAA2MR = Byte.parseByte(s);
} else {
IAA2MR = Byte.MIN_VALUE;
}
}

protected final void initIAA2MU(String s) {
if (!s.trim().isEmpty()) {
IAA2MU = Short.parseShort(s);
} else {
IAA2MU = Short.MIN_VALUE;
}
}

protected final void initIAA2OE(String s) {
if (!s.trim().isEmpty()) {
IAA2OE = Byte.parseByte(s);
} else {
IAA2OE = Byte.MIN_VALUE;
}
}

protected final void initIAA2OL(String s) {
if (!s.trim().isEmpty()) {
IAA2OL = Short.parseShort(s);
} else {
IAA2OL = Short.MIN_VALUE;
}
}

protected final void initIAA2OR(String s) {
if (!s.trim().isEmpty()) {
IAA2OR = Byte.parseByte(s);
} else {
IAA2OR = Byte.MIN_VALUE;
}
}

protected final void initIAA2OU(String s) {
if (!s.trim().isEmpty()) {
IAA2OU = Short.parseShort(s);
} else {
IAA2OU = Short.MIN_VALUE;
}
}

protected final void initIAA2WE(String s) {
if (!s.trim().isEmpty()) {
IAA2WE = Byte.parseByte(s);
} else {
IAA2WE = Byte.MIN_VALUE;
}
}

protected final void initIAA2WL(String s) {
if (!s.trim().isEmpty()) {
IAA2WL = Byte.parseByte(s);
} else {
IAA2WL = Byte.MIN_VALUE;
}
}

protected final void initIAA2WR(String s) {
if (!s.trim().isEmpty()) {
IAA2WR = Byte.parseByte(s);
} else {
IAA2WR = Byte.MIN_VALUE;
}
}

protected final void initIAA2WU(String s) {
if (!s.trim().isEmpty()) {
IAA2WU = Byte.parseByte(s);
} else {
IAA2WU = Byte.MIN_VALUE;
}
}

protected final void initIAA2YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA2YE = false;
}
}

protected final void initIAA2YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA2YL = false;
}
}

protected final void initIAA2YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA2YR = false;
}
}

protected final void initIAA2YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA2YU = false;
}
}

protected final void initIAA3(String s) {
if (!s.trim().isEmpty()) {
IAA3 = Short.parseShort(s);
} else {
IAA3 = Short.MIN_VALUE;
}
}

protected final void initIAA30(String s) {
if (!s.trim().isEmpty()) {
IAA30 = Short.parseShort(s);
} else {
IAA30 = Short.MIN_VALUE;
}
}

protected final void initIAA30FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA30FE = false;
}
}

protected final void initIAA30FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA30FL = false;
}
}

protected final void initIAA30FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA30FR = false;
}
}

protected final void initIAA30FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA30FU = false;
}
}

protected final void initIAA30ME(String s) {
if (!s.trim().isEmpty()) {
IAA30ME = Byte.parseByte(s);
} else {
IAA30ME = Byte.MIN_VALUE;
}
}

protected final void initIAA30ML(String s) {
if (!s.trim().isEmpty()) {
IAA30ML = Short.parseShort(s);
} else {
IAA30ML = Short.MIN_VALUE;
}
}

protected final void initIAA30MR(String s) {
if (!s.trim().isEmpty()) {
IAA30MR = Byte.parseByte(s);
} else {
IAA30MR = Byte.MIN_VALUE;
}
}

protected final void initIAA30MU(String s) {
if (!s.trim().isEmpty()) {
IAA30MU = Short.parseShort(s);
} else {
IAA30MU = Short.MIN_VALUE;
}
}

protected final void initIAA30OE(String s) {
if (!s.trim().isEmpty()) {
IAA30OE = Byte.parseByte(s);
} else {
IAA30OE = Byte.MIN_VALUE;
}
}

protected final void initIAA30OL(String s) {
if (!s.trim().isEmpty()) {
IAA30OL = Short.parseShort(s);
} else {
IAA30OL = Short.MIN_VALUE;
}
}

protected final void initIAA30OR(String s) {
if (!s.trim().isEmpty()) {
IAA30OR = Byte.parseByte(s);
} else {
IAA30OR = Byte.MIN_VALUE;
}
}

protected final void initIAA30OU(String s) {
if (!s.trim().isEmpty()) {
IAA30OU = Short.parseShort(s);
} else {
IAA30OU = Short.MIN_VALUE;
}
}

protected final void initIAA30WE(String s) {
if (!s.trim().isEmpty()) {
IAA30WE = Byte.parseByte(s);
} else {
IAA30WE = Byte.MIN_VALUE;
}
}

protected final void initIAA30WL(String s) {
if (!s.trim().isEmpty()) {
IAA30WL = Short.parseShort(s);
} else {
IAA30WL = Short.MIN_VALUE;
}
}

protected final void initIAA30WR(String s) {
if (!s.trim().isEmpty()) {
IAA30WR = Byte.parseByte(s);
} else {
IAA30WR = Byte.MIN_VALUE;
}
}

protected final void initIAA30WU(String s) {
if (!s.trim().isEmpty()) {
IAA30WU = Byte.parseByte(s);
} else {
IAA30WU = Byte.MIN_VALUE;
}
}

protected final void initIAA30YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA30YE = false;
}
}

protected final void initIAA30YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA30YL = false;
}
}

protected final void initIAA30YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA30YR = false;
}
}

protected final void initIAA30YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA30YU = false;
}
}

protected final void initIAA31(String s) {
if (!s.trim().isEmpty()) {
IAA31 = Short.parseShort(s);
} else {
IAA31 = Short.MIN_VALUE;
}
}

protected final void initIAA31FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA31FE = false;
}
}

protected final void initIAA31FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA31FL = false;
}
}

protected final void initIAA31FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA31FR = false;
}
}

protected final void initIAA31FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA31FU = false;
}
}

protected final void initIAA31ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA31ME = false;
}
}

protected final void initIAA31ML(String s) {
if (!s.trim().isEmpty()) {
IAA31ML = Short.parseShort(s);
} else {
IAA31ML = Short.MIN_VALUE;
}
}

protected final void initIAA31MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA31MR = false;
}
}

protected final void initIAA31MU(String s) {
if (!s.trim().isEmpty()) {
IAA31MU = Short.parseShort(s);
} else {
IAA31MU = Short.MIN_VALUE;
}
}

protected final void initIAA31OE(String s) {
if (!s.trim().isEmpty()) {
IAA31OE = Byte.parseByte(s);
} else {
IAA31OE = Byte.MIN_VALUE;
}
}

protected final void initIAA31OL(String s) {
if (!s.trim().isEmpty()) {
IAA31OL = Short.parseShort(s);
} else {
IAA31OL = Short.MIN_VALUE;
}
}

protected final void initIAA31OR(String s) {
if (!s.trim().isEmpty()) {
IAA31OR = Byte.parseByte(s);
} else {
IAA31OR = Byte.MIN_VALUE;
}
}

protected final void initIAA31OU(String s) {
if (!s.trim().isEmpty()) {
IAA31OU = Short.parseShort(s);
} else {
IAA31OU = Short.MIN_VALUE;
}
}

protected final void initIAA31WE(String s) {
if (!s.trim().isEmpty()) {
IAA31WE = Byte.parseByte(s);
} else {
IAA31WE = Byte.MIN_VALUE;
}
}

protected final void initIAA31WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA31WL = false;
}
}

protected final void initIAA31WR(String s) {
if (!s.trim().isEmpty()) {
IAA31WR = Byte.parseByte(s);
} else {
IAA31WR = Byte.MIN_VALUE;
}
}

protected final void initIAA31WU(String s) {
if (!s.trim().isEmpty()) {
IAA31WU = Byte.parseByte(s);
} else {
IAA31WU = Byte.MIN_VALUE;
}
}

protected final void initIAA31YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA31YE = false;
}
}

protected final void initIAA31YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA31YL = false;
}
}

protected final void initIAA31YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA31YR = false;
}
}

protected final void initIAA31YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA31YU = false;
}
}

protected final void initIAA32(String s) {
if (!s.trim().isEmpty()) {
IAA32 = Short.parseShort(s);
} else {
IAA32 = Short.MIN_VALUE;
}
}

protected final void initIAA32FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA32FE = false;
}
}

protected final void initIAA32FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA32FL = false;
}
}

protected final void initIAA32FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA32FR = false;
}
}

protected final void initIAA32FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA32FU = false;
}
}

protected final void initIAA32ME(String s) {
if (!s.trim().isEmpty()) {
IAA32ME = Byte.parseByte(s);
} else {
IAA32ME = Byte.MIN_VALUE;
}
}

protected final void initIAA32ML(String s) {
if (!s.trim().isEmpty()) {
IAA32ML = Short.parseShort(s);
} else {
IAA32ML = Short.MIN_VALUE;
}
}

protected final void initIAA32MR(String s) {
if (!s.trim().isEmpty()) {
IAA32MR = Byte.parseByte(s);
} else {
IAA32MR = Byte.MIN_VALUE;
}
}

protected final void initIAA32MU(String s) {
if (!s.trim().isEmpty()) {
IAA32MU = Short.parseShort(s);
} else {
IAA32MU = Short.MIN_VALUE;
}
}

protected final void initIAA32OE(String s) {
if (!s.trim().isEmpty()) {
IAA32OE = Byte.parseByte(s);
} else {
IAA32OE = Byte.MIN_VALUE;
}
}

protected final void initIAA32OL(String s) {
if (!s.trim().isEmpty()) {
IAA32OL = Short.parseShort(s);
} else {
IAA32OL = Short.MIN_VALUE;
}
}

protected final void initIAA32OR(String s) {
if (!s.trim().isEmpty()) {
IAA32OR = Byte.parseByte(s);
} else {
IAA32OR = Byte.MIN_VALUE;
}
}

protected final void initIAA32OU(String s) {
if (!s.trim().isEmpty()) {
IAA32OU = Short.parseShort(s);
} else {
IAA32OU = Short.MIN_VALUE;
}
}

protected final void initIAA32WE(String s) {
if (!s.trim().isEmpty()) {
IAA32WE = Byte.parseByte(s);
} else {
IAA32WE = Byte.MIN_VALUE;
}
}

protected final void initIAA32WL(String s) {
if (!s.trim().isEmpty()) {
IAA32WL = Byte.parseByte(s);
} else {
IAA32WL = Byte.MIN_VALUE;
}
}

protected final void initIAA32WR(String s) {
if (!s.trim().isEmpty()) {
IAA32WR = Byte.parseByte(s);
} else {
IAA32WR = Byte.MIN_VALUE;
}
}

protected final void initIAA32WU(String s) {
if (!s.trim().isEmpty()) {
IAA32WU = Byte.parseByte(s);
} else {
IAA32WU = Byte.MIN_VALUE;
}
}

protected final void initIAA32YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA32YE = false;
}
}

protected final void initIAA32YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA32YL = false;
}
}

protected final void initIAA32YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA32YR = false;
}
}

protected final void initIAA32YU(String s) {
if (!s.trim().isEmpty()) {
IAA32YU = Short.parseShort(s);
} else {
IAA32YU = Short.MIN_VALUE;
}
}

protected final void initIAA33(String s) {
if (!s.trim().isEmpty()) {
IAA33 = Short.parseShort(s);
} else {
IAA33 = Short.MIN_VALUE;
}
}

protected final void initIAA33FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA33FE = false;
}
}

protected final void initIAA33FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA33FL = false;
}
}

protected final void initIAA33FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA33FR = false;
}
}

protected final void initIAA33FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA33FU = false;
}
}

protected final void initIAA33ME(String s) {
if (!s.trim().isEmpty()) {
IAA33ME = Byte.parseByte(s);
} else {
IAA33ME = Byte.MIN_VALUE;
}
}

protected final void initIAA33ML(String s) {
if (!s.trim().isEmpty()) {
IAA33ML = Short.parseShort(s);
} else {
IAA33ML = Short.MIN_VALUE;
}
}

protected final void initIAA33MR(String s) {
if (!s.trim().isEmpty()) {
IAA33MR = Byte.parseByte(s);
} else {
IAA33MR = Byte.MIN_VALUE;
}
}

protected final void initIAA33MU(String s) {
if (!s.trim().isEmpty()) {
IAA33MU = Short.parseShort(s);
} else {
IAA33MU = Short.MIN_VALUE;
}
}

protected final void initIAA33OE(String s) {
if (!s.trim().isEmpty()) {
IAA33OE = Byte.parseByte(s);
} else {
IAA33OE = Byte.MIN_VALUE;
}
}

protected final void initIAA33OL(String s) {
if (!s.trim().isEmpty()) {
IAA33OL = Short.parseShort(s);
} else {
IAA33OL = Short.MIN_VALUE;
}
}

protected final void initIAA33OR(String s) {
if (!s.trim().isEmpty()) {
IAA33OR = Byte.parseByte(s);
} else {
IAA33OR = Byte.MIN_VALUE;
}
}

protected final void initIAA33OU(String s) {
if (!s.trim().isEmpty()) {
IAA33OU = Short.parseShort(s);
} else {
IAA33OU = Short.MIN_VALUE;
}
}

protected final void initIAA33WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA33WE = false;
}
}

protected final void initIAA33WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA33WL = false;
}
}

protected final void initIAA33WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA33WR = false;
}
}

protected final void initIAA33WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA33WU = false;
}
}

protected final void initIAA33YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA33YE = false;
}
}

protected final void initIAA33YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA33YL = false;
}
}

protected final void initIAA33YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA33YR = false;
}
}

protected final void initIAA33YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA33YU = false;
}
}

protected final void initIAA34(String s) {
if (!s.trim().isEmpty()) {
IAA34 = Short.parseShort(s);
} else {
IAA34 = Short.MIN_VALUE;
}
}

protected final void initIAA34FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA34FE = false;
}
}

protected final void initIAA34FL(String s) {
if (!s.trim().isEmpty()) {
IAA34FL = Short.parseShort(s);
} else {
IAA34FL = Short.MIN_VALUE;
}
}

protected final void initIAA34FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA34FR = false;
}
}

protected final void initIAA34FU(String s) {
if (!s.trim().isEmpty()) {
IAA34FU = Short.parseShort(s);
} else {
IAA34FU = Short.MIN_VALUE;
}
}

protected final void initIAA34ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA34ME = false;
}
}

protected final void initIAA34ML(String s) {
if (!s.trim().isEmpty()) {
IAA34ML = Short.parseShort(s);
} else {
IAA34ML = Short.MIN_VALUE;
}
}

protected final void initIAA34MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA34MR = false;
}
}

protected final void initIAA34MU(String s) {
if (!s.trim().isEmpty()) {
IAA34MU = Short.parseShort(s);
} else {
IAA34MU = Short.MIN_VALUE;
}
}

protected final void initIAA34OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA34OE = false;
}
}

protected final void initIAA34OL(String s) {
if (!s.trim().isEmpty()) {
IAA34OL = Short.parseShort(s);
} else {
IAA34OL = Short.MIN_VALUE;
}
}

protected final void initIAA34OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA34OR = false;
}
}

protected final void initIAA34OU(String s) {
if (!s.trim().isEmpty()) {
IAA34OU = Short.parseShort(s);
} else {
IAA34OU = Short.MIN_VALUE;
}
}

protected final void initIAA34WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA34WE = false;
}
}

protected final void initIAA34WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA34WL = false;
}
}

protected final void initIAA34WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA34WR = false;
}
}

protected final void initIAA34WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA34WU = false;
}
}

protected final void initIAA34YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA34YE = false;
}
}

protected final void initIAA34YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA34YL = false;
}
}

protected final void initIAA34YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA34YR = false;
}
}

protected final void initIAA34YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA34YU = false;
}
}

protected final void initIAA35(String s) {
if (!s.trim().isEmpty()) {
IAA35 = Short.parseShort(s);
} else {
IAA35 = Short.MIN_VALUE;
}
}

protected final void initIAA35FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA35FE = false;
}
}

protected final void initIAA35FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA35FL = false;
}
}

protected final void initIAA35FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA35FR = false;
}
}

protected final void initIAA35FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA35FU = false;
}
}

protected final void initIAA35ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA35ME = false;
}
}

protected final void initIAA35ML(String s) {
if (!s.trim().isEmpty()) {
IAA35ML = Short.parseShort(s);
} else {
IAA35ML = Short.MIN_VALUE;
}
}

protected final void initIAA35MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA35MR = false;
}
}

protected final void initIAA35MU(String s) {
if (!s.trim().isEmpty()) {
IAA35MU = Short.parseShort(s);
} else {
IAA35MU = Short.MIN_VALUE;
}
}

protected final void initIAA35OE(String s) {
if (!s.trim().isEmpty()) {
IAA35OE = Byte.parseByte(s);
} else {
IAA35OE = Byte.MIN_VALUE;
}
}

protected final void initIAA35OL(String s) {
if (!s.trim().isEmpty()) {
IAA35OL = Short.parseShort(s);
} else {
IAA35OL = Short.MIN_VALUE;
}
}

protected final void initIAA35OR(String s) {
if (!s.trim().isEmpty()) {
IAA35OR = Byte.parseByte(s);
} else {
IAA35OR = Byte.MIN_VALUE;
}
}

protected final void initIAA35OU(String s) {
if (!s.trim().isEmpty()) {
IAA35OU = Short.parseShort(s);
} else {
IAA35OU = Short.MIN_VALUE;
}
}

protected final void initIAA35WE(String s) {
if (!s.trim().isEmpty()) {
IAA35WE = Byte.parseByte(s);
} else {
IAA35WE = Byte.MIN_VALUE;
}
}

protected final void initIAA35WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA35WL = false;
}
}

protected final void initIAA35WR(String s) {
if (!s.trim().isEmpty()) {
IAA35WR = Byte.parseByte(s);
} else {
IAA35WR = Byte.MIN_VALUE;
}
}

protected final void initIAA35WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA35WU = false;
}
}

protected final void initIAA35YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA35YE = false;
}
}

protected final void initIAA35YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA35YL = false;
}
}

protected final void initIAA35YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA35YR = false;
}
}

protected final void initIAA35YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA35YU = false;
}
}

protected final void initIAA36(String s) {
if (!s.trim().isEmpty()) {
IAA36 = Short.parseShort(s);
} else {
IAA36 = Short.MIN_VALUE;
}
}

protected final void initIAA36FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36FE = false;
}
}

protected final void initIAA36FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36FL = false;
}
}

protected final void initIAA36FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36FR = false;
}
}

protected final void initIAA36FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36FU = false;
}
}

protected final void initIAA36ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36ME = false;
}
}

protected final void initIAA36ML(String s) {
if (!s.trim().isEmpty()) {
IAA36ML = Short.parseShort(s);
} else {
IAA36ML = Short.MIN_VALUE;
}
}

protected final void initIAA36MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36MR = false;
}
}

protected final void initIAA36MU(String s) {
if (!s.trim().isEmpty()) {
IAA36MU = Short.parseShort(s);
} else {
IAA36MU = Short.MIN_VALUE;
}
}

protected final void initIAA36OE(String s) {
if (!s.trim().isEmpty()) {
IAA36OE = Byte.parseByte(s);
} else {
IAA36OE = Byte.MIN_VALUE;
}
}

protected final void initIAA36OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36OL = false;
}
}

protected final void initIAA36OR(String s) {
if (!s.trim().isEmpty()) {
IAA36OR = Byte.parseByte(s);
} else {
IAA36OR = Byte.MIN_VALUE;
}
}

protected final void initIAA36OU(String s) {
if (!s.trim().isEmpty()) {
IAA36OU = Short.parseShort(s);
} else {
IAA36OU = Short.MIN_VALUE;
}
}

protected final void initIAA36WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36WE = false;
}
}

protected final void initIAA36WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36WL = false;
}
}

protected final void initIAA36WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36WR = false;
}
}

protected final void initIAA36WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36WU = false;
}
}

protected final void initIAA36YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36YE = false;
}
}

protected final void initIAA36YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36YL = false;
}
}

protected final void initIAA36YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36YR = false;
}
}

protected final void initIAA36YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA36YU = false;
}
}

protected final void initIAA37(String s) {
if (!s.trim().isEmpty()) {
IAA37 = Short.parseShort(s);
} else {
IAA37 = Short.MIN_VALUE;
}
}

protected final void initIAA37FE(String s) {
if (!s.trim().isEmpty()) {
IAA37FE = Byte.parseByte(s);
} else {
IAA37FE = Byte.MIN_VALUE;
}
}

protected final void initIAA37FL(String s) {
if (!s.trim().isEmpty()) {
IAA37FL = Short.parseShort(s);
} else {
IAA37FL = Short.MIN_VALUE;
}
}

protected final void initIAA37FR(String s) {
if (!s.trim().isEmpty()) {
IAA37FR = Byte.parseByte(s);
} else {
IAA37FR = Byte.MIN_VALUE;
}
}

protected final void initIAA37FU(String s) {
if (!s.trim().isEmpty()) {
IAA37FU = Short.parseShort(s);
} else {
IAA37FU = Short.MIN_VALUE;
}
}

protected final void initIAA37ME(String s) {
if (!s.trim().isEmpty()) {
IAA37ME = Byte.parseByte(s);
} else {
IAA37ME = Byte.MIN_VALUE;
}
}

protected final void initIAA37ML(String s) {
if (!s.trim().isEmpty()) {
IAA37ML = Short.parseShort(s);
} else {
IAA37ML = Short.MIN_VALUE;
}
}

protected final void initIAA37MR(String s) {
if (!s.trim().isEmpty()) {
IAA37MR = Byte.parseByte(s);
} else {
IAA37MR = Byte.MIN_VALUE;
}
}

protected final void initIAA37MU(String s) {
if (!s.trim().isEmpty()) {
IAA37MU = Short.parseShort(s);
} else {
IAA37MU = Short.MIN_VALUE;
}
}

protected final void initIAA37OE(String s) {
if (!s.trim().isEmpty()) {
IAA37OE = Byte.parseByte(s);
} else {
IAA37OE = Byte.MIN_VALUE;
}
}

protected final void initIAA37OL(String s) {
if (!s.trim().isEmpty()) {
IAA37OL = Short.parseShort(s);
} else {
IAA37OL = Short.MIN_VALUE;
}
}

protected final void initIAA37OR(String s) {
if (!s.trim().isEmpty()) {
IAA37OR = Byte.parseByte(s);
} else {
IAA37OR = Byte.MIN_VALUE;
}
}

protected final void initIAA37OU(String s) {
if (!s.trim().isEmpty()) {
IAA37OU = Short.parseShort(s);
} else {
IAA37OU = Short.MIN_VALUE;
}
}

protected final void initIAA37WE(String s) {
if (!s.trim().isEmpty()) {
IAA37WE = Byte.parseByte(s);
} else {
IAA37WE = Byte.MIN_VALUE;
}
}

protected final void initIAA37WL(String s) {
if (!s.trim().isEmpty()) {
IAA37WL = Byte.parseByte(s);
} else {
IAA37WL = Byte.MIN_VALUE;
}
}

protected final void initIAA37WR(String s) {
if (!s.trim().isEmpty()) {
IAA37WR = Byte.parseByte(s);
} else {
IAA37WR = Byte.MIN_VALUE;
}
}

protected final void initIAA37WU(String s) {
if (!s.trim().isEmpty()) {
IAA37WU = Short.parseShort(s);
} else {
IAA37WU = Short.MIN_VALUE;
}
}

protected final void initIAA37YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA37YE = false;
}
}

protected final void initIAA37YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA37YL = false;
}
}

protected final void initIAA37YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA37YR = false;
}
}

protected final void initIAA37YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA37YU = false;
}
}

protected final void initIAA38(String s) {
if (!s.trim().isEmpty()) {
IAA38 = Short.parseShort(s);
} else {
IAA38 = Short.MIN_VALUE;
}
}

protected final void initIAA38FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA38FE = false;
}
}

protected final void initIAA38FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA38FL = false;
}
}

protected final void initIAA38FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA38FR = false;
}
}

protected final void initIAA38FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA38FU = false;
}
}

protected final void initIAA38ME(String s) {
if (!s.trim().isEmpty()) {
IAA38ME = Byte.parseByte(s);
} else {
IAA38ME = Byte.MIN_VALUE;
}
}

protected final void initIAA38ML(String s) {
if (!s.trim().isEmpty()) {
IAA38ML = Short.parseShort(s);
} else {
IAA38ML = Short.MIN_VALUE;
}
}

protected final void initIAA38MR(String s) {
if (!s.trim().isEmpty()) {
IAA38MR = Byte.parseByte(s);
} else {
IAA38MR = Byte.MIN_VALUE;
}
}

protected final void initIAA38MU(String s) {
if (!s.trim().isEmpty()) {
IAA38MU = Short.parseShort(s);
} else {
IAA38MU = Short.MIN_VALUE;
}
}

protected final void initIAA38OE(String s) {
if (!s.trim().isEmpty()) {
IAA38OE = Byte.parseByte(s);
} else {
IAA38OE = Byte.MIN_VALUE;
}
}

protected final void initIAA38OL(String s) {
if (!s.trim().isEmpty()) {
IAA38OL = Short.parseShort(s);
} else {
IAA38OL = Short.MIN_VALUE;
}
}

protected final void initIAA38OR(String s) {
if (!s.trim().isEmpty()) {
IAA38OR = Byte.parseByte(s);
} else {
IAA38OR = Byte.MIN_VALUE;
}
}

protected final void initIAA38OU(String s) {
if (!s.trim().isEmpty()) {
IAA38OU = Short.parseShort(s);
} else {
IAA38OU = Short.MIN_VALUE;
}
}

protected final void initIAA38WE(String s) {
if (!s.trim().isEmpty()) {
IAA38WE = Byte.parseByte(s);
} else {
IAA38WE = Byte.MIN_VALUE;
}
}

protected final void initIAA38WL(String s) {
if (!s.trim().isEmpty()) {
IAA38WL = Byte.parseByte(s);
} else {
IAA38WL = Byte.MIN_VALUE;
}
}

protected final void initIAA38WR(String s) {
if (!s.trim().isEmpty()) {
IAA38WR = Byte.parseByte(s);
} else {
IAA38WR = Byte.MIN_VALUE;
}
}

protected final void initIAA38WU(String s) {
if (!s.trim().isEmpty()) {
IAA38WU = Short.parseShort(s);
} else {
IAA38WU = Short.MIN_VALUE;
}
}

protected final void initIAA38YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA38YE = false;
}
}

protected final void initIAA38YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA38YL = false;
}
}

protected final void initIAA38YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA38YR = false;
}
}

protected final void initIAA38YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA38YU = false;
}
}

protected final void initIAA3FE(String s) {
if (!s.trim().isEmpty()) {
IAA3FE = Byte.parseByte(s);
} else {
IAA3FE = Byte.MIN_VALUE;
}
}

protected final void initIAA3FL(String s) {
if (!s.trim().isEmpty()) {
IAA3FL = Byte.parseByte(s);
} else {
IAA3FL = Byte.MIN_VALUE;
}
}

protected final void initIAA3FR(String s) {
if (!s.trim().isEmpty()) {
IAA3FR = Byte.parseByte(s);
} else {
IAA3FR = Byte.MIN_VALUE;
}
}

protected final void initIAA3FU(String s) {
if (!s.trim().isEmpty()) {
IAA3FU = Short.parseShort(s);
} else {
IAA3FU = Short.MIN_VALUE;
}
}

protected final void initIAA3ME(String s) {
if (!s.trim().isEmpty()) {
IAA3ME = Byte.parseByte(s);
} else {
IAA3ME = Byte.MIN_VALUE;
}
}

protected final void initIAA3ML(String s) {
if (!s.trim().isEmpty()) {
IAA3ML = Short.parseShort(s);
} else {
IAA3ML = Short.MIN_VALUE;
}
}

protected final void initIAA3MR(String s) {
if (!s.trim().isEmpty()) {
IAA3MR = Byte.parseByte(s);
} else {
IAA3MR = Byte.MIN_VALUE;
}
}

protected final void initIAA3MU(String s) {
if (!s.trim().isEmpty()) {
IAA3MU = Short.parseShort(s);
} else {
IAA3MU = Short.MIN_VALUE;
}
}

protected final void initIAA3OE(String s) {
if (!s.trim().isEmpty()) {
IAA3OE = Byte.parseByte(s);
} else {
IAA3OE = Byte.MIN_VALUE;
}
}

protected final void initIAA3OL(String s) {
if (!s.trim().isEmpty()) {
IAA3OL = Short.parseShort(s);
} else {
IAA3OL = Short.MIN_VALUE;
}
}

protected final void initIAA3OR(String s) {
if (!s.trim().isEmpty()) {
IAA3OR = Byte.parseByte(s);
} else {
IAA3OR = Byte.MIN_VALUE;
}
}

protected final void initIAA3OU(String s) {
if (!s.trim().isEmpty()) {
IAA3OU = Short.parseShort(s);
} else {
IAA3OU = Short.MIN_VALUE;
}
}

protected final void initIAA3WE(String s) {
if (!s.trim().isEmpty()) {
IAA3WE = Byte.parseByte(s);
} else {
IAA3WE = Byte.MIN_VALUE;
}
}

protected final void initIAA3WL(String s) {
if (!s.trim().isEmpty()) {
IAA3WL = Short.parseShort(s);
} else {
IAA3WL = Short.MIN_VALUE;
}
}

protected final void initIAA3WR(String s) {
if (!s.trim().isEmpty()) {
IAA3WR = Byte.parseByte(s);
} else {
IAA3WR = Byte.MIN_VALUE;
}
}

protected final void initIAA3WU(String s) {
if (!s.trim().isEmpty()) {
IAA3WU = Byte.parseByte(s);
} else {
IAA3WU = Byte.MIN_VALUE;
}
}

protected final void initIAA3YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA3YE = false;
}
}

protected final void initIAA3YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA3YL = false;
}
}

protected final void initIAA3YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA3YR = false;
}
}

protected final void initIAA3YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA3YU = false;
}
}

protected final void initIAA4(String s) {
if (!s.trim().isEmpty()) {
IAA4 = Short.parseShort(s);
} else {
IAA4 = Short.MIN_VALUE;
}
}

protected final void initIAA4FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA4FE = false;
}
}

protected final void initIAA4FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA4FL = false;
}
}

protected final void initIAA4FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA4FR = false;
}
}

protected final void initIAA4FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA4FU = false;
}
}

protected final void initIAA4ME(String s) {
if (!s.trim().isEmpty()) {
IAA4ME = Byte.parseByte(s);
} else {
IAA4ME = Byte.MIN_VALUE;
}
}

protected final void initIAA4ML(String s) {
if (!s.trim().isEmpty()) {
IAA4ML = Short.parseShort(s);
} else {
IAA4ML = Short.MIN_VALUE;
}
}

protected final void initIAA4MR(String s) {
if (!s.trim().isEmpty()) {
IAA4MR = Byte.parseByte(s);
} else {
IAA4MR = Byte.MIN_VALUE;
}
}

protected final void initIAA4MU(String s) {
if (!s.trim().isEmpty()) {
IAA4MU = Short.parseShort(s);
} else {
IAA4MU = Short.MIN_VALUE;
}
}

protected final void initIAA4OE(String s) {
if (!s.trim().isEmpty()) {
IAA4OE = Byte.parseByte(s);
} else {
IAA4OE = Byte.MIN_VALUE;
}
}

protected final void initIAA4OL(String s) {
if (!s.trim().isEmpty()) {
IAA4OL = Short.parseShort(s);
} else {
IAA4OL = Short.MIN_VALUE;
}
}

protected final void initIAA4OR(String s) {
if (!s.trim().isEmpty()) {
IAA4OR = Byte.parseByte(s);
} else {
IAA4OR = Byte.MIN_VALUE;
}
}

protected final void initIAA4OU(String s) {
if (!s.trim().isEmpty()) {
IAA4OU = Short.parseShort(s);
} else {
IAA4OU = Short.MIN_VALUE;
}
}

protected final void initIAA4WE(String s) {
if (!s.trim().isEmpty()) {
IAA4WE = Byte.parseByte(s);
} else {
IAA4WE = Byte.MIN_VALUE;
}
}

protected final void initIAA4WL(String s) {
if (!s.trim().isEmpty()) {
IAA4WL = Short.parseShort(s);
} else {
IAA4WL = Short.MIN_VALUE;
}
}

protected final void initIAA4WR(String s) {
if (!s.trim().isEmpty()) {
IAA4WR = Byte.parseByte(s);
} else {
IAA4WR = Byte.MIN_VALUE;
}
}

protected final void initIAA4WU(String s) {
if (!s.trim().isEmpty()) {
IAA4WU = Byte.parseByte(s);
} else {
IAA4WU = Byte.MIN_VALUE;
}
}

protected final void initIAA4YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA4YE = false;
}
}

protected final void initIAA4YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA4YL = false;
}
}

protected final void initIAA4YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA4YR = false;
}
}

protected final void initIAA4YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA4YU = false;
}
}

protected final void initIAA5(String s) {
if (!s.trim().isEmpty()) {
IAA5 = Short.parseShort(s);
} else {
IAA5 = Short.MIN_VALUE;
}
}

protected final void initIAA5FE(String s) {
if (!s.trim().isEmpty()) {
IAA5FE = Byte.parseByte(s);
} else {
IAA5FE = Byte.MIN_VALUE;
}
}

protected final void initIAA5FL(String s) {
if (!s.trim().isEmpty()) {
IAA5FL = Short.parseShort(s);
} else {
IAA5FL = Short.MIN_VALUE;
}
}

protected final void initIAA5FR(String s) {
if (!s.trim().isEmpty()) {
IAA5FR = Byte.parseByte(s);
} else {
IAA5FR = Byte.MIN_VALUE;
}
}

protected final void initIAA5FU(String s) {
if (!s.trim().isEmpty()) {
IAA5FU = Short.parseShort(s);
} else {
IAA5FU = Short.MIN_VALUE;
}
}

protected final void initIAA5ME(String s) {
if (!s.trim().isEmpty()) {
IAA5ME = Byte.parseByte(s);
} else {
IAA5ME = Byte.MIN_VALUE;
}
}

protected final void initIAA5ML(String s) {
if (!s.trim().isEmpty()) {
IAA5ML = Short.parseShort(s);
} else {
IAA5ML = Short.MIN_VALUE;
}
}

protected final void initIAA5MR(String s) {
if (!s.trim().isEmpty()) {
IAA5MR = Byte.parseByte(s);
} else {
IAA5MR = Byte.MIN_VALUE;
}
}

protected final void initIAA5MU(String s) {
if (!s.trim().isEmpty()) {
IAA5MU = Short.parseShort(s);
} else {
IAA5MU = Short.MIN_VALUE;
}
}

protected final void initIAA5OE(String s) {
if (!s.trim().isEmpty()) {
IAA5OE = Byte.parseByte(s);
} else {
IAA5OE = Byte.MIN_VALUE;
}
}

protected final void initIAA5OL(String s) {
if (!s.trim().isEmpty()) {
IAA5OL = Short.parseShort(s);
} else {
IAA5OL = Short.MIN_VALUE;
}
}

protected final void initIAA5OR(String s) {
if (!s.trim().isEmpty()) {
IAA5OR = Byte.parseByte(s);
} else {
IAA5OR = Byte.MIN_VALUE;
}
}

protected final void initIAA5OU(String s) {
if (!s.trim().isEmpty()) {
IAA5OU = Short.parseShort(s);
} else {
IAA5OU = Short.MIN_VALUE;
}
}

protected final void initIAA5WE(String s) {
if (!s.trim().isEmpty()) {
IAA5WE = Byte.parseByte(s);
} else {
IAA5WE = Byte.MIN_VALUE;
}
}

protected final void initIAA5WL(String s) {
if (!s.trim().isEmpty()) {
IAA5WL = Byte.parseByte(s);
} else {
IAA5WL = Byte.MIN_VALUE;
}
}

protected final void initIAA5WR(String s) {
if (!s.trim().isEmpty()) {
IAA5WR = Byte.parseByte(s);
} else {
IAA5WR = Byte.MIN_VALUE;
}
}

protected final void initIAA5WU(String s) {
if (!s.trim().isEmpty()) {
IAA5WU = Byte.parseByte(s);
} else {
IAA5WU = Byte.MIN_VALUE;
}
}

protected final void initIAA5YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA5YE = false;
}
}

protected final void initIAA5YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA5YL = false;
}
}

protected final void initIAA5YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA5YR = false;
}
}

protected final void initIAA5YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA5YU = false;
}
}

protected final void initIAA6(String s) {
if (!s.trim().isEmpty()) {
IAA6 = Integer.parseInt(s);
} else {
IAA6 = Integer.MIN_VALUE;
}
}

protected final void initIAA6FE(String s) {
if (!s.trim().isEmpty()) {
IAA6FE = Byte.parseByte(s);
} else {
IAA6FE = Byte.MIN_VALUE;
}
}

protected final void initIAA6FL(String s) {
if (!s.trim().isEmpty()) {
IAA6FL = Short.parseShort(s);
} else {
IAA6FL = Short.MIN_VALUE;
}
}

protected final void initIAA6FR(String s) {
if (!s.trim().isEmpty()) {
IAA6FR = Byte.parseByte(s);
} else {
IAA6FR = Byte.MIN_VALUE;
}
}

protected final void initIAA6FU(String s) {
if (!s.trim().isEmpty()) {
IAA6FU = Short.parseShort(s);
} else {
IAA6FU = Short.MIN_VALUE;
}
}

protected final void initIAA6ME(String s) {
if (!s.trim().isEmpty()) {
IAA6ME = Byte.parseByte(s);
} else {
IAA6ME = Byte.MIN_VALUE;
}
}

protected final void initIAA6ML(String s) {
if (!s.trim().isEmpty()) {
IAA6ML = Short.parseShort(s);
} else {
IAA6ML = Short.MIN_VALUE;
}
}

protected final void initIAA6MR(String s) {
if (!s.trim().isEmpty()) {
IAA6MR = Byte.parseByte(s);
} else {
IAA6MR = Byte.MIN_VALUE;
}
}

protected final void initIAA6MU(String s) {
if (!s.trim().isEmpty()) {
IAA6MU = Short.parseShort(s);
} else {
IAA6MU = Short.MIN_VALUE;
}
}

protected final void initIAA6OE(String s) {
if (!s.trim().isEmpty()) {
IAA6OE = Byte.parseByte(s);
} else {
IAA6OE = Byte.MIN_VALUE;
}
}

protected final void initIAA6OL(String s) {
if (!s.trim().isEmpty()) {
IAA6OL = Short.parseShort(s);
} else {
IAA6OL = Short.MIN_VALUE;
}
}

protected final void initIAA6OR(String s) {
if (!s.trim().isEmpty()) {
IAA6OR = Byte.parseByte(s);
} else {
IAA6OR = Byte.MIN_VALUE;
}
}

protected final void initIAA6OU(String s) {
if (!s.trim().isEmpty()) {
IAA6OU = Short.parseShort(s);
} else {
IAA6OU = Short.MIN_VALUE;
}
}

protected final void initIAA6WE(String s) {
if (!s.trim().isEmpty()) {
IAA6WE = Byte.parseByte(s);
} else {
IAA6WE = Byte.MIN_VALUE;
}
}

protected final void initIAA6WL(String s) {
if (!s.trim().isEmpty()) {
IAA6WL = Byte.parseByte(s);
} else {
IAA6WL = Byte.MIN_VALUE;
}
}

protected final void initIAA6WR(String s) {
if (!s.trim().isEmpty()) {
IAA6WR = Byte.parseByte(s);
} else {
IAA6WR = Byte.MIN_VALUE;
}
}

protected final void initIAA6WU(String s) {
if (!s.trim().isEmpty()) {
IAA6WU = Short.parseShort(s);
} else {
IAA6WU = Short.MIN_VALUE;
}
}

protected final void initIAA6YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA6YE = false;
}
}

protected final void initIAA6YL(String s) {
if (!s.trim().isEmpty()) {
IAA6YL = Short.parseShort(s);
} else {
IAA6YL = Short.MIN_VALUE;
}
}

protected final void initIAA6YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA6YR = false;
}
}

protected final void initIAA6YU(String s) {
if (!s.trim().isEmpty()) {
IAA6YU = Short.parseShort(s);
} else {
IAA6YU = Short.MIN_VALUE;
}
}

protected final void initIAA7(String s) {
if (!s.trim().isEmpty()) {
IAA7 = Short.parseShort(s);
} else {
IAA7 = Short.MIN_VALUE;
}
}

protected final void initIAA7FE(String s) {
if (!s.trim().isEmpty()) {
IAA7FE = Byte.parseByte(s);
} else {
IAA7FE = Byte.MIN_VALUE;
}
}

protected final void initIAA7FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA7FL = false;
}
}

protected final void initIAA7FR(String s) {
if (!s.trim().isEmpty()) {
IAA7FR = Byte.parseByte(s);
} else {
IAA7FR = Byte.MIN_VALUE;
}
}

protected final void initIAA7FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA7FU = false;
}
}

protected final void initIAA7ME(String s) {
if (!s.trim().isEmpty()) {
IAA7ME = Byte.parseByte(s);
} else {
IAA7ME = Byte.MIN_VALUE;
}
}

protected final void initIAA7ML(String s) {
if (!s.trim().isEmpty()) {
IAA7ML = Short.parseShort(s);
} else {
IAA7ML = Short.MIN_VALUE;
}
}

protected final void initIAA7MR(String s) {
if (!s.trim().isEmpty()) {
IAA7MR = Byte.parseByte(s);
} else {
IAA7MR = Byte.MIN_VALUE;
}
}

protected final void initIAA7MU(String s) {
if (!s.trim().isEmpty()) {
IAA7MU = Short.parseShort(s);
} else {
IAA7MU = Short.MIN_VALUE;
}
}

protected final void initIAA7OE(String s) {
if (!s.trim().isEmpty()) {
IAA7OE = Byte.parseByte(s);
} else {
IAA7OE = Byte.MIN_VALUE;
}
}

protected final void initIAA7OL(String s) {
if (!s.trim().isEmpty()) {
IAA7OL = Short.parseShort(s);
} else {
IAA7OL = Short.MIN_VALUE;
}
}

protected final void initIAA7OR(String s) {
if (!s.trim().isEmpty()) {
IAA7OR = Byte.parseByte(s);
} else {
IAA7OR = Byte.MIN_VALUE;
}
}

protected final void initIAA7OU(String s) {
if (!s.trim().isEmpty()) {
IAA7OU = Short.parseShort(s);
} else {
IAA7OU = Short.MIN_VALUE;
}
}

protected final void initIAA7WE(String s) {
if (!s.trim().isEmpty()) {
IAA7WE = Byte.parseByte(s);
} else {
IAA7WE = Byte.MIN_VALUE;
}
}

protected final void initIAA7WL(String s) {
if (!s.trim().isEmpty()) {
IAA7WL = Short.parseShort(s);
} else {
IAA7WL = Short.MIN_VALUE;
}
}

protected final void initIAA7WR(String s) {
if (!s.trim().isEmpty()) {
IAA7WR = Byte.parseByte(s);
} else {
IAA7WR = Byte.MIN_VALUE;
}
}

protected final void initIAA7WU(String s) {
if (!s.trim().isEmpty()) {
IAA7WU = Short.parseShort(s);
} else {
IAA7WU = Short.MIN_VALUE;
}
}

protected final void initIAA7YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA7YE = false;
}
}

protected final void initIAA7YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA7YL = false;
}
}

protected final void initIAA7YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA7YR = false;
}
}

protected final void initIAA7YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA7YU = false;
}
}

protected final void initIAA8(String s) {
if (!s.trim().isEmpty()) {
IAA8 = Short.parseShort(s);
} else {
IAA8 = Short.MIN_VALUE;
}
}

protected final void initIAA8FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA8FE = false;
}
}

protected final void initIAA8FL(String s) {
if (!s.trim().isEmpty()) {
IAA8FL = Short.parseShort(s);
} else {
IAA8FL = Short.MIN_VALUE;
}
}

protected final void initIAA8FR(String s) {
if (!s.trim().isEmpty()) {
IAA8FR = Byte.parseByte(s);
} else {
IAA8FR = Byte.MIN_VALUE;
}
}

protected final void initIAA8FU(String s) {
if (!s.trim().isEmpty()) {
IAA8FU = Short.parseShort(s);
} else {
IAA8FU = Short.MIN_VALUE;
}
}

protected final void initIAA8ME(String s) {
if (!s.trim().isEmpty()) {
IAA8ME = Byte.parseByte(s);
} else {
IAA8ME = Byte.MIN_VALUE;
}
}

protected final void initIAA8ML(String s) {
if (!s.trim().isEmpty()) {
IAA8ML = Short.parseShort(s);
} else {
IAA8ML = Short.MIN_VALUE;
}
}

protected final void initIAA8MR(String s) {
if (!s.trim().isEmpty()) {
IAA8MR = Byte.parseByte(s);
} else {
IAA8MR = Byte.MIN_VALUE;
}
}

protected final void initIAA8MU(String s) {
if (!s.trim().isEmpty()) {
IAA8MU = Short.parseShort(s);
} else {
IAA8MU = Short.MIN_VALUE;
}
}

protected final void initIAA8OE(String s) {
if (!s.trim().isEmpty()) {
IAA8OE = Byte.parseByte(s);
} else {
IAA8OE = Byte.MIN_VALUE;
}
}

protected final void initIAA8OL(String s) {
if (!s.trim().isEmpty()) {
IAA8OL = Short.parseShort(s);
} else {
IAA8OL = Short.MIN_VALUE;
}
}

protected final void initIAA8OR(String s) {
if (!s.trim().isEmpty()) {
IAA8OR = Byte.parseByte(s);
} else {
IAA8OR = Byte.MIN_VALUE;
}
}

protected final void initIAA8OU(String s) {
if (!s.trim().isEmpty()) {
IAA8OU = Short.parseShort(s);
} else {
IAA8OU = Short.MIN_VALUE;
}
}

protected final void initIAA8WE(String s) {
if (!s.trim().isEmpty()) {
IAA8WE = Byte.parseByte(s);
} else {
IAA8WE = Byte.MIN_VALUE;
}
}

protected final void initIAA8WL(String s) {
if (!s.trim().isEmpty()) {
IAA8WL = Byte.parseByte(s);
} else {
IAA8WL = Byte.MIN_VALUE;
}
}

protected final void initIAA8WR(String s) {
if (!s.trim().isEmpty()) {
IAA8WR = Byte.parseByte(s);
} else {
IAA8WR = Byte.MIN_VALUE;
}
}

protected final void initIAA8WU(String s) {
if (!s.trim().isEmpty()) {
IAA8WU = Byte.parseByte(s);
} else {
IAA8WU = Byte.MIN_VALUE;
}
}

protected final void initIAA8YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA8YE = false;
}
}

protected final void initIAA8YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA8YL = false;
}
}

protected final void initIAA8YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA8YR = false;
}
}

protected final void initIAA8YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA8YU = false;
}
}

protected final void initIAA9(String s) {
if (!s.trim().isEmpty()) {
IAA9 = Short.parseShort(s);
} else {
IAA9 = Short.MIN_VALUE;
}
}

protected final void initIAA9FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA9FE = false;
}
}

protected final void initIAA9FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA9FL = false;
}
}

protected final void initIAA9FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA9FR = false;
}
}

protected final void initIAA9FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA9FU = false;
}
}

protected final void initIAA9ME(String s) {
if (!s.trim().isEmpty()) {
IAA9ME = Byte.parseByte(s);
} else {
IAA9ME = Byte.MIN_VALUE;
}
}

protected final void initIAA9ML(String s) {
if (!s.trim().isEmpty()) {
IAA9ML = Short.parseShort(s);
} else {
IAA9ML = Short.MIN_VALUE;
}
}

protected final void initIAA9MR(String s) {
if (!s.trim().isEmpty()) {
IAA9MR = Byte.parseByte(s);
} else {
IAA9MR = Byte.MIN_VALUE;
}
}

protected final void initIAA9MU(String s) {
if (!s.trim().isEmpty()) {
IAA9MU = Short.parseShort(s);
} else {
IAA9MU = Short.MIN_VALUE;
}
}

protected final void initIAA9OE(String s) {
if (!s.trim().isEmpty()) {
IAA9OE = Byte.parseByte(s);
} else {
IAA9OE = Byte.MIN_VALUE;
}
}

protected final void initIAA9OL(String s) {
if (!s.trim().isEmpty()) {
IAA9OL = Short.parseShort(s);
} else {
IAA9OL = Short.MIN_VALUE;
}
}

protected final void initIAA9OR(String s) {
if (!s.trim().isEmpty()) {
IAA9OR = Byte.parseByte(s);
} else {
IAA9OR = Byte.MIN_VALUE;
}
}

protected final void initIAA9OU(String s) {
if (!s.trim().isEmpty()) {
IAA9OU = Short.parseShort(s);
} else {
IAA9OU = Short.MIN_VALUE;
}
}

protected final void initIAA9WE(String s) {
if (!s.trim().isEmpty()) {
IAA9WE = Byte.parseByte(s);
} else {
IAA9WE = Byte.MIN_VALUE;
}
}

protected final void initIAA9WL(String s) {
if (!s.trim().isEmpty()) {
IAA9WL = Byte.parseByte(s);
} else {
IAA9WL = Byte.MIN_VALUE;
}
}

protected final void initIAA9WR(String s) {
if (!s.trim().isEmpty()) {
IAA9WR = Byte.parseByte(s);
} else {
IAA9WR = Byte.MIN_VALUE;
}
}

protected final void initIAA9WU(String s) {
if (!s.trim().isEmpty()) {
IAA9WU = Byte.parseByte(s);
} else {
IAA9WU = Byte.MIN_VALUE;
}
}

protected final void initIAA9YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA9YE = false;
}
}

protected final void initIAA9YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA9YL = false;
}
}

protected final void initIAA9YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA9YR = false;
}
}

protected final void initIAA9YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAA9YU = false;
}
}

protected final void initIAAILY(String s) {
if (!s.trim().isEmpty()) {
IAAILY = Byte.parseByte(s);
} else {
IAAILY = Byte.MIN_VALUE;
}
}

protected final void initIAAIM(String s) {
if (!s.trim().isEmpty()) {
IAAIM = Integer.parseInt(s);
} else {
IAAIM = Integer.MIN_VALUE;
}
}

protected final void initIAAIME(String s) {
if (!s.trim().isEmpty()) {
IAAIME = Byte.parseByte(s);
} else {
IAAIME = Byte.MIN_VALUE;
}
}

protected final void initIAAIML(String s) {
if (!s.trim().isEmpty()) {
IAAIML = Short.parseShort(s);
} else {
IAAIML = Short.MIN_VALUE;
}
}

protected final void initIAAIMR(String s) {
if (!s.trim().isEmpty()) {
IAAIMR = Byte.parseByte(s);
} else {
IAAIMR = Byte.MIN_VALUE;
}
}

protected final void initIAAIMU(String s) {
if (!s.trim().isEmpty()) {
IAAIMU = Short.parseShort(s);
} else {
IAAIMU = Short.MIN_VALUE;
}
}

protected final void initIAAIP(String s) {
if (!s.trim().isEmpty()) {
IAAIP = Integer.parseInt(s);
} else {
IAAIP = Integer.MIN_VALUE;
}
}

protected final void initIAAM(String s) {
if (!s.trim().isEmpty()) {
IAAM = Integer.parseInt(s);
} else {
IAAM = Integer.MIN_VALUE;
}
}

protected final void initIAAME(String s) {
if (!s.trim().isEmpty()) {
IAAME = Byte.parseByte(s);
} else {
IAAME = Byte.MIN_VALUE;
}
}

protected final void initIAAML(String s) {
if (!s.trim().isEmpty()) {
IAAML = Integer.parseInt(s);
} else {
IAAML = Integer.MIN_VALUE;
}
}

protected final void initIAAMR(String s) {
if (!s.trim().isEmpty()) {
IAAMR = Byte.parseByte(s);
} else {
IAAMR = Byte.MIN_VALUE;
}
}

protected final void initIAAMU(String s) {
if (!s.trim().isEmpty()) {
IAAMU = Integer.parseInt(s);
} else {
IAAMU = Integer.MIN_VALUE;
}
}

protected final void initIAANIN(String s) {
if (!s.trim().isEmpty()) {
IAANIN = Byte.parseByte(s);
} else {
IAANIN = Byte.MIN_VALUE;
}
}

protected final void initIAASK(String s) {
if (!s.trim().isEmpty()) {
IAASK = Byte.parseByte(s);
} else {
IAASK = Byte.MIN_VALUE;
}
}

protected final void initIABG(String s) {
if (!s.trim().isEmpty()) {
IABG = Integer.parseInt(s);
} else {
IABG = Integer.MIN_VALUE;
}
}

protected final void initIABGE(String s) {
if (!s.trim().isEmpty()) {
IABGE = Byte.parseByte(s);
} else {
IABGE = Byte.MIN_VALUE;
}
}

protected final void initIABGI(String s) {
if (!s.trim().isEmpty()) {
IABGI = Integer.parseInt(s);
} else {
IABGI = Integer.MIN_VALUE;
}
}

protected final void initIABGIE(String s) {
if (!s.trim().isEmpty()) {
IABGIE = Byte.parseByte(s);
} else {
IABGIE = Byte.MIN_VALUE;
}
}

protected final void initIABGIL(String s) {
if (!s.trim().isEmpty()) {
IABGIL = Integer.parseInt(s);
} else {
IABGIL = Integer.MIN_VALUE;
}
}

protected final void initIABGIR(String s) {
if (!s.trim().isEmpty()) {
IABGIR = Byte.parseByte(s);
} else {
IABGIR = Byte.MIN_VALUE;
}
}

protected final void initIABGIU(String s) {
if (!s.trim().isEmpty()) {
IABGIU = Integer.parseInt(s);
} else {
IABGIU = Integer.MIN_VALUE;
}
}

protected final void initIABGL(String s) {
if (!s.trim().isEmpty()) {
IABGL = Integer.parseInt(s);
} else {
IABGL = Integer.MIN_VALUE;
}
}

protected final void initIABGR(String s) {
if (!s.trim().isEmpty()) {
IABGR = Byte.parseByte(s);
} else {
IABGR = Byte.MIN_VALUE;
}
}

protected final void initIABGU(String s) {
if (!s.trim().isEmpty()) {
IABGU = Integer.parseInt(s);
} else {
IABGU = Integer.MIN_VALUE;
}
}

protected final void initIACISA(String s) {
if (!s.trim().isEmpty()) {
IACISA = Integer.parseInt(s);
} else {
IACISA = Integer.MIN_VALUE;
}
}

protected final void initIADEBM(String s) {
if (!s.trim().isEmpty()) {
IADEBM = Integer.parseInt(s);
} else {
IADEBM = Integer.MIN_VALUE;
}
}

protected final void initIADEBT(String s) {
if (!s.trim().isEmpty()) {
IADEBT = Byte.parseByte(s);
} else {
IADEBT = Byte.MIN_VALUE;
}
}

protected final void initIADEMUT(String s) {
if (!s.trim().isEmpty()) {
IADEMUT = Byte.parseByte(s);
} else {
IADEMUT = Byte.MIN_VALUE;
}
}

protected final void initIADENAT(String s) {
if (!s.trim().isEmpty()) {
IADENAT = Byte.parseByte(s);
} else {
IADENAT = Byte.MIN_VALUE;
}
}

protected final void initIADOC(String s) {
if (!s.trim().isEmpty()) {
IADOC = Byte.parseByte(s);
} else {
IADOC = Byte.MIN_VALUE;
}
}

protected final void initIAFBA(String s) {
if (!s.trim().isEmpty()) {
IAFBA = Integer.parseInt(s);
} else {
IAFBA = Integer.MIN_VALUE;
}
}

protected final void initIAFBPR(String s) {
if (!s.trim().isEmpty()) {
IAFBPR = Byte.parseByte(s);
} else {
IAFBPR = Byte.MIN_VALUE;
}
}

protected final void initIAFBPS(String s) {
if (!s.trim().isEmpty()) {
IAFBPS = Integer.parseInt(s);
} else {
IAFBPS = Integer.MIN_VALUE;
}
}

protected final void initIAFBPSE(String s) {
if (!s.trim().isEmpty()) {
IAFBPSE = Byte.parseByte(s);
} else {
IAFBPSE = Byte.MIN_VALUE;
}
}

protected final void initIAFBPSL(String s) {
if (!s.trim().isEmpty()) {
IAFBPSL = Integer.parseInt(s);
} else {
IAFBPSL = Integer.MIN_VALUE;
}
}

protected final void initIAFBPSR(String s) {
if (!s.trim().isEmpty()) {
IAFBPSR = Byte.parseByte(s);
} else {
IAFBPSR = Byte.MIN_VALUE;
}
}

protected final void initIAFBPSU(String s) {
if (!s.trim().isEmpty()) {
IAFBPSU = Integer.parseInt(s);
} else {
IAFBPSU = Integer.MIN_VALUE;
}
}

protected final void initIAFCON(String s) {
if (!s.trim().isEmpty()) {
IAFCON = Byte.parseByte(s);
} else {
IAFCON = Byte.MIN_VALUE;
}
}

protected final void initIAFIND(String s) {
if (!s.trim().isEmpty()) {
IAFIND = Byte.parseByte(s);
} else {
IAFIND = Byte.MIN_VALUE;
}
}

protected final void initIAHOME(String s) {
if (!s.trim().isEmpty()) {
IAHOME = Integer.parseInt(s);
} else {
IAHOME = Integer.MIN_VALUE;
}
}

protected final void initIAINTA(String s) {
if (!s.trim().isEmpty()) {
IAINTA = Byte.parseByte(s);
} else {
IAINTA = Byte.MIN_VALUE;
}
}

protected final void initIAIP(String s) {
if (!s.trim().isEmpty()) {
IAIP = Integer.parseInt(s);
} else {
IAIP = Integer.MIN_VALUE;
}
}

protected final void initIAIPE(String s) {
if (!s.trim().isEmpty()) {
IAIPE = Byte.parseByte(s);
} else {
IAIPE = Byte.MIN_VALUE;
}
}

protected final void initIAIPI(String s) {
if (!s.trim().isEmpty()) {
IAIPI = Integer.parseInt(s);
} else {
IAIPI = Integer.MIN_VALUE;
}
}

protected final void initIAIPIE(String s) {
if (!s.trim().isEmpty()) {
IAIPIE = Byte.parseByte(s);
} else {
IAIPIE = Byte.MIN_VALUE;
}
}

protected final void initIAIPIL(String s) {
if (!s.trim().isEmpty()) {
IAIPIL = Short.parseShort(s);
} else {
IAIPIL = Short.MIN_VALUE;
}
}

protected final void initIAIPIR(String s) {
if (!s.trim().isEmpty()) {
IAIPIR = Byte.parseByte(s);
} else {
IAIPIR = Byte.MIN_VALUE;
}
}

protected final void initIAIPIU(String s) {
if (!s.trim().isEmpty()) {
IAIPIU = Short.parseShort(s);
} else {
IAIPIU = Short.MIN_VALUE;
}
}

protected final void initIAIPL(String s) {
if (!s.trim().isEmpty()) {
IAIPL = Integer.parseInt(s);
} else {
IAIPL = Integer.MIN_VALUE;
}
}

protected final void initIAIPR(String s) {
if (!s.trim().isEmpty()) {
IAIPR = Byte.parseByte(s);
} else {
IAIPR = Byte.MIN_VALUE;
}
}

protected final void initIAIPU(String s) {
if (!s.trim().isEmpty()) {
IAIPU = Integer.parseInt(s);
} else {
IAIPU = Integer.MIN_VALUE;
}
}

protected final void initIAIR(String s) {
if (!s.trim().isEmpty()) {
IAIR = Byte.parseByte(s);
} else {
IAIR = Byte.MIN_VALUE;
}
}

protected final void initIAIRA(String s) {
if (!s.trim().isEmpty()) {
IAIRA = Integer.parseInt(s);
} else {
IAIRA = Integer.MIN_VALUE;
}
}

protected final void initIAISAD(String s) {
if (!s.trim().isEmpty()) {
IAISAD = Integer.parseInt(s);
} else {
IAISAD = Integer.MIN_VALUE;
}
}

protected final void initIAJNT(String s) {
if (!s.trim().isEmpty()) {
IAJNT = Byte.parseByte(s);
} else {
IAJNT = Byte.MIN_VALUE;
}
}

protected final void initIALI(String s) {
if (!s.trim().isEmpty()) {
IALI = Byte.parseByte(s);
} else {
IALI = Byte.MIN_VALUE;
}
}

protected final void initIALIPA(String s) {
if (!s.trim().isEmpty()) {
IALIPA = Integer.parseInt(s);
} else {
IALIPA = Integer.MIN_VALUE;
}
}

protected final void initIALISA(String s) {
if (!s.trim().isEmpty()) {
IALISA = Integer.parseInt(s);
} else {
IALISA = Integer.MIN_VALUE;
}
}

protected final void initIALIW(String s) {
if (!s.trim().isEmpty()) {
IALIW = Byte.parseByte(s);
} else {
IALIW = Byte.MIN_VALUE;
}
}

protected final void initIALIYA(String s) {
if (!s.trim().isEmpty()) {
IALIYA = Integer.parseInt(s);
} else {
IALIYA = Integer.MIN_VALUE;
}
}

protected final void initIALOAM(String s) {
if (!s.trim().isEmpty()) {
IALOAM = Integer.parseInt(s);
} else {
IALOAM = Integer.MIN_VALUE;
}
}

protected final void initIALRE(String s) {
if (!s.trim().isEmpty()) {
IALRE = Short.parseShort(s);
} else {
IALRE = Short.MIN_VALUE;
}
}

protected final void initIALREP(String s) {
if (!s.trim().isEmpty()) {
IALREP = Byte.parseByte(s);
} else {
IALREP = Byte.MIN_VALUE;
}
}

protected final void initIAMRP(String s) {
if (!s.trim().isEmpty()) {
IAMRP = Byte.parseByte(s);
} else {
IAMRP = Byte.MIN_VALUE;
}
}

protected final void initIANPB(String s) {
if (!s.trim().isEmpty()) {
IANPB = Integer.parseInt(s);
} else {
IANPB = Integer.MIN_VALUE;
}
}

protected final void initIANPBE(String s) {
if (!s.trim().isEmpty()) {
IANPBE = Byte.parseByte(s);
} else {
IANPBE = Byte.MIN_VALUE;
}
}

protected final void initIANPBL(String s) {
if (!s.trim().isEmpty()) {
IANPBL = Short.parseShort(s);
} else {
IANPBL = Short.MIN_VALUE;
}
}

protected final void initIANPBP(String s) {
if (!s.trim().isEmpty()) {
IANPBP = Integer.parseInt(s);
} else {
IANPBP = Integer.MIN_VALUE;
}
}

protected final void initIANPBR(String s) {
if (!s.trim().isEmpty()) {
IANPBR = Byte.parseByte(s);
} else {
IANPBR = Byte.MIN_VALUE;
}
}

protected final void initIANPBU(String s) {
if (!s.trim().isEmpty()) {
IANPBU = Short.parseShort(s);
} else {
IANPBU = Short.MIN_VALUE;
}
}

protected final void initIANS(String s) {
if (!s.trim().isEmpty()) {
IANS = Integer.parseInt(s);
} else {
IANS = Integer.MIN_VALUE;
}
}

protected final void initIANSE(String s) {
if (!s.trim().isEmpty()) {
IANSE = Byte.parseByte(s);
} else {
IANSE = Byte.MIN_VALUE;
}
}

protected final void initIANSHO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IANSHO = false;
}
}

protected final void initIANSI(String s) {
if (!s.trim().isEmpty()) {
IANSI = Short.parseShort(s);
} else {
IANSI = Short.MIN_VALUE;
}
}

protected final void initIANSIA(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IANSIA = false;
}
}

protected final void initIANSIE(String s) {
if (!s.trim().isEmpty()) {
IANSIE = Byte.parseByte(s);
} else {
IANSIE = Byte.MIN_VALUE;
}
}

protected final void initIANSIL(String s) {
if (!s.trim().isEmpty()) {
IANSIL = Short.parseShort(s);
} else {
IANSIL = Short.MIN_VALUE;
}
}

protected final void initIANSIR(String s) {
if (!s.trim().isEmpty()) {
IANSIR = Byte.parseByte(s);
} else {
IANSIR = Byte.MIN_VALUE;
}
}

protected final void initIANSIU(String s) {
if (!s.trim().isEmpty()) {
IANSIU = Short.parseShort(s);
} else {
IANSIU = Short.MIN_VALUE;
}
}

protected final void initIANSL(String s) {
if (!s.trim().isEmpty()) {
IANSL = Integer.parseInt(s);
} else {
IANSL = Integer.MIN_VALUE;
}
}

protected final void initIANSR(String s) {
if (!s.trim().isEmpty()) {
IANSR = Byte.parseByte(s);
} else {
IANSR = Byte.MIN_VALUE;
}
}

protected final void initIANSU(String s) {
if (!s.trim().isEmpty()) {
IANSU = Integer.parseInt(s);
} else {
IANSU = Integer.MIN_VALUE;
}
}

protected final void initIAOASA(String s) {
if (!s.trim().isEmpty()) {
IAOASA = Integer.parseInt(s);
} else {
IAOASA = Integer.MIN_VALUE;
}
}

protected final void initIAOM(String s) {
if (!s.trim().isEmpty()) {
IAOM = Byte.parseByte(s);
} else {
IAOM = Byte.MIN_VALUE;
}
}

protected final void initIAOMM(String s) {
if (!s.trim().isEmpty()) {
IAOMM = Integer.parseInt(s);
} else {
IAOMM = Integer.MIN_VALUE;
}
}

protected final void initIAORGF(String s) {
if (!s.trim().isEmpty()) {
IAORGF = Byte.parseByte(s);
} else {
IAORGF = Byte.MIN_VALUE;
}
}

protected final void initIAOTHP(String s) {
if (!s.trim().isEmpty()) {
IAOTHP = Byte.parseByte(s);
} else {
IAOTHP = Byte.MIN_VALUE;
}
}

protected final void initIAOTHP2(String s) {
if (!s.trim().isEmpty()) {
IAOTHP2 = Byte.parseByte(s);
} else {
IAOTHP2 = Byte.MIN_VALUE;
}
}

protected final void initIAOWE(String s) {
if (!s.trim().isEmpty()) {
IAOWE = Byte.parseByte(s);
} else {
IAOWE = Byte.MIN_VALUE;
}
}

protected final void initIAOWEM(String s) {
if (!s.trim().isEmpty()) {
IAOWEM = Integer.parseInt(s);
} else {
IAOWEM = Integer.MIN_VALUE;
}
}

protected final void initIAP(String s) {
if (!s.trim().isEmpty()) {
IAP = Byte.parseByte(s);
} else {
IAP = Byte.MIN_VALUE;
}
}

protected final void initIAP10(String s) {
if (!s.trim().isEmpty()) {
IAP10 = Byte.parseByte(s);
} else {
IAP10 = Byte.MIN_VALUE;
}
}

protected final void initIAP11(String s) {
if (!s.trim().isEmpty()) {
IAP11 = Byte.parseByte(s);
} else {
IAP11 = Byte.MIN_VALUE;
}
}

protected final void initIAP12(String s) {
if (!s.trim().isEmpty()) {
IAP12 = Byte.parseByte(s);
} else {
IAP12 = Byte.MIN_VALUE;
}
}

protected final void initIAP13(String s) {
if (!s.trim().isEmpty()) {
IAP13 = Byte.parseByte(s);
} else {
IAP13 = Byte.MIN_VALUE;
}
}

protected final void initIAP14(String s) {
if (!s.trim().isEmpty()) {
IAP14 = Byte.parseByte(s);
} else {
IAP14 = Byte.MIN_VALUE;
}
}

protected final void initIAP15(String s) {
if (!s.trim().isEmpty()) {
IAP15 = Byte.parseByte(s);
} else {
IAP15 = Byte.MIN_VALUE;
}
}

protected final void initIAP16(String s) {
if (!s.trim().isEmpty()) {
IAP16 = Byte.parseByte(s);
} else {
IAP16 = Byte.MIN_VALUE;
}
}

protected final void initIAP17(String s) {
if (!s.trim().isEmpty()) {
IAP17 = Byte.parseByte(s);
} else {
IAP17 = Byte.MIN_VALUE;
}
}

protected final void initIAP18(String s) {
if (!s.trim().isEmpty()) {
IAP18 = Byte.parseByte(s);
} else {
IAP18 = Byte.MIN_VALUE;
}
}

protected final void initIAP19(String s) {
if (!s.trim().isEmpty()) {
IAP19 = Byte.parseByte(s);
} else {
IAP19 = Byte.MIN_VALUE;
}
}

protected final void initIAP2(String s) {
if (!s.trim().isEmpty()) {
IAP2 = Byte.parseByte(s);
} else {
IAP2 = Byte.MIN_VALUE;
}
}

protected final void initIAP20(String s) {
if (!s.trim().isEmpty()) {
IAP20 = Byte.parseByte(s);
} else {
IAP20 = Byte.MIN_VALUE;
}
}

protected final void initIAP21(String s) {
if (!s.trim().isEmpty()) {
IAP21 = Byte.parseByte(s);
} else {
IAP21 = Byte.MIN_VALUE;
}
}

protected final void initIAP22(String s) {
if (!s.trim().isEmpty()) {
IAP22 = Byte.parseByte(s);
} else {
IAP22 = Byte.MIN_VALUE;
}
}

protected final void initIAP23(String s) {
if (!s.trim().isEmpty()) {
IAP23 = Byte.parseByte(s);
} else {
IAP23 = Byte.MIN_VALUE;
}
}

protected final void initIAP24(String s) {
if (!s.trim().isEmpty()) {
IAP24 = Byte.parseByte(s);
} else {
IAP24 = Byte.MIN_VALUE;
}
}

protected final void initIAP25(String s) {
if (!s.trim().isEmpty()) {
IAP25 = Byte.parseByte(s);
} else {
IAP25 = Byte.MIN_VALUE;
}
}

protected final void initIAP26(String s) {
if (!s.trim().isEmpty()) {
IAP26 = Byte.parseByte(s);
} else {
IAP26 = Byte.MIN_VALUE;
}
}

protected final void initIAP27(String s) {
if (!s.trim().isEmpty()) {
IAP27 = Byte.parseByte(s);
} else {
IAP27 = Byte.MIN_VALUE;
}
}

protected final void initIAP28(String s) {
if (!s.trim().isEmpty()) {
IAP28 = Byte.parseByte(s);
} else {
IAP28 = Byte.MIN_VALUE;
}
}

protected final void initIAP29(String s) {
if (!s.trim().isEmpty()) {
IAP29 = Byte.parseByte(s);
} else {
IAP29 = Byte.MIN_VALUE;
}
}

protected final void initIAP3(String s) {
if (!s.trim().isEmpty()) {
IAP3 = Byte.parseByte(s);
} else {
IAP3 = Byte.MIN_VALUE;
}
}

protected final void initIAP30(String s) {
if (!s.trim().isEmpty()) {
IAP30 = Byte.parseByte(s);
} else {
IAP30 = Byte.MIN_VALUE;
}
}

protected final void initIAP31(String s) {
if (!s.trim().isEmpty()) {
IAP31 = Byte.parseByte(s);
} else {
IAP31 = Byte.MIN_VALUE;
}
}

protected final void initIAP32(String s) {
if (!s.trim().isEmpty()) {
IAP32 = Byte.parseByte(s);
} else {
IAP32 = Byte.MIN_VALUE;
}
}

protected final void initIAP33(String s) {
if (!s.trim().isEmpty()) {
IAP33 = Byte.parseByte(s);
} else {
IAP33 = Byte.MIN_VALUE;
}
}

protected final void initIAP34(String s) {
if (!s.trim().isEmpty()) {
IAP34 = Byte.parseByte(s);
} else {
IAP34 = Byte.MIN_VALUE;
}
}

protected final void initIAP35(String s) {
if (!s.trim().isEmpty()) {
IAP35 = Byte.parseByte(s);
} else {
IAP35 = Byte.MIN_VALUE;
}
}

protected final void initIAP36(String s) {
if (!s.trim().isEmpty()) {
IAP36 = Byte.parseByte(s);
} else {
IAP36 = Byte.MIN_VALUE;
}
}

protected final void initIAP37(String s) {
if (!s.trim().isEmpty()) {
IAP37 = Byte.parseByte(s);
} else {
IAP37 = Byte.MIN_VALUE;
}
}

protected final void initIAP38(String s) {
if (!s.trim().isEmpty()) {
IAP38 = Byte.parseByte(s);
} else {
IAP38 = Byte.MIN_VALUE;
}
}

protected final void initIAP4(String s) {
if (!s.trim().isEmpty()) {
IAP4 = Byte.parseByte(s);
} else {
IAP4 = Byte.MIN_VALUE;
}
}

protected final void initIAP5(String s) {
if (!s.trim().isEmpty()) {
IAP5 = Byte.parseByte(s);
} else {
IAP5 = Byte.MIN_VALUE;
}
}

protected final void initIAP6(String s) {
if (!s.trim().isEmpty()) {
IAP6 = Byte.parseByte(s);
} else {
IAP6 = Byte.MIN_VALUE;
}
}

protected final void initIAP7(String s) {
if (!s.trim().isEmpty()) {
IAP7 = Byte.parseByte(s);
} else {
IAP7 = Byte.MIN_VALUE;
}
}

protected final void initIAP8(String s) {
if (!s.trim().isEmpty()) {
IAP8 = Byte.parseByte(s);
} else {
IAP8 = Byte.MIN_VALUE;
}
}

protected final void initIAP9(String s) {
if (!s.trim().isEmpty()) {
IAP9 = Byte.parseByte(s);
} else {
IAP9 = Byte.MIN_VALUE;
}
}

protected final void initIAPA2FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2FE = false;
}
}

protected final void initIAPA2FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2FL = false;
}
}

protected final void initIAPA2FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2FR = false;
}
}

protected final void initIAPA2FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2FU = false;
}
}

protected final void initIAPA2ME(String s) {
if (!s.trim().isEmpty()) {
IAPA2ME = Byte.parseByte(s);
} else {
IAPA2ME = Byte.MIN_VALUE;
}
}

protected final void initIAPA2ML(String s) {
if (!s.trim().isEmpty()) {
IAPA2ML = Short.parseShort(s);
} else {
IAPA2ML = Short.MIN_VALUE;
}
}

protected final void initIAPA2MR(String s) {
if (!s.trim().isEmpty()) {
IAPA2MR = Byte.parseByte(s);
} else {
IAPA2MR = Byte.MIN_VALUE;
}
}

protected final void initIAPA2MU(String s) {
if (!s.trim().isEmpty()) {
IAPA2MU = Byte.parseByte(s);
} else {
IAPA2MU = Byte.MIN_VALUE;
}
}

protected final void initIAPA2OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2OE = false;
}
}

protected final void initIAPA2OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2OL = false;
}
}

protected final void initIAPA2OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2OR = false;
}
}

protected final void initIAPA2OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2OU = false;
}
}

protected final void initIAPA2WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2WE = false;
}
}

protected final void initIAPA2WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2WL = false;
}
}

protected final void initIAPA2WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2WR = false;
}
}

protected final void initIAPA2WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2WU = false;
}
}

protected final void initIAPA2YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2YE = false;
}
}

protected final void initIAPA2YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2YL = false;
}
}

protected final void initIAPA2YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPA2YR = false;
}
}

protected final void initIAPA2YU(String s) {
if (!s.trim().isEmpty()) {
IAPA2YU = Short.parseShort(s);
} else {
IAPA2YU = Short.MIN_VALUE;
}
}

protected final void initIAPAM(String s) {
if (!s.trim().isEmpty()) {
IAPAM = Integer.parseInt(s);
} else {
IAPAM = Integer.MIN_VALUE;
}
}

protected final void initIAPAM2(String s) {
if (!s.trim().isEmpty()) {
IAPAM2 = Short.parseShort(s);
} else {
IAPAM2 = Short.MIN_VALUE;
}
}

protected final void initIAPAMFE(String s) {
if (!s.trim().isEmpty()) {
IAPAMFE = Byte.parseByte(s);
} else {
IAPAMFE = Byte.MIN_VALUE;
}
}

protected final void initIAPAMFL(String s) {
if (!s.trim().isEmpty()) {
IAPAMFL = Short.parseShort(s);
} else {
IAPAMFL = Short.MIN_VALUE;
}
}

protected final void initIAPAMFR(String s) {
if (!s.trim().isEmpty()) {
IAPAMFR = Byte.parseByte(s);
} else {
IAPAMFR = Byte.MIN_VALUE;
}
}

protected final void initIAPAMFU(String s) {
if (!s.trim().isEmpty()) {
IAPAMFU = Short.parseShort(s);
} else {
IAPAMFU = Short.MIN_VALUE;
}
}

protected final void initIAPAMME(String s) {
if (!s.trim().isEmpty()) {
IAPAMME = Byte.parseByte(s);
} else {
IAPAMME = Byte.MIN_VALUE;
}
}

protected final void initIAPAMML(String s) {
if (!s.trim().isEmpty()) {
IAPAMML = Short.parseShort(s);
} else {
IAPAMML = Short.MIN_VALUE;
}
}

protected final void initIAPAMMR(String s) {
if (!s.trim().isEmpty()) {
IAPAMMR = Byte.parseByte(s);
} else {
IAPAMMR = Byte.MIN_VALUE;
}
}

protected final void initIAPAMMU(String s) {
if (!s.trim().isEmpty()) {
IAPAMMU = Short.parseShort(s);
} else {
IAPAMMU = Short.MIN_VALUE;
}
}

protected final void initIAPAMOE(String s) {
if (!s.trim().isEmpty()) {
IAPAMOE = Byte.parseByte(s);
} else {
IAPAMOE = Byte.MIN_VALUE;
}
}

protected final void initIAPAMOL(String s) {
if (!s.trim().isEmpty()) {
IAPAMOL = Short.parseShort(s);
} else {
IAPAMOL = Short.MIN_VALUE;
}
}

protected final void initIAPAMOR(String s) {
if (!s.trim().isEmpty()) {
IAPAMOR = Byte.parseByte(s);
} else {
IAPAMOR = Byte.MIN_VALUE;
}
}

protected final void initIAPAMOU(String s) {
if (!s.trim().isEmpty()) {
IAPAMOU = Short.parseShort(s);
} else {
IAPAMOU = Short.MIN_VALUE;
}
}

protected final void initIAPAMWE(String s) {
if (!s.trim().isEmpty()) {
IAPAMWE = Byte.parseByte(s);
} else {
IAPAMWE = Byte.MIN_VALUE;
}
}

protected final void initIAPAMWL(String s) {
if (!s.trim().isEmpty()) {
IAPAMWL = Short.parseShort(s);
} else {
IAPAMWL = Short.MIN_VALUE;
}
}

protected final void initIAPAMWR(String s) {
if (!s.trim().isEmpty()) {
IAPAMWR = Byte.parseByte(s);
} else {
IAPAMWR = Byte.MIN_VALUE;
}
}

protected final void initIAPAMWU(String s) {
if (!s.trim().isEmpty()) {
IAPAMWU = Short.parseShort(s);
} else {
IAPAMWU = Short.MIN_VALUE;
}
}

protected final void initIAPAMYE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAPAMYE = false;
}
}

protected final void initIAPAMYL(String s) {
if (!s.trim().isEmpty()) {
IAPAMYL = Short.parseShort(s);
} else {
IAPAMYL = Short.MIN_VALUE;
}
}

protected final void initIAPAMYR(String s) {
if (!s.trim().isEmpty()) {
IAPAMYR = Byte.parseByte(s);
} else {
IAPAMYR = Byte.MIN_VALUE;
}
}

protected final void initIAPAMYU(String s) {
if (!s.trim().isEmpty()) {
IAPAMYU = Short.parseShort(s);
} else {
IAPAMYU = Short.MIN_VALUE;
}
}

protected final void initIAPAR(String s) {
if (!s.trim().isEmpty()) {
IAPAR = Byte.parseByte(s);
} else {
IAPAR = Byte.MIN_VALUE;
}
}

protected final void initIAPF(String s) {
if (!s.trim().isEmpty()) {
IAPF = Byte.parseByte(s);
} else {
IAPF = Byte.MIN_VALUE;
}
}

protected final void initIAPID(String s) {
if (!s.trim().isEmpty()) {
IAPID = Byte.parseByte(s);
} else {
IAPID = Byte.MIN_VALUE;
}
}

protected final void initIAPKM1(String s) {
if (!s.trim().isEmpty()) {
IAPKM1 = Integer.parseInt(s);
} else {
IAPKM1 = Integer.MIN_VALUE;
}
}

protected final void initIAPKM2(String s) {
if (!s.trim().isEmpty()) {
IAPKM2 = Integer.parseInt(s);
} else {
IAPKM2 = Integer.MIN_VALUE;
}
}

protected final void initIAPKM3(String s) {
if (!s.trim().isEmpty()) {
IAPKM3 = Integer.parseInt(s);
} else {
IAPKM3 = Integer.MIN_VALUE;
}
}

protected final void initIAPKM4(String s) {
if (!s.trim().isEmpty()) {
IAPKM4 = Integer.parseInt(s);
} else {
IAPKM4 = Integer.MIN_VALUE;
}
}

protected final void initIAPKM5(String s) {
if (!s.trim().isEmpty()) {
IAPKM5 = Integer.parseInt(s);
} else {
IAPKM5 = Integer.MIN_VALUE;
}
}

protected final void initIAPKM6(String s) {
if (!s.trim().isEmpty()) {
IAPKM6 = Integer.parseInt(s);
} else {
IAPKM6 = Integer.MIN_VALUE;
}
}

protected final void initIAPKM7(String s) {
if (!s.trim().isEmpty()) {
IAPKM7 = Integer.parseInt(s);
} else {
IAPKM7 = Integer.MIN_VALUE;
}
}

protected final void initIAPKM8(String s) {
if (!s.trim().isEmpty()) {
IAPKM8 = Integer.parseInt(s);
} else {
IAPKM8 = Integer.MIN_VALUE;
}
}

protected final void initIAPPAM(String s) {
if (!s.trim().isEmpty()) {
IAPPAM = Short.parseShort(s);
} else {
IAPPAM = Short.MIN_VALUE;
}
}

protected final void initIAPPEI(String s) {
if (!s.trim().isEmpty()) {
IAPPEI = Integer.parseInt(s);
} else {
IAPPEI = Integer.MIN_VALUE;
}
}

protected final void initIAPPEN(String s) {
if (!s.trim().isEmpty()) {
IAPPEN = Byte.parseByte(s);
} else {
IAPPEN = Byte.MIN_VALUE;
}
}

protected final void initIAPR(String s) {
if (!s.trim().isEmpty()) {
IAPR = Byte.parseByte(s);
} else {
IAPR = Byte.MIN_VALUE;
}
}

protected final void initIAPS(String s) {
if (!s.trim().isEmpty()) {
IAPS = Byte.parseByte(s);
} else {
IAPS = Byte.MIN_VALUE;
}
}

protected final void initIAPY(String s) {
if (!s.trim().isEmpty()) {
IAPY = Byte.parseByte(s);
} else {
IAPY = Byte.MIN_VALUE;
}
}

protected final void initIAPYW(String s) {
if (!s.trim().isEmpty()) {
IAPYW = Byte.parseByte(s);
} else {
IAPYW = Byte.MIN_VALUE;
}
}

protected final void initIAPYW10(String s) {
if (!s.trim().isEmpty()) {
IAPYW10 = Byte.parseByte(s);
} else {
IAPYW10 = Byte.MIN_VALUE;
}
}

protected final void initIAREC(String s) {
if (!s.trim().isEmpty()) {
IAREC = Integer.parseInt(s);
} else {
IAREC = Integer.MIN_VALUE;
}
}

protected final void initIAREGM(String s) {
if (!s.trim().isEmpty()) {
IAREGM = Short.parseShort(s);
} else {
IAREGM = Short.MIN_VALUE;
}
}

protected final void initIAREGM2(String s) {
if (!s.trim().isEmpty()) {
IAREGM2 = Short.parseShort(s);
} else {
IAREGM2 = Short.MIN_VALUE;
}
}

protected final void initIAREGO(String s) {
if (!s.trim().isEmpty()) {
IAREGO = Byte.parseByte(s);
} else {
IAREGO = Byte.MIN_VALUE;
}
}

protected final void initIAREGO2(String s) {
if (!s.trim().isEmpty()) {
IAREGO2 = Byte.parseByte(s);
} else {
IAREGO2 = Byte.MIN_VALUE;
}
}

protected final void initIAREGP(String s) {
if (!s.trim().isEmpty()) {
IAREGP = Byte.parseByte(s);
} else {
IAREGP = Byte.MIN_VALUE;
}
}

protected final void initIAREGR(String s) {
if (!s.trim().isEmpty()) {
IAREGR = Byte.parseByte(s);
} else {
IAREGR = Byte.MIN_VALUE;
}
}

protected final void initIAREGRP(String s) {
if (!s.trim().isEmpty()) {
IAREGRP = Byte.parseByte(s);
} else {
IAREGRP = Byte.MIN_VALUE;
}
}

protected final void initIAREP(String s) {
if (!s.trim().isEmpty()) {
IAREP = Short.parseShort(s);
} else {
IAREP = Short.MIN_VALUE;
}
}

protected final void initIASAVA(String s) {
if (!s.trim().isEmpty()) {
IASAVA = Integer.parseInt(s);
} else {
IASAVA = Integer.MIN_VALUE;
}
}

protected final void initIASC(String s) {
if (!s.trim().isEmpty()) {
IASC = Byte.parseByte(s);
} else {
IASC = Byte.MIN_VALUE;
}
}

protected final void initIASCA(String s) {
if (!s.trim().isEmpty()) {
IASCA = Integer.parseInt(s);
} else {
IASCA = Integer.MIN_VALUE;
}
}

protected final void initIASINC(String s) {
if (!s.trim().isEmpty()) {
IASINC = Integer.parseInt(s);
} else {
IASINC = Integer.MIN_VALUE;
}
}

protected final void initIASINCE(String s) {
if (!s.trim().isEmpty()) {
IASINCE = Byte.parseByte(s);
} else {
IASINCE = Byte.MIN_VALUE;
}
}

protected final void initIASINCL(String s) {
if (!s.trim().isEmpty()) {
IASINCL = Integer.parseInt(s);
} else {
IASINCL = Integer.MIN_VALUE;
}
}

protected final void initIASINCR(String s) {
if (!s.trim().isEmpty()) {
IASINCR = Byte.parseByte(s);
} else {
IASINCR = Byte.MIN_VALUE;
}
}

protected final void initIASINCU(String s) {
if (!s.trim().isEmpty()) {
IASINCU = Integer.parseInt(s);
} else {
IASINCU = Integer.MIN_VALUE;
}
}

protected final void initIASINT(String s) {
if (!s.trim().isEmpty()) {
IASINT = Integer.parseInt(s);
} else {
IASINT = Integer.MIN_VALUE;
}
}

protected final void initIASINTE(String s) {
if (!s.trim().isEmpty()) {
IASINTE = Byte.parseByte(s);
} else {
IASINTE = Byte.MIN_VALUE;
}
}

protected final void initIASINTL(String s) {
if (!s.trim().isEmpty()) {
IASINTL = Short.parseShort(s);
} else {
IASINTL = Short.MIN_VALUE;
}
}

protected final void initIASINTR(String s) {
if (!s.trim().isEmpty()) {
IASINTR = Byte.parseByte(s);
} else {
IASINTR = Byte.MIN_VALUE;
}
}

protected final void initIASINTU(String s) {
if (!s.trim().isEmpty()) {
IASINTU = Short.parseShort(s);
} else {
IASINTU = Short.MIN_VALUE;
}
}

protected final void initIASIO(String s) {
if (!s.trim().isEmpty()) {
IASIO = Integer.parseInt(s);
} else {
IASIO = Integer.MIN_VALUE;
}
}

protected final void initIASIOE(String s) {
if (!s.trim().isEmpty()) {
IASIOE = Byte.parseByte(s);
} else {
IASIOE = Byte.MIN_VALUE;
}
}

protected final void initIASIOI(String s) {
if (!s.trim().isEmpty()) {
IASIOI = Integer.parseInt(s);
} else {
IASIOI = Integer.MIN_VALUE;
}
}

protected final void initIASIOL(String s) {
if (!s.trim().isEmpty()) {
IASIOL = Integer.parseInt(s);
} else {
IASIOL = Integer.MIN_VALUE;
}
}

protected final void initIASIOR(String s) {
if (!s.trim().isEmpty()) {
IASIOR = Byte.parseByte(s);
} else {
IASIOR = Byte.MIN_VALUE;
}
}

protected final void initIASIOU(String s) {
if (!s.trim().isEmpty()) {
IASIOU = Integer.parseInt(s);
} else {
IASIOU = Integer.MIN_VALUE;
}
}

protected final void initIASISA(String s) {
if (!s.trim().isEmpty()) {
IASISA = Integer.parseInt(s);
} else {
IASISA = Integer.MIN_VALUE;
}
}

protected final void initIASPA(String s) {
if (!s.trim().isEmpty()) {
IASPA = Byte.parseByte(s);
} else {
IASPA = Byte.MIN_VALUE;
}
}

protected final void initIASPEN(String s) {
if (!s.trim().isEmpty()) {
IASPEN = Byte.parseByte(s);
} else {
IASPEN = Byte.MIN_VALUE;
}
}

protected final void initIASPP(String s) {
if (!s.trim().isEmpty()) {
IASPP = Byte.parseByte(s);
} else {
IASPP = Byte.MIN_VALUE;
}
}

protected final void initIASPW(String s) {
if (!s.trim().isEmpty()) {
IASPW = Byte.parseByte(s);
} else {
IASPW = Byte.MIN_VALUE;
}
}

protected final void initIASSS(String s) {
if (!s.trim().isEmpty()) {
IASSS = Integer.parseInt(s);
} else {
IASSS = Integer.MIN_VALUE;
}
}

protected final void initIASSSI(String s) {
if (!s.trim().isEmpty()) {
IASSSI = Integer.parseInt(s);
} else {
IASSSI = Integer.MIN_VALUE;
}
}

protected final void initIAT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT = false;
}
}

protected final void initIAT10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT10 = false;
}
}

protected final void initIAT11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT11 = false;
}
}

protected final void initIAT12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT12 = false;
}
}

protected final void initIAT13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT13 = false;
}
}

protected final void initIAT14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT14 = false;
}
}

protected final void initIAT15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT15 = false;
}
}

protected final void initIAT16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT16 = false;
}
}

protected final void initIAT17(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT17 = false;
}
}

protected final void initIAT18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT18 = false;
}
}

protected final void initIAT19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT19 = false;
}
}

protected final void initIAT2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT2 = false;
}
}

protected final void initIAT20(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT20 = false;
}
}

protected final void initIAT21(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT21 = false;
}
}

protected final void initIAT22(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT22 = false;
}
}

protected final void initIAT23(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT23 = false;
}
}

protected final void initIAT24(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT24 = false;
}
}

protected final void initIAT25(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT25 = false;
}
}

protected final void initIAT26(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT26 = false;
}
}

protected final void initIAT27(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT27 = false;
}
}

protected final void initIAT28(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT28 = false;
}
}

protected final void initIAT29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT29 = false;
}
}

protected final void initIAT3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT3 = false;
}
}

protected final void initIAT30(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT30 = false;
}
}

protected final void initIAT31(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT31 = false;
}
}

protected final void initIAT32(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT32 = false;
}
}

protected final void initIAT33(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT33 = false;
}
}

protected final void initIAT34(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT34 = false;
}
}

protected final void initIAT35(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT35 = false;
}
}

protected final void initIAT36(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT36 = false;
}
}

protected final void initIAT37(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT37 = false;
}
}

protected final void initIAT38(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT38 = false;
}
}

protected final void initIAT4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT4 = false;
}
}

protected final void initIAT5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT5 = false;
}
}

protected final void initIAT6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT6 = false;
}
}

protected final void initIAT7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT7 = false;
}
}

protected final void initIAT8(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT8 = false;
}
}

protected final void initIAT9(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
IAT9 = false;
}
}

protected final void initIATI(String s) {
if (!s.trim().isEmpty()) {
IATI = Integer.parseInt(s);
} else {
IATI = Integer.MIN_VALUE;
}
}

protected final void initIATIE(String s) {
if (!s.trim().isEmpty()) {
IATIE = Byte.parseByte(s);
} else {
IATIE = Byte.MIN_VALUE;
}
}

protected final void initIATII(String s) {
if (!s.trim().isEmpty()) {
IATII = Short.parseShort(s);
} else {
IATII = Short.MIN_VALUE;
}
}

protected final void initIATIIE(String s) {
if (!s.trim().isEmpty()) {
IATIIE = Byte.parseByte(s);
} else {
IATIIE = Byte.MIN_VALUE;
}
}

protected final void initIATIIL(String s) {
if (!s.trim().isEmpty()) {
IATIIL = Short.parseShort(s);
} else {
IATIIL = Short.MIN_VALUE;
}
}

protected final void initIATIIR(String s) {
if (!s.trim().isEmpty()) {
IATIIR = Byte.parseByte(s);
} else {
IATIIR = Byte.MIN_VALUE;
}
}

protected final void initIATIIU(String s) {
if (!s.trim().isEmpty()) {
IATIIU = Short.parseShort(s);
} else {
IATIIU = Short.MIN_VALUE;
}
}

protected final void initIATIL(String s) {
if (!s.trim().isEmpty()) {
IATIL = Integer.parseInt(s);
} else {
IATIL = Integer.MIN_VALUE;
}
}

protected final void initIATIR(String s) {
if (!s.trim().isEmpty()) {
IATIR = Byte.parseByte(s);
} else {
IATIR = Byte.MIN_VALUE;
}
}

protected final void initIATIU(String s) {
if (!s.trim().isEmpty()) {
IATIU = Integer.parseInt(s);
} else {
IATIU = Integer.MIN_VALUE;
}
}

protected final void initIAUIT(String s) {
if (!s.trim().isEmpty()) {
IAUIT = Integer.parseInt(s);
} else {
IAUIT = Integer.MIN_VALUE;
}
}

protected final void initIAUITI(String s) {
if (!s.trim().isEmpty()) {
IAUITI = Integer.parseInt(s);
} else {
IAUITI = Integer.MIN_VALUE;
}
}

protected final void initIAWORK(String s) {
if (!s.trim().isEmpty()) {
IAWORK = Byte.parseByte(s);
} else {
IAWORK = Byte.MIN_VALUE;
}
}

protected final void initICB_P_F(String s) {
if (!s.trim().isEmpty()) {
ICB_P_F = Byte.parseByte(s);
} else {
ICB_P_F = Byte.MIN_VALUE;
}
}

protected final void initICB_P_I(String s) {
if (!s.trim().isEmpty()) {
ICB_P_I = Double.parseDouble(s);
} else {
ICB_P_I = Double.NaN;
}
}

protected final void initICB_P_O(String s) {
if (!s.trim().isEmpty()) {
ICB_P_O = Short.parseShort(s);
} else {
ICB_P_O = Short.MIN_VALUE;
}
}

protected final void initICB_P_T(String s) {
if (!s.trim().isEmpty()) {
ICB_P_T = Short.parseShort(s);
} else {
ICB_P_T = Short.MIN_VALUE;
}
}

protected final void initICB_R_F(String s) {
if (!s.trim().isEmpty()) {
ICB_R_F = Byte.parseByte(s);
} else {
ICB_R_F = Byte.MIN_VALUE;
}
}

protected final void initICB_R_I(String s) {
if (!s.trim().isEmpty()) {
ICB_R_I = Double.parseDouble(s);
} else {
ICB_R_I = Double.NaN;
}
}

protected final void initICB_R_O(String s) {
if (!s.trim().isEmpty()) {
ICB_R_O = Short.parseShort(s);
} else {
ICB_R_O = Short.MIN_VALUE;
}
}

protected final void initICB_R_T(String s) {
if (!s.trim().isEmpty()) {
ICB_R_T = Short.parseShort(s);
} else {
ICB_R_T = Short.MIN_VALUE;
}
}

protected final void initIDAHH(String s) {
if (!s.trim().isEmpty()) {
IDAHH = Short.parseShort(s);
} else {
IDAHH = Short.MIN_VALUE;
}
}

protected final void initIDAUNIQ(String s) {
if (!s.trim().isEmpty()) {
IDAUNIQ = Integer.parseInt(s);
} else {
IDAUNIQ = Integer.MIN_VALUE;
}
}

protected final void initIDAUNIQ_P(String s) {
if (!s.trim().isEmpty()) {
IDAUNIQ_P = Integer.parseInt(s);
} else {
IDAUNIQ_P = Integer.MIN_VALUE;
}
}

protected final void initIINTDATM(String s) {
if (!s.trim().isEmpty()) {
IINTDATM = Byte.parseByte(s);
} else {
IINTDATM = Byte.MIN_VALUE;
}
}

protected final void initIINTDATY(String s) {
if (!s.trim().isEmpty()) {
IINTDATY = Short.parseShort(s);
} else {
IINTDATY = Short.MIN_VALUE;
}
}

protected final void initINDAGER(String s) {
if (!s.trim().isEmpty()) {
INDAGER = Byte.parseByte(s);
} else {
INDAGER = Byte.MIN_VALUE;
}
}

protected final void initINDINJ_P_F(String s) {
if (!s.trim().isEmpty()) {
INDINJ_P_F = Byte.parseByte(s);
} else {
INDINJ_P_F = Byte.MIN_VALUE;
}
}

protected final void initINDINJ_P_I(String s) {
if (!s.trim().isEmpty()) {
INDINJ_P_I = Double.parseDouble(s);
} else {
INDINJ_P_I = Double.NaN;
}
}

protected final void initINDINJ_P_O(String s) {
if (!s.trim().isEmpty()) {
INDINJ_P_O = Short.parseShort(s);
} else {
INDINJ_P_O = Short.MIN_VALUE;
}
}

protected final void initINDINJ_P_T(String s) {
if (!s.trim().isEmpty()) {
INDINJ_P_T = Short.parseShort(s);
} else {
INDINJ_P_T = Short.MIN_VALUE;
}
}

protected final void initINDINJ_R_F(String s) {
if (!s.trim().isEmpty()) {
INDINJ_R_F = Byte.parseByte(s);
} else {
INDINJ_R_F = Byte.MIN_VALUE;
}
}

protected final void initINDINJ_R_I(String s) {
if (!s.trim().isEmpty()) {
INDINJ_R_I = Double.parseDouble(s);
} else {
INDINJ_R_I = Double.NaN;
}
}

protected final void initINDINJ_R_O(String s) {
if (!s.trim().isEmpty()) {
INDINJ_R_O = Short.parseShort(s);
} else {
INDINJ_R_O = Short.MIN_VALUE;
}
}

protected final void initINDINJ_R_T(String s) {
if (!s.trim().isEmpty()) {
INDINJ_R_T = Short.parseShort(s);
} else {
INDINJ_R_T = Short.MIN_VALUE;
}
}

protected final void initINDOBYR(String s) {
if (!s.trim().isEmpty()) {
INDOBYR = Short.parseShort(s);
} else {
INDOBYR = Short.MIN_VALUE;
}
}

protected final void initINDOBYR_P(String s) {
if (!s.trim().isEmpty()) {
INDOBYR_P = Short.parseShort(s);
} else {
INDOBYR_P = Short.MIN_VALUE;
}
}

protected final void initINDSEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
INDSEX = false;
}
}

protected final void initINHERGT0(String s) {
if (!s.trim().isEmpty()) {
INHERGT0 = Byte.parseByte(s);
} else {
INHERGT0 = Byte.MIN_VALUE;
}
}

protected final void initINHERGT0B(String s) {
if (!s.trim().isEmpty()) {
INHERGT0B = Byte.parseByte(s);
} else {
INHERGT0B = Byte.MIN_VALUE;
}
}

protected final void initINHERGT10(String s) {
if (!s.trim().isEmpty()) {
INHERGT10 = Byte.parseByte(s);
} else {
INHERGT10 = Byte.MIN_VALUE;
}
}

protected final void initINHERGT100(String s) {
if (!s.trim().isEmpty()) {
INHERGT100 = Byte.parseByte(s);
} else {
INHERGT100 = Byte.MIN_VALUE;
}
}

protected final void initINHERGT100B(String s) {
if (!s.trim().isEmpty()) {
INHERGT100B = Byte.parseByte(s);
} else {
INHERGT100B = Byte.MIN_VALUE;
}
}

protected final void initINHERGT10B(String s) {
if (!s.trim().isEmpty()) {
INHERGT10B = Byte.parseByte(s);
} else {
INHERGT10B = Byte.MIN_VALUE;
}
}

protected final void initINST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
INST = false;
}
}

protected final void initINST_P(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
INST_P = false;
}
}

protected final void initINTDATM(String s) {
if (!s.trim().isEmpty()) {
INTDATM = Byte.parseByte(s);
} else {
INTDATM = Byte.MIN_VALUE;
}
}

protected final void initINTDATY(String s) {
if (!s.trim().isEmpty()) {
INTDATY = Short.parseShort(s);
} else {
INTDATY = Short.MIN_VALUE;
}
}

protected final void initINVESTS_BU_F(String s) {
if (!s.trim().isEmpty()) {
INVESTS_BU_F = Byte.parseByte(s);
} else {
INVESTS_BU_F = Byte.MIN_VALUE;
}
}

protected final void initINVESTS_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
INVESTS_BU_NI2 = Short.parseShort(s);
} else {
INVESTS_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initINVESTS_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
INVESTS_BU_NI3 = Short.parseShort(s);
} else {
INVESTS_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initINVESTS_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
INVESTS_BU_NI4 = Short.parseShort(s);
} else {
INVESTS_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initINVESTS_BU_S(String s) {
if (!s.trim().isEmpty()) {
INVESTS_BU_S = Double.parseDouble(s);
} else {
INVESTS_BU_S = Double.NaN;
}
}

protected final void initINVESTS_BU_T(String s) {
if (!s.trim().isEmpty()) {
INVESTS_BU_T = Short.parseShort(s);
} else {
INVESTS_BU_T = Short.MIN_VALUE;
}
}

protected final void initISAI_BU_F(String s) {
if (!s.trim().isEmpty()) {
ISAI_BU_F = Byte.parseByte(s);
} else {
ISAI_BU_F = Byte.MIN_VALUE;
}
}

protected final void initISAI_BU_I(String s) {
if (!s.trim().isEmpty()) {
ISAI_BU_I = Double.parseDouble(s);
} else {
ISAI_BU_I = Double.NaN;
}
}

protected final void initISAI_BU_O(String s) {
if (!s.trim().isEmpty()) {
ISAI_BU_O = Short.parseShort(s);
} else {
ISAI_BU_O = Short.MIN_VALUE;
}
}

protected final void initISAI_BU_T(String s) {
if (!s.trim().isEmpty()) {
ISAI_BU_T = Short.parseShort(s);
} else {
ISAI_BU_T = Short.MIN_VALUE;
}
}

protected final void initIS_P_F(String s) {
if (!s.trim().isEmpty()) {
IS_P_F = Byte.parseByte(s);
} else {
IS_P_F = Byte.MIN_VALUE;
}
}

protected final void initIS_P_I(String s) {
if (!s.trim().isEmpty()) {
IS_P_I = Double.parseDouble(s);
} else {
IS_P_I = Double.NaN;
}
}

protected final void initIS_P_O(String s) {
if (!s.trim().isEmpty()) {
IS_P_O = Short.parseShort(s);
} else {
IS_P_O = Short.MIN_VALUE;
}
}

protected final void initIS_P_T(String s) {
if (!s.trim().isEmpty()) {
IS_P_T = Short.parseShort(s);
} else {
IS_P_T = Short.MIN_VALUE;
}
}

protected final void initIS_R_F(String s) {
if (!s.trim().isEmpty()) {
IS_R_F = Byte.parseByte(s);
} else {
IS_R_F = Byte.MIN_VALUE;
}
}

protected final void initIS_R_I(String s) {
if (!s.trim().isEmpty()) {
IS_R_I = Double.parseDouble(s);
} else {
IS_R_I = Double.NaN;
}
}

protected final void initIS_R_O(String s) {
if (!s.trim().isEmpty()) {
IS_R_O = Short.parseShort(s);
} else {
IS_R_O = Short.MIN_VALUE;
}
}

protected final void initIS_R_T(String s) {
if (!s.trim().isEmpty()) {
IS_R_T = Short.parseShort(s);
} else {
IS_R_T = Short.MIN_VALUE;
}
}

protected final void initJNTASS_BU_F(String s) {
if (!s.trim().isEmpty()) {
JNTASS_BU_F = Byte.parseByte(s);
} else {
JNTASS_BU_F = Byte.MIN_VALUE;
}
}

protected final void initJNTASS_BU_I(String s) {
if (!s.trim().isEmpty()) {
JNTASS_BU_I = Double.parseDouble(s);
} else {
JNTASS_BU_I = Double.NaN;
}
}

protected final void initJNTASS_BU_O(String s) {
if (!s.trim().isEmpty()) {
JNTASS_BU_O = Short.parseShort(s);
} else {
JNTASS_BU_O = Short.MIN_VALUE;
}
}

protected final void initJNTASS_BU_T(String s) {
if (!s.trim().isEmpty()) {
JNTASS_BU_T = Short.parseShort(s);
} else {
JNTASS_BU_T = Short.MIN_VALUE;
}
}

protected final void initJSA_P_F(String s) {
if (!s.trim().isEmpty()) {
JSA_P_F = Byte.parseByte(s);
} else {
JSA_P_F = Byte.MIN_VALUE;
}
}

protected final void initJSA_P_I(String s) {
if (!s.trim().isEmpty()) {
JSA_P_I = Double.parseDouble(s);
} else {
JSA_P_I = Double.NaN;
}
}

protected final void initJSA_P_O(String s) {
if (!s.trim().isEmpty()) {
JSA_P_O = Short.parseShort(s);
} else {
JSA_P_O = Short.MIN_VALUE;
}
}

protected final void initJSA_P_T(String s) {
if (!s.trim().isEmpty()) {
JSA_P_T = Short.parseShort(s);
} else {
JSA_P_T = Short.MIN_VALUE;
}
}

protected final void initJSA_R_F(String s) {
if (!s.trim().isEmpty()) {
JSA_R_F = Byte.parseByte(s);
} else {
JSA_R_F = Byte.MIN_VALUE;
}
}

protected final void initJSA_R_I(String s) {
if (!s.trim().isEmpty()) {
JSA_R_I = Double.parseDouble(s);
} else {
JSA_R_I = Double.NaN;
}
}

protected final void initJSA_R_O(String s) {
if (!s.trim().isEmpty()) {
JSA_R_O = Short.parseShort(s);
} else {
JSA_R_O = Short.MIN_VALUE;
}
}

protected final void initJSA_R_T(String s) {
if (!s.trim().isEmpty()) {
JSA_R_T = Short.parseShort(s);
} else {
JSA_R_T = Short.MIN_VALUE;
}
}

protected final void initLACKRES(String s) {
if (!s.trim().isEmpty()) {
LACKRES = Byte.parseByte(s);
} else {
LACKRES = Byte.MIN_VALUE;
}
}

protected final void initLACKRESB(String s) {
if (!s.trim().isEmpty()) {
LACKRESB = Byte.parseByte(s);
} else {
LACKRESB = Byte.MIN_VALUE;
}
}

protected final void initLEISUREL(String s) {
if (!s.trim().isEmpty()) {
LEISUREL = Double.parseDouble(s);
} else {
LEISUREL = Double.NaN;
}
}

protected final void initLEISURET(String s) {
if (!s.trim().isEmpty()) {
LEISURET = Byte.parseByte(s);
} else {
LEISURET = Byte.MIN_VALUE;
}
}

protected final void initLEISUREU(String s) {
if (!s.trim().isEmpty()) {
LEISUREU = Double.parseDouble(s);
} else {
LEISUREU = Double.NaN;
}
}

protected final void initLISAVE_BU_F(String s) {
if (!s.trim().isEmpty()) {
LISAVE_BU_F = Byte.parseByte(s);
} else {
LISAVE_BU_F = Byte.MIN_VALUE;
}
}

protected final void initLISAVE_BU_I(String s) {
if (!s.trim().isEmpty()) {
LISAVE_BU_I = Double.parseDouble(s);
} else {
LISAVE_BU_I = Double.NaN;
}
}

protected final void initLISAVE_BU_O(String s) {
if (!s.trim().isEmpty()) {
LISAVE_BU_O = Short.parseShort(s);
} else {
LISAVE_BU_O = Short.MIN_VALUE;
}
}

protected final void initLISAVE_BU_T(String s) {
if (!s.trim().isEmpty()) {
LISAVE_BU_T = Short.parseShort(s);
} else {
LISAVE_BU_T = Short.MIN_VALUE;
}
}

protected final void initLISA_BU_F(String s) {
if (!s.trim().isEmpty()) {
LISA_BU_F = Byte.parseByte(s);
} else {
LISA_BU_F = Byte.MIN_VALUE;
}
}

protected final void initLISA_BU_I(String s) {
if (!s.trim().isEmpty()) {
LISA_BU_I = Double.parseDouble(s);
} else {
LISA_BU_I = Double.NaN;
}
}

protected final void initLISA_BU_O(String s) {
if (!s.trim().isEmpty()) {
LISA_BU_O = Short.parseShort(s);
} else {
LISA_BU_O = Short.MIN_VALUE;
}
}

protected final void initLISA_BU_T(String s) {
if (!s.trim().isEmpty()) {
LISA_BU_T = Short.parseShort(s);
} else {
LISA_BU_T = Short.MIN_VALUE;
}
}

protected final void initLLSILL(String s) {
if (!s.trim().isEmpty()) {
LLSILL = Byte.parseByte(s);
} else {
LLSILL = Byte.MIN_VALUE;
}
}

protected final void initLWGT(String s) {
if (!s.trim().isEmpty()) {
LWGT = Double.parseDouble(s);
} else {
LWGT = Double.NaN;
}
}

protected final void initMAGEDIED(String s) {
if (!s.trim().isEmpty()) {
MAGEDIED = Byte.parseByte(s);
} else {
MAGEDIED = Byte.MIN_VALUE;
}
}

protected final void initMALIVE(String s) {
if (!s.trim().isEmpty()) {
MALIVE = Byte.parseByte(s);
} else {
MALIVE = Byte.MIN_VALUE;
}
}

protected final void initMARSTAT(String s) {
if (!s.trim().isEmpty()) {
MARSTAT = Byte.parseByte(s);
} else {
MARSTAT = Byte.MIN_VALUE;
}
}

protected final void initMAXEXECNN(String s) {
if (!s.trim().isEmpty()) {
MAXEXECNN = Byte.parseByte(s);
} else {
MAXEXECNN = Byte.MIN_VALUE;
}
}

protected final void initMAXMEMTOTB(String s) {
if (!s.trim().isEmpty()) {
MAXMEMTOTB = Byte.parseByte(s);
} else {
MAXMEMTOTB = Byte.MIN_VALUE;
}
}

protected final void initMAXNUMTYPE2(String s) {
if (!s.trim().isEmpty()) {
MAXNUMTYPE2 = Byte.parseByte(s);
} else {
MAXNUMTYPE2 = Byte.MIN_VALUE;
}
}

protected final void initMAXNUMTYPE4(String s) {
if (!s.trim().isEmpty()) {
MAXNUMTYPE4 = Byte.parseByte(s);
} else {
MAXNUMTYPE4 = Byte.MIN_VALUE;
}
}

protected final void initMAXNUMTYPE5(String s) {
if (!s.trim().isEmpty()) {
MAXNUMTYPE5 = Byte.parseByte(s);
} else {
MAXNUMTYPE5 = Byte.MIN_VALUE;
}
}

protected final void initMEMTOT(String s) {
if (!s.trim().isEmpty()) {
MEMTOT = Byte.parseByte(s);
} else {
MEMTOT = Byte.MIN_VALUE;
}
}

protected final void initMEMTOTB(String s) {
if (!s.trim().isEmpty()) {
MEMTOTB = Byte.parseByte(s);
} else {
MEMTOTB = Byte.MIN_VALUE;
}
}

protected final void initMGDEBT_BU_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
MGDEBT_BU_F = false;
}
}

protected final void initMGDEBT_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
MGDEBT_BU_NI2 = Short.parseShort(s);
} else {
MGDEBT_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initMGDEBT_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
MGDEBT_BU_NI3 = Short.parseShort(s);
} else {
MGDEBT_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initMGDEBT_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
MGDEBT_BU_NI4 = Short.parseShort(s);
} else {
MGDEBT_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initMGDEBT_BU_S(String s) {
if (!s.trim().isEmpty()) {
MGDEBT_BU_S = Double.parseDouble(s);
} else {
MGDEBT_BU_S = Double.NaN;
}
}

protected final void initMGDEBT_BU_T(String s) {
if (!s.trim().isEmpty()) {
MGDEBT_BU_T = Short.parseShort(s);
} else {
MGDEBT_BU_T = Short.MIN_VALUE;
}
}

protected final void initMMAID(String s) {
if (!s.trim().isEmpty()) {
MMAID = Byte.parseByte(s);
} else {
MMAID = Byte.MIN_VALUE;
}
}

protected final void initMMALONE(String s) {
if (!s.trim().isEmpty()) {
MMALONE = Byte.parseByte(s);
} else {
MMALONE = Byte.MIN_VALUE;
}
}

protected final void initMMAVSP(String s) {
if (!s.trim().isEmpty()) {
MMAVSP = Byte.parseByte(s);
} else {
MMAVSP = Byte.MIN_VALUE;
}
}

protected final void initMMHSS(String s) {
if (!s.trim().isEmpty()) {
MMHSS = Byte.parseByte(s);
} else {
MMHSS = Byte.MIN_VALUE;
}
}

protected final void initMMPAIN(String s) {
if (!s.trim().isEmpty()) {
MMPAIN = Byte.parseByte(s);
} else {
MMPAIN = Byte.MIN_VALUE;
}
}

protected final void initMMRECR(String s) {
if (!s.trim().isEmpty()) {
MMRECR = Byte.parseByte(s);
} else {
MMRECR = Byte.MIN_VALUE;
}
}

protected final void initMMSAF(String s) {
if (!s.trim().isEmpty()) {
MMSAF = Byte.parseByte(s);
} else {
MMSAF = Byte.MIN_VALUE;
}
}

protected final void initMMSCHS(String s) {
if (!s.trim().isEmpty()) {
MMSCHS = Byte.parseByte(s);
} else {
MMSCHS = Byte.MIN_VALUE;
}
}

protected final void initMMTRYA(String s) {
if (!s.trim().isEmpty()) {
MMTRYA = Byte.parseByte(s);
} else {
MMTRYA = Byte.MIN_VALUE;
}
}

protected final void initMMTRYB(String s) {
if (!s.trim().isEmpty()) {
MMTRYB = Byte.parseByte(s);
} else {
MMTRYB = Byte.MIN_VALUE;
}
}

protected final void initMMWALA(String s) {
if (!s.trim().isEmpty()) {
MMWALA = Byte.parseByte(s);
} else {
MMWALA = Byte.MIN_VALUE;
}
}

protected final void initMMWILL(String s) {
if (!s.trim().isEmpty()) {
MMWILL = Byte.parseByte(s);
} else {
MMWILL = Byte.MIN_VALUE;
}
}

protected final void initMMWLKA(String s) {
if (!s.trim().isEmpty()) {
MMWLKA = Double.parseDouble(s);
} else {
MMWLKA = Double.NaN;
}
}

protected final void initMMWLKB(String s) {
if (!s.trim().isEmpty()) {
MMWLKB = Double.parseDouble(s);
} else {
MMWLKB = Double.NaN;
}
}

protected final void initMORTINC85(String s) {
if (!s.trim().isEmpty()) {
MORTINC85 = Byte.parseByte(s);
} else {
MORTINC85 = Byte.MIN_VALUE;
}
}

protected final void initMORTINCBI(String s) {
if (!s.trim().isEmpty()) {
MORTINCBI = Byte.parseByte(s);
} else {
MORTINCBI = Byte.MIN_VALUE;
}
}

protected final void initMORTINCPI(String s) {
if (!s.trim().isEmpty()) {
MORTINCPI = Byte.parseByte(s);
} else {
MORTINCPI = Byte.MIN_VALUE;
}
}

protected final void initMORTINCPP(String s) {
if (!s.trim().isEmpty()) {
MORTINCPP = Byte.parseByte(s);
} else {
MORTINCPP = Byte.MIN_VALUE;
}
}

protected final void initMORTPAYL(String s) {
if (!s.trim().isEmpty()) {
MORTPAYL = Double.parseDouble(s);
} else {
MORTPAYL = Double.NaN;
}
}

protected final void initMORTPAYT(String s) {
if (!s.trim().isEmpty()) {
MORTPAYT = Byte.parseByte(s);
} else {
MORTPAYT = Byte.MIN_VALUE;
}
}

protected final void initMORTPAYU(String s) {
if (!s.trim().isEmpty()) {
MORTPAYU = Double.parseDouble(s);
} else {
MORTPAYU = Double.NaN;
}
}

protected final void initMORTPAYXL(String s) {
if (!s.trim().isEmpty()) {
MORTPAYXL = Double.parseDouble(s);
} else {
MORTPAYXL = Double.NaN;
}
}

protected final void initMORTPAYXT(String s) {
if (!s.trim().isEmpty()) {
MORTPAYXT = Byte.parseByte(s);
} else {
MORTPAYXT = Byte.MIN_VALUE;
}
}

protected final void initMORTPAYXU(String s) {
if (!s.trim().isEmpty()) {
MORTPAYXU = Double.parseDouble(s);
} else {
MORTPAYXU = Double.NaN;
}
}

protected final void initMOTHAGE(String s) {
if (!s.trim().isEmpty()) {
MOTHAGE = Byte.parseByte(s);
} else {
MOTHAGE = Byte.MIN_VALUE;
}
}

protected final void initNAMEONPROP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
NAMEONPROP = false;
}
}

protected final void initNDEPRIV(String s) {
if (!s.trim().isEmpty()) {
NDEPRIV = Byte.parseByte(s);
} else {
NDEPRIV = Byte.MIN_VALUE;
}
}

protected final void initNETFW_BU_F(String s) {
if (!s.trim().isEmpty()) {
NETFW_BU_F = Byte.parseByte(s);
} else {
NETFW_BU_F = Byte.MIN_VALUE;
}
}

protected final void initNETFW_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
NETFW_BU_NI2 = Short.parseShort(s);
} else {
NETFW_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initNETFW_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
NETFW_BU_NI3 = Short.parseShort(s);
} else {
NETFW_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initNETFW_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
NETFW_BU_NI4 = Short.parseShort(s);
} else {
NETFW_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initNETFW_BU_S(String s) {
if (!s.trim().isEmpty()) {
NETFW_BU_S = Double.parseDouble(s);
} else {
NETFW_BU_S = Double.NaN;
}
}

protected final void initNETFW_BU_T(String s) {
if (!s.trim().isEmpty()) {
NETFW_BU_T = Short.parseShort(s);
} else {
NETFW_BU_T = Short.MIN_VALUE;
}
}

protected final void initNETHW_BU_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
NETHW_BU_F = false;
}
}

protected final void initNETHW_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
NETHW_BU_NI2 = Short.parseShort(s);
} else {
NETHW_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initNETHW_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
NETHW_BU_NI3 = Short.parseShort(s);
} else {
NETHW_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initNETHW_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
NETHW_BU_NI4 = Short.parseShort(s);
} else {
NETHW_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initNETHW_BU_S(String s) {
if (!s.trim().isEmpty()) {
NETHW_BU_S = Double.parseDouble(s);
} else {
NETHW_BU_S = Double.NaN;
}
}

protected final void initNETHW_BU_T(String s) {
if (!s.trim().isEmpty()) {
NETHW_BU_T = Short.parseShort(s);
} else {
NETHW_BU_T = Short.MIN_VALUE;
}
}

protected final void initNETPROF_BU_F(String s) {
if (!s.trim().isEmpty()) {
NETPROF_BU_F = Byte.parseByte(s);
} else {
NETPROF_BU_F = Byte.MIN_VALUE;
}
}

protected final void initNETPROF_BU_I(String s) {
if (!s.trim().isEmpty()) {
NETPROF_BU_I = Double.parseDouble(s);
} else {
NETPROF_BU_I = Double.NaN;
}
}

protected final void initNETPROF_BU_O(String s) {
if (!s.trim().isEmpty()) {
NETPROF_BU_O = Short.parseShort(s);
} else {
NETPROF_BU_O = Short.MIN_VALUE;
}
}

protected final void initNETPROF_BU_T(String s) {
if (!s.trim().isEmpty()) {
NETPROF_BU_T = Short.parseShort(s);
} else {
NETPROF_BU_T = Short.MIN_VALUE;
}
}

protected final void initNETPROF_P_F(String s) {
if (!s.trim().isEmpty()) {
NETPROF_P_F = Byte.parseByte(s);
} else {
NETPROF_P_F = Byte.MIN_VALUE;
}
}

protected final void initNETPROF_P_I(String s) {
if (!s.trim().isEmpty()) {
NETPROF_P_I = Double.parseDouble(s);
} else {
NETPROF_P_I = Double.NaN;
}
}

protected final void initNETPROF_P_O(String s) {
if (!s.trim().isEmpty()) {
NETPROF_P_O = Short.parseShort(s);
} else {
NETPROF_P_O = Short.MIN_VALUE;
}
}

protected final void initNETPROF_P_T(String s) {
if (!s.trim().isEmpty()) {
NETPROF_P_T = Short.parseShort(s);
} else {
NETPROF_P_T = Short.MIN_VALUE;
}
}

protected final void initNETPROF_R_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
NETPROF_R_F = false;
}
}

protected final void initNETPROF_R_I(String s) {
if (!s.trim().isEmpty()) {
NETPROF_R_I = Double.parseDouble(s);
} else {
NETPROF_R_I = Double.NaN;
}
}

protected final void initNETPROF_R_O(String s) {
if (!s.trim().isEmpty()) {
NETPROF_R_O = Short.parseShort(s);
} else {
NETPROF_R_O = Short.MIN_VALUE;
}
}

protected final void initNETPROF_R_T(String s) {
if (!s.trim().isEmpty()) {
NETPROF_R_T = Short.parseShort(s);
} else {
NETPROF_R_T = Short.MIN_VALUE;
}
}

protected final void initNETPW_BU_F(String s) {
if (!s.trim().isEmpty()) {
NETPW_BU_F = Byte.parseByte(s);
} else {
NETPW_BU_F = Byte.MIN_VALUE;
}
}

protected final void initNETPW_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
NETPW_BU_NI2 = Short.parseShort(s);
} else {
NETPW_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initNETPW_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
NETPW_BU_NI3 = Short.parseShort(s);
} else {
NETPW_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initNETPW_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
NETPW_BU_NI4 = Short.parseShort(s);
} else {
NETPW_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initNETPW_BU_S(String s) {
if (!s.trim().isEmpty()) {
NETPW_BU_S = Double.parseDouble(s);
} else {
NETPW_BU_S = Double.NaN;
}
}

protected final void initNETPW_BU_T(String s) {
if (!s.trim().isEmpty()) {
NETPW_BU_T = Short.parseShort(s);
} else {
NETPW_BU_T = Short.MIN_VALUE;
}
}

protected final void initNETRENTL(String s) {
if (!s.trim().isEmpty()) {
NETRENTL = Double.parseDouble(s);
} else {
NETRENTL = Double.NaN;
}
}

protected final void initNETRENTT(String s) {
if (!s.trim().isEmpty()) {
NETRENTT = Byte.parseByte(s);
} else {
NETRENTT = Byte.MIN_VALUE;
}
}

protected final void initNETRENTU(String s) {
if (!s.trim().isEmpty()) {
NETRENTU = Double.parseDouble(s);
} else {
NETRENTU = Double.NaN;
}
}

protected final void initNETTOTNHW_BU_F(String s) {
if (!s.trim().isEmpty()) {
NETTOTNHW_BU_F = Byte.parseByte(s);
} else {
NETTOTNHW_BU_F = Byte.MIN_VALUE;
}
}

protected final void initNETTOTNHW_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
NETTOTNHW_BU_NI2 = Short.parseShort(s);
} else {
NETTOTNHW_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initNETTOTNHW_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
NETTOTNHW_BU_NI3 = Short.parseShort(s);
} else {
NETTOTNHW_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initNETTOTNHW_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
NETTOTNHW_BU_NI4 = Short.parseShort(s);
} else {
NETTOTNHW_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initNETTOTNHW_BU_S(String s) {
if (!s.trim().isEmpty()) {
NETTOTNHW_BU_S = Double.parseDouble(s);
} else {
NETTOTNHW_BU_S = Double.NaN;
}
}

protected final void initNETTOTNHW_BU_T(String s) {
if (!s.trim().isEmpty()) {
NETTOTNHW_BU_T = Short.parseShort(s);
} else {
NETTOTNHW_BU_T = Short.MIN_VALUE;
}
}

protected final void initNETTOTW_BU_F(String s) {
if (!s.trim().isEmpty()) {
NETTOTW_BU_F = Byte.parseByte(s);
} else {
NETTOTW_BU_F = Byte.MIN_VALUE;
}
}

protected final void initNETTOTW_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
NETTOTW_BU_NI2 = Short.parseShort(s);
} else {
NETTOTW_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initNETTOTW_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
NETTOTW_BU_NI3 = Short.parseShort(s);
} else {
NETTOTW_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initNETTOTW_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
NETTOTW_BU_NI4 = Short.parseShort(s);
} else {
NETTOTW_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initNETTOTW_BU_S(String s) {
if (!s.trim().isEmpty()) {
NETTOTW_BU_S = Double.parseDouble(s);
} else {
NETTOTW_BU_S = Double.NaN;
}
}

protected final void initNETTOTW_BU_T(String s) {
if (!s.trim().isEmpty()) {
NETTOTW_BU_T = Short.parseShort(s);
} else {
NETTOTW_BU_T = Short.MIN_VALUE;
}
}

protected final void initNFWQ10_BU_F(String s) {
if (!s.trim().isEmpty()) {
NFWQ10_BU_F = Byte.parseByte(s);
} else {
NFWQ10_BU_F = Byte.MIN_VALUE;
}
}

protected final void initNFWQ10_BU_S(String s) {
if (!s.trim().isEmpty()) {
NFWQ10_BU_S = Byte.parseByte(s);
} else {
NFWQ10_BU_S = Byte.MIN_VALUE;
}
}

protected final void initNFWQ5_BU_F(String s) {
if (!s.trim().isEmpty()) {
NFWQ5_BU_F = Byte.parseByte(s);
} else {
NFWQ5_BU_F = Byte.MIN_VALUE;
}
}

protected final void initNFWQ5_BU_S(String s) {
if (!s.trim().isEmpty()) {
NFWQ5_BU_S = Byte.parseByte(s);
} else {
NFWQ5_BU_S = Byte.MIN_VALUE;
}
}

protected final void initNGRANDCH(String s) {
if (!s.trim().isEmpty()) {
NGRANDCH = Byte.parseByte(s);
} else {
NGRANDCH = Byte.MIN_VALUE;
}
}

protected final void initNGRANDCHINHH(String s) {
if (!s.trim().isEmpty()) {
NGRANDCHINHH = Byte.parseByte(s);
} else {
NGRANDCHINHH = Byte.MIN_VALUE;
}
}

protected final void initNONWHITE(String s) {
if (!s.trim().isEmpty()) {
NONWHITE = Byte.parseByte(s);
} else {
NONWHITE = Byte.MIN_VALUE;
}
}

protected final void initNPEOPLE(String s) {
if (!s.trim().isEmpty()) {
NPEOPLE = Byte.parseByte(s);
} else {
NPEOPLE = Byte.MIN_VALUE;
}
}

protected final void initNRIGHT(String s) {
if (!s.trim().isEmpty()) {
NRIGHT = Byte.parseByte(s);
} else {
NRIGHT = Byte.MIN_VALUE;
}
}

protected final void initNROOMS(String s) {
if (!s.trim().isEmpty()) {
NROOMS = Byte.parseByte(s);
} else {
NROOMS = Byte.MIN_VALUE;
}
}

protected final void initNSAMPMEM(String s) {
if (!s.trim().isEmpty()) {
NSAMPMEM = Byte.parseByte(s);
} else {
NSAMPMEM = Byte.MIN_VALUE;
}
}

protected final void initNSAVI_BU_F(String s) {
if (!s.trim().isEmpty()) {
NSAVI_BU_F = Byte.parseByte(s);
} else {
NSAVI_BU_F = Byte.MIN_VALUE;
}
}

protected final void initNSAVI_BU_I(String s) {
if (!s.trim().isEmpty()) {
NSAVI_BU_I = Double.parseDouble(s);
} else {
NSAVI_BU_I = Double.NaN;
}
}

protected final void initNSAVI_BU_O(String s) {
if (!s.trim().isEmpty()) {
NSAVI_BU_O = Short.parseShort(s);
} else {
NSAVI_BU_O = Short.MIN_VALUE;
}
}

protected final void initNSAVI_BU_T(String s) {
if (!s.trim().isEmpty()) {
NSAVI_BU_T = Short.parseShort(s);
} else {
NSAVI_BU_T = Short.MIN_VALUE;
}
}

protected final void initNSAV_BU_F(String s) {
if (!s.trim().isEmpty()) {
NSAV_BU_F = Byte.parseByte(s);
} else {
NSAV_BU_F = Byte.MIN_VALUE;
}
}

protected final void initNSAV_BU_I(String s) {
if (!s.trim().isEmpty()) {
NSAV_BU_I = Double.parseDouble(s);
} else {
NSAV_BU_I = Double.NaN;
}
}

protected final void initNSAV_BU_O(String s) {
if (!s.trim().isEmpty()) {
NSAV_BU_O = Short.parseShort(s);
} else {
NSAV_BU_O = Short.MIN_VALUE;
}
}

protected final void initNSAV_BU_T(String s) {
if (!s.trim().isEmpty()) {
NSAV_BU_T = Short.parseShort(s);
} else {
NSAV_BU_T = Short.MIN_VALUE;
}
}

protected final void initNSIBS(String s) {
if (!s.trim().isEmpty()) {
NSIBS = Byte.parseByte(s);
} else {
NSIBS = Byte.MIN_VALUE;
}
}

protected final void initNUMANSIA(String s) {
if (!s.trim().isEmpty()) {
NUMANSIA = Byte.parseByte(s);
} else {
NUMANSIA = Byte.MIN_VALUE;
}
}

protected final void initNUMANSIAFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
NUMANSIAFU = false;
}
}

protected final void initNUMBUAD(String s) {
if (!s.trim().isEmpty()) {
NUMBUAD = Byte.parseByte(s);
} else {
NUMBUAD = Byte.MIN_VALUE;
}
}

protected final void initNUMBUK013(String s) {
if (!s.trim().isEmpty()) {
NUMBUK013 = Byte.parseByte(s);
} else {
NUMBUK013 = Byte.MIN_VALUE;
}
}

protected final void initNUMBUK1418(String s) {
if (!s.trim().isEmpty()) {
NUMBUK1418 = Byte.parseByte(s);
} else {
NUMBUK1418 = Byte.MIN_VALUE;
}
}

protected final void initNUMBUKID(String s) {
if (!s.trim().isEmpty()) {
NUMBUKID = Byte.parseByte(s);
} else {
NUMBUKID = Byte.MIN_VALUE;
}
}

protected final void initNUMBUS(String s) {
if (!s.trim().isEmpty()) {
NUMBUS = Byte.parseByte(s);
} else {
NUMBUS = Byte.MIN_VALUE;
}
}

protected final void initNUMFEMALE(String s) {
if (!s.trim().isEmpty()) {
NUMFEMALE = Byte.parseByte(s);
} else {
NUMFEMALE = Byte.MIN_VALUE;
}
}

protected final void initNUMFEMALEAD(String s) {
if (!s.trim().isEmpty()) {
NUMFEMALEAD = Byte.parseByte(s);
} else {
NUMFEMALEAD = Byte.MIN_VALUE;
}
}

protected final void initNUMHHAD(String s) {
if (!s.trim().isEmpty()) {
NUMHHAD = Byte.parseByte(s);
} else {
NUMHHAD = Byte.MIN_VALUE;
}
}

protected final void initNUMHHK013(String s) {
if (!s.trim().isEmpty()) {
NUMHHK013 = Byte.parseByte(s);
} else {
NUMHHK013 = Byte.MIN_VALUE;
}
}

protected final void initNUMHHK1418(String s) {
if (!s.trim().isEmpty()) {
NUMHHK1418 = Byte.parseByte(s);
} else {
NUMHHK1418 = Byte.MIN_VALUE;
}
}

protected final void initNUMHHKID(String s) {
if (!s.trim().isEmpty()) {
NUMHHKID = Byte.parseByte(s);
} else {
NUMHHKID = Byte.MIN_VALUE;
}
}

protected final void initNUMHHLDRSINHH(String s) {
if (!s.trim().isEmpty()) {
NUMHHLDRSINHH = Byte.parseByte(s);
} else {
NUMHHLDRSINHH = Byte.MIN_VALUE;
}
}

protected final void initNUMINELIG(String s) {
if (!s.trim().isEmpty()) {
NUMINELIG = Byte.parseByte(s);
} else {
NUMINELIG = Byte.MIN_VALUE;
}
}

protected final void initNUMMALE(String s) {
if (!s.trim().isEmpty()) {
NUMMALE = Byte.parseByte(s);
} else {
NUMMALE = Byte.MIN_VALUE;
}
}

protected final void initNUMMALEAD(String s) {
if (!s.trim().isEmpty()) {
NUMMALEAD = Byte.parseByte(s);
} else {
NUMMALEAD = Byte.MIN_VALUE;
}
}

protected final void initNUMTYPE2(String s) {
if (!s.trim().isEmpty()) {
NUMTYPE2 = Byte.parseByte(s);
} else {
NUMTYPE2 = Byte.MIN_VALUE;
}
}

protected final void initNUMTYPE4(String s) {
if (!s.trim().isEmpty()) {
NUMTYPE4 = Byte.parseByte(s);
} else {
NUMTYPE4 = Byte.MIN_VALUE;
}
}

protected final void initNUMTYPE5(String s) {
if (!s.trim().isEmpty()) {
NUMTYPE5 = Byte.parseByte(s);
} else {
NUMTYPE5 = Byte.MIN_VALUE;
}
}

protected final void initODEBT_BU_F(String s) {
if (!s.trim().isEmpty()) {
ODEBT_BU_F = Byte.parseByte(s);
} else {
ODEBT_BU_F = Byte.MIN_VALUE;
}
}

protected final void initODEBT_BU_I(String s) {
if (!s.trim().isEmpty()) {
ODEBT_BU_I = Integer.parseInt(s);
} else {
ODEBT_BU_I = Integer.MIN_VALUE;
}
}

protected final void initODEBT_BU_O(String s) {
if (!s.trim().isEmpty()) {
ODEBT_BU_O = Short.parseShort(s);
} else {
ODEBT_BU_O = Short.MIN_VALUE;
}
}

protected final void initODEBT_BU_T(String s) {
if (!s.trim().isEmpty()) {
ODEBT_BU_T = Short.parseShort(s);
} else {
ODEBT_BU_T = Short.MIN_VALUE;
}
}

protected final void initOILL(String s) {
if (!s.trim().isEmpty()) {
OILL = Double.parseDouble(s);
} else {
OILL = Double.NaN;
}
}

protected final void initOILT(String s) {
if (!s.trim().isEmpty()) {
OILT = Byte.parseByte(s);
} else {
OILT = Byte.MIN_VALUE;
}
}

protected final void initOILU(String s) {
if (!s.trim().isEmpty()) {
OILU = Double.parseDouble(s);
} else {
OILU = Double.NaN;
}
}

protected final void initOJ_BU_F(String s) {
if (!s.trim().isEmpty()) {
OJ_BU_F = Byte.parseByte(s);
} else {
OJ_BU_F = Byte.MIN_VALUE;
}
}

protected final void initOJ_BU_I(String s) {
if (!s.trim().isEmpty()) {
OJ_BU_I = Double.parseDouble(s);
} else {
OJ_BU_I = Double.NaN;
}
}

protected final void initOJ_BU_O(String s) {
if (!s.trim().isEmpty()) {
OJ_BU_O = Short.parseShort(s);
} else {
OJ_BU_O = Short.MIN_VALUE;
}
}

protected final void initOJ_BU_T(String s) {
if (!s.trim().isEmpty()) {
OJ_BU_T = Short.parseShort(s);
} else {
OJ_BU_T = Short.MIN_VALUE;
}
}

protected final void initOJ_P_F(String s) {
if (!s.trim().isEmpty()) {
OJ_P_F = Byte.parseByte(s);
} else {
OJ_P_F = Byte.MIN_VALUE;
}
}

protected final void initOJ_P_I(String s) {
if (!s.trim().isEmpty()) {
OJ_P_I = Double.parseDouble(s);
} else {
OJ_P_I = Double.NaN;
}
}

protected final void initOJ_P_O(String s) {
if (!s.trim().isEmpty()) {
OJ_P_O = Short.parseShort(s);
} else {
OJ_P_O = Short.MIN_VALUE;
}
}

protected final void initOJ_P_T(String s) {
if (!s.trim().isEmpty()) {
OJ_P_T = Short.parseShort(s);
} else {
OJ_P_T = Short.MIN_VALUE;
}
}

protected final void initOJ_R_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
OJ_R_F = false;
}
}

protected final void initOJ_R_I(String s) {
if (!s.trim().isEmpty()) {
OJ_R_I = Double.parseDouble(s);
} else {
OJ_R_I = Double.NaN;
}
}

protected final void initOJ_R_O(String s) {
if (!s.trim().isEmpty()) {
OJ_R_O = Short.parseShort(s);
} else {
OJ_R_O = Short.MIN_VALUE;
}
}

protected final void initOJ_R_T(String s) {
if (!s.trim().isEmpty()) {
OJ_R_T = Short.parseShort(s);
} else {
OJ_R_T = Short.MIN_VALUE;
}
}

protected final void initOTH1_P_F(String s) {
if (!s.trim().isEmpty()) {
OTH1_P_F = Byte.parseByte(s);
} else {
OTH1_P_F = Byte.MIN_VALUE;
}
}

protected final void initOTH1_P_I(String s) {
if (!s.trim().isEmpty()) {
OTH1_P_I = Double.parseDouble(s);
} else {
OTH1_P_I = Double.NaN;
}
}

protected final void initOTH1_P_O(String s) {
if (!s.trim().isEmpty()) {
OTH1_P_O = Short.parseShort(s);
} else {
OTH1_P_O = Short.MIN_VALUE;
}
}

protected final void initOTH1_P_T(String s) {
if (!s.trim().isEmpty()) {
OTH1_P_T = Short.parseShort(s);
} else {
OTH1_P_T = Short.MIN_VALUE;
}
}

protected final void initOTH1_R_F(String s) {
if (!s.trim().isEmpty()) {
OTH1_R_F = Byte.parseByte(s);
} else {
OTH1_R_F = Byte.MIN_VALUE;
}
}

protected final void initOTH1_R_I(String s) {
if (!s.trim().isEmpty()) {
OTH1_R_I = Double.parseDouble(s);
} else {
OTH1_R_I = Double.NaN;
}
}

protected final void initOTH1_R_O(String s) {
if (!s.trim().isEmpty()) {
OTH1_R_O = Short.parseShort(s);
} else {
OTH1_R_O = Short.MIN_VALUE;
}
}

protected final void initOTH1_R_T(String s) {
if (!s.trim().isEmpty()) {
OTH1_R_T = Short.parseShort(s);
} else {
OTH1_R_T = Short.MIN_VALUE;
}
}

protected final void initOTH2_P_F(String s) {
if (!s.trim().isEmpty()) {
OTH2_P_F = Byte.parseByte(s);
} else {
OTH2_P_F = Byte.MIN_VALUE;
}
}

protected final void initOTH2_P_I(String s) {
if (!s.trim().isEmpty()) {
OTH2_P_I = Double.parseDouble(s);
} else {
OTH2_P_I = Double.NaN;
}
}

protected final void initOTH2_P_O(String s) {
if (!s.trim().isEmpty()) {
OTH2_P_O = Short.parseShort(s);
} else {
OTH2_P_O = Short.MIN_VALUE;
}
}

protected final void initOTH2_P_T(String s) {
if (!s.trim().isEmpty()) {
OTH2_P_T = Short.parseShort(s);
} else {
OTH2_P_T = Short.MIN_VALUE;
}
}

protected final void initOTH2_R_F(String s) {
if (!s.trim().isEmpty()) {
OTH2_R_F = Byte.parseByte(s);
} else {
OTH2_R_F = Byte.MIN_VALUE;
}
}

protected final void initOTH2_R_I(String s) {
if (!s.trim().isEmpty()) {
OTH2_R_I = Double.parseDouble(s);
} else {
OTH2_R_I = Double.NaN;
}
}

protected final void initOTH2_R_O(String s) {
if (!s.trim().isEmpty()) {
OTH2_R_O = Short.parseShort(s);
} else {
OTH2_R_O = Short.MIN_VALUE;
}
}

protected final void initOTH2_R_T(String s) {
if (!s.trim().isEmpty()) {
OTH2_R_T = Short.parseShort(s);
} else {
OTH2_R_T = Short.MIN_VALUE;
}
}

protected final void initOTHBUSV_BU_F(String s) {
if (!s.trim().isEmpty()) {
OTHBUSV_BU_F = Byte.parseByte(s);
} else {
OTHBUSV_BU_F = Byte.MIN_VALUE;
}
}

protected final void initOTHBUSV_BU_I(String s) {
if (!s.trim().isEmpty()) {
OTHBUSV_BU_I = Double.parseDouble(s);
} else {
OTHBUSV_BU_I = Double.NaN;
}
}

protected final void initOTHBUSV_BU_O(String s) {
if (!s.trim().isEmpty()) {
OTHBUSV_BU_O = Short.parseShort(s);
} else {
OTHBUSV_BU_O = Short.MIN_VALUE;
}
}

protected final void initOTHBUSV_BU_T(String s) {
if (!s.trim().isEmpty()) {
OTHBUSV_BU_T = Short.parseShort(s);
} else {
OTHBUSV_BU_T = Short.MIN_VALUE;
}
}

protected final void initOTHBUSV_P_F(String s) {
if (!s.trim().isEmpty()) {
OTHBUSV_P_F = Byte.parseByte(s);
} else {
OTHBUSV_P_F = Byte.MIN_VALUE;
}
}

protected final void initOTHBUSV_P_I(String s) {
if (!s.trim().isEmpty()) {
OTHBUSV_P_I = Double.parseDouble(s);
} else {
OTHBUSV_P_I = Double.NaN;
}
}

protected final void initOTHBUSV_P_O(String s) {
if (!s.trim().isEmpty()) {
OTHBUSV_P_O = Short.parseShort(s);
} else {
OTHBUSV_P_O = Short.MIN_VALUE;
}
}

protected final void initOTHBUSV_P_T(String s) {
if (!s.trim().isEmpty()) {
OTHBUSV_P_T = Short.parseShort(s);
} else {
OTHBUSV_P_T = Short.MIN_VALUE;
}
}

protected final void initOTHBUSV_R_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
OTHBUSV_R_F = false;
}
}

protected final void initOTHBUSV_R_I(String s) {
if (!s.trim().isEmpty()) {
OTHBUSV_R_I = Double.parseDouble(s);
} else {
OTHBUSV_R_I = Double.NaN;
}
}

protected final void initOTHBUSV_R_O(String s) {
if (!s.trim().isEmpty()) {
OTHBUSV_R_O = Short.parseShort(s);
} else {
OTHBUSV_R_O = Short.MIN_VALUE;
}
}

protected final void initOTHBUSV_R_T(String s) {
if (!s.trim().isEmpty()) {
OTHBUSV_R_T = Short.parseShort(s);
} else {
OTHBUSV_R_T = Short.MIN_VALUE;
}
}

protected final void initOTHERFL(String s) {
if (!s.trim().isEmpty()) {
OTHERFL = Double.parseDouble(s);
} else {
OTHERFL = Double.NaN;
}
}

protected final void initOTHERFT(String s) {
if (!s.trim().isEmpty()) {
OTHERFT = Byte.parseByte(s);
} else {
OTHERFT = Byte.MIN_VALUE;
}
}

protected final void initOTHERFU(String s) {
if (!s.trim().isEmpty()) {
OTHERFU = Double.parseDouble(s);
} else {
OTHERFU = Double.NaN;
}
}

protected final void initOTHINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
OTHINC_BU_F = Byte.parseByte(s);
} else {
OTHINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initOTHINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
OTHINC_BU_NI2 = Short.parseShort(s);
} else {
OTHINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initOTHINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
OTHINC_BU_NI3 = Short.parseShort(s);
} else {
OTHINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initOTHINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
OTHINC_BU_NI4 = Short.parseShort(s);
} else {
OTHINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initOTHINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
OTHINC_BU_S = Double.parseDouble(s);
} else {
OTHINC_BU_S = Double.NaN;
}
}

protected final void initOTHINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
OTHINC_BU_T = Short.parseShort(s);
} else {
OTHINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initOTHINC_P_F(String s) {
if (!s.trim().isEmpty()) {
OTHINC_P_F = Byte.parseByte(s);
} else {
OTHINC_P_F = Byte.MIN_VALUE;
}
}

protected final void initOTHINC_P_NI2(String s) {
if (!s.trim().isEmpty()) {
OTHINC_P_NI2 = Short.parseShort(s);
} else {
OTHINC_P_NI2 = Short.MIN_VALUE;
}
}

protected final void initOTHINC_P_NI3(String s) {
if (!s.trim().isEmpty()) {
OTHINC_P_NI3 = Short.parseShort(s);
} else {
OTHINC_P_NI3 = Short.MIN_VALUE;
}
}

protected final void initOTHINC_P_NI4(String s) {
if (!s.trim().isEmpty()) {
OTHINC_P_NI4 = Short.parseShort(s);
} else {
OTHINC_P_NI4 = Short.MIN_VALUE;
}
}

protected final void initOTHINC_P_S(String s) {
if (!s.trim().isEmpty()) {
OTHINC_P_S = Double.parseDouble(s);
} else {
OTHINC_P_S = Double.NaN;
}
}

protected final void initOTHINC_P_T(String s) {
if (!s.trim().isEmpty()) {
OTHINC_P_T = Short.parseShort(s);
} else {
OTHINC_P_T = Short.MIN_VALUE;
}
}

protected final void initOTHINC_R_F(String s) {
if (!s.trim().isEmpty()) {
OTHINC_R_F = Byte.parseByte(s);
} else {
OTHINC_R_F = Byte.MIN_VALUE;
}
}

protected final void initOTHINC_R_NI2(String s) {
if (!s.trim().isEmpty()) {
OTHINC_R_NI2 = Short.parseShort(s);
} else {
OTHINC_R_NI2 = Short.MIN_VALUE;
}
}

protected final void initOTHINC_R_NI3(String s) {
if (!s.trim().isEmpty()) {
OTHINC_R_NI3 = Short.parseShort(s);
} else {
OTHINC_R_NI3 = Short.MIN_VALUE;
}
}

protected final void initOTHINC_R_NI4(String s) {
if (!s.trim().isEmpty()) {
OTHINC_R_NI4 = Short.parseShort(s);
} else {
OTHINC_R_NI4 = Short.MIN_VALUE;
}
}

protected final void initOTHINC_R_S(String s) {
if (!s.trim().isEmpty()) {
OTHINC_R_S = Double.parseDouble(s);
} else {
OTHINC_R_S = Double.NaN;
}
}

protected final void initOTHINC_R_T(String s) {
if (!s.trim().isEmpty()) {
OTHINC_R_T = Short.parseShort(s);
} else {
OTHINC_R_T = Short.MIN_VALUE;
}
}

protected final void initOTHPAY_P_F(String s) {
if (!s.trim().isEmpty()) {
OTHPAY_P_F = Byte.parseByte(s);
} else {
OTHPAY_P_F = Byte.MIN_VALUE;
}
}

protected final void initOTHPAY_P_I(String s) {
if (!s.trim().isEmpty()) {
OTHPAY_P_I = Double.parseDouble(s);
} else {
OTHPAY_P_I = Double.NaN;
}
}

protected final void initOTHPAY_P_O(String s) {
if (!s.trim().isEmpty()) {
OTHPAY_P_O = Short.parseShort(s);
} else {
OTHPAY_P_O = Short.MIN_VALUE;
}
}

protected final void initOTHPAY_P_T(String s) {
if (!s.trim().isEmpty()) {
OTHPAY_P_T = Short.parseShort(s);
} else {
OTHPAY_P_T = Short.MIN_VALUE;
}
}

protected final void initOTHPAY_R_F(String s) {
if (!s.trim().isEmpty()) {
OTHPAY_R_F = Byte.parseByte(s);
} else {
OTHPAY_R_F = Byte.MIN_VALUE;
}
}

protected final void initOTHPAY_R_I(String s) {
if (!s.trim().isEmpty()) {
OTHPAY_R_I = Double.parseDouble(s);
} else {
OTHPAY_R_I = Double.NaN;
}
}

protected final void initOTHPAY_R_O(String s) {
if (!s.trim().isEmpty()) {
OTHPAY_R_O = Short.parseShort(s);
} else {
OTHPAY_R_O = Short.MIN_VALUE;
}
}

protected final void initOTHPAY_R_T(String s) {
if (!s.trim().isEmpty()) {
OTHPAY_R_T = Short.parseShort(s);
} else {
OTHPAY_R_T = Short.MIN_VALUE;
}
}

protected final void initOTHSAVI_BU_F(String s) {
if (!s.trim().isEmpty()) {
OTHSAVI_BU_F = Byte.parseByte(s);
} else {
OTHSAVI_BU_F = Byte.MIN_VALUE;
}
}

protected final void initOTHSAVI_BU_I(String s) {
if (!s.trim().isEmpty()) {
OTHSAVI_BU_I = Double.parseDouble(s);
} else {
OTHSAVI_BU_I = Double.NaN;
}
}

protected final void initOTHSAVI_BU_O(String s) {
if (!s.trim().isEmpty()) {
OTHSAVI_BU_O = Short.parseShort(s);
} else {
OTHSAVI_BU_O = Short.MIN_VALUE;
}
}

protected final void initOTHSAVI_BU_T(String s) {
if (!s.trim().isEmpty()) {
OTHSAVI_BU_T = Short.parseShort(s);
} else {
OTHSAVI_BU_T = Short.MIN_VALUE;
}
}

protected final void initOTHSAV_BU_F(String s) {
if (!s.trim().isEmpty()) {
OTHSAV_BU_F = Byte.parseByte(s);
} else {
OTHSAV_BU_F = Byte.MIN_VALUE;
}
}

protected final void initOTHSAV_BU_I(String s) {
if (!s.trim().isEmpty()) {
OTHSAV_BU_I = Double.parseDouble(s);
} else {
OTHSAV_BU_I = Double.NaN;
}
}

protected final void initOTHSAV_BU_O(String s) {
if (!s.trim().isEmpty()) {
OTHSAV_BU_O = Short.parseShort(s);
} else {
OTHSAV_BU_O = Short.MIN_VALUE;
}
}

protected final void initOTHSAV_BU_T(String s) {
if (!s.trim().isEmpty()) {
OTHSAV_BU_T = Short.parseShort(s);
} else {
OTHSAV_BU_T = Short.MIN_VALUE;
}
}

protected final void initPARAL(String s) {
if (!s.trim().isEmpty()) {
PARAL = Double.parseDouble(s);
} else {
PARAL = Double.NaN;
}
}

protected final void initPARAT(String s) {
if (!s.trim().isEmpty()) {
PARAT = Byte.parseByte(s);
} else {
PARAT = Byte.MIN_VALUE;
}
}

protected final void initPARAU(String s) {
if (!s.trim().isEmpty()) {
PARAU = Double.parseDouble(s);
} else {
PARAU = Double.NaN;
}
}

protected final void initPENID(String s) {
if (!s.trim().isEmpty()) {
PENID = Double.parseDouble(s);
} else {
PENID = Double.NaN;
}
}

protected final void initPEPI_BU_F(String s) {
if (!s.trim().isEmpty()) {
PEPI_BU_F = Byte.parseByte(s);
} else {
PEPI_BU_F = Byte.MIN_VALUE;
}
}

protected final void initPEPI_BU_I(String s) {
if (!s.trim().isEmpty()) {
PEPI_BU_I = Double.parseDouble(s);
} else {
PEPI_BU_I = Double.NaN;
}
}

protected final void initPEPI_BU_O(String s) {
if (!s.trim().isEmpty()) {
PEPI_BU_O = Short.parseShort(s);
} else {
PEPI_BU_O = Short.MIN_VALUE;
}
}

protected final void initPEPI_BU_T(String s) {
if (!s.trim().isEmpty()) {
PEPI_BU_T = Short.parseShort(s);
} else {
PEPI_BU_T = Short.MIN_VALUE;
}
}

protected final void initPEP_BU_F(String s) {
if (!s.trim().isEmpty()) {
PEP_BU_F = Byte.parseByte(s);
} else {
PEP_BU_F = Byte.MIN_VALUE;
}
}

protected final void initPEP_BU_I(String s) {
if (!s.trim().isEmpty()) {
PEP_BU_I = Double.parseDouble(s);
} else {
PEP_BU_I = Double.NaN;
}
}

protected final void initPEP_BU_O(String s) {
if (!s.trim().isEmpty()) {
PEP_BU_O = Short.parseShort(s);
} else {
PEP_BU_O = Short.MIN_VALUE;
}
}

protected final void initPEP_BU_T(String s) {
if (!s.trim().isEmpty()) {
PEP_BU_T = Short.parseShort(s);
} else {
PEP_BU_T = Short.MIN_VALUE;
}
}

protected final void initPERID(String s) {
if (!s.trim().isEmpty()) {
PERID = Byte.parseByte(s);
} else {
PERID = Byte.MIN_VALUE;
}
}

protected final void initPERSNO(String s) {
if (!s.trim().isEmpty()) {
PERSNO = Byte.parseByte(s);
} else {
PERSNO = Byte.MIN_VALUE;
}
}

protected final void initPPEN_BU_F(String s) {
if (!s.trim().isEmpty()) {
PPEN_BU_F = Byte.parseByte(s);
} else {
PPEN_BU_F = Byte.MIN_VALUE;
}
}

protected final void initPPEN_BU_I(String s) {
if (!s.trim().isEmpty()) {
PPEN_BU_I = Double.parseDouble(s);
} else {
PPEN_BU_I = Double.NaN;
}
}

protected final void initPPEN_BU_O(String s) {
if (!s.trim().isEmpty()) {
PPEN_BU_O = Short.parseShort(s);
} else {
PPEN_BU_O = Short.MIN_VALUE;
}
}

protected final void initPPEN_BU_T(String s) {
if (!s.trim().isEmpty()) {
PPEN_BU_T = Short.parseShort(s);
} else {
PPEN_BU_T = Short.MIN_VALUE;
}
}

protected final void initPPINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
PPINC_BU_F = Byte.parseByte(s);
} else {
PPINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initPPINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
PPINC_BU_NI2 = Short.parseShort(s);
} else {
PPINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initPPINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
PPINC_BU_NI3 = Short.parseShort(s);
} else {
PPINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initPPINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
PPINC_BU_NI4 = Short.parseShort(s);
} else {
PPINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initPPINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
PPINC_BU_S = Double.parseDouble(s);
} else {
PPINC_BU_S = Double.NaN;
}
}

protected final void initPPINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
PPINC_BU_T = Short.parseShort(s);
} else {
PPINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initPPINC_P_F(String s) {
if (!s.trim().isEmpty()) {
PPINC_P_F = Byte.parseByte(s);
} else {
PPINC_P_F = Byte.MIN_VALUE;
}
}

protected final void initPPINC_P_NI2(String s) {
if (!s.trim().isEmpty()) {
PPINC_P_NI2 = Short.parseShort(s);
} else {
PPINC_P_NI2 = Short.MIN_VALUE;
}
}

protected final void initPPINC_P_NI3(String s) {
if (!s.trim().isEmpty()) {
PPINC_P_NI3 = Short.parseShort(s);
} else {
PPINC_P_NI3 = Short.MIN_VALUE;
}
}

protected final void initPPINC_P_NI4(String s) {
if (!s.trim().isEmpty()) {
PPINC_P_NI4 = Short.parseShort(s);
} else {
PPINC_P_NI4 = Short.MIN_VALUE;
}
}

protected final void initPPINC_P_S(String s) {
if (!s.trim().isEmpty()) {
PPINC_P_S = Double.parseDouble(s);
} else {
PPINC_P_S = Double.NaN;
}
}

protected final void initPPINC_P_T(String s) {
if (!s.trim().isEmpty()) {
PPINC_P_T = Short.parseShort(s);
} else {
PPINC_P_T = Short.MIN_VALUE;
}
}

protected final void initPPINC_R_F(String s) {
if (!s.trim().isEmpty()) {
PPINC_R_F = Byte.parseByte(s);
} else {
PPINC_R_F = Byte.MIN_VALUE;
}
}

protected final void initPPINC_R_NI2(String s) {
if (!s.trim().isEmpty()) {
PPINC_R_NI2 = Short.parseShort(s);
} else {
PPINC_R_NI2 = Short.MIN_VALUE;
}
}

protected final void initPPINC_R_NI3(String s) {
if (!s.trim().isEmpty()) {
PPINC_R_NI3 = Short.parseShort(s);
} else {
PPINC_R_NI3 = Short.MIN_VALUE;
}
}

protected final void initPPINC_R_NI4(String s) {
if (!s.trim().isEmpty()) {
PPINC_R_NI4 = Short.parseShort(s);
} else {
PPINC_R_NI4 = Short.MIN_VALUE;
}
}

protected final void initPPINC_R_S(String s) {
if (!s.trim().isEmpty()) {
PPINC_R_S = Double.parseDouble(s);
} else {
PPINC_R_S = Double.NaN;
}
}

protected final void initPPINC_R_T(String s) {
if (!s.trim().isEmpty()) {
PPINC_R_T = Short.parseShort(s);
} else {
PPINC_R_T = Short.MIN_VALUE;
}
}

protected final void initPP_CONT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PP_CONT = false;
}
}

protected final void initPP_MAXYRS(String s) {
if (!s.trim().isEmpty()) {
PP_MAXYRS = Byte.parseByte(s);
} else {
PP_MAXYRS = Byte.MIN_VALUE;
}
}

protected final void initPP_MEM(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PP_MEM = false;
}
}

protected final void initPP_NCONT(String s) {
if (!s.trim().isEmpty()) {
PP_NCONT = Byte.parseByte(s);
} else {
PP_NCONT = Byte.MIN_VALUE;
}
}

protected final void initPP_NK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PP_NK = false;
}
}

protected final void initPP_NNK(String s) {
if (!s.trim().isEmpty()) {
PP_NNK = Byte.parseByte(s);
} else {
PP_NNK = Byte.MIN_VALUE;
}
}

protected final void initPP_NOCC(String s) {
if (!s.trim().isEmpty()) {
PP_NOCC = Byte.parseByte(s);
} else {
PP_NOCC = Byte.MIN_VALUE;
}
}

protected final void initPP_NOCCDB(String s) {
if (!s.trim().isEmpty()) {
PP_NOCCDB = Byte.parseByte(s);
} else {
PP_NOCCDB = Byte.MIN_VALUE;
}
}

protected final void initPP_NOCCDC(String s) {
if (!s.trim().isEmpty()) {
PP_NOCCDC = Byte.parseByte(s);
} else {
PP_NOCCDC = Byte.MIN_VALUE;
}
}

protected final void initPP_NOCCNK(String s) {
if (!s.trim().isEmpty()) {
PP_NOCCNK = Byte.parseByte(s);
} else {
PP_NOCCNK = Byte.MIN_VALUE;
}
}

protected final void initPP_NPER(String s) {
if (!s.trim().isEmpty()) {
PP_NPER = Byte.parseByte(s);
} else {
PP_NPER = Byte.MIN_VALUE;
}
}

protected final void initPP_NREC(String s) {
if (!s.trim().isEmpty()) {
PP_NREC = Byte.parseByte(s);
} else {
PP_NREC = Byte.MIN_VALUE;
}
}

protected final void initPP_NRR(String s) {
if (!s.trim().isEmpty()) {
PP_NRR = Byte.parseByte(s);
} else {
PP_NRR = Byte.MIN_VALUE;
}
}

protected final void initPP_OCC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PP_OCC = false;
}
}

protected final void initPP_OCCDB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PP_OCCDB = false;
}
}

protected final void initPP_OCCDC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PP_OCCDC = false;
}
}

protected final void initPP_OCCNK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PP_OCCNK = false;
}
}

protected final void initPP_PER(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PP_PER = false;
}
}

protected final void initPP_REC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PP_REC = false;
}
}

protected final void initPP_RR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PP_RR = false;
}
}

protected final void initPRBONDSI_BU_F(String s) {
if (!s.trim().isEmpty()) {
PRBONDSI_BU_F = Byte.parseByte(s);
} else {
PRBONDSI_BU_F = Byte.MIN_VALUE;
}
}

protected final void initPRBONDSI_BU_I(String s) {
if (!s.trim().isEmpty()) {
PRBONDSI_BU_I = Double.parseDouble(s);
} else {
PRBONDSI_BU_I = Double.NaN;
}
}

protected final void initPRBONDSI_BU_O(String s) {
if (!s.trim().isEmpty()) {
PRBONDSI_BU_O = Short.parseShort(s);
} else {
PRBONDSI_BU_O = Short.MIN_VALUE;
}
}

protected final void initPRBONDSI_BU_T(String s) {
if (!s.trim().isEmpty()) {
PRBONDSI_BU_T = Short.parseShort(s);
} else {
PRBONDSI_BU_T = Short.MIN_VALUE;
}
}

protected final void initPRBONDS_BU_F(String s) {
if (!s.trim().isEmpty()) {
PRBONDS_BU_F = Byte.parseByte(s);
} else {
PRBONDS_BU_F = Byte.MIN_VALUE;
}
}

protected final void initPRBONDS_BU_I(String s) {
if (!s.trim().isEmpty()) {
PRBONDS_BU_I = Integer.parseInt(s);
} else {
PRBONDS_BU_I = Integer.MIN_VALUE;
}
}

protected final void initPRBONDS_BU_O(String s) {
if (!s.trim().isEmpty()) {
PRBONDS_BU_O = Short.parseShort(s);
} else {
PRBONDS_BU_O = Short.MIN_VALUE;
}
}

protected final void initPRBONDS_BU_T(String s) {
if (!s.trim().isEmpty()) {
PRBONDS_BU_T = Short.parseShort(s);
} else {
PRBONDS_BU_T = Short.MIN_VALUE;
}
}

protected final void initPRDEBT_BU_F(String s) {
if (!s.trim().isEmpty()) {
PRDEBT_BU_F = Byte.parseByte(s);
} else {
PRDEBT_BU_F = Byte.MIN_VALUE;
}
}

protected final void initPRDEBT_BU_I(String s) {
if (!s.trim().isEmpty()) {
PRDEBT_BU_I = Integer.parseInt(s);
} else {
PRDEBT_BU_I = Integer.MIN_VALUE;
}
}

protected final void initPRDEBT_BU_O(String s) {
if (!s.trim().isEmpty()) {
PRDEBT_BU_O = Short.parseShort(s);
} else {
PRDEBT_BU_O = Short.MIN_VALUE;
}
}

protected final void initPRDEBT_BU_T(String s) {
if (!s.trim().isEmpty()) {
PRDEBT_BU_T = Short.parseShort(s);
} else {
PRDEBT_BU_T = Short.MIN_VALUE;
}
}

protected final void initPROXY(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
PROXY = false;
}
}

protected final void initPSCEDA(String s) {
if (!s.trim().isEmpty()) {
PSCEDA = Byte.parseByte(s);
} else {
PSCEDA = Byte.MIN_VALUE;
}
}

protected final void initPSCEDB(String s) {
if (!s.trim().isEmpty()) {
PSCEDB = Byte.parseByte(s);
} else {
PSCEDB = Byte.MIN_VALUE;
}
}

protected final void initPSCEDC(String s) {
if (!s.trim().isEmpty()) {
PSCEDC = Byte.parseByte(s);
} else {
PSCEDC = Byte.MIN_VALUE;
}
}

protected final void initPSCEDD(String s) {
if (!s.trim().isEmpty()) {
PSCEDD = Byte.parseByte(s);
} else {
PSCEDD = Byte.MIN_VALUE;
}
}

protected final void initPSCEDE(String s) {
if (!s.trim().isEmpty()) {
PSCEDE = Byte.parseByte(s);
} else {
PSCEDE = Byte.MIN_VALUE;
}
}

protected final void initPSCEDF(String s) {
if (!s.trim().isEmpty()) {
PSCEDF = Byte.parseByte(s);
} else {
PSCEDF = Byte.MIN_VALUE;
}
}

protected final void initPSCEDG(String s) {
if (!s.trim().isEmpty()) {
PSCEDG = Byte.parseByte(s);
} else {
PSCEDG = Byte.MIN_VALUE;
}
}

protected final void initPSCEDH(String s) {
if (!s.trim().isEmpty()) {
PSCEDH = Byte.parseByte(s);
} else {
PSCEDH = Byte.MIN_VALUE;
}
}

protected final void initQUAL2(String s) {
if (!s.trim().isEmpty()) {
QUAL2 = Byte.parseByte(s);
} else {
QUAL2 = Byte.MIN_VALUE;
}
}

protected final void initQUAL2_P(String s) {
if (!s.trim().isEmpty()) {
QUAL2_P = Byte.parseByte(s);
} else {
QUAL2_P = Byte.MIN_VALUE;
}
}

protected final void initQUAL3(String s) {
if (!s.trim().isEmpty()) {
QUAL3 = Byte.parseByte(s);
} else {
QUAL3 = Byte.MIN_VALUE;
}
}

protected final void initQUAL3_P(String s) {
if (!s.trim().isEmpty()) {
QUAL3_P = Byte.parseByte(s);
} else {
QUAL3_P = Byte.MIN_VALUE;
}
}

protected final void initREFRESHTYPE(String s) {
if (!s.trim().isEmpty()) {
REFRESHTYPE = Byte.parseByte(s);
} else {
REFRESHTYPE = Byte.MIN_VALUE;
}
}

protected final void initRELTOHOH(String s) {
if (!s.trim().isEmpty()) {
RELTOHOH = Byte.parseByte(s);
} else {
RELTOHOH = Byte.MIN_VALUE;
}
}

protected final void initRENTINC85(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
RENTINC85 = false;
}
}

protected final void initRENTINCCL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
RENTINCCL = false;
}
}

protected final void initRENTINCCO(String s) {
if (!s.trim().isEmpty()) {
RENTINCCO = Byte.parseByte(s);
} else {
RENTINCCO = Byte.MIN_VALUE;
}
}

protected final void initRENTINCGA(String s) {
if (!s.trim().isEmpty()) {
RENTINCGA = Byte.parseByte(s);
} else {
RENTINCGA = Byte.MIN_VALUE;
}
}

protected final void initRENTINCGD(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
RENTINCGD = false;
}
}

protected final void initRENTINCHE(String s) {
if (!s.trim().isEmpty()) {
RENTINCHE = Byte.parseByte(s);
} else {
RENTINCHE = Byte.MIN_VALUE;
}
}

protected final void initRENTINCLA(String s) {
if (!s.trim().isEmpty()) {
RENTINCLA = Byte.parseByte(s);
} else {
RENTINCLA = Byte.MIN_VALUE;
}
}

protected final void initRENTINCME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
RENTINCME = false;
}
}

protected final void initRENTINCSE(String s) {
if (!s.trim().isEmpty()) {
RENTINCSE = Byte.parseByte(s);
} else {
RENTINCSE = Byte.MIN_VALUE;
}
}

protected final void initRENTINCSG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
RENTINCSG = false;
}
}

protected final void initRENTINCWA(String s) {
if (!s.trim().isEmpty()) {
RENTINCWA = Byte.parseByte(s);
} else {
RENTINCWA = Byte.MIN_VALUE;
}
}

protected final void initRENTINCWP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
RENTINCWP = false;
}
}

protected final void initRESPONDED_P(String s) {
if (!s.trim().isEmpty()) {
RESPONDED_P = Byte.parseByte(s);
} else {
RESPONDED_P = Byte.MIN_VALUE;
}
}

protected final void initRPI(String s) {
if (!s.trim().isEmpty()) {
RPI = Double.parseDouble(s);
} else {
RPI = Double.NaN;
}
}

protected final void initSAVEI_BU_F(String s) {
if (!s.trim().isEmpty()) {
SAVEI_BU_F = Byte.parseByte(s);
} else {
SAVEI_BU_F = Byte.MIN_VALUE;
}
}

protected final void initSAVEI_BU_I(String s) {
if (!s.trim().isEmpty()) {
SAVEI_BU_I = Double.parseDouble(s);
} else {
SAVEI_BU_I = Double.NaN;
}
}

protected final void initSAVEI_BU_O(String s) {
if (!s.trim().isEmpty()) {
SAVEI_BU_O = Short.parseShort(s);
} else {
SAVEI_BU_O = Short.MIN_VALUE;
}
}

protected final void initSAVEI_BU_T(String s) {
if (!s.trim().isEmpty()) {
SAVEI_BU_T = Short.parseShort(s);
} else {
SAVEI_BU_T = Short.MIN_VALUE;
}
}

protected final void initSAVE_BU_F(String s) {
if (!s.trim().isEmpty()) {
SAVE_BU_F = Byte.parseByte(s);
} else {
SAVE_BU_F = Byte.MIN_VALUE;
}
}

protected final void initSAVE_BU_I(String s) {
if (!s.trim().isEmpty()) {
SAVE_BU_I = Double.parseDouble(s);
} else {
SAVE_BU_I = Double.NaN;
}
}

protected final void initSAVE_BU_O(String s) {
if (!s.trim().isEmpty()) {
SAVE_BU_O = Short.parseShort(s);
} else {
SAVE_BU_O = Short.MIN_VALUE;
}
}

protected final void initSAVE_BU_T(String s) {
if (!s.trim().isEmpty()) {
SAVE_BU_T = Short.parseShort(s);
} else {
SAVE_BU_T = Short.MIN_VALUE;
}
}

protected final void initSAVINGS_BU_F(String s) {
if (!s.trim().isEmpty()) {
SAVINGS_BU_F = Byte.parseByte(s);
} else {
SAVINGS_BU_F = Byte.MIN_VALUE;
}
}

protected final void initSAVINGS_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
SAVINGS_BU_NI2 = Short.parseShort(s);
} else {
SAVINGS_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initSAVINGS_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
SAVINGS_BU_NI3 = Short.parseShort(s);
} else {
SAVINGS_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initSAVINGS_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
SAVINGS_BU_NI4 = Short.parseShort(s);
} else {
SAVINGS_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initSAVINGS_BU_S(String s) {
if (!s.trim().isEmpty()) {
SAVINGS_BU_S = Double.parseDouble(s);
} else {
SAVINGS_BU_S = Double.NaN;
}
}

protected final void initSAVINGS_BU_T(String s) {
if (!s.trim().isEmpty()) {
SAVINGS_BU_T = Short.parseShort(s);
} else {
SAVINGS_BU_T = Short.MIN_VALUE;
}
}

protected final void initSCCHD(String s) {
if (!s.trim().isEmpty()) {
SCCHD = Byte.parseByte(s);
} else {
SCCHD = Byte.MIN_VALUE;
}
}

protected final void initSCCHDA(String s) {
if (!s.trim().isEmpty()) {
SCCHDA = Byte.parseByte(s);
} else {
SCCHDA = Byte.MIN_VALUE;
}
}

protected final void initSCCHDB(String s) {
if (!s.trim().isEmpty()) {
SCCHDB = Byte.parseByte(s);
} else {
SCCHDB = Byte.MIN_VALUE;
}
}

protected final void initSCCHDC(String s) {
if (!s.trim().isEmpty()) {
SCCHDC = Byte.parseByte(s);
} else {
SCCHDC = Byte.MIN_VALUE;
}
}

protected final void initSCCHDD(String s) {
if (!s.trim().isEmpty()) {
SCCHDD = Byte.parseByte(s);
} else {
SCCHDD = Byte.MIN_VALUE;
}
}

protected final void initSCCHDE(String s) {
if (!s.trim().isEmpty()) {
SCCHDE = Byte.parseByte(s);
} else {
SCCHDE = Byte.MIN_VALUE;
}
}

protected final void initSCCHDF(String s) {
if (!s.trim().isEmpty()) {
SCCHDF = Byte.parseByte(s);
} else {
SCCHDF = Byte.MIN_VALUE;
}
}

protected final void initSCCHDG(String s) {
if (!s.trim().isEmpty()) {
SCCHDG = Byte.parseByte(s);
} else {
SCCHDG = Byte.MIN_VALUE;
}
}

protected final void initSCCHDH(String s) {
if (!s.trim().isEmpty()) {
SCCHDH = Byte.parseByte(s);
} else {
SCCHDH = Byte.MIN_VALUE;
}
}

protected final void initSCCHDI(String s) {
if (!s.trim().isEmpty()) {
SCCHDI = Byte.parseByte(s);
} else {
SCCHDI = Byte.MIN_VALUE;
}
}

protected final void initSCCHDM(String s) {
if (!s.trim().isEmpty()) {
SCCHDM = Byte.parseByte(s);
} else {
SCCHDM = Byte.MIN_VALUE;
}
}

protected final void initSCFAM(String s) {
if (!s.trim().isEmpty()) {
SCFAM = Byte.parseByte(s);
} else {
SCFAM = Byte.MIN_VALUE;
}
}

protected final void initSCFAMA(String s) {
if (!s.trim().isEmpty()) {
SCFAMA = Byte.parseByte(s);
} else {
SCFAMA = Byte.MIN_VALUE;
}
}

protected final void initSCFAMB(String s) {
if (!s.trim().isEmpty()) {
SCFAMB = Byte.parseByte(s);
} else {
SCFAMB = Byte.MIN_VALUE;
}
}

protected final void initSCFAMC(String s) {
if (!s.trim().isEmpty()) {
SCFAMC = Byte.parseByte(s);
} else {
SCFAMC = Byte.MIN_VALUE;
}
}

protected final void initSCFAMD(String s) {
if (!s.trim().isEmpty()) {
SCFAMD = Byte.parseByte(s);
} else {
SCFAMD = Byte.MIN_VALUE;
}
}

protected final void initSCFAME(String s) {
if (!s.trim().isEmpty()) {
SCFAME = Byte.parseByte(s);
} else {
SCFAME = Byte.MIN_VALUE;
}
}

protected final void initSCFAMF(String s) {
if (!s.trim().isEmpty()) {
SCFAMF = Byte.parseByte(s);
} else {
SCFAMF = Byte.MIN_VALUE;
}
}

protected final void initSCFAMG(String s) {
if (!s.trim().isEmpty()) {
SCFAMG = Byte.parseByte(s);
} else {
SCFAMG = Byte.MIN_VALUE;
}
}

protected final void initSCFAMI(String s) {
if (!s.trim().isEmpty()) {
SCFAMI = Byte.parseByte(s);
} else {
SCFAMI = Byte.MIN_VALUE;
}
}

protected final void initSCFRD(String s) {
if (!s.trim().isEmpty()) {
SCFRD = Byte.parseByte(s);
} else {
SCFRD = Byte.MIN_VALUE;
}
}

protected final void initSCFRDA(String s) {
if (!s.trim().isEmpty()) {
SCFRDA = Byte.parseByte(s);
} else {
SCFRDA = Byte.MIN_VALUE;
}
}

protected final void initSCFRDB(String s) {
if (!s.trim().isEmpty()) {
SCFRDB = Byte.parseByte(s);
} else {
SCFRDB = Byte.MIN_VALUE;
}
}

protected final void initSCFRDC(String s) {
if (!s.trim().isEmpty()) {
SCFRDC = Byte.parseByte(s);
} else {
SCFRDC = Byte.MIN_VALUE;
}
}

protected final void initSCFRDD(String s) {
if (!s.trim().isEmpty()) {
SCFRDD = Byte.parseByte(s);
} else {
SCFRDD = Byte.MIN_VALUE;
}
}

protected final void initSCFRDE(String s) {
if (!s.trim().isEmpty()) {
SCFRDE = Byte.parseByte(s);
} else {
SCFRDE = Byte.MIN_VALUE;
}
}

protected final void initSCFRDF(String s) {
if (!s.trim().isEmpty()) {
SCFRDF = Byte.parseByte(s);
} else {
SCFRDF = Byte.MIN_VALUE;
}
}

protected final void initSCFRDG(String s) {
if (!s.trim().isEmpty()) {
SCFRDG = Byte.parseByte(s);
} else {
SCFRDG = Byte.MIN_VALUE;
}
}

protected final void initSCFRDH(String s) {
if (!s.trim().isEmpty()) {
SCFRDH = Byte.parseByte(s);
} else {
SCFRDH = Byte.MIN_VALUE;
}
}

protected final void initSCFRDI(String s) {
if (!s.trim().isEmpty()) {
SCFRDI = Byte.parseByte(s);
} else {
SCFRDI = Byte.MIN_VALUE;
}
}

protected final void initSCHLEAVE(String s) {
if (!s.trim().isEmpty()) {
SCHLEAVE = Byte.parseByte(s);
} else {
SCHLEAVE = Byte.MIN_VALUE;
}
}

protected final void initSCHLEAVE_P(String s) {
if (!s.trim().isEmpty()) {
SCHLEAVE_P = Byte.parseByte(s);
} else {
SCHLEAVE_P = Byte.MIN_VALUE;
}
}

protected final void initSCLDDR(String s) {
if (!s.trim().isEmpty()) {
SCLDDR = Byte.parseByte(s);
} else {
SCLDDR = Byte.MIN_VALUE;
}
}

protected final void initSCORGN(String s) {
if (!s.trim().isEmpty()) {
SCORGN = Short.parseShort(s);
} else {
SCORGN = Short.MIN_VALUE;
}
}

protected final void initSCQOLA(String s) {
if (!s.trim().isEmpty()) {
SCQOLA = Byte.parseByte(s);
} else {
SCQOLA = Byte.MIN_VALUE;
}
}

protected final void initSCQOLB(String s) {
if (!s.trim().isEmpty()) {
SCQOLB = Byte.parseByte(s);
} else {
SCQOLB = Byte.MIN_VALUE;
}
}

protected final void initSCQOLC(String s) {
if (!s.trim().isEmpty()) {
SCQOLC = Byte.parseByte(s);
} else {
SCQOLC = Byte.MIN_VALUE;
}
}

protected final void initSCQOLD(String s) {
if (!s.trim().isEmpty()) {
SCQOLD = Byte.parseByte(s);
} else {
SCQOLD = Byte.MIN_VALUE;
}
}

protected final void initSCQOLE(String s) {
if (!s.trim().isEmpty()) {
SCQOLE = Byte.parseByte(s);
} else {
SCQOLE = Byte.MIN_VALUE;
}
}

protected final void initSCQOLF(String s) {
if (!s.trim().isEmpty()) {
SCQOLF = Byte.parseByte(s);
} else {
SCQOLF = Byte.MIN_VALUE;
}
}

protected final void initSCQOLG(String s) {
if (!s.trim().isEmpty()) {
SCQOLG = Byte.parseByte(s);
} else {
SCQOLG = Byte.MIN_VALUE;
}
}

protected final void initSCQOLH(String s) {
if (!s.trim().isEmpty()) {
SCQOLH = Byte.parseByte(s);
} else {
SCQOLH = Byte.MIN_VALUE;
}
}

protected final void initSCQOLI(String s) {
if (!s.trim().isEmpty()) {
SCQOLI = Byte.parseByte(s);
} else {
SCQOLI = Byte.MIN_VALUE;
}
}

protected final void initSCQOLJ(String s) {
if (!s.trim().isEmpty()) {
SCQOLJ = Byte.parseByte(s);
} else {
SCQOLJ = Byte.MIN_VALUE;
}
}

protected final void initSCQOLK(String s) {
if (!s.trim().isEmpty()) {
SCQOLK = Byte.parseByte(s);
} else {
SCQOLK = Byte.MIN_VALUE;
}
}

protected final void initSCQOLL(String s) {
if (!s.trim().isEmpty()) {
SCQOLL = Byte.parseByte(s);
} else {
SCQOLL = Byte.MIN_VALUE;
}
}

protected final void initSCQOLM(String s) {
if (!s.trim().isEmpty()) {
SCQOLM = Byte.parseByte(s);
} else {
SCQOLM = Byte.MIN_VALUE;
}
}

protected final void initSCQOLN(String s) {
if (!s.trim().isEmpty()) {
SCQOLN = Byte.parseByte(s);
} else {
SCQOLN = Byte.MIN_VALUE;
}
}

protected final void initSCQOLO(String s) {
if (!s.trim().isEmpty()) {
SCQOLO = Byte.parseByte(s);
} else {
SCQOLO = Byte.MIN_VALUE;
}
}

protected final void initSCQOLP(String s) {
if (!s.trim().isEmpty()) {
SCQOLP = Byte.parseByte(s);
} else {
SCQOLP = Byte.MIN_VALUE;
}
}

protected final void initSCQOLQ(String s) {
if (!s.trim().isEmpty()) {
SCQOLQ = Byte.parseByte(s);
} else {
SCQOLQ = Byte.MIN_VALUE;
}
}

protected final void initSCQOLR(String s) {
if (!s.trim().isEmpty()) {
SCQOLR = Byte.parseByte(s);
} else {
SCQOLR = Byte.MIN_VALUE;
}
}

protected final void initSCQOLS(String s) {
if (!s.trim().isEmpty()) {
SCQOLS = Byte.parseByte(s);
} else {
SCQOLS = Byte.MIN_VALUE;
}
}

protected final void initSDA_P_F(String s) {
if (!s.trim().isEmpty()) {
SDA_P_F = Byte.parseByte(s);
} else {
SDA_P_F = Byte.MIN_VALUE;
}
}

protected final void initSDA_P_I(String s) {
if (!s.trim().isEmpty()) {
SDA_P_I = Double.parseDouble(s);
} else {
SDA_P_I = Double.NaN;
}
}

protected final void initSDA_P_O(String s) {
if (!s.trim().isEmpty()) {
SDA_P_O = Short.parseShort(s);
} else {
SDA_P_O = Short.MIN_VALUE;
}
}

protected final void initSDA_P_T(String s) {
if (!s.trim().isEmpty()) {
SDA_P_T = Short.parseShort(s);
} else {
SDA_P_T = Short.MIN_VALUE;
}
}

protected final void initSDA_R_F(String s) {
if (!s.trim().isEmpty()) {
SDA_R_F = Byte.parseByte(s);
} else {
SDA_R_F = Byte.MIN_VALUE;
}
}

protected final void initSDA_R_I(String s) {
if (!s.trim().isEmpty()) {
SDA_R_I = Double.parseDouble(s);
} else {
SDA_R_I = Double.NaN;
}
}

protected final void initSDA_R_O(String s) {
if (!s.trim().isEmpty()) {
SDA_R_O = Short.parseShort(s);
} else {
SDA_R_O = Short.MIN_VALUE;
}
}

protected final void initSDA_R_T(String s) {
if (!s.trim().isEmpty()) {
SDA_R_T = Short.parseShort(s);
} else {
SDA_R_T = Short.MIN_VALUE;
}
}

protected final void initSEDRAW_BU_F(String s) {
if (!s.trim().isEmpty()) {
SEDRAW_BU_F = Byte.parseByte(s);
} else {
SEDRAW_BU_F = Byte.MIN_VALUE;
}
}

protected final void initSEDRAW_BU_I(String s) {
if (!s.trim().isEmpty()) {
SEDRAW_BU_I = Double.parseDouble(s);
} else {
SEDRAW_BU_I = Double.NaN;
}
}

protected final void initSEDRAW_BU_O(String s) {
if (!s.trim().isEmpty()) {
SEDRAW_BU_O = Short.parseShort(s);
} else {
SEDRAW_BU_O = Short.MIN_VALUE;
}
}

protected final void initSEDRAW_BU_T(String s) {
if (!s.trim().isEmpty()) {
SEDRAW_BU_T = Short.parseShort(s);
} else {
SEDRAW_BU_T = Short.MIN_VALUE;
}
}

protected final void initSEDRAW_P_F(String s) {
if (!s.trim().isEmpty()) {
SEDRAW_P_F = Byte.parseByte(s);
} else {
SEDRAW_P_F = Byte.MIN_VALUE;
}
}

protected final void initSEDRAW_P_I(String s) {
if (!s.trim().isEmpty()) {
SEDRAW_P_I = Double.parseDouble(s);
} else {
SEDRAW_P_I = Double.NaN;
}
}

protected final void initSEDRAW_P_O(String s) {
if (!s.trim().isEmpty()) {
SEDRAW_P_O = Short.parseShort(s);
} else {
SEDRAW_P_O = Short.MIN_VALUE;
}
}

protected final void initSEDRAW_P_T(String s) {
if (!s.trim().isEmpty()) {
SEDRAW_P_T = Short.parseShort(s);
} else {
SEDRAW_P_T = Short.MIN_VALUE;
}
}

protected final void initSEDRAW_R_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
SEDRAW_R_F = false;
}
}

protected final void initSEDRAW_R_I(String s) {
if (!s.trim().isEmpty()) {
SEDRAW_R_I = Double.parseDouble(s);
} else {
SEDRAW_R_I = Double.NaN;
}
}

protected final void initSEDRAW_R_O(String s) {
if (!s.trim().isEmpty()) {
SEDRAW_R_O = Short.parseShort(s);
} else {
SEDRAW_R_O = Short.MIN_VALUE;
}
}

protected final void initSEDRAW_R_T(String s) {
if (!s.trim().isEmpty()) {
SEDRAW_R_T = Short.parseShort(s);
} else {
SEDRAW_R_T = Short.MIN_VALUE;
}
}

protected final void initSEINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
SEINC_BU_F = Byte.parseByte(s);
} else {
SEINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initSEINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
SEINC_BU_NI2 = Short.parseShort(s);
} else {
SEINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initSEINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
SEINC_BU_NI3 = Short.parseShort(s);
} else {
SEINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initSEINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
SEINC_BU_NI4 = Short.parseShort(s);
} else {
SEINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initSEINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
SEINC_BU_S = Double.parseDouble(s);
} else {
SEINC_BU_S = Double.NaN;
}
}

protected final void initSEINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
SEINC_BU_T = Short.parseShort(s);
} else {
SEINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initSEINC_P_F(String s) {
if (!s.trim().isEmpty()) {
SEINC_P_F = Byte.parseByte(s);
} else {
SEINC_P_F = Byte.MIN_VALUE;
}
}

protected final void initSEINC_P_NI2(String s) {
if (!s.trim().isEmpty()) {
SEINC_P_NI2 = Short.parseShort(s);
} else {
SEINC_P_NI2 = Short.MIN_VALUE;
}
}

protected final void initSEINC_P_NI3(String s) {
if (!s.trim().isEmpty()) {
SEINC_P_NI3 = Short.parseShort(s);
} else {
SEINC_P_NI3 = Short.MIN_VALUE;
}
}

protected final void initSEINC_P_NI4(String s) {
if (!s.trim().isEmpty()) {
SEINC_P_NI4 = Short.parseShort(s);
} else {
SEINC_P_NI4 = Short.MIN_VALUE;
}
}

protected final void initSEINC_P_S(String s) {
if (!s.trim().isEmpty()) {
SEINC_P_S = Double.parseDouble(s);
} else {
SEINC_P_S = Double.NaN;
}
}

protected final void initSEINC_P_T(String s) {
if (!s.trim().isEmpty()) {
SEINC_P_T = Short.parseShort(s);
} else {
SEINC_P_T = Short.MIN_VALUE;
}
}

protected final void initSEINC_R_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
SEINC_R_F = false;
}
}

protected final void initSEINC_R_NI2(String s) {
if (!s.trim().isEmpty()) {
SEINC_R_NI2 = Short.parseShort(s);
} else {
SEINC_R_NI2 = Short.MIN_VALUE;
}
}

protected final void initSEINC_R_NI3(String s) {
if (!s.trim().isEmpty()) {
SEINC_R_NI3 = Short.parseShort(s);
} else {
SEINC_R_NI3 = Short.MIN_VALUE;
}
}

protected final void initSEINC_R_NI4(String s) {
if (!s.trim().isEmpty()) {
SEINC_R_NI4 = Short.parseShort(s);
} else {
SEINC_R_NI4 = Short.MIN_VALUE;
}
}

protected final void initSEINC_R_S(String s) {
if (!s.trim().isEmpty()) {
SEINC_R_S = Double.parseDouble(s);
} else {
SEINC_R_S = Double.NaN;
}
}

protected final void initSEINC_R_T(String s) {
if (!s.trim().isEmpty()) {
SEINC_R_T = Short.parseShort(s);
} else {
SEINC_R_T = Short.MIN_VALUE;
}
}

protected final void initSEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
SEX = false;
}
}

protected final void initSEXBUHEAD(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
SEXBUHEAD = false;
}
}

protected final void initSEXHOH(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
SEXHOH = false;
}
}

protected final void initSEX_P(String s) {
if (!s.trim().isEmpty()) {
SEX_P = Byte.parseByte(s);
} else {
SEX_P = Byte.MIN_VALUE;
}
}

protected final void initSHARESI_BU_F(String s) {
if (!s.trim().isEmpty()) {
SHARESI_BU_F = Byte.parseByte(s);
} else {
SHARESI_BU_F = Byte.MIN_VALUE;
}
}

protected final void initSHARESI_BU_I(String s) {
if (!s.trim().isEmpty()) {
SHARESI_BU_I = Double.parseDouble(s);
} else {
SHARESI_BU_I = Double.NaN;
}
}

protected final void initSHARESI_BU_O(String s) {
if (!s.trim().isEmpty()) {
SHARESI_BU_O = Short.parseShort(s);
} else {
SHARESI_BU_O = Short.MIN_VALUE;
}
}

protected final void initSHARESI_BU_T(String s) {
if (!s.trim().isEmpty()) {
SHARESI_BU_T = Short.parseShort(s);
} else {
SHARESI_BU_T = Short.MIN_VALUE;
}
}

protected final void initSHARES_BU_F(String s) {
if (!s.trim().isEmpty()) {
SHARES_BU_F = Byte.parseByte(s);
} else {
SHARES_BU_F = Byte.MIN_VALUE;
}
}

protected final void initSHARES_BU_I(String s) {
if (!s.trim().isEmpty()) {
SHARES_BU_I = Double.parseDouble(s);
} else {
SHARES_BU_I = Double.NaN;
}
}

protected final void initSHARES_BU_O(String s) {
if (!s.trim().isEmpty()) {
SHARES_BU_O = Short.parseShort(s);
} else {
SHARES_BU_O = Short.MIN_VALUE;
}
}

protected final void initSHARES_BU_T(String s) {
if (!s.trim().isEmpty()) {
SHARES_BU_T = Short.parseShort(s);
} else {
SHARES_BU_T = Short.MIN_VALUE;
}
}

protected final void initSHISA_BU_F(String s) {
if (!s.trim().isEmpty()) {
SHISA_BU_F = Byte.parseByte(s);
} else {
SHISA_BU_F = Byte.MIN_VALUE;
}
}

protected final void initSHISA_BU_I(String s) {
if (!s.trim().isEmpty()) {
SHISA_BU_I = Integer.parseInt(s);
} else {
SHISA_BU_I = Integer.MIN_VALUE;
}
}

protected final void initSHISA_BU_O(String s) {
if (!s.trim().isEmpty()) {
SHISA_BU_O = Short.parseShort(s);
} else {
SHISA_BU_O = Short.MIN_VALUE;
}
}

protected final void initSHISA_BU_T(String s) {
if (!s.trim().isEmpty()) {
SHISA_BU_T = Short.parseShort(s);
} else {
SHISA_BU_T = Short.MIN_VALUE;
}
}

protected final void initSINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
SINC_BU_F = Byte.parseByte(s);
} else {
SINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initSINC_BU_I(String s) {
if (!s.trim().isEmpty()) {
SINC_BU_I = Double.parseDouble(s);
} else {
SINC_BU_I = Double.NaN;
}
}

protected final void initSINC_BU_O(String s) {
if (!s.trim().isEmpty()) {
SINC_BU_O = Short.parseShort(s);
} else {
SINC_BU_O = Short.MIN_VALUE;
}
}

protected final void initSINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
SINC_BU_T = Short.parseShort(s);
} else {
SINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initSMOKER(String s) {
if (!s.trim().isEmpty()) {
SMOKER = Byte.parseByte(s);
} else {
SMOKER = Byte.MIN_VALUE;
}
}

protected final void initSMOKERSTAT(String s) {
if (!s.trim().isEmpty()) {
SMOKERSTAT = Byte.parseByte(s);
} else {
SMOKERSTAT = Byte.MIN_VALUE;
}
}

protected final void initSOCRENT(String s) {
if (!s.trim().isEmpty()) {
SOCRENT = Byte.parseByte(s);
} else {
SOCRENT = Byte.MIN_VALUE;
}
}

protected final void initSPAGE(String s) {
if (!s.trim().isEmpty()) {
SPAGE = Byte.parseByte(s);
} else {
SPAGE = Byte.MIN_VALUE;
}
}

protected final void initSPAGE_BU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
SPAGE_BU = false;
}
}

protected final void initSPCAR(String s) {
if (!s.trim().isEmpty()) {
SPCAR = Byte.parseByte(s);
} else {
SPCAR = Byte.MIN_VALUE;
}
}

protected final void initSPEN_P_F(String s) {
if (!s.trim().isEmpty()) {
SPEN_P_F = Byte.parseByte(s);
} else {
SPEN_P_F = Byte.MIN_VALUE;
}
}

protected final void initSPEN_P_I(String s) {
if (!s.trim().isEmpty()) {
SPEN_P_I = Double.parseDouble(s);
} else {
SPEN_P_I = Double.NaN;
}
}

protected final void initSPEN_P_O(String s) {
if (!s.trim().isEmpty()) {
SPEN_P_O = Short.parseShort(s);
} else {
SPEN_P_O = Short.MIN_VALUE;
}
}

protected final void initSPEN_P_T(String s) {
if (!s.trim().isEmpty()) {
SPEN_P_T = Short.parseShort(s);
} else {
SPEN_P_T = Short.MIN_VALUE;
}
}

protected final void initSPEN_R_F(String s) {
if (!s.trim().isEmpty()) {
SPEN_R_F = Byte.parseByte(s);
} else {
SPEN_R_F = Byte.MIN_VALUE;
}
}

protected final void initSPEN_R_I(String s) {
if (!s.trim().isEmpty()) {
SPEN_R_I = Double.parseDouble(s);
} else {
SPEN_R_I = Double.NaN;
}
}

protected final void initSPEN_R_O(String s) {
if (!s.trim().isEmpty()) {
SPEN_R_O = Short.parseShort(s);
} else {
SPEN_R_O = Short.MIN_VALUE;
}
}

protected final void initSPEN_R_T(String s) {
if (!s.trim().isEmpty()) {
SPEN_R_T = Short.parseShort(s);
} else {
SPEN_R_T = Short.MIN_VALUE;
}
}

protected final void initSPINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
SPINC_BU_F = Byte.parseByte(s);
} else {
SPINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initSPINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
SPINC_BU_NI2 = Short.parseShort(s);
} else {
SPINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initSPINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
SPINC_BU_NI3 = Short.parseShort(s);
} else {
SPINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initSPINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
SPINC_BU_NI4 = Short.parseShort(s);
} else {
SPINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initSPINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
SPINC_BU_S = Double.parseDouble(s);
} else {
SPINC_BU_S = Double.NaN;
}
}

protected final void initSPINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
SPINC_BU_T = Short.parseShort(s);
} else {
SPINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initSPINC_P_F(String s) {
if (!s.trim().isEmpty()) {
SPINC_P_F = Byte.parseByte(s);
} else {
SPINC_P_F = Byte.MIN_VALUE;
}
}

protected final void initSPINC_P_NI2(String s) {
if (!s.trim().isEmpty()) {
SPINC_P_NI2 = Short.parseShort(s);
} else {
SPINC_P_NI2 = Short.MIN_VALUE;
}
}

protected final void initSPINC_P_NI3(String s) {
if (!s.trim().isEmpty()) {
SPINC_P_NI3 = Short.parseShort(s);
} else {
SPINC_P_NI3 = Short.MIN_VALUE;
}
}

protected final void initSPINC_P_NI4(String s) {
if (!s.trim().isEmpty()) {
SPINC_P_NI4 = Short.parseShort(s);
} else {
SPINC_P_NI4 = Short.MIN_VALUE;
}
}

protected final void initSPINC_P_S(String s) {
if (!s.trim().isEmpty()) {
SPINC_P_S = Double.parseDouble(s);
} else {
SPINC_P_S = Double.NaN;
}
}

protected final void initSPINC_P_T(String s) {
if (!s.trim().isEmpty()) {
SPINC_P_T = Short.parseShort(s);
} else {
SPINC_P_T = Short.MIN_VALUE;
}
}

protected final void initSPINC_R_F(String s) {
if (!s.trim().isEmpty()) {
SPINC_R_F = Byte.parseByte(s);
} else {
SPINC_R_F = Byte.MIN_VALUE;
}
}

protected final void initSPINC_R_NI2(String s) {
if (!s.trim().isEmpty()) {
SPINC_R_NI2 = Short.parseShort(s);
} else {
SPINC_R_NI2 = Short.MIN_VALUE;
}
}

protected final void initSPINC_R_NI3(String s) {
if (!s.trim().isEmpty()) {
SPINC_R_NI3 = Short.parseShort(s);
} else {
SPINC_R_NI3 = Short.MIN_VALUE;
}
}

protected final void initSPINC_R_NI4(String s) {
if (!s.trim().isEmpty()) {
SPINC_R_NI4 = Short.parseShort(s);
} else {
SPINC_R_NI4 = Short.MIN_VALUE;
}
}

protected final void initSPINC_R_S(String s) {
if (!s.trim().isEmpty()) {
SPINC_R_S = Double.parseDouble(s);
} else {
SPINC_R_S = Double.NaN;
}
}

protected final void initSPINC_R_T(String s) {
if (!s.trim().isEmpty()) {
SPINC_R_T = Short.parseShort(s);
} else {
SPINC_R_T = Short.MIN_VALUE;
}
}

protected final void initSPNAMEONPROP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
SPNAMEONPROP = false;
}
}

protected final void initSPTRAA(String s) {
if (!s.trim().isEmpty()) {
SPTRAA = Byte.parseByte(s);
} else {
SPTRAA = Byte.MIN_VALUE;
}
}

protected final void initSRH3_HRS(String s) {
if (!s.trim().isEmpty()) {
SRH3_HRS = Byte.parseByte(s);
} else {
SRH3_HRS = Byte.MIN_VALUE;
}
}

protected final void initSRH3_HRS_P(String s) {
if (!s.trim().isEmpty()) {
SRH3_HRS_P = Byte.parseByte(s);
} else {
SRH3_HRS_P = Byte.MIN_VALUE;
}
}

protected final void initSRH3_HSE(String s) {
if (!s.trim().isEmpty()) {
SRH3_HSE = Byte.parseByte(s);
} else {
SRH3_HSE = Byte.MIN_VALUE;
}
}

protected final void initSRH3_HSE_P(String s) {
if (!s.trim().isEmpty()) {
SRH3_HSE_P = Byte.parseByte(s);
} else {
SRH3_HSE_P = Byte.MIN_VALUE;
}
}

protected final void initSRH_HRS(String s) {
if (!s.trim().isEmpty()) {
SRH_HRS = Byte.parseByte(s);
} else {
SRH_HRS = Byte.MIN_VALUE;
}
}

protected final void initSRH_HSE(String s) {
if (!s.trim().isEmpty()) {
SRH_HSE = Byte.parseByte(s);
} else {
SRH_HSE = Byte.MIN_VALUE;
}
}

protected final void initSSP_P_F(String s) {
if (!s.trim().isEmpty()) {
SSP_P_F = Byte.parseByte(s);
} else {
SSP_P_F = Byte.MIN_VALUE;
}
}

protected final void initSSP_P_I(String s) {
if (!s.trim().isEmpty()) {
SSP_P_I = Double.parseDouble(s);
} else {
SSP_P_I = Double.NaN;
}
}

protected final void initSSP_P_O(String s) {
if (!s.trim().isEmpty()) {
SSP_P_O = Short.parseShort(s);
} else {
SSP_P_O = Short.MIN_VALUE;
}
}

protected final void initSSP_P_T(String s) {
if (!s.trim().isEmpty()) {
SSP_P_T = Short.parseShort(s);
} else {
SSP_P_T = Short.MIN_VALUE;
}
}

protected final void initSSP_R_F(String s) {
if (!s.trim().isEmpty()) {
SSP_R_F = Byte.parseByte(s);
} else {
SSP_R_F = Byte.MIN_VALUE;
}
}

protected final void initSSP_R_I(String s) {
if (!s.trim().isEmpty()) {
SSP_R_I = Double.parseDouble(s);
} else {
SSP_R_I = Double.NaN;
}
}

protected final void initSSP_R_O(String s) {
if (!s.trim().isEmpty()) {
SSP_R_O = Short.parseShort(s);
} else {
SSP_R_O = Short.MIN_VALUE;
}
}

protected final void initSSP_R_T(String s) {
if (!s.trim().isEmpty()) {
SSP_R_T = Short.parseShort(s);
} else {
SSP_R_T = Short.MIN_VALUE;
}
}

protected final void initTENURE(String s) {
if (!s.trim().isEmpty()) {
TENURE = Byte.parseByte(s);
} else {
TENURE = Byte.MIN_VALUE;
}
}

protected final void initTESSAI_BU_F(String s) {
if (!s.trim().isEmpty()) {
TESSAI_BU_F = Byte.parseByte(s);
} else {
TESSAI_BU_F = Byte.MIN_VALUE;
}
}

protected final void initTESSAI_BU_I(String s) {
if (!s.trim().isEmpty()) {
TESSAI_BU_I = Double.parseDouble(s);
} else {
TESSAI_BU_I = Double.NaN;
}
}

protected final void initTESSAI_BU_O(String s) {
if (!s.trim().isEmpty()) {
TESSAI_BU_O = Short.parseShort(s);
} else {
TESSAI_BU_O = Short.MIN_VALUE;
}
}

protected final void initTESSAI_BU_T(String s) {
if (!s.trim().isEmpty()) {
TESSAI_BU_T = Short.parseShort(s);
} else {
TESSAI_BU_T = Short.MIN_VALUE;
}
}

protected final void initTESSA_BU_F(String s) {
if (!s.trim().isEmpty()) {
TESSA_BU_F = Byte.parseByte(s);
} else {
TESSA_BU_F = Byte.MIN_VALUE;
}
}

protected final void initTESSA_BU_I(String s) {
if (!s.trim().isEmpty()) {
TESSA_BU_I = Double.parseDouble(s);
} else {
TESSA_BU_I = Double.NaN;
}
}

protected final void initTESSA_BU_O(String s) {
if (!s.trim().isEmpty()) {
TESSA_BU_O = Short.parseShort(s);
} else {
TESSA_BU_O = Short.MIN_VALUE;
}
}

protected final void initTESSA_BU_T(String s) {
if (!s.trim().isEmpty()) {
TESSA_BU_T = Short.parseShort(s);
} else {
TESSA_BU_T = Short.MIN_VALUE;
}
}

protected final void initTHP_BU_F(String s) {
if (!s.trim().isEmpty()) {
THP_BU_F = Byte.parseByte(s);
} else {
THP_BU_F = Byte.MIN_VALUE;
}
}

protected final void initTHP_BU_I(String s) {
if (!s.trim().isEmpty()) {
THP_BU_I = Double.parseDouble(s);
} else {
THP_BU_I = Double.NaN;
}
}

protected final void initTHP_BU_O(String s) {
if (!s.trim().isEmpty()) {
THP_BU_O = Short.parseShort(s);
} else {
THP_BU_O = Short.MIN_VALUE;
}
}

protected final void initTHP_BU_T(String s) {
if (!s.trim().isEmpty()) {
THP_BU_T = Short.parseShort(s);
} else {
THP_BU_T = Short.MIN_VALUE;
}
}

protected final void initTHP_P_F(String s) {
if (!s.trim().isEmpty()) {
THP_P_F = Byte.parseByte(s);
} else {
THP_P_F = Byte.MIN_VALUE;
}
}

protected final void initTHP_P_I(String s) {
if (!s.trim().isEmpty()) {
THP_P_I = Double.parseDouble(s);
} else {
THP_P_I = Double.NaN;
}
}

protected final void initTHP_P_O(String s) {
if (!s.trim().isEmpty()) {
THP_P_O = Short.parseShort(s);
} else {
THP_P_O = Short.MIN_VALUE;
}
}

protected final void initTHP_P_T(String s) {
if (!s.trim().isEmpty()) {
THP_P_T = Short.parseShort(s);
} else {
THP_P_T = Short.MIN_VALUE;
}
}

protected final void initTHP_R_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
THP_R_F = false;
}
}

protected final void initTHP_R_I(String s) {
if (!s.trim().isEmpty()) {
THP_R_I = Double.parseDouble(s);
} else {
THP_R_I = Double.NaN;
}
}

protected final void initTHP_R_O(String s) {
if (!s.trim().isEmpty()) {
THP_R_O = Short.parseShort(s);
} else {
THP_R_O = Short.MIN_VALUE;
}
}

protected final void initTHP_R_T(String s) {
if (!s.trim().isEmpty()) {
THP_R_T = Short.parseShort(s);
} else {
THP_R_T = Short.MIN_VALUE;
}
}

protected final void initTNHWQ10_BU_F(String s) {
if (!s.trim().isEmpty()) {
TNHWQ10_BU_F = Byte.parseByte(s);
} else {
TNHWQ10_BU_F = Byte.MIN_VALUE;
}
}

protected final void initTNHWQ10_BU_S(String s) {
if (!s.trim().isEmpty()) {
TNHWQ10_BU_S = Byte.parseByte(s);
} else {
TNHWQ10_BU_S = Byte.MIN_VALUE;
}
}

protected final void initTNHWQ5_BU_F(String s) {
if (!s.trim().isEmpty()) {
TNHWQ5_BU_F = Byte.parseByte(s);
} else {
TNHWQ5_BU_F = Byte.MIN_VALUE;
}
}

protected final void initTNHWQ5_BU_S(String s) {
if (!s.trim().isEmpty()) {
TNHWQ5_BU_S = Byte.parseByte(s);
} else {
TNHWQ5_BU_S = Byte.MIN_VALUE;
}
}

protected final void initTOTHASS_BU_F(String s) {
if (!s.trim().isEmpty()) {
TOTHASS_BU_F = Byte.parseByte(s);
} else {
TOTHASS_BU_F = Byte.MIN_VALUE;
}
}

protected final void initTOTHASS_BU_I(String s) {
if (!s.trim().isEmpty()) {
TOTHASS_BU_I = Integer.parseInt(s);
} else {
TOTHASS_BU_I = Integer.MIN_VALUE;
}
}

protected final void initTOTHASS_BU_O(String s) {
if (!s.trim().isEmpty()) {
TOTHASS_BU_O = Short.parseShort(s);
} else {
TOTHASS_BU_O = Short.MIN_VALUE;
}
}

protected final void initTOTHASS_BU_T(String s) {
if (!s.trim().isEmpty()) {
TOTHASS_BU_T = Short.parseShort(s);
} else {
TOTHASS_BU_T = Short.MIN_VALUE;
}
}

protected final void initTOTINC_BU_F(String s) {
if (!s.trim().isEmpty()) {
TOTINC_BU_F = Byte.parseByte(s);
} else {
TOTINC_BU_F = Byte.MIN_VALUE;
}
}

protected final void initTOTINC_BU_NI2(String s) {
if (!s.trim().isEmpty()) {
TOTINC_BU_NI2 = Short.parseShort(s);
} else {
TOTINC_BU_NI2 = Short.MIN_VALUE;
}
}

protected final void initTOTINC_BU_NI3(String s) {
if (!s.trim().isEmpty()) {
TOTINC_BU_NI3 = Short.parseShort(s);
} else {
TOTINC_BU_NI3 = Short.MIN_VALUE;
}
}

protected final void initTOTINC_BU_NI4(String s) {
if (!s.trim().isEmpty()) {
TOTINC_BU_NI4 = Short.parseShort(s);
} else {
TOTINC_BU_NI4 = Short.MIN_VALUE;
}
}

protected final void initTOTINC_BU_S(String s) {
if (!s.trim().isEmpty()) {
TOTINC_BU_S = Double.parseDouble(s);
} else {
TOTINC_BU_S = Double.NaN;
}
}

protected final void initTOTINC_BU_T(String s) {
if (!s.trim().isEmpty()) {
TOTINC_BU_T = Short.parseShort(s);
} else {
TOTINC_BU_T = Short.MIN_VALUE;
}
}

protected final void initTOTWQ10_BU_F(String s) {
if (!s.trim().isEmpty()) {
TOTWQ10_BU_F = Byte.parseByte(s);
} else {
TOTWQ10_BU_F = Byte.MIN_VALUE;
}
}

protected final void initTOTWQ10_BU_S(String s) {
if (!s.trim().isEmpty()) {
TOTWQ10_BU_S = Byte.parseByte(s);
} else {
TOTWQ10_BU_S = Byte.MIN_VALUE;
}
}

protected final void initTOTWQ5_BU_F(String s) {
if (!s.trim().isEmpty()) {
TOTWQ5_BU_F = Byte.parseByte(s);
} else {
TOTWQ5_BU_F = Byte.MIN_VALUE;
}
}

protected final void initTOTWQ5_BU_S(String s) {
if (!s.trim().isEmpty()) {
TOTWQ5_BU_S = Byte.parseByte(s);
} else {
TOTWQ5_BU_S = Byte.MIN_VALUE;
}
}

protected final void initTRANSFERSL(String s) {
if (!s.trim().isEmpty()) {
TRANSFERSL = Double.parseDouble(s);
} else {
TRANSFERSL = Double.NaN;
}
}

protected final void initTRANSFERST(String s) {
if (!s.trim().isEmpty()) {
TRANSFERST = Byte.parseByte(s);
} else {
TRANSFERST = Byte.MIN_VALUE;
}
}

protected final void initTRANSFERSU(String s) {
if (!s.trim().isEmpty()) {
TRANSFERSU = Double.parseDouble(s);
} else {
TRANSFERSU = Double.NaN;
}
}

protected final void initTRUSTSI_BU_F(String s) {
if (!s.trim().isEmpty()) {
TRUSTSI_BU_F = Byte.parseByte(s);
} else {
TRUSTSI_BU_F = Byte.MIN_VALUE;
}
}

protected final void initTRUSTSI_BU_I(String s) {
if (!s.trim().isEmpty()) {
TRUSTSI_BU_I = Double.parseDouble(s);
} else {
TRUSTSI_BU_I = Double.NaN;
}
}

protected final void initTRUSTSI_BU_O(String s) {
if (!s.trim().isEmpty()) {
TRUSTSI_BU_O = Short.parseShort(s);
} else {
TRUSTSI_BU_O = Short.MIN_VALUE;
}
}

protected final void initTRUSTSI_BU_T(String s) {
if (!s.trim().isEmpty()) {
TRUSTSI_BU_T = Short.parseShort(s);
} else {
TRUSTSI_BU_T = Short.MIN_VALUE;
}
}

protected final void initTRUSTS_BU_F(String s) {
if (!s.trim().isEmpty()) {
TRUSTS_BU_F = Byte.parseByte(s);
} else {
TRUSTS_BU_F = Byte.MIN_VALUE;
}
}

protected final void initTRUSTS_BU_I(String s) {
if (!s.trim().isEmpty()) {
TRUSTS_BU_I = Double.parseDouble(s);
} else {
TRUSTS_BU_I = Double.NaN;
}
}

protected final void initTRUSTS_BU_O(String s) {
if (!s.trim().isEmpty()) {
TRUSTS_BU_O = Short.parseShort(s);
} else {
TRUSTS_BU_O = Short.MIN_VALUE;
}
}

protected final void initTRUSTS_BU_T(String s) {
if (!s.trim().isEmpty()) {
TRUSTS_BU_T = Short.parseShort(s);
} else {
TRUSTS_BU_T = Short.MIN_VALUE;
}
}

protected final void initUSESCOAL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
USESCOAL = false;
}
}

protected final void initUSESELEC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
USESELEC = false;
}
}

protected final void initUSESGAS(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
USESGAS = false;
}
}

protected final void initUSESOIL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
USESOIL = false;
}
}

protected final void initUSESOTHERF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
USESOTHERF = false;
}
}

protected final void initUSESPARA(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
USESPARA = false;
}
}

protected final void initUSESWOOD(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
USESWOOD = false;
}
}

protected final void initWAR_P_F(String s) {
if (!s.trim().isEmpty()) {
WAR_P_F = Byte.parseByte(s);
} else {
WAR_P_F = Byte.MIN_VALUE;
}
}

protected final void initWAR_P_I(String s) {
if (!s.trim().isEmpty()) {
WAR_P_I = Double.parseDouble(s);
} else {
WAR_P_I = Double.NaN;
}
}

protected final void initWAR_P_O(String s) {
if (!s.trim().isEmpty()) {
WAR_P_O = Short.parseShort(s);
} else {
WAR_P_O = Short.MIN_VALUE;
}
}

protected final void initWAR_P_T(String s) {
if (!s.trim().isEmpty()) {
WAR_P_T = Short.parseShort(s);
} else {
WAR_P_T = Short.MIN_VALUE;
}
}

protected final void initWAR_R_F(String s) {
if (!s.trim().isEmpty()) {
WAR_R_F = Byte.parseByte(s);
} else {
WAR_R_F = Byte.MIN_VALUE;
}
}

protected final void initWAR_R_I(String s) {
if (!s.trim().isEmpty()) {
WAR_R_I = Double.parseDouble(s);
} else {
WAR_R_I = Double.NaN;
}
}

protected final void initWAR_R_O(String s) {
if (!s.trim().isEmpty()) {
WAR_R_O = Short.parseShort(s);
} else {
WAR_R_O = Short.MIN_VALUE;
}
}

protected final void initWAR_R_T(String s) {
if (!s.trim().isEmpty()) {
WAR_R_T = Short.parseShort(s);
} else {
WAR_R_T = Short.MIN_VALUE;
}
}

protected final void initWAVE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
WAVE = false;
}
}

protected final void initWGT(String s) {
if (!s.trim().isEmpty()) {
WGT = Double.parseDouble(s);
} else {
WGT = Double.NaN;
}
}

protected final void initWHOSO1(String s) {
if (!s.trim().isEmpty()) {
WHOSO1 = Byte.parseByte(s);
} else {
WHOSO1 = Byte.MIN_VALUE;
}
}

protected final void initWHOSO2(String s) {
if (!s.trim().isEmpty()) {
WHOSO2 = Byte.parseByte(s);
} else {
WHOSO2 = Byte.MIN_VALUE;
}
}

protected final void initWHOSO3(String s) {
if (!s.trim().isEmpty()) {
WHOSO3 = Byte.parseByte(s);
} else {
WHOSO3 = Byte.MIN_VALUE;
}
}

protected final void initWIDPEN_P_F(String s) {
if (!s.trim().isEmpty()) {
WIDPEN_P_F = Byte.parseByte(s);
} else {
WIDPEN_P_F = Byte.MIN_VALUE;
}
}

protected final void initWIDPEN_P_I(String s) {
if (!s.trim().isEmpty()) {
WIDPEN_P_I = Double.parseDouble(s);
} else {
WIDPEN_P_I = Double.NaN;
}
}

protected final void initWIDPEN_P_O(String s) {
if (!s.trim().isEmpty()) {
WIDPEN_P_O = Short.parseShort(s);
} else {
WIDPEN_P_O = Short.MIN_VALUE;
}
}

protected final void initWIDPEN_P_T(String s) {
if (!s.trim().isEmpty()) {
WIDPEN_P_T = Short.parseShort(s);
} else {
WIDPEN_P_T = Short.MIN_VALUE;
}
}

protected final void initWIDPEN_R_F(String s) {
if (!s.trim().isEmpty()) {
WIDPEN_R_F = Byte.parseByte(s);
} else {
WIDPEN_R_F = Byte.MIN_VALUE;
}
}

protected final void initWIDPEN_R_I(String s) {
if (!s.trim().isEmpty()) {
WIDPEN_R_I = Double.parseDouble(s);
} else {
WIDPEN_R_I = Double.NaN;
}
}

protected final void initWIDPEN_R_O(String s) {
if (!s.trim().isEmpty()) {
WIDPEN_R_O = Short.parseShort(s);
} else {
WIDPEN_R_O = Short.MIN_VALUE;
}
}

protected final void initWIDPEN_R_T(String s) {
if (!s.trim().isEmpty()) {
WIDPEN_R_T = Short.parseShort(s);
} else {
WIDPEN_R_T = Short.MIN_VALUE;
}
}

protected final void initWOODL(String s) {
if (!s.trim().isEmpty()) {
WOODL = Double.parseDouble(s);
} else {
WOODL = Double.NaN;
}
}

protected final void initWOODT(String s) {
if (!s.trim().isEmpty()) {
WOODT = Byte.parseByte(s);
} else {
WOODT = Byte.MIN_VALUE;
}
}

protected final void initWOODU(String s) {
if (!s.trim().isEmpty()) {
WOODU = Double.parseDouble(s);
} else {
WOODU = Double.NaN;
}
}

protected final void initWORKTIME(String s) {
if (!s.trim().isEmpty()) {
WORKTIME = Byte.parseByte(s);
} else {
WORKTIME = Byte.MIN_VALUE;
}
}

protected final void initWPAC(String s) {
if (!s.trim().isEmpty()) {
WPAC = Double.parseDouble(s);
} else {
WPAC = Double.NaN;
}
}

protected final void initWPACOA(String s) {
if (!s.trim().isEmpty()) {
WPACOA = Byte.parseByte(s);
} else {
WPACOA = Byte.MIN_VALUE;
}
}

protected final void initWPACOB(String s) {
if (!s.trim().isEmpty()) {
WPACOB = Double.parseDouble(s);
} else {
WPACOB = Double.NaN;
}
}

protected final void initWPACOC(String s) {
if (!s.trim().isEmpty()) {
WPACOC = Byte.parseByte(s);
} else {
WPACOC = Byte.MIN_VALUE;
}
}

protected final void initWPACON(String s) {
if (!s.trim().isEmpty()) {
WPACON = Byte.parseByte(s);
} else {
WPACON = Byte.MIN_VALUE;
}
}

protected final void initWPACTIVE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
WPACTIVE = false;
}
}

protected final void initWPACTIVE_P(String s) {
if (!s.trim().isEmpty()) {
WPACTIVE_P = Byte.parseByte(s);
} else {
WPACTIVE_P = Byte.MIN_VALUE;
}
}

protected final void initWPACTW(String s) {
if (!s.trim().isEmpty()) {
WPACTW = Byte.parseByte(s);
} else {
WPACTW = Byte.MIN_VALUE;
}
}

protected final void initWPADY(String s) {
if (!s.trim().isEmpty()) {
WPADY = Byte.parseByte(s);
} else {
WPADY = Byte.MIN_VALUE;
}
}

protected final void initWPAMEC(String s) {
if (!s.trim().isEmpty()) {
WPAMEC = Double.parseDouble(s);
} else {
WPAMEC = Double.NaN;
}
}

protected final void initWPAOTP(String s) {
if (!s.trim().isEmpty()) {
WPAOTP = Integer.parseInt(s);
} else {
WPAOTP = Integer.MIN_VALUE;
}
}

protected final void initWPAP(String s) {
if (!s.trim().isEmpty()) {
WPAP = Byte.parseByte(s);
} else {
WPAP = Byte.MIN_VALUE;
}
}

protected final void initWPAPF(String s) {
if (!s.trim().isEmpty()) {
WPAPF = Double.parseDouble(s);
} else {
WPAPF = Double.NaN;
}
}

protected final void initWPASAL(String s) {
if (!s.trim().isEmpty()) {
WPASAL = Double.parseDouble(s);
} else {
WPASAL = Double.NaN;
}
}

protected final void initWPAWAY(String s) {
if (!s.trim().isEmpty()) {
WPAWAY = Byte.parseByte(s);
} else {
WPAWAY = Byte.MIN_VALUE;
}
}

protected final void initWPBDNI(String s) {
if (!s.trim().isEmpty()) {
WPBDNI = Byte.parseByte(s);
} else {
WPBDNI = Byte.MIN_VALUE;
}
}

protected final void initWPBDT(String s) {
if (!s.trim().isEmpty()) {
WPBDT = Byte.parseByte(s);
} else {
WPBDT = Byte.MIN_VALUE;
}
}

protected final void initWPBI(String s) {
if (!s.trim().isEmpty()) {
WPBI = Byte.parseByte(s);
} else {
WPBI = Byte.MIN_VALUE;
}
}

protected final void initWPBIMA(String s) {
if (!s.trim().isEmpty()) {
WPBIMA = Integer.parseInt(s);
} else {
WPBIMA = Integer.MIN_VALUE;
}
}

protected final void initWPBIWA(String s) {
if (!s.trim().isEmpty()) {
WPBIWA = Short.parseShort(s);
} else {
WPBIWA = Short.MIN_VALUE;
}
}

protected final void initWPBTHA(String s) {
if (!s.trim().isEmpty()) {
WPBTHA = Byte.parseByte(s);
} else {
WPBTHA = Byte.MIN_VALUE;
}
}

protected final void initWPBTHP(String s) {
if (!s.trim().isEmpty()) {
WPBTHP = Byte.parseByte(s);
} else {
WPBTHP = Byte.MIN_VALUE;
}
}

protected final void initWPBUS(String s) {
if (!s.trim().isEmpty()) {
WPBUS = Byte.parseByte(s);
} else {
WPBUS = Byte.MIN_VALUE;
}
}

protected final void initWPBUSV(String s) {
if (!s.trim().isEmpty()) {
WPBUSV = Integer.parseInt(s);
} else {
WPBUSV = Integer.MIN_VALUE;
}
}

protected final void initWPCEMP(String s) {
if (!s.trim().isEmpty()) {
WPCEMP = Byte.parseByte(s);
} else {
WPCEMP = Byte.MIN_VALUE;
}
}

protected final void initWPCJOB(String s) {
if (!s.trim().isEmpty()) {
WPCJOB = Byte.parseByte(s);
} else {
WPCJOB = Byte.MIN_VALUE;
}
}

protected final void initWPCONY(String s) {
if (!s.trim().isEmpty()) {
WPCONY = Double.parseDouble(s);
} else {
WPCONY = Double.NaN;
}
}

protected final void initWPDE(String s) {
if (!s.trim().isEmpty()) {
WPDE = Short.parseShort(s);
} else {
WPDE = Short.MIN_VALUE;
}
}

protected final void initWPDES(String s) {
if (!s.trim().isEmpty()) {
WPDES = Byte.parseByte(s);
} else {
WPDES = Byte.MIN_VALUE;
}
}

protected final void initWPDPS(String s) {
if (!s.trim().isEmpty()) {
WPDPS = Byte.parseByte(s);
} else {
WPDPS = Byte.MIN_VALUE;
}
}

protected final void initWPDS(String s) {
if (!s.trim().isEmpty()) {
WPDS = Short.parseShort(s);
} else {
WPDS = Short.MIN_VALUE;
}
}

protected final void initWPEDC(String s) {
if (!s.trim().isEmpty()) {
WPEDC = Byte.parseByte(s);
} else {
WPEDC = Byte.MIN_VALUE;
}
}

protected final void initWPEMP(String s) {
if (!s.trim().isEmpty()) {
WPEMP = Byte.parseByte(s);
} else {
WPEMP = Byte.MIN_VALUE;
}
}

protected final void initWPEMPL(String s) {
if (!s.trim().isEmpty()) {
WPEMPL = Byte.parseByte(s);
} else {
WPEMPL = Byte.MIN_VALUE;
}
}

protected final void initWPEPER(String s) {
if (!s.trim().isEmpty()) {
WPEPER = Byte.parseByte(s);
} else {
WPEPER = Byte.MIN_VALUE;
}
}

protected final void initWPERA(String s) {
if (!s.trim().isEmpty()) {
WPERA = Byte.parseByte(s);
} else {
WPERA = Byte.MIN_VALUE;
}
}

protected final void initWPERAG(String s) {
if (!s.trim().isEmpty()) {
WPERAG = Byte.parseByte(s);
} else {
WPERAG = Byte.MIN_VALUE;
}
}

protected final void initWPERC(String s) {
if (!s.trim().isEmpty()) {
WPERC = Byte.parseByte(s);
} else {
WPERC = Byte.MIN_VALUE;
}
}

protected final void initWPERET(String s) {
if (!s.trim().isEmpty()) {
WPERET = Byte.parseByte(s);
} else {
WPERET = Byte.MIN_VALUE;
}
}

protected final void initWPERP(String s) {
if (!s.trim().isEmpty()) {
WPERP = Byte.parseByte(s);
} else {
WPERP = Byte.MIN_VALUE;
}
}

protected final void initWPES(String s) {
if (!s.trim().isEmpty()) {
WPES = Byte.parseByte(s);
} else {
WPES = Byte.MIN_VALUE;
}
}

protected final void initWPESJ(String s) {
if (!s.trim().isEmpty()) {
WPESJ = Integer.parseInt(s);
} else {
WPESJ = Integer.MIN_VALUE;
}
}

protected final void initWPESJE(String s) {
if (!s.trim().isEmpty()) {
WPESJE = Byte.parseByte(s);
} else {
WPESJE = Byte.MIN_VALUE;
}
}

protected final void initWPESJL(String s) {
if (!s.trim().isEmpty()) {
WPESJL = Short.parseShort(s);
} else {
WPESJL = Short.MIN_VALUE;
}
}

protected final void initWPESJM(String s) {
if (!s.trim().isEmpty()) {
WPESJM = Short.parseShort(s);
} else {
WPESJM = Short.MIN_VALUE;
}
}

protected final void initWPESJR(String s) {
if (!s.trim().isEmpty()) {
WPESJR = Byte.parseByte(s);
} else {
WPESJR = Byte.MIN_VALUE;
}
}

protected final void initWPESJU(String s) {
if (!s.trim().isEmpty()) {
WPESJU = Short.parseShort(s);
} else {
WPESJU = Short.MIN_VALUE;
}
}

protected final void initWPESP(String s) {
if (!s.trim().isEmpty()) {
WPESP = Byte.parseByte(s);
} else {
WPESP = Byte.MIN_VALUE;
}
}

protected final void initWPEST(String s) {
if (!s.trim().isEmpty()) {
WPEST = Byte.parseByte(s);
} else {
WPEST = Byte.MIN_VALUE;
}
}

protected final void initWPEVER(String s) {
if (!s.trim().isEmpty()) {
WPEVER = Byte.parseByte(s);
} else {
WPEVER = Byte.MIN_VALUE;
}
}

protected final void initWPFRAS(String s) {
if (!s.trim().isEmpty()) {
WPFRAS = Byte.parseByte(s);
} else {
WPFRAS = Byte.MIN_VALUE;
}
}

protected final void initWPFSAP(String s) {
if (!s.trim().isEmpty()) {
WPFSAP = Byte.parseByte(s);
} else {
WPFSAP = Byte.MIN_VALUE;
}
}

protected final void initWPFSAV(String s) {
if (!s.trim().isEmpty()) {
WPFSAV = Byte.parseByte(s);
} else {
WPFSAV = Byte.MIN_VALUE;
}
}

protected final void initWPFSCO(String s) {
if (!s.trim().isEmpty()) {
WPFSCO = Byte.parseByte(s);
} else {
WPFSCO = Byte.MIN_VALUE;
}
}

protected final void initWPFSCP(String s) {
if (!s.trim().isEmpty()) {
WPFSCP = Byte.parseByte(s);
} else {
WPFSCP = Byte.MIN_VALUE;
}
}

protected final void initWPHJOB(String s) {
if (!s.trim().isEmpty()) {
WPHJOB = Short.parseShort(s);
} else {
WPHJOB = Short.MIN_VALUE;
}
}

protected final void initWPHLY(String s) {
if (!s.trim().isEmpty()) {
WPHLY = Byte.parseByte(s);
} else {
WPHLY = Byte.MIN_VALUE;
}
}

protected final void initWPHMSJ(String s) {
if (!s.trim().isEmpty()) {
WPHMSJ = Short.parseShort(s);
} else {
WPHMSJ = Short.MIN_VALUE;
}
}

protected final void initWPHOWE(String s) {
if (!s.trim().isEmpty()) {
WPHOWE = Byte.parseByte(s);
} else {
WPHOWE = Byte.MIN_VALUE;
}
}

protected final void initWPHOWU(String s) {
if (!s.trim().isEmpty()) {
WPHOWU = Byte.parseByte(s);
} else {
WPHOWU = Byte.MIN_VALUE;
}
}

protected final void initWPHWRK(String s) {
if (!s.trim().isEmpty()) {
WPHWRK = Short.parseShort(s);
} else {
WPHWRK = Short.MIN_VALUE;
}
}

protected final void initWPINF(String s) {
if (!s.trim().isEmpty()) {
WPINF = Byte.parseByte(s);
} else {
WPINF = Byte.MIN_VALUE;
}
}

protected final void initWPIR(String s) {
if (!s.trim().isEmpty()) {
WPIR = Byte.parseByte(s);
} else {
WPIR = Byte.MIN_VALUE;
}
}

protected final void initWPJACT(String s) {
if (!s.trim().isEmpty()) {
WPJACT = Byte.parseByte(s);
} else {
WPJACT = Byte.MIN_VALUE;
}
}

protected final void initWPJOB(String s) {
if (!s.trim().isEmpty()) {
WPJOB = Byte.parseByte(s);
} else {
WPJOB = Byte.MIN_VALUE;
}
}

protected final void initWPJOBL(String s) {
if (!s.trim().isEmpty()) {
WPJOBL = Byte.parseByte(s);
} else {
WPJOBL = Byte.MIN_VALUE;
}
}

protected final void initWPLCOM(String s) {
if (!s.trim().isEmpty()) {
WPLCOM = Byte.parseByte(s);
} else {
WPLCOM = Byte.MIN_VALUE;
}
}

protected final void initWPLCOY(String s) {
if (!s.trim().isEmpty()) {
WPLCOY = Short.parseShort(s);
} else {
WPLCOY = Short.MIN_VALUE;
}
}

protected final void initWPLNJ(String s) {
if (!s.trim().isEmpty()) {
WPLNJ = Byte.parseByte(s);
} else {
WPLNJ = Byte.MIN_VALUE;
}
}

protected final void initWPLUMP(String s) {
if (!s.trim().isEmpty()) {
WPLUMP = Double.parseDouble(s);
} else {
WPLUMP = Double.NaN;
}
}

protected final void initWPMC(String s) {
if (!s.trim().isEmpty()) {
WPMC = Byte.parseByte(s);
} else {
WPMC = Byte.MIN_VALUE;
}
}

protected final void initWPMCA(String s) {
if (!s.trim().isEmpty()) {
WPMCA = Double.parseDouble(s);
} else {
WPMCA = Double.NaN;
}
}

protected final void initWPMCAF(String s) {
if (!s.trim().isEmpty()) {
WPMCAF = Byte.parseByte(s);
} else {
WPMCAF = Byte.MIN_VALUE;
}
}

protected final void initWPMCON(String s) {
if (!s.trim().isEmpty()) {
WPMCON = Byte.parseByte(s);
} else {
WPMCON = Byte.MIN_VALUE;
}
}

protected final void initWPMEC(String s) {
if (!s.trim().isEmpty()) {
WPMEC = Byte.parseByte(s);
} else {
WPMEC = Byte.MIN_VALUE;
}
}

protected final void initWPMHI(String s) {
if (!s.trim().isEmpty()) {
WPMHI = Short.parseShort(s);
} else {
WPMHI = Short.MIN_VALUE;
}
}

protected final void initWPMMIN(String s) {
if (!s.trim().isEmpty()) {
WPMMIN = Byte.parseByte(s);
} else {
WPMMIN = Byte.MIN_VALUE;
}
}

protected final void initWPMOJ(String s) {
if (!s.trim().isEmpty()) {
WPMOJ = Byte.parseByte(s);
} else {
WPMOJ = Byte.MIN_VALUE;
}
}

protected final void initWPMREA(String s) {
if (!s.trim().isEmpty()) {
WPMREA = Byte.parseByte(s);
} else {
WPMREA = Byte.MIN_VALUE;
}
}

protected final void initWPMRRE(String s) {
if (!s.trim().isEmpty()) {
WPMRRE = Byte.parseByte(s);
} else {
WPMRRE = Byte.MIN_VALUE;
}
}

protected final void initWPNEMP(String s) {
if (!s.trim().isEmpty()) {
WPNEMP = Byte.parseByte(s);
} else {
WPNEMP = Byte.MIN_VALUE;
}
}

protected final void initWPNIC(String s) {
if (!s.trim().isEmpty()) {
WPNIC = Byte.parseByte(s);
} else {
WPNIC = Byte.MIN_VALUE;
}
}

protected final void initWPNICE(String s) {
if (!s.trim().isEmpty()) {
WPNICE = Byte.parseByte(s);
} else {
WPNICE = Byte.MIN_VALUE;
}
}

protected final void initWPNIMW(String s) {
if (!s.trim().isEmpty()) {
WPNIMW = Byte.parseByte(s);
} else {
WPNIMW = Byte.MIN_VALUE;
}
}

protected final void initWPNIRR(String s) {
if (!s.trim().isEmpty()) {
WPNIRR = Byte.parseByte(s);
} else {
WPNIRR = Byte.MIN_VALUE;
}
}

protected final void initWPNOE(String s) {
if (!s.trim().isEmpty()) {
WPNOE = Byte.parseByte(s);
} else {
WPNOE = Byte.MIN_VALUE;
}
}

protected final void initWPNRA(String s) {
if (!s.trim().isEmpty()) {
WPNRA = Byte.parseByte(s);
} else {
WPNRA = Byte.MIN_VALUE;
}
}

protected final void initWPOTP(String s) {
if (!s.trim().isEmpty()) {
WPOTP = Byte.parseByte(s);
} else {
WPOTP = Byte.MIN_VALUE;
}
}

protected final void initWPPAY(String s) {
if (!s.trim().isEmpty()) {
WPPAY = Byte.parseByte(s);
} else {
WPPAY = Byte.MIN_VALUE;
}
}

protected final void initWPPAYA(String s) {
if (!s.trim().isEmpty()) {
WPPAYA = Byte.parseByte(s);
} else {
WPPAYA = Byte.MIN_VALUE;
}
}

protected final void initWPPCON(String s) {
if (!s.trim().isEmpty()) {
WPPCON = Byte.parseByte(s);
} else {
WPPCON = Byte.MIN_VALUE;
}
}

protected final void initWPPENB(String s) {
if (!s.trim().isEmpty()) {
WPPENB = Double.parseDouble(s);
} else {
WPPENB = Double.NaN;
}
}

protected final void initWPPERC(String s) {
if (!s.trim().isEmpty()) {
WPPERC = Byte.parseByte(s);
} else {
WPPERC = Byte.MIN_VALUE;
}
}

protected final void initWPPERI(String s) {
if (!s.trim().isEmpty()) {
WPPERI = Byte.parseByte(s);
} else {
WPPERI = Byte.MIN_VALUE;
}
}

protected final void initWPPFVA(String s) {
if (!s.trim().isEmpty()) {
WPPFVA = Double.parseDouble(s);
} else {
WPPFVA = Double.NaN;
}
}

protected final void initWPPHI(String s) {
if (!s.trim().isEmpty()) {
WPPHI = Byte.parseByte(s);
} else {
WPPHI = Byte.MIN_VALUE;
}
}

protected final void initWPPL(String s) {
if (!s.trim().isEmpty()) {
WPPL = Byte.parseByte(s);
} else {
WPPL = Byte.MIN_VALUE;
}
}

protected final void initWPPLP(String s) {
if (!s.trim().isEmpty()) {
WPPLP = Byte.parseByte(s);
} else {
WPPLP = Byte.MIN_VALUE;
}
}

protected final void initWPPLPH(String s) {
if (!s.trim().isEmpty()) {
WPPLPH = Byte.parseByte(s);
} else {
WPPLPH = Byte.MIN_VALUE;
}
}

protected final void initWPPP_BU_F(String s) {
if (!s.trim().isEmpty()) {
WPPP_BU_F = Byte.parseByte(s);
} else {
WPPP_BU_F = Byte.MIN_VALUE;
}
}

protected final void initWPPP_BU_I(String s) {
if (!s.trim().isEmpty()) {
WPPP_BU_I = Double.parseDouble(s);
} else {
WPPP_BU_I = Double.NaN;
}
}

protected final void initWPPP_BU_O(String s) {
if (!s.trim().isEmpty()) {
WPPP_BU_O = Short.parseShort(s);
} else {
WPPP_BU_O = Short.MIN_VALUE;
}
}

protected final void initWPPP_BU_T(String s) {
if (!s.trim().isEmpty()) {
WPPP_BU_T = Short.parseShort(s);
} else {
WPPP_BU_T = Short.MIN_VALUE;
}
}

protected final void initWPPP_P_F(String s) {
if (!s.trim().isEmpty()) {
WPPP_P_F = Byte.parseByte(s);
} else {
WPPP_P_F = Byte.MIN_VALUE;
}
}

protected final void initWPPP_P_I(String s) {
if (!s.trim().isEmpty()) {
WPPP_P_I = Double.parseDouble(s);
} else {
WPPP_P_I = Double.NaN;
}
}

protected final void initWPPP_P_O(String s) {
if (!s.trim().isEmpty()) {
WPPP_P_O = Short.parseShort(s);
} else {
WPPP_P_O = Short.MIN_VALUE;
}
}

protected final void initWPPP_P_T(String s) {
if (!s.trim().isEmpty()) {
WPPP_P_T = Short.parseShort(s);
} else {
WPPP_P_T = Short.MIN_VALUE;
}
}

protected final void initWPPP_R_F(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
WPPP_R_F = false;
}
}

protected final void initWPPP_R_I(String s) {
if (!s.trim().isEmpty()) {
WPPP_R_I = Double.parseDouble(s);
} else {
WPPP_R_I = Double.NaN;
}
}

protected final void initWPPP_R_O(String s) {
if (!s.trim().isEmpty()) {
WPPP_R_O = Short.parseShort(s);
} else {
WPPP_R_O = Short.MIN_VALUE;
}
}

protected final void initWPPP_R_T(String s) {
if (!s.trim().isEmpty()) {
WPPP_R_T = Short.parseShort(s);
} else {
WPPP_R_T = Short.MIN_VALUE;
}
}

protected final void initWPPROF(String s) {
if (!s.trim().isEmpty()) {
WPPROF = Integer.parseInt(s);
} else {
WPPROF = Integer.MIN_VALUE;
}
}

protected final void initWPPSAL(String s) {
if (!s.trim().isEmpty()) {
WPPSAL = Byte.parseByte(s);
} else {
WPPSAL = Byte.MIN_VALUE;
}
}

protected final void initWPPTOP(String s) {
if (!s.trim().isEmpty()) {
WPPTOP = Byte.parseByte(s);
} else {
WPPTOP = Byte.MIN_VALUE;
}
}

protected final void initWPPTP(String s) {
if (!s.trim().isEmpty()) {
WPPTP = Byte.parseByte(s);
} else {
WPPTP = Byte.MIN_VALUE;
}
}

protected final void initWPPYR(String s) {
if (!s.trim().isEmpty()) {
WPPYR = Double.parseDouble(s);
} else {
WPPYR = Double.NaN;
}
}

protected final void initWPRAEM(String s) {
if (!s.trim().isEmpty()) {
WPRAEM = Byte.parseByte(s);
} else {
WPRAEM = Byte.MIN_VALUE;
}
}

protected final void initWPRAEY(String s) {
if (!s.trim().isEmpty()) {
WPRAEY = Short.parseShort(s);
} else {
WPRAEY = Short.MIN_VALUE;
}
}

protected final void initWPRAGE(String s) {
if (!s.trim().isEmpty()) {
WPRAGE = Byte.parseByte(s);
} else {
WPRAGE = Byte.MIN_VALUE;
}
}

protected final void initWPRAIM(String s) {
if (!s.trim().isEmpty()) {
WPRAIM = Byte.parseByte(s);
} else {
WPRAIM = Byte.MIN_VALUE;
}
}

protected final void initWPRAIR(String s) {
if (!s.trim().isEmpty()) {
WPRAIR = Short.parseShort(s);
} else {
WPRAIR = Short.MIN_VALUE;
}
}

protected final void initWPRCON(String s) {
if (!s.trim().isEmpty()) {
WPRCON = Byte.parseByte(s);
} else {
WPRCON = Byte.MIN_VALUE;
}
}

protected final void initWPREC(String s) {
if (!s.trim().isEmpty()) {
WPREC = Byte.parseByte(s);
} else {
WPREC = Byte.MIN_VALUE;
}
}

protected final void initWPSAL(String s) {
if (!s.trim().isEmpty()) {
WPSAL = Byte.parseByte(s);
} else {
WPSAL = Byte.MIN_VALUE;
}
}

protected final void initWPSLIP(String s) {
if (!s.trim().isEmpty()) {
WPSLIP = Byte.parseByte(s);
} else {
WPSLIP = Byte.MIN_VALUE;
}
}

protected final void initWPSPAY(String s) {
if (!s.trim().isEmpty()) {
WPSPAY = Byte.parseByte(s);
} else {
WPSPAY = Byte.MIN_VALUE;
}
}

protected final void initWPSTJ(String s) {
if (!s.trim().isEmpty()) {
WPSTJ = Byte.parseByte(s);
} else {
WPSTJ = Byte.MIN_VALUE;
}
}

protected final void initWPSUP(String s) {
if (!s.trim().isEmpty()) {
WPSUP = Byte.parseByte(s);
} else {
WPSUP = Byte.MIN_VALUE;
}
}

protected final void initWPTAW(String s) {
if (!s.trim().isEmpty()) {
WPTAW = Byte.parseByte(s);
} else {
WPTAW = Byte.MIN_VALUE;
}
}

protected final void initWPTAX(String s) {
if (!s.trim().isEmpty()) {
WPTAX = Byte.parseByte(s);
} else {
WPTAX = Byte.MIN_VALUE;
}
}

protected final void initWPTHL(String s) {
if (!s.trim().isEmpty()) {
WPTHL = Byte.parseByte(s);
} else {
WPTHL = Byte.MIN_VALUE;
}
}

protected final void initWPTHP(String s) {
if (!s.trim().isEmpty()) {
WPTHP = Integer.parseInt(s);
} else {
WPTHP = Integer.MIN_VALUE;
}
}

protected final void initWPUP(String s) {
if (!s.trim().isEmpty()) {
WPUP = Byte.parseByte(s);
} else {
WPUP = Byte.MIN_VALUE;
}
}

protected final void initWPUPA(String s) {
if (!s.trim().isEmpty()) {
WPUPA = Integer.parseInt(s);
} else {
WPUPA = Integer.MIN_VALUE;
}
}

protected final void initWPVBUS(String s) {
if (!s.trim().isEmpty()) {
WPVBUS = Integer.parseInt(s);
} else {
WPVBUS = Integer.MIN_VALUE;
}
}

protected final void initWPVW(String s) {
if (!s.trim().isEmpty()) {
WPVW = Byte.parseByte(s);
} else {
WPVW = Byte.MIN_VALUE;
}
}

protected final void initWPWKR(String s) {
if (!s.trim().isEmpty()) {
WPWKR = Byte.parseByte(s);
} else {
WPWKR = Byte.MIN_VALUE;
}
}

protected final void initWPWLY(String s) {
if (!s.trim().isEmpty()) {
WPWLY = Byte.parseByte(s);
} else {
WPWLY = Byte.MIN_VALUE;
}
}

protected final void initWPWLYM(String s) {
if (!s.trim().isEmpty()) {
WPWLYM = Byte.parseByte(s);
} else {
WPWLYM = Byte.MIN_VALUE;
}
}

protected final void initWPWLYY(String s) {
if (!s.trim().isEmpty()) {
WPWLYY = Integer.parseInt(s);
} else {
WPWLYY = Integer.MIN_VALUE;
}
}

protected final void initWPYAER(String s) {
if (!s.trim().isEmpty()) {
WPYAER = Byte.parseByte(s);
} else {
WPYAER = Byte.MIN_VALUE;
}
}

protected final void initWPYBS(String s) {
if (!s.trim().isEmpty()) {
WPYBS = Byte.parseByte(s);
} else {
WPYBS = Byte.MIN_VALUE;
}
}

protected final void initWPYCA(String s) {
if (!s.trim().isEmpty()) {
WPYCA = Double.parseDouble(s);
} else {
WPYCA = Double.NaN;
}
}

protected final void initWPYCAT(String s) {
if (!s.trim().isEmpty()) {
WPYCAT = Byte.parseByte(s);
} else {
WPYCAT = Byte.MIN_VALUE;
}
}

protected final void initWSELFD(String s) {
if (!s.trim().isEmpty()) {
WSELFD = Byte.parseByte(s);
} else {
WSELFD = Byte.MIN_VALUE;
}
}

protected final void initWSELFD_P(String s) {
if (!s.trim().isEmpty()) {
WSELFD_P = Byte.parseByte(s);
} else {
WSELFD_P = Byte.MIN_VALUE;
}
}

protected final void initXCOUPID(String s) {
if (!s.trim().isEmpty()) {
XCOUPID = Integer.parseInt(s);
} else {
XCOUPID = Integer.MIN_VALUE;
}
}

protected final void initXCOUPID_INST(String s) {
if (!s.trim().isEmpty()) {
XCOUPID_INST = Integer.parseInt(s);
} else {
XCOUPID_INST = Integer.MIN_VALUE;
}
}

protected final void initYQ10_BU_F(String s) {
if (!s.trim().isEmpty()) {
YQ10_BU_F = Byte.parseByte(s);
} else {
YQ10_BU_F = Byte.MIN_VALUE;
}
}

protected final void initYQ10_BU_S(String s) {
if (!s.trim().isEmpty()) {
YQ10_BU_S = Byte.parseByte(s);
} else {
YQ10_BU_S = Byte.MIN_VALUE;
}
}

protected final void initYQ5_BU_F(String s) {
if (!s.trim().isEmpty()) {
YQ5_BU_F = Byte.parseByte(s);
} else {
YQ5_BU_F = Byte.MIN_VALUE;
}
}

protected final void initYQ5_BU_S(String s) {
if (!s.trim().isEmpty()) {
YQ5_BU_S = Byte.parseByte(s);
} else {
YQ5_BU_S = Byte.MIN_VALUE;
}
}

public byte getAGE() {
return AGE;
}

public byte getAGEBUCH1() {
return AGEBUCH1;
}

public byte getAGEBUCH2() {
return AGEBUCH2;
}

public byte getAGEBUCH3() {
return AGEBUCH3;
}

public byte getAGEBUCH4() {
return AGEBUCH4;
}

public byte getAGEBUCH5() {
return AGEBUCH5;
}

public boolean getAGEBUCH6() {
return AGEBUCH6;
}

public boolean getAGEBUCH7() {
return AGEBUCH7;
}

public boolean getAGEBUCH8() {
return AGEBUCH8;
}

public byte getAGEBUHEAD() {
return AGEBUHEAD;
}

public byte getAGEBUSP() {
return AGEBUSP;
}

public byte getAGEG10() {
return AGEG10;
}

public byte getAGEG10_BU() {
return AGEG10_BU;
}

public byte getAGEG3() {
return AGEG3;
}

public byte getAGEG3_BU() {
return AGEG3_BU;
}

public byte getAGEG5() {
return AGEG5;
}

public byte getAGEG5_BU() {
return AGEG5_BU;
}

public byte getAGEG7() {
return AGEG7;
}

public byte getAGEG7_BU() {
return AGEG7_BU;
}

public byte getAGEHHCH1() {
return AGEHHCH1;
}

public byte getAGEHHCH2() {
return AGEHHCH2;
}

public byte getAGEHHCH3() {
return AGEHHCH3;
}

public byte getAGEHHCH4() {
return AGEHHCH4;
}

public byte getAGEHHCH5() {
return AGEHHCH5;
}

public byte getAGEHHCH6() {
return AGEHHCH6;
}

public boolean getAGEHHCH7() {
return AGEHHCH7;
}

public boolean getAGEHHCH8() {
return AGEHHCH8;
}

public byte getAGEHHLDR1() {
return AGEHHLDR1;
}

public byte getAGEHHLDR2() {
return AGEHHLDR2;
}

public byte getAGEHHLDR3() {
return AGEHHLDR3;
}

public byte getAGEHHLDR4() {
return AGEHHLDR4;
}

public byte getAGEHOH() {
return AGEHOH;
}

public byte getAGE_P() {
return AGE_P;
}

public byte getANIN_P_F() {
return ANIN_P_F;
}

public double getANIN_P_I() {
return ANIN_P_I;
}

public short getANIN_P_O() {
return ANIN_P_O;
}

public short getANIN_P_T() {
return ANIN_P_T;
}

public byte getANIN_R_F() {
return ANIN_R_F;
}

public double getANIN_R_I() {
return ANIN_R_I;
}

public short getANIN_R_O() {
return ANIN_R_O;
}

public short getANIN_R_T() {
return ANIN_R_T;
}

public byte getASSINC_BU_F() {
return ASSINC_BU_F;
}

public short getASSINC_BU_NI2() {
return ASSINC_BU_NI2;
}

public short getASSINC_BU_NI3() {
return ASSINC_BU_NI3;
}

public short getASSINC_BU_NI4() {
return ASSINC_BU_NI4;
}

public double getASSINC_BU_S() {
return ASSINC_BU_S;
}

public short getASSINC_BU_T() {
return ASSINC_BU_T;
}

public byte getATTALL_P_F() {
return ATTALL_P_F;
}

public double getATTALL_P_I() {
return ATTALL_P_I;
}

public short getATTALL_P_O() {
return ATTALL_P_O;
}

public short getATTALL_P_T() {
return ATTALL_P_T;
}

public byte getATTALL_R_F() {
return ATTALL_R_F;
}

public double getATTALL_R_I() {
return ATTALL_R_I;
}

public short getATTALL_R_O() {
return ATTALL_R_O;
}

public short getATTALL_R_T() {
return ATTALL_R_T;
}

public byte getBENINC_BU_F() {
return BENINC_BU_F;
}

public short getBENINC_BU_NI2() {
return BENINC_BU_NI2;
}

public short getBENINC_BU_NI3() {
return BENINC_BU_NI3;
}

public short getBENINC_BU_NI4() {
return BENINC_BU_NI4;
}

public double getBENINC_BU_S() {
return BENINC_BU_S;
}

public short getBENINC_BU_T() {
return BENINC_BU_T;
}

public byte getBENINC_P_F() {
return BENINC_P_F;
}

public short getBENINC_P_NI2() {
return BENINC_P_NI2;
}

public short getBENINC_P_NI3() {
return BENINC_P_NI3;
}

public short getBENINC_P_NI4() {
return BENINC_P_NI4;
}

public double getBENINC_P_S() {
return BENINC_P_S;
}

public short getBENINC_P_T() {
return BENINC_P_T;
}

public byte getBENINC_R_F() {
return BENINC_R_F;
}

public short getBENINC_R_NI2() {
return BENINC_R_NI2;
}

public short getBENINC_R_NI3() {
return BENINC_R_NI3;
}

public short getBENINC_R_NI4() {
return BENINC_R_NI4;
}

public double getBENINC_R_S() {
return BENINC_R_S;
}

public short getBENINC_R_T() {
return BENINC_R_T;
}

public byte getBEQUESTGT0() {
return BEQUESTGT0;
}

public byte getBEQUESTGT0B() {
return BEQUESTGT0B;
}

public byte getBEQUESTGT150() {
return BEQUESTGT150;
}

public byte getBEQUESTGT150B() {
return BEQUESTGT150B;
}

public byte getBEQUESTGT50() {
return BEQUESTGT50;
}

public byte getBEQUESTGT50B() {
return BEQUESTGT50B;
}

public byte getBONDSI_BU_F() {
return BONDSI_BU_F;
}

public double getBONDSI_BU_I() {
return BONDSI_BU_I;
}

public short getBONDSI_BU_O() {
return BONDSI_BU_O;
}

public short getBONDSI_BU_T() {
return BONDSI_BU_T;
}

public byte getBONDS_BU_F() {
return BONDS_BU_F;
}

public int getBONDS_BU_I() {
return BONDS_BU_I;
}

public short getBONDS_BU_O() {
return BONDS_BU_O;
}

public short getBONDS_BU_T() {
return BONDS_BU_T;
}

public double getBUEQ() {
return BUEQ;
}

public boolean getBUHEAD() {
return BUHEAD;
}

public byte getBUNO() {
return BUNO;
}

public byte getBUSV_BU_F() {
return BUSV_BU_F;
}

public double getBUSV_BU_I() {
return BUSV_BU_I;
}

public short getBUSV_BU_O() {
return BUSV_BU_O;
}

public short getBUSV_BU_T() {
return BUSV_BU_T;
}

public byte getBUSV_P_F() {
return BUSV_P_F;
}

public double getBUSV_P_I() {
return BUSV_P_I;
}

public short getBUSV_P_O() {
return BUSV_P_O;
}

public short getBUSV_P_T() {
return BUSV_P_T;
}

public boolean getBUSV_R_F() {
return BUSV_R_F;
}

public double getBUSV_R_I() {
return BUSV_R_I;
}

public short getBUSV_R_O() {
return BUSV_R_O;
}

public short getBUSV_R_T() {
return BUSV_R_T;
}

public byte getBUTYPE() {
return BUTYPE;
}

public byte getCASHISA_BU_F() {
return CASHISA_BU_F;
}

public int getCASHISA_BU_I() {
return CASHISA_BU_I;
}

public short getCASHISA_BU_O() {
return CASHISA_BU_O;
}

public short getCASHISA_BU_T() {
return CASHISA_BU_T;
}

public byte getCB_P_F() {
return CB_P_F;
}

public double getCB_P_I() {
return CB_P_I;
}

public short getCB_P_O() {
return CB_P_O;
}

public short getCB_P_T() {
return CB_P_T;
}

public byte getCB_R_F() {
return CB_R_F;
}

public double getCB_R_I() {
return CB_R_I;
}

public short getCB_R_O() {
return CB_R_O;
}

public short getCB_R_T() {
return CB_R_T;
}

public byte getCCARD_BU_F() {
return CCARD_BU_F;
}

public int getCCARD_BU_I() {
return CCARD_BU_I;
}

public short getCCARD_BU_O() {
return CCARD_BU_O;
}

public short getCCARD_BU_T() {
return CCARD_BU_T;
}

public byte getCESD_NA() {
return CESD_NA;
}

public byte getCESD_SC() {
return CESD_SC;
}

public byte getCFDATD() {
return CFDATD;
}

public byte getCFDATM() {
return CFDATM;
}

public byte getCFDATY() {
return CFDATY;
}

public byte getCFDAY() {
return CFDAY;
}

public byte getCFDSCR() {
return CFDSCR;
}

public byte getCFIMP() {
return CFIMP;
}

public byte getCFLISD() {
return CFLISD;
}

public byte getCFLISEN() {
return CFLISEN;
}

public byte getCFTEST() {
return CFTEST;
}

public byte getCFWRDS() {
return CFWRDS;
}

public byte getCHAGE1() {
return CHAGE1;
}

public byte getCHAGE10() {
return CHAGE10;
}

public byte getCHAGE11() {
return CHAGE11;
}

public byte getCHAGE12() {
return CHAGE12;
}

public boolean getCHAGE13() {
return CHAGE13;
}

public boolean getCHAGE14() {
return CHAGE14;
}

public boolean getCHAGE15() {
return CHAGE15;
}

public boolean getCHAGE16() {
return CHAGE16;
}

public byte getCHAGE2() {
return CHAGE2;
}

public byte getCHAGE3() {
return CHAGE3;
}

public byte getCHAGE4() {
return CHAGE4;
}

public byte getCHAGE5() {
return CHAGE5;
}

public byte getCHAGE6() {
return CHAGE6;
}

public byte getCHAGE7() {
return CHAGE7;
}

public byte getCHAGE8() {
return CHAGE8;
}

public byte getCHAGE9() {
return CHAGE9;
}

public byte getCHOUTHH() {
return CHOUTHH;
}

public byte getCHSEX1() {
return CHSEX1;
}

public byte getCHSEX10() {
return CHSEX10;
}

public byte getCHSEX11() {
return CHSEX11;
}

public boolean getCHSEX12() {
return CHSEX12;
}

public boolean getCHSEX13() {
return CHSEX13;
}

public boolean getCHSEX14() {
return CHSEX14;
}

public boolean getCHSEX15() {
return CHSEX15;
}

public boolean getCHSEX16() {
return CHSEX16;
}

public byte getCHSEX2() {
return CHSEX2;
}

public byte getCHSEX3() {
return CHSEX3;
}

public byte getCHSEX4() {
return CHSEX4;
}

public byte getCHSEX5() {
return CHSEX5;
}

public byte getCHSEX6() {
return CHSEX6;
}

public byte getCHSEX7() {
return CHSEX7;
}

public byte getCHSEX8() {
return CHSEX8;
}

public byte getCHSEX9() {
return CHSEX9;
}

public byte getCHSTAT1() {
return CHSTAT1;
}

public byte getCHSTAT10() {
return CHSTAT10;
}

public boolean getCHSTAT11() {
return CHSTAT11;
}

public byte getCHSTAT12() {
return CHSTAT12;
}

public boolean getCHSTAT13() {
return CHSTAT13;
}

public boolean getCHSTAT14() {
return CHSTAT14;
}

public boolean getCHSTAT15() {
return CHSTAT15;
}

public boolean getCHSTAT16() {
return CHSTAT16;
}

public byte getCHSTAT2() {
return CHSTAT2;
}

public byte getCHSTAT3() {
return CHSTAT3;
}

public byte getCHSTAT4() {
return CHSTAT4;
}

public byte getCHSTAT5() {
return CHSTAT5;
}

public byte getCHSTAT6() {
return CHSTAT6;
}

public byte getCHSTAT7() {
return CHSTAT7;
}

public byte getCHSTAT8() {
return CHSTAT8;
}

public byte getCHSTAT9() {
return CHSTAT9;
}

public byte getCHTYPE1() {
return CHTYPE1;
}

public byte getCHTYPE10() {
return CHTYPE10;
}

public byte getCHTYPE11() {
return CHTYPE11;
}

public byte getCHTYPE12() {
return CHTYPE12;
}

public byte getCHTYPE13() {
return CHTYPE13;
}

public boolean getCHTYPE14() {
return CHTYPE14;
}

public boolean getCHTYPE15() {
return CHTYPE15;
}

public boolean getCHTYPE16() {
return CHTYPE16;
}

public byte getCHTYPE2() {
return CHTYPE2;
}

public byte getCHTYPE3() {
return CHTYPE3;
}

public byte getCHTYPE4() {
return CHTYPE4;
}

public byte getCHTYPE5() {
return CHTYPE5;
}

public byte getCHTYPE6() {
return CHTYPE6;
}

public byte getCHTYPE7() {
return CHTYPE7;
}

public byte getCHTYPE8() {
return CHTYPE8;
}

public byte getCHTYPE9() {
return CHTYPE9;
}

public double getCLOTHESL() {
return CLOTHESL;
}

public byte getCLOTHEST() {
return CLOTHEST;
}

public double getCLOTHESU() {
return CLOTHESU;
}

public double getCOALL() {
return COALL;
}

public byte getCOALT() {
return COALT;
}

public double getCOALU() {
return COALU;
}

public short getCOUPID() {
return COUPID;
}

public short getCOUPID_INST() {
return COUPID_INST;
}

public boolean getCOUPLE() {
return COUPLE;
}

public byte getCPID() {
return CPID;
}

public byte getDEBT_BU_F() {
return DEBT_BU_F;
}

public short getDEBT_BU_NI2() {
return DEBT_BU_NI2;
}

public short getDEBT_BU_NI3() {
return DEBT_BU_NI3;
}

public short getDEBT_BU_NI4() {
return DEBT_BU_NI4;
}

public int getDEBT_BU_S() {
return DEBT_BU_S;
}

public short getDEBT_BU_T() {
return DEBT_BU_T;
}

public byte getDHC() {
return DHC;
}

public byte getDHC10() {
return DHC10;
}

public byte getDHC11() {
return DHC11;
}

public byte getDHC12() {
return DHC12;
}

public byte getDHC13() {
return DHC13;
}

public byte getDHC2() {
return DHC2;
}

public byte getDHC3() {
return DHC3;
}

public byte getDHC4() {
return DHC4;
}

public byte getDHC5() {
return DHC5;
}

public byte getDHC6() {
return DHC6;
}

public byte getDHC7() {
return DHC7;
}

public byte getDHC8() {
return DHC8;
}

public byte getDHC9() {
return DHC9;
}

public byte getDHCAG() {
return DHCAG;
}

public byte getDHCAG10() {
return DHCAG10;
}

public byte getDHCAG11() {
return DHCAG11;
}

public byte getDHCAG12() {
return DHCAG12;
}

public byte getDHCAG13() {
return DHCAG13;
}

public byte getDHCAG2() {
return DHCAG2;
}

public byte getDHCAG3() {
return DHCAG3;
}

public byte getDHCAG4() {
return DHCAG4;
}

public byte getDHCAG5() {
return DHCAG5;
}

public byte getDHCAG6() {
return DHCAG6;
}

public byte getDHCAG7() {
return DHCAG7;
}

public byte getDHCAG8() {
return DHCAG8;
}

public byte getDHCAG9() {
return DHCAG9;
}

public byte getDHCR01() {
return DHCR01;
}

public byte getDHCR02() {
return DHCR02;
}

public byte getDHCR03() {
return DHCR03;
}

public byte getDHCR04() {
return DHCR04;
}

public byte getDHCR05() {
return DHCR05;
}

public byte getDHCR06() {
return DHCR06;
}

public byte getDHCR07() {
return DHCR07;
}

public byte getDHCR100() {
return DHCR100;
}

public byte getDHCR101() {
return DHCR101;
}

public byte getDHCR102() {
return DHCR102;
}

public boolean getDHCR103() {
return DHCR103;
}

public byte getDHCR113() {
return DHCR113;
}

public byte getDHCR114() {
return DHCR114;
}

public byte getDHCR115() {
return DHCR115;
}

public byte getDHCR116() {
return DHCR116;
}

public boolean getDHCR117() {
return DHCR117;
}

public byte getDHCR129() {
return DHCR129;
}

public byte getDHCR130() {
return DHCR130;
}

public byte getDHCR131() {
return DHCR131;
}

public byte getDHCR132() {
return DHCR132;
}

public boolean getDHCR133() {
return DHCR133;
}

public byte getDHCR145() {
return DHCR145;
}

public byte getDHCR146() {
return DHCR146;
}

public byte getDHCR161() {
return DHCR161;
}

public byte getDHCR162() {
return DHCR162;
}

public byte getDHCR17() {
return DHCR17;
}

public byte getDHCR177() {
return DHCR177;
}

public byte getDHCR18() {
return DHCR18;
}

public byte getDHCR19() {
return DHCR19;
}

public byte getDHCR193() {
return DHCR193;
}

public byte getDHCR20() {
return DHCR20;
}

public byte getDHCR21() {
return DHCR21;
}

public byte getDHCR22() {
return DHCR22;
}

public byte getDHCR23() {
return DHCR23;
}

public byte getDHCR33() {
return DHCR33;
}

public byte getDHCR34() {
return DHCR34;
}

public byte getDHCR35() {
return DHCR35;
}

public byte getDHCR36() {
return DHCR36;
}

public byte getDHCR37() {
return DHCR37;
}

public byte getDHCR38() {
return DHCR38;
}

public byte getDHCR39() {
return DHCR39;
}

public byte getDHCR49() {
return DHCR49;
}

public byte getDHCR50() {
return DHCR50;
}

public byte getDHCR51() {
return DHCR51;
}

public byte getDHCR52() {
return DHCR52;
}

public byte getDHCR53() {
return DHCR53;
}

public byte getDHCR54() {
return DHCR54;
}

public byte getDHCR55() {
return DHCR55;
}

public byte getDHCR65() {
return DHCR65;
}

public byte getDHCR66() {
return DHCR66;
}

public byte getDHCR67() {
return DHCR67;
}

public byte getDHCR68() {
return DHCR68;
}

public byte getDHCR69() {
return DHCR69;
}

public byte getDHCR70() {
return DHCR70;
}

public byte getDHCR71() {
return DHCR71;
}

public byte getDHCR81() {
return DHCR81;
}

public byte getDHCR82() {
return DHCR82;
}

public byte getDHCR83() {
return DHCR83;
}

public byte getDHCR84() {
return DHCR84;
}

public byte getDHCR85() {
return DHCR85;
}

public byte getDHCR86() {
return DHCR86;
}

public byte getDHCR87() {
return DHCR87;
}

public byte getDHCR97() {
return DHCR97;
}

public byte getDHCR98() {
return DHCR98;
}

public byte getDHCR99() {
return DHCR99;
}

public byte getDHCS() {
return DHCS;
}

public byte getDHCS10() {
return DHCS10;
}

public byte getDHCS11() {
return DHCS11;
}

public byte getDHCS12() {
return DHCS12;
}

public byte getDHCS13() {
return DHCS13;
}

public byte getDHCS2() {
return DHCS2;
}

public byte getDHCS3() {
return DHCS3;
}

public byte getDHCS4() {
return DHCS4;
}

public byte getDHCS5() {
return DHCS5;
}

public byte getDHCS6() {
return DHCS6;
}

public byte getDHCS7() {
return DHCS7;
}

public byte getDHCS8() {
return DHCS8;
}

public byte getDHCS9() {
return DHCS9;
}

public byte getDHPA() {
return DHPA;
}

public byte getDHPB() {
return DHPB;
}

public byte getDHR() {
return DHR;
}

public byte getDHR10() {
return DHR10;
}

public byte getDHR11() {
return DHR11;
}

public byte getDHR12() {
return DHR12;
}

public byte getDHR2() {
return DHR2;
}

public byte getDHR3() {
return DHR3;
}

public byte getDHR4() {
return DHR4;
}

public byte getDHR5() {
return DHR5;
}

public byte getDHR6() {
return DHR6;
}

public byte getDHR7() {
return DHR7;
}

public byte getDHR8() {
return DHR8;
}

public byte getDHR9() {
return DHR9;
}

public byte getDHSAMEH() {
return DHSAMEH;
}

public byte getDIANF() {
return DIANF;
}

public byte getDIANM() {
return DIANM;
}

public byte getDICDNF() {
return DICDNF;
}

public byte getDICDNM() {
return DICDNM;
}

public boolean getDIED_P() {
return DIED_P;
}

public byte getDIFAD() {
return DIFAD;
}

public byte getDIFJOB() {
return DIFJOB;
}

public byte getDIFJOBM() {
return DIFJOBM;
}

public byte getDIGNMY() {
return DIGNMY;
}

public byte getDIGRAN() {
return DIGRAN;
}

public byte getDIINT() {
return DIINT;
}

public byte getDIKLIV() {
return DIKLIV;
}

public byte getDIKLIVM() {
return DIKLIVM;
}

public byte getDIMAD() {
return DIMAD;
}

public byte getDINFA() {
return DINFA;
}

public byte getDINMA() {
return DINMA;
}

public byte getDIPRE() {
return DIPRE;
}

public byte getDISIB() {
return DISIB;
}

public byte getDLA_P_F() {
return DLA_P_F;
}

public double getDLA_P_I() {
return DLA_P_I;
}

public short getDLA_P_O() {
return DLA_P_O;
}

public short getDLA_P_T() {
return DLA_P_T;
}

public byte getDLA_R_F() {
return DLA_R_F;
}

public double getDLA_R_I() {
return DLA_R_I;
}

public short getDLA_R_O() {
return DLA_R_O;
}

public short getDLA_R_T() {
return DLA_R_T;
}

public byte getECPOS() {
return ECPOS;
}

public byte getEDEND() {
return EDEND;
}

public byte getEDQUAL() {
return EDQUAL;
}

public double getELECL() {
return ELECL;
}

public byte getELECMETH() {
return ELECMETH;
}

public byte getELECT() {
return ELECT;
}

public double getELECU() {
return ELECU;
}

public byte getELSA() {
return ELSA;
}

public byte getELSA_P() {
return ELSA_P;
}

public byte getEMPINC_BU_F() {
return EMPINC_BU_F;
}

public short getEMPINC_BU_NI2() {
return EMPINC_BU_NI2;
}

public short getEMPINC_BU_NI3() {
return EMPINC_BU_NI3;
}

public short getEMPINC_BU_NI4() {
return EMPINC_BU_NI4;
}

public double getEMPINC_BU_S() {
return EMPINC_BU_S;
}

public short getEMPINC_BU_T() {
return EMPINC_BU_T;
}

public byte getEMPINC_P_F() {
return EMPINC_P_F;
}

public short getEMPINC_P_NI2() {
return EMPINC_P_NI2;
}

public short getEMPINC_P_NI3() {
return EMPINC_P_NI3;
}

public short getEMPINC_P_NI4() {
return EMPINC_P_NI4;
}

public double getEMPINC_P_S() {
return EMPINC_P_S;
}

public short getEMPINC_P_T() {
return EMPINC_P_T;
}

public boolean getEMPINC_R_F() {
return EMPINC_R_F;
}

public short getEMPINC_R_NI2() {
return EMPINC_R_NI2;
}

public short getEMPINC_R_NI3() {
return EMPINC_R_NI3;
}

public short getEMPINC_R_NI4() {
return EMPINC_R_NI4;
}

public double getEMPINC_R_S() {
return EMPINC_R_S;
}

public short getEMPINC_R_T() {
return EMPINC_R_T;
}

public byte getEQASSINC_BU_F() {
return EQASSINC_BU_F;
}

public short getEQASSINC_BU_NI2() {
return EQASSINC_BU_NI2;
}

public short getEQASSINC_BU_NI3() {
return EQASSINC_BU_NI3;
}

public short getEQASSINC_BU_NI4() {
return EQASSINC_BU_NI4;
}

public double getEQASSINC_BU_S() {
return EQASSINC_BU_S;
}

public short getEQASSINC_BU_T() {
return EQASSINC_BU_T;
}

public byte getEQBENINC_BU_F() {
return EQBENINC_BU_F;
}

public short getEQBENINC_BU_NI2() {
return EQBENINC_BU_NI2;
}

public short getEQBENINC_BU_NI3() {
return EQBENINC_BU_NI3;
}

public short getEQBENINC_BU_NI4() {
return EQBENINC_BU_NI4;
}

public double getEQBENINC_BU_S() {
return EQBENINC_BU_S;
}

public short getEQBENINC_BU_T() {
return EQBENINC_BU_T;
}

public byte getEQEMPINC_BU_F() {
return EQEMPINC_BU_F;
}

public short getEQEMPINC_BU_NI2() {
return EQEMPINC_BU_NI2;
}

public short getEQEMPINC_BU_NI3() {
return EQEMPINC_BU_NI3;
}

public short getEQEMPINC_BU_NI4() {
return EQEMPINC_BU_NI4;
}

public double getEQEMPINC_BU_S() {
return EQEMPINC_BU_S;
}

public short getEQEMPINC_BU_T() {
return EQEMPINC_BU_T;
}

public byte getEQOTHINC_BU_F() {
return EQOTHINC_BU_F;
}

public short getEQOTHINC_BU_NI2() {
return EQOTHINC_BU_NI2;
}

public short getEQOTHINC_BU_NI3() {
return EQOTHINC_BU_NI3;
}

public short getEQOTHINC_BU_NI4() {
return EQOTHINC_BU_NI4;
}

public double getEQOTHINC_BU_S() {
return EQOTHINC_BU_S;
}

public short getEQOTHINC_BU_T() {
return EQOTHINC_BU_T;
}

public byte getEQPPINC_BU_F() {
return EQPPINC_BU_F;
}

public short getEQPPINC_BU_NI2() {
return EQPPINC_BU_NI2;
}

public short getEQPPINC_BU_NI3() {
return EQPPINC_BU_NI3;
}

public short getEQPPINC_BU_NI4() {
return EQPPINC_BU_NI4;
}

public double getEQPPINC_BU_S() {
return EQPPINC_BU_S;
}

public short getEQPPINC_BU_T() {
return EQPPINC_BU_T;
}

public byte getEQSEINC_BU_F() {
return EQSEINC_BU_F;
}

public short getEQSEINC_BU_NI2() {
return EQSEINC_BU_NI2;
}

public short getEQSEINC_BU_NI3() {
return EQSEINC_BU_NI3;
}

public short getEQSEINC_BU_NI4() {
return EQSEINC_BU_NI4;
}

public double getEQSEINC_BU_S() {
return EQSEINC_BU_S;
}

public short getEQSEINC_BU_T() {
return EQSEINC_BU_T;
}

public byte getEQSPINC_BU_F() {
return EQSPINC_BU_F;
}

public short getEQSPINC_BU_NI2() {
return EQSPINC_BU_NI2;
}

public short getEQSPINC_BU_NI3() {
return EQSPINC_BU_NI3;
}

public short getEQSPINC_BU_NI4() {
return EQSPINC_BU_NI4;
}

public double getEQSPINC_BU_S() {
return EQSPINC_BU_S;
}

public short getEQSPINC_BU_T() {
return EQSPINC_BU_T;
}

public byte getEQTOTINC_BU_F() {
return EQTOTINC_BU_F;
}

public short getEQTOTINC_BU_NI2() {
return EQTOTINC_BU_NI2;
}

public short getEQTOTINC_BU_NI3() {
return EQTOTINC_BU_NI3;
}

public short getEQTOTINC_BU_NI4() {
return EQTOTINC_BU_NI4;
}

public double getEQTOTINC_BU_S() {
return EQTOTINC_BU_S;
}

public short getEQTOTINC_BU_T() {
return EQTOTINC_BU_T;
}

public byte getEVERWORK() {
return EVERWORK;
}

public byte getEXAINH() {
return EXAINH;
}

public byte getEXCAIN() {
return EXCAIN;
}

public byte getEXCIN() {
return EXCIN;
}

public byte getEXCINH() {
return EXCINH;
}

public byte getEXCPIN() {
return EXCPIN;
}

public byte getEXECNN() {
return EXECNN;
}

public byte getEXHLIM() {
return EXHLIM;
}

public byte getEXHLIMW() {
return EXHLIMW;
}

public byte getEXHLIMWB() {
return EXHLIMWB;
}

public short getEXHVA() {
return EXHVA;
}

public byte getEXHVR() {
return EXHVR;
}

public byte getEXINHE() {
return EXINHE;
}

public byte getEXLO80() {
return EXLO80;
}

public byte getEXPLIVE() {
return EXPLIVE;
}

public byte getEXPLIVE100() {
return EXPLIVE100;
}

public byte getEXPLIVE100B() {
return EXPLIVE100B;
}

public byte getEXPLIVE75() {
return EXPLIVE75;
}

public byte getEXPLIVE75B() {
return EXPLIVE75B;
}

public byte getEXPLIVE80() {
return EXPLIVE80;
}

public byte getEXPLIVE80B() {
return EXPLIVE80B;
}

public byte getEXPLIVE85() {
return EXPLIVE85;
}

public byte getEXPLIVE85B() {
return EXPLIVE85B;
}

public byte getEXPLIVE90() {
return EXPLIVE90;
}

public byte getEXPLIVE90B() {
return EXPLIVE90B;
}

public byte getEXPLIVE95() {
return EXPLIVE95;
}

public byte getEXPLIVE95B() {
return EXPLIVE95B;
}

public byte getEXPLIVEB() {
return EXPLIVEB;
}

public byte getEXPW() {
return EXPW;
}

public byte getEXRAIN() {
return EXRAIN;
}

public byte getEXRSLF() {
return EXRSLF;
}

public byte getEXWORK() {
return EXWORK;
}

public byte getEXWORK55() {
return EXWORK55;
}

public byte getEXWORK55B() {
return EXWORK55B;
}

public byte getEXWORK60() {
return EXWORK60;
}

public byte getEXWORK60B() {
return EXWORK60B;
}

public byte getEXWORK65() {
return EXWORK65;
}

public byte getEXWORK65B() {
return EXWORK65B;
}

public byte getEXWORKB() {
return EXWORKB;
}

public byte getFAGEDIED() {
return FAGEDIED;
}

public byte getFALIVE() {
return FALIVE;
}

public byte getFAMTYPE() {
return FAMTYPE;
}

public byte getFARMI_BU_F() {
return FARMI_BU_F;
}

public double getFARMI_BU_I() {
return FARMI_BU_I;
}

public short getFARMI_BU_O() {
return FARMI_BU_O;
}

public short getFARMI_BU_T() {
return FARMI_BU_T;
}

public byte getFARM_BU_F() {
return FARM_BU_F;
}

public double getFARM_BU_I() {
return FARM_BU_I;
}

public short getFARM_BU_O() {
return FARM_BU_O;
}

public short getFARM_BU_T() {
return FARM_BU_T;
}

public byte getFATHAGE() {
return FATHAGE;
}

public byte getFINDIFF() {
return FINDIFF;
}

public boolean getFIRSTBU() {
return FIRSTBU;
}

public double getFOODINL() {
return FOODINL;
}

public byte getFOODINT() {
return FOODINT;
}

public int getFOODINU() {
return FOODINU;
}

public double getFOODOUTL() {
return FOODOUTL;
}

public byte getFOODOUTT() {
return FOODOUTT;
}

public double getFOODOUTU() {
return FOODOUTU;
}

public byte getFQHELP() {
return FQHELP;
}

public byte getFQMQUA() {
return FQMQUA;
}

public short getFUID() {
return FUID;
}

public short getFUID_INST() {
return FUID_INST;
}

public byte getFUTYPE() {
return FUTYPE;
}

public byte getGALL_P_F() {
return GALL_P_F;
}

public double getGALL_P_I() {
return GALL_P_I;
}

public short getGALL_P_O() {
return GALL_P_O;
}

public short getGALL_P_T() {
return GALL_P_T;
}

public byte getGALL_R_F() {
return GALL_R_F;
}

public double getGALL_R_I() {
return GALL_R_I;
}

public short getGALL_R_O() {
return GALL_R_O;
}

public short getGALL_R_T() {
return GALL_R_T;
}

public double getGASELECL() {
return GASELECL;
}

public byte getGASELECMETH() {
return GASELECMETH;
}

public byte getGASELECT() {
return GASELECT;
}

public double getGASELECU() {
return GASELECU;
}

public double getGASL() {
return GASL;
}

public byte getGASMETH() {
return GASMETH;
}

public byte getGAST() {
return GAST;
}

public double getGASU() {
return GASU;
}

public byte getGETSHB() {
return GETSHB;
}

public String getGOR() {
return GOR;
}

public byte getGROSSFW_BU_F() {
return GROSSFW_BU_F;
}

public short getGROSSFW_BU_NI2() {
return GROSSFW_BU_NI2;
}

public short getGROSSFW_BU_NI3() {
return GROSSFW_BU_NI3;
}

public short getGROSSFW_BU_NI4() {
return GROSSFW_BU_NI4;
}

public double getGROSSFW_BU_S() {
return GROSSFW_BU_S;
}

public short getGROSSFW_BU_T() {
return GROSSFW_BU_T;
}

public boolean getGROSSHW_BU_F() {
return GROSSHW_BU_F;
}

public short getGROSSHW_BU_NI2() {
return GROSSHW_BU_NI2;
}

public short getGROSSHW_BU_NI3() {
return GROSSHW_BU_NI3;
}

public short getGROSSHW_BU_NI4() {
return GROSSHW_BU_NI4;
}

public double getGROSSHW_BU_S() {
return GROSSHW_BU_S;
}

public short getGROSSHW_BU_T() {
return GROSSHW_BU_T;
}

public double getGROSSRENTL() {
return GROSSRENTL;
}

public byte getGROSSRENTT() {
return GROSSRENTT;
}

public double getGROSSRENTU() {
return GROSSRENTU;
}

public byte getGROSSTOTNHW_BU_F() {
return GROSSTOTNHW_BU_F;
}

public short getGROSSTOTNHW_BU_NI2() {
return GROSSTOTNHW_BU_NI2;
}

public short getGROSSTOTNHW_BU_NI3() {
return GROSSTOTNHW_BU_NI3;
}

public short getGROSSTOTNHW_BU_NI4() {
return GROSSTOTNHW_BU_NI4;
}

public double getGROSSTOTNHW_BU_S() {
return GROSSTOTNHW_BU_S;
}

public short getGROSSTOTNHW_BU_T() {
return GROSSTOTNHW_BU_T;
}

public boolean getHDEBT_HH_F() {
return HDEBT_HH_F;
}

public double getHDEBT_HH_I() {
return HDEBT_HH_I;
}

public short getHDEBT_HH_O() {
return HDEBT_HH_O;
}

public short getHDEBT_HH_T() {
return HDEBT_HH_T;
}

public byte getHEACTA() {
return HEACTA;
}

public byte getHEACTB() {
return HEACTB;
}

public byte getHEACTC() {
return HEACTC;
}

public byte getHEADL96() {
return HEADL96;
}

public byte getHEADLBA() {
return HEADLBA;
}

public byte getHEADLBE() {
return HEADLBE;
}

public byte getHEADLCO() {
return HEADLCO;
}

public byte getHEADLDA() {
return HEADLDA;
}

public byte getHEADLDR() {
return HEADLDR;
}

public byte getHEADLEA() {
return HEADLEA;
}

public byte getHEADLHO() {
return HEADLHO;
}

public byte getHEADLMA() {
return HEADLMA;
}

public byte getHEADLME() {
return HEADLME;
}

public byte getHEADLMO() {
return HEADLMO;
}

public byte getHEADLPH() {
return HEADLPH;
}

public byte getHEADLPR() {
return HEADLPR;
}

public byte getHEADLSH() {
return HEADLSH;
}

public byte getHEADLWA() {
return HEADLWA;
}

public byte getHEADLWC() {
return HEADLWC;
}

public byte getHEAGA() {
return HEAGA;
}

public byte getHEAGB() {
return HEAGB;
}

public byte getHEAGC() {
return HEAGC;
}

public byte getHEAGD() {
return HEAGD;
}

public byte getHEAGE() {
return HEAGE;
}

public byte getHEAGF() {
return HEAGF;
}

public byte getHEAGI() {
return HEAGI;
}

public byte getHEAGJ() {
return HEAGJ;
}

public byte getHEAMA() {
return HEAMA;
}

public byte getHEBCK() {
return HEBCK;
}

public byte getHECANB() {
return HECANB;
}

public byte getHECAT() {
return HECAT;
}

public byte getHECIG() {
return HECIG;
}

public byte getHEEYE() {
return HEEYE;
}

public byte getHEFET() {
return HEFET;
}

public byte getHEFLA() {
return HEFLA;
}

public short getHEFLB() {
return HEFLB;
}

public byte getHEFLC() {
return HEFLC;
}

public byte getHEFRAC() {
return HEFRAC;
}

public byte getHEFRND() {
return HEFRND;
}

public byte getHEFUNC() {
return HEFUNC;
}

public byte getHEHEAR() {
return HEHEAR;
}

public byte getHEHIP() {
return HEHIP;
}

public byte getHEHRA() {
return HEHRA;
}

public byte getHEILL() {
return HEILL;
}

public byte getHEINS() {
return HEINS;
}

public byte getHEIQA() {
return HEIQA;
}

public byte getHEIQB() {
return HEIQB;
}

public byte getHEIQC() {
return HEIQC;
}

public byte getHEIQD() {
return HEIQD;
}

public byte getHEIQE() {
return HEIQE;
}

public byte getHEIQF() {
return HEIQF;
}

public byte getHEIQG() {
return HEIQG;
}

public byte getHEIQH() {
return HEIQH;
}

public byte getHEIQI() {
return HEIQI;
}

public byte getHEIQJ() {
return HEIQJ;
}

public byte getHEIQK() {
return HEIQK;
}

public byte getHEIQL() {
return HEIQL;
}

public byte getHEIQM() {
return HEIQM;
}

public byte getHEIQN() {
return HEIQN;
}

public byte getHEIQO() {
return HEIQO;
}

public byte getHEIQP() {
return HEIQP;
}

public byte getHEIQQ() {
return HEIQQ;
}

public byte getHEJI() {
return HEJI;
}

public byte getHEKNE() {
return HEKNE;
}

public byte getHELIM() {
return HELIM;
}

public byte getHELNG() {
return HELNG;
}

public byte getHEMDA() {
return HEMDA;
}

public byte getHEMDB() {
return HEMDB;
}

public byte getHEMOB96() {
return HEMOB96;
}

public byte getHEMOBCH() {
return HEMOBCH;
}

public byte getHEMOBCL() {
return HEMOBCL;
}

public byte getHEMOBCS() {
return HEMOBCS;
}

public byte getHEMOBLI() {
return HEMOBLI;
}

public byte getHEMOBPI() {
return HEMOBPI;
}

public byte getHEMOBPU() {
return HEMOBPU;
}

public byte getHEMOBRE() {
return HEMOBRE;
}

public byte getHEMOBSI() {
return HEMOBSI;
}

public byte getHEMOBST() {
return HEMOBST;
}

public byte getHEMOBWA() {
return HEMOBWA;
}

public byte getHEPAA() {
return HEPAA;
}

public byte getHEPAIN() {
return HEPAIN;
}

public byte getHEPAP() {
return HEPAP;
}

public byte getHEPBS() {
return HEPBS;
}

public byte getHEPRK() {
return HEPRK;
}

public byte getHESKA() {
return HESKA;
}

public short getHESKB() {
return HESKB;
}

public short getHESKC() {
return HESKC;
}

public byte getHESMK() {
return HESMK;
}

public byte getHESPK() {
return HESPK;
}

public byte getHETBA() {
return HETBA;
}

public short getHETBB() {
return HETBB;
}

public byte getHETBC() {
return HETBC;
}

public short getHETBD() {
return HETBD;
}

public byte getHETHK() {
return HETHK;
}

public byte getHEVSI() {
return HEVSI;
}

public byte getHEWKS() {
return HEWKS;
}

public byte getHEYRA() {
return HEYRA;
}

public byte getHEYRC() {
return HEYRC;
}

public boolean getHHANSHO() {
return HHANSHO;
}

public double getHHEQ() {
return HHEQ;
}

public byte getHHGRIDDHWORK() {
return HHGRIDDHWORK;
}

public byte getHHGRIDDHWORK_P() {
return HHGRIDDHWORK_P;
}

public short getHHID() {
return HHID;
}

public byte getHHRESP() {
return HHRESP;
}

public byte getHHTOT() {
return HHTOT;
}

public byte getHLIMWRK() {
return HLIMWRK;
}

public byte getHLIMWRKC() {
return HLIMWRKC;
}

public short getHOBA() {
return HOBA;
}

public short getHOBA2() {
return HOBA2;
}

public short getHOBA3() {
return HOBA3;
}

public short getHOBA4() {
return HOBA4;
}

public short getHOBA5() {
return HOBA5;
}

public short getHOBA6() {
return HOBA6;
}

public short getHOBA7() {
return HOBA7;
}

public short getHOBA8() {
return HOBA8;
}

public byte getHOBA9() {
return HOBA9;
}

public byte getHOBAS() {
return HOBAS;
}

public byte getHOBAS2() {
return HOBAS2;
}

public byte getHOBAS3() {
return HOBAS3;
}

public byte getHOBAS4() {
return HOBAS4;
}

public byte getHOBAS5() {
return HOBAS5;
}

public byte getHOBAS6() {
return HOBAS6;
}

public byte getHOBAS7() {
return HOBAS7;
}

public byte getHOBAS8() {
return HOBAS8;
}

public byte getHOBAS9() {
return HOBAS9;
}

public byte getHOBP() {
return HOBP;
}

public byte getHOBP2() {
return HOBP2;
}

public byte getHOBP3() {
return HOBP3;
}

public byte getHOBP4() {
return HOBP4;
}

public byte getHOBP5() {
return HOBP5;
}

public byte getHOBP6() {
return HOBP6;
}

public byte getHOBP7() {
return HOBP7;
}

public byte getHOBP8() {
return HOBP8;
}

public boolean getHOBP9() {
return HOBP9;
}

public byte getHOCENH() {
return HOCENH;
}

public byte getHODIFF() {
return HODIFF;
}

public byte getHODIFFT() {
return HODIFFT;
}

public byte getHODOC() {
return HODOC;
}

public byte getHOELI() {
return HOELI;
}

public byte getHOEVM() {
return HOEVM;
}

public byte getHOEVRE() {
return HOEVRE;
}

public short getHOFOOD() {
return HOFOOD;
}

public byte getHOFURN() {
return HOFURN;
}

public boolean getHOH() {
return HOH;
}

public boolean getHOHSP() {
return HOHSP;
}

public short getHOINCC() {
return HOINCC;
}

public byte getHOINTA() {
return HOINTA;
}

public byte getHOJOB() {
return HOJOB;
}

public byte getHOLAND() {
return HOLAND;
}

public byte getHOMEAL() {
return HOMEAL;
}

public byte getHOMEI_BU_F() {
return HOMEI_BU_F;
}

public double getHOMEI_BU_I() {
return HOMEI_BU_I;
}

public short getHOMEI_BU_O() {
return HOMEI_BU_O;
}

public short getHOMEI_BU_T() {
return HOMEI_BU_T;
}

public byte getHOME_BU_F() {
return HOME_BU_F;
}

public int getHOME_BU_I() {
return HOME_BU_I;
}

public short getHOME_BU_O() {
return HOME_BU_O;
}

public short getHOME_BU_T() {
return HOME_BU_T;
}

public byte getHOMOFT() {
return HOMOFT;
}

public short getHOMOVE() {
return HOMOVE;
}

public short getHOMOVEM() {
return HOMOVEM;
}

public int getHOMREP() {
return HOMREP;
}

public byte getHOOLD() {
return HOOLD;
}

public byte getHOOLDM() {
return HOOLDM;
}

public byte getHOORM() {
return HOORM;
}

public short getHOOUTF() {
return HOOUTF;
}

public byte getHOOUTM() {
return HOOUTM;
}

public byte getHOPART() {
return HOPART;
}

public int getHOPAY() {
return HOPAY;
}

public int getHOPAYM() {
return HOPAYM;
}

public byte getHOPERI() {
return HOPERI;
}

public byte getHOPID() {
return HOPID;
}

public short getHOREBA() {
return HOREBA;
}

public byte getHOREBP() {
return HOREBP;
}

public byte getHORENFE() {
return HORENFE;
}

public byte getHORENFL() {
return HORENFL;
}

public byte getHORENFR() {
return HORENFR;
}

public short getHORENFU() {
return HORENFU;
}

public byte getHORENME() {
return HORENME;
}

public short getHORENML() {
return HORENML;
}

public byte getHORENMR() {
return HORENMR;
}

public short getHORENMU() {
return HORENMU;
}

public byte getHORENOE() {
return HORENOE;
}

public short getHORENOL() {
return HORENOL;
}

public byte getHORENOR() {
return HORENOR;
}

public short getHORENOU() {
return HORENOU;
}

public int getHORENT() {
return HORENT;
}

public byte getHORENWE() {
return HORENWE;
}

public short getHORENWL() {
return HORENWL;
}

public byte getHORENWR() {
return HORENWR;
}

public short getHORENWU() {
return HORENWU;
}

public boolean getHORENYE() {
return HORENYE;
}

public boolean getHORENYL() {
return HORENYL;
}

public boolean getHORENYR() {
return HORENYR;
}

public boolean getHORENYU() {
return HORENYU;
}

public byte getHOROOM() {
return HOROOM;
}

public byte getHORTB() {
return HORTB;
}

public byte getHORTBE() {
return HORTBE;
}

public int getHOSELLP() {
return HOSELLP;
}

public byte getHOTENU() {
return HOTENU;
}

public byte getHOTENUN() {
return HOTENUN;
}

public short getHOURS() {
return HOURS;
}

public short getHOURS_AJ() {
return HOURS_AJ;
}

public byte getHOVAG() {
return HOVAG;
}

public byte getHOVAG10() {
return HOVAG10;
}

public byte getHOVAG2() {
return HOVAG2;
}

public byte getHOVAG3() {
return HOVAG3;
}

public byte getHOVAG4() {
return HOVAG4;
}

public byte getHOVAG5() {
return HOVAG5;
}

public byte getHOVAG6() {
return HOVAG6;
}

public byte getHOVAG7() {
return HOVAG7;
}

public byte getHOVAG8() {
return HOVAG8;
}

public byte getHOVAG9() {
return HOVAG9;
}

public byte getHOVEH() {
return HOVEH;
}

public byte getHOVW() {
return HOVW;
}

public byte getHOVW10() {
return HOVW10;
}

public byte getHOVW9() {
return HOVW9;
}

public byte getHOWHO() {
return HOWHO;
}

public short getHOYEAR() {
return HOYEAR;
}

public short getHOYEARM() {
return HOYEARM;
}

public byte getHPOPR() {
return HPOPR;
}

public byte getHRSFIRST() {
return HRSFIRST;
}

public boolean getHSVAL_HH_F() {
return HSVAL_HH_F;
}

public double getHSVAL_HH_I() {
return HSVAL_HH_I;
}

public short getHSVAL_HH_O() {
return HSVAL_HH_O;
}

public short getHSVAL_HH_T() {
return HSVAL_HH_T;
}

public short getIAA() {
return IAA;
}

public short getIAA10() {
return IAA10;
}

public boolean getIAA10FE() {
return IAA10FE;
}

public boolean getIAA10FL() {
return IAA10FL;
}

public boolean getIAA10FR() {
return IAA10FR;
}

public short getIAA10FU() {
return IAA10FU;
}

public byte getIAA10ME() {
return IAA10ME;
}

public short getIAA10ML() {
return IAA10ML;
}

public byte getIAA10MR() {
return IAA10MR;
}

public short getIAA10MU() {
return IAA10MU;
}

public byte getIAA10OE() {
return IAA10OE;
}

public short getIAA10OL() {
return IAA10OL;
}

public byte getIAA10OR() {
return IAA10OR;
}

public short getIAA10OU() {
return IAA10OU;
}

public byte getIAA10WE() {
return IAA10WE;
}

public short getIAA10WL() {
return IAA10WL;
}

public byte getIAA10WR() {
return IAA10WR;
}

public byte getIAA10WU() {
return IAA10WU;
}

public boolean getIAA10YE() {
return IAA10YE;
}

public short getIAA10YL() {
return IAA10YL;
}

public byte getIAA10YR() {
return IAA10YR;
}

public short getIAA10YU() {
return IAA10YU;
}

public short getIAA11() {
return IAA11;
}

public boolean getIAA11FE() {
return IAA11FE;
}

public short getIAA11FL() {
return IAA11FL;
}

public boolean getIAA11FR() {
return IAA11FR;
}

public short getIAA11FU() {
return IAA11FU;
}

public boolean getIAA11ME() {
return IAA11ME;
}

public short getIAA11ML() {
return IAA11ML;
}

public byte getIAA11MR() {
return IAA11MR;
}

public short getIAA11MU() {
return IAA11MU;
}

public byte getIAA11OE() {
return IAA11OE;
}

public short getIAA11OL() {
return IAA11OL;
}

public byte getIAA11OR() {
return IAA11OR;
}

public short getIAA11OU() {
return IAA11OU;
}

public byte getIAA11WE() {
return IAA11WE;
}

public short getIAA11WL() {
return IAA11WL;
}

public boolean getIAA11WR() {
return IAA11WR;
}

public boolean getIAA11WU() {
return IAA11WU;
}

public boolean getIAA11YE() {
return IAA11YE;
}

public boolean getIAA11YL() {
return IAA11YL;
}

public boolean getIAA11YR() {
return IAA11YR;
}

public boolean getIAA11YU() {
return IAA11YU;
}

public short getIAA12() {
return IAA12;
}

public byte getIAA12FE() {
return IAA12FE;
}

public short getIAA12FL() {
return IAA12FL;
}

public byte getIAA12FR() {
return IAA12FR;
}

public byte getIAA12FU() {
return IAA12FU;
}

public byte getIAA12ME() {
return IAA12ME;
}

public short getIAA12ML() {
return IAA12ML;
}

public byte getIAA12MR() {
return IAA12MR;
}

public short getIAA12MU() {
return IAA12MU;
}

public byte getIAA12OE() {
return IAA12OE;
}

public short getIAA12OL() {
return IAA12OL;
}

public byte getIAA12OR() {
return IAA12OR;
}

public short getIAA12OU() {
return IAA12OU;
}

public byte getIAA12WE() {
return IAA12WE;
}

public short getIAA12WL() {
return IAA12WL;
}

public byte getIAA12WR() {
return IAA12WR;
}

public short getIAA12WU() {
return IAA12WU;
}

public boolean getIAA12YE() {
return IAA12YE;
}

public boolean getIAA12YL() {
return IAA12YL;
}

public boolean getIAA12YR() {
return IAA12YR;
}

public boolean getIAA12YU() {
return IAA12YU;
}

public short getIAA13() {
return IAA13;
}

public byte getIAA13FE() {
return IAA13FE;
}

public boolean getIAA13FL() {
return IAA13FL;
}

public byte getIAA13FR() {
return IAA13FR;
}

public short getIAA13FU() {
return IAA13FU;
}

public byte getIAA13ME() {
return IAA13ME;
}

public short getIAA13ML() {
return IAA13ML;
}

public byte getIAA13MR() {
return IAA13MR;
}

public short getIAA13MU() {
return IAA13MU;
}

public byte getIAA13OE() {
return IAA13OE;
}

public short getIAA13OL() {
return IAA13OL;
}

public byte getIAA13OR() {
return IAA13OR;
}

public short getIAA13OU() {
return IAA13OU;
}

public byte getIAA13WE() {
return IAA13WE;
}

public short getIAA13WL() {
return IAA13WL;
}

public byte getIAA13WR() {
return IAA13WR;
}

public short getIAA13WU() {
return IAA13WU;
}

public boolean getIAA13YE() {
return IAA13YE;
}

public boolean getIAA13YL() {
return IAA13YL;
}

public boolean getIAA13YR() {
return IAA13YR;
}

public boolean getIAA13YU() {
return IAA13YU;
}

public short getIAA14() {
return IAA14;
}

public boolean getIAA14FE() {
return IAA14FE;
}

public boolean getIAA14FL() {
return IAA14FL;
}

public boolean getIAA14FR() {
return IAA14FR;
}

public boolean getIAA14FU() {
return IAA14FU;
}

public byte getIAA14ME() {
return IAA14ME;
}

public short getIAA14ML() {
return IAA14ML;
}

public byte getIAA14MR() {
return IAA14MR;
}

public short getIAA14MU() {
return IAA14MU;
}

public byte getIAA14OE() {
return IAA14OE;
}

public short getIAA14OL() {
return IAA14OL;
}

public byte getIAA14OR() {
return IAA14OR;
}

public short getIAA14OU() {
return IAA14OU;
}

public byte getIAA14WE() {
return IAA14WE;
}

public byte getIAA14WL() {
return IAA14WL;
}

public byte getIAA14WR() {
return IAA14WR;
}

public byte getIAA14WU() {
return IAA14WU;
}

public boolean getIAA14YE() {
return IAA14YE;
}

public boolean getIAA14YL() {
return IAA14YL;
}

public boolean getIAA14YR() {
return IAA14YR;
}

public boolean getIAA14YU() {
return IAA14YU;
}

public short getIAA15() {
return IAA15;
}

public boolean getIAA15FE() {
return IAA15FE;
}

public boolean getIAA15FL() {
return IAA15FL;
}

public boolean getIAA15FR() {
return IAA15FR;
}

public boolean getIAA15FU() {
return IAA15FU;
}

public byte getIAA15ME() {
return IAA15ME;
}

public short getIAA15ML() {
return IAA15ML;
}

public byte getIAA15MR() {
return IAA15MR;
}

public short getIAA15MU() {
return IAA15MU;
}

public boolean getIAA15OE() {
return IAA15OE;
}

public boolean getIAA15OL() {
return IAA15OL;
}

public boolean getIAA15OR() {
return IAA15OR;
}

public boolean getIAA15OU() {
return IAA15OU;
}

public byte getIAA15WE() {
return IAA15WE;
}

public byte getIAA15WL() {
return IAA15WL;
}

public byte getIAA15WR() {
return IAA15WR;
}

public byte getIAA15WU() {
return IAA15WU;
}

public boolean getIAA15YE() {
return IAA15YE;
}

public boolean getIAA15YL() {
return IAA15YL;
}

public boolean getIAA15YR() {
return IAA15YR;
}

public boolean getIAA15YU() {
return IAA15YU;
}

public short getIAA16() {
return IAA16;
}

public boolean getIAA16FE() {
return IAA16FE;
}

public boolean getIAA16FL() {
return IAA16FL;
}

public boolean getIAA16FR() {
return IAA16FR;
}

public boolean getIAA16FU() {
return IAA16FU;
}

public byte getIAA16ME() {
return IAA16ME;
}

public short getIAA16ML() {
return IAA16ML;
}

public byte getIAA16MR() {
return IAA16MR;
}

public short getIAA16MU() {
return IAA16MU;
}

public byte getIAA16OE() {
return IAA16OE;
}

public short getIAA16OL() {
return IAA16OL;
}

public byte getIAA16OR() {
return IAA16OR;
}

public short getIAA16OU() {
return IAA16OU;
}

public byte getIAA16WE() {
return IAA16WE;
}

public short getIAA16WL() {
return IAA16WL;
}

public byte getIAA16WR() {
return IAA16WR;
}

public short getIAA16WU() {
return IAA16WU;
}

public boolean getIAA16YE() {
return IAA16YE;
}

public boolean getIAA16YL() {
return IAA16YL;
}

public boolean getIAA16YR() {
return IAA16YR;
}

public boolean getIAA16YU() {
return IAA16YU;
}

public short getIAA17() {
return IAA17;
}

public boolean getIAA17FE() {
return IAA17FE;
}

public boolean getIAA17FL() {
return IAA17FL;
}

public boolean getIAA17FR() {
return IAA17FR;
}

public boolean getIAA17FU() {
return IAA17FU;
}

public byte getIAA17ME() {
return IAA17ME;
}

public short getIAA17ML() {
return IAA17ML;
}

public byte getIAA17MR() {
return IAA17MR;
}

public short getIAA17MU() {
return IAA17MU;
}

public byte getIAA17OE() {
return IAA17OE;
}

public short getIAA17OL() {
return IAA17OL;
}

public byte getIAA17OR() {
return IAA17OR;
}

public short getIAA17OU() {
return IAA17OU;
}

public byte getIAA17WE() {
return IAA17WE;
}

public byte getIAA17WL() {
return IAA17WL;
}

public boolean getIAA17WR() {
return IAA17WR;
}

public byte getIAA17WU() {
return IAA17WU;
}

public boolean getIAA17YE() {
return IAA17YE;
}

public boolean getIAA17YL() {
return IAA17YL;
}

public boolean getIAA17YR() {
return IAA17YR;
}

public boolean getIAA17YU() {
return IAA17YU;
}

public short getIAA18() {
return IAA18;
}

public boolean getIAA18FE() {
return IAA18FE;
}

public boolean getIAA18FL() {
return IAA18FL;
}

public boolean getIAA18FR() {
return IAA18FR;
}

public boolean getIAA18FU() {
return IAA18FU;
}

public byte getIAA18ME() {
return IAA18ME;
}

public short getIAA18ML() {
return IAA18ML;
}

public byte getIAA18MR() {
return IAA18MR;
}

public short getIAA18MU() {
return IAA18MU;
}

public byte getIAA18OE() {
return IAA18OE;
}

public short getIAA18OL() {
return IAA18OL;
}

public byte getIAA18OR() {
return IAA18OR;
}

public short getIAA18OU() {
return IAA18OU;
}

public byte getIAA18WE() {
return IAA18WE;
}

public boolean getIAA18WL() {
return IAA18WL;
}

public boolean getIAA18WR() {
return IAA18WR;
}

public byte getIAA18WU() {
return IAA18WU;
}

public boolean getIAA18YE() {
return IAA18YE;
}

public boolean getIAA18YL() {
return IAA18YL;
}

public boolean getIAA18YR() {
return IAA18YR;
}

public boolean getIAA18YU() {
return IAA18YU;
}

public short getIAA19() {
return IAA19;
}

public boolean getIAA19FE() {
return IAA19FE;
}

public boolean getIAA19FL() {
return IAA19FL;
}

public boolean getIAA19FR() {
return IAA19FR;
}

public boolean getIAA19FU() {
return IAA19FU;
}

public byte getIAA19ME() {
return IAA19ME;
}

public short getIAA19ML() {
return IAA19ML;
}

public byte getIAA19MR() {
return IAA19MR;
}

public short getIAA19MU() {
return IAA19MU;
}

public byte getIAA19OE() {
return IAA19OE;
}

public short getIAA19OL() {
return IAA19OL;
}

public byte getIAA19OR() {
return IAA19OR;
}

public short getIAA19OU() {
return IAA19OU;
}

public byte getIAA19WE() {
return IAA19WE;
}

public byte getIAA19WL() {
return IAA19WL;
}

public byte getIAA19WR() {
return IAA19WR;
}

public byte getIAA19WU() {
return IAA19WU;
}

public boolean getIAA19YE() {
return IAA19YE;
}

public boolean getIAA19YL() {
return IAA19YL;
}

public boolean getIAA19YR() {
return IAA19YR;
}

public boolean getIAA19YU() {
return IAA19YU;
}

public byte getIAA1FE() {
return IAA1FE;
}

public short getIAA1FL() {
return IAA1FL;
}

public byte getIAA1FR() {
return IAA1FR;
}

public short getIAA1FU() {
return IAA1FU;
}

public byte getIAA1ME() {
return IAA1ME;
}

public short getIAA1ML() {
return IAA1ML;
}

public byte getIAA1MR() {
return IAA1MR;
}

public short getIAA1MU() {
return IAA1MU;
}

public byte getIAA1OE() {
return IAA1OE;
}

public short getIAA1OL() {
return IAA1OL;
}

public byte getIAA1OR() {
return IAA1OR;
}

public short getIAA1OU() {
return IAA1OU;
}

public byte getIAA1WE() {
return IAA1WE;
}

public short getIAA1WL() {
return IAA1WL;
}

public byte getIAA1WR() {
return IAA1WR;
}

public short getIAA1WU() {
return IAA1WU;
}

public boolean getIAA1YE() {
return IAA1YE;
}

public boolean getIAA1YL() {
return IAA1YL;
}

public boolean getIAA1YR() {
return IAA1YR;
}

public boolean getIAA1YU() {
return IAA1YU;
}

public short getIAA2() {
return IAA2;
}

public short getIAA20() {
return IAA20;
}

public boolean getIAA20FE() {
return IAA20FE;
}

public boolean getIAA20FL() {
return IAA20FL;
}

public boolean getIAA20FR() {
return IAA20FR;
}

public boolean getIAA20FU() {
return IAA20FU;
}

public byte getIAA20ME() {
return IAA20ME;
}

public byte getIAA20ML() {
return IAA20ML;
}

public byte getIAA20MR() {
return IAA20MR;
}

public byte getIAA20MU() {
return IAA20MU;
}

public byte getIAA20OE() {
return IAA20OE;
}

public byte getIAA20OL() {
return IAA20OL;
}

public byte getIAA20OR() {
return IAA20OR;
}

public short getIAA20OU() {
return IAA20OU;
}

public byte getIAA20WE() {
return IAA20WE;
}

public boolean getIAA20WL() {
return IAA20WL;
}

public byte getIAA20WR() {
return IAA20WR;
}

public byte getIAA20WU() {
return IAA20WU;
}

public boolean getIAA20YE() {
return IAA20YE;
}

public boolean getIAA20YL() {
return IAA20YL;
}

public boolean getIAA20YR() {
return IAA20YR;
}

public boolean getIAA20YU() {
return IAA20YU;
}

public short getIAA21() {
return IAA21;
}

public byte getIAA21FE() {
return IAA21FE;
}

public short getIAA21FL() {
return IAA21FL;
}

public byte getIAA21FR() {
return IAA21FR;
}

public short getIAA21FU() {
return IAA21FU;
}

public byte getIAA21ME() {
return IAA21ME;
}

public short getIAA21ML() {
return IAA21ML;
}

public byte getIAA21MR() {
return IAA21MR;
}

public short getIAA21MU() {
return IAA21MU;
}

public byte getIAA21OE() {
return IAA21OE;
}

public short getIAA21OL() {
return IAA21OL;
}

public byte getIAA21OR() {
return IAA21OR;
}

public short getIAA21OU() {
return IAA21OU;
}

public byte getIAA21WE() {
return IAA21WE;
}

public short getIAA21WL() {
return IAA21WL;
}

public byte getIAA21WR() {
return IAA21WR;
}

public short getIAA21WU() {
return IAA21WU;
}

public boolean getIAA21YE() {
return IAA21YE;
}

public boolean getIAA21YL() {
return IAA21YL;
}

public boolean getIAA21YR() {
return IAA21YR;
}

public boolean getIAA21YU() {
return IAA21YU;
}

public short getIAA22() {
return IAA22;
}

public boolean getIAA22FE() {
return IAA22FE;
}

public short getIAA22FL() {
return IAA22FL;
}

public boolean getIAA22FR() {
return IAA22FR;
}

public short getIAA22FU() {
return IAA22FU;
}

public byte getIAA22ME() {
return IAA22ME;
}

public short getIAA22ML() {
return IAA22ML;
}

public byte getIAA22MR() {
return IAA22MR;
}

public short getIAA22MU() {
return IAA22MU;
}

public byte getIAA22OE() {
return IAA22OE;
}

public short getIAA22OL() {
return IAA22OL;
}

public byte getIAA22OR() {
return IAA22OR;
}

public short getIAA22OU() {
return IAA22OU;
}

public byte getIAA22WE() {
return IAA22WE;
}

public short getIAA22WL() {
return IAA22WL;
}

public byte getIAA22WR() {
return IAA22WR;
}

public short getIAA22WU() {
return IAA22WU;
}

public boolean getIAA22YE() {
return IAA22YE;
}

public boolean getIAA22YL() {
return IAA22YL;
}

public boolean getIAA22YR() {
return IAA22YR;
}

public boolean getIAA22YU() {
return IAA22YU;
}

public short getIAA23() {
return IAA23;
}

public boolean getIAA23FE() {
return IAA23FE;
}

public boolean getIAA23FL() {
return IAA23FL;
}

public boolean getIAA23FR() {
return IAA23FR;
}

public boolean getIAA23FU() {
return IAA23FU;
}

public byte getIAA23ME() {
return IAA23ME;
}

public short getIAA23ML() {
return IAA23ML;
}

public byte getIAA23MR() {
return IAA23MR;
}

public short getIAA23MU() {
return IAA23MU;
}

public byte getIAA23OE() {
return IAA23OE;
}

public short getIAA23OL() {
return IAA23OL;
}

public byte getIAA23OR() {
return IAA23OR;
}

public short getIAA23OU() {
return IAA23OU;
}

public byte getIAA23WE() {
return IAA23WE;
}

public short getIAA23WL() {
return IAA23WL;
}

public byte getIAA23WR() {
return IAA23WR;
}

public short getIAA23WU() {
return IAA23WU;
}

public boolean getIAA23YE() {
return IAA23YE;
}

public boolean getIAA23YL() {
return IAA23YL;
}

public boolean getIAA23YR() {
return IAA23YR;
}

public boolean getIAA23YU() {
return IAA23YU;
}

public short getIAA24() {
return IAA24;
}

public byte getIAA24FE() {
return IAA24FE;
}

public short getIAA24FL() {
return IAA24FL;
}

public byte getIAA24FR() {
return IAA24FR;
}

public byte getIAA24FU() {
return IAA24FU;
}

public byte getIAA24ME() {
return IAA24ME;
}

public short getIAA24ML() {
return IAA24ML;
}

public byte getIAA24MR() {
return IAA24MR;
}

public short getIAA24MU() {
return IAA24MU;
}

public byte getIAA24OE() {
return IAA24OE;
}

public short getIAA24OL() {
return IAA24OL;
}

public byte getIAA24OR() {
return IAA24OR;
}

public short getIAA24OU() {
return IAA24OU;
}

public byte getIAA24WE() {
return IAA24WE;
}

public byte getIAA24WL() {
return IAA24WL;
}

public byte getIAA24WR() {
return IAA24WR;
}

public byte getIAA24WU() {
return IAA24WU;
}

public boolean getIAA24YE() {
return IAA24YE;
}

public boolean getIAA24YL() {
return IAA24YL;
}

public boolean getIAA24YR() {
return IAA24YR;
}

public boolean getIAA24YU() {
return IAA24YU;
}

public short getIAA25() {
return IAA25;
}

public byte getIAA25FE() {
return IAA25FE;
}

public boolean getIAA25FL() {
return IAA25FL;
}

public byte getIAA25FR() {
return IAA25FR;
}

public boolean getIAA25FU() {
return IAA25FU;
}

public byte getIAA25ME() {
return IAA25ME;
}

public short getIAA25ML() {
return IAA25ML;
}

public byte getIAA25MR() {
return IAA25MR;
}

public short getIAA25MU() {
return IAA25MU;
}

public byte getIAA25OE() {
return IAA25OE;
}

public short getIAA25OL() {
return IAA25OL;
}

public byte getIAA25OR() {
return IAA25OR;
}

public short getIAA25OU() {
return IAA25OU;
}

public byte getIAA25WE() {
return IAA25WE;
}

public byte getIAA25WL() {
return IAA25WL;
}

public byte getIAA25WR() {
return IAA25WR;
}

public byte getIAA25WU() {
return IAA25WU;
}

public boolean getIAA25YE() {
return IAA25YE;
}

public boolean getIAA25YL() {
return IAA25YL;
}

public boolean getIAA25YR() {
return IAA25YR;
}

public boolean getIAA25YU() {
return IAA25YU;
}

public short getIAA26() {
return IAA26;
}

public boolean getIAA26FE() {
return IAA26FE;
}

public boolean getIAA26FL() {
return IAA26FL;
}

public boolean getIAA26FR() {
return IAA26FR;
}

public boolean getIAA26FU() {
return IAA26FU;
}

public byte getIAA26ME() {
return IAA26ME;
}

public short getIAA26ML() {
return IAA26ML;
}

public byte getIAA26MR() {
return IAA26MR;
}

public short getIAA26MU() {
return IAA26MU;
}

public byte getIAA26OE() {
return IAA26OE;
}

public short getIAA26OL() {
return IAA26OL;
}

public byte getIAA26OR() {
return IAA26OR;
}

public short getIAA26OU() {
return IAA26OU;
}

public byte getIAA26WE() {
return IAA26WE;
}

public byte getIAA26WL() {
return IAA26WL;
}

public byte getIAA26WR() {
return IAA26WR;
}

public byte getIAA26WU() {
return IAA26WU;
}

public boolean getIAA26YE() {
return IAA26YE;
}

public boolean getIAA26YL() {
return IAA26YL;
}

public boolean getIAA26YR() {
return IAA26YR;
}

public boolean getIAA26YU() {
return IAA26YU;
}

public short getIAA27() {
return IAA27;
}

public boolean getIAA27FE() {
return IAA27FE;
}

public boolean getIAA27FL() {
return IAA27FL;
}

public boolean getIAA27FR() {
return IAA27FR;
}

public boolean getIAA27FU() {
return IAA27FU;
}

public byte getIAA27ME() {
return IAA27ME;
}

public short getIAA27ML() {
return IAA27ML;
}

public boolean getIAA27MR() {
return IAA27MR;
}

public short getIAA27MU() {
return IAA27MU;
}

public byte getIAA27OE() {
return IAA27OE;
}

public short getIAA27OL() {
return IAA27OL;
}

public byte getIAA27OR() {
return IAA27OR;
}

public short getIAA27OU() {
return IAA27OU;
}

public boolean getIAA27WE() {
return IAA27WE;
}

public boolean getIAA27WL() {
return IAA27WL;
}

public boolean getIAA27WR() {
return IAA27WR;
}

public boolean getIAA27WU() {
return IAA27WU;
}

public boolean getIAA27YE() {
return IAA27YE;
}

public boolean getIAA27YL() {
return IAA27YL;
}

public boolean getIAA27YR() {
return IAA27YR;
}

public boolean getIAA27YU() {
return IAA27YU;
}

public short getIAA28() {
return IAA28;
}

public boolean getIAA28FE() {
return IAA28FE;
}

public boolean getIAA28FL() {
return IAA28FL;
}

public boolean getIAA28FR() {
return IAA28FR;
}

public boolean getIAA28FU() {
return IAA28FU;
}

public boolean getIAA28ME() {
return IAA28ME;
}

public short getIAA28ML() {
return IAA28ML;
}

public boolean getIAA28MR() {
return IAA28MR;
}

public short getIAA28MU() {
return IAA28MU;
}

public byte getIAA28OE() {
return IAA28OE;
}

public short getIAA28OL() {
return IAA28OL;
}

public byte getIAA28OR() {
return IAA28OR;
}

public short getIAA28OU() {
return IAA28OU;
}

public byte getIAA28WE() {
return IAA28WE;
}

public byte getIAA28WL() {
return IAA28WL;
}

public byte getIAA28WR() {
return IAA28WR;
}

public byte getIAA28WU() {
return IAA28WU;
}

public boolean getIAA28YE() {
return IAA28YE;
}

public boolean getIAA28YL() {
return IAA28YL;
}

public boolean getIAA28YR() {
return IAA28YR;
}

public short getIAA28YU() {
return IAA28YU;
}

public short getIAA29() {
return IAA29;
}

public boolean getIAA29FE() {
return IAA29FE;
}

public boolean getIAA29FL() {
return IAA29FL;
}

public boolean getIAA29FR() {
return IAA29FR;
}

public boolean getIAA29FU() {
return IAA29FU;
}

public byte getIAA29ME() {
return IAA29ME;
}

public short getIAA29ML() {
return IAA29ML;
}

public byte getIAA29MR() {
return IAA29MR;
}

public short getIAA29MU() {
return IAA29MU;
}

public byte getIAA29OE() {
return IAA29OE;
}

public short getIAA29OL() {
return IAA29OL;
}

public byte getIAA29OR() {
return IAA29OR;
}

public short getIAA29OU() {
return IAA29OU;
}

public byte getIAA29WE() {
return IAA29WE;
}

public byte getIAA29WL() {
return IAA29WL;
}

public byte getIAA29WR() {
return IAA29WR;
}

public byte getIAA29WU() {
return IAA29WU;
}

public boolean getIAA29YE() {
return IAA29YE;
}

public boolean getIAA29YL() {
return IAA29YL;
}

public boolean getIAA29YR() {
return IAA29YR;
}

public boolean getIAA29YU() {
return IAA29YU;
}

public boolean getIAA2FE() {
return IAA2FE;
}

public short getIAA2FL() {
return IAA2FL;
}

public boolean getIAA2FR() {
return IAA2FR;
}

public short getIAA2FU() {
return IAA2FU;
}

public byte getIAA2ME() {
return IAA2ME;
}

public short getIAA2ML() {
return IAA2ML;
}

public byte getIAA2MR() {
return IAA2MR;
}

public short getIAA2MU() {
return IAA2MU;
}

public byte getIAA2OE() {
return IAA2OE;
}

public short getIAA2OL() {
return IAA2OL;
}

public byte getIAA2OR() {
return IAA2OR;
}

public short getIAA2OU() {
return IAA2OU;
}

public byte getIAA2WE() {
return IAA2WE;
}

public byte getIAA2WL() {
return IAA2WL;
}

public byte getIAA2WR() {
return IAA2WR;
}

public byte getIAA2WU() {
return IAA2WU;
}

public boolean getIAA2YE() {
return IAA2YE;
}

public boolean getIAA2YL() {
return IAA2YL;
}

public boolean getIAA2YR() {
return IAA2YR;
}

public boolean getIAA2YU() {
return IAA2YU;
}

public short getIAA3() {
return IAA3;
}

public short getIAA30() {
return IAA30;
}

public boolean getIAA30FE() {
return IAA30FE;
}

public boolean getIAA30FL() {
return IAA30FL;
}

public boolean getIAA30FR() {
return IAA30FR;
}

public boolean getIAA30FU() {
return IAA30FU;
}

public byte getIAA30ME() {
return IAA30ME;
}

public short getIAA30ML() {
return IAA30ML;
}

public byte getIAA30MR() {
return IAA30MR;
}

public short getIAA30MU() {
return IAA30MU;
}

public byte getIAA30OE() {
return IAA30OE;
}

public short getIAA30OL() {
return IAA30OL;
}

public byte getIAA30OR() {
return IAA30OR;
}

public short getIAA30OU() {
return IAA30OU;
}

public byte getIAA30WE() {
return IAA30WE;
}

public short getIAA30WL() {
return IAA30WL;
}

public byte getIAA30WR() {
return IAA30WR;
}

public byte getIAA30WU() {
return IAA30WU;
}

public boolean getIAA30YE() {
return IAA30YE;
}

public boolean getIAA30YL() {
return IAA30YL;
}

public boolean getIAA30YR() {
return IAA30YR;
}

public boolean getIAA30YU() {
return IAA30YU;
}

public short getIAA31() {
return IAA31;
}

public boolean getIAA31FE() {
return IAA31FE;
}

public boolean getIAA31FL() {
return IAA31FL;
}

public boolean getIAA31FR() {
return IAA31FR;
}

public boolean getIAA31FU() {
return IAA31FU;
}

public boolean getIAA31ME() {
return IAA31ME;
}

public short getIAA31ML() {
return IAA31ML;
}

public boolean getIAA31MR() {
return IAA31MR;
}

public short getIAA31MU() {
return IAA31MU;
}

public byte getIAA31OE() {
return IAA31OE;
}

public short getIAA31OL() {
return IAA31OL;
}

public byte getIAA31OR() {
return IAA31OR;
}

public short getIAA31OU() {
return IAA31OU;
}

public byte getIAA31WE() {
return IAA31WE;
}

public boolean getIAA31WL() {
return IAA31WL;
}

public byte getIAA31WR() {
return IAA31WR;
}

public byte getIAA31WU() {
return IAA31WU;
}

public boolean getIAA31YE() {
return IAA31YE;
}

public boolean getIAA31YL() {
return IAA31YL;
}

public boolean getIAA31YR() {
return IAA31YR;
}

public boolean getIAA31YU() {
return IAA31YU;
}

public short getIAA32() {
return IAA32;
}

public boolean getIAA32FE() {
return IAA32FE;
}

public boolean getIAA32FL() {
return IAA32FL;
}

public boolean getIAA32FR() {
return IAA32FR;
}

public boolean getIAA32FU() {
return IAA32FU;
}

public byte getIAA32ME() {
return IAA32ME;
}

public short getIAA32ML() {
return IAA32ML;
}

public byte getIAA32MR() {
return IAA32MR;
}

public short getIAA32MU() {
return IAA32MU;
}

public byte getIAA32OE() {
return IAA32OE;
}

public short getIAA32OL() {
return IAA32OL;
}

public byte getIAA32OR() {
return IAA32OR;
}

public short getIAA32OU() {
return IAA32OU;
}

public byte getIAA32WE() {
return IAA32WE;
}

public byte getIAA32WL() {
return IAA32WL;
}

public byte getIAA32WR() {
return IAA32WR;
}

public byte getIAA32WU() {
return IAA32WU;
}

public boolean getIAA32YE() {
return IAA32YE;
}

public boolean getIAA32YL() {
return IAA32YL;
}

public boolean getIAA32YR() {
return IAA32YR;
}

public short getIAA32YU() {
return IAA32YU;
}

public short getIAA33() {
return IAA33;
}

public boolean getIAA33FE() {
return IAA33FE;
}

public boolean getIAA33FL() {
return IAA33FL;
}

public boolean getIAA33FR() {
return IAA33FR;
}

public boolean getIAA33FU() {
return IAA33FU;
}

public byte getIAA33ME() {
return IAA33ME;
}

public short getIAA33ML() {
return IAA33ML;
}

public byte getIAA33MR() {
return IAA33MR;
}

public short getIAA33MU() {
return IAA33MU;
}

public byte getIAA33OE() {
return IAA33OE;
}

public short getIAA33OL() {
return IAA33OL;
}

public byte getIAA33OR() {
return IAA33OR;
}

public short getIAA33OU() {
return IAA33OU;
}

public boolean getIAA33WE() {
return IAA33WE;
}

public boolean getIAA33WL() {
return IAA33WL;
}

public boolean getIAA33WR() {
return IAA33WR;
}

public boolean getIAA33WU() {
return IAA33WU;
}

public boolean getIAA33YE() {
return IAA33YE;
}

public boolean getIAA33YL() {
return IAA33YL;
}

public boolean getIAA33YR() {
return IAA33YR;
}

public boolean getIAA33YU() {
return IAA33YU;
}

public short getIAA34() {
return IAA34;
}

public boolean getIAA34FE() {
return IAA34FE;
}

public short getIAA34FL() {
return IAA34FL;
}

public boolean getIAA34FR() {
return IAA34FR;
}

public short getIAA34FU() {
return IAA34FU;
}

public boolean getIAA34ME() {
return IAA34ME;
}

public short getIAA34ML() {
return IAA34ML;
}

public boolean getIAA34MR() {
return IAA34MR;
}

public short getIAA34MU() {
return IAA34MU;
}

public boolean getIAA34OE() {
return IAA34OE;
}

public short getIAA34OL() {
return IAA34OL;
}

public boolean getIAA34OR() {
return IAA34OR;
}

public short getIAA34OU() {
return IAA34OU;
}

public boolean getIAA34WE() {
return IAA34WE;
}

public boolean getIAA34WL() {
return IAA34WL;
}

public boolean getIAA34WR() {
return IAA34WR;
}

public boolean getIAA34WU() {
return IAA34WU;
}

public boolean getIAA34YE() {
return IAA34YE;
}

public boolean getIAA34YL() {
return IAA34YL;
}

public boolean getIAA34YR() {
return IAA34YR;
}

public boolean getIAA34YU() {
return IAA34YU;
}

public short getIAA35() {
return IAA35;
}

public boolean getIAA35FE() {
return IAA35FE;
}

public boolean getIAA35FL() {
return IAA35FL;
}

public boolean getIAA35FR() {
return IAA35FR;
}

public boolean getIAA35FU() {
return IAA35FU;
}

public boolean getIAA35ME() {
return IAA35ME;
}

public short getIAA35ML() {
return IAA35ML;
}

public boolean getIAA35MR() {
return IAA35MR;
}

public short getIAA35MU() {
return IAA35MU;
}

public byte getIAA35OE() {
return IAA35OE;
}

public short getIAA35OL() {
return IAA35OL;
}

public byte getIAA35OR() {
return IAA35OR;
}

public short getIAA35OU() {
return IAA35OU;
}

public byte getIAA35WE() {
return IAA35WE;
}

public boolean getIAA35WL() {
return IAA35WL;
}

public byte getIAA35WR() {
return IAA35WR;
}

public boolean getIAA35WU() {
return IAA35WU;
}

public boolean getIAA35YE() {
return IAA35YE;
}

public boolean getIAA35YL() {
return IAA35YL;
}

public boolean getIAA35YR() {
return IAA35YR;
}

public boolean getIAA35YU() {
return IAA35YU;
}

public short getIAA36() {
return IAA36;
}

public boolean getIAA36FE() {
return IAA36FE;
}

public boolean getIAA36FL() {
return IAA36FL;
}

public boolean getIAA36FR() {
return IAA36FR;
}

public boolean getIAA36FU() {
return IAA36FU;
}

public boolean getIAA36ME() {
return IAA36ME;
}

public short getIAA36ML() {
return IAA36ML;
}

public boolean getIAA36MR() {
return IAA36MR;
}

public short getIAA36MU() {
return IAA36MU;
}

public byte getIAA36OE() {
return IAA36OE;
}

public boolean getIAA36OL() {
return IAA36OL;
}

public byte getIAA36OR() {
return IAA36OR;
}

public short getIAA36OU() {
return IAA36OU;
}

public boolean getIAA36WE() {
return IAA36WE;
}

public boolean getIAA36WL() {
return IAA36WL;
}

public boolean getIAA36WR() {
return IAA36WR;
}

public boolean getIAA36WU() {
return IAA36WU;
}

public boolean getIAA36YE() {
return IAA36YE;
}

public boolean getIAA36YL() {
return IAA36YL;
}

public boolean getIAA36YR() {
return IAA36YR;
}

public boolean getIAA36YU() {
return IAA36YU;
}

public short getIAA37() {
return IAA37;
}

public byte getIAA37FE() {
return IAA37FE;
}

public short getIAA37FL() {
return IAA37FL;
}

public byte getIAA37FR() {
return IAA37FR;
}

public short getIAA37FU() {
return IAA37FU;
}

public byte getIAA37ME() {
return IAA37ME;
}

public short getIAA37ML() {
return IAA37ML;
}

public byte getIAA37MR() {
return IAA37MR;
}

public short getIAA37MU() {
return IAA37MU;
}

public byte getIAA37OE() {
return IAA37OE;
}

public short getIAA37OL() {
return IAA37OL;
}

public byte getIAA37OR() {
return IAA37OR;
}

public short getIAA37OU() {
return IAA37OU;
}

public byte getIAA37WE() {
return IAA37WE;
}

public byte getIAA37WL() {
return IAA37WL;
}

public byte getIAA37WR() {
return IAA37WR;
}

public short getIAA37WU() {
return IAA37WU;
}

public boolean getIAA37YE() {
return IAA37YE;
}

public boolean getIAA37YL() {
return IAA37YL;
}

public boolean getIAA37YR() {
return IAA37YR;
}

public boolean getIAA37YU() {
return IAA37YU;
}

public short getIAA38() {
return IAA38;
}

public boolean getIAA38FE() {
return IAA38FE;
}

public boolean getIAA38FL() {
return IAA38FL;
}

public boolean getIAA38FR() {
return IAA38FR;
}

public boolean getIAA38FU() {
return IAA38FU;
}

public byte getIAA38ME() {
return IAA38ME;
}

public short getIAA38ML() {
return IAA38ML;
}

public byte getIAA38MR() {
return IAA38MR;
}

public short getIAA38MU() {
return IAA38MU;
}

public byte getIAA38OE() {
return IAA38OE;
}

public short getIAA38OL() {
return IAA38OL;
}

public byte getIAA38OR() {
return IAA38OR;
}

public short getIAA38OU() {
return IAA38OU;
}

public byte getIAA38WE() {
return IAA38WE;
}

public byte getIAA38WL() {
return IAA38WL;
}

public byte getIAA38WR() {
return IAA38WR;
}

public short getIAA38WU() {
return IAA38WU;
}

public boolean getIAA38YE() {
return IAA38YE;
}

public boolean getIAA38YL() {
return IAA38YL;
}

public boolean getIAA38YR() {
return IAA38YR;
}

public boolean getIAA38YU() {
return IAA38YU;
}

public byte getIAA3FE() {
return IAA3FE;
}

public byte getIAA3FL() {
return IAA3FL;
}

public byte getIAA3FR() {
return IAA3FR;
}

public short getIAA3FU() {
return IAA3FU;
}

public byte getIAA3ME() {
return IAA3ME;
}

public short getIAA3ML() {
return IAA3ML;
}

public byte getIAA3MR() {
return IAA3MR;
}

public short getIAA3MU() {
return IAA3MU;
}

public byte getIAA3OE() {
return IAA3OE;
}

public short getIAA3OL() {
return IAA3OL;
}

public byte getIAA3OR() {
return IAA3OR;
}

public short getIAA3OU() {
return IAA3OU;
}

public byte getIAA3WE() {
return IAA3WE;
}

public short getIAA3WL() {
return IAA3WL;
}

public byte getIAA3WR() {
return IAA3WR;
}

public byte getIAA3WU() {
return IAA3WU;
}

public boolean getIAA3YE() {
return IAA3YE;
}

public boolean getIAA3YL() {
return IAA3YL;
}

public boolean getIAA3YR() {
return IAA3YR;
}

public boolean getIAA3YU() {
return IAA3YU;
}

public short getIAA4() {
return IAA4;
}

public boolean getIAA4FE() {
return IAA4FE;
}

public boolean getIAA4FL() {
return IAA4FL;
}

public boolean getIAA4FR() {
return IAA4FR;
}

public boolean getIAA4FU() {
return IAA4FU;
}

public byte getIAA4ME() {
return IAA4ME;
}

public short getIAA4ML() {
return IAA4ML;
}

public byte getIAA4MR() {
return IAA4MR;
}

public short getIAA4MU() {
return IAA4MU;
}

public byte getIAA4OE() {
return IAA4OE;
}

public short getIAA4OL() {
return IAA4OL;
}

public byte getIAA4OR() {
return IAA4OR;
}

public short getIAA4OU() {
return IAA4OU;
}

public byte getIAA4WE() {
return IAA4WE;
}

public short getIAA4WL() {
return IAA4WL;
}

public byte getIAA4WR() {
return IAA4WR;
}

public byte getIAA4WU() {
return IAA4WU;
}

public boolean getIAA4YE() {
return IAA4YE;
}

public boolean getIAA4YL() {
return IAA4YL;
}

public boolean getIAA4YR() {
return IAA4YR;
}

public boolean getIAA4YU() {
return IAA4YU;
}

public short getIAA5() {
return IAA5;
}

public byte getIAA5FE() {
return IAA5FE;
}

public short getIAA5FL() {
return IAA5FL;
}

public byte getIAA5FR() {
return IAA5FR;
}

public short getIAA5FU() {
return IAA5FU;
}

public byte getIAA5ME() {
return IAA5ME;
}

public short getIAA5ML() {
return IAA5ML;
}

public byte getIAA5MR() {
return IAA5MR;
}

public short getIAA5MU() {
return IAA5MU;
}

public byte getIAA5OE() {
return IAA5OE;
}

public short getIAA5OL() {
return IAA5OL;
}

public byte getIAA5OR() {
return IAA5OR;
}

public short getIAA5OU() {
return IAA5OU;
}

public byte getIAA5WE() {
return IAA5WE;
}

public byte getIAA5WL() {
return IAA5WL;
}

public byte getIAA5WR() {
return IAA5WR;
}

public byte getIAA5WU() {
return IAA5WU;
}

public boolean getIAA5YE() {
return IAA5YE;
}

public boolean getIAA5YL() {
return IAA5YL;
}

public boolean getIAA5YR() {
return IAA5YR;
}

public boolean getIAA5YU() {
return IAA5YU;
}

public int getIAA6() {
return IAA6;
}

public byte getIAA6FE() {
return IAA6FE;
}

public short getIAA6FL() {
return IAA6FL;
}

public byte getIAA6FR() {
return IAA6FR;
}

public short getIAA6FU() {
return IAA6FU;
}

public byte getIAA6ME() {
return IAA6ME;
}

public short getIAA6ML() {
return IAA6ML;
}

public byte getIAA6MR() {
return IAA6MR;
}

public short getIAA6MU() {
return IAA6MU;
}

public byte getIAA6OE() {
return IAA6OE;
}

public short getIAA6OL() {
return IAA6OL;
}

public byte getIAA6OR() {
return IAA6OR;
}

public short getIAA6OU() {
return IAA6OU;
}

public byte getIAA6WE() {
return IAA6WE;
}

public byte getIAA6WL() {
return IAA6WL;
}

public byte getIAA6WR() {
return IAA6WR;
}

public short getIAA6WU() {
return IAA6WU;
}

public boolean getIAA6YE() {
return IAA6YE;
}

public short getIAA6YL() {
return IAA6YL;
}

public boolean getIAA6YR() {
return IAA6YR;
}

public short getIAA6YU() {
return IAA6YU;
}

public short getIAA7() {
return IAA7;
}

public byte getIAA7FE() {
return IAA7FE;
}

public boolean getIAA7FL() {
return IAA7FL;
}

public byte getIAA7FR() {
return IAA7FR;
}

public boolean getIAA7FU() {
return IAA7FU;
}

public byte getIAA7ME() {
return IAA7ME;
}

public short getIAA7ML() {
return IAA7ML;
}

public byte getIAA7MR() {
return IAA7MR;
}

public short getIAA7MU() {
return IAA7MU;
}

public byte getIAA7OE() {
return IAA7OE;
}

public short getIAA7OL() {
return IAA7OL;
}

public byte getIAA7OR() {
return IAA7OR;
}

public short getIAA7OU() {
return IAA7OU;
}

public byte getIAA7WE() {
return IAA7WE;
}

public short getIAA7WL() {
return IAA7WL;
}

public byte getIAA7WR() {
return IAA7WR;
}

public short getIAA7WU() {
return IAA7WU;
}

public boolean getIAA7YE() {
return IAA7YE;
}

public boolean getIAA7YL() {
return IAA7YL;
}

public boolean getIAA7YR() {
return IAA7YR;
}

public boolean getIAA7YU() {
return IAA7YU;
}

public short getIAA8() {
return IAA8;
}

public boolean getIAA8FE() {
return IAA8FE;
}

public short getIAA8FL() {
return IAA8FL;
}

public byte getIAA8FR() {
return IAA8FR;
}

public short getIAA8FU() {
return IAA8FU;
}

public byte getIAA8ME() {
return IAA8ME;
}

public short getIAA8ML() {
return IAA8ML;
}

public byte getIAA8MR() {
return IAA8MR;
}

public short getIAA8MU() {
return IAA8MU;
}

public byte getIAA8OE() {
return IAA8OE;
}

public short getIAA8OL() {
return IAA8OL;
}

public byte getIAA8OR() {
return IAA8OR;
}

public short getIAA8OU() {
return IAA8OU;
}

public byte getIAA8WE() {
return IAA8WE;
}

public byte getIAA8WL() {
return IAA8WL;
}

public byte getIAA8WR() {
return IAA8WR;
}

public byte getIAA8WU() {
return IAA8WU;
}

public boolean getIAA8YE() {
return IAA8YE;
}

public boolean getIAA8YL() {
return IAA8YL;
}

public boolean getIAA8YR() {
return IAA8YR;
}

public boolean getIAA8YU() {
return IAA8YU;
}

public short getIAA9() {
return IAA9;
}

public boolean getIAA9FE() {
return IAA9FE;
}

public boolean getIAA9FL() {
return IAA9FL;
}

public boolean getIAA9FR() {
return IAA9FR;
}

public boolean getIAA9FU() {
return IAA9FU;
}

public byte getIAA9ME() {
return IAA9ME;
}

public short getIAA9ML() {
return IAA9ML;
}

public byte getIAA9MR() {
return IAA9MR;
}

public short getIAA9MU() {
return IAA9MU;
}

public byte getIAA9OE() {
return IAA9OE;
}

public short getIAA9OL() {
return IAA9OL;
}

public byte getIAA9OR() {
return IAA9OR;
}

public short getIAA9OU() {
return IAA9OU;
}

public byte getIAA9WE() {
return IAA9WE;
}

public byte getIAA9WL() {
return IAA9WL;
}

public byte getIAA9WR() {
return IAA9WR;
}

public byte getIAA9WU() {
return IAA9WU;
}

public boolean getIAA9YE() {
return IAA9YE;
}

public boolean getIAA9YL() {
return IAA9YL;
}

public boolean getIAA9YR() {
return IAA9YR;
}

public boolean getIAA9YU() {
return IAA9YU;
}

public byte getIAAILY() {
return IAAILY;
}

public int getIAAIM() {
return IAAIM;
}

public byte getIAAIME() {
return IAAIME;
}

public short getIAAIML() {
return IAAIML;
}

public byte getIAAIMR() {
return IAAIMR;
}

public short getIAAIMU() {
return IAAIMU;
}

public int getIAAIP() {
return IAAIP;
}

public int getIAAM() {
return IAAM;
}

public byte getIAAME() {
return IAAME;
}

public int getIAAML() {
return IAAML;
}

public byte getIAAMR() {
return IAAMR;
}

public int getIAAMU() {
return IAAMU;
}

public byte getIAANIN() {
return IAANIN;
}

public byte getIAASK() {
return IAASK;
}

public int getIABG() {
return IABG;
}

public byte getIABGE() {
return IABGE;
}

public int getIABGI() {
return IABGI;
}

public byte getIABGIE() {
return IABGIE;
}

public int getIABGIL() {
return IABGIL;
}

public byte getIABGIR() {
return IABGIR;
}

public int getIABGIU() {
return IABGIU;
}

public int getIABGL() {
return IABGL;
}

public byte getIABGR() {
return IABGR;
}

public int getIABGU() {
return IABGU;
}

public int getIACISA() {
return IACISA;
}

public int getIADEBM() {
return IADEBM;
}

public byte getIADEBT() {
return IADEBT;
}

public byte getIADEMUT() {
return IADEMUT;
}

public byte getIADENAT() {
return IADENAT;
}

public byte getIADOC() {
return IADOC;
}

public int getIAFBA() {
return IAFBA;
}

public byte getIAFBPR() {
return IAFBPR;
}

public int getIAFBPS() {
return IAFBPS;
}

public byte getIAFBPSE() {
return IAFBPSE;
}

public int getIAFBPSL() {
return IAFBPSL;
}

public byte getIAFBPSR() {
return IAFBPSR;
}

public int getIAFBPSU() {
return IAFBPSU;
}

public byte getIAFCON() {
return IAFCON;
}

public byte getIAFIND() {
return IAFIND;
}

public int getIAHOME() {
return IAHOME;
}

public byte getIAINTA() {
return IAINTA;
}

public int getIAIP() {
return IAIP;
}

public byte getIAIPE() {
return IAIPE;
}

public int getIAIPI() {
return IAIPI;
}

public byte getIAIPIE() {
return IAIPIE;
}

public short getIAIPIL() {
return IAIPIL;
}

public byte getIAIPIR() {
return IAIPIR;
}

public short getIAIPIU() {
return IAIPIU;
}

public int getIAIPL() {
return IAIPL;
}

public byte getIAIPR() {
return IAIPR;
}

public int getIAIPU() {
return IAIPU;
}

public byte getIAIR() {
return IAIR;
}

public int getIAIRA() {
return IAIRA;
}

public int getIAISAD() {
return IAISAD;
}

public byte getIAJNT() {
return IAJNT;
}

public byte getIALI() {
return IALI;
}

public int getIALIPA() {
return IALIPA;
}

public int getIALISA() {
return IALISA;
}

public byte getIALIW() {
return IALIW;
}

public int getIALIYA() {
return IALIYA;
}

public int getIALOAM() {
return IALOAM;
}

public short getIALRE() {
return IALRE;
}

public byte getIALREP() {
return IALREP;
}

public byte getIAMRP() {
return IAMRP;
}

public int getIANPB() {
return IANPB;
}

public byte getIANPBE() {
return IANPBE;
}

public short getIANPBL() {
return IANPBL;
}

public int getIANPBP() {
return IANPBP;
}

public byte getIANPBR() {
return IANPBR;
}

public short getIANPBU() {
return IANPBU;
}

public int getIANS() {
return IANS;
}

public byte getIANSE() {
return IANSE;
}

public boolean getIANSHO() {
return IANSHO;
}

public short getIANSI() {
return IANSI;
}

public boolean getIANSIA() {
return IANSIA;
}

public byte getIANSIE() {
return IANSIE;
}

public short getIANSIL() {
return IANSIL;
}

public byte getIANSIR() {
return IANSIR;
}

public short getIANSIU() {
return IANSIU;
}

public int getIANSL() {
return IANSL;
}

public byte getIANSR() {
return IANSR;
}

public int getIANSU() {
return IANSU;
}

public int getIAOASA() {
return IAOASA;
}

public byte getIAOM() {
return IAOM;
}

public int getIAOMM() {
return IAOMM;
}

public byte getIAORGF() {
return IAORGF;
}

public byte getIAOTHP() {
return IAOTHP;
}

public byte getIAOTHP2() {
return IAOTHP2;
}

public byte getIAOWE() {
return IAOWE;
}

public int getIAOWEM() {
return IAOWEM;
}

public byte getIAP() {
return IAP;
}

public byte getIAP10() {
return IAP10;
}

public byte getIAP11() {
return IAP11;
}

public byte getIAP12() {
return IAP12;
}

public byte getIAP13() {
return IAP13;
}

public byte getIAP14() {
return IAP14;
}

public byte getIAP15() {
return IAP15;
}

public byte getIAP16() {
return IAP16;
}

public byte getIAP17() {
return IAP17;
}

public byte getIAP18() {
return IAP18;
}

public byte getIAP19() {
return IAP19;
}

public byte getIAP2() {
return IAP2;
}

public byte getIAP20() {
return IAP20;
}

public byte getIAP21() {
return IAP21;
}

public byte getIAP22() {
return IAP22;
}

public byte getIAP23() {
return IAP23;
}

public byte getIAP24() {
return IAP24;
}

public byte getIAP25() {
return IAP25;
}

public byte getIAP26() {
return IAP26;
}

public byte getIAP27() {
return IAP27;
}

public byte getIAP28() {
return IAP28;
}

public byte getIAP29() {
return IAP29;
}

public byte getIAP3() {
return IAP3;
}

public byte getIAP30() {
return IAP30;
}

public byte getIAP31() {
return IAP31;
}

public byte getIAP32() {
return IAP32;
}

public byte getIAP33() {
return IAP33;
}

public byte getIAP34() {
return IAP34;
}

public byte getIAP35() {
return IAP35;
}

public byte getIAP36() {
return IAP36;
}

public byte getIAP37() {
return IAP37;
}

public byte getIAP38() {
return IAP38;
}

public byte getIAP4() {
return IAP4;
}

public byte getIAP5() {
return IAP5;
}

public byte getIAP6() {
return IAP6;
}

public byte getIAP7() {
return IAP7;
}

public byte getIAP8() {
return IAP8;
}

public byte getIAP9() {
return IAP9;
}

public boolean getIAPA2FE() {
return IAPA2FE;
}

public boolean getIAPA2FL() {
return IAPA2FL;
}

public boolean getIAPA2FR() {
return IAPA2FR;
}

public boolean getIAPA2FU() {
return IAPA2FU;
}

public byte getIAPA2ME() {
return IAPA2ME;
}

public short getIAPA2ML() {
return IAPA2ML;
}

public byte getIAPA2MR() {
return IAPA2MR;
}

public byte getIAPA2MU() {
return IAPA2MU;
}

public boolean getIAPA2OE() {
return IAPA2OE;
}

public boolean getIAPA2OL() {
return IAPA2OL;
}

public boolean getIAPA2OR() {
return IAPA2OR;
}

public boolean getIAPA2OU() {
return IAPA2OU;
}

public boolean getIAPA2WE() {
return IAPA2WE;
}

public boolean getIAPA2WL() {
return IAPA2WL;
}

public boolean getIAPA2WR() {
return IAPA2WR;
}

public boolean getIAPA2WU() {
return IAPA2WU;
}

public boolean getIAPA2YE() {
return IAPA2YE;
}

public boolean getIAPA2YL() {
return IAPA2YL;
}

public boolean getIAPA2YR() {
return IAPA2YR;
}

public short getIAPA2YU() {
return IAPA2YU;
}

public int getIAPAM() {
return IAPAM;
}

public short getIAPAM2() {
return IAPAM2;
}

public byte getIAPAMFE() {
return IAPAMFE;
}

public short getIAPAMFL() {
return IAPAMFL;
}

public byte getIAPAMFR() {
return IAPAMFR;
}

public short getIAPAMFU() {
return IAPAMFU;
}

public byte getIAPAMME() {
return IAPAMME;
}

public short getIAPAMML() {
return IAPAMML;
}

public byte getIAPAMMR() {
return IAPAMMR;
}

public short getIAPAMMU() {
return IAPAMMU;
}

public byte getIAPAMOE() {
return IAPAMOE;
}

public short getIAPAMOL() {
return IAPAMOL;
}

public byte getIAPAMOR() {
return IAPAMOR;
}

public short getIAPAMOU() {
return IAPAMOU;
}

public byte getIAPAMWE() {
return IAPAMWE;
}

public short getIAPAMWL() {
return IAPAMWL;
}

public byte getIAPAMWR() {
return IAPAMWR;
}

public short getIAPAMWU() {
return IAPAMWU;
}

public boolean getIAPAMYE() {
return IAPAMYE;
}

public short getIAPAMYL() {
return IAPAMYL;
}

public byte getIAPAMYR() {
return IAPAMYR;
}

public short getIAPAMYU() {
return IAPAMYU;
}

public byte getIAPAR() {
return IAPAR;
}

public byte getIAPF() {
return IAPF;
}

public byte getIAPID() {
return IAPID;
}

public int getIAPKM1() {
return IAPKM1;
}

public int getIAPKM2() {
return IAPKM2;
}

public int getIAPKM3() {
return IAPKM3;
}

public int getIAPKM4() {
return IAPKM4;
}

public int getIAPKM5() {
return IAPKM5;
}

public int getIAPKM6() {
return IAPKM6;
}

public int getIAPKM7() {
return IAPKM7;
}

public int getIAPKM8() {
return IAPKM8;
}

public short getIAPPAM() {
return IAPPAM;
}

public int getIAPPEI() {
return IAPPEI;
}

public byte getIAPPEN() {
return IAPPEN;
}

public byte getIAPR() {
return IAPR;
}

public byte getIAPS() {
return IAPS;
}

public byte getIAPY() {
return IAPY;
}

public byte getIAPYW() {
return IAPYW;
}

public byte getIAPYW10() {
return IAPYW10;
}

public int getIAREC() {
return IAREC;
}

public short getIAREGM() {
return IAREGM;
}

public short getIAREGM2() {
return IAREGM2;
}

public byte getIAREGO() {
return IAREGO;
}

public byte getIAREGO2() {
return IAREGO2;
}

public byte getIAREGP() {
return IAREGP;
}

public byte getIAREGR() {
return IAREGR;
}

public byte getIAREGRP() {
return IAREGRP;
}

public short getIAREP() {
return IAREP;
}

public int getIASAVA() {
return IASAVA;
}

public byte getIASC() {
return IASC;
}

public int getIASCA() {
return IASCA;
}

public int getIASINC() {
return IASINC;
}

public byte getIASINCE() {
return IASINCE;
}

public int getIASINCL() {
return IASINCL;
}

public byte getIASINCR() {
return IASINCR;
}

public int getIASINCU() {
return IASINCU;
}

public int getIASINT() {
return IASINT;
}

public byte getIASINTE() {
return IASINTE;
}

public short getIASINTL() {
return IASINTL;
}

public byte getIASINTR() {
return IASINTR;
}

public short getIASINTU() {
return IASINTU;
}

public int getIASIO() {
return IASIO;
}

public byte getIASIOE() {
return IASIOE;
}

public int getIASIOI() {
return IASIOI;
}

public int getIASIOL() {
return IASIOL;
}

public byte getIASIOR() {
return IASIOR;
}

public int getIASIOU() {
return IASIOU;
}

public int getIASISA() {
return IASISA;
}

public byte getIASPA() {
return IASPA;
}

public byte getIASPEN() {
return IASPEN;
}

public byte getIASPP() {
return IASPP;
}

public byte getIASPW() {
return IASPW;
}

public int getIASSS() {
return IASSS;
}

public int getIASSSI() {
return IASSSI;
}

public boolean getIAT() {
return IAT;
}

public boolean getIAT10() {
return IAT10;
}

public boolean getIAT11() {
return IAT11;
}

public boolean getIAT12() {
return IAT12;
}

public boolean getIAT13() {
return IAT13;
}

public boolean getIAT14() {
return IAT14;
}

public boolean getIAT15() {
return IAT15;
}

public boolean getIAT16() {
return IAT16;
}

public boolean getIAT17() {
return IAT17;
}

public boolean getIAT18() {
return IAT18;
}

public boolean getIAT19() {
return IAT19;
}

public boolean getIAT2() {
return IAT2;
}

public boolean getIAT20() {
return IAT20;
}

public boolean getIAT21() {
return IAT21;
}

public boolean getIAT22() {
return IAT22;
}

public boolean getIAT23() {
return IAT23;
}

public boolean getIAT24() {
return IAT24;
}

public boolean getIAT25() {
return IAT25;
}

public boolean getIAT26() {
return IAT26;
}

public boolean getIAT27() {
return IAT27;
}

public boolean getIAT28() {
return IAT28;
}

public boolean getIAT29() {
return IAT29;
}

public boolean getIAT3() {
return IAT3;
}

public boolean getIAT30() {
return IAT30;
}

public boolean getIAT31() {
return IAT31;
}

public boolean getIAT32() {
return IAT32;
}

public boolean getIAT33() {
return IAT33;
}

public boolean getIAT34() {
return IAT34;
}

public boolean getIAT35() {
return IAT35;
}

public boolean getIAT36() {
return IAT36;
}

public boolean getIAT37() {
return IAT37;
}

public boolean getIAT38() {
return IAT38;
}

public boolean getIAT4() {
return IAT4;
}

public boolean getIAT5() {
return IAT5;
}

public boolean getIAT6() {
return IAT6;
}

public boolean getIAT7() {
return IAT7;
}

public boolean getIAT8() {
return IAT8;
}

public boolean getIAT9() {
return IAT9;
}

public int getIATI() {
return IATI;
}

public byte getIATIE() {
return IATIE;
}

public short getIATII() {
return IATII;
}

public byte getIATIIE() {
return IATIIE;
}

public short getIATIIL() {
return IATIIL;
}

public byte getIATIIR() {
return IATIIR;
}

public short getIATIIU() {
return IATIIU;
}

public int getIATIL() {
return IATIL;
}

public byte getIATIR() {
return IATIR;
}

public int getIATIU() {
return IATIU;
}

public int getIAUIT() {
return IAUIT;
}

public int getIAUITI() {
return IAUITI;
}

public byte getIAWORK() {
return IAWORK;
}

public byte getICB_P_F() {
return ICB_P_F;
}

public double getICB_P_I() {
return ICB_P_I;
}

public short getICB_P_O() {
return ICB_P_O;
}

public short getICB_P_T() {
return ICB_P_T;
}

public byte getICB_R_F() {
return ICB_R_F;
}

public double getICB_R_I() {
return ICB_R_I;
}

public short getICB_R_O() {
return ICB_R_O;
}

public short getICB_R_T() {
return ICB_R_T;
}

public short getIDAHH() {
return IDAHH;
}

public int getIDAUNIQ() {
return IDAUNIQ;
}

public int getIDAUNIQ_P() {
return IDAUNIQ_P;
}

public byte getIINTDATM() {
return IINTDATM;
}

public short getIINTDATY() {
return IINTDATY;
}

public byte getINDAGER() {
return INDAGER;
}

public byte getINDINJ_P_F() {
return INDINJ_P_F;
}

public double getINDINJ_P_I() {
return INDINJ_P_I;
}

public short getINDINJ_P_O() {
return INDINJ_P_O;
}

public short getINDINJ_P_T() {
return INDINJ_P_T;
}

public byte getINDINJ_R_F() {
return INDINJ_R_F;
}

public double getINDINJ_R_I() {
return INDINJ_R_I;
}

public short getINDINJ_R_O() {
return INDINJ_R_O;
}

public short getINDINJ_R_T() {
return INDINJ_R_T;
}

public short getINDOBYR() {
return INDOBYR;
}

public short getINDOBYR_P() {
return INDOBYR_P;
}

public boolean getINDSEX() {
return INDSEX;
}

public byte getINHERGT0() {
return INHERGT0;
}

public byte getINHERGT0B() {
return INHERGT0B;
}

public byte getINHERGT10() {
return INHERGT10;
}

public byte getINHERGT100() {
return INHERGT100;
}

public byte getINHERGT100B() {
return INHERGT100B;
}

public byte getINHERGT10B() {
return INHERGT10B;
}

public boolean getINST() {
return INST;
}

public boolean getINST_P() {
return INST_P;
}

public byte getINTDATM() {
return INTDATM;
}

public short getINTDATY() {
return INTDATY;
}

public byte getINVESTS_BU_F() {
return INVESTS_BU_F;
}

public short getINVESTS_BU_NI2() {
return INVESTS_BU_NI2;
}

public short getINVESTS_BU_NI3() {
return INVESTS_BU_NI3;
}

public short getINVESTS_BU_NI4() {
return INVESTS_BU_NI4;
}

public double getINVESTS_BU_S() {
return INVESTS_BU_S;
}

public short getINVESTS_BU_T() {
return INVESTS_BU_T;
}

public byte getISAI_BU_F() {
return ISAI_BU_F;
}

public double getISAI_BU_I() {
return ISAI_BU_I;
}

public short getISAI_BU_O() {
return ISAI_BU_O;
}

public short getISAI_BU_T() {
return ISAI_BU_T;
}

public byte getIS_P_F() {
return IS_P_F;
}

public double getIS_P_I() {
return IS_P_I;
}

public short getIS_P_O() {
return IS_P_O;
}

public short getIS_P_T() {
return IS_P_T;
}

public byte getIS_R_F() {
return IS_R_F;
}

public double getIS_R_I() {
return IS_R_I;
}

public short getIS_R_O() {
return IS_R_O;
}

public short getIS_R_T() {
return IS_R_T;
}

public byte getJNTASS_BU_F() {
return JNTASS_BU_F;
}

public double getJNTASS_BU_I() {
return JNTASS_BU_I;
}

public short getJNTASS_BU_O() {
return JNTASS_BU_O;
}

public short getJNTASS_BU_T() {
return JNTASS_BU_T;
}

public byte getJSA_P_F() {
return JSA_P_F;
}

public double getJSA_P_I() {
return JSA_P_I;
}

public short getJSA_P_O() {
return JSA_P_O;
}

public short getJSA_P_T() {
return JSA_P_T;
}

public byte getJSA_R_F() {
return JSA_R_F;
}

public double getJSA_R_I() {
return JSA_R_I;
}

public short getJSA_R_O() {
return JSA_R_O;
}

public short getJSA_R_T() {
return JSA_R_T;
}

public byte getLACKRES() {
return LACKRES;
}

public byte getLACKRESB() {
return LACKRESB;
}

public double getLEISUREL() {
return LEISUREL;
}

public byte getLEISURET() {
return LEISURET;
}

public double getLEISUREU() {
return LEISUREU;
}

public byte getLISAVE_BU_F() {
return LISAVE_BU_F;
}

public double getLISAVE_BU_I() {
return LISAVE_BU_I;
}

public short getLISAVE_BU_O() {
return LISAVE_BU_O;
}

public short getLISAVE_BU_T() {
return LISAVE_BU_T;
}

public byte getLISA_BU_F() {
return LISA_BU_F;
}

public double getLISA_BU_I() {
return LISA_BU_I;
}

public short getLISA_BU_O() {
return LISA_BU_O;
}

public short getLISA_BU_T() {
return LISA_BU_T;
}

public byte getLLSILL() {
return LLSILL;
}

public double getLWGT() {
return LWGT;
}

public byte getMAGEDIED() {
return MAGEDIED;
}

public byte getMALIVE() {
return MALIVE;
}

public byte getMARSTAT() {
return MARSTAT;
}

public byte getMAXEXECNN() {
return MAXEXECNN;
}

public byte getMAXMEMTOTB() {
return MAXMEMTOTB;
}

public byte getMAXNUMTYPE2() {
return MAXNUMTYPE2;
}

public byte getMAXNUMTYPE4() {
return MAXNUMTYPE4;
}

public byte getMAXNUMTYPE5() {
return MAXNUMTYPE5;
}

public byte getMEMTOT() {
return MEMTOT;
}

public byte getMEMTOTB() {
return MEMTOTB;
}

public boolean getMGDEBT_BU_F() {
return MGDEBT_BU_F;
}

public short getMGDEBT_BU_NI2() {
return MGDEBT_BU_NI2;
}

public short getMGDEBT_BU_NI3() {
return MGDEBT_BU_NI3;
}

public short getMGDEBT_BU_NI4() {
return MGDEBT_BU_NI4;
}

public double getMGDEBT_BU_S() {
return MGDEBT_BU_S;
}

public short getMGDEBT_BU_T() {
return MGDEBT_BU_T;
}

public byte getMMAID() {
return MMAID;
}

public byte getMMALONE() {
return MMALONE;
}

public byte getMMAVSP() {
return MMAVSP;
}

public byte getMMHSS() {
return MMHSS;
}

public byte getMMPAIN() {
return MMPAIN;
}

public byte getMMRECR() {
return MMRECR;
}

public byte getMMSAF() {
return MMSAF;
}

public byte getMMSCHS() {
return MMSCHS;
}

public byte getMMTRYA() {
return MMTRYA;
}

public byte getMMTRYB() {
return MMTRYB;
}

public byte getMMWALA() {
return MMWALA;
}

public byte getMMWILL() {
return MMWILL;
}

public double getMMWLKA() {
return MMWLKA;
}

public double getMMWLKB() {
return MMWLKB;
}

public byte getMORTINC85() {
return MORTINC85;
}

public byte getMORTINCBI() {
return MORTINCBI;
}

public byte getMORTINCPI() {
return MORTINCPI;
}

public byte getMORTINCPP() {
return MORTINCPP;
}

public double getMORTPAYL() {
return MORTPAYL;
}

public byte getMORTPAYT() {
return MORTPAYT;
}

public double getMORTPAYU() {
return MORTPAYU;
}

public double getMORTPAYXL() {
return MORTPAYXL;
}

public byte getMORTPAYXT() {
return MORTPAYXT;
}

public double getMORTPAYXU() {
return MORTPAYXU;
}

public byte getMOTHAGE() {
return MOTHAGE;
}

public boolean getNAMEONPROP() {
return NAMEONPROP;
}

public byte getNDEPRIV() {
return NDEPRIV;
}

public byte getNETFW_BU_F() {
return NETFW_BU_F;
}

public short getNETFW_BU_NI2() {
return NETFW_BU_NI2;
}

public short getNETFW_BU_NI3() {
return NETFW_BU_NI3;
}

public short getNETFW_BU_NI4() {
return NETFW_BU_NI4;
}

public double getNETFW_BU_S() {
return NETFW_BU_S;
}

public short getNETFW_BU_T() {
return NETFW_BU_T;
}

public boolean getNETHW_BU_F() {
return NETHW_BU_F;
}

public short getNETHW_BU_NI2() {
return NETHW_BU_NI2;
}

public short getNETHW_BU_NI3() {
return NETHW_BU_NI3;
}

public short getNETHW_BU_NI4() {
return NETHW_BU_NI4;
}

public double getNETHW_BU_S() {
return NETHW_BU_S;
}

public short getNETHW_BU_T() {
return NETHW_BU_T;
}

public byte getNETPROF_BU_F() {
return NETPROF_BU_F;
}

public double getNETPROF_BU_I() {
return NETPROF_BU_I;
}

public short getNETPROF_BU_O() {
return NETPROF_BU_O;
}

public short getNETPROF_BU_T() {
return NETPROF_BU_T;
}

public byte getNETPROF_P_F() {
return NETPROF_P_F;
}

public double getNETPROF_P_I() {
return NETPROF_P_I;
}

public short getNETPROF_P_O() {
return NETPROF_P_O;
}

public short getNETPROF_P_T() {
return NETPROF_P_T;
}

public boolean getNETPROF_R_F() {
return NETPROF_R_F;
}

public double getNETPROF_R_I() {
return NETPROF_R_I;
}

public short getNETPROF_R_O() {
return NETPROF_R_O;
}

public short getNETPROF_R_T() {
return NETPROF_R_T;
}

public byte getNETPW_BU_F() {
return NETPW_BU_F;
}

public short getNETPW_BU_NI2() {
return NETPW_BU_NI2;
}

public short getNETPW_BU_NI3() {
return NETPW_BU_NI3;
}

public short getNETPW_BU_NI4() {
return NETPW_BU_NI4;
}

public double getNETPW_BU_S() {
return NETPW_BU_S;
}

public short getNETPW_BU_T() {
return NETPW_BU_T;
}

public double getNETRENTL() {
return NETRENTL;
}

public byte getNETRENTT() {
return NETRENTT;
}

public double getNETRENTU() {
return NETRENTU;
}

public byte getNETTOTNHW_BU_F() {
return NETTOTNHW_BU_F;
}

public short getNETTOTNHW_BU_NI2() {
return NETTOTNHW_BU_NI2;
}

public short getNETTOTNHW_BU_NI3() {
return NETTOTNHW_BU_NI3;
}

public short getNETTOTNHW_BU_NI4() {
return NETTOTNHW_BU_NI4;
}

public double getNETTOTNHW_BU_S() {
return NETTOTNHW_BU_S;
}

public short getNETTOTNHW_BU_T() {
return NETTOTNHW_BU_T;
}

public byte getNETTOTW_BU_F() {
return NETTOTW_BU_F;
}

public short getNETTOTW_BU_NI2() {
return NETTOTW_BU_NI2;
}

public short getNETTOTW_BU_NI3() {
return NETTOTW_BU_NI3;
}

public short getNETTOTW_BU_NI4() {
return NETTOTW_BU_NI4;
}

public double getNETTOTW_BU_S() {
return NETTOTW_BU_S;
}

public short getNETTOTW_BU_T() {
return NETTOTW_BU_T;
}

public byte getNFWQ10_BU_F() {
return NFWQ10_BU_F;
}

public byte getNFWQ10_BU_S() {
return NFWQ10_BU_S;
}

public byte getNFWQ5_BU_F() {
return NFWQ5_BU_F;
}

public byte getNFWQ5_BU_S() {
return NFWQ5_BU_S;
}

public byte getNGRANDCH() {
return NGRANDCH;
}

public byte getNGRANDCHINHH() {
return NGRANDCHINHH;
}

public byte getNONWHITE() {
return NONWHITE;
}

public byte getNPEOPLE() {
return NPEOPLE;
}

public byte getNRIGHT() {
return NRIGHT;
}

public byte getNROOMS() {
return NROOMS;
}

public byte getNSAMPMEM() {
return NSAMPMEM;
}

public byte getNSAVI_BU_F() {
return NSAVI_BU_F;
}

public double getNSAVI_BU_I() {
return NSAVI_BU_I;
}

public short getNSAVI_BU_O() {
return NSAVI_BU_O;
}

public short getNSAVI_BU_T() {
return NSAVI_BU_T;
}

public byte getNSAV_BU_F() {
return NSAV_BU_F;
}

public double getNSAV_BU_I() {
return NSAV_BU_I;
}

public short getNSAV_BU_O() {
return NSAV_BU_O;
}

public short getNSAV_BU_T() {
return NSAV_BU_T;
}

public byte getNSIBS() {
return NSIBS;
}

public byte getNUMANSIA() {
return NUMANSIA;
}

public boolean getNUMANSIAFU() {
return NUMANSIAFU;
}

public byte getNUMBUAD() {
return NUMBUAD;
}

public byte getNUMBUK013() {
return NUMBUK013;
}

public byte getNUMBUK1418() {
return NUMBUK1418;
}

public byte getNUMBUKID() {
return NUMBUKID;
}

public byte getNUMBUS() {
return NUMBUS;
}

public byte getNUMFEMALE() {
return NUMFEMALE;
}

public byte getNUMFEMALEAD() {
return NUMFEMALEAD;
}

public byte getNUMHHAD() {
return NUMHHAD;
}

public byte getNUMHHK013() {
return NUMHHK013;
}

public byte getNUMHHK1418() {
return NUMHHK1418;
}

public byte getNUMHHKID() {
return NUMHHKID;
}

public byte getNUMHHLDRSINHH() {
return NUMHHLDRSINHH;
}

public byte getNUMINELIG() {
return NUMINELIG;
}

public byte getNUMMALE() {
return NUMMALE;
}

public byte getNUMMALEAD() {
return NUMMALEAD;
}

public byte getNUMTYPE2() {
return NUMTYPE2;
}

public byte getNUMTYPE4() {
return NUMTYPE4;
}

public byte getNUMTYPE5() {
return NUMTYPE5;
}

public byte getODEBT_BU_F() {
return ODEBT_BU_F;
}

public int getODEBT_BU_I() {
return ODEBT_BU_I;
}

public short getODEBT_BU_O() {
return ODEBT_BU_O;
}

public short getODEBT_BU_T() {
return ODEBT_BU_T;
}

public double getOILL() {
return OILL;
}

public byte getOILT() {
return OILT;
}

public double getOILU() {
return OILU;
}

public byte getOJ_BU_F() {
return OJ_BU_F;
}

public double getOJ_BU_I() {
return OJ_BU_I;
}

public short getOJ_BU_O() {
return OJ_BU_O;
}

public short getOJ_BU_T() {
return OJ_BU_T;
}

public byte getOJ_P_F() {
return OJ_P_F;
}

public double getOJ_P_I() {
return OJ_P_I;
}

public short getOJ_P_O() {
return OJ_P_O;
}

public short getOJ_P_T() {
return OJ_P_T;
}

public boolean getOJ_R_F() {
return OJ_R_F;
}

public double getOJ_R_I() {
return OJ_R_I;
}

public short getOJ_R_O() {
return OJ_R_O;
}

public short getOJ_R_T() {
return OJ_R_T;
}

public byte getOTH1_P_F() {
return OTH1_P_F;
}

public double getOTH1_P_I() {
return OTH1_P_I;
}

public short getOTH1_P_O() {
return OTH1_P_O;
}

public short getOTH1_P_T() {
return OTH1_P_T;
}

public byte getOTH1_R_F() {
return OTH1_R_F;
}

public double getOTH1_R_I() {
return OTH1_R_I;
}

public short getOTH1_R_O() {
return OTH1_R_O;
}

public short getOTH1_R_T() {
return OTH1_R_T;
}

public byte getOTH2_P_F() {
return OTH2_P_F;
}

public double getOTH2_P_I() {
return OTH2_P_I;
}

public short getOTH2_P_O() {
return OTH2_P_O;
}

public short getOTH2_P_T() {
return OTH2_P_T;
}

public byte getOTH2_R_F() {
return OTH2_R_F;
}

public double getOTH2_R_I() {
return OTH2_R_I;
}

public short getOTH2_R_O() {
return OTH2_R_O;
}

public short getOTH2_R_T() {
return OTH2_R_T;
}

public byte getOTHBUSV_BU_F() {
return OTHBUSV_BU_F;
}

public double getOTHBUSV_BU_I() {
return OTHBUSV_BU_I;
}

public short getOTHBUSV_BU_O() {
return OTHBUSV_BU_O;
}

public short getOTHBUSV_BU_T() {
return OTHBUSV_BU_T;
}

public byte getOTHBUSV_P_F() {
return OTHBUSV_P_F;
}

public double getOTHBUSV_P_I() {
return OTHBUSV_P_I;
}

public short getOTHBUSV_P_O() {
return OTHBUSV_P_O;
}

public short getOTHBUSV_P_T() {
return OTHBUSV_P_T;
}

public boolean getOTHBUSV_R_F() {
return OTHBUSV_R_F;
}

public double getOTHBUSV_R_I() {
return OTHBUSV_R_I;
}

public short getOTHBUSV_R_O() {
return OTHBUSV_R_O;
}

public short getOTHBUSV_R_T() {
return OTHBUSV_R_T;
}

public double getOTHERFL() {
return OTHERFL;
}

public byte getOTHERFT() {
return OTHERFT;
}

public double getOTHERFU() {
return OTHERFU;
}

public byte getOTHINC_BU_F() {
return OTHINC_BU_F;
}

public short getOTHINC_BU_NI2() {
return OTHINC_BU_NI2;
}

public short getOTHINC_BU_NI3() {
return OTHINC_BU_NI3;
}

public short getOTHINC_BU_NI4() {
return OTHINC_BU_NI4;
}

public double getOTHINC_BU_S() {
return OTHINC_BU_S;
}

public short getOTHINC_BU_T() {
return OTHINC_BU_T;
}

public byte getOTHINC_P_F() {
return OTHINC_P_F;
}

public short getOTHINC_P_NI2() {
return OTHINC_P_NI2;
}

public short getOTHINC_P_NI3() {
return OTHINC_P_NI3;
}

public short getOTHINC_P_NI4() {
return OTHINC_P_NI4;
}

public double getOTHINC_P_S() {
return OTHINC_P_S;
}

public short getOTHINC_P_T() {
return OTHINC_P_T;
}

public byte getOTHINC_R_F() {
return OTHINC_R_F;
}

public short getOTHINC_R_NI2() {
return OTHINC_R_NI2;
}

public short getOTHINC_R_NI3() {
return OTHINC_R_NI3;
}

public short getOTHINC_R_NI4() {
return OTHINC_R_NI4;
}

public double getOTHINC_R_S() {
return OTHINC_R_S;
}

public short getOTHINC_R_T() {
return OTHINC_R_T;
}

public byte getOTHPAY_P_F() {
return OTHPAY_P_F;
}

public double getOTHPAY_P_I() {
return OTHPAY_P_I;
}

public short getOTHPAY_P_O() {
return OTHPAY_P_O;
}

public short getOTHPAY_P_T() {
return OTHPAY_P_T;
}

public byte getOTHPAY_R_F() {
return OTHPAY_R_F;
}

public double getOTHPAY_R_I() {
return OTHPAY_R_I;
}

public short getOTHPAY_R_O() {
return OTHPAY_R_O;
}

public short getOTHPAY_R_T() {
return OTHPAY_R_T;
}

public byte getOTHSAVI_BU_F() {
return OTHSAVI_BU_F;
}

public double getOTHSAVI_BU_I() {
return OTHSAVI_BU_I;
}

public short getOTHSAVI_BU_O() {
return OTHSAVI_BU_O;
}

public short getOTHSAVI_BU_T() {
return OTHSAVI_BU_T;
}

public byte getOTHSAV_BU_F() {
return OTHSAV_BU_F;
}

public double getOTHSAV_BU_I() {
return OTHSAV_BU_I;
}

public short getOTHSAV_BU_O() {
return OTHSAV_BU_O;
}

public short getOTHSAV_BU_T() {
return OTHSAV_BU_T;
}

public double getPARAL() {
return PARAL;
}

public byte getPARAT() {
return PARAT;
}

public double getPARAU() {
return PARAU;
}

public double getPENID() {
return PENID;
}

public byte getPEPI_BU_F() {
return PEPI_BU_F;
}

public double getPEPI_BU_I() {
return PEPI_BU_I;
}

public short getPEPI_BU_O() {
return PEPI_BU_O;
}

public short getPEPI_BU_T() {
return PEPI_BU_T;
}

public byte getPEP_BU_F() {
return PEP_BU_F;
}

public double getPEP_BU_I() {
return PEP_BU_I;
}

public short getPEP_BU_O() {
return PEP_BU_O;
}

public short getPEP_BU_T() {
return PEP_BU_T;
}

public byte getPERID() {
return PERID;
}

public byte getPERSNO() {
return PERSNO;
}

public byte getPPEN_BU_F() {
return PPEN_BU_F;
}

public double getPPEN_BU_I() {
return PPEN_BU_I;
}

public short getPPEN_BU_O() {
return PPEN_BU_O;
}

public short getPPEN_BU_T() {
return PPEN_BU_T;
}

public byte getPPINC_BU_F() {
return PPINC_BU_F;
}

public short getPPINC_BU_NI2() {
return PPINC_BU_NI2;
}

public short getPPINC_BU_NI3() {
return PPINC_BU_NI3;
}

public short getPPINC_BU_NI4() {
return PPINC_BU_NI4;
}

public double getPPINC_BU_S() {
return PPINC_BU_S;
}

public short getPPINC_BU_T() {
return PPINC_BU_T;
}

public byte getPPINC_P_F() {
return PPINC_P_F;
}

public short getPPINC_P_NI2() {
return PPINC_P_NI2;
}

public short getPPINC_P_NI3() {
return PPINC_P_NI3;
}

public short getPPINC_P_NI4() {
return PPINC_P_NI4;
}

public double getPPINC_P_S() {
return PPINC_P_S;
}

public short getPPINC_P_T() {
return PPINC_P_T;
}

public byte getPPINC_R_F() {
return PPINC_R_F;
}

public short getPPINC_R_NI2() {
return PPINC_R_NI2;
}

public short getPPINC_R_NI3() {
return PPINC_R_NI3;
}

public short getPPINC_R_NI4() {
return PPINC_R_NI4;
}

public double getPPINC_R_S() {
return PPINC_R_S;
}

public short getPPINC_R_T() {
return PPINC_R_T;
}

public boolean getPP_CONT() {
return PP_CONT;
}

public byte getPP_MAXYRS() {
return PP_MAXYRS;
}

public boolean getPP_MEM() {
return PP_MEM;
}

public byte getPP_NCONT() {
return PP_NCONT;
}

public boolean getPP_NK() {
return PP_NK;
}

public byte getPP_NNK() {
return PP_NNK;
}

public byte getPP_NOCC() {
return PP_NOCC;
}

public byte getPP_NOCCDB() {
return PP_NOCCDB;
}

public byte getPP_NOCCDC() {
return PP_NOCCDC;
}

public byte getPP_NOCCNK() {
return PP_NOCCNK;
}

public byte getPP_NPER() {
return PP_NPER;
}

public byte getPP_NREC() {
return PP_NREC;
}

public byte getPP_NRR() {
return PP_NRR;
}

public boolean getPP_OCC() {
return PP_OCC;
}

public boolean getPP_OCCDB() {
return PP_OCCDB;
}

public boolean getPP_OCCDC() {
return PP_OCCDC;
}

public boolean getPP_OCCNK() {
return PP_OCCNK;
}

public boolean getPP_PER() {
return PP_PER;
}

public boolean getPP_REC() {
return PP_REC;
}

public boolean getPP_RR() {
return PP_RR;
}

public byte getPRBONDSI_BU_F() {
return PRBONDSI_BU_F;
}

public double getPRBONDSI_BU_I() {
return PRBONDSI_BU_I;
}

public short getPRBONDSI_BU_O() {
return PRBONDSI_BU_O;
}

public short getPRBONDSI_BU_T() {
return PRBONDSI_BU_T;
}

public byte getPRBONDS_BU_F() {
return PRBONDS_BU_F;
}

public int getPRBONDS_BU_I() {
return PRBONDS_BU_I;
}

public short getPRBONDS_BU_O() {
return PRBONDS_BU_O;
}

public short getPRBONDS_BU_T() {
return PRBONDS_BU_T;
}

public byte getPRDEBT_BU_F() {
return PRDEBT_BU_F;
}

public int getPRDEBT_BU_I() {
return PRDEBT_BU_I;
}

public short getPRDEBT_BU_O() {
return PRDEBT_BU_O;
}

public short getPRDEBT_BU_T() {
return PRDEBT_BU_T;
}

public boolean getPROXY() {
return PROXY;
}

public byte getPSCEDA() {
return PSCEDA;
}

public byte getPSCEDB() {
return PSCEDB;
}

public byte getPSCEDC() {
return PSCEDC;
}

public byte getPSCEDD() {
return PSCEDD;
}

public byte getPSCEDE() {
return PSCEDE;
}

public byte getPSCEDF() {
return PSCEDF;
}

public byte getPSCEDG() {
return PSCEDG;
}

public byte getPSCEDH() {
return PSCEDH;
}

public byte getQUAL2() {
return QUAL2;
}

public byte getQUAL2_P() {
return QUAL2_P;
}

public byte getQUAL3() {
return QUAL3;
}

public byte getQUAL3_P() {
return QUAL3_P;
}

public byte getREFRESHTYPE() {
return REFRESHTYPE;
}

public byte getRELTOHOH() {
return RELTOHOH;
}

public boolean getRENTINC85() {
return RENTINC85;
}

public boolean getRENTINCCL() {
return RENTINCCL;
}

public byte getRENTINCCO() {
return RENTINCCO;
}

public byte getRENTINCGA() {
return RENTINCGA;
}

public boolean getRENTINCGD() {
return RENTINCGD;
}

public byte getRENTINCHE() {
return RENTINCHE;
}

public byte getRENTINCLA() {
return RENTINCLA;
}

public boolean getRENTINCME() {
return RENTINCME;
}

public byte getRENTINCSE() {
return RENTINCSE;
}

public boolean getRENTINCSG() {
return RENTINCSG;
}

public byte getRENTINCWA() {
return RENTINCWA;
}

public boolean getRENTINCWP() {
return RENTINCWP;
}

public byte getRESPONDED_P() {
return RESPONDED_P;
}

public double getRPI() {
return RPI;
}

public byte getSAVEI_BU_F() {
return SAVEI_BU_F;
}

public double getSAVEI_BU_I() {
return SAVEI_BU_I;
}

public short getSAVEI_BU_O() {
return SAVEI_BU_O;
}

public short getSAVEI_BU_T() {
return SAVEI_BU_T;
}

public byte getSAVE_BU_F() {
return SAVE_BU_F;
}

public double getSAVE_BU_I() {
return SAVE_BU_I;
}

public short getSAVE_BU_O() {
return SAVE_BU_O;
}

public short getSAVE_BU_T() {
return SAVE_BU_T;
}

public byte getSAVINGS_BU_F() {
return SAVINGS_BU_F;
}

public short getSAVINGS_BU_NI2() {
return SAVINGS_BU_NI2;
}

public short getSAVINGS_BU_NI3() {
return SAVINGS_BU_NI3;
}

public short getSAVINGS_BU_NI4() {
return SAVINGS_BU_NI4;
}

public double getSAVINGS_BU_S() {
return SAVINGS_BU_S;
}

public short getSAVINGS_BU_T() {
return SAVINGS_BU_T;
}

public byte getSCCHD() {
return SCCHD;
}

public byte getSCCHDA() {
return SCCHDA;
}

public byte getSCCHDB() {
return SCCHDB;
}

public byte getSCCHDC() {
return SCCHDC;
}

public byte getSCCHDD() {
return SCCHDD;
}

public byte getSCCHDE() {
return SCCHDE;
}

public byte getSCCHDF() {
return SCCHDF;
}

public byte getSCCHDG() {
return SCCHDG;
}

public byte getSCCHDH() {
return SCCHDH;
}

public byte getSCCHDI() {
return SCCHDI;
}

public byte getSCCHDM() {
return SCCHDM;
}

public byte getSCFAM() {
return SCFAM;
}

public byte getSCFAMA() {
return SCFAMA;
}

public byte getSCFAMB() {
return SCFAMB;
}

public byte getSCFAMC() {
return SCFAMC;
}

public byte getSCFAMD() {
return SCFAMD;
}

public byte getSCFAME() {
return SCFAME;
}

public byte getSCFAMF() {
return SCFAMF;
}

public byte getSCFAMG() {
return SCFAMG;
}

public byte getSCFAMI() {
return SCFAMI;
}

public byte getSCFRD() {
return SCFRD;
}

public byte getSCFRDA() {
return SCFRDA;
}

public byte getSCFRDB() {
return SCFRDB;
}

public byte getSCFRDC() {
return SCFRDC;
}

public byte getSCFRDD() {
return SCFRDD;
}

public byte getSCFRDE() {
return SCFRDE;
}

public byte getSCFRDF() {
return SCFRDF;
}

public byte getSCFRDG() {
return SCFRDG;
}

public byte getSCFRDH() {
return SCFRDH;
}

public byte getSCFRDI() {
return SCFRDI;
}

public byte getSCHLEAVE() {
return SCHLEAVE;
}

public byte getSCHLEAVE_P() {
return SCHLEAVE_P;
}

public byte getSCLDDR() {
return SCLDDR;
}

public short getSCORGN() {
return SCORGN;
}

public byte getSCQOLA() {
return SCQOLA;
}

public byte getSCQOLB() {
return SCQOLB;
}

public byte getSCQOLC() {
return SCQOLC;
}

public byte getSCQOLD() {
return SCQOLD;
}

public byte getSCQOLE() {
return SCQOLE;
}

public byte getSCQOLF() {
return SCQOLF;
}

public byte getSCQOLG() {
return SCQOLG;
}

public byte getSCQOLH() {
return SCQOLH;
}

public byte getSCQOLI() {
return SCQOLI;
}

public byte getSCQOLJ() {
return SCQOLJ;
}

public byte getSCQOLK() {
return SCQOLK;
}

public byte getSCQOLL() {
return SCQOLL;
}

public byte getSCQOLM() {
return SCQOLM;
}

public byte getSCQOLN() {
return SCQOLN;
}

public byte getSCQOLO() {
return SCQOLO;
}

public byte getSCQOLP() {
return SCQOLP;
}

public byte getSCQOLQ() {
return SCQOLQ;
}

public byte getSCQOLR() {
return SCQOLR;
}

public byte getSCQOLS() {
return SCQOLS;
}

public byte getSDA_P_F() {
return SDA_P_F;
}

public double getSDA_P_I() {
return SDA_P_I;
}

public short getSDA_P_O() {
return SDA_P_O;
}

public short getSDA_P_T() {
return SDA_P_T;
}

public byte getSDA_R_F() {
return SDA_R_F;
}

public double getSDA_R_I() {
return SDA_R_I;
}

public short getSDA_R_O() {
return SDA_R_O;
}

public short getSDA_R_T() {
return SDA_R_T;
}

public byte getSEDRAW_BU_F() {
return SEDRAW_BU_F;
}

public double getSEDRAW_BU_I() {
return SEDRAW_BU_I;
}

public short getSEDRAW_BU_O() {
return SEDRAW_BU_O;
}

public short getSEDRAW_BU_T() {
return SEDRAW_BU_T;
}

public byte getSEDRAW_P_F() {
return SEDRAW_P_F;
}

public double getSEDRAW_P_I() {
return SEDRAW_P_I;
}

public short getSEDRAW_P_O() {
return SEDRAW_P_O;
}

public short getSEDRAW_P_T() {
return SEDRAW_P_T;
}

public boolean getSEDRAW_R_F() {
return SEDRAW_R_F;
}

public double getSEDRAW_R_I() {
return SEDRAW_R_I;
}

public short getSEDRAW_R_O() {
return SEDRAW_R_O;
}

public short getSEDRAW_R_T() {
return SEDRAW_R_T;
}

public byte getSEINC_BU_F() {
return SEINC_BU_F;
}

public short getSEINC_BU_NI2() {
return SEINC_BU_NI2;
}

public short getSEINC_BU_NI3() {
return SEINC_BU_NI3;
}

public short getSEINC_BU_NI4() {
return SEINC_BU_NI4;
}

public double getSEINC_BU_S() {
return SEINC_BU_S;
}

public short getSEINC_BU_T() {
return SEINC_BU_T;
}

public byte getSEINC_P_F() {
return SEINC_P_F;
}

public short getSEINC_P_NI2() {
return SEINC_P_NI2;
}

public short getSEINC_P_NI3() {
return SEINC_P_NI3;
}

public short getSEINC_P_NI4() {
return SEINC_P_NI4;
}

public double getSEINC_P_S() {
return SEINC_P_S;
}

public short getSEINC_P_T() {
return SEINC_P_T;
}

public boolean getSEINC_R_F() {
return SEINC_R_F;
}

public short getSEINC_R_NI2() {
return SEINC_R_NI2;
}

public short getSEINC_R_NI3() {
return SEINC_R_NI3;
}

public short getSEINC_R_NI4() {
return SEINC_R_NI4;
}

public double getSEINC_R_S() {
return SEINC_R_S;
}

public short getSEINC_R_T() {
return SEINC_R_T;
}

public boolean getSEX() {
return SEX;
}

public boolean getSEXBUHEAD() {
return SEXBUHEAD;
}

public boolean getSEXHOH() {
return SEXHOH;
}

public byte getSEX_P() {
return SEX_P;
}

public byte getSHARESI_BU_F() {
return SHARESI_BU_F;
}

public double getSHARESI_BU_I() {
return SHARESI_BU_I;
}

public short getSHARESI_BU_O() {
return SHARESI_BU_O;
}

public short getSHARESI_BU_T() {
return SHARESI_BU_T;
}

public byte getSHARES_BU_F() {
return SHARES_BU_F;
}

public double getSHARES_BU_I() {
return SHARES_BU_I;
}

public short getSHARES_BU_O() {
return SHARES_BU_O;
}

public short getSHARES_BU_T() {
return SHARES_BU_T;
}

public byte getSHISA_BU_F() {
return SHISA_BU_F;
}

public int getSHISA_BU_I() {
return SHISA_BU_I;
}

public short getSHISA_BU_O() {
return SHISA_BU_O;
}

public short getSHISA_BU_T() {
return SHISA_BU_T;
}

public byte getSINC_BU_F() {
return SINC_BU_F;
}

public double getSINC_BU_I() {
return SINC_BU_I;
}

public short getSINC_BU_O() {
return SINC_BU_O;
}

public short getSINC_BU_T() {
return SINC_BU_T;
}

public byte getSMOKER() {
return SMOKER;
}

public byte getSMOKERSTAT() {
return SMOKERSTAT;
}

public byte getSOCRENT() {
return SOCRENT;
}

public byte getSPAGE() {
return SPAGE;
}

public boolean getSPAGE_BU() {
return SPAGE_BU;
}

public byte getSPCAR() {
return SPCAR;
}

public byte getSPEN_P_F() {
return SPEN_P_F;
}

public double getSPEN_P_I() {
return SPEN_P_I;
}

public short getSPEN_P_O() {
return SPEN_P_O;
}

public short getSPEN_P_T() {
return SPEN_P_T;
}

public byte getSPEN_R_F() {
return SPEN_R_F;
}

public double getSPEN_R_I() {
return SPEN_R_I;
}

public short getSPEN_R_O() {
return SPEN_R_O;
}

public short getSPEN_R_T() {
return SPEN_R_T;
}

public byte getSPINC_BU_F() {
return SPINC_BU_F;
}

public short getSPINC_BU_NI2() {
return SPINC_BU_NI2;
}

public short getSPINC_BU_NI3() {
return SPINC_BU_NI3;
}

public short getSPINC_BU_NI4() {
return SPINC_BU_NI4;
}

public double getSPINC_BU_S() {
return SPINC_BU_S;
}

public short getSPINC_BU_T() {
return SPINC_BU_T;
}

public byte getSPINC_P_F() {
return SPINC_P_F;
}

public short getSPINC_P_NI2() {
return SPINC_P_NI2;
}

public short getSPINC_P_NI3() {
return SPINC_P_NI3;
}

public short getSPINC_P_NI4() {
return SPINC_P_NI4;
}

public double getSPINC_P_S() {
return SPINC_P_S;
}

public short getSPINC_P_T() {
return SPINC_P_T;
}

public byte getSPINC_R_F() {
return SPINC_R_F;
}

public short getSPINC_R_NI2() {
return SPINC_R_NI2;
}

public short getSPINC_R_NI3() {
return SPINC_R_NI3;
}

public short getSPINC_R_NI4() {
return SPINC_R_NI4;
}

public double getSPINC_R_S() {
return SPINC_R_S;
}

public short getSPINC_R_T() {
return SPINC_R_T;
}

public boolean getSPNAMEONPROP() {
return SPNAMEONPROP;
}

public byte getSPTRAA() {
return SPTRAA;
}

public byte getSRH3_HRS() {
return SRH3_HRS;
}

public byte getSRH3_HRS_P() {
return SRH3_HRS_P;
}

public byte getSRH3_HSE() {
return SRH3_HSE;
}

public byte getSRH3_HSE_P() {
return SRH3_HSE_P;
}

public byte getSRH_HRS() {
return SRH_HRS;
}

public byte getSRH_HSE() {
return SRH_HSE;
}

public byte getSSP_P_F() {
return SSP_P_F;
}

public double getSSP_P_I() {
return SSP_P_I;
}

public short getSSP_P_O() {
return SSP_P_O;
}

public short getSSP_P_T() {
return SSP_P_T;
}

public byte getSSP_R_F() {
return SSP_R_F;
}

public double getSSP_R_I() {
return SSP_R_I;
}

public short getSSP_R_O() {
return SSP_R_O;
}

public short getSSP_R_T() {
return SSP_R_T;
}

public byte getTENURE() {
return TENURE;
}

public byte getTESSAI_BU_F() {
return TESSAI_BU_F;
}

public double getTESSAI_BU_I() {
return TESSAI_BU_I;
}

public short getTESSAI_BU_O() {
return TESSAI_BU_O;
}

public short getTESSAI_BU_T() {
return TESSAI_BU_T;
}

public byte getTESSA_BU_F() {
return TESSA_BU_F;
}

public double getTESSA_BU_I() {
return TESSA_BU_I;
}

public short getTESSA_BU_O() {
return TESSA_BU_O;
}

public short getTESSA_BU_T() {
return TESSA_BU_T;
}

public byte getTHP_BU_F() {
return THP_BU_F;
}

public double getTHP_BU_I() {
return THP_BU_I;
}

public short getTHP_BU_O() {
return THP_BU_O;
}

public short getTHP_BU_T() {
return THP_BU_T;
}

public byte getTHP_P_F() {
return THP_P_F;
}

public double getTHP_P_I() {
return THP_P_I;
}

public short getTHP_P_O() {
return THP_P_O;
}

public short getTHP_P_T() {
return THP_P_T;
}

public boolean getTHP_R_F() {
return THP_R_F;
}

public double getTHP_R_I() {
return THP_R_I;
}

public short getTHP_R_O() {
return THP_R_O;
}

public short getTHP_R_T() {
return THP_R_T;
}

public byte getTNHWQ10_BU_F() {
return TNHWQ10_BU_F;
}

public byte getTNHWQ10_BU_S() {
return TNHWQ10_BU_S;
}

public byte getTNHWQ5_BU_F() {
return TNHWQ5_BU_F;
}

public byte getTNHWQ5_BU_S() {
return TNHWQ5_BU_S;
}

public byte getTOTHASS_BU_F() {
return TOTHASS_BU_F;
}

public int getTOTHASS_BU_I() {
return TOTHASS_BU_I;
}

public short getTOTHASS_BU_O() {
return TOTHASS_BU_O;
}

public short getTOTHASS_BU_T() {
return TOTHASS_BU_T;
}

public byte getTOTINC_BU_F() {
return TOTINC_BU_F;
}

public short getTOTINC_BU_NI2() {
return TOTINC_BU_NI2;
}

public short getTOTINC_BU_NI3() {
return TOTINC_BU_NI3;
}

public short getTOTINC_BU_NI4() {
return TOTINC_BU_NI4;
}

public double getTOTINC_BU_S() {
return TOTINC_BU_S;
}

public short getTOTINC_BU_T() {
return TOTINC_BU_T;
}

public byte getTOTWQ10_BU_F() {
return TOTWQ10_BU_F;
}

public byte getTOTWQ10_BU_S() {
return TOTWQ10_BU_S;
}

public byte getTOTWQ5_BU_F() {
return TOTWQ5_BU_F;
}

public byte getTOTWQ5_BU_S() {
return TOTWQ5_BU_S;
}

public double getTRANSFERSL() {
return TRANSFERSL;
}

public byte getTRANSFERST() {
return TRANSFERST;
}

public double getTRANSFERSU() {
return TRANSFERSU;
}

public byte getTRUSTSI_BU_F() {
return TRUSTSI_BU_F;
}

public double getTRUSTSI_BU_I() {
return TRUSTSI_BU_I;
}

public short getTRUSTSI_BU_O() {
return TRUSTSI_BU_O;
}

public short getTRUSTSI_BU_T() {
return TRUSTSI_BU_T;
}

public byte getTRUSTS_BU_F() {
return TRUSTS_BU_F;
}

public double getTRUSTS_BU_I() {
return TRUSTS_BU_I;
}

public short getTRUSTS_BU_O() {
return TRUSTS_BU_O;
}

public short getTRUSTS_BU_T() {
return TRUSTS_BU_T;
}

public boolean getUSESCOAL() {
return USESCOAL;
}

public boolean getUSESELEC() {
return USESELEC;
}

public boolean getUSESGAS() {
return USESGAS;
}

public boolean getUSESOIL() {
return USESOIL;
}

public boolean getUSESOTHERF() {
return USESOTHERF;
}

public boolean getUSESPARA() {
return USESPARA;
}

public boolean getUSESWOOD() {
return USESWOOD;
}

public byte getWAR_P_F() {
return WAR_P_F;
}

public double getWAR_P_I() {
return WAR_P_I;
}

public short getWAR_P_O() {
return WAR_P_O;
}

public short getWAR_P_T() {
return WAR_P_T;
}

public byte getWAR_R_F() {
return WAR_R_F;
}

public double getWAR_R_I() {
return WAR_R_I;
}

public short getWAR_R_O() {
return WAR_R_O;
}

public short getWAR_R_T() {
return WAR_R_T;
}

public boolean getWAVE() {
return WAVE;
}

public double getWGT() {
return WGT;
}

public byte getWHOSO1() {
return WHOSO1;
}

public byte getWHOSO2() {
return WHOSO2;
}

public byte getWHOSO3() {
return WHOSO3;
}

public byte getWIDPEN_P_F() {
return WIDPEN_P_F;
}

public double getWIDPEN_P_I() {
return WIDPEN_P_I;
}

public short getWIDPEN_P_O() {
return WIDPEN_P_O;
}

public short getWIDPEN_P_T() {
return WIDPEN_P_T;
}

public byte getWIDPEN_R_F() {
return WIDPEN_R_F;
}

public double getWIDPEN_R_I() {
return WIDPEN_R_I;
}

public short getWIDPEN_R_O() {
return WIDPEN_R_O;
}

public short getWIDPEN_R_T() {
return WIDPEN_R_T;
}

public double getWOODL() {
return WOODL;
}

public byte getWOODT() {
return WOODT;
}

public double getWOODU() {
return WOODU;
}

public byte getWORKTIME() {
return WORKTIME;
}

public double getWPAC() {
return WPAC;
}

public byte getWPACOA() {
return WPACOA;
}

public double getWPACOB() {
return WPACOB;
}

public byte getWPACOC() {
return WPACOC;
}

public byte getWPACON() {
return WPACON;
}

public boolean getWPACTIVE() {
return WPACTIVE;
}

public byte getWPACTIVE_P() {
return WPACTIVE_P;
}

public byte getWPACTW() {
return WPACTW;
}

public byte getWPADY() {
return WPADY;
}

public double getWPAMEC() {
return WPAMEC;
}

public int getWPAOTP() {
return WPAOTP;
}

public byte getWPAP() {
return WPAP;
}

public double getWPAPF() {
return WPAPF;
}

public double getWPASAL() {
return WPASAL;
}

public byte getWPAWAY() {
return WPAWAY;
}

public byte getWPBDNI() {
return WPBDNI;
}

public byte getWPBDT() {
return WPBDT;
}

public byte getWPBI() {
return WPBI;
}

public int getWPBIMA() {
return WPBIMA;
}

public short getWPBIWA() {
return WPBIWA;
}

public byte getWPBTHA() {
return WPBTHA;
}

public byte getWPBTHP() {
return WPBTHP;
}

public byte getWPBUS() {
return WPBUS;
}

public int getWPBUSV() {
return WPBUSV;
}

public byte getWPCEMP() {
return WPCEMP;
}

public byte getWPCJOB() {
return WPCJOB;
}

public double getWPCONY() {
return WPCONY;
}

public short getWPDE() {
return WPDE;
}

public byte getWPDES() {
return WPDES;
}

public byte getWPDPS() {
return WPDPS;
}

public short getWPDS() {
return WPDS;
}

public byte getWPEDC() {
return WPEDC;
}

public byte getWPEMP() {
return WPEMP;
}

public byte getWPEMPL() {
return WPEMPL;
}

public byte getWPEPER() {
return WPEPER;
}

public byte getWPERA() {
return WPERA;
}

public byte getWPERAG() {
return WPERAG;
}

public byte getWPERC() {
return WPERC;
}

public byte getWPERET() {
return WPERET;
}

public byte getWPERP() {
return WPERP;
}

public byte getWPES() {
return WPES;
}

public int getWPESJ() {
return WPESJ;
}

public byte getWPESJE() {
return WPESJE;
}

public short getWPESJL() {
return WPESJL;
}

public short getWPESJM() {
return WPESJM;
}

public byte getWPESJR() {
return WPESJR;
}

public short getWPESJU() {
return WPESJU;
}

public byte getWPESP() {
return WPESP;
}

public byte getWPEST() {
return WPEST;
}

public byte getWPEVER() {
return WPEVER;
}

public byte getWPFRAS() {
return WPFRAS;
}

public byte getWPFSAP() {
return WPFSAP;
}

public byte getWPFSAV() {
return WPFSAV;
}

public byte getWPFSCO() {
return WPFSCO;
}

public byte getWPFSCP() {
return WPFSCP;
}

public short getWPHJOB() {
return WPHJOB;
}

public byte getWPHLY() {
return WPHLY;
}

public short getWPHMSJ() {
return WPHMSJ;
}

public byte getWPHOWE() {
return WPHOWE;
}

public byte getWPHOWU() {
return WPHOWU;
}

public short getWPHWRK() {
return WPHWRK;
}

public byte getWPINF() {
return WPINF;
}

public byte getWPIR() {
return WPIR;
}

public byte getWPJACT() {
return WPJACT;
}

public byte getWPJOB() {
return WPJOB;
}

public byte getWPJOBL() {
return WPJOBL;
}

public byte getWPLCOM() {
return WPLCOM;
}

public short getWPLCOY() {
return WPLCOY;
}

public byte getWPLNJ() {
return WPLNJ;
}

public double getWPLUMP() {
return WPLUMP;
}

public byte getWPMC() {
return WPMC;
}

public double getWPMCA() {
return WPMCA;
}

public byte getWPMCAF() {
return WPMCAF;
}

public byte getWPMCON() {
return WPMCON;
}

public byte getWPMEC() {
return WPMEC;
}

public short getWPMHI() {
return WPMHI;
}

public byte getWPMMIN() {
return WPMMIN;
}

public byte getWPMOJ() {
return WPMOJ;
}

public byte getWPMREA() {
return WPMREA;
}

public byte getWPMRRE() {
return WPMRRE;
}

public byte getWPNEMP() {
return WPNEMP;
}

public byte getWPNIC() {
return WPNIC;
}

public byte getWPNICE() {
return WPNICE;
}

public byte getWPNIMW() {
return WPNIMW;
}

public byte getWPNIRR() {
return WPNIRR;
}

public byte getWPNOE() {
return WPNOE;
}

public byte getWPNRA() {
return WPNRA;
}

public byte getWPOTP() {
return WPOTP;
}

public byte getWPPAY() {
return WPPAY;
}

public byte getWPPAYA() {
return WPPAYA;
}

public byte getWPPCON() {
return WPPCON;
}

public double getWPPENB() {
return WPPENB;
}

public byte getWPPERC() {
return WPPERC;
}

public byte getWPPERI() {
return WPPERI;
}

public double getWPPFVA() {
return WPPFVA;
}

public byte getWPPHI() {
return WPPHI;
}

public byte getWPPL() {
return WPPL;
}

public byte getWPPLP() {
return WPPLP;
}

public byte getWPPLPH() {
return WPPLPH;
}

public byte getWPPP_BU_F() {
return WPPP_BU_F;
}

public double getWPPP_BU_I() {
return WPPP_BU_I;
}

public short getWPPP_BU_O() {
return WPPP_BU_O;
}

public short getWPPP_BU_T() {
return WPPP_BU_T;
}

public byte getWPPP_P_F() {
return WPPP_P_F;
}

public double getWPPP_P_I() {
return WPPP_P_I;
}

public short getWPPP_P_O() {
return WPPP_P_O;
}

public short getWPPP_P_T() {
return WPPP_P_T;
}

public boolean getWPPP_R_F() {
return WPPP_R_F;
}

public double getWPPP_R_I() {
return WPPP_R_I;
}

public short getWPPP_R_O() {
return WPPP_R_O;
}

public short getWPPP_R_T() {
return WPPP_R_T;
}

public int getWPPROF() {
return WPPROF;
}

public byte getWPPSAL() {
return WPPSAL;
}

public byte getWPPTOP() {
return WPPTOP;
}

public byte getWPPTP() {
return WPPTP;
}

public double getWPPYR() {
return WPPYR;
}

public byte getWPRAEM() {
return WPRAEM;
}

public short getWPRAEY() {
return WPRAEY;
}

public byte getWPRAGE() {
return WPRAGE;
}

public byte getWPRAIM() {
return WPRAIM;
}

public short getWPRAIR() {
return WPRAIR;
}

public byte getWPRCON() {
return WPRCON;
}

public byte getWPREC() {
return WPREC;
}

public byte getWPSAL() {
return WPSAL;
}

public byte getWPSLIP() {
return WPSLIP;
}

public byte getWPSPAY() {
return WPSPAY;
}

public byte getWPSTJ() {
return WPSTJ;
}

public byte getWPSUP() {
return WPSUP;
}

public byte getWPTAW() {
return WPTAW;
}

public byte getWPTAX() {
return WPTAX;
}

public byte getWPTHL() {
return WPTHL;
}

public int getWPTHP() {
return WPTHP;
}

public byte getWPUP() {
return WPUP;
}

public int getWPUPA() {
return WPUPA;
}

public int getWPVBUS() {
return WPVBUS;
}

public byte getWPVW() {
return WPVW;
}

public byte getWPWKR() {
return WPWKR;
}

public byte getWPWLY() {
return WPWLY;
}

public byte getWPWLYM() {
return WPWLYM;
}

public int getWPWLYY() {
return WPWLYY;
}

public byte getWPYAER() {
return WPYAER;
}

public byte getWPYBS() {
return WPYBS;
}

public double getWPYCA() {
return WPYCA;
}

public byte getWPYCAT() {
return WPYCAT;
}

public byte getWSELFD() {
return WSELFD;
}

public byte getWSELFD_P() {
return WSELFD_P;
}

public int getXCOUPID() {
return XCOUPID;
}

public int getXCOUPID_INST() {
return XCOUPID_INST;
}

public byte getYQ10_BU_F() {
return YQ10_BU_F;
}

public byte getYQ10_BU_S() {
return YQ10_BU_S;
}

public byte getYQ5_BU_F() {
return YQ5_BU_F;
}

public byte getYQ5_BU_S() {
return YQ5_BU_S;
}

}
