/**
 * Source code generated by uk.ac.leeds.ccg.andyt.generic.data.elsa.process.ELSA_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.generic.data.elsa.data.generated;
public class ELSA_Wave8_Record extends ELSA_Waves1To8_Record {
protected boolean ABVSPA;
protected byte ABVSPASP;
protected double AIRTEMP;
protected byte ANYENDOW;
protected byte ASKINST;
protected boolean ASKPX;
protected byte BPCONST;
protected byte BPRESPC;
protected byte BSWILL;
protected byte CAARR01;
protected byte CAARR02;
protected byte CAARR03;
protected byte CAARR04;
protected byte CAARR05;
protected byte CAARR06;
protected byte CAARR07;
protected byte CAARR08;
protected byte CAARR09;
protected byte CAARR10;
protected byte CAARR11;
protected byte CAASK1;
protected byte CAASK2;
protected byte CACLUB1;
protected byte CACLUB2;
protected byte CACLUB3;
protected byte CACLUB4;
protected byte CACLUB5;
protected byte CACLUB96;
protected byte CADCC;
protected byte CADCD;
protected byte CADP1;
protected byte CADP2;
protected byte CADP3;
protected byte CAFAM;
protected byte CAFAM10;
protected byte CAFAM11;
protected boolean CAFAM12;
protected byte CAFAM13;
protected byte CAFAM14;
protected boolean CAFAM15;
protected boolean CAFAM16;
protected byte CAFAM17;
protected byte CAFAM18;
protected boolean CAFAM19;
protected byte CAFAM2;
protected byte CAFAM20;
protected byte CAFAM21;
protected boolean CAFAM22;
protected boolean CAFAM23;
protected boolean CAFAM24;
protected boolean CAFAM25;
protected byte CAFAM3;
protected byte CAFAM4;
protected byte CAFAM5;
protected byte CAFAM6;
protected byte CAFAM7;
protected byte CAFAM8;
protected byte CAFAM9;
protected byte CAFND1;
protected byte CAFND2;
protected byte CAGACT96;
protected byte CAGACTA;
protected byte CAGACTAR;
protected byte CAGACTB;
protected byte CAGACTC;
protected byte CAGACTD;
protected byte CAGACTE;
protected byte CAGACTF;
protected byte CAGACTG;
protected byte CAGACTHW;
protected byte CAGACTIL;
protected byte CAGACTLE;
protected byte CAGACTME;
protected byte CAGACTPU;
protected byte CAGACTSO;
protected byte CAGDIF;
protected byte CAGDIFA;
protected byte CAGHOA;
protected byte CAGHOL;
protected byte CAGLA;
protected byte CAGLK;
protected byte CAGLKTDS;
protected byte CAGLKTHO;
protected byte CAGLKTWE;
protected byte CAGLKTWK;
protected byte CAGLKTYR;
protected byte CAGTWD;
protected byte CAGTWDA;
protected byte CAGTWE;
protected byte CAGTWEA;
protected byte CAGTY;
protected byte CAGTYA;
protected boolean CAGWHM85;
protected boolean CAGWHM86;
protected boolean CAGWHM96;
protected boolean CAGWHMEJ;
protected boolean CAGWHMLV;
protected boolean CAGWHMOC;
protected byte CAGWHY95;
protected byte CAGWHY96;
protected byte CAGWHYAC;
protected byte CAGWHYDF;
protected byte CAGWHYDV;
protected byte CAGWHYEN;
protected byte CAGWHYFA;
protected byte CAGWHYFI;
protected byte CAGWHYGB;
protected boolean CAGWHYMAC;
protected boolean CAGWHYMDF;
protected boolean CAGWHYMDV;
protected boolean CAGWHYMEN;
protected boolean CAGWHYMFA;
protected boolean CAGWHYMFI;
protected boolean CAGWHYMGB;
protected boolean CAGWHYMPB;
protected boolean CAGWHYMPO;
protected boolean CAGWHYMWK;
protected byte CAGWHYPB;
protected byte CAGWHYPO;
protected byte CAGWHYWK;
protected byte CAGYA;
protected byte CAHFMCL1;
protected byte CAHFMCL2;
protected byte CAHFMCL3;
protected byte CAHFMCL4;
protected byte CAHFMCL5;
protected byte CAHFMCL6;
protected byte CAHFMDC1;
protected byte CAHFMDC2;
protected boolean CAHFMDC3;
protected boolean CAHFMDC4;
protected byte CAHFMDC5;
protected byte CAHFMDC6;
protected byte CAHFMEQ1;
protected boolean CAHFMEQ2;
protected boolean CAHFMEQ3;
protected boolean CAHFMEQ4;
protected boolean CAHFMEQ5;
protected byte CAHFMEQ6;
protected byte CAHFMFA1;
protected byte CAHFMFA2;
protected byte CAHFMFA3;
protected byte CAHFMFA4;
protected byte CAHFMFA5;
protected byte CAHFMFA6;
protected byte CAHFMFR1;
protected byte CAHFMFR2;
protected boolean CAHFMFR3;
protected byte CAHFMFR4;
protected boolean CAHFMFR5;
protected byte CAHFMFR6;
protected byte CAHFMGA1;
protected byte CAHFMGA2;
protected boolean CAHFMGA3;
protected byte CAHFMGA4;
protected boolean CAHFMGA5;
protected byte CAHFMGA6;
protected byte CAHFMHC1;
protected byte CAHFMHC2;
protected byte CAHFMHC3;
protected byte CAHFMHC4;
protected byte CAHFMHC5;
protected byte CAHFMHC6;
protected byte CAHFMHM1;
protected boolean CAHFMHM2;
protected boolean CAHFMHM3;
protected byte CAHFMHM4;
protected boolean CAHFMHM5;
protected byte CAHFMHM6;
protected byte CAHFMHO1;
protected byte CAHFMHO2;
protected byte CAHFMHO3;
protected byte CAHFMHO4;
protected byte CAHFMHO5;
protected byte CAHFMHO6;
protected byte CAHFMIR1;
protected boolean CAHFMIR2;
protected boolean CAHFMIR3;
protected byte CAHFMIR4;
protected byte CAHFMIR5;
protected byte CAHFMIR6;
protected byte CAHFMNH1;
protected byte CAHFMNH2;
protected byte CAHFMNH3;
protected byte CAHFMNH4;
protected byte CAHFMNH5;
protected byte CAHFMNH6;
protected byte CAHFMNO1;
protected byte CAHFMNO2;
protected byte CAHFMNO3;
protected byte CAHFMNO4;
protected byte CAHFMNO5;
protected byte CAHFMNO6;
protected byte CAHFMOT1;
protected byte CAHFMOT2;
protected byte CAHFMOT3;
protected byte CAHFMOT4;
protected byte CAHFMOT5;
protected byte CAHFMOT6;
protected byte CAHFMRE1;
protected byte CAHFMRE2;
protected byte CAHFMRE3;
protected byte CAHFMRE4;
protected byte CAHFMRE5;
protected byte CAHFMRE6;
protected byte CAHFMSW1;
protected boolean CAHFMSW2;
protected boolean CAHFMSW3;
protected byte CAHFMSW4;
protected byte CAHFMSW5;
protected byte CAHFMSW6;
protected byte CAHFMVO1;
protected byte CAHFMVO2;
protected byte CAHFMVO3;
protected byte CAHFMVO4;
protected byte CAHFMVO5;
protected byte CAHFMVO6;
protected byte CAHFMWA1;
protected byte CAHFMWA2;
protected boolean CAHFMWA3;
protected byte CAHFMWA4;
protected byte CAHFMWA5;
protected byte CAHFMWA6;
protected byte CAHFMWH1;
protected boolean CAHFMWH2;
protected boolean CAHFMWH3;
protected boolean CAHFMWH4;
protected boolean CAHFMWH5;
protected byte CAHFMWH6;
protected byte CAHFOCL1;
protected byte CAHFOCL2;
protected byte CAHFOCL3;
protected byte CAHFOCL4;
protected byte CAHFOCL5;
protected byte CAHFOCL6;
protected byte CAHFOHC1;
protected byte CAHFOHC2;
protected byte CAHFOHC3;
protected byte CAHFOHC4;
protected byte CAHFOHC5;
protected byte CAHFOHC6;
protected byte CAHFOHM1;
protected boolean CAHFOHM2;
protected boolean CAHFOHM3;
protected byte CAHFOHM4;
protected boolean CAHFOHM5;
protected byte CAHFOHM6;
protected byte CAHFONH1;
protected byte CAHFONH2;
protected byte CAHFONH3;
protected byte CAHFONH4;
protected byte CAHFONH5;
protected byte CAHFONH6;
protected byte CAHFONO1;
protected byte CAHFONO2;
protected byte CAHFONO3;
protected byte CAHFONO4;
protected byte CAHFONO5;
protected byte CAHFONO6;
protected byte CAHFOOT1;
protected byte CAHFOOT2;
protected byte CAHFOOT3;
protected byte CAHFOOT4;
protected byte CAHFOOT5;
protected byte CAHFOOT6;
protected byte CAHFORE1;
protected byte CAHFORE2;
protected byte CAHFORE3;
protected byte CAHFORE4;
protected byte CAHFORE5;
protected byte CAHFORE6;
protected byte CAHFOVO1;
protected byte CAHFOVO2;
protected byte CAHFOVO3;
protected byte CAHFOVO4;
protected byte CAHFOVO5;
protected byte CAHFOVO6;
protected byte CAHFOWA1;
protected byte CAHFOWA2;
protected boolean CAHFOWA3;
protected byte CAHFOWA4;
protected boolean CAHFOWA5;
protected byte CAHFOWA6;
protected byte CAHGOA;
protected byte CAHHA;
protected byte CAHHB;
protected byte CAHINBR1;
protected byte CAHINBR2;
protected byte CAHINBR3;
protected byte CAHINBR4;
protected byte CAHINBR5;
protected byte CAHINBR6;
protected byte CAHINDA1;
protected byte CAHINDA2;
protected byte CAHINDA3;
protected byte CAHINDA4;
protected byte CAHINDA5;
protected byte CAHINDA6;
protected byte CAHINFR1;
protected byte CAHINFR2;
protected byte CAHINFR3;
protected byte CAHINFR4;
protected byte CAHINFR5;
protected byte CAHINFR6;
protected byte CAHINGC1;
protected byte CAHINGC2;
protected byte CAHINGC3;
protected byte CAHINGC4;
protected byte CAHINGC5;
protected byte CAHINGC6;
protected byte CAHINHW1;
protected byte CAHINHW2;
protected byte CAHINHW3;
protected byte CAHINHW4;
protected byte CAHINHW5;
protected byte CAHINHW6;
protected byte CAHINNE1;
protected byte CAHINNE2;
protected byte CAHINNE3;
protected byte CAHINNE4;
protected byte CAHINNE5;
protected byte CAHINNE6;
protected byte CAHINNO1;
protected byte CAHINNO2;
protected byte CAHINNO3;
protected byte CAHINNO4;
protected byte CAHINNO5;
protected byte CAHINNO6;
protected byte CAHINOR1;
protected byte CAHINOR2;
protected byte CAHINOR3;
protected byte CAHINOR4;
protected byte CAHINOR5;
protected byte CAHINOR6;
protected byte CAHINSI1;
protected byte CAHINSI2;
protected byte CAHINSI3;
protected byte CAHINSI4;
protected byte CAHINSI5;
protected byte CAHINSI6;
protected byte CAHINSO1;
protected byte CAHINSO2;
protected byte CAHINSO3;
protected byte CAHINSO4;
protected byte CAHINSO5;
protected byte CAHINSO6;
protected byte CAHMN;
protected byte CAHNBR;
protected byte CAHNCL;
protected byte CAHNDA;
protected byte CAHNFR;
protected byte CAHNGC;
protected byte CAHNHC;
protected byte CAHNHM;
protected byte CAHNHW;
protected byte CAHNNE;
protected byte CAHNNH;
protected byte CAHNNO;
protected byte CAHNOR;
protected byte CAHNOT;
protected byte CAHNRE;
protected byte CAHNSI;
protected byte CAHNSO;
protected byte CAHNVO;
protected byte CAHNWA;
protected byte CAHPC;
protected byte CAHPD;
protected byte CAHPD2;
protected byte CAHPF;
protected byte CAHPF2;
protected byte CAHPS95;
protected byte CAHPS96;
protected byte CAHPSCH;
protected byte CAHPSEX;
protected byte CAHPSOT;
protected byte CAHPW;
protected byte CAHPW2;
protected double CAHRF26;
protected double CAHRF27;
protected double CAHRF28;
protected double CAHRF29;
protected double CAHRF30;
protected double CAHRF31;
protected double CAHRF32;
protected byte CAHRF33;
protected short CAHRF34;
protected double CAHRF35;
protected byte CAHRG01;
protected byte CAHRG02;
protected byte CAHRG03;
protected boolean CAHRG04;
protected byte CAHRG05;
protected byte CAHRG06;
protected boolean CAHRG07;
protected byte CAHRG08;
protected boolean CAHRG09;
protected boolean CAHRG10;
protected boolean CAHRG11;
protected boolean CAHRG12;
protected boolean CAHRG13;
protected boolean CAHRG14;
protected boolean CAHRG15;
protected boolean CAHRG16;
protected byte CAHRG17;
protected boolean CAHRG18;
protected byte CAHRG19;
protected byte CAHRG20;
protected boolean CAHRG21;
protected boolean CAHRG22;
protected byte CAHRG23;
protected boolean CAHRG24;
protected boolean CAHRG25;
protected byte CAHRG26;
protected boolean CAHRG27;
protected boolean CAHRG28;
protected byte CAHRG29;
protected boolean CAHRG30;
protected boolean CAHRG31;
protected byte CAHRG32;
protected boolean CAHRG33;
protected byte CAHRG34;
protected byte CAHRG35;
protected byte CAHRI01;
protected byte CAHRI02;
protected byte CAHRI03;
protected byte CAHRI04;
protected byte CAHRI05;
protected byte CAHRI06;
protected byte CAHRI07;
protected byte CAHRI08;
protected byte CAHRI09;
protected byte CAHRI10;
protected byte CAHRI11;
protected byte CAHRI12;
protected byte CAHRI13;
protected byte CAHRI14;
protected byte CAHRI15;
protected boolean CAHRI16;
protected byte CAHRI17;
protected byte CAHRI18;
protected byte CAHRI19;
protected byte CAHRI20;
protected byte CAHRI21;
protected byte CAHRI22;
protected byte CAHRI23;
protected byte CAHRI24;
protected byte CAHRI25;
protected byte CAHRI26;
protected byte CAHRI27;
protected byte CAHRI28;
protected byte CAHRI29;
protected byte CAHRI30;
protected byte CAHRI31;
protected byte CAHRI32;
protected byte CAHRI33;
protected byte CAHRI34;
protected byte CAHRI35;
protected byte CAHRS01;
protected byte CAHRS02;
protected byte CAHRS03;
protected byte CAHRS04;
protected byte CAHRS05;
protected byte CAHRS06;
protected byte CAHRS07;
protected byte CAHRS08;
protected byte CAHRS09;
protected byte CAHRS10;
protected byte CAHRS11;
protected byte CAHRS12;
protected byte CAHRS13;
protected byte CAHRS14;
protected byte CAHRS15;
protected boolean CAHRS16;
protected byte CAHRS17;
protected byte CAHRS18;
protected byte CAHRS19;
protected byte CAHRS1GP;
protected byte CAHRS20;
protected byte CAHRS21;
protected byte CAHRS22;
protected byte CAHRS23;
protected byte CAHRS24;
protected byte CAHRS25;
protected byte CAHRS26;
protected byte CAHRS27;
protected byte CAHRS28;
protected byte CAHRS29;
protected byte CAHRS2GP;
protected byte CAHRS30;
protected byte CAHRS31;
protected byte CAHRS32;
protected byte CAHRS33;
protected byte CAHRS34;
protected byte CAHRS35;
protected byte CAHSA;
protected int CAHSC;
protected byte CAHSCE;
protected int CAHSCL;
protected byte CAHSCR;
protected short CAHSCU;
protected byte CAHSM85;
protected byte CAHSM86;
protected byte CAHSM96;
protected byte CAHSMAC;
protected byte CAHSMCH;
protected byte CAHSMCR;
protected byte CAHSMEX;
protected byte CAHSMHY;
protected byte CAHSMMA;
protected byte CAHSMOS;
protected byte CAHSMOT;
protected byte CAHSMTH;
protected byte CAHSN;
protected byte CAHST;
protected byte CAINA;
protected byte CALAF;
protected byte CALAF2;
protected byte CALAF3;
protected double CALAM;
protected double CALAM2;
protected byte CALAM2E;
protected short CALAM2L;
protected byte CALAM2R;
protected short CALAM2U;
protected byte CALAM3;
protected byte CALAM3E;
protected byte CALAM3L;
protected byte CALAM3R;
protected byte CALAM3U;
protected byte CALAME;
protected short CALAML;
protected byte CALAMR;
protected short CALAMU;
protected byte CALAPDP;
protected byte CALAPDP2;
protected byte CALAPDP3;
protected byte CALAPPA;
protected byte CALAPPA2;
protected byte CALAPPA3;
protected byte CALC;
protected byte CAMW;
protected byte CANOPF;
protected byte CANOPF2;
protected byte CANOPF3;
protected byte CANOPG;
protected byte CANOPG2;
protected byte CANOPG3;
protected byte CANOPOT;
protected byte CANOPOT2;
protected byte CANOPOT3;
protected byte CAPADFM;
protected byte CAPADFM2;
protected byte CAPADFM3;
protected byte CAPADLA;
protected byte CAPADLA2;
protected byte CAPADLA3;
protected byte CAPADNO;
protected byte CAPADNO2;
protected byte CAPADNO3;
protected byte CAPADOT;
protected byte CAPADOT2;
protected byte CAPADOT3;
protected byte CAPAL;
protected byte CAPAL2;
protected byte CAPAL3;
protected double CAPAM;
protected double CAPAM2;
protected byte CAPAM2E;
protected short CAPAM2L;
protected byte CAPAM2R;
protected short CAPAM2U;
protected double CAPAM3;
protected byte CAPAM3E;
protected byte CAPAM3L;
protected short CAPAM3U;
protected byte CAPAME;
protected short CAPAML;
protected byte CAPAML3R;
protected byte CAPAMR;
protected short CAPAMU;
protected byte CAPAY;
protected byte CAPAY2;
protected byte CAPAY3;
protected byte CAPB;
protected byte CAPFQ;
protected byte CAPFQ2;
protected byte CAPFQ3;
protected byte CAPHWDP;
protected byte CAPHWDP2;
protected byte CAPHWDP3;
protected byte CAPHWOI;
protected byte CAPHWOI2;
protected byte CAPHWOI3;
protected byte CAPHWOT;
protected byte CAPHWOT2;
protected byte CAPHWOT3;
protected byte CAPNO;
protected byte CAPNO10;
protected byte CAPNO11;
protected boolean CAPNO12;
protected boolean CAPNO13;
protected byte CAPNO14;
protected boolean CAPNO15;
protected boolean CAPNO16;
protected byte CAPNO17;
protected byte CAPNO18;
protected boolean CAPNO19;
protected byte CAPNO2;
protected byte CAPNO20;
protected boolean CAPNO21;
protected boolean CAPNO22;
protected boolean CAPNO23;
protected boolean CAPNO24;
protected boolean CAPNO25;
protected byte CAPNO3;
protected boolean CAPNO4;
protected byte CAPNO5;
protected byte CAPNO6;
protected boolean CAPNO7;
protected byte CAPNO8;
protected byte CAPNO9;
protected byte CARA;
protected byte CARERS_P_F;
protected double CARERS_P_I;
protected short CARERS_P_O;
protected short CARERS_P_T;
protected byte CARERS_R_F;
protected double CARERS_R_I;
protected short CARERS_R_O;
protected short CARERS_R_T;
protected boolean CASEX;
protected byte CASEX10;
protected boolean CASEX11;
protected boolean CASEX12;
protected boolean CASEX13;
protected boolean CASEX14;
protected boolean CASEX15;
protected boolean CASEX16;
protected byte CASEX17;
protected byte CASEX18;
protected byte CASEX19;
protected boolean CASEX2;
protected byte CASEX20;
protected byte CASEX21;
protected byte CASEX22;
protected byte CASEX23;
protected byte CASEX24;
protected byte CASEX25;
protected boolean CASEX3;
protected boolean CASEX4;
protected boolean CASEX5;
protected boolean CASEX6;
protected boolean CASEX7;
protected byte CASEX8;
protected byte CASEX9;
protected byte CATCH;
protected byte CATKA;
protected byte CATKB;
protected byte CATKC;
protected byte CATKD;
protected byte CATKE;
protected byte CATKF;
protected byte CATKG;
protected byte CATKH;
protected byte CATKI;
protected byte CATKJ;
protected byte CATKK;
protected byte CATKL;
protected byte CATKM;
protected byte CATNO;
protected byte CAWDA;
protected byte CAWHO;
protected boolean CAWIN;
protected byte CF200PRE;
protected byte CF201G1;
protected byte CF202H1;
protected byte CF203I1;
protected byte CF204A1;
protected byte CF205B1;
protected byte CF206C1;
protected byte CF207D1;
protected byte CF208E1;
protected byte CF209F1;
protected byte CF210J1;
protected byte CF211K1;
protected byte CF212L1;
protected byte CF213M1;
protected byte CF214N1;
protected byte CF215O1;
protected byte CF216C;
protected byte CF221G2;
protected byte CF222H2;
protected byte CF223I2;
protected byte CF224A2;
protected byte CF225B2;
protected byte CF226C2;
protected byte CF227D2;
protected byte CF228E2;
protected byte CF229F2;
protected byte CF230J2;
protected byte CF231K2;
protected byte CF232L2;
protected byte CF233M2;
protected byte CF234N2;
protected byte CF235O2;
protected byte CF240;
protected byte CF241;
protected boolean CF242;
protected byte CFANI;
protected byte CFC20FRST;
protected byte CFC20FSCND;
protected double CFIB;
protected byte CFLISA;
protected byte CFLISP1;
protected byte CFLISP2;
protected byte CFLISP3;
protected byte CFLISP4;
protected byte CFLISP5;
protected byte CFLITB;
protected byte CFLITC;
protected byte CFLITD;
protected byte CFLITE;
protected byte CFLITF;
protected byte CFLITSK;
protected byte CFMAP;
protected byte CFMATY;
protected byte CFMETM;
protected byte CFMETMT;
protected byte CFMSCR;
protected byte CFNMCA;
protected byte CFNMPM;
protected byte CFNMQN;
protected byte CFNMSC;
protected byte CFNMUS;
protected byte CFSTOP1;
protected byte CFSTOP2;
protected byte CFSTOP3;
protected byte CFSTOP4;
protected byte CFSTOP5;
protected byte CFSTOP6;
protected byte CFSTOP7;
protected byte CFSTOP8;
protected boolean CFSTOP95;
protected byte CFSUMA;
protected byte CFSUMB;
protected byte CFSUMC;
protected byte CFSUMD;
protected byte CFSUME;
protected byte CFSUMF;
protected short CFSVA;
protected short CFSVB;
protected short CFSVC;
protected byte CFSVCH;
protected short CFSVD;
protected short CFSVE;
protected byte CFWHOAD;
protected byte CFWHOCHI;
protected byte CFWHONON;
protected byte CFWHOOTH;
protected byte CFWHOPAR;
protected byte CFWHT95;
protected byte CFWHTALC;
protected byte CFWHTCON;
protected byte CFWHTDIS;
protected byte CFWHTENG;
protected byte CFWHTEYE;
protected byte CFWHTHEA;
protected byte CFWHTILL;
protected byte CFWHTLAP;
protected byte CFWHTM85;
protected byte CFWHTM86;
protected byte CFWHTMALC;
protected byte CFWHTMCON;
protected byte CFWHTMDIS;
protected byte CFWHTMEM;
protected byte CFWHTMEN;
protected byte CFWHTMENG;
protected byte CFWHTMEYE;
protected byte CFWHTMHEA;
protected byte CFWHTMILL;
protected byte CFWHTMLAP;
protected byte CFWHTMMEM;
protected byte CFWHTMMEN;
protected byte CFWHTMNER;
protected byte CFWHTMNOI;
protected byte CFWHTMREF;
protected byte CFWHTMTIR;
protected byte CFWHTMUPS;
protected byte CFWHTNER;
protected byte CFWHTNOI;
protected byte CFWHTREF;
protected byte CFWHTTIR;
protected byte CFWHTUPS;
protected byte CHINHH;
protected double CHOL;
protected byte CLOTB;
protected boolean CONCUR;
protected byte CONSPAX;
protected byte CONSUBDR;
protected byte CONSUBEA;
protected byte CONSUBEX;
protected byte CONSUBNO;
protected byte CONSUBSM;
protected boolean COUPLE_INST;
protected double CPIPLUS;
protected byte CTC_P_F;
protected double CTC_P_I;
protected short CTC_P_O;
protected short CTC_P_T;
protected byte CTC_R_F;
protected double CTC_R_I;
protected short CTC_R_O;
protected short CTC_R_T;
protected byte CUFFSIZE;
protected byte DCURPEN;
protected byte DDBDC;
protected byte DEMPPEN;
protected byte DHC14;
protected byte DHC15;
protected byte DHC16;
protected byte DHCAG14;
protected byte DHCAG15;
protected byte DHCAG16;
protected byte DHCR08;
protected byte DHCR09;
protected byte DHCR10;
protected boolean DHCR104;
protected boolean DHCR105;
protected boolean DHCR106;
protected boolean DHCR107;
protected boolean DHCR108;
protected boolean DHCR109;
protected byte DHCR11;
protected boolean DHCR110;
protected boolean DHCR111;
protected boolean DHCR112;
protected byte DHCR118;
protected boolean DHCR119;
protected boolean DHCR12;
protected boolean DHCR120;
protected boolean DHCR121;
protected boolean DHCR122;
protected boolean DHCR123;
protected boolean DHCR124;
protected boolean DHCR125;
protected boolean DHCR126;
protected boolean DHCR127;
protected boolean DHCR128;
protected boolean DHCR13;
protected byte DHCR134;
protected boolean DHCR135;
protected boolean DHCR136;
protected boolean DHCR137;
protected boolean DHCR138;
protected boolean DHCR139;
protected boolean DHCR14;
protected boolean DHCR140;
protected boolean DHCR141;
protected boolean DHCR142;
protected boolean DHCR143;
protected boolean DHCR144;
protected byte DHCR147;
protected boolean DHCR148;
protected boolean DHCR149;
protected boolean DHCR15;
protected byte DHCR150;
protected boolean DHCR151;
protected boolean DHCR152;
protected boolean DHCR153;
protected boolean DHCR154;
protected boolean DHCR155;
protected boolean DHCR156;
protected boolean DHCR157;
protected boolean DHCR158;
protected boolean DHCR159;
protected boolean DHCR16;
protected boolean DHCR160;
protected boolean DHCR163;
protected boolean DHCR164;
protected boolean DHCR165;
protected byte DHCR166;
protected boolean DHCR167;
protected boolean DHCR168;
protected boolean DHCR169;
protected boolean DHCR170;
protected boolean DHCR171;
protected boolean DHCR172;
protected boolean DHCR173;
protected boolean DHCR174;
protected boolean DHCR175;
protected boolean DHCR176;
protected byte DHCR178;
protected boolean DHCR179;
protected boolean DHCR180;
protected boolean DHCR181;
protected boolean DHCR182;
protected boolean DHCR183;
protected boolean DHCR184;
protected boolean DHCR185;
protected boolean DHCR186;
protected boolean DHCR187;
protected boolean DHCR188;
protected boolean DHCR189;
protected boolean DHCR190;
protected boolean DHCR191;
protected boolean DHCR192;
protected byte DHCR194;
protected boolean DHCR195;
protected boolean DHCR196;
protected boolean DHCR197;
protected boolean DHCR198;
protected boolean DHCR199;
protected boolean DHCR200;
protected boolean DHCR201;
protected boolean DHCR202;
protected boolean DHCR203;
protected boolean DHCR204;
protected boolean DHCR205;
protected boolean DHCR206;
protected boolean DHCR207;
protected boolean DHCR208;
protected byte DHCR209;
protected byte DHCR210;
protected boolean DHCR211;
protected boolean DHCR212;
protected boolean DHCR213;
protected boolean DHCR214;
protected boolean DHCR215;
protected boolean DHCR216;
protected boolean DHCR217;
protected boolean DHCR218;
protected boolean DHCR219;
protected boolean DHCR220;
protected boolean DHCR221;
protected boolean DHCR222;
protected boolean DHCR223;
protected boolean DHCR224;
protected byte DHCR225;
protected boolean DHCR226;
protected boolean DHCR227;
protected boolean DHCR228;
protected boolean DHCR229;
protected boolean DHCR230;
protected boolean DHCR231;
protected boolean DHCR232;
protected boolean DHCR233;
protected boolean DHCR234;
protected boolean DHCR235;
protected boolean DHCR236;
protected boolean DHCR237;
protected boolean DHCR238;
protected boolean DHCR239;
protected byte DHCR24;
protected boolean DHCR240;
protected byte DHCR241;
protected boolean DHCR242;
protected boolean DHCR243;
protected boolean DHCR244;
protected boolean DHCR245;
protected boolean DHCR246;
protected boolean DHCR247;
protected boolean DHCR248;
protected boolean DHCR249;
protected byte DHCR25;
protected boolean DHCR250;
protected boolean DHCR251;
protected boolean DHCR252;
protected boolean DHCR253;
protected boolean DHCR254;
protected boolean DHCR255;
protected boolean DHCR256;
protected byte DHCR26;
protected byte DHCR27;
protected boolean DHCR28;
protected boolean DHCR29;
protected boolean DHCR30;
protected boolean DHCR31;
protected boolean DHCR32;
protected byte DHCR40;
protected byte DHCR41;
protected byte DHCR42;
protected byte DHCR43;
protected boolean DHCR44;
protected boolean DHCR45;
protected boolean DHCR46;
protected boolean DHCR47;
protected boolean DHCR48;
protected byte DHCR56;
protected byte DHCR57;
protected byte DHCR58;
protected boolean DHCR59;
protected boolean DHCR60;
protected boolean DHCR61;
protected boolean DHCR62;
protected boolean DHCR63;
protected boolean DHCR64;
protected byte DHCR72;
protected byte DHCR73;
protected byte DHCR74;
protected boolean DHCR75;
protected boolean DHCR76;
protected boolean DHCR77;
protected boolean DHCR78;
protected boolean DHCR79;
protected boolean DHCR80;
protected boolean DHCR88;
protected boolean DHCR89;
protected boolean DHCR90;
protected boolean DHCR91;
protected boolean DHCR92;
protected boolean DHCR93;
protected boolean DHCR94;
protected boolean DHCR95;
protected boolean DHCR96;
protected byte DHCS14;
protected byte DHCS15;
protected byte DHCS16;
protected byte DHIASEP;
protected byte DHPA10;
protected byte DHPA11;
protected byte DHPA12;
protected byte DHPA13;
protected byte DHPA14;
protected byte DHPA15;
protected byte DHPA16;
protected byte DHPA2;
protected byte DHPA3;
protected byte DHPA4;
protected byte DHPA5;
protected byte DHPA6;
protected byte DHPA7;
protected byte DHPA8;
protected byte DHPA9;
protected byte DHPB10;
protected byte DHPB11;
protected byte DHPB12;
protected byte DHPB13;
protected byte DHPB14;
protected byte DHPB15;
protected byte DHPB16;
protected byte DHPB2;
protected byte DHPB3;
protected byte DHPB4;
protected byte DHPB5;
protected byte DHPB6;
protected byte DHPB7;
protected byte DHPB8;
protected byte DHPB9;
protected byte DHR13;
protected byte DHR14;
protected byte DHR15;
protected boolean DHR16;
protected byte DHWORK;
protected short DIAS1;
protected short DIAS2;
protected short DIAS3;
protected double DIAVAL;
protected byte DIBPC95;
protected byte DIFADI;
protected byte DIFBPCCU;
protected byte DIFBPCEQ;
protected byte DIFBPCER;
protected byte DIFBPCLE;
protected byte DIFBPCNO;
protected byte DIFBPCUP;
protected short DIFDYR;
protected byte DIGNMYC;
protected byte DIGPRXA;
protected byte DIGPRXB;
protected byte DIMADI;
protected byte DIMAEDU;
protected byte DIMARR;
protected short DIMDYR;
protected byte DIPAEDU;
protected byte DISIBC;
protected byte ERADLT;
protected byte ERAGEC1;
protected byte ERAGEC2;
protected byte ERAGEC3;
protected byte ERCAA;
protected byte ERCABCH;
protected byte ERCABFR;
protected byte ERCABGC;
protected byte ERCABOR;
protected byte ERCABOT;
protected byte ERCABPA;
protected byte ERCABPL;
protected byte ERCABSP;
protected short ERCAC;
protected byte ERCADP1;
protected byte ERCADP10;
protected byte ERCADP11;
protected byte ERCADP12;
protected byte ERCADP13;
protected byte ERCADP14;
protected byte ERCADP15;
protected byte ERCADP16;
protected byte ERCADP2;
protected byte ERCADP3;
protected byte ERCADP4;
protected byte ERCADP5;
protected byte ERCADP6;
protected byte ERCADP7;
protected byte ERCADP8;
protected byte ERCADP9;
protected byte ERCALIVE;
protected byte ERCAM85;
protected byte ERCAM86;
protected byte ERCAMCH;
protected byte ERCAMFR;
protected byte ERCAMGC;
protected byte ERCAMOR;
protected byte ERCAMPA;
protected byte ERCAMPL;
protected byte ERCAMSP;
protected byte ERCANCH;
protected byte ERCANFR;
protected byte ERCANGC;
protected byte ERCANOR;
protected byte ERCANOT;
protected byte ERCANPA;
protected byte ERCANPL;
protected boolean ERCANSP;
protected byte ERCANTT;
protected byte ERCARA;
protected byte ERCARB;
protected byte ERCHLD;
protected byte ERFVOFT;
protected byte ERFVOL;
protected byte ERFVOL96;
protected byte ERFVOLBE;
protected byte ERFVOLCA;
protected byte ERFVOLED;
protected byte ERFVOLIN;
protected byte ERFVOLLE;
protected byte ERFVOLMO;
protected byte ERFVOLOR;
protected byte ERFVOLPR;
protected byte ERFVOLRE;
protected byte ERFVOLSE;
protected byte ERFVOLTR;
protected byte ERFVOLVI;
protected byte ERIVOFT;
protected byte ERIVOL96;
protected byte ERLVOLBA;
protected byte ERLVOLCO;
protected byte ERLVOLDE;
protected byte ERLVOLKE;
protected byte ERLVOLPE;
protected byte ERLVOLPR;
protected byte ERLVOLRE;
protected byte ERLVOLSH;
protected byte ERLVOLTR;
protected byte ERLVOLWR;
protected byte EROLDR;
protected byte ERRESBK;
protected byte ERRESBK2;
protected byte ERRESBK3;
protected byte ERRESCK;
protected boolean ERRESERB1;
protected byte ERRESERB2;
protected byte ERRESERB3;
protected boolean ERRESERD1;
protected byte ERRESERD2;
protected byte ERRESERD3;
protected boolean ERRESERH1;
protected byte ERRESERH2;
protected byte ERRESERH3;
protected boolean ERRESERI1;
protected byte ERRESERI2;
protected byte ERRESERI3;
protected byte ERRESERN1;
protected byte ERRESERN2;
protected byte ERRESERN3;
protected byte ERRESERO1;
protected byte ERRESERO2;
protected byte ERRESERO3;
protected boolean ERRESERS1;
protected byte ERRESERS2;
protected byte ERRESERS3;
protected byte ERRESNM;
protected byte ERRESOF;
protected byte ERRESON;
protected byte ERRESRY;
protected byte ERRESRY2;
protected byte ERRESRY3;
protected byte ERVOLA;
protected byte ERVOLB;
protected byte ESA_P_F;
protected double ESA_P_I;
protected short ESA_P_O;
protected short ESA_P_T;
protected byte ESA_R_F;
protected double ESA_R_I;
protected short ESA_R_O;
protected short ESA_R_T;
protected double ESTWT;
protected byte EWTCH;
protected double EWTKG;
protected byte EWTL;
protected byte EWTST;
protected byte EXCFV;
protected byte EXCND;
protected byte EXCPLN85;
protected byte EXCPLN86;
protected byte EXCPLN96;
protected byte EXCPLNFA;
protected byte EXCPLNIN;
protected byte EXCPLNIV;
protected byte EXCPLNOT;
protected byte EXCPLNPR;
protected byte EXCPLNSA;
protected byte EXCPLNTR;
protected byte EXLO90;
protected byte EXLTC5;
protected byte EXLTCEV;
protected byte EXMOVHA;
protected byte EXMOVNB;
protected byte EXNHEV;
protected byte EXPCC95;
protected byte EXPCC96;
protected byte EXPCCCH;
protected byte EXPCCHI;
protected byte EXPCCHS;
protected byte EXPCCIP;
protected byte EXPCCLA;
protected byte EXPCCOI;
protected byte EXPCCOS;
protected byte EXPCCRF;
protected byte EXPCCSA;
protected byte EXPCCSB;
protected byte EXPCHR;
protected byte EXPCK;
protected byte EXPCLM;
protected byte EXPFC95;
protected byte EXPFC96;
protected byte EXPFCCH;
protected byte EXPFCHI;
protected byte EXPFCHS;
protected byte EXPFCIP;
protected byte EXPFCLA;
protected byte EXPFCOI;
protected byte EXPFCOS;
protected byte EXPFCRF;
protected byte EXPFCSA;
protected byte EXPFCSB;
protected byte EXPWF;
protected byte EXRELA;
protected byte EXRELE96;
protected byte EXRELEDE;
protected byte EXRELEEL;
protected byte EXRELEFA;
protected byte EXRELEFO;
protected byte EXRELEHO;
protected byte EXRELEME;
protected byte EXRELEOU;
protected byte EXRELEPR;
protected byte EXRELETR;
protected byte EXSCEV;
protected byte FASTASK;
protected byte FASTELIG;
protected boolean FFERROR;
protected double FGLU;
protected String FINSTAT;
protected byte FIT;
protected byte FLOORC;
protected byte FQAQUA;
protected byte FQCBTHMR;
protected short FQCENGM;
protected byte FQENDM;
protected boolean FQETHNMR;
protected byte FQNURRF85;
protected boolean FQNURRF86;
protected byte FQNURRFBU;
protected byte FQNURRFEN;
protected byte FQNURRFEX;
protected byte FQNURRFNO;
protected byte FQNURRFOD;
protected byte FQNURRFSC;
protected byte FQNURRFWO;
protected byte FQNURSE;
protected byte FQQUA95;
protected byte FQQUAALE;
protected byte FQQUAASL;
protected byte FQQUACGA;
protected byte FQQUACGF;
protected byte FQQUACGO;
protected byte FQQUACLE;
protected byte FQQUACS1;
protected byte FQQUACS2;
protected byte FQQUACSU;
protected byte FQQUADEG;
protected byte FQQUAGCA;
protected byte FQQUAGCD;
protected byte FQQUAHNC;
protected byte FQQUAMAT;
protected byte FQQUANUR;
protected byte FQQUANV1;
protected byte FQQUANV2;
protected byte FQQUANV3;
protected byte FQQUANV4;
protected byte FQQUANV5;
protected byte FQQUAOLA;
protected byte FQQUAOLD;
protected byte FQQUAOLP;
protected byte FQQUAONC;
protected byte FQQUASLC;
protected byte FQQUASLL;
protected byte FQQUASUP;
protected byte FQQUATEA;
protected byte FQQUATRA;
protected byte FQQUM85;
protected byte FQQUM86;
protected byte FQQUM96;
protected byte FQQUMALE;
protected byte FQQUMASL;
protected byte FQQUMCGA;
protected byte FQQUMCGF;
protected byte FQQUMCGO;
protected byte FQQUMCLE;
protected byte FQQUMCS1;
protected byte FQQUMCS2;
protected byte FQQUMCSU;
protected byte FQQUMDEG;
protected byte FQQUMDIP;
protected byte FQQUMFOR;
protected byte FQQUMGCA;
protected byte FQQUMGCD;
protected byte FQQUMHNC;
protected byte FQQUMMAT;
protected byte FQQUMMIL;
protected byte FQQUMNNE;
protected byte FQQUMNUR;
protected byte FQQUMNV1;
protected byte FQQUMNV2;
protected byte FQQUMNV3;
protected byte FQQUMNV4;
protected byte FQQUMNV5;
protected byte FQQUMNVZ;
protected byte FQQUMOAC;
protected byte FQQUMOLA;
protected byte FQQUMOLD;
protected byte FQQUMOLP;
protected byte FQQUMONC;
protected byte FQQUMOPR;
protected byte FQQUMOVO;
protected byte FQQUMSLC;
protected byte FQQUMSLL;
protected byte FQQUMSUP;
protected byte FQQUMTEA;
protected byte FQQUMTRA;
protected byte FULL1;
protected byte FULL2;
protected byte FULL3;
protected byte GCINHH;
protected double HBA1C;
protected double HDL;
protected byte HEACD;
protected byte HEACE;
protected byte HEACEA;
protected byte HEADLSP;
protected byte HEAGGS;
protected byte HEAGHS;
protected byte HEAID96;
protected byte HEAIDAL;
protected byte HEAIDBU;
protected byte HEAIDCA;
protected byte HEAIDCR;
protected byte HEAIDEA;
protected byte HEAIDEW;
protected byte HEAIDMW;
protected byte HEAIDZI;
protected byte HEALCH;
protected byte HEALCOV;
protected byte HEALM85;
protected byte HEALM86;
protected byte HEALMCH;
protected byte HEALMFA;
protected byte HEALMFR;
protected byte HEALMLL;
protected byte HEALMNHS;
protected byte HEALMSE;
protected byte HEALMSS;
protected byte HEALNHS;
protected byte HEALOT;
protected byte HEALSE;
protected byte HEALSS;
protected byte HEAMB;
protected byte HEANYCH;
protected byte HEARTA;
protected byte HEARTB;
protected byte HEARTC;
protected byte HEARTE;
protected byte HEARTOA;
protected byte HEARTOT;
protected byte HEARTRA;
protected byte HEBETA;
protected byte HEBOWD;
protected byte HEBPCHK;
protected byte HEBUCH;
protected boolean HEBUCOV;
protected byte HEBUM85;
protected byte HEBUM86;
protected byte HEBUMCH;
protected byte HEBUMFA;
protected byte HEBUMFR;
protected byte HEBUMLL;
protected byte HEBUMNHS;
protected byte HEBUMSE;
protected byte HEBUMSS;
protected byte HEBUNHS;
protected byte HEBUOT;
protected byte HEBUSE;
protected byte HEBUSS;
protected byte HECACH;
protected byte HECACOV;
protected byte HECAM85;
protected byte HECAM86;
protected byte HECAMCH;
protected byte HECAMFA;
protected byte HECAMFR;
protected byte HECAMLL;
protected byte HECAMNHS;
protected byte HECAMSE;
protected byte HECAMSS;
protected byte HECANAAR;
protected byte HECANBB;
protected byte HECANHS;
protected byte HECAOT;
protected byte HECASE;
protected byte HECASS;
protected byte HECATN;
protected byte HECGSTA;
protected byte HECGSTP;
protected byte HECHMD;
protected byte HECHME;
protected byte HECHOL;
protected byte HECRCH;
protected boolean HECRCOV;
protected byte HECRM85;
protected byte HECRM86;
protected byte HECRMCH;
protected byte HECRMFA;
protected byte HECRMFR;
protected byte HECRMLL;
protected byte HECRMNHS;
protected byte HECRMSE;
protected byte HECRMSS;
protected byte HECRNHS;
protected byte HECROT;
protected byte HECRSE;
protected byte HECRSS;
protected byte HEDAC95;
protected byte HEDACAN;
protected byte HEDACAR;
protected byte HEDACBP;
protected byte HEDACCH;
protected byte HEDACDI;
protected byte HEDACHF;
protected byte HEDACHM;
protected byte HEDACMI;
protected byte HEDACST;
protected byte HEDAN95;
protected byte HEDANAN;
protected byte HEDANAR;
protected byte HEDANBP;
protected byte HEDANCH;
protected byte HEDANDI;
protected byte HEDANHF;
protected byte HEDANHM;
protected byte HEDANMI;
protected byte HEDANST;
protected byte HEDAS95;
protected byte HEDASAN;
protected byte HEDASAR;
protected byte HEDASBP;
protected byte HEDASCH;
protected byte HEDASHF;
protected byte HEDASHM;
protected boolean HEDAW95;
protected byte HEDAWAN;
protected byte HEDAWAR;
protected byte HEDAWBP;
protected byte HEDAWCH;
protected byte HEDAWDI;
protected byte HEDAWHF;
protected byte HEDAWHM;
protected byte HEDAWMI;
protected byte HEDAWST;
protected byte HEDBDAD;
protected byte HEDBDAR;
protected byte HEDBDAS;
protected byte HEDBDBL;
protected byte HEDBDCA;
protected byte HEDBDDE;
protected byte HEDBDLU;
protected boolean HEDBDMS;
protected byte HEDBDOS;
protected byte HEDBDPD;
protected byte HEDBDPS;
protected byte HEDBLU;
protected byte HEDBMAD;
protected byte HEDBMAR;
protected byte HEDBMAS;
protected byte HEDBMBL;
protected byte HEDBMCA;
protected byte HEDBMDE;
protected byte HEDBMLU;
protected boolean HEDBMMS;
protected byte HEDBMOS;
protected byte HEDBMPD;
protected byte HEDBMPS;
protected byte HEDBSAR;
protected byte HEDBSAS;
protected byte HEDBSBL;
protected byte HEDBSCA;
protected byte HEDBSDE;
protected boolean HEDBSMS;
protected byte HEDBSOS;
protected byte HEDBSPD;
protected byte HEDBWAD;
protected byte HEDBWAR;
protected byte HEDBWAS;
protected boolean HEDBWBL;
protected byte HEDBWCA;
protected byte HEDBWDE;
protected byte HEDBWLU;
protected boolean HEDBWMS;
protected byte HEDBWOS;
protected byte HEDBWPD;
protected byte HEDBWPS;
protected byte HEDIA95;
protected byte HEDIA96;
protected byte HEDIAAN;
protected byte HEDIAAR;
protected byte HEDIABP;
protected byte HEDIACH;
protected byte HEDIADI;
protected byte HEDIAHF;
protected byte HEDIAHM;
protected byte HEDIAMI;
protected byte HEDIAST;
protected byte HEDIB96;
protected byte HEDIBAD;
protected byte HEDIBAR;
protected byte HEDIBAS;
protected byte HEDIBBL;
protected byte HEDIBCA;
protected byte HEDIBDE;
protected byte HEDIBLU;
protected byte HEDIBMS;
protected byte HEDIBOS;
protected byte HEDIBPD;
protected byte HEDIBPS;
protected byte HEDIM85;
protected byte HEDIM86;
protected byte HEDIM96;
protected byte HEDIMAN;
protected byte HEDIMAR;
protected byte HEDIMBP;
protected byte HEDIMCH;
protected byte HEDIMDI;
protected byte HEDIMHF;
protected byte HEDIMHM;
protected byte HEDIMMI;
protected byte HEDIMST;
protected byte HEDNTA;
protected byte HEDNTB1;
protected byte HEDNTB2;
protected byte HEDNTB3;
protected byte HEDNTB4;
protected byte HEDNTB5;
protected byte HEDNTB96;
protected byte HEDREYR;
protected byte HEEACH;
protected boolean HEEACOV;
protected byte HEEAM85;
protected boolean HEEAM86;
protected byte HEEAMCH;
protected byte HEEAMFA;
protected boolean HEEAMFR;
protected byte HEEAMLL;
protected byte HEEAMNHS;
protected byte HEEAMSE;
protected byte HEEAMSS;
protected byte HEEANHS;
protected byte HEEAOT;
protected byte HEEASE;
protected byte HEEASS;
protected byte HEEWCH;
protected boolean HEEWCOV;
protected byte HEEWM85;
protected boolean HEEWM86;
protected byte HEEWMCH;
protected byte HEEWMFA;
protected byte HEEWMFR;
protected byte HEEWMLL;
protected byte HEEWMNHS;
protected byte HEEWMSE;
protected byte HEEWMSS;
protected byte HEEWNHS;
protected byte HEEWOT;
protected byte HEEWSE;
protected byte HEEWSS;
protected byte HEEYEA;
protected byte HEFLE;
protected byte HEFLF;
protected byte HEFTCHK;
protected byte HEGPNHS;
protected byte HEGPOFT;
protected byte HEHBPB;
protected byte HEHBPB1;
protected byte HEHELF;
protected byte HEHPS;
protected byte HEHPY;
protected byte HEHRT;
protected byte HEHRTA;
protected byte HEHRTB;
protected byte HEHRTC;
protected byte HEHRTD;
protected byte HEHRTE;
protected byte HEJIAA1;
protected byte HEJIAA2;
protected byte HEJIAA3;
protected byte HEJIAA4;
protected byte HEJIAA5;
protected byte HEJIBLH;
protected byte HEJIBLK;
protected byte HEJIBRH;
protected byte HEJIBRK;
protected byte HEJION;
protected byte HEKIDN;
protected byte HEKNEA;
protected byte HEKNEB;
protected byte HELNGB;
protected byte HELWK;
protected byte HEMAMB;
protected byte HEMDA1;
protected byte HEMDAB;
protected byte HEMEB;
protected byte HEMEN;
protected byte HEMWCH;
protected byte HEMWCOV;
protected byte HEMWM85;
protected byte HEMWM86;
protected byte HEMWMCH;
protected byte HEMWMFA;
protected byte HEMWMFR;
protected byte HEMWMLL;
protected byte HEMWMNHS;
protected byte HEMWMSE;
protected byte HEMWMSS;
protected byte HEMWNHS;
protected byte HEMWOT;
protected byte HEMWSE;
protected byte HEMWSS;
protected byte HENMMI;
protected byte HENMST;
protected byte HEOPCCA;
protected byte HEOPCDI;
protected byte HEOPCGL;
protected byte HEOPCMD;
protected byte HEOPFCA;
protected byte HEOPFDI;
protected byte HEOPFGL;
protected byte HEOPFMD;
protected byte HEOPNCA;
protected byte HEOPNDI;
protected byte HEOPNGL;
protected byte HEOPNMD;
protected byte HEOPSCA;
protected byte HEOPSDI;
protected byte HEOPSGL;
protected byte HEOPSMD;
protected byte HEOPT96;
protected byte HEOPTCA;
protected byte HEOPTDI;
protected byte HEOPTGL;
protected byte HEOPTMD;
protected byte HEOSTE;
protected byte HEOSTEA;
protected byte HEOSTEB;
protected byte HEOSTEC;
protected byte HEOSTED;
protected byte HEPAB;
protected byte HEPAB1;
protected byte HEPAC;
protected byte HEPAD;
protected byte HEPAE;
protected byte HEPAF;
protected byte HEPAWAL;
protected byte HEPAWBA;
protected byte HEPAWFE;
protected byte HEPAWHI;
protected byte HEPAWKN;
protected byte HEPAWMO;
protected byte HEPAWOT;
protected byte HEPEA;
protected byte HEPEE;
protected byte HEPER;
protected short HEPEY;
protected byte HEPRO;
protected byte HEPSY95;
protected byte HEPSYA;
protected byte HEPSYAN;
protected byte HEPSYB;
protected byte HEPSYC;
protected byte HEPSYD;
protected byte HEPSYDE;
protected byte HEPSYE;
protected byte HEPSYEM;
protected byte HEPSYHA;
protected byte HEPSYMA;
protected byte HEPSYMO;
protected byte HEPSYPS;
protected byte HEPSYSC;
protected byte HESKD;
protected byte HESKE;
protected byte HESKF;
protected byte HESLPA;
protected byte HESLPB;
protected byte HESLPC;
protected byte HESLPD;
protected double HESLPE;
protected byte HESLPF;
protected byte HESLPX;
protected byte HESSME;
protected byte HESTAS;
protected byte HESTOP;
protected byte HESUG;
protected byte HESUGA;
protected byte HESWGH;
protected byte HESWGHA;
protected byte HETEMP;
protected byte HEWEE;
protected byte HEWEEA;
protected byte HEZICH;
protected boolean HEZICOV;
protected byte HEZIM85;
protected byte HEZIM86;
protected byte HEZIMCH;
protected byte HEZIMFA;
protected byte HEZIMFR;
protected byte HEZIMLL;
protected byte HEZIMNHS;
protected byte HEZIMSE;
protected byte HEZIMSS;
protected byte HEZINHS;
protected byte HEZIOT;
protected byte HEZISE;
protected byte HEZISS;
protected double HGB;
protected byte HOADC96;
protected byte HOADCAD;
protected byte HOADCAP;
protected byte HOADCLI;
protected byte HOADCRS;
protected byte HOADCSH;
protected byte HOADCWD;
protected byte HOADCWS;
protected byte HOADD95;
protected byte HOADD96;
protected byte HOADDAD;
protected byte HOADDBL;
protected byte HOADDBS;
protected byte HOADDCL;
protected byte HOADDCO;
protected byte HOADDHO;
protected byte HOADDKM;
protected byte HOADHR;
protected byte HOADS;
protected byte HOAIAD95;
protected byte HOAIADAL;
protected byte HOAIADHS;
protected byte HOAIADLL;
protected byte HOAIADSS;
protected byte HOAIADYS;
protected byte HOAIAMAP85;
protected byte HOAIAMAP86;
protected byte HOAIAP95;
protected byte HOAIAPAL;
protected byte HOAIAPHS;
protected byte HOAIAPLL;
protected byte HOAIAPSS;
protected byte HOAIAPYS;
protected byte HOAIBL95;
protected byte HOAIBLAL;
protected byte HOAIBLHS;
protected byte HOAIBLLL;
protected byte HOAIBLSS;
protected byte HOAIBLYS;
protected byte HOAIBS95;
protected byte HOAIBSAL;
protected byte HOAIBSHS;
protected byte HOAIBSLL;
protected byte HOAIBSSS;
protected byte HOAIBSYS;
protected byte HOAICL95;
protected byte HOAICLAL;
protected byte HOAICLHS;
protected byte HOAICLLL;
protected byte HOAICLSS;
protected byte HOAICLYS;
protected byte HOAICO95;
protected byte HOAICOAL;
protected byte HOAICOHS;
protected byte HOAICOLL;
protected byte HOAICOSS;
protected byte HOAICOYS;
protected byte HOAIDV95;
protected byte HOAIDVAL;
protected byte HOAIDVHS;
protected byte HOAIDVLL;
protected byte HOAIDVSS;
protected byte HOAIDVYS;
protected byte HOAIHO95;
protected byte HOAIHOAL;
protected byte HOAIHOHS;
protected byte HOAIHOLL;
protected byte HOAIHOSS;
protected byte HOAIHOYS;
protected byte HOAIHR95;
protected byte HOAIHRAL;
protected byte HOAIHRHS;
protected byte HOAIHRLL;
protected byte HOAIHRSS;
protected byte HOAIHRYS;
protected byte HOAIKM95;
protected byte HOAIKMAL;
protected byte HOAIKMHS;
protected byte HOAIKMLL;
protected byte HOAIKMSS;
protected byte HOAIKMYS;
protected byte HOAILI95;
protected byte HOAILIAL;
protected byte HOAILIHS;
protected byte HOAILILL;
protected byte HOAILISS;
protected byte HOAILIYS;
protected byte HOAIMAD85;
protected byte HOAIMAD86;
protected byte HOAIMADAL;
protected byte HOAIMADCH;
protected byte HOAIMADFM;
protected byte HOAIMADFR;
protected byte HOAIMADFS;
protected byte HOAIMADHS;
protected byte HOAIMADLL;
protected byte HOAIMADSS;
protected byte HOAIMADYS;
protected byte HOAIMAPAL;
protected byte HOAIMAPCH;
protected byte HOAIMAPFM;
protected byte HOAIMAPFR;
protected byte HOAIMAPFS;
protected byte HOAIMAPHS;
protected byte HOAIMAPLL;
protected byte HOAIMAPSS;
protected byte HOAIMAPYS;
protected byte HOAIMBL85;
protected byte HOAIMBL86;
protected byte HOAIMBLAL;
protected byte HOAIMBLCH;
protected byte HOAIMBLFM;
protected byte HOAIMBLFR;
protected byte HOAIMBLFS;
protected byte HOAIMBLHS;
protected byte HOAIMBLLL;
protected byte HOAIMBLSS;
protected byte HOAIMBLYS;
protected byte HOAIMBS85;
protected byte HOAIMBS86;
protected byte HOAIMBSAL;
protected byte HOAIMBSCH;
protected byte HOAIMBSFM;
protected byte HOAIMBSFR;
protected byte HOAIMBSFS;
protected byte HOAIMBSHS;
protected byte HOAIMBSLL;
protected byte HOAIMBSSS;
protected byte HOAIMBSYS;
protected byte HOAIMCL85;
protected byte HOAIMCL86;
protected byte HOAIMCLAL;
protected byte HOAIMCLCH;
protected byte HOAIMCLFM;
protected byte HOAIMCLFR;
protected byte HOAIMCLFS;
protected byte HOAIMCLHS;
protected byte HOAIMCLLL;
protected byte HOAIMCLSS;
protected byte HOAIMCLYS;
protected byte HOAIMCO85;
protected byte HOAIMCO86;
protected byte HOAIMCOAL;
protected byte HOAIMCOCH;
protected byte HOAIMCOFM;
protected byte HOAIMCOFR;
protected byte HOAIMCOFS;
protected byte HOAIMCOHS;
protected byte HOAIMCOLL;
protected byte HOAIMCOSS;
protected byte HOAIMCOYS;
protected byte HOAIMDV85;
protected byte HOAIMDV86;
protected byte HOAIMDVAL;
protected byte HOAIMDVCH;
protected byte HOAIMDVFM;
protected byte HOAIMDVFR;
protected byte HOAIMDVFS;
protected byte HOAIMDVHS;
protected byte HOAIMDVLL;
protected byte HOAIMDVSS;
protected byte HOAIMDVYS;
protected byte HOAIMHO85;
protected byte HOAIMHO86;
protected byte HOAIMHOAL;
protected byte HOAIMHOCH;
protected byte HOAIMHOFM;
protected byte HOAIMHOFR;
protected byte HOAIMHOFS;
protected byte HOAIMHOHS;
protected byte HOAIMHOLL;
protected byte HOAIMHOSS;
protected byte HOAIMHOYS;
protected byte HOAIMHR85;
protected byte HOAIMHR86;
protected byte HOAIMHRAL;
protected byte HOAIMHRCH;
protected byte HOAIMHRFM;
protected byte HOAIMHRFR;
protected byte HOAIMHRFS;
protected byte HOAIMHRHS;
protected byte HOAIMHRLL;
protected byte HOAIMHRSS;
protected byte HOAIMHRYS;
protected byte HOAIMKM85;
protected byte HOAIMKM86;
protected byte HOAIMKMAL;
protected byte HOAIMKMCH;
protected byte HOAIMKMFM;
protected byte HOAIMKMFR;
protected byte HOAIMKMFS;
protected byte HOAIMKMHS;
protected byte HOAIMKMLL;
protected byte HOAIMKMSS;
protected byte HOAIMKMYS;
protected byte HOAIMLI85;
protected byte HOAIMLI86;
protected byte HOAIMLIAL;
protected byte HOAIMLICH;
protected byte HOAIMLIFM;
protected byte HOAIMLIFR;
protected byte HOAIMLIFS;
protected byte HOAIMLIHS;
protected byte HOAIMLILL;
protected byte HOAIMLISS;
protected byte HOAIMLIYS;
protected byte HOAIMOT85;
protected byte HOAIMOT86;
protected byte HOAIMOTAL;
protected byte HOAIMOTCH;
protected byte HOAIMOTFM;
protected byte HOAIMOTFR;
protected byte HOAIMOTFS;
protected byte HOAIMOTHS;
protected byte HOAIMOTLL;
protected byte HOAIMOTSS;
protected byte HOAIMOTYS;
protected byte HOAIMRS85;
protected byte HOAIMRS86;
protected byte HOAIMRSAL;
protected byte HOAIMRSCH;
protected byte HOAIMRSFM;
protected byte HOAIMRSFR;
protected byte HOAIMRSFS;
protected byte HOAIMRSHS;
protected byte HOAIMRSLL;
protected byte HOAIMRSSS;
protected byte HOAIMRSYS;
protected byte HOAIMSH85;
protected byte HOAIMSH86;
protected byte HOAIMSHAL;
protected byte HOAIMSHCH;
protected byte HOAIMSHFM;
protected byte HOAIMSHFR;
protected byte HOAIMSHFS;
protected byte HOAIMSHHS;
protected byte HOAIMSHLL;
protected byte HOAIMSHSS;
protected byte HOAIMSHYS;
protected byte HOAIMWD85;
protected byte HOAIMWD86;
protected byte HOAIMWDAL;
protected byte HOAIMWDHS;
protected byte HOAIMWDLL;
protected byte HOAIMWDSS;
protected byte HOAIMWDYS;
protected byte HOAIMWS85;
protected byte HOAIMWS86;
protected byte HOAIMWSAL;
protected byte HOAIMWSCH;
protected byte HOAIMWSFM;
protected byte HOAIMWSFR;
protected byte HOAIMWSFS;
protected byte HOAIMWSHS;
protected byte HOAIMWSLL;
protected byte HOAIMWSSS;
protected byte HOAIMWSYS;
protected byte HOAIOT95;
protected byte HOAIOTAL;
protected byte HOAIOTHS;
protected byte HOAIOTLL;
protected byte HOAIOTSS;
protected byte HOAIOTYS;
protected byte HOAIRS95;
protected byte HOAIRSAL;
protected byte HOAIRSHS;
protected byte HOAIRSLL;
protected byte HOAIRSSS;
protected byte HOAIRSYS;
protected byte HOAISH95;
protected byte HOAISHAL;
protected byte HOAISHHS;
protected byte HOAISHLL;
protected byte HOAISHSS;
protected byte HOAISHYS;
protected byte HOAIWD95;
protected byte HOAIWDAL;
protected byte HOAIWDHS;
protected byte HOAIWDLL;
protected byte HOAIWDSS;
protected byte HOAIWDYS;
protected byte HOAIWS95;
protected byte HOAIWSAL;
protected byte HOAIWSHS;
protected byte HOAIWSLL;
protected byte HOAIWSSS;
protected byte HOAIWSYS;
protected byte HOASK;
protected boolean HOB10FE;
protected boolean HOB10FL;
protected boolean HOB10FR;
protected boolean HOB10FU;
protected boolean HOB10ME;
protected boolean HOB10ML;
protected boolean HOB10MR;
protected boolean HOB10MU;
protected boolean HOB10OE;
protected boolean HOB10OL;
protected boolean HOB10OR;
protected boolean HOB10OU;
protected boolean HOB10WE;
protected boolean HOB10WL;
protected boolean HOB10WR;
protected boolean HOB10WU;
protected boolean HOB10YE;
protected boolean HOB10YL;
protected boolean HOB10YR;
protected boolean HOB10YU;
protected boolean HOB11FE;
protected boolean HOB11FL;
protected boolean HOB11FR;
protected boolean HOB11FU;
protected boolean HOB11ME;
protected boolean HOB11ML;
protected boolean HOB11MR;
protected boolean HOB11MU;
protected boolean HOB11OE;
protected boolean HOB11OL;
protected boolean HOB11OR;
protected boolean HOB11OU;
protected boolean HOB11WE;
protected boolean HOB11WL;
protected boolean HOB11WR;
protected boolean HOB11WU;
protected boolean HOB11YE;
protected boolean HOB11YL;
protected boolean HOB11YR;
protected boolean HOB11YU;
protected boolean HOB12FE;
protected boolean HOB12FL;
protected boolean HOB12FR;
protected boolean HOB12FU;
protected boolean HOB12ME;
protected boolean HOB12ML;
protected boolean HOB12MR;
protected boolean HOB12MU;
protected boolean HOB12OE;
protected boolean HOB12OL;
protected boolean HOB12OR;
protected boolean HOB12OU;
protected boolean HOB12WE;
protected boolean HOB12WL;
protected boolean HOB12WR;
protected boolean HOB12WU;
protected boolean HOB12YE;
protected boolean HOB12YL;
protected boolean HOB12YR;
protected boolean HOB12YU;
protected boolean HOB13FE;
protected boolean HOB13FL;
protected boolean HOB13FR;
protected boolean HOB13FU;
protected boolean HOB13ME;
protected boolean HOB13ML;
protected boolean HOB13MR;
protected boolean HOB13MU;
protected boolean HOB13OE;
protected boolean HOB13OL;
protected boolean HOB13OR;
protected boolean HOB13OU;
protected boolean HOB13WE;
protected boolean HOB13WL;
protected boolean HOB13WR;
protected boolean HOB13WU;
protected boolean HOB13YE;
protected boolean HOB13YL;
protected boolean HOB13YR;
protected boolean HOB13YU;
protected boolean HOB14FE;
protected boolean HOB14FL;
protected boolean HOB14FR;
protected boolean HOB14FU;
protected boolean HOB14ME;
protected boolean HOB14ML;
protected boolean HOB14MR;
protected boolean HOB14MU;
protected boolean HOB14OE;
protected boolean HOB14OL;
protected boolean HOB14OR;
protected boolean HOB14OU;
protected boolean HOB14WE;
protected boolean HOB14WL;
protected boolean HOB14WR;
protected boolean HOB14WU;
protected boolean HOB14YE;
protected boolean HOB14YL;
protected boolean HOB14YR;
protected boolean HOB14YU;
protected boolean HOB15FE;
protected boolean HOB15FL;
protected boolean HOB15FR;
protected boolean HOB15FU;
protected boolean HOB15ME;
protected boolean HOB15ML;
protected boolean HOB15MR;
protected boolean HOB15MU;
protected boolean HOB15OE;
protected boolean HOB15OL;
protected boolean HOB15OR;
protected boolean HOB15OU;
protected boolean HOB15WE;
protected boolean HOB15WL;
protected boolean HOB15WR;
protected boolean HOB15WU;
protected boolean HOB15YE;
protected boolean HOB15YL;
protected boolean HOB15YR;
protected boolean HOB15YU;
protected boolean HOB16FE;
protected boolean HOB16FL;
protected boolean HOB16FR;
protected boolean HOB16FU;
protected boolean HOB16ME;
protected boolean HOB16ML;
protected boolean HOB16MR;
protected boolean HOB16MU;
protected boolean HOB16OE;
protected boolean HOB16OL;
protected boolean HOB16OR;
protected boolean HOB16OU;
protected boolean HOB16WE;
protected boolean HOB16WL;
protected boolean HOB16WR;
protected boolean HOB16WU;
protected boolean HOB16YE;
protected boolean HOB16YL;
protected boolean HOB16YR;
protected boolean HOB16YU;
protected boolean HOBA10;
protected boolean HOBA11;
protected boolean HOBA12;
protected boolean HOBA13;
protected boolean HOBA14;
protected boolean HOBA15;
protected boolean HOBA16;
protected byte HOBA2FE;
protected byte HOBA2FL;
protected byte HOBA2FR;
protected byte HOBA2FU;
protected byte HOBA2ME;
protected byte HOBA2ML;
protected byte HOBA2MR;
protected byte HOBA2MU;
protected byte HOBA2OE;
protected short HOBA2OL;
protected byte HOBA2OR;
protected short HOBA2OU;
protected byte HOBA2WE;
protected byte HOBA2WL;
protected byte HOBA2WR;
protected byte HOBA2WU;
protected byte HOBA2YE;
protected byte HOBA2YL;
protected byte HOBA2YR;
protected byte HOBA2YU;
protected byte HOBA3FE;
protected byte HOBA3FL;
protected byte HOBA3FR;
protected byte HOBA3FU;
protected byte HOBA3ME;
protected short HOBA3ML;
protected byte HOBA3MR;
protected short HOBA3MU;
protected byte HOBA3OE;
protected short HOBA3OL;
protected byte HOBA3OR;
protected short HOBA3OU;
protected byte HOBA3WE;
protected byte HOBA3WL;
protected byte HOBA3WR;
protected short HOBA3WU;
protected byte HOBA3YE;
protected byte HOBA3YL;
protected byte HOBA3YR;
protected byte HOBA3YU;
protected byte HOBA4FE;
protected byte HOBA4FL;
protected byte HOBA4FR;
protected byte HOBA4FU;
protected byte HOBA4ME;
protected short HOBA4ML;
protected byte HOBA4MR;
protected short HOBA4MU;
protected byte HOBA4OE;
protected short HOBA4OL;
protected byte HOBA4OR;
protected short HOBA4OU;
protected byte HOBA4WE;
protected short HOBA4WL;
protected byte HOBA4WR;
protected short HOBA4WU;
protected byte HOBA4YE;
protected byte HOBA4YL;
protected byte HOBA4YR;
protected byte HOBA4YU;
protected byte HOBA5FE;
protected byte HOBA5FL;
protected byte HOBA5FR;
protected byte HOBA5FU;
protected byte HOBA5ME;
protected short HOBA5ML;
protected byte HOBA5MR;
protected short HOBA5MU;
protected byte HOBA5OE;
protected byte HOBA5OL;
protected byte HOBA5OR;
protected byte HOBA5OU;
protected byte HOBA5WE;
protected byte HOBA5WL;
protected byte HOBA5WR;
protected byte HOBA5WU;
protected byte HOBA5YE;
protected byte HOBA5YL;
protected byte HOBA5YR;
protected byte HOBA5YU;
protected byte HOBA6FE;
protected byte HOBA6FL;
protected byte HOBA6FR;
protected byte HOBA6FU;
protected byte HOBA6ME;
protected byte HOBA6ML;
protected byte HOBA6MR;
protected byte HOBA6MU;
protected byte HOBA6OE;
protected byte HOBA6OL;
protected byte HOBA6OR;
protected byte HOBA6OU;
protected byte HOBA6WE;
protected byte HOBA6WL;
protected byte HOBA6WR;
protected byte HOBA6WU;
protected byte HOBA6YE;
protected byte HOBA6YL;
protected byte HOBA6YR;
protected byte HOBA6YU;
protected byte HOBA7FE;
protected byte HOBA7FL;
protected byte HOBA7FR;
protected byte HOBA7FU;
protected byte HOBA7ME;
protected byte HOBA7ML;
protected byte HOBA7MR;
protected byte HOBA7MU;
protected byte HOBA7OE;
protected byte HOBA7OL;
protected byte HOBA7OR;
protected byte HOBA7OU;
protected byte HOBA7WE;
protected byte HOBA7WL;
protected byte HOBA7WR;
protected byte HOBA7WU;
protected byte HOBA7YE;
protected byte HOBA7YL;
protected byte HOBA7YR;
protected byte HOBA7YU;
protected byte HOBA8FE;
protected byte HOBA8FL;
protected byte HOBA8FR;
protected byte HOBA8FU;
protected byte HOBA8ME;
protected byte HOBA8ML;
protected byte HOBA8MR;
protected byte HOBA8MU;
protected byte HOBA8OE;
protected byte HOBA8OL;
protected byte HOBA8OR;
protected byte HOBA8OU;
protected byte HOBA8WE;
protected byte HOBA8WL;
protected byte HOBA8WR;
protected byte HOBA8WU;
protected byte HOBA8YE;
protected byte HOBA8YL;
protected byte HOBA8YR;
protected byte HOBA8YU;
protected byte HOBA9FE;
protected byte HOBA9FL;
protected byte HOBA9FR;
protected byte HOBA9FU;
protected byte HOBA9ME;
protected byte HOBA9ML;
protected byte HOBA9MR;
protected byte HOBA9MU;
protected byte HOBA9OE;
protected byte HOBA9OL;
protected byte HOBA9OR;
protected byte HOBA9OU;
protected byte HOBA9WE;
protected byte HOBA9WL;
protected byte HOBA9WR;
protected byte HOBA9WU;
protected byte HOBA9YE;
protected byte HOBA9YL;
protected byte HOBA9YR;
protected byte HOBA9YU;
protected byte HOBAFE;
protected byte HOBAFL;
protected byte HOBAFR;
protected byte HOBAFU;
protected byte HOBAME;
protected short HOBAML;
protected byte HOBAMR;
protected short HOBAMU;
protected byte HOBAOE;
protected short HOBAOL;
protected byte HOBAOR;
protected short HOBAOU;
protected boolean HOBAS10;
protected boolean HOBAS11;
protected boolean HOBAS12;
protected boolean HOBAS13;
protected boolean HOBAS14;
protected boolean HOBAS15;
protected boolean HOBAS16;
protected byte HOBAWE;
protected short HOBAWL;
protected byte HOBAWR;
protected byte HOBAWU;
protected byte HOBAYE;
protected byte HOBAYL;
protected byte HOBAYR;
protected short HOBAYU;
protected byte HOBB;
protected boolean HOBP10;
protected boolean HOBP11;
protected boolean HOBP12;
protected boolean HOBP13;
protected boolean HOBP14;
protected boolean HOBP15;
protected boolean HOBP16;
protected byte HOCC01;
protected byte HOCC02;
protected byte HOCC03;
protected byte HOCC04;
protected byte HOCC05;
protected byte HOCC06;
protected byte HOCC07;
protected byte HOCC08;
protected byte HOCC09;
protected byte HOCC10;
protected byte HOCC11;
protected byte HOCC12;
protected byte HOCC13;
protected byte HOCC14;
protected byte HOCC15;
protected byte HOCC16;
protected byte HOCC17;
protected byte HOCC18;
protected byte HOCC19;
protected byte HOCC20;
protected byte HOCENP;
protected byte HOCHM;
protected short HOCL;
protected byte HOCLE;
protected short HOCLL;
protected byte HOCLR;
protected short HOCLU;
protected byte HOCTA;
protected byte HOCTB;
protected byte HOCTBP;
protected byte HOCTN;
protected byte HODISC;
protected byte HOEB;
protected short HOEBMS;
protected byte HOEBMSE;
protected byte HOEBMSL;
protected byte HOEBMSR;
protected byte HOEBMSU;
protected short HOEBMW;
protected byte HOEBMWE;
protected byte HOEBMWL;
protected byte HOEBMWR;
protected byte HOEBMWU;
protected short HOEBQS;
protected byte HOEBQSE;
protected short HOEBQSL;
protected byte HOEBQSR;
protected short HOEBQSU;
protected short HOEBQW;
protected byte HOEBQWE;
protected short HOEBQWL;
protected byte HOEBQWR;
protected short HOEBQWU;
protected byte HOED;
protected short HOEDM;
protected byte HOEDME;
protected byte HOEDML;
protected byte HOEDMR;
protected byte HOEDMU;
protected short HOEDQ;
protected byte HOEDQE;
protected short HOEDQL;
protected byte HOEDQR;
protected short HOEDQU;
protected byte HOEOS;
protected byte HOEOSE;
protected byte HOEOSL;
protected byte HOEOSR;
protected byte HOEOSU;
protected byte HOEOW;
protected byte HOEOWE;
protected byte HOEOWL;
protected byte HOEOWR;
protected byte HOEOWU;
protected byte HOEPAY;
protected byte HOEPS;
protected byte HOEPSE;
protected byte HOEPSL;
protected byte HOEPSR;
protected byte HOEPSU;
protected byte HOEPW;
protected byte HOEPWE;
protected byte HOEPWL;
protected byte HOEPWR;
protected byte HOEPWU;
protected byte HOFB;
protected short HOFBMS;
protected byte HOFBMSE;
protected byte HOFBMSL;
protected byte HOFBMSR;
protected byte HOFBMSU;
protected short HOFBMW;
protected byte HOFBMWE;
protected byte HOFBMWL;
protected byte HOFBMWR;
protected byte HOFBMWU;
protected short HOFBQS;
protected byte HOFBQSE;
protected short HOFBQSL;
protected byte HOFBQSR;
protected short HOFBQSU;
protected short HOFBQW;
protected byte HOFBQWE;
protected short HOFBQWL;
protected byte HOFBQWR;
protected short HOFBQWU;
protected byte HOFCS;
protected byte HOFCSE;
protected byte HOFCSL;
protected byte HOFCSR;
protected byte HOFCSU;
protected byte HOFCW;
protected byte HOFCWE;
protected byte HOFCWL;
protected byte HOFCWR;
protected byte HOFCWU;
protected byte HOFD;
protected short HOFDM;
protected byte HOFDME;
protected byte HOFDML;
protected byte HOFDMR;
protected byte HOFDMU;
protected short HOFDQ;
protected byte HOFDQE;
protected short HOFDQL;
protected byte HOFDQR;
protected short HOFDQU;
protected byte HOFOIS;
protected byte HOFOISE;
protected byte HOFOISL;
protected byte HOFOISR;
protected byte HOFOISU;
protected byte HOFOIW;
protected byte HOFOIWE;
protected byte HOFOIWL;
protected byte HOFOIWR;
protected byte HOFOIWU;
protected byte HOFOODE;
protected short HOFOODL;
protected byte HOFOODR;
protected short HOFOODU;
protected byte HOFOS;
protected byte HOFOSE;
protected byte HOFOSL;
protected byte HOFOSR;
protected byte HOFOSU;
protected byte HOFOW;
protected byte HOFOWE;
protected byte HOFOWL;
protected byte HOFOWR;
protected byte HOFOWU;
protected byte HOFPAY;
protected byte HOFPGS;
protected byte HOFPGSE;
protected byte HOFPGSL;
protected byte HOFPGSR;
protected byte HOFPGSU;
protected byte HOFPGW;
protected byte HOFPGWE;
protected byte HOFPGWL;
protected byte HOFPGWR;
protected byte HOFPGWU;
protected byte HOFPS;
protected byte HOFPSE;
protected byte HOFPSL;
protected byte HOFPSR;
protected byte HOFPSU;
protected byte HOFPW;
protected byte HOFPWE;
protected byte HOFPWL;
protected byte HOFPWR;
protected byte HOFPWU;
protected short HOFSM;
protected byte HOFSME;
protected byte HOFSML;
protected byte HOFSMR;
protected byte HOFSMU;
protected byte HOFSP;
protected byte HOFSQ;
protected byte HOFSQE;
protected byte HOFSQL;
protected byte HOFSQR;
protected byte HOFSQU;
protected byte HOFSUP;
protected short HOFSW;
protected byte HOFSWE;
protected byte HOFSWL;
protected byte HOFSWR;
protected byte HOFSWU;
protected byte HOFTOG;
protected byte HOFUEL95;
protected byte HOFUELCO;
protected byte HOFUELEL;
protected byte HOFUELGA;
protected byte HOFUELM85;
protected boolean HOFUELM86;
protected byte HOFUELOI;
protected byte HOFUELPA;
protected byte HOFUELWO;
protected byte HOFUEMCO;
protected byte HOFUEMEL;
protected byte HOFUEMGA;
protected byte HOFUEMOI;
protected byte HOFUEMPA;
protected byte HOFUEMWO;
protected byte HOFWS;
protected byte HOFWSE;
protected byte HOFWSL;
protected byte HOFWSR;
protected byte HOFWSU;
protected byte HOFWW;
protected byte HOFWWE;
protected byte HOFWWL;
protected byte HOFWWR;
protected byte HOFWWU;
protected byte HOFXS;
protected byte HOFXSE;
protected byte HOFXSL;
protected byte HOFXSR;
protected byte HOFXSU;
protected byte HOFXW;
protected byte HOFXWE;
protected byte HOFXWL;
protected byte HOFXWR;
protected byte HOFXWU;
protected short HOGBMS;
protected byte HOGBMSE;
protected byte HOGBMSL;
protected byte HOGBMSR;
protected byte HOGBMSU;
protected short HOGBMW;
protected byte HOGBMWE;
protected byte HOGBMWL;
protected byte HOGBMWR;
protected byte HOGBMWU;
protected byte HOGBP;
protected short HOGBQS;
protected byte HOGBQSE;
protected short HOGBQSL;
protected byte HOGBQSR;
protected short HOGBQSU;
protected short HOGBQW;
protected byte HOGBQWE;
protected short HOGBQWL;
protected byte HOGBQWR;
protected short HOGBQWU;
protected byte HOGD;
protected short HOGDM;
protected byte HOGDME;
protected byte HOGDML;
protected byte HOGDMR;
protected byte HOGDMU;
protected short HOGDQ;
protected byte HOGDQE;
protected short HOGDQL;
protected byte HOGDQR;
protected short HOGDQU;
protected byte HOGOS;
protected byte HOGOSE;
protected byte HOGOSL;
protected byte HOGOSR;
protected byte HOGOSU;
protected byte HOGOW;
protected byte HOGOWE;
protected byte HOGOWL;
protected byte HOGOWR;
protected byte HOGOWU;
protected byte HOGPAY;
protected byte HOGPS;
protected byte HOGPSE;
protected byte HOGPSL;
protected byte HOGPSR;
protected byte HOGPSU;
protected byte HOGPW;
protected byte HOGPWE;
protected byte HOGPWL;
protected byte HOGPWR;
protected byte HOGPWU;
protected byte HOHAV95;
protected byte HOHAV96;
protected byte HOHAVB95;
protected byte HOHAVB96;
protected byte HOHAVBCD;
protected byte HOHAVBDR;
protected byte HOHAVBDT;
protected byte HOHAVBDV;
protected byte HOHAVBDW;
protected byte HOHAVBFF;
protected byte HOHAVBMO;
protected byte HOHAVBPC;
protected byte HOHAVBPH;
protected byte HOHAVBTV;
protected byte HOHAVBVR;
protected byte HOHAVBWD;
protected byte HOHAVBWM;
protected byte HOHAVCD;
protected byte HOHAVDR;
protected byte HOHAVDT;
protected byte HOHAVDV;
protected byte HOHAVDW;
protected byte HOHAVFF;
protected byte HOHAVMO;
protected byte HOHAVPC;
protected byte HOHAVPH;
protected byte HOHAVTV;
protected byte HOHAVVR;
protected byte HOHAVWD;
protected byte HOHAVWM;
protected byte HOHB95;
protected byte HOHB96;
protected short HOHBA;
protected byte HOHBAFE;
protected byte HOHBAFL;
protected byte HOHBAFR;
protected byte HOHBAFU;
protected byte HOHBAME;
protected short HOHBAML;
protected byte HOHBAMR;
protected short HOHBAMU;
protected byte HOHBAOE;
protected byte HOHBAOL;
protected byte HOHBAOR;
protected short HOHBAOU;
protected byte HOHBAWE;
protected byte HOHBAWL;
protected byte HOHBAWR;
protected byte HOHBAWU;
protected byte HOHBAYE;
protected byte HOHBAYL;
protected byte HOHBAYR;
protected byte HOHBAYU;
protected byte HOHBCK;
protected byte HOHBCL;
protected byte HOHBEN;
protected byte HOHBGA;
protected byte HOHBM85;
protected byte HOHBM86;
protected byte HOHBM96;
protected byte HOHBMCL;
protected byte HOHBME;
protected byte HOHBMGA;
protected byte HOHBMME;
protected byte HOHBMSG;
protected byte HOHBMWP;
protected byte HOHBP;
protected byte HOHBSG;
protected byte HOHBWP;
protected byte HOHEA95;
protected byte HOHEA96;
protected byte HOHEAEF;
protected byte HOHEAGF;
protected byte HOHEAM85;
protected byte HOHEAM86;
protected byte HOHEAM96;
protected byte HOHEAMEF;
protected byte HOHEAMGF;
protected byte HOHEAMOF;
protected byte HOHEAMPH;
protected byte HOHEAOF;
protected byte HOHEAPH;
protected short HOHV01;
protected byte HOHV01E;
protected short HOHV01L;
protected byte HOHV01R;
protected short HOHV01U;
protected short HOHV02;
protected byte HOHV02E;
protected short HOHV02L;
protected byte HOHV02R;
protected short HOHV02U;
protected short HOHV03;
protected byte HOHV03E;
protected short HOHV03L;
protected byte HOHV03R;
protected short HOHV03U;
protected short HOHV04;
protected byte HOHV04E;
protected short HOHV04L;
protected byte HOHV04R;
protected short HOHV04U;
protected short HOHV05;
protected byte HOHV05E;
protected short HOHV05L;
protected byte HOHV05R;
protected short HOHV05U;
protected short HOHV06;
protected byte HOHV06E;
protected short HOHV06L;
protected byte HOHV06R;
protected short HOHV06U;
protected short HOHV07;
protected byte HOHV07E;
protected short HOHV07L;
protected byte HOHV07R;
protected short HOHV07U;
protected short HOHV08;
protected byte HOHV08E;
protected short HOHV08L;
protected byte HOHV08R;
protected short HOHV08U;
protected short HOHV09;
protected byte HOHV09E;
protected short HOHV09L;
protected byte HOHV09R;
protected short HOHV09U;
protected short HOHV12;
protected byte HOHV12E;
protected short HOHV12L;
protected byte HOHV12R;
protected short HOHV12U;
protected short HOHV13;
protected byte HOHV13E;
protected short HOHV13L;
protected byte HOHV13R;
protected short HOHV13U;
protected byte HOINA95;
protected byte HOINA96;
protected byte HOINACL;
protected byte HOINAGD;
protected byte HOINAM85;
protected byte HOINAM86;
protected byte HOINAM96;
protected byte HOINAMCL;
protected byte HOINAME;
protected byte HOINAMGD;
protected byte HOINAMME;
protected byte HOINAMSG;
protected byte HOINAMWP;
protected byte HOINASG;
protected byte HOINAWP;
protected byte HOINC95;
protected byte HOINC96;
protected byte HOINCBI;
protected byte HOINCL96;
protected byte HOINCLCO;
protected byte HOINCLGA;
protected byte HOINCLHE;
protected byte HOINCLLA;
protected byte HOINCLSE;
protected byte HOINCLWA;
protected byte HOINCM85;
protected byte HOINCM86;
protected byte HOINCM96;
protected byte HOINCMBI;
protected byte HOINCMPI;
protected byte HOINCMPP;
protected byte HOINCPI;
protected byte HOINCPP;
protected short HOLEIS;
protected byte HOLEISE;
protected short HOLEISL;
protected byte HOLEISR;
protected short HOLEISU;
protected int HOMA;
protected byte HOMADD;
protected byte HOMAE;
protected int HOMAL;
protected byte HOMAR;
protected short HOMAU;
protected byte HOMFV;
protected byte HOMFV2;
protected byte HOMFV3;
protected byte HOMFV4;
protected byte HOMFV5;
protected byte HOMREPE;
protected short HOMREPL;
protected byte HOMREPR;
protected short HOMREPU;
protected byte HOMTY;
protected byte HOMTY2;
protected byte HOMTY3;
protected byte HOMTY4;
protected byte HOMTY5;
protected byte HOMTYC;
protected byte HOMU95;
protected byte HOMUCP;
protected byte HOMUHE;
protected byte HOMUHI;
protected byte HOMUM;
protected byte HOMUM85;
protected byte HOMUM86;
protected byte HOMUMCP;
protected byte HOMUMHE;
protected byte HOMUMHI;
protected byte HOMUMOC;
protected byte HOMUOC;
protected byte HOOUTFE;
protected short HOOUTFL;
protected byte HOOUTFR;
protected short HOOUTFU;
protected byte HOOUTMC;
protected byte HOPAYE;
protected int HOPAYL;
protected byte HOPAYR;
protected int HOPAYU;
protected byte HOPRO95;
protected byte HOPRO96;
protected byte HOPROCO;
protected byte HOPROCP;
protected byte HOPRODK;
protected byte HOPROEP;
protected byte HOPROIN;
protected byte HOPROM85;
protected byte HOPROM86;
protected byte HOPROM96;
protected byte HOPROMCO;
protected byte HOPROMCP;
protected byte HOPROMDK;
protected byte HOPROMEP;
protected byte HOPROMIN;
protected byte HOPROMNZ;
protected byte HOPROMPO;
protected byte HOPROMRD;
protected byte HOPROMRO;
protected byte HOPROMSN;
protected byte HOPROMSP;
protected byte HOPROMST;
protected byte HOPROMVA;
protected byte HOPROMWA;
protected byte HOPRONZ;
protected byte HOPROPO;
protected byte HOPRORD;
protected byte HOPRORO;
protected byte HOPROSN;
protected byte HOPROSP;
protected byte HOPROWA;
protected byte HOREBFE;
protected short HOREBFL;
protected byte HOREBFR;
protected short HOREBFU;
protected byte HOREBME;
protected short HOREBML;
protected byte HOREBMR;
protected short HOREBMU;
protected byte HOREBOE;
protected short HOREBOL;
protected byte HOREBOR;
protected short HOREBOU;
protected byte HOREBWE;
protected short HOREBWL;
protected byte HOREBWR;
protected short HOREBWU;
protected byte HOREBYE;
protected short HOREBYL;
protected byte HOREBYR;
protected byte HOREBYU;
protected byte HORET;
protected byte HORHB;
protected byte HORMAIN;
protected byte HORMO;
protected byte HORMO2;
protected byte HORMO3;
protected byte HORMO4;
protected byte HORMO5;
protected byte HORMO85;
protected byte HORMO86;
protected byte HORMO95;
protected byte HORMOFP;
protected byte HORMOLA;
protected byte HORMOM85;
protected byte HORMOM86;
protected byte HORMOMBA;
protected byte HORMOMBQ;
protected byte HORMOMFP;
protected byte HORMOMLA;
protected byte HORMOMNS;
protected byte HORMOMSH;
protected byte HORMOMSM;
protected byte HORMOSH;
protected byte HORMOSM;
protected byte HORMV95;
protected byte HORMVBA;
protected byte HORMVBO;
protected byte HORMVER;
protected byte HORMVHR;
protected byte HORMVIF;
protected byte HORMVJR;
protected byte HORMVMAB;
protected byte HORMVMBA;
protected byte HORMVMBO;
protected byte HORMVMER;
protected byte HORMVMHR;
protected byte HORMVMIF;
protected byte HORMVMJR;
protected byte HORMVMMS;
protected byte HORMVMNF;
protected byte HORMVMNH;
protected byte HORMVMNJ;
protected byte HORMVMOF;
protected byte HORMVMPC;
protected byte HORMVMPN;
protected byte HORMVMS;
protected byte HORMVMSP;
protected byte HORMVNF;
protected byte HORMVNJ;
protected byte HORMVOF;
protected byte HORMVPN;
protected byte HORMVSP;
protected byte HOSELL;
protected byte HOSELLE;
protected int HOSELLL;
protected byte HOSELLR;
protected int HOSELLU;
protected double HOSOLD;
protected byte HOSOLDE;
protected int HOSOLDL;
protected byte HOSOLDR;
protected int HOSOLDU;
protected byte HOTENST;
protected short HOTRABCH;
protected int HOTRABGC;
protected short HOTRABNR;
protected int HOTRABOC;
protected int HOTRABOR;
protected int HOTRAN;
protected byte HOTRANCH;
protected byte HOTRANE;
protected byte HOTRANGC;
protected short HOTRANL;
protected byte HOTRANNR;
protected byte HOTRANOC;
protected byte HOTRANOR;
protected byte HOTRANR;
protected short HOTRANU;
protected byte HOTRAPCH;
protected byte HOTRAPGC;
protected byte HOTRAPNR;
protected byte HOTRAPOC;
protected byte HOTRAPOR;
protected byte HOTRPA;
protected byte HOV;
protected byte HOVAG11;
protected byte HOVAG12;
protected byte HOVAG13;
protected byte HOVAG14;
protected byte HOVAG15;
protected byte HOVAG16;
protected int HOVE;
protected int HOVE1E;
protected int HOVE1L;
protected byte HOVE1R;
protected int HOVE1U;
protected int HOVE2;
protected short HOVE2E;
protected short HOVE2L;
protected byte HOVE2R;
protected short HOVE2U;
protected int HOVE3;
protected short HOVE3E;
protected int HOVE3L;
protected byte HOVE3R;
protected int HOVE3U;
protected short HOVE4;
protected byte HOVE4E;
protected short HOVE4L;
protected byte HOVE4R;
protected short HOVE4U;
protected short HOVE5;
protected byte HOVE5E;
protected int HOVE5L;
protected byte HOVE5R;
protected int HOVE5U;
protected byte HOVEHX;
protected int HOVML;
protected int HOVML2;
protected int HOVML2E;
protected int HOVML2L;
protected byte HOVML2R;
protected int HOVML2U;
protected int HOVML3;
protected int HOVML3E;
protected byte HOVML3L;
protected byte HOVML3R;
protected short HOVML3U;
protected int HOVML4;
protected int HOVML4E;
protected byte HOVML4L;
protected byte HOVML4R;
protected byte HOVML4U;
protected int HOVML5;
protected byte HOVML5E;
protected byte HOVML5L;
protected byte HOVML5R;
protected byte HOVML5U;
protected byte HOVMLE;
protected int HOVMLL;
protected byte HOVMLR;
protected int HOVMLU;
protected byte HOVN;
protected byte HOVNW;
protected byte HOVNW10;
protected byte HOVNW11;
protected byte HOVNW12;
protected byte HOVNW13;
protected byte HOVNW14;
protected byte HOVNW15;
protected byte HOVNW16;
protected byte HOVNW2;
protected byte HOVNW3;
protected byte HOVNW4;
protected byte HOVNW5;
protected byte HOVNW6;
protected byte HOVNW7;
protected byte HOVNW9;
protected byte HOVOW96;
protected byte HOVST;
protected byte HOVST10;
protected byte HOVST11;
protected byte HOVST12;
protected byte HOVST13;
protected byte HOVST14;
protected byte HOVST15;
protected byte HOVST16;
protected byte HOVST2;
protected byte HOVST3;
protected byte HOVST4;
protected byte HOVST5;
protected byte HOVST6;
protected byte HOVST7;
protected byte HOVST8;
protected byte HOVST9;
protected byte HOVW1001;
protected byte HOVW1002;
protected byte HOVW1003;
protected byte HOVW1004;
protected byte HOVW1005;
protected byte HOVW1006;
protected byte HOVW1007;
protected byte HOVW1008;
protected byte HOVW1009;
protected byte HOVW101;
protected byte HOVW1010;
protected byte HOVW1011;
protected byte HOVW1012;
protected byte HOVW1013;
protected byte HOVW1014;
protected byte HOVW1015;
protected byte HOVW1016;
protected byte HOVW1017;
protected byte HOVW1018;
protected byte HOVW1019;
protected byte HOVW102;
protected byte HOVW103;
protected byte HOVW104;
protected byte HOVW105;
protected byte HOVW106;
protected byte HOVW107;
protected byte HOVW108;
protected byte HOVW109;
protected byte HOVW11;
protected byte HOVW110;
protected byte HOVW1101;
protected byte HOVW1102;
protected byte HOVW1103;
protected byte HOVW1104;
protected byte HOVW1105;
protected byte HOVW1106;
protected byte HOVW1107;
protected byte HOVW1108;
protected byte HOVW1109;
protected byte HOVW111;
protected byte HOVW1110;
protected byte HOVW1111;
protected byte HOVW1112;
protected byte HOVW1113;
protected byte HOVW1114;
protected byte HOVW1115;
protected byte HOVW1116;
protected byte HOVW1117;
protected byte HOVW1118;
protected byte HOVW1119;
protected byte HOVW112;
protected byte HOVW113;
protected byte HOVW114;
protected byte HOVW115;
protected byte HOVW116;
protected byte HOVW117;
protected byte HOVW118;
protected byte HOVW119;
protected byte HOVW12;
protected byte HOVW1201;
protected byte HOVW1202;
protected byte HOVW1203;
protected byte HOVW1204;
protected byte HOVW1205;
protected byte HOVW1206;
protected byte HOVW1207;
protected byte HOVW1208;
protected byte HOVW1209;
protected byte HOVW1210;
protected byte HOVW1211;
protected byte HOVW1212;
protected byte HOVW1213;
protected byte HOVW1214;
protected byte HOVW1215;
protected byte HOVW1216;
protected byte HOVW1217;
protected byte HOVW1218;
protected byte HOVW1219;
protected byte HOVW13;
protected byte HOVW1301;
protected byte HOVW1302;
protected byte HOVW1303;
protected byte HOVW1304;
protected byte HOVW1305;
protected byte HOVW1306;
protected byte HOVW1307;
protected byte HOVW1308;
protected byte HOVW1309;
protected byte HOVW1310;
protected byte HOVW1311;
protected byte HOVW1312;
protected byte HOVW1313;
protected byte HOVW1314;
protected byte HOVW1315;
protected byte HOVW1316;
protected byte HOVW1317;
protected byte HOVW1318;
protected byte HOVW1319;
protected byte HOVW14;
protected byte HOVW1401;
protected byte HOVW1402;
protected byte HOVW1403;
protected byte HOVW1404;
protected byte HOVW1405;
protected byte HOVW1406;
protected byte HOVW1407;
protected byte HOVW1408;
protected byte HOVW1409;
protected byte HOVW1410;
protected byte HOVW1411;
protected byte HOVW1412;
protected byte HOVW1413;
protected byte HOVW1414;
protected byte HOVW1415;
protected byte HOVW1416;
protected byte HOVW1417;
protected byte HOVW1418;
protected byte HOVW1419;
protected byte HOVW15;
protected byte HOVW1501;
protected byte HOVW1502;
protected byte HOVW1503;
protected byte HOVW1504;
protected byte HOVW1505;
protected byte HOVW1506;
protected byte HOVW1507;
protected byte HOVW1508;
protected byte HOVW1509;
protected byte HOVW1510;
protected byte HOVW1511;
protected byte HOVW1512;
protected byte HOVW1513;
protected byte HOVW1514;
protected byte HOVW1515;
protected byte HOVW1516;
protected byte HOVW1517;
protected byte HOVW1518;
protected byte HOVW1519;
protected byte HOVW16;
protected byte HOVW1601;
protected byte HOVW1602;
protected byte HOVW1603;
protected byte HOVW1604;
protected byte HOVW1605;
protected byte HOVW1606;
protected byte HOVW1607;
protected byte HOVW1608;
protected byte HOVW1609;
protected byte HOVW1610;
protected byte HOVW1611;
protected byte HOVW1612;
protected byte HOVW1613;
protected byte HOVW1614;
protected byte HOVW1615;
protected byte HOVW1616;
protected byte HOVW1617;
protected byte HOVW1618;
protected byte HOVW1619;
protected byte HOVW2;
protected byte HOVW201;
protected byte HOVW202;
protected byte HOVW203;
protected byte HOVW204;
protected byte HOVW205;
protected byte HOVW206;
protected byte HOVW207;
protected byte HOVW208;
protected byte HOVW209;
protected byte HOVW210;
protected byte HOVW211;
protected byte HOVW212;
protected byte HOVW213;
protected byte HOVW214;
protected byte HOVW215;
protected byte HOVW216;
protected byte HOVW217;
protected byte HOVW218;
protected byte HOVW219;
protected byte HOVW3;
protected byte HOVW301;
protected byte HOVW302;
protected byte HOVW303;
protected byte HOVW304;
protected byte HOVW305;
protected byte HOVW306;
protected byte HOVW307;
protected byte HOVW308;
protected byte HOVW309;
protected byte HOVW310;
protected byte HOVW311;
protected byte HOVW312;
protected byte HOVW313;
protected byte HOVW314;
protected byte HOVW315;
protected byte HOVW316;
protected byte HOVW317;
protected byte HOVW318;
protected byte HOVW319;
protected byte HOVW4;
protected byte HOVW401;
protected byte HOVW402;
protected byte HOVW403;
protected byte HOVW404;
protected byte HOVW405;
protected byte HOVW406;
protected byte HOVW407;
protected byte HOVW408;
protected byte HOVW409;
protected byte HOVW410;
protected byte HOVW411;
protected byte HOVW412;
protected byte HOVW413;
protected byte HOVW414;
protected byte HOVW415;
protected byte HOVW416;
protected byte HOVW417;
protected byte HOVW418;
protected byte HOVW419;
protected byte HOVW5;
protected byte HOVW501;
protected byte HOVW502;
protected byte HOVW503;
protected byte HOVW504;
protected byte HOVW505;
protected byte HOVW506;
protected byte HOVW507;
protected byte HOVW508;
protected byte HOVW509;
protected byte HOVW510;
protected byte HOVW511;
protected byte HOVW512;
protected byte HOVW513;
protected byte HOVW514;
protected byte HOVW515;
protected byte HOVW516;
protected byte HOVW517;
protected byte HOVW518;
protected byte HOVW519;
protected byte HOVW6;
protected byte HOVW602;
protected byte HOVW603;
protected byte HOVW604;
protected byte HOVW605;
protected byte HOVW606;
protected byte HOVW607;
protected byte HOVW608;
protected byte HOVW609;
protected byte HOVW610;
protected byte HOVW611;
protected byte HOVW612;
protected byte HOVW613;
protected byte HOVW614;
protected byte HOVW615;
protected byte HOVW616;
protected byte HOVW617;
protected byte HOVW618;
protected byte HOVW619;
protected byte HOVW7;
protected byte HOVW701;
protected byte HOVW702;
protected byte HOVW703;
protected byte HOVW704;
protected byte HOVW705;
protected byte HOVW706;
protected byte HOVW707;
protected byte HOVW708;
protected byte HOVW709;
protected byte HOVW710;
protected byte HOVW711;
protected byte HOVW712;
protected byte HOVW713;
protected byte HOVW714;
protected byte HOVW715;
protected byte HOVW716;
protected byte HOVW717;
protected byte HOVW718;
protected byte HOVW719;
protected byte HOVW801;
protected byte HOVW802;
protected byte HOVW803;
protected byte HOVW804;
protected byte HOVW805;
protected byte HOVW806;
protected byte HOVW807;
protected byte HOVW808;
protected byte HOVW809;
protected byte HOVW810;
protected byte HOVW811;
protected byte HOVW812;
protected byte HOVW813;
protected byte HOVW814;
protected byte HOVW815;
protected byte HOVW816;
protected byte HOVW817;
protected byte HOVW818;
protected byte HOVW819;
protected byte HOVW901;
protected byte HOVW902;
protected byte HOVW903;
protected byte HOVW904;
protected byte HOVW905;
protected byte HOVW906;
protected byte HOVW907;
protected byte HOVW908;
protected byte HOVW909;
protected byte HOVW910;
protected byte HOVW911;
protected byte HOVW912;
protected byte HOVW913;
protected byte HOVW914;
protected byte HOVW915;
protected byte HOVW916;
protected byte HOVW917;
protected byte HOVW918;
protected byte HOVW919;
protected byte HOWH1;
protected byte HOWH10;
protected byte HOWH11;
protected byte HOWH12;
protected byte HOWH13;
protected byte HOWH14;
protected byte HOWH15;
protected byte HOWH16;
protected byte HOWH2;
protected byte HOWH3;
protected byte HOWH4;
protected byte HOWH5;
protected byte HOWH6;
protected byte HOWH7;
protected byte HOWH8;
protected byte HOWH9;
protected byte HOWH97;
protected byte HOYML;
protected byte HOYML2;
protected byte HOYML3;
protected byte HOYML4;
protected byte HOYML5;
protected double HSCRP;
protected short IAA39;
protected boolean IAA39FE;
protected boolean IAA39FL;
protected boolean IAA39FR;
protected boolean IAA39FU;
protected byte IAA39ME;
protected short IAA39ML;
protected boolean IAA39MR;
protected short IAA39MU;
protected byte IAA39OE;
protected boolean IAA39OL;
protected byte IAA39OR;
protected short IAA39OU;
protected byte IAA39WE;
protected boolean IAA39WL;
protected boolean IAA39WR;
protected boolean IAA39WU;
protected boolean IAA39YE;
protected boolean IAA39YL;
protected boolean IAA39YR;
protected boolean IAA39YU;
protected short IAA40;
protected boolean IAA40FE;
protected boolean IAA40FL;
protected boolean IAA40FR;
protected boolean IAA40FU;
protected byte IAA40ME;
protected short IAA40ML;
protected boolean IAA40MR;
protected short IAA40MU;
protected byte IAA40OE;
protected short IAA40OL;
protected byte IAA40OR;
protected short IAA40OU;
protected boolean IAA40WE;
protected boolean IAA40WL;
protected boolean IAA40WR;
protected boolean IAA40WU;
protected boolean IAA40YE;
protected boolean IAA40YL;
protected boolean IAA40YR;
protected boolean IAA40YU;
protected short IAA41;
protected byte IAA41FE;
protected short IAA41FL;
protected byte IAA41FR;
protected short IAA41FU;
protected boolean IAA41ME;
protected boolean IAA41ML;
protected boolean IAA41MR;
protected short IAA41MU;
protected byte IAA41OE;
protected short IAA41OL;
protected byte IAA41OR;
protected short IAA41OU;
protected byte IAA41WE;
protected byte IAA41WL;
protected byte IAA41WR;
protected byte IAA41WU;
protected boolean IAA41YE;
protected boolean IAA41YL;
protected boolean IAA41YR;
protected boolean IAA41YU;
protected short IAA42;
protected boolean IAA42FE;
protected boolean IAA42FL;
protected boolean IAA42FR;
protected boolean IAA42FU;
protected byte IAA42ME;
protected short IAA42ML;
protected byte IAA42MR;
protected short IAA42MU;
protected byte IAA42OE;
protected short IAA42OL;
protected byte IAA42OR;
protected short IAA42OU;
protected byte IAA42WE;
protected short IAA42WL;
protected byte IAA42WR;
protected short IAA42WU;
protected boolean IAA42YE;
protected boolean IAA42YL;
protected boolean IAA42YR;
protected short IAA42YU;
protected byte IAAIPE;
protected short IAAIPL;
protected byte IAAIPR;
protected short IAAIPU;
protected byte IABEBC;
protected byte IABEN95;
protected byte IABEN96;
protected byte IABENCB;
protected byte IABENCC;
protected byte IABENGA;
protected byte IABENIS;
protected byte IABENJA;
protected byte IABENM85;
protected byte IABENM86;
protected byte IABENM96;
protected byte IABENMCB;
protected byte IABENMCC;
protected byte IABENMEC;
protected byte IABENMGA;
protected byte IABENMIS;
protected byte IABENMJA;
protected byte IABENMPC;
protected byte IABENMTC;
protected byte IABENMUC;
protected byte IABENMWP;
protected byte IABENPC;
protected byte IABENR;
protected byte IABENTC;
protected byte IABENUC;
protected byte IABENWP;
protected byte IABEPN95;
protected byte IABEPN96;
protected byte IABEPNCB;
protected byte IABEPNCC;
protected byte IABEPNGA;
protected byte IABEPNIS;
protected byte IABEPNJA;
protected byte IABEPNPC;
protected byte IABEPNUC;
protected byte IABEPNWC;
protected byte IABEPNWP;
protected byte IABPNM85;
protected byte IABPNM86;
protected byte IABPNM96;
protected byte IABPNMCB;
protected byte IABPNMCC;
protected byte IABPNMEC;
protected byte IABPNMGA;
protected byte IABPNMIS;
protected byte IABPNMJA;
protected byte IABPNMPC;
protected byte IABPNMTC;
protected byte IABPNMUC;
protected byte IABPNMWP;
protected short IACBTA;
protected boolean IACBTFE;
protected boolean IACBTFL;
protected boolean IACBTFR;
protected boolean IACBTFU;
protected boolean IACBTME;
protected boolean IACBTML;
protected boolean IACBTMR;
protected boolean IACBTMU;
protected boolean IACBTOE;
protected boolean IACBTOL;
protected boolean IACBTOR;
protected boolean IACBTOU;
protected byte IACBTP;
protected boolean IACBTWE;
protected boolean IACBTWL;
protected boolean IACBTWR;
protected boolean IACBTWU;
protected byte IACBTX;
protected boolean IACBTYE;
protected boolean IACBTYL;
protected boolean IACBTYR;
protected boolean IACBTYU;
protected byte IACISAE;
protected short IACISAL;
protected byte IACISAR;
protected short IACISAU;
protected byte IADEBME;
protected short IADEBML;
protected byte IADEBMR;
protected short IADEBMU;
protected byte IADEM;
protected byte IADEN;
protected byte IAEA10E;
protected short IAEA10L;
protected byte IAEA10R;
protected short IAEA10U;
protected boolean IAEA11E;
protected byte IAEA11L;
protected boolean IAEA11R;
protected short IAEA11U;
protected boolean IAEA12E;
protected boolean IAEA12L;
protected boolean IAEA12R;
protected boolean IAEA12U;
protected boolean IAEA13E;
protected boolean IAEA13L;
protected boolean IAEA13R;
protected boolean IAEA13U;
protected boolean IAEA14E;
protected boolean IAEA14L;
protected boolean IAEA14R;
protected boolean IAEA14U;
protected boolean IAEA15E;
protected boolean IAEA15L;
protected boolean IAEA15R;
protected boolean IAEA15U;
protected boolean IAEA16E;
protected boolean IAEA16L;
protected boolean IAEA16R;
protected boolean IAEA16U;
protected byte IAEAR2E;
protected int IAEAR2L;
protected byte IAEAR2R;
protected int IAEAR2U;
protected byte IAEAR3E;
protected int IAEAR3L;
protected byte IAEAR3R;
protected int IAEAR3U;
protected byte IAEAR4E;
protected int IAEAR4L;
protected byte IAEAR4R;
protected int IAEAR4U;
protected byte IAEAR5E;
protected int IAEAR5L;
protected byte IAEAR5R;
protected int IAEAR5U;
protected byte IAEAR6E;
protected int IAEAR6L;
protected byte IAEAR6R;
protected int IAEAR6U;
protected byte IAEAR7E;
protected int IAEAR7L;
protected byte IAEAR7R;
protected int IAEAR7U;
protected byte IAEAR8E;
protected int IAEAR8L;
protected byte IAEAR8R;
protected int IAEAR8U;
protected byte IAEAR9E;
protected short IAEAR9L;
protected byte IAEAR9R;
protected short IAEAR9U;
protected byte IAEARE;
protected int IAEARL;
protected byte IAEARR;
protected int IAEARU;
protected short IAERN;
protected byte IAERN10;
protected boolean IAERN11;
protected boolean IAERN12;
protected boolean IAERN13;
protected boolean IAERN14;
protected boolean IAERN15;
protected boolean IAERN16;
protected int IAERN2;
protected int IAERN3;
protected int IAERN4;
protected int IAERN5;
protected short IAERN6;
protected short IAERN7;
protected short IAERN8;
protected byte IAERN9;
protected byte IAFBAE;
protected int IAFBAL;
protected byte IAFBAR;
protected int IAFBAU;
protected byte IAFFNUM;
protected byte IAFUEL;
protected byte IAG;
protected byte IAGAG;
protected byte IAGAG2;
protected byte IAGAG3;
protected byte IAGJ;
protected byte IAGJ2;
protected byte IAGJ3;
protected byte IAGN;
protected int IAGV;
protected int IAGV2;
protected byte IAGV2E;
protected short IAGV2L;
protected byte IAGV2R;
protected int IAGV2U;
protected int IAGV3;
protected byte IAGV3E;
protected int IAGV3L;
protected byte IAGV3R;
protected short IAGV3U;
protected byte IAGVE;
protected int IAGVL;
protected byte IAGVR;
protected int IAGVU;
protected byte IAGWH;
protected byte IAGWH2;
protected byte IAGWH3;
protected byte IAGWM;
protected byte IAGWM2;
protected byte IAGWM3;
protected byte IAGWN;
protected byte IAGWN2;
protected byte IAGWN3;
protected short IAGY;
protected short IAGY2;
protected short IAGY3;
protected byte IAHDBC;
protected byte IAHDN95;
protected byte IAHDN96;
protected byte IAHDNAA;
protected byte IAHDNCA;
protected byte IAHDNDL;
protected byte IAHDNES;
protected byte IAHDNIB;
protected byte IAHDNII;
protected byte IAHDNM85;
protected byte IAHDNM86;
protected byte IAHDNM96;
protected byte IAHDNMAA;
protected byte IAHDNMCA;
protected byte IAHDNMDL;
protected byte IAHDNMES;
protected byte IAHDNMIB;
protected byte IAHDNMII;
protected byte IAHDNMPI;
protected byte IAHDNMSD;
protected byte IAHDNMSP;
protected byte IAHDNMWD;
protected byte IAHDNPI;
protected byte IAHDNSD;
protected byte IAHDNSP;
protected byte IAHDNWD;
protected byte IAHDPN95;
protected byte IAHDPN96;
protected byte IAHDPNAA;
protected byte IAHDPNCA;
protected byte IAHDPNDL;
protected byte IAHDPNES;
protected byte IAHDPNIB;
protected byte IAHDPNII;
protected boolean IAHDPNM85;
protected byte IAHDPNM86;
protected byte IAHDPNM96;
protected byte IAHDPNMAA;
protected byte IAHDPNMCA;
protected byte IAHDPNMDL;
protected byte IAHDPNMES;
protected byte IAHDPNMIB;
protected byte IAHDPNMII;
protected byte IAHDPNMPI;
protected byte IAHDPNMSD;
protected byte IAHDPNMSP;
protected byte IAHDPNMWD;
protected byte IAHDPNPI;
protected byte IAHDPNSD;
protected byte IAHDPNSP;
protected byte IAHDPNWD;
protected byte IAHHINC;
protected byte IAHOMEE;
protected int IAHOMEL;
protected byte IAHOMER;
protected int IAHOMEU;
protected byte IAI;
protected byte IAIAG;
protected byte IAIAG2;
protected byte IAIAG3;
protected byte IAIJ;
protected byte IAIJ2;
protected byte IAIJ3;
protected byte IAIN;
protected byte IAIRAE;
protected int IAIRAL;
protected byte IAIRAR;
protected int IAIRAU;
protected byte IAISACAS;
protected byte IAISADE;
protected short IAISADL;
protected byte IAISADR;
protected short IAISADU;
protected byte IAISALI;
protected byte IAISASHA;
protected int IAIV;
protected int IAIV2;
protected byte IAIV2E;
protected int IAIV2L;
protected byte IAIV2R;
protected int IAIV2U;
protected int IAIV3;
protected byte IAIV3E;
protected int IAIV3L;
protected byte IAIV3R;
protected int IAIV3U;
protected byte IAIVE;
protected int IAIVL;
protected byte IAIVR;
protected int IAIVU;
protected byte IAIWH;
protected byte IAIWH2;
protected byte IAIWH3;
protected byte IAIWM;
protected byte IAIWM2;
protected byte IAIWM3;
protected byte IAIWN;
protected byte IAIWN2;
protected byte IAIWN3;
protected short IAIY;
protected short IAIY2;
protected short IAIY3;
protected byte IALIPAE;
protected int IALIPAL;
protected byte IALIPAR;
protected int IALIPAU;
protected byte IALISAE;
protected short IALISAL;
protected byte IALISAR;
protected short IALISAU;
protected byte IALIYAE;
protected int IALIYAL;
protected byte IALIYAR;
protected int IALIYAU;
protected byte IALOAME;
protected short IALOAML;
protected byte IALOAMR;
protected short IALOAMU;
protected byte IALOAN96;
protected byte IALOANHP;
protected byte IALOANML;
protected byte IALOANMO;
protected byte IALOANOD;
protected byte IALOANPL;
protected byte IALOANSF;
protected byte IALREFE;
protected byte IALREFL;
protected byte IALREFR;
protected byte IALREFU;
protected byte IALREME;
protected short IALREML;
protected byte IALREMR;
protected short IALREMU;
protected byte IALREOE;
protected short IALREOL;
protected byte IALREOR;
protected short IALREOU;
protected byte IALREWE;
protected short IALREWL;
protected byte IALREWR;
protected byte IALREWU;
protected byte IALREYE;
protected short IALREYL;
protected byte IALREYR;
protected short IALREYU;
protected byte IAMRP2;
protected boolean IAMRP3;
protected boolean IAMRP4;
protected byte IANPBPE;
protected short IANPBPL;
protected byte IANPBPR;
protected short IANPBPU;
protected byte IAOASAE;
protected int IAOASAL;
protected byte IAOASAR;
protected int IAOASAU;
protected byte IAOMME;
protected int IAOMML;
protected byte IAOMMR;
protected int IAOMMU;
protected byte IAOTHP3;
protected boolean IAOTHP4;
protected byte IAOWEME;
protected short IAOWEML;
protected byte IAOWEMR;
protected short IAOWEMU;
protected byte IAP39;
protected byte IAP40;
protected byte IAP41;
protected byte IAP42;
protected boolean IAPA3FE;
protected boolean IAPA3FL;
protected boolean IAPA3FR;
protected boolean IAPA3FU;
protected boolean IAPA3ME;
protected boolean IAPA3ML;
protected boolean IAPA3MR;
protected boolean IAPA3MU;
protected boolean IAPA3OE;
protected boolean IAPA3OL;
protected boolean IAPA3OR;
protected boolean IAPA3OU;
protected boolean IAPA3WE;
protected boolean IAPA3WL;
protected boolean IAPA3WR;
protected boolean IAPA3WU;
protected boolean IAPA3YE;
protected boolean IAPA3YL;
protected boolean IAPA3YR;
protected boolean IAPA3YU;
protected boolean IAPA4FE;
protected boolean IAPA4FL;
protected boolean IAPA4FR;
protected boolean IAPA4FU;
protected boolean IAPA4ME;
protected boolean IAPA4ML;
protected boolean IAPA4MR;
protected boolean IAPA4MU;
protected boolean IAPA4OE;
protected boolean IAPA4OL;
protected boolean IAPA4OR;
protected boolean IAPA4OU;
protected boolean IAPA4WE;
protected boolean IAPA4WL;
protected boolean IAPA4WR;
protected boolean IAPA4WU;
protected boolean IAPA4YE;
protected boolean IAPA4YL;
protected boolean IAPA4YR;
protected boolean IAPA4YU;
protected boolean IAPA5FE;
protected boolean IAPA5FL;
protected boolean IAPA5FR;
protected boolean IAPA5FU;
protected boolean IAPA5ME;
protected boolean IAPA5ML;
protected boolean IAPA5MR;
protected boolean IAPA5MU;
protected boolean IAPA5OE;
protected boolean IAPA5OL;
protected boolean IAPA5OR;
protected boolean IAPA5OU;
protected boolean IAPA5WE;
protected boolean IAPA5WL;
protected boolean IAPA5WR;
protected boolean IAPA5WU;
protected boolean IAPA5YE;
protected boolean IAPA5YL;
protected boolean IAPA5YR;
protected boolean IAPA5YU;
protected byte IAPAM3;
protected boolean IAPAM4;
protected boolean IAPAM5;
protected byte IAPASK;
protected byte IAPAY;
protected byte IAPAY2;
protected byte IAPAY3;
protected boolean IAPAY4;
protected byte IAPAYR;
protected byte IAPAYR2;
protected byte IAPAYR3;
protected boolean IAPAYR4;
protected byte IAPF2;
protected boolean IAPF3;
protected boolean IAPF4;
protected byte IAPK95;
protected byte IAPK96;
protected byte IAPKGW;
protected byte IAPKIOB;
protected byte IAPKLI;
protected byte IAPKM1E;
protected int IAPKM1L;
protected byte IAPKM1R;
protected int IAPKM1U;
protected byte IAPKM2E;
protected int IAPKM2L;
protected byte IAPKM2R;
protected int IAPKM2U;
protected byte IAPKM3E;
protected boolean IAPKM3L;
protected byte IAPKM3R;
protected short IAPKM3U;
protected byte IAPKM4E;
protected short IAPKM4L;
protected byte IAPKM4R;
protected short IAPKM4U;
protected byte IAPKM5E;
protected int IAPKM5L;
protected byte IAPKM5R;
protected int IAPKM5U;
protected byte IAPKM6E;
protected int IAPKM6L;
protected byte IAPKM6R;
protected int IAPKM6U;
protected byte IAPKM7E;
protected short IAPKM7L;
protected byte IAPKM7R;
protected short IAPKM7U;
protected byte IAPKM85;
protected byte IAPKM86;
protected byte IAPKM8E;
protected int IAPKM8L;
protected byte IAPKM8R;
protected int IAPKM8U;
protected int IAPKM9;
protected byte IAPKM96;
protected byte IAPKM9E;
protected byte IAPKM9L;
protected byte IAPKM9R;
protected short IAPKM9U;
protected byte IAPKMGW;
protected byte IAPKMIOB;
protected byte IAPKMLI;
protected byte IAPKMOIP;
protected byte IAPKMPAP;
protected byte IAPKMPP;
protected boolean IAPKMPPI;
protected byte IAPKMRP;
protected byte IAPKMSG;
protected byte IAPKOIP;
protected byte IAPKPAP;
protected byte IAPKPP;
protected byte IAPKRP;
protected byte IAPKSG;
protected byte IAPPAFE;
protected boolean IAPPAFL;
protected byte IAPPAFR;
protected short IAPPAFU;
protected byte IAPPAME;
protected short IAPPAML;
protected byte IAPPAMR;
protected short IAPPAMU;
protected byte IAPPAOE;
protected short IAPPAOL;
protected byte IAPPAOR;
protected short IAPPAOU;
protected byte IAPPAWE;
protected short IAPPAWL;
protected byte IAPPAWR;
protected short IAPPAWU;
protected byte IAPPAYE;
protected short IAPPAYL;
protected byte IAPPAYR;
protected short IAPPAYU;
protected byte IAPPEIE;
protected short IAPPEIL;
protected byte IAPPEIR;
protected short IAPPEIU;
protected int IAPPMO;
protected byte IAPPMOE;
protected short IAPPMOL;
protected byte IAPPMOR;
protected short IAPPMOU;
protected byte IAPR2;
protected boolean IAPR3;
protected boolean IAPR4;
protected byte IAPROP95;
protected byte IAPROP96;
protected byte IAPROPFA;
protected byte IAPROPHO;
protected byte IAPROPIN;
protected byte IAPROPOL;
protected byte IAPROPOW;
protected byte IAPROPTR;
protected byte IAPS2;
protected boolean IAPS3;
protected boolean IAPS4;
protected byte IAPSPEN;
protected byte IAPSPW;
protected byte IAPYW11;
protected boolean IAPYW12;
protected byte IAPYW13;
protected byte IAPYW14;
protected boolean IAPYW15;
protected boolean IAPYW16;
protected byte IAPYW2;
protected byte IAPYW3;
protected byte IAPYW4;
protected byte IAPYW5;
protected byte IAPYW6;
protected byte IAPYW7;
protected byte IAPYW9;
protected byte IARECE;
protected short IARECL;
protected byte IARECR;
protected short IARECU;
protected short IAREGM3;
protected boolean IAREGM4;
protected byte IAREGO3;
protected boolean IAREGO4;
protected boolean IAREPFE;
protected boolean IAREPFL;
protected boolean IAREPFR;
protected boolean IAREPFU;
protected byte IAREPME;
protected byte IAREPML;
protected byte IAREPMR;
protected short IAREPMU;
protected byte IAREPOE;
protected short IAREPOL;
protected byte IAREPOR;
protected short IAREPOU;
protected byte IAREPWE;
protected byte IAREPWL;
protected byte IAREPWR;
protected byte IAREPWU;
protected byte IAREPYE;
protected byte IAREPYL;
protected byte IAREPYR;
protected short IAREPYU;
protected boolean IARG2FE;
protected boolean IARG2FL;
protected boolean IARG2FR;
protected boolean IARG2FU;
protected byte IARG2ME;
protected short IARG2ML;
protected byte IARG2MR;
protected short IARG2MU;
protected byte IARG2OE;
protected byte IARG2OL;
protected byte IARG2OR;
protected byte IARG2OU;
protected boolean IARG2WE;
protected boolean IARG2WL;
protected boolean IARG2WR;
protected boolean IARG2WU;
protected boolean IARG2YE;
protected boolean IARG2YL;
protected boolean IARG2YR;
protected boolean IARG2YU;
protected boolean IARG3FE;
protected boolean IARG3FL;
protected boolean IARG3FR;
protected boolean IARG3FU;
protected boolean IARG3ME;
protected boolean IARG3ML;
protected boolean IARG3MR;
protected boolean IARG3MU;
protected boolean IARG3OE;
protected boolean IARG3OL;
protected boolean IARG3OR;
protected boolean IARG3OU;
protected boolean IARG3WE;
protected boolean IARG3WL;
protected boolean IARG3WR;
protected boolean IARG3WU;
protected boolean IARG3YE;
protected boolean IARG3YL;
protected boolean IARG3YR;
protected boolean IARG3YU;
protected boolean IARG4FE;
protected boolean IARG4FL;
protected boolean IARG4FR;
protected boolean IARG4FU;
protected boolean IARG4ME;
protected boolean IARG4ML;
protected boolean IARG4MR;
protected boolean IARG4MU;
protected boolean IARG4OE;
protected boolean IARG4OL;
protected boolean IARG4OR;
protected boolean IARG4OU;
protected boolean IARG4WE;
protected boolean IARG4WL;
protected boolean IARG4WR;
protected boolean IARG4WU;
protected boolean IARG4YE;
protected boolean IARG4YL;
protected boolean IARG4YR;
protected boolean IARG4YU;
protected boolean IARGFE;
protected boolean IARGFL;
protected boolean IARGFR;
protected boolean IARGFU;
protected byte IARGME;
protected short IARGML;
protected byte IARGMR;
protected short IARGMU;
protected byte IARGOE;
protected short IARGOL;
protected byte IARGOR;
protected short IARGOU;
protected byte IARGWE;
protected byte IARGWL;
protected byte IARGWR;
protected byte IARGWU;
protected byte IARGYE;
protected byte IARGYL;
protected byte IARGYR;
protected byte IARGYU;
protected byte IASAVAE;
protected int IASAVAL;
protected byte IASAVAR;
protected int IASAVAU;
protected byte IASCAE;
protected int IASCAL;
protected byte IASCAR;
protected int IASCAU;
protected byte IASHTFOL;
protected byte IASHTMUT;
protected byte IASHTPRI;
protected byte IASHTUKL;
protected byte IASI95;
protected byte IASI96;
protected byte IASIBG;
protected byte IASICA;
protected byte IASIISA;
protected byte IASINS;
protected byte IASIOIE;
protected short IASIOIL;
protected byte IASIOIR;
protected short IASIOIU;
protected byte IASIOPT;
protected byte IASIPB;
protected byte IASIPEP;
protected byte IASISAE;
protected int IASISAL;
protected byte IASISAR;
protected int IASISAU;
protected byte IASISAV;
protected byte IASISC;
protected byte IASISHA;
protected byte IASITESS;
protected byte IASIUIT;
protected byte IASSSE;
protected byte IASSSIE;
protected short IASSSIL;
protected byte IASSSIR;
protected short IASSSIU;
protected int IASSSL;
protected byte IASSSR;
protected int IASSSU;
protected boolean IAT39;
protected boolean IAT40;
protected boolean IAT41;
protected boolean IAT42;
protected byte IAUITE;
protected byte IAUITIE;
protected short IAUITIL;
protected byte IAUITIR;
protected short IAUITIU;
protected int IAUITL;
protected byte IAUITR;
protected int IAUITU;
protected byte IAW1R;
protected byte IGF1;
protected double LDL;
protected byte LIGHTEAT;
protected byte MAINHH;
protected short MAP1;
protected short MAP2;
protected short MAP3;
protected double MAPVAL;
protected double MCH;
protected byte MEDCNJD;
protected byte MIFIN;
protected byte MILIVE;
protected byte MIREL;
protected byte MISINT;
protected byte MISPOU;
protected byte MMCOM85;
protected byte MMCOM86;
protected byte MMCOMNI;
protected byte MMCOMPA;
protected byte MMCOMRF;
protected byte MMCOMSP;
protected byte MMCOMSW;
protected byte MMCOMTM;
protected byte MMCOMUN;
protected byte MMGSD1;
protected byte MMGSD2;
protected byte MMGSD3;
protected byte MMGSDOM;
protected byte MMGSN1;
protected byte MMGSN2;
protected byte MMGSN3;
protected byte MMGSPR95;
protected byte MMGSPREQ;
protected byte MMGSPRPA;
protected byte MMGSPRRE;
protected byte MMGSRES;
protected byte MMGSSTA;
protected boolean MMGSSTP;
protected byte MMGSTP;
protected byte MMGSWIL;
protected byte NATTBP95;
protected byte NATTBPCO;
protected byte NATTBPCU;
protected byte NATTBPEQ;
protected byte NATTBPER;
protected byte NATTBPUP;
protected byte NOBSM95;
protected byte NOBSMFA;
protected byte NOBSMSV;
protected byte NOBSMUP;
protected byte NOWTBC95;
protected byte NOWTBCBE;
protected byte NOWTBCCH;
protected byte NOWTBCHE;
protected byte NOWTBCPA;
protected byte NOWTBCSC;
protected byte NOWTBCSH;
protected byte NOWTBCST;
protected byte NOWTBCUN;
protected boolean NURELIG;
protected byte ORDCON;
protected byte PAINHH;
protected byte PC_P_F;
protected double PC_P_I;
protected short PC_P_O;
protected short PC_P_T;
protected byte PC_R_F;
protected double PC_R_I;
protected short PC_R_O;
protected short PC_R_T;
protected byte PIP_P_F;
protected double PIP_P_I;
protected short PIP_P_O;
protected short PIP_P_T;
protected byte PIP_R_F;
protected double PIP_R_I;
protected short PIP_R_O;
protected short PIP_R_T;
protected byte PSMNTA;
protected byte PSMNTB;
protected short PULSE1;
protected short PULSE2;
protected short PULSE3;
protected double PULVAL;
protected byte REFBSC95;
protected byte REFBSCDI;
protected byte REFBSCHI;
protected byte REFBSCIL;
protected byte REFBSCNE;
protected byte REFBSCTE;
protected byte RELWAIT;
protected byte RESNWT;
protected byte RESPBPS;
protected byte RESPWTS;
protected short RTIN;
protected byte SAMDIF95;
protected byte SAMDIFFA;
protected byte SAMDIFIN;
protected byte SAMDIFNO;
protected byte SAMDIFSE;
protected byte SAMDIFTO;
protected byte SAMDIFVE;
protected byte SAMPTAK;
protected String SAMPTYP;
protected byte SCACTA;
protected byte SCACTB;
protected byte SCACTC;
protected byte SCACTD;
protected byte SCAGLIK;
protected byte SCAKO;
protected byte SCAL7A;
protected byte SCAL7B;
protected byte SCCHDJ;
protected byte SCCHDK;
protected byte SCCNTA;
protected byte SCCNTB;
protected byte SCCNTC;
protected byte SCCNTD;
protected byte SCCNTE;
protected byte SCCNTF;
protected byte SCDRPIN;
protected byte SCDRSPI;
protected byte SCDRWIN;
protected byte SCEMPL;
protected byte SCEND;
protected byte SCFAMH;
protected byte SCFAMJ;
protected byte SCFAMK;
protected byte SCFAMM;
protected byte SCFEELA;
protected byte SCFEELB;
protected byte SCFEELC;
protected byte SCFEELD;
protected byte SCFEELE;
protected byte SCFPATI;
protected byte SCFRDJ;
protected byte SCFRDK;
protected byte SCFRDM;
protected byte SCFRISK;
protected byte SCFRU;
protected byte SCGPATI;
protected byte SCGRISK;
protected byte SCHBODY;
protected byte SCHDECI;
protected byte SCHEBOW;
protected byte SCHEBOWA;
protected byte SCHELNCT;
protected byte SCHELNCTA;
protected byte SCHEXPT;
protected byte SCHPATI;
protected byte SCHQUAL;
protected byte SCHRISK;
protected byte SCINA95;
protected byte SCINA96;
protected byte SCINABK;
protected byte SCINACL;
protected byte SCINACT;
protected byte SCINAED;
protected byte SCINAEM;
protected byte SCINAGM;
protected byte SCINAJB;
protected byte SCINANW;
protected byte SCINAPS;
protected byte SCINASH;
protected byte SCINASL;
protected byte SCINASN;
protected byte SCINAST;
protected byte SCIND95;
protected byte SCIND96;
protected byte SCINDDT;
protected byte SCINDLT;
protected byte SCINDPH;
protected byte SCINDTB;
protected byte SCINT;
protected byte SCLIFEA;
protected byte SCLIFEB;
protected byte SCLIFEC;
protected byte SCLIFED;
protected byte SCLIFEE;
protected byte SCMENA;
protected byte SCMENB;
protected byte SCMENC;
protected byte SCMEND;
protected byte SCMOREA;
protected byte SCMOREB;
protected byte SCMOREC;
protected byte SCMORED;
protected byte SCOABOTH;
protected byte SCOADO;
protected byte SCOAGRAM;
protected byte SCOAHLTH;
protected byte SCOAILL;
protected byte SCOALEIS;
protected byte SCOALON;
protected byte SCOAOLD;
protected byte SCOAOP;
protected byte SCOARESP;
protected byte SCOATLON;
protected byte SCOATOL;
protected short SCOFEEL;
protected byte SCOLDPOS;
protected byte SCORG95;
protected byte SCORG96;
protected byte SCORGCH;
protected byte SCORGED;
protected byte SCORGNW;
protected byte SCORGPO;
protected byte SCORGRL;
protected byte SCORGSC;
protected byte SCORGSP;
protected byte SCOVAN;
protected byte SCOVHA;
protected byte SCOVSA;
protected byte SCOVWO;
protected byte SCPRT;
protected byte SCPRTA;
protected byte SCPRTB;
protected byte SCPRTC;
protected byte SCPRTD;
protected byte SCPRTE;
protected byte SCPRTF;
protected byte SCPRTG;
protected byte SCPRTM;
protected byte SCPTR96;
protected byte SCPTRAB;
protected byte SCPTRHB;
protected byte SCPTRMP;
protected byte SCPTRNP;
protected byte SCPTRTR;
protected byte SCPTRUK;
protected byte SCPTRVT;
protected byte SCRTAGB;
protected short SCRTAGE;
protected byte SCVEG;
protected byte SCWORKA;
protected byte SCWORKB;
protected byte SCWORKC;
protected byte SCWORKD;
protected byte SCWORKE;
protected byte SCWORKF;
protected byte SCWORKG;
protected byte SCWORKH;
protected byte SCWORKI;
protected byte SCWORKJ;
protected byte SCWORKK;
protected byte SCWORKL;
protected byte SPAAGEYR;
protected short SPADYR;
protected byte SPBSPS;
protected byte SPBSTM;
protected byte SPCARA;
protected byte SPCARB;
protected byte SPDTDT;
protected byte SPHOSP;
protected byte SPLIFT;
protected byte SPTAXI;
protected byte SPTRAB1;
protected byte SPTRAB10;
protected byte SPTRAB11;
protected byte SPTRAB12;
protected byte SPTRAB2;
protected byte SPTRAB3;
protected byte SPTRAB4;
protected byte SPTRAB5;
protected byte SPTRAB6;
protected byte SPTRAB7;
protected byte SPTRAB8;
protected byte SPTRAB9;
protected byte SPTRAB95;
protected byte SPTRAM1;
protected byte SPTRAM10;
protected byte SPTRAM11;
protected byte SPTRAM12;
protected byte SPTRAM13;
protected byte SPTRAM2;
protected byte SPTRAM3;
protected byte SPTRAM4;
protected byte SPTRAM5;
protected byte SPTRAM6;
protected byte SPTRAM7;
protected byte SPTRAM8;
protected byte SPTRAM85;
protected byte SPTRAM86;
protected byte SPTRAM9;
protected byte SPTRO1;
protected byte SPTRO2;
protected byte SPTRO3;
protected byte SPTRO4;
protected byte SPTRO5;
protected byte SPTRO96;
protected byte STATINA;
protected byte STATINS;
protected short SYS1;
protected short SYS2;
protected short SYS3;
protected double SYSVAL;
protected double TRIG;
protected byte UC_P_F;
protected boolean UC_P_I;
protected short UC_P_O;
protected short UC_P_T;
protected byte UC_R_F;
protected double UC_R_I;
protected short UC_R_O;
protected short UC_R_T;
protected byte VISMON;
protected short VISYEAR;
protected short VITD;
protected double W8BLDWT;
protected byte W8BPOUT;
protected byte W8BSOUT;
protected byte W8GSOUT;
protected short W8HHOUT;
protected byte W8INDOUT;
protected byte W8NSSEC3;
protected byte W8NSSEC5;
protected byte W8NSSEC8;
protected boolean W8NUROUT;
protected double W8NURWT;
protected boolean W8SCOUT;
protected double W8SCWT;
protected boolean W8SEC;
protected boolean W8SIC;
protected byte W8SIC2003R;
protected boolean W8SOC;
protected byte W8SOC2000R;
protected boolean W8SSCOUT;
protected double W8SSCWT;
protected double W8W1LWGT;
protected double W8W4LWGT;
protected double W8XWGT;
protected double WBC;
protected double WEIGHT;
protected byte WHATEAT;
protected byte WHOSO4;
protected byte WHOSO5;
protected byte WHYNOBP;
protected int WP1Q;
protected int WP1SQ;
protected int WP2Q;
protected int WP2SQ;
protected int WP3Q;
protected int WP3SQ;
protected byte WPACT96;
protected byte WPACTCA;
protected byte WPACTED;
protected byte WPACTLO;
protected byte WPACTPW;
protected byte WPACTSE;
protected byte WPACTVW;
protected short WPAECP;
protected byte WPANYP;
protected byte WPAOTFE;
protected short WPAOTFL;
protected byte WPAOTFR;
protected short WPAOTFU;
protected byte WPAOTME;
protected short WPAOTML;
protected byte WPAOTMR;
protected short WPAOTMU;
protected byte WPAOTOE;
protected short WPAOTOL;
protected byte WPAOTOR;
protected short WPAOTOU;
protected byte WPAOTWE;
protected short WPAOTWL;
protected byte WPAOTWR;
protected short WPAOTWU;
protected byte WPAOTYE;
protected int WPAOTYL;
protected byte WPAOTYR;
protected int WPAOTYU;
protected byte WPAPFE;
protected double WPAPFL;
protected byte WPAPFR;
protected double WPAPFU;
protected byte WPASALE;
protected double WPASALL;
protected byte WPASALR;
protected double WPASALU;
protected byte WPBIMAE;
protected short WPBIMAL;
protected byte WPBIMAR;
protected short WPBIMAU;
protected byte WPBIWAE;
protected short WPBIWAL;
protected byte WPBIWAR;
protected short WPBIWAU;
protected byte WPBPS;
protected byte WPBPSPC;
protected byte WPBUSVE;
protected int WPBUSVL;
protected byte WPBUSVR;
protected int WPBUSVU;
protected byte WPCJ96;
protected byte WPCJAG;
protected byte WPCJBU;
protected byte WPCJDI;
protected byte WPCJFR;
protected byte WPCJPA;
protected byte WPCJSC;
protected byte WPCJSE;
protected byte WPCURP;
protected byte WPCURR;
protected byte WPDCDB;
protected int WPDCFV;
protected byte WPDCFVE;
protected int WPDCFVL;
protected byte WPDCFVR;
protected int WPDCFVU;
protected byte WPDCPAN;
protected byte WPDCPDK;
protected byte WPDCPMU;
protected byte WPDCPRG;
protected byte WPDCPSI;
protected byte WPDCRF;
protected byte WPDCW;
protected int WPDCWA;
protected byte WPDCWAE;
protected short WPDCWAL;
protected byte WPDCWAR;
protected int WPDCWAU;
protected byte WPDCWP95;
protected byte WPDCWPDB;
protected byte WPDCWPFR;
protected byte WPDCWPIN;
protected byte WPDCWPLA;
protected byte WPDCWPSP;
protected byte WPDCWPSV;
protected int WPDDFV;
protected byte WPDDFVE;
protected int WPDDFVL;
protected byte WPDDFVR;
protected int WPDDFVU;
protected byte WPDESP;
protected byte WPDESPC;
protected byte WPDPSP;
protected byte WPEARLY;
protected byte WPEC;
protected byte WPECA;
protected byte WPECPP;
protected byte WPERCP;
protected byte WPESJME;
protected short WPESJML;
protected byte WPESJMR;
protected short WPESJMU;
protected byte WPEXW;
protected byte WPFFCURP;
protected byte WPFFDCDB;
protected byte WPFFPENT;
protected byte WPFFRECP;
protected byte WPFFYBS;
protected byte WPFINFO;
protected byte WPFSAPC;
protected byte WPFSC;
protected byte WPFSEC;
protected byte WPHLWZ;
protected byte WPIFSAC;
protected byte WPIFSCO;
protected byte WPIFSEM;
protected byte WPIFSFA;
protected byte WPIFSFR;
protected byte WPIFSNO;
protected byte WPIFSPR;
protected byte WPIFSRE;
protected byte WPIFSRP;
protected byte WPINCT;
protected byte WPINFS95;
protected int WPIRLS;
protected byte WPIRLSE;
protected short WPIRLSL;
protected byte WPIRLSR;
protected int WPIRLSU;
protected byte WPIRP95;
protected byte WPIRPAN;
protected byte WPIRPDB;
protected byte WPIRPFR;
protected byte WPIRPIV;
protected byte WPIRPLA;
protected byte WPIRPSP;
protected byte WPIRPSV;
protected byte WPLFTP95;
protected byte WPLFTPAF;
protected byte WPLFTPCH;
protected byte WPLFTPEL;
protected byte WPLFTPOF;
protected byte WPLFTPRE;
protected byte WPLFTPRT;
protected byte WPLIMWK;
protected byte WPLJO95;
protected byte WPLJOBM;
protected byte WPLJOCA;
protected byte WPLJOCL;
protected byte WPLJODI;
protected byte WPLJOFE;
protected byte WPLJOIL;
protected byte WPLJOM85;
protected byte WPLJOM86;
protected byte WPLJOMBE;
protected byte WPLJOMCA;
protected byte WPLJOMCF;
protected byte WPLJOMCL;
protected byte WPLJOMDI;
protected byte WPLJOMER;
protected byte WPLJOMFE;
protected byte WPLJOMIL;
protected byte WPLJOMME;
protected byte WPLJOMMO;
protected byte WPLJOMO;
protected byte WPLJOMPR;
protected byte WPLJOMRE;
protected byte WPLJOMSA;
protected byte WPLJOMSE;
protected byte WPLJOMSP;
protected byte WPLJOMTI;
protected byte WPLJOMVO;
protected byte WPLJORE;
protected byte WPLJOSP;
protected byte WPLJOTI;
protected byte WPLJOVO;
protected int WPLUMPA;
protected byte WPLUMPAE;
protected int WPLUMPAL;
protected byte WPLUMPAR;
protected int WPLUMPAU;
protected byte WPLUMPE;
protected double WPLUMPL;
protected byte WPLUMPR;
protected byte WPLUMPS;
protected double WPLUMPU;
protected int WPMALA;
protected byte WPMANPP;
protected byte WPMANSP;
protected byte WPMFQ;
protected byte WPMFRAC;
protected byte WPMHIE;
protected short WPMHIL;
protected byte WPMHIR;
protected short WPMHIU;
protected byte WPMORE;
protected int WPMPAH;
protected int WPMSAH;
protected byte WPMSFQ;
protected int WPMSH;
protected byte WPMSQ;
protected byte WPMSSQ;
protected byte WPMSTQ;
protected byte WPMTQ;
protected byte WPMYNJ;
protected byte WPNEW;
protected boolean WPNEWP;
protected byte WPNPENS;
protected byte WPOJ;
protected byte WPOJ2;
protected byte WPOJ3;
protected byte WPOJ4;
protected byte WPOJ5;
protected byte WPOWB;
protected byte WPOWB2;
protected byte WPOWB3;
protected byte WPOWB4;
protected byte WPOWB5;
protected byte WPOWKAF;
protected byte WPOWKDO;
protected byte WPOWKEP;
protected byte WPOWKEW;
protected byte WPOWKIF;
protected byte WPOWKKE;
protected byte WPOWKST;
protected int WPPA;
protected byte WPPAAE;
protected int WPPAAL;
protected byte WPPAAR;
protected int WPPAAU;
protected byte WPPAM;
protected byte WPPATE;
protected int WPPATL;
protected byte WPPATR;
protected int WPPATU;
protected byte WPPENAE;
protected double WPPENAL;
protected byte WPPENAR;
protected double WPPENAU;
protected byte WPPENN;
protected byte WPPENT;
protected byte WPPENTE;
protected double WPPENTL;
protected byte WPPENTR;
protected double WPPENTU;
protected byte WPPFVE;
protected double WPPFVL;
protected byte WPPFVR;
protected double WPPFVU;
protected byte WPPREV;
protected byte WPPROFE;
protected int WPPROFL;
protected byte WPPROFR;
protected int WPPROFU;
protected byte WPPS;
protected byte WPPS95;
protected byte WPPSAF;
protected byte WPPSEL;
protected byte WPPSEX;
protected byte WPPSM85;
protected byte WPPSM86;
protected byte WPPSMAF;
protected byte WPPSMAG;
protected byte WPPSMAL;
protected byte WPPSMDL;
protected byte WPPSMEL;
protected byte WPPSMEX;
protected byte WPPSMHR;
protected byte WPPSMOT;
protected byte WPPSOT;
protected byte WPPSPC;
protected boolean WPPYRFE;
protected short WPPYRFL;
protected boolean WPPYRFR;
protected boolean WPPYRFU;
protected byte WPPYRME;
protected double WPPYRML;
protected byte WPPYRMR;
protected double WPPYRMU;
protected byte WPPYROE;
protected short WPPYROL;
protected byte WPPYROR;
protected short WPPYROU;
protected byte WPPYRWE;
protected short WPPYRWL;
protected byte WPPYRWR;
protected short WPPYRWU;
protected byte WPPYRYE;
protected double WPPYRYL;
protected byte WPPYRYR;
protected double WPPYRYU;
protected byte WPQN;
protected byte WPRC95;
protected byte WPRCM85;
protected byte WPRCM86;
protected byte WPRCMAF;
protected byte WPRCMMO;
protected byte WPRCMNK;
protected byte WPRCMO;
protected byte WPRCMOH;
protected byte WPRCMPU;
protected byte WPRCMRE;
protected byte WPRCMRI;
protected byte WPRCMST;
protected byte WPRCMUN;
protected byte WPRCPU;
protected byte WPRCRE;
protected byte WPRCRI;
protected byte WPRCST;
protected byte WPREA95;
protected byte WPREA96;
protected byte WPREACH;
protected byte WPREADT;
protected byte WPREAEN;
protected byte WPREAFA;
protected byte WPREAFI;
protected byte WPREAM85;
protected byte WPREAM86;
protected byte WPREAM96;
protected byte WPREAMCH;
protected byte WPREAMDT;
protected byte WPREAMEN;
protected byte WPREAMFA;
protected byte WPREAMFI;
protected byte WPREAMNO;
protected byte WPREAMOH;
protected byte WPREAMRE;
protected byte WPREAMRH;
protected byte WPREAMST;
protected byte WPREAMVR;
protected byte WPREAMYO;
protected byte WPREANO;
protected byte WPREAOH;
protected byte WPREARE;
protected byte WPREARH;
protected byte WPREAST;
protected byte WPREAVR;
protected byte WPREAYO;
protected byte WPRGHX;
protected byte WPRPENS;
protected byte WPRR95;
protected byte WPRR96;
protected byte WPRRAG;
protected byte WPRRCH;
protected byte WPRRDT;
protected byte WPRREN;
protected byte WPRRFA;
protected byte WPRRFI;
protected byte WPRRM85;
protected byte WPRRM86;
protected byte WPRRM96;
protected byte WPRRMAF;
protected byte WPRRMAG;
protected byte WPRRMCH;
protected byte WPRRMDT;
protected byte WPRRMEN;
protected byte WPRRMFA;
protected byte WPRRMFI;
protected byte WPRRMLI;
protected byte WPRRMOH;
protected byte WPRRMRE;
protected byte WPRRMRH;
protected byte WPRRMST;
protected byte WPRRMYO;
protected byte WPRROH;
protected byte WPRRRE;
protected byte WPRRRH;
protected byte WPRRST;
protected byte WPRRYO;
protected byte WPRSAD1;
protected byte WPRSAD10;
protected byte WPRSAD11;
protected byte WPRSAD12;
protected byte WPRSAD13;
protected byte WPRSAD2;
protected byte WPRSAD3;
protected byte WPRSAD4;
protected byte WPRSAD5;
protected byte WPRSAD6;
protected byte WPRSAD7;
protected byte WPRSAD8;
protected byte WPRSAD9;
protected byte WPSN;
protected byte WPSPAM;
protected byte WPSPAW;
protected byte WPSPD;
protected byte WPSPD1A;
protected byte WPSPD1B;
protected byte WPSPD2;
protected byte WPSPD3;
protected byte WPSPD3A;
protected byte WPSPD3M;
protected short WPSPD3Y;
protected byte WPSPD4;
protected byte WPSPD5M;
protected byte WPSPD5Y;
protected byte WPSPD6;
protected int WPSPOU;
protected byte WPSPOUP;
protected byte WPSPTU;
protected byte WPSPTUA;
protected byte WPSPY;
protected byte WPSRUL;
protected byte WPTHPFE;
protected short WPTHPFL;
protected byte WPTHPFR;
protected short WPTHPFU;
protected byte WPTHPME;
protected short WPTHPML;
protected byte WPTHPMR;
protected short WPTHPMU;
protected byte WPTHPOE;
protected short WPTHPOL;
protected byte WPTHPOR;
protected short WPTHPOU;
protected byte WPTHPWE;
protected short WPTHPWL;
protected byte WPTHPWR;
protected short WPTHPWU;
protected byte WPTHPYE;
protected int WPTHPYL;
protected byte WPTHPYR;
protected int WPTHPYU;
protected byte WPUPAFE;
protected short WPUPAFL;
protected byte WPUPAFR;
protected short WPUPAFU;
protected byte WPUPAME;
protected short WPUPAML;
protected byte WPUPAMR;
protected short WPUPAMU;
protected int WPUPAOE;
protected short WPUPAOL;
protected byte WPUPAOR;
protected short WPUPAOU;
protected byte WPUPAWE;
protected short WPUPAWL;
protected byte WPUPAWR;
protected short WPUPAWU;
protected byte WPUPAYE;
protected byte WPUPAYL;
protected byte WPUPAYR;
protected short WPUPAYU;
protected byte WPVBUSE;
protected int WPVBUSL;
protected byte WPVBUSR;
protected int WPVBUSU;
protected byte WPWLYYE;
protected int WPWLYYL;
protected byte WPWLYYR;
protected int WPWLYYU;
protected byte WPWYJ95;
protected byte WPWYJBU;
protected byte WPWYJCA;
protected byte WPWYJCO;
protected byte WPWYJFB;
protected byte WPWYJFI;
protected byte WPWYJHO;
protected byte WPWYJM85;
protected byte WPWYJM86;
protected byte WPWYJMBC;
protected byte WPWYJMBU;
protected byte WPWYJMCA;
protected byte WPWYJMCH;
protected byte WPWYJMCO;
protected byte WPWYJMFB;
protected byte WPWYJMFI;
protected byte WPWYJMHF;
protected byte WPWYJMHH;
protected byte WPWYJMHO;
protected byte WPWYJMLO;
protected byte WPWYJMMO;
protected byte WPWYJMON;
protected byte WPWYJMPA;
protected byte WPWYJMPH;
protected byte WPWYJMTI;
protected byte WPWYJMTO;
protected byte WPWYJON;
protected byte WPWYJPA;
protected byte WPWYJREA;
protected byte WPWYJTI;
protected byte WPWYN85;
protected byte WPWYNCA;
protected byte WPWYNCH;
protected byte WPWYNEA;
protected byte WPWYNEM;
protected byte WPWYNFA;
protected byte WPWYNM85;
protected byte WPWYNM86;
protected boolean WPWYNMAB;
protected byte WPWYNMCA;
protected byte WPWYNMCH;
protected byte WPWYNMCO;
protected byte WPWYNMDE;
protected byte WPWYNMEA;
protected byte WPWYNMEM;
protected byte WPWYNMFA;
protected byte WPWYNMLH;
protected byte WPWYNMLO;
protected byte WPWYNMMO;
protected byte WPWYNMO;
protected byte WPWYNMOH;
protected byte WPWYNMOR;
protected byte WPWYNMOU;
protected byte WPWYNMRE;
protected byte WPWYNMRH;
protected byte WPWYNMTI;
protected byte WPWYNMVR;
protected byte WPWYNOH;
protected byte WPWYNOU;
protected byte WPWYNRE;
protected byte WPWYNRH;
protected byte WPWYNTI;
protected byte WPWYNVR;
protected byte WPWYW95;
protected byte WPWYWEN;
protected byte WPWYWM85;
protected byte WPWYWM86;
protected byte WPWYWMCH;
protected byte WPWYWMEN;
protected byte WPWYWMFI;
protected byte WPWYWMHE;
protected byte WPWYWMHH;
protected byte WPWYWMMO;
protected byte WPWYWMO;
protected byte WPWYWMOH;
protected byte WPWYWMRH;
protected byte WPWYWMSU;
protected byte WPWYWOH;
protected byte WPWYWRH;
protected byte WPWYWSU;
protected byte WPYFRAC;
protected byte WPYST95;
protected byte WPYSTAF;
protected byte WPYSTCH;
protected byte WPYSTEN;
protected byte WPYSTFA;
protected byte WPYSTFI;
protected byte WPYSTM85;
protected byte WPYSTM86;
protected byte WPYSTMAF;
protected byte WPYSTMAG;
protected byte WPYSTMCH;
protected byte WPYSTMCO;
protected byte WPYSTMEN;
protected byte WPYSTMFA;
protected byte WPYSTMFI;
protected byte WPYSTMMO;
protected byte WPYSTMO;
protected byte WPYSTMOH;
protected byte WPYSTMOU;
protected byte WPYSTMPA;
protected byte WPYSTMRE;
protected byte WPYSTMRH;
protected byte WPYSTMST;
protected byte WPYSTMTI;
protected byte WPYSTMVR;
protected byte WPYSTMYO;
protected byte WPYSTOH;
protected byte WPYSTOU;
protected byte WPYSTPA;
protected byte WPYSTPM;
protected byte WPYSTRE;
protected byte WPYSTRH;
protected byte WPYSTTI;
protected byte WPYSTVR;
protected byte WPYSTYO;
protected byte WTC_P_F;
protected double WTC_P_I;
protected short WTC_P_O;
protected short WTC_P_T;
protected byte WTC_R_F;
protected double WTC_R_I;
protected short WTC_R_O;
protected short WTC_R_T;
protected final void initABVSPA(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
ABVSPA = false;
} else {
ABVSPA = true;
}
}
}

protected final void initABVSPASP(String s) {
if (!s.trim().isEmpty()) {
ABVSPASP = Byte.parseByte(s);
} else {
ABVSPASP = Byte.MIN_VALUE;
}
}

protected final void initAIRTEMP(String s) {
if (!s.trim().isEmpty()) {
AIRTEMP = Double.parseDouble(s);
} else {
AIRTEMP = Double.NaN;
}
}

protected final void initANYENDOW(String s) {
if (!s.trim().isEmpty()) {
ANYENDOW = Byte.parseByte(s);
} else {
ANYENDOW = Byte.MIN_VALUE;
}
}

protected final void initASKINST(String s) {
if (!s.trim().isEmpty()) {
ASKINST = Byte.parseByte(s);
} else {
ASKINST = Byte.MIN_VALUE;
}
}

protected final void initASKPX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
ASKPX = false;
} else {
ASKPX = true;
}
}
}

protected final void initBPCONST(String s) {
if (!s.trim().isEmpty()) {
BPCONST = Byte.parseByte(s);
} else {
BPCONST = Byte.MIN_VALUE;
}
}

protected final void initBPRESPC(String s) {
if (!s.trim().isEmpty()) {
BPRESPC = Byte.parseByte(s);
} else {
BPRESPC = Byte.MIN_VALUE;
}
}

protected final void initBSWILL(String s) {
if (!s.trim().isEmpty()) {
BSWILL = Byte.parseByte(s);
} else {
BSWILL = Byte.MIN_VALUE;
}
}

protected final void initCAARR01(String s) {
if (!s.trim().isEmpty()) {
CAARR01 = Byte.parseByte(s);
} else {
CAARR01 = Byte.MIN_VALUE;
}
}

protected final void initCAARR02(String s) {
if (!s.trim().isEmpty()) {
CAARR02 = Byte.parseByte(s);
} else {
CAARR02 = Byte.MIN_VALUE;
}
}

protected final void initCAARR03(String s) {
if (!s.trim().isEmpty()) {
CAARR03 = Byte.parseByte(s);
} else {
CAARR03 = Byte.MIN_VALUE;
}
}

protected final void initCAARR04(String s) {
if (!s.trim().isEmpty()) {
CAARR04 = Byte.parseByte(s);
} else {
CAARR04 = Byte.MIN_VALUE;
}
}

protected final void initCAARR05(String s) {
if (!s.trim().isEmpty()) {
CAARR05 = Byte.parseByte(s);
} else {
CAARR05 = Byte.MIN_VALUE;
}
}

protected final void initCAARR06(String s) {
if (!s.trim().isEmpty()) {
CAARR06 = Byte.parseByte(s);
} else {
CAARR06 = Byte.MIN_VALUE;
}
}

protected final void initCAARR07(String s) {
if (!s.trim().isEmpty()) {
CAARR07 = Byte.parseByte(s);
} else {
CAARR07 = Byte.MIN_VALUE;
}
}

protected final void initCAARR08(String s) {
if (!s.trim().isEmpty()) {
CAARR08 = Byte.parseByte(s);
} else {
CAARR08 = Byte.MIN_VALUE;
}
}

protected final void initCAARR09(String s) {
if (!s.trim().isEmpty()) {
CAARR09 = Byte.parseByte(s);
} else {
CAARR09 = Byte.MIN_VALUE;
}
}

protected final void initCAARR10(String s) {
if (!s.trim().isEmpty()) {
CAARR10 = Byte.parseByte(s);
} else {
CAARR10 = Byte.MIN_VALUE;
}
}

protected final void initCAARR11(String s) {
if (!s.trim().isEmpty()) {
CAARR11 = Byte.parseByte(s);
} else {
CAARR11 = Byte.MIN_VALUE;
}
}

protected final void initCAASK1(String s) {
if (!s.trim().isEmpty()) {
CAASK1 = Byte.parseByte(s);
} else {
CAASK1 = Byte.MIN_VALUE;
}
}

protected final void initCAASK2(String s) {
if (!s.trim().isEmpty()) {
CAASK2 = Byte.parseByte(s);
} else {
CAASK2 = Byte.MIN_VALUE;
}
}

protected final void initCACLUB1(String s) {
if (!s.trim().isEmpty()) {
CACLUB1 = Byte.parseByte(s);
} else {
CACLUB1 = Byte.MIN_VALUE;
}
}

protected final void initCACLUB2(String s) {
if (!s.trim().isEmpty()) {
CACLUB2 = Byte.parseByte(s);
} else {
CACLUB2 = Byte.MIN_VALUE;
}
}

protected final void initCACLUB3(String s) {
if (!s.trim().isEmpty()) {
CACLUB3 = Byte.parseByte(s);
} else {
CACLUB3 = Byte.MIN_VALUE;
}
}

protected final void initCACLUB4(String s) {
if (!s.trim().isEmpty()) {
CACLUB4 = Byte.parseByte(s);
} else {
CACLUB4 = Byte.MIN_VALUE;
}
}

protected final void initCACLUB5(String s) {
if (!s.trim().isEmpty()) {
CACLUB5 = Byte.parseByte(s);
} else {
CACLUB5 = Byte.MIN_VALUE;
}
}

protected final void initCACLUB96(String s) {
if (!s.trim().isEmpty()) {
CACLUB96 = Byte.parseByte(s);
} else {
CACLUB96 = Byte.MIN_VALUE;
}
}

protected final void initCADCC(String s) {
if (!s.trim().isEmpty()) {
CADCC = Byte.parseByte(s);
} else {
CADCC = Byte.MIN_VALUE;
}
}

protected final void initCADCD(String s) {
if (!s.trim().isEmpty()) {
CADCD = Byte.parseByte(s);
} else {
CADCD = Byte.MIN_VALUE;
}
}

protected final void initCADP1(String s) {
if (!s.trim().isEmpty()) {
CADP1 = Byte.parseByte(s);
} else {
CADP1 = Byte.MIN_VALUE;
}
}

protected final void initCADP2(String s) {
if (!s.trim().isEmpty()) {
CADP2 = Byte.parseByte(s);
} else {
CADP2 = Byte.MIN_VALUE;
}
}

protected final void initCADP3(String s) {
if (!s.trim().isEmpty()) {
CADP3 = Byte.parseByte(s);
} else {
CADP3 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM(String s) {
if (!s.trim().isEmpty()) {
CAFAM = Byte.parseByte(s);
} else {
CAFAM = Byte.MIN_VALUE;
}
}

protected final void initCAFAM10(String s) {
if (!s.trim().isEmpty()) {
CAFAM10 = Byte.parseByte(s);
} else {
CAFAM10 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM11(String s) {
if (!s.trim().isEmpty()) {
CAFAM11 = Byte.parseByte(s);
} else {
CAFAM11 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAFAM12 = false;
} else {
CAFAM12 = true;
}
}
}

protected final void initCAFAM13(String s) {
if (!s.trim().isEmpty()) {
CAFAM13 = Byte.parseByte(s);
} else {
CAFAM13 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM14(String s) {
if (!s.trim().isEmpty()) {
CAFAM14 = Byte.parseByte(s);
} else {
CAFAM14 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAFAM15 = false;
} else {
CAFAM15 = true;
}
}
}

protected final void initCAFAM16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAFAM16 = false;
} else {
CAFAM16 = true;
}
}
}

protected final void initCAFAM17(String s) {
if (!s.trim().isEmpty()) {
CAFAM17 = Byte.parseByte(s);
} else {
CAFAM17 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM18(String s) {
if (!s.trim().isEmpty()) {
CAFAM18 = Byte.parseByte(s);
} else {
CAFAM18 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAFAM19 = false;
} else {
CAFAM19 = true;
}
}
}

protected final void initCAFAM2(String s) {
if (!s.trim().isEmpty()) {
CAFAM2 = Byte.parseByte(s);
} else {
CAFAM2 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM20(String s) {
if (!s.trim().isEmpty()) {
CAFAM20 = Byte.parseByte(s);
} else {
CAFAM20 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM21(String s) {
if (!s.trim().isEmpty()) {
CAFAM21 = Byte.parseByte(s);
} else {
CAFAM21 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM22(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAFAM22 = false;
} else {
CAFAM22 = true;
}
}
}

protected final void initCAFAM23(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAFAM23 = false;
} else {
CAFAM23 = true;
}
}
}

protected final void initCAFAM24(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAFAM24 = false;
} else {
CAFAM24 = true;
}
}
}

protected final void initCAFAM25(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAFAM25 = false;
} else {
CAFAM25 = true;
}
}
}

protected final void initCAFAM3(String s) {
if (!s.trim().isEmpty()) {
CAFAM3 = Byte.parseByte(s);
} else {
CAFAM3 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM4(String s) {
if (!s.trim().isEmpty()) {
CAFAM4 = Byte.parseByte(s);
} else {
CAFAM4 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM5(String s) {
if (!s.trim().isEmpty()) {
CAFAM5 = Byte.parseByte(s);
} else {
CAFAM5 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM6(String s) {
if (!s.trim().isEmpty()) {
CAFAM6 = Byte.parseByte(s);
} else {
CAFAM6 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM7(String s) {
if (!s.trim().isEmpty()) {
CAFAM7 = Byte.parseByte(s);
} else {
CAFAM7 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM8(String s) {
if (!s.trim().isEmpty()) {
CAFAM8 = Byte.parseByte(s);
} else {
CAFAM8 = Byte.MIN_VALUE;
}
}

protected final void initCAFAM9(String s) {
if (!s.trim().isEmpty()) {
CAFAM9 = Byte.parseByte(s);
} else {
CAFAM9 = Byte.MIN_VALUE;
}
}

protected final void initCAFND1(String s) {
if (!s.trim().isEmpty()) {
CAFND1 = Byte.parseByte(s);
} else {
CAFND1 = Byte.MIN_VALUE;
}
}

protected final void initCAFND2(String s) {
if (!s.trim().isEmpty()) {
CAFND2 = Byte.parseByte(s);
} else {
CAFND2 = Byte.MIN_VALUE;
}
}

protected final void initCAGACT96(String s) {
if (!s.trim().isEmpty()) {
CAGACT96 = Byte.parseByte(s);
} else {
CAGACT96 = Byte.MIN_VALUE;
}
}

protected final void initCAGACTA(String s) {
if (!s.trim().isEmpty()) {
CAGACTA = Byte.parseByte(s);
} else {
CAGACTA = Byte.MIN_VALUE;
}
}

protected final void initCAGACTAR(String s) {
if (!s.trim().isEmpty()) {
CAGACTAR = Byte.parseByte(s);
} else {
CAGACTAR = Byte.MIN_VALUE;
}
}

protected final void initCAGACTB(String s) {
if (!s.trim().isEmpty()) {
CAGACTB = Byte.parseByte(s);
} else {
CAGACTB = Byte.MIN_VALUE;
}
}

protected final void initCAGACTC(String s) {
if (!s.trim().isEmpty()) {
CAGACTC = Byte.parseByte(s);
} else {
CAGACTC = Byte.MIN_VALUE;
}
}

protected final void initCAGACTD(String s) {
if (!s.trim().isEmpty()) {
CAGACTD = Byte.parseByte(s);
} else {
CAGACTD = Byte.MIN_VALUE;
}
}

protected final void initCAGACTE(String s) {
if (!s.trim().isEmpty()) {
CAGACTE = Byte.parseByte(s);
} else {
CAGACTE = Byte.MIN_VALUE;
}
}

protected final void initCAGACTF(String s) {
if (!s.trim().isEmpty()) {
CAGACTF = Byte.parseByte(s);
} else {
CAGACTF = Byte.MIN_VALUE;
}
}

protected final void initCAGACTG(String s) {
if (!s.trim().isEmpty()) {
CAGACTG = Byte.parseByte(s);
} else {
CAGACTG = Byte.MIN_VALUE;
}
}

protected final void initCAGACTHW(String s) {
if (!s.trim().isEmpty()) {
CAGACTHW = Byte.parseByte(s);
} else {
CAGACTHW = Byte.MIN_VALUE;
}
}

protected final void initCAGACTIL(String s) {
if (!s.trim().isEmpty()) {
CAGACTIL = Byte.parseByte(s);
} else {
CAGACTIL = Byte.MIN_VALUE;
}
}

protected final void initCAGACTLE(String s) {
if (!s.trim().isEmpty()) {
CAGACTLE = Byte.parseByte(s);
} else {
CAGACTLE = Byte.MIN_VALUE;
}
}

protected final void initCAGACTME(String s) {
if (!s.trim().isEmpty()) {
CAGACTME = Byte.parseByte(s);
} else {
CAGACTME = Byte.MIN_VALUE;
}
}

protected final void initCAGACTPU(String s) {
if (!s.trim().isEmpty()) {
CAGACTPU = Byte.parseByte(s);
} else {
CAGACTPU = Byte.MIN_VALUE;
}
}

protected final void initCAGACTSO(String s) {
if (!s.trim().isEmpty()) {
CAGACTSO = Byte.parseByte(s);
} else {
CAGACTSO = Byte.MIN_VALUE;
}
}

protected final void initCAGDIF(String s) {
if (!s.trim().isEmpty()) {
CAGDIF = Byte.parseByte(s);
} else {
CAGDIF = Byte.MIN_VALUE;
}
}

protected final void initCAGDIFA(String s) {
if (!s.trim().isEmpty()) {
CAGDIFA = Byte.parseByte(s);
} else {
CAGDIFA = Byte.MIN_VALUE;
}
}

protected final void initCAGHOA(String s) {
if (!s.trim().isEmpty()) {
CAGHOA = Byte.parseByte(s);
} else {
CAGHOA = Byte.MIN_VALUE;
}
}

protected final void initCAGHOL(String s) {
if (!s.trim().isEmpty()) {
CAGHOL = Byte.parseByte(s);
} else {
CAGHOL = Byte.MIN_VALUE;
}
}

protected final void initCAGLA(String s) {
if (!s.trim().isEmpty()) {
CAGLA = Byte.parseByte(s);
} else {
CAGLA = Byte.MIN_VALUE;
}
}

protected final void initCAGLK(String s) {
if (!s.trim().isEmpty()) {
CAGLK = Byte.parseByte(s);
} else {
CAGLK = Byte.MIN_VALUE;
}
}

protected final void initCAGLKTDS(String s) {
if (!s.trim().isEmpty()) {
CAGLKTDS = Byte.parseByte(s);
} else {
CAGLKTDS = Byte.MIN_VALUE;
}
}

protected final void initCAGLKTHO(String s) {
if (!s.trim().isEmpty()) {
CAGLKTHO = Byte.parseByte(s);
} else {
CAGLKTHO = Byte.MIN_VALUE;
}
}

protected final void initCAGLKTWE(String s) {
if (!s.trim().isEmpty()) {
CAGLKTWE = Byte.parseByte(s);
} else {
CAGLKTWE = Byte.MIN_VALUE;
}
}

protected final void initCAGLKTWK(String s) {
if (!s.trim().isEmpty()) {
CAGLKTWK = Byte.parseByte(s);
} else {
CAGLKTWK = Byte.MIN_VALUE;
}
}

protected final void initCAGLKTYR(String s) {
if (!s.trim().isEmpty()) {
CAGLKTYR = Byte.parseByte(s);
} else {
CAGLKTYR = Byte.MIN_VALUE;
}
}

protected final void initCAGTWD(String s) {
if (!s.trim().isEmpty()) {
CAGTWD = Byte.parseByte(s);
} else {
CAGTWD = Byte.MIN_VALUE;
}
}

protected final void initCAGTWDA(String s) {
if (!s.trim().isEmpty()) {
CAGTWDA = Byte.parseByte(s);
} else {
CAGTWDA = Byte.MIN_VALUE;
}
}

protected final void initCAGTWE(String s) {
if (!s.trim().isEmpty()) {
CAGTWE = Byte.parseByte(s);
} else {
CAGTWE = Byte.MIN_VALUE;
}
}

protected final void initCAGTWEA(String s) {
if (!s.trim().isEmpty()) {
CAGTWEA = Byte.parseByte(s);
} else {
CAGTWEA = Byte.MIN_VALUE;
}
}

protected final void initCAGTY(String s) {
if (!s.trim().isEmpty()) {
CAGTY = Byte.parseByte(s);
} else {
CAGTY = Byte.MIN_VALUE;
}
}

protected final void initCAGTYA(String s) {
if (!s.trim().isEmpty()) {
CAGTYA = Byte.parseByte(s);
} else {
CAGTYA = Byte.MIN_VALUE;
}
}

protected final void initCAGWHM85(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHM85 = false;
} else {
CAGWHM85 = true;
}
}
}

protected final void initCAGWHM86(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHM86 = false;
} else {
CAGWHM86 = true;
}
}
}

protected final void initCAGWHM96(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHM96 = false;
} else {
CAGWHM96 = true;
}
}
}

protected final void initCAGWHMEJ(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHMEJ = false;
} else {
CAGWHMEJ = true;
}
}
}

protected final void initCAGWHMLV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHMLV = false;
} else {
CAGWHMLV = true;
}
}
}

protected final void initCAGWHMOC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHMOC = false;
} else {
CAGWHMOC = true;
}
}
}

protected final void initCAGWHY95(String s) {
if (!s.trim().isEmpty()) {
CAGWHY95 = Byte.parseByte(s);
} else {
CAGWHY95 = Byte.MIN_VALUE;
}
}

protected final void initCAGWHY96(String s) {
if (!s.trim().isEmpty()) {
CAGWHY96 = Byte.parseByte(s);
} else {
CAGWHY96 = Byte.MIN_VALUE;
}
}

protected final void initCAGWHYAC(String s) {
if (!s.trim().isEmpty()) {
CAGWHYAC = Byte.parseByte(s);
} else {
CAGWHYAC = Byte.MIN_VALUE;
}
}

protected final void initCAGWHYDF(String s) {
if (!s.trim().isEmpty()) {
CAGWHYDF = Byte.parseByte(s);
} else {
CAGWHYDF = Byte.MIN_VALUE;
}
}

protected final void initCAGWHYDV(String s) {
if (!s.trim().isEmpty()) {
CAGWHYDV = Byte.parseByte(s);
} else {
CAGWHYDV = Byte.MIN_VALUE;
}
}

protected final void initCAGWHYEN(String s) {
if (!s.trim().isEmpty()) {
CAGWHYEN = Byte.parseByte(s);
} else {
CAGWHYEN = Byte.MIN_VALUE;
}
}

protected final void initCAGWHYFA(String s) {
if (!s.trim().isEmpty()) {
CAGWHYFA = Byte.parseByte(s);
} else {
CAGWHYFA = Byte.MIN_VALUE;
}
}

protected final void initCAGWHYFI(String s) {
if (!s.trim().isEmpty()) {
CAGWHYFI = Byte.parseByte(s);
} else {
CAGWHYFI = Byte.MIN_VALUE;
}
}

protected final void initCAGWHYGB(String s) {
if (!s.trim().isEmpty()) {
CAGWHYGB = Byte.parseByte(s);
} else {
CAGWHYGB = Byte.MIN_VALUE;
}
}

protected final void initCAGWHYMAC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHYMAC = false;
} else {
CAGWHYMAC = true;
}
}
}

protected final void initCAGWHYMDF(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHYMDF = false;
} else {
CAGWHYMDF = true;
}
}
}

protected final void initCAGWHYMDV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHYMDV = false;
} else {
CAGWHYMDV = true;
}
}
}

protected final void initCAGWHYMEN(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHYMEN = false;
} else {
CAGWHYMEN = true;
}
}
}

protected final void initCAGWHYMFA(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHYMFA = false;
} else {
CAGWHYMFA = true;
}
}
}

protected final void initCAGWHYMFI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHYMFI = false;
} else {
CAGWHYMFI = true;
}
}
}

protected final void initCAGWHYMGB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHYMGB = false;
} else {
CAGWHYMGB = true;
}
}
}

protected final void initCAGWHYMPB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHYMPB = false;
} else {
CAGWHYMPB = true;
}
}
}

protected final void initCAGWHYMPO(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHYMPO = false;
} else {
CAGWHYMPO = true;
}
}
}

protected final void initCAGWHYMWK(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAGWHYMWK = false;
} else {
CAGWHYMWK = true;
}
}
}

protected final void initCAGWHYPB(String s) {
if (!s.trim().isEmpty()) {
CAGWHYPB = Byte.parseByte(s);
} else {
CAGWHYPB = Byte.MIN_VALUE;
}
}

protected final void initCAGWHYPO(String s) {
if (!s.trim().isEmpty()) {
CAGWHYPO = Byte.parseByte(s);
} else {
CAGWHYPO = Byte.MIN_VALUE;
}
}

protected final void initCAGWHYWK(String s) {
if (!s.trim().isEmpty()) {
CAGWHYWK = Byte.parseByte(s);
} else {
CAGWHYWK = Byte.MIN_VALUE;
}
}

protected final void initCAGYA(String s) {
if (!s.trim().isEmpty()) {
CAGYA = Byte.parseByte(s);
} else {
CAGYA = Byte.MIN_VALUE;
}
}

protected final void initCAHFMCL1(String s) {
if (!s.trim().isEmpty()) {
CAHFMCL1 = Byte.parseByte(s);
} else {
CAHFMCL1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMCL2(String s) {
if (!s.trim().isEmpty()) {
CAHFMCL2 = Byte.parseByte(s);
} else {
CAHFMCL2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMCL3(String s) {
if (!s.trim().isEmpty()) {
CAHFMCL3 = Byte.parseByte(s);
} else {
CAHFMCL3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMCL4(String s) {
if (!s.trim().isEmpty()) {
CAHFMCL4 = Byte.parseByte(s);
} else {
CAHFMCL4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMCL5(String s) {
if (!s.trim().isEmpty()) {
CAHFMCL5 = Byte.parseByte(s);
} else {
CAHFMCL5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMCL6(String s) {
if (!s.trim().isEmpty()) {
CAHFMCL6 = Byte.parseByte(s);
} else {
CAHFMCL6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMDC1(String s) {
if (!s.trim().isEmpty()) {
CAHFMDC1 = Byte.parseByte(s);
} else {
CAHFMDC1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMDC2(String s) {
if (!s.trim().isEmpty()) {
CAHFMDC2 = Byte.parseByte(s);
} else {
CAHFMDC2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMDC3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMDC3 = false;
} else {
CAHFMDC3 = true;
}
}
}

protected final void initCAHFMDC4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMDC4 = false;
} else {
CAHFMDC4 = true;
}
}
}

protected final void initCAHFMDC5(String s) {
if (!s.trim().isEmpty()) {
CAHFMDC5 = Byte.parseByte(s);
} else {
CAHFMDC5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMDC6(String s) {
if (!s.trim().isEmpty()) {
CAHFMDC6 = Byte.parseByte(s);
} else {
CAHFMDC6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMEQ1(String s) {
if (!s.trim().isEmpty()) {
CAHFMEQ1 = Byte.parseByte(s);
} else {
CAHFMEQ1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMEQ2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMEQ2 = false;
} else {
CAHFMEQ2 = true;
}
}
}

protected final void initCAHFMEQ3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMEQ3 = false;
} else {
CAHFMEQ3 = true;
}
}
}

protected final void initCAHFMEQ4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMEQ4 = false;
} else {
CAHFMEQ4 = true;
}
}
}

protected final void initCAHFMEQ5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMEQ5 = false;
} else {
CAHFMEQ5 = true;
}
}
}

protected final void initCAHFMEQ6(String s) {
if (!s.trim().isEmpty()) {
CAHFMEQ6 = Byte.parseByte(s);
} else {
CAHFMEQ6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMFA1(String s) {
if (!s.trim().isEmpty()) {
CAHFMFA1 = Byte.parseByte(s);
} else {
CAHFMFA1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMFA2(String s) {
if (!s.trim().isEmpty()) {
CAHFMFA2 = Byte.parseByte(s);
} else {
CAHFMFA2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMFA3(String s) {
if (!s.trim().isEmpty()) {
CAHFMFA3 = Byte.parseByte(s);
} else {
CAHFMFA3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMFA4(String s) {
if (!s.trim().isEmpty()) {
CAHFMFA4 = Byte.parseByte(s);
} else {
CAHFMFA4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMFA5(String s) {
if (!s.trim().isEmpty()) {
CAHFMFA5 = Byte.parseByte(s);
} else {
CAHFMFA5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMFA6(String s) {
if (!s.trim().isEmpty()) {
CAHFMFA6 = Byte.parseByte(s);
} else {
CAHFMFA6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMFR1(String s) {
if (!s.trim().isEmpty()) {
CAHFMFR1 = Byte.parseByte(s);
} else {
CAHFMFR1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMFR2(String s) {
if (!s.trim().isEmpty()) {
CAHFMFR2 = Byte.parseByte(s);
} else {
CAHFMFR2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMFR3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMFR3 = false;
} else {
CAHFMFR3 = true;
}
}
}

protected final void initCAHFMFR4(String s) {
if (!s.trim().isEmpty()) {
CAHFMFR4 = Byte.parseByte(s);
} else {
CAHFMFR4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMFR5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMFR5 = false;
} else {
CAHFMFR5 = true;
}
}
}

protected final void initCAHFMFR6(String s) {
if (!s.trim().isEmpty()) {
CAHFMFR6 = Byte.parseByte(s);
} else {
CAHFMFR6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMGA1(String s) {
if (!s.trim().isEmpty()) {
CAHFMGA1 = Byte.parseByte(s);
} else {
CAHFMGA1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMGA2(String s) {
if (!s.trim().isEmpty()) {
CAHFMGA2 = Byte.parseByte(s);
} else {
CAHFMGA2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMGA3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMGA3 = false;
} else {
CAHFMGA3 = true;
}
}
}

protected final void initCAHFMGA4(String s) {
if (!s.trim().isEmpty()) {
CAHFMGA4 = Byte.parseByte(s);
} else {
CAHFMGA4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMGA5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMGA5 = false;
} else {
CAHFMGA5 = true;
}
}
}

protected final void initCAHFMGA6(String s) {
if (!s.trim().isEmpty()) {
CAHFMGA6 = Byte.parseByte(s);
} else {
CAHFMGA6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHC1(String s) {
if (!s.trim().isEmpty()) {
CAHFMHC1 = Byte.parseByte(s);
} else {
CAHFMHC1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHC2(String s) {
if (!s.trim().isEmpty()) {
CAHFMHC2 = Byte.parseByte(s);
} else {
CAHFMHC2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHC3(String s) {
if (!s.trim().isEmpty()) {
CAHFMHC3 = Byte.parseByte(s);
} else {
CAHFMHC3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHC4(String s) {
if (!s.trim().isEmpty()) {
CAHFMHC4 = Byte.parseByte(s);
} else {
CAHFMHC4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHC5(String s) {
if (!s.trim().isEmpty()) {
CAHFMHC5 = Byte.parseByte(s);
} else {
CAHFMHC5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHC6(String s) {
if (!s.trim().isEmpty()) {
CAHFMHC6 = Byte.parseByte(s);
} else {
CAHFMHC6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHM1(String s) {
if (!s.trim().isEmpty()) {
CAHFMHM1 = Byte.parseByte(s);
} else {
CAHFMHM1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHM2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMHM2 = false;
} else {
CAHFMHM2 = true;
}
}
}

protected final void initCAHFMHM3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMHM3 = false;
} else {
CAHFMHM3 = true;
}
}
}

protected final void initCAHFMHM4(String s) {
if (!s.trim().isEmpty()) {
CAHFMHM4 = Byte.parseByte(s);
} else {
CAHFMHM4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHM5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMHM5 = false;
} else {
CAHFMHM5 = true;
}
}
}

protected final void initCAHFMHM6(String s) {
if (!s.trim().isEmpty()) {
CAHFMHM6 = Byte.parseByte(s);
} else {
CAHFMHM6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHO1(String s) {
if (!s.trim().isEmpty()) {
CAHFMHO1 = Byte.parseByte(s);
} else {
CAHFMHO1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHO2(String s) {
if (!s.trim().isEmpty()) {
CAHFMHO2 = Byte.parseByte(s);
} else {
CAHFMHO2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHO3(String s) {
if (!s.trim().isEmpty()) {
CAHFMHO3 = Byte.parseByte(s);
} else {
CAHFMHO3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHO4(String s) {
if (!s.trim().isEmpty()) {
CAHFMHO4 = Byte.parseByte(s);
} else {
CAHFMHO4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHO5(String s) {
if (!s.trim().isEmpty()) {
CAHFMHO5 = Byte.parseByte(s);
} else {
CAHFMHO5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMHO6(String s) {
if (!s.trim().isEmpty()) {
CAHFMHO6 = Byte.parseByte(s);
} else {
CAHFMHO6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMIR1(String s) {
if (!s.trim().isEmpty()) {
CAHFMIR1 = Byte.parseByte(s);
} else {
CAHFMIR1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMIR2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMIR2 = false;
} else {
CAHFMIR2 = true;
}
}
}

protected final void initCAHFMIR3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMIR3 = false;
} else {
CAHFMIR3 = true;
}
}
}

protected final void initCAHFMIR4(String s) {
if (!s.trim().isEmpty()) {
CAHFMIR4 = Byte.parseByte(s);
} else {
CAHFMIR4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMIR5(String s) {
if (!s.trim().isEmpty()) {
CAHFMIR5 = Byte.parseByte(s);
} else {
CAHFMIR5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMIR6(String s) {
if (!s.trim().isEmpty()) {
CAHFMIR6 = Byte.parseByte(s);
} else {
CAHFMIR6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMNH1(String s) {
if (!s.trim().isEmpty()) {
CAHFMNH1 = Byte.parseByte(s);
} else {
CAHFMNH1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMNH2(String s) {
if (!s.trim().isEmpty()) {
CAHFMNH2 = Byte.parseByte(s);
} else {
CAHFMNH2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMNH3(String s) {
if (!s.trim().isEmpty()) {
CAHFMNH3 = Byte.parseByte(s);
} else {
CAHFMNH3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMNH4(String s) {
if (!s.trim().isEmpty()) {
CAHFMNH4 = Byte.parseByte(s);
} else {
CAHFMNH4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMNH5(String s) {
if (!s.trim().isEmpty()) {
CAHFMNH5 = Byte.parseByte(s);
} else {
CAHFMNH5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMNH6(String s) {
if (!s.trim().isEmpty()) {
CAHFMNH6 = Byte.parseByte(s);
} else {
CAHFMNH6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMNO1(String s) {
if (!s.trim().isEmpty()) {
CAHFMNO1 = Byte.parseByte(s);
} else {
CAHFMNO1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMNO2(String s) {
if (!s.trim().isEmpty()) {
CAHFMNO2 = Byte.parseByte(s);
} else {
CAHFMNO2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMNO3(String s) {
if (!s.trim().isEmpty()) {
CAHFMNO3 = Byte.parseByte(s);
} else {
CAHFMNO3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMNO4(String s) {
if (!s.trim().isEmpty()) {
CAHFMNO4 = Byte.parseByte(s);
} else {
CAHFMNO4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMNO5(String s) {
if (!s.trim().isEmpty()) {
CAHFMNO5 = Byte.parseByte(s);
} else {
CAHFMNO5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMNO6(String s) {
if (!s.trim().isEmpty()) {
CAHFMNO6 = Byte.parseByte(s);
} else {
CAHFMNO6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMOT1(String s) {
if (!s.trim().isEmpty()) {
CAHFMOT1 = Byte.parseByte(s);
} else {
CAHFMOT1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMOT2(String s) {
if (!s.trim().isEmpty()) {
CAHFMOT2 = Byte.parseByte(s);
} else {
CAHFMOT2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMOT3(String s) {
if (!s.trim().isEmpty()) {
CAHFMOT3 = Byte.parseByte(s);
} else {
CAHFMOT3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMOT4(String s) {
if (!s.trim().isEmpty()) {
CAHFMOT4 = Byte.parseByte(s);
} else {
CAHFMOT4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMOT5(String s) {
if (!s.trim().isEmpty()) {
CAHFMOT5 = Byte.parseByte(s);
} else {
CAHFMOT5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMOT6(String s) {
if (!s.trim().isEmpty()) {
CAHFMOT6 = Byte.parseByte(s);
} else {
CAHFMOT6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMRE1(String s) {
if (!s.trim().isEmpty()) {
CAHFMRE1 = Byte.parseByte(s);
} else {
CAHFMRE1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMRE2(String s) {
if (!s.trim().isEmpty()) {
CAHFMRE2 = Byte.parseByte(s);
} else {
CAHFMRE2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMRE3(String s) {
if (!s.trim().isEmpty()) {
CAHFMRE3 = Byte.parseByte(s);
} else {
CAHFMRE3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMRE4(String s) {
if (!s.trim().isEmpty()) {
CAHFMRE4 = Byte.parseByte(s);
} else {
CAHFMRE4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMRE5(String s) {
if (!s.trim().isEmpty()) {
CAHFMRE5 = Byte.parseByte(s);
} else {
CAHFMRE5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMRE6(String s) {
if (!s.trim().isEmpty()) {
CAHFMRE6 = Byte.parseByte(s);
} else {
CAHFMRE6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMSW1(String s) {
if (!s.trim().isEmpty()) {
CAHFMSW1 = Byte.parseByte(s);
} else {
CAHFMSW1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMSW2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMSW2 = false;
} else {
CAHFMSW2 = true;
}
}
}

protected final void initCAHFMSW3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMSW3 = false;
} else {
CAHFMSW3 = true;
}
}
}

protected final void initCAHFMSW4(String s) {
if (!s.trim().isEmpty()) {
CAHFMSW4 = Byte.parseByte(s);
} else {
CAHFMSW4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMSW5(String s) {
if (!s.trim().isEmpty()) {
CAHFMSW5 = Byte.parseByte(s);
} else {
CAHFMSW5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMSW6(String s) {
if (!s.trim().isEmpty()) {
CAHFMSW6 = Byte.parseByte(s);
} else {
CAHFMSW6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMVO1(String s) {
if (!s.trim().isEmpty()) {
CAHFMVO1 = Byte.parseByte(s);
} else {
CAHFMVO1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMVO2(String s) {
if (!s.trim().isEmpty()) {
CAHFMVO2 = Byte.parseByte(s);
} else {
CAHFMVO2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMVO3(String s) {
if (!s.trim().isEmpty()) {
CAHFMVO3 = Byte.parseByte(s);
} else {
CAHFMVO3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMVO4(String s) {
if (!s.trim().isEmpty()) {
CAHFMVO4 = Byte.parseByte(s);
} else {
CAHFMVO4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMVO5(String s) {
if (!s.trim().isEmpty()) {
CAHFMVO5 = Byte.parseByte(s);
} else {
CAHFMVO5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMVO6(String s) {
if (!s.trim().isEmpty()) {
CAHFMVO6 = Byte.parseByte(s);
} else {
CAHFMVO6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMWA1(String s) {
if (!s.trim().isEmpty()) {
CAHFMWA1 = Byte.parseByte(s);
} else {
CAHFMWA1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMWA2(String s) {
if (!s.trim().isEmpty()) {
CAHFMWA2 = Byte.parseByte(s);
} else {
CAHFMWA2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMWA3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMWA3 = false;
} else {
CAHFMWA3 = true;
}
}
}

protected final void initCAHFMWA4(String s) {
if (!s.trim().isEmpty()) {
CAHFMWA4 = Byte.parseByte(s);
} else {
CAHFMWA4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMWA5(String s) {
if (!s.trim().isEmpty()) {
CAHFMWA5 = Byte.parseByte(s);
} else {
CAHFMWA5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMWA6(String s) {
if (!s.trim().isEmpty()) {
CAHFMWA6 = Byte.parseByte(s);
} else {
CAHFMWA6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMWH1(String s) {
if (!s.trim().isEmpty()) {
CAHFMWH1 = Byte.parseByte(s);
} else {
CAHFMWH1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFMWH2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMWH2 = false;
} else {
CAHFMWH2 = true;
}
}
}

protected final void initCAHFMWH3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMWH3 = false;
} else {
CAHFMWH3 = true;
}
}
}

protected final void initCAHFMWH4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMWH4 = false;
} else {
CAHFMWH4 = true;
}
}
}

protected final void initCAHFMWH5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFMWH5 = false;
} else {
CAHFMWH5 = true;
}
}
}

protected final void initCAHFMWH6(String s) {
if (!s.trim().isEmpty()) {
CAHFMWH6 = Byte.parseByte(s);
} else {
CAHFMWH6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOCL1(String s) {
if (!s.trim().isEmpty()) {
CAHFOCL1 = Byte.parseByte(s);
} else {
CAHFOCL1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOCL2(String s) {
if (!s.trim().isEmpty()) {
CAHFOCL2 = Byte.parseByte(s);
} else {
CAHFOCL2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOCL3(String s) {
if (!s.trim().isEmpty()) {
CAHFOCL3 = Byte.parseByte(s);
} else {
CAHFOCL3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOCL4(String s) {
if (!s.trim().isEmpty()) {
CAHFOCL4 = Byte.parseByte(s);
} else {
CAHFOCL4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOCL5(String s) {
if (!s.trim().isEmpty()) {
CAHFOCL5 = Byte.parseByte(s);
} else {
CAHFOCL5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOCL6(String s) {
if (!s.trim().isEmpty()) {
CAHFOCL6 = Byte.parseByte(s);
} else {
CAHFOCL6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOHC1(String s) {
if (!s.trim().isEmpty()) {
CAHFOHC1 = Byte.parseByte(s);
} else {
CAHFOHC1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOHC2(String s) {
if (!s.trim().isEmpty()) {
CAHFOHC2 = Byte.parseByte(s);
} else {
CAHFOHC2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOHC3(String s) {
if (!s.trim().isEmpty()) {
CAHFOHC3 = Byte.parseByte(s);
} else {
CAHFOHC3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOHC4(String s) {
if (!s.trim().isEmpty()) {
CAHFOHC4 = Byte.parseByte(s);
} else {
CAHFOHC4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOHC5(String s) {
if (!s.trim().isEmpty()) {
CAHFOHC5 = Byte.parseByte(s);
} else {
CAHFOHC5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOHC6(String s) {
if (!s.trim().isEmpty()) {
CAHFOHC6 = Byte.parseByte(s);
} else {
CAHFOHC6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOHM1(String s) {
if (!s.trim().isEmpty()) {
CAHFOHM1 = Byte.parseByte(s);
} else {
CAHFOHM1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOHM2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFOHM2 = false;
} else {
CAHFOHM2 = true;
}
}
}

protected final void initCAHFOHM3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFOHM3 = false;
} else {
CAHFOHM3 = true;
}
}
}

protected final void initCAHFOHM4(String s) {
if (!s.trim().isEmpty()) {
CAHFOHM4 = Byte.parseByte(s);
} else {
CAHFOHM4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOHM5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFOHM5 = false;
} else {
CAHFOHM5 = true;
}
}
}

protected final void initCAHFOHM6(String s) {
if (!s.trim().isEmpty()) {
CAHFOHM6 = Byte.parseByte(s);
} else {
CAHFOHM6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFONH1(String s) {
if (!s.trim().isEmpty()) {
CAHFONH1 = Byte.parseByte(s);
} else {
CAHFONH1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFONH2(String s) {
if (!s.trim().isEmpty()) {
CAHFONH2 = Byte.parseByte(s);
} else {
CAHFONH2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFONH3(String s) {
if (!s.trim().isEmpty()) {
CAHFONH3 = Byte.parseByte(s);
} else {
CAHFONH3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFONH4(String s) {
if (!s.trim().isEmpty()) {
CAHFONH4 = Byte.parseByte(s);
} else {
CAHFONH4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFONH5(String s) {
if (!s.trim().isEmpty()) {
CAHFONH5 = Byte.parseByte(s);
} else {
CAHFONH5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFONH6(String s) {
if (!s.trim().isEmpty()) {
CAHFONH6 = Byte.parseByte(s);
} else {
CAHFONH6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFONO1(String s) {
if (!s.trim().isEmpty()) {
CAHFONO1 = Byte.parseByte(s);
} else {
CAHFONO1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFONO2(String s) {
if (!s.trim().isEmpty()) {
CAHFONO2 = Byte.parseByte(s);
} else {
CAHFONO2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFONO3(String s) {
if (!s.trim().isEmpty()) {
CAHFONO3 = Byte.parseByte(s);
} else {
CAHFONO3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFONO4(String s) {
if (!s.trim().isEmpty()) {
CAHFONO4 = Byte.parseByte(s);
} else {
CAHFONO4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFONO5(String s) {
if (!s.trim().isEmpty()) {
CAHFONO5 = Byte.parseByte(s);
} else {
CAHFONO5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFONO6(String s) {
if (!s.trim().isEmpty()) {
CAHFONO6 = Byte.parseByte(s);
} else {
CAHFONO6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOOT1(String s) {
if (!s.trim().isEmpty()) {
CAHFOOT1 = Byte.parseByte(s);
} else {
CAHFOOT1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOOT2(String s) {
if (!s.trim().isEmpty()) {
CAHFOOT2 = Byte.parseByte(s);
} else {
CAHFOOT2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOOT3(String s) {
if (!s.trim().isEmpty()) {
CAHFOOT3 = Byte.parseByte(s);
} else {
CAHFOOT3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOOT4(String s) {
if (!s.trim().isEmpty()) {
CAHFOOT4 = Byte.parseByte(s);
} else {
CAHFOOT4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOOT5(String s) {
if (!s.trim().isEmpty()) {
CAHFOOT5 = Byte.parseByte(s);
} else {
CAHFOOT5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOOT6(String s) {
if (!s.trim().isEmpty()) {
CAHFOOT6 = Byte.parseByte(s);
} else {
CAHFOOT6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFORE1(String s) {
if (!s.trim().isEmpty()) {
CAHFORE1 = Byte.parseByte(s);
} else {
CAHFORE1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFORE2(String s) {
if (!s.trim().isEmpty()) {
CAHFORE2 = Byte.parseByte(s);
} else {
CAHFORE2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFORE3(String s) {
if (!s.trim().isEmpty()) {
CAHFORE3 = Byte.parseByte(s);
} else {
CAHFORE3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFORE4(String s) {
if (!s.trim().isEmpty()) {
CAHFORE4 = Byte.parseByte(s);
} else {
CAHFORE4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFORE5(String s) {
if (!s.trim().isEmpty()) {
CAHFORE5 = Byte.parseByte(s);
} else {
CAHFORE5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFORE6(String s) {
if (!s.trim().isEmpty()) {
CAHFORE6 = Byte.parseByte(s);
} else {
CAHFORE6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOVO1(String s) {
if (!s.trim().isEmpty()) {
CAHFOVO1 = Byte.parseByte(s);
} else {
CAHFOVO1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOVO2(String s) {
if (!s.trim().isEmpty()) {
CAHFOVO2 = Byte.parseByte(s);
} else {
CAHFOVO2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOVO3(String s) {
if (!s.trim().isEmpty()) {
CAHFOVO3 = Byte.parseByte(s);
} else {
CAHFOVO3 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOVO4(String s) {
if (!s.trim().isEmpty()) {
CAHFOVO4 = Byte.parseByte(s);
} else {
CAHFOVO4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOVO5(String s) {
if (!s.trim().isEmpty()) {
CAHFOVO5 = Byte.parseByte(s);
} else {
CAHFOVO5 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOVO6(String s) {
if (!s.trim().isEmpty()) {
CAHFOVO6 = Byte.parseByte(s);
} else {
CAHFOVO6 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOWA1(String s) {
if (!s.trim().isEmpty()) {
CAHFOWA1 = Byte.parseByte(s);
} else {
CAHFOWA1 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOWA2(String s) {
if (!s.trim().isEmpty()) {
CAHFOWA2 = Byte.parseByte(s);
} else {
CAHFOWA2 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOWA3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFOWA3 = false;
} else {
CAHFOWA3 = true;
}
}
}

protected final void initCAHFOWA4(String s) {
if (!s.trim().isEmpty()) {
CAHFOWA4 = Byte.parseByte(s);
} else {
CAHFOWA4 = Byte.MIN_VALUE;
}
}

protected final void initCAHFOWA5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHFOWA5 = false;
} else {
CAHFOWA5 = true;
}
}
}

protected final void initCAHFOWA6(String s) {
if (!s.trim().isEmpty()) {
CAHFOWA6 = Byte.parseByte(s);
} else {
CAHFOWA6 = Byte.MIN_VALUE;
}
}

protected final void initCAHGOA(String s) {
if (!s.trim().isEmpty()) {
CAHGOA = Byte.parseByte(s);
} else {
CAHGOA = Byte.MIN_VALUE;
}
}

protected final void initCAHHA(String s) {
if (!s.trim().isEmpty()) {
CAHHA = Byte.parseByte(s);
} else {
CAHHA = Byte.MIN_VALUE;
}
}

protected final void initCAHHB(String s) {
if (!s.trim().isEmpty()) {
CAHHB = Byte.parseByte(s);
} else {
CAHHB = Byte.MIN_VALUE;
}
}

protected final void initCAHINBR1(String s) {
if (!s.trim().isEmpty()) {
CAHINBR1 = Byte.parseByte(s);
} else {
CAHINBR1 = Byte.MIN_VALUE;
}
}

protected final void initCAHINBR2(String s) {
if (!s.trim().isEmpty()) {
CAHINBR2 = Byte.parseByte(s);
} else {
CAHINBR2 = Byte.MIN_VALUE;
}
}

protected final void initCAHINBR3(String s) {
if (!s.trim().isEmpty()) {
CAHINBR3 = Byte.parseByte(s);
} else {
CAHINBR3 = Byte.MIN_VALUE;
}
}

protected final void initCAHINBR4(String s) {
if (!s.trim().isEmpty()) {
CAHINBR4 = Byte.parseByte(s);
} else {
CAHINBR4 = Byte.MIN_VALUE;
}
}

protected final void initCAHINBR5(String s) {
if (!s.trim().isEmpty()) {
CAHINBR5 = Byte.parseByte(s);
} else {
CAHINBR5 = Byte.MIN_VALUE;
}
}

protected final void initCAHINBR6(String s) {
if (!s.trim().isEmpty()) {
CAHINBR6 = Byte.parseByte(s);
} else {
CAHINBR6 = Byte.MIN_VALUE;
}
}

protected final void initCAHINDA1(String s) {
if (!s.trim().isEmpty()) {
CAHINDA1 = Byte.parseByte(s);
} else {
CAHINDA1 = Byte.MIN_VALUE;
}
}

protected final void initCAHINDA2(String s) {
if (!s.trim().isEmpty()) {
CAHINDA2 = Byte.parseByte(s);
} else {
CAHINDA2 = Byte.MIN_VALUE;
}
}

protected final void initCAHINDA3(String s) {
if (!s.trim().isEmpty()) {
CAHINDA3 = Byte.parseByte(s);
} else {
CAHINDA3 = Byte.MIN_VALUE;
}
}

protected final void initCAHINDA4(String s) {
if (!s.trim().isEmpty()) {
CAHINDA4 = Byte.parseByte(s);
} else {
CAHINDA4 = Byte.MIN_VALUE;
}
}

protected final void initCAHINDA5(String s) {
if (!s.trim().isEmpty()) {
CAHINDA5 = Byte.parseByte(s);
} else {
CAHINDA5 = Byte.MIN_VALUE;
}
}

protected final void initCAHINDA6(String s) {
if (!s.trim().isEmpty()) {
CAHINDA6 = Byte.parseByte(s);
} else {
CAHINDA6 = Byte.MIN_VALUE;
}
}

protected final void initCAHINFR1(String s) {
if (!s.trim().isEmpty()) {
CAHINFR1 = Byte.parseByte(s);
} else {
CAHINFR1 = Byte.MIN_VALUE;
}
}

protected final void initCAHINFR2(String s) {
if (!s.trim().isEmpty()) {
CAHINFR2 = Byte.parseByte(s);
} else {
CAHINFR2 = Byte.MIN_VALUE;
}
}

protected final void initCAHINFR3(String s) {
if (!s.trim().isEmpty()) {
CAHINFR3 = Byte.parseByte(s);
} else {
CAHINFR3 = Byte.MIN_VALUE;
}
}

protected final void initCAHINFR4(String s) {
if (!s.trim().isEmpty()) {
CAHINFR4 = Byte.parseByte(s);
} else {
CAHINFR4 = Byte.MIN_VALUE;
}
}

protected final void initCAHINFR5(String s) {
if (!s.trim().isEmpty()) {
CAHINFR5 = Byte.parseByte(s);
} else {
CAHINFR5 = Byte.MIN_VALUE;
}
}

protected final void initCAHINFR6(String s) {
if (!s.trim().isEmpty()) {
CAHINFR6 = Byte.parseByte(s);
} else {
CAHINFR6 = Byte.MIN_VALUE;
}
}

protected final void initCAHINGC1(String s) {
if (!s.trim().isEmpty()) {
CAHINGC1 = Byte.parseByte(s);
} else {
CAHINGC1 = Byte.MIN_VALUE;
}
}

protected final void initCAHINGC2(String s) {
if (!s.trim().isEmpty()) {
CAHINGC2 = Byte.parseByte(s);
} else {
CAHINGC2 = Byte.MIN_VALUE;
}
}

protected final void initCAHINGC3(String s) {
if (!s.trim().isEmpty()) {
CAHINGC3 = Byte.parseByte(s);
} else {
CAHINGC3 = Byte.MIN_VALUE;
}
}

protected final void initCAHINGC4(String s) {
if (!s.trim().isEmpty()) {
CAHINGC4 = Byte.parseByte(s);
} else {
CAHINGC4 = Byte.MIN_VALUE;
}
}

protected final void initCAHINGC5(String s) {
if (!s.trim().isEmpty()) {
CAHINGC5 = Byte.parseByte(s);
} else {
CAHINGC5 = Byte.MIN_VALUE;
}
}

protected final void initCAHINGC6(String s) {
if (!s.trim().isEmpty()) {
CAHINGC6 = Byte.parseByte(s);
} else {
CAHINGC6 = Byte.MIN_VALUE;
}
}

protected final void initCAHINHW1(String s) {
if (!s.trim().isEmpty()) {
CAHINHW1 = Byte.parseByte(s);
} else {
CAHINHW1 = Byte.MIN_VALUE;
}
}

protected final void initCAHINHW2(String s) {
if (!s.trim().isEmpty()) {
CAHINHW2 = Byte.parseByte(s);
} else {
CAHINHW2 = Byte.MIN_VALUE;
}
}

protected final void initCAHINHW3(String s) {
if (!s.trim().isEmpty()) {
CAHINHW3 = Byte.parseByte(s);
} else {
CAHINHW3 = Byte.MIN_VALUE;
}
}

protected final void initCAHINHW4(String s) {
if (!s.trim().isEmpty()) {
CAHINHW4 = Byte.parseByte(s);
} else {
CAHINHW4 = Byte.MIN_VALUE;
}
}

protected final void initCAHINHW5(String s) {
if (!s.trim().isEmpty()) {
CAHINHW5 = Byte.parseByte(s);
} else {
CAHINHW5 = Byte.MIN_VALUE;
}
}

protected final void initCAHINHW6(String s) {
if (!s.trim().isEmpty()) {
CAHINHW6 = Byte.parseByte(s);
} else {
CAHINHW6 = Byte.MIN_VALUE;
}
}

protected final void initCAHINNE1(String s) {
if (!s.trim().isEmpty()) {
CAHINNE1 = Byte.parseByte(s);
} else {
CAHINNE1 = Byte.MIN_VALUE;
}
}

protected final void initCAHINNE2(String s) {
if (!s.trim().isEmpty()) {
CAHINNE2 = Byte.parseByte(s);
} else {
CAHINNE2 = Byte.MIN_VALUE;
}
}

protected final void initCAHINNE3(String s) {
if (!s.trim().isEmpty()) {
CAHINNE3 = Byte.parseByte(s);
} else {
CAHINNE3 = Byte.MIN_VALUE;
}
}

protected final void initCAHINNE4(String s) {
if (!s.trim().isEmpty()) {
CAHINNE4 = Byte.parseByte(s);
} else {
CAHINNE4 = Byte.MIN_VALUE;
}
}

protected final void initCAHINNE5(String s) {
if (!s.trim().isEmpty()) {
CAHINNE5 = Byte.parseByte(s);
} else {
CAHINNE5 = Byte.MIN_VALUE;
}
}

protected final void initCAHINNE6(String s) {
if (!s.trim().isEmpty()) {
CAHINNE6 = Byte.parseByte(s);
} else {
CAHINNE6 = Byte.MIN_VALUE;
}
}

protected final void initCAHINNO1(String s) {
if (!s.trim().isEmpty()) {
CAHINNO1 = Byte.parseByte(s);
} else {
CAHINNO1 = Byte.MIN_VALUE;
}
}

protected final void initCAHINNO2(String s) {
if (!s.trim().isEmpty()) {
CAHINNO2 = Byte.parseByte(s);
} else {
CAHINNO2 = Byte.MIN_VALUE;
}
}

protected final void initCAHINNO3(String s) {
if (!s.trim().isEmpty()) {
CAHINNO3 = Byte.parseByte(s);
} else {
CAHINNO3 = Byte.MIN_VALUE;
}
}

protected final void initCAHINNO4(String s) {
if (!s.trim().isEmpty()) {
CAHINNO4 = Byte.parseByte(s);
} else {
CAHINNO4 = Byte.MIN_VALUE;
}
}

protected final void initCAHINNO5(String s) {
if (!s.trim().isEmpty()) {
CAHINNO5 = Byte.parseByte(s);
} else {
CAHINNO5 = Byte.MIN_VALUE;
}
}

protected final void initCAHINNO6(String s) {
if (!s.trim().isEmpty()) {
CAHINNO6 = Byte.parseByte(s);
} else {
CAHINNO6 = Byte.MIN_VALUE;
}
}

protected final void initCAHINOR1(String s) {
if (!s.trim().isEmpty()) {
CAHINOR1 = Byte.parseByte(s);
} else {
CAHINOR1 = Byte.MIN_VALUE;
}
}

protected final void initCAHINOR2(String s) {
if (!s.trim().isEmpty()) {
CAHINOR2 = Byte.parseByte(s);
} else {
CAHINOR2 = Byte.MIN_VALUE;
}
}

protected final void initCAHINOR3(String s) {
if (!s.trim().isEmpty()) {
CAHINOR3 = Byte.parseByte(s);
} else {
CAHINOR3 = Byte.MIN_VALUE;
}
}

protected final void initCAHINOR4(String s) {
if (!s.trim().isEmpty()) {
CAHINOR4 = Byte.parseByte(s);
} else {
CAHINOR4 = Byte.MIN_VALUE;
}
}

protected final void initCAHINOR5(String s) {
if (!s.trim().isEmpty()) {
CAHINOR5 = Byte.parseByte(s);
} else {
CAHINOR5 = Byte.MIN_VALUE;
}
}

protected final void initCAHINOR6(String s) {
if (!s.trim().isEmpty()) {
CAHINOR6 = Byte.parseByte(s);
} else {
CAHINOR6 = Byte.MIN_VALUE;
}
}

protected final void initCAHINSI1(String s) {
if (!s.trim().isEmpty()) {
CAHINSI1 = Byte.parseByte(s);
} else {
CAHINSI1 = Byte.MIN_VALUE;
}
}

protected final void initCAHINSI2(String s) {
if (!s.trim().isEmpty()) {
CAHINSI2 = Byte.parseByte(s);
} else {
CAHINSI2 = Byte.MIN_VALUE;
}
}

protected final void initCAHINSI3(String s) {
if (!s.trim().isEmpty()) {
CAHINSI3 = Byte.parseByte(s);
} else {
CAHINSI3 = Byte.MIN_VALUE;
}
}

protected final void initCAHINSI4(String s) {
if (!s.trim().isEmpty()) {
CAHINSI4 = Byte.parseByte(s);
} else {
CAHINSI4 = Byte.MIN_VALUE;
}
}

protected final void initCAHINSI5(String s) {
if (!s.trim().isEmpty()) {
CAHINSI5 = Byte.parseByte(s);
} else {
CAHINSI5 = Byte.MIN_VALUE;
}
}

protected final void initCAHINSI6(String s) {
if (!s.trim().isEmpty()) {
CAHINSI6 = Byte.parseByte(s);
} else {
CAHINSI6 = Byte.MIN_VALUE;
}
}

protected final void initCAHINSO1(String s) {
if (!s.trim().isEmpty()) {
CAHINSO1 = Byte.parseByte(s);
} else {
CAHINSO1 = Byte.MIN_VALUE;
}
}

protected final void initCAHINSO2(String s) {
if (!s.trim().isEmpty()) {
CAHINSO2 = Byte.parseByte(s);
} else {
CAHINSO2 = Byte.MIN_VALUE;
}
}

protected final void initCAHINSO3(String s) {
if (!s.trim().isEmpty()) {
CAHINSO3 = Byte.parseByte(s);
} else {
CAHINSO3 = Byte.MIN_VALUE;
}
}

protected final void initCAHINSO4(String s) {
if (!s.trim().isEmpty()) {
CAHINSO4 = Byte.parseByte(s);
} else {
CAHINSO4 = Byte.MIN_VALUE;
}
}

protected final void initCAHINSO5(String s) {
if (!s.trim().isEmpty()) {
CAHINSO5 = Byte.parseByte(s);
} else {
CAHINSO5 = Byte.MIN_VALUE;
}
}

protected final void initCAHINSO6(String s) {
if (!s.trim().isEmpty()) {
CAHINSO6 = Byte.parseByte(s);
} else {
CAHINSO6 = Byte.MIN_VALUE;
}
}

protected final void initCAHMN(String s) {
if (!s.trim().isEmpty()) {
CAHMN = Byte.parseByte(s);
} else {
CAHMN = Byte.MIN_VALUE;
}
}

protected final void initCAHNBR(String s) {
if (!s.trim().isEmpty()) {
CAHNBR = Byte.parseByte(s);
} else {
CAHNBR = Byte.MIN_VALUE;
}
}

protected final void initCAHNCL(String s) {
if (!s.trim().isEmpty()) {
CAHNCL = Byte.parseByte(s);
} else {
CAHNCL = Byte.MIN_VALUE;
}
}

protected final void initCAHNDA(String s) {
if (!s.trim().isEmpty()) {
CAHNDA = Byte.parseByte(s);
} else {
CAHNDA = Byte.MIN_VALUE;
}
}

protected final void initCAHNFR(String s) {
if (!s.trim().isEmpty()) {
CAHNFR = Byte.parseByte(s);
} else {
CAHNFR = Byte.MIN_VALUE;
}
}

protected final void initCAHNGC(String s) {
if (!s.trim().isEmpty()) {
CAHNGC = Byte.parseByte(s);
} else {
CAHNGC = Byte.MIN_VALUE;
}
}

protected final void initCAHNHC(String s) {
if (!s.trim().isEmpty()) {
CAHNHC = Byte.parseByte(s);
} else {
CAHNHC = Byte.MIN_VALUE;
}
}

protected final void initCAHNHM(String s) {
if (!s.trim().isEmpty()) {
CAHNHM = Byte.parseByte(s);
} else {
CAHNHM = Byte.MIN_VALUE;
}
}

protected final void initCAHNHW(String s) {
if (!s.trim().isEmpty()) {
CAHNHW = Byte.parseByte(s);
} else {
CAHNHW = Byte.MIN_VALUE;
}
}

protected final void initCAHNNE(String s) {
if (!s.trim().isEmpty()) {
CAHNNE = Byte.parseByte(s);
} else {
CAHNNE = Byte.MIN_VALUE;
}
}

protected final void initCAHNNH(String s) {
if (!s.trim().isEmpty()) {
CAHNNH = Byte.parseByte(s);
} else {
CAHNNH = Byte.MIN_VALUE;
}
}

protected final void initCAHNNO(String s) {
if (!s.trim().isEmpty()) {
CAHNNO = Byte.parseByte(s);
} else {
CAHNNO = Byte.MIN_VALUE;
}
}

protected final void initCAHNOR(String s) {
if (!s.trim().isEmpty()) {
CAHNOR = Byte.parseByte(s);
} else {
CAHNOR = Byte.MIN_VALUE;
}
}

protected final void initCAHNOT(String s) {
if (!s.trim().isEmpty()) {
CAHNOT = Byte.parseByte(s);
} else {
CAHNOT = Byte.MIN_VALUE;
}
}

protected final void initCAHNRE(String s) {
if (!s.trim().isEmpty()) {
CAHNRE = Byte.parseByte(s);
} else {
CAHNRE = Byte.MIN_VALUE;
}
}

protected final void initCAHNSI(String s) {
if (!s.trim().isEmpty()) {
CAHNSI = Byte.parseByte(s);
} else {
CAHNSI = Byte.MIN_VALUE;
}
}

protected final void initCAHNSO(String s) {
if (!s.trim().isEmpty()) {
CAHNSO = Byte.parseByte(s);
} else {
CAHNSO = Byte.MIN_VALUE;
}
}

protected final void initCAHNVO(String s) {
if (!s.trim().isEmpty()) {
CAHNVO = Byte.parseByte(s);
} else {
CAHNVO = Byte.MIN_VALUE;
}
}

protected final void initCAHNWA(String s) {
if (!s.trim().isEmpty()) {
CAHNWA = Byte.parseByte(s);
} else {
CAHNWA = Byte.MIN_VALUE;
}
}

protected final void initCAHPC(String s) {
if (!s.trim().isEmpty()) {
CAHPC = Byte.parseByte(s);
} else {
CAHPC = Byte.MIN_VALUE;
}
}

protected final void initCAHPD(String s) {
if (!s.trim().isEmpty()) {
CAHPD = Byte.parseByte(s);
} else {
CAHPD = Byte.MIN_VALUE;
}
}

protected final void initCAHPD2(String s) {
if (!s.trim().isEmpty()) {
CAHPD2 = Byte.parseByte(s);
} else {
CAHPD2 = Byte.MIN_VALUE;
}
}

protected final void initCAHPF(String s) {
if (!s.trim().isEmpty()) {
CAHPF = Byte.parseByte(s);
} else {
CAHPF = Byte.MIN_VALUE;
}
}

protected final void initCAHPF2(String s) {
if (!s.trim().isEmpty()) {
CAHPF2 = Byte.parseByte(s);
} else {
CAHPF2 = Byte.MIN_VALUE;
}
}

protected final void initCAHPS95(String s) {
if (!s.trim().isEmpty()) {
CAHPS95 = Byte.parseByte(s);
} else {
CAHPS95 = Byte.MIN_VALUE;
}
}

protected final void initCAHPS96(String s) {
if (!s.trim().isEmpty()) {
CAHPS96 = Byte.parseByte(s);
} else {
CAHPS96 = Byte.MIN_VALUE;
}
}

protected final void initCAHPSCH(String s) {
if (!s.trim().isEmpty()) {
CAHPSCH = Byte.parseByte(s);
} else {
CAHPSCH = Byte.MIN_VALUE;
}
}

protected final void initCAHPSEX(String s) {
if (!s.trim().isEmpty()) {
CAHPSEX = Byte.parseByte(s);
} else {
CAHPSEX = Byte.MIN_VALUE;
}
}

protected final void initCAHPSOT(String s) {
if (!s.trim().isEmpty()) {
CAHPSOT = Byte.parseByte(s);
} else {
CAHPSOT = Byte.MIN_VALUE;
}
}

protected final void initCAHPW(String s) {
if (!s.trim().isEmpty()) {
CAHPW = Byte.parseByte(s);
} else {
CAHPW = Byte.MIN_VALUE;
}
}

protected final void initCAHPW2(String s) {
if (!s.trim().isEmpty()) {
CAHPW2 = Byte.parseByte(s);
} else {
CAHPW2 = Byte.MIN_VALUE;
}
}

protected final void initCAHRF26(String s) {
if (!s.trim().isEmpty()) {
CAHRF26 = Double.parseDouble(s);
} else {
CAHRF26 = Double.NaN;
}
}

protected final void initCAHRF27(String s) {
if (!s.trim().isEmpty()) {
CAHRF27 = Double.parseDouble(s);
} else {
CAHRF27 = Double.NaN;
}
}

protected final void initCAHRF28(String s) {
if (!s.trim().isEmpty()) {
CAHRF28 = Double.parseDouble(s);
} else {
CAHRF28 = Double.NaN;
}
}

protected final void initCAHRF29(String s) {
if (!s.trim().isEmpty()) {
CAHRF29 = Double.parseDouble(s);
} else {
CAHRF29 = Double.NaN;
}
}

protected final void initCAHRF30(String s) {
if (!s.trim().isEmpty()) {
CAHRF30 = Double.parseDouble(s);
} else {
CAHRF30 = Double.NaN;
}
}

protected final void initCAHRF31(String s) {
if (!s.trim().isEmpty()) {
CAHRF31 = Double.parseDouble(s);
} else {
CAHRF31 = Double.NaN;
}
}

protected final void initCAHRF32(String s) {
if (!s.trim().isEmpty()) {
CAHRF32 = Double.parseDouble(s);
} else {
CAHRF32 = Double.NaN;
}
}

protected final void initCAHRF33(String s) {
if (!s.trim().isEmpty()) {
CAHRF33 = Byte.parseByte(s);
} else {
CAHRF33 = Byte.MIN_VALUE;
}
}

protected final void initCAHRF34(String s) {
if (!s.trim().isEmpty()) {
CAHRF34 = Short.parseShort(s);
} else {
CAHRF34 = Short.MIN_VALUE;
}
}

protected final void initCAHRF35(String s) {
if (!s.trim().isEmpty()) {
CAHRF35 = Double.parseDouble(s);
} else {
CAHRF35 = Double.NaN;
}
}

protected final void initCAHRG01(String s) {
if (!s.trim().isEmpty()) {
CAHRG01 = Byte.parseByte(s);
} else {
CAHRG01 = Byte.MIN_VALUE;
}
}

protected final void initCAHRG02(String s) {
if (!s.trim().isEmpty()) {
CAHRG02 = Byte.parseByte(s);
} else {
CAHRG02 = Byte.MIN_VALUE;
}
}

protected final void initCAHRG03(String s) {
if (!s.trim().isEmpty()) {
CAHRG03 = Byte.parseByte(s);
} else {
CAHRG03 = Byte.MIN_VALUE;
}
}

protected final void initCAHRG04(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG04 = false;
} else {
CAHRG04 = true;
}
}
}

protected final void initCAHRG05(String s) {
if (!s.trim().isEmpty()) {
CAHRG05 = Byte.parseByte(s);
} else {
CAHRG05 = Byte.MIN_VALUE;
}
}

protected final void initCAHRG06(String s) {
if (!s.trim().isEmpty()) {
CAHRG06 = Byte.parseByte(s);
} else {
CAHRG06 = Byte.MIN_VALUE;
}
}

protected final void initCAHRG07(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG07 = false;
} else {
CAHRG07 = true;
}
}
}

protected final void initCAHRG08(String s) {
if (!s.trim().isEmpty()) {
CAHRG08 = Byte.parseByte(s);
} else {
CAHRG08 = Byte.MIN_VALUE;
}
}

protected final void initCAHRG09(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG09 = false;
} else {
CAHRG09 = true;
}
}
}

protected final void initCAHRG10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG10 = false;
} else {
CAHRG10 = true;
}
}
}

protected final void initCAHRG11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG11 = false;
} else {
CAHRG11 = true;
}
}
}

protected final void initCAHRG12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG12 = false;
} else {
CAHRG12 = true;
}
}
}

protected final void initCAHRG13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG13 = false;
} else {
CAHRG13 = true;
}
}
}

protected final void initCAHRG14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG14 = false;
} else {
CAHRG14 = true;
}
}
}

protected final void initCAHRG15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG15 = false;
} else {
CAHRG15 = true;
}
}
}

protected final void initCAHRG16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG16 = false;
} else {
CAHRG16 = true;
}
}
}

protected final void initCAHRG17(String s) {
if (!s.trim().isEmpty()) {
CAHRG17 = Byte.parseByte(s);
} else {
CAHRG17 = Byte.MIN_VALUE;
}
}

protected final void initCAHRG18(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG18 = false;
} else {
CAHRG18 = true;
}
}
}

protected final void initCAHRG19(String s) {
if (!s.trim().isEmpty()) {
CAHRG19 = Byte.parseByte(s);
} else {
CAHRG19 = Byte.MIN_VALUE;
}
}

protected final void initCAHRG20(String s) {
if (!s.trim().isEmpty()) {
CAHRG20 = Byte.parseByte(s);
} else {
CAHRG20 = Byte.MIN_VALUE;
}
}

protected final void initCAHRG21(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG21 = false;
} else {
CAHRG21 = true;
}
}
}

protected final void initCAHRG22(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG22 = false;
} else {
CAHRG22 = true;
}
}
}

protected final void initCAHRG23(String s) {
if (!s.trim().isEmpty()) {
CAHRG23 = Byte.parseByte(s);
} else {
CAHRG23 = Byte.MIN_VALUE;
}
}

protected final void initCAHRG24(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG24 = false;
} else {
CAHRG24 = true;
}
}
}

protected final void initCAHRG25(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG25 = false;
} else {
CAHRG25 = true;
}
}
}

protected final void initCAHRG26(String s) {
if (!s.trim().isEmpty()) {
CAHRG26 = Byte.parseByte(s);
} else {
CAHRG26 = Byte.MIN_VALUE;
}
}

protected final void initCAHRG27(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG27 = false;
} else {
CAHRG27 = true;
}
}
}

protected final void initCAHRG28(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG28 = false;
} else {
CAHRG28 = true;
}
}
}

protected final void initCAHRG29(String s) {
if (!s.trim().isEmpty()) {
CAHRG29 = Byte.parseByte(s);
} else {
CAHRG29 = Byte.MIN_VALUE;
}
}

protected final void initCAHRG30(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG30 = false;
} else {
CAHRG30 = true;
}
}
}

protected final void initCAHRG31(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG31 = false;
} else {
CAHRG31 = true;
}
}
}

protected final void initCAHRG32(String s) {
if (!s.trim().isEmpty()) {
CAHRG32 = Byte.parseByte(s);
} else {
CAHRG32 = Byte.MIN_VALUE;
}
}

protected final void initCAHRG33(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRG33 = false;
} else {
CAHRG33 = true;
}
}
}

protected final void initCAHRG34(String s) {
if (!s.trim().isEmpty()) {
CAHRG34 = Byte.parseByte(s);
} else {
CAHRG34 = Byte.MIN_VALUE;
}
}

protected final void initCAHRG35(String s) {
if (!s.trim().isEmpty()) {
CAHRG35 = Byte.parseByte(s);
} else {
CAHRG35 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI01(String s) {
if (!s.trim().isEmpty()) {
CAHRI01 = Byte.parseByte(s);
} else {
CAHRI01 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI02(String s) {
if (!s.trim().isEmpty()) {
CAHRI02 = Byte.parseByte(s);
} else {
CAHRI02 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI03(String s) {
if (!s.trim().isEmpty()) {
CAHRI03 = Byte.parseByte(s);
} else {
CAHRI03 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI04(String s) {
if (!s.trim().isEmpty()) {
CAHRI04 = Byte.parseByte(s);
} else {
CAHRI04 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI05(String s) {
if (!s.trim().isEmpty()) {
CAHRI05 = Byte.parseByte(s);
} else {
CAHRI05 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI06(String s) {
if (!s.trim().isEmpty()) {
CAHRI06 = Byte.parseByte(s);
} else {
CAHRI06 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI07(String s) {
if (!s.trim().isEmpty()) {
CAHRI07 = Byte.parseByte(s);
} else {
CAHRI07 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI08(String s) {
if (!s.trim().isEmpty()) {
CAHRI08 = Byte.parseByte(s);
} else {
CAHRI08 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI09(String s) {
if (!s.trim().isEmpty()) {
CAHRI09 = Byte.parseByte(s);
} else {
CAHRI09 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI10(String s) {
if (!s.trim().isEmpty()) {
CAHRI10 = Byte.parseByte(s);
} else {
CAHRI10 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI11(String s) {
if (!s.trim().isEmpty()) {
CAHRI11 = Byte.parseByte(s);
} else {
CAHRI11 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI12(String s) {
if (!s.trim().isEmpty()) {
CAHRI12 = Byte.parseByte(s);
} else {
CAHRI12 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI13(String s) {
if (!s.trim().isEmpty()) {
CAHRI13 = Byte.parseByte(s);
} else {
CAHRI13 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI14(String s) {
if (!s.trim().isEmpty()) {
CAHRI14 = Byte.parseByte(s);
} else {
CAHRI14 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI15(String s) {
if (!s.trim().isEmpty()) {
CAHRI15 = Byte.parseByte(s);
} else {
CAHRI15 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRI16 = false;
} else {
CAHRI16 = true;
}
}
}

protected final void initCAHRI17(String s) {
if (!s.trim().isEmpty()) {
CAHRI17 = Byte.parseByte(s);
} else {
CAHRI17 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI18(String s) {
if (!s.trim().isEmpty()) {
CAHRI18 = Byte.parseByte(s);
} else {
CAHRI18 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI19(String s) {
if (!s.trim().isEmpty()) {
CAHRI19 = Byte.parseByte(s);
} else {
CAHRI19 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI20(String s) {
if (!s.trim().isEmpty()) {
CAHRI20 = Byte.parseByte(s);
} else {
CAHRI20 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI21(String s) {
if (!s.trim().isEmpty()) {
CAHRI21 = Byte.parseByte(s);
} else {
CAHRI21 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI22(String s) {
if (!s.trim().isEmpty()) {
CAHRI22 = Byte.parseByte(s);
} else {
CAHRI22 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI23(String s) {
if (!s.trim().isEmpty()) {
CAHRI23 = Byte.parseByte(s);
} else {
CAHRI23 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI24(String s) {
if (!s.trim().isEmpty()) {
CAHRI24 = Byte.parseByte(s);
} else {
CAHRI24 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI25(String s) {
if (!s.trim().isEmpty()) {
CAHRI25 = Byte.parseByte(s);
} else {
CAHRI25 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI26(String s) {
if (!s.trim().isEmpty()) {
CAHRI26 = Byte.parseByte(s);
} else {
CAHRI26 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI27(String s) {
if (!s.trim().isEmpty()) {
CAHRI27 = Byte.parseByte(s);
} else {
CAHRI27 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI28(String s) {
if (!s.trim().isEmpty()) {
CAHRI28 = Byte.parseByte(s);
} else {
CAHRI28 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI29(String s) {
if (!s.trim().isEmpty()) {
CAHRI29 = Byte.parseByte(s);
} else {
CAHRI29 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI30(String s) {
if (!s.trim().isEmpty()) {
CAHRI30 = Byte.parseByte(s);
} else {
CAHRI30 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI31(String s) {
if (!s.trim().isEmpty()) {
CAHRI31 = Byte.parseByte(s);
} else {
CAHRI31 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI32(String s) {
if (!s.trim().isEmpty()) {
CAHRI32 = Byte.parseByte(s);
} else {
CAHRI32 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI33(String s) {
if (!s.trim().isEmpty()) {
CAHRI33 = Byte.parseByte(s);
} else {
CAHRI33 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI34(String s) {
if (!s.trim().isEmpty()) {
CAHRI34 = Byte.parseByte(s);
} else {
CAHRI34 = Byte.MIN_VALUE;
}
}

protected final void initCAHRI35(String s) {
if (!s.trim().isEmpty()) {
CAHRI35 = Byte.parseByte(s);
} else {
CAHRI35 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS01(String s) {
if (!s.trim().isEmpty()) {
CAHRS01 = Byte.parseByte(s);
} else {
CAHRS01 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS02(String s) {
if (!s.trim().isEmpty()) {
CAHRS02 = Byte.parseByte(s);
} else {
CAHRS02 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS03(String s) {
if (!s.trim().isEmpty()) {
CAHRS03 = Byte.parseByte(s);
} else {
CAHRS03 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS04(String s) {
if (!s.trim().isEmpty()) {
CAHRS04 = Byte.parseByte(s);
} else {
CAHRS04 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS05(String s) {
if (!s.trim().isEmpty()) {
CAHRS05 = Byte.parseByte(s);
} else {
CAHRS05 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS06(String s) {
if (!s.trim().isEmpty()) {
CAHRS06 = Byte.parseByte(s);
} else {
CAHRS06 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS07(String s) {
if (!s.trim().isEmpty()) {
CAHRS07 = Byte.parseByte(s);
} else {
CAHRS07 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS08(String s) {
if (!s.trim().isEmpty()) {
CAHRS08 = Byte.parseByte(s);
} else {
CAHRS08 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS09(String s) {
if (!s.trim().isEmpty()) {
CAHRS09 = Byte.parseByte(s);
} else {
CAHRS09 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS10(String s) {
if (!s.trim().isEmpty()) {
CAHRS10 = Byte.parseByte(s);
} else {
CAHRS10 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS11(String s) {
if (!s.trim().isEmpty()) {
CAHRS11 = Byte.parseByte(s);
} else {
CAHRS11 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS12(String s) {
if (!s.trim().isEmpty()) {
CAHRS12 = Byte.parseByte(s);
} else {
CAHRS12 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS13(String s) {
if (!s.trim().isEmpty()) {
CAHRS13 = Byte.parseByte(s);
} else {
CAHRS13 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS14(String s) {
if (!s.trim().isEmpty()) {
CAHRS14 = Byte.parseByte(s);
} else {
CAHRS14 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS15(String s) {
if (!s.trim().isEmpty()) {
CAHRS15 = Byte.parseByte(s);
} else {
CAHRS15 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAHRS16 = false;
} else {
CAHRS16 = true;
}
}
}

protected final void initCAHRS17(String s) {
if (!s.trim().isEmpty()) {
CAHRS17 = Byte.parseByte(s);
} else {
CAHRS17 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS18(String s) {
if (!s.trim().isEmpty()) {
CAHRS18 = Byte.parseByte(s);
} else {
CAHRS18 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS19(String s) {
if (!s.trim().isEmpty()) {
CAHRS19 = Byte.parseByte(s);
} else {
CAHRS19 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS1GP(String s) {
if (!s.trim().isEmpty()) {
CAHRS1GP = Byte.parseByte(s);
} else {
CAHRS1GP = Byte.MIN_VALUE;
}
}

protected final void initCAHRS20(String s) {
if (!s.trim().isEmpty()) {
CAHRS20 = Byte.parseByte(s);
} else {
CAHRS20 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS21(String s) {
if (!s.trim().isEmpty()) {
CAHRS21 = Byte.parseByte(s);
} else {
CAHRS21 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS22(String s) {
if (!s.trim().isEmpty()) {
CAHRS22 = Byte.parseByte(s);
} else {
CAHRS22 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS23(String s) {
if (!s.trim().isEmpty()) {
CAHRS23 = Byte.parseByte(s);
} else {
CAHRS23 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS24(String s) {
if (!s.trim().isEmpty()) {
CAHRS24 = Byte.parseByte(s);
} else {
CAHRS24 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS25(String s) {
if (!s.trim().isEmpty()) {
CAHRS25 = Byte.parseByte(s);
} else {
CAHRS25 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS26(String s) {
if (!s.trim().isEmpty()) {
CAHRS26 = Byte.parseByte(s);
} else {
CAHRS26 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS27(String s) {
if (!s.trim().isEmpty()) {
CAHRS27 = Byte.parseByte(s);
} else {
CAHRS27 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS28(String s) {
if (!s.trim().isEmpty()) {
CAHRS28 = Byte.parseByte(s);
} else {
CAHRS28 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS29(String s) {
if (!s.trim().isEmpty()) {
CAHRS29 = Byte.parseByte(s);
} else {
CAHRS29 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS2GP(String s) {
if (!s.trim().isEmpty()) {
CAHRS2GP = Byte.parseByte(s);
} else {
CAHRS2GP = Byte.MIN_VALUE;
}
}

protected final void initCAHRS30(String s) {
if (!s.trim().isEmpty()) {
CAHRS30 = Byte.parseByte(s);
} else {
CAHRS30 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS31(String s) {
if (!s.trim().isEmpty()) {
CAHRS31 = Byte.parseByte(s);
} else {
CAHRS31 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS32(String s) {
if (!s.trim().isEmpty()) {
CAHRS32 = Byte.parseByte(s);
} else {
CAHRS32 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS33(String s) {
if (!s.trim().isEmpty()) {
CAHRS33 = Byte.parseByte(s);
} else {
CAHRS33 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS34(String s) {
if (!s.trim().isEmpty()) {
CAHRS34 = Byte.parseByte(s);
} else {
CAHRS34 = Byte.MIN_VALUE;
}
}

protected final void initCAHRS35(String s) {
if (!s.trim().isEmpty()) {
CAHRS35 = Byte.parseByte(s);
} else {
CAHRS35 = Byte.MIN_VALUE;
}
}

protected final void initCAHSA(String s) {
if (!s.trim().isEmpty()) {
CAHSA = Byte.parseByte(s);
} else {
CAHSA = Byte.MIN_VALUE;
}
}

protected final void initCAHSC(String s) {
if (!s.trim().isEmpty()) {
CAHSC = Integer.parseInt(s);
} else {
CAHSC = Integer.MIN_VALUE;
}
}

protected final void initCAHSCE(String s) {
if (!s.trim().isEmpty()) {
CAHSCE = Byte.parseByte(s);
} else {
CAHSCE = Byte.MIN_VALUE;
}
}

protected final void initCAHSCL(String s) {
if (!s.trim().isEmpty()) {
CAHSCL = Integer.parseInt(s);
} else {
CAHSCL = Integer.MIN_VALUE;
}
}

protected final void initCAHSCR(String s) {
if (!s.trim().isEmpty()) {
CAHSCR = Byte.parseByte(s);
} else {
CAHSCR = Byte.MIN_VALUE;
}
}

protected final void initCAHSCU(String s) {
if (!s.trim().isEmpty()) {
CAHSCU = Short.parseShort(s);
} else {
CAHSCU = Short.MIN_VALUE;
}
}

protected final void initCAHSM85(String s) {
if (!s.trim().isEmpty()) {
CAHSM85 = Byte.parseByte(s);
} else {
CAHSM85 = Byte.MIN_VALUE;
}
}

protected final void initCAHSM86(String s) {
if (!s.trim().isEmpty()) {
CAHSM86 = Byte.parseByte(s);
} else {
CAHSM86 = Byte.MIN_VALUE;
}
}

protected final void initCAHSM96(String s) {
if (!s.trim().isEmpty()) {
CAHSM96 = Byte.parseByte(s);
} else {
CAHSM96 = Byte.MIN_VALUE;
}
}

protected final void initCAHSMAC(String s) {
if (!s.trim().isEmpty()) {
CAHSMAC = Byte.parseByte(s);
} else {
CAHSMAC = Byte.MIN_VALUE;
}
}

protected final void initCAHSMCH(String s) {
if (!s.trim().isEmpty()) {
CAHSMCH = Byte.parseByte(s);
} else {
CAHSMCH = Byte.MIN_VALUE;
}
}

protected final void initCAHSMCR(String s) {
if (!s.trim().isEmpty()) {
CAHSMCR = Byte.parseByte(s);
} else {
CAHSMCR = Byte.MIN_VALUE;
}
}

protected final void initCAHSMEX(String s) {
if (!s.trim().isEmpty()) {
CAHSMEX = Byte.parseByte(s);
} else {
CAHSMEX = Byte.MIN_VALUE;
}
}

protected final void initCAHSMHY(String s) {
if (!s.trim().isEmpty()) {
CAHSMHY = Byte.parseByte(s);
} else {
CAHSMHY = Byte.MIN_VALUE;
}
}

protected final void initCAHSMMA(String s) {
if (!s.trim().isEmpty()) {
CAHSMMA = Byte.parseByte(s);
} else {
CAHSMMA = Byte.MIN_VALUE;
}
}

protected final void initCAHSMOS(String s) {
if (!s.trim().isEmpty()) {
CAHSMOS = Byte.parseByte(s);
} else {
CAHSMOS = Byte.MIN_VALUE;
}
}

protected final void initCAHSMOT(String s) {
if (!s.trim().isEmpty()) {
CAHSMOT = Byte.parseByte(s);
} else {
CAHSMOT = Byte.MIN_VALUE;
}
}

protected final void initCAHSMTH(String s) {
if (!s.trim().isEmpty()) {
CAHSMTH = Byte.parseByte(s);
} else {
CAHSMTH = Byte.MIN_VALUE;
}
}

protected final void initCAHSN(String s) {
if (!s.trim().isEmpty()) {
CAHSN = Byte.parseByte(s);
} else {
CAHSN = Byte.MIN_VALUE;
}
}

protected final void initCAHST(String s) {
if (!s.trim().isEmpty()) {
CAHST = Byte.parseByte(s);
} else {
CAHST = Byte.MIN_VALUE;
}
}

protected final void initCAINA(String s) {
if (!s.trim().isEmpty()) {
CAINA = Byte.parseByte(s);
} else {
CAINA = Byte.MIN_VALUE;
}
}

protected final void initCALAF(String s) {
if (!s.trim().isEmpty()) {
CALAF = Byte.parseByte(s);
} else {
CALAF = Byte.MIN_VALUE;
}
}

protected final void initCALAF2(String s) {
if (!s.trim().isEmpty()) {
CALAF2 = Byte.parseByte(s);
} else {
CALAF2 = Byte.MIN_VALUE;
}
}

protected final void initCALAF3(String s) {
if (!s.trim().isEmpty()) {
CALAF3 = Byte.parseByte(s);
} else {
CALAF3 = Byte.MIN_VALUE;
}
}

protected final void initCALAM(String s) {
if (!s.trim().isEmpty()) {
CALAM = Double.parseDouble(s);
} else {
CALAM = Double.NaN;
}
}

protected final void initCALAM2(String s) {
if (!s.trim().isEmpty()) {
CALAM2 = Double.parseDouble(s);
} else {
CALAM2 = Double.NaN;
}
}

protected final void initCALAM2E(String s) {
if (!s.trim().isEmpty()) {
CALAM2E = Byte.parseByte(s);
} else {
CALAM2E = Byte.MIN_VALUE;
}
}

protected final void initCALAM2L(String s) {
if (!s.trim().isEmpty()) {
CALAM2L = Short.parseShort(s);
} else {
CALAM2L = Short.MIN_VALUE;
}
}

protected final void initCALAM2R(String s) {
if (!s.trim().isEmpty()) {
CALAM2R = Byte.parseByte(s);
} else {
CALAM2R = Byte.MIN_VALUE;
}
}

protected final void initCALAM2U(String s) {
if (!s.trim().isEmpty()) {
CALAM2U = Short.parseShort(s);
} else {
CALAM2U = Short.MIN_VALUE;
}
}

protected final void initCALAM3(String s) {
if (!s.trim().isEmpty()) {
CALAM3 = Byte.parseByte(s);
} else {
CALAM3 = Byte.MIN_VALUE;
}
}

protected final void initCALAM3E(String s) {
if (!s.trim().isEmpty()) {
CALAM3E = Byte.parseByte(s);
} else {
CALAM3E = Byte.MIN_VALUE;
}
}

protected final void initCALAM3L(String s) {
if (!s.trim().isEmpty()) {
CALAM3L = Byte.parseByte(s);
} else {
CALAM3L = Byte.MIN_VALUE;
}
}

protected final void initCALAM3R(String s) {
if (!s.trim().isEmpty()) {
CALAM3R = Byte.parseByte(s);
} else {
CALAM3R = Byte.MIN_VALUE;
}
}

protected final void initCALAM3U(String s) {
if (!s.trim().isEmpty()) {
CALAM3U = Byte.parseByte(s);
} else {
CALAM3U = Byte.MIN_VALUE;
}
}

protected final void initCALAME(String s) {
if (!s.trim().isEmpty()) {
CALAME = Byte.parseByte(s);
} else {
CALAME = Byte.MIN_VALUE;
}
}

protected final void initCALAML(String s) {
if (!s.trim().isEmpty()) {
CALAML = Short.parseShort(s);
} else {
CALAML = Short.MIN_VALUE;
}
}

protected final void initCALAMR(String s) {
if (!s.trim().isEmpty()) {
CALAMR = Byte.parseByte(s);
} else {
CALAMR = Byte.MIN_VALUE;
}
}

protected final void initCALAMU(String s) {
if (!s.trim().isEmpty()) {
CALAMU = Short.parseShort(s);
} else {
CALAMU = Short.MIN_VALUE;
}
}

protected final void initCALAPDP(String s) {
if (!s.trim().isEmpty()) {
CALAPDP = Byte.parseByte(s);
} else {
CALAPDP = Byte.MIN_VALUE;
}
}

protected final void initCALAPDP2(String s) {
if (!s.trim().isEmpty()) {
CALAPDP2 = Byte.parseByte(s);
} else {
CALAPDP2 = Byte.MIN_VALUE;
}
}

protected final void initCALAPDP3(String s) {
if (!s.trim().isEmpty()) {
CALAPDP3 = Byte.parseByte(s);
} else {
CALAPDP3 = Byte.MIN_VALUE;
}
}

protected final void initCALAPPA(String s) {
if (!s.trim().isEmpty()) {
CALAPPA = Byte.parseByte(s);
} else {
CALAPPA = Byte.MIN_VALUE;
}
}

protected final void initCALAPPA2(String s) {
if (!s.trim().isEmpty()) {
CALAPPA2 = Byte.parseByte(s);
} else {
CALAPPA2 = Byte.MIN_VALUE;
}
}

protected final void initCALAPPA3(String s) {
if (!s.trim().isEmpty()) {
CALAPPA3 = Byte.parseByte(s);
} else {
CALAPPA3 = Byte.MIN_VALUE;
}
}

protected final void initCALC(String s) {
if (!s.trim().isEmpty()) {
CALC = Byte.parseByte(s);
} else {
CALC = Byte.MIN_VALUE;
}
}

protected final void initCAMW(String s) {
if (!s.trim().isEmpty()) {
CAMW = Byte.parseByte(s);
} else {
CAMW = Byte.MIN_VALUE;
}
}

protected final void initCANOPF(String s) {
if (!s.trim().isEmpty()) {
CANOPF = Byte.parseByte(s);
} else {
CANOPF = Byte.MIN_VALUE;
}
}

protected final void initCANOPF2(String s) {
if (!s.trim().isEmpty()) {
CANOPF2 = Byte.parseByte(s);
} else {
CANOPF2 = Byte.MIN_VALUE;
}
}

protected final void initCANOPF3(String s) {
if (!s.trim().isEmpty()) {
CANOPF3 = Byte.parseByte(s);
} else {
CANOPF3 = Byte.MIN_VALUE;
}
}

protected final void initCANOPG(String s) {
if (!s.trim().isEmpty()) {
CANOPG = Byte.parseByte(s);
} else {
CANOPG = Byte.MIN_VALUE;
}
}

protected final void initCANOPG2(String s) {
if (!s.trim().isEmpty()) {
CANOPG2 = Byte.parseByte(s);
} else {
CANOPG2 = Byte.MIN_VALUE;
}
}

protected final void initCANOPG3(String s) {
if (!s.trim().isEmpty()) {
CANOPG3 = Byte.parseByte(s);
} else {
CANOPG3 = Byte.MIN_VALUE;
}
}

protected final void initCANOPOT(String s) {
if (!s.trim().isEmpty()) {
CANOPOT = Byte.parseByte(s);
} else {
CANOPOT = Byte.MIN_VALUE;
}
}

protected final void initCANOPOT2(String s) {
if (!s.trim().isEmpty()) {
CANOPOT2 = Byte.parseByte(s);
} else {
CANOPOT2 = Byte.MIN_VALUE;
}
}

protected final void initCANOPOT3(String s) {
if (!s.trim().isEmpty()) {
CANOPOT3 = Byte.parseByte(s);
} else {
CANOPOT3 = Byte.MIN_VALUE;
}
}

protected final void initCAPADFM(String s) {
if (!s.trim().isEmpty()) {
CAPADFM = Byte.parseByte(s);
} else {
CAPADFM = Byte.MIN_VALUE;
}
}

protected final void initCAPADFM2(String s) {
if (!s.trim().isEmpty()) {
CAPADFM2 = Byte.parseByte(s);
} else {
CAPADFM2 = Byte.MIN_VALUE;
}
}

protected final void initCAPADFM3(String s) {
if (!s.trim().isEmpty()) {
CAPADFM3 = Byte.parseByte(s);
} else {
CAPADFM3 = Byte.MIN_VALUE;
}
}

protected final void initCAPADLA(String s) {
if (!s.trim().isEmpty()) {
CAPADLA = Byte.parseByte(s);
} else {
CAPADLA = Byte.MIN_VALUE;
}
}

protected final void initCAPADLA2(String s) {
if (!s.trim().isEmpty()) {
CAPADLA2 = Byte.parseByte(s);
} else {
CAPADLA2 = Byte.MIN_VALUE;
}
}

protected final void initCAPADLA3(String s) {
if (!s.trim().isEmpty()) {
CAPADLA3 = Byte.parseByte(s);
} else {
CAPADLA3 = Byte.MIN_VALUE;
}
}

protected final void initCAPADNO(String s) {
if (!s.trim().isEmpty()) {
CAPADNO = Byte.parseByte(s);
} else {
CAPADNO = Byte.MIN_VALUE;
}
}

protected final void initCAPADNO2(String s) {
if (!s.trim().isEmpty()) {
CAPADNO2 = Byte.parseByte(s);
} else {
CAPADNO2 = Byte.MIN_VALUE;
}
}

protected final void initCAPADNO3(String s) {
if (!s.trim().isEmpty()) {
CAPADNO3 = Byte.parseByte(s);
} else {
CAPADNO3 = Byte.MIN_VALUE;
}
}

protected final void initCAPADOT(String s) {
if (!s.trim().isEmpty()) {
CAPADOT = Byte.parseByte(s);
} else {
CAPADOT = Byte.MIN_VALUE;
}
}

protected final void initCAPADOT2(String s) {
if (!s.trim().isEmpty()) {
CAPADOT2 = Byte.parseByte(s);
} else {
CAPADOT2 = Byte.MIN_VALUE;
}
}

protected final void initCAPADOT3(String s) {
if (!s.trim().isEmpty()) {
CAPADOT3 = Byte.parseByte(s);
} else {
CAPADOT3 = Byte.MIN_VALUE;
}
}

protected final void initCAPAL(String s) {
if (!s.trim().isEmpty()) {
CAPAL = Byte.parseByte(s);
} else {
CAPAL = Byte.MIN_VALUE;
}
}

protected final void initCAPAL2(String s) {
if (!s.trim().isEmpty()) {
CAPAL2 = Byte.parseByte(s);
} else {
CAPAL2 = Byte.MIN_VALUE;
}
}

protected final void initCAPAL3(String s) {
if (!s.trim().isEmpty()) {
CAPAL3 = Byte.parseByte(s);
} else {
CAPAL3 = Byte.MIN_VALUE;
}
}

protected final void initCAPAM(String s) {
if (!s.trim().isEmpty()) {
CAPAM = Double.parseDouble(s);
} else {
CAPAM = Double.NaN;
}
}

protected final void initCAPAM2(String s) {
if (!s.trim().isEmpty()) {
CAPAM2 = Double.parseDouble(s);
} else {
CAPAM2 = Double.NaN;
}
}

protected final void initCAPAM2E(String s) {
if (!s.trim().isEmpty()) {
CAPAM2E = Byte.parseByte(s);
} else {
CAPAM2E = Byte.MIN_VALUE;
}
}

protected final void initCAPAM2L(String s) {
if (!s.trim().isEmpty()) {
CAPAM2L = Short.parseShort(s);
} else {
CAPAM2L = Short.MIN_VALUE;
}
}

protected final void initCAPAM2R(String s) {
if (!s.trim().isEmpty()) {
CAPAM2R = Byte.parseByte(s);
} else {
CAPAM2R = Byte.MIN_VALUE;
}
}

protected final void initCAPAM2U(String s) {
if (!s.trim().isEmpty()) {
CAPAM2U = Short.parseShort(s);
} else {
CAPAM2U = Short.MIN_VALUE;
}
}

protected final void initCAPAM3(String s) {
if (!s.trim().isEmpty()) {
CAPAM3 = Double.parseDouble(s);
} else {
CAPAM3 = Double.NaN;
}
}

protected final void initCAPAM3E(String s) {
if (!s.trim().isEmpty()) {
CAPAM3E = Byte.parseByte(s);
} else {
CAPAM3E = Byte.MIN_VALUE;
}
}

protected final void initCAPAM3L(String s) {
if (!s.trim().isEmpty()) {
CAPAM3L = Byte.parseByte(s);
} else {
CAPAM3L = Byte.MIN_VALUE;
}
}

protected final void initCAPAM3U(String s) {
if (!s.trim().isEmpty()) {
CAPAM3U = Short.parseShort(s);
} else {
CAPAM3U = Short.MIN_VALUE;
}
}

protected final void initCAPAME(String s) {
if (!s.trim().isEmpty()) {
CAPAME = Byte.parseByte(s);
} else {
CAPAME = Byte.MIN_VALUE;
}
}

protected final void initCAPAML(String s) {
if (!s.trim().isEmpty()) {
CAPAML = Short.parseShort(s);
} else {
CAPAML = Short.MIN_VALUE;
}
}

protected final void initCAPAML3R(String s) {
if (!s.trim().isEmpty()) {
CAPAML3R = Byte.parseByte(s);
} else {
CAPAML3R = Byte.MIN_VALUE;
}
}

protected final void initCAPAMR(String s) {
if (!s.trim().isEmpty()) {
CAPAMR = Byte.parseByte(s);
} else {
CAPAMR = Byte.MIN_VALUE;
}
}

protected final void initCAPAMU(String s) {
if (!s.trim().isEmpty()) {
CAPAMU = Short.parseShort(s);
} else {
CAPAMU = Short.MIN_VALUE;
}
}

protected final void initCAPAY(String s) {
if (!s.trim().isEmpty()) {
CAPAY = Byte.parseByte(s);
} else {
CAPAY = Byte.MIN_VALUE;
}
}

protected final void initCAPAY2(String s) {
if (!s.trim().isEmpty()) {
CAPAY2 = Byte.parseByte(s);
} else {
CAPAY2 = Byte.MIN_VALUE;
}
}

protected final void initCAPAY3(String s) {
if (!s.trim().isEmpty()) {
CAPAY3 = Byte.parseByte(s);
} else {
CAPAY3 = Byte.MIN_VALUE;
}
}

protected final void initCAPB(String s) {
if (!s.trim().isEmpty()) {
CAPB = Byte.parseByte(s);
} else {
CAPB = Byte.MIN_VALUE;
}
}

protected final void initCAPFQ(String s) {
if (!s.trim().isEmpty()) {
CAPFQ = Byte.parseByte(s);
} else {
CAPFQ = Byte.MIN_VALUE;
}
}

protected final void initCAPFQ2(String s) {
if (!s.trim().isEmpty()) {
CAPFQ2 = Byte.parseByte(s);
} else {
CAPFQ2 = Byte.MIN_VALUE;
}
}

protected final void initCAPFQ3(String s) {
if (!s.trim().isEmpty()) {
CAPFQ3 = Byte.parseByte(s);
} else {
CAPFQ3 = Byte.MIN_VALUE;
}
}

protected final void initCAPHWDP(String s) {
if (!s.trim().isEmpty()) {
CAPHWDP = Byte.parseByte(s);
} else {
CAPHWDP = Byte.MIN_VALUE;
}
}

protected final void initCAPHWDP2(String s) {
if (!s.trim().isEmpty()) {
CAPHWDP2 = Byte.parseByte(s);
} else {
CAPHWDP2 = Byte.MIN_VALUE;
}
}

protected final void initCAPHWDP3(String s) {
if (!s.trim().isEmpty()) {
CAPHWDP3 = Byte.parseByte(s);
} else {
CAPHWDP3 = Byte.MIN_VALUE;
}
}

protected final void initCAPHWOI(String s) {
if (!s.trim().isEmpty()) {
CAPHWOI = Byte.parseByte(s);
} else {
CAPHWOI = Byte.MIN_VALUE;
}
}

protected final void initCAPHWOI2(String s) {
if (!s.trim().isEmpty()) {
CAPHWOI2 = Byte.parseByte(s);
} else {
CAPHWOI2 = Byte.MIN_VALUE;
}
}

protected final void initCAPHWOI3(String s) {
if (!s.trim().isEmpty()) {
CAPHWOI3 = Byte.parseByte(s);
} else {
CAPHWOI3 = Byte.MIN_VALUE;
}
}

protected final void initCAPHWOT(String s) {
if (!s.trim().isEmpty()) {
CAPHWOT = Byte.parseByte(s);
} else {
CAPHWOT = Byte.MIN_VALUE;
}
}

protected final void initCAPHWOT2(String s) {
if (!s.trim().isEmpty()) {
CAPHWOT2 = Byte.parseByte(s);
} else {
CAPHWOT2 = Byte.MIN_VALUE;
}
}

protected final void initCAPHWOT3(String s) {
if (!s.trim().isEmpty()) {
CAPHWOT3 = Byte.parseByte(s);
} else {
CAPHWOT3 = Byte.MIN_VALUE;
}
}

protected final void initCAPNO(String s) {
if (!s.trim().isEmpty()) {
CAPNO = Byte.parseByte(s);
} else {
CAPNO = Byte.MIN_VALUE;
}
}

protected final void initCAPNO10(String s) {
if (!s.trim().isEmpty()) {
CAPNO10 = Byte.parseByte(s);
} else {
CAPNO10 = Byte.MIN_VALUE;
}
}

protected final void initCAPNO11(String s) {
if (!s.trim().isEmpty()) {
CAPNO11 = Byte.parseByte(s);
} else {
CAPNO11 = Byte.MIN_VALUE;
}
}

protected final void initCAPNO12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAPNO12 = false;
} else {
CAPNO12 = true;
}
}
}

protected final void initCAPNO13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAPNO13 = false;
} else {
CAPNO13 = true;
}
}
}

protected final void initCAPNO14(String s) {
if (!s.trim().isEmpty()) {
CAPNO14 = Byte.parseByte(s);
} else {
CAPNO14 = Byte.MIN_VALUE;
}
}

protected final void initCAPNO15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAPNO15 = false;
} else {
CAPNO15 = true;
}
}
}

protected final void initCAPNO16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAPNO16 = false;
} else {
CAPNO16 = true;
}
}
}

protected final void initCAPNO17(String s) {
if (!s.trim().isEmpty()) {
CAPNO17 = Byte.parseByte(s);
} else {
CAPNO17 = Byte.MIN_VALUE;
}
}

protected final void initCAPNO18(String s) {
if (!s.trim().isEmpty()) {
CAPNO18 = Byte.parseByte(s);
} else {
CAPNO18 = Byte.MIN_VALUE;
}
}

protected final void initCAPNO19(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAPNO19 = false;
} else {
CAPNO19 = true;
}
}
}

protected final void initCAPNO2(String s) {
if (!s.trim().isEmpty()) {
CAPNO2 = Byte.parseByte(s);
} else {
CAPNO2 = Byte.MIN_VALUE;
}
}

protected final void initCAPNO20(String s) {
if (!s.trim().isEmpty()) {
CAPNO20 = Byte.parseByte(s);
} else {
CAPNO20 = Byte.MIN_VALUE;
}
}

protected final void initCAPNO21(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAPNO21 = false;
} else {
CAPNO21 = true;
}
}
}

protected final void initCAPNO22(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAPNO22 = false;
} else {
CAPNO22 = true;
}
}
}

protected final void initCAPNO23(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAPNO23 = false;
} else {
CAPNO23 = true;
}
}
}

protected final void initCAPNO24(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAPNO24 = false;
} else {
CAPNO24 = true;
}
}
}

protected final void initCAPNO25(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAPNO25 = false;
} else {
CAPNO25 = true;
}
}
}

protected final void initCAPNO3(String s) {
if (!s.trim().isEmpty()) {
CAPNO3 = Byte.parseByte(s);
} else {
CAPNO3 = Byte.MIN_VALUE;
}
}

protected final void initCAPNO4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAPNO4 = false;
} else {
CAPNO4 = true;
}
}
}

protected final void initCAPNO5(String s) {
if (!s.trim().isEmpty()) {
CAPNO5 = Byte.parseByte(s);
} else {
CAPNO5 = Byte.MIN_VALUE;
}
}

protected final void initCAPNO6(String s) {
if (!s.trim().isEmpty()) {
CAPNO6 = Byte.parseByte(s);
} else {
CAPNO6 = Byte.MIN_VALUE;
}
}

protected final void initCAPNO7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAPNO7 = false;
} else {
CAPNO7 = true;
}
}
}

protected final void initCAPNO8(String s) {
if (!s.trim().isEmpty()) {
CAPNO8 = Byte.parseByte(s);
} else {
CAPNO8 = Byte.MIN_VALUE;
}
}

protected final void initCAPNO9(String s) {
if (!s.trim().isEmpty()) {
CAPNO9 = Byte.parseByte(s);
} else {
CAPNO9 = Byte.MIN_VALUE;
}
}

protected final void initCARA(String s) {
if (!s.trim().isEmpty()) {
CARA = Byte.parseByte(s);
} else {
CARA = Byte.MIN_VALUE;
}
}

protected final void initCARERS_P_F(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_F = Byte.parseByte(s);
} else {
CARERS_P_F = Byte.MIN_VALUE;
}
}

protected final void initCARERS_P_I(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_I = Double.parseDouble(s);
} else {
CARERS_P_I = Double.NaN;
}
}

protected final void initCARERS_P_O(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_O = Short.parseShort(s);
} else {
CARERS_P_O = Short.MIN_VALUE;
}
}

protected final void initCARERS_P_T(String s) {
if (!s.trim().isEmpty()) {
CARERS_P_T = Short.parseShort(s);
} else {
CARERS_P_T = Short.MIN_VALUE;
}
}

protected final void initCARERS_R_F(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_F = Byte.parseByte(s);
} else {
CARERS_R_F = Byte.MIN_VALUE;
}
}

protected final void initCARERS_R_I(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_I = Double.parseDouble(s);
} else {
CARERS_R_I = Double.NaN;
}
}

protected final void initCARERS_R_O(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_O = Short.parseShort(s);
} else {
CARERS_R_O = Short.MIN_VALUE;
}
}

protected final void initCARERS_R_T(String s) {
if (!s.trim().isEmpty()) {
CARERS_R_T = Short.parseShort(s);
} else {
CARERS_R_T = Short.MIN_VALUE;
}
}

protected final void initCASEX(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CASEX = false;
} else {
CASEX = true;
}
}
}

protected final void initCASEX10(String s) {
if (!s.trim().isEmpty()) {
CASEX10 = Byte.parseByte(s);
} else {
CASEX10 = Byte.MIN_VALUE;
}
}

protected final void initCASEX11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CASEX11 = false;
} else {
CASEX11 = true;
}
}
}

protected final void initCASEX12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CASEX12 = false;
} else {
CASEX12 = true;
}
}
}

protected final void initCASEX13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CASEX13 = false;
} else {
CASEX13 = true;
}
}
}

protected final void initCASEX14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CASEX14 = false;
} else {
CASEX14 = true;
}
}
}

protected final void initCASEX15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CASEX15 = false;
} else {
CASEX15 = true;
}
}
}

protected final void initCASEX16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CASEX16 = false;
} else {
CASEX16 = true;
}
}
}

protected final void initCASEX17(String s) {
if (!s.trim().isEmpty()) {
CASEX17 = Byte.parseByte(s);
} else {
CASEX17 = Byte.MIN_VALUE;
}
}

protected final void initCASEX18(String s) {
if (!s.trim().isEmpty()) {
CASEX18 = Byte.parseByte(s);
} else {
CASEX18 = Byte.MIN_VALUE;
}
}

protected final void initCASEX19(String s) {
if (!s.trim().isEmpty()) {
CASEX19 = Byte.parseByte(s);
} else {
CASEX19 = Byte.MIN_VALUE;
}
}

protected final void initCASEX2(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CASEX2 = false;
} else {
CASEX2 = true;
}
}
}

protected final void initCASEX20(String s) {
if (!s.trim().isEmpty()) {
CASEX20 = Byte.parseByte(s);
} else {
CASEX20 = Byte.MIN_VALUE;
}
}

protected final void initCASEX21(String s) {
if (!s.trim().isEmpty()) {
CASEX21 = Byte.parseByte(s);
} else {
CASEX21 = Byte.MIN_VALUE;
}
}

protected final void initCASEX22(String s) {
if (!s.trim().isEmpty()) {
CASEX22 = Byte.parseByte(s);
} else {
CASEX22 = Byte.MIN_VALUE;
}
}

protected final void initCASEX23(String s) {
if (!s.trim().isEmpty()) {
CASEX23 = Byte.parseByte(s);
} else {
CASEX23 = Byte.MIN_VALUE;
}
}

protected final void initCASEX24(String s) {
if (!s.trim().isEmpty()) {
CASEX24 = Byte.parseByte(s);
} else {
CASEX24 = Byte.MIN_VALUE;
}
}

protected final void initCASEX25(String s) {
if (!s.trim().isEmpty()) {
CASEX25 = Byte.parseByte(s);
} else {
CASEX25 = Byte.MIN_VALUE;
}
}

protected final void initCASEX3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CASEX3 = false;
} else {
CASEX3 = true;
}
}
}

protected final void initCASEX4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CASEX4 = false;
} else {
CASEX4 = true;
}
}
}

protected final void initCASEX5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CASEX5 = false;
} else {
CASEX5 = true;
}
}
}

protected final void initCASEX6(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CASEX6 = false;
} else {
CASEX6 = true;
}
}
}

protected final void initCASEX7(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CASEX7 = false;
} else {
CASEX7 = true;
}
}
}

protected final void initCASEX8(String s) {
if (!s.trim().isEmpty()) {
CASEX8 = Byte.parseByte(s);
} else {
CASEX8 = Byte.MIN_VALUE;
}
}

protected final void initCASEX9(String s) {
if (!s.trim().isEmpty()) {
CASEX9 = Byte.parseByte(s);
} else {
CASEX9 = Byte.MIN_VALUE;
}
}

protected final void initCATCH(String s) {
if (!s.trim().isEmpty()) {
CATCH = Byte.parseByte(s);
} else {
CATCH = Byte.MIN_VALUE;
}
}

protected final void initCATKA(String s) {
if (!s.trim().isEmpty()) {
CATKA = Byte.parseByte(s);
} else {
CATKA = Byte.MIN_VALUE;
}
}

protected final void initCATKB(String s) {
if (!s.trim().isEmpty()) {
CATKB = Byte.parseByte(s);
} else {
CATKB = Byte.MIN_VALUE;
}
}

protected final void initCATKC(String s) {
if (!s.trim().isEmpty()) {
CATKC = Byte.parseByte(s);
} else {
CATKC = Byte.MIN_VALUE;
}
}

protected final void initCATKD(String s) {
if (!s.trim().isEmpty()) {
CATKD = Byte.parseByte(s);
} else {
CATKD = Byte.MIN_VALUE;
}
}

protected final void initCATKE(String s) {
if (!s.trim().isEmpty()) {
CATKE = Byte.parseByte(s);
} else {
CATKE = Byte.MIN_VALUE;
}
}

protected final void initCATKF(String s) {
if (!s.trim().isEmpty()) {
CATKF = Byte.parseByte(s);
} else {
CATKF = Byte.MIN_VALUE;
}
}

protected final void initCATKG(String s) {
if (!s.trim().isEmpty()) {
CATKG = Byte.parseByte(s);
} else {
CATKG = Byte.MIN_VALUE;
}
}

protected final void initCATKH(String s) {
if (!s.trim().isEmpty()) {
CATKH = Byte.parseByte(s);
} else {
CATKH = Byte.MIN_VALUE;
}
}

protected final void initCATKI(String s) {
if (!s.trim().isEmpty()) {
CATKI = Byte.parseByte(s);
} else {
CATKI = Byte.MIN_VALUE;
}
}

protected final void initCATKJ(String s) {
if (!s.trim().isEmpty()) {
CATKJ = Byte.parseByte(s);
} else {
CATKJ = Byte.MIN_VALUE;
}
}

protected final void initCATKK(String s) {
if (!s.trim().isEmpty()) {
CATKK = Byte.parseByte(s);
} else {
CATKK = Byte.MIN_VALUE;
}
}

protected final void initCATKL(String s) {
if (!s.trim().isEmpty()) {
CATKL = Byte.parseByte(s);
} else {
CATKL = Byte.MIN_VALUE;
}
}

protected final void initCATKM(String s) {
if (!s.trim().isEmpty()) {
CATKM = Byte.parseByte(s);
} else {
CATKM = Byte.MIN_VALUE;
}
}

protected final void initCATNO(String s) {
if (!s.trim().isEmpty()) {
CATNO = Byte.parseByte(s);
} else {
CATNO = Byte.MIN_VALUE;
}
}

protected final void initCAWDA(String s) {
if (!s.trim().isEmpty()) {
CAWDA = Byte.parseByte(s);
} else {
CAWDA = Byte.MIN_VALUE;
}
}

protected final void initCAWHO(String s) {
if (!s.trim().isEmpty()) {
CAWHO = Byte.parseByte(s);
} else {
CAWHO = Byte.MIN_VALUE;
}
}

protected final void initCAWIN(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CAWIN = false;
} else {
CAWIN = true;
}
}
}

protected final void initCF200PRE(String s) {
if (!s.trim().isEmpty()) {
CF200PRE = Byte.parseByte(s);
} else {
CF200PRE = Byte.MIN_VALUE;
}
}

protected final void initCF201G1(String s) {
if (!s.trim().isEmpty()) {
CF201G1 = Byte.parseByte(s);
} else {
CF201G1 = Byte.MIN_VALUE;
}
}

protected final void initCF202H1(String s) {
if (!s.trim().isEmpty()) {
CF202H1 = Byte.parseByte(s);
} else {
CF202H1 = Byte.MIN_VALUE;
}
}

protected final void initCF203I1(String s) {
if (!s.trim().isEmpty()) {
CF203I1 = Byte.parseByte(s);
} else {
CF203I1 = Byte.MIN_VALUE;
}
}

protected final void initCF204A1(String s) {
if (!s.trim().isEmpty()) {
CF204A1 = Byte.parseByte(s);
} else {
CF204A1 = Byte.MIN_VALUE;
}
}

protected final void initCF205B1(String s) {
if (!s.trim().isEmpty()) {
CF205B1 = Byte.parseByte(s);
} else {
CF205B1 = Byte.MIN_VALUE;
}
}

protected final void initCF206C1(String s) {
if (!s.trim().isEmpty()) {
CF206C1 = Byte.parseByte(s);
} else {
CF206C1 = Byte.MIN_VALUE;
}
}

protected final void initCF207D1(String s) {
if (!s.trim().isEmpty()) {
CF207D1 = Byte.parseByte(s);
} else {
CF207D1 = Byte.MIN_VALUE;
}
}

protected final void initCF208E1(String s) {
if (!s.trim().isEmpty()) {
CF208E1 = Byte.parseByte(s);
} else {
CF208E1 = Byte.MIN_VALUE;
}
}

protected final void initCF209F1(String s) {
if (!s.trim().isEmpty()) {
CF209F1 = Byte.parseByte(s);
} else {
CF209F1 = Byte.MIN_VALUE;
}
}

protected final void initCF210J1(String s) {
if (!s.trim().isEmpty()) {
CF210J1 = Byte.parseByte(s);
} else {
CF210J1 = Byte.MIN_VALUE;
}
}

protected final void initCF211K1(String s) {
if (!s.trim().isEmpty()) {
CF211K1 = Byte.parseByte(s);
} else {
CF211K1 = Byte.MIN_VALUE;
}
}

protected final void initCF212L1(String s) {
if (!s.trim().isEmpty()) {
CF212L1 = Byte.parseByte(s);
} else {
CF212L1 = Byte.MIN_VALUE;
}
}

protected final void initCF213M1(String s) {
if (!s.trim().isEmpty()) {
CF213M1 = Byte.parseByte(s);
} else {
CF213M1 = Byte.MIN_VALUE;
}
}

protected final void initCF214N1(String s) {
if (!s.trim().isEmpty()) {
CF214N1 = Byte.parseByte(s);
} else {
CF214N1 = Byte.MIN_VALUE;
}
}

protected final void initCF215O1(String s) {
if (!s.trim().isEmpty()) {
CF215O1 = Byte.parseByte(s);
} else {
CF215O1 = Byte.MIN_VALUE;
}
}

protected final void initCF216C(String s) {
if (!s.trim().isEmpty()) {
CF216C = Byte.parseByte(s);
} else {
CF216C = Byte.MIN_VALUE;
}
}

protected final void initCF221G2(String s) {
if (!s.trim().isEmpty()) {
CF221G2 = Byte.parseByte(s);
} else {
CF221G2 = Byte.MIN_VALUE;
}
}

protected final void initCF222H2(String s) {
if (!s.trim().isEmpty()) {
CF222H2 = Byte.parseByte(s);
} else {
CF222H2 = Byte.MIN_VALUE;
}
}

protected final void initCF223I2(String s) {
if (!s.trim().isEmpty()) {
CF223I2 = Byte.parseByte(s);
} else {
CF223I2 = Byte.MIN_VALUE;
}
}

protected final void initCF224A2(String s) {
if (!s.trim().isEmpty()) {
CF224A2 = Byte.parseByte(s);
} else {
CF224A2 = Byte.MIN_VALUE;
}
}

protected final void initCF225B2(String s) {
if (!s.trim().isEmpty()) {
CF225B2 = Byte.parseByte(s);
} else {
CF225B2 = Byte.MIN_VALUE;
}
}

protected final void initCF226C2(String s) {
if (!s.trim().isEmpty()) {
CF226C2 = Byte.parseByte(s);
} else {
CF226C2 = Byte.MIN_VALUE;
}
}

protected final void initCF227D2(String s) {
if (!s.trim().isEmpty()) {
CF227D2 = Byte.parseByte(s);
} else {
CF227D2 = Byte.MIN_VALUE;
}
}

protected final void initCF228E2(String s) {
if (!s.trim().isEmpty()) {
CF228E2 = Byte.parseByte(s);
} else {
CF228E2 = Byte.MIN_VALUE;
}
}

protected final void initCF229F2(String s) {
if (!s.trim().isEmpty()) {
CF229F2 = Byte.parseByte(s);
} else {
CF229F2 = Byte.MIN_VALUE;
}
}

protected final void initCF230J2(String s) {
if (!s.trim().isEmpty()) {
CF230J2 = Byte.parseByte(s);
} else {
CF230J2 = Byte.MIN_VALUE;
}
}

protected final void initCF231K2(String s) {
if (!s.trim().isEmpty()) {
CF231K2 = Byte.parseByte(s);
} else {
CF231K2 = Byte.MIN_VALUE;
}
}

protected final void initCF232L2(String s) {
if (!s.trim().isEmpty()) {
CF232L2 = Byte.parseByte(s);
} else {
CF232L2 = Byte.MIN_VALUE;
}
}

protected final void initCF233M2(String s) {
if (!s.trim().isEmpty()) {
CF233M2 = Byte.parseByte(s);
} else {
CF233M2 = Byte.MIN_VALUE;
}
}

protected final void initCF234N2(String s) {
if (!s.trim().isEmpty()) {
CF234N2 = Byte.parseByte(s);
} else {
CF234N2 = Byte.MIN_VALUE;
}
}

protected final void initCF235O2(String s) {
if (!s.trim().isEmpty()) {
CF235O2 = Byte.parseByte(s);
} else {
CF235O2 = Byte.MIN_VALUE;
}
}

protected final void initCF240(String s) {
if (!s.trim().isEmpty()) {
CF240 = Byte.parseByte(s);
} else {
CF240 = Byte.MIN_VALUE;
}
}

protected final void initCF241(String s) {
if (!s.trim().isEmpty()) {
CF241 = Byte.parseByte(s);
} else {
CF241 = Byte.MIN_VALUE;
}
}

protected final void initCF242(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CF242 = false;
} else {
CF242 = true;
}
}
}

protected final void initCFANI(String s) {
if (!s.trim().isEmpty()) {
CFANI = Byte.parseByte(s);
} else {
CFANI = Byte.MIN_VALUE;
}
}

protected final void initCFC20FRST(String s) {
if (!s.trim().isEmpty()) {
CFC20FRST = Byte.parseByte(s);
} else {
CFC20FRST = Byte.MIN_VALUE;
}
}

protected final void initCFC20FSCND(String s) {
if (!s.trim().isEmpty()) {
CFC20FSCND = Byte.parseByte(s);
} else {
CFC20FSCND = Byte.MIN_VALUE;
}
}

protected final void initCFIB(String s) {
if (!s.trim().isEmpty()) {
CFIB = Double.parseDouble(s);
} else {
CFIB = Double.NaN;
}
}

protected final void initCFLISA(String s) {
if (!s.trim().isEmpty()) {
CFLISA = Byte.parseByte(s);
} else {
CFLISA = Byte.MIN_VALUE;
}
}

protected final void initCFLISP1(String s) {
if (!s.trim().isEmpty()) {
CFLISP1 = Byte.parseByte(s);
} else {
CFLISP1 = Byte.MIN_VALUE;
}
}

protected final void initCFLISP2(String s) {
if (!s.trim().isEmpty()) {
CFLISP2 = Byte.parseByte(s);
} else {
CFLISP2 = Byte.MIN_VALUE;
}
}

protected final void initCFLISP3(String s) {
if (!s.trim().isEmpty()) {
CFLISP3 = Byte.parseByte(s);
} else {
CFLISP3 = Byte.MIN_VALUE;
}
}

protected final void initCFLISP4(String s) {
if (!s.trim().isEmpty()) {
CFLISP4 = Byte.parseByte(s);
} else {
CFLISP4 = Byte.MIN_VALUE;
}
}

protected final void initCFLISP5(String s) {
if (!s.trim().isEmpty()) {
CFLISP5 = Byte.parseByte(s);
} else {
CFLISP5 = Byte.MIN_VALUE;
}
}

protected final void initCFLITB(String s) {
if (!s.trim().isEmpty()) {
CFLITB = Byte.parseByte(s);
} else {
CFLITB = Byte.MIN_VALUE;
}
}

protected final void initCFLITC(String s) {
if (!s.trim().isEmpty()) {
CFLITC = Byte.parseByte(s);
} else {
CFLITC = Byte.MIN_VALUE;
}
}

protected final void initCFLITD(String s) {
if (!s.trim().isEmpty()) {
CFLITD = Byte.parseByte(s);
} else {
CFLITD = Byte.MIN_VALUE;
}
}

protected final void initCFLITE(String s) {
if (!s.trim().isEmpty()) {
CFLITE = Byte.parseByte(s);
} else {
CFLITE = Byte.MIN_VALUE;
}
}

protected final void initCFLITF(String s) {
if (!s.trim().isEmpty()) {
CFLITF = Byte.parseByte(s);
} else {
CFLITF = Byte.MIN_VALUE;
}
}

protected final void initCFLITSK(String s) {
if (!s.trim().isEmpty()) {
CFLITSK = Byte.parseByte(s);
} else {
CFLITSK = Byte.MIN_VALUE;
}
}

protected final void initCFMAP(String s) {
if (!s.trim().isEmpty()) {
CFMAP = Byte.parseByte(s);
} else {
CFMAP = Byte.MIN_VALUE;
}
}

protected final void initCFMATY(String s) {
if (!s.trim().isEmpty()) {
CFMATY = Byte.parseByte(s);
} else {
CFMATY = Byte.MIN_VALUE;
}
}

protected final void initCFMETM(String s) {
if (!s.trim().isEmpty()) {
CFMETM = Byte.parseByte(s);
} else {
CFMETM = Byte.MIN_VALUE;
}
}

protected final void initCFMETMT(String s) {
if (!s.trim().isEmpty()) {
CFMETMT = Byte.parseByte(s);
} else {
CFMETMT = Byte.MIN_VALUE;
}
}

protected final void initCFMSCR(String s) {
if (!s.trim().isEmpty()) {
CFMSCR = Byte.parseByte(s);
} else {
CFMSCR = Byte.MIN_VALUE;
}
}

protected final void initCFNMCA(String s) {
if (!s.trim().isEmpty()) {
CFNMCA = Byte.parseByte(s);
} else {
CFNMCA = Byte.MIN_VALUE;
}
}

protected final void initCFNMPM(String s) {
if (!s.trim().isEmpty()) {
CFNMPM = Byte.parseByte(s);
} else {
CFNMPM = Byte.MIN_VALUE;
}
}

protected final void initCFNMQN(String s) {
if (!s.trim().isEmpty()) {
CFNMQN = Byte.parseByte(s);
} else {
CFNMQN = Byte.MIN_VALUE;
}
}

protected final void initCFNMSC(String s) {
if (!s.trim().isEmpty()) {
CFNMSC = Byte.parseByte(s);
} else {
CFNMSC = Byte.MIN_VALUE;
}
}

protected final void initCFNMUS(String s) {
if (!s.trim().isEmpty()) {
CFNMUS = Byte.parseByte(s);
} else {
CFNMUS = Byte.MIN_VALUE;
}
}

protected final void initCFSTOP1(String s) {
if (!s.trim().isEmpty()) {
CFSTOP1 = Byte.parseByte(s);
} else {
CFSTOP1 = Byte.MIN_VALUE;
}
}

protected final void initCFSTOP2(String s) {
if (!s.trim().isEmpty()) {
CFSTOP2 = Byte.parseByte(s);
} else {
CFSTOP2 = Byte.MIN_VALUE;
}
}

protected final void initCFSTOP3(String s) {
if (!s.trim().isEmpty()) {
CFSTOP3 = Byte.parseByte(s);
} else {
CFSTOP3 = Byte.MIN_VALUE;
}
}

protected final void initCFSTOP4(String s) {
if (!s.trim().isEmpty()) {
CFSTOP4 = Byte.parseByte(s);
} else {
CFSTOP4 = Byte.MIN_VALUE;
}
}

protected final void initCFSTOP5(String s) {
if (!s.trim().isEmpty()) {
CFSTOP5 = Byte.parseByte(s);
} else {
CFSTOP5 = Byte.MIN_VALUE;
}
}

protected final void initCFSTOP6(String s) {
if (!s.trim().isEmpty()) {
CFSTOP6 = Byte.parseByte(s);
} else {
CFSTOP6 = Byte.MIN_VALUE;
}
}

protected final void initCFSTOP7(String s) {
if (!s.trim().isEmpty()) {
CFSTOP7 = Byte.parseByte(s);
} else {
CFSTOP7 = Byte.MIN_VALUE;
}
}

protected final void initCFSTOP8(String s) {
if (!s.trim().isEmpty()) {
CFSTOP8 = Byte.parseByte(s);
} else {
CFSTOP8 = Byte.MIN_VALUE;
}
}

protected final void initCFSTOP95(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
CFSTOP95 = false;
} else {
CFSTOP95 = true;
}
}
}

protected final void initCFSUMA(String s) {
if (!s.trim().isEmpty()) {
CFSUMA = Byte.parseByte(s);
} else {
CFSUMA = Byte.MIN_VALUE;
}
}

protected final void initCFSUMB(String s) {
if (!s.trim().isEmpty()) {
CFSUMB = Byte.parseByte(s);
} else {
CFSUMB = Byte.MIN_VALUE;
}
}

protected final void initCFSUMC(String s) {
if (!s.trim().isEmpty()) {
CFSUMC = Byte.parseByte(s);
} else {
CFSUMC = Byte.MIN_VALUE;
}
}

protected final void initCFSUMD(String s) {
if (!s.trim().isEmpty()) {
CFSUMD = Byte.parseByte(s);
} else {
CFSUMD = Byte.MIN_VALUE;
}
}

protected final void initCFSUME(String s) {
if (!s.trim().isEmpty()) {
CFSUME = Byte.parseByte(s);
} else {
CFSUME = Byte.MIN_VALUE;
}
}

protected final void initCFSUMF(String s) {
if (!s.trim().isEmpty()) {
CFSUMF = Byte.parseByte(s);
} else {
CFSUMF = Byte.MIN_VALUE;
}
}

protected final void initCFSVA(String s) {
if (!s.trim().isEmpty()) {
CFSVA = Short.parseShort(s);
} else {
CFSVA = Short.MIN_VALUE;
}
}

protected final void initCFSVB(String s) {
if (!s.trim().isEmpty()) {
CFSVB = Short.parseShort(s);
} else {
CFSVB = Short.MIN_VALUE;
}
}

protected final void initCFSVC(String s) {
if (!s.trim().isEmpty()) {
CFSVC = Short.parseShort(s);
} else {
CFSVC = Short.MIN_VALUE;
}
}

protected final void initCFSVCH(String s) {
if (!s.trim().isEmpty()) {
CFSVCH = Byte.parseByte(s);
} else {
CFSVCH = Byte.MIN_VALUE;
}
}

protected final void initCFSVD(String s) {
if (!s.trim().isEmpty()) {
CFSVD = Short.parseShort(s);
} else {
CFSVD = Short.MIN_VALUE;
}
}

protected final void initCFSVE(String s) {
if (!s.trim().isEmpty()) {
CFSVE = Short.parseShort(s);
} else {
CFSVE = Short.MIN_VALUE;
}
}

protected final void initCFWHOAD(String s) {
if (!s.trim().isEmpty()) {
CFWHOAD = Byte.parseByte(s);
} else {
CFWHOAD = Byte.MIN_VALUE;
}
}

protected final void initCFWHOCHI(String s) {
if (!s.trim().isEmpty()) {
CFWHOCHI = Byte.parseByte(s);
} else {
CFWHOCHI = Byte.MIN_VALUE;
}
}

protected final void initCFWHONON(String s) {
if (!s.trim().isEmpty()) {
CFWHONON = Byte.parseByte(s);
} else {
CFWHONON = Byte.MIN_VALUE;
}
}

protected final void initCFWHOOTH(String s) {
if (!s.trim().isEmpty()) {
CFWHOOTH = Byte.parseByte(s);
} else {
CFWHOOTH = Byte.MIN_VALUE;
}
}

protected final void initCFWHOPAR(String s) {
if (!s.trim().isEmpty()) {
CFWHOPAR = Byte.parseByte(s);
} else {
CFWHOPAR = Byte.MIN_VALUE;
}
}

protected final void initCFWHT95(String s) {
if (!s.trim().isEmpty()) {
CFWHT95 = Byte.parseByte(s);
} else {
CFWHT95 = Byte.MIN_VALUE;
}
}

protected final void initCFWHTALC(String s) {
if (!s.trim().isEmpty()) {
CFWHTALC = Byte.parseByte(s);
} else {
CFWHTALC = Byte.MIN_VALUE;
}
}

protected final void initCFWHTCON(String s) {
if (!s.trim().isEmpty()) {
CFWHTCON = Byte.parseByte(s);
} else {
CFWHTCON = Byte.MIN_VALUE;
}
}

protected final void initCFWHTDIS(String s) {
if (!s.trim().isEmpty()) {
CFWHTDIS = Byte.parseByte(s);
} else {
CFWHTDIS = Byte.MIN_VALUE;
}
}

protected final void initCFWHTENG(String s) {
if (!s.trim().isEmpty()) {
CFWHTENG = Byte.parseByte(s);
} else {
CFWHTENG = Byte.MIN_VALUE;
}
}

protected final void initCFWHTEYE(String s) {
if (!s.trim().isEmpty()) {
CFWHTEYE = Byte.parseByte(s);
} else {
CFWHTEYE = Byte.MIN_VALUE;
}
}

protected final void initCFWHTHEA(String s) {
if (!s.trim().isEmpty()) {
CFWHTHEA = Byte.parseByte(s);
} else {
CFWHTHEA = Byte.MIN_VALUE;
}
}

protected final void initCFWHTILL(String s) {
if (!s.trim().isEmpty()) {
CFWHTILL = Byte.parseByte(s);
} else {
CFWHTILL = Byte.MIN_VALUE;
}
}

protected final void initCFWHTLAP(String s) {
if (!s.trim().isEmpty()) {
CFWHTLAP = Byte.parseByte(s);
} else {
CFWHTLAP = Byte.MIN_VALUE;
}
}

protected final void initCFWHTM85(String s) {
if (!s.trim().isEmpty()) {
CFWHTM85 = Byte.parseByte(s);
} else {
CFWHTM85 = Byte.MIN_VALUE;
}
}

protected final void initCFWHTM86(String s) {
if (!s.trim().isEmpty()) {
CFWHTM86 = Byte.parseByte(s);
} else {
CFWHTM86 = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMALC(String s) {
if (!s.trim().isEmpty()) {
CFWHTMALC = Byte.parseByte(s);
} else {
CFWHTMALC = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMCON(String s) {
if (!s.trim().isEmpty()) {
CFWHTMCON = Byte.parseByte(s);
} else {
CFWHTMCON = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMDIS(String s) {
if (!s.trim().isEmpty()) {
CFWHTMDIS = Byte.parseByte(s);
} else {
CFWHTMDIS = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMEM(String s) {
if (!s.trim().isEmpty()) {
CFWHTMEM = Byte.parseByte(s);
} else {
CFWHTMEM = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMEN(String s) {
if (!s.trim().isEmpty()) {
CFWHTMEN = Byte.parseByte(s);
} else {
CFWHTMEN = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMENG(String s) {
if (!s.trim().isEmpty()) {
CFWHTMENG = Byte.parseByte(s);
} else {
CFWHTMENG = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMEYE(String s) {
if (!s.trim().isEmpty()) {
CFWHTMEYE = Byte.parseByte(s);
} else {
CFWHTMEYE = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMHEA(String s) {
if (!s.trim().isEmpty()) {
CFWHTMHEA = Byte.parseByte(s);
} else {
CFWHTMHEA = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMILL(String s) {
if (!s.trim().isEmpty()) {
CFWHTMILL = Byte.parseByte(s);
} else {
CFWHTMILL = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMLAP(String s) {
if (!s.trim().isEmpty()) {
CFWHTMLAP = Byte.parseByte(s);
} else {
CFWHTMLAP = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMMEM(String s) {
if (!s.trim().isEmpty()) {
CFWHTMMEM = Byte.parseByte(s);
} else {
CFWHTMMEM = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMMEN(String s) {
if (!s.trim().isEmpty()) {
CFWHTMMEN = Byte.parseByte(s);
} else {
CFWHTMMEN = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMNER(String s) {
if (!s.trim().isEmpty()) {
CFWHTMNER = Byte.parseByte(s);
} else {
CFWHTMNER = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMNOI(String s) {
if (!s.trim().isEmpty()) {
CFWHTMNOI = Byte.parseByte(s);
} else {
CFWHTMNOI = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMREF(String s) {
if (!s.trim().isEmpty()) {
CFWHTMREF = Byte.parseByte(s);
} else {
CFWHTMREF = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMTIR(String s) {
if (!s.trim().isEmpty()) {
CFWHTMTIR = Byte.parseByte(s);
} else {
CFWHTMTIR = Byte.MIN_VALUE;
}
}

protected final void initCFWHTMUPS(String s) {
if (!s.trim().isEmpty()) {
CFWHTMUPS = Byte.parseByte(s);
} else {
CFWHTMUPS = Byte.MIN_VALUE;
}
}

protected final void initCFWHTNER(String s) {
if (!s.trim().isEmpty()) {
CFWHTNER = Byte.parseByte(s);
} else {
CFWHTNER = Byte.MIN_VALUE;
}
}

protected final void initCFWHTNOI(String s) {
if (!s.trim().isEmpty()) {
CFWHTNOI = Byte.parseByte(s);
} else {
CFWHTNOI = Byte.MIN_VALUE;
}
}

protected final void initCFWHTREF(String s) {
if (!s.trim().isEmpty()) {
CFWHTREF = Byte.parseByte(s);
} else {
CFWHTREF = Byte.MIN_VALUE;
}
}

protected final void initCFWHTTIR(String s) {
if (!s.trim().isEmpty()) {
CFWHTTIR = Byte.parseByte(s);
} else {
CFWHTTIR = Byte.MIN_VALUE;
}
}

protected final void initCFWHTUPS(String s) {
if (!s.trim().isEmpty()) {
CFWHTUPS = Byte.parseByte(s);
} else {
CFWHTUPS = Byte.MIN_VALUE;
}
}

protected final void initCHINHH(String s) {
if (!s.trim().isEmpty()) {
CHINHH = Byte.parseByte(s);
} else {
CHINHH = Byte.MIN_VALUE;
}
}

protected final void initCHOL(String s) {
if (!s.trim().isEmpty()) {
CHOL = Double.parseDouble(s);
} else {
CHOL = Double.NaN;
}
}

protected final void initCLOTB(String s) {
if (!s.trim().isEmpty()) {
CLOTB = Byte.parseByte(s);
} else {
CLOTB = Byte.MIN_VALUE;
}
}

protected final void initCONCUR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
CONCUR = false;
} else {
CONCUR = true;
}
}
}

protected final void initCONSPAX(String s) {
if (!s.trim().isEmpty()) {
CONSPAX = Byte.parseByte(s);
} else {
CONSPAX = Byte.MIN_VALUE;
}
}

protected final void initCONSUBDR(String s) {
if (!s.trim().isEmpty()) {
CONSUBDR = Byte.parseByte(s);
} else {
CONSUBDR = Byte.MIN_VALUE;
}
}

protected final void initCONSUBEA(String s) {
if (!s.trim().isEmpty()) {
CONSUBEA = Byte.parseByte(s);
} else {
CONSUBEA = Byte.MIN_VALUE;
}
}

protected final void initCONSUBEX(String s) {
if (!s.trim().isEmpty()) {
CONSUBEX = Byte.parseByte(s);
} else {
CONSUBEX = Byte.MIN_VALUE;
}
}

protected final void initCONSUBNO(String s) {
if (!s.trim().isEmpty()) {
CONSUBNO = Byte.parseByte(s);
} else {
CONSUBNO = Byte.MIN_VALUE;
}
}

protected final void initCONSUBSM(String s) {
if (!s.trim().isEmpty()) {
CONSUBSM = Byte.parseByte(s);
} else {
CONSUBSM = Byte.MIN_VALUE;
}
}

protected final void initCOUPLE_INST(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
COUPLE_INST = false;
} else {
COUPLE_INST = true;
}
}
}

protected final void initCPIPLUS(String s) {
if (!s.trim().isEmpty()) {
CPIPLUS = Double.parseDouble(s);
} else {
CPIPLUS = Double.NaN;
}
}

protected final void initCTC_P_F(String s) {
if (!s.trim().isEmpty()) {
CTC_P_F = Byte.parseByte(s);
} else {
CTC_P_F = Byte.MIN_VALUE;
}
}

protected final void initCTC_P_I(String s) {
if (!s.trim().isEmpty()) {
CTC_P_I = Double.parseDouble(s);
} else {
CTC_P_I = Double.NaN;
}
}

protected final void initCTC_P_O(String s) {
if (!s.trim().isEmpty()) {
CTC_P_O = Short.parseShort(s);
} else {
CTC_P_O = Short.MIN_VALUE;
}
}

protected final void initCTC_P_T(String s) {
if (!s.trim().isEmpty()) {
CTC_P_T = Short.parseShort(s);
} else {
CTC_P_T = Short.MIN_VALUE;
}
}

protected final void initCTC_R_F(String s) {
if (!s.trim().isEmpty()) {
CTC_R_F = Byte.parseByte(s);
} else {
CTC_R_F = Byte.MIN_VALUE;
}
}

protected final void initCTC_R_I(String s) {
if (!s.trim().isEmpty()) {
CTC_R_I = Double.parseDouble(s);
} else {
CTC_R_I = Double.NaN;
}
}

protected final void initCTC_R_O(String s) {
if (!s.trim().isEmpty()) {
CTC_R_O = Short.parseShort(s);
} else {
CTC_R_O = Short.MIN_VALUE;
}
}

protected final void initCTC_R_T(String s) {
if (!s.trim().isEmpty()) {
CTC_R_T = Short.parseShort(s);
} else {
CTC_R_T = Short.MIN_VALUE;
}
}

protected final void initCUFFSIZE(String s) {
if (!s.trim().isEmpty()) {
CUFFSIZE = Byte.parseByte(s);
} else {
CUFFSIZE = Byte.MIN_VALUE;
}
}

protected final void initDCURPEN(String s) {
if (!s.trim().isEmpty()) {
DCURPEN = Byte.parseByte(s);
} else {
DCURPEN = Byte.MIN_VALUE;
}
}

protected final void initDDBDC(String s) {
if (!s.trim().isEmpty()) {
DDBDC = Byte.parseByte(s);
} else {
DDBDC = Byte.MIN_VALUE;
}
}

protected final void initDEMPPEN(String s) {
if (!s.trim().isEmpty()) {
DEMPPEN = Byte.parseByte(s);
} else {
DEMPPEN = Byte.MIN_VALUE;
}
}

protected final void initDHC14(String s) {
if (!s.trim().isEmpty()) {
DHC14 = Byte.parseByte(s);
} else {
DHC14 = Byte.MIN_VALUE;
}
}

protected final void initDHC15(String s) {
if (!s.trim().isEmpty()) {
DHC15 = Byte.parseByte(s);
} else {
DHC15 = Byte.MIN_VALUE;
}
}

protected final void initDHC16(String s) {
if (!s.trim().isEmpty()) {
DHC16 = Byte.parseByte(s);
} else {
DHC16 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG14(String s) {
if (!s.trim().isEmpty()) {
DHCAG14 = Byte.parseByte(s);
} else {
DHCAG14 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG15(String s) {
if (!s.trim().isEmpty()) {
DHCAG15 = Byte.parseByte(s);
} else {
DHCAG15 = Byte.MIN_VALUE;
}
}

protected final void initDHCAG16(String s) {
if (!s.trim().isEmpty()) {
DHCAG16 = Byte.parseByte(s);
} else {
DHCAG16 = Byte.MIN_VALUE;
}
}

protected final void initDHCR08(String s) {
if (!s.trim().isEmpty()) {
DHCR08 = Byte.parseByte(s);
} else {
DHCR08 = Byte.MIN_VALUE;
}
}

protected final void initDHCR09(String s) {
if (!s.trim().isEmpty()) {
DHCR09 = Byte.parseByte(s);
} else {
DHCR09 = Byte.MIN_VALUE;
}
}

protected final void initDHCR10(String s) {
if (!s.trim().isEmpty()) {
DHCR10 = Byte.parseByte(s);
} else {
DHCR10 = Byte.MIN_VALUE;
}
}

protected final void initDHCR104(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR104 = false;
} else {
DHCR104 = true;
}
}
}

protected final void initDHCR105(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR105 = false;
} else {
DHCR105 = true;
}
}
}

protected final void initDHCR106(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR106 = false;
} else {
DHCR106 = true;
}
}
}

protected final void initDHCR107(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR107 = false;
} else {
DHCR107 = true;
}
}
}

protected final void initDHCR108(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR108 = false;
} else {
DHCR108 = true;
}
}
}

protected final void initDHCR109(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR109 = false;
} else {
DHCR109 = true;
}
}
}

protected final void initDHCR11(String s) {
if (!s.trim().isEmpty()) {
DHCR11 = Byte.parseByte(s);
} else {
DHCR11 = Byte.MIN_VALUE;
}
}

protected final void initDHCR110(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR110 = false;
} else {
DHCR110 = true;
}
}
}

protected final void initDHCR111(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR111 = false;
} else {
DHCR111 = true;
}
}
}

protected final void initDHCR112(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR112 = false;
} else {
DHCR112 = true;
}
}
}

protected final void initDHCR118(String s) {
if (!s.trim().isEmpty()) {
DHCR118 = Byte.parseByte(s);
} else {
DHCR118 = Byte.MIN_VALUE;
}
}

protected final void initDHCR119(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR119 = false;
} else {
DHCR119 = true;
}
}
}

protected final void initDHCR12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR12 = false;
} else {
DHCR12 = true;
}
}
}

protected final void initDHCR120(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR120 = false;
} else {
DHCR120 = true;
}
}
}

protected final void initDHCR121(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR121 = false;
} else {
DHCR121 = true;
}
}
}

protected final void initDHCR122(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR122 = false;
} else {
DHCR122 = true;
}
}
}

protected final void initDHCR123(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR123 = false;
} else {
DHCR123 = true;
}
}
}

protected final void initDHCR124(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR124 = false;
} else {
DHCR124 = true;
}
}
}

protected final void initDHCR125(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR125 = false;
} else {
DHCR125 = true;
}
}
}

protected final void initDHCR126(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR126 = false;
} else {
DHCR126 = true;
}
}
}

protected final void initDHCR127(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR127 = false;
} else {
DHCR127 = true;
}
}
}

protected final void initDHCR128(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR128 = false;
} else {
DHCR128 = true;
}
}
}

protected final void initDHCR13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR13 = false;
} else {
DHCR13 = true;
}
}
}

protected final void initDHCR134(String s) {
if (!s.trim().isEmpty()) {
DHCR134 = Byte.parseByte(s);
} else {
DHCR134 = Byte.MIN_VALUE;
}
}

protected final void initDHCR135(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR135 = false;
} else {
DHCR135 = true;
}
}
}

protected final void initDHCR136(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR136 = false;
} else {
DHCR136 = true;
}
}
}

protected final void initDHCR137(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR137 = false;
} else {
DHCR137 = true;
}
}
}

protected final void initDHCR138(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR138 = false;
} else {
DHCR138 = true;
}
}
}

protected final void initDHCR139(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR139 = false;
} else {
DHCR139 = true;
}
}
}

protected final void initDHCR14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR14 = false;
} else {
DHCR14 = true;
}
}
}

protected final void initDHCR140(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR140 = false;
} else {
DHCR140 = true;
}
}
}

protected final void initDHCR141(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR141 = false;
} else {
DHCR141 = true;
}
}
}

protected final void initDHCR142(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR142 = false;
} else {
DHCR142 = true;
}
}
}

protected final void initDHCR143(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR143 = false;
} else {
DHCR143 = true;
}
}
}

protected final void initDHCR144(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR144 = false;
} else {
DHCR144 = true;
}
}
}

protected final void initDHCR147(String s) {
if (!s.trim().isEmpty()) {
DHCR147 = Byte.parseByte(s);
} else {
DHCR147 = Byte.MIN_VALUE;
}
}

protected final void initDHCR148(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR148 = false;
} else {
DHCR148 = true;
}
}
}

protected final void initDHCR149(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR149 = false;
} else {
DHCR149 = true;
}
}
}

protected final void initDHCR15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR15 = false;
} else {
DHCR15 = true;
}
}
}

protected final void initDHCR150(String s) {
if (!s.trim().isEmpty()) {
DHCR150 = Byte.parseByte(s);
} else {
DHCR150 = Byte.MIN_VALUE;
}
}

protected final void initDHCR151(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR151 = false;
} else {
DHCR151 = true;
}
}
}

protected final void initDHCR152(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR152 = false;
} else {
DHCR152 = true;
}
}
}

protected final void initDHCR153(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR153 = false;
} else {
DHCR153 = true;
}
}
}

protected final void initDHCR154(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR154 = false;
} else {
DHCR154 = true;
}
}
}

protected final void initDHCR155(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR155 = false;
} else {
DHCR155 = true;
}
}
}

protected final void initDHCR156(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR156 = false;
} else {
DHCR156 = true;
}
}
}

protected final void initDHCR157(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR157 = false;
} else {
DHCR157 = true;
}
}
}

protected final void initDHCR158(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR158 = false;
} else {
DHCR158 = true;
}
}
}

protected final void initDHCR159(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR159 = false;
} else {
DHCR159 = true;
}
}
}

protected final void initDHCR16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR16 = false;
} else {
DHCR16 = true;
}
}
}

protected final void initDHCR160(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR160 = false;
} else {
DHCR160 = true;
}
}
}

protected final void initDHCR163(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR163 = false;
} else {
DHCR163 = true;
}
}
}

protected final void initDHCR164(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR164 = false;
} else {
DHCR164 = true;
}
}
}

protected final void initDHCR165(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR165 = false;
} else {
DHCR165 = true;
}
}
}

protected final void initDHCR166(String s) {
if (!s.trim().isEmpty()) {
DHCR166 = Byte.parseByte(s);
} else {
DHCR166 = Byte.MIN_VALUE;
}
}

protected final void initDHCR167(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR167 = false;
} else {
DHCR167 = true;
}
}
}

protected final void initDHCR168(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR168 = false;
} else {
DHCR168 = true;
}
}
}

protected final void initDHCR169(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR169 = false;
} else {
DHCR169 = true;
}
}
}

protected final void initDHCR170(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR170 = false;
} else {
DHCR170 = true;
}
}
}

protected final void initDHCR171(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR171 = false;
} else {
DHCR171 = true;
}
}
}

protected final void initDHCR172(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR172 = false;
} else {
DHCR172 = true;
}
}
}

protected final void initDHCR173(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR173 = false;
} else {
DHCR173 = true;
}
}
}

protected final void initDHCR174(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR174 = false;
} else {
DHCR174 = true;
}
}
}

protected final void initDHCR175(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR175 = false;
} else {
DHCR175 = true;
}
}
}

protected final void initDHCR176(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR176 = false;
} else {
DHCR176 = true;
}
}
}

protected final void initDHCR178(String s) {
if (!s.trim().isEmpty()) {
DHCR178 = Byte.parseByte(s);
} else {
DHCR178 = Byte.MIN_VALUE;
}
}

protected final void initDHCR179(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR179 = false;
} else {
DHCR179 = true;
}
}
}

protected final void initDHCR180(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR180 = false;
} else {
DHCR180 = true;
}
}
}

protected final void initDHCR181(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR181 = false;
} else {
DHCR181 = true;
}
}
}

protected final void initDHCR182(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR182 = false;
} else {
DHCR182 = true;
}
}
}

protected final void initDHCR183(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR183 = false;
} else {
DHCR183 = true;
}
}
}

protected final void initDHCR184(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR184 = false;
} else {
DHCR184 = true;
}
}
}

protected final void initDHCR185(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR185 = false;
} else {
DHCR185 = true;
}
}
}

protected final void initDHCR186(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR186 = false;
} else {
DHCR186 = true;
}
}
}

protected final void initDHCR187(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR187 = false;
} else {
DHCR187 = true;
}
}
}

protected final void initDHCR188(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR188 = false;
} else {
DHCR188 = true;
}
}
}

protected final void initDHCR189(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR189 = false;
} else {
DHCR189 = true;
}
}
}

protected final void initDHCR190(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR190 = false;
} else {
DHCR190 = true;
}
}
}

protected final void initDHCR191(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR191 = false;
} else {
DHCR191 = true;
}
}
}

protected final void initDHCR192(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR192 = false;
} else {
DHCR192 = true;
}
}
}

protected final void initDHCR194(String s) {
if (!s.trim().isEmpty()) {
DHCR194 = Byte.parseByte(s);
} else {
DHCR194 = Byte.MIN_VALUE;
}
}

protected final void initDHCR195(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR195 = false;
} else {
DHCR195 = true;
}
}
}

protected final void initDHCR196(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR196 = false;
} else {
DHCR196 = true;
}
}
}

protected final void initDHCR197(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR197 = false;
} else {
DHCR197 = true;
}
}
}

protected final void initDHCR198(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR198 = false;
} else {
DHCR198 = true;
}
}
}

protected final void initDHCR199(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR199 = false;
} else {
DHCR199 = true;
}
}
}

protected final void initDHCR200(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR200 = false;
} else {
DHCR200 = true;
}
}
}

protected final void initDHCR201(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR201 = false;
} else {
DHCR201 = true;
}
}
}

protected final void initDHCR202(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR202 = false;
} else {
DHCR202 = true;
}
}
}

protected final void initDHCR203(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR203 = false;
} else {
DHCR203 = true;
}
}
}

protected final void initDHCR204(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR204 = false;
} else {
DHCR204 = true;
}
}
}

protected final void initDHCR205(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR205 = false;
} else {
DHCR205 = true;
}
}
}

protected final void initDHCR206(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR206 = false;
} else {
DHCR206 = true;
}
}
}

protected final void initDHCR207(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR207 = false;
} else {
DHCR207 = true;
}
}
}

protected final void initDHCR208(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR208 = false;
} else {
DHCR208 = true;
}
}
}

protected final void initDHCR209(String s) {
if (!s.trim().isEmpty()) {
DHCR209 = Byte.parseByte(s);
} else {
DHCR209 = Byte.MIN_VALUE;
}
}

protected final void initDHCR210(String s) {
if (!s.trim().isEmpty()) {
DHCR210 = Byte.parseByte(s);
} else {
DHCR210 = Byte.MIN_VALUE;
}
}

protected final void initDHCR211(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR211 = false;
} else {
DHCR211 = true;
}
}
}

protected final void initDHCR212(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR212 = false;
} else {
DHCR212 = true;
}
}
}

protected final void initDHCR213(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR213 = false;
} else {
DHCR213 = true;
}
}
}

protected final void initDHCR214(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR214 = false;
} else {
DHCR214 = true;
}
}
}

protected final void initDHCR215(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR215 = false;
} else {
DHCR215 = true;
}
}
}

protected final void initDHCR216(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR216 = false;
} else {
DHCR216 = true;
}
}
}

protected final void initDHCR217(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR217 = false;
} else {
DHCR217 = true;
}
}
}

protected final void initDHCR218(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR218 = false;
} else {
DHCR218 = true;
}
}
}

protected final void initDHCR219(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR219 = false;
} else {
DHCR219 = true;
}
}
}

protected final void initDHCR220(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR220 = false;
} else {
DHCR220 = true;
}
}
}

protected final void initDHCR221(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR221 = false;
} else {
DHCR221 = true;
}
}
}

protected final void initDHCR222(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR222 = false;
} else {
DHCR222 = true;
}
}
}

protected final void initDHCR223(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR223 = false;
} else {
DHCR223 = true;
}
}
}

protected final void initDHCR224(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR224 = false;
} else {
DHCR224 = true;
}
}
}

protected final void initDHCR225(String s) {
if (!s.trim().isEmpty()) {
DHCR225 = Byte.parseByte(s);
} else {
DHCR225 = Byte.MIN_VALUE;
}
}

protected final void initDHCR226(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR226 = false;
} else {
DHCR226 = true;
}
}
}

protected final void initDHCR227(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR227 = false;
} else {
DHCR227 = true;
}
}
}

protected final void initDHCR228(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR228 = false;
} else {
DHCR228 = true;
}
}
}

protected final void initDHCR229(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR229 = false;
} else {
DHCR229 = true;
}
}
}

protected final void initDHCR230(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR230 = false;
} else {
DHCR230 = true;
}
}
}

protected final void initDHCR231(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR231 = false;
} else {
DHCR231 = true;
}
}
}

protected final void initDHCR232(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR232 = false;
} else {
DHCR232 = true;
}
}
}

protected final void initDHCR233(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR233 = false;
} else {
DHCR233 = true;
}
}
}

protected final void initDHCR234(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR234 = false;
} else {
DHCR234 = true;
}
}
}

protected final void initDHCR235(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR235 = false;
} else {
DHCR235 = true;
}
}
}

protected final void initDHCR236(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR236 = false;
} else {
DHCR236 = true;
}
}
}

protected final void initDHCR237(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR237 = false;
} else {
DHCR237 = true;
}
}
}

protected final void initDHCR238(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR238 = false;
} else {
DHCR238 = true;
}
}
}

protected final void initDHCR239(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR239 = false;
} else {
DHCR239 = true;
}
}
}

protected final void initDHCR24(String s) {
if (!s.trim().isEmpty()) {
DHCR24 = Byte.parseByte(s);
} else {
DHCR24 = Byte.MIN_VALUE;
}
}

protected final void initDHCR240(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR240 = false;
} else {
DHCR240 = true;
}
}
}

protected final void initDHCR241(String s) {
if (!s.trim().isEmpty()) {
DHCR241 = Byte.parseByte(s);
} else {
DHCR241 = Byte.MIN_VALUE;
}
}

protected final void initDHCR242(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR242 = false;
} else {
DHCR242 = true;
}
}
}

protected final void initDHCR243(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR243 = false;
} else {
DHCR243 = true;
}
}
}

protected final void initDHCR244(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR244 = false;
} else {
DHCR244 = true;
}
}
}

protected final void initDHCR245(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR245 = false;
} else {
DHCR245 = true;
}
}
}

protected final void initDHCR246(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR246 = false;
} else {
DHCR246 = true;
}
}
}

protected final void initDHCR247(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR247 = false;
} else {
DHCR247 = true;
}
}
}

protected final void initDHCR248(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR248 = false;
} else {
DHCR248 = true;
}
}
}

protected final void initDHCR249(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR249 = false;
} else {
DHCR249 = true;
}
}
}

protected final void initDHCR25(String s) {
if (!s.trim().isEmpty()) {
DHCR25 = Byte.parseByte(s);
} else {
DHCR25 = Byte.MIN_VALUE;
}
}

protected final void initDHCR250(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR250 = false;
} else {
DHCR250 = true;
}
}
}

protected final void initDHCR251(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR251 = false;
} else {
DHCR251 = true;
}
}
}

protected final void initDHCR252(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR252 = false;
} else {
DHCR252 = true;
}
}
}

protected final void initDHCR253(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR253 = false;
} else {
DHCR253 = true;
}
}
}

protected final void initDHCR254(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR254 = false;
} else {
DHCR254 = true;
}
}
}

protected final void initDHCR255(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR255 = false;
} else {
DHCR255 = true;
}
}
}

protected final void initDHCR256(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR256 = false;
} else {
DHCR256 = true;
}
}
}

protected final void initDHCR26(String s) {
if (!s.trim().isEmpty()) {
DHCR26 = Byte.parseByte(s);
} else {
DHCR26 = Byte.MIN_VALUE;
}
}

protected final void initDHCR27(String s) {
if (!s.trim().isEmpty()) {
DHCR27 = Byte.parseByte(s);
} else {
DHCR27 = Byte.MIN_VALUE;
}
}

protected final void initDHCR28(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR28 = false;
} else {
DHCR28 = true;
}
}
}

protected final void initDHCR29(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR29 = false;
} else {
DHCR29 = true;
}
}
}

protected final void initDHCR30(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR30 = false;
} else {
DHCR30 = true;
}
}
}

protected final void initDHCR31(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR31 = false;
} else {
DHCR31 = true;
}
}
}

protected final void initDHCR32(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR32 = false;
} else {
DHCR32 = true;
}
}
}

protected final void initDHCR40(String s) {
if (!s.trim().isEmpty()) {
DHCR40 = Byte.parseByte(s);
} else {
DHCR40 = Byte.MIN_VALUE;
}
}

protected final void initDHCR41(String s) {
if (!s.trim().isEmpty()) {
DHCR41 = Byte.parseByte(s);
} else {
DHCR41 = Byte.MIN_VALUE;
}
}

protected final void initDHCR42(String s) {
if (!s.trim().isEmpty()) {
DHCR42 = Byte.parseByte(s);
} else {
DHCR42 = Byte.MIN_VALUE;
}
}

protected final void initDHCR43(String s) {
if (!s.trim().isEmpty()) {
DHCR43 = Byte.parseByte(s);
} else {
DHCR43 = Byte.MIN_VALUE;
}
}

protected final void initDHCR44(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR44 = false;
} else {
DHCR44 = true;
}
}
}

protected final void initDHCR45(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR45 = false;
} else {
DHCR45 = true;
}
}
}

protected final void initDHCR46(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR46 = false;
} else {
DHCR46 = true;
}
}
}

protected final void initDHCR47(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR47 = false;
} else {
DHCR47 = true;
}
}
}

protected final void initDHCR48(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR48 = false;
} else {
DHCR48 = true;
}
}
}

protected final void initDHCR56(String s) {
if (!s.trim().isEmpty()) {
DHCR56 = Byte.parseByte(s);
} else {
DHCR56 = Byte.MIN_VALUE;
}
}

protected final void initDHCR57(String s) {
if (!s.trim().isEmpty()) {
DHCR57 = Byte.parseByte(s);
} else {
DHCR57 = Byte.MIN_VALUE;
}
}

protected final void initDHCR58(String s) {
if (!s.trim().isEmpty()) {
DHCR58 = Byte.parseByte(s);
} else {
DHCR58 = Byte.MIN_VALUE;
}
}

protected final void initDHCR59(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR59 = false;
} else {
DHCR59 = true;
}
}
}

protected final void initDHCR60(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR60 = false;
} else {
DHCR60 = true;
}
}
}

protected final void initDHCR61(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR61 = false;
} else {
DHCR61 = true;
}
}
}

protected final void initDHCR62(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR62 = false;
} else {
DHCR62 = true;
}
}
}

protected final void initDHCR63(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR63 = false;
} else {
DHCR63 = true;
}
}
}

protected final void initDHCR64(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR64 = false;
} else {
DHCR64 = true;
}
}
}

protected final void initDHCR72(String s) {
if (!s.trim().isEmpty()) {
DHCR72 = Byte.parseByte(s);
} else {
DHCR72 = Byte.MIN_VALUE;
}
}

protected final void initDHCR73(String s) {
if (!s.trim().isEmpty()) {
DHCR73 = Byte.parseByte(s);
} else {
DHCR73 = Byte.MIN_VALUE;
}
}

protected final void initDHCR74(String s) {
if (!s.trim().isEmpty()) {
DHCR74 = Byte.parseByte(s);
} else {
DHCR74 = Byte.MIN_VALUE;
}
}

protected final void initDHCR75(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR75 = false;
} else {
DHCR75 = true;
}
}
}

protected final void initDHCR76(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR76 = false;
} else {
DHCR76 = true;
}
}
}

protected final void initDHCR77(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR77 = false;
} else {
DHCR77 = true;
}
}
}

protected final void initDHCR78(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR78 = false;
} else {
DHCR78 = true;
}
}
}

protected final void initDHCR79(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR79 = false;
} else {
DHCR79 = true;
}
}
}

protected final void initDHCR80(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR80 = false;
} else {
DHCR80 = true;
}
}
}

protected final void initDHCR88(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR88 = false;
} else {
DHCR88 = true;
}
}
}

protected final void initDHCR89(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR89 = false;
} else {
DHCR89 = true;
}
}
}

protected final void initDHCR90(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR90 = false;
} else {
DHCR90 = true;
}
}
}

protected final void initDHCR91(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR91 = false;
} else {
DHCR91 = true;
}
}
}

protected final void initDHCR92(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR92 = false;
} else {
DHCR92 = true;
}
}
}

protected final void initDHCR93(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR93 = false;
} else {
DHCR93 = true;
}
}
}

protected final void initDHCR94(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR94 = false;
} else {
DHCR94 = true;
}
}
}

protected final void initDHCR95(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR95 = false;
} else {
DHCR95 = true;
}
}
}

protected final void initDHCR96(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHCR96 = false;
} else {
DHCR96 = true;
}
}
}

protected final void initDHCS14(String s) {
if (!s.trim().isEmpty()) {
DHCS14 = Byte.parseByte(s);
} else {
DHCS14 = Byte.MIN_VALUE;
}
}

protected final void initDHCS15(String s) {
if (!s.trim().isEmpty()) {
DHCS15 = Byte.parseByte(s);
} else {
DHCS15 = Byte.MIN_VALUE;
}
}

protected final void initDHCS16(String s) {
if (!s.trim().isEmpty()) {
DHCS16 = Byte.parseByte(s);
} else {
DHCS16 = Byte.MIN_VALUE;
}
}

protected final void initDHIASEP(String s) {
if (!s.trim().isEmpty()) {
DHIASEP = Byte.parseByte(s);
} else {
DHIASEP = Byte.MIN_VALUE;
}
}

protected final void initDHPA10(String s) {
if (!s.trim().isEmpty()) {
DHPA10 = Byte.parseByte(s);
} else {
DHPA10 = Byte.MIN_VALUE;
}
}

protected final void initDHPA11(String s) {
if (!s.trim().isEmpty()) {
DHPA11 = Byte.parseByte(s);
} else {
DHPA11 = Byte.MIN_VALUE;
}
}

protected final void initDHPA12(String s) {
if (!s.trim().isEmpty()) {
DHPA12 = Byte.parseByte(s);
} else {
DHPA12 = Byte.MIN_VALUE;
}
}

protected final void initDHPA13(String s) {
if (!s.trim().isEmpty()) {
DHPA13 = Byte.parseByte(s);
} else {
DHPA13 = Byte.MIN_VALUE;
}
}

protected final void initDHPA14(String s) {
if (!s.trim().isEmpty()) {
DHPA14 = Byte.parseByte(s);
} else {
DHPA14 = Byte.MIN_VALUE;
}
}

protected final void initDHPA15(String s) {
if (!s.trim().isEmpty()) {
DHPA15 = Byte.parseByte(s);
} else {
DHPA15 = Byte.MIN_VALUE;
}
}

protected final void initDHPA16(String s) {
if (!s.trim().isEmpty()) {
DHPA16 = Byte.parseByte(s);
} else {
DHPA16 = Byte.MIN_VALUE;
}
}

protected final void initDHPA2(String s) {
if (!s.trim().isEmpty()) {
DHPA2 = Byte.parseByte(s);
} else {
DHPA2 = Byte.MIN_VALUE;
}
}

protected final void initDHPA3(String s) {
if (!s.trim().isEmpty()) {
DHPA3 = Byte.parseByte(s);
} else {
DHPA3 = Byte.MIN_VALUE;
}
}

protected final void initDHPA4(String s) {
if (!s.trim().isEmpty()) {
DHPA4 = Byte.parseByte(s);
} else {
DHPA4 = Byte.MIN_VALUE;
}
}

protected final void initDHPA5(String s) {
if (!s.trim().isEmpty()) {
DHPA5 = Byte.parseByte(s);
} else {
DHPA5 = Byte.MIN_VALUE;
}
}

protected final void initDHPA6(String s) {
if (!s.trim().isEmpty()) {
DHPA6 = Byte.parseByte(s);
} else {
DHPA6 = Byte.MIN_VALUE;
}
}

protected final void initDHPA7(String s) {
if (!s.trim().isEmpty()) {
DHPA7 = Byte.parseByte(s);
} else {
DHPA7 = Byte.MIN_VALUE;
}
}

protected final void initDHPA8(String s) {
if (!s.trim().isEmpty()) {
DHPA8 = Byte.parseByte(s);
} else {
DHPA8 = Byte.MIN_VALUE;
}
}

protected final void initDHPA9(String s) {
if (!s.trim().isEmpty()) {
DHPA9 = Byte.parseByte(s);
} else {
DHPA9 = Byte.MIN_VALUE;
}
}

protected final void initDHPB10(String s) {
if (!s.trim().isEmpty()) {
DHPB10 = Byte.parseByte(s);
} else {
DHPB10 = Byte.MIN_VALUE;
}
}

protected final void initDHPB11(String s) {
if (!s.trim().isEmpty()) {
DHPB11 = Byte.parseByte(s);
} else {
DHPB11 = Byte.MIN_VALUE;
}
}

protected final void initDHPB12(String s) {
if (!s.trim().isEmpty()) {
DHPB12 = Byte.parseByte(s);
} else {
DHPB12 = Byte.MIN_VALUE;
}
}

protected final void initDHPB13(String s) {
if (!s.trim().isEmpty()) {
DHPB13 = Byte.parseByte(s);
} else {
DHPB13 = Byte.MIN_VALUE;
}
}

protected final void initDHPB14(String s) {
if (!s.trim().isEmpty()) {
DHPB14 = Byte.parseByte(s);
} else {
DHPB14 = Byte.MIN_VALUE;
}
}

protected final void initDHPB15(String s) {
if (!s.trim().isEmpty()) {
DHPB15 = Byte.parseByte(s);
} else {
DHPB15 = Byte.MIN_VALUE;
}
}

protected final void initDHPB16(String s) {
if (!s.trim().isEmpty()) {
DHPB16 = Byte.parseByte(s);
} else {
DHPB16 = Byte.MIN_VALUE;
}
}

protected final void initDHPB2(String s) {
if (!s.trim().isEmpty()) {
DHPB2 = Byte.parseByte(s);
} else {
DHPB2 = Byte.MIN_VALUE;
}
}

protected final void initDHPB3(String s) {
if (!s.trim().isEmpty()) {
DHPB3 = Byte.parseByte(s);
} else {
DHPB3 = Byte.MIN_VALUE;
}
}

protected final void initDHPB4(String s) {
if (!s.trim().isEmpty()) {
DHPB4 = Byte.parseByte(s);
} else {
DHPB4 = Byte.MIN_VALUE;
}
}

protected final void initDHPB5(String s) {
if (!s.trim().isEmpty()) {
DHPB5 = Byte.parseByte(s);
} else {
DHPB5 = Byte.MIN_VALUE;
}
}

protected final void initDHPB6(String s) {
if (!s.trim().isEmpty()) {
DHPB6 = Byte.parseByte(s);
} else {
DHPB6 = Byte.MIN_VALUE;
}
}

protected final void initDHPB7(String s) {
if (!s.trim().isEmpty()) {
DHPB7 = Byte.parseByte(s);
} else {
DHPB7 = Byte.MIN_VALUE;
}
}

protected final void initDHPB8(String s) {
if (!s.trim().isEmpty()) {
DHPB8 = Byte.parseByte(s);
} else {
DHPB8 = Byte.MIN_VALUE;
}
}

protected final void initDHPB9(String s) {
if (!s.trim().isEmpty()) {
DHPB9 = Byte.parseByte(s);
} else {
DHPB9 = Byte.MIN_VALUE;
}
}

protected final void initDHR13(String s) {
if (!s.trim().isEmpty()) {
DHR13 = Byte.parseByte(s);
} else {
DHR13 = Byte.MIN_VALUE;
}
}

protected final void initDHR14(String s) {
if (!s.trim().isEmpty()) {
DHR14 = Byte.parseByte(s);
} else {
DHR14 = Byte.MIN_VALUE;
}
}

protected final void initDHR15(String s) {
if (!s.trim().isEmpty()) {
DHR15 = Byte.parseByte(s);
} else {
DHR15 = Byte.MIN_VALUE;
}
}

protected final void initDHR16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
DHR16 = false;
} else {
DHR16 = true;
}
}
}

protected final void initDHWORK(String s) {
if (!s.trim().isEmpty()) {
DHWORK = Byte.parseByte(s);
} else {
DHWORK = Byte.MIN_VALUE;
}
}

protected final void initDIAS1(String s) {
if (!s.trim().isEmpty()) {
DIAS1 = Short.parseShort(s);
} else {
DIAS1 = Short.MIN_VALUE;
}
}

protected final void initDIAS2(String s) {
if (!s.trim().isEmpty()) {
DIAS2 = Short.parseShort(s);
} else {
DIAS2 = Short.MIN_VALUE;
}
}

protected final void initDIAS3(String s) {
if (!s.trim().isEmpty()) {
DIAS3 = Short.parseShort(s);
} else {
DIAS3 = Short.MIN_VALUE;
}
}

protected final void initDIAVAL(String s) {
if (!s.trim().isEmpty()) {
DIAVAL = Double.parseDouble(s);
} else {
DIAVAL = Double.NaN;
}
}

protected final void initDIBPC95(String s) {
if (!s.trim().isEmpty()) {
DIBPC95 = Byte.parseByte(s);
} else {
DIBPC95 = Byte.MIN_VALUE;
}
}

protected final void initDIFADI(String s) {
if (!s.trim().isEmpty()) {
DIFADI = Byte.parseByte(s);
} else {
DIFADI = Byte.MIN_VALUE;
}
}

protected final void initDIFBPCCU(String s) {
if (!s.trim().isEmpty()) {
DIFBPCCU = Byte.parseByte(s);
} else {
DIFBPCCU = Byte.MIN_VALUE;
}
}

protected final void initDIFBPCEQ(String s) {
if (!s.trim().isEmpty()) {
DIFBPCEQ = Byte.parseByte(s);
} else {
DIFBPCEQ = Byte.MIN_VALUE;
}
}

protected final void initDIFBPCER(String s) {
if (!s.trim().isEmpty()) {
DIFBPCER = Byte.parseByte(s);
} else {
DIFBPCER = Byte.MIN_VALUE;
}
}

protected final void initDIFBPCLE(String s) {
if (!s.trim().isEmpty()) {
DIFBPCLE = Byte.parseByte(s);
} else {
DIFBPCLE = Byte.MIN_VALUE;
}
}

protected final void initDIFBPCNO(String s) {
if (!s.trim().isEmpty()) {
DIFBPCNO = Byte.parseByte(s);
} else {
DIFBPCNO = Byte.MIN_VALUE;
}
}

protected final void initDIFBPCUP(String s) {
if (!s.trim().isEmpty()) {
DIFBPCUP = Byte.parseByte(s);
} else {
DIFBPCUP = Byte.MIN_VALUE;
}
}

protected final void initDIFDYR(String s) {
if (!s.trim().isEmpty()) {
DIFDYR = Short.parseShort(s);
} else {
DIFDYR = Short.MIN_VALUE;
}
}

protected final void initDIGNMYC(String s) {
if (!s.trim().isEmpty()) {
DIGNMYC = Byte.parseByte(s);
} else {
DIGNMYC = Byte.MIN_VALUE;
}
}

protected final void initDIGPRXA(String s) {
if (!s.trim().isEmpty()) {
DIGPRXA = Byte.parseByte(s);
} else {
DIGPRXA = Byte.MIN_VALUE;
}
}

protected final void initDIGPRXB(String s) {
if (!s.trim().isEmpty()) {
DIGPRXB = Byte.parseByte(s);
} else {
DIGPRXB = Byte.MIN_VALUE;
}
}

protected final void initDIMADI(String s) {
if (!s.trim().isEmpty()) {
DIMADI = Byte.parseByte(s);
} else {
DIMADI = Byte.MIN_VALUE;
}
}

protected final void initDIMAEDU(String s) {
if (!s.trim().isEmpty()) {
DIMAEDU = Byte.parseByte(s);
} else {
DIMAEDU = Byte.MIN_VALUE;
}
}

protected final void initDIMARR(String s) {
if (!s.trim().isEmpty()) {
DIMARR = Byte.parseByte(s);
} else {
DIMARR = Byte.MIN_VALUE;
}
}

protected final void initDIMDYR(String s) {
if (!s.trim().isEmpty()) {
DIMDYR = Short.parseShort(s);
} else {
DIMDYR = Short.MIN_VALUE;
}
}

protected final void initDIPAEDU(String s) {
if (!s.trim().isEmpty()) {
DIPAEDU = Byte.parseByte(s);
} else {
DIPAEDU = Byte.MIN_VALUE;
}
}

protected final void initDISIBC(String s) {
if (!s.trim().isEmpty()) {
DISIBC = Byte.parseByte(s);
} else {
DISIBC = Byte.MIN_VALUE;
}
}

protected final void initERADLT(String s) {
if (!s.trim().isEmpty()) {
ERADLT = Byte.parseByte(s);
} else {
ERADLT = Byte.MIN_VALUE;
}
}

protected final void initERAGEC1(String s) {
if (!s.trim().isEmpty()) {
ERAGEC1 = Byte.parseByte(s);
} else {
ERAGEC1 = Byte.MIN_VALUE;
}
}

protected final void initERAGEC2(String s) {
if (!s.trim().isEmpty()) {
ERAGEC2 = Byte.parseByte(s);
} else {
ERAGEC2 = Byte.MIN_VALUE;
}
}

protected final void initERAGEC3(String s) {
if (!s.trim().isEmpty()) {
ERAGEC3 = Byte.parseByte(s);
} else {
ERAGEC3 = Byte.MIN_VALUE;
}
}

protected final void initERCAA(String s) {
if (!s.trim().isEmpty()) {
ERCAA = Byte.parseByte(s);
} else {
ERCAA = Byte.MIN_VALUE;
}
}

protected final void initERCABCH(String s) {
if (!s.trim().isEmpty()) {
ERCABCH = Byte.parseByte(s);
} else {
ERCABCH = Byte.MIN_VALUE;
}
}

protected final void initERCABFR(String s) {
if (!s.trim().isEmpty()) {
ERCABFR = Byte.parseByte(s);
} else {
ERCABFR = Byte.MIN_VALUE;
}
}

protected final void initERCABGC(String s) {
if (!s.trim().isEmpty()) {
ERCABGC = Byte.parseByte(s);
} else {
ERCABGC = Byte.MIN_VALUE;
}
}

protected final void initERCABOR(String s) {
if (!s.trim().isEmpty()) {
ERCABOR = Byte.parseByte(s);
} else {
ERCABOR = Byte.MIN_VALUE;
}
}

protected final void initERCABOT(String s) {
if (!s.trim().isEmpty()) {
ERCABOT = Byte.parseByte(s);
} else {
ERCABOT = Byte.MIN_VALUE;
}
}

protected final void initERCABPA(String s) {
if (!s.trim().isEmpty()) {
ERCABPA = Byte.parseByte(s);
} else {
ERCABPA = Byte.MIN_VALUE;
}
}

protected final void initERCABPL(String s) {
if (!s.trim().isEmpty()) {
ERCABPL = Byte.parseByte(s);
} else {
ERCABPL = Byte.MIN_VALUE;
}
}

protected final void initERCABSP(String s) {
if (!s.trim().isEmpty()) {
ERCABSP = Byte.parseByte(s);
} else {
ERCABSP = Byte.MIN_VALUE;
}
}

protected final void initERCAC(String s) {
if (!s.trim().isEmpty()) {
ERCAC = Short.parseShort(s);
} else {
ERCAC = Short.MIN_VALUE;
}
}

protected final void initERCADP1(String s) {
if (!s.trim().isEmpty()) {
ERCADP1 = Byte.parseByte(s);
} else {
ERCADP1 = Byte.MIN_VALUE;
}
}

protected final void initERCADP10(String s) {
if (!s.trim().isEmpty()) {
ERCADP10 = Byte.parseByte(s);
} else {
ERCADP10 = Byte.MIN_VALUE;
}
}

protected final void initERCADP11(String s) {
if (!s.trim().isEmpty()) {
ERCADP11 = Byte.parseByte(s);
} else {
ERCADP11 = Byte.MIN_VALUE;
}
}

protected final void initERCADP12(String s) {
if (!s.trim().isEmpty()) {
ERCADP12 = Byte.parseByte(s);
} else {
ERCADP12 = Byte.MIN_VALUE;
}
}

protected final void initERCADP13(String s) {
if (!s.trim().isEmpty()) {
ERCADP13 = Byte.parseByte(s);
} else {
ERCADP13 = Byte.MIN_VALUE;
}
}

protected final void initERCADP14(String s) {
if (!s.trim().isEmpty()) {
ERCADP14 = Byte.parseByte(s);
} else {
ERCADP14 = Byte.MIN_VALUE;
}
}

protected final void initERCADP15(String s) {
if (!s.trim().isEmpty()) {
ERCADP15 = Byte.parseByte(s);
} else {
ERCADP15 = Byte.MIN_VALUE;
}
}

protected final void initERCADP16(String s) {
if (!s.trim().isEmpty()) {
ERCADP16 = Byte.parseByte(s);
} else {
ERCADP16 = Byte.MIN_VALUE;
}
}

protected final void initERCADP2(String s) {
if (!s.trim().isEmpty()) {
ERCADP2 = Byte.parseByte(s);
} else {
ERCADP2 = Byte.MIN_VALUE;
}
}

protected final void initERCADP3(String s) {
if (!s.trim().isEmpty()) {
ERCADP3 = Byte.parseByte(s);
} else {
ERCADP3 = Byte.MIN_VALUE;
}
}

protected final void initERCADP4(String s) {
if (!s.trim().isEmpty()) {
ERCADP4 = Byte.parseByte(s);
} else {
ERCADP4 = Byte.MIN_VALUE;
}
}

protected final void initERCADP5(String s) {
if (!s.trim().isEmpty()) {
ERCADP5 = Byte.parseByte(s);
} else {
ERCADP5 = Byte.MIN_VALUE;
}
}

protected final void initERCADP6(String s) {
if (!s.trim().isEmpty()) {
ERCADP6 = Byte.parseByte(s);
} else {
ERCADP6 = Byte.MIN_VALUE;
}
}

protected final void initERCADP7(String s) {
if (!s.trim().isEmpty()) {
ERCADP7 = Byte.parseByte(s);
} else {
ERCADP7 = Byte.MIN_VALUE;
}
}

protected final void initERCADP8(String s) {
if (!s.trim().isEmpty()) {
ERCADP8 = Byte.parseByte(s);
} else {
ERCADP8 = Byte.MIN_VALUE;
}
}

protected final void initERCADP9(String s) {
if (!s.trim().isEmpty()) {
ERCADP9 = Byte.parseByte(s);
} else {
ERCADP9 = Byte.MIN_VALUE;
}
}

protected final void initERCALIVE(String s) {
if (!s.trim().isEmpty()) {
ERCALIVE = Byte.parseByte(s);
} else {
ERCALIVE = Byte.MIN_VALUE;
}
}

protected final void initERCAM85(String s) {
if (!s.trim().isEmpty()) {
ERCAM85 = Byte.parseByte(s);
} else {
ERCAM85 = Byte.MIN_VALUE;
}
}

protected final void initERCAM86(String s) {
if (!s.trim().isEmpty()) {
ERCAM86 = Byte.parseByte(s);
} else {
ERCAM86 = Byte.MIN_VALUE;
}
}

protected final void initERCAMCH(String s) {
if (!s.trim().isEmpty()) {
ERCAMCH = Byte.parseByte(s);
} else {
ERCAMCH = Byte.MIN_VALUE;
}
}

protected final void initERCAMFR(String s) {
if (!s.trim().isEmpty()) {
ERCAMFR = Byte.parseByte(s);
} else {
ERCAMFR = Byte.MIN_VALUE;
}
}

protected final void initERCAMGC(String s) {
if (!s.trim().isEmpty()) {
ERCAMGC = Byte.parseByte(s);
} else {
ERCAMGC = Byte.MIN_VALUE;
}
}

protected final void initERCAMOR(String s) {
if (!s.trim().isEmpty()) {
ERCAMOR = Byte.parseByte(s);
} else {
ERCAMOR = Byte.MIN_VALUE;
}
}

protected final void initERCAMPA(String s) {
if (!s.trim().isEmpty()) {
ERCAMPA = Byte.parseByte(s);
} else {
ERCAMPA = Byte.MIN_VALUE;
}
}

protected final void initERCAMPL(String s) {
if (!s.trim().isEmpty()) {
ERCAMPL = Byte.parseByte(s);
} else {
ERCAMPL = Byte.MIN_VALUE;
}
}

protected final void initERCAMSP(String s) {
if (!s.trim().isEmpty()) {
ERCAMSP = Byte.parseByte(s);
} else {
ERCAMSP = Byte.MIN_VALUE;
}
}

protected final void initERCANCH(String s) {
if (!s.trim().isEmpty()) {
ERCANCH = Byte.parseByte(s);
} else {
ERCANCH = Byte.MIN_VALUE;
}
}

protected final void initERCANFR(String s) {
if (!s.trim().isEmpty()) {
ERCANFR = Byte.parseByte(s);
} else {
ERCANFR = Byte.MIN_VALUE;
}
}

protected final void initERCANGC(String s) {
if (!s.trim().isEmpty()) {
ERCANGC = Byte.parseByte(s);
} else {
ERCANGC = Byte.MIN_VALUE;
}
}

protected final void initERCANOR(String s) {
if (!s.trim().isEmpty()) {
ERCANOR = Byte.parseByte(s);
} else {
ERCANOR = Byte.MIN_VALUE;
}
}

protected final void initERCANOT(String s) {
if (!s.trim().isEmpty()) {
ERCANOT = Byte.parseByte(s);
} else {
ERCANOT = Byte.MIN_VALUE;
}
}

protected final void initERCANPA(String s) {
if (!s.trim().isEmpty()) {
ERCANPA = Byte.parseByte(s);
} else {
ERCANPA = Byte.MIN_VALUE;
}
}

protected final void initERCANPL(String s) {
if (!s.trim().isEmpty()) {
ERCANPL = Byte.parseByte(s);
} else {
ERCANPL = Byte.MIN_VALUE;
}
}

protected final void initERCANSP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
ERCANSP = false;
} else {
ERCANSP = true;
}
}
}

protected final void initERCANTT(String s) {
if (!s.trim().isEmpty()) {
ERCANTT = Byte.parseByte(s);
} else {
ERCANTT = Byte.MIN_VALUE;
}
}

protected final void initERCARA(String s) {
if (!s.trim().isEmpty()) {
ERCARA = Byte.parseByte(s);
} else {
ERCARA = Byte.MIN_VALUE;
}
}

protected final void initERCARB(String s) {
if (!s.trim().isEmpty()) {
ERCARB = Byte.parseByte(s);
} else {
ERCARB = Byte.MIN_VALUE;
}
}

protected final void initERCHLD(String s) {
if (!s.trim().isEmpty()) {
ERCHLD = Byte.parseByte(s);
} else {
ERCHLD = Byte.MIN_VALUE;
}
}

protected final void initERFVOFT(String s) {
if (!s.trim().isEmpty()) {
ERFVOFT = Byte.parseByte(s);
} else {
ERFVOFT = Byte.MIN_VALUE;
}
}

protected final void initERFVOL(String s) {
if (!s.trim().isEmpty()) {
ERFVOL = Byte.parseByte(s);
} else {
ERFVOL = Byte.MIN_VALUE;
}
}

protected final void initERFVOL96(String s) {
if (!s.trim().isEmpty()) {
ERFVOL96 = Byte.parseByte(s);
} else {
ERFVOL96 = Byte.MIN_VALUE;
}
}

protected final void initERFVOLBE(String s) {
if (!s.trim().isEmpty()) {
ERFVOLBE = Byte.parseByte(s);
} else {
ERFVOLBE = Byte.MIN_VALUE;
}
}

protected final void initERFVOLCA(String s) {
if (!s.trim().isEmpty()) {
ERFVOLCA = Byte.parseByte(s);
} else {
ERFVOLCA = Byte.MIN_VALUE;
}
}

protected final void initERFVOLED(String s) {
if (!s.trim().isEmpty()) {
ERFVOLED = Byte.parseByte(s);
} else {
ERFVOLED = Byte.MIN_VALUE;
}
}

protected final void initERFVOLIN(String s) {
if (!s.trim().isEmpty()) {
ERFVOLIN = Byte.parseByte(s);
} else {
ERFVOLIN = Byte.MIN_VALUE;
}
}

protected final void initERFVOLLE(String s) {
if (!s.trim().isEmpty()) {
ERFVOLLE = Byte.parseByte(s);
} else {
ERFVOLLE = Byte.MIN_VALUE;
}
}

protected final void initERFVOLMO(String s) {
if (!s.trim().isEmpty()) {
ERFVOLMO = Byte.parseByte(s);
} else {
ERFVOLMO = Byte.MIN_VALUE;
}
}

protected final void initERFVOLOR(String s) {
if (!s.trim().isEmpty()) {
ERFVOLOR = Byte.parseByte(s);
} else {
ERFVOLOR = Byte.MIN_VALUE;
}
}

protected final void initERFVOLPR(String s) {
if (!s.trim().isEmpty()) {
ERFVOLPR = Byte.parseByte(s);
} else {
ERFVOLPR = Byte.MIN_VALUE;
}
}

protected final void initERFVOLRE(String s) {
if (!s.trim().isEmpty()) {
ERFVOLRE = Byte.parseByte(s);
} else {
ERFVOLRE = Byte.MIN_VALUE;
}
}

protected final void initERFVOLSE(String s) {
if (!s.trim().isEmpty()) {
ERFVOLSE = Byte.parseByte(s);
} else {
ERFVOLSE = Byte.MIN_VALUE;
}
}

protected final void initERFVOLTR(String s) {
if (!s.trim().isEmpty()) {
ERFVOLTR = Byte.parseByte(s);
} else {
ERFVOLTR = Byte.MIN_VALUE;
}
}

protected final void initERFVOLVI(String s) {
if (!s.trim().isEmpty()) {
ERFVOLVI = Byte.parseByte(s);
} else {
ERFVOLVI = Byte.MIN_VALUE;
}
}

protected final void initERIVOFT(String s) {
if (!s.trim().isEmpty()) {
ERIVOFT = Byte.parseByte(s);
} else {
ERIVOFT = Byte.MIN_VALUE;
}
}

protected final void initERIVOL96(String s) {
if (!s.trim().isEmpty()) {
ERIVOL96 = Byte.parseByte(s);
} else {
ERIVOL96 = Byte.MIN_VALUE;
}
}

protected final void initERLVOLBA(String s) {
if (!s.trim().isEmpty()) {
ERLVOLBA = Byte.parseByte(s);
} else {
ERLVOLBA = Byte.MIN_VALUE;
}
}

protected final void initERLVOLCO(String s) {
if (!s.trim().isEmpty()) {
ERLVOLCO = Byte.parseByte(s);
} else {
ERLVOLCO = Byte.MIN_VALUE;
}
}

protected final void initERLVOLDE(String s) {
if (!s.trim().isEmpty()) {
ERLVOLDE = Byte.parseByte(s);
} else {
ERLVOLDE = Byte.MIN_VALUE;
}
}

protected final void initERLVOLKE(String s) {
if (!s.trim().isEmpty()) {
ERLVOLKE = Byte.parseByte(s);
} else {
ERLVOLKE = Byte.MIN_VALUE;
}
}

protected final void initERLVOLPE(String s) {
if (!s.trim().isEmpty()) {
ERLVOLPE = Byte.parseByte(s);
} else {
ERLVOLPE = Byte.MIN_VALUE;
}
}

protected final void initERLVOLPR(String s) {
if (!s.trim().isEmpty()) {
ERLVOLPR = Byte.parseByte(s);
} else {
ERLVOLPR = Byte.MIN_VALUE;
}
}

protected final void initERLVOLRE(String s) {
if (!s.trim().isEmpty()) {
ERLVOLRE = Byte.parseByte(s);
} else {
ERLVOLRE = Byte.MIN_VALUE;
}
}

protected final void initERLVOLSH(String s) {
if (!s.trim().isEmpty()) {
ERLVOLSH = Byte.parseByte(s);
} else {
ERLVOLSH = Byte.MIN_VALUE;
}
}

protected final void initERLVOLTR(String s) {
if (!s.trim().isEmpty()) {
ERLVOLTR = Byte.parseByte(s);
} else {
ERLVOLTR = Byte.MIN_VALUE;
}
}

protected final void initERLVOLWR(String s) {
if (!s.trim().isEmpty()) {
ERLVOLWR = Byte.parseByte(s);
} else {
ERLVOLWR = Byte.MIN_VALUE;
}
}

protected final void initEROLDR(String s) {
if (!s.trim().isEmpty()) {
EROLDR = Byte.parseByte(s);
} else {
EROLDR = Byte.MIN_VALUE;
}
}

protected final void initERRESBK(String s) {
if (!s.trim().isEmpty()) {
ERRESBK = Byte.parseByte(s);
} else {
ERRESBK = Byte.MIN_VALUE;
}
}

protected final void initERRESBK2(String s) {
if (!s.trim().isEmpty()) {
ERRESBK2 = Byte.parseByte(s);
} else {
ERRESBK2 = Byte.MIN_VALUE;
}
}

protected final void initERRESBK3(String s) {
if (!s.trim().isEmpty()) {
ERRESBK3 = Byte.parseByte(s);
} else {
ERRESBK3 = Byte.MIN_VALUE;
}
}

protected final void initERRESCK(String s) {
if (!s.trim().isEmpty()) {
ERRESCK = Byte.parseByte(s);
} else {
ERRESCK = Byte.MIN_VALUE;
}
}

protected final void initERRESERB1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
ERRESERB1 = false;
} else {
ERRESERB1 = true;
}
}
}

protected final void initERRESERB2(String s) {
if (!s.trim().isEmpty()) {
ERRESERB2 = Byte.parseByte(s);
} else {
ERRESERB2 = Byte.MIN_VALUE;
}
}

protected final void initERRESERB3(String s) {
if (!s.trim().isEmpty()) {
ERRESERB3 = Byte.parseByte(s);
} else {
ERRESERB3 = Byte.MIN_VALUE;
}
}

protected final void initERRESERD1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
ERRESERD1 = false;
} else {
ERRESERD1 = true;
}
}
}

protected final void initERRESERD2(String s) {
if (!s.trim().isEmpty()) {
ERRESERD2 = Byte.parseByte(s);
} else {
ERRESERD2 = Byte.MIN_VALUE;
}
}

protected final void initERRESERD3(String s) {
if (!s.trim().isEmpty()) {
ERRESERD3 = Byte.parseByte(s);
} else {
ERRESERD3 = Byte.MIN_VALUE;
}
}

protected final void initERRESERH1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
ERRESERH1 = false;
} else {
ERRESERH1 = true;
}
}
}

protected final void initERRESERH2(String s) {
if (!s.trim().isEmpty()) {
ERRESERH2 = Byte.parseByte(s);
} else {
ERRESERH2 = Byte.MIN_VALUE;
}
}

protected final void initERRESERH3(String s) {
if (!s.trim().isEmpty()) {
ERRESERH3 = Byte.parseByte(s);
} else {
ERRESERH3 = Byte.MIN_VALUE;
}
}

protected final void initERRESERI1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
ERRESERI1 = false;
} else {
ERRESERI1 = true;
}
}
}

protected final void initERRESERI2(String s) {
if (!s.trim().isEmpty()) {
ERRESERI2 = Byte.parseByte(s);
} else {
ERRESERI2 = Byte.MIN_VALUE;
}
}

protected final void initERRESERI3(String s) {
if (!s.trim().isEmpty()) {
ERRESERI3 = Byte.parseByte(s);
} else {
ERRESERI3 = Byte.MIN_VALUE;
}
}

protected final void initERRESERN1(String s) {
if (!s.trim().isEmpty()) {
ERRESERN1 = Byte.parseByte(s);
} else {
ERRESERN1 = Byte.MIN_VALUE;
}
}

protected final void initERRESERN2(String s) {
if (!s.trim().isEmpty()) {
ERRESERN2 = Byte.parseByte(s);
} else {
ERRESERN2 = Byte.MIN_VALUE;
}
}

protected final void initERRESERN3(String s) {
if (!s.trim().isEmpty()) {
ERRESERN3 = Byte.parseByte(s);
} else {
ERRESERN3 = Byte.MIN_VALUE;
}
}

protected final void initERRESERO1(String s) {
if (!s.trim().isEmpty()) {
ERRESERO1 = Byte.parseByte(s);
} else {
ERRESERO1 = Byte.MIN_VALUE;
}
}

protected final void initERRESERO2(String s) {
if (!s.trim().isEmpty()) {
ERRESERO2 = Byte.parseByte(s);
} else {
ERRESERO2 = Byte.MIN_VALUE;
}
}

protected final void initERRESERO3(String s) {
if (!s.trim().isEmpty()) {
ERRESERO3 = Byte.parseByte(s);
} else {
ERRESERO3 = Byte.MIN_VALUE;
}
}

protected final void initERRESERS1(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
ERRESERS1 = false;
} else {
ERRESERS1 = true;
}
}
}

protected final void initERRESERS2(String s) {
if (!s.trim().isEmpty()) {
ERRESERS2 = Byte.parseByte(s);
} else {
ERRESERS2 = Byte.MIN_VALUE;
}
}

protected final void initERRESERS3(String s) {
if (!s.trim().isEmpty()) {
ERRESERS3 = Byte.parseByte(s);
} else {
ERRESERS3 = Byte.MIN_VALUE;
}
}

protected final void initERRESNM(String s) {
if (!s.trim().isEmpty()) {
ERRESNM = Byte.parseByte(s);
} else {
ERRESNM = Byte.MIN_VALUE;
}
}

protected final void initERRESOF(String s) {
if (!s.trim().isEmpty()) {
ERRESOF = Byte.parseByte(s);
} else {
ERRESOF = Byte.MIN_VALUE;
}
}

protected final void initERRESON(String s) {
if (!s.trim().isEmpty()) {
ERRESON = Byte.parseByte(s);
} else {
ERRESON = Byte.MIN_VALUE;
}
}

protected final void initERRESRY(String s) {
if (!s.trim().isEmpty()) {
ERRESRY = Byte.parseByte(s);
} else {
ERRESRY = Byte.MIN_VALUE;
}
}

protected final void initERRESRY2(String s) {
if (!s.trim().isEmpty()) {
ERRESRY2 = Byte.parseByte(s);
} else {
ERRESRY2 = Byte.MIN_VALUE;
}
}

protected final void initERRESRY3(String s) {
if (!s.trim().isEmpty()) {
ERRESRY3 = Byte.parseByte(s);
} else {
ERRESRY3 = Byte.MIN_VALUE;
}
}

protected final void initERVOLA(String s) {
if (!s.trim().isEmpty()) {
ERVOLA = Byte.parseByte(s);
} else {
ERVOLA = Byte.MIN_VALUE;
}
}

protected final void initERVOLB(String s) {
if (!s.trim().isEmpty()) {
ERVOLB = Byte.parseByte(s);
} else {
ERVOLB = Byte.MIN_VALUE;
}
}

protected final void initESA_P_F(String s) {
if (!s.trim().isEmpty()) {
ESA_P_F = Byte.parseByte(s);
} else {
ESA_P_F = Byte.MIN_VALUE;
}
}

protected final void initESA_P_I(String s) {
if (!s.trim().isEmpty()) {
ESA_P_I = Double.parseDouble(s);
} else {
ESA_P_I = Double.NaN;
}
}

protected final void initESA_P_O(String s) {
if (!s.trim().isEmpty()) {
ESA_P_O = Short.parseShort(s);
} else {
ESA_P_O = Short.MIN_VALUE;
}
}

protected final void initESA_P_T(String s) {
if (!s.trim().isEmpty()) {
ESA_P_T = Short.parseShort(s);
} else {
ESA_P_T = Short.MIN_VALUE;
}
}

protected final void initESA_R_F(String s) {
if (!s.trim().isEmpty()) {
ESA_R_F = Byte.parseByte(s);
} else {
ESA_R_F = Byte.MIN_VALUE;
}
}

protected final void initESA_R_I(String s) {
if (!s.trim().isEmpty()) {
ESA_R_I = Double.parseDouble(s);
} else {
ESA_R_I = Double.NaN;
}
}

protected final void initESA_R_O(String s) {
if (!s.trim().isEmpty()) {
ESA_R_O = Short.parseShort(s);
} else {
ESA_R_O = Short.MIN_VALUE;
}
}

protected final void initESA_R_T(String s) {
if (!s.trim().isEmpty()) {
ESA_R_T = Short.parseShort(s);
} else {
ESA_R_T = Short.MIN_VALUE;
}
}

protected final void initESTWT(String s) {
if (!s.trim().isEmpty()) {
ESTWT = Double.parseDouble(s);
} else {
ESTWT = Double.NaN;
}
}

protected final void initEWTCH(String s) {
if (!s.trim().isEmpty()) {
EWTCH = Byte.parseByte(s);
} else {
EWTCH = Byte.MIN_VALUE;
}
}

protected final void initEWTKG(String s) {
if (!s.trim().isEmpty()) {
EWTKG = Double.parseDouble(s);
} else {
EWTKG = Double.NaN;
}
}

protected final void initEWTL(String s) {
if (!s.trim().isEmpty()) {
EWTL = Byte.parseByte(s);
} else {
EWTL = Byte.MIN_VALUE;
}
}

protected final void initEWTST(String s) {
if (!s.trim().isEmpty()) {
EWTST = Byte.parseByte(s);
} else {
EWTST = Byte.MIN_VALUE;
}
}

protected final void initEXCFV(String s) {
if (!s.trim().isEmpty()) {
EXCFV = Byte.parseByte(s);
} else {
EXCFV = Byte.MIN_VALUE;
}
}

protected final void initEXCND(String s) {
if (!s.trim().isEmpty()) {
EXCND = Byte.parseByte(s);
} else {
EXCND = Byte.MIN_VALUE;
}
}

protected final void initEXCPLN85(String s) {
if (!s.trim().isEmpty()) {
EXCPLN85 = Byte.parseByte(s);
} else {
EXCPLN85 = Byte.MIN_VALUE;
}
}

protected final void initEXCPLN86(String s) {
if (!s.trim().isEmpty()) {
EXCPLN86 = Byte.parseByte(s);
} else {
EXCPLN86 = Byte.MIN_VALUE;
}
}

protected final void initEXCPLN96(String s) {
if (!s.trim().isEmpty()) {
EXCPLN96 = Byte.parseByte(s);
} else {
EXCPLN96 = Byte.MIN_VALUE;
}
}

protected final void initEXCPLNFA(String s) {
if (!s.trim().isEmpty()) {
EXCPLNFA = Byte.parseByte(s);
} else {
EXCPLNFA = Byte.MIN_VALUE;
}
}

protected final void initEXCPLNIN(String s) {
if (!s.trim().isEmpty()) {
EXCPLNIN = Byte.parseByte(s);
} else {
EXCPLNIN = Byte.MIN_VALUE;
}
}

protected final void initEXCPLNIV(String s) {
if (!s.trim().isEmpty()) {
EXCPLNIV = Byte.parseByte(s);
} else {
EXCPLNIV = Byte.MIN_VALUE;
}
}

protected final void initEXCPLNOT(String s) {
if (!s.trim().isEmpty()) {
EXCPLNOT = Byte.parseByte(s);
} else {
EXCPLNOT = Byte.MIN_VALUE;
}
}

protected final void initEXCPLNPR(String s) {
if (!s.trim().isEmpty()) {
EXCPLNPR = Byte.parseByte(s);
} else {
EXCPLNPR = Byte.MIN_VALUE;
}
}

protected final void initEXCPLNSA(String s) {
if (!s.trim().isEmpty()) {
EXCPLNSA = Byte.parseByte(s);
} else {
EXCPLNSA = Byte.MIN_VALUE;
}
}

protected final void initEXCPLNTR(String s) {
if (!s.trim().isEmpty()) {
EXCPLNTR = Byte.parseByte(s);
} else {
EXCPLNTR = Byte.MIN_VALUE;
}
}

protected final void initEXLO90(String s) {
if (!s.trim().isEmpty()) {
EXLO90 = Byte.parseByte(s);
} else {
EXLO90 = Byte.MIN_VALUE;
}
}

protected final void initEXLTC5(String s) {
if (!s.trim().isEmpty()) {
EXLTC5 = Byte.parseByte(s);
} else {
EXLTC5 = Byte.MIN_VALUE;
}
}

protected final void initEXLTCEV(String s) {
if (!s.trim().isEmpty()) {
EXLTCEV = Byte.parseByte(s);
} else {
EXLTCEV = Byte.MIN_VALUE;
}
}

protected final void initEXMOVHA(String s) {
if (!s.trim().isEmpty()) {
EXMOVHA = Byte.parseByte(s);
} else {
EXMOVHA = Byte.MIN_VALUE;
}
}

protected final void initEXMOVNB(String s) {
if (!s.trim().isEmpty()) {
EXMOVNB = Byte.parseByte(s);
} else {
EXMOVNB = Byte.MIN_VALUE;
}
}

protected final void initEXNHEV(String s) {
if (!s.trim().isEmpty()) {
EXNHEV = Byte.parseByte(s);
} else {
EXNHEV = Byte.MIN_VALUE;
}
}

protected final void initEXPCC95(String s) {
if (!s.trim().isEmpty()) {
EXPCC95 = Byte.parseByte(s);
} else {
EXPCC95 = Byte.MIN_VALUE;
}
}

protected final void initEXPCC96(String s) {
if (!s.trim().isEmpty()) {
EXPCC96 = Byte.parseByte(s);
} else {
EXPCC96 = Byte.MIN_VALUE;
}
}

protected final void initEXPCCCH(String s) {
if (!s.trim().isEmpty()) {
EXPCCCH = Byte.parseByte(s);
} else {
EXPCCCH = Byte.MIN_VALUE;
}
}

protected final void initEXPCCHI(String s) {
if (!s.trim().isEmpty()) {
EXPCCHI = Byte.parseByte(s);
} else {
EXPCCHI = Byte.MIN_VALUE;
}
}

protected final void initEXPCCHS(String s) {
if (!s.trim().isEmpty()) {
EXPCCHS = Byte.parseByte(s);
} else {
EXPCCHS = Byte.MIN_VALUE;
}
}

protected final void initEXPCCIP(String s) {
if (!s.trim().isEmpty()) {
EXPCCIP = Byte.parseByte(s);
} else {
EXPCCIP = Byte.MIN_VALUE;
}
}

protected final void initEXPCCLA(String s) {
if (!s.trim().isEmpty()) {
EXPCCLA = Byte.parseByte(s);
} else {
EXPCCLA = Byte.MIN_VALUE;
}
}

protected final void initEXPCCOI(String s) {
if (!s.trim().isEmpty()) {
EXPCCOI = Byte.parseByte(s);
} else {
EXPCCOI = Byte.MIN_VALUE;
}
}

protected final void initEXPCCOS(String s) {
if (!s.trim().isEmpty()) {
EXPCCOS = Byte.parseByte(s);
} else {
EXPCCOS = Byte.MIN_VALUE;
}
}

protected final void initEXPCCRF(String s) {
if (!s.trim().isEmpty()) {
EXPCCRF = Byte.parseByte(s);
} else {
EXPCCRF = Byte.MIN_VALUE;
}
}

protected final void initEXPCCSA(String s) {
if (!s.trim().isEmpty()) {
EXPCCSA = Byte.parseByte(s);
} else {
EXPCCSA = Byte.MIN_VALUE;
}
}

protected final void initEXPCCSB(String s) {
if (!s.trim().isEmpty()) {
EXPCCSB = Byte.parseByte(s);
} else {
EXPCCSB = Byte.MIN_VALUE;
}
}

protected final void initEXPCHR(String s) {
if (!s.trim().isEmpty()) {
EXPCHR = Byte.parseByte(s);
} else {
EXPCHR = Byte.MIN_VALUE;
}
}

protected final void initEXPCK(String s) {
if (!s.trim().isEmpty()) {
EXPCK = Byte.parseByte(s);
} else {
EXPCK = Byte.MIN_VALUE;
}
}

protected final void initEXPCLM(String s) {
if (!s.trim().isEmpty()) {
EXPCLM = Byte.parseByte(s);
} else {
EXPCLM = Byte.MIN_VALUE;
}
}

protected final void initEXPFC95(String s) {
if (!s.trim().isEmpty()) {
EXPFC95 = Byte.parseByte(s);
} else {
EXPFC95 = Byte.MIN_VALUE;
}
}

protected final void initEXPFC96(String s) {
if (!s.trim().isEmpty()) {
EXPFC96 = Byte.parseByte(s);
} else {
EXPFC96 = Byte.MIN_VALUE;
}
}

protected final void initEXPFCCH(String s) {
if (!s.trim().isEmpty()) {
EXPFCCH = Byte.parseByte(s);
} else {
EXPFCCH = Byte.MIN_VALUE;
}
}

protected final void initEXPFCHI(String s) {
if (!s.trim().isEmpty()) {
EXPFCHI = Byte.parseByte(s);
} else {
EXPFCHI = Byte.MIN_VALUE;
}
}

protected final void initEXPFCHS(String s) {
if (!s.trim().isEmpty()) {
EXPFCHS = Byte.parseByte(s);
} else {
EXPFCHS = Byte.MIN_VALUE;
}
}

protected final void initEXPFCIP(String s) {
if (!s.trim().isEmpty()) {
EXPFCIP = Byte.parseByte(s);
} else {
EXPFCIP = Byte.MIN_VALUE;
}
}

protected final void initEXPFCLA(String s) {
if (!s.trim().isEmpty()) {
EXPFCLA = Byte.parseByte(s);
} else {
EXPFCLA = Byte.MIN_VALUE;
}
}

protected final void initEXPFCOI(String s) {
if (!s.trim().isEmpty()) {
EXPFCOI = Byte.parseByte(s);
} else {
EXPFCOI = Byte.MIN_VALUE;
}
}

protected final void initEXPFCOS(String s) {
if (!s.trim().isEmpty()) {
EXPFCOS = Byte.parseByte(s);
} else {
EXPFCOS = Byte.MIN_VALUE;
}
}

protected final void initEXPFCRF(String s) {
if (!s.trim().isEmpty()) {
EXPFCRF = Byte.parseByte(s);
} else {
EXPFCRF = Byte.MIN_VALUE;
}
}

protected final void initEXPFCSA(String s) {
if (!s.trim().isEmpty()) {
EXPFCSA = Byte.parseByte(s);
} else {
EXPFCSA = Byte.MIN_VALUE;
}
}

protected final void initEXPFCSB(String s) {
if (!s.trim().isEmpty()) {
EXPFCSB = Byte.parseByte(s);
} else {
EXPFCSB = Byte.MIN_VALUE;
}
}

protected final void initEXPWF(String s) {
if (!s.trim().isEmpty()) {
EXPWF = Byte.parseByte(s);
} else {
EXPWF = Byte.MIN_VALUE;
}
}

protected final void initEXRELA(String s) {
if (!s.trim().isEmpty()) {
EXRELA = Byte.parseByte(s);
} else {
EXRELA = Byte.MIN_VALUE;
}
}

protected final void initEXRELE96(String s) {
if (!s.trim().isEmpty()) {
EXRELE96 = Byte.parseByte(s);
} else {
EXRELE96 = Byte.MIN_VALUE;
}
}

protected final void initEXRELEDE(String s) {
if (!s.trim().isEmpty()) {
EXRELEDE = Byte.parseByte(s);
} else {
EXRELEDE = Byte.MIN_VALUE;
}
}

protected final void initEXRELEEL(String s) {
if (!s.trim().isEmpty()) {
EXRELEEL = Byte.parseByte(s);
} else {
EXRELEEL = Byte.MIN_VALUE;
}
}

protected final void initEXRELEFA(String s) {
if (!s.trim().isEmpty()) {
EXRELEFA = Byte.parseByte(s);
} else {
EXRELEFA = Byte.MIN_VALUE;
}
}

protected final void initEXRELEFO(String s) {
if (!s.trim().isEmpty()) {
EXRELEFO = Byte.parseByte(s);
} else {
EXRELEFO = Byte.MIN_VALUE;
}
}

protected final void initEXRELEHO(String s) {
if (!s.trim().isEmpty()) {
EXRELEHO = Byte.parseByte(s);
} else {
EXRELEHO = Byte.MIN_VALUE;
}
}

protected final void initEXRELEME(String s) {
if (!s.trim().isEmpty()) {
EXRELEME = Byte.parseByte(s);
} else {
EXRELEME = Byte.MIN_VALUE;
}
}

protected final void initEXRELEOU(String s) {
if (!s.trim().isEmpty()) {
EXRELEOU = Byte.parseByte(s);
} else {
EXRELEOU = Byte.MIN_VALUE;
}
}

protected final void initEXRELEPR(String s) {
if (!s.trim().isEmpty()) {
EXRELEPR = Byte.parseByte(s);
} else {
EXRELEPR = Byte.MIN_VALUE;
}
}

protected final void initEXRELETR(String s) {
if (!s.trim().isEmpty()) {
EXRELETR = Byte.parseByte(s);
} else {
EXRELETR = Byte.MIN_VALUE;
}
}

protected final void initEXSCEV(String s) {
if (!s.trim().isEmpty()) {
EXSCEV = Byte.parseByte(s);
} else {
EXSCEV = Byte.MIN_VALUE;
}
}

protected final void initFASTASK(String s) {
if (!s.trim().isEmpty()) {
FASTASK = Byte.parseByte(s);
} else {
FASTASK = Byte.MIN_VALUE;
}
}

protected final void initFASTELIG(String s) {
if (!s.trim().isEmpty()) {
FASTELIG = Byte.parseByte(s);
} else {
FASTELIG = Byte.MIN_VALUE;
}
}

protected final void initFFERROR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
FFERROR = false;
} else {
FFERROR = true;
}
}
}

protected final void initFGLU(String s) {
if (!s.trim().isEmpty()) {
FGLU = Double.parseDouble(s);
} else {
FGLU = Double.NaN;
}
}

protected final void initFINSTAT(String s) {
if (!s.trim().isEmpty()) {
FINSTAT = s;
}
}

protected final void initFIT(String s) {
if (!s.trim().isEmpty()) {
FIT = Byte.parseByte(s);
} else {
FIT = Byte.MIN_VALUE;
}
}

protected final void initFLOORC(String s) {
if (!s.trim().isEmpty()) {
FLOORC = Byte.parseByte(s);
} else {
FLOORC = Byte.MIN_VALUE;
}
}

protected final void initFQAQUA(String s) {
if (!s.trim().isEmpty()) {
FQAQUA = Byte.parseByte(s);
} else {
FQAQUA = Byte.MIN_VALUE;
}
}

protected final void initFQCBTHMR(String s) {
if (!s.trim().isEmpty()) {
FQCBTHMR = Byte.parseByte(s);
} else {
FQCBTHMR = Byte.MIN_VALUE;
}
}

protected final void initFQCENGM(String s) {
if (!s.trim().isEmpty()) {
FQCENGM = Short.parseShort(s);
} else {
FQCENGM = Short.MIN_VALUE;
}
}

protected final void initFQENDM(String s) {
if (!s.trim().isEmpty()) {
FQENDM = Byte.parseByte(s);
} else {
FQENDM = Byte.MIN_VALUE;
}
}

protected final void initFQETHNMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
FQETHNMR = false;
} else {
FQETHNMR = true;
}
}
}

protected final void initFQNURRF85(String s) {
if (!s.trim().isEmpty()) {
FQNURRF85 = Byte.parseByte(s);
} else {
FQNURRF85 = Byte.MIN_VALUE;
}
}

protected final void initFQNURRF86(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
FQNURRF86 = false;
} else {
FQNURRF86 = true;
}
}
}

protected final void initFQNURRFBU(String s) {
if (!s.trim().isEmpty()) {
FQNURRFBU = Byte.parseByte(s);
} else {
FQNURRFBU = Byte.MIN_VALUE;
}
}

protected final void initFQNURRFEN(String s) {
if (!s.trim().isEmpty()) {
FQNURRFEN = Byte.parseByte(s);
} else {
FQNURRFEN = Byte.MIN_VALUE;
}
}

protected final void initFQNURRFEX(String s) {
if (!s.trim().isEmpty()) {
FQNURRFEX = Byte.parseByte(s);
} else {
FQNURRFEX = Byte.MIN_VALUE;
}
}

protected final void initFQNURRFNO(String s) {
if (!s.trim().isEmpty()) {
FQNURRFNO = Byte.parseByte(s);
} else {
FQNURRFNO = Byte.MIN_VALUE;
}
}

protected final void initFQNURRFOD(String s) {
if (!s.trim().isEmpty()) {
FQNURRFOD = Byte.parseByte(s);
} else {
FQNURRFOD = Byte.MIN_VALUE;
}
}

protected final void initFQNURRFSC(String s) {
if (!s.trim().isEmpty()) {
FQNURRFSC = Byte.parseByte(s);
} else {
FQNURRFSC = Byte.MIN_VALUE;
}
}

protected final void initFQNURRFWO(String s) {
if (!s.trim().isEmpty()) {
FQNURRFWO = Byte.parseByte(s);
} else {
FQNURRFWO = Byte.MIN_VALUE;
}
}

protected final void initFQNURSE(String s) {
if (!s.trim().isEmpty()) {
FQNURSE = Byte.parseByte(s);
} else {
FQNURSE = Byte.MIN_VALUE;
}
}

protected final void initFQQUA95(String s) {
if (!s.trim().isEmpty()) {
FQQUA95 = Byte.parseByte(s);
} else {
FQQUA95 = Byte.MIN_VALUE;
}
}

protected final void initFQQUAALE(String s) {
if (!s.trim().isEmpty()) {
FQQUAALE = Byte.parseByte(s);
} else {
FQQUAALE = Byte.MIN_VALUE;
}
}

protected final void initFQQUAASL(String s) {
if (!s.trim().isEmpty()) {
FQQUAASL = Byte.parseByte(s);
} else {
FQQUAASL = Byte.MIN_VALUE;
}
}

protected final void initFQQUACGA(String s) {
if (!s.trim().isEmpty()) {
FQQUACGA = Byte.parseByte(s);
} else {
FQQUACGA = Byte.MIN_VALUE;
}
}

protected final void initFQQUACGF(String s) {
if (!s.trim().isEmpty()) {
FQQUACGF = Byte.parseByte(s);
} else {
FQQUACGF = Byte.MIN_VALUE;
}
}

protected final void initFQQUACGO(String s) {
if (!s.trim().isEmpty()) {
FQQUACGO = Byte.parseByte(s);
} else {
FQQUACGO = Byte.MIN_VALUE;
}
}

protected final void initFQQUACLE(String s) {
if (!s.trim().isEmpty()) {
FQQUACLE = Byte.parseByte(s);
} else {
FQQUACLE = Byte.MIN_VALUE;
}
}

protected final void initFQQUACS1(String s) {
if (!s.trim().isEmpty()) {
FQQUACS1 = Byte.parseByte(s);
} else {
FQQUACS1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUACS2(String s) {
if (!s.trim().isEmpty()) {
FQQUACS2 = Byte.parseByte(s);
} else {
FQQUACS2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUACSU(String s) {
if (!s.trim().isEmpty()) {
FQQUACSU = Byte.parseByte(s);
} else {
FQQUACSU = Byte.MIN_VALUE;
}
}

protected final void initFQQUADEG(String s) {
if (!s.trim().isEmpty()) {
FQQUADEG = Byte.parseByte(s);
} else {
FQQUADEG = Byte.MIN_VALUE;
}
}

protected final void initFQQUAGCA(String s) {
if (!s.trim().isEmpty()) {
FQQUAGCA = Byte.parseByte(s);
} else {
FQQUAGCA = Byte.MIN_VALUE;
}
}

protected final void initFQQUAGCD(String s) {
if (!s.trim().isEmpty()) {
FQQUAGCD = Byte.parseByte(s);
} else {
FQQUAGCD = Byte.MIN_VALUE;
}
}

protected final void initFQQUAHNC(String s) {
if (!s.trim().isEmpty()) {
FQQUAHNC = Byte.parseByte(s);
} else {
FQQUAHNC = Byte.MIN_VALUE;
}
}

protected final void initFQQUAMAT(String s) {
if (!s.trim().isEmpty()) {
FQQUAMAT = Byte.parseByte(s);
} else {
FQQUAMAT = Byte.MIN_VALUE;
}
}

protected final void initFQQUANUR(String s) {
if (!s.trim().isEmpty()) {
FQQUANUR = Byte.parseByte(s);
} else {
FQQUANUR = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV1(String s) {
if (!s.trim().isEmpty()) {
FQQUANV1 = Byte.parseByte(s);
} else {
FQQUANV1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV2(String s) {
if (!s.trim().isEmpty()) {
FQQUANV2 = Byte.parseByte(s);
} else {
FQQUANV2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV3(String s) {
if (!s.trim().isEmpty()) {
FQQUANV3 = Byte.parseByte(s);
} else {
FQQUANV3 = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV4(String s) {
if (!s.trim().isEmpty()) {
FQQUANV4 = Byte.parseByte(s);
} else {
FQQUANV4 = Byte.MIN_VALUE;
}
}

protected final void initFQQUANV5(String s) {
if (!s.trim().isEmpty()) {
FQQUANV5 = Byte.parseByte(s);
} else {
FQQUANV5 = Byte.MIN_VALUE;
}
}

protected final void initFQQUAOLA(String s) {
if (!s.trim().isEmpty()) {
FQQUAOLA = Byte.parseByte(s);
} else {
FQQUAOLA = Byte.MIN_VALUE;
}
}

protected final void initFQQUAOLD(String s) {
if (!s.trim().isEmpty()) {
FQQUAOLD = Byte.parseByte(s);
} else {
FQQUAOLD = Byte.MIN_VALUE;
}
}

protected final void initFQQUAOLP(String s) {
if (!s.trim().isEmpty()) {
FQQUAOLP = Byte.parseByte(s);
} else {
FQQUAOLP = Byte.MIN_VALUE;
}
}

protected final void initFQQUAONC(String s) {
if (!s.trim().isEmpty()) {
FQQUAONC = Byte.parseByte(s);
} else {
FQQUAONC = Byte.MIN_VALUE;
}
}

protected final void initFQQUASLC(String s) {
if (!s.trim().isEmpty()) {
FQQUASLC = Byte.parseByte(s);
} else {
FQQUASLC = Byte.MIN_VALUE;
}
}

protected final void initFQQUASLL(String s) {
if (!s.trim().isEmpty()) {
FQQUASLL = Byte.parseByte(s);
} else {
FQQUASLL = Byte.MIN_VALUE;
}
}

protected final void initFQQUASUP(String s) {
if (!s.trim().isEmpty()) {
FQQUASUP = Byte.parseByte(s);
} else {
FQQUASUP = Byte.MIN_VALUE;
}
}

protected final void initFQQUATEA(String s) {
if (!s.trim().isEmpty()) {
FQQUATEA = Byte.parseByte(s);
} else {
FQQUATEA = Byte.MIN_VALUE;
}
}

protected final void initFQQUATRA(String s) {
if (!s.trim().isEmpty()) {
FQQUATRA = Byte.parseByte(s);
} else {
FQQUATRA = Byte.MIN_VALUE;
}
}

protected final void initFQQUM85(String s) {
if (!s.trim().isEmpty()) {
FQQUM85 = Byte.parseByte(s);
} else {
FQQUM85 = Byte.MIN_VALUE;
}
}

protected final void initFQQUM86(String s) {
if (!s.trim().isEmpty()) {
FQQUM86 = Byte.parseByte(s);
} else {
FQQUM86 = Byte.MIN_VALUE;
}
}

protected final void initFQQUM96(String s) {
if (!s.trim().isEmpty()) {
FQQUM96 = Byte.parseByte(s);
} else {
FQQUM96 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMALE(String s) {
if (!s.trim().isEmpty()) {
FQQUMALE = Byte.parseByte(s);
} else {
FQQUMALE = Byte.MIN_VALUE;
}
}

protected final void initFQQUMASL(String s) {
if (!s.trim().isEmpty()) {
FQQUMASL = Byte.parseByte(s);
} else {
FQQUMASL = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCGA(String s) {
if (!s.trim().isEmpty()) {
FQQUMCGA = Byte.parseByte(s);
} else {
FQQUMCGA = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCGF(String s) {
if (!s.trim().isEmpty()) {
FQQUMCGF = Byte.parseByte(s);
} else {
FQQUMCGF = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCGO(String s) {
if (!s.trim().isEmpty()) {
FQQUMCGO = Byte.parseByte(s);
} else {
FQQUMCGO = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCLE(String s) {
if (!s.trim().isEmpty()) {
FQQUMCLE = Byte.parseByte(s);
} else {
FQQUMCLE = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCS1(String s) {
if (!s.trim().isEmpty()) {
FQQUMCS1 = Byte.parseByte(s);
} else {
FQQUMCS1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCS2(String s) {
if (!s.trim().isEmpty()) {
FQQUMCS2 = Byte.parseByte(s);
} else {
FQQUMCS2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMCSU(String s) {
if (!s.trim().isEmpty()) {
FQQUMCSU = Byte.parseByte(s);
} else {
FQQUMCSU = Byte.MIN_VALUE;
}
}

protected final void initFQQUMDEG(String s) {
if (!s.trim().isEmpty()) {
FQQUMDEG = Byte.parseByte(s);
} else {
FQQUMDEG = Byte.MIN_VALUE;
}
}

protected final void initFQQUMDIP(String s) {
if (!s.trim().isEmpty()) {
FQQUMDIP = Byte.parseByte(s);
} else {
FQQUMDIP = Byte.MIN_VALUE;
}
}

protected final void initFQQUMFOR(String s) {
if (!s.trim().isEmpty()) {
FQQUMFOR = Byte.parseByte(s);
} else {
FQQUMFOR = Byte.MIN_VALUE;
}
}

protected final void initFQQUMGCA(String s) {
if (!s.trim().isEmpty()) {
FQQUMGCA = Byte.parseByte(s);
} else {
FQQUMGCA = Byte.MIN_VALUE;
}
}

protected final void initFQQUMGCD(String s) {
if (!s.trim().isEmpty()) {
FQQUMGCD = Byte.parseByte(s);
} else {
FQQUMGCD = Byte.MIN_VALUE;
}
}

protected final void initFQQUMHNC(String s) {
if (!s.trim().isEmpty()) {
FQQUMHNC = Byte.parseByte(s);
} else {
FQQUMHNC = Byte.MIN_VALUE;
}
}

protected final void initFQQUMMAT(String s) {
if (!s.trim().isEmpty()) {
FQQUMMAT = Byte.parseByte(s);
} else {
FQQUMMAT = Byte.MIN_VALUE;
}
}

protected final void initFQQUMMIL(String s) {
if (!s.trim().isEmpty()) {
FQQUMMIL = Byte.parseByte(s);
} else {
FQQUMMIL = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNNE(String s) {
if (!s.trim().isEmpty()) {
FQQUMNNE = Byte.parseByte(s);
} else {
FQQUMNNE = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNUR(String s) {
if (!s.trim().isEmpty()) {
FQQUMNUR = Byte.parseByte(s);
} else {
FQQUMNUR = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV1(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV1 = Byte.parseByte(s);
} else {
FQQUMNV1 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV2(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV2 = Byte.parseByte(s);
} else {
FQQUMNV2 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV3(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV3 = Byte.parseByte(s);
} else {
FQQUMNV3 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV4(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV4 = Byte.parseByte(s);
} else {
FQQUMNV4 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNV5(String s) {
if (!s.trim().isEmpty()) {
FQQUMNV5 = Byte.parseByte(s);
} else {
FQQUMNV5 = Byte.MIN_VALUE;
}
}

protected final void initFQQUMNVZ(String s) {
if (!s.trim().isEmpty()) {
FQQUMNVZ = Byte.parseByte(s);
} else {
FQQUMNVZ = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOAC(String s) {
if (!s.trim().isEmpty()) {
FQQUMOAC = Byte.parseByte(s);
} else {
FQQUMOAC = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOLA(String s) {
if (!s.trim().isEmpty()) {
FQQUMOLA = Byte.parseByte(s);
} else {
FQQUMOLA = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOLD(String s) {
if (!s.trim().isEmpty()) {
FQQUMOLD = Byte.parseByte(s);
} else {
FQQUMOLD = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOLP(String s) {
if (!s.trim().isEmpty()) {
FQQUMOLP = Byte.parseByte(s);
} else {
FQQUMOLP = Byte.MIN_VALUE;
}
}

protected final void initFQQUMONC(String s) {
if (!s.trim().isEmpty()) {
FQQUMONC = Byte.parseByte(s);
} else {
FQQUMONC = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOPR(String s) {
if (!s.trim().isEmpty()) {
FQQUMOPR = Byte.parseByte(s);
} else {
FQQUMOPR = Byte.MIN_VALUE;
}
}

protected final void initFQQUMOVO(String s) {
if (!s.trim().isEmpty()) {
FQQUMOVO = Byte.parseByte(s);
} else {
FQQUMOVO = Byte.MIN_VALUE;
}
}

protected final void initFQQUMSLC(String s) {
if (!s.trim().isEmpty()) {
FQQUMSLC = Byte.parseByte(s);
} else {
FQQUMSLC = Byte.MIN_VALUE;
}
}

protected final void initFQQUMSLL(String s) {
if (!s.trim().isEmpty()) {
FQQUMSLL = Byte.parseByte(s);
} else {
FQQUMSLL = Byte.MIN_VALUE;
}
}

protected final void initFQQUMSUP(String s) {
if (!s.trim().isEmpty()) {
FQQUMSUP = Byte.parseByte(s);
} else {
FQQUMSUP = Byte.MIN_VALUE;
}
}

protected final void initFQQUMTEA(String s) {
if (!s.trim().isEmpty()) {
FQQUMTEA = Byte.parseByte(s);
} else {
FQQUMTEA = Byte.MIN_VALUE;
}
}

protected final void initFQQUMTRA(String s) {
if (!s.trim().isEmpty()) {
FQQUMTRA = Byte.parseByte(s);
} else {
FQQUMTRA = Byte.MIN_VALUE;
}
}

protected final void initFULL1(String s) {
if (!s.trim().isEmpty()) {
FULL1 = Byte.parseByte(s);
} else {
FULL1 = Byte.MIN_VALUE;
}
}

protected final void initFULL2(String s) {
if (!s.trim().isEmpty()) {
FULL2 = Byte.parseByte(s);
} else {
FULL2 = Byte.MIN_VALUE;
}
}

protected final void initFULL3(String s) {
if (!s.trim().isEmpty()) {
FULL3 = Byte.parseByte(s);
} else {
FULL3 = Byte.MIN_VALUE;
}
}

protected final void initGCINHH(String s) {
if (!s.trim().isEmpty()) {
GCINHH = Byte.parseByte(s);
} else {
GCINHH = Byte.MIN_VALUE;
}
}

protected final void initHBA1C(String s) {
if (!s.trim().isEmpty()) {
HBA1C = Double.parseDouble(s);
} else {
HBA1C = Double.NaN;
}
}

protected final void initHDL(String s) {
if (!s.trim().isEmpty()) {
HDL = Double.parseDouble(s);
} else {
HDL = Double.NaN;
}
}

protected final void initHEACD(String s) {
if (!s.trim().isEmpty()) {
HEACD = Byte.parseByte(s);
} else {
HEACD = Byte.MIN_VALUE;
}
}

protected final void initHEACE(String s) {
if (!s.trim().isEmpty()) {
HEACE = Byte.parseByte(s);
} else {
HEACE = Byte.MIN_VALUE;
}
}

protected final void initHEACEA(String s) {
if (!s.trim().isEmpty()) {
HEACEA = Byte.parseByte(s);
} else {
HEACEA = Byte.MIN_VALUE;
}
}

protected final void initHEADLSP(String s) {
if (!s.trim().isEmpty()) {
HEADLSP = Byte.parseByte(s);
} else {
HEADLSP = Byte.MIN_VALUE;
}
}

protected final void initHEAGGS(String s) {
if (!s.trim().isEmpty()) {
HEAGGS = Byte.parseByte(s);
} else {
HEAGGS = Byte.MIN_VALUE;
}
}

protected final void initHEAGHS(String s) {
if (!s.trim().isEmpty()) {
HEAGHS = Byte.parseByte(s);
} else {
HEAGHS = Byte.MIN_VALUE;
}
}

protected final void initHEAID96(String s) {
if (!s.trim().isEmpty()) {
HEAID96 = Byte.parseByte(s);
} else {
HEAID96 = Byte.MIN_VALUE;
}
}

protected final void initHEAIDAL(String s) {
if (!s.trim().isEmpty()) {
HEAIDAL = Byte.parseByte(s);
} else {
HEAIDAL = Byte.MIN_VALUE;
}
}

protected final void initHEAIDBU(String s) {
if (!s.trim().isEmpty()) {
HEAIDBU = Byte.parseByte(s);
} else {
HEAIDBU = Byte.MIN_VALUE;
}
}

protected final void initHEAIDCA(String s) {
if (!s.trim().isEmpty()) {
HEAIDCA = Byte.parseByte(s);
} else {
HEAIDCA = Byte.MIN_VALUE;
}
}

protected final void initHEAIDCR(String s) {
if (!s.trim().isEmpty()) {
HEAIDCR = Byte.parseByte(s);
} else {
HEAIDCR = Byte.MIN_VALUE;
}
}

protected final void initHEAIDEA(String s) {
if (!s.trim().isEmpty()) {
HEAIDEA = Byte.parseByte(s);
} else {
HEAIDEA = Byte.MIN_VALUE;
}
}

protected final void initHEAIDEW(String s) {
if (!s.trim().isEmpty()) {
HEAIDEW = Byte.parseByte(s);
} else {
HEAIDEW = Byte.MIN_VALUE;
}
}

protected final void initHEAIDMW(String s) {
if (!s.trim().isEmpty()) {
HEAIDMW = Byte.parseByte(s);
} else {
HEAIDMW = Byte.MIN_VALUE;
}
}

protected final void initHEAIDZI(String s) {
if (!s.trim().isEmpty()) {
HEAIDZI = Byte.parseByte(s);
} else {
HEAIDZI = Byte.MIN_VALUE;
}
}

protected final void initHEALCH(String s) {
if (!s.trim().isEmpty()) {
HEALCH = Byte.parseByte(s);
} else {
HEALCH = Byte.MIN_VALUE;
}
}

protected final void initHEALCOV(String s) {
if (!s.trim().isEmpty()) {
HEALCOV = Byte.parseByte(s);
} else {
HEALCOV = Byte.MIN_VALUE;
}
}

protected final void initHEALM85(String s) {
if (!s.trim().isEmpty()) {
HEALM85 = Byte.parseByte(s);
} else {
HEALM85 = Byte.MIN_VALUE;
}
}

protected final void initHEALM86(String s) {
if (!s.trim().isEmpty()) {
HEALM86 = Byte.parseByte(s);
} else {
HEALM86 = Byte.MIN_VALUE;
}
}

protected final void initHEALMCH(String s) {
if (!s.trim().isEmpty()) {
HEALMCH = Byte.parseByte(s);
} else {
HEALMCH = Byte.MIN_VALUE;
}
}

protected final void initHEALMFA(String s) {
if (!s.trim().isEmpty()) {
HEALMFA = Byte.parseByte(s);
} else {
HEALMFA = Byte.MIN_VALUE;
}
}

protected final void initHEALMFR(String s) {
if (!s.trim().isEmpty()) {
HEALMFR = Byte.parseByte(s);
} else {
HEALMFR = Byte.MIN_VALUE;
}
}

protected final void initHEALMLL(String s) {
if (!s.trim().isEmpty()) {
HEALMLL = Byte.parseByte(s);
} else {
HEALMLL = Byte.MIN_VALUE;
}
}

protected final void initHEALMNHS(String s) {
if (!s.trim().isEmpty()) {
HEALMNHS = Byte.parseByte(s);
} else {
HEALMNHS = Byte.MIN_VALUE;
}
}

protected final void initHEALMSE(String s) {
if (!s.trim().isEmpty()) {
HEALMSE = Byte.parseByte(s);
} else {
HEALMSE = Byte.MIN_VALUE;
}
}

protected final void initHEALMSS(String s) {
if (!s.trim().isEmpty()) {
HEALMSS = Byte.parseByte(s);
} else {
HEALMSS = Byte.MIN_VALUE;
}
}

protected final void initHEALNHS(String s) {
if (!s.trim().isEmpty()) {
HEALNHS = Byte.parseByte(s);
} else {
HEALNHS = Byte.MIN_VALUE;
}
}

protected final void initHEALOT(String s) {
if (!s.trim().isEmpty()) {
HEALOT = Byte.parseByte(s);
} else {
HEALOT = Byte.MIN_VALUE;
}
}

protected final void initHEALSE(String s) {
if (!s.trim().isEmpty()) {
HEALSE = Byte.parseByte(s);
} else {
HEALSE = Byte.MIN_VALUE;
}
}

protected final void initHEALSS(String s) {
if (!s.trim().isEmpty()) {
HEALSS = Byte.parseByte(s);
} else {
HEALSS = Byte.MIN_VALUE;
}
}

protected final void initHEAMB(String s) {
if (!s.trim().isEmpty()) {
HEAMB = Byte.parseByte(s);
} else {
HEAMB = Byte.MIN_VALUE;
}
}

protected final void initHEANYCH(String s) {
if (!s.trim().isEmpty()) {
HEANYCH = Byte.parseByte(s);
} else {
HEANYCH = Byte.MIN_VALUE;
}
}

protected final void initHEARTA(String s) {
if (!s.trim().isEmpty()) {
HEARTA = Byte.parseByte(s);
} else {
HEARTA = Byte.MIN_VALUE;
}
}

protected final void initHEARTB(String s) {
if (!s.trim().isEmpty()) {
HEARTB = Byte.parseByte(s);
} else {
HEARTB = Byte.MIN_VALUE;
}
}

protected final void initHEARTC(String s) {
if (!s.trim().isEmpty()) {
HEARTC = Byte.parseByte(s);
} else {
HEARTC = Byte.MIN_VALUE;
}
}

protected final void initHEARTE(String s) {
if (!s.trim().isEmpty()) {
HEARTE = Byte.parseByte(s);
} else {
HEARTE = Byte.MIN_VALUE;
}
}

protected final void initHEARTOA(String s) {
if (!s.trim().isEmpty()) {
HEARTOA = Byte.parseByte(s);
} else {
HEARTOA = Byte.MIN_VALUE;
}
}

protected final void initHEARTOT(String s) {
if (!s.trim().isEmpty()) {
HEARTOT = Byte.parseByte(s);
} else {
HEARTOT = Byte.MIN_VALUE;
}
}

protected final void initHEARTRA(String s) {
if (!s.trim().isEmpty()) {
HEARTRA = Byte.parseByte(s);
} else {
HEARTRA = Byte.MIN_VALUE;
}
}

protected final void initHEBETA(String s) {
if (!s.trim().isEmpty()) {
HEBETA = Byte.parseByte(s);
} else {
HEBETA = Byte.MIN_VALUE;
}
}

protected final void initHEBOWD(String s) {
if (!s.trim().isEmpty()) {
HEBOWD = Byte.parseByte(s);
} else {
HEBOWD = Byte.MIN_VALUE;
}
}

protected final void initHEBPCHK(String s) {
if (!s.trim().isEmpty()) {
HEBPCHK = Byte.parseByte(s);
} else {
HEBPCHK = Byte.MIN_VALUE;
}
}

protected final void initHEBUCH(String s) {
if (!s.trim().isEmpty()) {
HEBUCH = Byte.parseByte(s);
} else {
HEBUCH = Byte.MIN_VALUE;
}
}

protected final void initHEBUCOV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEBUCOV = false;
} else {
HEBUCOV = true;
}
}
}

protected final void initHEBUM85(String s) {
if (!s.trim().isEmpty()) {
HEBUM85 = Byte.parseByte(s);
} else {
HEBUM85 = Byte.MIN_VALUE;
}
}

protected final void initHEBUM86(String s) {
if (!s.trim().isEmpty()) {
HEBUM86 = Byte.parseByte(s);
} else {
HEBUM86 = Byte.MIN_VALUE;
}
}

protected final void initHEBUMCH(String s) {
if (!s.trim().isEmpty()) {
HEBUMCH = Byte.parseByte(s);
} else {
HEBUMCH = Byte.MIN_VALUE;
}
}

protected final void initHEBUMFA(String s) {
if (!s.trim().isEmpty()) {
HEBUMFA = Byte.parseByte(s);
} else {
HEBUMFA = Byte.MIN_VALUE;
}
}

protected final void initHEBUMFR(String s) {
if (!s.trim().isEmpty()) {
HEBUMFR = Byte.parseByte(s);
} else {
HEBUMFR = Byte.MIN_VALUE;
}
}

protected final void initHEBUMLL(String s) {
if (!s.trim().isEmpty()) {
HEBUMLL = Byte.parseByte(s);
} else {
HEBUMLL = Byte.MIN_VALUE;
}
}

protected final void initHEBUMNHS(String s) {
if (!s.trim().isEmpty()) {
HEBUMNHS = Byte.parseByte(s);
} else {
HEBUMNHS = Byte.MIN_VALUE;
}
}

protected final void initHEBUMSE(String s) {
if (!s.trim().isEmpty()) {
HEBUMSE = Byte.parseByte(s);
} else {
HEBUMSE = Byte.MIN_VALUE;
}
}

protected final void initHEBUMSS(String s) {
if (!s.trim().isEmpty()) {
HEBUMSS = Byte.parseByte(s);
} else {
HEBUMSS = Byte.MIN_VALUE;
}
}

protected final void initHEBUNHS(String s) {
if (!s.trim().isEmpty()) {
HEBUNHS = Byte.parseByte(s);
} else {
HEBUNHS = Byte.MIN_VALUE;
}
}

protected final void initHEBUOT(String s) {
if (!s.trim().isEmpty()) {
HEBUOT = Byte.parseByte(s);
} else {
HEBUOT = Byte.MIN_VALUE;
}
}

protected final void initHEBUSE(String s) {
if (!s.trim().isEmpty()) {
HEBUSE = Byte.parseByte(s);
} else {
HEBUSE = Byte.MIN_VALUE;
}
}

protected final void initHEBUSS(String s) {
if (!s.trim().isEmpty()) {
HEBUSS = Byte.parseByte(s);
} else {
HEBUSS = Byte.MIN_VALUE;
}
}

protected final void initHECACH(String s) {
if (!s.trim().isEmpty()) {
HECACH = Byte.parseByte(s);
} else {
HECACH = Byte.MIN_VALUE;
}
}

protected final void initHECACOV(String s) {
if (!s.trim().isEmpty()) {
HECACOV = Byte.parseByte(s);
} else {
HECACOV = Byte.MIN_VALUE;
}
}

protected final void initHECAM85(String s) {
if (!s.trim().isEmpty()) {
HECAM85 = Byte.parseByte(s);
} else {
HECAM85 = Byte.MIN_VALUE;
}
}

protected final void initHECAM86(String s) {
if (!s.trim().isEmpty()) {
HECAM86 = Byte.parseByte(s);
} else {
HECAM86 = Byte.MIN_VALUE;
}
}

protected final void initHECAMCH(String s) {
if (!s.trim().isEmpty()) {
HECAMCH = Byte.parseByte(s);
} else {
HECAMCH = Byte.MIN_VALUE;
}
}

protected final void initHECAMFA(String s) {
if (!s.trim().isEmpty()) {
HECAMFA = Byte.parseByte(s);
} else {
HECAMFA = Byte.MIN_VALUE;
}
}

protected final void initHECAMFR(String s) {
if (!s.trim().isEmpty()) {
HECAMFR = Byte.parseByte(s);
} else {
HECAMFR = Byte.MIN_VALUE;
}
}

protected final void initHECAMLL(String s) {
if (!s.trim().isEmpty()) {
HECAMLL = Byte.parseByte(s);
} else {
HECAMLL = Byte.MIN_VALUE;
}
}

protected final void initHECAMNHS(String s) {
if (!s.trim().isEmpty()) {
HECAMNHS = Byte.parseByte(s);
} else {
HECAMNHS = Byte.MIN_VALUE;
}
}

protected final void initHECAMSE(String s) {
if (!s.trim().isEmpty()) {
HECAMSE = Byte.parseByte(s);
} else {
HECAMSE = Byte.MIN_VALUE;
}
}

protected final void initHECAMSS(String s) {
if (!s.trim().isEmpty()) {
HECAMSS = Byte.parseByte(s);
} else {
HECAMSS = Byte.MIN_VALUE;
}
}

protected final void initHECANAAR(String s) {
if (!s.trim().isEmpty()) {
HECANAAR = Byte.parseByte(s);
} else {
HECANAAR = Byte.MIN_VALUE;
}
}

protected final void initHECANBB(String s) {
if (!s.trim().isEmpty()) {
HECANBB = Byte.parseByte(s);
} else {
HECANBB = Byte.MIN_VALUE;
}
}

protected final void initHECANHS(String s) {
if (!s.trim().isEmpty()) {
HECANHS = Byte.parseByte(s);
} else {
HECANHS = Byte.MIN_VALUE;
}
}

protected final void initHECAOT(String s) {
if (!s.trim().isEmpty()) {
HECAOT = Byte.parseByte(s);
} else {
HECAOT = Byte.MIN_VALUE;
}
}

protected final void initHECASE(String s) {
if (!s.trim().isEmpty()) {
HECASE = Byte.parseByte(s);
} else {
HECASE = Byte.MIN_VALUE;
}
}

protected final void initHECASS(String s) {
if (!s.trim().isEmpty()) {
HECASS = Byte.parseByte(s);
} else {
HECASS = Byte.MIN_VALUE;
}
}

protected final void initHECATN(String s) {
if (!s.trim().isEmpty()) {
HECATN = Byte.parseByte(s);
} else {
HECATN = Byte.MIN_VALUE;
}
}

protected final void initHECGSTA(String s) {
if (!s.trim().isEmpty()) {
HECGSTA = Byte.parseByte(s);
} else {
HECGSTA = Byte.MIN_VALUE;
}
}

protected final void initHECGSTP(String s) {
if (!s.trim().isEmpty()) {
HECGSTP = Byte.parseByte(s);
} else {
HECGSTP = Byte.MIN_VALUE;
}
}

protected final void initHECHMD(String s) {
if (!s.trim().isEmpty()) {
HECHMD = Byte.parseByte(s);
} else {
HECHMD = Byte.MIN_VALUE;
}
}

protected final void initHECHME(String s) {
if (!s.trim().isEmpty()) {
HECHME = Byte.parseByte(s);
} else {
HECHME = Byte.MIN_VALUE;
}
}

protected final void initHECHOL(String s) {
if (!s.trim().isEmpty()) {
HECHOL = Byte.parseByte(s);
} else {
HECHOL = Byte.MIN_VALUE;
}
}

protected final void initHECRCH(String s) {
if (!s.trim().isEmpty()) {
HECRCH = Byte.parseByte(s);
} else {
HECRCH = Byte.MIN_VALUE;
}
}

protected final void initHECRCOV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HECRCOV = false;
} else {
HECRCOV = true;
}
}
}

protected final void initHECRM85(String s) {
if (!s.trim().isEmpty()) {
HECRM85 = Byte.parseByte(s);
} else {
HECRM85 = Byte.MIN_VALUE;
}
}

protected final void initHECRM86(String s) {
if (!s.trim().isEmpty()) {
HECRM86 = Byte.parseByte(s);
} else {
HECRM86 = Byte.MIN_VALUE;
}
}

protected final void initHECRMCH(String s) {
if (!s.trim().isEmpty()) {
HECRMCH = Byte.parseByte(s);
} else {
HECRMCH = Byte.MIN_VALUE;
}
}

protected final void initHECRMFA(String s) {
if (!s.trim().isEmpty()) {
HECRMFA = Byte.parseByte(s);
} else {
HECRMFA = Byte.MIN_VALUE;
}
}

protected final void initHECRMFR(String s) {
if (!s.trim().isEmpty()) {
HECRMFR = Byte.parseByte(s);
} else {
HECRMFR = Byte.MIN_VALUE;
}
}

protected final void initHECRMLL(String s) {
if (!s.trim().isEmpty()) {
HECRMLL = Byte.parseByte(s);
} else {
HECRMLL = Byte.MIN_VALUE;
}
}

protected final void initHECRMNHS(String s) {
if (!s.trim().isEmpty()) {
HECRMNHS = Byte.parseByte(s);
} else {
HECRMNHS = Byte.MIN_VALUE;
}
}

protected final void initHECRMSE(String s) {
if (!s.trim().isEmpty()) {
HECRMSE = Byte.parseByte(s);
} else {
HECRMSE = Byte.MIN_VALUE;
}
}

protected final void initHECRMSS(String s) {
if (!s.trim().isEmpty()) {
HECRMSS = Byte.parseByte(s);
} else {
HECRMSS = Byte.MIN_VALUE;
}
}

protected final void initHECRNHS(String s) {
if (!s.trim().isEmpty()) {
HECRNHS = Byte.parseByte(s);
} else {
HECRNHS = Byte.MIN_VALUE;
}
}

protected final void initHECROT(String s) {
if (!s.trim().isEmpty()) {
HECROT = Byte.parseByte(s);
} else {
HECROT = Byte.MIN_VALUE;
}
}

protected final void initHECRSE(String s) {
if (!s.trim().isEmpty()) {
HECRSE = Byte.parseByte(s);
} else {
HECRSE = Byte.MIN_VALUE;
}
}

protected final void initHECRSS(String s) {
if (!s.trim().isEmpty()) {
HECRSS = Byte.parseByte(s);
} else {
HECRSS = Byte.MIN_VALUE;
}
}

protected final void initHEDAC95(String s) {
if (!s.trim().isEmpty()) {
HEDAC95 = Byte.parseByte(s);
} else {
HEDAC95 = Byte.MIN_VALUE;
}
}

protected final void initHEDACAN(String s) {
if (!s.trim().isEmpty()) {
HEDACAN = Byte.parseByte(s);
} else {
HEDACAN = Byte.MIN_VALUE;
}
}

protected final void initHEDACAR(String s) {
if (!s.trim().isEmpty()) {
HEDACAR = Byte.parseByte(s);
} else {
HEDACAR = Byte.MIN_VALUE;
}
}

protected final void initHEDACBP(String s) {
if (!s.trim().isEmpty()) {
HEDACBP = Byte.parseByte(s);
} else {
HEDACBP = Byte.MIN_VALUE;
}
}

protected final void initHEDACCH(String s) {
if (!s.trim().isEmpty()) {
HEDACCH = Byte.parseByte(s);
} else {
HEDACCH = Byte.MIN_VALUE;
}
}

protected final void initHEDACDI(String s) {
if (!s.trim().isEmpty()) {
HEDACDI = Byte.parseByte(s);
} else {
HEDACDI = Byte.MIN_VALUE;
}
}

protected final void initHEDACHF(String s) {
if (!s.trim().isEmpty()) {
HEDACHF = Byte.parseByte(s);
} else {
HEDACHF = Byte.MIN_VALUE;
}
}

protected final void initHEDACHM(String s) {
if (!s.trim().isEmpty()) {
HEDACHM = Byte.parseByte(s);
} else {
HEDACHM = Byte.MIN_VALUE;
}
}

protected final void initHEDACMI(String s) {
if (!s.trim().isEmpty()) {
HEDACMI = Byte.parseByte(s);
} else {
HEDACMI = Byte.MIN_VALUE;
}
}

protected final void initHEDACST(String s) {
if (!s.trim().isEmpty()) {
HEDACST = Byte.parseByte(s);
} else {
HEDACST = Byte.MIN_VALUE;
}
}

protected final void initHEDAN95(String s) {
if (!s.trim().isEmpty()) {
HEDAN95 = Byte.parseByte(s);
} else {
HEDAN95 = Byte.MIN_VALUE;
}
}

protected final void initHEDANAN(String s) {
if (!s.trim().isEmpty()) {
HEDANAN = Byte.parseByte(s);
} else {
HEDANAN = Byte.MIN_VALUE;
}
}

protected final void initHEDANAR(String s) {
if (!s.trim().isEmpty()) {
HEDANAR = Byte.parseByte(s);
} else {
HEDANAR = Byte.MIN_VALUE;
}
}

protected final void initHEDANBP(String s) {
if (!s.trim().isEmpty()) {
HEDANBP = Byte.parseByte(s);
} else {
HEDANBP = Byte.MIN_VALUE;
}
}

protected final void initHEDANCH(String s) {
if (!s.trim().isEmpty()) {
HEDANCH = Byte.parseByte(s);
} else {
HEDANCH = Byte.MIN_VALUE;
}
}

protected final void initHEDANDI(String s) {
if (!s.trim().isEmpty()) {
HEDANDI = Byte.parseByte(s);
} else {
HEDANDI = Byte.MIN_VALUE;
}
}

protected final void initHEDANHF(String s) {
if (!s.trim().isEmpty()) {
HEDANHF = Byte.parseByte(s);
} else {
HEDANHF = Byte.MIN_VALUE;
}
}

protected final void initHEDANHM(String s) {
if (!s.trim().isEmpty()) {
HEDANHM = Byte.parseByte(s);
} else {
HEDANHM = Byte.MIN_VALUE;
}
}

protected final void initHEDANMI(String s) {
if (!s.trim().isEmpty()) {
HEDANMI = Byte.parseByte(s);
} else {
HEDANMI = Byte.MIN_VALUE;
}
}

protected final void initHEDANST(String s) {
if (!s.trim().isEmpty()) {
HEDANST = Byte.parseByte(s);
} else {
HEDANST = Byte.MIN_VALUE;
}
}

protected final void initHEDAS95(String s) {
if (!s.trim().isEmpty()) {
HEDAS95 = Byte.parseByte(s);
} else {
HEDAS95 = Byte.MIN_VALUE;
}
}

protected final void initHEDASAN(String s) {
if (!s.trim().isEmpty()) {
HEDASAN = Byte.parseByte(s);
} else {
HEDASAN = Byte.MIN_VALUE;
}
}

protected final void initHEDASAR(String s) {
if (!s.trim().isEmpty()) {
HEDASAR = Byte.parseByte(s);
} else {
HEDASAR = Byte.MIN_VALUE;
}
}

protected final void initHEDASBP(String s) {
if (!s.trim().isEmpty()) {
HEDASBP = Byte.parseByte(s);
} else {
HEDASBP = Byte.MIN_VALUE;
}
}

protected final void initHEDASCH(String s) {
if (!s.trim().isEmpty()) {
HEDASCH = Byte.parseByte(s);
} else {
HEDASCH = Byte.MIN_VALUE;
}
}

protected final void initHEDASHF(String s) {
if (!s.trim().isEmpty()) {
HEDASHF = Byte.parseByte(s);
} else {
HEDASHF = Byte.MIN_VALUE;
}
}

protected final void initHEDASHM(String s) {
if (!s.trim().isEmpty()) {
HEDASHM = Byte.parseByte(s);
} else {
HEDASHM = Byte.MIN_VALUE;
}
}

protected final void initHEDAW95(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDAW95 = false;
} else {
HEDAW95 = true;
}
}
}

protected final void initHEDAWAN(String s) {
if (!s.trim().isEmpty()) {
HEDAWAN = Byte.parseByte(s);
} else {
HEDAWAN = Byte.MIN_VALUE;
}
}

protected final void initHEDAWAR(String s) {
if (!s.trim().isEmpty()) {
HEDAWAR = Byte.parseByte(s);
} else {
HEDAWAR = Byte.MIN_VALUE;
}
}

protected final void initHEDAWBP(String s) {
if (!s.trim().isEmpty()) {
HEDAWBP = Byte.parseByte(s);
} else {
HEDAWBP = Byte.MIN_VALUE;
}
}

protected final void initHEDAWCH(String s) {
if (!s.trim().isEmpty()) {
HEDAWCH = Byte.parseByte(s);
} else {
HEDAWCH = Byte.MIN_VALUE;
}
}

protected final void initHEDAWDI(String s) {
if (!s.trim().isEmpty()) {
HEDAWDI = Byte.parseByte(s);
} else {
HEDAWDI = Byte.MIN_VALUE;
}
}

protected final void initHEDAWHF(String s) {
if (!s.trim().isEmpty()) {
HEDAWHF = Byte.parseByte(s);
} else {
HEDAWHF = Byte.MIN_VALUE;
}
}

protected final void initHEDAWHM(String s) {
if (!s.trim().isEmpty()) {
HEDAWHM = Byte.parseByte(s);
} else {
HEDAWHM = Byte.MIN_VALUE;
}
}

protected final void initHEDAWMI(String s) {
if (!s.trim().isEmpty()) {
HEDAWMI = Byte.parseByte(s);
} else {
HEDAWMI = Byte.MIN_VALUE;
}
}

protected final void initHEDAWST(String s) {
if (!s.trim().isEmpty()) {
HEDAWST = Byte.parseByte(s);
} else {
HEDAWST = Byte.MIN_VALUE;
}
}

protected final void initHEDBDAD(String s) {
if (!s.trim().isEmpty()) {
HEDBDAD = Byte.parseByte(s);
} else {
HEDBDAD = Byte.MIN_VALUE;
}
}

protected final void initHEDBDAR(String s) {
if (!s.trim().isEmpty()) {
HEDBDAR = Byte.parseByte(s);
} else {
HEDBDAR = Byte.MIN_VALUE;
}
}

protected final void initHEDBDAS(String s) {
if (!s.trim().isEmpty()) {
HEDBDAS = Byte.parseByte(s);
} else {
HEDBDAS = Byte.MIN_VALUE;
}
}

protected final void initHEDBDBL(String s) {
if (!s.trim().isEmpty()) {
HEDBDBL = Byte.parseByte(s);
} else {
HEDBDBL = Byte.MIN_VALUE;
}
}

protected final void initHEDBDCA(String s) {
if (!s.trim().isEmpty()) {
HEDBDCA = Byte.parseByte(s);
} else {
HEDBDCA = Byte.MIN_VALUE;
}
}

protected final void initHEDBDDE(String s) {
if (!s.trim().isEmpty()) {
HEDBDDE = Byte.parseByte(s);
} else {
HEDBDDE = Byte.MIN_VALUE;
}
}

protected final void initHEDBDLU(String s) {
if (!s.trim().isEmpty()) {
HEDBDLU = Byte.parseByte(s);
} else {
HEDBDLU = Byte.MIN_VALUE;
}
}

protected final void initHEDBDMS(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDBDMS = false;
} else {
HEDBDMS = true;
}
}
}

protected final void initHEDBDOS(String s) {
if (!s.trim().isEmpty()) {
HEDBDOS = Byte.parseByte(s);
} else {
HEDBDOS = Byte.MIN_VALUE;
}
}

protected final void initHEDBDPD(String s) {
if (!s.trim().isEmpty()) {
HEDBDPD = Byte.parseByte(s);
} else {
HEDBDPD = Byte.MIN_VALUE;
}
}

protected final void initHEDBDPS(String s) {
if (!s.trim().isEmpty()) {
HEDBDPS = Byte.parseByte(s);
} else {
HEDBDPS = Byte.MIN_VALUE;
}
}

protected final void initHEDBLU(String s) {
if (!s.trim().isEmpty()) {
HEDBLU = Byte.parseByte(s);
} else {
HEDBLU = Byte.MIN_VALUE;
}
}

protected final void initHEDBMAD(String s) {
if (!s.trim().isEmpty()) {
HEDBMAD = Byte.parseByte(s);
} else {
HEDBMAD = Byte.MIN_VALUE;
}
}

protected final void initHEDBMAR(String s) {
if (!s.trim().isEmpty()) {
HEDBMAR = Byte.parseByte(s);
} else {
HEDBMAR = Byte.MIN_VALUE;
}
}

protected final void initHEDBMAS(String s) {
if (!s.trim().isEmpty()) {
HEDBMAS = Byte.parseByte(s);
} else {
HEDBMAS = Byte.MIN_VALUE;
}
}

protected final void initHEDBMBL(String s) {
if (!s.trim().isEmpty()) {
HEDBMBL = Byte.parseByte(s);
} else {
HEDBMBL = Byte.MIN_VALUE;
}
}

protected final void initHEDBMCA(String s) {
if (!s.trim().isEmpty()) {
HEDBMCA = Byte.parseByte(s);
} else {
HEDBMCA = Byte.MIN_VALUE;
}
}

protected final void initHEDBMDE(String s) {
if (!s.trim().isEmpty()) {
HEDBMDE = Byte.parseByte(s);
} else {
HEDBMDE = Byte.MIN_VALUE;
}
}

protected final void initHEDBMLU(String s) {
if (!s.trim().isEmpty()) {
HEDBMLU = Byte.parseByte(s);
} else {
HEDBMLU = Byte.MIN_VALUE;
}
}

protected final void initHEDBMMS(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDBMMS = false;
} else {
HEDBMMS = true;
}
}
}

protected final void initHEDBMOS(String s) {
if (!s.trim().isEmpty()) {
HEDBMOS = Byte.parseByte(s);
} else {
HEDBMOS = Byte.MIN_VALUE;
}
}

protected final void initHEDBMPD(String s) {
if (!s.trim().isEmpty()) {
HEDBMPD = Byte.parseByte(s);
} else {
HEDBMPD = Byte.MIN_VALUE;
}
}

protected final void initHEDBMPS(String s) {
if (!s.trim().isEmpty()) {
HEDBMPS = Byte.parseByte(s);
} else {
HEDBMPS = Byte.MIN_VALUE;
}
}

protected final void initHEDBSAR(String s) {
if (!s.trim().isEmpty()) {
HEDBSAR = Byte.parseByte(s);
} else {
HEDBSAR = Byte.MIN_VALUE;
}
}

protected final void initHEDBSAS(String s) {
if (!s.trim().isEmpty()) {
HEDBSAS = Byte.parseByte(s);
} else {
HEDBSAS = Byte.MIN_VALUE;
}
}

protected final void initHEDBSBL(String s) {
if (!s.trim().isEmpty()) {
HEDBSBL = Byte.parseByte(s);
} else {
HEDBSBL = Byte.MIN_VALUE;
}
}

protected final void initHEDBSCA(String s) {
if (!s.trim().isEmpty()) {
HEDBSCA = Byte.parseByte(s);
} else {
HEDBSCA = Byte.MIN_VALUE;
}
}

protected final void initHEDBSDE(String s) {
if (!s.trim().isEmpty()) {
HEDBSDE = Byte.parseByte(s);
} else {
HEDBSDE = Byte.MIN_VALUE;
}
}

protected final void initHEDBSMS(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDBSMS = false;
} else {
HEDBSMS = true;
}
}
}

protected final void initHEDBSOS(String s) {
if (!s.trim().isEmpty()) {
HEDBSOS = Byte.parseByte(s);
} else {
HEDBSOS = Byte.MIN_VALUE;
}
}

protected final void initHEDBSPD(String s) {
if (!s.trim().isEmpty()) {
HEDBSPD = Byte.parseByte(s);
} else {
HEDBSPD = Byte.MIN_VALUE;
}
}

protected final void initHEDBWAD(String s) {
if (!s.trim().isEmpty()) {
HEDBWAD = Byte.parseByte(s);
} else {
HEDBWAD = Byte.MIN_VALUE;
}
}

protected final void initHEDBWAR(String s) {
if (!s.trim().isEmpty()) {
HEDBWAR = Byte.parseByte(s);
} else {
HEDBWAR = Byte.MIN_VALUE;
}
}

protected final void initHEDBWAS(String s) {
if (!s.trim().isEmpty()) {
HEDBWAS = Byte.parseByte(s);
} else {
HEDBWAS = Byte.MIN_VALUE;
}
}

protected final void initHEDBWBL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDBWBL = false;
} else {
HEDBWBL = true;
}
}
}

protected final void initHEDBWCA(String s) {
if (!s.trim().isEmpty()) {
HEDBWCA = Byte.parseByte(s);
} else {
HEDBWCA = Byte.MIN_VALUE;
}
}

protected final void initHEDBWDE(String s) {
if (!s.trim().isEmpty()) {
HEDBWDE = Byte.parseByte(s);
} else {
HEDBWDE = Byte.MIN_VALUE;
}
}

protected final void initHEDBWLU(String s) {
if (!s.trim().isEmpty()) {
HEDBWLU = Byte.parseByte(s);
} else {
HEDBWLU = Byte.MIN_VALUE;
}
}

protected final void initHEDBWMS(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEDBWMS = false;
} else {
HEDBWMS = true;
}
}
}

protected final void initHEDBWOS(String s) {
if (!s.trim().isEmpty()) {
HEDBWOS = Byte.parseByte(s);
} else {
HEDBWOS = Byte.MIN_VALUE;
}
}

protected final void initHEDBWPD(String s) {
if (!s.trim().isEmpty()) {
HEDBWPD = Byte.parseByte(s);
} else {
HEDBWPD = Byte.MIN_VALUE;
}
}

protected final void initHEDBWPS(String s) {
if (!s.trim().isEmpty()) {
HEDBWPS = Byte.parseByte(s);
} else {
HEDBWPS = Byte.MIN_VALUE;
}
}

protected final void initHEDIA95(String s) {
if (!s.trim().isEmpty()) {
HEDIA95 = Byte.parseByte(s);
} else {
HEDIA95 = Byte.MIN_VALUE;
}
}

protected final void initHEDIA96(String s) {
if (!s.trim().isEmpty()) {
HEDIA96 = Byte.parseByte(s);
} else {
HEDIA96 = Byte.MIN_VALUE;
}
}

protected final void initHEDIAAN(String s) {
if (!s.trim().isEmpty()) {
HEDIAAN = Byte.parseByte(s);
} else {
HEDIAAN = Byte.MIN_VALUE;
}
}

protected final void initHEDIAAR(String s) {
if (!s.trim().isEmpty()) {
HEDIAAR = Byte.parseByte(s);
} else {
HEDIAAR = Byte.MIN_VALUE;
}
}

protected final void initHEDIABP(String s) {
if (!s.trim().isEmpty()) {
HEDIABP = Byte.parseByte(s);
} else {
HEDIABP = Byte.MIN_VALUE;
}
}

protected final void initHEDIACH(String s) {
if (!s.trim().isEmpty()) {
HEDIACH = Byte.parseByte(s);
} else {
HEDIACH = Byte.MIN_VALUE;
}
}

protected final void initHEDIADI(String s) {
if (!s.trim().isEmpty()) {
HEDIADI = Byte.parseByte(s);
} else {
HEDIADI = Byte.MIN_VALUE;
}
}

protected final void initHEDIAHF(String s) {
if (!s.trim().isEmpty()) {
HEDIAHF = Byte.parseByte(s);
} else {
HEDIAHF = Byte.MIN_VALUE;
}
}

protected final void initHEDIAHM(String s) {
if (!s.trim().isEmpty()) {
HEDIAHM = Byte.parseByte(s);
} else {
HEDIAHM = Byte.MIN_VALUE;
}
}

protected final void initHEDIAMI(String s) {
if (!s.trim().isEmpty()) {
HEDIAMI = Byte.parseByte(s);
} else {
HEDIAMI = Byte.MIN_VALUE;
}
}

protected final void initHEDIAST(String s) {
if (!s.trim().isEmpty()) {
HEDIAST = Byte.parseByte(s);
} else {
HEDIAST = Byte.MIN_VALUE;
}
}

protected final void initHEDIB96(String s) {
if (!s.trim().isEmpty()) {
HEDIB96 = Byte.parseByte(s);
} else {
HEDIB96 = Byte.MIN_VALUE;
}
}

protected final void initHEDIBAD(String s) {
if (!s.trim().isEmpty()) {
HEDIBAD = Byte.parseByte(s);
} else {
HEDIBAD = Byte.MIN_VALUE;
}
}

protected final void initHEDIBAR(String s) {
if (!s.trim().isEmpty()) {
HEDIBAR = Byte.parseByte(s);
} else {
HEDIBAR = Byte.MIN_VALUE;
}
}

protected final void initHEDIBAS(String s) {
if (!s.trim().isEmpty()) {
HEDIBAS = Byte.parseByte(s);
} else {
HEDIBAS = Byte.MIN_VALUE;
}
}

protected final void initHEDIBBL(String s) {
if (!s.trim().isEmpty()) {
HEDIBBL = Byte.parseByte(s);
} else {
HEDIBBL = Byte.MIN_VALUE;
}
}

protected final void initHEDIBCA(String s) {
if (!s.trim().isEmpty()) {
HEDIBCA = Byte.parseByte(s);
} else {
HEDIBCA = Byte.MIN_VALUE;
}
}

protected final void initHEDIBDE(String s) {
if (!s.trim().isEmpty()) {
HEDIBDE = Byte.parseByte(s);
} else {
HEDIBDE = Byte.MIN_VALUE;
}
}

protected final void initHEDIBLU(String s) {
if (!s.trim().isEmpty()) {
HEDIBLU = Byte.parseByte(s);
} else {
HEDIBLU = Byte.MIN_VALUE;
}
}

protected final void initHEDIBMS(String s) {
if (!s.trim().isEmpty()) {
HEDIBMS = Byte.parseByte(s);
} else {
HEDIBMS = Byte.MIN_VALUE;
}
}

protected final void initHEDIBOS(String s) {
if (!s.trim().isEmpty()) {
HEDIBOS = Byte.parseByte(s);
} else {
HEDIBOS = Byte.MIN_VALUE;
}
}

protected final void initHEDIBPD(String s) {
if (!s.trim().isEmpty()) {
HEDIBPD = Byte.parseByte(s);
} else {
HEDIBPD = Byte.MIN_VALUE;
}
}

protected final void initHEDIBPS(String s) {
if (!s.trim().isEmpty()) {
HEDIBPS = Byte.parseByte(s);
} else {
HEDIBPS = Byte.MIN_VALUE;
}
}

protected final void initHEDIM85(String s) {
if (!s.trim().isEmpty()) {
HEDIM85 = Byte.parseByte(s);
} else {
HEDIM85 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM86(String s) {
if (!s.trim().isEmpty()) {
HEDIM86 = Byte.parseByte(s);
} else {
HEDIM86 = Byte.MIN_VALUE;
}
}

protected final void initHEDIM96(String s) {
if (!s.trim().isEmpty()) {
HEDIM96 = Byte.parseByte(s);
} else {
HEDIM96 = Byte.MIN_VALUE;
}
}

protected final void initHEDIMAN(String s) {
if (!s.trim().isEmpty()) {
HEDIMAN = Byte.parseByte(s);
} else {
HEDIMAN = Byte.MIN_VALUE;
}
}

protected final void initHEDIMAR(String s) {
if (!s.trim().isEmpty()) {
HEDIMAR = Byte.parseByte(s);
} else {
HEDIMAR = Byte.MIN_VALUE;
}
}

protected final void initHEDIMBP(String s) {
if (!s.trim().isEmpty()) {
HEDIMBP = Byte.parseByte(s);
} else {
HEDIMBP = Byte.MIN_VALUE;
}
}

protected final void initHEDIMCH(String s) {
if (!s.trim().isEmpty()) {
HEDIMCH = Byte.parseByte(s);
} else {
HEDIMCH = Byte.MIN_VALUE;
}
}

protected final void initHEDIMDI(String s) {
if (!s.trim().isEmpty()) {
HEDIMDI = Byte.parseByte(s);
} else {
HEDIMDI = Byte.MIN_VALUE;
}
}

protected final void initHEDIMHF(String s) {
if (!s.trim().isEmpty()) {
HEDIMHF = Byte.parseByte(s);
} else {
HEDIMHF = Byte.MIN_VALUE;
}
}

protected final void initHEDIMHM(String s) {
if (!s.trim().isEmpty()) {
HEDIMHM = Byte.parseByte(s);
} else {
HEDIMHM = Byte.MIN_VALUE;
}
}

protected final void initHEDIMMI(String s) {
if (!s.trim().isEmpty()) {
HEDIMMI = Byte.parseByte(s);
} else {
HEDIMMI = Byte.MIN_VALUE;
}
}

protected final void initHEDIMST(String s) {
if (!s.trim().isEmpty()) {
HEDIMST = Byte.parseByte(s);
} else {
HEDIMST = Byte.MIN_VALUE;
}
}

protected final void initHEDNTA(String s) {
if (!s.trim().isEmpty()) {
HEDNTA = Byte.parseByte(s);
} else {
HEDNTA = Byte.MIN_VALUE;
}
}

protected final void initHEDNTB1(String s) {
if (!s.trim().isEmpty()) {
HEDNTB1 = Byte.parseByte(s);
} else {
HEDNTB1 = Byte.MIN_VALUE;
}
}

protected final void initHEDNTB2(String s) {
if (!s.trim().isEmpty()) {
HEDNTB2 = Byte.parseByte(s);
} else {
HEDNTB2 = Byte.MIN_VALUE;
}
}

protected final void initHEDNTB3(String s) {
if (!s.trim().isEmpty()) {
HEDNTB3 = Byte.parseByte(s);
} else {
HEDNTB3 = Byte.MIN_VALUE;
}
}

protected final void initHEDNTB4(String s) {
if (!s.trim().isEmpty()) {
HEDNTB4 = Byte.parseByte(s);
} else {
HEDNTB4 = Byte.MIN_VALUE;
}
}

protected final void initHEDNTB5(String s) {
if (!s.trim().isEmpty()) {
HEDNTB5 = Byte.parseByte(s);
} else {
HEDNTB5 = Byte.MIN_VALUE;
}
}

protected final void initHEDNTB96(String s) {
if (!s.trim().isEmpty()) {
HEDNTB96 = Byte.parseByte(s);
} else {
HEDNTB96 = Byte.MIN_VALUE;
}
}

protected final void initHEDREYR(String s) {
if (!s.trim().isEmpty()) {
HEDREYR = Byte.parseByte(s);
} else {
HEDREYR = Byte.MIN_VALUE;
}
}

protected final void initHEEACH(String s) {
if (!s.trim().isEmpty()) {
HEEACH = Byte.parseByte(s);
} else {
HEEACH = Byte.MIN_VALUE;
}
}

protected final void initHEEACOV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEEACOV = false;
} else {
HEEACOV = true;
}
}
}

protected final void initHEEAM85(String s) {
if (!s.trim().isEmpty()) {
HEEAM85 = Byte.parseByte(s);
} else {
HEEAM85 = Byte.MIN_VALUE;
}
}

protected final void initHEEAM86(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEEAM86 = false;
} else {
HEEAM86 = true;
}
}
}

protected final void initHEEAMCH(String s) {
if (!s.trim().isEmpty()) {
HEEAMCH = Byte.parseByte(s);
} else {
HEEAMCH = Byte.MIN_VALUE;
}
}

protected final void initHEEAMFA(String s) {
if (!s.trim().isEmpty()) {
HEEAMFA = Byte.parseByte(s);
} else {
HEEAMFA = Byte.MIN_VALUE;
}
}

protected final void initHEEAMFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEEAMFR = false;
} else {
HEEAMFR = true;
}
}
}

protected final void initHEEAMLL(String s) {
if (!s.trim().isEmpty()) {
HEEAMLL = Byte.parseByte(s);
} else {
HEEAMLL = Byte.MIN_VALUE;
}
}

protected final void initHEEAMNHS(String s) {
if (!s.trim().isEmpty()) {
HEEAMNHS = Byte.parseByte(s);
} else {
HEEAMNHS = Byte.MIN_VALUE;
}
}

protected final void initHEEAMSE(String s) {
if (!s.trim().isEmpty()) {
HEEAMSE = Byte.parseByte(s);
} else {
HEEAMSE = Byte.MIN_VALUE;
}
}

protected final void initHEEAMSS(String s) {
if (!s.trim().isEmpty()) {
HEEAMSS = Byte.parseByte(s);
} else {
HEEAMSS = Byte.MIN_VALUE;
}
}

protected final void initHEEANHS(String s) {
if (!s.trim().isEmpty()) {
HEEANHS = Byte.parseByte(s);
} else {
HEEANHS = Byte.MIN_VALUE;
}
}

protected final void initHEEAOT(String s) {
if (!s.trim().isEmpty()) {
HEEAOT = Byte.parseByte(s);
} else {
HEEAOT = Byte.MIN_VALUE;
}
}

protected final void initHEEASE(String s) {
if (!s.trim().isEmpty()) {
HEEASE = Byte.parseByte(s);
} else {
HEEASE = Byte.MIN_VALUE;
}
}

protected final void initHEEASS(String s) {
if (!s.trim().isEmpty()) {
HEEASS = Byte.parseByte(s);
} else {
HEEASS = Byte.MIN_VALUE;
}
}

protected final void initHEEWCH(String s) {
if (!s.trim().isEmpty()) {
HEEWCH = Byte.parseByte(s);
} else {
HEEWCH = Byte.MIN_VALUE;
}
}

protected final void initHEEWCOV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEEWCOV = false;
} else {
HEEWCOV = true;
}
}
}

protected final void initHEEWM85(String s) {
if (!s.trim().isEmpty()) {
HEEWM85 = Byte.parseByte(s);
} else {
HEEWM85 = Byte.MIN_VALUE;
}
}

protected final void initHEEWM86(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEEWM86 = false;
} else {
HEEWM86 = true;
}
}
}

protected final void initHEEWMCH(String s) {
if (!s.trim().isEmpty()) {
HEEWMCH = Byte.parseByte(s);
} else {
HEEWMCH = Byte.MIN_VALUE;
}
}

protected final void initHEEWMFA(String s) {
if (!s.trim().isEmpty()) {
HEEWMFA = Byte.parseByte(s);
} else {
HEEWMFA = Byte.MIN_VALUE;
}
}

protected final void initHEEWMFR(String s) {
if (!s.trim().isEmpty()) {
HEEWMFR = Byte.parseByte(s);
} else {
HEEWMFR = Byte.MIN_VALUE;
}
}

protected final void initHEEWMLL(String s) {
if (!s.trim().isEmpty()) {
HEEWMLL = Byte.parseByte(s);
} else {
HEEWMLL = Byte.MIN_VALUE;
}
}

protected final void initHEEWMNHS(String s) {
if (!s.trim().isEmpty()) {
HEEWMNHS = Byte.parseByte(s);
} else {
HEEWMNHS = Byte.MIN_VALUE;
}
}

protected final void initHEEWMSE(String s) {
if (!s.trim().isEmpty()) {
HEEWMSE = Byte.parseByte(s);
} else {
HEEWMSE = Byte.MIN_VALUE;
}
}

protected final void initHEEWMSS(String s) {
if (!s.trim().isEmpty()) {
HEEWMSS = Byte.parseByte(s);
} else {
HEEWMSS = Byte.MIN_VALUE;
}
}

protected final void initHEEWNHS(String s) {
if (!s.trim().isEmpty()) {
HEEWNHS = Byte.parseByte(s);
} else {
HEEWNHS = Byte.MIN_VALUE;
}
}

protected final void initHEEWOT(String s) {
if (!s.trim().isEmpty()) {
HEEWOT = Byte.parseByte(s);
} else {
HEEWOT = Byte.MIN_VALUE;
}
}

protected final void initHEEWSE(String s) {
if (!s.trim().isEmpty()) {
HEEWSE = Byte.parseByte(s);
} else {
HEEWSE = Byte.MIN_VALUE;
}
}

protected final void initHEEWSS(String s) {
if (!s.trim().isEmpty()) {
HEEWSS = Byte.parseByte(s);
} else {
HEEWSS = Byte.MIN_VALUE;
}
}

protected final void initHEEYEA(String s) {
if (!s.trim().isEmpty()) {
HEEYEA = Byte.parseByte(s);
} else {
HEEYEA = Byte.MIN_VALUE;
}
}

protected final void initHEFLE(String s) {
if (!s.trim().isEmpty()) {
HEFLE = Byte.parseByte(s);
} else {
HEFLE = Byte.MIN_VALUE;
}
}

protected final void initHEFLF(String s) {
if (!s.trim().isEmpty()) {
HEFLF = Byte.parseByte(s);
} else {
HEFLF = Byte.MIN_VALUE;
}
}

protected final void initHEFTCHK(String s) {
if (!s.trim().isEmpty()) {
HEFTCHK = Byte.parseByte(s);
} else {
HEFTCHK = Byte.MIN_VALUE;
}
}

protected final void initHEGPNHS(String s) {
if (!s.trim().isEmpty()) {
HEGPNHS = Byte.parseByte(s);
} else {
HEGPNHS = Byte.MIN_VALUE;
}
}

protected final void initHEGPOFT(String s) {
if (!s.trim().isEmpty()) {
HEGPOFT = Byte.parseByte(s);
} else {
HEGPOFT = Byte.MIN_VALUE;
}
}

protected final void initHEHBPB(String s) {
if (!s.trim().isEmpty()) {
HEHBPB = Byte.parseByte(s);
} else {
HEHBPB = Byte.MIN_VALUE;
}
}

protected final void initHEHBPB1(String s) {
if (!s.trim().isEmpty()) {
HEHBPB1 = Byte.parseByte(s);
} else {
HEHBPB1 = Byte.MIN_VALUE;
}
}

protected final void initHEHELF(String s) {
if (!s.trim().isEmpty()) {
HEHELF = Byte.parseByte(s);
} else {
HEHELF = Byte.MIN_VALUE;
}
}

protected final void initHEHPS(String s) {
if (!s.trim().isEmpty()) {
HEHPS = Byte.parseByte(s);
} else {
HEHPS = Byte.MIN_VALUE;
}
}

protected final void initHEHPY(String s) {
if (!s.trim().isEmpty()) {
HEHPY = Byte.parseByte(s);
} else {
HEHPY = Byte.MIN_VALUE;
}
}

protected final void initHEHRT(String s) {
if (!s.trim().isEmpty()) {
HEHRT = Byte.parseByte(s);
} else {
HEHRT = Byte.MIN_VALUE;
}
}

protected final void initHEHRTA(String s) {
if (!s.trim().isEmpty()) {
HEHRTA = Byte.parseByte(s);
} else {
HEHRTA = Byte.MIN_VALUE;
}
}

protected final void initHEHRTB(String s) {
if (!s.trim().isEmpty()) {
HEHRTB = Byte.parseByte(s);
} else {
HEHRTB = Byte.MIN_VALUE;
}
}

protected final void initHEHRTC(String s) {
if (!s.trim().isEmpty()) {
HEHRTC = Byte.parseByte(s);
} else {
HEHRTC = Byte.MIN_VALUE;
}
}

protected final void initHEHRTD(String s) {
if (!s.trim().isEmpty()) {
HEHRTD = Byte.parseByte(s);
} else {
HEHRTD = Byte.MIN_VALUE;
}
}

protected final void initHEHRTE(String s) {
if (!s.trim().isEmpty()) {
HEHRTE = Byte.parseByte(s);
} else {
HEHRTE = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA1(String s) {
if (!s.trim().isEmpty()) {
HEJIAA1 = Byte.parseByte(s);
} else {
HEJIAA1 = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA2(String s) {
if (!s.trim().isEmpty()) {
HEJIAA2 = Byte.parseByte(s);
} else {
HEJIAA2 = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA3(String s) {
if (!s.trim().isEmpty()) {
HEJIAA3 = Byte.parseByte(s);
} else {
HEJIAA3 = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA4(String s) {
if (!s.trim().isEmpty()) {
HEJIAA4 = Byte.parseByte(s);
} else {
HEJIAA4 = Byte.MIN_VALUE;
}
}

protected final void initHEJIAA5(String s) {
if (!s.trim().isEmpty()) {
HEJIAA5 = Byte.parseByte(s);
} else {
HEJIAA5 = Byte.MIN_VALUE;
}
}

protected final void initHEJIBLH(String s) {
if (!s.trim().isEmpty()) {
HEJIBLH = Byte.parseByte(s);
} else {
HEJIBLH = Byte.MIN_VALUE;
}
}

protected final void initHEJIBLK(String s) {
if (!s.trim().isEmpty()) {
HEJIBLK = Byte.parseByte(s);
} else {
HEJIBLK = Byte.MIN_VALUE;
}
}

protected final void initHEJIBRH(String s) {
if (!s.trim().isEmpty()) {
HEJIBRH = Byte.parseByte(s);
} else {
HEJIBRH = Byte.MIN_VALUE;
}
}

protected final void initHEJIBRK(String s) {
if (!s.trim().isEmpty()) {
HEJIBRK = Byte.parseByte(s);
} else {
HEJIBRK = Byte.MIN_VALUE;
}
}

protected final void initHEJION(String s) {
if (!s.trim().isEmpty()) {
HEJION = Byte.parseByte(s);
} else {
HEJION = Byte.MIN_VALUE;
}
}

protected final void initHEKIDN(String s) {
if (!s.trim().isEmpty()) {
HEKIDN = Byte.parseByte(s);
} else {
HEKIDN = Byte.MIN_VALUE;
}
}

protected final void initHEKNEA(String s) {
if (!s.trim().isEmpty()) {
HEKNEA = Byte.parseByte(s);
} else {
HEKNEA = Byte.MIN_VALUE;
}
}

protected final void initHEKNEB(String s) {
if (!s.trim().isEmpty()) {
HEKNEB = Byte.parseByte(s);
} else {
HEKNEB = Byte.MIN_VALUE;
}
}

protected final void initHELNGB(String s) {
if (!s.trim().isEmpty()) {
HELNGB = Byte.parseByte(s);
} else {
HELNGB = Byte.MIN_VALUE;
}
}

protected final void initHELWK(String s) {
if (!s.trim().isEmpty()) {
HELWK = Byte.parseByte(s);
} else {
HELWK = Byte.MIN_VALUE;
}
}

protected final void initHEMAMB(String s) {
if (!s.trim().isEmpty()) {
HEMAMB = Byte.parseByte(s);
} else {
HEMAMB = Byte.MIN_VALUE;
}
}

protected final void initHEMDA1(String s) {
if (!s.trim().isEmpty()) {
HEMDA1 = Byte.parseByte(s);
} else {
HEMDA1 = Byte.MIN_VALUE;
}
}

protected final void initHEMDAB(String s) {
if (!s.trim().isEmpty()) {
HEMDAB = Byte.parseByte(s);
} else {
HEMDAB = Byte.MIN_VALUE;
}
}

protected final void initHEMEB(String s) {
if (!s.trim().isEmpty()) {
HEMEB = Byte.parseByte(s);
} else {
HEMEB = Byte.MIN_VALUE;
}
}

protected final void initHEMEN(String s) {
if (!s.trim().isEmpty()) {
HEMEN = Byte.parseByte(s);
} else {
HEMEN = Byte.MIN_VALUE;
}
}

protected final void initHEMWCH(String s) {
if (!s.trim().isEmpty()) {
HEMWCH = Byte.parseByte(s);
} else {
HEMWCH = Byte.MIN_VALUE;
}
}

protected final void initHEMWCOV(String s) {
if (!s.trim().isEmpty()) {
HEMWCOV = Byte.parseByte(s);
} else {
HEMWCOV = Byte.MIN_VALUE;
}
}

protected final void initHEMWM85(String s) {
if (!s.trim().isEmpty()) {
HEMWM85 = Byte.parseByte(s);
} else {
HEMWM85 = Byte.MIN_VALUE;
}
}

protected final void initHEMWM86(String s) {
if (!s.trim().isEmpty()) {
HEMWM86 = Byte.parseByte(s);
} else {
HEMWM86 = Byte.MIN_VALUE;
}
}

protected final void initHEMWMCH(String s) {
if (!s.trim().isEmpty()) {
HEMWMCH = Byte.parseByte(s);
} else {
HEMWMCH = Byte.MIN_VALUE;
}
}

protected final void initHEMWMFA(String s) {
if (!s.trim().isEmpty()) {
HEMWMFA = Byte.parseByte(s);
} else {
HEMWMFA = Byte.MIN_VALUE;
}
}

protected final void initHEMWMFR(String s) {
if (!s.trim().isEmpty()) {
HEMWMFR = Byte.parseByte(s);
} else {
HEMWMFR = Byte.MIN_VALUE;
}
}

protected final void initHEMWMLL(String s) {
if (!s.trim().isEmpty()) {
HEMWMLL = Byte.parseByte(s);
} else {
HEMWMLL = Byte.MIN_VALUE;
}
}

protected final void initHEMWMNHS(String s) {
if (!s.trim().isEmpty()) {
HEMWMNHS = Byte.parseByte(s);
} else {
HEMWMNHS = Byte.MIN_VALUE;
}
}

protected final void initHEMWMSE(String s) {
if (!s.trim().isEmpty()) {
HEMWMSE = Byte.parseByte(s);
} else {
HEMWMSE = Byte.MIN_VALUE;
}
}

protected final void initHEMWMSS(String s) {
if (!s.trim().isEmpty()) {
HEMWMSS = Byte.parseByte(s);
} else {
HEMWMSS = Byte.MIN_VALUE;
}
}

protected final void initHEMWNHS(String s) {
if (!s.trim().isEmpty()) {
HEMWNHS = Byte.parseByte(s);
} else {
HEMWNHS = Byte.MIN_VALUE;
}
}

protected final void initHEMWOT(String s) {
if (!s.trim().isEmpty()) {
HEMWOT = Byte.parseByte(s);
} else {
HEMWOT = Byte.MIN_VALUE;
}
}

protected final void initHEMWSE(String s) {
if (!s.trim().isEmpty()) {
HEMWSE = Byte.parseByte(s);
} else {
HEMWSE = Byte.MIN_VALUE;
}
}

protected final void initHEMWSS(String s) {
if (!s.trim().isEmpty()) {
HEMWSS = Byte.parseByte(s);
} else {
HEMWSS = Byte.MIN_VALUE;
}
}

protected final void initHENMMI(String s) {
if (!s.trim().isEmpty()) {
HENMMI = Byte.parseByte(s);
} else {
HENMMI = Byte.MIN_VALUE;
}
}

protected final void initHENMST(String s) {
if (!s.trim().isEmpty()) {
HENMST = Byte.parseByte(s);
} else {
HENMST = Byte.MIN_VALUE;
}
}

protected final void initHEOPCCA(String s) {
if (!s.trim().isEmpty()) {
HEOPCCA = Byte.parseByte(s);
} else {
HEOPCCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPCDI(String s) {
if (!s.trim().isEmpty()) {
HEOPCDI = Byte.parseByte(s);
} else {
HEOPCDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPCGL(String s) {
if (!s.trim().isEmpty()) {
HEOPCGL = Byte.parseByte(s);
} else {
HEOPCGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPCMD(String s) {
if (!s.trim().isEmpty()) {
HEOPCMD = Byte.parseByte(s);
} else {
HEOPCMD = Byte.MIN_VALUE;
}
}

protected final void initHEOPFCA(String s) {
if (!s.trim().isEmpty()) {
HEOPFCA = Byte.parseByte(s);
} else {
HEOPFCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPFDI(String s) {
if (!s.trim().isEmpty()) {
HEOPFDI = Byte.parseByte(s);
} else {
HEOPFDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPFGL(String s) {
if (!s.trim().isEmpty()) {
HEOPFGL = Byte.parseByte(s);
} else {
HEOPFGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPFMD(String s) {
if (!s.trim().isEmpty()) {
HEOPFMD = Byte.parseByte(s);
} else {
HEOPFMD = Byte.MIN_VALUE;
}
}

protected final void initHEOPNCA(String s) {
if (!s.trim().isEmpty()) {
HEOPNCA = Byte.parseByte(s);
} else {
HEOPNCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPNDI(String s) {
if (!s.trim().isEmpty()) {
HEOPNDI = Byte.parseByte(s);
} else {
HEOPNDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPNGL(String s) {
if (!s.trim().isEmpty()) {
HEOPNGL = Byte.parseByte(s);
} else {
HEOPNGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPNMD(String s) {
if (!s.trim().isEmpty()) {
HEOPNMD = Byte.parseByte(s);
} else {
HEOPNMD = Byte.MIN_VALUE;
}
}

protected final void initHEOPSCA(String s) {
if (!s.trim().isEmpty()) {
HEOPSCA = Byte.parseByte(s);
} else {
HEOPSCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPSDI(String s) {
if (!s.trim().isEmpty()) {
HEOPSDI = Byte.parseByte(s);
} else {
HEOPSDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPSGL(String s) {
if (!s.trim().isEmpty()) {
HEOPSGL = Byte.parseByte(s);
} else {
HEOPSGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPSMD(String s) {
if (!s.trim().isEmpty()) {
HEOPSMD = Byte.parseByte(s);
} else {
HEOPSMD = Byte.MIN_VALUE;
}
}

protected final void initHEOPT96(String s) {
if (!s.trim().isEmpty()) {
HEOPT96 = Byte.parseByte(s);
} else {
HEOPT96 = Byte.MIN_VALUE;
}
}

protected final void initHEOPTCA(String s) {
if (!s.trim().isEmpty()) {
HEOPTCA = Byte.parseByte(s);
} else {
HEOPTCA = Byte.MIN_VALUE;
}
}

protected final void initHEOPTDI(String s) {
if (!s.trim().isEmpty()) {
HEOPTDI = Byte.parseByte(s);
} else {
HEOPTDI = Byte.MIN_VALUE;
}
}

protected final void initHEOPTGL(String s) {
if (!s.trim().isEmpty()) {
HEOPTGL = Byte.parseByte(s);
} else {
HEOPTGL = Byte.MIN_VALUE;
}
}

protected final void initHEOPTMD(String s) {
if (!s.trim().isEmpty()) {
HEOPTMD = Byte.parseByte(s);
} else {
HEOPTMD = Byte.MIN_VALUE;
}
}

protected final void initHEOSTE(String s) {
if (!s.trim().isEmpty()) {
HEOSTE = Byte.parseByte(s);
} else {
HEOSTE = Byte.MIN_VALUE;
}
}

protected final void initHEOSTEA(String s) {
if (!s.trim().isEmpty()) {
HEOSTEA = Byte.parseByte(s);
} else {
HEOSTEA = Byte.MIN_VALUE;
}
}

protected final void initHEOSTEB(String s) {
if (!s.trim().isEmpty()) {
HEOSTEB = Byte.parseByte(s);
} else {
HEOSTEB = Byte.MIN_VALUE;
}
}

protected final void initHEOSTEC(String s) {
if (!s.trim().isEmpty()) {
HEOSTEC = Byte.parseByte(s);
} else {
HEOSTEC = Byte.MIN_VALUE;
}
}

protected final void initHEOSTED(String s) {
if (!s.trim().isEmpty()) {
HEOSTED = Byte.parseByte(s);
} else {
HEOSTED = Byte.MIN_VALUE;
}
}

protected final void initHEPAB(String s) {
if (!s.trim().isEmpty()) {
HEPAB = Byte.parseByte(s);
} else {
HEPAB = Byte.MIN_VALUE;
}
}

protected final void initHEPAB1(String s) {
if (!s.trim().isEmpty()) {
HEPAB1 = Byte.parseByte(s);
} else {
HEPAB1 = Byte.MIN_VALUE;
}
}

protected final void initHEPAC(String s) {
if (!s.trim().isEmpty()) {
HEPAC = Byte.parseByte(s);
} else {
HEPAC = Byte.MIN_VALUE;
}
}

protected final void initHEPAD(String s) {
if (!s.trim().isEmpty()) {
HEPAD = Byte.parseByte(s);
} else {
HEPAD = Byte.MIN_VALUE;
}
}

protected final void initHEPAE(String s) {
if (!s.trim().isEmpty()) {
HEPAE = Byte.parseByte(s);
} else {
HEPAE = Byte.MIN_VALUE;
}
}

protected final void initHEPAF(String s) {
if (!s.trim().isEmpty()) {
HEPAF = Byte.parseByte(s);
} else {
HEPAF = Byte.MIN_VALUE;
}
}

protected final void initHEPAWAL(String s) {
if (!s.trim().isEmpty()) {
HEPAWAL = Byte.parseByte(s);
} else {
HEPAWAL = Byte.MIN_VALUE;
}
}

protected final void initHEPAWBA(String s) {
if (!s.trim().isEmpty()) {
HEPAWBA = Byte.parseByte(s);
} else {
HEPAWBA = Byte.MIN_VALUE;
}
}

protected final void initHEPAWFE(String s) {
if (!s.trim().isEmpty()) {
HEPAWFE = Byte.parseByte(s);
} else {
HEPAWFE = Byte.MIN_VALUE;
}
}

protected final void initHEPAWHI(String s) {
if (!s.trim().isEmpty()) {
HEPAWHI = Byte.parseByte(s);
} else {
HEPAWHI = Byte.MIN_VALUE;
}
}

protected final void initHEPAWKN(String s) {
if (!s.trim().isEmpty()) {
HEPAWKN = Byte.parseByte(s);
} else {
HEPAWKN = Byte.MIN_VALUE;
}
}

protected final void initHEPAWMO(String s) {
if (!s.trim().isEmpty()) {
HEPAWMO = Byte.parseByte(s);
} else {
HEPAWMO = Byte.MIN_VALUE;
}
}

protected final void initHEPAWOT(String s) {
if (!s.trim().isEmpty()) {
HEPAWOT = Byte.parseByte(s);
} else {
HEPAWOT = Byte.MIN_VALUE;
}
}

protected final void initHEPEA(String s) {
if (!s.trim().isEmpty()) {
HEPEA = Byte.parseByte(s);
} else {
HEPEA = Byte.MIN_VALUE;
}
}

protected final void initHEPEE(String s) {
if (!s.trim().isEmpty()) {
HEPEE = Byte.parseByte(s);
} else {
HEPEE = Byte.MIN_VALUE;
}
}

protected final void initHEPER(String s) {
if (!s.trim().isEmpty()) {
HEPER = Byte.parseByte(s);
} else {
HEPER = Byte.MIN_VALUE;
}
}

protected final void initHEPEY(String s) {
if (!s.trim().isEmpty()) {
HEPEY = Short.parseShort(s);
} else {
HEPEY = Short.MIN_VALUE;
}
}

protected final void initHEPRO(String s) {
if (!s.trim().isEmpty()) {
HEPRO = Byte.parseByte(s);
} else {
HEPRO = Byte.MIN_VALUE;
}
}

protected final void initHEPSY95(String s) {
if (!s.trim().isEmpty()) {
HEPSY95 = Byte.parseByte(s);
} else {
HEPSY95 = Byte.MIN_VALUE;
}
}

protected final void initHEPSYA(String s) {
if (!s.trim().isEmpty()) {
HEPSYA = Byte.parseByte(s);
} else {
HEPSYA = Byte.MIN_VALUE;
}
}

protected final void initHEPSYAN(String s) {
if (!s.trim().isEmpty()) {
HEPSYAN = Byte.parseByte(s);
} else {
HEPSYAN = Byte.MIN_VALUE;
}
}

protected final void initHEPSYB(String s) {
if (!s.trim().isEmpty()) {
HEPSYB = Byte.parseByte(s);
} else {
HEPSYB = Byte.MIN_VALUE;
}
}

protected final void initHEPSYC(String s) {
if (!s.trim().isEmpty()) {
HEPSYC = Byte.parseByte(s);
} else {
HEPSYC = Byte.MIN_VALUE;
}
}

protected final void initHEPSYD(String s) {
if (!s.trim().isEmpty()) {
HEPSYD = Byte.parseByte(s);
} else {
HEPSYD = Byte.MIN_VALUE;
}
}

protected final void initHEPSYDE(String s) {
if (!s.trim().isEmpty()) {
HEPSYDE = Byte.parseByte(s);
} else {
HEPSYDE = Byte.MIN_VALUE;
}
}

protected final void initHEPSYE(String s) {
if (!s.trim().isEmpty()) {
HEPSYE = Byte.parseByte(s);
} else {
HEPSYE = Byte.MIN_VALUE;
}
}

protected final void initHEPSYEM(String s) {
if (!s.trim().isEmpty()) {
HEPSYEM = Byte.parseByte(s);
} else {
HEPSYEM = Byte.MIN_VALUE;
}
}

protected final void initHEPSYHA(String s) {
if (!s.trim().isEmpty()) {
HEPSYHA = Byte.parseByte(s);
} else {
HEPSYHA = Byte.MIN_VALUE;
}
}

protected final void initHEPSYMA(String s) {
if (!s.trim().isEmpty()) {
HEPSYMA = Byte.parseByte(s);
} else {
HEPSYMA = Byte.MIN_VALUE;
}
}

protected final void initHEPSYMO(String s) {
if (!s.trim().isEmpty()) {
HEPSYMO = Byte.parseByte(s);
} else {
HEPSYMO = Byte.MIN_VALUE;
}
}

protected final void initHEPSYPS(String s) {
if (!s.trim().isEmpty()) {
HEPSYPS = Byte.parseByte(s);
} else {
HEPSYPS = Byte.MIN_VALUE;
}
}

protected final void initHEPSYSC(String s) {
if (!s.trim().isEmpty()) {
HEPSYSC = Byte.parseByte(s);
} else {
HEPSYSC = Byte.MIN_VALUE;
}
}

protected final void initHESKD(String s) {
if (!s.trim().isEmpty()) {
HESKD = Byte.parseByte(s);
} else {
HESKD = Byte.MIN_VALUE;
}
}

protected final void initHESKE(String s) {
if (!s.trim().isEmpty()) {
HESKE = Byte.parseByte(s);
} else {
HESKE = Byte.MIN_VALUE;
}
}

protected final void initHESKF(String s) {
if (!s.trim().isEmpty()) {
HESKF = Byte.parseByte(s);
} else {
HESKF = Byte.MIN_VALUE;
}
}

protected final void initHESLPA(String s) {
if (!s.trim().isEmpty()) {
HESLPA = Byte.parseByte(s);
} else {
HESLPA = Byte.MIN_VALUE;
}
}

protected final void initHESLPB(String s) {
if (!s.trim().isEmpty()) {
HESLPB = Byte.parseByte(s);
} else {
HESLPB = Byte.MIN_VALUE;
}
}

protected final void initHESLPC(String s) {
if (!s.trim().isEmpty()) {
HESLPC = Byte.parseByte(s);
} else {
HESLPC = Byte.MIN_VALUE;
}
}

protected final void initHESLPD(String s) {
if (!s.trim().isEmpty()) {
HESLPD = Byte.parseByte(s);
} else {
HESLPD = Byte.MIN_VALUE;
}
}

protected final void initHESLPE(String s) {
if (!s.trim().isEmpty()) {
HESLPE = Double.parseDouble(s);
} else {
HESLPE = Double.NaN;
}
}

protected final void initHESLPF(String s) {
if (!s.trim().isEmpty()) {
HESLPF = Byte.parseByte(s);
} else {
HESLPF = Byte.MIN_VALUE;
}
}

protected final void initHESLPX(String s) {
if (!s.trim().isEmpty()) {
HESLPX = Byte.parseByte(s);
} else {
HESLPX = Byte.MIN_VALUE;
}
}

protected final void initHESSME(String s) {
if (!s.trim().isEmpty()) {
HESSME = Byte.parseByte(s);
} else {
HESSME = Byte.MIN_VALUE;
}
}

protected final void initHESTAS(String s) {
if (!s.trim().isEmpty()) {
HESTAS = Byte.parseByte(s);
} else {
HESTAS = Byte.MIN_VALUE;
}
}

protected final void initHESTOP(String s) {
if (!s.trim().isEmpty()) {
HESTOP = Byte.parseByte(s);
} else {
HESTOP = Byte.MIN_VALUE;
}
}

protected final void initHESUG(String s) {
if (!s.trim().isEmpty()) {
HESUG = Byte.parseByte(s);
} else {
HESUG = Byte.MIN_VALUE;
}
}

protected final void initHESUGA(String s) {
if (!s.trim().isEmpty()) {
HESUGA = Byte.parseByte(s);
} else {
HESUGA = Byte.MIN_VALUE;
}
}

protected final void initHESWGH(String s) {
if (!s.trim().isEmpty()) {
HESWGH = Byte.parseByte(s);
} else {
HESWGH = Byte.MIN_VALUE;
}
}

protected final void initHESWGHA(String s) {
if (!s.trim().isEmpty()) {
HESWGHA = Byte.parseByte(s);
} else {
HESWGHA = Byte.MIN_VALUE;
}
}

protected final void initHETEMP(String s) {
if (!s.trim().isEmpty()) {
HETEMP = Byte.parseByte(s);
} else {
HETEMP = Byte.MIN_VALUE;
}
}

protected final void initHEWEE(String s) {
if (!s.trim().isEmpty()) {
HEWEE = Byte.parseByte(s);
} else {
HEWEE = Byte.MIN_VALUE;
}
}

protected final void initHEWEEA(String s) {
if (!s.trim().isEmpty()) {
HEWEEA = Byte.parseByte(s);
} else {
HEWEEA = Byte.MIN_VALUE;
}
}

protected final void initHEZICH(String s) {
if (!s.trim().isEmpty()) {
HEZICH = Byte.parseByte(s);
} else {
HEZICH = Byte.MIN_VALUE;
}
}

protected final void initHEZICOV(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HEZICOV = false;
} else {
HEZICOV = true;
}
}
}

protected final void initHEZIM85(String s) {
if (!s.trim().isEmpty()) {
HEZIM85 = Byte.parseByte(s);
} else {
HEZIM85 = Byte.MIN_VALUE;
}
}

protected final void initHEZIM86(String s) {
if (!s.trim().isEmpty()) {
HEZIM86 = Byte.parseByte(s);
} else {
HEZIM86 = Byte.MIN_VALUE;
}
}

protected final void initHEZIMCH(String s) {
if (!s.trim().isEmpty()) {
HEZIMCH = Byte.parseByte(s);
} else {
HEZIMCH = Byte.MIN_VALUE;
}
}

protected final void initHEZIMFA(String s) {
if (!s.trim().isEmpty()) {
HEZIMFA = Byte.parseByte(s);
} else {
HEZIMFA = Byte.MIN_VALUE;
}
}

protected final void initHEZIMFR(String s) {
if (!s.trim().isEmpty()) {
HEZIMFR = Byte.parseByte(s);
} else {
HEZIMFR = Byte.MIN_VALUE;
}
}

protected final void initHEZIMLL(String s) {
if (!s.trim().isEmpty()) {
HEZIMLL = Byte.parseByte(s);
} else {
HEZIMLL = Byte.MIN_VALUE;
}
}

protected final void initHEZIMNHS(String s) {
if (!s.trim().isEmpty()) {
HEZIMNHS = Byte.parseByte(s);
} else {
HEZIMNHS = Byte.MIN_VALUE;
}
}

protected final void initHEZIMSE(String s) {
if (!s.trim().isEmpty()) {
HEZIMSE = Byte.parseByte(s);
} else {
HEZIMSE = Byte.MIN_VALUE;
}
}

protected final void initHEZIMSS(String s) {
if (!s.trim().isEmpty()) {
HEZIMSS = Byte.parseByte(s);
} else {
HEZIMSS = Byte.MIN_VALUE;
}
}

protected final void initHEZINHS(String s) {
if (!s.trim().isEmpty()) {
HEZINHS = Byte.parseByte(s);
} else {
HEZINHS = Byte.MIN_VALUE;
}
}

protected final void initHEZIOT(String s) {
if (!s.trim().isEmpty()) {
HEZIOT = Byte.parseByte(s);
} else {
HEZIOT = Byte.MIN_VALUE;
}
}

protected final void initHEZISE(String s) {
if (!s.trim().isEmpty()) {
HEZISE = Byte.parseByte(s);
} else {
HEZISE = Byte.MIN_VALUE;
}
}

protected final void initHEZISS(String s) {
if (!s.trim().isEmpty()) {
HEZISS = Byte.parseByte(s);
} else {
HEZISS = Byte.MIN_VALUE;
}
}

protected final void initHGB(String s) {
if (!s.trim().isEmpty()) {
HGB = Double.parseDouble(s);
} else {
HGB = Double.NaN;
}
}

protected final void initHOADC96(String s) {
if (!s.trim().isEmpty()) {
HOADC96 = Byte.parseByte(s);
} else {
HOADC96 = Byte.MIN_VALUE;
}
}

protected final void initHOADCAD(String s) {
if (!s.trim().isEmpty()) {
HOADCAD = Byte.parseByte(s);
} else {
HOADCAD = Byte.MIN_VALUE;
}
}

protected final void initHOADCAP(String s) {
if (!s.trim().isEmpty()) {
HOADCAP = Byte.parseByte(s);
} else {
HOADCAP = Byte.MIN_VALUE;
}
}

protected final void initHOADCLI(String s) {
if (!s.trim().isEmpty()) {
HOADCLI = Byte.parseByte(s);
} else {
HOADCLI = Byte.MIN_VALUE;
}
}

protected final void initHOADCRS(String s) {
if (!s.trim().isEmpty()) {
HOADCRS = Byte.parseByte(s);
} else {
HOADCRS = Byte.MIN_VALUE;
}
}

protected final void initHOADCSH(String s) {
if (!s.trim().isEmpty()) {
HOADCSH = Byte.parseByte(s);
} else {
HOADCSH = Byte.MIN_VALUE;
}
}

protected final void initHOADCWD(String s) {
if (!s.trim().isEmpty()) {
HOADCWD = Byte.parseByte(s);
} else {
HOADCWD = Byte.MIN_VALUE;
}
}

protected final void initHOADCWS(String s) {
if (!s.trim().isEmpty()) {
HOADCWS = Byte.parseByte(s);
} else {
HOADCWS = Byte.MIN_VALUE;
}
}

protected final void initHOADD95(String s) {
if (!s.trim().isEmpty()) {
HOADD95 = Byte.parseByte(s);
} else {
HOADD95 = Byte.MIN_VALUE;
}
}

protected final void initHOADD96(String s) {
if (!s.trim().isEmpty()) {
HOADD96 = Byte.parseByte(s);
} else {
HOADD96 = Byte.MIN_VALUE;
}
}

protected final void initHOADDAD(String s) {
if (!s.trim().isEmpty()) {
HOADDAD = Byte.parseByte(s);
} else {
HOADDAD = Byte.MIN_VALUE;
}
}

protected final void initHOADDBL(String s) {
if (!s.trim().isEmpty()) {
HOADDBL = Byte.parseByte(s);
} else {
HOADDBL = Byte.MIN_VALUE;
}
}

protected final void initHOADDBS(String s) {
if (!s.trim().isEmpty()) {
HOADDBS = Byte.parseByte(s);
} else {
HOADDBS = Byte.MIN_VALUE;
}
}

protected final void initHOADDCL(String s) {
if (!s.trim().isEmpty()) {
HOADDCL = Byte.parseByte(s);
} else {
HOADDCL = Byte.MIN_VALUE;
}
}

protected final void initHOADDCO(String s) {
if (!s.trim().isEmpty()) {
HOADDCO = Byte.parseByte(s);
} else {
HOADDCO = Byte.MIN_VALUE;
}
}

protected final void initHOADDHO(String s) {
if (!s.trim().isEmpty()) {
HOADDHO = Byte.parseByte(s);
} else {
HOADDHO = Byte.MIN_VALUE;
}
}

protected final void initHOADDKM(String s) {
if (!s.trim().isEmpty()) {
HOADDKM = Byte.parseByte(s);
} else {
HOADDKM = Byte.MIN_VALUE;
}
}

protected final void initHOADHR(String s) {
if (!s.trim().isEmpty()) {
HOADHR = Byte.parseByte(s);
} else {
HOADHR = Byte.MIN_VALUE;
}
}

protected final void initHOADS(String s) {
if (!s.trim().isEmpty()) {
HOADS = Byte.parseByte(s);
} else {
HOADS = Byte.MIN_VALUE;
}
}

protected final void initHOAIAD95(String s) {
if (!s.trim().isEmpty()) {
HOAIAD95 = Byte.parseByte(s);
} else {
HOAIAD95 = Byte.MIN_VALUE;
}
}

protected final void initHOAIADAL(String s) {
if (!s.trim().isEmpty()) {
HOAIADAL = Byte.parseByte(s);
} else {
HOAIADAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIADHS(String s) {
if (!s.trim().isEmpty()) {
HOAIADHS = Byte.parseByte(s);
} else {
HOAIADHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIADLL(String s) {
if (!s.trim().isEmpty()) {
HOAIADLL = Byte.parseByte(s);
} else {
HOAIADLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIADSS(String s) {
if (!s.trim().isEmpty()) {
HOAIADSS = Byte.parseByte(s);
} else {
HOAIADSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIADYS(String s) {
if (!s.trim().isEmpty()) {
HOAIADYS = Byte.parseByte(s);
} else {
HOAIADYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIAMAP85(String s) {
if (!s.trim().isEmpty()) {
HOAIAMAP85 = Byte.parseByte(s);
} else {
HOAIAMAP85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIAMAP86(String s) {
if (!s.trim().isEmpty()) {
HOAIAMAP86 = Byte.parseByte(s);
} else {
HOAIAMAP86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIAP95(String s) {
if (!s.trim().isEmpty()) {
HOAIAP95 = Byte.parseByte(s);
} else {
HOAIAP95 = Byte.MIN_VALUE;
}
}

protected final void initHOAIAPAL(String s) {
if (!s.trim().isEmpty()) {
HOAIAPAL = Byte.parseByte(s);
} else {
HOAIAPAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIAPHS(String s) {
if (!s.trim().isEmpty()) {
HOAIAPHS = Byte.parseByte(s);
} else {
HOAIAPHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIAPLL(String s) {
if (!s.trim().isEmpty()) {
HOAIAPLL = Byte.parseByte(s);
} else {
HOAIAPLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIAPSS(String s) {
if (!s.trim().isEmpty()) {
HOAIAPSS = Byte.parseByte(s);
} else {
HOAIAPSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIAPYS(String s) {
if (!s.trim().isEmpty()) {
HOAIAPYS = Byte.parseByte(s);
} else {
HOAIAPYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIBL95(String s) {
if (!s.trim().isEmpty()) {
HOAIBL95 = Byte.parseByte(s);
} else {
HOAIBL95 = Byte.MIN_VALUE;
}
}

protected final void initHOAIBLAL(String s) {
if (!s.trim().isEmpty()) {
HOAIBLAL = Byte.parseByte(s);
} else {
HOAIBLAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIBLHS(String s) {
if (!s.trim().isEmpty()) {
HOAIBLHS = Byte.parseByte(s);
} else {
HOAIBLHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIBLLL(String s) {
if (!s.trim().isEmpty()) {
HOAIBLLL = Byte.parseByte(s);
} else {
HOAIBLLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIBLSS(String s) {
if (!s.trim().isEmpty()) {
HOAIBLSS = Byte.parseByte(s);
} else {
HOAIBLSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIBLYS(String s) {
if (!s.trim().isEmpty()) {
HOAIBLYS = Byte.parseByte(s);
} else {
HOAIBLYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIBS95(String s) {
if (!s.trim().isEmpty()) {
HOAIBS95 = Byte.parseByte(s);
} else {
HOAIBS95 = Byte.MIN_VALUE;
}
}

protected final void initHOAIBSAL(String s) {
if (!s.trim().isEmpty()) {
HOAIBSAL = Byte.parseByte(s);
} else {
HOAIBSAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIBSHS(String s) {
if (!s.trim().isEmpty()) {
HOAIBSHS = Byte.parseByte(s);
} else {
HOAIBSHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIBSLL(String s) {
if (!s.trim().isEmpty()) {
HOAIBSLL = Byte.parseByte(s);
} else {
HOAIBSLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIBSSS(String s) {
if (!s.trim().isEmpty()) {
HOAIBSSS = Byte.parseByte(s);
} else {
HOAIBSSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIBSYS(String s) {
if (!s.trim().isEmpty()) {
HOAIBSYS = Byte.parseByte(s);
} else {
HOAIBSYS = Byte.MIN_VALUE;
}
}

protected final void initHOAICL95(String s) {
if (!s.trim().isEmpty()) {
HOAICL95 = Byte.parseByte(s);
} else {
HOAICL95 = Byte.MIN_VALUE;
}
}

protected final void initHOAICLAL(String s) {
if (!s.trim().isEmpty()) {
HOAICLAL = Byte.parseByte(s);
} else {
HOAICLAL = Byte.MIN_VALUE;
}
}

protected final void initHOAICLHS(String s) {
if (!s.trim().isEmpty()) {
HOAICLHS = Byte.parseByte(s);
} else {
HOAICLHS = Byte.MIN_VALUE;
}
}

protected final void initHOAICLLL(String s) {
if (!s.trim().isEmpty()) {
HOAICLLL = Byte.parseByte(s);
} else {
HOAICLLL = Byte.MIN_VALUE;
}
}

protected final void initHOAICLSS(String s) {
if (!s.trim().isEmpty()) {
HOAICLSS = Byte.parseByte(s);
} else {
HOAICLSS = Byte.MIN_VALUE;
}
}

protected final void initHOAICLYS(String s) {
if (!s.trim().isEmpty()) {
HOAICLYS = Byte.parseByte(s);
} else {
HOAICLYS = Byte.MIN_VALUE;
}
}

protected final void initHOAICO95(String s) {
if (!s.trim().isEmpty()) {
HOAICO95 = Byte.parseByte(s);
} else {
HOAICO95 = Byte.MIN_VALUE;
}
}

protected final void initHOAICOAL(String s) {
if (!s.trim().isEmpty()) {
HOAICOAL = Byte.parseByte(s);
} else {
HOAICOAL = Byte.MIN_VALUE;
}
}

protected final void initHOAICOHS(String s) {
if (!s.trim().isEmpty()) {
HOAICOHS = Byte.parseByte(s);
} else {
HOAICOHS = Byte.MIN_VALUE;
}
}

protected final void initHOAICOLL(String s) {
if (!s.trim().isEmpty()) {
HOAICOLL = Byte.parseByte(s);
} else {
HOAICOLL = Byte.MIN_VALUE;
}
}

protected final void initHOAICOSS(String s) {
if (!s.trim().isEmpty()) {
HOAICOSS = Byte.parseByte(s);
} else {
HOAICOSS = Byte.MIN_VALUE;
}
}

protected final void initHOAICOYS(String s) {
if (!s.trim().isEmpty()) {
HOAICOYS = Byte.parseByte(s);
} else {
HOAICOYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIDV95(String s) {
if (!s.trim().isEmpty()) {
HOAIDV95 = Byte.parseByte(s);
} else {
HOAIDV95 = Byte.MIN_VALUE;
}
}

protected final void initHOAIDVAL(String s) {
if (!s.trim().isEmpty()) {
HOAIDVAL = Byte.parseByte(s);
} else {
HOAIDVAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIDVHS(String s) {
if (!s.trim().isEmpty()) {
HOAIDVHS = Byte.parseByte(s);
} else {
HOAIDVHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIDVLL(String s) {
if (!s.trim().isEmpty()) {
HOAIDVLL = Byte.parseByte(s);
} else {
HOAIDVLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIDVSS(String s) {
if (!s.trim().isEmpty()) {
HOAIDVSS = Byte.parseByte(s);
} else {
HOAIDVSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIDVYS(String s) {
if (!s.trim().isEmpty()) {
HOAIDVYS = Byte.parseByte(s);
} else {
HOAIDVYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIHO95(String s) {
if (!s.trim().isEmpty()) {
HOAIHO95 = Byte.parseByte(s);
} else {
HOAIHO95 = Byte.MIN_VALUE;
}
}

protected final void initHOAIHOAL(String s) {
if (!s.trim().isEmpty()) {
HOAIHOAL = Byte.parseByte(s);
} else {
HOAIHOAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIHOHS(String s) {
if (!s.trim().isEmpty()) {
HOAIHOHS = Byte.parseByte(s);
} else {
HOAIHOHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIHOLL(String s) {
if (!s.trim().isEmpty()) {
HOAIHOLL = Byte.parseByte(s);
} else {
HOAIHOLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIHOSS(String s) {
if (!s.trim().isEmpty()) {
HOAIHOSS = Byte.parseByte(s);
} else {
HOAIHOSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIHOYS(String s) {
if (!s.trim().isEmpty()) {
HOAIHOYS = Byte.parseByte(s);
} else {
HOAIHOYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIHR95(String s) {
if (!s.trim().isEmpty()) {
HOAIHR95 = Byte.parseByte(s);
} else {
HOAIHR95 = Byte.MIN_VALUE;
}
}

protected final void initHOAIHRAL(String s) {
if (!s.trim().isEmpty()) {
HOAIHRAL = Byte.parseByte(s);
} else {
HOAIHRAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIHRHS(String s) {
if (!s.trim().isEmpty()) {
HOAIHRHS = Byte.parseByte(s);
} else {
HOAIHRHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIHRLL(String s) {
if (!s.trim().isEmpty()) {
HOAIHRLL = Byte.parseByte(s);
} else {
HOAIHRLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIHRSS(String s) {
if (!s.trim().isEmpty()) {
HOAIHRSS = Byte.parseByte(s);
} else {
HOAIHRSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIHRYS(String s) {
if (!s.trim().isEmpty()) {
HOAIHRYS = Byte.parseByte(s);
} else {
HOAIHRYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIKM95(String s) {
if (!s.trim().isEmpty()) {
HOAIKM95 = Byte.parseByte(s);
} else {
HOAIKM95 = Byte.MIN_VALUE;
}
}

protected final void initHOAIKMAL(String s) {
if (!s.trim().isEmpty()) {
HOAIKMAL = Byte.parseByte(s);
} else {
HOAIKMAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIKMHS(String s) {
if (!s.trim().isEmpty()) {
HOAIKMHS = Byte.parseByte(s);
} else {
HOAIKMHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIKMLL(String s) {
if (!s.trim().isEmpty()) {
HOAIKMLL = Byte.parseByte(s);
} else {
HOAIKMLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIKMSS(String s) {
if (!s.trim().isEmpty()) {
HOAIKMSS = Byte.parseByte(s);
} else {
HOAIKMSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIKMYS(String s) {
if (!s.trim().isEmpty()) {
HOAIKMYS = Byte.parseByte(s);
} else {
HOAIKMYS = Byte.MIN_VALUE;
}
}

protected final void initHOAILI95(String s) {
if (!s.trim().isEmpty()) {
HOAILI95 = Byte.parseByte(s);
} else {
HOAILI95 = Byte.MIN_VALUE;
}
}

protected final void initHOAILIAL(String s) {
if (!s.trim().isEmpty()) {
HOAILIAL = Byte.parseByte(s);
} else {
HOAILIAL = Byte.MIN_VALUE;
}
}

protected final void initHOAILIHS(String s) {
if (!s.trim().isEmpty()) {
HOAILIHS = Byte.parseByte(s);
} else {
HOAILIHS = Byte.MIN_VALUE;
}
}

protected final void initHOAILILL(String s) {
if (!s.trim().isEmpty()) {
HOAILILL = Byte.parseByte(s);
} else {
HOAILILL = Byte.MIN_VALUE;
}
}

protected final void initHOAILISS(String s) {
if (!s.trim().isEmpty()) {
HOAILISS = Byte.parseByte(s);
} else {
HOAILISS = Byte.MIN_VALUE;
}
}

protected final void initHOAILIYS(String s) {
if (!s.trim().isEmpty()) {
HOAILIYS = Byte.parseByte(s);
} else {
HOAILIYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMAD85(String s) {
if (!s.trim().isEmpty()) {
HOAIMAD85 = Byte.parseByte(s);
} else {
HOAIMAD85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMAD86(String s) {
if (!s.trim().isEmpty()) {
HOAIMAD86 = Byte.parseByte(s);
} else {
HOAIMAD86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMADAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMADAL = Byte.parseByte(s);
} else {
HOAIMADAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMADCH(String s) {
if (!s.trim().isEmpty()) {
HOAIMADCH = Byte.parseByte(s);
} else {
HOAIMADCH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMADFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMADFM = Byte.parseByte(s);
} else {
HOAIMADFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMADFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMADFR = Byte.parseByte(s);
} else {
HOAIMADFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMADFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMADFS = Byte.parseByte(s);
} else {
HOAIMADFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMADHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMADHS = Byte.parseByte(s);
} else {
HOAIMADHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMADLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMADLL = Byte.parseByte(s);
} else {
HOAIMADLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMADSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMADSS = Byte.parseByte(s);
} else {
HOAIMADSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMADYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMADYS = Byte.parseByte(s);
} else {
HOAIMADYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMAPAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMAPAL = Byte.parseByte(s);
} else {
HOAIMAPAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMAPCH(String s) {
if (!s.trim().isEmpty()) {
HOAIMAPCH = Byte.parseByte(s);
} else {
HOAIMAPCH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMAPFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMAPFM = Byte.parseByte(s);
} else {
HOAIMAPFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMAPFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMAPFR = Byte.parseByte(s);
} else {
HOAIMAPFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMAPFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMAPFS = Byte.parseByte(s);
} else {
HOAIMAPFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMAPHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMAPHS = Byte.parseByte(s);
} else {
HOAIMAPHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMAPLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMAPLL = Byte.parseByte(s);
} else {
HOAIMAPLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMAPSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMAPSS = Byte.parseByte(s);
} else {
HOAIMAPSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMAPYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMAPYS = Byte.parseByte(s);
} else {
HOAIMAPYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBL85(String s) {
if (!s.trim().isEmpty()) {
HOAIMBL85 = Byte.parseByte(s);
} else {
HOAIMBL85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBL86(String s) {
if (!s.trim().isEmpty()) {
HOAIMBL86 = Byte.parseByte(s);
} else {
HOAIMBL86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBLAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMBLAL = Byte.parseByte(s);
} else {
HOAIMBLAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBLCH(String s) {
if (!s.trim().isEmpty()) {
HOAIMBLCH = Byte.parseByte(s);
} else {
HOAIMBLCH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBLFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMBLFM = Byte.parseByte(s);
} else {
HOAIMBLFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBLFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMBLFR = Byte.parseByte(s);
} else {
HOAIMBLFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBLFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMBLFS = Byte.parseByte(s);
} else {
HOAIMBLFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBLHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMBLHS = Byte.parseByte(s);
} else {
HOAIMBLHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBLLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMBLLL = Byte.parseByte(s);
} else {
HOAIMBLLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBLSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMBLSS = Byte.parseByte(s);
} else {
HOAIMBLSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBLYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMBLYS = Byte.parseByte(s);
} else {
HOAIMBLYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBS85(String s) {
if (!s.trim().isEmpty()) {
HOAIMBS85 = Byte.parseByte(s);
} else {
HOAIMBS85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBS86(String s) {
if (!s.trim().isEmpty()) {
HOAIMBS86 = Byte.parseByte(s);
} else {
HOAIMBS86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBSAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMBSAL = Byte.parseByte(s);
} else {
HOAIMBSAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBSCH(String s) {
if (!s.trim().isEmpty()) {
HOAIMBSCH = Byte.parseByte(s);
} else {
HOAIMBSCH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBSFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMBSFM = Byte.parseByte(s);
} else {
HOAIMBSFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBSFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMBSFR = Byte.parseByte(s);
} else {
HOAIMBSFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBSFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMBSFS = Byte.parseByte(s);
} else {
HOAIMBSFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBSHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMBSHS = Byte.parseByte(s);
} else {
HOAIMBSHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBSLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMBSLL = Byte.parseByte(s);
} else {
HOAIMBSLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBSSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMBSSS = Byte.parseByte(s);
} else {
HOAIMBSSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMBSYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMBSYS = Byte.parseByte(s);
} else {
HOAIMBSYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCL85(String s) {
if (!s.trim().isEmpty()) {
HOAIMCL85 = Byte.parseByte(s);
} else {
HOAIMCL85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCL86(String s) {
if (!s.trim().isEmpty()) {
HOAIMCL86 = Byte.parseByte(s);
} else {
HOAIMCL86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCLAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMCLAL = Byte.parseByte(s);
} else {
HOAIMCLAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCLCH(String s) {
if (!s.trim().isEmpty()) {
HOAIMCLCH = Byte.parseByte(s);
} else {
HOAIMCLCH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCLFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMCLFM = Byte.parseByte(s);
} else {
HOAIMCLFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCLFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMCLFR = Byte.parseByte(s);
} else {
HOAIMCLFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCLFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMCLFS = Byte.parseByte(s);
} else {
HOAIMCLFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCLHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMCLHS = Byte.parseByte(s);
} else {
HOAIMCLHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCLLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMCLLL = Byte.parseByte(s);
} else {
HOAIMCLLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCLSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMCLSS = Byte.parseByte(s);
} else {
HOAIMCLSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCLYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMCLYS = Byte.parseByte(s);
} else {
HOAIMCLYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCO85(String s) {
if (!s.trim().isEmpty()) {
HOAIMCO85 = Byte.parseByte(s);
} else {
HOAIMCO85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCO86(String s) {
if (!s.trim().isEmpty()) {
HOAIMCO86 = Byte.parseByte(s);
} else {
HOAIMCO86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCOAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMCOAL = Byte.parseByte(s);
} else {
HOAIMCOAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCOCH(String s) {
if (!s.trim().isEmpty()) {
HOAIMCOCH = Byte.parseByte(s);
} else {
HOAIMCOCH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCOFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMCOFM = Byte.parseByte(s);
} else {
HOAIMCOFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCOFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMCOFR = Byte.parseByte(s);
} else {
HOAIMCOFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCOFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMCOFS = Byte.parseByte(s);
} else {
HOAIMCOFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCOHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMCOHS = Byte.parseByte(s);
} else {
HOAIMCOHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCOLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMCOLL = Byte.parseByte(s);
} else {
HOAIMCOLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCOSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMCOSS = Byte.parseByte(s);
} else {
HOAIMCOSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMCOYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMCOYS = Byte.parseByte(s);
} else {
HOAIMCOYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMDV85(String s) {
if (!s.trim().isEmpty()) {
HOAIMDV85 = Byte.parseByte(s);
} else {
HOAIMDV85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMDV86(String s) {
if (!s.trim().isEmpty()) {
HOAIMDV86 = Byte.parseByte(s);
} else {
HOAIMDV86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMDVAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMDVAL = Byte.parseByte(s);
} else {
HOAIMDVAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMDVCH(String s) {
if (!s.trim().isEmpty()) {
HOAIMDVCH = Byte.parseByte(s);
} else {
HOAIMDVCH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMDVFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMDVFM = Byte.parseByte(s);
} else {
HOAIMDVFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMDVFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMDVFR = Byte.parseByte(s);
} else {
HOAIMDVFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMDVFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMDVFS = Byte.parseByte(s);
} else {
HOAIMDVFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMDVHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMDVHS = Byte.parseByte(s);
} else {
HOAIMDVHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMDVLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMDVLL = Byte.parseByte(s);
} else {
HOAIMDVLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMDVSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMDVSS = Byte.parseByte(s);
} else {
HOAIMDVSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMDVYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMDVYS = Byte.parseByte(s);
} else {
HOAIMDVYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHO85(String s) {
if (!s.trim().isEmpty()) {
HOAIMHO85 = Byte.parseByte(s);
} else {
HOAIMHO85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHO86(String s) {
if (!s.trim().isEmpty()) {
HOAIMHO86 = Byte.parseByte(s);
} else {
HOAIMHO86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHOAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMHOAL = Byte.parseByte(s);
} else {
HOAIMHOAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHOCH(String s) {
if (!s.trim().isEmpty()) {
HOAIMHOCH = Byte.parseByte(s);
} else {
HOAIMHOCH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHOFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMHOFM = Byte.parseByte(s);
} else {
HOAIMHOFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHOFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMHOFR = Byte.parseByte(s);
} else {
HOAIMHOFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHOFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMHOFS = Byte.parseByte(s);
} else {
HOAIMHOFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHOHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMHOHS = Byte.parseByte(s);
} else {
HOAIMHOHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHOLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMHOLL = Byte.parseByte(s);
} else {
HOAIMHOLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHOSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMHOSS = Byte.parseByte(s);
} else {
HOAIMHOSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHOYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMHOYS = Byte.parseByte(s);
} else {
HOAIMHOYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHR85(String s) {
if (!s.trim().isEmpty()) {
HOAIMHR85 = Byte.parseByte(s);
} else {
HOAIMHR85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHR86(String s) {
if (!s.trim().isEmpty()) {
HOAIMHR86 = Byte.parseByte(s);
} else {
HOAIMHR86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHRAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMHRAL = Byte.parseByte(s);
} else {
HOAIMHRAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHRCH(String s) {
if (!s.trim().isEmpty()) {
HOAIMHRCH = Byte.parseByte(s);
} else {
HOAIMHRCH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHRFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMHRFM = Byte.parseByte(s);
} else {
HOAIMHRFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHRFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMHRFR = Byte.parseByte(s);
} else {
HOAIMHRFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHRFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMHRFS = Byte.parseByte(s);
} else {
HOAIMHRFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHRHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMHRHS = Byte.parseByte(s);
} else {
HOAIMHRHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHRLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMHRLL = Byte.parseByte(s);
} else {
HOAIMHRLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHRSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMHRSS = Byte.parseByte(s);
} else {
HOAIMHRSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMHRYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMHRYS = Byte.parseByte(s);
} else {
HOAIMHRYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMKM85(String s) {
if (!s.trim().isEmpty()) {
HOAIMKM85 = Byte.parseByte(s);
} else {
HOAIMKM85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMKM86(String s) {
if (!s.trim().isEmpty()) {
HOAIMKM86 = Byte.parseByte(s);
} else {
HOAIMKM86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMKMAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMKMAL = Byte.parseByte(s);
} else {
HOAIMKMAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMKMCH(String s) {
if (!s.trim().isEmpty()) {
HOAIMKMCH = Byte.parseByte(s);
} else {
HOAIMKMCH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMKMFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMKMFM = Byte.parseByte(s);
} else {
HOAIMKMFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMKMFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMKMFR = Byte.parseByte(s);
} else {
HOAIMKMFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMKMFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMKMFS = Byte.parseByte(s);
} else {
HOAIMKMFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMKMHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMKMHS = Byte.parseByte(s);
} else {
HOAIMKMHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMKMLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMKMLL = Byte.parseByte(s);
} else {
HOAIMKMLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMKMSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMKMSS = Byte.parseByte(s);
} else {
HOAIMKMSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMKMYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMKMYS = Byte.parseByte(s);
} else {
HOAIMKMYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMLI85(String s) {
if (!s.trim().isEmpty()) {
HOAIMLI85 = Byte.parseByte(s);
} else {
HOAIMLI85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMLI86(String s) {
if (!s.trim().isEmpty()) {
HOAIMLI86 = Byte.parseByte(s);
} else {
HOAIMLI86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMLIAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMLIAL = Byte.parseByte(s);
} else {
HOAIMLIAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMLICH(String s) {
if (!s.trim().isEmpty()) {
HOAIMLICH = Byte.parseByte(s);
} else {
HOAIMLICH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMLIFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMLIFM = Byte.parseByte(s);
} else {
HOAIMLIFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMLIFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMLIFR = Byte.parseByte(s);
} else {
HOAIMLIFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMLIFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMLIFS = Byte.parseByte(s);
} else {
HOAIMLIFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMLIHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMLIHS = Byte.parseByte(s);
} else {
HOAIMLIHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMLILL(String s) {
if (!s.trim().isEmpty()) {
HOAIMLILL = Byte.parseByte(s);
} else {
HOAIMLILL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMLISS(String s) {
if (!s.trim().isEmpty()) {
HOAIMLISS = Byte.parseByte(s);
} else {
HOAIMLISS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMLIYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMLIYS = Byte.parseByte(s);
} else {
HOAIMLIYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMOT85(String s) {
if (!s.trim().isEmpty()) {
HOAIMOT85 = Byte.parseByte(s);
} else {
HOAIMOT85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMOT86(String s) {
if (!s.trim().isEmpty()) {
HOAIMOT86 = Byte.parseByte(s);
} else {
HOAIMOT86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMOTAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMOTAL = Byte.parseByte(s);
} else {
HOAIMOTAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMOTCH(String s) {
if (!s.trim().isEmpty()) {
HOAIMOTCH = Byte.parseByte(s);
} else {
HOAIMOTCH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMOTFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMOTFM = Byte.parseByte(s);
} else {
HOAIMOTFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMOTFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMOTFR = Byte.parseByte(s);
} else {
HOAIMOTFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMOTFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMOTFS = Byte.parseByte(s);
} else {
HOAIMOTFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMOTHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMOTHS = Byte.parseByte(s);
} else {
HOAIMOTHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMOTLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMOTLL = Byte.parseByte(s);
} else {
HOAIMOTLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMOTSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMOTSS = Byte.parseByte(s);
} else {
HOAIMOTSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMOTYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMOTYS = Byte.parseByte(s);
} else {
HOAIMOTYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMRS85(String s) {
if (!s.trim().isEmpty()) {
HOAIMRS85 = Byte.parseByte(s);
} else {
HOAIMRS85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMRS86(String s) {
if (!s.trim().isEmpty()) {
HOAIMRS86 = Byte.parseByte(s);
} else {
HOAIMRS86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMRSAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMRSAL = Byte.parseByte(s);
} else {
HOAIMRSAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMRSCH(String s) {
if (!s.trim().isEmpty()) {
HOAIMRSCH = Byte.parseByte(s);
} else {
HOAIMRSCH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMRSFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMRSFM = Byte.parseByte(s);
} else {
HOAIMRSFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMRSFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMRSFR = Byte.parseByte(s);
} else {
HOAIMRSFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMRSFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMRSFS = Byte.parseByte(s);
} else {
HOAIMRSFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMRSHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMRSHS = Byte.parseByte(s);
} else {
HOAIMRSHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMRSLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMRSLL = Byte.parseByte(s);
} else {
HOAIMRSLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMRSSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMRSSS = Byte.parseByte(s);
} else {
HOAIMRSSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMRSYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMRSYS = Byte.parseByte(s);
} else {
HOAIMRSYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMSH85(String s) {
if (!s.trim().isEmpty()) {
HOAIMSH85 = Byte.parseByte(s);
} else {
HOAIMSH85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMSH86(String s) {
if (!s.trim().isEmpty()) {
HOAIMSH86 = Byte.parseByte(s);
} else {
HOAIMSH86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMSHAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMSHAL = Byte.parseByte(s);
} else {
HOAIMSHAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMSHCH(String s) {
if (!s.trim().isEmpty()) {
HOAIMSHCH = Byte.parseByte(s);
} else {
HOAIMSHCH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMSHFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMSHFM = Byte.parseByte(s);
} else {
HOAIMSHFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMSHFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMSHFR = Byte.parseByte(s);
} else {
HOAIMSHFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMSHFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMSHFS = Byte.parseByte(s);
} else {
HOAIMSHFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMSHHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMSHHS = Byte.parseByte(s);
} else {
HOAIMSHHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMSHLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMSHLL = Byte.parseByte(s);
} else {
HOAIMSHLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMSHSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMSHSS = Byte.parseByte(s);
} else {
HOAIMSHSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMSHYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMSHYS = Byte.parseByte(s);
} else {
HOAIMSHYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWD85(String s) {
if (!s.trim().isEmpty()) {
HOAIMWD85 = Byte.parseByte(s);
} else {
HOAIMWD85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWD86(String s) {
if (!s.trim().isEmpty()) {
HOAIMWD86 = Byte.parseByte(s);
} else {
HOAIMWD86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWDAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMWDAL = Byte.parseByte(s);
} else {
HOAIMWDAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWDHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMWDHS = Byte.parseByte(s);
} else {
HOAIMWDHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWDLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMWDLL = Byte.parseByte(s);
} else {
HOAIMWDLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWDSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMWDSS = Byte.parseByte(s);
} else {
HOAIMWDSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWDYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMWDYS = Byte.parseByte(s);
} else {
HOAIMWDYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWS85(String s) {
if (!s.trim().isEmpty()) {
HOAIMWS85 = Byte.parseByte(s);
} else {
HOAIMWS85 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWS86(String s) {
if (!s.trim().isEmpty()) {
HOAIMWS86 = Byte.parseByte(s);
} else {
HOAIMWS86 = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWSAL(String s) {
if (!s.trim().isEmpty()) {
HOAIMWSAL = Byte.parseByte(s);
} else {
HOAIMWSAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWSCH(String s) {
if (!s.trim().isEmpty()) {
HOAIMWSCH = Byte.parseByte(s);
} else {
HOAIMWSCH = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWSFM(String s) {
if (!s.trim().isEmpty()) {
HOAIMWSFM = Byte.parseByte(s);
} else {
HOAIMWSFM = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWSFR(String s) {
if (!s.trim().isEmpty()) {
HOAIMWSFR = Byte.parseByte(s);
} else {
HOAIMWSFR = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWSFS(String s) {
if (!s.trim().isEmpty()) {
HOAIMWSFS = Byte.parseByte(s);
} else {
HOAIMWSFS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWSHS(String s) {
if (!s.trim().isEmpty()) {
HOAIMWSHS = Byte.parseByte(s);
} else {
HOAIMWSHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWSLL(String s) {
if (!s.trim().isEmpty()) {
HOAIMWSLL = Byte.parseByte(s);
} else {
HOAIMWSLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWSSS(String s) {
if (!s.trim().isEmpty()) {
HOAIMWSSS = Byte.parseByte(s);
} else {
HOAIMWSSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIMWSYS(String s) {
if (!s.trim().isEmpty()) {
HOAIMWSYS = Byte.parseByte(s);
} else {
HOAIMWSYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIOT95(String s) {
if (!s.trim().isEmpty()) {
HOAIOT95 = Byte.parseByte(s);
} else {
HOAIOT95 = Byte.MIN_VALUE;
}
}

protected final void initHOAIOTAL(String s) {
if (!s.trim().isEmpty()) {
HOAIOTAL = Byte.parseByte(s);
} else {
HOAIOTAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIOTHS(String s) {
if (!s.trim().isEmpty()) {
HOAIOTHS = Byte.parseByte(s);
} else {
HOAIOTHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIOTLL(String s) {
if (!s.trim().isEmpty()) {
HOAIOTLL = Byte.parseByte(s);
} else {
HOAIOTLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIOTSS(String s) {
if (!s.trim().isEmpty()) {
HOAIOTSS = Byte.parseByte(s);
} else {
HOAIOTSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIOTYS(String s) {
if (!s.trim().isEmpty()) {
HOAIOTYS = Byte.parseByte(s);
} else {
HOAIOTYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIRS95(String s) {
if (!s.trim().isEmpty()) {
HOAIRS95 = Byte.parseByte(s);
} else {
HOAIRS95 = Byte.MIN_VALUE;
}
}

protected final void initHOAIRSAL(String s) {
if (!s.trim().isEmpty()) {
HOAIRSAL = Byte.parseByte(s);
} else {
HOAIRSAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIRSHS(String s) {
if (!s.trim().isEmpty()) {
HOAIRSHS = Byte.parseByte(s);
} else {
HOAIRSHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIRSLL(String s) {
if (!s.trim().isEmpty()) {
HOAIRSLL = Byte.parseByte(s);
} else {
HOAIRSLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIRSSS(String s) {
if (!s.trim().isEmpty()) {
HOAIRSSS = Byte.parseByte(s);
} else {
HOAIRSSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIRSYS(String s) {
if (!s.trim().isEmpty()) {
HOAIRSYS = Byte.parseByte(s);
} else {
HOAIRSYS = Byte.MIN_VALUE;
}
}

protected final void initHOAISH95(String s) {
if (!s.trim().isEmpty()) {
HOAISH95 = Byte.parseByte(s);
} else {
HOAISH95 = Byte.MIN_VALUE;
}
}

protected final void initHOAISHAL(String s) {
if (!s.trim().isEmpty()) {
HOAISHAL = Byte.parseByte(s);
} else {
HOAISHAL = Byte.MIN_VALUE;
}
}

protected final void initHOAISHHS(String s) {
if (!s.trim().isEmpty()) {
HOAISHHS = Byte.parseByte(s);
} else {
HOAISHHS = Byte.MIN_VALUE;
}
}

protected final void initHOAISHLL(String s) {
if (!s.trim().isEmpty()) {
HOAISHLL = Byte.parseByte(s);
} else {
HOAISHLL = Byte.MIN_VALUE;
}
}

protected final void initHOAISHSS(String s) {
if (!s.trim().isEmpty()) {
HOAISHSS = Byte.parseByte(s);
} else {
HOAISHSS = Byte.MIN_VALUE;
}
}

protected final void initHOAISHYS(String s) {
if (!s.trim().isEmpty()) {
HOAISHYS = Byte.parseByte(s);
} else {
HOAISHYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIWD95(String s) {
if (!s.trim().isEmpty()) {
HOAIWD95 = Byte.parseByte(s);
} else {
HOAIWD95 = Byte.MIN_VALUE;
}
}

protected final void initHOAIWDAL(String s) {
if (!s.trim().isEmpty()) {
HOAIWDAL = Byte.parseByte(s);
} else {
HOAIWDAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIWDHS(String s) {
if (!s.trim().isEmpty()) {
HOAIWDHS = Byte.parseByte(s);
} else {
HOAIWDHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIWDLL(String s) {
if (!s.trim().isEmpty()) {
HOAIWDLL = Byte.parseByte(s);
} else {
HOAIWDLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIWDSS(String s) {
if (!s.trim().isEmpty()) {
HOAIWDSS = Byte.parseByte(s);
} else {
HOAIWDSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIWDYS(String s) {
if (!s.trim().isEmpty()) {
HOAIWDYS = Byte.parseByte(s);
} else {
HOAIWDYS = Byte.MIN_VALUE;
}
}

protected final void initHOAIWS95(String s) {
if (!s.trim().isEmpty()) {
HOAIWS95 = Byte.parseByte(s);
} else {
HOAIWS95 = Byte.MIN_VALUE;
}
}

protected final void initHOAIWSAL(String s) {
if (!s.trim().isEmpty()) {
HOAIWSAL = Byte.parseByte(s);
} else {
HOAIWSAL = Byte.MIN_VALUE;
}
}

protected final void initHOAIWSHS(String s) {
if (!s.trim().isEmpty()) {
HOAIWSHS = Byte.parseByte(s);
} else {
HOAIWSHS = Byte.MIN_VALUE;
}
}

protected final void initHOAIWSLL(String s) {
if (!s.trim().isEmpty()) {
HOAIWSLL = Byte.parseByte(s);
} else {
HOAIWSLL = Byte.MIN_VALUE;
}
}

protected final void initHOAIWSSS(String s) {
if (!s.trim().isEmpty()) {
HOAIWSSS = Byte.parseByte(s);
} else {
HOAIWSSS = Byte.MIN_VALUE;
}
}

protected final void initHOAIWSYS(String s) {
if (!s.trim().isEmpty()) {
HOAIWSYS = Byte.parseByte(s);
} else {
HOAIWSYS = Byte.MIN_VALUE;
}
}

protected final void initHOASK(String s) {
if (!s.trim().isEmpty()) {
HOASK = Byte.parseByte(s);
} else {
HOASK = Byte.MIN_VALUE;
}
}

protected final void initHOB10FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10FE = false;
} else {
HOB10FE = true;
}
}
}

protected final void initHOB10FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10FL = false;
} else {
HOB10FL = true;
}
}
}

protected final void initHOB10FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10FR = false;
} else {
HOB10FR = true;
}
}
}

protected final void initHOB10FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10FU = false;
} else {
HOB10FU = true;
}
}
}

protected final void initHOB10ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10ME = false;
} else {
HOB10ME = true;
}
}
}

protected final void initHOB10ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10ML = false;
} else {
HOB10ML = true;
}
}
}

protected final void initHOB10MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10MR = false;
} else {
HOB10MR = true;
}
}
}

protected final void initHOB10MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10MU = false;
} else {
HOB10MU = true;
}
}
}

protected final void initHOB10OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10OE = false;
} else {
HOB10OE = true;
}
}
}

protected final void initHOB10OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10OL = false;
} else {
HOB10OL = true;
}
}
}

protected final void initHOB10OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10OR = false;
} else {
HOB10OR = true;
}
}
}

protected final void initHOB10OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10OU = false;
} else {
HOB10OU = true;
}
}
}

protected final void initHOB10WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10WE = false;
} else {
HOB10WE = true;
}
}
}

protected final void initHOB10WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10WL = false;
} else {
HOB10WL = true;
}
}
}

protected final void initHOB10WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10WR = false;
} else {
HOB10WR = true;
}
}
}

protected final void initHOB10WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10WU = false;
} else {
HOB10WU = true;
}
}
}

protected final void initHOB10YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10YE = false;
} else {
HOB10YE = true;
}
}
}

protected final void initHOB10YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10YL = false;
} else {
HOB10YL = true;
}
}
}

protected final void initHOB10YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10YR = false;
} else {
HOB10YR = true;
}
}
}

protected final void initHOB10YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB10YU = false;
} else {
HOB10YU = true;
}
}
}

protected final void initHOB11FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11FE = false;
} else {
HOB11FE = true;
}
}
}

protected final void initHOB11FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11FL = false;
} else {
HOB11FL = true;
}
}
}

protected final void initHOB11FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11FR = false;
} else {
HOB11FR = true;
}
}
}

protected final void initHOB11FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11FU = false;
} else {
HOB11FU = true;
}
}
}

protected final void initHOB11ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11ME = false;
} else {
HOB11ME = true;
}
}
}

protected final void initHOB11ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11ML = false;
} else {
HOB11ML = true;
}
}
}

protected final void initHOB11MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11MR = false;
} else {
HOB11MR = true;
}
}
}

protected final void initHOB11MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11MU = false;
} else {
HOB11MU = true;
}
}
}

protected final void initHOB11OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11OE = false;
} else {
HOB11OE = true;
}
}
}

protected final void initHOB11OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11OL = false;
} else {
HOB11OL = true;
}
}
}

protected final void initHOB11OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11OR = false;
} else {
HOB11OR = true;
}
}
}

protected final void initHOB11OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11OU = false;
} else {
HOB11OU = true;
}
}
}

protected final void initHOB11WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11WE = false;
} else {
HOB11WE = true;
}
}
}

protected final void initHOB11WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11WL = false;
} else {
HOB11WL = true;
}
}
}

protected final void initHOB11WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11WR = false;
} else {
HOB11WR = true;
}
}
}

protected final void initHOB11WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11WU = false;
} else {
HOB11WU = true;
}
}
}

protected final void initHOB11YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11YE = false;
} else {
HOB11YE = true;
}
}
}

protected final void initHOB11YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11YL = false;
} else {
HOB11YL = true;
}
}
}

protected final void initHOB11YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11YR = false;
} else {
HOB11YR = true;
}
}
}

protected final void initHOB11YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB11YU = false;
} else {
HOB11YU = true;
}
}
}

protected final void initHOB12FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12FE = false;
} else {
HOB12FE = true;
}
}
}

protected final void initHOB12FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12FL = false;
} else {
HOB12FL = true;
}
}
}

protected final void initHOB12FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12FR = false;
} else {
HOB12FR = true;
}
}
}

protected final void initHOB12FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12FU = false;
} else {
HOB12FU = true;
}
}
}

protected final void initHOB12ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12ME = false;
} else {
HOB12ME = true;
}
}
}

protected final void initHOB12ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12ML = false;
} else {
HOB12ML = true;
}
}
}

protected final void initHOB12MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12MR = false;
} else {
HOB12MR = true;
}
}
}

protected final void initHOB12MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12MU = false;
} else {
HOB12MU = true;
}
}
}

protected final void initHOB12OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12OE = false;
} else {
HOB12OE = true;
}
}
}

protected final void initHOB12OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12OL = false;
} else {
HOB12OL = true;
}
}
}

protected final void initHOB12OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12OR = false;
} else {
HOB12OR = true;
}
}
}

protected final void initHOB12OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12OU = false;
} else {
HOB12OU = true;
}
}
}

protected final void initHOB12WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12WE = false;
} else {
HOB12WE = true;
}
}
}

protected final void initHOB12WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12WL = false;
} else {
HOB12WL = true;
}
}
}

protected final void initHOB12WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12WR = false;
} else {
HOB12WR = true;
}
}
}

protected final void initHOB12WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12WU = false;
} else {
HOB12WU = true;
}
}
}

protected final void initHOB12YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12YE = false;
} else {
HOB12YE = true;
}
}
}

protected final void initHOB12YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12YL = false;
} else {
HOB12YL = true;
}
}
}

protected final void initHOB12YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12YR = false;
} else {
HOB12YR = true;
}
}
}

protected final void initHOB12YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB12YU = false;
} else {
HOB12YU = true;
}
}
}

protected final void initHOB13FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13FE = false;
} else {
HOB13FE = true;
}
}
}

protected final void initHOB13FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13FL = false;
} else {
HOB13FL = true;
}
}
}

protected final void initHOB13FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13FR = false;
} else {
HOB13FR = true;
}
}
}

protected final void initHOB13FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13FU = false;
} else {
HOB13FU = true;
}
}
}

protected final void initHOB13ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13ME = false;
} else {
HOB13ME = true;
}
}
}

protected final void initHOB13ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13ML = false;
} else {
HOB13ML = true;
}
}
}

protected final void initHOB13MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13MR = false;
} else {
HOB13MR = true;
}
}
}

protected final void initHOB13MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13MU = false;
} else {
HOB13MU = true;
}
}
}

protected final void initHOB13OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13OE = false;
} else {
HOB13OE = true;
}
}
}

protected final void initHOB13OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13OL = false;
} else {
HOB13OL = true;
}
}
}

protected final void initHOB13OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13OR = false;
} else {
HOB13OR = true;
}
}
}

protected final void initHOB13OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13OU = false;
} else {
HOB13OU = true;
}
}
}

protected final void initHOB13WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13WE = false;
} else {
HOB13WE = true;
}
}
}

protected final void initHOB13WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13WL = false;
} else {
HOB13WL = true;
}
}
}

protected final void initHOB13WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13WR = false;
} else {
HOB13WR = true;
}
}
}

protected final void initHOB13WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13WU = false;
} else {
HOB13WU = true;
}
}
}

protected final void initHOB13YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13YE = false;
} else {
HOB13YE = true;
}
}
}

protected final void initHOB13YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13YL = false;
} else {
HOB13YL = true;
}
}
}

protected final void initHOB13YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13YR = false;
} else {
HOB13YR = true;
}
}
}

protected final void initHOB13YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB13YU = false;
} else {
HOB13YU = true;
}
}
}

protected final void initHOB14FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14FE = false;
} else {
HOB14FE = true;
}
}
}

protected final void initHOB14FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14FL = false;
} else {
HOB14FL = true;
}
}
}

protected final void initHOB14FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14FR = false;
} else {
HOB14FR = true;
}
}
}

protected final void initHOB14FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14FU = false;
} else {
HOB14FU = true;
}
}
}

protected final void initHOB14ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14ME = false;
} else {
HOB14ME = true;
}
}
}

protected final void initHOB14ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14ML = false;
} else {
HOB14ML = true;
}
}
}

protected final void initHOB14MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14MR = false;
} else {
HOB14MR = true;
}
}
}

protected final void initHOB14MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14MU = false;
} else {
HOB14MU = true;
}
}
}

protected final void initHOB14OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14OE = false;
} else {
HOB14OE = true;
}
}
}

protected final void initHOB14OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14OL = false;
} else {
HOB14OL = true;
}
}
}

protected final void initHOB14OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14OR = false;
} else {
HOB14OR = true;
}
}
}

protected final void initHOB14OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14OU = false;
} else {
HOB14OU = true;
}
}
}

protected final void initHOB14WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14WE = false;
} else {
HOB14WE = true;
}
}
}

protected final void initHOB14WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14WL = false;
} else {
HOB14WL = true;
}
}
}

protected final void initHOB14WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14WR = false;
} else {
HOB14WR = true;
}
}
}

protected final void initHOB14WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14WU = false;
} else {
HOB14WU = true;
}
}
}

protected final void initHOB14YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14YE = false;
} else {
HOB14YE = true;
}
}
}

protected final void initHOB14YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14YL = false;
} else {
HOB14YL = true;
}
}
}

protected final void initHOB14YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14YR = false;
} else {
HOB14YR = true;
}
}
}

protected final void initHOB14YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB14YU = false;
} else {
HOB14YU = true;
}
}
}

protected final void initHOB15FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15FE = false;
} else {
HOB15FE = true;
}
}
}

protected final void initHOB15FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15FL = false;
} else {
HOB15FL = true;
}
}
}

protected final void initHOB15FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15FR = false;
} else {
HOB15FR = true;
}
}
}

protected final void initHOB15FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15FU = false;
} else {
HOB15FU = true;
}
}
}

protected final void initHOB15ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15ME = false;
} else {
HOB15ME = true;
}
}
}

protected final void initHOB15ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15ML = false;
} else {
HOB15ML = true;
}
}
}

protected final void initHOB15MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15MR = false;
} else {
HOB15MR = true;
}
}
}

protected final void initHOB15MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15MU = false;
} else {
HOB15MU = true;
}
}
}

protected final void initHOB15OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15OE = false;
} else {
HOB15OE = true;
}
}
}

protected final void initHOB15OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15OL = false;
} else {
HOB15OL = true;
}
}
}

protected final void initHOB15OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15OR = false;
} else {
HOB15OR = true;
}
}
}

protected final void initHOB15OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15OU = false;
} else {
HOB15OU = true;
}
}
}

protected final void initHOB15WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15WE = false;
} else {
HOB15WE = true;
}
}
}

protected final void initHOB15WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15WL = false;
} else {
HOB15WL = true;
}
}
}

protected final void initHOB15WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15WR = false;
} else {
HOB15WR = true;
}
}
}

protected final void initHOB15WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15WU = false;
} else {
HOB15WU = true;
}
}
}

protected final void initHOB15YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15YE = false;
} else {
HOB15YE = true;
}
}
}

protected final void initHOB15YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15YL = false;
} else {
HOB15YL = true;
}
}
}

protected final void initHOB15YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15YR = false;
} else {
HOB15YR = true;
}
}
}

protected final void initHOB15YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB15YU = false;
} else {
HOB15YU = true;
}
}
}

protected final void initHOB16FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16FE = false;
} else {
HOB16FE = true;
}
}
}

protected final void initHOB16FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16FL = false;
} else {
HOB16FL = true;
}
}
}

protected final void initHOB16FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16FR = false;
} else {
HOB16FR = true;
}
}
}

protected final void initHOB16FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16FU = false;
} else {
HOB16FU = true;
}
}
}

protected final void initHOB16ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16ME = false;
} else {
HOB16ME = true;
}
}
}

protected final void initHOB16ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16ML = false;
} else {
HOB16ML = true;
}
}
}

protected final void initHOB16MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16MR = false;
} else {
HOB16MR = true;
}
}
}

protected final void initHOB16MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16MU = false;
} else {
HOB16MU = true;
}
}
}

protected final void initHOB16OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16OE = false;
} else {
HOB16OE = true;
}
}
}

protected final void initHOB16OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16OL = false;
} else {
HOB16OL = true;
}
}
}

protected final void initHOB16OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16OR = false;
} else {
HOB16OR = true;
}
}
}

protected final void initHOB16OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16OU = false;
} else {
HOB16OU = true;
}
}
}

protected final void initHOB16WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16WE = false;
} else {
HOB16WE = true;
}
}
}

protected final void initHOB16WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16WL = false;
} else {
HOB16WL = true;
}
}
}

protected final void initHOB16WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16WR = false;
} else {
HOB16WR = true;
}
}
}

protected final void initHOB16WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16WU = false;
} else {
HOB16WU = true;
}
}
}

protected final void initHOB16YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16YE = false;
} else {
HOB16YE = true;
}
}
}

protected final void initHOB16YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16YL = false;
} else {
HOB16YL = true;
}
}
}

protected final void initHOB16YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16YR = false;
} else {
HOB16YR = true;
}
}
}

protected final void initHOB16YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOB16YU = false;
} else {
HOB16YU = true;
}
}
}

protected final void initHOBA10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBA10 = false;
} else {
HOBA10 = true;
}
}
}

protected final void initHOBA11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBA11 = false;
} else {
HOBA11 = true;
}
}
}

protected final void initHOBA12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBA12 = false;
} else {
HOBA12 = true;
}
}
}

protected final void initHOBA13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBA13 = false;
} else {
HOBA13 = true;
}
}
}

protected final void initHOBA14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBA14 = false;
} else {
HOBA14 = true;
}
}
}

protected final void initHOBA15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBA15 = false;
} else {
HOBA15 = true;
}
}
}

protected final void initHOBA16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBA16 = false;
} else {
HOBA16 = true;
}
}
}

protected final void initHOBA2FE(String s) {
if (!s.trim().isEmpty()) {
HOBA2FE = Byte.parseByte(s);
} else {
HOBA2FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FL(String s) {
if (!s.trim().isEmpty()) {
HOBA2FL = Byte.parseByte(s);
} else {
HOBA2FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FR(String s) {
if (!s.trim().isEmpty()) {
HOBA2FR = Byte.parseByte(s);
} else {
HOBA2FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2FU(String s) {
if (!s.trim().isEmpty()) {
HOBA2FU = Byte.parseByte(s);
} else {
HOBA2FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA2ME(String s) {
if (!s.trim().isEmpty()) {
HOBA2ME = Byte.parseByte(s);
} else {
HOBA2ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA2ML(String s) {
if (!s.trim().isEmpty()) {
HOBA2ML = Byte.parseByte(s);
} else {
HOBA2ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA2MR(String s) {
if (!s.trim().isEmpty()) {
HOBA2MR = Byte.parseByte(s);
} else {
HOBA2MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2MU(String s) {
if (!s.trim().isEmpty()) {
HOBA2MU = Byte.parseByte(s);
} else {
HOBA2MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA2OE(String s) {
if (!s.trim().isEmpty()) {
HOBA2OE = Byte.parseByte(s);
} else {
HOBA2OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2OL(String s) {
if (!s.trim().isEmpty()) {
HOBA2OL = Short.parseShort(s);
} else {
HOBA2OL = Short.MIN_VALUE;
}
}

protected final void initHOBA2OR(String s) {
if (!s.trim().isEmpty()) {
HOBA2OR = Byte.parseByte(s);
} else {
HOBA2OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2OU(String s) {
if (!s.trim().isEmpty()) {
HOBA2OU = Short.parseShort(s);
} else {
HOBA2OU = Short.MIN_VALUE;
}
}

protected final void initHOBA2WE(String s) {
if (!s.trim().isEmpty()) {
HOBA2WE = Byte.parseByte(s);
} else {
HOBA2WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2WL(String s) {
if (!s.trim().isEmpty()) {
HOBA2WL = Byte.parseByte(s);
} else {
HOBA2WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA2WR(String s) {
if (!s.trim().isEmpty()) {
HOBA2WR = Byte.parseByte(s);
} else {
HOBA2WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2WU(String s) {
if (!s.trim().isEmpty()) {
HOBA2WU = Byte.parseByte(s);
} else {
HOBA2WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YE(String s) {
if (!s.trim().isEmpty()) {
HOBA2YE = Byte.parseByte(s);
} else {
HOBA2YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YL(String s) {
if (!s.trim().isEmpty()) {
HOBA2YL = Byte.parseByte(s);
} else {
HOBA2YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YR(String s) {
if (!s.trim().isEmpty()) {
HOBA2YR = Byte.parseByte(s);
} else {
HOBA2YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA2YU(String s) {
if (!s.trim().isEmpty()) {
HOBA2YU = Byte.parseByte(s);
} else {
HOBA2YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FE(String s) {
if (!s.trim().isEmpty()) {
HOBA3FE = Byte.parseByte(s);
} else {
HOBA3FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FL(String s) {
if (!s.trim().isEmpty()) {
HOBA3FL = Byte.parseByte(s);
} else {
HOBA3FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FR(String s) {
if (!s.trim().isEmpty()) {
HOBA3FR = Byte.parseByte(s);
} else {
HOBA3FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3FU(String s) {
if (!s.trim().isEmpty()) {
HOBA3FU = Byte.parseByte(s);
} else {
HOBA3FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA3ME(String s) {
if (!s.trim().isEmpty()) {
HOBA3ME = Byte.parseByte(s);
} else {
HOBA3ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA3ML(String s) {
if (!s.trim().isEmpty()) {
HOBA3ML = Short.parseShort(s);
} else {
HOBA3ML = Short.MIN_VALUE;
}
}

protected final void initHOBA3MR(String s) {
if (!s.trim().isEmpty()) {
HOBA3MR = Byte.parseByte(s);
} else {
HOBA3MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3MU(String s) {
if (!s.trim().isEmpty()) {
HOBA3MU = Short.parseShort(s);
} else {
HOBA3MU = Short.MIN_VALUE;
}
}

protected final void initHOBA3OE(String s) {
if (!s.trim().isEmpty()) {
HOBA3OE = Byte.parseByte(s);
} else {
HOBA3OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3OL(String s) {
if (!s.trim().isEmpty()) {
HOBA3OL = Short.parseShort(s);
} else {
HOBA3OL = Short.MIN_VALUE;
}
}

protected final void initHOBA3OR(String s) {
if (!s.trim().isEmpty()) {
HOBA3OR = Byte.parseByte(s);
} else {
HOBA3OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3OU(String s) {
if (!s.trim().isEmpty()) {
HOBA3OU = Short.parseShort(s);
} else {
HOBA3OU = Short.MIN_VALUE;
}
}

protected final void initHOBA3WE(String s) {
if (!s.trim().isEmpty()) {
HOBA3WE = Byte.parseByte(s);
} else {
HOBA3WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3WL(String s) {
if (!s.trim().isEmpty()) {
HOBA3WL = Byte.parseByte(s);
} else {
HOBA3WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA3WR(String s) {
if (!s.trim().isEmpty()) {
HOBA3WR = Byte.parseByte(s);
} else {
HOBA3WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3WU(String s) {
if (!s.trim().isEmpty()) {
HOBA3WU = Short.parseShort(s);
} else {
HOBA3WU = Short.MIN_VALUE;
}
}

protected final void initHOBA3YE(String s) {
if (!s.trim().isEmpty()) {
HOBA3YE = Byte.parseByte(s);
} else {
HOBA3YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA3YL(String s) {
if (!s.trim().isEmpty()) {
HOBA3YL = Byte.parseByte(s);
} else {
HOBA3YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA3YR(String s) {
if (!s.trim().isEmpty()) {
HOBA3YR = Byte.parseByte(s);
} else {
HOBA3YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA3YU(String s) {
if (!s.trim().isEmpty()) {
HOBA3YU = Byte.parseByte(s);
} else {
HOBA3YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FE(String s) {
if (!s.trim().isEmpty()) {
HOBA4FE = Byte.parseByte(s);
} else {
HOBA4FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FL(String s) {
if (!s.trim().isEmpty()) {
HOBA4FL = Byte.parseByte(s);
} else {
HOBA4FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FR(String s) {
if (!s.trim().isEmpty()) {
HOBA4FR = Byte.parseByte(s);
} else {
HOBA4FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4FU(String s) {
if (!s.trim().isEmpty()) {
HOBA4FU = Byte.parseByte(s);
} else {
HOBA4FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA4ME(String s) {
if (!s.trim().isEmpty()) {
HOBA4ME = Byte.parseByte(s);
} else {
HOBA4ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA4ML(String s) {
if (!s.trim().isEmpty()) {
HOBA4ML = Short.parseShort(s);
} else {
HOBA4ML = Short.MIN_VALUE;
}
}

protected final void initHOBA4MR(String s) {
if (!s.trim().isEmpty()) {
HOBA4MR = Byte.parseByte(s);
} else {
HOBA4MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4MU(String s) {
if (!s.trim().isEmpty()) {
HOBA4MU = Short.parseShort(s);
} else {
HOBA4MU = Short.MIN_VALUE;
}
}

protected final void initHOBA4OE(String s) {
if (!s.trim().isEmpty()) {
HOBA4OE = Byte.parseByte(s);
} else {
HOBA4OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4OL(String s) {
if (!s.trim().isEmpty()) {
HOBA4OL = Short.parseShort(s);
} else {
HOBA4OL = Short.MIN_VALUE;
}
}

protected final void initHOBA4OR(String s) {
if (!s.trim().isEmpty()) {
HOBA4OR = Byte.parseByte(s);
} else {
HOBA4OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4OU(String s) {
if (!s.trim().isEmpty()) {
HOBA4OU = Short.parseShort(s);
} else {
HOBA4OU = Short.MIN_VALUE;
}
}

protected final void initHOBA4WE(String s) {
if (!s.trim().isEmpty()) {
HOBA4WE = Byte.parseByte(s);
} else {
HOBA4WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4WL(String s) {
if (!s.trim().isEmpty()) {
HOBA4WL = Short.parseShort(s);
} else {
HOBA4WL = Short.MIN_VALUE;
}
}

protected final void initHOBA4WR(String s) {
if (!s.trim().isEmpty()) {
HOBA4WR = Byte.parseByte(s);
} else {
HOBA4WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4WU(String s) {
if (!s.trim().isEmpty()) {
HOBA4WU = Short.parseShort(s);
} else {
HOBA4WU = Short.MIN_VALUE;
}
}

protected final void initHOBA4YE(String s) {
if (!s.trim().isEmpty()) {
HOBA4YE = Byte.parseByte(s);
} else {
HOBA4YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA4YL(String s) {
if (!s.trim().isEmpty()) {
HOBA4YL = Byte.parseByte(s);
} else {
HOBA4YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA4YR(String s) {
if (!s.trim().isEmpty()) {
HOBA4YR = Byte.parseByte(s);
} else {
HOBA4YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA4YU(String s) {
if (!s.trim().isEmpty()) {
HOBA4YU = Byte.parseByte(s);
} else {
HOBA4YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FE(String s) {
if (!s.trim().isEmpty()) {
HOBA5FE = Byte.parseByte(s);
} else {
HOBA5FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FL(String s) {
if (!s.trim().isEmpty()) {
HOBA5FL = Byte.parseByte(s);
} else {
HOBA5FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FR(String s) {
if (!s.trim().isEmpty()) {
HOBA5FR = Byte.parseByte(s);
} else {
HOBA5FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5FU(String s) {
if (!s.trim().isEmpty()) {
HOBA5FU = Byte.parseByte(s);
} else {
HOBA5FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5ME(String s) {
if (!s.trim().isEmpty()) {
HOBA5ME = Byte.parseByte(s);
} else {
HOBA5ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA5ML(String s) {
if (!s.trim().isEmpty()) {
HOBA5ML = Short.parseShort(s);
} else {
HOBA5ML = Short.MIN_VALUE;
}
}

protected final void initHOBA5MR(String s) {
if (!s.trim().isEmpty()) {
HOBA5MR = Byte.parseByte(s);
} else {
HOBA5MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5MU(String s) {
if (!s.trim().isEmpty()) {
HOBA5MU = Short.parseShort(s);
} else {
HOBA5MU = Short.MIN_VALUE;
}
}

protected final void initHOBA5OE(String s) {
if (!s.trim().isEmpty()) {
HOBA5OE = Byte.parseByte(s);
} else {
HOBA5OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5OL(String s) {
if (!s.trim().isEmpty()) {
HOBA5OL = Byte.parseByte(s);
} else {
HOBA5OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5OR(String s) {
if (!s.trim().isEmpty()) {
HOBA5OR = Byte.parseByte(s);
} else {
HOBA5OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5OU(String s) {
if (!s.trim().isEmpty()) {
HOBA5OU = Byte.parseByte(s);
} else {
HOBA5OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WE(String s) {
if (!s.trim().isEmpty()) {
HOBA5WE = Byte.parseByte(s);
} else {
HOBA5WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WL(String s) {
if (!s.trim().isEmpty()) {
HOBA5WL = Byte.parseByte(s);
} else {
HOBA5WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WR(String s) {
if (!s.trim().isEmpty()) {
HOBA5WR = Byte.parseByte(s);
} else {
HOBA5WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5WU(String s) {
if (!s.trim().isEmpty()) {
HOBA5WU = Byte.parseByte(s);
} else {
HOBA5WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YE(String s) {
if (!s.trim().isEmpty()) {
HOBA5YE = Byte.parseByte(s);
} else {
HOBA5YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YL(String s) {
if (!s.trim().isEmpty()) {
HOBA5YL = Byte.parseByte(s);
} else {
HOBA5YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YR(String s) {
if (!s.trim().isEmpty()) {
HOBA5YR = Byte.parseByte(s);
} else {
HOBA5YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA5YU(String s) {
if (!s.trim().isEmpty()) {
HOBA5YU = Byte.parseByte(s);
} else {
HOBA5YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FE(String s) {
if (!s.trim().isEmpty()) {
HOBA6FE = Byte.parseByte(s);
} else {
HOBA6FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FL(String s) {
if (!s.trim().isEmpty()) {
HOBA6FL = Byte.parseByte(s);
} else {
HOBA6FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FR(String s) {
if (!s.trim().isEmpty()) {
HOBA6FR = Byte.parseByte(s);
} else {
HOBA6FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6FU(String s) {
if (!s.trim().isEmpty()) {
HOBA6FU = Byte.parseByte(s);
} else {
HOBA6FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6ME(String s) {
if (!s.trim().isEmpty()) {
HOBA6ME = Byte.parseByte(s);
} else {
HOBA6ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA6ML(String s) {
if (!s.trim().isEmpty()) {
HOBA6ML = Byte.parseByte(s);
} else {
HOBA6ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA6MR(String s) {
if (!s.trim().isEmpty()) {
HOBA6MR = Byte.parseByte(s);
} else {
HOBA6MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6MU(String s) {
if (!s.trim().isEmpty()) {
HOBA6MU = Byte.parseByte(s);
} else {
HOBA6MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OE(String s) {
if (!s.trim().isEmpty()) {
HOBA6OE = Byte.parseByte(s);
} else {
HOBA6OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OL(String s) {
if (!s.trim().isEmpty()) {
HOBA6OL = Byte.parseByte(s);
} else {
HOBA6OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OR(String s) {
if (!s.trim().isEmpty()) {
HOBA6OR = Byte.parseByte(s);
} else {
HOBA6OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6OU(String s) {
if (!s.trim().isEmpty()) {
HOBA6OU = Byte.parseByte(s);
} else {
HOBA6OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WE(String s) {
if (!s.trim().isEmpty()) {
HOBA6WE = Byte.parseByte(s);
} else {
HOBA6WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WL(String s) {
if (!s.trim().isEmpty()) {
HOBA6WL = Byte.parseByte(s);
} else {
HOBA6WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WR(String s) {
if (!s.trim().isEmpty()) {
HOBA6WR = Byte.parseByte(s);
} else {
HOBA6WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6WU(String s) {
if (!s.trim().isEmpty()) {
HOBA6WU = Byte.parseByte(s);
} else {
HOBA6WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YE(String s) {
if (!s.trim().isEmpty()) {
HOBA6YE = Byte.parseByte(s);
} else {
HOBA6YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YL(String s) {
if (!s.trim().isEmpty()) {
HOBA6YL = Byte.parseByte(s);
} else {
HOBA6YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YR(String s) {
if (!s.trim().isEmpty()) {
HOBA6YR = Byte.parseByte(s);
} else {
HOBA6YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA6YU(String s) {
if (!s.trim().isEmpty()) {
HOBA6YU = Byte.parseByte(s);
} else {
HOBA6YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FE(String s) {
if (!s.trim().isEmpty()) {
HOBA7FE = Byte.parseByte(s);
} else {
HOBA7FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FL(String s) {
if (!s.trim().isEmpty()) {
HOBA7FL = Byte.parseByte(s);
} else {
HOBA7FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FR(String s) {
if (!s.trim().isEmpty()) {
HOBA7FR = Byte.parseByte(s);
} else {
HOBA7FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7FU(String s) {
if (!s.trim().isEmpty()) {
HOBA7FU = Byte.parseByte(s);
} else {
HOBA7FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7ME(String s) {
if (!s.trim().isEmpty()) {
HOBA7ME = Byte.parseByte(s);
} else {
HOBA7ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA7ML(String s) {
if (!s.trim().isEmpty()) {
HOBA7ML = Byte.parseByte(s);
} else {
HOBA7ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA7MR(String s) {
if (!s.trim().isEmpty()) {
HOBA7MR = Byte.parseByte(s);
} else {
HOBA7MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7MU(String s) {
if (!s.trim().isEmpty()) {
HOBA7MU = Byte.parseByte(s);
} else {
HOBA7MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OE(String s) {
if (!s.trim().isEmpty()) {
HOBA7OE = Byte.parseByte(s);
} else {
HOBA7OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OL(String s) {
if (!s.trim().isEmpty()) {
HOBA7OL = Byte.parseByte(s);
} else {
HOBA7OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OR(String s) {
if (!s.trim().isEmpty()) {
HOBA7OR = Byte.parseByte(s);
} else {
HOBA7OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7OU(String s) {
if (!s.trim().isEmpty()) {
HOBA7OU = Byte.parseByte(s);
} else {
HOBA7OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WE(String s) {
if (!s.trim().isEmpty()) {
HOBA7WE = Byte.parseByte(s);
} else {
HOBA7WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WL(String s) {
if (!s.trim().isEmpty()) {
HOBA7WL = Byte.parseByte(s);
} else {
HOBA7WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WR(String s) {
if (!s.trim().isEmpty()) {
HOBA7WR = Byte.parseByte(s);
} else {
HOBA7WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7WU(String s) {
if (!s.trim().isEmpty()) {
HOBA7WU = Byte.parseByte(s);
} else {
HOBA7WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YE(String s) {
if (!s.trim().isEmpty()) {
HOBA7YE = Byte.parseByte(s);
} else {
HOBA7YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YL(String s) {
if (!s.trim().isEmpty()) {
HOBA7YL = Byte.parseByte(s);
} else {
HOBA7YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YR(String s) {
if (!s.trim().isEmpty()) {
HOBA7YR = Byte.parseByte(s);
} else {
HOBA7YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA7YU(String s) {
if (!s.trim().isEmpty()) {
HOBA7YU = Byte.parseByte(s);
} else {
HOBA7YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FE(String s) {
if (!s.trim().isEmpty()) {
HOBA8FE = Byte.parseByte(s);
} else {
HOBA8FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FL(String s) {
if (!s.trim().isEmpty()) {
HOBA8FL = Byte.parseByte(s);
} else {
HOBA8FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FR(String s) {
if (!s.trim().isEmpty()) {
HOBA8FR = Byte.parseByte(s);
} else {
HOBA8FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8FU(String s) {
if (!s.trim().isEmpty()) {
HOBA8FU = Byte.parseByte(s);
} else {
HOBA8FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8ME(String s) {
if (!s.trim().isEmpty()) {
HOBA8ME = Byte.parseByte(s);
} else {
HOBA8ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA8ML(String s) {
if (!s.trim().isEmpty()) {
HOBA8ML = Byte.parseByte(s);
} else {
HOBA8ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA8MR(String s) {
if (!s.trim().isEmpty()) {
HOBA8MR = Byte.parseByte(s);
} else {
HOBA8MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8MU(String s) {
if (!s.trim().isEmpty()) {
HOBA8MU = Byte.parseByte(s);
} else {
HOBA8MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OE(String s) {
if (!s.trim().isEmpty()) {
HOBA8OE = Byte.parseByte(s);
} else {
HOBA8OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OL(String s) {
if (!s.trim().isEmpty()) {
HOBA8OL = Byte.parseByte(s);
} else {
HOBA8OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OR(String s) {
if (!s.trim().isEmpty()) {
HOBA8OR = Byte.parseByte(s);
} else {
HOBA8OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8OU(String s) {
if (!s.trim().isEmpty()) {
HOBA8OU = Byte.parseByte(s);
} else {
HOBA8OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WE(String s) {
if (!s.trim().isEmpty()) {
HOBA8WE = Byte.parseByte(s);
} else {
HOBA8WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WL(String s) {
if (!s.trim().isEmpty()) {
HOBA8WL = Byte.parseByte(s);
} else {
HOBA8WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WR(String s) {
if (!s.trim().isEmpty()) {
HOBA8WR = Byte.parseByte(s);
} else {
HOBA8WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8WU(String s) {
if (!s.trim().isEmpty()) {
HOBA8WU = Byte.parseByte(s);
} else {
HOBA8WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YE(String s) {
if (!s.trim().isEmpty()) {
HOBA8YE = Byte.parseByte(s);
} else {
HOBA8YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YL(String s) {
if (!s.trim().isEmpty()) {
HOBA8YL = Byte.parseByte(s);
} else {
HOBA8YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YR(String s) {
if (!s.trim().isEmpty()) {
HOBA8YR = Byte.parseByte(s);
} else {
HOBA8YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA8YU(String s) {
if (!s.trim().isEmpty()) {
HOBA8YU = Byte.parseByte(s);
} else {
HOBA8YU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FE(String s) {
if (!s.trim().isEmpty()) {
HOBA9FE = Byte.parseByte(s);
} else {
HOBA9FE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FL(String s) {
if (!s.trim().isEmpty()) {
HOBA9FL = Byte.parseByte(s);
} else {
HOBA9FL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FR(String s) {
if (!s.trim().isEmpty()) {
HOBA9FR = Byte.parseByte(s);
} else {
HOBA9FR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9FU(String s) {
if (!s.trim().isEmpty()) {
HOBA9FU = Byte.parseByte(s);
} else {
HOBA9FU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9ME(String s) {
if (!s.trim().isEmpty()) {
HOBA9ME = Byte.parseByte(s);
} else {
HOBA9ME = Byte.MIN_VALUE;
}
}

protected final void initHOBA9ML(String s) {
if (!s.trim().isEmpty()) {
HOBA9ML = Byte.parseByte(s);
} else {
HOBA9ML = Byte.MIN_VALUE;
}
}

protected final void initHOBA9MR(String s) {
if (!s.trim().isEmpty()) {
HOBA9MR = Byte.parseByte(s);
} else {
HOBA9MR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9MU(String s) {
if (!s.trim().isEmpty()) {
HOBA9MU = Byte.parseByte(s);
} else {
HOBA9MU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OE(String s) {
if (!s.trim().isEmpty()) {
HOBA9OE = Byte.parseByte(s);
} else {
HOBA9OE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OL(String s) {
if (!s.trim().isEmpty()) {
HOBA9OL = Byte.parseByte(s);
} else {
HOBA9OL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OR(String s) {
if (!s.trim().isEmpty()) {
HOBA9OR = Byte.parseByte(s);
} else {
HOBA9OR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9OU(String s) {
if (!s.trim().isEmpty()) {
HOBA9OU = Byte.parseByte(s);
} else {
HOBA9OU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WE(String s) {
if (!s.trim().isEmpty()) {
HOBA9WE = Byte.parseByte(s);
} else {
HOBA9WE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WL(String s) {
if (!s.trim().isEmpty()) {
HOBA9WL = Byte.parseByte(s);
} else {
HOBA9WL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WR(String s) {
if (!s.trim().isEmpty()) {
HOBA9WR = Byte.parseByte(s);
} else {
HOBA9WR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9WU(String s) {
if (!s.trim().isEmpty()) {
HOBA9WU = Byte.parseByte(s);
} else {
HOBA9WU = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YE(String s) {
if (!s.trim().isEmpty()) {
HOBA9YE = Byte.parseByte(s);
} else {
HOBA9YE = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YL(String s) {
if (!s.trim().isEmpty()) {
HOBA9YL = Byte.parseByte(s);
} else {
HOBA9YL = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YR(String s) {
if (!s.trim().isEmpty()) {
HOBA9YR = Byte.parseByte(s);
} else {
HOBA9YR = Byte.MIN_VALUE;
}
}

protected final void initHOBA9YU(String s) {
if (!s.trim().isEmpty()) {
HOBA9YU = Byte.parseByte(s);
} else {
HOBA9YU = Byte.MIN_VALUE;
}
}

protected final void initHOBAFE(String s) {
if (!s.trim().isEmpty()) {
HOBAFE = Byte.parseByte(s);
} else {
HOBAFE = Byte.MIN_VALUE;
}
}

protected final void initHOBAFL(String s) {
if (!s.trim().isEmpty()) {
HOBAFL = Byte.parseByte(s);
} else {
HOBAFL = Byte.MIN_VALUE;
}
}

protected final void initHOBAFR(String s) {
if (!s.trim().isEmpty()) {
HOBAFR = Byte.parseByte(s);
} else {
HOBAFR = Byte.MIN_VALUE;
}
}

protected final void initHOBAFU(String s) {
if (!s.trim().isEmpty()) {
HOBAFU = Byte.parseByte(s);
} else {
HOBAFU = Byte.MIN_VALUE;
}
}

protected final void initHOBAME(String s) {
if (!s.trim().isEmpty()) {
HOBAME = Byte.parseByte(s);
} else {
HOBAME = Byte.MIN_VALUE;
}
}

protected final void initHOBAML(String s) {
if (!s.trim().isEmpty()) {
HOBAML = Short.parseShort(s);
} else {
HOBAML = Short.MIN_VALUE;
}
}

protected final void initHOBAMR(String s) {
if (!s.trim().isEmpty()) {
HOBAMR = Byte.parseByte(s);
} else {
HOBAMR = Byte.MIN_VALUE;
}
}

protected final void initHOBAMU(String s) {
if (!s.trim().isEmpty()) {
HOBAMU = Short.parseShort(s);
} else {
HOBAMU = Short.MIN_VALUE;
}
}

protected final void initHOBAOE(String s) {
if (!s.trim().isEmpty()) {
HOBAOE = Byte.parseByte(s);
} else {
HOBAOE = Byte.MIN_VALUE;
}
}

protected final void initHOBAOL(String s) {
if (!s.trim().isEmpty()) {
HOBAOL = Short.parseShort(s);
} else {
HOBAOL = Short.MIN_VALUE;
}
}

protected final void initHOBAOR(String s) {
if (!s.trim().isEmpty()) {
HOBAOR = Byte.parseByte(s);
} else {
HOBAOR = Byte.MIN_VALUE;
}
}

protected final void initHOBAOU(String s) {
if (!s.trim().isEmpty()) {
HOBAOU = Short.parseShort(s);
} else {
HOBAOU = Short.MIN_VALUE;
}
}

protected final void initHOBAS10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBAS10 = false;
} else {
HOBAS10 = true;
}
}
}

protected final void initHOBAS11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBAS11 = false;
} else {
HOBAS11 = true;
}
}
}

protected final void initHOBAS12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBAS12 = false;
} else {
HOBAS12 = true;
}
}
}

protected final void initHOBAS13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBAS13 = false;
} else {
HOBAS13 = true;
}
}
}

protected final void initHOBAS14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBAS14 = false;
} else {
HOBAS14 = true;
}
}
}

protected final void initHOBAS15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBAS15 = false;
} else {
HOBAS15 = true;
}
}
}

protected final void initHOBAS16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBAS16 = false;
} else {
HOBAS16 = true;
}
}
}

protected final void initHOBAWE(String s) {
if (!s.trim().isEmpty()) {
HOBAWE = Byte.parseByte(s);
} else {
HOBAWE = Byte.MIN_VALUE;
}
}

protected final void initHOBAWL(String s) {
if (!s.trim().isEmpty()) {
HOBAWL = Short.parseShort(s);
} else {
HOBAWL = Short.MIN_VALUE;
}
}

protected final void initHOBAWR(String s) {
if (!s.trim().isEmpty()) {
HOBAWR = Byte.parseByte(s);
} else {
HOBAWR = Byte.MIN_VALUE;
}
}

protected final void initHOBAWU(String s) {
if (!s.trim().isEmpty()) {
HOBAWU = Byte.parseByte(s);
} else {
HOBAWU = Byte.MIN_VALUE;
}
}

protected final void initHOBAYE(String s) {
if (!s.trim().isEmpty()) {
HOBAYE = Byte.parseByte(s);
} else {
HOBAYE = Byte.MIN_VALUE;
}
}

protected final void initHOBAYL(String s) {
if (!s.trim().isEmpty()) {
HOBAYL = Byte.parseByte(s);
} else {
HOBAYL = Byte.MIN_VALUE;
}
}

protected final void initHOBAYR(String s) {
if (!s.trim().isEmpty()) {
HOBAYR = Byte.parseByte(s);
} else {
HOBAYR = Byte.MIN_VALUE;
}
}

protected final void initHOBAYU(String s) {
if (!s.trim().isEmpty()) {
HOBAYU = Short.parseShort(s);
} else {
HOBAYU = Short.MIN_VALUE;
}
}

protected final void initHOBB(String s) {
if (!s.trim().isEmpty()) {
HOBB = Byte.parseByte(s);
} else {
HOBB = Byte.MIN_VALUE;
}
}

protected final void initHOBP10(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBP10 = false;
} else {
HOBP10 = true;
}
}
}

protected final void initHOBP11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBP11 = false;
} else {
HOBP11 = true;
}
}
}

protected final void initHOBP12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBP12 = false;
} else {
HOBP12 = true;
}
}
}

protected final void initHOBP13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBP13 = false;
} else {
HOBP13 = true;
}
}
}

protected final void initHOBP14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBP14 = false;
} else {
HOBP14 = true;
}
}
}

protected final void initHOBP15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBP15 = false;
} else {
HOBP15 = true;
}
}
}

protected final void initHOBP16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOBP16 = false;
} else {
HOBP16 = true;
}
}
}

protected final void initHOCC01(String s) {
if (!s.trim().isEmpty()) {
HOCC01 = Byte.parseByte(s);
} else {
HOCC01 = Byte.MIN_VALUE;
}
}

protected final void initHOCC02(String s) {
if (!s.trim().isEmpty()) {
HOCC02 = Byte.parseByte(s);
} else {
HOCC02 = Byte.MIN_VALUE;
}
}

protected final void initHOCC03(String s) {
if (!s.trim().isEmpty()) {
HOCC03 = Byte.parseByte(s);
} else {
HOCC03 = Byte.MIN_VALUE;
}
}

protected final void initHOCC04(String s) {
if (!s.trim().isEmpty()) {
HOCC04 = Byte.parseByte(s);
} else {
HOCC04 = Byte.MIN_VALUE;
}
}

protected final void initHOCC05(String s) {
if (!s.trim().isEmpty()) {
HOCC05 = Byte.parseByte(s);
} else {
HOCC05 = Byte.MIN_VALUE;
}
}

protected final void initHOCC06(String s) {
if (!s.trim().isEmpty()) {
HOCC06 = Byte.parseByte(s);
} else {
HOCC06 = Byte.MIN_VALUE;
}
}

protected final void initHOCC07(String s) {
if (!s.trim().isEmpty()) {
HOCC07 = Byte.parseByte(s);
} else {
HOCC07 = Byte.MIN_VALUE;
}
}

protected final void initHOCC08(String s) {
if (!s.trim().isEmpty()) {
HOCC08 = Byte.parseByte(s);
} else {
HOCC08 = Byte.MIN_VALUE;
}
}

protected final void initHOCC09(String s) {
if (!s.trim().isEmpty()) {
HOCC09 = Byte.parseByte(s);
} else {
HOCC09 = Byte.MIN_VALUE;
}
}

protected final void initHOCC10(String s) {
if (!s.trim().isEmpty()) {
HOCC10 = Byte.parseByte(s);
} else {
HOCC10 = Byte.MIN_VALUE;
}
}

protected final void initHOCC11(String s) {
if (!s.trim().isEmpty()) {
HOCC11 = Byte.parseByte(s);
} else {
HOCC11 = Byte.MIN_VALUE;
}
}

protected final void initHOCC12(String s) {
if (!s.trim().isEmpty()) {
HOCC12 = Byte.parseByte(s);
} else {
HOCC12 = Byte.MIN_VALUE;
}
}

protected final void initHOCC13(String s) {
if (!s.trim().isEmpty()) {
HOCC13 = Byte.parseByte(s);
} else {
HOCC13 = Byte.MIN_VALUE;
}
}

protected final void initHOCC14(String s) {
if (!s.trim().isEmpty()) {
HOCC14 = Byte.parseByte(s);
} else {
HOCC14 = Byte.MIN_VALUE;
}
}

protected final void initHOCC15(String s) {
if (!s.trim().isEmpty()) {
HOCC15 = Byte.parseByte(s);
} else {
HOCC15 = Byte.MIN_VALUE;
}
}

protected final void initHOCC16(String s) {
if (!s.trim().isEmpty()) {
HOCC16 = Byte.parseByte(s);
} else {
HOCC16 = Byte.MIN_VALUE;
}
}

protected final void initHOCC17(String s) {
if (!s.trim().isEmpty()) {
HOCC17 = Byte.parseByte(s);
} else {
HOCC17 = Byte.MIN_VALUE;
}
}

protected final void initHOCC18(String s) {
if (!s.trim().isEmpty()) {
HOCC18 = Byte.parseByte(s);
} else {
HOCC18 = Byte.MIN_VALUE;
}
}

protected final void initHOCC19(String s) {
if (!s.trim().isEmpty()) {
HOCC19 = Byte.parseByte(s);
} else {
HOCC19 = Byte.MIN_VALUE;
}
}

protected final void initHOCC20(String s) {
if (!s.trim().isEmpty()) {
HOCC20 = Byte.parseByte(s);
} else {
HOCC20 = Byte.MIN_VALUE;
}
}

protected final void initHOCENP(String s) {
if (!s.trim().isEmpty()) {
HOCENP = Byte.parseByte(s);
} else {
HOCENP = Byte.MIN_VALUE;
}
}

protected final void initHOCHM(String s) {
if (!s.trim().isEmpty()) {
HOCHM = Byte.parseByte(s);
} else {
HOCHM = Byte.MIN_VALUE;
}
}

protected final void initHOCL(String s) {
if (!s.trim().isEmpty()) {
HOCL = Short.parseShort(s);
} else {
HOCL = Short.MIN_VALUE;
}
}

protected final void initHOCLE(String s) {
if (!s.trim().isEmpty()) {
HOCLE = Byte.parseByte(s);
} else {
HOCLE = Byte.MIN_VALUE;
}
}

protected final void initHOCLL(String s) {
if (!s.trim().isEmpty()) {
HOCLL = Short.parseShort(s);
} else {
HOCLL = Short.MIN_VALUE;
}
}

protected final void initHOCLR(String s) {
if (!s.trim().isEmpty()) {
HOCLR = Byte.parseByte(s);
} else {
HOCLR = Byte.MIN_VALUE;
}
}

protected final void initHOCLU(String s) {
if (!s.trim().isEmpty()) {
HOCLU = Short.parseShort(s);
} else {
HOCLU = Short.MIN_VALUE;
}
}

protected final void initHOCTA(String s) {
if (!s.trim().isEmpty()) {
HOCTA = Byte.parseByte(s);
} else {
HOCTA = Byte.MIN_VALUE;
}
}

protected final void initHOCTB(String s) {
if (!s.trim().isEmpty()) {
HOCTB = Byte.parseByte(s);
} else {
HOCTB = Byte.MIN_VALUE;
}
}

protected final void initHOCTBP(String s) {
if (!s.trim().isEmpty()) {
HOCTBP = Byte.parseByte(s);
} else {
HOCTBP = Byte.MIN_VALUE;
}
}

protected final void initHOCTN(String s) {
if (!s.trim().isEmpty()) {
HOCTN = Byte.parseByte(s);
} else {
HOCTN = Byte.MIN_VALUE;
}
}

protected final void initHODISC(String s) {
if (!s.trim().isEmpty()) {
HODISC = Byte.parseByte(s);
} else {
HODISC = Byte.MIN_VALUE;
}
}

protected final void initHOEB(String s) {
if (!s.trim().isEmpty()) {
HOEB = Byte.parseByte(s);
} else {
HOEB = Byte.MIN_VALUE;
}
}

protected final void initHOEBMS(String s) {
if (!s.trim().isEmpty()) {
HOEBMS = Short.parseShort(s);
} else {
HOEBMS = Short.MIN_VALUE;
}
}

protected final void initHOEBMSE(String s) {
if (!s.trim().isEmpty()) {
HOEBMSE = Byte.parseByte(s);
} else {
HOEBMSE = Byte.MIN_VALUE;
}
}

protected final void initHOEBMSL(String s) {
if (!s.trim().isEmpty()) {
HOEBMSL = Byte.parseByte(s);
} else {
HOEBMSL = Byte.MIN_VALUE;
}
}

protected final void initHOEBMSR(String s) {
if (!s.trim().isEmpty()) {
HOEBMSR = Byte.parseByte(s);
} else {
HOEBMSR = Byte.MIN_VALUE;
}
}

protected final void initHOEBMSU(String s) {
if (!s.trim().isEmpty()) {
HOEBMSU = Byte.parseByte(s);
} else {
HOEBMSU = Byte.MIN_VALUE;
}
}

protected final void initHOEBMW(String s) {
if (!s.trim().isEmpty()) {
HOEBMW = Short.parseShort(s);
} else {
HOEBMW = Short.MIN_VALUE;
}
}

protected final void initHOEBMWE(String s) {
if (!s.trim().isEmpty()) {
HOEBMWE = Byte.parseByte(s);
} else {
HOEBMWE = Byte.MIN_VALUE;
}
}

protected final void initHOEBMWL(String s) {
if (!s.trim().isEmpty()) {
HOEBMWL = Byte.parseByte(s);
} else {
HOEBMWL = Byte.MIN_VALUE;
}
}

protected final void initHOEBMWR(String s) {
if (!s.trim().isEmpty()) {
HOEBMWR = Byte.parseByte(s);
} else {
HOEBMWR = Byte.MIN_VALUE;
}
}

protected final void initHOEBMWU(String s) {
if (!s.trim().isEmpty()) {
HOEBMWU = Byte.parseByte(s);
} else {
HOEBMWU = Byte.MIN_VALUE;
}
}

protected final void initHOEBQS(String s) {
if (!s.trim().isEmpty()) {
HOEBQS = Short.parseShort(s);
} else {
HOEBQS = Short.MIN_VALUE;
}
}

protected final void initHOEBQSE(String s) {
if (!s.trim().isEmpty()) {
HOEBQSE = Byte.parseByte(s);
} else {
HOEBQSE = Byte.MIN_VALUE;
}
}

protected final void initHOEBQSL(String s) {
if (!s.trim().isEmpty()) {
HOEBQSL = Short.parseShort(s);
} else {
HOEBQSL = Short.MIN_VALUE;
}
}

protected final void initHOEBQSR(String s) {
if (!s.trim().isEmpty()) {
HOEBQSR = Byte.parseByte(s);
} else {
HOEBQSR = Byte.MIN_VALUE;
}
}

protected final void initHOEBQSU(String s) {
if (!s.trim().isEmpty()) {
HOEBQSU = Short.parseShort(s);
} else {
HOEBQSU = Short.MIN_VALUE;
}
}

protected final void initHOEBQW(String s) {
if (!s.trim().isEmpty()) {
HOEBQW = Short.parseShort(s);
} else {
HOEBQW = Short.MIN_VALUE;
}
}

protected final void initHOEBQWE(String s) {
if (!s.trim().isEmpty()) {
HOEBQWE = Byte.parseByte(s);
} else {
HOEBQWE = Byte.MIN_VALUE;
}
}

protected final void initHOEBQWL(String s) {
if (!s.trim().isEmpty()) {
HOEBQWL = Short.parseShort(s);
} else {
HOEBQWL = Short.MIN_VALUE;
}
}

protected final void initHOEBQWR(String s) {
if (!s.trim().isEmpty()) {
HOEBQWR = Byte.parseByte(s);
} else {
HOEBQWR = Byte.MIN_VALUE;
}
}

protected final void initHOEBQWU(String s) {
if (!s.trim().isEmpty()) {
HOEBQWU = Short.parseShort(s);
} else {
HOEBQWU = Short.MIN_VALUE;
}
}

protected final void initHOED(String s) {
if (!s.trim().isEmpty()) {
HOED = Byte.parseByte(s);
} else {
HOED = Byte.MIN_VALUE;
}
}

protected final void initHOEDM(String s) {
if (!s.trim().isEmpty()) {
HOEDM = Short.parseShort(s);
} else {
HOEDM = Short.MIN_VALUE;
}
}

protected final void initHOEDME(String s) {
if (!s.trim().isEmpty()) {
HOEDME = Byte.parseByte(s);
} else {
HOEDME = Byte.MIN_VALUE;
}
}

protected final void initHOEDML(String s) {
if (!s.trim().isEmpty()) {
HOEDML = Byte.parseByte(s);
} else {
HOEDML = Byte.MIN_VALUE;
}
}

protected final void initHOEDMR(String s) {
if (!s.trim().isEmpty()) {
HOEDMR = Byte.parseByte(s);
} else {
HOEDMR = Byte.MIN_VALUE;
}
}

protected final void initHOEDMU(String s) {
if (!s.trim().isEmpty()) {
HOEDMU = Byte.parseByte(s);
} else {
HOEDMU = Byte.MIN_VALUE;
}
}

protected final void initHOEDQ(String s) {
if (!s.trim().isEmpty()) {
HOEDQ = Short.parseShort(s);
} else {
HOEDQ = Short.MIN_VALUE;
}
}

protected final void initHOEDQE(String s) {
if (!s.trim().isEmpty()) {
HOEDQE = Byte.parseByte(s);
} else {
HOEDQE = Byte.MIN_VALUE;
}
}

protected final void initHOEDQL(String s) {
if (!s.trim().isEmpty()) {
HOEDQL = Short.parseShort(s);
} else {
HOEDQL = Short.MIN_VALUE;
}
}

protected final void initHOEDQR(String s) {
if (!s.trim().isEmpty()) {
HOEDQR = Byte.parseByte(s);
} else {
HOEDQR = Byte.MIN_VALUE;
}
}

protected final void initHOEDQU(String s) {
if (!s.trim().isEmpty()) {
HOEDQU = Short.parseShort(s);
} else {
HOEDQU = Short.MIN_VALUE;
}
}

protected final void initHOEOS(String s) {
if (!s.trim().isEmpty()) {
HOEOS = Byte.parseByte(s);
} else {
HOEOS = Byte.MIN_VALUE;
}
}

protected final void initHOEOSE(String s) {
if (!s.trim().isEmpty()) {
HOEOSE = Byte.parseByte(s);
} else {
HOEOSE = Byte.MIN_VALUE;
}
}

protected final void initHOEOSL(String s) {
if (!s.trim().isEmpty()) {
HOEOSL = Byte.parseByte(s);
} else {
HOEOSL = Byte.MIN_VALUE;
}
}

protected final void initHOEOSR(String s) {
if (!s.trim().isEmpty()) {
HOEOSR = Byte.parseByte(s);
} else {
HOEOSR = Byte.MIN_VALUE;
}
}

protected final void initHOEOSU(String s) {
if (!s.trim().isEmpty()) {
HOEOSU = Byte.parseByte(s);
} else {
HOEOSU = Byte.MIN_VALUE;
}
}

protected final void initHOEOW(String s) {
if (!s.trim().isEmpty()) {
HOEOW = Byte.parseByte(s);
} else {
HOEOW = Byte.MIN_VALUE;
}
}

protected final void initHOEOWE(String s) {
if (!s.trim().isEmpty()) {
HOEOWE = Byte.parseByte(s);
} else {
HOEOWE = Byte.MIN_VALUE;
}
}

protected final void initHOEOWL(String s) {
if (!s.trim().isEmpty()) {
HOEOWL = Byte.parseByte(s);
} else {
HOEOWL = Byte.MIN_VALUE;
}
}

protected final void initHOEOWR(String s) {
if (!s.trim().isEmpty()) {
HOEOWR = Byte.parseByte(s);
} else {
HOEOWR = Byte.MIN_VALUE;
}
}

protected final void initHOEOWU(String s) {
if (!s.trim().isEmpty()) {
HOEOWU = Byte.parseByte(s);
} else {
HOEOWU = Byte.MIN_VALUE;
}
}

protected final void initHOEPAY(String s) {
if (!s.trim().isEmpty()) {
HOEPAY = Byte.parseByte(s);
} else {
HOEPAY = Byte.MIN_VALUE;
}
}

protected final void initHOEPS(String s) {
if (!s.trim().isEmpty()) {
HOEPS = Byte.parseByte(s);
} else {
HOEPS = Byte.MIN_VALUE;
}
}

protected final void initHOEPSE(String s) {
if (!s.trim().isEmpty()) {
HOEPSE = Byte.parseByte(s);
} else {
HOEPSE = Byte.MIN_VALUE;
}
}

protected final void initHOEPSL(String s) {
if (!s.trim().isEmpty()) {
HOEPSL = Byte.parseByte(s);
} else {
HOEPSL = Byte.MIN_VALUE;
}
}

protected final void initHOEPSR(String s) {
if (!s.trim().isEmpty()) {
HOEPSR = Byte.parseByte(s);
} else {
HOEPSR = Byte.MIN_VALUE;
}
}

protected final void initHOEPSU(String s) {
if (!s.trim().isEmpty()) {
HOEPSU = Byte.parseByte(s);
} else {
HOEPSU = Byte.MIN_VALUE;
}
}

protected final void initHOEPW(String s) {
if (!s.trim().isEmpty()) {
HOEPW = Byte.parseByte(s);
} else {
HOEPW = Byte.MIN_VALUE;
}
}

protected final void initHOEPWE(String s) {
if (!s.trim().isEmpty()) {
HOEPWE = Byte.parseByte(s);
} else {
HOEPWE = Byte.MIN_VALUE;
}
}

protected final void initHOEPWL(String s) {
if (!s.trim().isEmpty()) {
HOEPWL = Byte.parseByte(s);
} else {
HOEPWL = Byte.MIN_VALUE;
}
}

protected final void initHOEPWR(String s) {
if (!s.trim().isEmpty()) {
HOEPWR = Byte.parseByte(s);
} else {
HOEPWR = Byte.MIN_VALUE;
}
}

protected final void initHOEPWU(String s) {
if (!s.trim().isEmpty()) {
HOEPWU = Byte.parseByte(s);
} else {
HOEPWU = Byte.MIN_VALUE;
}
}

protected final void initHOFB(String s) {
if (!s.trim().isEmpty()) {
HOFB = Byte.parseByte(s);
} else {
HOFB = Byte.MIN_VALUE;
}
}

protected final void initHOFBMS(String s) {
if (!s.trim().isEmpty()) {
HOFBMS = Short.parseShort(s);
} else {
HOFBMS = Short.MIN_VALUE;
}
}

protected final void initHOFBMSE(String s) {
if (!s.trim().isEmpty()) {
HOFBMSE = Byte.parseByte(s);
} else {
HOFBMSE = Byte.MIN_VALUE;
}
}

protected final void initHOFBMSL(String s) {
if (!s.trim().isEmpty()) {
HOFBMSL = Byte.parseByte(s);
} else {
HOFBMSL = Byte.MIN_VALUE;
}
}

protected final void initHOFBMSR(String s) {
if (!s.trim().isEmpty()) {
HOFBMSR = Byte.parseByte(s);
} else {
HOFBMSR = Byte.MIN_VALUE;
}
}

protected final void initHOFBMSU(String s) {
if (!s.trim().isEmpty()) {
HOFBMSU = Byte.parseByte(s);
} else {
HOFBMSU = Byte.MIN_VALUE;
}
}

protected final void initHOFBMW(String s) {
if (!s.trim().isEmpty()) {
HOFBMW = Short.parseShort(s);
} else {
HOFBMW = Short.MIN_VALUE;
}
}

protected final void initHOFBMWE(String s) {
if (!s.trim().isEmpty()) {
HOFBMWE = Byte.parseByte(s);
} else {
HOFBMWE = Byte.MIN_VALUE;
}
}

protected final void initHOFBMWL(String s) {
if (!s.trim().isEmpty()) {
HOFBMWL = Byte.parseByte(s);
} else {
HOFBMWL = Byte.MIN_VALUE;
}
}

protected final void initHOFBMWR(String s) {
if (!s.trim().isEmpty()) {
HOFBMWR = Byte.parseByte(s);
} else {
HOFBMWR = Byte.MIN_VALUE;
}
}

protected final void initHOFBMWU(String s) {
if (!s.trim().isEmpty()) {
HOFBMWU = Byte.parseByte(s);
} else {
HOFBMWU = Byte.MIN_VALUE;
}
}

protected final void initHOFBQS(String s) {
if (!s.trim().isEmpty()) {
HOFBQS = Short.parseShort(s);
} else {
HOFBQS = Short.MIN_VALUE;
}
}

protected final void initHOFBQSE(String s) {
if (!s.trim().isEmpty()) {
HOFBQSE = Byte.parseByte(s);
} else {
HOFBQSE = Byte.MIN_VALUE;
}
}

protected final void initHOFBQSL(String s) {
if (!s.trim().isEmpty()) {
HOFBQSL = Short.parseShort(s);
} else {
HOFBQSL = Short.MIN_VALUE;
}
}

protected final void initHOFBQSR(String s) {
if (!s.trim().isEmpty()) {
HOFBQSR = Byte.parseByte(s);
} else {
HOFBQSR = Byte.MIN_VALUE;
}
}

protected final void initHOFBQSU(String s) {
if (!s.trim().isEmpty()) {
HOFBQSU = Short.parseShort(s);
} else {
HOFBQSU = Short.MIN_VALUE;
}
}

protected final void initHOFBQW(String s) {
if (!s.trim().isEmpty()) {
HOFBQW = Short.parseShort(s);
} else {
HOFBQW = Short.MIN_VALUE;
}
}

protected final void initHOFBQWE(String s) {
if (!s.trim().isEmpty()) {
HOFBQWE = Byte.parseByte(s);
} else {
HOFBQWE = Byte.MIN_VALUE;
}
}

protected final void initHOFBQWL(String s) {
if (!s.trim().isEmpty()) {
HOFBQWL = Short.parseShort(s);
} else {
HOFBQWL = Short.MIN_VALUE;
}
}

protected final void initHOFBQWR(String s) {
if (!s.trim().isEmpty()) {
HOFBQWR = Byte.parseByte(s);
} else {
HOFBQWR = Byte.MIN_VALUE;
}
}

protected final void initHOFBQWU(String s) {
if (!s.trim().isEmpty()) {
HOFBQWU = Short.parseShort(s);
} else {
HOFBQWU = Short.MIN_VALUE;
}
}

protected final void initHOFCS(String s) {
if (!s.trim().isEmpty()) {
HOFCS = Byte.parseByte(s);
} else {
HOFCS = Byte.MIN_VALUE;
}
}

protected final void initHOFCSE(String s) {
if (!s.trim().isEmpty()) {
HOFCSE = Byte.parseByte(s);
} else {
HOFCSE = Byte.MIN_VALUE;
}
}

protected final void initHOFCSL(String s) {
if (!s.trim().isEmpty()) {
HOFCSL = Byte.parseByte(s);
} else {
HOFCSL = Byte.MIN_VALUE;
}
}

protected final void initHOFCSR(String s) {
if (!s.trim().isEmpty()) {
HOFCSR = Byte.parseByte(s);
} else {
HOFCSR = Byte.MIN_VALUE;
}
}

protected final void initHOFCSU(String s) {
if (!s.trim().isEmpty()) {
HOFCSU = Byte.parseByte(s);
} else {
HOFCSU = Byte.MIN_VALUE;
}
}

protected final void initHOFCW(String s) {
if (!s.trim().isEmpty()) {
HOFCW = Byte.parseByte(s);
} else {
HOFCW = Byte.MIN_VALUE;
}
}

protected final void initHOFCWE(String s) {
if (!s.trim().isEmpty()) {
HOFCWE = Byte.parseByte(s);
} else {
HOFCWE = Byte.MIN_VALUE;
}
}

protected final void initHOFCWL(String s) {
if (!s.trim().isEmpty()) {
HOFCWL = Byte.parseByte(s);
} else {
HOFCWL = Byte.MIN_VALUE;
}
}

protected final void initHOFCWR(String s) {
if (!s.trim().isEmpty()) {
HOFCWR = Byte.parseByte(s);
} else {
HOFCWR = Byte.MIN_VALUE;
}
}

protected final void initHOFCWU(String s) {
if (!s.trim().isEmpty()) {
HOFCWU = Byte.parseByte(s);
} else {
HOFCWU = Byte.MIN_VALUE;
}
}

protected final void initHOFD(String s) {
if (!s.trim().isEmpty()) {
HOFD = Byte.parseByte(s);
} else {
HOFD = Byte.MIN_VALUE;
}
}

protected final void initHOFDM(String s) {
if (!s.trim().isEmpty()) {
HOFDM = Short.parseShort(s);
} else {
HOFDM = Short.MIN_VALUE;
}
}

protected final void initHOFDME(String s) {
if (!s.trim().isEmpty()) {
HOFDME = Byte.parseByte(s);
} else {
HOFDME = Byte.MIN_VALUE;
}
}

protected final void initHOFDML(String s) {
if (!s.trim().isEmpty()) {
HOFDML = Byte.parseByte(s);
} else {
HOFDML = Byte.MIN_VALUE;
}
}

protected final void initHOFDMR(String s) {
if (!s.trim().isEmpty()) {
HOFDMR = Byte.parseByte(s);
} else {
HOFDMR = Byte.MIN_VALUE;
}
}

protected final void initHOFDMU(String s) {
if (!s.trim().isEmpty()) {
HOFDMU = Byte.parseByte(s);
} else {
HOFDMU = Byte.MIN_VALUE;
}
}

protected final void initHOFDQ(String s) {
if (!s.trim().isEmpty()) {
HOFDQ = Short.parseShort(s);
} else {
HOFDQ = Short.MIN_VALUE;
}
}

protected final void initHOFDQE(String s) {
if (!s.trim().isEmpty()) {
HOFDQE = Byte.parseByte(s);
} else {
HOFDQE = Byte.MIN_VALUE;
}
}

protected final void initHOFDQL(String s) {
if (!s.trim().isEmpty()) {
HOFDQL = Short.parseShort(s);
} else {
HOFDQL = Short.MIN_VALUE;
}
}

protected final void initHOFDQR(String s) {
if (!s.trim().isEmpty()) {
HOFDQR = Byte.parseByte(s);
} else {
HOFDQR = Byte.MIN_VALUE;
}
}

protected final void initHOFDQU(String s) {
if (!s.trim().isEmpty()) {
HOFDQU = Short.parseShort(s);
} else {
HOFDQU = Short.MIN_VALUE;
}
}

protected final void initHOFOIS(String s) {
if (!s.trim().isEmpty()) {
HOFOIS = Byte.parseByte(s);
} else {
HOFOIS = Byte.MIN_VALUE;
}
}

protected final void initHOFOISE(String s) {
if (!s.trim().isEmpty()) {
HOFOISE = Byte.parseByte(s);
} else {
HOFOISE = Byte.MIN_VALUE;
}
}

protected final void initHOFOISL(String s) {
if (!s.trim().isEmpty()) {
HOFOISL = Byte.parseByte(s);
} else {
HOFOISL = Byte.MIN_VALUE;
}
}

protected final void initHOFOISR(String s) {
if (!s.trim().isEmpty()) {
HOFOISR = Byte.parseByte(s);
} else {
HOFOISR = Byte.MIN_VALUE;
}
}

protected final void initHOFOISU(String s) {
if (!s.trim().isEmpty()) {
HOFOISU = Byte.parseByte(s);
} else {
HOFOISU = Byte.MIN_VALUE;
}
}

protected final void initHOFOIW(String s) {
if (!s.trim().isEmpty()) {
HOFOIW = Byte.parseByte(s);
} else {
HOFOIW = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWE(String s) {
if (!s.trim().isEmpty()) {
HOFOIWE = Byte.parseByte(s);
} else {
HOFOIWE = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWL(String s) {
if (!s.trim().isEmpty()) {
HOFOIWL = Byte.parseByte(s);
} else {
HOFOIWL = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWR(String s) {
if (!s.trim().isEmpty()) {
HOFOIWR = Byte.parseByte(s);
} else {
HOFOIWR = Byte.MIN_VALUE;
}
}

protected final void initHOFOIWU(String s) {
if (!s.trim().isEmpty()) {
HOFOIWU = Byte.parseByte(s);
} else {
HOFOIWU = Byte.MIN_VALUE;
}
}

protected final void initHOFOODE(String s) {
if (!s.trim().isEmpty()) {
HOFOODE = Byte.parseByte(s);
} else {
HOFOODE = Byte.MIN_VALUE;
}
}

protected final void initHOFOODL(String s) {
if (!s.trim().isEmpty()) {
HOFOODL = Short.parseShort(s);
} else {
HOFOODL = Short.MIN_VALUE;
}
}

protected final void initHOFOODR(String s) {
if (!s.trim().isEmpty()) {
HOFOODR = Byte.parseByte(s);
} else {
HOFOODR = Byte.MIN_VALUE;
}
}

protected final void initHOFOODU(String s) {
if (!s.trim().isEmpty()) {
HOFOODU = Short.parseShort(s);
} else {
HOFOODU = Short.MIN_VALUE;
}
}

protected final void initHOFOS(String s) {
if (!s.trim().isEmpty()) {
HOFOS = Byte.parseByte(s);
} else {
HOFOS = Byte.MIN_VALUE;
}
}

protected final void initHOFOSE(String s) {
if (!s.trim().isEmpty()) {
HOFOSE = Byte.parseByte(s);
} else {
HOFOSE = Byte.MIN_VALUE;
}
}

protected final void initHOFOSL(String s) {
if (!s.trim().isEmpty()) {
HOFOSL = Byte.parseByte(s);
} else {
HOFOSL = Byte.MIN_VALUE;
}
}

protected final void initHOFOSR(String s) {
if (!s.trim().isEmpty()) {
HOFOSR = Byte.parseByte(s);
} else {
HOFOSR = Byte.MIN_VALUE;
}
}

protected final void initHOFOSU(String s) {
if (!s.trim().isEmpty()) {
HOFOSU = Byte.parseByte(s);
} else {
HOFOSU = Byte.MIN_VALUE;
}
}

protected final void initHOFOW(String s) {
if (!s.trim().isEmpty()) {
HOFOW = Byte.parseByte(s);
} else {
HOFOW = Byte.MIN_VALUE;
}
}

protected final void initHOFOWE(String s) {
if (!s.trim().isEmpty()) {
HOFOWE = Byte.parseByte(s);
} else {
HOFOWE = Byte.MIN_VALUE;
}
}

protected final void initHOFOWL(String s) {
if (!s.trim().isEmpty()) {
HOFOWL = Byte.parseByte(s);
} else {
HOFOWL = Byte.MIN_VALUE;
}
}

protected final void initHOFOWR(String s) {
if (!s.trim().isEmpty()) {
HOFOWR = Byte.parseByte(s);
} else {
HOFOWR = Byte.MIN_VALUE;
}
}

protected final void initHOFOWU(String s) {
if (!s.trim().isEmpty()) {
HOFOWU = Byte.parseByte(s);
} else {
HOFOWU = Byte.MIN_VALUE;
}
}

protected final void initHOFPAY(String s) {
if (!s.trim().isEmpty()) {
HOFPAY = Byte.parseByte(s);
} else {
HOFPAY = Byte.MIN_VALUE;
}
}

protected final void initHOFPGS(String s) {
if (!s.trim().isEmpty()) {
HOFPGS = Byte.parseByte(s);
} else {
HOFPGS = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSE(String s) {
if (!s.trim().isEmpty()) {
HOFPGSE = Byte.parseByte(s);
} else {
HOFPGSE = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSL(String s) {
if (!s.trim().isEmpty()) {
HOFPGSL = Byte.parseByte(s);
} else {
HOFPGSL = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSR(String s) {
if (!s.trim().isEmpty()) {
HOFPGSR = Byte.parseByte(s);
} else {
HOFPGSR = Byte.MIN_VALUE;
}
}

protected final void initHOFPGSU(String s) {
if (!s.trim().isEmpty()) {
HOFPGSU = Byte.parseByte(s);
} else {
HOFPGSU = Byte.MIN_VALUE;
}
}

protected final void initHOFPGW(String s) {
if (!s.trim().isEmpty()) {
HOFPGW = Byte.parseByte(s);
} else {
HOFPGW = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWE(String s) {
if (!s.trim().isEmpty()) {
HOFPGWE = Byte.parseByte(s);
} else {
HOFPGWE = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWL(String s) {
if (!s.trim().isEmpty()) {
HOFPGWL = Byte.parseByte(s);
} else {
HOFPGWL = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWR(String s) {
if (!s.trim().isEmpty()) {
HOFPGWR = Byte.parseByte(s);
} else {
HOFPGWR = Byte.MIN_VALUE;
}
}

protected final void initHOFPGWU(String s) {
if (!s.trim().isEmpty()) {
HOFPGWU = Byte.parseByte(s);
} else {
HOFPGWU = Byte.MIN_VALUE;
}
}

protected final void initHOFPS(String s) {
if (!s.trim().isEmpty()) {
HOFPS = Byte.parseByte(s);
} else {
HOFPS = Byte.MIN_VALUE;
}
}

protected final void initHOFPSE(String s) {
if (!s.trim().isEmpty()) {
HOFPSE = Byte.parseByte(s);
} else {
HOFPSE = Byte.MIN_VALUE;
}
}

protected final void initHOFPSL(String s) {
if (!s.trim().isEmpty()) {
HOFPSL = Byte.parseByte(s);
} else {
HOFPSL = Byte.MIN_VALUE;
}
}

protected final void initHOFPSR(String s) {
if (!s.trim().isEmpty()) {
HOFPSR = Byte.parseByte(s);
} else {
HOFPSR = Byte.MIN_VALUE;
}
}

protected final void initHOFPSU(String s) {
if (!s.trim().isEmpty()) {
HOFPSU = Byte.parseByte(s);
} else {
HOFPSU = Byte.MIN_VALUE;
}
}

protected final void initHOFPW(String s) {
if (!s.trim().isEmpty()) {
HOFPW = Byte.parseByte(s);
} else {
HOFPW = Byte.MIN_VALUE;
}
}

protected final void initHOFPWE(String s) {
if (!s.trim().isEmpty()) {
HOFPWE = Byte.parseByte(s);
} else {
HOFPWE = Byte.MIN_VALUE;
}
}

protected final void initHOFPWL(String s) {
if (!s.trim().isEmpty()) {
HOFPWL = Byte.parseByte(s);
} else {
HOFPWL = Byte.MIN_VALUE;
}
}

protected final void initHOFPWR(String s) {
if (!s.trim().isEmpty()) {
HOFPWR = Byte.parseByte(s);
} else {
HOFPWR = Byte.MIN_VALUE;
}
}

protected final void initHOFPWU(String s) {
if (!s.trim().isEmpty()) {
HOFPWU = Byte.parseByte(s);
} else {
HOFPWU = Byte.MIN_VALUE;
}
}

protected final void initHOFSM(String s) {
if (!s.trim().isEmpty()) {
HOFSM = Short.parseShort(s);
} else {
HOFSM = Short.MIN_VALUE;
}
}

protected final void initHOFSME(String s) {
if (!s.trim().isEmpty()) {
HOFSME = Byte.parseByte(s);
} else {
HOFSME = Byte.MIN_VALUE;
}
}

protected final void initHOFSML(String s) {
if (!s.trim().isEmpty()) {
HOFSML = Byte.parseByte(s);
} else {
HOFSML = Byte.MIN_VALUE;
}
}

protected final void initHOFSMR(String s) {
if (!s.trim().isEmpty()) {
HOFSMR = Byte.parseByte(s);
} else {
HOFSMR = Byte.MIN_VALUE;
}
}

protected final void initHOFSMU(String s) {
if (!s.trim().isEmpty()) {
HOFSMU = Byte.parseByte(s);
} else {
HOFSMU = Byte.MIN_VALUE;
}
}

protected final void initHOFSP(String s) {
if (!s.trim().isEmpty()) {
HOFSP = Byte.parseByte(s);
} else {
HOFSP = Byte.MIN_VALUE;
}
}

protected final void initHOFSQ(String s) {
if (!s.trim().isEmpty()) {
HOFSQ = Byte.parseByte(s);
} else {
HOFSQ = Byte.MIN_VALUE;
}
}

protected final void initHOFSQE(String s) {
if (!s.trim().isEmpty()) {
HOFSQE = Byte.parseByte(s);
} else {
HOFSQE = Byte.MIN_VALUE;
}
}

protected final void initHOFSQL(String s) {
if (!s.trim().isEmpty()) {
HOFSQL = Byte.parseByte(s);
} else {
HOFSQL = Byte.MIN_VALUE;
}
}

protected final void initHOFSQR(String s) {
if (!s.trim().isEmpty()) {
HOFSQR = Byte.parseByte(s);
} else {
HOFSQR = Byte.MIN_VALUE;
}
}

protected final void initHOFSQU(String s) {
if (!s.trim().isEmpty()) {
HOFSQU = Byte.parseByte(s);
} else {
HOFSQU = Byte.MIN_VALUE;
}
}

protected final void initHOFSUP(String s) {
if (!s.trim().isEmpty()) {
HOFSUP = Byte.parseByte(s);
} else {
HOFSUP = Byte.MIN_VALUE;
}
}

protected final void initHOFSW(String s) {
if (!s.trim().isEmpty()) {
HOFSW = Short.parseShort(s);
} else {
HOFSW = Short.MIN_VALUE;
}
}

protected final void initHOFSWE(String s) {
if (!s.trim().isEmpty()) {
HOFSWE = Byte.parseByte(s);
} else {
HOFSWE = Byte.MIN_VALUE;
}
}

protected final void initHOFSWL(String s) {
if (!s.trim().isEmpty()) {
HOFSWL = Byte.parseByte(s);
} else {
HOFSWL = Byte.MIN_VALUE;
}
}

protected final void initHOFSWR(String s) {
if (!s.trim().isEmpty()) {
HOFSWR = Byte.parseByte(s);
} else {
HOFSWR = Byte.MIN_VALUE;
}
}

protected final void initHOFSWU(String s) {
if (!s.trim().isEmpty()) {
HOFSWU = Byte.parseByte(s);
} else {
HOFSWU = Byte.MIN_VALUE;
}
}

protected final void initHOFTOG(String s) {
if (!s.trim().isEmpty()) {
HOFTOG = Byte.parseByte(s);
} else {
HOFTOG = Byte.MIN_VALUE;
}
}

protected final void initHOFUEL95(String s) {
if (!s.trim().isEmpty()) {
HOFUEL95 = Byte.parseByte(s);
} else {
HOFUEL95 = Byte.MIN_VALUE;
}
}

protected final void initHOFUELCO(String s) {
if (!s.trim().isEmpty()) {
HOFUELCO = Byte.parseByte(s);
} else {
HOFUELCO = Byte.MIN_VALUE;
}
}

protected final void initHOFUELEL(String s) {
if (!s.trim().isEmpty()) {
HOFUELEL = Byte.parseByte(s);
} else {
HOFUELEL = Byte.MIN_VALUE;
}
}

protected final void initHOFUELGA(String s) {
if (!s.trim().isEmpty()) {
HOFUELGA = Byte.parseByte(s);
} else {
HOFUELGA = Byte.MIN_VALUE;
}
}

protected final void initHOFUELM85(String s) {
if (!s.trim().isEmpty()) {
HOFUELM85 = Byte.parseByte(s);
} else {
HOFUELM85 = Byte.MIN_VALUE;
}
}

protected final void initHOFUELM86(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
HOFUELM86 = false;
} else {
HOFUELM86 = true;
}
}
}

protected final void initHOFUELOI(String s) {
if (!s.trim().isEmpty()) {
HOFUELOI = Byte.parseByte(s);
} else {
HOFUELOI = Byte.MIN_VALUE;
}
}

protected final void initHOFUELPA(String s) {
if (!s.trim().isEmpty()) {
HOFUELPA = Byte.parseByte(s);
} else {
HOFUELPA = Byte.MIN_VALUE;
}
}

protected final void initHOFUELWO(String s) {
if (!s.trim().isEmpty()) {
HOFUELWO = Byte.parseByte(s);
} else {
HOFUELWO = Byte.MIN_VALUE;
}
}

protected final void initHOFUEMCO(String s) {
if (!s.trim().isEmpty()) {
HOFUEMCO = Byte.parseByte(s);
} else {
HOFUEMCO = Byte.MIN_VALUE;
}
}

protected final void initHOFUEMEL(String s) {
if (!s.trim().isEmpty()) {
HOFUEMEL = Byte.parseByte(s);
} else {
HOFUEMEL = Byte.MIN_VALUE;
}
}

protected final void initHOFUEMGA(String s) {
if (!s.trim().isEmpty()) {
HOFUEMGA = Byte.parseByte(s);
} else {
HOFUEMGA = Byte.MIN_VALUE;
}
}

protected final void initHOFUEMOI(String s) {
if (!s.trim().isEmpty()) {
HOFUEMOI = Byte.parseByte(s);
} else {
HOFUEMOI = Byte.MIN_VALUE;
}
}

protected final void initHOFUEMPA(String s) {
if (!s.trim().isEmpty()) {
HOFUEMPA = Byte.parseByte(s);
} else {
HOFUEMPA = Byte.MIN_VALUE;
}
}

protected final void initHOFUEMWO(String s) {
if (!s.trim().isEmpty()) {
HOFUEMWO = Byte.parseByte(s);
} else {
HOFUEMWO = Byte.MIN_VALUE;
}
}

protected final void initHOFWS(String s) {
if (!s.trim().isEmpty()) {
HOFWS = Byte.parseByte(s);
} else {
HOFWS = Byte.MIN_VALUE;
}
}

protected final void initHOFWSE(String s) {
if (!s.trim().isEmpty()) {
HOFWSE = Byte.parseByte(s);
} else {
HOFWSE = Byte.MIN_VALUE;
}
}

protected final void initHOFWSL(String s) {
if (!s.trim().isEmpty()) {
HOFWSL = Byte.parseByte(s);
} else {
HOFWSL = Byte.MIN_VALUE;
}
}

protected final void initHOFWSR(String s) {
if (!s.trim().isEmpty()) {
HOFWSR = Byte.parseByte(s);
} else {
HOFWSR = Byte.MIN_VALUE;
}
}

protected final void initHOFWSU(String s) {
if (!s.trim().isEmpty()) {
HOFWSU = Byte.parseByte(s);
} else {
HOFWSU = Byte.MIN_VALUE;
}
}

protected final void initHOFWW(String s) {
if (!s.trim().isEmpty()) {
HOFWW = Byte.parseByte(s);
} else {
HOFWW = Byte.MIN_VALUE;
}
}

protected final void initHOFWWE(String s) {
if (!s.trim().isEmpty()) {
HOFWWE = Byte.parseByte(s);
} else {
HOFWWE = Byte.MIN_VALUE;
}
}

protected final void initHOFWWL(String s) {
if (!s.trim().isEmpty()) {
HOFWWL = Byte.parseByte(s);
} else {
HOFWWL = Byte.MIN_VALUE;
}
}

protected final void initHOFWWR(String s) {
if (!s.trim().isEmpty()) {
HOFWWR = Byte.parseByte(s);
} else {
HOFWWR = Byte.MIN_VALUE;
}
}

protected final void initHOFWWU(String s) {
if (!s.trim().isEmpty()) {
HOFWWU = Byte.parseByte(s);
} else {
HOFWWU = Byte.MIN_VALUE;
}
}

protected final void initHOFXS(String s) {
if (!s.trim().isEmpty()) {
HOFXS = Byte.parseByte(s);
} else {
HOFXS = Byte.MIN_VALUE;
}
}

protected final void initHOFXSE(String s) {
if (!s.trim().isEmpty()) {
HOFXSE = Byte.parseByte(s);
} else {
HOFXSE = Byte.MIN_VALUE;
}
}

protected final void initHOFXSL(String s) {
if (!s.trim().isEmpty()) {
HOFXSL = Byte.parseByte(s);
} else {
HOFXSL = Byte.MIN_VALUE;
}
}

protected final void initHOFXSR(String s) {
if (!s.trim().isEmpty()) {
HOFXSR = Byte.parseByte(s);
} else {
HOFXSR = Byte.MIN_VALUE;
}
}

protected final void initHOFXSU(String s) {
if (!s.trim().isEmpty()) {
HOFXSU = Byte.parseByte(s);
} else {
HOFXSU = Byte.MIN_VALUE;
}
}

protected final void initHOFXW(String s) {
if (!s.trim().isEmpty()) {
HOFXW = Byte.parseByte(s);
} else {
HOFXW = Byte.MIN_VALUE;
}
}

protected final void initHOFXWE(String s) {
if (!s.trim().isEmpty()) {
HOFXWE = Byte.parseByte(s);
} else {
HOFXWE = Byte.MIN_VALUE;
}
}

protected final void initHOFXWL(String s) {
if (!s.trim().isEmpty()) {
HOFXWL = Byte.parseByte(s);
} else {
HOFXWL = Byte.MIN_VALUE;
}
}

protected final void initHOFXWR(String s) {
if (!s.trim().isEmpty()) {
HOFXWR = Byte.parseByte(s);
} else {
HOFXWR = Byte.MIN_VALUE;
}
}

protected final void initHOFXWU(String s) {
if (!s.trim().isEmpty()) {
HOFXWU = Byte.parseByte(s);
} else {
HOFXWU = Byte.MIN_VALUE;
}
}

protected final void initHOGBMS(String s) {
if (!s.trim().isEmpty()) {
HOGBMS = Short.parseShort(s);
} else {
HOGBMS = Short.MIN_VALUE;
}
}

protected final void initHOGBMSE(String s) {
if (!s.trim().isEmpty()) {
HOGBMSE = Byte.parseByte(s);
} else {
HOGBMSE = Byte.MIN_VALUE;
}
}

protected final void initHOGBMSL(String s) {
if (!s.trim().isEmpty()) {
HOGBMSL = Byte.parseByte(s);
} else {
HOGBMSL = Byte.MIN_VALUE;
}
}

protected final void initHOGBMSR(String s) {
if (!s.trim().isEmpty()) {
HOGBMSR = Byte.parseByte(s);
} else {
HOGBMSR = Byte.MIN_VALUE;
}
}

protected final void initHOGBMSU(String s) {
if (!s.trim().isEmpty()) {
HOGBMSU = Byte.parseByte(s);
} else {
HOGBMSU = Byte.MIN_VALUE;
}
}

protected final void initHOGBMW(String s) {
if (!s.trim().isEmpty()) {
HOGBMW = Short.parseShort(s);
} else {
HOGBMW = Short.MIN_VALUE;
}
}

protected final void initHOGBMWE(String s) {
if (!s.trim().isEmpty()) {
HOGBMWE = Byte.parseByte(s);
} else {
HOGBMWE = Byte.MIN_VALUE;
}
}

protected final void initHOGBMWL(String s) {
if (!s.trim().isEmpty()) {
HOGBMWL = Byte.parseByte(s);
} else {
HOGBMWL = Byte.MIN_VALUE;
}
}

protected final void initHOGBMWR(String s) {
if (!s.trim().isEmpty()) {
HOGBMWR = Byte.parseByte(s);
} else {
HOGBMWR = Byte.MIN_VALUE;
}
}

protected final void initHOGBMWU(String s) {
if (!s.trim().isEmpty()) {
HOGBMWU = Byte.parseByte(s);
} else {
HOGBMWU = Byte.MIN_VALUE;
}
}

protected final void initHOGBP(String s) {
if (!s.trim().isEmpty()) {
HOGBP = Byte.parseByte(s);
} else {
HOGBP = Byte.MIN_VALUE;
}
}

protected final void initHOGBQS(String s) {
if (!s.trim().isEmpty()) {
HOGBQS = Short.parseShort(s);
} else {
HOGBQS = Short.MIN_VALUE;
}
}

protected final void initHOGBQSE(String s) {
if (!s.trim().isEmpty()) {
HOGBQSE = Byte.parseByte(s);
} else {
HOGBQSE = Byte.MIN_VALUE;
}
}

protected final void initHOGBQSL(String s) {
if (!s.trim().isEmpty()) {
HOGBQSL = Short.parseShort(s);
} else {
HOGBQSL = Short.MIN_VALUE;
}
}

protected final void initHOGBQSR(String s) {
if (!s.trim().isEmpty()) {
HOGBQSR = Byte.parseByte(s);
} else {
HOGBQSR = Byte.MIN_VALUE;
}
}

protected final void initHOGBQSU(String s) {
if (!s.trim().isEmpty()) {
HOGBQSU = Short.parseShort(s);
} else {
HOGBQSU = Short.MIN_VALUE;
}
}

protected final void initHOGBQW(String s) {
if (!s.trim().isEmpty()) {
HOGBQW = Short.parseShort(s);
} else {
HOGBQW = Short.MIN_VALUE;
}
}

protected final void initHOGBQWE(String s) {
if (!s.trim().isEmpty()) {
HOGBQWE = Byte.parseByte(s);
} else {
HOGBQWE = Byte.MIN_VALUE;
}
}

protected final void initHOGBQWL(String s) {
if (!s.trim().isEmpty()) {
HOGBQWL = Short.parseShort(s);
} else {
HOGBQWL = Short.MIN_VALUE;
}
}

protected final void initHOGBQWR(String s) {
if (!s.trim().isEmpty()) {
HOGBQWR = Byte.parseByte(s);
} else {
HOGBQWR = Byte.MIN_VALUE;
}
}

protected final void initHOGBQWU(String s) {
if (!s.trim().isEmpty()) {
HOGBQWU = Short.parseShort(s);
} else {
HOGBQWU = Short.MIN_VALUE;
}
}

protected final void initHOGD(String s) {
if (!s.trim().isEmpty()) {
HOGD = Byte.parseByte(s);
} else {
HOGD = Byte.MIN_VALUE;
}
}

protected final void initHOGDM(String s) {
if (!s.trim().isEmpty()) {
HOGDM = Short.parseShort(s);
} else {
HOGDM = Short.MIN_VALUE;
}
}

protected final void initHOGDME(String s) {
if (!s.trim().isEmpty()) {
HOGDME = Byte.parseByte(s);
} else {
HOGDME = Byte.MIN_VALUE;
}
}

protected final void initHOGDML(String s) {
if (!s.trim().isEmpty()) {
HOGDML = Byte.parseByte(s);
} else {
HOGDML = Byte.MIN_VALUE;
}
}

protected final void initHOGDMR(String s) {
if (!s.trim().isEmpty()) {
HOGDMR = Byte.parseByte(s);
} else {
HOGDMR = Byte.MIN_VALUE;
}
}

protected final void initHOGDMU(String s) {
if (!s.trim().isEmpty()) {
HOGDMU = Byte.parseByte(s);
} else {
HOGDMU = Byte.MIN_VALUE;
}
}

protected final void initHOGDQ(String s) {
if (!s.trim().isEmpty()) {
HOGDQ = Short.parseShort(s);
} else {
HOGDQ = Short.MIN_VALUE;
}
}

protected final void initHOGDQE(String s) {
if (!s.trim().isEmpty()) {
HOGDQE = Byte.parseByte(s);
} else {
HOGDQE = Byte.MIN_VALUE;
}
}

protected final void initHOGDQL(String s) {
if (!s.trim().isEmpty()) {
HOGDQL = Short.parseShort(s);
} else {
HOGDQL = Short.MIN_VALUE;
}
}

protected final void initHOGDQR(String s) {
if (!s.trim().isEmpty()) {
HOGDQR = Byte.parseByte(s);
} else {
HOGDQR = Byte.MIN_VALUE;
}
}

protected final void initHOGDQU(String s) {
if (!s.trim().isEmpty()) {
HOGDQU = Short.parseShort(s);
} else {
HOGDQU = Short.MIN_VALUE;
}
}

protected final void initHOGOS(String s) {
if (!s.trim().isEmpty()) {
HOGOS = Byte.parseByte(s);
} else {
HOGOS = Byte.MIN_VALUE;
}
}

protected final void initHOGOSE(String s) {
if (!s.trim().isEmpty()) {
HOGOSE = Byte.parseByte(s);
} else {
HOGOSE = Byte.MIN_VALUE;
}
}

protected final void initHOGOSL(String s) {
if (!s.trim().isEmpty()) {
HOGOSL = Byte.parseByte(s);
} else {
HOGOSL = Byte.MIN_VALUE;
}
}

protected final void initHOGOSR(String s) {
if (!s.trim().isEmpty()) {
HOGOSR = Byte.parseByte(s);
} else {
HOGOSR = Byte.MIN_VALUE;
}
}

protected final void initHOGOSU(String s) {
if (!s.trim().isEmpty()) {
HOGOSU = Byte.parseByte(s);
} else {
HOGOSU = Byte.MIN_VALUE;
}
}

protected final void initHOGOW(String s) {
if (!s.trim().isEmpty()) {
HOGOW = Byte.parseByte(s);
} else {
HOGOW = Byte.MIN_VALUE;
}
}

protected final void initHOGOWE(String s) {
if (!s.trim().isEmpty()) {
HOGOWE = Byte.parseByte(s);
} else {
HOGOWE = Byte.MIN_VALUE;
}
}

protected final void initHOGOWL(String s) {
if (!s.trim().isEmpty()) {
HOGOWL = Byte.parseByte(s);
} else {
HOGOWL = Byte.MIN_VALUE;
}
}

protected final void initHOGOWR(String s) {
if (!s.trim().isEmpty()) {
HOGOWR = Byte.parseByte(s);
} else {
HOGOWR = Byte.MIN_VALUE;
}
}

protected final void initHOGOWU(String s) {
if (!s.trim().isEmpty()) {
HOGOWU = Byte.parseByte(s);
} else {
HOGOWU = Byte.MIN_VALUE;
}
}

protected final void initHOGPAY(String s) {
if (!s.trim().isEmpty()) {
HOGPAY = Byte.parseByte(s);
} else {
HOGPAY = Byte.MIN_VALUE;
}
}

protected final void initHOGPS(String s) {
if (!s.trim().isEmpty()) {
HOGPS = Byte.parseByte(s);
} else {
HOGPS = Byte.MIN_VALUE;
}
}

protected final void initHOGPSE(String s) {
if (!s.trim().isEmpty()) {
HOGPSE = Byte.parseByte(s);
} else {
HOGPSE = Byte.MIN_VALUE;
}
}

protected final void initHOGPSL(String s) {
if (!s.trim().isEmpty()) {
HOGPSL = Byte.parseByte(s);
} else {
HOGPSL = Byte.MIN_VALUE;
}
}

protected final void initHOGPSR(String s) {
if (!s.trim().isEmpty()) {
HOGPSR = Byte.parseByte(s);
} else {
HOGPSR = Byte.MIN_VALUE;
}
}

protected final void initHOGPSU(String s) {
if (!s.trim().isEmpty()) {
HOGPSU = Byte.parseByte(s);
} else {
HOGPSU = Byte.MIN_VALUE;
}
}

protected final void initHOGPW(String s) {
if (!s.trim().isEmpty()) {
HOGPW = Byte.parseByte(s);
} else {
HOGPW = Byte.MIN_VALUE;
}
}

protected final void initHOGPWE(String s) {
if (!s.trim().isEmpty()) {
HOGPWE = Byte.parseByte(s);
} else {
HOGPWE = Byte.MIN_VALUE;
}
}

protected final void initHOGPWL(String s) {
if (!s.trim().isEmpty()) {
HOGPWL = Byte.parseByte(s);
} else {
HOGPWL = Byte.MIN_VALUE;
}
}

protected final void initHOGPWR(String s) {
if (!s.trim().isEmpty()) {
HOGPWR = Byte.parseByte(s);
} else {
HOGPWR = Byte.MIN_VALUE;
}
}

protected final void initHOGPWU(String s) {
if (!s.trim().isEmpty()) {
HOGPWU = Byte.parseByte(s);
} else {
HOGPWU = Byte.MIN_VALUE;
}
}

protected final void initHOHAV95(String s) {
if (!s.trim().isEmpty()) {
HOHAV95 = Byte.parseByte(s);
} else {
HOHAV95 = Byte.MIN_VALUE;
}
}

protected final void initHOHAV96(String s) {
if (!s.trim().isEmpty()) {
HOHAV96 = Byte.parseByte(s);
} else {
HOHAV96 = Byte.MIN_VALUE;
}
}

protected final void initHOHAVB95(String s) {
if (!s.trim().isEmpty()) {
HOHAVB95 = Byte.parseByte(s);
} else {
HOHAVB95 = Byte.MIN_VALUE;
}
}

protected final void initHOHAVB96(String s) {
if (!s.trim().isEmpty()) {
HOHAVB96 = Byte.parseByte(s);
} else {
HOHAVB96 = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBCD(String s) {
if (!s.trim().isEmpty()) {
HOHAVBCD = Byte.parseByte(s);
} else {
HOHAVBCD = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBDR(String s) {
if (!s.trim().isEmpty()) {
HOHAVBDR = Byte.parseByte(s);
} else {
HOHAVBDR = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBDT(String s) {
if (!s.trim().isEmpty()) {
HOHAVBDT = Byte.parseByte(s);
} else {
HOHAVBDT = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBDV(String s) {
if (!s.trim().isEmpty()) {
HOHAVBDV = Byte.parseByte(s);
} else {
HOHAVBDV = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBDW(String s) {
if (!s.trim().isEmpty()) {
HOHAVBDW = Byte.parseByte(s);
} else {
HOHAVBDW = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBFF(String s) {
if (!s.trim().isEmpty()) {
HOHAVBFF = Byte.parseByte(s);
} else {
HOHAVBFF = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBMO(String s) {
if (!s.trim().isEmpty()) {
HOHAVBMO = Byte.parseByte(s);
} else {
HOHAVBMO = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBPC(String s) {
if (!s.trim().isEmpty()) {
HOHAVBPC = Byte.parseByte(s);
} else {
HOHAVBPC = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBPH(String s) {
if (!s.trim().isEmpty()) {
HOHAVBPH = Byte.parseByte(s);
} else {
HOHAVBPH = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBTV(String s) {
if (!s.trim().isEmpty()) {
HOHAVBTV = Byte.parseByte(s);
} else {
HOHAVBTV = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBVR(String s) {
if (!s.trim().isEmpty()) {
HOHAVBVR = Byte.parseByte(s);
} else {
HOHAVBVR = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBWD(String s) {
if (!s.trim().isEmpty()) {
HOHAVBWD = Byte.parseByte(s);
} else {
HOHAVBWD = Byte.MIN_VALUE;
}
}

protected final void initHOHAVBWM(String s) {
if (!s.trim().isEmpty()) {
HOHAVBWM = Byte.parseByte(s);
} else {
HOHAVBWM = Byte.MIN_VALUE;
}
}

protected final void initHOHAVCD(String s) {
if (!s.trim().isEmpty()) {
HOHAVCD = Byte.parseByte(s);
} else {
HOHAVCD = Byte.MIN_VALUE;
}
}

protected final void initHOHAVDR(String s) {
if (!s.trim().isEmpty()) {
HOHAVDR = Byte.parseByte(s);
} else {
HOHAVDR = Byte.MIN_VALUE;
}
}

protected final void initHOHAVDT(String s) {
if (!s.trim().isEmpty()) {
HOHAVDT = Byte.parseByte(s);
} else {
HOHAVDT = Byte.MIN_VALUE;
}
}

protected final void initHOHAVDV(String s) {
if (!s.trim().isEmpty()) {
HOHAVDV = Byte.parseByte(s);
} else {
HOHAVDV = Byte.MIN_VALUE;
}
}

protected final void initHOHAVDW(String s) {
if (!s.trim().isEmpty()) {
HOHAVDW = Byte.parseByte(s);
} else {
HOHAVDW = Byte.MIN_VALUE;
}
}

protected final void initHOHAVFF(String s) {
if (!s.trim().isEmpty()) {
HOHAVFF = Byte.parseByte(s);
} else {
HOHAVFF = Byte.MIN_VALUE;
}
}

protected final void initHOHAVMO(String s) {
if (!s.trim().isEmpty()) {
HOHAVMO = Byte.parseByte(s);
} else {
HOHAVMO = Byte.MIN_VALUE;
}
}

protected final void initHOHAVPC(String s) {
if (!s.trim().isEmpty()) {
HOHAVPC = Byte.parseByte(s);
} else {
HOHAVPC = Byte.MIN_VALUE;
}
}

protected final void initHOHAVPH(String s) {
if (!s.trim().isEmpty()) {
HOHAVPH = Byte.parseByte(s);
} else {
HOHAVPH = Byte.MIN_VALUE;
}
}

protected final void initHOHAVTV(String s) {
if (!s.trim().isEmpty()) {
HOHAVTV = Byte.parseByte(s);
} else {
HOHAVTV = Byte.MIN_VALUE;
}
}

protected final void initHOHAVVR(String s) {
if (!s.trim().isEmpty()) {
HOHAVVR = Byte.parseByte(s);
} else {
HOHAVVR = Byte.MIN_VALUE;
}
}

protected final void initHOHAVWD(String s) {
if (!s.trim().isEmpty()) {
HOHAVWD = Byte.parseByte(s);
} else {
HOHAVWD = Byte.MIN_VALUE;
}
}

protected final void initHOHAVWM(String s) {
if (!s.trim().isEmpty()) {
HOHAVWM = Byte.parseByte(s);
} else {
HOHAVWM = Byte.MIN_VALUE;
}
}

protected final void initHOHB95(String s) {
if (!s.trim().isEmpty()) {
HOHB95 = Byte.parseByte(s);
} else {
HOHB95 = Byte.MIN_VALUE;
}
}

protected final void initHOHB96(String s) {
if (!s.trim().isEmpty()) {
HOHB96 = Byte.parseByte(s);
} else {
HOHB96 = Byte.MIN_VALUE;
}
}

protected final void initHOHBA(String s) {
if (!s.trim().isEmpty()) {
HOHBA = Short.parseShort(s);
} else {
HOHBA = Short.MIN_VALUE;
}
}

protected final void initHOHBAFE(String s) {
if (!s.trim().isEmpty()) {
HOHBAFE = Byte.parseByte(s);
} else {
HOHBAFE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAFL(String s) {
if (!s.trim().isEmpty()) {
HOHBAFL = Byte.parseByte(s);
} else {
HOHBAFL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAFR(String s) {
if (!s.trim().isEmpty()) {
HOHBAFR = Byte.parseByte(s);
} else {
HOHBAFR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAFU(String s) {
if (!s.trim().isEmpty()) {
HOHBAFU = Byte.parseByte(s);
} else {
HOHBAFU = Byte.MIN_VALUE;
}
}

protected final void initHOHBAME(String s) {
if (!s.trim().isEmpty()) {
HOHBAME = Byte.parseByte(s);
} else {
HOHBAME = Byte.MIN_VALUE;
}
}

protected final void initHOHBAML(String s) {
if (!s.trim().isEmpty()) {
HOHBAML = Short.parseShort(s);
} else {
HOHBAML = Short.MIN_VALUE;
}
}

protected final void initHOHBAMR(String s) {
if (!s.trim().isEmpty()) {
HOHBAMR = Byte.parseByte(s);
} else {
HOHBAMR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAMU(String s) {
if (!s.trim().isEmpty()) {
HOHBAMU = Short.parseShort(s);
} else {
HOHBAMU = Short.MIN_VALUE;
}
}

protected final void initHOHBAOE(String s) {
if (!s.trim().isEmpty()) {
HOHBAOE = Byte.parseByte(s);
} else {
HOHBAOE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAOL(String s) {
if (!s.trim().isEmpty()) {
HOHBAOL = Byte.parseByte(s);
} else {
HOHBAOL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAOR(String s) {
if (!s.trim().isEmpty()) {
HOHBAOR = Byte.parseByte(s);
} else {
HOHBAOR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAOU(String s) {
if (!s.trim().isEmpty()) {
HOHBAOU = Short.parseShort(s);
} else {
HOHBAOU = Short.MIN_VALUE;
}
}

protected final void initHOHBAWE(String s) {
if (!s.trim().isEmpty()) {
HOHBAWE = Byte.parseByte(s);
} else {
HOHBAWE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAWL(String s) {
if (!s.trim().isEmpty()) {
HOHBAWL = Byte.parseByte(s);
} else {
HOHBAWL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAWR(String s) {
if (!s.trim().isEmpty()) {
HOHBAWR = Byte.parseByte(s);
} else {
HOHBAWR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAWU(String s) {
if (!s.trim().isEmpty()) {
HOHBAWU = Byte.parseByte(s);
} else {
HOHBAWU = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYE(String s) {
if (!s.trim().isEmpty()) {
HOHBAYE = Byte.parseByte(s);
} else {
HOHBAYE = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYL(String s) {
if (!s.trim().isEmpty()) {
HOHBAYL = Byte.parseByte(s);
} else {
HOHBAYL = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYR(String s) {
if (!s.trim().isEmpty()) {
HOHBAYR = Byte.parseByte(s);
} else {
HOHBAYR = Byte.MIN_VALUE;
}
}

protected final void initHOHBAYU(String s) {
if (!s.trim().isEmpty()) {
HOHBAYU = Byte.parseByte(s);
} else {
HOHBAYU = Byte.MIN_VALUE;
}
}

protected final void initHOHBCK(String s) {
if (!s.trim().isEmpty()) {
HOHBCK = Byte.parseByte(s);
} else {
HOHBCK = Byte.MIN_VALUE;
}
}

protected final void initHOHBCL(String s) {
if (!s.trim().isEmpty()) {
HOHBCL = Byte.parseByte(s);
} else {
HOHBCL = Byte.MIN_VALUE;
}
}

protected final void initHOHBEN(String s) {
if (!s.trim().isEmpty()) {
HOHBEN = Byte.parseByte(s);
} else {
HOHBEN = Byte.MIN_VALUE;
}
}

protected final void initHOHBGA(String s) {
if (!s.trim().isEmpty()) {
HOHBGA = Byte.parseByte(s);
} else {
HOHBGA = Byte.MIN_VALUE;
}
}

protected final void initHOHBM85(String s) {
if (!s.trim().isEmpty()) {
HOHBM85 = Byte.parseByte(s);
} else {
HOHBM85 = Byte.MIN_VALUE;
}
}

protected final void initHOHBM86(String s) {
if (!s.trim().isEmpty()) {
HOHBM86 = Byte.parseByte(s);
} else {
HOHBM86 = Byte.MIN_VALUE;
}
}

protected final void initHOHBM96(String s) {
if (!s.trim().isEmpty()) {
HOHBM96 = Byte.parseByte(s);
} else {
HOHBM96 = Byte.MIN_VALUE;
}
}

protected final void initHOHBMCL(String s) {
if (!s.trim().isEmpty()) {
HOHBMCL = Byte.parseByte(s);
} else {
HOHBMCL = Byte.MIN_VALUE;
}
}

protected final void initHOHBME(String s) {
if (!s.trim().isEmpty()) {
HOHBME = Byte.parseByte(s);
} else {
HOHBME = Byte.MIN_VALUE;
}
}

protected final void initHOHBMGA(String s) {
if (!s.trim().isEmpty()) {
HOHBMGA = Byte.parseByte(s);
} else {
HOHBMGA = Byte.MIN_VALUE;
}
}

protected final void initHOHBMME(String s) {
if (!s.trim().isEmpty()) {
HOHBMME = Byte.parseByte(s);
} else {
HOHBMME = Byte.MIN_VALUE;
}
}

protected final void initHOHBMSG(String s) {
if (!s.trim().isEmpty()) {
HOHBMSG = Byte.parseByte(s);
} else {
HOHBMSG = Byte.MIN_VALUE;
}
}

protected final void initHOHBMWP(String s) {
if (!s.trim().isEmpty()) {
HOHBMWP = Byte.parseByte(s);
} else {
HOHBMWP = Byte.MIN_VALUE;
}
}

protected final void initHOHBP(String s) {
if (!s.trim().isEmpty()) {
HOHBP = Byte.parseByte(s);
} else {
HOHBP = Byte.MIN_VALUE;
}
}

protected final void initHOHBSG(String s) {
if (!s.trim().isEmpty()) {
HOHBSG = Byte.parseByte(s);
} else {
HOHBSG = Byte.MIN_VALUE;
}
}

protected final void initHOHBWP(String s) {
if (!s.trim().isEmpty()) {
HOHBWP = Byte.parseByte(s);
} else {
HOHBWP = Byte.MIN_VALUE;
}
}

protected final void initHOHEA95(String s) {
if (!s.trim().isEmpty()) {
HOHEA95 = Byte.parseByte(s);
} else {
HOHEA95 = Byte.MIN_VALUE;
}
}

protected final void initHOHEA96(String s) {
if (!s.trim().isEmpty()) {
HOHEA96 = Byte.parseByte(s);
} else {
HOHEA96 = Byte.MIN_VALUE;
}
}

protected final void initHOHEAEF(String s) {
if (!s.trim().isEmpty()) {
HOHEAEF = Byte.parseByte(s);
} else {
HOHEAEF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAGF(String s) {
if (!s.trim().isEmpty()) {
HOHEAGF = Byte.parseByte(s);
} else {
HOHEAGF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAM85(String s) {
if (!s.trim().isEmpty()) {
HOHEAM85 = Byte.parseByte(s);
} else {
HOHEAM85 = Byte.MIN_VALUE;
}
}

protected final void initHOHEAM86(String s) {
if (!s.trim().isEmpty()) {
HOHEAM86 = Byte.parseByte(s);
} else {
HOHEAM86 = Byte.MIN_VALUE;
}
}

protected final void initHOHEAM96(String s) {
if (!s.trim().isEmpty()) {
HOHEAM96 = Byte.parseByte(s);
} else {
HOHEAM96 = Byte.MIN_VALUE;
}
}

protected final void initHOHEAMEF(String s) {
if (!s.trim().isEmpty()) {
HOHEAMEF = Byte.parseByte(s);
} else {
HOHEAMEF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAMGF(String s) {
if (!s.trim().isEmpty()) {
HOHEAMGF = Byte.parseByte(s);
} else {
HOHEAMGF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAMOF(String s) {
if (!s.trim().isEmpty()) {
HOHEAMOF = Byte.parseByte(s);
} else {
HOHEAMOF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAMPH(String s) {
if (!s.trim().isEmpty()) {
HOHEAMPH = Byte.parseByte(s);
} else {
HOHEAMPH = Byte.MIN_VALUE;
}
}

protected final void initHOHEAOF(String s) {
if (!s.trim().isEmpty()) {
HOHEAOF = Byte.parseByte(s);
} else {
HOHEAOF = Byte.MIN_VALUE;
}
}

protected final void initHOHEAPH(String s) {
if (!s.trim().isEmpty()) {
HOHEAPH = Byte.parseByte(s);
} else {
HOHEAPH = Byte.MIN_VALUE;
}
}

protected final void initHOHV01(String s) {
if (!s.trim().isEmpty()) {
HOHV01 = Short.parseShort(s);
} else {
HOHV01 = Short.MIN_VALUE;
}
}

protected final void initHOHV01E(String s) {
if (!s.trim().isEmpty()) {
HOHV01E = Byte.parseByte(s);
} else {
HOHV01E = Byte.MIN_VALUE;
}
}

protected final void initHOHV01L(String s) {
if (!s.trim().isEmpty()) {
HOHV01L = Short.parseShort(s);
} else {
HOHV01L = Short.MIN_VALUE;
}
}

protected final void initHOHV01R(String s) {
if (!s.trim().isEmpty()) {
HOHV01R = Byte.parseByte(s);
} else {
HOHV01R = Byte.MIN_VALUE;
}
}

protected final void initHOHV01U(String s) {
if (!s.trim().isEmpty()) {
HOHV01U = Short.parseShort(s);
} else {
HOHV01U = Short.MIN_VALUE;
}
}

protected final void initHOHV02(String s) {
if (!s.trim().isEmpty()) {
HOHV02 = Short.parseShort(s);
} else {
HOHV02 = Short.MIN_VALUE;
}
}

protected final void initHOHV02E(String s) {
if (!s.trim().isEmpty()) {
HOHV02E = Byte.parseByte(s);
} else {
HOHV02E = Byte.MIN_VALUE;
}
}

protected final void initHOHV02L(String s) {
if (!s.trim().isEmpty()) {
HOHV02L = Short.parseShort(s);
} else {
HOHV02L = Short.MIN_VALUE;
}
}

protected final void initHOHV02R(String s) {
if (!s.trim().isEmpty()) {
HOHV02R = Byte.parseByte(s);
} else {
HOHV02R = Byte.MIN_VALUE;
}
}

protected final void initHOHV02U(String s) {
if (!s.trim().isEmpty()) {
HOHV02U = Short.parseShort(s);
} else {
HOHV02U = Short.MIN_VALUE;
}
}

protected final void initHOHV03(String s) {
if (!s.trim().isEmpty()) {
HOHV03 = Short.parseShort(s);
} else {
HOHV03 = Short.MIN_VALUE;
}
}

protected final void initHOHV03E(String s) {
if (!s.trim().isEmpty()) {
HOHV03E = Byte.parseByte(s);
} else {
HOHV03E = Byte.MIN_VALUE;
}
}

protected final void initHOHV03L(String s) {
if (!s.trim().isEmpty()) {
HOHV03L = Short.parseShort(s);
} else {
HOHV03L = Short.MIN_VALUE;
}
}

protected final void initHOHV03R(String s) {
if (!s.trim().isEmpty()) {
HOHV03R = Byte.parseByte(s);
} else {
HOHV03R = Byte.MIN_VALUE;
}
}

protected final void initHOHV03U(String s) {
if (!s.trim().isEmpty()) {
HOHV03U = Short.parseShort(s);
} else {
HOHV03U = Short.MIN_VALUE;
}
}

protected final void initHOHV04(String s) {
if (!s.trim().isEmpty()) {
HOHV04 = Short.parseShort(s);
} else {
HOHV04 = Short.MIN_VALUE;
}
}

protected final void initHOHV04E(String s) {
if (!s.trim().isEmpty()) {
HOHV04E = Byte.parseByte(s);
} else {
HOHV04E = Byte.MIN_VALUE;
}
}

protected final void initHOHV04L(String s) {
if (!s.trim().isEmpty()) {
HOHV04L = Short.parseShort(s);
} else {
HOHV04L = Short.MIN_VALUE;
}
}

protected final void initHOHV04R(String s) {
if (!s.trim().isEmpty()) {
HOHV04R = Byte.parseByte(s);
} else {
HOHV04R = Byte.MIN_VALUE;
}
}

protected final void initHOHV04U(String s) {
if (!s.trim().isEmpty()) {
HOHV04U = Short.parseShort(s);
} else {
HOHV04U = Short.MIN_VALUE;
}
}

protected final void initHOHV05(String s) {
if (!s.trim().isEmpty()) {
HOHV05 = Short.parseShort(s);
} else {
HOHV05 = Short.MIN_VALUE;
}
}

protected final void initHOHV05E(String s) {
if (!s.trim().isEmpty()) {
HOHV05E = Byte.parseByte(s);
} else {
HOHV05E = Byte.MIN_VALUE;
}
}

protected final void initHOHV05L(String s) {
if (!s.trim().isEmpty()) {
HOHV05L = Short.parseShort(s);
} else {
HOHV05L = Short.MIN_VALUE;
}
}

protected final void initHOHV05R(String s) {
if (!s.trim().isEmpty()) {
HOHV05R = Byte.parseByte(s);
} else {
HOHV05R = Byte.MIN_VALUE;
}
}

protected final void initHOHV05U(String s) {
if (!s.trim().isEmpty()) {
HOHV05U = Short.parseShort(s);
} else {
HOHV05U = Short.MIN_VALUE;
}
}

protected final void initHOHV06(String s) {
if (!s.trim().isEmpty()) {
HOHV06 = Short.parseShort(s);
} else {
HOHV06 = Short.MIN_VALUE;
}
}

protected final void initHOHV06E(String s) {
if (!s.trim().isEmpty()) {
HOHV06E = Byte.parseByte(s);
} else {
HOHV06E = Byte.MIN_VALUE;
}
}

protected final void initHOHV06L(String s) {
if (!s.trim().isEmpty()) {
HOHV06L = Short.parseShort(s);
} else {
HOHV06L = Short.MIN_VALUE;
}
}

protected final void initHOHV06R(String s) {
if (!s.trim().isEmpty()) {
HOHV06R = Byte.parseByte(s);
} else {
HOHV06R = Byte.MIN_VALUE;
}
}

protected final void initHOHV06U(String s) {
if (!s.trim().isEmpty()) {
HOHV06U = Short.parseShort(s);
} else {
HOHV06U = Short.MIN_VALUE;
}
}

protected final void initHOHV07(String s) {
if (!s.trim().isEmpty()) {
HOHV07 = Short.parseShort(s);
} else {
HOHV07 = Short.MIN_VALUE;
}
}

protected final void initHOHV07E(String s) {
if (!s.trim().isEmpty()) {
HOHV07E = Byte.parseByte(s);
} else {
HOHV07E = Byte.MIN_VALUE;
}
}

protected final void initHOHV07L(String s) {
if (!s.trim().isEmpty()) {
HOHV07L = Short.parseShort(s);
} else {
HOHV07L = Short.MIN_VALUE;
}
}

protected final void initHOHV07R(String s) {
if (!s.trim().isEmpty()) {
HOHV07R = Byte.parseByte(s);
} else {
HOHV07R = Byte.MIN_VALUE;
}
}

protected final void initHOHV07U(String s) {
if (!s.trim().isEmpty()) {
HOHV07U = Short.parseShort(s);
} else {
HOHV07U = Short.MIN_VALUE;
}
}

protected final void initHOHV08(String s) {
if (!s.trim().isEmpty()) {
HOHV08 = Short.parseShort(s);
} else {
HOHV08 = Short.MIN_VALUE;
}
}

protected final void initHOHV08E(String s) {
if (!s.trim().isEmpty()) {
HOHV08E = Byte.parseByte(s);
} else {
HOHV08E = Byte.MIN_VALUE;
}
}

protected final void initHOHV08L(String s) {
if (!s.trim().isEmpty()) {
HOHV08L = Short.parseShort(s);
} else {
HOHV08L = Short.MIN_VALUE;
}
}

protected final void initHOHV08R(String s) {
if (!s.trim().isEmpty()) {
HOHV08R = Byte.parseByte(s);
} else {
HOHV08R = Byte.MIN_VALUE;
}
}

protected final void initHOHV08U(String s) {
if (!s.trim().isEmpty()) {
HOHV08U = Short.parseShort(s);
} else {
HOHV08U = Short.MIN_VALUE;
}
}

protected final void initHOHV09(String s) {
if (!s.trim().isEmpty()) {
HOHV09 = Short.parseShort(s);
} else {
HOHV09 = Short.MIN_VALUE;
}
}

protected final void initHOHV09E(String s) {
if (!s.trim().isEmpty()) {
HOHV09E = Byte.parseByte(s);
} else {
HOHV09E = Byte.MIN_VALUE;
}
}

protected final void initHOHV09L(String s) {
if (!s.trim().isEmpty()) {
HOHV09L = Short.parseShort(s);
} else {
HOHV09L = Short.MIN_VALUE;
}
}

protected final void initHOHV09R(String s) {
if (!s.trim().isEmpty()) {
HOHV09R = Byte.parseByte(s);
} else {
HOHV09R = Byte.MIN_VALUE;
}
}

protected final void initHOHV09U(String s) {
if (!s.trim().isEmpty()) {
HOHV09U = Short.parseShort(s);
} else {
HOHV09U = Short.MIN_VALUE;
}
}

protected final void initHOHV12(String s) {
if (!s.trim().isEmpty()) {
HOHV12 = Short.parseShort(s);
} else {
HOHV12 = Short.MIN_VALUE;
}
}

protected final void initHOHV12E(String s) {
if (!s.trim().isEmpty()) {
HOHV12E = Byte.parseByte(s);
} else {
HOHV12E = Byte.MIN_VALUE;
}
}

protected final void initHOHV12L(String s) {
if (!s.trim().isEmpty()) {
HOHV12L = Short.parseShort(s);
} else {
HOHV12L = Short.MIN_VALUE;
}
}

protected final void initHOHV12R(String s) {
if (!s.trim().isEmpty()) {
HOHV12R = Byte.parseByte(s);
} else {
HOHV12R = Byte.MIN_VALUE;
}
}

protected final void initHOHV12U(String s) {
if (!s.trim().isEmpty()) {
HOHV12U = Short.parseShort(s);
} else {
HOHV12U = Short.MIN_VALUE;
}
}

protected final void initHOHV13(String s) {
if (!s.trim().isEmpty()) {
HOHV13 = Short.parseShort(s);
} else {
HOHV13 = Short.MIN_VALUE;
}
}

protected final void initHOHV13E(String s) {
if (!s.trim().isEmpty()) {
HOHV13E = Byte.parseByte(s);
} else {
HOHV13E = Byte.MIN_VALUE;
}
}

protected final void initHOHV13L(String s) {
if (!s.trim().isEmpty()) {
HOHV13L = Short.parseShort(s);
} else {
HOHV13L = Short.MIN_VALUE;
}
}

protected final void initHOHV13R(String s) {
if (!s.trim().isEmpty()) {
HOHV13R = Byte.parseByte(s);
} else {
HOHV13R = Byte.MIN_VALUE;
}
}

protected final void initHOHV13U(String s) {
if (!s.trim().isEmpty()) {
HOHV13U = Short.parseShort(s);
} else {
HOHV13U = Short.MIN_VALUE;
}
}

protected final void initHOINA95(String s) {
if (!s.trim().isEmpty()) {
HOINA95 = Byte.parseByte(s);
} else {
HOINA95 = Byte.MIN_VALUE;
}
}

protected final void initHOINA96(String s) {
if (!s.trim().isEmpty()) {
HOINA96 = Byte.parseByte(s);
} else {
HOINA96 = Byte.MIN_VALUE;
}
}

protected final void initHOINACL(String s) {
if (!s.trim().isEmpty()) {
HOINACL = Byte.parseByte(s);
} else {
HOINACL = Byte.MIN_VALUE;
}
}

protected final void initHOINAGD(String s) {
if (!s.trim().isEmpty()) {
HOINAGD = Byte.parseByte(s);
} else {
HOINAGD = Byte.MIN_VALUE;
}
}

protected final void initHOINAM85(String s) {
if (!s.trim().isEmpty()) {
HOINAM85 = Byte.parseByte(s);
} else {
HOINAM85 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM86(String s) {
if (!s.trim().isEmpty()) {
HOINAM86 = Byte.parseByte(s);
} else {
HOINAM86 = Byte.MIN_VALUE;
}
}

protected final void initHOINAM96(String s) {
if (!s.trim().isEmpty()) {
HOINAM96 = Byte.parseByte(s);
} else {
HOINAM96 = Byte.MIN_VALUE;
}
}

protected final void initHOINAMCL(String s) {
if (!s.trim().isEmpty()) {
HOINAMCL = Byte.parseByte(s);
} else {
HOINAMCL = Byte.MIN_VALUE;
}
}

protected final void initHOINAME(String s) {
if (!s.trim().isEmpty()) {
HOINAME = Byte.parseByte(s);
} else {
HOINAME = Byte.MIN_VALUE;
}
}

protected final void initHOINAMGD(String s) {
if (!s.trim().isEmpty()) {
HOINAMGD = Byte.parseByte(s);
} else {
HOINAMGD = Byte.MIN_VALUE;
}
}

protected final void initHOINAMME(String s) {
if (!s.trim().isEmpty()) {
HOINAMME = Byte.parseByte(s);
} else {
HOINAMME = Byte.MIN_VALUE;
}
}

protected final void initHOINAMSG(String s) {
if (!s.trim().isEmpty()) {
HOINAMSG = Byte.parseByte(s);
} else {
HOINAMSG = Byte.MIN_VALUE;
}
}

protected final void initHOINAMWP(String s) {
if (!s.trim().isEmpty()) {
HOINAMWP = Byte.parseByte(s);
} else {
HOINAMWP = Byte.MIN_VALUE;
}
}

protected final void initHOINASG(String s) {
if (!s.trim().isEmpty()) {
HOINASG = Byte.parseByte(s);
} else {
HOINASG = Byte.MIN_VALUE;
}
}

protected final void initHOINAWP(String s) {
if (!s.trim().isEmpty()) {
HOINAWP = Byte.parseByte(s);
} else {
HOINAWP = Byte.MIN_VALUE;
}
}

protected final void initHOINC95(String s) {
if (!s.trim().isEmpty()) {
HOINC95 = Byte.parseByte(s);
} else {
HOINC95 = Byte.MIN_VALUE;
}
}

protected final void initHOINC96(String s) {
if (!s.trim().isEmpty()) {
HOINC96 = Byte.parseByte(s);
} else {
HOINC96 = Byte.MIN_VALUE;
}
}

protected final void initHOINCBI(String s) {
if (!s.trim().isEmpty()) {
HOINCBI = Byte.parseByte(s);
} else {
HOINCBI = Byte.MIN_VALUE;
}
}

protected final void initHOINCL96(String s) {
if (!s.trim().isEmpty()) {
HOINCL96 = Byte.parseByte(s);
} else {
HOINCL96 = Byte.MIN_VALUE;
}
}

protected final void initHOINCLCO(String s) {
if (!s.trim().isEmpty()) {
HOINCLCO = Byte.parseByte(s);
} else {
HOINCLCO = Byte.MIN_VALUE;
}
}

protected final void initHOINCLGA(String s) {
if (!s.trim().isEmpty()) {
HOINCLGA = Byte.parseByte(s);
} else {
HOINCLGA = Byte.MIN_VALUE;
}
}

protected final void initHOINCLHE(String s) {
if (!s.trim().isEmpty()) {
HOINCLHE = Byte.parseByte(s);
} else {
HOINCLHE = Byte.MIN_VALUE;
}
}

protected final void initHOINCLLA(String s) {
if (!s.trim().isEmpty()) {
HOINCLLA = Byte.parseByte(s);
} else {
HOINCLLA = Byte.MIN_VALUE;
}
}

protected final void initHOINCLSE(String s) {
if (!s.trim().isEmpty()) {
HOINCLSE = Byte.parseByte(s);
} else {
HOINCLSE = Byte.MIN_VALUE;
}
}

protected final void initHOINCLWA(String s) {
if (!s.trim().isEmpty()) {
HOINCLWA = Byte.parseByte(s);
} else {
HOINCLWA = Byte.MIN_VALUE;
}
}

protected final void initHOINCM85(String s) {
if (!s.trim().isEmpty()) {
HOINCM85 = Byte.parseByte(s);
} else {
HOINCM85 = Byte.MIN_VALUE;
}
}

protected final void initHOINCM86(String s) {
if (!s.trim().isEmpty()) {
HOINCM86 = Byte.parseByte(s);
} else {
HOINCM86 = Byte.MIN_VALUE;
}
}

protected final void initHOINCM96(String s) {
if (!s.trim().isEmpty()) {
HOINCM96 = Byte.parseByte(s);
} else {
HOINCM96 = Byte.MIN_VALUE;
}
}

protected final void initHOINCMBI(String s) {
if (!s.trim().isEmpty()) {
HOINCMBI = Byte.parseByte(s);
} else {
HOINCMBI = Byte.MIN_VALUE;
}
}

protected final void initHOINCMPI(String s) {
if (!s.trim().isEmpty()) {
HOINCMPI = Byte.parseByte(s);
} else {
HOINCMPI = Byte.MIN_VALUE;
}
}

protected final void initHOINCMPP(String s) {
if (!s.trim().isEmpty()) {
HOINCMPP = Byte.parseByte(s);
} else {
HOINCMPP = Byte.MIN_VALUE;
}
}

protected final void initHOINCPI(String s) {
if (!s.trim().isEmpty()) {
HOINCPI = Byte.parseByte(s);
} else {
HOINCPI = Byte.MIN_VALUE;
}
}

protected final void initHOINCPP(String s) {
if (!s.trim().isEmpty()) {
HOINCPP = Byte.parseByte(s);
} else {
HOINCPP = Byte.MIN_VALUE;
}
}

protected final void initHOLEIS(String s) {
if (!s.trim().isEmpty()) {
HOLEIS = Short.parseShort(s);
} else {
HOLEIS = Short.MIN_VALUE;
}
}

protected final void initHOLEISE(String s) {
if (!s.trim().isEmpty()) {
HOLEISE = Byte.parseByte(s);
} else {
HOLEISE = Byte.MIN_VALUE;
}
}

protected final void initHOLEISL(String s) {
if (!s.trim().isEmpty()) {
HOLEISL = Short.parseShort(s);
} else {
HOLEISL = Short.MIN_VALUE;
}
}

protected final void initHOLEISR(String s) {
if (!s.trim().isEmpty()) {
HOLEISR = Byte.parseByte(s);
} else {
HOLEISR = Byte.MIN_VALUE;
}
}

protected final void initHOLEISU(String s) {
if (!s.trim().isEmpty()) {
HOLEISU = Short.parseShort(s);
} else {
HOLEISU = Short.MIN_VALUE;
}
}

protected final void initHOMA(String s) {
if (!s.trim().isEmpty()) {
HOMA = Integer.parseInt(s);
} else {
HOMA = Integer.MIN_VALUE;
}
}

protected final void initHOMADD(String s) {
if (!s.trim().isEmpty()) {
HOMADD = Byte.parseByte(s);
} else {
HOMADD = Byte.MIN_VALUE;
}
}

protected final void initHOMAE(String s) {
if (!s.trim().isEmpty()) {
HOMAE = Byte.parseByte(s);
} else {
HOMAE = Byte.MIN_VALUE;
}
}

protected final void initHOMAL(String s) {
if (!s.trim().isEmpty()) {
HOMAL = Integer.parseInt(s);
} else {
HOMAL = Integer.MIN_VALUE;
}
}

protected final void initHOMAR(String s) {
if (!s.trim().isEmpty()) {
HOMAR = Byte.parseByte(s);
} else {
HOMAR = Byte.MIN_VALUE;
}
}

protected final void initHOMAU(String s) {
if (!s.trim().isEmpty()) {
HOMAU = Short.parseShort(s);
} else {
HOMAU = Short.MIN_VALUE;
}
}

protected final void initHOMFV(String s) {
if (!s.trim().isEmpty()) {
HOMFV = Byte.parseByte(s);
} else {
HOMFV = Byte.MIN_VALUE;
}
}

protected final void initHOMFV2(String s) {
if (!s.trim().isEmpty()) {
HOMFV2 = Byte.parseByte(s);
} else {
HOMFV2 = Byte.MIN_VALUE;
}
}

protected final void initHOMFV3(String s) {
if (!s.trim().isEmpty()) {
HOMFV3 = Byte.parseByte(s);
} else {
HOMFV3 = Byte.MIN_VALUE;
}
}

protected final void initHOMFV4(String s) {
if (!s.trim().isEmpty()) {
HOMFV4 = Byte.parseByte(s);
} else {
HOMFV4 = Byte.MIN_VALUE;
}
}

protected final void initHOMFV5(String s) {
if (!s.trim().isEmpty()) {
HOMFV5 = Byte.parseByte(s);
} else {
HOMFV5 = Byte.MIN_VALUE;
}
}

protected final void initHOMREPE(String s) {
if (!s.trim().isEmpty()) {
HOMREPE = Byte.parseByte(s);
} else {
HOMREPE = Byte.MIN_VALUE;
}
}

protected final void initHOMREPL(String s) {
if (!s.trim().isEmpty()) {
HOMREPL = Short.parseShort(s);
} else {
HOMREPL = Short.MIN_VALUE;
}
}

protected final void initHOMREPR(String s) {
if (!s.trim().isEmpty()) {
HOMREPR = Byte.parseByte(s);
} else {
HOMREPR = Byte.MIN_VALUE;
}
}

protected final void initHOMREPU(String s) {
if (!s.trim().isEmpty()) {
HOMREPU = Short.parseShort(s);
} else {
HOMREPU = Short.MIN_VALUE;
}
}

protected final void initHOMTY(String s) {
if (!s.trim().isEmpty()) {
HOMTY = Byte.parseByte(s);
} else {
HOMTY = Byte.MIN_VALUE;
}
}

protected final void initHOMTY2(String s) {
if (!s.trim().isEmpty()) {
HOMTY2 = Byte.parseByte(s);
} else {
HOMTY2 = Byte.MIN_VALUE;
}
}

protected final void initHOMTY3(String s) {
if (!s.trim().isEmpty()) {
HOMTY3 = Byte.parseByte(s);
} else {
HOMTY3 = Byte.MIN_VALUE;
}
}

protected final void initHOMTY4(String s) {
if (!s.trim().isEmpty()) {
HOMTY4 = Byte.parseByte(s);
} else {
HOMTY4 = Byte.MIN_VALUE;
}
}

protected final void initHOMTY5(String s) {
if (!s.trim().isEmpty()) {
HOMTY5 = Byte.parseByte(s);
} else {
HOMTY5 = Byte.MIN_VALUE;
}
}

protected final void initHOMTYC(String s) {
if (!s.trim().isEmpty()) {
HOMTYC = Byte.parseByte(s);
} else {
HOMTYC = Byte.MIN_VALUE;
}
}

protected final void initHOMU95(String s) {
if (!s.trim().isEmpty()) {
HOMU95 = Byte.parseByte(s);
} else {
HOMU95 = Byte.MIN_VALUE;
}
}

protected final void initHOMUCP(String s) {
if (!s.trim().isEmpty()) {
HOMUCP = Byte.parseByte(s);
} else {
HOMUCP = Byte.MIN_VALUE;
}
}

protected final void initHOMUHE(String s) {
if (!s.trim().isEmpty()) {
HOMUHE = Byte.parseByte(s);
} else {
HOMUHE = Byte.MIN_VALUE;
}
}

protected final void initHOMUHI(String s) {
if (!s.trim().isEmpty()) {
HOMUHI = Byte.parseByte(s);
} else {
HOMUHI = Byte.MIN_VALUE;
}
}

protected final void initHOMUM(String s) {
if (!s.trim().isEmpty()) {
HOMUM = Byte.parseByte(s);
} else {
HOMUM = Byte.MIN_VALUE;
}
}

protected final void initHOMUM85(String s) {
if (!s.trim().isEmpty()) {
HOMUM85 = Byte.parseByte(s);
} else {
HOMUM85 = Byte.MIN_VALUE;
}
}

protected final void initHOMUM86(String s) {
if (!s.trim().isEmpty()) {
HOMUM86 = Byte.parseByte(s);
} else {
HOMUM86 = Byte.MIN_VALUE;
}
}

protected final void initHOMUMCP(String s) {
if (!s.trim().isEmpty()) {
HOMUMCP = Byte.parseByte(s);
} else {
HOMUMCP = Byte.MIN_VALUE;
}
}

protected final void initHOMUMHE(String s) {
if (!s.trim().isEmpty()) {
HOMUMHE = Byte.parseByte(s);
} else {
HOMUMHE = Byte.MIN_VALUE;
}
}

protected final void initHOMUMHI(String s) {
if (!s.trim().isEmpty()) {
HOMUMHI = Byte.parseByte(s);
} else {
HOMUMHI = Byte.MIN_VALUE;
}
}

protected final void initHOMUMOC(String s) {
if (!s.trim().isEmpty()) {
HOMUMOC = Byte.parseByte(s);
} else {
HOMUMOC = Byte.MIN_VALUE;
}
}

protected final void initHOMUOC(String s) {
if (!s.trim().isEmpty()) {
HOMUOC = Byte.parseByte(s);
} else {
HOMUOC = Byte.MIN_VALUE;
}
}

protected final void initHOOUTFE(String s) {
if (!s.trim().isEmpty()) {
HOOUTFE = Byte.parseByte(s);
} else {
HOOUTFE = Byte.MIN_VALUE;
}
}

protected final void initHOOUTFL(String s) {
if (!s.trim().isEmpty()) {
HOOUTFL = Short.parseShort(s);
} else {
HOOUTFL = Short.MIN_VALUE;
}
}

protected final void initHOOUTFR(String s) {
if (!s.trim().isEmpty()) {
HOOUTFR = Byte.parseByte(s);
} else {
HOOUTFR = Byte.MIN_VALUE;
}
}

protected final void initHOOUTFU(String s) {
if (!s.trim().isEmpty()) {
HOOUTFU = Short.parseShort(s);
} else {
HOOUTFU = Short.MIN_VALUE;
}
}

protected final void initHOOUTMC(String s) {
if (!s.trim().isEmpty()) {
HOOUTMC = Byte.parseByte(s);
} else {
HOOUTMC = Byte.MIN_VALUE;
}
}

protected final void initHOPAYE(String s) {
if (!s.trim().isEmpty()) {
HOPAYE = Byte.parseByte(s);
} else {
HOPAYE = Byte.MIN_VALUE;
}
}

protected final void initHOPAYL(String s) {
if (!s.trim().isEmpty()) {
HOPAYL = Integer.parseInt(s);
} else {
HOPAYL = Integer.MIN_VALUE;
}
}

protected final void initHOPAYR(String s) {
if (!s.trim().isEmpty()) {
HOPAYR = Byte.parseByte(s);
} else {
HOPAYR = Byte.MIN_VALUE;
}
}

protected final void initHOPAYU(String s) {
if (!s.trim().isEmpty()) {
HOPAYU = Integer.parseInt(s);
} else {
HOPAYU = Integer.MIN_VALUE;
}
}

protected final void initHOPRO95(String s) {
if (!s.trim().isEmpty()) {
HOPRO95 = Byte.parseByte(s);
} else {
HOPRO95 = Byte.MIN_VALUE;
}
}

protected final void initHOPRO96(String s) {
if (!s.trim().isEmpty()) {
HOPRO96 = Byte.parseByte(s);
} else {
HOPRO96 = Byte.MIN_VALUE;
}
}

protected final void initHOPROCO(String s) {
if (!s.trim().isEmpty()) {
HOPROCO = Byte.parseByte(s);
} else {
HOPROCO = Byte.MIN_VALUE;
}
}

protected final void initHOPROCP(String s) {
if (!s.trim().isEmpty()) {
HOPROCP = Byte.parseByte(s);
} else {
HOPROCP = Byte.MIN_VALUE;
}
}

protected final void initHOPRODK(String s) {
if (!s.trim().isEmpty()) {
HOPRODK = Byte.parseByte(s);
} else {
HOPRODK = Byte.MIN_VALUE;
}
}

protected final void initHOPROEP(String s) {
if (!s.trim().isEmpty()) {
HOPROEP = Byte.parseByte(s);
} else {
HOPROEP = Byte.MIN_VALUE;
}
}

protected final void initHOPROIN(String s) {
if (!s.trim().isEmpty()) {
HOPROIN = Byte.parseByte(s);
} else {
HOPROIN = Byte.MIN_VALUE;
}
}

protected final void initHOPROM85(String s) {
if (!s.trim().isEmpty()) {
HOPROM85 = Byte.parseByte(s);
} else {
HOPROM85 = Byte.MIN_VALUE;
}
}

protected final void initHOPROM86(String s) {
if (!s.trim().isEmpty()) {
HOPROM86 = Byte.parseByte(s);
} else {
HOPROM86 = Byte.MIN_VALUE;
}
}

protected final void initHOPROM96(String s) {
if (!s.trim().isEmpty()) {
HOPROM96 = Byte.parseByte(s);
} else {
HOPROM96 = Byte.MIN_VALUE;
}
}

protected final void initHOPROMCO(String s) {
if (!s.trim().isEmpty()) {
HOPROMCO = Byte.parseByte(s);
} else {
HOPROMCO = Byte.MIN_VALUE;
}
}

protected final void initHOPROMCP(String s) {
if (!s.trim().isEmpty()) {
HOPROMCP = Byte.parseByte(s);
} else {
HOPROMCP = Byte.MIN_VALUE;
}
}

protected final void initHOPROMDK(String s) {
if (!s.trim().isEmpty()) {
HOPROMDK = Byte.parseByte(s);
} else {
HOPROMDK = Byte.MIN_VALUE;
}
}

protected final void initHOPROMEP(String s) {
if (!s.trim().isEmpty()) {
HOPROMEP = Byte.parseByte(s);
} else {
HOPROMEP = Byte.MIN_VALUE;
}
}

protected final void initHOPROMIN(String s) {
if (!s.trim().isEmpty()) {
HOPROMIN = Byte.parseByte(s);
} else {
HOPROMIN = Byte.MIN_VALUE;
}
}

protected final void initHOPROMNZ(String s) {
if (!s.trim().isEmpty()) {
HOPROMNZ = Byte.parseByte(s);
} else {
HOPROMNZ = Byte.MIN_VALUE;
}
}

protected final void initHOPROMPO(String s) {
if (!s.trim().isEmpty()) {
HOPROMPO = Byte.parseByte(s);
} else {
HOPROMPO = Byte.MIN_VALUE;
}
}

protected final void initHOPROMRD(String s) {
if (!s.trim().isEmpty()) {
HOPROMRD = Byte.parseByte(s);
} else {
HOPROMRD = Byte.MIN_VALUE;
}
}

protected final void initHOPROMRO(String s) {
if (!s.trim().isEmpty()) {
HOPROMRO = Byte.parseByte(s);
} else {
HOPROMRO = Byte.MIN_VALUE;
}
}

protected final void initHOPROMSN(String s) {
if (!s.trim().isEmpty()) {
HOPROMSN = Byte.parseByte(s);
} else {
HOPROMSN = Byte.MIN_VALUE;
}
}

protected final void initHOPROMSP(String s) {
if (!s.trim().isEmpty()) {
HOPROMSP = Byte.parseByte(s);
} else {
HOPROMSP = Byte.MIN_VALUE;
}
}

protected final void initHOPROMST(String s) {
if (!s.trim().isEmpty()) {
HOPROMST = Byte.parseByte(s);
} else {
HOPROMST = Byte.MIN_VALUE;
}
}

protected final void initHOPROMVA(String s) {
if (!s.trim().isEmpty()) {
HOPROMVA = Byte.parseByte(s);
} else {
HOPROMVA = Byte.MIN_VALUE;
}
}

protected final void initHOPROMWA(String s) {
if (!s.trim().isEmpty()) {
HOPROMWA = Byte.parseByte(s);
} else {
HOPROMWA = Byte.MIN_VALUE;
}
}

protected final void initHOPRONZ(String s) {
if (!s.trim().isEmpty()) {
HOPRONZ = Byte.parseByte(s);
} else {
HOPRONZ = Byte.MIN_VALUE;
}
}

protected final void initHOPROPO(String s) {
if (!s.trim().isEmpty()) {
HOPROPO = Byte.parseByte(s);
} else {
HOPROPO = Byte.MIN_VALUE;
}
}

protected final void initHOPRORD(String s) {
if (!s.trim().isEmpty()) {
HOPRORD = Byte.parseByte(s);
} else {
HOPRORD = Byte.MIN_VALUE;
}
}

protected final void initHOPRORO(String s) {
if (!s.trim().isEmpty()) {
HOPRORO = Byte.parseByte(s);
} else {
HOPRORO = Byte.MIN_VALUE;
}
}

protected final void initHOPROSN(String s) {
if (!s.trim().isEmpty()) {
HOPROSN = Byte.parseByte(s);
} else {
HOPROSN = Byte.MIN_VALUE;
}
}

protected final void initHOPROSP(String s) {
if (!s.trim().isEmpty()) {
HOPROSP = Byte.parseByte(s);
} else {
HOPROSP = Byte.MIN_VALUE;
}
}

protected final void initHOPROWA(String s) {
if (!s.trim().isEmpty()) {
HOPROWA = Byte.parseByte(s);
} else {
HOPROWA = Byte.MIN_VALUE;
}
}

protected final void initHOREBFE(String s) {
if (!s.trim().isEmpty()) {
HOREBFE = Byte.parseByte(s);
} else {
HOREBFE = Byte.MIN_VALUE;
}
}

protected final void initHOREBFL(String s) {
if (!s.trim().isEmpty()) {
HOREBFL = Short.parseShort(s);
} else {
HOREBFL = Short.MIN_VALUE;
}
}

protected final void initHOREBFR(String s) {
if (!s.trim().isEmpty()) {
HOREBFR = Byte.parseByte(s);
} else {
HOREBFR = Byte.MIN_VALUE;
}
}

protected final void initHOREBFU(String s) {
if (!s.trim().isEmpty()) {
HOREBFU = Short.parseShort(s);
} else {
HOREBFU = Short.MIN_VALUE;
}
}

protected final void initHOREBME(String s) {
if (!s.trim().isEmpty()) {
HOREBME = Byte.parseByte(s);
} else {
HOREBME = Byte.MIN_VALUE;
}
}

protected final void initHOREBML(String s) {
if (!s.trim().isEmpty()) {
HOREBML = Short.parseShort(s);
} else {
HOREBML = Short.MIN_VALUE;
}
}

protected final void initHOREBMR(String s) {
if (!s.trim().isEmpty()) {
HOREBMR = Byte.parseByte(s);
} else {
HOREBMR = Byte.MIN_VALUE;
}
}

protected final void initHOREBMU(String s) {
if (!s.trim().isEmpty()) {
HOREBMU = Short.parseShort(s);
} else {
HOREBMU = Short.MIN_VALUE;
}
}

protected final void initHOREBOE(String s) {
if (!s.trim().isEmpty()) {
HOREBOE = Byte.parseByte(s);
} else {
HOREBOE = Byte.MIN_VALUE;
}
}

protected final void initHOREBOL(String s) {
if (!s.trim().isEmpty()) {
HOREBOL = Short.parseShort(s);
} else {
HOREBOL = Short.MIN_VALUE;
}
}

protected final void initHOREBOR(String s) {
if (!s.trim().isEmpty()) {
HOREBOR = Byte.parseByte(s);
} else {
HOREBOR = Byte.MIN_VALUE;
}
}

protected final void initHOREBOU(String s) {
if (!s.trim().isEmpty()) {
HOREBOU = Short.parseShort(s);
} else {
HOREBOU = Short.MIN_VALUE;
}
}

protected final void initHOREBWE(String s) {
if (!s.trim().isEmpty()) {
HOREBWE = Byte.parseByte(s);
} else {
HOREBWE = Byte.MIN_VALUE;
}
}

protected final void initHOREBWL(String s) {
if (!s.trim().isEmpty()) {
HOREBWL = Short.parseShort(s);
} else {
HOREBWL = Short.MIN_VALUE;
}
}

protected final void initHOREBWR(String s) {
if (!s.trim().isEmpty()) {
HOREBWR = Byte.parseByte(s);
} else {
HOREBWR = Byte.MIN_VALUE;
}
}

protected final void initHOREBWU(String s) {
if (!s.trim().isEmpty()) {
HOREBWU = Short.parseShort(s);
} else {
HOREBWU = Short.MIN_VALUE;
}
}

protected final void initHOREBYE(String s) {
if (!s.trim().isEmpty()) {
HOREBYE = Byte.parseByte(s);
} else {
HOREBYE = Byte.MIN_VALUE;
}
}

protected final void initHOREBYL(String s) {
if (!s.trim().isEmpty()) {
HOREBYL = Short.parseShort(s);
} else {
HOREBYL = Short.MIN_VALUE;
}
}

protected final void initHOREBYR(String s) {
if (!s.trim().isEmpty()) {
HOREBYR = Byte.parseByte(s);
} else {
HOREBYR = Byte.MIN_VALUE;
}
}

protected final void initHOREBYU(String s) {
if (!s.trim().isEmpty()) {
HOREBYU = Byte.parseByte(s);
} else {
HOREBYU = Byte.MIN_VALUE;
}
}

protected final void initHORET(String s) {
if (!s.trim().isEmpty()) {
HORET = Byte.parseByte(s);
} else {
HORET = Byte.MIN_VALUE;
}
}

protected final void initHORHB(String s) {
if (!s.trim().isEmpty()) {
HORHB = Byte.parseByte(s);
} else {
HORHB = Byte.MIN_VALUE;
}
}

protected final void initHORMAIN(String s) {
if (!s.trim().isEmpty()) {
HORMAIN = Byte.parseByte(s);
} else {
HORMAIN = Byte.MIN_VALUE;
}
}

protected final void initHORMO(String s) {
if (!s.trim().isEmpty()) {
HORMO = Byte.parseByte(s);
} else {
HORMO = Byte.MIN_VALUE;
}
}

protected final void initHORMO2(String s) {
if (!s.trim().isEmpty()) {
HORMO2 = Byte.parseByte(s);
} else {
HORMO2 = Byte.MIN_VALUE;
}
}

protected final void initHORMO3(String s) {
if (!s.trim().isEmpty()) {
HORMO3 = Byte.parseByte(s);
} else {
HORMO3 = Byte.MIN_VALUE;
}
}

protected final void initHORMO4(String s) {
if (!s.trim().isEmpty()) {
HORMO4 = Byte.parseByte(s);
} else {
HORMO4 = Byte.MIN_VALUE;
}
}

protected final void initHORMO5(String s) {
if (!s.trim().isEmpty()) {
HORMO5 = Byte.parseByte(s);
} else {
HORMO5 = Byte.MIN_VALUE;
}
}

protected final void initHORMO85(String s) {
if (!s.trim().isEmpty()) {
HORMO85 = Byte.parseByte(s);
} else {
HORMO85 = Byte.MIN_VALUE;
}
}

protected final void initHORMO86(String s) {
if (!s.trim().isEmpty()) {
HORMO86 = Byte.parseByte(s);
} else {
HORMO86 = Byte.MIN_VALUE;
}
}

protected final void initHORMO95(String s) {
if (!s.trim().isEmpty()) {
HORMO95 = Byte.parseByte(s);
} else {
HORMO95 = Byte.MIN_VALUE;
}
}

protected final void initHORMOFP(String s) {
if (!s.trim().isEmpty()) {
HORMOFP = Byte.parseByte(s);
} else {
HORMOFP = Byte.MIN_VALUE;
}
}

protected final void initHORMOLA(String s) {
if (!s.trim().isEmpty()) {
HORMOLA = Byte.parseByte(s);
} else {
HORMOLA = Byte.MIN_VALUE;
}
}

protected final void initHORMOM85(String s) {
if (!s.trim().isEmpty()) {
HORMOM85 = Byte.parseByte(s);
} else {
HORMOM85 = Byte.MIN_VALUE;
}
}

protected final void initHORMOM86(String s) {
if (!s.trim().isEmpty()) {
HORMOM86 = Byte.parseByte(s);
} else {
HORMOM86 = Byte.MIN_VALUE;
}
}

protected final void initHORMOMBA(String s) {
if (!s.trim().isEmpty()) {
HORMOMBA = Byte.parseByte(s);
} else {
HORMOMBA = Byte.MIN_VALUE;
}
}

protected final void initHORMOMBQ(String s) {
if (!s.trim().isEmpty()) {
HORMOMBQ = Byte.parseByte(s);
} else {
HORMOMBQ = Byte.MIN_VALUE;
}
}

protected final void initHORMOMFP(String s) {
if (!s.trim().isEmpty()) {
HORMOMFP = Byte.parseByte(s);
} else {
HORMOMFP = Byte.MIN_VALUE;
}
}

protected final void initHORMOMLA(String s) {
if (!s.trim().isEmpty()) {
HORMOMLA = Byte.parseByte(s);
} else {
HORMOMLA = Byte.MIN_VALUE;
}
}

protected final void initHORMOMNS(String s) {
if (!s.trim().isEmpty()) {
HORMOMNS = Byte.parseByte(s);
} else {
HORMOMNS = Byte.MIN_VALUE;
}
}

protected final void initHORMOMSH(String s) {
if (!s.trim().isEmpty()) {
HORMOMSH = Byte.parseByte(s);
} else {
HORMOMSH = Byte.MIN_VALUE;
}
}

protected final void initHORMOMSM(String s) {
if (!s.trim().isEmpty()) {
HORMOMSM = Byte.parseByte(s);
} else {
HORMOMSM = Byte.MIN_VALUE;
}
}

protected final void initHORMOSH(String s) {
if (!s.trim().isEmpty()) {
HORMOSH = Byte.parseByte(s);
} else {
HORMOSH = Byte.MIN_VALUE;
}
}

protected final void initHORMOSM(String s) {
if (!s.trim().isEmpty()) {
HORMOSM = Byte.parseByte(s);
} else {
HORMOSM = Byte.MIN_VALUE;
}
}

protected final void initHORMV95(String s) {
if (!s.trim().isEmpty()) {
HORMV95 = Byte.parseByte(s);
} else {
HORMV95 = Byte.MIN_VALUE;
}
}

protected final void initHORMVBA(String s) {
if (!s.trim().isEmpty()) {
HORMVBA = Byte.parseByte(s);
} else {
HORMVBA = Byte.MIN_VALUE;
}
}

protected final void initHORMVBO(String s) {
if (!s.trim().isEmpty()) {
HORMVBO = Byte.parseByte(s);
} else {
HORMVBO = Byte.MIN_VALUE;
}
}

protected final void initHORMVER(String s) {
if (!s.trim().isEmpty()) {
HORMVER = Byte.parseByte(s);
} else {
HORMVER = Byte.MIN_VALUE;
}
}

protected final void initHORMVHR(String s) {
if (!s.trim().isEmpty()) {
HORMVHR = Byte.parseByte(s);
} else {
HORMVHR = Byte.MIN_VALUE;
}
}

protected final void initHORMVIF(String s) {
if (!s.trim().isEmpty()) {
HORMVIF = Byte.parseByte(s);
} else {
HORMVIF = Byte.MIN_VALUE;
}
}

protected final void initHORMVJR(String s) {
if (!s.trim().isEmpty()) {
HORMVJR = Byte.parseByte(s);
} else {
HORMVJR = Byte.MIN_VALUE;
}
}

protected final void initHORMVMAB(String s) {
if (!s.trim().isEmpty()) {
HORMVMAB = Byte.parseByte(s);
} else {
HORMVMAB = Byte.MIN_VALUE;
}
}

protected final void initHORMVMBA(String s) {
if (!s.trim().isEmpty()) {
HORMVMBA = Byte.parseByte(s);
} else {
HORMVMBA = Byte.MIN_VALUE;
}
}

protected final void initHORMVMBO(String s) {
if (!s.trim().isEmpty()) {
HORMVMBO = Byte.parseByte(s);
} else {
HORMVMBO = Byte.MIN_VALUE;
}
}

protected final void initHORMVMER(String s) {
if (!s.trim().isEmpty()) {
HORMVMER = Byte.parseByte(s);
} else {
HORMVMER = Byte.MIN_VALUE;
}
}

protected final void initHORMVMHR(String s) {
if (!s.trim().isEmpty()) {
HORMVMHR = Byte.parseByte(s);
} else {
HORMVMHR = Byte.MIN_VALUE;
}
}

protected final void initHORMVMIF(String s) {
if (!s.trim().isEmpty()) {
HORMVMIF = Byte.parseByte(s);
} else {
HORMVMIF = Byte.MIN_VALUE;
}
}

protected final void initHORMVMJR(String s) {
if (!s.trim().isEmpty()) {
HORMVMJR = Byte.parseByte(s);
} else {
HORMVMJR = Byte.MIN_VALUE;
}
}

protected final void initHORMVMMS(String s) {
if (!s.trim().isEmpty()) {
HORMVMMS = Byte.parseByte(s);
} else {
HORMVMMS = Byte.MIN_VALUE;
}
}

protected final void initHORMVMNF(String s) {
if (!s.trim().isEmpty()) {
HORMVMNF = Byte.parseByte(s);
} else {
HORMVMNF = Byte.MIN_VALUE;
}
}

protected final void initHORMVMNH(String s) {
if (!s.trim().isEmpty()) {
HORMVMNH = Byte.parseByte(s);
} else {
HORMVMNH = Byte.MIN_VALUE;
}
}

protected final void initHORMVMNJ(String s) {
if (!s.trim().isEmpty()) {
HORMVMNJ = Byte.parseByte(s);
} else {
HORMVMNJ = Byte.MIN_VALUE;
}
}

protected final void initHORMVMOF(String s) {
if (!s.trim().isEmpty()) {
HORMVMOF = Byte.parseByte(s);
} else {
HORMVMOF = Byte.MIN_VALUE;
}
}

protected final void initHORMVMPC(String s) {
if (!s.trim().isEmpty()) {
HORMVMPC = Byte.parseByte(s);
} else {
HORMVMPC = Byte.MIN_VALUE;
}
}

protected final void initHORMVMPN(String s) {
if (!s.trim().isEmpty()) {
HORMVMPN = Byte.parseByte(s);
} else {
HORMVMPN = Byte.MIN_VALUE;
}
}

protected final void initHORMVMS(String s) {
if (!s.trim().isEmpty()) {
HORMVMS = Byte.parseByte(s);
} else {
HORMVMS = Byte.MIN_VALUE;
}
}

protected final void initHORMVMSP(String s) {
if (!s.trim().isEmpty()) {
HORMVMSP = Byte.parseByte(s);
} else {
HORMVMSP = Byte.MIN_VALUE;
}
}

protected final void initHORMVNF(String s) {
if (!s.trim().isEmpty()) {
HORMVNF = Byte.parseByte(s);
} else {
HORMVNF = Byte.MIN_VALUE;
}
}

protected final void initHORMVNJ(String s) {
if (!s.trim().isEmpty()) {
HORMVNJ = Byte.parseByte(s);
} else {
HORMVNJ = Byte.MIN_VALUE;
}
}

protected final void initHORMVOF(String s) {
if (!s.trim().isEmpty()) {
HORMVOF = Byte.parseByte(s);
} else {
HORMVOF = Byte.MIN_VALUE;
}
}

protected final void initHORMVPN(String s) {
if (!s.trim().isEmpty()) {
HORMVPN = Byte.parseByte(s);
} else {
HORMVPN = Byte.MIN_VALUE;
}
}

protected final void initHORMVSP(String s) {
if (!s.trim().isEmpty()) {
HORMVSP = Byte.parseByte(s);
} else {
HORMVSP = Byte.MIN_VALUE;
}
}

protected final void initHOSELL(String s) {
if (!s.trim().isEmpty()) {
HOSELL = Byte.parseByte(s);
} else {
HOSELL = Byte.MIN_VALUE;
}
}

protected final void initHOSELLE(String s) {
if (!s.trim().isEmpty()) {
HOSELLE = Byte.parseByte(s);
} else {
HOSELLE = Byte.MIN_VALUE;
}
}

protected final void initHOSELLL(String s) {
if (!s.trim().isEmpty()) {
HOSELLL = Integer.parseInt(s);
} else {
HOSELLL = Integer.MIN_VALUE;
}
}

protected final void initHOSELLR(String s) {
if (!s.trim().isEmpty()) {
HOSELLR = Byte.parseByte(s);
} else {
HOSELLR = Byte.MIN_VALUE;
}
}

protected final void initHOSELLU(String s) {
if (!s.trim().isEmpty()) {
HOSELLU = Integer.parseInt(s);
} else {
HOSELLU = Integer.MIN_VALUE;
}
}

protected final void initHOSOLD(String s) {
if (!s.trim().isEmpty()) {
HOSOLD = Double.parseDouble(s);
} else {
HOSOLD = Double.NaN;
}
}

protected final void initHOSOLDE(String s) {
if (!s.trim().isEmpty()) {
HOSOLDE = Byte.parseByte(s);
} else {
HOSOLDE = Byte.MIN_VALUE;
}
}

protected final void initHOSOLDL(String s) {
if (!s.trim().isEmpty()) {
HOSOLDL = Integer.parseInt(s);
} else {
HOSOLDL = Integer.MIN_VALUE;
}
}

protected final void initHOSOLDR(String s) {
if (!s.trim().isEmpty()) {
HOSOLDR = Byte.parseByte(s);
} else {
HOSOLDR = Byte.MIN_VALUE;
}
}

protected final void initHOSOLDU(String s) {
if (!s.trim().isEmpty()) {
HOSOLDU = Integer.parseInt(s);
} else {
HOSOLDU = Integer.MIN_VALUE;
}
}

protected final void initHOTENST(String s) {
if (!s.trim().isEmpty()) {
HOTENST = Byte.parseByte(s);
} else {
HOTENST = Byte.MIN_VALUE;
}
}

protected final void initHOTRABCH(String s) {
if (!s.trim().isEmpty()) {
HOTRABCH = Short.parseShort(s);
} else {
HOTRABCH = Short.MIN_VALUE;
}
}

protected final void initHOTRABGC(String s) {
if (!s.trim().isEmpty()) {
HOTRABGC = Integer.parseInt(s);
} else {
HOTRABGC = Integer.MIN_VALUE;
}
}

protected final void initHOTRABNR(String s) {
if (!s.trim().isEmpty()) {
HOTRABNR = Short.parseShort(s);
} else {
HOTRABNR = Short.MIN_VALUE;
}
}

protected final void initHOTRABOC(String s) {
if (!s.trim().isEmpty()) {
HOTRABOC = Integer.parseInt(s);
} else {
HOTRABOC = Integer.MIN_VALUE;
}
}

protected final void initHOTRABOR(String s) {
if (!s.trim().isEmpty()) {
HOTRABOR = Integer.parseInt(s);
} else {
HOTRABOR = Integer.MIN_VALUE;
}
}

protected final void initHOTRAN(String s) {
if (!s.trim().isEmpty()) {
HOTRAN = Integer.parseInt(s);
} else {
HOTRAN = Integer.MIN_VALUE;
}
}

protected final void initHOTRANCH(String s) {
if (!s.trim().isEmpty()) {
HOTRANCH = Byte.parseByte(s);
} else {
HOTRANCH = Byte.MIN_VALUE;
}
}

protected final void initHOTRANE(String s) {
if (!s.trim().isEmpty()) {
HOTRANE = Byte.parseByte(s);
} else {
HOTRANE = Byte.MIN_VALUE;
}
}

protected final void initHOTRANGC(String s) {
if (!s.trim().isEmpty()) {
HOTRANGC = Byte.parseByte(s);
} else {
HOTRANGC = Byte.MIN_VALUE;
}
}

protected final void initHOTRANL(String s) {
if (!s.trim().isEmpty()) {
HOTRANL = Short.parseShort(s);
} else {
HOTRANL = Short.MIN_VALUE;
}
}

protected final void initHOTRANNR(String s) {
if (!s.trim().isEmpty()) {
HOTRANNR = Byte.parseByte(s);
} else {
HOTRANNR = Byte.MIN_VALUE;
}
}

protected final void initHOTRANOC(String s) {
if (!s.trim().isEmpty()) {
HOTRANOC = Byte.parseByte(s);
} else {
HOTRANOC = Byte.MIN_VALUE;
}
}

protected final void initHOTRANOR(String s) {
if (!s.trim().isEmpty()) {
HOTRANOR = Byte.parseByte(s);
} else {
HOTRANOR = Byte.MIN_VALUE;
}
}

protected final void initHOTRANR(String s) {
if (!s.trim().isEmpty()) {
HOTRANR = Byte.parseByte(s);
} else {
HOTRANR = Byte.MIN_VALUE;
}
}

protected final void initHOTRANU(String s) {
if (!s.trim().isEmpty()) {
HOTRANU = Short.parseShort(s);
} else {
HOTRANU = Short.MIN_VALUE;
}
}

protected final void initHOTRAPCH(String s) {
if (!s.trim().isEmpty()) {
HOTRAPCH = Byte.parseByte(s);
} else {
HOTRAPCH = Byte.MIN_VALUE;
}
}

protected final void initHOTRAPGC(String s) {
if (!s.trim().isEmpty()) {
HOTRAPGC = Byte.parseByte(s);
} else {
HOTRAPGC = Byte.MIN_VALUE;
}
}

protected final void initHOTRAPNR(String s) {
if (!s.trim().isEmpty()) {
HOTRAPNR = Byte.parseByte(s);
} else {
HOTRAPNR = Byte.MIN_VALUE;
}
}

protected final void initHOTRAPOC(String s) {
if (!s.trim().isEmpty()) {
HOTRAPOC = Byte.parseByte(s);
} else {
HOTRAPOC = Byte.MIN_VALUE;
}
}

protected final void initHOTRAPOR(String s) {
if (!s.trim().isEmpty()) {
HOTRAPOR = Byte.parseByte(s);
} else {
HOTRAPOR = Byte.MIN_VALUE;
}
}

protected final void initHOTRPA(String s) {
if (!s.trim().isEmpty()) {
HOTRPA = Byte.parseByte(s);
} else {
HOTRPA = Byte.MIN_VALUE;
}
}

protected final void initHOV(String s) {
if (!s.trim().isEmpty()) {
HOV = Byte.parseByte(s);
} else {
HOV = Byte.MIN_VALUE;
}
}

protected final void initHOVAG11(String s) {
if (!s.trim().isEmpty()) {
HOVAG11 = Byte.parseByte(s);
} else {
HOVAG11 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG12(String s) {
if (!s.trim().isEmpty()) {
HOVAG12 = Byte.parseByte(s);
} else {
HOVAG12 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG13(String s) {
if (!s.trim().isEmpty()) {
HOVAG13 = Byte.parseByte(s);
} else {
HOVAG13 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG14(String s) {
if (!s.trim().isEmpty()) {
HOVAG14 = Byte.parseByte(s);
} else {
HOVAG14 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG15(String s) {
if (!s.trim().isEmpty()) {
HOVAG15 = Byte.parseByte(s);
} else {
HOVAG15 = Byte.MIN_VALUE;
}
}

protected final void initHOVAG16(String s) {
if (!s.trim().isEmpty()) {
HOVAG16 = Byte.parseByte(s);
} else {
HOVAG16 = Byte.MIN_VALUE;
}
}

protected final void initHOVE(String s) {
if (!s.trim().isEmpty()) {
HOVE = Integer.parseInt(s);
} else {
HOVE = Integer.MIN_VALUE;
}
}

protected final void initHOVE1E(String s) {
if (!s.trim().isEmpty()) {
HOVE1E = Integer.parseInt(s);
} else {
HOVE1E = Integer.MIN_VALUE;
}
}

protected final void initHOVE1L(String s) {
if (!s.trim().isEmpty()) {
HOVE1L = Integer.parseInt(s);
} else {
HOVE1L = Integer.MIN_VALUE;
}
}

protected final void initHOVE1R(String s) {
if (!s.trim().isEmpty()) {
HOVE1R = Byte.parseByte(s);
} else {
HOVE1R = Byte.MIN_VALUE;
}
}

protected final void initHOVE1U(String s) {
if (!s.trim().isEmpty()) {
HOVE1U = Integer.parseInt(s);
} else {
HOVE1U = Integer.MIN_VALUE;
}
}

protected final void initHOVE2(String s) {
if (!s.trim().isEmpty()) {
HOVE2 = Integer.parseInt(s);
} else {
HOVE2 = Integer.MIN_VALUE;
}
}

protected final void initHOVE2E(String s) {
if (!s.trim().isEmpty()) {
HOVE2E = Short.parseShort(s);
} else {
HOVE2E = Short.MIN_VALUE;
}
}

protected final void initHOVE2L(String s) {
if (!s.trim().isEmpty()) {
HOVE2L = Short.parseShort(s);
} else {
HOVE2L = Short.MIN_VALUE;
}
}

protected final void initHOVE2R(String s) {
if (!s.trim().isEmpty()) {
HOVE2R = Byte.parseByte(s);
} else {
HOVE2R = Byte.MIN_VALUE;
}
}

protected final void initHOVE2U(String s) {
if (!s.trim().isEmpty()) {
HOVE2U = Short.parseShort(s);
} else {
HOVE2U = Short.MIN_VALUE;
}
}

protected final void initHOVE3(String s) {
if (!s.trim().isEmpty()) {
HOVE3 = Integer.parseInt(s);
} else {
HOVE3 = Integer.MIN_VALUE;
}
}

protected final void initHOVE3E(String s) {
if (!s.trim().isEmpty()) {
HOVE3E = Short.parseShort(s);
} else {
HOVE3E = Short.MIN_VALUE;
}
}

protected final void initHOVE3L(String s) {
if (!s.trim().isEmpty()) {
HOVE3L = Integer.parseInt(s);
} else {
HOVE3L = Integer.MIN_VALUE;
}
}

protected final void initHOVE3R(String s) {
if (!s.trim().isEmpty()) {
HOVE3R = Byte.parseByte(s);
} else {
HOVE3R = Byte.MIN_VALUE;
}
}

protected final void initHOVE3U(String s) {
if (!s.trim().isEmpty()) {
HOVE3U = Integer.parseInt(s);
} else {
HOVE3U = Integer.MIN_VALUE;
}
}

protected final void initHOVE4(String s) {
if (!s.trim().isEmpty()) {
HOVE4 = Short.parseShort(s);
} else {
HOVE4 = Short.MIN_VALUE;
}
}

protected final void initHOVE4E(String s) {
if (!s.trim().isEmpty()) {
HOVE4E = Byte.parseByte(s);
} else {
HOVE4E = Byte.MIN_VALUE;
}
}

protected final void initHOVE4L(String s) {
if (!s.trim().isEmpty()) {
HOVE4L = Short.parseShort(s);
} else {
HOVE4L = Short.MIN_VALUE;
}
}

protected final void initHOVE4R(String s) {
if (!s.trim().isEmpty()) {
HOVE4R = Byte.parseByte(s);
} else {
HOVE4R = Byte.MIN_VALUE;
}
}

protected final void initHOVE4U(String s) {
if (!s.trim().isEmpty()) {
HOVE4U = Short.parseShort(s);
} else {
HOVE4U = Short.MIN_VALUE;
}
}

protected final void initHOVE5(String s) {
if (!s.trim().isEmpty()) {
HOVE5 = Short.parseShort(s);
} else {
HOVE5 = Short.MIN_VALUE;
}
}

protected final void initHOVE5E(String s) {
if (!s.trim().isEmpty()) {
HOVE5E = Byte.parseByte(s);
} else {
HOVE5E = Byte.MIN_VALUE;
}
}

protected final void initHOVE5L(String s) {
if (!s.trim().isEmpty()) {
HOVE5L = Integer.parseInt(s);
} else {
HOVE5L = Integer.MIN_VALUE;
}
}

protected final void initHOVE5R(String s) {
if (!s.trim().isEmpty()) {
HOVE5R = Byte.parseByte(s);
} else {
HOVE5R = Byte.MIN_VALUE;
}
}

protected final void initHOVE5U(String s) {
if (!s.trim().isEmpty()) {
HOVE5U = Integer.parseInt(s);
} else {
HOVE5U = Integer.MIN_VALUE;
}
}

protected final void initHOVEHX(String s) {
if (!s.trim().isEmpty()) {
HOVEHX = Byte.parseByte(s);
} else {
HOVEHX = Byte.MIN_VALUE;
}
}

protected final void initHOVML(String s) {
if (!s.trim().isEmpty()) {
HOVML = Integer.parseInt(s);
} else {
HOVML = Integer.MIN_VALUE;
}
}

protected final void initHOVML2(String s) {
if (!s.trim().isEmpty()) {
HOVML2 = Integer.parseInt(s);
} else {
HOVML2 = Integer.MIN_VALUE;
}
}

protected final void initHOVML2E(String s) {
if (!s.trim().isEmpty()) {
HOVML2E = Integer.parseInt(s);
} else {
HOVML2E = Integer.MIN_VALUE;
}
}

protected final void initHOVML2L(String s) {
if (!s.trim().isEmpty()) {
HOVML2L = Integer.parseInt(s);
} else {
HOVML2L = Integer.MIN_VALUE;
}
}

protected final void initHOVML2R(String s) {
if (!s.trim().isEmpty()) {
HOVML2R = Byte.parseByte(s);
} else {
HOVML2R = Byte.MIN_VALUE;
}
}

protected final void initHOVML2U(String s) {
if (!s.trim().isEmpty()) {
HOVML2U = Integer.parseInt(s);
} else {
HOVML2U = Integer.MIN_VALUE;
}
}

protected final void initHOVML3(String s) {
if (!s.trim().isEmpty()) {
HOVML3 = Integer.parseInt(s);
} else {
HOVML3 = Integer.MIN_VALUE;
}
}

protected final void initHOVML3E(String s) {
if (!s.trim().isEmpty()) {
HOVML3E = Integer.parseInt(s);
} else {
HOVML3E = Integer.MIN_VALUE;
}
}

protected final void initHOVML3L(String s) {
if (!s.trim().isEmpty()) {
HOVML3L = Byte.parseByte(s);
} else {
HOVML3L = Byte.MIN_VALUE;
}
}

protected final void initHOVML3R(String s) {
if (!s.trim().isEmpty()) {
HOVML3R = Byte.parseByte(s);
} else {
HOVML3R = Byte.MIN_VALUE;
}
}

protected final void initHOVML3U(String s) {
if (!s.trim().isEmpty()) {
HOVML3U = Short.parseShort(s);
} else {
HOVML3U = Short.MIN_VALUE;
}
}

protected final void initHOVML4(String s) {
if (!s.trim().isEmpty()) {
HOVML4 = Integer.parseInt(s);
} else {
HOVML4 = Integer.MIN_VALUE;
}
}

protected final void initHOVML4E(String s) {
if (!s.trim().isEmpty()) {
HOVML4E = Integer.parseInt(s);
} else {
HOVML4E = Integer.MIN_VALUE;
}
}

protected final void initHOVML4L(String s) {
if (!s.trim().isEmpty()) {
HOVML4L = Byte.parseByte(s);
} else {
HOVML4L = Byte.MIN_VALUE;
}
}

protected final void initHOVML4R(String s) {
if (!s.trim().isEmpty()) {
HOVML4R = Byte.parseByte(s);
} else {
HOVML4R = Byte.MIN_VALUE;
}
}

protected final void initHOVML4U(String s) {
if (!s.trim().isEmpty()) {
HOVML4U = Byte.parseByte(s);
} else {
HOVML4U = Byte.MIN_VALUE;
}
}

protected final void initHOVML5(String s) {
if (!s.trim().isEmpty()) {
HOVML5 = Integer.parseInt(s);
} else {
HOVML5 = Integer.MIN_VALUE;
}
}

protected final void initHOVML5E(String s) {
if (!s.trim().isEmpty()) {
HOVML5E = Byte.parseByte(s);
} else {
HOVML5E = Byte.MIN_VALUE;
}
}

protected final void initHOVML5L(String s) {
if (!s.trim().isEmpty()) {
HOVML5L = Byte.parseByte(s);
} else {
HOVML5L = Byte.MIN_VALUE;
}
}

protected final void initHOVML5R(String s) {
if (!s.trim().isEmpty()) {
HOVML5R = Byte.parseByte(s);
} else {
HOVML5R = Byte.MIN_VALUE;
}
}

protected final void initHOVML5U(String s) {
if (!s.trim().isEmpty()) {
HOVML5U = Byte.parseByte(s);
} else {
HOVML5U = Byte.MIN_VALUE;
}
}

protected final void initHOVMLE(String s) {
if (!s.trim().isEmpty()) {
HOVMLE = Byte.parseByte(s);
} else {
HOVMLE = Byte.MIN_VALUE;
}
}

protected final void initHOVMLL(String s) {
if (!s.trim().isEmpty()) {
HOVMLL = Integer.parseInt(s);
} else {
HOVMLL = Integer.MIN_VALUE;
}
}

protected final void initHOVMLR(String s) {
if (!s.trim().isEmpty()) {
HOVMLR = Byte.parseByte(s);
} else {
HOVMLR = Byte.MIN_VALUE;
}
}

protected final void initHOVMLU(String s) {
if (!s.trim().isEmpty()) {
HOVMLU = Integer.parseInt(s);
} else {
HOVMLU = Integer.MIN_VALUE;
}
}

protected final void initHOVN(String s) {
if (!s.trim().isEmpty()) {
HOVN = Byte.parseByte(s);
} else {
HOVN = Byte.MIN_VALUE;
}
}

protected final void initHOVNW(String s) {
if (!s.trim().isEmpty()) {
HOVNW = Byte.parseByte(s);
} else {
HOVNW = Byte.MIN_VALUE;
}
}

protected final void initHOVNW10(String s) {
if (!s.trim().isEmpty()) {
HOVNW10 = Byte.parseByte(s);
} else {
HOVNW10 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW11(String s) {
if (!s.trim().isEmpty()) {
HOVNW11 = Byte.parseByte(s);
} else {
HOVNW11 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW12(String s) {
if (!s.trim().isEmpty()) {
HOVNW12 = Byte.parseByte(s);
} else {
HOVNW12 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW13(String s) {
if (!s.trim().isEmpty()) {
HOVNW13 = Byte.parseByte(s);
} else {
HOVNW13 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW14(String s) {
if (!s.trim().isEmpty()) {
HOVNW14 = Byte.parseByte(s);
} else {
HOVNW14 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW15(String s) {
if (!s.trim().isEmpty()) {
HOVNW15 = Byte.parseByte(s);
} else {
HOVNW15 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW16(String s) {
if (!s.trim().isEmpty()) {
HOVNW16 = Byte.parseByte(s);
} else {
HOVNW16 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW2(String s) {
if (!s.trim().isEmpty()) {
HOVNW2 = Byte.parseByte(s);
} else {
HOVNW2 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW3(String s) {
if (!s.trim().isEmpty()) {
HOVNW3 = Byte.parseByte(s);
} else {
HOVNW3 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW4(String s) {
if (!s.trim().isEmpty()) {
HOVNW4 = Byte.parseByte(s);
} else {
HOVNW4 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW5(String s) {
if (!s.trim().isEmpty()) {
HOVNW5 = Byte.parseByte(s);
} else {
HOVNW5 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW6(String s) {
if (!s.trim().isEmpty()) {
HOVNW6 = Byte.parseByte(s);
} else {
HOVNW6 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW7(String s) {
if (!s.trim().isEmpty()) {
HOVNW7 = Byte.parseByte(s);
} else {
HOVNW7 = Byte.MIN_VALUE;
}
}

protected final void initHOVNW9(String s) {
if (!s.trim().isEmpty()) {
HOVNW9 = Byte.parseByte(s);
} else {
HOVNW9 = Byte.MIN_VALUE;
}
}

protected final void initHOVOW96(String s) {
if (!s.trim().isEmpty()) {
HOVOW96 = Byte.parseByte(s);
} else {
HOVOW96 = Byte.MIN_VALUE;
}
}

protected final void initHOVST(String s) {
if (!s.trim().isEmpty()) {
HOVST = Byte.parseByte(s);
} else {
HOVST = Byte.MIN_VALUE;
}
}

protected final void initHOVST10(String s) {
if (!s.trim().isEmpty()) {
HOVST10 = Byte.parseByte(s);
} else {
HOVST10 = Byte.MIN_VALUE;
}
}

protected final void initHOVST11(String s) {
if (!s.trim().isEmpty()) {
HOVST11 = Byte.parseByte(s);
} else {
HOVST11 = Byte.MIN_VALUE;
}
}

protected final void initHOVST12(String s) {
if (!s.trim().isEmpty()) {
HOVST12 = Byte.parseByte(s);
} else {
HOVST12 = Byte.MIN_VALUE;
}
}

protected final void initHOVST13(String s) {
if (!s.trim().isEmpty()) {
HOVST13 = Byte.parseByte(s);
} else {
HOVST13 = Byte.MIN_VALUE;
}
}

protected final void initHOVST14(String s) {
if (!s.trim().isEmpty()) {
HOVST14 = Byte.parseByte(s);
} else {
HOVST14 = Byte.MIN_VALUE;
}
}

protected final void initHOVST15(String s) {
if (!s.trim().isEmpty()) {
HOVST15 = Byte.parseByte(s);
} else {
HOVST15 = Byte.MIN_VALUE;
}
}

protected final void initHOVST16(String s) {
if (!s.trim().isEmpty()) {
HOVST16 = Byte.parseByte(s);
} else {
HOVST16 = Byte.MIN_VALUE;
}
}

protected final void initHOVST2(String s) {
if (!s.trim().isEmpty()) {
HOVST2 = Byte.parseByte(s);
} else {
HOVST2 = Byte.MIN_VALUE;
}
}

protected final void initHOVST3(String s) {
if (!s.trim().isEmpty()) {
HOVST3 = Byte.parseByte(s);
} else {
HOVST3 = Byte.MIN_VALUE;
}
}

protected final void initHOVST4(String s) {
if (!s.trim().isEmpty()) {
HOVST4 = Byte.parseByte(s);
} else {
HOVST4 = Byte.MIN_VALUE;
}
}

protected final void initHOVST5(String s) {
if (!s.trim().isEmpty()) {
HOVST5 = Byte.parseByte(s);
} else {
HOVST5 = Byte.MIN_VALUE;
}
}

protected final void initHOVST6(String s) {
if (!s.trim().isEmpty()) {
HOVST6 = Byte.parseByte(s);
} else {
HOVST6 = Byte.MIN_VALUE;
}
}

protected final void initHOVST7(String s) {
if (!s.trim().isEmpty()) {
HOVST7 = Byte.parseByte(s);
} else {
HOVST7 = Byte.MIN_VALUE;
}
}

protected final void initHOVST8(String s) {
if (!s.trim().isEmpty()) {
HOVST8 = Byte.parseByte(s);
} else {
HOVST8 = Byte.MIN_VALUE;
}
}

protected final void initHOVST9(String s) {
if (!s.trim().isEmpty()) {
HOVST9 = Byte.parseByte(s);
} else {
HOVST9 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1001(String s) {
if (!s.trim().isEmpty()) {
HOVW1001 = Byte.parseByte(s);
} else {
HOVW1001 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1002(String s) {
if (!s.trim().isEmpty()) {
HOVW1002 = Byte.parseByte(s);
} else {
HOVW1002 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1003(String s) {
if (!s.trim().isEmpty()) {
HOVW1003 = Byte.parseByte(s);
} else {
HOVW1003 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1004(String s) {
if (!s.trim().isEmpty()) {
HOVW1004 = Byte.parseByte(s);
} else {
HOVW1004 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1005(String s) {
if (!s.trim().isEmpty()) {
HOVW1005 = Byte.parseByte(s);
} else {
HOVW1005 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1006(String s) {
if (!s.trim().isEmpty()) {
HOVW1006 = Byte.parseByte(s);
} else {
HOVW1006 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1007(String s) {
if (!s.trim().isEmpty()) {
HOVW1007 = Byte.parseByte(s);
} else {
HOVW1007 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1008(String s) {
if (!s.trim().isEmpty()) {
HOVW1008 = Byte.parseByte(s);
} else {
HOVW1008 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1009(String s) {
if (!s.trim().isEmpty()) {
HOVW1009 = Byte.parseByte(s);
} else {
HOVW1009 = Byte.MIN_VALUE;
}
}

protected final void initHOVW101(String s) {
if (!s.trim().isEmpty()) {
HOVW101 = Byte.parseByte(s);
} else {
HOVW101 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1010(String s) {
if (!s.trim().isEmpty()) {
HOVW1010 = Byte.parseByte(s);
} else {
HOVW1010 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1011(String s) {
if (!s.trim().isEmpty()) {
HOVW1011 = Byte.parseByte(s);
} else {
HOVW1011 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1012(String s) {
if (!s.trim().isEmpty()) {
HOVW1012 = Byte.parseByte(s);
} else {
HOVW1012 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1013(String s) {
if (!s.trim().isEmpty()) {
HOVW1013 = Byte.parseByte(s);
} else {
HOVW1013 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1014(String s) {
if (!s.trim().isEmpty()) {
HOVW1014 = Byte.parseByte(s);
} else {
HOVW1014 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1015(String s) {
if (!s.trim().isEmpty()) {
HOVW1015 = Byte.parseByte(s);
} else {
HOVW1015 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1016(String s) {
if (!s.trim().isEmpty()) {
HOVW1016 = Byte.parseByte(s);
} else {
HOVW1016 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1017(String s) {
if (!s.trim().isEmpty()) {
HOVW1017 = Byte.parseByte(s);
} else {
HOVW1017 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1018(String s) {
if (!s.trim().isEmpty()) {
HOVW1018 = Byte.parseByte(s);
} else {
HOVW1018 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1019(String s) {
if (!s.trim().isEmpty()) {
HOVW1019 = Byte.parseByte(s);
} else {
HOVW1019 = Byte.MIN_VALUE;
}
}

protected final void initHOVW102(String s) {
if (!s.trim().isEmpty()) {
HOVW102 = Byte.parseByte(s);
} else {
HOVW102 = Byte.MIN_VALUE;
}
}

protected final void initHOVW103(String s) {
if (!s.trim().isEmpty()) {
HOVW103 = Byte.parseByte(s);
} else {
HOVW103 = Byte.MIN_VALUE;
}
}

protected final void initHOVW104(String s) {
if (!s.trim().isEmpty()) {
HOVW104 = Byte.parseByte(s);
} else {
HOVW104 = Byte.MIN_VALUE;
}
}

protected final void initHOVW105(String s) {
if (!s.trim().isEmpty()) {
HOVW105 = Byte.parseByte(s);
} else {
HOVW105 = Byte.MIN_VALUE;
}
}

protected final void initHOVW106(String s) {
if (!s.trim().isEmpty()) {
HOVW106 = Byte.parseByte(s);
} else {
HOVW106 = Byte.MIN_VALUE;
}
}

protected final void initHOVW107(String s) {
if (!s.trim().isEmpty()) {
HOVW107 = Byte.parseByte(s);
} else {
HOVW107 = Byte.MIN_VALUE;
}
}

protected final void initHOVW108(String s) {
if (!s.trim().isEmpty()) {
HOVW108 = Byte.parseByte(s);
} else {
HOVW108 = Byte.MIN_VALUE;
}
}

protected final void initHOVW109(String s) {
if (!s.trim().isEmpty()) {
HOVW109 = Byte.parseByte(s);
} else {
HOVW109 = Byte.MIN_VALUE;
}
}

protected final void initHOVW11(String s) {
if (!s.trim().isEmpty()) {
HOVW11 = Byte.parseByte(s);
} else {
HOVW11 = Byte.MIN_VALUE;
}
}

protected final void initHOVW110(String s) {
if (!s.trim().isEmpty()) {
HOVW110 = Byte.parseByte(s);
} else {
HOVW110 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1101(String s) {
if (!s.trim().isEmpty()) {
HOVW1101 = Byte.parseByte(s);
} else {
HOVW1101 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1102(String s) {
if (!s.trim().isEmpty()) {
HOVW1102 = Byte.parseByte(s);
} else {
HOVW1102 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1103(String s) {
if (!s.trim().isEmpty()) {
HOVW1103 = Byte.parseByte(s);
} else {
HOVW1103 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1104(String s) {
if (!s.trim().isEmpty()) {
HOVW1104 = Byte.parseByte(s);
} else {
HOVW1104 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1105(String s) {
if (!s.trim().isEmpty()) {
HOVW1105 = Byte.parseByte(s);
} else {
HOVW1105 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1106(String s) {
if (!s.trim().isEmpty()) {
HOVW1106 = Byte.parseByte(s);
} else {
HOVW1106 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1107(String s) {
if (!s.trim().isEmpty()) {
HOVW1107 = Byte.parseByte(s);
} else {
HOVW1107 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1108(String s) {
if (!s.trim().isEmpty()) {
HOVW1108 = Byte.parseByte(s);
} else {
HOVW1108 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1109(String s) {
if (!s.trim().isEmpty()) {
HOVW1109 = Byte.parseByte(s);
} else {
HOVW1109 = Byte.MIN_VALUE;
}
}

protected final void initHOVW111(String s) {
if (!s.trim().isEmpty()) {
HOVW111 = Byte.parseByte(s);
} else {
HOVW111 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1110(String s) {
if (!s.trim().isEmpty()) {
HOVW1110 = Byte.parseByte(s);
} else {
HOVW1110 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1111(String s) {
if (!s.trim().isEmpty()) {
HOVW1111 = Byte.parseByte(s);
} else {
HOVW1111 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1112(String s) {
if (!s.trim().isEmpty()) {
HOVW1112 = Byte.parseByte(s);
} else {
HOVW1112 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1113(String s) {
if (!s.trim().isEmpty()) {
HOVW1113 = Byte.parseByte(s);
} else {
HOVW1113 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1114(String s) {
if (!s.trim().isEmpty()) {
HOVW1114 = Byte.parseByte(s);
} else {
HOVW1114 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1115(String s) {
if (!s.trim().isEmpty()) {
HOVW1115 = Byte.parseByte(s);
} else {
HOVW1115 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1116(String s) {
if (!s.trim().isEmpty()) {
HOVW1116 = Byte.parseByte(s);
} else {
HOVW1116 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1117(String s) {
if (!s.trim().isEmpty()) {
HOVW1117 = Byte.parseByte(s);
} else {
HOVW1117 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1118(String s) {
if (!s.trim().isEmpty()) {
HOVW1118 = Byte.parseByte(s);
} else {
HOVW1118 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1119(String s) {
if (!s.trim().isEmpty()) {
HOVW1119 = Byte.parseByte(s);
} else {
HOVW1119 = Byte.MIN_VALUE;
}
}

protected final void initHOVW112(String s) {
if (!s.trim().isEmpty()) {
HOVW112 = Byte.parseByte(s);
} else {
HOVW112 = Byte.MIN_VALUE;
}
}

protected final void initHOVW113(String s) {
if (!s.trim().isEmpty()) {
HOVW113 = Byte.parseByte(s);
} else {
HOVW113 = Byte.MIN_VALUE;
}
}

protected final void initHOVW114(String s) {
if (!s.trim().isEmpty()) {
HOVW114 = Byte.parseByte(s);
} else {
HOVW114 = Byte.MIN_VALUE;
}
}

protected final void initHOVW115(String s) {
if (!s.trim().isEmpty()) {
HOVW115 = Byte.parseByte(s);
} else {
HOVW115 = Byte.MIN_VALUE;
}
}

protected final void initHOVW116(String s) {
if (!s.trim().isEmpty()) {
HOVW116 = Byte.parseByte(s);
} else {
HOVW116 = Byte.MIN_VALUE;
}
}

protected final void initHOVW117(String s) {
if (!s.trim().isEmpty()) {
HOVW117 = Byte.parseByte(s);
} else {
HOVW117 = Byte.MIN_VALUE;
}
}

protected final void initHOVW118(String s) {
if (!s.trim().isEmpty()) {
HOVW118 = Byte.parseByte(s);
} else {
HOVW118 = Byte.MIN_VALUE;
}
}

protected final void initHOVW119(String s) {
if (!s.trim().isEmpty()) {
HOVW119 = Byte.parseByte(s);
} else {
HOVW119 = Byte.MIN_VALUE;
}
}

protected final void initHOVW12(String s) {
if (!s.trim().isEmpty()) {
HOVW12 = Byte.parseByte(s);
} else {
HOVW12 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1201(String s) {
if (!s.trim().isEmpty()) {
HOVW1201 = Byte.parseByte(s);
} else {
HOVW1201 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1202(String s) {
if (!s.trim().isEmpty()) {
HOVW1202 = Byte.parseByte(s);
} else {
HOVW1202 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1203(String s) {
if (!s.trim().isEmpty()) {
HOVW1203 = Byte.parseByte(s);
} else {
HOVW1203 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1204(String s) {
if (!s.trim().isEmpty()) {
HOVW1204 = Byte.parseByte(s);
} else {
HOVW1204 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1205(String s) {
if (!s.trim().isEmpty()) {
HOVW1205 = Byte.parseByte(s);
} else {
HOVW1205 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1206(String s) {
if (!s.trim().isEmpty()) {
HOVW1206 = Byte.parseByte(s);
} else {
HOVW1206 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1207(String s) {
if (!s.trim().isEmpty()) {
HOVW1207 = Byte.parseByte(s);
} else {
HOVW1207 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1208(String s) {
if (!s.trim().isEmpty()) {
HOVW1208 = Byte.parseByte(s);
} else {
HOVW1208 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1209(String s) {
if (!s.trim().isEmpty()) {
HOVW1209 = Byte.parseByte(s);
} else {
HOVW1209 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1210(String s) {
if (!s.trim().isEmpty()) {
HOVW1210 = Byte.parseByte(s);
} else {
HOVW1210 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1211(String s) {
if (!s.trim().isEmpty()) {
HOVW1211 = Byte.parseByte(s);
} else {
HOVW1211 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1212(String s) {
if (!s.trim().isEmpty()) {
HOVW1212 = Byte.parseByte(s);
} else {
HOVW1212 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1213(String s) {
if (!s.trim().isEmpty()) {
HOVW1213 = Byte.parseByte(s);
} else {
HOVW1213 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1214(String s) {
if (!s.trim().isEmpty()) {
HOVW1214 = Byte.parseByte(s);
} else {
HOVW1214 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1215(String s) {
if (!s.trim().isEmpty()) {
HOVW1215 = Byte.parseByte(s);
} else {
HOVW1215 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1216(String s) {
if (!s.trim().isEmpty()) {
HOVW1216 = Byte.parseByte(s);
} else {
HOVW1216 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1217(String s) {
if (!s.trim().isEmpty()) {
HOVW1217 = Byte.parseByte(s);
} else {
HOVW1217 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1218(String s) {
if (!s.trim().isEmpty()) {
HOVW1218 = Byte.parseByte(s);
} else {
HOVW1218 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1219(String s) {
if (!s.trim().isEmpty()) {
HOVW1219 = Byte.parseByte(s);
} else {
HOVW1219 = Byte.MIN_VALUE;
}
}

protected final void initHOVW13(String s) {
if (!s.trim().isEmpty()) {
HOVW13 = Byte.parseByte(s);
} else {
HOVW13 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1301(String s) {
if (!s.trim().isEmpty()) {
HOVW1301 = Byte.parseByte(s);
} else {
HOVW1301 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1302(String s) {
if (!s.trim().isEmpty()) {
HOVW1302 = Byte.parseByte(s);
} else {
HOVW1302 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1303(String s) {
if (!s.trim().isEmpty()) {
HOVW1303 = Byte.parseByte(s);
} else {
HOVW1303 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1304(String s) {
if (!s.trim().isEmpty()) {
HOVW1304 = Byte.parseByte(s);
} else {
HOVW1304 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1305(String s) {
if (!s.trim().isEmpty()) {
HOVW1305 = Byte.parseByte(s);
} else {
HOVW1305 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1306(String s) {
if (!s.trim().isEmpty()) {
HOVW1306 = Byte.parseByte(s);
} else {
HOVW1306 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1307(String s) {
if (!s.trim().isEmpty()) {
HOVW1307 = Byte.parseByte(s);
} else {
HOVW1307 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1308(String s) {
if (!s.trim().isEmpty()) {
HOVW1308 = Byte.parseByte(s);
} else {
HOVW1308 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1309(String s) {
if (!s.trim().isEmpty()) {
HOVW1309 = Byte.parseByte(s);
} else {
HOVW1309 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1310(String s) {
if (!s.trim().isEmpty()) {
HOVW1310 = Byte.parseByte(s);
} else {
HOVW1310 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1311(String s) {
if (!s.trim().isEmpty()) {
HOVW1311 = Byte.parseByte(s);
} else {
HOVW1311 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1312(String s) {
if (!s.trim().isEmpty()) {
HOVW1312 = Byte.parseByte(s);
} else {
HOVW1312 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1313(String s) {
if (!s.trim().isEmpty()) {
HOVW1313 = Byte.parseByte(s);
} else {
HOVW1313 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1314(String s) {
if (!s.trim().isEmpty()) {
HOVW1314 = Byte.parseByte(s);
} else {
HOVW1314 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1315(String s) {
if (!s.trim().isEmpty()) {
HOVW1315 = Byte.parseByte(s);
} else {
HOVW1315 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1316(String s) {
if (!s.trim().isEmpty()) {
HOVW1316 = Byte.parseByte(s);
} else {
HOVW1316 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1317(String s) {
if (!s.trim().isEmpty()) {
HOVW1317 = Byte.parseByte(s);
} else {
HOVW1317 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1318(String s) {
if (!s.trim().isEmpty()) {
HOVW1318 = Byte.parseByte(s);
} else {
HOVW1318 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1319(String s) {
if (!s.trim().isEmpty()) {
HOVW1319 = Byte.parseByte(s);
} else {
HOVW1319 = Byte.MIN_VALUE;
}
}

protected final void initHOVW14(String s) {
if (!s.trim().isEmpty()) {
HOVW14 = Byte.parseByte(s);
} else {
HOVW14 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1401(String s) {
if (!s.trim().isEmpty()) {
HOVW1401 = Byte.parseByte(s);
} else {
HOVW1401 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1402(String s) {
if (!s.trim().isEmpty()) {
HOVW1402 = Byte.parseByte(s);
} else {
HOVW1402 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1403(String s) {
if (!s.trim().isEmpty()) {
HOVW1403 = Byte.parseByte(s);
} else {
HOVW1403 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1404(String s) {
if (!s.trim().isEmpty()) {
HOVW1404 = Byte.parseByte(s);
} else {
HOVW1404 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1405(String s) {
if (!s.trim().isEmpty()) {
HOVW1405 = Byte.parseByte(s);
} else {
HOVW1405 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1406(String s) {
if (!s.trim().isEmpty()) {
HOVW1406 = Byte.parseByte(s);
} else {
HOVW1406 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1407(String s) {
if (!s.trim().isEmpty()) {
HOVW1407 = Byte.parseByte(s);
} else {
HOVW1407 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1408(String s) {
if (!s.trim().isEmpty()) {
HOVW1408 = Byte.parseByte(s);
} else {
HOVW1408 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1409(String s) {
if (!s.trim().isEmpty()) {
HOVW1409 = Byte.parseByte(s);
} else {
HOVW1409 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1410(String s) {
if (!s.trim().isEmpty()) {
HOVW1410 = Byte.parseByte(s);
} else {
HOVW1410 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1411(String s) {
if (!s.trim().isEmpty()) {
HOVW1411 = Byte.parseByte(s);
} else {
HOVW1411 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1412(String s) {
if (!s.trim().isEmpty()) {
HOVW1412 = Byte.parseByte(s);
} else {
HOVW1412 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1413(String s) {
if (!s.trim().isEmpty()) {
HOVW1413 = Byte.parseByte(s);
} else {
HOVW1413 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1414(String s) {
if (!s.trim().isEmpty()) {
HOVW1414 = Byte.parseByte(s);
} else {
HOVW1414 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1415(String s) {
if (!s.trim().isEmpty()) {
HOVW1415 = Byte.parseByte(s);
} else {
HOVW1415 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1416(String s) {
if (!s.trim().isEmpty()) {
HOVW1416 = Byte.parseByte(s);
} else {
HOVW1416 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1417(String s) {
if (!s.trim().isEmpty()) {
HOVW1417 = Byte.parseByte(s);
} else {
HOVW1417 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1418(String s) {
if (!s.trim().isEmpty()) {
HOVW1418 = Byte.parseByte(s);
} else {
HOVW1418 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1419(String s) {
if (!s.trim().isEmpty()) {
HOVW1419 = Byte.parseByte(s);
} else {
HOVW1419 = Byte.MIN_VALUE;
}
}

protected final void initHOVW15(String s) {
if (!s.trim().isEmpty()) {
HOVW15 = Byte.parseByte(s);
} else {
HOVW15 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1501(String s) {
if (!s.trim().isEmpty()) {
HOVW1501 = Byte.parseByte(s);
} else {
HOVW1501 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1502(String s) {
if (!s.trim().isEmpty()) {
HOVW1502 = Byte.parseByte(s);
} else {
HOVW1502 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1503(String s) {
if (!s.trim().isEmpty()) {
HOVW1503 = Byte.parseByte(s);
} else {
HOVW1503 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1504(String s) {
if (!s.trim().isEmpty()) {
HOVW1504 = Byte.parseByte(s);
} else {
HOVW1504 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1505(String s) {
if (!s.trim().isEmpty()) {
HOVW1505 = Byte.parseByte(s);
} else {
HOVW1505 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1506(String s) {
if (!s.trim().isEmpty()) {
HOVW1506 = Byte.parseByte(s);
} else {
HOVW1506 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1507(String s) {
if (!s.trim().isEmpty()) {
HOVW1507 = Byte.parseByte(s);
} else {
HOVW1507 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1508(String s) {
if (!s.trim().isEmpty()) {
HOVW1508 = Byte.parseByte(s);
} else {
HOVW1508 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1509(String s) {
if (!s.trim().isEmpty()) {
HOVW1509 = Byte.parseByte(s);
} else {
HOVW1509 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1510(String s) {
if (!s.trim().isEmpty()) {
HOVW1510 = Byte.parseByte(s);
} else {
HOVW1510 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1511(String s) {
if (!s.trim().isEmpty()) {
HOVW1511 = Byte.parseByte(s);
} else {
HOVW1511 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1512(String s) {
if (!s.trim().isEmpty()) {
HOVW1512 = Byte.parseByte(s);
} else {
HOVW1512 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1513(String s) {
if (!s.trim().isEmpty()) {
HOVW1513 = Byte.parseByte(s);
} else {
HOVW1513 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1514(String s) {
if (!s.trim().isEmpty()) {
HOVW1514 = Byte.parseByte(s);
} else {
HOVW1514 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1515(String s) {
if (!s.trim().isEmpty()) {
HOVW1515 = Byte.parseByte(s);
} else {
HOVW1515 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1516(String s) {
if (!s.trim().isEmpty()) {
HOVW1516 = Byte.parseByte(s);
} else {
HOVW1516 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1517(String s) {
if (!s.trim().isEmpty()) {
HOVW1517 = Byte.parseByte(s);
} else {
HOVW1517 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1518(String s) {
if (!s.trim().isEmpty()) {
HOVW1518 = Byte.parseByte(s);
} else {
HOVW1518 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1519(String s) {
if (!s.trim().isEmpty()) {
HOVW1519 = Byte.parseByte(s);
} else {
HOVW1519 = Byte.MIN_VALUE;
}
}

protected final void initHOVW16(String s) {
if (!s.trim().isEmpty()) {
HOVW16 = Byte.parseByte(s);
} else {
HOVW16 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1601(String s) {
if (!s.trim().isEmpty()) {
HOVW1601 = Byte.parseByte(s);
} else {
HOVW1601 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1602(String s) {
if (!s.trim().isEmpty()) {
HOVW1602 = Byte.parseByte(s);
} else {
HOVW1602 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1603(String s) {
if (!s.trim().isEmpty()) {
HOVW1603 = Byte.parseByte(s);
} else {
HOVW1603 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1604(String s) {
if (!s.trim().isEmpty()) {
HOVW1604 = Byte.parseByte(s);
} else {
HOVW1604 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1605(String s) {
if (!s.trim().isEmpty()) {
HOVW1605 = Byte.parseByte(s);
} else {
HOVW1605 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1606(String s) {
if (!s.trim().isEmpty()) {
HOVW1606 = Byte.parseByte(s);
} else {
HOVW1606 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1607(String s) {
if (!s.trim().isEmpty()) {
HOVW1607 = Byte.parseByte(s);
} else {
HOVW1607 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1608(String s) {
if (!s.trim().isEmpty()) {
HOVW1608 = Byte.parseByte(s);
} else {
HOVW1608 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1609(String s) {
if (!s.trim().isEmpty()) {
HOVW1609 = Byte.parseByte(s);
} else {
HOVW1609 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1610(String s) {
if (!s.trim().isEmpty()) {
HOVW1610 = Byte.parseByte(s);
} else {
HOVW1610 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1611(String s) {
if (!s.trim().isEmpty()) {
HOVW1611 = Byte.parseByte(s);
} else {
HOVW1611 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1612(String s) {
if (!s.trim().isEmpty()) {
HOVW1612 = Byte.parseByte(s);
} else {
HOVW1612 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1613(String s) {
if (!s.trim().isEmpty()) {
HOVW1613 = Byte.parseByte(s);
} else {
HOVW1613 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1614(String s) {
if (!s.trim().isEmpty()) {
HOVW1614 = Byte.parseByte(s);
} else {
HOVW1614 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1615(String s) {
if (!s.trim().isEmpty()) {
HOVW1615 = Byte.parseByte(s);
} else {
HOVW1615 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1616(String s) {
if (!s.trim().isEmpty()) {
HOVW1616 = Byte.parseByte(s);
} else {
HOVW1616 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1617(String s) {
if (!s.trim().isEmpty()) {
HOVW1617 = Byte.parseByte(s);
} else {
HOVW1617 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1618(String s) {
if (!s.trim().isEmpty()) {
HOVW1618 = Byte.parseByte(s);
} else {
HOVW1618 = Byte.MIN_VALUE;
}
}

protected final void initHOVW1619(String s) {
if (!s.trim().isEmpty()) {
HOVW1619 = Byte.parseByte(s);
} else {
HOVW1619 = Byte.MIN_VALUE;
}
}

protected final void initHOVW2(String s) {
if (!s.trim().isEmpty()) {
HOVW2 = Byte.parseByte(s);
} else {
HOVW2 = Byte.MIN_VALUE;
}
}

protected final void initHOVW201(String s) {
if (!s.trim().isEmpty()) {
HOVW201 = Byte.parseByte(s);
} else {
HOVW201 = Byte.MIN_VALUE;
}
}

protected final void initHOVW202(String s) {
if (!s.trim().isEmpty()) {
HOVW202 = Byte.parseByte(s);
} else {
HOVW202 = Byte.MIN_VALUE;
}
}

protected final void initHOVW203(String s) {
if (!s.trim().isEmpty()) {
HOVW203 = Byte.parseByte(s);
} else {
HOVW203 = Byte.MIN_VALUE;
}
}

protected final void initHOVW204(String s) {
if (!s.trim().isEmpty()) {
HOVW204 = Byte.parseByte(s);
} else {
HOVW204 = Byte.MIN_VALUE;
}
}

protected final void initHOVW205(String s) {
if (!s.trim().isEmpty()) {
HOVW205 = Byte.parseByte(s);
} else {
HOVW205 = Byte.MIN_VALUE;
}
}

protected final void initHOVW206(String s) {
if (!s.trim().isEmpty()) {
HOVW206 = Byte.parseByte(s);
} else {
HOVW206 = Byte.MIN_VALUE;
}
}

protected final void initHOVW207(String s) {
if (!s.trim().isEmpty()) {
HOVW207 = Byte.parseByte(s);
} else {
HOVW207 = Byte.MIN_VALUE;
}
}

protected final void initHOVW208(String s) {
if (!s.trim().isEmpty()) {
HOVW208 = Byte.parseByte(s);
} else {
HOVW208 = Byte.MIN_VALUE;
}
}

protected final void initHOVW209(String s) {
if (!s.trim().isEmpty()) {
HOVW209 = Byte.parseByte(s);
} else {
HOVW209 = Byte.MIN_VALUE;
}
}

protected final void initHOVW210(String s) {
if (!s.trim().isEmpty()) {
HOVW210 = Byte.parseByte(s);
} else {
HOVW210 = Byte.MIN_VALUE;
}
}

protected final void initHOVW211(String s) {
if (!s.trim().isEmpty()) {
HOVW211 = Byte.parseByte(s);
} else {
HOVW211 = Byte.MIN_VALUE;
}
}

protected final void initHOVW212(String s) {
if (!s.trim().isEmpty()) {
HOVW212 = Byte.parseByte(s);
} else {
HOVW212 = Byte.MIN_VALUE;
}
}

protected final void initHOVW213(String s) {
if (!s.trim().isEmpty()) {
HOVW213 = Byte.parseByte(s);
} else {
HOVW213 = Byte.MIN_VALUE;
}
}

protected final void initHOVW214(String s) {
if (!s.trim().isEmpty()) {
HOVW214 = Byte.parseByte(s);
} else {
HOVW214 = Byte.MIN_VALUE;
}
}

protected final void initHOVW215(String s) {
if (!s.trim().isEmpty()) {
HOVW215 = Byte.parseByte(s);
} else {
HOVW215 = Byte.MIN_VALUE;
}
}

protected final void initHOVW216(String s) {
if (!s.trim().isEmpty()) {
HOVW216 = Byte.parseByte(s);
} else {
HOVW216 = Byte.MIN_VALUE;
}
}

protected final void initHOVW217(String s) {
if (!s.trim().isEmpty()) {
HOVW217 = Byte.parseByte(s);
} else {
HOVW217 = Byte.MIN_VALUE;
}
}

protected final void initHOVW218(String s) {
if (!s.trim().isEmpty()) {
HOVW218 = Byte.parseByte(s);
} else {
HOVW218 = Byte.MIN_VALUE;
}
}

protected final void initHOVW219(String s) {
if (!s.trim().isEmpty()) {
HOVW219 = Byte.parseByte(s);
} else {
HOVW219 = Byte.MIN_VALUE;
}
}

protected final void initHOVW3(String s) {
if (!s.trim().isEmpty()) {
HOVW3 = Byte.parseByte(s);
} else {
HOVW3 = Byte.MIN_VALUE;
}
}

protected final void initHOVW301(String s) {
if (!s.trim().isEmpty()) {
HOVW301 = Byte.parseByte(s);
} else {
HOVW301 = Byte.MIN_VALUE;
}
}

protected final void initHOVW302(String s) {
if (!s.trim().isEmpty()) {
HOVW302 = Byte.parseByte(s);
} else {
HOVW302 = Byte.MIN_VALUE;
}
}

protected final void initHOVW303(String s) {
if (!s.trim().isEmpty()) {
HOVW303 = Byte.parseByte(s);
} else {
HOVW303 = Byte.MIN_VALUE;
}
}

protected final void initHOVW304(String s) {
if (!s.trim().isEmpty()) {
HOVW304 = Byte.parseByte(s);
} else {
HOVW304 = Byte.MIN_VALUE;
}
}

protected final void initHOVW305(String s) {
if (!s.trim().isEmpty()) {
HOVW305 = Byte.parseByte(s);
} else {
HOVW305 = Byte.MIN_VALUE;
}
}

protected final void initHOVW306(String s) {
if (!s.trim().isEmpty()) {
HOVW306 = Byte.parseByte(s);
} else {
HOVW306 = Byte.MIN_VALUE;
}
}

protected final void initHOVW307(String s) {
if (!s.trim().isEmpty()) {
HOVW307 = Byte.parseByte(s);
} else {
HOVW307 = Byte.MIN_VALUE;
}
}

protected final void initHOVW308(String s) {
if (!s.trim().isEmpty()) {
HOVW308 = Byte.parseByte(s);
} else {
HOVW308 = Byte.MIN_VALUE;
}
}

protected final void initHOVW309(String s) {
if (!s.trim().isEmpty()) {
HOVW309 = Byte.parseByte(s);
} else {
HOVW309 = Byte.MIN_VALUE;
}
}

protected final void initHOVW310(String s) {
if (!s.trim().isEmpty()) {
HOVW310 = Byte.parseByte(s);
} else {
HOVW310 = Byte.MIN_VALUE;
}
}

protected final void initHOVW311(String s) {
if (!s.trim().isEmpty()) {
HOVW311 = Byte.parseByte(s);
} else {
HOVW311 = Byte.MIN_VALUE;
}
}

protected final void initHOVW312(String s) {
if (!s.trim().isEmpty()) {
HOVW312 = Byte.parseByte(s);
} else {
HOVW312 = Byte.MIN_VALUE;
}
}

protected final void initHOVW313(String s) {
if (!s.trim().isEmpty()) {
HOVW313 = Byte.parseByte(s);
} else {
HOVW313 = Byte.MIN_VALUE;
}
}

protected final void initHOVW314(String s) {
if (!s.trim().isEmpty()) {
HOVW314 = Byte.parseByte(s);
} else {
HOVW314 = Byte.MIN_VALUE;
}
}

protected final void initHOVW315(String s) {
if (!s.trim().isEmpty()) {
HOVW315 = Byte.parseByte(s);
} else {
HOVW315 = Byte.MIN_VALUE;
}
}

protected final void initHOVW316(String s) {
if (!s.trim().isEmpty()) {
HOVW316 = Byte.parseByte(s);
} else {
HOVW316 = Byte.MIN_VALUE;
}
}

protected final void initHOVW317(String s) {
if (!s.trim().isEmpty()) {
HOVW317 = Byte.parseByte(s);
} else {
HOVW317 = Byte.MIN_VALUE;
}
}

protected final void initHOVW318(String s) {
if (!s.trim().isEmpty()) {
HOVW318 = Byte.parseByte(s);
} else {
HOVW318 = Byte.MIN_VALUE;
}
}

protected final void initHOVW319(String s) {
if (!s.trim().isEmpty()) {
HOVW319 = Byte.parseByte(s);
} else {
HOVW319 = Byte.MIN_VALUE;
}
}

protected final void initHOVW4(String s) {
if (!s.trim().isEmpty()) {
HOVW4 = Byte.parseByte(s);
} else {
HOVW4 = Byte.MIN_VALUE;
}
}

protected final void initHOVW401(String s) {
if (!s.trim().isEmpty()) {
HOVW401 = Byte.parseByte(s);
} else {
HOVW401 = Byte.MIN_VALUE;
}
}

protected final void initHOVW402(String s) {
if (!s.trim().isEmpty()) {
HOVW402 = Byte.parseByte(s);
} else {
HOVW402 = Byte.MIN_VALUE;
}
}

protected final void initHOVW403(String s) {
if (!s.trim().isEmpty()) {
HOVW403 = Byte.parseByte(s);
} else {
HOVW403 = Byte.MIN_VALUE;
}
}

protected final void initHOVW404(String s) {
if (!s.trim().isEmpty()) {
HOVW404 = Byte.parseByte(s);
} else {
HOVW404 = Byte.MIN_VALUE;
}
}

protected final void initHOVW405(String s) {
if (!s.trim().isEmpty()) {
HOVW405 = Byte.parseByte(s);
} else {
HOVW405 = Byte.MIN_VALUE;
}
}

protected final void initHOVW406(String s) {
if (!s.trim().isEmpty()) {
HOVW406 = Byte.parseByte(s);
} else {
HOVW406 = Byte.MIN_VALUE;
}
}

protected final void initHOVW407(String s) {
if (!s.trim().isEmpty()) {
HOVW407 = Byte.parseByte(s);
} else {
HOVW407 = Byte.MIN_VALUE;
}
}

protected final void initHOVW408(String s) {
if (!s.trim().isEmpty()) {
HOVW408 = Byte.parseByte(s);
} else {
HOVW408 = Byte.MIN_VALUE;
}
}

protected final void initHOVW409(String s) {
if (!s.trim().isEmpty()) {
HOVW409 = Byte.parseByte(s);
} else {
HOVW409 = Byte.MIN_VALUE;
}
}

protected final void initHOVW410(String s) {
if (!s.trim().isEmpty()) {
HOVW410 = Byte.parseByte(s);
} else {
HOVW410 = Byte.MIN_VALUE;
}
}

protected final void initHOVW411(String s) {
if (!s.trim().isEmpty()) {
HOVW411 = Byte.parseByte(s);
} else {
HOVW411 = Byte.MIN_VALUE;
}
}

protected final void initHOVW412(String s) {
if (!s.trim().isEmpty()) {
HOVW412 = Byte.parseByte(s);
} else {
HOVW412 = Byte.MIN_VALUE;
}
}

protected final void initHOVW413(String s) {
if (!s.trim().isEmpty()) {
HOVW413 = Byte.parseByte(s);
} else {
HOVW413 = Byte.MIN_VALUE;
}
}

protected final void initHOVW414(String s) {
if (!s.trim().isEmpty()) {
HOVW414 = Byte.parseByte(s);
} else {
HOVW414 = Byte.MIN_VALUE;
}
}

protected final void initHOVW415(String s) {
if (!s.trim().isEmpty()) {
HOVW415 = Byte.parseByte(s);
} else {
HOVW415 = Byte.MIN_VALUE;
}
}

protected final void initHOVW416(String s) {
if (!s.trim().isEmpty()) {
HOVW416 = Byte.parseByte(s);
} else {
HOVW416 = Byte.MIN_VALUE;
}
}

protected final void initHOVW417(String s) {
if (!s.trim().isEmpty()) {
HOVW417 = Byte.parseByte(s);
} else {
HOVW417 = Byte.MIN_VALUE;
}
}

protected final void initHOVW418(String s) {
if (!s.trim().isEmpty()) {
HOVW418 = Byte.parseByte(s);
} else {
HOVW418 = Byte.MIN_VALUE;
}
}

protected final void initHOVW419(String s) {
if (!s.trim().isEmpty()) {
HOVW419 = Byte.parseByte(s);
} else {
HOVW419 = Byte.MIN_VALUE;
}
}

protected final void initHOVW5(String s) {
if (!s.trim().isEmpty()) {
HOVW5 = Byte.parseByte(s);
} else {
HOVW5 = Byte.MIN_VALUE;
}
}

protected final void initHOVW501(String s) {
if (!s.trim().isEmpty()) {
HOVW501 = Byte.parseByte(s);
} else {
HOVW501 = Byte.MIN_VALUE;
}
}

protected final void initHOVW502(String s) {
if (!s.trim().isEmpty()) {
HOVW502 = Byte.parseByte(s);
} else {
HOVW502 = Byte.MIN_VALUE;
}
}

protected final void initHOVW503(String s) {
if (!s.trim().isEmpty()) {
HOVW503 = Byte.parseByte(s);
} else {
HOVW503 = Byte.MIN_VALUE;
}
}

protected final void initHOVW504(String s) {
if (!s.trim().isEmpty()) {
HOVW504 = Byte.parseByte(s);
} else {
HOVW504 = Byte.MIN_VALUE;
}
}

protected final void initHOVW505(String s) {
if (!s.trim().isEmpty()) {
HOVW505 = Byte.parseByte(s);
} else {
HOVW505 = Byte.MIN_VALUE;
}
}

protected final void initHOVW506(String s) {
if (!s.trim().isEmpty()) {
HOVW506 = Byte.parseByte(s);
} else {
HOVW506 = Byte.MIN_VALUE;
}
}

protected final void initHOVW507(String s) {
if (!s.trim().isEmpty()) {
HOVW507 = Byte.parseByte(s);
} else {
HOVW507 = Byte.MIN_VALUE;
}
}

protected final void initHOVW508(String s) {
if (!s.trim().isEmpty()) {
HOVW508 = Byte.parseByte(s);
} else {
HOVW508 = Byte.MIN_VALUE;
}
}

protected final void initHOVW509(String s) {
if (!s.trim().isEmpty()) {
HOVW509 = Byte.parseByte(s);
} else {
HOVW509 = Byte.MIN_VALUE;
}
}

protected final void initHOVW510(String s) {
if (!s.trim().isEmpty()) {
HOVW510 = Byte.parseByte(s);
} else {
HOVW510 = Byte.MIN_VALUE;
}
}

protected final void initHOVW511(String s) {
if (!s.trim().isEmpty()) {
HOVW511 = Byte.parseByte(s);
} else {
HOVW511 = Byte.MIN_VALUE;
}
}

protected final void initHOVW512(String s) {
if (!s.trim().isEmpty()) {
HOVW512 = Byte.parseByte(s);
} else {
HOVW512 = Byte.MIN_VALUE;
}
}

protected final void initHOVW513(String s) {
if (!s.trim().isEmpty()) {
HOVW513 = Byte.parseByte(s);
} else {
HOVW513 = Byte.MIN_VALUE;
}
}

protected final void initHOVW514(String s) {
if (!s.trim().isEmpty()) {
HOVW514 = Byte.parseByte(s);
} else {
HOVW514 = Byte.MIN_VALUE;
}
}

protected final void initHOVW515(String s) {
if (!s.trim().isEmpty()) {
HOVW515 = Byte.parseByte(s);
} else {
HOVW515 = Byte.MIN_VALUE;
}
}

protected final void initHOVW516(String s) {
if (!s.trim().isEmpty()) {
HOVW516 = Byte.parseByte(s);
} else {
HOVW516 = Byte.MIN_VALUE;
}
}

protected final void initHOVW517(String s) {
if (!s.trim().isEmpty()) {
HOVW517 = Byte.parseByte(s);
} else {
HOVW517 = Byte.MIN_VALUE;
}
}

protected final void initHOVW518(String s) {
if (!s.trim().isEmpty()) {
HOVW518 = Byte.parseByte(s);
} else {
HOVW518 = Byte.MIN_VALUE;
}
}

protected final void initHOVW519(String s) {
if (!s.trim().isEmpty()) {
HOVW519 = Byte.parseByte(s);
} else {
HOVW519 = Byte.MIN_VALUE;
}
}

protected final void initHOVW6(String s) {
if (!s.trim().isEmpty()) {
HOVW6 = Byte.parseByte(s);
} else {
HOVW6 = Byte.MIN_VALUE;
}
}

protected final void initHOVW602(String s) {
if (!s.trim().isEmpty()) {
HOVW602 = Byte.parseByte(s);
} else {
HOVW602 = Byte.MIN_VALUE;
}
}

protected final void initHOVW603(String s) {
if (!s.trim().isEmpty()) {
HOVW603 = Byte.parseByte(s);
} else {
HOVW603 = Byte.MIN_VALUE;
}
}

protected final void initHOVW604(String s) {
if (!s.trim().isEmpty()) {
HOVW604 = Byte.parseByte(s);
} else {
HOVW604 = Byte.MIN_VALUE;
}
}

protected final void initHOVW605(String s) {
if (!s.trim().isEmpty()) {
HOVW605 = Byte.parseByte(s);
} else {
HOVW605 = Byte.MIN_VALUE;
}
}

protected final void initHOVW606(String s) {
if (!s.trim().isEmpty()) {
HOVW606 = Byte.parseByte(s);
} else {
HOVW606 = Byte.MIN_VALUE;
}
}

protected final void initHOVW607(String s) {
if (!s.trim().isEmpty()) {
HOVW607 = Byte.parseByte(s);
} else {
HOVW607 = Byte.MIN_VALUE;
}
}

protected final void initHOVW608(String s) {
if (!s.trim().isEmpty()) {
HOVW608 = Byte.parseByte(s);
} else {
HOVW608 = Byte.MIN_VALUE;
}
}

protected final void initHOVW609(String s) {
if (!s.trim().isEmpty()) {
HOVW609 = Byte.parseByte(s);
} else {
HOVW609 = Byte.MIN_VALUE;
}
}

protected final void initHOVW610(String s) {
if (!s.trim().isEmpty()) {
HOVW610 = Byte.parseByte(s);
} else {
HOVW610 = Byte.MIN_VALUE;
}
}

protected final void initHOVW611(String s) {
if (!s.trim().isEmpty()) {
HOVW611 = Byte.parseByte(s);
} else {
HOVW611 = Byte.MIN_VALUE;
}
}

protected final void initHOVW612(String s) {
if (!s.trim().isEmpty()) {
HOVW612 = Byte.parseByte(s);
} else {
HOVW612 = Byte.MIN_VALUE;
}
}

protected final void initHOVW613(String s) {
if (!s.trim().isEmpty()) {
HOVW613 = Byte.parseByte(s);
} else {
HOVW613 = Byte.MIN_VALUE;
}
}

protected final void initHOVW614(String s) {
if (!s.trim().isEmpty()) {
HOVW614 = Byte.parseByte(s);
} else {
HOVW614 = Byte.MIN_VALUE;
}
}

protected final void initHOVW615(String s) {
if (!s.trim().isEmpty()) {
HOVW615 = Byte.parseByte(s);
} else {
HOVW615 = Byte.MIN_VALUE;
}
}

protected final void initHOVW616(String s) {
if (!s.trim().isEmpty()) {
HOVW616 = Byte.parseByte(s);
} else {
HOVW616 = Byte.MIN_VALUE;
}
}

protected final void initHOVW617(String s) {
if (!s.trim().isEmpty()) {
HOVW617 = Byte.parseByte(s);
} else {
HOVW617 = Byte.MIN_VALUE;
}
}

protected final void initHOVW618(String s) {
if (!s.trim().isEmpty()) {
HOVW618 = Byte.parseByte(s);
} else {
HOVW618 = Byte.MIN_VALUE;
}
}

protected final void initHOVW619(String s) {
if (!s.trim().isEmpty()) {
HOVW619 = Byte.parseByte(s);
} else {
HOVW619 = Byte.MIN_VALUE;
}
}

protected final void initHOVW7(String s) {
if (!s.trim().isEmpty()) {
HOVW7 = Byte.parseByte(s);
} else {
HOVW7 = Byte.MIN_VALUE;
}
}

protected final void initHOVW701(String s) {
if (!s.trim().isEmpty()) {
HOVW701 = Byte.parseByte(s);
} else {
HOVW701 = Byte.MIN_VALUE;
}
}

protected final void initHOVW702(String s) {
if (!s.trim().isEmpty()) {
HOVW702 = Byte.parseByte(s);
} else {
HOVW702 = Byte.MIN_VALUE;
}
}

protected final void initHOVW703(String s) {
if (!s.trim().isEmpty()) {
HOVW703 = Byte.parseByte(s);
} else {
HOVW703 = Byte.MIN_VALUE;
}
}

protected final void initHOVW704(String s) {
if (!s.trim().isEmpty()) {
HOVW704 = Byte.parseByte(s);
} else {
HOVW704 = Byte.MIN_VALUE;
}
}

protected final void initHOVW705(String s) {
if (!s.trim().isEmpty()) {
HOVW705 = Byte.parseByte(s);
} else {
HOVW705 = Byte.MIN_VALUE;
}
}

protected final void initHOVW706(String s) {
if (!s.trim().isEmpty()) {
HOVW706 = Byte.parseByte(s);
} else {
HOVW706 = Byte.MIN_VALUE;
}
}

protected final void initHOVW707(String s) {
if (!s.trim().isEmpty()) {
HOVW707 = Byte.parseByte(s);
} else {
HOVW707 = Byte.MIN_VALUE;
}
}

protected final void initHOVW708(String s) {
if (!s.trim().isEmpty()) {
HOVW708 = Byte.parseByte(s);
} else {
HOVW708 = Byte.MIN_VALUE;
}
}

protected final void initHOVW709(String s) {
if (!s.trim().isEmpty()) {
HOVW709 = Byte.parseByte(s);
} else {
HOVW709 = Byte.MIN_VALUE;
}
}

protected final void initHOVW710(String s) {
if (!s.trim().isEmpty()) {
HOVW710 = Byte.parseByte(s);
} else {
HOVW710 = Byte.MIN_VALUE;
}
}

protected final void initHOVW711(String s) {
if (!s.trim().isEmpty()) {
HOVW711 = Byte.parseByte(s);
} else {
HOVW711 = Byte.MIN_VALUE;
}
}

protected final void initHOVW712(String s) {
if (!s.trim().isEmpty()) {
HOVW712 = Byte.parseByte(s);
} else {
HOVW712 = Byte.MIN_VALUE;
}
}

protected final void initHOVW713(String s) {
if (!s.trim().isEmpty()) {
HOVW713 = Byte.parseByte(s);
} else {
HOVW713 = Byte.MIN_VALUE;
}
}

protected final void initHOVW714(String s) {
if (!s.trim().isEmpty()) {
HOVW714 = Byte.parseByte(s);
} else {
HOVW714 = Byte.MIN_VALUE;
}
}

protected final void initHOVW715(String s) {
if (!s.trim().isEmpty()) {
HOVW715 = Byte.parseByte(s);
} else {
HOVW715 = Byte.MIN_VALUE;
}
}

protected final void initHOVW716(String s) {
if (!s.trim().isEmpty()) {
HOVW716 = Byte.parseByte(s);
} else {
HOVW716 = Byte.MIN_VALUE;
}
}

protected final void initHOVW717(String s) {
if (!s.trim().isEmpty()) {
HOVW717 = Byte.parseByte(s);
} else {
HOVW717 = Byte.MIN_VALUE;
}
}

protected final void initHOVW718(String s) {
if (!s.trim().isEmpty()) {
HOVW718 = Byte.parseByte(s);
} else {
HOVW718 = Byte.MIN_VALUE;
}
}

protected final void initHOVW719(String s) {
if (!s.trim().isEmpty()) {
HOVW719 = Byte.parseByte(s);
} else {
HOVW719 = Byte.MIN_VALUE;
}
}

protected final void initHOVW801(String s) {
if (!s.trim().isEmpty()) {
HOVW801 = Byte.parseByte(s);
} else {
HOVW801 = Byte.MIN_VALUE;
}
}

protected final void initHOVW802(String s) {
if (!s.trim().isEmpty()) {
HOVW802 = Byte.parseByte(s);
} else {
HOVW802 = Byte.MIN_VALUE;
}
}

protected final void initHOVW803(String s) {
if (!s.trim().isEmpty()) {
HOVW803 = Byte.parseByte(s);
} else {
HOVW803 = Byte.MIN_VALUE;
}
}

protected final void initHOVW804(String s) {
if (!s.trim().isEmpty()) {
HOVW804 = Byte.parseByte(s);
} else {
HOVW804 = Byte.MIN_VALUE;
}
}

protected final void initHOVW805(String s) {
if (!s.trim().isEmpty()) {
HOVW805 = Byte.parseByte(s);
} else {
HOVW805 = Byte.MIN_VALUE;
}
}

protected final void initHOVW806(String s) {
if (!s.trim().isEmpty()) {
HOVW806 = Byte.parseByte(s);
} else {
HOVW806 = Byte.MIN_VALUE;
}
}

protected final void initHOVW807(String s) {
if (!s.trim().isEmpty()) {
HOVW807 = Byte.parseByte(s);
} else {
HOVW807 = Byte.MIN_VALUE;
}
}

protected final void initHOVW808(String s) {
if (!s.trim().isEmpty()) {
HOVW808 = Byte.parseByte(s);
} else {
HOVW808 = Byte.MIN_VALUE;
}
}

protected final void initHOVW809(String s) {
if (!s.trim().isEmpty()) {
HOVW809 = Byte.parseByte(s);
} else {
HOVW809 = Byte.MIN_VALUE;
}
}

protected final void initHOVW810(String s) {
if (!s.trim().isEmpty()) {
HOVW810 = Byte.parseByte(s);
} else {
HOVW810 = Byte.MIN_VALUE;
}
}

protected final void initHOVW811(String s) {
if (!s.trim().isEmpty()) {
HOVW811 = Byte.parseByte(s);
} else {
HOVW811 = Byte.MIN_VALUE;
}
}

protected final void initHOVW812(String s) {
if (!s.trim().isEmpty()) {
HOVW812 = Byte.parseByte(s);
} else {
HOVW812 = Byte.MIN_VALUE;
}
}

protected final void initHOVW813(String s) {
if (!s.trim().isEmpty()) {
HOVW813 = Byte.parseByte(s);
} else {
HOVW813 = Byte.MIN_VALUE;
}
}

protected final void initHOVW814(String s) {
if (!s.trim().isEmpty()) {
HOVW814 = Byte.parseByte(s);
} else {
HOVW814 = Byte.MIN_VALUE;
}
}

protected final void initHOVW815(String s) {
if (!s.trim().isEmpty()) {
HOVW815 = Byte.parseByte(s);
} else {
HOVW815 = Byte.MIN_VALUE;
}
}

protected final void initHOVW816(String s) {
if (!s.trim().isEmpty()) {
HOVW816 = Byte.parseByte(s);
} else {
HOVW816 = Byte.MIN_VALUE;
}
}

protected final void initHOVW817(String s) {
if (!s.trim().isEmpty()) {
HOVW817 = Byte.parseByte(s);
} else {
HOVW817 = Byte.MIN_VALUE;
}
}

protected final void initHOVW818(String s) {
if (!s.trim().isEmpty()) {
HOVW818 = Byte.parseByte(s);
} else {
HOVW818 = Byte.MIN_VALUE;
}
}

protected final void initHOVW819(String s) {
if (!s.trim().isEmpty()) {
HOVW819 = Byte.parseByte(s);
} else {
HOVW819 = Byte.MIN_VALUE;
}
}

protected final void initHOVW901(String s) {
if (!s.trim().isEmpty()) {
HOVW901 = Byte.parseByte(s);
} else {
HOVW901 = Byte.MIN_VALUE;
}
}

protected final void initHOVW902(String s) {
if (!s.trim().isEmpty()) {
HOVW902 = Byte.parseByte(s);
} else {
HOVW902 = Byte.MIN_VALUE;
}
}

protected final void initHOVW903(String s) {
if (!s.trim().isEmpty()) {
HOVW903 = Byte.parseByte(s);
} else {
HOVW903 = Byte.MIN_VALUE;
}
}

protected final void initHOVW904(String s) {
if (!s.trim().isEmpty()) {
HOVW904 = Byte.parseByte(s);
} else {
HOVW904 = Byte.MIN_VALUE;
}
}

protected final void initHOVW905(String s) {
if (!s.trim().isEmpty()) {
HOVW905 = Byte.parseByte(s);
} else {
HOVW905 = Byte.MIN_VALUE;
}
}

protected final void initHOVW906(String s) {
if (!s.trim().isEmpty()) {
HOVW906 = Byte.parseByte(s);
} else {
HOVW906 = Byte.MIN_VALUE;
}
}

protected final void initHOVW907(String s) {
if (!s.trim().isEmpty()) {
HOVW907 = Byte.parseByte(s);
} else {
HOVW907 = Byte.MIN_VALUE;
}
}

protected final void initHOVW908(String s) {
if (!s.trim().isEmpty()) {
HOVW908 = Byte.parseByte(s);
} else {
HOVW908 = Byte.MIN_VALUE;
}
}

protected final void initHOVW909(String s) {
if (!s.trim().isEmpty()) {
HOVW909 = Byte.parseByte(s);
} else {
HOVW909 = Byte.MIN_VALUE;
}
}

protected final void initHOVW910(String s) {
if (!s.trim().isEmpty()) {
HOVW910 = Byte.parseByte(s);
} else {
HOVW910 = Byte.MIN_VALUE;
}
}

protected final void initHOVW911(String s) {
if (!s.trim().isEmpty()) {
HOVW911 = Byte.parseByte(s);
} else {
HOVW911 = Byte.MIN_VALUE;
}
}

protected final void initHOVW912(String s) {
if (!s.trim().isEmpty()) {
HOVW912 = Byte.parseByte(s);
} else {
HOVW912 = Byte.MIN_VALUE;
}
}

protected final void initHOVW913(String s) {
if (!s.trim().isEmpty()) {
HOVW913 = Byte.parseByte(s);
} else {
HOVW913 = Byte.MIN_VALUE;
}
}

protected final void initHOVW914(String s) {
if (!s.trim().isEmpty()) {
HOVW914 = Byte.parseByte(s);
} else {
HOVW914 = Byte.MIN_VALUE;
}
}

protected final void initHOVW915(String s) {
if (!s.trim().isEmpty()) {
HOVW915 = Byte.parseByte(s);
} else {
HOVW915 = Byte.MIN_VALUE;
}
}

protected final void initHOVW916(String s) {
if (!s.trim().isEmpty()) {
HOVW916 = Byte.parseByte(s);
} else {
HOVW916 = Byte.MIN_VALUE;
}
}

protected final void initHOVW917(String s) {
if (!s.trim().isEmpty()) {
HOVW917 = Byte.parseByte(s);
} else {
HOVW917 = Byte.MIN_VALUE;
}
}

protected final void initHOVW918(String s) {
if (!s.trim().isEmpty()) {
HOVW918 = Byte.parseByte(s);
} else {
HOVW918 = Byte.MIN_VALUE;
}
}

protected final void initHOVW919(String s) {
if (!s.trim().isEmpty()) {
HOVW919 = Byte.parseByte(s);
} else {
HOVW919 = Byte.MIN_VALUE;
}
}

protected final void initHOWH1(String s) {
if (!s.trim().isEmpty()) {
HOWH1 = Byte.parseByte(s);
} else {
HOWH1 = Byte.MIN_VALUE;
}
}

protected final void initHOWH10(String s) {
if (!s.trim().isEmpty()) {
HOWH10 = Byte.parseByte(s);
} else {
HOWH10 = Byte.MIN_VALUE;
}
}

protected final void initHOWH11(String s) {
if (!s.trim().isEmpty()) {
HOWH11 = Byte.parseByte(s);
} else {
HOWH11 = Byte.MIN_VALUE;
}
}

protected final void initHOWH12(String s) {
if (!s.trim().isEmpty()) {
HOWH12 = Byte.parseByte(s);
} else {
HOWH12 = Byte.MIN_VALUE;
}
}

protected final void initHOWH13(String s) {
if (!s.trim().isEmpty()) {
HOWH13 = Byte.parseByte(s);
} else {
HOWH13 = Byte.MIN_VALUE;
}
}

protected final void initHOWH14(String s) {
if (!s.trim().isEmpty()) {
HOWH14 = Byte.parseByte(s);
} else {
HOWH14 = Byte.MIN_VALUE;
}
}

protected final void initHOWH15(String s) {
if (!s.trim().isEmpty()) {
HOWH15 = Byte.parseByte(s);
} else {
HOWH15 = Byte.MIN_VALUE;
}
}

protected final void initHOWH16(String s) {
if (!s.trim().isEmpty()) {
HOWH16 = Byte.parseByte(s);
} else {
HOWH16 = Byte.MIN_VALUE;
}
}

protected final void initHOWH2(String s) {
if (!s.trim().isEmpty()) {
HOWH2 = Byte.parseByte(s);
} else {
HOWH2 = Byte.MIN_VALUE;
}
}

protected final void initHOWH3(String s) {
if (!s.trim().isEmpty()) {
HOWH3 = Byte.parseByte(s);
} else {
HOWH3 = Byte.MIN_VALUE;
}
}

protected final void initHOWH4(String s) {
if (!s.trim().isEmpty()) {
HOWH4 = Byte.parseByte(s);
} else {
HOWH4 = Byte.MIN_VALUE;
}
}

protected final void initHOWH5(String s) {
if (!s.trim().isEmpty()) {
HOWH5 = Byte.parseByte(s);
} else {
HOWH5 = Byte.MIN_VALUE;
}
}

protected final void initHOWH6(String s) {
if (!s.trim().isEmpty()) {
HOWH6 = Byte.parseByte(s);
} else {
HOWH6 = Byte.MIN_VALUE;
}
}

protected final void initHOWH7(String s) {
if (!s.trim().isEmpty()) {
HOWH7 = Byte.parseByte(s);
} else {
HOWH7 = Byte.MIN_VALUE;
}
}

protected final void initHOWH8(String s) {
if (!s.trim().isEmpty()) {
HOWH8 = Byte.parseByte(s);
} else {
HOWH8 = Byte.MIN_VALUE;
}
}

protected final void initHOWH9(String s) {
if (!s.trim().isEmpty()) {
HOWH9 = Byte.parseByte(s);
} else {
HOWH9 = Byte.MIN_VALUE;
}
}

protected final void initHOWH97(String s) {
if (!s.trim().isEmpty()) {
HOWH97 = Byte.parseByte(s);
} else {
HOWH97 = Byte.MIN_VALUE;
}
}

protected final void initHOYML(String s) {
if (!s.trim().isEmpty()) {
HOYML = Byte.parseByte(s);
} else {
HOYML = Byte.MIN_VALUE;
}
}

protected final void initHOYML2(String s) {
if (!s.trim().isEmpty()) {
HOYML2 = Byte.parseByte(s);
} else {
HOYML2 = Byte.MIN_VALUE;
}
}

protected final void initHOYML3(String s) {
if (!s.trim().isEmpty()) {
HOYML3 = Byte.parseByte(s);
} else {
HOYML3 = Byte.MIN_VALUE;
}
}

protected final void initHOYML4(String s) {
if (!s.trim().isEmpty()) {
HOYML4 = Byte.parseByte(s);
} else {
HOYML4 = Byte.MIN_VALUE;
}
}

protected final void initHOYML5(String s) {
if (!s.trim().isEmpty()) {
HOYML5 = Byte.parseByte(s);
} else {
HOYML5 = Byte.MIN_VALUE;
}
}

protected final void initHSCRP(String s) {
if (!s.trim().isEmpty()) {
HSCRP = Double.parseDouble(s);
} else {
HSCRP = Double.NaN;
}
}

protected final void initIAA39(String s) {
if (!s.trim().isEmpty()) {
IAA39 = Short.parseShort(s);
} else {
IAA39 = Short.MIN_VALUE;
}
}

protected final void initIAA39FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FE = false;
} else {
IAA39FE = true;
}
}
}

protected final void initIAA39FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FL = false;
} else {
IAA39FL = true;
}
}
}

protected final void initIAA39FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FR = false;
} else {
IAA39FR = true;
}
}
}

protected final void initIAA39FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39FU = false;
} else {
IAA39FU = true;
}
}
}

protected final void initIAA39ME(String s) {
if (!s.trim().isEmpty()) {
IAA39ME = Byte.parseByte(s);
} else {
IAA39ME = Byte.MIN_VALUE;
}
}

protected final void initIAA39ML(String s) {
if (!s.trim().isEmpty()) {
IAA39ML = Short.parseShort(s);
} else {
IAA39ML = Short.MIN_VALUE;
}
}

protected final void initIAA39MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39MR = false;
} else {
IAA39MR = true;
}
}
}

protected final void initIAA39MU(String s) {
if (!s.trim().isEmpty()) {
IAA39MU = Short.parseShort(s);
} else {
IAA39MU = Short.MIN_VALUE;
}
}

protected final void initIAA39OE(String s) {
if (!s.trim().isEmpty()) {
IAA39OE = Byte.parseByte(s);
} else {
IAA39OE = Byte.MIN_VALUE;
}
}

protected final void initIAA39OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39OL = false;
} else {
IAA39OL = true;
}
}
}

protected final void initIAA39OR(String s) {
if (!s.trim().isEmpty()) {
IAA39OR = Byte.parseByte(s);
} else {
IAA39OR = Byte.MIN_VALUE;
}
}

protected final void initIAA39OU(String s) {
if (!s.trim().isEmpty()) {
IAA39OU = Short.parseShort(s);
} else {
IAA39OU = Short.MIN_VALUE;
}
}

protected final void initIAA39WE(String s) {
if (!s.trim().isEmpty()) {
IAA39WE = Byte.parseByte(s);
} else {
IAA39WE = Byte.MIN_VALUE;
}
}

protected final void initIAA39WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WL = false;
} else {
IAA39WL = true;
}
}
}

protected final void initIAA39WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WR = false;
} else {
IAA39WR = true;
}
}
}

protected final void initIAA39WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39WU = false;
} else {
IAA39WU = true;
}
}
}

protected final void initIAA39YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YE = false;
} else {
IAA39YE = true;
}
}
}

protected final void initIAA39YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YL = false;
} else {
IAA39YL = true;
}
}
}

protected final void initIAA39YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YR = false;
} else {
IAA39YR = true;
}
}
}

protected final void initIAA39YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA39YU = false;
} else {
IAA39YU = true;
}
}
}

protected final void initIAA40(String s) {
if (!s.trim().isEmpty()) {
IAA40 = Short.parseShort(s);
} else {
IAA40 = Short.MIN_VALUE;
}
}

protected final void initIAA40FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FE = false;
} else {
IAA40FE = true;
}
}
}

protected final void initIAA40FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FL = false;
} else {
IAA40FL = true;
}
}
}

protected final void initIAA40FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FR = false;
} else {
IAA40FR = true;
}
}
}

protected final void initIAA40FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40FU = false;
} else {
IAA40FU = true;
}
}
}

protected final void initIAA40ME(String s) {
if (!s.trim().isEmpty()) {
IAA40ME = Byte.parseByte(s);
} else {
IAA40ME = Byte.MIN_VALUE;
}
}

protected final void initIAA40ML(String s) {
if (!s.trim().isEmpty()) {
IAA40ML = Short.parseShort(s);
} else {
IAA40ML = Short.MIN_VALUE;
}
}

protected final void initIAA40MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40MR = false;
} else {
IAA40MR = true;
}
}
}

protected final void initIAA40MU(String s) {
if (!s.trim().isEmpty()) {
IAA40MU = Short.parseShort(s);
} else {
IAA40MU = Short.MIN_VALUE;
}
}

protected final void initIAA40OE(String s) {
if (!s.trim().isEmpty()) {
IAA40OE = Byte.parseByte(s);
} else {
IAA40OE = Byte.MIN_VALUE;
}
}

protected final void initIAA40OL(String s) {
if (!s.trim().isEmpty()) {
IAA40OL = Short.parseShort(s);
} else {
IAA40OL = Short.MIN_VALUE;
}
}

protected final void initIAA40OR(String s) {
if (!s.trim().isEmpty()) {
IAA40OR = Byte.parseByte(s);
} else {
IAA40OR = Byte.MIN_VALUE;
}
}

protected final void initIAA40OU(String s) {
if (!s.trim().isEmpty()) {
IAA40OU = Short.parseShort(s);
} else {
IAA40OU = Short.MIN_VALUE;
}
}

protected final void initIAA40WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WE = false;
} else {
IAA40WE = true;
}
}
}

protected final void initIAA40WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WL = false;
} else {
IAA40WL = true;
}
}
}

protected final void initIAA40WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WR = false;
} else {
IAA40WR = true;
}
}
}

protected final void initIAA40WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40WU = false;
} else {
IAA40WU = true;
}
}
}

protected final void initIAA40YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YE = false;
} else {
IAA40YE = true;
}
}
}

protected final void initIAA40YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YL = false;
} else {
IAA40YL = true;
}
}
}

protected final void initIAA40YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YR = false;
} else {
IAA40YR = true;
}
}
}

protected final void initIAA40YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA40YU = false;
} else {
IAA40YU = true;
}
}
}

protected final void initIAA41(String s) {
if (!s.trim().isEmpty()) {
IAA41 = Short.parseShort(s);
} else {
IAA41 = Short.MIN_VALUE;
}
}

protected final void initIAA41FE(String s) {
if (!s.trim().isEmpty()) {
IAA41FE = Byte.parseByte(s);
} else {
IAA41FE = Byte.MIN_VALUE;
}
}

protected final void initIAA41FL(String s) {
if (!s.trim().isEmpty()) {
IAA41FL = Short.parseShort(s);
} else {
IAA41FL = Short.MIN_VALUE;
}
}

protected final void initIAA41FR(String s) {
if (!s.trim().isEmpty()) {
IAA41FR = Byte.parseByte(s);
} else {
IAA41FR = Byte.MIN_VALUE;
}
}

protected final void initIAA41FU(String s) {
if (!s.trim().isEmpty()) {
IAA41FU = Short.parseShort(s);
} else {
IAA41FU = Short.MIN_VALUE;
}
}

protected final void initIAA41ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41ME = false;
} else {
IAA41ME = true;
}
}
}

protected final void initIAA41ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41ML = false;
} else {
IAA41ML = true;
}
}
}

protected final void initIAA41MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41MR = false;
} else {
IAA41MR = true;
}
}
}

protected final void initIAA41MU(String s) {
if (!s.trim().isEmpty()) {
IAA41MU = Short.parseShort(s);
} else {
IAA41MU = Short.MIN_VALUE;
}
}

protected final void initIAA41OE(String s) {
if (!s.trim().isEmpty()) {
IAA41OE = Byte.parseByte(s);
} else {
IAA41OE = Byte.MIN_VALUE;
}
}

protected final void initIAA41OL(String s) {
if (!s.trim().isEmpty()) {
IAA41OL = Short.parseShort(s);
} else {
IAA41OL = Short.MIN_VALUE;
}
}

protected final void initIAA41OR(String s) {
if (!s.trim().isEmpty()) {
IAA41OR = Byte.parseByte(s);
} else {
IAA41OR = Byte.MIN_VALUE;
}
}

protected final void initIAA41OU(String s) {
if (!s.trim().isEmpty()) {
IAA41OU = Short.parseShort(s);
} else {
IAA41OU = Short.MIN_VALUE;
}
}

protected final void initIAA41WE(String s) {
if (!s.trim().isEmpty()) {
IAA41WE = Byte.parseByte(s);
} else {
IAA41WE = Byte.MIN_VALUE;
}
}

protected final void initIAA41WL(String s) {
if (!s.trim().isEmpty()) {
IAA41WL = Byte.parseByte(s);
} else {
IAA41WL = Byte.MIN_VALUE;
}
}

protected final void initIAA41WR(String s) {
if (!s.trim().isEmpty()) {
IAA41WR = Byte.parseByte(s);
} else {
IAA41WR = Byte.MIN_VALUE;
}
}

protected final void initIAA41WU(String s) {
if (!s.trim().isEmpty()) {
IAA41WU = Byte.parseByte(s);
} else {
IAA41WU = Byte.MIN_VALUE;
}
}

protected final void initIAA41YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YE = false;
} else {
IAA41YE = true;
}
}
}

protected final void initIAA41YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YL = false;
} else {
IAA41YL = true;
}
}
}

protected final void initIAA41YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YR = false;
} else {
IAA41YR = true;
}
}
}

protected final void initIAA41YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA41YU = false;
} else {
IAA41YU = true;
}
}
}

protected final void initIAA42(String s) {
if (!s.trim().isEmpty()) {
IAA42 = Short.parseShort(s);
} else {
IAA42 = Short.MIN_VALUE;
}
}

protected final void initIAA42FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FE = false;
} else {
IAA42FE = true;
}
}
}

protected final void initIAA42FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FL = false;
} else {
IAA42FL = true;
}
}
}

protected final void initIAA42FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FR = false;
} else {
IAA42FR = true;
}
}
}

protected final void initIAA42FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42FU = false;
} else {
IAA42FU = true;
}
}
}

protected final void initIAA42ME(String s) {
if (!s.trim().isEmpty()) {
IAA42ME = Byte.parseByte(s);
} else {
IAA42ME = Byte.MIN_VALUE;
}
}

protected final void initIAA42ML(String s) {
if (!s.trim().isEmpty()) {
IAA42ML = Short.parseShort(s);
} else {
IAA42ML = Short.MIN_VALUE;
}
}

protected final void initIAA42MR(String s) {
if (!s.trim().isEmpty()) {
IAA42MR = Byte.parseByte(s);
} else {
IAA42MR = Byte.MIN_VALUE;
}
}

protected final void initIAA42MU(String s) {
if (!s.trim().isEmpty()) {
IAA42MU = Short.parseShort(s);
} else {
IAA42MU = Short.MIN_VALUE;
}
}

protected final void initIAA42OE(String s) {
if (!s.trim().isEmpty()) {
IAA42OE = Byte.parseByte(s);
} else {
IAA42OE = Byte.MIN_VALUE;
}
}

protected final void initIAA42OL(String s) {
if (!s.trim().isEmpty()) {
IAA42OL = Short.parseShort(s);
} else {
IAA42OL = Short.MIN_VALUE;
}
}

protected final void initIAA42OR(String s) {
if (!s.trim().isEmpty()) {
IAA42OR = Byte.parseByte(s);
} else {
IAA42OR = Byte.MIN_VALUE;
}
}

protected final void initIAA42OU(String s) {
if (!s.trim().isEmpty()) {
IAA42OU = Short.parseShort(s);
} else {
IAA42OU = Short.MIN_VALUE;
}
}

protected final void initIAA42WE(String s) {
if (!s.trim().isEmpty()) {
IAA42WE = Byte.parseByte(s);
} else {
IAA42WE = Byte.MIN_VALUE;
}
}

protected final void initIAA42WL(String s) {
if (!s.trim().isEmpty()) {
IAA42WL = Short.parseShort(s);
} else {
IAA42WL = Short.MIN_VALUE;
}
}

protected final void initIAA42WR(String s) {
if (!s.trim().isEmpty()) {
IAA42WR = Byte.parseByte(s);
} else {
IAA42WR = Byte.MIN_VALUE;
}
}

protected final void initIAA42WU(String s) {
if (!s.trim().isEmpty()) {
IAA42WU = Short.parseShort(s);
} else {
IAA42WU = Short.MIN_VALUE;
}
}

protected final void initIAA42YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42YE = false;
} else {
IAA42YE = true;
}
}
}

protected final void initIAA42YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42YL = false;
} else {
IAA42YL = true;
}
}
}

protected final void initIAA42YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAA42YR = false;
} else {
IAA42YR = true;
}
}
}

protected final void initIAA42YU(String s) {
if (!s.trim().isEmpty()) {
IAA42YU = Short.parseShort(s);
} else {
IAA42YU = Short.MIN_VALUE;
}
}

protected final void initIAAIPE(String s) {
if (!s.trim().isEmpty()) {
IAAIPE = Byte.parseByte(s);
} else {
IAAIPE = Byte.MIN_VALUE;
}
}

protected final void initIAAIPL(String s) {
if (!s.trim().isEmpty()) {
IAAIPL = Short.parseShort(s);
} else {
IAAIPL = Short.MIN_VALUE;
}
}

protected final void initIAAIPR(String s) {
if (!s.trim().isEmpty()) {
IAAIPR = Byte.parseByte(s);
} else {
IAAIPR = Byte.MIN_VALUE;
}
}

protected final void initIAAIPU(String s) {
if (!s.trim().isEmpty()) {
IAAIPU = Short.parseShort(s);
} else {
IAAIPU = Short.MIN_VALUE;
}
}

protected final void initIABEBC(String s) {
if (!s.trim().isEmpty()) {
IABEBC = Byte.parseByte(s);
} else {
IABEBC = Byte.MIN_VALUE;
}
}

protected final void initIABEN95(String s) {
if (!s.trim().isEmpty()) {
IABEN95 = Byte.parseByte(s);
} else {
IABEN95 = Byte.MIN_VALUE;
}
}

protected final void initIABEN96(String s) {
if (!s.trim().isEmpty()) {
IABEN96 = Byte.parseByte(s);
} else {
IABEN96 = Byte.MIN_VALUE;
}
}

protected final void initIABENCB(String s) {
if (!s.trim().isEmpty()) {
IABENCB = Byte.parseByte(s);
} else {
IABENCB = Byte.MIN_VALUE;
}
}

protected final void initIABENCC(String s) {
if (!s.trim().isEmpty()) {
IABENCC = Byte.parseByte(s);
} else {
IABENCC = Byte.MIN_VALUE;
}
}

protected final void initIABENGA(String s) {
if (!s.trim().isEmpty()) {
IABENGA = Byte.parseByte(s);
} else {
IABENGA = Byte.MIN_VALUE;
}
}

protected final void initIABENIS(String s) {
if (!s.trim().isEmpty()) {
IABENIS = Byte.parseByte(s);
} else {
IABENIS = Byte.MIN_VALUE;
}
}

protected final void initIABENJA(String s) {
if (!s.trim().isEmpty()) {
IABENJA = Byte.parseByte(s);
} else {
IABENJA = Byte.MIN_VALUE;
}
}

protected final void initIABENM85(String s) {
if (!s.trim().isEmpty()) {
IABENM85 = Byte.parseByte(s);
} else {
IABENM85 = Byte.MIN_VALUE;
}
}

protected final void initIABENM86(String s) {
if (!s.trim().isEmpty()) {
IABENM86 = Byte.parseByte(s);
} else {
IABENM86 = Byte.MIN_VALUE;
}
}

protected final void initIABENM96(String s) {
if (!s.trim().isEmpty()) {
IABENM96 = Byte.parseByte(s);
} else {
IABENM96 = Byte.MIN_VALUE;
}
}

protected final void initIABENMCB(String s) {
if (!s.trim().isEmpty()) {
IABENMCB = Byte.parseByte(s);
} else {
IABENMCB = Byte.MIN_VALUE;
}
}

protected final void initIABENMCC(String s) {
if (!s.trim().isEmpty()) {
IABENMCC = Byte.parseByte(s);
} else {
IABENMCC = Byte.MIN_VALUE;
}
}

protected final void initIABENMEC(String s) {
if (!s.trim().isEmpty()) {
IABENMEC = Byte.parseByte(s);
} else {
IABENMEC = Byte.MIN_VALUE;
}
}

protected final void initIABENMGA(String s) {
if (!s.trim().isEmpty()) {
IABENMGA = Byte.parseByte(s);
} else {
IABENMGA = Byte.MIN_VALUE;
}
}

protected final void initIABENMIS(String s) {
if (!s.trim().isEmpty()) {
IABENMIS = Byte.parseByte(s);
} else {
IABENMIS = Byte.MIN_VALUE;
}
}

protected final void initIABENMJA(String s) {
if (!s.trim().isEmpty()) {
IABENMJA = Byte.parseByte(s);
} else {
IABENMJA = Byte.MIN_VALUE;
}
}

protected final void initIABENMPC(String s) {
if (!s.trim().isEmpty()) {
IABENMPC = Byte.parseByte(s);
} else {
IABENMPC = Byte.MIN_VALUE;
}
}

protected final void initIABENMTC(String s) {
if (!s.trim().isEmpty()) {
IABENMTC = Byte.parseByte(s);
} else {
IABENMTC = Byte.MIN_VALUE;
}
}

protected final void initIABENMUC(String s) {
if (!s.trim().isEmpty()) {
IABENMUC = Byte.parseByte(s);
} else {
IABENMUC = Byte.MIN_VALUE;
}
}

protected final void initIABENMWP(String s) {
if (!s.trim().isEmpty()) {
IABENMWP = Byte.parseByte(s);
} else {
IABENMWP = Byte.MIN_VALUE;
}
}

protected final void initIABENPC(String s) {
if (!s.trim().isEmpty()) {
IABENPC = Byte.parseByte(s);
} else {
IABENPC = Byte.MIN_VALUE;
}
}

protected final void initIABENR(String s) {
if (!s.trim().isEmpty()) {
IABENR = Byte.parseByte(s);
} else {
IABENR = Byte.MIN_VALUE;
}
}

protected final void initIABENTC(String s) {
if (!s.trim().isEmpty()) {
IABENTC = Byte.parseByte(s);
} else {
IABENTC = Byte.MIN_VALUE;
}
}

protected final void initIABENUC(String s) {
if (!s.trim().isEmpty()) {
IABENUC = Byte.parseByte(s);
} else {
IABENUC = Byte.MIN_VALUE;
}
}

protected final void initIABENWP(String s) {
if (!s.trim().isEmpty()) {
IABENWP = Byte.parseByte(s);
} else {
IABENWP = Byte.MIN_VALUE;
}
}

protected final void initIABEPN95(String s) {
if (!s.trim().isEmpty()) {
IABEPN95 = Byte.parseByte(s);
} else {
IABEPN95 = Byte.MIN_VALUE;
}
}

protected final void initIABEPN96(String s) {
if (!s.trim().isEmpty()) {
IABEPN96 = Byte.parseByte(s);
} else {
IABEPN96 = Byte.MIN_VALUE;
}
}

protected final void initIABEPNCB(String s) {
if (!s.trim().isEmpty()) {
IABEPNCB = Byte.parseByte(s);
} else {
IABEPNCB = Byte.MIN_VALUE;
}
}

protected final void initIABEPNCC(String s) {
if (!s.trim().isEmpty()) {
IABEPNCC = Byte.parseByte(s);
} else {
IABEPNCC = Byte.MIN_VALUE;
}
}

protected final void initIABEPNGA(String s) {
if (!s.trim().isEmpty()) {
IABEPNGA = Byte.parseByte(s);
} else {
IABEPNGA = Byte.MIN_VALUE;
}
}

protected final void initIABEPNIS(String s) {
if (!s.trim().isEmpty()) {
IABEPNIS = Byte.parseByte(s);
} else {
IABEPNIS = Byte.MIN_VALUE;
}
}

protected final void initIABEPNJA(String s) {
if (!s.trim().isEmpty()) {
IABEPNJA = Byte.parseByte(s);
} else {
IABEPNJA = Byte.MIN_VALUE;
}
}

protected final void initIABEPNPC(String s) {
if (!s.trim().isEmpty()) {
IABEPNPC = Byte.parseByte(s);
} else {
IABEPNPC = Byte.MIN_VALUE;
}
}

protected final void initIABEPNUC(String s) {
if (!s.trim().isEmpty()) {
IABEPNUC = Byte.parseByte(s);
} else {
IABEPNUC = Byte.MIN_VALUE;
}
}

protected final void initIABEPNWC(String s) {
if (!s.trim().isEmpty()) {
IABEPNWC = Byte.parseByte(s);
} else {
IABEPNWC = Byte.MIN_VALUE;
}
}

protected final void initIABEPNWP(String s) {
if (!s.trim().isEmpty()) {
IABEPNWP = Byte.parseByte(s);
} else {
IABEPNWP = Byte.MIN_VALUE;
}
}

protected final void initIABPNM85(String s) {
if (!s.trim().isEmpty()) {
IABPNM85 = Byte.parseByte(s);
} else {
IABPNM85 = Byte.MIN_VALUE;
}
}

protected final void initIABPNM86(String s) {
if (!s.trim().isEmpty()) {
IABPNM86 = Byte.parseByte(s);
} else {
IABPNM86 = Byte.MIN_VALUE;
}
}

protected final void initIABPNM96(String s) {
if (!s.trim().isEmpty()) {
IABPNM96 = Byte.parseByte(s);
} else {
IABPNM96 = Byte.MIN_VALUE;
}
}

protected final void initIABPNMCB(String s) {
if (!s.trim().isEmpty()) {
IABPNMCB = Byte.parseByte(s);
} else {
IABPNMCB = Byte.MIN_VALUE;
}
}

protected final void initIABPNMCC(String s) {
if (!s.trim().isEmpty()) {
IABPNMCC = Byte.parseByte(s);
} else {
IABPNMCC = Byte.MIN_VALUE;
}
}

protected final void initIABPNMEC(String s) {
if (!s.trim().isEmpty()) {
IABPNMEC = Byte.parseByte(s);
} else {
IABPNMEC = Byte.MIN_VALUE;
}
}

protected final void initIABPNMGA(String s) {
if (!s.trim().isEmpty()) {
IABPNMGA = Byte.parseByte(s);
} else {
IABPNMGA = Byte.MIN_VALUE;
}
}

protected final void initIABPNMIS(String s) {
if (!s.trim().isEmpty()) {
IABPNMIS = Byte.parseByte(s);
} else {
IABPNMIS = Byte.MIN_VALUE;
}
}

protected final void initIABPNMJA(String s) {
if (!s.trim().isEmpty()) {
IABPNMJA = Byte.parseByte(s);
} else {
IABPNMJA = Byte.MIN_VALUE;
}
}

protected final void initIABPNMPC(String s) {
if (!s.trim().isEmpty()) {
IABPNMPC = Byte.parseByte(s);
} else {
IABPNMPC = Byte.MIN_VALUE;
}
}

protected final void initIABPNMTC(String s) {
if (!s.trim().isEmpty()) {
IABPNMTC = Byte.parseByte(s);
} else {
IABPNMTC = Byte.MIN_VALUE;
}
}

protected final void initIABPNMUC(String s) {
if (!s.trim().isEmpty()) {
IABPNMUC = Byte.parseByte(s);
} else {
IABPNMUC = Byte.MIN_VALUE;
}
}

protected final void initIABPNMWP(String s) {
if (!s.trim().isEmpty()) {
IABPNMWP = Byte.parseByte(s);
} else {
IABPNMWP = Byte.MIN_VALUE;
}
}

protected final void initIACBTA(String s) {
if (!s.trim().isEmpty()) {
IACBTA = Short.parseShort(s);
} else {
IACBTA = Short.MIN_VALUE;
}
}

protected final void initIACBTFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTFE = false;
} else {
IACBTFE = true;
}
}
}

protected final void initIACBTFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTFL = false;
} else {
IACBTFL = true;
}
}
}

protected final void initIACBTFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTFR = false;
} else {
IACBTFR = true;
}
}
}

protected final void initIACBTFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTFU = false;
} else {
IACBTFU = true;
}
}
}

protected final void initIACBTME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTME = false;
} else {
IACBTME = true;
}
}
}

protected final void initIACBTML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTML = false;
} else {
IACBTML = true;
}
}
}

protected final void initIACBTMR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTMR = false;
} else {
IACBTMR = true;
}
}
}

protected final void initIACBTMU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTMU = false;
} else {
IACBTMU = true;
}
}
}

protected final void initIACBTOE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTOE = false;
} else {
IACBTOE = true;
}
}
}

protected final void initIACBTOL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTOL = false;
} else {
IACBTOL = true;
}
}
}

protected final void initIACBTOR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTOR = false;
} else {
IACBTOR = true;
}
}
}

protected final void initIACBTOU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTOU = false;
} else {
IACBTOU = true;
}
}
}

protected final void initIACBTP(String s) {
if (!s.trim().isEmpty()) {
IACBTP = Byte.parseByte(s);
} else {
IACBTP = Byte.MIN_VALUE;
}
}

protected final void initIACBTWE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTWE = false;
} else {
IACBTWE = true;
}
}
}

protected final void initIACBTWL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTWL = false;
} else {
IACBTWL = true;
}
}
}

protected final void initIACBTWR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTWR = false;
} else {
IACBTWR = true;
}
}
}

protected final void initIACBTWU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTWU = false;
} else {
IACBTWU = true;
}
}
}

protected final void initIACBTX(String s) {
if (!s.trim().isEmpty()) {
IACBTX = Byte.parseByte(s);
} else {
IACBTX = Byte.MIN_VALUE;
}
}

protected final void initIACBTYE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTYE = false;
} else {
IACBTYE = true;
}
}
}

protected final void initIACBTYL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTYL = false;
} else {
IACBTYL = true;
}
}
}

protected final void initIACBTYR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTYR = false;
} else {
IACBTYR = true;
}
}
}

protected final void initIACBTYU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IACBTYU = false;
} else {
IACBTYU = true;
}
}
}

protected final void initIACISAE(String s) {
if (!s.trim().isEmpty()) {
IACISAE = Byte.parseByte(s);
} else {
IACISAE = Byte.MIN_VALUE;
}
}

protected final void initIACISAL(String s) {
if (!s.trim().isEmpty()) {
IACISAL = Short.parseShort(s);
} else {
IACISAL = Short.MIN_VALUE;
}
}

protected final void initIACISAR(String s) {
if (!s.trim().isEmpty()) {
IACISAR = Byte.parseByte(s);
} else {
IACISAR = Byte.MIN_VALUE;
}
}

protected final void initIACISAU(String s) {
if (!s.trim().isEmpty()) {
IACISAU = Short.parseShort(s);
} else {
IACISAU = Short.MIN_VALUE;
}
}

protected final void initIADEBME(String s) {
if (!s.trim().isEmpty()) {
IADEBME = Byte.parseByte(s);
} else {
IADEBME = Byte.MIN_VALUE;
}
}

protected final void initIADEBML(String s) {
if (!s.trim().isEmpty()) {
IADEBML = Short.parseShort(s);
} else {
IADEBML = Short.MIN_VALUE;
}
}

protected final void initIADEBMR(String s) {
if (!s.trim().isEmpty()) {
IADEBMR = Byte.parseByte(s);
} else {
IADEBMR = Byte.MIN_VALUE;
}
}

protected final void initIADEBMU(String s) {
if (!s.trim().isEmpty()) {
IADEBMU = Short.parseShort(s);
} else {
IADEBMU = Short.MIN_VALUE;
}
}

protected final void initIADEM(String s) {
if (!s.trim().isEmpty()) {
IADEM = Byte.parseByte(s);
} else {
IADEM = Byte.MIN_VALUE;
}
}

protected final void initIADEN(String s) {
if (!s.trim().isEmpty()) {
IADEN = Byte.parseByte(s);
} else {
IADEN = Byte.MIN_VALUE;
}
}

protected final void initIAEA10E(String s) {
if (!s.trim().isEmpty()) {
IAEA10E = Byte.parseByte(s);
} else {
IAEA10E = Byte.MIN_VALUE;
}
}

protected final void initIAEA10L(String s) {
if (!s.trim().isEmpty()) {
IAEA10L = Short.parseShort(s);
} else {
IAEA10L = Short.MIN_VALUE;
}
}

protected final void initIAEA10R(String s) {
if (!s.trim().isEmpty()) {
IAEA10R = Byte.parseByte(s);
} else {
IAEA10R = Byte.MIN_VALUE;
}
}

protected final void initIAEA10U(String s) {
if (!s.trim().isEmpty()) {
IAEA10U = Short.parseShort(s);
} else {
IAEA10U = Short.MIN_VALUE;
}
}

protected final void initIAEA11E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA11E = false;
} else {
IAEA11E = true;
}
}
}

protected final void initIAEA11L(String s) {
if (!s.trim().isEmpty()) {
IAEA11L = Byte.parseByte(s);
} else {
IAEA11L = Byte.MIN_VALUE;
}
}

protected final void initIAEA11R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA11R = false;
} else {
IAEA11R = true;
}
}
}

protected final void initIAEA11U(String s) {
if (!s.trim().isEmpty()) {
IAEA11U = Short.parseShort(s);
} else {
IAEA11U = Short.MIN_VALUE;
}
}

protected final void initIAEA12E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA12E = false;
} else {
IAEA12E = true;
}
}
}

protected final void initIAEA12L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA12L = false;
} else {
IAEA12L = true;
}
}
}

protected final void initIAEA12R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA12R = false;
} else {
IAEA12R = true;
}
}
}

protected final void initIAEA12U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA12U = false;
} else {
IAEA12U = true;
}
}
}

protected final void initIAEA13E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA13E = false;
} else {
IAEA13E = true;
}
}
}

protected final void initIAEA13L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA13L = false;
} else {
IAEA13L = true;
}
}
}

protected final void initIAEA13R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA13R = false;
} else {
IAEA13R = true;
}
}
}

protected final void initIAEA13U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA13U = false;
} else {
IAEA13U = true;
}
}
}

protected final void initIAEA14E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA14E = false;
} else {
IAEA14E = true;
}
}
}

protected final void initIAEA14L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA14L = false;
} else {
IAEA14L = true;
}
}
}

protected final void initIAEA14R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA14R = false;
} else {
IAEA14R = true;
}
}
}

protected final void initIAEA14U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA14U = false;
} else {
IAEA14U = true;
}
}
}

protected final void initIAEA15E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA15E = false;
} else {
IAEA15E = true;
}
}
}

protected final void initIAEA15L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA15L = false;
} else {
IAEA15L = true;
}
}
}

protected final void initIAEA15R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA15R = false;
} else {
IAEA15R = true;
}
}
}

protected final void initIAEA15U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA15U = false;
} else {
IAEA15U = true;
}
}
}

protected final void initIAEA16E(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA16E = false;
} else {
IAEA16E = true;
}
}
}

protected final void initIAEA16L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA16L = false;
} else {
IAEA16L = true;
}
}
}

protected final void initIAEA16R(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA16R = false;
} else {
IAEA16R = true;
}
}
}

protected final void initIAEA16U(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAEA16U = false;
} else {
IAEA16U = true;
}
}
}

protected final void initIAEAR2E(String s) {
if (!s.trim().isEmpty()) {
IAEAR2E = Byte.parseByte(s);
} else {
IAEAR2E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR2L(String s) {
if (!s.trim().isEmpty()) {
IAEAR2L = Integer.parseInt(s);
} else {
IAEAR2L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR2R(String s) {
if (!s.trim().isEmpty()) {
IAEAR2R = Byte.parseByte(s);
} else {
IAEAR2R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR2U(String s) {
if (!s.trim().isEmpty()) {
IAEAR2U = Integer.parseInt(s);
} else {
IAEAR2U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR3E(String s) {
if (!s.trim().isEmpty()) {
IAEAR3E = Byte.parseByte(s);
} else {
IAEAR3E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR3L(String s) {
if (!s.trim().isEmpty()) {
IAEAR3L = Integer.parseInt(s);
} else {
IAEAR3L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR3R(String s) {
if (!s.trim().isEmpty()) {
IAEAR3R = Byte.parseByte(s);
} else {
IAEAR3R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR3U(String s) {
if (!s.trim().isEmpty()) {
IAEAR3U = Integer.parseInt(s);
} else {
IAEAR3U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR4E(String s) {
if (!s.trim().isEmpty()) {
IAEAR4E = Byte.parseByte(s);
} else {
IAEAR4E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR4L(String s) {
if (!s.trim().isEmpty()) {
IAEAR4L = Integer.parseInt(s);
} else {
IAEAR4L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR4R(String s) {
if (!s.trim().isEmpty()) {
IAEAR4R = Byte.parseByte(s);
} else {
IAEAR4R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR4U(String s) {
if (!s.trim().isEmpty()) {
IAEAR4U = Integer.parseInt(s);
} else {
IAEAR4U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR5E(String s) {
if (!s.trim().isEmpty()) {
IAEAR5E = Byte.parseByte(s);
} else {
IAEAR5E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR5L(String s) {
if (!s.trim().isEmpty()) {
IAEAR5L = Integer.parseInt(s);
} else {
IAEAR5L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR5R(String s) {
if (!s.trim().isEmpty()) {
IAEAR5R = Byte.parseByte(s);
} else {
IAEAR5R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR5U(String s) {
if (!s.trim().isEmpty()) {
IAEAR5U = Integer.parseInt(s);
} else {
IAEAR5U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR6E(String s) {
if (!s.trim().isEmpty()) {
IAEAR6E = Byte.parseByte(s);
} else {
IAEAR6E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR6L(String s) {
if (!s.trim().isEmpty()) {
IAEAR6L = Integer.parseInt(s);
} else {
IAEAR6L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR6R(String s) {
if (!s.trim().isEmpty()) {
IAEAR6R = Byte.parseByte(s);
} else {
IAEAR6R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR6U(String s) {
if (!s.trim().isEmpty()) {
IAEAR6U = Integer.parseInt(s);
} else {
IAEAR6U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR7E(String s) {
if (!s.trim().isEmpty()) {
IAEAR7E = Byte.parseByte(s);
} else {
IAEAR7E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR7L(String s) {
if (!s.trim().isEmpty()) {
IAEAR7L = Integer.parseInt(s);
} else {
IAEAR7L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR7R(String s) {
if (!s.trim().isEmpty()) {
IAEAR7R = Byte.parseByte(s);
} else {
IAEAR7R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR7U(String s) {
if (!s.trim().isEmpty()) {
IAEAR7U = Integer.parseInt(s);
} else {
IAEAR7U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR8E(String s) {
if (!s.trim().isEmpty()) {
IAEAR8E = Byte.parseByte(s);
} else {
IAEAR8E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR8L(String s) {
if (!s.trim().isEmpty()) {
IAEAR8L = Integer.parseInt(s);
} else {
IAEAR8L = Integer.MIN_VALUE;
}
}

protected final void initIAEAR8R(String s) {
if (!s.trim().isEmpty()) {
IAEAR8R = Byte.parseByte(s);
} else {
IAEAR8R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR8U(String s) {
if (!s.trim().isEmpty()) {
IAEAR8U = Integer.parseInt(s);
} else {
IAEAR8U = Integer.MIN_VALUE;
}
}

protected final void initIAEAR9E(String s) {
if (!s.trim().isEmpty()) {
IAEAR9E = Byte.parseByte(s);
} else {
IAEAR9E = Byte.MIN_VALUE;
}
}

protected final void initIAEAR9L(String s) {
if (!s.trim().isEmpty()) {
IAEAR9L = Short.parseShort(s);
} else {
IAEAR9L = Short.MIN_VALUE;
}
}

protected final void initIAEAR9R(String s) {
if (!s.trim().isEmpty()) {
IAEAR9R = Byte.parseByte(s);
} else {
IAEAR9R = Byte.MIN_VALUE;
}
}

protected final void initIAEAR9U(String s) {
if (!s.trim().isEmpty()) {
IAEAR9U = Short.parseShort(s);
} else {
IAEAR9U = Short.MIN_VALUE;
}
}

protected final void initIAEARE(String s) {
if (!s.trim().isEmpty()) {
IAEARE = Byte.parseByte(s);
} else {
IAEARE = Byte.MIN_VALUE;
}
}

protected final void initIAEARL(String s) {
if (!s.trim().isEmpty()) {
IAEARL = Integer.parseInt(s);
} else {
IAEARL = Integer.MIN_VALUE;
}
}

protected final void initIAEARR(String s) {
if (!s.trim().isEmpty()) {
IAEARR = Byte.parseByte(s);
} else {
IAEARR = Byte.MIN_VALUE;
}
}

protected final void initIAEARU(String s) {
if (!s.trim().isEmpty()) {
IAEARU = Integer.parseInt(s);
} else {
IAEARU = Integer.MIN_VALUE;
}
}

protected final void initIAERN(String s) {
if (!s.trim().isEmpty()) {
IAERN = Short.parseShort(s);
} else {
IAERN = Short.MIN_VALUE;
}
}

protected final void initIAERN10(String s) {
if (!s.trim().isEmpty()) {
IAERN10 = Byte.parseByte(s);
} else {
IAERN10 = Byte.MIN_VALUE;
}
}

protected final void initIAERN11(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAERN11 = false;
} else {
IAERN11 = true;
}
}
}

protected final void initIAERN12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAERN12 = false;
} else {
IAERN12 = true;
}
}
}

protected final void initIAERN13(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAERN13 = false;
} else {
IAERN13 = true;
}
}
}

protected final void initIAERN14(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAERN14 = false;
} else {
IAERN14 = true;
}
}
}

protected final void initIAERN15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAERN15 = false;
} else {
IAERN15 = true;
}
}
}

protected final void initIAERN16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAERN16 = false;
} else {
IAERN16 = true;
}
}
}

protected final void initIAERN2(String s) {
if (!s.trim().isEmpty()) {
IAERN2 = Integer.parseInt(s);
} else {
IAERN2 = Integer.MIN_VALUE;
}
}

protected final void initIAERN3(String s) {
if (!s.trim().isEmpty()) {
IAERN3 = Integer.parseInt(s);
} else {
IAERN3 = Integer.MIN_VALUE;
}
}

protected final void initIAERN4(String s) {
if (!s.trim().isEmpty()) {
IAERN4 = Integer.parseInt(s);
} else {
IAERN4 = Integer.MIN_VALUE;
}
}

protected final void initIAERN5(String s) {
if (!s.trim().isEmpty()) {
IAERN5 = Integer.parseInt(s);
} else {
IAERN5 = Integer.MIN_VALUE;
}
}

protected final void initIAERN6(String s) {
if (!s.trim().isEmpty()) {
IAERN6 = Short.parseShort(s);
} else {
IAERN6 = Short.MIN_VALUE;
}
}

protected final void initIAERN7(String s) {
if (!s.trim().isEmpty()) {
IAERN7 = Short.parseShort(s);
} else {
IAERN7 = Short.MIN_VALUE;
}
}

protected final void initIAERN8(String s) {
if (!s.trim().isEmpty()) {
IAERN8 = Short.parseShort(s);
} else {
IAERN8 = Short.MIN_VALUE;
}
}

protected final void initIAERN9(String s) {
if (!s.trim().isEmpty()) {
IAERN9 = Byte.parseByte(s);
} else {
IAERN9 = Byte.MIN_VALUE;
}
}

protected final void initIAFBAE(String s) {
if (!s.trim().isEmpty()) {
IAFBAE = Byte.parseByte(s);
} else {
IAFBAE = Byte.MIN_VALUE;
}
}

protected final void initIAFBAL(String s) {
if (!s.trim().isEmpty()) {
IAFBAL = Integer.parseInt(s);
} else {
IAFBAL = Integer.MIN_VALUE;
}
}

protected final void initIAFBAR(String s) {
if (!s.trim().isEmpty()) {
IAFBAR = Byte.parseByte(s);
} else {
IAFBAR = Byte.MIN_VALUE;
}
}

protected final void initIAFBAU(String s) {
if (!s.trim().isEmpty()) {
IAFBAU = Integer.parseInt(s);
} else {
IAFBAU = Integer.MIN_VALUE;
}
}

protected final void initIAFFNUM(String s) {
if (!s.trim().isEmpty()) {
IAFFNUM = Byte.parseByte(s);
} else {
IAFFNUM = Byte.MIN_VALUE;
}
}

protected final void initIAFUEL(String s) {
if (!s.trim().isEmpty()) {
IAFUEL = Byte.parseByte(s);
} else {
IAFUEL = Byte.MIN_VALUE;
}
}

protected final void initIAG(String s) {
if (!s.trim().isEmpty()) {
IAG = Byte.parseByte(s);
} else {
IAG = Byte.MIN_VALUE;
}
}

protected final void initIAGAG(String s) {
if (!s.trim().isEmpty()) {
IAGAG = Byte.parseByte(s);
} else {
IAGAG = Byte.MIN_VALUE;
}
}

protected final void initIAGAG2(String s) {
if (!s.trim().isEmpty()) {
IAGAG2 = Byte.parseByte(s);
} else {
IAGAG2 = Byte.MIN_VALUE;
}
}

protected final void initIAGAG3(String s) {
if (!s.trim().isEmpty()) {
IAGAG3 = Byte.parseByte(s);
} else {
IAGAG3 = Byte.MIN_VALUE;
}
}

protected final void initIAGJ(String s) {
if (!s.trim().isEmpty()) {
IAGJ = Byte.parseByte(s);
} else {
IAGJ = Byte.MIN_VALUE;
}
}

protected final void initIAGJ2(String s) {
if (!s.trim().isEmpty()) {
IAGJ2 = Byte.parseByte(s);
} else {
IAGJ2 = Byte.MIN_VALUE;
}
}

protected final void initIAGJ3(String s) {
if (!s.trim().isEmpty()) {
IAGJ3 = Byte.parseByte(s);
} else {
IAGJ3 = Byte.MIN_VALUE;
}
}

protected final void initIAGN(String s) {
if (!s.trim().isEmpty()) {
IAGN = Byte.parseByte(s);
} else {
IAGN = Byte.MIN_VALUE;
}
}

protected final void initIAGV(String s) {
if (!s.trim().isEmpty()) {
IAGV = Integer.parseInt(s);
} else {
IAGV = Integer.MIN_VALUE;
}
}

protected final void initIAGV2(String s) {
if (!s.trim().isEmpty()) {
IAGV2 = Integer.parseInt(s);
} else {
IAGV2 = Integer.MIN_VALUE;
}
}

protected final void initIAGV2E(String s) {
if (!s.trim().isEmpty()) {
IAGV2E = Byte.parseByte(s);
} else {
IAGV2E = Byte.MIN_VALUE;
}
}

protected final void initIAGV2L(String s) {
if (!s.trim().isEmpty()) {
IAGV2L = Short.parseShort(s);
} else {
IAGV2L = Short.MIN_VALUE;
}
}

protected final void initIAGV2R(String s) {
if (!s.trim().isEmpty()) {
IAGV2R = Byte.parseByte(s);
} else {
IAGV2R = Byte.MIN_VALUE;
}
}

protected final void initIAGV2U(String s) {
if (!s.trim().isEmpty()) {
IAGV2U = Integer.parseInt(s);
} else {
IAGV2U = Integer.MIN_VALUE;
}
}

protected final void initIAGV3(String s) {
if (!s.trim().isEmpty()) {
IAGV3 = Integer.parseInt(s);
} else {
IAGV3 = Integer.MIN_VALUE;
}
}

protected final void initIAGV3E(String s) {
if (!s.trim().isEmpty()) {
IAGV3E = Byte.parseByte(s);
} else {
IAGV3E = Byte.MIN_VALUE;
}
}

protected final void initIAGV3L(String s) {
if (!s.trim().isEmpty()) {
IAGV3L = Integer.parseInt(s);
} else {
IAGV3L = Integer.MIN_VALUE;
}
}

protected final void initIAGV3R(String s) {
if (!s.trim().isEmpty()) {
IAGV3R = Byte.parseByte(s);
} else {
IAGV3R = Byte.MIN_VALUE;
}
}

protected final void initIAGV3U(String s) {
if (!s.trim().isEmpty()) {
IAGV3U = Short.parseShort(s);
} else {
IAGV3U = Short.MIN_VALUE;
}
}

protected final void initIAGVE(String s) {
if (!s.trim().isEmpty()) {
IAGVE = Byte.parseByte(s);
} else {
IAGVE = Byte.MIN_VALUE;
}
}

protected final void initIAGVL(String s) {
if (!s.trim().isEmpty()) {
IAGVL = Integer.parseInt(s);
} else {
IAGVL = Integer.MIN_VALUE;
}
}

protected final void initIAGVR(String s) {
if (!s.trim().isEmpty()) {
IAGVR = Byte.parseByte(s);
} else {
IAGVR = Byte.MIN_VALUE;
}
}

protected final void initIAGVU(String s) {
if (!s.trim().isEmpty()) {
IAGVU = Integer.parseInt(s);
} else {
IAGVU = Integer.MIN_VALUE;
}
}

protected final void initIAGWH(String s) {
if (!s.trim().isEmpty()) {
IAGWH = Byte.parseByte(s);
} else {
IAGWH = Byte.MIN_VALUE;
}
}

protected final void initIAGWH2(String s) {
if (!s.trim().isEmpty()) {
IAGWH2 = Byte.parseByte(s);
} else {
IAGWH2 = Byte.MIN_VALUE;
}
}

protected final void initIAGWH3(String s) {
if (!s.trim().isEmpty()) {
IAGWH3 = Byte.parseByte(s);
} else {
IAGWH3 = Byte.MIN_VALUE;
}
}

protected final void initIAGWM(String s) {
if (!s.trim().isEmpty()) {
IAGWM = Byte.parseByte(s);
} else {
IAGWM = Byte.MIN_VALUE;
}
}

protected final void initIAGWM2(String s) {
if (!s.trim().isEmpty()) {
IAGWM2 = Byte.parseByte(s);
} else {
IAGWM2 = Byte.MIN_VALUE;
}
}

protected final void initIAGWM3(String s) {
if (!s.trim().isEmpty()) {
IAGWM3 = Byte.parseByte(s);
} else {
IAGWM3 = Byte.MIN_VALUE;
}
}

protected final void initIAGWN(String s) {
if (!s.trim().isEmpty()) {
IAGWN = Byte.parseByte(s);
} else {
IAGWN = Byte.MIN_VALUE;
}
}

protected final void initIAGWN2(String s) {
if (!s.trim().isEmpty()) {
IAGWN2 = Byte.parseByte(s);
} else {
IAGWN2 = Byte.MIN_VALUE;
}
}

protected final void initIAGWN3(String s) {
if (!s.trim().isEmpty()) {
IAGWN3 = Byte.parseByte(s);
} else {
IAGWN3 = Byte.MIN_VALUE;
}
}

protected final void initIAGY(String s) {
if (!s.trim().isEmpty()) {
IAGY = Short.parseShort(s);
} else {
IAGY = Short.MIN_VALUE;
}
}

protected final void initIAGY2(String s) {
if (!s.trim().isEmpty()) {
IAGY2 = Short.parseShort(s);
} else {
IAGY2 = Short.MIN_VALUE;
}
}

protected final void initIAGY3(String s) {
if (!s.trim().isEmpty()) {
IAGY3 = Short.parseShort(s);
} else {
IAGY3 = Short.MIN_VALUE;
}
}

protected final void initIAHDBC(String s) {
if (!s.trim().isEmpty()) {
IAHDBC = Byte.parseByte(s);
} else {
IAHDBC = Byte.MIN_VALUE;
}
}

protected final void initIAHDN95(String s) {
if (!s.trim().isEmpty()) {
IAHDN95 = Byte.parseByte(s);
} else {
IAHDN95 = Byte.MIN_VALUE;
}
}

protected final void initIAHDN96(String s) {
if (!s.trim().isEmpty()) {
IAHDN96 = Byte.parseByte(s);
} else {
IAHDN96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDNAA(String s) {
if (!s.trim().isEmpty()) {
IAHDNAA = Byte.parseByte(s);
} else {
IAHDNAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDNCA(String s) {
if (!s.trim().isEmpty()) {
IAHDNCA = Byte.parseByte(s);
} else {
IAHDNCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDNDL(String s) {
if (!s.trim().isEmpty()) {
IAHDNDL = Byte.parseByte(s);
} else {
IAHDNDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDNES(String s) {
if (!s.trim().isEmpty()) {
IAHDNES = Byte.parseByte(s);
} else {
IAHDNES = Byte.MIN_VALUE;
}
}

protected final void initIAHDNIB(String s) {
if (!s.trim().isEmpty()) {
IAHDNIB = Byte.parseByte(s);
} else {
IAHDNIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDNII(String s) {
if (!s.trim().isEmpty()) {
IAHDNII = Byte.parseByte(s);
} else {
IAHDNII = Byte.MIN_VALUE;
}
}

protected final void initIAHDNM85(String s) {
if (!s.trim().isEmpty()) {
IAHDNM85 = Byte.parseByte(s);
} else {
IAHDNM85 = Byte.MIN_VALUE;
}
}

protected final void initIAHDNM86(String s) {
if (!s.trim().isEmpty()) {
IAHDNM86 = Byte.parseByte(s);
} else {
IAHDNM86 = Byte.MIN_VALUE;
}
}

protected final void initIAHDNM96(String s) {
if (!s.trim().isEmpty()) {
IAHDNM96 = Byte.parseByte(s);
} else {
IAHDNM96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDNMAA(String s) {
if (!s.trim().isEmpty()) {
IAHDNMAA = Byte.parseByte(s);
} else {
IAHDNMAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDNMCA(String s) {
if (!s.trim().isEmpty()) {
IAHDNMCA = Byte.parseByte(s);
} else {
IAHDNMCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDNMDL(String s) {
if (!s.trim().isEmpty()) {
IAHDNMDL = Byte.parseByte(s);
} else {
IAHDNMDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDNMES(String s) {
if (!s.trim().isEmpty()) {
IAHDNMES = Byte.parseByte(s);
} else {
IAHDNMES = Byte.MIN_VALUE;
}
}

protected final void initIAHDNMIB(String s) {
if (!s.trim().isEmpty()) {
IAHDNMIB = Byte.parseByte(s);
} else {
IAHDNMIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDNMII(String s) {
if (!s.trim().isEmpty()) {
IAHDNMII = Byte.parseByte(s);
} else {
IAHDNMII = Byte.MIN_VALUE;
}
}

protected final void initIAHDNMPI(String s) {
if (!s.trim().isEmpty()) {
IAHDNMPI = Byte.parseByte(s);
} else {
IAHDNMPI = Byte.MIN_VALUE;
}
}

protected final void initIAHDNMSD(String s) {
if (!s.trim().isEmpty()) {
IAHDNMSD = Byte.parseByte(s);
} else {
IAHDNMSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDNMSP(String s) {
if (!s.trim().isEmpty()) {
IAHDNMSP = Byte.parseByte(s);
} else {
IAHDNMSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDNMWD(String s) {
if (!s.trim().isEmpty()) {
IAHDNMWD = Byte.parseByte(s);
} else {
IAHDNMWD = Byte.MIN_VALUE;
}
}

protected final void initIAHDNPI(String s) {
if (!s.trim().isEmpty()) {
IAHDNPI = Byte.parseByte(s);
} else {
IAHDNPI = Byte.MIN_VALUE;
}
}

protected final void initIAHDNSD(String s) {
if (!s.trim().isEmpty()) {
IAHDNSD = Byte.parseByte(s);
} else {
IAHDNSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDNSP(String s) {
if (!s.trim().isEmpty()) {
IAHDNSP = Byte.parseByte(s);
} else {
IAHDNSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDNWD(String s) {
if (!s.trim().isEmpty()) {
IAHDNWD = Byte.parseByte(s);
} else {
IAHDNWD = Byte.MIN_VALUE;
}
}

protected final void initIAHDPN95(String s) {
if (!s.trim().isEmpty()) {
IAHDPN95 = Byte.parseByte(s);
} else {
IAHDPN95 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPN96(String s) {
if (!s.trim().isEmpty()) {
IAHDPN96 = Byte.parseByte(s);
} else {
IAHDPN96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNAA(String s) {
if (!s.trim().isEmpty()) {
IAHDPNAA = Byte.parseByte(s);
} else {
IAHDPNAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNCA(String s) {
if (!s.trim().isEmpty()) {
IAHDPNCA = Byte.parseByte(s);
} else {
IAHDPNCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNDL(String s) {
if (!s.trim().isEmpty()) {
IAHDPNDL = Byte.parseByte(s);
} else {
IAHDPNDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNES(String s) {
if (!s.trim().isEmpty()) {
IAHDPNES = Byte.parseByte(s);
} else {
IAHDPNES = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNIB(String s) {
if (!s.trim().isEmpty()) {
IAHDPNIB = Byte.parseByte(s);
} else {
IAHDPNIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNII(String s) {
if (!s.trim().isEmpty()) {
IAHDPNII = Byte.parseByte(s);
} else {
IAHDPNII = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNM85(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAHDPNM85 = false;
} else {
IAHDPNM85 = true;
}
}
}

protected final void initIAHDPNM86(String s) {
if (!s.trim().isEmpty()) {
IAHDPNM86 = Byte.parseByte(s);
} else {
IAHDPNM86 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNM96(String s) {
if (!s.trim().isEmpty()) {
IAHDPNM96 = Byte.parseByte(s);
} else {
IAHDPNM96 = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNMAA(String s) {
if (!s.trim().isEmpty()) {
IAHDPNMAA = Byte.parseByte(s);
} else {
IAHDPNMAA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNMCA(String s) {
if (!s.trim().isEmpty()) {
IAHDPNMCA = Byte.parseByte(s);
} else {
IAHDPNMCA = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNMDL(String s) {
if (!s.trim().isEmpty()) {
IAHDPNMDL = Byte.parseByte(s);
} else {
IAHDPNMDL = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNMES(String s) {
if (!s.trim().isEmpty()) {
IAHDPNMES = Byte.parseByte(s);
} else {
IAHDPNMES = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNMIB(String s) {
if (!s.trim().isEmpty()) {
IAHDPNMIB = Byte.parseByte(s);
} else {
IAHDPNMIB = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNMII(String s) {
if (!s.trim().isEmpty()) {
IAHDPNMII = Byte.parseByte(s);
} else {
IAHDPNMII = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNMPI(String s) {
if (!s.trim().isEmpty()) {
IAHDPNMPI = Byte.parseByte(s);
} else {
IAHDPNMPI = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNMSD(String s) {
if (!s.trim().isEmpty()) {
IAHDPNMSD = Byte.parseByte(s);
} else {
IAHDPNMSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNMSP(String s) {
if (!s.trim().isEmpty()) {
IAHDPNMSP = Byte.parseByte(s);
} else {
IAHDPNMSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNMWD(String s) {
if (!s.trim().isEmpty()) {
IAHDPNMWD = Byte.parseByte(s);
} else {
IAHDPNMWD = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNPI(String s) {
if (!s.trim().isEmpty()) {
IAHDPNPI = Byte.parseByte(s);
} else {
IAHDPNPI = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNSD(String s) {
if (!s.trim().isEmpty()) {
IAHDPNSD = Byte.parseByte(s);
} else {
IAHDPNSD = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNSP(String s) {
if (!s.trim().isEmpty()) {
IAHDPNSP = Byte.parseByte(s);
} else {
IAHDPNSP = Byte.MIN_VALUE;
}
}

protected final void initIAHDPNWD(String s) {
if (!s.trim().isEmpty()) {
IAHDPNWD = Byte.parseByte(s);
} else {
IAHDPNWD = Byte.MIN_VALUE;
}
}

protected final void initIAHHINC(String s) {
if (!s.trim().isEmpty()) {
IAHHINC = Byte.parseByte(s);
} else {
IAHHINC = Byte.MIN_VALUE;
}
}

protected final void initIAHOMEE(String s) {
if (!s.trim().isEmpty()) {
IAHOMEE = Byte.parseByte(s);
} else {
IAHOMEE = Byte.MIN_VALUE;
}
}

protected final void initIAHOMEL(String s) {
if (!s.trim().isEmpty()) {
IAHOMEL = Integer.parseInt(s);
} else {
IAHOMEL = Integer.MIN_VALUE;
}
}

protected final void initIAHOMER(String s) {
if (!s.trim().isEmpty()) {
IAHOMER = Byte.parseByte(s);
} else {
IAHOMER = Byte.MIN_VALUE;
}
}

protected final void initIAHOMEU(String s) {
if (!s.trim().isEmpty()) {
IAHOMEU = Integer.parseInt(s);
} else {
IAHOMEU = Integer.MIN_VALUE;
}
}

protected final void initIAI(String s) {
if (!s.trim().isEmpty()) {
IAI = Byte.parseByte(s);
} else {
IAI = Byte.MIN_VALUE;
}
}

protected final void initIAIAG(String s) {
if (!s.trim().isEmpty()) {
IAIAG = Byte.parseByte(s);
} else {
IAIAG = Byte.MIN_VALUE;
}
}

protected final void initIAIAG2(String s) {
if (!s.trim().isEmpty()) {
IAIAG2 = Byte.parseByte(s);
} else {
IAIAG2 = Byte.MIN_VALUE;
}
}

protected final void initIAIAG3(String s) {
if (!s.trim().isEmpty()) {
IAIAG3 = Byte.parseByte(s);
} else {
IAIAG3 = Byte.MIN_VALUE;
}
}

protected final void initIAIJ(String s) {
if (!s.trim().isEmpty()) {
IAIJ = Byte.parseByte(s);
} else {
IAIJ = Byte.MIN_VALUE;
}
}

protected final void initIAIJ2(String s) {
if (!s.trim().isEmpty()) {
IAIJ2 = Byte.parseByte(s);
} else {
IAIJ2 = Byte.MIN_VALUE;
}
}

protected final void initIAIJ3(String s) {
if (!s.trim().isEmpty()) {
IAIJ3 = Byte.parseByte(s);
} else {
IAIJ3 = Byte.MIN_VALUE;
}
}

protected final void initIAIN(String s) {
if (!s.trim().isEmpty()) {
IAIN = Byte.parseByte(s);
} else {
IAIN = Byte.MIN_VALUE;
}
}

protected final void initIAIRAE(String s) {
if (!s.trim().isEmpty()) {
IAIRAE = Byte.parseByte(s);
} else {
IAIRAE = Byte.MIN_VALUE;
}
}

protected final void initIAIRAL(String s) {
if (!s.trim().isEmpty()) {
IAIRAL = Integer.parseInt(s);
} else {
IAIRAL = Integer.MIN_VALUE;
}
}

protected final void initIAIRAR(String s) {
if (!s.trim().isEmpty()) {
IAIRAR = Byte.parseByte(s);
} else {
IAIRAR = Byte.MIN_VALUE;
}
}

protected final void initIAIRAU(String s) {
if (!s.trim().isEmpty()) {
IAIRAU = Integer.parseInt(s);
} else {
IAIRAU = Integer.MIN_VALUE;
}
}

protected final void initIAISACAS(String s) {
if (!s.trim().isEmpty()) {
IAISACAS = Byte.parseByte(s);
} else {
IAISACAS = Byte.MIN_VALUE;
}
}

protected final void initIAISADE(String s) {
if (!s.trim().isEmpty()) {
IAISADE = Byte.parseByte(s);
} else {
IAISADE = Byte.MIN_VALUE;
}
}

protected final void initIAISADL(String s) {
if (!s.trim().isEmpty()) {
IAISADL = Short.parseShort(s);
} else {
IAISADL = Short.MIN_VALUE;
}
}

protected final void initIAISADR(String s) {
if (!s.trim().isEmpty()) {
IAISADR = Byte.parseByte(s);
} else {
IAISADR = Byte.MIN_VALUE;
}
}

protected final void initIAISADU(String s) {
if (!s.trim().isEmpty()) {
IAISADU = Short.parseShort(s);
} else {
IAISADU = Short.MIN_VALUE;
}
}

protected final void initIAISALI(String s) {
if (!s.trim().isEmpty()) {
IAISALI = Byte.parseByte(s);
} else {
IAISALI = Byte.MIN_VALUE;
}
}

protected final void initIAISASHA(String s) {
if (!s.trim().isEmpty()) {
IAISASHA = Byte.parseByte(s);
} else {
IAISASHA = Byte.MIN_VALUE;
}
}

protected final void initIAIV(String s) {
if (!s.trim().isEmpty()) {
IAIV = Integer.parseInt(s);
} else {
IAIV = Integer.MIN_VALUE;
}
}

protected final void initIAIV2(String s) {
if (!s.trim().isEmpty()) {
IAIV2 = Integer.parseInt(s);
} else {
IAIV2 = Integer.MIN_VALUE;
}
}

protected final void initIAIV2E(String s) {
if (!s.trim().isEmpty()) {
IAIV2E = Byte.parseByte(s);
} else {
IAIV2E = Byte.MIN_VALUE;
}
}

protected final void initIAIV2L(String s) {
if (!s.trim().isEmpty()) {
IAIV2L = Integer.parseInt(s);
} else {
IAIV2L = Integer.MIN_VALUE;
}
}

protected final void initIAIV2R(String s) {
if (!s.trim().isEmpty()) {
IAIV2R = Byte.parseByte(s);
} else {
IAIV2R = Byte.MIN_VALUE;
}
}

protected final void initIAIV2U(String s) {
if (!s.trim().isEmpty()) {
IAIV2U = Integer.parseInt(s);
} else {
IAIV2U = Integer.MIN_VALUE;
}
}

protected final void initIAIV3(String s) {
if (!s.trim().isEmpty()) {
IAIV3 = Integer.parseInt(s);
} else {
IAIV3 = Integer.MIN_VALUE;
}
}

protected final void initIAIV3E(String s) {
if (!s.trim().isEmpty()) {
IAIV3E = Byte.parseByte(s);
} else {
IAIV3E = Byte.MIN_VALUE;
}
}

protected final void initIAIV3L(String s) {
if (!s.trim().isEmpty()) {
IAIV3L = Integer.parseInt(s);
} else {
IAIV3L = Integer.MIN_VALUE;
}
}

protected final void initIAIV3R(String s) {
if (!s.trim().isEmpty()) {
IAIV3R = Byte.parseByte(s);
} else {
IAIV3R = Byte.MIN_VALUE;
}
}

protected final void initIAIV3U(String s) {
if (!s.trim().isEmpty()) {
IAIV3U = Integer.parseInt(s);
} else {
IAIV3U = Integer.MIN_VALUE;
}
}

protected final void initIAIVE(String s) {
if (!s.trim().isEmpty()) {
IAIVE = Byte.parseByte(s);
} else {
IAIVE = Byte.MIN_VALUE;
}
}

protected final void initIAIVL(String s) {
if (!s.trim().isEmpty()) {
IAIVL = Integer.parseInt(s);
} else {
IAIVL = Integer.MIN_VALUE;
}
}

protected final void initIAIVR(String s) {
if (!s.trim().isEmpty()) {
IAIVR = Byte.parseByte(s);
} else {
IAIVR = Byte.MIN_VALUE;
}
}

protected final void initIAIVU(String s) {
if (!s.trim().isEmpty()) {
IAIVU = Integer.parseInt(s);
} else {
IAIVU = Integer.MIN_VALUE;
}
}

protected final void initIAIWH(String s) {
if (!s.trim().isEmpty()) {
IAIWH = Byte.parseByte(s);
} else {
IAIWH = Byte.MIN_VALUE;
}
}

protected final void initIAIWH2(String s) {
if (!s.trim().isEmpty()) {
IAIWH2 = Byte.parseByte(s);
} else {
IAIWH2 = Byte.MIN_VALUE;
}
}

protected final void initIAIWH3(String s) {
if (!s.trim().isEmpty()) {
IAIWH3 = Byte.parseByte(s);
} else {
IAIWH3 = Byte.MIN_VALUE;
}
}

protected final void initIAIWM(String s) {
if (!s.trim().isEmpty()) {
IAIWM = Byte.parseByte(s);
} else {
IAIWM = Byte.MIN_VALUE;
}
}

protected final void initIAIWM2(String s) {
if (!s.trim().isEmpty()) {
IAIWM2 = Byte.parseByte(s);
} else {
IAIWM2 = Byte.MIN_VALUE;
}
}

protected final void initIAIWM3(String s) {
if (!s.trim().isEmpty()) {
IAIWM3 = Byte.parseByte(s);
} else {
IAIWM3 = Byte.MIN_VALUE;
}
}

protected final void initIAIWN(String s) {
if (!s.trim().isEmpty()) {
IAIWN = Byte.parseByte(s);
} else {
IAIWN = Byte.MIN_VALUE;
}
}

protected final void initIAIWN2(String s) {
if (!s.trim().isEmpty()) {
IAIWN2 = Byte.parseByte(s);
} else {
IAIWN2 = Byte.MIN_VALUE;
}
}

protected final void initIAIWN3(String s) {
if (!s.trim().isEmpty()) {
IAIWN3 = Byte.parseByte(s);
} else {
IAIWN3 = Byte.MIN_VALUE;
}
}

protected final void initIAIY(String s) {
if (!s.trim().isEmpty()) {
IAIY = Short.parseShort(s);
} else {
IAIY = Short.MIN_VALUE;
}
}

protected final void initIAIY2(String s) {
if (!s.trim().isEmpty()) {
IAIY2 = Short.parseShort(s);
} else {
IAIY2 = Short.MIN_VALUE;
}
}

protected final void initIAIY3(String s) {
if (!s.trim().isEmpty()) {
IAIY3 = Short.parseShort(s);
} else {
IAIY3 = Short.MIN_VALUE;
}
}

protected final void initIALIPAE(String s) {
if (!s.trim().isEmpty()) {
IALIPAE = Byte.parseByte(s);
} else {
IALIPAE = Byte.MIN_VALUE;
}
}

protected final void initIALIPAL(String s) {
if (!s.trim().isEmpty()) {
IALIPAL = Integer.parseInt(s);
} else {
IALIPAL = Integer.MIN_VALUE;
}
}

protected final void initIALIPAR(String s) {
if (!s.trim().isEmpty()) {
IALIPAR = Byte.parseByte(s);
} else {
IALIPAR = Byte.MIN_VALUE;
}
}

protected final void initIALIPAU(String s) {
if (!s.trim().isEmpty()) {
IALIPAU = Integer.parseInt(s);
} else {
IALIPAU = Integer.MIN_VALUE;
}
}

protected final void initIALISAE(String s) {
if (!s.trim().isEmpty()) {
IALISAE = Byte.parseByte(s);
} else {
IALISAE = Byte.MIN_VALUE;
}
}

protected final void initIALISAL(String s) {
if (!s.trim().isEmpty()) {
IALISAL = Short.parseShort(s);
} else {
IALISAL = Short.MIN_VALUE;
}
}

protected final void initIALISAR(String s) {
if (!s.trim().isEmpty()) {
IALISAR = Byte.parseByte(s);
} else {
IALISAR = Byte.MIN_VALUE;
}
}

protected final void initIALISAU(String s) {
if (!s.trim().isEmpty()) {
IALISAU = Short.parseShort(s);
} else {
IALISAU = Short.MIN_VALUE;
}
}

protected final void initIALIYAE(String s) {
if (!s.trim().isEmpty()) {
IALIYAE = Byte.parseByte(s);
} else {
IALIYAE = Byte.MIN_VALUE;
}
}

protected final void initIALIYAL(String s) {
if (!s.trim().isEmpty()) {
IALIYAL = Integer.parseInt(s);
} else {
IALIYAL = Integer.MIN_VALUE;
}
}

protected final void initIALIYAR(String s) {
if (!s.trim().isEmpty()) {
IALIYAR = Byte.parseByte(s);
} else {
IALIYAR = Byte.MIN_VALUE;
}
}

protected final void initIALIYAU(String s) {
if (!s.trim().isEmpty()) {
IALIYAU = Integer.parseInt(s);
} else {
IALIYAU = Integer.MIN_VALUE;
}
}

protected final void initIALOAME(String s) {
if (!s.trim().isEmpty()) {
IALOAME = Byte.parseByte(s);
} else {
IALOAME = Byte.MIN_VALUE;
}
}

protected final void initIALOAML(String s) {
if (!s.trim().isEmpty()) {
IALOAML = Short.parseShort(s);
} else {
IALOAML = Short.MIN_VALUE;
}
}

protected final void initIALOAMR(String s) {
if (!s.trim().isEmpty()) {
IALOAMR = Byte.parseByte(s);
} else {
IALOAMR = Byte.MIN_VALUE;
}
}

protected final void initIALOAMU(String s) {
if (!s.trim().isEmpty()) {
IALOAMU = Short.parseShort(s);
} else {
IALOAMU = Short.MIN_VALUE;
}
}

protected final void initIALOAN96(String s) {
if (!s.trim().isEmpty()) {
IALOAN96 = Byte.parseByte(s);
} else {
IALOAN96 = Byte.MIN_VALUE;
}
}

protected final void initIALOANHP(String s) {
if (!s.trim().isEmpty()) {
IALOANHP = Byte.parseByte(s);
} else {
IALOANHP = Byte.MIN_VALUE;
}
}

protected final void initIALOANML(String s) {
if (!s.trim().isEmpty()) {
IALOANML = Byte.parseByte(s);
} else {
IALOANML = Byte.MIN_VALUE;
}
}

protected final void initIALOANMO(String s) {
if (!s.trim().isEmpty()) {
IALOANMO = Byte.parseByte(s);
} else {
IALOANMO = Byte.MIN_VALUE;
}
}

protected final void initIALOANOD(String s) {
if (!s.trim().isEmpty()) {
IALOANOD = Byte.parseByte(s);
} else {
IALOANOD = Byte.MIN_VALUE;
}
}

protected final void initIALOANPL(String s) {
if (!s.trim().isEmpty()) {
IALOANPL = Byte.parseByte(s);
} else {
IALOANPL = Byte.MIN_VALUE;
}
}

protected final void initIALOANSF(String s) {
if (!s.trim().isEmpty()) {
IALOANSF = Byte.parseByte(s);
} else {
IALOANSF = Byte.MIN_VALUE;
}
}

protected final void initIALREFE(String s) {
if (!s.trim().isEmpty()) {
IALREFE = Byte.parseByte(s);
} else {
IALREFE = Byte.MIN_VALUE;
}
}

protected final void initIALREFL(String s) {
if (!s.trim().isEmpty()) {
IALREFL = Byte.parseByte(s);
} else {
IALREFL = Byte.MIN_VALUE;
}
}

protected final void initIALREFR(String s) {
if (!s.trim().isEmpty()) {
IALREFR = Byte.parseByte(s);
} else {
IALREFR = Byte.MIN_VALUE;
}
}

protected final void initIALREFU(String s) {
if (!s.trim().isEmpty()) {
IALREFU = Byte.parseByte(s);
} else {
IALREFU = Byte.MIN_VALUE;
}
}

protected final void initIALREME(String s) {
if (!s.trim().isEmpty()) {
IALREME = Byte.parseByte(s);
} else {
IALREME = Byte.MIN_VALUE;
}
}

protected final void initIALREML(String s) {
if (!s.trim().isEmpty()) {
IALREML = Short.parseShort(s);
} else {
IALREML = Short.MIN_VALUE;
}
}

protected final void initIALREMR(String s) {
if (!s.trim().isEmpty()) {
IALREMR = Byte.parseByte(s);
} else {
IALREMR = Byte.MIN_VALUE;
}
}

protected final void initIALREMU(String s) {
if (!s.trim().isEmpty()) {
IALREMU = Short.parseShort(s);
} else {
IALREMU = Short.MIN_VALUE;
}
}

protected final void initIALREOE(String s) {
if (!s.trim().isEmpty()) {
IALREOE = Byte.parseByte(s);
} else {
IALREOE = Byte.MIN_VALUE;
}
}

protected final void initIALREOL(String s) {
if (!s.trim().isEmpty()) {
IALREOL = Short.parseShort(s);
} else {
IALREOL = Short.MIN_VALUE;
}
}

protected final void initIALREOR(String s) {
if (!s.trim().isEmpty()) {
IALREOR = Byte.parseByte(s);
} else {
IALREOR = Byte.MIN_VALUE;
}
}

protected final void initIALREOU(String s) {
if (!s.trim().isEmpty()) {
IALREOU = Short.parseShort(s);
} else {
IALREOU = Short.MIN_VALUE;
}
}

protected final void initIALREWE(String s) {
if (!s.trim().isEmpty()) {
IALREWE = Byte.parseByte(s);
} else {
IALREWE = Byte.MIN_VALUE;
}
}

protected final void initIALREWL(String s) {
if (!s.trim().isEmpty()) {
IALREWL = Short.parseShort(s);
} else {
IALREWL = Short.MIN_VALUE;
}
}

protected final void initIALREWR(String s) {
if (!s.trim().isEmpty()) {
IALREWR = Byte.parseByte(s);
} else {
IALREWR = Byte.MIN_VALUE;
}
}

protected final void initIALREWU(String s) {
if (!s.trim().isEmpty()) {
IALREWU = Byte.parseByte(s);
} else {
IALREWU = Byte.MIN_VALUE;
}
}

protected final void initIALREYE(String s) {
if (!s.trim().isEmpty()) {
IALREYE = Byte.parseByte(s);
} else {
IALREYE = Byte.MIN_VALUE;
}
}

protected final void initIALREYL(String s) {
if (!s.trim().isEmpty()) {
IALREYL = Short.parseShort(s);
} else {
IALREYL = Short.MIN_VALUE;
}
}

protected final void initIALREYR(String s) {
if (!s.trim().isEmpty()) {
IALREYR = Byte.parseByte(s);
} else {
IALREYR = Byte.MIN_VALUE;
}
}

protected final void initIALREYU(String s) {
if (!s.trim().isEmpty()) {
IALREYU = Short.parseShort(s);
} else {
IALREYU = Short.MIN_VALUE;
}
}

protected final void initIAMRP2(String s) {
if (!s.trim().isEmpty()) {
IAMRP2 = Byte.parseByte(s);
} else {
IAMRP2 = Byte.MIN_VALUE;
}
}

protected final void initIAMRP3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAMRP3 = false;
} else {
IAMRP3 = true;
}
}
}

protected final void initIAMRP4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAMRP4 = false;
} else {
IAMRP4 = true;
}
}
}

protected final void initIANPBPE(String s) {
if (!s.trim().isEmpty()) {
IANPBPE = Byte.parseByte(s);
} else {
IANPBPE = Byte.MIN_VALUE;
}
}

protected final void initIANPBPL(String s) {
if (!s.trim().isEmpty()) {
IANPBPL = Short.parseShort(s);
} else {
IANPBPL = Short.MIN_VALUE;
}
}

protected final void initIANPBPR(String s) {
if (!s.trim().isEmpty()) {
IANPBPR = Byte.parseByte(s);
} else {
IANPBPR = Byte.MIN_VALUE;
}
}

protected final void initIANPBPU(String s) {
if (!s.trim().isEmpty()) {
IANPBPU = Short.parseShort(s);
} else {
IANPBPU = Short.MIN_VALUE;
}
}

protected final void initIAOASAE(String s) {
if (!s.trim().isEmpty()) {
IAOASAE = Byte.parseByte(s);
} else {
IAOASAE = Byte.MIN_VALUE;
}
}

protected final void initIAOASAL(String s) {
if (!s.trim().isEmpty()) {
IAOASAL = Integer.parseInt(s);
} else {
IAOASAL = Integer.MIN_VALUE;
}
}

protected final void initIAOASAR(String s) {
if (!s.trim().isEmpty()) {
IAOASAR = Byte.parseByte(s);
} else {
IAOASAR = Byte.MIN_VALUE;
}
}

protected final void initIAOASAU(String s) {
if (!s.trim().isEmpty()) {
IAOASAU = Integer.parseInt(s);
} else {
IAOASAU = Integer.MIN_VALUE;
}
}

protected final void initIAOMME(String s) {
if (!s.trim().isEmpty()) {
IAOMME = Byte.parseByte(s);
} else {
IAOMME = Byte.MIN_VALUE;
}
}

protected final void initIAOMML(String s) {
if (!s.trim().isEmpty()) {
IAOMML = Integer.parseInt(s);
} else {
IAOMML = Integer.MIN_VALUE;
}
}

protected final void initIAOMMR(String s) {
if (!s.trim().isEmpty()) {
IAOMMR = Byte.parseByte(s);
} else {
IAOMMR = Byte.MIN_VALUE;
}
}

protected final void initIAOMMU(String s) {
if (!s.trim().isEmpty()) {
IAOMMU = Integer.parseInt(s);
} else {
IAOMMU = Integer.MIN_VALUE;
}
}

protected final void initIAOTHP3(String s) {
if (!s.trim().isEmpty()) {
IAOTHP3 = Byte.parseByte(s);
} else {
IAOTHP3 = Byte.MIN_VALUE;
}
}

protected final void initIAOTHP4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAOTHP4 = false;
} else {
IAOTHP4 = true;
}
}
}

protected final void initIAOWEME(String s) {
if (!s.trim().isEmpty()) {
IAOWEME = Byte.parseByte(s);
} else {
IAOWEME = Byte.MIN_VALUE;
}
}

protected final void initIAOWEML(String s) {
if (!s.trim().isEmpty()) {
IAOWEML = Short.parseShort(s);
} else {
IAOWEML = Short.MIN_VALUE;
}
}

protected final void initIAOWEMR(String s) {
if (!s.trim().isEmpty()) {
IAOWEMR = Byte.parseByte(s);
} else {
IAOWEMR = Byte.MIN_VALUE;
}
}

protected final void initIAOWEMU(String s) {
if (!s.trim().isEmpty()) {
IAOWEMU = Short.parseShort(s);
} else {
IAOWEMU = Short.MIN_VALUE;
}
}

protected final void initIAP39(String s) {
if (!s.trim().isEmpty()) {
IAP39 = Byte.parseByte(s);
} else {
IAP39 = Byte.MIN_VALUE;
}
}

protected final void initIAP40(String s) {
if (!s.trim().isEmpty()) {
IAP40 = Byte.parseByte(s);
} else {
IAP40 = Byte.MIN_VALUE;
}
}

protected final void initIAP41(String s) {
if (!s.trim().isEmpty()) {
IAP41 = Byte.parseByte(s);
} else {
IAP41 = Byte.MIN_VALUE;
}
}

protected final void initIAP42(String s) {
if (!s.trim().isEmpty()) {
IAP42 = Byte.parseByte(s);
} else {
IAP42 = Byte.MIN_VALUE;
}
}

protected final void initIAPA3FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3FE = false;
} else {
IAPA3FE = true;
}
}
}

protected final void initIAPA3FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3FL = false;
} else {
IAPA3FL = true;
}
}
}

protected final void initIAPA3FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3FR = false;
} else {
IAPA3FR = true;
}
}
}

protected final void initIAPA3FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3FU = false;
} else {
IAPA3FU = true;
}
}
}

protected final void initIAPA3ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3ME = false;
} else {
IAPA3ME = true;
}
}
}

protected final void initIAPA3ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3ML = false;
} else {
IAPA3ML = true;
}
}
}

protected final void initIAPA3MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3MR = false;
} else {
IAPA3MR = true;
}
}
}

protected final void initIAPA3MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3MU = false;
} else {
IAPA3MU = true;
}
}
}

protected final void initIAPA3OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3OE = false;
} else {
IAPA3OE = true;
}
}
}

protected final void initIAPA3OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3OL = false;
} else {
IAPA3OL = true;
}
}
}

protected final void initIAPA3OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3OR = false;
} else {
IAPA3OR = true;
}
}
}

protected final void initIAPA3OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3OU = false;
} else {
IAPA3OU = true;
}
}
}

protected final void initIAPA3WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3WE = false;
} else {
IAPA3WE = true;
}
}
}

protected final void initIAPA3WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3WL = false;
} else {
IAPA3WL = true;
}
}
}

protected final void initIAPA3WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3WR = false;
} else {
IAPA3WR = true;
}
}
}

protected final void initIAPA3WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3WU = false;
} else {
IAPA3WU = true;
}
}
}

protected final void initIAPA3YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3YE = false;
} else {
IAPA3YE = true;
}
}
}

protected final void initIAPA3YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3YL = false;
} else {
IAPA3YL = true;
}
}
}

protected final void initIAPA3YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3YR = false;
} else {
IAPA3YR = true;
}
}
}

protected final void initIAPA3YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA3YU = false;
} else {
IAPA3YU = true;
}
}
}

protected final void initIAPA4FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4FE = false;
} else {
IAPA4FE = true;
}
}
}

protected final void initIAPA4FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4FL = false;
} else {
IAPA4FL = true;
}
}
}

protected final void initIAPA4FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4FR = false;
} else {
IAPA4FR = true;
}
}
}

protected final void initIAPA4FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4FU = false;
} else {
IAPA4FU = true;
}
}
}

protected final void initIAPA4ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4ME = false;
} else {
IAPA4ME = true;
}
}
}

protected final void initIAPA4ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4ML = false;
} else {
IAPA4ML = true;
}
}
}

protected final void initIAPA4MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4MR = false;
} else {
IAPA4MR = true;
}
}
}

protected final void initIAPA4MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4MU = false;
} else {
IAPA4MU = true;
}
}
}

protected final void initIAPA4OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4OE = false;
} else {
IAPA4OE = true;
}
}
}

protected final void initIAPA4OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4OL = false;
} else {
IAPA4OL = true;
}
}
}

protected final void initIAPA4OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4OR = false;
} else {
IAPA4OR = true;
}
}
}

protected final void initIAPA4OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4OU = false;
} else {
IAPA4OU = true;
}
}
}

protected final void initIAPA4WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4WE = false;
} else {
IAPA4WE = true;
}
}
}

protected final void initIAPA4WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4WL = false;
} else {
IAPA4WL = true;
}
}
}

protected final void initIAPA4WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4WR = false;
} else {
IAPA4WR = true;
}
}
}

protected final void initIAPA4WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4WU = false;
} else {
IAPA4WU = true;
}
}
}

protected final void initIAPA4YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4YE = false;
} else {
IAPA4YE = true;
}
}
}

protected final void initIAPA4YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4YL = false;
} else {
IAPA4YL = true;
}
}
}

protected final void initIAPA4YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4YR = false;
} else {
IAPA4YR = true;
}
}
}

protected final void initIAPA4YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA4YU = false;
} else {
IAPA4YU = true;
}
}
}

protected final void initIAPA5FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5FE = false;
} else {
IAPA5FE = true;
}
}
}

protected final void initIAPA5FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5FL = false;
} else {
IAPA5FL = true;
}
}
}

protected final void initIAPA5FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5FR = false;
} else {
IAPA5FR = true;
}
}
}

protected final void initIAPA5FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5FU = false;
} else {
IAPA5FU = true;
}
}
}

protected final void initIAPA5ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5ME = false;
} else {
IAPA5ME = true;
}
}
}

protected final void initIAPA5ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5ML = false;
} else {
IAPA5ML = true;
}
}
}

protected final void initIAPA5MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5MR = false;
} else {
IAPA5MR = true;
}
}
}

protected final void initIAPA5MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5MU = false;
} else {
IAPA5MU = true;
}
}
}

protected final void initIAPA5OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5OE = false;
} else {
IAPA5OE = true;
}
}
}

protected final void initIAPA5OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5OL = false;
} else {
IAPA5OL = true;
}
}
}

protected final void initIAPA5OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5OR = false;
} else {
IAPA5OR = true;
}
}
}

protected final void initIAPA5OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5OU = false;
} else {
IAPA5OU = true;
}
}
}

protected final void initIAPA5WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5WE = false;
} else {
IAPA5WE = true;
}
}
}

protected final void initIAPA5WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5WL = false;
} else {
IAPA5WL = true;
}
}
}

protected final void initIAPA5WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5WR = false;
} else {
IAPA5WR = true;
}
}
}

protected final void initIAPA5WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5WU = false;
} else {
IAPA5WU = true;
}
}
}

protected final void initIAPA5YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5YE = false;
} else {
IAPA5YE = true;
}
}
}

protected final void initIAPA5YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5YL = false;
} else {
IAPA5YL = true;
}
}
}

protected final void initIAPA5YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5YR = false;
} else {
IAPA5YR = true;
}
}
}

protected final void initIAPA5YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPA5YU = false;
} else {
IAPA5YU = true;
}
}
}

protected final void initIAPAM3(String s) {
if (!s.trim().isEmpty()) {
IAPAM3 = Byte.parseByte(s);
} else {
IAPAM3 = Byte.MIN_VALUE;
}
}

protected final void initIAPAM4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPAM4 = false;
} else {
IAPAM4 = true;
}
}
}

protected final void initIAPAM5(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPAM5 = false;
} else {
IAPAM5 = true;
}
}
}

protected final void initIAPASK(String s) {
if (!s.trim().isEmpty()) {
IAPASK = Byte.parseByte(s);
} else {
IAPASK = Byte.MIN_VALUE;
}
}

protected final void initIAPAY(String s) {
if (!s.trim().isEmpty()) {
IAPAY = Byte.parseByte(s);
} else {
IAPAY = Byte.MIN_VALUE;
}
}

protected final void initIAPAY2(String s) {
if (!s.trim().isEmpty()) {
IAPAY2 = Byte.parseByte(s);
} else {
IAPAY2 = Byte.MIN_VALUE;
}
}

protected final void initIAPAY3(String s) {
if (!s.trim().isEmpty()) {
IAPAY3 = Byte.parseByte(s);
} else {
IAPAY3 = Byte.MIN_VALUE;
}
}

protected final void initIAPAY4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPAY4 = false;
} else {
IAPAY4 = true;
}
}
}

protected final void initIAPAYR(String s) {
if (!s.trim().isEmpty()) {
IAPAYR = Byte.parseByte(s);
} else {
IAPAYR = Byte.MIN_VALUE;
}
}

protected final void initIAPAYR2(String s) {
if (!s.trim().isEmpty()) {
IAPAYR2 = Byte.parseByte(s);
} else {
IAPAYR2 = Byte.MIN_VALUE;
}
}

protected final void initIAPAYR3(String s) {
if (!s.trim().isEmpty()) {
IAPAYR3 = Byte.parseByte(s);
} else {
IAPAYR3 = Byte.MIN_VALUE;
}
}

protected final void initIAPAYR4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPAYR4 = false;
} else {
IAPAYR4 = true;
}
}
}

protected final void initIAPF2(String s) {
if (!s.trim().isEmpty()) {
IAPF2 = Byte.parseByte(s);
} else {
IAPF2 = Byte.MIN_VALUE;
}
}

protected final void initIAPF3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPF3 = false;
} else {
IAPF3 = true;
}
}
}

protected final void initIAPF4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPF4 = false;
} else {
IAPF4 = true;
}
}
}

protected final void initIAPK95(String s) {
if (!s.trim().isEmpty()) {
IAPK95 = Byte.parseByte(s);
} else {
IAPK95 = Byte.MIN_VALUE;
}
}

protected final void initIAPK96(String s) {
if (!s.trim().isEmpty()) {
IAPK96 = Byte.parseByte(s);
} else {
IAPK96 = Byte.MIN_VALUE;
}
}

protected final void initIAPKGW(String s) {
if (!s.trim().isEmpty()) {
IAPKGW = Byte.parseByte(s);
} else {
IAPKGW = Byte.MIN_VALUE;
}
}

protected final void initIAPKIOB(String s) {
if (!s.trim().isEmpty()) {
IAPKIOB = Byte.parseByte(s);
} else {
IAPKIOB = Byte.MIN_VALUE;
}
}

protected final void initIAPKLI(String s) {
if (!s.trim().isEmpty()) {
IAPKLI = Byte.parseByte(s);
} else {
IAPKLI = Byte.MIN_VALUE;
}
}

protected final void initIAPKM1E(String s) {
if (!s.trim().isEmpty()) {
IAPKM1E = Byte.parseByte(s);
} else {
IAPKM1E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM1L(String s) {
if (!s.trim().isEmpty()) {
IAPKM1L = Integer.parseInt(s);
} else {
IAPKM1L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM1R(String s) {
if (!s.trim().isEmpty()) {
IAPKM1R = Byte.parseByte(s);
} else {
IAPKM1R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM1U(String s) {
if (!s.trim().isEmpty()) {
IAPKM1U = Integer.parseInt(s);
} else {
IAPKM1U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM2E(String s) {
if (!s.trim().isEmpty()) {
IAPKM2E = Byte.parseByte(s);
} else {
IAPKM2E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM2L(String s) {
if (!s.trim().isEmpty()) {
IAPKM2L = Integer.parseInt(s);
} else {
IAPKM2L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM2R(String s) {
if (!s.trim().isEmpty()) {
IAPKM2R = Byte.parseByte(s);
} else {
IAPKM2R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM2U(String s) {
if (!s.trim().isEmpty()) {
IAPKM2U = Integer.parseInt(s);
} else {
IAPKM2U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM3E(String s) {
if (!s.trim().isEmpty()) {
IAPKM3E = Byte.parseByte(s);
} else {
IAPKM3E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM3L(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPKM3L = false;
} else {
IAPKM3L = true;
}
}
}

protected final void initIAPKM3R(String s) {
if (!s.trim().isEmpty()) {
IAPKM3R = Byte.parseByte(s);
} else {
IAPKM3R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM3U(String s) {
if (!s.trim().isEmpty()) {
IAPKM3U = Short.parseShort(s);
} else {
IAPKM3U = Short.MIN_VALUE;
}
}

protected final void initIAPKM4E(String s) {
if (!s.trim().isEmpty()) {
IAPKM4E = Byte.parseByte(s);
} else {
IAPKM4E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM4L(String s) {
if (!s.trim().isEmpty()) {
IAPKM4L = Short.parseShort(s);
} else {
IAPKM4L = Short.MIN_VALUE;
}
}

protected final void initIAPKM4R(String s) {
if (!s.trim().isEmpty()) {
IAPKM4R = Byte.parseByte(s);
} else {
IAPKM4R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM4U(String s) {
if (!s.trim().isEmpty()) {
IAPKM4U = Short.parseShort(s);
} else {
IAPKM4U = Short.MIN_VALUE;
}
}

protected final void initIAPKM5E(String s) {
if (!s.trim().isEmpty()) {
IAPKM5E = Byte.parseByte(s);
} else {
IAPKM5E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM5L(String s) {
if (!s.trim().isEmpty()) {
IAPKM5L = Integer.parseInt(s);
} else {
IAPKM5L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM5R(String s) {
if (!s.trim().isEmpty()) {
IAPKM5R = Byte.parseByte(s);
} else {
IAPKM5R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM5U(String s) {
if (!s.trim().isEmpty()) {
IAPKM5U = Integer.parseInt(s);
} else {
IAPKM5U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM6E(String s) {
if (!s.trim().isEmpty()) {
IAPKM6E = Byte.parseByte(s);
} else {
IAPKM6E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM6L(String s) {
if (!s.trim().isEmpty()) {
IAPKM6L = Integer.parseInt(s);
} else {
IAPKM6L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM6R(String s) {
if (!s.trim().isEmpty()) {
IAPKM6R = Byte.parseByte(s);
} else {
IAPKM6R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM6U(String s) {
if (!s.trim().isEmpty()) {
IAPKM6U = Integer.parseInt(s);
} else {
IAPKM6U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM7E(String s) {
if (!s.trim().isEmpty()) {
IAPKM7E = Byte.parseByte(s);
} else {
IAPKM7E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM7L(String s) {
if (!s.trim().isEmpty()) {
IAPKM7L = Short.parseShort(s);
} else {
IAPKM7L = Short.MIN_VALUE;
}
}

protected final void initIAPKM7R(String s) {
if (!s.trim().isEmpty()) {
IAPKM7R = Byte.parseByte(s);
} else {
IAPKM7R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM7U(String s) {
if (!s.trim().isEmpty()) {
IAPKM7U = Short.parseShort(s);
} else {
IAPKM7U = Short.MIN_VALUE;
}
}

protected final void initIAPKM85(String s) {
if (!s.trim().isEmpty()) {
IAPKM85 = Byte.parseByte(s);
} else {
IAPKM85 = Byte.MIN_VALUE;
}
}

protected final void initIAPKM86(String s) {
if (!s.trim().isEmpty()) {
IAPKM86 = Byte.parseByte(s);
} else {
IAPKM86 = Byte.MIN_VALUE;
}
}

protected final void initIAPKM8E(String s) {
if (!s.trim().isEmpty()) {
IAPKM8E = Byte.parseByte(s);
} else {
IAPKM8E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM8L(String s) {
if (!s.trim().isEmpty()) {
IAPKM8L = Integer.parseInt(s);
} else {
IAPKM8L = Integer.MIN_VALUE;
}
}

protected final void initIAPKM8R(String s) {
if (!s.trim().isEmpty()) {
IAPKM8R = Byte.parseByte(s);
} else {
IAPKM8R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM8U(String s) {
if (!s.trim().isEmpty()) {
IAPKM8U = Integer.parseInt(s);
} else {
IAPKM8U = Integer.MIN_VALUE;
}
}

protected final void initIAPKM9(String s) {
if (!s.trim().isEmpty()) {
IAPKM9 = Integer.parseInt(s);
} else {
IAPKM9 = Integer.MIN_VALUE;
}
}

protected final void initIAPKM96(String s) {
if (!s.trim().isEmpty()) {
IAPKM96 = Byte.parseByte(s);
} else {
IAPKM96 = Byte.MIN_VALUE;
}
}

protected final void initIAPKM9E(String s) {
if (!s.trim().isEmpty()) {
IAPKM9E = Byte.parseByte(s);
} else {
IAPKM9E = Byte.MIN_VALUE;
}
}

protected final void initIAPKM9L(String s) {
if (!s.trim().isEmpty()) {
IAPKM9L = Byte.parseByte(s);
} else {
IAPKM9L = Byte.MIN_VALUE;
}
}

protected final void initIAPKM9R(String s) {
if (!s.trim().isEmpty()) {
IAPKM9R = Byte.parseByte(s);
} else {
IAPKM9R = Byte.MIN_VALUE;
}
}

protected final void initIAPKM9U(String s) {
if (!s.trim().isEmpty()) {
IAPKM9U = Short.parseShort(s);
} else {
IAPKM9U = Short.MIN_VALUE;
}
}

protected final void initIAPKMGW(String s) {
if (!s.trim().isEmpty()) {
IAPKMGW = Byte.parseByte(s);
} else {
IAPKMGW = Byte.MIN_VALUE;
}
}

protected final void initIAPKMIOB(String s) {
if (!s.trim().isEmpty()) {
IAPKMIOB = Byte.parseByte(s);
} else {
IAPKMIOB = Byte.MIN_VALUE;
}
}

protected final void initIAPKMLI(String s) {
if (!s.trim().isEmpty()) {
IAPKMLI = Byte.parseByte(s);
} else {
IAPKMLI = Byte.MIN_VALUE;
}
}

protected final void initIAPKMOIP(String s) {
if (!s.trim().isEmpty()) {
IAPKMOIP = Byte.parseByte(s);
} else {
IAPKMOIP = Byte.MIN_VALUE;
}
}

protected final void initIAPKMPAP(String s) {
if (!s.trim().isEmpty()) {
IAPKMPAP = Byte.parseByte(s);
} else {
IAPKMPAP = Byte.MIN_VALUE;
}
}

protected final void initIAPKMPP(String s) {
if (!s.trim().isEmpty()) {
IAPKMPP = Byte.parseByte(s);
} else {
IAPKMPP = Byte.MIN_VALUE;
}
}

protected final void initIAPKMPPI(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
IAPKMPPI = false;
} else {
IAPKMPPI = true;
}
}
}

protected final void initIAPKMRP(String s) {
if (!s.trim().isEmpty()) {
IAPKMRP = Byte.parseByte(s);
} else {
IAPKMRP = Byte.MIN_VALUE;
}
}

protected final void initIAPKMSG(String s) {
if (!s.trim().isEmpty()) {
IAPKMSG = Byte.parseByte(s);
} else {
IAPKMSG = Byte.MIN_VALUE;
}
}

protected final void initIAPKOIP(String s) {
if (!s.trim().isEmpty()) {
IAPKOIP = Byte.parseByte(s);
} else {
IAPKOIP = Byte.MIN_VALUE;
}
}

protected final void initIAPKPAP(String s) {
if (!s.trim().isEmpty()) {
IAPKPAP = Byte.parseByte(s);
} else {
IAPKPAP = Byte.MIN_VALUE;
}
}

protected final void initIAPKPP(String s) {
if (!s.trim().isEmpty()) {
IAPKPP = Byte.parseByte(s);
} else {
IAPKPP = Byte.MIN_VALUE;
}
}

protected final void initIAPKRP(String s) {
if (!s.trim().isEmpty()) {
IAPKRP = Byte.parseByte(s);
} else {
IAPKRP = Byte.MIN_VALUE;
}
}

protected final void initIAPKSG(String s) {
if (!s.trim().isEmpty()) {
IAPKSG = Byte.parseByte(s);
} else {
IAPKSG = Byte.MIN_VALUE;
}
}

protected final void initIAPPAFE(String s) {
if (!s.trim().isEmpty()) {
IAPPAFE = Byte.parseByte(s);
} else {
IAPPAFE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPPAFL = false;
} else {
IAPPAFL = true;
}
}
}

protected final void initIAPPAFR(String s) {
if (!s.trim().isEmpty()) {
IAPPAFR = Byte.parseByte(s);
} else {
IAPPAFR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAFU(String s) {
if (!s.trim().isEmpty()) {
IAPPAFU = Short.parseShort(s);
} else {
IAPPAFU = Short.MIN_VALUE;
}
}

protected final void initIAPPAME(String s) {
if (!s.trim().isEmpty()) {
IAPPAME = Byte.parseByte(s);
} else {
IAPPAME = Byte.MIN_VALUE;
}
}

protected final void initIAPPAML(String s) {
if (!s.trim().isEmpty()) {
IAPPAML = Short.parseShort(s);
} else {
IAPPAML = Short.MIN_VALUE;
}
}

protected final void initIAPPAMR(String s) {
if (!s.trim().isEmpty()) {
IAPPAMR = Byte.parseByte(s);
} else {
IAPPAMR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAMU(String s) {
if (!s.trim().isEmpty()) {
IAPPAMU = Short.parseShort(s);
} else {
IAPPAMU = Short.MIN_VALUE;
}
}

protected final void initIAPPAOE(String s) {
if (!s.trim().isEmpty()) {
IAPPAOE = Byte.parseByte(s);
} else {
IAPPAOE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAOL(String s) {
if (!s.trim().isEmpty()) {
IAPPAOL = Short.parseShort(s);
} else {
IAPPAOL = Short.MIN_VALUE;
}
}

protected final void initIAPPAOR(String s) {
if (!s.trim().isEmpty()) {
IAPPAOR = Byte.parseByte(s);
} else {
IAPPAOR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAOU(String s) {
if (!s.trim().isEmpty()) {
IAPPAOU = Short.parseShort(s);
} else {
IAPPAOU = Short.MIN_VALUE;
}
}

protected final void initIAPPAWE(String s) {
if (!s.trim().isEmpty()) {
IAPPAWE = Byte.parseByte(s);
} else {
IAPPAWE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAWL(String s) {
if (!s.trim().isEmpty()) {
IAPPAWL = Short.parseShort(s);
} else {
IAPPAWL = Short.MIN_VALUE;
}
}

protected final void initIAPPAWR(String s) {
if (!s.trim().isEmpty()) {
IAPPAWR = Byte.parseByte(s);
} else {
IAPPAWR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAWU(String s) {
if (!s.trim().isEmpty()) {
IAPPAWU = Short.parseShort(s);
} else {
IAPPAWU = Short.MIN_VALUE;
}
}

protected final void initIAPPAYE(String s) {
if (!s.trim().isEmpty()) {
IAPPAYE = Byte.parseByte(s);
} else {
IAPPAYE = Byte.MIN_VALUE;
}
}

protected final void initIAPPAYL(String s) {
if (!s.trim().isEmpty()) {
IAPPAYL = Short.parseShort(s);
} else {
IAPPAYL = Short.MIN_VALUE;
}
}

protected final void initIAPPAYR(String s) {
if (!s.trim().isEmpty()) {
IAPPAYR = Byte.parseByte(s);
} else {
IAPPAYR = Byte.MIN_VALUE;
}
}

protected final void initIAPPAYU(String s) {
if (!s.trim().isEmpty()) {
IAPPAYU = Short.parseShort(s);
} else {
IAPPAYU = Short.MIN_VALUE;
}
}

protected final void initIAPPEIE(String s) {
if (!s.trim().isEmpty()) {
IAPPEIE = Byte.parseByte(s);
} else {
IAPPEIE = Byte.MIN_VALUE;
}
}

protected final void initIAPPEIL(String s) {
if (!s.trim().isEmpty()) {
IAPPEIL = Short.parseShort(s);
} else {
IAPPEIL = Short.MIN_VALUE;
}
}

protected final void initIAPPEIR(String s) {
if (!s.trim().isEmpty()) {
IAPPEIR = Byte.parseByte(s);
} else {
IAPPEIR = Byte.MIN_VALUE;
}
}

protected final void initIAPPEIU(String s) {
if (!s.trim().isEmpty()) {
IAPPEIU = Short.parseShort(s);
} else {
IAPPEIU = Short.MIN_VALUE;
}
}

protected final void initIAPPMO(String s) {
if (!s.trim().isEmpty()) {
IAPPMO = Integer.parseInt(s);
} else {
IAPPMO = Integer.MIN_VALUE;
}
}

protected final void initIAPPMOE(String s) {
if (!s.trim().isEmpty()) {
IAPPMOE = Byte.parseByte(s);
} else {
IAPPMOE = Byte.MIN_VALUE;
}
}

protected final void initIAPPMOL(String s) {
if (!s.trim().isEmpty()) {
IAPPMOL = Short.parseShort(s);
} else {
IAPPMOL = Short.MIN_VALUE;
}
}

protected final void initIAPPMOR(String s) {
if (!s.trim().isEmpty()) {
IAPPMOR = Byte.parseByte(s);
} else {
IAPPMOR = Byte.MIN_VALUE;
}
}

protected final void initIAPPMOU(String s) {
if (!s.trim().isEmpty()) {
IAPPMOU = Short.parseShort(s);
} else {
IAPPMOU = Short.MIN_VALUE;
}
}

protected final void initIAPR2(String s) {
if (!s.trim().isEmpty()) {
IAPR2 = Byte.parseByte(s);
} else {
IAPR2 = Byte.MIN_VALUE;
}
}

protected final void initIAPR3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPR3 = false;
} else {
IAPR3 = true;
}
}
}

protected final void initIAPR4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPR4 = false;
} else {
IAPR4 = true;
}
}
}

protected final void initIAPROP95(String s) {
if (!s.trim().isEmpty()) {
IAPROP95 = Byte.parseByte(s);
} else {
IAPROP95 = Byte.MIN_VALUE;
}
}

protected final void initIAPROP96(String s) {
if (!s.trim().isEmpty()) {
IAPROP96 = Byte.parseByte(s);
} else {
IAPROP96 = Byte.MIN_VALUE;
}
}

protected final void initIAPROPFA(String s) {
if (!s.trim().isEmpty()) {
IAPROPFA = Byte.parseByte(s);
} else {
IAPROPFA = Byte.MIN_VALUE;
}
}

protected final void initIAPROPHO(String s) {
if (!s.trim().isEmpty()) {
IAPROPHO = Byte.parseByte(s);
} else {
IAPROPHO = Byte.MIN_VALUE;
}
}

protected final void initIAPROPIN(String s) {
if (!s.trim().isEmpty()) {
IAPROPIN = Byte.parseByte(s);
} else {
IAPROPIN = Byte.MIN_VALUE;
}
}

protected final void initIAPROPOL(String s) {
if (!s.trim().isEmpty()) {
IAPROPOL = Byte.parseByte(s);
} else {
IAPROPOL = Byte.MIN_VALUE;
}
}

protected final void initIAPROPOW(String s) {
if (!s.trim().isEmpty()) {
IAPROPOW = Byte.parseByte(s);
} else {
IAPROPOW = Byte.MIN_VALUE;
}
}

protected final void initIAPROPTR(String s) {
if (!s.trim().isEmpty()) {
IAPROPTR = Byte.parseByte(s);
} else {
IAPROPTR = Byte.MIN_VALUE;
}
}

protected final void initIAPS2(String s) {
if (!s.trim().isEmpty()) {
IAPS2 = Byte.parseByte(s);
} else {
IAPS2 = Byte.MIN_VALUE;
}
}

protected final void initIAPS3(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPS3 = false;
} else {
IAPS3 = true;
}
}
}

protected final void initIAPS4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPS4 = false;
} else {
IAPS4 = true;
}
}
}

protected final void initIAPSPEN(String s) {
if (!s.trim().isEmpty()) {
IAPSPEN = Byte.parseByte(s);
} else {
IAPSPEN = Byte.MIN_VALUE;
}
}

protected final void initIAPSPW(String s) {
if (!s.trim().isEmpty()) {
IAPSPW = Byte.parseByte(s);
} else {
IAPSPW = Byte.MIN_VALUE;
}
}

protected final void initIAPYW11(String s) {
if (!s.trim().isEmpty()) {
IAPYW11 = Byte.parseByte(s);
} else {
IAPYW11 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW12(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPYW12 = false;
} else {
IAPYW12 = true;
}
}
}

protected final void initIAPYW13(String s) {
if (!s.trim().isEmpty()) {
IAPYW13 = Byte.parseByte(s);
} else {
IAPYW13 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW14(String s) {
if (!s.trim().isEmpty()) {
IAPYW14 = Byte.parseByte(s);
} else {
IAPYW14 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW15(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPYW15 = false;
} else {
IAPYW15 = true;
}
}
}

protected final void initIAPYW16(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAPYW16 = false;
} else {
IAPYW16 = true;
}
}
}

protected final void initIAPYW2(String s) {
if (!s.trim().isEmpty()) {
IAPYW2 = Byte.parseByte(s);
} else {
IAPYW2 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW3(String s) {
if (!s.trim().isEmpty()) {
IAPYW3 = Byte.parseByte(s);
} else {
IAPYW3 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW4(String s) {
if (!s.trim().isEmpty()) {
IAPYW4 = Byte.parseByte(s);
} else {
IAPYW4 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW5(String s) {
if (!s.trim().isEmpty()) {
IAPYW5 = Byte.parseByte(s);
} else {
IAPYW5 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW6(String s) {
if (!s.trim().isEmpty()) {
IAPYW6 = Byte.parseByte(s);
} else {
IAPYW6 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW7(String s) {
if (!s.trim().isEmpty()) {
IAPYW7 = Byte.parseByte(s);
} else {
IAPYW7 = Byte.MIN_VALUE;
}
}

protected final void initIAPYW9(String s) {
if (!s.trim().isEmpty()) {
IAPYW9 = Byte.parseByte(s);
} else {
IAPYW9 = Byte.MIN_VALUE;
}
}

protected final void initIARECE(String s) {
if (!s.trim().isEmpty()) {
IARECE = Byte.parseByte(s);
} else {
IARECE = Byte.MIN_VALUE;
}
}

protected final void initIARECL(String s) {
if (!s.trim().isEmpty()) {
IARECL = Short.parseShort(s);
} else {
IARECL = Short.MIN_VALUE;
}
}

protected final void initIARECR(String s) {
if (!s.trim().isEmpty()) {
IARECR = Byte.parseByte(s);
} else {
IARECR = Byte.MIN_VALUE;
}
}

protected final void initIARECU(String s) {
if (!s.trim().isEmpty()) {
IARECU = Short.parseShort(s);
} else {
IARECU = Short.MIN_VALUE;
}
}

protected final void initIAREGM3(String s) {
if (!s.trim().isEmpty()) {
IAREGM3 = Short.parseShort(s);
} else {
IAREGM3 = Short.MIN_VALUE;
}
}

protected final void initIAREGM4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGM4 = false;
} else {
IAREGM4 = true;
}
}
}

protected final void initIAREGO3(String s) {
if (!s.trim().isEmpty()) {
IAREGO3 = Byte.parseByte(s);
} else {
IAREGO3 = Byte.MIN_VALUE;
}
}

protected final void initIAREGO4(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREGO4 = false;
} else {
IAREGO4 = true;
}
}
}

protected final void initIAREPFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFE = false;
} else {
IAREPFE = true;
}
}
}

protected final void initIAREPFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFL = false;
} else {
IAREPFL = true;
}
}
}

protected final void initIAREPFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFR = false;
} else {
IAREPFR = true;
}
}
}

protected final void initIAREPFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAREPFU = false;
} else {
IAREPFU = true;
}
}
}

protected final void initIAREPME(String s) {
if (!s.trim().isEmpty()) {
IAREPME = Byte.parseByte(s);
} else {
IAREPME = Byte.MIN_VALUE;
}
}

protected final void initIAREPML(String s) {
if (!s.trim().isEmpty()) {
IAREPML = Byte.parseByte(s);
} else {
IAREPML = Byte.MIN_VALUE;
}
}

protected final void initIAREPMR(String s) {
if (!s.trim().isEmpty()) {
IAREPMR = Byte.parseByte(s);
} else {
IAREPMR = Byte.MIN_VALUE;
}
}

protected final void initIAREPMU(String s) {
if (!s.trim().isEmpty()) {
IAREPMU = Short.parseShort(s);
} else {
IAREPMU = Short.MIN_VALUE;
}
}

protected final void initIAREPOE(String s) {
if (!s.trim().isEmpty()) {
IAREPOE = Byte.parseByte(s);
} else {
IAREPOE = Byte.MIN_VALUE;
}
}

protected final void initIAREPOL(String s) {
if (!s.trim().isEmpty()) {
IAREPOL = Short.parseShort(s);
} else {
IAREPOL = Short.MIN_VALUE;
}
}

protected final void initIAREPOR(String s) {
if (!s.trim().isEmpty()) {
IAREPOR = Byte.parseByte(s);
} else {
IAREPOR = Byte.MIN_VALUE;
}
}

protected final void initIAREPOU(String s) {
if (!s.trim().isEmpty()) {
IAREPOU = Short.parseShort(s);
} else {
IAREPOU = Short.MIN_VALUE;
}
}

protected final void initIAREPWE(String s) {
if (!s.trim().isEmpty()) {
IAREPWE = Byte.parseByte(s);
} else {
IAREPWE = Byte.MIN_VALUE;
}
}

protected final void initIAREPWL(String s) {
if (!s.trim().isEmpty()) {
IAREPWL = Byte.parseByte(s);
} else {
IAREPWL = Byte.MIN_VALUE;
}
}

protected final void initIAREPWR(String s) {
if (!s.trim().isEmpty()) {
IAREPWR = Byte.parseByte(s);
} else {
IAREPWR = Byte.MIN_VALUE;
}
}

protected final void initIAREPWU(String s) {
if (!s.trim().isEmpty()) {
IAREPWU = Byte.parseByte(s);
} else {
IAREPWU = Byte.MIN_VALUE;
}
}

protected final void initIAREPYE(String s) {
if (!s.trim().isEmpty()) {
IAREPYE = Byte.parseByte(s);
} else {
IAREPYE = Byte.MIN_VALUE;
}
}

protected final void initIAREPYL(String s) {
if (!s.trim().isEmpty()) {
IAREPYL = Byte.parseByte(s);
} else {
IAREPYL = Byte.MIN_VALUE;
}
}

protected final void initIAREPYR(String s) {
if (!s.trim().isEmpty()) {
IAREPYR = Byte.parseByte(s);
} else {
IAREPYR = Byte.MIN_VALUE;
}
}

protected final void initIAREPYU(String s) {
if (!s.trim().isEmpty()) {
IAREPYU = Short.parseShort(s);
} else {
IAREPYU = Short.MIN_VALUE;
}
}

protected final void initIARG2FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FE = false;
} else {
IARG2FE = true;
}
}
}

protected final void initIARG2FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FL = false;
} else {
IARG2FL = true;
}
}
}

protected final void initIARG2FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FR = false;
} else {
IARG2FR = true;
}
}
}

protected final void initIARG2FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2FU = false;
} else {
IARG2FU = true;
}
}
}

protected final void initIARG2ME(String s) {
if (!s.trim().isEmpty()) {
IARG2ME = Byte.parseByte(s);
} else {
IARG2ME = Byte.MIN_VALUE;
}
}

protected final void initIARG2ML(String s) {
if (!s.trim().isEmpty()) {
IARG2ML = Short.parseShort(s);
} else {
IARG2ML = Short.MIN_VALUE;
}
}

protected final void initIARG2MR(String s) {
if (!s.trim().isEmpty()) {
IARG2MR = Byte.parseByte(s);
} else {
IARG2MR = Byte.MIN_VALUE;
}
}

protected final void initIARG2MU(String s) {
if (!s.trim().isEmpty()) {
IARG2MU = Short.parseShort(s);
} else {
IARG2MU = Short.MIN_VALUE;
}
}

protected final void initIARG2OE(String s) {
if (!s.trim().isEmpty()) {
IARG2OE = Byte.parseByte(s);
} else {
IARG2OE = Byte.MIN_VALUE;
}
}

protected final void initIARG2OL(String s) {
if (!s.trim().isEmpty()) {
IARG2OL = Byte.parseByte(s);
} else {
IARG2OL = Byte.MIN_VALUE;
}
}

protected final void initIARG2OR(String s) {
if (!s.trim().isEmpty()) {
IARG2OR = Byte.parseByte(s);
} else {
IARG2OR = Byte.MIN_VALUE;
}
}

protected final void initIARG2OU(String s) {
if (!s.trim().isEmpty()) {
IARG2OU = Byte.parseByte(s);
} else {
IARG2OU = Byte.MIN_VALUE;
}
}

protected final void initIARG2WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WE = false;
} else {
IARG2WE = true;
}
}
}

protected final void initIARG2WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WL = false;
} else {
IARG2WL = true;
}
}
}

protected final void initIARG2WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WR = false;
} else {
IARG2WR = true;
}
}
}

protected final void initIARG2WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2WU = false;
} else {
IARG2WU = true;
}
}
}

protected final void initIARG2YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YE = false;
} else {
IARG2YE = true;
}
}
}

protected final void initIARG2YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YL = false;
} else {
IARG2YL = true;
}
}
}

protected final void initIARG2YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YR = false;
} else {
IARG2YR = true;
}
}
}

protected final void initIARG2YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG2YU = false;
} else {
IARG2YU = true;
}
}
}

protected final void initIARG3FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3FE = false;
} else {
IARG3FE = true;
}
}
}

protected final void initIARG3FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3FL = false;
} else {
IARG3FL = true;
}
}
}

protected final void initIARG3FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3FR = false;
} else {
IARG3FR = true;
}
}
}

protected final void initIARG3FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3FU = false;
} else {
IARG3FU = true;
}
}
}

protected final void initIARG3ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3ME = false;
} else {
IARG3ME = true;
}
}
}

protected final void initIARG3ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3ML = false;
} else {
IARG3ML = true;
}
}
}

protected final void initIARG3MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3MR = false;
} else {
IARG3MR = true;
}
}
}

protected final void initIARG3MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3MU = false;
} else {
IARG3MU = true;
}
}
}

protected final void initIARG3OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3OE = false;
} else {
IARG3OE = true;
}
}
}

protected final void initIARG3OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3OL = false;
} else {
IARG3OL = true;
}
}
}

protected final void initIARG3OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3OR = false;
} else {
IARG3OR = true;
}
}
}

protected final void initIARG3OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3OU = false;
} else {
IARG3OU = true;
}
}
}

protected final void initIARG3WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3WE = false;
} else {
IARG3WE = true;
}
}
}

protected final void initIARG3WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3WL = false;
} else {
IARG3WL = true;
}
}
}

protected final void initIARG3WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3WR = false;
} else {
IARG3WR = true;
}
}
}

protected final void initIARG3WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3WU = false;
} else {
IARG3WU = true;
}
}
}

protected final void initIARG3YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3YE = false;
} else {
IARG3YE = true;
}
}
}

protected final void initIARG3YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3YL = false;
} else {
IARG3YL = true;
}
}
}

protected final void initIARG3YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3YR = false;
} else {
IARG3YR = true;
}
}
}

protected final void initIARG3YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG3YU = false;
} else {
IARG3YU = true;
}
}
}

protected final void initIARG4FE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4FE = false;
} else {
IARG4FE = true;
}
}
}

protected final void initIARG4FL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4FL = false;
} else {
IARG4FL = true;
}
}
}

protected final void initIARG4FR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4FR = false;
} else {
IARG4FR = true;
}
}
}

protected final void initIARG4FU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4FU = false;
} else {
IARG4FU = true;
}
}
}

protected final void initIARG4ME(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4ME = false;
} else {
IARG4ME = true;
}
}
}

protected final void initIARG4ML(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4ML = false;
} else {
IARG4ML = true;
}
}
}

protected final void initIARG4MR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4MR = false;
} else {
IARG4MR = true;
}
}
}

protected final void initIARG4MU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4MU = false;
} else {
IARG4MU = true;
}
}
}

protected final void initIARG4OE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4OE = false;
} else {
IARG4OE = true;
}
}
}

protected final void initIARG4OL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4OL = false;
} else {
IARG4OL = true;
}
}
}

protected final void initIARG4OR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4OR = false;
} else {
IARG4OR = true;
}
}
}

protected final void initIARG4OU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4OU = false;
} else {
IARG4OU = true;
}
}
}

protected final void initIARG4WE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4WE = false;
} else {
IARG4WE = true;
}
}
}

protected final void initIARG4WL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4WL = false;
} else {
IARG4WL = true;
}
}
}

protected final void initIARG4WR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4WR = false;
} else {
IARG4WR = true;
}
}
}

protected final void initIARG4WU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4WU = false;
} else {
IARG4WU = true;
}
}
}

protected final void initIARG4YE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4YE = false;
} else {
IARG4YE = true;
}
}
}

protected final void initIARG4YL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4YL = false;
} else {
IARG4YL = true;
}
}
}

protected final void initIARG4YR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4YR = false;
} else {
IARG4YR = true;
}
}
}

protected final void initIARG4YU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARG4YU = false;
} else {
IARG4YU = true;
}
}
}

protected final void initIARGFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFE = false;
} else {
IARGFE = true;
}
}
}

protected final void initIARGFL(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFL = false;
} else {
IARGFL = true;
}
}
}

protected final void initIARGFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFR = false;
} else {
IARGFR = true;
}
}
}

protected final void initIARGFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IARGFU = false;
} else {
IARGFU = true;
}
}
}

protected final void initIARGME(String s) {
if (!s.trim().isEmpty()) {
IARGME = Byte.parseByte(s);
} else {
IARGME = Byte.MIN_VALUE;
}
}

protected final void initIARGML(String s) {
if (!s.trim().isEmpty()) {
IARGML = Short.parseShort(s);
} else {
IARGML = Short.MIN_VALUE;
}
}

protected final void initIARGMR(String s) {
if (!s.trim().isEmpty()) {
IARGMR = Byte.parseByte(s);
} else {
IARGMR = Byte.MIN_VALUE;
}
}

protected final void initIARGMU(String s) {
if (!s.trim().isEmpty()) {
IARGMU = Short.parseShort(s);
} else {
IARGMU = Short.MIN_VALUE;
}
}

protected final void initIARGOE(String s) {
if (!s.trim().isEmpty()) {
IARGOE = Byte.parseByte(s);
} else {
IARGOE = Byte.MIN_VALUE;
}
}

protected final void initIARGOL(String s) {
if (!s.trim().isEmpty()) {
IARGOL = Short.parseShort(s);
} else {
IARGOL = Short.MIN_VALUE;
}
}

protected final void initIARGOR(String s) {
if (!s.trim().isEmpty()) {
IARGOR = Byte.parseByte(s);
} else {
IARGOR = Byte.MIN_VALUE;
}
}

protected final void initIARGOU(String s) {
if (!s.trim().isEmpty()) {
IARGOU = Short.parseShort(s);
} else {
IARGOU = Short.MIN_VALUE;
}
}

protected final void initIARGWE(String s) {
if (!s.trim().isEmpty()) {
IARGWE = Byte.parseByte(s);
} else {
IARGWE = Byte.MIN_VALUE;
}
}

protected final void initIARGWL(String s) {
if (!s.trim().isEmpty()) {
IARGWL = Byte.parseByte(s);
} else {
IARGWL = Byte.MIN_VALUE;
}
}

protected final void initIARGWR(String s) {
if (!s.trim().isEmpty()) {
IARGWR = Byte.parseByte(s);
} else {
IARGWR = Byte.MIN_VALUE;
}
}

protected final void initIARGWU(String s) {
if (!s.trim().isEmpty()) {
IARGWU = Byte.parseByte(s);
} else {
IARGWU = Byte.MIN_VALUE;
}
}

protected final void initIARGYE(String s) {
if (!s.trim().isEmpty()) {
IARGYE = Byte.parseByte(s);
} else {
IARGYE = Byte.MIN_VALUE;
}
}

protected final void initIARGYL(String s) {
if (!s.trim().isEmpty()) {
IARGYL = Byte.parseByte(s);
} else {
IARGYL = Byte.MIN_VALUE;
}
}

protected final void initIARGYR(String s) {
if (!s.trim().isEmpty()) {
IARGYR = Byte.parseByte(s);
} else {
IARGYR = Byte.MIN_VALUE;
}
}

protected final void initIARGYU(String s) {
if (!s.trim().isEmpty()) {
IARGYU = Byte.parseByte(s);
} else {
IARGYU = Byte.MIN_VALUE;
}
}

protected final void initIASAVAE(String s) {
if (!s.trim().isEmpty()) {
IASAVAE = Byte.parseByte(s);
} else {
IASAVAE = Byte.MIN_VALUE;
}
}

protected final void initIASAVAL(String s) {
if (!s.trim().isEmpty()) {
IASAVAL = Integer.parseInt(s);
} else {
IASAVAL = Integer.MIN_VALUE;
}
}

protected final void initIASAVAR(String s) {
if (!s.trim().isEmpty()) {
IASAVAR = Byte.parseByte(s);
} else {
IASAVAR = Byte.MIN_VALUE;
}
}

protected final void initIASAVAU(String s) {
if (!s.trim().isEmpty()) {
IASAVAU = Integer.parseInt(s);
} else {
IASAVAU = Integer.MIN_VALUE;
}
}

protected final void initIASCAE(String s) {
if (!s.trim().isEmpty()) {
IASCAE = Byte.parseByte(s);
} else {
IASCAE = Byte.MIN_VALUE;
}
}

protected final void initIASCAL(String s) {
if (!s.trim().isEmpty()) {
IASCAL = Integer.parseInt(s);
} else {
IASCAL = Integer.MIN_VALUE;
}
}

protected final void initIASCAR(String s) {
if (!s.trim().isEmpty()) {
IASCAR = Byte.parseByte(s);
} else {
IASCAR = Byte.MIN_VALUE;
}
}

protected final void initIASCAU(String s) {
if (!s.trim().isEmpty()) {
IASCAU = Integer.parseInt(s);
} else {
IASCAU = Integer.MIN_VALUE;
}
}

protected final void initIASHTFOL(String s) {
if (!s.trim().isEmpty()) {
IASHTFOL = Byte.parseByte(s);
} else {
IASHTFOL = Byte.MIN_VALUE;
}
}

protected final void initIASHTMUT(String s) {
if (!s.trim().isEmpty()) {
IASHTMUT = Byte.parseByte(s);
} else {
IASHTMUT = Byte.MIN_VALUE;
}
}

protected final void initIASHTPRI(String s) {
if (!s.trim().isEmpty()) {
IASHTPRI = Byte.parseByte(s);
} else {
IASHTPRI = Byte.MIN_VALUE;
}
}

protected final void initIASHTUKL(String s) {
if (!s.trim().isEmpty()) {
IASHTUKL = Byte.parseByte(s);
} else {
IASHTUKL = Byte.MIN_VALUE;
}
}

protected final void initIASI95(String s) {
if (!s.trim().isEmpty()) {
IASI95 = Byte.parseByte(s);
} else {
IASI95 = Byte.MIN_VALUE;
}
}

protected final void initIASI96(String s) {
if (!s.trim().isEmpty()) {
IASI96 = Byte.parseByte(s);
} else {
IASI96 = Byte.MIN_VALUE;
}
}

protected final void initIASIBG(String s) {
if (!s.trim().isEmpty()) {
IASIBG = Byte.parseByte(s);
} else {
IASIBG = Byte.MIN_VALUE;
}
}

protected final void initIASICA(String s) {
if (!s.trim().isEmpty()) {
IASICA = Byte.parseByte(s);
} else {
IASICA = Byte.MIN_VALUE;
}
}

protected final void initIASIISA(String s) {
if (!s.trim().isEmpty()) {
IASIISA = Byte.parseByte(s);
} else {
IASIISA = Byte.MIN_VALUE;
}
}

protected final void initIASINS(String s) {
if (!s.trim().isEmpty()) {
IASINS = Byte.parseByte(s);
} else {
IASINS = Byte.MIN_VALUE;
}
}

protected final void initIASIOIE(String s) {
if (!s.trim().isEmpty()) {
IASIOIE = Byte.parseByte(s);
} else {
IASIOIE = Byte.MIN_VALUE;
}
}

protected final void initIASIOIL(String s) {
if (!s.trim().isEmpty()) {
IASIOIL = Short.parseShort(s);
} else {
IASIOIL = Short.MIN_VALUE;
}
}

protected final void initIASIOIR(String s) {
if (!s.trim().isEmpty()) {
IASIOIR = Byte.parseByte(s);
} else {
IASIOIR = Byte.MIN_VALUE;
}
}

protected final void initIASIOIU(String s) {
if (!s.trim().isEmpty()) {
IASIOIU = Short.parseShort(s);
} else {
IASIOIU = Short.MIN_VALUE;
}
}

protected final void initIASIOPT(String s) {
if (!s.trim().isEmpty()) {
IASIOPT = Byte.parseByte(s);
} else {
IASIOPT = Byte.MIN_VALUE;
}
}

protected final void initIASIPB(String s) {
if (!s.trim().isEmpty()) {
IASIPB = Byte.parseByte(s);
} else {
IASIPB = Byte.MIN_VALUE;
}
}

protected final void initIASIPEP(String s) {
if (!s.trim().isEmpty()) {
IASIPEP = Byte.parseByte(s);
} else {
IASIPEP = Byte.MIN_VALUE;
}
}

protected final void initIASISAE(String s) {
if (!s.trim().isEmpty()) {
IASISAE = Byte.parseByte(s);
} else {
IASISAE = Byte.MIN_VALUE;
}
}

protected final void initIASISAL(String s) {
if (!s.trim().isEmpty()) {
IASISAL = Integer.parseInt(s);
} else {
IASISAL = Integer.MIN_VALUE;
}
}

protected final void initIASISAR(String s) {
if (!s.trim().isEmpty()) {
IASISAR = Byte.parseByte(s);
} else {
IASISAR = Byte.MIN_VALUE;
}
}

protected final void initIASISAU(String s) {
if (!s.trim().isEmpty()) {
IASISAU = Integer.parseInt(s);
} else {
IASISAU = Integer.MIN_VALUE;
}
}

protected final void initIASISAV(String s) {
if (!s.trim().isEmpty()) {
IASISAV = Byte.parseByte(s);
} else {
IASISAV = Byte.MIN_VALUE;
}
}

protected final void initIASISC(String s) {
if (!s.trim().isEmpty()) {
IASISC = Byte.parseByte(s);
} else {
IASISC = Byte.MIN_VALUE;
}
}

protected final void initIASISHA(String s) {
if (!s.trim().isEmpty()) {
IASISHA = Byte.parseByte(s);
} else {
IASISHA = Byte.MIN_VALUE;
}
}

protected final void initIASITESS(String s) {
if (!s.trim().isEmpty()) {
IASITESS = Byte.parseByte(s);
} else {
IASITESS = Byte.MIN_VALUE;
}
}

protected final void initIASIUIT(String s) {
if (!s.trim().isEmpty()) {
IASIUIT = Byte.parseByte(s);
} else {
IASIUIT = Byte.MIN_VALUE;
}
}

protected final void initIASSSE(String s) {
if (!s.trim().isEmpty()) {
IASSSE = Byte.parseByte(s);
} else {
IASSSE = Byte.MIN_VALUE;
}
}

protected final void initIASSSIE(String s) {
if (!s.trim().isEmpty()) {
IASSSIE = Byte.parseByte(s);
} else {
IASSSIE = Byte.MIN_VALUE;
}
}

protected final void initIASSSIL(String s) {
if (!s.trim().isEmpty()) {
IASSSIL = Short.parseShort(s);
} else {
IASSSIL = Short.MIN_VALUE;
}
}

protected final void initIASSSIR(String s) {
if (!s.trim().isEmpty()) {
IASSSIR = Byte.parseByte(s);
} else {
IASSSIR = Byte.MIN_VALUE;
}
}

protected final void initIASSSIU(String s) {
if (!s.trim().isEmpty()) {
IASSSIU = Short.parseShort(s);
} else {
IASSSIU = Short.MIN_VALUE;
}
}

protected final void initIASSSL(String s) {
if (!s.trim().isEmpty()) {
IASSSL = Integer.parseInt(s);
} else {
IASSSL = Integer.MIN_VALUE;
}
}

protected final void initIASSSR(String s) {
if (!s.trim().isEmpty()) {
IASSSR = Byte.parseByte(s);
} else {
IASSSR = Byte.MIN_VALUE;
}
}

protected final void initIASSSU(String s) {
if (!s.trim().isEmpty()) {
IASSSU = Integer.parseInt(s);
} else {
IASSSU = Integer.MIN_VALUE;
}
}

protected final void initIAT39(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT39 = false;
} else {
IAT39 = true;
}
}
}

protected final void initIAT40(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT40 = false;
} else {
IAT40 = true;
}
}
}

protected final void initIAT41(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT41 = false;
} else {
IAT41 = true;
}
}
}

protected final void initIAT42(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
IAT42 = false;
} else {
IAT42 = true;
}
}
}

protected final void initIAUITE(String s) {
if (!s.trim().isEmpty()) {
IAUITE = Byte.parseByte(s);
} else {
IAUITE = Byte.MIN_VALUE;
}
}

protected final void initIAUITIE(String s) {
if (!s.trim().isEmpty()) {
IAUITIE = Byte.parseByte(s);
} else {
IAUITIE = Byte.MIN_VALUE;
}
}

protected final void initIAUITIL(String s) {
if (!s.trim().isEmpty()) {
IAUITIL = Short.parseShort(s);
} else {
IAUITIL = Short.MIN_VALUE;
}
}

protected final void initIAUITIR(String s) {
if (!s.trim().isEmpty()) {
IAUITIR = Byte.parseByte(s);
} else {
IAUITIR = Byte.MIN_VALUE;
}
}

protected final void initIAUITIU(String s) {
if (!s.trim().isEmpty()) {
IAUITIU = Short.parseShort(s);
} else {
IAUITIU = Short.MIN_VALUE;
}
}

protected final void initIAUITL(String s) {
if (!s.trim().isEmpty()) {
IAUITL = Integer.parseInt(s);
} else {
IAUITL = Integer.MIN_VALUE;
}
}

protected final void initIAUITR(String s) {
if (!s.trim().isEmpty()) {
IAUITR = Byte.parseByte(s);
} else {
IAUITR = Byte.MIN_VALUE;
}
}

protected final void initIAUITU(String s) {
if (!s.trim().isEmpty()) {
IAUITU = Integer.parseInt(s);
} else {
IAUITU = Integer.MIN_VALUE;
}
}

protected final void initIAW1R(String s) {
if (!s.trim().isEmpty()) {
IAW1R = Byte.parseByte(s);
} else {
IAW1R = Byte.MIN_VALUE;
}
}

protected final void initIGF1(String s) {
if (!s.trim().isEmpty()) {
IGF1 = Byte.parseByte(s);
} else {
IGF1 = Byte.MIN_VALUE;
}
}

protected final void initLDL(String s) {
if (!s.trim().isEmpty()) {
LDL = Double.parseDouble(s);
} else {
LDL = Double.NaN;
}
}

protected final void initLIGHTEAT(String s) {
if (!s.trim().isEmpty()) {
LIGHTEAT = Byte.parseByte(s);
} else {
LIGHTEAT = Byte.MIN_VALUE;
}
}

protected final void initMAINHH(String s) {
if (!s.trim().isEmpty()) {
MAINHH = Byte.parseByte(s);
} else {
MAINHH = Byte.MIN_VALUE;
}
}

protected final void initMAP1(String s) {
if (!s.trim().isEmpty()) {
MAP1 = Short.parseShort(s);
} else {
MAP1 = Short.MIN_VALUE;
}
}

protected final void initMAP2(String s) {
if (!s.trim().isEmpty()) {
MAP2 = Short.parseShort(s);
} else {
MAP2 = Short.MIN_VALUE;
}
}

protected final void initMAP3(String s) {
if (!s.trim().isEmpty()) {
MAP3 = Short.parseShort(s);
} else {
MAP3 = Short.MIN_VALUE;
}
}

protected final void initMAPVAL(String s) {
if (!s.trim().isEmpty()) {
MAPVAL = Double.parseDouble(s);
} else {
MAPVAL = Double.NaN;
}
}

protected final void initMCH(String s) {
if (!s.trim().isEmpty()) {
MCH = Double.parseDouble(s);
} else {
MCH = Double.NaN;
}
}

protected final void initMEDCNJD(String s) {
if (!s.trim().isEmpty()) {
MEDCNJD = Byte.parseByte(s);
} else {
MEDCNJD = Byte.MIN_VALUE;
}
}

protected final void initMIFIN(String s) {
if (!s.trim().isEmpty()) {
MIFIN = Byte.parseByte(s);
} else {
MIFIN = Byte.MIN_VALUE;
}
}

protected final void initMILIVE(String s) {
if (!s.trim().isEmpty()) {
MILIVE = Byte.parseByte(s);
} else {
MILIVE = Byte.MIN_VALUE;
}
}

protected final void initMIREL(String s) {
if (!s.trim().isEmpty()) {
MIREL = Byte.parseByte(s);
} else {
MIREL = Byte.MIN_VALUE;
}
}

protected final void initMISINT(String s) {
if (!s.trim().isEmpty()) {
MISINT = Byte.parseByte(s);
} else {
MISINT = Byte.MIN_VALUE;
}
}

protected final void initMISPOU(String s) {
if (!s.trim().isEmpty()) {
MISPOU = Byte.parseByte(s);
} else {
MISPOU = Byte.MIN_VALUE;
}
}

protected final void initMMCOM85(String s) {
if (!s.trim().isEmpty()) {
MMCOM85 = Byte.parseByte(s);
} else {
MMCOM85 = Byte.MIN_VALUE;
}
}

protected final void initMMCOM86(String s) {
if (!s.trim().isEmpty()) {
MMCOM86 = Byte.parseByte(s);
} else {
MMCOM86 = Byte.MIN_VALUE;
}
}

protected final void initMMCOMNI(String s) {
if (!s.trim().isEmpty()) {
MMCOMNI = Byte.parseByte(s);
} else {
MMCOMNI = Byte.MIN_VALUE;
}
}

protected final void initMMCOMPA(String s) {
if (!s.trim().isEmpty()) {
MMCOMPA = Byte.parseByte(s);
} else {
MMCOMPA = Byte.MIN_VALUE;
}
}

protected final void initMMCOMRF(String s) {
if (!s.trim().isEmpty()) {
MMCOMRF = Byte.parseByte(s);
} else {
MMCOMRF = Byte.MIN_VALUE;
}
}

protected final void initMMCOMSP(String s) {
if (!s.trim().isEmpty()) {
MMCOMSP = Byte.parseByte(s);
} else {
MMCOMSP = Byte.MIN_VALUE;
}
}

protected final void initMMCOMSW(String s) {
if (!s.trim().isEmpty()) {
MMCOMSW = Byte.parseByte(s);
} else {
MMCOMSW = Byte.MIN_VALUE;
}
}

protected final void initMMCOMTM(String s) {
if (!s.trim().isEmpty()) {
MMCOMTM = Byte.parseByte(s);
} else {
MMCOMTM = Byte.MIN_VALUE;
}
}

protected final void initMMCOMUN(String s) {
if (!s.trim().isEmpty()) {
MMCOMUN = Byte.parseByte(s);
} else {
MMCOMUN = Byte.MIN_VALUE;
}
}

protected final void initMMGSD1(String s) {
if (!s.trim().isEmpty()) {
MMGSD1 = Byte.parseByte(s);
} else {
MMGSD1 = Byte.MIN_VALUE;
}
}

protected final void initMMGSD2(String s) {
if (!s.trim().isEmpty()) {
MMGSD2 = Byte.parseByte(s);
} else {
MMGSD2 = Byte.MIN_VALUE;
}
}

protected final void initMMGSD3(String s) {
if (!s.trim().isEmpty()) {
MMGSD3 = Byte.parseByte(s);
} else {
MMGSD3 = Byte.MIN_VALUE;
}
}

protected final void initMMGSDOM(String s) {
if (!s.trim().isEmpty()) {
MMGSDOM = Byte.parseByte(s);
} else {
MMGSDOM = Byte.MIN_VALUE;
}
}

protected final void initMMGSN1(String s) {
if (!s.trim().isEmpty()) {
MMGSN1 = Byte.parseByte(s);
} else {
MMGSN1 = Byte.MIN_VALUE;
}
}

protected final void initMMGSN2(String s) {
if (!s.trim().isEmpty()) {
MMGSN2 = Byte.parseByte(s);
} else {
MMGSN2 = Byte.MIN_VALUE;
}
}

protected final void initMMGSN3(String s) {
if (!s.trim().isEmpty()) {
MMGSN3 = Byte.parseByte(s);
} else {
MMGSN3 = Byte.MIN_VALUE;
}
}

protected final void initMMGSPR95(String s) {
if (!s.trim().isEmpty()) {
MMGSPR95 = Byte.parseByte(s);
} else {
MMGSPR95 = Byte.MIN_VALUE;
}
}

protected final void initMMGSPREQ(String s) {
if (!s.trim().isEmpty()) {
MMGSPREQ = Byte.parseByte(s);
} else {
MMGSPREQ = Byte.MIN_VALUE;
}
}

protected final void initMMGSPRPA(String s) {
if (!s.trim().isEmpty()) {
MMGSPRPA = Byte.parseByte(s);
} else {
MMGSPRPA = Byte.MIN_VALUE;
}
}

protected final void initMMGSPRRE(String s) {
if (!s.trim().isEmpty()) {
MMGSPRRE = Byte.parseByte(s);
} else {
MMGSPRRE = Byte.MIN_VALUE;
}
}

protected final void initMMGSRES(String s) {
if (!s.trim().isEmpty()) {
MMGSRES = Byte.parseByte(s);
} else {
MMGSRES = Byte.MIN_VALUE;
}
}

protected final void initMMGSSTA(String s) {
if (!s.trim().isEmpty()) {
MMGSSTA = Byte.parseByte(s);
} else {
MMGSSTA = Byte.MIN_VALUE;
}
}

protected final void initMMGSSTP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
MMGSSTP = false;
} else {
MMGSSTP = true;
}
}
}

protected final void initMMGSTP(String s) {
if (!s.trim().isEmpty()) {
MMGSTP = Byte.parseByte(s);
} else {
MMGSTP = Byte.MIN_VALUE;
}
}

protected final void initMMGSWIL(String s) {
if (!s.trim().isEmpty()) {
MMGSWIL = Byte.parseByte(s);
} else {
MMGSWIL = Byte.MIN_VALUE;
}
}

protected final void initNATTBP95(String s) {
if (!s.trim().isEmpty()) {
NATTBP95 = Byte.parseByte(s);
} else {
NATTBP95 = Byte.MIN_VALUE;
}
}

protected final void initNATTBPCO(String s) {
if (!s.trim().isEmpty()) {
NATTBPCO = Byte.parseByte(s);
} else {
NATTBPCO = Byte.MIN_VALUE;
}
}

protected final void initNATTBPCU(String s) {
if (!s.trim().isEmpty()) {
NATTBPCU = Byte.parseByte(s);
} else {
NATTBPCU = Byte.MIN_VALUE;
}
}

protected final void initNATTBPEQ(String s) {
if (!s.trim().isEmpty()) {
NATTBPEQ = Byte.parseByte(s);
} else {
NATTBPEQ = Byte.MIN_VALUE;
}
}

protected final void initNATTBPER(String s) {
if (!s.trim().isEmpty()) {
NATTBPER = Byte.parseByte(s);
} else {
NATTBPER = Byte.MIN_VALUE;
}
}

protected final void initNATTBPUP(String s) {
if (!s.trim().isEmpty()) {
NATTBPUP = Byte.parseByte(s);
} else {
NATTBPUP = Byte.MIN_VALUE;
}
}

protected final void initNOBSM95(String s) {
if (!s.trim().isEmpty()) {
NOBSM95 = Byte.parseByte(s);
} else {
NOBSM95 = Byte.MIN_VALUE;
}
}

protected final void initNOBSMFA(String s) {
if (!s.trim().isEmpty()) {
NOBSMFA = Byte.parseByte(s);
} else {
NOBSMFA = Byte.MIN_VALUE;
}
}

protected final void initNOBSMSV(String s) {
if (!s.trim().isEmpty()) {
NOBSMSV = Byte.parseByte(s);
} else {
NOBSMSV = Byte.MIN_VALUE;
}
}

protected final void initNOBSMUP(String s) {
if (!s.trim().isEmpty()) {
NOBSMUP = Byte.parseByte(s);
} else {
NOBSMUP = Byte.MIN_VALUE;
}
}

protected final void initNOWTBC95(String s) {
if (!s.trim().isEmpty()) {
NOWTBC95 = Byte.parseByte(s);
} else {
NOWTBC95 = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCBE(String s) {
if (!s.trim().isEmpty()) {
NOWTBCBE = Byte.parseByte(s);
} else {
NOWTBCBE = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCCH(String s) {
if (!s.trim().isEmpty()) {
NOWTBCCH = Byte.parseByte(s);
} else {
NOWTBCCH = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCHE(String s) {
if (!s.trim().isEmpty()) {
NOWTBCHE = Byte.parseByte(s);
} else {
NOWTBCHE = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCPA(String s) {
if (!s.trim().isEmpty()) {
NOWTBCPA = Byte.parseByte(s);
} else {
NOWTBCPA = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCSC(String s) {
if (!s.trim().isEmpty()) {
NOWTBCSC = Byte.parseByte(s);
} else {
NOWTBCSC = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCSH(String s) {
if (!s.trim().isEmpty()) {
NOWTBCSH = Byte.parseByte(s);
} else {
NOWTBCSH = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCST(String s) {
if (!s.trim().isEmpty()) {
NOWTBCST = Byte.parseByte(s);
} else {
NOWTBCST = Byte.MIN_VALUE;
}
}

protected final void initNOWTBCUN(String s) {
if (!s.trim().isEmpty()) {
NOWTBCUN = Byte.parseByte(s);
} else {
NOWTBCUN = Byte.MIN_VALUE;
}
}

protected final void initNURELIG(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
NURELIG = false;
} else {
NURELIG = true;
}
}
}

protected final void initORDCON(String s) {
if (!s.trim().isEmpty()) {
ORDCON = Byte.parseByte(s);
} else {
ORDCON = Byte.MIN_VALUE;
}
}

protected final void initPAINHH(String s) {
if (!s.trim().isEmpty()) {
PAINHH = Byte.parseByte(s);
} else {
PAINHH = Byte.MIN_VALUE;
}
}

protected final void initPC_P_F(String s) {
if (!s.trim().isEmpty()) {
PC_P_F = Byte.parseByte(s);
} else {
PC_P_F = Byte.MIN_VALUE;
}
}

protected final void initPC_P_I(String s) {
if (!s.trim().isEmpty()) {
PC_P_I = Double.parseDouble(s);
} else {
PC_P_I = Double.NaN;
}
}

protected final void initPC_P_O(String s) {
if (!s.trim().isEmpty()) {
PC_P_O = Short.parseShort(s);
} else {
PC_P_O = Short.MIN_VALUE;
}
}

protected final void initPC_P_T(String s) {
if (!s.trim().isEmpty()) {
PC_P_T = Short.parseShort(s);
} else {
PC_P_T = Short.MIN_VALUE;
}
}

protected final void initPC_R_F(String s) {
if (!s.trim().isEmpty()) {
PC_R_F = Byte.parseByte(s);
} else {
PC_R_F = Byte.MIN_VALUE;
}
}

protected final void initPC_R_I(String s) {
if (!s.trim().isEmpty()) {
PC_R_I = Double.parseDouble(s);
} else {
PC_R_I = Double.NaN;
}
}

protected final void initPC_R_O(String s) {
if (!s.trim().isEmpty()) {
PC_R_O = Short.parseShort(s);
} else {
PC_R_O = Short.MIN_VALUE;
}
}

protected final void initPC_R_T(String s) {
if (!s.trim().isEmpty()) {
PC_R_T = Short.parseShort(s);
} else {
PC_R_T = Short.MIN_VALUE;
}
}

protected final void initPIP_P_F(String s) {
if (!s.trim().isEmpty()) {
PIP_P_F = Byte.parseByte(s);
} else {
PIP_P_F = Byte.MIN_VALUE;
}
}

protected final void initPIP_P_I(String s) {
if (!s.trim().isEmpty()) {
PIP_P_I = Double.parseDouble(s);
} else {
PIP_P_I = Double.NaN;
}
}

protected final void initPIP_P_O(String s) {
if (!s.trim().isEmpty()) {
PIP_P_O = Short.parseShort(s);
} else {
PIP_P_O = Short.MIN_VALUE;
}
}

protected final void initPIP_P_T(String s) {
if (!s.trim().isEmpty()) {
PIP_P_T = Short.parseShort(s);
} else {
PIP_P_T = Short.MIN_VALUE;
}
}

protected final void initPIP_R_F(String s) {
if (!s.trim().isEmpty()) {
PIP_R_F = Byte.parseByte(s);
} else {
PIP_R_F = Byte.MIN_VALUE;
}
}

protected final void initPIP_R_I(String s) {
if (!s.trim().isEmpty()) {
PIP_R_I = Double.parseDouble(s);
} else {
PIP_R_I = Double.NaN;
}
}

protected final void initPIP_R_O(String s) {
if (!s.trim().isEmpty()) {
PIP_R_O = Short.parseShort(s);
} else {
PIP_R_O = Short.MIN_VALUE;
}
}

protected final void initPIP_R_T(String s) {
if (!s.trim().isEmpty()) {
PIP_R_T = Short.parseShort(s);
} else {
PIP_R_T = Short.MIN_VALUE;
}
}

protected final void initPSMNTA(String s) {
if (!s.trim().isEmpty()) {
PSMNTA = Byte.parseByte(s);
} else {
PSMNTA = Byte.MIN_VALUE;
}
}

protected final void initPSMNTB(String s) {
if (!s.trim().isEmpty()) {
PSMNTB = Byte.parseByte(s);
} else {
PSMNTB = Byte.MIN_VALUE;
}
}

protected final void initPULSE1(String s) {
if (!s.trim().isEmpty()) {
PULSE1 = Short.parseShort(s);
} else {
PULSE1 = Short.MIN_VALUE;
}
}

protected final void initPULSE2(String s) {
if (!s.trim().isEmpty()) {
PULSE2 = Short.parseShort(s);
} else {
PULSE2 = Short.MIN_VALUE;
}
}

protected final void initPULSE3(String s) {
if (!s.trim().isEmpty()) {
PULSE3 = Short.parseShort(s);
} else {
PULSE3 = Short.MIN_VALUE;
}
}

protected final void initPULVAL(String s) {
if (!s.trim().isEmpty()) {
PULVAL = Double.parseDouble(s);
} else {
PULVAL = Double.NaN;
}
}

protected final void initREFBSC95(String s) {
if (!s.trim().isEmpty()) {
REFBSC95 = Byte.parseByte(s);
} else {
REFBSC95 = Byte.MIN_VALUE;
}
}

protected final void initREFBSCDI(String s) {
if (!s.trim().isEmpty()) {
REFBSCDI = Byte.parseByte(s);
} else {
REFBSCDI = Byte.MIN_VALUE;
}
}

protected final void initREFBSCHI(String s) {
if (!s.trim().isEmpty()) {
REFBSCHI = Byte.parseByte(s);
} else {
REFBSCHI = Byte.MIN_VALUE;
}
}

protected final void initREFBSCIL(String s) {
if (!s.trim().isEmpty()) {
REFBSCIL = Byte.parseByte(s);
} else {
REFBSCIL = Byte.MIN_VALUE;
}
}

protected final void initREFBSCNE(String s) {
if (!s.trim().isEmpty()) {
REFBSCNE = Byte.parseByte(s);
} else {
REFBSCNE = Byte.MIN_VALUE;
}
}

protected final void initREFBSCTE(String s) {
if (!s.trim().isEmpty()) {
REFBSCTE = Byte.parseByte(s);
} else {
REFBSCTE = Byte.MIN_VALUE;
}
}

protected final void initRELWAIT(String s) {
if (!s.trim().isEmpty()) {
RELWAIT = Byte.parseByte(s);
} else {
RELWAIT = Byte.MIN_VALUE;
}
}

protected final void initRESNWT(String s) {
if (!s.trim().isEmpty()) {
RESNWT = Byte.parseByte(s);
} else {
RESNWT = Byte.MIN_VALUE;
}
}

protected final void initRESPBPS(String s) {
if (!s.trim().isEmpty()) {
RESPBPS = Byte.parseByte(s);
} else {
RESPBPS = Byte.MIN_VALUE;
}
}

protected final void initRESPWTS(String s) {
if (!s.trim().isEmpty()) {
RESPWTS = Byte.parseByte(s);
} else {
RESPWTS = Byte.MIN_VALUE;
}
}

protected final void initRTIN(String s) {
if (!s.trim().isEmpty()) {
RTIN = Short.parseShort(s);
} else {
RTIN = Short.MIN_VALUE;
}
}

protected final void initSAMDIF95(String s) {
if (!s.trim().isEmpty()) {
SAMDIF95 = Byte.parseByte(s);
} else {
SAMDIF95 = Byte.MIN_VALUE;
}
}

protected final void initSAMDIFFA(String s) {
if (!s.trim().isEmpty()) {
SAMDIFFA = Byte.parseByte(s);
} else {
SAMDIFFA = Byte.MIN_VALUE;
}
}

protected final void initSAMDIFIN(String s) {
if (!s.trim().isEmpty()) {
SAMDIFIN = Byte.parseByte(s);
} else {
SAMDIFIN = Byte.MIN_VALUE;
}
}

protected final void initSAMDIFNO(String s) {
if (!s.trim().isEmpty()) {
SAMDIFNO = Byte.parseByte(s);
} else {
SAMDIFNO = Byte.MIN_VALUE;
}
}

protected final void initSAMDIFSE(String s) {
if (!s.trim().isEmpty()) {
SAMDIFSE = Byte.parseByte(s);
} else {
SAMDIFSE = Byte.MIN_VALUE;
}
}

protected final void initSAMDIFTO(String s) {
if (!s.trim().isEmpty()) {
SAMDIFTO = Byte.parseByte(s);
} else {
SAMDIFTO = Byte.MIN_VALUE;
}
}

protected final void initSAMDIFVE(String s) {
if (!s.trim().isEmpty()) {
SAMDIFVE = Byte.parseByte(s);
} else {
SAMDIFVE = Byte.MIN_VALUE;
}
}

protected final void initSAMPTAK(String s) {
if (!s.trim().isEmpty()) {
SAMPTAK = Byte.parseByte(s);
} else {
SAMPTAK = Byte.MIN_VALUE;
}
}

protected final void initSAMPTYP(String s) {
if (!s.trim().isEmpty()) {
SAMPTYP = s;
}
}

protected final void initSCACTA(String s) {
if (!s.trim().isEmpty()) {
SCACTA = Byte.parseByte(s);
} else {
SCACTA = Byte.MIN_VALUE;
}
}

protected final void initSCACTB(String s) {
if (!s.trim().isEmpty()) {
SCACTB = Byte.parseByte(s);
} else {
SCACTB = Byte.MIN_VALUE;
}
}

protected final void initSCACTC(String s) {
if (!s.trim().isEmpty()) {
SCACTC = Byte.parseByte(s);
} else {
SCACTC = Byte.MIN_VALUE;
}
}

protected final void initSCACTD(String s) {
if (!s.trim().isEmpty()) {
SCACTD = Byte.parseByte(s);
} else {
SCACTD = Byte.MIN_VALUE;
}
}

protected final void initSCAGLIK(String s) {
if (!s.trim().isEmpty()) {
SCAGLIK = Byte.parseByte(s);
} else {
SCAGLIK = Byte.MIN_VALUE;
}
}

protected final void initSCAKO(String s) {
if (!s.trim().isEmpty()) {
SCAKO = Byte.parseByte(s);
} else {
SCAKO = Byte.MIN_VALUE;
}
}

protected final void initSCAL7A(String s) {
if (!s.trim().isEmpty()) {
SCAL7A = Byte.parseByte(s);
} else {
SCAL7A = Byte.MIN_VALUE;
}
}

protected final void initSCAL7B(String s) {
if (!s.trim().isEmpty()) {
SCAL7B = Byte.parseByte(s);
} else {
SCAL7B = Byte.MIN_VALUE;
}
}

protected final void initSCCHDJ(String s) {
if (!s.trim().isEmpty()) {
SCCHDJ = Byte.parseByte(s);
} else {
SCCHDJ = Byte.MIN_VALUE;
}
}

protected final void initSCCHDK(String s) {
if (!s.trim().isEmpty()) {
SCCHDK = Byte.parseByte(s);
} else {
SCCHDK = Byte.MIN_VALUE;
}
}

protected final void initSCCNTA(String s) {
if (!s.trim().isEmpty()) {
SCCNTA = Byte.parseByte(s);
} else {
SCCNTA = Byte.MIN_VALUE;
}
}

protected final void initSCCNTB(String s) {
if (!s.trim().isEmpty()) {
SCCNTB = Byte.parseByte(s);
} else {
SCCNTB = Byte.MIN_VALUE;
}
}

protected final void initSCCNTC(String s) {
if (!s.trim().isEmpty()) {
SCCNTC = Byte.parseByte(s);
} else {
SCCNTC = Byte.MIN_VALUE;
}
}

protected final void initSCCNTD(String s) {
if (!s.trim().isEmpty()) {
SCCNTD = Byte.parseByte(s);
} else {
SCCNTD = Byte.MIN_VALUE;
}
}

protected final void initSCCNTE(String s) {
if (!s.trim().isEmpty()) {
SCCNTE = Byte.parseByte(s);
} else {
SCCNTE = Byte.MIN_VALUE;
}
}

protected final void initSCCNTF(String s) {
if (!s.trim().isEmpty()) {
SCCNTF = Byte.parseByte(s);
} else {
SCCNTF = Byte.MIN_VALUE;
}
}

protected final void initSCDRPIN(String s) {
if (!s.trim().isEmpty()) {
SCDRPIN = Byte.parseByte(s);
} else {
SCDRPIN = Byte.MIN_VALUE;
}
}

protected final void initSCDRSPI(String s) {
if (!s.trim().isEmpty()) {
SCDRSPI = Byte.parseByte(s);
} else {
SCDRSPI = Byte.MIN_VALUE;
}
}

protected final void initSCDRWIN(String s) {
if (!s.trim().isEmpty()) {
SCDRWIN = Byte.parseByte(s);
} else {
SCDRWIN = Byte.MIN_VALUE;
}
}

protected final void initSCEMPL(String s) {
if (!s.trim().isEmpty()) {
SCEMPL = Byte.parseByte(s);
} else {
SCEMPL = Byte.MIN_VALUE;
}
}

protected final void initSCEND(String s) {
if (!s.trim().isEmpty()) {
SCEND = Byte.parseByte(s);
} else {
SCEND = Byte.MIN_VALUE;
}
}

protected final void initSCFAMH(String s) {
if (!s.trim().isEmpty()) {
SCFAMH = Byte.parseByte(s);
} else {
SCFAMH = Byte.MIN_VALUE;
}
}

protected final void initSCFAMJ(String s) {
if (!s.trim().isEmpty()) {
SCFAMJ = Byte.parseByte(s);
} else {
SCFAMJ = Byte.MIN_VALUE;
}
}

protected final void initSCFAMK(String s) {
if (!s.trim().isEmpty()) {
SCFAMK = Byte.parseByte(s);
} else {
SCFAMK = Byte.MIN_VALUE;
}
}

protected final void initSCFAMM(String s) {
if (!s.trim().isEmpty()) {
SCFAMM = Byte.parseByte(s);
} else {
SCFAMM = Byte.MIN_VALUE;
}
}

protected final void initSCFEELA(String s) {
if (!s.trim().isEmpty()) {
SCFEELA = Byte.parseByte(s);
} else {
SCFEELA = Byte.MIN_VALUE;
}
}

protected final void initSCFEELB(String s) {
if (!s.trim().isEmpty()) {
SCFEELB = Byte.parseByte(s);
} else {
SCFEELB = Byte.MIN_VALUE;
}
}

protected final void initSCFEELC(String s) {
if (!s.trim().isEmpty()) {
SCFEELC = Byte.parseByte(s);
} else {
SCFEELC = Byte.MIN_VALUE;
}
}

protected final void initSCFEELD(String s) {
if (!s.trim().isEmpty()) {
SCFEELD = Byte.parseByte(s);
} else {
SCFEELD = Byte.MIN_VALUE;
}
}

protected final void initSCFEELE(String s) {
if (!s.trim().isEmpty()) {
SCFEELE = Byte.parseByte(s);
} else {
SCFEELE = Byte.MIN_VALUE;
}
}

protected final void initSCFPATI(String s) {
if (!s.trim().isEmpty()) {
SCFPATI = Byte.parseByte(s);
} else {
SCFPATI = Byte.MIN_VALUE;
}
}

protected final void initSCFRDJ(String s) {
if (!s.trim().isEmpty()) {
SCFRDJ = Byte.parseByte(s);
} else {
SCFRDJ = Byte.MIN_VALUE;
}
}

protected final void initSCFRDK(String s) {
if (!s.trim().isEmpty()) {
SCFRDK = Byte.parseByte(s);
} else {
SCFRDK = Byte.MIN_VALUE;
}
}

protected final void initSCFRDM(String s) {
if (!s.trim().isEmpty()) {
SCFRDM = Byte.parseByte(s);
} else {
SCFRDM = Byte.MIN_VALUE;
}
}

protected final void initSCFRISK(String s) {
if (!s.trim().isEmpty()) {
SCFRISK = Byte.parseByte(s);
} else {
SCFRISK = Byte.MIN_VALUE;
}
}

protected final void initSCFRU(String s) {
if (!s.trim().isEmpty()) {
SCFRU = Byte.parseByte(s);
} else {
SCFRU = Byte.MIN_VALUE;
}
}

protected final void initSCGPATI(String s) {
if (!s.trim().isEmpty()) {
SCGPATI = Byte.parseByte(s);
} else {
SCGPATI = Byte.MIN_VALUE;
}
}

protected final void initSCGRISK(String s) {
if (!s.trim().isEmpty()) {
SCGRISK = Byte.parseByte(s);
} else {
SCGRISK = Byte.MIN_VALUE;
}
}

protected final void initSCHBODY(String s) {
if (!s.trim().isEmpty()) {
SCHBODY = Byte.parseByte(s);
} else {
SCHBODY = Byte.MIN_VALUE;
}
}

protected final void initSCHDECI(String s) {
if (!s.trim().isEmpty()) {
SCHDECI = Byte.parseByte(s);
} else {
SCHDECI = Byte.MIN_VALUE;
}
}

protected final void initSCHEBOW(String s) {
if (!s.trim().isEmpty()) {
SCHEBOW = Byte.parseByte(s);
} else {
SCHEBOW = Byte.MIN_VALUE;
}
}

protected final void initSCHEBOWA(String s) {
if (!s.trim().isEmpty()) {
SCHEBOWA = Byte.parseByte(s);
} else {
SCHEBOWA = Byte.MIN_VALUE;
}
}

protected final void initSCHELNCT(String s) {
if (!s.trim().isEmpty()) {
SCHELNCT = Byte.parseByte(s);
} else {
SCHELNCT = Byte.MIN_VALUE;
}
}

protected final void initSCHELNCTA(String s) {
if (!s.trim().isEmpty()) {
SCHELNCTA = Byte.parseByte(s);
} else {
SCHELNCTA = Byte.MIN_VALUE;
}
}

protected final void initSCHEXPT(String s) {
if (!s.trim().isEmpty()) {
SCHEXPT = Byte.parseByte(s);
} else {
SCHEXPT = Byte.MIN_VALUE;
}
}

protected final void initSCHPATI(String s) {
if (!s.trim().isEmpty()) {
SCHPATI = Byte.parseByte(s);
} else {
SCHPATI = Byte.MIN_VALUE;
}
}

protected final void initSCHQUAL(String s) {
if (!s.trim().isEmpty()) {
SCHQUAL = Byte.parseByte(s);
} else {
SCHQUAL = Byte.MIN_VALUE;
}
}

protected final void initSCHRISK(String s) {
if (!s.trim().isEmpty()) {
SCHRISK = Byte.parseByte(s);
} else {
SCHRISK = Byte.MIN_VALUE;
}
}

protected final void initSCINA95(String s) {
if (!s.trim().isEmpty()) {
SCINA95 = Byte.parseByte(s);
} else {
SCINA95 = Byte.MIN_VALUE;
}
}

protected final void initSCINA96(String s) {
if (!s.trim().isEmpty()) {
SCINA96 = Byte.parseByte(s);
} else {
SCINA96 = Byte.MIN_VALUE;
}
}

protected final void initSCINABK(String s) {
if (!s.trim().isEmpty()) {
SCINABK = Byte.parseByte(s);
} else {
SCINABK = Byte.MIN_VALUE;
}
}

protected final void initSCINACL(String s) {
if (!s.trim().isEmpty()) {
SCINACL = Byte.parseByte(s);
} else {
SCINACL = Byte.MIN_VALUE;
}
}

protected final void initSCINACT(String s) {
if (!s.trim().isEmpty()) {
SCINACT = Byte.parseByte(s);
} else {
SCINACT = Byte.MIN_VALUE;
}
}

protected final void initSCINAED(String s) {
if (!s.trim().isEmpty()) {
SCINAED = Byte.parseByte(s);
} else {
SCINAED = Byte.MIN_VALUE;
}
}

protected final void initSCINAEM(String s) {
if (!s.trim().isEmpty()) {
SCINAEM = Byte.parseByte(s);
} else {
SCINAEM = Byte.MIN_VALUE;
}
}

protected final void initSCINAGM(String s) {
if (!s.trim().isEmpty()) {
SCINAGM = Byte.parseByte(s);
} else {
SCINAGM = Byte.MIN_VALUE;
}
}

protected final void initSCINAJB(String s) {
if (!s.trim().isEmpty()) {
SCINAJB = Byte.parseByte(s);
} else {
SCINAJB = Byte.MIN_VALUE;
}
}

protected final void initSCINANW(String s) {
if (!s.trim().isEmpty()) {
SCINANW = Byte.parseByte(s);
} else {
SCINANW = Byte.MIN_VALUE;
}
}

protected final void initSCINAPS(String s) {
if (!s.trim().isEmpty()) {
SCINAPS = Byte.parseByte(s);
} else {
SCINAPS = Byte.MIN_VALUE;
}
}

protected final void initSCINASH(String s) {
if (!s.trim().isEmpty()) {
SCINASH = Byte.parseByte(s);
} else {
SCINASH = Byte.MIN_VALUE;
}
}

protected final void initSCINASL(String s) {
if (!s.trim().isEmpty()) {
SCINASL = Byte.parseByte(s);
} else {
SCINASL = Byte.MIN_VALUE;
}
}

protected final void initSCINASN(String s) {
if (!s.trim().isEmpty()) {
SCINASN = Byte.parseByte(s);
} else {
SCINASN = Byte.MIN_VALUE;
}
}

protected final void initSCINAST(String s) {
if (!s.trim().isEmpty()) {
SCINAST = Byte.parseByte(s);
} else {
SCINAST = Byte.MIN_VALUE;
}
}

protected final void initSCIND95(String s) {
if (!s.trim().isEmpty()) {
SCIND95 = Byte.parseByte(s);
} else {
SCIND95 = Byte.MIN_VALUE;
}
}

protected final void initSCIND96(String s) {
if (!s.trim().isEmpty()) {
SCIND96 = Byte.parseByte(s);
} else {
SCIND96 = Byte.MIN_VALUE;
}
}

protected final void initSCINDDT(String s) {
if (!s.trim().isEmpty()) {
SCINDDT = Byte.parseByte(s);
} else {
SCINDDT = Byte.MIN_VALUE;
}
}

protected final void initSCINDLT(String s) {
if (!s.trim().isEmpty()) {
SCINDLT = Byte.parseByte(s);
} else {
SCINDLT = Byte.MIN_VALUE;
}
}

protected final void initSCINDPH(String s) {
if (!s.trim().isEmpty()) {
SCINDPH = Byte.parseByte(s);
} else {
SCINDPH = Byte.MIN_VALUE;
}
}

protected final void initSCINDTB(String s) {
if (!s.trim().isEmpty()) {
SCINDTB = Byte.parseByte(s);
} else {
SCINDTB = Byte.MIN_VALUE;
}
}

protected final void initSCINT(String s) {
if (!s.trim().isEmpty()) {
SCINT = Byte.parseByte(s);
} else {
SCINT = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEA(String s) {
if (!s.trim().isEmpty()) {
SCLIFEA = Byte.parseByte(s);
} else {
SCLIFEA = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEB(String s) {
if (!s.trim().isEmpty()) {
SCLIFEB = Byte.parseByte(s);
} else {
SCLIFEB = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEC(String s) {
if (!s.trim().isEmpty()) {
SCLIFEC = Byte.parseByte(s);
} else {
SCLIFEC = Byte.MIN_VALUE;
}
}

protected final void initSCLIFED(String s) {
if (!s.trim().isEmpty()) {
SCLIFED = Byte.parseByte(s);
} else {
SCLIFED = Byte.MIN_VALUE;
}
}

protected final void initSCLIFEE(String s) {
if (!s.trim().isEmpty()) {
SCLIFEE = Byte.parseByte(s);
} else {
SCLIFEE = Byte.MIN_VALUE;
}
}

protected final void initSCMENA(String s) {
if (!s.trim().isEmpty()) {
SCMENA = Byte.parseByte(s);
} else {
SCMENA = Byte.MIN_VALUE;
}
}

protected final void initSCMENB(String s) {
if (!s.trim().isEmpty()) {
SCMENB = Byte.parseByte(s);
} else {
SCMENB = Byte.MIN_VALUE;
}
}

protected final void initSCMENC(String s) {
if (!s.trim().isEmpty()) {
SCMENC = Byte.parseByte(s);
} else {
SCMENC = Byte.MIN_VALUE;
}
}

protected final void initSCMEND(String s) {
if (!s.trim().isEmpty()) {
SCMEND = Byte.parseByte(s);
} else {
SCMEND = Byte.MIN_VALUE;
}
}

protected final void initSCMOREA(String s) {
if (!s.trim().isEmpty()) {
SCMOREA = Byte.parseByte(s);
} else {
SCMOREA = Byte.MIN_VALUE;
}
}

protected final void initSCMOREB(String s) {
if (!s.trim().isEmpty()) {
SCMOREB = Byte.parseByte(s);
} else {
SCMOREB = Byte.MIN_VALUE;
}
}

protected final void initSCMOREC(String s) {
if (!s.trim().isEmpty()) {
SCMOREC = Byte.parseByte(s);
} else {
SCMOREC = Byte.MIN_VALUE;
}
}

protected final void initSCMORED(String s) {
if (!s.trim().isEmpty()) {
SCMORED = Byte.parseByte(s);
} else {
SCMORED = Byte.MIN_VALUE;
}
}

protected final void initSCOABOTH(String s) {
if (!s.trim().isEmpty()) {
SCOABOTH = Byte.parseByte(s);
} else {
SCOABOTH = Byte.MIN_VALUE;
}
}

protected final void initSCOADO(String s) {
if (!s.trim().isEmpty()) {
SCOADO = Byte.parseByte(s);
} else {
SCOADO = Byte.MIN_VALUE;
}
}

protected final void initSCOAGRAM(String s) {
if (!s.trim().isEmpty()) {
SCOAGRAM = Byte.parseByte(s);
} else {
SCOAGRAM = Byte.MIN_VALUE;
}
}

protected final void initSCOAHLTH(String s) {
if (!s.trim().isEmpty()) {
SCOAHLTH = Byte.parseByte(s);
} else {
SCOAHLTH = Byte.MIN_VALUE;
}
}

protected final void initSCOAILL(String s) {
if (!s.trim().isEmpty()) {
SCOAILL = Byte.parseByte(s);
} else {
SCOAILL = Byte.MIN_VALUE;
}
}

protected final void initSCOALEIS(String s) {
if (!s.trim().isEmpty()) {
SCOALEIS = Byte.parseByte(s);
} else {
SCOALEIS = Byte.MIN_VALUE;
}
}

protected final void initSCOALON(String s) {
if (!s.trim().isEmpty()) {
SCOALON = Byte.parseByte(s);
} else {
SCOALON = Byte.MIN_VALUE;
}
}

protected final void initSCOAOLD(String s) {
if (!s.trim().isEmpty()) {
SCOAOLD = Byte.parseByte(s);
} else {
SCOAOLD = Byte.MIN_VALUE;
}
}

protected final void initSCOAOP(String s) {
if (!s.trim().isEmpty()) {
SCOAOP = Byte.parseByte(s);
} else {
SCOAOP = Byte.MIN_VALUE;
}
}

protected final void initSCOARESP(String s) {
if (!s.trim().isEmpty()) {
SCOARESP = Byte.parseByte(s);
} else {
SCOARESP = Byte.MIN_VALUE;
}
}

protected final void initSCOATLON(String s) {
if (!s.trim().isEmpty()) {
SCOATLON = Byte.parseByte(s);
} else {
SCOATLON = Byte.MIN_VALUE;
}
}

protected final void initSCOATOL(String s) {
if (!s.trim().isEmpty()) {
SCOATOL = Byte.parseByte(s);
} else {
SCOATOL = Byte.MIN_VALUE;
}
}

protected final void initSCOFEEL(String s) {
if (!s.trim().isEmpty()) {
SCOFEEL = Short.parseShort(s);
} else {
SCOFEEL = Short.MIN_VALUE;
}
}

protected final void initSCOLDPOS(String s) {
if (!s.trim().isEmpty()) {
SCOLDPOS = Byte.parseByte(s);
} else {
SCOLDPOS = Byte.MIN_VALUE;
}
}

protected final void initSCORG95(String s) {
if (!s.trim().isEmpty()) {
SCORG95 = Byte.parseByte(s);
} else {
SCORG95 = Byte.MIN_VALUE;
}
}

protected final void initSCORG96(String s) {
if (!s.trim().isEmpty()) {
SCORG96 = Byte.parseByte(s);
} else {
SCORG96 = Byte.MIN_VALUE;
}
}

protected final void initSCORGCH(String s) {
if (!s.trim().isEmpty()) {
SCORGCH = Byte.parseByte(s);
} else {
SCORGCH = Byte.MIN_VALUE;
}
}

protected final void initSCORGED(String s) {
if (!s.trim().isEmpty()) {
SCORGED = Byte.parseByte(s);
} else {
SCORGED = Byte.MIN_VALUE;
}
}

protected final void initSCORGNW(String s) {
if (!s.trim().isEmpty()) {
SCORGNW = Byte.parseByte(s);
} else {
SCORGNW = Byte.MIN_VALUE;
}
}

protected final void initSCORGPO(String s) {
if (!s.trim().isEmpty()) {
SCORGPO = Byte.parseByte(s);
} else {
SCORGPO = Byte.MIN_VALUE;
}
}

protected final void initSCORGRL(String s) {
if (!s.trim().isEmpty()) {
SCORGRL = Byte.parseByte(s);
} else {
SCORGRL = Byte.MIN_VALUE;
}
}

protected final void initSCORGSC(String s) {
if (!s.trim().isEmpty()) {
SCORGSC = Byte.parseByte(s);
} else {
SCORGSC = Byte.MIN_VALUE;
}
}

protected final void initSCORGSP(String s) {
if (!s.trim().isEmpty()) {
SCORGSP = Byte.parseByte(s);
} else {
SCORGSP = Byte.MIN_VALUE;
}
}

protected final void initSCOVAN(String s) {
if (!s.trim().isEmpty()) {
SCOVAN = Byte.parseByte(s);
} else {
SCOVAN = Byte.MIN_VALUE;
}
}

protected final void initSCOVHA(String s) {
if (!s.trim().isEmpty()) {
SCOVHA = Byte.parseByte(s);
} else {
SCOVHA = Byte.MIN_VALUE;
}
}

protected final void initSCOVSA(String s) {
if (!s.trim().isEmpty()) {
SCOVSA = Byte.parseByte(s);
} else {
SCOVSA = Byte.MIN_VALUE;
}
}

protected final void initSCOVWO(String s) {
if (!s.trim().isEmpty()) {
SCOVWO = Byte.parseByte(s);
} else {
SCOVWO = Byte.MIN_VALUE;
}
}

protected final void initSCPRT(String s) {
if (!s.trim().isEmpty()) {
SCPRT = Byte.parseByte(s);
} else {
SCPRT = Byte.MIN_VALUE;
}
}

protected final void initSCPRTA(String s) {
if (!s.trim().isEmpty()) {
SCPRTA = Byte.parseByte(s);
} else {
SCPRTA = Byte.MIN_VALUE;
}
}

protected final void initSCPRTB(String s) {
if (!s.trim().isEmpty()) {
SCPRTB = Byte.parseByte(s);
} else {
SCPRTB = Byte.MIN_VALUE;
}
}

protected final void initSCPRTC(String s) {
if (!s.trim().isEmpty()) {
SCPRTC = Byte.parseByte(s);
} else {
SCPRTC = Byte.MIN_VALUE;
}
}

protected final void initSCPRTD(String s) {
if (!s.trim().isEmpty()) {
SCPRTD = Byte.parseByte(s);
} else {
SCPRTD = Byte.MIN_VALUE;
}
}

protected final void initSCPRTE(String s) {
if (!s.trim().isEmpty()) {
SCPRTE = Byte.parseByte(s);
} else {
SCPRTE = Byte.MIN_VALUE;
}
}

protected final void initSCPRTF(String s) {
if (!s.trim().isEmpty()) {
SCPRTF = Byte.parseByte(s);
} else {
SCPRTF = Byte.MIN_VALUE;
}
}

protected final void initSCPRTG(String s) {
if (!s.trim().isEmpty()) {
SCPRTG = Byte.parseByte(s);
} else {
SCPRTG = Byte.MIN_VALUE;
}
}

protected final void initSCPRTM(String s) {
if (!s.trim().isEmpty()) {
SCPRTM = Byte.parseByte(s);
} else {
SCPRTM = Byte.MIN_VALUE;
}
}

protected final void initSCPTR96(String s) {
if (!s.trim().isEmpty()) {
SCPTR96 = Byte.parseByte(s);
} else {
SCPTR96 = Byte.MIN_VALUE;
}
}

protected final void initSCPTRAB(String s) {
if (!s.trim().isEmpty()) {
SCPTRAB = Byte.parseByte(s);
} else {
SCPTRAB = Byte.MIN_VALUE;
}
}

protected final void initSCPTRHB(String s) {
if (!s.trim().isEmpty()) {
SCPTRHB = Byte.parseByte(s);
} else {
SCPTRHB = Byte.MIN_VALUE;
}
}

protected final void initSCPTRMP(String s) {
if (!s.trim().isEmpty()) {
SCPTRMP = Byte.parseByte(s);
} else {
SCPTRMP = Byte.MIN_VALUE;
}
}

protected final void initSCPTRNP(String s) {
if (!s.trim().isEmpty()) {
SCPTRNP = Byte.parseByte(s);
} else {
SCPTRNP = Byte.MIN_VALUE;
}
}

protected final void initSCPTRTR(String s) {
if (!s.trim().isEmpty()) {
SCPTRTR = Byte.parseByte(s);
} else {
SCPTRTR = Byte.MIN_VALUE;
}
}

protected final void initSCPTRUK(String s) {
if (!s.trim().isEmpty()) {
SCPTRUK = Byte.parseByte(s);
} else {
SCPTRUK = Byte.MIN_VALUE;
}
}

protected final void initSCPTRVT(String s) {
if (!s.trim().isEmpty()) {
SCPTRVT = Byte.parseByte(s);
} else {
SCPTRVT = Byte.MIN_VALUE;
}
}

protected final void initSCRTAGB(String s) {
if (!s.trim().isEmpty()) {
SCRTAGB = Byte.parseByte(s);
} else {
SCRTAGB = Byte.MIN_VALUE;
}
}

protected final void initSCRTAGE(String s) {
if (!s.trim().isEmpty()) {
SCRTAGE = Short.parseShort(s);
} else {
SCRTAGE = Short.MIN_VALUE;
}
}

protected final void initSCVEG(String s) {
if (!s.trim().isEmpty()) {
SCVEG = Byte.parseByte(s);
} else {
SCVEG = Byte.MIN_VALUE;
}
}

protected final void initSCWORKA(String s) {
if (!s.trim().isEmpty()) {
SCWORKA = Byte.parseByte(s);
} else {
SCWORKA = Byte.MIN_VALUE;
}
}

protected final void initSCWORKB(String s) {
if (!s.trim().isEmpty()) {
SCWORKB = Byte.parseByte(s);
} else {
SCWORKB = Byte.MIN_VALUE;
}
}

protected final void initSCWORKC(String s) {
if (!s.trim().isEmpty()) {
SCWORKC = Byte.parseByte(s);
} else {
SCWORKC = Byte.MIN_VALUE;
}
}

protected final void initSCWORKD(String s) {
if (!s.trim().isEmpty()) {
SCWORKD = Byte.parseByte(s);
} else {
SCWORKD = Byte.MIN_VALUE;
}
}

protected final void initSCWORKE(String s) {
if (!s.trim().isEmpty()) {
SCWORKE = Byte.parseByte(s);
} else {
SCWORKE = Byte.MIN_VALUE;
}
}

protected final void initSCWORKF(String s) {
if (!s.trim().isEmpty()) {
SCWORKF = Byte.parseByte(s);
} else {
SCWORKF = Byte.MIN_VALUE;
}
}

protected final void initSCWORKG(String s) {
if (!s.trim().isEmpty()) {
SCWORKG = Byte.parseByte(s);
} else {
SCWORKG = Byte.MIN_VALUE;
}
}

protected final void initSCWORKH(String s) {
if (!s.trim().isEmpty()) {
SCWORKH = Byte.parseByte(s);
} else {
SCWORKH = Byte.MIN_VALUE;
}
}

protected final void initSCWORKI(String s) {
if (!s.trim().isEmpty()) {
SCWORKI = Byte.parseByte(s);
} else {
SCWORKI = Byte.MIN_VALUE;
}
}

protected final void initSCWORKJ(String s) {
if (!s.trim().isEmpty()) {
SCWORKJ = Byte.parseByte(s);
} else {
SCWORKJ = Byte.MIN_VALUE;
}
}

protected final void initSCWORKK(String s) {
if (!s.trim().isEmpty()) {
SCWORKK = Byte.parseByte(s);
} else {
SCWORKK = Byte.MIN_VALUE;
}
}

protected final void initSCWORKL(String s) {
if (!s.trim().isEmpty()) {
SCWORKL = Byte.parseByte(s);
} else {
SCWORKL = Byte.MIN_VALUE;
}
}

protected final void initSPAAGEYR(String s) {
if (!s.trim().isEmpty()) {
SPAAGEYR = Byte.parseByte(s);
} else {
SPAAGEYR = Byte.MIN_VALUE;
}
}

protected final void initSPADYR(String s) {
if (!s.trim().isEmpty()) {
SPADYR = Short.parseShort(s);
} else {
SPADYR = Short.MIN_VALUE;
}
}

protected final void initSPBSPS(String s) {
if (!s.trim().isEmpty()) {
SPBSPS = Byte.parseByte(s);
} else {
SPBSPS = Byte.MIN_VALUE;
}
}

protected final void initSPBSTM(String s) {
if (!s.trim().isEmpty()) {
SPBSTM = Byte.parseByte(s);
} else {
SPBSTM = Byte.MIN_VALUE;
}
}

protected final void initSPCARA(String s) {
if (!s.trim().isEmpty()) {
SPCARA = Byte.parseByte(s);
} else {
SPCARA = Byte.MIN_VALUE;
}
}

protected final void initSPCARB(String s) {
if (!s.trim().isEmpty()) {
SPCARB = Byte.parseByte(s);
} else {
SPCARB = Byte.MIN_VALUE;
}
}

protected final void initSPDTDT(String s) {
if (!s.trim().isEmpty()) {
SPDTDT = Byte.parseByte(s);
} else {
SPDTDT = Byte.MIN_VALUE;
}
}

protected final void initSPHOSP(String s) {
if (!s.trim().isEmpty()) {
SPHOSP = Byte.parseByte(s);
} else {
SPHOSP = Byte.MIN_VALUE;
}
}

protected final void initSPLIFT(String s) {
if (!s.trim().isEmpty()) {
SPLIFT = Byte.parseByte(s);
} else {
SPLIFT = Byte.MIN_VALUE;
}
}

protected final void initSPTAXI(String s) {
if (!s.trim().isEmpty()) {
SPTAXI = Byte.parseByte(s);
} else {
SPTAXI = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB1(String s) {
if (!s.trim().isEmpty()) {
SPTRAB1 = Byte.parseByte(s);
} else {
SPTRAB1 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB10(String s) {
if (!s.trim().isEmpty()) {
SPTRAB10 = Byte.parseByte(s);
} else {
SPTRAB10 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB11(String s) {
if (!s.trim().isEmpty()) {
SPTRAB11 = Byte.parseByte(s);
} else {
SPTRAB11 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB12(String s) {
if (!s.trim().isEmpty()) {
SPTRAB12 = Byte.parseByte(s);
} else {
SPTRAB12 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB2(String s) {
if (!s.trim().isEmpty()) {
SPTRAB2 = Byte.parseByte(s);
} else {
SPTRAB2 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB3(String s) {
if (!s.trim().isEmpty()) {
SPTRAB3 = Byte.parseByte(s);
} else {
SPTRAB3 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB4(String s) {
if (!s.trim().isEmpty()) {
SPTRAB4 = Byte.parseByte(s);
} else {
SPTRAB4 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB5(String s) {
if (!s.trim().isEmpty()) {
SPTRAB5 = Byte.parseByte(s);
} else {
SPTRAB5 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB6(String s) {
if (!s.trim().isEmpty()) {
SPTRAB6 = Byte.parseByte(s);
} else {
SPTRAB6 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB7(String s) {
if (!s.trim().isEmpty()) {
SPTRAB7 = Byte.parseByte(s);
} else {
SPTRAB7 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB8(String s) {
if (!s.trim().isEmpty()) {
SPTRAB8 = Byte.parseByte(s);
} else {
SPTRAB8 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB9(String s) {
if (!s.trim().isEmpty()) {
SPTRAB9 = Byte.parseByte(s);
} else {
SPTRAB9 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAB95(String s) {
if (!s.trim().isEmpty()) {
SPTRAB95 = Byte.parseByte(s);
} else {
SPTRAB95 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM1(String s) {
if (!s.trim().isEmpty()) {
SPTRAM1 = Byte.parseByte(s);
} else {
SPTRAM1 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM10(String s) {
if (!s.trim().isEmpty()) {
SPTRAM10 = Byte.parseByte(s);
} else {
SPTRAM10 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM11(String s) {
if (!s.trim().isEmpty()) {
SPTRAM11 = Byte.parseByte(s);
} else {
SPTRAM11 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM12(String s) {
if (!s.trim().isEmpty()) {
SPTRAM12 = Byte.parseByte(s);
} else {
SPTRAM12 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM13(String s) {
if (!s.trim().isEmpty()) {
SPTRAM13 = Byte.parseByte(s);
} else {
SPTRAM13 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM2(String s) {
if (!s.trim().isEmpty()) {
SPTRAM2 = Byte.parseByte(s);
} else {
SPTRAM2 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM3(String s) {
if (!s.trim().isEmpty()) {
SPTRAM3 = Byte.parseByte(s);
} else {
SPTRAM3 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM4(String s) {
if (!s.trim().isEmpty()) {
SPTRAM4 = Byte.parseByte(s);
} else {
SPTRAM4 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM5(String s) {
if (!s.trim().isEmpty()) {
SPTRAM5 = Byte.parseByte(s);
} else {
SPTRAM5 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM6(String s) {
if (!s.trim().isEmpty()) {
SPTRAM6 = Byte.parseByte(s);
} else {
SPTRAM6 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM7(String s) {
if (!s.trim().isEmpty()) {
SPTRAM7 = Byte.parseByte(s);
} else {
SPTRAM7 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM8(String s) {
if (!s.trim().isEmpty()) {
SPTRAM8 = Byte.parseByte(s);
} else {
SPTRAM8 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM85(String s) {
if (!s.trim().isEmpty()) {
SPTRAM85 = Byte.parseByte(s);
} else {
SPTRAM85 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM86(String s) {
if (!s.trim().isEmpty()) {
SPTRAM86 = Byte.parseByte(s);
} else {
SPTRAM86 = Byte.MIN_VALUE;
}
}

protected final void initSPTRAM9(String s) {
if (!s.trim().isEmpty()) {
SPTRAM9 = Byte.parseByte(s);
} else {
SPTRAM9 = Byte.MIN_VALUE;
}
}

protected final void initSPTRO1(String s) {
if (!s.trim().isEmpty()) {
SPTRO1 = Byte.parseByte(s);
} else {
SPTRO1 = Byte.MIN_VALUE;
}
}

protected final void initSPTRO2(String s) {
if (!s.trim().isEmpty()) {
SPTRO2 = Byte.parseByte(s);
} else {
SPTRO2 = Byte.MIN_VALUE;
}
}

protected final void initSPTRO3(String s) {
if (!s.trim().isEmpty()) {
SPTRO3 = Byte.parseByte(s);
} else {
SPTRO3 = Byte.MIN_VALUE;
}
}

protected final void initSPTRO4(String s) {
if (!s.trim().isEmpty()) {
SPTRO4 = Byte.parseByte(s);
} else {
SPTRO4 = Byte.MIN_VALUE;
}
}

protected final void initSPTRO5(String s) {
if (!s.trim().isEmpty()) {
SPTRO5 = Byte.parseByte(s);
} else {
SPTRO5 = Byte.MIN_VALUE;
}
}

protected final void initSPTRO96(String s) {
if (!s.trim().isEmpty()) {
SPTRO96 = Byte.parseByte(s);
} else {
SPTRO96 = Byte.MIN_VALUE;
}
}

protected final void initSTATINA(String s) {
if (!s.trim().isEmpty()) {
STATINA = Byte.parseByte(s);
} else {
STATINA = Byte.MIN_VALUE;
}
}

protected final void initSTATINS(String s) {
if (!s.trim().isEmpty()) {
STATINS = Byte.parseByte(s);
} else {
STATINS = Byte.MIN_VALUE;
}
}

protected final void initSYS1(String s) {
if (!s.trim().isEmpty()) {
SYS1 = Short.parseShort(s);
} else {
SYS1 = Short.MIN_VALUE;
}
}

protected final void initSYS2(String s) {
if (!s.trim().isEmpty()) {
SYS2 = Short.parseShort(s);
} else {
SYS2 = Short.MIN_VALUE;
}
}

protected final void initSYS3(String s) {
if (!s.trim().isEmpty()) {
SYS3 = Short.parseShort(s);
} else {
SYS3 = Short.MIN_VALUE;
}
}

protected final void initSYSVAL(String s) {
if (!s.trim().isEmpty()) {
SYSVAL = Double.parseDouble(s);
} else {
SYSVAL = Double.NaN;
}
}

protected final void initTRIG(String s) {
if (!s.trim().isEmpty()) {
TRIG = Double.parseDouble(s);
} else {
TRIG = Double.NaN;
}
}

protected final void initUC_P_F(String s) {
if (!s.trim().isEmpty()) {
UC_P_F = Byte.parseByte(s);
} else {
UC_P_F = Byte.MIN_VALUE;
}
}

protected final void initUC_P_I(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
UC_P_I = false;
} else {
UC_P_I = true;
}
}
}

protected final void initUC_P_O(String s) {
if (!s.trim().isEmpty()) {
UC_P_O = Short.parseShort(s);
} else {
UC_P_O = Short.MIN_VALUE;
}
}

protected final void initUC_P_T(String s) {
if (!s.trim().isEmpty()) {
UC_P_T = Short.parseShort(s);
} else {
UC_P_T = Short.MIN_VALUE;
}
}

protected final void initUC_R_F(String s) {
if (!s.trim().isEmpty()) {
UC_R_F = Byte.parseByte(s);
} else {
UC_R_F = Byte.MIN_VALUE;
}
}

protected final void initUC_R_I(String s) {
if (!s.trim().isEmpty()) {
UC_R_I = Double.parseDouble(s);
} else {
UC_R_I = Double.NaN;
}
}

protected final void initUC_R_O(String s) {
if (!s.trim().isEmpty()) {
UC_R_O = Short.parseShort(s);
} else {
UC_R_O = Short.MIN_VALUE;
}
}

protected final void initUC_R_T(String s) {
if (!s.trim().isEmpty()) {
UC_R_T = Short.parseShort(s);
} else {
UC_R_T = Short.MIN_VALUE;
}
}

protected final void initVISMON(String s) {
if (!s.trim().isEmpty()) {
VISMON = Byte.parseByte(s);
} else {
VISMON = Byte.MIN_VALUE;
}
}

protected final void initVISYEAR(String s) {
if (!s.trim().isEmpty()) {
VISYEAR = Short.parseShort(s);
} else {
VISYEAR = Short.MIN_VALUE;
}
}

protected final void initVITD(String s) {
if (!s.trim().isEmpty()) {
VITD = Short.parseShort(s);
} else {
VITD = Short.MIN_VALUE;
}
}

protected final void initW8BLDWT(String s) {
if (!s.trim().isEmpty()) {
W8BLDWT = Double.parseDouble(s);
} else {
W8BLDWT = Double.NaN;
}
}

protected final void initW8BPOUT(String s) {
if (!s.trim().isEmpty()) {
W8BPOUT = Byte.parseByte(s);
} else {
W8BPOUT = Byte.MIN_VALUE;
}
}

protected final void initW8BSOUT(String s) {
if (!s.trim().isEmpty()) {
W8BSOUT = Byte.parseByte(s);
} else {
W8BSOUT = Byte.MIN_VALUE;
}
}

protected final void initW8GSOUT(String s) {
if (!s.trim().isEmpty()) {
W8GSOUT = Byte.parseByte(s);
} else {
W8GSOUT = Byte.MIN_VALUE;
}
}

protected final void initW8HHOUT(String s) {
if (!s.trim().isEmpty()) {
W8HHOUT = Short.parseShort(s);
} else {
W8HHOUT = Short.MIN_VALUE;
}
}

protected final void initW8INDOUT(String s) {
if (!s.trim().isEmpty()) {
W8INDOUT = Byte.parseByte(s);
} else {
W8INDOUT = Byte.MIN_VALUE;
}
}

protected final void initW8NSSEC3(String s) {
if (!s.trim().isEmpty()) {
W8NSSEC3 = Byte.parseByte(s);
} else {
W8NSSEC3 = Byte.MIN_VALUE;
}
}

protected final void initW8NSSEC5(String s) {
if (!s.trim().isEmpty()) {
W8NSSEC5 = Byte.parseByte(s);
} else {
W8NSSEC5 = Byte.MIN_VALUE;
}
}

protected final void initW8NSSEC8(String s) {
if (!s.trim().isEmpty()) {
W8NSSEC8 = Byte.parseByte(s);
} else {
W8NSSEC8 = Byte.MIN_VALUE;
}
}

protected final void initW8NUROUT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 79) {
W8NUROUT = false;
} else {
W8NUROUT = true;
}
}
}

protected final void initW8NURWT(String s) {
if (!s.trim().isEmpty()) {
W8NURWT = Double.parseDouble(s);
} else {
W8NURWT = Double.NaN;
}
}

protected final void initW8SCOUT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
W8SCOUT = false;
} else {
W8SCOUT = true;
}
}
}

protected final void initW8SCWT(String s) {
if (!s.trim().isEmpty()) {
W8SCWT = Double.parseDouble(s);
} else {
W8SCWT = Double.NaN;
}
}

protected final void initW8SEC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
W8SEC = false;
} else {
W8SEC = true;
}
}
}

protected final void initW8SIC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
W8SIC = false;
} else {
W8SIC = true;
}
}
}

protected final void initW8SIC2003R(String s) {
if (!s.trim().isEmpty()) {
W8SIC2003R = Byte.parseByte(s);
} else {
W8SIC2003R = Byte.MIN_VALUE;
}
}

protected final void initW8SOC(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 0) {
W8SOC = false;
} else {
W8SOC = true;
}
}
}

protected final void initW8SOC2000R(String s) {
if (!s.trim().isEmpty()) {
W8SOC2000R = Byte.parseByte(s);
} else {
W8SOC2000R = Byte.MIN_VALUE;
}
}

protected final void initW8SSCOUT(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
W8SSCOUT = false;
} else {
W8SSCOUT = true;
}
}
}

protected final void initW8SSCWT(String s) {
if (!s.trim().isEmpty()) {
W8SSCWT = Double.parseDouble(s);
} else {
W8SSCWT = Double.NaN;
}
}

protected final void initW8W1LWGT(String s) {
if (!s.trim().isEmpty()) {
W8W1LWGT = Double.parseDouble(s);
} else {
W8W1LWGT = Double.NaN;
}
}

protected final void initW8W4LWGT(String s) {
if (!s.trim().isEmpty()) {
W8W4LWGT = Double.parseDouble(s);
} else {
W8W4LWGT = Double.NaN;
}
}

protected final void initW8XWGT(String s) {
if (!s.trim().isEmpty()) {
W8XWGT = Double.parseDouble(s);
} else {
W8XWGT = Double.NaN;
}
}

protected final void initWBC(String s) {
if (!s.trim().isEmpty()) {
WBC = Double.parseDouble(s);
} else {
WBC = Double.NaN;
}
}

protected final void initWEIGHT(String s) {
if (!s.trim().isEmpty()) {
WEIGHT = Double.parseDouble(s);
} else {
WEIGHT = Double.NaN;
}
}

protected final void initWHATEAT(String s) {
if (!s.trim().isEmpty()) {
WHATEAT = Byte.parseByte(s);
} else {
WHATEAT = Byte.MIN_VALUE;
}
}

protected final void initWHOSO4(String s) {
if (!s.trim().isEmpty()) {
WHOSO4 = Byte.parseByte(s);
} else {
WHOSO4 = Byte.MIN_VALUE;
}
}

protected final void initWHOSO5(String s) {
if (!s.trim().isEmpty()) {
WHOSO5 = Byte.parseByte(s);
} else {
WHOSO5 = Byte.MIN_VALUE;
}
}

protected final void initWHYNOBP(String s) {
if (!s.trim().isEmpty()) {
WHYNOBP = Byte.parseByte(s);
} else {
WHYNOBP = Byte.MIN_VALUE;
}
}

protected final void initWP1Q(String s) {
if (!s.trim().isEmpty()) {
WP1Q = Integer.parseInt(s);
} else {
WP1Q = Integer.MIN_VALUE;
}
}

protected final void initWP1SQ(String s) {
if (!s.trim().isEmpty()) {
WP1SQ = Integer.parseInt(s);
} else {
WP1SQ = Integer.MIN_VALUE;
}
}

protected final void initWP2Q(String s) {
if (!s.trim().isEmpty()) {
WP2Q = Integer.parseInt(s);
} else {
WP2Q = Integer.MIN_VALUE;
}
}

protected final void initWP2SQ(String s) {
if (!s.trim().isEmpty()) {
WP2SQ = Integer.parseInt(s);
} else {
WP2SQ = Integer.MIN_VALUE;
}
}

protected final void initWP3Q(String s) {
if (!s.trim().isEmpty()) {
WP3Q = Integer.parseInt(s);
} else {
WP3Q = Integer.MIN_VALUE;
}
}

protected final void initWP3SQ(String s) {
if (!s.trim().isEmpty()) {
WP3SQ = Integer.parseInt(s);
} else {
WP3SQ = Integer.MIN_VALUE;
}
}

protected final void initWPACT96(String s) {
if (!s.trim().isEmpty()) {
WPACT96 = Byte.parseByte(s);
} else {
WPACT96 = Byte.MIN_VALUE;
}
}

protected final void initWPACTCA(String s) {
if (!s.trim().isEmpty()) {
WPACTCA = Byte.parseByte(s);
} else {
WPACTCA = Byte.MIN_VALUE;
}
}

protected final void initWPACTED(String s) {
if (!s.trim().isEmpty()) {
WPACTED = Byte.parseByte(s);
} else {
WPACTED = Byte.MIN_VALUE;
}
}

protected final void initWPACTLO(String s) {
if (!s.trim().isEmpty()) {
WPACTLO = Byte.parseByte(s);
} else {
WPACTLO = Byte.MIN_VALUE;
}
}

protected final void initWPACTPW(String s) {
if (!s.trim().isEmpty()) {
WPACTPW = Byte.parseByte(s);
} else {
WPACTPW = Byte.MIN_VALUE;
}
}

protected final void initWPACTSE(String s) {
if (!s.trim().isEmpty()) {
WPACTSE = Byte.parseByte(s);
} else {
WPACTSE = Byte.MIN_VALUE;
}
}

protected final void initWPACTVW(String s) {
if (!s.trim().isEmpty()) {
WPACTVW = Byte.parseByte(s);
} else {
WPACTVW = Byte.MIN_VALUE;
}
}

protected final void initWPAECP(String s) {
if (!s.trim().isEmpty()) {
WPAECP = Short.parseShort(s);
} else {
WPAECP = Short.MIN_VALUE;
}
}

protected final void initWPANYP(String s) {
if (!s.trim().isEmpty()) {
WPANYP = Byte.parseByte(s);
} else {
WPANYP = Byte.MIN_VALUE;
}
}

protected final void initWPAOTFE(String s) {
if (!s.trim().isEmpty()) {
WPAOTFE = Byte.parseByte(s);
} else {
WPAOTFE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTFL(String s) {
if (!s.trim().isEmpty()) {
WPAOTFL = Short.parseShort(s);
} else {
WPAOTFL = Short.MIN_VALUE;
}
}

protected final void initWPAOTFR(String s) {
if (!s.trim().isEmpty()) {
WPAOTFR = Byte.parseByte(s);
} else {
WPAOTFR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTFU(String s) {
if (!s.trim().isEmpty()) {
WPAOTFU = Short.parseShort(s);
} else {
WPAOTFU = Short.MIN_VALUE;
}
}

protected final void initWPAOTME(String s) {
if (!s.trim().isEmpty()) {
WPAOTME = Byte.parseByte(s);
} else {
WPAOTME = Byte.MIN_VALUE;
}
}

protected final void initWPAOTML(String s) {
if (!s.trim().isEmpty()) {
WPAOTML = Short.parseShort(s);
} else {
WPAOTML = Short.MIN_VALUE;
}
}

protected final void initWPAOTMR(String s) {
if (!s.trim().isEmpty()) {
WPAOTMR = Byte.parseByte(s);
} else {
WPAOTMR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTMU(String s) {
if (!s.trim().isEmpty()) {
WPAOTMU = Short.parseShort(s);
} else {
WPAOTMU = Short.MIN_VALUE;
}
}

protected final void initWPAOTOE(String s) {
if (!s.trim().isEmpty()) {
WPAOTOE = Byte.parseByte(s);
} else {
WPAOTOE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTOL(String s) {
if (!s.trim().isEmpty()) {
WPAOTOL = Short.parseShort(s);
} else {
WPAOTOL = Short.MIN_VALUE;
}
}

protected final void initWPAOTOR(String s) {
if (!s.trim().isEmpty()) {
WPAOTOR = Byte.parseByte(s);
} else {
WPAOTOR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTOU(String s) {
if (!s.trim().isEmpty()) {
WPAOTOU = Short.parseShort(s);
} else {
WPAOTOU = Short.MIN_VALUE;
}
}

protected final void initWPAOTWE(String s) {
if (!s.trim().isEmpty()) {
WPAOTWE = Byte.parseByte(s);
} else {
WPAOTWE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTWL(String s) {
if (!s.trim().isEmpty()) {
WPAOTWL = Short.parseShort(s);
} else {
WPAOTWL = Short.MIN_VALUE;
}
}

protected final void initWPAOTWR(String s) {
if (!s.trim().isEmpty()) {
WPAOTWR = Byte.parseByte(s);
} else {
WPAOTWR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTWU(String s) {
if (!s.trim().isEmpty()) {
WPAOTWU = Short.parseShort(s);
} else {
WPAOTWU = Short.MIN_VALUE;
}
}

protected final void initWPAOTYE(String s) {
if (!s.trim().isEmpty()) {
WPAOTYE = Byte.parseByte(s);
} else {
WPAOTYE = Byte.MIN_VALUE;
}
}

protected final void initWPAOTYL(String s) {
if (!s.trim().isEmpty()) {
WPAOTYL = Integer.parseInt(s);
} else {
WPAOTYL = Integer.MIN_VALUE;
}
}

protected final void initWPAOTYR(String s) {
if (!s.trim().isEmpty()) {
WPAOTYR = Byte.parseByte(s);
} else {
WPAOTYR = Byte.MIN_VALUE;
}
}

protected final void initWPAOTYU(String s) {
if (!s.trim().isEmpty()) {
WPAOTYU = Integer.parseInt(s);
} else {
WPAOTYU = Integer.MIN_VALUE;
}
}

protected final void initWPAPFE(String s) {
if (!s.trim().isEmpty()) {
WPAPFE = Byte.parseByte(s);
} else {
WPAPFE = Byte.MIN_VALUE;
}
}

protected final void initWPAPFL(String s) {
if (!s.trim().isEmpty()) {
WPAPFL = Double.parseDouble(s);
} else {
WPAPFL = Double.NaN;
}
}

protected final void initWPAPFR(String s) {
if (!s.trim().isEmpty()) {
WPAPFR = Byte.parseByte(s);
} else {
WPAPFR = Byte.MIN_VALUE;
}
}

protected final void initWPAPFU(String s) {
if (!s.trim().isEmpty()) {
WPAPFU = Double.parseDouble(s);
} else {
WPAPFU = Double.NaN;
}
}

protected final void initWPASALE(String s) {
if (!s.trim().isEmpty()) {
WPASALE = Byte.parseByte(s);
} else {
WPASALE = Byte.MIN_VALUE;
}
}

protected final void initWPASALL(String s) {
if (!s.trim().isEmpty()) {
WPASALL = Double.parseDouble(s);
} else {
WPASALL = Double.NaN;
}
}

protected final void initWPASALR(String s) {
if (!s.trim().isEmpty()) {
WPASALR = Byte.parseByte(s);
} else {
WPASALR = Byte.MIN_VALUE;
}
}

protected final void initWPASALU(String s) {
if (!s.trim().isEmpty()) {
WPASALU = Double.parseDouble(s);
} else {
WPASALU = Double.NaN;
}
}

protected final void initWPBIMAE(String s) {
if (!s.trim().isEmpty()) {
WPBIMAE = Byte.parseByte(s);
} else {
WPBIMAE = Byte.MIN_VALUE;
}
}

protected final void initWPBIMAL(String s) {
if (!s.trim().isEmpty()) {
WPBIMAL = Short.parseShort(s);
} else {
WPBIMAL = Short.MIN_VALUE;
}
}

protected final void initWPBIMAR(String s) {
if (!s.trim().isEmpty()) {
WPBIMAR = Byte.parseByte(s);
} else {
WPBIMAR = Byte.MIN_VALUE;
}
}

protected final void initWPBIMAU(String s) {
if (!s.trim().isEmpty()) {
WPBIMAU = Short.parseShort(s);
} else {
WPBIMAU = Short.MIN_VALUE;
}
}

protected final void initWPBIWAE(String s) {
if (!s.trim().isEmpty()) {
WPBIWAE = Byte.parseByte(s);
} else {
WPBIWAE = Byte.MIN_VALUE;
}
}

protected final void initWPBIWAL(String s) {
if (!s.trim().isEmpty()) {
WPBIWAL = Short.parseShort(s);
} else {
WPBIWAL = Short.MIN_VALUE;
}
}

protected final void initWPBIWAR(String s) {
if (!s.trim().isEmpty()) {
WPBIWAR = Byte.parseByte(s);
} else {
WPBIWAR = Byte.MIN_VALUE;
}
}

protected final void initWPBIWAU(String s) {
if (!s.trim().isEmpty()) {
WPBIWAU = Short.parseShort(s);
} else {
WPBIWAU = Short.MIN_VALUE;
}
}

protected final void initWPBPS(String s) {
if (!s.trim().isEmpty()) {
WPBPS = Byte.parseByte(s);
} else {
WPBPS = Byte.MIN_VALUE;
}
}

protected final void initWPBPSPC(String s) {
if (!s.trim().isEmpty()) {
WPBPSPC = Byte.parseByte(s);
} else {
WPBPSPC = Byte.MIN_VALUE;
}
}

protected final void initWPBUSVE(String s) {
if (!s.trim().isEmpty()) {
WPBUSVE = Byte.parseByte(s);
} else {
WPBUSVE = Byte.MIN_VALUE;
}
}

protected final void initWPBUSVL(String s) {
if (!s.trim().isEmpty()) {
WPBUSVL = Integer.parseInt(s);
} else {
WPBUSVL = Integer.MIN_VALUE;
}
}

protected final void initWPBUSVR(String s) {
if (!s.trim().isEmpty()) {
WPBUSVR = Byte.parseByte(s);
} else {
WPBUSVR = Byte.MIN_VALUE;
}
}

protected final void initWPBUSVU(String s) {
if (!s.trim().isEmpty()) {
WPBUSVU = Integer.parseInt(s);
} else {
WPBUSVU = Integer.MIN_VALUE;
}
}

protected final void initWPCJ96(String s) {
if (!s.trim().isEmpty()) {
WPCJ96 = Byte.parseByte(s);
} else {
WPCJ96 = Byte.MIN_VALUE;
}
}

protected final void initWPCJAG(String s) {
if (!s.trim().isEmpty()) {
WPCJAG = Byte.parseByte(s);
} else {
WPCJAG = Byte.MIN_VALUE;
}
}

protected final void initWPCJBU(String s) {
if (!s.trim().isEmpty()) {
WPCJBU = Byte.parseByte(s);
} else {
WPCJBU = Byte.MIN_VALUE;
}
}

protected final void initWPCJDI(String s) {
if (!s.trim().isEmpty()) {
WPCJDI = Byte.parseByte(s);
} else {
WPCJDI = Byte.MIN_VALUE;
}
}

protected final void initWPCJFR(String s) {
if (!s.trim().isEmpty()) {
WPCJFR = Byte.parseByte(s);
} else {
WPCJFR = Byte.MIN_VALUE;
}
}

protected final void initWPCJPA(String s) {
if (!s.trim().isEmpty()) {
WPCJPA = Byte.parseByte(s);
} else {
WPCJPA = Byte.MIN_VALUE;
}
}

protected final void initWPCJSC(String s) {
if (!s.trim().isEmpty()) {
WPCJSC = Byte.parseByte(s);
} else {
WPCJSC = Byte.MIN_VALUE;
}
}

protected final void initWPCJSE(String s) {
if (!s.trim().isEmpty()) {
WPCJSE = Byte.parseByte(s);
} else {
WPCJSE = Byte.MIN_VALUE;
}
}

protected final void initWPCURP(String s) {
if (!s.trim().isEmpty()) {
WPCURP = Byte.parseByte(s);
} else {
WPCURP = Byte.MIN_VALUE;
}
}

protected final void initWPCURR(String s) {
if (!s.trim().isEmpty()) {
WPCURR = Byte.parseByte(s);
} else {
WPCURR = Byte.MIN_VALUE;
}
}

protected final void initWPDCDB(String s) {
if (!s.trim().isEmpty()) {
WPDCDB = Byte.parseByte(s);
} else {
WPDCDB = Byte.MIN_VALUE;
}
}

protected final void initWPDCFV(String s) {
if (!s.trim().isEmpty()) {
WPDCFV = Integer.parseInt(s);
} else {
WPDCFV = Integer.MIN_VALUE;
}
}

protected final void initWPDCFVE(String s) {
if (!s.trim().isEmpty()) {
WPDCFVE = Byte.parseByte(s);
} else {
WPDCFVE = Byte.MIN_VALUE;
}
}

protected final void initWPDCFVL(String s) {
if (!s.trim().isEmpty()) {
WPDCFVL = Integer.parseInt(s);
} else {
WPDCFVL = Integer.MIN_VALUE;
}
}

protected final void initWPDCFVR(String s) {
if (!s.trim().isEmpty()) {
WPDCFVR = Byte.parseByte(s);
} else {
WPDCFVR = Byte.MIN_VALUE;
}
}

protected final void initWPDCFVU(String s) {
if (!s.trim().isEmpty()) {
WPDCFVU = Integer.parseInt(s);
} else {
WPDCFVU = Integer.MIN_VALUE;
}
}

protected final void initWPDCPAN(String s) {
if (!s.trim().isEmpty()) {
WPDCPAN = Byte.parseByte(s);
} else {
WPDCPAN = Byte.MIN_VALUE;
}
}

protected final void initWPDCPDK(String s) {
if (!s.trim().isEmpty()) {
WPDCPDK = Byte.parseByte(s);
} else {
WPDCPDK = Byte.MIN_VALUE;
}
}

protected final void initWPDCPMU(String s) {
if (!s.trim().isEmpty()) {
WPDCPMU = Byte.parseByte(s);
} else {
WPDCPMU = Byte.MIN_VALUE;
}
}

protected final void initWPDCPRG(String s) {
if (!s.trim().isEmpty()) {
WPDCPRG = Byte.parseByte(s);
} else {
WPDCPRG = Byte.MIN_VALUE;
}
}

protected final void initWPDCPSI(String s) {
if (!s.trim().isEmpty()) {
WPDCPSI = Byte.parseByte(s);
} else {
WPDCPSI = Byte.MIN_VALUE;
}
}

protected final void initWPDCRF(String s) {
if (!s.trim().isEmpty()) {
WPDCRF = Byte.parseByte(s);
} else {
WPDCRF = Byte.MIN_VALUE;
}
}

protected final void initWPDCW(String s) {
if (!s.trim().isEmpty()) {
WPDCW = Byte.parseByte(s);
} else {
WPDCW = Byte.MIN_VALUE;
}
}

protected final void initWPDCWA(String s) {
if (!s.trim().isEmpty()) {
WPDCWA = Integer.parseInt(s);
} else {
WPDCWA = Integer.MIN_VALUE;
}
}

protected final void initWPDCWAE(String s) {
if (!s.trim().isEmpty()) {
WPDCWAE = Byte.parseByte(s);
} else {
WPDCWAE = Byte.MIN_VALUE;
}
}

protected final void initWPDCWAL(String s) {
if (!s.trim().isEmpty()) {
WPDCWAL = Short.parseShort(s);
} else {
WPDCWAL = Short.MIN_VALUE;
}
}

protected final void initWPDCWAR(String s) {
if (!s.trim().isEmpty()) {
WPDCWAR = Byte.parseByte(s);
} else {
WPDCWAR = Byte.MIN_VALUE;
}
}

protected final void initWPDCWAU(String s) {
if (!s.trim().isEmpty()) {
WPDCWAU = Integer.parseInt(s);
} else {
WPDCWAU = Integer.MIN_VALUE;
}
}

protected final void initWPDCWP95(String s) {
if (!s.trim().isEmpty()) {
WPDCWP95 = Byte.parseByte(s);
} else {
WPDCWP95 = Byte.MIN_VALUE;
}
}

protected final void initWPDCWPDB(String s) {
if (!s.trim().isEmpty()) {
WPDCWPDB = Byte.parseByte(s);
} else {
WPDCWPDB = Byte.MIN_VALUE;
}
}

protected final void initWPDCWPFR(String s) {
if (!s.trim().isEmpty()) {
WPDCWPFR = Byte.parseByte(s);
} else {
WPDCWPFR = Byte.MIN_VALUE;
}
}

protected final void initWPDCWPIN(String s) {
if (!s.trim().isEmpty()) {
WPDCWPIN = Byte.parseByte(s);
} else {
WPDCWPIN = Byte.MIN_VALUE;
}
}

protected final void initWPDCWPLA(String s) {
if (!s.trim().isEmpty()) {
WPDCWPLA = Byte.parseByte(s);
} else {
WPDCWPLA = Byte.MIN_VALUE;
}
}

protected final void initWPDCWPSP(String s) {
if (!s.trim().isEmpty()) {
WPDCWPSP = Byte.parseByte(s);
} else {
WPDCWPSP = Byte.MIN_VALUE;
}
}

protected final void initWPDCWPSV(String s) {
if (!s.trim().isEmpty()) {
WPDCWPSV = Byte.parseByte(s);
} else {
WPDCWPSV = Byte.MIN_VALUE;
}
}

protected final void initWPDDFV(String s) {
if (!s.trim().isEmpty()) {
WPDDFV = Integer.parseInt(s);
} else {
WPDDFV = Integer.MIN_VALUE;
}
}

protected final void initWPDDFVE(String s) {
if (!s.trim().isEmpty()) {
WPDDFVE = Byte.parseByte(s);
} else {
WPDDFVE = Byte.MIN_VALUE;
}
}

protected final void initWPDDFVL(String s) {
if (!s.trim().isEmpty()) {
WPDDFVL = Integer.parseInt(s);
} else {
WPDDFVL = Integer.MIN_VALUE;
}
}

protected final void initWPDDFVR(String s) {
if (!s.trim().isEmpty()) {
WPDDFVR = Byte.parseByte(s);
} else {
WPDDFVR = Byte.MIN_VALUE;
}
}

protected final void initWPDDFVU(String s) {
if (!s.trim().isEmpty()) {
WPDDFVU = Integer.parseInt(s);
} else {
WPDDFVU = Integer.MIN_VALUE;
}
}

protected final void initWPDESP(String s) {
if (!s.trim().isEmpty()) {
WPDESP = Byte.parseByte(s);
} else {
WPDESP = Byte.MIN_VALUE;
}
}

protected final void initWPDESPC(String s) {
if (!s.trim().isEmpty()) {
WPDESPC = Byte.parseByte(s);
} else {
WPDESPC = Byte.MIN_VALUE;
}
}

protected final void initWPDPSP(String s) {
if (!s.trim().isEmpty()) {
WPDPSP = Byte.parseByte(s);
} else {
WPDPSP = Byte.MIN_VALUE;
}
}

protected final void initWPEARLY(String s) {
if (!s.trim().isEmpty()) {
WPEARLY = Byte.parseByte(s);
} else {
WPEARLY = Byte.MIN_VALUE;
}
}

protected final void initWPEC(String s) {
if (!s.trim().isEmpty()) {
WPEC = Byte.parseByte(s);
} else {
WPEC = Byte.MIN_VALUE;
}
}

protected final void initWPECA(String s) {
if (!s.trim().isEmpty()) {
WPECA = Byte.parseByte(s);
} else {
WPECA = Byte.MIN_VALUE;
}
}

protected final void initWPECPP(String s) {
if (!s.trim().isEmpty()) {
WPECPP = Byte.parseByte(s);
} else {
WPECPP = Byte.MIN_VALUE;
}
}

protected final void initWPERCP(String s) {
if (!s.trim().isEmpty()) {
WPERCP = Byte.parseByte(s);
} else {
WPERCP = Byte.MIN_VALUE;
}
}

protected final void initWPESJME(String s) {
if (!s.trim().isEmpty()) {
WPESJME = Byte.parseByte(s);
} else {
WPESJME = Byte.MIN_VALUE;
}
}

protected final void initWPESJML(String s) {
if (!s.trim().isEmpty()) {
WPESJML = Short.parseShort(s);
} else {
WPESJML = Short.MIN_VALUE;
}
}

protected final void initWPESJMR(String s) {
if (!s.trim().isEmpty()) {
WPESJMR = Byte.parseByte(s);
} else {
WPESJMR = Byte.MIN_VALUE;
}
}

protected final void initWPESJMU(String s) {
if (!s.trim().isEmpty()) {
WPESJMU = Short.parseShort(s);
} else {
WPESJMU = Short.MIN_VALUE;
}
}

protected final void initWPEXW(String s) {
if (!s.trim().isEmpty()) {
WPEXW = Byte.parseByte(s);
} else {
WPEXW = Byte.MIN_VALUE;
}
}

protected final void initWPFFCURP(String s) {
if (!s.trim().isEmpty()) {
WPFFCURP = Byte.parseByte(s);
} else {
WPFFCURP = Byte.MIN_VALUE;
}
}

protected final void initWPFFDCDB(String s) {
if (!s.trim().isEmpty()) {
WPFFDCDB = Byte.parseByte(s);
} else {
WPFFDCDB = Byte.MIN_VALUE;
}
}

protected final void initWPFFPENT(String s) {
if (!s.trim().isEmpty()) {
WPFFPENT = Byte.parseByte(s);
} else {
WPFFPENT = Byte.MIN_VALUE;
}
}

protected final void initWPFFRECP(String s) {
if (!s.trim().isEmpty()) {
WPFFRECP = Byte.parseByte(s);
} else {
WPFFRECP = Byte.MIN_VALUE;
}
}

protected final void initWPFFYBS(String s) {
if (!s.trim().isEmpty()) {
WPFFYBS = Byte.parseByte(s);
} else {
WPFFYBS = Byte.MIN_VALUE;
}
}

protected final void initWPFINFO(String s) {
if (!s.trim().isEmpty()) {
WPFINFO = Byte.parseByte(s);
} else {
WPFINFO = Byte.MIN_VALUE;
}
}

protected final void initWPFSAPC(String s) {
if (!s.trim().isEmpty()) {
WPFSAPC = Byte.parseByte(s);
} else {
WPFSAPC = Byte.MIN_VALUE;
}
}

protected final void initWPFSC(String s) {
if (!s.trim().isEmpty()) {
WPFSC = Byte.parseByte(s);
} else {
WPFSC = Byte.MIN_VALUE;
}
}

protected final void initWPFSEC(String s) {
if (!s.trim().isEmpty()) {
WPFSEC = Byte.parseByte(s);
} else {
WPFSEC = Byte.MIN_VALUE;
}
}

protected final void initWPHLWZ(String s) {
if (!s.trim().isEmpty()) {
WPHLWZ = Byte.parseByte(s);
} else {
WPHLWZ = Byte.MIN_VALUE;
}
}

protected final void initWPIFSAC(String s) {
if (!s.trim().isEmpty()) {
WPIFSAC = Byte.parseByte(s);
} else {
WPIFSAC = Byte.MIN_VALUE;
}
}

protected final void initWPIFSCO(String s) {
if (!s.trim().isEmpty()) {
WPIFSCO = Byte.parseByte(s);
} else {
WPIFSCO = Byte.MIN_VALUE;
}
}

protected final void initWPIFSEM(String s) {
if (!s.trim().isEmpty()) {
WPIFSEM = Byte.parseByte(s);
} else {
WPIFSEM = Byte.MIN_VALUE;
}
}

protected final void initWPIFSFA(String s) {
if (!s.trim().isEmpty()) {
WPIFSFA = Byte.parseByte(s);
} else {
WPIFSFA = Byte.MIN_VALUE;
}
}

protected final void initWPIFSFR(String s) {
if (!s.trim().isEmpty()) {
WPIFSFR = Byte.parseByte(s);
} else {
WPIFSFR = Byte.MIN_VALUE;
}
}

protected final void initWPIFSNO(String s) {
if (!s.trim().isEmpty()) {
WPIFSNO = Byte.parseByte(s);
} else {
WPIFSNO = Byte.MIN_VALUE;
}
}

protected final void initWPIFSPR(String s) {
if (!s.trim().isEmpty()) {
WPIFSPR = Byte.parseByte(s);
} else {
WPIFSPR = Byte.MIN_VALUE;
}
}

protected final void initWPIFSRE(String s) {
if (!s.trim().isEmpty()) {
WPIFSRE = Byte.parseByte(s);
} else {
WPIFSRE = Byte.MIN_VALUE;
}
}

protected final void initWPIFSRP(String s) {
if (!s.trim().isEmpty()) {
WPIFSRP = Byte.parseByte(s);
} else {
WPIFSRP = Byte.MIN_VALUE;
}
}

protected final void initWPINCT(String s) {
if (!s.trim().isEmpty()) {
WPINCT = Byte.parseByte(s);
} else {
WPINCT = Byte.MIN_VALUE;
}
}

protected final void initWPINFS95(String s) {
if (!s.trim().isEmpty()) {
WPINFS95 = Byte.parseByte(s);
} else {
WPINFS95 = Byte.MIN_VALUE;
}
}

protected final void initWPIRLS(String s) {
if (!s.trim().isEmpty()) {
WPIRLS = Integer.parseInt(s);
} else {
WPIRLS = Integer.MIN_VALUE;
}
}

protected final void initWPIRLSE(String s) {
if (!s.trim().isEmpty()) {
WPIRLSE = Byte.parseByte(s);
} else {
WPIRLSE = Byte.MIN_VALUE;
}
}

protected final void initWPIRLSL(String s) {
if (!s.trim().isEmpty()) {
WPIRLSL = Short.parseShort(s);
} else {
WPIRLSL = Short.MIN_VALUE;
}
}

protected final void initWPIRLSR(String s) {
if (!s.trim().isEmpty()) {
WPIRLSR = Byte.parseByte(s);
} else {
WPIRLSR = Byte.MIN_VALUE;
}
}

protected final void initWPIRLSU(String s) {
if (!s.trim().isEmpty()) {
WPIRLSU = Integer.parseInt(s);
} else {
WPIRLSU = Integer.MIN_VALUE;
}
}

protected final void initWPIRP95(String s) {
if (!s.trim().isEmpty()) {
WPIRP95 = Byte.parseByte(s);
} else {
WPIRP95 = Byte.MIN_VALUE;
}
}

protected final void initWPIRPAN(String s) {
if (!s.trim().isEmpty()) {
WPIRPAN = Byte.parseByte(s);
} else {
WPIRPAN = Byte.MIN_VALUE;
}
}

protected final void initWPIRPDB(String s) {
if (!s.trim().isEmpty()) {
WPIRPDB = Byte.parseByte(s);
} else {
WPIRPDB = Byte.MIN_VALUE;
}
}

protected final void initWPIRPFR(String s) {
if (!s.trim().isEmpty()) {
WPIRPFR = Byte.parseByte(s);
} else {
WPIRPFR = Byte.MIN_VALUE;
}
}

protected final void initWPIRPIV(String s) {
if (!s.trim().isEmpty()) {
WPIRPIV = Byte.parseByte(s);
} else {
WPIRPIV = Byte.MIN_VALUE;
}
}

protected final void initWPIRPLA(String s) {
if (!s.trim().isEmpty()) {
WPIRPLA = Byte.parseByte(s);
} else {
WPIRPLA = Byte.MIN_VALUE;
}
}

protected final void initWPIRPSP(String s) {
if (!s.trim().isEmpty()) {
WPIRPSP = Byte.parseByte(s);
} else {
WPIRPSP = Byte.MIN_VALUE;
}
}

protected final void initWPIRPSV(String s) {
if (!s.trim().isEmpty()) {
WPIRPSV = Byte.parseByte(s);
} else {
WPIRPSV = Byte.MIN_VALUE;
}
}

protected final void initWPLFTP95(String s) {
if (!s.trim().isEmpty()) {
WPLFTP95 = Byte.parseByte(s);
} else {
WPLFTP95 = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPAF(String s) {
if (!s.trim().isEmpty()) {
WPLFTPAF = Byte.parseByte(s);
} else {
WPLFTPAF = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPCH(String s) {
if (!s.trim().isEmpty()) {
WPLFTPCH = Byte.parseByte(s);
} else {
WPLFTPCH = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPEL(String s) {
if (!s.trim().isEmpty()) {
WPLFTPEL = Byte.parseByte(s);
} else {
WPLFTPEL = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPOF(String s) {
if (!s.trim().isEmpty()) {
WPLFTPOF = Byte.parseByte(s);
} else {
WPLFTPOF = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPRE(String s) {
if (!s.trim().isEmpty()) {
WPLFTPRE = Byte.parseByte(s);
} else {
WPLFTPRE = Byte.MIN_VALUE;
}
}

protected final void initWPLFTPRT(String s) {
if (!s.trim().isEmpty()) {
WPLFTPRT = Byte.parseByte(s);
} else {
WPLFTPRT = Byte.MIN_VALUE;
}
}

protected final void initWPLIMWK(String s) {
if (!s.trim().isEmpty()) {
WPLIMWK = Byte.parseByte(s);
} else {
WPLIMWK = Byte.MIN_VALUE;
}
}

protected final void initWPLJO95(String s) {
if (!s.trim().isEmpty()) {
WPLJO95 = Byte.parseByte(s);
} else {
WPLJO95 = Byte.MIN_VALUE;
}
}

protected final void initWPLJOBM(String s) {
if (!s.trim().isEmpty()) {
WPLJOBM = Byte.parseByte(s);
} else {
WPLJOBM = Byte.MIN_VALUE;
}
}

protected final void initWPLJOCA(String s) {
if (!s.trim().isEmpty()) {
WPLJOCA = Byte.parseByte(s);
} else {
WPLJOCA = Byte.MIN_VALUE;
}
}

protected final void initWPLJOCL(String s) {
if (!s.trim().isEmpty()) {
WPLJOCL = Byte.parseByte(s);
} else {
WPLJOCL = Byte.MIN_VALUE;
}
}

protected final void initWPLJODI(String s) {
if (!s.trim().isEmpty()) {
WPLJODI = Byte.parseByte(s);
} else {
WPLJODI = Byte.MIN_VALUE;
}
}

protected final void initWPLJOFE(String s) {
if (!s.trim().isEmpty()) {
WPLJOFE = Byte.parseByte(s);
} else {
WPLJOFE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOIL(String s) {
if (!s.trim().isEmpty()) {
WPLJOIL = Byte.parseByte(s);
} else {
WPLJOIL = Byte.MIN_VALUE;
}
}

protected final void initWPLJOM85(String s) {
if (!s.trim().isEmpty()) {
WPLJOM85 = Byte.parseByte(s);
} else {
WPLJOM85 = Byte.MIN_VALUE;
}
}

protected final void initWPLJOM86(String s) {
if (!s.trim().isEmpty()) {
WPLJOM86 = Byte.parseByte(s);
} else {
WPLJOM86 = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMBE(String s) {
if (!s.trim().isEmpty()) {
WPLJOMBE = Byte.parseByte(s);
} else {
WPLJOMBE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMCA(String s) {
if (!s.trim().isEmpty()) {
WPLJOMCA = Byte.parseByte(s);
} else {
WPLJOMCA = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMCF(String s) {
if (!s.trim().isEmpty()) {
WPLJOMCF = Byte.parseByte(s);
} else {
WPLJOMCF = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMCL(String s) {
if (!s.trim().isEmpty()) {
WPLJOMCL = Byte.parseByte(s);
} else {
WPLJOMCL = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMDI(String s) {
if (!s.trim().isEmpty()) {
WPLJOMDI = Byte.parseByte(s);
} else {
WPLJOMDI = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMER(String s) {
if (!s.trim().isEmpty()) {
WPLJOMER = Byte.parseByte(s);
} else {
WPLJOMER = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMFE(String s) {
if (!s.trim().isEmpty()) {
WPLJOMFE = Byte.parseByte(s);
} else {
WPLJOMFE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMIL(String s) {
if (!s.trim().isEmpty()) {
WPLJOMIL = Byte.parseByte(s);
} else {
WPLJOMIL = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMME(String s) {
if (!s.trim().isEmpty()) {
WPLJOMME = Byte.parseByte(s);
} else {
WPLJOMME = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMMO(String s) {
if (!s.trim().isEmpty()) {
WPLJOMMO = Byte.parseByte(s);
} else {
WPLJOMMO = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMO(String s) {
if (!s.trim().isEmpty()) {
WPLJOMO = Byte.parseByte(s);
} else {
WPLJOMO = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMPR(String s) {
if (!s.trim().isEmpty()) {
WPLJOMPR = Byte.parseByte(s);
} else {
WPLJOMPR = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMRE(String s) {
if (!s.trim().isEmpty()) {
WPLJOMRE = Byte.parseByte(s);
} else {
WPLJOMRE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMSA(String s) {
if (!s.trim().isEmpty()) {
WPLJOMSA = Byte.parseByte(s);
} else {
WPLJOMSA = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMSE(String s) {
if (!s.trim().isEmpty()) {
WPLJOMSE = Byte.parseByte(s);
} else {
WPLJOMSE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMSP(String s) {
if (!s.trim().isEmpty()) {
WPLJOMSP = Byte.parseByte(s);
} else {
WPLJOMSP = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMTI(String s) {
if (!s.trim().isEmpty()) {
WPLJOMTI = Byte.parseByte(s);
} else {
WPLJOMTI = Byte.MIN_VALUE;
}
}

protected final void initWPLJOMVO(String s) {
if (!s.trim().isEmpty()) {
WPLJOMVO = Byte.parseByte(s);
} else {
WPLJOMVO = Byte.MIN_VALUE;
}
}

protected final void initWPLJORE(String s) {
if (!s.trim().isEmpty()) {
WPLJORE = Byte.parseByte(s);
} else {
WPLJORE = Byte.MIN_VALUE;
}
}

protected final void initWPLJOSP(String s) {
if (!s.trim().isEmpty()) {
WPLJOSP = Byte.parseByte(s);
} else {
WPLJOSP = Byte.MIN_VALUE;
}
}

protected final void initWPLJOTI(String s) {
if (!s.trim().isEmpty()) {
WPLJOTI = Byte.parseByte(s);
} else {
WPLJOTI = Byte.MIN_VALUE;
}
}

protected final void initWPLJOVO(String s) {
if (!s.trim().isEmpty()) {
WPLJOVO = Byte.parseByte(s);
} else {
WPLJOVO = Byte.MIN_VALUE;
}
}

protected final void initWPLUMPA(String s) {
if (!s.trim().isEmpty()) {
WPLUMPA = Integer.parseInt(s);
} else {
WPLUMPA = Integer.MIN_VALUE;
}
}

protected final void initWPLUMPAE(String s) {
if (!s.trim().isEmpty()) {
WPLUMPAE = Byte.parseByte(s);
} else {
WPLUMPAE = Byte.MIN_VALUE;
}
}

protected final void initWPLUMPAL(String s) {
if (!s.trim().isEmpty()) {
WPLUMPAL = Integer.parseInt(s);
} else {
WPLUMPAL = Integer.MIN_VALUE;
}
}

protected final void initWPLUMPAR(String s) {
if (!s.trim().isEmpty()) {
WPLUMPAR = Byte.parseByte(s);
} else {
WPLUMPAR = Byte.MIN_VALUE;
}
}

protected final void initWPLUMPAU(String s) {
if (!s.trim().isEmpty()) {
WPLUMPAU = Integer.parseInt(s);
} else {
WPLUMPAU = Integer.MIN_VALUE;
}
}

protected final void initWPLUMPE(String s) {
if (!s.trim().isEmpty()) {
WPLUMPE = Byte.parseByte(s);
} else {
WPLUMPE = Byte.MIN_VALUE;
}
}

protected final void initWPLUMPL(String s) {
if (!s.trim().isEmpty()) {
WPLUMPL = Double.parseDouble(s);
} else {
WPLUMPL = Double.NaN;
}
}

protected final void initWPLUMPR(String s) {
if (!s.trim().isEmpty()) {
WPLUMPR = Byte.parseByte(s);
} else {
WPLUMPR = Byte.MIN_VALUE;
}
}

protected final void initWPLUMPS(String s) {
if (!s.trim().isEmpty()) {
WPLUMPS = Byte.parseByte(s);
} else {
WPLUMPS = Byte.MIN_VALUE;
}
}

protected final void initWPLUMPU(String s) {
if (!s.trim().isEmpty()) {
WPLUMPU = Double.parseDouble(s);
} else {
WPLUMPU = Double.NaN;
}
}

protected final void initWPMALA(String s) {
if (!s.trim().isEmpty()) {
WPMALA = Integer.parseInt(s);
} else {
WPMALA = Integer.MIN_VALUE;
}
}

protected final void initWPMANPP(String s) {
if (!s.trim().isEmpty()) {
WPMANPP = Byte.parseByte(s);
} else {
WPMANPP = Byte.MIN_VALUE;
}
}

protected final void initWPMANSP(String s) {
if (!s.trim().isEmpty()) {
WPMANSP = Byte.parseByte(s);
} else {
WPMANSP = Byte.MIN_VALUE;
}
}

protected final void initWPMFQ(String s) {
if (!s.trim().isEmpty()) {
WPMFQ = Byte.parseByte(s);
} else {
WPMFQ = Byte.MIN_VALUE;
}
}

protected final void initWPMFRAC(String s) {
if (!s.trim().isEmpty()) {
WPMFRAC = Byte.parseByte(s);
} else {
WPMFRAC = Byte.MIN_VALUE;
}
}

protected final void initWPMHIE(String s) {
if (!s.trim().isEmpty()) {
WPMHIE = Byte.parseByte(s);
} else {
WPMHIE = Byte.MIN_VALUE;
}
}

protected final void initWPMHIL(String s) {
if (!s.trim().isEmpty()) {
WPMHIL = Short.parseShort(s);
} else {
WPMHIL = Short.MIN_VALUE;
}
}

protected final void initWPMHIR(String s) {
if (!s.trim().isEmpty()) {
WPMHIR = Byte.parseByte(s);
} else {
WPMHIR = Byte.MIN_VALUE;
}
}

protected final void initWPMHIU(String s) {
if (!s.trim().isEmpty()) {
WPMHIU = Short.parseShort(s);
} else {
WPMHIU = Short.MIN_VALUE;
}
}

protected final void initWPMORE(String s) {
if (!s.trim().isEmpty()) {
WPMORE = Byte.parseByte(s);
} else {
WPMORE = Byte.MIN_VALUE;
}
}

protected final void initWPMPAH(String s) {
if (!s.trim().isEmpty()) {
WPMPAH = Integer.parseInt(s);
} else {
WPMPAH = Integer.MIN_VALUE;
}
}

protected final void initWPMSAH(String s) {
if (!s.trim().isEmpty()) {
WPMSAH = Integer.parseInt(s);
} else {
WPMSAH = Integer.MIN_VALUE;
}
}

protected final void initWPMSFQ(String s) {
if (!s.trim().isEmpty()) {
WPMSFQ = Byte.parseByte(s);
} else {
WPMSFQ = Byte.MIN_VALUE;
}
}

protected final void initWPMSH(String s) {
if (!s.trim().isEmpty()) {
WPMSH = Integer.parseInt(s);
} else {
WPMSH = Integer.MIN_VALUE;
}
}

protected final void initWPMSQ(String s) {
if (!s.trim().isEmpty()) {
WPMSQ = Byte.parseByte(s);
} else {
WPMSQ = Byte.MIN_VALUE;
}
}

protected final void initWPMSSQ(String s) {
if (!s.trim().isEmpty()) {
WPMSSQ = Byte.parseByte(s);
} else {
WPMSSQ = Byte.MIN_VALUE;
}
}

protected final void initWPMSTQ(String s) {
if (!s.trim().isEmpty()) {
WPMSTQ = Byte.parseByte(s);
} else {
WPMSTQ = Byte.MIN_VALUE;
}
}

protected final void initWPMTQ(String s) {
if (!s.trim().isEmpty()) {
WPMTQ = Byte.parseByte(s);
} else {
WPMTQ = Byte.MIN_VALUE;
}
}

protected final void initWPMYNJ(String s) {
if (!s.trim().isEmpty()) {
WPMYNJ = Byte.parseByte(s);
} else {
WPMYNJ = Byte.MIN_VALUE;
}
}

protected final void initWPNEW(String s) {
if (!s.trim().isEmpty()) {
WPNEW = Byte.parseByte(s);
} else {
WPNEW = Byte.MIN_VALUE;
}
}

protected final void initWPNEWP(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == 1) {
WPNEWP = false;
} else {
WPNEWP = true;
}
}
}

protected final void initWPNPENS(String s) {
if (!s.trim().isEmpty()) {
WPNPENS = Byte.parseByte(s);
} else {
WPNPENS = Byte.MIN_VALUE;
}
}

protected final void initWPOJ(String s) {
if (!s.trim().isEmpty()) {
WPOJ = Byte.parseByte(s);
} else {
WPOJ = Byte.MIN_VALUE;
}
}

protected final void initWPOJ2(String s) {
if (!s.trim().isEmpty()) {
WPOJ2 = Byte.parseByte(s);
} else {
WPOJ2 = Byte.MIN_VALUE;
}
}

protected final void initWPOJ3(String s) {
if (!s.trim().isEmpty()) {
WPOJ3 = Byte.parseByte(s);
} else {
WPOJ3 = Byte.MIN_VALUE;
}
}

protected final void initWPOJ4(String s) {
if (!s.trim().isEmpty()) {
WPOJ4 = Byte.parseByte(s);
} else {
WPOJ4 = Byte.MIN_VALUE;
}
}

protected final void initWPOJ5(String s) {
if (!s.trim().isEmpty()) {
WPOJ5 = Byte.parseByte(s);
} else {
WPOJ5 = Byte.MIN_VALUE;
}
}

protected final void initWPOWB(String s) {
if (!s.trim().isEmpty()) {
WPOWB = Byte.parseByte(s);
} else {
WPOWB = Byte.MIN_VALUE;
}
}

protected final void initWPOWB2(String s) {
if (!s.trim().isEmpty()) {
WPOWB2 = Byte.parseByte(s);
} else {
WPOWB2 = Byte.MIN_VALUE;
}
}

protected final void initWPOWB3(String s) {
if (!s.trim().isEmpty()) {
WPOWB3 = Byte.parseByte(s);
} else {
WPOWB3 = Byte.MIN_VALUE;
}
}

protected final void initWPOWB4(String s) {
if (!s.trim().isEmpty()) {
WPOWB4 = Byte.parseByte(s);
} else {
WPOWB4 = Byte.MIN_VALUE;
}
}

protected final void initWPOWB5(String s) {
if (!s.trim().isEmpty()) {
WPOWB5 = Byte.parseByte(s);
} else {
WPOWB5 = Byte.MIN_VALUE;
}
}

protected final void initWPOWKAF(String s) {
if (!s.trim().isEmpty()) {
WPOWKAF = Byte.parseByte(s);
} else {
WPOWKAF = Byte.MIN_VALUE;
}
}

protected final void initWPOWKDO(String s) {
if (!s.trim().isEmpty()) {
WPOWKDO = Byte.parseByte(s);
} else {
WPOWKDO = Byte.MIN_VALUE;
}
}

protected final void initWPOWKEP(String s) {
if (!s.trim().isEmpty()) {
WPOWKEP = Byte.parseByte(s);
} else {
WPOWKEP = Byte.MIN_VALUE;
}
}

protected final void initWPOWKEW(String s) {
if (!s.trim().isEmpty()) {
WPOWKEW = Byte.parseByte(s);
} else {
WPOWKEW = Byte.MIN_VALUE;
}
}

protected final void initWPOWKIF(String s) {
if (!s.trim().isEmpty()) {
WPOWKIF = Byte.parseByte(s);
} else {
WPOWKIF = Byte.MIN_VALUE;
}
}

protected final void initWPOWKKE(String s) {
if (!s.trim().isEmpty()) {
WPOWKKE = Byte.parseByte(s);
} else {
WPOWKKE = Byte.MIN_VALUE;
}
}

protected final void initWPOWKST(String s) {
if (!s.trim().isEmpty()) {
WPOWKST = Byte.parseByte(s);
} else {
WPOWKST = Byte.MIN_VALUE;
}
}

protected final void initWPPA(String s) {
if (!s.trim().isEmpty()) {
WPPA = Integer.parseInt(s);
} else {
WPPA = Integer.MIN_VALUE;
}
}

protected final void initWPPAAE(String s) {
if (!s.trim().isEmpty()) {
WPPAAE = Byte.parseByte(s);
} else {
WPPAAE = Byte.MIN_VALUE;
}
}

protected final void initWPPAAL(String s) {
if (!s.trim().isEmpty()) {
WPPAAL = Integer.parseInt(s);
} else {
WPPAAL = Integer.MIN_VALUE;
}
}

protected final void initWPPAAR(String s) {
if (!s.trim().isEmpty()) {
WPPAAR = Byte.parseByte(s);
} else {
WPPAAR = Byte.MIN_VALUE;
}
}

protected final void initWPPAAU(String s) {
if (!s.trim().isEmpty()) {
WPPAAU = Integer.parseInt(s);
} else {
WPPAAU = Integer.MIN_VALUE;
}
}

protected final void initWPPAM(String s) {
if (!s.trim().isEmpty()) {
WPPAM = Byte.parseByte(s);
} else {
WPPAM = Byte.MIN_VALUE;
}
}

protected final void initWPPATE(String s) {
if (!s.trim().isEmpty()) {
WPPATE = Byte.parseByte(s);
} else {
WPPATE = Byte.MIN_VALUE;
}
}

protected final void initWPPATL(String s) {
if (!s.trim().isEmpty()) {
WPPATL = Integer.parseInt(s);
} else {
WPPATL = Integer.MIN_VALUE;
}
}

protected final void initWPPATR(String s) {
if (!s.trim().isEmpty()) {
WPPATR = Byte.parseByte(s);
} else {
WPPATR = Byte.MIN_VALUE;
}
}

protected final void initWPPATU(String s) {
if (!s.trim().isEmpty()) {
WPPATU = Integer.parseInt(s);
} else {
WPPATU = Integer.MIN_VALUE;
}
}

protected final void initWPPENAE(String s) {
if (!s.trim().isEmpty()) {
WPPENAE = Byte.parseByte(s);
} else {
WPPENAE = Byte.MIN_VALUE;
}
}

protected final void initWPPENAL(String s) {
if (!s.trim().isEmpty()) {
WPPENAL = Double.parseDouble(s);
} else {
WPPENAL = Double.NaN;
}
}

protected final void initWPPENAR(String s) {
if (!s.trim().isEmpty()) {
WPPENAR = Byte.parseByte(s);
} else {
WPPENAR = Byte.MIN_VALUE;
}
}

protected final void initWPPENAU(String s) {
if (!s.trim().isEmpty()) {
WPPENAU = Double.parseDouble(s);
} else {
WPPENAU = Double.NaN;
}
}

protected final void initWPPENN(String s) {
if (!s.trim().isEmpty()) {
WPPENN = Byte.parseByte(s);
} else {
WPPENN = Byte.MIN_VALUE;
}
}

protected final void initWPPENT(String s) {
if (!s.trim().isEmpty()) {
WPPENT = Byte.parseByte(s);
} else {
WPPENT = Byte.MIN_VALUE;
}
}

protected final void initWPPENTE(String s) {
if (!s.trim().isEmpty()) {
WPPENTE = Byte.parseByte(s);
} else {
WPPENTE = Byte.MIN_VALUE;
}
}

protected final void initWPPENTL(String s) {
if (!s.trim().isEmpty()) {
WPPENTL = Double.parseDouble(s);
} else {
WPPENTL = Double.NaN;
}
}

protected final void initWPPENTR(String s) {
if (!s.trim().isEmpty()) {
WPPENTR = Byte.parseByte(s);
} else {
WPPENTR = Byte.MIN_VALUE;
}
}

protected final void initWPPENTU(String s) {
if (!s.trim().isEmpty()) {
WPPENTU = Double.parseDouble(s);
} else {
WPPENTU = Double.NaN;
}
}

protected final void initWPPFVE(String s) {
if (!s.trim().isEmpty()) {
WPPFVE = Byte.parseByte(s);
} else {
WPPFVE = Byte.MIN_VALUE;
}
}

protected final void initWPPFVL(String s) {
if (!s.trim().isEmpty()) {
WPPFVL = Double.parseDouble(s);
} else {
WPPFVL = Double.NaN;
}
}

protected final void initWPPFVR(String s) {
if (!s.trim().isEmpty()) {
WPPFVR = Byte.parseByte(s);
} else {
WPPFVR = Byte.MIN_VALUE;
}
}

protected final void initWPPFVU(String s) {
if (!s.trim().isEmpty()) {
WPPFVU = Double.parseDouble(s);
} else {
WPPFVU = Double.NaN;
}
}

protected final void initWPPREV(String s) {
if (!s.trim().isEmpty()) {
WPPREV = Byte.parseByte(s);
} else {
WPPREV = Byte.MIN_VALUE;
}
}

protected final void initWPPROFE(String s) {
if (!s.trim().isEmpty()) {
WPPROFE = Byte.parseByte(s);
} else {
WPPROFE = Byte.MIN_VALUE;
}
}

protected final void initWPPROFL(String s) {
if (!s.trim().isEmpty()) {
WPPROFL = Integer.parseInt(s);
} else {
WPPROFL = Integer.MIN_VALUE;
}
}

protected final void initWPPROFR(String s) {
if (!s.trim().isEmpty()) {
WPPROFR = Byte.parseByte(s);
} else {
WPPROFR = Byte.MIN_VALUE;
}
}

protected final void initWPPROFU(String s) {
if (!s.trim().isEmpty()) {
WPPROFU = Integer.parseInt(s);
} else {
WPPROFU = Integer.MIN_VALUE;
}
}

protected final void initWPPS(String s) {
if (!s.trim().isEmpty()) {
WPPS = Byte.parseByte(s);
} else {
WPPS = Byte.MIN_VALUE;
}
}

protected final void initWPPS95(String s) {
if (!s.trim().isEmpty()) {
WPPS95 = Byte.parseByte(s);
} else {
WPPS95 = Byte.MIN_VALUE;
}
}

protected final void initWPPSAF(String s) {
if (!s.trim().isEmpty()) {
WPPSAF = Byte.parseByte(s);
} else {
WPPSAF = Byte.MIN_VALUE;
}
}

protected final void initWPPSEL(String s) {
if (!s.trim().isEmpty()) {
WPPSEL = Byte.parseByte(s);
} else {
WPPSEL = Byte.MIN_VALUE;
}
}

protected final void initWPPSEX(String s) {
if (!s.trim().isEmpty()) {
WPPSEX = Byte.parseByte(s);
} else {
WPPSEX = Byte.MIN_VALUE;
}
}

protected final void initWPPSM85(String s) {
if (!s.trim().isEmpty()) {
WPPSM85 = Byte.parseByte(s);
} else {
WPPSM85 = Byte.MIN_VALUE;
}
}

protected final void initWPPSM86(String s) {
if (!s.trim().isEmpty()) {
WPPSM86 = Byte.parseByte(s);
} else {
WPPSM86 = Byte.MIN_VALUE;
}
}

protected final void initWPPSMAF(String s) {
if (!s.trim().isEmpty()) {
WPPSMAF = Byte.parseByte(s);
} else {
WPPSMAF = Byte.MIN_VALUE;
}
}

protected final void initWPPSMAG(String s) {
if (!s.trim().isEmpty()) {
WPPSMAG = Byte.parseByte(s);
} else {
WPPSMAG = Byte.MIN_VALUE;
}
}

protected final void initWPPSMAL(String s) {
if (!s.trim().isEmpty()) {
WPPSMAL = Byte.parseByte(s);
} else {
WPPSMAL = Byte.MIN_VALUE;
}
}

protected final void initWPPSMDL(String s) {
if (!s.trim().isEmpty()) {
WPPSMDL = Byte.parseByte(s);
} else {
WPPSMDL = Byte.MIN_VALUE;
}
}

protected final void initWPPSMEL(String s) {
if (!s.trim().isEmpty()) {
WPPSMEL = Byte.parseByte(s);
} else {
WPPSMEL = Byte.MIN_VALUE;
}
}

protected final void initWPPSMEX(String s) {
if (!s.trim().isEmpty()) {
WPPSMEX = Byte.parseByte(s);
} else {
WPPSMEX = Byte.MIN_VALUE;
}
}

protected final void initWPPSMHR(String s) {
if (!s.trim().isEmpty()) {
WPPSMHR = Byte.parseByte(s);
} else {
WPPSMHR = Byte.MIN_VALUE;
}
}

protected final void initWPPSMOT(String s) {
if (!s.trim().isEmpty()) {
WPPSMOT = Byte.parseByte(s);
} else {
WPPSMOT = Byte.MIN_VALUE;
}
}

protected final void initWPPSOT(String s) {
if (!s.trim().isEmpty()) {
WPPSOT = Byte.parseByte(s);
} else {
WPPSOT = Byte.MIN_VALUE;
}
}

protected final void initWPPSPC(String s) {
if (!s.trim().isEmpty()) {
WPPSPC = Byte.parseByte(s);
} else {
WPPSPC = Byte.MIN_VALUE;
}
}

protected final void initWPPYRFE(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPYRFE = false;
} else {
WPPYRFE = true;
}
}
}

protected final void initWPPYRFL(String s) {
if (!s.trim().isEmpty()) {
WPPYRFL = Short.parseShort(s);
} else {
WPPYRFL = Short.MIN_VALUE;
}
}

protected final void initWPPYRFR(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPYRFR = false;
} else {
WPPYRFR = true;
}
}
}

protected final void initWPPYRFU(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPPYRFU = false;
} else {
WPPYRFU = true;
}
}
}

protected final void initWPPYRME(String s) {
if (!s.trim().isEmpty()) {
WPPYRME = Byte.parseByte(s);
} else {
WPPYRME = Byte.MIN_VALUE;
}
}

protected final void initWPPYRML(String s) {
if (!s.trim().isEmpty()) {
WPPYRML = Double.parseDouble(s);
} else {
WPPYRML = Double.NaN;
}
}

protected final void initWPPYRMR(String s) {
if (!s.trim().isEmpty()) {
WPPYRMR = Byte.parseByte(s);
} else {
WPPYRMR = Byte.MIN_VALUE;
}
}

protected final void initWPPYRMU(String s) {
if (!s.trim().isEmpty()) {
WPPYRMU = Double.parseDouble(s);
} else {
WPPYRMU = Double.NaN;
}
}

protected final void initWPPYROE(String s) {
if (!s.trim().isEmpty()) {
WPPYROE = Byte.parseByte(s);
} else {
WPPYROE = Byte.MIN_VALUE;
}
}

protected final void initWPPYROL(String s) {
if (!s.trim().isEmpty()) {
WPPYROL = Short.parseShort(s);
} else {
WPPYROL = Short.MIN_VALUE;
}
}

protected final void initWPPYROR(String s) {
if (!s.trim().isEmpty()) {
WPPYROR = Byte.parseByte(s);
} else {
WPPYROR = Byte.MIN_VALUE;
}
}

protected final void initWPPYROU(String s) {
if (!s.trim().isEmpty()) {
WPPYROU = Short.parseShort(s);
} else {
WPPYROU = Short.MIN_VALUE;
}
}

protected final void initWPPYRWE(String s) {
if (!s.trim().isEmpty()) {
WPPYRWE = Byte.parseByte(s);
} else {
WPPYRWE = Byte.MIN_VALUE;
}
}

protected final void initWPPYRWL(String s) {
if (!s.trim().isEmpty()) {
WPPYRWL = Short.parseShort(s);
} else {
WPPYRWL = Short.MIN_VALUE;
}
}

protected final void initWPPYRWR(String s) {
if (!s.trim().isEmpty()) {
WPPYRWR = Byte.parseByte(s);
} else {
WPPYRWR = Byte.MIN_VALUE;
}
}

protected final void initWPPYRWU(String s) {
if (!s.trim().isEmpty()) {
WPPYRWU = Short.parseShort(s);
} else {
WPPYRWU = Short.MIN_VALUE;
}
}

protected final void initWPPYRYE(String s) {
if (!s.trim().isEmpty()) {
WPPYRYE = Byte.parseByte(s);
} else {
WPPYRYE = Byte.MIN_VALUE;
}
}

protected final void initWPPYRYL(String s) {
if (!s.trim().isEmpty()) {
WPPYRYL = Double.parseDouble(s);
} else {
WPPYRYL = Double.NaN;
}
}

protected final void initWPPYRYR(String s) {
if (!s.trim().isEmpty()) {
WPPYRYR = Byte.parseByte(s);
} else {
WPPYRYR = Byte.MIN_VALUE;
}
}

protected final void initWPPYRYU(String s) {
if (!s.trim().isEmpty()) {
WPPYRYU = Double.parseDouble(s);
} else {
WPPYRYU = Double.NaN;
}
}

protected final void initWPQN(String s) {
if (!s.trim().isEmpty()) {
WPQN = Byte.parseByte(s);
} else {
WPQN = Byte.MIN_VALUE;
}
}

protected final void initWPRC95(String s) {
if (!s.trim().isEmpty()) {
WPRC95 = Byte.parseByte(s);
} else {
WPRC95 = Byte.MIN_VALUE;
}
}

protected final void initWPRCM85(String s) {
if (!s.trim().isEmpty()) {
WPRCM85 = Byte.parseByte(s);
} else {
WPRCM85 = Byte.MIN_VALUE;
}
}

protected final void initWPRCM86(String s) {
if (!s.trim().isEmpty()) {
WPRCM86 = Byte.parseByte(s);
} else {
WPRCM86 = Byte.MIN_VALUE;
}
}

protected final void initWPRCMAF(String s) {
if (!s.trim().isEmpty()) {
WPRCMAF = Byte.parseByte(s);
} else {
WPRCMAF = Byte.MIN_VALUE;
}
}

protected final void initWPRCMMO(String s) {
if (!s.trim().isEmpty()) {
WPRCMMO = Byte.parseByte(s);
} else {
WPRCMMO = Byte.MIN_VALUE;
}
}

protected final void initWPRCMNK(String s) {
if (!s.trim().isEmpty()) {
WPRCMNK = Byte.parseByte(s);
} else {
WPRCMNK = Byte.MIN_VALUE;
}
}

protected final void initWPRCMO(String s) {
if (!s.trim().isEmpty()) {
WPRCMO = Byte.parseByte(s);
} else {
WPRCMO = Byte.MIN_VALUE;
}
}

protected final void initWPRCMOH(String s) {
if (!s.trim().isEmpty()) {
WPRCMOH = Byte.parseByte(s);
} else {
WPRCMOH = Byte.MIN_VALUE;
}
}

protected final void initWPRCMPU(String s) {
if (!s.trim().isEmpty()) {
WPRCMPU = Byte.parseByte(s);
} else {
WPRCMPU = Byte.MIN_VALUE;
}
}

protected final void initWPRCMRE(String s) {
if (!s.trim().isEmpty()) {
WPRCMRE = Byte.parseByte(s);
} else {
WPRCMRE = Byte.MIN_VALUE;
}
}

protected final void initWPRCMRI(String s) {
if (!s.trim().isEmpty()) {
WPRCMRI = Byte.parseByte(s);
} else {
WPRCMRI = Byte.MIN_VALUE;
}
}

protected final void initWPRCMST(String s) {
if (!s.trim().isEmpty()) {
WPRCMST = Byte.parseByte(s);
} else {
WPRCMST = Byte.MIN_VALUE;
}
}

protected final void initWPRCMUN(String s) {
if (!s.trim().isEmpty()) {
WPRCMUN = Byte.parseByte(s);
} else {
WPRCMUN = Byte.MIN_VALUE;
}
}

protected final void initWPRCPU(String s) {
if (!s.trim().isEmpty()) {
WPRCPU = Byte.parseByte(s);
} else {
WPRCPU = Byte.MIN_VALUE;
}
}

protected final void initWPRCRE(String s) {
if (!s.trim().isEmpty()) {
WPRCRE = Byte.parseByte(s);
} else {
WPRCRE = Byte.MIN_VALUE;
}
}

protected final void initWPRCRI(String s) {
if (!s.trim().isEmpty()) {
WPRCRI = Byte.parseByte(s);
} else {
WPRCRI = Byte.MIN_VALUE;
}
}

protected final void initWPRCST(String s) {
if (!s.trim().isEmpty()) {
WPRCST = Byte.parseByte(s);
} else {
WPRCST = Byte.MIN_VALUE;
}
}

protected final void initWPREA95(String s) {
if (!s.trim().isEmpty()) {
WPREA95 = Byte.parseByte(s);
} else {
WPREA95 = Byte.MIN_VALUE;
}
}

protected final void initWPREA96(String s) {
if (!s.trim().isEmpty()) {
WPREA96 = Byte.parseByte(s);
} else {
WPREA96 = Byte.MIN_VALUE;
}
}

protected final void initWPREACH(String s) {
if (!s.trim().isEmpty()) {
WPREACH = Byte.parseByte(s);
} else {
WPREACH = Byte.MIN_VALUE;
}
}

protected final void initWPREADT(String s) {
if (!s.trim().isEmpty()) {
WPREADT = Byte.parseByte(s);
} else {
WPREADT = Byte.MIN_VALUE;
}
}

protected final void initWPREAEN(String s) {
if (!s.trim().isEmpty()) {
WPREAEN = Byte.parseByte(s);
} else {
WPREAEN = Byte.MIN_VALUE;
}
}

protected final void initWPREAFA(String s) {
if (!s.trim().isEmpty()) {
WPREAFA = Byte.parseByte(s);
} else {
WPREAFA = Byte.MIN_VALUE;
}
}

protected final void initWPREAFI(String s) {
if (!s.trim().isEmpty()) {
WPREAFI = Byte.parseByte(s);
} else {
WPREAFI = Byte.MIN_VALUE;
}
}

protected final void initWPREAM85(String s) {
if (!s.trim().isEmpty()) {
WPREAM85 = Byte.parseByte(s);
} else {
WPREAM85 = Byte.MIN_VALUE;
}
}

protected final void initWPREAM86(String s) {
if (!s.trim().isEmpty()) {
WPREAM86 = Byte.parseByte(s);
} else {
WPREAM86 = Byte.MIN_VALUE;
}
}

protected final void initWPREAM96(String s) {
if (!s.trim().isEmpty()) {
WPREAM96 = Byte.parseByte(s);
} else {
WPREAM96 = Byte.MIN_VALUE;
}
}

protected final void initWPREAMCH(String s) {
if (!s.trim().isEmpty()) {
WPREAMCH = Byte.parseByte(s);
} else {
WPREAMCH = Byte.MIN_VALUE;
}
}

protected final void initWPREAMDT(String s) {
if (!s.trim().isEmpty()) {
WPREAMDT = Byte.parseByte(s);
} else {
WPREAMDT = Byte.MIN_VALUE;
}
}

protected final void initWPREAMEN(String s) {
if (!s.trim().isEmpty()) {
WPREAMEN = Byte.parseByte(s);
} else {
WPREAMEN = Byte.MIN_VALUE;
}
}

protected final void initWPREAMFA(String s) {
if (!s.trim().isEmpty()) {
WPREAMFA = Byte.parseByte(s);
} else {
WPREAMFA = Byte.MIN_VALUE;
}
}

protected final void initWPREAMFI(String s) {
if (!s.trim().isEmpty()) {
WPREAMFI = Byte.parseByte(s);
} else {
WPREAMFI = Byte.MIN_VALUE;
}
}

protected final void initWPREAMNO(String s) {
if (!s.trim().isEmpty()) {
WPREAMNO = Byte.parseByte(s);
} else {
WPREAMNO = Byte.MIN_VALUE;
}
}

protected final void initWPREAMOH(String s) {
if (!s.trim().isEmpty()) {
WPREAMOH = Byte.parseByte(s);
} else {
WPREAMOH = Byte.MIN_VALUE;
}
}

protected final void initWPREAMRE(String s) {
if (!s.trim().isEmpty()) {
WPREAMRE = Byte.parseByte(s);
} else {
WPREAMRE = Byte.MIN_VALUE;
}
}

protected final void initWPREAMRH(String s) {
if (!s.trim().isEmpty()) {
WPREAMRH = Byte.parseByte(s);
} else {
WPREAMRH = Byte.MIN_VALUE;
}
}

protected final void initWPREAMST(String s) {
if (!s.trim().isEmpty()) {
WPREAMST = Byte.parseByte(s);
} else {
WPREAMST = Byte.MIN_VALUE;
}
}

protected final void initWPREAMVR(String s) {
if (!s.trim().isEmpty()) {
WPREAMVR = Byte.parseByte(s);
} else {
WPREAMVR = Byte.MIN_VALUE;
}
}

protected final void initWPREAMYO(String s) {
if (!s.trim().isEmpty()) {
WPREAMYO = Byte.parseByte(s);
} else {
WPREAMYO = Byte.MIN_VALUE;
}
}

protected final void initWPREANO(String s) {
if (!s.trim().isEmpty()) {
WPREANO = Byte.parseByte(s);
} else {
WPREANO = Byte.MIN_VALUE;
}
}

protected final void initWPREAOH(String s) {
if (!s.trim().isEmpty()) {
WPREAOH = Byte.parseByte(s);
} else {
WPREAOH = Byte.MIN_VALUE;
}
}

protected final void initWPREARE(String s) {
if (!s.trim().isEmpty()) {
WPREARE = Byte.parseByte(s);
} else {
WPREARE = Byte.MIN_VALUE;
}
}

protected final void initWPREARH(String s) {
if (!s.trim().isEmpty()) {
WPREARH = Byte.parseByte(s);
} else {
WPREARH = Byte.MIN_VALUE;
}
}

protected final void initWPREAST(String s) {
if (!s.trim().isEmpty()) {
WPREAST = Byte.parseByte(s);
} else {
WPREAST = Byte.MIN_VALUE;
}
}

protected final void initWPREAVR(String s) {
if (!s.trim().isEmpty()) {
WPREAVR = Byte.parseByte(s);
} else {
WPREAVR = Byte.MIN_VALUE;
}
}

protected final void initWPREAYO(String s) {
if (!s.trim().isEmpty()) {
WPREAYO = Byte.parseByte(s);
} else {
WPREAYO = Byte.MIN_VALUE;
}
}

protected final void initWPRGHX(String s) {
if (!s.trim().isEmpty()) {
WPRGHX = Byte.parseByte(s);
} else {
WPRGHX = Byte.MIN_VALUE;
}
}

protected final void initWPRPENS(String s) {
if (!s.trim().isEmpty()) {
WPRPENS = Byte.parseByte(s);
} else {
WPRPENS = Byte.MIN_VALUE;
}
}

protected final void initWPRR95(String s) {
if (!s.trim().isEmpty()) {
WPRR95 = Byte.parseByte(s);
} else {
WPRR95 = Byte.MIN_VALUE;
}
}

protected final void initWPRR96(String s) {
if (!s.trim().isEmpty()) {
WPRR96 = Byte.parseByte(s);
} else {
WPRR96 = Byte.MIN_VALUE;
}
}

protected final void initWPRRAG(String s) {
if (!s.trim().isEmpty()) {
WPRRAG = Byte.parseByte(s);
} else {
WPRRAG = Byte.MIN_VALUE;
}
}

protected final void initWPRRCH(String s) {
if (!s.trim().isEmpty()) {
WPRRCH = Byte.parseByte(s);
} else {
WPRRCH = Byte.MIN_VALUE;
}
}

protected final void initWPRRDT(String s) {
if (!s.trim().isEmpty()) {
WPRRDT = Byte.parseByte(s);
} else {
WPRRDT = Byte.MIN_VALUE;
}
}

protected final void initWPRREN(String s) {
if (!s.trim().isEmpty()) {
WPRREN = Byte.parseByte(s);
} else {
WPRREN = Byte.MIN_VALUE;
}
}

protected final void initWPRRFA(String s) {
if (!s.trim().isEmpty()) {
WPRRFA = Byte.parseByte(s);
} else {
WPRRFA = Byte.MIN_VALUE;
}
}

protected final void initWPRRFI(String s) {
if (!s.trim().isEmpty()) {
WPRRFI = Byte.parseByte(s);
} else {
WPRRFI = Byte.MIN_VALUE;
}
}

protected final void initWPRRM85(String s) {
if (!s.trim().isEmpty()) {
WPRRM85 = Byte.parseByte(s);
} else {
WPRRM85 = Byte.MIN_VALUE;
}
}

protected final void initWPRRM86(String s) {
if (!s.trim().isEmpty()) {
WPRRM86 = Byte.parseByte(s);
} else {
WPRRM86 = Byte.MIN_VALUE;
}
}

protected final void initWPRRM96(String s) {
if (!s.trim().isEmpty()) {
WPRRM96 = Byte.parseByte(s);
} else {
WPRRM96 = Byte.MIN_VALUE;
}
}

protected final void initWPRRMAF(String s) {
if (!s.trim().isEmpty()) {
WPRRMAF = Byte.parseByte(s);
} else {
WPRRMAF = Byte.MIN_VALUE;
}
}

protected final void initWPRRMAG(String s) {
if (!s.trim().isEmpty()) {
WPRRMAG = Byte.parseByte(s);
} else {
WPRRMAG = Byte.MIN_VALUE;
}
}

protected final void initWPRRMCH(String s) {
if (!s.trim().isEmpty()) {
WPRRMCH = Byte.parseByte(s);
} else {
WPRRMCH = Byte.MIN_VALUE;
}
}

protected final void initWPRRMDT(String s) {
if (!s.trim().isEmpty()) {
WPRRMDT = Byte.parseByte(s);
} else {
WPRRMDT = Byte.MIN_VALUE;
}
}

protected final void initWPRRMEN(String s) {
if (!s.trim().isEmpty()) {
WPRRMEN = Byte.parseByte(s);
} else {
WPRRMEN = Byte.MIN_VALUE;
}
}

protected final void initWPRRMFA(String s) {
if (!s.trim().isEmpty()) {
WPRRMFA = Byte.parseByte(s);
} else {
WPRRMFA = Byte.MIN_VALUE;
}
}

protected final void initWPRRMFI(String s) {
if (!s.trim().isEmpty()) {
WPRRMFI = Byte.parseByte(s);
} else {
WPRRMFI = Byte.MIN_VALUE;
}
}

protected final void initWPRRMLI(String s) {
if (!s.trim().isEmpty()) {
WPRRMLI = Byte.parseByte(s);
} else {
WPRRMLI = Byte.MIN_VALUE;
}
}

protected final void initWPRRMOH(String s) {
if (!s.trim().isEmpty()) {
WPRRMOH = Byte.parseByte(s);
} else {
WPRRMOH = Byte.MIN_VALUE;
}
}

protected final void initWPRRMRE(String s) {
if (!s.trim().isEmpty()) {
WPRRMRE = Byte.parseByte(s);
} else {
WPRRMRE = Byte.MIN_VALUE;
}
}

protected final void initWPRRMRH(String s) {
if (!s.trim().isEmpty()) {
WPRRMRH = Byte.parseByte(s);
} else {
WPRRMRH = Byte.MIN_VALUE;
}
}

protected final void initWPRRMST(String s) {
if (!s.trim().isEmpty()) {
WPRRMST = Byte.parseByte(s);
} else {
WPRRMST = Byte.MIN_VALUE;
}
}

protected final void initWPRRMYO(String s) {
if (!s.trim().isEmpty()) {
WPRRMYO = Byte.parseByte(s);
} else {
WPRRMYO = Byte.MIN_VALUE;
}
}

protected final void initWPRROH(String s) {
if (!s.trim().isEmpty()) {
WPRROH = Byte.parseByte(s);
} else {
WPRROH = Byte.MIN_VALUE;
}
}

protected final void initWPRRRE(String s) {
if (!s.trim().isEmpty()) {
WPRRRE = Byte.parseByte(s);
} else {
WPRRRE = Byte.MIN_VALUE;
}
}

protected final void initWPRRRH(String s) {
if (!s.trim().isEmpty()) {
WPRRRH = Byte.parseByte(s);
} else {
WPRRRH = Byte.MIN_VALUE;
}
}

protected final void initWPRRST(String s) {
if (!s.trim().isEmpty()) {
WPRRST = Byte.parseByte(s);
} else {
WPRRST = Byte.MIN_VALUE;
}
}

protected final void initWPRRYO(String s) {
if (!s.trim().isEmpty()) {
WPRRYO = Byte.parseByte(s);
} else {
WPRRYO = Byte.MIN_VALUE;
}
}

protected final void initWPRSAD1(String s) {
if (!s.trim().isEmpty()) {
WPRSAD1 = Byte.parseByte(s);
} else {
WPRSAD1 = Byte.MIN_VALUE;
}
}

protected final void initWPRSAD10(String s) {
if (!s.trim().isEmpty()) {
WPRSAD10 = Byte.parseByte(s);
} else {
WPRSAD10 = Byte.MIN_VALUE;
}
}

protected final void initWPRSAD11(String s) {
if (!s.trim().isEmpty()) {
WPRSAD11 = Byte.parseByte(s);
} else {
WPRSAD11 = Byte.MIN_VALUE;
}
}

protected final void initWPRSAD12(String s) {
if (!s.trim().isEmpty()) {
WPRSAD12 = Byte.parseByte(s);
} else {
WPRSAD12 = Byte.MIN_VALUE;
}
}

protected final void initWPRSAD13(String s) {
if (!s.trim().isEmpty()) {
WPRSAD13 = Byte.parseByte(s);
} else {
WPRSAD13 = Byte.MIN_VALUE;
}
}

protected final void initWPRSAD2(String s) {
if (!s.trim().isEmpty()) {
WPRSAD2 = Byte.parseByte(s);
} else {
WPRSAD2 = Byte.MIN_VALUE;
}
}

protected final void initWPRSAD3(String s) {
if (!s.trim().isEmpty()) {
WPRSAD3 = Byte.parseByte(s);
} else {
WPRSAD3 = Byte.MIN_VALUE;
}
}

protected final void initWPRSAD4(String s) {
if (!s.trim().isEmpty()) {
WPRSAD4 = Byte.parseByte(s);
} else {
WPRSAD4 = Byte.MIN_VALUE;
}
}

protected final void initWPRSAD5(String s) {
if (!s.trim().isEmpty()) {
WPRSAD5 = Byte.parseByte(s);
} else {
WPRSAD5 = Byte.MIN_VALUE;
}
}

protected final void initWPRSAD6(String s) {
if (!s.trim().isEmpty()) {
WPRSAD6 = Byte.parseByte(s);
} else {
WPRSAD6 = Byte.MIN_VALUE;
}
}

protected final void initWPRSAD7(String s) {
if (!s.trim().isEmpty()) {
WPRSAD7 = Byte.parseByte(s);
} else {
WPRSAD7 = Byte.MIN_VALUE;
}
}

protected final void initWPRSAD8(String s) {
if (!s.trim().isEmpty()) {
WPRSAD8 = Byte.parseByte(s);
} else {
WPRSAD8 = Byte.MIN_VALUE;
}
}

protected final void initWPRSAD9(String s) {
if (!s.trim().isEmpty()) {
WPRSAD9 = Byte.parseByte(s);
} else {
WPRSAD9 = Byte.MIN_VALUE;
}
}

protected final void initWPSN(String s) {
if (!s.trim().isEmpty()) {
WPSN = Byte.parseByte(s);
} else {
WPSN = Byte.MIN_VALUE;
}
}

protected final void initWPSPAM(String s) {
if (!s.trim().isEmpty()) {
WPSPAM = Byte.parseByte(s);
} else {
WPSPAM = Byte.MIN_VALUE;
}
}

protected final void initWPSPAW(String s) {
if (!s.trim().isEmpty()) {
WPSPAW = Byte.parseByte(s);
} else {
WPSPAW = Byte.MIN_VALUE;
}
}

protected final void initWPSPD(String s) {
if (!s.trim().isEmpty()) {
WPSPD = Byte.parseByte(s);
} else {
WPSPD = Byte.MIN_VALUE;
}
}

protected final void initWPSPD1A(String s) {
if (!s.trim().isEmpty()) {
WPSPD1A = Byte.parseByte(s);
} else {
WPSPD1A = Byte.MIN_VALUE;
}
}

protected final void initWPSPD1B(String s) {
if (!s.trim().isEmpty()) {
WPSPD1B = Byte.parseByte(s);
} else {
WPSPD1B = Byte.MIN_VALUE;
}
}

protected final void initWPSPD2(String s) {
if (!s.trim().isEmpty()) {
WPSPD2 = Byte.parseByte(s);
} else {
WPSPD2 = Byte.MIN_VALUE;
}
}

protected final void initWPSPD3(String s) {
if (!s.trim().isEmpty()) {
WPSPD3 = Byte.parseByte(s);
} else {
WPSPD3 = Byte.MIN_VALUE;
}
}

protected final void initWPSPD3A(String s) {
if (!s.trim().isEmpty()) {
WPSPD3A = Byte.parseByte(s);
} else {
WPSPD3A = Byte.MIN_VALUE;
}
}

protected final void initWPSPD3M(String s) {
if (!s.trim().isEmpty()) {
WPSPD3M = Byte.parseByte(s);
} else {
WPSPD3M = Byte.MIN_VALUE;
}
}

protected final void initWPSPD3Y(String s) {
if (!s.trim().isEmpty()) {
WPSPD3Y = Short.parseShort(s);
} else {
WPSPD3Y = Short.MIN_VALUE;
}
}

protected final void initWPSPD4(String s) {
if (!s.trim().isEmpty()) {
WPSPD4 = Byte.parseByte(s);
} else {
WPSPD4 = Byte.MIN_VALUE;
}
}

protected final void initWPSPD5M(String s) {
if (!s.trim().isEmpty()) {
WPSPD5M = Byte.parseByte(s);
} else {
WPSPD5M = Byte.MIN_VALUE;
}
}

protected final void initWPSPD5Y(String s) {
if (!s.trim().isEmpty()) {
WPSPD5Y = Byte.parseByte(s);
} else {
WPSPD5Y = Byte.MIN_VALUE;
}
}

protected final void initWPSPD6(String s) {
if (!s.trim().isEmpty()) {
WPSPD6 = Byte.parseByte(s);
} else {
WPSPD6 = Byte.MIN_VALUE;
}
}

protected final void initWPSPOU(String s) {
if (!s.trim().isEmpty()) {
WPSPOU = Integer.parseInt(s);
} else {
WPSPOU = Integer.MIN_VALUE;
}
}

protected final void initWPSPOUP(String s) {
if (!s.trim().isEmpty()) {
WPSPOUP = Byte.parseByte(s);
} else {
WPSPOUP = Byte.MIN_VALUE;
}
}

protected final void initWPSPTU(String s) {
if (!s.trim().isEmpty()) {
WPSPTU = Byte.parseByte(s);
} else {
WPSPTU = Byte.MIN_VALUE;
}
}

protected final void initWPSPTUA(String s) {
if (!s.trim().isEmpty()) {
WPSPTUA = Byte.parseByte(s);
} else {
WPSPTUA = Byte.MIN_VALUE;
}
}

protected final void initWPSPY(String s) {
if (!s.trim().isEmpty()) {
WPSPY = Byte.parseByte(s);
} else {
WPSPY = Byte.MIN_VALUE;
}
}

protected final void initWPSRUL(String s) {
if (!s.trim().isEmpty()) {
WPSRUL = Byte.parseByte(s);
} else {
WPSRUL = Byte.MIN_VALUE;
}
}

protected final void initWPTHPFE(String s) {
if (!s.trim().isEmpty()) {
WPTHPFE = Byte.parseByte(s);
} else {
WPTHPFE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPFL(String s) {
if (!s.trim().isEmpty()) {
WPTHPFL = Short.parseShort(s);
} else {
WPTHPFL = Short.MIN_VALUE;
}
}

protected final void initWPTHPFR(String s) {
if (!s.trim().isEmpty()) {
WPTHPFR = Byte.parseByte(s);
} else {
WPTHPFR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPFU(String s) {
if (!s.trim().isEmpty()) {
WPTHPFU = Short.parseShort(s);
} else {
WPTHPFU = Short.MIN_VALUE;
}
}

protected final void initWPTHPME(String s) {
if (!s.trim().isEmpty()) {
WPTHPME = Byte.parseByte(s);
} else {
WPTHPME = Byte.MIN_VALUE;
}
}

protected final void initWPTHPML(String s) {
if (!s.trim().isEmpty()) {
WPTHPML = Short.parseShort(s);
} else {
WPTHPML = Short.MIN_VALUE;
}
}

protected final void initWPTHPMR(String s) {
if (!s.trim().isEmpty()) {
WPTHPMR = Byte.parseByte(s);
} else {
WPTHPMR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPMU(String s) {
if (!s.trim().isEmpty()) {
WPTHPMU = Short.parseShort(s);
} else {
WPTHPMU = Short.MIN_VALUE;
}
}

protected final void initWPTHPOE(String s) {
if (!s.trim().isEmpty()) {
WPTHPOE = Byte.parseByte(s);
} else {
WPTHPOE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPOL(String s) {
if (!s.trim().isEmpty()) {
WPTHPOL = Short.parseShort(s);
} else {
WPTHPOL = Short.MIN_VALUE;
}
}

protected final void initWPTHPOR(String s) {
if (!s.trim().isEmpty()) {
WPTHPOR = Byte.parseByte(s);
} else {
WPTHPOR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPOU(String s) {
if (!s.trim().isEmpty()) {
WPTHPOU = Short.parseShort(s);
} else {
WPTHPOU = Short.MIN_VALUE;
}
}

protected final void initWPTHPWE(String s) {
if (!s.trim().isEmpty()) {
WPTHPWE = Byte.parseByte(s);
} else {
WPTHPWE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPWL(String s) {
if (!s.trim().isEmpty()) {
WPTHPWL = Short.parseShort(s);
} else {
WPTHPWL = Short.MIN_VALUE;
}
}

protected final void initWPTHPWR(String s) {
if (!s.trim().isEmpty()) {
WPTHPWR = Byte.parseByte(s);
} else {
WPTHPWR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPWU(String s) {
if (!s.trim().isEmpty()) {
WPTHPWU = Short.parseShort(s);
} else {
WPTHPWU = Short.MIN_VALUE;
}
}

protected final void initWPTHPYE(String s) {
if (!s.trim().isEmpty()) {
WPTHPYE = Byte.parseByte(s);
} else {
WPTHPYE = Byte.MIN_VALUE;
}
}

protected final void initWPTHPYL(String s) {
if (!s.trim().isEmpty()) {
WPTHPYL = Integer.parseInt(s);
} else {
WPTHPYL = Integer.MIN_VALUE;
}
}

protected final void initWPTHPYR(String s) {
if (!s.trim().isEmpty()) {
WPTHPYR = Byte.parseByte(s);
} else {
WPTHPYR = Byte.MIN_VALUE;
}
}

protected final void initWPTHPYU(String s) {
if (!s.trim().isEmpty()) {
WPTHPYU = Integer.parseInt(s);
} else {
WPTHPYU = Integer.MIN_VALUE;
}
}

protected final void initWPUPAFE(String s) {
if (!s.trim().isEmpty()) {
WPUPAFE = Byte.parseByte(s);
} else {
WPUPAFE = Byte.MIN_VALUE;
}
}

protected final void initWPUPAFL(String s) {
if (!s.trim().isEmpty()) {
WPUPAFL = Short.parseShort(s);
} else {
WPUPAFL = Short.MIN_VALUE;
}
}

protected final void initWPUPAFR(String s) {
if (!s.trim().isEmpty()) {
WPUPAFR = Byte.parseByte(s);
} else {
WPUPAFR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAFU(String s) {
if (!s.trim().isEmpty()) {
WPUPAFU = Short.parseShort(s);
} else {
WPUPAFU = Short.MIN_VALUE;
}
}

protected final void initWPUPAME(String s) {
if (!s.trim().isEmpty()) {
WPUPAME = Byte.parseByte(s);
} else {
WPUPAME = Byte.MIN_VALUE;
}
}

protected final void initWPUPAML(String s) {
if (!s.trim().isEmpty()) {
WPUPAML = Short.parseShort(s);
} else {
WPUPAML = Short.MIN_VALUE;
}
}

protected final void initWPUPAMR(String s) {
if (!s.trim().isEmpty()) {
WPUPAMR = Byte.parseByte(s);
} else {
WPUPAMR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAMU(String s) {
if (!s.trim().isEmpty()) {
WPUPAMU = Short.parseShort(s);
} else {
WPUPAMU = Short.MIN_VALUE;
}
}

protected final void initWPUPAOE(String s) {
if (!s.trim().isEmpty()) {
WPUPAOE = Integer.parseInt(s);
} else {
WPUPAOE = Integer.MIN_VALUE;
}
}

protected final void initWPUPAOL(String s) {
if (!s.trim().isEmpty()) {
WPUPAOL = Short.parseShort(s);
} else {
WPUPAOL = Short.MIN_VALUE;
}
}

protected final void initWPUPAOR(String s) {
if (!s.trim().isEmpty()) {
WPUPAOR = Byte.parseByte(s);
} else {
WPUPAOR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAOU(String s) {
if (!s.trim().isEmpty()) {
WPUPAOU = Short.parseShort(s);
} else {
WPUPAOU = Short.MIN_VALUE;
}
}

protected final void initWPUPAWE(String s) {
if (!s.trim().isEmpty()) {
WPUPAWE = Byte.parseByte(s);
} else {
WPUPAWE = Byte.MIN_VALUE;
}
}

protected final void initWPUPAWL(String s) {
if (!s.trim().isEmpty()) {
WPUPAWL = Short.parseShort(s);
} else {
WPUPAWL = Short.MIN_VALUE;
}
}

protected final void initWPUPAWR(String s) {
if (!s.trim().isEmpty()) {
WPUPAWR = Byte.parseByte(s);
} else {
WPUPAWR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAWU(String s) {
if (!s.trim().isEmpty()) {
WPUPAWU = Short.parseShort(s);
} else {
WPUPAWU = Short.MIN_VALUE;
}
}

protected final void initWPUPAYE(String s) {
if (!s.trim().isEmpty()) {
WPUPAYE = Byte.parseByte(s);
} else {
WPUPAYE = Byte.MIN_VALUE;
}
}

protected final void initWPUPAYL(String s) {
if (!s.trim().isEmpty()) {
WPUPAYL = Byte.parseByte(s);
} else {
WPUPAYL = Byte.MIN_VALUE;
}
}

protected final void initWPUPAYR(String s) {
if (!s.trim().isEmpty()) {
WPUPAYR = Byte.parseByte(s);
} else {
WPUPAYR = Byte.MIN_VALUE;
}
}

protected final void initWPUPAYU(String s) {
if (!s.trim().isEmpty()) {
WPUPAYU = Short.parseShort(s);
} else {
WPUPAYU = Short.MIN_VALUE;
}
}

protected final void initWPVBUSE(String s) {
if (!s.trim().isEmpty()) {
WPVBUSE = Byte.parseByte(s);
} else {
WPVBUSE = Byte.MIN_VALUE;
}
}

protected final void initWPVBUSL(String s) {
if (!s.trim().isEmpty()) {
WPVBUSL = Integer.parseInt(s);
} else {
WPVBUSL = Integer.MIN_VALUE;
}
}

protected final void initWPVBUSR(String s) {
if (!s.trim().isEmpty()) {
WPVBUSR = Byte.parseByte(s);
} else {
WPVBUSR = Byte.MIN_VALUE;
}
}

protected final void initWPVBUSU(String s) {
if (!s.trim().isEmpty()) {
WPVBUSU = Integer.parseInt(s);
} else {
WPVBUSU = Integer.MIN_VALUE;
}
}

protected final void initWPWLYYE(String s) {
if (!s.trim().isEmpty()) {
WPWLYYE = Byte.parseByte(s);
} else {
WPWLYYE = Byte.MIN_VALUE;
}
}

protected final void initWPWLYYL(String s) {
if (!s.trim().isEmpty()) {
WPWLYYL = Integer.parseInt(s);
} else {
WPWLYYL = Integer.MIN_VALUE;
}
}

protected final void initWPWLYYR(String s) {
if (!s.trim().isEmpty()) {
WPWLYYR = Byte.parseByte(s);
} else {
WPWLYYR = Byte.MIN_VALUE;
}
}

protected final void initWPWLYYU(String s) {
if (!s.trim().isEmpty()) {
WPWLYYU = Integer.parseInt(s);
} else {
WPWLYYU = Integer.MIN_VALUE;
}
}

protected final void initWPWYJ95(String s) {
if (!s.trim().isEmpty()) {
WPWYJ95 = Byte.parseByte(s);
} else {
WPWYJ95 = Byte.MIN_VALUE;
}
}

protected final void initWPWYJBU(String s) {
if (!s.trim().isEmpty()) {
WPWYJBU = Byte.parseByte(s);
} else {
WPWYJBU = Byte.MIN_VALUE;
}
}

protected final void initWPWYJCA(String s) {
if (!s.trim().isEmpty()) {
WPWYJCA = Byte.parseByte(s);
} else {
WPWYJCA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJCO(String s) {
if (!s.trim().isEmpty()) {
WPWYJCO = Byte.parseByte(s);
} else {
WPWYJCO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJFB(String s) {
if (!s.trim().isEmpty()) {
WPWYJFB = Byte.parseByte(s);
} else {
WPWYJFB = Byte.MIN_VALUE;
}
}

protected final void initWPWYJFI(String s) {
if (!s.trim().isEmpty()) {
WPWYJFI = Byte.parseByte(s);
} else {
WPWYJFI = Byte.MIN_VALUE;
}
}

protected final void initWPWYJHO(String s) {
if (!s.trim().isEmpty()) {
WPWYJHO = Byte.parseByte(s);
} else {
WPWYJHO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJM85(String s) {
if (!s.trim().isEmpty()) {
WPWYJM85 = Byte.parseByte(s);
} else {
WPWYJM85 = Byte.MIN_VALUE;
}
}

protected final void initWPWYJM86(String s) {
if (!s.trim().isEmpty()) {
WPWYJM86 = Byte.parseByte(s);
} else {
WPWYJM86 = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMBC(String s) {
if (!s.trim().isEmpty()) {
WPWYJMBC = Byte.parseByte(s);
} else {
WPWYJMBC = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMBU(String s) {
if (!s.trim().isEmpty()) {
WPWYJMBU = Byte.parseByte(s);
} else {
WPWYJMBU = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMCA(String s) {
if (!s.trim().isEmpty()) {
WPWYJMCA = Byte.parseByte(s);
} else {
WPWYJMCA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMCH(String s) {
if (!s.trim().isEmpty()) {
WPWYJMCH = Byte.parseByte(s);
} else {
WPWYJMCH = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMCO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMCO = Byte.parseByte(s);
} else {
WPWYJMCO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMFB(String s) {
if (!s.trim().isEmpty()) {
WPWYJMFB = Byte.parseByte(s);
} else {
WPWYJMFB = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMFI(String s) {
if (!s.trim().isEmpty()) {
WPWYJMFI = Byte.parseByte(s);
} else {
WPWYJMFI = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMHF(String s) {
if (!s.trim().isEmpty()) {
WPWYJMHF = Byte.parseByte(s);
} else {
WPWYJMHF = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMHH(String s) {
if (!s.trim().isEmpty()) {
WPWYJMHH = Byte.parseByte(s);
} else {
WPWYJMHH = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMHO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMHO = Byte.parseByte(s);
} else {
WPWYJMHO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMLO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMLO = Byte.parseByte(s);
} else {
WPWYJMLO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMMO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMMO = Byte.parseByte(s);
} else {
WPWYJMMO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMON(String s) {
if (!s.trim().isEmpty()) {
WPWYJMON = Byte.parseByte(s);
} else {
WPWYJMON = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMPA(String s) {
if (!s.trim().isEmpty()) {
WPWYJMPA = Byte.parseByte(s);
} else {
WPWYJMPA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMPH(String s) {
if (!s.trim().isEmpty()) {
WPWYJMPH = Byte.parseByte(s);
} else {
WPWYJMPH = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMTI(String s) {
if (!s.trim().isEmpty()) {
WPWYJMTI = Byte.parseByte(s);
} else {
WPWYJMTI = Byte.MIN_VALUE;
}
}

protected final void initWPWYJMTO(String s) {
if (!s.trim().isEmpty()) {
WPWYJMTO = Byte.parseByte(s);
} else {
WPWYJMTO = Byte.MIN_VALUE;
}
}

protected final void initWPWYJON(String s) {
if (!s.trim().isEmpty()) {
WPWYJON = Byte.parseByte(s);
} else {
WPWYJON = Byte.MIN_VALUE;
}
}

protected final void initWPWYJPA(String s) {
if (!s.trim().isEmpty()) {
WPWYJPA = Byte.parseByte(s);
} else {
WPWYJPA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJREA(String s) {
if (!s.trim().isEmpty()) {
WPWYJREA = Byte.parseByte(s);
} else {
WPWYJREA = Byte.MIN_VALUE;
}
}

protected final void initWPWYJTI(String s) {
if (!s.trim().isEmpty()) {
WPWYJTI = Byte.parseByte(s);
} else {
WPWYJTI = Byte.MIN_VALUE;
}
}

protected final void initWPWYN85(String s) {
if (!s.trim().isEmpty()) {
WPWYN85 = Byte.parseByte(s);
} else {
WPWYN85 = Byte.MIN_VALUE;
}
}

protected final void initWPWYNCA(String s) {
if (!s.trim().isEmpty()) {
WPWYNCA = Byte.parseByte(s);
} else {
WPWYNCA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNCH(String s) {
if (!s.trim().isEmpty()) {
WPWYNCH = Byte.parseByte(s);
} else {
WPWYNCH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNEA(String s) {
if (!s.trim().isEmpty()) {
WPWYNEA = Byte.parseByte(s);
} else {
WPWYNEA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNEM(String s) {
if (!s.trim().isEmpty()) {
WPWYNEM = Byte.parseByte(s);
} else {
WPWYNEM = Byte.MIN_VALUE;
}
}

protected final void initWPWYNFA(String s) {
if (!s.trim().isEmpty()) {
WPWYNFA = Byte.parseByte(s);
} else {
WPWYNFA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNM85(String s) {
if (!s.trim().isEmpty()) {
WPWYNM85 = Byte.parseByte(s);
} else {
WPWYNM85 = Byte.MIN_VALUE;
}
}

protected final void initWPWYNM86(String s) {
if (!s.trim().isEmpty()) {
WPWYNM86 = Byte.parseByte(s);
} else {
WPWYNM86 = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMAB(String s) {
if (!s.trim().isEmpty()) {
byte b = Byte.parseByte(s);
if (b == -1) {
WPWYNMAB = false;
} else {
WPWYNMAB = true;
}
}
}

protected final void initWPWYNMCA(String s) {
if (!s.trim().isEmpty()) {
WPWYNMCA = Byte.parseByte(s);
} else {
WPWYNMCA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMCH(String s) {
if (!s.trim().isEmpty()) {
WPWYNMCH = Byte.parseByte(s);
} else {
WPWYNMCH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMCO(String s) {
if (!s.trim().isEmpty()) {
WPWYNMCO = Byte.parseByte(s);
} else {
WPWYNMCO = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMDE(String s) {
if (!s.trim().isEmpty()) {
WPWYNMDE = Byte.parseByte(s);
} else {
WPWYNMDE = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMEA(String s) {
if (!s.trim().isEmpty()) {
WPWYNMEA = Byte.parseByte(s);
} else {
WPWYNMEA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMEM(String s) {
if (!s.trim().isEmpty()) {
WPWYNMEM = Byte.parseByte(s);
} else {
WPWYNMEM = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMFA(String s) {
if (!s.trim().isEmpty()) {
WPWYNMFA = Byte.parseByte(s);
} else {
WPWYNMFA = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMLH(String s) {
if (!s.trim().isEmpty()) {
WPWYNMLH = Byte.parseByte(s);
} else {
WPWYNMLH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMLO(String s) {
if (!s.trim().isEmpty()) {
WPWYNMLO = Byte.parseByte(s);
} else {
WPWYNMLO = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMMO(String s) {
if (!s.trim().isEmpty()) {
WPWYNMMO = Byte.parseByte(s);
} else {
WPWYNMMO = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMO(String s) {
if (!s.trim().isEmpty()) {
WPWYNMO = Byte.parseByte(s);
} else {
WPWYNMO = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMOH(String s) {
if (!s.trim().isEmpty()) {
WPWYNMOH = Byte.parseByte(s);
} else {
WPWYNMOH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMOR(String s) {
if (!s.trim().isEmpty()) {
WPWYNMOR = Byte.parseByte(s);
} else {
WPWYNMOR = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMOU(String s) {
if (!s.trim().isEmpty()) {
WPWYNMOU = Byte.parseByte(s);
} else {
WPWYNMOU = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMRE(String s) {
if (!s.trim().isEmpty()) {
WPWYNMRE = Byte.parseByte(s);
} else {
WPWYNMRE = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMRH(String s) {
if (!s.trim().isEmpty()) {
WPWYNMRH = Byte.parseByte(s);
} else {
WPWYNMRH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMTI(String s) {
if (!s.trim().isEmpty()) {
WPWYNMTI = Byte.parseByte(s);
} else {
WPWYNMTI = Byte.MIN_VALUE;
}
}

protected final void initWPWYNMVR(String s) {
if (!s.trim().isEmpty()) {
WPWYNMVR = Byte.parseByte(s);
} else {
WPWYNMVR = Byte.MIN_VALUE;
}
}

protected final void initWPWYNOH(String s) {
if (!s.trim().isEmpty()) {
WPWYNOH = Byte.parseByte(s);
} else {
WPWYNOH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNOU(String s) {
if (!s.trim().isEmpty()) {
WPWYNOU = Byte.parseByte(s);
} else {
WPWYNOU = Byte.MIN_VALUE;
}
}

protected final void initWPWYNRE(String s) {
if (!s.trim().isEmpty()) {
WPWYNRE = Byte.parseByte(s);
} else {
WPWYNRE = Byte.MIN_VALUE;
}
}

protected final void initWPWYNRH(String s) {
if (!s.trim().isEmpty()) {
WPWYNRH = Byte.parseByte(s);
} else {
WPWYNRH = Byte.MIN_VALUE;
}
}

protected final void initWPWYNTI(String s) {
if (!s.trim().isEmpty()) {
WPWYNTI = Byte.parseByte(s);
} else {
WPWYNTI = Byte.MIN_VALUE;
}
}

protected final void initWPWYNVR(String s) {
if (!s.trim().isEmpty()) {
WPWYNVR = Byte.parseByte(s);
} else {
WPWYNVR = Byte.MIN_VALUE;
}
}

protected final void initWPWYW95(String s) {
if (!s.trim().isEmpty()) {
WPWYW95 = Byte.parseByte(s);
} else {
WPWYW95 = Byte.MIN_VALUE;
}
}

protected final void initWPWYWEN(String s) {
if (!s.trim().isEmpty()) {
WPWYWEN = Byte.parseByte(s);
} else {
WPWYWEN = Byte.MIN_VALUE;
}
}

protected final void initWPWYWM85(String s) {
if (!s.trim().isEmpty()) {
WPWYWM85 = Byte.parseByte(s);
} else {
WPWYWM85 = Byte.MIN_VALUE;
}
}

protected final void initWPWYWM86(String s) {
if (!s.trim().isEmpty()) {
WPWYWM86 = Byte.parseByte(s);
} else {
WPWYWM86 = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMCH(String s) {
if (!s.trim().isEmpty()) {
WPWYWMCH = Byte.parseByte(s);
} else {
WPWYWMCH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMEN(String s) {
if (!s.trim().isEmpty()) {
WPWYWMEN = Byte.parseByte(s);
} else {
WPWYWMEN = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMFI(String s) {
if (!s.trim().isEmpty()) {
WPWYWMFI = Byte.parseByte(s);
} else {
WPWYWMFI = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMHE(String s) {
if (!s.trim().isEmpty()) {
WPWYWMHE = Byte.parseByte(s);
} else {
WPWYWMHE = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMHH(String s) {
if (!s.trim().isEmpty()) {
WPWYWMHH = Byte.parseByte(s);
} else {
WPWYWMHH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMMO(String s) {
if (!s.trim().isEmpty()) {
WPWYWMMO = Byte.parseByte(s);
} else {
WPWYWMMO = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMO(String s) {
if (!s.trim().isEmpty()) {
WPWYWMO = Byte.parseByte(s);
} else {
WPWYWMO = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMOH(String s) {
if (!s.trim().isEmpty()) {
WPWYWMOH = Byte.parseByte(s);
} else {
WPWYWMOH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMRH(String s) {
if (!s.trim().isEmpty()) {
WPWYWMRH = Byte.parseByte(s);
} else {
WPWYWMRH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWMSU(String s) {
if (!s.trim().isEmpty()) {
WPWYWMSU = Byte.parseByte(s);
} else {
WPWYWMSU = Byte.MIN_VALUE;
}
}

protected final void initWPWYWOH(String s) {
if (!s.trim().isEmpty()) {
WPWYWOH = Byte.parseByte(s);
} else {
WPWYWOH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWRH(String s) {
if (!s.trim().isEmpty()) {
WPWYWRH = Byte.parseByte(s);
} else {
WPWYWRH = Byte.MIN_VALUE;
}
}

protected final void initWPWYWSU(String s) {
if (!s.trim().isEmpty()) {
WPWYWSU = Byte.parseByte(s);
} else {
WPWYWSU = Byte.MIN_VALUE;
}
}

protected final void initWPYFRAC(String s) {
if (!s.trim().isEmpty()) {
WPYFRAC = Byte.parseByte(s);
} else {
WPYFRAC = Byte.MIN_VALUE;
}
}

protected final void initWPYST95(String s) {
if (!s.trim().isEmpty()) {
WPYST95 = Byte.parseByte(s);
} else {
WPYST95 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTAF(String s) {
if (!s.trim().isEmpty()) {
WPYSTAF = Byte.parseByte(s);
} else {
WPYSTAF = Byte.MIN_VALUE;
}
}

protected final void initWPYSTCH(String s) {
if (!s.trim().isEmpty()) {
WPYSTCH = Byte.parseByte(s);
} else {
WPYSTCH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTEN(String s) {
if (!s.trim().isEmpty()) {
WPYSTEN = Byte.parseByte(s);
} else {
WPYSTEN = Byte.MIN_VALUE;
}
}

protected final void initWPYSTFA(String s) {
if (!s.trim().isEmpty()) {
WPYSTFA = Byte.parseByte(s);
} else {
WPYSTFA = Byte.MIN_VALUE;
}
}

protected final void initWPYSTFI(String s) {
if (!s.trim().isEmpty()) {
WPYSTFI = Byte.parseByte(s);
} else {
WPYSTFI = Byte.MIN_VALUE;
}
}

protected final void initWPYSTM85(String s) {
if (!s.trim().isEmpty()) {
WPYSTM85 = Byte.parseByte(s);
} else {
WPYSTM85 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTM86(String s) {
if (!s.trim().isEmpty()) {
WPYSTM86 = Byte.parseByte(s);
} else {
WPYSTM86 = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMAF(String s) {
if (!s.trim().isEmpty()) {
WPYSTMAF = Byte.parseByte(s);
} else {
WPYSTMAF = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMAG(String s) {
if (!s.trim().isEmpty()) {
WPYSTMAG = Byte.parseByte(s);
} else {
WPYSTMAG = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMCH(String s) {
if (!s.trim().isEmpty()) {
WPYSTMCH = Byte.parseByte(s);
} else {
WPYSTMCH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMCO(String s) {
if (!s.trim().isEmpty()) {
WPYSTMCO = Byte.parseByte(s);
} else {
WPYSTMCO = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMEN(String s) {
if (!s.trim().isEmpty()) {
WPYSTMEN = Byte.parseByte(s);
} else {
WPYSTMEN = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMFA(String s) {
if (!s.trim().isEmpty()) {
WPYSTMFA = Byte.parseByte(s);
} else {
WPYSTMFA = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMFI(String s) {
if (!s.trim().isEmpty()) {
WPYSTMFI = Byte.parseByte(s);
} else {
WPYSTMFI = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMMO(String s) {
if (!s.trim().isEmpty()) {
WPYSTMMO = Byte.parseByte(s);
} else {
WPYSTMMO = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMO(String s) {
if (!s.trim().isEmpty()) {
WPYSTMO = Byte.parseByte(s);
} else {
WPYSTMO = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMOH(String s) {
if (!s.trim().isEmpty()) {
WPYSTMOH = Byte.parseByte(s);
} else {
WPYSTMOH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMOU(String s) {
if (!s.trim().isEmpty()) {
WPYSTMOU = Byte.parseByte(s);
} else {
WPYSTMOU = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMPA(String s) {
if (!s.trim().isEmpty()) {
WPYSTMPA = Byte.parseByte(s);
} else {
WPYSTMPA = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMRE(String s) {
if (!s.trim().isEmpty()) {
WPYSTMRE = Byte.parseByte(s);
} else {
WPYSTMRE = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMRH(String s) {
if (!s.trim().isEmpty()) {
WPYSTMRH = Byte.parseByte(s);
} else {
WPYSTMRH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMST(String s) {
if (!s.trim().isEmpty()) {
WPYSTMST = Byte.parseByte(s);
} else {
WPYSTMST = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMTI(String s) {
if (!s.trim().isEmpty()) {
WPYSTMTI = Byte.parseByte(s);
} else {
WPYSTMTI = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMVR(String s) {
if (!s.trim().isEmpty()) {
WPYSTMVR = Byte.parseByte(s);
} else {
WPYSTMVR = Byte.MIN_VALUE;
}
}

protected final void initWPYSTMYO(String s) {
if (!s.trim().isEmpty()) {
WPYSTMYO = Byte.parseByte(s);
} else {
WPYSTMYO = Byte.MIN_VALUE;
}
}

protected final void initWPYSTOH(String s) {
if (!s.trim().isEmpty()) {
WPYSTOH = Byte.parseByte(s);
} else {
WPYSTOH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTOU(String s) {
if (!s.trim().isEmpty()) {
WPYSTOU = Byte.parseByte(s);
} else {
WPYSTOU = Byte.MIN_VALUE;
}
}

protected final void initWPYSTPA(String s) {
if (!s.trim().isEmpty()) {
WPYSTPA = Byte.parseByte(s);
} else {
WPYSTPA = Byte.MIN_VALUE;
}
}

protected final void initWPYSTPM(String s) {
if (!s.trim().isEmpty()) {
WPYSTPM = Byte.parseByte(s);
} else {
WPYSTPM = Byte.MIN_VALUE;
}
}

protected final void initWPYSTRE(String s) {
if (!s.trim().isEmpty()) {
WPYSTRE = Byte.parseByte(s);
} else {
WPYSTRE = Byte.MIN_VALUE;
}
}

protected final void initWPYSTRH(String s) {
if (!s.trim().isEmpty()) {
WPYSTRH = Byte.parseByte(s);
} else {
WPYSTRH = Byte.MIN_VALUE;
}
}

protected final void initWPYSTTI(String s) {
if (!s.trim().isEmpty()) {
WPYSTTI = Byte.parseByte(s);
} else {
WPYSTTI = Byte.MIN_VALUE;
}
}

protected final void initWPYSTVR(String s) {
if (!s.trim().isEmpty()) {
WPYSTVR = Byte.parseByte(s);
} else {
WPYSTVR = Byte.MIN_VALUE;
}
}

protected final void initWPYSTYO(String s) {
if (!s.trim().isEmpty()) {
WPYSTYO = Byte.parseByte(s);
} else {
WPYSTYO = Byte.MIN_VALUE;
}
}

protected final void initWTC_P_F(String s) {
if (!s.trim().isEmpty()) {
WTC_P_F = Byte.parseByte(s);
} else {
WTC_P_F = Byte.MIN_VALUE;
}
}

protected final void initWTC_P_I(String s) {
if (!s.trim().isEmpty()) {
WTC_P_I = Double.parseDouble(s);
} else {
WTC_P_I = Double.NaN;
}
}

protected final void initWTC_P_O(String s) {
if (!s.trim().isEmpty()) {
WTC_P_O = Short.parseShort(s);
} else {
WTC_P_O = Short.MIN_VALUE;
}
}

protected final void initWTC_P_T(String s) {
if (!s.trim().isEmpty()) {
WTC_P_T = Short.parseShort(s);
} else {
WTC_P_T = Short.MIN_VALUE;
}
}

protected final void initWTC_R_F(String s) {
if (!s.trim().isEmpty()) {
WTC_R_F = Byte.parseByte(s);
} else {
WTC_R_F = Byte.MIN_VALUE;
}
}

protected final void initWTC_R_I(String s) {
if (!s.trim().isEmpty()) {
WTC_R_I = Double.parseDouble(s);
} else {
WTC_R_I = Double.NaN;
}
}

protected final void initWTC_R_O(String s) {
if (!s.trim().isEmpty()) {
WTC_R_O = Short.parseShort(s);
} else {
WTC_R_O = Short.MIN_VALUE;
}
}

protected final void initWTC_R_T(String s) {
if (!s.trim().isEmpty()) {
WTC_R_T = Short.parseShort(s);
} else {
WTC_R_T = Short.MIN_VALUE;
}
}

public boolean getABVSPA() {
return ABVSPA;
}

public byte getABVSPASP() {
return ABVSPASP;
}

public double getAIRTEMP() {
return AIRTEMP;
}

public byte getANYENDOW() {
return ANYENDOW;
}

public byte getASKINST() {
return ASKINST;
}

public boolean getASKPX() {
return ASKPX;
}

public byte getBPCONST() {
return BPCONST;
}

public byte getBPRESPC() {
return BPRESPC;
}

public byte getBSWILL() {
return BSWILL;
}

public byte getCAARR01() {
return CAARR01;
}

public byte getCAARR02() {
return CAARR02;
}

public byte getCAARR03() {
return CAARR03;
}

public byte getCAARR04() {
return CAARR04;
}

public byte getCAARR05() {
return CAARR05;
}

public byte getCAARR06() {
return CAARR06;
}

public byte getCAARR07() {
return CAARR07;
}

public byte getCAARR08() {
return CAARR08;
}

public byte getCAARR09() {
return CAARR09;
}

public byte getCAARR10() {
return CAARR10;
}

public byte getCAARR11() {
return CAARR11;
}

public byte getCAASK1() {
return CAASK1;
}

public byte getCAASK2() {
return CAASK2;
}

public byte getCACLUB1() {
return CACLUB1;
}

public byte getCACLUB2() {
return CACLUB2;
}

public byte getCACLUB3() {
return CACLUB3;
}

public byte getCACLUB4() {
return CACLUB4;
}

public byte getCACLUB5() {
return CACLUB5;
}

public byte getCACLUB96() {
return CACLUB96;
}

public byte getCADCC() {
return CADCC;
}

public byte getCADCD() {
return CADCD;
}

public byte getCADP1() {
return CADP1;
}

public byte getCADP2() {
return CADP2;
}

public byte getCADP3() {
return CADP3;
}

public byte getCAFAM() {
return CAFAM;
}

public byte getCAFAM10() {
return CAFAM10;
}

public byte getCAFAM11() {
return CAFAM11;
}

public boolean getCAFAM12() {
return CAFAM12;
}

public byte getCAFAM13() {
return CAFAM13;
}

public byte getCAFAM14() {
return CAFAM14;
}

public boolean getCAFAM15() {
return CAFAM15;
}

public boolean getCAFAM16() {
return CAFAM16;
}

public byte getCAFAM17() {
return CAFAM17;
}

public byte getCAFAM18() {
return CAFAM18;
}

public boolean getCAFAM19() {
return CAFAM19;
}

public byte getCAFAM2() {
return CAFAM2;
}

public byte getCAFAM20() {
return CAFAM20;
}

public byte getCAFAM21() {
return CAFAM21;
}

public boolean getCAFAM22() {
return CAFAM22;
}

public boolean getCAFAM23() {
return CAFAM23;
}

public boolean getCAFAM24() {
return CAFAM24;
}

public boolean getCAFAM25() {
return CAFAM25;
}

public byte getCAFAM3() {
return CAFAM3;
}

public byte getCAFAM4() {
return CAFAM4;
}

public byte getCAFAM5() {
return CAFAM5;
}

public byte getCAFAM6() {
return CAFAM6;
}

public byte getCAFAM7() {
return CAFAM7;
}

public byte getCAFAM8() {
return CAFAM8;
}

public byte getCAFAM9() {
return CAFAM9;
}

public byte getCAFND1() {
return CAFND1;
}

public byte getCAFND2() {
return CAFND2;
}

public byte getCAGACT96() {
return CAGACT96;
}

public byte getCAGACTA() {
return CAGACTA;
}

public byte getCAGACTAR() {
return CAGACTAR;
}

public byte getCAGACTB() {
return CAGACTB;
}

public byte getCAGACTC() {
return CAGACTC;
}

public byte getCAGACTD() {
return CAGACTD;
}

public byte getCAGACTE() {
return CAGACTE;
}

public byte getCAGACTF() {
return CAGACTF;
}

public byte getCAGACTG() {
return CAGACTG;
}

public byte getCAGACTHW() {
return CAGACTHW;
}

public byte getCAGACTIL() {
return CAGACTIL;
}

public byte getCAGACTLE() {
return CAGACTLE;
}

public byte getCAGACTME() {
return CAGACTME;
}

public byte getCAGACTPU() {
return CAGACTPU;
}

public byte getCAGACTSO() {
return CAGACTSO;
}

public byte getCAGDIF() {
return CAGDIF;
}

public byte getCAGDIFA() {
return CAGDIFA;
}

public byte getCAGHOA() {
return CAGHOA;
}

public byte getCAGHOL() {
return CAGHOL;
}

public byte getCAGLA() {
return CAGLA;
}

public byte getCAGLK() {
return CAGLK;
}

public byte getCAGLKTDS() {
return CAGLKTDS;
}

public byte getCAGLKTHO() {
return CAGLKTHO;
}

public byte getCAGLKTWE() {
return CAGLKTWE;
}

public byte getCAGLKTWK() {
return CAGLKTWK;
}

public byte getCAGLKTYR() {
return CAGLKTYR;
}

public byte getCAGTWD() {
return CAGTWD;
}

public byte getCAGTWDA() {
return CAGTWDA;
}

public byte getCAGTWE() {
return CAGTWE;
}

public byte getCAGTWEA() {
return CAGTWEA;
}

public byte getCAGTY() {
return CAGTY;
}

public byte getCAGTYA() {
return CAGTYA;
}

public boolean getCAGWHM85() {
return CAGWHM85;
}

public boolean getCAGWHM86() {
return CAGWHM86;
}

public boolean getCAGWHM96() {
return CAGWHM96;
}

public boolean getCAGWHMEJ() {
return CAGWHMEJ;
}

public boolean getCAGWHMLV() {
return CAGWHMLV;
}

public boolean getCAGWHMOC() {
return CAGWHMOC;
}

public byte getCAGWHY95() {
return CAGWHY95;
}

public byte getCAGWHY96() {
return CAGWHY96;
}

public byte getCAGWHYAC() {
return CAGWHYAC;
}

public byte getCAGWHYDF() {
return CAGWHYDF;
}

public byte getCAGWHYDV() {
return CAGWHYDV;
}

public byte getCAGWHYEN() {
return CAGWHYEN;
}

public byte getCAGWHYFA() {
return CAGWHYFA;
}

public byte getCAGWHYFI() {
return CAGWHYFI;
}

public byte getCAGWHYGB() {
return CAGWHYGB;
}

public boolean getCAGWHYMAC() {
return CAGWHYMAC;
}

public boolean getCAGWHYMDF() {
return CAGWHYMDF;
}

public boolean getCAGWHYMDV() {
return CAGWHYMDV;
}

public boolean getCAGWHYMEN() {
return CAGWHYMEN;
}

public boolean getCAGWHYMFA() {
return CAGWHYMFA;
}

public boolean getCAGWHYMFI() {
return CAGWHYMFI;
}

public boolean getCAGWHYMGB() {
return CAGWHYMGB;
}

public boolean getCAGWHYMPB() {
return CAGWHYMPB;
}

public boolean getCAGWHYMPO() {
return CAGWHYMPO;
}

public boolean getCAGWHYMWK() {
return CAGWHYMWK;
}

public byte getCAGWHYPB() {
return CAGWHYPB;
}

public byte getCAGWHYPO() {
return CAGWHYPO;
}

public byte getCAGWHYWK() {
return CAGWHYWK;
}

public byte getCAGYA() {
return CAGYA;
}

public byte getCAHFMCL1() {
return CAHFMCL1;
}

public byte getCAHFMCL2() {
return CAHFMCL2;
}

public byte getCAHFMCL3() {
return CAHFMCL3;
}

public byte getCAHFMCL4() {
return CAHFMCL4;
}

public byte getCAHFMCL5() {
return CAHFMCL5;
}

public byte getCAHFMCL6() {
return CAHFMCL6;
}

public byte getCAHFMDC1() {
return CAHFMDC1;
}

public byte getCAHFMDC2() {
return CAHFMDC2;
}

public boolean getCAHFMDC3() {
return CAHFMDC3;
}

public boolean getCAHFMDC4() {
return CAHFMDC4;
}

public byte getCAHFMDC5() {
return CAHFMDC5;
}

public byte getCAHFMDC6() {
return CAHFMDC6;
}

public byte getCAHFMEQ1() {
return CAHFMEQ1;
}

public boolean getCAHFMEQ2() {
return CAHFMEQ2;
}

public boolean getCAHFMEQ3() {
return CAHFMEQ3;
}

public boolean getCAHFMEQ4() {
return CAHFMEQ4;
}

public boolean getCAHFMEQ5() {
return CAHFMEQ5;
}

public byte getCAHFMEQ6() {
return CAHFMEQ6;
}

public byte getCAHFMFA1() {
return CAHFMFA1;
}

public byte getCAHFMFA2() {
return CAHFMFA2;
}

public byte getCAHFMFA3() {
return CAHFMFA3;
}

public byte getCAHFMFA4() {
return CAHFMFA4;
}

public byte getCAHFMFA5() {
return CAHFMFA5;
}

public byte getCAHFMFA6() {
return CAHFMFA6;
}

public byte getCAHFMFR1() {
return CAHFMFR1;
}

public byte getCAHFMFR2() {
return CAHFMFR2;
}

public boolean getCAHFMFR3() {
return CAHFMFR3;
}

public byte getCAHFMFR4() {
return CAHFMFR4;
}

public boolean getCAHFMFR5() {
return CAHFMFR5;
}

public byte getCAHFMFR6() {
return CAHFMFR6;
}

public byte getCAHFMGA1() {
return CAHFMGA1;
}

public byte getCAHFMGA2() {
return CAHFMGA2;
}

public boolean getCAHFMGA3() {
return CAHFMGA3;
}

public byte getCAHFMGA4() {
return CAHFMGA4;
}

public boolean getCAHFMGA5() {
return CAHFMGA5;
}

public byte getCAHFMGA6() {
return CAHFMGA6;
}

public byte getCAHFMHC1() {
return CAHFMHC1;
}

public byte getCAHFMHC2() {
return CAHFMHC2;
}

public byte getCAHFMHC3() {
return CAHFMHC3;
}

public byte getCAHFMHC4() {
return CAHFMHC4;
}

public byte getCAHFMHC5() {
return CAHFMHC5;
}

public byte getCAHFMHC6() {
return CAHFMHC6;
}

public byte getCAHFMHM1() {
return CAHFMHM1;
}

public boolean getCAHFMHM2() {
return CAHFMHM2;
}

public boolean getCAHFMHM3() {
return CAHFMHM3;
}

public byte getCAHFMHM4() {
return CAHFMHM4;
}

public boolean getCAHFMHM5() {
return CAHFMHM5;
}

public byte getCAHFMHM6() {
return CAHFMHM6;
}

public byte getCAHFMHO1() {
return CAHFMHO1;
}

public byte getCAHFMHO2() {
return CAHFMHO2;
}

public byte getCAHFMHO3() {
return CAHFMHO3;
}

public byte getCAHFMHO4() {
return CAHFMHO4;
}

public byte getCAHFMHO5() {
return CAHFMHO5;
}

public byte getCAHFMHO6() {
return CAHFMHO6;
}

public byte getCAHFMIR1() {
return CAHFMIR1;
}

public boolean getCAHFMIR2() {
return CAHFMIR2;
}

public boolean getCAHFMIR3() {
return CAHFMIR3;
}

public byte getCAHFMIR4() {
return CAHFMIR4;
}

public byte getCAHFMIR5() {
return CAHFMIR5;
}

public byte getCAHFMIR6() {
return CAHFMIR6;
}

public byte getCAHFMNH1() {
return CAHFMNH1;
}

public byte getCAHFMNH2() {
return CAHFMNH2;
}

public byte getCAHFMNH3() {
return CAHFMNH3;
}

public byte getCAHFMNH4() {
return CAHFMNH4;
}

public byte getCAHFMNH5() {
return CAHFMNH5;
}

public byte getCAHFMNH6() {
return CAHFMNH6;
}

public byte getCAHFMNO1() {
return CAHFMNO1;
}

public byte getCAHFMNO2() {
return CAHFMNO2;
}

public byte getCAHFMNO3() {
return CAHFMNO3;
}

public byte getCAHFMNO4() {
return CAHFMNO4;
}

public byte getCAHFMNO5() {
return CAHFMNO5;
}

public byte getCAHFMNO6() {
return CAHFMNO6;
}

public byte getCAHFMOT1() {
return CAHFMOT1;
}

public byte getCAHFMOT2() {
return CAHFMOT2;
}

public byte getCAHFMOT3() {
return CAHFMOT3;
}

public byte getCAHFMOT4() {
return CAHFMOT4;
}

public byte getCAHFMOT5() {
return CAHFMOT5;
}

public byte getCAHFMOT6() {
return CAHFMOT6;
}

public byte getCAHFMRE1() {
return CAHFMRE1;
}

public byte getCAHFMRE2() {
return CAHFMRE2;
}

public byte getCAHFMRE3() {
return CAHFMRE3;
}

public byte getCAHFMRE4() {
return CAHFMRE4;
}

public byte getCAHFMRE5() {
return CAHFMRE5;
}

public byte getCAHFMRE6() {
return CAHFMRE6;
}

public byte getCAHFMSW1() {
return CAHFMSW1;
}

public boolean getCAHFMSW2() {
return CAHFMSW2;
}

public boolean getCAHFMSW3() {
return CAHFMSW3;
}

public byte getCAHFMSW4() {
return CAHFMSW4;
}

public byte getCAHFMSW5() {
return CAHFMSW5;
}

public byte getCAHFMSW6() {
return CAHFMSW6;
}

public byte getCAHFMVO1() {
return CAHFMVO1;
}

public byte getCAHFMVO2() {
return CAHFMVO2;
}

public byte getCAHFMVO3() {
return CAHFMVO3;
}

public byte getCAHFMVO4() {
return CAHFMVO4;
}

public byte getCAHFMVO5() {
return CAHFMVO5;
}

public byte getCAHFMVO6() {
return CAHFMVO6;
}

public byte getCAHFMWA1() {
return CAHFMWA1;
}

public byte getCAHFMWA2() {
return CAHFMWA2;
}

public boolean getCAHFMWA3() {
return CAHFMWA3;
}

public byte getCAHFMWA4() {
return CAHFMWA4;
}

public byte getCAHFMWA5() {
return CAHFMWA5;
}

public byte getCAHFMWA6() {
return CAHFMWA6;
}

public byte getCAHFMWH1() {
return CAHFMWH1;
}

public boolean getCAHFMWH2() {
return CAHFMWH2;
}

public boolean getCAHFMWH3() {
return CAHFMWH3;
}

public boolean getCAHFMWH4() {
return CAHFMWH4;
}

public boolean getCAHFMWH5() {
return CAHFMWH5;
}

public byte getCAHFMWH6() {
return CAHFMWH6;
}

public byte getCAHFOCL1() {
return CAHFOCL1;
}

public byte getCAHFOCL2() {
return CAHFOCL2;
}

public byte getCAHFOCL3() {
return CAHFOCL3;
}

public byte getCAHFOCL4() {
return CAHFOCL4;
}

public byte getCAHFOCL5() {
return CAHFOCL5;
}

public byte getCAHFOCL6() {
return CAHFOCL6;
}

public byte getCAHFOHC1() {
return CAHFOHC1;
}

public byte getCAHFOHC2() {
return CAHFOHC2;
}

public byte getCAHFOHC3() {
return CAHFOHC3;
}

public byte getCAHFOHC4() {
return CAHFOHC4;
}

public byte getCAHFOHC5() {
return CAHFOHC5;
}

public byte getCAHFOHC6() {
return CAHFOHC6;
}

public byte getCAHFOHM1() {
return CAHFOHM1;
}

public boolean getCAHFOHM2() {
return CAHFOHM2;
}

public boolean getCAHFOHM3() {
return CAHFOHM3;
}

public byte getCAHFOHM4() {
return CAHFOHM4;
}

public boolean getCAHFOHM5() {
return CAHFOHM5;
}

public byte getCAHFOHM6() {
return CAHFOHM6;
}

public byte getCAHFONH1() {
return CAHFONH1;
}

public byte getCAHFONH2() {
return CAHFONH2;
}

public byte getCAHFONH3() {
return CAHFONH3;
}

public byte getCAHFONH4() {
return CAHFONH4;
}

public byte getCAHFONH5() {
return CAHFONH5;
}

public byte getCAHFONH6() {
return CAHFONH6;
}

public byte getCAHFONO1() {
return CAHFONO1;
}

public byte getCAHFONO2() {
return CAHFONO2;
}

public byte getCAHFONO3() {
return CAHFONO3;
}

public byte getCAHFONO4() {
return CAHFONO4;
}

public byte getCAHFONO5() {
return CAHFONO5;
}

public byte getCAHFONO6() {
return CAHFONO6;
}

public byte getCAHFOOT1() {
return CAHFOOT1;
}

public byte getCAHFOOT2() {
return CAHFOOT2;
}

public byte getCAHFOOT3() {
return CAHFOOT3;
}

public byte getCAHFOOT4() {
return CAHFOOT4;
}

public byte getCAHFOOT5() {
return CAHFOOT5;
}

public byte getCAHFOOT6() {
return CAHFOOT6;
}

public byte getCAHFORE1() {
return CAHFORE1;
}

public byte getCAHFORE2() {
return CAHFORE2;
}

public byte getCAHFORE3() {
return CAHFORE3;
}

public byte getCAHFORE4() {
return CAHFORE4;
}

public byte getCAHFORE5() {
return CAHFORE5;
}

public byte getCAHFORE6() {
return CAHFORE6;
}

public byte getCAHFOVO1() {
return CAHFOVO1;
}

public byte getCAHFOVO2() {
return CAHFOVO2;
}

public byte getCAHFOVO3() {
return CAHFOVO3;
}

public byte getCAHFOVO4() {
return CAHFOVO4;
}

public byte getCAHFOVO5() {
return CAHFOVO5;
}

public byte getCAHFOVO6() {
return CAHFOVO6;
}

public byte getCAHFOWA1() {
return CAHFOWA1;
}

public byte getCAHFOWA2() {
return CAHFOWA2;
}

public boolean getCAHFOWA3() {
return CAHFOWA3;
}

public byte getCAHFOWA4() {
return CAHFOWA4;
}

public boolean getCAHFOWA5() {
return CAHFOWA5;
}

public byte getCAHFOWA6() {
return CAHFOWA6;
}

public byte getCAHGOA() {
return CAHGOA;
}

public byte getCAHHA() {
return CAHHA;
}

public byte getCAHHB() {
return CAHHB;
}

public byte getCAHINBR1() {
return CAHINBR1;
}

public byte getCAHINBR2() {
return CAHINBR2;
}

public byte getCAHINBR3() {
return CAHINBR3;
}

public byte getCAHINBR4() {
return CAHINBR4;
}

public byte getCAHINBR5() {
return CAHINBR5;
}

public byte getCAHINBR6() {
return CAHINBR6;
}

public byte getCAHINDA1() {
return CAHINDA1;
}

public byte getCAHINDA2() {
return CAHINDA2;
}

public byte getCAHINDA3() {
return CAHINDA3;
}

public byte getCAHINDA4() {
return CAHINDA4;
}

public byte getCAHINDA5() {
return CAHINDA5;
}

public byte getCAHINDA6() {
return CAHINDA6;
}

public byte getCAHINFR1() {
return CAHINFR1;
}

public byte getCAHINFR2() {
return CAHINFR2;
}

public byte getCAHINFR3() {
return CAHINFR3;
}

public byte getCAHINFR4() {
return CAHINFR4;
}

public byte getCAHINFR5() {
return CAHINFR5;
}

public byte getCAHINFR6() {
return CAHINFR6;
}

public byte getCAHINGC1() {
return CAHINGC1;
}

public byte getCAHINGC2() {
return CAHINGC2;
}

public byte getCAHINGC3() {
return CAHINGC3;
}

public byte getCAHINGC4() {
return CAHINGC4;
}

public byte getCAHINGC5() {
return CAHINGC5;
}

public byte getCAHINGC6() {
return CAHINGC6;
}

public byte getCAHINHW1() {
return CAHINHW1;
}

public byte getCAHINHW2() {
return CAHINHW2;
}

public byte getCAHINHW3() {
return CAHINHW3;
}

public byte getCAHINHW4() {
return CAHINHW4;
}

public byte getCAHINHW5() {
return CAHINHW5;
}

public byte getCAHINHW6() {
return CAHINHW6;
}

public byte getCAHINNE1() {
return CAHINNE1;
}

public byte getCAHINNE2() {
return CAHINNE2;
}

public byte getCAHINNE3() {
return CAHINNE3;
}

public byte getCAHINNE4() {
return CAHINNE4;
}

public byte getCAHINNE5() {
return CAHINNE5;
}

public byte getCAHINNE6() {
return CAHINNE6;
}

public byte getCAHINNO1() {
return CAHINNO1;
}

public byte getCAHINNO2() {
return CAHINNO2;
}

public byte getCAHINNO3() {
return CAHINNO3;
}

public byte getCAHINNO4() {
return CAHINNO4;
}

public byte getCAHINNO5() {
return CAHINNO5;
}

public byte getCAHINNO6() {
return CAHINNO6;
}

public byte getCAHINOR1() {
return CAHINOR1;
}

public byte getCAHINOR2() {
return CAHINOR2;
}

public byte getCAHINOR3() {
return CAHINOR3;
}

public byte getCAHINOR4() {
return CAHINOR4;
}

public byte getCAHINOR5() {
return CAHINOR5;
}

public byte getCAHINOR6() {
return CAHINOR6;
}

public byte getCAHINSI1() {
return CAHINSI1;
}

public byte getCAHINSI2() {
return CAHINSI2;
}

public byte getCAHINSI3() {
return CAHINSI3;
}

public byte getCAHINSI4() {
return CAHINSI4;
}

public byte getCAHINSI5() {
return CAHINSI5;
}

public byte getCAHINSI6() {
return CAHINSI6;
}

public byte getCAHINSO1() {
return CAHINSO1;
}

public byte getCAHINSO2() {
return CAHINSO2;
}

public byte getCAHINSO3() {
return CAHINSO3;
}

public byte getCAHINSO4() {
return CAHINSO4;
}

public byte getCAHINSO5() {
return CAHINSO5;
}

public byte getCAHINSO6() {
return CAHINSO6;
}

public byte getCAHMN() {
return CAHMN;
}

public byte getCAHNBR() {
return CAHNBR;
}

public byte getCAHNCL() {
return CAHNCL;
}

public byte getCAHNDA() {
return CAHNDA;
}

public byte getCAHNFR() {
return CAHNFR;
}

public byte getCAHNGC() {
return CAHNGC;
}

public byte getCAHNHC() {
return CAHNHC;
}

public byte getCAHNHM() {
return CAHNHM;
}

public byte getCAHNHW() {
return CAHNHW;
}

public byte getCAHNNE() {
return CAHNNE;
}

public byte getCAHNNH() {
return CAHNNH;
}

public byte getCAHNNO() {
return CAHNNO;
}

public byte getCAHNOR() {
return CAHNOR;
}

public byte getCAHNOT() {
return CAHNOT;
}

public byte getCAHNRE() {
return CAHNRE;
}

public byte getCAHNSI() {
return CAHNSI;
}

public byte getCAHNSO() {
return CAHNSO;
}

public byte getCAHNVO() {
return CAHNVO;
}

public byte getCAHNWA() {
return CAHNWA;
}

public byte getCAHPC() {
return CAHPC;
}

public byte getCAHPD() {
return CAHPD;
}

public byte getCAHPD2() {
return CAHPD2;
}

public byte getCAHPF() {
return CAHPF;
}

public byte getCAHPF2() {
return CAHPF2;
}

public byte getCAHPS95() {
return CAHPS95;
}

public byte getCAHPS96() {
return CAHPS96;
}

public byte getCAHPSCH() {
return CAHPSCH;
}

public byte getCAHPSEX() {
return CAHPSEX;
}

public byte getCAHPSOT() {
return CAHPSOT;
}

public byte getCAHPW() {
return CAHPW;
}

public byte getCAHPW2() {
return CAHPW2;
}

public double getCAHRF26() {
return CAHRF26;
}

public double getCAHRF27() {
return CAHRF27;
}

public double getCAHRF28() {
return CAHRF28;
}

public double getCAHRF29() {
return CAHRF29;
}

public double getCAHRF30() {
return CAHRF30;
}

public double getCAHRF31() {
return CAHRF31;
}

public double getCAHRF32() {
return CAHRF32;
}

public byte getCAHRF33() {
return CAHRF33;
}

public short getCAHRF34() {
return CAHRF34;
}

public double getCAHRF35() {
return CAHRF35;
}

public byte getCAHRG01() {
return CAHRG01;
}

public byte getCAHRG02() {
return CAHRG02;
}

public byte getCAHRG03() {
return CAHRG03;
}

public boolean getCAHRG04() {
return CAHRG04;
}

public byte getCAHRG05() {
return CAHRG05;
}

public byte getCAHRG06() {
return CAHRG06;
}

public boolean getCAHRG07() {
return CAHRG07;
}

public byte getCAHRG08() {
return CAHRG08;
}

public boolean getCAHRG09() {
return CAHRG09;
}

public boolean getCAHRG10() {
return CAHRG10;
}

public boolean getCAHRG11() {
return CAHRG11;
}

public boolean getCAHRG12() {
return CAHRG12;
}

public boolean getCAHRG13() {
return CAHRG13;
}

public boolean getCAHRG14() {
return CAHRG14;
}

public boolean getCAHRG15() {
return CAHRG15;
}

public boolean getCAHRG16() {
return CAHRG16;
}

public byte getCAHRG17() {
return CAHRG17;
}

public boolean getCAHRG18() {
return CAHRG18;
}

public byte getCAHRG19() {
return CAHRG19;
}

public byte getCAHRG20() {
return CAHRG20;
}

public boolean getCAHRG21() {
return CAHRG21;
}

public boolean getCAHRG22() {
return CAHRG22;
}

public byte getCAHRG23() {
return CAHRG23;
}

public boolean getCAHRG24() {
return CAHRG24;
}

public boolean getCAHRG25() {
return CAHRG25;
}

public byte getCAHRG26() {
return CAHRG26;
}

public boolean getCAHRG27() {
return CAHRG27;
}

public boolean getCAHRG28() {
return CAHRG28;
}

public byte getCAHRG29() {
return CAHRG29;
}

public boolean getCAHRG30() {
return CAHRG30;
}

public boolean getCAHRG31() {
return CAHRG31;
}

public byte getCAHRG32() {
return CAHRG32;
}

public boolean getCAHRG33() {
return CAHRG33;
}

public byte getCAHRG34() {
return CAHRG34;
}

public byte getCAHRG35() {
return CAHRG35;
}

public byte getCAHRI01() {
return CAHRI01;
}

public byte getCAHRI02() {
return CAHRI02;
}

public byte getCAHRI03() {
return CAHRI03;
}

public byte getCAHRI04() {
return CAHRI04;
}

public byte getCAHRI05() {
return CAHRI05;
}

public byte getCAHRI06() {
return CAHRI06;
}

public byte getCAHRI07() {
return CAHRI07;
}

public byte getCAHRI08() {
return CAHRI08;
}

public byte getCAHRI09() {
return CAHRI09;
}

public byte getCAHRI10() {
return CAHRI10;
}

public byte getCAHRI11() {
return CAHRI11;
}

public byte getCAHRI12() {
return CAHRI12;
}

public byte getCAHRI13() {
return CAHRI13;
}

public byte getCAHRI14() {
return CAHRI14;
}

public byte getCAHRI15() {
return CAHRI15;
}

public boolean getCAHRI16() {
return CAHRI16;
}

public byte getCAHRI17() {
return CAHRI17;
}

public byte getCAHRI18() {
return CAHRI18;
}

public byte getCAHRI19() {
return CAHRI19;
}

public byte getCAHRI20() {
return CAHRI20;
}

public byte getCAHRI21() {
return CAHRI21;
}

public byte getCAHRI22() {
return CAHRI22;
}

public byte getCAHRI23() {
return CAHRI23;
}

public byte getCAHRI24() {
return CAHRI24;
}

public byte getCAHRI25() {
return CAHRI25;
}

public byte getCAHRI26() {
return CAHRI26;
}

public byte getCAHRI27() {
return CAHRI27;
}

public byte getCAHRI28() {
return CAHRI28;
}

public byte getCAHRI29() {
return CAHRI29;
}

public byte getCAHRI30() {
return CAHRI30;
}

public byte getCAHRI31() {
return CAHRI31;
}

public byte getCAHRI32() {
return CAHRI32;
}

public byte getCAHRI33() {
return CAHRI33;
}

public byte getCAHRI34() {
return CAHRI34;
}

public byte getCAHRI35() {
return CAHRI35;
}

public byte getCAHRS01() {
return CAHRS01;
}

public byte getCAHRS02() {
return CAHRS02;
}

public byte getCAHRS03() {
return CAHRS03;
}

public byte getCAHRS04() {
return CAHRS04;
}

public byte getCAHRS05() {
return CAHRS05;
}

public byte getCAHRS06() {
return CAHRS06;
}

public byte getCAHRS07() {
return CAHRS07;
}

public byte getCAHRS08() {
return CAHRS08;
}

public byte getCAHRS09() {
return CAHRS09;
}

public byte getCAHRS10() {
return CAHRS10;
}

public byte getCAHRS11() {
return CAHRS11;
}

public byte getCAHRS12() {
return CAHRS12;
}

public byte getCAHRS13() {
return CAHRS13;
}

public byte getCAHRS14() {
return CAHRS14;
}

public byte getCAHRS15() {
return CAHRS15;
}

public boolean getCAHRS16() {
return CAHRS16;
}

public byte getCAHRS17() {
return CAHRS17;
}

public byte getCAHRS18() {
return CAHRS18;
}

public byte getCAHRS19() {
return CAHRS19;
}

public byte getCAHRS1GP() {
return CAHRS1GP;
}

public byte getCAHRS20() {
return CAHRS20;
}

public byte getCAHRS21() {
return CAHRS21;
}

public byte getCAHRS22() {
return CAHRS22;
}

public byte getCAHRS23() {
return CAHRS23;
}

public byte getCAHRS24() {
return CAHRS24;
}

public byte getCAHRS25() {
return CAHRS25;
}

public byte getCAHRS26() {
return CAHRS26;
}

public byte getCAHRS27() {
return CAHRS27;
}

public byte getCAHRS28() {
return CAHRS28;
}

public byte getCAHRS29() {
return CAHRS29;
}

public byte getCAHRS2GP() {
return CAHRS2GP;
}

public byte getCAHRS30() {
return CAHRS30;
}

public byte getCAHRS31() {
return CAHRS31;
}

public byte getCAHRS32() {
return CAHRS32;
}

public byte getCAHRS33() {
return CAHRS33;
}

public byte getCAHRS34() {
return CAHRS34;
}

public byte getCAHRS35() {
return CAHRS35;
}

public byte getCAHSA() {
return CAHSA;
}

public int getCAHSC() {
return CAHSC;
}

public byte getCAHSCE() {
return CAHSCE;
}

public int getCAHSCL() {
return CAHSCL;
}

public byte getCAHSCR() {
return CAHSCR;
}

public short getCAHSCU() {
return CAHSCU;
}

public byte getCAHSM85() {
return CAHSM85;
}

public byte getCAHSM86() {
return CAHSM86;
}

public byte getCAHSM96() {
return CAHSM96;
}

public byte getCAHSMAC() {
return CAHSMAC;
}

public byte getCAHSMCH() {
return CAHSMCH;
}

public byte getCAHSMCR() {
return CAHSMCR;
}

public byte getCAHSMEX() {
return CAHSMEX;
}

public byte getCAHSMHY() {
return CAHSMHY;
}

public byte getCAHSMMA() {
return CAHSMMA;
}

public byte getCAHSMOS() {
return CAHSMOS;
}

public byte getCAHSMOT() {
return CAHSMOT;
}

public byte getCAHSMTH() {
return CAHSMTH;
}

public byte getCAHSN() {
return CAHSN;
}

public byte getCAHST() {
return CAHST;
}

public byte getCAINA() {
return CAINA;
}

public byte getCALAF() {
return CALAF;
}

public byte getCALAF2() {
return CALAF2;
}

public byte getCALAF3() {
return CALAF3;
}

public double getCALAM() {
return CALAM;
}

public double getCALAM2() {
return CALAM2;
}

public byte getCALAM2E() {
return CALAM2E;
}

public short getCALAM2L() {
return CALAM2L;
}

public byte getCALAM2R() {
return CALAM2R;
}

public short getCALAM2U() {
return CALAM2U;
}

public byte getCALAM3() {
return CALAM3;
}

public byte getCALAM3E() {
return CALAM3E;
}

public byte getCALAM3L() {
return CALAM3L;
}

public byte getCALAM3R() {
return CALAM3R;
}

public byte getCALAM3U() {
return CALAM3U;
}

public byte getCALAME() {
return CALAME;
}

public short getCALAML() {
return CALAML;
}

public byte getCALAMR() {
return CALAMR;
}

public short getCALAMU() {
return CALAMU;
}

public byte getCALAPDP() {
return CALAPDP;
}

public byte getCALAPDP2() {
return CALAPDP2;
}

public byte getCALAPDP3() {
return CALAPDP3;
}

public byte getCALAPPA() {
return CALAPPA;
}

public byte getCALAPPA2() {
return CALAPPA2;
}

public byte getCALAPPA3() {
return CALAPPA3;
}

public byte getCALC() {
return CALC;
}

public byte getCAMW() {
return CAMW;
}

public byte getCANOPF() {
return CANOPF;
}

public byte getCANOPF2() {
return CANOPF2;
}

public byte getCANOPF3() {
return CANOPF3;
}

public byte getCANOPG() {
return CANOPG;
}

public byte getCANOPG2() {
return CANOPG2;
}

public byte getCANOPG3() {
return CANOPG3;
}

public byte getCANOPOT() {
return CANOPOT;
}

public byte getCANOPOT2() {
return CANOPOT2;
}

public byte getCANOPOT3() {
return CANOPOT3;
}

public byte getCAPADFM() {
return CAPADFM;
}

public byte getCAPADFM2() {
return CAPADFM2;
}

public byte getCAPADFM3() {
return CAPADFM3;
}

public byte getCAPADLA() {
return CAPADLA;
}

public byte getCAPADLA2() {
return CAPADLA2;
}

public byte getCAPADLA3() {
return CAPADLA3;
}

public byte getCAPADNO() {
return CAPADNO;
}

public byte getCAPADNO2() {
return CAPADNO2;
}

public byte getCAPADNO3() {
return CAPADNO3;
}

public byte getCAPADOT() {
return CAPADOT;
}

public byte getCAPADOT2() {
return CAPADOT2;
}

public byte getCAPADOT3() {
return CAPADOT3;
}

public byte getCAPAL() {
return CAPAL;
}

public byte getCAPAL2() {
return CAPAL2;
}

public byte getCAPAL3() {
return CAPAL3;
}

public double getCAPAM() {
return CAPAM;
}

public double getCAPAM2() {
return CAPAM2;
}

public byte getCAPAM2E() {
return CAPAM2E;
}

public short getCAPAM2L() {
return CAPAM2L;
}

public byte getCAPAM2R() {
return CAPAM2R;
}

public short getCAPAM2U() {
return CAPAM2U;
}

public double getCAPAM3() {
return CAPAM3;
}

public byte getCAPAM3E() {
return CAPAM3E;
}

public byte getCAPAM3L() {
return CAPAM3L;
}

public short getCAPAM3U() {
return CAPAM3U;
}

public byte getCAPAME() {
return CAPAME;
}

public short getCAPAML() {
return CAPAML;
}

public byte getCAPAML3R() {
return CAPAML3R;
}

public byte getCAPAMR() {
return CAPAMR;
}

public short getCAPAMU() {
return CAPAMU;
}

public byte getCAPAY() {
return CAPAY;
}

public byte getCAPAY2() {
return CAPAY2;
}

public byte getCAPAY3() {
return CAPAY3;
}

public byte getCAPB() {
return CAPB;
}

public byte getCAPFQ() {
return CAPFQ;
}

public byte getCAPFQ2() {
return CAPFQ2;
}

public byte getCAPFQ3() {
return CAPFQ3;
}

public byte getCAPHWDP() {
return CAPHWDP;
}

public byte getCAPHWDP2() {
return CAPHWDP2;
}

public byte getCAPHWDP3() {
return CAPHWDP3;
}

public byte getCAPHWOI() {
return CAPHWOI;
}

public byte getCAPHWOI2() {
return CAPHWOI2;
}

public byte getCAPHWOI3() {
return CAPHWOI3;
}

public byte getCAPHWOT() {
return CAPHWOT;
}

public byte getCAPHWOT2() {
return CAPHWOT2;
}

public byte getCAPHWOT3() {
return CAPHWOT3;
}

public byte getCAPNO() {
return CAPNO;
}

public byte getCAPNO10() {
return CAPNO10;
}

public byte getCAPNO11() {
return CAPNO11;
}

public boolean getCAPNO12() {
return CAPNO12;
}

public boolean getCAPNO13() {
return CAPNO13;
}

public byte getCAPNO14() {
return CAPNO14;
}

public boolean getCAPNO15() {
return CAPNO15;
}

public boolean getCAPNO16() {
return CAPNO16;
}

public byte getCAPNO17() {
return CAPNO17;
}

public byte getCAPNO18() {
return CAPNO18;
}

public boolean getCAPNO19() {
return CAPNO19;
}

public byte getCAPNO2() {
return CAPNO2;
}

public byte getCAPNO20() {
return CAPNO20;
}

public boolean getCAPNO21() {
return CAPNO21;
}

public boolean getCAPNO22() {
return CAPNO22;
}

public boolean getCAPNO23() {
return CAPNO23;
}

public boolean getCAPNO24() {
return CAPNO24;
}

public boolean getCAPNO25() {
return CAPNO25;
}

public byte getCAPNO3() {
return CAPNO3;
}

public boolean getCAPNO4() {
return CAPNO4;
}

public byte getCAPNO5() {
return CAPNO5;
}

public byte getCAPNO6() {
return CAPNO6;
}

public boolean getCAPNO7() {
return CAPNO7;
}

public byte getCAPNO8() {
return CAPNO8;
}

public byte getCAPNO9() {
return CAPNO9;
}

public byte getCARA() {
return CARA;
}

public byte getCARERS_P_F() {
return CARERS_P_F;
}

public double getCARERS_P_I() {
return CARERS_P_I;
}

public short getCARERS_P_O() {
return CARERS_P_O;
}

public short getCARERS_P_T() {
return CARERS_P_T;
}

public byte getCARERS_R_F() {
return CARERS_R_F;
}

public double getCARERS_R_I() {
return CARERS_R_I;
}

public short getCARERS_R_O() {
return CARERS_R_O;
}

public short getCARERS_R_T() {
return CARERS_R_T;
}

public boolean getCASEX() {
return CASEX;
}

public byte getCASEX10() {
return CASEX10;
}

public boolean getCASEX11() {
return CASEX11;
}

public boolean getCASEX12() {
return CASEX12;
}

public boolean getCASEX13() {
return CASEX13;
}

public boolean getCASEX14() {
return CASEX14;
}

public boolean getCASEX15() {
return CASEX15;
}

public boolean getCASEX16() {
return CASEX16;
}

public byte getCASEX17() {
return CASEX17;
}

public byte getCASEX18() {
return CASEX18;
}

public byte getCASEX19() {
return CASEX19;
}

public boolean getCASEX2() {
return CASEX2;
}

public byte getCASEX20() {
return CASEX20;
}

public byte getCASEX21() {
return CASEX21;
}

public byte getCASEX22() {
return CASEX22;
}

public byte getCASEX23() {
return CASEX23;
}

public byte getCASEX24() {
return CASEX24;
}

public byte getCASEX25() {
return CASEX25;
}

public boolean getCASEX3() {
return CASEX3;
}

public boolean getCASEX4() {
return CASEX4;
}

public boolean getCASEX5() {
return CASEX5;
}

public boolean getCASEX6() {
return CASEX6;
}

public boolean getCASEX7() {
return CASEX7;
}

public byte getCASEX8() {
return CASEX8;
}

public byte getCASEX9() {
return CASEX9;
}

public byte getCATCH() {
return CATCH;
}

public byte getCATKA() {
return CATKA;
}

public byte getCATKB() {
return CATKB;
}

public byte getCATKC() {
return CATKC;
}

public byte getCATKD() {
return CATKD;
}

public byte getCATKE() {
return CATKE;
}

public byte getCATKF() {
return CATKF;
}

public byte getCATKG() {
return CATKG;
}

public byte getCATKH() {
return CATKH;
}

public byte getCATKI() {
return CATKI;
}

public byte getCATKJ() {
return CATKJ;
}

public byte getCATKK() {
return CATKK;
}

public byte getCATKL() {
return CATKL;
}

public byte getCATKM() {
return CATKM;
}

public byte getCATNO() {
return CATNO;
}

public byte getCAWDA() {
return CAWDA;
}

public byte getCAWHO() {
return CAWHO;
}

public boolean getCAWIN() {
return CAWIN;
}

public byte getCF200PRE() {
return CF200PRE;
}

public byte getCF201G1() {
return CF201G1;
}

public byte getCF202H1() {
return CF202H1;
}

public byte getCF203I1() {
return CF203I1;
}

public byte getCF204A1() {
return CF204A1;
}

public byte getCF205B1() {
return CF205B1;
}

public byte getCF206C1() {
return CF206C1;
}

public byte getCF207D1() {
return CF207D1;
}

public byte getCF208E1() {
return CF208E1;
}

public byte getCF209F1() {
return CF209F1;
}

public byte getCF210J1() {
return CF210J1;
}

public byte getCF211K1() {
return CF211K1;
}

public byte getCF212L1() {
return CF212L1;
}

public byte getCF213M1() {
return CF213M1;
}

public byte getCF214N1() {
return CF214N1;
}

public byte getCF215O1() {
return CF215O1;
}

public byte getCF216C() {
return CF216C;
}

public byte getCF221G2() {
return CF221G2;
}

public byte getCF222H2() {
return CF222H2;
}

public byte getCF223I2() {
return CF223I2;
}

public byte getCF224A2() {
return CF224A2;
}

public byte getCF225B2() {
return CF225B2;
}

public byte getCF226C2() {
return CF226C2;
}

public byte getCF227D2() {
return CF227D2;
}

public byte getCF228E2() {
return CF228E2;
}

public byte getCF229F2() {
return CF229F2;
}

public byte getCF230J2() {
return CF230J2;
}

public byte getCF231K2() {
return CF231K2;
}

public byte getCF232L2() {
return CF232L2;
}

public byte getCF233M2() {
return CF233M2;
}

public byte getCF234N2() {
return CF234N2;
}

public byte getCF235O2() {
return CF235O2;
}

public byte getCF240() {
return CF240;
}

public byte getCF241() {
return CF241;
}

public boolean getCF242() {
return CF242;
}

public byte getCFANI() {
return CFANI;
}

public byte getCFC20FRST() {
return CFC20FRST;
}

public byte getCFC20FSCND() {
return CFC20FSCND;
}

public double getCFIB() {
return CFIB;
}

public byte getCFLISA() {
return CFLISA;
}

public byte getCFLISP1() {
return CFLISP1;
}

public byte getCFLISP2() {
return CFLISP2;
}

public byte getCFLISP3() {
return CFLISP3;
}

public byte getCFLISP4() {
return CFLISP4;
}

public byte getCFLISP5() {
return CFLISP5;
}

public byte getCFLITB() {
return CFLITB;
}

public byte getCFLITC() {
return CFLITC;
}

public byte getCFLITD() {
return CFLITD;
}

public byte getCFLITE() {
return CFLITE;
}

public byte getCFLITF() {
return CFLITF;
}

public byte getCFLITSK() {
return CFLITSK;
}

public byte getCFMAP() {
return CFMAP;
}

public byte getCFMATY() {
return CFMATY;
}

public byte getCFMETM() {
return CFMETM;
}

public byte getCFMETMT() {
return CFMETMT;
}

public byte getCFMSCR() {
return CFMSCR;
}

public byte getCFNMCA() {
return CFNMCA;
}

public byte getCFNMPM() {
return CFNMPM;
}

public byte getCFNMQN() {
return CFNMQN;
}

public byte getCFNMSC() {
return CFNMSC;
}

public byte getCFNMUS() {
return CFNMUS;
}

public byte getCFSTOP1() {
return CFSTOP1;
}

public byte getCFSTOP2() {
return CFSTOP2;
}

public byte getCFSTOP3() {
return CFSTOP3;
}

public byte getCFSTOP4() {
return CFSTOP4;
}

public byte getCFSTOP5() {
return CFSTOP5;
}

public byte getCFSTOP6() {
return CFSTOP6;
}

public byte getCFSTOP7() {
return CFSTOP7;
}

public byte getCFSTOP8() {
return CFSTOP8;
}

public boolean getCFSTOP95() {
return CFSTOP95;
}

public byte getCFSUMA() {
return CFSUMA;
}

public byte getCFSUMB() {
return CFSUMB;
}

public byte getCFSUMC() {
return CFSUMC;
}

public byte getCFSUMD() {
return CFSUMD;
}

public byte getCFSUME() {
return CFSUME;
}

public byte getCFSUMF() {
return CFSUMF;
}

public short getCFSVA() {
return CFSVA;
}

public short getCFSVB() {
return CFSVB;
}

public short getCFSVC() {
return CFSVC;
}

public byte getCFSVCH() {
return CFSVCH;
}

public short getCFSVD() {
return CFSVD;
}

public short getCFSVE() {
return CFSVE;
}

public byte getCFWHOAD() {
return CFWHOAD;
}

public byte getCFWHOCHI() {
return CFWHOCHI;
}

public byte getCFWHONON() {
return CFWHONON;
}

public byte getCFWHOOTH() {
return CFWHOOTH;
}

public byte getCFWHOPAR() {
return CFWHOPAR;
}

public byte getCFWHT95() {
return CFWHT95;
}

public byte getCFWHTALC() {
return CFWHTALC;
}

public byte getCFWHTCON() {
return CFWHTCON;
}

public byte getCFWHTDIS() {
return CFWHTDIS;
}

public byte getCFWHTENG() {
return CFWHTENG;
}

public byte getCFWHTEYE() {
return CFWHTEYE;
}

public byte getCFWHTHEA() {
return CFWHTHEA;
}

public byte getCFWHTILL() {
return CFWHTILL;
}

public byte getCFWHTLAP() {
return CFWHTLAP;
}

public byte getCFWHTM85() {
return CFWHTM85;
}

public byte getCFWHTM86() {
return CFWHTM86;
}

public byte getCFWHTMALC() {
return CFWHTMALC;
}

public byte getCFWHTMCON() {
return CFWHTMCON;
}

public byte getCFWHTMDIS() {
return CFWHTMDIS;
}

public byte getCFWHTMEM() {
return CFWHTMEM;
}

public byte getCFWHTMEN() {
return CFWHTMEN;
}

public byte getCFWHTMENG() {
return CFWHTMENG;
}

public byte getCFWHTMEYE() {
return CFWHTMEYE;
}

public byte getCFWHTMHEA() {
return CFWHTMHEA;
}

public byte getCFWHTMILL() {
return CFWHTMILL;
}

public byte getCFWHTMLAP() {
return CFWHTMLAP;
}

public byte getCFWHTMMEM() {
return CFWHTMMEM;
}

public byte getCFWHTMMEN() {
return CFWHTMMEN;
}

public byte getCFWHTMNER() {
return CFWHTMNER;
}

public byte getCFWHTMNOI() {
return CFWHTMNOI;
}

public byte getCFWHTMREF() {
return CFWHTMREF;
}

public byte getCFWHTMTIR() {
return CFWHTMTIR;
}

public byte getCFWHTMUPS() {
return CFWHTMUPS;
}

public byte getCFWHTNER() {
return CFWHTNER;
}

public byte getCFWHTNOI() {
return CFWHTNOI;
}

public byte getCFWHTREF() {
return CFWHTREF;
}

public byte getCFWHTTIR() {
return CFWHTTIR;
}

public byte getCFWHTUPS() {
return CFWHTUPS;
}

public byte getCHINHH() {
return CHINHH;
}

public double getCHOL() {
return CHOL;
}

public byte getCLOTB() {
return CLOTB;
}

public boolean getCONCUR() {
return CONCUR;
}

public byte getCONSPAX() {
return CONSPAX;
}

public byte getCONSUBDR() {
return CONSUBDR;
}

public byte getCONSUBEA() {
return CONSUBEA;
}

public byte getCONSUBEX() {
return CONSUBEX;
}

public byte getCONSUBNO() {
return CONSUBNO;
}

public byte getCONSUBSM() {
return CONSUBSM;
}

public boolean getCOUPLE_INST() {
return COUPLE_INST;
}

public double getCPIPLUS() {
return CPIPLUS;
}

public byte getCTC_P_F() {
return CTC_P_F;
}

public double getCTC_P_I() {
return CTC_P_I;
}

public short getCTC_P_O() {
return CTC_P_O;
}

public short getCTC_P_T() {
return CTC_P_T;
}

public byte getCTC_R_F() {
return CTC_R_F;
}

public double getCTC_R_I() {
return CTC_R_I;
}

public short getCTC_R_O() {
return CTC_R_O;
}

public short getCTC_R_T() {
return CTC_R_T;
}

public byte getCUFFSIZE() {
return CUFFSIZE;
}

public byte getDCURPEN() {
return DCURPEN;
}

public byte getDDBDC() {
return DDBDC;
}

public byte getDEMPPEN() {
return DEMPPEN;
}

public byte getDHC14() {
return DHC14;
}

public byte getDHC15() {
return DHC15;
}

public byte getDHC16() {
return DHC16;
}

public byte getDHCAG14() {
return DHCAG14;
}

public byte getDHCAG15() {
return DHCAG15;
}

public byte getDHCAG16() {
return DHCAG16;
}

public byte getDHCR08() {
return DHCR08;
}

public byte getDHCR09() {
return DHCR09;
}

public byte getDHCR10() {
return DHCR10;
}

public boolean getDHCR104() {
return DHCR104;
}

public boolean getDHCR105() {
return DHCR105;
}

public boolean getDHCR106() {
return DHCR106;
}

public boolean getDHCR107() {
return DHCR107;
}

public boolean getDHCR108() {
return DHCR108;
}

public boolean getDHCR109() {
return DHCR109;
}

public byte getDHCR11() {
return DHCR11;
}

public boolean getDHCR110() {
return DHCR110;
}

public boolean getDHCR111() {
return DHCR111;
}

public boolean getDHCR112() {
return DHCR112;
}

public byte getDHCR118() {
return DHCR118;
}

public boolean getDHCR119() {
return DHCR119;
}

public boolean getDHCR12() {
return DHCR12;
}

public boolean getDHCR120() {
return DHCR120;
}

public boolean getDHCR121() {
return DHCR121;
}

public boolean getDHCR122() {
return DHCR122;
}

public boolean getDHCR123() {
return DHCR123;
}

public boolean getDHCR124() {
return DHCR124;
}

public boolean getDHCR125() {
return DHCR125;
}

public boolean getDHCR126() {
return DHCR126;
}

public boolean getDHCR127() {
return DHCR127;
}

public boolean getDHCR128() {
return DHCR128;
}

public boolean getDHCR13() {
return DHCR13;
}

public byte getDHCR134() {
return DHCR134;
}

public boolean getDHCR135() {
return DHCR135;
}

public boolean getDHCR136() {
return DHCR136;
}

public boolean getDHCR137() {
return DHCR137;
}

public boolean getDHCR138() {
return DHCR138;
}

public boolean getDHCR139() {
return DHCR139;
}

public boolean getDHCR14() {
return DHCR14;
}

public boolean getDHCR140() {
return DHCR140;
}

public boolean getDHCR141() {
return DHCR141;
}

public boolean getDHCR142() {
return DHCR142;
}

public boolean getDHCR143() {
return DHCR143;
}

public boolean getDHCR144() {
return DHCR144;
}

public byte getDHCR147() {
return DHCR147;
}

public boolean getDHCR148() {
return DHCR148;
}

public boolean getDHCR149() {
return DHCR149;
}

public boolean getDHCR15() {
return DHCR15;
}

public byte getDHCR150() {
return DHCR150;
}

public boolean getDHCR151() {
return DHCR151;
}

public boolean getDHCR152() {
return DHCR152;
}

public boolean getDHCR153() {
return DHCR153;
}

public boolean getDHCR154() {
return DHCR154;
}

public boolean getDHCR155() {
return DHCR155;
}

public boolean getDHCR156() {
return DHCR156;
}

public boolean getDHCR157() {
return DHCR157;
}

public boolean getDHCR158() {
return DHCR158;
}

public boolean getDHCR159() {
return DHCR159;
}

public boolean getDHCR16() {
return DHCR16;
}

public boolean getDHCR160() {
return DHCR160;
}

public boolean getDHCR163() {
return DHCR163;
}

public boolean getDHCR164() {
return DHCR164;
}

public boolean getDHCR165() {
return DHCR165;
}

public byte getDHCR166() {
return DHCR166;
}

public boolean getDHCR167() {
return DHCR167;
}

public boolean getDHCR168() {
return DHCR168;
}

public boolean getDHCR169() {
return DHCR169;
}

public boolean getDHCR170() {
return DHCR170;
}

public boolean getDHCR171() {
return DHCR171;
}

public boolean getDHCR172() {
return DHCR172;
}

public boolean getDHCR173() {
return DHCR173;
}

public boolean getDHCR174() {
return DHCR174;
}

public boolean getDHCR175() {
return DHCR175;
}

public boolean getDHCR176() {
return DHCR176;
}

public byte getDHCR178() {
return DHCR178;
}

public boolean getDHCR179() {
return DHCR179;
}

public boolean getDHCR180() {
return DHCR180;
}

public boolean getDHCR181() {
return DHCR181;
}

public boolean getDHCR182() {
return DHCR182;
}

public boolean getDHCR183() {
return DHCR183;
}

public boolean getDHCR184() {
return DHCR184;
}

public boolean getDHCR185() {
return DHCR185;
}

public boolean getDHCR186() {
return DHCR186;
}

public boolean getDHCR187() {
return DHCR187;
}

public boolean getDHCR188() {
return DHCR188;
}

public boolean getDHCR189() {
return DHCR189;
}

public boolean getDHCR190() {
return DHCR190;
}

public boolean getDHCR191() {
return DHCR191;
}

public boolean getDHCR192() {
return DHCR192;
}

public byte getDHCR194() {
return DHCR194;
}

public boolean getDHCR195() {
return DHCR195;
}

public boolean getDHCR196() {
return DHCR196;
}

public boolean getDHCR197() {
return DHCR197;
}

public boolean getDHCR198() {
return DHCR198;
}

public boolean getDHCR199() {
return DHCR199;
}

public boolean getDHCR200() {
return DHCR200;
}

public boolean getDHCR201() {
return DHCR201;
}

public boolean getDHCR202() {
return DHCR202;
}

public boolean getDHCR203() {
return DHCR203;
}

public boolean getDHCR204() {
return DHCR204;
}

public boolean getDHCR205() {
return DHCR205;
}

public boolean getDHCR206() {
return DHCR206;
}

public boolean getDHCR207() {
return DHCR207;
}

public boolean getDHCR208() {
return DHCR208;
}

public byte getDHCR209() {
return DHCR209;
}

public byte getDHCR210() {
return DHCR210;
}

public boolean getDHCR211() {
return DHCR211;
}

public boolean getDHCR212() {
return DHCR212;
}

public boolean getDHCR213() {
return DHCR213;
}

public boolean getDHCR214() {
return DHCR214;
}

public boolean getDHCR215() {
return DHCR215;
}

public boolean getDHCR216() {
return DHCR216;
}

public boolean getDHCR217() {
return DHCR217;
}

public boolean getDHCR218() {
return DHCR218;
}

public boolean getDHCR219() {
return DHCR219;
}

public boolean getDHCR220() {
return DHCR220;
}

public boolean getDHCR221() {
return DHCR221;
}

public boolean getDHCR222() {
return DHCR222;
}

public boolean getDHCR223() {
return DHCR223;
}

public boolean getDHCR224() {
return DHCR224;
}

public byte getDHCR225() {
return DHCR225;
}

public boolean getDHCR226() {
return DHCR226;
}

public boolean getDHCR227() {
return DHCR227;
}

public boolean getDHCR228() {
return DHCR228;
}

public boolean getDHCR229() {
return DHCR229;
}

public boolean getDHCR230() {
return DHCR230;
}

public boolean getDHCR231() {
return DHCR231;
}

public boolean getDHCR232() {
return DHCR232;
}

public boolean getDHCR233() {
return DHCR233;
}

public boolean getDHCR234() {
return DHCR234;
}

public boolean getDHCR235() {
return DHCR235;
}

public boolean getDHCR236() {
return DHCR236;
}

public boolean getDHCR237() {
return DHCR237;
}

public boolean getDHCR238() {
return DHCR238;
}

public boolean getDHCR239() {
return DHCR239;
}

public byte getDHCR24() {
return DHCR24;
}

public boolean getDHCR240() {
return DHCR240;
}

public byte getDHCR241() {
return DHCR241;
}

public boolean getDHCR242() {
return DHCR242;
}

public boolean getDHCR243() {
return DHCR243;
}

public boolean getDHCR244() {
return DHCR244;
}

public boolean getDHCR245() {
return DHCR245;
}

public boolean getDHCR246() {
return DHCR246;
}

public boolean getDHCR247() {
return DHCR247;
}

public boolean getDHCR248() {
return DHCR248;
}

public boolean getDHCR249() {
return DHCR249;
}

public byte getDHCR25() {
return DHCR25;
}

public boolean getDHCR250() {
return DHCR250;
}

public boolean getDHCR251() {
return DHCR251;
}

public boolean getDHCR252() {
return DHCR252;
}

public boolean getDHCR253() {
return DHCR253;
}

public boolean getDHCR254() {
return DHCR254;
}

public boolean getDHCR255() {
return DHCR255;
}

public boolean getDHCR256() {
return DHCR256;
}

public byte getDHCR26() {
return DHCR26;
}

public byte getDHCR27() {
return DHCR27;
}

public boolean getDHCR28() {
return DHCR28;
}

public boolean getDHCR29() {
return DHCR29;
}

public boolean getDHCR30() {
return DHCR30;
}

public boolean getDHCR31() {
return DHCR31;
}

public boolean getDHCR32() {
return DHCR32;
}

public byte getDHCR40() {
return DHCR40;
}

public byte getDHCR41() {
return DHCR41;
}

public byte getDHCR42() {
return DHCR42;
}

public byte getDHCR43() {
return DHCR43;
}

public boolean getDHCR44() {
return DHCR44;
}

public boolean getDHCR45() {
return DHCR45;
}

public boolean getDHCR46() {
return DHCR46;
}

public boolean getDHCR47() {
return DHCR47;
}

public boolean getDHCR48() {
return DHCR48;
}

public byte getDHCR56() {
return DHCR56;
}

public byte getDHCR57() {
return DHCR57;
}

public byte getDHCR58() {
return DHCR58;
}

public boolean getDHCR59() {
return DHCR59;
}

public boolean getDHCR60() {
return DHCR60;
}

public boolean getDHCR61() {
return DHCR61;
}

public boolean getDHCR62() {
return DHCR62;
}

public boolean getDHCR63() {
return DHCR63;
}

public boolean getDHCR64() {
return DHCR64;
}

public byte getDHCR72() {
return DHCR72;
}

public byte getDHCR73() {
return DHCR73;
}

public byte getDHCR74() {
return DHCR74;
}

public boolean getDHCR75() {
return DHCR75;
}

public boolean getDHCR76() {
return DHCR76;
}

public boolean getDHCR77() {
return DHCR77;
}

public boolean getDHCR78() {
return DHCR78;
}

public boolean getDHCR79() {
return DHCR79;
}

public boolean getDHCR80() {
return DHCR80;
}

public boolean getDHCR88() {
return DHCR88;
}

public boolean getDHCR89() {
return DHCR89;
}

public boolean getDHCR90() {
return DHCR90;
}

public boolean getDHCR91() {
return DHCR91;
}

public boolean getDHCR92() {
return DHCR92;
}

public boolean getDHCR93() {
return DHCR93;
}

public boolean getDHCR94() {
return DHCR94;
}

public boolean getDHCR95() {
return DHCR95;
}

public boolean getDHCR96() {
return DHCR96;
}

public byte getDHCS14() {
return DHCS14;
}

public byte getDHCS15() {
return DHCS15;
}

public byte getDHCS16() {
return DHCS16;
}

public byte getDHIASEP() {
return DHIASEP;
}

public byte getDHPA10() {
return DHPA10;
}

public byte getDHPA11() {
return DHPA11;
}

public byte getDHPA12() {
return DHPA12;
}

public byte getDHPA13() {
return DHPA13;
}

public byte getDHPA14() {
return DHPA14;
}

public byte getDHPA15() {
return DHPA15;
}

public byte getDHPA16() {
return DHPA16;
}

public byte getDHPA2() {
return DHPA2;
}

public byte getDHPA3() {
return DHPA3;
}

public byte getDHPA4() {
return DHPA4;
}

public byte getDHPA5() {
return DHPA5;
}

public byte getDHPA6() {
return DHPA6;
}

public byte getDHPA7() {
return DHPA7;
}

public byte getDHPA8() {
return DHPA8;
}

public byte getDHPA9() {
return DHPA9;
}

public byte getDHPB10() {
return DHPB10;
}

public byte getDHPB11() {
return DHPB11;
}

public byte getDHPB12() {
return DHPB12;
}

public byte getDHPB13() {
return DHPB13;
}

public byte getDHPB14() {
return DHPB14;
}

public byte getDHPB15() {
return DHPB15;
}

public byte getDHPB16() {
return DHPB16;
}

public byte getDHPB2() {
return DHPB2;
}

public byte getDHPB3() {
return DHPB3;
}

public byte getDHPB4() {
return DHPB4;
}

public byte getDHPB5() {
return DHPB5;
}

public byte getDHPB6() {
return DHPB6;
}

public byte getDHPB7() {
return DHPB7;
}

public byte getDHPB8() {
return DHPB8;
}

public byte getDHPB9() {
return DHPB9;
}

public byte getDHR13() {
return DHR13;
}

public byte getDHR14() {
return DHR14;
}

public byte getDHR15() {
return DHR15;
}

public boolean getDHR16() {
return DHR16;
}

public byte getDHWORK() {
return DHWORK;
}

public short getDIAS1() {
return DIAS1;
}

public short getDIAS2() {
return DIAS2;
}

public short getDIAS3() {
return DIAS3;
}

public double getDIAVAL() {
return DIAVAL;
}

public byte getDIBPC95() {
return DIBPC95;
}

public byte getDIFADI() {
return DIFADI;
}

public byte getDIFBPCCU() {
return DIFBPCCU;
}

public byte getDIFBPCEQ() {
return DIFBPCEQ;
}

public byte getDIFBPCER() {
return DIFBPCER;
}

public byte getDIFBPCLE() {
return DIFBPCLE;
}

public byte getDIFBPCNO() {
return DIFBPCNO;
}

public byte getDIFBPCUP() {
return DIFBPCUP;
}

public short getDIFDYR() {
return DIFDYR;
}

public byte getDIGNMYC() {
return DIGNMYC;
}

public byte getDIGPRXA() {
return DIGPRXA;
}

public byte getDIGPRXB() {
return DIGPRXB;
}

public byte getDIMADI() {
return DIMADI;
}

public byte getDIMAEDU() {
return DIMAEDU;
}

public byte getDIMARR() {
return DIMARR;
}

public short getDIMDYR() {
return DIMDYR;
}

public byte getDIPAEDU() {
return DIPAEDU;
}

public byte getDISIBC() {
return DISIBC;
}

public byte getERADLT() {
return ERADLT;
}

public byte getERAGEC1() {
return ERAGEC1;
}

public byte getERAGEC2() {
return ERAGEC2;
}

public byte getERAGEC3() {
return ERAGEC3;
}

public byte getERCAA() {
return ERCAA;
}

public byte getERCABCH() {
return ERCABCH;
}

public byte getERCABFR() {
return ERCABFR;
}

public byte getERCABGC() {
return ERCABGC;
}

public byte getERCABOR() {
return ERCABOR;
}

public byte getERCABOT() {
return ERCABOT;
}

public byte getERCABPA() {
return ERCABPA;
}

public byte getERCABPL() {
return ERCABPL;
}

public byte getERCABSP() {
return ERCABSP;
}

public short getERCAC() {
return ERCAC;
}

public byte getERCADP1() {
return ERCADP1;
}

public byte getERCADP10() {
return ERCADP10;
}

public byte getERCADP11() {
return ERCADP11;
}

public byte getERCADP12() {
return ERCADP12;
}

public byte getERCADP13() {
return ERCADP13;
}

public byte getERCADP14() {
return ERCADP14;
}

public byte getERCADP15() {
return ERCADP15;
}

public byte getERCADP16() {
return ERCADP16;
}

public byte getERCADP2() {
return ERCADP2;
}

public byte getERCADP3() {
return ERCADP3;
}

public byte getERCADP4() {
return ERCADP4;
}

public byte getERCADP5() {
return ERCADP5;
}

public byte getERCADP6() {
return ERCADP6;
}

public byte getERCADP7() {
return ERCADP7;
}

public byte getERCADP8() {
return ERCADP8;
}

public byte getERCADP9() {
return ERCADP9;
}

public byte getERCALIVE() {
return ERCALIVE;
}

public byte getERCAM85() {
return ERCAM85;
}

public byte getERCAM86() {
return ERCAM86;
}

public byte getERCAMCH() {
return ERCAMCH;
}

public byte getERCAMFR() {
return ERCAMFR;
}

public byte getERCAMGC() {
return ERCAMGC;
}

public byte getERCAMOR() {
return ERCAMOR;
}

public byte getERCAMPA() {
return ERCAMPA;
}

public byte getERCAMPL() {
return ERCAMPL;
}

public byte getERCAMSP() {
return ERCAMSP;
}

public byte getERCANCH() {
return ERCANCH;
}

public byte getERCANFR() {
return ERCANFR;
}

public byte getERCANGC() {
return ERCANGC;
}

public byte getERCANOR() {
return ERCANOR;
}

public byte getERCANOT() {
return ERCANOT;
}

public byte getERCANPA() {
return ERCANPA;
}

public byte getERCANPL() {
return ERCANPL;
}

public boolean getERCANSP() {
return ERCANSP;
}

public byte getERCANTT() {
return ERCANTT;
}

public byte getERCARA() {
return ERCARA;
}

public byte getERCARB() {
return ERCARB;
}

public byte getERCHLD() {
return ERCHLD;
}

public byte getERFVOFT() {
return ERFVOFT;
}

public byte getERFVOL() {
return ERFVOL;
}

public byte getERFVOL96() {
return ERFVOL96;
}

public byte getERFVOLBE() {
return ERFVOLBE;
}

public byte getERFVOLCA() {
return ERFVOLCA;
}

public byte getERFVOLED() {
return ERFVOLED;
}

public byte getERFVOLIN() {
return ERFVOLIN;
}

public byte getERFVOLLE() {
return ERFVOLLE;
}

public byte getERFVOLMO() {
return ERFVOLMO;
}

public byte getERFVOLOR() {
return ERFVOLOR;
}

public byte getERFVOLPR() {
return ERFVOLPR;
}

public byte getERFVOLRE() {
return ERFVOLRE;
}

public byte getERFVOLSE() {
return ERFVOLSE;
}

public byte getERFVOLTR() {
return ERFVOLTR;
}

public byte getERFVOLVI() {
return ERFVOLVI;
}

public byte getERIVOFT() {
return ERIVOFT;
}

public byte getERIVOL96() {
return ERIVOL96;
}

public byte getERLVOLBA() {
return ERLVOLBA;
}

public byte getERLVOLCO() {
return ERLVOLCO;
}

public byte getERLVOLDE() {
return ERLVOLDE;
}

public byte getERLVOLKE() {
return ERLVOLKE;
}

public byte getERLVOLPE() {
return ERLVOLPE;
}

public byte getERLVOLPR() {
return ERLVOLPR;
}

public byte getERLVOLRE() {
return ERLVOLRE;
}

public byte getERLVOLSH() {
return ERLVOLSH;
}

public byte getERLVOLTR() {
return ERLVOLTR;
}

public byte getERLVOLWR() {
return ERLVOLWR;
}

public byte getEROLDR() {
return EROLDR;
}

public byte getERRESBK() {
return ERRESBK;
}

public byte getERRESBK2() {
return ERRESBK2;
}

public byte getERRESBK3() {
return ERRESBK3;
}

public byte getERRESCK() {
return ERRESCK;
}

public boolean getERRESERB1() {
return ERRESERB1;
}

public byte getERRESERB2() {
return ERRESERB2;
}

public byte getERRESERB3() {
return ERRESERB3;
}

public boolean getERRESERD1() {
return ERRESERD1;
}

public byte getERRESERD2() {
return ERRESERD2;
}

public byte getERRESERD3() {
return ERRESERD3;
}

public boolean getERRESERH1() {
return ERRESERH1;
}

public byte getERRESERH2() {
return ERRESERH2;
}

public byte getERRESERH3() {
return ERRESERH3;
}

public boolean getERRESERI1() {
return ERRESERI1;
}

public byte getERRESERI2() {
return ERRESERI2;
}

public byte getERRESERI3() {
return ERRESERI3;
}

public byte getERRESERN1() {
return ERRESERN1;
}

public byte getERRESERN2() {
return ERRESERN2;
}

public byte getERRESERN3() {
return ERRESERN3;
}

public byte getERRESERO1() {
return ERRESERO1;
}

public byte getERRESERO2() {
return ERRESERO2;
}

public byte getERRESERO3() {
return ERRESERO3;
}

public boolean getERRESERS1() {
return ERRESERS1;
}

public byte getERRESERS2() {
return ERRESERS2;
}

public byte getERRESERS3() {
return ERRESERS3;
}

public byte getERRESNM() {
return ERRESNM;
}

public byte getERRESOF() {
return ERRESOF;
}

public byte getERRESON() {
return ERRESON;
}

public byte getERRESRY() {
return ERRESRY;
}

public byte getERRESRY2() {
return ERRESRY2;
}

public byte getERRESRY3() {
return ERRESRY3;
}

public byte getERVOLA() {
return ERVOLA;
}

public byte getERVOLB() {
return ERVOLB;
}

public byte getESA_P_F() {
return ESA_P_F;
}

public double getESA_P_I() {
return ESA_P_I;
}

public short getESA_P_O() {
return ESA_P_O;
}

public short getESA_P_T() {
return ESA_P_T;
}

public byte getESA_R_F() {
return ESA_R_F;
}

public double getESA_R_I() {
return ESA_R_I;
}

public short getESA_R_O() {
return ESA_R_O;
}

public short getESA_R_T() {
return ESA_R_T;
}

public double getESTWT() {
return ESTWT;
}

public byte getEWTCH() {
return EWTCH;
}

public double getEWTKG() {
return EWTKG;
}

public byte getEWTL() {
return EWTL;
}

public byte getEWTST() {
return EWTST;
}

public byte getEXCFV() {
return EXCFV;
}

public byte getEXCND() {
return EXCND;
}

public byte getEXCPLN85() {
return EXCPLN85;
}

public byte getEXCPLN86() {
return EXCPLN86;
}

public byte getEXCPLN96() {
return EXCPLN96;
}

public byte getEXCPLNFA() {
return EXCPLNFA;
}

public byte getEXCPLNIN() {
return EXCPLNIN;
}

public byte getEXCPLNIV() {
return EXCPLNIV;
}

public byte getEXCPLNOT() {
return EXCPLNOT;
}

public byte getEXCPLNPR() {
return EXCPLNPR;
}

public byte getEXCPLNSA() {
return EXCPLNSA;
}

public byte getEXCPLNTR() {
return EXCPLNTR;
}

public byte getEXLO90() {
return EXLO90;
}

public byte getEXLTC5() {
return EXLTC5;
}

public byte getEXLTCEV() {
return EXLTCEV;
}

public byte getEXMOVHA() {
return EXMOVHA;
}

public byte getEXMOVNB() {
return EXMOVNB;
}

public byte getEXNHEV() {
return EXNHEV;
}

public byte getEXPCC95() {
return EXPCC95;
}

public byte getEXPCC96() {
return EXPCC96;
}

public byte getEXPCCCH() {
return EXPCCCH;
}

public byte getEXPCCHI() {
return EXPCCHI;
}

public byte getEXPCCHS() {
return EXPCCHS;
}

public byte getEXPCCIP() {
return EXPCCIP;
}

public byte getEXPCCLA() {
return EXPCCLA;
}

public byte getEXPCCOI() {
return EXPCCOI;
}

public byte getEXPCCOS() {
return EXPCCOS;
}

public byte getEXPCCRF() {
return EXPCCRF;
}

public byte getEXPCCSA() {
return EXPCCSA;
}

public byte getEXPCCSB() {
return EXPCCSB;
}

public byte getEXPCHR() {
return EXPCHR;
}

public byte getEXPCK() {
return EXPCK;
}

public byte getEXPCLM() {
return EXPCLM;
}

public byte getEXPFC95() {
return EXPFC95;
}

public byte getEXPFC96() {
return EXPFC96;
}

public byte getEXPFCCH() {
return EXPFCCH;
}

public byte getEXPFCHI() {
return EXPFCHI;
}

public byte getEXPFCHS() {
return EXPFCHS;
}

public byte getEXPFCIP() {
return EXPFCIP;
}

public byte getEXPFCLA() {
return EXPFCLA;
}

public byte getEXPFCOI() {
return EXPFCOI;
}

public byte getEXPFCOS() {
return EXPFCOS;
}

public byte getEXPFCRF() {
return EXPFCRF;
}

public byte getEXPFCSA() {
return EXPFCSA;
}

public byte getEXPFCSB() {
return EXPFCSB;
}

public byte getEXPWF() {
return EXPWF;
}

public byte getEXRELA() {
return EXRELA;
}

public byte getEXRELE96() {
return EXRELE96;
}

public byte getEXRELEDE() {
return EXRELEDE;
}

public byte getEXRELEEL() {
return EXRELEEL;
}

public byte getEXRELEFA() {
return EXRELEFA;
}

public byte getEXRELEFO() {
return EXRELEFO;
}

public byte getEXRELEHO() {
return EXRELEHO;
}

public byte getEXRELEME() {
return EXRELEME;
}

public byte getEXRELEOU() {
return EXRELEOU;
}

public byte getEXRELEPR() {
return EXRELEPR;
}

public byte getEXRELETR() {
return EXRELETR;
}

public byte getEXSCEV() {
return EXSCEV;
}

public byte getFASTASK() {
return FASTASK;
}

public byte getFASTELIG() {
return FASTELIG;
}

public boolean getFFERROR() {
return FFERROR;
}

public double getFGLU() {
return FGLU;
}

public String getFINSTAT() {
return FINSTAT;
}

public byte getFIT() {
return FIT;
}

public byte getFLOORC() {
return FLOORC;
}

public byte getFQAQUA() {
return FQAQUA;
}

public byte getFQCBTHMR() {
return FQCBTHMR;
}

public short getFQCENGM() {
return FQCENGM;
}

public byte getFQENDM() {
return FQENDM;
}

public boolean getFQETHNMR() {
return FQETHNMR;
}

public byte getFQNURRF85() {
return FQNURRF85;
}

public boolean getFQNURRF86() {
return FQNURRF86;
}

public byte getFQNURRFBU() {
return FQNURRFBU;
}

public byte getFQNURRFEN() {
return FQNURRFEN;
}

public byte getFQNURRFEX() {
return FQNURRFEX;
}

public byte getFQNURRFNO() {
return FQNURRFNO;
}

public byte getFQNURRFOD() {
return FQNURRFOD;
}

public byte getFQNURRFSC() {
return FQNURRFSC;
}

public byte getFQNURRFWO() {
return FQNURRFWO;
}

public byte getFQNURSE() {
return FQNURSE;
}

public byte getFQQUA95() {
return FQQUA95;
}

public byte getFQQUAALE() {
return FQQUAALE;
}

public byte getFQQUAASL() {
return FQQUAASL;
}

public byte getFQQUACGA() {
return FQQUACGA;
}

public byte getFQQUACGF() {
return FQQUACGF;
}

public byte getFQQUACGO() {
return FQQUACGO;
}

public byte getFQQUACLE() {
return FQQUACLE;
}

public byte getFQQUACS1() {
return FQQUACS1;
}

public byte getFQQUACS2() {
return FQQUACS2;
}

public byte getFQQUACSU() {
return FQQUACSU;
}

public byte getFQQUADEG() {
return FQQUADEG;
}

public byte getFQQUAGCA() {
return FQQUAGCA;
}

public byte getFQQUAGCD() {
return FQQUAGCD;
}

public byte getFQQUAHNC() {
return FQQUAHNC;
}

public byte getFQQUAMAT() {
return FQQUAMAT;
}

public byte getFQQUANUR() {
return FQQUANUR;
}

public byte getFQQUANV1() {
return FQQUANV1;
}

public byte getFQQUANV2() {
return FQQUANV2;
}

public byte getFQQUANV3() {
return FQQUANV3;
}

public byte getFQQUANV4() {
return FQQUANV4;
}

public byte getFQQUANV5() {
return FQQUANV5;
}

public byte getFQQUAOLA() {
return FQQUAOLA;
}

public byte getFQQUAOLD() {
return FQQUAOLD;
}

public byte getFQQUAOLP() {
return FQQUAOLP;
}

public byte getFQQUAONC() {
return FQQUAONC;
}

public byte getFQQUASLC() {
return FQQUASLC;
}

public byte getFQQUASLL() {
return FQQUASLL;
}

public byte getFQQUASUP() {
return FQQUASUP;
}

public byte getFQQUATEA() {
return FQQUATEA;
}

public byte getFQQUATRA() {
return FQQUATRA;
}

public byte getFQQUM85() {
return FQQUM85;
}

public byte getFQQUM86() {
return FQQUM86;
}

public byte getFQQUM96() {
return FQQUM96;
}

public byte getFQQUMALE() {
return FQQUMALE;
}

public byte getFQQUMASL() {
return FQQUMASL;
}

public byte getFQQUMCGA() {
return FQQUMCGA;
}

public byte getFQQUMCGF() {
return FQQUMCGF;
}

public byte getFQQUMCGO() {
return FQQUMCGO;
}

public byte getFQQUMCLE() {
return FQQUMCLE;
}

public byte getFQQUMCS1() {
return FQQUMCS1;
}

public byte getFQQUMCS2() {
return FQQUMCS2;
}

public byte getFQQUMCSU() {
return FQQUMCSU;
}

public byte getFQQUMDEG() {
return FQQUMDEG;
}

public byte getFQQUMDIP() {
return FQQUMDIP;
}

public byte getFQQUMFOR() {
return FQQUMFOR;
}

public byte getFQQUMGCA() {
return FQQUMGCA;
}

public byte getFQQUMGCD() {
return FQQUMGCD;
}

public byte getFQQUMHNC() {
return FQQUMHNC;
}

public byte getFQQUMMAT() {
return FQQUMMAT;
}

public byte getFQQUMMIL() {
return FQQUMMIL;
}

public byte getFQQUMNNE() {
return FQQUMNNE;
}

public byte getFQQUMNUR() {
return FQQUMNUR;
}

public byte getFQQUMNV1() {
return FQQUMNV1;
}

public byte getFQQUMNV2() {
return FQQUMNV2;
}

public byte getFQQUMNV3() {
return FQQUMNV3;
}

public byte getFQQUMNV4() {
return FQQUMNV4;
}

public byte getFQQUMNV5() {
return FQQUMNV5;
}

public byte getFQQUMNVZ() {
return FQQUMNVZ;
}

public byte getFQQUMOAC() {
return FQQUMOAC;
}

public byte getFQQUMOLA() {
return FQQUMOLA;
}

public byte getFQQUMOLD() {
return FQQUMOLD;
}

public byte getFQQUMOLP() {
return FQQUMOLP;
}

public byte getFQQUMONC() {
return FQQUMONC;
}

public byte getFQQUMOPR() {
return FQQUMOPR;
}

public byte getFQQUMOVO() {
return FQQUMOVO;
}

public byte getFQQUMSLC() {
return FQQUMSLC;
}

public byte getFQQUMSLL() {
return FQQUMSLL;
}

public byte getFQQUMSUP() {
return FQQUMSUP;
}

public byte getFQQUMTEA() {
return FQQUMTEA;
}

public byte getFQQUMTRA() {
return FQQUMTRA;
}

public byte getFULL1() {
return FULL1;
}

public byte getFULL2() {
return FULL2;
}

public byte getFULL3() {
return FULL3;
}

public byte getGCINHH() {
return GCINHH;
}

public double getHBA1C() {
return HBA1C;
}

public double getHDL() {
return HDL;
}

public byte getHEACD() {
return HEACD;
}

public byte getHEACE() {
return HEACE;
}

public byte getHEACEA() {
return HEACEA;
}

public byte getHEADLSP() {
return HEADLSP;
}

public byte getHEAGGS() {
return HEAGGS;
}

public byte getHEAGHS() {
return HEAGHS;
}

public byte getHEAID96() {
return HEAID96;
}

public byte getHEAIDAL() {
return HEAIDAL;
}

public byte getHEAIDBU() {
return HEAIDBU;
}

public byte getHEAIDCA() {
return HEAIDCA;
}

public byte getHEAIDCR() {
return HEAIDCR;
}

public byte getHEAIDEA() {
return HEAIDEA;
}

public byte getHEAIDEW() {
return HEAIDEW;
}

public byte getHEAIDMW() {
return HEAIDMW;
}

public byte getHEAIDZI() {
return HEAIDZI;
}

public byte getHEALCH() {
return HEALCH;
}

public byte getHEALCOV() {
return HEALCOV;
}

public byte getHEALM85() {
return HEALM85;
}

public byte getHEALM86() {
return HEALM86;
}

public byte getHEALMCH() {
return HEALMCH;
}

public byte getHEALMFA() {
return HEALMFA;
}

public byte getHEALMFR() {
return HEALMFR;
}

public byte getHEALMLL() {
return HEALMLL;
}

public byte getHEALMNHS() {
return HEALMNHS;
}

public byte getHEALMSE() {
return HEALMSE;
}

public byte getHEALMSS() {
return HEALMSS;
}

public byte getHEALNHS() {
return HEALNHS;
}

public byte getHEALOT() {
return HEALOT;
}

public byte getHEALSE() {
return HEALSE;
}

public byte getHEALSS() {
return HEALSS;
}

public byte getHEAMB() {
return HEAMB;
}

public byte getHEANYCH() {
return HEANYCH;
}

public byte getHEARTA() {
return HEARTA;
}

public byte getHEARTB() {
return HEARTB;
}

public byte getHEARTC() {
return HEARTC;
}

public byte getHEARTE() {
return HEARTE;
}

public byte getHEARTOA() {
return HEARTOA;
}

public byte getHEARTOT() {
return HEARTOT;
}

public byte getHEARTRA() {
return HEARTRA;
}

public byte getHEBETA() {
return HEBETA;
}

public byte getHEBOWD() {
return HEBOWD;
}

public byte getHEBPCHK() {
return HEBPCHK;
}

public byte getHEBUCH() {
return HEBUCH;
}

public boolean getHEBUCOV() {
return HEBUCOV;
}

public byte getHEBUM85() {
return HEBUM85;
}

public byte getHEBUM86() {
return HEBUM86;
}

public byte getHEBUMCH() {
return HEBUMCH;
}

public byte getHEBUMFA() {
return HEBUMFA;
}

public byte getHEBUMFR() {
return HEBUMFR;
}

public byte getHEBUMLL() {
return HEBUMLL;
}

public byte getHEBUMNHS() {
return HEBUMNHS;
}

public byte getHEBUMSE() {
return HEBUMSE;
}

public byte getHEBUMSS() {
return HEBUMSS;
}

public byte getHEBUNHS() {
return HEBUNHS;
}

public byte getHEBUOT() {
return HEBUOT;
}

public byte getHEBUSE() {
return HEBUSE;
}

public byte getHEBUSS() {
return HEBUSS;
}

public byte getHECACH() {
return HECACH;
}

public byte getHECACOV() {
return HECACOV;
}

public byte getHECAM85() {
return HECAM85;
}

public byte getHECAM86() {
return HECAM86;
}

public byte getHECAMCH() {
return HECAMCH;
}

public byte getHECAMFA() {
return HECAMFA;
}

public byte getHECAMFR() {
return HECAMFR;
}

public byte getHECAMLL() {
return HECAMLL;
}

public byte getHECAMNHS() {
return HECAMNHS;
}

public byte getHECAMSE() {
return HECAMSE;
}

public byte getHECAMSS() {
return HECAMSS;
}

public byte getHECANAAR() {
return HECANAAR;
}

public byte getHECANBB() {
return HECANBB;
}

public byte getHECANHS() {
return HECANHS;
}

public byte getHECAOT() {
return HECAOT;
}

public byte getHECASE() {
return HECASE;
}

public byte getHECASS() {
return HECASS;
}

public byte getHECATN() {
return HECATN;
}

public byte getHECGSTA() {
return HECGSTA;
}

public byte getHECGSTP() {
return HECGSTP;
}

public byte getHECHMD() {
return HECHMD;
}

public byte getHECHME() {
return HECHME;
}

public byte getHECHOL() {
return HECHOL;
}

public byte getHECRCH() {
return HECRCH;
}

public boolean getHECRCOV() {
return HECRCOV;
}

public byte getHECRM85() {
return HECRM85;
}

public byte getHECRM86() {
return HECRM86;
}

public byte getHECRMCH() {
return HECRMCH;
}

public byte getHECRMFA() {
return HECRMFA;
}

public byte getHECRMFR() {
return HECRMFR;
}

public byte getHECRMLL() {
return HECRMLL;
}

public byte getHECRMNHS() {
return HECRMNHS;
}

public byte getHECRMSE() {
return HECRMSE;
}

public byte getHECRMSS() {
return HECRMSS;
}

public byte getHECRNHS() {
return HECRNHS;
}

public byte getHECROT() {
return HECROT;
}

public byte getHECRSE() {
return HECRSE;
}

public byte getHECRSS() {
return HECRSS;
}

public byte getHEDAC95() {
return HEDAC95;
}

public byte getHEDACAN() {
return HEDACAN;
}

public byte getHEDACAR() {
return HEDACAR;
}

public byte getHEDACBP() {
return HEDACBP;
}

public byte getHEDACCH() {
return HEDACCH;
}

public byte getHEDACDI() {
return HEDACDI;
}

public byte getHEDACHF() {
return HEDACHF;
}

public byte getHEDACHM() {
return HEDACHM;
}

public byte getHEDACMI() {
return HEDACMI;
}

public byte getHEDACST() {
return HEDACST;
}

public byte getHEDAN95() {
return HEDAN95;
}

public byte getHEDANAN() {
return HEDANAN;
}

public byte getHEDANAR() {
return HEDANAR;
}

public byte getHEDANBP() {
return HEDANBP;
}

public byte getHEDANCH() {
return HEDANCH;
}

public byte getHEDANDI() {
return HEDANDI;
}

public byte getHEDANHF() {
return HEDANHF;
}

public byte getHEDANHM() {
return HEDANHM;
}

public byte getHEDANMI() {
return HEDANMI;
}

public byte getHEDANST() {
return HEDANST;
}

public byte getHEDAS95() {
return HEDAS95;
}

public byte getHEDASAN() {
return HEDASAN;
}

public byte getHEDASAR() {
return HEDASAR;
}

public byte getHEDASBP() {
return HEDASBP;
}

public byte getHEDASCH() {
return HEDASCH;
}

public byte getHEDASHF() {
return HEDASHF;
}

public byte getHEDASHM() {
return HEDASHM;
}

public boolean getHEDAW95() {
return HEDAW95;
}

public byte getHEDAWAN() {
return HEDAWAN;
}

public byte getHEDAWAR() {
return HEDAWAR;
}

public byte getHEDAWBP() {
return HEDAWBP;
}

public byte getHEDAWCH() {
return HEDAWCH;
}

public byte getHEDAWDI() {
return HEDAWDI;
}

public byte getHEDAWHF() {
return HEDAWHF;
}

public byte getHEDAWHM() {
return HEDAWHM;
}

public byte getHEDAWMI() {
return HEDAWMI;
}

public byte getHEDAWST() {
return HEDAWST;
}

public byte getHEDBDAD() {
return HEDBDAD;
}

public byte getHEDBDAR() {
return HEDBDAR;
}

public byte getHEDBDAS() {
return HEDBDAS;
}

public byte getHEDBDBL() {
return HEDBDBL;
}

public byte getHEDBDCA() {
return HEDBDCA;
}

public byte getHEDBDDE() {
return HEDBDDE;
}

public byte getHEDBDLU() {
return HEDBDLU;
}

public boolean getHEDBDMS() {
return HEDBDMS;
}

public byte getHEDBDOS() {
return HEDBDOS;
}

public byte getHEDBDPD() {
return HEDBDPD;
}

public byte getHEDBDPS() {
return HEDBDPS;
}

public byte getHEDBLU() {
return HEDBLU;
}

public byte getHEDBMAD() {
return HEDBMAD;
}

public byte getHEDBMAR() {
return HEDBMAR;
}

public byte getHEDBMAS() {
return HEDBMAS;
}

public byte getHEDBMBL() {
return HEDBMBL;
}

public byte getHEDBMCA() {
return HEDBMCA;
}

public byte getHEDBMDE() {
return HEDBMDE;
}

public byte getHEDBMLU() {
return HEDBMLU;
}

public boolean getHEDBMMS() {
return HEDBMMS;
}

public byte getHEDBMOS() {
return HEDBMOS;
}

public byte getHEDBMPD() {
return HEDBMPD;
}

public byte getHEDBMPS() {
return HEDBMPS;
}

public byte getHEDBSAR() {
return HEDBSAR;
}

public byte getHEDBSAS() {
return HEDBSAS;
}

public byte getHEDBSBL() {
return HEDBSBL;
}

public byte getHEDBSCA() {
return HEDBSCA;
}

public byte getHEDBSDE() {
return HEDBSDE;
}

public boolean getHEDBSMS() {
return HEDBSMS;
}

public byte getHEDBSOS() {
return HEDBSOS;
}

public byte getHEDBSPD() {
return HEDBSPD;
}

public byte getHEDBWAD() {
return HEDBWAD;
}

public byte getHEDBWAR() {
return HEDBWAR;
}

public byte getHEDBWAS() {
return HEDBWAS;
}

public boolean getHEDBWBL() {
return HEDBWBL;
}

public byte getHEDBWCA() {
return HEDBWCA;
}

public byte getHEDBWDE() {
return HEDBWDE;
}

public byte getHEDBWLU() {
return HEDBWLU;
}

public boolean getHEDBWMS() {
return HEDBWMS;
}

public byte getHEDBWOS() {
return HEDBWOS;
}

public byte getHEDBWPD() {
return HEDBWPD;
}

public byte getHEDBWPS() {
return HEDBWPS;
}

public byte getHEDIA95() {
return HEDIA95;
}

public byte getHEDIA96() {
return HEDIA96;
}

public byte getHEDIAAN() {
return HEDIAAN;
}

public byte getHEDIAAR() {
return HEDIAAR;
}

public byte getHEDIABP() {
return HEDIABP;
}

public byte getHEDIACH() {
return HEDIACH;
}

public byte getHEDIADI() {
return HEDIADI;
}

public byte getHEDIAHF() {
return HEDIAHF;
}

public byte getHEDIAHM() {
return HEDIAHM;
}

public byte getHEDIAMI() {
return HEDIAMI;
}

public byte getHEDIAST() {
return HEDIAST;
}

public byte getHEDIB96() {
return HEDIB96;
}

public byte getHEDIBAD() {
return HEDIBAD;
}

public byte getHEDIBAR() {
return HEDIBAR;
}

public byte getHEDIBAS() {
return HEDIBAS;
}

public byte getHEDIBBL() {
return HEDIBBL;
}

public byte getHEDIBCA() {
return HEDIBCA;
}

public byte getHEDIBDE() {
return HEDIBDE;
}

public byte getHEDIBLU() {
return HEDIBLU;
}

public byte getHEDIBMS() {
return HEDIBMS;
}

public byte getHEDIBOS() {
return HEDIBOS;
}

public byte getHEDIBPD() {
return HEDIBPD;
}

public byte getHEDIBPS() {
return HEDIBPS;
}

public byte getHEDIM85() {
return HEDIM85;
}

public byte getHEDIM86() {
return HEDIM86;
}

public byte getHEDIM96() {
return HEDIM96;
}

public byte getHEDIMAN() {
return HEDIMAN;
}

public byte getHEDIMAR() {
return HEDIMAR;
}

public byte getHEDIMBP() {
return HEDIMBP;
}

public byte getHEDIMCH() {
return HEDIMCH;
}

public byte getHEDIMDI() {
return HEDIMDI;
}

public byte getHEDIMHF() {
return HEDIMHF;
}

public byte getHEDIMHM() {
return HEDIMHM;
}

public byte getHEDIMMI() {
return HEDIMMI;
}

public byte getHEDIMST() {
return HEDIMST;
}

public byte getHEDNTA() {
return HEDNTA;
}

public byte getHEDNTB1() {
return HEDNTB1;
}

public byte getHEDNTB2() {
return HEDNTB2;
}

public byte getHEDNTB3() {
return HEDNTB3;
}

public byte getHEDNTB4() {
return HEDNTB4;
}

public byte getHEDNTB5() {
return HEDNTB5;
}

public byte getHEDNTB96() {
return HEDNTB96;
}

public byte getHEDREYR() {
return HEDREYR;
}

public byte getHEEACH() {
return HEEACH;
}

public boolean getHEEACOV() {
return HEEACOV;
}

public byte getHEEAM85() {
return HEEAM85;
}

public boolean getHEEAM86() {
return HEEAM86;
}

public byte getHEEAMCH() {
return HEEAMCH;
}

public byte getHEEAMFA() {
return HEEAMFA;
}

public boolean getHEEAMFR() {
return HEEAMFR;
}

public byte getHEEAMLL() {
return HEEAMLL;
}

public byte getHEEAMNHS() {
return HEEAMNHS;
}

public byte getHEEAMSE() {
return HEEAMSE;
}

public byte getHEEAMSS() {
return HEEAMSS;
}

public byte getHEEANHS() {
return HEEANHS;
}

public byte getHEEAOT() {
return HEEAOT;
}

public byte getHEEASE() {
return HEEASE;
}

public byte getHEEASS() {
return HEEASS;
}

public byte getHEEWCH() {
return HEEWCH;
}

public boolean getHEEWCOV() {
return HEEWCOV;
}

public byte getHEEWM85() {
return HEEWM85;
}

public boolean getHEEWM86() {
return HEEWM86;
}

public byte getHEEWMCH() {
return HEEWMCH;
}

public byte getHEEWMFA() {
return HEEWMFA;
}

public byte getHEEWMFR() {
return HEEWMFR;
}

public byte getHEEWMLL() {
return HEEWMLL;
}

public byte getHEEWMNHS() {
return HEEWMNHS;
}

public byte getHEEWMSE() {
return HEEWMSE;
}

public byte getHEEWMSS() {
return HEEWMSS;
}

public byte getHEEWNHS() {
return HEEWNHS;
}

public byte getHEEWOT() {
return HEEWOT;
}

public byte getHEEWSE() {
return HEEWSE;
}

public byte getHEEWSS() {
return HEEWSS;
}

public byte getHEEYEA() {
return HEEYEA;
}

public byte getHEFLE() {
return HEFLE;
}

public byte getHEFLF() {
return HEFLF;
}

public byte getHEFTCHK() {
return HEFTCHK;
}

public byte getHEGPNHS() {
return HEGPNHS;
}

public byte getHEGPOFT() {
return HEGPOFT;
}

public byte getHEHBPB() {
return HEHBPB;
}

public byte getHEHBPB1() {
return HEHBPB1;
}

public byte getHEHELF() {
return HEHELF;
}

public byte getHEHPS() {
return HEHPS;
}

public byte getHEHPY() {
return HEHPY;
}

public byte getHEHRT() {
return HEHRT;
}

public byte getHEHRTA() {
return HEHRTA;
}

public byte getHEHRTB() {
return HEHRTB;
}

public byte getHEHRTC() {
return HEHRTC;
}

public byte getHEHRTD() {
return HEHRTD;
}

public byte getHEHRTE() {
return HEHRTE;
}

public byte getHEJIAA1() {
return HEJIAA1;
}

public byte getHEJIAA2() {
return HEJIAA2;
}

public byte getHEJIAA3() {
return HEJIAA3;
}

public byte getHEJIAA4() {
return HEJIAA4;
}

public byte getHEJIAA5() {
return HEJIAA5;
}

public byte getHEJIBLH() {
return HEJIBLH;
}

public byte getHEJIBLK() {
return HEJIBLK;
}

public byte getHEJIBRH() {
return HEJIBRH;
}

public byte getHEJIBRK() {
return HEJIBRK;
}

public byte getHEJION() {
return HEJION;
}

public byte getHEKIDN() {
return HEKIDN;
}

public byte getHEKNEA() {
return HEKNEA;
}

public byte getHEKNEB() {
return HEKNEB;
}

public byte getHELNGB() {
return HELNGB;
}

public byte getHELWK() {
return HELWK;
}

public byte getHEMAMB() {
return HEMAMB;
}

public byte getHEMDA1() {
return HEMDA1;
}

public byte getHEMDAB() {
return HEMDAB;
}

public byte getHEMEB() {
return HEMEB;
}

public byte getHEMEN() {
return HEMEN;
}

public byte getHEMWCH() {
return HEMWCH;
}

public byte getHEMWCOV() {
return HEMWCOV;
}

public byte getHEMWM85() {
return HEMWM85;
}

public byte getHEMWM86() {
return HEMWM86;
}

public byte getHEMWMCH() {
return HEMWMCH;
}

public byte getHEMWMFA() {
return HEMWMFA;
}

public byte getHEMWMFR() {
return HEMWMFR;
}

public byte getHEMWMLL() {
return HEMWMLL;
}

public byte getHEMWMNHS() {
return HEMWMNHS;
}

public byte getHEMWMSE() {
return HEMWMSE;
}

public byte getHEMWMSS() {
return HEMWMSS;
}

public byte getHEMWNHS() {
return HEMWNHS;
}

public byte getHEMWOT() {
return HEMWOT;
}

public byte getHEMWSE() {
return HEMWSE;
}

public byte getHEMWSS() {
return HEMWSS;
}

public byte getHENMMI() {
return HENMMI;
}

public byte getHENMST() {
return HENMST;
}

public byte getHEOPCCA() {
return HEOPCCA;
}

public byte getHEOPCDI() {
return HEOPCDI;
}

public byte getHEOPCGL() {
return HEOPCGL;
}

public byte getHEOPCMD() {
return HEOPCMD;
}

public byte getHEOPFCA() {
return HEOPFCA;
}

public byte getHEOPFDI() {
return HEOPFDI;
}

public byte getHEOPFGL() {
return HEOPFGL;
}

public byte getHEOPFMD() {
return HEOPFMD;
}

public byte getHEOPNCA() {
return HEOPNCA;
}

public byte getHEOPNDI() {
return HEOPNDI;
}

public byte getHEOPNGL() {
return HEOPNGL;
}

public byte getHEOPNMD() {
return HEOPNMD;
}

public byte getHEOPSCA() {
return HEOPSCA;
}

public byte getHEOPSDI() {
return HEOPSDI;
}

public byte getHEOPSGL() {
return HEOPSGL;
}

public byte getHEOPSMD() {
return HEOPSMD;
}

public byte getHEOPT96() {
return HEOPT96;
}

public byte getHEOPTCA() {
return HEOPTCA;
}

public byte getHEOPTDI() {
return HEOPTDI;
}

public byte getHEOPTGL() {
return HEOPTGL;
}

public byte getHEOPTMD() {
return HEOPTMD;
}

public byte getHEOSTE() {
return HEOSTE;
}

public byte getHEOSTEA() {
return HEOSTEA;
}

public byte getHEOSTEB() {
return HEOSTEB;
}

public byte getHEOSTEC() {
return HEOSTEC;
}

public byte getHEOSTED() {
return HEOSTED;
}

public byte getHEPAB() {
return HEPAB;
}

public byte getHEPAB1() {
return HEPAB1;
}

public byte getHEPAC() {
return HEPAC;
}

public byte getHEPAD() {
return HEPAD;
}

public byte getHEPAE() {
return HEPAE;
}

public byte getHEPAF() {
return HEPAF;
}

public byte getHEPAWAL() {
return HEPAWAL;
}

public byte getHEPAWBA() {
return HEPAWBA;
}

public byte getHEPAWFE() {
return HEPAWFE;
}

public byte getHEPAWHI() {
return HEPAWHI;
}

public byte getHEPAWKN() {
return HEPAWKN;
}

public byte getHEPAWMO() {
return HEPAWMO;
}

public byte getHEPAWOT() {
return HEPAWOT;
}

public byte getHEPEA() {
return HEPEA;
}

public byte getHEPEE() {
return HEPEE;
}

public byte getHEPER() {
return HEPER;
}

public short getHEPEY() {
return HEPEY;
}

public byte getHEPRO() {
return HEPRO;
}

public byte getHEPSY95() {
return HEPSY95;
}

public byte getHEPSYA() {
return HEPSYA;
}

public byte getHEPSYAN() {
return HEPSYAN;
}

public byte getHEPSYB() {
return HEPSYB;
}

public byte getHEPSYC() {
return HEPSYC;
}

public byte getHEPSYD() {
return HEPSYD;
}

public byte getHEPSYDE() {
return HEPSYDE;
}

public byte getHEPSYE() {
return HEPSYE;
}

public byte getHEPSYEM() {
return HEPSYEM;
}

public byte getHEPSYHA() {
return HEPSYHA;
}

public byte getHEPSYMA() {
return HEPSYMA;
}

public byte getHEPSYMO() {
return HEPSYMO;
}

public byte getHEPSYPS() {
return HEPSYPS;
}

public byte getHEPSYSC() {
return HEPSYSC;
}

public byte getHESKD() {
return HESKD;
}

public byte getHESKE() {
return HESKE;
}

public byte getHESKF() {
return HESKF;
}

public byte getHESLPA() {
return HESLPA;
}

public byte getHESLPB() {
return HESLPB;
}

public byte getHESLPC() {
return HESLPC;
}

public byte getHESLPD() {
return HESLPD;
}

public double getHESLPE() {
return HESLPE;
}

public byte getHESLPF() {
return HESLPF;
}

public byte getHESLPX() {
return HESLPX;
}

public byte getHESSME() {
return HESSME;
}

public byte getHESTAS() {
return HESTAS;
}

public byte getHESTOP() {
return HESTOP;
}

public byte getHESUG() {
return HESUG;
}

public byte getHESUGA() {
return HESUGA;
}

public byte getHESWGH() {
return HESWGH;
}

public byte getHESWGHA() {
return HESWGHA;
}

public byte getHETEMP() {
return HETEMP;
}

public byte getHEWEE() {
return HEWEE;
}

public byte getHEWEEA() {
return HEWEEA;
}

public byte getHEZICH() {
return HEZICH;
}

public boolean getHEZICOV() {
return HEZICOV;
}

public byte getHEZIM85() {
return HEZIM85;
}

public byte getHEZIM86() {
return HEZIM86;
}

public byte getHEZIMCH() {
return HEZIMCH;
}

public byte getHEZIMFA() {
return HEZIMFA;
}

public byte getHEZIMFR() {
return HEZIMFR;
}

public byte getHEZIMLL() {
return HEZIMLL;
}

public byte getHEZIMNHS() {
return HEZIMNHS;
}

public byte getHEZIMSE() {
return HEZIMSE;
}

public byte getHEZIMSS() {
return HEZIMSS;
}

public byte getHEZINHS() {
return HEZINHS;
}

public byte getHEZIOT() {
return HEZIOT;
}

public byte getHEZISE() {
return HEZISE;
}

public byte getHEZISS() {
return HEZISS;
}

public double getHGB() {
return HGB;
}

public byte getHOADC96() {
return HOADC96;
}

public byte getHOADCAD() {
return HOADCAD;
}

public byte getHOADCAP() {
return HOADCAP;
}

public byte getHOADCLI() {
return HOADCLI;
}

public byte getHOADCRS() {
return HOADCRS;
}

public byte getHOADCSH() {
return HOADCSH;
}

public byte getHOADCWD() {
return HOADCWD;
}

public byte getHOADCWS() {
return HOADCWS;
}

public byte getHOADD95() {
return HOADD95;
}

public byte getHOADD96() {
return HOADD96;
}

public byte getHOADDAD() {
return HOADDAD;
}

public byte getHOADDBL() {
return HOADDBL;
}

public byte getHOADDBS() {
return HOADDBS;
}

public byte getHOADDCL() {
return HOADDCL;
}

public byte getHOADDCO() {
return HOADDCO;
}

public byte getHOADDHO() {
return HOADDHO;
}

public byte getHOADDKM() {
return HOADDKM;
}

public byte getHOADHR() {
return HOADHR;
}

public byte getHOADS() {
return HOADS;
}

public byte getHOAIAD95() {
return HOAIAD95;
}

public byte getHOAIADAL() {
return HOAIADAL;
}

public byte getHOAIADHS() {
return HOAIADHS;
}

public byte getHOAIADLL() {
return HOAIADLL;
}

public byte getHOAIADSS() {
return HOAIADSS;
}

public byte getHOAIADYS() {
return HOAIADYS;
}

public byte getHOAIAMAP85() {
return HOAIAMAP85;
}

public byte getHOAIAMAP86() {
return HOAIAMAP86;
}

public byte getHOAIAP95() {
return HOAIAP95;
}

public byte getHOAIAPAL() {
return HOAIAPAL;
}

public byte getHOAIAPHS() {
return HOAIAPHS;
}

public byte getHOAIAPLL() {
return HOAIAPLL;
}

public byte getHOAIAPSS() {
return HOAIAPSS;
}

public byte getHOAIAPYS() {
return HOAIAPYS;
}

public byte getHOAIBL95() {
return HOAIBL95;
}

public byte getHOAIBLAL() {
return HOAIBLAL;
}

public byte getHOAIBLHS() {
return HOAIBLHS;
}

public byte getHOAIBLLL() {
return HOAIBLLL;
}

public byte getHOAIBLSS() {
return HOAIBLSS;
}

public byte getHOAIBLYS() {
return HOAIBLYS;
}

public byte getHOAIBS95() {
return HOAIBS95;
}

public byte getHOAIBSAL() {
return HOAIBSAL;
}

public byte getHOAIBSHS() {
return HOAIBSHS;
}

public byte getHOAIBSLL() {
return HOAIBSLL;
}

public byte getHOAIBSSS() {
return HOAIBSSS;
}

public byte getHOAIBSYS() {
return HOAIBSYS;
}

public byte getHOAICL95() {
return HOAICL95;
}

public byte getHOAICLAL() {
return HOAICLAL;
}

public byte getHOAICLHS() {
return HOAICLHS;
}

public byte getHOAICLLL() {
return HOAICLLL;
}

public byte getHOAICLSS() {
return HOAICLSS;
}

public byte getHOAICLYS() {
return HOAICLYS;
}

public byte getHOAICO95() {
return HOAICO95;
}

public byte getHOAICOAL() {
return HOAICOAL;
}

public byte getHOAICOHS() {
return HOAICOHS;
}

public byte getHOAICOLL() {
return HOAICOLL;
}

public byte getHOAICOSS() {
return HOAICOSS;
}

public byte getHOAICOYS() {
return HOAICOYS;
}

public byte getHOAIDV95() {
return HOAIDV95;
}

public byte getHOAIDVAL() {
return HOAIDVAL;
}

public byte getHOAIDVHS() {
return HOAIDVHS;
}

public byte getHOAIDVLL() {
return HOAIDVLL;
}

public byte getHOAIDVSS() {
return HOAIDVSS;
}

public byte getHOAIDVYS() {
return HOAIDVYS;
}

public byte getHOAIHO95() {
return HOAIHO95;
}

public byte getHOAIHOAL() {
return HOAIHOAL;
}

public byte getHOAIHOHS() {
return HOAIHOHS;
}

public byte getHOAIHOLL() {
return HOAIHOLL;
}

public byte getHOAIHOSS() {
return HOAIHOSS;
}

public byte getHOAIHOYS() {
return HOAIHOYS;
}

public byte getHOAIHR95() {
return HOAIHR95;
}

public byte getHOAIHRAL() {
return HOAIHRAL;
}

public byte getHOAIHRHS() {
return HOAIHRHS;
}

public byte getHOAIHRLL() {
return HOAIHRLL;
}

public byte getHOAIHRSS() {
return HOAIHRSS;
}

public byte getHOAIHRYS() {
return HOAIHRYS;
}

public byte getHOAIKM95() {
return HOAIKM95;
}

public byte getHOAIKMAL() {
return HOAIKMAL;
}

public byte getHOAIKMHS() {
return HOAIKMHS;
}

public byte getHOAIKMLL() {
return HOAIKMLL;
}

public byte getHOAIKMSS() {
return HOAIKMSS;
}

public byte getHOAIKMYS() {
return HOAIKMYS;
}

public byte getHOAILI95() {
return HOAILI95;
}

public byte getHOAILIAL() {
return HOAILIAL;
}

public byte getHOAILIHS() {
return HOAILIHS;
}

public byte getHOAILILL() {
return HOAILILL;
}

public byte getHOAILISS() {
return HOAILISS;
}

public byte getHOAILIYS() {
return HOAILIYS;
}

public byte getHOAIMAD85() {
return HOAIMAD85;
}

public byte getHOAIMAD86() {
return HOAIMAD86;
}

public byte getHOAIMADAL() {
return HOAIMADAL;
}

public byte getHOAIMADCH() {
return HOAIMADCH;
}

public byte getHOAIMADFM() {
return HOAIMADFM;
}

public byte getHOAIMADFR() {
return HOAIMADFR;
}

public byte getHOAIMADFS() {
return HOAIMADFS;
}

public byte getHOAIMADHS() {
return HOAIMADHS;
}

public byte getHOAIMADLL() {
return HOAIMADLL;
}

public byte getHOAIMADSS() {
return HOAIMADSS;
}

public byte getHOAIMADYS() {
return HOAIMADYS;
}

public byte getHOAIMAPAL() {
return HOAIMAPAL;
}

public byte getHOAIMAPCH() {
return HOAIMAPCH;
}

public byte getHOAIMAPFM() {
return HOAIMAPFM;
}

public byte getHOAIMAPFR() {
return HOAIMAPFR;
}

public byte getHOAIMAPFS() {
return HOAIMAPFS;
}

public byte getHOAIMAPHS() {
return HOAIMAPHS;
}

public byte getHOAIMAPLL() {
return HOAIMAPLL;
}

public byte getHOAIMAPSS() {
return HOAIMAPSS;
}

public byte getHOAIMAPYS() {
return HOAIMAPYS;
}

public byte getHOAIMBL85() {
return HOAIMBL85;
}

public byte getHOAIMBL86() {
return HOAIMBL86;
}

public byte getHOAIMBLAL() {
return HOAIMBLAL;
}

public byte getHOAIMBLCH() {
return HOAIMBLCH;
}

public byte getHOAIMBLFM() {
return HOAIMBLFM;
}

public byte getHOAIMBLFR() {
return HOAIMBLFR;
}

public byte getHOAIMBLFS() {
return HOAIMBLFS;
}

public byte getHOAIMBLHS() {
return HOAIMBLHS;
}

public byte getHOAIMBLLL() {
return HOAIMBLLL;
}

public byte getHOAIMBLSS() {
return HOAIMBLSS;
}

public byte getHOAIMBLYS() {
return HOAIMBLYS;
}

public byte getHOAIMBS85() {
return HOAIMBS85;
}

public byte getHOAIMBS86() {
return HOAIMBS86;
}

public byte getHOAIMBSAL() {
return HOAIMBSAL;
}

public byte getHOAIMBSCH() {
return HOAIMBSCH;
}

public byte getHOAIMBSFM() {
return HOAIMBSFM;
}

public byte getHOAIMBSFR() {
return HOAIMBSFR;
}

public byte getHOAIMBSFS() {
return HOAIMBSFS;
}

public byte getHOAIMBSHS() {
return HOAIMBSHS;
}

public byte getHOAIMBSLL() {
return HOAIMBSLL;
}

public byte getHOAIMBSSS() {
return HOAIMBSSS;
}

public byte getHOAIMBSYS() {
return HOAIMBSYS;
}

public byte getHOAIMCL85() {
return HOAIMCL85;
}

public byte getHOAIMCL86() {
return HOAIMCL86;
}

public byte getHOAIMCLAL() {
return HOAIMCLAL;
}

public byte getHOAIMCLCH() {
return HOAIMCLCH;
}

public byte getHOAIMCLFM() {
return HOAIMCLFM;
}

public byte getHOAIMCLFR() {
return HOAIMCLFR;
}

public byte getHOAIMCLFS() {
return HOAIMCLFS;
}

public byte getHOAIMCLHS() {
return HOAIMCLHS;
}

public byte getHOAIMCLLL() {
return HOAIMCLLL;
}

public byte getHOAIMCLSS() {
return HOAIMCLSS;
}

public byte getHOAIMCLYS() {
return HOAIMCLYS;
}

public byte getHOAIMCO85() {
return HOAIMCO85;
}

public byte getHOAIMCO86() {
return HOAIMCO86;
}

public byte getHOAIMCOAL() {
return HOAIMCOAL;
}

public byte getHOAIMCOCH() {
return HOAIMCOCH;
}

public byte getHOAIMCOFM() {
return HOAIMCOFM;
}

public byte getHOAIMCOFR() {
return HOAIMCOFR;
}

public byte getHOAIMCOFS() {
return HOAIMCOFS;
}

public byte getHOAIMCOHS() {
return HOAIMCOHS;
}

public byte getHOAIMCOLL() {
return HOAIMCOLL;
}

public byte getHOAIMCOSS() {
return HOAIMCOSS;
}

public byte getHOAIMCOYS() {
return HOAIMCOYS;
}

public byte getHOAIMDV85() {
return HOAIMDV85;
}

public byte getHOAIMDV86() {
return HOAIMDV86;
}

public byte getHOAIMDVAL() {
return HOAIMDVAL;
}

public byte getHOAIMDVCH() {
return HOAIMDVCH;
}

public byte getHOAIMDVFM() {
return HOAIMDVFM;
}

public byte getHOAIMDVFR() {
return HOAIMDVFR;
}

public byte getHOAIMDVFS() {
return HOAIMDVFS;
}

public byte getHOAIMDVHS() {
return HOAIMDVHS;
}

public byte getHOAIMDVLL() {
return HOAIMDVLL;
}

public byte getHOAIMDVSS() {
return HOAIMDVSS;
}

public byte getHOAIMDVYS() {
return HOAIMDVYS;
}

public byte getHOAIMHO85() {
return HOAIMHO85;
}

public byte getHOAIMHO86() {
return HOAIMHO86;
}

public byte getHOAIMHOAL() {
return HOAIMHOAL;
}

public byte getHOAIMHOCH() {
return HOAIMHOCH;
}

public byte getHOAIMHOFM() {
return HOAIMHOFM;
}

public byte getHOAIMHOFR() {
return HOAIMHOFR;
}

public byte getHOAIMHOFS() {
return HOAIMHOFS;
}

public byte getHOAIMHOHS() {
return HOAIMHOHS;
}

public byte getHOAIMHOLL() {
return HOAIMHOLL;
}

public byte getHOAIMHOSS() {
return HOAIMHOSS;
}

public byte getHOAIMHOYS() {
return HOAIMHOYS;
}

public byte getHOAIMHR85() {
return HOAIMHR85;
}

public byte getHOAIMHR86() {
return HOAIMHR86;
}

public byte getHOAIMHRAL() {
return HOAIMHRAL;
}

public byte getHOAIMHRCH() {
return HOAIMHRCH;
}

public byte getHOAIMHRFM() {
return HOAIMHRFM;
}

public byte getHOAIMHRFR() {
return HOAIMHRFR;
}

public byte getHOAIMHRFS() {
return HOAIMHRFS;
}

public byte getHOAIMHRHS() {
return HOAIMHRHS;
}

public byte getHOAIMHRLL() {
return HOAIMHRLL;
}

public byte getHOAIMHRSS() {
return HOAIMHRSS;
}

public byte getHOAIMHRYS() {
return HOAIMHRYS;
}

public byte getHOAIMKM85() {
return HOAIMKM85;
}

public byte getHOAIMKM86() {
return HOAIMKM86;
}

public byte getHOAIMKMAL() {
return HOAIMKMAL;
}

public byte getHOAIMKMCH() {
return HOAIMKMCH;
}

public byte getHOAIMKMFM() {
return HOAIMKMFM;
}

public byte getHOAIMKMFR() {
return HOAIMKMFR;
}

public byte getHOAIMKMFS() {
return HOAIMKMFS;
}

public byte getHOAIMKMHS() {
return HOAIMKMHS;
}

public byte getHOAIMKMLL() {
return HOAIMKMLL;
}

public byte getHOAIMKMSS() {
return HOAIMKMSS;
}

public byte getHOAIMKMYS() {
return HOAIMKMYS;
}

public byte getHOAIMLI85() {
return HOAIMLI85;
}

public byte getHOAIMLI86() {
return HOAIMLI86;
}

public byte getHOAIMLIAL() {
return HOAIMLIAL;
}

public byte getHOAIMLICH() {
return HOAIMLICH;
}

public byte getHOAIMLIFM() {
return HOAIMLIFM;
}

public byte getHOAIMLIFR() {
return HOAIMLIFR;
}

public byte getHOAIMLIFS() {
return HOAIMLIFS;
}

public byte getHOAIMLIHS() {
return HOAIMLIHS;
}

public byte getHOAIMLILL() {
return HOAIMLILL;
}

public byte getHOAIMLISS() {
return HOAIMLISS;
}

public byte getHOAIMLIYS() {
return HOAIMLIYS;
}

public byte getHOAIMOT85() {
return HOAIMOT85;
}

public byte getHOAIMOT86() {
return HOAIMOT86;
}

public byte getHOAIMOTAL() {
return HOAIMOTAL;
}

public byte getHOAIMOTCH() {
return HOAIMOTCH;
}

public byte getHOAIMOTFM() {
return HOAIMOTFM;
}

public byte getHOAIMOTFR() {
return HOAIMOTFR;
}

public byte getHOAIMOTFS() {
return HOAIMOTFS;
}

public byte getHOAIMOTHS() {
return HOAIMOTHS;
}

public byte getHOAIMOTLL() {
return HOAIMOTLL;
}

public byte getHOAIMOTSS() {
return HOAIMOTSS;
}

public byte getHOAIMOTYS() {
return HOAIMOTYS;
}

public byte getHOAIMRS85() {
return HOAIMRS85;
}

public byte getHOAIMRS86() {
return HOAIMRS86;
}

public byte getHOAIMRSAL() {
return HOAIMRSAL;
}

public byte getHOAIMRSCH() {
return HOAIMRSCH;
}

public byte getHOAIMRSFM() {
return HOAIMRSFM;
}

public byte getHOAIMRSFR() {
return HOAIMRSFR;
}

public byte getHOAIMRSFS() {
return HOAIMRSFS;
}

public byte getHOAIMRSHS() {
return HOAIMRSHS;
}

public byte getHOAIMRSLL() {
return HOAIMRSLL;
}

public byte getHOAIMRSSS() {
return HOAIMRSSS;
}

public byte getHOAIMRSYS() {
return HOAIMRSYS;
}

public byte getHOAIMSH85() {
return HOAIMSH85;
}

public byte getHOAIMSH86() {
return HOAIMSH86;
}

public byte getHOAIMSHAL() {
return HOAIMSHAL;
}

public byte getHOAIMSHCH() {
return HOAIMSHCH;
}

public byte getHOAIMSHFM() {
return HOAIMSHFM;
}

public byte getHOAIMSHFR() {
return HOAIMSHFR;
}

public byte getHOAIMSHFS() {
return HOAIMSHFS;
}

public byte getHOAIMSHHS() {
return HOAIMSHHS;
}

public byte getHOAIMSHLL() {
return HOAIMSHLL;
}

public byte getHOAIMSHSS() {
return HOAIMSHSS;
}

public byte getHOAIMSHYS() {
return HOAIMSHYS;
}

public byte getHOAIMWD85() {
return HOAIMWD85;
}

public byte getHOAIMWD86() {
return HOAIMWD86;
}

public byte getHOAIMWDAL() {
return HOAIMWDAL;
}

public byte getHOAIMWDHS() {
return HOAIMWDHS;
}

public byte getHOAIMWDLL() {
return HOAIMWDLL;
}

public byte getHOAIMWDSS() {
return HOAIMWDSS;
}

public byte getHOAIMWDYS() {
return HOAIMWDYS;
}

public byte getHOAIMWS85() {
return HOAIMWS85;
}

public byte getHOAIMWS86() {
return HOAIMWS86;
}

public byte getHOAIMWSAL() {
return HOAIMWSAL;
}

public byte getHOAIMWSCH() {
return HOAIMWSCH;
}

public byte getHOAIMWSFM() {
return HOAIMWSFM;
}

public byte getHOAIMWSFR() {
return HOAIMWSFR;
}

public byte getHOAIMWSFS() {
return HOAIMWSFS;
}

public byte getHOAIMWSHS() {
return HOAIMWSHS;
}

public byte getHOAIMWSLL() {
return HOAIMWSLL;
}

public byte getHOAIMWSSS() {
return HOAIMWSSS;
}

public byte getHOAIMWSYS() {
return HOAIMWSYS;
}

public byte getHOAIOT95() {
return HOAIOT95;
}

public byte getHOAIOTAL() {
return HOAIOTAL;
}

public byte getHOAIOTHS() {
return HOAIOTHS;
}

public byte getHOAIOTLL() {
return HOAIOTLL;
}

public byte getHOAIOTSS() {
return HOAIOTSS;
}

public byte getHOAIOTYS() {
return HOAIOTYS;
}

public byte getHOAIRS95() {
return HOAIRS95;
}

public byte getHOAIRSAL() {
return HOAIRSAL;
}

public byte getHOAIRSHS() {
return HOAIRSHS;
}

public byte getHOAIRSLL() {
return HOAIRSLL;
}

public byte getHOAIRSSS() {
return HOAIRSSS;
}

public byte getHOAIRSYS() {
return HOAIRSYS;
}

public byte getHOAISH95() {
return HOAISH95;
}

public byte getHOAISHAL() {
return HOAISHAL;
}

public byte getHOAISHHS() {
return HOAISHHS;
}

public byte getHOAISHLL() {
return HOAISHLL;
}

public byte getHOAISHSS() {
return HOAISHSS;
}

public byte getHOAISHYS() {
return HOAISHYS;
}

public byte getHOAIWD95() {
return HOAIWD95;
}

public byte getHOAIWDAL() {
return HOAIWDAL;
}

public byte getHOAIWDHS() {
return HOAIWDHS;
}

public byte getHOAIWDLL() {
return HOAIWDLL;
}

public byte getHOAIWDSS() {
return HOAIWDSS;
}

public byte getHOAIWDYS() {
return HOAIWDYS;
}

public byte getHOAIWS95() {
return HOAIWS95;
}

public byte getHOAIWSAL() {
return HOAIWSAL;
}

public byte getHOAIWSHS() {
return HOAIWSHS;
}

public byte getHOAIWSLL() {
return HOAIWSLL;
}

public byte getHOAIWSSS() {
return HOAIWSSS;
}

public byte getHOAIWSYS() {
return HOAIWSYS;
}

public byte getHOASK() {
return HOASK;
}

public boolean getHOB10FE() {
return HOB10FE;
}

public boolean getHOB10FL() {
return HOB10FL;
}

public boolean getHOB10FR() {
return HOB10FR;
}

public boolean getHOB10FU() {
return HOB10FU;
}

public boolean getHOB10ME() {
return HOB10ME;
}

public boolean getHOB10ML() {
return HOB10ML;
}

public boolean getHOB10MR() {
return HOB10MR;
}

public boolean getHOB10MU() {
return HOB10MU;
}

public boolean getHOB10OE() {
return HOB10OE;
}

public boolean getHOB10OL() {
return HOB10OL;
}

public boolean getHOB10OR() {
return HOB10OR;
}

public boolean getHOB10OU() {
return HOB10OU;
}

public boolean getHOB10WE() {
return HOB10WE;
}

public boolean getHOB10WL() {
return HOB10WL;
}

public boolean getHOB10WR() {
return HOB10WR;
}

public boolean getHOB10WU() {
return HOB10WU;
}

public boolean getHOB10YE() {
return HOB10YE;
}

public boolean getHOB10YL() {
return HOB10YL;
}

public boolean getHOB10YR() {
return HOB10YR;
}

public boolean getHOB10YU() {
return HOB10YU;
}

public boolean getHOB11FE() {
return HOB11FE;
}

public boolean getHOB11FL() {
return HOB11FL;
}

public boolean getHOB11FR() {
return HOB11FR;
}

public boolean getHOB11FU() {
return HOB11FU;
}

public boolean getHOB11ME() {
return HOB11ME;
}

public boolean getHOB11ML() {
return HOB11ML;
}

public boolean getHOB11MR() {
return HOB11MR;
}

public boolean getHOB11MU() {
return HOB11MU;
}

public boolean getHOB11OE() {
return HOB11OE;
}

public boolean getHOB11OL() {
return HOB11OL;
}

public boolean getHOB11OR() {
return HOB11OR;
}

public boolean getHOB11OU() {
return HOB11OU;
}

public boolean getHOB11WE() {
return HOB11WE;
}

public boolean getHOB11WL() {
return HOB11WL;
}

public boolean getHOB11WR() {
return HOB11WR;
}

public boolean getHOB11WU() {
return HOB11WU;
}

public boolean getHOB11YE() {
return HOB11YE;
}

public boolean getHOB11YL() {
return HOB11YL;
}

public boolean getHOB11YR() {
return HOB11YR;
}

public boolean getHOB11YU() {
return HOB11YU;
}

public boolean getHOB12FE() {
return HOB12FE;
}

public boolean getHOB12FL() {
return HOB12FL;
}

public boolean getHOB12FR() {
return HOB12FR;
}

public boolean getHOB12FU() {
return HOB12FU;
}

public boolean getHOB12ME() {
return HOB12ME;
}

public boolean getHOB12ML() {
return HOB12ML;
}

public boolean getHOB12MR() {
return HOB12MR;
}

public boolean getHOB12MU() {
return HOB12MU;
}

public boolean getHOB12OE() {
return HOB12OE;
}

public boolean getHOB12OL() {
return HOB12OL;
}

public boolean getHOB12OR() {
return HOB12OR;
}

public boolean getHOB12OU() {
return HOB12OU;
}

public boolean getHOB12WE() {
return HOB12WE;
}

public boolean getHOB12WL() {
return HOB12WL;
}

public boolean getHOB12WR() {
return HOB12WR;
}

public boolean getHOB12WU() {
return HOB12WU;
}

public boolean getHOB12YE() {
return HOB12YE;
}

public boolean getHOB12YL() {
return HOB12YL;
}

public boolean getHOB12YR() {
return HOB12YR;
}

public boolean getHOB12YU() {
return HOB12YU;
}

public boolean getHOB13FE() {
return HOB13FE;
}

public boolean getHOB13FL() {
return HOB13FL;
}

public boolean getHOB13FR() {
return HOB13FR;
}

public boolean getHOB13FU() {
return HOB13FU;
}

public boolean getHOB13ME() {
return HOB13ME;
}

public boolean getHOB13ML() {
return HOB13ML;
}

public boolean getHOB13MR() {
return HOB13MR;
}

public boolean getHOB13MU() {
return HOB13MU;
}

public boolean getHOB13OE() {
return HOB13OE;
}

public boolean getHOB13OL() {
return HOB13OL;
}

public boolean getHOB13OR() {
return HOB13OR;
}

public boolean getHOB13OU() {
return HOB13OU;
}

public boolean getHOB13WE() {
return HOB13WE;
}

public boolean getHOB13WL() {
return HOB13WL;
}

public boolean getHOB13WR() {
return HOB13WR;
}

public boolean getHOB13WU() {
return HOB13WU;
}

public boolean getHOB13YE() {
return HOB13YE;
}

public boolean getHOB13YL() {
return HOB13YL;
}

public boolean getHOB13YR() {
return HOB13YR;
}

public boolean getHOB13YU() {
return HOB13YU;
}

public boolean getHOB14FE() {
return HOB14FE;
}

public boolean getHOB14FL() {
return HOB14FL;
}

public boolean getHOB14FR() {
return HOB14FR;
}

public boolean getHOB14FU() {
return HOB14FU;
}

public boolean getHOB14ME() {
return HOB14ME;
}

public boolean getHOB14ML() {
return HOB14ML;
}

public boolean getHOB14MR() {
return HOB14MR;
}

public boolean getHOB14MU() {
return HOB14MU;
}

public boolean getHOB14OE() {
return HOB14OE;
}

public boolean getHOB14OL() {
return HOB14OL;
}

public boolean getHOB14OR() {
return HOB14OR;
}

public boolean getHOB14OU() {
return HOB14OU;
}

public boolean getHOB14WE() {
return HOB14WE;
}

public boolean getHOB14WL() {
return HOB14WL;
}

public boolean getHOB14WR() {
return HOB14WR;
}

public boolean getHOB14WU() {
return HOB14WU;
}

public boolean getHOB14YE() {
return HOB14YE;
}

public boolean getHOB14YL() {
return HOB14YL;
}

public boolean getHOB14YR() {
return HOB14YR;
}

public boolean getHOB14YU() {
return HOB14YU;
}

public boolean getHOB15FE() {
return HOB15FE;
}

public boolean getHOB15FL() {
return HOB15FL;
}

public boolean getHOB15FR() {
return HOB15FR;
}

public boolean getHOB15FU() {
return HOB15FU;
}

public boolean getHOB15ME() {
return HOB15ME;
}

public boolean getHOB15ML() {
return HOB15ML;
}

public boolean getHOB15MR() {
return HOB15MR;
}

public boolean getHOB15MU() {
return HOB15MU;
}

public boolean getHOB15OE() {
return HOB15OE;
}

public boolean getHOB15OL() {
return HOB15OL;
}

public boolean getHOB15OR() {
return HOB15OR;
}

public boolean getHOB15OU() {
return HOB15OU;
}

public boolean getHOB15WE() {
return HOB15WE;
}

public boolean getHOB15WL() {
return HOB15WL;
}

public boolean getHOB15WR() {
return HOB15WR;
}

public boolean getHOB15WU() {
return HOB15WU;
}

public boolean getHOB15YE() {
return HOB15YE;
}

public boolean getHOB15YL() {
return HOB15YL;
}

public boolean getHOB15YR() {
return HOB15YR;
}

public boolean getHOB15YU() {
return HOB15YU;
}

public boolean getHOB16FE() {
return HOB16FE;
}

public boolean getHOB16FL() {
return HOB16FL;
}

public boolean getHOB16FR() {
return HOB16FR;
}

public boolean getHOB16FU() {
return HOB16FU;
}

public boolean getHOB16ME() {
return HOB16ME;
}

public boolean getHOB16ML() {
return HOB16ML;
}

public boolean getHOB16MR() {
return HOB16MR;
}

public boolean getHOB16MU() {
return HOB16MU;
}

public boolean getHOB16OE() {
return HOB16OE;
}

public boolean getHOB16OL() {
return HOB16OL;
}

public boolean getHOB16OR() {
return HOB16OR;
}

public boolean getHOB16OU() {
return HOB16OU;
}

public boolean getHOB16WE() {
return HOB16WE;
}

public boolean getHOB16WL() {
return HOB16WL;
}

public boolean getHOB16WR() {
return HOB16WR;
}

public boolean getHOB16WU() {
return HOB16WU;
}

public boolean getHOB16YE() {
return HOB16YE;
}

public boolean getHOB16YL() {
return HOB16YL;
}

public boolean getHOB16YR() {
return HOB16YR;
}

public boolean getHOB16YU() {
return HOB16YU;
}

public boolean getHOBA10() {
return HOBA10;
}

public boolean getHOBA11() {
return HOBA11;
}

public boolean getHOBA12() {
return HOBA12;
}

public boolean getHOBA13() {
return HOBA13;
}

public boolean getHOBA14() {
return HOBA14;
}

public boolean getHOBA15() {
return HOBA15;
}

public boolean getHOBA16() {
return HOBA16;
}

public byte getHOBA2FE() {
return HOBA2FE;
}

public byte getHOBA2FL() {
return HOBA2FL;
}

public byte getHOBA2FR() {
return HOBA2FR;
}

public byte getHOBA2FU() {
return HOBA2FU;
}

public byte getHOBA2ME() {
return HOBA2ME;
}

public byte getHOBA2ML() {
return HOBA2ML;
}

public byte getHOBA2MR() {
return HOBA2MR;
}

public byte getHOBA2MU() {
return HOBA2MU;
}

public byte getHOBA2OE() {
return HOBA2OE;
}

public short getHOBA2OL() {
return HOBA2OL;
}

public byte getHOBA2OR() {
return HOBA2OR;
}

public short getHOBA2OU() {
return HOBA2OU;
}

public byte getHOBA2WE() {
return HOBA2WE;
}

public byte getHOBA2WL() {
return HOBA2WL;
}

public byte getHOBA2WR() {
return HOBA2WR;
}

public byte getHOBA2WU() {
return HOBA2WU;
}

public byte getHOBA2YE() {
return HOBA2YE;
}

public byte getHOBA2YL() {
return HOBA2YL;
}

public byte getHOBA2YR() {
return HOBA2YR;
}

public byte getHOBA2YU() {
return HOBA2YU;
}

public byte getHOBA3FE() {
return HOBA3FE;
}

public byte getHOBA3FL() {
return HOBA3FL;
}

public byte getHOBA3FR() {
return HOBA3FR;
}

public byte getHOBA3FU() {
return HOBA3FU;
}

public byte getHOBA3ME() {
return HOBA3ME;
}

public short getHOBA3ML() {
return HOBA3ML;
}

public byte getHOBA3MR() {
return HOBA3MR;
}

public short getHOBA3MU() {
return HOBA3MU;
}

public byte getHOBA3OE() {
return HOBA3OE;
}

public short getHOBA3OL() {
return HOBA3OL;
}

public byte getHOBA3OR() {
return HOBA3OR;
}

public short getHOBA3OU() {
return HOBA3OU;
}

public byte getHOBA3WE() {
return HOBA3WE;
}

public byte getHOBA3WL() {
return HOBA3WL;
}

public byte getHOBA3WR() {
return HOBA3WR;
}

public short getHOBA3WU() {
return HOBA3WU;
}

public byte getHOBA3YE() {
return HOBA3YE;
}

public byte getHOBA3YL() {
return HOBA3YL;
}

public byte getHOBA3YR() {
return HOBA3YR;
}

public byte getHOBA3YU() {
return HOBA3YU;
}

public byte getHOBA4FE() {
return HOBA4FE;
}

public byte getHOBA4FL() {
return HOBA4FL;
}

public byte getHOBA4FR() {
return HOBA4FR;
}

public byte getHOBA4FU() {
return HOBA4FU;
}

public byte getHOBA4ME() {
return HOBA4ME;
}

public short getHOBA4ML() {
return HOBA4ML;
}

public byte getHOBA4MR() {
return HOBA4MR;
}

public short getHOBA4MU() {
return HOBA4MU;
}

public byte getHOBA4OE() {
return HOBA4OE;
}

public short getHOBA4OL() {
return HOBA4OL;
}

public byte getHOBA4OR() {
return HOBA4OR;
}

public short getHOBA4OU() {
return HOBA4OU;
}

public byte getHOBA4WE() {
return HOBA4WE;
}

public short getHOBA4WL() {
return HOBA4WL;
}

public byte getHOBA4WR() {
return HOBA4WR;
}

public short getHOBA4WU() {
return HOBA4WU;
}

public byte getHOBA4YE() {
return HOBA4YE;
}

public byte getHOBA4YL() {
return HOBA4YL;
}

public byte getHOBA4YR() {
return HOBA4YR;
}

public byte getHOBA4YU() {
return HOBA4YU;
}

public byte getHOBA5FE() {
return HOBA5FE;
}

public byte getHOBA5FL() {
return HOBA5FL;
}

public byte getHOBA5FR() {
return HOBA5FR;
}

public byte getHOBA5FU() {
return HOBA5FU;
}

public byte getHOBA5ME() {
return HOBA5ME;
}

public short getHOBA5ML() {
return HOBA5ML;
}

public byte getHOBA5MR() {
return HOBA5MR;
}

public short getHOBA5MU() {
return HOBA5MU;
}

public byte getHOBA5OE() {
return HOBA5OE;
}

public byte getHOBA5OL() {
return HOBA5OL;
}

public byte getHOBA5OR() {
return HOBA5OR;
}

public byte getHOBA5OU() {
return HOBA5OU;
}

public byte getHOBA5WE() {
return HOBA5WE;
}

public byte getHOBA5WL() {
return HOBA5WL;
}

public byte getHOBA5WR() {
return HOBA5WR;
}

public byte getHOBA5WU() {
return HOBA5WU;
}

public byte getHOBA5YE() {
return HOBA5YE;
}

public byte getHOBA5YL() {
return HOBA5YL;
}

public byte getHOBA5YR() {
return HOBA5YR;
}

public byte getHOBA5YU() {
return HOBA5YU;
}

public byte getHOBA6FE() {
return HOBA6FE;
}

public byte getHOBA6FL() {
return HOBA6FL;
}

public byte getHOBA6FR() {
return HOBA6FR;
}

public byte getHOBA6FU() {
return HOBA6FU;
}

public byte getHOBA6ME() {
return HOBA6ME;
}

public byte getHOBA6ML() {
return HOBA6ML;
}

public byte getHOBA6MR() {
return HOBA6MR;
}

public byte getHOBA6MU() {
return HOBA6MU;
}

public byte getHOBA6OE() {
return HOBA6OE;
}

public byte getHOBA6OL() {
return HOBA6OL;
}

public byte getHOBA6OR() {
return HOBA6OR;
}

public byte getHOBA6OU() {
return HOBA6OU;
}

public byte getHOBA6WE() {
return HOBA6WE;
}

public byte getHOBA6WL() {
return HOBA6WL;
}

public byte getHOBA6WR() {
return HOBA6WR;
}

public byte getHOBA6WU() {
return HOBA6WU;
}

public byte getHOBA6YE() {
return HOBA6YE;
}

public byte getHOBA6YL() {
return HOBA6YL;
}

public byte getHOBA6YR() {
return HOBA6YR;
}

public byte getHOBA6YU() {
return HOBA6YU;
}

public byte getHOBA7FE() {
return HOBA7FE;
}

public byte getHOBA7FL() {
return HOBA7FL;
}

public byte getHOBA7FR() {
return HOBA7FR;
}

public byte getHOBA7FU() {
return HOBA7FU;
}

public byte getHOBA7ME() {
return HOBA7ME;
}

public byte getHOBA7ML() {
return HOBA7ML;
}

public byte getHOBA7MR() {
return HOBA7MR;
}

public byte getHOBA7MU() {
return HOBA7MU;
}

public byte getHOBA7OE() {
return HOBA7OE;
}

public byte getHOBA7OL() {
return HOBA7OL;
}

public byte getHOBA7OR() {
return HOBA7OR;
}

public byte getHOBA7OU() {
return HOBA7OU;
}

public byte getHOBA7WE() {
return HOBA7WE;
}

public byte getHOBA7WL() {
return HOBA7WL;
}

public byte getHOBA7WR() {
return HOBA7WR;
}

public byte getHOBA7WU() {
return HOBA7WU;
}

public byte getHOBA7YE() {
return HOBA7YE;
}

public byte getHOBA7YL() {
return HOBA7YL;
}

public byte getHOBA7YR() {
return HOBA7YR;
}

public byte getHOBA7YU() {
return HOBA7YU;
}

public byte getHOBA8FE() {
return HOBA8FE;
}

public byte getHOBA8FL() {
return HOBA8FL;
}

public byte getHOBA8FR() {
return HOBA8FR;
}

public byte getHOBA8FU() {
return HOBA8FU;
}

public byte getHOBA8ME() {
return HOBA8ME;
}

public byte getHOBA8ML() {
return HOBA8ML;
}

public byte getHOBA8MR() {
return HOBA8MR;
}

public byte getHOBA8MU() {
return HOBA8MU;
}

public byte getHOBA8OE() {
return HOBA8OE;
}

public byte getHOBA8OL() {
return HOBA8OL;
}

public byte getHOBA8OR() {
return HOBA8OR;
}

public byte getHOBA8OU() {
return HOBA8OU;
}

public byte getHOBA8WE() {
return HOBA8WE;
}

public byte getHOBA8WL() {
return HOBA8WL;
}

public byte getHOBA8WR() {
return HOBA8WR;
}

public byte getHOBA8WU() {
return HOBA8WU;
}

public byte getHOBA8YE() {
return HOBA8YE;
}

public byte getHOBA8YL() {
return HOBA8YL;
}

public byte getHOBA8YR() {
return HOBA8YR;
}

public byte getHOBA8YU() {
return HOBA8YU;
}

public byte getHOBA9FE() {
return HOBA9FE;
}

public byte getHOBA9FL() {
return HOBA9FL;
}

public byte getHOBA9FR() {
return HOBA9FR;
}

public byte getHOBA9FU() {
return HOBA9FU;
}

public byte getHOBA9ME() {
return HOBA9ME;
}

public byte getHOBA9ML() {
return HOBA9ML;
}

public byte getHOBA9MR() {
return HOBA9MR;
}

public byte getHOBA9MU() {
return HOBA9MU;
}

public byte getHOBA9OE() {
return HOBA9OE;
}

public byte getHOBA9OL() {
return HOBA9OL;
}

public byte getHOBA9OR() {
return HOBA9OR;
}

public byte getHOBA9OU() {
return HOBA9OU;
}

public byte getHOBA9WE() {
return HOBA9WE;
}

public byte getHOBA9WL() {
return HOBA9WL;
}

public byte getHOBA9WR() {
return HOBA9WR;
}

public byte getHOBA9WU() {
return HOBA9WU;
}

public byte getHOBA9YE() {
return HOBA9YE;
}

public byte getHOBA9YL() {
return HOBA9YL;
}

public byte getHOBA9YR() {
return HOBA9YR;
}

public byte getHOBA9YU() {
return HOBA9YU;
}

public byte getHOBAFE() {
return HOBAFE;
}

public byte getHOBAFL() {
return HOBAFL;
}

public byte getHOBAFR() {
return HOBAFR;
}

public byte getHOBAFU() {
return HOBAFU;
}

public byte getHOBAME() {
return HOBAME;
}

public short getHOBAML() {
return HOBAML;
}

public byte getHOBAMR() {
return HOBAMR;
}

public short getHOBAMU() {
return HOBAMU;
}

public byte getHOBAOE() {
return HOBAOE;
}

public short getHOBAOL() {
return HOBAOL;
}

public byte getHOBAOR() {
return HOBAOR;
}

public short getHOBAOU() {
return HOBAOU;
}

public boolean getHOBAS10() {
return HOBAS10;
}

public boolean getHOBAS11() {
return HOBAS11;
}

public boolean getHOBAS12() {
return HOBAS12;
}

public boolean getHOBAS13() {
return HOBAS13;
}

public boolean getHOBAS14() {
return HOBAS14;
}

public boolean getHOBAS15() {
return HOBAS15;
}

public boolean getHOBAS16() {
return HOBAS16;
}

public byte getHOBAWE() {
return HOBAWE;
}

public short getHOBAWL() {
return HOBAWL;
}

public byte getHOBAWR() {
return HOBAWR;
}

public byte getHOBAWU() {
return HOBAWU;
}

public byte getHOBAYE() {
return HOBAYE;
}

public byte getHOBAYL() {
return HOBAYL;
}

public byte getHOBAYR() {
return HOBAYR;
}

public short getHOBAYU() {
return HOBAYU;
}

public byte getHOBB() {
return HOBB;
}

public boolean getHOBP10() {
return HOBP10;
}

public boolean getHOBP11() {
return HOBP11;
}

public boolean getHOBP12() {
return HOBP12;
}

public boolean getHOBP13() {
return HOBP13;
}

public boolean getHOBP14() {
return HOBP14;
}

public boolean getHOBP15() {
return HOBP15;
}

public boolean getHOBP16() {
return HOBP16;
}

public byte getHOCC01() {
return HOCC01;
}

public byte getHOCC02() {
return HOCC02;
}

public byte getHOCC03() {
return HOCC03;
}

public byte getHOCC04() {
return HOCC04;
}

public byte getHOCC05() {
return HOCC05;
}

public byte getHOCC06() {
return HOCC06;
}

public byte getHOCC07() {
return HOCC07;
}

public byte getHOCC08() {
return HOCC08;
}

public byte getHOCC09() {
return HOCC09;
}

public byte getHOCC10() {
return HOCC10;
}

public byte getHOCC11() {
return HOCC11;
}

public byte getHOCC12() {
return HOCC12;
}

public byte getHOCC13() {
return HOCC13;
}

public byte getHOCC14() {
return HOCC14;
}

public byte getHOCC15() {
return HOCC15;
}

public byte getHOCC16() {
return HOCC16;
}

public byte getHOCC17() {
return HOCC17;
}

public byte getHOCC18() {
return HOCC18;
}

public byte getHOCC19() {
return HOCC19;
}

public byte getHOCC20() {
return HOCC20;
}

public byte getHOCENP() {
return HOCENP;
}

public byte getHOCHM() {
return HOCHM;
}

public short getHOCL() {
return HOCL;
}

public byte getHOCLE() {
return HOCLE;
}

public short getHOCLL() {
return HOCLL;
}

public byte getHOCLR() {
return HOCLR;
}

public short getHOCLU() {
return HOCLU;
}

public byte getHOCTA() {
return HOCTA;
}

public byte getHOCTB() {
return HOCTB;
}

public byte getHOCTBP() {
return HOCTBP;
}

public byte getHOCTN() {
return HOCTN;
}

public byte getHODISC() {
return HODISC;
}

public byte getHOEB() {
return HOEB;
}

public short getHOEBMS() {
return HOEBMS;
}

public byte getHOEBMSE() {
return HOEBMSE;
}

public byte getHOEBMSL() {
return HOEBMSL;
}

public byte getHOEBMSR() {
return HOEBMSR;
}

public byte getHOEBMSU() {
return HOEBMSU;
}

public short getHOEBMW() {
return HOEBMW;
}

public byte getHOEBMWE() {
return HOEBMWE;
}

public byte getHOEBMWL() {
return HOEBMWL;
}

public byte getHOEBMWR() {
return HOEBMWR;
}

public byte getHOEBMWU() {
return HOEBMWU;
}

public short getHOEBQS() {
return HOEBQS;
}

public byte getHOEBQSE() {
return HOEBQSE;
}

public short getHOEBQSL() {
return HOEBQSL;
}

public byte getHOEBQSR() {
return HOEBQSR;
}

public short getHOEBQSU() {
return HOEBQSU;
}

public short getHOEBQW() {
return HOEBQW;
}

public byte getHOEBQWE() {
return HOEBQWE;
}

public short getHOEBQWL() {
return HOEBQWL;
}

public byte getHOEBQWR() {
return HOEBQWR;
}

public short getHOEBQWU() {
return HOEBQWU;
}

public byte getHOED() {
return HOED;
}

public short getHOEDM() {
return HOEDM;
}

public byte getHOEDME() {
return HOEDME;
}

public byte getHOEDML() {
return HOEDML;
}

public byte getHOEDMR() {
return HOEDMR;
}

public byte getHOEDMU() {
return HOEDMU;
}

public short getHOEDQ() {
return HOEDQ;
}

public byte getHOEDQE() {
return HOEDQE;
}

public short getHOEDQL() {
return HOEDQL;
}

public byte getHOEDQR() {
return HOEDQR;
}

public short getHOEDQU() {
return HOEDQU;
}

public byte getHOEOS() {
return HOEOS;
}

public byte getHOEOSE() {
return HOEOSE;
}

public byte getHOEOSL() {
return HOEOSL;
}

public byte getHOEOSR() {
return HOEOSR;
}

public byte getHOEOSU() {
return HOEOSU;
}

public byte getHOEOW() {
return HOEOW;
}

public byte getHOEOWE() {
return HOEOWE;
}

public byte getHOEOWL() {
return HOEOWL;
}

public byte getHOEOWR() {
return HOEOWR;
}

public byte getHOEOWU() {
return HOEOWU;
}

public byte getHOEPAY() {
return HOEPAY;
}

public byte getHOEPS() {
return HOEPS;
}

public byte getHOEPSE() {
return HOEPSE;
}

public byte getHOEPSL() {
return HOEPSL;
}

public byte getHOEPSR() {
return HOEPSR;
}

public byte getHOEPSU() {
return HOEPSU;
}

public byte getHOEPW() {
return HOEPW;
}

public byte getHOEPWE() {
return HOEPWE;
}

public byte getHOEPWL() {
return HOEPWL;
}

public byte getHOEPWR() {
return HOEPWR;
}

public byte getHOEPWU() {
return HOEPWU;
}

public byte getHOFB() {
return HOFB;
}

public short getHOFBMS() {
return HOFBMS;
}

public byte getHOFBMSE() {
return HOFBMSE;
}

public byte getHOFBMSL() {
return HOFBMSL;
}

public byte getHOFBMSR() {
return HOFBMSR;
}

public byte getHOFBMSU() {
return HOFBMSU;
}

public short getHOFBMW() {
return HOFBMW;
}

public byte getHOFBMWE() {
return HOFBMWE;
}

public byte getHOFBMWL() {
return HOFBMWL;
}

public byte getHOFBMWR() {
return HOFBMWR;
}

public byte getHOFBMWU() {
return HOFBMWU;
}

public short getHOFBQS() {
return HOFBQS;
}

public byte getHOFBQSE() {
return HOFBQSE;
}

public short getHOFBQSL() {
return HOFBQSL;
}

public byte getHOFBQSR() {
return HOFBQSR;
}

public short getHOFBQSU() {
return HOFBQSU;
}

public short getHOFBQW() {
return HOFBQW;
}

public byte getHOFBQWE() {
return HOFBQWE;
}

public short getHOFBQWL() {
return HOFBQWL;
}

public byte getHOFBQWR() {
return HOFBQWR;
}

public short getHOFBQWU() {
return HOFBQWU;
}

public byte getHOFCS() {
return HOFCS;
}

public byte getHOFCSE() {
return HOFCSE;
}

public byte getHOFCSL() {
return HOFCSL;
}

public byte getHOFCSR() {
return HOFCSR;
}

public byte getHOFCSU() {
return HOFCSU;
}

public byte getHOFCW() {
return HOFCW;
}

public byte getHOFCWE() {
return HOFCWE;
}

public byte getHOFCWL() {
return HOFCWL;
}

public byte getHOFCWR() {
return HOFCWR;
}

public byte getHOFCWU() {
return HOFCWU;
}

public byte getHOFD() {
return HOFD;
}

public short getHOFDM() {
return HOFDM;
}

public byte getHOFDME() {
return HOFDME;
}

public byte getHOFDML() {
return HOFDML;
}

public byte getHOFDMR() {
return HOFDMR;
}

public byte getHOFDMU() {
return HOFDMU;
}

public short getHOFDQ() {
return HOFDQ;
}

public byte getHOFDQE() {
return HOFDQE;
}

public short getHOFDQL() {
return HOFDQL;
}

public byte getHOFDQR() {
return HOFDQR;
}

public short getHOFDQU() {
return HOFDQU;
}

public byte getHOFOIS() {
return HOFOIS;
}

public byte getHOFOISE() {
return HOFOISE;
}

public byte getHOFOISL() {
return HOFOISL;
}

public byte getHOFOISR() {
return HOFOISR;
}

public byte getHOFOISU() {
return HOFOISU;
}

public byte getHOFOIW() {
return HOFOIW;
}

public byte getHOFOIWE() {
return HOFOIWE;
}

public byte getHOFOIWL() {
return HOFOIWL;
}

public byte getHOFOIWR() {
return HOFOIWR;
}

public byte getHOFOIWU() {
return HOFOIWU;
}

public byte getHOFOODE() {
return HOFOODE;
}

public short getHOFOODL() {
return HOFOODL;
}

public byte getHOFOODR() {
return HOFOODR;
}

public short getHOFOODU() {
return HOFOODU;
}

public byte getHOFOS() {
return HOFOS;
}

public byte getHOFOSE() {
return HOFOSE;
}

public byte getHOFOSL() {
return HOFOSL;
}

public byte getHOFOSR() {
return HOFOSR;
}

public byte getHOFOSU() {
return HOFOSU;
}

public byte getHOFOW() {
return HOFOW;
}

public byte getHOFOWE() {
return HOFOWE;
}

public byte getHOFOWL() {
return HOFOWL;
}

public byte getHOFOWR() {
return HOFOWR;
}

public byte getHOFOWU() {
return HOFOWU;
}

public byte getHOFPAY() {
return HOFPAY;
}

public byte getHOFPGS() {
return HOFPGS;
}

public byte getHOFPGSE() {
return HOFPGSE;
}

public byte getHOFPGSL() {
return HOFPGSL;
}

public byte getHOFPGSR() {
return HOFPGSR;
}

public byte getHOFPGSU() {
return HOFPGSU;
}

public byte getHOFPGW() {
return HOFPGW;
}

public byte getHOFPGWE() {
return HOFPGWE;
}

public byte getHOFPGWL() {
return HOFPGWL;
}

public byte getHOFPGWR() {
return HOFPGWR;
}

public byte getHOFPGWU() {
return HOFPGWU;
}

public byte getHOFPS() {
return HOFPS;
}

public byte getHOFPSE() {
return HOFPSE;
}

public byte getHOFPSL() {
return HOFPSL;
}

public byte getHOFPSR() {
return HOFPSR;
}

public byte getHOFPSU() {
return HOFPSU;
}

public byte getHOFPW() {
return HOFPW;
}

public byte getHOFPWE() {
return HOFPWE;
}

public byte getHOFPWL() {
return HOFPWL;
}

public byte getHOFPWR() {
return HOFPWR;
}

public byte getHOFPWU() {
return HOFPWU;
}

public short getHOFSM() {
return HOFSM;
}

public byte getHOFSME() {
return HOFSME;
}

public byte getHOFSML() {
return HOFSML;
}

public byte getHOFSMR() {
return HOFSMR;
}

public byte getHOFSMU() {
return HOFSMU;
}

public byte getHOFSP() {
return HOFSP;
}

public byte getHOFSQ() {
return HOFSQ;
}

public byte getHOFSQE() {
return HOFSQE;
}

public byte getHOFSQL() {
return HOFSQL;
}

public byte getHOFSQR() {
return HOFSQR;
}

public byte getHOFSQU() {
return HOFSQU;
}

public byte getHOFSUP() {
return HOFSUP;
}

public short getHOFSW() {
return HOFSW;
}

public byte getHOFSWE() {
return HOFSWE;
}

public byte getHOFSWL() {
return HOFSWL;
}

public byte getHOFSWR() {
return HOFSWR;
}

public byte getHOFSWU() {
return HOFSWU;
}

public byte getHOFTOG() {
return HOFTOG;
}

public byte getHOFUEL95() {
return HOFUEL95;
}

public byte getHOFUELCO() {
return HOFUELCO;
}

public byte getHOFUELEL() {
return HOFUELEL;
}

public byte getHOFUELGA() {
return HOFUELGA;
}

public byte getHOFUELM85() {
return HOFUELM85;
}

public boolean getHOFUELM86() {
return HOFUELM86;
}

public byte getHOFUELOI() {
return HOFUELOI;
}

public byte getHOFUELPA() {
return HOFUELPA;
}

public byte getHOFUELWO() {
return HOFUELWO;
}

public byte getHOFUEMCO() {
return HOFUEMCO;
}

public byte getHOFUEMEL() {
return HOFUEMEL;
}

public byte getHOFUEMGA() {
return HOFUEMGA;
}

public byte getHOFUEMOI() {
return HOFUEMOI;
}

public byte getHOFUEMPA() {
return HOFUEMPA;
}

public byte getHOFUEMWO() {
return HOFUEMWO;
}

public byte getHOFWS() {
return HOFWS;
}

public byte getHOFWSE() {
return HOFWSE;
}

public byte getHOFWSL() {
return HOFWSL;
}

public byte getHOFWSR() {
return HOFWSR;
}

public byte getHOFWSU() {
return HOFWSU;
}

public byte getHOFWW() {
return HOFWW;
}

public byte getHOFWWE() {
return HOFWWE;
}

public byte getHOFWWL() {
return HOFWWL;
}

public byte getHOFWWR() {
return HOFWWR;
}

public byte getHOFWWU() {
return HOFWWU;
}

public byte getHOFXS() {
return HOFXS;
}

public byte getHOFXSE() {
return HOFXSE;
}

public byte getHOFXSL() {
return HOFXSL;
}

public byte getHOFXSR() {
return HOFXSR;
}

public byte getHOFXSU() {
return HOFXSU;
}

public byte getHOFXW() {
return HOFXW;
}

public byte getHOFXWE() {
return HOFXWE;
}

public byte getHOFXWL() {
return HOFXWL;
}

public byte getHOFXWR() {
return HOFXWR;
}

public byte getHOFXWU() {
return HOFXWU;
}

public short getHOGBMS() {
return HOGBMS;
}

public byte getHOGBMSE() {
return HOGBMSE;
}

public byte getHOGBMSL() {
return HOGBMSL;
}

public byte getHOGBMSR() {
return HOGBMSR;
}

public byte getHOGBMSU() {
return HOGBMSU;
}

public short getHOGBMW() {
return HOGBMW;
}

public byte getHOGBMWE() {
return HOGBMWE;
}

public byte getHOGBMWL() {
return HOGBMWL;
}

public byte getHOGBMWR() {
return HOGBMWR;
}

public byte getHOGBMWU() {
return HOGBMWU;
}

public byte getHOGBP() {
return HOGBP;
}

public short getHOGBQS() {
return HOGBQS;
}

public byte getHOGBQSE() {
return HOGBQSE;
}

public short getHOGBQSL() {
return HOGBQSL;
}

public byte getHOGBQSR() {
return HOGBQSR;
}

public short getHOGBQSU() {
return HOGBQSU;
}

public short getHOGBQW() {
return HOGBQW;
}

public byte getHOGBQWE() {
return HOGBQWE;
}

public short getHOGBQWL() {
return HOGBQWL;
}

public byte getHOGBQWR() {
return HOGBQWR;
}

public short getHOGBQWU() {
return HOGBQWU;
}

public byte getHOGD() {
return HOGD;
}

public short getHOGDM() {
return HOGDM;
}

public byte getHOGDME() {
return HOGDME;
}

public byte getHOGDML() {
return HOGDML;
}

public byte getHOGDMR() {
return HOGDMR;
}

public byte getHOGDMU() {
return HOGDMU;
}

public short getHOGDQ() {
return HOGDQ;
}

public byte getHOGDQE() {
return HOGDQE;
}

public short getHOGDQL() {
return HOGDQL;
}

public byte getHOGDQR() {
return HOGDQR;
}

public short getHOGDQU() {
return HOGDQU;
}

public byte getHOGOS() {
return HOGOS;
}

public byte getHOGOSE() {
return HOGOSE;
}

public byte getHOGOSL() {
return HOGOSL;
}

public byte getHOGOSR() {
return HOGOSR;
}

public byte getHOGOSU() {
return HOGOSU;
}

public byte getHOGOW() {
return HOGOW;
}

public byte getHOGOWE() {
return HOGOWE;
}

public byte getHOGOWL() {
return HOGOWL;
}

public byte getHOGOWR() {
return HOGOWR;
}

public byte getHOGOWU() {
return HOGOWU;
}

public byte getHOGPAY() {
return HOGPAY;
}

public byte getHOGPS() {
return HOGPS;
}

public byte getHOGPSE() {
return HOGPSE;
}

public byte getHOGPSL() {
return HOGPSL;
}

public byte getHOGPSR() {
return HOGPSR;
}

public byte getHOGPSU() {
return HOGPSU;
}

public byte getHOGPW() {
return HOGPW;
}

public byte getHOGPWE() {
return HOGPWE;
}

public byte getHOGPWL() {
return HOGPWL;
}

public byte getHOGPWR() {
return HOGPWR;
}

public byte getHOGPWU() {
return HOGPWU;
}

public byte getHOHAV95() {
return HOHAV95;
}

public byte getHOHAV96() {
return HOHAV96;
}

public byte getHOHAVB95() {
return HOHAVB95;
}

public byte getHOHAVB96() {
return HOHAVB96;
}

public byte getHOHAVBCD() {
return HOHAVBCD;
}

public byte getHOHAVBDR() {
return HOHAVBDR;
}

public byte getHOHAVBDT() {
return HOHAVBDT;
}

public byte getHOHAVBDV() {
return HOHAVBDV;
}

public byte getHOHAVBDW() {
return HOHAVBDW;
}

public byte getHOHAVBFF() {
return HOHAVBFF;
}

public byte getHOHAVBMO() {
return HOHAVBMO;
}

public byte getHOHAVBPC() {
return HOHAVBPC;
}

public byte getHOHAVBPH() {
return HOHAVBPH;
}

public byte getHOHAVBTV() {
return HOHAVBTV;
}

public byte getHOHAVBVR() {
return HOHAVBVR;
}

public byte getHOHAVBWD() {
return HOHAVBWD;
}

public byte getHOHAVBWM() {
return HOHAVBWM;
}

public byte getHOHAVCD() {
return HOHAVCD;
}

public byte getHOHAVDR() {
return HOHAVDR;
}

public byte getHOHAVDT() {
return HOHAVDT;
}

public byte getHOHAVDV() {
return HOHAVDV;
}

public byte getHOHAVDW() {
return HOHAVDW;
}

public byte getHOHAVFF() {
return HOHAVFF;
}

public byte getHOHAVMO() {
return HOHAVMO;
}

public byte getHOHAVPC() {
return HOHAVPC;
}

public byte getHOHAVPH() {
return HOHAVPH;
}

public byte getHOHAVTV() {
return HOHAVTV;
}

public byte getHOHAVVR() {
return HOHAVVR;
}

public byte getHOHAVWD() {
return HOHAVWD;
}

public byte getHOHAVWM() {
return HOHAVWM;
}

public byte getHOHB95() {
return HOHB95;
}

public byte getHOHB96() {
return HOHB96;
}

public short getHOHBA() {
return HOHBA;
}

public byte getHOHBAFE() {
return HOHBAFE;
}

public byte getHOHBAFL() {
return HOHBAFL;
}

public byte getHOHBAFR() {
return HOHBAFR;
}

public byte getHOHBAFU() {
return HOHBAFU;
}

public byte getHOHBAME() {
return HOHBAME;
}

public short getHOHBAML() {
return HOHBAML;
}

public byte getHOHBAMR() {
return HOHBAMR;
}

public short getHOHBAMU() {
return HOHBAMU;
}

public byte getHOHBAOE() {
return HOHBAOE;
}

public byte getHOHBAOL() {
return HOHBAOL;
}

public byte getHOHBAOR() {
return HOHBAOR;
}

public short getHOHBAOU() {
return HOHBAOU;
}

public byte getHOHBAWE() {
return HOHBAWE;
}

public byte getHOHBAWL() {
return HOHBAWL;
}

public byte getHOHBAWR() {
return HOHBAWR;
}

public byte getHOHBAWU() {
return HOHBAWU;
}

public byte getHOHBAYE() {
return HOHBAYE;
}

public byte getHOHBAYL() {
return HOHBAYL;
}

public byte getHOHBAYR() {
return HOHBAYR;
}

public byte getHOHBAYU() {
return HOHBAYU;
}

public byte getHOHBCK() {
return HOHBCK;
}

public byte getHOHBCL() {
return HOHBCL;
}

public byte getHOHBEN() {
return HOHBEN;
}

public byte getHOHBGA() {
return HOHBGA;
}

public byte getHOHBM85() {
return HOHBM85;
}

public byte getHOHBM86() {
return HOHBM86;
}

public byte getHOHBM96() {
return HOHBM96;
}

public byte getHOHBMCL() {
return HOHBMCL;
}

public byte getHOHBME() {
return HOHBME;
}

public byte getHOHBMGA() {
return HOHBMGA;
}

public byte getHOHBMME() {
return HOHBMME;
}

public byte getHOHBMSG() {
return HOHBMSG;
}

public byte getHOHBMWP() {
return HOHBMWP;
}

public byte getHOHBP() {
return HOHBP;
}

public byte getHOHBSG() {
return HOHBSG;
}

public byte getHOHBWP() {
return HOHBWP;
}

public byte getHOHEA95() {
return HOHEA95;
}

public byte getHOHEA96() {
return HOHEA96;
}

public byte getHOHEAEF() {
return HOHEAEF;
}

public byte getHOHEAGF() {
return HOHEAGF;
}

public byte getHOHEAM85() {
return HOHEAM85;
}

public byte getHOHEAM86() {
return HOHEAM86;
}

public byte getHOHEAM96() {
return HOHEAM96;
}

public byte getHOHEAMEF() {
return HOHEAMEF;
}

public byte getHOHEAMGF() {
return HOHEAMGF;
}

public byte getHOHEAMOF() {
return HOHEAMOF;
}

public byte getHOHEAMPH() {
return HOHEAMPH;
}

public byte getHOHEAOF() {
return HOHEAOF;
}

public byte getHOHEAPH() {
return HOHEAPH;
}

public short getHOHV01() {
return HOHV01;
}

public byte getHOHV01E() {
return HOHV01E;
}

public short getHOHV01L() {
return HOHV01L;
}

public byte getHOHV01R() {
return HOHV01R;
}

public short getHOHV01U() {
return HOHV01U;
}

public short getHOHV02() {
return HOHV02;
}

public byte getHOHV02E() {
return HOHV02E;
}

public short getHOHV02L() {
return HOHV02L;
}

public byte getHOHV02R() {
return HOHV02R;
}

public short getHOHV02U() {
return HOHV02U;
}

public short getHOHV03() {
return HOHV03;
}

public byte getHOHV03E() {
return HOHV03E;
}

public short getHOHV03L() {
return HOHV03L;
}

public byte getHOHV03R() {
return HOHV03R;
}

public short getHOHV03U() {
return HOHV03U;
}

public short getHOHV04() {
return HOHV04;
}

public byte getHOHV04E() {
return HOHV04E;
}

public short getHOHV04L() {
return HOHV04L;
}

public byte getHOHV04R() {
return HOHV04R;
}

public short getHOHV04U() {
return HOHV04U;
}

public short getHOHV05() {
return HOHV05;
}

public byte getHOHV05E() {
return HOHV05E;
}

public short getHOHV05L() {
return HOHV05L;
}

public byte getHOHV05R() {
return HOHV05R;
}

public short getHOHV05U() {
return HOHV05U;
}

public short getHOHV06() {
return HOHV06;
}

public byte getHOHV06E() {
return HOHV06E;
}

public short getHOHV06L() {
return HOHV06L;
}

public byte getHOHV06R() {
return HOHV06R;
}

public short getHOHV06U() {
return HOHV06U;
}

public short getHOHV07() {
return HOHV07;
}

public byte getHOHV07E() {
return HOHV07E;
}

public short getHOHV07L() {
return HOHV07L;
}

public byte getHOHV07R() {
return HOHV07R;
}

public short getHOHV07U() {
return HOHV07U;
}

public short getHOHV08() {
return HOHV08;
}

public byte getHOHV08E() {
return HOHV08E;
}

public short getHOHV08L() {
return HOHV08L;
}

public byte getHOHV08R() {
return HOHV08R;
}

public short getHOHV08U() {
return HOHV08U;
}

public short getHOHV09() {
return HOHV09;
}

public byte getHOHV09E() {
return HOHV09E;
}

public short getHOHV09L() {
return HOHV09L;
}

public byte getHOHV09R() {
return HOHV09R;
}

public short getHOHV09U() {
return HOHV09U;
}

public short getHOHV12() {
return HOHV12;
}

public byte getHOHV12E() {
return HOHV12E;
}

public short getHOHV12L() {
return HOHV12L;
}

public byte getHOHV12R() {
return HOHV12R;
}

public short getHOHV12U() {
return HOHV12U;
}

public short getHOHV13() {
return HOHV13;
}

public byte getHOHV13E() {
return HOHV13E;
}

public short getHOHV13L() {
return HOHV13L;
}

public byte getHOHV13R() {
return HOHV13R;
}

public short getHOHV13U() {
return HOHV13U;
}

public byte getHOINA95() {
return HOINA95;
}

public byte getHOINA96() {
return HOINA96;
}

public byte getHOINACL() {
return HOINACL;
}

public byte getHOINAGD() {
return HOINAGD;
}

public byte getHOINAM85() {
return HOINAM85;
}

public byte getHOINAM86() {
return HOINAM86;
}

public byte getHOINAM96() {
return HOINAM96;
}

public byte getHOINAMCL() {
return HOINAMCL;
}

public byte getHOINAME() {
return HOINAME;
}

public byte getHOINAMGD() {
return HOINAMGD;
}

public byte getHOINAMME() {
return HOINAMME;
}

public byte getHOINAMSG() {
return HOINAMSG;
}

public byte getHOINAMWP() {
return HOINAMWP;
}

public byte getHOINASG() {
return HOINASG;
}

public byte getHOINAWP() {
return HOINAWP;
}

public byte getHOINC95() {
return HOINC95;
}

public byte getHOINC96() {
return HOINC96;
}

public byte getHOINCBI() {
return HOINCBI;
}

public byte getHOINCL96() {
return HOINCL96;
}

public byte getHOINCLCO() {
return HOINCLCO;
}

public byte getHOINCLGA() {
return HOINCLGA;
}

public byte getHOINCLHE() {
return HOINCLHE;
}

public byte getHOINCLLA() {
return HOINCLLA;
}

public byte getHOINCLSE() {
return HOINCLSE;
}

public byte getHOINCLWA() {
return HOINCLWA;
}

public byte getHOINCM85() {
return HOINCM85;
}

public byte getHOINCM86() {
return HOINCM86;
}

public byte getHOINCM96() {
return HOINCM96;
}

public byte getHOINCMBI() {
return HOINCMBI;
}

public byte getHOINCMPI() {
return HOINCMPI;
}

public byte getHOINCMPP() {
return HOINCMPP;
}

public byte getHOINCPI() {
return HOINCPI;
}

public byte getHOINCPP() {
return HOINCPP;
}

public short getHOLEIS() {
return HOLEIS;
}

public byte getHOLEISE() {
return HOLEISE;
}

public short getHOLEISL() {
return HOLEISL;
}

public byte getHOLEISR() {
return HOLEISR;
}

public short getHOLEISU() {
return HOLEISU;
}

public int getHOMA() {
return HOMA;
}

public byte getHOMADD() {
return HOMADD;
}

public byte getHOMAE() {
return HOMAE;
}

public int getHOMAL() {
return HOMAL;
}

public byte getHOMAR() {
return HOMAR;
}

public short getHOMAU() {
return HOMAU;
}

public byte getHOMFV() {
return HOMFV;
}

public byte getHOMFV2() {
return HOMFV2;
}

public byte getHOMFV3() {
return HOMFV3;
}

public byte getHOMFV4() {
return HOMFV4;
}

public byte getHOMFV5() {
return HOMFV5;
}

public byte getHOMREPE() {
return HOMREPE;
}

public short getHOMREPL() {
return HOMREPL;
}

public byte getHOMREPR() {
return HOMREPR;
}

public short getHOMREPU() {
return HOMREPU;
}

public byte getHOMTY() {
return HOMTY;
}

public byte getHOMTY2() {
return HOMTY2;
}

public byte getHOMTY3() {
return HOMTY3;
}

public byte getHOMTY4() {
return HOMTY4;
}

public byte getHOMTY5() {
return HOMTY5;
}

public byte getHOMTYC() {
return HOMTYC;
}

public byte getHOMU95() {
return HOMU95;
}

public byte getHOMUCP() {
return HOMUCP;
}

public byte getHOMUHE() {
return HOMUHE;
}

public byte getHOMUHI() {
return HOMUHI;
}

public byte getHOMUM() {
return HOMUM;
}

public byte getHOMUM85() {
return HOMUM85;
}

public byte getHOMUM86() {
return HOMUM86;
}

public byte getHOMUMCP() {
return HOMUMCP;
}

public byte getHOMUMHE() {
return HOMUMHE;
}

public byte getHOMUMHI() {
return HOMUMHI;
}

public byte getHOMUMOC() {
return HOMUMOC;
}

public byte getHOMUOC() {
return HOMUOC;
}

public byte getHOOUTFE() {
return HOOUTFE;
}

public short getHOOUTFL() {
return HOOUTFL;
}

public byte getHOOUTFR() {
return HOOUTFR;
}

public short getHOOUTFU() {
return HOOUTFU;
}

public byte getHOOUTMC() {
return HOOUTMC;
}

public byte getHOPAYE() {
return HOPAYE;
}

public int getHOPAYL() {
return HOPAYL;
}

public byte getHOPAYR() {
return HOPAYR;
}

public int getHOPAYU() {
return HOPAYU;
}

public byte getHOPRO95() {
return HOPRO95;
}

public byte getHOPRO96() {
return HOPRO96;
}

public byte getHOPROCO() {
return HOPROCO;
}

public byte getHOPROCP() {
return HOPROCP;
}

public byte getHOPRODK() {
return HOPRODK;
}

public byte getHOPROEP() {
return HOPROEP;
}

public byte getHOPROIN() {
return HOPROIN;
}

public byte getHOPROM85() {
return HOPROM85;
}

public byte getHOPROM86() {
return HOPROM86;
}

public byte getHOPROM96() {
return HOPROM96;
}

public byte getHOPROMCO() {
return HOPROMCO;
}

public byte getHOPROMCP() {
return HOPROMCP;
}

public byte getHOPROMDK() {
return HOPROMDK;
}

public byte getHOPROMEP() {
return HOPROMEP;
}

public byte getHOPROMIN() {
return HOPROMIN;
}

public byte getHOPROMNZ() {
return HOPROMNZ;
}

public byte getHOPROMPO() {
return HOPROMPO;
}

public byte getHOPROMRD() {
return HOPROMRD;
}

public byte getHOPROMRO() {
return HOPROMRO;
}

public byte getHOPROMSN() {
return HOPROMSN;
}

public byte getHOPROMSP() {
return HOPROMSP;
}

public byte getHOPROMST() {
return HOPROMST;
}

public byte getHOPROMVA() {
return HOPROMVA;
}

public byte getHOPROMWA() {
return HOPROMWA;
}

public byte getHOPRONZ() {
return HOPRONZ;
}

public byte getHOPROPO() {
return HOPROPO;
}

public byte getHOPRORD() {
return HOPRORD;
}

public byte getHOPRORO() {
return HOPRORO;
}

public byte getHOPROSN() {
return HOPROSN;
}

public byte getHOPROSP() {
return HOPROSP;
}

public byte getHOPROWA() {
return HOPROWA;
}

public byte getHOREBFE() {
return HOREBFE;
}

public short getHOREBFL() {
return HOREBFL;
}

public byte getHOREBFR() {
return HOREBFR;
}

public short getHOREBFU() {
return HOREBFU;
}

public byte getHOREBME() {
return HOREBME;
}

public short getHOREBML() {
return HOREBML;
}

public byte getHOREBMR() {
return HOREBMR;
}

public short getHOREBMU() {
return HOREBMU;
}

public byte getHOREBOE() {
return HOREBOE;
}

public short getHOREBOL() {
return HOREBOL;
}

public byte getHOREBOR() {
return HOREBOR;
}

public short getHOREBOU() {
return HOREBOU;
}

public byte getHOREBWE() {
return HOREBWE;
}

public short getHOREBWL() {
return HOREBWL;
}

public byte getHOREBWR() {
return HOREBWR;
}

public short getHOREBWU() {
return HOREBWU;
}

public byte getHOREBYE() {
return HOREBYE;
}

public short getHOREBYL() {
return HOREBYL;
}

public byte getHOREBYR() {
return HOREBYR;
}

public byte getHOREBYU() {
return HOREBYU;
}

public byte getHORET() {
return HORET;
}

public byte getHORHB() {
return HORHB;
}

public byte getHORMAIN() {
return HORMAIN;
}

public byte getHORMO() {
return HORMO;
}

public byte getHORMO2() {
return HORMO2;
}

public byte getHORMO3() {
return HORMO3;
}

public byte getHORMO4() {
return HORMO4;
}

public byte getHORMO5() {
return HORMO5;
}

public byte getHORMO85() {
return HORMO85;
}

public byte getHORMO86() {
return HORMO86;
}

public byte getHORMO95() {
return HORMO95;
}

public byte getHORMOFP() {
return HORMOFP;
}

public byte getHORMOLA() {
return HORMOLA;
}

public byte getHORMOM85() {
return HORMOM85;
}

public byte getHORMOM86() {
return HORMOM86;
}

public byte getHORMOMBA() {
return HORMOMBA;
}

public byte getHORMOMBQ() {
return HORMOMBQ;
}

public byte getHORMOMFP() {
return HORMOMFP;
}

public byte getHORMOMLA() {
return HORMOMLA;
}

public byte getHORMOMNS() {
return HORMOMNS;
}

public byte getHORMOMSH() {
return HORMOMSH;
}

public byte getHORMOMSM() {
return HORMOMSM;
}

public byte getHORMOSH() {
return HORMOSH;
}

public byte getHORMOSM() {
return HORMOSM;
}

public byte getHORMV95() {
return HORMV95;
}

public byte getHORMVBA() {
return HORMVBA;
}

public byte getHORMVBO() {
return HORMVBO;
}

public byte getHORMVER() {
return HORMVER;
}

public byte getHORMVHR() {
return HORMVHR;
}

public byte getHORMVIF() {
return HORMVIF;
}

public byte getHORMVJR() {
return HORMVJR;
}

public byte getHORMVMAB() {
return HORMVMAB;
}

public byte getHORMVMBA() {
return HORMVMBA;
}

public byte getHORMVMBO() {
return HORMVMBO;
}

public byte getHORMVMER() {
return HORMVMER;
}

public byte getHORMVMHR() {
return HORMVMHR;
}

public byte getHORMVMIF() {
return HORMVMIF;
}

public byte getHORMVMJR() {
return HORMVMJR;
}

public byte getHORMVMMS() {
return HORMVMMS;
}

public byte getHORMVMNF() {
return HORMVMNF;
}

public byte getHORMVMNH() {
return HORMVMNH;
}

public byte getHORMVMNJ() {
return HORMVMNJ;
}

public byte getHORMVMOF() {
return HORMVMOF;
}

public byte getHORMVMPC() {
return HORMVMPC;
}

public byte getHORMVMPN() {
return HORMVMPN;
}

public byte getHORMVMS() {
return HORMVMS;
}

public byte getHORMVMSP() {
return HORMVMSP;
}

public byte getHORMVNF() {
return HORMVNF;
}

public byte getHORMVNJ() {
return HORMVNJ;
}

public byte getHORMVOF() {
return HORMVOF;
}

public byte getHORMVPN() {
return HORMVPN;
}

public byte getHORMVSP() {
return HORMVSP;
}

public byte getHOSELL() {
return HOSELL;
}

public byte getHOSELLE() {
return HOSELLE;
}

public int getHOSELLL() {
return HOSELLL;
}

public byte getHOSELLR() {
return HOSELLR;
}

public int getHOSELLU() {
return HOSELLU;
}

public double getHOSOLD() {
return HOSOLD;
}

public byte getHOSOLDE() {
return HOSOLDE;
}

public int getHOSOLDL() {
return HOSOLDL;
}

public byte getHOSOLDR() {
return HOSOLDR;
}

public int getHOSOLDU() {
return HOSOLDU;
}

public byte getHOTENST() {
return HOTENST;
}

public short getHOTRABCH() {
return HOTRABCH;
}

public int getHOTRABGC() {
return HOTRABGC;
}

public short getHOTRABNR() {
return HOTRABNR;
}

public int getHOTRABOC() {
return HOTRABOC;
}

public int getHOTRABOR() {
return HOTRABOR;
}

public int getHOTRAN() {
return HOTRAN;
}

public byte getHOTRANCH() {
return HOTRANCH;
}

public byte getHOTRANE() {
return HOTRANE;
}

public byte getHOTRANGC() {
return HOTRANGC;
}

public short getHOTRANL() {
return HOTRANL;
}

public byte getHOTRANNR() {
return HOTRANNR;
}

public byte getHOTRANOC() {
return HOTRANOC;
}

public byte getHOTRANOR() {
return HOTRANOR;
}

public byte getHOTRANR() {
return HOTRANR;
}

public short getHOTRANU() {
return HOTRANU;
}

public byte getHOTRAPCH() {
return HOTRAPCH;
}

public byte getHOTRAPGC() {
return HOTRAPGC;
}

public byte getHOTRAPNR() {
return HOTRAPNR;
}

public byte getHOTRAPOC() {
return HOTRAPOC;
}

public byte getHOTRAPOR() {
return HOTRAPOR;
}

public byte getHOTRPA() {
return HOTRPA;
}

public byte getHOV() {
return HOV;
}

public byte getHOVAG11() {
return HOVAG11;
}

public byte getHOVAG12() {
return HOVAG12;
}

public byte getHOVAG13() {
return HOVAG13;
}

public byte getHOVAG14() {
return HOVAG14;
}

public byte getHOVAG15() {
return HOVAG15;
}

public byte getHOVAG16() {
return HOVAG16;
}

public int getHOVE() {
return HOVE;
}

public int getHOVE1E() {
return HOVE1E;
}

public int getHOVE1L() {
return HOVE1L;
}

public byte getHOVE1R() {
return HOVE1R;
}

public int getHOVE1U() {
return HOVE1U;
}

public int getHOVE2() {
return HOVE2;
}

public short getHOVE2E() {
return HOVE2E;
}

public short getHOVE2L() {
return HOVE2L;
}

public byte getHOVE2R() {
return HOVE2R;
}

public short getHOVE2U() {
return HOVE2U;
}

public int getHOVE3() {
return HOVE3;
}

public short getHOVE3E() {
return HOVE3E;
}

public int getHOVE3L() {
return HOVE3L;
}

public byte getHOVE3R() {
return HOVE3R;
}

public int getHOVE3U() {
return HOVE3U;
}

public short getHOVE4() {
return HOVE4;
}

public byte getHOVE4E() {
return HOVE4E;
}

public short getHOVE4L() {
return HOVE4L;
}

public byte getHOVE4R() {
return HOVE4R;
}

public short getHOVE4U() {
return HOVE4U;
}

public short getHOVE5() {
return HOVE5;
}

public byte getHOVE5E() {
return HOVE5E;
}

public int getHOVE5L() {
return HOVE5L;
}

public byte getHOVE5R() {
return HOVE5R;
}

public int getHOVE5U() {
return HOVE5U;
}

public byte getHOVEHX() {
return HOVEHX;
}

public int getHOVML() {
return HOVML;
}

public int getHOVML2() {
return HOVML2;
}

public int getHOVML2E() {
return HOVML2E;
}

public int getHOVML2L() {
return HOVML2L;
}

public byte getHOVML2R() {
return HOVML2R;
}

public int getHOVML2U() {
return HOVML2U;
}

public int getHOVML3() {
return HOVML3;
}

public int getHOVML3E() {
return HOVML3E;
}

public byte getHOVML3L() {
return HOVML3L;
}

public byte getHOVML3R() {
return HOVML3R;
}

public short getHOVML3U() {
return HOVML3U;
}

public int getHOVML4() {
return HOVML4;
}

public int getHOVML4E() {
return HOVML4E;
}

public byte getHOVML4L() {
return HOVML4L;
}

public byte getHOVML4R() {
return HOVML4R;
}

public byte getHOVML4U() {
return HOVML4U;
}

public int getHOVML5() {
return HOVML5;
}

public byte getHOVML5E() {
return HOVML5E;
}

public byte getHOVML5L() {
return HOVML5L;
}

public byte getHOVML5R() {
return HOVML5R;
}

public byte getHOVML5U() {
return HOVML5U;
}

public byte getHOVMLE() {
return HOVMLE;
}

public int getHOVMLL() {
return HOVMLL;
}

public byte getHOVMLR() {
return HOVMLR;
}

public int getHOVMLU() {
return HOVMLU;
}

public byte getHOVN() {
return HOVN;
}

public byte getHOVNW() {
return HOVNW;
}

public byte getHOVNW10() {
return HOVNW10;
}

public byte getHOVNW11() {
return HOVNW11;
}

public byte getHOVNW12() {
return HOVNW12;
}

public byte getHOVNW13() {
return HOVNW13;
}

public byte getHOVNW14() {
return HOVNW14;
}

public byte getHOVNW15() {
return HOVNW15;
}

public byte getHOVNW16() {
return HOVNW16;
}

public byte getHOVNW2() {
return HOVNW2;
}

public byte getHOVNW3() {
return HOVNW3;
}

public byte getHOVNW4() {
return HOVNW4;
}

public byte getHOVNW5() {
return HOVNW5;
}

public byte getHOVNW6() {
return HOVNW6;
}

public byte getHOVNW7() {
return HOVNW7;
}

public byte getHOVNW9() {
return HOVNW9;
}

public byte getHOVOW96() {
return HOVOW96;
}

public byte getHOVST() {
return HOVST;
}

public byte getHOVST10() {
return HOVST10;
}

public byte getHOVST11() {
return HOVST11;
}

public byte getHOVST12() {
return HOVST12;
}

public byte getHOVST13() {
return HOVST13;
}

public byte getHOVST14() {
return HOVST14;
}

public byte getHOVST15() {
return HOVST15;
}

public byte getHOVST16() {
return HOVST16;
}

public byte getHOVST2() {
return HOVST2;
}

public byte getHOVST3() {
return HOVST3;
}

public byte getHOVST4() {
return HOVST4;
}

public byte getHOVST5() {
return HOVST5;
}

public byte getHOVST6() {
return HOVST6;
}

public byte getHOVST7() {
return HOVST7;
}

public byte getHOVST8() {
return HOVST8;
}

public byte getHOVST9() {
return HOVST9;
}

public byte getHOVW1001() {
return HOVW1001;
}

public byte getHOVW1002() {
return HOVW1002;
}

public byte getHOVW1003() {
return HOVW1003;
}

public byte getHOVW1004() {
return HOVW1004;
}

public byte getHOVW1005() {
return HOVW1005;
}

public byte getHOVW1006() {
return HOVW1006;
}

public byte getHOVW1007() {
return HOVW1007;
}

public byte getHOVW1008() {
return HOVW1008;
}

public byte getHOVW1009() {
return HOVW1009;
}

public byte getHOVW101() {
return HOVW101;
}

public byte getHOVW1010() {
return HOVW1010;
}

public byte getHOVW1011() {
return HOVW1011;
}

public byte getHOVW1012() {
return HOVW1012;
}

public byte getHOVW1013() {
return HOVW1013;
}

public byte getHOVW1014() {
return HOVW1014;
}

public byte getHOVW1015() {
return HOVW1015;
}

public byte getHOVW1016() {
return HOVW1016;
}

public byte getHOVW1017() {
return HOVW1017;
}

public byte getHOVW1018() {
return HOVW1018;
}

public byte getHOVW1019() {
return HOVW1019;
}

public byte getHOVW102() {
return HOVW102;
}

public byte getHOVW103() {
return HOVW103;
}

public byte getHOVW104() {
return HOVW104;
}

public byte getHOVW105() {
return HOVW105;
}

public byte getHOVW106() {
return HOVW106;
}

public byte getHOVW107() {
return HOVW107;
}

public byte getHOVW108() {
return HOVW108;
}

public byte getHOVW109() {
return HOVW109;
}

public byte getHOVW11() {
return HOVW11;
}

public byte getHOVW110() {
return HOVW110;
}

public byte getHOVW1101() {
return HOVW1101;
}

public byte getHOVW1102() {
return HOVW1102;
}

public byte getHOVW1103() {
return HOVW1103;
}

public byte getHOVW1104() {
return HOVW1104;
}

public byte getHOVW1105() {
return HOVW1105;
}

public byte getHOVW1106() {
return HOVW1106;
}

public byte getHOVW1107() {
return HOVW1107;
}

public byte getHOVW1108() {
return HOVW1108;
}

public byte getHOVW1109() {
return HOVW1109;
}

public byte getHOVW111() {
return HOVW111;
}

public byte getHOVW1110() {
return HOVW1110;
}

public byte getHOVW1111() {
return HOVW1111;
}

public byte getHOVW1112() {
return HOVW1112;
}

public byte getHOVW1113() {
return HOVW1113;
}

public byte getHOVW1114() {
return HOVW1114;
}

public byte getHOVW1115() {
return HOVW1115;
}

public byte getHOVW1116() {
return HOVW1116;
}

public byte getHOVW1117() {
return HOVW1117;
}

public byte getHOVW1118() {
return HOVW1118;
}

public byte getHOVW1119() {
return HOVW1119;
}

public byte getHOVW112() {
return HOVW112;
}

public byte getHOVW113() {
return HOVW113;
}

public byte getHOVW114() {
return HOVW114;
}

public byte getHOVW115() {
return HOVW115;
}

public byte getHOVW116() {
return HOVW116;
}

public byte getHOVW117() {
return HOVW117;
}

public byte getHOVW118() {
return HOVW118;
}

public byte getHOVW119() {
return HOVW119;
}

public byte getHOVW12() {
return HOVW12;
}

public byte getHOVW1201() {
return HOVW1201;
}

public byte getHOVW1202() {
return HOVW1202;
}

public byte getHOVW1203() {
return HOVW1203;
}

public byte getHOVW1204() {
return HOVW1204;
}

public byte getHOVW1205() {
return HOVW1205;
}

public byte getHOVW1206() {
return HOVW1206;
}

public byte getHOVW1207() {
return HOVW1207;
}

public byte getHOVW1208() {
return HOVW1208;
}

public byte getHOVW1209() {
return HOVW1209;
}

public byte getHOVW1210() {
return HOVW1210;
}

public byte getHOVW1211() {
return HOVW1211;
}

public byte getHOVW1212() {
return HOVW1212;
}

public byte getHOVW1213() {
return HOVW1213;
}

public byte getHOVW1214() {
return HOVW1214;
}

public byte getHOVW1215() {
return HOVW1215;
}

public byte getHOVW1216() {
return HOVW1216;
}

public byte getHOVW1217() {
return HOVW1217;
}

public byte getHOVW1218() {
return HOVW1218;
}

public byte getHOVW1219() {
return HOVW1219;
}

public byte getHOVW13() {
return HOVW13;
}

public byte getHOVW1301() {
return HOVW1301;
}

public byte getHOVW1302() {
return HOVW1302;
}

public byte getHOVW1303() {
return HOVW1303;
}

public byte getHOVW1304() {
return HOVW1304;
}

public byte getHOVW1305() {
return HOVW1305;
}

public byte getHOVW1306() {
return HOVW1306;
}

public byte getHOVW1307() {
return HOVW1307;
}

public byte getHOVW1308() {
return HOVW1308;
}

public byte getHOVW1309() {
return HOVW1309;
}

public byte getHOVW1310() {
return HOVW1310;
}

public byte getHOVW1311() {
return HOVW1311;
}

public byte getHOVW1312() {
return HOVW1312;
}

public byte getHOVW1313() {
return HOVW1313;
}

public byte getHOVW1314() {
return HOVW1314;
}

public byte getHOVW1315() {
return HOVW1315;
}

public byte getHOVW1316() {
return HOVW1316;
}

public byte getHOVW1317() {
return HOVW1317;
}

public byte getHOVW1318() {
return HOVW1318;
}

public byte getHOVW1319() {
return HOVW1319;
}

public byte getHOVW14() {
return HOVW14;
}

public byte getHOVW1401() {
return HOVW1401;
}

public byte getHOVW1402() {
return HOVW1402;
}

public byte getHOVW1403() {
return HOVW1403;
}

public byte getHOVW1404() {
return HOVW1404;
}

public byte getHOVW1405() {
return HOVW1405;
}

public byte getHOVW1406() {
return HOVW1406;
}

public byte getHOVW1407() {
return HOVW1407;
}

public byte getHOVW1408() {
return HOVW1408;
}

public byte getHOVW1409() {
return HOVW1409;
}

public byte getHOVW1410() {
return HOVW1410;
}

public byte getHOVW1411() {
return HOVW1411;
}

public byte getHOVW1412() {
return HOVW1412;
}

public byte getHOVW1413() {
return HOVW1413;
}

public byte getHOVW1414() {
return HOVW1414;
}

public byte getHOVW1415() {
return HOVW1415;
}

public byte getHOVW1416() {
return HOVW1416;
}

public byte getHOVW1417() {
return HOVW1417;
}

public byte getHOVW1418() {
return HOVW1418;
}

public byte getHOVW1419() {
return HOVW1419;
}

public byte getHOVW15() {
return HOVW15;
}

public byte getHOVW1501() {
return HOVW1501;
}

public byte getHOVW1502() {
return HOVW1502;
}

public byte getHOVW1503() {
return HOVW1503;
}

public byte getHOVW1504() {
return HOVW1504;
}

public byte getHOVW1505() {
return HOVW1505;
}

public byte getHOVW1506() {
return HOVW1506;
}

public byte getHOVW1507() {
return HOVW1507;
}

public byte getHOVW1508() {
return HOVW1508;
}

public byte getHOVW1509() {
return HOVW1509;
}

public byte getHOVW1510() {
return HOVW1510;
}

public byte getHOVW1511() {
return HOVW1511;
}

public byte getHOVW1512() {
return HOVW1512;
}

public byte getHOVW1513() {
return HOVW1513;
}

public byte getHOVW1514() {
return HOVW1514;
}

public byte getHOVW1515() {
return HOVW1515;
}

public byte getHOVW1516() {
return HOVW1516;
}

public byte getHOVW1517() {
return HOVW1517;
}

public byte getHOVW1518() {
return HOVW1518;
}

public byte getHOVW1519() {
return HOVW1519;
}

public byte getHOVW16() {
return HOVW16;
}

public byte getHOVW1601() {
return HOVW1601;
}

public byte getHOVW1602() {
return HOVW1602;
}

public byte getHOVW1603() {
return HOVW1603;
}

public byte getHOVW1604() {
return HOVW1604;
}

public byte getHOVW1605() {
return HOVW1605;
}

public byte getHOVW1606() {
return HOVW1606;
}

public byte getHOVW1607() {
return HOVW1607;
}

public byte getHOVW1608() {
return HOVW1608;
}

public byte getHOVW1609() {
return HOVW1609;
}

public byte getHOVW1610() {
return HOVW1610;
}

public byte getHOVW1611() {
return HOVW1611;
}

public byte getHOVW1612() {
return HOVW1612;
}

public byte getHOVW1613() {
return HOVW1613;
}

public byte getHOVW1614() {
return HOVW1614;
}

public byte getHOVW1615() {
return HOVW1615;
}

public byte getHOVW1616() {
return HOVW1616;
}

public byte getHOVW1617() {
return HOVW1617;
}

public byte getHOVW1618() {
return HOVW1618;
}

public byte getHOVW1619() {
return HOVW1619;
}

public byte getHOVW2() {
return HOVW2;
}

public byte getHOVW201() {
return HOVW201;
}

public byte getHOVW202() {
return HOVW202;
}

public byte getHOVW203() {
return HOVW203;
}

public byte getHOVW204() {
return HOVW204;
}

public byte getHOVW205() {
return HOVW205;
}

public byte getHOVW206() {
return HOVW206;
}

public byte getHOVW207() {
return HOVW207;
}

public byte getHOVW208() {
return HOVW208;
}

public byte getHOVW209() {
return HOVW209;
}

public byte getHOVW210() {
return HOVW210;
}

public byte getHOVW211() {
return HOVW211;
}

public byte getHOVW212() {
return HOVW212;
}

public byte getHOVW213() {
return HOVW213;
}

public byte getHOVW214() {
return HOVW214;
}

public byte getHOVW215() {
return HOVW215;
}

public byte getHOVW216() {
return HOVW216;
}

public byte getHOVW217() {
return HOVW217;
}

public byte getHOVW218() {
return HOVW218;
}

public byte getHOVW219() {
return HOVW219;
}

public byte getHOVW3() {
return HOVW3;
}

public byte getHOVW301() {
return HOVW301;
}

public byte getHOVW302() {
return HOVW302;
}

public byte getHOVW303() {
return HOVW303;
}

public byte getHOVW304() {
return HOVW304;
}

public byte getHOVW305() {
return HOVW305;
}

public byte getHOVW306() {
return HOVW306;
}

public byte getHOVW307() {
return HOVW307;
}

public byte getHOVW308() {
return HOVW308;
}

public byte getHOVW309() {
return HOVW309;
}

public byte getHOVW310() {
return HOVW310;
}

public byte getHOVW311() {
return HOVW311;
}

public byte getHOVW312() {
return HOVW312;
}

public byte getHOVW313() {
return HOVW313;
}

public byte getHOVW314() {
return HOVW314;
}

public byte getHOVW315() {
return HOVW315;
}

public byte getHOVW316() {
return HOVW316;
}

public byte getHOVW317() {
return HOVW317;
}

public byte getHOVW318() {
return HOVW318;
}

public byte getHOVW319() {
return HOVW319;
}

public byte getHOVW4() {
return HOVW4;
}

public byte getHOVW401() {
return HOVW401;
}

public byte getHOVW402() {
return HOVW402;
}

public byte getHOVW403() {
return HOVW403;
}

public byte getHOVW404() {
return HOVW404;
}

public byte getHOVW405() {
return HOVW405;
}

public byte getHOVW406() {
return HOVW406;
}

public byte getHOVW407() {
return HOVW407;
}

public byte getHOVW408() {
return HOVW408;
}

public byte getHOVW409() {
return HOVW409;
}

public byte getHOVW410() {
return HOVW410;
}

public byte getHOVW411() {
return HOVW411;
}

public byte getHOVW412() {
return HOVW412;
}

public byte getHOVW413() {
return HOVW413;
}

public byte getHOVW414() {
return HOVW414;
}

public byte getHOVW415() {
return HOVW415;
}

public byte getHOVW416() {
return HOVW416;
}

public byte getHOVW417() {
return HOVW417;
}

public byte getHOVW418() {
return HOVW418;
}

public byte getHOVW419() {
return HOVW419;
}

public byte getHOVW5() {
return HOVW5;
}

public byte getHOVW501() {
return HOVW501;
}

public byte getHOVW502() {
return HOVW502;
}

public byte getHOVW503() {
return HOVW503;
}

public byte getHOVW504() {
return HOVW504;
}

public byte getHOVW505() {
return HOVW505;
}

public byte getHOVW506() {
return HOVW506;
}

public byte getHOVW507() {
return HOVW507;
}

public byte getHOVW508() {
return HOVW508;
}

public byte getHOVW509() {
return HOVW509;
}

public byte getHOVW510() {
return HOVW510;
}

public byte getHOVW511() {
return HOVW511;
}

public byte getHOVW512() {
return HOVW512;
}

public byte getHOVW513() {
return HOVW513;
}

public byte getHOVW514() {
return HOVW514;
}

public byte getHOVW515() {
return HOVW515;
}

public byte getHOVW516() {
return HOVW516;
}

public byte getHOVW517() {
return HOVW517;
}

public byte getHOVW518() {
return HOVW518;
}

public byte getHOVW519() {
return HOVW519;
}

public byte getHOVW6() {
return HOVW6;
}

public byte getHOVW602() {
return HOVW602;
}

public byte getHOVW603() {
return HOVW603;
}

public byte getHOVW604() {
return HOVW604;
}

public byte getHOVW605() {
return HOVW605;
}

public byte getHOVW606() {
return HOVW606;
}

public byte getHOVW607() {
return HOVW607;
}

public byte getHOVW608() {
return HOVW608;
}

public byte getHOVW609() {
return HOVW609;
}

public byte getHOVW610() {
return HOVW610;
}

public byte getHOVW611() {
return HOVW611;
}

public byte getHOVW612() {
return HOVW612;
}

public byte getHOVW613() {
return HOVW613;
}

public byte getHOVW614() {
return HOVW614;
}

public byte getHOVW615() {
return HOVW615;
}

public byte getHOVW616() {
return HOVW616;
}

public byte getHOVW617() {
return HOVW617;
}

public byte getHOVW618() {
return HOVW618;
}

public byte getHOVW619() {
return HOVW619;
}

public byte getHOVW7() {
return HOVW7;
}

public byte getHOVW701() {
return HOVW701;
}

public byte getHOVW702() {
return HOVW702;
}

public byte getHOVW703() {
return HOVW703;
}

public byte getHOVW704() {
return HOVW704;
}

public byte getHOVW705() {
return HOVW705;
}

public byte getHOVW706() {
return HOVW706;
}

public byte getHOVW707() {
return HOVW707;
}

public byte getHOVW708() {
return HOVW708;
}

public byte getHOVW709() {
return HOVW709;
}

public byte getHOVW710() {
return HOVW710;
}

public byte getHOVW711() {
return HOVW711;
}

public byte getHOVW712() {
return HOVW712;
}

public byte getHOVW713() {
return HOVW713;
}

public byte getHOVW714() {
return HOVW714;
}

public byte getHOVW715() {
return HOVW715;
}

public byte getHOVW716() {
return HOVW716;
}

public byte getHOVW717() {
return HOVW717;
}

public byte getHOVW718() {
return HOVW718;
}

public byte getHOVW719() {
return HOVW719;
}

public byte getHOVW801() {
return HOVW801;
}

public byte getHOVW802() {
return HOVW802;
}

public byte getHOVW803() {
return HOVW803;
}

public byte getHOVW804() {
return HOVW804;
}

public byte getHOVW805() {
return HOVW805;
}

public byte getHOVW806() {
return HOVW806;
}

public byte getHOVW807() {
return HOVW807;
}

public byte getHOVW808() {
return HOVW808;
}

public byte getHOVW809() {
return HOVW809;
}

public byte getHOVW810() {
return HOVW810;
}

public byte getHOVW811() {
return HOVW811;
}

public byte getHOVW812() {
return HOVW812;
}

public byte getHOVW813() {
return HOVW813;
}

public byte getHOVW814() {
return HOVW814;
}

public byte getHOVW815() {
return HOVW815;
}

public byte getHOVW816() {
return HOVW816;
}

public byte getHOVW817() {
return HOVW817;
}

public byte getHOVW818() {
return HOVW818;
}

public byte getHOVW819() {
return HOVW819;
}

public byte getHOVW901() {
return HOVW901;
}

public byte getHOVW902() {
return HOVW902;
}

public byte getHOVW903() {
return HOVW903;
}

public byte getHOVW904() {
return HOVW904;
}

public byte getHOVW905() {
return HOVW905;
}

public byte getHOVW906() {
return HOVW906;
}

public byte getHOVW907() {
return HOVW907;
}

public byte getHOVW908() {
return HOVW908;
}

public byte getHOVW909() {
return HOVW909;
}

public byte getHOVW910() {
return HOVW910;
}

public byte getHOVW911() {
return HOVW911;
}

public byte getHOVW912() {
return HOVW912;
}

public byte getHOVW913() {
return HOVW913;
}

public byte getHOVW914() {
return HOVW914;
}

public byte getHOVW915() {
return HOVW915;
}

public byte getHOVW916() {
return HOVW916;
}

public byte getHOVW917() {
return HOVW917;
}

public byte getHOVW918() {
return HOVW918;
}

public byte getHOVW919() {
return HOVW919;
}

public byte getHOWH1() {
return HOWH1;
}

public byte getHOWH10() {
return HOWH10;
}

public byte getHOWH11() {
return HOWH11;
}

public byte getHOWH12() {
return HOWH12;
}

public byte getHOWH13() {
return HOWH13;
}

public byte getHOWH14() {
return HOWH14;
}

public byte getHOWH15() {
return HOWH15;
}

public byte getHOWH16() {
return HOWH16;
}

public byte getHOWH2() {
return HOWH2;
}

public byte getHOWH3() {
return HOWH3;
}

public byte getHOWH4() {
return HOWH4;
}

public byte getHOWH5() {
return HOWH5;
}

public byte getHOWH6() {
return HOWH6;
}

public byte getHOWH7() {
return HOWH7;
}

public byte getHOWH8() {
return HOWH8;
}

public byte getHOWH9() {
return HOWH9;
}

public byte getHOWH97() {
return HOWH97;
}

public byte getHOYML() {
return HOYML;
}

public byte getHOYML2() {
return HOYML2;
}

public byte getHOYML3() {
return HOYML3;
}

public byte getHOYML4() {
return HOYML4;
}

public byte getHOYML5() {
return HOYML5;
}

public double getHSCRP() {
return HSCRP;
}

public short getIAA39() {
return IAA39;
}

public boolean getIAA39FE() {
return IAA39FE;
}

public boolean getIAA39FL() {
return IAA39FL;
}

public boolean getIAA39FR() {
return IAA39FR;
}

public boolean getIAA39FU() {
return IAA39FU;
}

public byte getIAA39ME() {
return IAA39ME;
}

public short getIAA39ML() {
return IAA39ML;
}

public boolean getIAA39MR() {
return IAA39MR;
}

public short getIAA39MU() {
return IAA39MU;
}

public byte getIAA39OE() {
return IAA39OE;
}

public boolean getIAA39OL() {
return IAA39OL;
}

public byte getIAA39OR() {
return IAA39OR;
}

public short getIAA39OU() {
return IAA39OU;
}

public byte getIAA39WE() {
return IAA39WE;
}

public boolean getIAA39WL() {
return IAA39WL;
}

public boolean getIAA39WR() {
return IAA39WR;
}

public boolean getIAA39WU() {
return IAA39WU;
}

public boolean getIAA39YE() {
return IAA39YE;
}

public boolean getIAA39YL() {
return IAA39YL;
}

public boolean getIAA39YR() {
return IAA39YR;
}

public boolean getIAA39YU() {
return IAA39YU;
}

public short getIAA40() {
return IAA40;
}

public boolean getIAA40FE() {
return IAA40FE;
}

public boolean getIAA40FL() {
return IAA40FL;
}

public boolean getIAA40FR() {
return IAA40FR;
}

public boolean getIAA40FU() {
return IAA40FU;
}

public byte getIAA40ME() {
return IAA40ME;
}

public short getIAA40ML() {
return IAA40ML;
}

public boolean getIAA40MR() {
return IAA40MR;
}

public short getIAA40MU() {
return IAA40MU;
}

public byte getIAA40OE() {
return IAA40OE;
}

public short getIAA40OL() {
return IAA40OL;
}

public byte getIAA40OR() {
return IAA40OR;
}

public short getIAA40OU() {
return IAA40OU;
}

public boolean getIAA40WE() {
return IAA40WE;
}

public boolean getIAA40WL() {
return IAA40WL;
}

public boolean getIAA40WR() {
return IAA40WR;
}

public boolean getIAA40WU() {
return IAA40WU;
}

public boolean getIAA40YE() {
return IAA40YE;
}

public boolean getIAA40YL() {
return IAA40YL;
}

public boolean getIAA40YR() {
return IAA40YR;
}

public boolean getIAA40YU() {
return IAA40YU;
}

public short getIAA41() {
return IAA41;
}

public byte getIAA41FE() {
return IAA41FE;
}

public short getIAA41FL() {
return IAA41FL;
}

public byte getIAA41FR() {
return IAA41FR;
}

public short getIAA41FU() {
return IAA41FU;
}

public boolean getIAA41ME() {
return IAA41ME;
}

public boolean getIAA41ML() {
return IAA41ML;
}

public boolean getIAA41MR() {
return IAA41MR;
}

public short getIAA41MU() {
return IAA41MU;
}

public byte getIAA41OE() {
return IAA41OE;
}

public short getIAA41OL() {
return IAA41OL;
}

public byte getIAA41OR() {
return IAA41OR;
}

public short getIAA41OU() {
return IAA41OU;
}

public byte getIAA41WE() {
return IAA41WE;
}

public byte getIAA41WL() {
return IAA41WL;
}

public byte getIAA41WR() {
return IAA41WR;
}

public byte getIAA41WU() {
return IAA41WU;
}

public boolean getIAA41YE() {
return IAA41YE;
}

public boolean getIAA41YL() {
return IAA41YL;
}

public boolean getIAA41YR() {
return IAA41YR;
}

public boolean getIAA41YU() {
return IAA41YU;
}

public short getIAA42() {
return IAA42;
}

public boolean getIAA42FE() {
return IAA42FE;
}

public boolean getIAA42FL() {
return IAA42FL;
}

public boolean getIAA42FR() {
return IAA42FR;
}

public boolean getIAA42FU() {
return IAA42FU;
}

public byte getIAA42ME() {
return IAA42ME;
}

public short getIAA42ML() {
return IAA42ML;
}

public byte getIAA42MR() {
return IAA42MR;
}

public short getIAA42MU() {
return IAA42MU;
}

public byte getIAA42OE() {
return IAA42OE;
}

public short getIAA42OL() {
return IAA42OL;
}

public byte getIAA42OR() {
return IAA42OR;
}

public short getIAA42OU() {
return IAA42OU;
}

public byte getIAA42WE() {
return IAA42WE;
}

public short getIAA42WL() {
return IAA42WL;
}

public byte getIAA42WR() {
return IAA42WR;
}

public short getIAA42WU() {
return IAA42WU;
}

public boolean getIAA42YE() {
return IAA42YE;
}

public boolean getIAA42YL() {
return IAA42YL;
}

public boolean getIAA42YR() {
return IAA42YR;
}

public short getIAA42YU() {
return IAA42YU;
}

public byte getIAAIPE() {
return IAAIPE;
}

public short getIAAIPL() {
return IAAIPL;
}

public byte getIAAIPR() {
return IAAIPR;
}

public short getIAAIPU() {
return IAAIPU;
}

public byte getIABEBC() {
return IABEBC;
}

public byte getIABEN95() {
return IABEN95;
}

public byte getIABEN96() {
return IABEN96;
}

public byte getIABENCB() {
return IABENCB;
}

public byte getIABENCC() {
return IABENCC;
}

public byte getIABENGA() {
return IABENGA;
}

public byte getIABENIS() {
return IABENIS;
}

public byte getIABENJA() {
return IABENJA;
}

public byte getIABENM85() {
return IABENM85;
}

public byte getIABENM86() {
return IABENM86;
}

public byte getIABENM96() {
return IABENM96;
}

public byte getIABENMCB() {
return IABENMCB;
}

public byte getIABENMCC() {
return IABENMCC;
}

public byte getIABENMEC() {
return IABENMEC;
}

public byte getIABENMGA() {
return IABENMGA;
}

public byte getIABENMIS() {
return IABENMIS;
}

public byte getIABENMJA() {
return IABENMJA;
}

public byte getIABENMPC() {
return IABENMPC;
}

public byte getIABENMTC() {
return IABENMTC;
}

public byte getIABENMUC() {
return IABENMUC;
}

public byte getIABENMWP() {
return IABENMWP;
}

public byte getIABENPC() {
return IABENPC;
}

public byte getIABENR() {
return IABENR;
}

public byte getIABENTC() {
return IABENTC;
}

public byte getIABENUC() {
return IABENUC;
}

public byte getIABENWP() {
return IABENWP;
}

public byte getIABEPN95() {
return IABEPN95;
}

public byte getIABEPN96() {
return IABEPN96;
}

public byte getIABEPNCB() {
return IABEPNCB;
}

public byte getIABEPNCC() {
return IABEPNCC;
}

public byte getIABEPNGA() {
return IABEPNGA;
}

public byte getIABEPNIS() {
return IABEPNIS;
}

public byte getIABEPNJA() {
return IABEPNJA;
}

public byte getIABEPNPC() {
return IABEPNPC;
}

public byte getIABEPNUC() {
return IABEPNUC;
}

public byte getIABEPNWC() {
return IABEPNWC;
}

public byte getIABEPNWP() {
return IABEPNWP;
}

public byte getIABPNM85() {
return IABPNM85;
}

public byte getIABPNM86() {
return IABPNM86;
}

public byte getIABPNM96() {
return IABPNM96;
}

public byte getIABPNMCB() {
return IABPNMCB;
}

public byte getIABPNMCC() {
return IABPNMCC;
}

public byte getIABPNMEC() {
return IABPNMEC;
}

public byte getIABPNMGA() {
return IABPNMGA;
}

public byte getIABPNMIS() {
return IABPNMIS;
}

public byte getIABPNMJA() {
return IABPNMJA;
}

public byte getIABPNMPC() {
return IABPNMPC;
}

public byte getIABPNMTC() {
return IABPNMTC;
}

public byte getIABPNMUC() {
return IABPNMUC;
}

public byte getIABPNMWP() {
return IABPNMWP;
}

public short getIACBTA() {
return IACBTA;
}

public boolean getIACBTFE() {
return IACBTFE;
}

public boolean getIACBTFL() {
return IACBTFL;
}

public boolean getIACBTFR() {
return IACBTFR;
}

public boolean getIACBTFU() {
return IACBTFU;
}

public boolean getIACBTME() {
return IACBTME;
}

public boolean getIACBTML() {
return IACBTML;
}

public boolean getIACBTMR() {
return IACBTMR;
}

public boolean getIACBTMU() {
return IACBTMU;
}

public boolean getIACBTOE() {
return IACBTOE;
}

public boolean getIACBTOL() {
return IACBTOL;
}

public boolean getIACBTOR() {
return IACBTOR;
}

public boolean getIACBTOU() {
return IACBTOU;
}

public byte getIACBTP() {
return IACBTP;
}

public boolean getIACBTWE() {
return IACBTWE;
}

public boolean getIACBTWL() {
return IACBTWL;
}

public boolean getIACBTWR() {
return IACBTWR;
}

public boolean getIACBTWU() {
return IACBTWU;
}

public byte getIACBTX() {
return IACBTX;
}

public boolean getIACBTYE() {
return IACBTYE;
}

public boolean getIACBTYL() {
return IACBTYL;
}

public boolean getIACBTYR() {
return IACBTYR;
}

public boolean getIACBTYU() {
return IACBTYU;
}

public byte getIACISAE() {
return IACISAE;
}

public short getIACISAL() {
return IACISAL;
}

public byte getIACISAR() {
return IACISAR;
}

public short getIACISAU() {
return IACISAU;
}

public byte getIADEBME() {
return IADEBME;
}

public short getIADEBML() {
return IADEBML;
}

public byte getIADEBMR() {
return IADEBMR;
}

public short getIADEBMU() {
return IADEBMU;
}

public byte getIADEM() {
return IADEM;
}

public byte getIADEN() {
return IADEN;
}

public byte getIAEA10E() {
return IAEA10E;
}

public short getIAEA10L() {
return IAEA10L;
}

public byte getIAEA10R() {
return IAEA10R;
}

public short getIAEA10U() {
return IAEA10U;
}

public boolean getIAEA11E() {
return IAEA11E;
}

public byte getIAEA11L() {
return IAEA11L;
}

public boolean getIAEA11R() {
return IAEA11R;
}

public short getIAEA11U() {
return IAEA11U;
}

public boolean getIAEA12E() {
return IAEA12E;
}

public boolean getIAEA12L() {
return IAEA12L;
}

public boolean getIAEA12R() {
return IAEA12R;
}

public boolean getIAEA12U() {
return IAEA12U;
}

public boolean getIAEA13E() {
return IAEA13E;
}

public boolean getIAEA13L() {
return IAEA13L;
}

public boolean getIAEA13R() {
return IAEA13R;
}

public boolean getIAEA13U() {
return IAEA13U;
}

public boolean getIAEA14E() {
return IAEA14E;
}

public boolean getIAEA14L() {
return IAEA14L;
}

public boolean getIAEA14R() {
return IAEA14R;
}

public boolean getIAEA14U() {
return IAEA14U;
}

public boolean getIAEA15E() {
return IAEA15E;
}

public boolean getIAEA15L() {
return IAEA15L;
}

public boolean getIAEA15R() {
return IAEA15R;
}

public boolean getIAEA15U() {
return IAEA15U;
}

public boolean getIAEA16E() {
return IAEA16E;
}

public boolean getIAEA16L() {
return IAEA16L;
}

public boolean getIAEA16R() {
return IAEA16R;
}

public boolean getIAEA16U() {
return IAEA16U;
}

public byte getIAEAR2E() {
return IAEAR2E;
}

public int getIAEAR2L() {
return IAEAR2L;
}

public byte getIAEAR2R() {
return IAEAR2R;
}

public int getIAEAR2U() {
return IAEAR2U;
}

public byte getIAEAR3E() {
return IAEAR3E;
}

public int getIAEAR3L() {
return IAEAR3L;
}

public byte getIAEAR3R() {
return IAEAR3R;
}

public int getIAEAR3U() {
return IAEAR3U;
}

public byte getIAEAR4E() {
return IAEAR4E;
}

public int getIAEAR4L() {
return IAEAR4L;
}

public byte getIAEAR4R() {
return IAEAR4R;
}

public int getIAEAR4U() {
return IAEAR4U;
}

public byte getIAEAR5E() {
return IAEAR5E;
}

public int getIAEAR5L() {
return IAEAR5L;
}

public byte getIAEAR5R() {
return IAEAR5R;
}

public int getIAEAR5U() {
return IAEAR5U;
}

public byte getIAEAR6E() {
return IAEAR6E;
}

public int getIAEAR6L() {
return IAEAR6L;
}

public byte getIAEAR6R() {
return IAEAR6R;
}

public int getIAEAR6U() {
return IAEAR6U;
}

public byte getIAEAR7E() {
return IAEAR7E;
}

public int getIAEAR7L() {
return IAEAR7L;
}

public byte getIAEAR7R() {
return IAEAR7R;
}

public int getIAEAR7U() {
return IAEAR7U;
}

public byte getIAEAR8E() {
return IAEAR8E;
}

public int getIAEAR8L() {
return IAEAR8L;
}

public byte getIAEAR8R() {
return IAEAR8R;
}

public int getIAEAR8U() {
return IAEAR8U;
}

public byte getIAEAR9E() {
return IAEAR9E;
}

public short getIAEAR9L() {
return IAEAR9L;
}

public byte getIAEAR9R() {
return IAEAR9R;
}

public short getIAEAR9U() {
return IAEAR9U;
}

public byte getIAEARE() {
return IAEARE;
}

public int getIAEARL() {
return IAEARL;
}

public byte getIAEARR() {
return IAEARR;
}

public int getIAEARU() {
return IAEARU;
}

public short getIAERN() {
return IAERN;
}

public byte getIAERN10() {
return IAERN10;
}

public boolean getIAERN11() {
return IAERN11;
}

public boolean getIAERN12() {
return IAERN12;
}

public boolean getIAERN13() {
return IAERN13;
}

public boolean getIAERN14() {
return IAERN14;
}

public boolean getIAERN15() {
return IAERN15;
}

public boolean getIAERN16() {
return IAERN16;
}

public int getIAERN2() {
return IAERN2;
}

public int getIAERN3() {
return IAERN3;
}

public int getIAERN4() {
return IAERN4;
}

public int getIAERN5() {
return IAERN5;
}

public short getIAERN6() {
return IAERN6;
}

public short getIAERN7() {
return IAERN7;
}

public short getIAERN8() {
return IAERN8;
}

public byte getIAERN9() {
return IAERN9;
}

public byte getIAFBAE() {
return IAFBAE;
}

public int getIAFBAL() {
return IAFBAL;
}

public byte getIAFBAR() {
return IAFBAR;
}

public int getIAFBAU() {
return IAFBAU;
}

public byte getIAFFNUM() {
return IAFFNUM;
}

public byte getIAFUEL() {
return IAFUEL;
}

public byte getIAG() {
return IAG;
}

public byte getIAGAG() {
return IAGAG;
}

public byte getIAGAG2() {
return IAGAG2;
}

public byte getIAGAG3() {
return IAGAG3;
}

public byte getIAGJ() {
return IAGJ;
}

public byte getIAGJ2() {
return IAGJ2;
}

public byte getIAGJ3() {
return IAGJ3;
}

public byte getIAGN() {
return IAGN;
}

public int getIAGV() {
return IAGV;
}

public int getIAGV2() {
return IAGV2;
}

public byte getIAGV2E() {
return IAGV2E;
}

public short getIAGV2L() {
return IAGV2L;
}

public byte getIAGV2R() {
return IAGV2R;
}

public int getIAGV2U() {
return IAGV2U;
}

public int getIAGV3() {
return IAGV3;
}

public byte getIAGV3E() {
return IAGV3E;
}

public int getIAGV3L() {
return IAGV3L;
}

public byte getIAGV3R() {
return IAGV3R;
}

public short getIAGV3U() {
return IAGV3U;
}

public byte getIAGVE() {
return IAGVE;
}

public int getIAGVL() {
return IAGVL;
}

public byte getIAGVR() {
return IAGVR;
}

public int getIAGVU() {
return IAGVU;
}

public byte getIAGWH() {
return IAGWH;
}

public byte getIAGWH2() {
return IAGWH2;
}

public byte getIAGWH3() {
return IAGWH3;
}

public byte getIAGWM() {
return IAGWM;
}

public byte getIAGWM2() {
return IAGWM2;
}

public byte getIAGWM3() {
return IAGWM3;
}

public byte getIAGWN() {
return IAGWN;
}

public byte getIAGWN2() {
return IAGWN2;
}

public byte getIAGWN3() {
return IAGWN3;
}

public short getIAGY() {
return IAGY;
}

public short getIAGY2() {
return IAGY2;
}

public short getIAGY3() {
return IAGY3;
}

public byte getIAHDBC() {
return IAHDBC;
}

public byte getIAHDN95() {
return IAHDN95;
}

public byte getIAHDN96() {
return IAHDN96;
}

public byte getIAHDNAA() {
return IAHDNAA;
}

public byte getIAHDNCA() {
return IAHDNCA;
}

public byte getIAHDNDL() {
return IAHDNDL;
}

public byte getIAHDNES() {
return IAHDNES;
}

public byte getIAHDNIB() {
return IAHDNIB;
}

public byte getIAHDNII() {
return IAHDNII;
}

public byte getIAHDNM85() {
return IAHDNM85;
}

public byte getIAHDNM86() {
return IAHDNM86;
}

public byte getIAHDNM96() {
return IAHDNM96;
}

public byte getIAHDNMAA() {
return IAHDNMAA;
}

public byte getIAHDNMCA() {
return IAHDNMCA;
}

public byte getIAHDNMDL() {
return IAHDNMDL;
}

public byte getIAHDNMES() {
return IAHDNMES;
}

public byte getIAHDNMIB() {
return IAHDNMIB;
}

public byte getIAHDNMII() {
return IAHDNMII;
}

public byte getIAHDNMPI() {
return IAHDNMPI;
}

public byte getIAHDNMSD() {
return IAHDNMSD;
}

public byte getIAHDNMSP() {
return IAHDNMSP;
}

public byte getIAHDNMWD() {
return IAHDNMWD;
}

public byte getIAHDNPI() {
return IAHDNPI;
}

public byte getIAHDNSD() {
return IAHDNSD;
}

public byte getIAHDNSP() {
return IAHDNSP;
}

public byte getIAHDNWD() {
return IAHDNWD;
}

public byte getIAHDPN95() {
return IAHDPN95;
}

public byte getIAHDPN96() {
return IAHDPN96;
}

public byte getIAHDPNAA() {
return IAHDPNAA;
}

public byte getIAHDPNCA() {
return IAHDPNCA;
}

public byte getIAHDPNDL() {
return IAHDPNDL;
}

public byte getIAHDPNES() {
return IAHDPNES;
}

public byte getIAHDPNIB() {
return IAHDPNIB;
}

public byte getIAHDPNII() {
return IAHDPNII;
}

public boolean getIAHDPNM85() {
return IAHDPNM85;
}

public byte getIAHDPNM86() {
return IAHDPNM86;
}

public byte getIAHDPNM96() {
return IAHDPNM96;
}

public byte getIAHDPNMAA() {
return IAHDPNMAA;
}

public byte getIAHDPNMCA() {
return IAHDPNMCA;
}

public byte getIAHDPNMDL() {
return IAHDPNMDL;
}

public byte getIAHDPNMES() {
return IAHDPNMES;
}

public byte getIAHDPNMIB() {
return IAHDPNMIB;
}

public byte getIAHDPNMII() {
return IAHDPNMII;
}

public byte getIAHDPNMPI() {
return IAHDPNMPI;
}

public byte getIAHDPNMSD() {
return IAHDPNMSD;
}

public byte getIAHDPNMSP() {
return IAHDPNMSP;
}

public byte getIAHDPNMWD() {
return IAHDPNMWD;
}

public byte getIAHDPNPI() {
return IAHDPNPI;
}

public byte getIAHDPNSD() {
return IAHDPNSD;
}

public byte getIAHDPNSP() {
return IAHDPNSP;
}

public byte getIAHDPNWD() {
return IAHDPNWD;
}

public byte getIAHHINC() {
return IAHHINC;
}

public byte getIAHOMEE() {
return IAHOMEE;
}

public int getIAHOMEL() {
return IAHOMEL;
}

public byte getIAHOMER() {
return IAHOMER;
}

public int getIAHOMEU() {
return IAHOMEU;
}

public byte getIAI() {
return IAI;
}

public byte getIAIAG() {
return IAIAG;
}

public byte getIAIAG2() {
return IAIAG2;
}

public byte getIAIAG3() {
return IAIAG3;
}

public byte getIAIJ() {
return IAIJ;
}

public byte getIAIJ2() {
return IAIJ2;
}

public byte getIAIJ3() {
return IAIJ3;
}

public byte getIAIN() {
return IAIN;
}

public byte getIAIRAE() {
return IAIRAE;
}

public int getIAIRAL() {
return IAIRAL;
}

public byte getIAIRAR() {
return IAIRAR;
}

public int getIAIRAU() {
return IAIRAU;
}

public byte getIAISACAS() {
return IAISACAS;
}

public byte getIAISADE() {
return IAISADE;
}

public short getIAISADL() {
return IAISADL;
}

public byte getIAISADR() {
return IAISADR;
}

public short getIAISADU() {
return IAISADU;
}

public byte getIAISALI() {
return IAISALI;
}

public byte getIAISASHA() {
return IAISASHA;
}

public int getIAIV() {
return IAIV;
}

public int getIAIV2() {
return IAIV2;
}

public byte getIAIV2E() {
return IAIV2E;
}

public int getIAIV2L() {
return IAIV2L;
}

public byte getIAIV2R() {
return IAIV2R;
}

public int getIAIV2U() {
return IAIV2U;
}

public int getIAIV3() {
return IAIV3;
}

public byte getIAIV3E() {
return IAIV3E;
}

public int getIAIV3L() {
return IAIV3L;
}

public byte getIAIV3R() {
return IAIV3R;
}

public int getIAIV3U() {
return IAIV3U;
}

public byte getIAIVE() {
return IAIVE;
}

public int getIAIVL() {
return IAIVL;
}

public byte getIAIVR() {
return IAIVR;
}

public int getIAIVU() {
return IAIVU;
}

public byte getIAIWH() {
return IAIWH;
}

public byte getIAIWH2() {
return IAIWH2;
}

public byte getIAIWH3() {
return IAIWH3;
}

public byte getIAIWM() {
return IAIWM;
}

public byte getIAIWM2() {
return IAIWM2;
}

public byte getIAIWM3() {
return IAIWM3;
}

public byte getIAIWN() {
return IAIWN;
}

public byte getIAIWN2() {
return IAIWN2;
}

public byte getIAIWN3() {
return IAIWN3;
}

public short getIAIY() {
return IAIY;
}

public short getIAIY2() {
return IAIY2;
}

public short getIAIY3() {
return IAIY3;
}

public byte getIALIPAE() {
return IALIPAE;
}

public int getIALIPAL() {
return IALIPAL;
}

public byte getIALIPAR() {
return IALIPAR;
}

public int getIALIPAU() {
return IALIPAU;
}

public byte getIALISAE() {
return IALISAE;
}

public short getIALISAL() {
return IALISAL;
}

public byte getIALISAR() {
return IALISAR;
}

public short getIALISAU() {
return IALISAU;
}

public byte getIALIYAE() {
return IALIYAE;
}

public int getIALIYAL() {
return IALIYAL;
}

public byte getIALIYAR() {
return IALIYAR;
}

public int getIALIYAU() {
return IALIYAU;
}

public byte getIALOAME() {
return IALOAME;
}

public short getIALOAML() {
return IALOAML;
}

public byte getIALOAMR() {
return IALOAMR;
}

public short getIALOAMU() {
return IALOAMU;
}

public byte getIALOAN96() {
return IALOAN96;
}

public byte getIALOANHP() {
return IALOANHP;
}

public byte getIALOANML() {
return IALOANML;
}

public byte getIALOANMO() {
return IALOANMO;
}

public byte getIALOANOD() {
return IALOANOD;
}

public byte getIALOANPL() {
return IALOANPL;
}

public byte getIALOANSF() {
return IALOANSF;
}

public byte getIALREFE() {
return IALREFE;
}

public byte getIALREFL() {
return IALREFL;
}

public byte getIALREFR() {
return IALREFR;
}

public byte getIALREFU() {
return IALREFU;
}

public byte getIALREME() {
return IALREME;
}

public short getIALREML() {
return IALREML;
}

public byte getIALREMR() {
return IALREMR;
}

public short getIALREMU() {
return IALREMU;
}

public byte getIALREOE() {
return IALREOE;
}

public short getIALREOL() {
return IALREOL;
}

public byte getIALREOR() {
return IALREOR;
}

public short getIALREOU() {
return IALREOU;
}

public byte getIALREWE() {
return IALREWE;
}

public short getIALREWL() {
return IALREWL;
}

public byte getIALREWR() {
return IALREWR;
}

public byte getIALREWU() {
return IALREWU;
}

public byte getIALREYE() {
return IALREYE;
}

public short getIALREYL() {
return IALREYL;
}

public byte getIALREYR() {
return IALREYR;
}

public short getIALREYU() {
return IALREYU;
}

public byte getIAMRP2() {
return IAMRP2;
}

public boolean getIAMRP3() {
return IAMRP3;
}

public boolean getIAMRP4() {
return IAMRP4;
}

public byte getIANPBPE() {
return IANPBPE;
}

public short getIANPBPL() {
return IANPBPL;
}

public byte getIANPBPR() {
return IANPBPR;
}

public short getIANPBPU() {
return IANPBPU;
}

public byte getIAOASAE() {
return IAOASAE;
}

public int getIAOASAL() {
return IAOASAL;
}

public byte getIAOASAR() {
return IAOASAR;
}

public int getIAOASAU() {
return IAOASAU;
}

public byte getIAOMME() {
return IAOMME;
}

public int getIAOMML() {
return IAOMML;
}

public byte getIAOMMR() {
return IAOMMR;
}

public int getIAOMMU() {
return IAOMMU;
}

public byte getIAOTHP3() {
return IAOTHP3;
}

public boolean getIAOTHP4() {
return IAOTHP4;
}

public byte getIAOWEME() {
return IAOWEME;
}

public short getIAOWEML() {
return IAOWEML;
}

public byte getIAOWEMR() {
return IAOWEMR;
}

public short getIAOWEMU() {
return IAOWEMU;
}

public byte getIAP39() {
return IAP39;
}

public byte getIAP40() {
return IAP40;
}

public byte getIAP41() {
return IAP41;
}

public byte getIAP42() {
return IAP42;
}

public boolean getIAPA3FE() {
return IAPA3FE;
}

public boolean getIAPA3FL() {
return IAPA3FL;
}

public boolean getIAPA3FR() {
return IAPA3FR;
}

public boolean getIAPA3FU() {
return IAPA3FU;
}

public boolean getIAPA3ME() {
return IAPA3ME;
}

public boolean getIAPA3ML() {
return IAPA3ML;
}

public boolean getIAPA3MR() {
return IAPA3MR;
}

public boolean getIAPA3MU() {
return IAPA3MU;
}

public boolean getIAPA3OE() {
return IAPA3OE;
}

public boolean getIAPA3OL() {
return IAPA3OL;
}

public boolean getIAPA3OR() {
return IAPA3OR;
}

public boolean getIAPA3OU() {
return IAPA3OU;
}

public boolean getIAPA3WE() {
return IAPA3WE;
}

public boolean getIAPA3WL() {
return IAPA3WL;
}

public boolean getIAPA3WR() {
return IAPA3WR;
}

public boolean getIAPA3WU() {
return IAPA3WU;
}

public boolean getIAPA3YE() {
return IAPA3YE;
}

public boolean getIAPA3YL() {
return IAPA3YL;
}

public boolean getIAPA3YR() {
return IAPA3YR;
}

public boolean getIAPA3YU() {
return IAPA3YU;
}

public boolean getIAPA4FE() {
return IAPA4FE;
}

public boolean getIAPA4FL() {
return IAPA4FL;
}

public boolean getIAPA4FR() {
return IAPA4FR;
}

public boolean getIAPA4FU() {
return IAPA4FU;
}

public boolean getIAPA4ME() {
return IAPA4ME;
}

public boolean getIAPA4ML() {
return IAPA4ML;
}

public boolean getIAPA4MR() {
return IAPA4MR;
}

public boolean getIAPA4MU() {
return IAPA4MU;
}

public boolean getIAPA4OE() {
return IAPA4OE;
}

public boolean getIAPA4OL() {
return IAPA4OL;
}

public boolean getIAPA4OR() {
return IAPA4OR;
}

public boolean getIAPA4OU() {
return IAPA4OU;
}

public boolean getIAPA4WE() {
return IAPA4WE;
}

public boolean getIAPA4WL() {
return IAPA4WL;
}

public boolean getIAPA4WR() {
return IAPA4WR;
}

public boolean getIAPA4WU() {
return IAPA4WU;
}

public boolean getIAPA4YE() {
return IAPA4YE;
}

public boolean getIAPA4YL() {
return IAPA4YL;
}

public boolean getIAPA4YR() {
return IAPA4YR;
}

public boolean getIAPA4YU() {
return IAPA4YU;
}

public boolean getIAPA5FE() {
return IAPA5FE;
}

public boolean getIAPA5FL() {
return IAPA5FL;
}

public boolean getIAPA5FR() {
return IAPA5FR;
}

public boolean getIAPA5FU() {
return IAPA5FU;
}

public boolean getIAPA5ME() {
return IAPA5ME;
}

public boolean getIAPA5ML() {
return IAPA5ML;
}

public boolean getIAPA5MR() {
return IAPA5MR;
}

public boolean getIAPA5MU() {
return IAPA5MU;
}

public boolean getIAPA5OE() {
return IAPA5OE;
}

public boolean getIAPA5OL() {
return IAPA5OL;
}

public boolean getIAPA5OR() {
return IAPA5OR;
}

public boolean getIAPA5OU() {
return IAPA5OU;
}

public boolean getIAPA5WE() {
return IAPA5WE;
}

public boolean getIAPA5WL() {
return IAPA5WL;
}

public boolean getIAPA5WR() {
return IAPA5WR;
}

public boolean getIAPA5WU() {
return IAPA5WU;
}

public boolean getIAPA5YE() {
return IAPA5YE;
}

public boolean getIAPA5YL() {
return IAPA5YL;
}

public boolean getIAPA5YR() {
return IAPA5YR;
}

public boolean getIAPA5YU() {
return IAPA5YU;
}

public byte getIAPAM3() {
return IAPAM3;
}

public boolean getIAPAM4() {
return IAPAM4;
}

public boolean getIAPAM5() {
return IAPAM5;
}

public byte getIAPASK() {
return IAPASK;
}

public byte getIAPAY() {
return IAPAY;
}

public byte getIAPAY2() {
return IAPAY2;
}

public byte getIAPAY3() {
return IAPAY3;
}

public boolean getIAPAY4() {
return IAPAY4;
}

public byte getIAPAYR() {
return IAPAYR;
}

public byte getIAPAYR2() {
return IAPAYR2;
}

public byte getIAPAYR3() {
return IAPAYR3;
}

public boolean getIAPAYR4() {
return IAPAYR4;
}

public byte getIAPF2() {
return IAPF2;
}

public boolean getIAPF3() {
return IAPF3;
}

public boolean getIAPF4() {
return IAPF4;
}

public byte getIAPK95() {
return IAPK95;
}

public byte getIAPK96() {
return IAPK96;
}

public byte getIAPKGW() {
return IAPKGW;
}

public byte getIAPKIOB() {
return IAPKIOB;
}

public byte getIAPKLI() {
return IAPKLI;
}

public byte getIAPKM1E() {
return IAPKM1E;
}

public int getIAPKM1L() {
return IAPKM1L;
}

public byte getIAPKM1R() {
return IAPKM1R;
}

public int getIAPKM1U() {
return IAPKM1U;
}

public byte getIAPKM2E() {
return IAPKM2E;
}

public int getIAPKM2L() {
return IAPKM2L;
}

public byte getIAPKM2R() {
return IAPKM2R;
}

public int getIAPKM2U() {
return IAPKM2U;
}

public byte getIAPKM3E() {
return IAPKM3E;
}

public boolean getIAPKM3L() {
return IAPKM3L;
}

public byte getIAPKM3R() {
return IAPKM3R;
}

public short getIAPKM3U() {
return IAPKM3U;
}

public byte getIAPKM4E() {
return IAPKM4E;
}

public short getIAPKM4L() {
return IAPKM4L;
}

public byte getIAPKM4R() {
return IAPKM4R;
}

public short getIAPKM4U() {
return IAPKM4U;
}

public byte getIAPKM5E() {
return IAPKM5E;
}

public int getIAPKM5L() {
return IAPKM5L;
}

public byte getIAPKM5R() {
return IAPKM5R;
}

public int getIAPKM5U() {
return IAPKM5U;
}

public byte getIAPKM6E() {
return IAPKM6E;
}

public int getIAPKM6L() {
return IAPKM6L;
}

public byte getIAPKM6R() {
return IAPKM6R;
}

public int getIAPKM6U() {
return IAPKM6U;
}

public byte getIAPKM7E() {
return IAPKM7E;
}

public short getIAPKM7L() {
return IAPKM7L;
}

public byte getIAPKM7R() {
return IAPKM7R;
}

public short getIAPKM7U() {
return IAPKM7U;
}

public byte getIAPKM85() {
return IAPKM85;
}

public byte getIAPKM86() {
return IAPKM86;
}

public byte getIAPKM8E() {
return IAPKM8E;
}

public int getIAPKM8L() {
return IAPKM8L;
}

public byte getIAPKM8R() {
return IAPKM8R;
}

public int getIAPKM8U() {
return IAPKM8U;
}

public int getIAPKM9() {
return IAPKM9;
}

public byte getIAPKM96() {
return IAPKM96;
}

public byte getIAPKM9E() {
return IAPKM9E;
}

public byte getIAPKM9L() {
return IAPKM9L;
}

public byte getIAPKM9R() {
return IAPKM9R;
}

public short getIAPKM9U() {
return IAPKM9U;
}

public byte getIAPKMGW() {
return IAPKMGW;
}

public byte getIAPKMIOB() {
return IAPKMIOB;
}

public byte getIAPKMLI() {
return IAPKMLI;
}

public byte getIAPKMOIP() {
return IAPKMOIP;
}

public byte getIAPKMPAP() {
return IAPKMPAP;
}

public byte getIAPKMPP() {
return IAPKMPP;
}

public boolean getIAPKMPPI() {
return IAPKMPPI;
}

public byte getIAPKMRP() {
return IAPKMRP;
}

public byte getIAPKMSG() {
return IAPKMSG;
}

public byte getIAPKOIP() {
return IAPKOIP;
}

public byte getIAPKPAP() {
return IAPKPAP;
}

public byte getIAPKPP() {
return IAPKPP;
}

public byte getIAPKRP() {
return IAPKRP;
}

public byte getIAPKSG() {
return IAPKSG;
}

public byte getIAPPAFE() {
return IAPPAFE;
}

public boolean getIAPPAFL() {
return IAPPAFL;
}

public byte getIAPPAFR() {
return IAPPAFR;
}

public short getIAPPAFU() {
return IAPPAFU;
}

public byte getIAPPAME() {
return IAPPAME;
}

public short getIAPPAML() {
return IAPPAML;
}

public byte getIAPPAMR() {
return IAPPAMR;
}

public short getIAPPAMU() {
return IAPPAMU;
}

public byte getIAPPAOE() {
return IAPPAOE;
}

public short getIAPPAOL() {
return IAPPAOL;
}

public byte getIAPPAOR() {
return IAPPAOR;
}

public short getIAPPAOU() {
return IAPPAOU;
}

public byte getIAPPAWE() {
return IAPPAWE;
}

public short getIAPPAWL() {
return IAPPAWL;
}

public byte getIAPPAWR() {
return IAPPAWR;
}

public short getIAPPAWU() {
return IAPPAWU;
}

public byte getIAPPAYE() {
return IAPPAYE;
}

public short getIAPPAYL() {
return IAPPAYL;
}

public byte getIAPPAYR() {
return IAPPAYR;
}

public short getIAPPAYU() {
return IAPPAYU;
}

public byte getIAPPEIE() {
return IAPPEIE;
}

public short getIAPPEIL() {
return IAPPEIL;
}

public byte getIAPPEIR() {
return IAPPEIR;
}

public short getIAPPEIU() {
return IAPPEIU;
}

public int getIAPPMO() {
return IAPPMO;
}

public byte getIAPPMOE() {
return IAPPMOE;
}

public short getIAPPMOL() {
return IAPPMOL;
}

public byte getIAPPMOR() {
return IAPPMOR;
}

public short getIAPPMOU() {
return IAPPMOU;
}

public byte getIAPR2() {
return IAPR2;
}

public boolean getIAPR3() {
return IAPR3;
}

public boolean getIAPR4() {
return IAPR4;
}

public byte getIAPROP95() {
return IAPROP95;
}

public byte getIAPROP96() {
return IAPROP96;
}

public byte getIAPROPFA() {
return IAPROPFA;
}

public byte getIAPROPHO() {
return IAPROPHO;
}

public byte getIAPROPIN() {
return IAPROPIN;
}

public byte getIAPROPOL() {
return IAPROPOL;
}

public byte getIAPROPOW() {
return IAPROPOW;
}

public byte getIAPROPTR() {
return IAPROPTR;
}

public byte getIAPS2() {
return IAPS2;
}

public boolean getIAPS3() {
return IAPS3;
}

public boolean getIAPS4() {
return IAPS4;
}

public byte getIAPSPEN() {
return IAPSPEN;
}

public byte getIAPSPW() {
return IAPSPW;
}

public byte getIAPYW11() {
return IAPYW11;
}

public boolean getIAPYW12() {
return IAPYW12;
}

public byte getIAPYW13() {
return IAPYW13;
}

public byte getIAPYW14() {
return IAPYW14;
}

public boolean getIAPYW15() {
return IAPYW15;
}

public boolean getIAPYW16() {
return IAPYW16;
}

public byte getIAPYW2() {
return IAPYW2;
}

public byte getIAPYW3() {
return IAPYW3;
}

public byte getIAPYW4() {
return IAPYW4;
}

public byte getIAPYW5() {
return IAPYW5;
}

public byte getIAPYW6() {
return IAPYW6;
}

public byte getIAPYW7() {
return IAPYW7;
}

public byte getIAPYW9() {
return IAPYW9;
}

public byte getIARECE() {
return IARECE;
}

public short getIARECL() {
return IARECL;
}

public byte getIARECR() {
return IARECR;
}

public short getIARECU() {
return IARECU;
}

public short getIAREGM3() {
return IAREGM3;
}

public boolean getIAREGM4() {
return IAREGM4;
}

public byte getIAREGO3() {
return IAREGO3;
}

public boolean getIAREGO4() {
return IAREGO4;
}

public boolean getIAREPFE() {
return IAREPFE;
}

public boolean getIAREPFL() {
return IAREPFL;
}

public boolean getIAREPFR() {
return IAREPFR;
}

public boolean getIAREPFU() {
return IAREPFU;
}

public byte getIAREPME() {
return IAREPME;
}

public byte getIAREPML() {
return IAREPML;
}

public byte getIAREPMR() {
return IAREPMR;
}

public short getIAREPMU() {
return IAREPMU;
}

public byte getIAREPOE() {
return IAREPOE;
}

public short getIAREPOL() {
return IAREPOL;
}

public byte getIAREPOR() {
return IAREPOR;
}

public short getIAREPOU() {
return IAREPOU;
}

public byte getIAREPWE() {
return IAREPWE;
}

public byte getIAREPWL() {
return IAREPWL;
}

public byte getIAREPWR() {
return IAREPWR;
}

public byte getIAREPWU() {
return IAREPWU;
}

public byte getIAREPYE() {
return IAREPYE;
}

public byte getIAREPYL() {
return IAREPYL;
}

public byte getIAREPYR() {
return IAREPYR;
}

public short getIAREPYU() {
return IAREPYU;
}

public boolean getIARG2FE() {
return IARG2FE;
}

public boolean getIARG2FL() {
return IARG2FL;
}

public boolean getIARG2FR() {
return IARG2FR;
}

public boolean getIARG2FU() {
return IARG2FU;
}

public byte getIARG2ME() {
return IARG2ME;
}

public short getIARG2ML() {
return IARG2ML;
}

public byte getIARG2MR() {
return IARG2MR;
}

public short getIARG2MU() {
return IARG2MU;
}

public byte getIARG2OE() {
return IARG2OE;
}

public byte getIARG2OL() {
return IARG2OL;
}

public byte getIARG2OR() {
return IARG2OR;
}

public byte getIARG2OU() {
return IARG2OU;
}

public boolean getIARG2WE() {
return IARG2WE;
}

public boolean getIARG2WL() {
return IARG2WL;
}

public boolean getIARG2WR() {
return IARG2WR;
}

public boolean getIARG2WU() {
return IARG2WU;
}

public boolean getIARG2YE() {
return IARG2YE;
}

public boolean getIARG2YL() {
return IARG2YL;
}

public boolean getIARG2YR() {
return IARG2YR;
}

public boolean getIARG2YU() {
return IARG2YU;
}

public boolean getIARG3FE() {
return IARG3FE;
}

public boolean getIARG3FL() {
return IARG3FL;
}

public boolean getIARG3FR() {
return IARG3FR;
}

public boolean getIARG3FU() {
return IARG3FU;
}

public boolean getIARG3ME() {
return IARG3ME;
}

public boolean getIARG3ML() {
return IARG3ML;
}

public boolean getIARG3MR() {
return IARG3MR;
}

public boolean getIARG3MU() {
return IARG3MU;
}

public boolean getIARG3OE() {
return IARG3OE;
}

public boolean getIARG3OL() {
return IARG3OL;
}

public boolean getIARG3OR() {
return IARG3OR;
}

public boolean getIARG3OU() {
return IARG3OU;
}

public boolean getIARG3WE() {
return IARG3WE;
}

public boolean getIARG3WL() {
return IARG3WL;
}

public boolean getIARG3WR() {
return IARG3WR;
}

public boolean getIARG3WU() {
return IARG3WU;
}

public boolean getIARG3YE() {
return IARG3YE;
}

public boolean getIARG3YL() {
return IARG3YL;
}

public boolean getIARG3YR() {
return IARG3YR;
}

public boolean getIARG3YU() {
return IARG3YU;
}

public boolean getIARG4FE() {
return IARG4FE;
}

public boolean getIARG4FL() {
return IARG4FL;
}

public boolean getIARG4FR() {
return IARG4FR;
}

public boolean getIARG4FU() {
return IARG4FU;
}

public boolean getIARG4ME() {
return IARG4ME;
}

public boolean getIARG4ML() {
return IARG4ML;
}

public boolean getIARG4MR() {
return IARG4MR;
}

public boolean getIARG4MU() {
return IARG4MU;
}

public boolean getIARG4OE() {
return IARG4OE;
}

public boolean getIARG4OL() {
return IARG4OL;
}

public boolean getIARG4OR() {
return IARG4OR;
}

public boolean getIARG4OU() {
return IARG4OU;
}

public boolean getIARG4WE() {
return IARG4WE;
}

public boolean getIARG4WL() {
return IARG4WL;
}

public boolean getIARG4WR() {
return IARG4WR;
}

public boolean getIARG4WU() {
return IARG4WU;
}

public boolean getIARG4YE() {
return IARG4YE;
}

public boolean getIARG4YL() {
return IARG4YL;
}

public boolean getIARG4YR() {
return IARG4YR;
}

public boolean getIARG4YU() {
return IARG4YU;
}

public boolean getIARGFE() {
return IARGFE;
}

public boolean getIARGFL() {
return IARGFL;
}

public boolean getIARGFR() {
return IARGFR;
}

public boolean getIARGFU() {
return IARGFU;
}

public byte getIARGME() {
return IARGME;
}

public short getIARGML() {
return IARGML;
}

public byte getIARGMR() {
return IARGMR;
}

public short getIARGMU() {
return IARGMU;
}

public byte getIARGOE() {
return IARGOE;
}

public short getIARGOL() {
return IARGOL;
}

public byte getIARGOR() {
return IARGOR;
}

public short getIARGOU() {
return IARGOU;
}

public byte getIARGWE() {
return IARGWE;
}

public byte getIARGWL() {
return IARGWL;
}

public byte getIARGWR() {
return IARGWR;
}

public byte getIARGWU() {
return IARGWU;
}

public byte getIARGYE() {
return IARGYE;
}

public byte getIARGYL() {
return IARGYL;
}

public byte getIARGYR() {
return IARGYR;
}

public byte getIARGYU() {
return IARGYU;
}

public byte getIASAVAE() {
return IASAVAE;
}

public int getIASAVAL() {
return IASAVAL;
}

public byte getIASAVAR() {
return IASAVAR;
}

public int getIASAVAU() {
return IASAVAU;
}

public byte getIASCAE() {
return IASCAE;
}

public int getIASCAL() {
return IASCAL;
}

public byte getIASCAR() {
return IASCAR;
}

public int getIASCAU() {
return IASCAU;
}

public byte getIASHTFOL() {
return IASHTFOL;
}

public byte getIASHTMUT() {
return IASHTMUT;
}

public byte getIASHTPRI() {
return IASHTPRI;
}

public byte getIASHTUKL() {
return IASHTUKL;
}

public byte getIASI95() {
return IASI95;
}

public byte getIASI96() {
return IASI96;
}

public byte getIASIBG() {
return IASIBG;
}

public byte getIASICA() {
return IASICA;
}

public byte getIASIISA() {
return IASIISA;
}

public byte getIASINS() {
return IASINS;
}

public byte getIASIOIE() {
return IASIOIE;
}

public short getIASIOIL() {
return IASIOIL;
}

public byte getIASIOIR() {
return IASIOIR;
}

public short getIASIOIU() {
return IASIOIU;
}

public byte getIASIOPT() {
return IASIOPT;
}

public byte getIASIPB() {
return IASIPB;
}

public byte getIASIPEP() {
return IASIPEP;
}

public byte getIASISAE() {
return IASISAE;
}

public int getIASISAL() {
return IASISAL;
}

public byte getIASISAR() {
return IASISAR;
}

public int getIASISAU() {
return IASISAU;
}

public byte getIASISAV() {
return IASISAV;
}

public byte getIASISC() {
return IASISC;
}

public byte getIASISHA() {
return IASISHA;
}

public byte getIASITESS() {
return IASITESS;
}

public byte getIASIUIT() {
return IASIUIT;
}

public byte getIASSSE() {
return IASSSE;
}

public byte getIASSSIE() {
return IASSSIE;
}

public short getIASSSIL() {
return IASSSIL;
}

public byte getIASSSIR() {
return IASSSIR;
}

public short getIASSSIU() {
return IASSSIU;
}

public int getIASSSL() {
return IASSSL;
}

public byte getIASSSR() {
return IASSSR;
}

public int getIASSSU() {
return IASSSU;
}

public boolean getIAT39() {
return IAT39;
}

public boolean getIAT40() {
return IAT40;
}

public boolean getIAT41() {
return IAT41;
}

public boolean getIAT42() {
return IAT42;
}

public byte getIAUITE() {
return IAUITE;
}

public byte getIAUITIE() {
return IAUITIE;
}

public short getIAUITIL() {
return IAUITIL;
}

public byte getIAUITIR() {
return IAUITIR;
}

public short getIAUITIU() {
return IAUITIU;
}

public int getIAUITL() {
return IAUITL;
}

public byte getIAUITR() {
return IAUITR;
}

public int getIAUITU() {
return IAUITU;
}

public byte getIAW1R() {
return IAW1R;
}

public byte getIGF1() {
return IGF1;
}

public double getLDL() {
return LDL;
}

public byte getLIGHTEAT() {
return LIGHTEAT;
}

public byte getMAINHH() {
return MAINHH;
}

public short getMAP1() {
return MAP1;
}

public short getMAP2() {
return MAP2;
}

public short getMAP3() {
return MAP3;
}

public double getMAPVAL() {
return MAPVAL;
}

public double getMCH() {
return MCH;
}

public byte getMEDCNJD() {
return MEDCNJD;
}

public byte getMIFIN() {
return MIFIN;
}

public byte getMILIVE() {
return MILIVE;
}

public byte getMIREL() {
return MIREL;
}

public byte getMISINT() {
return MISINT;
}

public byte getMISPOU() {
return MISPOU;
}

public byte getMMCOM85() {
return MMCOM85;
}

public byte getMMCOM86() {
return MMCOM86;
}

public byte getMMCOMNI() {
return MMCOMNI;
}

public byte getMMCOMPA() {
return MMCOMPA;
}

public byte getMMCOMRF() {
return MMCOMRF;
}

public byte getMMCOMSP() {
return MMCOMSP;
}

public byte getMMCOMSW() {
return MMCOMSW;
}

public byte getMMCOMTM() {
return MMCOMTM;
}

public byte getMMCOMUN() {
return MMCOMUN;
}

public byte getMMGSD1() {
return MMGSD1;
}

public byte getMMGSD2() {
return MMGSD2;
}

public byte getMMGSD3() {
return MMGSD3;
}

public byte getMMGSDOM() {
return MMGSDOM;
}

public byte getMMGSN1() {
return MMGSN1;
}

public byte getMMGSN2() {
return MMGSN2;
}

public byte getMMGSN3() {
return MMGSN3;
}

public byte getMMGSPR95() {
return MMGSPR95;
}

public byte getMMGSPREQ() {
return MMGSPREQ;
}

public byte getMMGSPRPA() {
return MMGSPRPA;
}

public byte getMMGSPRRE() {
return MMGSPRRE;
}

public byte getMMGSRES() {
return MMGSRES;
}

public byte getMMGSSTA() {
return MMGSSTA;
}

public boolean getMMGSSTP() {
return MMGSSTP;
}

public byte getMMGSTP() {
return MMGSTP;
}

public byte getMMGSWIL() {
return MMGSWIL;
}

public byte getNATTBP95() {
return NATTBP95;
}

public byte getNATTBPCO() {
return NATTBPCO;
}

public byte getNATTBPCU() {
return NATTBPCU;
}

public byte getNATTBPEQ() {
return NATTBPEQ;
}

public byte getNATTBPER() {
return NATTBPER;
}

public byte getNATTBPUP() {
return NATTBPUP;
}

public byte getNOBSM95() {
return NOBSM95;
}

public byte getNOBSMFA() {
return NOBSMFA;
}

public byte getNOBSMSV() {
return NOBSMSV;
}

public byte getNOBSMUP() {
return NOBSMUP;
}

public byte getNOWTBC95() {
return NOWTBC95;
}

public byte getNOWTBCBE() {
return NOWTBCBE;
}

public byte getNOWTBCCH() {
return NOWTBCCH;
}

public byte getNOWTBCHE() {
return NOWTBCHE;
}

public byte getNOWTBCPA() {
return NOWTBCPA;
}

public byte getNOWTBCSC() {
return NOWTBCSC;
}

public byte getNOWTBCSH() {
return NOWTBCSH;
}

public byte getNOWTBCST() {
return NOWTBCST;
}

public byte getNOWTBCUN() {
return NOWTBCUN;
}

public boolean getNURELIG() {
return NURELIG;
}

public byte getORDCON() {
return ORDCON;
}

public byte getPAINHH() {
return PAINHH;
}

public byte getPC_P_F() {
return PC_P_F;
}

public double getPC_P_I() {
return PC_P_I;
}

public short getPC_P_O() {
return PC_P_O;
}

public short getPC_P_T() {
return PC_P_T;
}

public byte getPC_R_F() {
return PC_R_F;
}

public double getPC_R_I() {
return PC_R_I;
}

public short getPC_R_O() {
return PC_R_O;
}

public short getPC_R_T() {
return PC_R_T;
}

public byte getPIP_P_F() {
return PIP_P_F;
}

public double getPIP_P_I() {
return PIP_P_I;
}

public short getPIP_P_O() {
return PIP_P_O;
}

public short getPIP_P_T() {
return PIP_P_T;
}

public byte getPIP_R_F() {
return PIP_R_F;
}

public double getPIP_R_I() {
return PIP_R_I;
}

public short getPIP_R_O() {
return PIP_R_O;
}

public short getPIP_R_T() {
return PIP_R_T;
}

public byte getPSMNTA() {
return PSMNTA;
}

public byte getPSMNTB() {
return PSMNTB;
}

public short getPULSE1() {
return PULSE1;
}

public short getPULSE2() {
return PULSE2;
}

public short getPULSE3() {
return PULSE3;
}

public double getPULVAL() {
return PULVAL;
}

public byte getREFBSC95() {
return REFBSC95;
}

public byte getREFBSCDI() {
return REFBSCDI;
}

public byte getREFBSCHI() {
return REFBSCHI;
}

public byte getREFBSCIL() {
return REFBSCIL;
}

public byte getREFBSCNE() {
return REFBSCNE;
}

public byte getREFBSCTE() {
return REFBSCTE;
}

public byte getRELWAIT() {
return RELWAIT;
}

public byte getRESNWT() {
return RESNWT;
}

public byte getRESPBPS() {
return RESPBPS;
}

public byte getRESPWTS() {
return RESPWTS;
}

public short getRTIN() {
return RTIN;
}

public byte getSAMDIF95() {
return SAMDIF95;
}

public byte getSAMDIFFA() {
return SAMDIFFA;
}

public byte getSAMDIFIN() {
return SAMDIFIN;
}

public byte getSAMDIFNO() {
return SAMDIFNO;
}

public byte getSAMDIFSE() {
return SAMDIFSE;
}

public byte getSAMDIFTO() {
return SAMDIFTO;
}

public byte getSAMDIFVE() {
return SAMDIFVE;
}

public byte getSAMPTAK() {
return SAMPTAK;
}

public String getSAMPTYP() {
return SAMPTYP;
}

public byte getSCACTA() {
return SCACTA;
}

public byte getSCACTB() {
return SCACTB;
}

public byte getSCACTC() {
return SCACTC;
}

public byte getSCACTD() {
return SCACTD;
}

public byte getSCAGLIK() {
return SCAGLIK;
}

public byte getSCAKO() {
return SCAKO;
}

public byte getSCAL7A() {
return SCAL7A;
}

public byte getSCAL7B() {
return SCAL7B;
}

public byte getSCCHDJ() {
return SCCHDJ;
}

public byte getSCCHDK() {
return SCCHDK;
}

public byte getSCCNTA() {
return SCCNTA;
}

public byte getSCCNTB() {
return SCCNTB;
}

public byte getSCCNTC() {
return SCCNTC;
}

public byte getSCCNTD() {
return SCCNTD;
}

public byte getSCCNTE() {
return SCCNTE;
}

public byte getSCCNTF() {
return SCCNTF;
}

public byte getSCDRPIN() {
return SCDRPIN;
}

public byte getSCDRSPI() {
return SCDRSPI;
}

public byte getSCDRWIN() {
return SCDRWIN;
}

public byte getSCEMPL() {
return SCEMPL;
}

public byte getSCEND() {
return SCEND;
}

public byte getSCFAMH() {
return SCFAMH;
}

public byte getSCFAMJ() {
return SCFAMJ;
}

public byte getSCFAMK() {
return SCFAMK;
}

public byte getSCFAMM() {
return SCFAMM;
}

public byte getSCFEELA() {
return SCFEELA;
}

public byte getSCFEELB() {
return SCFEELB;
}

public byte getSCFEELC() {
return SCFEELC;
}

public byte getSCFEELD() {
return SCFEELD;
}

public byte getSCFEELE() {
return SCFEELE;
}

public byte getSCFPATI() {
return SCFPATI;
}

public byte getSCFRDJ() {
return SCFRDJ;
}

public byte getSCFRDK() {
return SCFRDK;
}

public byte getSCFRDM() {
return SCFRDM;
}

public byte getSCFRISK() {
return SCFRISK;
}

public byte getSCFRU() {
return SCFRU;
}

public byte getSCGPATI() {
return SCGPATI;
}

public byte getSCGRISK() {
return SCGRISK;
}

public byte getSCHBODY() {
return SCHBODY;
}

public byte getSCHDECI() {
return SCHDECI;
}

public byte getSCHEBOW() {
return SCHEBOW;
}

public byte getSCHEBOWA() {
return SCHEBOWA;
}

public byte getSCHELNCT() {
return SCHELNCT;
}

public byte getSCHELNCTA() {
return SCHELNCTA;
}

public byte getSCHEXPT() {
return SCHEXPT;
}

public byte getSCHPATI() {
return SCHPATI;
}

public byte getSCHQUAL() {
return SCHQUAL;
}

public byte getSCHRISK() {
return SCHRISK;
}

public byte getSCINA95() {
return SCINA95;
}

public byte getSCINA96() {
return SCINA96;
}

public byte getSCINABK() {
return SCINABK;
}

public byte getSCINACL() {
return SCINACL;
}

public byte getSCINACT() {
return SCINACT;
}

public byte getSCINAED() {
return SCINAED;
}

public byte getSCINAEM() {
return SCINAEM;
}

public byte getSCINAGM() {
return SCINAGM;
}

public byte getSCINAJB() {
return SCINAJB;
}

public byte getSCINANW() {
return SCINANW;
}

public byte getSCINAPS() {
return SCINAPS;
}

public byte getSCINASH() {
return SCINASH;
}

public byte getSCINASL() {
return SCINASL;
}

public byte getSCINASN() {
return SCINASN;
}

public byte getSCINAST() {
return SCINAST;
}

public byte getSCIND95() {
return SCIND95;
}

public byte getSCIND96() {
return SCIND96;
}

public byte getSCINDDT() {
return SCINDDT;
}

public byte getSCINDLT() {
return SCINDLT;
}

public byte getSCINDPH() {
return SCINDPH;
}

public byte getSCINDTB() {
return SCINDTB;
}

public byte getSCINT() {
return SCINT;
}

public byte getSCLIFEA() {
return SCLIFEA;
}

public byte getSCLIFEB() {
return SCLIFEB;
}

public byte getSCLIFEC() {
return SCLIFEC;
}

public byte getSCLIFED() {
return SCLIFED;
}

public byte getSCLIFEE() {
return SCLIFEE;
}

public byte getSCMENA() {
return SCMENA;
}

public byte getSCMENB() {
return SCMENB;
}

public byte getSCMENC() {
return SCMENC;
}

public byte getSCMEND() {
return SCMEND;
}

public byte getSCMOREA() {
return SCMOREA;
}

public byte getSCMOREB() {
return SCMOREB;
}

public byte getSCMOREC() {
return SCMOREC;
}

public byte getSCMORED() {
return SCMORED;
}

public byte getSCOABOTH() {
return SCOABOTH;
}

public byte getSCOADO() {
return SCOADO;
}

public byte getSCOAGRAM() {
return SCOAGRAM;
}

public byte getSCOAHLTH() {
return SCOAHLTH;
}

public byte getSCOAILL() {
return SCOAILL;
}

public byte getSCOALEIS() {
return SCOALEIS;
}

public byte getSCOALON() {
return SCOALON;
}

public byte getSCOAOLD() {
return SCOAOLD;
}

public byte getSCOAOP() {
return SCOAOP;
}

public byte getSCOARESP() {
return SCOARESP;
}

public byte getSCOATLON() {
return SCOATLON;
}

public byte getSCOATOL() {
return SCOATOL;
}

public short getSCOFEEL() {
return SCOFEEL;
}

public byte getSCOLDPOS() {
return SCOLDPOS;
}

public byte getSCORG95() {
return SCORG95;
}

public byte getSCORG96() {
return SCORG96;
}

public byte getSCORGCH() {
return SCORGCH;
}

public byte getSCORGED() {
return SCORGED;
}

public byte getSCORGNW() {
return SCORGNW;
}

public byte getSCORGPO() {
return SCORGPO;
}

public byte getSCORGRL() {
return SCORGRL;
}

public byte getSCORGSC() {
return SCORGSC;
}

public byte getSCORGSP() {
return SCORGSP;
}

public byte getSCOVAN() {
return SCOVAN;
}

public byte getSCOVHA() {
return SCOVHA;
}

public byte getSCOVSA() {
return SCOVSA;
}

public byte getSCOVWO() {
return SCOVWO;
}

public byte getSCPRT() {
return SCPRT;
}

public byte getSCPRTA() {
return SCPRTA;
}

public byte getSCPRTB() {
return SCPRTB;
}

public byte getSCPRTC() {
return SCPRTC;
}

public byte getSCPRTD() {
return SCPRTD;
}

public byte getSCPRTE() {
return SCPRTE;
}

public byte getSCPRTF() {
return SCPRTF;
}

public byte getSCPRTG() {
return SCPRTG;
}

public byte getSCPRTM() {
return SCPRTM;
}

public byte getSCPTR96() {
return SCPTR96;
}

public byte getSCPTRAB() {
return SCPTRAB;
}

public byte getSCPTRHB() {
return SCPTRHB;
}

public byte getSCPTRMP() {
return SCPTRMP;
}

public byte getSCPTRNP() {
return SCPTRNP;
}

public byte getSCPTRTR() {
return SCPTRTR;
}

public byte getSCPTRUK() {
return SCPTRUK;
}

public byte getSCPTRVT() {
return SCPTRVT;
}

public byte getSCRTAGB() {
return SCRTAGB;
}

public short getSCRTAGE() {
return SCRTAGE;
}

public byte getSCVEG() {
return SCVEG;
}

public byte getSCWORKA() {
return SCWORKA;
}

public byte getSCWORKB() {
return SCWORKB;
}

public byte getSCWORKC() {
return SCWORKC;
}

public byte getSCWORKD() {
return SCWORKD;
}

public byte getSCWORKE() {
return SCWORKE;
}

public byte getSCWORKF() {
return SCWORKF;
}

public byte getSCWORKG() {
return SCWORKG;
}

public byte getSCWORKH() {
return SCWORKH;
}

public byte getSCWORKI() {
return SCWORKI;
}

public byte getSCWORKJ() {
return SCWORKJ;
}

public byte getSCWORKK() {
return SCWORKK;
}

public byte getSCWORKL() {
return SCWORKL;
}

public byte getSPAAGEYR() {
return SPAAGEYR;
}

public short getSPADYR() {
return SPADYR;
}

public byte getSPBSPS() {
return SPBSPS;
}

public byte getSPBSTM() {
return SPBSTM;
}

public byte getSPCARA() {
return SPCARA;
}

public byte getSPCARB() {
return SPCARB;
}

public byte getSPDTDT() {
return SPDTDT;
}

public byte getSPHOSP() {
return SPHOSP;
}

public byte getSPLIFT() {
return SPLIFT;
}

public byte getSPTAXI() {
return SPTAXI;
}

public byte getSPTRAB1() {
return SPTRAB1;
}

public byte getSPTRAB10() {
return SPTRAB10;
}

public byte getSPTRAB11() {
return SPTRAB11;
}

public byte getSPTRAB12() {
return SPTRAB12;
}

public byte getSPTRAB2() {
return SPTRAB2;
}

public byte getSPTRAB3() {
return SPTRAB3;
}

public byte getSPTRAB4() {
return SPTRAB4;
}

public byte getSPTRAB5() {
return SPTRAB5;
}

public byte getSPTRAB6() {
return SPTRAB6;
}

public byte getSPTRAB7() {
return SPTRAB7;
}

public byte getSPTRAB8() {
return SPTRAB8;
}

public byte getSPTRAB9() {
return SPTRAB9;
}

public byte getSPTRAB95() {
return SPTRAB95;
}

public byte getSPTRAM1() {
return SPTRAM1;
}

public byte getSPTRAM10() {
return SPTRAM10;
}

public byte getSPTRAM11() {
return SPTRAM11;
}

public byte getSPTRAM12() {
return SPTRAM12;
}

public byte getSPTRAM13() {
return SPTRAM13;
}

public byte getSPTRAM2() {
return SPTRAM2;
}

public byte getSPTRAM3() {
return SPTRAM3;
}

public byte getSPTRAM4() {
return SPTRAM4;
}

public byte getSPTRAM5() {
return SPTRAM5;
}

public byte getSPTRAM6() {
return SPTRAM6;
}

public byte getSPTRAM7() {
return SPTRAM7;
}

public byte getSPTRAM8() {
return SPTRAM8;
}

public byte getSPTRAM85() {
return SPTRAM85;
}

public byte getSPTRAM86() {
return SPTRAM86;
}

public byte getSPTRAM9() {
return SPTRAM9;
}

public byte getSPTRO1() {
return SPTRO1;
}

public byte getSPTRO2() {
return SPTRO2;
}

public byte getSPTRO3() {
return SPTRO3;
}

public byte getSPTRO4() {
return SPTRO4;
}

public byte getSPTRO5() {
return SPTRO5;
}

public byte getSPTRO96() {
return SPTRO96;
}

public byte getSTATINA() {
return STATINA;
}

public byte getSTATINS() {
return STATINS;
}

public short getSYS1() {
return SYS1;
}

public short getSYS2() {
return SYS2;
}

public short getSYS3() {
return SYS3;
}

public double getSYSVAL() {
return SYSVAL;
}

public double getTRIG() {
return TRIG;
}

public byte getUC_P_F() {
return UC_P_F;
}

public boolean getUC_P_I() {
return UC_P_I;
}

public short getUC_P_O() {
return UC_P_O;
}

public short getUC_P_T() {
return UC_P_T;
}

public byte getUC_R_F() {
return UC_R_F;
}

public double getUC_R_I() {
return UC_R_I;
}

public short getUC_R_O() {
return UC_R_O;
}

public short getUC_R_T() {
return UC_R_T;
}

public byte getVISMON() {
return VISMON;
}

public short getVISYEAR() {
return VISYEAR;
}

public short getVITD() {
return VITD;
}

public double getW8BLDWT() {
return W8BLDWT;
}

public byte getW8BPOUT() {
return W8BPOUT;
}

public byte getW8BSOUT() {
return W8BSOUT;
}

public byte getW8GSOUT() {
return W8GSOUT;
}

public short getW8HHOUT() {
return W8HHOUT;
}

public byte getW8INDOUT() {
return W8INDOUT;
}

public byte getW8NSSEC3() {
return W8NSSEC3;
}

public byte getW8NSSEC5() {
return W8NSSEC5;
}

public byte getW8NSSEC8() {
return W8NSSEC8;
}

public boolean getW8NUROUT() {
return W8NUROUT;
}

public double getW8NURWT() {
return W8NURWT;
}

public boolean getW8SCOUT() {
return W8SCOUT;
}

public double getW8SCWT() {
return W8SCWT;
}

public boolean getW8SEC() {
return W8SEC;
}

public boolean getW8SIC() {
return W8SIC;
}

public byte getW8SIC2003R() {
return W8SIC2003R;
}

public boolean getW8SOC() {
return W8SOC;
}

public byte getW8SOC2000R() {
return W8SOC2000R;
}

public boolean getW8SSCOUT() {
return W8SSCOUT;
}

public double getW8SSCWT() {
return W8SSCWT;
}

public double getW8W1LWGT() {
return W8W1LWGT;
}

public double getW8W4LWGT() {
return W8W4LWGT;
}

public double getW8XWGT() {
return W8XWGT;
}

public double getWBC() {
return WBC;
}

public double getWEIGHT() {
return WEIGHT;
}

public byte getWHATEAT() {
return WHATEAT;
}

public byte getWHOSO4() {
return WHOSO4;
}

public byte getWHOSO5() {
return WHOSO5;
}

public byte getWHYNOBP() {
return WHYNOBP;
}

public int getWP1Q() {
return WP1Q;
}

public int getWP1SQ() {
return WP1SQ;
}

public int getWP2Q() {
return WP2Q;
}

public int getWP2SQ() {
return WP2SQ;
}

public int getWP3Q() {
return WP3Q;
}

public int getWP3SQ() {
return WP3SQ;
}

public byte getWPACT96() {
return WPACT96;
}

public byte getWPACTCA() {
return WPACTCA;
}

public byte getWPACTED() {
return WPACTED;
}

public byte getWPACTLO() {
return WPACTLO;
}

public byte getWPACTPW() {
return WPACTPW;
}

public byte getWPACTSE() {
return WPACTSE;
}

public byte getWPACTVW() {
return WPACTVW;
}

public short getWPAECP() {
return WPAECP;
}

public byte getWPANYP() {
return WPANYP;
}

public byte getWPAOTFE() {
return WPAOTFE;
}

public short getWPAOTFL() {
return WPAOTFL;
}

public byte getWPAOTFR() {
return WPAOTFR;
}

public short getWPAOTFU() {
return WPAOTFU;
}

public byte getWPAOTME() {
return WPAOTME;
}

public short getWPAOTML() {
return WPAOTML;
}

public byte getWPAOTMR() {
return WPAOTMR;
}

public short getWPAOTMU() {
return WPAOTMU;
}

public byte getWPAOTOE() {
return WPAOTOE;
}

public short getWPAOTOL() {
return WPAOTOL;
}

public byte getWPAOTOR() {
return WPAOTOR;
}

public short getWPAOTOU() {
return WPAOTOU;
}

public byte getWPAOTWE() {
return WPAOTWE;
}

public short getWPAOTWL() {
return WPAOTWL;
}

public byte getWPAOTWR() {
return WPAOTWR;
}

public short getWPAOTWU() {
return WPAOTWU;
}

public byte getWPAOTYE() {
return WPAOTYE;
}

public int getWPAOTYL() {
return WPAOTYL;
}

public byte getWPAOTYR() {
return WPAOTYR;
}

public int getWPAOTYU() {
return WPAOTYU;
}

public byte getWPAPFE() {
return WPAPFE;
}

public double getWPAPFL() {
return WPAPFL;
}

public byte getWPAPFR() {
return WPAPFR;
}

public double getWPAPFU() {
return WPAPFU;
}

public byte getWPASALE() {
return WPASALE;
}

public double getWPASALL() {
return WPASALL;
}

public byte getWPASALR() {
return WPASALR;
}

public double getWPASALU() {
return WPASALU;
}

public byte getWPBIMAE() {
return WPBIMAE;
}

public short getWPBIMAL() {
return WPBIMAL;
}

public byte getWPBIMAR() {
return WPBIMAR;
}

public short getWPBIMAU() {
return WPBIMAU;
}

public byte getWPBIWAE() {
return WPBIWAE;
}

public short getWPBIWAL() {
return WPBIWAL;
}

public byte getWPBIWAR() {
return WPBIWAR;
}

public short getWPBIWAU() {
return WPBIWAU;
}

public byte getWPBPS() {
return WPBPS;
}

public byte getWPBPSPC() {
return WPBPSPC;
}

public byte getWPBUSVE() {
return WPBUSVE;
}

public int getWPBUSVL() {
return WPBUSVL;
}

public byte getWPBUSVR() {
return WPBUSVR;
}

public int getWPBUSVU() {
return WPBUSVU;
}

public byte getWPCJ96() {
return WPCJ96;
}

public byte getWPCJAG() {
return WPCJAG;
}

public byte getWPCJBU() {
return WPCJBU;
}

public byte getWPCJDI() {
return WPCJDI;
}

public byte getWPCJFR() {
return WPCJFR;
}

public byte getWPCJPA() {
return WPCJPA;
}

public byte getWPCJSC() {
return WPCJSC;
}

public byte getWPCJSE() {
return WPCJSE;
}

public byte getWPCURP() {
return WPCURP;
}

public byte getWPCURR() {
return WPCURR;
}

public byte getWPDCDB() {
return WPDCDB;
}

public int getWPDCFV() {
return WPDCFV;
}

public byte getWPDCFVE() {
return WPDCFVE;
}

public int getWPDCFVL() {
return WPDCFVL;
}

public byte getWPDCFVR() {
return WPDCFVR;
}

public int getWPDCFVU() {
return WPDCFVU;
}

public byte getWPDCPAN() {
return WPDCPAN;
}

public byte getWPDCPDK() {
return WPDCPDK;
}

public byte getWPDCPMU() {
return WPDCPMU;
}

public byte getWPDCPRG() {
return WPDCPRG;
}

public byte getWPDCPSI() {
return WPDCPSI;
}

public byte getWPDCRF() {
return WPDCRF;
}

public byte getWPDCW() {
return WPDCW;
}

public int getWPDCWA() {
return WPDCWA;
}

public byte getWPDCWAE() {
return WPDCWAE;
}

public short getWPDCWAL() {
return WPDCWAL;
}

public byte getWPDCWAR() {
return WPDCWAR;
}

public int getWPDCWAU() {
return WPDCWAU;
}

public byte getWPDCWP95() {
return WPDCWP95;
}

public byte getWPDCWPDB() {
return WPDCWPDB;
}

public byte getWPDCWPFR() {
return WPDCWPFR;
}

public byte getWPDCWPIN() {
return WPDCWPIN;
}

public byte getWPDCWPLA() {
return WPDCWPLA;
}

public byte getWPDCWPSP() {
return WPDCWPSP;
}

public byte getWPDCWPSV() {
return WPDCWPSV;
}

public int getWPDDFV() {
return WPDDFV;
}

public byte getWPDDFVE() {
return WPDDFVE;
}

public int getWPDDFVL() {
return WPDDFVL;
}

public byte getWPDDFVR() {
return WPDDFVR;
}

public int getWPDDFVU() {
return WPDDFVU;
}

public byte getWPDESP() {
return WPDESP;
}

public byte getWPDESPC() {
return WPDESPC;
}

public byte getWPDPSP() {
return WPDPSP;
}

public byte getWPEARLY() {
return WPEARLY;
}

public byte getWPEC() {
return WPEC;
}

public byte getWPECA() {
return WPECA;
}

public byte getWPECPP() {
return WPECPP;
}

public byte getWPERCP() {
return WPERCP;
}

public byte getWPESJME() {
return WPESJME;
}

public short getWPESJML() {
return WPESJML;
}

public byte getWPESJMR() {
return WPESJMR;
}

public short getWPESJMU() {
return WPESJMU;
}

public byte getWPEXW() {
return WPEXW;
}

public byte getWPFFCURP() {
return WPFFCURP;
}

public byte getWPFFDCDB() {
return WPFFDCDB;
}

public byte getWPFFPENT() {
return WPFFPENT;
}

public byte getWPFFRECP() {
return WPFFRECP;
}

public byte getWPFFYBS() {
return WPFFYBS;
}

public byte getWPFINFO() {
return WPFINFO;
}

public byte getWPFSAPC() {
return WPFSAPC;
}

public byte getWPFSC() {
return WPFSC;
}

public byte getWPFSEC() {
return WPFSEC;
}

public byte getWPHLWZ() {
return WPHLWZ;
}

public byte getWPIFSAC() {
return WPIFSAC;
}

public byte getWPIFSCO() {
return WPIFSCO;
}

public byte getWPIFSEM() {
return WPIFSEM;
}

public byte getWPIFSFA() {
return WPIFSFA;
}

public byte getWPIFSFR() {
return WPIFSFR;
}

public byte getWPIFSNO() {
return WPIFSNO;
}

public byte getWPIFSPR() {
return WPIFSPR;
}

public byte getWPIFSRE() {
return WPIFSRE;
}

public byte getWPIFSRP() {
return WPIFSRP;
}

public byte getWPINCT() {
return WPINCT;
}

public byte getWPINFS95() {
return WPINFS95;
}

public int getWPIRLS() {
return WPIRLS;
}

public byte getWPIRLSE() {
return WPIRLSE;
}

public short getWPIRLSL() {
return WPIRLSL;
}

public byte getWPIRLSR() {
return WPIRLSR;
}

public int getWPIRLSU() {
return WPIRLSU;
}

public byte getWPIRP95() {
return WPIRP95;
}

public byte getWPIRPAN() {
return WPIRPAN;
}

public byte getWPIRPDB() {
return WPIRPDB;
}

public byte getWPIRPFR() {
return WPIRPFR;
}

public byte getWPIRPIV() {
return WPIRPIV;
}

public byte getWPIRPLA() {
return WPIRPLA;
}

public byte getWPIRPSP() {
return WPIRPSP;
}

public byte getWPIRPSV() {
return WPIRPSV;
}

public byte getWPLFTP95() {
return WPLFTP95;
}

public byte getWPLFTPAF() {
return WPLFTPAF;
}

public byte getWPLFTPCH() {
return WPLFTPCH;
}

public byte getWPLFTPEL() {
return WPLFTPEL;
}

public byte getWPLFTPOF() {
return WPLFTPOF;
}

public byte getWPLFTPRE() {
return WPLFTPRE;
}

public byte getWPLFTPRT() {
return WPLFTPRT;
}

public byte getWPLIMWK() {
return WPLIMWK;
}

public byte getWPLJO95() {
return WPLJO95;
}

public byte getWPLJOBM() {
return WPLJOBM;
}

public byte getWPLJOCA() {
return WPLJOCA;
}

public byte getWPLJOCL() {
return WPLJOCL;
}

public byte getWPLJODI() {
return WPLJODI;
}

public byte getWPLJOFE() {
return WPLJOFE;
}

public byte getWPLJOIL() {
return WPLJOIL;
}

public byte getWPLJOM85() {
return WPLJOM85;
}

public byte getWPLJOM86() {
return WPLJOM86;
}

public byte getWPLJOMBE() {
return WPLJOMBE;
}

public byte getWPLJOMCA() {
return WPLJOMCA;
}

public byte getWPLJOMCF() {
return WPLJOMCF;
}

public byte getWPLJOMCL() {
return WPLJOMCL;
}

public byte getWPLJOMDI() {
return WPLJOMDI;
}

public byte getWPLJOMER() {
return WPLJOMER;
}

public byte getWPLJOMFE() {
return WPLJOMFE;
}

public byte getWPLJOMIL() {
return WPLJOMIL;
}

public byte getWPLJOMME() {
return WPLJOMME;
}

public byte getWPLJOMMO() {
return WPLJOMMO;
}

public byte getWPLJOMO() {
return WPLJOMO;
}

public byte getWPLJOMPR() {
return WPLJOMPR;
}

public byte getWPLJOMRE() {
return WPLJOMRE;
}

public byte getWPLJOMSA() {
return WPLJOMSA;
}

public byte getWPLJOMSE() {
return WPLJOMSE;
}

public byte getWPLJOMSP() {
return WPLJOMSP;
}

public byte getWPLJOMTI() {
return WPLJOMTI;
}

public byte getWPLJOMVO() {
return WPLJOMVO;
}

public byte getWPLJORE() {
return WPLJORE;
}

public byte getWPLJOSP() {
return WPLJOSP;
}

public byte getWPLJOTI() {
return WPLJOTI;
}

public byte getWPLJOVO() {
return WPLJOVO;
}

public int getWPLUMPA() {
return WPLUMPA;
}

public byte getWPLUMPAE() {
return WPLUMPAE;
}

public int getWPLUMPAL() {
return WPLUMPAL;
}

public byte getWPLUMPAR() {
return WPLUMPAR;
}

public int getWPLUMPAU() {
return WPLUMPAU;
}

public byte getWPLUMPE() {
return WPLUMPE;
}

public double getWPLUMPL() {
return WPLUMPL;
}

public byte getWPLUMPR() {
return WPLUMPR;
}

public byte getWPLUMPS() {
return WPLUMPS;
}

public double getWPLUMPU() {
return WPLUMPU;
}

public int getWPMALA() {
return WPMALA;
}

public byte getWPMANPP() {
return WPMANPP;
}

public byte getWPMANSP() {
return WPMANSP;
}

public byte getWPMFQ() {
return WPMFQ;
}

public byte getWPMFRAC() {
return WPMFRAC;
}

public byte getWPMHIE() {
return WPMHIE;
}

public short getWPMHIL() {
return WPMHIL;
}

public byte getWPMHIR() {
return WPMHIR;
}

public short getWPMHIU() {
return WPMHIU;
}

public byte getWPMORE() {
return WPMORE;
}

public int getWPMPAH() {
return WPMPAH;
}

public int getWPMSAH() {
return WPMSAH;
}

public byte getWPMSFQ() {
return WPMSFQ;
}

public int getWPMSH() {
return WPMSH;
}

public byte getWPMSQ() {
return WPMSQ;
}

public byte getWPMSSQ() {
return WPMSSQ;
}

public byte getWPMSTQ() {
return WPMSTQ;
}

public byte getWPMTQ() {
return WPMTQ;
}

public byte getWPMYNJ() {
return WPMYNJ;
}

public byte getWPNEW() {
return WPNEW;
}

public boolean getWPNEWP() {
return WPNEWP;
}

public byte getWPNPENS() {
return WPNPENS;
}

public byte getWPOJ() {
return WPOJ;
}

public byte getWPOJ2() {
return WPOJ2;
}

public byte getWPOJ3() {
return WPOJ3;
}

public byte getWPOJ4() {
return WPOJ4;
}

public byte getWPOJ5() {
return WPOJ5;
}

public byte getWPOWB() {
return WPOWB;
}

public byte getWPOWB2() {
return WPOWB2;
}

public byte getWPOWB3() {
return WPOWB3;
}

public byte getWPOWB4() {
return WPOWB4;
}

public byte getWPOWB5() {
return WPOWB5;
}

public byte getWPOWKAF() {
return WPOWKAF;
}

public byte getWPOWKDO() {
return WPOWKDO;
}

public byte getWPOWKEP() {
return WPOWKEP;
}

public byte getWPOWKEW() {
return WPOWKEW;
}

public byte getWPOWKIF() {
return WPOWKIF;
}

public byte getWPOWKKE() {
return WPOWKKE;
}

public byte getWPOWKST() {
return WPOWKST;
}

public int getWPPA() {
return WPPA;
}

public byte getWPPAAE() {
return WPPAAE;
}

public int getWPPAAL() {
return WPPAAL;
}

public byte getWPPAAR() {
return WPPAAR;
}

public int getWPPAAU() {
return WPPAAU;
}

public byte getWPPAM() {
return WPPAM;
}

public byte getWPPATE() {
return WPPATE;
}

public int getWPPATL() {
return WPPATL;
}

public byte getWPPATR() {
return WPPATR;
}

public int getWPPATU() {
return WPPATU;
}

public byte getWPPENAE() {
return WPPENAE;
}

public double getWPPENAL() {
return WPPENAL;
}

public byte getWPPENAR() {
return WPPENAR;
}

public double getWPPENAU() {
return WPPENAU;
}

public byte getWPPENN() {
return WPPENN;
}

public byte getWPPENT() {
return WPPENT;
}

public byte getWPPENTE() {
return WPPENTE;
}

public double getWPPENTL() {
return WPPENTL;
}

public byte getWPPENTR() {
return WPPENTR;
}

public double getWPPENTU() {
return WPPENTU;
}

public byte getWPPFVE() {
return WPPFVE;
}

public double getWPPFVL() {
return WPPFVL;
}

public byte getWPPFVR() {
return WPPFVR;
}

public double getWPPFVU() {
return WPPFVU;
}

public byte getWPPREV() {
return WPPREV;
}

public byte getWPPROFE() {
return WPPROFE;
}

public int getWPPROFL() {
return WPPROFL;
}

public byte getWPPROFR() {
return WPPROFR;
}

public int getWPPROFU() {
return WPPROFU;
}

public byte getWPPS() {
return WPPS;
}

public byte getWPPS95() {
return WPPS95;
}

public byte getWPPSAF() {
return WPPSAF;
}

public byte getWPPSEL() {
return WPPSEL;
}

public byte getWPPSEX() {
return WPPSEX;
}

public byte getWPPSM85() {
return WPPSM85;
}

public byte getWPPSM86() {
return WPPSM86;
}

public byte getWPPSMAF() {
return WPPSMAF;
}

public byte getWPPSMAG() {
return WPPSMAG;
}

public byte getWPPSMAL() {
return WPPSMAL;
}

public byte getWPPSMDL() {
return WPPSMDL;
}

public byte getWPPSMEL() {
return WPPSMEL;
}

public byte getWPPSMEX() {
return WPPSMEX;
}

public byte getWPPSMHR() {
return WPPSMHR;
}

public byte getWPPSMOT() {
return WPPSMOT;
}

public byte getWPPSOT() {
return WPPSOT;
}

public byte getWPPSPC() {
return WPPSPC;
}

public boolean getWPPYRFE() {
return WPPYRFE;
}

public short getWPPYRFL() {
return WPPYRFL;
}

public boolean getWPPYRFR() {
return WPPYRFR;
}

public boolean getWPPYRFU() {
return WPPYRFU;
}

public byte getWPPYRME() {
return WPPYRME;
}

public double getWPPYRML() {
return WPPYRML;
}

public byte getWPPYRMR() {
return WPPYRMR;
}

public double getWPPYRMU() {
return WPPYRMU;
}

public byte getWPPYROE() {
return WPPYROE;
}

public short getWPPYROL() {
return WPPYROL;
}

public byte getWPPYROR() {
return WPPYROR;
}

public short getWPPYROU() {
return WPPYROU;
}

public byte getWPPYRWE() {
return WPPYRWE;
}

public short getWPPYRWL() {
return WPPYRWL;
}

public byte getWPPYRWR() {
return WPPYRWR;
}

public short getWPPYRWU() {
return WPPYRWU;
}

public byte getWPPYRYE() {
return WPPYRYE;
}

public double getWPPYRYL() {
return WPPYRYL;
}

public byte getWPPYRYR() {
return WPPYRYR;
}

public double getWPPYRYU() {
return WPPYRYU;
}

public byte getWPQN() {
return WPQN;
}

public byte getWPRC95() {
return WPRC95;
}

public byte getWPRCM85() {
return WPRCM85;
}

public byte getWPRCM86() {
return WPRCM86;
}

public byte getWPRCMAF() {
return WPRCMAF;
}

public byte getWPRCMMO() {
return WPRCMMO;
}

public byte getWPRCMNK() {
return WPRCMNK;
}

public byte getWPRCMO() {
return WPRCMO;
}

public byte getWPRCMOH() {
return WPRCMOH;
}

public byte getWPRCMPU() {
return WPRCMPU;
}

public byte getWPRCMRE() {
return WPRCMRE;
}

public byte getWPRCMRI() {
return WPRCMRI;
}

public byte getWPRCMST() {
return WPRCMST;
}

public byte getWPRCMUN() {
return WPRCMUN;
}

public byte getWPRCPU() {
return WPRCPU;
}

public byte getWPRCRE() {
return WPRCRE;
}

public byte getWPRCRI() {
return WPRCRI;
}

public byte getWPRCST() {
return WPRCST;
}

public byte getWPREA95() {
return WPREA95;
}

public byte getWPREA96() {
return WPREA96;
}

public byte getWPREACH() {
return WPREACH;
}

public byte getWPREADT() {
return WPREADT;
}

public byte getWPREAEN() {
return WPREAEN;
}

public byte getWPREAFA() {
return WPREAFA;
}

public byte getWPREAFI() {
return WPREAFI;
}

public byte getWPREAM85() {
return WPREAM85;
}

public byte getWPREAM86() {
return WPREAM86;
}

public byte getWPREAM96() {
return WPREAM96;
}

public byte getWPREAMCH() {
return WPREAMCH;
}

public byte getWPREAMDT() {
return WPREAMDT;
}

public byte getWPREAMEN() {
return WPREAMEN;
}

public byte getWPREAMFA() {
return WPREAMFA;
}

public byte getWPREAMFI() {
return WPREAMFI;
}

public byte getWPREAMNO() {
return WPREAMNO;
}

public byte getWPREAMOH() {
return WPREAMOH;
}

public byte getWPREAMRE() {
return WPREAMRE;
}

public byte getWPREAMRH() {
return WPREAMRH;
}

public byte getWPREAMST() {
return WPREAMST;
}

public byte getWPREAMVR() {
return WPREAMVR;
}

public byte getWPREAMYO() {
return WPREAMYO;
}

public byte getWPREANO() {
return WPREANO;
}

public byte getWPREAOH() {
return WPREAOH;
}

public byte getWPREARE() {
return WPREARE;
}

public byte getWPREARH() {
return WPREARH;
}

public byte getWPREAST() {
return WPREAST;
}

public byte getWPREAVR() {
return WPREAVR;
}

public byte getWPREAYO() {
return WPREAYO;
}

public byte getWPRGHX() {
return WPRGHX;
}

public byte getWPRPENS() {
return WPRPENS;
}

public byte getWPRR95() {
return WPRR95;
}

public byte getWPRR96() {
return WPRR96;
}

public byte getWPRRAG() {
return WPRRAG;
}

public byte getWPRRCH() {
return WPRRCH;
}

public byte getWPRRDT() {
return WPRRDT;
}

public byte getWPRREN() {
return WPRREN;
}

public byte getWPRRFA() {
return WPRRFA;
}

public byte getWPRRFI() {
return WPRRFI;
}

public byte getWPRRM85() {
return WPRRM85;
}

public byte getWPRRM86() {
return WPRRM86;
}

public byte getWPRRM96() {
return WPRRM96;
}

public byte getWPRRMAF() {
return WPRRMAF;
}

public byte getWPRRMAG() {
return WPRRMAG;
}

public byte getWPRRMCH() {
return WPRRMCH;
}

public byte getWPRRMDT() {
return WPRRMDT;
}

public byte getWPRRMEN() {
return WPRRMEN;
}

public byte getWPRRMFA() {
return WPRRMFA;
}

public byte getWPRRMFI() {
return WPRRMFI;
}

public byte getWPRRMLI() {
return WPRRMLI;
}

public byte getWPRRMOH() {
return WPRRMOH;
}

public byte getWPRRMRE() {
return WPRRMRE;
}

public byte getWPRRMRH() {
return WPRRMRH;
}

public byte getWPRRMST() {
return WPRRMST;
}

public byte getWPRRMYO() {
return WPRRMYO;
}

public byte getWPRROH() {
return WPRROH;
}

public byte getWPRRRE() {
return WPRRRE;
}

public byte getWPRRRH() {
return WPRRRH;
}

public byte getWPRRST() {
return WPRRST;
}

public byte getWPRRYO() {
return WPRRYO;
}

public byte getWPRSAD1() {
return WPRSAD1;
}

public byte getWPRSAD10() {
return WPRSAD10;
}

public byte getWPRSAD11() {
return WPRSAD11;
}

public byte getWPRSAD12() {
return WPRSAD12;
}

public byte getWPRSAD13() {
return WPRSAD13;
}

public byte getWPRSAD2() {
return WPRSAD2;
}

public byte getWPRSAD3() {
return WPRSAD3;
}

public byte getWPRSAD4() {
return WPRSAD4;
}

public byte getWPRSAD5() {
return WPRSAD5;
}

public byte getWPRSAD6() {
return WPRSAD6;
}

public byte getWPRSAD7() {
return WPRSAD7;
}

public byte getWPRSAD8() {
return WPRSAD8;
}

public byte getWPRSAD9() {
return WPRSAD9;
}

public byte getWPSN() {
return WPSN;
}

public byte getWPSPAM() {
return WPSPAM;
}

public byte getWPSPAW() {
return WPSPAW;
}

public byte getWPSPD() {
return WPSPD;
}

public byte getWPSPD1A() {
return WPSPD1A;
}

public byte getWPSPD1B() {
return WPSPD1B;
}

public byte getWPSPD2() {
return WPSPD2;
}

public byte getWPSPD3() {
return WPSPD3;
}

public byte getWPSPD3A() {
return WPSPD3A;
}

public byte getWPSPD3M() {
return WPSPD3M;
}

public short getWPSPD3Y() {
return WPSPD3Y;
}

public byte getWPSPD4() {
return WPSPD4;
}

public byte getWPSPD5M() {
return WPSPD5M;
}

public byte getWPSPD5Y() {
return WPSPD5Y;
}

public byte getWPSPD6() {
return WPSPD6;
}

public int getWPSPOU() {
return WPSPOU;
}

public byte getWPSPOUP() {
return WPSPOUP;
}

public byte getWPSPTU() {
return WPSPTU;
}

public byte getWPSPTUA() {
return WPSPTUA;
}

public byte getWPSPY() {
return WPSPY;
}

public byte getWPSRUL() {
return WPSRUL;
}

public byte getWPTHPFE() {
return WPTHPFE;
}

public short getWPTHPFL() {
return WPTHPFL;
}

public byte getWPTHPFR() {
return WPTHPFR;
}

public short getWPTHPFU() {
return WPTHPFU;
}

public byte getWPTHPME() {
return WPTHPME;
}

public short getWPTHPML() {
return WPTHPML;
}

public byte getWPTHPMR() {
return WPTHPMR;
}

public short getWPTHPMU() {
return WPTHPMU;
}

public byte getWPTHPOE() {
return WPTHPOE;
}

public short getWPTHPOL() {
return WPTHPOL;
}

public byte getWPTHPOR() {
return WPTHPOR;
}

public short getWPTHPOU() {
return WPTHPOU;
}

public byte getWPTHPWE() {
return WPTHPWE;
}

public short getWPTHPWL() {
return WPTHPWL;
}

public byte getWPTHPWR() {
return WPTHPWR;
}

public short getWPTHPWU() {
return WPTHPWU;
}

public byte getWPTHPYE() {
return WPTHPYE;
}

public int getWPTHPYL() {
return WPTHPYL;
}

public byte getWPTHPYR() {
return WPTHPYR;
}

public int getWPTHPYU() {
return WPTHPYU;
}

public byte getWPUPAFE() {
return WPUPAFE;
}

public short getWPUPAFL() {
return WPUPAFL;
}

public byte getWPUPAFR() {
return WPUPAFR;
}

public short getWPUPAFU() {
return WPUPAFU;
}

public byte getWPUPAME() {
return WPUPAME;
}

public short getWPUPAML() {
return WPUPAML;
}

public byte getWPUPAMR() {
return WPUPAMR;
}

public short getWPUPAMU() {
return WPUPAMU;
}

public int getWPUPAOE() {
return WPUPAOE;
}

public short getWPUPAOL() {
return WPUPAOL;
}

public byte getWPUPAOR() {
return WPUPAOR;
}

public short getWPUPAOU() {
return WPUPAOU;
}

public byte getWPUPAWE() {
return WPUPAWE;
}

public short getWPUPAWL() {
return WPUPAWL;
}

public byte getWPUPAWR() {
return WPUPAWR;
}

public short getWPUPAWU() {
return WPUPAWU;
}

public byte getWPUPAYE() {
return WPUPAYE;
}

public byte getWPUPAYL() {
return WPUPAYL;
}

public byte getWPUPAYR() {
return WPUPAYR;
}

public short getWPUPAYU() {
return WPUPAYU;
}

public byte getWPVBUSE() {
return WPVBUSE;
}

public int getWPVBUSL() {
return WPVBUSL;
}

public byte getWPVBUSR() {
return WPVBUSR;
}

public int getWPVBUSU() {
return WPVBUSU;
}

public byte getWPWLYYE() {
return WPWLYYE;
}

public int getWPWLYYL() {
return WPWLYYL;
}

public byte getWPWLYYR() {
return WPWLYYR;
}

public int getWPWLYYU() {
return WPWLYYU;
}

public byte getWPWYJ95() {
return WPWYJ95;
}

public byte getWPWYJBU() {
return WPWYJBU;
}

public byte getWPWYJCA() {
return WPWYJCA;
}

public byte getWPWYJCO() {
return WPWYJCO;
}

public byte getWPWYJFB() {
return WPWYJFB;
}

public byte getWPWYJFI() {
return WPWYJFI;
}

public byte getWPWYJHO() {
return WPWYJHO;
}

public byte getWPWYJM85() {
return WPWYJM85;
}

public byte getWPWYJM86() {
return WPWYJM86;
}

public byte getWPWYJMBC() {
return WPWYJMBC;
}

public byte getWPWYJMBU() {
return WPWYJMBU;
}

public byte getWPWYJMCA() {
return WPWYJMCA;
}

public byte getWPWYJMCH() {
return WPWYJMCH;
}

public byte getWPWYJMCO() {
return WPWYJMCO;
}

public byte getWPWYJMFB() {
return WPWYJMFB;
}

public byte getWPWYJMFI() {
return WPWYJMFI;
}

public byte getWPWYJMHF() {
return WPWYJMHF;
}

public byte getWPWYJMHH() {
return WPWYJMHH;
}

public byte getWPWYJMHO() {
return WPWYJMHO;
}

public byte getWPWYJMLO() {
return WPWYJMLO;
}

public byte getWPWYJMMO() {
return WPWYJMMO;
}

public byte getWPWYJMON() {
return WPWYJMON;
}

public byte getWPWYJMPA() {
return WPWYJMPA;
}

public byte getWPWYJMPH() {
return WPWYJMPH;
}

public byte getWPWYJMTI() {
return WPWYJMTI;
}

public byte getWPWYJMTO() {
return WPWYJMTO;
}

public byte getWPWYJON() {
return WPWYJON;
}

public byte getWPWYJPA() {
return WPWYJPA;
}

public byte getWPWYJREA() {
return WPWYJREA;
}

public byte getWPWYJTI() {
return WPWYJTI;
}

public byte getWPWYN85() {
return WPWYN85;
}

public byte getWPWYNCA() {
return WPWYNCA;
}

public byte getWPWYNCH() {
return WPWYNCH;
}

public byte getWPWYNEA() {
return WPWYNEA;
}

public byte getWPWYNEM() {
return WPWYNEM;
}

public byte getWPWYNFA() {
return WPWYNFA;
}

public byte getWPWYNM85() {
return WPWYNM85;
}

public byte getWPWYNM86() {
return WPWYNM86;
}

public boolean getWPWYNMAB() {
return WPWYNMAB;
}

public byte getWPWYNMCA() {
return WPWYNMCA;
}

public byte getWPWYNMCH() {
return WPWYNMCH;
}

public byte getWPWYNMCO() {
return WPWYNMCO;
}

public byte getWPWYNMDE() {
return WPWYNMDE;
}

public byte getWPWYNMEA() {
return WPWYNMEA;
}

public byte getWPWYNMEM() {
return WPWYNMEM;
}

public byte getWPWYNMFA() {
return WPWYNMFA;
}

public byte getWPWYNMLH() {
return WPWYNMLH;
}

public byte getWPWYNMLO() {
return WPWYNMLO;
}

public byte getWPWYNMMO() {
return WPWYNMMO;
}

public byte getWPWYNMO() {
return WPWYNMO;
}

public byte getWPWYNMOH() {
return WPWYNMOH;
}

public byte getWPWYNMOR() {
return WPWYNMOR;
}

public byte getWPWYNMOU() {
return WPWYNMOU;
}

public byte getWPWYNMRE() {
return WPWYNMRE;
}

public byte getWPWYNMRH() {
return WPWYNMRH;
}

public byte getWPWYNMTI() {
return WPWYNMTI;
}

public byte getWPWYNMVR() {
return WPWYNMVR;
}

public byte getWPWYNOH() {
return WPWYNOH;
}

public byte getWPWYNOU() {
return WPWYNOU;
}

public byte getWPWYNRE() {
return WPWYNRE;
}

public byte getWPWYNRH() {
return WPWYNRH;
}

public byte getWPWYNTI() {
return WPWYNTI;
}

public byte getWPWYNVR() {
return WPWYNVR;
}

public byte getWPWYW95() {
return WPWYW95;
}

public byte getWPWYWEN() {
return WPWYWEN;
}

public byte getWPWYWM85() {
return WPWYWM85;
}

public byte getWPWYWM86() {
return WPWYWM86;
}

public byte getWPWYWMCH() {
return WPWYWMCH;
}

public byte getWPWYWMEN() {
return WPWYWMEN;
}

public byte getWPWYWMFI() {
return WPWYWMFI;
}

public byte getWPWYWMHE() {
return WPWYWMHE;
}

public byte getWPWYWMHH() {
return WPWYWMHH;
}

public byte getWPWYWMMO() {
return WPWYWMMO;
}

public byte getWPWYWMO() {
return WPWYWMO;
}

public byte getWPWYWMOH() {
return WPWYWMOH;
}

public byte getWPWYWMRH() {
return WPWYWMRH;
}

public byte getWPWYWMSU() {
return WPWYWMSU;
}

public byte getWPWYWOH() {
return WPWYWOH;
}

public byte getWPWYWRH() {
return WPWYWRH;
}

public byte getWPWYWSU() {
return WPWYWSU;
}

public byte getWPYFRAC() {
return WPYFRAC;
}

public byte getWPYST95() {
return WPYST95;
}

public byte getWPYSTAF() {
return WPYSTAF;
}

public byte getWPYSTCH() {
return WPYSTCH;
}

public byte getWPYSTEN() {
return WPYSTEN;
}

public byte getWPYSTFA() {
return WPYSTFA;
}

public byte getWPYSTFI() {
return WPYSTFI;
}

public byte getWPYSTM85() {
return WPYSTM85;
}

public byte getWPYSTM86() {
return WPYSTM86;
}

public byte getWPYSTMAF() {
return WPYSTMAF;
}

public byte getWPYSTMAG() {
return WPYSTMAG;
}

public byte getWPYSTMCH() {
return WPYSTMCH;
}

public byte getWPYSTMCO() {
return WPYSTMCO;
}

public byte getWPYSTMEN() {
return WPYSTMEN;
}

public byte getWPYSTMFA() {
return WPYSTMFA;
}

public byte getWPYSTMFI() {
return WPYSTMFI;
}

public byte getWPYSTMMO() {
return WPYSTMMO;
}

public byte getWPYSTMO() {
return WPYSTMO;
}

public byte getWPYSTMOH() {
return WPYSTMOH;
}

public byte getWPYSTMOU() {
return WPYSTMOU;
}

public byte getWPYSTMPA() {
return WPYSTMPA;
}

public byte getWPYSTMRE() {
return WPYSTMRE;
}

public byte getWPYSTMRH() {
return WPYSTMRH;
}

public byte getWPYSTMST() {
return WPYSTMST;
}

public byte getWPYSTMTI() {
return WPYSTMTI;
}

public byte getWPYSTMVR() {
return WPYSTMVR;
}

public byte getWPYSTMYO() {
return WPYSTMYO;
}

public byte getWPYSTOH() {
return WPYSTOH;
}

public byte getWPYSTOU() {
return WPYSTOU;
}

public byte getWPYSTPA() {
return WPYSTPA;
}

public byte getWPYSTPM() {
return WPYSTPM;
}

public byte getWPYSTRE() {
return WPYSTRE;
}

public byte getWPYSTRH() {
return WPYSTRH;
}

public byte getWPYSTTI() {
return WPYSTTI;
}

public byte getWPYSTVR() {
return WPYSTVR;
}

public byte getWPYSTYO() {
return WPYSTYO;
}

public byte getWTC_P_F() {
return WTC_P_F;
}

public double getWTC_P_I() {
return WTC_P_I;
}

public short getWTC_P_O() {
return WTC_P_O;
}

public short getWTC_P_T() {
return WTC_P_T;
}

public byte getWTC_R_F() {
return WTC_R_F;
}

public double getWTC_R_I() {
return WTC_R_I;
}

public short getWTC_R_O() {
return WTC_R_O;
}

public short getWTC_R_T() {
return WTC_R_T;
}

public ELSA_Wave8_Record(String line) {
init_0_999(line);
init_1000_1999(line);
init_2000_2999(line);
init_3000_3999(line);
init_4000_4999(line);
init_5000_5999(line);
init_6000_6999(line);
init_7000_7867(line);
}
public void init_0_999(String line) {
initIDAUNIQ(s[0]);
initIDAHH(s[1]);
initPERID(s[2]);
initSAMPTYP(s[3]);
initFINSTAT(s[4]);
initW8INDOUT(s[5]);
initW8HHOUT(s[6]);
initW8SCOUT(s[7]);
initW8SSCOUT(s[8]);
initW8NUROUT(s[9]);
initW8BSOUT(s[10]);
initIINTDATM(s[11]);
initIINTDATY(s[12]);
initFFERROR(s[13]);
initCOUPLE(s[14]);
initCPID(s[15]);
initCHINHH(s[16]);
initCHOUTHH(s[17]);
initGCINHH(s[18]);
initMAINHH(s[19]);
initPAINHH(s[20]);
initHHTOT(s[21]);
initWHOSO1(s[22]);
initWHOSO2(s[23]);
initWHOSO3(s[24]);
initWHOSO4(s[25]);
initWHOSO5(s[26]);
initASKINST(s[27]);
initASKPX(s[28]);
initCONCUR(s[29]);
initORDCON(s[30]);
initDHIASEP(s[31]);
initFUTYPE(s[32]);
initHHRESP(s[33]);
initDHSAMEH(s[34]);
initHOTENU(s[35]);
initDHWORK(s[36]);
initDHR(s[37]);
initDHR2(s[38]);
initDHR3(s[39]);
initDHR4(s[40]);
initDHR5(s[41]);
initDHR6(s[42]);
initDHR7(s[43]);
initDHR8(s[44]);
initDHR9(s[45]);
initDHR10(s[46]);
initDHR11(s[47]);
initDHR12(s[48]);
initDHR13(s[49]);
initDHR14(s[50]);
initDHR15(s[51]);
initDHR16(s[52]);
initDHPA(s[53]);
initDHPB(s[54]);
initDHC(s[55]);
initDHCS(s[56]);
initDHCAG(s[57]);
initDHCR01(s[58]);
initDHCR02(s[59]);
initDHCR03(s[60]);
initDHCR04(s[61]);
initDHCR05(s[62]);
initDHCR06(s[63]);
initDHCR07(s[64]);
initDHCR08(s[65]);
initDHCR09(s[66]);
initDHCR10(s[67]);
initDHCR11(s[68]);
initDHCR12(s[69]);
initDHCR13(s[70]);
initDHCR14(s[71]);
initDHCR15(s[72]);
initDHCR16(s[73]);
initDHPA2(s[74]);
initDHPB2(s[75]);
initDHC2(s[76]);
initDHCS2(s[77]);
initDHCAG2(s[78]);
initDHCR17(s[79]);
initDHCR18(s[80]);
initDHCR19(s[81]);
initDHCR20(s[82]);
initDHCR21(s[83]);
initDHCR22(s[84]);
initDHCR23(s[85]);
initDHCR24(s[86]);
initDHCR25(s[87]);
initDHCR26(s[88]);
initDHCR27(s[89]);
initDHCR28(s[90]);
initDHCR29(s[91]);
initDHCR30(s[92]);
initDHCR31(s[93]);
initDHCR32(s[94]);
initDHPA3(s[95]);
initDHPB3(s[96]);
initDHC3(s[97]);
initDHCS3(s[98]);
initDHCAG3(s[99]);
initDHCR33(s[100]);
initDHCR34(s[101]);
initDHCR35(s[102]);
initDHCR36(s[103]);
initDHCR37(s[104]);
initDHCR38(s[105]);
initDHCR39(s[106]);
initDHCR40(s[107]);
initDHCR41(s[108]);
initDHCR42(s[109]);
initDHCR43(s[110]);
initDHCR44(s[111]);
initDHCR45(s[112]);
initDHCR46(s[113]);
initDHCR47(s[114]);
initDHCR48(s[115]);
initDHPA4(s[116]);
initDHPB4(s[117]);
initDHC4(s[118]);
initDHCS4(s[119]);
initDHCAG4(s[120]);
initDHCR49(s[121]);
initDHCR50(s[122]);
initDHCR51(s[123]);
initDHCR52(s[124]);
initDHCR53(s[125]);
initDHCR54(s[126]);
initDHCR55(s[127]);
initDHCR56(s[128]);
initDHCR57(s[129]);
initDHCR58(s[130]);
initDHCR59(s[131]);
initDHCR60(s[132]);
initDHCR61(s[133]);
initDHCR62(s[134]);
initDHCR63(s[135]);
initDHCR64(s[136]);
initDHPA5(s[137]);
initDHPB5(s[138]);
initDHC5(s[139]);
initDHCS5(s[140]);
initDHCAG5(s[141]);
initDHCR65(s[142]);
initDHCR66(s[143]);
initDHCR67(s[144]);
initDHCR68(s[145]);
initDHCR69(s[146]);
initDHCR70(s[147]);
initDHCR71(s[148]);
initDHCR72(s[149]);
initDHCR73(s[150]);
initDHCR74(s[151]);
initDHCR75(s[152]);
initDHCR76(s[153]);
initDHCR77(s[154]);
initDHCR78(s[155]);
initDHCR79(s[156]);
initDHCR80(s[157]);
initDHPA6(s[158]);
initDHPB6(s[159]);
initDHC6(s[160]);
initDHCS6(s[161]);
initDHCAG6(s[162]);
initDHCR81(s[163]);
initDHCR82(s[164]);
initDHCR83(s[165]);
initDHCR84(s[166]);
initDHCR85(s[167]);
initDHCR86(s[168]);
initDHCR87(s[169]);
initDHCR88(s[170]);
initDHCR89(s[171]);
initDHCR90(s[172]);
initDHCR91(s[173]);
initDHCR92(s[174]);
initDHCR93(s[175]);
initDHCR94(s[176]);
initDHCR95(s[177]);
initDHCR96(s[178]);
initDHPA7(s[179]);
initDHPB7(s[180]);
initDHC7(s[181]);
initDHCS7(s[182]);
initDHCAG7(s[183]);
initDHCR97(s[184]);
initDHCR98(s[185]);
initDHCR99(s[186]);
initDHCR100(s[187]);
initDHCR101(s[188]);
initDHCR102(s[189]);
initDHCR103(s[190]);
initDHCR104(s[191]);
initDHCR105(s[192]);
initDHCR106(s[193]);
initDHCR107(s[194]);
initDHCR108(s[195]);
initDHCR109(s[196]);
initDHCR110(s[197]);
initDHCR111(s[198]);
initDHCR112(s[199]);
initDHPA8(s[200]);
initDHPB8(s[201]);
initDHC8(s[202]);
initDHCS8(s[203]);
initDHCAG8(s[204]);
initDHCR113(s[205]);
initDHCR114(s[206]);
initDHCR115(s[207]);
initDHCR116(s[208]);
initDHCR117(s[209]);
initDHCR118(s[210]);
initDHCR119(s[211]);
initDHCR120(s[212]);
initDHCR121(s[213]);
initDHCR122(s[214]);
initDHCR123(s[215]);
initDHCR124(s[216]);
initDHCR125(s[217]);
initDHCR126(s[218]);
initDHCR127(s[219]);
initDHCR128(s[220]);
initDHPA9(s[221]);
initDHPB9(s[222]);
initDHC9(s[223]);
initDHCS9(s[224]);
initDHCAG9(s[225]);
initDHCR129(s[226]);
initDHCR130(s[227]);
initDHCR131(s[228]);
initDHCR132(s[229]);
initDHCR133(s[230]);
initDHCR134(s[231]);
initDHCR135(s[232]);
initDHCR136(s[233]);
initDHCR137(s[234]);
initDHCR138(s[235]);
initDHCR139(s[236]);
initDHCR140(s[237]);
initDHCR141(s[238]);
initDHCR142(s[239]);
initDHCR143(s[240]);
initDHCR144(s[241]);
initDHPA10(s[242]);
initDHPB10(s[243]);
initDHC10(s[244]);
initDHCS10(s[245]);
initDHCAG10(s[246]);
initDHCR145(s[247]);
initDHCR146(s[248]);
initDHCR147(s[249]);
initDHCR148(s[250]);
initDHCR149(s[251]);
initDHCR150(s[252]);
initDHCR151(s[253]);
initDHCR152(s[254]);
initDHCR153(s[255]);
initDHCR154(s[256]);
initDHCR155(s[257]);
initDHCR156(s[258]);
initDHCR157(s[259]);
initDHCR158(s[260]);
initDHCR159(s[261]);
initDHCR160(s[262]);
initDHPA11(s[263]);
initDHPB11(s[264]);
initDHC11(s[265]);
initDHCS11(s[266]);
initDHCAG11(s[267]);
initDHCR161(s[268]);
initDHCR162(s[269]);
initDHCR163(s[270]);
initDHCR164(s[271]);
initDHCR165(s[272]);
initDHCR166(s[273]);
initDHCR167(s[274]);
initDHCR168(s[275]);
initDHCR169(s[276]);
initDHCR170(s[277]);
initDHCR171(s[278]);
initDHCR172(s[279]);
initDHCR173(s[280]);
initDHCR174(s[281]);
initDHCR175(s[282]);
initDHCR176(s[283]);
initDHPA12(s[284]);
initDHPB12(s[285]);
initDHC12(s[286]);
initDHCS12(s[287]);
initDHCAG12(s[288]);
initDHCR177(s[289]);
initDHCR178(s[290]);
initDHCR179(s[291]);
initDHCR180(s[292]);
initDHCR181(s[293]);
initDHCR182(s[294]);
initDHCR183(s[295]);
initDHCR184(s[296]);
initDHCR185(s[297]);
initDHCR186(s[298]);
initDHCR187(s[299]);
initDHCR188(s[300]);
initDHCR189(s[301]);
initDHCR190(s[302]);
initDHCR191(s[303]);
initDHCR192(s[304]);
initDHPA13(s[305]);
initDHPB13(s[306]);
initDHC13(s[307]);
initDHCS13(s[308]);
initDHCAG13(s[309]);
initDHCR193(s[310]);
initDHCR194(s[311]);
initDHCR195(s[312]);
initDHCR196(s[313]);
initDHCR197(s[314]);
initDHCR198(s[315]);
initDHCR199(s[316]);
initDHCR200(s[317]);
initDHCR201(s[318]);
initDHCR202(s[319]);
initDHCR203(s[320]);
initDHCR204(s[321]);
initDHCR205(s[322]);
initDHCR206(s[323]);
initDHCR207(s[324]);
initDHCR208(s[325]);
initDHPA14(s[326]);
initDHPB14(s[327]);
initDHC14(s[328]);
initDHCS14(s[329]);
initDHCAG14(s[330]);
initDHCR209(s[331]);
initDHCR210(s[332]);
initDHCR211(s[333]);
initDHCR212(s[334]);
initDHCR213(s[335]);
initDHCR214(s[336]);
initDHCR215(s[337]);
initDHCR216(s[338]);
initDHCR217(s[339]);
initDHCR218(s[340]);
initDHCR219(s[341]);
initDHCR220(s[342]);
initDHCR221(s[343]);
initDHCR222(s[344]);
initDHCR223(s[345]);
initDHCR224(s[346]);
initDHPA15(s[347]);
initDHPB15(s[348]);
initDHC15(s[349]);
initDHCS15(s[350]);
initDHCAG15(s[351]);
initDHCR225(s[352]);
initDHCR226(s[353]);
initDHCR227(s[354]);
initDHCR228(s[355]);
initDHCR229(s[356]);
initDHCR230(s[357]);
initDHCR231(s[358]);
initDHCR232(s[359]);
initDHCR233(s[360]);
initDHCR234(s[361]);
initDHCR235(s[362]);
initDHCR236(s[363]);
initDHCR237(s[364]);
initDHCR238(s[365]);
initDHCR239(s[366]);
initDHCR240(s[367]);
initDHPA16(s[368]);
initDHPB16(s[369]);
initDHC16(s[370]);
initDHCS16(s[371]);
initDHCAG16(s[372]);
initDHCR241(s[373]);
initDHCR242(s[374]);
initDHCR243(s[375]);
initDHCR244(s[376]);
initDHCR245(s[377]);
initDHCR246(s[378]);
initDHCR247(s[379]);
initDHCR248(s[380]);
initDHCR249(s[381]);
initDHCR250(s[382]);
initDHCR251(s[383]);
initDHCR252(s[384]);
initDHCR253(s[385]);
initDHCR254(s[386]);
initDHCR255(s[387]);
initDHCR256(s[388]);
initDIINT(s[389]);
initDIPRE(s[390]);
initMIREL(s[391]);
initMISPOU(s[392]);
initMILIVE(s[393]);
initMISINT(s[394]);
initMIFIN(s[395]);
initDIGRAN(s[396]);
initDIGNMYC(s[397]);
initDIGNMY(s[398]);
initDIGPRXA(s[399]);
initDIGPRXB(s[400]);
initDISIBC(s[401]);
initDISIB(s[402]);
initDINMA(s[403]);
initDIANM(s[404]);
initDIMADI(s[405]);
initDIMAD(s[406]);
initDIMDYR(s[407]);
initDICDNM(s[408]);
initDIMAEDU(s[409]);
initDINFA(s[410]);
initDIANF(s[411]);
initDIFADI(s[412]);
initDIFAD(s[413]);
initDIFDYR(s[414]);
initDICDNF(s[415]);
initDIPAEDU(s[416]);
initDIKLIV(s[417]);
initDIFJOB(s[418]);
initHEHELF(s[419]);
initHEILL(s[420]);
initHELIM(s[421]);
initHELWK(s[422]);
initHETEMP(s[423]);
initHEFUNC(s[424]);
initHEEYE(s[425]);
initHEEYEA(s[426]);
initHEFRND(s[427]);
initHEPAP(s[428]);
initHEOPCGL(s[429]);
initHEOPCDI(s[430]);
initHEOPCMD(s[431]);
initHEOPCCA(s[432]);
initHEOPFGL(s[433]);
initHEOPFDI(s[434]);
initHEOPFMD(s[435]);
initHEOPFCA(s[436]);
initHEOPNGL(s[437]);
initHEOPNDI(s[438]);
initHEOPNMD(s[439]);
initHEOPNCA(s[440]);
initHEOPSGL(s[441]);
initHEOPSDI(s[442]);
initHEOPSMD(s[443]);
initHEOPSCA(s[444]);
initHEOPTGL(s[445]);
initHEOPTDI(s[446]);
initHEOPTMD(s[447]);
initHEOPTCA(s[448]);
initHEOPT96(s[449]);
initHEDREYR(s[450]);
initHECAT(s[451]);
initHECATN(s[452]);
initHEHEAR(s[453]);
initHEHRA(s[454]);
initHESSME(s[455]);
initHESTAS(s[456]);
initHESLPA(s[457]);
initHESLPB(s[458]);
initHESLPC(s[459]);
initHESLPD(s[460]);
initHESLPE(s[461]);
initHESLPX(s[462]);
initHESLPF(s[463]);
initHEDNTA(s[464]);
initHEDNTB1(s[465]);
initHEDNTB2(s[466]);
initHEDNTB3(s[467]);
initHEDNTB4(s[468]);
initHEDNTB5(s[469]);
initHEDNTB96(s[470]);
initHESWGH(s[471]);
initHESWGHA(s[472]);
initHEBPCHK(s[473]);
initHEDAWBP(s[474]);
initHEDACBP(s[475]);
initHEDANBP(s[476]);
initHEDASBP(s[477]);
initHEDAWAN(s[478]);
initHEDACAN(s[479]);
initHEDANAN(s[480]);
initHEDASAN(s[481]);
initHEDAWMI(s[482]);
initHEDACMI(s[483]);
initHEDANMI(s[484]);
initHEDAWHF(s[485]);
initHEDACHF(s[486]);
initHEDANHF(s[487]);
initHEDASHF(s[488]);
initHEDAWHM(s[489]);
initHEDACHM(s[490]);
initHEDANHM(s[491]);
initHEDASHM(s[492]);
initHEDAWAR(s[493]);
initHEDACAR(s[494]);
initHEDANAR(s[495]);
initHEDASAR(s[496]);
initHEDAWDI(s[497]);
initHEDACDI(s[498]);
initHEDANDI(s[499]);
initHEDAWST(s[500]);
initHEDACST(s[501]);
initHEDANST(s[502]);
initHEDAWCH(s[503]);
initHEDACCH(s[504]);
initHEDANCH(s[505]);
initHEDASCH(s[506]);
initHEDAW95(s[507]);
initHEDAC95(s[508]);
initHEDAN95(s[509]);
initHEDAS95(s[510]);
initHEDIABP(s[511]);
initHEDIAAN(s[512]);
initHEDIAMI(s[513]);
initHEDIAHF(s[514]);
initHEDIAHM(s[515]);
initHEDIAAR(s[516]);
initHEDIADI(s[517]);
initHEDIAST(s[518]);
initHEDIACH(s[519]);
initHEDIA95(s[520]);
initHEDIA96(s[521]);
initHEDIMBP(s[522]);
initHEDIMAN(s[523]);
initHEDIMMI(s[524]);
initHEDIMHF(s[525]);
initHEDIMHM(s[526]);
initHEDIMAR(s[527]);
initHEDIMDI(s[528]);
initHEDIMST(s[529]);
initHEDIMCH(s[530]);
initHEDIM85(s[531]);
initHEDIM86(s[532]);
initHEDIM96(s[533]);
initHEHBPB(s[534]);
initHEMDA(s[535]);
initHEMDAB(s[536]);
initHEAGA(s[537]);
initHEYRA(s[538]);
initHEAGB(s[539]);
initHENMMI(s[540]);
initHEBETA(s[541]);
initHEAGC(s[542]);
initHEAGD(s[543]);
initHEACD(s[544]);
initHEINS(s[545]);
initHEMDB(s[546]);
initHEACE(s[547]);
initHEACEA(s[548]);
initHEWEE(s[549]);
initHEWEEA(s[550]);
initHEKIDN(s[551]);
initHESUG(s[552]);
initHESUGA(s[553]);
initHEFTCHK(s[554]);
initHEAGE(s[555]);
initHENMST(s[556]);
initHEHBPB1(s[557]);
initHEMDA1(s[558]);
initHEPBS(s[559]);
initHEWKS(s[560]);
initHESPK(s[561]);
initHEVSI(s[562]);
initHETHK(s[563]);
initHECHMD(s[564]);
initHECHME(s[565]);
initHEHRTA(s[566]);
initHEHRTB(s[567]);
initHEHRTC(s[568]);
initHEHRTD(s[569]);
initHEHRTE(s[570]);
initHECHOL(s[571]);
initHEBOWD(s[572]);
initHEMAMB(s[573]);
initHEPRO(s[574]);
initHEDBWLU(s[575]);
initHEDBDLU(s[576]);
initHEDBMLU(s[577]);
initHEDBLU(s[578]);
initHEDBWAS(s[579]);
initHEDBDAS(s[580]);
initHEDBMAS(s[581]);
initHEDBSAS(s[582]);
initHEDBWAR(s[583]);
initHEDBDAR(s[584]);
initHEDBMAR(s[585]);
initHEDBSAR(s[586]);
initHEDBWOS(s[587]);
initHEDBDOS(s[588]);
initHEDBMOS(s[589]);
initHEDBSOS(s[590]);
initHEDBWCA(s[591]);
initHEDBDCA(s[592]);
initHEDBMCA(s[593]);
initHEDBSCA(s[594]);
initHEDBWPD(s[595]);
initHEDBDPD(s[596]);
initHEDBMPD(s[597]);
initHEDBSPD(s[598]);
initHEDBWPS(s[599]);
initHEDBDPS(s[600]);
initHEDBMPS(s[601]);
initHEDBWAD(s[602]);
initHEDBDAD(s[603]);
initHEDBMAD(s[604]);
initHEDBWDE(s[605]);
initHEDBDDE(s[606]);
initHEDBMDE(s[607]);
initHEDBSDE(s[608]);
initHEDBWBL(s[609]);
initHEDBDBL(s[610]);
initHEDBMBL(s[611]);
initHEDBSBL(s[612]);
initHEDBWMS(s[613]);
initHEDBDMS(s[614]);
initHEDBMMS(s[615]);
initHEDBSMS(s[616]);
initHEDIBLU(s[617]);
initHEDIBAS(s[618]);
initHEDIBAR(s[619]);
initHEDIBOS(s[620]);
initHEDIBCA(s[621]);
initHEDIBPD(s[622]);
initHEDIBPS(s[623]);
initHEDIBAD(s[624]);
initHEDIBDE(s[625]);
initHEDIBBL(s[626]);
initHEDIBMS(s[627]);
initHEDIB96(s[628]);
initHELNG(s[629]);
initHELNGB(s[630]);
initHEAMA(s[631]);
initHEAMB(s[632]);
initHEARTOA(s[633]);
initHEARTRA(s[634]);
initHEARTOT(s[635]);
initHEOSTE(s[636]);
initHEOSTEA(s[637]);
initHEOSTEB(s[638]);
initHEOSTEC(s[639]);
initHEOSTED(s[640]);
initHEAGF(s[641]);
initHEARTA(s[642]);
initHEARTB(s[643]);
initHEARTC(s[644]);
initHEARTE(s[645]);
initHECANB(s[646]);
initHECANBB(s[647]);
initHEPRK(s[648]);
initHEPSYHA(s[649]);
initHEPSYAN(s[650]);
initHEPSYDE(s[651]);
initHEPSYEM(s[652]);
initHEPSYSC(s[653]);
initHEPSYPS(s[654]);
initHEPSYMO(s[655]);
initHEPSYMA(s[656]);
initHEPSY95(s[657]);
initHEYRC(s[658]);
initHEPSYA(s[659]);
initHEPSYB(s[660]);
initHEPSYC(s[661]);
initHEPSYD(s[662]);
initHEPSYE(s[663]);
initHEAGI(s[664]);
initHEAGJ(s[665]);
initHEFLA(s[666]);
initHEFLB(s[667]);
initHEFLC(s[668]);
initHEFLE(s[669]);
initHEFLF(s[670]);
initHEFRAC(s[671]);
initHEJI(s[672]);
initHEJIAA1(s[673]);
initHEJIAA2(s[674]);
initHEJIAA3(s[675]);
initHEJIAA4(s[676]);
initHEJIAA5(s[677]);
initHEJIBRH(s[678]);
initHEJIBLH(s[679]);
initHEJIBRK(s[680]);
initHEJIBLK(s[681]);
initHEJION(s[682]);
initHEIQA(s[683]);
initHEIQB(s[684]);
initHEIQC(s[685]);
initHEIQD(s[686]);
initHEIQE(s[687]);
initHEIQF(s[688]);
initHEIQG(s[689]);
initHEIQH(s[690]);
initHEIQI(s[691]);
initHEIQJ(s[692]);
initHEIQK(s[693]);
initHEIQL(s[694]);
initHEIQM(s[695]);
initHEIQN(s[696]);
initHEIQO(s[697]);
initHEIQP(s[698]);
initHEIQQ(s[699]);
initHEPAIN(s[700]);
initHEPAA(s[701]);
initHEPAWBA(s[702]);
initHEPAWHI(s[703]);
initHEPAWKN(s[704]);
initHEPAWFE(s[705]);
initHEPAWMO(s[706]);
initHEPAWOT(s[707]);
initHEPAWAL(s[708]);
initHEPAB(s[709]);
initHEPAB1(s[710]);
initHEBCK(s[711]);
initHEHIP(s[712]);
initHEKNE(s[713]);
initHEPAC(s[714]);
initHEPAD(s[715]);
initHEPAE(s[716]);
initHEPAF(s[717]);
initHEFET(s[718]);
initHEKNEA(s[719]);
initHEKNEB(s[720]);
initHEMOBWA(s[721]);
initHEMOBSI(s[722]);
initHEMOBCH(s[723]);
initHEMOBCS(s[724]);
initHEMOBCL(s[725]);
initHEMOBST(s[726]);
initHEMOBRE(s[727]);
initHEMOBPU(s[728]);
initHEMOBLI(s[729]);
initHEMOBPI(s[730]);
initHEMOB96(s[731]);
initHEADLDR(s[732]);
initHEADLWA(s[733]);
initHEADLBA(s[734]);
initHEADLEA(s[735]);
initHEADLBE(s[736]);
initHEADLWC(s[737]);
initHEADLMA(s[738]);
initHEADLDA(s[739]);
initHEADLPR(s[740]);
initHEADLSH(s[741]);
initHEADLPH(s[742]);
initHEADLSP(s[743]);
initHEADLME(s[744]);
initHEADLHO(s[745]);
initHEADLMO(s[746]);
initHEADL96(s[747]);
initCATKA(s[748]);
initCATKB(s[749]);
initCATKC(s[750]);
initCATKD(s[751]);
initCATKE(s[752]);
initCATKF(s[753]);
initCATKG(s[754]);
initCATKH(s[755]);
initCATKI(s[756]);
initCATKJ(s[757]);
initCATKK(s[758]);
initCATKL(s[759]);
initCATKM(s[760]);
initCATNO(s[761]);
initCATCH(s[762]);
initCAWIN(s[763]);
initCAHNHW(s[764]);
initCAHNSO(s[765]);
initCAHNDA(s[766]);
initCAHNGC(s[767]);
initCAHNSI(s[768]);
initCAHNBR(s[769]);
initCAHNOR(s[770]);
initCAHNFR(s[771]);
initCAHNNE(s[772]);
initCAHNNO(s[773]);
initCAHNHC(s[774]);
initCAHNRE(s[775]);
initCAHNVO(s[776]);
initCAHNWA(s[777]);
initCAHNCL(s[778]);
initCAHNHM(s[779]);
initCAHNNH(s[780]);
initCAHNOT(s[781]);
initCAHRS01(s[782]);
initCAHRS02(s[783]);
initCAHRS03(s[784]);
initCAHRS04(s[785]);
initCAHRS05(s[786]);
initCAHRS06(s[787]);
initCAHRS07(s[788]);
initCAHRS08(s[789]);
initCAHRS09(s[790]);
initCAHRS10(s[791]);
initCAHRS11(s[792]);
initCAHRS12(s[793]);
initCAHRS13(s[794]);
initCAHRS14(s[795]);
initCAHRS15(s[796]);
initCAHRS16(s[797]);
initCAHRS17(s[798]);
initCAHRS18(s[799]);
initCAHRS19(s[800]);
initCAHRS20(s[801]);
initCAHRS21(s[802]);
initCAHRS22(s[803]);
initCAHRS23(s[804]);
initCAHRS24(s[805]);
initCAHRS25(s[806]);
initCAHRS26(s[807]);
initCAHRS27(s[808]);
initCAHRS28(s[809]);
initCAHRS29(s[810]);
initCAHRS30(s[811]);
initCAHRS31(s[812]);
initCAHRS32(s[813]);
initCAHRS33(s[814]);
initCAHRS34(s[815]);
initCAHRS35(s[816]);
initCAHINHW1(s[817]);
initCAHINSO1(s[818]);
initCAHINDA1(s[819]);
initCAHINGC1(s[820]);
initCAHINSI1(s[821]);
initCAHINBR1(s[822]);
initCAHINOR1(s[823]);
initCAHINFR1(s[824]);
initCAHINNE1(s[825]);
initCAHINNO1(s[826]);
initCAHFOHC1(s[827]);
initCAHFORE1(s[828]);
initCAHFOVO1(s[829]);
initCAHFOWA1(s[830]);
initCAHFOCL1(s[831]);
initCAHFOHM1(s[832]);
initCAHFONH1(s[833]);
initCAHFOOT1(s[834]);
initCAHFONO1(s[835]);
initCAHINHW2(s[836]);
initCAHINSO2(s[837]);
initCAHINDA2(s[838]);
initCAHINGC2(s[839]);
initCAHINSI2(s[840]);
initCAHINBR2(s[841]);
initCAHINOR2(s[842]);
initCAHINFR2(s[843]);
initCAHINNE2(s[844]);
initCAHINNO2(s[845]);
initCAHFOHC2(s[846]);
initCAHFORE2(s[847]);
initCAHFOVO2(s[848]);
initCAHFOWA2(s[849]);
initCAHFOCL2(s[850]);
initCAHFOHM2(s[851]);
initCAHFONH2(s[852]);
initCAHFOOT2(s[853]);
initCAHFONO2(s[854]);
initCAHINHW3(s[855]);
initCAHINSO3(s[856]);
initCAHINDA3(s[857]);
initCAHINGC3(s[858]);
initCAHINSI3(s[859]);
initCAHINBR3(s[860]);
initCAHINOR3(s[861]);
initCAHINFR3(s[862]);
initCAHINNE3(s[863]);
initCAHINNO3(s[864]);
initCAHFOHC3(s[865]);
initCAHFORE3(s[866]);
initCAHFOVO3(s[867]);
initCAHFOWA3(s[868]);
initCAHFOCL3(s[869]);
initCAHFOHM3(s[870]);
initCAHFONH3(s[871]);
initCAHFOOT3(s[872]);
initCAHFONO3(s[873]);
initCAHINHW4(s[874]);
initCAHINSO4(s[875]);
initCAHINDA4(s[876]);
initCAHINGC4(s[877]);
initCAHINSI4(s[878]);
initCAHINBR4(s[879]);
initCAHINOR4(s[880]);
initCAHINFR4(s[881]);
initCAHINNE4(s[882]);
initCAHINNO4(s[883]);
initCAHFOHC4(s[884]);
initCAHFORE4(s[885]);
initCAHFOVO4(s[886]);
initCAHFOWA4(s[887]);
initCAHFOCL4(s[888]);
initCAHFOHM4(s[889]);
initCAHFONH4(s[890]);
initCAHFMHC3(s[891]);
initCAHFMRE3(s[892]);
initCAHFMVO3(s[893]);
initCAHFMWA3(s[894]);
initCAHFMCL3(s[895]);
initCAHFMHM3(s[896]);
initCAHFMNH3(s[897]);
initCAHFMHO3(s[898]);
initCAHFMDC3(s[899]);
initCAHFMGA3(s[900]);
initCAHFMWH3(s[901]);
initCAHFMSW3(s[902]);
initCAHFMEQ3(s[903]);
initCAHFMFR3(s[904]);
initCAHFMFA3(s[905]);
initCAHFMOT3(s[906]);
initCAHFMIR3(s[907]);
initCAHFMNO3(s[908]);
initCAHFOOT4(s[909]);
initCAHINHW5(s[910]);
initCAHINSO5(s[911]);
initCAHINDA5(s[912]);
initCAHINGC5(s[913]);
initCAHINSI5(s[914]);
initCAHINBR5(s[915]);
initCAHINOR5(s[916]);
initCAHINFR5(s[917]);
initCAHINNE5(s[918]);
initCAHINNO5(s[919]);
initCAHFOHC5(s[920]);
initCAHFORE5(s[921]);
initCAHFOVO5(s[922]);
initCAHFOWA5(s[923]);
initCAHFOCL5(s[924]);
initCAHFOHM5(s[925]);
initCAHFONH5(s[926]);
initCAHFONO4(s[927]);
initCAHFMHC5(s[928]);
initCAHFMRE5(s[929]);
initCAHFMVO5(s[930]);
initCAHFMWA5(s[931]);
initCAHFMCL5(s[932]);
initCAHFMHM5(s[933]);
initCAHFMNH5(s[934]);
initCAHFMHO5(s[935]);
initCAHFMDC5(s[936]);
initCAHFMGA5(s[937]);
initCAHFMWH5(s[938]);
initCAHFMSW5(s[939]);
initCAHFMEQ5(s[940]);
initCAHFMFR5(s[941]);
initCAHFMFA5(s[942]);
initCAHFMOT5(s[943]);
initCAHFMIR5(s[944]);
initCAHFMNO5(s[945]);
initCAHINHW6(s[946]);
initCAHINSO6(s[947]);
initCAHINDA6(s[948]);
initCAHINGC6(s[949]);
initCAHINSI6(s[950]);
initCAHINBR6(s[951]);
initCAHINOR6(s[952]);
initCAHINFR6(s[953]);
initCAHINNE6(s[954]);
initCAHINNO6(s[955]);
initCAHFOHC6(s[956]);
initCAHFORE6(s[957]);
initCAHFOVO6(s[958]);
initCAHFOWA6(s[959]);
initCAHFOCL6(s[960]);
initCAHFOHM6(s[961]);
initCAHFONH6(s[962]);
initCAHFOOT6(s[963]);
initCAHFONO6(s[964]);
initCAHFMHC6(s[965]);
initCAHFMRE6(s[966]);
initCAHFMVO6(s[967]);
initCAHFMWA6(s[968]);
initCAHFMCL6(s[969]);
initCAHFMHM6(s[970]);
initCAHFMNH6(s[971]);
initCAHFMHO6(s[972]);
initCAHFMDC6(s[973]);
initCAHFMGA6(s[974]);
initCAHFMWH6(s[975]);
initCAHFMSW6(s[976]);
initCAHFMEQ6(s[977]);
initCAHFMFR6(s[978]);
initCAHFMFA6(s[979]);
initCAHFMOT6(s[980]);
initCAHFMIR6(s[981]);
initCAHFMNO6(s[982]);
initCAHFMHC4(s[983]);
initCAHFMRE4(s[984]);
initCAHFMVO4(s[985]);
initCAHFMWA4(s[986]);
initCAHFMCL4(s[987]);
initCAHFMHM4(s[988]);
initCAHFMNH4(s[989]);
initCAHFMHO4(s[990]);
initCAHFMDC4(s[991]);
initCAHFMGA4(s[992]);
initCAHFMWH4(s[993]);
initCAHFMSW4(s[994]);
initCAHFMEQ4(s[995]);
initCAHFMFR4(s[996]);
initCAHFMFA4(s[997]);
initCAHFMOT4(s[998]);
initCAHFMIR4(s[999]);
}
public void init_1000_1999(String line) {
initCAHFMNO4(s[1000]);
initCAHFOOT5(s[1001]);
initCAHFONO5(s[1002]);
initCAHFMHC1(s[1003]);
initCAHFMRE1(s[1004]);
initCAHFMVO1(s[1005]);
initCAHFMWA1(s[1006]);
initCAHFMCL1(s[1007]);
initCAHFMHM1(s[1008]);
initCAHFMNH1(s[1009]);
initCAHFMHO1(s[1010]);
initCAHFMDC1(s[1011]);
initCAHFMGA1(s[1012]);
initCAHFMWH1(s[1013]);
initCAHFMSW1(s[1014]);
initCAHFMEQ1(s[1015]);
initCAHFMFR1(s[1016]);
initCAHFMFA1(s[1017]);
initCAHFMOT1(s[1018]);
initCAHFMIR1(s[1019]);
initCAHFMNO1(s[1020]);
initCAHFMHC2(s[1021]);
initCAHFMRE2(s[1022]);
initCAHFMVO2(s[1023]);
initCAHFMWA2(s[1024]);
initCAHFMCL2(s[1025]);
initCAHFMHM2(s[1026]);
initCAHFMNH2(s[1027]);
initCAHFMHO2(s[1028]);
initCAHFMDC2(s[1029]);
initCAHFMGA2(s[1030]);
initCAHFMWH2(s[1031]);
initCAHFMSW2(s[1032]);
initCAHFMEQ2(s[1033]);
initCAHFMFR2(s[1034]);
initCAHFMFA2(s[1035]);
initCAHFMOT2(s[1036]);
initCAHFMIR2(s[1037]);
initCAHFMNO2(s[1038]);
initCAHPC(s[1039]);
initCAFAM(s[1040]);
initCAPNO(s[1041]);
initCASEX(s[1042]);
initCAFAM2(s[1043]);
initCAPNO2(s[1044]);
initCASEX2(s[1045]);
initCAFAM3(s[1046]);
initCAPNO3(s[1047]);
initCASEX3(s[1048]);
initCAFAM4(s[1049]);
initCAPNO4(s[1050]);
initCASEX4(s[1051]);
initCAFAM5(s[1052]);
initCAPNO5(s[1053]);
initCASEX5(s[1054]);
initCAFAM6(s[1055]);
initCAPNO6(s[1056]);
initCASEX6(s[1057]);
initCAFAM7(s[1058]);
initCAPNO7(s[1059]);
initCASEX7(s[1060]);
initCAFAM8(s[1061]);
initCAPNO8(s[1062]);
initCASEX8(s[1063]);
initCAFAM9(s[1064]);
initCAPNO9(s[1065]);
initCASEX9(s[1066]);
initCAFAM10(s[1067]);
initCAPNO10(s[1068]);
initCASEX10(s[1069]);
initCAFAM11(s[1070]);
initCAPNO11(s[1071]);
initCASEX11(s[1072]);
initCAFAM12(s[1073]);
initCAPNO12(s[1074]);
initCASEX12(s[1075]);
initCAFAM13(s[1076]);
initCAPNO13(s[1077]);
initCASEX13(s[1078]);
initCAFAM14(s[1079]);
initCAPNO14(s[1080]);
initCASEX14(s[1081]);
initCAFAM15(s[1082]);
initCAPNO15(s[1083]);
initCASEX15(s[1084]);
initCAFAM16(s[1085]);
initCAPNO16(s[1086]);
initCASEX16(s[1087]);
initCAFAM17(s[1088]);
initCAPNO17(s[1089]);
initCASEX17(s[1090]);
initCAFAM18(s[1091]);
initCAPNO18(s[1092]);
initCASEX18(s[1093]);
initCAFAM19(s[1094]);
initCAPNO19(s[1095]);
initCASEX19(s[1096]);
initCAFAM20(s[1097]);
initCAPNO20(s[1098]);
initCASEX20(s[1099]);
initCAFAM21(s[1100]);
initCAPNO21(s[1101]);
initCASEX21(s[1102]);
initCAFAM22(s[1103]);
initCAPNO22(s[1104]);
initCASEX22(s[1105]);
initCAFAM23(s[1106]);
initCAPNO23(s[1107]);
initCASEX23(s[1108]);
initCAFAM24(s[1109]);
initCAPNO24(s[1110]);
initCASEX24(s[1111]);
initCAFAM25(s[1112]);
initCAPNO25(s[1113]);
initCASEX25(s[1114]);
initCAHHA(s[1115]);
initCAHHB(s[1116]);
initCAHRF26(s[1117]);
initCAHRF27(s[1118]);
initCAHRF28(s[1119]);
initCAHRF29(s[1120]);
initCAHRF30(s[1121]);
initCAHRF31(s[1122]);
initCAHRF32(s[1123]);
initCAHRF33(s[1124]);
initCAHRF34(s[1125]);
initCAHRF35(s[1126]);
initCAHRI01(s[1127]);
initCAHRI02(s[1128]);
initCAHRI03(s[1129]);
initCAHRI04(s[1130]);
initCAHRI05(s[1131]);
initCAHRI06(s[1132]);
initCAHRI07(s[1133]);
initCAHRI08(s[1134]);
initCAHRI09(s[1135]);
initCAHRI10(s[1136]);
initCAHRI11(s[1137]);
initCAHRI12(s[1138]);
initCAHRI13(s[1139]);
initCAHRI14(s[1140]);
initCAHRI15(s[1141]);
initCAHRI16(s[1142]);
initCAHRI17(s[1143]);
initCAHRI18(s[1144]);
initCAHRI19(s[1145]);
initCAHRI20(s[1146]);
initCAHRI21(s[1147]);
initCAHRI22(s[1148]);
initCAHRI23(s[1149]);
initCAHRI24(s[1150]);
initCAHRI25(s[1151]);
initCAHRI26(s[1152]);
initCAHRI27(s[1153]);
initCAHRI28(s[1154]);
initCAHRI29(s[1155]);
initCAHRI30(s[1156]);
initCAHRI31(s[1157]);
initCAHRI32(s[1158]);
initCAHRI33(s[1159]);
initCAHRI34(s[1160]);
initCAHRI35(s[1161]);
initCAHRG01(s[1162]);
initCAHRG02(s[1163]);
initCAHRG03(s[1164]);
initCAHRG04(s[1165]);
initCAHRG05(s[1166]);
initCAHRG06(s[1167]);
initCAHRG07(s[1168]);
initCAHRG08(s[1169]);
initCAHRG09(s[1170]);
initCAHRG10(s[1171]);
initCAHRG11(s[1172]);
initCAHRG12(s[1173]);
initCAHRG13(s[1174]);
initCAHRG14(s[1175]);
initCAHRG15(s[1176]);
initCAHRG16(s[1177]);
initCAHRG17(s[1178]);
initCAHRG18(s[1179]);
initCAHRG19(s[1180]);
initCAHRG20(s[1181]);
initCAHRG21(s[1182]);
initCAHRG22(s[1183]);
initCAHRG23(s[1184]);
initCAHRG24(s[1185]);
initCAHRG25(s[1186]);
initCAHRG26(s[1187]);
initCAHRG27(s[1188]);
initCAHRG28(s[1189]);
initCAHRG29(s[1190]);
initCAHRG30(s[1191]);
initCAHRG31(s[1192]);
initCAHRG32(s[1193]);
initCAHRG33(s[1194]);
initCAHRG34(s[1195]);
initCAHRG35(s[1196]);
initCAFND1(s[1197]);
initCAHRS1GP(s[1198]);
initCAFND2(s[1199]);
initCAHRS2GP(s[1200]);
initCAHPF(s[1201]);
initCAHPD(s[1202]);
initCAHPW(s[1203]);
initCAHPF2(s[1204]);
initCAHPD2(s[1205]);
initCAHPW2(s[1206]);
initCAWDA(s[1207]);
initCADP1(s[1208]);
initCADP2(s[1209]);
initCADP3(s[1210]);
initCAPB(s[1211]);
initCAINA(s[1212]);
initCAARR01(s[1213]);
initCAARR02(s[1214]);
initCAARR03(s[1215]);
initCAARR04(s[1216]);
initCAARR05(s[1217]);
initCAARR06(s[1218]);
initCAARR07(s[1219]);
initCAARR08(s[1220]);
initCAARR09(s[1221]);
initCAARR10(s[1222]);
initCAARR11(s[1223]);
initCARA(s[1224]);
initCAASK1(s[1225]);
initCAASK2(s[1226]);
initCAPAY(s[1227]);
initCAPFQ(s[1228]);
initCAPAM(s[1229]);
initCAPAML(s[1230]);
initCAPAMU(s[1231]);
initCAPAME(s[1232]);
initCAPAMR(s[1233]);
initCAPAL(s[1234]);
initCAPHWOI(s[1235]);
initCAPHWDP(s[1236]);
initCAPHWOT(s[1237]);
initCAPADLA(s[1238]);
initCAPADFM(s[1239]);
initCAPADOT(s[1240]);
initCAPADNO(s[1241]);
initCALAPPA(s[1242]);
initCALAPDP(s[1243]);
initCALAF(s[1244]);
initCALAM(s[1245]);
initCALAML(s[1246]);
initCALAMU(s[1247]);
initCALAME(s[1248]);
initCALAMR(s[1249]);
initCANOPF(s[1250]);
initCANOPG(s[1251]);
initCANOPOT(s[1252]);
initCAPAY2(s[1253]);
initCAPFQ2(s[1254]);
initCAPAM2(s[1255]);
initCAPAM2L(s[1256]);
initCAPAM2U(s[1257]);
initCAPAM2E(s[1258]);
initCAPAM2R(s[1259]);
initCAPAL2(s[1260]);
initCAPHWOI2(s[1261]);
initCAPHWDP2(s[1262]);
initCAPHWOT2(s[1263]);
initCAPADLA2(s[1264]);
initCAPADFM2(s[1265]);
initCAPADOT2(s[1266]);
initCAPADNO2(s[1267]);
initCALAPPA2(s[1268]);
initCALAPDP2(s[1269]);
initCALAF2(s[1270]);
initCALAM2(s[1271]);
initCALAM2L(s[1272]);
initCALAM2U(s[1273]);
initCALAM2E(s[1274]);
initCALAM2R(s[1275]);
initCANOPF2(s[1276]);
initCANOPG2(s[1277]);
initCANOPOT2(s[1278]);
initCAPAY3(s[1279]);
initCAPFQ3(s[1280]);
initCAPAM3(s[1281]);
initCAPAM3L(s[1282]);
initCAPAM3U(s[1283]);
initCAPAM3E(s[1284]);
initCAPAML3R(s[1285]);
initCAPAL3(s[1286]);
initCAPHWOI3(s[1287]);
initCAPHWDP3(s[1288]);
initCAPHWOT3(s[1289]);
initCAPADLA3(s[1290]);
initCAPADFM3(s[1291]);
initCAPADOT3(s[1292]);
initCAPADNO3(s[1293]);
initCALAPPA3(s[1294]);
initCALAPDP3(s[1295]);
initCALAF3(s[1296]);
initCALAM3(s[1297]);
initCALAM3L(s[1298]);
initCALAM3U(s[1299]);
initCALAM3E(s[1300]);
initCALAM3R(s[1301]);
initCANOPF3(s[1302]);
initCANOPG3(s[1303]);
initCANOPOT3(s[1304]);
initCAWHO(s[1305]);
initCAHSA(s[1306]);
initCAHSN(s[1307]);
initCAHST(s[1308]);
initCAHSC(s[1309]);
initCAHSCL(s[1310]);
initCAHSCU(s[1311]);
initCAHSCE(s[1312]);
initCAHSCR(s[1313]);
initCAHPSOT(s[1314]);
initCAHPSCH(s[1315]);
initCAHPSEX(s[1316]);
initCAHPS95(s[1317]);
initCAHPS96(s[1318]);
initCAHSMOT(s[1319]);
initCAHSMCH(s[1320]);
initCAHSMEX(s[1321]);
initCAHSMOS(s[1322]);
initCAHSMCR(s[1323]);
initCAHSMMA(s[1324]);
initCAHSMAC(s[1325]);
initCAHSMTH(s[1326]);
initCAHSMHY(s[1327]);
initCAHSM85(s[1328]);
initCAHSM86(s[1329]);
initCAHSM96(s[1330]);
initCACLUB1(s[1331]);
initCACLUB2(s[1332]);
initCACLUB3(s[1333]);
initCACLUB4(s[1334]);
initCACLUB5(s[1335]);
initCACLUB96(s[1336]);
initCALC(s[1337]);
initCADCC(s[1338]);
initCADCD(s[1339]);
initCAMW(s[1340]);
initCAHMN(s[1341]);
initHEAIDCA(s[1342]);
initHEAIDZI(s[1343]);
initHEAIDMW(s[1344]);
initHEAIDEW(s[1345]);
initHEAIDBU(s[1346]);
initHEAIDEA(s[1347]);
initHEAIDAL(s[1348]);
initHEAIDCR(s[1349]);
initHEAID96(s[1350]);
initHEANYCH(s[1351]);
initHECACH(s[1352]);
initHECANHS(s[1353]);
initHECASS(s[1354]);
initHECASE(s[1355]);
initHECAOT(s[1356]);
initHECAMNHS(s[1357]);
initHECAMSS(s[1358]);
initHECAMSE(s[1359]);
initHECAMFA(s[1360]);
initHECAMLL(s[1361]);
initHECAMCH(s[1362]);
initHECAMFR(s[1363]);
initHECAM85(s[1364]);
initHECAM86(s[1365]);
initHECACOV(s[1366]);
initHEZICH(s[1367]);
initHEZINHS(s[1368]);
initHEZISS(s[1369]);
initHEZISE(s[1370]);
initHEZIOT(s[1371]);
initHEZIMNHS(s[1372]);
initHEZIMSS(s[1373]);
initHEZIMSE(s[1374]);
initHEZIMFA(s[1375]);
initHEZIMLL(s[1376]);
initHEZIMCH(s[1377]);
initHEZIMFR(s[1378]);
initHEZIM85(s[1379]);
initHEZIM86(s[1380]);
initHEZICOV(s[1381]);
initHEMWCH(s[1382]);
initHEMWNHS(s[1383]);
initHEMWSS(s[1384]);
initHEMWSE(s[1385]);
initHEMWOT(s[1386]);
initHEMWMNHS(s[1387]);
initHEMWMSS(s[1388]);
initHEMWMSE(s[1389]);
initHEMWMFA(s[1390]);
initHEMWMLL(s[1391]);
initHEMWMCH(s[1392]);
initHEMWMFR(s[1393]);
initHEMWM85(s[1394]);
initHEMWM86(s[1395]);
initHEMWCOV(s[1396]);
initHEEWCH(s[1397]);
initHEEWNHS(s[1398]);
initHEEWSS(s[1399]);
initHEEWSE(s[1400]);
initHEEWOT(s[1401]);
initHEEWMNHS(s[1402]);
initHEEWMSS(s[1403]);
initHEEWMSE(s[1404]);
initHEEWMFA(s[1405]);
initHEEWMLL(s[1406]);
initHEEWMCH(s[1407]);
initHEEWMFR(s[1408]);
initHEEWM85(s[1409]);
initHEEWM86(s[1410]);
initHEEWCOV(s[1411]);
initHEBUCH(s[1412]);
initHEBUNHS(s[1413]);
initHEBUSS(s[1414]);
initHEBUSE(s[1415]);
initHEBUOT(s[1416]);
initHEBUMNHS(s[1417]);
initHEBUMSS(s[1418]);
initHEBUMSE(s[1419]);
initHEBUMFA(s[1420]);
initHEBUMLL(s[1421]);
initHEBUMCH(s[1422]);
initHEBUMFR(s[1423]);
initHEBUM85(s[1424]);
initHEBUM86(s[1425]);
initHEBUCOV(s[1426]);
initHEEACH(s[1427]);
initHEEANHS(s[1428]);
initHEEASS(s[1429]);
initHEEASE(s[1430]);
initHEEAOT(s[1431]);
initHEEAMNHS(s[1432]);
initHEEAMSS(s[1433]);
initHEEAMSE(s[1434]);
initHEEAMFA(s[1435]);
initHEEAMLL(s[1436]);
initHEEAMCH(s[1437]);
initHEEAMFR(s[1438]);
initHEEAM85(s[1439]);
initHEEAM86(s[1440]);
initHEEACOV(s[1441]);
initHEALCH(s[1442]);
initHEALNHS(s[1443]);
initHEALSS(s[1444]);
initHEALSE(s[1445]);
initHEALOT(s[1446]);
initHEALMNHS(s[1447]);
initHEALMSS(s[1448]);
initHEALMSE(s[1449]);
initHEALMFA(s[1450]);
initHEALMLL(s[1451]);
initHEALMCH(s[1452]);
initHEALMFR(s[1453]);
initHEALM85(s[1454]);
initHEALM86(s[1455]);
initHEALCOV(s[1456]);
initHECRCH(s[1457]);
initHECRNHS(s[1458]);
initHECRSS(s[1459]);
initHECRSE(s[1460]);
initHECROT(s[1461]);
initHECRMNHS(s[1462]);
initHECRMSS(s[1463]);
initHECRMSE(s[1464]);
initHECRMFA(s[1465]);
initHECRMLL(s[1466]);
initHECRMCH(s[1467]);
initHECRMFR(s[1468]);
initHECRM85(s[1469]);
initHECRM86(s[1470]);
initHECRCOV(s[1471]);
initHESMK(s[1472]);
initHESKA(s[1473]);
initHESKD(s[1474]);
initHESKE(s[1475]);
initHESKF(s[1476]);
initHESTOP(s[1477]);
initHECIG(s[1478]);
initHESKB(s[1479]);
initHETBA(s[1480]);
initHETBB(s[1481]);
initHESKC(s[1482]);
initHETBC(s[1483]);
initHETBD(s[1484]);
initHECGSTP(s[1485]);
initHECGSTA(s[1486]);
initHEACTA(s[1487]);
initHEACTB(s[1488]);
initHEACTC(s[1489]);
initHEMEN(s[1490]);
initHEMEB(s[1491]);
initHEPEE(s[1492]);
initHEPEY(s[1493]);
initHEPEA(s[1494]);
initHEPER(s[1495]);
initHEHRT(s[1496]);
initHEHPS(s[1497]);
initHEHPY(s[1498]);
initHEGPOFT(s[1499]);
initHEGPNHS(s[1500]);
initSPCAR(s[1501]);
initSPCARA(s[1502]);
initSPCARB(s[1503]);
initSPTRAA(s[1504]);
initSPTRAB1(s[1505]);
initSPTRAB2(s[1506]);
initSPTRAB3(s[1507]);
initSPTRAB4(s[1508]);
initSPTRAB5(s[1509]);
initSPTRAB6(s[1510]);
initSPTRAB7(s[1511]);
initSPTRAB8(s[1512]);
initSPTRAB9(s[1513]);
initSPTRAB10(s[1514]);
initSPTRAB11(s[1515]);
initSPTRAB12(s[1516]);
initSPTRAB95(s[1517]);
initSPTRAM1(s[1518]);
initSPTRAM2(s[1519]);
initSPTRAM3(s[1520]);
initSPTRAM4(s[1521]);
initSPTRAM5(s[1522]);
initSPTRAM6(s[1523]);
initSPTRAM7(s[1524]);
initSPTRAM8(s[1525]);
initSPTRAM9(s[1526]);
initSPTRAM10(s[1527]);
initSPTRAM11(s[1528]);
initSPTRAM12(s[1529]);
initSPTRAM13(s[1530]);
initSPTRAM85(s[1531]);
initSPTRAM86(s[1532]);
initSPTRO1(s[1533]);
initSPTRO2(s[1534]);
initSPTRO3(s[1535]);
initSPTRO4(s[1536]);
initSPTRO5(s[1537]);
initSPTRO96(s[1538]);
initSPLIFT(s[1539]);
initSPTAXI(s[1540]);
initSPDTDT(s[1541]);
initSPHOSP(s[1542]);
initSPBSPS(s[1543]);
initSPBSTM(s[1544]);
initWPACTPW(s[1545]);
initWPACTSE(s[1546]);
initWPACTVW(s[1547]);
initWPACTCA(s[1548]);
initWPACTLO(s[1549]);
initWPACTED(s[1550]);
initWPACT96(s[1551]);
initWPVW(s[1552]);
initWPAWAY(s[1553]);
initWPACTW(s[1554]);
initWPTAW(s[1555]);
initWPDES(s[1556]);
initWPEDC(s[1557]);
initWPES(s[1558]);
initWPJOB(s[1559]);
initWPJOBL(s[1560]);
initWPSTJ(s[1561]);
initWPEMP(s[1562]);
initWPEVER(s[1563]);
initWPLJOIL(s[1564]);
initWPLJOTI(s[1565]);
initWPLJODI(s[1566]);
initWPLJOCL(s[1567]);
initWPLJORE(s[1568]);
initWPLJOVO(s[1569]);
initWPLJOSP(s[1570]);
initWPLJOCA(s[1571]);
initWPLJOFE(s[1572]);
initWPLJOMO(s[1573]);
initWPLJO95(s[1574]);
initWPLJOMIL(s[1575]);
initWPLJOMTI(s[1576]);
initWPLJOMDI(s[1577]);
initWPLJOMCL(s[1578]);
initWPLJOMRE(s[1579]);
initWPLJOMVO(s[1580]);
initWPLJOMSP(s[1581]);
initWPLJOMCA(s[1582]);
initWPLJOMFE(s[1583]);
initWPLJOMMO(s[1584]);
initWPLJOMBE(s[1585]);
initWPLJOMCF(s[1586]);
initWPLJOMPR(s[1587]);
initWPLJOMER(s[1588]);
initWPLJOMSE(s[1589]);
initWPLJOMSA(s[1590]);
initWPLJOMME(s[1591]);
initWPLJOM85(s[1592]);
initWPLJOM86(s[1593]);
initWPLJOBM(s[1594]);
initWPESP(s[1595]);
initWPSUP(s[1596]);
initWPEST(s[1597]);
initWPSAL(s[1598]);
initWPCJAG(s[1599]);
initWPCJDI(s[1600]);
initWPCJBU(s[1601]);
initWPCJPA(s[1602]);
initWPCJSE(s[1603]);
initWPCJSC(s[1604]);
initWPCJFR(s[1605]);
initWPCJ96(s[1606]);
initWPNEMP(s[1607]);
initWPEMPL(s[1608]);
initWPNOE(s[1609]);
initWPJACT(s[1610]);
initWPWYWMO(s[1611]);
initWPWYWOH(s[1612]);
initWPWYWRH(s[1613]);
initWPWYWEN(s[1614]);
initWPWYWSU(s[1615]);
initWPWYW95(s[1616]);
initWPWYWMMO(s[1617]);
initWPWYWMOH(s[1618]);
initWPWYWMRH(s[1619]);
initWPWYWMEN(s[1620]);
initWPWYWMSU(s[1621]);
initWPWYWMHH(s[1622]);
initWPWYWMCH(s[1623]);
initWPWYWMFI(s[1624]);
initWPWYWMHE(s[1625]);
initWPWYWM85(s[1626]);
initWPWYWM86(s[1627]);
initWPWYJPA(s[1628]);
initWPWYJHO(s[1629]);
initWPWYJTI(s[1630]);
initWPWYJCA(s[1631]);
initWPWYJCO(s[1632]);
initWPWYJBU(s[1633]);
initWPWYJFB(s[1634]);
initWPWYJON(s[1635]);
initWPWYJFI(s[1636]);
initWPWYJ95(s[1637]);
initWPWYJMPA(s[1638]);
initWPWYJMHO(s[1639]);
initWPWYJMTI(s[1640]);
initWPWYJMCA(s[1641]);
initWPWYJMCO(s[1642]);
initWPWYJMBU(s[1643]);
initWPWYJMFB(s[1644]);
initWPWYJMON(s[1645]);
initWPWYJMFI(s[1646]);
initWPWYJMLO(s[1647]);
initWPWYJMBC(s[1648]);
initWPWYJMTO(s[1649]);
initWPWYJMCH(s[1650]);
initWPWYJMMO(s[1651]);
initWPWYJMHH(s[1652]);
initWPWYJMPH(s[1653]);
initWPWYJMHF(s[1654]);
initWPWYJM85(s[1655]);
initWPWYJM86(s[1656]);
initWPWYJREA(s[1657]);
initWPCJOB(s[1658]);
initWPHJOB(s[1659]);
initWPHWRK(s[1660]);
initWPWLY(s[1661]);
initWPWLYM(s[1662]);
initWPHLY(s[1663]);
initWPWLYY(s[1664]);
initWPWLYYL(s[1665]);
initWPWLYYU(s[1666]);
initWPWLYYE(s[1667]);
initWPWLYYR(s[1668]);
initWPYSTOH(s[1669]);
initWPYSTTI(s[1670]);
initWPYSTRH(s[1671]);
initWPYSTOU(s[1672]);
initWPYSTRE(s[1673]);
initWPYSTVR(s[1674]);
initWPYSTFI(s[1675]);
initWPYSTAF(s[1676]);
initWPYSTFA(s[1677]);
initWPYSTEN(s[1678]);
initWPYSTCH(s[1679]);
initWPYSTPA(s[1680]);
initWPYSTYO(s[1681]);
initWPYSTMO(s[1682]);
initWPYST95(s[1683]);
initWPYSTMOH(s[1684]);
initWPYSTMTI(s[1685]);
initWPYSTMRH(s[1686]);
initWPYSTMOU(s[1687]);
initWPYSTMRE(s[1688]);
initWPYSTMVR(s[1689]);
initWPYSTMFI(s[1690]);
initWPYSTMAF(s[1691]);
initWPYSTMFA(s[1692]);
initWPYSTMEN(s[1693]);
initWPYSTMCH(s[1694]);
initWPYSTMPA(s[1695]);
initWPYSTMYO(s[1696]);
initWPYSTMMO(s[1697]);
initWPYSTMCO(s[1698]);
initWPYSTMAG(s[1699]);
initWPYSTMST(s[1700]);
initWPYSTM85(s[1701]);
initWPYSTM86(s[1702]);
initWPYSTPM(s[1703]);
initWPOJ(s[1704]);
initWPOWB(s[1705]);
initWPOJ2(s[1706]);
initWPOWB2(s[1707]);
initWPOJ3(s[1708]);
initWPOWB3(s[1709]);
initWPOJ4(s[1710]);
initWPOWB4(s[1711]);
initWPOJ5(s[1712]);
initWPOWB5(s[1713]);
initABVSPA(s[1714]);
initWPNIC(s[1715]);
initWPNICE(s[1716]);
initWPNIMW(s[1717]);
initWPLIMWK(s[1718]);
initWPLNJ(s[1719]);
initWPWYNOH(s[1720]);
initWPWYNTI(s[1721]);
initWPWYNRH(s[1722]);
initWPWYNOU(s[1723]);
initWPWYNRE(s[1724]);
initWPWYNVR(s[1725]);
initWPWYNFA(s[1726]);
initWPWYNCH(s[1727]);
initWPWYNEM(s[1728]);
initWPWYNCA(s[1729]);
initWPWYNEA(s[1730]);
initWPWYNMO(s[1731]);
initWPWYN85(s[1732]);
initWPWYNMOH(s[1733]);
initWPWYNMTI(s[1734]);
initWPWYNMRH(s[1735]);
initWPWYNMOU(s[1736]);
initWPWYNMRE(s[1737]);
initWPWYNMVR(s[1738]);
initWPWYNMFA(s[1739]);
initWPWYNMCH(s[1740]);
initWPWYNMEM(s[1741]);
initWPWYNMCA(s[1742]);
initWPWYNMEA(s[1743]);
initWPWYNMMO(s[1744]);
initWPWYNMCO(s[1745]);
initWPWYNMOR(s[1746]);
initWPWYNMDE(s[1747]);
initWPWYNMLH(s[1748]);
initWPWYNMLO(s[1749]);
initWPWYNMAB(s[1750]);
initWPWYNM85(s[1751]);
initWPWYNM86(s[1752]);
initWPMYNJ(s[1753]);
initWPSPAY(s[1754]);
initWPOTP(s[1755]);
initWPAOTP(s[1756]);
initWPAOTWL(s[1757]);
initWPAOTWU(s[1758]);
initWPAOTWE(s[1759]);
initWPAOTWR(s[1760]);
initWPAOTFL(s[1761]);
initWPAOTFU(s[1762]);
initWPAOTFE(s[1763]);
initWPAOTFR(s[1764]);
initWPAOTML(s[1765]);
initWPAOTMU(s[1766]);
initWPAOTME(s[1767]);
initWPAOTMR(s[1768]);
initWPAOTYL(s[1769]);
initWPAOTYU(s[1770]);
initWPAOTYE(s[1771]);
initWPAOTYR(s[1772]);
initWPAOTOL(s[1773]);
initWPAOTOU(s[1774]);
initWPAOTOE(s[1775]);
initWPAOTOR(s[1776]);
initWPPERI(s[1777]);
initWPSLIP(s[1778]);
initWPTHP(s[1779]);
initWPTHPWL(s[1780]);
initWPTHPWU(s[1781]);
initWPTHPWE(s[1782]);
initWPTHPWR(s[1783]);
initWPTHPFL(s[1784]);
initWPTHPFU(s[1785]);
initWPTHPFE(s[1786]);
initWPTHPFR(s[1787]);
initWPTHPML(s[1788]);
initWPTHPMU(s[1789]);
initWPTHPME(s[1790]);
initWPTHPMR(s[1791]);
initWPTHPYL(s[1792]);
initWPTHPYU(s[1793]);
initWPTHPYE(s[1794]);
initWPTHPYR(s[1795]);
initWPTHPOL(s[1796]);
initWPTHPOU(s[1797]);
initWPTHPOE(s[1798]);
initWPTHPOR(s[1799]);
initWPTHL(s[1800]);
initWPUP(s[1801]);
initWPUPA(s[1802]);
initWPUPAWL(s[1803]);
initWPUPAWU(s[1804]);
initWPUPAWE(s[1805]);
initWPUPAWR(s[1806]);
initWPUPAFL(s[1807]);
initWPUPAFU(s[1808]);
initWPUPAFE(s[1809]);
initWPUPAFR(s[1810]);
initWPUPAML(s[1811]);
initWPUPAMU(s[1812]);
initWPUPAME(s[1813]);
initWPUPAMR(s[1814]);
initWPUPAYL(s[1815]);
initWPUPAYU(s[1816]);
initWPUPAYE(s[1817]);
initWPUPAYR(s[1818]);
initWPUPAOL(s[1819]);
initWPUPAOU(s[1820]);
initWPUPAOE(s[1821]);
initWPUPAOR(s[1822]);
initWPPAYA(s[1823]);
initWPIR(s[1824]);
initWPAP(s[1825]);
initWPRAIR(s[1826]);
initWPRAIM(s[1827]);
initWPRAEY(s[1828]);
initWPRAEM(s[1829]);
initWPPROF(s[1830]);
initWPPROFL(s[1831]);
initWPPROFU(s[1832]);
initWPPROFE(s[1833]);
initWPPROFR(s[1834]);
initWPPL(s[1835]);
initWPBDT(s[1836]);
initWPBDNI(s[1837]);
initWPBI(s[1838]);
initWPBIWA(s[1839]);
initWPBIWAL(s[1840]);
initWPBIWAU(s[1841]);
initWPBIWAE(s[1842]);
initWPBIWAR(s[1843]);
initWPBIMA(s[1844]);
initWPBIMAL(s[1845]);
initWPBIMAU(s[1846]);
initWPBIMAE(s[1847]);
initWPBIMAR(s[1848]);
initWPBUSV(s[1849]);
initWPBUSVL(s[1850]);
initWPBUSVU(s[1851]);
initWPBUSVE(s[1852]);
initWPBUSVR(s[1853]);
initWPMOJ(s[1854]);
initWPHMSJ(s[1855]);
initWPESJ(s[1856]);
initWPESJL(s[1857]);
initWPESJU(s[1858]);
initWPESJE(s[1859]);
initWPESJR(s[1860]);
initWPESJM(s[1861]);
initWPESJML(s[1862]);
initWPESJMU(s[1863]);
initWPESJME(s[1864]);
initWPESJMR(s[1865]);
initWPBUS(s[1866]);
initWPVBUS(s[1867]);
initWPVBUSL(s[1868]);
initWPVBUSU(s[1869]);
initWPVBUSE(s[1870]);
initWPVBUSR(s[1871]);
initWPOWKAF(s[1872]);
initWPOWKDO(s[1873]);
initWPOWKEW(s[1874]);
initWPOWKIF(s[1875]);
initWPOWKKE(s[1876]);
initWPOWKST(s[1877]);
initWPOWKEP(s[1878]);
initWPRSAD1(s[1879]);
initWPRSAD2(s[1880]);
initWPRSAD3(s[1881]);
initWPRSAD4(s[1882]);
initWPRSAD5(s[1883]);
initWPRSAD6(s[1884]);
initWPRSAD7(s[1885]);
initWPRSAD8(s[1886]);
initWPRSAD9(s[1887]);
initWPRSAD10(s[1888]);
initWPRSAD11(s[1889]);
initWPRSAD12(s[1890]);
initWPRSAD13(s[1891]);
initWPMANPP(s[1892]);
initWPMPAH(s[1893]);
initWPMALA(s[1894]);
initWPQN(s[1895]);
initWP1Q(s[1896]);
initWP2Q(s[1897]);
initWP3Q(s[1898]);
initWPMFQ(s[1899]);
initWPMSQ(s[1900]);
initWPMTQ(s[1901]);
initWPMANSP(s[1902]);
initWPMSAH(s[1903]);
initWPMSH(s[1904]);
initWPSN(s[1905]);
initWP1SQ(s[1906]);
initWP2SQ(s[1907]);
initWP3SQ(s[1908]);
initWPMSFQ(s[1909]);
initWPMSSQ(s[1910]);
initWPMSTQ(s[1911]);
initWPSPD(s[1912]);
initWPSPD1A(s[1913]);
initWPSPD1B(s[1914]);
initWPSPD2(s[1915]);
initWPSPD3(s[1916]);
initWPSPD3A(s[1917]);
initWPSPD3M(s[1918]);
initWPSPD3Y(s[1919]);
initWPSPD4(s[1920]);
initWPSPD5Y(s[1921]);
initWPSPD5M(s[1922]);
initWPSPD6(s[1923]);
initWPSPTU(s[1924]);
initWPSPTUA(s[1925]);
initWPSPY(s[1926]);
initWPSPAM(s[1927]);
initWPSPAW(s[1928]);
initWPRAGE(s[1929]);
initWPEARLY(s[1930]);
initWPERAG(s[1931]);
initWPERET(s[1932]);
initWPERP(s[1933]);
initWPREAOH(s[1934]);
initWPREARH(s[1935]);
initWPREARE(s[1936]);
initWPREAVR(s[1937]);
initWPREAFI(s[1938]);
initWPREAFA(s[1939]);
initWPREAEN(s[1940]);
initWPREACH(s[1941]);
initWPREAST(s[1942]);
initWPREADT(s[1943]);
initWPREAYO(s[1944]);
initWPREA95(s[1945]);
initWPREA96(s[1946]);
initWPREANO(s[1947]);
initWPREAMOH(s[1948]);
initWPREAMRH(s[1949]);
initWPREAMRE(s[1950]);
initWPREAMVR(s[1951]);
initWPREAMFI(s[1952]);
initWPREAMFA(s[1953]);
initWPREAMEN(s[1954]);
initWPREAMCH(s[1955]);
initWPREAMST(s[1956]);
initWPREAMDT(s[1957]);
initWPREAMYO(s[1958]);
initWPREAM85(s[1959]);
initWPREAM86(s[1960]);
initWPREAM96(s[1961]);
initWPREAMNO(s[1962]);
initWPMREA(s[1963]);
initWPRRAG(s[1964]);
initWPRROH(s[1965]);
initWPRRRH(s[1966]);
initWPRRRE(s[1967]);
initWPRRFI(s[1968]);
initWPRRFA(s[1969]);
initWPRREN(s[1970]);
initWPRRCH(s[1971]);
initWPRRST(s[1972]);
initWPRRDT(s[1973]);
initWPRRYO(s[1974]);
initWPRR95(s[1975]);
initWPRR96(s[1976]);
initWPRRMAG(s[1977]);
initWPRRMOH(s[1978]);
initWPRRMRH(s[1979]);
initWPRRMRE(s[1980]);
initWPRRMFI(s[1981]);
initWPRRMFA(s[1982]);
initWPRRMEN(s[1983]);
initWPRRMCH(s[1984]);
initWPRRMST(s[1985]);
initWPRRMDT(s[1986]);
initWPRRMYO(s[1987]);
initWPRRMLI(s[1988]);
initWPRRMAF(s[1989]);
initWPRRM85(s[1990]);
initWPRRM86(s[1991]);
initWPRRM96(s[1992]);
initWPMRRE(s[1993]);
initWPWKR(s[1994]);
initWPPHI(s[1995]);
initWPHOWU(s[1996]);
initWPHLWZ(s[1997]);
initWPHOWE(s[1998]);
initWPMHI(s[1999]);
}
public void init_2000_2999(String line) {
initWPMHIL(s[2000]);
initWPMHIU(s[2001]);
initWPMHIE(s[2002]);
initWPMHIR(s[2003]);
initWPBPS(s[2004]);
initWPPS(s[2005]);
initWPMORE(s[2006]);
initWPNPENS(s[2007]);
initWPRPENS(s[2008]);
initWPANYP(s[2009]);
initWPPSOT(s[2010]);
initWPPSEX(s[2011]);
initWPPSAF(s[2012]);
initWPPSEL(s[2013]);
initWPPS95(s[2014]);
initWPPSMOT(s[2015]);
initWPPSMEX(s[2016]);
initWPPSMAF(s[2017]);
initWPPSMEL(s[2018]);
initWPPSMAL(s[2019]);
initWPPSMAG(s[2020]);
initWPPSMHR(s[2021]);
initWPPSMDL(s[2022]);
initWPPSM85(s[2023]);
initWPPSM86(s[2024]);
initWPEC(s[2025]);
initWPECA(s[2026]);
initWPEXW(s[2027]);
initWPSPOUP(s[2028]);
initWPSPOU(s[2029]);
initIAPID(s[2030]);
initIAW1R(s[2031]);
initIAFFNUM(s[2032]);
initIAASK(s[2033]);
initIAWORK(s[2034]);
initIASINC(s[2035]);
initIASINCL(s[2036]);
initIASINCU(s[2037]);
initIASINCE(s[2038]);
initIASINCR(s[2039]);
initABVSPASP(s[2040]);
initIASPEN(s[2041]);
initIASPW(s[2042]);
initIASPA(s[2043]);
initIAPAM(s[2044]);
initIAPAMWL(s[2045]);
initIAPAMWU(s[2046]);
initIAPAMWE(s[2047]);
initIAPAMWR(s[2048]);
initIAPAMFL(s[2049]);
initIAPAMFU(s[2050]);
initIAPAMFE(s[2051]);
initIAPAMFR(s[2052]);
initIAPAMML(s[2053]);
initIAPAMMU(s[2054]);
initIAPAMME(s[2055]);
initIAPAMMR(s[2056]);
initIAPAMYL(s[2057]);
initIAPAMYU(s[2058]);
initIAPAMYE(s[2059]);
initIAPAMYR(s[2060]);
initIAPAMOL(s[2061]);
initIAPAMOU(s[2062]);
initIAPAMOE(s[2063]);
initIAPAMOR(s[2064]);
initIASPP(s[2065]);
initIAPPAM(s[2066]);
initIAPPAWL(s[2067]);
initIAPPAWU(s[2068]);
initIAPPAWE(s[2069]);
initIAPPAWR(s[2070]);
initIAPPAFL(s[2071]);
initIAPPAFU(s[2072]);
initIAPPAFE(s[2073]);
initIAPPAFR(s[2074]);
initIAPPAML(s[2075]);
initIAPPAMU(s[2076]);
initIAPPAME(s[2077]);
initIAPPAMR(s[2078]);
initIAPPAYL(s[2079]);
initIAPPAYU(s[2080]);
initIAPPAYE(s[2081]);
initIAPPAYR(s[2082]);
initIAPPAOL(s[2083]);
initIAPPAOU(s[2084]);
initIAPPAOE(s[2085]);
initIAPPAOR(s[2086]);
initIAPPEN(s[2087]);
initIAPPMO(s[2088]);
initIAPPMOL(s[2089]);
initIAPPMOU(s[2090]);
initIAPPMOE(s[2091]);
initIAPPMOR(s[2092]);
initIAPPEI(s[2093]);
initIAPPEIL(s[2094]);
initIAPPEIU(s[2095]);
initIAPPEIE(s[2096]);
initIAPPEIR(s[2097]);
initIAANIN(s[2098]);
initIAAILY(s[2099]);
initIAAIM(s[2100]);
initIAAIML(s[2101]);
initIAAIMU(s[2102]);
initIAAIME(s[2103]);
initIAAIMR(s[2104]);
initIAAIP(s[2105]);
initIAAIPL(s[2106]);
initIAAIPU(s[2107]);
initIAAIPE(s[2108]);
initIAAIPR(s[2109]);
initIAPASK(s[2110]);
initIAPSPEN(s[2111]);
initIAPSPW(s[2112]);
initIAHDBC(s[2113]);
initIAHDNIB(s[2114]);
initIAHDNES(s[2115]);
initIAHDNSD(s[2116]);
initIAHDNSP(s[2117]);
initIAHDNAA(s[2118]);
initIAHDNPI(s[2119]);
initIAHDNDL(s[2120]);
initIAHDNII(s[2121]);
initIAHDNWD(s[2122]);
initIAHDNCA(s[2123]);
initIAHDN95(s[2124]);
initIAHDN96(s[2125]);
initIAHDNMIB(s[2126]);
initIAHDNMES(s[2127]);
initIAHDNMSD(s[2128]);
initIAHDNMSP(s[2129]);
initIAHDNMAA(s[2130]);
initIAHDNMPI(s[2131]);
initIAHDNMDL(s[2132]);
initIAHDNMII(s[2133]);
initIAHDNMWD(s[2134]);
initIAHDNMCA(s[2135]);
initIAHDNM85(s[2136]);
initIAHDNM86(s[2137]);
initIAHDNM96(s[2138]);
initIAT(s[2139]);
initIAP(s[2140]);
initIAA(s[2141]);
initIAA1WL(s[2142]);
initIAA1WU(s[2143]);
initIAA1WE(s[2144]);
initIAA1WR(s[2145]);
initIAA1FL(s[2146]);
initIAA1FU(s[2147]);
initIAA1FE(s[2148]);
initIAA1FR(s[2149]);
initIAA1ML(s[2150]);
initIAA1MU(s[2151]);
initIAA1ME(s[2152]);
initIAA1MR(s[2153]);
initIAA1YL(s[2154]);
initIAA1YU(s[2155]);
initIAA1YE(s[2156]);
initIAA1YR(s[2157]);
initIAA1OL(s[2158]);
initIAA1OU(s[2159]);
initIAA1OE(s[2160]);
initIAA1OR(s[2161]);
initIAT2(s[2162]);
initIAP2(s[2163]);
initIAA2(s[2164]);
initIAA2WL(s[2165]);
initIAA2WU(s[2166]);
initIAA2WE(s[2167]);
initIAA2WR(s[2168]);
initIAA2FL(s[2169]);
initIAA2FU(s[2170]);
initIAA2FE(s[2171]);
initIAA2FR(s[2172]);
initIAA2ML(s[2173]);
initIAA2MU(s[2174]);
initIAA2ME(s[2175]);
initIAA2MR(s[2176]);
initIAA2YL(s[2177]);
initIAA2YU(s[2178]);
initIAA2YE(s[2179]);
initIAA2YR(s[2180]);
initIAA2OL(s[2181]);
initIAA2OU(s[2182]);
initIAA2OE(s[2183]);
initIAA2OR(s[2184]);
initIAT3(s[2185]);
initIAP3(s[2186]);
initIAA3(s[2187]);
initIAA3WL(s[2188]);
initIAA3WU(s[2189]);
initIAA3WE(s[2190]);
initIAA3WR(s[2191]);
initIAA3FL(s[2192]);
initIAA3FU(s[2193]);
initIAA3FE(s[2194]);
initIAA3FR(s[2195]);
initIAA3ML(s[2196]);
initIAA3MU(s[2197]);
initIAA3ME(s[2198]);
initIAA3MR(s[2199]);
initIAA3YL(s[2200]);
initIAA3YU(s[2201]);
initIAA3YE(s[2202]);
initIAA3YR(s[2203]);
initIAA3OL(s[2204]);
initIAA3OU(s[2205]);
initIAA3OE(s[2206]);
initIAA3OR(s[2207]);
initIAT4(s[2208]);
initIAP4(s[2209]);
initIAA4(s[2210]);
initIAA4WL(s[2211]);
initIAA4WU(s[2212]);
initIAA4WE(s[2213]);
initIAA4WR(s[2214]);
initIAA4FL(s[2215]);
initIAA4FU(s[2216]);
initIAA4FE(s[2217]);
initIAA4FR(s[2218]);
initIAA4ML(s[2219]);
initIAA4MU(s[2220]);
initIAA4ME(s[2221]);
initIAA4MR(s[2222]);
initIAA4YL(s[2223]);
initIAA4YU(s[2224]);
initIAA4YE(s[2225]);
initIAA4YR(s[2226]);
initIAA4OL(s[2227]);
initIAA4OU(s[2228]);
initIAA4OE(s[2229]);
initIAA4OR(s[2230]);
initIAT5(s[2231]);
initIAP5(s[2232]);
initIAA5(s[2233]);
initIAA5WL(s[2234]);
initIAA5WU(s[2235]);
initIAA5WE(s[2236]);
initIAA5WR(s[2237]);
initIAA5FL(s[2238]);
initIAA5FU(s[2239]);
initIAA5FE(s[2240]);
initIAA5FR(s[2241]);
initIAA5ML(s[2242]);
initIAA5MU(s[2243]);
initIAA5ME(s[2244]);
initIAA5MR(s[2245]);
initIAA5YL(s[2246]);
initIAA5YU(s[2247]);
initIAA5YE(s[2248]);
initIAA5YR(s[2249]);
initIAA5OL(s[2250]);
initIAA5OU(s[2251]);
initIAA5OE(s[2252]);
initIAA5OR(s[2253]);
initIAT6(s[2254]);
initIAP6(s[2255]);
initIAA6(s[2256]);
initIAA6WL(s[2257]);
initIAA6WU(s[2258]);
initIAA6WE(s[2259]);
initIAA6WR(s[2260]);
initIAA6FL(s[2261]);
initIAA6FU(s[2262]);
initIAA6FE(s[2263]);
initIAA6FR(s[2264]);
initIAA6ML(s[2265]);
initIAA6MU(s[2266]);
initIAA6ME(s[2267]);
initIAA6MR(s[2268]);
initIAA6YL(s[2269]);
initIAA6YU(s[2270]);
initIAA6YE(s[2271]);
initIAA6YR(s[2272]);
initIAA6OL(s[2273]);
initIAA6OU(s[2274]);
initIAA6OE(s[2275]);
initIAA6OR(s[2276]);
initIAT7(s[2277]);
initIAP7(s[2278]);
initIAA7(s[2279]);
initIAA7WL(s[2280]);
initIAA7WU(s[2281]);
initIAA7WE(s[2282]);
initIAA7WR(s[2283]);
initIAA7FL(s[2284]);
initIAA7FU(s[2285]);
initIAA7FE(s[2286]);
initIAA7FR(s[2287]);
initIAA7ML(s[2288]);
initIAA7MU(s[2289]);
initIAA7ME(s[2290]);
initIAA7MR(s[2291]);
initIAA7YL(s[2292]);
initIAA7YU(s[2293]);
initIAA7YE(s[2294]);
initIAA7YR(s[2295]);
initIAA7OL(s[2296]);
initIAA7OU(s[2297]);
initIAA7OE(s[2298]);
initIAA7OR(s[2299]);
initIAT8(s[2300]);
initIAP8(s[2301]);
initIAA8(s[2302]);
initIAA8WL(s[2303]);
initIAA8WU(s[2304]);
initIAA8WE(s[2305]);
initIAA8WR(s[2306]);
initIAA8FL(s[2307]);
initIAA8FU(s[2308]);
initIAA8FE(s[2309]);
initIAA8FR(s[2310]);
initIAA8ML(s[2311]);
initIAA8MU(s[2312]);
initIAA8ME(s[2313]);
initIAA8MR(s[2314]);
initIAA8YL(s[2315]);
initIAA8YU(s[2316]);
initIAA8YE(s[2317]);
initIAA8YR(s[2318]);
initIAA8OL(s[2319]);
initIAA8OU(s[2320]);
initIAA8OE(s[2321]);
initIAA8OR(s[2322]);
initIAT9(s[2323]);
initIAP9(s[2324]);
initIAA9(s[2325]);
initIAA9WL(s[2326]);
initIAA9WU(s[2327]);
initIAA9WE(s[2328]);
initIAA9WR(s[2329]);
initIAA9FL(s[2330]);
initIAA9FU(s[2331]);
initIAA9FE(s[2332]);
initIAA9FR(s[2333]);
initIAA9ML(s[2334]);
initIAA9MU(s[2335]);
initIAA9ME(s[2336]);
initIAA9MR(s[2337]);
initIAA9YL(s[2338]);
initIAA9YU(s[2339]);
initIAA9YE(s[2340]);
initIAA9YR(s[2341]);
initIAA9OL(s[2342]);
initIAA9OU(s[2343]);
initIAA9OE(s[2344]);
initIAA9OR(s[2345]);
initIAT10(s[2346]);
initIAP10(s[2347]);
initIAA10(s[2348]);
initIAA10WL(s[2349]);
initIAA10WU(s[2350]);
initIAA10WE(s[2351]);
initIAA10WR(s[2352]);
initIAA10FL(s[2353]);
initIAA10FU(s[2354]);
initIAA10FE(s[2355]);
initIAA10FR(s[2356]);
initIAA10ML(s[2357]);
initIAA10MU(s[2358]);
initIAA10ME(s[2359]);
initIAA10MR(s[2360]);
initIAA10YL(s[2361]);
initIAA10YU(s[2362]);
initIAA10YE(s[2363]);
initIAA10YR(s[2364]);
initIAA10OL(s[2365]);
initIAA10OU(s[2366]);
initIAA10OE(s[2367]);
initIAA10OR(s[2368]);
initIAT11(s[2369]);
initIAP11(s[2370]);
initIAA11(s[2371]);
initIAA11WL(s[2372]);
initIAA11WU(s[2373]);
initIAA11WE(s[2374]);
initIAA11WR(s[2375]);
initIAA11FL(s[2376]);
initIAA11FU(s[2377]);
initIAA11FE(s[2378]);
initIAA11FR(s[2379]);
initIAA11ML(s[2380]);
initIAA11MU(s[2381]);
initIAA11ME(s[2382]);
initIAA11MR(s[2383]);
initIAA11YL(s[2384]);
initIAA11YU(s[2385]);
initIAA11YE(s[2386]);
initIAA11YR(s[2387]);
initIAA11OL(s[2388]);
initIAA11OU(s[2389]);
initIAA11OE(s[2390]);
initIAA11OR(s[2391]);
initIAHDPNIB(s[2392]);
initIAHDPNES(s[2393]);
initIAHDPNSD(s[2394]);
initIAHDPNSP(s[2395]);
initIAHDPNAA(s[2396]);
initIAHDPNPI(s[2397]);
initIAHDPNDL(s[2398]);
initIAHDPNII(s[2399]);
initIAHDPNWD(s[2400]);
initIAHDPNCA(s[2401]);
initIAHDPN95(s[2402]);
initIAHDPN96(s[2403]);
initIAHDPNMIB(s[2404]);
initIAHDPNMES(s[2405]);
initIAHDPNMSD(s[2406]);
initIAHDPNMSP(s[2407]);
initIAHDPNMAA(s[2408]);
initIAHDPNMPI(s[2409]);
initIAHDPNMDL(s[2410]);
initIAHDPNMII(s[2411]);
initIAHDPNMWD(s[2412]);
initIAHDPNMCA(s[2413]);
initIAHDPNM85(s[2414]);
initIAHDPNM86(s[2415]);
initIAHDPNM96(s[2416]);
initIAT12(s[2417]);
initIAP12(s[2418]);
initIAA12(s[2419]);
initIAA12WL(s[2420]);
initIAA12WU(s[2421]);
initIAA12WE(s[2422]);
initIAA12WR(s[2423]);
initIAA12FL(s[2424]);
initIAA12FU(s[2425]);
initIAA12FE(s[2426]);
initIAA12FR(s[2427]);
initIAA12ML(s[2428]);
initIAA12MU(s[2429]);
initIAA12ME(s[2430]);
initIAA12MR(s[2431]);
initIAA12YL(s[2432]);
initIAA12YU(s[2433]);
initIAA12YE(s[2434]);
initIAA12YR(s[2435]);
initIAA12OL(s[2436]);
initIAA12OU(s[2437]);
initIAA12OE(s[2438]);
initIAA12OR(s[2439]);
initIAT13(s[2440]);
initIAP13(s[2441]);
initIAA13(s[2442]);
initIAA13WL(s[2443]);
initIAA13WU(s[2444]);
initIAA13WE(s[2445]);
initIAA13WR(s[2446]);
initIAA13FL(s[2447]);
initIAA13FU(s[2448]);
initIAA13FE(s[2449]);
initIAA13FR(s[2450]);
initIAA13ML(s[2451]);
initIAA13MU(s[2452]);
initIAA13ME(s[2453]);
initIAA13MR(s[2454]);
initIAA13YL(s[2455]);
initIAA13YU(s[2456]);
initIAA13YE(s[2457]);
initIAA13YR(s[2458]);
initIAA13OL(s[2459]);
initIAA13OU(s[2460]);
initIAA13OE(s[2461]);
initIAA13OR(s[2462]);
initIAT14(s[2463]);
initIAP14(s[2464]);
initIAA14(s[2465]);
initIAA14WL(s[2466]);
initIAA14WU(s[2467]);
initIAA14WE(s[2468]);
initIAA14WR(s[2469]);
initIAA14FL(s[2470]);
initIAA14FU(s[2471]);
initIAA14FE(s[2472]);
initIAA14FR(s[2473]);
initIAA14ML(s[2474]);
initIAA14MU(s[2475]);
initIAA14ME(s[2476]);
initIAA14MR(s[2477]);
initIAA14YL(s[2478]);
initIAA14YU(s[2479]);
initIAA14YE(s[2480]);
initIAA14YR(s[2481]);
initIAA14OL(s[2482]);
initIAA14OU(s[2483]);
initIAA14OE(s[2484]);
initIAA14OR(s[2485]);
initIAT15(s[2486]);
initIAP15(s[2487]);
initIAA15(s[2488]);
initIAA15WL(s[2489]);
initIAA15WU(s[2490]);
initIAA15WE(s[2491]);
initIAA15WR(s[2492]);
initIAA15FL(s[2493]);
initIAA15FU(s[2494]);
initIAA15FE(s[2495]);
initIAA15FR(s[2496]);
initIAA15ML(s[2497]);
initIAA15MU(s[2498]);
initIAA15ME(s[2499]);
initIAA15MR(s[2500]);
initIAA15YL(s[2501]);
initIAA15YU(s[2502]);
initIAA15YE(s[2503]);
initIAA15YR(s[2504]);
initIAA15OL(s[2505]);
initIAA15OU(s[2506]);
initIAA15OE(s[2507]);
initIAA15OR(s[2508]);
initIAT16(s[2509]);
initIAP16(s[2510]);
initIAA16(s[2511]);
initIAA16WL(s[2512]);
initIAA16WU(s[2513]);
initIAA16WE(s[2514]);
initIAA16WR(s[2515]);
initIAA16FL(s[2516]);
initIAA16FU(s[2517]);
initIAA16FE(s[2518]);
initIAA16FR(s[2519]);
initIAA16ML(s[2520]);
initIAA16MU(s[2521]);
initIAA16ME(s[2522]);
initIAA16MR(s[2523]);
initIAA16YL(s[2524]);
initIAA16YU(s[2525]);
initIAA16YE(s[2526]);
initIAA16YR(s[2527]);
initIAA16OL(s[2528]);
initIAA16OU(s[2529]);
initIAA16OE(s[2530]);
initIAA16OR(s[2531]);
initIAT17(s[2532]);
initIAP17(s[2533]);
initIAA17(s[2534]);
initIAA17WL(s[2535]);
initIAA17WU(s[2536]);
initIAA17WE(s[2537]);
initIAA17WR(s[2538]);
initIAA17FL(s[2539]);
initIAA17FU(s[2540]);
initIAA17FE(s[2541]);
initIAA17FR(s[2542]);
initIAA17ML(s[2543]);
initIAA17MU(s[2544]);
initIAA17ME(s[2545]);
initIAA17MR(s[2546]);
initIAA17YL(s[2547]);
initIAA17YU(s[2548]);
initIAA17YE(s[2549]);
initIAA17YR(s[2550]);
initIAA17OL(s[2551]);
initIAA17OU(s[2552]);
initIAA17OE(s[2553]);
initIAA17OR(s[2554]);
initIAT18(s[2555]);
initIAP18(s[2556]);
initIAA18(s[2557]);
initIAA18WL(s[2558]);
initIAA18WU(s[2559]);
initIAA18WE(s[2560]);
initIAA18WR(s[2561]);
initIAA18FL(s[2562]);
initIAA18FU(s[2563]);
initIAA18FE(s[2564]);
initIAA18FR(s[2565]);
initIAA18ML(s[2566]);
initIAA18MU(s[2567]);
initIAA18ME(s[2568]);
initIAA18MR(s[2569]);
initIAA18YL(s[2570]);
initIAA18YU(s[2571]);
initIAA18YE(s[2572]);
initIAA18YR(s[2573]);
initIAA18OL(s[2574]);
initIAA18OU(s[2575]);
initIAA18OE(s[2576]);
initIAA18OR(s[2577]);
initIAT19(s[2578]);
initIAP19(s[2579]);
initIAA19(s[2580]);
initIAA19WL(s[2581]);
initIAA19WU(s[2582]);
initIAA19WE(s[2583]);
initIAA19WR(s[2584]);
initIAA19FL(s[2585]);
initIAA19FU(s[2586]);
initIAA19FE(s[2587]);
initIAA19FR(s[2588]);
initIAA19ML(s[2589]);
initIAA19MU(s[2590]);
initIAA19ME(s[2591]);
initIAA19MR(s[2592]);
initIAA19YL(s[2593]);
initIAA19YU(s[2594]);
initIAA19YE(s[2595]);
initIAA19YR(s[2596]);
initIAA19OL(s[2597]);
initIAA19OU(s[2598]);
initIAA19OE(s[2599]);
initIAA19OR(s[2600]);
initIAT20(s[2601]);
initIAP20(s[2602]);
initIAA20(s[2603]);
initIAA20WL(s[2604]);
initIAA20WU(s[2605]);
initIAA20WE(s[2606]);
initIAA20WR(s[2607]);
initIAA20FL(s[2608]);
initIAA20FU(s[2609]);
initIAA20FE(s[2610]);
initIAA20FR(s[2611]);
initIAA20ML(s[2612]);
initIAA20MU(s[2613]);
initIAA20ME(s[2614]);
initIAA20MR(s[2615]);
initIAA20YL(s[2616]);
initIAA20YU(s[2617]);
initIAA20YE(s[2618]);
initIAA20YR(s[2619]);
initIAA20OL(s[2620]);
initIAA20OU(s[2621]);
initIAA20OE(s[2622]);
initIAA20OR(s[2623]);
initIAT21(s[2624]);
initIAP21(s[2625]);
initIAA21(s[2626]);
initIAA21WL(s[2627]);
initIAA21WU(s[2628]);
initIAA21WE(s[2629]);
initIAA21WR(s[2630]);
initIAA21FL(s[2631]);
initIAA21FU(s[2632]);
initIAA21FE(s[2633]);
initIAA21FR(s[2634]);
initIAA21ML(s[2635]);
initIAA21MU(s[2636]);
initIAA21ME(s[2637]);
initIAA21MR(s[2638]);
initIAA21YL(s[2639]);
initIAA21YU(s[2640]);
initIAA21YE(s[2641]);
initIAA21YR(s[2642]);
initIAA21OL(s[2643]);
initIAA21OU(s[2644]);
initIAA21OE(s[2645]);
initIAA21OR(s[2646]);
initIAT22(s[2647]);
initIAP22(s[2648]);
initIAA22(s[2649]);
initIAA22WL(s[2650]);
initIAA22WU(s[2651]);
initIAA22WE(s[2652]);
initIAA22WR(s[2653]);
initIAA22FL(s[2654]);
initIAA22FU(s[2655]);
initIAA22FE(s[2656]);
initIAA22FR(s[2657]);
initIAA22ML(s[2658]);
initIAA22MU(s[2659]);
initIAA22ME(s[2660]);
initIAA22MR(s[2661]);
initIAA22YL(s[2662]);
initIAA22YU(s[2663]);
initIAA22YE(s[2664]);
initIAA22YR(s[2665]);
initIAA22OL(s[2666]);
initIAA22OU(s[2667]);
initIAA22OE(s[2668]);
initIAA22OR(s[2669]);
initIABEBC(s[2670]);
initIABENUC(s[2671]);
initIABENIS(s[2672]);
initIABENPC(s[2673]);
initIABENTC(s[2674]);
initIABENJA(s[2675]);
initIABENGA(s[2676]);
initIABENWP(s[2677]);
initIABENCB(s[2678]);
initIABENCC(s[2679]);
initIABEN95(s[2680]);
initIABEN96(s[2681]);
initIABENMUC(s[2682]);
initIABENMIS(s[2683]);
initIABENMPC(s[2684]);
initIABENMTC(s[2685]);
initIABENMJA(s[2686]);
initIABENMGA(s[2687]);
initIABENMWP(s[2688]);
initIABENMCB(s[2689]);
initIABENMCC(s[2690]);
initIABENMEC(s[2691]);
initIABENM85(s[2692]);
initIABENM86(s[2693]);
initIABENM96(s[2694]);
initIAT23(s[2695]);
initIAP23(s[2696]);
initIAA23(s[2697]);
initIAA23WL(s[2698]);
initIAA23WU(s[2699]);
initIAA23WE(s[2700]);
initIAA23WR(s[2701]);
initIAA23FL(s[2702]);
initIAA23FU(s[2703]);
initIAA23FE(s[2704]);
initIAA23FR(s[2705]);
initIAA23ML(s[2706]);
initIAA23MU(s[2707]);
initIAA23ME(s[2708]);
initIAA23MR(s[2709]);
initIAA23YL(s[2710]);
initIAA23YU(s[2711]);
initIAA23YE(s[2712]);
initIAA23YR(s[2713]);
initIAA23OL(s[2714]);
initIAA23OU(s[2715]);
initIAA23OE(s[2716]);
initIAA23OR(s[2717]);
initIAT24(s[2718]);
initIAP24(s[2719]);
initIAA24(s[2720]);
initIAA24WL(s[2721]);
initIAA24WU(s[2722]);
initIAA24WE(s[2723]);
initIAA24WR(s[2724]);
initIAA24FL(s[2725]);
initIAA24FU(s[2726]);
initIAA24FE(s[2727]);
initIAA24FR(s[2728]);
initIAA24ML(s[2729]);
initIAA24MU(s[2730]);
initIAA24ME(s[2731]);
initIAA24MR(s[2732]);
initIAA24YL(s[2733]);
initIAA24YU(s[2734]);
initIAA24YE(s[2735]);
initIAA24YR(s[2736]);
initIAA24OL(s[2737]);
initIAA24OU(s[2738]);
initIAA24OE(s[2739]);
initIAA24OR(s[2740]);
initIAT25(s[2741]);
initIAP25(s[2742]);
initIAA25(s[2743]);
initIAA25WL(s[2744]);
initIAA25WU(s[2745]);
initIAA25WE(s[2746]);
initIAA25WR(s[2747]);
initIAA25FL(s[2748]);
initIAA25FU(s[2749]);
initIAA25FE(s[2750]);
initIAA25FR(s[2751]);
initIAA25ML(s[2752]);
initIAA25MU(s[2753]);
initIAA25ME(s[2754]);
initIAA25MR(s[2755]);
initIAA25YL(s[2756]);
initIAA25YU(s[2757]);
initIAA25YE(s[2758]);
initIAA25YR(s[2759]);
initIAA25OL(s[2760]);
initIAA25OU(s[2761]);
initIAA25OE(s[2762]);
initIAA25OR(s[2763]);
initIAT26(s[2764]);
initIAP26(s[2765]);
initIAA26(s[2766]);
initIAA26WL(s[2767]);
initIAA26WU(s[2768]);
initIAA26WE(s[2769]);
initIAA26WR(s[2770]);
initIAA26FL(s[2771]);
initIAA26FU(s[2772]);
initIAA26FE(s[2773]);
initIAA26FR(s[2774]);
initIAA26ML(s[2775]);
initIAA26MU(s[2776]);
initIAA26ME(s[2777]);
initIAA26MR(s[2778]);
initIAA26YL(s[2779]);
initIAA26YU(s[2780]);
initIAA26YE(s[2781]);
initIAA26YR(s[2782]);
initIAA26OL(s[2783]);
initIAA26OU(s[2784]);
initIAA26OE(s[2785]);
initIAA26OR(s[2786]);
initIAT27(s[2787]);
initIAP27(s[2788]);
initIAA27(s[2789]);
initIAA27WL(s[2790]);
initIAA27WU(s[2791]);
initIAA27WE(s[2792]);
initIAA27WR(s[2793]);
initIAA27FL(s[2794]);
initIAA27FU(s[2795]);
initIAA27FE(s[2796]);
initIAA27FR(s[2797]);
initIAA27ML(s[2798]);
initIAA27MU(s[2799]);
initIAA27ME(s[2800]);
initIAA27MR(s[2801]);
initIAA27YL(s[2802]);
initIAA27YU(s[2803]);
initIAA27YE(s[2804]);
initIAA27YR(s[2805]);
initIAA27OL(s[2806]);
initIAA27OU(s[2807]);
initIAA27OE(s[2808]);
initIAA27OR(s[2809]);
initIAT28(s[2810]);
initIAP28(s[2811]);
initIAA28(s[2812]);
initIAA28WL(s[2813]);
initIAA28WU(s[2814]);
initIAA28WE(s[2815]);
initIAA28WR(s[2816]);
initIAA28FL(s[2817]);
initIAA28FU(s[2818]);
initIAA28FE(s[2819]);
initIAA28FR(s[2820]);
initIAA28ML(s[2821]);
initIAA28MU(s[2822]);
initIAA28ME(s[2823]);
initIAA28MR(s[2824]);
initIAA28YL(s[2825]);
initIAA28YU(s[2826]);
initIAA28YE(s[2827]);
initIAA28YR(s[2828]);
initIAA28OL(s[2829]);
initIAA28OU(s[2830]);
initIAA28OE(s[2831]);
initIAA28OR(s[2832]);
initIAT29(s[2833]);
initIAP29(s[2834]);
initIAA29(s[2835]);
initIAA29WL(s[2836]);
initIAA29WU(s[2837]);
initIAA29WE(s[2838]);
initIAA29WR(s[2839]);
initIAA29FL(s[2840]);
initIAA29FU(s[2841]);
initIAA29FE(s[2842]);
initIAA29FR(s[2843]);
initIAA29ML(s[2844]);
initIAA29MU(s[2845]);
initIAA29ME(s[2846]);
initIAA29MR(s[2847]);
initIAA29YL(s[2848]);
initIAA29YU(s[2849]);
initIAA29YE(s[2850]);
initIAA29YR(s[2851]);
initIAA29OL(s[2852]);
initIAA29OU(s[2853]);
initIAA29OE(s[2854]);
initIAA29OR(s[2855]);
initIAT30(s[2856]);
initIAP30(s[2857]);
initIAA30(s[2858]);
initIAA30WL(s[2859]);
initIAA30WU(s[2860]);
initIAA30WE(s[2861]);
initIAA30WR(s[2862]);
initIAA30FL(s[2863]);
initIAA30FU(s[2864]);
initIAA30FE(s[2865]);
initIAA30FR(s[2866]);
initIAA30ML(s[2867]);
initIAA30MU(s[2868]);
initIAA30ME(s[2869]);
initIAA30MR(s[2870]);
initIAA30YL(s[2871]);
initIAA30YU(s[2872]);
initIAA30YE(s[2873]);
initIAA30YR(s[2874]);
initIAA30OL(s[2875]);
initIAA30OU(s[2876]);
initIAA30OE(s[2877]);
initIAA30OR(s[2878]);
initIAT31(s[2879]);
initIAP31(s[2880]);
initIAA31(s[2881]);
initIAA31WL(s[2882]);
initIAA31WU(s[2883]);
initIAA31WE(s[2884]);
initIAA31WR(s[2885]);
initIAA31FL(s[2886]);
initIAA31FU(s[2887]);
initIAA31FE(s[2888]);
initIAA31FR(s[2889]);
initIAA31ML(s[2890]);
initIAA31MU(s[2891]);
initIAA31ME(s[2892]);
initIAA31MR(s[2893]);
initIAA31YL(s[2894]);
initIAA31YU(s[2895]);
initIAA31YE(s[2896]);
initIAA31YR(s[2897]);
initIAA31OL(s[2898]);
initIAA31OU(s[2899]);
initIAA31OE(s[2900]);
initIAA31OR(s[2901]);
initIAT32(s[2902]);
initIAP32(s[2903]);
initIAA32(s[2904]);
initIAA32WL(s[2905]);
initIAA32WU(s[2906]);
initIAA32WE(s[2907]);
initIAA32WR(s[2908]);
initIAA32FL(s[2909]);
initIAA32FU(s[2910]);
initIAA32FE(s[2911]);
initIAA32FR(s[2912]);
initIAA32ML(s[2913]);
initIAA32MU(s[2914]);
initIAA32ME(s[2915]);
initIAA32MR(s[2916]);
initIAA32YL(s[2917]);
initIAA32YU(s[2918]);
initIAA32YE(s[2919]);
initIAA32YR(s[2920]);
initIAA32OL(s[2921]);
initIAA32OU(s[2922]);
initIAA32OE(s[2923]);
initIAA32OR(s[2924]);
initIABEPNUC(s[2925]);
initIABEPNIS(s[2926]);
initIABEPNPC(s[2927]);
initIABEPNWC(s[2928]);
initIABEPNJA(s[2929]);
initIABEPNGA(s[2930]);
initIABEPNWP(s[2931]);
initIABEPNCB(s[2932]);
initIABEPNCC(s[2933]);
initIABEPN95(s[2934]);
initIABEPN96(s[2935]);
initIABPNMUC(s[2936]);
initIABPNMIS(s[2937]);
initIABPNMPC(s[2938]);
initIABPNMTC(s[2939]);
initIABPNMJA(s[2940]);
initIABPNMGA(s[2941]);
initIABPNMWP(s[2942]);
initIABPNMCB(s[2943]);
initIABPNMCC(s[2944]);
initIABPNMEC(s[2945]);
initIABPNM85(s[2946]);
initIABPNM86(s[2947]);
initIABPNM96(s[2948]);
initIAT33(s[2949]);
initIAP33(s[2950]);
initIAA33(s[2951]);
initIAA33WL(s[2952]);
initIAA33WU(s[2953]);
initIAA33WE(s[2954]);
initIAA33WR(s[2955]);
initIAA33FL(s[2956]);
initIAA33FU(s[2957]);
initIAA33FE(s[2958]);
initIAA33FR(s[2959]);
initIAA33ML(s[2960]);
initIAA33MU(s[2961]);
initIAA33ME(s[2962]);
initIAA33MR(s[2963]);
initIAA33YL(s[2964]);
initIAA33YU(s[2965]);
initIAA33YE(s[2966]);
initIAA33YR(s[2967]);
initIAA33OL(s[2968]);
initIAA33OU(s[2969]);
initIAA33OE(s[2970]);
initIAA33OR(s[2971]);
initIAT34(s[2972]);
initIAP34(s[2973]);
initIAA34(s[2974]);
initIAA34WL(s[2975]);
initIAA34WU(s[2976]);
initIAA34WE(s[2977]);
initIAA34WR(s[2978]);
initIAA34FL(s[2979]);
initIAA34FU(s[2980]);
initIAA34FE(s[2981]);
initIAA34FR(s[2982]);
initIAA34ML(s[2983]);
initIAA34MU(s[2984]);
initIAA34ME(s[2985]);
initIAA34MR(s[2986]);
initIAA34YL(s[2987]);
initIAA34YU(s[2988]);
initIAA34YE(s[2989]);
initIAA34YR(s[2990]);
initIAA34OL(s[2991]);
initIAA34OU(s[2992]);
initIAA34OE(s[2993]);
initIAA34OR(s[2994]);
initIAT35(s[2995]);
initIAP35(s[2996]);
initIAA35(s[2997]);
initIAA35WL(s[2998]);
initIAA35WU(s[2999]);
}
public void init_3000_3999(String line) {
initIAA35WE(s[3000]);
initIAA35WR(s[3001]);
initIAA35FL(s[3002]);
initIAA35FU(s[3003]);
initIAA35FE(s[3004]);
initIAA35FR(s[3005]);
initIAA35ML(s[3006]);
initIAA35MU(s[3007]);
initIAA35ME(s[3008]);
initIAA35MR(s[3009]);
initIAA35YL(s[3010]);
initIAA35YU(s[3011]);
initIAA35YE(s[3012]);
initIAA35YR(s[3013]);
initIAA35OL(s[3014]);
initIAA35OU(s[3015]);
initIAA35OE(s[3016]);
initIAA35OR(s[3017]);
initIAT36(s[3018]);
initIAP36(s[3019]);
initIAA36(s[3020]);
initIAA36WL(s[3021]);
initIAA36WU(s[3022]);
initIAA36WE(s[3023]);
initIAA36WR(s[3024]);
initIAA36FL(s[3025]);
initIAA36FU(s[3026]);
initIAA36FE(s[3027]);
initIAA36FR(s[3028]);
initIAA36ML(s[3029]);
initIAA36MU(s[3030]);
initIAA36ME(s[3031]);
initIAA36MR(s[3032]);
initIAA36YL(s[3033]);
initIAA36YU(s[3034]);
initIAA36YE(s[3035]);
initIAA36YR(s[3036]);
initIAA36OL(s[3037]);
initIAA36OU(s[3038]);
initIAA36OE(s[3039]);
initIAA36OR(s[3040]);
initIAT37(s[3041]);
initIAP37(s[3042]);
initIAA37(s[3043]);
initIAA37WL(s[3044]);
initIAA37WU(s[3045]);
initIAA37WE(s[3046]);
initIAA37WR(s[3047]);
initIAA37FL(s[3048]);
initIAA37FU(s[3049]);
initIAA37FE(s[3050]);
initIAA37FR(s[3051]);
initIAA37ML(s[3052]);
initIAA37MU(s[3053]);
initIAA37ME(s[3054]);
initIAA37MR(s[3055]);
initIAA37YL(s[3056]);
initIAA37YU(s[3057]);
initIAA37YE(s[3058]);
initIAA37YR(s[3059]);
initIAA37OL(s[3060]);
initIAA37OU(s[3061]);
initIAA37OE(s[3062]);
initIAA37OR(s[3063]);
initIAT38(s[3064]);
initIAP38(s[3065]);
initIAA38(s[3066]);
initIAA38WL(s[3067]);
initIAA38WU(s[3068]);
initIAA38WE(s[3069]);
initIAA38WR(s[3070]);
initIAA38FL(s[3071]);
initIAA38FU(s[3072]);
initIAA38FE(s[3073]);
initIAA38FR(s[3074]);
initIAA38ML(s[3075]);
initIAA38MU(s[3076]);
initIAA38ME(s[3077]);
initIAA38MR(s[3078]);
initIAA38YL(s[3079]);
initIAA38YU(s[3080]);
initIAA38YE(s[3081]);
initIAA38YR(s[3082]);
initIAA38OL(s[3083]);
initIAA38OU(s[3084]);
initIAA38OE(s[3085]);
initIAA38OR(s[3086]);
initIAT39(s[3087]);
initIAP39(s[3088]);
initIAA39(s[3089]);
initIAA39WL(s[3090]);
initIAA39WU(s[3091]);
initIAA39WE(s[3092]);
initIAA39WR(s[3093]);
initIAA39FL(s[3094]);
initIAA39FU(s[3095]);
initIAA39FE(s[3096]);
initIAA39FR(s[3097]);
initIAA39ML(s[3098]);
initIAA39MU(s[3099]);
initIAA39ME(s[3100]);
initIAA39MR(s[3101]);
initIAA39YL(s[3102]);
initIAA39YU(s[3103]);
initIAA39YE(s[3104]);
initIAA39YR(s[3105]);
initIAA39OL(s[3106]);
initIAA39OU(s[3107]);
initIAA39OE(s[3108]);
initIAA39OR(s[3109]);
initIAT40(s[3110]);
initIAP40(s[3111]);
initIAA40(s[3112]);
initIAA40WL(s[3113]);
initIAA40WU(s[3114]);
initIAA40WE(s[3115]);
initIAA40WR(s[3116]);
initIAA40FL(s[3117]);
initIAA40FU(s[3118]);
initIAA40FE(s[3119]);
initIAA40FR(s[3120]);
initIAA40ML(s[3121]);
initIAA40MU(s[3122]);
initIAA40ME(s[3123]);
initIAA40MR(s[3124]);
initIAA40YL(s[3125]);
initIAA40YU(s[3126]);
initIAA40YE(s[3127]);
initIAA40YR(s[3128]);
initIAA40OL(s[3129]);
initIAA40OU(s[3130]);
initIAA40OE(s[3131]);
initIAA40OR(s[3132]);
initIAT41(s[3133]);
initIAP41(s[3134]);
initIAA41(s[3135]);
initIAA41WL(s[3136]);
initIAA41WU(s[3137]);
initIAA41WE(s[3138]);
initIAA41WR(s[3139]);
initIAA41FL(s[3140]);
initIAA41FU(s[3141]);
initIAA41FE(s[3142]);
initIAA41FR(s[3143]);
initIAA41ML(s[3144]);
initIAA41MU(s[3145]);
initIAA41ME(s[3146]);
initIAA41MR(s[3147]);
initIAA41YL(s[3148]);
initIAA41YU(s[3149]);
initIAA41YE(s[3150]);
initIAA41YR(s[3151]);
initIAA41OL(s[3152]);
initIAA41OU(s[3153]);
initIAA41OE(s[3154]);
initIAA41OR(s[3155]);
initIAT42(s[3156]);
initIAP42(s[3157]);
initIAA42(s[3158]);
initIAA42WL(s[3159]);
initIAA42WU(s[3160]);
initIAA42WE(s[3161]);
initIAA42WR(s[3162]);
initIAA42FL(s[3163]);
initIAA42FU(s[3164]);
initIAA42FE(s[3165]);
initIAA42FR(s[3166]);
initIAA42ML(s[3167]);
initIAA42MU(s[3168]);
initIAA42ME(s[3169]);
initIAA42MR(s[3170]);
initIAA42YL(s[3171]);
initIAA42YU(s[3172]);
initIAA42YE(s[3173]);
initIAA42YR(s[3174]);
initIAA42OL(s[3175]);
initIAA42OU(s[3176]);
initIAA42OE(s[3177]);
initIAA42OR(s[3178]);
initIACBTX(s[3179]);
initIACBTP(s[3180]);
initIACBTA(s[3181]);
initIACBTWL(s[3182]);
initIACBTWU(s[3183]);
initIACBTWE(s[3184]);
initIACBTWR(s[3185]);
initIACBTFL(s[3186]);
initIACBTFU(s[3187]);
initIACBTFE(s[3188]);
initIACBTFR(s[3189]);
initIACBTML(s[3190]);
initIACBTMU(s[3191]);
initIACBTME(s[3192]);
initIACBTMR(s[3193]);
initIACBTYL(s[3194]);
initIACBTYU(s[3195]);
initIACBTYE(s[3196]);
initIACBTYR(s[3197]);
initIACBTOL(s[3198]);
initIACBTOU(s[3199]);
initIACBTOE(s[3200]);
initIACBTOR(s[3201]);
initIAFUEL(s[3202]);
initIASICA(s[3203]);
initIASISAV(s[3204]);
initIASITESS(s[3205]);
initIASIISA(s[3206]);
initIASIPB(s[3207]);
initIASINS(s[3208]);
initIASIPEP(s[3209]);
initIASISHA(s[3210]);
initIASIOPT(s[3211]);
initIASISC(s[3212]);
initIASIUIT(s[3213]);
initIASIBG(s[3214]);
initIASI95(s[3215]);
initIASI96(s[3216]);
initIASAVA(s[3217]);
initIASAVAL(s[3218]);
initIASAVAU(s[3219]);
initIASAVAE(s[3220]);
initIASAVAR(s[3221]);
initIASINT(s[3222]);
initIASINTL(s[3223]);
initIASINTU(s[3224]);
initIASINTE(s[3225]);
initIASINTR(s[3226]);
initIANS(s[3227]);
initIANSL(s[3228]);
initIANSU(s[3229]);
initIANSE(s[3230]);
initIANSR(s[3231]);
initIANSI(s[3232]);
initIANSIL(s[3233]);
initIANSIU(s[3234]);
initIANSIE(s[3235]);
initIANSIR(s[3236]);
initIANPB(s[3237]);
initIANPBL(s[3238]);
initIANPBU(s[3239]);
initIANPBE(s[3240]);
initIANPBR(s[3241]);
initIANPBP(s[3242]);
initIANPBPL(s[3243]);
initIANPBPU(s[3244]);
initIANPBPE(s[3245]);
initIANPBPR(s[3246]);
initIATI(s[3247]);
initIATIL(s[3248]);
initIATIU(s[3249]);
initIATIE(s[3250]);
initIATIR(s[3251]);
initIATII(s[3252]);
initIATIIL(s[3253]);
initIATIIU(s[3254]);
initIATIIE(s[3255]);
initIATIIR(s[3256]);
initIAISACAS(s[3257]);
initIAISALI(s[3258]);
initIAISASHA(s[3259]);
initIACISA(s[3260]);
initIACISAL(s[3261]);
initIACISAU(s[3262]);
initIACISAE(s[3263]);
initIACISAR(s[3264]);
initIALISA(s[3265]);
initIALISAL(s[3266]);
initIALISAU(s[3267]);
initIALISAE(s[3268]);
initIALISAR(s[3269]);
initIASISA(s[3270]);
initIASISAL(s[3271]);
initIASISAU(s[3272]);
initIASISAE(s[3273]);
initIASISAR(s[3274]);
initIAISAD(s[3275]);
initIAISADL(s[3276]);
initIAISADU(s[3277]);
initIAISADE(s[3278]);
initIAISADR(s[3279]);
initIAIP(s[3280]);
initIAIPL(s[3281]);
initIAIPU(s[3282]);
initIAIPE(s[3283]);
initIAIPR(s[3284]);
initIAIPI(s[3285]);
initIAIPIL(s[3286]);
initIAIPIU(s[3287]);
initIAIPIE(s[3288]);
initIAIPIR(s[3289]);
initIASSS(s[3290]);
initIASSSL(s[3291]);
initIASSSU(s[3292]);
initIASSSE(s[3293]);
initIASSSR(s[3294]);
initIASSSI(s[3295]);
initIASSSIL(s[3296]);
initIASSSIU(s[3297]);
initIASSSIE(s[3298]);
initIASSSIR(s[3299]);
initIASHTPRI(s[3300]);
initIASHTMUT(s[3301]);
initIASHTUKL(s[3302]);
initIASHTFOL(s[3303]);
initIADENAT(s[3304]);
initIADEMUT(s[3305]);
initIAUIT(s[3306]);
initIAUITL(s[3307]);
initIAUITU(s[3308]);
initIAUITE(s[3309]);
initIAUITR(s[3310]);
initIAUITI(s[3311]);
initIAUITIL(s[3312]);
initIAUITIU(s[3313]);
initIAUITIE(s[3314]);
initIAUITIR(s[3315]);
initIABG(s[3316]);
initIABGL(s[3317]);
initIABGU(s[3318]);
initIABGE(s[3319]);
initIABGR(s[3320]);
initIABGI(s[3321]);
initIABGIL(s[3322]);
initIABGIU(s[3323]);
initIABGIE(s[3324]);
initIABGIR(s[3325]);
initIASIO(s[3326]);
initIASIOL(s[3327]);
initIASIOU(s[3328]);
initIASIOE(s[3329]);
initIASIOR(s[3330]);
initIASIOI(s[3331]);
initIASIOIL(s[3332]);
initIASIOIU(s[3333]);
initIASIOIE(s[3334]);
initIASIOIR(s[3335]);
initIADEN(s[3336]);
initIADEM(s[3337]);
initIALI(s[3338]);
initIALIW(s[3339]);
initIALIYA(s[3340]);
initIALIYAL(s[3341]);
initIALIYAU(s[3342]);
initIALIYAE(s[3343]);
initIALIYAR(s[3344]);
initIALIPA(s[3345]);
initIALIPAL(s[3346]);
initIALIPAU(s[3347]);
initIALIPAE(s[3348]);
initIALIPAR(s[3349]);
initIASC(s[3350]);
initIASCA(s[3351]);
initIASCAL(s[3352]);
initIASCAU(s[3353]);
initIASCAE(s[3354]);
initIASCAR(s[3355]);
initIADOC(s[3356]);
initIAINTA(s[3357]);
initIAPROPHO(s[3358]);
initIAPROPFA(s[3359]);
initIAPROPOL(s[3360]);
initIAPROPOW(s[3361]);
initIAPROPTR(s[3362]);
initIAPROPIN(s[3363]);
initIAPROP95(s[3364]);
initIAPROP96(s[3365]);
initIAHOME(s[3366]);
initIAHOMEL(s[3367]);
initIAHOMEU(s[3368]);
initIAHOMEE(s[3369]);
initIAHOMER(s[3370]);
initIAIR(s[3371]);
initIAIRA(s[3372]);
initIAIRAL(s[3373]);
initIAIRAU(s[3374]);
initIAIRAE(s[3375]);
initIAIRAR(s[3376]);
initIAFBPS(s[3377]);
initIAFBPSL(s[3378]);
initIAFBPSU(s[3379]);
initIAFBPSE(s[3380]);
initIAFBPSR(s[3381]);
initIAFBPR(s[3382]);
initIAFBA(s[3383]);
initIAFBAL(s[3384]);
initIAFBAU(s[3385]);
initIAFBAE(s[3386]);
initIAFBAR(s[3387]);
initIAOASA(s[3388]);
initIAOASAL(s[3389]);
initIAOASAU(s[3390]);
initIAOASAE(s[3391]);
initIAOASAR(s[3392]);
initIAREGP(s[3393]);
initIAPAY(s[3394]);
initIAPAYR(s[3395]);
initIAREGO(s[3396]);
initIAREGM(s[3397]);
initIARGWL(s[3398]);
initIARGWU(s[3399]);
initIARGWE(s[3400]);
initIARGWR(s[3401]);
initIARGFL(s[3402]);
initIARGFU(s[3403]);
initIARGFE(s[3404]);
initIARGFR(s[3405]);
initIARGML(s[3406]);
initIARGMU(s[3407]);
initIARGME(s[3408]);
initIARGMR(s[3409]);
initIARGYL(s[3410]);
initIARGYU(s[3411]);
initIARGYE(s[3412]);
initIARGYR(s[3413]);
initIARGOL(s[3414]);
initIARGOU(s[3415]);
initIARGOE(s[3416]);
initIARGOR(s[3417]);
initIAOTHP(s[3418]);
initIAPAY2(s[3419]);
initIAPAYR2(s[3420]);
initIAREGO2(s[3421]);
initIAREGM2(s[3422]);
initIARG2WL(s[3423]);
initIARG2WU(s[3424]);
initIARG2WE(s[3425]);
initIARG2WR(s[3426]);
initIARG2FL(s[3427]);
initIARG2FU(s[3428]);
initIARG2FE(s[3429]);
initIARG2FR(s[3430]);
initIARG2ML(s[3431]);
initIARG2MU(s[3432]);
initIARG2ME(s[3433]);
initIARG2MR(s[3434]);
initIARG2YL(s[3435]);
initIARG2YU(s[3436]);
initIARG2YE(s[3437]);
initIARG2YR(s[3438]);
initIARG2OL(s[3439]);
initIARG2OU(s[3440]);
initIARG2OE(s[3441]);
initIARG2OR(s[3442]);
initIAOTHP2(s[3443]);
initIAPAY3(s[3444]);
initIAPAYR3(s[3445]);
initIAREGO3(s[3446]);
initIAREGM3(s[3447]);
initIARG3WL(s[3448]);
initIARG3WU(s[3449]);
initIARG3WE(s[3450]);
initIARG3WR(s[3451]);
initIARG3FL(s[3452]);
initIARG3FU(s[3453]);
initIARG3FE(s[3454]);
initIARG3FR(s[3455]);
initIARG3ML(s[3456]);
initIARG3MU(s[3457]);
initIARG3ME(s[3458]);
initIARG3MR(s[3459]);
initIARG3YL(s[3460]);
initIARG3YU(s[3461]);
initIARG3YE(s[3462]);
initIARG3YR(s[3463]);
initIARG3OL(s[3464]);
initIARG3OU(s[3465]);
initIARG3OE(s[3466]);
initIARG3OR(s[3467]);
initIAOTHP3(s[3468]);
initIAPAY4(s[3469]);
initIAPAYR4(s[3470]);
initIAREGO4(s[3471]);
initIAREGM4(s[3472]);
initIARG4WL(s[3473]);
initIARG4WU(s[3474]);
initIARG4WE(s[3475]);
initIARG4WR(s[3476]);
initIARG4FL(s[3477]);
initIARG4FU(s[3478]);
initIARG4FE(s[3479]);
initIARG4FR(s[3480]);
initIARG4ML(s[3481]);
initIARG4MU(s[3482]);
initIARG4ME(s[3483]);
initIARG4MR(s[3484]);
initIARG4YL(s[3485]);
initIARG4YU(s[3486]);
initIARG4YE(s[3487]);
initIARG4YR(s[3488]);
initIARG4OL(s[3489]);
initIARG4OU(s[3490]);
initIARG4OE(s[3491]);
initIARG4OR(s[3492]);
initIAOTHP4(s[3493]);
initIAPAR(s[3494]);
initIAPS(s[3495]);
initIAPR(s[3496]);
initIAPF(s[3497]);
initIAPAM2(s[3498]);
initIAPA2WL(s[3499]);
initIAPA2WU(s[3500]);
initIAPA2WE(s[3501]);
initIAPA2WR(s[3502]);
initIAPA2FL(s[3503]);
initIAPA2FU(s[3504]);
initIAPA2FE(s[3505]);
initIAPA2FR(s[3506]);
initIAPA2ML(s[3507]);
initIAPA2MU(s[3508]);
initIAPA2ME(s[3509]);
initIAPA2MR(s[3510]);
initIAPA2YL(s[3511]);
initIAPA2YU(s[3512]);
initIAPA2YE(s[3513]);
initIAPA2YR(s[3514]);
initIAPA2OL(s[3515]);
initIAPA2OU(s[3516]);
initIAPA2OE(s[3517]);
initIAPA2OR(s[3518]);
initIAMRP(s[3519]);
initIAPS2(s[3520]);
initIAPR2(s[3521]);
initIAPF2(s[3522]);
initIAPAM3(s[3523]);
initIAPA3WL(s[3524]);
initIAPA3WU(s[3525]);
initIAPA3WE(s[3526]);
initIAPA3WR(s[3527]);
initIAPA3FL(s[3528]);
initIAPA3FU(s[3529]);
initIAPA3FE(s[3530]);
initIAPA3FR(s[3531]);
initIAPA3ML(s[3532]);
initIAPA3MU(s[3533]);
initIAPA3ME(s[3534]);
initIAPA3MR(s[3535]);
initIAPA3YL(s[3536]);
initIAPA3YU(s[3537]);
initIAPA3YE(s[3538]);
initIAPA3YR(s[3539]);
initIAPA3OL(s[3540]);
initIAPA3OU(s[3541]);
initIAPA3OE(s[3542]);
initIAPA3OR(s[3543]);
initIAMRP2(s[3544]);
initIAPS3(s[3545]);
initIAPR3(s[3546]);
initIAPF3(s[3547]);
initIAPAM4(s[3548]);
initIAPA4WL(s[3549]);
initIAPA4WU(s[3550]);
initIAPA4WE(s[3551]);
initIAPA4WR(s[3552]);
initIAPA4FL(s[3553]);
initIAPA4FU(s[3554]);
initIAPA4FE(s[3555]);
initIAPA4FR(s[3556]);
initIAPA4ML(s[3557]);
initIAPA4MU(s[3558]);
initIAPA4ME(s[3559]);
initIAPA4MR(s[3560]);
initIAPA4YL(s[3561]);
initIAPA4YU(s[3562]);
initIAPA4YE(s[3563]);
initIAPA4YR(s[3564]);
initIAPA4OL(s[3565]);
initIAPA4OU(s[3566]);
initIAPA4OE(s[3567]);
initIAPA4OR(s[3568]);
initIAMRP3(s[3569]);
initIAPS4(s[3570]);
initIAPR4(s[3571]);
initIAPF4(s[3572]);
initIAPAM5(s[3573]);
initIAPA5WL(s[3574]);
initIAPA5WU(s[3575]);
initIAPA5WE(s[3576]);
initIAPA5WR(s[3577]);
initIAPA5FL(s[3578]);
initIAPA5FU(s[3579]);
initIAPA5FE(s[3580]);
initIAPA5FR(s[3581]);
initIAPA5ML(s[3582]);
initIAPA5MU(s[3583]);
initIAPA5ME(s[3584]);
initIAPA5MR(s[3585]);
initIAPA5YL(s[3586]);
initIAPA5YU(s[3587]);
initIAPA5YE(s[3588]);
initIAPA5YR(s[3589]);
initIAPA5OL(s[3590]);
initIAPA5OU(s[3591]);
initIAPA5OE(s[3592]);
initIAPA5OR(s[3593]);
initIAMRP4(s[3594]);
initIAPKLI(s[3595]);
initIAPKPP(s[3596]);
initIAPKPAP(s[3597]);
initIAPKOIP(s[3598]);
initIAPKRP(s[3599]);
initIAPKIOB(s[3600]);
initIAPKGW(s[3601]);
initIAPKSG(s[3602]);
initIAPK95(s[3603]);
initIAPK96(s[3604]);
initIAPKMLI(s[3605]);
initIAPKMPP(s[3606]);
initIAPKMPAP(s[3607]);
initIAPKMOIP(s[3608]);
initIAPKMRP(s[3609]);
initIAPKMIOB(s[3610]);
initIAPKMGW(s[3611]);
initIAPKMSG(s[3612]);
initIAPKMPPI(s[3613]);
initIAPKM85(s[3614]);
initIAPKM86(s[3615]);
initIAPKM96(s[3616]);
initIAPKM1(s[3617]);
initIAPKM1L(s[3618]);
initIAPKM1U(s[3619]);
initIAPKM1E(s[3620]);
initIAPKM1R(s[3621]);
initIAPKM2(s[3622]);
initIAPKM2L(s[3623]);
initIAPKM2U(s[3624]);
initIAPKM2E(s[3625]);
initIAPKM2R(s[3626]);
initIAPKM3(s[3627]);
initIAPKM3L(s[3628]);
initIAPKM3U(s[3629]);
initIAPKM3E(s[3630]);
initIAPKM3R(s[3631]);
initIAPKM4(s[3632]);
initIAPKM4L(s[3633]);
initIAPKM4U(s[3634]);
initIAPKM4E(s[3635]);
initIAPKM4R(s[3636]);
initIAPKM5(s[3637]);
initIAPKM5L(s[3638]);
initIAPKM5U(s[3639]);
initIAPKM5E(s[3640]);
initIAPKM5R(s[3641]);
initIAPKM6(s[3642]);
initIAPKM6L(s[3643]);
initIAPKM6U(s[3644]);
initIAPKM6E(s[3645]);
initIAPKM6R(s[3646]);
initIAPKM7(s[3647]);
initIAPKM7L(s[3648]);
initIAPKM7U(s[3649]);
initIAPKM7E(s[3650]);
initIAPKM7R(s[3651]);
initIAPKM8(s[3652]);
initIAPKM8L(s[3653]);
initIAPKM8U(s[3654]);
initIAPKM8E(s[3655]);
initIAPKM8R(s[3656]);
initIAPKM9(s[3657]);
initIAPKM9L(s[3658]);
initIAPKM9U(s[3659]);
initIAPKM9E(s[3660]);
initIAPKM9R(s[3661]);
initIADEBT(s[3662]);
initIADEBM(s[3663]);
initIADEBML(s[3664]);
initIADEBMU(s[3665]);
initIADEBME(s[3666]);
initIADEBMR(s[3667]);
initIAOWE(s[3668]);
initIAOWEM(s[3669]);
initIAOWEML(s[3670]);
initIAOWEMU(s[3671]);
initIAOWEME(s[3672]);
initIAOWEMR(s[3673]);
initIAREGR(s[3674]);
initIAREGRP(s[3675]);
initIAREP(s[3676]);
initIAREPWL(s[3677]);
initIAREPWU(s[3678]);
initIAREPWE(s[3679]);
initIAREPWR(s[3680]);
initIAREPFL(s[3681]);
initIAREPFU(s[3682]);
initIAREPFE(s[3683]);
initIAREPFR(s[3684]);
initIAREPML(s[3685]);
initIAREPMU(s[3686]);
initIAREPME(s[3687]);
initIAREPMR(s[3688]);
initIAREPYL(s[3689]);
initIAREPYU(s[3690]);
initIAREPYE(s[3691]);
initIAREPYR(s[3692]);
initIAREPOL(s[3693]);
initIAREPOU(s[3694]);
initIAREPOE(s[3695]);
initIAREPOR(s[3696]);
initIALOANHP(s[3697]);
initIALOANPL(s[3698]);
initIALOANOD(s[3699]);
initIALOANMO(s[3700]);
initIALOANSF(s[3701]);
initIALOANML(s[3702]);
initIALOAN96(s[3703]);
initIALOAM(s[3704]);
initIALOAML(s[3705]);
initIALOAMU(s[3706]);
initIALOAME(s[3707]);
initIALOAMR(s[3708]);
initIALREP(s[3709]);
initIALRE(s[3710]);
initIALREWL(s[3711]);
initIALREWU(s[3712]);
initIALREWE(s[3713]);
initIALREWR(s[3714]);
initIALREFL(s[3715]);
initIALREFU(s[3716]);
initIALREFE(s[3717]);
initIALREFR(s[3718]);
initIALREML(s[3719]);
initIALREMU(s[3720]);
initIALREME(s[3721]);
initIALREMR(s[3722]);
initIALREYL(s[3723]);
initIALREYU(s[3724]);
initIALREYE(s[3725]);
initIALREYR(s[3726]);
initIALREOL(s[3727]);
initIALREOU(s[3728]);
initIALREOE(s[3729]);
initIALREOR(s[3730]);
initIAJNT(s[3731]);
initIAAM(s[3732]);
initIAAML(s[3733]);
initIAAMU(s[3734]);
initIAAME(s[3735]);
initIAAMR(s[3736]);
initIAI(s[3737]);
initIAIN(s[3738]);
initIAIWH(s[3739]);
initIAIJ(s[3740]);
initIAIWN(s[3741]);
initIAIY(s[3742]);
initIAIAG(s[3743]);
initIAIWM(s[3744]);
initIAIV(s[3745]);
initIAIVL(s[3746]);
initIAIVU(s[3747]);
initIAIVE(s[3748]);
initIAIVR(s[3749]);
initIAIWH2(s[3750]);
initIAIJ2(s[3751]);
initIAIWN2(s[3752]);
initIAIY2(s[3753]);
initIAIAG2(s[3754]);
initIAIWM2(s[3755]);
initIAIV2(s[3756]);
initIAIV2L(s[3757]);
initIAIV2U(s[3758]);
initIAIV2E(s[3759]);
initIAIV2R(s[3760]);
initIAIWH3(s[3761]);
initIAIJ3(s[3762]);
initIAIWN3(s[3763]);
initIAIY3(s[3764]);
initIAIAG3(s[3765]);
initIAIWM3(s[3766]);
initIAIV3(s[3767]);
initIAIV3L(s[3768]);
initIAIV3U(s[3769]);
initIAIV3E(s[3770]);
initIAIV3R(s[3771]);
initIAG(s[3772]);
initIAGN(s[3773]);
initIAGWH(s[3774]);
initIAGJ(s[3775]);
initIAGWN(s[3776]);
initIAGY(s[3777]);
initIAGAG(s[3778]);
initIAGWM(s[3779]);
initIAGV(s[3780]);
initIAGVL(s[3781]);
initIAGVU(s[3782]);
initIAGVE(s[3783]);
initIAGVR(s[3784]);
initIAGWH2(s[3785]);
initIAGJ2(s[3786]);
initIAGWN2(s[3787]);
initIAGY2(s[3788]);
initIAGAG2(s[3789]);
initIAGWM2(s[3790]);
initIAGV2(s[3791]);
initIAGV2L(s[3792]);
initIAGV2U(s[3793]);
initIAGV2E(s[3794]);
initIAGV2R(s[3795]);
initIAGWH3(s[3796]);
initIAGJ3(s[3797]);
initIAGWN3(s[3798]);
initIAGY3(s[3799]);
initIAGAG3(s[3800]);
initIAGWM3(s[3801]);
initIAGV3(s[3802]);
initIAGV3L(s[3803]);
initIAGV3U(s[3804]);
initIAGV3E(s[3805]);
initIAGV3R(s[3806]);
initIAFCON(s[3807]);
initIAORGF(s[3808]);
initIAFIND(s[3809]);
initIAHHINC(s[3810]);
initIAPYW(s[3811]);
initIAERN(s[3812]);
initIAEARL(s[3813]);
initIAEARU(s[3814]);
initIAEARE(s[3815]);
initIAEARR(s[3816]);
initIAPYW2(s[3817]);
initIAERN2(s[3818]);
initIAEAR2L(s[3819]);
initIAEAR2U(s[3820]);
initIAEAR2E(s[3821]);
initIAEAR2R(s[3822]);
initIAPYW3(s[3823]);
initIAERN3(s[3824]);
initIAEAR3L(s[3825]);
initIAEAR3U(s[3826]);
initIAEAR3E(s[3827]);
initIAEAR3R(s[3828]);
initIAPYW4(s[3829]);
initIAERN4(s[3830]);
initIAEAR4L(s[3831]);
initIAEAR4U(s[3832]);
initIAEAR4E(s[3833]);
initIAEAR4R(s[3834]);
initIAPYW5(s[3835]);
initIAERN5(s[3836]);
initIAEAR5L(s[3837]);
initIAEAR5U(s[3838]);
initIAEAR5E(s[3839]);
initIAEAR5R(s[3840]);
initIAPYW6(s[3841]);
initIAERN6(s[3842]);
initIAEAR6L(s[3843]);
initIAEAR6U(s[3844]);
initIAEAR6E(s[3845]);
initIAEAR6R(s[3846]);
initIAPYW7(s[3847]);
initIAERN7(s[3848]);
initIAEAR7L(s[3849]);
initIAEAR7U(s[3850]);
initIAEAR7E(s[3851]);
initIAEAR7R(s[3852]);
initIAPY(s[3853]);
initIAERN8(s[3854]);
initIAEAR8L(s[3855]);
initIAEAR8U(s[3856]);
initIAEAR8E(s[3857]);
initIAEAR8R(s[3858]);
initIAPYW9(s[3859]);
initIAERN9(s[3860]);
initIAEAR9L(s[3861]);
initIAEAR9U(s[3862]);
initIAEAR9E(s[3863]);
initIAEAR9R(s[3864]);
initIAPYW10(s[3865]);
initIAERN10(s[3866]);
initIAEA10L(s[3867]);
initIAEA10U(s[3868]);
initIAEA10E(s[3869]);
initIAEA10R(s[3870]);
initIAPYW11(s[3871]);
initIAERN11(s[3872]);
initIAEA11L(s[3873]);
initIAEA11U(s[3874]);
initIAEA11E(s[3875]);
initIAEA11R(s[3876]);
initIAPYW12(s[3877]);
initIAERN12(s[3878]);
initIAEA12L(s[3879]);
initIAEA12U(s[3880]);
initIAEA12E(s[3881]);
initIAEA12R(s[3882]);
initIAPYW13(s[3883]);
initIAERN13(s[3884]);
initIAEA13L(s[3885]);
initIAEA13U(s[3886]);
initIAEA13E(s[3887]);
initIAEA13R(s[3888]);
initIAPYW14(s[3889]);
initIAERN14(s[3890]);
initIAEA14L(s[3891]);
initIAEA14U(s[3892]);
initIAEA14E(s[3893]);
initIAEA14R(s[3894]);
initIAPYW15(s[3895]);
initIAERN15(s[3896]);
initIAEA15L(s[3897]);
initIAEA15U(s[3898]);
initIAEA15E(s[3899]);
initIAEA15R(s[3900]);
initIAPYW16(s[3901]);
initIAERN16(s[3902]);
initIAEA16L(s[3903]);
initIAEA16U(s[3904]);
initIAEA16E(s[3905]);
initIAEA16R(s[3906]);
initIABENR(s[3907]);
initIAREC(s[3908]);
initIARECL(s[3909]);
initIARECU(s[3910]);
initIARECE(s[3911]);
initIARECR(s[3912]);
initIAOM(s[3913]);
initIAOMM(s[3914]);
initIAOMML(s[3915]);
initIAOMMU(s[3916]);
initIAOMME(s[3917]);
initIAOMMR(s[3918]);
initHOPID(s[3919]);
initHOASK(s[3920]);
initHOELI(s[3921]);
initHOWHO(s[3922]);
initHOWH1(s[3923]);
initHOWH2(s[3924]);
initHOWH3(s[3925]);
initHOWH4(s[3926]);
initHOWH5(s[3927]);
initHOWH6(s[3928]);
initHOWH7(s[3929]);
initHOWH8(s[3930]);
initHOWH9(s[3931]);
initHOWH10(s[3932]);
initHOWH11(s[3933]);
initHOWH12(s[3934]);
initHOWH13(s[3935]);
initHOWH14(s[3936]);
initHOWH15(s[3937]);
initHOWH16(s[3938]);
initHOWH97(s[3939]);
initHOBAS(s[3940]);
initHOBP(s[3941]);
initHOBA(s[3942]);
initHOBAWL(s[3943]);
initHOBAWU(s[3944]);
initHOBAWE(s[3945]);
initHOBAWR(s[3946]);
initHOBAFL(s[3947]);
initHOBAFU(s[3948]);
initHOBAFE(s[3949]);
initHOBAFR(s[3950]);
initHOBAML(s[3951]);
initHOBAMU(s[3952]);
initHOBAME(s[3953]);
initHOBAMR(s[3954]);
initHOBAYL(s[3955]);
initHOBAYU(s[3956]);
initHOBAYE(s[3957]);
initHOBAYR(s[3958]);
initHOBAOL(s[3959]);
initHOBAOU(s[3960]);
initHOBAOE(s[3961]);
initHOBAOR(s[3962]);
initHOBAS2(s[3963]);
initHOBP2(s[3964]);
initHOBA2(s[3965]);
initHOBA2WL(s[3966]);
initHOBA2WU(s[3967]);
initHOBA2WE(s[3968]);
initHOBA2WR(s[3969]);
initHOBA2FL(s[3970]);
initHOBA2FU(s[3971]);
initHOBA2FE(s[3972]);
initHOBA2FR(s[3973]);
initHOBA2ML(s[3974]);
initHOBA2MU(s[3975]);
initHOBA2ME(s[3976]);
initHOBA2MR(s[3977]);
initHOBA2YL(s[3978]);
initHOBA2YU(s[3979]);
initHOBA2YE(s[3980]);
initHOBA2YR(s[3981]);
initHOBA2OL(s[3982]);
initHOBA2OU(s[3983]);
initHOBA2OE(s[3984]);
initHOBA2OR(s[3985]);
initHOBAS3(s[3986]);
initHOBP3(s[3987]);
initHOBA3(s[3988]);
initHOBA3WL(s[3989]);
initHOBA3WU(s[3990]);
initHOBA3WE(s[3991]);
initHOBA3WR(s[3992]);
initHOBA3FL(s[3993]);
initHOBA3FU(s[3994]);
initHOBA3FE(s[3995]);
initHOBA3FR(s[3996]);
initHOBA3ML(s[3997]);
initHOBA3MU(s[3998]);
initHOBA3ME(s[3999]);
}
public void init_4000_4999(String line) {
initHOBA3MR(s[4000]);
initHOBA3YL(s[4001]);
initHOBA3YU(s[4002]);
initHOBA3YE(s[4003]);
initHOBA3YR(s[4004]);
initHOBA3OL(s[4005]);
initHOBA3OU(s[4006]);
initHOBA3OE(s[4007]);
initHOBA3OR(s[4008]);
initHOBAS4(s[4009]);
initHOBP4(s[4010]);
initHOBA4(s[4011]);
initHOBA4WL(s[4012]);
initHOBA4WU(s[4013]);
initHOBA4WE(s[4014]);
initHOBA4WR(s[4015]);
initHOBA4FL(s[4016]);
initHOBA4FU(s[4017]);
initHOBA4FE(s[4018]);
initHOBA4FR(s[4019]);
initHOBA4ML(s[4020]);
initHOBA4MU(s[4021]);
initHOBA4ME(s[4022]);
initHOBA4MR(s[4023]);
initHOBA4YL(s[4024]);
initHOBA4YU(s[4025]);
initHOBA4YE(s[4026]);
initHOBA4YR(s[4027]);
initHOBA4OL(s[4028]);
initHOBA4OU(s[4029]);
initHOBA4OE(s[4030]);
initHOBA4OR(s[4031]);
initHOBAS5(s[4032]);
initHOBP5(s[4033]);
initHOBA5(s[4034]);
initHOBA5WL(s[4035]);
initHOBA5WU(s[4036]);
initHOBA5WE(s[4037]);
initHOBA5WR(s[4038]);
initHOBA5FL(s[4039]);
initHOBA5FU(s[4040]);
initHOBA5FE(s[4041]);
initHOBA5FR(s[4042]);
initHOBA5ML(s[4043]);
initHOBA5MU(s[4044]);
initHOBA5ME(s[4045]);
initHOBA5MR(s[4046]);
initHOBA5YL(s[4047]);
initHOBA5YU(s[4048]);
initHOBA5YE(s[4049]);
initHOBA5YR(s[4050]);
initHOBA5OL(s[4051]);
initHOBA5OU(s[4052]);
initHOBA5OE(s[4053]);
initHOBA5OR(s[4054]);
initHOBAS6(s[4055]);
initHOBP6(s[4056]);
initHOBA6(s[4057]);
initHOBA6WL(s[4058]);
initHOBA6WU(s[4059]);
initHOBA6WE(s[4060]);
initHOBA6WR(s[4061]);
initHOBA6FL(s[4062]);
initHOBA6FU(s[4063]);
initHOBA6FE(s[4064]);
initHOBA6FR(s[4065]);
initHOBA6ML(s[4066]);
initHOBA6MU(s[4067]);
initHOBA6ME(s[4068]);
initHOBA6MR(s[4069]);
initHOBA6YL(s[4070]);
initHOBA6YU(s[4071]);
initHOBA6YE(s[4072]);
initHOBA6YR(s[4073]);
initHOBA6OL(s[4074]);
initHOBA6OU(s[4075]);
initHOBA6OE(s[4076]);
initHOBA6OR(s[4077]);
initHOBAS7(s[4078]);
initHOBP7(s[4079]);
initHOBA7(s[4080]);
initHOBA7WL(s[4081]);
initHOBA7WU(s[4082]);
initHOBA7WE(s[4083]);
initHOBA7WR(s[4084]);
initHOBA7FL(s[4085]);
initHOBA7FU(s[4086]);
initHOBA7FE(s[4087]);
initHOBA7FR(s[4088]);
initHOBA7ML(s[4089]);
initHOBA7MU(s[4090]);
initHOBA7ME(s[4091]);
initHOBA7MR(s[4092]);
initHOBA7YL(s[4093]);
initHOBA7YU(s[4094]);
initHOBA7YE(s[4095]);
initHOBA7YR(s[4096]);
initHOBA7OL(s[4097]);
initHOBA7OU(s[4098]);
initHOBA7OE(s[4099]);
initHOBA7OR(s[4100]);
initHOBAS8(s[4101]);
initHOBP8(s[4102]);
initHOBA8(s[4103]);
initHOBA8WL(s[4104]);
initHOBA8WU(s[4105]);
initHOBA8WE(s[4106]);
initHOBA8WR(s[4107]);
initHOBA8FL(s[4108]);
initHOBA8FU(s[4109]);
initHOBA8FE(s[4110]);
initHOBA8FR(s[4111]);
initHOBA8ML(s[4112]);
initHOBA8MU(s[4113]);
initHOBA8ME(s[4114]);
initHOBA8MR(s[4115]);
initHOBA8YL(s[4116]);
initHOBA8YU(s[4117]);
initHOBA8YE(s[4118]);
initHOBA8YR(s[4119]);
initHOBA8OL(s[4120]);
initHOBA8OU(s[4121]);
initHOBA8OE(s[4122]);
initHOBA8OR(s[4123]);
initHOBAS9(s[4124]);
initHOBP9(s[4125]);
initHOBA9(s[4126]);
initHOBA9WL(s[4127]);
initHOBA9WU(s[4128]);
initHOBA9WE(s[4129]);
initHOBA9WR(s[4130]);
initHOBA9FL(s[4131]);
initHOBA9FU(s[4132]);
initHOBA9FE(s[4133]);
initHOBA9FR(s[4134]);
initHOBA9ML(s[4135]);
initHOBA9MU(s[4136]);
initHOBA9ME(s[4137]);
initHOBA9MR(s[4138]);
initHOBA9YL(s[4139]);
initHOBA9YU(s[4140]);
initHOBA9YE(s[4141]);
initHOBA9YR(s[4142]);
initHOBA9OL(s[4143]);
initHOBA9OU(s[4144]);
initHOBA9OE(s[4145]);
initHOBA9OR(s[4146]);
initHOBAS10(s[4147]);
initHOBP10(s[4148]);
initHOBA10(s[4149]);
initHOB10WL(s[4150]);
initHOB10WU(s[4151]);
initHOB10WE(s[4152]);
initHOB10WR(s[4153]);
initHOB10FL(s[4154]);
initHOB10FU(s[4155]);
initHOB10FE(s[4156]);
initHOB10FR(s[4157]);
initHOB10ML(s[4158]);
initHOB10MU(s[4159]);
initHOB10ME(s[4160]);
initHOB10MR(s[4161]);
initHOB10YL(s[4162]);
initHOB10YU(s[4163]);
initHOB10YE(s[4164]);
initHOB10YR(s[4165]);
initHOB10OL(s[4166]);
initHOB10OU(s[4167]);
initHOB10OE(s[4168]);
initHOB10OR(s[4169]);
initHOBAS11(s[4170]);
initHOBP11(s[4171]);
initHOBA11(s[4172]);
initHOB11WL(s[4173]);
initHOB11WU(s[4174]);
initHOB11WE(s[4175]);
initHOB11WR(s[4176]);
initHOB11FL(s[4177]);
initHOB11FU(s[4178]);
initHOB11FE(s[4179]);
initHOB11FR(s[4180]);
initHOB11ML(s[4181]);
initHOB11MU(s[4182]);
initHOB11ME(s[4183]);
initHOB11MR(s[4184]);
initHOB11YL(s[4185]);
initHOB11YU(s[4186]);
initHOB11YE(s[4187]);
initHOB11YR(s[4188]);
initHOB11OL(s[4189]);
initHOB11OU(s[4190]);
initHOB11OE(s[4191]);
initHOB11OR(s[4192]);
initHOBAS12(s[4193]);
initHOBP12(s[4194]);
initHOBA12(s[4195]);
initHOB12WL(s[4196]);
initHOB12WU(s[4197]);
initHOB12WE(s[4198]);
initHOB12WR(s[4199]);
initHOB12FL(s[4200]);
initHOB12FU(s[4201]);
initHOB12FE(s[4202]);
initHOB12FR(s[4203]);
initHOB12ML(s[4204]);
initHOB12MU(s[4205]);
initHOB12ME(s[4206]);
initHOB12MR(s[4207]);
initHOB12YL(s[4208]);
initHOB12YU(s[4209]);
initHOB12YE(s[4210]);
initHOB12YR(s[4211]);
initHOB12OL(s[4212]);
initHOB12OU(s[4213]);
initHOB12OE(s[4214]);
initHOB12OR(s[4215]);
initHOBAS13(s[4216]);
initHOBP13(s[4217]);
initHOBA13(s[4218]);
initHOB13WL(s[4219]);
initHOB13WU(s[4220]);
initHOB13WE(s[4221]);
initHOB13WR(s[4222]);
initHOB13FL(s[4223]);
initHOB13FU(s[4224]);
initHOB13FE(s[4225]);
initHOB13FR(s[4226]);
initHOB13ML(s[4227]);
initHOB13MU(s[4228]);
initHOB13ME(s[4229]);
initHOB13MR(s[4230]);
initHOB13YL(s[4231]);
initHOB13YU(s[4232]);
initHOB13YE(s[4233]);
initHOB13YR(s[4234]);
initHOB13OL(s[4235]);
initHOB13OU(s[4236]);
initHOB13OE(s[4237]);
initHOB13OR(s[4238]);
initHOBAS14(s[4239]);
initHOBP14(s[4240]);
initHOBA14(s[4241]);
initHOB14WL(s[4242]);
initHOB14WU(s[4243]);
initHOB14WE(s[4244]);
initHOB14WR(s[4245]);
initHOB14FL(s[4246]);
initHOB14FU(s[4247]);
initHOB14FE(s[4248]);
initHOB14FR(s[4249]);
initHOB14ML(s[4250]);
initHOB14MU(s[4251]);
initHOB14ME(s[4252]);
initHOB14MR(s[4253]);
initHOB14YL(s[4254]);
initHOB14YU(s[4255]);
initHOB14YE(s[4256]);
initHOB14YR(s[4257]);
initHOB14OL(s[4258]);
initHOB14OU(s[4259]);
initHOB14OE(s[4260]);
initHOB14OR(s[4261]);
initHOBAS15(s[4262]);
initHOBP15(s[4263]);
initHOBA15(s[4264]);
initHOB15WL(s[4265]);
initHOB15WU(s[4266]);
initHOB15WE(s[4267]);
initHOB15WR(s[4268]);
initHOB15FL(s[4269]);
initHOB15FU(s[4270]);
initHOB15FE(s[4271]);
initHOB15FR(s[4272]);
initHOB15ML(s[4273]);
initHOB15MU(s[4274]);
initHOB15ME(s[4275]);
initHOB15MR(s[4276]);
initHOB15YL(s[4277]);
initHOB15YU(s[4278]);
initHOB15YE(s[4279]);
initHOB15YR(s[4280]);
initHOB15OL(s[4281]);
initHOB15OU(s[4282]);
initHOB15OE(s[4283]);
initHOB15OR(s[4284]);
initHOBAS16(s[4285]);
initHOBP16(s[4286]);
initHOBA16(s[4287]);
initHOB16WL(s[4288]);
initHOB16WU(s[4289]);
initHOB16WE(s[4290]);
initHOB16WR(s[4291]);
initHOB16FL(s[4292]);
initHOB16FU(s[4293]);
initHOB16FE(s[4294]);
initHOB16FR(s[4295]);
initHOB16ML(s[4296]);
initHOB16MU(s[4297]);
initHOB16ME(s[4298]);
initHOB16MR(s[4299]);
initHOB16YL(s[4300]);
initHOB16YU(s[4301]);
initHOB16YE(s[4302]);
initHOB16YR(s[4303]);
initHOB16OL(s[4304]);
initHOB16OU(s[4305]);
initHOB16OE(s[4306]);
initHOB16OR(s[4307]);
initHOTENUN(s[4308]);
initHOTENST(s[4309]);
initHOJOB(s[4310]);
initHOLAND(s[4311]);
initHOFURN(s[4312]);
initHOPART(s[4313]);
initHPOPR(s[4314]);
initHOPERI(s[4315]);
initHORENT(s[4316]);
initHORENWL(s[4317]);
initHORENWU(s[4318]);
initHORENWE(s[4319]);
initHORENWR(s[4320]);
initHORENFL(s[4321]);
initHORENFU(s[4322]);
initHORENFE(s[4323]);
initHORENFR(s[4324]);
initHORENML(s[4325]);
initHORENMU(s[4326]);
initHORENME(s[4327]);
initHORENMR(s[4328]);
initHORENYL(s[4329]);
initHORENYU(s[4330]);
initHORENYE(s[4331]);
initHORENYR(s[4332]);
initHORENOL(s[4333]);
initHORENOU(s[4334]);
initHORENOE(s[4335]);
initHORENOR(s[4336]);
initHOINCLWA(s[4337]);
initHOINCLSE(s[4338]);
initHOINCLLA(s[4339]);
initHOINCLGA(s[4340]);
initHOINCLHE(s[4341]);
initHOINCLCO(s[4342]);
initHOINCL96(s[4343]);
initHOINAME(s[4344]);
initHOINAGD(s[4345]);
initHOINACL(s[4346]);
initHOINAWP(s[4347]);
initHOINASG(s[4348]);
initHOINA95(s[4349]);
initHOINA96(s[4350]);
initHOINAMME(s[4351]);
initHOINAMGD(s[4352]);
initHOINAMCL(s[4353]);
initHOINAMWP(s[4354]);
initHOINAMSG(s[4355]);
initHOINAM85(s[4356]);
initHOINAM86(s[4357]);
initHOINAM96(s[4358]);
initHOHBEN(s[4359]);
initHORHB(s[4360]);
initHOHBCK(s[4361]);
initHOREBA(s[4362]);
initHOREBP(s[4363]);
initHOREBWL(s[4364]);
initHOREBWU(s[4365]);
initHOREBWE(s[4366]);
initHOREBWR(s[4367]);
initHOREBFL(s[4368]);
initHOREBFU(s[4369]);
initHOREBFE(s[4370]);
initHOREBFR(s[4371]);
initHOREBML(s[4372]);
initHOREBMU(s[4373]);
initHOREBME(s[4374]);
initHOREBMR(s[4375]);
initHOREBYL(s[4376]);
initHOREBYU(s[4377]);
initHOREBYE(s[4378]);
initHOREBYR(s[4379]);
initHOREBOL(s[4380]);
initHOREBOU(s[4381]);
initHOREBOE(s[4382]);
initHOREBOR(s[4383]);
initHOHBP(s[4384]);
initHOHBA(s[4385]);
initHOHBAWL(s[4386]);
initHOHBAWU(s[4387]);
initHOHBAWE(s[4388]);
initHOHBAWR(s[4389]);
initHOHBAFL(s[4390]);
initHOHBAFU(s[4391]);
initHOHBAFE(s[4392]);
initHOHBAFR(s[4393]);
initHOHBAML(s[4394]);
initHOHBAMU(s[4395]);
initHOHBAME(s[4396]);
initHOHBAMR(s[4397]);
initHOHBAYL(s[4398]);
initHOHBAYU(s[4399]);
initHOHBAYE(s[4400]);
initHOHBAYR(s[4401]);
initHOHBAOL(s[4402]);
initHOHBAOU(s[4403]);
initHOHBAOE(s[4404]);
initHOHBAOR(s[4405]);
initHOHBME(s[4406]);
initHOHBGA(s[4407]);
initHOHBCL(s[4408]);
initHOHBWP(s[4409]);
initHOHBSG(s[4410]);
initHOHB95(s[4411]);
initHOHB96(s[4412]);
initHOHBMME(s[4413]);
initHOHBMGA(s[4414]);
initHOHBMCL(s[4415]);
initHOHBMWP(s[4416]);
initHOHBMSG(s[4417]);
initHOHBM85(s[4418]);
initHOHBM86(s[4419]);
initHOHBM96(s[4420]);
initHOYEAR(s[4421]);
initHOPAY(s[4422]);
initHOPAYL(s[4423]);
initHOPAYU(s[4424]);
initHOPAYE(s[4425]);
initHOPAYR(s[4426]);
initHOSELL(s[4427]);
initHOSOLD(s[4428]);
initHOSOLDL(s[4429]);
initHOSOLDU(s[4430]);
initHOSOLDE(s[4431]);
initHOSOLDR(s[4432]);
initHOMOVE(s[4433]);
initHORTB(s[4434]);
initHORTBE(s[4435]);
initHOEVM(s[4436]);
initHOORM(s[4437]);
initHOSELLP(s[4438]);
initHOSELLL(s[4439]);
initHOSELLU(s[4440]);
initHOSELLE(s[4441]);
initHOSELLR(s[4442]);
initHOOUTMC(s[4443]);
initHOOUTM(s[4444]);
initHOMTY(s[4445]);
initHOMTYC(s[4446]);
initHORMO(s[4447]);
initHOMFV(s[4448]);
initHOVML(s[4449]);
initHOVMLL(s[4450]);
initHOVMLU(s[4451]);
initHOVMLE(s[4452]);
initHOVMLR(s[4453]);
initHOVE(s[4454]);
initHOVE1L(s[4455]);
initHOVE1U(s[4456]);
initHOVE1E(s[4457]);
initHOVE1R(s[4458]);
initHOYML(s[4459]);
initHOMTY2(s[4460]);
initHORMO2(s[4461]);
initHOMFV2(s[4462]);
initHOVML2(s[4463]);
initHOVML2L(s[4464]);
initHOVML2U(s[4465]);
initHOVML2E(s[4466]);
initHOVML2R(s[4467]);
initHOVE2(s[4468]);
initHOVE2L(s[4469]);
initHOVE2U(s[4470]);
initHOVE2E(s[4471]);
initHOVE2R(s[4472]);
initHOYML2(s[4473]);
initHOMTY3(s[4474]);
initHORMO3(s[4475]);
initHOMFV3(s[4476]);
initHOVML3(s[4477]);
initHOVML3L(s[4478]);
initHOVML3U(s[4479]);
initHOVML3E(s[4480]);
initHOVML3R(s[4481]);
initHOVE3(s[4482]);
initHOVE3L(s[4483]);
initHOVE3U(s[4484]);
initHOVE3E(s[4485]);
initHOVE3R(s[4486]);
initHOYML3(s[4487]);
initHOMTY4(s[4488]);
initHORMO4(s[4489]);
initHOMFV4(s[4490]);
initHOVML4(s[4491]);
initHOVML4L(s[4492]);
initHOVML4U(s[4493]);
initHOVML4E(s[4494]);
initHOVML4R(s[4495]);
initHOVE4(s[4496]);
initHOVE4L(s[4497]);
initHOVE4U(s[4498]);
initHOVE4E(s[4499]);
initHOVE4R(s[4500]);
initHOYML4(s[4501]);
initHOMTY5(s[4502]);
initHORMO5(s[4503]);
initHOMFV5(s[4504]);
initHOVML5(s[4505]);
initHOVML5L(s[4506]);
initHOVML5U(s[4507]);
initHOVML5E(s[4508]);
initHOVML5R(s[4509]);
initHOVE5(s[4510]);
initHOVE5L(s[4511]);
initHOVE5U(s[4512]);
initHOVE5E(s[4513]);
initHOVE5R(s[4514]);
initHOYML5(s[4515]);
initHOCHM(s[4516]);
initHOMADD(s[4517]);
initHOMA(s[4518]);
initHOMAL(s[4519]);
initHOMAU(s[4520]);
initHOMAE(s[4521]);
initHOMAR(s[4522]);
initHOMUHE(s[4523]);
initHOMUHI(s[4524]);
initHOMUCP(s[4525]);
initHOMUOC(s[4526]);
initHOMU95(s[4527]);
initHOMUMHE(s[4528]);
initHOMUMHI(s[4529]);
initHOMUMCP(s[4530]);
initHOMUMOC(s[4531]);
initHOMUM85(s[4532]);
initHOMUM86(s[4533]);
initHOMUM(s[4534]);
initHOMREP(s[4535]);
initHOMREPL(s[4536]);
initHOMREPU(s[4537]);
initHOMREPE(s[4538]);
initHOMREPR(s[4539]);
initHOINCPP(s[4540]);
initHOINCBI(s[4541]);
initHOINCPI(s[4542]);
initHOINC95(s[4543]);
initHOINC96(s[4544]);
initHOINCMPP(s[4545]);
initHOINCMBI(s[4546]);
initHOINCMPI(s[4547]);
initHOINCM85(s[4548]);
initHOINCM86(s[4549]);
initHOINCM96(s[4550]);
initHOINCC(s[4551]);
initANYENDOW(s[4552]);
initHOEVRE(s[4553]);
initHOCTA(s[4554]);
initHOCTN(s[4555]);
initHOCTB(s[4556]);
initHOCTBP(s[4557]);
initHODISC(s[4558]);
initHODIFF(s[4559]);
initHODIFFT(s[4560]);
initHODOC(s[4561]);
initHOINTA(s[4562]);
initHORET(s[4563]);
initHORMVJR(s[4564]);
initHORMVNJ(s[4565]);
initHORMVBA(s[4566]);
initHORMVMS(s[4567]);
initHORMVBO(s[4568]);
initHORMVER(s[4569]);
initHORMVHR(s[4570]);
initHORMVPN(s[4571]);
initHORMVSP(s[4572]);
initHORMVIF(s[4573]);
initHORMVNF(s[4574]);
initHORMVOF(s[4575]);
initHORMV95(s[4576]);
initHORMVMJR(s[4577]);
initHORMVMNJ(s[4578]);
initHORMVMBA(s[4579]);
initHORMVMMS(s[4580]);
initHORMVMBO(s[4581]);
initHORMVMER(s[4582]);
initHORMVMHR(s[4583]);
initHORMVMPN(s[4584]);
initHORMVMSP(s[4585]);
initHORMVMIF(s[4586]);
initHORMVMNF(s[4587]);
initHORMVMOF(s[4588]);
initHORMVMPC(s[4589]);
initHORMVMNH(s[4590]);
initHORMVMAB(s[4591]);
initHORMO85(s[4592]);
initHORMO86(s[4593]);
initHORMAIN(s[4594]);
initHORMOSM(s[4595]);
initHORMOLA(s[4596]);
initHORMOFP(s[4597]);
initHORMOSH(s[4598]);
initHORMO95(s[4599]);
initHORMOMSM(s[4600]);
initHORMOMLA(s[4601]);
initHORMOMFP(s[4602]);
initHORMOMSH(s[4603]);
initHORMOMNS(s[4604]);
initHORMOMBQ(s[4605]);
initHORMOMBA(s[4606]);
initHORMOM85(s[4607]);
initHORMOM86(s[4608]);
initHOROOM(s[4609]);
initHOOLD(s[4610]);
initHOADCWD(s[4611]);
initHOADCRS(s[4612]);
initHOADHR(s[4613]);
initHOADCAD(s[4614]);
initHOADCAP(s[4615]);
initHOADCLI(s[4616]);
initHOADCWS(s[4617]);
initHOADCSH(s[4618]);
initHOADC96(s[4619]);
initHOADS(s[4620]);
initHOADDCL(s[4621]);
initHOADDAD(s[4622]);
initHOADDBL(s[4623]);
initHOADDHO(s[4624]);
initHOADDCO(s[4625]);
initHOADDBS(s[4626]);
initHOADDKM(s[4627]);
initHOADD95(s[4628]);
initHOADD96(s[4629]);
initHOAIWDHS(s[4630]);
initHOAIWDSS(s[4631]);
initHOAIWDYS(s[4632]);
initHOAIWDAL(s[4633]);
initHOAIWDLL(s[4634]);
initHOAIWD95(s[4635]);
initHOAIMWDHS(s[4636]);
initHOAIMWDSS(s[4637]);
initHOAIMWDYS(s[4638]);
initHOAIMWDAL(s[4639]);
initHOAIMWDLL(s[4640]);
initHOAIMWD85(s[4641]);
initHOAIMWD86(s[4642]);
initHOAIRSHS(s[4643]);
initHOAIRSSS(s[4644]);
initHOAIRSYS(s[4645]);
initHOAIRSAL(s[4646]);
initHOAIRSLL(s[4647]);
initHOAIRS95(s[4648]);
initHOAIMRSHS(s[4649]);
initHOAIMRSSS(s[4650]);
initHOAIMRSYS(s[4651]);
initHOAIMRSAL(s[4652]);
initHOAIMRSLL(s[4653]);
initHOAIMRSFM(s[4654]);
initHOAIMRSFR(s[4655]);
initHOAIMRSCH(s[4656]);
initHOAIMRSFS(s[4657]);
initHOAIMRS85(s[4658]);
initHOAIMRS86(s[4659]);
initHOAIHRHS(s[4660]);
initHOAIHRSS(s[4661]);
initHOAIHRYS(s[4662]);
initHOAIHRAL(s[4663]);
initHOAIHRLL(s[4664]);
initHOAIHR95(s[4665]);
initHOAIMHRHS(s[4666]);
initHOAIMHRSS(s[4667]);
initHOAIMHRYS(s[4668]);
initHOAIMHRAL(s[4669]);
initHOAIMHRLL(s[4670]);
initHOAIMHRFM(s[4671]);
initHOAIMHRFR(s[4672]);
initHOAIMHRCH(s[4673]);
initHOAIMHRFS(s[4674]);
initHOAIMHR85(s[4675]);
initHOAIMHR86(s[4676]);
initHOAIADHS(s[4677]);
initHOAIADSS(s[4678]);
initHOAIADYS(s[4679]);
initHOAIADAL(s[4680]);
initHOAIADLL(s[4681]);
initHOAIAD95(s[4682]);
initHOAIMADHS(s[4683]);
initHOAIMADSS(s[4684]);
initHOAIMADYS(s[4685]);
initHOAIMADAL(s[4686]);
initHOAIMADLL(s[4687]);
initHOAIMADFM(s[4688]);
initHOAIMADFR(s[4689]);
initHOAIMADCH(s[4690]);
initHOAIMADFS(s[4691]);
initHOAIMAD85(s[4692]);
initHOAIMAD86(s[4693]);
initHOAIAPHS(s[4694]);
initHOAIAPSS(s[4695]);
initHOAIAPYS(s[4696]);
initHOAIAPAL(s[4697]);
initHOAIAPLL(s[4698]);
initHOAIAP95(s[4699]);
initHOAIMAPHS(s[4700]);
initHOAIMAPSS(s[4701]);
initHOAIMAPYS(s[4702]);
initHOAIMAPAL(s[4703]);
initHOAIMAPLL(s[4704]);
initHOAIMAPFM(s[4705]);
initHOAIMAPFR(s[4706]);
initHOAIMAPCH(s[4707]);
initHOAIMAPFS(s[4708]);
initHOAIAMAP85(s[4709]);
initHOAIAMAP86(s[4710]);
initHOAILIHS(s[4711]);
initHOAILISS(s[4712]);
initHOAILIYS(s[4713]);
initHOAILIAL(s[4714]);
initHOAILILL(s[4715]);
initHOAILI95(s[4716]);
initHOAIMLIHS(s[4717]);
initHOAIMLISS(s[4718]);
initHOAIMLIYS(s[4719]);
initHOAIMLIAL(s[4720]);
initHOAIMLILL(s[4721]);
initHOAIMLIFM(s[4722]);
initHOAIMLIFR(s[4723]);
initHOAIMLICH(s[4724]);
initHOAIMLIFS(s[4725]);
initHOAIMLI85(s[4726]);
initHOAIMLI86(s[4727]);
initHOAIWSHS(s[4728]);
initHOAIWSSS(s[4729]);
initHOAIWSYS(s[4730]);
initHOAIWSAL(s[4731]);
initHOAIWSLL(s[4732]);
initHOAIWS95(s[4733]);
initHOAIMWSHS(s[4734]);
initHOAIMWSSS(s[4735]);
initHOAIMWSYS(s[4736]);
initHOAIMWSAL(s[4737]);
initHOAIMWSLL(s[4738]);
initHOAIMWSFM(s[4739]);
initHOAIMWSFR(s[4740]);
initHOAIMWSCH(s[4741]);
initHOAIMWSFS(s[4742]);
initHOAIMWS85(s[4743]);
initHOAIMWS86(s[4744]);
initHOAISHHS(s[4745]);
initHOAISHSS(s[4746]);
initHOAISHYS(s[4747]);
initHOAISHAL(s[4748]);
initHOAISHLL(s[4749]);
initHOAISH95(s[4750]);
initHOAIMSHHS(s[4751]);
initHOAIMSHSS(s[4752]);
initHOAIMSHYS(s[4753]);
initHOAIMSHAL(s[4754]);
initHOAIMSHLL(s[4755]);
initHOAIMSHFM(s[4756]);
initHOAIMSHFR(s[4757]);
initHOAIMSHCH(s[4758]);
initHOAIMSHFS(s[4759]);
initHOAIMSH85(s[4760]);
initHOAIMSH86(s[4761]);
initHOAICLHS(s[4762]);
initHOAICLSS(s[4763]);
initHOAICLYS(s[4764]);
initHOAICLAL(s[4765]);
initHOAICLLL(s[4766]);
initHOAICL95(s[4767]);
initHOAIMCLHS(s[4768]);
initHOAIMCLSS(s[4769]);
initHOAIMCLYS(s[4770]);
initHOAIMCLAL(s[4771]);
initHOAIMCLLL(s[4772]);
initHOAIMCLFM(s[4773]);
initHOAIMCLFR(s[4774]);
initHOAIMCLCH(s[4775]);
initHOAIMCLFS(s[4776]);
initHOAIMCL85(s[4777]);
initHOAIMCL86(s[4778]);
initHOAIDVHS(s[4779]);
initHOAIDVSS(s[4780]);
initHOAIDVYS(s[4781]);
initHOAIDVAL(s[4782]);
initHOAIDVLL(s[4783]);
initHOAIDV95(s[4784]);
initHOAIMDVHS(s[4785]);
initHOAIMDVSS(s[4786]);
initHOAIMDVYS(s[4787]);
initHOAIMDVAL(s[4788]);
initHOAIMDVLL(s[4789]);
initHOAIMDVFM(s[4790]);
initHOAIMDVFR(s[4791]);
initHOAIMDVCH(s[4792]);
initHOAIMDVFS(s[4793]);
initHOAIMDV85(s[4794]);
initHOAIMDV86(s[4795]);
initHOAIBLHS(s[4796]);
initHOAIBLSS(s[4797]);
initHOAIBLYS(s[4798]);
initHOAIBLAL(s[4799]);
initHOAIBLLL(s[4800]);
initHOAIBL95(s[4801]);
initHOAIMBLHS(s[4802]);
initHOAIMBLSS(s[4803]);
initHOAIMBLYS(s[4804]);
initHOAIMBLAL(s[4805]);
initHOAIMBLLL(s[4806]);
initHOAIMBLFM(s[4807]);
initHOAIMBLFR(s[4808]);
initHOAIMBLCH(s[4809]);
initHOAIMBLFS(s[4810]);
initHOAIMBL85(s[4811]);
initHOAIMBL86(s[4812]);
initHOAIHOHS(s[4813]);
initHOAIHOSS(s[4814]);
initHOAIHOYS(s[4815]);
initHOAIHOAL(s[4816]);
initHOAIHOLL(s[4817]);
initHOAIHO95(s[4818]);
initHOAIMHOHS(s[4819]);
initHOAIMHOSS(s[4820]);
initHOAIMHOYS(s[4821]);
initHOAIMHOAL(s[4822]);
initHOAIMHOLL(s[4823]);
initHOAIMHOFM(s[4824]);
initHOAIMHOFR(s[4825]);
initHOAIMHOCH(s[4826]);
initHOAIMHOFS(s[4827]);
initHOAIMHO85(s[4828]);
initHOAIMHO86(s[4829]);
initHOAICOHS(s[4830]);
initHOAICOSS(s[4831]);
initHOAICOYS(s[4832]);
initHOAICOAL(s[4833]);
initHOAICOLL(s[4834]);
initHOAICO95(s[4835]);
initHOAIMCOHS(s[4836]);
initHOAIMCOSS(s[4837]);
initHOAIMCOYS(s[4838]);
initHOAIMCOAL(s[4839]);
initHOAIMCOLL(s[4840]);
initHOAIMCOFM(s[4841]);
initHOAIMCOFR(s[4842]);
initHOAIMCOCH(s[4843]);
initHOAIMCOFS(s[4844]);
initHOAIMCO85(s[4845]);
initHOAIMCO86(s[4846]);
initHOAIBSHS(s[4847]);
initHOAIBSSS(s[4848]);
initHOAIBSYS(s[4849]);
initHOAIBSAL(s[4850]);
initHOAIBSLL(s[4851]);
initHOAIBS95(s[4852]);
initHOAIMBSHS(s[4853]);
initHOAIMBSSS(s[4854]);
initHOAIMBSYS(s[4855]);
initHOAIMBSAL(s[4856]);
initHOAIMBSLL(s[4857]);
initHOAIMBSFM(s[4858]);
initHOAIMBSFR(s[4859]);
initHOAIMBSCH(s[4860]);
initHOAIMBSFS(s[4861]);
initHOAIMBS85(s[4862]);
initHOAIMBS86(s[4863]);
initHOAIKMHS(s[4864]);
initHOAIKMSS(s[4865]);
initHOAIKMYS(s[4866]);
initHOAIKMAL(s[4867]);
initHOAIKMLL(s[4868]);
initHOAIKM95(s[4869]);
initHOAIMKMHS(s[4870]);
initHOAIMKMSS(s[4871]);
initHOAIMKMYS(s[4872]);
initHOAIMKMAL(s[4873]);
initHOAIMKMLL(s[4874]);
initHOAIMKMFM(s[4875]);
initHOAIMKMFR(s[4876]);
initHOAIMKMCH(s[4877]);
initHOAIMKMFS(s[4878]);
initHOAIMKM85(s[4879]);
initHOAIMKM86(s[4880]);
initHOAIOTHS(s[4881]);
initHOAIOTSS(s[4882]);
initHOAIOTYS(s[4883]);
initHOAIOTAL(s[4884]);
initHOAIOTLL(s[4885]);
initHOAIOT95(s[4886]);
initHOAIMOTHS(s[4887]);
initHOAIMOTSS(s[4888]);
initHOAIMOTYS(s[4889]);
initHOAIMOTAL(s[4890]);
initHOAIMOTLL(s[4891]);
initHOAIMOTFM(s[4892]);
initHOAIMOTFR(s[4893]);
initHOAIMOTCH(s[4894]);
initHOAIMOTFS(s[4895]);
initHOAIMOT85(s[4896]);
initHOAIMOT86(s[4897]);
initHOPROSP(s[4898]);
initHOPRONZ(s[4899]);
initHOPROSN(s[4900]);
initHOPRODK(s[4901]);
initHOPROPO(s[4902]);
initHOPRORD(s[4903]);
initHOPROWA(s[4904]);
initHOPROCP(s[4905]);
initHOPROEP(s[4906]);
initHOPRORO(s[4907]);
initHOPROIN(s[4908]);
initHOPROCO(s[4909]);
initHOPRO95(s[4910]);
initHOPRO96(s[4911]);
initHOPROMSP(s[4912]);
initHOPROMNZ(s[4913]);
initHOPROMSN(s[4914]);
initHOPROMDK(s[4915]);
initHOPROMPO(s[4916]);
initHOPROMRD(s[4917]);
initHOPROMWA(s[4918]);
initHOPROMCP(s[4919]);
initHOPROMEP(s[4920]);
initHOPROMRO(s[4921]);
initHOPROMIN(s[4922]);
initHOPROMCO(s[4923]);
initHOPROMVA(s[4924]);
initHOPROMST(s[4925]);
initHOPROM85(s[4926]);
initHOPROM86(s[4927]);
initHOPROM96(s[4928]);
initHOHAVTV(s[4929]);
initHOHAVVR(s[4930]);
initHOHAVCD(s[4931]);
initHOHAVFF(s[4932]);
initHOHAVWM(s[4933]);
initHOHAVWD(s[4934]);
initHOHAVDW(s[4935]);
initHOHAVMO(s[4936]);
initHOHAVPC(s[4937]);
initHOHAVDT(s[4938]);
initHOHAVPH(s[4939]);
initHOHAVDV(s[4940]);
initHOHAVDR(s[4941]);
initHOHAV95(s[4942]);
initHOHAV96(s[4943]);
initHOHAVBTV(s[4944]);
initHOHAVBVR(s[4945]);
initHOHAVBCD(s[4946]);
initHOHAVBFF(s[4947]);
initHOHAVBWM(s[4948]);
initHOHAVBWD(s[4949]);
initHOHAVBDW(s[4950]);
initHOHAVBMO(s[4951]);
initHOHAVBPC(s[4952]);
initHOHAVBDT(s[4953]);
initHOHAVBPH(s[4954]);
initHOHAVBDV(s[4955]);
initHOHAVBDR(s[4956]);
initHOHAVB95(s[4957]);
initHOHAVB96(s[4958]);
initHOHV01(s[4959]);
initHOHV02(s[4960]);
initHOHV03(s[4961]);
initHOHV04(s[4962]);
initHOHV05(s[4963]);
initHOHV06(s[4964]);
initHOHV07(s[4965]);
initHOHV08(s[4966]);
initHOHV09(s[4967]);
initHOHV12(s[4968]);
initHOHV13(s[4969]);
initHOHV01L(s[4970]);
initHOHV01U(s[4971]);
initHOHV01E(s[4972]);
initHOHV01R(s[4973]);
initHOHV02L(s[4974]);
initHOHV02U(s[4975]);
initHOHV02E(s[4976]);
initHOHV02R(s[4977]);
initHOHV03L(s[4978]);
initHOHV03U(s[4979]);
initHOHV03E(s[4980]);
initHOHV03R(s[4981]);
initHOHV04L(s[4982]);
initHOHV04U(s[4983]);
initHOHV04E(s[4984]);
initHOHV04R(s[4985]);
initHOHV05L(s[4986]);
initHOHV05U(s[4987]);
initHOHV05E(s[4988]);
initHOHV05R(s[4989]);
initHOHV06L(s[4990]);
initHOHV06U(s[4991]);
initHOHV06E(s[4992]);
initHOHV06R(s[4993]);
initHOHV07L(s[4994]);
initHOHV07U(s[4995]);
initHOHV07E(s[4996]);
initHOHV07R(s[4997]);
initHOHV08L(s[4998]);
initHOHV08U(s[4999]);
}
public void init_5000_5999(String line) {
initHOHV08E(s[5000]);
initHOHV08R(s[5001]);
initHOHV09L(s[5002]);
initHOHV09U(s[5003]);
initHOHV09E(s[5004]);
initHOHV09R(s[5005]);
initHOHV12L(s[5006]);
initHOHV12U(s[5007]);
initHOHV12E(s[5008]);
initHOHV12R(s[5009]);
initHOHV13L(s[5010]);
initHOHV13U(s[5011]);
initHOHV13E(s[5012]);
initHOHV13R(s[5013]);
initHOBB(s[5014]);
initHOFOOD(s[5015]);
initHOFOODL(s[5016]);
initHOFOODU(s[5017]);
initHOFOODE(s[5018]);
initHOFOODR(s[5019]);
initHOOUTF(s[5020]);
initHOOUTFL(s[5021]);
initHOOUTFU(s[5022]);
initHOOUTFE(s[5023]);
initHOOUTFR(s[5024]);
initHOMEAL(s[5025]);
initHOMOFT(s[5026]);
initHOCL(s[5027]);
initHOCLL(s[5028]);
initHOCLU(s[5029]);
initHOCLE(s[5030]);
initHOCLR(s[5031]);
initHOLEIS(s[5032]);
initHOLEISL(s[5033]);
initHOLEISU(s[5034]);
initHOLEISE(s[5035]);
initHOLEISR(s[5036]);
initHOTRAN(s[5037]);
initHOTRANL(s[5038]);
initHOTRANU(s[5039]);
initHOTRANE(s[5040]);
initHOTRANR(s[5041]);
initHOTRANGC(s[5042]);
initHOTRANOC(s[5043]);
initHOTRANOR(s[5044]);
initHOTRANCH(s[5045]);
initHOTRANNR(s[5046]);
initHOTRPA(s[5047]);
initHOTRAPGC(s[5048]);
initHOTRAPOC(s[5049]);
initHOTRAPOR(s[5050]);
initHOTRAPCH(s[5051]);
initHOTRAPNR(s[5052]);
initHOTRABGC(s[5053]);
initHOTRABOC(s[5054]);
initHOTRABOR(s[5055]);
initHOTRABCH(s[5056]);
initHOTRABNR(s[5057]);
initHOCENH(s[5058]);
initHOCENP(s[5059]);
initHOHEAGF(s[5060]);
initHOHEAEF(s[5061]);
initHOHEAPH(s[5062]);
initHOHEAOF(s[5063]);
initHOHEA95(s[5064]);
initHOHEA96(s[5065]);
initHOHEAMGF(s[5066]);
initHOHEAMEF(s[5067]);
initHOHEAMPH(s[5068]);
initHOHEAMOF(s[5069]);
initHOHEAM85(s[5070]);
initHOHEAM86(s[5071]);
initHOHEAM96(s[5072]);
initHOFUELGA(s[5073]);
initHOFUELEL(s[5074]);
initHOFUELCO(s[5075]);
initHOFUELPA(s[5076]);
initHOFUELOI(s[5077]);
initHOFUELWO(s[5078]);
initHOFUEL95(s[5079]);
initHOFSUP(s[5080]);
initHOFTOG(s[5081]);
initHOFPAY(s[5082]);
initHOFD(s[5083]);
initHOFDM(s[5084]);
initHOFDML(s[5085]);
initHOFDMU(s[5086]);
initHOFDME(s[5087]);
initHOFDMR(s[5088]);
initHOFDQ(s[5089]);
initHOFDQL(s[5090]);
initHOFDQU(s[5091]);
initHOFDQE(s[5092]);
initHOFDQR(s[5093]);
initHOFB(s[5094]);
initHOFBMW(s[5095]);
initHOFBMWL(s[5096]);
initHOFBMWU(s[5097]);
initHOFBMWE(s[5098]);
initHOFBMWR(s[5099]);
initHOFBMS(s[5100]);
initHOFBMSL(s[5101]);
initHOFBMSU(s[5102]);
initHOFBMSE(s[5103]);
initHOFBMSR(s[5104]);
initHOFBQW(s[5105]);
initHOFBQWL(s[5106]);
initHOFBQWU(s[5107]);
initHOFBQWE(s[5108]);
initHOFBQWR(s[5109]);
initHOFBQS(s[5110]);
initHOFBQSL(s[5111]);
initHOFBQSU(s[5112]);
initHOFBQSE(s[5113]);
initHOFBQSR(s[5114]);
initHOFPW(s[5115]);
initHOFPWL(s[5116]);
initHOFPWU(s[5117]);
initHOFPWE(s[5118]);
initHOFPWR(s[5119]);
initHOFPS(s[5120]);
initHOFPSL(s[5121]);
initHOFPSU(s[5122]);
initHOFPSE(s[5123]);
initHOFPSR(s[5124]);
initHOFOW(s[5125]);
initHOFOWL(s[5126]);
initHOFOWU(s[5127]);
initHOFOWE(s[5128]);
initHOFOWR(s[5129]);
initHOFOS(s[5130]);
initHOFOSL(s[5131]);
initHOFOSU(s[5132]);
initHOFOSE(s[5133]);
initHOFOSR(s[5134]);
initHOFSP(s[5135]);
initHOFSW(s[5136]);
initHOFSWL(s[5137]);
initHOFSWU(s[5138]);
initHOFSWE(s[5139]);
initHOFSWR(s[5140]);
initHOFSM(s[5141]);
initHOFSML(s[5142]);
initHOFSMU(s[5143]);
initHOFSME(s[5144]);
initHOFSMR(s[5145]);
initHOFSQ(s[5146]);
initHOFSQL(s[5147]);
initHOFSQU(s[5148]);
initHOFSQE(s[5149]);
initHOFSQR(s[5150]);
initHOGPAY(s[5151]);
initHOGD(s[5152]);
initHOGDM(s[5153]);
initHOGDML(s[5154]);
initHOGDMU(s[5155]);
initHOGDME(s[5156]);
initHOGDMR(s[5157]);
initHOGDQ(s[5158]);
initHOGDQL(s[5159]);
initHOGDQU(s[5160]);
initHOGDQE(s[5161]);
initHOGDQR(s[5162]);
initHOGBP(s[5163]);
initHOGBMW(s[5164]);
initHOGBMWL(s[5165]);
initHOGBMWU(s[5166]);
initHOGBMWE(s[5167]);
initHOGBMWR(s[5168]);
initHOGBMS(s[5169]);
initHOGBMSL(s[5170]);
initHOGBMSU(s[5171]);
initHOGBMSE(s[5172]);
initHOGBMSR(s[5173]);
initHOGBQW(s[5174]);
initHOGBQWL(s[5175]);
initHOGBQWU(s[5176]);
initHOGBQWE(s[5177]);
initHOGBQWR(s[5178]);
initHOGBQS(s[5179]);
initHOGBQSL(s[5180]);
initHOGBQSU(s[5181]);
initHOGBQSE(s[5182]);
initHOGBQSR(s[5183]);
initHOGPW(s[5184]);
initHOGPWL(s[5185]);
initHOGPWU(s[5186]);
initHOGPWE(s[5187]);
initHOGPWR(s[5188]);
initHOGPS(s[5189]);
initHOGPSL(s[5190]);
initHOGPSU(s[5191]);
initHOGPSE(s[5192]);
initHOGPSR(s[5193]);
initHOGOW(s[5194]);
initHOGOWL(s[5195]);
initHOGOWU(s[5196]);
initHOGOWE(s[5197]);
initHOGOWR(s[5198]);
initHOGOS(s[5199]);
initHOGOSL(s[5200]);
initHOGOSU(s[5201]);
initHOGOSE(s[5202]);
initHOGOSR(s[5203]);
initHOEPAY(s[5204]);
initHOED(s[5205]);
initHOEDM(s[5206]);
initHOEDML(s[5207]);
initHOEDMU(s[5208]);
initHOEDME(s[5209]);
initHOEDMR(s[5210]);
initHOEDQ(s[5211]);
initHOEDQL(s[5212]);
initHOEDQU(s[5213]);
initHOEDQE(s[5214]);
initHOEDQR(s[5215]);
initHOEB(s[5216]);
initHOEBMW(s[5217]);
initHOEBMWL(s[5218]);
initHOEBMWU(s[5219]);
initHOEBMWE(s[5220]);
initHOEBMWR(s[5221]);
initHOEBMS(s[5222]);
initHOEBMSL(s[5223]);
initHOEBMSU(s[5224]);
initHOEBMSE(s[5225]);
initHOEBMSR(s[5226]);
initHOEBQW(s[5227]);
initHOEBQWL(s[5228]);
initHOEBQWU(s[5229]);
initHOEBQWE(s[5230]);
initHOEBQWR(s[5231]);
initHOEBQS(s[5232]);
initHOEBQSL(s[5233]);
initHOEBQSU(s[5234]);
initHOEBQSE(s[5235]);
initHOEBQSR(s[5236]);
initHOEPW(s[5237]);
initHOEPWL(s[5238]);
initHOEPWU(s[5239]);
initHOEPWE(s[5240]);
initHOEPWR(s[5241]);
initHOEPS(s[5242]);
initHOEPSL(s[5243]);
initHOEPSU(s[5244]);
initHOEPSE(s[5245]);
initHOEPSR(s[5246]);
initHOEOW(s[5247]);
initHOEOWL(s[5248]);
initHOEOWU(s[5249]);
initHOEOWE(s[5250]);
initHOEOWR(s[5251]);
initHOEOS(s[5252]);
initHOEOSL(s[5253]);
initHOEOSU(s[5254]);
initHOEOSE(s[5255]);
initHOEOSR(s[5256]);
initHOFCW(s[5257]);
initHOFCWL(s[5258]);
initHOFCWU(s[5259]);
initHOFCWE(s[5260]);
initHOFCWR(s[5261]);
initHOFCS(s[5262]);
initHOFCSL(s[5263]);
initHOFCSU(s[5264]);
initHOFCSE(s[5265]);
initHOFCSR(s[5266]);
initHOFPGW(s[5267]);
initHOFPGWL(s[5268]);
initHOFPGWU(s[5269]);
initHOFPGWE(s[5270]);
initHOFPGWR(s[5271]);
initHOFPGS(s[5272]);
initHOFPGSL(s[5273]);
initHOFPGSU(s[5274]);
initHOFPGSE(s[5275]);
initHOFPGSR(s[5276]);
initHOFOIW(s[5277]);
initHOFOIWL(s[5278]);
initHOFOIWU(s[5279]);
initHOFOIWE(s[5280]);
initHOFOIWR(s[5281]);
initHOFOIS(s[5282]);
initHOFOISL(s[5283]);
initHOFOISU(s[5284]);
initHOFOISE(s[5285]);
initHOFOISR(s[5286]);
initHOFWW(s[5287]);
initHOFWWL(s[5288]);
initHOFWWU(s[5289]);
initHOFWWE(s[5290]);
initHOFWWR(s[5291]);
initHOFWS(s[5292]);
initHOFWSL(s[5293]);
initHOFWSU(s[5294]);
initHOFWSE(s[5295]);
initHOFWSR(s[5296]);
initHOFUEMGA(s[5297]);
initHOFUEMEL(s[5298]);
initHOFUEMCO(s[5299]);
initHOFUEMPA(s[5300]);
initHOFUEMOI(s[5301]);
initHOFUEMWO(s[5302]);
initHOFUELM85(s[5303]);
initHOFUELM86(s[5304]);
initHOFXW(s[5305]);
initHOFXWL(s[5306]);
initHOFXWU(s[5307]);
initHOFXWE(s[5308]);
initHOFXWR(s[5309]);
initHOFXS(s[5310]);
initHOFXSL(s[5311]);
initHOFXSU(s[5312]);
initHOFXSE(s[5313]);
initHOFXSR(s[5314]);
initHOVEH(s[5315]);
initHOCC01(s[5316]);
initHOCC02(s[5317]);
initHOCC03(s[5318]);
initHOCC04(s[5319]);
initHOCC05(s[5320]);
initHOCC06(s[5321]);
initHOCC07(s[5322]);
initHOCC08(s[5323]);
initHOCC09(s[5324]);
initHOCC10(s[5325]);
initHOCC11(s[5326]);
initHOCC12(s[5327]);
initHOCC13(s[5328]);
initHOCC14(s[5329]);
initHOCC15(s[5330]);
initHOCC16(s[5331]);
initHOCC17(s[5332]);
initHOCC18(s[5333]);
initHOCC19(s[5334]);
initHOCC20(s[5335]);
initHOVST(s[5336]);
initHOVW(s[5337]);
initHOVAG(s[5338]);
initHOVW101(s[5339]);
initHOVW102(s[5340]);
initHOVW103(s[5341]);
initHOVW104(s[5342]);
initHOVW105(s[5343]);
initHOVW106(s[5344]);
initHOVW107(s[5345]);
initHOVW108(s[5346]);
initHOVW109(s[5347]);
initHOVW110(s[5348]);
initHOVW111(s[5349]);
initHOVW112(s[5350]);
initHOVW113(s[5351]);
initHOVW114(s[5352]);
initHOVW115(s[5353]);
initHOVW116(s[5354]);
initHOVW117(s[5355]);
initHOVW118(s[5356]);
initHOVW119(s[5357]);
initHOVNW(s[5358]);
initHOVST2(s[5359]);
initHOVW2(s[5360]);
initHOVAG2(s[5361]);
initHOVW201(s[5362]);
initHOVW202(s[5363]);
initHOVW203(s[5364]);
initHOVW204(s[5365]);
initHOVW205(s[5366]);
initHOVW206(s[5367]);
initHOVW207(s[5368]);
initHOVW208(s[5369]);
initHOVW209(s[5370]);
initHOVW210(s[5371]);
initHOVW211(s[5372]);
initHOVW212(s[5373]);
initHOVW213(s[5374]);
initHOVW214(s[5375]);
initHOVW215(s[5376]);
initHOVW216(s[5377]);
initHOVW217(s[5378]);
initHOVW218(s[5379]);
initHOVW219(s[5380]);
initHOVNW2(s[5381]);
initHOVST3(s[5382]);
initHOVW3(s[5383]);
initHOVAG3(s[5384]);
initHOVW301(s[5385]);
initHOVW302(s[5386]);
initHOVW303(s[5387]);
initHOVW304(s[5388]);
initHOVW305(s[5389]);
initHOVW306(s[5390]);
initHOVW307(s[5391]);
initHOVW308(s[5392]);
initHOVW309(s[5393]);
initHOVW310(s[5394]);
initHOVW311(s[5395]);
initHOVW312(s[5396]);
initHOVW313(s[5397]);
initHOVW314(s[5398]);
initHOVW315(s[5399]);
initHOVW316(s[5400]);
initHOVW317(s[5401]);
initHOVW318(s[5402]);
initHOVW319(s[5403]);
initHOVNW3(s[5404]);
initHOVST4(s[5405]);
initHOVW4(s[5406]);
initHOVAG4(s[5407]);
initHOVW401(s[5408]);
initHOVW402(s[5409]);
initHOVW403(s[5410]);
initHOVW404(s[5411]);
initHOVW405(s[5412]);
initHOVW406(s[5413]);
initHOVW407(s[5414]);
initHOVW408(s[5415]);
initHOVW409(s[5416]);
initHOVW410(s[5417]);
initHOVW411(s[5418]);
initHOVW412(s[5419]);
initHOVW413(s[5420]);
initHOVW414(s[5421]);
initHOVW415(s[5422]);
initHOVW416(s[5423]);
initHOVW417(s[5424]);
initHOVW418(s[5425]);
initHOVW419(s[5426]);
initHOVNW4(s[5427]);
initHOVST5(s[5428]);
initHOVW5(s[5429]);
initHOVAG5(s[5430]);
initHOVW501(s[5431]);
initHOVW502(s[5432]);
initHOVW503(s[5433]);
initHOVW504(s[5434]);
initHOVW505(s[5435]);
initHOVW506(s[5436]);
initHOVW507(s[5437]);
initHOVW508(s[5438]);
initHOVW509(s[5439]);
initHOVW510(s[5440]);
initHOVW511(s[5441]);
initHOVW512(s[5442]);
initHOVW513(s[5443]);
initHOVW514(s[5444]);
initHOVW515(s[5445]);
initHOVW516(s[5446]);
initHOVW517(s[5447]);
initHOVW518(s[5448]);
initHOVW519(s[5449]);
initHOVNW5(s[5450]);
initHOVST6(s[5451]);
initHOVW6(s[5452]);
initHOVAG6(s[5453]);
initHOVOW96(s[5454]);
initHOVW602(s[5455]);
initHOVW603(s[5456]);
initHOVW604(s[5457]);
initHOVW605(s[5458]);
initHOVW606(s[5459]);
initHOVW607(s[5460]);
initHOVW608(s[5461]);
initHOVW609(s[5462]);
initHOVW610(s[5463]);
initHOVW611(s[5464]);
initHOVW612(s[5465]);
initHOVW613(s[5466]);
initHOVW614(s[5467]);
initHOVW615(s[5468]);
initHOVW616(s[5469]);
initHOVW617(s[5470]);
initHOVW618(s[5471]);
initHOVW619(s[5472]);
initHOVNW6(s[5473]);
initHOVST7(s[5474]);
initHOVW7(s[5475]);
initHOVAG7(s[5476]);
initHOVW701(s[5477]);
initHOVW702(s[5478]);
initHOVW703(s[5479]);
initHOVW704(s[5480]);
initHOVW705(s[5481]);
initHOVW706(s[5482]);
initHOVW707(s[5483]);
initHOVW708(s[5484]);
initHOVW709(s[5485]);
initHOVW710(s[5486]);
initHOVW711(s[5487]);
initHOVW712(s[5488]);
initHOVW713(s[5489]);
initHOVW714(s[5490]);
initHOVW715(s[5491]);
initHOVW716(s[5492]);
initHOVW717(s[5493]);
initHOVW718(s[5494]);
initHOVW719(s[5495]);
initHOVNW7(s[5496]);
initHOVST8(s[5497]);
initHOV(s[5498]);
initHOVAG8(s[5499]);
initHOVW801(s[5500]);
initHOVW802(s[5501]);
initHOVW803(s[5502]);
initHOVW804(s[5503]);
initHOVW805(s[5504]);
initHOVW806(s[5505]);
initHOVW807(s[5506]);
initHOVW808(s[5507]);
initHOVW809(s[5508]);
initHOVW810(s[5509]);
initHOVW811(s[5510]);
initHOVW812(s[5511]);
initHOVW813(s[5512]);
initHOVW814(s[5513]);
initHOVW815(s[5514]);
initHOVW816(s[5515]);
initHOVW817(s[5516]);
initHOVW818(s[5517]);
initHOVW819(s[5518]);
initHOVN(s[5519]);
initHOVST9(s[5520]);
initHOVW9(s[5521]);
initHOVAG9(s[5522]);
initHOVW901(s[5523]);
initHOVW902(s[5524]);
initHOVW903(s[5525]);
initHOVW904(s[5526]);
initHOVW905(s[5527]);
initHOVW906(s[5528]);
initHOVW907(s[5529]);
initHOVW908(s[5530]);
initHOVW909(s[5531]);
initHOVW910(s[5532]);
initHOVW911(s[5533]);
initHOVW912(s[5534]);
initHOVW913(s[5535]);
initHOVW914(s[5536]);
initHOVW915(s[5537]);
initHOVW916(s[5538]);
initHOVW917(s[5539]);
initHOVW918(s[5540]);
initHOVW919(s[5541]);
initHOVNW9(s[5542]);
initHOVST10(s[5543]);
initHOVW10(s[5544]);
initHOVAG10(s[5545]);
initHOVW1001(s[5546]);
initHOVW1002(s[5547]);
initHOVW1003(s[5548]);
initHOVW1004(s[5549]);
initHOVW1005(s[5550]);
initHOVW1006(s[5551]);
initHOVW1007(s[5552]);
initHOVW1008(s[5553]);
initHOVW1009(s[5554]);
initHOVW1010(s[5555]);
initHOVW1011(s[5556]);
initHOVW1012(s[5557]);
initHOVW1013(s[5558]);
initHOVW1014(s[5559]);
initHOVW1015(s[5560]);
initHOVW1016(s[5561]);
initHOVW1017(s[5562]);
initHOVW1018(s[5563]);
initHOVW1019(s[5564]);
initHOVNW10(s[5565]);
initHOVST11(s[5566]);
initHOVW11(s[5567]);
initHOVAG11(s[5568]);
initHOVW1101(s[5569]);
initHOVW1102(s[5570]);
initHOVW1103(s[5571]);
initHOVW1104(s[5572]);
initHOVW1105(s[5573]);
initHOVW1106(s[5574]);
initHOVW1107(s[5575]);
initHOVW1108(s[5576]);
initHOVW1109(s[5577]);
initHOVW1110(s[5578]);
initHOVW1111(s[5579]);
initHOVW1112(s[5580]);
initHOVW1113(s[5581]);
initHOVW1114(s[5582]);
initHOVW1115(s[5583]);
initHOVW1116(s[5584]);
initHOVW1117(s[5585]);
initHOVW1118(s[5586]);
initHOVW1119(s[5587]);
initHOVNW11(s[5588]);
initHOVST12(s[5589]);
initHOVW12(s[5590]);
initHOVAG12(s[5591]);
initHOVW1201(s[5592]);
initHOVW1202(s[5593]);
initHOVW1203(s[5594]);
initHOVW1204(s[5595]);
initHOVW1205(s[5596]);
initHOVW1206(s[5597]);
initHOVW1207(s[5598]);
initHOVW1208(s[5599]);
initHOVW1209(s[5600]);
initHOVW1210(s[5601]);
initHOVW1211(s[5602]);
initHOVW1212(s[5603]);
initHOVW1213(s[5604]);
initHOVW1214(s[5605]);
initHOVW1215(s[5606]);
initHOVW1216(s[5607]);
initHOVW1217(s[5608]);
initHOVW1218(s[5609]);
initHOVW1219(s[5610]);
initHOVNW12(s[5611]);
initHOVST13(s[5612]);
initHOVW13(s[5613]);
initHOVAG13(s[5614]);
initHOVW1301(s[5615]);
initHOVW1302(s[5616]);
initHOVW1303(s[5617]);
initHOVW1304(s[5618]);
initHOVW1305(s[5619]);
initHOVW1306(s[5620]);
initHOVW1307(s[5621]);
initHOVW1308(s[5622]);
initHOVW1309(s[5623]);
initHOVW1310(s[5624]);
initHOVW1311(s[5625]);
initHOVW1312(s[5626]);
initHOVW1313(s[5627]);
initHOVW1314(s[5628]);
initHOVW1315(s[5629]);
initHOVW1316(s[5630]);
initHOVW1317(s[5631]);
initHOVW1318(s[5632]);
initHOVW1319(s[5633]);
initHOVNW13(s[5634]);
initHOVST14(s[5635]);
initHOVW14(s[5636]);
initHOVAG14(s[5637]);
initHOVW1401(s[5638]);
initHOVW1402(s[5639]);
initHOVW1403(s[5640]);
initHOVW1404(s[5641]);
initHOVW1405(s[5642]);
initHOVW1406(s[5643]);
initHOVW1407(s[5644]);
initHOVW1408(s[5645]);
initHOVW1409(s[5646]);
initHOVW1410(s[5647]);
initHOVW1411(s[5648]);
initHOVW1412(s[5649]);
initHOVW1413(s[5650]);
initHOVW1414(s[5651]);
initHOVW1415(s[5652]);
initHOVW1416(s[5653]);
initHOVW1417(s[5654]);
initHOVW1418(s[5655]);
initHOVW1419(s[5656]);
initHOVNW14(s[5657]);
initHOVST15(s[5658]);
initHOVW15(s[5659]);
initHOVAG15(s[5660]);
initHOVW1501(s[5661]);
initHOVW1502(s[5662]);
initHOVW1503(s[5663]);
initHOVW1504(s[5664]);
initHOVW1505(s[5665]);
initHOVW1506(s[5666]);
initHOVW1507(s[5667]);
initHOVW1508(s[5668]);
initHOVW1509(s[5669]);
initHOVW1510(s[5670]);
initHOVW1511(s[5671]);
initHOVW1512(s[5672]);
initHOVW1513(s[5673]);
initHOVW1514(s[5674]);
initHOVW1515(s[5675]);
initHOVW1516(s[5676]);
initHOVW1517(s[5677]);
initHOVW1518(s[5678]);
initHOVW1519(s[5679]);
initHOVNW15(s[5680]);
initHOVST16(s[5681]);
initHOVW16(s[5682]);
initHOVAG16(s[5683]);
initHOVW1601(s[5684]);
initHOVW1602(s[5685]);
initHOVW1603(s[5686]);
initHOVW1604(s[5687]);
initHOVW1605(s[5688]);
initHOVW1606(s[5689]);
initHOVW1607(s[5690]);
initHOVW1608(s[5691]);
initHOVW1609(s[5692]);
initHOVW1610(s[5693]);
initHOVW1611(s[5694]);
initHOVW1612(s[5695]);
initHOVW1613(s[5696]);
initHOVW1614(s[5697]);
initHOVW1615(s[5698]);
initHOVW1616(s[5699]);
initHOVW1617(s[5700]);
initHOVW1618(s[5701]);
initHOVW1619(s[5702]);
initHOVNW16(s[5703]);
initHOVEHX(s[5704]);
initCFMETM(s[5705]);
initCFMETMT(s[5706]);
initCFMAP(s[5707]);
initCFMATY(s[5708]);
initCFDATD(s[5709]);
initCFDATM(s[5710]);
initCFDATY(s[5711]);
initCFDAY(s[5712]);
initCFDSCR(s[5713]);
initCFTEST(s[5714]);
initCFWRDS(s[5715]);
initCFLISEN(s[5716]);
initCFLISP1(s[5717]);
initCFLISP2(s[5718]);
initCFLISP3(s[5719]);
initCFLISP4(s[5720]);
initCFLISP5(s[5721]);
initCFLISA(s[5722]);
initCFANI(s[5723]);
initCFC20FRST(s[5724]);
initCFC20FSCND(s[5725]);
initCFSVA(s[5726]);
initCFSVB(s[5727]);
initCFSVC(s[5728]);
initCFSVD(s[5729]);
initCFSVE(s[5730]);
initCFSVCH(s[5731]);
initCFNMSC(s[5732]);
initCFNMCA(s[5733]);
initCFNMQN(s[5734]);
initCFNMPM(s[5735]);
initCFNMUS(s[5736]);
initCFLISD(s[5737]);
initCFLITSK(s[5738]);
initCFLITB(s[5739]);
initCFLITC(s[5740]);
initCFLITD(s[5741]);
initCFLITE(s[5742]);
initCFLITF(s[5743]);
initCFSUMB(s[5744]);
initCFSUMC(s[5745]);
initCFSUMD(s[5746]);
initCFSUMA(s[5747]);
initCFSUME(s[5748]);
initCFSUMF(s[5749]);
initCFMSCR(s[5750]);
initCFWHONON(s[5751]);
initCFWHOPAR(s[5752]);
initCFWHOAD(s[5753]);
initCFWHOCHI(s[5754]);
initCFWHOOTH(s[5755]);
initCFIMP(s[5756]);
initCFWHTEYE(s[5757]);
initCFWHTHEA(s[5758]);
initCFWHTTIR(s[5759]);
initCFWHTILL(s[5760]);
initCFWHTCON(s[5761]);
initCFWHTNER(s[5762]);
initCFWHTMEN(s[5763]);
initCFWHTDIS(s[5764]);
initCFWHTNOI(s[5765]);
initCFWHTLAP(s[5766]);
initCFWHTENG(s[5767]);
initCFWHTREF(s[5768]);
initCFWHTUPS(s[5769]);
initCFWHTMEM(s[5770]);
initCFWHTALC(s[5771]);
initCFWHT95(s[5772]);
initCFWHTMEYE(s[5773]);
initCFWHTMHEA(s[5774]);
initCFWHTMTIR(s[5775]);
initCFWHTMILL(s[5776]);
initCFWHTMCON(s[5777]);
initCFWHTMNER(s[5778]);
initCFWHTMMEN(s[5779]);
initCFWHTMDIS(s[5780]);
initCFWHTMNOI(s[5781]);
initCFWHTMLAP(s[5782]);
initCFWHTMENG(s[5783]);
initCFWHTMREF(s[5784]);
initCFWHTMUPS(s[5785]);
initCFWHTMMEM(s[5786]);
initCFWHTMALC(s[5787]);
initCFWHTM85(s[5788]);
initCFWHTM86(s[5789]);
initEXRAIN(s[5790]);
initEXMOVHA(s[5791]);
initEXLO80(s[5792]);
initEXLO90(s[5793]);
initEXPW(s[5794]);
initEXPWF(s[5795]);
initEXHLIM(s[5796]);
initEXRSLF(s[5797]);
initEXAINH(s[5798]);
initEXCINH(s[5799]);
initEXINHE(s[5800]);
initEXCIN(s[5801]);
initEXCAIN(s[5802]);
initEXCPIN(s[5803]);
initEXHVR(s[5804]);
initEXHVA(s[5805]);
initEXNHEV(s[5806]);
initEXSCEV(s[5807]);
initEXLTCEV(s[5808]);
initEXMOVNB(s[5809]);
initEXCFV(s[5810]);
initEXLTC5(s[5811]);
initEXPFCLA(s[5812]);
initEXPFCHS(s[5813]);
initEXPFCCH(s[5814]);
initEXPFCIP(s[5815]);
initEXPFCHI(s[5816]);
initEXPFCSB(s[5817]);
initEXPFCOI(s[5818]);
initEXPFCOS(s[5819]);
initEXPFCSA(s[5820]);
initEXPFCRF(s[5821]);
initEXPFC95(s[5822]);
initEXPFC96(s[5823]);
initEXPCCLA(s[5824]);
initEXPCCHS(s[5825]);
initEXPCCCH(s[5826]);
initEXPCCIP(s[5827]);
initEXPCCHI(s[5828]);
initEXPCCSB(s[5829]);
initEXPCCOI(s[5830]);
initEXPCCOS(s[5831]);
initEXPCCSA(s[5832]);
initEXPCCRF(s[5833]);
initEXPCC95(s[5834]);
initEXPCC96(s[5835]);
initEXPCK(s[5836]);
initEXPCLM(s[5837]);
initEXPCHR(s[5838]);
initEXCND(s[5839]);
initEXCPLNIN(s[5840]);
initEXCPLNFA(s[5841]);
initEXCPLNSA(s[5842]);
initEXCPLNPR(s[5843]);
initEXCPLNTR(s[5844]);
initEXCPLNIV(s[5845]);
initEXCPLNOT(s[5846]);
initEXCPLN96(s[5847]);
initEXCPLN85(s[5848]);
initEXRELA(s[5849]);
initEXCPLN86(s[5850]);
initEXRELEFO(s[5851]);
initEXRELEME(s[5852]);
initEXRELEOU(s[5853]);
initEXRELEDE(s[5854]);
initEXRELEEL(s[5855]);
initEXRELEFA(s[5856]);
initEXRELEPR(s[5857]);
initEXRELEHO(s[5858]);
initEXRELETR(s[5859]);
initEXRELE96(s[5860]);
initERFVOLMO(s[5861]);
initERFVOLLE(s[5862]);
initERFVOLOR(s[5863]);
initERFVOLVI(s[5864]);
initERFVOLBE(s[5865]);
initERFVOLED(s[5866]);
initERFVOLIN(s[5867]);
initERFVOLSE(s[5868]);
initERFVOLTR(s[5869]);
initERFVOLRE(s[5870]);
initERFVOLCA(s[5871]);
initERFVOLPR(s[5872]);
initERFVOL(s[5873]);
initERFVOL96(s[5874]);
initERFVOFT(s[5875]);
initERLVOLKE(s[5876]);
initERLVOLSH(s[5877]);
initERLVOLCO(s[5878]);
initERLVOLDE(s[5879]);
initERLVOLBA(s[5880]);
initERLVOLPE(s[5881]);
initERLVOLPR(s[5882]);
initERLVOLWR(s[5883]);
initERLVOLRE(s[5884]);
initERLVOLTR(s[5885]);
initERIVOL96(s[5886]);
initERIVOFT(s[5887]);
initERVOLA(s[5888]);
initERVOLB(s[5889]);
initERCAA(s[5890]);
initERCABSP(s[5891]);
initERCABCH(s[5892]);
initERCABGC(s[5893]);
initERCABPA(s[5894]);
initERCABPL(s[5895]);
initERCABOR(s[5896]);
initERCABFR(s[5897]);
initERCABOT(s[5898]);
initERCAMSP(s[5899]);
initERCAMCH(s[5900]);
initERCAMGC(s[5901]);
initERCAMPA(s[5902]);
initERCAMPL(s[5903]);
initERCAMOR(s[5904]);
initERCAMFR(s[5905]);
initERCAM85(s[5906]);
initERCAM86(s[5907]);
initERCANSP(s[5908]);
initERCANCH(s[5909]);
initERCANGC(s[5910]);
initERCANPA(s[5911]);
initERCANPL(s[5912]);
initERCANOR(s[5913]);
initERCANFR(s[5914]);
initERCANOT(s[5915]);
initERCANTT(s[5916]);
initERCALIVE(s[5917]);
initERCADP1(s[5918]);
initERCADP2(s[5919]);
initERCADP3(s[5920]);
initERCADP4(s[5921]);
initERCADP5(s[5922]);
initERCADP6(s[5923]);
initERCADP7(s[5924]);
initERCADP8(s[5925]);
initERCADP9(s[5926]);
initERCADP10(s[5927]);
initERCADP11(s[5928]);
initERCADP12(s[5929]);
initERCADP13(s[5930]);
initERCADP14(s[5931]);
initERCADP15(s[5932]);
initERCADP16(s[5933]);
initERCAC(s[5934]);
initERRESCK(s[5935]);
initERRESNM(s[5936]);
initERAGEC1(s[5937]);
initERAGEC2(s[5938]);
initERAGEC3(s[5939]);
initERCHLD(s[5940]);
initERADLT(s[5941]);
initEROLDR(s[5942]);
initERRESBK(s[5943]);
initERRESRY(s[5944]);
initERRESERS1(s[5945]);
initERRESERB1(s[5946]);
initERRESERD1(s[5947]);
initERRESERI1(s[5948]);
initERRESERO1(s[5949]);
initERRESERH1(s[5950]);
initERRESBK2(s[5951]);
initERRESRY2(s[5952]);
initERRESERS2(s[5953]);
initERRESERB2(s[5954]);
initERRESERD2(s[5955]);
initERRESERI2(s[5956]);
initERRESERO2(s[5957]);
initERRESERH2(s[5958]);
initERRESERN2(s[5959]);
initERRESERN1(s[5960]);
initERRESBK3(s[5961]);
initERRESRY3(s[5962]);
initERRESERS3(s[5963]);
initERRESERB3(s[5964]);
initERRESERD3(s[5965]);
initERRESERI3(s[5966]);
initERRESERO3(s[5967]);
initERRESERH3(s[5968]);
initERRESERN3(s[5969]);
initERRESOF(s[5970]);
initERRESON(s[5971]);
initERCARA(s[5972]);
initERCARB(s[5973]);
initCAHGOA(s[5974]);
initCAGYA(s[5975]);
initCAGLA(s[5976]);
initCAGLK(s[5977]);
initCAGLKTWK(s[5978]);
initCAGLKTWE(s[5979]);
initCAGLKTHO(s[5980]);
initCAGLKTYR(s[5981]);
initCAGLKTDS(s[5982]);
initCAGTWD(s[5983]);
initCAGTWDA(s[5984]);
initCAGTWE(s[5985]);
initCAGTWEA(s[5986]);
initCAGHOL(s[5987]);
initCAGHOA(s[5988]);
initCAGTY(s[5989]);
initCAGTYA(s[5990]);
initCAGDIF(s[5991]);
initCAGDIFA(s[5992]);
initCAGACTSO(s[5993]);
initCAGACTIL(s[5994]);
initCAGACTLE(s[5995]);
initCAGACTME(s[5996]);
initCAGACTHW(s[5997]);
initCAGACTPU(s[5998]);
initCAGACTAR(s[5999]);
}
public void init_6000_6999(String line) {
initCAGACT96(s[6000]);
initCAGACTA(s[6001]);
initCAGACTB(s[6002]);
initCAGACTC(s[6003]);
initCAGACTD(s[6004]);
initCAGACTE(s[6005]);
initCAGACTF(s[6006]);
initCAGACTG(s[6007]);
initCAGWHYDV(s[6008]);
initCAGWHYAC(s[6009]);
initCAGWHYEN(s[6010]);
initCAGWHYWK(s[6011]);
initCAGWHYPB(s[6012]);
initCAGWHYGB(s[6013]);
initCAGWHYPO(s[6014]);
initCAGWHYFI(s[6015]);
initCAGWHYFA(s[6016]);
initCAGWHYDF(s[6017]);
initCAGWHY95(s[6018]);
initCAGWHY96(s[6019]);
initCAGWHYMDV(s[6020]);
initCAGWHYMAC(s[6021]);
initCAGWHYMEN(s[6022]);
initCAGWHYMWK(s[6023]);
initCAGWHYMPB(s[6024]);
initCAGWHYMGB(s[6025]);
initCAGWHYMPO(s[6026]);
initCAGWHYMFI(s[6027]);
initCAGWHYMFA(s[6028]);
initCAGWHYMDF(s[6029]);
initCAGWHMLV(s[6030]);
initCAGWHMEJ(s[6031]);
initCAGWHMOC(s[6032]);
initCAGWHM85(s[6033]);
initCAGWHM86(s[6034]);
initCAGWHM96(s[6035]);
initPSCEDA(s[6036]);
initPSCEDB(s[6037]);
initPSCEDC(s[6038]);
initPSCEDD(s[6039]);
initPSCEDE(s[6040]);
initPSCEDF(s[6041]);
initPSCEDG(s[6042]);
initPSCEDH(s[6043]);
initPSMNTA(s[6044]);
initPSMNTB(s[6045]);
initFQMQUA(s[6046]);
initFQAQUA(s[6047]);
initFQQUADEG(s[6048]);
initFQQUATEA(s[6049]);
initFQQUANUR(s[6050]);
initFQQUAHNC(s[6051]);
initFQQUAONC(s[6052]);
initFQQUACGF(s[6053]);
initFQQUACGA(s[6054]);
initFQQUACGO(s[6055]);
initFQQUAALE(s[6056]);
initFQQUAASL(s[6057]);
initFQQUASLC(s[6058]);
initFQQUAOLP(s[6059]);
initFQQUAOLA(s[6060]);
initFQQUAOLD(s[6061]);
initFQQUAGCA(s[6062]);
initFQQUAGCD(s[6063]);
initFQQUACS1(s[6064]);
initFQQUACS2(s[6065]);
initFQQUACSU(s[6066]);
initFQQUASLL(s[6067]);
initFQQUASUP(s[6068]);
initFQQUAMAT(s[6069]);
initFQQUANV5(s[6070]);
initFQQUANV4(s[6071]);
initFQQUANV3(s[6072]);
initFQQUANV2(s[6073]);
initFQQUANV1(s[6074]);
initFQQUATRA(s[6075]);
initFQQUACLE(s[6076]);
initFQQUA95(s[6077]);
initFQQUMDEG(s[6078]);
initFQQUMTEA(s[6079]);
initFQQUMNUR(s[6080]);
initFQQUMHNC(s[6081]);
initFQQUMONC(s[6082]);
initFQQUMCGF(s[6083]);
initFQQUMCGA(s[6084]);
initFQQUMCGO(s[6085]);
initFQQUMALE(s[6086]);
initFQQUMASL(s[6087]);
initFQQUMSLC(s[6088]);
initFQQUMOLP(s[6089]);
initFQQUMOLA(s[6090]);
initFQQUMOLD(s[6091]);
initFQQUMGCA(s[6092]);
initFQQUMGCD(s[6093]);
initFQQUMCS1(s[6094]);
initFQQUMCS2(s[6095]);
initFQQUMCSU(s[6096]);
initFQQUMSLL(s[6097]);
initFQQUMSUP(s[6098]);
initFQQUMMAT(s[6099]);
initFQQUMNV5(s[6100]);
initFQQUMNV4(s[6101]);
initFQQUMNV3(s[6102]);
initFQQUMNV2(s[6103]);
initFQQUMNV1(s[6104]);
initFQQUMTRA(s[6105]);
initFQQUMCLE(s[6106]);
initFQQUMFOR(s[6107]);
initFQQUMOVO(s[6108]);
initFQQUMNVZ(s[6109]);
initFQQUMNNE(s[6110]);
initFQQUMMIL(s[6111]);
initFQQUMDIP(s[6112]);
initFQQUMOAC(s[6113]);
initFQQUMOPR(s[6114]);
initFQQUM85(s[6115]);
initFQQUM86(s[6116]);
initFQQUM96(s[6117]);
initNURELIG(s[6118]);
initFQNURSE(s[6119]);
initFQNURRFOD(s[6120]);
initFQNURRFEX(s[6121]);
initFQNURRFBU(s[6122]);
initFQNURRFEN(s[6123]);
initFQNURRFWO(s[6124]);
initFQNURRFSC(s[6125]);
initFQNURRFNO(s[6126]);
initFQNURRF85(s[6127]);
initFQNURRF86(s[6128]);
initFQHELP(s[6129]);
initMMSCHS(s[6130]);
initMMALONE(s[6131]);
initMMHSS(s[6132]);
initMMWILL(s[6133]);
initMMSAF(s[6134]);
initMMAVSP(s[6135]);
initMMWALA(s[6136]);
initMMTRYA(s[6137]);
initMMWLKA(s[6138]);
initMMTRYB(s[6139]);
initMMWLKB(s[6140]);
initMMPAIN(s[6141]);
initMMRECR(s[6142]);
initMMAID(s[6143]);
initMMCOMUN(s[6144]);
initMMCOMSP(s[6145]);
initMMCOMRF(s[6146]);
initMMCOMNI(s[6147]);
initMMCOMPA(s[6148]);
initMMCOMTM(s[6149]);
initMMCOMSW(s[6150]);
initMMCOM85(s[6151]);
initMMCOM86(s[6152]);
initRESPWTS(s[6153]);
initWEIGHT(s[6154]);
initRESNWT(s[6155]);
initNOWTBCUN(s[6156]);
initNOWTBCST(s[6157]);
initNOWTBCCH(s[6158]);
initNOWTBCBE(s[6159]);
initNOWTBCSH(s[6160]);
initNOWTBCHE(s[6161]);
initNOWTBCPA(s[6162]);
initNOWTBCSC(s[6163]);
initNOWTBC95(s[6164]);
initEWTCH(s[6165]);
initEWTKG(s[6166]);
initEWTST(s[6167]);
initEWTL(s[6168]);
initFLOORC(s[6169]);
initRELWAIT(s[6170]);
initSCPTRNP(s[6171]);
initSCPTRHB(s[6172]);
initSCPTRUK(s[6173]);
initSCPTRAB(s[6174]);
initSCPTRTR(s[6175]);
initSCPTRMP(s[6176]);
initSCPTRVT(s[6177]);
initSCPTR96(s[6178]);
initSCORGPO(s[6179]);
initSCORGNW(s[6180]);
initSCORGRL(s[6181]);
initSCORGCH(s[6182]);
initSCORGED(s[6183]);
initSCORGSC(s[6184]);
initSCORGSP(s[6185]);
initSCORG95(s[6186]);
initSCORG96(s[6187]);
initSCORGN(s[6188]);
initSCACTA(s[6189]);
initSCACTB(s[6190]);
initSCACTC(s[6191]);
initSCACTD(s[6192]);
initSCMOREA(s[6193]);
initSCMOREB(s[6194]);
initSCMOREC(s[6195]);
initSCMORED(s[6196]);
initSCINT(s[6197]);
initSCINDDT(s[6198]);
initSCINDLT(s[6199]);
initSCINDTB(s[6200]);
initSCINDPH(s[6201]);
initSCIND95(s[6202]);
initSCIND96(s[6203]);
initSCINAEM(s[6204]);
initSCINACL(s[6205]);
initSCINAED(s[6206]);
initSCINABK(s[6207]);
initSCINASH(s[6208]);
initSCINASL(s[6209]);
initSCINASN(s[6210]);
initSCINACT(s[6211]);
initSCINANW(s[6212]);
initSCINAST(s[6213]);
initSCINAGM(s[6214]);
initSCINAJB(s[6215]);
initSCINAPS(s[6216]);
initSCINA95(s[6217]);
initSCINA96(s[6218]);
initSCLIFEA(s[6219]);
initSCLIFEB(s[6220]);
initSCLIFEC(s[6221]);
initSCLIFED(s[6222]);
initSCLIFEE(s[6223]);
initSCFEELA(s[6224]);
initSCFEELB(s[6225]);
initSCFEELC(s[6226]);
initSCFEELD(s[6227]);
initSCFEELE(s[6228]);
initSCQOLA(s[6229]);
initSCQOLB(s[6230]);
initSCQOLC(s[6231]);
initSCQOLD(s[6232]);
initSCQOLE(s[6233]);
initSCQOLF(s[6234]);
initSCQOLG(s[6235]);
initSCQOLH(s[6236]);
initSCQOLI(s[6237]);
initSCQOLJ(s[6238]);
initSCQOLK(s[6239]);
initSCQOLL(s[6240]);
initSCQOLM(s[6241]);
initSCQOLN(s[6242]);
initSCQOLO(s[6243]);
initSCQOLP(s[6244]);
initSCQOLQ(s[6245]);
initSCQOLR(s[6246]);
initSCQOLS(s[6247]);
initSCPRT(s[6248]);
initSCPRTA(s[6249]);
initSCPRTB(s[6250]);
initSCPRTC(s[6251]);
initSCPRTD(s[6252]);
initSCPRTE(s[6253]);
initSCPRTF(s[6254]);
initSCPRTG(s[6255]);
initSCPRTM(s[6256]);
initSCCHD(s[6257]);
initSCCHDA(s[6258]);
initSCCHDB(s[6259]);
initSCCHDC(s[6260]);
initSCCHDD(s[6261]);
initSCCHDE(s[6262]);
initSCCHDF(s[6263]);
initSCCHDG(s[6264]);
initSCCHDH(s[6265]);
initSCCHDI(s[6266]);
initSCCHDJ(s[6267]);
initSCCHDK(s[6268]);
initSCCHDM(s[6269]);
initSCFAM(s[6270]);
initSCFAMA(s[6271]);
initSCFAMB(s[6272]);
initSCFAMC(s[6273]);
initSCFAMD(s[6274]);
initSCFAME(s[6275]);
initSCFAMF(s[6276]);
initSCFAMG(s[6277]);
initSCFAMH(s[6278]);
initSCFAMI(s[6279]);
initSCFAMJ(s[6280]);
initSCFAMK(s[6281]);
initSCFAMM(s[6282]);
initSCFRD(s[6283]);
initSCFRDA(s[6284]);
initSCFRDB(s[6285]);
initSCFRDC(s[6286]);
initSCFRDD(s[6287]);
initSCFRDE(s[6288]);
initSCFRDF(s[6289]);
initSCFRDG(s[6290]);
initSCFRDH(s[6291]);
initSCFRDI(s[6292]);
initSCFRDJ(s[6293]);
initSCFRDK(s[6294]);
initSCFRDM(s[6295]);
initSCCNTA(s[6296]);
initSCCNTB(s[6297]);
initSCCNTC(s[6298]);
initSCCNTD(s[6299]);
initSCCNTE(s[6300]);
initSCCNTF(s[6301]);
initSCMENA(s[6302]);
initSCMENB(s[6303]);
initSCMENC(s[6304]);
initSCMEND(s[6305]);
initSCEMPL(s[6306]);
initSCWORKA(s[6307]);
initSCWORKB(s[6308]);
initSCWORKC(s[6309]);
initSCWORKD(s[6310]);
initSCWORKE(s[6311]);
initSCWORKF(s[6312]);
initSCWORKG(s[6313]);
initSCWORKH(s[6314]);
initSCWORKI(s[6315]);
initSCWORKJ(s[6316]);
initSCWORKK(s[6317]);
initSCWORKL(s[6318]);
initSCRTAGE(s[6319]);
initSCRTAGB(s[6320]);
initSCLDDR(s[6321]);
initSCOFEEL(s[6322]);
initSCAGLIK(s[6323]);
initSCOLDPOS(s[6324]);
initSCOAOP(s[6325]);
initSCOALON(s[6326]);
initSCOAILL(s[6327]);
initSCOATOL(s[6328]);
initSCOATLON(s[6329]);
initSCOADO(s[6330]);
initSCOAGRAM(s[6331]);
initSCOAHLTH(s[6332]);
initSCOAOLD(s[6333]);
initSCOARESP(s[6334]);
initSCOALEIS(s[6335]);
initSCOABOTH(s[6336]);
initSCOVHA(s[6337]);
initSCOVAN(s[6338]);
initSCOVSA(s[6339]);
initSCOVWO(s[6340]);
initSCVEG(s[6341]);
initSCFRU(s[6342]);
initSCAKO(s[6343]);
initSCAL7A(s[6344]);
initSCAL7B(s[6345]);
initSCDRSPI(s[6346]);
initSCDRWIN(s[6347]);
initSCDRPIN(s[6348]);
initSCHELNCT(s[6349]);
initSCHELNCTA(s[6350]);
initSCHEBOW(s[6351]);
initSCHEBOWA(s[6352]);
initSCGPATI(s[6353]);
initSCGRISK(s[6354]);
initSCFPATI(s[6355]);
initSCFRISK(s[6356]);
initSCHRISK(s[6357]);
initSCHPATI(s[6358]);
initSCHQUAL(s[6359]);
initSCHBODY(s[6360]);
initSCHEXPT(s[6361]);
initSCHDECI(s[6362]);
initSCEND(s[6363]);
initINDAGER(s[6364]);
initINDSEX(s[6365]);
initINDOBYR(s[6366]);
initESTWT(s[6367]);
initFQETHNMR(s[6368]);
initFQCBTHMR(s[6369]);
initFQCENGM(s[6370]);
initFQENDM(s[6371]);
initDIMARR(s[6372]);
initHECANAAR(s[6373]);
initHEAGGS(s[6374]);
initHEAGHS(s[6375]);
initSPADYR(s[6376]);
initSPAAGEYR(s[6377]);
initW8SEC(s[6378]);
initW8SIC(s[6379]);
initW8SOC(s[6380]);
initW8NSSEC8(s[6381]);
initW8NSSEC5(s[6382]);
initW8NSSEC3(s[6383]);
initW8SOC2000R(s[6384]);
initW8SIC2003R(s[6385]);
initGOR(s[6386]);
initW8W1LWGT(s[6387]);
initW8W4LWGT(s[6388]);
initW8XWGT(s[6389]);
initW8SCWT(s[6390]);
initW8SSCWT(s[6391]);
initIDAUNIQ(s[6392]);
initIDAHH(s[6393]);
initPERID(s[6394]);
initCOUPID(s[6395]);
initFUTYPE(s[6396]);
initFUID(s[6397]);
initBUEQ(s[6398]);
initSINC_BU_I(s[6399]);
initSINC_BU_F(s[6400]);
initSINC_BU_T(s[6401]);
initSINC_BU_O(s[6402]);
initPPEN_BU_I(s[6403]);
initPPEN_BU_F(s[6404]);
initPPEN_BU_T(s[6405]);
initPPEN_BU_O(s[6406]);
initSPEN_R_I(s[6407]);
initSPEN_R_F(s[6408]);
initSPEN_R_T(s[6409]);
initSPEN_R_O(s[6410]);
initSPEN_P_I(s[6411]);
initSPEN_P_F(s[6412]);
initSPEN_P_T(s[6413]);
initSPEN_P_O(s[6414]);
initANIN_R_I(s[6415]);
initANIN_R_F(s[6416]);
initANIN_R_T(s[6417]);
initANIN_R_O(s[6418]);
initANIN_P_I(s[6419]);
initANIN_P_F(s[6420]);
initANIN_P_T(s[6421]);
initANIN_P_O(s[6422]);
initICB_R_I(s[6423]);
initICB_R_F(s[6424]);
initICB_R_T(s[6425]);
initICB_R_O(s[6426]);
initICB_P_I(s[6427]);
initICB_P_F(s[6428]);
initICB_P_T(s[6429]);
initICB_P_O(s[6430]);
initESA_R_I(s[6431]);
initESA_R_F(s[6432]);
initESA_R_T(s[6433]);
initESA_R_O(s[6434]);
initESA_P_I(s[6435]);
initESA_P_F(s[6436]);
initESA_P_T(s[6437]);
initESA_P_O(s[6438]);
initSDA_R_I(s[6439]);
initSDA_R_F(s[6440]);
initSDA_R_T(s[6441]);
initSDA_R_O(s[6442]);
initSDA_P_I(s[6443]);
initSDA_P_F(s[6444]);
initSDA_P_T(s[6445]);
initSDA_P_O(s[6446]);
initSSP_R_I(s[6447]);
initSSP_R_F(s[6448]);
initSSP_R_T(s[6449]);
initSSP_R_O(s[6450]);
initSSP_P_I(s[6451]);
initSSP_P_F(s[6452]);
initSSP_P_T(s[6453]);
initSSP_P_O(s[6454]);
initATTALL_R_I(s[6455]);
initATTALL_R_F(s[6456]);
initATTALL_R_T(s[6457]);
initATTALL_R_O(s[6458]);
initATTALL_P_I(s[6459]);
initATTALL_P_F(s[6460]);
initATTALL_P_T(s[6461]);
initATTALL_P_O(s[6462]);
initPIP_R_I(s[6463]);
initPIP_R_F(s[6464]);
initPIP_R_T(s[6465]);
initPIP_R_O(s[6466]);
initPIP_P_I(s[6467]);
initPIP_P_F(s[6468]);
initPIP_P_T(s[6469]);
initPIP_P_O(s[6470]);
initDLA_R_I(s[6471]);
initDLA_R_F(s[6472]);
initDLA_R_T(s[6473]);
initDLA_R_O(s[6474]);
initDLA_P_I(s[6475]);
initDLA_P_F(s[6476]);
initDLA_P_T(s[6477]);
initDLA_P_O(s[6478]);
initINDINJ_R_I(s[6479]);
initINDINJ_R_F(s[6480]);
initINDINJ_R_T(s[6481]);
initINDINJ_R_O(s[6482]);
initINDINJ_P_I(s[6483]);
initINDINJ_P_F(s[6484]);
initINDINJ_P_T(s[6485]);
initINDINJ_P_O(s[6486]);
initWAR_R_I(s[6487]);
initWAR_R_F(s[6488]);
initWAR_R_T(s[6489]);
initWAR_R_O(s[6490]);
initWAR_P_I(s[6491]);
initWAR_P_F(s[6492]);
initWAR_P_T(s[6493]);
initWAR_P_O(s[6494]);
initCARERS_R_I(s[6495]);
initCARERS_R_F(s[6496]);
initCARERS_R_T(s[6497]);
initCARERS_R_O(s[6498]);
initCARERS_P_I(s[6499]);
initCARERS_P_F(s[6500]);
initCARERS_P_T(s[6501]);
initCARERS_P_O(s[6502]);
initOTH1_R_I(s[6503]);
initOTH1_R_F(s[6504]);
initOTH1_R_T(s[6505]);
initOTH1_R_O(s[6506]);
initOTH1_P_I(s[6507]);
initOTH1_P_F(s[6508]);
initOTH1_P_T(s[6509]);
initOTH1_P_O(s[6510]);
initUC_R_I(s[6511]);
initUC_R_F(s[6512]);
initUC_R_T(s[6513]);
initUC_R_O(s[6514]);
initUC_P_I(s[6515]);
initUC_P_F(s[6516]);
initUC_P_T(s[6517]);
initUC_P_O(s[6518]);
initIS_R_I(s[6519]);
initIS_R_F(s[6520]);
initIS_R_T(s[6521]);
initIS_R_O(s[6522]);
initIS_P_I(s[6523]);
initIS_P_F(s[6524]);
initIS_P_T(s[6525]);
initIS_P_O(s[6526]);
initPC_R_I(s[6527]);
initPC_R_F(s[6528]);
initPC_R_T(s[6529]);
initPC_R_O(s[6530]);
initPC_P_I(s[6531]);
initPC_P_F(s[6532]);
initPC_P_T(s[6533]);
initPC_P_O(s[6534]);
initWTC_R_I(s[6535]);
initWTC_R_F(s[6536]);
initWTC_R_T(s[6537]);
initWTC_R_O(s[6538]);
initWTC_P_I(s[6539]);
initWTC_P_F(s[6540]);
initWTC_P_T(s[6541]);
initWTC_P_O(s[6542]);
initJSA_R_I(s[6543]);
initJSA_R_F(s[6544]);
initJSA_R_T(s[6545]);
initJSA_R_O(s[6546]);
initJSA_P_I(s[6547]);
initJSA_P_F(s[6548]);
initJSA_P_T(s[6549]);
initJSA_P_O(s[6550]);
initGALL_R_I(s[6551]);
initGALL_R_F(s[6552]);
initGALL_R_T(s[6553]);
initGALL_R_O(s[6554]);
initGALL_P_I(s[6555]);
initGALL_P_F(s[6556]);
initGALL_P_T(s[6557]);
initGALL_P_O(s[6558]);
initWIDPEN_R_I(s[6559]);
initWIDPEN_R_F(s[6560]);
initWIDPEN_R_T(s[6561]);
initWIDPEN_R_O(s[6562]);
initWIDPEN_P_I(s[6563]);
initWIDPEN_P_F(s[6564]);
initWIDPEN_P_T(s[6565]);
initWIDPEN_P_O(s[6566]);
initCB_R_I(s[6567]);
initCB_R_F(s[6568]);
initCB_R_T(s[6569]);
initCB_R_O(s[6570]);
initCB_P_I(s[6571]);
initCB_P_F(s[6572]);
initCB_P_T(s[6573]);
initCB_P_O(s[6574]);
initCTC_R_I(s[6575]);
initCTC_R_F(s[6576]);
initCTC_R_T(s[6577]);
initCTC_R_O(s[6578]);
initCTC_P_I(s[6579]);
initCTC_P_F(s[6580]);
initCTC_P_T(s[6581]);
initCTC_P_O(s[6582]);
initOTH2_R_I(s[6583]);
initOTH2_R_F(s[6584]);
initOTH2_R_T(s[6585]);
initOTH2_R_O(s[6586]);
initOTH2_P_I(s[6587]);
initOTH2_P_F(s[6588]);
initOTH2_P_T(s[6589]);
initOTH2_P_O(s[6590]);
initOTHPAY_R_I(s[6591]);
initOTHPAY_R_F(s[6592]);
initOTHPAY_R_T(s[6593]);
initOTHPAY_R_O(s[6594]);
initOTHPAY_P_I(s[6595]);
initOTHPAY_P_F(s[6596]);
initOTHPAY_P_T(s[6597]);
initOTHPAY_P_O(s[6598]);
initSAVE_BU_I(s[6599]);
initSAVE_BU_F(s[6600]);
initSAVE_BU_T(s[6601]);
initSAVE_BU_O(s[6602]);
initSAVEI_BU_I(s[6603]);
initSAVEI_BU_F(s[6604]);
initSAVEI_BU_T(s[6605]);
initSAVEI_BU_O(s[6606]);
initTESSA_BU_I(s[6607]);
initTESSA_BU_F(s[6608]);
initTESSA_BU_T(s[6609]);
initTESSA_BU_O(s[6610]);
initTESSAI_BU_I(s[6611]);
initTESSAI_BU_F(s[6612]);
initTESSAI_BU_T(s[6613]);
initTESSAI_BU_O(s[6614]);
initCASHISA_BU_I(s[6615]);
initCASHISA_BU_F(s[6616]);
initCASHISA_BU_T(s[6617]);
initCASHISA_BU_O(s[6618]);
initLISA_BU_I(s[6619]);
initLISA_BU_F(s[6620]);
initLISA_BU_T(s[6621]);
initLISA_BU_O(s[6622]);
initSHISA_BU_I(s[6623]);
initSHISA_BU_F(s[6624]);
initSHISA_BU_T(s[6625]);
initSHISA_BU_O(s[6626]);
initISAI_BU_I(s[6627]);
initISAI_BU_F(s[6628]);
initISAI_BU_T(s[6629]);
initISAI_BU_O(s[6630]);
initPRBONDS_BU_I(s[6631]);
initPRBONDS_BU_F(s[6632]);
initPRBONDS_BU_T(s[6633]);
initPRBONDS_BU_O(s[6634]);
initPRBONDSI_BU_I(s[6635]);
initPRBONDSI_BU_F(s[6636]);
initPRBONDSI_BU_T(s[6637]);
initPRBONDSI_BU_O(s[6638]);
initNSAV_BU_I(s[6639]);
initNSAV_BU_F(s[6640]);
initNSAV_BU_T(s[6641]);
initNSAV_BU_O(s[6642]);
initNSAVI_BU_I(s[6643]);
initNSAVI_BU_F(s[6644]);
initNSAVI_BU_T(s[6645]);
initNSAVI_BU_O(s[6646]);
initPEP_BU_I(s[6647]);
initPEP_BU_F(s[6648]);
initPEP_BU_T(s[6649]);
initPEP_BU_O(s[6650]);
initPEPI_BU_I(s[6651]);
initPEPI_BU_F(s[6652]);
initPEPI_BU_T(s[6653]);
initPEPI_BU_O(s[6654]);
initSHARES_BU_I(s[6655]);
initSHARES_BU_F(s[6656]);
initSHARES_BU_T(s[6657]);
initSHARES_BU_O(s[6658]);
initSHARESI_BU_I(s[6659]);
initSHARESI_BU_F(s[6660]);
initSHARESI_BU_T(s[6661]);
initSHARESI_BU_O(s[6662]);
initTRUSTS_BU_I(s[6663]);
initTRUSTS_BU_F(s[6664]);
initTRUSTS_BU_T(s[6665]);
initTRUSTS_BU_O(s[6666]);
initTRUSTSI_BU_I(s[6667]);
initTRUSTSI_BU_F(s[6668]);
initTRUSTSI_BU_T(s[6669]);
initTRUSTSI_BU_O(s[6670]);
initBONDS_BU_I(s[6671]);
initBONDS_BU_F(s[6672]);
initBONDS_BU_T(s[6673]);
initBONDS_BU_O(s[6674]);
initBONDSI_BU_I(s[6675]);
initBONDSI_BU_F(s[6676]);
initBONDSI_BU_T(s[6677]);
initBONDSI_BU_O(s[6678]);
initOTHSAV_BU_I(s[6679]);
initOTHSAV_BU_F(s[6680]);
initOTHSAV_BU_T(s[6681]);
initOTHSAV_BU_O(s[6682]);
initOTHSAVI_BU_I(s[6683]);
initOTHSAVI_BU_F(s[6684]);
initOTHSAVI_BU_T(s[6685]);
initOTHSAVI_BU_O(s[6686]);
initLISAVE_BU_I(s[6687]);
initLISAVE_BU_F(s[6688]);
initLISAVE_BU_T(s[6689]);
initLISAVE_BU_O(s[6690]);
initHOME_BU_I(s[6691]);
initHOME_BU_F(s[6692]);
initHOME_BU_T(s[6693]);
initHOME_BU_O(s[6694]);
initHOMEI_BU_I(s[6695]);
initHOMEI_BU_F(s[6696]);
initHOMEI_BU_T(s[6697]);
initHOMEI_BU_O(s[6698]);
initFARM_BU_I(s[6699]);
initFARM_BU_F(s[6700]);
initFARM_BU_T(s[6701]);
initFARM_BU_O(s[6702]);
initFARMI_BU_I(s[6703]);
initFARMI_BU_F(s[6704]);
initFARMI_BU_T(s[6705]);
initFARMI_BU_O(s[6706]);
initTOTHASS_BU_I(s[6707]);
initTOTHASS_BU_F(s[6708]);
initTOTHASS_BU_T(s[6709]);
initTOTHASS_BU_O(s[6710]);
initCCARD_BU_I(s[6711]);
initCCARD_BU_F(s[6712]);
initCCARD_BU_T(s[6713]);
initCCARD_BU_O(s[6714]);
initPRDEBT_BU_I(s[6715]);
initPRDEBT_BU_F(s[6716]);
initPRDEBT_BU_T(s[6717]);
initPRDEBT_BU_O(s[6718]);
initODEBT_BU_I(s[6719]);
initODEBT_BU_F(s[6720]);
initODEBT_BU_T(s[6721]);
initODEBT_BU_O(s[6722]);
initJNTASS_BU_I(s[6723]);
initJNTASS_BU_F(s[6724]);
initJNTASS_BU_T(s[6725]);
initJNTASS_BU_O(s[6726]);
initWPPP_BU_I(s[6727]);
initWPPP_BU_F(s[6728]);
initWPPP_BU_T(s[6729]);
initWPPP_BU_O(s[6730]);
initWPPP_R_I(s[6731]);
initWPPP_R_F(s[6732]);
initWPPP_R_T(s[6733]);
initWPPP_R_O(s[6734]);
initWPPP_P_I(s[6735]);
initWPPP_P_F(s[6736]);
initWPPP_P_T(s[6737]);
initWPPP_P_O(s[6738]);
initTHP_BU_I(s[6739]);
initTHP_BU_F(s[6740]);
initTHP_BU_T(s[6741]);
initTHP_BU_O(s[6742]);
initTHP_R_I(s[6743]);
initTHP_R_F(s[6744]);
initTHP_R_T(s[6745]);
initTHP_R_O(s[6746]);
initTHP_P_I(s[6747]);
initTHP_P_F(s[6748]);
initTHP_P_T(s[6749]);
initTHP_P_O(s[6750]);
initNETPROF_BU_I(s[6751]);
initNETPROF_BU_F(s[6752]);
initNETPROF_BU_T(s[6753]);
initNETPROF_BU_O(s[6754]);
initNETPROF_R_I(s[6755]);
initNETPROF_R_F(s[6756]);
initNETPROF_R_T(s[6757]);
initNETPROF_R_O(s[6758]);
initNETPROF_P_I(s[6759]);
initNETPROF_P_F(s[6760]);
initNETPROF_P_T(s[6761]);
initNETPROF_P_O(s[6762]);
initSEDRAW_BU_I(s[6763]);
initSEDRAW_BU_F(s[6764]);
initSEDRAW_BU_T(s[6765]);
initSEDRAW_BU_O(s[6766]);
initSEDRAW_R_I(s[6767]);
initSEDRAW_R_F(s[6768]);
initSEDRAW_R_T(s[6769]);
initSEDRAW_R_O(s[6770]);
initSEDRAW_P_I(s[6771]);
initSEDRAW_P_F(s[6772]);
initSEDRAW_P_T(s[6773]);
initSEDRAW_P_O(s[6774]);
initBUSV_BU_I(s[6775]);
initBUSV_BU_F(s[6776]);
initBUSV_BU_T(s[6777]);
initBUSV_BU_O(s[6778]);
initBUSV_R_I(s[6779]);
initBUSV_R_F(s[6780]);
initBUSV_R_T(s[6781]);
initBUSV_R_O(s[6782]);
initBUSV_P_I(s[6783]);
initBUSV_P_F(s[6784]);
initBUSV_P_T(s[6785]);
initBUSV_P_O(s[6786]);
initOJ_BU_I(s[6787]);
initOJ_BU_F(s[6788]);
initOJ_BU_T(s[6789]);
initOJ_BU_O(s[6790]);
initOJ_R_I(s[6791]);
initOJ_R_F(s[6792]);
initOJ_R_T(s[6793]);
initOJ_R_O(s[6794]);
initOJ_P_I(s[6795]);
initOJ_P_F(s[6796]);
initOJ_P_T(s[6797]);
initOJ_P_O(s[6798]);
initOTHBUSV_BU_I(s[6799]);
initOTHBUSV_BU_F(s[6800]);
initOTHBUSV_BU_T(s[6801]);
initOTHBUSV_BU_O(s[6802]);
initOTHBUSV_R_I(s[6803]);
initOTHBUSV_R_F(s[6804]);
initOTHBUSV_R_T(s[6805]);
initOTHBUSV_R_O(s[6806]);
initOTHBUSV_P_I(s[6807]);
initOTHBUSV_P_F(s[6808]);
initOTHBUSV_P_T(s[6809]);
initOTHBUSV_P_O(s[6810]);
initHSVAL_HH_I(s[6811]);
initHSVAL_HH_F(s[6812]);
initHSVAL_HH_T(s[6813]);
initHSVAL_HH_O(s[6814]);
initHDEBT_HH_I(s[6815]);
initHDEBT_HH_F(s[6816]);
initHDEBT_HH_T(s[6817]);
initHDEBT_HH_O(s[6818]);
initTOTINC_BU_S(s[6819]);
initTOTINC_BU_F(s[6820]);
initTOTINC_BU_T(s[6821]);
initTOTINC_BU_NI2(s[6822]);
initTOTINC_BU_NI3(s[6823]);
initTOTINC_BU_NI4(s[6824]);
initEQTOTINC_BU_S(s[6825]);
initEQTOTINC_BU_F(s[6826]);
initEQTOTINC_BU_T(s[6827]);
initEQTOTINC_BU_NI2(s[6828]);
initEQTOTINC_BU_NI3(s[6829]);
initEQTOTINC_BU_NI4(s[6830]);
initEMPINC_BU_S(s[6831]);
initEMPINC_BU_F(s[6832]);
initEMPINC_BU_T(s[6833]);
initEMPINC_BU_NI2(s[6834]);
initEMPINC_BU_NI3(s[6835]);
initEMPINC_BU_NI4(s[6836]);
initEQEMPINC_BU_S(s[6837]);
initEQEMPINC_BU_F(s[6838]);
initEQEMPINC_BU_T(s[6839]);
initEQEMPINC_BU_NI2(s[6840]);
initEQEMPINC_BU_NI3(s[6841]);
initEQEMPINC_BU_NI4(s[6842]);
initEMPINC_R_S(s[6843]);
initEMPINC_R_F(s[6844]);
initEMPINC_R_T(s[6845]);
initEMPINC_R_NI2(s[6846]);
initEMPINC_R_NI3(s[6847]);
initEMPINC_R_NI4(s[6848]);
initEMPINC_P_S(s[6849]);
initEMPINC_P_F(s[6850]);
initEMPINC_P_T(s[6851]);
initEMPINC_P_NI2(s[6852]);
initEMPINC_P_NI3(s[6853]);
initEMPINC_P_NI4(s[6854]);
initSEINC_BU_S(s[6855]);
initSEINC_BU_F(s[6856]);
initSEINC_BU_T(s[6857]);
initSEINC_BU_NI2(s[6858]);
initSEINC_BU_NI3(s[6859]);
initSEINC_BU_NI4(s[6860]);
initEQSEINC_BU_S(s[6861]);
initEQSEINC_BU_F(s[6862]);
initEQSEINC_BU_T(s[6863]);
initEQSEINC_BU_NI2(s[6864]);
initEQSEINC_BU_NI3(s[6865]);
initEQSEINC_BU_NI4(s[6866]);
initSEINC_R_S(s[6867]);
initSEINC_R_F(s[6868]);
initSEINC_R_T(s[6869]);
initSEINC_R_NI2(s[6870]);
initSEINC_R_NI3(s[6871]);
initSEINC_R_NI4(s[6872]);
initSEINC_P_S(s[6873]);
initSEINC_P_F(s[6874]);
initSEINC_P_T(s[6875]);
initSEINC_P_NI2(s[6876]);
initSEINC_P_NI3(s[6877]);
initSEINC_P_NI4(s[6878]);
initPPINC_BU_S(s[6879]);
initPPINC_BU_F(s[6880]);
initPPINC_BU_T(s[6881]);
initPPINC_BU_NI2(s[6882]);
initPPINC_BU_NI3(s[6883]);
initPPINC_BU_NI4(s[6884]);
initEQPPINC_BU_S(s[6885]);
initEQPPINC_BU_F(s[6886]);
initEQPPINC_BU_T(s[6887]);
initEQPPINC_BU_NI2(s[6888]);
initEQPPINC_BU_NI3(s[6889]);
initEQPPINC_BU_NI4(s[6890]);
initPPINC_R_S(s[6891]);
initPPINC_R_F(s[6892]);
initPPINC_R_T(s[6893]);
initPPINC_R_NI2(s[6894]);
initPPINC_R_NI3(s[6895]);
initPPINC_R_NI4(s[6896]);
initPPINC_P_S(s[6897]);
initPPINC_P_F(s[6898]);
initPPINC_P_T(s[6899]);
initPPINC_P_NI2(s[6900]);
initPPINC_P_NI3(s[6901]);
initPPINC_P_NI4(s[6902]);
initSPINC_BU_S(s[6903]);
initSPINC_BU_F(s[6904]);
initSPINC_BU_T(s[6905]);
initSPINC_BU_NI2(s[6906]);
initSPINC_BU_NI3(s[6907]);
initSPINC_BU_NI4(s[6908]);
initEQSPINC_BU_S(s[6909]);
initEQSPINC_BU_F(s[6910]);
initEQSPINC_BU_T(s[6911]);
initEQSPINC_BU_NI2(s[6912]);
initEQSPINC_BU_NI3(s[6913]);
initEQSPINC_BU_NI4(s[6914]);
initSPINC_R_S(s[6915]);
initSPINC_R_F(s[6916]);
initSPINC_R_T(s[6917]);
initSPINC_R_NI2(s[6918]);
initSPINC_R_NI3(s[6919]);
initSPINC_R_NI4(s[6920]);
initSPINC_P_S(s[6921]);
initSPINC_P_F(s[6922]);
initSPINC_P_T(s[6923]);
initSPINC_P_NI2(s[6924]);
initSPINC_P_NI3(s[6925]);
initSPINC_P_NI4(s[6926]);
initBENINC_BU_S(s[6927]);
initBENINC_BU_F(s[6928]);
initBENINC_BU_T(s[6929]);
initBENINC_BU_NI2(s[6930]);
initBENINC_BU_NI3(s[6931]);
initBENINC_BU_NI4(s[6932]);
initEQBENINC_BU_S(s[6933]);
initEQBENINC_BU_F(s[6934]);
initEQBENINC_BU_T(s[6935]);
initEQBENINC_BU_NI2(s[6936]);
initEQBENINC_BU_NI3(s[6937]);
initEQBENINC_BU_NI4(s[6938]);
initBENINC_R_S(s[6939]);
initBENINC_R_F(s[6940]);
initBENINC_R_T(s[6941]);
initBENINC_R_NI2(s[6942]);
initBENINC_R_NI3(s[6943]);
initBENINC_R_NI4(s[6944]);
initBENINC_P_S(s[6945]);
initBENINC_P_F(s[6946]);
initBENINC_P_T(s[6947]);
initBENINC_P_NI2(s[6948]);
initBENINC_P_NI3(s[6949]);
initBENINC_P_NI4(s[6950]);
initASSINC_BU_S(s[6951]);
initASSINC_BU_F(s[6952]);
initASSINC_BU_T(s[6953]);
initASSINC_BU_NI2(s[6954]);
initASSINC_BU_NI3(s[6955]);
initASSINC_BU_NI4(s[6956]);
initEQASSINC_BU_S(s[6957]);
initEQASSINC_BU_F(s[6958]);
initEQASSINC_BU_T(s[6959]);
initEQASSINC_BU_NI2(s[6960]);
initEQASSINC_BU_NI3(s[6961]);
initEQASSINC_BU_NI4(s[6962]);
initOTHINC_BU_S(s[6963]);
initOTHINC_BU_F(s[6964]);
initOTHINC_BU_T(s[6965]);
initOTHINC_BU_NI2(s[6966]);
initOTHINC_BU_NI3(s[6967]);
initOTHINC_BU_NI4(s[6968]);
initEQOTHINC_BU_S(s[6969]);
initEQOTHINC_BU_F(s[6970]);
initEQOTHINC_BU_T(s[6971]);
initEQOTHINC_BU_NI2(s[6972]);
initEQOTHINC_BU_NI3(s[6973]);
initEQOTHINC_BU_NI4(s[6974]);
initOTHINC_R_S(s[6975]);
initOTHINC_R_F(s[6976]);
initOTHINC_R_T(s[6977]);
initOTHINC_R_NI2(s[6978]);
initOTHINC_R_NI3(s[6979]);
initOTHINC_R_NI4(s[6980]);
initOTHINC_P_S(s[6981]);
initOTHINC_P_F(s[6982]);
initOTHINC_P_T(s[6983]);
initOTHINC_P_NI2(s[6984]);
initOTHINC_P_NI3(s[6985]);
initOTHINC_P_NI4(s[6986]);
initSAVINGS_BU_S(s[6987]);
initSAVINGS_BU_F(s[6988]);
initSAVINGS_BU_T(s[6989]);
initSAVINGS_BU_NI2(s[6990]);
initSAVINGS_BU_NI3(s[6991]);
initSAVINGS_BU_NI4(s[6992]);
initINVESTS_BU_S(s[6993]);
initINVESTS_BU_F(s[6994]);
initINVESTS_BU_T(s[6995]);
initINVESTS_BU_NI2(s[6996]);
initINVESTS_BU_NI3(s[6997]);
initINVESTS_BU_NI4(s[6998]);
initGROSSFW_BU_S(s[6999]);
}
public void init_7000_7867(String line) {
initGROSSFW_BU_F(s[7000]);
initGROSSFW_BU_T(s[7001]);
initGROSSFW_BU_NI2(s[7002]);
initGROSSFW_BU_NI3(s[7003]);
initGROSSFW_BU_NI4(s[7004]);
initDEBT_BU_S(s[7005]);
initDEBT_BU_F(s[7006]);
initDEBT_BU_T(s[7007]);
initDEBT_BU_NI2(s[7008]);
initDEBT_BU_NI3(s[7009]);
initDEBT_BU_NI4(s[7010]);
initNETFW_BU_S(s[7011]);
initNETFW_BU_F(s[7012]);
initNETFW_BU_T(s[7013]);
initNETFW_BU_NI2(s[7014]);
initNETFW_BU_NI3(s[7015]);
initNETFW_BU_NI4(s[7016]);
initNETPW_BU_S(s[7017]);
initNETPW_BU_F(s[7018]);
initNETPW_BU_T(s[7019]);
initNETPW_BU_NI2(s[7020]);
initNETPW_BU_NI3(s[7021]);
initNETPW_BU_NI4(s[7022]);
initGROSSTOTNHW_BU_S(s[7023]);
initGROSSTOTNHW_BU_F(s[7024]);
initGROSSTOTNHW_BU_T(s[7025]);
initGROSSTOTNHW_BU_NI2(s[7026]);
initGROSSTOTNHW_BU_NI3(s[7027]);
initGROSSTOTNHW_BU_NI4(s[7028]);
initNETTOTNHW_BU_S(s[7029]);
initNETTOTNHW_BU_F(s[7030]);
initNETTOTNHW_BU_T(s[7031]);
initNETTOTNHW_BU_NI2(s[7032]);
initNETTOTNHW_BU_NI3(s[7033]);
initNETTOTNHW_BU_NI4(s[7034]);
initGROSSHW_BU_S(s[7035]);
initGROSSHW_BU_F(s[7036]);
initGROSSHW_BU_T(s[7037]);
initGROSSHW_BU_NI2(s[7038]);
initGROSSHW_BU_NI3(s[7039]);
initGROSSHW_BU_NI4(s[7040]);
initNETHW_BU_S(s[7041]);
initNETHW_BU_F(s[7042]);
initNETHW_BU_T(s[7043]);
initNETHW_BU_NI2(s[7044]);
initNETHW_BU_NI3(s[7045]);
initNETHW_BU_NI4(s[7046]);
initMGDEBT_BU_S(s[7047]);
initMGDEBT_BU_F(s[7048]);
initMGDEBT_BU_T(s[7049]);
initMGDEBT_BU_NI2(s[7050]);
initMGDEBT_BU_NI3(s[7051]);
initMGDEBT_BU_NI4(s[7052]);
initNETTOTW_BU_S(s[7053]);
initNETTOTW_BU_F(s[7054]);
initNETTOTW_BU_T(s[7055]);
initNETTOTW_BU_NI2(s[7056]);
initNETTOTW_BU_NI3(s[7057]);
initNETTOTW_BU_NI4(s[7058]);
initYQ5_BU_S(s[7059]);
initYQ5_BU_F(s[7060]);
initYQ10_BU_S(s[7061]);
initYQ10_BU_F(s[7062]);
initTNHWQ5_BU_S(s[7063]);
initTNHWQ5_BU_F(s[7064]);
initTNHWQ10_BU_S(s[7065]);
initTNHWQ10_BU_F(s[7066]);
initNFWQ5_BU_S(s[7067]);
initNFWQ5_BU_F(s[7068]);
initNFWQ10_BU_S(s[7069]);
initNFWQ10_BU_F(s[7070]);
initTOTWQ5_BU_S(s[7071]);
initTOTWQ5_BU_F(s[7072]);
initTOTWQ10_BU_S(s[7073]);
initTOTWQ10_BU_F(s[7074]);
initIDAUNIQ(s[7075]);
initIDAHH(s[7076]);
initHHID(s[7077]);
initWGT(s[7078]);
initLWGT(s[7079]);
initWAVE(s[7080]);
initPERID(s[7081]);
initPERSNO(s[7082]);
initCOUPID(s[7083]);
initCOUPID_INST(s[7084]);
initXCOUPID(s[7085]);
initXCOUPID_INST(s[7086]);
initFUTYPE(s[7087]);
initFUID(s[7088]);
initFUID_INST(s[7089]);
initBUNO(s[7090]);
initCPID(s[7091]);
initIDAUNIQ_P(s[7092]);
initINTDATM(s[7093]);
initINTDATY(s[7094]);
initIINTDATM(s[7095]);
initIINTDATY(s[7096]);
initAGE(s[7097]);
initAGE_P(s[7098]);
initINDOBYR(s[7099]);
initINDOBYR_P(s[7100]);
initSEX(s[7101]);
initSEX_P(s[7102]);
initELSA(s[7103]);
initELSA_P(s[7104]);
initINST(s[7105]);
initINST_P(s[7106]);
initRESPONDED_P(s[7107]);
initDIED_P(s[7108]);
initCOUPLE(s[7109]);
initCOUPLE_INST(s[7110]);
initHHANSHO(s[7111]);
initIANSHO(s[7112]);
initIANSIA(s[7113]);
initNUMANSIA(s[7114]);
initNUMANSIAFU(s[7115]);
initPROXY(s[7116]);
initNONWHITE(s[7117]);
initREFRESHTYPE(s[7118]);
initNUMBUS(s[7119]);
initNUMINELIG(s[7120]);
initNSAMPMEM(s[7121]);
initHOH(s[7122]);
initRELTOHOH(s[7123]);
initHOHSP(s[7124]);
initBUHEAD(s[7125]);
initFIRSTBU(s[7126]);
initNPEOPLE(s[7127]);
initNUMHHAD(s[7128]);
initNUMBUAD(s[7129]);
initNUMBUKID(s[7130]);
initNUMHHKID(s[7131]);
initAGEBUHEAD(s[7132]);
initAGEBUSP(s[7133]);
initSEXBUHEAD(s[7134]);
initAGEHOH(s[7135]);
initSEXHOH(s[7136]);
initNUMMALE(s[7137]);
initNUMFEMALE(s[7138]);
initNUMMALEAD(s[7139]);
initNUMFEMALEAD(s[7140]);
initAGEHHCH1(s[7141]);
initAGEHHCH2(s[7142]);
initAGEHHCH3(s[7143]);
initAGEHHCH4(s[7144]);
initAGEHHCH5(s[7145]);
initAGEHHCH6(s[7146]);
initAGEHHCH7(s[7147]);
initAGEHHCH8(s[7148]);
initAGEBUCH1(s[7149]);
initAGEBUCH2(s[7150]);
initAGEBUCH3(s[7151]);
initAGEBUCH4(s[7152]);
initAGEBUCH5(s[7153]);
initAGEBUCH6(s[7154]);
initAGEBUCH7(s[7155]);
initAGEBUCH8(s[7156]);
initCHAGE1(s[7157]);
initCHSEX1(s[7158]);
initCHTYPE1(s[7159]);
initCHSTAT1(s[7160]);
initCHAGE2(s[7161]);
initCHSEX2(s[7162]);
initCHTYPE2(s[7163]);
initCHSTAT2(s[7164]);
initCHAGE3(s[7165]);
initCHSEX3(s[7166]);
initCHTYPE3(s[7167]);
initCHSTAT3(s[7168]);
initCHAGE4(s[7169]);
initCHSEX4(s[7170]);
initCHTYPE4(s[7171]);
initCHSTAT4(s[7172]);
initCHAGE5(s[7173]);
initCHSEX5(s[7174]);
initCHTYPE5(s[7175]);
initCHSTAT5(s[7176]);
initCHAGE6(s[7177]);
initCHSEX6(s[7178]);
initCHTYPE6(s[7179]);
initCHSTAT6(s[7180]);
initCHAGE7(s[7181]);
initCHSEX7(s[7182]);
initCHTYPE7(s[7183]);
initCHSTAT7(s[7184]);
initCHAGE8(s[7185]);
initCHSEX8(s[7186]);
initCHTYPE8(s[7187]);
initCHSTAT8(s[7188]);
initCHAGE9(s[7189]);
initCHSEX9(s[7190]);
initCHTYPE9(s[7191]);
initCHSTAT9(s[7192]);
initCHAGE10(s[7193]);
initCHSEX10(s[7194]);
initCHTYPE10(s[7195]);
initCHSTAT10(s[7196]);
initCHAGE11(s[7197]);
initCHSEX11(s[7198]);
initCHTYPE11(s[7199]);
initCHSTAT11(s[7200]);
initCHAGE12(s[7201]);
initCHSEX12(s[7202]);
initCHTYPE12(s[7203]);
initCHSTAT12(s[7204]);
initCHAGE13(s[7205]);
initCHSEX13(s[7206]);
initCHTYPE13(s[7207]);
initCHSTAT13(s[7208]);
initCHAGE14(s[7209]);
initCHSEX14(s[7210]);
initCHTYPE14(s[7211]);
initCHSTAT14(s[7212]);
initCHAGE15(s[7213]);
initCHSEX15(s[7214]);
initCHTYPE15(s[7215]);
initCHSTAT15(s[7216]);
initCHAGE16(s[7217]);
initCHSEX16(s[7218]);
initCHTYPE16(s[7219]);
initCHSTAT16(s[7220]);
initNGRANDCH(s[7221]);
initNGRANDCHINHH(s[7222]);
initNSIBS(s[7223]);
initFAMTYPE(s[7224]);
initBUTYPE(s[7225]);
initAGEG5(s[7226]);
initAGEG5_BU(s[7227]);
initAGEG7(s[7228]);
initAGEG7_BU(s[7229]);
initAGEG10(s[7230]);
initAGEG10_BU(s[7231]);
initAGEG3(s[7232]);
initAGEG3_BU(s[7233]);
initSPAGE(s[7234]);
initSPAGE_BU(s[7235]);
initNUMBUK013(s[7236]);
initNUMBUK1418(s[7237]);
initNUMHHK013(s[7238]);
initNUMHHK1418(s[7239]);
initBUEQ(s[7240]);
initHHEQ(s[7241]);
initTENURE(s[7242]);
initSOCRENT(s[7243]);
initNUMHHLDRSINHH(s[7244]);
initAGEHHLDR1(s[7245]);
initAGEHHLDR2(s[7246]);
initAGEHHLDR3(s[7247]);
initAGEHHLDR4(s[7248]);
initNAMEONPROP(s[7249]);
initSPNAMEONPROP(s[7250]);
initMARSTAT(s[7251]);
initHHGRIDDHWORK(s[7252]);
initHHGRIDDHWORK_P(s[7253]);
initWPACTIVE(s[7254]);
initWPACTIVE_P(s[7255]);
initWSELFD(s[7256]);
initWSELFD_P(s[7257]);
initECPOS(s[7258]);
initWORKTIME(s[7259]);
initHOURS(s[7260]);
initHOURS_AJ(s[7261]);
initEVERWORK(s[7262]);
initPP_MEM(s[7263]);
initPP_CONT(s[7264]);
initPP_NCONT(s[7265]);
initPP_OCC(s[7266]);
initPP_NOCC(s[7267]);
initPP_OCCDB(s[7268]);
initPP_NOCCDB(s[7269]);
initPP_OCCDC(s[7270]);
initPP_NOCCDC(s[7271]);
initPP_OCCNK(s[7272]);
initPP_NOCCNK(s[7273]);
initPP_PER(s[7274]);
initPP_NPER(s[7275]);
initPP_NK(s[7276]);
initPP_NNK(s[7277]);
initPP_REC(s[7278]);
initPP_NREC(s[7279]);
initPP_RR(s[7280]);
initPP_NRR(s[7281]);
initPP_MAXYRS(s[7282]);
initEDEND(s[7283]);
initEDQUAL(s[7284]);
initQUAL2(s[7285]);
initQUAL3(s[7286]);
initSCHLEAVE(s[7287]);
initQUAL2_P(s[7288]);
initQUAL3_P(s[7289]);
initSCHLEAVE_P(s[7290]);
initLACKRES(s[7291]);
initLACKRESB(s[7292]);
initINHERGT0(s[7293]);
initINHERGT0B(s[7294]);
initINHERGT10(s[7295]);
initINHERGT10B(s[7296]);
initINHERGT100(s[7297]);
initINHERGT100B(s[7298]);
initBEQUESTGT50(s[7299]);
initBEQUESTGT50B(s[7300]);
initBEQUESTGT0(s[7301]);
initBEQUESTGT0B(s[7302]);
initBEQUESTGT150(s[7303]);
initBEQUESTGT150B(s[7304]);
initEXPLIVE(s[7305]);
initEXPLIVEB(s[7306]);
initEXPLIVE75(s[7307]);
initEXPLIVE80(s[7308]);
initEXPLIVE85(s[7309]);
initEXPLIVE90(s[7310]);
initEXPLIVE95(s[7311]);
initEXPLIVE100(s[7312]);
initEXPLIVE75B(s[7313]);
initEXPLIVE80B(s[7314]);
initEXPLIVE85B(s[7315]);
initEXPLIVE90B(s[7316]);
initEXPLIVE95B(s[7317]);
initEXPLIVE100B(s[7318]);
initEXWORK(s[7319]);
initEXWORKB(s[7320]);
initEXWORK55(s[7321]);
initEXWORK55B(s[7322]);
initEXWORK60(s[7323]);
initEXWORK60B(s[7324]);
initEXWORK65(s[7325]);
initEXWORK65B(s[7326]);
initEXHLIMW(s[7327]);
initEXHLIMWB(s[7328]);
initFINDIFF(s[7329]);
initNDEPRIV(s[7330]);
initSRH_HRS(s[7331]);
initSRH_HSE(s[7332]);
initHRSFIRST(s[7333]);
initSRH3_HRS(s[7334]);
initSRH3_HSE(s[7335]);
initSRH3_HRS_P(s[7336]);
initSRH3_HSE_P(s[7337]);
initLLSILL(s[7338]);
initHLIMWRK(s[7339]);
initHLIMWRKC(s[7340]);
initHEMOBWA(s[7341]);
initHEMOBSI(s[7342]);
initHEMOBCH(s[7343]);
initHEMOBCS(s[7344]);
initHEMOBCL(s[7345]);
initHEMOBST(s[7346]);
initHEMOBRE(s[7347]);
initHEMOBPU(s[7348]);
initHEMOBLI(s[7349]);
initHEMOBPI(s[7350]);
initHEMOB96(s[7351]);
initHEADLDR(s[7352]);
initHEADLWA(s[7353]);
initHEADLBA(s[7354]);
initHEADLEA(s[7355]);
initHEADLBE(s[7356]);
initHEADLWC(s[7357]);
initHEADLMA(s[7358]);
initHEADLDA(s[7359]);
initHEADLPR(s[7360]);
initHEADLSH(s[7361]);
initHEADLPH(s[7362]);
initHEADLCO(s[7363]);
initHEADLME(s[7364]);
initHEADLHO(s[7365]);
initHEADLMO(s[7366]);
initHEADL96(s[7367]);
initSMOKER(s[7368]);
initSMOKERSTAT(s[7369]);
initMALIVE(s[7370]);
initMOTHAGE(s[7371]);
initMAGEDIED(s[7372]);
initFALIVE(s[7373]);
initFATHAGE(s[7374]);
initFAGEDIED(s[7375]);
initDIKLIVM(s[7376]);
initDIFJOBM(s[7377]);
initNRIGHT(s[7378]);
initNUMTYPE5(s[7379]);
initNUMTYPE4(s[7380]);
initNUMTYPE2(s[7381]);
initEXECNN(s[7382]);
initMEMTOT(s[7383]);
initMEMTOTB(s[7384]);
initMAXNUMTYPE5(s[7385]);
initMAXNUMTYPE4(s[7386]);
initMAXNUMTYPE2(s[7387]);
initMAXEXECNN(s[7388]);
initMAXMEMTOTB(s[7389]);
initCESD_SC(s[7390]);
initCESD_NA(s[7391]);
initNROOMS(s[7392]);
initHOOLDM(s[7393]);
initHOMOVEM(s[7394]);
initHOYEARM(s[7395]);
initHOPAYM(s[7396]);
initRPI(s[7397]);
initCPIPLUS(s[7398]);
initFOODINL(s[7399]);
initFOODINU(s[7400]);
initFOODINT(s[7401]);
initFOODOUTL(s[7402]);
initFOODOUTU(s[7403]);
initFOODOUTT(s[7404]);
initCLOTHESL(s[7405]);
initCLOTHESU(s[7406]);
initCLOTHEST(s[7407]);
initLEISUREL(s[7408]);
initLEISUREU(s[7409]);
initLEISURET(s[7410]);
initTRANSFERSL(s[7411]);
initTRANSFERSU(s[7412]);
initTRANSFERST(s[7413]);
initUSESGAS(s[7414]);
initUSESELEC(s[7415]);
initUSESCOAL(s[7416]);
initUSESPARA(s[7417]);
initUSESOIL(s[7418]);
initUSESWOOD(s[7419]);
initUSESOTHERF(s[7420]);
initGASELECT(s[7421]);
initGASELECL(s[7422]);
initGASELECU(s[7423]);
initGASELECMETH(s[7424]);
initGAST(s[7425]);
initGASL(s[7426]);
initGASU(s[7427]);
initGASMETH(s[7428]);
initELECT(s[7429]);
initELECL(s[7430]);
initELECU(s[7431]);
initELECMETH(s[7432]);
initCOALL(s[7433]);
initCOALU(s[7434]);
initCOALT(s[7435]);
initPARAL(s[7436]);
initPARAU(s[7437]);
initPARAT(s[7438]);
initOILL(s[7439]);
initOILU(s[7440]);
initOILT(s[7441]);
initWOODL(s[7442]);
initWOODU(s[7443]);
initWOODT(s[7444]);
initOTHERFL(s[7445]);
initOTHERFU(s[7446]);
initOTHERFT(s[7447]);
initGROSSRENTL(s[7448]);
initGROSSRENTU(s[7449]);
initGROSSRENTT(s[7450]);
initGETSHB(s[7451]);
initNETRENTL(s[7452]);
initNETRENTU(s[7453]);
initNETRENTT(s[7454]);
initRENTINCWA(s[7455]);
initRENTINCSE(s[7456]);
initRENTINCLA(s[7457]);
initRENTINCGA(s[7458]);
initRENTINCHE(s[7459]);
initRENTINCCO(s[7460]);
initRENTINCME(s[7461]);
initRENTINCGD(s[7462]);
initRENTINCCL(s[7463]);
initRENTINCWP(s[7464]);
initRENTINCSG(s[7465]);
initRENTINC85(s[7466]);
initMORTPAYL(s[7467]);
initMORTPAYU(s[7468]);
initMORTPAYT(s[7469]);
initMORTPAYXL(s[7470]);
initMORTPAYXU(s[7471]);
initMORTPAYXT(s[7472]);
initMORTINCPP(s[7473]);
initMORTINCBI(s[7474]);
initMORTINCPI(s[7475]);
initMORTINC85(s[7476]);
initIDAUNIQ(s[7477]);
initIDAHH(s[7478]);
initPERID(s[7479]);
initFFERROR(s[7480]);
initWPPENN(s[7481]);
initPENID(s[7482]);
initWPFFPENT(s[7483]);
initWPFFDCDB(s[7484]);
initWPFFCURP(s[7485]);
initWPFFRECP(s[7486]);
initWPFFYBS(s[7487]);
initWPPREV(s[7488]);
initWPPENT(s[7489]);
initWPNEWP(s[7490]);
initWPCURR(s[7491]);
initWPLFTPCH(s[7492]);
initWPLFTPOF(s[7493]);
initWPLFTPEL(s[7494]);
initWPLFTPAF(s[7495]);
initWPLFTPRT(s[7496]);
initWPLFTPRE(s[7497]);
initWPLFTP95(s[7498]);
initWPCURP(s[7499]);
initWPSRUL(s[7500]);
initWPDPS(s[7501]);
initWPDCDB(s[7502]);
initWPNRA(s[7503]);
initWPBTHA(s[7504]);
initWPBTHP(s[7505]);
initWPERA(s[7506]);
initWPYAER(s[7507]);
initWPDESP(s[7508]);
initWPDESPC(s[7509]);
initWPFSAP(s[7510]);
initWPFSAPC(s[7511]);
initWPPLP(s[7512]);
initWPPLPH(s[7513]);
initWPLUMP(s[7514]);
initWPLUMPL(s[7515]);
initWPLUMPU(s[7516]);
initWPLUMPE(s[7517]);
initWPLUMPR(s[7518]);
initWPPTP(s[7519]);
initWPPSAL(s[7520]);
initWPASAL(s[7521]);
initWPASALL(s[7522]);
initWPASALU(s[7523]);
initWPASALE(s[7524]);
initWPASALR(s[7525]);
initWPYBS(s[7526]);
initWPERC(s[7527]);
initWPMC(s[7528]);
initWPMCA(s[7529]);
initWPPERC(s[7530]);
initWPMFRAC(s[7531]);
initWPACON(s[7532]);
initWPADY(s[7533]);
initWPMMIN(s[7534]);
initWPACOA(s[7535]);
initWPACOB(s[7536]);
initWPACOC(s[7537]);
initWPFRAS(s[7538]);
initWPCONY(s[7539]);
initWPPCON(s[7540]);
initWPYCAT(s[7541]);
initWPYCA(s[7542]);
initWPMCAF(s[7543]);
initWPYFRAC(s[7544]);
initWPLCOY(s[7545]);
initWPLCOM(s[7546]);
initWPNIRR(s[7547]);
initWPMCON(s[7548]);
initWPAC(s[7549]);
initWPFSC(s[7550]);
initWPRCON(s[7551]);
initWPRCMO(s[7552]);
initWPRCRE(s[7553]);
initWPRCST(s[7554]);
initWPRCRI(s[7555]);
initWPRCPU(s[7556]);
initWPRC95(s[7557]);
initWPRCMMO(s[7558]);
initWPRCMRE(s[7559]);
initWPRCMST(s[7560]);
initWPRCMRI(s[7561]);
initWPRCMPU(s[7562]);
initWPRCMOH(s[7563]);
initWPRCMUN(s[7564]);
initWPRCMAF(s[7565]);
initWPRCMNK(s[7566]);
initWPRCM85(s[7567]);
initWPRCM86(s[7568]);
initWPCEMP(s[7569]);
initWPECPP(s[7570]);
initWPAECP(s[7571]);
initWPEPER(s[7572]);
initWPFSEC(s[7573]);
initWPMEC(s[7574]);
initWPAMEC(s[7575]);
initWPFSCP(s[7576]);
initWPFSCO(s[7577]);
initWPFSAV(s[7578]);
initWPPFVA(s[7579]);
initWPPFVL(s[7580]);
initWPPFVU(s[7581]);
initWPPFVE(s[7582]);
initWPPFVR(s[7583]);
initWPDPSP(s[7584]);
initWPERCP(s[7585]);
initWPREC(s[7586]);
initWPRGHX(s[7587]);
initWPPAM(s[7588]);
initWPPA(s[7589]);
initWPPATL(s[7590]);
initWPPATU(s[7591]);
initWPPATE(s[7592]);
initWPPATR(s[7593]);
initWPPAAL(s[7594]);
initWPPAAU(s[7595]);
initWPPAAE(s[7596]);
initWPPAAR(s[7597]);
initWPIRLS(s[7598]);
initWPIRLSL(s[7599]);
initWPIRLSU(s[7600]);
initWPIRLSE(s[7601]);
initWPIRLSR(s[7602]);
initWPIRPAN(s[7603]);
initWPIRPSV(s[7604]);
initWPIRPIV(s[7605]);
initWPIRPLA(s[7606]);
initWPIRPDB(s[7607]);
initWPIRPSP(s[7608]);
initWPIRPFR(s[7609]);
initWPIRP95(s[7610]);
initWPAPF(s[7611]);
initWPAPFL(s[7612]);
initWPAPFU(s[7613]);
initWPAPFE(s[7614]);
initWPAPFR(s[7615]);
initWPPTOP(s[7616]);
initWPPENB(s[7617]);
initWPPENTL(s[7618]);
initWPPENTU(s[7619]);
initWPPENTE(s[7620]);
initWPPENTR(s[7621]);
initWPPENAL(s[7622]);
initWPPENAU(s[7623]);
initWPPENAE(s[7624]);
initWPPENAR(s[7625]);
initWPDS(s[7626]);
initWPDE(s[7627]);
initWPINCT(s[7628]);
initWPINF(s[7629]);
initWPPAY(s[7630]);
initWPPYR(s[7631]);
initWPPYRWL(s[7632]);
initWPPYRWU(s[7633]);
initWPPYRWE(s[7634]);
initWPPYRWR(s[7635]);
initWPPYRFL(s[7636]);
initWPPYRFU(s[7637]);
initWPPYRFE(s[7638]);
initWPPYRFR(s[7639]);
initWPPYRML(s[7640]);
initWPPYRMU(s[7641]);
initWPPYRME(s[7642]);
initWPPYRMR(s[7643]);
initWPPYRYL(s[7644]);
initWPPYRYU(s[7645]);
initWPPYRYE(s[7646]);
initWPPYRYR(s[7647]);
initWPPYROL(s[7648]);
initWPPYROU(s[7649]);
initWPPYROE(s[7650]);
initWPPYROR(s[7651]);
initWPTAX(s[7652]);
initWPNEW(s[7653]);
initWPDCW(s[7654]);
initWPDCWA(s[7655]);
initWPDCWAL(s[7656]);
initWPDCWAU(s[7657]);
initWPDCWAE(s[7658]);
initWPDCWAR(s[7659]);
initWPDCWPSV(s[7660]);
initWPDCWPIN(s[7661]);
initWPDCWPLA(s[7662]);
initWPDCWPDB(s[7663]);
initWPDCWPSP(s[7664]);
initWPDCWPFR(s[7665]);
initWPDCWP95(s[7666]);
initWPDDFV(s[7667]);
initWPDDFVL(s[7668]);
initWPDDFVU(s[7669]);
initWPDDFVE(s[7670]);
initWPDDFVR(s[7671]);
initWPDCRF(s[7672]);
initWPDCFV(s[7673]);
initWPDCFVL(s[7674]);
initWPDCFVU(s[7675]);
initWPDCFVE(s[7676]);
initWPDCFVR(s[7677]);
initWPDCPAN(s[7678]);
initWPDCPRG(s[7679]);
initWPDCPSI(s[7680]);
initWPDCPMU(s[7681]);
initWPDCPDK(s[7682]);
initWPLUMPS(s[7683]);
initWPLUMPA(s[7684]);
initWPLUMPAL(s[7685]);
initWPLUMPAU(s[7686]);
initWPLUMPAE(s[7687]);
initWPLUMPAR(s[7688]);
initWPIFSNO(s[7689]);
initWPIFSEM(s[7690]);
initWPIFSRE(s[7691]);
initWPIFSCO(s[7692]);
initWPIFSPR(s[7693]);
initWPIFSAC(s[7694]);
initWPIFSFA(s[7695]);
initWPIFSRP(s[7696]);
initWPIFSFR(s[7697]);
initWPINFS95(s[7698]);
initWPFINFO(s[7699]);
initWPBPSPC(s[7700]);
initWPPSPC(s[7701]);
initDEMPPEN(s[7702]);
initDDBDC(s[7703]);
initDCURPEN(s[7704]);
initIDAUNIQ(s[7705]);
initIDAHH(s[7706]);
initPERID(s[7707]);
initSAMPTYP(s[7708]);
initFINSTAT(s[7709]);
initW8NUROUT(s[7710]);
initW8GSOUT(s[7711]);
initW8BPOUT(s[7712]);
initW8BSOUT(s[7713]);
initVISMON(s[7714]);
initVISYEAR(s[7715]);
initNURELIG(s[7716]);
initFQNURSE(s[7717]);
initMEDCNJD(s[7718]);
initSTATINS(s[7719]);
initSTATINA(s[7720]);
initBPCONST(s[7721]);
initCONSUBEA(s[7722]);
initCONSUBSM(s[7723]);
initCONSUBDR(s[7724]);
initCONSUBEX(s[7725]);
initCONSUBNO(s[7726]);
initCUFFSIZE(s[7727]);
initAIRTEMP(s[7728]);
initSYS1(s[7729]);
initDIAS1(s[7730]);
initPULSE1(s[7731]);
initMAP1(s[7732]);
initFULL1(s[7733]);
initSYS2(s[7734]);
initDIAS2(s[7735]);
initPULSE2(s[7736]);
initMAP2(s[7737]);
initFULL2(s[7738]);
initSYS3(s[7739]);
initDIAS3(s[7740]);
initPULSE3(s[7741]);
initMAP3(s[7742]);
initFULL3(s[7743]);
initWHYNOBP(s[7744]);
initRESPBPS(s[7745]);
initNATTBPCO(s[7746]);
initNATTBPUP(s[7747]);
initNATTBPER(s[7748]);
initNATTBPCU(s[7749]);
initNATTBPEQ(s[7750]);
initNATTBP95(s[7751]);
initDIFBPCNO(s[7752]);
initDIFBPCLE(s[7753]);
initDIFBPCUP(s[7754]);
initDIFBPCCU(s[7755]);
initDIFBPCEQ(s[7756]);
initDIFBPCER(s[7757]);
initDIBPC95(s[7758]);
initMMGSWIL(s[7759]);
initMMGSDOM(s[7760]);
initMMGSSTA(s[7761]);
initMMGSSTP(s[7762]);
initMMGSD1(s[7763]);
initMMGSN1(s[7764]);
initMMGSD2(s[7765]);
initMMGSN2(s[7766]);
initMMGSD3(s[7767]);
initMMGSN3(s[7768]);
initMMGSTP(s[7769]);
initMMGSRES(s[7770]);
initMMGSPRRE(s[7771]);
initMMGSPRPA(s[7772]);
initMMGSPREQ(s[7773]);
initMMGSPR95(s[7774]);
initCLOTB(s[7775]);
initFIT(s[7776]);
initBSWILL(s[7777]);
initFASTASK(s[7778]);
initFASTELIG(s[7779]);
initLIGHTEAT(s[7780]);
initWHATEAT(s[7781]);
initREFBSCDI(s[7782]);
initREFBSCNE(s[7783]);
initREFBSCTE(s[7784]);
initREFBSCIL(s[7785]);
initREFBSCHI(s[7786]);
initREFBSC95(s[7787]);
initCONSPAX(s[7788]);
initSAMPTAK(s[7789]);
initSAMDIFNO(s[7790]);
initSAMDIFIN(s[7791]);
initSAMDIFVE(s[7792]);
initSAMDIFSE(s[7793]);
initSAMDIFFA(s[7794]);
initSAMDIFTO(s[7795]);
initSAMDIF95(s[7796]);
initNOBSMSV(s[7797]);
initNOBSMUP(s[7798]);
initNOBSMFA(s[7799]);
initNOBSM95(s[7800]);
initCHOL(s[7801]);
initHDL(s[7802]);
initTRIG(s[7803]);
initLDL(s[7804]);
initRTIN(s[7805]);
initHSCRP(s[7806]);
initVITD(s[7807]);
initIGF1(s[7808]);
initHBA1C(s[7809]);
initFGLU(s[7810]);
initCFIB(s[7811]);
initHGB(s[7812]);
initMCH(s[7813]);
initWBC(s[7814]);
initCF200PRE(s[7815]);
initCF240(s[7816]);
initCF241(s[7817]);
initCF242(s[7818]);
initCF201G1(s[7819]);
initCF202H1(s[7820]);
initCF203I1(s[7821]);
initCF216C(s[7822]);
initCF204A1(s[7823]);
initCF205B1(s[7824]);
initCF206C1(s[7825]);
initCF207D1(s[7826]);
initCF208E1(s[7827]);
initCF209F1(s[7828]);
initCF210J1(s[7829]);
initCF211K1(s[7830]);
initCF212L1(s[7831]);
initCF213M1(s[7832]);
initCF214N1(s[7833]);
initCF215O1(s[7834]);
initCF221G2(s[7835]);
initCF222H2(s[7836]);
initCF223I2(s[7837]);
initCF224A2(s[7838]);
initCF225B2(s[7839]);
initCF226C2(s[7840]);
initCF227D2(s[7841]);
initCF228E2(s[7842]);
initCF229F2(s[7843]);
initCF230J2(s[7844]);
initCF231K2(s[7845]);
initCF232L2(s[7846]);
initCF233M2(s[7847]);
initCF234N2(s[7848]);
initCF235O2(s[7849]);
initCFSTOP1(s[7850]);
initCFSTOP2(s[7851]);
initCFSTOP3(s[7852]);
initCFSTOP4(s[7853]);
initCFSTOP5(s[7854]);
initCFSTOP6(s[7855]);
initCFSTOP7(s[7856]);
initCFSTOP8(s[7857]);
initCFSTOP95(s[7858]);
initINDAGER(s[7859]);
initINDSEX(s[7860]);
initBPRESPC(s[7861]);
initSYSVAL(s[7862]);
initDIAVAL(s[7863]);
initPULVAL(s[7864]);
initMAPVAL(s[7865]);
initW8NURWT(s[7866]);
initW8BLDWT(s[7867]);
}
}
